// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7155 0 0
// CreateNature ;
  57: CALL 20480 0 0
// PrepareRussian ;
  61: CALL 5654 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 10474 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 40934 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 40934 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 40934 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 40934 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 40934 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 40934 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 40934 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 40934 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 40934 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 40934 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// if IsDead ( tmp ) then
3196: LD_VAR 0 3
3200: PPUSH
3201: CALL_OW 301
3205: IFFALSE 3217
// tmp := JMM ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_EXP 1
3216: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3217: LD_INT 81
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 91
3229: PUSH
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: NOT
3252: PUSH
3253: LD_EXP 26
3257: PUSH
3258: LD_INT 6300
3260: LESS
3261: OR
3262: IFFALSE 3189
// blockSpawn := 1 ;
3264: LD_ADDR_EXP 29
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// uc_side := 4 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3280: LD_ADDR_EXP 15
3284: PUSH
3285: LD_STRING Joan
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_EXP 43
3295: PPUSH
3296: CALL 40934 0 3
3300: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3301: LD_EXP 15
3305: PPUSH
3306: LD_VAR 0 3
3310: PPUSH
3311: CALL_OW 250
3315: PPUSH
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 251
3325: PPUSH
3326: LD_INT 5
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3336: LD_EXP 15
3340: PPUSH
3341: LD_INT 250
3343: PPUSH
3344: CALL_OW 234
// InGameOn ;
3348: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3352: LD_EXP 15
3356: PPUSH
3357: CALL_OW 87
// wait ( 0 0$2 ) ;
3361: LD_INT 70
3363: PPUSH
3364: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 122
// wait ( 0 0$1 ) ;
3386: LD_INT 35
3388: PPUSH
3389: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_EXP 15
3402: PPUSH
3403: CALL_OW 112
// wait ( 0 0$2 ) ;
3407: LD_INT 70
3409: PPUSH
3410: CALL_OW 67
// DialogueOn ;
3414: CALL_OW 6
// if tmp = JMM then
3418: LD_VAR 0 3
3422: PUSH
3423: LD_EXP 1
3427: EQUAL
3428: IFFALSE 3577
// begin ComTurnUnit ( JMM , Joan ) ;
3430: LD_EXP 1
3434: PPUSH
3435: LD_EXP 15
3439: PPUSH
3440: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3444: LD_EXP 1
3448: PPUSH
3449: LD_STRING D5b-JMM-1
3451: PPUSH
3452: CALL_OW 88
// DialogueOff ;
3456: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3460: LD_EXP 15
3464: PPUSH
3465: LD_INT 500
3467: PPUSH
3468: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3472: LD_EXP 15
3476: PPUSH
3477: LD_EXP 1
3481: PPUSH
3482: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3486: LD_EXP 1
3490: PPUSH
3491: LD_EXP 15
3495: PPUSH
3496: CALL_OW 119
// wait ( 0 0$1 ) ;
3500: LD_INT 35
3502: PPUSH
3503: CALL_OW 67
// DialogueOn ;
3507: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3511: LD_EXP 15
3515: PPUSH
3516: LD_STRING D5b-Joan-1
3518: PPUSH
3519: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5b-JMM-2
3530: PPUSH
3531: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3535: LD_EXP 15
3539: PPUSH
3540: LD_STRING D5b-Joan-2
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING D5b-JMM-3
3554: PPUSH
3555: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-3
3566: PPUSH
3567: CALL_OW 88
// DialogueOff ;
3571: CALL_OW 7
// end else
3575: GO 3942
// begin ComTurnUnit ( tmp , Joan ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_EXP 15
3586: PPUSH
3587: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_STRING D5a-Sol1-1
3598: PPUSH
3599: CALL_OW 88
// DialogueOff ;
3603: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_INT 500
3614: PPUSH
3615: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3619: LD_EXP 15
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3633: LD_VAR 0 3
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 119
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// DialogueOn ;
3654: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3658: LD_EXP 15
3662: PPUSH
3663: LD_STRING D5a-Joan-1
3665: PPUSH
3666: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_STRING D5a-Sol1-2
3677: PPUSH
3678: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3682: LD_EXP 15
3686: PPUSH
3687: LD_STRING D5a-Joan-2
3689: PPUSH
3690: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_STRING D5a-Sol1-3
3701: PPUSH
3702: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-3
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-4
3725: PPUSH
3726: CALL_OW 88
// DialogueOff ;
3730: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3734: LD_EXP 1
3738: PUSH
3739: LD_INT 55
3741: PUSH
3742: EMPTY
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: IN
3750: IFFALSE 3773
// begin ComMoveUnit ( JMM , Joan ) ;
3752: LD_EXP 1
3756: PPUSH
3757: LD_EXP 15
3761: PPUSH
3762: CALL_OW 112
// wait ( 0 0$05 ) ;
3766: LD_INT 175
3768: PPUSH
3769: CALL_OW 67
// end ; ComExit ( JMM ) ;
3773: LD_EXP 1
3777: PPUSH
3778: CALL 78781 0 1
// wait ( 0 0$1 ) ;
3782: LD_INT 35
3784: PPUSH
3785: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3789: LD_INT 35
3791: PPUSH
3792: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3796: LD_EXP 15
3800: PUSH
3801: LD_VAR 0 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PPUSH
3810: LD_EXP 1
3814: PPUSH
3815: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3819: LD_EXP 15
3823: PPUSH
3824: LD_EXP 1
3828: PPUSH
3829: CALL_OW 296
3833: PUSH
3834: LD_INT 5
3836: LESS
3837: IFFALSE 3789
// ComTurnUnit ( Joan , JMM ) ;
3839: LD_EXP 15
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_EXP 15
3862: PPUSH
3863: CALL_OW 119
// wait ( 0 0$1 ) ;
3867: LD_INT 35
3869: PPUSH
3870: CALL_OW 67
// DialogueOn ;
3874: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3878: LD_EXP 15
3882: PPUSH
3883: LD_STRING D5a-Joan-4
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D5a-JMM-4
3897: PPUSH
3898: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3902: LD_EXP 15
3906: PPUSH
3907: LD_STRING D5a-Joan-5
3909: PPUSH
3910: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D5a-JMM-5
3921: PPUSH
3922: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-6
3933: PPUSH
3934: CALL_OW 88
// DialogueOff ;
3938: CALL_OW 7
// end ; DialogueOn ;
3942: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D6-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3958: LD_EXP 15
3962: PPUSH
3963: LD_STRING D6-Joan-1
3965: PPUSH
3966: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3970: LD_EXP 1
3974: PPUSH
3975: LD_STRING D6-JMM-2
3977: PPUSH
3978: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3982: LD_EXP 15
3986: PPUSH
3987: LD_STRING D6-Joan-2
3989: PPUSH
3990: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-3
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-3
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-4
4025: PPUSH
4026: CALL_OW 88
// DialogueOff ;
4030: CALL_OW 7
// InGameOff ;
4034: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4038: LD_EXP 15
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4050: LD_STRING MJ
4052: PPUSH
4053: CALL_OW 337
// joanStatus = 1 ;
4057: LD_ADDR_EXP 16
4061: PUSH
4062: LD_INT 1
4064: ST_TO_ADDR
// blockSpawn = 0 ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// end ;
4073: LD_VAR 0 1
4077: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4078: LD_INT 0
4080: PPUSH
4081: PPUSH
// if not number or number > 8 then
4082: LD_VAR 0 1
4086: NOT
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_INT 8
4095: GREATER
4096: OR
4097: IFFALSE 4101
// exit ;
4099: GO 5649
// repeat wait ( 0 0$7 ) ;
4101: LD_INT 245
4103: PPUSH
4104: CALL_OW 67
// until blockSpawn = 0 ;
4108: LD_EXP 29
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4101
// uc_side := 1 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// uc_nation := 1 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// InitHc ;
4134: CALL_OW 19
// if number = 1 then
4138: LD_VAR 0 1
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4322
// begin hc_class := 3 ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 3
4155: ST_TO_ADDR
// hc_sex := sex_male ;
4156: LD_ADDR_OWVAR 27
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING SecondCharsGal
4171: ST_TO_ADDR
// hc_face_number := 55 ;
4172: LD_ADDR_OWVAR 34
4176: PUSH
4177: LD_INT 55
4179: ST_TO_ADDR
// hc_name := George McCarthy ;
4180: LD_ADDR_OWVAR 26
4184: PUSH
4185: LD_STRING George McCarthy
4187: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4188: LD_ADDR_OWVAR 29
4192: PUSH
4193: LD_INT 11
4195: PUSH
4196: LD_INT 10
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4203: LD_ADDR_OWVAR 30
4207: PUSH
4208: LD_INT 0
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4226: LD_ADDR_OWVAR 31
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: LD_INT 3
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
// un = CreateHuman ;
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 23
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: CALL_OW 87
// wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// DialogueOn ;
4290: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_STRING D11d-Sol4-1
4301: PPUSH
4302: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4306: LD_EXP 1
4310: PPUSH
4311: LD_STRING D11d-JMM-1
4313: PPUSH
4314: CALL_OW 88
// DialogueOff ;
4318: CALL_OW 7
// end ; if number = 2 then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 2
4329: EQUAL
4330: IFFALSE 4506
// begin hc_class := 1 ;
4332: LD_ADDR_OWVAR 28
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// hc_sex := sex_male ;
4340: LD_ADDR_OWVAR 27
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4348: LD_ADDR_OWVAR 33
4352: PUSH
4353: LD_STRING AmGalRemake
4355: ST_TO_ADDR
// hc_face_number := 7 ;
4356: LD_ADDR_OWVAR 34
4360: PUSH
4361: LD_INT 7
4363: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Bobby Jordan
4371: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4372: LD_ADDR_OWVAR 29
4376: PUSH
4377: LD_INT 9
4379: PUSH
4380: LD_INT 11
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4387: LD_ADDR_OWVAR 30
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 0
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4410: LD_ADDR_OWVAR 31
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: ST_TO_ADDR
// un = CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 24
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: CALL_OW 49
// wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4465: LD_VAR 0 3
4469: PPUSH
4470: CALL_OW 87
// DialogueOn ;
4474: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_STRING D11b-Sol3-1
4485: PPUSH
4486: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4490: LD_EXP 1
4494: PPUSH
4495: LD_STRING D11b-JMM-1
4497: PPUSH
4498: CALL_OW 88
// DialogueOff ;
4502: CALL_OW 7
// end ; if number = 3 then
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 3
4513: EQUAL
4514: IFFALSE 4678
// begin hc_class := 1 ;
4516: LD_ADDR_OWVAR 28
4520: PUSH
4521: LD_INT 1
4523: ST_TO_ADDR
// hc_sex := sex_male ;
4524: LD_ADDR_OWVAR 27
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// hc_gallery := DJ ;
4532: LD_ADDR_OWVAR 33
4536: PUSH
4537: LD_STRING DJ
4539: ST_TO_ADDR
// hc_face_number := 1 ;
4540: LD_ADDR_OWVAR 34
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// hc_name := Darius Dajay ;
4548: LD_ADDR_OWVAR 26
4552: PUSH
4553: LD_STRING Darius Dajay
4555: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4556: LD_ADDR_OWVAR 29
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: LD_INT 11
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4571: LD_ADDR_OWVAR 30
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4594: LD_ADDR_OWVAR 31
4598: PUSH
4599: LD_INT 4
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// un = CreateHuman ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: CALL_OW 44
4626: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: LD_INT 25
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL_OW 87
// wait ( 0 0$1 ) ;
4651: LD_INT 35
4653: PPUSH
4654: CALL_OW 67
// DialogueOn ;
4658: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_STRING D11f-Sol5-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 4 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 4
4685: EQUAL
4686: IFFALSE 4823
// begin hc_class := 2 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 2
4695: ST_TO_ADDR
// hc_sex := sex_female ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 2
4703: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING SecondCharsGal
4711: ST_TO_ADDR
// hc_face_number := 46 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 46
4719: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Sylvia Creak
4727: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 9
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 26
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// end ; if number = 5 then
4823: LD_VAR 0 1
4827: PUSH
4828: LD_INT 5
4830: EQUAL
4831: IFFALSE 5007
// begin hc_class := 1 ;
4833: LD_ADDR_OWVAR 28
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// hc_sex := sex_female ;
4841: LD_ADDR_OWVAR 27
4845: PUSH
4846: LD_INT 2
4848: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4849: LD_ADDR_OWVAR 33
4853: PUSH
4854: LD_STRING SecondCharsGal
4856: ST_TO_ADDR
// hc_face_number := 37 ;
4857: LD_ADDR_OWVAR 34
4861: PUSH
4862: LD_INT 37
4864: ST_TO_ADDR
// hc_name := Malena Johnson ;
4865: LD_ADDR_OWVAR 26
4869: PUSH
4870: LD_STRING Malena Johnson
4872: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4873: LD_ADDR_OWVAR 29
4877: PUSH
4878: LD_INT 11
4880: PUSH
4881: LD_INT 10
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4888: LD_ADDR_OWVAR 30
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: LD_INT 0
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4911: LD_ADDR_OWVAR 31
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// un = CreateHuman ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: CALL_OW 44
4943: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4944: LD_VAR 0 3
4948: PPUSH
4949: LD_INT 27
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: CALL_OW 87
// wait ( 0 0$1 ) ;
4968: LD_INT 35
4970: PPUSH
4971: CALL_OW 67
// DialogueOn ;
4975: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4979: LD_VAR 0 3
4983: PPUSH
4984: LD_STRING D11c-FSol3-1
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D11c-JMM-1
4998: PPUSH
4999: CALL_OW 88
// DialogueOff ;
5003: CALL_OW 7
// end ; if number = 6 then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 6
5014: EQUAL
5015: IFFALSE 5189
// begin hc_class := 1 ;
5017: LD_ADDR_OWVAR 28
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// hc_sex := sex_male ;
5025: LD_ADDR_OWVAR 27
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5033: LD_ADDR_OWVAR 33
5037: PUSH
5038: LD_STRING AmGalRemake
5040: ST_TO_ADDR
// hc_face_number := 1 ;
5041: LD_ADDR_OWVAR 34
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// hc_name := Charles Brown ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING Charles Brown
5056: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5057: LD_ADDR_OWVAR 29
5061: PUSH
5062: LD_INT 12
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5072: LD_ADDR_OWVAR 30
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 0
5082: PUSH
5083: LD_INT 0
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5095: LD_ADDR_OWVAR 31
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: ST_TO_ADDR
// un = CreateHuman ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: CALL_OW 44
5127: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_INT 28
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5143: LD_VAR 0 3
5147: PPUSH
5148: CALL_OW 87
// wait ( 0 0$1 ) ;
5152: LD_INT 35
5154: PPUSH
5155: CALL_OW 67
// DialogueOn ;
5159: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5163: LD_VAR 0 3
5167: PPUSH
5168: LD_STRING D4-Sol1-5
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// tempCharles = un ;
5179: LD_ADDR_EXP 13
5183: PUSH
5184: LD_VAR 0 3
5188: ST_TO_ADDR
// end ; if number = 7 then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 7
5196: EQUAL
5197: IFFALSE 5469
// begin hc_class := 1 ;
5199: LD_ADDR_OWVAR 28
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// hc_sex := sex_female ;
5207: LD_ADDR_OWVAR 27
5211: PUSH
5212: LD_INT 2
5214: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5215: LD_ADDR_OWVAR 33
5219: PUSH
5220: LD_STRING AmGalRemake
5222: ST_TO_ADDR
// hc_face_number := 2 ;
5223: LD_ADDR_OWVAR 34
5227: PUSH
5228: LD_INT 2
5230: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5231: LD_ADDR_OWVAR 26
5235: PUSH
5236: LD_STRING Rebecca Macdonald
5238: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5239: LD_ADDR_OWVAR 29
5243: PUSH
5244: LD_INT 10
5246: PUSH
5247: LD_INT 10
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5254: LD_ADDR_OWVAR 30
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: LD_INT 0
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5277: LD_ADDR_OWVAR 31
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 0
5287: PUSH
5288: LD_INT 0
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: ST_TO_ADDR
// un = CreateHuman ;
5300: LD_ADDR_VAR 0 3
5304: PUSH
5305: CALL_OW 44
5309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5310: LD_VAR 0 3
5314: PPUSH
5315: LD_INT 29
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: CALL_OW 87
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5341: LD_INT 30
5343: PPUSH
5344: LD_INT 22
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 70
5358: IFFALSE 5469
// begin DialogueOn ;
5360: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: CALL_OW 250
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 251
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_INT 15
5389: NEG
5390: PPUSH
5391: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: CALL_OW 250
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: CALL_OW 251
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5422: LD_VAR 0 3
5426: PPUSH
5427: LD_STRING D11a-FSol2-1
5429: PPUSH
5430: CALL_OW 88
// DialogueOff ;
5434: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5438: LD_INT 3
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: CALL_OW 471
// wait ( 0 0$2 ) ;
5450: LD_INT 70
5452: PPUSH
5453: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5457: LD_INT 3
5459: PPUSH
5460: LD_VAR 0 3
5464: PPUSH
5465: CALL_OW 472
// end ; end ; if number = 8 then
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 8
5476: EQUAL
5477: IFFALSE 5633
// begin hc_class := 1 ;
5479: LD_ADDR_OWVAR 28
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// hc_sex := sex_female ;
5487: LD_ADDR_OWVAR 27
5491: PUSH
5492: LD_INT 2
5494: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5495: LD_ADDR_OWVAR 33
5499: PUSH
5500: LD_STRING SecondCharsGal
5502: ST_TO_ADDR
// hc_face_number := 45 ;
5503: LD_ADDR_OWVAR 34
5507: PUSH
5508: LD_INT 45
5510: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5511: LD_ADDR_OWVAR 26
5515: PUSH
5516: LD_STRING Margherite Simpson
5518: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5519: LD_ADDR_OWVAR 29
5523: PUSH
5524: LD_INT 12
5526: PUSH
5527: LD_INT 10
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5534: LD_ADDR_OWVAR 30
5538: PUSH
5539: LD_INT 1
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5557: LD_ADDR_OWVAR 31
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
// un = CreateHuman ;
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: LD_INT 33
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: CALL_OW 87
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5621: LD_VAR 0 3
5625: PPUSH
5626: LD_STRING D11e-FSol4-1
5628: PPUSH
5629: CALL_OW 88
// end ; arrivals := arrivals union un ;
5633: LD_ADDR_EXP 44
5637: PUSH
5638: LD_EXP 44
5642: PUSH
5643: LD_VAR 0 3
5647: UNION
5648: ST_TO_ADDR
// end ; end_of_file
5649: LD_VAR 0 2
5653: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5654: LD_INT 0
5656: PPUSH
5657: PPUSH
// ruAttackers := [ ] ;
5658: LD_ADDR_EXP 47
5662: PUSH
5663: EMPTY
5664: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5665: LD_ADDR_EXP 48
5669: PUSH
5670: EMPTY
5671: ST_TO_ADDR
// if Difficulty < 3 then
5672: LD_OWVAR 67
5676: PUSH
5677: LD_INT 3
5679: LESS
5680: IFFALSE 5697
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5682: LD_INT 130
5684: PPUSH
5685: LD_INT 81
5687: PPUSH
5688: CALL_OW 428
5692: PPUSH
5693: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 2
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: LD_INT 4
5760: PPUSH
5761: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 67
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5799: LD_INT 3
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_EXP 34
5812: PPUSH
5813: LD_EXP 35
5817: PPUSH
5818: CALL_OW 12
5822: PPUSH
5823: LD_INT 3
5825: PPUSH
5826: LD_INT 6
5828: PPUSH
5829: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5833: LD_INT 3
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_EXP 34
5846: PPUSH
5847: LD_EXP 35
5851: PPUSH
5852: CALL_OW 12
5856: PPUSH
5857: LD_INT 3
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 32
5875: PPUSH
5876: LD_EXP 34
5880: PPUSH
5881: LD_EXP 35
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: LD_INT 4
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL 6909 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 21
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 30
5928: PUSH
5929: LD_INT 32
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: PUSH
5946: FOR_IN
5947: IFFALSE 5987
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 3
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: LD_EXP 34
5964: PPUSH
5965: LD_EXP 35
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL 6909 0 6
5985: GO 5946
5987: POP
5988: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 31
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: FOR_IN
6035: IFFALSE 6063
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6037: LD_EXP 34
6041: PPUSH
6042: LD_EXP 35
6046: PPUSH
6047: CALL_OW 12
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL 7019 0 2
6061: GO 6034
6063: POP
6064: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6065: LD_INT 3
6067: PPUSH
6068: LD_INT 32
6070: PPUSH
6071: LD_INT 3
6073: PPUSH
6074: CALL 7298 0 3
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6083: LD_INT 22
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 32
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: IFFALSE 6188
6113: GO 6115
6115: DISABLE
6116: LD_INT 0
6118: PPUSH
// begin enable ;
6119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 32
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 69
6153: PUSH
6154: FOR_IN
6155: IFFALSE 6186
// if GetFuel ( i ) < 3 then
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 261
6166: PUSH
6167: LD_INT 3
6169: LESS
6170: IFFALSE 6184
// SetFuel ( i , 3 ) ;
6172: LD_VAR 0 1
6176: PPUSH
6177: LD_INT 3
6179: PPUSH
6180: CALL_OW 240
6184: GO 6154
6186: POP
6187: POP
// end ;
6188: PPOPN 1
6190: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6191: LD_OWVAR 67
6195: PUSH
6196: LD_INT 1
6198: GREATER
6199: IFFALSE 6768
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin uc_side := 3 ;
6210: LD_ADDR_OWVAR 20
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// uc_nation := 3 ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// for i := 1 to 2 do
6226: LD_ADDR_VAR 0 1
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_INT 2
6238: PUSH
6239: FOR_TO
6240: IFFALSE 6354
// begin InitHC_All ( ) ;
6242: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 4
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_INT 6
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_OWVAR 67
6271: ARRAY
6272: PPUSH
6273: CALL_OW 381
// un := CreateHuman ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: CALL_OW 44
6286: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 91
6294: PPUSH
6295: LD_INT 87
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6308: LD_ADDR_EXP 48
6312: PUSH
6313: LD_EXP 48
6317: PPUSH
6318: LD_EXP 48
6322: PUSH
6323: LD_INT 1
6325: PLUS
6326: PPUSH
6327: LD_VAR 0 2
6331: PPUSH
6332: CALL_OW 1
6336: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6337: LD_VAR 0 2
6341: PPUSH
6342: LD_INT 46
6344: PPUSH
6345: LD_INT 78
6347: PPUSH
6348: CALL_OW 114
// end ;
6352: GO 6239
6354: POP
6355: POP
// if Difficulty > 2 then
6356: LD_OWVAR 67
6360: PUSH
6361: LD_INT 2
6363: GREATER
6364: IFFALSE 6496
// begin for i := 1 to 3 do
6366: LD_ADDR_VAR 0 1
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 3
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6494
// begin InitHC_All ( ) ;
6382: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 4
6391: PUSH
6392: LD_INT 5
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: LD_INT 6
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_OWVAR 67
6411: ARRAY
6412: PPUSH
6413: CALL_OW 381
// un := CreateHuman ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: CALL_OW 44
6426: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6427: LD_VAR 0 2
6431: PPUSH
6432: LD_INT 91
6434: PPUSH
6435: LD_INT 87
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6448: LD_ADDR_EXP 48
6452: PUSH
6453: LD_EXP 48
6457: PPUSH
6458: LD_EXP 48
6462: PUSH
6463: LD_INT 1
6465: PLUS
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 1
6476: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 89
6484: PPUSH
6485: LD_INT 148
6487: PPUSH
6488: CALL_OW 114
// end ;
6492: GO 6379
6494: POP
6495: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 33
6503: PUSH
6504: LD_INT 61
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 49
6513: PUSH
6514: LD_INT 85
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 76
6523: PUSH
6524: LD_INT 99
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 81
6533: PUSH
6534: LD_INT 135
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 111
6543: PUSH
6544: LD_INT 155
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 147
6553: PUSH
6554: LD_INT 158
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6569: LD_INT 1050
6571: PPUSH
6572: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_EXP 48
6590: PUSH
6591: FOR_TO
6592: IFFALSE 6759
// begin un := ruAttackersInForest [ i ] ;
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: LD_EXP 48
6603: PUSH
6604: LD_VAR 0 1
6608: ARRAY
6609: ST_TO_ADDR
// tag := GetTag ( un ) ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_VAR 0 2
6619: PPUSH
6620: CALL_OW 110
6624: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6625: LD_VAR 0 2
6629: PPUSH
6630: CALL_OW 302
6634: PUSH
6635: LD_VAR 0 2
6639: PPUSH
6640: CALL_OW 314
6644: NOT
6645: AND
6646: IFFALSE 6757
// begin if tag <> i then
6648: LD_VAR 0 4
6652: PUSH
6653: LD_VAR 0 1
6657: NONEQUAL
6658: IFFALSE 6686
// begin SetTag ( un , i ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 109
// tag := i ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: LD_VAR 0 1
6683: ST_TO_ADDR
// end else
6684: GO 6718
// begin SetTag ( un , i + 1 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: PPUSH
6700: CALL_OW 109
// tag := i + 1 ;
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_VAR 0 1
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6718: LD_VAR 0 2
6722: PPUSH
6723: LD_VAR 0 3
6727: PUSH
6728: LD_VAR 0 4
6732: ARRAY
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 3
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: PUSH
6749: LD_INT 2
6751: ARRAY
6752: PPUSH
6753: CALL_OW 114
// end ; end ;
6757: GO 6591
6759: POP
6760: POP
// until not ruAttackersInForest ;
6761: LD_EXP 48
6765: NOT
6766: IFFALSE 6569
// end ; end_of_file
6768: PPOPN 4
6770: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// if not characters then
6776: LD_VAR 0 1
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6864
// speaker := characters [ rand ( 1 , characters ) ] ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6809: LD_VAR 0 6
6813: PPUSH
6814: CALL_OW 258
6818: PUSH
6819: LD_INT 1
6821: EQUAL
6822: IFFALSE 6840
// Say ( speaker , dialogMID ) else
6824: LD_VAR 0 6
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 88
6838: GO 6854
// Say ( speaker , dialogFID ) ;
6840: LD_VAR 0 6
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 88
// result := speaker ;
6854: LD_ADDR_VAR 0 4
6858: PUSH
6859: LD_VAR 0 6
6863: ST_TO_ADDR
// end ;
6864: LD_VAR 0 4
6868: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// for i in charactersList do
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: LD_VAR 0 1
6882: PUSH
6883: FOR_IN
6884: IFFALSE 6902
// SaveCharacters ( i , ident ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 38
6900: GO 6883
6902: POP
6903: POP
// end ;
6904: LD_VAR 0 3
6908: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// for i = 1 to count do
6915: LD_ADDR_VAR 0 8
6919: PUSH
6920: DOUBLE
6921: LD_INT 1
6923: DEC
6924: ST_TO_ADDR
6925: LD_VAR 0 6
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7012
// begin uc_side = side ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_VAR 0 1
6942: ST_TO_ADDR
// uc_nation = nation ;
6943: LD_ADDR_OWVAR 21
6947: PUSH
6948: LD_VAR 0 2
6952: ST_TO_ADDR
// hc_gallery =  ;
6953: LD_ADDR_OWVAR 33
6957: PUSH
6958: LD_STRING 
6960: ST_TO_ADDR
// hc_name =  ;
6961: LD_ADDR_OWVAR 26
6965: PUSH
6966: LD_STRING 
6968: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6969: LD_INT 0
6971: PPUSH
6972: LD_VAR 0 5
6976: PPUSH
6977: LD_VAR 0 4
6981: PPUSH
6982: CALL_OW 380
// un = CreateHuman ;
6986: LD_ADDR_VAR 0 10
6990: PUSH
6991: CALL_OW 44
6995: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6996: LD_VAR 0 10
7000: PPUSH
7001: LD_VAR 0 3
7005: PPUSH
7006: CALL_OW 52
// end ;
7010: GO 6930
7012: POP
7013: POP
// end ;
7014: LD_VAR 0 7
7018: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7019: LD_INT 0
7021: PPUSH
7022: PPUSH
7023: PPUSH
// uc_side := GetSide ( b ) ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 255
7038: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7039: LD_ADDR_OWVAR 21
7043: PUSH
7044: LD_VAR 0 2
7048: PPUSH
7049: CALL_OW 248
7053: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7054: LD_INT 0
7056: PPUSH
7057: LD_INT 1
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 254
7083: PUSH
7084: LD_INT 3
7086: MINUS
7087: ST_TO_ADDR
// if dir < 0 then
7088: LD_VAR 0 5
7092: PUSH
7093: LD_INT 0
7095: LESS
7096: IFFALSE 7112
// dir := 6 + dir ;
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_VAR 0 5
7110: PLUS
7111: ST_TO_ADDR
// un := CreateHuman ;
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: CALL_OW 44
7121: ST_TO_ADDR
// SetDir ( un , dir ) ;
7122: LD_VAR 0 4
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7136: LD_VAR 0 4
7140: PPUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 52
// end ;
7150: LD_VAR 0 3
7154: RET
// export function PrepareDifficulty ; begin
7155: LD_INT 0
7157: PPUSH
// case Difficulty of 1 :
7158: LD_OWVAR 67
7162: PUSH
7163: LD_INT 1
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7190
7171: POP
// begin RuSolMinLevel = 2 ;
7172: LD_ADDR_EXP 34
7176: PUSH
7177: LD_INT 2
7179: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7180: LD_ADDR_EXP 35
7184: PUSH
7185: LD_INT 3
7187: ST_TO_ADDR
// end ; 2 :
7188: GO 7251
7190: LD_INT 2
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7217
7198: POP
// begin RuSolMinLevel = 3 ;
7199: LD_ADDR_EXP 34
7203: PUSH
7204: LD_INT 3
7206: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7207: LD_ADDR_EXP 35
7211: PUSH
7212: LD_INT 5
7214: ST_TO_ADDR
// end ; 3 .. 4 :
7215: GO 7251
7217: LD_INT 3
7219: DOUBLE
7220: GREATEREQUAL
7221: IFFALSE 7229
7223: LD_INT 4
7225: DOUBLE
7226: LESSEQUAL
7227: IFTRUE 7231
7229: GO 7250
7231: POP
// begin RuSolMinLevel = 4 ;
7232: LD_ADDR_EXP 34
7236: PUSH
7237: LD_INT 4
7239: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7240: LD_ADDR_EXP 35
7244: PUSH
7245: LD_INT 6
7247: ST_TO_ADDR
// end ; end ;
7248: GO 7251
7250: POP
// end ;
7251: LD_VAR 0 1
7255: RET
// export function ShowQuery1 ; begin
7256: LD_INT 0
7258: PPUSH
// result := Query ( QKill ) ;
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_STRING QKill
7266: PPUSH
7267: CALL_OW 97
7271: ST_TO_ADDR
// end ;
7272: LD_VAR 0 1
7276: RET
// export function ShowQuery2 ; begin
7277: LD_INT 0
7279: PPUSH
// result := Query ( QKill2 ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_STRING QKill2
7287: PPUSH
7288: CALL_OW 97
7292: ST_TO_ADDR
// end ;
7293: LD_VAR 0 1
7297: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_INT 48
7311: PUSH
7312: LD_INT 49
7314: PUSH
7315: LD_INT 50
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: LD_INT 51
7326: PUSH
7327: LD_INT 52
7329: PUSH
7330: LD_INT 69
7332: PUSH
7333: LD_INT 39
7335: PUSH
7336: LD_INT 34
7338: PUSH
7339: LD_INT 40
7341: PUSH
7342: LD_INT 53
7344: PUSH
7345: LD_INT 71
7347: PUSH
7348: LD_INT 57
7350: PUSH
7351: LD_INT 58
7353: PUSH
7354: LD_INT 44
7356: PUSH
7357: LD_INT 32
7359: PUSH
7360: LD_INT 27
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 33
7368: PUSH
7369: LD_INT 59
7371: PUSH
7372: LD_INT 54
7374: PUSH
7375: LD_INT 55
7377: PUSH
7378: LD_INT 56
7380: PUSH
7381: LD_INT 63
7383: PUSH
7384: LD_INT 64
7386: PUSH
7387: LD_INT 65
7389: PUSH
7390: LD_INT 30
7392: PUSH
7393: LD_INT 31
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 25
7404: PUSH
7405: LD_INT 82
7407: PUSH
7408: LD_INT 83
7410: PUSH
7411: LD_INT 84
7413: PUSH
7414: LD_INT 85
7416: PUSH
7417: LD_INT 86
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: ST_TO_ADDR
// for i = 1 to list do
7459: LD_ADDR_VAR 0 5
7463: PUSH
7464: DOUBLE
7465: LD_INT 1
7467: DEC
7468: ST_TO_ADDR
7469: LD_VAR 0 7
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7547
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7477: LD_VAR 0 7
7481: PUSH
7482: LD_VAR 0 5
7486: ARRAY
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 321
7497: PUSH
7498: LD_INT 1
7500: EQUAL
7501: PUSH
7502: LD_VAR 0 7
7506: PUSH
7507: LD_VAR 0 5
7511: ARRAY
7512: PPUSH
7513: LD_VAR 0 3
7517: PPUSH
7518: CALL_OW 482
7522: AND
7523: IFFALSE 7545
// AddComResearch ( lab , list [ i ] ) ;
7525: LD_VAR 0 2
7529: PPUSH
7530: LD_VAR 0 7
7534: PUSH
7535: LD_VAR 0 5
7539: ARRAY
7540: PPUSH
7541: CALL_OW 184
7545: GO 7474
7547: POP
7548: POP
// end ;
7549: LD_VAR 0 4
7553: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7554: LD_INT 0
7556: PPUSH
7557: PPUSH
7558: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7559: LD_INT 22
7561: PUSH
7562: LD_VAR 0 1
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: PUSH
7590: LD_VAR 0 3
7594: LESSEQUAL
7595: IFFALSE 7703
// begin for i = 1 to vehCount do
7597: LD_ADDR_VAR 0 9
7601: PUSH
7602: DOUBLE
7603: LD_INT 1
7605: DEC
7606: ST_TO_ADDR
7607: LD_VAR 0 3
7611: PUSH
7612: FOR_TO
7613: IFFALSE 7701
// begin weapon := weaponTab [ i ] ;
7615: LD_ADDR_VAR 0 10
7619: PUSH
7620: LD_VAR 0 4
7624: PUSH
7625: LD_VAR 0 9
7629: ARRAY
7630: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7631: LD_VAR 0 10
7635: PUSH
7636: LD_INT 46
7638: EQUAL
7639: IFFALSE 7670
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 24
7648: PPUSH
7649: LD_VAR 0 5
7653: PPUSH
7654: LD_VAR 0 6
7658: PPUSH
7659: LD_VAR 0 10
7663: PPUSH
7664: CALL_OW 185
7668: GO 7699
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 7
7679: PPUSH
7680: LD_VAR 0 5
7684: PPUSH
7685: LD_VAR 0 6
7689: PPUSH
7690: LD_VAR 0 10
7694: PPUSH
7695: CALL_OW 185
// end ;
7699: GO 7612
7701: POP
7702: POP
// end ; end ;
7703: LD_VAR 0 8
7707: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7716: LD_ADDR_VAR 0 8
7720: PUSH
7721: LD_VAR 0 2
7725: PPUSH
7726: CALL_OW 313
7730: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7731: LD_ADDR_VAR 0 9
7735: PUSH
7736: LD_VAR 0 3
7740: PPUSH
7741: LD_INT 22
7743: PUSH
7744: LD_VAR 0 1
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 25
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 24
7765: PUSH
7766: LD_INT 750
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: LD_INT 54
7778: PUSH
7779: EMPTY
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 70
7796: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7797: LD_ADDR_VAR 0 6
7801: PUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 21
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 24
7834: PUSH
7835: LD_INT 1000
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: PPUSH
7854: CALL_OW 70
7858: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7859: LD_VAR 0 6
7863: NOT
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 25
7879: PUSH
7880: LD_INT 2
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 24
7889: PUSH
7890: LD_INT 250
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: NOT
7907: AND
7908: IFFALSE 7912
// exit ;
7910: GO 8070
// if buildingsList and engineerOkInside then
7912: LD_VAR 0 6
7916: PUSH
7917: LD_VAR 0 8
7921: AND
7922: IFFALSE 7933
// ComExitBuilding ( engineerOkInside ) ;
7924: LD_VAR 0 8
7928: PPUSH
7929: CALL_OW 122
// if buildingsList and engineerOkOutside then
7933: LD_VAR 0 6
7937: PUSH
7938: LD_VAR 0 9
7942: AND
7943: IFFALSE 7963
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7945: LD_VAR 0 9
7949: PPUSH
7950: LD_VAR 0 6
7954: PUSH
7955: LD_INT 1
7957: ARRAY
7958: PPUSH
7959: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_INT 0
7970: EQUAL
7971: PUSH
7972: LD_VAR 0 4
7976: PUSH
7977: LD_INT 0
7979: EQUAL
7980: AND
7981: PUSH
7982: LD_VAR 0 9
7986: AND
7987: IFFALSE 8003
// ComEnterUnit ( engineerOkOutside , depot ) ;
7989: LD_VAR 0 9
7993: PPUSH
7994: LD_VAR 0 2
7998: PPUSH
7999: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8003: LD_VAR 0 9
8007: PUSH
8008: LD_VAR 0 6
8012: PUSH
8013: LD_INT 0
8015: EQUAL
8016: AND
8017: PUSH
8018: LD_VAR 0 4
8022: AND
8023: IFFALSE 8070
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8025: LD_VAR 0 9
8029: PPUSH
8030: LD_VAR 0 4
8034: PUSH
8035: LD_INT 1
8037: ARRAY
8038: PPUSH
8039: LD_VAR 0 4
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: LD_VAR 0 4
8052: PUSH
8053: LD_INT 3
8055: ARRAY
8056: PPUSH
8057: LD_VAR 0 4
8061: PUSH
8062: LD_INT 4
8064: ARRAY
8065: PPUSH
8066: CALL_OW 145
// end ;
8070: LD_VAR 0 5
8074: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
8084: PPUSH
8085: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8086: LD_ADDR_VAR 0 6
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_VAR 0 1
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 25
8105: PUSH
8106: LD_INT 4
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 2
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 24
8125: PUSH
8126: LD_INT 251
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: CALL_OW 69
8143: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8144: LD_ADDR_VAR 0 7
8148: PUSH
8149: LD_VAR 0 3
8153: PPUSH
8154: LD_INT 22
8156: PUSH
8157: LD_VAR 0 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 23
8168: PUSH
8169: LD_INT 2
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 25
8178: PUSH
8179: LD_INT 4
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 50
8188: PUSH
8189: EMPTY
8190: LIST
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 70
8202: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8203: LD_ADDR_VAR 0 10
8207: PUSH
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_INT 22
8215: PUSH
8216: LD_VAR 0 1
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 21
8227: PUSH
8228: LD_INT 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: LD_INT 25
8240: PUSH
8241: LD_INT 3
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 3
8254: PUSH
8255: LD_INT 24
8257: PUSH
8258: LD_INT 750
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 70
8279: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8280: LD_ADDR_VAR 0 11
8284: PUSH
8285: LD_VAR 0 2
8289: PPUSH
8290: LD_INT 22
8292: PUSH
8293: LD_VAR 0 1
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 21
8304: PUSH
8305: LD_INT 1
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 3
8314: PUSH
8315: LD_INT 25
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: LD_INT 24
8334: PUSH
8335: LD_INT 1000
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8357: LD_VAR 0 10
8361: NOT
8362: PUSH
8363: LD_VAR 0 11
8367: NOT
8368: AND
8369: PUSH
8370: LD_VAR 0 6
8374: NOT
8375: AND
8376: IFFALSE 8380
// exit ;
8378: GO 8586
// if damageUnits and sci_list then
8380: LD_VAR 0 10
8384: PUSH
8385: LD_VAR 0 6
8389: AND
8390: IFFALSE 8406
// ComMoveToArea ( damageUnits , healArea ) ;
8392: LD_VAR 0 10
8396: PPUSH
8397: LD_VAR 0 2
8401: PPUSH
8402: CALL_OW 113
// if unitsToHeal and sci_list then
8406: LD_VAR 0 11
8410: PUSH
8411: LD_VAR 0 6
8415: AND
8416: IFFALSE 8427
// ComExitBuilding ( sci_list ) ;
8418: LD_VAR 0 6
8422: PPUSH
8423: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8427: LD_VAR 0 11
8431: PUSH
8432: LD_VAR 0 7
8436: AND
8437: IFFALSE 8457
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8439: LD_VAR 0 7
8443: PPUSH
8444: LD_VAR 0 11
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: PPUSH
8453: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8457: LD_VAR 0 10
8461: PUSH
8462: LD_INT 0
8464: EQUAL
8465: PUSH
8466: LD_VAR 0 11
8470: PUSH
8471: LD_INT 0
8473: EQUAL
8474: AND
8475: PUSH
8476: LD_VAR 0 7
8480: AND
8481: IFFALSE 8586
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8483: LD_ADDR_VAR 0 12
8487: PUSH
8488: LD_INT 22
8490: PUSH
8491: LD_VAR 0 1
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 21
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 30
8512: PUSH
8513: LD_INT 8
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8530: LD_ADDR_VAR 0 13
8534: PUSH
8535: LD_INT 1
8537: PPUSH
8538: LD_VAR 0 12
8542: PPUSH
8543: CALL_OW 12
8547: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8548: LD_VAR 0 7
8552: PPUSH
8553: LD_INT 3
8555: PUSH
8556: LD_INT 60
8558: PUSH
8559: EMPTY
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 72
8570: PPUSH
8571: LD_VAR 0 12
8575: PUSH
8576: LD_VAR 0 13
8580: ARRAY
8581: PPUSH
8582: CALL_OW 120
// end ; end ;
8586: LD_VAR 0 5
8590: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8591: LD_INT 0
8593: PPUSH
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
// tmp := [ ] ;
8598: LD_ADDR_VAR 0 6
8602: PUSH
8603: EMPTY
8604: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8605: LD_ADDR_VAR 0 7
8609: PUSH
8610: LD_INT 22
8612: PUSH
8613: LD_VAR 0 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 30
8624: PUSH
8625: LD_INT 32
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PPUSH
8636: CALL_OW 69
8640: ST_TO_ADDR
// if bunkers then
8641: LD_VAR 0 7
8645: IFFALSE 8715
// for i in bunkers do
8647: LD_ADDR_VAR 0 4
8651: PUSH
8652: LD_VAR 0 7
8656: PUSH
8657: FOR_IN
8658: IFFALSE 8713
// for j in UnitsInside ( i ) do
8660: LD_ADDR_VAR 0 5
8664: PUSH
8665: LD_VAR 0 4
8669: PPUSH
8670: CALL_OW 313
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8709
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8678: LD_ADDR_VAR 0 6
8682: PUSH
8683: LD_VAR 0 6
8687: PPUSH
8688: LD_VAR 0 6
8692: PUSH
8693: LD_INT 1
8695: PLUS
8696: PPUSH
8697: LD_VAR 0 5
8701: PPUSH
8702: CALL_OW 1
8706: ST_TO_ADDR
8707: GO 8675
8709: POP
8710: POP
8711: GO 8657
8713: POP
8714: POP
// if tmp then
8715: LD_VAR 0 6
8719: IFFALSE 8759
// begin ComExitBuilding ( tmp ) ;
8721: LD_VAR 0 6
8725: PPUSH
8726: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8730: LD_VAR 0 6
8734: PPUSH
8735: LD_VAR 0 2
8739: PPUSH
8740: CALL_OW 250
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 251
8754: PPUSH
8755: CALL_OW 174
// end ; end ;
8759: LD_VAR 0 3
8763: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
8768: PPUSH
// enable ;
8769: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8770: LD_ADDR_VAR 0 6
8774: PUSH
8775: LD_VAR 0 3
8779: PPUSH
8780: CALL_OW 435
8784: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8785: LD_ADDR_VAR 0 5
8789: PUSH
8790: LD_INT 22
8792: PUSH
8793: LD_VAR 0 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 34
8804: PUSH
8805: LD_VAR 0 2
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 69
8822: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8823: LD_VAR 0 5
8827: PUSH
8828: LD_VAR 0 3
8832: PPUSH
8833: CALL_OW 435
8837: AND
8838: PUSH
8839: LD_VAR 0 6
8843: AND
8844: IFFALSE 8877
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8846: LD_VAR 0 5
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PPUSH
8855: LD_VAR 0 6
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: LD_VAR 0 6
8868: PUSH
8869: LD_INT 2
8871: ARRAY
8872: PPUSH
8873: CALL_OW 177
// end ;
8877: LD_VAR 0 4
8881: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8882: LD_INT 0
8884: PPUSH
8885: PPUSH
8886: PPUSH
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8892: LD_ADDR_VAR 0 6
8896: PUSH
8897: LD_VAR 0 2
8901: PPUSH
8902: LD_INT 22
8904: PUSH
8905: LD_VAR 0 1
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 56
8916: PUSH
8917: EMPTY
8918: LIST
8919: PUSH
8920: LD_INT 24
8922: PUSH
8923: LD_INT 700
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: LD_INT 60
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 2
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 1
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 5
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 8
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 9
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PPUSH
9000: CALL_OW 70
9004: PUSH
9005: LD_EXP 47
9009: PUSH
9010: LD_EXP 48
9014: UNION
9015: DIFF
9016: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9017: LD_ADDR_VAR 0 7
9021: PUSH
9022: LD_VAR 0 2
9026: PPUSH
9027: LD_INT 22
9029: PUSH
9030: LD_VAR 0 1
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 32
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 58
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: LD_INT 24
9057: PUSH
9058: LD_INT 251
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 70
9075: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9076: LD_ADDR_VAR 0 9
9080: PUSH
9081: LD_VAR 0 2
9085: PPUSH
9086: LD_INT 22
9088: PUSH
9089: LD_VAR 0 1
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 4
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 30
9113: PUSH
9114: LD_INT 5
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 24
9128: PUSH
9129: LD_INT 251
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 70
9145: ST_TO_ADDR
// if barrackList then
9146: LD_VAR 0 9
9150: IFFALSE 9306
// begin if turretList = 0 then
9152: LD_VAR 0 7
9156: PUSH
9157: LD_INT 0
9159: EQUAL
9160: IFFALSE 9198
// begin if soldiersList then
9162: LD_VAR 0 6
9166: IFFALSE 9196
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9168: LD_VAR 0 6
9172: PPUSH
9173: LD_VAR 0 9
9177: PUSH
9178: LD_INT 1
9180: PPUSH
9181: LD_VAR 0 9
9185: PPUSH
9186: CALL_OW 12
9190: ARRAY
9191: PPUSH
9192: CALL_OW 120
// end else
9196: GO 9306
// begin for i in barrackList do
9198: LD_ADDR_VAR 0 4
9202: PUSH
9203: LD_VAR 0 9
9207: PUSH
9208: FOR_IN
9209: IFFALSE 9304
// begin if not turretList then
9211: LD_VAR 0 7
9215: NOT
9216: IFFALSE 9222
// exit ;
9218: POP
9219: POP
9220: GO 9306
// insideUnits = UnitsInside ( i ) ;
9222: LD_ADDR_VAR 0 10
9226: PUSH
9227: LD_VAR 0 4
9231: PPUSH
9232: CALL_OW 313
9236: ST_TO_ADDR
// if insideUnits then
9237: LD_VAR 0 10
9241: IFFALSE 9302
// begin tmp := insideUnits [ 1 ] ;
9243: LD_ADDR_VAR 0 8
9247: PUSH
9248: LD_VAR 0 10
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9257: LD_VAR 0 8
9261: PPUSH
9262: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9266: LD_VAR 0 8
9270: PPUSH
9271: LD_VAR 0 7
9275: PUSH
9276: LD_INT 1
9278: ARRAY
9279: PPUSH
9280: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9284: LD_ADDR_VAR 0 7
9288: PUSH
9289: LD_VAR 0 7
9293: PPUSH
9294: LD_INT 1
9296: PPUSH
9297: CALL_OW 3
9301: ST_TO_ADDR
// end ; end ;
9302: GO 9208
9304: POP
9305: POP
// end ; end ; end ;
9306: LD_VAR 0 3
9310: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9319: LD_ADDR_VAR 0 8
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 34
9348: PUSH
9349: LD_INT 52
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: PPUSH
9361: CALL_OW 69
9365: ST_TO_ADDR
// if not craneList then
9366: LD_VAR 0 8
9370: NOT
9371: IFFALSE 9375
// exit ;
9373: GO 9809
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9375: LD_ADDR_VAR 0 9
9379: PUSH
9380: LD_INT 22
9382: PUSH
9383: LD_VAR 0 1
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 21
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: LD_INT 24
9407: PUSH
9408: LD_INT 1000
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9432: LD_VAR 0 9
9436: PUSH
9437: LD_VAR 0 8
9441: PPUSH
9442: LD_INT 24
9444: PUSH
9445: LD_INT 750
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: AND
9457: IFFALSE 9492
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9459: LD_VAR 0 8
9463: PPUSH
9464: LD_INT 24
9466: PUSH
9467: LD_INT 750
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 72
9478: PPUSH
9479: LD_VAR 0 9
9483: PUSH
9484: LD_INT 1
9486: ARRAY
9487: PPUSH
9488: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_INT 3
9499: PUSH
9500: LD_INT 24
9502: PUSH
9503: LD_INT 750
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 72
9518: IFFALSE 9556
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 750
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 72
9546: PPUSH
9547: LD_VAR 0 2
9551: PPUSH
9552: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9556: LD_VAR 0 8
9560: PUSH
9561: LD_VAR 0 9
9565: PUSH
9566: LD_INT 0
9568: EQUAL
9569: AND
9570: PUSH
9571: LD_VAR 0 3
9575: AND
9576: IFFALSE 9623
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9578: LD_VAR 0 8
9582: PPUSH
9583: LD_VAR 0 3
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: LD_VAR 0 3
9596: PUSH
9597: LD_INT 2
9599: ARRAY
9600: PPUSH
9601: LD_VAR 0 3
9605: PUSH
9606: LD_INT 3
9608: ARRAY
9609: PPUSH
9610: LD_VAR 0 3
9614: PUSH
9615: LD_INT 4
9617: ARRAY
9618: PPUSH
9619: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9623: LD_ADDR_VAR 0 7
9627: PUSH
9628: LD_VAR 0 2
9632: PPUSH
9633: LD_INT 22
9635: PUSH
9636: LD_VAR 0 1
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 21
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 34
9657: PUSH
9658: LD_INT 52
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 3
9667: PUSH
9668: LD_INT 24
9670: PUSH
9671: LD_INT 750
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: PPUSH
9688: CALL_OW 70
9692: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 2
9702: PPUSH
9703: LD_INT 22
9705: PUSH
9706: LD_VAR 0 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 0
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 30
9730: PUSH
9731: LD_INT 1
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 70
9751: ST_TO_ADDR
// if crane then
9752: LD_VAR 0 7
9756: IFFALSE 9809
// for i in crane do
9758: LD_ADDR_VAR 0 5
9762: PUSH
9763: LD_VAR 0 7
9767: PUSH
9768: FOR_IN
9769: IFFALSE 9807
// begin if dep then
9771: LD_VAR 0 6
9775: IFFALSE 9791
// ComMoveUnit ( i , dep ) ;
9777: LD_VAR 0 5
9781: PPUSH
9782: LD_VAR 0 6
9786: PPUSH
9787: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9791: LD_VAR 0 5
9795: PPUSH
9796: CALL_OW 311
9800: PPUSH
9801: CALL 80203 0 1
// end ;
9805: GO 9768
9807: POP
9808: POP
// end ;
9809: LD_VAR 0 4
9813: RET
// export function BuildBulldozer ; begin
9814: LD_INT 0
9816: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9817: LD_INT 17
9819: PPUSH
9820: CALL_OW 302
9824: NOT
9825: PUSH
9826: LD_INT 17
9828: PPUSH
9829: CALL_OW 255
9833: PUSH
9834: LD_INT 3
9836: NONEQUAL
9837: OR
9838: IFFALSE 9842
// exit ;
9840: GO 9861
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9842: LD_INT 17
9844: PPUSH
9845: LD_INT 24
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: LD_INT 53
9856: PPUSH
9857: CALL_OW 185
// end ;
9861: LD_VAR 0 1
9865: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9866: LD_INT 0
9868: PPUSH
9869: PPUSH
9870: PPUSH
9871: PPUSH
9872: PPUSH
// if not bulldozer then
9873: LD_VAR 0 1
9877: NOT
9878: IFFALSE 9882
// exit ;
9880: GO 10164
// list := ListEnvironmentArea ( area ) ;
9882: LD_ADDR_VAR 0 5
9886: PUSH
9887: LD_VAR 0 2
9891: PPUSH
9892: CALL_OW 353
9896: ST_TO_ADDR
// tmp := [ ] ;
9897: LD_ADDR_VAR 0 6
9901: PUSH
9902: EMPTY
9903: ST_TO_ADDR
// for i = 1 to list do
9904: LD_ADDR_VAR 0 4
9908: PUSH
9909: DOUBLE
9910: LD_INT 1
9912: DEC
9913: ST_TO_ADDR
9914: LD_VAR 0 5
9918: PUSH
9919: FOR_TO
9920: IFFALSE 10018
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9922: LD_VAR 0 5
9926: PUSH
9927: LD_VAR 0 4
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: ARRAY
9936: PPUSH
9937: LD_VAR 0 5
9941: PUSH
9942: LD_VAR 0 4
9946: ARRAY
9947: PUSH
9948: LD_INT 2
9950: ARRAY
9951: PPUSH
9952: CALL_OW 554
9956: IFFALSE 10016
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
9958: LD_ADDR_VAR 0 6
9962: PUSH
9963: LD_VAR 0 6
9967: PPUSH
9968: LD_VAR 0 6
9972: PUSH
9973: LD_INT 1
9975: PLUS
9976: PPUSH
9977: LD_VAR 0 5
9981: PUSH
9982: LD_VAR 0 4
9986: ARRAY
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PUSH
9992: LD_VAR 0 5
9996: PUSH
9997: LD_VAR 0 4
10001: ARRAY
10002: PUSH
10003: LD_INT 2
10005: ARRAY
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PPUSH
10011: CALL_OW 1
10015: ST_TO_ADDR
// end ;
10016: GO 9919
10018: POP
10019: POP
// ComStop ( bulldozer ) ;
10020: LD_VAR 0 1
10024: PPUSH
10025: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: ST_TO_ADDR
// for i = tmp downto 1 do
10058: LD_ADDR_VAR 0 4
10062: PUSH
10063: DOUBLE
10064: LD_VAR 0 6
10068: INC
10069: ST_TO_ADDR
10070: LD_INT 1
10072: PUSH
10073: FOR_DOWNTO
10074: IFFALSE 10162
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10076: LD_ADDR_VAR 0 7
10080: PUSH
10081: LD_VAR 0 7
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_VAR 0 7
10094: PUSH
10095: LD_INT 2
10097: ARRAY
10098: PPUSH
10099: LD_VAR 0 6
10103: PPUSH
10104: CALL 10265 0 3
10108: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_VAR 0 7
10118: PUSH
10119: LD_INT 1
10121: ARRAY
10122: PPUSH
10123: LD_VAR 0 7
10127: PUSH
10128: LD_INT 2
10130: ARRAY
10131: PPUSH
10132: CALL 10169 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10136: LD_ADDR_VAR 0 6
10140: PUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PUSH
10151: LD_INT 3
10153: ARRAY
10154: PPUSH
10155: CALL_OW 3
10159: ST_TO_ADDR
// end ;
10160: GO 10073
10162: POP
10163: POP
// end ;
10164: LD_VAR 0 3
10168: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10169: LD_INT 0
10171: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10172: LD_VAR 0 2
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: CALL_OW 351
10186: PUSH
10187: LD_VAR 0 2
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: CALL_OW 554
10201: AND
10202: PUSH
10203: LD_VAR 0 2
10207: PPUSH
10208: LD_VAR 0 3
10212: PPUSH
10213: CALL_OW 488
10217: AND
10218: PUSH
10219: LD_VAR 0 2
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: CALL_OW 428
10233: PUSH
10234: LD_INT 1
10236: NEG
10237: EQUAL
10238: AND
10239: IFFALSE 10260
// AddComMoveXY ( bulldozer , x , y ) ;
10241: LD_VAR 0 1
10245: PPUSH
10246: LD_VAR 0 2
10250: PPUSH
10251: LD_VAR 0 3
10255: PPUSH
10256: CALL_OW 171
// end ;
10260: LD_VAR 0 4
10264: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10265: LD_INT 0
10267: PPUSH
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
// dist := 99999 ;
10274: LD_ADDR_VAR 0 6
10278: PUSH
10279: LD_INT 99999
10281: ST_TO_ADDR
// for i = 1 to list do
10282: LD_ADDR_VAR 0 5
10286: PUSH
10287: DOUBLE
10288: LD_INT 1
10290: DEC
10291: ST_TO_ADDR
10292: LD_VAR 0 3
10296: PUSH
10297: FOR_TO
10298: IFFALSE 10436
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10300: LD_ADDR_VAR 0 7
10304: PUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: LD_VAR 0 3
10319: PUSH
10320: LD_VAR 0 5
10324: ARRAY
10325: PUSH
10326: LD_INT 1
10328: ARRAY
10329: PPUSH
10330: LD_VAR 0 3
10334: PUSH
10335: LD_VAR 0 5
10339: ARRAY
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: CALL_OW 298
10349: ST_TO_ADDR
// if d = 0 then
10350: LD_VAR 0 7
10354: PUSH
10355: LD_INT 0
10357: EQUAL
10358: IFFALSE 10362
// continue ;
10360: GO 10297
// if d < dist then
10362: LD_VAR 0 7
10366: PUSH
10367: LD_VAR 0 6
10371: LESS
10372: IFFALSE 10434
// begin _x := list [ i ] [ 1 ] ;
10374: LD_ADDR_VAR 0 8
10378: PUSH
10379: LD_VAR 0 3
10383: PUSH
10384: LD_VAR 0 5
10388: ARRAY
10389: PUSH
10390: LD_INT 1
10392: ARRAY
10393: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10394: LD_ADDR_VAR 0 9
10398: PUSH
10399: LD_VAR 0 3
10403: PUSH
10404: LD_VAR 0 5
10408: ARRAY
10409: PUSH
10410: LD_INT 2
10412: ARRAY
10413: ST_TO_ADDR
// _i := i ;
10414: LD_ADDR_VAR 0 10
10418: PUSH
10419: LD_VAR 0 5
10423: ST_TO_ADDR
// dist := d ;
10424: LD_ADDR_VAR 0 6
10428: PUSH
10429: LD_VAR 0 7
10433: ST_TO_ADDR
// end ; end ;
10434: GO 10297
10436: POP
10437: POP
// result := [ _x , _y , _i , dist ] ;
10438: LD_ADDR_VAR 0 4
10442: PUSH
10443: LD_VAR 0 8
10447: PUSH
10448: LD_VAR 0 9
10452: PUSH
10453: LD_VAR 0 10
10457: PUSH
10458: LD_VAR 0 6
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: ST_TO_ADDR
// end ; end_of_file
10469: LD_VAR 0 4
10473: RET
// export function Action ; begin
10474: LD_INT 0
10476: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10477: LD_INT 66
10479: PPUSH
10480: LD_INT 4
10482: PPUSH
10483: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10487: LD_INT 22
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 25
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: PUSH
10516: LD_INT 0
10518: EQUAL
10519: IFFALSE 10533
// SetClass ( JMM , 2 ) ;
10521: LD_EXP 1
10525: PPUSH
10526: LD_INT 2
10528: PPUSH
10529: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10533: LD_STRING M1
10535: PPUSH
10536: CALL_OW 337
// case Difficulty of 1 :
10540: LD_OWVAR 67
10544: PUSH
10545: LD_INT 1
10547: DOUBLE
10548: EQUAL
10549: IFTRUE 10553
10551: GO 10563
10553: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10554: LD_STRING M1-1
10556: PPUSH
10557: CALL_OW 337
10561: GO 10606
10563: LD_INT 2
10565: DOUBLE
10566: EQUAL
10567: IFTRUE 10571
10569: GO 10581
10571: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
10572: LD_STRING M1-2
10574: PPUSH
10575: CALL_OW 337
10579: GO 10606
10581: LD_INT 3
10583: DOUBLE
10584: GREATEREQUAL
10585: IFFALSE 10593
10587: LD_INT 4
10589: DOUBLE
10590: LESSEQUAL
10591: IFTRUE 10595
10593: GO 10605
10595: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10596: LD_STRING M1-3
10598: PPUSH
10599: CALL_OW 337
10603: GO 10606
10605: POP
// ChangeMissionObjectives ( M1cont ) ;
10606: LD_STRING M1cont
10608: PPUSH
10609: CALL_OW 337
// SaveForQuickRestart ;
10613: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10617: LD_INT 525
10619: PPUSH
10620: LD_INT 700
10622: PPUSH
10623: CALL_OW 12
10627: PPUSH
10628: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10632: LD_INT 5
10634: PPUSH
10635: LD_INT 82
10637: PPUSH
10638: LD_INT 38
10640: PPUSH
10641: LD_INT 10
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 56
// wait ( 0 0$14 ) ;
10651: LD_INT 490
10653: PPUSH
10654: CALL_OW 67
// firstCrateSpawn := true ;
10658: LD_ADDR_EXP 40
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// end ;
10666: LD_VAR 0 1
10670: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10671: LD_EXP 40
10675: IFFALSE 11064
10677: GO 10679
10679: DISABLE
10680: LD_INT 0
10682: PPUSH
// begin if IsOk ( Lisa ) then
10683: LD_EXP 2
10687: PPUSH
10688: CALL_OW 302
10692: IFFALSE 10708
// Say ( Lisa , DR0-Lisa-1 ) else
10694: LD_EXP 2
10698: PPUSH
10699: LD_STRING DR0-Lisa-1
10701: PPUSH
10702: CALL_OW 88
10706: GO 10854
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10708: LD_INT 22
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 21
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 26
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 4
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PPUSH
10794: CALL_OW 69
10798: PUSH
10799: LD_EXP 1
10803: PUSH
10804: LD_EXP 8
10808: PUSH
10809: LD_EXP 5
10813: PUSH
10814: LD_EXP 6
10818: PUSH
10819: LD_EXP 7
10823: PUSH
10824: LD_EXP 4
10828: PUSH
10829: LD_EXP 3
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: DIFF
10843: PPUSH
10844: LD_STRING DR0-Sol1-1
10846: PPUSH
10847: LD_STRING DR0-Sol1-1
10849: PPUSH
10850: CALL 6771 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10854: LD_ADDR_VAR 0 1
10858: PUSH
10859: LD_INT 22
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 21
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 26
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PPUSH
10945: CALL_OW 69
10949: PUSH
10950: LD_EXP 1
10954: PUSH
10955: LD_EXP 8
10959: PUSH
10960: LD_EXP 5
10964: PUSH
10965: LD_EXP 2
10969: PUSH
10970: LD_EXP 6
10974: PUSH
10975: LD_EXP 7
10979: PUSH
10980: LD_EXP 4
10984: PUSH
10985: LD_EXP 3
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: DIFF
11000: PPUSH
11001: LD_STRING DR0-Sol2-1
11003: PPUSH
11004: LD_STRING DR0-Sol2-1
11006: PPUSH
11007: CALL 6771 0 3
11011: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11012: LD_EXP 4
11016: PPUSH
11017: CALL_OW 302
11021: IFFALSE 11035
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11023: LD_EXP 4
11027: PPUSH
11028: LD_STRING DR0-Cyrus-1
11030: PPUSH
11031: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11035: LD_EXP 2
11039: PPUSH
11040: CALL_OW 302
11044: PUSH
11045: LD_VAR 0 1
11049: OR
11050: IFFALSE 11064
// Say ( JMM , DR0-JMM-1 ) ;
11052: LD_EXP 1
11056: PPUSH
11057: LD_STRING DR0-JMM-1
11059: PPUSH
11060: CALL_OW 88
// end ;
11064: PPOPN 1
11066: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11067: LD_EXP 5
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 16
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PUSH
11106: LD_INT 0
11108: GREATER
11109: AND
11110: PUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 463
11118: NOT
11119: AND
11120: IFFALSE 11398
11122: GO 11124
11124: DISABLE
// begin DialogueOn ;
11125: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11129: LD_EXP 5
11133: PPUSH
11134: LD_STRING D10-Frank-1
11136: PPUSH
11137: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11141: LD_INT 22
11143: PUSH
11144: LD_INT 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 21
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: LD_INT 25
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 25
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 25
11186: PUSH
11187: LD_INT 3
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 25
11196: PUSH
11197: LD_INT 4
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 69
11220: PUSH
11221: LD_EXP 1
11225: PUSH
11226: LD_EXP 5
11230: PUSH
11231: LD_EXP 2
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: DIFF
11241: PPUSH
11242: LD_STRING D10-Sol1-1
11244: PPUSH
11245: LD_STRING D10-FSol1-1
11247: PPUSH
11248: CALL 6771 0 3
// Say ( Frank , D10-Frank-2 ) ;
11252: LD_EXP 5
11256: PPUSH
11257: LD_STRING D10-Frank-2
11259: PPUSH
11260: CALL_OW 88
// if IsOk ( Lisa ) then
11264: LD_EXP 2
11268: PPUSH
11269: CALL_OW 302
11273: IFFALSE 11289
// Say ( Lisa , D10-Lisa-2 ) else
11275: LD_EXP 2
11279: PPUSH
11280: LD_STRING D10-Lisa-2
11282: PPUSH
11283: CALL_OW 88
11287: GO 11394
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11289: LD_INT 22
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 21
11301: PUSH
11302: LD_INT 1
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: LD_INT 25
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 25
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 25
11334: PUSH
11335: LD_INT 3
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 25
11344: PUSH
11345: LD_INT 4
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: PUSH
11369: LD_EXP 1
11373: PUSH
11374: LD_EXP 5
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: DIFF
11383: PPUSH
11384: LD_STRING D10-Sol1-2
11386: PPUSH
11387: LD_STRING D10-FSol1-2
11389: PPUSH
11390: CALL 6771 0 3
// DialogueOff ;
11394: CALL_OW 7
// end ;
11398: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11399: LD_INT 1
11401: PPUSH
11402: CALL_OW 463
11406: NOT
11407: IFFALSE 11690
11409: GO 11411
11411: DISABLE
// begin HarrisonSupport ;
11412: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11416: LD_EXP 17
11420: PPUSH
11421: CALL_OW 310
11425: PPUSH
11426: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11430: LD_EXP 17
11434: PPUSH
11435: LD_STRING DEng-Eng1-1
11437: PPUSH
11438: CALL_OW 88
// wait ( 1 1$0 ) ;
11442: LD_INT 2100
11444: PPUSH
11445: CALL_OW 67
// DialogueOn ;
11449: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11453: LD_EXP 14
11457: PPUSH
11458: LD_STRING DRem-Har-1
11460: PPUSH
11461: CALL_OW 94
// if contactWithRussian then
11465: LD_EXP 22
11469: IFFALSE 11485
// Say ( JMM , DRem-JMM-1 ) else
11471: LD_EXP 1
11475: PPUSH
11476: LD_STRING DRem-JMM-1
11478: PPUSH
11479: CALL_OW 88
11483: GO 11497
// Say ( JMM , DRem-JMM-1a ) ;
11485: LD_EXP 1
11489: PPUSH
11490: LD_STRING DRem-JMM-1a
11492: PPUSH
11493: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11497: LD_EXP 14
11501: PPUSH
11502: LD_STRING DRem-Har-2
11504: PPUSH
11505: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11509: LD_STRING DenisInDelta
11511: PPUSH
11512: LD_INT 0
11514: PPUSH
11515: CALL_OW 30
11519: IFFALSE 11535
// Say ( JMM , DRem-JMM-2 ) else
11521: LD_EXP 1
11525: PPUSH
11526: LD_STRING DRem-JMM-2
11528: PPUSH
11529: CALL_OW 88
11533: GO 11547
// Say ( JMM , DRem-JMM-2a ) ;
11535: LD_EXP 1
11539: PPUSH
11540: LD_STRING DRem-JMM-2a
11542: PPUSH
11543: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11547: LD_EXP 14
11551: PPUSH
11552: LD_STRING DRem-Har-3
11554: PPUSH
11555: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11559: LD_EXP 1
11563: PPUSH
11564: LD_STRING DRem-JMM-3
11566: PPUSH
11567: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11571: LD_EXP 14
11575: PPUSH
11576: LD_STRING DRem-Har-4
11578: PPUSH
11579: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11583: LD_STRING DenisInDelta
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 30
11593: IFFALSE 11653
// begin Say ( JMM , DRem-JMM-4 ) ;
11595: LD_EXP 1
11599: PPUSH
11600: LD_STRING DRem-JMM-4
11602: PPUSH
11603: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11607: LD_EXP 14
11611: PPUSH
11612: LD_STRING DRem-Har-5
11614: PPUSH
11615: CALL_OW 94
// DialogueOff ;
11619: CALL_OW 7
// wait ( 4 4$00 ) ;
11623: LD_INT 8400
11625: PPUSH
11626: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// until not InBattle ( 1 ) ;
11637: LD_INT 1
11639: PPUSH
11640: CALL_OW 463
11644: NOT
11645: IFFALSE 11630
// SpawnDenis ;
11647: CALL 11691 0 0
// end else
11651: GO 11690
// begin DialogueOff ;
11653: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11657: LD_INT 36
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11670: LD_INT 15
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11683: LD_STRING MR
11685: PPUSH
11686: CALL_OW 337
// end ; end ;
11690: END
// export function SpawnDenis ; var tmp ; begin
11691: LD_INT 0
11693: PPUSH
11694: PPUSH
// PrepareDenis ;
11695: CALL 2199 0 0
// if not Denis then
11699: LD_EXP 9
11703: NOT
11704: IFFALSE 11708
// exit ;
11706: GO 11929
// CenterNowOnUnits ( Denis ) ;
11708: LD_EXP 9
11712: PPUSH
11713: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PPUSH
11732: CALL_OW 69
11736: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11737: LD_EXP 9
11741: PPUSH
11742: LD_VAR 0 2
11746: PPUSH
11747: LD_EXP 9
11751: PPUSH
11752: CALL_OW 74
11756: PPUSH
11757: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11761: LD_INT 35
11763: PPUSH
11764: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11768: LD_INT 22
11770: PUSH
11771: LD_INT 1
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 91
11780: PUSH
11781: LD_EXP 9
11785: PUSH
11786: LD_INT 10
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: IFFALSE 11761
// SetSide ( Denis , 1 ) ;
11804: LD_EXP 9
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 235
// DialogueOn ;
11816: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11820: LD_EXP 9
11824: PPUSH
11825: LD_STRING DDen-Den-1
11827: PPUSH
11828: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11832: LD_EXP 1
11836: PPUSH
11837: LD_STRING DDen-JMM-1
11839: PPUSH
11840: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11844: LD_EXP 9
11848: PPUSH
11849: LD_STRING DDen-Den-2
11851: PPUSH
11852: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11856: LD_EXP 1
11860: PPUSH
11861: LD_STRING DDen-JMM-2
11863: PPUSH
11864: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11868: LD_EXP 9
11872: PPUSH
11873: LD_STRING DDen-Den-3
11875: PPUSH
11876: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11880: LD_EXP 1
11884: PPUSH
11885: LD_STRING DDen-JMM-3
11887: PPUSH
11888: CALL_OW 88
// DialogueOff ;
11892: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11896: LD_INT 36
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11909: LD_INT 15
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11922: LD_STRING MR
11924: PPUSH
11925: CALL_OW 337
// end ;
11929: LD_VAR 0 1
11933: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11934: LD_INT 22
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 30
11946: PUSH
11947: LD_INT 15
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 69
11962: PUSH
11963: LD_EXP 9
11967: PPUSH
11968: CALL_OW 302
11972: AND
11973: PUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 463
11981: NOT
11982: AND
11983: IFFALSE 12012
11985: GO 11987
11987: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11988: LD_EXP 9
11992: PPUSH
11993: LD_STRING DR1-Den-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12000: LD_EXP 1
12004: PPUSH
12005: LD_STRING DR1-JMM-1
12007: PPUSH
12008: CALL_OW 88
// end ;
12012: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12013: LD_INT 15
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 321
12023: PUSH
12024: LD_INT 2
12026: EQUAL
12027: PUSH
12028: LD_EXP 9
12032: PPUSH
12033: CALL_OW 302
12037: AND
12038: PUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 463
12046: NOT
12047: AND
12048: IFFALSE 12257
12050: GO 12052
12052: DISABLE
// begin DialogueOn ;
12053: CALL_OW 6
// if IsOK ( Denis ) then
12057: LD_EXP 9
12061: PPUSH
12062: CALL_OW 302
12066: IFFALSE 12082
// Say ( Denis , DR2-Den-1 ) else
12068: LD_EXP 9
12072: PPUSH
12073: LD_STRING DR2-Den-1
12075: PPUSH
12076: CALL_OW 88
12080: GO 12141
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12082: LD_INT 22
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 4
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: PUSH
12122: LD_EXP 1
12126: PUSH
12127: EMPTY
12128: LIST
12129: DIFF
12130: PPUSH
12131: LD_STRING DR2-Sci1-1
12133: PPUSH
12134: LD_STRING DR2-FSci1-1
12136: PPUSH
12137: CALL 6771 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12141: LD_EXP 1
12145: PPUSH
12146: LD_STRING DR2-JMM-1
12148: PPUSH
12149: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12153: LD_INT 22
12155: PUSH
12156: LD_INT 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 21
12165: PUSH
12166: LD_INT 1
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 26
12175: PUSH
12176: LD_INT 1
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 23
12185: PUSH
12186: LD_INT 1
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: PPUSH
12199: CALL_OW 69
12203: PUSH
12204: LD_EXP 1
12208: PUSH
12209: LD_EXP 9
12213: PUSH
12214: LD_EXP 8
12218: PUSH
12219: LD_EXP 5
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: DIFF
12230: PPUSH
12231: LD_STRING DR2-Sol1-1
12233: PPUSH
12234: LD_STRING 
12236: PPUSH
12237: CALL 6771 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12241: LD_EXP 1
12245: PPUSH
12246: LD_STRING DR2-JMM-2
12248: PPUSH
12249: CALL_OW 88
// DialogueOff ;
12253: CALL_OW 7
// end ;
12257: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12258: LD_INT 22
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 30
12270: PUSH
12271: LD_INT 36
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: PUSH
12287: LD_INT 0
12289: EQUAL
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 21
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 33
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: PUSH
12331: LD_INT 0
12333: GREATER
12334: AND
12335: PUSH
12336: LD_EXP 23
12340: PUSH
12341: LD_INT 0
12343: EQUAL
12344: AND
12345: PUSH
12346: LD_INT 1
12348: PPUSH
12349: CALL_OW 463
12353: NOT
12354: AND
12355: IFFALSE 12492
12357: GO 12359
12359: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12360: LD_INT 22
12362: PUSH
12363: LD_INT 1
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 21
12372: PUSH
12373: LD_INT 1
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 25
12382: PUSH
12383: LD_INT 3
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 26
12392: PUSH
12393: LD_INT 1
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: PPUSH
12406: CALL_OW 69
12410: PUSH
12411: LD_EXP 1
12415: PUSH
12416: LD_EXP 6
12420: PUSH
12421: LD_EXP 7
12425: PUSH
12426: LD_EXP 9
12430: PUSH
12431: LD_EXP 15
12435: PUSH
12436: LD_EXP 3
12440: PUSH
12441: LD_EXP 4
12445: PUSH
12446: LD_EXP 2
12450: PUSH
12451: LD_EXP 5
12455: PUSH
12456: LD_EXP 8
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: DIFF
12473: PPUSH
12474: LD_STRING D3a-Mech1-1
12476: PPUSH
12477: LD_STRING 
12479: PPUSH
12480: CALL 6771 0 3
// firstTower = 2 ;
12484: LD_ADDR_EXP 23
12488: PUSH
12489: LD_INT 2
12491: ST_TO_ADDR
// end ;
12492: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12493: LD_INT 22
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 21
12505: PUSH
12506: LD_INT 3
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 69
12521: PUSH
12522: LD_INT 0
12524: EQUAL
12525: IFFALSE 12656
12527: GO 12529
12529: DISABLE
12530: LD_INT 0
12532: PPUSH
// begin stop_talking := true ;
12533: LD_ADDR_OWVAR 56
12537: PUSH
12538: LD_INT 1
12540: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12541: LD_ADDR_VAR 0 1
12545: PUSH
12546: LD_INT 22
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 21
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 2
12568: PUSH
12569: LD_INT 25
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 25
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 25
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 25
12601: PUSH
12602: LD_INT 4
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 69
12625: PUSH
12626: FOR_IN
12627: IFFALSE 12646
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12629: LD_VAR 0 1
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: LD_INT 7500
12639: PPUSH
12640: CALL_OW 591
12644: GO 12626
12646: POP
12647: POP
// stop_talking := false ;
12648: LD_ADDR_OWVAR 56
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// end ;
12656: PPOPN 1
12658: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12659: LD_INT 22
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 30
12671: PUSH
12672: LD_INT 36
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PPUSH
12683: CALL_OW 69
12687: PUSH
12688: LD_INT 22
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 21
12700: PUSH
12701: LD_INT 2
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 33
12710: PUSH
12711: LD_INT 2
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 69
12727: AND
12728: PUSH
12729: CALL 13281 0 0
12733: AND
12734: PUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 463
12742: NOT
12743: AND
12744: IFFALSE 13278
12746: GO 12748
12748: DISABLE
12749: LD_INT 0
12751: PPUSH
12752: PPUSH
12753: PPUSH
12754: PPUSH
12755: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12756: LD_ADDR_VAR 0 3
12760: PUSH
12761: LD_INT 22
12763: PUSH
12764: LD_INT 1
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 30
12773: PUSH
12774: LD_INT 36
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PPUSH
12785: CALL_OW 69
12789: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12790: LD_ADDR_VAR 0 4
12794: PUSH
12795: LD_INT 22
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 21
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 33
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 69
12834: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12835: LD_ADDR_VAR 0 5
12839: PUSH
12840: EMPTY
12841: ST_TO_ADDR
// for i in tmpControlTowers do
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_VAR 0 3
12851: PUSH
12852: FOR_IN
12853: IFFALSE 13276
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12855: LD_EXP 1
12859: PPUSH
12860: CALL_OW 310
12864: PUSH
12865: LD_VAR 0 1
12869: EQUAL
12870: PUSH
12871: LD_EXP 1
12875: PPUSH
12876: CALL_OW 257
12880: PUSH
12881: LD_INT 3
12883: EQUAL
12884: AND
12885: IFFALSE 13019
// begin InGameOn ;
12887: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12891: LD_VAR 0 4
12895: PUSH
12896: LD_INT 1
12898: ARRAY
12899: PPUSH
12900: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12904: LD_EXP 1
12908: PPUSH
12909: LD_STRING D4a-JMM-1
12911: PPUSH
12912: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12916: LD_VAR 0 4
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: LD_EXP 1
12929: PPUSH
12930: CALL_OW 53
// wait ( 0 0$1 ) ;
12934: LD_INT 35
12936: PPUSH
12937: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12941: LD_VAR 0 4
12945: PUSH
12946: LD_INT 1
12948: ARRAY
12949: PPUSH
12950: LD_VAR 0 4
12954: PUSH
12955: LD_INT 1
12957: ARRAY
12958: PPUSH
12959: CALL_OW 250
12963: PUSH
12964: LD_INT 3
12966: PLUS
12967: PPUSH
12968: LD_VAR 0 4
12972: PUSH
12973: LD_INT 1
12975: ARRAY
12976: PPUSH
12977: CALL_OW 251
12981: PUSH
12982: LD_INT 2
12984: MINUS
12985: PPUSH
12986: CALL_OW 111
// wait ( 0 0$2 ) ;
12990: LD_INT 70
12992: PPUSH
12993: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12997: LD_EXP 1
13001: PPUSH
13002: LD_STRING D4b-JMM-1
13004: PPUSH
13005: CALL_OW 88
// InGameOff ;
13009: CALL_OW 9
// exit ;
13013: POP
13014: POP
13015: GO 13278
// end else
13017: GO 13274
// begin InGameOn ;
13019: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13023: LD_ADDR_VAR 0 5
13027: PUSH
13028: LD_VAR 0 1
13032: PPUSH
13033: CALL_OW 313
13037: PPUSH
13038: LD_INT 25
13040: PUSH
13041: LD_INT 3
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PPUSH
13048: CALL_OW 72
13052: ST_TO_ADDR
// if not tmpMechanicInside then
13053: LD_VAR 0 5
13057: NOT
13058: IFFALSE 13062
// continue ;
13060: GO 12852
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13062: LD_VAR 0 5
13066: PUSH
13067: LD_INT 1
13069: ARRAY
13070: PPUSH
13071: CALL_OW 258
13075: PUSH
13076: LD_INT 1
13078: EQUAL
13079: IFFALSE 13099
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13081: LD_VAR 0 5
13085: PUSH
13086: LD_INT 1
13088: ARRAY
13089: PPUSH
13090: LD_STRING D4a-Mech1-1
13092: PPUSH
13093: CALL_OW 88
13097: GO 13115
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13099: LD_VAR 0 5
13103: PUSH
13104: LD_INT 1
13106: ARRAY
13107: PPUSH
13108: LD_STRING D4a-FMech1-1
13110: PPUSH
13111: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13115: LD_VAR 0 4
13119: PUSH
13120: LD_INT 1
13122: ARRAY
13123: PPUSH
13124: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13128: LD_VAR 0 4
13132: PUSH
13133: LD_INT 1
13135: ARRAY
13136: PPUSH
13137: LD_VAR 0 5
13141: PUSH
13142: LD_INT 1
13144: ARRAY
13145: PPUSH
13146: CALL_OW 53
// wait ( 0 0$1 ) ;
13150: LD_INT 35
13152: PPUSH
13153: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13157: LD_VAR 0 4
13161: PUSH
13162: LD_INT 1
13164: ARRAY
13165: PPUSH
13166: LD_VAR 0 4
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 250
13179: PUSH
13180: LD_INT 3
13182: PLUS
13183: PPUSH
13184: LD_VAR 0 4
13188: PUSH
13189: LD_INT 1
13191: ARRAY
13192: PPUSH
13193: CALL_OW 251
13197: PUSH
13198: LD_INT 2
13200: MINUS
13201: PPUSH
13202: CALL_OW 111
// wait ( 0 0$2 ) ;
13206: LD_INT 70
13208: PPUSH
13209: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13213: LD_VAR 0 5
13217: PUSH
13218: LD_INT 1
13220: ARRAY
13221: PPUSH
13222: CALL_OW 258
13226: PUSH
13227: LD_INT 1
13229: EQUAL
13230: IFFALSE 13250
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13232: LD_VAR 0 5
13236: PUSH
13237: LD_INT 1
13239: ARRAY
13240: PPUSH
13241: LD_STRING D4b-Mech1-1
13243: PPUSH
13244: CALL_OW 88
13248: GO 13266
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13250: LD_VAR 0 5
13254: PUSH
13255: LD_INT 1
13257: ARRAY
13258: PPUSH
13259: LD_STRING D4b-FMech1-1
13261: PPUSH
13262: CALL_OW 88
// InGameOff ;
13266: CALL_OW 9
// exit ;
13270: POP
13271: POP
13272: GO 13278
// end ; end ;
13274: GO 12852
13276: POP
13277: POP
// end ;
13278: PPOPN 5
13280: END
// function CheckMehInside ; var i , j , tmp ; begin
13281: LD_INT 0
13283: PPUSH
13284: PPUSH
13285: PPUSH
13286: PPUSH
// result := false ;
13287: LD_ADDR_VAR 0 1
13291: PUSH
13292: LD_INT 0
13294: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13295: LD_ADDR_VAR 0 4
13299: PUSH
13300: LD_INT 22
13302: PUSH
13303: LD_INT 1
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 36
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PPUSH
13324: CALL_OW 69
13328: ST_TO_ADDR
// if not tmp then
13329: LD_VAR 0 4
13333: NOT
13334: IFFALSE 13338
// exit ;
13336: GO 13402
// for i in tmp do
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_VAR 0 4
13347: PUSH
13348: FOR_IN
13349: IFFALSE 13400
// for j in UnitsInside ( i ) do
13351: LD_ADDR_VAR 0 3
13355: PUSH
13356: LD_VAR 0 2
13360: PPUSH
13361: CALL_OW 313
13365: PUSH
13366: FOR_IN
13367: IFFALSE 13396
// if GetClass ( j ) = class_mechanic then
13369: LD_VAR 0 3
13373: PPUSH
13374: CALL_OW 257
13378: PUSH
13379: LD_INT 3
13381: EQUAL
13382: IFFALSE 13394
// begin result := true ;
13384: LD_ADDR_VAR 0 1
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// break ;
13392: GO 13396
// end ;
13394: GO 13366
13396: POP
13397: POP
13398: GO 13348
13400: POP
13401: POP
// end ;
13402: LD_VAR 0 1
13406: RET
// every 12 12$0 do
13407: GO 13409
13409: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13410: LD_INT 35
13412: PPUSH
13413: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) or timeToEnd < 5 5$00 ;
13417: LD_INT 1
13419: PPUSH
13420: CALL_OW 463
13424: NOT
13425: PUSH
13426: LD_INT 32
13428: PPUSH
13429: LD_INT 81
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 70
13443: NOT
13444: AND
13445: PUSH
13446: LD_EXP 26
13450: PUSH
13451: LD_INT 10500
13453: LESS
13454: OR
13455: IFFALSE 13410
// PrepareKurt ;
13457: CALL 16090 0 0
// end ;
13461: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13462: LD_EXP 15
13466: PPUSH
13467: CALL_OW 302
13471: PUSH
13472: LD_EXP 15
13476: PPUSH
13477: CALL_OW 255
13481: PUSH
13482: LD_INT 1
13484: EQUAL
13485: AND
13486: PUSH
13487: LD_EXP 2
13491: AND
13492: IFFALSE 13657
13494: GO 13496
13496: DISABLE
// begin wait ( 0 0$50 ) ;
13497: LD_INT 1750
13499: PPUSH
13500: CALL_OW 67
// if not IsOk ( Joan ) then
13504: LD_EXP 15
13508: PPUSH
13509: CALL_OW 302
13513: NOT
13514: IFFALSE 13518
// exit ;
13516: GO 13657
// if IsOK ( Lisa ) then
13518: LD_EXP 2
13522: PPUSH
13523: CALL_OW 302
13527: IFFALSE 13657
// begin DialogueOn ;
13529: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13533: LD_EXP 2
13537: PPUSH
13538: LD_STRING D7-Lisa-1
13540: PPUSH
13541: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13545: LD_EXP 1
13549: PPUSH
13550: LD_STRING D7-JMM-1
13552: PPUSH
13553: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13557: LD_EXP 2
13561: PPUSH
13562: LD_STRING D7-Lisa-2
13564: PPUSH
13565: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13569: LD_EXP 1
13573: PPUSH
13574: LD_STRING D7-JMM-2
13576: PPUSH
13577: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13581: LD_EXP 2
13585: PPUSH
13586: LD_STRING D7-Lisa-3
13588: PPUSH
13589: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13593: LD_EXP 1
13597: PPUSH
13598: LD_STRING D7-JMM-3
13600: PPUSH
13601: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13605: LD_EXP 2
13609: PPUSH
13610: LD_STRING D7-Lisa-4
13612: PPUSH
13613: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13617: LD_EXP 1
13621: PPUSH
13622: LD_STRING D7-JMM-4
13624: PPUSH
13625: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13629: LD_EXP 1
13633: PPUSH
13634: LD_STRING D7-JMM-4a
13636: PPUSH
13637: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13641: LD_EXP 2
13645: PPUSH
13646: LD_STRING D7-Lisa-5
13648: PPUSH
13649: CALL_OW 88
// DialogueOff ;
13653: CALL_OW 7
// end ; end ;
13657: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13658: LD_EXP 13
13662: PUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 91
13675: PUSH
13676: LD_EXP 13
13680: PUSH
13681: LD_INT 10
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: LD_INT 25
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 25
13704: PUSH
13705: LD_INT 2
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 25
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 25
13724: PUSH
13725: LD_INT 4
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: PUSH
13749: LD_INT 1
13751: GREATER
13752: AND
13753: IFFALSE 13770
13755: GO 13757
13757: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13758: LD_EXP 13
13762: PPUSH
13763: LD_STRING D5-Sol1-1
13765: PPUSH
13766: CALL_OW 88
13770: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13771: LD_INT 22
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 33
13783: PUSH
13784: LD_INT 2
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: PUSH
13800: LD_INT 2
13802: GREATEREQUAL
13803: IFFALSE 13823
13805: GO 13807
13807: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13808: LD_STRING MRa
13810: PPUSH
13811: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13815: LD_ADDR_EXP 28
13819: PUSH
13820: LD_INT 1
13822: ST_TO_ADDR
// end ;
13823: END
// every 2 2$00 do var i , last ;
13824: GO 13826
13826: DISABLE
13827: LD_INT 0
13829: PPUSH
13830: PPUSH
// begin last := 8 ;
13831: LD_ADDR_VAR 0 2
13835: PUSH
13836: LD_INT 8
13838: ST_TO_ADDR
// for i = 1 to last do
13839: LD_ADDR_VAR 0 1
13843: PUSH
13844: DOUBLE
13845: LD_INT 1
13847: DEC
13848: ST_TO_ADDR
13849: LD_VAR 0 2
13853: PUSH
13854: FOR_TO
13855: IFFALSE 13883
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13857: LD_INT 6300
13859: PPUSH
13860: LD_INT 12600
13862: PPUSH
13863: CALL_OW 12
13867: PPUSH
13868: CALL_OW 67
// PrepareRandoms ( i ) ;
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL 4078 0 1
// end ;
13881: GO 13854
13883: POP
13884: POP
// end ;
13885: PPOPN 2
13887: END
// every 5 5$20 do
13888: GO 13890
13890: DISABLE
// begin DialogueOn ;
13891: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13895: LD_EXP 10
13899: PPUSH
13900: LD_STRING D12a-Sci-1
13902: PPUSH
13903: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13907: LD_EXP 1
13911: PPUSH
13912: LD_STRING D12a-JMM-1
13914: PPUSH
13915: CALL_OW 88
// DialogueOff ;
13919: CALL_OW 7
// cratesStatus := 1 ;
13923: LD_ADDR_EXP 38
13927: PUSH
13928: LD_INT 1
13930: ST_TO_ADDR
// end ;
13931: END
// every 13 13$0 do
13932: GO 13934
13934: DISABLE
// begin DialogueOn ;
13935: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13939: LD_EXP 10
13943: PPUSH
13944: LD_STRING D12b-Sci-1
13946: PPUSH
13947: CALL_OW 94
// DialogueOff ;
13951: CALL_OW 7
// cratesStatus := 2 ;
13955: LD_ADDR_EXP 38
13959: PUSH
13960: LD_INT 2
13962: ST_TO_ADDR
// BuildBulldozer ;
13963: CALL 9814 0 0
// end ;
13967: END
// every 32 32$0 do
13968: GO 13970
13970: DISABLE
// begin DialogueOn ;
13971: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13975: LD_EXP 10
13979: PPUSH
13980: LD_STRING D12c-Sci-1
13982: PPUSH
13983: CALL_OW 94
// DialogueOff ;
13987: CALL_OW 7
// wait ( 3 3$0 ) ;
13991: LD_INT 6300
13993: PPUSH
13994: CALL_OW 67
// DialogueOn ;
13998: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14002: LD_EXP 10
14006: PPUSH
14007: LD_STRING D12d-Sci-1
14009: PPUSH
14010: CALL_OW 94
// DialogueOff ;
14014: CALL_OW 7
// cratesStatus = 1 ;
14018: LD_ADDR_EXP 38
14022: PUSH
14023: LD_INT 1
14025: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14026: CALL 20258 0 0
// wait ( 2 2$30 ) ;
14030: LD_INT 5250
14032: PPUSH
14033: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14037: LD_INT 35
14039: PPUSH
14040: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14044: LD_INT 1
14046: PPUSH
14047: CALL_OW 463
14051: NOT
14052: PUSH
14053: LD_INT 32
14055: PPUSH
14056: LD_INT 81
14058: PUSH
14059: LD_INT 1
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PPUSH
14066: CALL_OW 70
14070: NOT
14071: AND
14072: PUSH
14073: LD_EXP 26
14077: PUSH
14078: LD_INT 6300
14080: LESS
14081: OR
14082: IFFALSE 14037
// PrepareJoan ;
14084: CALL 3034 0 0
// end ;
14088: END
// every 42 42$0 do
14089: GO 14091
14091: DISABLE
// begin DialogueOn ;
14092: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14096: LD_EXP 10
14100: PPUSH
14101: LD_STRING D12e-Sci-1
14103: PPUSH
14104: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14108: LD_EXP 1
14112: PPUSH
14113: LD_STRING D12e-JMM-1
14115: PPUSH
14116: CALL_OW 88
// DialogueOff ;
14120: CALL_OW 7
// cratesStatus := 2 ;
14124: LD_ADDR_EXP 38
14128: PUSH
14129: LD_INT 2
14131: ST_TO_ADDR
// end ; end_of_file
14132: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14133: LD_VAR 0 1
14137: PUSH
14138: LD_INT 1
14140: EQUAL
14141: PUSH
14142: LD_VAR 0 2
14146: PUSH
14147: LD_INT 3
14149: EQUAL
14150: AND
14151: IFFALSE 14161
// contactWithRussian := 1 ;
14153: LD_ADDR_EXP 22
14157: PUSH
14158: LD_INT 1
14160: ST_TO_ADDR
// end ;
14161: PPOPN 2
14163: END
// on BuildingComplete ( building ) do var i ;
14164: LD_INT 0
14166: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14167: LD_VAR 0 1
14171: PPUSH
14172: CALL_OW 266
14176: PUSH
14177: LD_INT 36
14179: EQUAL
14180: PUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 255
14190: PUSH
14191: LD_INT 1
14193: EQUAL
14194: AND
14195: PUSH
14196: LD_EXP 23
14200: PUSH
14201: LD_INT 0
14203: EQUAL
14204: AND
14205: IFFALSE 14285
// begin firstTower = 1 ;
14207: LD_ADDR_EXP 23
14211: PUSH
14212: LD_INT 1
14214: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14215: LD_INT 22
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 21
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 25
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 26
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: PUSH
14266: LD_EXP 1
14270: PUSH
14271: EMPTY
14272: LIST
14273: DIFF
14274: PPUSH
14275: LD_STRING D3b-Mech1-1
14277: PPUSH
14278: LD_STRING D3b-Mech1-1
14280: PPUSH
14281: CALL 6771 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 266
14294: PUSH
14295: LD_INT 0
14297: EQUAL
14298: PUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 255
14308: PUSH
14309: LD_INT 1
14311: EQUAL
14312: AND
14313: IFFALSE 14327
// SetBName ( building , theta ) ;
14315: LD_VAR 0 1
14319: PPUSH
14320: LD_STRING theta
14322: PPUSH
14323: CALL_OW 500
// if GetSide ( building ) = 3 then
14327: LD_VAR 0 1
14331: PPUSH
14332: CALL_OW 255
14336: PUSH
14337: LD_INT 3
14339: EQUAL
14340: IFFALSE 14380
// begin for i := 1 to 4 do
14342: LD_ADDR_VAR 0 2
14346: PUSH
14347: DOUBLE
14348: LD_INT 1
14350: DEC
14351: ST_TO_ADDR
14352: LD_INT 4
14354: PUSH
14355: FOR_TO
14356: IFFALSE 14378
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14358: LD_ADDR_EXP 31
14362: PUSH
14363: LD_EXP 31
14367: PPUSH
14368: LD_INT 1
14370: PPUSH
14371: CALL_OW 3
14375: ST_TO_ADDR
14376: GO 14355
14378: POP
14379: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 255
14389: PUSH
14390: LD_INT 3
14392: EQUAL
14393: PUSH
14394: LD_VAR 0 1
14398: PPUSH
14399: CALL_OW 266
14403: PUSH
14404: LD_INT 0
14406: EQUAL
14407: PUSH
14408: LD_VAR 0 1
14412: PPUSH
14413: CALL_OW 266
14417: PUSH
14418: LD_INT 2
14420: EQUAL
14421: OR
14422: PUSH
14423: LD_VAR 0 1
14427: PPUSH
14428: CALL_OW 266
14432: PUSH
14433: LD_INT 4
14435: EQUAL
14436: OR
14437: PUSH
14438: EMPTY
14439: LIST
14440: AND
14441: IFFALSE 14452
// ComUpgrade ( building ) ;
14443: LD_VAR 0 1
14447: PPUSH
14448: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14452: LD_VAR 0 1
14456: PPUSH
14457: CALL_OW 255
14461: PUSH
14462: LD_INT 3
14464: EQUAL
14465: PUSH
14466: LD_VAR 0 1
14470: PPUSH
14471: CALL_OW 266
14475: PUSH
14476: LD_INT 32
14478: EQUAL
14479: AND
14480: IFFALSE 14521
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14482: LD_VAR 0 1
14486: PPUSH
14487: LD_INT 42
14489: PUSH
14490: LD_INT 43
14492: PUSH
14493: LD_INT 44
14495: PUSH
14496: LD_INT 46
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 1
14507: PPUSH
14508: LD_INT 4
14510: PPUSH
14511: CALL_OW 12
14515: ARRAY
14516: PPUSH
14517: CALL_OW 208
// end ;
14521: PPOPN 2
14523: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL 36645 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14533: LD_VAR 0 1
14537: PUSH
14538: LD_INT 22
14540: PUSH
14541: LD_INT 1
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 21
14550: PUSH
14551: LD_INT 1
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 23
14560: PUSH
14561: LD_INT 1
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: LIST
14572: PPUSH
14573: CALL_OW 69
14577: IN
14578: IFFALSE 14594
// killCounter := killCounter + 1 ;
14580: LD_ADDR_EXP 45
14584: PUSH
14585: LD_EXP 45
14589: PUSH
14590: LD_INT 1
14592: PLUS
14593: ST_TO_ADDR
// if unit in ruAttackersInForest then
14594: LD_VAR 0 1
14598: PUSH
14599: LD_EXP 48
14603: IN
14604: IFFALSE 14622
// ruAttackersInForest := ruAttackersInForest diff unit ;
14606: LD_ADDR_EXP 48
14610: PUSH
14611: LD_EXP 48
14615: PUSH
14616: LD_VAR 0 1
14620: DIFF
14621: ST_TO_ADDR
// if unit in ruAttackers then
14622: LD_VAR 0 1
14626: PUSH
14627: LD_EXP 47
14631: IN
14632: IFFALSE 14650
// ruAttackers := ruAttackers diff unit ;
14634: LD_ADDR_EXP 47
14638: PUSH
14639: LD_EXP 47
14643: PUSH
14644: LD_VAR 0 1
14648: DIFF
14649: ST_TO_ADDR
// if unit = JMM then
14650: LD_VAR 0 1
14654: PUSH
14655: LD_EXP 1
14659: EQUAL
14660: IFFALSE 14669
// YouLost ( JMM ) ;
14662: LD_STRING JMM
14664: PPUSH
14665: CALL_OW 104
// if unit = Joan then
14669: LD_VAR 0 1
14673: PUSH
14674: LD_EXP 15
14678: EQUAL
14679: IFFALSE 14689
// JoanStatus := 0 ;
14681: LD_ADDR_EXP 16
14685: PUSH
14686: LD_INT 0
14688: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 255
14698: PUSH
14699: LD_INT 1
14701: EQUAL
14702: PUSH
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 247
14712: PUSH
14713: LD_INT 1
14715: EQUAL
14716: AND
14717: PUSH
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 248
14727: PUSH
14728: LD_INT 1
14730: EQUAL
14731: AND
14732: IFFALSE 14748
// unitLost = unitLost + 1 ;
14734: LD_ADDR_EXP 30
14738: PUSH
14739: LD_EXP 30
14743: PUSH
14744: LD_INT 1
14746: PLUS
14747: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14748: LD_VAR 0 1
14752: PPUSH
14753: CALL_OW 255
14757: PUSH
14758: LD_INT 3
14760: EQUAL
14761: PUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 247
14771: PUSH
14772: LD_INT 3
14774: EQUAL
14775: AND
14776: PUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 266
14786: PUSH
14787: LD_INT 4
14789: PUSH
14790: LD_INT 5
14792: PUSH
14793: LD_INT 32
14795: PUSH
14796: LD_INT 31
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: IN
14805: AND
14806: IFFALSE 14892
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14808: LD_ADDR_EXP 31
14812: PUSH
14813: LD_EXP 31
14817: PUSH
14818: LD_VAR 0 1
14822: PPUSH
14823: CALL_OW 266
14827: ADD
14828: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14829: LD_ADDR_EXP 31
14833: PUSH
14834: LD_EXP 31
14838: PUSH
14839: LD_VAR 0 1
14843: PPUSH
14844: CALL_OW 250
14848: ADD
14849: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14850: LD_ADDR_EXP 31
14854: PUSH
14855: LD_EXP 31
14859: PUSH
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 251
14869: ADD
14870: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14871: LD_ADDR_EXP 31
14875: PUSH
14876: LD_EXP 31
14880: PUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 254
14890: ADD
14891: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14892: LD_EXP 46
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 257
14906: PUSH
14907: LD_INT 3
14909: EQUAL
14910: AND
14911: PUSH
14912: LD_VAR 0 1
14916: PPUSH
14917: CALL_OW 255
14921: PUSH
14922: LD_INT 3
14924: EQUAL
14925: AND
14926: PUSH
14927: LD_INT 21
14929: PPUSH
14930: CALL_OW 302
14934: AND
14935: PUSH
14936: LD_INT 21
14938: PPUSH
14939: CALL_OW 255
14943: PUSH
14944: LD_INT 3
14946: EQUAL
14947: AND
14948: IFFALSE 15030
// begin ruMechCounter := ruMechCounter - 1 ;
14950: LD_ADDR_EXP 46
14954: PUSH
14955: LD_EXP 46
14959: PUSH
14960: LD_INT 1
14962: MINUS
14963: ST_TO_ADDR
// uc_side := 3 ;
14964: LD_ADDR_OWVAR 20
14968: PUSH
14969: LD_INT 3
14971: ST_TO_ADDR
// uc_nation := 3 ;
14972: LD_ADDR_OWVAR 21
14976: PUSH
14977: LD_INT 3
14979: ST_TO_ADDR
// hc_gallery :=  ;
14980: LD_ADDR_OWVAR 33
14984: PUSH
14985: LD_STRING 
14987: ST_TO_ADDR
// hc_name :=  ;
14988: LD_ADDR_OWVAR 26
14992: PUSH
14993: LD_STRING 
14995: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14996: LD_INT 0
14998: PPUSH
14999: LD_EXP 34
15003: PPUSH
15004: LD_EXP 35
15008: PPUSH
15009: CALL_OW 12
15013: PPUSH
15014: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15018: CALL_OW 44
15022: PPUSH
15023: LD_INT 21
15025: PPUSH
15026: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15030: LD_VAR 0 1
15034: PPUSH
15035: CALL_OW 255
15039: PUSH
15040: LD_INT 3
15042: EQUAL
15043: PUSH
15044: LD_VAR 0 1
15048: PPUSH
15049: CALL_OW 264
15053: PUSH
15054: LD_INT 52
15056: EQUAL
15057: AND
15058: PUSH
15059: LD_INT 21
15061: PPUSH
15062: CALL_OW 302
15066: AND
15067: PUSH
15068: LD_INT 21
15070: PPUSH
15071: CALL_OW 255
15075: PUSH
15076: LD_INT 3
15078: EQUAL
15079: AND
15080: IFFALSE 15101
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15082: LD_INT 21
15084: PPUSH
15085: LD_INT 22
15087: PPUSH
15088: LD_INT 1
15090: PPUSH
15091: LD_INT 1
15093: PPUSH
15094: LD_INT 52
15096: PPUSH
15097: CALL_OW 125
// end ;
15101: PPOPN 1
15103: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15104: LD_INT 0
15106: PPUSH
15107: PPUSH
15108: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15109: LD_VAR 0 1
15113: PPUSH
15114: LD_VAR 0 2
15118: PPUSH
15119: CALL 36765 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL_OW 255
15132: PUSH
15133: LD_INT 3
15135: EQUAL
15136: PUSH
15137: LD_VAR 0 1
15141: PPUSH
15142: CALL_OW 264
15146: PUSH
15147: LD_INT 51
15149: PUSH
15150: LD_INT 52
15152: PUSH
15153: LD_INT 53
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: IN
15161: NOT
15162: AND
15163: IFFALSE 15194
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15165: LD_ADDR_EXP 47
15169: PUSH
15170: LD_EXP 47
15174: PPUSH
15175: LD_EXP 47
15179: PUSH
15180: LD_INT 1
15182: PLUS
15183: PPUSH
15184: LD_VAR 0 1
15188: PPUSH
15189: CALL_OW 1
15193: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 264
15203: PUSH
15204: LD_INT 53
15206: EQUAL
15207: IFFALSE 15362
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15209: LD_VAR 0 1
15213: PPUSH
15214: LD_INT 60
15216: PPUSH
15217: LD_INT 85
15219: PPUSH
15220: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15224: LD_VAR 0 1
15228: PPUSH
15229: LD_INT 43
15231: PPUSH
15232: LD_INT 69
15234: PPUSH
15235: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15239: LD_VAR 0 1
15243: PPUSH
15244: LD_INT 37
15246: PPUSH
15247: LD_INT 46
15249: PPUSH
15250: CALL_OW 171
// wait ( 0 0$1 ) ;
15254: LD_INT 35
15256: PPUSH
15257: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15261: LD_INT 35
15263: PPUSH
15264: CALL_OW 67
// until not HasTask ( vehicle ) ;
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 314
15277: NOT
15278: IFFALSE 15261
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15280: LD_VAR 0 1
15284: PPUSH
15285: LD_INT 34
15287: PPUSH
15288: CALL 9866 0 2
// repeat wait ( 0 0$1 ) ;
15292: LD_INT 35
15294: PPUSH
15295: CALL_OW 67
// until not HasTask ( vehicle ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: CALL_OW 314
15308: NOT
15309: IFFALSE 15292
// un := IsDrivenBy ( vehicle ) ;
15311: LD_ADDR_VAR 0 4
15315: PUSH
15316: LD_VAR 0 1
15320: PPUSH
15321: CALL_OW 311
15325: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15326: LD_VAR 0 4
15330: PPUSH
15331: LD_INT 96
15333: PPUSH
15334: LD_INT 77
15336: PPUSH
15337: CALL_OW 171
// AddComExitVehicle ( un ) ;
15341: LD_VAR 0 4
15345: PPUSH
15346: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15350: LD_VAR 0 4
15354: PPUSH
15355: LD_INT 17
15357: PPUSH
15358: CALL_OW 180
// end ; end ;
15362: PPOPN 5
15364: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15365: LD_VAR 0 1
15369: PPUSH
15370: CALL_OW 255
15374: PUSH
15375: LD_INT 3
15377: EQUAL
15378: IFFALSE 15409
// begin tamedApemans = tamedApemans + 1 ;
15380: LD_ADDR_EXP 32
15384: PUSH
15385: LD_EXP 32
15389: PUSH
15390: LD_INT 1
15392: PLUS
15393: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15394: LD_VAR 0 1
15398: PPUSH
15399: LD_INT 106
15401: PPUSH
15402: LD_INT 85
15404: PPUSH
15405: CALL_OW 111
// end ; end ;
15409: PPOPN 2
15411: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15412: LD_VAR 0 2
15416: PPUSH
15417: CALL_OW 255
15421: PUSH
15422: LD_INT 3
15424: EQUAL
15425: PUSH
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 255
15435: PUSH
15436: LD_INT 3
15438: EQUAL
15439: AND
15440: PUSH
15441: LD_INT 21
15443: PPUSH
15444: CALL_OW 302
15448: AND
15449: IFFALSE 15463
// ComEnterUnit ( human , rufab ) ;
15451: LD_VAR 0 1
15455: PPUSH
15456: LD_INT 21
15458: PPUSH
15459: CALL_OW 120
// end ;
15463: PPOPN 4
15465: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15466: LD_VAR 0 1
15470: PUSH
15471: LD_INT 21
15473: EQUAL
15474: PUSH
15475: LD_VAR 0 2
15479: PPUSH
15480: CALL_OW 255
15484: PUSH
15485: LD_INT 3
15487: EQUAL
15488: AND
15489: IFFALSE 15503
// SetLives ( human , 1000 ) ;
15491: LD_VAR 0 2
15495: PPUSH
15496: LD_INT 1000
15498: PPUSH
15499: CALL_OW 234
// end ;
15503: PPOPN 2
15505: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL 36749 0 1
// end ; end_of_file
15515: PPOPN 1
15517: END
// every 0 0$30 trigger cratesStatus = 1 do
15518: LD_EXP 38
15522: PUSH
15523: LD_INT 1
15525: EQUAL
15526: IFFALSE 15579
15528: GO 15530
15530: DISABLE
// begin enable ;
15531: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15532: LD_INT 350
15534: PUSH
15535: LD_INT 875
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 1
15544: PPUSH
15545: LD_INT 2
15547: PPUSH
15548: CALL_OW 12
15552: ARRAY
15553: PPUSH
15554: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15558: LD_INT 1
15560: PPUSH
15561: LD_INT 5
15563: PPUSH
15564: CALL_OW 12
15568: PPUSH
15569: LD_INT 7
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL_OW 55
// end ;
15579: END
// every 1 1$0 trigger cratesStatus = 2 do
15580: LD_EXP 38
15584: PUSH
15585: LD_INT 2
15587: EQUAL
15588: IFFALSE 15671
15590: GO 15592
15592: DISABLE
// begin enable ;
15593: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15594: LD_INT 3150
15596: PUSH
15597: LD_INT 4550
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 1
15606: PPUSH
15607: LD_INT 2
15609: PPUSH
15610: CALL_OW 12
15614: ARRAY
15615: PPUSH
15616: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15620: LD_INT 2
15622: PUSH
15623: LD_INT 5
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 1
15632: PPUSH
15633: LD_INT 2
15635: PPUSH
15636: CALL_OW 12
15640: ARRAY
15641: PPUSH
15642: LD_INT 6
15644: PUSH
15645: LD_INT 7
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 1
15654: PPUSH
15655: LD_INT 2
15657: PPUSH
15658: CALL_OW 12
15662: ARRAY
15663: PPUSH
15664: LD_INT 1
15666: PPUSH
15667: CALL_OW 55
// end ;
15671: END
// every 0 0$30 + 0 0$10 do
15672: GO 15674
15674: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15675: LD_INT 4
15677: PUSH
15678: LD_INT 5
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 1
15687: PPUSH
15688: LD_INT 2
15690: PPUSH
15691: CALL_OW 12
15695: ARRAY
15696: PPUSH
15697: LD_INT 7
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: CALL_OW 55
// Wait ( 0 0$15 ) ;
15707: LD_INT 525
15709: PPUSH
15710: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15714: LD_INT 4
15716: PUSH
15717: LD_INT 5
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 1
15726: PPUSH
15727: LD_INT 2
15729: PPUSH
15730: CALL_OW 12
15734: ARRAY
15735: PPUSH
15736: LD_INT 7
15738: PPUSH
15739: LD_INT 1
15741: PPUSH
15742: CALL_OW 55
// Wait ( 0 0$20 ) ;
15746: LD_INT 700
15748: PPUSH
15749: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15753: LD_INT 4
15755: PUSH
15756: LD_INT 5
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 1
15765: PPUSH
15766: LD_INT 2
15768: PPUSH
15769: CALL_OW 12
15773: ARRAY
15774: PPUSH
15775: LD_INT 7
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: CALL_OW 55
// end ; end_of_file
15785: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15786: LD_EXP 24
15790: PUSH
15791: LD_INT 1
15793: EQUAL
15794: IFFALSE 16087
15796: GO 15798
15798: DISABLE
15799: LD_INT 0
15801: PPUSH
15802: PPUSH
15803: PPUSH
// begin enable ;
15804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15805: LD_ADDR_VAR 0 2
15809: PUSH
15810: LD_INT 22
15812: PUSH
15813: LD_INT 1
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 21
15822: PUSH
15823: LD_INT 3
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 2
15832: PUSH
15833: LD_INT 30
15835: PUSH
15836: LD_INT 0
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 30
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 69
15867: ST_TO_ADDR
// for i in tmp do
15868: LD_ADDR_VAR 0 1
15872: PUSH
15873: LD_VAR 0 2
15877: PUSH
15878: FOR_IN
15879: IFFALSE 15912
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15881: LD_ADDR_VAR 0 3
15885: PUSH
15886: LD_VAR 0 3
15890: PUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 274
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 275
15908: PLUS
15909: ST_TO_ADDR
15910: GO 15878
15912: POP
15913: POP
// strings = [ ] ;
15914: LD_ADDR_EXP 27
15918: PUSH
15919: EMPTY
15920: ST_TO_ADDR
// if tmp = 0 then
15921: LD_VAR 0 2
15925: PUSH
15926: LD_INT 0
15928: EQUAL
15929: IFFALSE 15954
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15931: LD_ADDR_EXP 27
15935: PUSH
15936: LD_EXP 27
15940: PUSH
15941: LD_STRING #Am06-1
15943: PUSH
15944: LD_EXP 25
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: ADD
15953: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15954: LD_VAR 0 2
15958: PUSH
15959: LD_EXP 25
15963: PUSH
15964: LD_VAR 0 3
15968: GREATER
15969: AND
15970: IFFALSE 16001
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15972: LD_ADDR_EXP 27
15976: PUSH
15977: LD_EXP 27
15981: PUSH
15982: LD_STRING #Am06-1
15984: PUSH
15985: LD_EXP 25
15989: PUSH
15990: LD_VAR 0 3
15994: MINUS
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: ADD
16000: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16001: LD_VAR 0 2
16005: PUSH
16006: LD_EXP 25
16010: PUSH
16011: LD_VAR 0 3
16015: LESSEQUAL
16016: AND
16017: IFFALSE 16040
// strings = strings ^ [ #Am06-1 , 0 ] ;
16019: LD_ADDR_EXP 27
16023: PUSH
16024: LD_EXP 27
16028: PUSH
16029: LD_STRING #Am06-1
16031: PUSH
16032: LD_INT 0
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: ADD
16039: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16040: LD_ADDR_EXP 26
16044: PUSH
16045: LD_EXP 26
16049: PUSH
16050: LD_INT 35
16052: MINUS
16053: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16054: LD_ADDR_EXP 27
16058: PUSH
16059: LD_EXP 27
16063: PUSH
16064: LD_STRING #Am06-2
16066: PUSH
16067: LD_EXP 26
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: ADD
16076: ST_TO_ADDR
// display_strings = strings ;
16077: LD_ADDR_OWVAR 47
16081: PUSH
16082: LD_EXP 27
16086: ST_TO_ADDR
// end ; end_of_file
16087: PPOPN 3
16089: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
16098: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16099: LD_ADDR_VAR 0 3
16103: PUSH
16104: LD_INT 22
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 2
16116: PUSH
16117: LD_INT 30
16119: PUSH
16120: LD_INT 0
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 30
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PPUSH
16146: CALL_OW 69
16150: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16151: LD_INT 35
16153: PPUSH
16154: CALL_OW 67
// until depot ;
16158: LD_VAR 0 3
16162: IFFALSE 16099
// repeat wait ( 0 0$1 ) ;
16164: LD_INT 35
16166: PPUSH
16167: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16171: LD_ADDR_VAR 0 4
16175: PUSH
16176: LD_INT 22
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 91
16188: PUSH
16189: LD_VAR 0 3
16193: PUSH
16194: LD_INT 1
16196: ARRAY
16197: PUSH
16198: LD_INT 15
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 21
16208: PUSH
16209: LD_INT 1
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 25
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 25
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 25
16241: PUSH
16242: LD_INT 3
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 25
16251: PUSH
16252: LD_INT 4
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 3
16268: PUSH
16269: LD_INT 54
16271: PUSH
16272: EMPTY
16273: LIST
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 3
16281: PUSH
16282: LD_INT 55
16284: PUSH
16285: EMPTY
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: PPUSH
16300: CALL_OW 69
16304: PUSH
16305: LD_EXP 2
16309: PUSH
16310: LD_EXP 3
16314: PUSH
16315: LD_EXP 4
16319: PUSH
16320: LD_EXP 5
16324: PUSH
16325: LD_EXP 7
16329: PUSH
16330: LD_EXP 8
16334: PUSH
16335: LD_EXP 9
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: PUSH
16349: LD_EXP 44
16353: ADD
16354: DIFF
16355: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16356: LD_VAR 0 4
16360: PUSH
16361: LD_INT 1
16363: PPUSH
16364: CALL_OW 463
16368: NOT
16369: AND
16370: IFFALSE 16164
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16372: LD_ADDR_VAR 0 4
16376: PUSH
16377: LD_VAR 0 4
16381: PUSH
16382: LD_INT 1
16384: PPUSH
16385: LD_VAR 0 4
16389: PPUSH
16390: CALL_OW 12
16394: ARRAY
16395: ST_TO_ADDR
// blockSpawn := 1 ;
16396: LD_ADDR_EXP 29
16400: PUSH
16401: LD_INT 1
16403: ST_TO_ADDR
// uc_side := 2 ;
16404: LD_ADDR_OWVAR 20
16408: PUSH
16409: LD_INT 2
16411: ST_TO_ADDR
// uc_nation := 2 ;
16412: LD_ADDR_OWVAR 21
16416: PUSH
16417: LD_INT 2
16419: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16420: LD_ADDR_EXP 19
16424: PUSH
16425: LD_STRING Kurt
16427: PPUSH
16428: LD_INT 0
16430: PPUSH
16431: LD_STRING 
16433: PPUSH
16434: CALL 40934 0 3
16438: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16439: LD_EXP 19
16443: PPUSH
16444: LD_VAR 0 4
16448: PPUSH
16449: CALL_OW 250
16453: PPUSH
16454: LD_VAR 0 4
16458: PPUSH
16459: CALL_OW 251
16463: PPUSH
16464: LD_INT 5
16466: PPUSH
16467: LD_INT 1
16469: PPUSH
16470: CALL_OW 50
// InGameOn ;
16474: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16478: LD_EXP 19
16482: PPUSH
16483: CALL_OW 87
// wait ( 0 0$2 ) ;
16487: LD_INT 70
16489: PPUSH
16490: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16494: LD_EXP 19
16498: PPUSH
16499: LD_VAR 0 4
16503: PPUSH
16504: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16508: LD_VAR 0 4
16512: PPUSH
16513: LD_EXP 19
16517: PPUSH
16518: CALL_OW 112
// wait ( 0 0$1 ) ;
16522: LD_INT 35
16524: PPUSH
16525: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16529: LD_VAR 0 4
16533: PPUSH
16534: LD_EXP 19
16538: PPUSH
16539: CALL_OW 119
// DialogueOn ;
16543: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16547: LD_EXP 19
16551: PPUSH
16552: LD_STRING D2-Kurt-1
16554: PPUSH
16555: CALL_OW 88
// if tmp = JMM then
16559: LD_VAR 0 4
16563: PUSH
16564: LD_EXP 1
16568: EQUAL
16569: IFFALSE 16661
// begin Say ( JMM , D2-JMM-1 ) ;
16571: LD_EXP 1
16575: PPUSH
16576: LD_STRING D2-JMM-1
16578: PPUSH
16579: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16583: LD_EXP 19
16587: PPUSH
16588: LD_STRING D2-Kurt-2
16590: PPUSH
16591: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16595: LD_EXP 1
16599: PPUSH
16600: LD_STRING D2-JMM-2
16602: PPUSH
16603: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16607: LD_EXP 19
16611: PPUSH
16612: LD_STRING D2-Kurt-3
16614: PPUSH
16615: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16619: LD_EXP 1
16623: PPUSH
16624: LD_STRING D2-JMM-3
16626: PPUSH
16627: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16631: LD_EXP 19
16635: PPUSH
16636: LD_STRING D2-Kurt-4
16638: PPUSH
16639: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16643: LD_EXP 1
16647: PPUSH
16648: LD_STRING D2-JMM-4
16650: PPUSH
16651: CALL_OW 88
// DialogueOff ;
16655: CALL_OW 7
// end else
16659: GO 16889
// begin if GetSex ( tmp ) = 1 then
16661: LD_VAR 0 4
16665: PPUSH
16666: CALL_OW 258
16670: PUSH
16671: LD_INT 1
16673: EQUAL
16674: IFFALSE 16690
// Say ( tmp , D2-Sol1-1 ) else
16676: LD_VAR 0 4
16680: PPUSH
16681: LD_STRING D2-Sol1-1
16683: PPUSH
16684: CALL_OW 88
16688: GO 16702
// Say ( tmp , D2-FSol1-1 ) ;
16690: LD_VAR 0 4
16694: PPUSH
16695: LD_STRING D2-FSol1-1
16697: PPUSH
16698: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16702: LD_EXP 19
16706: PPUSH
16707: LD_STRING D2-Kurt-2
16709: PPUSH
16710: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16714: LD_VAR 0 4
16718: PPUSH
16719: CALL_OW 258
16723: PUSH
16724: LD_INT 1
16726: EQUAL
16727: IFFALSE 16743
// Say ( tmp , D2-Sol1-2 ) else
16729: LD_VAR 0 4
16733: PPUSH
16734: LD_STRING D2-Sol1-2
16736: PPUSH
16737: CALL_OW 88
16741: GO 16755
// Say ( tmp , D2-FSol1-2 ) ;
16743: LD_VAR 0 4
16747: PPUSH
16748: LD_STRING D2-FSol1-2
16750: PPUSH
16751: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16755: LD_EXP 19
16759: PPUSH
16760: LD_STRING D2-Kurt-3
16762: PPUSH
16763: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16767: LD_VAR 0 4
16771: PPUSH
16772: CALL_OW 258
16776: PUSH
16777: LD_INT 1
16779: EQUAL
16780: IFFALSE 16796
// Say ( tmp , D2-Sol1-3 ) else
16782: LD_VAR 0 4
16786: PPUSH
16787: LD_STRING D2-Sol1-3
16789: PPUSH
16790: CALL_OW 88
16794: GO 16808
// Say ( tmp , D2-FSol1-3 ) ;
16796: LD_VAR 0 4
16800: PPUSH
16801: LD_STRING D2-FSol1-3
16803: PPUSH
16804: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16808: LD_EXP 19
16812: PPUSH
16813: LD_STRING D2-Kurt-4
16815: PPUSH
16816: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16820: LD_VAR 0 4
16824: PPUSH
16825: CALL_OW 258
16829: PUSH
16830: LD_INT 1
16832: EQUAL
16833: IFFALSE 16861
// begin Say ( tmp , D2-Sol1-4 ) ;
16835: LD_VAR 0 4
16839: PPUSH
16840: LD_STRING D2-Sol1-4
16842: PPUSH
16843: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16847: LD_VAR 0 4
16851: PPUSH
16852: LD_STRING D2-Sol1-5
16854: PPUSH
16855: CALL_OW 88
// end else
16859: GO 16885
// begin Say ( tmp , D2-FSol1-4 ) ;
16861: LD_VAR 0 4
16865: PPUSH
16866: LD_STRING D2-FSol1-4
16868: PPUSH
16869: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16873: LD_VAR 0 4
16877: PPUSH
16878: LD_STRING D2-FSol1-5
16880: PPUSH
16881: CALL_OW 88
// end ; DialogueOff ;
16885: CALL_OW 7
// end ; dec := ShowQuery1 ;
16889: LD_ADDR_VAR 0 6
16893: PUSH
16894: CALL 7256 0 0
16898: ST_TO_ADDR
// if dec = 1 then
16899: LD_VAR 0 6
16903: PUSH
16904: LD_INT 1
16906: EQUAL
16907: IFFALSE 16969
// begin DialogueOn ;
16909: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16913: LD_EXP 19
16917: PPUSH
16918: LD_STRING D2a-Kurt-1
16920: PPUSH
16921: CALL_OW 88
// DialogueOff ;
16925: CALL_OW 7
// InGameOff ;
16929: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16933: LD_INT 1
16935: PPUSH
16936: LD_INT 2
16938: PPUSH
16939: LD_INT 2
16941: PPUSH
16942: LD_INT 1
16944: PPUSH
16945: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16949: LD_EXP 19
16953: PPUSH
16954: LD_INT 8
16956: PPUSH
16957: CALL_OW 113
// readyToEscape := 1 ;
16961: LD_ADDR_EXP 21
16965: PUSH
16966: LD_INT 1
16968: ST_TO_ADDR
// end ; if dec = 2 then
16969: LD_VAR 0 6
16973: PUSH
16974: LD_INT 2
16976: EQUAL
16977: IFFALSE 17445
// begin DialogueOn ;
16979: CALL_OW 6
// if tmp = JMM then
16983: LD_VAR 0 4
16987: PUSH
16988: LD_EXP 1
16992: EQUAL
16993: IFFALSE 17049
// begin Say ( JMM , D2b-JMM-1 ) ;
16995: LD_EXP 1
16999: PPUSH
17000: LD_STRING D2b-JMM-1
17002: PPUSH
17003: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17007: LD_EXP 19
17011: PPUSH
17012: LD_STRING D2b-Kurt-1
17014: PPUSH
17015: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17019: LD_EXP 1
17023: PPUSH
17024: LD_STRING D2b-JMM-2
17026: PPUSH
17027: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17031: LD_EXP 19
17035: PPUSH
17036: LD_STRING D2b-Kurt-2
17038: PPUSH
17039: CALL_OW 88
// DialogueOff ;
17043: CALL_OW 7
// end else
17047: GO 17200
// begin if GetSex ( tmp ) = 1 then
17049: LD_VAR 0 4
17053: PPUSH
17054: CALL_OW 258
17058: PUSH
17059: LD_INT 1
17061: EQUAL
17062: IFFALSE 17078
// Say ( tmp , D2b-Sol1-1 ) else
17064: LD_VAR 0 4
17068: PPUSH
17069: LD_STRING D2b-Sol1-1
17071: PPUSH
17072: CALL_OW 88
17076: GO 17090
// Say ( tmp , D2b-FSol1-1 ) ;
17078: LD_VAR 0 4
17082: PPUSH
17083: LD_STRING D2b-FSol1-1
17085: PPUSH
17086: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17090: LD_EXP 19
17094: PPUSH
17095: LD_STRING D2b-Kurt-1
17097: PPUSH
17098: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17102: LD_VAR 0 4
17106: PPUSH
17107: CALL_OW 258
17111: PUSH
17112: LD_INT 1
17114: EQUAL
17115: IFFALSE 17131
// Say ( tmp , D2b-Sol1-2 ) else
17117: LD_VAR 0 4
17121: PPUSH
17122: LD_STRING D2b-Sol1-2
17124: PPUSH
17125: CALL_OW 88
17129: GO 17143
// Say ( tmp , D2b-FSol1-2 ) ;
17131: LD_VAR 0 4
17135: PPUSH
17136: LD_STRING D2b-FSol1-2
17138: PPUSH
17139: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17143: LD_EXP 19
17147: PPUSH
17148: LD_STRING D2b-Kurt-2
17150: PPUSH
17151: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17155: LD_VAR 0 4
17159: PPUSH
17160: CALL_OW 258
17164: PUSH
17165: LD_INT 1
17167: EQUAL
17168: IFFALSE 17184
// Say ( tmp , D2c-Sol1-2 ) else
17170: LD_VAR 0 4
17174: PPUSH
17175: LD_STRING D2c-Sol1-2
17177: PPUSH
17178: CALL_OW 88
17182: GO 17196
// Say ( tmp , D2c-FSol1-2 ) ;
17184: LD_VAR 0 4
17188: PPUSH
17189: LD_STRING D2c-FSol1-2
17191: PPUSH
17192: CALL_OW 88
// DialogueOff ;
17196: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17200: LD_ADDR_VAR 0 7
17204: PUSH
17205: CALL 7277 0 0
17209: ST_TO_ADDR
// if dec2 = 1 then
17210: LD_VAR 0 7
17214: PUSH
17215: LD_INT 1
17217: EQUAL
17218: IFFALSE 17280
// begin DialogueOn ;
17220: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17224: LD_EXP 19
17228: PPUSH
17229: LD_STRING D2a-Kurt-1
17231: PPUSH
17232: CALL_OW 88
// DialogueOff ;
17236: CALL_OW 7
// InGameOff ;
17240: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17244: LD_INT 1
17246: PPUSH
17247: LD_INT 2
17249: PPUSH
17250: LD_INT 2
17252: PPUSH
17253: LD_INT 1
17255: PPUSH
17256: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17260: LD_EXP 19
17264: PPUSH
17265: LD_INT 8
17267: PPUSH
17268: CALL_OW 113
// readyToEscape := 1 ;
17272: LD_ADDR_EXP 21
17276: PUSH
17277: LD_INT 1
17279: ST_TO_ADDR
// end ; if dec2 = 2 then
17280: LD_VAR 0 7
17284: PUSH
17285: LD_INT 2
17287: EQUAL
17288: IFFALSE 17445
// begin if tmp = JMM then
17290: LD_VAR 0 4
17294: PUSH
17295: LD_EXP 1
17299: EQUAL
17300: IFFALSE 17360
// begin DialogueOn ;
17302: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17306: LD_EXP 1
17310: PPUSH
17311: LD_STRING D2c-JMM-1
17313: PPUSH
17314: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17318: LD_EXP 19
17322: PPUSH
17323: LD_STRING D2c-Kurt-1
17325: PPUSH
17326: CALL_OW 88
// DialogueOff ;
17330: CALL_OW 7
// InGameOff ;
17334: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17338: LD_EXP 19
17342: PPUSH
17343: LD_INT 8
17345: PPUSH
17346: CALL_OW 113
// readyToEscape := 1 ;
17350: LD_ADDR_EXP 21
17354: PUSH
17355: LD_INT 1
17357: ST_TO_ADDR
// end else
17358: GO 17445
// begin DialogueOn ;
17360: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17364: LD_VAR 0 4
17368: PPUSH
17369: CALL_OW 258
17373: PUSH
17374: LD_INT 1
17376: EQUAL
17377: IFFALSE 17393
// Say ( tmp , D2c-Sol1-1 ) else
17379: LD_VAR 0 4
17383: PPUSH
17384: LD_STRING D2c-Sol1-1
17386: PPUSH
17387: CALL_OW 88
17391: GO 17405
// Say ( tmp , D2c-FSol1-1 ) ;
17393: LD_VAR 0 4
17397: PPUSH
17398: LD_STRING D2c-FSol1-1
17400: PPUSH
17401: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17405: LD_EXP 19
17409: PPUSH
17410: LD_STRING D2c-Kurt-1
17412: PPUSH
17413: CALL_OW 88
// DialogueOff ;
17417: CALL_OW 7
// InGameOff ;
17421: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17425: LD_EXP 19
17429: PPUSH
17430: LD_INT 8
17432: PPUSH
17433: CALL_OW 113
// readyToEscape := 1 ;
17437: LD_ADDR_EXP 21
17441: PUSH
17442: LD_INT 1
17444: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17445: LD_VAR 0 6
17449: PUSH
17450: LD_INT 3
17452: EQUAL
17453: IFFALSE 17614
// begin DialogueOn ;
17455: CALL_OW 6
// if tmp = JMM then
17459: LD_VAR 0 4
17463: PUSH
17464: LD_EXP 1
17468: EQUAL
17469: IFFALSE 17529
// begin DialogueOn ;
17471: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17475: LD_EXP 1
17479: PPUSH
17480: LD_STRING D2c-JMM-1
17482: PPUSH
17483: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17487: LD_EXP 19
17491: PPUSH
17492: LD_STRING D2c-Kurt-1
17494: PPUSH
17495: CALL_OW 88
// DialogueOff ;
17499: CALL_OW 7
// InGameOff ;
17503: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17507: LD_EXP 19
17511: PPUSH
17512: LD_INT 8
17514: PPUSH
17515: CALL_OW 113
// readyToEscape := 1 ;
17519: LD_ADDR_EXP 21
17523: PUSH
17524: LD_INT 1
17526: ST_TO_ADDR
// end else
17527: GO 17614
// begin DialogueOn ;
17529: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17533: LD_VAR 0 4
17537: PPUSH
17538: CALL_OW 258
17542: PUSH
17543: LD_INT 1
17545: EQUAL
17546: IFFALSE 17562
// Say ( tmp , D2c-Sol1-1 ) else
17548: LD_VAR 0 4
17552: PPUSH
17553: LD_STRING D2c-Sol1-1
17555: PPUSH
17556: CALL_OW 88
17560: GO 17574
// Say ( tmp , D2c-FSol1-1 ) ;
17562: LD_VAR 0 4
17566: PPUSH
17567: LD_STRING D2c-FSol1-1
17569: PPUSH
17570: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17574: LD_EXP 19
17578: PPUSH
17579: LD_STRING D2c-Kurt-1
17581: PPUSH
17582: CALL_OW 88
// DialogueOff ;
17586: CALL_OW 7
// InGameOff ;
17590: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17594: LD_EXP 19
17598: PPUSH
17599: LD_INT 8
17601: PPUSH
17602: CALL_OW 113
// readyToEscape := 1 ;
17606: LD_ADDR_EXP 21
17610: PUSH
17611: LD_INT 1
17613: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17614: LD_ADDR_EXP 29
17618: PUSH
17619: LD_INT 0
17621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17622: LD_INT 35
17624: PPUSH
17625: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17629: LD_EXP 19
17633: PPUSH
17634: LD_INT 8
17636: PPUSH
17637: CALL_OW 308
17641: PUSH
17642: LD_EXP 21
17646: AND
17647: PUSH
17648: LD_EXP 19
17652: PPUSH
17653: CALL_OW 301
17657: OR
17658: IFFALSE 17622
// if IsDead ( Kurt ) then
17660: LD_EXP 19
17664: PPUSH
17665: CALL_OW 301
17669: IFFALSE 17673
// exit ;
17671: GO 17728
// RemoveUnit ( Kurt ) ;
17673: LD_EXP 19
17677: PPUSH
17678: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17682: LD_EXP 19
17686: PPUSH
17687: LD_STRING Kurt
17689: PPUSH
17690: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17694: LD_INT 1
17696: PPUSH
17697: LD_INT 2
17699: PPUSH
17700: CALL_OW 81
17704: PUSH
17705: LD_INT 0
17707: EQUAL
17708: IFFALSE 17720
// kurtStatus = 1 else
17710: LD_ADDR_EXP 20
17714: PUSH
17715: LD_INT 1
17717: ST_TO_ADDR
17718: GO 17728
// kurtStatus = 2 ;
17720: LD_ADDR_EXP 20
17724: PUSH
17725: LD_INT 2
17727: ST_TO_ADDR
// end ; end_of_file
17728: LD_VAR 0 1
17732: RET
// every 0 0$2 do
17733: GO 17735
17735: DISABLE
// begin enable ;
17736: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17737: LD_INT 3
17739: PPUSH
17740: LD_INT 2
17742: PPUSH
17743: LD_INT 10
17745: PPUSH
17746: LD_EXP 31
17750: PPUSH
17751: CALL 7708 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17755: LD_INT 3
17757: PPUSH
17758: LD_INT 12
17760: PPUSH
17761: LD_EXP 31
17765: PPUSH
17766: CALL 9311 0 3
// if disableHealAI = 0 then
17770: LD_EXP 33
17774: PUSH
17775: LD_INT 0
17777: EQUAL
17778: IFFALSE 17799
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17780: LD_INT 3
17782: PPUSH
17783: LD_INT 9
17785: PPUSH
17786: LD_INT 10
17788: PPUSH
17789: LD_INT 32
17791: PUSH
17792: EMPTY
17793: LIST
17794: PPUSH
17795: CALL 8075 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17799: LD_INT 3
17801: PPUSH
17802: LD_INT 51
17804: PPUSH
17805: LD_INT 6
17807: PPUSH
17808: CALL 8764 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17812: LD_INT 2
17814: PPUSH
17815: CALL_OW 303
17819: PUSH
17820: LD_INT 2
17822: PPUSH
17823: CALL_OW 255
17827: PUSH
17828: LD_INT 1
17830: EQUAL
17831: OR
17832: IFFALSE 17846
// DefendDepot ( 3 , rudepo ) else
17834: LD_INT 3
17836: PPUSH
17837: LD_INT 2
17839: PPUSH
17840: CALL 8591 0 2
17844: GO 17856
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17846: LD_INT 3
17848: PPUSH
17849: LD_INT 10
17851: PPUSH
17852: CALL 8882 0 2
// end ;
17856: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17857: LD_INT 22
17859: PUSH
17860: LD_INT 3
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 21
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 55
17879: PUSH
17880: EMPTY
17881: LIST
17882: PUSH
17883: LD_INT 3
17885: PUSH
17886: LD_INT 34
17888: PUSH
17889: LD_INT 51
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: PUSH
17911: LD_INT 0
17913: EQUAL
17914: PUSH
17915: LD_INT 21
17917: PPUSH
17918: CALL_OW 255
17922: PUSH
17923: LD_INT 3
17925: EQUAL
17926: AND
17927: PUSH
17928: LD_INT 21
17930: PPUSH
17931: CALL_OW 302
17935: AND
17936: PUSH
17937: LD_INT 2
17939: PPUSH
17940: CALL_OW 255
17944: PUSH
17945: LD_INT 3
17947: EQUAL
17948: AND
17949: PUSH
17950: LD_INT 2
17952: PPUSH
17953: CALL_OW 302
17957: AND
17958: PUSH
17959: LD_INT 21
17961: PPUSH
17962: CALL_OW 313
17966: AND
17967: PUSH
17968: LD_EXP 47
17972: PUSH
17973: LD_INT 4
17975: PUSH
17976: LD_INT 5
17978: PUSH
17979: LD_INT 6
17981: PUSH
17982: LD_INT 6
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: PUSH
17991: LD_OWVAR 67
17995: ARRAY
17996: LESS
17997: AND
17998: IFFALSE 18219
18000: GO 18002
18002: DISABLE
// begin enable ;
18003: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18004: LD_INT 2
18006: PPUSH
18007: CALL_OW 274
18011: PPUSH
18012: LD_INT 1
18014: PPUSH
18015: LD_INT 2000
18017: PPUSH
18018: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18022: LD_INT 3
18024: PPUSH
18025: LD_INT 21
18027: PPUSH
18028: LD_INT 4
18030: PUSH
18031: LD_INT 5
18033: PUSH
18034: LD_INT 6
18036: PUSH
18037: LD_INT 6
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: PUSH
18046: LD_OWVAR 67
18050: ARRAY
18051: PUSH
18052: LD_EXP 47
18056: MINUS
18057: PPUSH
18058: LD_INT 43
18060: PUSH
18061: LD_INT 43
18063: PUSH
18064: LD_INT 44
18066: PUSH
18067: LD_INT 44
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 43
18078: PUSH
18079: LD_INT 43
18081: PUSH
18082: LD_INT 43
18084: PUSH
18085: LD_INT 44
18087: PUSH
18088: LD_INT 44
18090: PUSH
18091: LD_INT 46
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 43
18104: PUSH
18105: LD_INT 43
18107: PUSH
18108: LD_INT 43
18110: PUSH
18111: LD_INT 44
18113: PUSH
18114: LD_INT 44
18116: PUSH
18117: LD_INT 46
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 43
18130: PUSH
18131: LD_INT 43
18133: PUSH
18134: LD_INT 44
18136: PUSH
18137: LD_INT 46
18139: PUSH
18140: LD_INT 46
18142: PUSH
18143: LD_INT 46
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: PUSH
18160: LD_OWVAR 67
18164: ARRAY
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: LD_INT 22
18174: PUSH
18175: LD_INT 22
18177: PUSH
18178: LD_INT 24
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: PPUSH
18188: LD_INT 2
18190: PPUSH
18191: CALL_OW 12
18195: ARRAY
18196: PUSH
18197: LD_INT 24
18199: PUSH
18200: LD_INT 24
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: PUSH
18209: LD_OWVAR 67
18213: ARRAY
18214: PPUSH
18215: CALL 7554 0 7
// end ;
18219: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18220: LD_INT 17
18222: PPUSH
18223: CALL_OW 255
18227: PUSH
18228: LD_INT 3
18230: EQUAL
18231: PUSH
18232: LD_INT 17
18234: PPUSH
18235: CALL_OW 302
18239: AND
18240: PUSH
18241: LD_INT 2
18243: PPUSH
18244: CALL_OW 255
18248: PUSH
18249: LD_INT 3
18251: EQUAL
18252: AND
18253: PUSH
18254: LD_INT 2
18256: PPUSH
18257: CALL_OW 302
18261: AND
18262: PUSH
18263: LD_EXP 47
18267: PUSH
18268: LD_INT 4
18270: PUSH
18271: LD_INT 5
18273: PUSH
18274: LD_INT 6
18276: PUSH
18277: LD_INT 7
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: PUSH
18286: LD_OWVAR 67
18290: ARRAY
18291: LESS
18292: AND
18293: IFFALSE 18341
18295: GO 18297
18297: DISABLE
// begin enable ;
18298: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18299: LD_INT 17
18301: PPUSH
18302: LD_INT 22
18304: PPUSH
18305: LD_INT 1
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: LD_INT 42
18313: PUSH
18314: LD_INT 43
18316: PUSH
18317: LD_INT 44
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 1
18327: PPUSH
18328: LD_INT 3
18330: PPUSH
18331: CALL_OW 12
18335: ARRAY
18336: PPUSH
18337: CALL_OW 185
// end ;
18341: END
// every 2 2$0 do var i , j ;
18342: GO 18344
18344: DISABLE
18345: LD_INT 0
18347: PPUSH
18348: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18349: LD_INT 14700
18351: PUSH
18352: LD_INT 33600
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 1
18361: PPUSH
18362: LD_INT 2
18364: PPUSH
18365: CALL_OW 12
18369: ARRAY
18370: PPUSH
18371: CALL_OW 67
// disableHealAI = 1 ;
18375: LD_ADDR_EXP 33
18379: PUSH
18380: LD_INT 1
18382: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18383: LD_ADDR_VAR 0 1
18387: PUSH
18388: LD_INT 22
18390: PUSH
18391: LD_INT 3
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 25
18400: PUSH
18401: LD_INT 4
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PPUSH
18412: CALL_OW 69
18416: PUSH
18417: FOR_IN
18418: IFFALSE 18431
// ComExitBuilding ( i ) ;
18420: LD_VAR 0 1
18424: PPUSH
18425: CALL_OW 122
18429: GO 18417
18431: POP
18432: POP
// wait ( 0 0$1 ) ;
18433: LD_INT 35
18435: PPUSH
18436: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18440: LD_INT 35
18442: PPUSH
18443: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18447: LD_ADDR_VAR 0 1
18451: PUSH
18452: LD_INT 22
18454: PUSH
18455: LD_INT 3
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 25
18464: PUSH
18465: LD_INT 4
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PPUSH
18476: CALL_OW 69
18480: PUSH
18481: FOR_IN
18482: IFFALSE 18559
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18484: LD_ADDR_VAR 0 2
18488: PUSH
18489: LD_INT 17
18491: PPUSH
18492: LD_INT 22
18494: PUSH
18495: LD_INT 0
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 25
18504: PUSH
18505: LD_INT 12
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 70
18520: PUSH
18521: FOR_IN
18522: IFFALSE 18555
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18524: LD_VAR 0 1
18528: PPUSH
18529: LD_VAR 0 2
18533: PPUSH
18534: CALL_OW 250
18538: PPUSH
18539: LD_VAR 0 2
18543: PPUSH
18544: CALL_OW 251
18548: PPUSH
18549: CALL_OW 191
18553: GO 18521
18555: POP
18556: POP
18557: GO 18481
18559: POP
18560: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18561: LD_INT 22
18563: PUSH
18564: LD_INT 3
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 25
18573: PUSH
18574: LD_INT 4
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PPUSH
18585: CALL_OW 69
18589: PUSH
18590: LD_INT 0
18592: EQUAL
18593: PUSH
18594: LD_EXP 32
18598: PUSH
18599: LD_INT 6
18601: PUSH
18602: LD_INT 7
18604: PUSH
18605: LD_INT 8
18607: PUSH
18608: LD_INT 8
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: PUSH
18617: LD_OWVAR 67
18621: ARRAY
18622: GREATEREQUAL
18623: OR
18624: PUSH
18625: LD_INT 17
18627: PPUSH
18628: LD_INT 22
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 12
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PPUSH
18652: CALL_OW 70
18656: PUSH
18657: LD_INT 0
18659: EQUAL
18660: OR
18661: IFFALSE 18440
// disableHealAI = 0 ;
18663: LD_ADDR_EXP 33
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18671: LD_ADDR_VAR 0 1
18675: PUSH
18676: LD_INT 22
18678: PUSH
18679: LD_INT 3
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 25
18688: PUSH
18689: LD_INT 12
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PPUSH
18700: CALL_OW 69
18704: PUSH
18705: FOR_IN
18706: IFFALSE 18722
// SetClass ( i , 16 ) ;
18708: LD_VAR 0 1
18712: PPUSH
18713: LD_INT 16
18715: PPUSH
18716: CALL_OW 336
18720: GO 18705
18722: POP
18723: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18724: LD_ADDR_VAR 0 1
18728: PUSH
18729: LD_INT 22
18731: PUSH
18732: LD_INT 3
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 25
18741: PUSH
18742: LD_INT 4
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PPUSH
18753: CALL_OW 69
18757: PUSH
18758: FOR_IN
18759: IFFALSE 18775
// ComEnterUnit ( i , rulab ) ;
18761: LD_VAR 0 1
18765: PPUSH
18766: LD_INT 32
18768: PPUSH
18769: CALL_OW 120
18773: GO 18758
18775: POP
18776: POP
// end ; end_of_file
18777: PPOPN 2
18779: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18780: LD_EXP 26
18784: PUSH
18785: LD_INT 0
18787: LESSEQUAL
18788: IFFALSE 18942
18790: GO 18792
18792: DISABLE
18793: LD_INT 0
18795: PPUSH
18796: PPUSH
18797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18798: LD_ADDR_VAR 0 2
18802: PUSH
18803: LD_INT 22
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 21
18815: PUSH
18816: LD_INT 3
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 30
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 30
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: ST_TO_ADDR
// for i in tmp do
18861: LD_ADDR_VAR 0 1
18865: PUSH
18866: LD_VAR 0 2
18870: PUSH
18871: FOR_IN
18872: IFFALSE 18905
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18874: LD_ADDR_VAR 0 3
18878: PUSH
18879: LD_VAR 0 3
18883: PUSH
18884: LD_VAR 0 1
18888: PPUSH
18889: CALL_OW 274
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: CALL_OW 275
18901: PLUS
18902: ST_TO_ADDR
18903: GO 18871
18905: POP
18906: POP
// if yourCrates >= needCrates then
18907: LD_VAR 0 3
18911: PUSH
18912: LD_EXP 25
18916: GREATEREQUAL
18917: IFFALSE 18935
// FinishMission ( yourCrates , needCrates ) else
18919: LD_VAR 0 3
18923: PPUSH
18924: LD_EXP 25
18928: PPUSH
18929: CALL 18945 0 2
18933: GO 18942
// YouLost ( matmin ) ;
18935: LD_STRING matmin
18937: PPUSH
18938: CALL_OW 104
// end ;
18942: PPOPN 3
18944: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18945: LD_INT 0
18947: PPUSH
18948: PPUSH
18949: PPUSH
18950: PPUSH
// if killCounter = 0 then
18951: LD_EXP 45
18955: PUSH
18956: LD_INT 0
18958: EQUAL
18959: IFFALSE 18968
// SetAchievement ( ACH_SURV ) ;
18961: LD_STRING ACH_SURV
18963: PPUSH
18964: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18968: LD_INT 22
18970: PUSH
18971: LD_INT 3
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 21
18980: PUSH
18981: LD_INT 3
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PPUSH
18992: CALL_OW 69
18996: PUSH
18997: LD_INT 0
18999: EQUAL
19000: IFFALSE 19016
// begin wait ( 3 ) ;
19002: LD_INT 3
19004: PPUSH
19005: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19009: LD_STRING ACH_BASEDESTROYER
19011: PPUSH
19012: CALL_OW 543
// end ; m1 := false ;
19016: LD_ADDR_VAR 0 4
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// m2 := false ;
19024: LD_ADDR_VAR 0 5
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// m3 := false ;
19032: LD_ADDR_VAR 0 6
19036: PUSH
19037: LD_INT 0
19039: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19040: LD_VAR 0 1
19044: PUSH
19045: LD_INT 100
19047: PUSH
19048: LD_INT 140
19050: PUSH
19051: LD_INT 180
19053: PUSH
19054: LD_INT 220
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: PUSH
19063: LD_OWVAR 67
19067: ARRAY
19068: PLUS
19069: PUSH
19070: LD_VAR 0 2
19074: GREATER
19075: IFFALSE 19107
// begin AddMedal ( cans , 1 ) ;
19077: LD_STRING cans
19079: PPUSH
19080: LD_INT 1
19082: PPUSH
19083: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19087: LD_INT 1
19089: PPUSH
19090: LD_STRING 06_crates_1
19092: PPUSH
19093: CALL_OW 39
// m1 := true ;
19097: LD_ADDR_VAR 0 4
19101: PUSH
19102: LD_INT 1
19104: ST_TO_ADDR
// end else
19105: GO 19128
// begin AddMedal ( cans , - 1 ) ;
19107: LD_STRING cans
19109: PPUSH
19110: LD_INT 1
19112: NEG
19113: PPUSH
19114: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19118: LD_INT 0
19120: PPUSH
19121: LD_STRING 06_crates_1
19123: PPUSH
19124: CALL_OW 39
// end ; if unitLost < 3 then
19128: LD_EXP 30
19132: PUSH
19133: LD_INT 3
19135: LESS
19136: IFFALSE 19158
// begin AddMedal ( people , 1 ) ;
19138: LD_STRING people
19140: PPUSH
19141: LD_INT 1
19143: PPUSH
19144: CALL_OW 101
// m2 := true ;
19148: LD_ADDR_VAR 0 5
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// end else
19156: GO 19169
// AddMedal ( people , - 1 ) ;
19158: LD_STRING people
19160: PPUSH
19161: LD_INT 1
19163: NEG
19164: PPUSH
19165: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19169: LD_EXP 28
19173: PPUSH
19174: LD_STRING 06_remoteVehs_1
19176: PPUSH
19177: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19181: LD_EXP 28
19185: PUSH
19186: LD_INT 1
19188: EQUAL
19189: IFFALSE 19211
// begin AddMedal ( remote , 1 ) ;
19191: LD_STRING remote
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 101
// m3 := true ;
19201: LD_ADDR_VAR 0 6
19205: PUSH
19206: LD_INT 1
19208: ST_TO_ADDR
// end else
19209: GO 19251
// begin if GetTech ( 18 , 1 ) = state_enabled then
19211: LD_INT 18
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 321
19221: PUSH
19222: LD_INT 1
19224: EQUAL
19225: IFFALSE 19240
// AddMedal ( remote , - 1 ) else
19227: LD_STRING remote
19229: PPUSH
19230: LD_INT 1
19232: NEG
19233: PPUSH
19234: CALL_OW 101
19238: GO 19251
// AddMedal ( remote , - 2 ) ;
19240: LD_STRING remote
19242: PPUSH
19243: LD_INT 2
19245: NEG
19246: PPUSH
19247: CALL_OW 101
// end ; if m1 and m2 and m3 then
19251: LD_VAR 0 4
19255: PUSH
19256: LD_VAR 0 5
19260: AND
19261: PUSH
19262: LD_VAR 0 6
19266: AND
19267: IFFALSE 19283
// begin wait ( 3 ) ;
19269: LD_INT 3
19271: PPUSH
19272: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19276: LD_STRING ACH_ASPEED_6
19278: PPUSH
19279: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19283: LD_OWVAR 67
19287: PUSH
19288: LD_INT 3
19290: GREATEREQUAL
19291: PUSH
19292: LD_VAR 0 4
19296: AND
19297: PUSH
19298: LD_VAR 0 5
19302: AND
19303: PUSH
19304: LD_VAR 0 6
19308: AND
19309: IFFALSE 19321
// SetAchievementEX ( ACH_AMER , 6 ) ;
19311: LD_STRING ACH_AMER
19313: PPUSH
19314: LD_INT 6
19316: PPUSH
19317: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19321: LD_EXP 20
19325: PPUSH
19326: LD_STRING 06_KurtStatus_1
19328: PPUSH
19329: CALL_OW 39
// GiveMedals ( Main ) ;
19333: LD_STRING Main
19335: PPUSH
19336: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19340: LD_INT 22
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 21
19352: PUSH
19353: LD_INT 1
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 50
19362: PUSH
19363: EMPTY
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: LD_INT 25
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 25
19381: PUSH
19382: LD_INT 2
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 25
19391: PUSH
19392: LD_INT 3
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 25
19401: PUSH
19402: LD_INT 4
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 69
19426: PPUSH
19427: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19431: LD_EXP 1
19435: PPUSH
19436: LD_EXP 42
19440: PUSH
19441: LD_STRING JMM
19443: STR
19444: PPUSH
19445: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19449: LD_EXP 2
19453: PPUSH
19454: LD_EXP 42
19458: PUSH
19459: LD_STRING Lisa
19461: STR
19462: PPUSH
19463: CALL 6869 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19467: LD_EXP 3
19471: PPUSH
19472: LD_EXP 42
19476: PUSH
19477: LD_STRING Bobby
19479: STR
19480: PPUSH
19481: CALL 6869 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19485: LD_EXP 4
19489: PPUSH
19490: LD_EXP 42
19494: PUSH
19495: LD_STRING Cyrus
19497: STR
19498: PPUSH
19499: CALL 6869 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19503: LD_EXP 5
19507: PPUSH
19508: LD_EXP 42
19512: PUSH
19513: LD_STRING Frank
19515: STR
19516: PPUSH
19517: CALL 6869 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19521: LD_EXP 6
19525: PPUSH
19526: LD_EXP 42
19530: PUSH
19531: LD_STRING Brown
19533: STR
19534: PPUSH
19535: CALL 6869 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19539: LD_EXP 7
19543: PPUSH
19544: LD_EXP 42
19548: PUSH
19549: LD_STRING Donaldson
19551: STR
19552: PPUSH
19553: CALL 6869 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19557: LD_EXP 8
19561: PPUSH
19562: LD_EXP 42
19566: PUSH
19567: LD_STRING Gladstone
19569: STR
19570: PPUSH
19571: CALL 6869 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19575: LD_EXP 9
19579: PPUSH
19580: LD_EXP 42
19584: PUSH
19585: LD_STRING Denis
19587: STR
19588: PPUSH
19589: CALL 6869 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19593: LD_EXP 15
19597: PPUSH
19598: LD_EXP 42
19602: PUSH
19603: LD_STRING Joan
19605: STR
19606: PPUSH
19607: CALL 6869 0 2
// if IsLive ( Joan ) then
19611: LD_EXP 15
19615: PPUSH
19616: CALL_OW 300
19620: IFFALSE 19634
// SaveCharacters ( Joan , Joan ) ;
19622: LD_EXP 15
19626: PPUSH
19627: LD_STRING Joan
19629: PPUSH
19630: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19634: LD_EXP 16
19638: PPUSH
19639: LD_STRING 06_JoanStatus_1
19641: PPUSH
19642: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19646: LD_INT 50
19648: PUSH
19649: EMPTY
19650: LIST
19651: PUSH
19652: LD_INT 22
19654: PUSH
19655: LD_INT 1
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 21
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: LD_INT 25
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 25
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 25
19697: PUSH
19698: LD_INT 3
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 25
19707: PUSH
19708: LD_INT 4
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: PUSH
19733: LD_EXP 1
19737: PUSH
19738: LD_EXP 2
19742: PUSH
19743: LD_EXP 3
19747: PUSH
19748: LD_EXP 4
19752: PUSH
19753: LD_EXP 5
19757: PUSH
19758: LD_EXP 6
19762: PUSH
19763: LD_EXP 7
19767: PUSH
19768: LD_EXP 8
19772: PUSH
19773: LD_EXP 9
19777: PUSH
19778: LD_EXP 15
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: DIFF
19795: PPUSH
19796: LD_STRING 06_other_survivors
19798: PPUSH
19799: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19803: LD_INT 50
19805: PUSH
19806: EMPTY
19807: LIST
19808: PUSH
19809: LD_INT 22
19811: PUSH
19812: LD_INT 1
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 21
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: LD_INT 25
19834: PUSH
19835: LD_INT 12
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 25
19844: PUSH
19845: LD_INT 16
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: PPUSH
19863: CALL_OW 69
19867: PPUSH
19868: LD_STRING 06_other_apemans
19870: PPUSH
19871: CALL_OW 38
// YouWin ;
19875: CALL_OW 103
// end ; end_of_file
19879: LD_VAR 0 3
19883: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19884: LD_EXP 47
19888: PUSH
19889: LD_OWVAR 1
19893: PUSH
19894: LD_INT 23100
19896: PUSH
19897: LD_INT 21000
19899: PUSH
19900: LD_INT 18900
19902: PUSH
19903: LD_INT 16800
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PUSH
19912: LD_OWVAR 67
19916: ARRAY
19917: GREATER
19918: AND
19919: IFFALSE 20255
19921: GO 19923
19923: DISABLE
19924: LD_INT 0
19926: PPUSH
19927: PPUSH
19928: PPUSH
19929: PPUSH
// begin enable ;
19930: ENABLE
// for i in ruAttackers do
19931: LD_ADDR_VAR 0 1
19935: PUSH
19936: LD_EXP 47
19940: PUSH
19941: FOR_IN
19942: IFFALSE 20253
// begin if not IsDrivenBy ( i ) then
19944: LD_VAR 0 1
19948: PPUSH
19949: CALL_OW 311
19953: NOT
19954: IFFALSE 19958
// continue ;
19956: GO 19941
// if i mod 2 = 0 then
19958: LD_VAR 0 1
19962: PUSH
19963: LD_INT 2
19965: MOD
19966: PUSH
19967: LD_INT 0
19969: EQUAL
19970: IFFALSE 20036
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] , [ 80 , 12 ] ] else
19972: LD_ADDR_VAR 0 3
19976: PUSH
19977: LD_INT 91
19979: PUSH
19980: LD_INT 52
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 82
19989: PUSH
19990: LD_INT 34
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 90
19999: PUSH
20000: LD_INT 26
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 86
20009: PUSH
20010: LD_INT 16
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 80
20019: PUSH
20020: LD_INT 12
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: ST_TO_ADDR
20034: GO 20109
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20036: LD_ADDR_VAR 0 3
20040: PUSH
20041: LD_INT 91
20043: PUSH
20044: LD_INT 52
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 68
20053: PUSH
20054: LD_INT 46
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 48
20063: PUSH
20064: LD_INT 43
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 33
20073: PUSH
20074: LD_INT 34
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 30
20083: PUSH
20084: LD_INT 19
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 38
20093: PUSH
20094: LD_INT 16
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20109: LD_VAR 0 1
20113: PPUSH
20114: CALL_OW 256
20118: PUSH
20119: LD_INT 1000
20121: EQUAL
20122: IFFALSE 20140
// AgressiveMove ( i , path ) else
20124: LD_VAR 0 1
20128: PPUSH
20129: LD_VAR 0 3
20133: PPUSH
20134: CALL 80987 0 2
20138: GO 20251
// if GetLives ( i ) < 650 then
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 256
20149: PUSH
20150: LD_INT 650
20152: LESS
20153: IFFALSE 20251
// begin if not IsInArea ( i , russianRepairArea ) then
20155: LD_VAR 0 1
20159: PPUSH
20160: LD_INT 12
20162: PPUSH
20163: CALL_OW 308
20167: NOT
20168: IFFALSE 20237
// begin SetTag ( i , 0 ) ;
20170: LD_VAR 0 1
20174: PPUSH
20175: LD_INT 0
20177: PPUSH
20178: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 261
20191: PUSH
20192: LD_INT 50
20194: LESS
20195: PUSH
20196: LD_INT 21
20198: PPUSH
20199: CALL_OW 302
20203: AND
20204: IFFALSE 20220
// ComMoveUnit ( i , rufab ) else
20206: LD_VAR 0 1
20210: PPUSH
20211: LD_INT 21
20213: PPUSH
20214: CALL_OW 112
20218: GO 20235
// ComMoveXY ( i , 121 , 99 ) ;
20220: LD_VAR 0 1
20224: PPUSH
20225: LD_INT 121
20227: PPUSH
20228: LD_INT 99
20230: PPUSH
20231: CALL_OW 111
// end else
20235: GO 20251
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20237: LD_VAR 0 1
20241: PPUSH
20242: CALL_OW 311
20246: PPUSH
20247: CALL 80083 0 1
// end ; end ;
20251: GO 19941
20253: POP
20254: POP
// end ;
20255: PPOPN 4
20257: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20258: LD_INT 0
20260: PPUSH
20261: PPUSH
20262: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: DOUBLE
20269: LD_INT 1
20271: DEC
20272: ST_TO_ADDR
20273: LD_INT 4
20275: PUSH
20276: LD_INT 5
20278: PUSH
20279: LD_INT 6
20281: PUSH
20282: LD_INT 6
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: PUSH
20291: LD_OWVAR 67
20295: ARRAY
20296: PUSH
20297: FOR_TO
20298: IFFALSE 20473
// begin uc_side := 3 ;
20300: LD_ADDR_OWVAR 20
20304: PUSH
20305: LD_INT 3
20307: ST_TO_ADDR
// uc_nation := 3 ;
20308: LD_ADDR_OWVAR 21
20312: PUSH
20313: LD_INT 3
20315: ST_TO_ADDR
// InitHC_All ( ) ;
20316: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20320: LD_INT 0
20322: PPUSH
20323: LD_INT 4
20325: PUSH
20326: LD_INT 5
20328: PUSH
20329: LD_INT 6
20331: PUSH
20332: LD_INT 6
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: PUSH
20341: LD_OWVAR 67
20345: ARRAY
20346: PPUSH
20347: CALL_OW 381
// un := CreateHuman ;
20351: LD_ADDR_VAR 0 3
20355: PUSH
20356: CALL_OW 44
20360: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20361: LD_VAR 0 3
20365: PPUSH
20366: LD_INT 127
20368: PPUSH
20369: LD_INT 62
20371: PPUSH
20372: LD_INT 3
20374: PPUSH
20375: LD_INT 0
20377: PPUSH
20378: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20382: LD_ADDR_EXP 48
20386: PUSH
20387: LD_EXP 48
20391: PPUSH
20392: LD_EXP 48
20396: PUSH
20397: LD_INT 1
20399: PLUS
20400: PPUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: CALL_OW 1
20410: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20411: LD_VAR 0 3
20415: PPUSH
20416: LD_INT 83
20418: PPUSH
20419: LD_INT 49
20421: PPUSH
20422: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20426: LD_VAR 0 3
20430: PPUSH
20431: LD_INT 49
20433: PPUSH
20434: LD_INT 43
20436: PPUSH
20437: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20441: LD_VAR 0 3
20445: PPUSH
20446: LD_INT 31
20448: PPUSH
20449: LD_INT 15
20451: PPUSH
20452: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20456: LD_VAR 0 3
20460: PPUSH
20461: LD_INT 63
20463: PPUSH
20464: LD_INT 9
20466: PPUSH
20467: CALL_OW 174
// end ;
20471: GO 20297
20473: POP
20474: POP
// end ; end_of_file
20475: LD_VAR 0 1
20479: RET
// export function CreateNature ; var i , un ; begin
20480: LD_INT 0
20482: PPUSH
20483: PPUSH
20484: PPUSH
// for i := 1 to Difficulty + 2 do
20485: LD_ADDR_VAR 0 2
20489: PUSH
20490: DOUBLE
20491: LD_INT 1
20493: DEC
20494: ST_TO_ADDR
20495: LD_OWVAR 67
20499: PUSH
20500: LD_INT 2
20502: PLUS
20503: PUSH
20504: FOR_TO
20505: IFFALSE 20614
// begin hc_sex := sex_male ;
20507: LD_ADDR_OWVAR 27
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// uc_side := 0 ;
20515: LD_ADDR_OWVAR 20
20519: PUSH
20520: LD_INT 0
20522: ST_TO_ADDR
// uc_nation := nation_nature ;
20523: LD_ADDR_OWVAR 21
20527: PUSH
20528: LD_INT 0
20530: ST_TO_ADDR
// hc_class := class_tiger ;
20531: LD_ADDR_OWVAR 28
20535: PUSH
20536: LD_INT 14
20538: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20539: LD_ADDR_OWVAR 31
20543: PUSH
20544: LD_EXP 35
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: LD_INT 0
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20564: LD_ADDR_OWVAR 35
20568: PUSH
20569: LD_INT 5
20571: NEG
20572: PPUSH
20573: LD_INT 5
20575: PPUSH
20576: CALL_OW 12
20580: PUSH
20581: LD_OWVAR 67
20585: MUL
20586: ST_TO_ADDR
// un := CreateHuman ;
20587: LD_ADDR_VAR 0 3
20591: PUSH
20592: CALL_OW 44
20596: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20597: LD_VAR 0 3
20601: PPUSH
20602: LD_INT 18
20604: PPUSH
20605: LD_INT 0
20607: PPUSH
20608: CALL_OW 49
// end ;
20612: GO 20504
20614: POP
20615: POP
// for i = 1 to rand ( 3 , 4 ) do
20616: LD_ADDR_VAR 0 2
20620: PUSH
20621: DOUBLE
20622: LD_INT 1
20624: DEC
20625: ST_TO_ADDR
20626: LD_INT 3
20628: PPUSH
20629: LD_INT 4
20631: PPUSH
20632: CALL_OW 12
20636: PUSH
20637: FOR_TO
20638: IFFALSE 20708
// begin hc_class := class_phororhacos ;
20640: LD_ADDR_OWVAR 28
20644: PUSH
20645: LD_INT 18
20647: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20648: LD_ADDR_OWVAR 31
20652: PUSH
20653: LD_EXP 35
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: ST_TO_ADDR
// hc_agressivity := 0 ;
20673: LD_ADDR_OWVAR 35
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// un = CreateHuman ;
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: CALL_OW 44
20690: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20691: LD_VAR 0 3
20695: PPUSH
20696: LD_INT 18
20698: PPUSH
20699: LD_INT 0
20701: PPUSH
20702: CALL_OW 49
// end ;
20706: GO 20637
20708: POP
20709: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
20710: LD_ADDR_VAR 0 2
20714: PUSH
20715: DOUBLE
20716: LD_INT 1
20718: DEC
20719: ST_TO_ADDR
20720: LD_INT 1
20722: PPUSH
20723: LD_INT 3
20725: PPUSH
20726: CALL_OW 12
20730: PUSH
20731: LD_OWVAR 67
20735: PLUS
20736: PUSH
20737: FOR_TO
20738: IFFALSE 20875
// begin hc_class := class_apeman ;
20740: LD_ADDR_OWVAR 28
20744: PUSH
20745: LD_INT 12
20747: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20748: LD_ADDR_OWVAR 31
20752: PUSH
20753: LD_INT 2
20755: PPUSH
20756: LD_INT 5
20758: PPUSH
20759: CALL_OW 12
20763: PUSH
20764: LD_INT 0
20766: PPUSH
20767: LD_INT 2
20769: PPUSH
20770: CALL_OW 12
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: ST_TO_ADDR
// hc_agressivity := [ rand ( 0 , 10 ) , rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 20 , 30 ) ] [ Difficulty ] ;
20787: LD_ADDR_OWVAR 35
20791: PUSH
20792: LD_INT 0
20794: PPUSH
20795: LD_INT 10
20797: PPUSH
20798: CALL_OW 12
20802: PUSH
20803: LD_INT 10
20805: PPUSH
20806: LD_INT 20
20808: PPUSH
20809: CALL_OW 12
20813: PUSH
20814: LD_INT 20
20816: PPUSH
20817: LD_INT 25
20819: PPUSH
20820: CALL_OW 12
20824: PUSH
20825: LD_INT 20
20827: PPUSH
20828: LD_INT 30
20830: PPUSH
20831: CALL_OW 12
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: LD_OWVAR 67
20846: ARRAY
20847: ST_TO_ADDR
// un := CreateHuman ;
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: CALL_OW 44
20857: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20858: LD_VAR 0 3
20862: PPUSH
20863: LD_INT 19
20865: PPUSH
20866: LD_INT 0
20868: PPUSH
20869: CALL_OW 49
// end ;
20873: GO 20737
20875: POP
20876: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
20877: LD_ADDR_VAR 0 2
20881: PUSH
20882: DOUBLE
20883: LD_INT 1
20885: DEC
20886: ST_TO_ADDR
20887: LD_INT 5
20889: PPUSH
20890: LD_INT 6
20892: PPUSH
20893: CALL_OW 12
20897: PUSH
20898: LD_OWVAR 67
20902: PLUS
20903: PUSH
20904: FOR_TO
20905: IFFALSE 20989
// begin hc_class := class_apeman ;
20907: LD_ADDR_OWVAR 28
20911: PUSH
20912: LD_INT 12
20914: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20915: LD_ADDR_OWVAR 31
20919: PUSH
20920: LD_INT 2
20922: PPUSH
20923: LD_INT 5
20925: PPUSH
20926: CALL_OW 12
20930: PUSH
20931: LD_INT 0
20933: PPUSH
20934: LD_INT 2
20936: PPUSH
20937: CALL_OW 12
20941: PUSH
20942: LD_INT 0
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: ST_TO_ADDR
// hc_agressivity := 0 ;
20954: LD_ADDR_OWVAR 35
20958: PUSH
20959: LD_INT 0
20961: ST_TO_ADDR
// un = CreateHuman ;
20962: LD_ADDR_VAR 0 3
20966: PUSH
20967: CALL_OW 44
20971: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20972: LD_VAR 0 3
20976: PPUSH
20977: LD_INT 20
20979: PPUSH
20980: LD_INT 0
20982: PPUSH
20983: CALL_OW 49
// end ;
20987: GO 20904
20989: POP
20990: POP
// end ; end_of_file end_of_file
20991: LD_VAR 0 1
20995: RET
// every 0 0$1 do
20996: GO 20998
20998: DISABLE
// begin enable ;
20999: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21000: LD_STRING updateTimer(
21002: PUSH
21003: LD_OWVAR 1
21007: STR
21008: PUSH
21009: LD_STRING );
21011: STR
21012: PPUSH
21013: CALL_OW 559
// end ;
21017: END
// export function SOS_MapStart ( ) ; begin
21018: LD_INT 0
21020: PPUSH
// if streamModeActive then
21021: LD_EXP 49
21025: IFFALSE 21034
// DefineStreamItems ( true ) ;
21027: LD_INT 1
21029: PPUSH
21030: CALL 22688 0 1
// UpdateFactoryWaypoints ( ) ;
21034: CALL 35549 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21038: CALL 35806 0 0
// end ;
21042: LD_VAR 0 1
21046: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21047: LD_INT 0
21049: PPUSH
// if p2 = hack_mode then
21050: LD_VAR 0 2
21054: PUSH
21055: LD_INT 100
21057: EQUAL
21058: IFFALSE 22061
// begin if not StreamModeActive then
21060: LD_EXP 49
21064: NOT
21065: IFFALSE 21075
// StreamModeActive := true ;
21067: LD_ADDR_EXP 49
21071: PUSH
21072: LD_INT 1
21074: ST_TO_ADDR
// if p3 = 0 then
21075: LD_VAR 0 3
21079: PUSH
21080: LD_INT 0
21082: EQUAL
21083: IFFALSE 21089
// InitStreamMode ;
21085: CALL 22224 0 0
// if p3 = 1 then
21089: LD_VAR 0 3
21093: PUSH
21094: LD_INT 1
21096: EQUAL
21097: IFFALSE 21107
// sRocket := true ;
21099: LD_ADDR_EXP 54
21103: PUSH
21104: LD_INT 1
21106: ST_TO_ADDR
// if p3 = 2 then
21107: LD_VAR 0 3
21111: PUSH
21112: LD_INT 2
21114: EQUAL
21115: IFFALSE 21125
// sSpeed := true ;
21117: LD_ADDR_EXP 53
21121: PUSH
21122: LD_INT 1
21124: ST_TO_ADDR
// if p3 = 3 then
21125: LD_VAR 0 3
21129: PUSH
21130: LD_INT 3
21132: EQUAL
21133: IFFALSE 21143
// sEngine := true ;
21135: LD_ADDR_EXP 55
21139: PUSH
21140: LD_INT 1
21142: ST_TO_ADDR
// if p3 = 4 then
21143: LD_VAR 0 3
21147: PUSH
21148: LD_INT 4
21150: EQUAL
21151: IFFALSE 21161
// sSpec := true ;
21153: LD_ADDR_EXP 52
21157: PUSH
21158: LD_INT 1
21160: ST_TO_ADDR
// if p3 = 5 then
21161: LD_VAR 0 3
21165: PUSH
21166: LD_INT 5
21168: EQUAL
21169: IFFALSE 21179
// sLevel := true ;
21171: LD_ADDR_EXP 56
21175: PUSH
21176: LD_INT 1
21178: ST_TO_ADDR
// if p3 = 6 then
21179: LD_VAR 0 3
21183: PUSH
21184: LD_INT 6
21186: EQUAL
21187: IFFALSE 21197
// sArmoury := true ;
21189: LD_ADDR_EXP 57
21193: PUSH
21194: LD_INT 1
21196: ST_TO_ADDR
// if p3 = 7 then
21197: LD_VAR 0 3
21201: PUSH
21202: LD_INT 7
21204: EQUAL
21205: IFFALSE 21215
// sRadar := true ;
21207: LD_ADDR_EXP 58
21211: PUSH
21212: LD_INT 1
21214: ST_TO_ADDR
// if p3 = 8 then
21215: LD_VAR 0 3
21219: PUSH
21220: LD_INT 8
21222: EQUAL
21223: IFFALSE 21233
// sBunker := true ;
21225: LD_ADDR_EXP 59
21229: PUSH
21230: LD_INT 1
21232: ST_TO_ADDR
// if p3 = 9 then
21233: LD_VAR 0 3
21237: PUSH
21238: LD_INT 9
21240: EQUAL
21241: IFFALSE 21251
// sHack := true ;
21243: LD_ADDR_EXP 60
21247: PUSH
21248: LD_INT 1
21250: ST_TO_ADDR
// if p3 = 10 then
21251: LD_VAR 0 3
21255: PUSH
21256: LD_INT 10
21258: EQUAL
21259: IFFALSE 21269
// sFire := true ;
21261: LD_ADDR_EXP 61
21265: PUSH
21266: LD_INT 1
21268: ST_TO_ADDR
// if p3 = 11 then
21269: LD_VAR 0 3
21273: PUSH
21274: LD_INT 11
21276: EQUAL
21277: IFFALSE 21287
// sRefresh := true ;
21279: LD_ADDR_EXP 62
21283: PUSH
21284: LD_INT 1
21286: ST_TO_ADDR
// if p3 = 12 then
21287: LD_VAR 0 3
21291: PUSH
21292: LD_INT 12
21294: EQUAL
21295: IFFALSE 21305
// sExp := true ;
21297: LD_ADDR_EXP 63
21301: PUSH
21302: LD_INT 1
21304: ST_TO_ADDR
// if p3 = 13 then
21305: LD_VAR 0 3
21309: PUSH
21310: LD_INT 13
21312: EQUAL
21313: IFFALSE 21323
// sDepot := true ;
21315: LD_ADDR_EXP 64
21319: PUSH
21320: LD_INT 1
21322: ST_TO_ADDR
// if p3 = 14 then
21323: LD_VAR 0 3
21327: PUSH
21328: LD_INT 14
21330: EQUAL
21331: IFFALSE 21341
// sFlag := true ;
21333: LD_ADDR_EXP 65
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
// if p3 = 15 then
21341: LD_VAR 0 3
21345: PUSH
21346: LD_INT 15
21348: EQUAL
21349: IFFALSE 21359
// sKamikadze := true ;
21351: LD_ADDR_EXP 73
21355: PUSH
21356: LD_INT 1
21358: ST_TO_ADDR
// if p3 = 16 then
21359: LD_VAR 0 3
21363: PUSH
21364: LD_INT 16
21366: EQUAL
21367: IFFALSE 21377
// sTroll := true ;
21369: LD_ADDR_EXP 74
21373: PUSH
21374: LD_INT 1
21376: ST_TO_ADDR
// if p3 = 17 then
21377: LD_VAR 0 3
21381: PUSH
21382: LD_INT 17
21384: EQUAL
21385: IFFALSE 21395
// sSlow := true ;
21387: LD_ADDR_EXP 75
21391: PUSH
21392: LD_INT 1
21394: ST_TO_ADDR
// if p3 = 18 then
21395: LD_VAR 0 3
21399: PUSH
21400: LD_INT 18
21402: EQUAL
21403: IFFALSE 21413
// sLack := true ;
21405: LD_ADDR_EXP 76
21409: PUSH
21410: LD_INT 1
21412: ST_TO_ADDR
// if p3 = 19 then
21413: LD_VAR 0 3
21417: PUSH
21418: LD_INT 19
21420: EQUAL
21421: IFFALSE 21431
// sTank := true ;
21423: LD_ADDR_EXP 78
21427: PUSH
21428: LD_INT 1
21430: ST_TO_ADDR
// if p3 = 20 then
21431: LD_VAR 0 3
21435: PUSH
21436: LD_INT 20
21438: EQUAL
21439: IFFALSE 21449
// sRemote := true ;
21441: LD_ADDR_EXP 79
21445: PUSH
21446: LD_INT 1
21448: ST_TO_ADDR
// if p3 = 21 then
21449: LD_VAR 0 3
21453: PUSH
21454: LD_INT 21
21456: EQUAL
21457: IFFALSE 21467
// sPowell := true ;
21459: LD_ADDR_EXP 80
21463: PUSH
21464: LD_INT 1
21466: ST_TO_ADDR
// if p3 = 22 then
21467: LD_VAR 0 3
21471: PUSH
21472: LD_INT 22
21474: EQUAL
21475: IFFALSE 21485
// sTeleport := true ;
21477: LD_ADDR_EXP 83
21481: PUSH
21482: LD_INT 1
21484: ST_TO_ADDR
// if p3 = 23 then
21485: LD_VAR 0 3
21489: PUSH
21490: LD_INT 23
21492: EQUAL
21493: IFFALSE 21503
// sOilTower := true ;
21495: LD_ADDR_EXP 85
21499: PUSH
21500: LD_INT 1
21502: ST_TO_ADDR
// if p3 = 24 then
21503: LD_VAR 0 3
21507: PUSH
21508: LD_INT 24
21510: EQUAL
21511: IFFALSE 21521
// sShovel := true ;
21513: LD_ADDR_EXP 86
21517: PUSH
21518: LD_INT 1
21520: ST_TO_ADDR
// if p3 = 25 then
21521: LD_VAR 0 3
21525: PUSH
21526: LD_INT 25
21528: EQUAL
21529: IFFALSE 21539
// sSheik := true ;
21531: LD_ADDR_EXP 87
21535: PUSH
21536: LD_INT 1
21538: ST_TO_ADDR
// if p3 = 26 then
21539: LD_VAR 0 3
21543: PUSH
21544: LD_INT 26
21546: EQUAL
21547: IFFALSE 21557
// sEarthquake := true ;
21549: LD_ADDR_EXP 89
21553: PUSH
21554: LD_INT 1
21556: ST_TO_ADDR
// if p3 = 27 then
21557: LD_VAR 0 3
21561: PUSH
21562: LD_INT 27
21564: EQUAL
21565: IFFALSE 21575
// sAI := true ;
21567: LD_ADDR_EXP 90
21571: PUSH
21572: LD_INT 1
21574: ST_TO_ADDR
// if p3 = 28 then
21575: LD_VAR 0 3
21579: PUSH
21580: LD_INT 28
21582: EQUAL
21583: IFFALSE 21593
// sCargo := true ;
21585: LD_ADDR_EXP 93
21589: PUSH
21590: LD_INT 1
21592: ST_TO_ADDR
// if p3 = 29 then
21593: LD_VAR 0 3
21597: PUSH
21598: LD_INT 29
21600: EQUAL
21601: IFFALSE 21611
// sDLaser := true ;
21603: LD_ADDR_EXP 94
21607: PUSH
21608: LD_INT 1
21610: ST_TO_ADDR
// if p3 = 30 then
21611: LD_VAR 0 3
21615: PUSH
21616: LD_INT 30
21618: EQUAL
21619: IFFALSE 21629
// sExchange := true ;
21621: LD_ADDR_EXP 95
21625: PUSH
21626: LD_INT 1
21628: ST_TO_ADDR
// if p3 = 31 then
21629: LD_VAR 0 3
21633: PUSH
21634: LD_INT 31
21636: EQUAL
21637: IFFALSE 21647
// sFac := true ;
21639: LD_ADDR_EXP 96
21643: PUSH
21644: LD_INT 1
21646: ST_TO_ADDR
// if p3 = 32 then
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 32
21654: EQUAL
21655: IFFALSE 21665
// sPower := true ;
21657: LD_ADDR_EXP 97
21661: PUSH
21662: LD_INT 1
21664: ST_TO_ADDR
// if p3 = 33 then
21665: LD_VAR 0 3
21669: PUSH
21670: LD_INT 33
21672: EQUAL
21673: IFFALSE 21683
// sRandom := true ;
21675: LD_ADDR_EXP 98
21679: PUSH
21680: LD_INT 1
21682: ST_TO_ADDR
// if p3 = 34 then
21683: LD_VAR 0 3
21687: PUSH
21688: LD_INT 34
21690: EQUAL
21691: IFFALSE 21701
// sShield := true ;
21693: LD_ADDR_EXP 99
21697: PUSH
21698: LD_INT 1
21700: ST_TO_ADDR
// if p3 = 35 then
21701: LD_VAR 0 3
21705: PUSH
21706: LD_INT 35
21708: EQUAL
21709: IFFALSE 21719
// sTime := true ;
21711: LD_ADDR_EXP 100
21715: PUSH
21716: LD_INT 1
21718: ST_TO_ADDR
// if p3 = 36 then
21719: LD_VAR 0 3
21723: PUSH
21724: LD_INT 36
21726: EQUAL
21727: IFFALSE 21737
// sTools := true ;
21729: LD_ADDR_EXP 101
21733: PUSH
21734: LD_INT 1
21736: ST_TO_ADDR
// if p3 = 101 then
21737: LD_VAR 0 3
21741: PUSH
21742: LD_INT 101
21744: EQUAL
21745: IFFALSE 21755
// sSold := true ;
21747: LD_ADDR_EXP 66
21751: PUSH
21752: LD_INT 1
21754: ST_TO_ADDR
// if p3 = 102 then
21755: LD_VAR 0 3
21759: PUSH
21760: LD_INT 102
21762: EQUAL
21763: IFFALSE 21773
// sDiff := true ;
21765: LD_ADDR_EXP 67
21769: PUSH
21770: LD_INT 1
21772: ST_TO_ADDR
// if p3 = 103 then
21773: LD_VAR 0 3
21777: PUSH
21778: LD_INT 103
21780: EQUAL
21781: IFFALSE 21791
// sFog := true ;
21783: LD_ADDR_EXP 70
21787: PUSH
21788: LD_INT 1
21790: ST_TO_ADDR
// if p3 = 104 then
21791: LD_VAR 0 3
21795: PUSH
21796: LD_INT 104
21798: EQUAL
21799: IFFALSE 21809
// sReset := true ;
21801: LD_ADDR_EXP 71
21805: PUSH
21806: LD_INT 1
21808: ST_TO_ADDR
// if p3 = 105 then
21809: LD_VAR 0 3
21813: PUSH
21814: LD_INT 105
21816: EQUAL
21817: IFFALSE 21827
// sSun := true ;
21819: LD_ADDR_EXP 72
21823: PUSH
21824: LD_INT 1
21826: ST_TO_ADDR
// if p3 = 106 then
21827: LD_VAR 0 3
21831: PUSH
21832: LD_INT 106
21834: EQUAL
21835: IFFALSE 21845
// sTiger := true ;
21837: LD_ADDR_EXP 68
21841: PUSH
21842: LD_INT 1
21844: ST_TO_ADDR
// if p3 = 107 then
21845: LD_VAR 0 3
21849: PUSH
21850: LD_INT 107
21852: EQUAL
21853: IFFALSE 21863
// sBomb := true ;
21855: LD_ADDR_EXP 69
21859: PUSH
21860: LD_INT 1
21862: ST_TO_ADDR
// if p3 = 108 then
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 108
21870: EQUAL
21871: IFFALSE 21881
// sWound := true ;
21873: LD_ADDR_EXP 77
21877: PUSH
21878: LD_INT 1
21880: ST_TO_ADDR
// if p3 = 109 then
21881: LD_VAR 0 3
21885: PUSH
21886: LD_INT 109
21888: EQUAL
21889: IFFALSE 21899
// sBetray := true ;
21891: LD_ADDR_EXP 81
21895: PUSH
21896: LD_INT 1
21898: ST_TO_ADDR
// if p3 = 110 then
21899: LD_VAR 0 3
21903: PUSH
21904: LD_INT 110
21906: EQUAL
21907: IFFALSE 21917
// sContamin := true ;
21909: LD_ADDR_EXP 82
21913: PUSH
21914: LD_INT 1
21916: ST_TO_ADDR
// if p3 = 111 then
21917: LD_VAR 0 3
21921: PUSH
21922: LD_INT 111
21924: EQUAL
21925: IFFALSE 21935
// sOil := true ;
21927: LD_ADDR_EXP 84
21931: PUSH
21932: LD_INT 1
21934: ST_TO_ADDR
// if p3 = 112 then
21935: LD_VAR 0 3
21939: PUSH
21940: LD_INT 112
21942: EQUAL
21943: IFFALSE 21953
// sStu := true ;
21945: LD_ADDR_EXP 88
21949: PUSH
21950: LD_INT 1
21952: ST_TO_ADDR
// if p3 = 113 then
21953: LD_VAR 0 3
21957: PUSH
21958: LD_INT 113
21960: EQUAL
21961: IFFALSE 21971
// sBazooka := true ;
21963: LD_ADDR_EXP 91
21967: PUSH
21968: LD_INT 1
21970: ST_TO_ADDR
// if p3 = 114 then
21971: LD_VAR 0 3
21975: PUSH
21976: LD_INT 114
21978: EQUAL
21979: IFFALSE 21989
// sMortar := true ;
21981: LD_ADDR_EXP 92
21985: PUSH
21986: LD_INT 1
21988: ST_TO_ADDR
// if p3 = 115 then
21989: LD_VAR 0 3
21993: PUSH
21994: LD_INT 115
21996: EQUAL
21997: IFFALSE 22007
// sRanger := true ;
21999: LD_ADDR_EXP 102
22003: PUSH
22004: LD_INT 1
22006: ST_TO_ADDR
// if p3 = 116 then
22007: LD_VAR 0 3
22011: PUSH
22012: LD_INT 116
22014: EQUAL
22015: IFFALSE 22025
// sComputer := true ;
22017: LD_ADDR_EXP 103
22021: PUSH
22022: LD_INT 1
22024: ST_TO_ADDR
// if p3 = 117 then
22025: LD_VAR 0 3
22029: PUSH
22030: LD_INT 117
22032: EQUAL
22033: IFFALSE 22043
// s30 := true ;
22035: LD_ADDR_EXP 104
22039: PUSH
22040: LD_INT 1
22042: ST_TO_ADDR
// if p3 = 118 then
22043: LD_VAR 0 3
22047: PUSH
22048: LD_INT 118
22050: EQUAL
22051: IFFALSE 22061
// s60 := true ;
22053: LD_ADDR_EXP 105
22057: PUSH
22058: LD_INT 1
22060: ST_TO_ADDR
// end ; if p2 = stream_mode then
22061: LD_VAR 0 2
22065: PUSH
22066: LD_INT 101
22068: EQUAL
22069: IFFALSE 22197
// begin case p3 of 1 :
22071: LD_VAR 0 3
22075: PUSH
22076: LD_INT 1
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22091
22084: POP
// hHackUnlimitedResources ; 2 :
22085: CALL 34295 0 0
22089: GO 22197
22091: LD_INT 2
22093: DOUBLE
22094: EQUAL
22095: IFTRUE 22099
22097: GO 22106
22099: POP
// hHackSetLevel10 ; 3 :
22100: CALL 34428 0 0
22104: GO 22197
22106: LD_INT 3
22108: DOUBLE
22109: EQUAL
22110: IFTRUE 22114
22112: GO 22121
22114: POP
// hHackSetLevel10YourUnits ; 4 :
22115: CALL 34513 0 0
22119: GO 22197
22121: LD_INT 4
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22136
22129: POP
// hHackInvincible ; 5 :
22130: CALL 34961 0 0
22134: GO 22197
22136: LD_INT 5
22138: DOUBLE
22139: EQUAL
22140: IFTRUE 22144
22142: GO 22151
22144: POP
// hHackInvisible ; 6 :
22145: CALL 35072 0 0
22149: GO 22197
22151: LD_INT 6
22153: DOUBLE
22154: EQUAL
22155: IFTRUE 22159
22157: GO 22166
22159: POP
// hHackChangeYourSide ; 7 :
22160: CALL 35129 0 0
22164: GO 22197
22166: LD_INT 7
22168: DOUBLE
22169: EQUAL
22170: IFTRUE 22174
22172: GO 22181
22174: POP
// hHackChangeUnitSide ; 8 :
22175: CALL 35171 0 0
22179: GO 22197
22181: LD_INT 8
22183: DOUBLE
22184: EQUAL
22185: IFTRUE 22189
22187: GO 22196
22189: POP
// hHackFog ; end ;
22190: CALL 35272 0 0
22194: GO 22197
22196: POP
// end ; end ;
22197: LD_VAR 0 7
22201: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
22202: GO 22204
22204: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22205: LD_STRING initStreamRollete();
22207: PPUSH
22208: CALL_OW 559
// InitStreamMode ;
22212: CALL 22224 0 0
// DefineStreamItems ( false ) ;
22216: LD_INT 0
22218: PPUSH
22219: CALL 22688 0 1
// end ;
22223: END
// function InitStreamMode ; begin
22224: LD_INT 0
22226: PPUSH
// streamModeActive := false ;
22227: LD_ADDR_EXP 49
22231: PUSH
22232: LD_INT 0
22234: ST_TO_ADDR
// normalCounter := 36 ;
22235: LD_ADDR_EXP 50
22239: PUSH
22240: LD_INT 36
22242: ST_TO_ADDR
// hardcoreCounter := 18 ;
22243: LD_ADDR_EXP 51
22247: PUSH
22248: LD_INT 18
22250: ST_TO_ADDR
// sRocket := false ;
22251: LD_ADDR_EXP 54
22255: PUSH
22256: LD_INT 0
22258: ST_TO_ADDR
// sSpeed := false ;
22259: LD_ADDR_EXP 53
22263: PUSH
22264: LD_INT 0
22266: ST_TO_ADDR
// sEngine := false ;
22267: LD_ADDR_EXP 55
22271: PUSH
22272: LD_INT 0
22274: ST_TO_ADDR
// sSpec := false ;
22275: LD_ADDR_EXP 52
22279: PUSH
22280: LD_INT 0
22282: ST_TO_ADDR
// sLevel := false ;
22283: LD_ADDR_EXP 56
22287: PUSH
22288: LD_INT 0
22290: ST_TO_ADDR
// sArmoury := false ;
22291: LD_ADDR_EXP 57
22295: PUSH
22296: LD_INT 0
22298: ST_TO_ADDR
// sRadar := false ;
22299: LD_ADDR_EXP 58
22303: PUSH
22304: LD_INT 0
22306: ST_TO_ADDR
// sBunker := false ;
22307: LD_ADDR_EXP 59
22311: PUSH
22312: LD_INT 0
22314: ST_TO_ADDR
// sHack := false ;
22315: LD_ADDR_EXP 60
22319: PUSH
22320: LD_INT 0
22322: ST_TO_ADDR
// sFire := false ;
22323: LD_ADDR_EXP 61
22327: PUSH
22328: LD_INT 0
22330: ST_TO_ADDR
// sRefresh := false ;
22331: LD_ADDR_EXP 62
22335: PUSH
22336: LD_INT 0
22338: ST_TO_ADDR
// sExp := false ;
22339: LD_ADDR_EXP 63
22343: PUSH
22344: LD_INT 0
22346: ST_TO_ADDR
// sDepot := false ;
22347: LD_ADDR_EXP 64
22351: PUSH
22352: LD_INT 0
22354: ST_TO_ADDR
// sFlag := false ;
22355: LD_ADDR_EXP 65
22359: PUSH
22360: LD_INT 0
22362: ST_TO_ADDR
// sKamikadze := false ;
22363: LD_ADDR_EXP 73
22367: PUSH
22368: LD_INT 0
22370: ST_TO_ADDR
// sTroll := false ;
22371: LD_ADDR_EXP 74
22375: PUSH
22376: LD_INT 0
22378: ST_TO_ADDR
// sSlow := false ;
22379: LD_ADDR_EXP 75
22383: PUSH
22384: LD_INT 0
22386: ST_TO_ADDR
// sLack := false ;
22387: LD_ADDR_EXP 76
22391: PUSH
22392: LD_INT 0
22394: ST_TO_ADDR
// sTank := false ;
22395: LD_ADDR_EXP 78
22399: PUSH
22400: LD_INT 0
22402: ST_TO_ADDR
// sRemote := false ;
22403: LD_ADDR_EXP 79
22407: PUSH
22408: LD_INT 0
22410: ST_TO_ADDR
// sPowell := false ;
22411: LD_ADDR_EXP 80
22415: PUSH
22416: LD_INT 0
22418: ST_TO_ADDR
// sTeleport := false ;
22419: LD_ADDR_EXP 83
22423: PUSH
22424: LD_INT 0
22426: ST_TO_ADDR
// sOilTower := false ;
22427: LD_ADDR_EXP 85
22431: PUSH
22432: LD_INT 0
22434: ST_TO_ADDR
// sShovel := false ;
22435: LD_ADDR_EXP 86
22439: PUSH
22440: LD_INT 0
22442: ST_TO_ADDR
// sSheik := false ;
22443: LD_ADDR_EXP 87
22447: PUSH
22448: LD_INT 0
22450: ST_TO_ADDR
// sEarthquake := false ;
22451: LD_ADDR_EXP 89
22455: PUSH
22456: LD_INT 0
22458: ST_TO_ADDR
// sAI := false ;
22459: LD_ADDR_EXP 90
22463: PUSH
22464: LD_INT 0
22466: ST_TO_ADDR
// sCargo := false ;
22467: LD_ADDR_EXP 93
22471: PUSH
22472: LD_INT 0
22474: ST_TO_ADDR
// sDLaser := false ;
22475: LD_ADDR_EXP 94
22479: PUSH
22480: LD_INT 0
22482: ST_TO_ADDR
// sExchange := false ;
22483: LD_ADDR_EXP 95
22487: PUSH
22488: LD_INT 0
22490: ST_TO_ADDR
// sFac := false ;
22491: LD_ADDR_EXP 96
22495: PUSH
22496: LD_INT 0
22498: ST_TO_ADDR
// sPower := false ;
22499: LD_ADDR_EXP 97
22503: PUSH
22504: LD_INT 0
22506: ST_TO_ADDR
// sRandom := false ;
22507: LD_ADDR_EXP 98
22511: PUSH
22512: LD_INT 0
22514: ST_TO_ADDR
// sShield := false ;
22515: LD_ADDR_EXP 99
22519: PUSH
22520: LD_INT 0
22522: ST_TO_ADDR
// sTime := false ;
22523: LD_ADDR_EXP 100
22527: PUSH
22528: LD_INT 0
22530: ST_TO_ADDR
// sTools := false ;
22531: LD_ADDR_EXP 101
22535: PUSH
22536: LD_INT 0
22538: ST_TO_ADDR
// sSold := false ;
22539: LD_ADDR_EXP 66
22543: PUSH
22544: LD_INT 0
22546: ST_TO_ADDR
// sDiff := false ;
22547: LD_ADDR_EXP 67
22551: PUSH
22552: LD_INT 0
22554: ST_TO_ADDR
// sFog := false ;
22555: LD_ADDR_EXP 70
22559: PUSH
22560: LD_INT 0
22562: ST_TO_ADDR
// sReset := false ;
22563: LD_ADDR_EXP 71
22567: PUSH
22568: LD_INT 0
22570: ST_TO_ADDR
// sSun := false ;
22571: LD_ADDR_EXP 72
22575: PUSH
22576: LD_INT 0
22578: ST_TO_ADDR
// sTiger := false ;
22579: LD_ADDR_EXP 68
22583: PUSH
22584: LD_INT 0
22586: ST_TO_ADDR
// sBomb := false ;
22587: LD_ADDR_EXP 69
22591: PUSH
22592: LD_INT 0
22594: ST_TO_ADDR
// sWound := false ;
22595: LD_ADDR_EXP 77
22599: PUSH
22600: LD_INT 0
22602: ST_TO_ADDR
// sBetray := false ;
22603: LD_ADDR_EXP 81
22607: PUSH
22608: LD_INT 0
22610: ST_TO_ADDR
// sContamin := false ;
22611: LD_ADDR_EXP 82
22615: PUSH
22616: LD_INT 0
22618: ST_TO_ADDR
// sOil := false ;
22619: LD_ADDR_EXP 84
22623: PUSH
22624: LD_INT 0
22626: ST_TO_ADDR
// sStu := false ;
22627: LD_ADDR_EXP 88
22631: PUSH
22632: LD_INT 0
22634: ST_TO_ADDR
// sBazooka := false ;
22635: LD_ADDR_EXP 91
22639: PUSH
22640: LD_INT 0
22642: ST_TO_ADDR
// sMortar := false ;
22643: LD_ADDR_EXP 92
22647: PUSH
22648: LD_INT 0
22650: ST_TO_ADDR
// sRanger := false ;
22651: LD_ADDR_EXP 102
22655: PUSH
22656: LD_INT 0
22658: ST_TO_ADDR
// sComputer := false ;
22659: LD_ADDR_EXP 103
22663: PUSH
22664: LD_INT 0
22666: ST_TO_ADDR
// s30 := false ;
22667: LD_ADDR_EXP 104
22671: PUSH
22672: LD_INT 0
22674: ST_TO_ADDR
// s60 := false ;
22675: LD_ADDR_EXP 105
22679: PUSH
22680: LD_INT 0
22682: ST_TO_ADDR
// end ;
22683: LD_VAR 0 1
22687: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22688: LD_INT 0
22690: PPUSH
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
22695: PPUSH
22696: PPUSH
// result := [ ] ;
22697: LD_ADDR_VAR 0 2
22701: PUSH
22702: EMPTY
22703: ST_TO_ADDR
// if campaign_id = 1 then
22704: LD_OWVAR 69
22708: PUSH
22709: LD_INT 1
22711: EQUAL
22712: IFFALSE 25878
// begin case mission_number of 1 :
22714: LD_OWVAR 70
22718: PUSH
22719: LD_INT 1
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22727
22725: GO 22803
22727: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22728: LD_ADDR_VAR 0 2
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: LD_INT 4
22738: PUSH
22739: LD_INT 11
22741: PUSH
22742: LD_INT 12
22744: PUSH
22745: LD_INT 15
22747: PUSH
22748: LD_INT 16
22750: PUSH
22751: LD_INT 22
22753: PUSH
22754: LD_INT 23
22756: PUSH
22757: LD_INT 26
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 101
22773: PUSH
22774: LD_INT 102
22776: PUSH
22777: LD_INT 106
22779: PUSH
22780: LD_INT 116
22782: PUSH
22783: LD_INT 117
22785: PUSH
22786: LD_INT 118
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: ST_TO_ADDR
22801: GO 25876
22803: LD_INT 2
22805: DOUBLE
22806: EQUAL
22807: IFTRUE 22811
22809: GO 22895
22811: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22812: LD_ADDR_VAR 0 2
22816: PUSH
22817: LD_INT 2
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 11
22825: PUSH
22826: LD_INT 12
22828: PUSH
22829: LD_INT 15
22831: PUSH
22832: LD_INT 16
22834: PUSH
22835: LD_INT 22
22837: PUSH
22838: LD_INT 23
22840: PUSH
22841: LD_INT 26
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 101
22857: PUSH
22858: LD_INT 102
22860: PUSH
22861: LD_INT 105
22863: PUSH
22864: LD_INT 106
22866: PUSH
22867: LD_INT 108
22869: PUSH
22870: LD_INT 116
22872: PUSH
22873: LD_INT 117
22875: PUSH
22876: LD_INT 118
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: ST_TO_ADDR
22893: GO 25876
22895: LD_INT 3
22897: DOUBLE
22898: EQUAL
22899: IFTRUE 22903
22901: GO 22991
22903: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22904: LD_ADDR_VAR 0 2
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: LD_INT 4
22914: PUSH
22915: LD_INT 5
22917: PUSH
22918: LD_INT 11
22920: PUSH
22921: LD_INT 12
22923: PUSH
22924: LD_INT 15
22926: PUSH
22927: LD_INT 16
22929: PUSH
22930: LD_INT 22
22932: PUSH
22933: LD_INT 26
22935: PUSH
22936: LD_INT 36
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 101
22953: PUSH
22954: LD_INT 102
22956: PUSH
22957: LD_INT 105
22959: PUSH
22960: LD_INT 106
22962: PUSH
22963: LD_INT 108
22965: PUSH
22966: LD_INT 116
22968: PUSH
22969: LD_INT 117
22971: PUSH
22972: LD_INT 118
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: ST_TO_ADDR
22989: GO 25876
22991: LD_INT 4
22993: DOUBLE
22994: EQUAL
22995: IFTRUE 22999
22997: GO 23095
22999: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23000: LD_ADDR_VAR 0 2
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 4
23010: PUSH
23011: LD_INT 5
23013: PUSH
23014: LD_INT 8
23016: PUSH
23017: LD_INT 11
23019: PUSH
23020: LD_INT 12
23022: PUSH
23023: LD_INT 15
23025: PUSH
23026: LD_INT 16
23028: PUSH
23029: LD_INT 22
23031: PUSH
23032: LD_INT 23
23034: PUSH
23035: LD_INT 26
23037: PUSH
23038: LD_INT 36
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 101
23057: PUSH
23058: LD_INT 102
23060: PUSH
23061: LD_INT 105
23063: PUSH
23064: LD_INT 106
23066: PUSH
23067: LD_INT 108
23069: PUSH
23070: LD_INT 116
23072: PUSH
23073: LD_INT 117
23075: PUSH
23076: LD_INT 118
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: ST_TO_ADDR
23093: GO 25876
23095: LD_INT 5
23097: DOUBLE
23098: EQUAL
23099: IFTRUE 23103
23101: GO 23215
23103: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23104: LD_ADDR_VAR 0 2
23108: PUSH
23109: LD_INT 2
23111: PUSH
23112: LD_INT 4
23114: PUSH
23115: LD_INT 5
23117: PUSH
23118: LD_INT 6
23120: PUSH
23121: LD_INT 8
23123: PUSH
23124: LD_INT 11
23126: PUSH
23127: LD_INT 12
23129: PUSH
23130: LD_INT 15
23132: PUSH
23133: LD_INT 16
23135: PUSH
23136: LD_INT 22
23138: PUSH
23139: LD_INT 23
23141: PUSH
23142: LD_INT 25
23144: PUSH
23145: LD_INT 26
23147: PUSH
23148: LD_INT 36
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 101
23169: PUSH
23170: LD_INT 102
23172: PUSH
23173: LD_INT 105
23175: PUSH
23176: LD_INT 106
23178: PUSH
23179: LD_INT 108
23181: PUSH
23182: LD_INT 109
23184: PUSH
23185: LD_INT 112
23187: PUSH
23188: LD_INT 116
23190: PUSH
23191: LD_INT 117
23193: PUSH
23194: LD_INT 118
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: ST_TO_ADDR
23213: GO 25876
23215: LD_INT 6
23217: DOUBLE
23218: EQUAL
23219: IFTRUE 23223
23221: GO 23355
23223: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23224: LD_ADDR_VAR 0 2
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: LD_INT 4
23234: PUSH
23235: LD_INT 5
23237: PUSH
23238: LD_INT 6
23240: PUSH
23241: LD_INT 8
23243: PUSH
23244: LD_INT 11
23246: PUSH
23247: LD_INT 12
23249: PUSH
23250: LD_INT 15
23252: PUSH
23253: LD_INT 16
23255: PUSH
23256: LD_INT 20
23258: PUSH
23259: LD_INT 21
23261: PUSH
23262: LD_INT 22
23264: PUSH
23265: LD_INT 23
23267: PUSH
23268: LD_INT 25
23270: PUSH
23271: LD_INT 26
23273: PUSH
23274: LD_INT 30
23276: PUSH
23277: LD_INT 31
23279: PUSH
23280: LD_INT 32
23282: PUSH
23283: LD_INT 36
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 101
23309: PUSH
23310: LD_INT 102
23312: PUSH
23313: LD_INT 105
23315: PUSH
23316: LD_INT 106
23318: PUSH
23319: LD_INT 108
23321: PUSH
23322: LD_INT 109
23324: PUSH
23325: LD_INT 112
23327: PUSH
23328: LD_INT 116
23330: PUSH
23331: LD_INT 117
23333: PUSH
23334: LD_INT 118
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: ST_TO_ADDR
23353: GO 25876
23355: LD_INT 7
23357: DOUBLE
23358: EQUAL
23359: IFTRUE 23363
23361: GO 23475
23363: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 4
23374: PUSH
23375: LD_INT 5
23377: PUSH
23378: LD_INT 7
23380: PUSH
23381: LD_INT 11
23383: PUSH
23384: LD_INT 12
23386: PUSH
23387: LD_INT 15
23389: PUSH
23390: LD_INT 16
23392: PUSH
23393: LD_INT 20
23395: PUSH
23396: LD_INT 21
23398: PUSH
23399: LD_INT 22
23401: PUSH
23402: LD_INT 23
23404: PUSH
23405: LD_INT 25
23407: PUSH
23408: LD_INT 26
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 101
23429: PUSH
23430: LD_INT 102
23432: PUSH
23433: LD_INT 103
23435: PUSH
23436: LD_INT 105
23438: PUSH
23439: LD_INT 106
23441: PUSH
23442: LD_INT 108
23444: PUSH
23445: LD_INT 112
23447: PUSH
23448: LD_INT 116
23450: PUSH
23451: LD_INT 117
23453: PUSH
23454: LD_INT 118
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: ST_TO_ADDR
23473: GO 25876
23475: LD_INT 8
23477: DOUBLE
23478: EQUAL
23479: IFTRUE 23483
23481: GO 23623
23483: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23484: LD_ADDR_VAR 0 2
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: LD_INT 4
23494: PUSH
23495: LD_INT 5
23497: PUSH
23498: LD_INT 6
23500: PUSH
23501: LD_INT 7
23503: PUSH
23504: LD_INT 8
23506: PUSH
23507: LD_INT 11
23509: PUSH
23510: LD_INT 12
23512: PUSH
23513: LD_INT 15
23515: PUSH
23516: LD_INT 16
23518: PUSH
23519: LD_INT 20
23521: PUSH
23522: LD_INT 21
23524: PUSH
23525: LD_INT 22
23527: PUSH
23528: LD_INT 23
23530: PUSH
23531: LD_INT 25
23533: PUSH
23534: LD_INT 26
23536: PUSH
23537: LD_INT 30
23539: PUSH
23540: LD_INT 31
23542: PUSH
23543: LD_INT 32
23545: PUSH
23546: LD_INT 36
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 101
23573: PUSH
23574: LD_INT 102
23576: PUSH
23577: LD_INT 103
23579: PUSH
23580: LD_INT 105
23582: PUSH
23583: LD_INT 106
23585: PUSH
23586: LD_INT 108
23588: PUSH
23589: LD_INT 109
23591: PUSH
23592: LD_INT 112
23594: PUSH
23595: LD_INT 116
23597: PUSH
23598: LD_INT 117
23600: PUSH
23601: LD_INT 118
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: ST_TO_ADDR
23621: GO 25876
23623: LD_INT 9
23625: DOUBLE
23626: EQUAL
23627: IFTRUE 23631
23629: GO 23779
23631: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23632: LD_ADDR_VAR 0 2
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 4
23642: PUSH
23643: LD_INT 5
23645: PUSH
23646: LD_INT 6
23648: PUSH
23649: LD_INT 7
23651: PUSH
23652: LD_INT 8
23654: PUSH
23655: LD_INT 11
23657: PUSH
23658: LD_INT 12
23660: PUSH
23661: LD_INT 15
23663: PUSH
23664: LD_INT 16
23666: PUSH
23667: LD_INT 20
23669: PUSH
23670: LD_INT 21
23672: PUSH
23673: LD_INT 22
23675: PUSH
23676: LD_INT 23
23678: PUSH
23679: LD_INT 25
23681: PUSH
23682: LD_INT 26
23684: PUSH
23685: LD_INT 28
23687: PUSH
23688: LD_INT 30
23690: PUSH
23691: LD_INT 31
23693: PUSH
23694: LD_INT 32
23696: PUSH
23697: LD_INT 36
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 101
23725: PUSH
23726: LD_INT 102
23728: PUSH
23729: LD_INT 103
23731: PUSH
23732: LD_INT 105
23734: PUSH
23735: LD_INT 106
23737: PUSH
23738: LD_INT 108
23740: PUSH
23741: LD_INT 109
23743: PUSH
23744: LD_INT 112
23746: PUSH
23747: LD_INT 114
23749: PUSH
23750: LD_INT 116
23752: PUSH
23753: LD_INT 117
23755: PUSH
23756: LD_INT 118
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: ST_TO_ADDR
23777: GO 25876
23779: LD_INT 10
23781: DOUBLE
23782: EQUAL
23783: IFTRUE 23787
23785: GO 23983
23787: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23788: LD_ADDR_VAR 0 2
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: LD_INT 4
23798: PUSH
23799: LD_INT 5
23801: PUSH
23802: LD_INT 6
23804: PUSH
23805: LD_INT 7
23807: PUSH
23808: LD_INT 8
23810: PUSH
23811: LD_INT 9
23813: PUSH
23814: LD_INT 10
23816: PUSH
23817: LD_INT 11
23819: PUSH
23820: LD_INT 12
23822: PUSH
23823: LD_INT 13
23825: PUSH
23826: LD_INT 14
23828: PUSH
23829: LD_INT 15
23831: PUSH
23832: LD_INT 16
23834: PUSH
23835: LD_INT 17
23837: PUSH
23838: LD_INT 18
23840: PUSH
23841: LD_INT 19
23843: PUSH
23844: LD_INT 20
23846: PUSH
23847: LD_INT 21
23849: PUSH
23850: LD_INT 22
23852: PUSH
23853: LD_INT 23
23855: PUSH
23856: LD_INT 24
23858: PUSH
23859: LD_INT 25
23861: PUSH
23862: LD_INT 26
23864: PUSH
23865: LD_INT 28
23867: PUSH
23868: LD_INT 30
23870: PUSH
23871: LD_INT 31
23873: PUSH
23874: LD_INT 32
23876: PUSH
23877: LD_INT 36
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 101
23913: PUSH
23914: LD_INT 102
23916: PUSH
23917: LD_INT 103
23919: PUSH
23920: LD_INT 104
23922: PUSH
23923: LD_INT 105
23925: PUSH
23926: LD_INT 106
23928: PUSH
23929: LD_INT 107
23931: PUSH
23932: LD_INT 108
23934: PUSH
23935: LD_INT 109
23937: PUSH
23938: LD_INT 110
23940: PUSH
23941: LD_INT 111
23943: PUSH
23944: LD_INT 112
23946: PUSH
23947: LD_INT 114
23949: PUSH
23950: LD_INT 116
23952: PUSH
23953: LD_INT 117
23955: PUSH
23956: LD_INT 118
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: ST_TO_ADDR
23981: GO 25876
23983: LD_INT 11
23985: DOUBLE
23986: EQUAL
23987: IFTRUE 23991
23989: GO 24195
23991: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23992: LD_ADDR_VAR 0 2
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: LD_INT 4
24005: PUSH
24006: LD_INT 5
24008: PUSH
24009: LD_INT 6
24011: PUSH
24012: LD_INT 7
24014: PUSH
24015: LD_INT 8
24017: PUSH
24018: LD_INT 9
24020: PUSH
24021: LD_INT 10
24023: PUSH
24024: LD_INT 11
24026: PUSH
24027: LD_INT 12
24029: PUSH
24030: LD_INT 13
24032: PUSH
24033: LD_INT 14
24035: PUSH
24036: LD_INT 15
24038: PUSH
24039: LD_INT 16
24041: PUSH
24042: LD_INT 17
24044: PUSH
24045: LD_INT 18
24047: PUSH
24048: LD_INT 19
24050: PUSH
24051: LD_INT 20
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 22
24059: PUSH
24060: LD_INT 23
24062: PUSH
24063: LD_INT 24
24065: PUSH
24066: LD_INT 25
24068: PUSH
24069: LD_INT 26
24071: PUSH
24072: LD_INT 28
24074: PUSH
24075: LD_INT 30
24077: PUSH
24078: LD_INT 31
24080: PUSH
24081: LD_INT 32
24083: PUSH
24084: LD_INT 34
24086: PUSH
24087: LD_INT 36
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 101
24125: PUSH
24126: LD_INT 102
24128: PUSH
24129: LD_INT 103
24131: PUSH
24132: LD_INT 104
24134: PUSH
24135: LD_INT 105
24137: PUSH
24138: LD_INT 106
24140: PUSH
24141: LD_INT 107
24143: PUSH
24144: LD_INT 108
24146: PUSH
24147: LD_INT 109
24149: PUSH
24150: LD_INT 110
24152: PUSH
24153: LD_INT 111
24155: PUSH
24156: LD_INT 112
24158: PUSH
24159: LD_INT 114
24161: PUSH
24162: LD_INT 116
24164: PUSH
24165: LD_INT 117
24167: PUSH
24168: LD_INT 118
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: ST_TO_ADDR
24193: GO 25876
24195: LD_INT 12
24197: DOUBLE
24198: EQUAL
24199: IFTRUE 24203
24201: GO 24423
24203: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24204: LD_ADDR_VAR 0 2
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 3
24217: PUSH
24218: LD_INT 4
24220: PUSH
24221: LD_INT 5
24223: PUSH
24224: LD_INT 6
24226: PUSH
24227: LD_INT 7
24229: PUSH
24230: LD_INT 8
24232: PUSH
24233: LD_INT 9
24235: PUSH
24236: LD_INT 10
24238: PUSH
24239: LD_INT 11
24241: PUSH
24242: LD_INT 12
24244: PUSH
24245: LD_INT 13
24247: PUSH
24248: LD_INT 14
24250: PUSH
24251: LD_INT 15
24253: PUSH
24254: LD_INT 16
24256: PUSH
24257: LD_INT 17
24259: PUSH
24260: LD_INT 18
24262: PUSH
24263: LD_INT 19
24265: PUSH
24266: LD_INT 20
24268: PUSH
24269: LD_INT 21
24271: PUSH
24272: LD_INT 22
24274: PUSH
24275: LD_INT 23
24277: PUSH
24278: LD_INT 24
24280: PUSH
24281: LD_INT 25
24283: PUSH
24284: LD_INT 26
24286: PUSH
24287: LD_INT 27
24289: PUSH
24290: LD_INT 28
24292: PUSH
24293: LD_INT 30
24295: PUSH
24296: LD_INT 31
24298: PUSH
24299: LD_INT 32
24301: PUSH
24302: LD_INT 33
24304: PUSH
24305: LD_INT 34
24307: PUSH
24308: LD_INT 36
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 101
24349: PUSH
24350: LD_INT 102
24352: PUSH
24353: LD_INT 103
24355: PUSH
24356: LD_INT 104
24358: PUSH
24359: LD_INT 105
24361: PUSH
24362: LD_INT 106
24364: PUSH
24365: LD_INT 107
24367: PUSH
24368: LD_INT 108
24370: PUSH
24371: LD_INT 109
24373: PUSH
24374: LD_INT 110
24376: PUSH
24377: LD_INT 111
24379: PUSH
24380: LD_INT 112
24382: PUSH
24383: LD_INT 113
24385: PUSH
24386: LD_INT 114
24388: PUSH
24389: LD_INT 116
24391: PUSH
24392: LD_INT 117
24394: PUSH
24395: LD_INT 118
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: ST_TO_ADDR
24421: GO 25876
24423: LD_INT 13
24425: DOUBLE
24426: EQUAL
24427: IFTRUE 24431
24429: GO 24639
24431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24432: LD_ADDR_VAR 0 2
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: LD_INT 4
24448: PUSH
24449: LD_INT 5
24451: PUSH
24452: LD_INT 8
24454: PUSH
24455: LD_INT 9
24457: PUSH
24458: LD_INT 10
24460: PUSH
24461: LD_INT 11
24463: PUSH
24464: LD_INT 12
24466: PUSH
24467: LD_INT 14
24469: PUSH
24470: LD_INT 15
24472: PUSH
24473: LD_INT 16
24475: PUSH
24476: LD_INT 17
24478: PUSH
24479: LD_INT 18
24481: PUSH
24482: LD_INT 19
24484: PUSH
24485: LD_INT 20
24487: PUSH
24488: LD_INT 21
24490: PUSH
24491: LD_INT 22
24493: PUSH
24494: LD_INT 23
24496: PUSH
24497: LD_INT 24
24499: PUSH
24500: LD_INT 25
24502: PUSH
24503: LD_INT 26
24505: PUSH
24506: LD_INT 27
24508: PUSH
24509: LD_INT 28
24511: PUSH
24512: LD_INT 30
24514: PUSH
24515: LD_INT 31
24517: PUSH
24518: LD_INT 32
24520: PUSH
24521: LD_INT 33
24523: PUSH
24524: LD_INT 34
24526: PUSH
24527: LD_INT 36
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 101
24565: PUSH
24566: LD_INT 102
24568: PUSH
24569: LD_INT 103
24571: PUSH
24572: LD_INT 104
24574: PUSH
24575: LD_INT 105
24577: PUSH
24578: LD_INT 106
24580: PUSH
24581: LD_INT 107
24583: PUSH
24584: LD_INT 108
24586: PUSH
24587: LD_INT 109
24589: PUSH
24590: LD_INT 110
24592: PUSH
24593: LD_INT 111
24595: PUSH
24596: LD_INT 112
24598: PUSH
24599: LD_INT 113
24601: PUSH
24602: LD_INT 114
24604: PUSH
24605: LD_INT 116
24607: PUSH
24608: LD_INT 117
24610: PUSH
24611: LD_INT 118
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: ST_TO_ADDR
24637: GO 25876
24639: LD_INT 14
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24871
24647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 3
24661: PUSH
24662: LD_INT 4
24664: PUSH
24665: LD_INT 5
24667: PUSH
24668: LD_INT 6
24670: PUSH
24671: LD_INT 7
24673: PUSH
24674: LD_INT 8
24676: PUSH
24677: LD_INT 9
24679: PUSH
24680: LD_INT 10
24682: PUSH
24683: LD_INT 11
24685: PUSH
24686: LD_INT 12
24688: PUSH
24689: LD_INT 13
24691: PUSH
24692: LD_INT 14
24694: PUSH
24695: LD_INT 15
24697: PUSH
24698: LD_INT 16
24700: PUSH
24701: LD_INT 17
24703: PUSH
24704: LD_INT 18
24706: PUSH
24707: LD_INT 19
24709: PUSH
24710: LD_INT 20
24712: PUSH
24713: LD_INT 21
24715: PUSH
24716: LD_INT 22
24718: PUSH
24719: LD_INT 23
24721: PUSH
24722: LD_INT 24
24724: PUSH
24725: LD_INT 25
24727: PUSH
24728: LD_INT 26
24730: PUSH
24731: LD_INT 27
24733: PUSH
24734: LD_INT 28
24736: PUSH
24737: LD_INT 29
24739: PUSH
24740: LD_INT 30
24742: PUSH
24743: LD_INT 31
24745: PUSH
24746: LD_INT 32
24748: PUSH
24749: LD_INT 33
24751: PUSH
24752: LD_INT 34
24754: PUSH
24755: LD_INT 36
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 101
24797: PUSH
24798: LD_INT 102
24800: PUSH
24801: LD_INT 103
24803: PUSH
24804: LD_INT 104
24806: PUSH
24807: LD_INT 105
24809: PUSH
24810: LD_INT 106
24812: PUSH
24813: LD_INT 107
24815: PUSH
24816: LD_INT 108
24818: PUSH
24819: LD_INT 109
24821: PUSH
24822: LD_INT 110
24824: PUSH
24825: LD_INT 111
24827: PUSH
24828: LD_INT 112
24830: PUSH
24831: LD_INT 113
24833: PUSH
24834: LD_INT 114
24836: PUSH
24837: LD_INT 116
24839: PUSH
24840: LD_INT 117
24842: PUSH
24843: LD_INT 118
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: ST_TO_ADDR
24869: GO 25876
24871: LD_INT 15
24873: DOUBLE
24874: EQUAL
24875: IFTRUE 24879
24877: GO 25103
24879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24880: LD_ADDR_VAR 0 2
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: LD_INT 3
24893: PUSH
24894: LD_INT 4
24896: PUSH
24897: LD_INT 5
24899: PUSH
24900: LD_INT 6
24902: PUSH
24903: LD_INT 7
24905: PUSH
24906: LD_INT 8
24908: PUSH
24909: LD_INT 9
24911: PUSH
24912: LD_INT 10
24914: PUSH
24915: LD_INT 11
24917: PUSH
24918: LD_INT 12
24920: PUSH
24921: LD_INT 13
24923: PUSH
24924: LD_INT 14
24926: PUSH
24927: LD_INT 15
24929: PUSH
24930: LD_INT 16
24932: PUSH
24933: LD_INT 17
24935: PUSH
24936: LD_INT 18
24938: PUSH
24939: LD_INT 19
24941: PUSH
24942: LD_INT 20
24944: PUSH
24945: LD_INT 21
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_INT 23
24953: PUSH
24954: LD_INT 24
24956: PUSH
24957: LD_INT 25
24959: PUSH
24960: LD_INT 26
24962: PUSH
24963: LD_INT 27
24965: PUSH
24966: LD_INT 28
24968: PUSH
24969: LD_INT 29
24971: PUSH
24972: LD_INT 30
24974: PUSH
24975: LD_INT 31
24977: PUSH
24978: LD_INT 32
24980: PUSH
24981: LD_INT 33
24983: PUSH
24984: LD_INT 34
24986: PUSH
24987: LD_INT 36
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 101
25029: PUSH
25030: LD_INT 102
25032: PUSH
25033: LD_INT 103
25035: PUSH
25036: LD_INT 104
25038: PUSH
25039: LD_INT 105
25041: PUSH
25042: LD_INT 106
25044: PUSH
25045: LD_INT 107
25047: PUSH
25048: LD_INT 108
25050: PUSH
25051: LD_INT 109
25053: PUSH
25054: LD_INT 110
25056: PUSH
25057: LD_INT 111
25059: PUSH
25060: LD_INT 112
25062: PUSH
25063: LD_INT 113
25065: PUSH
25066: LD_INT 114
25068: PUSH
25069: LD_INT 116
25071: PUSH
25072: LD_INT 117
25074: PUSH
25075: LD_INT 118
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: ST_TO_ADDR
25101: GO 25876
25103: LD_INT 16
25105: DOUBLE
25106: EQUAL
25107: IFTRUE 25111
25109: GO 25247
25111: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25112: LD_ADDR_VAR 0 2
25116: PUSH
25117: LD_INT 2
25119: PUSH
25120: LD_INT 4
25122: PUSH
25123: LD_INT 5
25125: PUSH
25126: LD_INT 7
25128: PUSH
25129: LD_INT 11
25131: PUSH
25132: LD_INT 12
25134: PUSH
25135: LD_INT 15
25137: PUSH
25138: LD_INT 16
25140: PUSH
25141: LD_INT 20
25143: PUSH
25144: LD_INT 21
25146: PUSH
25147: LD_INT 22
25149: PUSH
25150: LD_INT 23
25152: PUSH
25153: LD_INT 25
25155: PUSH
25156: LD_INT 26
25158: PUSH
25159: LD_INT 30
25161: PUSH
25162: LD_INT 31
25164: PUSH
25165: LD_INT 32
25167: PUSH
25168: LD_INT 33
25170: PUSH
25171: LD_INT 34
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 101
25197: PUSH
25198: LD_INT 102
25200: PUSH
25201: LD_INT 103
25203: PUSH
25204: LD_INT 106
25206: PUSH
25207: LD_INT 108
25209: PUSH
25210: LD_INT 112
25212: PUSH
25213: LD_INT 113
25215: PUSH
25216: LD_INT 114
25218: PUSH
25219: LD_INT 116
25221: PUSH
25222: LD_INT 117
25224: PUSH
25225: LD_INT 118
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: ST_TO_ADDR
25245: GO 25876
25247: LD_INT 17
25249: DOUBLE
25250: EQUAL
25251: IFTRUE 25255
25253: GO 25479
25255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25256: LD_ADDR_VAR 0 2
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: LD_INT 4
25272: PUSH
25273: LD_INT 5
25275: PUSH
25276: LD_INT 6
25278: PUSH
25279: LD_INT 7
25281: PUSH
25282: LD_INT 8
25284: PUSH
25285: LD_INT 9
25287: PUSH
25288: LD_INT 10
25290: PUSH
25291: LD_INT 11
25293: PUSH
25294: LD_INT 12
25296: PUSH
25297: LD_INT 13
25299: PUSH
25300: LD_INT 14
25302: PUSH
25303: LD_INT 15
25305: PUSH
25306: LD_INT 16
25308: PUSH
25309: LD_INT 17
25311: PUSH
25312: LD_INT 18
25314: PUSH
25315: LD_INT 19
25317: PUSH
25318: LD_INT 20
25320: PUSH
25321: LD_INT 21
25323: PUSH
25324: LD_INT 22
25326: PUSH
25327: LD_INT 23
25329: PUSH
25330: LD_INT 24
25332: PUSH
25333: LD_INT 25
25335: PUSH
25336: LD_INT 26
25338: PUSH
25339: LD_INT 27
25341: PUSH
25342: LD_INT 28
25344: PUSH
25345: LD_INT 29
25347: PUSH
25348: LD_INT 30
25350: PUSH
25351: LD_INT 31
25353: PUSH
25354: LD_INT 32
25356: PUSH
25357: LD_INT 33
25359: PUSH
25360: LD_INT 34
25362: PUSH
25363: LD_INT 36
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 101
25405: PUSH
25406: LD_INT 102
25408: PUSH
25409: LD_INT 103
25411: PUSH
25412: LD_INT 104
25414: PUSH
25415: LD_INT 105
25417: PUSH
25418: LD_INT 106
25420: PUSH
25421: LD_INT 107
25423: PUSH
25424: LD_INT 108
25426: PUSH
25427: LD_INT 109
25429: PUSH
25430: LD_INT 110
25432: PUSH
25433: LD_INT 111
25435: PUSH
25436: LD_INT 112
25438: PUSH
25439: LD_INT 113
25441: PUSH
25442: LD_INT 114
25444: PUSH
25445: LD_INT 116
25447: PUSH
25448: LD_INT 117
25450: PUSH
25451: LD_INT 118
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: ST_TO_ADDR
25477: GO 25876
25479: LD_INT 18
25481: DOUBLE
25482: EQUAL
25483: IFTRUE 25487
25485: GO 25635
25487: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25488: LD_ADDR_VAR 0 2
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: LD_INT 4
25498: PUSH
25499: LD_INT 5
25501: PUSH
25502: LD_INT 7
25504: PUSH
25505: LD_INT 11
25507: PUSH
25508: LD_INT 12
25510: PUSH
25511: LD_INT 15
25513: PUSH
25514: LD_INT 16
25516: PUSH
25517: LD_INT 20
25519: PUSH
25520: LD_INT 21
25522: PUSH
25523: LD_INT 22
25525: PUSH
25526: LD_INT 23
25528: PUSH
25529: LD_INT 25
25531: PUSH
25532: LD_INT 26
25534: PUSH
25535: LD_INT 30
25537: PUSH
25538: LD_INT 31
25540: PUSH
25541: LD_INT 32
25543: PUSH
25544: LD_INT 33
25546: PUSH
25547: LD_INT 34
25549: PUSH
25550: LD_INT 35
25552: PUSH
25553: LD_INT 36
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 101
25581: PUSH
25582: LD_INT 102
25584: PUSH
25585: LD_INT 103
25587: PUSH
25588: LD_INT 106
25590: PUSH
25591: LD_INT 108
25593: PUSH
25594: LD_INT 112
25596: PUSH
25597: LD_INT 113
25599: PUSH
25600: LD_INT 114
25602: PUSH
25603: LD_INT 115
25605: PUSH
25606: LD_INT 116
25608: PUSH
25609: LD_INT 117
25611: PUSH
25612: LD_INT 118
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: ST_TO_ADDR
25633: GO 25876
25635: LD_INT 19
25637: DOUBLE
25638: EQUAL
25639: IFTRUE 25643
25641: GO 25875
25643: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25644: LD_ADDR_VAR 0 2
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: LD_INT 3
25657: PUSH
25658: LD_INT 4
25660: PUSH
25661: LD_INT 5
25663: PUSH
25664: LD_INT 6
25666: PUSH
25667: LD_INT 7
25669: PUSH
25670: LD_INT 8
25672: PUSH
25673: LD_INT 9
25675: PUSH
25676: LD_INT 10
25678: PUSH
25679: LD_INT 11
25681: PUSH
25682: LD_INT 12
25684: PUSH
25685: LD_INT 13
25687: PUSH
25688: LD_INT 14
25690: PUSH
25691: LD_INT 15
25693: PUSH
25694: LD_INT 16
25696: PUSH
25697: LD_INT 17
25699: PUSH
25700: LD_INT 18
25702: PUSH
25703: LD_INT 19
25705: PUSH
25706: LD_INT 20
25708: PUSH
25709: LD_INT 21
25711: PUSH
25712: LD_INT 22
25714: PUSH
25715: LD_INT 23
25717: PUSH
25718: LD_INT 24
25720: PUSH
25721: LD_INT 25
25723: PUSH
25724: LD_INT 26
25726: PUSH
25727: LD_INT 27
25729: PUSH
25730: LD_INT 28
25732: PUSH
25733: LD_INT 29
25735: PUSH
25736: LD_INT 30
25738: PUSH
25739: LD_INT 31
25741: PUSH
25742: LD_INT 32
25744: PUSH
25745: LD_INT 33
25747: PUSH
25748: LD_INT 34
25750: PUSH
25751: LD_INT 35
25753: PUSH
25754: LD_INT 36
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 101
25797: PUSH
25798: LD_INT 102
25800: PUSH
25801: LD_INT 103
25803: PUSH
25804: LD_INT 104
25806: PUSH
25807: LD_INT 105
25809: PUSH
25810: LD_INT 106
25812: PUSH
25813: LD_INT 107
25815: PUSH
25816: LD_INT 108
25818: PUSH
25819: LD_INT 109
25821: PUSH
25822: LD_INT 110
25824: PUSH
25825: LD_INT 111
25827: PUSH
25828: LD_INT 112
25830: PUSH
25831: LD_INT 113
25833: PUSH
25834: LD_INT 114
25836: PUSH
25837: LD_INT 115
25839: PUSH
25840: LD_INT 116
25842: PUSH
25843: LD_INT 117
25845: PUSH
25846: LD_INT 118
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: ST_TO_ADDR
25873: GO 25876
25875: POP
// end else
25876: GO 26107
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25878: LD_ADDR_VAR 0 2
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 3
25891: PUSH
25892: LD_INT 4
25894: PUSH
25895: LD_INT 5
25897: PUSH
25898: LD_INT 6
25900: PUSH
25901: LD_INT 7
25903: PUSH
25904: LD_INT 8
25906: PUSH
25907: LD_INT 9
25909: PUSH
25910: LD_INT 10
25912: PUSH
25913: LD_INT 11
25915: PUSH
25916: LD_INT 12
25918: PUSH
25919: LD_INT 13
25921: PUSH
25922: LD_INT 14
25924: PUSH
25925: LD_INT 15
25927: PUSH
25928: LD_INT 16
25930: PUSH
25931: LD_INT 17
25933: PUSH
25934: LD_INT 18
25936: PUSH
25937: LD_INT 19
25939: PUSH
25940: LD_INT 20
25942: PUSH
25943: LD_INT 21
25945: PUSH
25946: LD_INT 22
25948: PUSH
25949: LD_INT 23
25951: PUSH
25952: LD_INT 24
25954: PUSH
25955: LD_INT 25
25957: PUSH
25958: LD_INT 26
25960: PUSH
25961: LD_INT 27
25963: PUSH
25964: LD_INT 28
25966: PUSH
25967: LD_INT 29
25969: PUSH
25970: LD_INT 30
25972: PUSH
25973: LD_INT 31
25975: PUSH
25976: LD_INT 32
25978: PUSH
25979: LD_INT 33
25981: PUSH
25982: LD_INT 34
25984: PUSH
25985: LD_INT 35
25987: PUSH
25988: LD_INT 36
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 101
26031: PUSH
26032: LD_INT 102
26034: PUSH
26035: LD_INT 103
26037: PUSH
26038: LD_INT 104
26040: PUSH
26041: LD_INT 105
26043: PUSH
26044: LD_INT 106
26046: PUSH
26047: LD_INT 107
26049: PUSH
26050: LD_INT 108
26052: PUSH
26053: LD_INT 109
26055: PUSH
26056: LD_INT 110
26058: PUSH
26059: LD_INT 111
26061: PUSH
26062: LD_INT 112
26064: PUSH
26065: LD_INT 113
26067: PUSH
26068: LD_INT 114
26070: PUSH
26071: LD_INT 115
26073: PUSH
26074: LD_INT 116
26076: PUSH
26077: LD_INT 117
26079: PUSH
26080: LD_INT 118
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: ST_TO_ADDR
// if result then
26107: LD_VAR 0 2
26111: IFFALSE 26897
// begin normal :=  ;
26113: LD_ADDR_VAR 0 5
26117: PUSH
26118: LD_STRING 
26120: ST_TO_ADDR
// hardcore :=  ;
26121: LD_ADDR_VAR 0 6
26125: PUSH
26126: LD_STRING 
26128: ST_TO_ADDR
// active :=  ;
26129: LD_ADDR_VAR 0 7
26133: PUSH
26134: LD_STRING 
26136: ST_TO_ADDR
// for i = 1 to normalCounter do
26137: LD_ADDR_VAR 0 8
26141: PUSH
26142: DOUBLE
26143: LD_INT 1
26145: DEC
26146: ST_TO_ADDR
26147: LD_EXP 50
26151: PUSH
26152: FOR_TO
26153: IFFALSE 26254
// begin tmp := 0 ;
26155: LD_ADDR_VAR 0 3
26159: PUSH
26160: LD_STRING 0
26162: ST_TO_ADDR
// if result [ 1 ] then
26163: LD_VAR 0 2
26167: PUSH
26168: LD_INT 1
26170: ARRAY
26171: IFFALSE 26236
// if result [ 1 ] [ 1 ] = i then
26173: LD_VAR 0 2
26177: PUSH
26178: LD_INT 1
26180: ARRAY
26181: PUSH
26182: LD_INT 1
26184: ARRAY
26185: PUSH
26186: LD_VAR 0 8
26190: EQUAL
26191: IFFALSE 26236
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26193: LD_ADDR_VAR 0 2
26197: PUSH
26198: LD_VAR 0 2
26202: PPUSH
26203: LD_INT 1
26205: PPUSH
26206: LD_VAR 0 2
26210: PUSH
26211: LD_INT 1
26213: ARRAY
26214: PPUSH
26215: LD_INT 1
26217: PPUSH
26218: CALL_OW 3
26222: PPUSH
26223: CALL_OW 1
26227: ST_TO_ADDR
// tmp := 1 ;
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_STRING 1
26235: ST_TO_ADDR
// end ; normal := normal & tmp ;
26236: LD_ADDR_VAR 0 5
26240: PUSH
26241: LD_VAR 0 5
26245: PUSH
26246: LD_VAR 0 3
26250: STR
26251: ST_TO_ADDR
// end ;
26252: GO 26152
26254: POP
26255: POP
// for i = 1 to hardcoreCounter do
26256: LD_ADDR_VAR 0 8
26260: PUSH
26261: DOUBLE
26262: LD_INT 1
26264: DEC
26265: ST_TO_ADDR
26266: LD_EXP 51
26270: PUSH
26271: FOR_TO
26272: IFFALSE 26377
// begin tmp := 0 ;
26274: LD_ADDR_VAR 0 3
26278: PUSH
26279: LD_STRING 0
26281: ST_TO_ADDR
// if result [ 2 ] then
26282: LD_VAR 0 2
26286: PUSH
26287: LD_INT 2
26289: ARRAY
26290: IFFALSE 26359
// if result [ 2 ] [ 1 ] = 100 + i then
26292: LD_VAR 0 2
26296: PUSH
26297: LD_INT 2
26299: ARRAY
26300: PUSH
26301: LD_INT 1
26303: ARRAY
26304: PUSH
26305: LD_INT 100
26307: PUSH
26308: LD_VAR 0 8
26312: PLUS
26313: EQUAL
26314: IFFALSE 26359
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: LD_VAR 0 2
26325: PPUSH
26326: LD_INT 2
26328: PPUSH
26329: LD_VAR 0 2
26333: PUSH
26334: LD_INT 2
26336: ARRAY
26337: PPUSH
26338: LD_INT 1
26340: PPUSH
26341: CALL_OW 3
26345: PPUSH
26346: CALL_OW 1
26350: ST_TO_ADDR
// tmp := 1 ;
26351: LD_ADDR_VAR 0 3
26355: PUSH
26356: LD_STRING 1
26358: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26359: LD_ADDR_VAR 0 6
26363: PUSH
26364: LD_VAR 0 6
26368: PUSH
26369: LD_VAR 0 3
26373: STR
26374: ST_TO_ADDR
// end ;
26375: GO 26271
26377: POP
26378: POP
// if isGameLoad then
26379: LD_VAR 0 1
26383: IFFALSE 26858
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26385: LD_ADDR_VAR 0 4
26389: PUSH
26390: LD_EXP 54
26394: PUSH
26395: LD_EXP 53
26399: PUSH
26400: LD_EXP 55
26404: PUSH
26405: LD_EXP 52
26409: PUSH
26410: LD_EXP 56
26414: PUSH
26415: LD_EXP 57
26419: PUSH
26420: LD_EXP 58
26424: PUSH
26425: LD_EXP 59
26429: PUSH
26430: LD_EXP 60
26434: PUSH
26435: LD_EXP 61
26439: PUSH
26440: LD_EXP 62
26444: PUSH
26445: LD_EXP 63
26449: PUSH
26450: LD_EXP 64
26454: PUSH
26455: LD_EXP 65
26459: PUSH
26460: LD_EXP 73
26464: PUSH
26465: LD_EXP 74
26469: PUSH
26470: LD_EXP 75
26474: PUSH
26475: LD_EXP 76
26479: PUSH
26480: LD_EXP 78
26484: PUSH
26485: LD_EXP 79
26489: PUSH
26490: LD_EXP 80
26494: PUSH
26495: LD_EXP 83
26499: PUSH
26500: LD_EXP 85
26504: PUSH
26505: LD_EXP 86
26509: PUSH
26510: LD_EXP 87
26514: PUSH
26515: LD_EXP 89
26519: PUSH
26520: LD_EXP 90
26524: PUSH
26525: LD_EXP 93
26529: PUSH
26530: LD_EXP 94
26534: PUSH
26535: LD_EXP 95
26539: PUSH
26540: LD_EXP 96
26544: PUSH
26545: LD_EXP 97
26549: PUSH
26550: LD_EXP 98
26554: PUSH
26555: LD_EXP 99
26559: PUSH
26560: LD_EXP 100
26564: PUSH
26565: LD_EXP 101
26569: PUSH
26570: LD_EXP 66
26574: PUSH
26575: LD_EXP 67
26579: PUSH
26580: LD_EXP 70
26584: PUSH
26585: LD_EXP 71
26589: PUSH
26590: LD_EXP 72
26594: PUSH
26595: LD_EXP 68
26599: PUSH
26600: LD_EXP 69
26604: PUSH
26605: LD_EXP 77
26609: PUSH
26610: LD_EXP 81
26614: PUSH
26615: LD_EXP 82
26619: PUSH
26620: LD_EXP 84
26624: PUSH
26625: LD_EXP 88
26629: PUSH
26630: LD_EXP 91
26634: PUSH
26635: LD_EXP 92
26639: PUSH
26640: LD_EXP 102
26644: PUSH
26645: LD_EXP 103
26649: PUSH
26650: LD_EXP 104
26654: PUSH
26655: LD_EXP 105
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: ST_TO_ADDR
// tmp :=  ;
26716: LD_ADDR_VAR 0 3
26720: PUSH
26721: LD_STRING 
26723: ST_TO_ADDR
// for i = 1 to normalCounter do
26724: LD_ADDR_VAR 0 8
26728: PUSH
26729: DOUBLE
26730: LD_INT 1
26732: DEC
26733: ST_TO_ADDR
26734: LD_EXP 50
26738: PUSH
26739: FOR_TO
26740: IFFALSE 26776
// begin if flags [ i ] then
26742: LD_VAR 0 4
26746: PUSH
26747: LD_VAR 0 8
26751: ARRAY
26752: IFFALSE 26774
// tmp := tmp & i & ; ;
26754: LD_ADDR_VAR 0 3
26758: PUSH
26759: LD_VAR 0 3
26763: PUSH
26764: LD_VAR 0 8
26768: STR
26769: PUSH
26770: LD_STRING ;
26772: STR
26773: ST_TO_ADDR
// end ;
26774: GO 26739
26776: POP
26777: POP
// for i = 1 to hardcoreCounter do
26778: LD_ADDR_VAR 0 8
26782: PUSH
26783: DOUBLE
26784: LD_INT 1
26786: DEC
26787: ST_TO_ADDR
26788: LD_EXP 51
26792: PUSH
26793: FOR_TO
26794: IFFALSE 26840
// begin if flags [ normalCounter + i ] then
26796: LD_VAR 0 4
26800: PUSH
26801: LD_EXP 50
26805: PUSH
26806: LD_VAR 0 8
26810: PLUS
26811: ARRAY
26812: IFFALSE 26838
// tmp := tmp & ( 100 + i ) & ; ;
26814: LD_ADDR_VAR 0 3
26818: PUSH
26819: LD_VAR 0 3
26823: PUSH
26824: LD_INT 100
26826: PUSH
26827: LD_VAR 0 8
26831: PLUS
26832: STR
26833: PUSH
26834: LD_STRING ;
26836: STR
26837: ST_TO_ADDR
// end ;
26838: GO 26793
26840: POP
26841: POP
// if tmp then
26842: LD_VAR 0 3
26846: IFFALSE 26858
// active := tmp ;
26848: LD_ADDR_VAR 0 7
26852: PUSH
26853: LD_VAR 0 3
26857: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26858: LD_STRING getStreamItemsFromMission("
26860: PUSH
26861: LD_VAR 0 5
26865: STR
26866: PUSH
26867: LD_STRING ","
26869: STR
26870: PUSH
26871: LD_VAR 0 6
26875: STR
26876: PUSH
26877: LD_STRING ","
26879: STR
26880: PUSH
26881: LD_VAR 0 7
26885: STR
26886: PUSH
26887: LD_STRING ")
26889: STR
26890: PPUSH
26891: CALL_OW 559
// end else
26895: GO 26904
// ToLua ( getStreamItemsFromMission("","","") ) ;
26897: LD_STRING getStreamItemsFromMission("","","")
26899: PPUSH
26900: CALL_OW 559
// end ;
26904: LD_VAR 0 2
26908: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26909: LD_EXP 49
26913: PUSH
26914: LD_EXP 54
26918: AND
26919: IFFALSE 27043
26921: GO 26923
26923: DISABLE
26924: LD_INT 0
26926: PPUSH
26927: PPUSH
// begin enable ;
26928: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26929: LD_ADDR_VAR 0 2
26933: PUSH
26934: LD_INT 22
26936: PUSH
26937: LD_OWVAR 2
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: LD_INT 34
26951: PUSH
26952: LD_INT 7
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 34
26961: PUSH
26962: LD_INT 45
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 34
26971: PUSH
26972: LD_INT 28
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 34
26981: PUSH
26982: LD_INT 47
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PPUSH
27000: CALL_OW 69
27004: ST_TO_ADDR
// if not tmp then
27005: LD_VAR 0 2
27009: NOT
27010: IFFALSE 27014
// exit ;
27012: GO 27043
// for i in tmp do
27014: LD_ADDR_VAR 0 1
27018: PUSH
27019: LD_VAR 0 2
27023: PUSH
27024: FOR_IN
27025: IFFALSE 27041
// begin SetLives ( i , 0 ) ;
27027: LD_VAR 0 1
27031: PPUSH
27032: LD_INT 0
27034: PPUSH
27035: CALL_OW 234
// end ;
27039: GO 27024
27041: POP
27042: POP
// end ;
27043: PPOPN 2
27045: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27046: LD_EXP 49
27050: PUSH
27051: LD_EXP 55
27055: AND
27056: IFFALSE 27140
27058: GO 27060
27060: DISABLE
27061: LD_INT 0
27063: PPUSH
27064: PPUSH
// begin enable ;
27065: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27066: LD_ADDR_VAR 0 2
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_OWVAR 2
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 32
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PPUSH
27097: CALL_OW 69
27101: ST_TO_ADDR
// if not tmp then
27102: LD_VAR 0 2
27106: NOT
27107: IFFALSE 27111
// exit ;
27109: GO 27140
// for i in tmp do
27111: LD_ADDR_VAR 0 1
27115: PUSH
27116: LD_VAR 0 2
27120: PUSH
27121: FOR_IN
27122: IFFALSE 27138
// begin SetLives ( i , 0 ) ;
27124: LD_VAR 0 1
27128: PPUSH
27129: LD_INT 0
27131: PPUSH
27132: CALL_OW 234
// end ;
27136: GO 27121
27138: POP
27139: POP
// end ;
27140: PPOPN 2
27142: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27143: LD_EXP 49
27147: PUSH
27148: LD_EXP 52
27152: AND
27153: IFFALSE 27246
27155: GO 27157
27157: DISABLE
27158: LD_INT 0
27160: PPUSH
// begin enable ;
27161: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27162: LD_ADDR_VAR 0 1
27166: PUSH
27167: LD_INT 22
27169: PUSH
27170: LD_OWVAR 2
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: LD_INT 25
27184: PUSH
27185: LD_INT 5
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 25
27194: PUSH
27195: LD_INT 9
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 25
27204: PUSH
27205: LD_INT 8
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PPUSH
27222: CALL_OW 69
27226: PUSH
27227: FOR_IN
27228: IFFALSE 27244
// begin SetClass ( i , 1 ) ;
27230: LD_VAR 0 1
27234: PPUSH
27235: LD_INT 1
27237: PPUSH
27238: CALL_OW 336
// end ;
27242: GO 27227
27244: POP
27245: POP
// end ;
27246: PPOPN 1
27248: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27249: LD_EXP 49
27253: PUSH
27254: LD_EXP 53
27258: AND
27259: PUSH
27260: LD_OWVAR 65
27264: PUSH
27265: LD_INT 7
27267: LESS
27268: AND
27269: IFFALSE 27283
27271: GO 27273
27273: DISABLE
// begin enable ;
27274: ENABLE
// game_speed := 7 ;
27275: LD_ADDR_OWVAR 65
27279: PUSH
27280: LD_INT 7
27282: ST_TO_ADDR
// end ;
27283: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27284: LD_EXP 49
27288: PUSH
27289: LD_EXP 56
27293: AND
27294: IFFALSE 27496
27296: GO 27298
27298: DISABLE
27299: LD_INT 0
27301: PPUSH
27302: PPUSH
27303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27304: LD_ADDR_VAR 0 3
27308: PUSH
27309: LD_INT 81
27311: PUSH
27312: LD_OWVAR 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 21
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PPUSH
27335: CALL_OW 69
27339: ST_TO_ADDR
// if not tmp then
27340: LD_VAR 0 3
27344: NOT
27345: IFFALSE 27349
// exit ;
27347: GO 27496
// if tmp > 5 then
27349: LD_VAR 0 3
27353: PUSH
27354: LD_INT 5
27356: GREATER
27357: IFFALSE 27369
// k := 5 else
27359: LD_ADDR_VAR 0 2
27363: PUSH
27364: LD_INT 5
27366: ST_TO_ADDR
27367: GO 27379
// k := tmp ;
27369: LD_ADDR_VAR 0 2
27373: PUSH
27374: LD_VAR 0 3
27378: ST_TO_ADDR
// for i := 1 to k do
27379: LD_ADDR_VAR 0 1
27383: PUSH
27384: DOUBLE
27385: LD_INT 1
27387: DEC
27388: ST_TO_ADDR
27389: LD_VAR 0 2
27393: PUSH
27394: FOR_TO
27395: IFFALSE 27494
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27397: LD_VAR 0 3
27401: PUSH
27402: LD_VAR 0 1
27406: ARRAY
27407: PPUSH
27408: LD_VAR 0 1
27412: PUSH
27413: LD_INT 4
27415: MOD
27416: PUSH
27417: LD_INT 1
27419: PLUS
27420: PPUSH
27421: CALL_OW 259
27425: PUSH
27426: LD_INT 10
27428: LESS
27429: IFFALSE 27492
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27431: LD_VAR 0 3
27435: PUSH
27436: LD_VAR 0 1
27440: ARRAY
27441: PPUSH
27442: LD_VAR 0 1
27446: PUSH
27447: LD_INT 4
27449: MOD
27450: PUSH
27451: LD_INT 1
27453: PLUS
27454: PPUSH
27455: LD_VAR 0 3
27459: PUSH
27460: LD_VAR 0 1
27464: ARRAY
27465: PPUSH
27466: LD_VAR 0 1
27470: PUSH
27471: LD_INT 4
27473: MOD
27474: PUSH
27475: LD_INT 1
27477: PLUS
27478: PPUSH
27479: CALL_OW 259
27483: PUSH
27484: LD_INT 1
27486: PLUS
27487: PPUSH
27488: CALL_OW 237
27492: GO 27394
27494: POP
27495: POP
// end ;
27496: PPOPN 3
27498: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27499: LD_EXP 49
27503: PUSH
27504: LD_EXP 57
27508: AND
27509: IFFALSE 27529
27511: GO 27513
27513: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27514: LD_INT 4
27516: PPUSH
27517: LD_OWVAR 2
27521: PPUSH
27522: LD_INT 0
27524: PPUSH
27525: CALL_OW 324
27529: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27530: LD_EXP 49
27534: PUSH
27535: LD_EXP 86
27539: AND
27540: IFFALSE 27560
27542: GO 27544
27544: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27545: LD_INT 19
27547: PPUSH
27548: LD_OWVAR 2
27552: PPUSH
27553: LD_INT 0
27555: PPUSH
27556: CALL_OW 324
27560: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27561: LD_EXP 49
27565: PUSH
27566: LD_EXP 58
27570: AND
27571: IFFALSE 27673
27573: GO 27575
27575: DISABLE
27576: LD_INT 0
27578: PPUSH
27579: PPUSH
// begin enable ;
27580: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27581: LD_ADDR_VAR 0 2
27585: PUSH
27586: LD_INT 22
27588: PUSH
27589: LD_OWVAR 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: LD_INT 34
27603: PUSH
27604: LD_INT 11
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 34
27613: PUSH
27614: LD_INT 30
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PPUSH
27630: CALL_OW 69
27634: ST_TO_ADDR
// if not tmp then
27635: LD_VAR 0 2
27639: NOT
27640: IFFALSE 27644
// exit ;
27642: GO 27673
// for i in tmp do
27644: LD_ADDR_VAR 0 1
27648: PUSH
27649: LD_VAR 0 2
27653: PUSH
27654: FOR_IN
27655: IFFALSE 27671
// begin SetLives ( i , 0 ) ;
27657: LD_VAR 0 1
27661: PPUSH
27662: LD_INT 0
27664: PPUSH
27665: CALL_OW 234
// end ;
27669: GO 27654
27671: POP
27672: POP
// end ;
27673: PPOPN 2
27675: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27676: LD_EXP 49
27680: PUSH
27681: LD_EXP 59
27685: AND
27686: IFFALSE 27706
27688: GO 27690
27690: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27691: LD_INT 32
27693: PPUSH
27694: LD_OWVAR 2
27698: PPUSH
27699: LD_INT 0
27701: PPUSH
27702: CALL_OW 324
27706: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27707: LD_EXP 49
27711: PUSH
27712: LD_EXP 60
27716: AND
27717: IFFALSE 27898
27719: GO 27721
27721: DISABLE
27722: LD_INT 0
27724: PPUSH
27725: PPUSH
27726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: LD_INT 22
27734: PUSH
27735: LD_OWVAR 2
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 33
27746: PUSH
27747: LD_INT 3
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PPUSH
27758: CALL_OW 69
27762: ST_TO_ADDR
// if not tmp then
27763: LD_VAR 0 2
27767: NOT
27768: IFFALSE 27772
// exit ;
27770: GO 27898
// side := 0 ;
27772: LD_ADDR_VAR 0 3
27776: PUSH
27777: LD_INT 0
27779: ST_TO_ADDR
// for i := 1 to 8 do
27780: LD_ADDR_VAR 0 1
27784: PUSH
27785: DOUBLE
27786: LD_INT 1
27788: DEC
27789: ST_TO_ADDR
27790: LD_INT 8
27792: PUSH
27793: FOR_TO
27794: IFFALSE 27842
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27796: LD_OWVAR 2
27800: PUSH
27801: LD_VAR 0 1
27805: NONEQUAL
27806: PUSH
27807: LD_OWVAR 2
27811: PPUSH
27812: LD_VAR 0 1
27816: PPUSH
27817: CALL_OW 81
27821: PUSH
27822: LD_INT 2
27824: EQUAL
27825: AND
27826: IFFALSE 27840
// begin side := i ;
27828: LD_ADDR_VAR 0 3
27832: PUSH
27833: LD_VAR 0 1
27837: ST_TO_ADDR
// break ;
27838: GO 27842
// end ;
27840: GO 27793
27842: POP
27843: POP
// if not side then
27844: LD_VAR 0 3
27848: NOT
27849: IFFALSE 27853
// exit ;
27851: GO 27898
// for i := 1 to tmp do
27853: LD_ADDR_VAR 0 1
27857: PUSH
27858: DOUBLE
27859: LD_INT 1
27861: DEC
27862: ST_TO_ADDR
27863: LD_VAR 0 2
27867: PUSH
27868: FOR_TO
27869: IFFALSE 27896
// if Prob ( 60 ) then
27871: LD_INT 60
27873: PPUSH
27874: CALL_OW 13
27878: IFFALSE 27894
// SetSide ( i , side ) ;
27880: LD_VAR 0 1
27884: PPUSH
27885: LD_VAR 0 3
27889: PPUSH
27890: CALL_OW 235
27894: GO 27868
27896: POP
27897: POP
// end ;
27898: PPOPN 3
27900: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27901: LD_EXP 49
27905: PUSH
27906: LD_EXP 62
27910: AND
27911: IFFALSE 28030
27913: GO 27915
27915: DISABLE
27916: LD_INT 0
27918: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27919: LD_ADDR_VAR 0 1
27923: PUSH
27924: LD_INT 22
27926: PUSH
27927: LD_OWVAR 2
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 21
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 3
27948: PUSH
27949: LD_INT 23
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: LIST
27967: PPUSH
27968: CALL_OW 69
27972: PUSH
27973: FOR_IN
27974: IFFALSE 28028
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 257
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: LD_INT 2
27991: PUSH
27992: LD_INT 3
27994: PUSH
27995: LD_INT 4
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: IN
28004: IFFALSE 28026
// SetClass ( un , rand ( 1 , 4 ) ) ;
28006: LD_VAR 0 1
28010: PPUSH
28011: LD_INT 1
28013: PPUSH
28014: LD_INT 4
28016: PPUSH
28017: CALL_OW 12
28021: PPUSH
28022: CALL_OW 336
28026: GO 27973
28028: POP
28029: POP
// end ;
28030: PPOPN 1
28032: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28033: LD_EXP 49
28037: PUSH
28038: LD_EXP 61
28042: AND
28043: IFFALSE 28122
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28051: LD_ADDR_VAR 0 1
28055: PUSH
28056: LD_INT 22
28058: PUSH
28059: LD_OWVAR 2
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 21
28070: PUSH
28071: LD_INT 3
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PPUSH
28082: CALL_OW 69
28086: ST_TO_ADDR
// if not tmp then
28087: LD_VAR 0 1
28091: NOT
28092: IFFALSE 28096
// exit ;
28094: GO 28122
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28096: LD_VAR 0 1
28100: PUSH
28101: LD_INT 1
28103: PPUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 12
28113: ARRAY
28114: PPUSH
28115: LD_INT 100
28117: PPUSH
28118: CALL_OW 234
// end ;
28122: PPOPN 1
28124: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28125: LD_EXP 49
28129: PUSH
28130: LD_EXP 63
28134: AND
28135: IFFALSE 28233
28137: GO 28139
28139: DISABLE
28140: LD_INT 0
28142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28143: LD_ADDR_VAR 0 1
28147: PUSH
28148: LD_INT 22
28150: PUSH
28151: LD_OWVAR 2
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 21
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PPUSH
28174: CALL_OW 69
28178: ST_TO_ADDR
// if not tmp then
28179: LD_VAR 0 1
28183: NOT
28184: IFFALSE 28188
// exit ;
28186: GO 28233
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28188: LD_VAR 0 1
28192: PUSH
28193: LD_INT 1
28195: PPUSH
28196: LD_VAR 0 1
28200: PPUSH
28201: CALL_OW 12
28205: ARRAY
28206: PPUSH
28207: LD_INT 1
28209: PPUSH
28210: LD_INT 4
28212: PPUSH
28213: CALL_OW 12
28217: PPUSH
28218: LD_INT 3000
28220: PPUSH
28221: LD_INT 9000
28223: PPUSH
28224: CALL_OW 12
28228: PPUSH
28229: CALL_OW 492
// end ;
28233: PPOPN 1
28235: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28236: LD_EXP 49
28240: PUSH
28241: LD_EXP 64
28245: AND
28246: IFFALSE 28266
28248: GO 28250
28250: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28251: LD_INT 1
28253: PPUSH
28254: LD_OWVAR 2
28258: PPUSH
28259: LD_INT 0
28261: PPUSH
28262: CALL_OW 324
28266: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28267: LD_EXP 49
28271: PUSH
28272: LD_EXP 65
28276: AND
28277: IFFALSE 28360
28279: GO 28281
28281: DISABLE
28282: LD_INT 0
28284: PPUSH
28285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28286: LD_ADDR_VAR 0 2
28290: PUSH
28291: LD_INT 22
28293: PUSH
28294: LD_OWVAR 2
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 21
28305: PUSH
28306: LD_INT 3
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PPUSH
28317: CALL_OW 69
28321: ST_TO_ADDR
// if not tmp then
28322: LD_VAR 0 2
28326: NOT
28327: IFFALSE 28331
// exit ;
28329: GO 28360
// for i in tmp do
28331: LD_ADDR_VAR 0 1
28335: PUSH
28336: LD_VAR 0 2
28340: PUSH
28341: FOR_IN
28342: IFFALSE 28358
// SetBLevel ( i , 10 ) ;
28344: LD_VAR 0 1
28348: PPUSH
28349: LD_INT 10
28351: PPUSH
28352: CALL_OW 241
28356: GO 28341
28358: POP
28359: POP
// end ;
28360: PPOPN 2
28362: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28363: LD_EXP 49
28367: PUSH
28368: LD_EXP 66
28372: AND
28373: IFFALSE 28484
28375: GO 28377
28377: DISABLE
28378: LD_INT 0
28380: PPUSH
28381: PPUSH
28382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28383: LD_ADDR_VAR 0 3
28387: PUSH
28388: LD_INT 22
28390: PUSH
28391: LD_OWVAR 2
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 25
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PPUSH
28414: CALL_OW 69
28418: ST_TO_ADDR
// if not tmp then
28419: LD_VAR 0 3
28423: NOT
28424: IFFALSE 28428
// exit ;
28426: GO 28484
// un := tmp [ rand ( 1 , tmp ) ] ;
28428: LD_ADDR_VAR 0 2
28432: PUSH
28433: LD_VAR 0 3
28437: PUSH
28438: LD_INT 1
28440: PPUSH
28441: LD_VAR 0 3
28445: PPUSH
28446: CALL_OW 12
28450: ARRAY
28451: ST_TO_ADDR
// if Crawls ( un ) then
28452: LD_VAR 0 2
28456: PPUSH
28457: CALL_OW 318
28461: IFFALSE 28472
// ComWalk ( un ) ;
28463: LD_VAR 0 2
28467: PPUSH
28468: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28472: LD_VAR 0 2
28476: PPUSH
28477: LD_INT 5
28479: PPUSH
28480: CALL_OW 336
// end ;
28484: PPOPN 3
28486: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28487: LD_EXP 49
28491: PUSH
28492: LD_EXP 67
28496: AND
28497: PUSH
28498: LD_OWVAR 67
28502: PUSH
28503: LD_INT 4
28505: LESS
28506: AND
28507: IFFALSE 28526
28509: GO 28511
28511: DISABLE
// begin Difficulty := Difficulty + 1 ;
28512: LD_ADDR_OWVAR 67
28516: PUSH
28517: LD_OWVAR 67
28521: PUSH
28522: LD_INT 1
28524: PLUS
28525: ST_TO_ADDR
// end ;
28526: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28527: LD_EXP 49
28531: PUSH
28532: LD_EXP 68
28536: AND
28537: IFFALSE 28640
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
// begin for i := 1 to 5 do
28545: LD_ADDR_VAR 0 1
28549: PUSH
28550: DOUBLE
28551: LD_INT 1
28553: DEC
28554: ST_TO_ADDR
28555: LD_INT 5
28557: PUSH
28558: FOR_TO
28559: IFFALSE 28638
// begin uc_nation := nation_nature ;
28561: LD_ADDR_OWVAR 21
28565: PUSH
28566: LD_INT 0
28568: ST_TO_ADDR
// uc_side := 0 ;
28569: LD_ADDR_OWVAR 20
28573: PUSH
28574: LD_INT 0
28576: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28577: LD_ADDR_OWVAR 29
28581: PUSH
28582: LD_INT 12
28584: PUSH
28585: LD_INT 12
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: ST_TO_ADDR
// hc_agressivity := 20 ;
28592: LD_ADDR_OWVAR 35
28596: PUSH
28597: LD_INT 20
28599: ST_TO_ADDR
// hc_class := class_tiger ;
28600: LD_ADDR_OWVAR 28
28604: PUSH
28605: LD_INT 14
28607: ST_TO_ADDR
// hc_gallery :=  ;
28608: LD_ADDR_OWVAR 33
28612: PUSH
28613: LD_STRING 
28615: ST_TO_ADDR
// hc_name :=  ;
28616: LD_ADDR_OWVAR 26
28620: PUSH
28621: LD_STRING 
28623: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28624: CALL_OW 44
28628: PPUSH
28629: LD_INT 0
28631: PPUSH
28632: CALL_OW 51
// end ;
28636: GO 28558
28638: POP
28639: POP
// end ;
28640: PPOPN 1
28642: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28643: LD_EXP 49
28647: PUSH
28648: LD_EXP 69
28652: AND
28653: IFFALSE 28662
28655: GO 28657
28657: DISABLE
// StreamSibBomb ;
28658: CALL 28663 0 0
28662: END
// export function StreamSibBomb ; var i , x , y ; begin
28663: LD_INT 0
28665: PPUSH
28666: PPUSH
28667: PPUSH
28668: PPUSH
// result := false ;
28669: LD_ADDR_VAR 0 1
28673: PUSH
28674: LD_INT 0
28676: ST_TO_ADDR
// for i := 1 to 16 do
28677: LD_ADDR_VAR 0 2
28681: PUSH
28682: DOUBLE
28683: LD_INT 1
28685: DEC
28686: ST_TO_ADDR
28687: LD_INT 16
28689: PUSH
28690: FOR_TO
28691: IFFALSE 28890
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_INT 10
28700: PUSH
28701: LD_INT 20
28703: PUSH
28704: LD_INT 30
28706: PUSH
28707: LD_INT 40
28709: PUSH
28710: LD_INT 50
28712: PUSH
28713: LD_INT 60
28715: PUSH
28716: LD_INT 70
28718: PUSH
28719: LD_INT 80
28721: PUSH
28722: LD_INT 90
28724: PUSH
28725: LD_INT 100
28727: PUSH
28728: LD_INT 110
28730: PUSH
28731: LD_INT 120
28733: PUSH
28734: LD_INT 130
28736: PUSH
28737: LD_INT 140
28739: PUSH
28740: LD_INT 150
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PPUSH
28763: LD_INT 15
28765: PPUSH
28766: CALL_OW 12
28770: ARRAY
28771: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28772: LD_ADDR_VAR 0 4
28776: PUSH
28777: LD_INT 10
28779: PUSH
28780: LD_INT 20
28782: PUSH
28783: LD_INT 30
28785: PUSH
28786: LD_INT 40
28788: PUSH
28789: LD_INT 50
28791: PUSH
28792: LD_INT 60
28794: PUSH
28795: LD_INT 70
28797: PUSH
28798: LD_INT 80
28800: PUSH
28801: LD_INT 90
28803: PUSH
28804: LD_INT 100
28806: PUSH
28807: LD_INT 110
28809: PUSH
28810: LD_INT 120
28812: PUSH
28813: LD_INT 130
28815: PUSH
28816: LD_INT 140
28818: PUSH
28819: LD_INT 150
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 1
28841: PPUSH
28842: LD_INT 15
28844: PPUSH
28845: CALL_OW 12
28849: ARRAY
28850: ST_TO_ADDR
// if ValidHex ( x , y ) then
28851: LD_VAR 0 3
28855: PPUSH
28856: LD_VAR 0 4
28860: PPUSH
28861: CALL_OW 488
28865: IFFALSE 28888
// begin result := [ x , y ] ;
28867: LD_ADDR_VAR 0 1
28871: PUSH
28872: LD_VAR 0 3
28876: PUSH
28877: LD_VAR 0 4
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// break ;
28886: GO 28890
// end ; end ;
28888: GO 28690
28890: POP
28891: POP
// if result then
28892: LD_VAR 0 1
28896: IFFALSE 28956
// begin ToLua ( playSibBomb() ) ;
28898: LD_STRING playSibBomb()
28900: PPUSH
28901: CALL_OW 559
// wait ( 0 0$14 ) ;
28905: LD_INT 490
28907: PPUSH
28908: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28912: LD_VAR 0 1
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: PPUSH
28921: LD_VAR 0 1
28925: PUSH
28926: LD_INT 2
28928: ARRAY
28929: PPUSH
28930: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28934: LD_VAR 0 1
28938: PUSH
28939: LD_INT 1
28941: ARRAY
28942: PPUSH
28943: LD_VAR 0 1
28947: PUSH
28948: LD_INT 2
28950: ARRAY
28951: PPUSH
28952: CALL_OW 429
// end ; end ;
28956: LD_VAR 0 1
28960: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28961: LD_EXP 49
28965: PUSH
28966: LD_EXP 71
28970: AND
28971: IFFALSE 28983
28973: GO 28975
28975: DISABLE
// YouLost (  ) ;
28976: LD_STRING 
28978: PPUSH
28979: CALL_OW 104
28983: END
// every 0 0$1 trigger StreamModeActive and sFog do
28984: LD_EXP 49
28988: PUSH
28989: LD_EXP 70
28993: AND
28994: IFFALSE 29008
28996: GO 28998
28998: DISABLE
// FogOff ( your_side ) ;
28999: LD_OWVAR 2
29003: PPUSH
29004: CALL_OW 344
29008: END
// every 0 0$1 trigger StreamModeActive and sSun do
29009: LD_EXP 49
29013: PUSH
29014: LD_EXP 72
29018: AND
29019: IFFALSE 29047
29021: GO 29023
29023: DISABLE
// begin solar_recharge_percent := 0 ;
29024: LD_ADDR_OWVAR 79
29028: PUSH
29029: LD_INT 0
29031: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29032: LD_INT 10500
29034: PPUSH
29035: CALL_OW 67
// solar_recharge_percent := 100 ;
29039: LD_ADDR_OWVAR 79
29043: PUSH
29044: LD_INT 100
29046: ST_TO_ADDR
// end ;
29047: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29048: LD_EXP 49
29052: PUSH
29053: LD_EXP 73
29057: AND
29058: IFFALSE 29297
29060: GO 29062
29062: DISABLE
29063: LD_INT 0
29065: PPUSH
29066: PPUSH
29067: PPUSH
// begin tmp := [ ] ;
29068: LD_ADDR_VAR 0 3
29072: PUSH
29073: EMPTY
29074: ST_TO_ADDR
// for i := 1 to 6 do
29075: LD_ADDR_VAR 0 1
29079: PUSH
29080: DOUBLE
29081: LD_INT 1
29083: DEC
29084: ST_TO_ADDR
29085: LD_INT 6
29087: PUSH
29088: FOR_TO
29089: IFFALSE 29194
// begin uc_nation := nation_nature ;
29091: LD_ADDR_OWVAR 21
29095: PUSH
29096: LD_INT 0
29098: ST_TO_ADDR
// uc_side := 0 ;
29099: LD_ADDR_OWVAR 20
29103: PUSH
29104: LD_INT 0
29106: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29107: LD_ADDR_OWVAR 29
29111: PUSH
29112: LD_INT 12
29114: PUSH
29115: LD_INT 12
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: ST_TO_ADDR
// hc_agressivity := 20 ;
29122: LD_ADDR_OWVAR 35
29126: PUSH
29127: LD_INT 20
29129: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29130: LD_ADDR_OWVAR 28
29134: PUSH
29135: LD_INT 17
29137: ST_TO_ADDR
// hc_gallery :=  ;
29138: LD_ADDR_OWVAR 33
29142: PUSH
29143: LD_STRING 
29145: ST_TO_ADDR
// hc_name :=  ;
29146: LD_ADDR_OWVAR 26
29150: PUSH
29151: LD_STRING 
29153: ST_TO_ADDR
// un := CreateHuman ;
29154: LD_ADDR_VAR 0 2
29158: PUSH
29159: CALL_OW 44
29163: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29164: LD_VAR 0 2
29168: PPUSH
29169: LD_INT 1
29171: PPUSH
29172: CALL_OW 51
// tmp := tmp ^ un ;
29176: LD_ADDR_VAR 0 3
29180: PUSH
29181: LD_VAR 0 3
29185: PUSH
29186: LD_VAR 0 2
29190: ADD
29191: ST_TO_ADDR
// end ;
29192: GO 29088
29194: POP
29195: POP
// repeat wait ( 0 0$1 ) ;
29196: LD_INT 35
29198: PPUSH
29199: CALL_OW 67
// for un in tmp do
29203: LD_ADDR_VAR 0 2
29207: PUSH
29208: LD_VAR 0 3
29212: PUSH
29213: FOR_IN
29214: IFFALSE 29288
// begin if IsDead ( un ) then
29216: LD_VAR 0 2
29220: PPUSH
29221: CALL_OW 301
29225: IFFALSE 29245
// begin tmp := tmp diff un ;
29227: LD_ADDR_VAR 0 3
29231: PUSH
29232: LD_VAR 0 3
29236: PUSH
29237: LD_VAR 0 2
29241: DIFF
29242: ST_TO_ADDR
// continue ;
29243: GO 29213
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29245: LD_VAR 0 2
29249: PPUSH
29250: LD_INT 3
29252: PUSH
29253: LD_INT 22
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PPUSH
29267: CALL_OW 69
29271: PPUSH
29272: LD_VAR 0 2
29276: PPUSH
29277: CALL_OW 74
29281: PPUSH
29282: CALL_OW 115
// end ;
29286: GO 29213
29288: POP
29289: POP
// until not tmp ;
29290: LD_VAR 0 3
29294: NOT
29295: IFFALSE 29196
// end ;
29297: PPOPN 3
29299: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29300: LD_EXP 49
29304: PUSH
29305: LD_EXP 74
29309: AND
29310: IFFALSE 29364
29312: GO 29314
29314: DISABLE
// begin ToLua ( displayTroll(); ) ;
29315: LD_STRING displayTroll();
29317: PPUSH
29318: CALL_OW 559
// wait ( 3 3$00 ) ;
29322: LD_INT 6300
29324: PPUSH
29325: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29329: LD_STRING hideTroll();
29331: PPUSH
29332: CALL_OW 559
// wait ( 1 1$00 ) ;
29336: LD_INT 2100
29338: PPUSH
29339: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29343: LD_STRING displayTroll();
29345: PPUSH
29346: CALL_OW 559
// wait ( 1 1$00 ) ;
29350: LD_INT 2100
29352: PPUSH
29353: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29357: LD_STRING hideTroll();
29359: PPUSH
29360: CALL_OW 559
// end ;
29364: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29365: LD_EXP 49
29369: PUSH
29370: LD_EXP 75
29374: AND
29375: IFFALSE 29438
29377: GO 29379
29379: DISABLE
29380: LD_INT 0
29382: PPUSH
// begin p := 0 ;
29383: LD_ADDR_VAR 0 1
29387: PUSH
29388: LD_INT 0
29390: ST_TO_ADDR
// repeat game_speed := 1 ;
29391: LD_ADDR_OWVAR 65
29395: PUSH
29396: LD_INT 1
29398: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29399: LD_INT 35
29401: PPUSH
29402: CALL_OW 67
// p := p + 1 ;
29406: LD_ADDR_VAR 0 1
29410: PUSH
29411: LD_VAR 0 1
29415: PUSH
29416: LD_INT 1
29418: PLUS
29419: ST_TO_ADDR
// until p >= 60 ;
29420: LD_VAR 0 1
29424: PUSH
29425: LD_INT 60
29427: GREATEREQUAL
29428: IFFALSE 29391
// game_speed := 4 ;
29430: LD_ADDR_OWVAR 65
29434: PUSH
29435: LD_INT 4
29437: ST_TO_ADDR
// end ;
29438: PPOPN 1
29440: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29441: LD_EXP 49
29445: PUSH
29446: LD_EXP 76
29450: AND
29451: IFFALSE 29597
29453: GO 29455
29455: DISABLE
29456: LD_INT 0
29458: PPUSH
29459: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29460: LD_ADDR_VAR 0 1
29464: PUSH
29465: LD_INT 22
29467: PUSH
29468: LD_OWVAR 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: LD_INT 30
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 30
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PPUSH
29509: CALL_OW 69
29513: ST_TO_ADDR
// if not depot then
29514: LD_VAR 0 1
29518: NOT
29519: IFFALSE 29523
// exit ;
29521: GO 29597
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29523: LD_ADDR_VAR 0 2
29527: PUSH
29528: LD_VAR 0 1
29532: PUSH
29533: LD_INT 1
29535: PPUSH
29536: LD_VAR 0 1
29540: PPUSH
29541: CALL_OW 12
29545: ARRAY
29546: PPUSH
29547: CALL_OW 274
29551: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29552: LD_VAR 0 2
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: LD_INT 0
29562: PPUSH
29563: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29567: LD_VAR 0 2
29571: PPUSH
29572: LD_INT 2
29574: PPUSH
29575: LD_INT 0
29577: PPUSH
29578: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29582: LD_VAR 0 2
29586: PPUSH
29587: LD_INT 3
29589: PPUSH
29590: LD_INT 0
29592: PPUSH
29593: CALL_OW 277
// end ;
29597: PPOPN 2
29599: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29600: LD_EXP 49
29604: PUSH
29605: LD_EXP 77
29609: AND
29610: IFFALSE 29707
29612: GO 29614
29614: DISABLE
29615: LD_INT 0
29617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29618: LD_ADDR_VAR 0 1
29622: PUSH
29623: LD_INT 22
29625: PUSH
29626: LD_OWVAR 2
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 21
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: LD_INT 23
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 69
29671: ST_TO_ADDR
// if not tmp then
29672: LD_VAR 0 1
29676: NOT
29677: IFFALSE 29681
// exit ;
29679: GO 29707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29681: LD_VAR 0 1
29685: PUSH
29686: LD_INT 1
29688: PPUSH
29689: LD_VAR 0 1
29693: PPUSH
29694: CALL_OW 12
29698: ARRAY
29699: PPUSH
29700: LD_INT 200
29702: PPUSH
29703: CALL_OW 234
// end ;
29707: PPOPN 1
29709: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29710: LD_EXP 49
29714: PUSH
29715: LD_EXP 78
29719: AND
29720: IFFALSE 29799
29722: GO 29724
29724: DISABLE
29725: LD_INT 0
29727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29728: LD_ADDR_VAR 0 1
29732: PUSH
29733: LD_INT 22
29735: PUSH
29736: LD_OWVAR 2
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 21
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PPUSH
29759: CALL_OW 69
29763: ST_TO_ADDR
// if not tmp then
29764: LD_VAR 0 1
29768: NOT
29769: IFFALSE 29773
// exit ;
29771: GO 29799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29773: LD_VAR 0 1
29777: PUSH
29778: LD_INT 1
29780: PPUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: CALL_OW 12
29790: ARRAY
29791: PPUSH
29792: LD_INT 60
29794: PPUSH
29795: CALL_OW 234
// end ;
29799: PPOPN 1
29801: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29802: LD_EXP 49
29806: PUSH
29807: LD_EXP 79
29811: AND
29812: IFFALSE 29911
29814: GO 29816
29816: DISABLE
29817: LD_INT 0
29819: PPUSH
29820: PPUSH
// begin enable ;
29821: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29822: LD_ADDR_VAR 0 1
29826: PUSH
29827: LD_INT 22
29829: PUSH
29830: LD_OWVAR 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 61
29841: PUSH
29842: EMPTY
29843: LIST
29844: PUSH
29845: LD_INT 33
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: ST_TO_ADDR
// if not tmp then
29865: LD_VAR 0 1
29869: NOT
29870: IFFALSE 29874
// exit ;
29872: GO 29911
// for i in tmp do
29874: LD_ADDR_VAR 0 2
29878: PUSH
29879: LD_VAR 0 1
29883: PUSH
29884: FOR_IN
29885: IFFALSE 29909
// if IsControledBy ( i ) then
29887: LD_VAR 0 2
29891: PPUSH
29892: CALL_OW 312
29896: IFFALSE 29907
// ComUnlink ( i ) ;
29898: LD_VAR 0 2
29902: PPUSH
29903: CALL_OW 136
29907: GO 29884
29909: POP
29910: POP
// end ;
29911: PPOPN 2
29913: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29914: LD_EXP 49
29918: PUSH
29919: LD_EXP 80
29923: AND
29924: IFFALSE 30064
29926: GO 29928
29928: DISABLE
29929: LD_INT 0
29931: PPUSH
29932: PPUSH
// begin ToLua ( displayPowell(); ) ;
29933: LD_STRING displayPowell();
29935: PPUSH
29936: CALL_OW 559
// uc_side := 0 ;
29940: LD_ADDR_OWVAR 20
29944: PUSH
29945: LD_INT 0
29947: ST_TO_ADDR
// uc_nation := 2 ;
29948: LD_ADDR_OWVAR 21
29952: PUSH
29953: LD_INT 2
29955: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29956: LD_ADDR_OWVAR 37
29960: PUSH
29961: LD_INT 14
29963: ST_TO_ADDR
// vc_engine := engine_siberite ;
29964: LD_ADDR_OWVAR 39
29968: PUSH
29969: LD_INT 3
29971: ST_TO_ADDR
// vc_control := control_apeman ;
29972: LD_ADDR_OWVAR 38
29976: PUSH
29977: LD_INT 5
29979: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29980: LD_ADDR_OWVAR 40
29984: PUSH
29985: LD_INT 29
29987: ST_TO_ADDR
// un := CreateVehicle ;
29988: LD_ADDR_VAR 0 2
29992: PUSH
29993: CALL_OW 45
29997: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29998: LD_VAR 0 2
30002: PPUSH
30003: LD_INT 1
30005: PPUSH
30006: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30010: LD_INT 35
30012: PPUSH
30013: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30017: LD_VAR 0 2
30021: PPUSH
30022: LD_INT 22
30024: PUSH
30025: LD_OWVAR 2
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PPUSH
30034: CALL_OW 69
30038: PPUSH
30039: LD_VAR 0 2
30043: PPUSH
30044: CALL_OW 74
30048: PPUSH
30049: CALL_OW 115
// until IsDead ( un ) ;
30053: LD_VAR 0 2
30057: PPUSH
30058: CALL_OW 301
30062: IFFALSE 30010
// end ;
30064: PPOPN 2
30066: END
// every 0 0$1 trigger StreamModeActive and sStu do
30067: LD_EXP 49
30071: PUSH
30072: LD_EXP 88
30076: AND
30077: IFFALSE 30093
30079: GO 30081
30081: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30082: LD_STRING displayStucuk();
30084: PPUSH
30085: CALL_OW 559
// ResetFog ;
30089: CALL_OW 335
// end ;
30093: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30094: LD_EXP 49
30098: PUSH
30099: LD_EXP 81
30103: AND
30104: IFFALSE 30245
30106: GO 30108
30108: DISABLE
30109: LD_INT 0
30111: PPUSH
30112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 21
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 69
30148: ST_TO_ADDR
// if not tmp then
30149: LD_VAR 0 2
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30245
// un := tmp [ rand ( 1 , tmp ) ] ;
30158: LD_ADDR_VAR 0 1
30162: PUSH
30163: LD_VAR 0 2
30167: PUSH
30168: LD_INT 1
30170: PPUSH
30171: LD_VAR 0 2
30175: PPUSH
30176: CALL_OW 12
30180: ARRAY
30181: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30182: LD_VAR 0 1
30186: PPUSH
30187: LD_INT 0
30189: PPUSH
30190: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30194: LD_VAR 0 1
30198: PPUSH
30199: LD_OWVAR 3
30203: PUSH
30204: LD_VAR 0 1
30208: DIFF
30209: PPUSH
30210: LD_VAR 0 1
30214: PPUSH
30215: CALL_OW 74
30219: PPUSH
30220: CALL_OW 115
// wait ( 0 0$20 ) ;
30224: LD_INT 700
30226: PPUSH
30227: CALL_OW 67
// SetSide ( un , your_side ) ;
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_OWVAR 2
30240: PPUSH
30241: CALL_OW 235
// end ;
30245: PPOPN 2
30247: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30248: LD_EXP 49
30252: PUSH
30253: LD_EXP 82
30257: AND
30258: IFFALSE 30364
30260: GO 30262
30262: DISABLE
30263: LD_INT 0
30265: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30266: LD_ADDR_VAR 0 1
30270: PUSH
30271: LD_INT 22
30273: PUSH
30274: LD_OWVAR 2
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: LD_INT 30
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 30
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PPUSH
30315: CALL_OW 69
30319: ST_TO_ADDR
// if not depot then
30320: LD_VAR 0 1
30324: NOT
30325: IFFALSE 30329
// exit ;
30327: GO 30364
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30329: LD_VAR 0 1
30333: PUSH
30334: LD_INT 1
30336: ARRAY
30337: PPUSH
30338: CALL_OW 250
30342: PPUSH
30343: LD_VAR 0 1
30347: PUSH
30348: LD_INT 1
30350: ARRAY
30351: PPUSH
30352: CALL_OW 251
30356: PPUSH
30357: LD_INT 70
30359: PPUSH
30360: CALL_OW 495
// end ;
30364: PPOPN 1
30366: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30367: LD_EXP 49
30371: PUSH
30372: LD_EXP 83
30376: AND
30377: IFFALSE 30588
30379: GO 30381
30381: DISABLE
30382: LD_INT 0
30384: PPUSH
30385: PPUSH
30386: PPUSH
30387: PPUSH
30388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30389: LD_ADDR_VAR 0 5
30393: PUSH
30394: LD_INT 22
30396: PUSH
30397: LD_OWVAR 2
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 21
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PPUSH
30420: CALL_OW 69
30424: ST_TO_ADDR
// if not tmp then
30425: LD_VAR 0 5
30429: NOT
30430: IFFALSE 30434
// exit ;
30432: GO 30588
// for i in tmp do
30434: LD_ADDR_VAR 0 1
30438: PUSH
30439: LD_VAR 0 5
30443: PUSH
30444: FOR_IN
30445: IFFALSE 30586
// begin d := rand ( 0 , 5 ) ;
30447: LD_ADDR_VAR 0 4
30451: PUSH
30452: LD_INT 0
30454: PPUSH
30455: LD_INT 5
30457: PPUSH
30458: CALL_OW 12
30462: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30463: LD_ADDR_VAR 0 2
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 250
30477: PPUSH
30478: LD_VAR 0 4
30482: PPUSH
30483: LD_INT 3
30485: PPUSH
30486: LD_INT 12
30488: PPUSH
30489: CALL_OW 12
30493: PPUSH
30494: CALL_OW 272
30498: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30499: LD_ADDR_VAR 0 3
30503: PUSH
30504: LD_VAR 0 1
30508: PPUSH
30509: CALL_OW 251
30513: PPUSH
30514: LD_VAR 0 4
30518: PPUSH
30519: LD_INT 3
30521: PPUSH
30522: LD_INT 12
30524: PPUSH
30525: CALL_OW 12
30529: PPUSH
30530: CALL_OW 273
30534: ST_TO_ADDR
// if ValidHex ( x , y ) then
30535: LD_VAR 0 2
30539: PPUSH
30540: LD_VAR 0 3
30544: PPUSH
30545: CALL_OW 488
30549: IFFALSE 30584
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30551: LD_VAR 0 1
30555: PPUSH
30556: LD_VAR 0 2
30560: PPUSH
30561: LD_VAR 0 3
30565: PPUSH
30566: LD_INT 3
30568: PPUSH
30569: LD_INT 6
30571: PPUSH
30572: CALL_OW 12
30576: PPUSH
30577: LD_INT 1
30579: PPUSH
30580: CALL_OW 483
// end ;
30584: GO 30444
30586: POP
30587: POP
// end ;
30588: PPOPN 5
30590: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30591: LD_EXP 49
30595: PUSH
30596: LD_EXP 84
30600: AND
30601: IFFALSE 30695
30603: GO 30605
30605: DISABLE
30606: LD_INT 0
30608: PPUSH
30609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30610: LD_ADDR_VAR 0 2
30614: PUSH
30615: LD_INT 22
30617: PUSH
30618: LD_OWVAR 2
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 32
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 21
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: PPUSH
30652: CALL_OW 69
30656: ST_TO_ADDR
// if not tmp then
30657: LD_VAR 0 2
30661: NOT
30662: IFFALSE 30666
// exit ;
30664: GO 30695
// for i in tmp do
30666: LD_ADDR_VAR 0 1
30670: PUSH
30671: LD_VAR 0 2
30675: PUSH
30676: FOR_IN
30677: IFFALSE 30693
// SetFuel ( i , 0 ) ;
30679: LD_VAR 0 1
30683: PPUSH
30684: LD_INT 0
30686: PPUSH
30687: CALL_OW 240
30691: GO 30676
30693: POP
30694: POP
// end ;
30695: PPOPN 2
30697: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30698: LD_EXP 49
30702: PUSH
30703: LD_EXP 85
30707: AND
30708: IFFALSE 30774
30710: GO 30712
30712: DISABLE
30713: LD_INT 0
30715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30716: LD_ADDR_VAR 0 1
30720: PUSH
30721: LD_INT 22
30723: PUSH
30724: LD_OWVAR 2
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 30
30735: PUSH
30736: LD_INT 29
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PPUSH
30747: CALL_OW 69
30751: ST_TO_ADDR
// if not tmp then
30752: LD_VAR 0 1
30756: NOT
30757: IFFALSE 30761
// exit ;
30759: GO 30774
// DestroyUnit ( tmp [ 1 ] ) ;
30761: LD_VAR 0 1
30765: PUSH
30766: LD_INT 1
30768: ARRAY
30769: PPUSH
30770: CALL_OW 65
// end ;
30774: PPOPN 1
30776: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30777: LD_EXP 49
30781: PUSH
30782: LD_EXP 87
30786: AND
30787: IFFALSE 30916
30789: GO 30791
30791: DISABLE
30792: LD_INT 0
30794: PPUSH
// begin uc_side := 0 ;
30795: LD_ADDR_OWVAR 20
30799: PUSH
30800: LD_INT 0
30802: ST_TO_ADDR
// uc_nation := nation_arabian ;
30803: LD_ADDR_OWVAR 21
30807: PUSH
30808: LD_INT 2
30810: ST_TO_ADDR
// hc_gallery :=  ;
30811: LD_ADDR_OWVAR 33
30815: PUSH
30816: LD_STRING 
30818: ST_TO_ADDR
// hc_name :=  ;
30819: LD_ADDR_OWVAR 26
30823: PUSH
30824: LD_STRING 
30826: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30827: LD_INT 1
30829: PPUSH
30830: LD_INT 11
30832: PPUSH
30833: LD_INT 10
30835: PPUSH
30836: CALL_OW 380
// un := CreateHuman ;
30840: LD_ADDR_VAR 0 1
30844: PUSH
30845: CALL_OW 44
30849: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30850: LD_VAR 0 1
30854: PPUSH
30855: LD_INT 1
30857: PPUSH
30858: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30862: LD_INT 35
30864: PPUSH
30865: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30869: LD_VAR 0 1
30873: PPUSH
30874: LD_INT 22
30876: PUSH
30877: LD_OWVAR 2
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PPUSH
30886: CALL_OW 69
30890: PPUSH
30891: LD_VAR 0 1
30895: PPUSH
30896: CALL_OW 74
30900: PPUSH
30901: CALL_OW 115
// until IsDead ( un ) ;
30905: LD_VAR 0 1
30909: PPUSH
30910: CALL_OW 301
30914: IFFALSE 30862
// end ;
30916: PPOPN 1
30918: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30919: LD_EXP 49
30923: PUSH
30924: LD_EXP 89
30928: AND
30929: IFFALSE 30941
30931: GO 30933
30933: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30934: LD_STRING earthquake(getX(game), 0, 32)
30936: PPUSH
30937: CALL_OW 559
30941: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30942: LD_EXP 49
30946: PUSH
30947: LD_EXP 90
30951: AND
30952: IFFALSE 31043
30954: GO 30956
30956: DISABLE
30957: LD_INT 0
30959: PPUSH
// begin enable ;
30960: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30961: LD_ADDR_VAR 0 1
30965: PUSH
30966: LD_INT 22
30968: PUSH
30969: LD_OWVAR 2
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 21
30980: PUSH
30981: LD_INT 2
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 33
30990: PUSH
30991: LD_INT 3
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: PPUSH
31003: CALL_OW 69
31007: ST_TO_ADDR
// if not tmp then
31008: LD_VAR 0 1
31012: NOT
31013: IFFALSE 31017
// exit ;
31015: GO 31043
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31017: LD_VAR 0 1
31021: PUSH
31022: LD_INT 1
31024: PPUSH
31025: LD_VAR 0 1
31029: PPUSH
31030: CALL_OW 12
31034: ARRAY
31035: PPUSH
31036: LD_INT 1
31038: PPUSH
31039: CALL_OW 234
// end ;
31043: PPOPN 1
31045: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31046: LD_EXP 49
31050: PUSH
31051: LD_EXP 91
31055: AND
31056: IFFALSE 31197
31058: GO 31060
31060: DISABLE
31061: LD_INT 0
31063: PPUSH
31064: PPUSH
31065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31066: LD_ADDR_VAR 0 3
31070: PUSH
31071: LD_INT 22
31073: PUSH
31074: LD_OWVAR 2
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 25
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PPUSH
31097: CALL_OW 69
31101: ST_TO_ADDR
// if not tmp then
31102: LD_VAR 0 3
31106: NOT
31107: IFFALSE 31111
// exit ;
31109: GO 31197
// un := tmp [ rand ( 1 , tmp ) ] ;
31111: LD_ADDR_VAR 0 2
31115: PUSH
31116: LD_VAR 0 3
31120: PUSH
31121: LD_INT 1
31123: PPUSH
31124: LD_VAR 0 3
31128: PPUSH
31129: CALL_OW 12
31133: ARRAY
31134: ST_TO_ADDR
// if Crawls ( un ) then
31135: LD_VAR 0 2
31139: PPUSH
31140: CALL_OW 318
31144: IFFALSE 31155
// ComWalk ( un ) ;
31146: LD_VAR 0 2
31150: PPUSH
31151: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31155: LD_VAR 0 2
31159: PPUSH
31160: LD_INT 9
31162: PPUSH
31163: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31167: LD_INT 28
31169: PPUSH
31170: LD_OWVAR 2
31174: PPUSH
31175: LD_INT 2
31177: PPUSH
31178: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31182: LD_INT 29
31184: PPUSH
31185: LD_OWVAR 2
31189: PPUSH
31190: LD_INT 2
31192: PPUSH
31193: CALL_OW 322
// end ;
31197: PPOPN 3
31199: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31200: LD_EXP 49
31204: PUSH
31205: LD_EXP 92
31209: AND
31210: IFFALSE 31321
31212: GO 31214
31214: DISABLE
31215: LD_INT 0
31217: PPUSH
31218: PPUSH
31219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31220: LD_ADDR_VAR 0 3
31224: PUSH
31225: LD_INT 22
31227: PUSH
31228: LD_OWVAR 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 25
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PPUSH
31251: CALL_OW 69
31255: ST_TO_ADDR
// if not tmp then
31256: LD_VAR 0 3
31260: NOT
31261: IFFALSE 31265
// exit ;
31263: GO 31321
// un := tmp [ rand ( 1 , tmp ) ] ;
31265: LD_ADDR_VAR 0 2
31269: PUSH
31270: LD_VAR 0 3
31274: PUSH
31275: LD_INT 1
31277: PPUSH
31278: LD_VAR 0 3
31282: PPUSH
31283: CALL_OW 12
31287: ARRAY
31288: ST_TO_ADDR
// if Crawls ( un ) then
31289: LD_VAR 0 2
31293: PPUSH
31294: CALL_OW 318
31298: IFFALSE 31309
// ComWalk ( un ) ;
31300: LD_VAR 0 2
31304: PPUSH
31305: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31309: LD_VAR 0 2
31313: PPUSH
31314: LD_INT 8
31316: PPUSH
31317: CALL_OW 336
// end ;
31321: PPOPN 3
31323: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31324: LD_EXP 49
31328: PUSH
31329: LD_EXP 93
31333: AND
31334: IFFALSE 31478
31336: GO 31338
31338: DISABLE
31339: LD_INT 0
31341: PPUSH
31342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_INT 22
31350: PUSH
31351: LD_OWVAR 2
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 21
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: LD_INT 34
31375: PUSH
31376: LD_INT 12
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 34
31385: PUSH
31386: LD_INT 51
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 34
31395: PUSH
31396: LD_INT 32
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: PPUSH
31414: CALL_OW 69
31418: ST_TO_ADDR
// if not tmp then
31419: LD_VAR 0 2
31423: NOT
31424: IFFALSE 31428
// exit ;
31426: GO 31478
// for i in tmp do
31428: LD_ADDR_VAR 0 1
31432: PUSH
31433: LD_VAR 0 2
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31476
// if GetCargo ( i , mat_artifact ) = 0 then
31441: LD_VAR 0 1
31445: PPUSH
31446: LD_INT 4
31448: PPUSH
31449: CALL_OW 289
31453: PUSH
31454: LD_INT 0
31456: EQUAL
31457: IFFALSE 31474
// SetCargo ( i , mat_siberit , 100 ) ;
31459: LD_VAR 0 1
31463: PPUSH
31464: LD_INT 3
31466: PPUSH
31467: LD_INT 100
31469: PPUSH
31470: CALL_OW 290
31474: GO 31438
31476: POP
31477: POP
// end ;
31478: PPOPN 2
31480: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31481: LD_EXP 49
31485: PUSH
31486: LD_EXP 94
31490: AND
31491: IFFALSE 31674
31493: GO 31495
31495: DISABLE
31496: LD_INT 0
31498: PPUSH
31499: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31500: LD_ADDR_VAR 0 2
31504: PUSH
31505: LD_INT 22
31507: PUSH
31508: LD_OWVAR 2
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PPUSH
31517: CALL_OW 69
31521: ST_TO_ADDR
// if not tmp then
31522: LD_VAR 0 2
31526: NOT
31527: IFFALSE 31531
// exit ;
31529: GO 31674
// for i := 1 to 2 do
31531: LD_ADDR_VAR 0 1
31535: PUSH
31536: DOUBLE
31537: LD_INT 1
31539: DEC
31540: ST_TO_ADDR
31541: LD_INT 2
31543: PUSH
31544: FOR_TO
31545: IFFALSE 31672
// begin uc_side := your_side ;
31547: LD_ADDR_OWVAR 20
31551: PUSH
31552: LD_OWVAR 2
31556: ST_TO_ADDR
// uc_nation := nation_american ;
31557: LD_ADDR_OWVAR 21
31561: PUSH
31562: LD_INT 1
31564: ST_TO_ADDR
// vc_chassis := us_morphling ;
31565: LD_ADDR_OWVAR 37
31569: PUSH
31570: LD_INT 5
31572: ST_TO_ADDR
// vc_engine := engine_siberite ;
31573: LD_ADDR_OWVAR 39
31577: PUSH
31578: LD_INT 3
31580: ST_TO_ADDR
// vc_control := control_computer ;
31581: LD_ADDR_OWVAR 38
31585: PUSH
31586: LD_INT 3
31588: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31589: LD_ADDR_OWVAR 40
31593: PUSH
31594: LD_INT 10
31596: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31597: LD_VAR 0 2
31601: PUSH
31602: LD_INT 1
31604: ARRAY
31605: PPUSH
31606: CALL_OW 310
31610: NOT
31611: IFFALSE 31658
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31613: CALL_OW 45
31617: PPUSH
31618: LD_VAR 0 2
31622: PUSH
31623: LD_INT 1
31625: ARRAY
31626: PPUSH
31627: CALL_OW 250
31631: PPUSH
31632: LD_VAR 0 2
31636: PUSH
31637: LD_INT 1
31639: ARRAY
31640: PPUSH
31641: CALL_OW 251
31645: PPUSH
31646: LD_INT 12
31648: PPUSH
31649: LD_INT 1
31651: PPUSH
31652: CALL_OW 50
31656: GO 31670
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31658: CALL_OW 45
31662: PPUSH
31663: LD_INT 1
31665: PPUSH
31666: CALL_OW 51
// end ;
31670: GO 31544
31672: POP
31673: POP
// end ;
31674: PPOPN 2
31676: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31677: LD_EXP 49
31681: PUSH
31682: LD_EXP 95
31686: AND
31687: IFFALSE 31909
31689: GO 31691
31691: DISABLE
31692: LD_INT 0
31694: PPUSH
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31700: LD_ADDR_VAR 0 6
31704: PUSH
31705: LD_INT 22
31707: PUSH
31708: LD_OWVAR 2
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 21
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 3
31729: PUSH
31730: LD_INT 23
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: PPUSH
31749: CALL_OW 69
31753: ST_TO_ADDR
// if not tmp then
31754: LD_VAR 0 6
31758: NOT
31759: IFFALSE 31763
// exit ;
31761: GO 31909
// s1 := rand ( 1 , 4 ) ;
31763: LD_ADDR_VAR 0 2
31767: PUSH
31768: LD_INT 1
31770: PPUSH
31771: LD_INT 4
31773: PPUSH
31774: CALL_OW 12
31778: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31779: LD_ADDR_VAR 0 4
31783: PUSH
31784: LD_VAR 0 6
31788: PUSH
31789: LD_INT 1
31791: ARRAY
31792: PPUSH
31793: LD_VAR 0 2
31797: PPUSH
31798: CALL_OW 259
31802: ST_TO_ADDR
// if s1 = 1 then
31803: LD_VAR 0 2
31807: PUSH
31808: LD_INT 1
31810: EQUAL
31811: IFFALSE 31831
// s2 := rand ( 2 , 4 ) else
31813: LD_ADDR_VAR 0 3
31817: PUSH
31818: LD_INT 2
31820: PPUSH
31821: LD_INT 4
31823: PPUSH
31824: CALL_OW 12
31828: ST_TO_ADDR
31829: GO 31839
// s2 := 1 ;
31831: LD_ADDR_VAR 0 3
31835: PUSH
31836: LD_INT 1
31838: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31839: LD_ADDR_VAR 0 5
31843: PUSH
31844: LD_VAR 0 6
31848: PUSH
31849: LD_INT 1
31851: ARRAY
31852: PPUSH
31853: LD_VAR 0 3
31857: PPUSH
31858: CALL_OW 259
31862: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31863: LD_VAR 0 6
31867: PUSH
31868: LD_INT 1
31870: ARRAY
31871: PPUSH
31872: LD_VAR 0 2
31876: PPUSH
31877: LD_VAR 0 5
31881: PPUSH
31882: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31886: LD_VAR 0 6
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: PPUSH
31895: LD_VAR 0 3
31899: PPUSH
31900: LD_VAR 0 4
31904: PPUSH
31905: CALL_OW 237
// end ;
31909: PPOPN 6
31911: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31912: LD_EXP 49
31916: PUSH
31917: LD_EXP 96
31921: AND
31922: IFFALSE 32001
31924: GO 31926
31926: DISABLE
31927: LD_INT 0
31929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31930: LD_ADDR_VAR 0 1
31934: PUSH
31935: LD_INT 22
31937: PUSH
31938: LD_OWVAR 2
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 30
31949: PUSH
31950: LD_INT 3
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PPUSH
31961: CALL_OW 69
31965: ST_TO_ADDR
// if not tmp then
31966: LD_VAR 0 1
31970: NOT
31971: IFFALSE 31975
// exit ;
31973: GO 32001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31975: LD_VAR 0 1
31979: PUSH
31980: LD_INT 1
31982: PPUSH
31983: LD_VAR 0 1
31987: PPUSH
31988: CALL_OW 12
31992: ARRAY
31993: PPUSH
31994: LD_INT 1
31996: PPUSH
31997: CALL_OW 234
// end ;
32001: PPOPN 1
32003: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32004: LD_EXP 49
32008: PUSH
32009: LD_EXP 97
32013: AND
32014: IFFALSE 32126
32016: GO 32018
32018: DISABLE
32019: LD_INT 0
32021: PPUSH
32022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32023: LD_ADDR_VAR 0 2
32027: PUSH
32028: LD_INT 22
32030: PUSH
32031: LD_OWVAR 2
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 30
32045: PUSH
32046: LD_INT 27
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 30
32055: PUSH
32056: LD_INT 26
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 30
32065: PUSH
32066: LD_INT 28
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PPUSH
32083: CALL_OW 69
32087: ST_TO_ADDR
// if not tmp then
32088: LD_VAR 0 2
32092: NOT
32093: IFFALSE 32097
// exit ;
32095: GO 32126
// for i in tmp do
32097: LD_ADDR_VAR 0 1
32101: PUSH
32102: LD_VAR 0 2
32106: PUSH
32107: FOR_IN
32108: IFFALSE 32124
// SetLives ( i , 1 ) ;
32110: LD_VAR 0 1
32114: PPUSH
32115: LD_INT 1
32117: PPUSH
32118: CALL_OW 234
32122: GO 32107
32124: POP
32125: POP
// end ;
32126: PPOPN 2
32128: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32129: LD_EXP 49
32133: PUSH
32134: LD_EXP 98
32138: AND
32139: IFFALSE 32426
32141: GO 32143
32143: DISABLE
32144: LD_INT 0
32146: PPUSH
32147: PPUSH
32148: PPUSH
// begin i := rand ( 1 , 7 ) ;
32149: LD_ADDR_VAR 0 1
32153: PUSH
32154: LD_INT 1
32156: PPUSH
32157: LD_INT 7
32159: PPUSH
32160: CALL_OW 12
32164: ST_TO_ADDR
// case i of 1 :
32165: LD_VAR 0 1
32169: PUSH
32170: LD_INT 1
32172: DOUBLE
32173: EQUAL
32174: IFTRUE 32178
32176: GO 32188
32178: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32179: LD_STRING earthquake(getX(game), 0, 32)
32181: PPUSH
32182: CALL_OW 559
32186: GO 32426
32188: LD_INT 2
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32210
32196: POP
// begin ToLua ( displayStucuk(); ) ;
32197: LD_STRING displayStucuk();
32199: PPUSH
32200: CALL_OW 559
// ResetFog ;
32204: CALL_OW 335
// end ; 3 :
32208: GO 32426
32210: LD_INT 3
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 32322
32218: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32219: LD_ADDR_VAR 0 2
32223: PUSH
32224: LD_INT 22
32226: PUSH
32227: LD_OWVAR 2
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 25
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PPUSH
32250: CALL_OW 69
32254: ST_TO_ADDR
// if not tmp then
32255: LD_VAR 0 2
32259: NOT
32260: IFFALSE 32264
// exit ;
32262: GO 32426
// un := tmp [ rand ( 1 , tmp ) ] ;
32264: LD_ADDR_VAR 0 3
32268: PUSH
32269: LD_VAR 0 2
32273: PUSH
32274: LD_INT 1
32276: PPUSH
32277: LD_VAR 0 2
32281: PPUSH
32282: CALL_OW 12
32286: ARRAY
32287: ST_TO_ADDR
// if Crawls ( un ) then
32288: LD_VAR 0 3
32292: PPUSH
32293: CALL_OW 318
32297: IFFALSE 32308
// ComWalk ( un ) ;
32299: LD_VAR 0 3
32303: PPUSH
32304: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32308: LD_VAR 0 3
32312: PPUSH
32313: LD_INT 8
32315: PPUSH
32316: CALL_OW 336
// end ; 4 :
32320: GO 32426
32322: LD_INT 4
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32404
32330: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32331: LD_ADDR_VAR 0 2
32335: PUSH
32336: LD_INT 22
32338: PUSH
32339: LD_OWVAR 2
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 30
32350: PUSH
32351: LD_INT 29
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PPUSH
32362: CALL_OW 69
32366: ST_TO_ADDR
// if not tmp then
32367: LD_VAR 0 2
32371: NOT
32372: IFFALSE 32376
// exit ;
32374: GO 32426
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32376: LD_VAR 0 2
32380: PUSH
32381: LD_INT 1
32383: ARRAY
32384: PPUSH
32385: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32389: LD_VAR 0 2
32393: PUSH
32394: LD_INT 1
32396: ARRAY
32397: PPUSH
32398: CALL_OW 65
// end ; 5 .. 7 :
32402: GO 32426
32404: LD_INT 5
32406: DOUBLE
32407: GREATEREQUAL
32408: IFFALSE 32416
32410: LD_INT 7
32412: DOUBLE
32413: LESSEQUAL
32414: IFTRUE 32418
32416: GO 32425
32418: POP
// StreamSibBomb ; end ;
32419: CALL 28663 0 0
32423: GO 32426
32425: POP
// end ;
32426: PPOPN 3
32428: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32429: LD_EXP 49
32433: PUSH
32434: LD_EXP 99
32438: AND
32439: IFFALSE 32595
32441: GO 32443
32443: DISABLE
32444: LD_INT 0
32446: PPUSH
32447: PPUSH
32448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: LD_INT 81
32456: PUSH
32457: LD_OWVAR 2
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 2
32468: PUSH
32469: LD_INT 21
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 21
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PPUSH
32498: CALL_OW 69
32502: ST_TO_ADDR
// if not tmp then
32503: LD_VAR 0 2
32507: NOT
32508: IFFALSE 32512
// exit ;
32510: GO 32595
// p := 0 ;
32512: LD_ADDR_VAR 0 3
32516: PUSH
32517: LD_INT 0
32519: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32520: LD_INT 35
32522: PPUSH
32523: CALL_OW 67
// p := p + 1 ;
32527: LD_ADDR_VAR 0 3
32531: PUSH
32532: LD_VAR 0 3
32536: PUSH
32537: LD_INT 1
32539: PLUS
32540: ST_TO_ADDR
// for i in tmp do
32541: LD_ADDR_VAR 0 1
32545: PUSH
32546: LD_VAR 0 2
32550: PUSH
32551: FOR_IN
32552: IFFALSE 32583
// if GetLives ( i ) < 1000 then
32554: LD_VAR 0 1
32558: PPUSH
32559: CALL_OW 256
32563: PUSH
32564: LD_INT 1000
32566: LESS
32567: IFFALSE 32581
// SetLives ( i , 1000 ) ;
32569: LD_VAR 0 1
32573: PPUSH
32574: LD_INT 1000
32576: PPUSH
32577: CALL_OW 234
32581: GO 32551
32583: POP
32584: POP
// until p > 20 ;
32585: LD_VAR 0 3
32589: PUSH
32590: LD_INT 20
32592: GREATER
32593: IFFALSE 32520
// end ;
32595: PPOPN 3
32597: END
// every 0 0$1 trigger StreamModeActive and sTime do
32598: LD_EXP 49
32602: PUSH
32603: LD_EXP 100
32607: AND
32608: IFFALSE 32643
32610: GO 32612
32612: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32613: LD_INT 28
32615: PPUSH
32616: LD_OWVAR 2
32620: PPUSH
32621: LD_INT 2
32623: PPUSH
32624: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32628: LD_INT 30
32630: PPUSH
32631: LD_OWVAR 2
32635: PPUSH
32636: LD_INT 2
32638: PPUSH
32639: CALL_OW 322
// end ;
32643: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32644: LD_EXP 49
32648: PUSH
32649: LD_EXP 101
32653: AND
32654: IFFALSE 32775
32656: GO 32658
32658: DISABLE
32659: LD_INT 0
32661: PPUSH
32662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32663: LD_ADDR_VAR 0 2
32667: PUSH
32668: LD_INT 22
32670: PUSH
32671: LD_OWVAR 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 21
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: LD_INT 23
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: PPUSH
32712: CALL_OW 69
32716: ST_TO_ADDR
// if not tmp then
32717: LD_VAR 0 2
32721: NOT
32722: IFFALSE 32726
// exit ;
32724: GO 32775
// for i in tmp do
32726: LD_ADDR_VAR 0 1
32730: PUSH
32731: LD_VAR 0 2
32735: PUSH
32736: FOR_IN
32737: IFFALSE 32773
// begin if Crawls ( i ) then
32739: LD_VAR 0 1
32743: PPUSH
32744: CALL_OW 318
32748: IFFALSE 32759
// ComWalk ( i ) ;
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 138
// SetClass ( i , 2 ) ;
32759: LD_VAR 0 1
32763: PPUSH
32764: LD_INT 2
32766: PPUSH
32767: CALL_OW 336
// end ;
32771: GO 32736
32773: POP
32774: POP
// end ;
32775: PPOPN 2
32777: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32778: LD_EXP 49
32782: PUSH
32783: LD_EXP 102
32787: AND
32788: IFFALSE 33076
32790: GO 32792
32792: DISABLE
32793: LD_INT 0
32795: PPUSH
32796: PPUSH
32797: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32798: LD_OWVAR 2
32802: PPUSH
32803: LD_INT 9
32805: PPUSH
32806: LD_INT 1
32808: PPUSH
32809: LD_INT 1
32811: PPUSH
32812: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32816: LD_INT 9
32818: PPUSH
32819: LD_OWVAR 2
32823: PPUSH
32824: CALL_OW 343
// uc_side := 9 ;
32828: LD_ADDR_OWVAR 20
32832: PUSH
32833: LD_INT 9
32835: ST_TO_ADDR
// uc_nation := 2 ;
32836: LD_ADDR_OWVAR 21
32840: PUSH
32841: LD_INT 2
32843: ST_TO_ADDR
// hc_name := Dark Warrior ;
32844: LD_ADDR_OWVAR 26
32848: PUSH
32849: LD_STRING Dark Warrior
32851: ST_TO_ADDR
// hc_gallery :=  ;
32852: LD_ADDR_OWVAR 33
32856: PUSH
32857: LD_STRING 
32859: ST_TO_ADDR
// hc_noskilllimit := true ;
32860: LD_ADDR_OWVAR 76
32864: PUSH
32865: LD_INT 1
32867: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32868: LD_ADDR_OWVAR 31
32872: PUSH
32873: LD_INT 30
32875: PUSH
32876: LD_INT 30
32878: PUSH
32879: LD_INT 30
32881: PUSH
32882: LD_INT 30
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: ST_TO_ADDR
// un := CreateHuman ;
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: CALL_OW 44
32900: ST_TO_ADDR
// hc_noskilllimit := false ;
32901: LD_ADDR_OWVAR 76
32905: PUSH
32906: LD_INT 0
32908: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32909: LD_VAR 0 3
32913: PPUSH
32914: LD_INT 1
32916: PPUSH
32917: CALL_OW 51
// ToLua ( playRanger() ) ;
32921: LD_STRING playRanger()
32923: PPUSH
32924: CALL_OW 559
// p := 0 ;
32928: LD_ADDR_VAR 0 2
32932: PUSH
32933: LD_INT 0
32935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32936: LD_INT 35
32938: PPUSH
32939: CALL_OW 67
// p := p + 1 ;
32943: LD_ADDR_VAR 0 2
32947: PUSH
32948: LD_VAR 0 2
32952: PUSH
32953: LD_INT 1
32955: PLUS
32956: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32957: LD_VAR 0 3
32961: PPUSH
32962: CALL_OW 256
32966: PUSH
32967: LD_INT 1000
32969: LESS
32970: IFFALSE 32984
// SetLives ( un , 1000 ) ;
32972: LD_VAR 0 3
32976: PPUSH
32977: LD_INT 1000
32979: PPUSH
32980: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32984: LD_VAR 0 3
32988: PPUSH
32989: LD_INT 81
32991: PUSH
32992: LD_OWVAR 2
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 91
33003: PUSH
33004: LD_VAR 0 3
33008: PUSH
33009: LD_INT 30
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PPUSH
33021: CALL_OW 69
33025: PPUSH
33026: LD_VAR 0 3
33030: PPUSH
33031: CALL_OW 74
33035: PPUSH
33036: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33040: LD_VAR 0 2
33044: PUSH
33045: LD_INT 80
33047: GREATER
33048: PUSH
33049: LD_VAR 0 3
33053: PPUSH
33054: CALL_OW 301
33058: OR
33059: IFFALSE 32936
// if un then
33061: LD_VAR 0 3
33065: IFFALSE 33076
// RemoveUnit ( un ) ;
33067: LD_VAR 0 3
33071: PPUSH
33072: CALL_OW 64
// end ;
33076: PPOPN 3
33078: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33079: LD_EXP 103
33083: IFFALSE 33199
33085: GO 33087
33087: DISABLE
33088: LD_INT 0
33090: PPUSH
33091: PPUSH
33092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33093: LD_ADDR_VAR 0 2
33097: PUSH
33098: LD_INT 81
33100: PUSH
33101: LD_OWVAR 2
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 21
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PPUSH
33124: CALL_OW 69
33128: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33129: LD_STRING playComputer()
33131: PPUSH
33132: CALL_OW 559
// if not tmp then
33136: LD_VAR 0 2
33140: NOT
33141: IFFALSE 33145
// exit ;
33143: GO 33199
// for i in tmp do
33145: LD_ADDR_VAR 0 1
33149: PUSH
33150: LD_VAR 0 2
33154: PUSH
33155: FOR_IN
33156: IFFALSE 33197
// for j := 1 to 4 do
33158: LD_ADDR_VAR 0 3
33162: PUSH
33163: DOUBLE
33164: LD_INT 1
33166: DEC
33167: ST_TO_ADDR
33168: LD_INT 4
33170: PUSH
33171: FOR_TO
33172: IFFALSE 33193
// SetSkill ( i , j , 10 ) ;
33174: LD_VAR 0 1
33178: PPUSH
33179: LD_VAR 0 3
33183: PPUSH
33184: LD_INT 10
33186: PPUSH
33187: CALL_OW 237
33191: GO 33171
33193: POP
33194: POP
33195: GO 33155
33197: POP
33198: POP
// end ;
33199: PPOPN 3
33201: END
// every 0 0$1 trigger s30 do var i , tmp ;
33202: LD_EXP 104
33206: IFFALSE 33275
33208: GO 33210
33210: DISABLE
33211: LD_INT 0
33213: PPUSH
33214: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33215: LD_ADDR_VAR 0 2
33219: PUSH
33220: LD_INT 22
33222: PUSH
33223: LD_OWVAR 2
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PPUSH
33232: CALL_OW 69
33236: ST_TO_ADDR
// if not tmp then
33237: LD_VAR 0 2
33241: NOT
33242: IFFALSE 33246
// exit ;
33244: GO 33275
// for i in tmp do
33246: LD_ADDR_VAR 0 1
33250: PUSH
33251: LD_VAR 0 2
33255: PUSH
33256: FOR_IN
33257: IFFALSE 33273
// SetLives ( i , 300 ) ;
33259: LD_VAR 0 1
33263: PPUSH
33264: LD_INT 300
33266: PPUSH
33267: CALL_OW 234
33271: GO 33256
33273: POP
33274: POP
// end ;
33275: PPOPN 2
33277: END
// every 0 0$1 trigger s60 do var i , tmp ;
33278: LD_EXP 105
33282: IFFALSE 33351
33284: GO 33286
33286: DISABLE
33287: LD_INT 0
33289: PPUSH
33290: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33291: LD_ADDR_VAR 0 2
33295: PUSH
33296: LD_INT 22
33298: PUSH
33299: LD_OWVAR 2
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PPUSH
33308: CALL_OW 69
33312: ST_TO_ADDR
// if not tmp then
33313: LD_VAR 0 2
33317: NOT
33318: IFFALSE 33322
// exit ;
33320: GO 33351
// for i in tmp do
33322: LD_ADDR_VAR 0 1
33326: PUSH
33327: LD_VAR 0 2
33331: PUSH
33332: FOR_IN
33333: IFFALSE 33349
// SetLives ( i , 600 ) ;
33335: LD_VAR 0 1
33339: PPUSH
33340: LD_INT 600
33342: PPUSH
33343: CALL_OW 234
33347: GO 33332
33349: POP
33350: POP
// end ;
33351: PPOPN 2
33353: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33354: LD_INT 0
33356: PPUSH
// case cmd of 301 :
33357: LD_VAR 0 1
33361: PUSH
33362: LD_INT 301
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33370
33368: GO 33402
33370: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33371: LD_VAR 0 6
33375: PPUSH
33376: LD_VAR 0 7
33380: PPUSH
33381: LD_VAR 0 8
33385: PPUSH
33386: LD_VAR 0 4
33390: PPUSH
33391: LD_VAR 0 5
33395: PPUSH
33396: CALL 34603 0 5
33400: GO 33523
33402: LD_INT 302
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33410
33408: GO 33447
33410: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33411: LD_VAR 0 6
33415: PPUSH
33416: LD_VAR 0 7
33420: PPUSH
33421: LD_VAR 0 8
33425: PPUSH
33426: LD_VAR 0 9
33430: PPUSH
33431: LD_VAR 0 4
33435: PPUSH
33436: LD_VAR 0 5
33440: PPUSH
33441: CALL 34694 0 6
33445: GO 33523
33447: LD_INT 303
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33492
33455: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33456: LD_VAR 0 6
33460: PPUSH
33461: LD_VAR 0 7
33465: PPUSH
33466: LD_VAR 0 8
33470: PPUSH
33471: LD_VAR 0 9
33475: PPUSH
33476: LD_VAR 0 4
33480: PPUSH
33481: LD_VAR 0 5
33485: PPUSH
33486: CALL 33528 0 6
33490: GO 33523
33492: LD_INT 304
33494: DOUBLE
33495: EQUAL
33496: IFTRUE 33500
33498: GO 33522
33500: POP
// hHackTeleport ( unit , x , y ) ; end ;
33501: LD_VAR 0 2
33505: PPUSH
33506: LD_VAR 0 4
33510: PPUSH
33511: LD_VAR 0 5
33515: PPUSH
33516: CALL 35287 0 3
33520: GO 33523
33522: POP
// end ;
33523: LD_VAR 0 12
33527: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33528: LD_INT 0
33530: PPUSH
33531: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33532: LD_VAR 0 1
33536: PUSH
33537: LD_INT 1
33539: LESS
33540: PUSH
33541: LD_VAR 0 1
33545: PUSH
33546: LD_INT 3
33548: GREATER
33549: OR
33550: PUSH
33551: LD_VAR 0 5
33555: PPUSH
33556: LD_VAR 0 6
33560: PPUSH
33561: CALL_OW 428
33565: OR
33566: IFFALSE 33570
// exit ;
33568: GO 34290
// uc_side := your_side ;
33570: LD_ADDR_OWVAR 20
33574: PUSH
33575: LD_OWVAR 2
33579: ST_TO_ADDR
// uc_nation := nation ;
33580: LD_ADDR_OWVAR 21
33584: PUSH
33585: LD_VAR 0 1
33589: ST_TO_ADDR
// bc_level = 1 ;
33590: LD_ADDR_OWVAR 43
33594: PUSH
33595: LD_INT 1
33597: ST_TO_ADDR
// case btype of 1 :
33598: LD_VAR 0 2
33602: PUSH
33603: LD_INT 1
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33622
33611: POP
// bc_type := b_depot ; 2 :
33612: LD_ADDR_OWVAR 42
33616: PUSH
33617: LD_INT 0
33619: ST_TO_ADDR
33620: GO 34234
33622: LD_INT 2
33624: DOUBLE
33625: EQUAL
33626: IFTRUE 33630
33628: GO 33641
33630: POP
// bc_type := b_warehouse ; 3 :
33631: LD_ADDR_OWVAR 42
33635: PUSH
33636: LD_INT 1
33638: ST_TO_ADDR
33639: GO 34234
33641: LD_INT 3
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33660
33649: POP
// bc_type := b_lab ; 4 .. 9 :
33650: LD_ADDR_OWVAR 42
33654: PUSH
33655: LD_INT 6
33657: ST_TO_ADDR
33658: GO 34234
33660: LD_INT 4
33662: DOUBLE
33663: GREATEREQUAL
33664: IFFALSE 33672
33666: LD_INT 9
33668: DOUBLE
33669: LESSEQUAL
33670: IFTRUE 33674
33672: GO 33726
33674: POP
// begin bc_type := b_lab_half ;
33675: LD_ADDR_OWVAR 42
33679: PUSH
33680: LD_INT 7
33682: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33683: LD_ADDR_OWVAR 44
33687: PUSH
33688: LD_INT 10
33690: PUSH
33691: LD_INT 11
33693: PUSH
33694: LD_INT 12
33696: PUSH
33697: LD_INT 15
33699: PUSH
33700: LD_INT 14
33702: PUSH
33703: LD_INT 13
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: PUSH
33714: LD_VAR 0 2
33718: PUSH
33719: LD_INT 3
33721: MINUS
33722: ARRAY
33723: ST_TO_ADDR
// end ; 10 .. 13 :
33724: GO 34234
33726: LD_INT 10
33728: DOUBLE
33729: GREATEREQUAL
33730: IFFALSE 33738
33732: LD_INT 13
33734: DOUBLE
33735: LESSEQUAL
33736: IFTRUE 33740
33738: GO 33817
33740: POP
// begin bc_type := b_lab_full ;
33741: LD_ADDR_OWVAR 42
33745: PUSH
33746: LD_INT 8
33748: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33749: LD_ADDR_OWVAR 44
33753: PUSH
33754: LD_INT 10
33756: PUSH
33757: LD_INT 12
33759: PUSH
33760: LD_INT 14
33762: PUSH
33763: LD_INT 13
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: PUSH
33772: LD_VAR 0 2
33776: PUSH
33777: LD_INT 9
33779: MINUS
33780: ARRAY
33781: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33782: LD_ADDR_OWVAR 45
33786: PUSH
33787: LD_INT 11
33789: PUSH
33790: LD_INT 15
33792: PUSH
33793: LD_INT 12
33795: PUSH
33796: LD_INT 15
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: PUSH
33805: LD_VAR 0 2
33809: PUSH
33810: LD_INT 9
33812: MINUS
33813: ARRAY
33814: ST_TO_ADDR
// end ; 14 :
33815: GO 34234
33817: LD_INT 14
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33825
33823: GO 33836
33825: POP
// bc_type := b_workshop ; 15 :
33826: LD_ADDR_OWVAR 42
33830: PUSH
33831: LD_INT 2
33833: ST_TO_ADDR
33834: GO 34234
33836: LD_INT 15
33838: DOUBLE
33839: EQUAL
33840: IFTRUE 33844
33842: GO 33855
33844: POP
// bc_type := b_factory ; 16 :
33845: LD_ADDR_OWVAR 42
33849: PUSH
33850: LD_INT 3
33852: ST_TO_ADDR
33853: GO 34234
33855: LD_INT 16
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33863
33861: GO 33874
33863: POP
// bc_type := b_ext_gun ; 17 :
33864: LD_ADDR_OWVAR 42
33868: PUSH
33869: LD_INT 17
33871: ST_TO_ADDR
33872: GO 34234
33874: LD_INT 17
33876: DOUBLE
33877: EQUAL
33878: IFTRUE 33882
33880: GO 33910
33882: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33883: LD_ADDR_OWVAR 42
33887: PUSH
33888: LD_INT 19
33890: PUSH
33891: LD_INT 23
33893: PUSH
33894: LD_INT 19
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: PUSH
33902: LD_VAR 0 1
33906: ARRAY
33907: ST_TO_ADDR
33908: GO 34234
33910: LD_INT 18
33912: DOUBLE
33913: EQUAL
33914: IFTRUE 33918
33916: GO 33929
33918: POP
// bc_type := b_ext_radar ; 19 :
33919: LD_ADDR_OWVAR 42
33923: PUSH
33924: LD_INT 20
33926: ST_TO_ADDR
33927: GO 34234
33929: LD_INT 19
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33937
33935: GO 33948
33937: POP
// bc_type := b_ext_radio ; 20 :
33938: LD_ADDR_OWVAR 42
33942: PUSH
33943: LD_INT 22
33945: ST_TO_ADDR
33946: GO 34234
33948: LD_INT 20
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 33967
33956: POP
// bc_type := b_ext_siberium ; 21 :
33957: LD_ADDR_OWVAR 42
33961: PUSH
33962: LD_INT 21
33964: ST_TO_ADDR
33965: GO 34234
33967: LD_INT 21
33969: DOUBLE
33970: EQUAL
33971: IFTRUE 33975
33973: GO 33986
33975: POP
// bc_type := b_ext_computer ; 22 :
33976: LD_ADDR_OWVAR 42
33980: PUSH
33981: LD_INT 24
33983: ST_TO_ADDR
33984: GO 34234
33986: LD_INT 22
33988: DOUBLE
33989: EQUAL
33990: IFTRUE 33994
33992: GO 34005
33994: POP
// bc_type := b_ext_track ; 23 :
33995: LD_ADDR_OWVAR 42
33999: PUSH
34000: LD_INT 16
34002: ST_TO_ADDR
34003: GO 34234
34005: LD_INT 23
34007: DOUBLE
34008: EQUAL
34009: IFTRUE 34013
34011: GO 34024
34013: POP
// bc_type := b_ext_laser ; 24 :
34014: LD_ADDR_OWVAR 42
34018: PUSH
34019: LD_INT 25
34021: ST_TO_ADDR
34022: GO 34234
34024: LD_INT 24
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34032
34030: GO 34043
34032: POP
// bc_type := b_control_tower ; 25 :
34033: LD_ADDR_OWVAR 42
34037: PUSH
34038: LD_INT 36
34040: ST_TO_ADDR
34041: GO 34234
34043: LD_INT 25
34045: DOUBLE
34046: EQUAL
34047: IFTRUE 34051
34049: GO 34062
34051: POP
// bc_type := b_breastwork ; 26 :
34052: LD_ADDR_OWVAR 42
34056: PUSH
34057: LD_INT 31
34059: ST_TO_ADDR
34060: GO 34234
34062: LD_INT 26
34064: DOUBLE
34065: EQUAL
34066: IFTRUE 34070
34068: GO 34081
34070: POP
// bc_type := b_bunker ; 27 :
34071: LD_ADDR_OWVAR 42
34075: PUSH
34076: LD_INT 32
34078: ST_TO_ADDR
34079: GO 34234
34081: LD_INT 27
34083: DOUBLE
34084: EQUAL
34085: IFTRUE 34089
34087: GO 34100
34089: POP
// bc_type := b_turret ; 28 :
34090: LD_ADDR_OWVAR 42
34094: PUSH
34095: LD_INT 33
34097: ST_TO_ADDR
34098: GO 34234
34100: LD_INT 28
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34119
34108: POP
// bc_type := b_armoury ; 29 :
34109: LD_ADDR_OWVAR 42
34113: PUSH
34114: LD_INT 4
34116: ST_TO_ADDR
34117: GO 34234
34119: LD_INT 29
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34127
34125: GO 34138
34127: POP
// bc_type := b_barracks ; 30 :
34128: LD_ADDR_OWVAR 42
34132: PUSH
34133: LD_INT 5
34135: ST_TO_ADDR
34136: GO 34234
34138: LD_INT 30
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34146
34144: GO 34157
34146: POP
// bc_type := b_solar_power ; 31 :
34147: LD_ADDR_OWVAR 42
34151: PUSH
34152: LD_INT 27
34154: ST_TO_ADDR
34155: GO 34234
34157: LD_INT 31
34159: DOUBLE
34160: EQUAL
34161: IFTRUE 34165
34163: GO 34176
34165: POP
// bc_type := b_oil_power ; 32 :
34166: LD_ADDR_OWVAR 42
34170: PUSH
34171: LD_INT 26
34173: ST_TO_ADDR
34174: GO 34234
34176: LD_INT 32
34178: DOUBLE
34179: EQUAL
34180: IFTRUE 34184
34182: GO 34195
34184: POP
// bc_type := b_siberite_power ; 33 :
34185: LD_ADDR_OWVAR 42
34189: PUSH
34190: LD_INT 28
34192: ST_TO_ADDR
34193: GO 34234
34195: LD_INT 33
34197: DOUBLE
34198: EQUAL
34199: IFTRUE 34203
34201: GO 34214
34203: POP
// bc_type := b_oil_mine ; 34 :
34204: LD_ADDR_OWVAR 42
34208: PUSH
34209: LD_INT 29
34211: ST_TO_ADDR
34212: GO 34234
34214: LD_INT 34
34216: DOUBLE
34217: EQUAL
34218: IFTRUE 34222
34220: GO 34233
34222: POP
// bc_type := b_siberite_mine ; end ;
34223: LD_ADDR_OWVAR 42
34227: PUSH
34228: LD_INT 30
34230: ST_TO_ADDR
34231: GO 34234
34233: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34234: LD_ADDR_VAR 0 8
34238: PUSH
34239: LD_VAR 0 5
34243: PPUSH
34244: LD_VAR 0 6
34248: PPUSH
34249: LD_VAR 0 3
34253: PPUSH
34254: CALL_OW 47
34258: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34259: LD_OWVAR 42
34263: PUSH
34264: LD_INT 32
34266: PUSH
34267: LD_INT 33
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: IN
34274: IFFALSE 34290
// PlaceWeaponTurret ( b , weapon ) ;
34276: LD_VAR 0 8
34280: PPUSH
34281: LD_VAR 0 4
34285: PPUSH
34286: CALL_OW 431
// end ;
34290: LD_VAR 0 7
34294: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34295: LD_INT 0
34297: PPUSH
34298: PPUSH
34299: PPUSH
34300: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34301: LD_ADDR_VAR 0 4
34305: PUSH
34306: LD_INT 22
34308: PUSH
34309: LD_OWVAR 2
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 30
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 30
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PPUSH
34350: CALL_OW 69
34354: ST_TO_ADDR
// if not tmp then
34355: LD_VAR 0 4
34359: NOT
34360: IFFALSE 34364
// exit ;
34362: GO 34423
// for i in tmp do
34364: LD_ADDR_VAR 0 2
34368: PUSH
34369: LD_VAR 0 4
34373: PUSH
34374: FOR_IN
34375: IFFALSE 34421
// for j = 1 to 3 do
34377: LD_ADDR_VAR 0 3
34381: PUSH
34382: DOUBLE
34383: LD_INT 1
34385: DEC
34386: ST_TO_ADDR
34387: LD_INT 3
34389: PUSH
34390: FOR_TO
34391: IFFALSE 34417
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34393: LD_VAR 0 2
34397: PPUSH
34398: CALL_OW 274
34402: PPUSH
34403: LD_VAR 0 3
34407: PPUSH
34408: LD_INT 99999
34410: PPUSH
34411: CALL_OW 277
34415: GO 34390
34417: POP
34418: POP
34419: GO 34374
34421: POP
34422: POP
// end ;
34423: LD_VAR 0 1
34427: RET
// export function hHackSetLevel10 ; var i , j ; begin
34428: LD_INT 0
34430: PPUSH
34431: PPUSH
34432: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34433: LD_ADDR_VAR 0 2
34437: PUSH
34438: LD_INT 21
34440: PUSH
34441: LD_INT 1
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PPUSH
34448: CALL_OW 69
34452: PUSH
34453: FOR_IN
34454: IFFALSE 34506
// if IsSelected ( i ) then
34456: LD_VAR 0 2
34460: PPUSH
34461: CALL_OW 306
34465: IFFALSE 34504
// begin for j := 1 to 4 do
34467: LD_ADDR_VAR 0 3
34471: PUSH
34472: DOUBLE
34473: LD_INT 1
34475: DEC
34476: ST_TO_ADDR
34477: LD_INT 4
34479: PUSH
34480: FOR_TO
34481: IFFALSE 34502
// SetSkill ( i , j , 10 ) ;
34483: LD_VAR 0 2
34487: PPUSH
34488: LD_VAR 0 3
34492: PPUSH
34493: LD_INT 10
34495: PPUSH
34496: CALL_OW 237
34500: GO 34480
34502: POP
34503: POP
// end ;
34504: GO 34453
34506: POP
34507: POP
// end ;
34508: LD_VAR 0 1
34512: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34513: LD_INT 0
34515: PPUSH
34516: PPUSH
34517: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34518: LD_ADDR_VAR 0 2
34522: PUSH
34523: LD_INT 22
34525: PUSH
34526: LD_OWVAR 2
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 21
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PPUSH
34549: CALL_OW 69
34553: PUSH
34554: FOR_IN
34555: IFFALSE 34596
// begin for j := 1 to 4 do
34557: LD_ADDR_VAR 0 3
34561: PUSH
34562: DOUBLE
34563: LD_INT 1
34565: DEC
34566: ST_TO_ADDR
34567: LD_INT 4
34569: PUSH
34570: FOR_TO
34571: IFFALSE 34592
// SetSkill ( i , j , 10 ) ;
34573: LD_VAR 0 2
34577: PPUSH
34578: LD_VAR 0 3
34582: PPUSH
34583: LD_INT 10
34585: PPUSH
34586: CALL_OW 237
34590: GO 34570
34592: POP
34593: POP
// end ;
34594: GO 34554
34596: POP
34597: POP
// end ;
34598: LD_VAR 0 1
34602: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34603: LD_INT 0
34605: PPUSH
// uc_side := your_side ;
34606: LD_ADDR_OWVAR 20
34610: PUSH
34611: LD_OWVAR 2
34615: ST_TO_ADDR
// uc_nation := nation ;
34616: LD_ADDR_OWVAR 21
34620: PUSH
34621: LD_VAR 0 1
34625: ST_TO_ADDR
// InitHc ;
34626: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34630: LD_INT 0
34632: PPUSH
34633: LD_VAR 0 2
34637: PPUSH
34638: LD_VAR 0 3
34642: PPUSH
34643: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34647: LD_VAR 0 4
34651: PPUSH
34652: LD_VAR 0 5
34656: PPUSH
34657: CALL_OW 428
34661: PUSH
34662: LD_INT 0
34664: EQUAL
34665: IFFALSE 34689
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34667: CALL_OW 44
34671: PPUSH
34672: LD_VAR 0 4
34676: PPUSH
34677: LD_VAR 0 5
34681: PPUSH
34682: LD_INT 1
34684: PPUSH
34685: CALL_OW 48
// end ;
34689: LD_VAR 0 6
34693: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34694: LD_INT 0
34696: PPUSH
34697: PPUSH
// uc_side := your_side ;
34698: LD_ADDR_OWVAR 20
34702: PUSH
34703: LD_OWVAR 2
34707: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34708: LD_VAR 0 1
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 3
34721: PUSH
34722: LD_INT 4
34724: PUSH
34725: LD_INT 5
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: IN
34735: IFFALSE 34747
// uc_nation := nation_american else
34737: LD_ADDR_OWVAR 21
34741: PUSH
34742: LD_INT 1
34744: ST_TO_ADDR
34745: GO 34790
// if chassis in [ 11 , 12 , 13 , 14 ] then
34747: LD_VAR 0 1
34751: PUSH
34752: LD_INT 11
34754: PUSH
34755: LD_INT 12
34757: PUSH
34758: LD_INT 13
34760: PUSH
34761: LD_INT 14
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: IN
34770: IFFALSE 34782
// uc_nation := nation_arabian else
34772: LD_ADDR_OWVAR 21
34776: PUSH
34777: LD_INT 2
34779: ST_TO_ADDR
34780: GO 34790
// uc_nation := nation_russian ;
34782: LD_ADDR_OWVAR 21
34786: PUSH
34787: LD_INT 3
34789: ST_TO_ADDR
// vc_chassis := chassis ;
34790: LD_ADDR_OWVAR 37
34794: PUSH
34795: LD_VAR 0 1
34799: ST_TO_ADDR
// vc_engine := engine ;
34800: LD_ADDR_OWVAR 39
34804: PUSH
34805: LD_VAR 0 2
34809: ST_TO_ADDR
// vc_control := control ;
34810: LD_ADDR_OWVAR 38
34814: PUSH
34815: LD_VAR 0 3
34819: ST_TO_ADDR
// vc_weapon := weapon ;
34820: LD_ADDR_OWVAR 40
34824: PUSH
34825: LD_VAR 0 4
34829: ST_TO_ADDR
// un := CreateVehicle ;
34830: LD_ADDR_VAR 0 8
34834: PUSH
34835: CALL_OW 45
34839: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34840: LD_VAR 0 8
34844: PPUSH
34845: LD_INT 0
34847: PPUSH
34848: LD_INT 5
34850: PPUSH
34851: CALL_OW 12
34855: PPUSH
34856: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34860: LD_VAR 0 8
34864: PPUSH
34865: LD_VAR 0 5
34869: PPUSH
34870: LD_VAR 0 6
34874: PPUSH
34875: LD_INT 1
34877: PPUSH
34878: CALL_OW 48
// end ;
34882: LD_VAR 0 7
34886: RET
// export hInvincible ; every 1 do
34887: GO 34889
34889: DISABLE
// hInvincible := [ ] ;
34890: LD_ADDR_EXP 106
34894: PUSH
34895: EMPTY
34896: ST_TO_ADDR
34897: END
// every 10 do var i ;
34898: GO 34900
34900: DISABLE
34901: LD_INT 0
34903: PPUSH
// begin enable ;
34904: ENABLE
// if not hInvincible then
34905: LD_EXP 106
34909: NOT
34910: IFFALSE 34914
// exit ;
34912: GO 34958
// for i in hInvincible do
34914: LD_ADDR_VAR 0 1
34918: PUSH
34919: LD_EXP 106
34923: PUSH
34924: FOR_IN
34925: IFFALSE 34956
// if GetLives ( i ) < 1000 then
34927: LD_VAR 0 1
34931: PPUSH
34932: CALL_OW 256
34936: PUSH
34937: LD_INT 1000
34939: LESS
34940: IFFALSE 34954
// SetLives ( i , 1000 ) ;
34942: LD_VAR 0 1
34946: PPUSH
34947: LD_INT 1000
34949: PPUSH
34950: CALL_OW 234
34954: GO 34924
34956: POP
34957: POP
// end ;
34958: PPOPN 1
34960: END
// export function hHackInvincible ; var i ; begin
34961: LD_INT 0
34963: PPUSH
34964: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34965: LD_ADDR_VAR 0 2
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: LD_INT 21
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 21
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: PPUSH
34998: CALL_OW 69
35002: PUSH
35003: FOR_IN
35004: IFFALSE 35065
// if IsSelected ( i ) then
35006: LD_VAR 0 2
35010: PPUSH
35011: CALL_OW 306
35015: IFFALSE 35063
// begin if i in hInvincible then
35017: LD_VAR 0 2
35021: PUSH
35022: LD_EXP 106
35026: IN
35027: IFFALSE 35047
// hInvincible := hInvincible diff i else
35029: LD_ADDR_EXP 106
35033: PUSH
35034: LD_EXP 106
35038: PUSH
35039: LD_VAR 0 2
35043: DIFF
35044: ST_TO_ADDR
35045: GO 35063
// hInvincible := hInvincible union i ;
35047: LD_ADDR_EXP 106
35051: PUSH
35052: LD_EXP 106
35056: PUSH
35057: LD_VAR 0 2
35061: UNION
35062: ST_TO_ADDR
// end ;
35063: GO 35003
35065: POP
35066: POP
// end ;
35067: LD_VAR 0 1
35071: RET
// export function hHackInvisible ; var i , j ; begin
35072: LD_INT 0
35074: PPUSH
35075: PPUSH
35076: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35077: LD_ADDR_VAR 0 2
35081: PUSH
35082: LD_INT 21
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PPUSH
35092: CALL_OW 69
35096: PUSH
35097: FOR_IN
35098: IFFALSE 35122
// if IsSelected ( i ) then
35100: LD_VAR 0 2
35104: PPUSH
35105: CALL_OW 306
35109: IFFALSE 35120
// ComForceInvisible ( i ) ;
35111: LD_VAR 0 2
35115: PPUSH
35116: CALL_OW 496
35120: GO 35097
35122: POP
35123: POP
// end ;
35124: LD_VAR 0 1
35128: RET
// export function hHackChangeYourSide ; begin
35129: LD_INT 0
35131: PPUSH
// if your_side = 8 then
35132: LD_OWVAR 2
35136: PUSH
35137: LD_INT 8
35139: EQUAL
35140: IFFALSE 35152
// your_side := 0 else
35142: LD_ADDR_OWVAR 2
35146: PUSH
35147: LD_INT 0
35149: ST_TO_ADDR
35150: GO 35166
// your_side := your_side + 1 ;
35152: LD_ADDR_OWVAR 2
35156: PUSH
35157: LD_OWVAR 2
35161: PUSH
35162: LD_INT 1
35164: PLUS
35165: ST_TO_ADDR
// end ;
35166: LD_VAR 0 1
35170: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35171: LD_INT 0
35173: PPUSH
35174: PPUSH
35175: PPUSH
// for i in all_units do
35176: LD_ADDR_VAR 0 2
35180: PUSH
35181: LD_OWVAR 3
35185: PUSH
35186: FOR_IN
35187: IFFALSE 35265
// if IsSelected ( i ) then
35189: LD_VAR 0 2
35193: PPUSH
35194: CALL_OW 306
35198: IFFALSE 35263
// begin j := GetSide ( i ) ;
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_VAR 0 2
35209: PPUSH
35210: CALL_OW 255
35214: ST_TO_ADDR
// if j = 8 then
35215: LD_VAR 0 3
35219: PUSH
35220: LD_INT 8
35222: EQUAL
35223: IFFALSE 35235
// j := 0 else
35225: LD_ADDR_VAR 0 3
35229: PUSH
35230: LD_INT 0
35232: ST_TO_ADDR
35233: GO 35249
// j := j + 1 ;
35235: LD_ADDR_VAR 0 3
35239: PUSH
35240: LD_VAR 0 3
35244: PUSH
35245: LD_INT 1
35247: PLUS
35248: ST_TO_ADDR
// SetSide ( i , j ) ;
35249: LD_VAR 0 2
35253: PPUSH
35254: LD_VAR 0 3
35258: PPUSH
35259: CALL_OW 235
// end ;
35263: GO 35186
35265: POP
35266: POP
// end ;
35267: LD_VAR 0 1
35271: RET
// export function hHackFog ; begin
35272: LD_INT 0
35274: PPUSH
// FogOff ( true ) ;
35275: LD_INT 1
35277: PPUSH
35278: CALL_OW 344
// end ;
35282: LD_VAR 0 1
35286: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35287: LD_INT 0
35289: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35290: LD_VAR 0 1
35294: PPUSH
35295: LD_VAR 0 2
35299: PPUSH
35300: LD_VAR 0 3
35304: PPUSH
35305: LD_INT 1
35307: PPUSH
35308: LD_INT 1
35310: PPUSH
35311: CALL_OW 483
// CenterOnXY ( x , y ) ;
35315: LD_VAR 0 2
35319: PPUSH
35320: LD_VAR 0 3
35324: PPUSH
35325: CALL_OW 84
// end ;
35329: LD_VAR 0 4
35333: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35334: LD_INT 0
35336: PPUSH
35337: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35338: LD_VAR 0 1
35342: NOT
35343: PUSH
35344: LD_VAR 0 2
35348: PPUSH
35349: LD_VAR 0 3
35353: PPUSH
35354: CALL_OW 488
35358: NOT
35359: OR
35360: PUSH
35361: LD_VAR 0 1
35365: PPUSH
35366: CALL_OW 266
35370: PUSH
35371: LD_INT 3
35373: NONEQUAL
35374: PUSH
35375: LD_VAR 0 1
35379: PPUSH
35380: CALL_OW 247
35384: PUSH
35385: LD_INT 1
35387: EQUAL
35388: NOT
35389: AND
35390: OR
35391: IFFALSE 35395
// exit ;
35393: GO 35544
// if GetType ( factory ) = unit_human then
35395: LD_VAR 0 1
35399: PPUSH
35400: CALL_OW 247
35404: PUSH
35405: LD_INT 1
35407: EQUAL
35408: IFFALSE 35425
// factory := IsInUnit ( factory ) ;
35410: LD_ADDR_VAR 0 1
35414: PUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: CALL_OW 310
35424: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35425: LD_VAR 0 1
35429: PPUSH
35430: CALL_OW 266
35434: PUSH
35435: LD_INT 3
35437: NONEQUAL
35438: IFFALSE 35442
// exit ;
35440: GO 35544
// if HexInfo ( x , y ) = factory then
35442: LD_VAR 0 2
35446: PPUSH
35447: LD_VAR 0 3
35451: PPUSH
35452: CALL_OW 428
35456: PUSH
35457: LD_VAR 0 1
35461: EQUAL
35462: IFFALSE 35489
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35464: LD_ADDR_EXP 107
35468: PUSH
35469: LD_EXP 107
35473: PPUSH
35474: LD_VAR 0 1
35478: PPUSH
35479: LD_INT 0
35481: PPUSH
35482: CALL_OW 1
35486: ST_TO_ADDR
35487: GO 35540
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35489: LD_ADDR_EXP 107
35493: PUSH
35494: LD_EXP 107
35498: PPUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: LD_VAR 0 1
35508: PPUSH
35509: CALL_OW 255
35513: PUSH
35514: LD_VAR 0 1
35518: PUSH
35519: LD_VAR 0 2
35523: PUSH
35524: LD_VAR 0 3
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: PPUSH
35535: CALL_OW 1
35539: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35540: CALL 35549 0 0
// end ;
35544: LD_VAR 0 4
35548: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35549: LD_INT 0
35551: PPUSH
35552: PPUSH
35553: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35554: LD_STRING resetFactoryWaypoint();
35556: PPUSH
35557: CALL_OW 559
// if factoryWaypoints then
35561: LD_EXP 107
35565: IFFALSE 35691
// begin list := PrepareArray ( factoryWaypoints ) ;
35567: LD_ADDR_VAR 0 3
35571: PUSH
35572: LD_EXP 107
35576: PPUSH
35577: CALL 82141 0 1
35581: ST_TO_ADDR
// for i := 1 to list do
35582: LD_ADDR_VAR 0 2
35586: PUSH
35587: DOUBLE
35588: LD_INT 1
35590: DEC
35591: ST_TO_ADDR
35592: LD_VAR 0 3
35596: PUSH
35597: FOR_TO
35598: IFFALSE 35689
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35600: LD_STRING setFactoryWaypointXY(
35602: PUSH
35603: LD_VAR 0 3
35607: PUSH
35608: LD_VAR 0 2
35612: ARRAY
35613: PUSH
35614: LD_INT 1
35616: ARRAY
35617: STR
35618: PUSH
35619: LD_STRING ,
35621: STR
35622: PUSH
35623: LD_VAR 0 3
35627: PUSH
35628: LD_VAR 0 2
35632: ARRAY
35633: PUSH
35634: LD_INT 2
35636: ARRAY
35637: STR
35638: PUSH
35639: LD_STRING ,
35641: STR
35642: PUSH
35643: LD_VAR 0 3
35647: PUSH
35648: LD_VAR 0 2
35652: ARRAY
35653: PUSH
35654: LD_INT 3
35656: ARRAY
35657: STR
35658: PUSH
35659: LD_STRING ,
35661: STR
35662: PUSH
35663: LD_VAR 0 3
35667: PUSH
35668: LD_VAR 0 2
35672: ARRAY
35673: PUSH
35674: LD_INT 4
35676: ARRAY
35677: STR
35678: PUSH
35679: LD_STRING )
35681: STR
35682: PPUSH
35683: CALL_OW 559
35687: GO 35597
35689: POP
35690: POP
// end ; end ;
35691: LD_VAR 0 1
35695: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35696: LD_INT 0
35698: PPUSH
// if HexInfo ( x , y ) = warehouse then
35699: LD_VAR 0 2
35703: PPUSH
35704: LD_VAR 0 3
35708: PPUSH
35709: CALL_OW 428
35713: PUSH
35714: LD_VAR 0 1
35718: EQUAL
35719: IFFALSE 35746
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35721: LD_ADDR_EXP 108
35725: PUSH
35726: LD_EXP 108
35730: PPUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: LD_INT 0
35738: PPUSH
35739: CALL_OW 1
35743: ST_TO_ADDR
35744: GO 35797
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35746: LD_ADDR_EXP 108
35750: PUSH
35751: LD_EXP 108
35755: PPUSH
35756: LD_VAR 0 1
35760: PPUSH
35761: LD_VAR 0 1
35765: PPUSH
35766: CALL_OW 255
35770: PUSH
35771: LD_VAR 0 1
35775: PUSH
35776: LD_VAR 0 2
35780: PUSH
35781: LD_VAR 0 3
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: PPUSH
35792: CALL_OW 1
35796: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35797: CALL 35806 0 0
// end ;
35801: LD_VAR 0 4
35805: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35806: LD_INT 0
35808: PPUSH
35809: PPUSH
35810: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35811: LD_STRING resetWarehouseGatheringPoints();
35813: PPUSH
35814: CALL_OW 559
// if warehouseGatheringPoints then
35818: LD_EXP 108
35822: IFFALSE 35948
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_EXP 108
35833: PPUSH
35834: CALL 82141 0 1
35838: ST_TO_ADDR
// for i := 1 to list do
35839: LD_ADDR_VAR 0 2
35843: PUSH
35844: DOUBLE
35845: LD_INT 1
35847: DEC
35848: ST_TO_ADDR
35849: LD_VAR 0 3
35853: PUSH
35854: FOR_TO
35855: IFFALSE 35946
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35857: LD_STRING setWarehouseGatheringPointXY(
35859: PUSH
35860: LD_VAR 0 3
35864: PUSH
35865: LD_VAR 0 2
35869: ARRAY
35870: PUSH
35871: LD_INT 1
35873: ARRAY
35874: STR
35875: PUSH
35876: LD_STRING ,
35878: STR
35879: PUSH
35880: LD_VAR 0 3
35884: PUSH
35885: LD_VAR 0 2
35889: ARRAY
35890: PUSH
35891: LD_INT 2
35893: ARRAY
35894: STR
35895: PUSH
35896: LD_STRING ,
35898: STR
35899: PUSH
35900: LD_VAR 0 3
35904: PUSH
35905: LD_VAR 0 2
35909: ARRAY
35910: PUSH
35911: LD_INT 3
35913: ARRAY
35914: STR
35915: PUSH
35916: LD_STRING ,
35918: STR
35919: PUSH
35920: LD_VAR 0 3
35924: PUSH
35925: LD_VAR 0 2
35929: ARRAY
35930: PUSH
35931: LD_INT 4
35933: ARRAY
35934: STR
35935: PUSH
35936: LD_STRING )
35938: STR
35939: PPUSH
35940: CALL_OW 559
35944: GO 35854
35946: POP
35947: POP
// end ; end ;
35948: LD_VAR 0 1
35952: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35953: LD_EXP 108
35957: IFFALSE 36642
35959: GO 35961
35961: DISABLE
35962: LD_INT 0
35964: PPUSH
35965: PPUSH
35966: PPUSH
35967: PPUSH
35968: PPUSH
35969: PPUSH
35970: PPUSH
35971: PPUSH
35972: PPUSH
// begin enable ;
35973: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35974: LD_ADDR_VAR 0 3
35978: PUSH
35979: LD_EXP 108
35983: PPUSH
35984: CALL 82141 0 1
35988: ST_TO_ADDR
// if not list then
35989: LD_VAR 0 3
35993: NOT
35994: IFFALSE 35998
// exit ;
35996: GO 36642
// for i := 1 to list do
35998: LD_ADDR_VAR 0 1
36002: PUSH
36003: DOUBLE
36004: LD_INT 1
36006: DEC
36007: ST_TO_ADDR
36008: LD_VAR 0 3
36012: PUSH
36013: FOR_TO
36014: IFFALSE 36640
// begin depot := list [ i ] [ 2 ] ;
36016: LD_ADDR_VAR 0 8
36020: PUSH
36021: LD_VAR 0 3
36025: PUSH
36026: LD_VAR 0 1
36030: ARRAY
36031: PUSH
36032: LD_INT 2
36034: ARRAY
36035: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36036: LD_ADDR_VAR 0 5
36040: PUSH
36041: LD_VAR 0 3
36045: PUSH
36046: LD_VAR 0 1
36050: ARRAY
36051: PUSH
36052: LD_INT 1
36054: ARRAY
36055: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36056: LD_VAR 0 8
36060: PPUSH
36061: CALL_OW 301
36065: PUSH
36066: LD_VAR 0 5
36070: PUSH
36071: LD_VAR 0 8
36075: PPUSH
36076: CALL_OW 255
36080: NONEQUAL
36081: OR
36082: IFFALSE 36111
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36084: LD_ADDR_EXP 108
36088: PUSH
36089: LD_EXP 108
36093: PPUSH
36094: LD_VAR 0 8
36098: PPUSH
36099: LD_INT 0
36101: PPUSH
36102: CALL_OW 1
36106: ST_TO_ADDR
// exit ;
36107: POP
36108: POP
36109: GO 36642
// end ; x := list [ i ] [ 3 ] ;
36111: LD_ADDR_VAR 0 6
36115: PUSH
36116: LD_VAR 0 3
36120: PUSH
36121: LD_VAR 0 1
36125: ARRAY
36126: PUSH
36127: LD_INT 3
36129: ARRAY
36130: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36131: LD_ADDR_VAR 0 7
36135: PUSH
36136: LD_VAR 0 3
36140: PUSH
36141: LD_VAR 0 1
36145: ARRAY
36146: PUSH
36147: LD_INT 4
36149: ARRAY
36150: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36151: LD_ADDR_VAR 0 9
36155: PUSH
36156: LD_VAR 0 6
36160: PPUSH
36161: LD_VAR 0 7
36165: PPUSH
36166: LD_INT 16
36168: PPUSH
36169: CALL 80729 0 3
36173: ST_TO_ADDR
// if not cratesNearbyPoint then
36174: LD_VAR 0 9
36178: NOT
36179: IFFALSE 36185
// exit ;
36181: POP
36182: POP
36183: GO 36642
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36185: LD_ADDR_VAR 0 4
36189: PUSH
36190: LD_INT 22
36192: PUSH
36193: LD_VAR 0 5
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 3
36204: PUSH
36205: LD_INT 60
36207: PUSH
36208: EMPTY
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 91
36217: PUSH
36218: LD_VAR 0 8
36222: PUSH
36223: LD_INT 6
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: LD_INT 25
36236: PUSH
36237: LD_INT 2
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 25
36246: PUSH
36247: LD_INT 16
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: PPUSH
36265: CALL_OW 69
36269: PUSH
36270: LD_VAR 0 8
36274: PPUSH
36275: CALL_OW 313
36279: PPUSH
36280: LD_INT 3
36282: PUSH
36283: LD_INT 60
36285: PUSH
36286: EMPTY
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: LD_INT 25
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 25
36308: PUSH
36309: LD_INT 16
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PPUSH
36325: CALL_OW 72
36329: UNION
36330: ST_TO_ADDR
// if tmp then
36331: LD_VAR 0 4
36335: IFFALSE 36415
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36337: LD_ADDR_VAR 0 4
36341: PUSH
36342: LD_VAR 0 4
36346: PPUSH
36347: LD_INT 3
36349: PPUSH
36350: CALL 78698 0 2
36354: ST_TO_ADDR
// for j in tmp do
36355: LD_ADDR_VAR 0 2
36359: PUSH
36360: LD_VAR 0 4
36364: PUSH
36365: FOR_IN
36366: IFFALSE 36409
// begin if IsInUnit ( j ) then
36368: LD_VAR 0 2
36372: PPUSH
36373: CALL_OW 310
36377: IFFALSE 36388
// ComExit ( j ) ;
36379: LD_VAR 0 2
36383: PPUSH
36384: CALL 78781 0 1
// AddComCollect ( j , x , y ) ;
36388: LD_VAR 0 2
36392: PPUSH
36393: LD_VAR 0 6
36397: PPUSH
36398: LD_VAR 0 7
36402: PPUSH
36403: CALL_OW 177
// end ;
36407: GO 36365
36409: POP
36410: POP
// exit ;
36411: POP
36412: POP
36413: GO 36642
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36415: LD_ADDR_VAR 0 4
36419: PUSH
36420: LD_INT 22
36422: PUSH
36423: LD_VAR 0 5
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 91
36434: PUSH
36435: LD_VAR 0 8
36439: PUSH
36440: LD_INT 8
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 34
36453: PUSH
36454: LD_INT 12
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 34
36463: PUSH
36464: LD_INT 51
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 34
36473: PUSH
36474: LD_INT 32
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 34
36483: PUSH
36484: LD_INT 89
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: PPUSH
36503: CALL_OW 69
36507: ST_TO_ADDR
// if tmp then
36508: LD_VAR 0 4
36512: IFFALSE 36638
// begin for j in tmp do
36514: LD_ADDR_VAR 0 2
36518: PUSH
36519: LD_VAR 0 4
36523: PUSH
36524: FOR_IN
36525: IFFALSE 36636
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36527: LD_VAR 0 2
36531: PPUSH
36532: CALL_OW 262
36536: PUSH
36537: LD_INT 3
36539: EQUAL
36540: PUSH
36541: LD_VAR 0 2
36545: PPUSH
36546: CALL_OW 261
36550: PUSH
36551: LD_INT 20
36553: GREATER
36554: OR
36555: PUSH
36556: LD_VAR 0 2
36560: PPUSH
36561: CALL_OW 314
36565: NOT
36566: AND
36567: PUSH
36568: LD_VAR 0 2
36572: PPUSH
36573: CALL_OW 263
36577: PUSH
36578: LD_INT 1
36580: NONEQUAL
36581: PUSH
36582: LD_VAR 0 2
36586: PPUSH
36587: CALL_OW 311
36591: OR
36592: AND
36593: IFFALSE 36634
// begin ComCollect ( j , x , y ) ;
36595: LD_VAR 0 2
36599: PPUSH
36600: LD_VAR 0 6
36604: PPUSH
36605: LD_VAR 0 7
36609: PPUSH
36610: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36614: LD_VAR 0 2
36618: PPUSH
36619: LD_VAR 0 8
36623: PPUSH
36624: CALL_OW 172
// exit ;
36628: POP
36629: POP
36630: POP
36631: POP
36632: GO 36642
// end ;
36634: GO 36524
36636: POP
36637: POP
// end ; end ;
36638: GO 36013
36640: POP
36641: POP
// end ; end_of_file
36642: PPOPN 9
36644: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36645: LD_INT 0
36647: PPUSH
36648: PPUSH
36649: PPUSH
36650: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36651: LD_VAR 0 1
36655: PPUSH
36656: CALL_OW 264
36660: PUSH
36661: LD_INT 91
36663: EQUAL
36664: IFFALSE 36736
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36666: LD_INT 68
36668: PPUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 255
36678: PPUSH
36679: CALL_OW 321
36683: PUSH
36684: LD_INT 2
36686: EQUAL
36687: IFFALSE 36699
// eff := 70 else
36689: LD_ADDR_VAR 0 4
36693: PUSH
36694: LD_INT 70
36696: ST_TO_ADDR
36697: GO 36707
// eff := 30 ;
36699: LD_ADDR_VAR 0 4
36703: PUSH
36704: LD_INT 30
36706: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36707: LD_VAR 0 1
36711: PPUSH
36712: CALL_OW 250
36716: PPUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: CALL_OW 251
36726: PPUSH
36727: LD_VAR 0 4
36731: PPUSH
36732: CALL_OW 495
// end ; end ;
36736: LD_VAR 0 2
36740: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36741: LD_INT 0
36743: PPUSH
// end ;
36744: LD_VAR 0 4
36748: RET
// export function SOS_Command ( cmd ) ; begin
36749: LD_INT 0
36751: PPUSH
// end ;
36752: LD_VAR 0 2
36756: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36757: LD_INT 0
36759: PPUSH
// end ;
36760: LD_VAR 0 6
36764: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36765: LD_INT 0
36767: PPUSH
36768: PPUSH
// if not vehicle or not factory then
36769: LD_VAR 0 1
36773: NOT
36774: PUSH
36775: LD_VAR 0 2
36779: NOT
36780: OR
36781: IFFALSE 36785
// exit ;
36783: GO 37016
// if factoryWaypoints >= factory then
36785: LD_EXP 107
36789: PUSH
36790: LD_VAR 0 2
36794: GREATEREQUAL
36795: IFFALSE 37016
// if factoryWaypoints [ factory ] then
36797: LD_EXP 107
36801: PUSH
36802: LD_VAR 0 2
36806: ARRAY
36807: IFFALSE 37016
// begin if GetControl ( vehicle ) = control_manual then
36809: LD_VAR 0 1
36813: PPUSH
36814: CALL_OW 263
36818: PUSH
36819: LD_INT 1
36821: EQUAL
36822: IFFALSE 36903
// begin driver := IsDrivenBy ( vehicle ) ;
36824: LD_ADDR_VAR 0 4
36828: PUSH
36829: LD_VAR 0 1
36833: PPUSH
36834: CALL_OW 311
36838: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36839: LD_VAR 0 4
36843: PPUSH
36844: LD_EXP 107
36848: PUSH
36849: LD_VAR 0 2
36853: ARRAY
36854: PUSH
36855: LD_INT 3
36857: ARRAY
36858: PPUSH
36859: LD_EXP 107
36863: PUSH
36864: LD_VAR 0 2
36868: ARRAY
36869: PUSH
36870: LD_INT 4
36872: ARRAY
36873: PPUSH
36874: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36878: LD_VAR 0 4
36882: PPUSH
36883: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36887: LD_VAR 0 4
36891: PPUSH
36892: LD_VAR 0 2
36896: PPUSH
36897: CALL_OW 180
// end else
36901: GO 37016
// if GetControl ( vehicle ) = control_remote then
36903: LD_VAR 0 1
36907: PPUSH
36908: CALL_OW 263
36912: PUSH
36913: LD_INT 2
36915: EQUAL
36916: IFFALSE 36977
// begin wait ( 0 0$2 ) ;
36918: LD_INT 70
36920: PPUSH
36921: CALL_OW 67
// if Connect ( vehicle ) then
36925: LD_VAR 0 1
36929: PPUSH
36930: CALL 49040 0 1
36934: IFFALSE 36975
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36936: LD_VAR 0 1
36940: PPUSH
36941: LD_EXP 107
36945: PUSH
36946: LD_VAR 0 2
36950: ARRAY
36951: PUSH
36952: LD_INT 3
36954: ARRAY
36955: PPUSH
36956: LD_EXP 107
36960: PUSH
36961: LD_VAR 0 2
36965: ARRAY
36966: PUSH
36967: LD_INT 4
36969: ARRAY
36970: PPUSH
36971: CALL_OW 171
// end else
36975: GO 37016
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36977: LD_VAR 0 1
36981: PPUSH
36982: LD_EXP 107
36986: PUSH
36987: LD_VAR 0 2
36991: ARRAY
36992: PUSH
36993: LD_INT 3
36995: ARRAY
36996: PPUSH
36997: LD_EXP 107
37001: PUSH
37002: LD_VAR 0 2
37006: ARRAY
37007: PUSH
37008: LD_INT 4
37010: ARRAY
37011: PPUSH
37012: CALL_OW 171
// end ; end ;
37016: LD_VAR 0 3
37020: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37021: LD_INT 0
37023: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37024: LD_VAR 0 1
37028: PUSH
37029: LD_INT 250
37031: EQUAL
37032: PUSH
37033: LD_VAR 0 2
37037: PPUSH
37038: CALL_OW 264
37042: PUSH
37043: LD_INT 81
37045: EQUAL
37046: AND
37047: IFFALSE 37068
// MinerPlaceMine ( unit , x , y ) ;
37049: LD_VAR 0 2
37053: PPUSH
37054: LD_VAR 0 4
37058: PPUSH
37059: LD_VAR 0 5
37063: PPUSH
37064: CALL 39453 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37068: LD_VAR 0 1
37072: PUSH
37073: LD_INT 251
37075: EQUAL
37076: PUSH
37077: LD_VAR 0 2
37081: PPUSH
37082: CALL_OW 264
37086: PUSH
37087: LD_INT 81
37089: EQUAL
37090: AND
37091: IFFALSE 37112
// MinerDetonateMine ( unit , x , y ) ;
37093: LD_VAR 0 2
37097: PPUSH
37098: LD_VAR 0 4
37102: PPUSH
37103: LD_VAR 0 5
37107: PPUSH
37108: CALL 39728 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37112: LD_VAR 0 1
37116: PUSH
37117: LD_INT 252
37119: EQUAL
37120: PUSH
37121: LD_VAR 0 2
37125: PPUSH
37126: CALL_OW 264
37130: PUSH
37131: LD_INT 81
37133: EQUAL
37134: AND
37135: IFFALSE 37156
// MinerCreateMinefield ( unit , x , y ) ;
37137: LD_VAR 0 2
37141: PPUSH
37142: LD_VAR 0 4
37146: PPUSH
37147: LD_VAR 0 5
37151: PPUSH
37152: CALL 40145 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37156: LD_VAR 0 1
37160: PUSH
37161: LD_INT 253
37163: EQUAL
37164: PUSH
37165: LD_VAR 0 2
37169: PPUSH
37170: CALL_OW 257
37174: PUSH
37175: LD_INT 5
37177: EQUAL
37178: AND
37179: IFFALSE 37200
// ComBinocular ( unit , x , y ) ;
37181: LD_VAR 0 2
37185: PPUSH
37186: LD_VAR 0 4
37190: PPUSH
37191: LD_VAR 0 5
37195: PPUSH
37196: CALL 40514 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37200: LD_VAR 0 1
37204: PUSH
37205: LD_INT 254
37207: EQUAL
37208: PUSH
37209: LD_VAR 0 2
37213: PPUSH
37214: CALL_OW 264
37218: PUSH
37219: LD_INT 99
37221: EQUAL
37222: AND
37223: PUSH
37224: LD_VAR 0 3
37228: PPUSH
37229: CALL_OW 263
37233: PUSH
37234: LD_INT 3
37236: EQUAL
37237: AND
37238: IFFALSE 37254
// HackDestroyVehicle ( unit , selectedUnit ) ;
37240: LD_VAR 0 2
37244: PPUSH
37245: LD_VAR 0 3
37249: PPUSH
37250: CALL 38817 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37254: LD_VAR 0 1
37258: PUSH
37259: LD_INT 255
37261: EQUAL
37262: PUSH
37263: LD_VAR 0 2
37267: PPUSH
37268: CALL_OW 264
37272: PUSH
37273: LD_INT 14
37275: PUSH
37276: LD_INT 53
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: IN
37283: AND
37284: PUSH
37285: LD_VAR 0 4
37289: PPUSH
37290: LD_VAR 0 5
37294: PPUSH
37295: CALL_OW 488
37299: AND
37300: IFFALSE 37324
// CutTreeXYR ( unit , x , y , 12 ) ;
37302: LD_VAR 0 2
37306: PPUSH
37307: LD_VAR 0 4
37311: PPUSH
37312: LD_VAR 0 5
37316: PPUSH
37317: LD_INT 12
37319: PPUSH
37320: CALL 37387 0 4
// if cmd = 256 then
37324: LD_VAR 0 1
37328: PUSH
37329: LD_INT 256
37331: EQUAL
37332: IFFALSE 37353
// SetFactoryWaypoint ( unit , x , y ) ;
37334: LD_VAR 0 2
37338: PPUSH
37339: LD_VAR 0 4
37343: PPUSH
37344: LD_VAR 0 5
37348: PPUSH
37349: CALL 35334 0 3
// if cmd = 257 then
37353: LD_VAR 0 1
37357: PUSH
37358: LD_INT 257
37360: EQUAL
37361: IFFALSE 37382
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37363: LD_VAR 0 2
37367: PPUSH
37368: LD_VAR 0 4
37372: PPUSH
37373: LD_VAR 0 5
37377: PPUSH
37378: CALL 35696 0 3
// end ;
37382: LD_VAR 0 6
37386: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37387: LD_INT 0
37389: PPUSH
37390: PPUSH
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37398: LD_VAR 0 1
37402: NOT
37403: PUSH
37404: LD_VAR 0 2
37408: PPUSH
37409: LD_VAR 0 3
37413: PPUSH
37414: CALL_OW 488
37418: NOT
37419: OR
37420: PUSH
37421: LD_VAR 0 4
37425: NOT
37426: OR
37427: IFFALSE 37431
// exit ;
37429: GO 37771
// list := [ ] ;
37431: LD_ADDR_VAR 0 13
37435: PUSH
37436: EMPTY
37437: ST_TO_ADDR
// if x - r < 0 then
37438: LD_VAR 0 2
37442: PUSH
37443: LD_VAR 0 4
37447: MINUS
37448: PUSH
37449: LD_INT 0
37451: LESS
37452: IFFALSE 37464
// min_x := 0 else
37454: LD_ADDR_VAR 0 7
37458: PUSH
37459: LD_INT 0
37461: ST_TO_ADDR
37462: GO 37480
// min_x := x - r ;
37464: LD_ADDR_VAR 0 7
37468: PUSH
37469: LD_VAR 0 2
37473: PUSH
37474: LD_VAR 0 4
37478: MINUS
37479: ST_TO_ADDR
// if y - r < 0 then
37480: LD_VAR 0 3
37484: PUSH
37485: LD_VAR 0 4
37489: MINUS
37490: PUSH
37491: LD_INT 0
37493: LESS
37494: IFFALSE 37506
// min_y := 0 else
37496: LD_ADDR_VAR 0 8
37500: PUSH
37501: LD_INT 0
37503: ST_TO_ADDR
37504: GO 37522
// min_y := y - r ;
37506: LD_ADDR_VAR 0 8
37510: PUSH
37511: LD_VAR 0 3
37515: PUSH
37516: LD_VAR 0 4
37520: MINUS
37521: ST_TO_ADDR
// max_x := x + r ;
37522: LD_ADDR_VAR 0 9
37526: PUSH
37527: LD_VAR 0 2
37531: PUSH
37532: LD_VAR 0 4
37536: PLUS
37537: ST_TO_ADDR
// max_y := y + r ;
37538: LD_ADDR_VAR 0 10
37542: PUSH
37543: LD_VAR 0 3
37547: PUSH
37548: LD_VAR 0 4
37552: PLUS
37553: ST_TO_ADDR
// for _x = min_x to max_x do
37554: LD_ADDR_VAR 0 11
37558: PUSH
37559: DOUBLE
37560: LD_VAR 0 7
37564: DEC
37565: ST_TO_ADDR
37566: LD_VAR 0 9
37570: PUSH
37571: FOR_TO
37572: IFFALSE 37689
// for _y = min_y to max_y do
37574: LD_ADDR_VAR 0 12
37578: PUSH
37579: DOUBLE
37580: LD_VAR 0 8
37584: DEC
37585: ST_TO_ADDR
37586: LD_VAR 0 10
37590: PUSH
37591: FOR_TO
37592: IFFALSE 37685
// begin if not ValidHex ( _x , _y ) then
37594: LD_VAR 0 11
37598: PPUSH
37599: LD_VAR 0 12
37603: PPUSH
37604: CALL_OW 488
37608: NOT
37609: IFFALSE 37613
// continue ;
37611: GO 37591
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37613: LD_VAR 0 11
37617: PPUSH
37618: LD_VAR 0 12
37622: PPUSH
37623: CALL_OW 351
37627: PUSH
37628: LD_VAR 0 11
37632: PPUSH
37633: LD_VAR 0 12
37637: PPUSH
37638: CALL_OW 554
37642: AND
37643: IFFALSE 37683
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37645: LD_ADDR_VAR 0 13
37649: PUSH
37650: LD_VAR 0 13
37654: PPUSH
37655: LD_VAR 0 13
37659: PUSH
37660: LD_INT 1
37662: PLUS
37663: PPUSH
37664: LD_VAR 0 11
37668: PUSH
37669: LD_VAR 0 12
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PPUSH
37678: CALL_OW 2
37682: ST_TO_ADDR
// end ;
37683: GO 37591
37685: POP
37686: POP
37687: GO 37571
37689: POP
37690: POP
// if not list then
37691: LD_VAR 0 13
37695: NOT
37696: IFFALSE 37700
// exit ;
37698: GO 37771
// for i in list do
37700: LD_ADDR_VAR 0 6
37704: PUSH
37705: LD_VAR 0 13
37709: PUSH
37710: FOR_IN
37711: IFFALSE 37769
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37713: LD_VAR 0 1
37717: PPUSH
37718: LD_STRING M
37720: PUSH
37721: LD_VAR 0 6
37725: PUSH
37726: LD_INT 1
37728: ARRAY
37729: PUSH
37730: LD_VAR 0 6
37734: PUSH
37735: LD_INT 2
37737: ARRAY
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: PUSH
37760: EMPTY
37761: LIST
37762: PPUSH
37763: CALL_OW 447
37767: GO 37710
37769: POP
37770: POP
// end ;
37771: LD_VAR 0 5
37775: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37776: LD_EXP 110
37780: NOT
37781: IFFALSE 37831
37783: GO 37785
37785: DISABLE
// begin initHack := true ;
37786: LD_ADDR_EXP 110
37790: PUSH
37791: LD_INT 1
37793: ST_TO_ADDR
// hackTanks := [ ] ;
37794: LD_ADDR_EXP 111
37798: PUSH
37799: EMPTY
37800: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37801: LD_ADDR_EXP 112
37805: PUSH
37806: EMPTY
37807: ST_TO_ADDR
// hackLimit := 3 ;
37808: LD_ADDR_EXP 113
37812: PUSH
37813: LD_INT 3
37815: ST_TO_ADDR
// hackDist := 12 ;
37816: LD_ADDR_EXP 114
37820: PUSH
37821: LD_INT 12
37823: ST_TO_ADDR
// hackCounter := [ ] ;
37824: LD_ADDR_EXP 115
37828: PUSH
37829: EMPTY
37830: ST_TO_ADDR
// end ;
37831: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37832: LD_EXP 110
37836: PUSH
37837: LD_INT 34
37839: PUSH
37840: LD_INT 99
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PPUSH
37847: CALL_OW 69
37851: AND
37852: IFFALSE 38105
37854: GO 37856
37856: DISABLE
37857: LD_INT 0
37859: PPUSH
37860: PPUSH
// begin enable ;
37861: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37862: LD_ADDR_VAR 0 1
37866: PUSH
37867: LD_INT 34
37869: PUSH
37870: LD_INT 99
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PPUSH
37877: CALL_OW 69
37881: PUSH
37882: FOR_IN
37883: IFFALSE 38103
// begin if not i in hackTanks then
37885: LD_VAR 0 1
37889: PUSH
37890: LD_EXP 111
37894: IN
37895: NOT
37896: IFFALSE 37979
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37898: LD_ADDR_EXP 111
37902: PUSH
37903: LD_EXP 111
37907: PPUSH
37908: LD_EXP 111
37912: PUSH
37913: LD_INT 1
37915: PLUS
37916: PPUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 1
37926: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37927: LD_ADDR_EXP 112
37931: PUSH
37932: LD_EXP 112
37936: PPUSH
37937: LD_EXP 112
37941: PUSH
37942: LD_INT 1
37944: PLUS
37945: PPUSH
37946: EMPTY
37947: PPUSH
37948: CALL_OW 1
37952: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37953: LD_ADDR_EXP 115
37957: PUSH
37958: LD_EXP 115
37962: PPUSH
37963: LD_EXP 115
37967: PUSH
37968: LD_INT 1
37970: PLUS
37971: PPUSH
37972: EMPTY
37973: PPUSH
37974: CALL_OW 1
37978: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37979: LD_VAR 0 1
37983: PPUSH
37984: CALL_OW 302
37988: NOT
37989: IFFALSE 38002
// begin HackUnlinkAll ( i ) ;
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL 38108 0 1
// continue ;
38000: GO 37882
// end ; HackCheckCapturedStatus ( i ) ;
38002: LD_VAR 0 1
38006: PPUSH
38007: CALL 38551 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38011: LD_ADDR_VAR 0 2
38015: PUSH
38016: LD_INT 81
38018: PUSH
38019: LD_VAR 0 1
38023: PPUSH
38024: CALL_OW 255
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 33
38035: PUSH
38036: LD_INT 3
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 91
38045: PUSH
38046: LD_VAR 0 1
38050: PUSH
38051: LD_EXP 114
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 50
38063: PUSH
38064: EMPTY
38065: LIST
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: PPUSH
38073: CALL_OW 69
38077: ST_TO_ADDR
// if not tmp then
38078: LD_VAR 0 2
38082: NOT
38083: IFFALSE 38087
// continue ;
38085: GO 37882
// HackLink ( i , tmp ) ;
38087: LD_VAR 0 1
38091: PPUSH
38092: LD_VAR 0 2
38096: PPUSH
38097: CALL 38244 0 2
// end ;
38101: GO 37882
38103: POP
38104: POP
// end ;
38105: PPOPN 2
38107: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38108: LD_INT 0
38110: PPUSH
38111: PPUSH
38112: PPUSH
// if not hack in hackTanks then
38113: LD_VAR 0 1
38117: PUSH
38118: LD_EXP 111
38122: IN
38123: NOT
38124: IFFALSE 38128
// exit ;
38126: GO 38239
// index := GetElementIndex ( hackTanks , hack ) ;
38128: LD_ADDR_VAR 0 4
38132: PUSH
38133: LD_EXP 111
38137: PPUSH
38138: LD_VAR 0 1
38142: PPUSH
38143: CALL 45856 0 2
38147: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38148: LD_EXP 112
38152: PUSH
38153: LD_VAR 0 4
38157: ARRAY
38158: IFFALSE 38239
// begin for i in hackTanksCaptured [ index ] do
38160: LD_ADDR_VAR 0 3
38164: PUSH
38165: LD_EXP 112
38169: PUSH
38170: LD_VAR 0 4
38174: ARRAY
38175: PUSH
38176: FOR_IN
38177: IFFALSE 38203
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38179: LD_VAR 0 3
38183: PUSH
38184: LD_INT 1
38186: ARRAY
38187: PPUSH
38188: LD_VAR 0 3
38192: PUSH
38193: LD_INT 2
38195: ARRAY
38196: PPUSH
38197: CALL_OW 235
38201: GO 38176
38203: POP
38204: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38205: LD_ADDR_EXP 112
38209: PUSH
38210: LD_EXP 112
38214: PPUSH
38215: LD_VAR 0 4
38219: PPUSH
38220: EMPTY
38221: PPUSH
38222: CALL_OW 1
38226: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38227: LD_VAR 0 1
38231: PPUSH
38232: LD_INT 0
38234: PPUSH
38235: CALL_OW 505
// end ; end ;
38239: LD_VAR 0 2
38243: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38244: LD_INT 0
38246: PPUSH
38247: PPUSH
38248: PPUSH
// if not hack in hackTanks or not vehicles then
38249: LD_VAR 0 1
38253: PUSH
38254: LD_EXP 111
38258: IN
38259: NOT
38260: PUSH
38261: LD_VAR 0 2
38265: NOT
38266: OR
38267: IFFALSE 38271
// exit ;
38269: GO 38546
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38271: LD_ADDR_VAR 0 2
38275: PUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: LD_VAR 0 2
38285: PPUSH
38286: LD_INT 1
38288: PPUSH
38289: LD_INT 1
38291: PPUSH
38292: CALL 46506 0 4
38296: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38297: LD_ADDR_VAR 0 5
38301: PUSH
38302: LD_EXP 111
38306: PPUSH
38307: LD_VAR 0 1
38311: PPUSH
38312: CALL 45856 0 2
38316: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38317: LD_EXP 112
38321: PUSH
38322: LD_VAR 0 5
38326: ARRAY
38327: PUSH
38328: LD_EXP 113
38332: LESS
38333: IFFALSE 38522
// begin for i := 1 to vehicles do
38335: LD_ADDR_VAR 0 4
38339: PUSH
38340: DOUBLE
38341: LD_INT 1
38343: DEC
38344: ST_TO_ADDR
38345: LD_VAR 0 2
38349: PUSH
38350: FOR_TO
38351: IFFALSE 38520
// begin if hackTanksCaptured [ index ] = hackLimit then
38353: LD_EXP 112
38357: PUSH
38358: LD_VAR 0 5
38362: ARRAY
38363: PUSH
38364: LD_EXP 113
38368: EQUAL
38369: IFFALSE 38373
// break ;
38371: GO 38520
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38373: LD_ADDR_EXP 115
38377: PUSH
38378: LD_EXP 115
38382: PPUSH
38383: LD_VAR 0 5
38387: PPUSH
38388: LD_EXP 115
38392: PUSH
38393: LD_VAR 0 5
38397: ARRAY
38398: PUSH
38399: LD_INT 1
38401: PLUS
38402: PPUSH
38403: CALL_OW 1
38407: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38408: LD_ADDR_EXP 112
38412: PUSH
38413: LD_EXP 112
38417: PPUSH
38418: LD_VAR 0 5
38422: PUSH
38423: LD_EXP 112
38427: PUSH
38428: LD_VAR 0 5
38432: ARRAY
38433: PUSH
38434: LD_INT 1
38436: PLUS
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PPUSH
38442: LD_VAR 0 2
38446: PUSH
38447: LD_VAR 0 4
38451: ARRAY
38452: PUSH
38453: LD_VAR 0 2
38457: PUSH
38458: LD_VAR 0 4
38462: ARRAY
38463: PPUSH
38464: CALL_OW 255
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PPUSH
38473: CALL 46071 0 3
38477: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38478: LD_VAR 0 2
38482: PUSH
38483: LD_VAR 0 4
38487: ARRAY
38488: PPUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 255
38498: PPUSH
38499: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38503: LD_VAR 0 2
38507: PUSH
38508: LD_VAR 0 4
38512: ARRAY
38513: PPUSH
38514: CALL_OW 141
// end ;
38518: GO 38350
38520: POP
38521: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38522: LD_VAR 0 1
38526: PPUSH
38527: LD_EXP 112
38531: PUSH
38532: LD_VAR 0 5
38536: ARRAY
38537: PUSH
38538: LD_INT 0
38540: PLUS
38541: PPUSH
38542: CALL_OW 505
// end ;
38546: LD_VAR 0 3
38550: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38551: LD_INT 0
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
// if not hack in hackTanks then
38557: LD_VAR 0 1
38561: PUSH
38562: LD_EXP 111
38566: IN
38567: NOT
38568: IFFALSE 38572
// exit ;
38570: GO 38812
// index := GetElementIndex ( hackTanks , hack ) ;
38572: LD_ADDR_VAR 0 4
38576: PUSH
38577: LD_EXP 111
38581: PPUSH
38582: LD_VAR 0 1
38586: PPUSH
38587: CALL 45856 0 2
38591: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38592: LD_ADDR_VAR 0 3
38596: PUSH
38597: DOUBLE
38598: LD_EXP 112
38602: PUSH
38603: LD_VAR 0 4
38607: ARRAY
38608: INC
38609: ST_TO_ADDR
38610: LD_INT 1
38612: PUSH
38613: FOR_DOWNTO
38614: IFFALSE 38786
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38616: LD_ADDR_VAR 0 5
38620: PUSH
38621: LD_EXP 112
38625: PUSH
38626: LD_VAR 0 4
38630: ARRAY
38631: PUSH
38632: LD_VAR 0 3
38636: ARRAY
38637: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38638: LD_VAR 0 5
38642: PUSH
38643: LD_INT 1
38645: ARRAY
38646: PPUSH
38647: CALL_OW 302
38651: NOT
38652: PUSH
38653: LD_VAR 0 5
38657: PUSH
38658: LD_INT 1
38660: ARRAY
38661: PPUSH
38662: CALL_OW 255
38666: PUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 255
38676: NONEQUAL
38677: OR
38678: IFFALSE 38784
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38680: LD_VAR 0 5
38684: PUSH
38685: LD_INT 1
38687: ARRAY
38688: PPUSH
38689: CALL_OW 305
38693: PUSH
38694: LD_VAR 0 5
38698: PUSH
38699: LD_INT 1
38701: ARRAY
38702: PPUSH
38703: CALL_OW 255
38707: PUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL_OW 255
38717: EQUAL
38718: AND
38719: IFFALSE 38743
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38721: LD_VAR 0 5
38725: PUSH
38726: LD_INT 1
38728: ARRAY
38729: PPUSH
38730: LD_VAR 0 5
38734: PUSH
38735: LD_INT 2
38737: ARRAY
38738: PPUSH
38739: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38743: LD_ADDR_EXP 112
38747: PUSH
38748: LD_EXP 112
38752: PPUSH
38753: LD_VAR 0 4
38757: PPUSH
38758: LD_EXP 112
38762: PUSH
38763: LD_VAR 0 4
38767: ARRAY
38768: PPUSH
38769: LD_VAR 0 3
38773: PPUSH
38774: CALL_OW 3
38778: PPUSH
38779: CALL_OW 1
38783: ST_TO_ADDR
// end ; end ;
38784: GO 38613
38786: POP
38787: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38788: LD_VAR 0 1
38792: PPUSH
38793: LD_EXP 112
38797: PUSH
38798: LD_VAR 0 4
38802: ARRAY
38803: PUSH
38804: LD_INT 0
38806: PLUS
38807: PPUSH
38808: CALL_OW 505
// end ;
38812: LD_VAR 0 2
38816: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38817: LD_INT 0
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
// if not hack in hackTanks then
38823: LD_VAR 0 1
38827: PUSH
38828: LD_EXP 111
38832: IN
38833: NOT
38834: IFFALSE 38838
// exit ;
38836: GO 38923
// index := GetElementIndex ( hackTanks , hack ) ;
38838: LD_ADDR_VAR 0 5
38842: PUSH
38843: LD_EXP 111
38847: PPUSH
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL 45856 0 2
38857: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38858: LD_ADDR_VAR 0 4
38862: PUSH
38863: DOUBLE
38864: LD_INT 1
38866: DEC
38867: ST_TO_ADDR
38868: LD_EXP 112
38872: PUSH
38873: LD_VAR 0 5
38877: ARRAY
38878: PUSH
38879: FOR_TO
38880: IFFALSE 38921
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38882: LD_EXP 112
38886: PUSH
38887: LD_VAR 0 5
38891: ARRAY
38892: PUSH
38893: LD_VAR 0 4
38897: ARRAY
38898: PUSH
38899: LD_INT 1
38901: ARRAY
38902: PUSH
38903: LD_VAR 0 2
38907: EQUAL
38908: IFFALSE 38919
// KillUnit ( vehicle ) ;
38910: LD_VAR 0 2
38914: PPUSH
38915: CALL_OW 66
38919: GO 38879
38921: POP
38922: POP
// end ;
38923: LD_VAR 0 3
38927: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38928: LD_EXP 116
38932: NOT
38933: IFFALSE 38968
38935: GO 38937
38937: DISABLE
// begin initMiner := true ;
38938: LD_ADDR_EXP 116
38942: PUSH
38943: LD_INT 1
38945: ST_TO_ADDR
// minersList := [ ] ;
38946: LD_ADDR_EXP 117
38950: PUSH
38951: EMPTY
38952: ST_TO_ADDR
// minerMinesList := [ ] ;
38953: LD_ADDR_EXP 118
38957: PUSH
38958: EMPTY
38959: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38960: LD_ADDR_EXP 119
38964: PUSH
38965: LD_INT 5
38967: ST_TO_ADDR
// end ;
38968: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38969: LD_EXP 116
38973: PUSH
38974: LD_INT 34
38976: PUSH
38977: LD_INT 81
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PPUSH
38984: CALL_OW 69
38988: AND
38989: IFFALSE 39450
38991: GO 38993
38993: DISABLE
38994: LD_INT 0
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
// begin enable ;
39000: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39001: LD_ADDR_VAR 0 1
39005: PUSH
39006: LD_INT 34
39008: PUSH
39009: LD_INT 81
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PPUSH
39016: CALL_OW 69
39020: PUSH
39021: FOR_IN
39022: IFFALSE 39094
// begin if not i in minersList then
39024: LD_VAR 0 1
39028: PUSH
39029: LD_EXP 117
39033: IN
39034: NOT
39035: IFFALSE 39092
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39037: LD_ADDR_EXP 117
39041: PUSH
39042: LD_EXP 117
39046: PPUSH
39047: LD_EXP 117
39051: PUSH
39052: LD_INT 1
39054: PLUS
39055: PPUSH
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 1
39065: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39066: LD_ADDR_EXP 118
39070: PUSH
39071: LD_EXP 118
39075: PPUSH
39076: LD_EXP 118
39080: PUSH
39081: LD_INT 1
39083: PLUS
39084: PPUSH
39085: EMPTY
39086: PPUSH
39087: CALL_OW 1
39091: ST_TO_ADDR
// end end ;
39092: GO 39021
39094: POP
39095: POP
// for i := minerMinesList downto 1 do
39096: LD_ADDR_VAR 0 1
39100: PUSH
39101: DOUBLE
39102: LD_EXP 118
39106: INC
39107: ST_TO_ADDR
39108: LD_INT 1
39110: PUSH
39111: FOR_DOWNTO
39112: IFFALSE 39448
// begin if IsLive ( minersList [ i ] ) then
39114: LD_EXP 117
39118: PUSH
39119: LD_VAR 0 1
39123: ARRAY
39124: PPUSH
39125: CALL_OW 300
39129: IFFALSE 39157
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39131: LD_EXP 117
39135: PUSH
39136: LD_VAR 0 1
39140: ARRAY
39141: PPUSH
39142: LD_EXP 118
39146: PUSH
39147: LD_VAR 0 1
39151: ARRAY
39152: PPUSH
39153: CALL_OW 505
// if not minerMinesList [ i ] then
39157: LD_EXP 118
39161: PUSH
39162: LD_VAR 0 1
39166: ARRAY
39167: NOT
39168: IFFALSE 39172
// continue ;
39170: GO 39111
// for j := minerMinesList [ i ] downto 1 do
39172: LD_ADDR_VAR 0 2
39176: PUSH
39177: DOUBLE
39178: LD_EXP 118
39182: PUSH
39183: LD_VAR 0 1
39187: ARRAY
39188: INC
39189: ST_TO_ADDR
39190: LD_INT 1
39192: PUSH
39193: FOR_DOWNTO
39194: IFFALSE 39444
// begin side := GetSide ( minersList [ i ] ) ;
39196: LD_ADDR_VAR 0 3
39200: PUSH
39201: LD_EXP 117
39205: PUSH
39206: LD_VAR 0 1
39210: ARRAY
39211: PPUSH
39212: CALL_OW 255
39216: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39217: LD_ADDR_VAR 0 4
39221: PUSH
39222: LD_EXP 118
39226: PUSH
39227: LD_VAR 0 1
39231: ARRAY
39232: PUSH
39233: LD_VAR 0 2
39237: ARRAY
39238: PUSH
39239: LD_INT 1
39241: ARRAY
39242: PPUSH
39243: LD_EXP 118
39247: PUSH
39248: LD_VAR 0 1
39252: ARRAY
39253: PUSH
39254: LD_VAR 0 2
39258: ARRAY
39259: PUSH
39260: LD_INT 2
39262: ARRAY
39263: PPUSH
39264: CALL_OW 428
39268: ST_TO_ADDR
// if not tmp then
39269: LD_VAR 0 4
39273: NOT
39274: IFFALSE 39278
// continue ;
39276: GO 39193
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39278: LD_VAR 0 4
39282: PUSH
39283: LD_INT 81
39285: PUSH
39286: LD_VAR 0 3
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PPUSH
39295: CALL_OW 69
39299: IN
39300: PUSH
39301: LD_EXP 118
39305: PUSH
39306: LD_VAR 0 1
39310: ARRAY
39311: PUSH
39312: LD_VAR 0 2
39316: ARRAY
39317: PUSH
39318: LD_INT 1
39320: ARRAY
39321: PPUSH
39322: LD_EXP 118
39326: PUSH
39327: LD_VAR 0 1
39331: ARRAY
39332: PUSH
39333: LD_VAR 0 2
39337: ARRAY
39338: PUSH
39339: LD_INT 2
39341: ARRAY
39342: PPUSH
39343: CALL_OW 458
39347: AND
39348: IFFALSE 39442
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39350: LD_EXP 118
39354: PUSH
39355: LD_VAR 0 1
39359: ARRAY
39360: PUSH
39361: LD_VAR 0 2
39365: ARRAY
39366: PUSH
39367: LD_INT 1
39369: ARRAY
39370: PPUSH
39371: LD_EXP 118
39375: PUSH
39376: LD_VAR 0 1
39380: ARRAY
39381: PUSH
39382: LD_VAR 0 2
39386: ARRAY
39387: PUSH
39388: LD_INT 2
39390: ARRAY
39391: PPUSH
39392: LD_VAR 0 3
39396: PPUSH
39397: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39401: LD_ADDR_EXP 118
39405: PUSH
39406: LD_EXP 118
39410: PPUSH
39411: LD_VAR 0 1
39415: PPUSH
39416: LD_EXP 118
39420: PUSH
39421: LD_VAR 0 1
39425: ARRAY
39426: PPUSH
39427: LD_VAR 0 2
39431: PPUSH
39432: CALL_OW 3
39436: PPUSH
39437: CALL_OW 1
39441: ST_TO_ADDR
// end ; end ;
39442: GO 39193
39444: POP
39445: POP
// end ;
39446: GO 39111
39448: POP
39449: POP
// end ;
39450: PPOPN 4
39452: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39453: LD_INT 0
39455: PPUSH
39456: PPUSH
// result := false ;
39457: LD_ADDR_VAR 0 4
39461: PUSH
39462: LD_INT 0
39464: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 264
39474: PUSH
39475: LD_INT 81
39477: EQUAL
39478: NOT
39479: IFFALSE 39483
// exit ;
39481: GO 39723
// index := GetElementIndex ( minersList , unit ) ;
39483: LD_ADDR_VAR 0 5
39487: PUSH
39488: LD_EXP 117
39492: PPUSH
39493: LD_VAR 0 1
39497: PPUSH
39498: CALL 45856 0 2
39502: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39503: LD_EXP 118
39507: PUSH
39508: LD_VAR 0 5
39512: ARRAY
39513: PUSH
39514: LD_EXP 119
39518: GREATEREQUAL
39519: IFFALSE 39523
// exit ;
39521: GO 39723
// ComMoveXY ( unit , x , y ) ;
39523: LD_VAR 0 1
39527: PPUSH
39528: LD_VAR 0 2
39532: PPUSH
39533: LD_VAR 0 3
39537: PPUSH
39538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39542: LD_INT 35
39544: PPUSH
39545: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39549: LD_VAR 0 1
39553: PPUSH
39554: LD_VAR 0 2
39558: PPUSH
39559: LD_VAR 0 3
39563: PPUSH
39564: CALL 77192 0 3
39568: NOT
39569: PUSH
39570: LD_VAR 0 1
39574: PPUSH
39575: CALL_OW 314
39579: AND
39580: IFFALSE 39584
// exit ;
39582: GO 39723
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39584: LD_VAR 0 2
39588: PPUSH
39589: LD_VAR 0 3
39593: PPUSH
39594: CALL_OW 428
39598: PUSH
39599: LD_VAR 0 1
39603: EQUAL
39604: PUSH
39605: LD_VAR 0 1
39609: PPUSH
39610: CALL_OW 314
39614: NOT
39615: AND
39616: IFFALSE 39542
// PlaySoundXY ( x , y , PlantMine ) ;
39618: LD_VAR 0 2
39622: PPUSH
39623: LD_VAR 0 3
39627: PPUSH
39628: LD_STRING PlantMine
39630: PPUSH
39631: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39635: LD_VAR 0 2
39639: PPUSH
39640: LD_VAR 0 3
39644: PPUSH
39645: LD_VAR 0 1
39649: PPUSH
39650: CALL_OW 255
39654: PPUSH
39655: LD_INT 0
39657: PPUSH
39658: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39662: LD_ADDR_EXP 118
39666: PUSH
39667: LD_EXP 118
39671: PPUSH
39672: LD_VAR 0 5
39676: PUSH
39677: LD_EXP 118
39681: PUSH
39682: LD_VAR 0 5
39686: ARRAY
39687: PUSH
39688: LD_INT 1
39690: PLUS
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PPUSH
39696: LD_VAR 0 2
39700: PUSH
39701: LD_VAR 0 3
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PPUSH
39710: CALL 46071 0 3
39714: ST_TO_ADDR
// result := true ;
39715: LD_ADDR_VAR 0 4
39719: PUSH
39720: LD_INT 1
39722: ST_TO_ADDR
// end ;
39723: LD_VAR 0 4
39727: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39728: LD_INT 0
39730: PPUSH
39731: PPUSH
39732: PPUSH
// if not unit in minersList then
39733: LD_VAR 0 1
39737: PUSH
39738: LD_EXP 117
39742: IN
39743: NOT
39744: IFFALSE 39748
// exit ;
39746: GO 40140
// index := GetElementIndex ( minersList , unit ) ;
39748: LD_ADDR_VAR 0 6
39752: PUSH
39753: LD_EXP 117
39757: PPUSH
39758: LD_VAR 0 1
39762: PPUSH
39763: CALL 45856 0 2
39767: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39768: LD_ADDR_VAR 0 5
39772: PUSH
39773: DOUBLE
39774: LD_EXP 118
39778: PUSH
39779: LD_VAR 0 6
39783: ARRAY
39784: INC
39785: ST_TO_ADDR
39786: LD_INT 1
39788: PUSH
39789: FOR_DOWNTO
39790: IFFALSE 39951
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39792: LD_EXP 118
39796: PUSH
39797: LD_VAR 0 6
39801: ARRAY
39802: PUSH
39803: LD_VAR 0 5
39807: ARRAY
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: PUSH
39813: LD_VAR 0 2
39817: EQUAL
39818: PUSH
39819: LD_EXP 118
39823: PUSH
39824: LD_VAR 0 6
39828: ARRAY
39829: PUSH
39830: LD_VAR 0 5
39834: ARRAY
39835: PUSH
39836: LD_INT 2
39838: ARRAY
39839: PUSH
39840: LD_VAR 0 3
39844: EQUAL
39845: AND
39846: IFFALSE 39949
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39848: LD_EXP 118
39852: PUSH
39853: LD_VAR 0 6
39857: ARRAY
39858: PUSH
39859: LD_VAR 0 5
39863: ARRAY
39864: PUSH
39865: LD_INT 1
39867: ARRAY
39868: PPUSH
39869: LD_EXP 118
39873: PUSH
39874: LD_VAR 0 6
39878: ARRAY
39879: PUSH
39880: LD_VAR 0 5
39884: ARRAY
39885: PUSH
39886: LD_INT 2
39888: ARRAY
39889: PPUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 255
39899: PPUSH
39900: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39904: LD_ADDR_EXP 118
39908: PUSH
39909: LD_EXP 118
39913: PPUSH
39914: LD_VAR 0 6
39918: PPUSH
39919: LD_EXP 118
39923: PUSH
39924: LD_VAR 0 6
39928: ARRAY
39929: PPUSH
39930: LD_VAR 0 5
39934: PPUSH
39935: CALL_OW 3
39939: PPUSH
39940: CALL_OW 1
39944: ST_TO_ADDR
// exit ;
39945: POP
39946: POP
39947: GO 40140
// end ; end ;
39949: GO 39789
39951: POP
39952: POP
// for i := minerMinesList [ index ] downto 1 do
39953: LD_ADDR_VAR 0 5
39957: PUSH
39958: DOUBLE
39959: LD_EXP 118
39963: PUSH
39964: LD_VAR 0 6
39968: ARRAY
39969: INC
39970: ST_TO_ADDR
39971: LD_INT 1
39973: PUSH
39974: FOR_DOWNTO
39975: IFFALSE 40138
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39977: LD_EXP 118
39981: PUSH
39982: LD_VAR 0 6
39986: ARRAY
39987: PUSH
39988: LD_VAR 0 5
39992: ARRAY
39993: PUSH
39994: LD_INT 1
39996: ARRAY
39997: PPUSH
39998: LD_EXP 118
40002: PUSH
40003: LD_VAR 0 6
40007: ARRAY
40008: PUSH
40009: LD_VAR 0 5
40013: ARRAY
40014: PUSH
40015: LD_INT 2
40017: ARRAY
40018: PPUSH
40019: LD_VAR 0 2
40023: PPUSH
40024: LD_VAR 0 3
40028: PPUSH
40029: CALL_OW 298
40033: PUSH
40034: LD_INT 6
40036: LESS
40037: IFFALSE 40136
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40039: LD_EXP 118
40043: PUSH
40044: LD_VAR 0 6
40048: ARRAY
40049: PUSH
40050: LD_VAR 0 5
40054: ARRAY
40055: PUSH
40056: LD_INT 1
40058: ARRAY
40059: PPUSH
40060: LD_EXP 118
40064: PUSH
40065: LD_VAR 0 6
40069: ARRAY
40070: PUSH
40071: LD_VAR 0 5
40075: ARRAY
40076: PUSH
40077: LD_INT 2
40079: ARRAY
40080: PPUSH
40081: LD_VAR 0 1
40085: PPUSH
40086: CALL_OW 255
40090: PPUSH
40091: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40095: LD_ADDR_EXP 118
40099: PUSH
40100: LD_EXP 118
40104: PPUSH
40105: LD_VAR 0 6
40109: PPUSH
40110: LD_EXP 118
40114: PUSH
40115: LD_VAR 0 6
40119: ARRAY
40120: PPUSH
40121: LD_VAR 0 5
40125: PPUSH
40126: CALL_OW 3
40130: PPUSH
40131: CALL_OW 1
40135: ST_TO_ADDR
// end ; end ;
40136: GO 39974
40138: POP
40139: POP
// end ;
40140: LD_VAR 0 4
40144: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40145: LD_INT 0
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40156: LD_VAR 0 1
40160: PPUSH
40161: CALL_OW 264
40165: PUSH
40166: LD_INT 81
40168: EQUAL
40169: NOT
40170: PUSH
40171: LD_VAR 0 1
40175: PUSH
40176: LD_EXP 117
40180: IN
40181: NOT
40182: OR
40183: IFFALSE 40187
// exit ;
40185: GO 40509
// index := GetElementIndex ( minersList , unit ) ;
40187: LD_ADDR_VAR 0 6
40191: PUSH
40192: LD_EXP 117
40196: PPUSH
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL 45856 0 2
40206: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40207: LD_ADDR_VAR 0 8
40211: PUSH
40212: LD_EXP 119
40216: PUSH
40217: LD_EXP 118
40221: PUSH
40222: LD_VAR 0 6
40226: ARRAY
40227: MINUS
40228: ST_TO_ADDR
// if not minesFreeAmount then
40229: LD_VAR 0 8
40233: NOT
40234: IFFALSE 40238
// exit ;
40236: GO 40509
// tmp := [ ] ;
40238: LD_ADDR_VAR 0 7
40242: PUSH
40243: EMPTY
40244: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40245: LD_ADDR_VAR 0 5
40249: PUSH
40250: DOUBLE
40251: LD_INT 1
40253: DEC
40254: ST_TO_ADDR
40255: LD_VAR 0 8
40259: PUSH
40260: FOR_TO
40261: IFFALSE 40456
// begin _d := rand ( 0 , 5 ) ;
40263: LD_ADDR_VAR 0 11
40267: PUSH
40268: LD_INT 0
40270: PPUSH
40271: LD_INT 5
40273: PPUSH
40274: CALL_OW 12
40278: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40279: LD_ADDR_VAR 0 12
40283: PUSH
40284: LD_INT 2
40286: PPUSH
40287: LD_INT 6
40289: PPUSH
40290: CALL_OW 12
40294: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40295: LD_ADDR_VAR 0 9
40299: PUSH
40300: LD_VAR 0 2
40304: PPUSH
40305: LD_VAR 0 11
40309: PPUSH
40310: LD_VAR 0 12
40314: PPUSH
40315: CALL_OW 272
40319: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40320: LD_ADDR_VAR 0 10
40324: PUSH
40325: LD_VAR 0 3
40329: PPUSH
40330: LD_VAR 0 11
40334: PPUSH
40335: LD_VAR 0 12
40339: PPUSH
40340: CALL_OW 273
40344: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40345: LD_VAR 0 9
40349: PPUSH
40350: LD_VAR 0 10
40354: PPUSH
40355: CALL_OW 488
40359: PUSH
40360: LD_VAR 0 9
40364: PUSH
40365: LD_VAR 0 10
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_VAR 0 7
40378: IN
40379: NOT
40380: AND
40381: PUSH
40382: LD_VAR 0 9
40386: PPUSH
40387: LD_VAR 0 10
40391: PPUSH
40392: CALL_OW 458
40396: NOT
40397: AND
40398: IFFALSE 40440
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40400: LD_ADDR_VAR 0 7
40404: PUSH
40405: LD_VAR 0 7
40409: PPUSH
40410: LD_VAR 0 7
40414: PUSH
40415: LD_INT 1
40417: PLUS
40418: PPUSH
40419: LD_VAR 0 9
40423: PUSH
40424: LD_VAR 0 10
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PPUSH
40433: CALL_OW 1
40437: ST_TO_ADDR
40438: GO 40454
// i := i - 1 ;
40440: LD_ADDR_VAR 0 5
40444: PUSH
40445: LD_VAR 0 5
40449: PUSH
40450: LD_INT 1
40452: MINUS
40453: ST_TO_ADDR
// end ;
40454: GO 40260
40456: POP
40457: POP
// for i in tmp do
40458: LD_ADDR_VAR 0 5
40462: PUSH
40463: LD_VAR 0 7
40467: PUSH
40468: FOR_IN
40469: IFFALSE 40507
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40471: LD_VAR 0 1
40475: PPUSH
40476: LD_VAR 0 5
40480: PUSH
40481: LD_INT 1
40483: ARRAY
40484: PPUSH
40485: LD_VAR 0 5
40489: PUSH
40490: LD_INT 2
40492: ARRAY
40493: PPUSH
40494: CALL 39453 0 3
40498: NOT
40499: IFFALSE 40505
// exit ;
40501: POP
40502: POP
40503: GO 40509
40505: GO 40468
40507: POP
40508: POP
// end ;
40509: LD_VAR 0 4
40513: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40514: LD_INT 0
40516: PPUSH
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
// if not GetClass ( unit ) = class_sniper then
40523: LD_VAR 0 1
40527: PPUSH
40528: CALL_OW 257
40532: PUSH
40533: LD_INT 5
40535: EQUAL
40536: NOT
40537: IFFALSE 40541
// exit ;
40539: GO 40929
// dist := 8 ;
40541: LD_ADDR_VAR 0 5
40545: PUSH
40546: LD_INT 8
40548: ST_TO_ADDR
// viewRange := 12 ;
40549: LD_ADDR_VAR 0 7
40553: PUSH
40554: LD_INT 12
40556: ST_TO_ADDR
// side := GetSide ( unit ) ;
40557: LD_ADDR_VAR 0 6
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 255
40571: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40572: LD_INT 61
40574: PPUSH
40575: LD_VAR 0 6
40579: PPUSH
40580: CALL_OW 321
40584: PUSH
40585: LD_INT 2
40587: EQUAL
40588: IFFALSE 40598
// viewRange := 16 ;
40590: LD_ADDR_VAR 0 7
40594: PUSH
40595: LD_INT 16
40597: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40598: LD_VAR 0 1
40602: PPUSH
40603: LD_VAR 0 2
40607: PPUSH
40608: LD_VAR 0 3
40612: PPUSH
40613: CALL_OW 297
40617: PUSH
40618: LD_VAR 0 5
40622: GREATER
40623: IFFALSE 40702
// begin ComMoveXY ( unit , x , y ) ;
40625: LD_VAR 0 1
40629: PPUSH
40630: LD_VAR 0 2
40634: PPUSH
40635: LD_VAR 0 3
40639: PPUSH
40640: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40644: LD_INT 35
40646: PPUSH
40647: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40651: LD_VAR 0 1
40655: PPUSH
40656: LD_VAR 0 2
40660: PPUSH
40661: LD_VAR 0 3
40665: PPUSH
40666: CALL 77192 0 3
40670: NOT
40671: IFFALSE 40675
// exit ;
40673: GO 40929
// until GetDistUnitXY ( unit , x , y ) < dist ;
40675: LD_VAR 0 1
40679: PPUSH
40680: LD_VAR 0 2
40684: PPUSH
40685: LD_VAR 0 3
40689: PPUSH
40690: CALL_OW 297
40694: PUSH
40695: LD_VAR 0 5
40699: LESS
40700: IFFALSE 40644
// end ; ComTurnXY ( unit , x , y ) ;
40702: LD_VAR 0 1
40706: PPUSH
40707: LD_VAR 0 2
40711: PPUSH
40712: LD_VAR 0 3
40716: PPUSH
40717: CALL_OW 118
// wait ( 5 ) ;
40721: LD_INT 5
40723: PPUSH
40724: CALL_OW 67
// _d := GetDir ( unit ) ;
40728: LD_ADDR_VAR 0 10
40732: PUSH
40733: LD_VAR 0 1
40737: PPUSH
40738: CALL_OW 254
40742: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40743: LD_ADDR_VAR 0 8
40747: PUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: CALL_OW 250
40757: PPUSH
40758: LD_VAR 0 10
40762: PPUSH
40763: LD_VAR 0 5
40767: PPUSH
40768: CALL_OW 272
40772: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40773: LD_ADDR_VAR 0 9
40777: PUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: CALL_OW 251
40787: PPUSH
40788: LD_VAR 0 10
40792: PPUSH
40793: LD_VAR 0 5
40797: PPUSH
40798: CALL_OW 273
40802: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40803: LD_VAR 0 8
40807: PPUSH
40808: LD_VAR 0 9
40812: PPUSH
40813: CALL_OW 488
40817: NOT
40818: IFFALSE 40822
// exit ;
40820: GO 40929
// ComAnimCustom ( unit , 1 ) ;
40822: LD_VAR 0 1
40826: PPUSH
40827: LD_INT 1
40829: PPUSH
40830: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40834: LD_VAR 0 8
40838: PPUSH
40839: LD_VAR 0 9
40843: PPUSH
40844: LD_VAR 0 6
40848: PPUSH
40849: LD_VAR 0 7
40853: PPUSH
40854: CALL_OW 330
// repeat wait ( 1 ) ;
40858: LD_INT 1
40860: PPUSH
40861: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40865: LD_VAR 0 1
40869: PPUSH
40870: CALL_OW 316
40874: PUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: CALL_OW 314
40884: OR
40885: PUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 302
40895: NOT
40896: OR
40897: PUSH
40898: LD_VAR 0 1
40902: PPUSH
40903: CALL_OW 301
40907: OR
40908: IFFALSE 40858
// RemoveSeeing ( _x , _y , side ) ;
40910: LD_VAR 0 8
40914: PPUSH
40915: LD_VAR 0 9
40919: PPUSH
40920: LD_VAR 0 6
40924: PPUSH
40925: CALL_OW 331
// end ; end_of_file
40929: LD_VAR 0 4
40933: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40934: LD_INT 0
40936: PPUSH
40937: PPUSH
// if exist_mode then
40938: LD_VAR 0 2
40942: IFFALSE 40967
// unit := CreateCharacter ( prefix & ident ) else
40944: LD_ADDR_VAR 0 5
40948: PUSH
40949: LD_VAR 0 3
40953: PUSH
40954: LD_VAR 0 1
40958: STR
40959: PPUSH
40960: CALL_OW 34
40964: ST_TO_ADDR
40965: GO 40982
// unit := NewCharacter ( ident ) ;
40967: LD_ADDR_VAR 0 5
40971: PUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 25
40981: ST_TO_ADDR
// result := unit ;
40982: LD_ADDR_VAR 0 4
40986: PUSH
40987: LD_VAR 0 5
40991: ST_TO_ADDR
// end ;
40992: LD_VAR 0 4
40996: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40997: LD_INT 0
40999: PPUSH
41000: PPUSH
// if not side or not nation then
41001: LD_VAR 0 1
41005: NOT
41006: PUSH
41007: LD_VAR 0 2
41011: NOT
41012: OR
41013: IFFALSE 41017
// exit ;
41015: GO 41785
// case nation of nation_american :
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 1
41024: DOUBLE
41025: EQUAL
41026: IFTRUE 41030
41028: GO 41244
41030: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41031: LD_ADDR_VAR 0 4
41035: PUSH
41036: LD_INT 35
41038: PUSH
41039: LD_INT 45
41041: PUSH
41042: LD_INT 46
41044: PUSH
41045: LD_INT 47
41047: PUSH
41048: LD_INT 82
41050: PUSH
41051: LD_INT 83
41053: PUSH
41054: LD_INT 84
41056: PUSH
41057: LD_INT 85
41059: PUSH
41060: LD_INT 86
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 6
41071: PUSH
41072: LD_INT 15
41074: PUSH
41075: LD_INT 16
41077: PUSH
41078: LD_INT 7
41080: PUSH
41081: LD_INT 12
41083: PUSH
41084: LD_INT 13
41086: PUSH
41087: LD_INT 10
41089: PUSH
41090: LD_INT 14
41092: PUSH
41093: LD_INT 20
41095: PUSH
41096: LD_INT 21
41098: PUSH
41099: LD_INT 22
41101: PUSH
41102: LD_INT 25
41104: PUSH
41105: LD_INT 32
41107: PUSH
41108: LD_INT 27
41110: PUSH
41111: LD_INT 36
41113: PUSH
41114: LD_INT 69
41116: PUSH
41117: LD_INT 39
41119: PUSH
41120: LD_INT 34
41122: PUSH
41123: LD_INT 40
41125: PUSH
41126: LD_INT 48
41128: PUSH
41129: LD_INT 49
41131: PUSH
41132: LD_INT 50
41134: PUSH
41135: LD_INT 51
41137: PUSH
41138: LD_INT 52
41140: PUSH
41141: LD_INT 53
41143: PUSH
41144: LD_INT 54
41146: PUSH
41147: LD_INT 55
41149: PUSH
41150: LD_INT 56
41152: PUSH
41153: LD_INT 57
41155: PUSH
41156: LD_INT 58
41158: PUSH
41159: LD_INT 59
41161: PUSH
41162: LD_INT 60
41164: PUSH
41165: LD_INT 61
41167: PUSH
41168: LD_INT 62
41170: PUSH
41171: LD_INT 80
41173: PUSH
41174: LD_INT 82
41176: PUSH
41177: LD_INT 83
41179: PUSH
41180: LD_INT 84
41182: PUSH
41183: LD_INT 85
41185: PUSH
41186: LD_INT 86
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: ST_TO_ADDR
41242: GO 41709
41244: LD_INT 2
41246: DOUBLE
41247: EQUAL
41248: IFTRUE 41252
41250: GO 41478
41252: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41253: LD_ADDR_VAR 0 4
41257: PUSH
41258: LD_INT 35
41260: PUSH
41261: LD_INT 45
41263: PUSH
41264: LD_INT 46
41266: PUSH
41267: LD_INT 47
41269: PUSH
41270: LD_INT 82
41272: PUSH
41273: LD_INT 83
41275: PUSH
41276: LD_INT 84
41278: PUSH
41279: LD_INT 85
41281: PUSH
41282: LD_INT 87
41284: PUSH
41285: LD_INT 70
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 11
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: LD_INT 4
41299: PUSH
41300: LD_INT 5
41302: PUSH
41303: LD_INT 6
41305: PUSH
41306: LD_INT 15
41308: PUSH
41309: LD_INT 18
41311: PUSH
41312: LD_INT 7
41314: PUSH
41315: LD_INT 17
41317: PUSH
41318: LD_INT 8
41320: PUSH
41321: LD_INT 20
41323: PUSH
41324: LD_INT 21
41326: PUSH
41327: LD_INT 22
41329: PUSH
41330: LD_INT 72
41332: PUSH
41333: LD_INT 26
41335: PUSH
41336: LD_INT 69
41338: PUSH
41339: LD_INT 39
41341: PUSH
41342: LD_INT 40
41344: PUSH
41345: LD_INT 41
41347: PUSH
41348: LD_INT 42
41350: PUSH
41351: LD_INT 43
41353: PUSH
41354: LD_INT 48
41356: PUSH
41357: LD_INT 49
41359: PUSH
41360: LD_INT 50
41362: PUSH
41363: LD_INT 51
41365: PUSH
41366: LD_INT 52
41368: PUSH
41369: LD_INT 53
41371: PUSH
41372: LD_INT 54
41374: PUSH
41375: LD_INT 55
41377: PUSH
41378: LD_INT 56
41380: PUSH
41381: LD_INT 60
41383: PUSH
41384: LD_INT 61
41386: PUSH
41387: LD_INT 62
41389: PUSH
41390: LD_INT 66
41392: PUSH
41393: LD_INT 67
41395: PUSH
41396: LD_INT 68
41398: PUSH
41399: LD_INT 81
41401: PUSH
41402: LD_INT 82
41404: PUSH
41405: LD_INT 83
41407: PUSH
41408: LD_INT 84
41410: PUSH
41411: LD_INT 85
41413: PUSH
41414: LD_INT 87
41416: PUSH
41417: LD_INT 88
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: ST_TO_ADDR
41476: GO 41709
41478: LD_INT 3
41480: DOUBLE
41481: EQUAL
41482: IFTRUE 41486
41484: GO 41708
41486: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41487: LD_ADDR_VAR 0 4
41491: PUSH
41492: LD_INT 46
41494: PUSH
41495: LD_INT 47
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: LD_INT 82
41506: PUSH
41507: LD_INT 83
41509: PUSH
41510: LD_INT 84
41512: PUSH
41513: LD_INT 85
41515: PUSH
41516: LD_INT 86
41518: PUSH
41519: LD_INT 11
41521: PUSH
41522: LD_INT 9
41524: PUSH
41525: LD_INT 20
41527: PUSH
41528: LD_INT 19
41530: PUSH
41531: LD_INT 21
41533: PUSH
41534: LD_INT 24
41536: PUSH
41537: LD_INT 22
41539: PUSH
41540: LD_INT 25
41542: PUSH
41543: LD_INT 28
41545: PUSH
41546: LD_INT 29
41548: PUSH
41549: LD_INT 30
41551: PUSH
41552: LD_INT 31
41554: PUSH
41555: LD_INT 37
41557: PUSH
41558: LD_INT 38
41560: PUSH
41561: LD_INT 32
41563: PUSH
41564: LD_INT 27
41566: PUSH
41567: LD_INT 33
41569: PUSH
41570: LD_INT 69
41572: PUSH
41573: LD_INT 39
41575: PUSH
41576: LD_INT 34
41578: PUSH
41579: LD_INT 40
41581: PUSH
41582: LD_INT 71
41584: PUSH
41585: LD_INT 23
41587: PUSH
41588: LD_INT 44
41590: PUSH
41591: LD_INT 48
41593: PUSH
41594: LD_INT 49
41596: PUSH
41597: LD_INT 50
41599: PUSH
41600: LD_INT 51
41602: PUSH
41603: LD_INT 52
41605: PUSH
41606: LD_INT 53
41608: PUSH
41609: LD_INT 54
41611: PUSH
41612: LD_INT 55
41614: PUSH
41615: LD_INT 56
41617: PUSH
41618: LD_INT 57
41620: PUSH
41621: LD_INT 58
41623: PUSH
41624: LD_INT 59
41626: PUSH
41627: LD_INT 63
41629: PUSH
41630: LD_INT 64
41632: PUSH
41633: LD_INT 65
41635: PUSH
41636: LD_INT 82
41638: PUSH
41639: LD_INT 83
41641: PUSH
41642: LD_INT 84
41644: PUSH
41645: LD_INT 85
41647: PUSH
41648: LD_INT 86
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
41706: GO 41709
41708: POP
// if state > - 1 and state < 3 then
41709: LD_VAR 0 3
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: GREATER
41718: PUSH
41719: LD_VAR 0 3
41723: PUSH
41724: LD_INT 3
41726: LESS
41727: AND
41728: IFFALSE 41785
// for i in result do
41730: LD_ADDR_VAR 0 5
41734: PUSH
41735: LD_VAR 0 4
41739: PUSH
41740: FOR_IN
41741: IFFALSE 41783
// if GetTech ( i , side ) <> state then
41743: LD_VAR 0 5
41747: PPUSH
41748: LD_VAR 0 1
41752: PPUSH
41753: CALL_OW 321
41757: PUSH
41758: LD_VAR 0 3
41762: NONEQUAL
41763: IFFALSE 41781
// result := result diff i ;
41765: LD_ADDR_VAR 0 4
41769: PUSH
41770: LD_VAR 0 4
41774: PUSH
41775: LD_VAR 0 5
41779: DIFF
41780: ST_TO_ADDR
41781: GO 41740
41783: POP
41784: POP
// end ;
41785: LD_VAR 0 4
41789: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41790: LD_INT 0
41792: PPUSH
41793: PPUSH
41794: PPUSH
// result := true ;
41795: LD_ADDR_VAR 0 3
41799: PUSH
41800: LD_INT 1
41802: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: LD_VAR 0 2
41812: PPUSH
41813: CALL_OW 480
41817: ST_TO_ADDR
// if not tmp then
41818: LD_VAR 0 5
41822: NOT
41823: IFFALSE 41827
// exit ;
41825: GO 41876
// for i in tmp do
41827: LD_ADDR_VAR 0 4
41831: PUSH
41832: LD_VAR 0 5
41836: PUSH
41837: FOR_IN
41838: IFFALSE 41874
// if GetTech ( i , side ) <> state_researched then
41840: LD_VAR 0 4
41844: PPUSH
41845: LD_VAR 0 1
41849: PPUSH
41850: CALL_OW 321
41854: PUSH
41855: LD_INT 2
41857: NONEQUAL
41858: IFFALSE 41872
// begin result := false ;
41860: LD_ADDR_VAR 0 3
41864: PUSH
41865: LD_INT 0
41867: ST_TO_ADDR
// exit ;
41868: POP
41869: POP
41870: GO 41876
// end ;
41872: GO 41837
41874: POP
41875: POP
// end ;
41876: LD_VAR 0 3
41880: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41881: LD_INT 0
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41896: LD_VAR 0 1
41900: NOT
41901: PUSH
41902: LD_VAR 0 1
41906: PPUSH
41907: CALL_OW 257
41911: PUSH
41912: LD_INT 9
41914: NONEQUAL
41915: OR
41916: IFFALSE 41920
// exit ;
41918: GO 42493
// side := GetSide ( unit ) ;
41920: LD_ADDR_VAR 0 9
41924: PUSH
41925: LD_VAR 0 1
41929: PPUSH
41930: CALL_OW 255
41934: ST_TO_ADDR
// tech_space := tech_spacanom ;
41935: LD_ADDR_VAR 0 12
41939: PUSH
41940: LD_INT 29
41942: ST_TO_ADDR
// tech_time := tech_taurad ;
41943: LD_ADDR_VAR 0 13
41947: PUSH
41948: LD_INT 28
41950: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41951: LD_ADDR_VAR 0 11
41955: PUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: CALL_OW 310
41965: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41966: LD_VAR 0 11
41970: PPUSH
41971: CALL_OW 247
41975: PUSH
41976: LD_INT 2
41978: EQUAL
41979: IFFALSE 41983
// exit ;
41981: GO 42493
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41983: LD_ADDR_VAR 0 8
41987: PUSH
41988: LD_INT 81
41990: PUSH
41991: LD_VAR 0 9
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: LD_INT 21
42005: PUSH
42006: LD_INT 3
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PPUSH
42021: CALL_OW 69
42025: ST_TO_ADDR
// if not tmp then
42026: LD_VAR 0 8
42030: NOT
42031: IFFALSE 42035
// exit ;
42033: GO 42493
// if in_unit then
42035: LD_VAR 0 11
42039: IFFALSE 42063
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42041: LD_ADDR_VAR 0 10
42045: PUSH
42046: LD_VAR 0 8
42050: PPUSH
42051: LD_VAR 0 11
42055: PPUSH
42056: CALL_OW 74
42060: ST_TO_ADDR
42061: GO 42083
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42063: LD_ADDR_VAR 0 10
42067: PUSH
42068: LD_VAR 0 8
42072: PPUSH
42073: LD_VAR 0 1
42077: PPUSH
42078: CALL_OW 74
42082: ST_TO_ADDR
// if not enemy then
42083: LD_VAR 0 10
42087: NOT
42088: IFFALSE 42092
// exit ;
42090: GO 42493
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42092: LD_VAR 0 11
42096: PUSH
42097: LD_VAR 0 11
42101: PPUSH
42102: LD_VAR 0 10
42106: PPUSH
42107: CALL_OW 296
42111: PUSH
42112: LD_INT 13
42114: GREATER
42115: AND
42116: PUSH
42117: LD_VAR 0 1
42121: PPUSH
42122: LD_VAR 0 10
42126: PPUSH
42127: CALL_OW 296
42131: PUSH
42132: LD_INT 12
42134: GREATER
42135: OR
42136: IFFALSE 42140
// exit ;
42138: GO 42493
// missile := [ 1 ] ;
42140: LD_ADDR_VAR 0 14
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: EMPTY
42149: LIST
42150: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42151: LD_VAR 0 9
42155: PPUSH
42156: LD_VAR 0 12
42160: PPUSH
42161: CALL_OW 325
42165: IFFALSE 42194
// missile := Replace ( missile , missile + 1 , 2 ) ;
42167: LD_ADDR_VAR 0 14
42171: PUSH
42172: LD_VAR 0 14
42176: PPUSH
42177: LD_VAR 0 14
42181: PUSH
42182: LD_INT 1
42184: PLUS
42185: PPUSH
42186: LD_INT 2
42188: PPUSH
42189: CALL_OW 1
42193: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42194: LD_VAR 0 9
42198: PPUSH
42199: LD_VAR 0 13
42203: PPUSH
42204: CALL_OW 325
42208: PUSH
42209: LD_VAR 0 10
42213: PPUSH
42214: CALL_OW 255
42218: PPUSH
42219: LD_VAR 0 13
42223: PPUSH
42224: CALL_OW 325
42228: NOT
42229: AND
42230: IFFALSE 42259
// missile := Replace ( missile , missile + 1 , 3 ) ;
42232: LD_ADDR_VAR 0 14
42236: PUSH
42237: LD_VAR 0 14
42241: PPUSH
42242: LD_VAR 0 14
42246: PUSH
42247: LD_INT 1
42249: PLUS
42250: PPUSH
42251: LD_INT 3
42253: PPUSH
42254: CALL_OW 1
42258: ST_TO_ADDR
// if missile < 2 then
42259: LD_VAR 0 14
42263: PUSH
42264: LD_INT 2
42266: LESS
42267: IFFALSE 42271
// exit ;
42269: GO 42493
// x := GetX ( enemy ) ;
42271: LD_ADDR_VAR 0 4
42275: PUSH
42276: LD_VAR 0 10
42280: PPUSH
42281: CALL_OW 250
42285: ST_TO_ADDR
// y := GetY ( enemy ) ;
42286: LD_ADDR_VAR 0 5
42290: PUSH
42291: LD_VAR 0 10
42295: PPUSH
42296: CALL_OW 251
42300: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42301: LD_ADDR_VAR 0 6
42305: PUSH
42306: LD_VAR 0 4
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PPUSH
42315: LD_INT 1
42317: PPUSH
42318: CALL_OW 12
42322: PLUS
42323: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42324: LD_ADDR_VAR 0 7
42328: PUSH
42329: LD_VAR 0 5
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PPUSH
42338: LD_INT 1
42340: PPUSH
42341: CALL_OW 12
42345: PLUS
42346: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42347: LD_VAR 0 6
42351: PPUSH
42352: LD_VAR 0 7
42356: PPUSH
42357: CALL_OW 488
42361: NOT
42362: IFFALSE 42384
// begin _x := x ;
42364: LD_ADDR_VAR 0 6
42368: PUSH
42369: LD_VAR 0 4
42373: ST_TO_ADDR
// _y := y ;
42374: LD_ADDR_VAR 0 7
42378: PUSH
42379: LD_VAR 0 5
42383: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42384: LD_ADDR_VAR 0 3
42388: PUSH
42389: LD_INT 1
42391: PPUSH
42392: LD_VAR 0 14
42396: PPUSH
42397: CALL_OW 12
42401: ST_TO_ADDR
// case i of 1 :
42402: LD_VAR 0 3
42406: PUSH
42407: LD_INT 1
42409: DOUBLE
42410: EQUAL
42411: IFTRUE 42415
42413: GO 42432
42415: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42416: LD_VAR 0 1
42420: PPUSH
42421: LD_VAR 0 10
42425: PPUSH
42426: CALL_OW 115
42430: GO 42493
42432: LD_INT 2
42434: DOUBLE
42435: EQUAL
42436: IFTRUE 42440
42438: GO 42462
42440: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42441: LD_VAR 0 1
42445: PPUSH
42446: LD_VAR 0 6
42450: PPUSH
42451: LD_VAR 0 7
42455: PPUSH
42456: CALL_OW 153
42460: GO 42493
42462: LD_INT 3
42464: DOUBLE
42465: EQUAL
42466: IFTRUE 42470
42468: GO 42492
42470: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42471: LD_VAR 0 1
42475: PPUSH
42476: LD_VAR 0 6
42480: PPUSH
42481: LD_VAR 0 7
42485: PPUSH
42486: CALL_OW 154
42490: GO 42493
42492: POP
// end ;
42493: LD_VAR 0 2
42497: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42498: LD_INT 0
42500: PPUSH
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
// if not unit or not building then
42506: LD_VAR 0 1
42510: NOT
42511: PUSH
42512: LD_VAR 0 2
42516: NOT
42517: OR
42518: IFFALSE 42522
// exit ;
42520: GO 42680
// x := GetX ( building ) ;
42522: LD_ADDR_VAR 0 5
42526: PUSH
42527: LD_VAR 0 2
42531: PPUSH
42532: CALL_OW 250
42536: ST_TO_ADDR
// y := GetY ( building ) ;
42537: LD_ADDR_VAR 0 6
42541: PUSH
42542: LD_VAR 0 2
42546: PPUSH
42547: CALL_OW 251
42551: ST_TO_ADDR
// for i = 0 to 5 do
42552: LD_ADDR_VAR 0 4
42556: PUSH
42557: DOUBLE
42558: LD_INT 0
42560: DEC
42561: ST_TO_ADDR
42562: LD_INT 5
42564: PUSH
42565: FOR_TO
42566: IFFALSE 42678
// begin _x := ShiftX ( x , i , 3 ) ;
42568: LD_ADDR_VAR 0 7
42572: PUSH
42573: LD_VAR 0 5
42577: PPUSH
42578: LD_VAR 0 4
42582: PPUSH
42583: LD_INT 3
42585: PPUSH
42586: CALL_OW 272
42590: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42591: LD_ADDR_VAR 0 8
42595: PUSH
42596: LD_VAR 0 6
42600: PPUSH
42601: LD_VAR 0 4
42605: PPUSH
42606: LD_INT 3
42608: PPUSH
42609: CALL_OW 273
42613: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42614: LD_VAR 0 7
42618: PPUSH
42619: LD_VAR 0 8
42623: PPUSH
42624: CALL_OW 488
42628: NOT
42629: IFFALSE 42633
// continue ;
42631: GO 42565
// if HexInfo ( _x , _y ) = 0 then
42633: LD_VAR 0 7
42637: PPUSH
42638: LD_VAR 0 8
42642: PPUSH
42643: CALL_OW 428
42647: PUSH
42648: LD_INT 0
42650: EQUAL
42651: IFFALSE 42676
// begin ComMoveXY ( unit , _x , _y ) ;
42653: LD_VAR 0 1
42657: PPUSH
42658: LD_VAR 0 7
42662: PPUSH
42663: LD_VAR 0 8
42667: PPUSH
42668: CALL_OW 111
// exit ;
42672: POP
42673: POP
42674: GO 42680
// end ; end ;
42676: GO 42565
42678: POP
42679: POP
// end ;
42680: LD_VAR 0 3
42684: RET
// export function ScanBase ( side , base_area ) ; begin
42685: LD_INT 0
42687: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42688: LD_ADDR_VAR 0 3
42692: PUSH
42693: LD_VAR 0 2
42697: PPUSH
42698: LD_INT 81
42700: PUSH
42701: LD_VAR 0 1
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PPUSH
42710: CALL_OW 70
42714: ST_TO_ADDR
// end ;
42715: LD_VAR 0 3
42719: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42720: LD_INT 0
42722: PPUSH
42723: PPUSH
42724: PPUSH
42725: PPUSH
// result := false ;
42726: LD_ADDR_VAR 0 2
42730: PUSH
42731: LD_INT 0
42733: ST_TO_ADDR
// side := GetSide ( unit ) ;
42734: LD_ADDR_VAR 0 3
42738: PUSH
42739: LD_VAR 0 1
42743: PPUSH
42744: CALL_OW 255
42748: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42749: LD_ADDR_VAR 0 4
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 248
42763: ST_TO_ADDR
// case nat of 1 :
42764: LD_VAR 0 4
42768: PUSH
42769: LD_INT 1
42771: DOUBLE
42772: EQUAL
42773: IFTRUE 42777
42775: GO 42788
42777: POP
// tech := tech_lassight ; 2 :
42778: LD_ADDR_VAR 0 5
42782: PUSH
42783: LD_INT 12
42785: ST_TO_ADDR
42786: GO 42827
42788: LD_INT 2
42790: DOUBLE
42791: EQUAL
42792: IFTRUE 42796
42794: GO 42807
42796: POP
// tech := tech_mortar ; 3 :
42797: LD_ADDR_VAR 0 5
42801: PUSH
42802: LD_INT 41
42804: ST_TO_ADDR
42805: GO 42827
42807: LD_INT 3
42809: DOUBLE
42810: EQUAL
42811: IFTRUE 42815
42813: GO 42826
42815: POP
// tech := tech_bazooka ; end ;
42816: LD_ADDR_VAR 0 5
42820: PUSH
42821: LD_INT 44
42823: ST_TO_ADDR
42824: GO 42827
42826: POP
// if Researched ( side , tech ) then
42827: LD_VAR 0 3
42831: PPUSH
42832: LD_VAR 0 5
42836: PPUSH
42837: CALL_OW 325
42841: IFFALSE 42868
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42843: LD_ADDR_VAR 0 2
42847: PUSH
42848: LD_INT 5
42850: PUSH
42851: LD_INT 8
42853: PUSH
42854: LD_INT 9
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: PUSH
42862: LD_VAR 0 4
42866: ARRAY
42867: ST_TO_ADDR
// end ;
42868: LD_VAR 0 2
42872: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42873: LD_INT 0
42875: PPUSH
42876: PPUSH
42877: PPUSH
// if not mines then
42878: LD_VAR 0 2
42882: NOT
42883: IFFALSE 42887
// exit ;
42885: GO 43031
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42887: LD_ADDR_VAR 0 5
42891: PUSH
42892: LD_INT 81
42894: PUSH
42895: LD_VAR 0 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: PUSH
42907: LD_INT 21
42909: PUSH
42910: LD_INT 3
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL_OW 69
42929: ST_TO_ADDR
// for i in mines do
42930: LD_ADDR_VAR 0 4
42934: PUSH
42935: LD_VAR 0 2
42939: PUSH
42940: FOR_IN
42941: IFFALSE 43029
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42943: LD_VAR 0 4
42947: PUSH
42948: LD_INT 1
42950: ARRAY
42951: PPUSH
42952: LD_VAR 0 4
42956: PUSH
42957: LD_INT 2
42959: ARRAY
42960: PPUSH
42961: CALL_OW 458
42965: NOT
42966: IFFALSE 42970
// continue ;
42968: GO 42940
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42970: LD_VAR 0 4
42974: PUSH
42975: LD_INT 1
42977: ARRAY
42978: PPUSH
42979: LD_VAR 0 4
42983: PUSH
42984: LD_INT 2
42986: ARRAY
42987: PPUSH
42988: CALL_OW 428
42992: PUSH
42993: LD_VAR 0 5
42997: IN
42998: IFFALSE 43027
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43000: LD_VAR 0 4
43004: PUSH
43005: LD_INT 1
43007: ARRAY
43008: PPUSH
43009: LD_VAR 0 4
43013: PUSH
43014: LD_INT 2
43016: ARRAY
43017: PPUSH
43018: LD_VAR 0 1
43022: PPUSH
43023: CALL_OW 456
// end ;
43027: GO 42940
43029: POP
43030: POP
// end ;
43031: LD_VAR 0 3
43035: RET
// export function Count ( array ) ; var i ; begin
43036: LD_INT 0
43038: PPUSH
43039: PPUSH
// result := 0 ;
43040: LD_ADDR_VAR 0 2
43044: PUSH
43045: LD_INT 0
43047: ST_TO_ADDR
// for i in array do
43048: LD_ADDR_VAR 0 3
43052: PUSH
43053: LD_VAR 0 1
43057: PUSH
43058: FOR_IN
43059: IFFALSE 43083
// if i then
43061: LD_VAR 0 3
43065: IFFALSE 43081
// result := result + 1 ;
43067: LD_ADDR_VAR 0 2
43071: PUSH
43072: LD_VAR 0 2
43076: PUSH
43077: LD_INT 1
43079: PLUS
43080: ST_TO_ADDR
43081: GO 43058
43083: POP
43084: POP
// end ;
43085: LD_VAR 0 2
43089: RET
// export function IsEmpty ( building ) ; begin
43090: LD_INT 0
43092: PPUSH
// if not building then
43093: LD_VAR 0 1
43097: NOT
43098: IFFALSE 43102
// exit ;
43100: GO 43145
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43102: LD_ADDR_VAR 0 2
43106: PUSH
43107: LD_VAR 0 1
43111: PUSH
43112: LD_INT 22
43114: PUSH
43115: LD_VAR 0 1
43119: PPUSH
43120: CALL_OW 255
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 58
43131: PUSH
43132: EMPTY
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PPUSH
43139: CALL_OW 69
43143: IN
43144: ST_TO_ADDR
// end ;
43145: LD_VAR 0 2
43149: RET
// export function IsNotFull ( building ) ; var places ; begin
43150: LD_INT 0
43152: PPUSH
43153: PPUSH
// if not building then
43154: LD_VAR 0 1
43158: NOT
43159: IFFALSE 43163
// exit ;
43161: GO 43334
// result := false ;
43163: LD_ADDR_VAR 0 2
43167: PUSH
43168: LD_INT 0
43170: ST_TO_ADDR
// places := 0 ;
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 0
43178: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43179: LD_VAR 0 1
43183: PPUSH
43184: CALL_OW 266
43188: PUSH
43189: LD_INT 0
43191: DOUBLE
43192: EQUAL
43193: IFTRUE 43251
43195: LD_INT 1
43197: DOUBLE
43198: EQUAL
43199: IFTRUE 43251
43201: LD_INT 6
43203: DOUBLE
43204: EQUAL
43205: IFTRUE 43251
43207: LD_INT 7
43209: DOUBLE
43210: EQUAL
43211: IFTRUE 43251
43213: LD_INT 8
43215: DOUBLE
43216: EQUAL
43217: IFTRUE 43251
43219: LD_INT 4
43221: DOUBLE
43222: EQUAL
43223: IFTRUE 43251
43225: LD_INT 5
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43251
43231: LD_INT 2
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43251
43237: LD_INT 3
43239: DOUBLE
43240: EQUAL
43241: IFTRUE 43251
43243: LD_INT 35
43245: DOUBLE
43246: EQUAL
43247: IFTRUE 43251
43249: GO 43262
43251: POP
// places := 6 ; b_bunker , b_breastwork :
43252: LD_ADDR_VAR 0 3
43256: PUSH
43257: LD_INT 6
43259: ST_TO_ADDR
43260: GO 43307
43262: LD_INT 32
43264: DOUBLE
43265: EQUAL
43266: IFTRUE 43276
43268: LD_INT 31
43270: DOUBLE
43271: EQUAL
43272: IFTRUE 43276
43274: GO 43287
43276: POP
// places := 1 ; b_control_tower :
43277: LD_ADDR_VAR 0 3
43281: PUSH
43282: LD_INT 1
43284: ST_TO_ADDR
43285: GO 43307
43287: LD_INT 36
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43295
43293: GO 43306
43295: POP
// places := 3 ; end ;
43296: LD_ADDR_VAR 0 3
43300: PUSH
43301: LD_INT 3
43303: ST_TO_ADDR
43304: GO 43307
43306: POP
// if places then
43307: LD_VAR 0 3
43311: IFFALSE 43334
// result := UnitsInside ( building ) < places ;
43313: LD_ADDR_VAR 0 2
43317: PUSH
43318: LD_VAR 0 1
43322: PPUSH
43323: CALL_OW 313
43327: PUSH
43328: LD_VAR 0 3
43332: LESS
43333: ST_TO_ADDR
// end ;
43334: LD_VAR 0 2
43338: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43339: LD_INT 0
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
// tmp := [ ] ;
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: EMPTY
43351: ST_TO_ADDR
// list := [ ] ;
43352: LD_ADDR_VAR 0 5
43356: PUSH
43357: EMPTY
43358: ST_TO_ADDR
// for i = 16 to 25 do
43359: LD_ADDR_VAR 0 4
43363: PUSH
43364: DOUBLE
43365: LD_INT 16
43367: DEC
43368: ST_TO_ADDR
43369: LD_INT 25
43371: PUSH
43372: FOR_TO
43373: IFFALSE 43446
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_VAR 0 3
43384: PUSH
43385: LD_INT 22
43387: PUSH
43388: LD_VAR 0 1
43392: PPUSH
43393: CALL_OW 255
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 91
43404: PUSH
43405: LD_VAR 0 1
43409: PUSH
43410: LD_INT 6
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 30
43420: PUSH
43421: LD_VAR 0 4
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: PPUSH
43438: CALL_OW 69
43442: ADD
43443: ST_TO_ADDR
43444: GO 43372
43446: POP
43447: POP
// for i = 1 to tmp do
43448: LD_ADDR_VAR 0 4
43452: PUSH
43453: DOUBLE
43454: LD_INT 1
43456: DEC
43457: ST_TO_ADDR
43458: LD_VAR 0 3
43462: PUSH
43463: FOR_TO
43464: IFFALSE 43552
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43466: LD_ADDR_VAR 0 5
43470: PUSH
43471: LD_VAR 0 5
43475: PUSH
43476: LD_VAR 0 3
43480: PUSH
43481: LD_VAR 0 4
43485: ARRAY
43486: PPUSH
43487: CALL_OW 266
43491: PUSH
43492: LD_VAR 0 3
43496: PUSH
43497: LD_VAR 0 4
43501: ARRAY
43502: PPUSH
43503: CALL_OW 250
43507: PUSH
43508: LD_VAR 0 3
43512: PUSH
43513: LD_VAR 0 4
43517: ARRAY
43518: PPUSH
43519: CALL_OW 251
43523: PUSH
43524: LD_VAR 0 3
43528: PUSH
43529: LD_VAR 0 4
43533: ARRAY
43534: PPUSH
43535: CALL_OW 254
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: ADD
43549: ST_TO_ADDR
43550: GO 43463
43552: POP
43553: POP
// result := list ;
43554: LD_ADDR_VAR 0 2
43558: PUSH
43559: LD_VAR 0 5
43563: ST_TO_ADDR
// end ;
43564: LD_VAR 0 2
43568: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43569: LD_INT 0
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
// if not factory then
43578: LD_VAR 0 1
43582: NOT
43583: IFFALSE 43587
// exit ;
43585: GO 44180
// if control = control_apeman then
43587: LD_VAR 0 4
43591: PUSH
43592: LD_INT 5
43594: EQUAL
43595: IFFALSE 43704
// begin tmp := UnitsInside ( factory ) ;
43597: LD_ADDR_VAR 0 8
43601: PUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: CALL_OW 313
43611: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43612: LD_VAR 0 8
43616: PPUSH
43617: LD_INT 25
43619: PUSH
43620: LD_INT 12
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PPUSH
43627: CALL_OW 72
43631: NOT
43632: IFFALSE 43642
// control := control_manual ;
43634: LD_ADDR_VAR 0 4
43638: PUSH
43639: LD_INT 1
43641: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43642: LD_ADDR_VAR 0 8
43646: PUSH
43647: LD_VAR 0 1
43651: PPUSH
43652: CALL 43339 0 1
43656: ST_TO_ADDR
// if tmp then
43657: LD_VAR 0 8
43661: IFFALSE 43704
// begin for i in tmp do
43663: LD_ADDR_VAR 0 7
43667: PUSH
43668: LD_VAR 0 8
43672: PUSH
43673: FOR_IN
43674: IFFALSE 43702
// if i [ 1 ] = b_ext_radio then
43676: LD_VAR 0 7
43680: PUSH
43681: LD_INT 1
43683: ARRAY
43684: PUSH
43685: LD_INT 22
43687: EQUAL
43688: IFFALSE 43700
// begin control := control_remote ;
43690: LD_ADDR_VAR 0 4
43694: PUSH
43695: LD_INT 2
43697: ST_TO_ADDR
// break ;
43698: GO 43702
// end ;
43700: GO 43673
43702: POP
43703: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43704: LD_VAR 0 1
43708: PPUSH
43709: LD_VAR 0 2
43713: PPUSH
43714: LD_VAR 0 3
43718: PPUSH
43719: LD_VAR 0 4
43723: PPUSH
43724: LD_VAR 0 5
43728: PPUSH
43729: CALL_OW 448
43733: IFFALSE 43768
// begin result := [ chassis , engine , control , weapon ] ;
43735: LD_ADDR_VAR 0 6
43739: PUSH
43740: LD_VAR 0 2
43744: PUSH
43745: LD_VAR 0 3
43749: PUSH
43750: LD_VAR 0 4
43754: PUSH
43755: LD_VAR 0 5
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
// exit ;
43766: GO 44180
// end ; _chassis := AvailableChassisList ( factory ) ;
43768: LD_ADDR_VAR 0 9
43772: PUSH
43773: LD_VAR 0 1
43777: PPUSH
43778: CALL_OW 475
43782: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43783: LD_ADDR_VAR 0 11
43787: PUSH
43788: LD_VAR 0 1
43792: PPUSH
43793: CALL_OW 476
43797: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43798: LD_ADDR_VAR 0 12
43802: PUSH
43803: LD_VAR 0 1
43807: PPUSH
43808: CALL_OW 477
43812: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43813: LD_ADDR_VAR 0 10
43817: PUSH
43818: LD_VAR 0 1
43822: PPUSH
43823: CALL_OW 478
43827: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43828: LD_VAR 0 9
43832: NOT
43833: PUSH
43834: LD_VAR 0 11
43838: NOT
43839: OR
43840: PUSH
43841: LD_VAR 0 12
43845: NOT
43846: OR
43847: PUSH
43848: LD_VAR 0 10
43852: NOT
43853: OR
43854: IFFALSE 43889
// begin result := [ chassis , engine , control , weapon ] ;
43856: LD_ADDR_VAR 0 6
43860: PUSH
43861: LD_VAR 0 2
43865: PUSH
43866: LD_VAR 0 3
43870: PUSH
43871: LD_VAR 0 4
43875: PUSH
43876: LD_VAR 0 5
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// exit ;
43887: GO 44180
// end ; if not chassis in _chassis then
43889: LD_VAR 0 2
43893: PUSH
43894: LD_VAR 0 9
43898: IN
43899: NOT
43900: IFFALSE 43926
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43902: LD_ADDR_VAR 0 2
43906: PUSH
43907: LD_VAR 0 9
43911: PUSH
43912: LD_INT 1
43914: PPUSH
43915: LD_VAR 0 9
43919: PPUSH
43920: CALL_OW 12
43924: ARRAY
43925: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43926: LD_VAR 0 2
43930: PPUSH
43931: LD_VAR 0 3
43935: PPUSH
43936: CALL 44185 0 2
43940: NOT
43941: IFFALSE 44000
// repeat engine := _engine [ 1 ] ;
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_VAR 0 11
43952: PUSH
43953: LD_INT 1
43955: ARRAY
43956: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43957: LD_ADDR_VAR 0 11
43961: PUSH
43962: LD_VAR 0 11
43966: PPUSH
43967: LD_INT 1
43969: PPUSH
43970: CALL_OW 3
43974: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43975: LD_VAR 0 2
43979: PPUSH
43980: LD_VAR 0 3
43984: PPUSH
43985: CALL 44185 0 2
43989: PUSH
43990: LD_VAR 0 11
43994: PUSH
43995: EMPTY
43996: EQUAL
43997: OR
43998: IFFALSE 43943
// if not control in _control then
44000: LD_VAR 0 4
44004: PUSH
44005: LD_VAR 0 12
44009: IN
44010: NOT
44011: IFFALSE 44037
// control := _control [ rand ( 1 , _control ) ] ;
44013: LD_ADDR_VAR 0 4
44017: PUSH
44018: LD_VAR 0 12
44022: PUSH
44023: LD_INT 1
44025: PPUSH
44026: LD_VAR 0 12
44030: PPUSH
44031: CALL_OW 12
44035: ARRAY
44036: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44037: LD_VAR 0 2
44041: PPUSH
44042: LD_VAR 0 5
44046: PPUSH
44047: CALL 44405 0 2
44051: NOT
44052: IFFALSE 44111
// repeat weapon := _weapon [ 1 ] ;
44054: LD_ADDR_VAR 0 5
44058: PUSH
44059: LD_VAR 0 10
44063: PUSH
44064: LD_INT 1
44066: ARRAY
44067: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44068: LD_ADDR_VAR 0 10
44072: PUSH
44073: LD_VAR 0 10
44077: PPUSH
44078: LD_INT 1
44080: PPUSH
44081: CALL_OW 3
44085: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44086: LD_VAR 0 2
44090: PPUSH
44091: LD_VAR 0 5
44095: PPUSH
44096: CALL 44405 0 2
44100: PUSH
44101: LD_VAR 0 10
44105: PUSH
44106: EMPTY
44107: EQUAL
44108: OR
44109: IFFALSE 44054
// result := [ ] ;
44111: LD_ADDR_VAR 0 6
44115: PUSH
44116: EMPTY
44117: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44118: LD_VAR 0 1
44122: PPUSH
44123: LD_VAR 0 2
44127: PPUSH
44128: LD_VAR 0 3
44132: PPUSH
44133: LD_VAR 0 4
44137: PPUSH
44138: LD_VAR 0 5
44142: PPUSH
44143: CALL_OW 448
44147: IFFALSE 44180
// result := [ chassis , engine , control , weapon ] ;
44149: LD_ADDR_VAR 0 6
44153: PUSH
44154: LD_VAR 0 2
44158: PUSH
44159: LD_VAR 0 3
44163: PUSH
44164: LD_VAR 0 4
44168: PUSH
44169: LD_VAR 0 5
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: ST_TO_ADDR
// end ;
44180: LD_VAR 0 6
44184: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44185: LD_INT 0
44187: PPUSH
// if not chassis or not engine then
44188: LD_VAR 0 1
44192: NOT
44193: PUSH
44194: LD_VAR 0 2
44198: NOT
44199: OR
44200: IFFALSE 44204
// exit ;
44202: GO 44400
// case engine of engine_solar :
44204: LD_VAR 0 2
44208: PUSH
44209: LD_INT 2
44211: DOUBLE
44212: EQUAL
44213: IFTRUE 44217
44215: GO 44255
44217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44218: LD_ADDR_VAR 0 3
44222: PUSH
44223: LD_INT 11
44225: PUSH
44226: LD_INT 12
44228: PUSH
44229: LD_INT 13
44231: PUSH
44232: LD_INT 14
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 3
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
44253: GO 44384
44255: LD_INT 1
44257: DOUBLE
44258: EQUAL
44259: IFTRUE 44263
44261: GO 44325
44263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44264: LD_ADDR_VAR 0 3
44268: PUSH
44269: LD_INT 11
44271: PUSH
44272: LD_INT 12
44274: PUSH
44275: LD_INT 13
44277: PUSH
44278: LD_INT 14
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 3
44289: PUSH
44290: LD_INT 4
44292: PUSH
44293: LD_INT 5
44295: PUSH
44296: LD_INT 21
44298: PUSH
44299: LD_INT 23
44301: PUSH
44302: LD_INT 22
44304: PUSH
44305: LD_INT 24
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: ST_TO_ADDR
44323: GO 44384
44325: LD_INT 3
44327: DOUBLE
44328: EQUAL
44329: IFTRUE 44333
44331: GO 44383
44333: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44334: LD_ADDR_VAR 0 3
44338: PUSH
44339: LD_INT 13
44341: PUSH
44342: LD_INT 14
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 3
44350: PUSH
44351: LD_INT 4
44353: PUSH
44354: LD_INT 5
44356: PUSH
44357: LD_INT 21
44359: PUSH
44360: LD_INT 22
44362: PUSH
44363: LD_INT 23
44365: PUSH
44366: LD_INT 24
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
44381: GO 44384
44383: POP
// result := ( chassis in result ) ;
44384: LD_ADDR_VAR 0 3
44388: PUSH
44389: LD_VAR 0 1
44393: PUSH
44394: LD_VAR 0 3
44398: IN
44399: ST_TO_ADDR
// end ;
44400: LD_VAR 0 3
44404: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44405: LD_INT 0
44407: PPUSH
// if not chassis or not weapon then
44408: LD_VAR 0 1
44412: NOT
44413: PUSH
44414: LD_VAR 0 2
44418: NOT
44419: OR
44420: IFFALSE 44424
// exit ;
44422: GO 45484
// case weapon of us_machine_gun :
44424: LD_VAR 0 2
44428: PUSH
44429: LD_INT 2
44431: DOUBLE
44432: EQUAL
44433: IFTRUE 44437
44435: GO 44467
44437: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44438: LD_ADDR_VAR 0 3
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 3
44451: PUSH
44452: LD_INT 4
44454: PUSH
44455: LD_INT 5
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: ST_TO_ADDR
44465: GO 45468
44467: LD_INT 3
44469: DOUBLE
44470: EQUAL
44471: IFTRUE 44475
44473: GO 44505
44475: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44476: LD_ADDR_VAR 0 3
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: LD_INT 4
44492: PUSH
44493: LD_INT 5
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: ST_TO_ADDR
44503: GO 45468
44505: LD_INT 11
44507: DOUBLE
44508: EQUAL
44509: IFTRUE 44513
44511: GO 44543
44513: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44514: LD_ADDR_VAR 0 3
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 3
44527: PUSH
44528: LD_INT 4
44530: PUSH
44531: LD_INT 5
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: ST_TO_ADDR
44541: GO 45468
44543: LD_INT 4
44545: DOUBLE
44546: EQUAL
44547: IFTRUE 44551
44549: GO 44577
44551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44552: LD_ADDR_VAR 0 3
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 3
44562: PUSH
44563: LD_INT 4
44565: PUSH
44566: LD_INT 5
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: ST_TO_ADDR
44575: GO 45468
44577: LD_INT 5
44579: DOUBLE
44580: EQUAL
44581: IFTRUE 44585
44583: GO 44611
44585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44586: LD_ADDR_VAR 0 3
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: LD_INT 3
44596: PUSH
44597: LD_INT 4
44599: PUSH
44600: LD_INT 5
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
44609: GO 45468
44611: LD_INT 9
44613: DOUBLE
44614: EQUAL
44615: IFTRUE 44619
44617: GO 44645
44619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: LD_INT 4
44633: PUSH
44634: LD_INT 5
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: ST_TO_ADDR
44643: GO 45468
44645: LD_INT 7
44647: DOUBLE
44648: EQUAL
44649: IFTRUE 44653
44651: GO 44679
44653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44654: LD_ADDR_VAR 0 3
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: LD_INT 4
44667: PUSH
44668: LD_INT 5
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: ST_TO_ADDR
44677: GO 45468
44679: LD_INT 12
44681: DOUBLE
44682: EQUAL
44683: IFTRUE 44687
44685: GO 44713
44687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44688: LD_ADDR_VAR 0 3
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 4
44701: PUSH
44702: LD_INT 5
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: ST_TO_ADDR
44711: GO 45468
44713: LD_INT 13
44715: DOUBLE
44716: EQUAL
44717: IFTRUE 44721
44719: GO 44747
44721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44722: LD_ADDR_VAR 0 3
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: LD_INT 4
44735: PUSH
44736: LD_INT 5
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: ST_TO_ADDR
44745: GO 45468
44747: LD_INT 14
44749: DOUBLE
44750: EQUAL
44751: IFTRUE 44755
44753: GO 44773
44755: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44756: LD_ADDR_VAR 0 3
44760: PUSH
44761: LD_INT 4
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: ST_TO_ADDR
44771: GO 45468
44773: LD_INT 6
44775: DOUBLE
44776: EQUAL
44777: IFTRUE 44781
44779: GO 44799
44781: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44782: LD_ADDR_VAR 0 3
44786: PUSH
44787: LD_INT 4
44789: PUSH
44790: LD_INT 5
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: ST_TO_ADDR
44797: GO 45468
44799: LD_INT 10
44801: DOUBLE
44802: EQUAL
44803: IFTRUE 44807
44805: GO 44825
44807: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44808: LD_ADDR_VAR 0 3
44812: PUSH
44813: LD_INT 4
44815: PUSH
44816: LD_INT 5
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: ST_TO_ADDR
44823: GO 45468
44825: LD_INT 22
44827: DOUBLE
44828: EQUAL
44829: IFTRUE 44833
44831: GO 44859
44833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44834: LD_ADDR_VAR 0 3
44838: PUSH
44839: LD_INT 11
44841: PUSH
44842: LD_INT 12
44844: PUSH
44845: LD_INT 13
44847: PUSH
44848: LD_INT 14
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
44857: GO 45468
44859: LD_INT 23
44861: DOUBLE
44862: EQUAL
44863: IFTRUE 44867
44865: GO 44893
44867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44868: LD_ADDR_VAR 0 3
44872: PUSH
44873: LD_INT 11
44875: PUSH
44876: LD_INT 12
44878: PUSH
44879: LD_INT 13
44881: PUSH
44882: LD_INT 14
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
44891: GO 45468
44893: LD_INT 24
44895: DOUBLE
44896: EQUAL
44897: IFTRUE 44901
44899: GO 44927
44901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44902: LD_ADDR_VAR 0 3
44906: PUSH
44907: LD_INT 11
44909: PUSH
44910: LD_INT 12
44912: PUSH
44913: LD_INT 13
44915: PUSH
44916: LD_INT 14
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
44925: GO 45468
44927: LD_INT 30
44929: DOUBLE
44930: EQUAL
44931: IFTRUE 44935
44933: GO 44961
44935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44936: LD_ADDR_VAR 0 3
44940: PUSH
44941: LD_INT 11
44943: PUSH
44944: LD_INT 12
44946: PUSH
44947: LD_INT 13
44949: PUSH
44950: LD_INT 14
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: ST_TO_ADDR
44959: GO 45468
44961: LD_INT 25
44963: DOUBLE
44964: EQUAL
44965: IFTRUE 44969
44967: GO 44987
44969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44970: LD_ADDR_VAR 0 3
44974: PUSH
44975: LD_INT 13
44977: PUSH
44978: LD_INT 14
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: ST_TO_ADDR
44985: GO 45468
44987: LD_INT 27
44989: DOUBLE
44990: EQUAL
44991: IFTRUE 44995
44993: GO 45013
44995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44996: LD_ADDR_VAR 0 3
45000: PUSH
45001: LD_INT 13
45003: PUSH
45004: LD_INT 14
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: ST_TO_ADDR
45011: GO 45468
45013: LD_INT 92
45015: DOUBLE
45016: EQUAL
45017: IFTRUE 45021
45019: GO 45047
45021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45022: LD_ADDR_VAR 0 3
45026: PUSH
45027: LD_INT 11
45029: PUSH
45030: LD_INT 12
45032: PUSH
45033: LD_INT 13
45035: PUSH
45036: LD_INT 14
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: ST_TO_ADDR
45045: GO 45468
45047: LD_INT 28
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45073
45055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 13
45063: PUSH
45064: LD_INT 14
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: ST_TO_ADDR
45071: GO 45468
45073: LD_INT 29
45075: DOUBLE
45076: EQUAL
45077: IFTRUE 45081
45079: GO 45099
45081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45082: LD_ADDR_VAR 0 3
45086: PUSH
45087: LD_INT 13
45089: PUSH
45090: LD_INT 14
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: ST_TO_ADDR
45097: GO 45468
45099: LD_INT 31
45101: DOUBLE
45102: EQUAL
45103: IFTRUE 45107
45105: GO 45125
45107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45108: LD_ADDR_VAR 0 3
45112: PUSH
45113: LD_INT 13
45115: PUSH
45116: LD_INT 14
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: ST_TO_ADDR
45123: GO 45468
45125: LD_INT 26
45127: DOUBLE
45128: EQUAL
45129: IFTRUE 45133
45131: GO 45151
45133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45134: LD_ADDR_VAR 0 3
45138: PUSH
45139: LD_INT 13
45141: PUSH
45142: LD_INT 14
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: ST_TO_ADDR
45149: GO 45468
45151: LD_INT 42
45153: DOUBLE
45154: EQUAL
45155: IFTRUE 45159
45157: GO 45185
45159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45160: LD_ADDR_VAR 0 3
45164: PUSH
45165: LD_INT 21
45167: PUSH
45168: LD_INT 22
45170: PUSH
45171: LD_INT 23
45173: PUSH
45174: LD_INT 24
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: ST_TO_ADDR
45183: GO 45468
45185: LD_INT 43
45187: DOUBLE
45188: EQUAL
45189: IFTRUE 45193
45191: GO 45219
45193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45194: LD_ADDR_VAR 0 3
45198: PUSH
45199: LD_INT 21
45201: PUSH
45202: LD_INT 22
45204: PUSH
45205: LD_INT 23
45207: PUSH
45208: LD_INT 24
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
45217: GO 45468
45219: LD_INT 44
45221: DOUBLE
45222: EQUAL
45223: IFTRUE 45227
45225: GO 45253
45227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_INT 21
45235: PUSH
45236: LD_INT 22
45238: PUSH
45239: LD_INT 23
45241: PUSH
45242: LD_INT 24
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
45251: GO 45468
45253: LD_INT 45
45255: DOUBLE
45256: EQUAL
45257: IFTRUE 45261
45259: GO 45287
45261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_INT 21
45269: PUSH
45270: LD_INT 22
45272: PUSH
45273: LD_INT 23
45275: PUSH
45276: LD_INT 24
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
45285: GO 45468
45287: LD_INT 49
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45295
45293: GO 45321
45295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45296: LD_ADDR_VAR 0 3
45300: PUSH
45301: LD_INT 21
45303: PUSH
45304: LD_INT 22
45306: PUSH
45307: LD_INT 23
45309: PUSH
45310: LD_INT 24
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
45319: GO 45468
45321: LD_INT 51
45323: DOUBLE
45324: EQUAL
45325: IFTRUE 45329
45327: GO 45355
45329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45330: LD_ADDR_VAR 0 3
45334: PUSH
45335: LD_INT 21
45337: PUSH
45338: LD_INT 22
45340: PUSH
45341: LD_INT 23
45343: PUSH
45344: LD_INT 24
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
45353: GO 45468
45355: LD_INT 52
45357: DOUBLE
45358: EQUAL
45359: IFTRUE 45363
45361: GO 45389
45363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_INT 21
45371: PUSH
45372: LD_INT 22
45374: PUSH
45375: LD_INT 23
45377: PUSH
45378: LD_INT 24
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
45387: GO 45468
45389: LD_INT 53
45391: DOUBLE
45392: EQUAL
45393: IFTRUE 45397
45395: GO 45415
45397: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45398: LD_ADDR_VAR 0 3
45402: PUSH
45403: LD_INT 23
45405: PUSH
45406: LD_INT 24
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: ST_TO_ADDR
45413: GO 45468
45415: LD_INT 46
45417: DOUBLE
45418: EQUAL
45419: IFTRUE 45423
45421: GO 45441
45423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45424: LD_ADDR_VAR 0 3
45428: PUSH
45429: LD_INT 23
45431: PUSH
45432: LD_INT 24
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: ST_TO_ADDR
45439: GO 45468
45441: LD_INT 47
45443: DOUBLE
45444: EQUAL
45445: IFTRUE 45449
45447: GO 45467
45449: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45450: LD_ADDR_VAR 0 3
45454: PUSH
45455: LD_INT 23
45457: PUSH
45458: LD_INT 24
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: ST_TO_ADDR
45465: GO 45468
45467: POP
// result := ( chassis in result ) ;
45468: LD_ADDR_VAR 0 3
45472: PUSH
45473: LD_VAR 0 1
45477: PUSH
45478: LD_VAR 0 3
45482: IN
45483: ST_TO_ADDR
// end ;
45484: LD_VAR 0 3
45488: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45489: LD_INT 0
45491: PPUSH
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
// result := array ;
45498: LD_ADDR_VAR 0 5
45502: PUSH
45503: LD_VAR 0 1
45507: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45508: LD_VAR 0 1
45512: NOT
45513: PUSH
45514: LD_VAR 0 2
45518: NOT
45519: OR
45520: PUSH
45521: LD_VAR 0 3
45525: NOT
45526: OR
45527: PUSH
45528: LD_VAR 0 2
45532: PUSH
45533: LD_VAR 0 1
45537: GREATER
45538: OR
45539: PUSH
45540: LD_VAR 0 3
45544: PUSH
45545: LD_VAR 0 1
45549: GREATER
45550: OR
45551: IFFALSE 45555
// exit ;
45553: GO 45851
// if direction then
45555: LD_VAR 0 4
45559: IFFALSE 45623
// begin d := 1 ;
45561: LD_ADDR_VAR 0 9
45565: PUSH
45566: LD_INT 1
45568: ST_TO_ADDR
// if i_from > i_to then
45569: LD_VAR 0 2
45573: PUSH
45574: LD_VAR 0 3
45578: GREATER
45579: IFFALSE 45605
// length := ( array - i_from ) + i_to else
45581: LD_ADDR_VAR 0 11
45585: PUSH
45586: LD_VAR 0 1
45590: PUSH
45591: LD_VAR 0 2
45595: MINUS
45596: PUSH
45597: LD_VAR 0 3
45601: PLUS
45602: ST_TO_ADDR
45603: GO 45621
// length := i_to - i_from ;
45605: LD_ADDR_VAR 0 11
45609: PUSH
45610: LD_VAR 0 3
45614: PUSH
45615: LD_VAR 0 2
45619: MINUS
45620: ST_TO_ADDR
// end else
45621: GO 45684
// begin d := - 1 ;
45623: LD_ADDR_VAR 0 9
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: ST_TO_ADDR
// if i_from > i_to then
45632: LD_VAR 0 2
45636: PUSH
45637: LD_VAR 0 3
45641: GREATER
45642: IFFALSE 45662
// length := i_from - i_to else
45644: LD_ADDR_VAR 0 11
45648: PUSH
45649: LD_VAR 0 2
45653: PUSH
45654: LD_VAR 0 3
45658: MINUS
45659: ST_TO_ADDR
45660: GO 45684
// length := ( array - i_to ) + i_from ;
45662: LD_ADDR_VAR 0 11
45666: PUSH
45667: LD_VAR 0 1
45671: PUSH
45672: LD_VAR 0 3
45676: MINUS
45677: PUSH
45678: LD_VAR 0 2
45682: PLUS
45683: ST_TO_ADDR
// end ; if not length then
45684: LD_VAR 0 11
45688: NOT
45689: IFFALSE 45693
// exit ;
45691: GO 45851
// tmp := array ;
45693: LD_ADDR_VAR 0 10
45697: PUSH
45698: LD_VAR 0 1
45702: ST_TO_ADDR
// for i = 1 to length do
45703: LD_ADDR_VAR 0 6
45707: PUSH
45708: DOUBLE
45709: LD_INT 1
45711: DEC
45712: ST_TO_ADDR
45713: LD_VAR 0 11
45717: PUSH
45718: FOR_TO
45719: IFFALSE 45839
// begin for j = 1 to array do
45721: LD_ADDR_VAR 0 7
45725: PUSH
45726: DOUBLE
45727: LD_INT 1
45729: DEC
45730: ST_TO_ADDR
45731: LD_VAR 0 1
45735: PUSH
45736: FOR_TO
45737: IFFALSE 45825
// begin k := j + d ;
45739: LD_ADDR_VAR 0 8
45743: PUSH
45744: LD_VAR 0 7
45748: PUSH
45749: LD_VAR 0 9
45753: PLUS
45754: ST_TO_ADDR
// if k > array then
45755: LD_VAR 0 8
45759: PUSH
45760: LD_VAR 0 1
45764: GREATER
45765: IFFALSE 45775
// k := 1 ;
45767: LD_ADDR_VAR 0 8
45771: PUSH
45772: LD_INT 1
45774: ST_TO_ADDR
// if not k then
45775: LD_VAR 0 8
45779: NOT
45780: IFFALSE 45792
// k := array ;
45782: LD_ADDR_VAR 0 8
45786: PUSH
45787: LD_VAR 0 1
45791: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45792: LD_ADDR_VAR 0 10
45796: PUSH
45797: LD_VAR 0 10
45801: PPUSH
45802: LD_VAR 0 8
45806: PPUSH
45807: LD_VAR 0 1
45811: PUSH
45812: LD_VAR 0 7
45816: ARRAY
45817: PPUSH
45818: CALL_OW 1
45822: ST_TO_ADDR
// end ;
45823: GO 45736
45825: POP
45826: POP
// array := tmp ;
45827: LD_ADDR_VAR 0 1
45831: PUSH
45832: LD_VAR 0 10
45836: ST_TO_ADDR
// end ;
45837: GO 45718
45839: POP
45840: POP
// result := array ;
45841: LD_ADDR_VAR 0 5
45845: PUSH
45846: LD_VAR 0 1
45850: ST_TO_ADDR
// end ;
45851: LD_VAR 0 5
45855: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45856: LD_INT 0
45858: PPUSH
45859: PPUSH
// result := 0 ;
45860: LD_ADDR_VAR 0 3
45864: PUSH
45865: LD_INT 0
45867: ST_TO_ADDR
// if not array or not value in array then
45868: LD_VAR 0 1
45872: NOT
45873: PUSH
45874: LD_VAR 0 2
45878: PUSH
45879: LD_VAR 0 1
45883: IN
45884: NOT
45885: OR
45886: IFFALSE 45890
// exit ;
45888: GO 45944
// for i = 1 to array do
45890: LD_ADDR_VAR 0 4
45894: PUSH
45895: DOUBLE
45896: LD_INT 1
45898: DEC
45899: ST_TO_ADDR
45900: LD_VAR 0 1
45904: PUSH
45905: FOR_TO
45906: IFFALSE 45942
// if value = array [ i ] then
45908: LD_VAR 0 2
45912: PUSH
45913: LD_VAR 0 1
45917: PUSH
45918: LD_VAR 0 4
45922: ARRAY
45923: EQUAL
45924: IFFALSE 45940
// begin result := i ;
45926: LD_ADDR_VAR 0 3
45930: PUSH
45931: LD_VAR 0 4
45935: ST_TO_ADDR
// exit ;
45936: POP
45937: POP
45938: GO 45944
// end ;
45940: GO 45905
45942: POP
45943: POP
// end ;
45944: LD_VAR 0 3
45948: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45949: LD_INT 0
45951: PPUSH
// vc_chassis := chassis ;
45952: LD_ADDR_OWVAR 37
45956: PUSH
45957: LD_VAR 0 1
45961: ST_TO_ADDR
// vc_engine := engine ;
45962: LD_ADDR_OWVAR 39
45966: PUSH
45967: LD_VAR 0 2
45971: ST_TO_ADDR
// vc_control := control ;
45972: LD_ADDR_OWVAR 38
45976: PUSH
45977: LD_VAR 0 3
45981: ST_TO_ADDR
// vc_weapon := weapon ;
45982: LD_ADDR_OWVAR 40
45986: PUSH
45987: LD_VAR 0 4
45991: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45992: LD_ADDR_OWVAR 41
45996: PUSH
45997: LD_VAR 0 5
46001: ST_TO_ADDR
// end ;
46002: LD_VAR 0 6
46006: RET
// export function WantPlant ( unit ) ; var task ; begin
46007: LD_INT 0
46009: PPUSH
46010: PPUSH
// result := false ;
46011: LD_ADDR_VAR 0 2
46015: PUSH
46016: LD_INT 0
46018: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46019: LD_ADDR_VAR 0 3
46023: PUSH
46024: LD_VAR 0 1
46028: PPUSH
46029: CALL_OW 437
46033: ST_TO_ADDR
// if task then
46034: LD_VAR 0 3
46038: IFFALSE 46066
// if task [ 1 ] [ 1 ] = p then
46040: LD_VAR 0 3
46044: PUSH
46045: LD_INT 1
46047: ARRAY
46048: PUSH
46049: LD_INT 1
46051: ARRAY
46052: PUSH
46053: LD_STRING p
46055: EQUAL
46056: IFFALSE 46066
// result := true ;
46058: LD_ADDR_VAR 0 2
46062: PUSH
46063: LD_INT 1
46065: ST_TO_ADDR
// end ;
46066: LD_VAR 0 2
46070: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46071: LD_INT 0
46073: PPUSH
46074: PPUSH
46075: PPUSH
46076: PPUSH
// if pos < 1 then
46077: LD_VAR 0 2
46081: PUSH
46082: LD_INT 1
46084: LESS
46085: IFFALSE 46089
// exit ;
46087: GO 46392
// if pos = 1 then
46089: LD_VAR 0 2
46093: PUSH
46094: LD_INT 1
46096: EQUAL
46097: IFFALSE 46130
// result := Replace ( arr , pos [ 1 ] , value ) else
46099: LD_ADDR_VAR 0 4
46103: PUSH
46104: LD_VAR 0 1
46108: PPUSH
46109: LD_VAR 0 2
46113: PUSH
46114: LD_INT 1
46116: ARRAY
46117: PPUSH
46118: LD_VAR 0 3
46122: PPUSH
46123: CALL_OW 1
46127: ST_TO_ADDR
46128: GO 46392
// begin tmp := arr ;
46130: LD_ADDR_VAR 0 6
46134: PUSH
46135: LD_VAR 0 1
46139: ST_TO_ADDR
// s_arr := [ tmp ] ;
46140: LD_ADDR_VAR 0 7
46144: PUSH
46145: LD_VAR 0 6
46149: PUSH
46150: EMPTY
46151: LIST
46152: ST_TO_ADDR
// for i = 1 to pos - 1 do
46153: LD_ADDR_VAR 0 5
46157: PUSH
46158: DOUBLE
46159: LD_INT 1
46161: DEC
46162: ST_TO_ADDR
46163: LD_VAR 0 2
46167: PUSH
46168: LD_INT 1
46170: MINUS
46171: PUSH
46172: FOR_TO
46173: IFFALSE 46218
// begin tmp := tmp [ pos [ i ] ] ;
46175: LD_ADDR_VAR 0 6
46179: PUSH
46180: LD_VAR 0 6
46184: PUSH
46185: LD_VAR 0 2
46189: PUSH
46190: LD_VAR 0 5
46194: ARRAY
46195: ARRAY
46196: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46197: LD_ADDR_VAR 0 7
46201: PUSH
46202: LD_VAR 0 7
46206: PUSH
46207: LD_VAR 0 6
46211: PUSH
46212: EMPTY
46213: LIST
46214: ADD
46215: ST_TO_ADDR
// end ;
46216: GO 46172
46218: POP
46219: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46220: LD_ADDR_VAR 0 6
46224: PUSH
46225: LD_VAR 0 6
46229: PPUSH
46230: LD_VAR 0 2
46234: PUSH
46235: LD_VAR 0 2
46239: ARRAY
46240: PPUSH
46241: LD_VAR 0 3
46245: PPUSH
46246: CALL_OW 1
46250: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46251: LD_ADDR_VAR 0 7
46255: PUSH
46256: LD_VAR 0 7
46260: PPUSH
46261: LD_VAR 0 7
46265: PPUSH
46266: LD_VAR 0 6
46270: PPUSH
46271: CALL_OW 1
46275: ST_TO_ADDR
// for i = s_arr downto 2 do
46276: LD_ADDR_VAR 0 5
46280: PUSH
46281: DOUBLE
46282: LD_VAR 0 7
46286: INC
46287: ST_TO_ADDR
46288: LD_INT 2
46290: PUSH
46291: FOR_DOWNTO
46292: IFFALSE 46376
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46294: LD_ADDR_VAR 0 6
46298: PUSH
46299: LD_VAR 0 7
46303: PUSH
46304: LD_VAR 0 5
46308: PUSH
46309: LD_INT 1
46311: MINUS
46312: ARRAY
46313: PPUSH
46314: LD_VAR 0 2
46318: PUSH
46319: LD_VAR 0 5
46323: PUSH
46324: LD_INT 1
46326: MINUS
46327: ARRAY
46328: PPUSH
46329: LD_VAR 0 7
46333: PUSH
46334: LD_VAR 0 5
46338: ARRAY
46339: PPUSH
46340: CALL_OW 1
46344: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46345: LD_ADDR_VAR 0 7
46349: PUSH
46350: LD_VAR 0 7
46354: PPUSH
46355: LD_VAR 0 5
46359: PUSH
46360: LD_INT 1
46362: MINUS
46363: PPUSH
46364: LD_VAR 0 6
46368: PPUSH
46369: CALL_OW 1
46373: ST_TO_ADDR
// end ;
46374: GO 46291
46376: POP
46377: POP
// result := s_arr [ 1 ] ;
46378: LD_ADDR_VAR 0 4
46382: PUSH
46383: LD_VAR 0 7
46387: PUSH
46388: LD_INT 1
46390: ARRAY
46391: ST_TO_ADDR
// end ; end ;
46392: LD_VAR 0 4
46396: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46397: LD_INT 0
46399: PPUSH
46400: PPUSH
// if not list then
46401: LD_VAR 0 1
46405: NOT
46406: IFFALSE 46410
// exit ;
46408: GO 46501
// i := list [ pos1 ] ;
46410: LD_ADDR_VAR 0 5
46414: PUSH
46415: LD_VAR 0 1
46419: PUSH
46420: LD_VAR 0 2
46424: ARRAY
46425: ST_TO_ADDR
// if not i then
46426: LD_VAR 0 5
46430: NOT
46431: IFFALSE 46435
// exit ;
46433: GO 46501
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46435: LD_ADDR_VAR 0 1
46439: PUSH
46440: LD_VAR 0 1
46444: PPUSH
46445: LD_VAR 0 2
46449: PPUSH
46450: LD_VAR 0 1
46454: PUSH
46455: LD_VAR 0 3
46459: ARRAY
46460: PPUSH
46461: CALL_OW 1
46465: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46466: LD_ADDR_VAR 0 1
46470: PUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: LD_VAR 0 3
46480: PPUSH
46481: LD_VAR 0 5
46485: PPUSH
46486: CALL_OW 1
46490: ST_TO_ADDR
// result := list ;
46491: LD_ADDR_VAR 0 4
46495: PUSH
46496: LD_VAR 0 1
46500: ST_TO_ADDR
// end ;
46501: LD_VAR 0 4
46505: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46506: LD_INT 0
46508: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46509: LD_ADDR_VAR 0 5
46513: PUSH
46514: LD_VAR 0 1
46518: PPUSH
46519: CALL_OW 250
46523: PPUSH
46524: LD_VAR 0 1
46528: PPUSH
46529: CALL_OW 251
46533: PPUSH
46534: LD_VAR 0 2
46538: PPUSH
46539: LD_VAR 0 3
46543: PPUSH
46544: LD_VAR 0 4
46548: PPUSH
46549: CALL 46559 0 5
46553: ST_TO_ADDR
// end ;
46554: LD_VAR 0 5
46558: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46559: LD_INT 0
46561: PPUSH
46562: PPUSH
46563: PPUSH
46564: PPUSH
// if not list then
46565: LD_VAR 0 3
46569: NOT
46570: IFFALSE 46574
// exit ;
46572: GO 46962
// result := [ ] ;
46574: LD_ADDR_VAR 0 6
46578: PUSH
46579: EMPTY
46580: ST_TO_ADDR
// for i in list do
46581: LD_ADDR_VAR 0 7
46585: PUSH
46586: LD_VAR 0 3
46590: PUSH
46591: FOR_IN
46592: IFFALSE 46794
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46594: LD_ADDR_VAR 0 9
46598: PUSH
46599: LD_VAR 0 7
46603: PPUSH
46604: LD_VAR 0 1
46608: PPUSH
46609: LD_VAR 0 2
46613: PPUSH
46614: CALL_OW 297
46618: ST_TO_ADDR
// if not result then
46619: LD_VAR 0 6
46623: NOT
46624: IFFALSE 46650
// result := [ [ i , tmp ] ] else
46626: LD_ADDR_VAR 0 6
46630: PUSH
46631: LD_VAR 0 7
46635: PUSH
46636: LD_VAR 0 9
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: EMPTY
46646: LIST
46647: ST_TO_ADDR
46648: GO 46792
// begin if result [ result ] [ 2 ] < tmp then
46650: LD_VAR 0 6
46654: PUSH
46655: LD_VAR 0 6
46659: ARRAY
46660: PUSH
46661: LD_INT 2
46663: ARRAY
46664: PUSH
46665: LD_VAR 0 9
46669: LESS
46670: IFFALSE 46712
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46672: LD_ADDR_VAR 0 6
46676: PUSH
46677: LD_VAR 0 6
46681: PPUSH
46682: LD_VAR 0 6
46686: PUSH
46687: LD_INT 1
46689: PLUS
46690: PPUSH
46691: LD_VAR 0 7
46695: PUSH
46696: LD_VAR 0 9
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PPUSH
46705: CALL_OW 2
46709: ST_TO_ADDR
46710: GO 46792
// for j = 1 to result do
46712: LD_ADDR_VAR 0 8
46716: PUSH
46717: DOUBLE
46718: LD_INT 1
46720: DEC
46721: ST_TO_ADDR
46722: LD_VAR 0 6
46726: PUSH
46727: FOR_TO
46728: IFFALSE 46790
// begin if tmp < result [ j ] [ 2 ] then
46730: LD_VAR 0 9
46734: PUSH
46735: LD_VAR 0 6
46739: PUSH
46740: LD_VAR 0 8
46744: ARRAY
46745: PUSH
46746: LD_INT 2
46748: ARRAY
46749: LESS
46750: IFFALSE 46788
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46752: LD_ADDR_VAR 0 6
46756: PUSH
46757: LD_VAR 0 6
46761: PPUSH
46762: LD_VAR 0 8
46766: PPUSH
46767: LD_VAR 0 7
46771: PUSH
46772: LD_VAR 0 9
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PPUSH
46781: CALL_OW 2
46785: ST_TO_ADDR
// break ;
46786: GO 46790
// end ; end ;
46788: GO 46727
46790: POP
46791: POP
// end ; end ;
46792: GO 46591
46794: POP
46795: POP
// if result and not asc then
46796: LD_VAR 0 6
46800: PUSH
46801: LD_VAR 0 4
46805: NOT
46806: AND
46807: IFFALSE 46882
// begin tmp := result ;
46809: LD_ADDR_VAR 0 9
46813: PUSH
46814: LD_VAR 0 6
46818: ST_TO_ADDR
// for i = tmp downto 1 do
46819: LD_ADDR_VAR 0 7
46823: PUSH
46824: DOUBLE
46825: LD_VAR 0 9
46829: INC
46830: ST_TO_ADDR
46831: LD_INT 1
46833: PUSH
46834: FOR_DOWNTO
46835: IFFALSE 46880
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46837: LD_ADDR_VAR 0 6
46841: PUSH
46842: LD_VAR 0 6
46846: PPUSH
46847: LD_VAR 0 9
46851: PUSH
46852: LD_VAR 0 7
46856: MINUS
46857: PUSH
46858: LD_INT 1
46860: PLUS
46861: PPUSH
46862: LD_VAR 0 9
46866: PUSH
46867: LD_VAR 0 7
46871: ARRAY
46872: PPUSH
46873: CALL_OW 1
46877: ST_TO_ADDR
46878: GO 46834
46880: POP
46881: POP
// end ; tmp := [ ] ;
46882: LD_ADDR_VAR 0 9
46886: PUSH
46887: EMPTY
46888: ST_TO_ADDR
// if mode then
46889: LD_VAR 0 5
46893: IFFALSE 46962
// begin for i = 1 to result do
46895: LD_ADDR_VAR 0 7
46899: PUSH
46900: DOUBLE
46901: LD_INT 1
46903: DEC
46904: ST_TO_ADDR
46905: LD_VAR 0 6
46909: PUSH
46910: FOR_TO
46911: IFFALSE 46950
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46913: LD_ADDR_VAR 0 9
46917: PUSH
46918: LD_VAR 0 9
46922: PPUSH
46923: LD_VAR 0 7
46927: PPUSH
46928: LD_VAR 0 6
46932: PUSH
46933: LD_VAR 0 7
46937: ARRAY
46938: PUSH
46939: LD_INT 1
46941: ARRAY
46942: PPUSH
46943: CALL_OW 1
46947: ST_TO_ADDR
46948: GO 46910
46950: POP
46951: POP
// result := tmp ;
46952: LD_ADDR_VAR 0 6
46956: PUSH
46957: LD_VAR 0 9
46961: ST_TO_ADDR
// end ; end ;
46962: LD_VAR 0 6
46966: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46967: LD_INT 0
46969: PPUSH
46970: PPUSH
46971: PPUSH
46972: PPUSH
46973: PPUSH
46974: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46975: LD_ADDR_VAR 0 5
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: ST_TO_ADDR
// if not x or not y then
46997: LD_VAR 0 2
47001: NOT
47002: PUSH
47003: LD_VAR 0 3
47007: NOT
47008: OR
47009: IFFALSE 47013
// exit ;
47011: GO 48663
// if not range then
47013: LD_VAR 0 4
47017: NOT
47018: IFFALSE 47028
// range := 10 ;
47020: LD_ADDR_VAR 0 4
47024: PUSH
47025: LD_INT 10
47027: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47028: LD_ADDR_VAR 0 8
47032: PUSH
47033: LD_INT 81
47035: PUSH
47036: LD_VAR 0 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 92
47047: PUSH
47048: LD_VAR 0 2
47052: PUSH
47053: LD_VAR 0 3
47057: PUSH
47058: LD_VAR 0 4
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: LD_INT 21
47074: PUSH
47075: LD_INT 3
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: PPUSH
47091: CALL_OW 69
47095: ST_TO_ADDR
// if not tmp then
47096: LD_VAR 0 8
47100: NOT
47101: IFFALSE 47105
// exit ;
47103: GO 48663
// for i in tmp do
47105: LD_ADDR_VAR 0 6
47109: PUSH
47110: LD_VAR 0 8
47114: PUSH
47115: FOR_IN
47116: IFFALSE 48638
// begin points := [ 0 , 0 , 0 ] ;
47118: LD_ADDR_VAR 0 9
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: ST_TO_ADDR
// bpoints := 1 ;
47137: LD_ADDR_VAR 0 10
47141: PUSH
47142: LD_INT 1
47144: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47145: LD_VAR 0 6
47149: PPUSH
47150: CALL_OW 247
47154: PUSH
47155: LD_INT 1
47157: DOUBLE
47158: EQUAL
47159: IFTRUE 47163
47161: GO 47741
47163: POP
// begin if GetClass ( i ) = 1 then
47164: LD_VAR 0 6
47168: PPUSH
47169: CALL_OW 257
47173: PUSH
47174: LD_INT 1
47176: EQUAL
47177: IFFALSE 47198
// points := [ 10 , 5 , 3 ] ;
47179: LD_ADDR_VAR 0 9
47183: PUSH
47184: LD_INT 10
47186: PUSH
47187: LD_INT 5
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47198: LD_VAR 0 6
47202: PPUSH
47203: CALL_OW 257
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 3
47213: PUSH
47214: LD_INT 4
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: IN
47222: IFFALSE 47243
// points := [ 3 , 2 , 1 ] ;
47224: LD_ADDR_VAR 0 9
47228: PUSH
47229: LD_INT 3
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47243: LD_VAR 0 6
47247: PPUSH
47248: CALL_OW 257
47252: PUSH
47253: LD_INT 5
47255: EQUAL
47256: IFFALSE 47277
// points := [ 130 , 5 , 2 ] ;
47258: LD_ADDR_VAR 0 9
47262: PUSH
47263: LD_INT 130
47265: PUSH
47266: LD_INT 5
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47277: LD_VAR 0 6
47281: PPUSH
47282: CALL_OW 257
47286: PUSH
47287: LD_INT 8
47289: EQUAL
47290: IFFALSE 47311
// points := [ 35 , 35 , 30 ] ;
47292: LD_ADDR_VAR 0 9
47296: PUSH
47297: LD_INT 35
47299: PUSH
47300: LD_INT 35
47302: PUSH
47303: LD_INT 30
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47311: LD_VAR 0 6
47315: PPUSH
47316: CALL_OW 257
47320: PUSH
47321: LD_INT 9
47323: EQUAL
47324: IFFALSE 47345
// points := [ 20 , 55 , 40 ] ;
47326: LD_ADDR_VAR 0 9
47330: PUSH
47331: LD_INT 20
47333: PUSH
47334: LD_INT 55
47336: PUSH
47337: LD_INT 40
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47345: LD_VAR 0 6
47349: PPUSH
47350: CALL_OW 257
47354: PUSH
47355: LD_INT 12
47357: PUSH
47358: LD_INT 16
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: IN
47365: IFFALSE 47386
// points := [ 5 , 3 , 2 ] ;
47367: LD_ADDR_VAR 0 9
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: LD_INT 3
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47386: LD_VAR 0 6
47390: PPUSH
47391: CALL_OW 257
47395: PUSH
47396: LD_INT 17
47398: EQUAL
47399: IFFALSE 47420
// points := [ 100 , 50 , 75 ] ;
47401: LD_ADDR_VAR 0 9
47405: PUSH
47406: LD_INT 100
47408: PUSH
47409: LD_INT 50
47411: PUSH
47412: LD_INT 75
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47420: LD_VAR 0 6
47424: PPUSH
47425: CALL_OW 257
47429: PUSH
47430: LD_INT 15
47432: EQUAL
47433: IFFALSE 47454
// points := [ 10 , 5 , 3 ] ;
47435: LD_ADDR_VAR 0 9
47439: PUSH
47440: LD_INT 10
47442: PUSH
47443: LD_INT 5
47445: PUSH
47446: LD_INT 3
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47454: LD_VAR 0 6
47458: PPUSH
47459: CALL_OW 257
47463: PUSH
47464: LD_INT 14
47466: EQUAL
47467: IFFALSE 47488
// points := [ 10 , 0 , 0 ] ;
47469: LD_ADDR_VAR 0 9
47473: PUSH
47474: LD_INT 10
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47488: LD_VAR 0 6
47492: PPUSH
47493: CALL_OW 257
47497: PUSH
47498: LD_INT 11
47500: EQUAL
47501: IFFALSE 47522
// points := [ 30 , 10 , 5 ] ;
47503: LD_ADDR_VAR 0 9
47507: PUSH
47508: LD_INT 30
47510: PUSH
47511: LD_INT 10
47513: PUSH
47514: LD_INT 5
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47522: LD_VAR 0 1
47526: PPUSH
47527: LD_INT 5
47529: PPUSH
47530: CALL_OW 321
47534: PUSH
47535: LD_INT 2
47537: EQUAL
47538: IFFALSE 47555
// bpoints := bpoints * 1.8 ;
47540: LD_ADDR_VAR 0 10
47544: PUSH
47545: LD_VAR 0 10
47549: PUSH
47550: LD_REAL  1.80000000000000E+0000
47553: MUL
47554: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47555: LD_VAR 0 6
47559: PPUSH
47560: CALL_OW 257
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 4
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: IN
47583: PUSH
47584: LD_VAR 0 1
47588: PPUSH
47589: LD_INT 51
47591: PPUSH
47592: CALL_OW 321
47596: PUSH
47597: LD_INT 2
47599: EQUAL
47600: AND
47601: IFFALSE 47618
// bpoints := bpoints * 1.2 ;
47603: LD_ADDR_VAR 0 10
47607: PUSH
47608: LD_VAR 0 10
47612: PUSH
47613: LD_REAL  1.20000000000000E+0000
47616: MUL
47617: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47618: LD_VAR 0 6
47622: PPUSH
47623: CALL_OW 257
47627: PUSH
47628: LD_INT 5
47630: PUSH
47631: LD_INT 7
47633: PUSH
47634: LD_INT 9
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: IN
47642: PUSH
47643: LD_VAR 0 1
47647: PPUSH
47648: LD_INT 52
47650: PPUSH
47651: CALL_OW 321
47655: PUSH
47656: LD_INT 2
47658: EQUAL
47659: AND
47660: IFFALSE 47677
// bpoints := bpoints * 1.5 ;
47662: LD_ADDR_VAR 0 10
47666: PUSH
47667: LD_VAR 0 10
47671: PUSH
47672: LD_REAL  1.50000000000000E+0000
47675: MUL
47676: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47677: LD_VAR 0 1
47681: PPUSH
47682: LD_INT 66
47684: PPUSH
47685: CALL_OW 321
47689: PUSH
47690: LD_INT 2
47692: EQUAL
47693: IFFALSE 47710
// bpoints := bpoints * 1.1 ;
47695: LD_ADDR_VAR 0 10
47699: PUSH
47700: LD_VAR 0 10
47704: PUSH
47705: LD_REAL  1.10000000000000E+0000
47708: MUL
47709: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47710: LD_ADDR_VAR 0 10
47714: PUSH
47715: LD_VAR 0 10
47719: PUSH
47720: LD_VAR 0 6
47724: PPUSH
47725: LD_INT 1
47727: PPUSH
47728: CALL_OW 259
47732: PUSH
47733: LD_REAL  1.15000000000000E+0000
47736: MUL
47737: MUL
47738: ST_TO_ADDR
// end ; unit_vehicle :
47739: GO 48567
47741: LD_INT 2
47743: DOUBLE
47744: EQUAL
47745: IFTRUE 47749
47747: GO 48555
47749: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47750: LD_VAR 0 6
47754: PPUSH
47755: CALL_OW 264
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 42
47765: PUSH
47766: LD_INT 24
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: IN
47774: IFFALSE 47795
// points := [ 25 , 5 , 3 ] ;
47776: LD_ADDR_VAR 0 9
47780: PUSH
47781: LD_INT 25
47783: PUSH
47784: LD_INT 5
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47795: LD_VAR 0 6
47799: PPUSH
47800: CALL_OW 264
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: LD_INT 43
47810: PUSH
47811: LD_INT 25
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: IN
47819: IFFALSE 47840
// points := [ 40 , 15 , 5 ] ;
47821: LD_ADDR_VAR 0 9
47825: PUSH
47826: LD_INT 40
47828: PUSH
47829: LD_INT 15
47831: PUSH
47832: LD_INT 5
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47840: LD_VAR 0 6
47844: PPUSH
47845: CALL_OW 264
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: LD_INT 23
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: IN
47860: IFFALSE 47881
// points := [ 7 , 25 , 8 ] ;
47862: LD_ADDR_VAR 0 9
47866: PUSH
47867: LD_INT 7
47869: PUSH
47870: LD_INT 25
47872: PUSH
47873: LD_INT 8
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47881: LD_VAR 0 6
47885: PPUSH
47886: CALL_OW 264
47890: PUSH
47891: LD_INT 5
47893: PUSH
47894: LD_INT 27
47896: PUSH
47897: LD_INT 44
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: IN
47905: IFFALSE 47926
// points := [ 14 , 50 , 16 ] ;
47907: LD_ADDR_VAR 0 9
47911: PUSH
47912: LD_INT 14
47914: PUSH
47915: LD_INT 50
47917: PUSH
47918: LD_INT 16
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47926: LD_VAR 0 6
47930: PPUSH
47931: CALL_OW 264
47935: PUSH
47936: LD_INT 6
47938: PUSH
47939: LD_INT 46
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: IN
47946: IFFALSE 47967
// points := [ 32 , 120 , 70 ] ;
47948: LD_ADDR_VAR 0 9
47952: PUSH
47953: LD_INT 32
47955: PUSH
47956: LD_INT 120
47958: PUSH
47959: LD_INT 70
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: LIST
47966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47967: LD_VAR 0 6
47971: PPUSH
47972: CALL_OW 264
47976: PUSH
47977: LD_INT 7
47979: PUSH
47980: LD_INT 28
47982: PUSH
47983: LD_INT 45
47985: PUSH
47986: LD_INT 92
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: IN
47995: IFFALSE 48016
// points := [ 35 , 20 , 45 ] ;
47997: LD_ADDR_VAR 0 9
48001: PUSH
48002: LD_INT 35
48004: PUSH
48005: LD_INT 20
48007: PUSH
48008: LD_INT 45
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48016: LD_VAR 0 6
48020: PPUSH
48021: CALL_OW 264
48025: PUSH
48026: LD_INT 47
48028: PUSH
48029: EMPTY
48030: LIST
48031: IN
48032: IFFALSE 48053
// points := [ 67 , 45 , 75 ] ;
48034: LD_ADDR_VAR 0 9
48038: PUSH
48039: LD_INT 67
48041: PUSH
48042: LD_INT 45
48044: PUSH
48045: LD_INT 75
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48053: LD_VAR 0 6
48057: PPUSH
48058: CALL_OW 264
48062: PUSH
48063: LD_INT 26
48065: PUSH
48066: EMPTY
48067: LIST
48068: IN
48069: IFFALSE 48090
// points := [ 120 , 30 , 80 ] ;
48071: LD_ADDR_VAR 0 9
48075: PUSH
48076: LD_INT 120
48078: PUSH
48079: LD_INT 30
48081: PUSH
48082: LD_INT 80
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48090: LD_VAR 0 6
48094: PPUSH
48095: CALL_OW 264
48099: PUSH
48100: LD_INT 22
48102: PUSH
48103: EMPTY
48104: LIST
48105: IN
48106: IFFALSE 48127
// points := [ 40 , 1 , 1 ] ;
48108: LD_ADDR_VAR 0 9
48112: PUSH
48113: LD_INT 40
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48127: LD_VAR 0 6
48131: PPUSH
48132: CALL_OW 264
48136: PUSH
48137: LD_INT 29
48139: PUSH
48140: EMPTY
48141: LIST
48142: IN
48143: IFFALSE 48164
// points := [ 70 , 200 , 400 ] ;
48145: LD_ADDR_VAR 0 9
48149: PUSH
48150: LD_INT 70
48152: PUSH
48153: LD_INT 200
48155: PUSH
48156: LD_INT 400
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48164: LD_VAR 0 6
48168: PPUSH
48169: CALL_OW 264
48173: PUSH
48174: LD_INT 14
48176: PUSH
48177: LD_INT 53
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: IN
48184: IFFALSE 48205
// points := [ 40 , 10 , 20 ] ;
48186: LD_ADDR_VAR 0 9
48190: PUSH
48191: LD_INT 40
48193: PUSH
48194: LD_INT 10
48196: PUSH
48197: LD_INT 20
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48205: LD_VAR 0 6
48209: PPUSH
48210: CALL_OW 264
48214: PUSH
48215: LD_INT 9
48217: PUSH
48218: EMPTY
48219: LIST
48220: IN
48221: IFFALSE 48242
// points := [ 5 , 70 , 20 ] ;
48223: LD_ADDR_VAR 0 9
48227: PUSH
48228: LD_INT 5
48230: PUSH
48231: LD_INT 70
48233: PUSH
48234: LD_INT 20
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48242: LD_VAR 0 6
48246: PPUSH
48247: CALL_OW 264
48251: PUSH
48252: LD_INT 10
48254: PUSH
48255: EMPTY
48256: LIST
48257: IN
48258: IFFALSE 48279
// points := [ 35 , 110 , 70 ] ;
48260: LD_ADDR_VAR 0 9
48264: PUSH
48265: LD_INT 35
48267: PUSH
48268: LD_INT 110
48270: PUSH
48271: LD_INT 70
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48279: LD_VAR 0 6
48283: PPUSH
48284: CALL_OW 265
48288: PUSH
48289: LD_INT 25
48291: EQUAL
48292: IFFALSE 48313
// points := [ 80 , 65 , 100 ] ;
48294: LD_ADDR_VAR 0 9
48298: PUSH
48299: LD_INT 80
48301: PUSH
48302: LD_INT 65
48304: PUSH
48305: LD_INT 100
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48313: LD_VAR 0 6
48317: PPUSH
48318: CALL_OW 263
48322: PUSH
48323: LD_INT 1
48325: EQUAL
48326: IFFALSE 48361
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48328: LD_ADDR_VAR 0 10
48332: PUSH
48333: LD_VAR 0 10
48337: PUSH
48338: LD_VAR 0 6
48342: PPUSH
48343: CALL_OW 311
48347: PPUSH
48348: LD_INT 3
48350: PPUSH
48351: CALL_OW 259
48355: PUSH
48356: LD_INT 4
48358: MUL
48359: MUL
48360: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48361: LD_VAR 0 6
48365: PPUSH
48366: CALL_OW 263
48370: PUSH
48371: LD_INT 2
48373: EQUAL
48374: IFFALSE 48425
// begin j := IsControledBy ( i ) ;
48376: LD_ADDR_VAR 0 7
48380: PUSH
48381: LD_VAR 0 6
48385: PPUSH
48386: CALL_OW 312
48390: ST_TO_ADDR
// if j then
48391: LD_VAR 0 7
48395: IFFALSE 48425
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48397: LD_ADDR_VAR 0 10
48401: PUSH
48402: LD_VAR 0 10
48406: PUSH
48407: LD_VAR 0 7
48411: PPUSH
48412: LD_INT 3
48414: PPUSH
48415: CALL_OW 259
48419: PUSH
48420: LD_INT 3
48422: MUL
48423: MUL
48424: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48425: LD_VAR 0 6
48429: PPUSH
48430: CALL_OW 264
48434: PUSH
48435: LD_INT 5
48437: PUSH
48438: LD_INT 6
48440: PUSH
48441: LD_INT 46
48443: PUSH
48444: LD_INT 44
48446: PUSH
48447: LD_INT 47
48449: PUSH
48450: LD_INT 45
48452: PUSH
48453: LD_INT 28
48455: PUSH
48456: LD_INT 7
48458: PUSH
48459: LD_INT 27
48461: PUSH
48462: LD_INT 29
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: IN
48477: PUSH
48478: LD_VAR 0 1
48482: PPUSH
48483: LD_INT 52
48485: PPUSH
48486: CALL_OW 321
48490: PUSH
48491: LD_INT 2
48493: EQUAL
48494: AND
48495: IFFALSE 48512
// bpoints := bpoints * 1.2 ;
48497: LD_ADDR_VAR 0 10
48501: PUSH
48502: LD_VAR 0 10
48506: PUSH
48507: LD_REAL  1.20000000000000E+0000
48510: MUL
48511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48512: LD_VAR 0 6
48516: PPUSH
48517: CALL_OW 264
48521: PUSH
48522: LD_INT 6
48524: PUSH
48525: LD_INT 46
48527: PUSH
48528: LD_INT 47
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: IN
48536: IFFALSE 48553
// bpoints := bpoints * 1.2 ;
48538: LD_ADDR_VAR 0 10
48542: PUSH
48543: LD_VAR 0 10
48547: PUSH
48548: LD_REAL  1.20000000000000E+0000
48551: MUL
48552: ST_TO_ADDR
// end ; unit_building :
48553: GO 48567
48555: LD_INT 3
48557: DOUBLE
48558: EQUAL
48559: IFTRUE 48563
48561: GO 48566
48563: POP
// ; end ;
48564: GO 48567
48566: POP
// for j = 1 to 3 do
48567: LD_ADDR_VAR 0 7
48571: PUSH
48572: DOUBLE
48573: LD_INT 1
48575: DEC
48576: ST_TO_ADDR
48577: LD_INT 3
48579: PUSH
48580: FOR_TO
48581: IFFALSE 48634
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48583: LD_ADDR_VAR 0 5
48587: PUSH
48588: LD_VAR 0 5
48592: PPUSH
48593: LD_VAR 0 7
48597: PPUSH
48598: LD_VAR 0 5
48602: PUSH
48603: LD_VAR 0 7
48607: ARRAY
48608: PUSH
48609: LD_VAR 0 9
48613: PUSH
48614: LD_VAR 0 7
48618: ARRAY
48619: PUSH
48620: LD_VAR 0 10
48624: MUL
48625: PLUS
48626: PPUSH
48627: CALL_OW 1
48631: ST_TO_ADDR
48632: GO 48580
48634: POP
48635: POP
// end ;
48636: GO 47115
48638: POP
48639: POP
// result := Replace ( result , 4 , tmp ) ;
48640: LD_ADDR_VAR 0 5
48644: PUSH
48645: LD_VAR 0 5
48649: PPUSH
48650: LD_INT 4
48652: PPUSH
48653: LD_VAR 0 8
48657: PPUSH
48658: CALL_OW 1
48662: ST_TO_ADDR
// end ;
48663: LD_VAR 0 5
48667: RET
// export function DangerAtRange ( unit , range ) ; begin
48668: LD_INT 0
48670: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48671: LD_ADDR_VAR 0 3
48675: PUSH
48676: LD_VAR 0 1
48680: PPUSH
48681: CALL_OW 255
48685: PPUSH
48686: LD_VAR 0 1
48690: PPUSH
48691: CALL_OW 250
48695: PPUSH
48696: LD_VAR 0 1
48700: PPUSH
48701: CALL_OW 251
48705: PPUSH
48706: LD_VAR 0 2
48710: PPUSH
48711: CALL 46967 0 4
48715: ST_TO_ADDR
// end ;
48716: LD_VAR 0 3
48720: RET
// export function DangerInArea ( side , area ) ; begin
48721: LD_INT 0
48723: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48724: LD_ADDR_VAR 0 3
48728: PUSH
48729: LD_VAR 0 2
48733: PPUSH
48734: LD_INT 81
48736: PUSH
48737: LD_VAR 0 1
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PPUSH
48746: CALL_OW 70
48750: ST_TO_ADDR
// end ;
48751: LD_VAR 0 3
48755: RET
// export function IsExtension ( b ) ; begin
48756: LD_INT 0
48758: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48759: LD_ADDR_VAR 0 2
48763: PUSH
48764: LD_VAR 0 1
48768: PUSH
48769: LD_INT 23
48771: PUSH
48772: LD_INT 20
48774: PUSH
48775: LD_INT 22
48777: PUSH
48778: LD_INT 17
48780: PUSH
48781: LD_INT 24
48783: PUSH
48784: LD_INT 21
48786: PUSH
48787: LD_INT 19
48789: PUSH
48790: LD_INT 16
48792: PUSH
48793: LD_INT 25
48795: PUSH
48796: LD_INT 18
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: IN
48811: ST_TO_ADDR
// end ;
48812: LD_VAR 0 2
48816: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48817: LD_INT 0
48819: PPUSH
48820: PPUSH
48821: PPUSH
// result := [ ] ;
48822: LD_ADDR_VAR 0 4
48826: PUSH
48827: EMPTY
48828: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48829: LD_ADDR_VAR 0 5
48833: PUSH
48834: LD_VAR 0 2
48838: PPUSH
48839: LD_INT 21
48841: PUSH
48842: LD_INT 3
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PPUSH
48849: CALL_OW 70
48853: ST_TO_ADDR
// if not tmp then
48854: LD_VAR 0 5
48858: NOT
48859: IFFALSE 48863
// exit ;
48861: GO 48927
// if checkLink then
48863: LD_VAR 0 3
48867: IFFALSE 48917
// begin for i in tmp do
48869: LD_ADDR_VAR 0 6
48873: PUSH
48874: LD_VAR 0 5
48878: PUSH
48879: FOR_IN
48880: IFFALSE 48915
// if GetBase ( i ) <> base then
48882: LD_VAR 0 6
48886: PPUSH
48887: CALL_OW 274
48891: PUSH
48892: LD_VAR 0 1
48896: NONEQUAL
48897: IFFALSE 48913
// ComLinkToBase ( base , i ) ;
48899: LD_VAR 0 1
48903: PPUSH
48904: LD_VAR 0 6
48908: PPUSH
48909: CALL_OW 169
48913: GO 48879
48915: POP
48916: POP
// end ; result := tmp ;
48917: LD_ADDR_VAR 0 4
48921: PUSH
48922: LD_VAR 0 5
48926: ST_TO_ADDR
// end ;
48927: LD_VAR 0 4
48931: RET
// export function ComComplete ( units , b ) ; var i ; begin
48932: LD_INT 0
48934: PPUSH
48935: PPUSH
// if not units then
48936: LD_VAR 0 1
48940: NOT
48941: IFFALSE 48945
// exit ;
48943: GO 49035
// for i in units do
48945: LD_ADDR_VAR 0 4
48949: PUSH
48950: LD_VAR 0 1
48954: PUSH
48955: FOR_IN
48956: IFFALSE 49033
// if BuildingStatus ( b ) = bs_build then
48958: LD_VAR 0 2
48962: PPUSH
48963: CALL_OW 461
48967: PUSH
48968: LD_INT 1
48970: EQUAL
48971: IFFALSE 49031
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48973: LD_VAR 0 4
48977: PPUSH
48978: LD_STRING h
48980: PUSH
48981: LD_VAR 0 2
48985: PPUSH
48986: CALL_OW 250
48990: PUSH
48991: LD_VAR 0 2
48995: PPUSH
48996: CALL_OW 251
49000: PUSH
49001: LD_VAR 0 2
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: PUSH
49024: EMPTY
49025: LIST
49026: PPUSH
49027: CALL_OW 446
49031: GO 48955
49033: POP
49034: POP
// end ;
49035: LD_VAR 0 3
49039: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49040: LD_INT 0
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49048: LD_VAR 0 1
49052: NOT
49053: PUSH
49054: LD_VAR 0 1
49058: PPUSH
49059: CALL_OW 263
49063: PUSH
49064: LD_INT 2
49066: NONEQUAL
49067: OR
49068: IFFALSE 49072
// exit ;
49070: GO 49388
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49072: LD_ADDR_VAR 0 6
49076: PUSH
49077: LD_INT 22
49079: PUSH
49080: LD_VAR 0 1
49084: PPUSH
49085: CALL_OW 255
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 30
49099: PUSH
49100: LD_INT 36
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 34
49109: PUSH
49110: LD_INT 31
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PPUSH
49126: CALL_OW 69
49130: ST_TO_ADDR
// if not tmp then
49131: LD_VAR 0 6
49135: NOT
49136: IFFALSE 49140
// exit ;
49138: GO 49388
// result := [ ] ;
49140: LD_ADDR_VAR 0 2
49144: PUSH
49145: EMPTY
49146: ST_TO_ADDR
// for i in tmp do
49147: LD_ADDR_VAR 0 3
49151: PUSH
49152: LD_VAR 0 6
49156: PUSH
49157: FOR_IN
49158: IFFALSE 49229
// begin t := UnitsInside ( i ) ;
49160: LD_ADDR_VAR 0 4
49164: PUSH
49165: LD_VAR 0 3
49169: PPUSH
49170: CALL_OW 313
49174: ST_TO_ADDR
// if t then
49175: LD_VAR 0 4
49179: IFFALSE 49227
// for j in t do
49181: LD_ADDR_VAR 0 7
49185: PUSH
49186: LD_VAR 0 4
49190: PUSH
49191: FOR_IN
49192: IFFALSE 49225
// result := Replace ( result , result + 1 , j ) ;
49194: LD_ADDR_VAR 0 2
49198: PUSH
49199: LD_VAR 0 2
49203: PPUSH
49204: LD_VAR 0 2
49208: PUSH
49209: LD_INT 1
49211: PLUS
49212: PPUSH
49213: LD_VAR 0 7
49217: PPUSH
49218: CALL_OW 1
49222: ST_TO_ADDR
49223: GO 49191
49225: POP
49226: POP
// end ;
49227: GO 49157
49229: POP
49230: POP
// if not result then
49231: LD_VAR 0 2
49235: NOT
49236: IFFALSE 49240
// exit ;
49238: GO 49388
// mech := result [ 1 ] ;
49240: LD_ADDR_VAR 0 5
49244: PUSH
49245: LD_VAR 0 2
49249: PUSH
49250: LD_INT 1
49252: ARRAY
49253: ST_TO_ADDR
// if result > 1 then
49254: LD_VAR 0 2
49258: PUSH
49259: LD_INT 1
49261: GREATER
49262: IFFALSE 49374
// begin for i = 2 to result do
49264: LD_ADDR_VAR 0 3
49268: PUSH
49269: DOUBLE
49270: LD_INT 2
49272: DEC
49273: ST_TO_ADDR
49274: LD_VAR 0 2
49278: PUSH
49279: FOR_TO
49280: IFFALSE 49372
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49282: LD_ADDR_VAR 0 4
49286: PUSH
49287: LD_VAR 0 2
49291: PUSH
49292: LD_VAR 0 3
49296: ARRAY
49297: PPUSH
49298: LD_INT 3
49300: PPUSH
49301: CALL_OW 259
49305: PUSH
49306: LD_VAR 0 2
49310: PUSH
49311: LD_VAR 0 3
49315: ARRAY
49316: PPUSH
49317: CALL_OW 432
49321: MINUS
49322: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49323: LD_VAR 0 4
49327: PUSH
49328: LD_VAR 0 5
49332: PPUSH
49333: LD_INT 3
49335: PPUSH
49336: CALL_OW 259
49340: PUSH
49341: LD_VAR 0 5
49345: PPUSH
49346: CALL_OW 432
49350: MINUS
49351: GREATEREQUAL
49352: IFFALSE 49370
// mech := result [ i ] ;
49354: LD_ADDR_VAR 0 5
49358: PUSH
49359: LD_VAR 0 2
49363: PUSH
49364: LD_VAR 0 3
49368: ARRAY
49369: ST_TO_ADDR
// end ;
49370: GO 49279
49372: POP
49373: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49374: LD_VAR 0 1
49378: PPUSH
49379: LD_VAR 0 5
49383: PPUSH
49384: CALL_OW 135
// end ;
49388: LD_VAR 0 2
49392: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49393: LD_INT 0
49395: PPUSH
49396: PPUSH
49397: PPUSH
49398: PPUSH
49399: PPUSH
49400: PPUSH
49401: PPUSH
49402: PPUSH
49403: PPUSH
49404: PPUSH
49405: PPUSH
49406: PPUSH
49407: PPUSH
// result := [ ] ;
49408: LD_ADDR_VAR 0 7
49412: PUSH
49413: EMPTY
49414: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 266
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: IN
49435: NOT
49436: IFFALSE 49440
// exit ;
49438: GO 51074
// if name then
49440: LD_VAR 0 3
49444: IFFALSE 49460
// SetBName ( base_dep , name ) ;
49446: LD_VAR 0 1
49450: PPUSH
49451: LD_VAR 0 3
49455: PPUSH
49456: CALL_OW 500
// base := GetBase ( base_dep ) ;
49460: LD_ADDR_VAR 0 15
49464: PUSH
49465: LD_VAR 0 1
49469: PPUSH
49470: CALL_OW 274
49474: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49475: LD_ADDR_VAR 0 16
49479: PUSH
49480: LD_VAR 0 1
49484: PPUSH
49485: CALL_OW 255
49489: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49490: LD_ADDR_VAR 0 17
49494: PUSH
49495: LD_VAR 0 1
49499: PPUSH
49500: CALL_OW 248
49504: ST_TO_ADDR
// if sources then
49505: LD_VAR 0 5
49509: IFFALSE 49556
// for i = 1 to 3 do
49511: LD_ADDR_VAR 0 8
49515: PUSH
49516: DOUBLE
49517: LD_INT 1
49519: DEC
49520: ST_TO_ADDR
49521: LD_INT 3
49523: PUSH
49524: FOR_TO
49525: IFFALSE 49554
// AddResourceType ( base , i , sources [ i ] ) ;
49527: LD_VAR 0 15
49531: PPUSH
49532: LD_VAR 0 8
49536: PPUSH
49537: LD_VAR 0 5
49541: PUSH
49542: LD_VAR 0 8
49546: ARRAY
49547: PPUSH
49548: CALL_OW 276
49552: GO 49524
49554: POP
49555: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49556: LD_ADDR_VAR 0 18
49560: PUSH
49561: LD_VAR 0 15
49565: PPUSH
49566: LD_VAR 0 2
49570: PPUSH
49571: LD_INT 1
49573: PPUSH
49574: CALL 48817 0 3
49578: ST_TO_ADDR
// InitHc ;
49579: CALL_OW 19
// InitUc ;
49583: CALL_OW 18
// uc_side := side ;
49587: LD_ADDR_OWVAR 20
49591: PUSH
49592: LD_VAR 0 16
49596: ST_TO_ADDR
// uc_nation := nation ;
49597: LD_ADDR_OWVAR 21
49601: PUSH
49602: LD_VAR 0 17
49606: ST_TO_ADDR
// if buildings then
49607: LD_VAR 0 18
49611: IFFALSE 50933
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49613: LD_ADDR_VAR 0 19
49617: PUSH
49618: LD_VAR 0 18
49622: PPUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 30
49628: PUSH
49629: LD_INT 29
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 30
49638: PUSH
49639: LD_INT 30
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: PPUSH
49651: CALL_OW 72
49655: ST_TO_ADDR
// if tmp then
49656: LD_VAR 0 19
49660: IFFALSE 49708
// for i in tmp do
49662: LD_ADDR_VAR 0 8
49666: PUSH
49667: LD_VAR 0 19
49671: PUSH
49672: FOR_IN
49673: IFFALSE 49706
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49675: LD_VAR 0 8
49679: PPUSH
49680: CALL_OW 250
49684: PPUSH
49685: LD_VAR 0 8
49689: PPUSH
49690: CALL_OW 251
49694: PPUSH
49695: LD_VAR 0 16
49699: PPUSH
49700: CALL_OW 441
49704: GO 49672
49706: POP
49707: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49708: LD_VAR 0 18
49712: PPUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 30
49718: PUSH
49719: LD_INT 32
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 30
49728: PUSH
49729: LD_INT 33
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: LIST
49740: PPUSH
49741: CALL_OW 72
49745: IFFALSE 49833
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49747: LD_ADDR_VAR 0 8
49751: PUSH
49752: LD_VAR 0 18
49756: PPUSH
49757: LD_INT 2
49759: PUSH
49760: LD_INT 30
49762: PUSH
49763: LD_INT 32
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 30
49772: PUSH
49773: LD_INT 33
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: LIST
49784: PPUSH
49785: CALL_OW 72
49789: PUSH
49790: FOR_IN
49791: IFFALSE 49831
// begin if not GetBWeapon ( i ) then
49793: LD_VAR 0 8
49797: PPUSH
49798: CALL_OW 269
49802: NOT
49803: IFFALSE 49829
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49805: LD_VAR 0 8
49809: PPUSH
49810: LD_VAR 0 8
49814: PPUSH
49815: LD_VAR 0 2
49819: PPUSH
49820: CALL 51079 0 2
49824: PPUSH
49825: CALL_OW 431
// end ;
49829: GO 49790
49831: POP
49832: POP
// end ; for i = 1 to personel do
49833: LD_ADDR_VAR 0 8
49837: PUSH
49838: DOUBLE
49839: LD_INT 1
49841: DEC
49842: ST_TO_ADDR
49843: LD_VAR 0 6
49847: PUSH
49848: FOR_TO
49849: IFFALSE 50913
// begin if i > 4 then
49851: LD_VAR 0 8
49855: PUSH
49856: LD_INT 4
49858: GREATER
49859: IFFALSE 49863
// break ;
49861: GO 50913
// case i of 1 :
49863: LD_VAR 0 8
49867: PUSH
49868: LD_INT 1
49870: DOUBLE
49871: EQUAL
49872: IFTRUE 49876
49874: GO 49956
49876: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49877: LD_ADDR_VAR 0 12
49881: PUSH
49882: LD_VAR 0 18
49886: PPUSH
49887: LD_INT 22
49889: PUSH
49890: LD_VAR 0 16
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 58
49901: PUSH
49902: EMPTY
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 30
49910: PUSH
49911: LD_INT 32
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 30
49920: PUSH
49921: LD_INT 4
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 30
49930: PUSH
49931: LD_INT 5
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: PPUSH
49949: CALL_OW 72
49953: ST_TO_ADDR
49954: GO 50178
49956: LD_INT 2
49958: DOUBLE
49959: EQUAL
49960: IFTRUE 49964
49962: GO 50026
49964: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49965: LD_ADDR_VAR 0 12
49969: PUSH
49970: LD_VAR 0 18
49974: PPUSH
49975: LD_INT 22
49977: PUSH
49978: LD_VAR 0 16
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: PUSH
49990: LD_INT 30
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 30
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PPUSH
50019: CALL_OW 72
50023: ST_TO_ADDR
50024: GO 50178
50026: LD_INT 3
50028: DOUBLE
50029: EQUAL
50030: IFTRUE 50034
50032: GO 50096
50034: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50035: LD_ADDR_VAR 0 12
50039: PUSH
50040: LD_VAR 0 18
50044: PPUSH
50045: LD_INT 22
50047: PUSH
50048: LD_VAR 0 16
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 30
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 30
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PPUSH
50089: CALL_OW 72
50093: ST_TO_ADDR
50094: GO 50178
50096: LD_INT 4
50098: DOUBLE
50099: EQUAL
50100: IFTRUE 50104
50102: GO 50177
50104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50105: LD_ADDR_VAR 0 12
50109: PUSH
50110: LD_VAR 0 18
50114: PPUSH
50115: LD_INT 22
50117: PUSH
50118: LD_VAR 0 16
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 30
50132: PUSH
50133: LD_INT 6
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 30
50142: PUSH
50143: LD_INT 7
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 30
50152: PUSH
50153: LD_INT 8
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PPUSH
50170: CALL_OW 72
50174: ST_TO_ADDR
50175: GO 50178
50177: POP
// if i = 1 then
50178: LD_VAR 0 8
50182: PUSH
50183: LD_INT 1
50185: EQUAL
50186: IFFALSE 50297
// begin tmp := [ ] ;
50188: LD_ADDR_VAR 0 19
50192: PUSH
50193: EMPTY
50194: ST_TO_ADDR
// for j in f do
50195: LD_ADDR_VAR 0 9
50199: PUSH
50200: LD_VAR 0 12
50204: PUSH
50205: FOR_IN
50206: IFFALSE 50279
// if GetBType ( j ) = b_bunker then
50208: LD_VAR 0 9
50212: PPUSH
50213: CALL_OW 266
50217: PUSH
50218: LD_INT 32
50220: EQUAL
50221: IFFALSE 50248
// tmp := Insert ( tmp , 1 , j ) else
50223: LD_ADDR_VAR 0 19
50227: PUSH
50228: LD_VAR 0 19
50232: PPUSH
50233: LD_INT 1
50235: PPUSH
50236: LD_VAR 0 9
50240: PPUSH
50241: CALL_OW 2
50245: ST_TO_ADDR
50246: GO 50277
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50248: LD_ADDR_VAR 0 19
50252: PUSH
50253: LD_VAR 0 19
50257: PPUSH
50258: LD_VAR 0 19
50262: PUSH
50263: LD_INT 1
50265: PLUS
50266: PPUSH
50267: LD_VAR 0 9
50271: PPUSH
50272: CALL_OW 2
50276: ST_TO_ADDR
50277: GO 50205
50279: POP
50280: POP
// if tmp then
50281: LD_VAR 0 19
50285: IFFALSE 50297
// f := tmp ;
50287: LD_ADDR_VAR 0 12
50291: PUSH
50292: LD_VAR 0 19
50296: ST_TO_ADDR
// end ; x := personel [ i ] ;
50297: LD_ADDR_VAR 0 13
50301: PUSH
50302: LD_VAR 0 6
50306: PUSH
50307: LD_VAR 0 8
50311: ARRAY
50312: ST_TO_ADDR
// if x = - 1 then
50313: LD_VAR 0 13
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: EQUAL
50322: IFFALSE 50531
// begin for j in f do
50324: LD_ADDR_VAR 0 9
50328: PUSH
50329: LD_VAR 0 12
50333: PUSH
50334: FOR_IN
50335: IFFALSE 50527
// repeat InitHc ;
50337: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50341: LD_VAR 0 9
50345: PPUSH
50346: CALL_OW 266
50350: PUSH
50351: LD_INT 5
50353: EQUAL
50354: IFFALSE 50424
// begin if UnitsInside ( j ) < 3 then
50356: LD_VAR 0 9
50360: PPUSH
50361: CALL_OW 313
50365: PUSH
50366: LD_INT 3
50368: LESS
50369: IFFALSE 50405
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50371: LD_INT 0
50373: PPUSH
50374: LD_INT 5
50376: PUSH
50377: LD_INT 8
50379: PUSH
50380: LD_INT 9
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: PUSH
50388: LD_VAR 0 17
50392: ARRAY
50393: PPUSH
50394: LD_VAR 0 4
50398: PPUSH
50399: CALL_OW 380
50403: GO 50422
// PrepareHuman ( false , i , skill ) ;
50405: LD_INT 0
50407: PPUSH
50408: LD_VAR 0 8
50412: PPUSH
50413: LD_VAR 0 4
50417: PPUSH
50418: CALL_OW 380
// end else
50422: GO 50441
// PrepareHuman ( false , i , skill ) ;
50424: LD_INT 0
50426: PPUSH
50427: LD_VAR 0 8
50431: PPUSH
50432: LD_VAR 0 4
50436: PPUSH
50437: CALL_OW 380
// un := CreateHuman ;
50441: LD_ADDR_VAR 0 14
50445: PUSH
50446: CALL_OW 44
50450: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50451: LD_ADDR_VAR 0 7
50455: PUSH
50456: LD_VAR 0 7
50460: PPUSH
50461: LD_INT 1
50463: PPUSH
50464: LD_VAR 0 14
50468: PPUSH
50469: CALL_OW 2
50473: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50474: LD_VAR 0 14
50478: PPUSH
50479: LD_VAR 0 9
50483: PPUSH
50484: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50488: LD_VAR 0 9
50492: PPUSH
50493: CALL_OW 313
50497: PUSH
50498: LD_INT 6
50500: EQUAL
50501: PUSH
50502: LD_VAR 0 9
50506: PPUSH
50507: CALL_OW 266
50511: PUSH
50512: LD_INT 32
50514: PUSH
50515: LD_INT 31
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: IN
50522: OR
50523: IFFALSE 50337
50525: GO 50334
50527: POP
50528: POP
// end else
50529: GO 50911
// for j = 1 to x do
50531: LD_ADDR_VAR 0 9
50535: PUSH
50536: DOUBLE
50537: LD_INT 1
50539: DEC
50540: ST_TO_ADDR
50541: LD_VAR 0 13
50545: PUSH
50546: FOR_TO
50547: IFFALSE 50909
// begin InitHc ;
50549: CALL_OW 19
// if not f then
50553: LD_VAR 0 12
50557: NOT
50558: IFFALSE 50647
// begin PrepareHuman ( false , i , skill ) ;
50560: LD_INT 0
50562: PPUSH
50563: LD_VAR 0 8
50567: PPUSH
50568: LD_VAR 0 4
50572: PPUSH
50573: CALL_OW 380
// un := CreateHuman ;
50577: LD_ADDR_VAR 0 14
50581: PUSH
50582: CALL_OW 44
50586: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50587: LD_ADDR_VAR 0 7
50591: PUSH
50592: LD_VAR 0 7
50596: PPUSH
50597: LD_INT 1
50599: PPUSH
50600: LD_VAR 0 14
50604: PPUSH
50605: CALL_OW 2
50609: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50610: LD_VAR 0 14
50614: PPUSH
50615: LD_VAR 0 1
50619: PPUSH
50620: CALL_OW 250
50624: PPUSH
50625: LD_VAR 0 1
50629: PPUSH
50630: CALL_OW 251
50634: PPUSH
50635: LD_INT 10
50637: PPUSH
50638: LD_INT 0
50640: PPUSH
50641: CALL_OW 50
// continue ;
50645: GO 50546
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50647: LD_VAR 0 12
50651: PUSH
50652: LD_INT 1
50654: ARRAY
50655: PPUSH
50656: CALL_OW 313
50660: PUSH
50661: LD_VAR 0 12
50665: PUSH
50666: LD_INT 1
50668: ARRAY
50669: PPUSH
50670: CALL_OW 266
50674: PUSH
50675: LD_INT 32
50677: PUSH
50678: LD_INT 31
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: IN
50685: AND
50686: PUSH
50687: LD_VAR 0 12
50691: PUSH
50692: LD_INT 1
50694: ARRAY
50695: PPUSH
50696: CALL_OW 313
50700: PUSH
50701: LD_INT 6
50703: EQUAL
50704: OR
50705: IFFALSE 50725
// f := Delete ( f , 1 ) ;
50707: LD_ADDR_VAR 0 12
50711: PUSH
50712: LD_VAR 0 12
50716: PPUSH
50717: LD_INT 1
50719: PPUSH
50720: CALL_OW 3
50724: ST_TO_ADDR
// if not f then
50725: LD_VAR 0 12
50729: NOT
50730: IFFALSE 50748
// begin x := x + 2 ;
50732: LD_ADDR_VAR 0 13
50736: PUSH
50737: LD_VAR 0 13
50741: PUSH
50742: LD_INT 2
50744: PLUS
50745: ST_TO_ADDR
// continue ;
50746: GO 50546
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50748: LD_VAR 0 12
50752: PUSH
50753: LD_INT 1
50755: ARRAY
50756: PPUSH
50757: CALL_OW 266
50761: PUSH
50762: LD_INT 5
50764: EQUAL
50765: IFFALSE 50839
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50767: LD_VAR 0 12
50771: PUSH
50772: LD_INT 1
50774: ARRAY
50775: PPUSH
50776: CALL_OW 313
50780: PUSH
50781: LD_INT 3
50783: LESS
50784: IFFALSE 50820
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50786: LD_INT 0
50788: PPUSH
50789: LD_INT 5
50791: PUSH
50792: LD_INT 8
50794: PUSH
50795: LD_INT 9
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: PUSH
50803: LD_VAR 0 17
50807: ARRAY
50808: PPUSH
50809: LD_VAR 0 4
50813: PPUSH
50814: CALL_OW 380
50818: GO 50837
// PrepareHuman ( false , i , skill ) ;
50820: LD_INT 0
50822: PPUSH
50823: LD_VAR 0 8
50827: PPUSH
50828: LD_VAR 0 4
50832: PPUSH
50833: CALL_OW 380
// end else
50837: GO 50856
// PrepareHuman ( false , i , skill ) ;
50839: LD_INT 0
50841: PPUSH
50842: LD_VAR 0 8
50846: PPUSH
50847: LD_VAR 0 4
50851: PPUSH
50852: CALL_OW 380
// un := CreateHuman ;
50856: LD_ADDR_VAR 0 14
50860: PUSH
50861: CALL_OW 44
50865: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50866: LD_ADDR_VAR 0 7
50870: PUSH
50871: LD_VAR 0 7
50875: PPUSH
50876: LD_INT 1
50878: PPUSH
50879: LD_VAR 0 14
50883: PPUSH
50884: CALL_OW 2
50888: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50889: LD_VAR 0 14
50893: PPUSH
50894: LD_VAR 0 12
50898: PUSH
50899: LD_INT 1
50901: ARRAY
50902: PPUSH
50903: CALL_OW 52
// end ;
50907: GO 50546
50909: POP
50910: POP
// end ;
50911: GO 49848
50913: POP
50914: POP
// result := result ^ buildings ;
50915: LD_ADDR_VAR 0 7
50919: PUSH
50920: LD_VAR 0 7
50924: PUSH
50925: LD_VAR 0 18
50929: ADD
50930: ST_TO_ADDR
// end else
50931: GO 51074
// begin for i = 1 to personel do
50933: LD_ADDR_VAR 0 8
50937: PUSH
50938: DOUBLE
50939: LD_INT 1
50941: DEC
50942: ST_TO_ADDR
50943: LD_VAR 0 6
50947: PUSH
50948: FOR_TO
50949: IFFALSE 51072
// begin if i > 4 then
50951: LD_VAR 0 8
50955: PUSH
50956: LD_INT 4
50958: GREATER
50959: IFFALSE 50963
// break ;
50961: GO 51072
// x := personel [ i ] ;
50963: LD_ADDR_VAR 0 13
50967: PUSH
50968: LD_VAR 0 6
50972: PUSH
50973: LD_VAR 0 8
50977: ARRAY
50978: ST_TO_ADDR
// if x = - 1 then
50979: LD_VAR 0 13
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: EQUAL
50988: IFFALSE 50992
// continue ;
50990: GO 50948
// PrepareHuman ( false , i , skill ) ;
50992: LD_INT 0
50994: PPUSH
50995: LD_VAR 0 8
50999: PPUSH
51000: LD_VAR 0 4
51004: PPUSH
51005: CALL_OW 380
// un := CreateHuman ;
51009: LD_ADDR_VAR 0 14
51013: PUSH
51014: CALL_OW 44
51018: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51019: LD_VAR 0 14
51023: PPUSH
51024: LD_VAR 0 1
51028: PPUSH
51029: CALL_OW 250
51033: PPUSH
51034: LD_VAR 0 1
51038: PPUSH
51039: CALL_OW 251
51043: PPUSH
51044: LD_INT 10
51046: PPUSH
51047: LD_INT 0
51049: PPUSH
51050: CALL_OW 50
// result := result ^ un ;
51054: LD_ADDR_VAR 0 7
51058: PUSH
51059: LD_VAR 0 7
51063: PUSH
51064: LD_VAR 0 14
51068: ADD
51069: ST_TO_ADDR
// end ;
51070: GO 50948
51072: POP
51073: POP
// end ; end ;
51074: LD_VAR 0 7
51078: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51079: LD_INT 0
51081: PPUSH
51082: PPUSH
51083: PPUSH
51084: PPUSH
51085: PPUSH
51086: PPUSH
51087: PPUSH
51088: PPUSH
51089: PPUSH
51090: PPUSH
51091: PPUSH
51092: PPUSH
51093: PPUSH
51094: PPUSH
51095: PPUSH
51096: PPUSH
// result := false ;
51097: LD_ADDR_VAR 0 3
51101: PUSH
51102: LD_INT 0
51104: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51105: LD_VAR 0 1
51109: NOT
51110: PUSH
51111: LD_VAR 0 1
51115: PPUSH
51116: CALL_OW 266
51120: PUSH
51121: LD_INT 32
51123: PUSH
51124: LD_INT 33
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: IN
51131: NOT
51132: OR
51133: IFFALSE 51137
// exit ;
51135: GO 52246
// nat := GetNation ( tower ) ;
51137: LD_ADDR_VAR 0 12
51141: PUSH
51142: LD_VAR 0 1
51146: PPUSH
51147: CALL_OW 248
51151: ST_TO_ADDR
// side := GetSide ( tower ) ;
51152: LD_ADDR_VAR 0 16
51156: PUSH
51157: LD_VAR 0 1
51161: PPUSH
51162: CALL_OW 255
51166: ST_TO_ADDR
// x := GetX ( tower ) ;
51167: LD_ADDR_VAR 0 10
51171: PUSH
51172: LD_VAR 0 1
51176: PPUSH
51177: CALL_OW 250
51181: ST_TO_ADDR
// y := GetY ( tower ) ;
51182: LD_ADDR_VAR 0 11
51186: PUSH
51187: LD_VAR 0 1
51191: PPUSH
51192: CALL_OW 251
51196: ST_TO_ADDR
// if not x or not y then
51197: LD_VAR 0 10
51201: NOT
51202: PUSH
51203: LD_VAR 0 11
51207: NOT
51208: OR
51209: IFFALSE 51213
// exit ;
51211: GO 52246
// weapon := 0 ;
51213: LD_ADDR_VAR 0 18
51217: PUSH
51218: LD_INT 0
51220: ST_TO_ADDR
// fac_list := [ ] ;
51221: LD_ADDR_VAR 0 17
51225: PUSH
51226: EMPTY
51227: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51228: LD_ADDR_VAR 0 6
51232: PUSH
51233: LD_VAR 0 1
51237: PPUSH
51238: CALL_OW 274
51242: PPUSH
51243: LD_VAR 0 2
51247: PPUSH
51248: LD_INT 0
51250: PPUSH
51251: CALL 48817 0 3
51255: PPUSH
51256: LD_INT 30
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PPUSH
51266: CALL_OW 72
51270: ST_TO_ADDR
// if not factories then
51271: LD_VAR 0 6
51275: NOT
51276: IFFALSE 51280
// exit ;
51278: GO 52246
// for i in factories do
51280: LD_ADDR_VAR 0 8
51284: PUSH
51285: LD_VAR 0 6
51289: PUSH
51290: FOR_IN
51291: IFFALSE 51316
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51293: LD_ADDR_VAR 0 17
51297: PUSH
51298: LD_VAR 0 17
51302: PUSH
51303: LD_VAR 0 8
51307: PPUSH
51308: CALL_OW 478
51312: UNION
51313: ST_TO_ADDR
51314: GO 51290
51316: POP
51317: POP
// if not fac_list then
51318: LD_VAR 0 17
51322: NOT
51323: IFFALSE 51327
// exit ;
51325: GO 52246
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51327: LD_ADDR_VAR 0 5
51331: PUSH
51332: LD_INT 4
51334: PUSH
51335: LD_INT 5
51337: PUSH
51338: LD_INT 9
51340: PUSH
51341: LD_INT 10
51343: PUSH
51344: LD_INT 6
51346: PUSH
51347: LD_INT 7
51349: PUSH
51350: LD_INT 11
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 27
51364: PUSH
51365: LD_INT 28
51367: PUSH
51368: LD_INT 26
51370: PUSH
51371: LD_INT 30
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 43
51382: PUSH
51383: LD_INT 44
51385: PUSH
51386: LD_INT 46
51388: PUSH
51389: LD_INT 45
51391: PUSH
51392: LD_INT 47
51394: PUSH
51395: LD_INT 49
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: LIST
51410: PUSH
51411: LD_VAR 0 12
51415: ARRAY
51416: ST_TO_ADDR
// list := list isect fac_list ;
51417: LD_ADDR_VAR 0 5
51421: PUSH
51422: LD_VAR 0 5
51426: PUSH
51427: LD_VAR 0 17
51431: ISECT
51432: ST_TO_ADDR
// if not list then
51433: LD_VAR 0 5
51437: NOT
51438: IFFALSE 51442
// exit ;
51440: GO 52246
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51442: LD_VAR 0 12
51446: PUSH
51447: LD_INT 3
51449: EQUAL
51450: PUSH
51451: LD_INT 49
51453: PUSH
51454: LD_VAR 0 5
51458: IN
51459: AND
51460: PUSH
51461: LD_INT 31
51463: PPUSH
51464: LD_VAR 0 16
51468: PPUSH
51469: CALL_OW 321
51473: PUSH
51474: LD_INT 2
51476: EQUAL
51477: AND
51478: IFFALSE 51538
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51480: LD_INT 22
51482: PUSH
51483: LD_VAR 0 16
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 35
51494: PUSH
51495: LD_INT 49
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 91
51504: PUSH
51505: LD_VAR 0 1
51509: PUSH
51510: LD_INT 10
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: PPUSH
51523: CALL_OW 69
51527: NOT
51528: IFFALSE 51538
// weapon := ru_time_lapser ;
51530: LD_ADDR_VAR 0 18
51534: PUSH
51535: LD_INT 49
51537: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51538: LD_VAR 0 12
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: IN
51553: PUSH
51554: LD_INT 11
51556: PUSH
51557: LD_VAR 0 5
51561: IN
51562: PUSH
51563: LD_INT 30
51565: PUSH
51566: LD_VAR 0 5
51570: IN
51571: OR
51572: AND
51573: PUSH
51574: LD_INT 6
51576: PPUSH
51577: LD_VAR 0 16
51581: PPUSH
51582: CALL_OW 321
51586: PUSH
51587: LD_INT 2
51589: EQUAL
51590: AND
51591: IFFALSE 51756
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51593: LD_INT 22
51595: PUSH
51596: LD_VAR 0 16
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: LD_INT 35
51610: PUSH
51611: LD_INT 11
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 35
51620: PUSH
51621: LD_INT 30
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 91
51635: PUSH
51636: LD_VAR 0 1
51640: PUSH
51641: LD_INT 18
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: PPUSH
51654: CALL_OW 69
51658: NOT
51659: PUSH
51660: LD_INT 22
51662: PUSH
51663: LD_VAR 0 16
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 30
51677: PUSH
51678: LD_INT 32
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 30
51687: PUSH
51688: LD_INT 33
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 91
51702: PUSH
51703: LD_VAR 0 1
51707: PUSH
51708: LD_INT 12
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: PUSH
51721: EMPTY
51722: LIST
51723: PPUSH
51724: CALL_OW 69
51728: PUSH
51729: LD_INT 2
51731: GREATER
51732: AND
51733: IFFALSE 51756
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51735: LD_ADDR_VAR 0 18
51739: PUSH
51740: LD_INT 11
51742: PUSH
51743: LD_INT 30
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_VAR 0 12
51754: ARRAY
51755: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51756: LD_VAR 0 18
51760: NOT
51761: PUSH
51762: LD_INT 40
51764: PPUSH
51765: LD_VAR 0 16
51769: PPUSH
51770: CALL_OW 321
51774: PUSH
51775: LD_INT 2
51777: EQUAL
51778: AND
51779: PUSH
51780: LD_INT 7
51782: PUSH
51783: LD_VAR 0 5
51787: IN
51788: PUSH
51789: LD_INT 28
51791: PUSH
51792: LD_VAR 0 5
51796: IN
51797: OR
51798: PUSH
51799: LD_INT 45
51801: PUSH
51802: LD_VAR 0 5
51806: IN
51807: OR
51808: AND
51809: IFFALSE 52063
// begin hex := GetHexInfo ( x , y ) ;
51811: LD_ADDR_VAR 0 4
51815: PUSH
51816: LD_VAR 0 10
51820: PPUSH
51821: LD_VAR 0 11
51825: PPUSH
51826: CALL_OW 546
51830: ST_TO_ADDR
// if hex [ 1 ] then
51831: LD_VAR 0 4
51835: PUSH
51836: LD_INT 1
51838: ARRAY
51839: IFFALSE 51843
// exit ;
51841: GO 52246
// height := hex [ 2 ] ;
51843: LD_ADDR_VAR 0 15
51847: PUSH
51848: LD_VAR 0 4
51852: PUSH
51853: LD_INT 2
51855: ARRAY
51856: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51857: LD_ADDR_VAR 0 14
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 3
51870: PUSH
51871: LD_INT 5
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: ST_TO_ADDR
// for i in tmp do
51880: LD_ADDR_VAR 0 8
51884: PUSH
51885: LD_VAR 0 14
51889: PUSH
51890: FOR_IN
51891: IFFALSE 52061
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51893: LD_ADDR_VAR 0 9
51897: PUSH
51898: LD_VAR 0 10
51902: PPUSH
51903: LD_VAR 0 8
51907: PPUSH
51908: LD_INT 5
51910: PPUSH
51911: CALL_OW 272
51915: PUSH
51916: LD_VAR 0 11
51920: PPUSH
51921: LD_VAR 0 8
51925: PPUSH
51926: LD_INT 5
51928: PPUSH
51929: CALL_OW 273
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51938: LD_VAR 0 9
51942: PUSH
51943: LD_INT 1
51945: ARRAY
51946: PPUSH
51947: LD_VAR 0 9
51951: PUSH
51952: LD_INT 2
51954: ARRAY
51955: PPUSH
51956: CALL_OW 488
51960: IFFALSE 52059
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51962: LD_ADDR_VAR 0 4
51966: PUSH
51967: LD_VAR 0 9
51971: PUSH
51972: LD_INT 1
51974: ARRAY
51975: PPUSH
51976: LD_VAR 0 9
51980: PUSH
51981: LD_INT 2
51983: ARRAY
51984: PPUSH
51985: CALL_OW 546
51989: ST_TO_ADDR
// if hex [ 1 ] then
51990: LD_VAR 0 4
51994: PUSH
51995: LD_INT 1
51997: ARRAY
51998: IFFALSE 52002
// continue ;
52000: GO 51890
// h := hex [ 2 ] ;
52002: LD_ADDR_VAR 0 13
52006: PUSH
52007: LD_VAR 0 4
52011: PUSH
52012: LD_INT 2
52014: ARRAY
52015: ST_TO_ADDR
// if h + 7 < height then
52016: LD_VAR 0 13
52020: PUSH
52021: LD_INT 7
52023: PLUS
52024: PUSH
52025: LD_VAR 0 15
52029: LESS
52030: IFFALSE 52059
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52032: LD_ADDR_VAR 0 18
52036: PUSH
52037: LD_INT 7
52039: PUSH
52040: LD_INT 28
52042: PUSH
52043: LD_INT 45
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: PUSH
52051: LD_VAR 0 12
52055: ARRAY
52056: ST_TO_ADDR
// break ;
52057: GO 52061
// end ; end ; end ;
52059: GO 51890
52061: POP
52062: POP
// end ; if not weapon then
52063: LD_VAR 0 18
52067: NOT
52068: IFFALSE 52128
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52070: LD_ADDR_VAR 0 5
52074: PUSH
52075: LD_VAR 0 5
52079: PUSH
52080: LD_INT 11
52082: PUSH
52083: LD_INT 30
52085: PUSH
52086: LD_INT 49
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: DIFF
52094: ST_TO_ADDR
// if not list then
52095: LD_VAR 0 5
52099: NOT
52100: IFFALSE 52104
// exit ;
52102: GO 52246
// weapon := list [ rand ( 1 , list ) ] ;
52104: LD_ADDR_VAR 0 18
52108: PUSH
52109: LD_VAR 0 5
52113: PUSH
52114: LD_INT 1
52116: PPUSH
52117: LD_VAR 0 5
52121: PPUSH
52122: CALL_OW 12
52126: ARRAY
52127: ST_TO_ADDR
// end ; if weapon then
52128: LD_VAR 0 18
52132: IFFALSE 52246
// begin tmp := CostOfWeapon ( weapon ) ;
52134: LD_ADDR_VAR 0 14
52138: PUSH
52139: LD_VAR 0 18
52143: PPUSH
52144: CALL_OW 451
52148: ST_TO_ADDR
// j := GetBase ( tower ) ;
52149: LD_ADDR_VAR 0 9
52153: PUSH
52154: LD_VAR 0 1
52158: PPUSH
52159: CALL_OW 274
52163: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52164: LD_VAR 0 9
52168: PPUSH
52169: LD_INT 1
52171: PPUSH
52172: CALL_OW 275
52176: PUSH
52177: LD_VAR 0 14
52181: PUSH
52182: LD_INT 1
52184: ARRAY
52185: GREATEREQUAL
52186: PUSH
52187: LD_VAR 0 9
52191: PPUSH
52192: LD_INT 2
52194: PPUSH
52195: CALL_OW 275
52199: PUSH
52200: LD_VAR 0 14
52204: PUSH
52205: LD_INT 2
52207: ARRAY
52208: GREATEREQUAL
52209: AND
52210: PUSH
52211: LD_VAR 0 9
52215: PPUSH
52216: LD_INT 3
52218: PPUSH
52219: CALL_OW 275
52223: PUSH
52224: LD_VAR 0 14
52228: PUSH
52229: LD_INT 3
52231: ARRAY
52232: GREATEREQUAL
52233: AND
52234: IFFALSE 52246
// result := weapon ;
52236: LD_ADDR_VAR 0 3
52240: PUSH
52241: LD_VAR 0 18
52245: ST_TO_ADDR
// end ; end ;
52246: LD_VAR 0 3
52250: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52251: LD_INT 0
52253: PPUSH
52254: PPUSH
// result := true ;
52255: LD_ADDR_VAR 0 3
52259: PUSH
52260: LD_INT 1
52262: ST_TO_ADDR
// if array1 = array2 then
52263: LD_VAR 0 1
52267: PUSH
52268: LD_VAR 0 2
52272: EQUAL
52273: IFFALSE 52333
// begin for i = 1 to array1 do
52275: LD_ADDR_VAR 0 4
52279: PUSH
52280: DOUBLE
52281: LD_INT 1
52283: DEC
52284: ST_TO_ADDR
52285: LD_VAR 0 1
52289: PUSH
52290: FOR_TO
52291: IFFALSE 52329
// if array1 [ i ] <> array2 [ i ] then
52293: LD_VAR 0 1
52297: PUSH
52298: LD_VAR 0 4
52302: ARRAY
52303: PUSH
52304: LD_VAR 0 2
52308: PUSH
52309: LD_VAR 0 4
52313: ARRAY
52314: NONEQUAL
52315: IFFALSE 52327
// begin result := false ;
52317: LD_ADDR_VAR 0 3
52321: PUSH
52322: LD_INT 0
52324: ST_TO_ADDR
// break ;
52325: GO 52329
// end ;
52327: GO 52290
52329: POP
52330: POP
// end else
52331: GO 52341
// result := false ;
52333: LD_ADDR_VAR 0 3
52337: PUSH
52338: LD_INT 0
52340: ST_TO_ADDR
// end ;
52341: LD_VAR 0 3
52345: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52346: LD_INT 0
52348: PPUSH
52349: PPUSH
// if not array1 or not array2 then
52350: LD_VAR 0 1
52354: NOT
52355: PUSH
52356: LD_VAR 0 2
52360: NOT
52361: OR
52362: IFFALSE 52366
// exit ;
52364: GO 52430
// result := true ;
52366: LD_ADDR_VAR 0 3
52370: PUSH
52371: LD_INT 1
52373: ST_TO_ADDR
// for i = 1 to array1 do
52374: LD_ADDR_VAR 0 4
52378: PUSH
52379: DOUBLE
52380: LD_INT 1
52382: DEC
52383: ST_TO_ADDR
52384: LD_VAR 0 1
52388: PUSH
52389: FOR_TO
52390: IFFALSE 52428
// if array1 [ i ] <> array2 [ i ] then
52392: LD_VAR 0 1
52396: PUSH
52397: LD_VAR 0 4
52401: ARRAY
52402: PUSH
52403: LD_VAR 0 2
52407: PUSH
52408: LD_VAR 0 4
52412: ARRAY
52413: NONEQUAL
52414: IFFALSE 52426
// begin result := false ;
52416: LD_ADDR_VAR 0 3
52420: PUSH
52421: LD_INT 0
52423: ST_TO_ADDR
// break ;
52424: GO 52428
// end ;
52426: GO 52389
52428: POP
52429: POP
// end ;
52430: LD_VAR 0 3
52434: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52435: LD_INT 0
52437: PPUSH
52438: PPUSH
52439: PPUSH
// pom := GetBase ( fac ) ;
52440: LD_ADDR_VAR 0 5
52444: PUSH
52445: LD_VAR 0 1
52449: PPUSH
52450: CALL_OW 274
52454: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52455: LD_ADDR_VAR 0 4
52459: PUSH
52460: LD_VAR 0 2
52464: PUSH
52465: LD_INT 1
52467: ARRAY
52468: PPUSH
52469: LD_VAR 0 2
52473: PUSH
52474: LD_INT 2
52476: ARRAY
52477: PPUSH
52478: LD_VAR 0 2
52482: PUSH
52483: LD_INT 3
52485: ARRAY
52486: PPUSH
52487: LD_VAR 0 2
52491: PUSH
52492: LD_INT 4
52494: ARRAY
52495: PPUSH
52496: CALL_OW 449
52500: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52501: LD_ADDR_VAR 0 3
52505: PUSH
52506: LD_VAR 0 5
52510: PPUSH
52511: LD_INT 1
52513: PPUSH
52514: CALL_OW 275
52518: PUSH
52519: LD_VAR 0 4
52523: PUSH
52524: LD_INT 1
52526: ARRAY
52527: GREATEREQUAL
52528: PUSH
52529: LD_VAR 0 5
52533: PPUSH
52534: LD_INT 2
52536: PPUSH
52537: CALL_OW 275
52541: PUSH
52542: LD_VAR 0 4
52546: PUSH
52547: LD_INT 2
52549: ARRAY
52550: GREATEREQUAL
52551: AND
52552: PUSH
52553: LD_VAR 0 5
52557: PPUSH
52558: LD_INT 3
52560: PPUSH
52561: CALL_OW 275
52565: PUSH
52566: LD_VAR 0 4
52570: PUSH
52571: LD_INT 3
52573: ARRAY
52574: GREATEREQUAL
52575: AND
52576: ST_TO_ADDR
// end ;
52577: LD_VAR 0 3
52581: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52582: LD_INT 0
52584: PPUSH
52585: PPUSH
52586: PPUSH
52587: PPUSH
// pom := GetBase ( building ) ;
52588: LD_ADDR_VAR 0 3
52592: PUSH
52593: LD_VAR 0 1
52597: PPUSH
52598: CALL_OW 274
52602: ST_TO_ADDR
// if not pom then
52603: LD_VAR 0 3
52607: NOT
52608: IFFALSE 52612
// exit ;
52610: GO 52782
// btype := GetBType ( building ) ;
52612: LD_ADDR_VAR 0 5
52616: PUSH
52617: LD_VAR 0 1
52621: PPUSH
52622: CALL_OW 266
52626: ST_TO_ADDR
// if btype = b_armoury then
52627: LD_VAR 0 5
52631: PUSH
52632: LD_INT 4
52634: EQUAL
52635: IFFALSE 52645
// btype := b_barracks ;
52637: LD_ADDR_VAR 0 5
52641: PUSH
52642: LD_INT 5
52644: ST_TO_ADDR
// if btype = b_depot then
52645: LD_VAR 0 5
52649: PUSH
52650: LD_INT 0
52652: EQUAL
52653: IFFALSE 52663
// btype := b_warehouse ;
52655: LD_ADDR_VAR 0 5
52659: PUSH
52660: LD_INT 1
52662: ST_TO_ADDR
// if btype = b_workshop then
52663: LD_VAR 0 5
52667: PUSH
52668: LD_INT 2
52670: EQUAL
52671: IFFALSE 52681
// btype := b_factory ;
52673: LD_ADDR_VAR 0 5
52677: PUSH
52678: LD_INT 3
52680: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52681: LD_ADDR_VAR 0 4
52685: PUSH
52686: LD_VAR 0 5
52690: PPUSH
52691: LD_VAR 0 1
52695: PPUSH
52696: CALL_OW 248
52700: PPUSH
52701: CALL_OW 450
52705: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52706: LD_ADDR_VAR 0 2
52710: PUSH
52711: LD_VAR 0 3
52715: PPUSH
52716: LD_INT 1
52718: PPUSH
52719: CALL_OW 275
52723: PUSH
52724: LD_VAR 0 4
52728: PUSH
52729: LD_INT 1
52731: ARRAY
52732: GREATEREQUAL
52733: PUSH
52734: LD_VAR 0 3
52738: PPUSH
52739: LD_INT 2
52741: PPUSH
52742: CALL_OW 275
52746: PUSH
52747: LD_VAR 0 4
52751: PUSH
52752: LD_INT 2
52754: ARRAY
52755: GREATEREQUAL
52756: AND
52757: PUSH
52758: LD_VAR 0 3
52762: PPUSH
52763: LD_INT 3
52765: PPUSH
52766: CALL_OW 275
52770: PUSH
52771: LD_VAR 0 4
52775: PUSH
52776: LD_INT 3
52778: ARRAY
52779: GREATEREQUAL
52780: AND
52781: ST_TO_ADDR
// end ;
52782: LD_VAR 0 2
52786: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52787: LD_INT 0
52789: PPUSH
52790: PPUSH
52791: PPUSH
// pom := GetBase ( building ) ;
52792: LD_ADDR_VAR 0 4
52796: PUSH
52797: LD_VAR 0 1
52801: PPUSH
52802: CALL_OW 274
52806: ST_TO_ADDR
// if not pom then
52807: LD_VAR 0 4
52811: NOT
52812: IFFALSE 52816
// exit ;
52814: GO 52917
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52816: LD_ADDR_VAR 0 5
52820: PUSH
52821: LD_VAR 0 2
52825: PPUSH
52826: LD_VAR 0 1
52830: PPUSH
52831: CALL_OW 248
52835: PPUSH
52836: CALL_OW 450
52840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52841: LD_ADDR_VAR 0 3
52845: PUSH
52846: LD_VAR 0 4
52850: PPUSH
52851: LD_INT 1
52853: PPUSH
52854: CALL_OW 275
52858: PUSH
52859: LD_VAR 0 5
52863: PUSH
52864: LD_INT 1
52866: ARRAY
52867: GREATEREQUAL
52868: PUSH
52869: LD_VAR 0 4
52873: PPUSH
52874: LD_INT 2
52876: PPUSH
52877: CALL_OW 275
52881: PUSH
52882: LD_VAR 0 5
52886: PUSH
52887: LD_INT 2
52889: ARRAY
52890: GREATEREQUAL
52891: AND
52892: PUSH
52893: LD_VAR 0 4
52897: PPUSH
52898: LD_INT 3
52900: PPUSH
52901: CALL_OW 275
52905: PUSH
52906: LD_VAR 0 5
52910: PUSH
52911: LD_INT 3
52913: ARRAY
52914: GREATEREQUAL
52915: AND
52916: ST_TO_ADDR
// end ;
52917: LD_VAR 0 3
52921: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52922: LD_INT 0
52924: PPUSH
52925: PPUSH
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
52930: PPUSH
52931: PPUSH
52932: PPUSH
52933: PPUSH
52934: PPUSH
// result := false ;
52935: LD_ADDR_VAR 0 8
52939: PUSH
52940: LD_INT 0
52942: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52943: LD_VAR 0 5
52947: NOT
52948: PUSH
52949: LD_VAR 0 1
52953: NOT
52954: OR
52955: PUSH
52956: LD_VAR 0 2
52960: NOT
52961: OR
52962: PUSH
52963: LD_VAR 0 3
52967: NOT
52968: OR
52969: IFFALSE 52973
// exit ;
52971: GO 53787
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52973: LD_ADDR_VAR 0 14
52977: PUSH
52978: LD_VAR 0 1
52982: PPUSH
52983: LD_VAR 0 2
52987: PPUSH
52988: LD_VAR 0 3
52992: PPUSH
52993: LD_VAR 0 4
52997: PPUSH
52998: LD_VAR 0 5
53002: PUSH
53003: LD_INT 1
53005: ARRAY
53006: PPUSH
53007: CALL_OW 248
53011: PPUSH
53012: LD_INT 0
53014: PPUSH
53015: CALL 55020 0 6
53019: ST_TO_ADDR
// if not hexes then
53020: LD_VAR 0 14
53024: NOT
53025: IFFALSE 53029
// exit ;
53027: GO 53787
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53029: LD_ADDR_VAR 0 17
53033: PUSH
53034: LD_VAR 0 5
53038: PPUSH
53039: LD_INT 22
53041: PUSH
53042: LD_VAR 0 13
53046: PPUSH
53047: CALL_OW 255
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 30
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 30
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PPUSH
53088: CALL_OW 72
53092: ST_TO_ADDR
// for i = 1 to hexes do
53093: LD_ADDR_VAR 0 9
53097: PUSH
53098: DOUBLE
53099: LD_INT 1
53101: DEC
53102: ST_TO_ADDR
53103: LD_VAR 0 14
53107: PUSH
53108: FOR_TO
53109: IFFALSE 53785
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53111: LD_ADDR_VAR 0 13
53115: PUSH
53116: LD_VAR 0 14
53120: PUSH
53121: LD_VAR 0 9
53125: ARRAY
53126: PUSH
53127: LD_INT 1
53129: ARRAY
53130: PPUSH
53131: LD_VAR 0 14
53135: PUSH
53136: LD_VAR 0 9
53140: ARRAY
53141: PUSH
53142: LD_INT 2
53144: ARRAY
53145: PPUSH
53146: CALL_OW 428
53150: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53151: LD_VAR 0 14
53155: PUSH
53156: LD_VAR 0 9
53160: ARRAY
53161: PUSH
53162: LD_INT 1
53164: ARRAY
53165: PPUSH
53166: LD_VAR 0 14
53170: PUSH
53171: LD_VAR 0 9
53175: ARRAY
53176: PUSH
53177: LD_INT 2
53179: ARRAY
53180: PPUSH
53181: CALL_OW 351
53185: PUSH
53186: LD_VAR 0 14
53190: PUSH
53191: LD_VAR 0 9
53195: ARRAY
53196: PUSH
53197: LD_INT 1
53199: ARRAY
53200: PPUSH
53201: LD_VAR 0 14
53205: PUSH
53206: LD_VAR 0 9
53210: ARRAY
53211: PUSH
53212: LD_INT 2
53214: ARRAY
53215: PPUSH
53216: CALL_OW 488
53220: NOT
53221: OR
53222: PUSH
53223: LD_VAR 0 13
53227: PPUSH
53228: CALL_OW 247
53232: PUSH
53233: LD_INT 3
53235: EQUAL
53236: OR
53237: IFFALSE 53243
// exit ;
53239: POP
53240: POP
53241: GO 53787
// if not tmp then
53243: LD_VAR 0 13
53247: NOT
53248: IFFALSE 53252
// continue ;
53250: GO 53108
// result := true ;
53252: LD_ADDR_VAR 0 8
53256: PUSH
53257: LD_INT 1
53259: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53260: LD_VAR 0 6
53264: PUSH
53265: LD_VAR 0 13
53269: PPUSH
53270: CALL_OW 247
53274: PUSH
53275: LD_INT 2
53277: EQUAL
53278: AND
53279: PUSH
53280: LD_VAR 0 13
53284: PPUSH
53285: CALL_OW 263
53289: PUSH
53290: LD_INT 1
53292: EQUAL
53293: AND
53294: IFFALSE 53458
// begin if IsDrivenBy ( tmp ) then
53296: LD_VAR 0 13
53300: PPUSH
53301: CALL_OW 311
53305: IFFALSE 53309
// continue ;
53307: GO 53108
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53309: LD_VAR 0 6
53313: PPUSH
53314: LD_INT 3
53316: PUSH
53317: LD_INT 60
53319: PUSH
53320: EMPTY
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 55
53332: PUSH
53333: EMPTY
53334: LIST
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PPUSH
53344: CALL_OW 72
53348: IFFALSE 53456
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53350: LD_ADDR_VAR 0 18
53354: PUSH
53355: LD_VAR 0 6
53359: PPUSH
53360: LD_INT 3
53362: PUSH
53363: LD_INT 60
53365: PUSH
53366: EMPTY
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: PUSH
53376: LD_INT 55
53378: PUSH
53379: EMPTY
53380: LIST
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PPUSH
53390: CALL_OW 72
53394: PUSH
53395: LD_INT 1
53397: ARRAY
53398: ST_TO_ADDR
// if IsInUnit ( driver ) then
53399: LD_VAR 0 18
53403: PPUSH
53404: CALL_OW 310
53408: IFFALSE 53419
// ComExit ( driver ) ;
53410: LD_VAR 0 18
53414: PPUSH
53415: CALL 78781 0 1
// AddComEnterUnit ( driver , tmp ) ;
53419: LD_VAR 0 18
53423: PPUSH
53424: LD_VAR 0 13
53428: PPUSH
53429: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53433: LD_VAR 0 18
53437: PPUSH
53438: LD_VAR 0 7
53442: PPUSH
53443: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53447: LD_VAR 0 18
53451: PPUSH
53452: CALL_OW 181
// end ; continue ;
53456: GO 53108
// end ; if not cleaners or not tmp in cleaners then
53458: LD_VAR 0 6
53462: NOT
53463: PUSH
53464: LD_VAR 0 13
53468: PUSH
53469: LD_VAR 0 6
53473: IN
53474: NOT
53475: OR
53476: IFFALSE 53783
// begin if dep then
53478: LD_VAR 0 17
53482: IFFALSE 53618
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53484: LD_ADDR_VAR 0 16
53488: PUSH
53489: LD_VAR 0 17
53493: PUSH
53494: LD_INT 1
53496: ARRAY
53497: PPUSH
53498: CALL_OW 250
53502: PPUSH
53503: LD_VAR 0 17
53507: PUSH
53508: LD_INT 1
53510: ARRAY
53511: PPUSH
53512: CALL_OW 254
53516: PPUSH
53517: LD_INT 5
53519: PPUSH
53520: CALL_OW 272
53524: PUSH
53525: LD_VAR 0 17
53529: PUSH
53530: LD_INT 1
53532: ARRAY
53533: PPUSH
53534: CALL_OW 251
53538: PPUSH
53539: LD_VAR 0 17
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PPUSH
53548: CALL_OW 254
53552: PPUSH
53553: LD_INT 5
53555: PPUSH
53556: CALL_OW 273
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53565: LD_VAR 0 16
53569: PUSH
53570: LD_INT 1
53572: ARRAY
53573: PPUSH
53574: LD_VAR 0 16
53578: PUSH
53579: LD_INT 2
53581: ARRAY
53582: PPUSH
53583: CALL_OW 488
53587: IFFALSE 53618
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53589: LD_VAR 0 13
53593: PPUSH
53594: LD_VAR 0 16
53598: PUSH
53599: LD_INT 1
53601: ARRAY
53602: PPUSH
53603: LD_VAR 0 16
53607: PUSH
53608: LD_INT 2
53610: ARRAY
53611: PPUSH
53612: CALL_OW 111
// continue ;
53616: GO 53108
// end ; end ; r := GetDir ( tmp ) ;
53618: LD_ADDR_VAR 0 15
53622: PUSH
53623: LD_VAR 0 13
53627: PPUSH
53628: CALL_OW 254
53632: ST_TO_ADDR
// if r = 5 then
53633: LD_VAR 0 15
53637: PUSH
53638: LD_INT 5
53640: EQUAL
53641: IFFALSE 53651
// r := 0 ;
53643: LD_ADDR_VAR 0 15
53647: PUSH
53648: LD_INT 0
53650: ST_TO_ADDR
// for j = r to 5 do
53651: LD_ADDR_VAR 0 10
53655: PUSH
53656: DOUBLE
53657: LD_VAR 0 15
53661: DEC
53662: ST_TO_ADDR
53663: LD_INT 5
53665: PUSH
53666: FOR_TO
53667: IFFALSE 53781
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53669: LD_ADDR_VAR 0 11
53673: PUSH
53674: LD_VAR 0 13
53678: PPUSH
53679: CALL_OW 250
53683: PPUSH
53684: LD_VAR 0 10
53688: PPUSH
53689: LD_INT 2
53691: PPUSH
53692: CALL_OW 272
53696: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53697: LD_ADDR_VAR 0 12
53701: PUSH
53702: LD_VAR 0 13
53706: PPUSH
53707: CALL_OW 251
53711: PPUSH
53712: LD_VAR 0 10
53716: PPUSH
53717: LD_INT 2
53719: PPUSH
53720: CALL_OW 273
53724: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53725: LD_VAR 0 11
53729: PPUSH
53730: LD_VAR 0 12
53734: PPUSH
53735: CALL_OW 488
53739: PUSH
53740: LD_VAR 0 11
53744: PPUSH
53745: LD_VAR 0 12
53749: PPUSH
53750: CALL_OW 428
53754: NOT
53755: AND
53756: IFFALSE 53779
// begin ComMoveXY ( tmp , _x , _y ) ;
53758: LD_VAR 0 13
53762: PPUSH
53763: LD_VAR 0 11
53767: PPUSH
53768: LD_VAR 0 12
53772: PPUSH
53773: CALL_OW 111
// break ;
53777: GO 53781
// end ; end ;
53779: GO 53666
53781: POP
53782: POP
// end ; end ;
53783: GO 53108
53785: POP
53786: POP
// end ;
53787: LD_VAR 0 8
53791: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53792: LD_INT 0
53794: PPUSH
// result := true ;
53795: LD_ADDR_VAR 0 3
53799: PUSH
53800: LD_INT 1
53802: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53803: LD_VAR 0 2
53807: PUSH
53808: LD_INT 24
53810: DOUBLE
53811: EQUAL
53812: IFTRUE 53822
53814: LD_INT 33
53816: DOUBLE
53817: EQUAL
53818: IFTRUE 53822
53820: GO 53847
53822: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53823: LD_ADDR_VAR 0 3
53827: PUSH
53828: LD_INT 32
53830: PPUSH
53831: LD_VAR 0 1
53835: PPUSH
53836: CALL_OW 321
53840: PUSH
53841: LD_INT 2
53843: EQUAL
53844: ST_TO_ADDR
53845: GO 54163
53847: LD_INT 20
53849: DOUBLE
53850: EQUAL
53851: IFTRUE 53855
53853: GO 53880
53855: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53856: LD_ADDR_VAR 0 3
53860: PUSH
53861: LD_INT 6
53863: PPUSH
53864: LD_VAR 0 1
53868: PPUSH
53869: CALL_OW 321
53873: PUSH
53874: LD_INT 2
53876: EQUAL
53877: ST_TO_ADDR
53878: GO 54163
53880: LD_INT 22
53882: DOUBLE
53883: EQUAL
53884: IFTRUE 53894
53886: LD_INT 36
53888: DOUBLE
53889: EQUAL
53890: IFTRUE 53894
53892: GO 53919
53894: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53895: LD_ADDR_VAR 0 3
53899: PUSH
53900: LD_INT 15
53902: PPUSH
53903: LD_VAR 0 1
53907: PPUSH
53908: CALL_OW 321
53912: PUSH
53913: LD_INT 2
53915: EQUAL
53916: ST_TO_ADDR
53917: GO 54163
53919: LD_INT 30
53921: DOUBLE
53922: EQUAL
53923: IFTRUE 53927
53925: GO 53952
53927: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53928: LD_ADDR_VAR 0 3
53932: PUSH
53933: LD_INT 20
53935: PPUSH
53936: LD_VAR 0 1
53940: PPUSH
53941: CALL_OW 321
53945: PUSH
53946: LD_INT 2
53948: EQUAL
53949: ST_TO_ADDR
53950: GO 54163
53952: LD_INT 28
53954: DOUBLE
53955: EQUAL
53956: IFTRUE 53966
53958: LD_INT 21
53960: DOUBLE
53961: EQUAL
53962: IFTRUE 53966
53964: GO 53991
53966: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53967: LD_ADDR_VAR 0 3
53971: PUSH
53972: LD_INT 21
53974: PPUSH
53975: LD_VAR 0 1
53979: PPUSH
53980: CALL_OW 321
53984: PUSH
53985: LD_INT 2
53987: EQUAL
53988: ST_TO_ADDR
53989: GO 54163
53991: LD_INT 16
53993: DOUBLE
53994: EQUAL
53995: IFTRUE 53999
53997: GO 54024
53999: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54000: LD_ADDR_VAR 0 3
54004: PUSH
54005: LD_INT 84
54007: PPUSH
54008: LD_VAR 0 1
54012: PPUSH
54013: CALL_OW 321
54017: PUSH
54018: LD_INT 2
54020: EQUAL
54021: ST_TO_ADDR
54022: GO 54163
54024: LD_INT 19
54026: DOUBLE
54027: EQUAL
54028: IFTRUE 54038
54030: LD_INT 23
54032: DOUBLE
54033: EQUAL
54034: IFTRUE 54038
54036: GO 54063
54038: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54039: LD_ADDR_VAR 0 3
54043: PUSH
54044: LD_INT 83
54046: PPUSH
54047: LD_VAR 0 1
54051: PPUSH
54052: CALL_OW 321
54056: PUSH
54057: LD_INT 2
54059: EQUAL
54060: ST_TO_ADDR
54061: GO 54163
54063: LD_INT 17
54065: DOUBLE
54066: EQUAL
54067: IFTRUE 54071
54069: GO 54096
54071: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54072: LD_ADDR_VAR 0 3
54076: PUSH
54077: LD_INT 39
54079: PPUSH
54080: LD_VAR 0 1
54084: PPUSH
54085: CALL_OW 321
54089: PUSH
54090: LD_INT 2
54092: EQUAL
54093: ST_TO_ADDR
54094: GO 54163
54096: LD_INT 18
54098: DOUBLE
54099: EQUAL
54100: IFTRUE 54104
54102: GO 54129
54104: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54105: LD_ADDR_VAR 0 3
54109: PUSH
54110: LD_INT 40
54112: PPUSH
54113: LD_VAR 0 1
54117: PPUSH
54118: CALL_OW 321
54122: PUSH
54123: LD_INT 2
54125: EQUAL
54126: ST_TO_ADDR
54127: GO 54163
54129: LD_INT 27
54131: DOUBLE
54132: EQUAL
54133: IFTRUE 54137
54135: GO 54162
54137: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54138: LD_ADDR_VAR 0 3
54142: PUSH
54143: LD_INT 35
54145: PPUSH
54146: LD_VAR 0 1
54150: PPUSH
54151: CALL_OW 321
54155: PUSH
54156: LD_INT 2
54158: EQUAL
54159: ST_TO_ADDR
54160: GO 54163
54162: POP
// end ;
54163: LD_VAR 0 3
54167: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54168: LD_INT 0
54170: PPUSH
54171: PPUSH
54172: PPUSH
54173: PPUSH
54174: PPUSH
54175: PPUSH
54176: PPUSH
54177: PPUSH
54178: PPUSH
54179: PPUSH
54180: PPUSH
// result := false ;
54181: LD_ADDR_VAR 0 6
54185: PUSH
54186: LD_INT 0
54188: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54189: LD_VAR 0 1
54193: NOT
54194: PUSH
54195: LD_VAR 0 1
54199: PPUSH
54200: CALL_OW 266
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: IN
54215: NOT
54216: OR
54217: PUSH
54218: LD_VAR 0 2
54222: NOT
54223: OR
54224: PUSH
54225: LD_VAR 0 5
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: LD_INT 3
54241: PUSH
54242: LD_INT 4
54244: PUSH
54245: LD_INT 5
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: IN
54256: NOT
54257: OR
54258: PUSH
54259: LD_VAR 0 3
54263: PPUSH
54264: LD_VAR 0 4
54268: PPUSH
54269: CALL_OW 488
54273: NOT
54274: OR
54275: IFFALSE 54279
// exit ;
54277: GO 55015
// side := GetSide ( depot ) ;
54279: LD_ADDR_VAR 0 9
54283: PUSH
54284: LD_VAR 0 1
54288: PPUSH
54289: CALL_OW 255
54293: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54294: LD_VAR 0 9
54298: PPUSH
54299: LD_VAR 0 2
54303: PPUSH
54304: CALL 53792 0 2
54308: NOT
54309: IFFALSE 54313
// exit ;
54311: GO 55015
// pom := GetBase ( depot ) ;
54313: LD_ADDR_VAR 0 10
54317: PUSH
54318: LD_VAR 0 1
54322: PPUSH
54323: CALL_OW 274
54327: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54328: LD_ADDR_VAR 0 11
54332: PUSH
54333: LD_VAR 0 2
54337: PPUSH
54338: LD_VAR 0 1
54342: PPUSH
54343: CALL_OW 248
54347: PPUSH
54348: CALL_OW 450
54352: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54353: LD_VAR 0 10
54357: PPUSH
54358: LD_INT 1
54360: PPUSH
54361: CALL_OW 275
54365: PUSH
54366: LD_VAR 0 11
54370: PUSH
54371: LD_INT 1
54373: ARRAY
54374: GREATEREQUAL
54375: PUSH
54376: LD_VAR 0 10
54380: PPUSH
54381: LD_INT 2
54383: PPUSH
54384: CALL_OW 275
54388: PUSH
54389: LD_VAR 0 11
54393: PUSH
54394: LD_INT 2
54396: ARRAY
54397: GREATEREQUAL
54398: AND
54399: PUSH
54400: LD_VAR 0 10
54404: PPUSH
54405: LD_INT 3
54407: PPUSH
54408: CALL_OW 275
54412: PUSH
54413: LD_VAR 0 11
54417: PUSH
54418: LD_INT 3
54420: ARRAY
54421: GREATEREQUAL
54422: AND
54423: NOT
54424: IFFALSE 54428
// exit ;
54426: GO 55015
// if GetBType ( depot ) = b_depot then
54428: LD_VAR 0 1
54432: PPUSH
54433: CALL_OW 266
54437: PUSH
54438: LD_INT 0
54440: EQUAL
54441: IFFALSE 54453
// dist := 28 else
54443: LD_ADDR_VAR 0 14
54447: PUSH
54448: LD_INT 28
54450: ST_TO_ADDR
54451: GO 54461
// dist := 36 ;
54453: LD_ADDR_VAR 0 14
54457: PUSH
54458: LD_INT 36
54460: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54461: LD_VAR 0 1
54465: PPUSH
54466: LD_VAR 0 3
54470: PPUSH
54471: LD_VAR 0 4
54475: PPUSH
54476: CALL_OW 297
54480: PUSH
54481: LD_VAR 0 14
54485: GREATER
54486: IFFALSE 54490
// exit ;
54488: GO 55015
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54490: LD_ADDR_VAR 0 12
54494: PUSH
54495: LD_VAR 0 2
54499: PPUSH
54500: LD_VAR 0 3
54504: PPUSH
54505: LD_VAR 0 4
54509: PPUSH
54510: LD_VAR 0 5
54514: PPUSH
54515: LD_VAR 0 1
54519: PPUSH
54520: CALL_OW 248
54524: PPUSH
54525: LD_INT 0
54527: PPUSH
54528: CALL 55020 0 6
54532: ST_TO_ADDR
// if not hexes then
54533: LD_VAR 0 12
54537: NOT
54538: IFFALSE 54542
// exit ;
54540: GO 55015
// hex := GetHexInfo ( x , y ) ;
54542: LD_ADDR_VAR 0 15
54546: PUSH
54547: LD_VAR 0 3
54551: PPUSH
54552: LD_VAR 0 4
54556: PPUSH
54557: CALL_OW 546
54561: ST_TO_ADDR
// if hex [ 1 ] then
54562: LD_VAR 0 15
54566: PUSH
54567: LD_INT 1
54569: ARRAY
54570: IFFALSE 54574
// exit ;
54572: GO 55015
// height := hex [ 2 ] ;
54574: LD_ADDR_VAR 0 13
54578: PUSH
54579: LD_VAR 0 15
54583: PUSH
54584: LD_INT 2
54586: ARRAY
54587: ST_TO_ADDR
// for i = 1 to hexes do
54588: LD_ADDR_VAR 0 7
54592: PUSH
54593: DOUBLE
54594: LD_INT 1
54596: DEC
54597: ST_TO_ADDR
54598: LD_VAR 0 12
54602: PUSH
54603: FOR_TO
54604: IFFALSE 54934
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54606: LD_VAR 0 12
54610: PUSH
54611: LD_VAR 0 7
54615: ARRAY
54616: PUSH
54617: LD_INT 1
54619: ARRAY
54620: PPUSH
54621: LD_VAR 0 12
54625: PUSH
54626: LD_VAR 0 7
54630: ARRAY
54631: PUSH
54632: LD_INT 2
54634: ARRAY
54635: PPUSH
54636: CALL_OW 488
54640: NOT
54641: PUSH
54642: LD_VAR 0 12
54646: PUSH
54647: LD_VAR 0 7
54651: ARRAY
54652: PUSH
54653: LD_INT 1
54655: ARRAY
54656: PPUSH
54657: LD_VAR 0 12
54661: PUSH
54662: LD_VAR 0 7
54666: ARRAY
54667: PUSH
54668: LD_INT 2
54670: ARRAY
54671: PPUSH
54672: CALL_OW 428
54676: PUSH
54677: LD_INT 0
54679: GREATER
54680: OR
54681: PUSH
54682: LD_VAR 0 12
54686: PUSH
54687: LD_VAR 0 7
54691: ARRAY
54692: PUSH
54693: LD_INT 1
54695: ARRAY
54696: PPUSH
54697: LD_VAR 0 12
54701: PUSH
54702: LD_VAR 0 7
54706: ARRAY
54707: PUSH
54708: LD_INT 2
54710: ARRAY
54711: PPUSH
54712: CALL_OW 351
54716: OR
54717: IFFALSE 54723
// exit ;
54719: POP
54720: POP
54721: GO 55015
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54723: LD_ADDR_VAR 0 8
54727: PUSH
54728: LD_VAR 0 12
54732: PUSH
54733: LD_VAR 0 7
54737: ARRAY
54738: PUSH
54739: LD_INT 1
54741: ARRAY
54742: PPUSH
54743: LD_VAR 0 12
54747: PUSH
54748: LD_VAR 0 7
54752: ARRAY
54753: PUSH
54754: LD_INT 2
54756: ARRAY
54757: PPUSH
54758: CALL_OW 546
54762: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54763: LD_VAR 0 8
54767: PUSH
54768: LD_INT 1
54770: ARRAY
54771: PUSH
54772: LD_VAR 0 8
54776: PUSH
54777: LD_INT 2
54779: ARRAY
54780: PUSH
54781: LD_VAR 0 13
54785: PUSH
54786: LD_INT 2
54788: PLUS
54789: GREATER
54790: OR
54791: PUSH
54792: LD_VAR 0 8
54796: PUSH
54797: LD_INT 2
54799: ARRAY
54800: PUSH
54801: LD_VAR 0 13
54805: PUSH
54806: LD_INT 2
54808: MINUS
54809: LESS
54810: OR
54811: PUSH
54812: LD_VAR 0 8
54816: PUSH
54817: LD_INT 3
54819: ARRAY
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 8
54826: PUSH
54827: LD_INT 9
54829: PUSH
54830: LD_INT 10
54832: PUSH
54833: LD_INT 11
54835: PUSH
54836: LD_INT 12
54838: PUSH
54839: LD_INT 13
54841: PUSH
54842: LD_INT 16
54844: PUSH
54845: LD_INT 17
54847: PUSH
54848: LD_INT 18
54850: PUSH
54851: LD_INT 19
54853: PUSH
54854: LD_INT 20
54856: PUSH
54857: LD_INT 21
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: IN
54875: NOT
54876: OR
54877: PUSH
54878: LD_VAR 0 8
54882: PUSH
54883: LD_INT 5
54885: ARRAY
54886: NOT
54887: OR
54888: PUSH
54889: LD_VAR 0 8
54893: PUSH
54894: LD_INT 6
54896: ARRAY
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: LD_INT 7
54906: PUSH
54907: LD_INT 9
54909: PUSH
54910: LD_INT 10
54912: PUSH
54913: LD_INT 11
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: IN
54924: NOT
54925: OR
54926: IFFALSE 54932
// exit ;
54928: POP
54929: POP
54930: GO 55015
// end ;
54932: GO 54603
54934: POP
54935: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54936: LD_VAR 0 9
54940: PPUSH
54941: LD_VAR 0 3
54945: PPUSH
54946: LD_VAR 0 4
54950: PPUSH
54951: LD_INT 20
54953: PPUSH
54954: CALL 46967 0 4
54958: PUSH
54959: LD_INT 4
54961: ARRAY
54962: IFFALSE 54966
// exit ;
54964: GO 55015
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54966: LD_VAR 0 2
54970: PUSH
54971: LD_INT 29
54973: PUSH
54974: LD_INT 30
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: IN
54981: PUSH
54982: LD_VAR 0 3
54986: PPUSH
54987: LD_VAR 0 4
54991: PPUSH
54992: LD_VAR 0 9
54996: PPUSH
54997: CALL_OW 440
55001: NOT
55002: AND
55003: IFFALSE 55007
// exit ;
55005: GO 55015
// result := true ;
55007: LD_ADDR_VAR 0 6
55011: PUSH
55012: LD_INT 1
55014: ST_TO_ADDR
// end ;
55015: LD_VAR 0 6
55019: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55020: LD_INT 0
55022: PPUSH
55023: PPUSH
55024: PPUSH
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
55049: PPUSH
55050: PPUSH
55051: PPUSH
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
// result = [ ] ;
55080: LD_ADDR_VAR 0 7
55084: PUSH
55085: EMPTY
55086: ST_TO_ADDR
// temp_list = [ ] ;
55087: LD_ADDR_VAR 0 9
55091: PUSH
55092: EMPTY
55093: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55094: LD_VAR 0 4
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: LD_INT 3
55110: PUSH
55111: LD_INT 4
55113: PUSH
55114: LD_INT 5
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: IN
55125: NOT
55126: PUSH
55127: LD_VAR 0 1
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: IN
55142: PUSH
55143: LD_VAR 0 5
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: IN
55162: NOT
55163: AND
55164: OR
55165: IFFALSE 55169
// exit ;
55167: GO 73560
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55169: LD_VAR 0 1
55173: PUSH
55174: LD_INT 6
55176: PUSH
55177: LD_INT 7
55179: PUSH
55180: LD_INT 8
55182: PUSH
55183: LD_INT 13
55185: PUSH
55186: LD_INT 12
55188: PUSH
55189: LD_INT 15
55191: PUSH
55192: LD_INT 11
55194: PUSH
55195: LD_INT 14
55197: PUSH
55198: LD_INT 10
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: IN
55212: IFFALSE 55222
// btype = b_lab ;
55214: LD_ADDR_VAR 0 1
55218: PUSH
55219: LD_INT 6
55221: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55222: LD_VAR 0 6
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: IN
55241: NOT
55242: PUSH
55243: LD_VAR 0 1
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 3
55259: PUSH
55260: LD_INT 6
55262: PUSH
55263: LD_INT 36
55265: PUSH
55266: LD_INT 4
55268: PUSH
55269: LD_INT 5
55271: PUSH
55272: LD_INT 31
55274: PUSH
55275: LD_INT 32
55277: PUSH
55278: LD_INT 33
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: IN
55294: NOT
55295: PUSH
55296: LD_VAR 0 6
55300: PUSH
55301: LD_INT 1
55303: EQUAL
55304: AND
55305: OR
55306: PUSH
55307: LD_VAR 0 1
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: IN
55322: NOT
55323: PUSH
55324: LD_VAR 0 6
55328: PUSH
55329: LD_INT 2
55331: EQUAL
55332: AND
55333: OR
55334: IFFALSE 55344
// mode = 0 ;
55336: LD_ADDR_VAR 0 6
55340: PUSH
55341: LD_INT 0
55343: ST_TO_ADDR
// case mode of 0 :
55344: LD_VAR 0 6
55348: PUSH
55349: LD_INT 0
55351: DOUBLE
55352: EQUAL
55353: IFTRUE 55357
55355: GO 66810
55357: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55358: LD_ADDR_VAR 0 11
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55551: LD_ADDR_VAR 0 12
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 3
55719: NEG
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55747: LD_ADDR_VAR 0 13
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 3
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55946: LD_ADDR_VAR 0 14
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56142: LD_ADDR_VAR 0 15
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56335: LD_ADDR_VAR 0 16
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56528: LD_ADDR_VAR 0 17
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 2
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56758: LD_ADDR_VAR 0 18
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56988: LD_ADDR_VAR 0 19
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57218: LD_ADDR_VAR 0 20
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57448: LD_ADDR_VAR 0 21
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57678: LD_ADDR_VAR 0 22
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57908: LD_ADDR_VAR 0 23
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: LD_INT 3
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58188: LD_ADDR_VAR 0 24
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58464: LD_ADDR_VAR 0 25
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58738: LD_ADDR_VAR 0 26
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: LD_INT 3
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 3
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59014: LD_ADDR_VAR 0 27
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 3
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: NEG
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59294: LD_ADDR_VAR 0 28
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 3
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59576: LD_ADDR_VAR 0 29
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 2
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 3
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 3
59820: NEG
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59855: LD_ADDR_VAR 0 30
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60133: LD_ADDR_VAR 0 31
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 3
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 3
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60411: LD_ADDR_VAR 0 32
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 3
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 3
60623: PUSH
60624: LD_INT 2
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60689: LD_ADDR_VAR 0 33
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: NEG
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60968: LD_ADDR_VAR 0 34
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: LD_INT 3
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: NEG
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 3
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61248: LD_ADDR_VAR 0 35
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61360: LD_ADDR_VAR 0 36
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61472: LD_ADDR_VAR 0 37
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61584: LD_ADDR_VAR 0 38
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: NEG
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61696: LD_ADDR_VAR 0 39
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 2
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61808: LD_ADDR_VAR 0 40
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61920: LD_ADDR_VAR 0 41
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 2
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 2
62110: NEG
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 3
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 3
62153: PUSH
62154: LD_INT 2
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: LD_INT 3
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 2
62173: PUSH
62174: LD_INT 3
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 3
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 3
62217: NEG
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 3
62229: NEG
62230: PUSH
62231: LD_INT 3
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62270: LD_ADDR_VAR 0 42
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: NEG
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: LD_INT 3
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 3
62516: PUSH
62517: LD_INT 3
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 2
62526: PUSH
62527: LD_INT 3
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 3
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62620: LD_ADDR_VAR 0 43
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: LD_INT 3
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: LD_INT 3
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 3
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: LD_INT 3
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 3
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 2
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 2
62905: NEG
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 3
62916: NEG
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 3
62927: NEG
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62968: LD_ADDR_VAR 0 44
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: LD_INT 2
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 2
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 2
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 2
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: NEG
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 2
63158: NEG
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 3
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 3
63211: PUSH
63212: LD_INT 3
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: LD_INT 3
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: NEG
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 3
63265: NEG
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 3
63277: NEG
63278: PUSH
63279: LD_INT 3
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63318: LD_ADDR_VAR 0 45
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 2
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: LD_INT 3
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: LD_INT 3
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 3
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: LD_INT 2
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 3
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: PUSH
63575: LD_INT 3
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 3
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: LD_INT 3
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: LD_INT 2
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63668: LD_ADDR_VAR 0 46
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: LD_INT 2
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 3
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 3
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: LD_INT 3
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: LD_INT 3
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 2
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 3
63964: NEG
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 3
63975: NEG
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64016: LD_ADDR_VAR 0 47
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: LD_INT 2
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 2
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64167: LD_ADDR_VAR 0 48
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 2
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 2
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64314: LD_ADDR_VAR 0 49
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 2
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64458: LD_ADDR_VAR 0 50
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64602: LD_ADDR_VAR 0 51
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: LD_INT 2
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 2
64714: NEG
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 2
64725: NEG
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64749: LD_ADDR_VAR 0 52
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: NEG
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 1
64830: NEG
64831: PUSH
64832: LD_INT 2
64834: NEG
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64900: LD_ADDR_VAR 0 53
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: NEG
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 2
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_INT 2
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: LD_INT 2
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 2
65087: NEG
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: LD_INT 2
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65130: LD_ADDR_VAR 0 54
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 2
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: LD_INT 2
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65360: LD_ADDR_VAR 0 55
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 1
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 2
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 2
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: LD_INT 2
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 2
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65590: LD_ADDR_VAR 0 56
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 2
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: LD_INT 2
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 2
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_INT 2
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: NEG
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 2
65789: NEG
65790: PUSH
65791: LD_INT 2
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65820: LD_ADDR_VAR 0 57
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: LD_INT 2
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: LD_INT 2
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 2
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: LD_INT 2
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: NEG
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66050: LD_ADDR_VAR 0 58
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: LD_INT 1
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 2
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 2
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 2
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 2
66185: PUSH
66186: LD_INT 2
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: LD_INT 2
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66280: LD_ADDR_VAR 0 59
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66368: LD_ADDR_VAR 0 60
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: LD_INT 1
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: PUSH
66397: LD_INT 0
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66456: LD_ADDR_VAR 0 61
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66544: LD_ADDR_VAR 0 62
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 1
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: LD_INT 0
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: PUSH
66583: LD_INT 1
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66632: LD_ADDR_VAR 0 63
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: LD_INT 1
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 1
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66720: LD_ADDR_VAR 0 64
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: NEG
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: ST_TO_ADDR
// end ; 1 :
66808: GO 72705
66810: LD_INT 1
66812: DOUBLE
66813: EQUAL
66814: IFTRUE 66818
66816: GO 69441
66818: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66819: LD_ADDR_VAR 0 11
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: LD_INT 3
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: LD_INT 3
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66863: LD_ADDR_VAR 0 12
66867: PUSH
66868: LD_INT 2
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66904: LD_ADDR_VAR 0 13
66908: PUSH
66909: LD_INT 3
66911: PUSH
66912: LD_INT 2
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: LD_INT 3
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 2
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: LIST
66943: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66944: LD_ADDR_VAR 0 14
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: LD_INT 2
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: LIST
66984: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66985: LD_ADDR_VAR 0 15
66989: PUSH
66990: LD_INT 2
66992: NEG
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 3
67003: NEG
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: NEG
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67029: LD_ADDR_VAR 0 16
67033: PUSH
67034: LD_INT 2
67036: NEG
67037: PUSH
67038: LD_INT 3
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 3
67048: NEG
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: NEG
67061: PUSH
67062: LD_INT 3
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: LIST
67074: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67075: LD_ADDR_VAR 0 17
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: LD_INT 3
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: LD_INT 3
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 1
67105: PUSH
67106: LD_INT 2
67108: NEG
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: LIST
67118: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67119: LD_ADDR_VAR 0 18
67123: PUSH
67124: LD_INT 2
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: LIST
67159: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67160: LD_ADDR_VAR 0 19
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: LD_INT 2
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 3
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: LD_INT 3
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67200: LD_ADDR_VAR 0 20
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: LD_INT 3
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: LD_INT 3
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67241: LD_ADDR_VAR 0 21
67245: PUSH
67246: LD_INT 2
67248: NEG
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 3
67259: NEG
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 3
67270: NEG
67271: PUSH
67272: LD_INT 1
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: LIST
67284: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67285: LD_ADDR_VAR 0 22
67289: PUSH
67290: LD_INT 2
67292: NEG
67293: PUSH
67294: LD_INT 3
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 3
67304: NEG
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 3
67316: NEG
67317: PUSH
67318: LD_INT 3
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: LIST
67330: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67331: LD_ADDR_VAR 0 23
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 3
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: LD_INT 4
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: LD_INT 3
67364: NEG
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: LIST
67374: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67375: LD_ADDR_VAR 0 24
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 3
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 4
67403: PUSH
67404: LD_INT 1
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: LIST
67415: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67416: LD_ADDR_VAR 0 25
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: LD_INT 3
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 4
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: LD_INT 4
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67456: LD_ADDR_VAR 0 26
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: LD_INT 3
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 1
67473: PUSH
67474: LD_INT 4
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: LD_INT 3
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67497: LD_ADDR_VAR 0 27
67501: PUSH
67502: LD_INT 3
67504: NEG
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 3
67515: NEG
67516: PUSH
67517: LD_INT 1
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 4
67526: NEG
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: LIST
67540: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67541: LD_ADDR_VAR 0 28
67545: PUSH
67546: LD_INT 3
67548: NEG
67549: PUSH
67550: LD_INT 3
67552: NEG
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 3
67560: NEG
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 4
67572: NEG
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: LIST
67586: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67587: LD_ADDR_VAR 0 29
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: LD_INT 3
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: LD_INT 3
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: LD_INT 2
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 4
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 4
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: PUSH
67664: LD_INT 5
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: LD_INT 5
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 1
67685: PUSH
67686: LD_INT 4
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 1
67696: NEG
67697: PUSH
67698: LD_INT 6
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: LD_INT 6
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 1
67719: PUSH
67720: LD_INT 5
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67742: LD_ADDR_VAR 0 30
67746: PUSH
67747: LD_INT 2
67749: PUSH
67750: LD_INT 1
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 3
67770: PUSH
67771: LD_INT 1
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 4
67791: PUSH
67792: LD_INT 0
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 4
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 4
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 5
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 5
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 5
67842: PUSH
67843: LD_INT 1
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 6
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 6
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67885: LD_ADDR_VAR 0 31
67889: PUSH
67890: LD_INT 3
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: LD_INT 3
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: PUSH
67913: LD_INT 3
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 4
67922: PUSH
67923: LD_INT 3
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 4
67932: PUSH
67933: LD_INT 4
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 3
67942: PUSH
67943: LD_INT 4
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 5
67952: PUSH
67953: LD_INT 4
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 5
67962: PUSH
67963: LD_INT 5
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 5
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 6
67982: PUSH
67983: LD_INT 5
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 6
67992: PUSH
67993: LD_INT 6
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 5
68002: PUSH
68003: LD_INT 6
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68024: LD_ADDR_VAR 0 32
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: LD_INT 3
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 1
68051: NEG
68052: PUSH
68053: LD_INT 2
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: LD_INT 4
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 4
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: NEG
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: PUSH
68094: LD_INT 5
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: LD_INT 5
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: NEG
68114: PUSH
68115: LD_INT 4
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 1
68124: PUSH
68125: LD_INT 6
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 6
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: NEG
68145: PUSH
68146: LD_INT 5
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68167: LD_ADDR_VAR 0 33
68171: PUSH
68172: LD_INT 2
68174: NEG
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 3
68185: NEG
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 3
68196: NEG
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 3
68208: NEG
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 4
68219: NEG
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 4
68230: NEG
68231: PUSH
68232: LD_INT 1
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 4
68242: NEG
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 5
68253: NEG
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 5
68264: NEG
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 5
68276: NEG
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 6
68287: NEG
68288: PUSH
68289: LD_INT 0
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 6
68298: NEG
68299: PUSH
68300: LD_INT 1
68302: NEG
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68322: LD_ADDR_VAR 0 34
68326: PUSH
68327: LD_INT 2
68329: NEG
68330: PUSH
68331: LD_INT 3
68333: NEG
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 3
68341: NEG
68342: PUSH
68343: LD_INT 2
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 3
68353: NEG
68354: PUSH
68355: LD_INT 3
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: LD_INT 4
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 4
68377: NEG
68378: PUSH
68379: LD_INT 3
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 4
68389: NEG
68390: PUSH
68391: LD_INT 4
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 4
68401: NEG
68402: PUSH
68403: LD_INT 5
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 5
68413: NEG
68414: PUSH
68415: LD_INT 4
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 5
68425: NEG
68426: PUSH
68427: LD_INT 5
68429: NEG
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 5
68437: NEG
68438: PUSH
68439: LD_INT 6
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 6
68449: NEG
68450: PUSH
68451: LD_INT 5
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 6
68461: NEG
68462: PUSH
68463: LD_INT 6
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68485: LD_ADDR_VAR 0 41
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: LD_INT 2
68495: NEG
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: LD_INT 3
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: LD_INT 2
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68529: LD_ADDR_VAR 0 42
68533: PUSH
68534: LD_INT 2
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 2
68546: PUSH
68547: LD_INT 1
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 3
68557: PUSH
68558: LD_INT 1
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: LIST
68569: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68570: LD_ADDR_VAR 0 43
68574: PUSH
68575: LD_INT 2
68577: PUSH
68578: LD_INT 2
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 3
68587: PUSH
68588: LD_INT 2
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 2
68597: PUSH
68598: LD_INT 3
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: LIST
68609: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68610: LD_ADDR_VAR 0 44
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 1
68627: PUSH
68628: LD_INT 3
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: LD_INT 2
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: LIST
68650: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68651: LD_ADDR_VAR 0 45
68655: PUSH
68656: LD_INT 2
68658: NEG
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 2
68669: NEG
68670: PUSH
68671: LD_INT 1
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 3
68680: NEG
68681: PUSH
68682: LD_INT 1
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68695: LD_ADDR_VAR 0 46
68699: PUSH
68700: LD_INT 2
68702: NEG
68703: PUSH
68704: LD_INT 2
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 2
68714: NEG
68715: PUSH
68716: LD_INT 3
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 3
68726: NEG
68727: PUSH
68728: LD_INT 2
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: LIST
68740: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68741: LD_ADDR_VAR 0 47
68745: PUSH
68746: LD_INT 2
68748: NEG
68749: PUSH
68750: LD_INT 3
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: LD_INT 3
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68774: LD_ADDR_VAR 0 48
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: LD_INT 2
68784: NEG
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 2
68792: PUSH
68793: LD_INT 1
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68805: LD_ADDR_VAR 0 49
68809: PUSH
68810: LD_INT 3
68812: PUSH
68813: LD_INT 1
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: LD_INT 2
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68834: LD_ADDR_VAR 0 50
68838: PUSH
68839: LD_INT 2
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: LD_INT 3
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68863: LD_ADDR_VAR 0 51
68867: PUSH
68868: LD_INT 1
68870: NEG
68871: PUSH
68872: LD_INT 2
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 2
68881: NEG
68882: PUSH
68883: LD_INT 1
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68894: LD_ADDR_VAR 0 52
68898: PUSH
68899: LD_INT 3
68901: NEG
68902: PUSH
68903: LD_INT 1
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: NEG
68914: PUSH
68915: LD_INT 2
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68927: LD_ADDR_VAR 0 53
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: LD_INT 3
68938: NEG
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: LD_INT 3
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: LD_INT 2
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: LIST
68970: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68971: LD_ADDR_VAR 0 54
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 3
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 3
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: LIST
69011: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69012: LD_ADDR_VAR 0 55
69016: PUSH
69017: LD_INT 3
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 3
69029: PUSH
69030: LD_INT 3
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 2
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69052: LD_ADDR_VAR 0 56
69056: PUSH
69057: LD_INT 1
69059: PUSH
69060: LD_INT 3
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: LD_INT 3
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 1
69079: NEG
69080: PUSH
69081: LD_INT 2
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: LIST
69092: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69093: LD_ADDR_VAR 0 57
69097: PUSH
69098: LD_INT 2
69100: NEG
69101: PUSH
69102: LD_INT 1
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 3
69111: NEG
69112: PUSH
69113: LD_INT 0
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 3
69122: NEG
69123: PUSH
69124: LD_INT 1
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: LIST
69136: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69137: LD_ADDR_VAR 0 58
69141: PUSH
69142: LD_INT 2
69144: NEG
69145: PUSH
69146: LD_INT 3
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 3
69156: NEG
69157: PUSH
69158: LD_INT 2
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 3
69168: NEG
69169: PUSH
69170: LD_INT 3
69172: NEG
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: LIST
69182: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69183: LD_ADDR_VAR 0 59
69187: PUSH
69188: LD_INT 1
69190: NEG
69191: PUSH
69192: LD_INT 2
69194: NEG
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: LD_INT 2
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: LD_INT 1
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69227: LD_ADDR_VAR 0 60
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: LD_INT 1
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 2
69245: PUSH
69246: LD_INT 0
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 2
69255: PUSH
69256: LD_INT 1
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: LIST
69267: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69268: LD_ADDR_VAR 0 61
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 2
69285: PUSH
69286: LD_INT 2
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 1
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69308: LD_ADDR_VAR 0 62
69312: PUSH
69313: LD_INT 1
69315: PUSH
69316: LD_INT 2
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: LD_INT 2
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: LD_INT 1
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: LIST
69348: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69349: LD_ADDR_VAR 0 63
69353: PUSH
69354: LD_INT 1
69356: NEG
69357: PUSH
69358: LD_INT 1
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 2
69367: NEG
69368: PUSH
69369: LD_INT 0
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 2
69378: NEG
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: LIST
69392: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69393: LD_ADDR_VAR 0 64
69397: PUSH
69398: LD_INT 1
69400: NEG
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 2
69412: NEG
69413: PUSH
69414: LD_INT 1
69416: NEG
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 2
69424: NEG
69425: PUSH
69426: LD_INT 2
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: LIST
69438: ST_TO_ADDR
// end ; 2 :
69439: GO 72705
69441: LD_INT 2
69443: DOUBLE
69444: EQUAL
69445: IFTRUE 69449
69447: GO 72704
69449: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69450: LD_ADDR_VAR 0 29
69454: PUSH
69455: LD_INT 4
69457: PUSH
69458: LD_INT 0
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 4
69467: PUSH
69468: LD_INT 1
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 5
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 5
69488: PUSH
69489: LD_INT 1
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 4
69498: PUSH
69499: LD_INT 1
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 3
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 3
69518: PUSH
69519: LD_INT 1
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 3
69529: PUSH
69530: LD_INT 2
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 5
69540: PUSH
69541: LD_INT 2
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 3
69550: PUSH
69551: LD_INT 3
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 3
69560: PUSH
69561: LD_INT 2
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 4
69570: PUSH
69571: LD_INT 3
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 4
69580: PUSH
69581: LD_INT 4
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 3
69590: PUSH
69591: LD_INT 4
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 2
69600: PUSH
69601: LD_INT 3
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: PUSH
69611: LD_INT 2
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 4
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 2
69630: PUSH
69631: LD_INT 4
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 0
69640: PUSH
69641: LD_INT 4
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 3
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 1
69660: PUSH
69661: LD_INT 4
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 1
69670: PUSH
69671: LD_INT 5
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: LD_INT 5
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 1
69690: NEG
69691: PUSH
69692: LD_INT 4
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: LD_INT 3
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 2
69712: PUSH
69713: LD_INT 5
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 2
69722: NEG
69723: PUSH
69724: LD_INT 3
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 3
69733: NEG
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: LD_INT 1
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 2
69756: NEG
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 2
69767: NEG
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 3
69778: NEG
69779: PUSH
69780: LD_INT 1
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 4
69789: NEG
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 4
69800: NEG
69801: PUSH
69802: LD_INT 1
69804: NEG
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 4
69812: NEG
69813: PUSH
69814: LD_INT 2
69816: NEG
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 2
69824: NEG
69825: PUSH
69826: LD_INT 2
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 4
69835: NEG
69836: PUSH
69837: LD_INT 4
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 4
69847: NEG
69848: PUSH
69849: LD_INT 5
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 3
69859: NEG
69860: PUSH
69861: LD_INT 4
69863: NEG
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 3
69871: NEG
69872: PUSH
69873: LD_INT 3
69875: NEG
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 4
69883: NEG
69884: PUSH
69885: LD_INT 3
69887: NEG
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 5
69895: NEG
69896: PUSH
69897: LD_INT 4
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 5
69907: NEG
69908: PUSH
69909: LD_INT 5
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: NEG
69920: PUSH
69921: LD_INT 5
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 5
69931: NEG
69932: PUSH
69933: LD_INT 3
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69988: LD_ADDR_VAR 0 30
69992: PUSH
69993: LD_INT 4
69995: PUSH
69996: LD_INT 4
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 4
70005: PUSH
70006: LD_INT 3
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 5
70015: PUSH
70016: LD_INT 4
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 5
70025: PUSH
70026: LD_INT 5
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 4
70035: PUSH
70036: LD_INT 5
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 3
70045: PUSH
70046: LD_INT 4
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: LD_INT 3
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 5
70065: PUSH
70066: LD_INT 3
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 3
70075: PUSH
70076: LD_INT 5
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: LD_INT 3
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: LD_INT 2
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 1
70105: PUSH
70106: LD_INT 3
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 1
70115: PUSH
70116: LD_INT 4
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 1
70135: NEG
70136: PUSH
70137: LD_INT 3
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 1
70146: NEG
70147: PUSH
70148: LD_INT 2
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: LD_INT 4
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 2
70167: NEG
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 4
70178: NEG
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 4
70189: NEG
70190: PUSH
70191: LD_INT 1
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 3
70201: NEG
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: NEG
70213: PUSH
70214: LD_INT 1
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 4
70223: NEG
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 5
70234: NEG
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 5
70245: NEG
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 5
70257: NEG
70258: PUSH
70259: LD_INT 2
70261: NEG
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 3
70269: NEG
70270: PUSH
70271: LD_INT 2
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 3
70280: NEG
70281: PUSH
70282: LD_INT 3
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: LD_INT 4
70296: NEG
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 2
70304: NEG
70305: PUSH
70306: LD_INT 3
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 2
70316: NEG
70317: PUSH
70318: LD_INT 2
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 3
70328: NEG
70329: PUSH
70330: LD_INT 2
70332: NEG
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 4
70340: NEG
70341: PUSH
70342: LD_INT 3
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 4
70352: NEG
70353: PUSH
70354: LD_INT 4
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 2
70364: NEG
70365: PUSH
70366: LD_INT 4
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 4
70376: NEG
70377: PUSH
70378: LD_INT 2
70380: NEG
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 4
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 0
70399: PUSH
70400: LD_INT 5
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: PUSH
70411: LD_INT 4
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: LD_INT 3
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 0
70432: PUSH
70433: LD_INT 3
70435: NEG
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: LD_INT 4
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 1
70455: NEG
70456: PUSH
70457: LD_INT 5
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 2
70467: PUSH
70468: LD_INT 3
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 2
70478: NEG
70479: PUSH
70480: LD_INT 5
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70535: LD_ADDR_VAR 0 31
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: LD_INT 4
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: LD_INT 3
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 1
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 1
70572: PUSH
70573: LD_INT 5
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 5
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 1
70592: NEG
70593: PUSH
70594: LD_INT 4
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: LD_INT 3
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 2
70614: PUSH
70615: LD_INT 5
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 2
70624: NEG
70625: PUSH
70626: LD_INT 3
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 3
70635: NEG
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 3
70646: NEG
70647: PUSH
70648: LD_INT 1
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 2
70658: NEG
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 2
70669: NEG
70670: PUSH
70671: LD_INT 1
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 3
70680: NEG
70681: PUSH
70682: LD_INT 1
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 4
70691: NEG
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 4
70702: NEG
70703: PUSH
70704: LD_INT 1
70706: NEG
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 4
70714: NEG
70715: PUSH
70716: LD_INT 2
70718: NEG
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 2
70726: NEG
70727: PUSH
70728: LD_INT 2
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 4
70737: NEG
70738: PUSH
70739: LD_INT 4
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 4
70749: NEG
70750: PUSH
70751: LD_INT 5
70753: NEG
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 3
70761: NEG
70762: PUSH
70763: LD_INT 4
70765: NEG
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 3
70773: NEG
70774: PUSH
70775: LD_INT 3
70777: NEG
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 4
70785: NEG
70786: PUSH
70787: LD_INT 3
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 5
70797: NEG
70798: PUSH
70799: LD_INT 4
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 5
70809: NEG
70810: PUSH
70811: LD_INT 5
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 3
70821: NEG
70822: PUSH
70823: LD_INT 5
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 5
70833: NEG
70834: PUSH
70835: LD_INT 3
70837: NEG
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: LD_INT 3
70848: NEG
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: LD_INT 4
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: LD_INT 3
70870: NEG
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 1
70878: PUSH
70879: LD_INT 2
70881: NEG
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 0
70889: PUSH
70890: LD_INT 2
70892: NEG
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: LD_INT 3
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 1
70912: NEG
70913: PUSH
70914: LD_INT 4
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 2
70924: PUSH
70925: LD_INT 2
70927: NEG
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 2
70935: NEG
70936: PUSH
70937: LD_INT 4
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 4
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 4
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 5
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 5
70978: PUSH
70979: LD_INT 1
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 4
70988: PUSH
70989: LD_INT 1
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 3
70998: PUSH
70999: LD_INT 0
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: LD_INT 1
71011: NEG
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 3
71019: PUSH
71020: LD_INT 2
71022: NEG
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 5
71030: PUSH
71031: LD_INT 2
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71085: LD_ADDR_VAR 0 32
71089: PUSH
71090: LD_INT 4
71092: NEG
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: NEG
71104: PUSH
71105: LD_INT 1
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 3
71115: NEG
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 3
71126: NEG
71127: PUSH
71128: LD_INT 1
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 4
71137: NEG
71138: PUSH
71139: LD_INT 1
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 5
71148: NEG
71149: PUSH
71150: LD_INT 0
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 5
71159: NEG
71160: PUSH
71161: LD_INT 1
71163: NEG
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 5
71171: NEG
71172: PUSH
71173: LD_INT 2
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 3
71183: NEG
71184: PUSH
71185: LD_INT 2
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 3
71194: NEG
71195: PUSH
71196: LD_INT 3
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 3
71206: NEG
71207: PUSH
71208: LD_INT 4
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 2
71218: NEG
71219: PUSH
71220: LD_INT 3
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 2
71230: NEG
71231: PUSH
71232: LD_INT 2
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 3
71242: NEG
71243: PUSH
71244: LD_INT 2
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 4
71254: NEG
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 4
71266: NEG
71267: PUSH
71268: LD_INT 4
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 2
71278: NEG
71279: PUSH
71280: LD_INT 4
71282: NEG
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 4
71290: NEG
71291: PUSH
71292: LD_INT 2
71294: NEG
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: LD_INT 4
71305: NEG
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 0
71313: PUSH
71314: LD_INT 5
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 1
71324: PUSH
71325: LD_INT 4
71327: NEG
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: LD_INT 3
71338: NEG
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 0
71346: PUSH
71347: LD_INT 3
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 1
71357: NEG
71358: PUSH
71359: LD_INT 4
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 1
71369: NEG
71370: PUSH
71371: LD_INT 5
71373: NEG
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 2
71381: PUSH
71382: LD_INT 3
71384: NEG
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 2
71392: NEG
71393: PUSH
71394: LD_INT 5
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 3
71404: PUSH
71405: LD_INT 0
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 3
71414: PUSH
71415: LD_INT 1
71417: NEG
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 4
71425: PUSH
71426: LD_INT 0
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 4
71435: PUSH
71436: LD_INT 1
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 3
71445: PUSH
71446: LD_INT 1
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 2
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 2
71465: PUSH
71466: LD_INT 1
71468: NEG
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 2
71476: PUSH
71477: LD_INT 2
71479: NEG
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 4
71487: PUSH
71488: LD_INT 2
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 4
71497: PUSH
71498: LD_INT 4
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 4
71507: PUSH
71508: LD_INT 3
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 5
71517: PUSH
71518: LD_INT 4
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 5
71527: PUSH
71528: LD_INT 5
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 4
71537: PUSH
71538: LD_INT 5
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 3
71547: PUSH
71548: LD_INT 4
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 3
71557: PUSH
71558: LD_INT 3
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 5
71567: PUSH
71568: LD_INT 3
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 3
71577: PUSH
71578: LD_INT 5
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71632: LD_ADDR_VAR 0 33
71636: PUSH
71637: LD_INT 4
71639: NEG
71640: PUSH
71641: LD_INT 4
71643: NEG
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 4
71651: NEG
71652: PUSH
71653: LD_INT 5
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 3
71663: NEG
71664: PUSH
71665: LD_INT 4
71667: NEG
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 3
71675: NEG
71676: PUSH
71677: LD_INT 3
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 4
71687: NEG
71688: PUSH
71689: LD_INT 3
71691: NEG
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 5
71699: NEG
71700: PUSH
71701: LD_INT 4
71703: NEG
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 5
71711: NEG
71712: PUSH
71713: LD_INT 5
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 3
71723: NEG
71724: PUSH
71725: LD_INT 5
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 5
71735: NEG
71736: PUSH
71737: LD_INT 3
71739: NEG
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: LD_INT 0
71747: PUSH
71748: LD_INT 3
71750: NEG
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: LD_INT 4
71761: NEG
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 1
71769: PUSH
71770: LD_INT 3
71772: NEG
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 1
71780: PUSH
71781: LD_INT 2
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 0
71791: PUSH
71792: LD_INT 2
71794: NEG
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 1
71802: NEG
71803: PUSH
71804: LD_INT 3
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 1
71814: NEG
71815: PUSH
71816: LD_INT 4
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 2
71826: PUSH
71827: LD_INT 2
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 2
71837: NEG
71838: PUSH
71839: LD_INT 4
71841: NEG
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 4
71849: PUSH
71850: LD_INT 0
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 4
71859: PUSH
71860: LD_INT 1
71862: NEG
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 5
71870: PUSH
71871: LD_INT 0
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 5
71880: PUSH
71881: LD_INT 1
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 4
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 3
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 3
71910: PUSH
71911: LD_INT 1
71913: NEG
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 3
71921: PUSH
71922: LD_INT 2
71924: NEG
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: LD_INT 5
71932: PUSH
71933: LD_INT 2
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PUSH
71940: LD_INT 3
71942: PUSH
71943: LD_INT 3
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 3
71952: PUSH
71953: LD_INT 2
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 4
71962: PUSH
71963: LD_INT 3
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 4
71972: PUSH
71973: LD_INT 4
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 3
71982: PUSH
71983: LD_INT 4
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 2
71992: PUSH
71993: LD_INT 3
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 2
72002: PUSH
72003: LD_INT 2
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 4
72012: PUSH
72013: LD_INT 2
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 2
72022: PUSH
72023: LD_INT 4
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: LD_INT 4
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 0
72042: PUSH
72043: LD_INT 3
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 1
72052: PUSH
72053: LD_INT 4
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 1
72062: PUSH
72063: LD_INT 5
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: LD_INT 5
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 1
72082: NEG
72083: PUSH
72084: LD_INT 4
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 1
72093: NEG
72094: PUSH
72095: LD_INT 3
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 2
72104: PUSH
72105: LD_INT 5
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 2
72114: NEG
72115: PUSH
72116: LD_INT 3
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72170: LD_ADDR_VAR 0 34
72174: PUSH
72175: LD_INT 0
72177: PUSH
72178: LD_INT 4
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 0
72188: PUSH
72189: LD_INT 5
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 1
72199: PUSH
72200: LD_INT 4
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: LD_INT 3
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 0
72221: PUSH
72222: LD_INT 3
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 1
72232: NEG
72233: PUSH
72234: LD_INT 4
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 1
72244: NEG
72245: PUSH
72246: LD_INT 5
72248: NEG
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 2
72256: PUSH
72257: LD_INT 3
72259: NEG
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 2
72267: NEG
72268: PUSH
72269: LD_INT 5
72271: NEG
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 3
72279: PUSH
72280: LD_INT 0
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 3
72289: PUSH
72290: LD_INT 1
72292: NEG
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 4
72300: PUSH
72301: LD_INT 0
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 4
72310: PUSH
72311: LD_INT 1
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 3
72320: PUSH
72321: LD_INT 1
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 2
72330: PUSH
72331: LD_INT 0
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 2
72340: PUSH
72341: LD_INT 1
72343: NEG
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 2
72351: PUSH
72352: LD_INT 2
72354: NEG
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 4
72362: PUSH
72363: LD_INT 2
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 4
72372: PUSH
72373: LD_INT 4
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 4
72382: PUSH
72383: LD_INT 3
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 5
72392: PUSH
72393: LD_INT 4
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 5
72402: PUSH
72403: LD_INT 5
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 4
72412: PUSH
72413: LD_INT 5
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 3
72422: PUSH
72423: LD_INT 4
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 3
72432: PUSH
72433: LD_INT 3
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 5
72442: PUSH
72443: LD_INT 3
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 3
72452: PUSH
72453: LD_INT 5
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 0
72462: PUSH
72463: LD_INT 3
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: LD_INT 2
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 1
72482: PUSH
72483: LD_INT 3
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 1
72492: PUSH
72493: LD_INT 4
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 0
72502: PUSH
72503: LD_INT 4
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 1
72512: NEG
72513: PUSH
72514: LD_INT 3
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 1
72523: NEG
72524: PUSH
72525: LD_INT 2
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 2
72534: PUSH
72535: LD_INT 4
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: LD_INT 2
72544: NEG
72545: PUSH
72546: LD_INT 2
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 4
72555: NEG
72556: PUSH
72557: LD_INT 0
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 4
72566: NEG
72567: PUSH
72568: LD_INT 1
72570: NEG
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 3
72578: NEG
72579: PUSH
72580: LD_INT 0
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 3
72589: NEG
72590: PUSH
72591: LD_INT 1
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 4
72600: NEG
72601: PUSH
72602: LD_INT 1
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 5
72611: NEG
72612: PUSH
72613: LD_INT 0
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 5
72622: NEG
72623: PUSH
72624: LD_INT 1
72626: NEG
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 5
72634: NEG
72635: PUSH
72636: LD_INT 2
72638: NEG
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_INT 3
72646: NEG
72647: PUSH
72648: LD_INT 2
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: ST_TO_ADDR
// end ; end ;
72702: GO 72705
72704: POP
// case btype of b_depot , b_warehouse :
72705: LD_VAR 0 1
72709: PUSH
72710: LD_INT 0
72712: DOUBLE
72713: EQUAL
72714: IFTRUE 72724
72716: LD_INT 1
72718: DOUBLE
72719: EQUAL
72720: IFTRUE 72724
72722: GO 72925
72724: POP
// case nation of nation_american :
72725: LD_VAR 0 5
72729: PUSH
72730: LD_INT 1
72732: DOUBLE
72733: EQUAL
72734: IFTRUE 72738
72736: GO 72794
72738: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72739: LD_ADDR_VAR 0 9
72743: PUSH
72744: LD_VAR 0 11
72748: PUSH
72749: LD_VAR 0 12
72753: PUSH
72754: LD_VAR 0 13
72758: PUSH
72759: LD_VAR 0 14
72763: PUSH
72764: LD_VAR 0 15
72768: PUSH
72769: LD_VAR 0 16
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: PUSH
72782: LD_VAR 0 4
72786: PUSH
72787: LD_INT 1
72789: PLUS
72790: ARRAY
72791: ST_TO_ADDR
72792: GO 72923
72794: LD_INT 2
72796: DOUBLE
72797: EQUAL
72798: IFTRUE 72802
72800: GO 72858
72802: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72803: LD_ADDR_VAR 0 9
72807: PUSH
72808: LD_VAR 0 17
72812: PUSH
72813: LD_VAR 0 18
72817: PUSH
72818: LD_VAR 0 19
72822: PUSH
72823: LD_VAR 0 20
72827: PUSH
72828: LD_VAR 0 21
72832: PUSH
72833: LD_VAR 0 22
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: PUSH
72846: LD_VAR 0 4
72850: PUSH
72851: LD_INT 1
72853: PLUS
72854: ARRAY
72855: ST_TO_ADDR
72856: GO 72923
72858: LD_INT 3
72860: DOUBLE
72861: EQUAL
72862: IFTRUE 72866
72864: GO 72922
72866: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72867: LD_ADDR_VAR 0 9
72871: PUSH
72872: LD_VAR 0 23
72876: PUSH
72877: LD_VAR 0 24
72881: PUSH
72882: LD_VAR 0 25
72886: PUSH
72887: LD_VAR 0 26
72891: PUSH
72892: LD_VAR 0 27
72896: PUSH
72897: LD_VAR 0 28
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: PUSH
72910: LD_VAR 0 4
72914: PUSH
72915: LD_INT 1
72917: PLUS
72918: ARRAY
72919: ST_TO_ADDR
72920: GO 72923
72922: POP
72923: GO 73478
72925: LD_INT 2
72927: DOUBLE
72928: EQUAL
72929: IFTRUE 72939
72931: LD_INT 3
72933: DOUBLE
72934: EQUAL
72935: IFTRUE 72939
72937: GO 72995
72939: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72940: LD_ADDR_VAR 0 9
72944: PUSH
72945: LD_VAR 0 29
72949: PUSH
72950: LD_VAR 0 30
72954: PUSH
72955: LD_VAR 0 31
72959: PUSH
72960: LD_VAR 0 32
72964: PUSH
72965: LD_VAR 0 33
72969: PUSH
72970: LD_VAR 0 34
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: PUSH
72983: LD_VAR 0 4
72987: PUSH
72988: LD_INT 1
72990: PLUS
72991: ARRAY
72992: ST_TO_ADDR
72993: GO 73478
72995: LD_INT 16
72997: DOUBLE
72998: EQUAL
72999: IFTRUE 73057
73001: LD_INT 17
73003: DOUBLE
73004: EQUAL
73005: IFTRUE 73057
73007: LD_INT 18
73009: DOUBLE
73010: EQUAL
73011: IFTRUE 73057
73013: LD_INT 19
73015: DOUBLE
73016: EQUAL
73017: IFTRUE 73057
73019: LD_INT 22
73021: DOUBLE
73022: EQUAL
73023: IFTRUE 73057
73025: LD_INT 20
73027: DOUBLE
73028: EQUAL
73029: IFTRUE 73057
73031: LD_INT 21
73033: DOUBLE
73034: EQUAL
73035: IFTRUE 73057
73037: LD_INT 23
73039: DOUBLE
73040: EQUAL
73041: IFTRUE 73057
73043: LD_INT 24
73045: DOUBLE
73046: EQUAL
73047: IFTRUE 73057
73049: LD_INT 25
73051: DOUBLE
73052: EQUAL
73053: IFTRUE 73057
73055: GO 73113
73057: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73058: LD_ADDR_VAR 0 9
73062: PUSH
73063: LD_VAR 0 35
73067: PUSH
73068: LD_VAR 0 36
73072: PUSH
73073: LD_VAR 0 37
73077: PUSH
73078: LD_VAR 0 38
73082: PUSH
73083: LD_VAR 0 39
73087: PUSH
73088: LD_VAR 0 40
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: PUSH
73101: LD_VAR 0 4
73105: PUSH
73106: LD_INT 1
73108: PLUS
73109: ARRAY
73110: ST_TO_ADDR
73111: GO 73478
73113: LD_INT 6
73115: DOUBLE
73116: EQUAL
73117: IFTRUE 73169
73119: LD_INT 7
73121: DOUBLE
73122: EQUAL
73123: IFTRUE 73169
73125: LD_INT 8
73127: DOUBLE
73128: EQUAL
73129: IFTRUE 73169
73131: LD_INT 13
73133: DOUBLE
73134: EQUAL
73135: IFTRUE 73169
73137: LD_INT 12
73139: DOUBLE
73140: EQUAL
73141: IFTRUE 73169
73143: LD_INT 15
73145: DOUBLE
73146: EQUAL
73147: IFTRUE 73169
73149: LD_INT 11
73151: DOUBLE
73152: EQUAL
73153: IFTRUE 73169
73155: LD_INT 14
73157: DOUBLE
73158: EQUAL
73159: IFTRUE 73169
73161: LD_INT 10
73163: DOUBLE
73164: EQUAL
73165: IFTRUE 73169
73167: GO 73225
73169: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73170: LD_ADDR_VAR 0 9
73174: PUSH
73175: LD_VAR 0 41
73179: PUSH
73180: LD_VAR 0 42
73184: PUSH
73185: LD_VAR 0 43
73189: PUSH
73190: LD_VAR 0 44
73194: PUSH
73195: LD_VAR 0 45
73199: PUSH
73200: LD_VAR 0 46
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: PUSH
73213: LD_VAR 0 4
73217: PUSH
73218: LD_INT 1
73220: PLUS
73221: ARRAY
73222: ST_TO_ADDR
73223: GO 73478
73225: LD_INT 36
73227: DOUBLE
73228: EQUAL
73229: IFTRUE 73233
73231: GO 73289
73233: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73234: LD_ADDR_VAR 0 9
73238: PUSH
73239: LD_VAR 0 47
73243: PUSH
73244: LD_VAR 0 48
73248: PUSH
73249: LD_VAR 0 49
73253: PUSH
73254: LD_VAR 0 50
73258: PUSH
73259: LD_VAR 0 51
73263: PUSH
73264: LD_VAR 0 52
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: PUSH
73277: LD_VAR 0 4
73281: PUSH
73282: LD_INT 1
73284: PLUS
73285: ARRAY
73286: ST_TO_ADDR
73287: GO 73478
73289: LD_INT 4
73291: DOUBLE
73292: EQUAL
73293: IFTRUE 73315
73295: LD_INT 5
73297: DOUBLE
73298: EQUAL
73299: IFTRUE 73315
73301: LD_INT 34
73303: DOUBLE
73304: EQUAL
73305: IFTRUE 73315
73307: LD_INT 37
73309: DOUBLE
73310: EQUAL
73311: IFTRUE 73315
73313: GO 73371
73315: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73316: LD_ADDR_VAR 0 9
73320: PUSH
73321: LD_VAR 0 53
73325: PUSH
73326: LD_VAR 0 54
73330: PUSH
73331: LD_VAR 0 55
73335: PUSH
73336: LD_VAR 0 56
73340: PUSH
73341: LD_VAR 0 57
73345: PUSH
73346: LD_VAR 0 58
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: PUSH
73359: LD_VAR 0 4
73363: PUSH
73364: LD_INT 1
73366: PLUS
73367: ARRAY
73368: ST_TO_ADDR
73369: GO 73478
73371: LD_INT 31
73373: DOUBLE
73374: EQUAL
73375: IFTRUE 73421
73377: LD_INT 32
73379: DOUBLE
73380: EQUAL
73381: IFTRUE 73421
73383: LD_INT 33
73385: DOUBLE
73386: EQUAL
73387: IFTRUE 73421
73389: LD_INT 27
73391: DOUBLE
73392: EQUAL
73393: IFTRUE 73421
73395: LD_INT 26
73397: DOUBLE
73398: EQUAL
73399: IFTRUE 73421
73401: LD_INT 28
73403: DOUBLE
73404: EQUAL
73405: IFTRUE 73421
73407: LD_INT 29
73409: DOUBLE
73410: EQUAL
73411: IFTRUE 73421
73413: LD_INT 30
73415: DOUBLE
73416: EQUAL
73417: IFTRUE 73421
73419: GO 73477
73421: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73422: LD_ADDR_VAR 0 9
73426: PUSH
73427: LD_VAR 0 59
73431: PUSH
73432: LD_VAR 0 60
73436: PUSH
73437: LD_VAR 0 61
73441: PUSH
73442: LD_VAR 0 62
73446: PUSH
73447: LD_VAR 0 63
73451: PUSH
73452: LD_VAR 0 64
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: PUSH
73465: LD_VAR 0 4
73469: PUSH
73470: LD_INT 1
73472: PLUS
73473: ARRAY
73474: ST_TO_ADDR
73475: GO 73478
73477: POP
// temp_list2 = [ ] ;
73478: LD_ADDR_VAR 0 10
73482: PUSH
73483: EMPTY
73484: ST_TO_ADDR
// for i in temp_list do
73485: LD_ADDR_VAR 0 8
73489: PUSH
73490: LD_VAR 0 9
73494: PUSH
73495: FOR_IN
73496: IFFALSE 73548
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73498: LD_ADDR_VAR 0 10
73502: PUSH
73503: LD_VAR 0 10
73507: PUSH
73508: LD_VAR 0 8
73512: PUSH
73513: LD_INT 1
73515: ARRAY
73516: PUSH
73517: LD_VAR 0 2
73521: PLUS
73522: PUSH
73523: LD_VAR 0 8
73527: PUSH
73528: LD_INT 2
73530: ARRAY
73531: PUSH
73532: LD_VAR 0 3
73536: PLUS
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: EMPTY
73543: LIST
73544: ADD
73545: ST_TO_ADDR
73546: GO 73495
73548: POP
73549: POP
// result = temp_list2 ;
73550: LD_ADDR_VAR 0 7
73554: PUSH
73555: LD_VAR 0 10
73559: ST_TO_ADDR
// end ;
73560: LD_VAR 0 7
73564: RET
// export function EnemyInRange ( unit , dist ) ; begin
73565: LD_INT 0
73567: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73568: LD_ADDR_VAR 0 3
73572: PUSH
73573: LD_VAR 0 1
73577: PPUSH
73578: CALL_OW 255
73582: PPUSH
73583: LD_VAR 0 1
73587: PPUSH
73588: CALL_OW 250
73592: PPUSH
73593: LD_VAR 0 1
73597: PPUSH
73598: CALL_OW 251
73602: PPUSH
73603: LD_VAR 0 2
73607: PPUSH
73608: CALL 46967 0 4
73612: PUSH
73613: LD_INT 4
73615: ARRAY
73616: ST_TO_ADDR
// end ;
73617: LD_VAR 0 3
73621: RET
// export function PlayerSeeMe ( unit ) ; begin
73622: LD_INT 0
73624: PPUSH
// result := See ( your_side , unit ) ;
73625: LD_ADDR_VAR 0 2
73629: PUSH
73630: LD_OWVAR 2
73634: PPUSH
73635: LD_VAR 0 1
73639: PPUSH
73640: CALL_OW 292
73644: ST_TO_ADDR
// end ;
73645: LD_VAR 0 2
73649: RET
// export function ReverseDir ( unit ) ; begin
73650: LD_INT 0
73652: PPUSH
// if not unit then
73653: LD_VAR 0 1
73657: NOT
73658: IFFALSE 73662
// exit ;
73660: GO 73685
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73662: LD_ADDR_VAR 0 2
73666: PUSH
73667: LD_VAR 0 1
73671: PPUSH
73672: CALL_OW 254
73676: PUSH
73677: LD_INT 3
73679: PLUS
73680: PUSH
73681: LD_INT 6
73683: MOD
73684: ST_TO_ADDR
// end ;
73685: LD_VAR 0 2
73689: RET
// export function ReverseArray ( array ) ; var i ; begin
73690: LD_INT 0
73692: PPUSH
73693: PPUSH
// if not array then
73694: LD_VAR 0 1
73698: NOT
73699: IFFALSE 73703
// exit ;
73701: GO 73758
// result := [ ] ;
73703: LD_ADDR_VAR 0 2
73707: PUSH
73708: EMPTY
73709: ST_TO_ADDR
// for i := array downto 1 do
73710: LD_ADDR_VAR 0 3
73714: PUSH
73715: DOUBLE
73716: LD_VAR 0 1
73720: INC
73721: ST_TO_ADDR
73722: LD_INT 1
73724: PUSH
73725: FOR_DOWNTO
73726: IFFALSE 73756
// result := Join ( result , array [ i ] ) ;
73728: LD_ADDR_VAR 0 2
73732: PUSH
73733: LD_VAR 0 2
73737: PPUSH
73738: LD_VAR 0 1
73742: PUSH
73743: LD_VAR 0 3
73747: ARRAY
73748: PPUSH
73749: CALL 78383 0 2
73753: ST_TO_ADDR
73754: GO 73725
73756: POP
73757: POP
// end ;
73758: LD_VAR 0 2
73762: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73763: LD_INT 0
73765: PPUSH
73766: PPUSH
73767: PPUSH
73768: PPUSH
73769: PPUSH
73770: PPUSH
// if not unit or not hexes then
73771: LD_VAR 0 1
73775: NOT
73776: PUSH
73777: LD_VAR 0 2
73781: NOT
73782: OR
73783: IFFALSE 73787
// exit ;
73785: GO 73910
// dist := 9999 ;
73787: LD_ADDR_VAR 0 5
73791: PUSH
73792: LD_INT 9999
73794: ST_TO_ADDR
// for i = 1 to hexes do
73795: LD_ADDR_VAR 0 4
73799: PUSH
73800: DOUBLE
73801: LD_INT 1
73803: DEC
73804: ST_TO_ADDR
73805: LD_VAR 0 2
73809: PUSH
73810: FOR_TO
73811: IFFALSE 73898
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73813: LD_ADDR_VAR 0 6
73817: PUSH
73818: LD_VAR 0 1
73822: PPUSH
73823: LD_VAR 0 2
73827: PUSH
73828: LD_VAR 0 4
73832: ARRAY
73833: PUSH
73834: LD_INT 1
73836: ARRAY
73837: PPUSH
73838: LD_VAR 0 2
73842: PUSH
73843: LD_VAR 0 4
73847: ARRAY
73848: PUSH
73849: LD_INT 2
73851: ARRAY
73852: PPUSH
73853: CALL_OW 297
73857: ST_TO_ADDR
// if tdist < dist then
73858: LD_VAR 0 6
73862: PUSH
73863: LD_VAR 0 5
73867: LESS
73868: IFFALSE 73896
// begin hex := hexes [ i ] ;
73870: LD_ADDR_VAR 0 8
73874: PUSH
73875: LD_VAR 0 2
73879: PUSH
73880: LD_VAR 0 4
73884: ARRAY
73885: ST_TO_ADDR
// dist := tdist ;
73886: LD_ADDR_VAR 0 5
73890: PUSH
73891: LD_VAR 0 6
73895: ST_TO_ADDR
// end ; end ;
73896: GO 73810
73898: POP
73899: POP
// result := hex ;
73900: LD_ADDR_VAR 0 3
73904: PUSH
73905: LD_VAR 0 8
73909: ST_TO_ADDR
// end ;
73910: LD_VAR 0 3
73914: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73915: LD_INT 0
73917: PPUSH
73918: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73919: LD_VAR 0 1
73923: NOT
73924: PUSH
73925: LD_VAR 0 1
73929: PUSH
73930: LD_INT 21
73932: PUSH
73933: LD_INT 2
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 23
73942: PUSH
73943: LD_INT 2
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PPUSH
73954: CALL_OW 69
73958: IN
73959: NOT
73960: OR
73961: IFFALSE 73965
// exit ;
73963: GO 74012
// for i = 1 to 3 do
73965: LD_ADDR_VAR 0 3
73969: PUSH
73970: DOUBLE
73971: LD_INT 1
73973: DEC
73974: ST_TO_ADDR
73975: LD_INT 3
73977: PUSH
73978: FOR_TO
73979: IFFALSE 74010
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73981: LD_VAR 0 1
73985: PPUSH
73986: CALL_OW 250
73990: PPUSH
73991: LD_VAR 0 1
73995: PPUSH
73996: CALL_OW 251
74000: PPUSH
74001: LD_INT 1
74003: PPUSH
74004: CALL_OW 453
74008: GO 73978
74010: POP
74011: POP
// end ;
74012: LD_VAR 0 2
74016: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74017: LD_INT 0
74019: PPUSH
74020: PPUSH
74021: PPUSH
74022: PPUSH
74023: PPUSH
74024: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74025: LD_VAR 0 1
74029: NOT
74030: PUSH
74031: LD_VAR 0 2
74035: NOT
74036: OR
74037: PUSH
74038: LD_VAR 0 1
74042: PPUSH
74043: CALL_OW 314
74047: OR
74048: IFFALSE 74052
// exit ;
74050: GO 74493
// x := GetX ( enemy_unit ) ;
74052: LD_ADDR_VAR 0 7
74056: PUSH
74057: LD_VAR 0 2
74061: PPUSH
74062: CALL_OW 250
74066: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74067: LD_ADDR_VAR 0 8
74071: PUSH
74072: LD_VAR 0 2
74076: PPUSH
74077: CALL_OW 251
74081: ST_TO_ADDR
// if not x or not y then
74082: LD_VAR 0 7
74086: NOT
74087: PUSH
74088: LD_VAR 0 8
74092: NOT
74093: OR
74094: IFFALSE 74098
// exit ;
74096: GO 74493
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74098: LD_ADDR_VAR 0 6
74102: PUSH
74103: LD_VAR 0 7
74107: PPUSH
74108: LD_INT 0
74110: PPUSH
74111: LD_INT 4
74113: PPUSH
74114: CALL_OW 272
74118: PUSH
74119: LD_VAR 0 8
74123: PPUSH
74124: LD_INT 0
74126: PPUSH
74127: LD_INT 4
74129: PPUSH
74130: CALL_OW 273
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_VAR 0 7
74143: PPUSH
74144: LD_INT 1
74146: PPUSH
74147: LD_INT 4
74149: PPUSH
74150: CALL_OW 272
74154: PUSH
74155: LD_VAR 0 8
74159: PPUSH
74160: LD_INT 1
74162: PPUSH
74163: LD_INT 4
74165: PPUSH
74166: CALL_OW 273
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_VAR 0 7
74179: PPUSH
74180: LD_INT 2
74182: PPUSH
74183: LD_INT 4
74185: PPUSH
74186: CALL_OW 272
74190: PUSH
74191: LD_VAR 0 8
74195: PPUSH
74196: LD_INT 2
74198: PPUSH
74199: LD_INT 4
74201: PPUSH
74202: CALL_OW 273
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_VAR 0 7
74215: PPUSH
74216: LD_INT 3
74218: PPUSH
74219: LD_INT 4
74221: PPUSH
74222: CALL_OW 272
74226: PUSH
74227: LD_VAR 0 8
74231: PPUSH
74232: LD_INT 3
74234: PPUSH
74235: LD_INT 4
74237: PPUSH
74238: CALL_OW 273
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_VAR 0 7
74251: PPUSH
74252: LD_INT 4
74254: PPUSH
74255: LD_INT 4
74257: PPUSH
74258: CALL_OW 272
74262: PUSH
74263: LD_VAR 0 8
74267: PPUSH
74268: LD_INT 4
74270: PPUSH
74271: LD_INT 4
74273: PPUSH
74274: CALL_OW 273
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: PUSH
74283: LD_VAR 0 7
74287: PPUSH
74288: LD_INT 5
74290: PPUSH
74291: LD_INT 4
74293: PPUSH
74294: CALL_OW 272
74298: PUSH
74299: LD_VAR 0 8
74303: PPUSH
74304: LD_INT 5
74306: PPUSH
74307: LD_INT 4
74309: PPUSH
74310: CALL_OW 273
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: ST_TO_ADDR
// for i = tmp downto 1 do
74327: LD_ADDR_VAR 0 4
74331: PUSH
74332: DOUBLE
74333: LD_VAR 0 6
74337: INC
74338: ST_TO_ADDR
74339: LD_INT 1
74341: PUSH
74342: FOR_DOWNTO
74343: IFFALSE 74444
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74345: LD_VAR 0 6
74349: PUSH
74350: LD_VAR 0 4
74354: ARRAY
74355: PUSH
74356: LD_INT 1
74358: ARRAY
74359: PPUSH
74360: LD_VAR 0 6
74364: PUSH
74365: LD_VAR 0 4
74369: ARRAY
74370: PUSH
74371: LD_INT 2
74373: ARRAY
74374: PPUSH
74375: CALL_OW 488
74379: NOT
74380: PUSH
74381: LD_VAR 0 6
74385: PUSH
74386: LD_VAR 0 4
74390: ARRAY
74391: PUSH
74392: LD_INT 1
74394: ARRAY
74395: PPUSH
74396: LD_VAR 0 6
74400: PUSH
74401: LD_VAR 0 4
74405: ARRAY
74406: PUSH
74407: LD_INT 2
74409: ARRAY
74410: PPUSH
74411: CALL_OW 428
74415: PUSH
74416: LD_INT 0
74418: NONEQUAL
74419: OR
74420: IFFALSE 74442
// tmp := Delete ( tmp , i ) ;
74422: LD_ADDR_VAR 0 6
74426: PUSH
74427: LD_VAR 0 6
74431: PPUSH
74432: LD_VAR 0 4
74436: PPUSH
74437: CALL_OW 3
74441: ST_TO_ADDR
74442: GO 74342
74444: POP
74445: POP
// j := GetClosestHex ( unit , tmp ) ;
74446: LD_ADDR_VAR 0 5
74450: PUSH
74451: LD_VAR 0 1
74455: PPUSH
74456: LD_VAR 0 6
74460: PPUSH
74461: CALL 73763 0 2
74465: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74466: LD_VAR 0 1
74470: PPUSH
74471: LD_VAR 0 5
74475: PUSH
74476: LD_INT 1
74478: ARRAY
74479: PPUSH
74480: LD_VAR 0 5
74484: PUSH
74485: LD_INT 2
74487: ARRAY
74488: PPUSH
74489: CALL_OW 111
// end ;
74493: LD_VAR 0 3
74497: RET
// export function PrepareApemanSoldier ( ) ; begin
74498: LD_INT 0
74500: PPUSH
// uc_nation := 0 ;
74501: LD_ADDR_OWVAR 21
74505: PUSH
74506: LD_INT 0
74508: ST_TO_ADDR
// hc_sex := sex_male ;
74509: LD_ADDR_OWVAR 27
74513: PUSH
74514: LD_INT 1
74516: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74517: LD_ADDR_OWVAR 28
74521: PUSH
74522: LD_INT 15
74524: ST_TO_ADDR
// hc_gallery :=  ;
74525: LD_ADDR_OWVAR 33
74529: PUSH
74530: LD_STRING 
74532: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74533: LD_ADDR_OWVAR 31
74537: PUSH
74538: LD_INT 0
74540: PPUSH
74541: LD_INT 3
74543: PPUSH
74544: CALL_OW 12
74548: PUSH
74549: LD_INT 0
74551: PPUSH
74552: LD_INT 3
74554: PPUSH
74555: CALL_OW 12
74559: PUSH
74560: LD_INT 0
74562: PUSH
74563: LD_INT 0
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: ST_TO_ADDR
// end ;
74572: LD_VAR 0 1
74576: RET
// export function PrepareApemanEngineer ( ) ; begin
74577: LD_INT 0
74579: PPUSH
// uc_nation := 0 ;
74580: LD_ADDR_OWVAR 21
74584: PUSH
74585: LD_INT 0
74587: ST_TO_ADDR
// hc_sex := sex_male ;
74588: LD_ADDR_OWVAR 27
74592: PUSH
74593: LD_INT 1
74595: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74596: LD_ADDR_OWVAR 28
74600: PUSH
74601: LD_INT 16
74603: ST_TO_ADDR
// hc_gallery :=  ;
74604: LD_ADDR_OWVAR 33
74608: PUSH
74609: LD_STRING 
74611: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74612: LD_ADDR_OWVAR 31
74616: PUSH
74617: LD_INT 0
74619: PPUSH
74620: LD_INT 3
74622: PPUSH
74623: CALL_OW 12
74627: PUSH
74628: LD_INT 0
74630: PPUSH
74631: LD_INT 3
74633: PPUSH
74634: CALL_OW 12
74638: PUSH
74639: LD_INT 0
74641: PUSH
74642: LD_INT 0
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: ST_TO_ADDR
// end ;
74651: LD_VAR 0 1
74655: RET
// export function PrepareApeman ( agressivity ) ; begin
74656: LD_INT 0
74658: PPUSH
// uc_side := 0 ;
74659: LD_ADDR_OWVAR 20
74663: PUSH
74664: LD_INT 0
74666: ST_TO_ADDR
// uc_nation := 0 ;
74667: LD_ADDR_OWVAR 21
74671: PUSH
74672: LD_INT 0
74674: ST_TO_ADDR
// hc_sex := sex_male ;
74675: LD_ADDR_OWVAR 27
74679: PUSH
74680: LD_INT 1
74682: ST_TO_ADDR
// hc_class := class_apeman ;
74683: LD_ADDR_OWVAR 28
74687: PUSH
74688: LD_INT 12
74690: ST_TO_ADDR
// hc_gallery :=  ;
74691: LD_ADDR_OWVAR 33
74695: PUSH
74696: LD_STRING 
74698: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74699: LD_ADDR_OWVAR 35
74703: PUSH
74704: LD_VAR 0 1
74708: NEG
74709: PPUSH
74710: LD_VAR 0 1
74714: PPUSH
74715: CALL_OW 12
74719: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74720: LD_ADDR_OWVAR 31
74724: PUSH
74725: LD_INT 0
74727: PPUSH
74728: LD_INT 3
74730: PPUSH
74731: CALL_OW 12
74735: PUSH
74736: LD_INT 0
74738: PPUSH
74739: LD_INT 3
74741: PPUSH
74742: CALL_OW 12
74746: PUSH
74747: LD_INT 0
74749: PUSH
74750: LD_INT 0
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: ST_TO_ADDR
// end ;
74759: LD_VAR 0 2
74763: RET
// export function PrepareTiger ( agressivity ) ; begin
74764: LD_INT 0
74766: PPUSH
// uc_side := 0 ;
74767: LD_ADDR_OWVAR 20
74771: PUSH
74772: LD_INT 0
74774: ST_TO_ADDR
// uc_nation := 0 ;
74775: LD_ADDR_OWVAR 21
74779: PUSH
74780: LD_INT 0
74782: ST_TO_ADDR
// hc_class := class_tiger ;
74783: LD_ADDR_OWVAR 28
74787: PUSH
74788: LD_INT 14
74790: ST_TO_ADDR
// hc_gallery :=  ;
74791: LD_ADDR_OWVAR 33
74795: PUSH
74796: LD_STRING 
74798: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74799: LD_ADDR_OWVAR 35
74803: PUSH
74804: LD_VAR 0 1
74808: NEG
74809: PPUSH
74810: LD_VAR 0 1
74814: PPUSH
74815: CALL_OW 12
74819: ST_TO_ADDR
// end ;
74820: LD_VAR 0 2
74824: RET
// export function PrepareEnchidna ( ) ; begin
74825: LD_INT 0
74827: PPUSH
// uc_side := 0 ;
74828: LD_ADDR_OWVAR 20
74832: PUSH
74833: LD_INT 0
74835: ST_TO_ADDR
// uc_nation := 0 ;
74836: LD_ADDR_OWVAR 21
74840: PUSH
74841: LD_INT 0
74843: ST_TO_ADDR
// hc_class := class_baggie ;
74844: LD_ADDR_OWVAR 28
74848: PUSH
74849: LD_INT 13
74851: ST_TO_ADDR
// hc_gallery :=  ;
74852: LD_ADDR_OWVAR 33
74856: PUSH
74857: LD_STRING 
74859: ST_TO_ADDR
// end ;
74860: LD_VAR 0 1
74864: RET
// export function PrepareFrog ( ) ; begin
74865: LD_INT 0
74867: PPUSH
// uc_side := 0 ;
74868: LD_ADDR_OWVAR 20
74872: PUSH
74873: LD_INT 0
74875: ST_TO_ADDR
// uc_nation := 0 ;
74876: LD_ADDR_OWVAR 21
74880: PUSH
74881: LD_INT 0
74883: ST_TO_ADDR
// hc_class := class_frog ;
74884: LD_ADDR_OWVAR 28
74888: PUSH
74889: LD_INT 19
74891: ST_TO_ADDR
// hc_gallery :=  ;
74892: LD_ADDR_OWVAR 33
74896: PUSH
74897: LD_STRING 
74899: ST_TO_ADDR
// end ;
74900: LD_VAR 0 1
74904: RET
// export function PrepareFish ( ) ; begin
74905: LD_INT 0
74907: PPUSH
// uc_side := 0 ;
74908: LD_ADDR_OWVAR 20
74912: PUSH
74913: LD_INT 0
74915: ST_TO_ADDR
// uc_nation := 0 ;
74916: LD_ADDR_OWVAR 21
74920: PUSH
74921: LD_INT 0
74923: ST_TO_ADDR
// hc_class := class_fish ;
74924: LD_ADDR_OWVAR 28
74928: PUSH
74929: LD_INT 20
74931: ST_TO_ADDR
// hc_gallery :=  ;
74932: LD_ADDR_OWVAR 33
74936: PUSH
74937: LD_STRING 
74939: ST_TO_ADDR
// end ;
74940: LD_VAR 0 1
74944: RET
// export function PrepareBird ( ) ; begin
74945: LD_INT 0
74947: PPUSH
// uc_side := 0 ;
74948: LD_ADDR_OWVAR 20
74952: PUSH
74953: LD_INT 0
74955: ST_TO_ADDR
// uc_nation := 0 ;
74956: LD_ADDR_OWVAR 21
74960: PUSH
74961: LD_INT 0
74963: ST_TO_ADDR
// hc_class := class_phororhacos ;
74964: LD_ADDR_OWVAR 28
74968: PUSH
74969: LD_INT 18
74971: ST_TO_ADDR
// hc_gallery :=  ;
74972: LD_ADDR_OWVAR 33
74976: PUSH
74977: LD_STRING 
74979: ST_TO_ADDR
// end ;
74980: LD_VAR 0 1
74984: RET
// export function PrepareHorse ( ) ; begin
74985: LD_INT 0
74987: PPUSH
// uc_side := 0 ;
74988: LD_ADDR_OWVAR 20
74992: PUSH
74993: LD_INT 0
74995: ST_TO_ADDR
// uc_nation := 0 ;
74996: LD_ADDR_OWVAR 21
75000: PUSH
75001: LD_INT 0
75003: ST_TO_ADDR
// hc_class := class_horse ;
75004: LD_ADDR_OWVAR 28
75008: PUSH
75009: LD_INT 21
75011: ST_TO_ADDR
// hc_gallery :=  ;
75012: LD_ADDR_OWVAR 33
75016: PUSH
75017: LD_STRING 
75019: ST_TO_ADDR
// end ;
75020: LD_VAR 0 1
75024: RET
// export function PrepareMastodont ( ) ; begin
75025: LD_INT 0
75027: PPUSH
// uc_side := 0 ;
75028: LD_ADDR_OWVAR 20
75032: PUSH
75033: LD_INT 0
75035: ST_TO_ADDR
// uc_nation := 0 ;
75036: LD_ADDR_OWVAR 21
75040: PUSH
75041: LD_INT 0
75043: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75044: LD_ADDR_OWVAR 37
75048: PUSH
75049: LD_INT 31
75051: ST_TO_ADDR
// vc_control := control_rider ;
75052: LD_ADDR_OWVAR 38
75056: PUSH
75057: LD_INT 4
75059: ST_TO_ADDR
// end ;
75060: LD_VAR 0 1
75064: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75065: LD_INT 0
75067: PPUSH
75068: PPUSH
75069: PPUSH
// uc_side = 0 ;
75070: LD_ADDR_OWVAR 20
75074: PUSH
75075: LD_INT 0
75077: ST_TO_ADDR
// uc_nation = 0 ;
75078: LD_ADDR_OWVAR 21
75082: PUSH
75083: LD_INT 0
75085: ST_TO_ADDR
// InitHc_All ( ) ;
75086: CALL_OW 584
// InitVc ;
75090: CALL_OW 20
// if mastodonts then
75094: LD_VAR 0 6
75098: IFFALSE 75165
// for i = 1 to mastodonts do
75100: LD_ADDR_VAR 0 11
75104: PUSH
75105: DOUBLE
75106: LD_INT 1
75108: DEC
75109: ST_TO_ADDR
75110: LD_VAR 0 6
75114: PUSH
75115: FOR_TO
75116: IFFALSE 75163
// begin vc_chassis := 31 ;
75118: LD_ADDR_OWVAR 37
75122: PUSH
75123: LD_INT 31
75125: ST_TO_ADDR
// vc_control := control_rider ;
75126: LD_ADDR_OWVAR 38
75130: PUSH
75131: LD_INT 4
75133: ST_TO_ADDR
// animal := CreateVehicle ;
75134: LD_ADDR_VAR 0 12
75138: PUSH
75139: CALL_OW 45
75143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75144: LD_VAR 0 12
75148: PPUSH
75149: LD_VAR 0 8
75153: PPUSH
75154: LD_INT 0
75156: PPUSH
75157: CALL 77300 0 3
// end ;
75161: GO 75115
75163: POP
75164: POP
// if horses then
75165: LD_VAR 0 5
75169: IFFALSE 75236
// for i = 1 to horses do
75171: LD_ADDR_VAR 0 11
75175: PUSH
75176: DOUBLE
75177: LD_INT 1
75179: DEC
75180: ST_TO_ADDR
75181: LD_VAR 0 5
75185: PUSH
75186: FOR_TO
75187: IFFALSE 75234
// begin hc_class := 21 ;
75189: LD_ADDR_OWVAR 28
75193: PUSH
75194: LD_INT 21
75196: ST_TO_ADDR
// hc_gallery :=  ;
75197: LD_ADDR_OWVAR 33
75201: PUSH
75202: LD_STRING 
75204: ST_TO_ADDR
// animal := CreateHuman ;
75205: LD_ADDR_VAR 0 12
75209: PUSH
75210: CALL_OW 44
75214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75215: LD_VAR 0 12
75219: PPUSH
75220: LD_VAR 0 8
75224: PPUSH
75225: LD_INT 0
75227: PPUSH
75228: CALL 77300 0 3
// end ;
75232: GO 75186
75234: POP
75235: POP
// if birds then
75236: LD_VAR 0 1
75240: IFFALSE 75307
// for i = 1 to birds do
75242: LD_ADDR_VAR 0 11
75246: PUSH
75247: DOUBLE
75248: LD_INT 1
75250: DEC
75251: ST_TO_ADDR
75252: LD_VAR 0 1
75256: PUSH
75257: FOR_TO
75258: IFFALSE 75305
// begin hc_class = 18 ;
75260: LD_ADDR_OWVAR 28
75264: PUSH
75265: LD_INT 18
75267: ST_TO_ADDR
// hc_gallery =  ;
75268: LD_ADDR_OWVAR 33
75272: PUSH
75273: LD_STRING 
75275: ST_TO_ADDR
// animal := CreateHuman ;
75276: LD_ADDR_VAR 0 12
75280: PUSH
75281: CALL_OW 44
75285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75286: LD_VAR 0 12
75290: PPUSH
75291: LD_VAR 0 8
75295: PPUSH
75296: LD_INT 0
75298: PPUSH
75299: CALL 77300 0 3
// end ;
75303: GO 75257
75305: POP
75306: POP
// if tigers then
75307: LD_VAR 0 2
75311: IFFALSE 75395
// for i = 1 to tigers do
75313: LD_ADDR_VAR 0 11
75317: PUSH
75318: DOUBLE
75319: LD_INT 1
75321: DEC
75322: ST_TO_ADDR
75323: LD_VAR 0 2
75327: PUSH
75328: FOR_TO
75329: IFFALSE 75393
// begin hc_class = class_tiger ;
75331: LD_ADDR_OWVAR 28
75335: PUSH
75336: LD_INT 14
75338: ST_TO_ADDR
// hc_gallery =  ;
75339: LD_ADDR_OWVAR 33
75343: PUSH
75344: LD_STRING 
75346: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75347: LD_ADDR_OWVAR 35
75351: PUSH
75352: LD_INT 7
75354: NEG
75355: PPUSH
75356: LD_INT 7
75358: PPUSH
75359: CALL_OW 12
75363: ST_TO_ADDR
// animal := CreateHuman ;
75364: LD_ADDR_VAR 0 12
75368: PUSH
75369: CALL_OW 44
75373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75374: LD_VAR 0 12
75378: PPUSH
75379: LD_VAR 0 8
75383: PPUSH
75384: LD_INT 0
75386: PPUSH
75387: CALL 77300 0 3
// end ;
75391: GO 75328
75393: POP
75394: POP
// if apemans then
75395: LD_VAR 0 3
75399: IFFALSE 75522
// for i = 1 to apemans do
75401: LD_ADDR_VAR 0 11
75405: PUSH
75406: DOUBLE
75407: LD_INT 1
75409: DEC
75410: ST_TO_ADDR
75411: LD_VAR 0 3
75415: PUSH
75416: FOR_TO
75417: IFFALSE 75520
// begin hc_class = class_apeman ;
75419: LD_ADDR_OWVAR 28
75423: PUSH
75424: LD_INT 12
75426: ST_TO_ADDR
// hc_gallery =  ;
75427: LD_ADDR_OWVAR 33
75431: PUSH
75432: LD_STRING 
75434: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75435: LD_ADDR_OWVAR 35
75439: PUSH
75440: LD_INT 2
75442: NEG
75443: PPUSH
75444: LD_INT 2
75446: PPUSH
75447: CALL_OW 12
75451: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75452: LD_ADDR_OWVAR 31
75456: PUSH
75457: LD_INT 1
75459: PPUSH
75460: LD_INT 3
75462: PPUSH
75463: CALL_OW 12
75467: PUSH
75468: LD_INT 1
75470: PPUSH
75471: LD_INT 3
75473: PPUSH
75474: CALL_OW 12
75478: PUSH
75479: LD_INT 0
75481: PUSH
75482: LD_INT 0
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: ST_TO_ADDR
// animal := CreateHuman ;
75491: LD_ADDR_VAR 0 12
75495: PUSH
75496: CALL_OW 44
75500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75501: LD_VAR 0 12
75505: PPUSH
75506: LD_VAR 0 8
75510: PPUSH
75511: LD_INT 0
75513: PPUSH
75514: CALL 77300 0 3
// end ;
75518: GO 75416
75520: POP
75521: POP
// if enchidnas then
75522: LD_VAR 0 4
75526: IFFALSE 75593
// for i = 1 to enchidnas do
75528: LD_ADDR_VAR 0 11
75532: PUSH
75533: DOUBLE
75534: LD_INT 1
75536: DEC
75537: ST_TO_ADDR
75538: LD_VAR 0 4
75542: PUSH
75543: FOR_TO
75544: IFFALSE 75591
// begin hc_class = 13 ;
75546: LD_ADDR_OWVAR 28
75550: PUSH
75551: LD_INT 13
75553: ST_TO_ADDR
// hc_gallery =  ;
75554: LD_ADDR_OWVAR 33
75558: PUSH
75559: LD_STRING 
75561: ST_TO_ADDR
// animal := CreateHuman ;
75562: LD_ADDR_VAR 0 12
75566: PUSH
75567: CALL_OW 44
75571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75572: LD_VAR 0 12
75576: PPUSH
75577: LD_VAR 0 8
75581: PPUSH
75582: LD_INT 0
75584: PPUSH
75585: CALL 77300 0 3
// end ;
75589: GO 75543
75591: POP
75592: POP
// if fishes then
75593: LD_VAR 0 7
75597: IFFALSE 75664
// for i = 1 to fishes do
75599: LD_ADDR_VAR 0 11
75603: PUSH
75604: DOUBLE
75605: LD_INT 1
75607: DEC
75608: ST_TO_ADDR
75609: LD_VAR 0 7
75613: PUSH
75614: FOR_TO
75615: IFFALSE 75662
// begin hc_class = 20 ;
75617: LD_ADDR_OWVAR 28
75621: PUSH
75622: LD_INT 20
75624: ST_TO_ADDR
// hc_gallery =  ;
75625: LD_ADDR_OWVAR 33
75629: PUSH
75630: LD_STRING 
75632: ST_TO_ADDR
// animal := CreateHuman ;
75633: LD_ADDR_VAR 0 12
75637: PUSH
75638: CALL_OW 44
75642: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75643: LD_VAR 0 12
75647: PPUSH
75648: LD_VAR 0 9
75652: PPUSH
75653: LD_INT 0
75655: PPUSH
75656: CALL 77300 0 3
// end ;
75660: GO 75614
75662: POP
75663: POP
// end ;
75664: LD_VAR 0 10
75668: RET
// export function WantHeal ( sci , unit ) ; begin
75669: LD_INT 0
75671: PPUSH
// if GetTaskList ( sci ) > 0 then
75672: LD_VAR 0 1
75676: PPUSH
75677: CALL_OW 437
75681: PUSH
75682: LD_INT 0
75684: GREATER
75685: IFFALSE 75755
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75687: LD_VAR 0 1
75691: PPUSH
75692: CALL_OW 437
75696: PUSH
75697: LD_INT 1
75699: ARRAY
75700: PUSH
75701: LD_INT 1
75703: ARRAY
75704: PUSH
75705: LD_STRING l
75707: EQUAL
75708: PUSH
75709: LD_VAR 0 1
75713: PPUSH
75714: CALL_OW 437
75718: PUSH
75719: LD_INT 1
75721: ARRAY
75722: PUSH
75723: LD_INT 4
75725: ARRAY
75726: PUSH
75727: LD_VAR 0 2
75731: EQUAL
75732: AND
75733: IFFALSE 75745
// result := true else
75735: LD_ADDR_VAR 0 3
75739: PUSH
75740: LD_INT 1
75742: ST_TO_ADDR
75743: GO 75753
// result := false ;
75745: LD_ADDR_VAR 0 3
75749: PUSH
75750: LD_INT 0
75752: ST_TO_ADDR
// end else
75753: GO 75763
// result := false ;
75755: LD_ADDR_VAR 0 3
75759: PUSH
75760: LD_INT 0
75762: ST_TO_ADDR
// end ;
75763: LD_VAR 0 3
75767: RET
// export function HealTarget ( sci ) ; begin
75768: LD_INT 0
75770: PPUSH
// if not sci then
75771: LD_VAR 0 1
75775: NOT
75776: IFFALSE 75780
// exit ;
75778: GO 75845
// result := 0 ;
75780: LD_ADDR_VAR 0 2
75784: PUSH
75785: LD_INT 0
75787: ST_TO_ADDR
// if GetTaskList ( sci ) then
75788: LD_VAR 0 1
75792: PPUSH
75793: CALL_OW 437
75797: IFFALSE 75845
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75799: LD_VAR 0 1
75803: PPUSH
75804: CALL_OW 437
75808: PUSH
75809: LD_INT 1
75811: ARRAY
75812: PUSH
75813: LD_INT 1
75815: ARRAY
75816: PUSH
75817: LD_STRING l
75819: EQUAL
75820: IFFALSE 75845
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75822: LD_ADDR_VAR 0 2
75826: PUSH
75827: LD_VAR 0 1
75831: PPUSH
75832: CALL_OW 437
75836: PUSH
75837: LD_INT 1
75839: ARRAY
75840: PUSH
75841: LD_INT 4
75843: ARRAY
75844: ST_TO_ADDR
// end ;
75845: LD_VAR 0 2
75849: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75850: LD_INT 0
75852: PPUSH
75853: PPUSH
75854: PPUSH
75855: PPUSH
// if not base_units then
75856: LD_VAR 0 1
75860: NOT
75861: IFFALSE 75865
// exit ;
75863: GO 75952
// result := false ;
75865: LD_ADDR_VAR 0 2
75869: PUSH
75870: LD_INT 0
75872: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75873: LD_ADDR_VAR 0 5
75877: PUSH
75878: LD_VAR 0 1
75882: PPUSH
75883: LD_INT 21
75885: PUSH
75886: LD_INT 3
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PPUSH
75893: CALL_OW 72
75897: ST_TO_ADDR
// if not tmp then
75898: LD_VAR 0 5
75902: NOT
75903: IFFALSE 75907
// exit ;
75905: GO 75952
// for i in tmp do
75907: LD_ADDR_VAR 0 3
75911: PUSH
75912: LD_VAR 0 5
75916: PUSH
75917: FOR_IN
75918: IFFALSE 75950
// begin result := EnemyInRange ( i , 22 ) ;
75920: LD_ADDR_VAR 0 2
75924: PUSH
75925: LD_VAR 0 3
75929: PPUSH
75930: LD_INT 22
75932: PPUSH
75933: CALL 73565 0 2
75937: ST_TO_ADDR
// if result then
75938: LD_VAR 0 2
75942: IFFALSE 75948
// exit ;
75944: POP
75945: POP
75946: GO 75952
// end ;
75948: GO 75917
75950: POP
75951: POP
// end ;
75952: LD_VAR 0 2
75956: RET
// export function FilterByTag ( units , tag ) ; begin
75957: LD_INT 0
75959: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75960: LD_ADDR_VAR 0 3
75964: PUSH
75965: LD_VAR 0 1
75969: PPUSH
75970: LD_INT 120
75972: PUSH
75973: LD_VAR 0 2
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: PPUSH
75982: CALL_OW 72
75986: ST_TO_ADDR
// end ;
75987: LD_VAR 0 3
75991: RET
// export function IsDriver ( un ) ; begin
75992: LD_INT 0
75994: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75995: LD_ADDR_VAR 0 2
75999: PUSH
76000: LD_VAR 0 1
76004: PUSH
76005: LD_INT 55
76007: PUSH
76008: EMPTY
76009: LIST
76010: PPUSH
76011: CALL_OW 69
76015: IN
76016: ST_TO_ADDR
// end ;
76017: LD_VAR 0 2
76021: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76022: LD_INT 0
76024: PPUSH
76025: PPUSH
// list := [ ] ;
76026: LD_ADDR_VAR 0 5
76030: PUSH
76031: EMPTY
76032: ST_TO_ADDR
// case d of 0 :
76033: LD_VAR 0 3
76037: PUSH
76038: LD_INT 0
76040: DOUBLE
76041: EQUAL
76042: IFTRUE 76046
76044: GO 76179
76046: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76047: LD_ADDR_VAR 0 5
76051: PUSH
76052: LD_VAR 0 1
76056: PUSH
76057: LD_INT 4
76059: MINUS
76060: PUSH
76061: LD_VAR 0 2
76065: PUSH
76066: LD_INT 4
76068: MINUS
76069: PUSH
76070: LD_INT 2
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: LIST
76077: PUSH
76078: LD_VAR 0 1
76082: PUSH
76083: LD_INT 3
76085: MINUS
76086: PUSH
76087: LD_VAR 0 2
76091: PUSH
76092: LD_INT 1
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: LIST
76099: PUSH
76100: LD_VAR 0 1
76104: PUSH
76105: LD_INT 4
76107: PLUS
76108: PUSH
76109: LD_VAR 0 2
76113: PUSH
76114: LD_INT 4
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: LIST
76121: PUSH
76122: LD_VAR 0 1
76126: PUSH
76127: LD_INT 3
76129: PLUS
76130: PUSH
76131: LD_VAR 0 2
76135: PUSH
76136: LD_INT 3
76138: PLUS
76139: PUSH
76140: LD_INT 5
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: LIST
76147: PUSH
76148: LD_VAR 0 1
76152: PUSH
76153: LD_VAR 0 2
76157: PUSH
76158: LD_INT 4
76160: PLUS
76161: PUSH
76162: LD_INT 0
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: LIST
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: ST_TO_ADDR
// end ; 1 :
76177: GO 76877
76179: LD_INT 1
76181: DOUBLE
76182: EQUAL
76183: IFTRUE 76187
76185: GO 76320
76187: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76188: LD_ADDR_VAR 0 5
76192: PUSH
76193: LD_VAR 0 1
76197: PUSH
76198: LD_VAR 0 2
76202: PUSH
76203: LD_INT 4
76205: MINUS
76206: PUSH
76207: LD_INT 3
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: LIST
76214: PUSH
76215: LD_VAR 0 1
76219: PUSH
76220: LD_INT 3
76222: MINUS
76223: PUSH
76224: LD_VAR 0 2
76228: PUSH
76229: LD_INT 3
76231: MINUS
76232: PUSH
76233: LD_INT 2
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: LIST
76240: PUSH
76241: LD_VAR 0 1
76245: PUSH
76246: LD_INT 4
76248: MINUS
76249: PUSH
76250: LD_VAR 0 2
76254: PUSH
76255: LD_INT 1
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: LIST
76262: PUSH
76263: LD_VAR 0 1
76267: PUSH
76268: LD_VAR 0 2
76272: PUSH
76273: LD_INT 3
76275: PLUS
76276: PUSH
76277: LD_INT 0
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: LIST
76284: PUSH
76285: LD_VAR 0 1
76289: PUSH
76290: LD_INT 4
76292: PLUS
76293: PUSH
76294: LD_VAR 0 2
76298: PUSH
76299: LD_INT 4
76301: PLUS
76302: PUSH
76303: LD_INT 5
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: LIST
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: ST_TO_ADDR
// end ; 2 :
76318: GO 76877
76320: LD_INT 2
76322: DOUBLE
76323: EQUAL
76324: IFTRUE 76328
76326: GO 76457
76328: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76329: LD_ADDR_VAR 0 5
76333: PUSH
76334: LD_VAR 0 1
76338: PUSH
76339: LD_VAR 0 2
76343: PUSH
76344: LD_INT 3
76346: MINUS
76347: PUSH
76348: LD_INT 3
76350: PUSH
76351: EMPTY
76352: LIST
76353: LIST
76354: LIST
76355: PUSH
76356: LD_VAR 0 1
76360: PUSH
76361: LD_INT 4
76363: PLUS
76364: PUSH
76365: LD_VAR 0 2
76369: PUSH
76370: LD_INT 4
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: LIST
76377: PUSH
76378: LD_VAR 0 1
76382: PUSH
76383: LD_VAR 0 2
76387: PUSH
76388: LD_INT 4
76390: PLUS
76391: PUSH
76392: LD_INT 0
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: LIST
76399: PUSH
76400: LD_VAR 0 1
76404: PUSH
76405: LD_INT 3
76407: MINUS
76408: PUSH
76409: LD_VAR 0 2
76413: PUSH
76414: LD_INT 1
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: LIST
76421: PUSH
76422: LD_VAR 0 1
76426: PUSH
76427: LD_INT 4
76429: MINUS
76430: PUSH
76431: LD_VAR 0 2
76435: PUSH
76436: LD_INT 4
76438: MINUS
76439: PUSH
76440: LD_INT 2
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: LIST
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: ST_TO_ADDR
// end ; 3 :
76455: GO 76877
76457: LD_INT 3
76459: DOUBLE
76460: EQUAL
76461: IFTRUE 76465
76463: GO 76598
76465: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76466: LD_ADDR_VAR 0 5
76470: PUSH
76471: LD_VAR 0 1
76475: PUSH
76476: LD_INT 3
76478: PLUS
76479: PUSH
76480: LD_VAR 0 2
76484: PUSH
76485: LD_INT 4
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: LIST
76492: PUSH
76493: LD_VAR 0 1
76497: PUSH
76498: LD_INT 4
76500: PLUS
76501: PUSH
76502: LD_VAR 0 2
76506: PUSH
76507: LD_INT 4
76509: PLUS
76510: PUSH
76511: LD_INT 5
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: LIST
76518: PUSH
76519: LD_VAR 0 1
76523: PUSH
76524: LD_INT 4
76526: MINUS
76527: PUSH
76528: LD_VAR 0 2
76532: PUSH
76533: LD_INT 1
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: LIST
76540: PUSH
76541: LD_VAR 0 1
76545: PUSH
76546: LD_VAR 0 2
76550: PUSH
76551: LD_INT 4
76553: MINUS
76554: PUSH
76555: LD_INT 3
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: LIST
76562: PUSH
76563: LD_VAR 0 1
76567: PUSH
76568: LD_INT 3
76570: MINUS
76571: PUSH
76572: LD_VAR 0 2
76576: PUSH
76577: LD_INT 3
76579: MINUS
76580: PUSH
76581: LD_INT 2
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: LIST
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: ST_TO_ADDR
// end ; 4 :
76596: GO 76877
76598: LD_INT 4
76600: DOUBLE
76601: EQUAL
76602: IFTRUE 76606
76604: GO 76739
76606: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76607: LD_ADDR_VAR 0 5
76611: PUSH
76612: LD_VAR 0 1
76616: PUSH
76617: LD_VAR 0 2
76621: PUSH
76622: LD_INT 4
76624: PLUS
76625: PUSH
76626: LD_INT 0
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: LIST
76633: PUSH
76634: LD_VAR 0 1
76638: PUSH
76639: LD_INT 3
76641: PLUS
76642: PUSH
76643: LD_VAR 0 2
76647: PUSH
76648: LD_INT 3
76650: PLUS
76651: PUSH
76652: LD_INT 5
76654: PUSH
76655: EMPTY
76656: LIST
76657: LIST
76658: LIST
76659: PUSH
76660: LD_VAR 0 1
76664: PUSH
76665: LD_INT 4
76667: PLUS
76668: PUSH
76669: LD_VAR 0 2
76673: PUSH
76674: LD_INT 4
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: LIST
76681: PUSH
76682: LD_VAR 0 1
76686: PUSH
76687: LD_VAR 0 2
76691: PUSH
76692: LD_INT 3
76694: MINUS
76695: PUSH
76696: LD_INT 3
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: LIST
76703: PUSH
76704: LD_VAR 0 1
76708: PUSH
76709: LD_INT 4
76711: MINUS
76712: PUSH
76713: LD_VAR 0 2
76717: PUSH
76718: LD_INT 4
76720: MINUS
76721: PUSH
76722: LD_INT 2
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: LIST
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: ST_TO_ADDR
// end ; 5 :
76737: GO 76877
76739: LD_INT 5
76741: DOUBLE
76742: EQUAL
76743: IFTRUE 76747
76745: GO 76876
76747: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76748: LD_ADDR_VAR 0 5
76752: PUSH
76753: LD_VAR 0 1
76757: PUSH
76758: LD_INT 4
76760: MINUS
76761: PUSH
76762: LD_VAR 0 2
76766: PUSH
76767: LD_INT 1
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: LIST
76774: PUSH
76775: LD_VAR 0 1
76779: PUSH
76780: LD_VAR 0 2
76784: PUSH
76785: LD_INT 4
76787: MINUS
76788: PUSH
76789: LD_INT 3
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: LIST
76796: PUSH
76797: LD_VAR 0 1
76801: PUSH
76802: LD_INT 4
76804: PLUS
76805: PUSH
76806: LD_VAR 0 2
76810: PUSH
76811: LD_INT 4
76813: PLUS
76814: PUSH
76815: LD_INT 5
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: LIST
76822: PUSH
76823: LD_VAR 0 1
76827: PUSH
76828: LD_INT 3
76830: PLUS
76831: PUSH
76832: LD_VAR 0 2
76836: PUSH
76837: LD_INT 4
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: LIST
76844: PUSH
76845: LD_VAR 0 1
76849: PUSH
76850: LD_VAR 0 2
76854: PUSH
76855: LD_INT 3
76857: PLUS
76858: PUSH
76859: LD_INT 0
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: ST_TO_ADDR
// end ; end ;
76874: GO 76877
76876: POP
// result := list ;
76877: LD_ADDR_VAR 0 4
76881: PUSH
76882: LD_VAR 0 5
76886: ST_TO_ADDR
// end ;
76887: LD_VAR 0 4
76891: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76892: LD_INT 0
76894: PPUSH
76895: PPUSH
76896: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76897: LD_VAR 0 1
76901: NOT
76902: PUSH
76903: LD_VAR 0 2
76907: PUSH
76908: LD_INT 1
76910: PUSH
76911: LD_INT 2
76913: PUSH
76914: LD_INT 3
76916: PUSH
76917: LD_INT 4
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: IN
76926: NOT
76927: OR
76928: IFFALSE 76932
// exit ;
76930: GO 77024
// tmp := [ ] ;
76932: LD_ADDR_VAR 0 5
76936: PUSH
76937: EMPTY
76938: ST_TO_ADDR
// for i in units do
76939: LD_ADDR_VAR 0 4
76943: PUSH
76944: LD_VAR 0 1
76948: PUSH
76949: FOR_IN
76950: IFFALSE 76993
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
76952: LD_ADDR_VAR 0 5
76956: PUSH
76957: LD_VAR 0 5
76961: PPUSH
76962: LD_VAR 0 5
76966: PUSH
76967: LD_INT 1
76969: PLUS
76970: PPUSH
76971: LD_VAR 0 4
76975: PPUSH
76976: LD_VAR 0 2
76980: PPUSH
76981: CALL_OW 259
76985: PPUSH
76986: CALL_OW 2
76990: ST_TO_ADDR
76991: GO 76949
76993: POP
76994: POP
// if not tmp then
76995: LD_VAR 0 5
76999: NOT
77000: IFFALSE 77004
// exit ;
77002: GO 77024
// result := SortListByListDesc ( units , tmp ) ;
77004: LD_ADDR_VAR 0 3
77008: PUSH
77009: LD_VAR 0 1
77013: PPUSH
77014: LD_VAR 0 5
77018: PPUSH
77019: CALL_OW 77
77023: ST_TO_ADDR
// end ;
77024: LD_VAR 0 3
77028: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77029: LD_INT 0
77031: PPUSH
77032: PPUSH
77033: PPUSH
// result := false ;
77034: LD_ADDR_VAR 0 3
77038: PUSH
77039: LD_INT 0
77041: ST_TO_ADDR
// x := GetX ( building ) ;
77042: LD_ADDR_VAR 0 4
77046: PUSH
77047: LD_VAR 0 2
77051: PPUSH
77052: CALL_OW 250
77056: ST_TO_ADDR
// y := GetY ( building ) ;
77057: LD_ADDR_VAR 0 5
77061: PUSH
77062: LD_VAR 0 2
77066: PPUSH
77067: CALL_OW 251
77071: ST_TO_ADDR
// if not building or not x or not y then
77072: LD_VAR 0 2
77076: NOT
77077: PUSH
77078: LD_VAR 0 4
77082: NOT
77083: OR
77084: PUSH
77085: LD_VAR 0 5
77089: NOT
77090: OR
77091: IFFALSE 77095
// exit ;
77093: GO 77187
// if GetTaskList ( unit ) then
77095: LD_VAR 0 1
77099: PPUSH
77100: CALL_OW 437
77104: IFFALSE 77187
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77106: LD_STRING e
77108: PUSH
77109: LD_VAR 0 1
77113: PPUSH
77114: CALL_OW 437
77118: PUSH
77119: LD_INT 1
77121: ARRAY
77122: PUSH
77123: LD_INT 1
77125: ARRAY
77126: EQUAL
77127: PUSH
77128: LD_VAR 0 4
77132: PUSH
77133: LD_VAR 0 1
77137: PPUSH
77138: CALL_OW 437
77142: PUSH
77143: LD_INT 1
77145: ARRAY
77146: PUSH
77147: LD_INT 2
77149: ARRAY
77150: EQUAL
77151: AND
77152: PUSH
77153: LD_VAR 0 5
77157: PUSH
77158: LD_VAR 0 1
77162: PPUSH
77163: CALL_OW 437
77167: PUSH
77168: LD_INT 1
77170: ARRAY
77171: PUSH
77172: LD_INT 3
77174: ARRAY
77175: EQUAL
77176: AND
77177: IFFALSE 77187
// result := true end ;
77179: LD_ADDR_VAR 0 3
77183: PUSH
77184: LD_INT 1
77186: ST_TO_ADDR
// end ;
77187: LD_VAR 0 3
77191: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77192: LD_INT 0
77194: PPUSH
// result := false ;
77195: LD_ADDR_VAR 0 4
77199: PUSH
77200: LD_INT 0
77202: ST_TO_ADDR
// if GetTaskList ( unit ) then
77203: LD_VAR 0 1
77207: PPUSH
77208: CALL_OW 437
77212: IFFALSE 77295
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77214: LD_STRING M
77216: PUSH
77217: LD_VAR 0 1
77221: PPUSH
77222: CALL_OW 437
77226: PUSH
77227: LD_INT 1
77229: ARRAY
77230: PUSH
77231: LD_INT 1
77233: ARRAY
77234: EQUAL
77235: PUSH
77236: LD_VAR 0 2
77240: PUSH
77241: LD_VAR 0 1
77245: PPUSH
77246: CALL_OW 437
77250: PUSH
77251: LD_INT 1
77253: ARRAY
77254: PUSH
77255: LD_INT 2
77257: ARRAY
77258: EQUAL
77259: AND
77260: PUSH
77261: LD_VAR 0 3
77265: PUSH
77266: LD_VAR 0 1
77270: PPUSH
77271: CALL_OW 437
77275: PUSH
77276: LD_INT 1
77278: ARRAY
77279: PUSH
77280: LD_INT 3
77282: ARRAY
77283: EQUAL
77284: AND
77285: IFFALSE 77295
// result := true ;
77287: LD_ADDR_VAR 0 4
77291: PUSH
77292: LD_INT 1
77294: ST_TO_ADDR
// end ; end ;
77295: LD_VAR 0 4
77299: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77300: LD_INT 0
77302: PPUSH
77303: PPUSH
77304: PPUSH
77305: PPUSH
// if not unit or not area then
77306: LD_VAR 0 1
77310: NOT
77311: PUSH
77312: LD_VAR 0 2
77316: NOT
77317: OR
77318: IFFALSE 77322
// exit ;
77320: GO 77486
// tmp := AreaToList ( area , i ) ;
77322: LD_ADDR_VAR 0 6
77326: PUSH
77327: LD_VAR 0 2
77331: PPUSH
77332: LD_VAR 0 5
77336: PPUSH
77337: CALL_OW 517
77341: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77342: LD_ADDR_VAR 0 5
77346: PUSH
77347: DOUBLE
77348: LD_INT 1
77350: DEC
77351: ST_TO_ADDR
77352: LD_VAR 0 6
77356: PUSH
77357: LD_INT 1
77359: ARRAY
77360: PUSH
77361: FOR_TO
77362: IFFALSE 77484
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77364: LD_ADDR_VAR 0 7
77368: PUSH
77369: LD_VAR 0 6
77373: PUSH
77374: LD_INT 1
77376: ARRAY
77377: PUSH
77378: LD_VAR 0 5
77382: ARRAY
77383: PUSH
77384: LD_VAR 0 6
77388: PUSH
77389: LD_INT 2
77391: ARRAY
77392: PUSH
77393: LD_VAR 0 5
77397: ARRAY
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77403: LD_VAR 0 7
77407: PUSH
77408: LD_INT 1
77410: ARRAY
77411: PPUSH
77412: LD_VAR 0 7
77416: PUSH
77417: LD_INT 2
77419: ARRAY
77420: PPUSH
77421: CALL_OW 428
77425: PUSH
77426: LD_INT 0
77428: EQUAL
77429: IFFALSE 77482
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77431: LD_VAR 0 1
77435: PPUSH
77436: LD_VAR 0 7
77440: PUSH
77441: LD_INT 1
77443: ARRAY
77444: PPUSH
77445: LD_VAR 0 7
77449: PUSH
77450: LD_INT 2
77452: ARRAY
77453: PPUSH
77454: LD_VAR 0 3
77458: PPUSH
77459: CALL_OW 48
// result := IsPlaced ( unit ) ;
77463: LD_ADDR_VAR 0 4
77467: PUSH
77468: LD_VAR 0 1
77472: PPUSH
77473: CALL_OW 305
77477: ST_TO_ADDR
// exit ;
77478: POP
77479: POP
77480: GO 77486
// end ; end ;
77482: GO 77361
77484: POP
77485: POP
// end ;
77486: LD_VAR 0 4
77490: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77491: LD_INT 0
77493: PPUSH
77494: PPUSH
77495: PPUSH
// if not side or side > 8 then
77496: LD_VAR 0 1
77500: NOT
77501: PUSH
77502: LD_VAR 0 1
77506: PUSH
77507: LD_INT 8
77509: GREATER
77510: OR
77511: IFFALSE 77515
// exit ;
77513: GO 77702
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77515: LD_ADDR_VAR 0 4
77519: PUSH
77520: LD_INT 22
77522: PUSH
77523: LD_VAR 0 1
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: PUSH
77532: LD_INT 21
77534: PUSH
77535: LD_INT 3
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: PPUSH
77546: CALL_OW 69
77550: ST_TO_ADDR
// if not tmp then
77551: LD_VAR 0 4
77555: NOT
77556: IFFALSE 77560
// exit ;
77558: GO 77702
// enable_addtolog := true ;
77560: LD_ADDR_OWVAR 81
77564: PUSH
77565: LD_INT 1
77567: ST_TO_ADDR
// AddToLog ( [ ) ;
77568: LD_STRING [
77570: PPUSH
77571: CALL_OW 561
// for i in tmp do
77575: LD_ADDR_VAR 0 3
77579: PUSH
77580: LD_VAR 0 4
77584: PUSH
77585: FOR_IN
77586: IFFALSE 77693
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77588: LD_STRING [
77590: PUSH
77591: LD_VAR 0 3
77595: PPUSH
77596: CALL_OW 266
77600: STR
77601: PUSH
77602: LD_STRING , 
77604: STR
77605: PUSH
77606: LD_VAR 0 3
77610: PPUSH
77611: CALL_OW 250
77615: STR
77616: PUSH
77617: LD_STRING , 
77619: STR
77620: PUSH
77621: LD_VAR 0 3
77625: PPUSH
77626: CALL_OW 251
77630: STR
77631: PUSH
77632: LD_STRING , 
77634: STR
77635: PUSH
77636: LD_VAR 0 3
77640: PPUSH
77641: CALL_OW 254
77645: STR
77646: PUSH
77647: LD_STRING , 
77649: STR
77650: PUSH
77651: LD_VAR 0 3
77655: PPUSH
77656: LD_INT 1
77658: PPUSH
77659: CALL_OW 268
77663: STR
77664: PUSH
77665: LD_STRING , 
77667: STR
77668: PUSH
77669: LD_VAR 0 3
77673: PPUSH
77674: LD_INT 2
77676: PPUSH
77677: CALL_OW 268
77681: STR
77682: PUSH
77683: LD_STRING ],
77685: STR
77686: PPUSH
77687: CALL_OW 561
// end ;
77691: GO 77585
77693: POP
77694: POP
// AddToLog ( ]; ) ;
77695: LD_STRING ];
77697: PPUSH
77698: CALL_OW 561
// end ;
77702: LD_VAR 0 2
77706: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77707: LD_INT 0
77709: PPUSH
77710: PPUSH
77711: PPUSH
77712: PPUSH
77713: PPUSH
// if not area or not rate or not max then
77714: LD_VAR 0 1
77718: NOT
77719: PUSH
77720: LD_VAR 0 2
77724: NOT
77725: OR
77726: PUSH
77727: LD_VAR 0 4
77731: NOT
77732: OR
77733: IFFALSE 77737
// exit ;
77735: GO 77926
// while 1 do
77737: LD_INT 1
77739: IFFALSE 77926
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77741: LD_ADDR_VAR 0 9
77745: PUSH
77746: LD_VAR 0 1
77750: PPUSH
77751: LD_INT 1
77753: PPUSH
77754: CALL_OW 287
77758: PUSH
77759: LD_INT 10
77761: MUL
77762: ST_TO_ADDR
// r := rate / 10 ;
77763: LD_ADDR_VAR 0 7
77767: PUSH
77768: LD_VAR 0 2
77772: PUSH
77773: LD_INT 10
77775: DIVREAL
77776: ST_TO_ADDR
// time := 1 1$00 ;
77777: LD_ADDR_VAR 0 8
77781: PUSH
77782: LD_INT 2100
77784: ST_TO_ADDR
// if amount < min then
77785: LD_VAR 0 9
77789: PUSH
77790: LD_VAR 0 3
77794: LESS
77795: IFFALSE 77813
// r := r * 2 else
77797: LD_ADDR_VAR 0 7
77801: PUSH
77802: LD_VAR 0 7
77806: PUSH
77807: LD_INT 2
77809: MUL
77810: ST_TO_ADDR
77811: GO 77839
// if amount > max then
77813: LD_VAR 0 9
77817: PUSH
77818: LD_VAR 0 4
77822: GREATER
77823: IFFALSE 77839
// r := r / 2 ;
77825: LD_ADDR_VAR 0 7
77829: PUSH
77830: LD_VAR 0 7
77834: PUSH
77835: LD_INT 2
77837: DIVREAL
77838: ST_TO_ADDR
// time := time / r ;
77839: LD_ADDR_VAR 0 8
77843: PUSH
77844: LD_VAR 0 8
77848: PUSH
77849: LD_VAR 0 7
77853: DIVREAL
77854: ST_TO_ADDR
// if time < 0 then
77855: LD_VAR 0 8
77859: PUSH
77860: LD_INT 0
77862: LESS
77863: IFFALSE 77880
// time := time * - 1 ;
77865: LD_ADDR_VAR 0 8
77869: PUSH
77870: LD_VAR 0 8
77874: PUSH
77875: LD_INT 1
77877: NEG
77878: MUL
77879: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77880: LD_VAR 0 8
77884: PUSH
77885: LD_INT 35
77887: PPUSH
77888: LD_INT 875
77890: PPUSH
77891: CALL_OW 12
77895: PLUS
77896: PPUSH
77897: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77901: LD_INT 1
77903: PPUSH
77904: LD_INT 5
77906: PPUSH
77907: CALL_OW 12
77911: PPUSH
77912: LD_VAR 0 1
77916: PPUSH
77917: LD_INT 1
77919: PPUSH
77920: CALL_OW 55
// end ;
77924: GO 77737
// end ;
77926: LD_VAR 0 5
77930: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77931: LD_INT 0
77933: PPUSH
77934: PPUSH
77935: PPUSH
77936: PPUSH
77937: PPUSH
77938: PPUSH
77939: PPUSH
77940: PPUSH
// if not turrets or not factories then
77941: LD_VAR 0 1
77945: NOT
77946: PUSH
77947: LD_VAR 0 2
77951: NOT
77952: OR
77953: IFFALSE 77957
// exit ;
77955: GO 78264
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77957: LD_ADDR_VAR 0 10
77961: PUSH
77962: LD_INT 5
77964: PUSH
77965: LD_INT 6
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: PUSH
77972: LD_INT 2
77974: PUSH
77975: LD_INT 4
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PUSH
77982: LD_INT 3
77984: PUSH
77985: LD_INT 5
77987: PUSH
77988: EMPTY
77989: LIST
77990: LIST
77991: PUSH
77992: EMPTY
77993: LIST
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 24
77999: PUSH
78000: LD_INT 25
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: PUSH
78007: LD_INT 23
78009: PUSH
78010: LD_INT 27
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: LD_INT 42
78023: PUSH
78024: LD_INT 43
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: PUSH
78031: LD_INT 44
78033: PUSH
78034: LD_INT 46
78036: PUSH
78037: EMPTY
78038: LIST
78039: LIST
78040: PUSH
78041: LD_INT 45
78043: PUSH
78044: LD_INT 47
78046: PUSH
78047: EMPTY
78048: LIST
78049: LIST
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: LIST
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: LIST
78060: ST_TO_ADDR
// result := [ ] ;
78061: LD_ADDR_VAR 0 3
78065: PUSH
78066: EMPTY
78067: ST_TO_ADDR
// for i in turrets do
78068: LD_ADDR_VAR 0 4
78072: PUSH
78073: LD_VAR 0 1
78077: PUSH
78078: FOR_IN
78079: IFFALSE 78262
// begin nat := GetNation ( i ) ;
78081: LD_ADDR_VAR 0 7
78085: PUSH
78086: LD_VAR 0 4
78090: PPUSH
78091: CALL_OW 248
78095: ST_TO_ADDR
// weapon := 0 ;
78096: LD_ADDR_VAR 0 8
78100: PUSH
78101: LD_INT 0
78103: ST_TO_ADDR
// if not nat then
78104: LD_VAR 0 7
78108: NOT
78109: IFFALSE 78113
// continue ;
78111: GO 78078
// for j in list [ nat ] do
78113: LD_ADDR_VAR 0 5
78117: PUSH
78118: LD_VAR 0 10
78122: PUSH
78123: LD_VAR 0 7
78127: ARRAY
78128: PUSH
78129: FOR_IN
78130: IFFALSE 78171
// if GetBWeapon ( i ) = j [ 1 ] then
78132: LD_VAR 0 4
78136: PPUSH
78137: CALL_OW 269
78141: PUSH
78142: LD_VAR 0 5
78146: PUSH
78147: LD_INT 1
78149: ARRAY
78150: EQUAL
78151: IFFALSE 78169
// begin weapon := j [ 2 ] ;
78153: LD_ADDR_VAR 0 8
78157: PUSH
78158: LD_VAR 0 5
78162: PUSH
78163: LD_INT 2
78165: ARRAY
78166: ST_TO_ADDR
// break ;
78167: GO 78171
// end ;
78169: GO 78129
78171: POP
78172: POP
// if not weapon then
78173: LD_VAR 0 8
78177: NOT
78178: IFFALSE 78182
// continue ;
78180: GO 78078
// for k in factories do
78182: LD_ADDR_VAR 0 6
78186: PUSH
78187: LD_VAR 0 2
78191: PUSH
78192: FOR_IN
78193: IFFALSE 78258
// begin weapons := AvailableWeaponList ( k ) ;
78195: LD_ADDR_VAR 0 9
78199: PUSH
78200: LD_VAR 0 6
78204: PPUSH
78205: CALL_OW 478
78209: ST_TO_ADDR
// if not weapons then
78210: LD_VAR 0 9
78214: NOT
78215: IFFALSE 78219
// continue ;
78217: GO 78192
// if weapon in weapons then
78219: LD_VAR 0 8
78223: PUSH
78224: LD_VAR 0 9
78228: IN
78229: IFFALSE 78256
// begin result := [ i , weapon ] ;
78231: LD_ADDR_VAR 0 3
78235: PUSH
78236: LD_VAR 0 4
78240: PUSH
78241: LD_VAR 0 8
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: ST_TO_ADDR
// exit ;
78250: POP
78251: POP
78252: POP
78253: POP
78254: GO 78264
// end ; end ;
78256: GO 78192
78258: POP
78259: POP
// end ;
78260: GO 78078
78262: POP
78263: POP
// end ;
78264: LD_VAR 0 3
78268: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78269: LD_INT 0
78271: PPUSH
// if not side or side > 8 then
78272: LD_VAR 0 3
78276: NOT
78277: PUSH
78278: LD_VAR 0 3
78282: PUSH
78283: LD_INT 8
78285: GREATER
78286: OR
78287: IFFALSE 78291
// exit ;
78289: GO 78350
// if not range then
78291: LD_VAR 0 4
78295: NOT
78296: IFFALSE 78307
// range := - 12 ;
78298: LD_ADDR_VAR 0 4
78302: PUSH
78303: LD_INT 12
78305: NEG
78306: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78307: LD_VAR 0 1
78311: PPUSH
78312: LD_VAR 0 2
78316: PPUSH
78317: LD_VAR 0 3
78321: PPUSH
78322: LD_VAR 0 4
78326: PPUSH
78327: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78331: LD_VAR 0 1
78335: PPUSH
78336: LD_VAR 0 2
78340: PPUSH
78341: LD_VAR 0 3
78345: PPUSH
78346: CALL_OW 331
// end ;
78350: LD_VAR 0 5
78354: RET
// export function Video ( mode ) ; begin
78355: LD_INT 0
78357: PPUSH
// ingame_video = mode ;
78358: LD_ADDR_OWVAR 52
78362: PUSH
78363: LD_VAR 0 1
78367: ST_TO_ADDR
// interface_hidden = mode ;
78368: LD_ADDR_OWVAR 54
78372: PUSH
78373: LD_VAR 0 1
78377: ST_TO_ADDR
// end ;
78378: LD_VAR 0 2
78382: RET
// export function Join ( array , element ) ; begin
78383: LD_INT 0
78385: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78386: LD_ADDR_VAR 0 3
78390: PUSH
78391: LD_VAR 0 1
78395: PPUSH
78396: LD_VAR 0 1
78400: PUSH
78401: LD_INT 1
78403: PLUS
78404: PPUSH
78405: LD_VAR 0 2
78409: PPUSH
78410: CALL_OW 1
78414: ST_TO_ADDR
// end ;
78415: LD_VAR 0 3
78419: RET
// export function JoinUnion ( array , element ) ; begin
78420: LD_INT 0
78422: PPUSH
// result := array union element ;
78423: LD_ADDR_VAR 0 3
78427: PUSH
78428: LD_VAR 0 1
78432: PUSH
78433: LD_VAR 0 2
78437: UNION
78438: ST_TO_ADDR
// end ;
78439: LD_VAR 0 3
78443: RET
// export function GetBehemoths ( side ) ; begin
78444: LD_INT 0
78446: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78447: LD_ADDR_VAR 0 2
78451: PUSH
78452: LD_INT 22
78454: PUSH
78455: LD_VAR 0 1
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: PUSH
78464: LD_INT 31
78466: PUSH
78467: LD_INT 25
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PUSH
78474: EMPTY
78475: LIST
78476: LIST
78477: PPUSH
78478: CALL_OW 69
78482: ST_TO_ADDR
// end ;
78483: LD_VAR 0 2
78487: RET
// export function Shuffle ( array ) ; var i , index ; begin
78488: LD_INT 0
78490: PPUSH
78491: PPUSH
78492: PPUSH
// result := [ ] ;
78493: LD_ADDR_VAR 0 2
78497: PUSH
78498: EMPTY
78499: ST_TO_ADDR
// if not array then
78500: LD_VAR 0 1
78504: NOT
78505: IFFALSE 78509
// exit ;
78507: GO 78608
// Randomize ;
78509: CALL_OW 10
// for i = array downto 1 do
78513: LD_ADDR_VAR 0 3
78517: PUSH
78518: DOUBLE
78519: LD_VAR 0 1
78523: INC
78524: ST_TO_ADDR
78525: LD_INT 1
78527: PUSH
78528: FOR_DOWNTO
78529: IFFALSE 78606
// begin index := rand ( 1 , array ) ;
78531: LD_ADDR_VAR 0 4
78535: PUSH
78536: LD_INT 1
78538: PPUSH
78539: LD_VAR 0 1
78543: PPUSH
78544: CALL_OW 12
78548: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78549: LD_ADDR_VAR 0 2
78553: PUSH
78554: LD_VAR 0 2
78558: PPUSH
78559: LD_VAR 0 2
78563: PUSH
78564: LD_INT 1
78566: PLUS
78567: PPUSH
78568: LD_VAR 0 1
78572: PUSH
78573: LD_VAR 0 4
78577: ARRAY
78578: PPUSH
78579: CALL_OW 2
78583: ST_TO_ADDR
// array := Delete ( array , index ) ;
78584: LD_ADDR_VAR 0 1
78588: PUSH
78589: LD_VAR 0 1
78593: PPUSH
78594: LD_VAR 0 4
78598: PPUSH
78599: CALL_OW 3
78603: ST_TO_ADDR
// end ;
78604: GO 78528
78606: POP
78607: POP
// end ;
78608: LD_VAR 0 2
78612: RET
// export function GetBaseMaterials ( base ) ; begin
78613: LD_INT 0
78615: PPUSH
// result := [ 0 , 0 , 0 ] ;
78616: LD_ADDR_VAR 0 2
78620: PUSH
78621: LD_INT 0
78623: PUSH
78624: LD_INT 0
78626: PUSH
78627: LD_INT 0
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: LIST
78634: ST_TO_ADDR
// if not base then
78635: LD_VAR 0 1
78639: NOT
78640: IFFALSE 78644
// exit ;
78642: GO 78693
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78644: LD_ADDR_VAR 0 2
78648: PUSH
78649: LD_VAR 0 1
78653: PPUSH
78654: LD_INT 1
78656: PPUSH
78657: CALL_OW 275
78661: PUSH
78662: LD_VAR 0 1
78666: PPUSH
78667: LD_INT 2
78669: PPUSH
78670: CALL_OW 275
78674: PUSH
78675: LD_VAR 0 1
78679: PPUSH
78680: LD_INT 3
78682: PPUSH
78683: CALL_OW 275
78687: PUSH
78688: EMPTY
78689: LIST
78690: LIST
78691: LIST
78692: ST_TO_ADDR
// end ;
78693: LD_VAR 0 2
78697: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78698: LD_INT 0
78700: PPUSH
78701: PPUSH
// result := array ;
78702: LD_ADDR_VAR 0 3
78706: PUSH
78707: LD_VAR 0 1
78711: ST_TO_ADDR
// if size >= result then
78712: LD_VAR 0 2
78716: PUSH
78717: LD_VAR 0 3
78721: GREATEREQUAL
78722: IFFALSE 78726
// exit ;
78724: GO 78776
// if size then
78726: LD_VAR 0 2
78730: IFFALSE 78776
// for i := array downto size do
78732: LD_ADDR_VAR 0 4
78736: PUSH
78737: DOUBLE
78738: LD_VAR 0 1
78742: INC
78743: ST_TO_ADDR
78744: LD_VAR 0 2
78748: PUSH
78749: FOR_DOWNTO
78750: IFFALSE 78774
// result := Delete ( result , result ) ;
78752: LD_ADDR_VAR 0 3
78756: PUSH
78757: LD_VAR 0 3
78761: PPUSH
78762: LD_VAR 0 3
78766: PPUSH
78767: CALL_OW 3
78771: ST_TO_ADDR
78772: GO 78749
78774: POP
78775: POP
// end ;
78776: LD_VAR 0 3
78780: RET
// export function ComExit ( unit ) ; var tmp ; begin
78781: LD_INT 0
78783: PPUSH
78784: PPUSH
// if not IsInUnit ( unit ) then
78785: LD_VAR 0 1
78789: PPUSH
78790: CALL_OW 310
78794: NOT
78795: IFFALSE 78799
// exit ;
78797: GO 78859
// tmp := IsInUnit ( unit ) ;
78799: LD_ADDR_VAR 0 3
78803: PUSH
78804: LD_VAR 0 1
78808: PPUSH
78809: CALL_OW 310
78813: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78814: LD_VAR 0 3
78818: PPUSH
78819: CALL_OW 247
78823: PUSH
78824: LD_INT 2
78826: EQUAL
78827: IFFALSE 78840
// ComExitVehicle ( unit ) else
78829: LD_VAR 0 1
78833: PPUSH
78834: CALL_OW 121
78838: GO 78849
// ComExitBuilding ( unit ) ;
78840: LD_VAR 0 1
78844: PPUSH
78845: CALL_OW 122
// result := tmp ;
78849: LD_ADDR_VAR 0 2
78853: PUSH
78854: LD_VAR 0 3
78858: ST_TO_ADDR
// end ;
78859: LD_VAR 0 2
78863: RET
// export function ComExitAll ( units ) ; var i ; begin
78864: LD_INT 0
78866: PPUSH
78867: PPUSH
// if not units then
78868: LD_VAR 0 1
78872: NOT
78873: IFFALSE 78877
// exit ;
78875: GO 78903
// for i in units do
78877: LD_ADDR_VAR 0 3
78881: PUSH
78882: LD_VAR 0 1
78886: PUSH
78887: FOR_IN
78888: IFFALSE 78901
// ComExit ( i ) ;
78890: LD_VAR 0 3
78894: PPUSH
78895: CALL 78781 0 1
78899: GO 78887
78901: POP
78902: POP
// end ;
78903: LD_VAR 0 2
78907: RET
// export function ResetHc ; begin
78908: LD_INT 0
78910: PPUSH
// InitHc ;
78911: CALL_OW 19
// hc_importance := 0 ;
78915: LD_ADDR_OWVAR 32
78919: PUSH
78920: LD_INT 0
78922: ST_TO_ADDR
// end ;
78923: LD_VAR 0 1
78927: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78928: LD_INT 0
78930: PPUSH
78931: PPUSH
78932: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78933: LD_ADDR_VAR 0 6
78937: PUSH
78938: LD_VAR 0 1
78942: PUSH
78943: LD_VAR 0 3
78947: PLUS
78948: PUSH
78949: LD_INT 2
78951: DIV
78952: ST_TO_ADDR
// if _x < 0 then
78953: LD_VAR 0 6
78957: PUSH
78958: LD_INT 0
78960: LESS
78961: IFFALSE 78978
// _x := _x * - 1 ;
78963: LD_ADDR_VAR 0 6
78967: PUSH
78968: LD_VAR 0 6
78972: PUSH
78973: LD_INT 1
78975: NEG
78976: MUL
78977: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78978: LD_ADDR_VAR 0 7
78982: PUSH
78983: LD_VAR 0 2
78987: PUSH
78988: LD_VAR 0 4
78992: PLUS
78993: PUSH
78994: LD_INT 2
78996: DIV
78997: ST_TO_ADDR
// if _y < 0 then
78998: LD_VAR 0 7
79002: PUSH
79003: LD_INT 0
79005: LESS
79006: IFFALSE 79023
// _y := _y * - 1 ;
79008: LD_ADDR_VAR 0 7
79012: PUSH
79013: LD_VAR 0 7
79017: PUSH
79018: LD_INT 1
79020: NEG
79021: MUL
79022: ST_TO_ADDR
// result := [ _x , _y ] ;
79023: LD_ADDR_VAR 0 5
79027: PUSH
79028: LD_VAR 0 6
79032: PUSH
79033: LD_VAR 0 7
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: ST_TO_ADDR
// end ;
79042: LD_VAR 0 5
79046: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79047: LD_INT 0
79049: PPUSH
79050: PPUSH
79051: PPUSH
79052: PPUSH
// task := GetTaskList ( unit ) ;
79053: LD_ADDR_VAR 0 7
79057: PUSH
79058: LD_VAR 0 1
79062: PPUSH
79063: CALL_OW 437
79067: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79068: LD_VAR 0 7
79072: NOT
79073: PUSH
79074: LD_VAR 0 1
79078: PPUSH
79079: LD_VAR 0 2
79083: PPUSH
79084: CALL_OW 308
79088: NOT
79089: AND
79090: IFFALSE 79094
// exit ;
79092: GO 79212
// if IsInArea ( unit , area ) then
79094: LD_VAR 0 1
79098: PPUSH
79099: LD_VAR 0 2
79103: PPUSH
79104: CALL_OW 308
79108: IFFALSE 79126
// begin ComMoveToArea ( unit , goAway ) ;
79110: LD_VAR 0 1
79114: PPUSH
79115: LD_VAR 0 3
79119: PPUSH
79120: CALL_OW 113
// exit ;
79124: GO 79212
// end ; if task [ 1 ] [ 1 ] <> M then
79126: LD_VAR 0 7
79130: PUSH
79131: LD_INT 1
79133: ARRAY
79134: PUSH
79135: LD_INT 1
79137: ARRAY
79138: PUSH
79139: LD_STRING M
79141: NONEQUAL
79142: IFFALSE 79146
// exit ;
79144: GO 79212
// x := task [ 1 ] [ 2 ] ;
79146: LD_ADDR_VAR 0 5
79150: PUSH
79151: LD_VAR 0 7
79155: PUSH
79156: LD_INT 1
79158: ARRAY
79159: PUSH
79160: LD_INT 2
79162: ARRAY
79163: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79164: LD_ADDR_VAR 0 6
79168: PUSH
79169: LD_VAR 0 7
79173: PUSH
79174: LD_INT 1
79176: ARRAY
79177: PUSH
79178: LD_INT 3
79180: ARRAY
79181: ST_TO_ADDR
// if InArea ( x , y , area ) then
79182: LD_VAR 0 5
79186: PPUSH
79187: LD_VAR 0 6
79191: PPUSH
79192: LD_VAR 0 2
79196: PPUSH
79197: CALL_OW 309
79201: IFFALSE 79212
// ComStop ( unit ) ;
79203: LD_VAR 0 1
79207: PPUSH
79208: CALL_OW 141
// end ;
79212: LD_VAR 0 4
79216: RET
// export function Abs ( value ) ; begin
79217: LD_INT 0
79219: PPUSH
// result := value ;
79220: LD_ADDR_VAR 0 2
79224: PUSH
79225: LD_VAR 0 1
79229: ST_TO_ADDR
// if value < 0 then
79230: LD_VAR 0 1
79234: PUSH
79235: LD_INT 0
79237: LESS
79238: IFFALSE 79255
// result := value * - 1 ;
79240: LD_ADDR_VAR 0 2
79244: PUSH
79245: LD_VAR 0 1
79249: PUSH
79250: LD_INT 1
79252: NEG
79253: MUL
79254: ST_TO_ADDR
// end ;
79255: LD_VAR 0 2
79259: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79260: LD_INT 0
79262: PPUSH
79263: PPUSH
79264: PPUSH
79265: PPUSH
79266: PPUSH
79267: PPUSH
79268: PPUSH
79269: PPUSH
// if not unit or not building then
79270: LD_VAR 0 1
79274: NOT
79275: PUSH
79276: LD_VAR 0 2
79280: NOT
79281: OR
79282: IFFALSE 79286
// exit ;
79284: GO 79512
// x := GetX ( building ) ;
79286: LD_ADDR_VAR 0 4
79290: PUSH
79291: LD_VAR 0 2
79295: PPUSH
79296: CALL_OW 250
79300: ST_TO_ADDR
// y := GetY ( building ) ;
79301: LD_ADDR_VAR 0 6
79305: PUSH
79306: LD_VAR 0 2
79310: PPUSH
79311: CALL_OW 251
79315: ST_TO_ADDR
// d := GetDir ( building ) ;
79316: LD_ADDR_VAR 0 8
79320: PUSH
79321: LD_VAR 0 2
79325: PPUSH
79326: CALL_OW 254
79330: ST_TO_ADDR
// r := 4 ;
79331: LD_ADDR_VAR 0 9
79335: PUSH
79336: LD_INT 4
79338: ST_TO_ADDR
// for i := 1 to 5 do
79339: LD_ADDR_VAR 0 10
79343: PUSH
79344: DOUBLE
79345: LD_INT 1
79347: DEC
79348: ST_TO_ADDR
79349: LD_INT 5
79351: PUSH
79352: FOR_TO
79353: IFFALSE 79510
// begin _x := ShiftX ( x , d , r + i ) ;
79355: LD_ADDR_VAR 0 5
79359: PUSH
79360: LD_VAR 0 4
79364: PPUSH
79365: LD_VAR 0 8
79369: PPUSH
79370: LD_VAR 0 9
79374: PUSH
79375: LD_VAR 0 10
79379: PLUS
79380: PPUSH
79381: CALL_OW 272
79385: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79386: LD_ADDR_VAR 0 7
79390: PUSH
79391: LD_VAR 0 6
79395: PPUSH
79396: LD_VAR 0 8
79400: PPUSH
79401: LD_VAR 0 9
79405: PUSH
79406: LD_VAR 0 10
79410: PLUS
79411: PPUSH
79412: CALL_OW 273
79416: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79417: LD_VAR 0 5
79421: PPUSH
79422: LD_VAR 0 7
79426: PPUSH
79427: CALL_OW 488
79431: PUSH
79432: LD_VAR 0 5
79436: PPUSH
79437: LD_VAR 0 7
79441: PPUSH
79442: CALL_OW 428
79446: PPUSH
79447: CALL_OW 247
79451: PUSH
79452: LD_INT 3
79454: PUSH
79455: LD_INT 2
79457: PUSH
79458: EMPTY
79459: LIST
79460: LIST
79461: IN
79462: NOT
79463: AND
79464: IFFALSE 79508
// begin ComMoveXY ( unit , _x , _y ) ;
79466: LD_VAR 0 1
79470: PPUSH
79471: LD_VAR 0 5
79475: PPUSH
79476: LD_VAR 0 7
79480: PPUSH
79481: CALL_OW 111
// result := [ _x , _y ] ;
79485: LD_ADDR_VAR 0 3
79489: PUSH
79490: LD_VAR 0 5
79494: PUSH
79495: LD_VAR 0 7
79499: PUSH
79500: EMPTY
79501: LIST
79502: LIST
79503: ST_TO_ADDR
// exit ;
79504: POP
79505: POP
79506: GO 79512
// end ; end ;
79508: GO 79352
79510: POP
79511: POP
// end ;
79512: LD_VAR 0 3
79516: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79517: LD_INT 0
79519: PPUSH
79520: PPUSH
79521: PPUSH
// result := 0 ;
79522: LD_ADDR_VAR 0 3
79526: PUSH
79527: LD_INT 0
79529: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79530: LD_VAR 0 1
79534: PUSH
79535: LD_INT 0
79537: LESS
79538: PUSH
79539: LD_VAR 0 1
79543: PUSH
79544: LD_INT 8
79546: GREATER
79547: OR
79548: PUSH
79549: LD_VAR 0 2
79553: PUSH
79554: LD_INT 0
79556: LESS
79557: OR
79558: PUSH
79559: LD_VAR 0 2
79563: PUSH
79564: LD_INT 8
79566: GREATER
79567: OR
79568: IFFALSE 79572
// exit ;
79570: GO 79647
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79572: LD_ADDR_VAR 0 4
79576: PUSH
79577: LD_INT 22
79579: PUSH
79580: LD_VAR 0 2
79584: PUSH
79585: EMPTY
79586: LIST
79587: LIST
79588: PPUSH
79589: CALL_OW 69
79593: PUSH
79594: FOR_IN
79595: IFFALSE 79645
// begin un := UnitShoot ( i ) ;
79597: LD_ADDR_VAR 0 5
79601: PUSH
79602: LD_VAR 0 4
79606: PPUSH
79607: CALL_OW 504
79611: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79612: LD_VAR 0 5
79616: PPUSH
79617: CALL_OW 255
79621: PUSH
79622: LD_VAR 0 1
79626: EQUAL
79627: IFFALSE 79643
// begin result := un ;
79629: LD_ADDR_VAR 0 3
79633: PUSH
79634: LD_VAR 0 5
79638: ST_TO_ADDR
// exit ;
79639: POP
79640: POP
79641: GO 79647
// end ; end ;
79643: GO 79594
79645: POP
79646: POP
// end ;
79647: LD_VAR 0 3
79651: RET
// export function GetCargoBay ( units ) ; begin
79652: LD_INT 0
79654: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79655: LD_ADDR_VAR 0 2
79659: PUSH
79660: LD_VAR 0 1
79664: PPUSH
79665: LD_INT 2
79667: PUSH
79668: LD_INT 34
79670: PUSH
79671: LD_INT 12
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: PUSH
79678: LD_INT 34
79680: PUSH
79681: LD_INT 51
79683: PUSH
79684: EMPTY
79685: LIST
79686: LIST
79687: PUSH
79688: LD_INT 34
79690: PUSH
79691: LD_INT 32
79693: PUSH
79694: EMPTY
79695: LIST
79696: LIST
79697: PUSH
79698: LD_INT 34
79700: PUSH
79701: LD_INT 89
79703: PUSH
79704: EMPTY
79705: LIST
79706: LIST
79707: PUSH
79708: EMPTY
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: LIST
79714: PPUSH
79715: CALL_OW 72
79719: ST_TO_ADDR
// end ;
79720: LD_VAR 0 2
79724: RET
// export function Negate ( value ) ; begin
79725: LD_INT 0
79727: PPUSH
// result := not value ;
79728: LD_ADDR_VAR 0 2
79732: PUSH
79733: LD_VAR 0 1
79737: NOT
79738: ST_TO_ADDR
// end ;
79739: LD_VAR 0 2
79743: RET
// export function Inc ( value ) ; begin
79744: LD_INT 0
79746: PPUSH
// result := value + 1 ;
79747: LD_ADDR_VAR 0 2
79751: PUSH
79752: LD_VAR 0 1
79756: PUSH
79757: LD_INT 1
79759: PLUS
79760: ST_TO_ADDR
// end ;
79761: LD_VAR 0 2
79765: RET
// export function Dec ( value ) ; begin
79766: LD_INT 0
79768: PPUSH
// result := value - 1 ;
79769: LD_ADDR_VAR 0 2
79773: PUSH
79774: LD_VAR 0 1
79778: PUSH
79779: LD_INT 1
79781: MINUS
79782: ST_TO_ADDR
// end ;
79783: LD_VAR 0 2
79787: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79788: LD_INT 0
79790: PPUSH
79791: PPUSH
79792: PPUSH
79793: PPUSH
79794: PPUSH
79795: PPUSH
79796: PPUSH
79797: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79798: LD_VAR 0 1
79802: PPUSH
79803: LD_VAR 0 2
79807: PPUSH
79808: CALL_OW 488
79812: NOT
79813: PUSH
79814: LD_VAR 0 3
79818: PPUSH
79819: LD_VAR 0 4
79823: PPUSH
79824: CALL_OW 488
79828: NOT
79829: OR
79830: IFFALSE 79843
// begin result := - 1 ;
79832: LD_ADDR_VAR 0 5
79836: PUSH
79837: LD_INT 1
79839: NEG
79840: ST_TO_ADDR
// exit ;
79841: GO 80078
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79843: LD_ADDR_VAR 0 12
79847: PUSH
79848: LD_VAR 0 1
79852: PPUSH
79853: LD_VAR 0 2
79857: PPUSH
79858: LD_VAR 0 3
79862: PPUSH
79863: LD_VAR 0 4
79867: PPUSH
79868: CALL 78928 0 4
79872: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79873: LD_ADDR_VAR 0 11
79877: PUSH
79878: LD_VAR 0 1
79882: PPUSH
79883: LD_VAR 0 2
79887: PPUSH
79888: LD_VAR 0 12
79892: PUSH
79893: LD_INT 1
79895: ARRAY
79896: PPUSH
79897: LD_VAR 0 12
79901: PUSH
79902: LD_INT 2
79904: ARRAY
79905: PPUSH
79906: CALL_OW 298
79910: ST_TO_ADDR
// distance := 9999 ;
79911: LD_ADDR_VAR 0 10
79915: PUSH
79916: LD_INT 9999
79918: ST_TO_ADDR
// for i := 0 to 5 do
79919: LD_ADDR_VAR 0 6
79923: PUSH
79924: DOUBLE
79925: LD_INT 0
79927: DEC
79928: ST_TO_ADDR
79929: LD_INT 5
79931: PUSH
79932: FOR_TO
79933: IFFALSE 80076
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79935: LD_ADDR_VAR 0 7
79939: PUSH
79940: LD_VAR 0 1
79944: PPUSH
79945: LD_VAR 0 6
79949: PPUSH
79950: LD_VAR 0 11
79954: PPUSH
79955: CALL_OW 272
79959: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79960: LD_ADDR_VAR 0 8
79964: PUSH
79965: LD_VAR 0 2
79969: PPUSH
79970: LD_VAR 0 6
79974: PPUSH
79975: LD_VAR 0 11
79979: PPUSH
79980: CALL_OW 273
79984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79985: LD_VAR 0 7
79989: PPUSH
79990: LD_VAR 0 8
79994: PPUSH
79995: CALL_OW 488
79999: NOT
80000: IFFALSE 80004
// continue ;
80002: GO 79932
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80004: LD_ADDR_VAR 0 9
80008: PUSH
80009: LD_VAR 0 12
80013: PUSH
80014: LD_INT 1
80016: ARRAY
80017: PPUSH
80018: LD_VAR 0 12
80022: PUSH
80023: LD_INT 2
80025: ARRAY
80026: PPUSH
80027: LD_VAR 0 7
80031: PPUSH
80032: LD_VAR 0 8
80036: PPUSH
80037: CALL_OW 298
80041: ST_TO_ADDR
// if tmp < distance then
80042: LD_VAR 0 9
80046: PUSH
80047: LD_VAR 0 10
80051: LESS
80052: IFFALSE 80074
// begin result := i ;
80054: LD_ADDR_VAR 0 5
80058: PUSH
80059: LD_VAR 0 6
80063: ST_TO_ADDR
// distance := tmp ;
80064: LD_ADDR_VAR 0 10
80068: PUSH
80069: LD_VAR 0 9
80073: ST_TO_ADDR
// end ; end ;
80074: GO 79932
80076: POP
80077: POP
// end ;
80078: LD_VAR 0 5
80082: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80083: LD_INT 0
80085: PPUSH
80086: PPUSH
// if not driver or not IsInUnit ( driver ) then
80087: LD_VAR 0 1
80091: NOT
80092: PUSH
80093: LD_VAR 0 1
80097: PPUSH
80098: CALL_OW 310
80102: NOT
80103: OR
80104: IFFALSE 80108
// exit ;
80106: GO 80198
// vehicle := IsInUnit ( driver ) ;
80108: LD_ADDR_VAR 0 3
80112: PUSH
80113: LD_VAR 0 1
80117: PPUSH
80118: CALL_OW 310
80122: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80123: LD_VAR 0 1
80127: PPUSH
80128: LD_STRING \
80130: PUSH
80131: LD_INT 0
80133: PUSH
80134: LD_INT 0
80136: PUSH
80137: LD_INT 0
80139: PUSH
80140: LD_INT 0
80142: PUSH
80143: LD_INT 0
80145: PUSH
80146: LD_INT 0
80148: PUSH
80149: EMPTY
80150: LIST
80151: LIST
80152: LIST
80153: LIST
80154: LIST
80155: LIST
80156: LIST
80157: PUSH
80158: LD_STRING E
80160: PUSH
80161: LD_INT 0
80163: PUSH
80164: LD_INT 0
80166: PUSH
80167: LD_VAR 0 3
80171: PUSH
80172: LD_INT 0
80174: PUSH
80175: LD_INT 0
80177: PUSH
80178: LD_INT 0
80180: PUSH
80181: EMPTY
80182: LIST
80183: LIST
80184: LIST
80185: LIST
80186: LIST
80187: LIST
80188: LIST
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: PPUSH
80194: CALL_OW 446
// end ;
80198: LD_VAR 0 2
80202: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80203: LD_INT 0
80205: PPUSH
80206: PPUSH
// if not driver or not IsInUnit ( driver ) then
80207: LD_VAR 0 1
80211: NOT
80212: PUSH
80213: LD_VAR 0 1
80217: PPUSH
80218: CALL_OW 310
80222: NOT
80223: OR
80224: IFFALSE 80228
// exit ;
80226: GO 80318
// vehicle := IsInUnit ( driver ) ;
80228: LD_ADDR_VAR 0 3
80232: PUSH
80233: LD_VAR 0 1
80237: PPUSH
80238: CALL_OW 310
80242: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80243: LD_VAR 0 1
80247: PPUSH
80248: LD_STRING \
80250: PUSH
80251: LD_INT 0
80253: PUSH
80254: LD_INT 0
80256: PUSH
80257: LD_INT 0
80259: PUSH
80260: LD_INT 0
80262: PUSH
80263: LD_INT 0
80265: PUSH
80266: LD_INT 0
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: LIST
80277: PUSH
80278: LD_STRING E
80280: PUSH
80281: LD_INT 0
80283: PUSH
80284: LD_INT 0
80286: PUSH
80287: LD_VAR 0 3
80291: PUSH
80292: LD_INT 0
80294: PUSH
80295: LD_INT 0
80297: PUSH
80298: LD_INT 0
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: LIST
80305: LIST
80306: LIST
80307: LIST
80308: LIST
80309: PUSH
80310: EMPTY
80311: LIST
80312: LIST
80313: PPUSH
80314: CALL_OW 447
// end ;
80318: LD_VAR 0 2
80322: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80323: LD_INT 0
80325: PPUSH
80326: PPUSH
80327: PPUSH
// tmp := [ ] ;
80328: LD_ADDR_VAR 0 5
80332: PUSH
80333: EMPTY
80334: ST_TO_ADDR
// for i in units do
80335: LD_ADDR_VAR 0 4
80339: PUSH
80340: LD_VAR 0 1
80344: PUSH
80345: FOR_IN
80346: IFFALSE 80384
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80348: LD_ADDR_VAR 0 5
80352: PUSH
80353: LD_VAR 0 5
80357: PPUSH
80358: LD_VAR 0 5
80362: PUSH
80363: LD_INT 1
80365: PLUS
80366: PPUSH
80367: LD_VAR 0 4
80371: PPUSH
80372: CALL_OW 256
80376: PPUSH
80377: CALL_OW 2
80381: ST_TO_ADDR
80382: GO 80345
80384: POP
80385: POP
// if not tmp then
80386: LD_VAR 0 5
80390: NOT
80391: IFFALSE 80395
// exit ;
80393: GO 80443
// if asc then
80395: LD_VAR 0 2
80399: IFFALSE 80423
// result := SortListByListAsc ( units , tmp ) else
80401: LD_ADDR_VAR 0 3
80405: PUSH
80406: LD_VAR 0 1
80410: PPUSH
80411: LD_VAR 0 5
80415: PPUSH
80416: CALL_OW 76
80420: ST_TO_ADDR
80421: GO 80443
// result := SortListByListDesc ( units , tmp ) ;
80423: LD_ADDR_VAR 0 3
80427: PUSH
80428: LD_VAR 0 1
80432: PPUSH
80433: LD_VAR 0 5
80437: PPUSH
80438: CALL_OW 77
80442: ST_TO_ADDR
// end ;
80443: LD_VAR 0 3
80447: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80448: LD_INT 0
80450: PPUSH
80451: PPUSH
// task := GetTaskList ( mech ) ;
80452: LD_ADDR_VAR 0 4
80456: PUSH
80457: LD_VAR 0 1
80461: PPUSH
80462: CALL_OW 437
80466: ST_TO_ADDR
// if not task then
80467: LD_VAR 0 4
80471: NOT
80472: IFFALSE 80476
// exit ;
80474: GO 80518
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80476: LD_ADDR_VAR 0 3
80480: PUSH
80481: LD_VAR 0 4
80485: PUSH
80486: LD_INT 1
80488: ARRAY
80489: PUSH
80490: LD_INT 1
80492: ARRAY
80493: PUSH
80494: LD_STRING r
80496: EQUAL
80497: PUSH
80498: LD_VAR 0 4
80502: PUSH
80503: LD_INT 1
80505: ARRAY
80506: PUSH
80507: LD_INT 4
80509: ARRAY
80510: PUSH
80511: LD_VAR 0 2
80515: EQUAL
80516: AND
80517: ST_TO_ADDR
// end ;
80518: LD_VAR 0 3
80522: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80523: LD_INT 0
80525: PPUSH
// SetDir ( unit , d ) ;
80526: LD_VAR 0 1
80530: PPUSH
80531: LD_VAR 0 4
80535: PPUSH
80536: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80540: LD_VAR 0 1
80544: PPUSH
80545: LD_VAR 0 2
80549: PPUSH
80550: LD_VAR 0 3
80554: PPUSH
80555: LD_VAR 0 5
80559: PPUSH
80560: CALL_OW 48
// end ;
80564: LD_VAR 0 6
80568: RET
// export function ToNaturalNumber ( number ) ; begin
80569: LD_INT 0
80571: PPUSH
// result := number div 1 ;
80572: LD_ADDR_VAR 0 2
80576: PUSH
80577: LD_VAR 0 1
80581: PUSH
80582: LD_INT 1
80584: DIV
80585: ST_TO_ADDR
// if number < 0 then
80586: LD_VAR 0 1
80590: PUSH
80591: LD_INT 0
80593: LESS
80594: IFFALSE 80604
// result := 0 ;
80596: LD_ADDR_VAR 0 2
80600: PUSH
80601: LD_INT 0
80603: ST_TO_ADDR
// end ;
80604: LD_VAR 0 2
80608: RET
// export function SortByClass ( units , class ) ; var un ; begin
80609: LD_INT 0
80611: PPUSH
80612: PPUSH
// if not units or not class then
80613: LD_VAR 0 1
80617: NOT
80618: PUSH
80619: LD_VAR 0 2
80623: NOT
80624: OR
80625: IFFALSE 80629
// exit ;
80627: GO 80724
// result := [ ] ;
80629: LD_ADDR_VAR 0 3
80633: PUSH
80634: EMPTY
80635: ST_TO_ADDR
// for un in units do
80636: LD_ADDR_VAR 0 4
80640: PUSH
80641: LD_VAR 0 1
80645: PUSH
80646: FOR_IN
80647: IFFALSE 80722
// if GetClass ( un ) = class then
80649: LD_VAR 0 4
80653: PPUSH
80654: CALL_OW 257
80658: PUSH
80659: LD_VAR 0 2
80663: EQUAL
80664: IFFALSE 80691
// result := Insert ( result , 1 , un ) else
80666: LD_ADDR_VAR 0 3
80670: PUSH
80671: LD_VAR 0 3
80675: PPUSH
80676: LD_INT 1
80678: PPUSH
80679: LD_VAR 0 4
80683: PPUSH
80684: CALL_OW 2
80688: ST_TO_ADDR
80689: GO 80720
// result := Replace ( result , result + 1 , un ) ;
80691: LD_ADDR_VAR 0 3
80695: PUSH
80696: LD_VAR 0 3
80700: PPUSH
80701: LD_VAR 0 3
80705: PUSH
80706: LD_INT 1
80708: PLUS
80709: PPUSH
80710: LD_VAR 0 4
80714: PPUSH
80715: CALL_OW 1
80719: ST_TO_ADDR
80720: GO 80646
80722: POP
80723: POP
// end ;
80724: LD_VAR 0 3
80728: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80729: LD_INT 0
80731: PPUSH
80732: PPUSH
80733: PPUSH
80734: PPUSH
80735: PPUSH
80736: PPUSH
80737: PPUSH
// result := [ ] ;
80738: LD_ADDR_VAR 0 4
80742: PUSH
80743: EMPTY
80744: ST_TO_ADDR
// if x - r < 0 then
80745: LD_VAR 0 1
80749: PUSH
80750: LD_VAR 0 3
80754: MINUS
80755: PUSH
80756: LD_INT 0
80758: LESS
80759: IFFALSE 80771
// min_x := 0 else
80761: LD_ADDR_VAR 0 8
80765: PUSH
80766: LD_INT 0
80768: ST_TO_ADDR
80769: GO 80787
// min_x := x - r ;
80771: LD_ADDR_VAR 0 8
80775: PUSH
80776: LD_VAR 0 1
80780: PUSH
80781: LD_VAR 0 3
80785: MINUS
80786: ST_TO_ADDR
// if y - r < 0 then
80787: LD_VAR 0 2
80791: PUSH
80792: LD_VAR 0 3
80796: MINUS
80797: PUSH
80798: LD_INT 0
80800: LESS
80801: IFFALSE 80813
// min_y := 0 else
80803: LD_ADDR_VAR 0 7
80807: PUSH
80808: LD_INT 0
80810: ST_TO_ADDR
80811: GO 80829
// min_y := y - r ;
80813: LD_ADDR_VAR 0 7
80817: PUSH
80818: LD_VAR 0 2
80822: PUSH
80823: LD_VAR 0 3
80827: MINUS
80828: ST_TO_ADDR
// max_x := x + r ;
80829: LD_ADDR_VAR 0 9
80833: PUSH
80834: LD_VAR 0 1
80838: PUSH
80839: LD_VAR 0 3
80843: PLUS
80844: ST_TO_ADDR
// max_y := y + r ;
80845: LD_ADDR_VAR 0 10
80849: PUSH
80850: LD_VAR 0 2
80854: PUSH
80855: LD_VAR 0 3
80859: PLUS
80860: ST_TO_ADDR
// for _x = min_x to max_x do
80861: LD_ADDR_VAR 0 5
80865: PUSH
80866: DOUBLE
80867: LD_VAR 0 8
80871: DEC
80872: ST_TO_ADDR
80873: LD_VAR 0 9
80877: PUSH
80878: FOR_TO
80879: IFFALSE 80980
// for _y = min_y to max_y do
80881: LD_ADDR_VAR 0 6
80885: PUSH
80886: DOUBLE
80887: LD_VAR 0 7
80891: DEC
80892: ST_TO_ADDR
80893: LD_VAR 0 10
80897: PUSH
80898: FOR_TO
80899: IFFALSE 80976
// begin if not ValidHex ( _x , _y ) then
80901: LD_VAR 0 5
80905: PPUSH
80906: LD_VAR 0 6
80910: PPUSH
80911: CALL_OW 488
80915: NOT
80916: IFFALSE 80920
// continue ;
80918: GO 80898
// if GetResourceTypeXY ( _x , _y ) then
80920: LD_VAR 0 5
80924: PPUSH
80925: LD_VAR 0 6
80929: PPUSH
80930: CALL_OW 283
80934: IFFALSE 80974
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80936: LD_ADDR_VAR 0 4
80940: PUSH
80941: LD_VAR 0 4
80945: PPUSH
80946: LD_VAR 0 4
80950: PUSH
80951: LD_INT 1
80953: PLUS
80954: PPUSH
80955: LD_VAR 0 5
80959: PUSH
80960: LD_VAR 0 6
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: PPUSH
80969: CALL_OW 1
80973: ST_TO_ADDR
// end ;
80974: GO 80898
80976: POP
80977: POP
80978: GO 80878
80980: POP
80981: POP
// end ;
80982: LD_VAR 0 4
80986: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80987: LD_INT 0
80989: PPUSH
80990: PPUSH
80991: PPUSH
80992: PPUSH
80993: PPUSH
80994: PPUSH
80995: PPUSH
80996: PPUSH
// if not units then
80997: LD_VAR 0 1
81001: NOT
81002: IFFALSE 81006
// exit ;
81004: GO 81530
// result := UnitFilter ( units , [ f_ok ] ) ;
81006: LD_ADDR_VAR 0 3
81010: PUSH
81011: LD_VAR 0 1
81015: PPUSH
81016: LD_INT 50
81018: PUSH
81019: EMPTY
81020: LIST
81021: PPUSH
81022: CALL_OW 72
81026: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81027: LD_ADDR_VAR 0 8
81031: PUSH
81032: LD_VAR 0 1
81036: PUSH
81037: LD_INT 1
81039: ARRAY
81040: PPUSH
81041: CALL_OW 255
81045: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81046: LD_ADDR_VAR 0 10
81050: PUSH
81051: LD_INT 29
81053: PUSH
81054: LD_INT 91
81056: PUSH
81057: LD_INT 49
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: LIST
81064: ST_TO_ADDR
// if not result then
81065: LD_VAR 0 3
81069: NOT
81070: IFFALSE 81074
// exit ;
81072: GO 81530
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81074: LD_ADDR_VAR 0 5
81078: PUSH
81079: LD_INT 81
81081: PUSH
81082: LD_VAR 0 8
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: PPUSH
81091: CALL_OW 69
81095: ST_TO_ADDR
// for i in result do
81096: LD_ADDR_VAR 0 4
81100: PUSH
81101: LD_VAR 0 3
81105: PUSH
81106: FOR_IN
81107: IFFALSE 81528
// begin tag := GetTag ( i ) + 1 ;
81109: LD_ADDR_VAR 0 9
81113: PUSH
81114: LD_VAR 0 4
81118: PPUSH
81119: CALL_OW 110
81123: PUSH
81124: LD_INT 1
81126: PLUS
81127: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81128: LD_ADDR_VAR 0 7
81132: PUSH
81133: LD_VAR 0 4
81137: PPUSH
81138: CALL_OW 250
81142: PPUSH
81143: LD_VAR 0 4
81147: PPUSH
81148: CALL_OW 251
81152: PPUSH
81153: LD_INT 6
81155: PPUSH
81156: CALL 80729 0 3
81160: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81161: LD_VAR 0 4
81165: PPUSH
81166: CALL_OW 247
81170: PUSH
81171: LD_INT 2
81173: EQUAL
81174: PUSH
81175: LD_VAR 0 7
81179: AND
81180: PUSH
81181: LD_VAR 0 4
81185: PPUSH
81186: CALL_OW 264
81190: PUSH
81191: LD_VAR 0 10
81195: IN
81196: NOT
81197: AND
81198: IFFALSE 81237
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81200: LD_VAR 0 4
81204: PPUSH
81205: LD_VAR 0 7
81209: PUSH
81210: LD_INT 1
81212: ARRAY
81213: PUSH
81214: LD_INT 1
81216: ARRAY
81217: PPUSH
81218: LD_VAR 0 7
81222: PUSH
81223: LD_INT 1
81225: ARRAY
81226: PUSH
81227: LD_INT 2
81229: ARRAY
81230: PPUSH
81231: CALL_OW 116
81235: GO 81526
// if path > tag then
81237: LD_VAR 0 2
81241: PUSH
81242: LD_VAR 0 9
81246: GREATER
81247: IFFALSE 81455
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81249: LD_ADDR_VAR 0 6
81253: PUSH
81254: LD_VAR 0 5
81258: PPUSH
81259: LD_INT 91
81261: PUSH
81262: LD_VAR 0 4
81266: PUSH
81267: LD_INT 8
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: LIST
81274: PPUSH
81275: CALL_OW 72
81279: ST_TO_ADDR
// if nearEnemy then
81280: LD_VAR 0 6
81284: IFFALSE 81353
// begin if GetWeapon ( i ) = ru_time_lapser then
81286: LD_VAR 0 4
81290: PPUSH
81291: CALL_OW 264
81295: PUSH
81296: LD_INT 49
81298: EQUAL
81299: IFFALSE 81327
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81301: LD_VAR 0 4
81305: PPUSH
81306: LD_VAR 0 6
81310: PPUSH
81311: LD_VAR 0 4
81315: PPUSH
81316: CALL_OW 74
81320: PPUSH
81321: CALL_OW 112
81325: GO 81351
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81327: LD_VAR 0 4
81331: PPUSH
81332: LD_VAR 0 6
81336: PPUSH
81337: LD_VAR 0 4
81341: PPUSH
81342: CALL_OW 74
81346: PPUSH
81347: CALL_OW 115
// end else
81351: GO 81453
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81353: LD_VAR 0 4
81357: PPUSH
81358: LD_VAR 0 2
81362: PUSH
81363: LD_VAR 0 9
81367: ARRAY
81368: PUSH
81369: LD_INT 1
81371: ARRAY
81372: PPUSH
81373: LD_VAR 0 2
81377: PUSH
81378: LD_VAR 0 9
81382: ARRAY
81383: PUSH
81384: LD_INT 2
81386: ARRAY
81387: PPUSH
81388: CALL_OW 297
81392: PUSH
81393: LD_INT 6
81395: GREATER
81396: IFFALSE 81439
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81398: LD_VAR 0 4
81402: PPUSH
81403: LD_VAR 0 2
81407: PUSH
81408: LD_VAR 0 9
81412: ARRAY
81413: PUSH
81414: LD_INT 1
81416: ARRAY
81417: PPUSH
81418: LD_VAR 0 2
81422: PUSH
81423: LD_VAR 0 9
81427: ARRAY
81428: PUSH
81429: LD_INT 2
81431: ARRAY
81432: PPUSH
81433: CALL_OW 114
81437: GO 81453
// SetTag ( i , tag ) ;
81439: LD_VAR 0 4
81443: PPUSH
81444: LD_VAR 0 9
81448: PPUSH
81449: CALL_OW 109
// end else
81453: GO 81526
// if enemy then
81455: LD_VAR 0 5
81459: IFFALSE 81526
// begin if GetWeapon ( i ) = ru_time_lapser then
81461: LD_VAR 0 4
81465: PPUSH
81466: CALL_OW 264
81470: PUSH
81471: LD_INT 49
81473: EQUAL
81474: IFFALSE 81502
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81476: LD_VAR 0 4
81480: PPUSH
81481: LD_VAR 0 5
81485: PPUSH
81486: LD_VAR 0 4
81490: PPUSH
81491: CALL_OW 74
81495: PPUSH
81496: CALL_OW 112
81500: GO 81526
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81502: LD_VAR 0 4
81506: PPUSH
81507: LD_VAR 0 5
81511: PPUSH
81512: LD_VAR 0 4
81516: PPUSH
81517: CALL_OW 74
81521: PPUSH
81522: CALL_OW 115
// end ; end ;
81526: GO 81106
81528: POP
81529: POP
// end ;
81530: LD_VAR 0 3
81534: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81535: LD_INT 0
81537: PPUSH
81538: PPUSH
81539: PPUSH
// if not unit or IsInUnit ( unit ) then
81540: LD_VAR 0 1
81544: NOT
81545: PUSH
81546: LD_VAR 0 1
81550: PPUSH
81551: CALL_OW 310
81555: OR
81556: IFFALSE 81560
// exit ;
81558: GO 81651
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81560: LD_ADDR_VAR 0 4
81564: PUSH
81565: LD_VAR 0 1
81569: PPUSH
81570: CALL_OW 250
81574: PPUSH
81575: LD_VAR 0 2
81579: PPUSH
81580: LD_INT 1
81582: PPUSH
81583: CALL_OW 272
81587: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81588: LD_ADDR_VAR 0 5
81592: PUSH
81593: LD_VAR 0 1
81597: PPUSH
81598: CALL_OW 251
81602: PPUSH
81603: LD_VAR 0 2
81607: PPUSH
81608: LD_INT 1
81610: PPUSH
81611: CALL_OW 273
81615: ST_TO_ADDR
// if ValidHex ( x , y ) then
81616: LD_VAR 0 4
81620: PPUSH
81621: LD_VAR 0 5
81625: PPUSH
81626: CALL_OW 488
81630: IFFALSE 81651
// ComTurnXY ( unit , x , y ) ;
81632: LD_VAR 0 1
81636: PPUSH
81637: LD_VAR 0 4
81641: PPUSH
81642: LD_VAR 0 5
81646: PPUSH
81647: CALL_OW 118
// end ;
81651: LD_VAR 0 3
81655: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81656: LD_INT 0
81658: PPUSH
81659: PPUSH
// result := false ;
81660: LD_ADDR_VAR 0 3
81664: PUSH
81665: LD_INT 0
81667: ST_TO_ADDR
// if not units then
81668: LD_VAR 0 2
81672: NOT
81673: IFFALSE 81677
// exit ;
81675: GO 81722
// for i in units do
81677: LD_ADDR_VAR 0 4
81681: PUSH
81682: LD_VAR 0 2
81686: PUSH
81687: FOR_IN
81688: IFFALSE 81720
// if See ( side , i ) then
81690: LD_VAR 0 1
81694: PPUSH
81695: LD_VAR 0 4
81699: PPUSH
81700: CALL_OW 292
81704: IFFALSE 81718
// begin result := true ;
81706: LD_ADDR_VAR 0 3
81710: PUSH
81711: LD_INT 1
81713: ST_TO_ADDR
// exit ;
81714: POP
81715: POP
81716: GO 81722
// end ;
81718: GO 81687
81720: POP
81721: POP
// end ;
81722: LD_VAR 0 3
81726: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81727: LD_INT 0
81729: PPUSH
81730: PPUSH
81731: PPUSH
81732: PPUSH
// if not unit or not points then
81733: LD_VAR 0 1
81737: NOT
81738: PUSH
81739: LD_VAR 0 2
81743: NOT
81744: OR
81745: IFFALSE 81749
// exit ;
81747: GO 81839
// dist := 99999 ;
81749: LD_ADDR_VAR 0 5
81753: PUSH
81754: LD_INT 99999
81756: ST_TO_ADDR
// for i in points do
81757: LD_ADDR_VAR 0 4
81761: PUSH
81762: LD_VAR 0 2
81766: PUSH
81767: FOR_IN
81768: IFFALSE 81837
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81770: LD_ADDR_VAR 0 6
81774: PUSH
81775: LD_VAR 0 1
81779: PPUSH
81780: LD_VAR 0 4
81784: PUSH
81785: LD_INT 1
81787: ARRAY
81788: PPUSH
81789: LD_VAR 0 4
81793: PUSH
81794: LD_INT 2
81796: ARRAY
81797: PPUSH
81798: CALL_OW 297
81802: ST_TO_ADDR
// if tmpDist < dist then
81803: LD_VAR 0 6
81807: PUSH
81808: LD_VAR 0 5
81812: LESS
81813: IFFALSE 81835
// begin result := i ;
81815: LD_ADDR_VAR 0 3
81819: PUSH
81820: LD_VAR 0 4
81824: ST_TO_ADDR
// dist := tmpDist ;
81825: LD_ADDR_VAR 0 5
81829: PUSH
81830: LD_VAR 0 6
81834: ST_TO_ADDR
// end ; end ;
81835: GO 81767
81837: POP
81838: POP
// end ;
81839: LD_VAR 0 3
81843: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81844: LD_INT 0
81846: PPUSH
// uc_side := side ;
81847: LD_ADDR_OWVAR 20
81851: PUSH
81852: LD_VAR 0 1
81856: ST_TO_ADDR
// uc_nation := 3 ;
81857: LD_ADDR_OWVAR 21
81861: PUSH
81862: LD_INT 3
81864: ST_TO_ADDR
// vc_chassis := 25 ;
81865: LD_ADDR_OWVAR 37
81869: PUSH
81870: LD_INT 25
81872: ST_TO_ADDR
// vc_engine := engine_siberite ;
81873: LD_ADDR_OWVAR 39
81877: PUSH
81878: LD_INT 3
81880: ST_TO_ADDR
// vc_control := control_computer ;
81881: LD_ADDR_OWVAR 38
81885: PUSH
81886: LD_INT 3
81888: ST_TO_ADDR
// vc_weapon := 59 ;
81889: LD_ADDR_OWVAR 40
81893: PUSH
81894: LD_INT 59
81896: ST_TO_ADDR
// result := CreateVehicle ;
81897: LD_ADDR_VAR 0 5
81901: PUSH
81902: CALL_OW 45
81906: ST_TO_ADDR
// SetDir ( result , d ) ;
81907: LD_VAR 0 5
81911: PPUSH
81912: LD_VAR 0 4
81916: PPUSH
81917: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81921: LD_VAR 0 5
81925: PPUSH
81926: LD_VAR 0 2
81930: PPUSH
81931: LD_VAR 0 3
81935: PPUSH
81936: LD_INT 0
81938: PPUSH
81939: CALL_OW 48
// end ;
81943: LD_VAR 0 5
81947: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81948: LD_INT 0
81950: PPUSH
81951: PPUSH
81952: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81953: LD_ADDR_VAR 0 2
81957: PUSH
81958: LD_INT 0
81960: PUSH
81961: LD_INT 0
81963: PUSH
81964: LD_INT 0
81966: PUSH
81967: LD_INT 0
81969: PUSH
81970: EMPTY
81971: LIST
81972: LIST
81973: LIST
81974: LIST
81975: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81976: LD_VAR 0 1
81980: NOT
81981: PUSH
81982: LD_VAR 0 1
81986: PPUSH
81987: CALL_OW 264
81991: PUSH
81992: LD_INT 12
81994: PUSH
81995: LD_INT 51
81997: PUSH
81998: LD_INT 32
82000: PUSH
82001: LD_INT 89
82003: PUSH
82004: EMPTY
82005: LIST
82006: LIST
82007: LIST
82008: LIST
82009: IN
82010: NOT
82011: OR
82012: IFFALSE 82016
// exit ;
82014: GO 82114
// for i := 1 to 3 do
82016: LD_ADDR_VAR 0 3
82020: PUSH
82021: DOUBLE
82022: LD_INT 1
82024: DEC
82025: ST_TO_ADDR
82026: LD_INT 3
82028: PUSH
82029: FOR_TO
82030: IFFALSE 82112
// begin tmp := GetCargo ( cargo , i ) ;
82032: LD_ADDR_VAR 0 4
82036: PUSH
82037: LD_VAR 0 1
82041: PPUSH
82042: LD_VAR 0 3
82046: PPUSH
82047: CALL_OW 289
82051: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82052: LD_ADDR_VAR 0 2
82056: PUSH
82057: LD_VAR 0 2
82061: PPUSH
82062: LD_VAR 0 3
82066: PPUSH
82067: LD_VAR 0 4
82071: PPUSH
82072: CALL_OW 1
82076: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82077: LD_ADDR_VAR 0 2
82081: PUSH
82082: LD_VAR 0 2
82086: PPUSH
82087: LD_INT 4
82089: PPUSH
82090: LD_VAR 0 2
82094: PUSH
82095: LD_INT 4
82097: ARRAY
82098: PUSH
82099: LD_VAR 0 4
82103: PLUS
82104: PPUSH
82105: CALL_OW 1
82109: ST_TO_ADDR
// end ;
82110: GO 82029
82112: POP
82113: POP
// end ;
82114: LD_VAR 0 2
82118: RET
// export function Length ( array ) ; begin
82119: LD_INT 0
82121: PPUSH
// result := array + 0 ;
82122: LD_ADDR_VAR 0 2
82126: PUSH
82127: LD_VAR 0 1
82131: PUSH
82132: LD_INT 0
82134: PLUS
82135: ST_TO_ADDR
// end ;
82136: LD_VAR 0 2
82140: RET
// export function PrepareArray ( array ) ; begin
82141: LD_INT 0
82143: PPUSH
// result := array diff 0 ;
82144: LD_ADDR_VAR 0 2
82148: PUSH
82149: LD_VAR 0 1
82153: PUSH
82154: LD_INT 0
82156: DIFF
82157: ST_TO_ADDR
// if not result [ 1 ] then
82158: LD_VAR 0 2
82162: PUSH
82163: LD_INT 1
82165: ARRAY
82166: NOT
82167: IFFALSE 82187
// result := Delete ( result , 1 ) ;
82169: LD_ADDR_VAR 0 2
82173: PUSH
82174: LD_VAR 0 2
82178: PPUSH
82179: LD_INT 1
82181: PPUSH
82182: CALL_OW 3
82186: ST_TO_ADDR
// end ;
82187: LD_VAR 0 2
82191: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82192: LD_INT 0
82194: PPUSH
82195: PPUSH
82196: PPUSH
82197: PPUSH
// sibRocketRange := 25 ;
82198: LD_ADDR_VAR 0 6
82202: PUSH
82203: LD_INT 25
82205: ST_TO_ADDR
// result := false ;
82206: LD_ADDR_VAR 0 4
82210: PUSH
82211: LD_INT 0
82213: ST_TO_ADDR
// for i := 0 to 5 do
82214: LD_ADDR_VAR 0 5
82218: PUSH
82219: DOUBLE
82220: LD_INT 0
82222: DEC
82223: ST_TO_ADDR
82224: LD_INT 5
82226: PUSH
82227: FOR_TO
82228: IFFALSE 82295
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82230: LD_VAR 0 1
82234: PPUSH
82235: LD_VAR 0 5
82239: PPUSH
82240: LD_VAR 0 6
82244: PPUSH
82245: CALL_OW 272
82249: PPUSH
82250: LD_VAR 0 2
82254: PPUSH
82255: LD_VAR 0 5
82259: PPUSH
82260: LD_VAR 0 6
82264: PPUSH
82265: CALL_OW 273
82269: PPUSH
82270: LD_VAR 0 3
82274: PPUSH
82275: CALL_OW 309
82279: IFFALSE 82293
// begin result := true ;
82281: LD_ADDR_VAR 0 4
82285: PUSH
82286: LD_INT 1
82288: ST_TO_ADDR
// exit ;
82289: POP
82290: POP
82291: GO 82297
// end ;
82293: GO 82227
82295: POP
82296: POP
// end ; end_of_file
82297: LD_VAR 0 4
82301: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82302: LD_VAR 0 1
82306: PUSH
82307: LD_INT 200
82309: DOUBLE
82310: GREATEREQUAL
82311: IFFALSE 82319
82313: LD_INT 299
82315: DOUBLE
82316: LESSEQUAL
82317: IFTRUE 82321
82319: GO 82353
82321: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82322: LD_VAR 0 1
82326: PPUSH
82327: LD_VAR 0 2
82331: PPUSH
82332: LD_VAR 0 3
82336: PPUSH
82337: LD_VAR 0 4
82341: PPUSH
82342: LD_VAR 0 5
82346: PPUSH
82347: CALL 37021 0 5
82351: GO 82430
82353: LD_INT 300
82355: DOUBLE
82356: GREATEREQUAL
82357: IFFALSE 82365
82359: LD_INT 399
82361: DOUBLE
82362: LESSEQUAL
82363: IFTRUE 82367
82365: GO 82429
82367: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82368: LD_VAR 0 1
82372: PPUSH
82373: LD_VAR 0 2
82377: PPUSH
82378: LD_VAR 0 3
82382: PPUSH
82383: LD_VAR 0 4
82387: PPUSH
82388: LD_VAR 0 5
82392: PPUSH
82393: LD_VAR 0 6
82397: PPUSH
82398: LD_VAR 0 7
82402: PPUSH
82403: LD_VAR 0 8
82407: PPUSH
82408: LD_VAR 0 9
82412: PPUSH
82413: LD_VAR 0 10
82417: PPUSH
82418: LD_VAR 0 11
82422: PPUSH
82423: CALL 33354 0 11
82427: GO 82430
82429: POP
// end ;
82430: PPOPN 11
82432: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82433: LD_VAR 0 1
82437: PPUSH
82438: LD_VAR 0 2
82442: PPUSH
82443: LD_VAR 0 3
82447: PPUSH
82448: LD_VAR 0 4
82452: PPUSH
82453: LD_VAR 0 5
82457: PPUSH
82458: CALL 36757 0 5
// end ; end_of_file
82462: PPOPN 5
82464: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82465: LD_VAR 0 1
82469: PPUSH
82470: LD_VAR 0 2
82474: PPUSH
82475: LD_VAR 0 3
82479: PPUSH
82480: LD_VAR 0 4
82484: PPUSH
82485: LD_VAR 0 5
82489: PPUSH
82490: LD_VAR 0 6
82494: PPUSH
82495: CALL 21047 0 6
// end ;
82499: PPOPN 6
82501: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82502: LD_INT 0
82504: PPUSH
// begin if not units then
82505: LD_VAR 0 1
82509: NOT
82510: IFFALSE 82514
// exit ;
82512: GO 82514
// end ;
82514: PPOPN 7
82516: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82517: CALL 21018 0 0
// end ;
82521: PPOPN 1
82523: END
