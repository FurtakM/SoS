// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6634 0 0
// CreateNature ;
 290: CALL 23694 0 0
// PrepareRussian ;
 294: CALL 5857 0 0
// PrepareVehicles ;
 298: CALL 1629 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2050 0 0
// PreparePlayerApemans ;
 310: CALL 2192 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_EXP 44
 629: PPUSH
 630: CALL 41625 0 3
 634: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 635: LD_ADDR_EXP 14
 639: PUSH
 640: LD_STRING Harisson
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: LD_STRING 
 648: PPUSH
 649: CALL 41625 0 3
 653: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING DeltaDoctor
 661: PPUSH
 662: CALL_OW 34
 666: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 667: LD_ADDR_VAR 0 2
 671: PUSH
 672: LD_INT 22
 674: PUSH
 675: LD_INT 1
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: PUSH
 682: LD_INT 21
 684: PUSH
 685: LD_INT 2
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 58
 694: PUSH
 695: EMPTY
 696: LIST
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: LIST
 702: PPUSH
 703: CALL_OW 69
 707: ST_TO_ADDR
// if veh > 0 then
 708: LD_VAR 0 2
 712: PUSH
 713: LD_INT 0
 715: GREATER
 716: IFFALSE 738
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_VAR 0 2
 727: PUSH
 728: LD_INT 1
 730: ARRAY
 731: PPUSH
 732: CALL_OW 52
// end else
 736: GO 753
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 753: LD_STRING LisaIn06
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 30
 763: PUSH
 764: LD_INT 1
 766: EQUAL
 767: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 21
 786: PUSH
 787: LD_INT 2
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 58
 796: PUSH
 797: EMPTY
 798: LIST
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PPUSH
 805: CALL_OW 69
 809: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 810: LD_ADDR_EXP 2
 814: PUSH
 815: LD_STRING Lisa
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: LD_EXP 44
 825: PPUSH
 826: CALL 41625 0 3
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 841: LD_EXP 2
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 861: LD_EXP 2
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 876: LD_STRING BobbyIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 999
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 3
 937: PUSH
 938: LD_STRING Bobby
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: LD_EXP 44
 948: PPUSH
 949: CALL 41625 0 3
 953: ST_TO_ADDR
// if veh > 0 then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 0
 961: GREATER
 962: IFFALSE 984
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 964: LD_EXP 3
 968: PPUSH
 969: LD_VAR 0 2
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 52
// end else
 982: GO 999
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 984: LD_EXP 3
 988: PPUSH
 989: LD_INT 2
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 999: LD_STRING CyrusIn06
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: CALL_OW 30
1009: PUSH
1010: LD_INT 1
1012: EQUAL
1013: IFFALSE 1122
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1015: LD_ADDR_VAR 0 2
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_INT 1
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: PUSH
1030: LD_INT 21
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 58
1042: PUSH
1043: EMPTY
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: PPUSH
1051: CALL_OW 69
1055: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1056: LD_ADDR_EXP 4
1060: PUSH
1061: LD_STRING Cyrus
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_EXP 44
1071: PPUSH
1072: CALL 41625 0 3
1076: ST_TO_ADDR
// if veh > 0 then
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 0
1084: GREATER
1085: IFFALSE 1107
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1087: LD_EXP 4
1091: PPUSH
1092: LD_VAR 0 2
1096: PUSH
1097: LD_INT 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
// end else
1105: GO 1122
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1107: LD_EXP 4
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1122: LD_STRING FrankIn06
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 30
1132: PUSH
1133: LD_INT 1
1135: EQUAL
1136: IFFALSE 1245
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1138: LD_ADDR_VAR 0 2
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 58
1165: PUSH
1166: EMPTY
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
1179: LD_ADDR_EXP 5
1183: PUSH
1184: LD_STRING Frank
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_EXP 44
1194: PPUSH
1195: CALL 41625 0 3
1199: ST_TO_ADDR
// if veh > 0 then
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 0
1207: GREATER
1208: IFFALSE 1230
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1210: LD_EXP 5
1214: PPUSH
1215: LD_VAR 0 2
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 52
// end else
1228: GO 1245
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1230: LD_EXP 5
1234: PPUSH
1235: LD_INT 2
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1245: LD_STRING BrownIn06
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: CALL_OW 30
1255: PUSH
1256: LD_INT 1
1258: EQUAL
1259: IFFALSE 1368
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_INT 22
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 2
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 58
1288: PUSH
1289: EMPTY
1290: LIST
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 69
1301: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1302: LD_ADDR_EXP 6
1306: PUSH
1307: LD_STRING Brown
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_EXP 44
1317: PPUSH
1318: CALL 41625 0 3
1322: ST_TO_ADDR
// if veh > 0 then
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 0
1330: GREATER
1331: IFFALSE 1353
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1333: LD_EXP 6
1337: PPUSH
1338: LD_VAR 0 2
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// end else
1351: GO 1368
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1353: LD_EXP 6
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: LD_INT 0
1363: PPUSH
1364: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1368: LD_STRING DonaldsonIn06
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 30
1378: PUSH
1379: LD_INT 1
1381: EQUAL
1382: IFFALSE 1491
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: LD_INT 58
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1425: LD_ADDR_EXP 7
1429: PUSH
1430: LD_STRING Donaldson
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_EXP 44
1440: PPUSH
1441: CALL 41625 0 3
1445: ST_TO_ADDR
// if veh > 0 then
1446: LD_VAR 0 2
1450: PUSH
1451: LD_INT 0
1453: GREATER
1454: IFFALSE 1476
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1456: LD_EXP 7
1460: PPUSH
1461: LD_VAR 0 2
1465: PUSH
1466: LD_INT 1
1468: ARRAY
1469: PPUSH
1470: CALL_OW 52
// end else
1474: GO 1491
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1476: LD_EXP 7
1480: PPUSH
1481: LD_INT 2
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1491: LD_STRING GladstoneIn06
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 30
1501: PUSH
1502: LD_INT 1
1504: EQUAL
1505: IFFALSE 1614
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 22
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 21
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 58
1534: PUSH
1535: EMPTY
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: PPUSH
1543: CALL_OW 69
1547: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
1548: LD_ADDR_EXP 8
1552: PUSH
1553: LD_STRING Gladstone
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_EXP 44
1563: PPUSH
1564: CALL 41625 0 3
1568: ST_TO_ADDR
// if veh > 0 then
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 0
1576: GREATER
1577: IFFALSE 1599
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1579: LD_EXP 8
1583: PPUSH
1584: LD_VAR 0 2
1588: PUSH
1589: LD_INT 1
1591: ARRAY
1592: PPUSH
1593: CALL_OW 52
// end else
1597: GO 1614
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1599: LD_EXP 8
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1614: LD_INT 66
1616: PPUSH
1617: LD_INT 4
1619: PPUSH
1620: CALL_OW 86
// end ;
1624: LD_VAR 0 1
1628: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
1635: PPUSH
1636: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1637: LD_ADDR_VAR 0 5
1641: PUSH
1642: LD_STRING 06_VehiclesIn06_1
1644: PPUSH
1645: EMPTY
1646: PPUSH
1647: CALL_OW 30
1651: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1652: LD_ADDR_EXP 40
1656: PUSH
1657: LD_STRING 06_ResourcesInCargo06_1
1659: PPUSH
1660: EMPTY
1661: PPUSH
1662: CALL_OW 30
1666: ST_TO_ADDR
// cargoList = [ ] ;
1667: LD_ADDR_VAR 0 6
1671: PUSH
1672: EMPTY
1673: ST_TO_ADDR
// uc_side = 1 ;
1674: LD_ADDR_OWVAR 20
1678: PUSH
1679: LD_INT 1
1681: ST_TO_ADDR
// if vehicles > 0 then
1682: LD_VAR 0 5
1686: PUSH
1687: LD_INT 0
1689: GREATER
1690: IFFALSE 2045
// begin for i := 1 to vehicles do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: DOUBLE
1698: LD_INT 1
1700: DEC
1701: ST_TO_ADDR
1702: LD_VAR 0 5
1706: PUSH
1707: FOR_TO
1708: IFFALSE 1857
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1710: LD_ADDR_OWVAR 21
1714: PUSH
1715: LD_VAR 0 5
1719: PUSH
1720: LD_VAR 0 2
1724: ARRAY
1725: PUSH
1726: LD_INT 1
1728: ARRAY
1729: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1730: LD_ADDR_OWVAR 37
1734: PUSH
1735: LD_VAR 0 5
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PUSH
1746: LD_INT 2
1748: ARRAY
1749: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1750: LD_ADDR_OWVAR 39
1754: PUSH
1755: LD_VAR 0 5
1759: PUSH
1760: LD_VAR 0 2
1764: ARRAY
1765: PUSH
1766: LD_INT 3
1768: ARRAY
1769: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1770: LD_ADDR_OWVAR 38
1774: PUSH
1775: LD_VAR 0 5
1779: PUSH
1780: LD_VAR 0 2
1784: ARRAY
1785: PUSH
1786: LD_INT 4
1788: ARRAY
1789: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1790: LD_ADDR_OWVAR 40
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: LD_VAR 0 2
1804: ARRAY
1805: PUSH
1806: LD_INT 5
1808: ARRAY
1809: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1810: LD_ADDR_OWVAR 41
1814: PUSH
1815: LD_INT 40
1817: ST_TO_ADDR
// veh = CreateVehicle ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: CALL_OW 45
1827: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1828: LD_VAR 0 4
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1840: LD_VAR 0 4
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 49
// end ;
1855: GO 1707
1857: POP
1858: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 22
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 21
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 34
1886: PUSH
1887: LD_INT 12
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: ST_TO_ADDR
// if cargoList > 0 then
1904: LD_VAR 0 6
1908: PUSH
1909: LD_INT 0
1911: GREATER
1912: IFFALSE 2045
// for i = 1 to cargoList do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_VAR 0 6
1928: PUSH
1929: FOR_TO
1930: IFFALSE 2043
// begin if resources > 0 then
1932: LD_EXP 40
1936: PUSH
1937: LD_INT 0
1939: GREATER
1940: IFFALSE 2041
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1942: LD_VAR 0 6
1946: PUSH
1947: LD_VAR 0 2
1951: ARRAY
1952: PPUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_EXP 40
1960: PUSH
1961: LD_VAR 0 2
1965: ARRAY
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PPUSH
1971: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1975: LD_VAR 0 6
1979: PUSH
1980: LD_VAR 0 2
1984: ARRAY
1985: PPUSH
1986: LD_INT 2
1988: PPUSH
1989: LD_EXP 40
1993: PUSH
1994: LD_VAR 0 2
1998: ARRAY
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PPUSH
2004: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
2008: LD_VAR 0 6
2012: PUSH
2013: LD_VAR 0 2
2017: ARRAY
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_EXP 40
2026: PUSH
2027: LD_VAR 0 2
2031: ARRAY
2032: PUSH
2033: LD_INT 3
2035: ARRAY
2036: PPUSH
2037: CALL_OW 291
// end ; end ;
2041: GO 1929
2043: POP
2044: POP
// end ; end ;
2045: LD_VAR 0 1
2049: RET
// export function PrepareOthers ; var i , veh ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
2054: PPUSH
// uc_side = 1 ;
2055: LD_ADDR_OWVAR 20
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// uc_nation = 1 ;
2063: LD_ADDR_OWVAR 21
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2071: LD_ADDR_EXP 11
2075: PUSH
2076: LD_STRING OthersIn06
2078: PPUSH
2079: CALL_OW 31
2083: ST_TO_ADDR
// for i in others do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: LD_EXP 11
2093: PUSH
2094: FOR_IN
2095: IFFALSE 2185
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2097: LD_ADDR_VAR 0 3
2101: PUSH
2102: LD_INT 22
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 21
2114: PUSH
2115: LD_INT 2
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 58
2124: PUSH
2125: EMPTY
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL_OW 69
2137: ST_TO_ADDR
// if veh > 0 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 0
2145: GREATER
2146: IFFALSE 2168
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2148: LD_VAR 0 2
2152: PPUSH
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 52
// end else
2166: GO 2183
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2168: LD_VAR 0 2
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 49
// end ; end ;
2183: GO 2094
2185: POP
2186: POP
// end ;
2187: LD_VAR 0 1
2191: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
// uc_side = 1 ;
2197: LD_ADDR_OWVAR 20
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// uc_nation = 0 ;
2205: LD_ADDR_OWVAR 21
2209: PUSH
2210: LD_INT 0
2212: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2213: LD_ADDR_EXP 12
2217: PUSH
2218: LD_STRING ApeIn06
2220: PPUSH
2221: CALL_OW 31
2225: ST_TO_ADDR
// for i in ape do
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: LD_EXP 12
2235: PUSH
2236: FOR_IN
2237: IFFALSE 2256
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2239: LD_VAR 0 2
2243: PPUSH
2244: LD_INT 2
2246: PPUSH
2247: LD_INT 0
2249: PPUSH
2250: CALL_OW 49
2254: GO 2236
2256: POP
2257: POP
// end ;
2258: LD_VAR 0 1
2262: RET
// export function PrepareDenis ; var xy , i ; begin
2263: LD_INT 0
2265: PPUSH
2266: PPUSH
2267: PPUSH
// uc_side = 4 ;
2268: LD_ADDR_OWVAR 20
2272: PUSH
2273: LD_INT 4
2275: ST_TO_ADDR
// uc_nation = 1 ;
2276: LD_ADDR_OWVAR 21
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: LD_INT 63
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: LD_INT 70
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 83
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 16
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 27
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 38
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 5
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 54
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2379: LD_ADDR_EXP 9
2383: PUSH
2384: LD_STRING Denis
2386: PPUSH
2387: LD_INT 1
2389: PPUSH
2390: LD_EXP 44
2394: PPUSH
2395: CALL 41625 0 3
2399: ST_TO_ADDR
// for i = 1 to xy do
2400: LD_ADDR_VAR 0 3
2404: PUSH
2405: DOUBLE
2406: LD_INT 1
2408: DEC
2409: ST_TO_ADDR
2410: LD_VAR 0 2
2414: PUSH
2415: FOR_TO
2416: IFFALSE 2515
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2418: LD_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: ARRAY
2428: PUSH
2429: LD_INT 1
2431: ARRAY
2432: PPUSH
2433: LD_VAR 0 2
2437: PUSH
2438: LD_VAR 0 3
2442: ARRAY
2443: PUSH
2444: LD_INT 2
2446: ARRAY
2447: PPUSH
2448: CALL_OW 428
2452: PUSH
2453: LD_INT 0
2455: EQUAL
2456: IFFALSE 2513
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2458: LD_EXP 9
2462: PPUSH
2463: LD_VAR 0 2
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 2
2482: PUSH
2483: LD_VAR 0 3
2487: ARRAY
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// if IsPlaced ( Denis ) then
2500: LD_EXP 9
2504: PPUSH
2505: CALL_OW 305
2509: IFFALSE 2513
// break ;
2511: GO 2515
// end ;
2513: GO 2415
2515: POP
2516: POP
// SetClass ( Denis , 4 ) ;
2517: LD_EXP 9
2521: PPUSH
2522: LD_INT 4
2524: PPUSH
2525: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2529: LD_EXP 9
2533: PPUSH
2534: LD_INT 750
2536: PPUSH
2537: CALL_OW 234
// end ;
2541: LD_VAR 0 1
2545: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2546: LD_INT 0
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
// area := HarrisonSupportArea ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// dir := 2 ;
2561: LD_ADDR_VAR 0 5
2565: PUSH
2566: LD_INT 2
2568: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2569: LD_VAR 0 4
2573: PPUSH
2574: LD_INT 21
2576: PUSH
2577: LD_INT 3
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PPUSH
2584: CALL_OW 70
2588: IFFALSE 2606
// begin area := HarrisonSupportArea2 ;
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_INT 31
2597: ST_TO_ADDR
// dir := 1 ;
2598: LD_ADDR_VAR 0 5
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// end ; uc_side = 1 ;
2606: LD_ADDR_OWVAR 20
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// uc_nation = 1 ;
2614: LD_ADDR_OWVAR 21
2618: PUSH
2619: LD_INT 1
2621: ST_TO_ADDR
// vc_engine = 1 ;
2622: LD_ADDR_OWVAR 39
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// vc_control = 1 ;
2630: LD_ADDR_OWVAR 38
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = 2 ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh = CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := 2 ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2825: LD_ADDR_EXP 17
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 17
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine = 1 ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control = 1 ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 3
2872: ST_TO_ADDR
// vc_chassis = 2 ;
2873: LD_ADDR_OWVAR 37
2877: PUSH
2878: LD_INT 2
2880: ST_TO_ADDR
// veh = CreateVehicle ;
2881: LD_ADDR_VAR 0 3
2885: PUSH
2886: CALL_OW 45
2890: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2891: LD_VAR 0 3
2895: PPUSH
2896: LD_VAR 0 5
2900: PPUSH
2901: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2905: LD_VAR 0 3
2909: PPUSH
2910: LD_VAR 0 4
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_INT 50
2929: PPUSH
2930: CALL_OW 240
// hc_class := 1 ;
2934: LD_ADDR_OWVAR 28
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// hc_sex := sex_female ;
2942: LD_ADDR_OWVAR 27
2946: PUSH
2947: LD_INT 2
2949: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2950: LD_ADDR_OWVAR 33
2954: PUSH
2955: LD_STRING SecondCharsGal
2957: ST_TO_ADDR
// hc_face_number := 45 ;
2958: LD_ADDR_OWVAR 34
2962: PUSH
2963: LD_INT 45
2965: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2966: LD_ADDR_OWVAR 29
2970: PUSH
2971: LD_INT 11
2973: PUSH
2974: LD_INT 10
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING Ingrid Jonsson
2988: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2989: LD_ADDR_OWVAR 30
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 0
3002: PUSH
3003: LD_INT 0
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3012: LD_ADDR_OWVAR 31
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3035: LD_ADDR_EXP 18
3039: PUSH
3040: CALL_OW 44
3044: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_VAR 0 3
3054: PPUSH
3055: CALL_OW 52
// end ;
3059: LD_VAR 0 1
3063: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3064: LD_INT 0
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: LD_INT 22
3077: PUSH
3078: LD_INT 1
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 23
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 26
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: PPUSH
3110: CALL_OW 69
3114: PUSH
3115: LD_EXP 3
3119: PUSH
3120: LD_EXP 4
3124: PUSH
3125: LD_EXP 8
3129: PUSH
3130: LD_EXP 9
3134: PUSH
3135: LD_EXP 5
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: DIFF
3147: ST_TO_ADDR
// for i in _tmp do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 4
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3200
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3161: LD_VAR 0 2
3165: PPUSH
3166: LD_INT 32
3168: PPUSH
3169: CALL_OW 308
3173: PUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: CALL_OW 302
3183: AND
3184: IFFALSE 3198
// begin tmp := i ;
3186: LD_ADDR_VAR 0 3
3190: PUSH
3191: LD_VAR 0 2
3195: ST_TO_ADDR
// break ;
3196: GO 3200
// end ;
3198: GO 3158
3200: POP
3201: POP
// if not tmp then
3202: LD_VAR 0 3
3206: NOT
3207: IFFALSE 3219
// tmp := JMM ;
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_EXP 1
3218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3219: LD_INT 35
3221: PPUSH
3222: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3226: LD_INT 81
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 92
3238: PUSH
3239: LD_VAR 0 3
3243: PPUSH
3244: CALL_OW 250
3248: PUSH
3249: LD_VAR 0 3
3253: PPUSH
3254: CALL_OW 251
3258: PUSH
3259: LD_INT 22
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: NOT
3277: PUSH
3278: LD_INT 22
3280: PUSH
3281: LD_INT 1
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 21
3290: PUSH
3291: LD_INT 3
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 92
3300: PUSH
3301: LD_VAR 0 3
3305: PPUSH
3306: CALL_OW 250
3310: PUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 251
3320: PUSH
3321: LD_INT 20
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: AND
3340: IFFALSE 3219
// blockSpawn = 1 ;
3342: LD_ADDR_EXP 29
3346: PUSH
3347: LD_INT 1
3349: ST_TO_ADDR
// uc_side = 4 ;
3350: LD_ADDR_OWVAR 20
3354: PUSH
3355: LD_INT 4
3357: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3358: LD_ADDR_EXP 15
3362: PUSH
3363: LD_STRING Joan
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: LD_EXP 44
3373: PPUSH
3374: CALL 41625 0 3
3378: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3379: LD_EXP 15
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 250
3393: PPUSH
3394: LD_VAR 0 3
3398: PPUSH
3399: CALL_OW 251
3403: PPUSH
3404: LD_INT 5
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_INT 250
3421: PPUSH
3422: CALL_OW 234
// InGameOn ;
3426: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3430: LD_EXP 15
3434: PPUSH
3435: CALL_OW 87
// wait ( 0 0$2 ) ;
3439: LD_INT 70
3441: PPUSH
3442: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3446: LD_VAR 0 3
3450: PPUSH
3451: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: CALL_OW 122
// wait ( 0 0$1 ) ;
3464: LD_INT 35
3466: PPUSH
3467: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3471: LD_VAR 0 3
3475: PPUSH
3476: LD_EXP 15
3480: PPUSH
3481: CALL_OW 112
// wait ( 0 0$2 ) ;
3485: LD_INT 70
3487: PPUSH
3488: CALL_OW 67
// DialogueOn ;
3492: CALL_OW 6
// if tmp = JMM then
3496: LD_VAR 0 3
3500: PUSH
3501: LD_EXP 1
3505: EQUAL
3506: IFFALSE 3655
// begin ComTurnUnit ( JMM , Joan ) ;
3508: LD_EXP 1
3512: PPUSH
3513: LD_EXP 15
3517: PPUSH
3518: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3522: LD_EXP 1
3526: PPUSH
3527: LD_STRING D5b-JMM-1
3529: PPUSH
3530: CALL_OW 88
// DialogueOff ;
3534: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3538: LD_EXP 15
3542: PPUSH
3543: LD_INT 500
3545: PPUSH
3546: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3550: LD_EXP 15
3554: PPUSH
3555: LD_EXP 1
3559: PPUSH
3560: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3564: LD_EXP 1
3568: PPUSH
3569: LD_EXP 15
3573: PPUSH
3574: CALL_OW 119
// wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// DialogueOn ;
3585: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3589: LD_EXP 15
3593: PPUSH
3594: LD_STRING D5b-Joan-1
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D5b-JMM-2
3608: PPUSH
3609: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3613: LD_EXP 15
3617: PPUSH
3618: LD_STRING D5b-Joan-2
3620: PPUSH
3621: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3625: LD_EXP 1
3629: PPUSH
3630: LD_STRING D5b-JMM-3
3632: PPUSH
3633: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3637: LD_EXP 15
3641: PPUSH
3642: LD_STRING D5b-Joan-3
3644: PPUSH
3645: CALL_OW 88
// DialogueOff ;
3649: CALL_OW 7
// end else
3653: GO 4029
// begin ComTurnUnit ( tmp , Joan ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_EXP 15
3664: PPUSH
3665: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3669: LD_VAR 0 3
3673: PPUSH
3674: LD_STRING D5a-Sol1-1
3676: PPUSH
3677: CALL_OW 88
// DialogueOff ;
3681: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3685: LD_EXP 15
3689: PPUSH
3690: LD_INT 500
3692: PPUSH
3693: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3697: LD_EXP 15
3701: PPUSH
3702: LD_VAR 0 3
3706: PPUSH
3707: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3711: LD_VAR 0 3
3715: PPUSH
3716: LD_EXP 15
3720: PPUSH
3721: CALL_OW 119
// wait ( 0 0$1 ) ;
3725: LD_INT 35
3727: PPUSH
3728: CALL_OW 67
// DialogueOn ;
3732: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3736: LD_EXP 15
3740: PPUSH
3741: LD_STRING D5a-Joan-1
3743: PPUSH
3744: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_STRING D5a-Sol1-2
3755: PPUSH
3756: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_STRING D5a-Joan-2
3767: PPUSH
3768: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_STRING D5a-Sol1-3
3779: PPUSH
3780: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D5a-Joan-3
3791: PPUSH
3792: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_STRING D5a-Sol1-4
3803: PPUSH
3804: CALL_OW 88
// DialogueOff ;
3808: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3812: LD_EXP 1
3816: PUSH
3817: LD_INT 55
3819: PUSH
3820: EMPTY
3821: LIST
3822: PPUSH
3823: CALL_OW 69
3827: IN
3828: IFFALSE 3851
// begin ComMoveUnit ( JMM , Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 15
3839: PPUSH
3840: CALL_OW 112
// wait ( 0 0$05 ) ;
3844: LD_INT 175
3846: PPUSH
3847: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3851: LD_EXP 1
3855: PPUSH
3856: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3860: LD_EXP 1
3864: PPUSH
3865: CALL_OW 122
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3876: LD_INT 35
3878: PPUSH
3879: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3883: LD_EXP 15
3887: PUSH
3888: LD_VAR 0 3
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PPUSH
3897: LD_EXP 1
3901: PPUSH
3902: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3906: LD_EXP 15
3910: PPUSH
3911: LD_EXP 1
3915: PPUSH
3916: CALL_OW 296
3920: PUSH
3921: LD_INT 5
3923: LESS
3924: IFFALSE 3876
// ComTurnUnit ( Joan , JMM ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_EXP 1
3935: PPUSH
3936: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 119
// wait ( 0 0$1 ) ;
3954: LD_INT 35
3956: PPUSH
3957: CALL_OW 67
// DialogueOn ;
3961: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3965: LD_EXP 15
3969: PPUSH
3970: LD_STRING D5a-Joan-4
3972: PPUSH
3973: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3977: LD_EXP 1
3981: PPUSH
3982: LD_STRING D5a-JMM-4
3984: PPUSH
3985: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3989: LD_EXP 15
3993: PPUSH
3994: LD_STRING D5a-Joan-5
3996: PPUSH
3997: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4001: LD_EXP 1
4005: PPUSH
4006: LD_STRING D5a-JMM-5
4008: PPUSH
4009: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4013: LD_EXP 15
4017: PPUSH
4018: LD_STRING D5a-Joan-6
4020: PPUSH
4021: CALL_OW 88
// DialogueOff ;
4025: CALL_OW 7
// end ; DialogueOn ;
4029: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4033: LD_EXP 1
4037: PPUSH
4038: LD_STRING D6-JMM-1
4040: PPUSH
4041: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4045: LD_EXP 15
4049: PPUSH
4050: LD_STRING D6-Joan-1
4052: PPUSH
4053: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4057: LD_EXP 1
4061: PPUSH
4062: LD_STRING D6-JMM-2
4064: PPUSH
4065: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4069: LD_EXP 15
4073: PPUSH
4074: LD_STRING D6-Joan-2
4076: PPUSH
4077: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4081: LD_EXP 1
4085: PPUSH
4086: LD_STRING D6-JMM-3
4088: PPUSH
4089: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4093: LD_EXP 15
4097: PPUSH
4098: LD_STRING D6-Joan-3
4100: PPUSH
4101: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4105: LD_EXP 1
4109: PPUSH
4110: LD_STRING D6-JMM-4
4112: PPUSH
4113: CALL_OW 88
// DialogueOff ;
4117: CALL_OW 7
// InGameOff ;
4121: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4125: LD_EXP 15
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4137: LD_STRING MJ
4139: PPUSH
4140: CALL_OW 337
// JoanStatus = 1 ;
4144: LD_ADDR_EXP 16
4148: PUSH
4149: LD_INT 1
4151: ST_TO_ADDR
// blockSpawn = 0 ;
4152: LD_ADDR_EXP 29
4156: PUSH
4157: LD_INT 0
4159: ST_TO_ADDR
// end ;
4160: LD_VAR 0 1
4164: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4165: LD_INT 0
4167: PPUSH
4168: PPUSH
// if not number or number > 8 then
4169: LD_VAR 0 1
4173: NOT
4174: PUSH
4175: LD_VAR 0 1
4179: PUSH
4180: LD_INT 8
4182: GREATER
4183: OR
4184: IFFALSE 4188
// exit ;
4186: GO 5752
// repeat wait ( 0 0$7 ) ;
4188: LD_INT 245
4190: PPUSH
4191: CALL_OW 67
// until blockSpawn = 0 ;
4195: LD_EXP 29
4199: PUSH
4200: LD_INT 0
4202: EQUAL
4203: IFFALSE 4188
// uc_side = 1 ;
4205: LD_ADDR_OWVAR 20
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// uc_nation = 1 ;
4213: LD_ADDR_OWVAR 21
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// InitHc ;
4221: CALL_OW 19
// if number = 1 then
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: EQUAL
4233: IFFALSE 4409
// begin hc_class := 3 ;
4235: LD_ADDR_OWVAR 28
4239: PUSH
4240: LD_INT 3
4242: ST_TO_ADDR
// hc_sex := sex_male ;
4243: LD_ADDR_OWVAR 27
4247: PUSH
4248: LD_INT 1
4250: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4251: LD_ADDR_OWVAR 33
4255: PUSH
4256: LD_STRING SecondCharsGal
4258: ST_TO_ADDR
// hc_face_number := 55 ;
4259: LD_ADDR_OWVAR 34
4263: PUSH
4264: LD_INT 55
4266: ST_TO_ADDR
// hc_name := George McCarthy ;
4267: LD_ADDR_OWVAR 26
4271: PUSH
4272: LD_STRING George McCarthy
4274: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4275: LD_ADDR_OWVAR 29
4279: PUSH
4280: LD_INT 11
4282: PUSH
4283: LD_INT 10
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4290: LD_ADDR_OWVAR 30
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: LD_INT 0
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 0
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4313: LD_ADDR_OWVAR 31
4317: PUSH
4318: LD_INT 1
4320: PUSH
4321: LD_INT 2
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: ST_TO_ADDR
// un = CreateHuman ;
4336: LD_ADDR_VAR 0 3
4340: PUSH
4341: CALL_OW 44
4345: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_INT 23
4353: PPUSH
4354: LD_INT 1
4356: PPUSH
4357: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: CALL_OW 87
// wait ( 0 0$1 ) ;
4370: LD_INT 35
4372: PPUSH
4373: CALL_OW 67
// DialogueOn ;
4377: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4381: LD_VAR 0 3
4385: PPUSH
4386: LD_STRING D11d-Sol4-1
4388: PPUSH
4389: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4393: LD_EXP 1
4397: PPUSH
4398: LD_STRING D11d-JMM-1
4400: PPUSH
4401: CALL_OW 88
// DialogueOff ;
4405: CALL_OW 7
// end ; if number = 2 then
4409: LD_VAR 0 1
4413: PUSH
4414: LD_INT 2
4416: EQUAL
4417: IFFALSE 4593
// begin hc_class := 1 ;
4419: LD_ADDR_OWVAR 28
4423: PUSH
4424: LD_INT 1
4426: ST_TO_ADDR
// hc_sex := sex_male ;
4427: LD_ADDR_OWVAR 27
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4435: LD_ADDR_OWVAR 33
4439: PUSH
4440: LD_STRING AmGalRemake
4442: ST_TO_ADDR
// hc_face_number := 7 ;
4443: LD_ADDR_OWVAR 34
4447: PUSH
4448: LD_INT 7
4450: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4451: LD_ADDR_OWVAR 26
4455: PUSH
4456: LD_STRING Bobby Jordan
4458: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4459: LD_ADDR_OWVAR 29
4463: PUSH
4464: LD_INT 9
4466: PUSH
4467: LD_INT 11
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4474: LD_ADDR_OWVAR 30
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 1
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4497: LD_ADDR_OWVAR 31
4501: PUSH
4502: LD_INT 2
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: ST_TO_ADDR
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: LD_INT 24
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 49
// wait ( 0 0$1 ) ;
4545: LD_INT 35
4547: PPUSH
4548: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4552: LD_VAR 0 3
4556: PPUSH
4557: CALL_OW 87
// DialogueOn ;
4561: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4565: LD_VAR 0 3
4569: PPUSH
4570: LD_STRING D11b-Sol3-1
4572: PPUSH
4573: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4577: LD_EXP 1
4581: PPUSH
4582: LD_STRING D11b-JMM-1
4584: PPUSH
4585: CALL_OW 88
// DialogueOff ;
4589: CALL_OW 7
// end ; if number = 3 then
4593: LD_VAR 0 1
4597: PUSH
4598: LD_INT 3
4600: EQUAL
4601: IFFALSE 4765
// begin hc_class := 1 ;
4603: LD_ADDR_OWVAR 28
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// hc_sex := sex_male ;
4611: LD_ADDR_OWVAR 27
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// hc_gallery := DJ ;
4619: LD_ADDR_OWVAR 33
4623: PUSH
4624: LD_STRING DJ
4626: ST_TO_ADDR
// hc_face_number := 1 ;
4627: LD_ADDR_OWVAR 34
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// hc_name := Darius Dajay ;
4635: LD_ADDR_OWVAR 26
4639: PUSH
4640: LD_STRING Darius Dajay
4642: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4643: LD_ADDR_OWVAR 29
4647: PUSH
4648: LD_INT 11
4650: PUSH
4651: LD_INT 11
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4658: LD_ADDR_OWVAR 30
4662: PUSH
4663: LD_INT 2
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4681: LD_ADDR_OWVAR 31
4685: PUSH
4686: LD_INT 4
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 25
4721: PPUSH
4722: LD_INT 1
4724: PPUSH
4725: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4729: LD_VAR 0 3
4733: PPUSH
4734: CALL_OW 87
// wait ( 0 0$1 ) ;
4738: LD_INT 35
4740: PPUSH
4741: CALL_OW 67
// DialogueOn ;
4745: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_STRING D11f-Sol5-1
4756: PPUSH
4757: CALL_OW 88
// DialogueOff ;
4761: CALL_OW 7
// end ; if number = 4 then
4765: LD_VAR 0 1
4769: PUSH
4770: LD_INT 4
4772: EQUAL
4773: IFFALSE 4910
// begin hc_class := 2 ;
4775: LD_ADDR_OWVAR 28
4779: PUSH
4780: LD_INT 2
4782: ST_TO_ADDR
// hc_sex := sex_female ;
4783: LD_ADDR_OWVAR 27
4787: PUSH
4788: LD_INT 2
4790: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4791: LD_ADDR_OWVAR 33
4795: PUSH
4796: LD_STRING SecondCharsGal
4798: ST_TO_ADDR
// hc_face_number := 46 ;
4799: LD_ADDR_OWVAR 34
4803: PUSH
4804: LD_INT 46
4806: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4807: LD_ADDR_OWVAR 26
4811: PUSH
4812: LD_STRING Sylvia Creak
4814: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4815: LD_ADDR_OWVAR 29
4819: PUSH
4820: LD_INT 10
4822: PUSH
4823: LD_INT 9
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4830: LD_ADDR_OWVAR 30
4834: PUSH
4835: LD_INT 0
4837: PUSH
4838: LD_INT 1
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4853: LD_ADDR_OWVAR 31
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: ST_TO_ADDR
// un = CreateHuman ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: CALL_OW 44
4885: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_INT 26
4893: PPUSH
4894: LD_INT 1
4896: PPUSH
4897: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: CALL_OW 87
// end ; if number = 5 then
4910: LD_VAR 0 1
4914: PUSH
4915: LD_INT 5
4917: EQUAL
4918: IFFALSE 5094
// begin hc_class := 1 ;
4920: LD_ADDR_OWVAR 28
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// hc_sex := sex_female ;
4928: LD_ADDR_OWVAR 27
4932: PUSH
4933: LD_INT 2
4935: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4936: LD_ADDR_OWVAR 33
4940: PUSH
4941: LD_STRING SecondCharsGal
4943: ST_TO_ADDR
// hc_face_number := 37 ;
4944: LD_ADDR_OWVAR 34
4948: PUSH
4949: LD_INT 37
4951: ST_TO_ADDR
// hc_name := Malena Johnson ;
4952: LD_ADDR_OWVAR 26
4956: PUSH
4957: LD_STRING Malena Johnson
4959: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4960: LD_ADDR_OWVAR 29
4964: PUSH
4965: LD_INT 11
4967: PUSH
4968: LD_INT 10
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4975: LD_ADDR_OWVAR 30
4979: PUSH
4980: LD_INT 1
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: LD_INT 0
4988: PUSH
4989: LD_INT 0
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4998: LD_ADDR_OWVAR 31
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: LD_INT 1
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: ST_TO_ADDR
// un = CreateHuman ;
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: CALL_OW 44
5030: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_INT 27
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5046: LD_VAR 0 3
5050: PPUSH
5051: CALL_OW 87
// wait ( 0 0$1 ) ;
5055: LD_INT 35
5057: PPUSH
5058: CALL_OW 67
// DialogueOn ;
5062: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5066: LD_VAR 0 3
5070: PPUSH
5071: LD_STRING D11c-FSol3-1
5073: PPUSH
5074: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5078: LD_EXP 1
5082: PPUSH
5083: LD_STRING D11c-JMM-1
5085: PPUSH
5086: CALL_OW 88
// DialogueOff ;
5090: CALL_OW 7
// end ; if number = 6 then
5094: LD_VAR 0 1
5098: PUSH
5099: LD_INT 6
5101: EQUAL
5102: IFFALSE 5276
// begin hc_class := 1 ;
5104: LD_ADDR_OWVAR 28
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// hc_sex := sex_male ;
5112: LD_ADDR_OWVAR 27
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5120: LD_ADDR_OWVAR 33
5124: PUSH
5125: LD_STRING AmGalRemake
5127: ST_TO_ADDR
// hc_face_number := 1 ;
5128: LD_ADDR_OWVAR 34
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// hc_name := Charles Brown ;
5136: LD_ADDR_OWVAR 26
5140: PUSH
5141: LD_STRING Charles Brown
5143: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5144: LD_ADDR_OWVAR 29
5148: PUSH
5149: LD_INT 12
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5159: LD_ADDR_OWVAR 30
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: LD_INT 0
5169: PUSH
5170: LD_INT 0
5172: PUSH
5173: LD_INT 0
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5182: LD_ADDR_OWVAR 31
5186: PUSH
5187: LD_INT 3
5189: PUSH
5190: LD_INT 0
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// un = CreateHuman ;
5205: LD_ADDR_VAR 0 3
5209: PUSH
5210: CALL_OW 44
5214: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5215: LD_VAR 0 3
5219: PPUSH
5220: LD_INT 28
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5230: LD_VAR 0 3
5234: PPUSH
5235: CALL_OW 87
// wait ( 0 0$1 ) ;
5239: LD_INT 35
5241: PPUSH
5242: CALL_OW 67
// DialogueOn ;
5246: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_STRING D4-Sol1-5
5257: PPUSH
5258: CALL_OW 88
// DialogueOff ;
5262: CALL_OW 7
// tempCharles = un ;
5266: LD_ADDR_EXP 13
5270: PUSH
5271: LD_VAR 0 3
5275: ST_TO_ADDR
// end ; if number = 7 then
5276: LD_VAR 0 1
5280: PUSH
5281: LD_INT 7
5283: EQUAL
5284: IFFALSE 5556
// begin hc_class := 1 ;
5286: LD_ADDR_OWVAR 28
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// hc_sex := sex_female ;
5294: LD_ADDR_OWVAR 27
5298: PUSH
5299: LD_INT 2
5301: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5302: LD_ADDR_OWVAR 33
5306: PUSH
5307: LD_STRING AmGalRemake
5309: ST_TO_ADDR
// hc_face_number := 2 ;
5310: LD_ADDR_OWVAR 34
5314: PUSH
5315: LD_INT 2
5317: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5318: LD_ADDR_OWVAR 26
5322: PUSH
5323: LD_STRING Rebecca Macdonald
5325: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5326: LD_ADDR_OWVAR 29
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_INT 10
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5341: LD_ADDR_OWVAR 30
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: LD_INT 0
5351: PUSH
5352: LD_INT 0
5354: PUSH
5355: LD_INT 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5364: LD_ADDR_OWVAR 31
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: ST_TO_ADDR
// un = CreateHuman ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: CALL_OW 44
5396: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 29
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 87
// wait ( 0 0$1 ) ;
5421: LD_INT 35
5423: PPUSH
5424: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5428: LD_INT 30
5430: PPUSH
5431: LD_INT 22
5433: PUSH
5434: LD_INT 3
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 70
5445: IFFALSE 5556
// begin DialogueOn ;
5447: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5451: LD_VAR 0 3
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 15
5476: NEG
5477: PPUSH
5478: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 250
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 251
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_STRING D11a-FSol2-1
5516: PPUSH
5517: CALL_OW 88
// DialogueOff ;
5521: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5525: LD_INT 3
5527: PPUSH
5528: LD_VAR 0 3
5532: PPUSH
5533: CALL_OW 471
// wait ( 0 0$2 ) ;
5537: LD_INT 70
5539: PPUSH
5540: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5544: LD_INT 3
5546: PPUSH
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 472
// end ; end ; if number = 8 then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_INT 8
5563: EQUAL
5564: IFFALSE 5720
// begin hc_class := 1 ;
5566: LD_ADDR_OWVAR 28
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// hc_sex := sex_female ;
5574: LD_ADDR_OWVAR 27
5578: PUSH
5579: LD_INT 2
5581: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5582: LD_ADDR_OWVAR 33
5586: PUSH
5587: LD_STRING SecondCharsGal
5589: ST_TO_ADDR
// hc_face_number := 42 ;
5590: LD_ADDR_OWVAR 34
5594: PUSH
5595: LD_INT 42
5597: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5598: LD_ADDR_OWVAR 26
5602: PUSH
5603: LD_STRING Margherite Simpson
5605: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5606: LD_ADDR_OWVAR 29
5610: PUSH
5611: LD_INT 12
5613: PUSH
5614: LD_INT 10
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5621: LD_ADDR_OWVAR 30
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: LD_INT 2
5631: PUSH
5632: LD_INT 0
5634: PUSH
5635: LD_INT 0
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5644: LD_ADDR_OWVAR 31
5648: PUSH
5649: LD_INT 1
5651: PUSH
5652: LD_INT 2
5654: PUSH
5655: LD_INT 0
5657: PUSH
5658: LD_INT 1
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: ST_TO_ADDR
// un = CreateHuman ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 44
5676: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_INT 33
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: CALL_OW 87
// wait ( 0 0$1 ) ;
5701: LD_INT 35
5703: PPUSH
5704: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5708: LD_VAR 0 3
5712: PPUSH
5713: LD_STRING D11e-FSol4-1
5715: PPUSH
5716: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5720: LD_ADDR_EXP 45
5724: PUSH
5725: LD_EXP 45
5729: PUSH
5730: LD_VAR 0 3
5734: UNION
5735: ST_TO_ADDR
// arrivals := arrivals union un ;
5736: LD_ADDR_EXP 46
5740: PUSH
5741: LD_EXP 46
5745: PUSH
5746: LD_VAR 0 3
5750: UNION
5751: ST_TO_ADDR
// end ;
5752: LD_VAR 0 2
5756: RET
// every 0 0$1 do var i ;
5757: GO 5759
5759: DISABLE
5760: LD_INT 0
5762: PPUSH
// begin enable ;
5763: ENABLE
// if not ignoreTarget then
5764: LD_EXP 45
5768: NOT
5769: IFFALSE 5773
// exit ;
5771: GO 5854
// for i in ignoreTarget do
5773: LD_ADDR_VAR 0 1
5777: PUSH
5778: LD_EXP 45
5782: PUSH
5783: FOR_IN
5784: IFFALSE 5852
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5786: LD_INT 22
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 91
5798: PUSH
5799: LD_VAR 0 1
5803: PUSH
5804: LD_INT 10
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_EXP 45
5825: DIFF
5826: PUSH
5827: LD_INT 1
5829: GREATER
5830: IFFALSE 5850
// begin ignoreTarget := ignoreTarget diff i ;
5832: LD_ADDR_EXP 45
5836: PUSH
5837: LD_EXP 45
5841: PUSH
5842: LD_VAR 0 1
5846: DIFF
5847: ST_TO_ADDR
// break ;
5848: GO 5852
// end ;
5850: GO 5783
5852: POP
5853: POP
// end ; end_of_file
5854: PPOPN 1
5856: END
// export function PrepareRussian ; var i ; begin
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
// if Difficulty < 3 then
5861: LD_OWVAR 67
5865: PUSH
5866: LD_INT 3
5868: LESS
5869: IFFALSE 5886
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5871: LD_INT 130
5873: PPUSH
5874: LD_INT 81
5876: PPUSH
5877: CALL_OW 428
5881: PPUSH
5882: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 3
5891: PPUSH
5892: LD_INT 2
5894: PPUSH
5895: LD_EXP 34
5899: PPUSH
5900: LD_EXP 35
5904: PPUSH
5905: CALL_OW 12
5909: PPUSH
5910: LD_INT 2
5912: PPUSH
5913: LD_INT 4
5915: PPUSH
5916: CALL 6388 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 8
5928: PPUSH
5929: LD_EXP 34
5933: PPUSH
5934: LD_EXP 35
5938: PPUSH
5939: CALL_OW 12
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 4
5949: PPUSH
5950: CALL 6388 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 3
5959: PPUSH
5960: LD_INT 67
5962: PPUSH
5963: LD_EXP 34
5967: PPUSH
5968: LD_EXP 35
5972: PPUSH
5973: CALL_OW 12
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: LD_INT 2
5983: PPUSH
5984: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 3
5993: PPUSH
5994: LD_INT 21
5996: PPUSH
5997: LD_EXP 34
6001: PPUSH
6002: LD_EXP 35
6006: PPUSH
6007: CALL_OW 12
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 6
6017: PPUSH
6018: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 3
6027: PPUSH
6028: LD_INT 17
6030: PPUSH
6031: LD_EXP 34
6035: PPUSH
6036: LD_EXP 35
6040: PPUSH
6041: CALL_OW 12
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: LD_INT 6
6051: PPUSH
6052: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6056: LD_INT 3
6058: PPUSH
6059: LD_INT 3
6061: PPUSH
6062: LD_INT 32
6064: PPUSH
6065: LD_EXP 34
6069: PPUSH
6070: LD_EXP 35
6074: PPUSH
6075: CALL_OW 12
6079: PPUSH
6080: LD_INT 4
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL 6388 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6090: LD_ADDR_VAR 0 2
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 3
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 21
6107: PUSH
6108: LD_INT 3
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: LD_INT 30
6117: PUSH
6118: LD_INT 32
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: PUSH
6135: FOR_IN
6136: IFFALSE 6176
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6138: LD_INT 3
6140: PPUSH
6141: LD_INT 3
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: LD_EXP 34
6153: PPUSH
6154: LD_EXP 35
6158: PPUSH
6159: CALL_OW 12
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 1
6169: PPUSH
6170: CALL 6388 0 6
6174: GO 6135
6176: POP
6177: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6178: LD_ADDR_VAR 0 2
6182: PUSH
6183: LD_INT 22
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 30
6205: PUSH
6206: LD_INT 31
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: PUSH
6223: FOR_IN
6224: IFFALSE 6252
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6226: LD_EXP 34
6230: PPUSH
6231: LD_EXP 35
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: LD_VAR 0 2
6245: PPUSH
6246: CALL 6498 0 2
6250: GO 6223
6252: POP
6253: POP
// end ; end_of_file
6254: LD_VAR 0 1
6258: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6259: LD_INT 0
6261: PPUSH
6262: PPUSH
6263: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6264: LD_ADDR_VAR 0 6
6268: PUSH
6269: LD_VAR 0 1
6273: PUSH
6274: LD_INT 1
6276: PPUSH
6277: LD_VAR 0 1
6281: PPUSH
6282: CALL_OW 12
6286: ARRAY
6287: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6288: LD_VAR 0 6
6292: PPUSH
6293: CALL_OW 258
6297: PUSH
6298: LD_INT 1
6300: EQUAL
6301: IFFALSE 6319
// Say ( speaker , dialogMID ) else
6303: LD_VAR 0 6
6307: PPUSH
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 88
6317: GO 6333
// Say ( speaker , dialogFID ) ;
6319: LD_VAR 0 6
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: CALL_OW 88
// result := speaker ;
6333: LD_ADDR_VAR 0 4
6337: PUSH
6338: LD_VAR 0 6
6342: ST_TO_ADDR
// end ;
6343: LD_VAR 0 4
6347: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6348: LD_INT 0
6350: PPUSH
6351: PPUSH
// for i in charactersList do
6352: LD_ADDR_VAR 0 4
6356: PUSH
6357: LD_VAR 0 1
6361: PUSH
6362: FOR_IN
6363: IFFALSE 6381
// SaveCharacters ( i , ident ) ;
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL_OW 38
6379: GO 6362
6381: POP
6382: POP
// end ;
6383: LD_VAR 0 3
6387: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
// for i = 1 to count do
6394: LD_ADDR_VAR 0 8
6398: PUSH
6399: DOUBLE
6400: LD_INT 1
6402: DEC
6403: ST_TO_ADDR
6404: LD_VAR 0 6
6408: PUSH
6409: FOR_TO
6410: IFFALSE 6491
// begin uc_side = side ;
6412: LD_ADDR_OWVAR 20
6416: PUSH
6417: LD_VAR 0 1
6421: ST_TO_ADDR
// uc_nation = nation ;
6422: LD_ADDR_OWVAR 21
6426: PUSH
6427: LD_VAR 0 2
6431: ST_TO_ADDR
// hc_gallery =  ;
6432: LD_ADDR_OWVAR 33
6436: PUSH
6437: LD_STRING 
6439: ST_TO_ADDR
// hc_name =  ;
6440: LD_ADDR_OWVAR 26
6444: PUSH
6445: LD_STRING 
6447: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6448: LD_INT 0
6450: PPUSH
6451: LD_VAR 0 5
6455: PPUSH
6456: LD_VAR 0 4
6460: PPUSH
6461: CALL_OW 380
// un = CreateHuman ;
6465: LD_ADDR_VAR 0 10
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6475: LD_VAR 0 10
6479: PPUSH
6480: LD_VAR 0 3
6484: PPUSH
6485: CALL_OW 52
// end ;
6489: GO 6409
6491: POP
6492: POP
// end ;
6493: LD_VAR 0 7
6497: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6498: LD_INT 0
6500: PPUSH
6501: PPUSH
6502: PPUSH
// uc_side := GetSide ( b ) ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_VAR 0 2
6512: PPUSH
6513: CALL_OW 255
6517: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6518: LD_ADDR_OWVAR 21
6522: PUSH
6523: LD_VAR 0 2
6527: PPUSH
6528: CALL_OW 248
6532: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6533: LD_INT 0
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_VAR 0 1
6543: PPUSH
6544: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6548: LD_ADDR_VAR 0 5
6552: PUSH
6553: LD_VAR 0 2
6557: PPUSH
6558: CALL_OW 254
6562: PUSH
6563: LD_INT 3
6565: MINUS
6566: ST_TO_ADDR
// if dir < 0 then
6567: LD_VAR 0 5
6571: PUSH
6572: LD_INT 0
6574: LESS
6575: IFFALSE 6591
// dir := 6 + dir ;
6577: LD_ADDR_VAR 0 5
6581: PUSH
6582: LD_INT 6
6584: PUSH
6585: LD_VAR 0 5
6589: PLUS
6590: ST_TO_ADDR
// un := CreateHuman ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: CALL_OW 44
6600: ST_TO_ADDR
// SetDir ( un , dir ) ;
6601: LD_VAR 0 4
6605: PPUSH
6606: LD_VAR 0 5
6610: PPUSH
6611: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6615: LD_VAR 0 4
6619: PPUSH
6620: LD_VAR 0 2
6624: PPUSH
6625: CALL_OW 52
// end ;
6629: LD_VAR 0 3
6633: RET
// export function PrepareDifficulty ; begin
6634: LD_INT 0
6636: PPUSH
// if Difficulty = 1 then
6637: LD_OWVAR 67
6641: PUSH
6642: LD_INT 1
6644: EQUAL
6645: IFFALSE 6663
// begin RuSolMinLevel = 2 ;
6647: LD_ADDR_EXP 34
6651: PUSH
6652: LD_INT 2
6654: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6655: LD_ADDR_EXP 35
6659: PUSH
6660: LD_INT 3
6662: ST_TO_ADDR
// end ; if Difficulty = 2 then
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 2
6670: EQUAL
6671: IFFALSE 6689
// begin RuSolMinLevel = 3 ;
6673: LD_ADDR_EXP 34
6677: PUSH
6678: LD_INT 3
6680: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6681: LD_ADDR_EXP 35
6685: PUSH
6686: LD_INT 5
6688: ST_TO_ADDR
// end ; if Difficulty = 3 then
6689: LD_OWVAR 67
6693: PUSH
6694: LD_INT 3
6696: EQUAL
6697: IFFALSE 6715
// begin RuSolMinLevel = 4 ;
6699: LD_ADDR_EXP 34
6703: PUSH
6704: LD_INT 4
6706: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6707: LD_ADDR_EXP 35
6711: PUSH
6712: LD_INT 6
6714: ST_TO_ADDR
// end ; end ;
6715: LD_VAR 0 1
6719: RET
// export function ShowQuery1 ; begin
6720: LD_INT 0
6722: PPUSH
// case query ( QKill ) of 1 :
6723: LD_STRING QKill
6725: PPUSH
6726: CALL_OW 97
6730: PUSH
6731: LD_INT 1
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6750
6739: POP
// begin result = 1 ;
6740: LD_ADDR_VAR 0 1
6744: PUSH
6745: LD_INT 1
6747: ST_TO_ADDR
// end ; 2 :
6748: GO 6789
6750: LD_INT 2
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6769
6758: POP
// begin result = 2 ;
6759: LD_ADDR_VAR 0 1
6763: PUSH
6764: LD_INT 2
6766: ST_TO_ADDR
// end ; 3 :
6767: GO 6789
6769: LD_INT 3
6771: DOUBLE
6772: EQUAL
6773: IFTRUE 6777
6775: GO 6788
6777: POP
// begin result = 3 ;
6778: LD_ADDR_VAR 0 1
6782: PUSH
6783: LD_INT 3
6785: ST_TO_ADDR
// end ; end ;
6786: GO 6789
6788: POP
// end ;
6789: LD_VAR 0 1
6793: RET
// export function ShowQuery2 ; begin
6794: LD_INT 0
6796: PPUSH
// case query ( QKill2 ) of 1 :
6797: LD_STRING QKill2
6799: PPUSH
6800: CALL_OW 97
6804: PUSH
6805: LD_INT 1
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 6824
6813: POP
// begin result = 1 ;
6814: LD_ADDR_VAR 0 1
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// end ; 2 :
6822: GO 6844
6824: LD_INT 2
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6843
6832: POP
// begin result = 2 ;
6833: LD_ADDR_VAR 0 1
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// end ; end ;
6841: GO 6844
6843: POP
// end ;
6844: LD_VAR 0 1
6848: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6849: LD_INT 0
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6856: LD_ADDR_VAR 0 8
6860: PUSH
6861: LD_INT 48
6863: PUSH
6864: LD_INT 49
6866: PUSH
6867: LD_INT 50
6869: PUSH
6870: LD_INT 20
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: LD_INT 51
6878: PUSH
6879: LD_INT 52
6881: PUSH
6882: LD_INT 69
6884: PUSH
6885: LD_INT 39
6887: PUSH
6888: LD_INT 34
6890: PUSH
6891: LD_INT 40
6893: PUSH
6894: LD_INT 53
6896: PUSH
6897: LD_INT 71
6899: PUSH
6900: LD_INT 57
6902: PUSH
6903: LD_INT 58
6905: PUSH
6906: LD_INT 44
6908: PUSH
6909: LD_INT 32
6911: PUSH
6912: LD_INT 27
6914: PUSH
6915: LD_INT 23
6917: PUSH
6918: LD_INT 33
6920: PUSH
6921: LD_INT 59
6923: PUSH
6924: LD_INT 54
6926: PUSH
6927: LD_INT 55
6929: PUSH
6930: LD_INT 56
6932: PUSH
6933: LD_INT 63
6935: PUSH
6936: LD_INT 64
6938: PUSH
6939: LD_INT 65
6941: PUSH
6942: LD_INT 30
6944: PUSH
6945: LD_INT 31
6947: PUSH
6948: LD_INT 21
6950: PUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 25
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: DOUBLE
6997: LD_INT 1
6999: DEC
7000: ST_TO_ADDR
7001: LD_VAR 0 8
7005: PUSH
7006: FOR_TO
7007: IFFALSE 7083
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
7009: LD_VAR 0 8
7013: PUSH
7014: LD_VAR 0 5
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 321
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: PUSH
7034: LD_VAR 0 8
7038: PUSH
7039: LD_VAR 0 5
7043: ARRAY
7044: PPUSH
7045: LD_VAR 0 3
7049: PPUSH
7050: CALL_OW 482
7054: PUSH
7055: LD_INT 1
7057: EQUAL
7058: AND
7059: IFFALSE 7081
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7061: LD_VAR 0 2
7065: PPUSH
7066: LD_VAR 0 8
7070: PUSH
7071: LD_VAR 0 5
7075: ARRAY
7076: PPUSH
7077: CALL_OW 184
7081: GO 7006
7083: POP
7084: POP
// end ;
7085: LD_VAR 0 4
7089: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7090: LD_INT 0
7092: PPUSH
7093: PPUSH
7094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7095: LD_INT 22
7097: PUSH
7098: LD_VAR 0 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 69
7125: PUSH
7126: LD_VAR 0 3
7130: LESSEQUAL
7131: IFFALSE 7239
// begin for i = 1 to vehCount do
7133: LD_ADDR_VAR 0 9
7137: PUSH
7138: DOUBLE
7139: LD_INT 1
7141: DEC
7142: ST_TO_ADDR
7143: LD_VAR 0 3
7147: PUSH
7148: FOR_TO
7149: IFFALSE 7237
// begin weapon = weaponTab [ i ] ;
7151: LD_ADDR_VAR 0 10
7155: PUSH
7156: LD_VAR 0 4
7160: PUSH
7161: LD_VAR 0 9
7165: ARRAY
7166: ST_TO_ADDR
// if weapon = 46 then
7167: LD_VAR 0 10
7171: PUSH
7172: LD_INT 46
7174: EQUAL
7175: IFFALSE 7206
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7177: LD_VAR 0 2
7181: PPUSH
7182: LD_INT 24
7184: PPUSH
7185: LD_VAR 0 5
7189: PPUSH
7190: LD_VAR 0 6
7194: PPUSH
7195: LD_VAR 0 10
7199: PPUSH
7200: CALL_OW 185
// end else
7204: GO 7235
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7206: LD_VAR 0 2
7210: PPUSH
7211: LD_VAR 0 7
7215: PPUSH
7216: LD_VAR 0 5
7220: PPUSH
7221: LD_VAR 0 6
7225: PPUSH
7226: LD_VAR 0 10
7230: PPUSH
7231: CALL_OW 185
// end ; end ;
7235: GO 7148
7237: POP
7238: POP
// end ; end ;
7239: LD_VAR 0 8
7243: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7250: LD_ADDR_VAR 0 8
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_VAR 0 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 21
7269: PUSH
7270: LD_INT 2
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 3
7279: PUSH
7280: LD_INT 24
7282: PUSH
7283: LD_INT 650
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 69
7303: ST_TO_ADDR
// if damageVehicles > 0 then
7304: LD_VAR 0 8
7308: PUSH
7309: LD_INT 0
7311: GREATER
7312: IFFALSE 7333
// ComMoveXY ( damageVehicles , repX , repY ) ;
7314: LD_VAR 0 8
7318: PPUSH
7319: LD_VAR 0 3
7323: PPUSH
7324: LD_VAR 0 4
7328: PPUSH
7329: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7333: LD_VAR 0 8
7337: PPUSH
7338: LD_INT 95
7340: PUSH
7341: LD_VAR 0 2
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 58
7355: PUSH
7356: EMPTY
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 72
7371: PUSH
7372: LD_INT 0
7374: GREATER
7375: IFFALSE 7442
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7377: LD_ADDR_VAR 0 6
7381: PUSH
7382: LD_VAR 0 8
7386: PPUSH
7387: LD_INT 95
7389: PUSH
7390: LD_VAR 0 2
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: EMPTY
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 72
7420: PUSH
7421: FOR_IN
7422: IFFALSE 7440
// ComExitVehicle ( UnitsInside ( i ) ) ;
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 313
7433: PPUSH
7434: CALL_OW 121
7438: GO 7421
7440: POP
7441: POP
// end ;
7442: LD_VAR 0 5
7446: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7447: LD_INT 0
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
7454: PPUSH
7455: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7456: LD_ADDR_VAR 0 8
7460: PUSH
7461: LD_INT 22
7463: PUSH
7464: LD_VAR 0 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 21
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 24
7485: PUSH
7486: LD_INT 660
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: LD_INT 58
7498: PUSH
7499: EMPTY
7500: LIST
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 34
7507: PUSH
7508: LD_INT 43
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 34
7517: PUSH
7518: LD_INT 44
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 34
7527: PUSH
7528: LD_INT 46
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PPUSH
7552: CALL_OW 69
7556: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7557: LD_INT 22
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 21
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 24
7581: PUSH
7582: LD_INT 1000
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: LD_INT 58
7594: PUSH
7595: EMPTY
7596: LIST
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 34
7603: PUSH
7604: LD_INT 43
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 34
7613: PUSH
7614: LD_INT 44
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 34
7623: PUSH
7624: LD_INT 46
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 69
7652: PUSH
7653: LD_INT 5
7655: PUSH
7656: LD_INT 6
7658: PUSH
7659: LD_INT 6
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: LD_OWVAR 67
7671: ARRAY
7672: EQUAL
7673: IFFALSE 7929
// if seeEnemy = 0 then
7675: LD_VAR 0 11
7679: PUSH
7680: LD_INT 0
7682: EQUAL
7683: IFFALSE 7929
// repeat wait ( 0 0$1 ) ;
7685: LD_INT 35
7687: PPUSH
7688: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: LD_INT 22
7699: PUSH
7700: LD_VAR 0 1
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 21
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 24
7721: PUSH
7722: LD_INT 660
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 3
7731: PUSH
7732: LD_INT 58
7734: PUSH
7735: EMPTY
7736: LIST
7737: PUSH
7738: LD_INT 2
7740: PUSH
7741: LD_INT 34
7743: PUSH
7744: LD_INT 43
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 34
7753: PUSH
7754: LD_INT 44
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 34
7763: PUSH
7764: LD_INT 46
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: PPUSH
7788: CALL_OW 69
7792: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7793: LD_INT 22
7795: PUSH
7796: LD_VAR 0 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 95
7807: PUSH
7808: LD_VAR 0 2
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: NOT
7826: PUSH
7827: LD_VAR 0 11
7831: PUSH
7832: LD_INT 0
7834: EQUAL
7835: AND
7836: IFFALSE 7891
// for i := 1 to wayX do
7838: LD_ADDR_VAR 0 6
7842: PUSH
7843: DOUBLE
7844: LD_INT 1
7846: DEC
7847: ST_TO_ADDR
7848: LD_VAR 0 3
7852: PUSH
7853: FOR_TO
7854: IFFALSE 7889
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7856: LD_VAR 0 8
7860: PPUSH
7861: LD_VAR 0 3
7865: PUSH
7866: LD_VAR 0 6
7870: ARRAY
7871: PPUSH
7872: LD_VAR 0 4
7876: PUSH
7877: LD_VAR 0 6
7881: ARRAY
7882: PPUSH
7883: CALL_OW 114
7887: GO 7853
7889: POP
7890: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7891: LD_INT 22
7893: PUSH
7894: LD_VAR 0 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 95
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PPUSH
7919: CALL_OW 69
7923: PUSH
7924: LD_INT 0
7926: GREATER
7927: IFFALSE 7685
// seeEnemy = 1 ;
7929: LD_ADDR_VAR 0 11
7933: PUSH
7934: LD_INT 1
7936: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7937: LD_INT 35
7939: PPUSH
7940: CALL_OW 67
// for j in vehiclesOK do
7944: LD_ADDR_VAR 0 7
7948: PUSH
7949: LD_VAR 0 8
7953: PUSH
7954: FOR_IN
7955: IFFALSE 8025
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7957: LD_ADDR_VAR 0 9
7961: PUSH
7962: LD_INT 81
7964: PUSH
7965: LD_VAR 0 1
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 101
7976: PUSH
7977: LD_INT 1
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 69
7992: PUSH
7993: LD_EXP 45
7997: DIFF
7998: PPUSH
7999: LD_VAR 0 7
8003: PPUSH
8004: CALL_OW 74
8008: ST_TO_ADDR
// ComAttackUnit ( j , target1 ) ;
8009: LD_VAR 0 7
8013: PPUSH
8014: LD_VAR 0 9
8018: PPUSH
8019: CALL_OW 115
// end ;
8023: GO 7954
8025: POP
8026: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8027: LD_INT 22
8029: PUSH
8030: LD_VAR 0 1
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PUSH
8039: LD_INT 21
8041: PUSH
8042: LD_INT 2
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 24
8051: PUSH
8052: LD_INT 1000
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 3
8061: PUSH
8062: LD_INT 58
8064: PUSH
8065: EMPTY
8066: LIST
8067: PUSH
8068: LD_INT 2
8070: PUSH
8071: LD_INT 34
8073: PUSH
8074: LD_INT 43
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 34
8083: PUSH
8084: LD_INT 44
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 34
8093: PUSH
8094: LD_INT 46
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: PUSH
8123: LD_INT 0
8125: EQUAL
8126: IFFALSE 7937
// seeEnemy = 0 ;
8128: LD_ADDR_VAR 0 11
8132: PUSH
8133: LD_INT 0
8135: ST_TO_ADDR
// end ;
8136: LD_VAR 0 5
8140: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8141: LD_INT 0
8143: PPUSH
8144: PPUSH
8145: PPUSH
8146: PPUSH
8147: PPUSH
8148: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8149: LD_ADDR_VAR 0 8
8153: PUSH
8154: LD_VAR 0 2
8158: PPUSH
8159: CALL_OW 313
8163: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8164: LD_ADDR_VAR 0 9
8168: PUSH
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_INT 22
8176: PUSH
8177: LD_VAR 0 1
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 24
8198: PUSH
8199: LD_INT 750
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 3
8208: PUSH
8209: LD_INT 54
8211: PUSH
8212: EMPTY
8213: LIST
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: PPUSH
8225: CALL_OW 70
8229: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8230: LD_ADDR_VAR 0 6
8234: PUSH
8235: LD_VAR 0 3
8239: PPUSH
8240: LD_INT 22
8242: PUSH
8243: LD_VAR 0 1
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: LD_INT 24
8267: PUSH
8268: LD_INT 1000
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: PPUSH
8287: CALL_OW 70
8291: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8292: LD_VAR 0 6
8296: NOT
8297: PUSH
8298: LD_INT 22
8300: PUSH
8301: LD_VAR 0 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 25
8312: PUSH
8313: LD_INT 2
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 24
8322: PUSH
8323: LD_INT 250
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PPUSH
8335: CALL_OW 69
8339: NOT
8340: AND
8341: IFFALSE 8345
// exit ;
8343: GO 8527
// if buildings_list > 0 and engineerOkInside then
8345: LD_VAR 0 6
8349: PUSH
8350: LD_INT 0
8352: GREATER
8353: PUSH
8354: LD_VAR 0 8
8358: AND
8359: IFFALSE 8370
// ComExitBuilding ( engineerOkInside ) ;
8361: LD_VAR 0 8
8365: PPUSH
8366: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8370: LD_VAR 0 6
8374: PUSH
8375: LD_INT 0
8377: GREATER
8378: PUSH
8379: LD_VAR 0 9
8383: PUSH
8384: LD_INT 0
8386: GREATER
8387: AND
8388: IFFALSE 8408
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8390: LD_VAR 0 9
8394: PPUSH
8395: LD_VAR 0 6
8399: PUSH
8400: LD_INT 1
8402: ARRAY
8403: PPUSH
8404: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8408: LD_VAR 0 6
8412: PUSH
8413: LD_INT 0
8415: EQUAL
8416: PUSH
8417: LD_VAR 0 4
8421: PUSH
8422: LD_INT 0
8424: EQUAL
8425: AND
8426: PUSH
8427: LD_VAR 0 9
8431: PUSH
8432: LD_INT 0
8434: GREATER
8435: AND
8436: IFFALSE 8452
// ComEnterUnit ( engineerOkOutside , building ) ;
8438: LD_VAR 0 9
8442: PPUSH
8443: LD_VAR 0 2
8447: PPUSH
8448: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8452: LD_VAR 0 9
8456: PUSH
8457: LD_INT 0
8459: GREATER
8460: PUSH
8461: LD_VAR 0 6
8465: PUSH
8466: LD_INT 0
8468: EQUAL
8469: AND
8470: PUSH
8471: LD_VAR 0 4
8475: PUSH
8476: LD_INT 0
8478: GREATER
8479: AND
8480: IFFALSE 8527
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8482: LD_VAR 0 9
8486: PPUSH
8487: LD_VAR 0 4
8491: PUSH
8492: LD_INT 1
8494: ARRAY
8495: PPUSH
8496: LD_VAR 0 4
8500: PUSH
8501: LD_INT 2
8503: ARRAY
8504: PPUSH
8505: LD_VAR 0 4
8509: PUSH
8510: LD_INT 3
8512: ARRAY
8513: PPUSH
8514: LD_VAR 0 4
8518: PUSH
8519: LD_INT 4
8521: ARRAY
8522: PPUSH
8523: CALL_OW 145
// end ;
8527: LD_VAR 0 5
8531: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8532: LD_INT 0
8534: PPUSH
8535: PPUSH
8536: PPUSH
8537: PPUSH
8538: PPUSH
8539: PPUSH
8540: PPUSH
8541: PPUSH
8542: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8543: LD_ADDR_VAR 0 6
8547: PUSH
8548: LD_INT 22
8550: PUSH
8551: LD_VAR 0 1
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 25
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 23
8572: PUSH
8573: LD_INT 2
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 24
8582: PUSH
8583: LD_INT 251
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: PPUSH
8596: CALL_OW 69
8600: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8601: LD_ADDR_VAR 0 7
8605: PUSH
8606: LD_VAR 0 3
8610: PPUSH
8611: LD_INT 22
8613: PUSH
8614: LD_VAR 0 1
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 23
8625: PUSH
8626: LD_INT 2
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: LD_INT 4
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 50
8645: PUSH
8646: EMPTY
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 70
8659: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8660: LD_ADDR_VAR 0 10
8664: PUSH
8665: LD_VAR 0 3
8669: PPUSH
8670: LD_INT 22
8672: PUSH
8673: LD_VAR 0 1
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 21
8684: PUSH
8685: LD_INT 1
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 3
8694: PUSH
8695: LD_INT 25
8697: PUSH
8698: LD_INT 3
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 3
8711: PUSH
8712: LD_INT 24
8714: PUSH
8715: LD_INT 750
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: PPUSH
8732: CALL_OW 70
8736: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8737: LD_ADDR_VAR 0 11
8741: PUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: LD_INT 22
8749: PUSH
8750: LD_VAR 0 1
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 21
8761: PUSH
8762: LD_INT 1
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: LD_INT 3
8771: PUSH
8772: LD_INT 25
8774: PUSH
8775: LD_INT 3
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 3
8788: PUSH
8789: LD_INT 24
8791: PUSH
8792: LD_INT 1000
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: PPUSH
8809: CALL_OW 70
8813: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8814: LD_VAR 0 10
8818: NOT
8819: PUSH
8820: LD_VAR 0 11
8824: NOT
8825: AND
8826: PUSH
8827: LD_VAR 0 6
8831: NOT
8832: AND
8833: IFFALSE 8837
// exit ;
8835: GO 9071
// if damageUnits > 0 and sci_list > 0 then
8837: LD_VAR 0 10
8841: PUSH
8842: LD_INT 0
8844: GREATER
8845: PUSH
8846: LD_VAR 0 6
8850: PUSH
8851: LD_INT 0
8853: GREATER
8854: AND
8855: IFFALSE 8871
// ComMoveToArea ( damageUnits , healArea ) ;
8857: LD_VAR 0 10
8861: PPUSH
8862: LD_VAR 0 2
8866: PPUSH
8867: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8871: LD_VAR 0 11
8875: PUSH
8876: LD_INT 0
8878: GREATER
8879: PUSH
8880: LD_VAR 0 6
8884: PUSH
8885: LD_INT 0
8887: GREATER
8888: AND
8889: IFFALSE 8900
// ComExitBuilding ( sci_list ) ;
8891: LD_VAR 0 6
8895: PPUSH
8896: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8900: LD_VAR 0 11
8904: PUSH
8905: LD_INT 0
8907: GREATER
8908: PUSH
8909: LD_VAR 0 7
8913: PUSH
8914: LD_INT 0
8916: GREATER
8917: AND
8918: IFFALSE 8938
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8920: LD_VAR 0 7
8924: PPUSH
8925: LD_VAR 0 11
8929: PUSH
8930: LD_INT 1
8932: ARRAY
8933: PPUSH
8934: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8938: LD_VAR 0 10
8942: PUSH
8943: LD_INT 0
8945: EQUAL
8946: PUSH
8947: LD_VAR 0 11
8951: PUSH
8952: LD_INT 0
8954: EQUAL
8955: AND
8956: PUSH
8957: LD_VAR 0 7
8961: PUSH
8962: LD_INT 0
8964: GREATER
8965: AND
8966: IFFALSE 9071
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8968: LD_ADDR_VAR 0 12
8972: PUSH
8973: LD_INT 22
8975: PUSH
8976: LD_VAR 0 1
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: LD_INT 21
8987: PUSH
8988: LD_INT 3
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 8
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PPUSH
9010: CALL_OW 69
9014: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9015: LD_ADDR_VAR 0 13
9019: PUSH
9020: LD_INT 1
9022: PPUSH
9023: LD_VAR 0 12
9027: PPUSH
9028: CALL_OW 12
9032: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9033: LD_VAR 0 7
9037: PPUSH
9038: LD_INT 3
9040: PUSH
9041: LD_INT 60
9043: PUSH
9044: EMPTY
9045: LIST
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 72
9055: PPUSH
9056: LD_VAR 0 12
9060: PUSH
9061: LD_VAR 0 13
9065: ARRAY
9066: PPUSH
9067: CALL_OW 120
// end ; end ;
9071: LD_VAR 0 5
9075: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9076: LD_INT 0
9078: PPUSH
9079: PPUSH
9080: PPUSH
9081: PPUSH
// tmpTab = [ ] ;
9082: LD_ADDR_VAR 0 6
9086: PUSH
9087: EMPTY
9088: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9089: LD_INT 22
9091: PUSH
9092: LD_VAR 0 1
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 32
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL_OW 69
9119: PUSH
9120: LD_INT 0
9122: GREATER
9123: IFFALSE 9206
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9125: LD_ADDR_VAR 0 4
9129: PUSH
9130: LD_INT 22
9132: PUSH
9133: LD_VAR 0 1
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 30
9144: PUSH
9145: LD_INT 32
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PPUSH
9156: CALL_OW 69
9160: PUSH
9161: FOR_IN
9162: IFFALSE 9204
// begin for j in UnitsInside ( i ) do
9164: LD_ADDR_VAR 0 5
9168: PUSH
9169: LD_VAR 0 4
9173: PPUSH
9174: CALL_OW 313
9178: PUSH
9179: FOR_IN
9180: IFFALSE 9200
// tmpTab = tmpTab ^ j ;
9182: LD_ADDR_VAR 0 6
9186: PUSH
9187: LD_VAR 0 6
9191: PUSH
9192: LD_VAR 0 5
9196: ADD
9197: ST_TO_ADDR
9198: GO 9179
9200: POP
9201: POP
// end ;
9202: GO 9161
9204: POP
9205: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9206: LD_VAR 0 6
9210: PPUSH
9211: LD_VAR 0 2
9215: PPUSH
9216: CALL_OW 250
9220: PPUSH
9221: LD_VAR 0 2
9225: PPUSH
9226: CALL_OW 251
9230: PPUSH
9231: CALL_OW 114
// end ;
9235: LD_VAR 0 3
9239: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9240: LD_INT 0
9242: PPUSH
9243: PPUSH
9244: PPUSH
9245: PPUSH
// enable ;
9246: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9247: LD_ADDR_VAR 0 7
9251: PUSH
9252: LD_VAR 0 3
9256: PPUSH
9257: CALL_OW 435
9261: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9262: LD_ADDR_VAR 0 6
9266: PUSH
9267: LD_INT 22
9269: PUSH
9270: LD_VAR 0 1
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 34
9281: PUSH
9282: LD_VAR 0 2
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PPUSH
9295: CALL_OW 69
9299: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9300: LD_VAR 0 6
9304: PUSH
9305: LD_INT 0
9307: GREATER
9308: PUSH
9309: LD_VAR 0 3
9313: PPUSH
9314: CALL_OW 435
9318: AND
9319: PUSH
9320: LD_VAR 0 7
9324: PUSH
9325: LD_INT 0
9327: GREATER
9328: AND
9329: IFFALSE 9378
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9331: LD_VAR 0 6
9335: PUSH
9336: LD_INT 1
9338: ARRAY
9339: PPUSH
9340: LD_VAR 0 7
9344: PUSH
9345: LD_INT 1
9347: ARRAY
9348: PPUSH
9349: LD_VAR 0 7
9353: PUSH
9354: LD_INT 2
9356: ARRAY
9357: PPUSH
9358: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9362: LD_VAR 0 6
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: PPUSH
9371: LD_INT 100
9373: PPUSH
9374: CALL_OW 240
// end ; end ;
9378: LD_VAR 0 4
9382: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9383: LD_INT 0
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
9389: PPUSH
9390: PPUSH
9391: PPUSH
9392: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9393: LD_ADDR_VAR 0 6
9397: PUSH
9398: LD_VAR 0 2
9402: PPUSH
9403: LD_INT 22
9405: PUSH
9406: LD_VAR 0 1
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 56
9417: PUSH
9418: EMPTY
9419: LIST
9420: PUSH
9421: LD_INT 24
9423: PUSH
9424: LD_INT 700
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 3
9433: PUSH
9434: LD_INT 60
9436: PUSH
9437: EMPTY
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: LD_INT 2
9446: PUSH
9447: LD_INT 25
9449: PUSH
9450: LD_INT 1
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 25
9459: PUSH
9460: LD_INT 5
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 8
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 9
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: PPUSH
9501: CALL_OW 70
9505: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9506: LD_ADDR_VAR 0 7
9510: PUSH
9511: LD_VAR 0 2
9515: PPUSH
9516: LD_INT 22
9518: PUSH
9519: LD_VAR 0 1
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 30
9530: PUSH
9531: LD_INT 32
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 58
9540: PUSH
9541: EMPTY
9542: LIST
9543: PUSH
9544: LD_INT 24
9546: PUSH
9547: LD_INT 251
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 70
9564: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9565: LD_ADDR_VAR 0 9
9569: PUSH
9570: LD_VAR 0 2
9574: PPUSH
9575: LD_INT 22
9577: PUSH
9578: LD_VAR 0 1
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 30
9592: PUSH
9593: LD_INT 4
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 30
9602: PUSH
9603: LD_INT 5
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 24
9617: PUSH
9618: LD_INT 251
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 70
9634: ST_TO_ADDR
// if barrackList > 0 then
9635: LD_VAR 0 9
9639: PUSH
9640: LD_INT 0
9642: GREATER
9643: IFFALSE 9791
// begin if turretList = 0 then
9645: LD_VAR 0 7
9649: PUSH
9650: LD_INT 0
9652: EQUAL
9653: IFFALSE 9695
// begin if soldiers_list > 0 then
9655: LD_VAR 0 6
9659: PUSH
9660: LD_INT 0
9662: GREATER
9663: IFFALSE 9693
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9665: LD_VAR 0 6
9669: PPUSH
9670: LD_VAR 0 9
9674: PUSH
9675: LD_INT 1
9677: PPUSH
9678: LD_VAR 0 9
9682: PPUSH
9683: CALL_OW 12
9687: ARRAY
9688: PPUSH
9689: CALL_OW 120
// end else
9693: GO 9791
// begin for i in barrackList do
9695: LD_ADDR_VAR 0 4
9699: PUSH
9700: LD_VAR 0 9
9704: PUSH
9705: FOR_IN
9706: IFFALSE 9789
// begin insideUnits = UnitsInside ( i ) ;
9708: LD_ADDR_VAR 0 10
9712: PUSH
9713: LD_VAR 0 4
9717: PPUSH
9718: CALL_OW 313
9722: ST_TO_ADDR
// if insideUnits > 0 then
9723: LD_VAR 0 10
9727: PUSH
9728: LD_INT 0
9730: GREATER
9731: IFFALSE 9755
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9733: LD_VAR 0 10
9737: PUSH
9738: LD_INT 1
9740: ARRAY
9741: PPUSH
9742: LD_VAR 0 7
9746: PUSH
9747: LD_INT 1
9749: ARRAY
9750: PPUSH
9751: CALL_OW 120
// if soldiers_list > 0 then
9755: LD_VAR 0 6
9759: PUSH
9760: LD_INT 0
9762: GREATER
9763: IFFALSE 9787
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9765: LD_VAR 0 6
9769: PUSH
9770: LD_INT 1
9772: ARRAY
9773: PPUSH
9774: LD_VAR 0 7
9778: PUSH
9779: LD_INT 1
9781: ARRAY
9782: PPUSH
9783: CALL_OW 120
// end ;
9787: GO 9705
9789: POP
9790: POP
// end ; end ; end ;
9791: LD_VAR 0 3
9795: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
9801: PPUSH
9802: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9803: LD_ADDR_VAR 0 6
9807: PUSH
9808: LD_INT 22
9810: PUSH
9811: LD_VAR 0 1
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: LD_INT 30
9825: PUSH
9826: LD_INT 31
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 30
9835: PUSH
9836: LD_INT 32
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 30
9845: PUSH
9846: LD_INT 33
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 30
9855: PUSH
9856: LD_INT 4
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 30
9865: PUSH
9866: LD_INT 5
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9890: LD_ADDR_VAR 0 7
9894: PUSH
9895: LD_INT 22
9897: PUSH
9898: LD_VAR 0 2
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 58
9919: PUSH
9920: EMPTY
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: PPUSH
9928: CALL_OW 69
9932: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9933: LD_VAR 0 6
9937: PUSH
9938: LD_INT 0
9940: GREATER
9941: PUSH
9942: LD_VAR 0 7
9946: PUSH
9947: LD_INT 0
9949: GREATER
9950: AND
9951: IFFALSE 10021
// begin for i in turretsList do
9953: LD_ADDR_VAR 0 4
9957: PUSH
9958: LD_VAR 0 6
9962: PUSH
9963: FOR_IN
9964: IFFALSE 10019
// begin for j in enemyBuildings do
9966: LD_ADDR_VAR 0 5
9970: PUSH
9971: LD_VAR 0 7
9975: PUSH
9976: FOR_IN
9977: IFFALSE 10015
// begin if GetDistUnits ( i , j ) < 20 then
9979: LD_VAR 0 4
9983: PPUSH
9984: LD_VAR 0 5
9988: PPUSH
9989: CALL_OW 296
9993: PUSH
9994: LD_INT 20
9996: LESS
9997: IFFALSE 10013
// begin ComAttackUnit ( i , j ) ;
9999: LD_VAR 0 4
10003: PPUSH
10004: LD_VAR 0 5
10008: PPUSH
10009: CALL_OW 115
// end ; end ;
10013: GO 9976
10015: POP
10016: POP
// end ;
10017: GO 9963
10019: POP
10020: POP
// end ; end ;
10021: LD_VAR 0 3
10025: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10026: LD_INT 0
10028: PPUSH
10029: PPUSH
10030: PPUSH
10031: PPUSH
10032: PPUSH
10033: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10034: LD_ADDR_VAR 0 8
10038: PUSH
10039: LD_INT 22
10041: PUSH
10042: LD_VAR 0 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 21
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 34
10063: PUSH
10064: LD_INT 52
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 69
10080: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10081: LD_ADDR_VAR 0 9
10085: PUSH
10086: LD_INT 22
10088: PUSH
10089: LD_VAR 0 1
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 21
10100: PUSH
10101: LD_INT 3
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 3
10110: PUSH
10111: LD_INT 24
10113: PUSH
10114: LD_INT 1000
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: PUSH
10130: EMPTY
10131: LIST
10132: PPUSH
10133: CALL_OW 69
10137: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10138: LD_VAR 0 9
10142: PUSH
10143: LD_INT 0
10145: GREATER
10146: PUSH
10147: LD_VAR 0 8
10151: PPUSH
10152: LD_INT 24
10154: PUSH
10155: LD_INT 750
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 72
10166: PUSH
10167: LD_INT 0
10169: GREATER
10170: AND
10171: IFFALSE 10206
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10173: LD_VAR 0 8
10177: PPUSH
10178: LD_INT 24
10180: PUSH
10181: LD_INT 750
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 72
10192: PPUSH
10193: LD_VAR 0 9
10197: PUSH
10198: LD_INT 1
10200: ARRAY
10201: PPUSH
10202: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10206: LD_VAR 0 8
10210: PPUSH
10211: LD_INT 3
10213: PUSH
10214: LD_INT 24
10216: PUSH
10217: LD_INT 750
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PPUSH
10228: CALL_OW 72
10232: PUSH
10233: LD_INT 0
10235: GREATER
10236: IFFALSE 10274
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10238: LD_VAR 0 8
10242: PPUSH
10243: LD_INT 3
10245: PUSH
10246: LD_INT 24
10248: PUSH
10249: LD_INT 750
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PPUSH
10260: CALL_OW 72
10264: PPUSH
10265: LD_VAR 0 2
10269: PPUSH
10270: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10274: LD_VAR 0 8
10278: PUSH
10279: LD_INT 0
10281: GREATER
10282: PUSH
10283: LD_VAR 0 9
10287: PUSH
10288: LD_INT 0
10290: EQUAL
10291: AND
10292: PUSH
10293: LD_VAR 0 3
10297: PUSH
10298: LD_INT 0
10300: GREATER
10301: AND
10302: IFFALSE 10349
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10304: LD_VAR 0 8
10308: PPUSH
10309: LD_VAR 0 3
10313: PUSH
10314: LD_INT 1
10316: ARRAY
10317: PPUSH
10318: LD_VAR 0 3
10322: PUSH
10323: LD_INT 2
10325: ARRAY
10326: PPUSH
10327: LD_VAR 0 3
10331: PUSH
10332: LD_INT 3
10334: ARRAY
10335: PPUSH
10336: LD_VAR 0 3
10340: PUSH
10341: LD_INT 4
10343: ARRAY
10344: PPUSH
10345: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10349: LD_VAR 0 2
10353: PPUSH
10354: LD_INT 22
10356: PUSH
10357: LD_VAR 0 1
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 21
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 34
10378: PUSH
10379: LD_INT 52
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 3
10388: PUSH
10389: LD_INT 24
10391: PUSH
10392: LD_INT 750
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: PPUSH
10409: CALL_OW 70
10413: PUSH
10414: LD_INT 0
10416: GREATER
10417: IFFALSE 10619
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10419: LD_ADDR_VAR 0 5
10423: PUSH
10424: LD_VAR 0 2
10428: PPUSH
10429: LD_INT 22
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 21
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 34
10453: PUSH
10454: LD_INT 52
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 3
10463: PUSH
10464: LD_INT 24
10466: PUSH
10467: LD_INT 750
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 70
10488: PUSH
10489: FOR_IN
10490: IFFALSE 10617
// begin mechTmp = UnitsInside ( i ) ;
10492: LD_ADDR_VAR 0 6
10496: PUSH
10497: LD_VAR 0 5
10501: PPUSH
10502: CALL_OW 313
10506: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10507: LD_VAR 0 6
10511: PPUSH
10512: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10516: LD_VAR 0 6
10520: PPUSH
10521: LD_VAR 0 7
10525: PPUSH
10526: CALL_OW 189
// wait ( 0 0$2 ) ;
10530: LD_INT 70
10532: PPUSH
10533: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10537: LD_VAR 0 6
10541: PPUSH
10542: LD_VAR 0 2
10546: PPUSH
10547: LD_INT 22
10549: PUSH
10550: LD_VAR 0 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 21
10561: PUSH
10562: LD_INT 2
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 34
10571: PUSH
10572: LD_INT 52
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 24
10581: PUSH
10582: LD_INT 1000
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 58
10591: PUSH
10592: EMPTY
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 70
10606: PUSH
10607: LD_INT 1
10609: ARRAY
10610: PPUSH
10611: CALL_OW 180
// end ;
10615: GO 10489
10617: POP
10618: POP
// end ; end ;
10619: LD_VAR 0 4
10623: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10624: LD_INT 0
10626: PPUSH
10627: PPUSH
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
10632: PPUSH
10633: PPUSH
10634: PPUSH
10635: PPUSH
10636: PPUSH
// for i = 1 to medicCount do
10637: LD_ADDR_VAR 0 14
10641: PUSH
10642: DOUBLE
10643: LD_INT 1
10645: DEC
10646: ST_TO_ADDR
10647: LD_VAR 0 7
10651: PUSH
10652: FOR_TO
10653: IFFALSE 10735
// begin uc_side = side ;
10655: LD_ADDR_OWVAR 20
10659: PUSH
10660: LD_VAR 0 1
10664: ST_TO_ADDR
// uc_nation = nation ;
10665: LD_ADDR_OWVAR 21
10669: PUSH
10670: LD_VAR 0 2
10674: ST_TO_ADDR
// hc_name =  ;
10675: LD_ADDR_OWVAR 26
10679: PUSH
10680: LD_STRING 
10682: ST_TO_ADDR
// hc_gallery =  ;
10683: LD_ADDR_OWVAR 33
10687: PUSH
10688: LD_STRING 
10690: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10691: LD_INT 0
10693: PPUSH
10694: LD_INT 4
10696: PPUSH
10697: LD_VAR 0 8
10701: PPUSH
10702: CALL_OW 380
// un = CreateHuman ;
10706: LD_ADDR_VAR 0 16
10710: PUSH
10711: CALL_OW 44
10715: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10716: LD_VAR 0 16
10720: PPUSH
10721: LD_VAR 0 9
10725: PPUSH
10726: LD_INT 0
10728: PPUSH
10729: CALL_OW 49
// end ;
10733: GO 10652
10735: POP
10736: POP
// for i = 1 to soldierCount do
10737: LD_ADDR_VAR 0 14
10741: PUSH
10742: DOUBLE
10743: LD_INT 1
10745: DEC
10746: ST_TO_ADDR
10747: LD_VAR 0 3
10751: PUSH
10752: FOR_TO
10753: IFFALSE 10835
// begin uc_side = side ;
10755: LD_ADDR_OWVAR 20
10759: PUSH
10760: LD_VAR 0 1
10764: ST_TO_ADDR
// uc_nation = nation ;
10765: LD_ADDR_OWVAR 21
10769: PUSH
10770: LD_VAR 0 2
10774: ST_TO_ADDR
// hc_name =  ;
10775: LD_ADDR_OWVAR 26
10779: PUSH
10780: LD_STRING 
10782: ST_TO_ADDR
// hc_gallery =  ;
10783: LD_ADDR_OWVAR 33
10787: PUSH
10788: LD_STRING 
10790: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10791: LD_INT 0
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: LD_VAR 0 8
10801: PPUSH
10802: CALL_OW 380
// un = CreateHuman ;
10806: LD_ADDR_VAR 0 16
10810: PUSH
10811: CALL_OW 44
10815: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10816: LD_VAR 0 16
10820: PPUSH
10821: LD_VAR 0 9
10825: PPUSH
10826: LD_INT 0
10828: PPUSH
10829: CALL_OW 49
// end ;
10833: GO 10752
10835: POP
10836: POP
// for i = 1 to sniperCount do
10837: LD_ADDR_VAR 0 14
10841: PUSH
10842: DOUBLE
10843: LD_INT 1
10845: DEC
10846: ST_TO_ADDR
10847: LD_VAR 0 4
10851: PUSH
10852: FOR_TO
10853: IFFALSE 10935
// begin uc_side = side ;
10855: LD_ADDR_OWVAR 20
10859: PUSH
10860: LD_VAR 0 1
10864: ST_TO_ADDR
// uc_nation = nation ;
10865: LD_ADDR_OWVAR 21
10869: PUSH
10870: LD_VAR 0 2
10874: ST_TO_ADDR
// hc_name =  ;
10875: LD_ADDR_OWVAR 26
10879: PUSH
10880: LD_STRING 
10882: ST_TO_ADDR
// hc_gallery =  ;
10883: LD_ADDR_OWVAR 33
10887: PUSH
10888: LD_STRING 
10890: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10891: LD_INT 0
10893: PPUSH
10894: LD_INT 5
10896: PPUSH
10897: LD_VAR 0 8
10901: PPUSH
10902: CALL_OW 380
// un = CreateHuman ;
10906: LD_ADDR_VAR 0 16
10910: PUSH
10911: CALL_OW 44
10915: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10916: LD_VAR 0 16
10920: PPUSH
10921: LD_VAR 0 9
10925: PPUSH
10926: LD_INT 0
10928: PPUSH
10929: CALL_OW 49
// end ;
10933: GO 10852
10935: POP
10936: POP
// for i = 1 to bazookCount do
10937: LD_ADDR_VAR 0 14
10941: PUSH
10942: DOUBLE
10943: LD_INT 1
10945: DEC
10946: ST_TO_ADDR
10947: LD_VAR 0 5
10951: PUSH
10952: FOR_TO
10953: IFFALSE 11035
// begin uc_side = side ;
10955: LD_ADDR_OWVAR 20
10959: PUSH
10960: LD_VAR 0 1
10964: ST_TO_ADDR
// uc_nation = nation ;
10965: LD_ADDR_OWVAR 21
10969: PUSH
10970: LD_VAR 0 2
10974: ST_TO_ADDR
// hc_name =  ;
10975: LD_ADDR_OWVAR 26
10979: PUSH
10980: LD_STRING 
10982: ST_TO_ADDR
// hc_gallery =  ;
10983: LD_ADDR_OWVAR 33
10987: PUSH
10988: LD_STRING 
10990: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10991: LD_INT 0
10993: PPUSH
10994: LD_INT 9
10996: PPUSH
10997: LD_VAR 0 8
11001: PPUSH
11002: CALL_OW 380
// un = CreateHuman ;
11006: LD_ADDR_VAR 0 16
11010: PUSH
11011: CALL_OW 44
11015: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11016: LD_VAR 0 16
11020: PPUSH
11021: LD_VAR 0 9
11025: PPUSH
11026: LD_INT 0
11028: PPUSH
11029: CALL_OW 49
// end ;
11033: GO 10952
11035: POP
11036: POP
// for i = 1 to mortalCount do
11037: LD_ADDR_VAR 0 14
11041: PUSH
11042: DOUBLE
11043: LD_INT 1
11045: DEC
11046: ST_TO_ADDR
11047: LD_VAR 0 6
11051: PUSH
11052: FOR_TO
11053: IFFALSE 11135
// begin uc_side = side ;
11055: LD_ADDR_OWVAR 20
11059: PUSH
11060: LD_VAR 0 1
11064: ST_TO_ADDR
// uc_nation = nation ;
11065: LD_ADDR_OWVAR 21
11069: PUSH
11070: LD_VAR 0 2
11074: ST_TO_ADDR
// hc_name =  ;
11075: LD_ADDR_OWVAR 26
11079: PUSH
11080: LD_STRING 
11082: ST_TO_ADDR
// hc_gallery =  ;
11083: LD_ADDR_OWVAR 33
11087: PUSH
11088: LD_STRING 
11090: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11091: LD_INT 0
11093: PPUSH
11094: LD_INT 8
11096: PPUSH
11097: LD_VAR 0 8
11101: PPUSH
11102: CALL_OW 380
// un = CreateHuman ;
11106: LD_ADDR_VAR 0 16
11110: PUSH
11111: CALL_OW 44
11115: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11116: LD_VAR 0 16
11120: PPUSH
11121: LD_VAR 0 9
11125: PPUSH
11126: LD_INT 0
11128: PPUSH
11129: CALL_OW 49
// end ;
11133: GO 11052
11135: POP
11136: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11137: LD_ADDR_VAR 0 19
11141: PUSH
11142: LD_INT 22
11144: PUSH
11145: LD_VAR 0 1
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 2
11156: PUSH
11157: LD_INT 25
11159: PUSH
11160: LD_INT 1
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 25
11169: PUSH
11170: LD_INT 5
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 25
11179: PUSH
11180: LD_INT 8
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 25
11189: PUSH
11190: LD_INT 9
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 69
11212: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11213: LD_ADDR_VAR 0 18
11217: PUSH
11218: LD_INT 22
11220: PUSH
11221: LD_VAR 0 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 25
11232: PUSH
11233: LD_INT 4
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: ST_TO_ADDR
// for i in medic_list do
11249: LD_ADDR_VAR 0 14
11253: PUSH
11254: LD_VAR 0 18
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11278
// ComMoveToArea ( i , healArea ) ;
11262: LD_VAR 0 14
11266: PPUSH
11267: LD_VAR 0 10
11271: PPUSH
11272: CALL_OW 113
11276: GO 11259
11278: POP
11279: POP
// if strategy = 1 then
11280: LD_VAR 0 12
11284: PUSH
11285: LD_INT 1
11287: EQUAL
11288: IFFALSE 11921
// begin repeat wait ( 0 0$3 ) ;
11290: LD_INT 105
11292: PPUSH
11293: CALL_OW 67
// for i in soldiersOK_list do
11297: LD_ADDR_VAR 0 14
11301: PUSH
11302: LD_VAR 0 19
11306: PUSH
11307: FOR_IN
11308: IFFALSE 11342
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11310: LD_VAR 0 14
11314: PPUSH
11315: LD_INT 80
11317: PPUSH
11318: LD_INT 109
11320: PPUSH
11321: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11325: LD_VAR 0 14
11329: PPUSH
11330: LD_INT 39
11332: PPUSH
11333: LD_INT 49
11335: PPUSH
11336: CALL_OW 174
// end ;
11340: GO 11307
11342: POP
11343: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11344: LD_INT 13
11346: PPUSH
11347: LD_INT 22
11349: PUSH
11350: LD_VAR 0 1
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: PUSH
11364: LD_INT 0
11366: GREATER
11367: IFFALSE 11290
// repeat wait ( 0 0$1 ) ;
11369: LD_INT 35
11371: PPUSH
11372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11376: LD_ADDR_VAR 0 17
11380: PUSH
11381: LD_INT 22
11383: PUSH
11384: LD_VAR 0 1
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 1
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: LD_INT 24
11401: PUSH
11402: LD_INT 550
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 24
11415: PUSH
11416: LD_INT 250
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PPUSH
11432: CALL_OW 69
11436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11437: LD_ADDR_VAR 0 19
11441: PUSH
11442: LD_INT 22
11444: PUSH
11445: LD_VAR 0 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 2
11456: PUSH
11457: LD_INT 25
11459: PUSH
11460: LD_INT 1
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 25
11479: PUSH
11480: LD_INT 8
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 25
11489: PUSH
11490: LD_INT 9
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 24
11506: PUSH
11507: LD_INT 1000
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: PPUSH
11519: CALL_OW 69
11523: ST_TO_ADDR
// if medicCount > 0 then
11524: LD_VAR 0 7
11528: PUSH
11529: LD_INT 0
11531: GREATER
11532: IFFALSE 11606
// begin if damageUnit_list > 0 then
11534: LD_VAR 0 17
11538: PUSH
11539: LD_INT 0
11541: GREATER
11542: IFFALSE 11606
// begin for i in damageUnit_list do
11544: LD_ADDR_VAR 0 14
11548: PUSH
11549: LD_VAR 0 17
11553: PUSH
11554: FOR_IN
11555: IFFALSE 11604
// begin ComMoveToArea ( i , healArea ) ;
11557: LD_VAR 0 14
11561: PPUSH
11562: LD_VAR 0 10
11566: PPUSH
11567: CALL_OW 113
// for j in medic_list do
11571: LD_ADDR_VAR 0 15
11575: PUSH
11576: LD_VAR 0 18
11580: PUSH
11581: FOR_IN
11582: IFFALSE 11600
// AddComHeal ( j , i ) ;
11584: LD_VAR 0 15
11588: PPUSH
11589: LD_VAR 0 14
11593: PPUSH
11594: CALL_OW 188
11598: GO 11581
11600: POP
11601: POP
// end ;
11602: GO 11554
11604: POP
11605: POP
// end ; end ; for i in soldiersOK_list do
11606: LD_ADDR_VAR 0 14
11610: PUSH
11611: LD_VAR 0 19
11615: PUSH
11616: FOR_IN
11617: IFFALSE 11757
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11619: LD_ADDR_VAR 0 22
11623: PUSH
11624: LD_INT 22
11626: PUSH
11627: LD_VAR 0 11
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 69
11640: PUSH
11641: LD_EXP 45
11645: DIFF
11646: PPUSH
11647: LD_VAR 0 14
11651: PPUSH
11652: CALL_OW 74
11656: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11657: LD_ADDR_VAR 0 23
11661: PUSH
11662: LD_INT 22
11664: PUSH
11665: LD_VAR 0 11
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PPUSH
11674: CALL_OW 69
11678: PPUSH
11679: LD_VAR 0 14
11683: PPUSH
11684: CALL_OW 74
11688: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11689: LD_VAR 0 14
11693: PPUSH
11694: LD_VAR 0 22
11698: PPUSH
11699: CALL_OW 296
11703: PUSH
11704: LD_INT 8
11706: PLUS
11707: PUSH
11708: LD_VAR 0 14
11712: PPUSH
11713: LD_VAR 0 23
11717: PPUSH
11718: CALL_OW 296
11722: LESS
11723: IFFALSE 11741
// begin ComAttackUnit ( i , target1 ) ;
11725: LD_VAR 0 14
11729: PPUSH
11730: LD_VAR 0 22
11734: PPUSH
11735: CALL_OW 115
// end else
11739: GO 11755
// begin ComAttackUnit ( i , target2 ) ;
11741: LD_VAR 0 14
11745: PPUSH
11746: LD_VAR 0 23
11750: PPUSH
11751: CALL_OW 115
// end ; end ;
11755: GO 11616
11757: POP
11758: POP
// for i in soldiersOK_list do
11759: LD_ADDR_VAR 0 14
11763: PUSH
11764: LD_VAR 0 19
11768: PUSH
11769: FOR_IN
11770: IFFALSE 11910
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11772: LD_ADDR_VAR 0 22
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: LD_VAR 0 11
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: LD_EXP 45
11798: DIFF
11799: PPUSH
11800: LD_VAR 0 14
11804: PPUSH
11805: CALL_OW 74
11809: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11810: LD_ADDR_VAR 0 23
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_VAR 0 11
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PPUSH
11827: CALL_OW 69
11831: PPUSH
11832: LD_VAR 0 14
11836: PPUSH
11837: CALL_OW 74
11841: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11842: LD_VAR 0 14
11846: PPUSH
11847: LD_VAR 0 22
11851: PPUSH
11852: CALL_OW 296
11856: PUSH
11857: LD_INT 8
11859: PLUS
11860: PUSH
11861: LD_VAR 0 14
11865: PPUSH
11866: LD_VAR 0 23
11870: PPUSH
11871: CALL_OW 296
11875: LESS
11876: IFFALSE 11894
// begin ComAttackUnit ( i , target1 ) ;
11878: LD_VAR 0 14
11882: PPUSH
11883: LD_VAR 0 22
11887: PPUSH
11888: CALL_OW 115
// end else
11892: GO 11908
// begin ComAttackUnit ( i , target2 ) ;
11894: LD_VAR 0 14
11898: PPUSH
11899: LD_VAR 0 23
11903: PPUSH
11904: CALL_OW 115
// end ; end ;
11908: GO 11769
11910: POP
11911: POP
// until soldiersOK_list = [ ] ;
11912: LD_VAR 0 19
11916: PUSH
11917: EMPTY
11918: EQUAL
11919: IFFALSE 11369
// end ; if strategy = 2 then
11921: LD_VAR 0 12
11925: PUSH
11926: LD_INT 2
11928: EQUAL
11929: IFFALSE 12634
// begin repeat wait ( 0 0$1 ) ;
11931: LD_INT 35
11933: PPUSH
11934: CALL_OW 67
// for i in soldiersOK_list do
11938: LD_ADDR_VAR 0 14
11942: PUSH
11943: LD_VAR 0 19
11947: PUSH
11948: FOR_IN
11949: IFFALSE 11983
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11951: LD_VAR 0 14
11955: PPUSH
11956: LD_INT 117
11958: PPUSH
11959: LD_INT 97
11961: PPUSH
11962: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11966: LD_VAR 0 14
11970: PPUSH
11971: LD_INT 94
11973: PPUSH
11974: LD_INT 50
11976: PPUSH
11977: CALL_OW 174
// end ;
11981: GO 11948
11983: POP
11984: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11985: LD_INT 14
11987: PPUSH
11988: LD_INT 22
11990: PUSH
11991: LD_VAR 0 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 70
12004: PUSH
12005: LD_INT 0
12007: GREATER
12008: IFFALSE 11931
// repeat wait ( 0 0$3 ) ;
12010: LD_INT 105
12012: PPUSH
12013: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12017: LD_ADDR_VAR 0 17
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_VAR 0 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 1
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: LD_INT 24
12042: PUSH
12043: LD_INT 550
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 24
12056: PUSH
12057: LD_INT 250
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12078: LD_ADDR_VAR 0 19
12082: PUSH
12083: LD_INT 22
12085: PUSH
12086: LD_VAR 0 1
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: LD_INT 25
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 25
12110: PUSH
12111: LD_INT 5
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 25
12120: PUSH
12121: LD_INT 8
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 25
12130: PUSH
12131: LD_INT 9
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 24
12147: PUSH
12148: LD_INT 1000
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: PPUSH
12160: CALL_OW 69
12164: ST_TO_ADDR
// if medicCount > 0 then
12165: LD_VAR 0 7
12169: PUSH
12170: LD_INT 0
12172: GREATER
12173: IFFALSE 12247
// begin if damageUnit_list > 0 then
12175: LD_VAR 0 17
12179: PUSH
12180: LD_INT 0
12182: GREATER
12183: IFFALSE 12247
// begin for i in damageUnit_list do
12185: LD_ADDR_VAR 0 14
12189: PUSH
12190: LD_VAR 0 17
12194: PUSH
12195: FOR_IN
12196: IFFALSE 12245
// begin ComMoveToArea ( i , healArea ) ;
12198: LD_VAR 0 14
12202: PPUSH
12203: LD_VAR 0 10
12207: PPUSH
12208: CALL_OW 113
// for j in medic_list do
12212: LD_ADDR_VAR 0 15
12216: PUSH
12217: LD_VAR 0 18
12221: PUSH
12222: FOR_IN
12223: IFFALSE 12241
// AddComHeal ( j , i ) ;
12225: LD_VAR 0 15
12229: PPUSH
12230: LD_VAR 0 14
12234: PPUSH
12235: CALL_OW 188
12239: GO 12222
12241: POP
12242: POP
// end ;
12243: GO 12195
12245: POP
12246: POP
// end ; end ; for i in soldiersOK_list do
12247: LD_ADDR_VAR 0 14
12251: PUSH
12252: LD_VAR 0 19
12256: PUSH
12257: FOR_IN
12258: IFFALSE 12434
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12260: LD_ADDR_VAR 0 22
12264: PUSH
12265: LD_INT 22
12267: PUSH
12268: LD_VAR 0 11
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: PPUSH
12282: LD_VAR 0 14
12286: PPUSH
12287: CALL_OW 74
12291: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12292: LD_ADDR_VAR 0 23
12296: PUSH
12297: LD_INT 22
12299: PUSH
12300: LD_VAR 0 11
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: LD_INT 59
12314: PUSH
12315: EMPTY
12316: LIST
12317: PUSH
12318: LD_INT 21
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 21
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: PPUSH
12356: LD_VAR 0 14
12360: PPUSH
12361: CALL_OW 74
12365: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12366: LD_VAR 0 14
12370: PPUSH
12371: LD_VAR 0 22
12375: PPUSH
12376: CALL_OW 296
12380: PUSH
12381: LD_INT 8
12383: PLUS
12384: PUSH
12385: LD_VAR 0 14
12389: PPUSH
12390: LD_VAR 0 23
12394: PPUSH
12395: CALL_OW 296
12399: LESS
12400: IFFALSE 12418
// begin ComAttackUnit ( i , target1 ) ;
12402: LD_VAR 0 14
12406: PPUSH
12407: LD_VAR 0 22
12411: PPUSH
12412: CALL_OW 115
// end else
12416: GO 12432
// begin ComAttackUnit ( i , target2 ) ;
12418: LD_VAR 0 14
12422: PPUSH
12423: LD_VAR 0 23
12427: PPUSH
12428: CALL_OW 115
// end ; end ;
12432: GO 12257
12434: POP
12435: POP
// for i in soldiersOK_list do
12436: LD_ADDR_VAR 0 14
12440: PUSH
12441: LD_VAR 0 19
12445: PUSH
12446: FOR_IN
12447: IFFALSE 12623
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12449: LD_ADDR_VAR 0 22
12453: PUSH
12454: LD_INT 22
12456: PUSH
12457: LD_VAR 0 11
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PPUSH
12466: CALL_OW 69
12470: PPUSH
12471: LD_VAR 0 14
12475: PPUSH
12476: CALL_OW 74
12480: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12481: LD_ADDR_VAR 0 23
12485: PUSH
12486: LD_INT 22
12488: PUSH
12489: LD_VAR 0 11
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 59
12503: PUSH
12504: EMPTY
12505: LIST
12506: PUSH
12507: LD_INT 21
12509: PUSH
12510: LD_INT 1
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 21
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: PPUSH
12540: CALL_OW 69
12544: PPUSH
12545: LD_VAR 0 14
12549: PPUSH
12550: CALL_OW 74
12554: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12555: LD_VAR 0 14
12559: PPUSH
12560: LD_VAR 0 22
12564: PPUSH
12565: CALL_OW 296
12569: PUSH
12570: LD_INT 8
12572: PLUS
12573: PUSH
12574: LD_VAR 0 14
12578: PPUSH
12579: LD_VAR 0 23
12583: PPUSH
12584: CALL_OW 296
12588: LESS
12589: IFFALSE 12607
// begin ComAttackUnit ( i , target1 ) ;
12591: LD_VAR 0 14
12595: PPUSH
12596: LD_VAR 0 22
12600: PPUSH
12601: CALL_OW 115
// end else
12605: GO 12621
// begin ComAttackUnit ( i , target2 ) ;
12607: LD_VAR 0 14
12611: PPUSH
12612: LD_VAR 0 23
12616: PPUSH
12617: CALL_OW 115
// end ; end ;
12621: GO 12446
12623: POP
12624: POP
// until soldiersOK_list = [ ] ;
12625: LD_VAR 0 19
12629: PUSH
12630: EMPTY
12631: EQUAL
12632: IFFALSE 12010
// end ; end ; end_of_file
12634: LD_VAR 0 13
12638: RET
// every 0 0$01 do
12639: GO 12641
12641: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12642: LD_INT 22
12644: PUSH
12645: LD_INT 1
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 25
12654: PUSH
12655: LD_INT 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: IFFALSE 12688
// SetClass ( JMM , 2 ) ;
12676: LD_EXP 1
12680: PPUSH
12681: LD_INT 2
12683: PPUSH
12684: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12688: LD_STRING M1
12690: PPUSH
12691: CALL_OW 337
// case difficulty of 1 :
12695: LD_OWVAR 67
12699: PUSH
12700: LD_INT 1
12702: DOUBLE
12703: EQUAL
12704: IFTRUE 12708
12706: GO 12718
12708: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12709: LD_STRING M1-1
12711: PPUSH
12712: CALL_OW 337
12716: GO 12755
12718: LD_INT 2
12720: DOUBLE
12721: EQUAL
12722: IFTRUE 12726
12724: GO 12736
12726: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12727: LD_STRING M1-2
12729: PPUSH
12730: CALL_OW 337
12734: GO 12755
12736: LD_INT 3
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12754
12744: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12745: LD_STRING M1-3
12747: PPUSH
12748: CALL_OW 337
12752: GO 12755
12754: POP
// ChangeMissionObjectives ( M1cont ) ;
12755: LD_STRING M1cont
12757: PPUSH
12758: CALL_OW 337
// wait ( 0 0$2 ) ;
12762: LD_INT 70
12764: PPUSH
12765: CALL_OW 67
// SaveForQuickRestart ;
12769: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12773: LD_INT 525
12775: PPUSH
12776: LD_INT 700
12778: PPUSH
12779: CALL_OW 12
12783: PPUSH
12784: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12788: LD_INT 5
12790: PPUSH
12791: LD_INT 82
12793: PPUSH
12794: LD_INT 38
12796: PPUSH
12797: LD_INT 10
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: CALL_OW 56
// wait ( 0 0$14 ) ;
12807: LD_INT 490
12809: PPUSH
12810: CALL_OW 67
// firstCrateSpawn := true ;
12814: LD_ADDR_EXP 41
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
// end ;
12822: END
// every 0 0$02 trigger firstCrateSpawn do
12823: LD_EXP 41
12827: IFFALSE 13190
12829: GO 12831
12831: DISABLE
// begin if IsOk ( Lisa ) then
12832: LD_EXP 2
12836: PPUSH
12837: CALL_OW 302
12841: IFFALSE 12857
// Say ( Lisa , DR0-Lisa-1 ) else
12843: LD_EXP 2
12847: PPUSH
12848: LD_STRING DR0-Lisa-1
12850: PPUSH
12851: CALL_OW 88
12855: GO 13003
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12857: LD_INT 22
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 21
12869: PUSH
12870: LD_INT 1
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 26
12879: PUSH
12880: LD_INT 1
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: LD_INT 25
12892: PUSH
12893: LD_INT 1
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 25
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 4
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: PPUSH
12943: CALL_OW 69
12947: PUSH
12948: LD_EXP 1
12952: PUSH
12953: LD_EXP 8
12957: PUSH
12958: LD_EXP 5
12962: PUSH
12963: LD_EXP 6
12967: PUSH
12968: LD_EXP 7
12972: PUSH
12973: LD_EXP 4
12977: PUSH
12978: LD_EXP 3
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: DIFF
12992: PPUSH
12993: LD_STRING DR0-Sol1-1
12995: PPUSH
12996: LD_STRING DR0-Sol1-1
12998: PPUSH
12999: CALL 6259 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13003: LD_INT 22
13005: PUSH
13006: LD_INT 1
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 21
13015: PUSH
13016: LD_INT 1
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 26
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: LD_INT 25
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 2
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 25
13058: PUSH
13059: LD_INT 3
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 25
13068: PUSH
13069: LD_INT 4
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: PUSH
13094: LD_EXP 1
13098: PUSH
13099: LD_EXP 8
13103: PUSH
13104: LD_EXP 5
13108: PUSH
13109: LD_EXP 2
13113: PUSH
13114: LD_EXP 6
13118: PUSH
13119: LD_EXP 7
13123: PUSH
13124: LD_EXP 4
13128: PUSH
13129: LD_EXP 3
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: DIFF
13144: PPUSH
13145: LD_STRING DR0-Sol2-1
13147: PPUSH
13148: LD_STRING DR0-Sol2-1
13150: PPUSH
13151: CALL 6259 0 3
// if IsOk ( Cyrus ) then
13155: LD_EXP 4
13159: PPUSH
13160: CALL_OW 302
13164: IFFALSE 13178
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13166: LD_EXP 4
13170: PPUSH
13171: LD_STRING DR0-Cyrus-1
13173: PPUSH
13174: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13178: LD_EXP 1
13182: PPUSH
13183: LD_STRING DR0-JMM-1
13185: PPUSH
13186: CALL_OW 88
// end ;
13190: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13191: LD_EXP 5
13195: PPUSH
13196: CALL_OW 302
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_INT 1
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 25
13213: PUSH
13214: LD_INT 16
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: PUSH
13230: LD_INT 0
13232: GREATER
13233: AND
13234: PUSH
13235: LD_INT 1
13237: PPUSH
13238: CALL_OW 463
13242: NOT
13243: AND
13244: IFFALSE 13522
13246: GO 13248
13248: DISABLE
// begin DialogueOn ;
13249: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13253: LD_EXP 5
13257: PPUSH
13258: LD_STRING D10-Frank-1
13260: PPUSH
13261: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13265: LD_INT 22
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 21
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 2
13287: PUSH
13288: LD_INT 25
13290: PUSH
13291: LD_INT 1
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 25
13300: PUSH
13301: LD_INT 2
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 25
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 25
13320: PUSH
13321: LD_INT 4
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 69
13344: PUSH
13345: LD_EXP 1
13349: PUSH
13350: LD_EXP 5
13354: PUSH
13355: LD_EXP 2
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: DIFF
13365: PPUSH
13366: LD_STRING D10-Sol1-1
13368: PPUSH
13369: LD_STRING D10-FSol1-1
13371: PPUSH
13372: CALL 6259 0 3
// Say ( Frank , D10-Frank-2 ) ;
13376: LD_EXP 5
13380: PPUSH
13381: LD_STRING D10-Frank-2
13383: PPUSH
13384: CALL_OW 88
// if IsOK ( Lisa ) then
13388: LD_EXP 2
13392: PPUSH
13393: CALL_OW 302
13397: IFFALSE 13413
// begin Say ( Lisa , D10-Lisa-2 ) ;
13399: LD_EXP 2
13403: PPUSH
13404: LD_STRING D10-Lisa-2
13406: PPUSH
13407: CALL_OW 88
// end else
13411: GO 13518
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13413: LD_INT 22
13415: PUSH
13416: LD_INT 1
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 21
13425: PUSH
13426: LD_INT 1
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 25
13438: PUSH
13439: LD_INT 1
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 25
13448: PUSH
13449: LD_INT 2
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 3
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 4
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: LIST
13487: PPUSH
13488: CALL_OW 69
13492: PUSH
13493: LD_EXP 1
13497: PUSH
13498: LD_EXP 5
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: DIFF
13507: PPUSH
13508: LD_STRING D10-Sol1-2
13510: PPUSH
13511: LD_STRING D10-FSol1-2
13513: PPUSH
13514: CALL 6259 0 3
// end ; DialogueOff ;
13518: CALL_OW 7
// end ;
13522: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13523: LD_INT 1
13525: PPUSH
13526: CALL_OW 463
13530: NOT
13531: IFFALSE 13826
13533: GO 13535
13535: DISABLE
// begin HarrisonSupport ;
13536: CALL 2546 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13540: LD_EXP 17
13544: PPUSH
13545: CALL_OW 310
13549: PPUSH
13550: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13554: LD_EXP 17
13558: PPUSH
13559: LD_STRING DEng-Eng1-1
13561: PPUSH
13562: CALL_OW 88
// wait ( 1 1$0 ) ;
13566: LD_INT 2100
13568: PPUSH
13569: CALL_OW 67
// DialogueOn ;
13573: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13577: LD_EXP 14
13581: PPUSH
13582: LD_STRING DRem-Har-1
13584: PPUSH
13585: CALL_OW 94
// if contactWithRussian = 1 then
13589: LD_EXP 22
13593: PUSH
13594: LD_INT 1
13596: EQUAL
13597: IFFALSE 13613
// begin Say ( JMM , DRem-JMM-1 ) ;
13599: LD_EXP 1
13603: PPUSH
13604: LD_STRING DRem-JMM-1
13606: PPUSH
13607: CALL_OW 88
// end else
13611: GO 13625
// begin Say ( JMM , DRem-JMM-1a ) ;
13613: LD_EXP 1
13617: PPUSH
13618: LD_STRING DRem-JMM-1a
13620: PPUSH
13621: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13625: LD_EXP 14
13629: PPUSH
13630: LD_STRING DRem-Har-2
13632: PPUSH
13633: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13637: LD_STRING DenisInDelta
13639: PPUSH
13640: LD_INT 0
13642: PPUSH
13643: CALL_OW 30
13647: PUSH
13648: LD_INT 1
13650: EQUAL
13651: IFFALSE 13667
// begin Say ( JMM , DRem-JMM-2 ) ;
13653: LD_EXP 1
13657: PPUSH
13658: LD_STRING DRem-JMM-2
13660: PPUSH
13661: CALL_OW 88
// end else
13665: GO 13679
// begin Say ( JMM , DRem-JMM-2a ) ;
13667: LD_EXP 1
13671: PPUSH
13672: LD_STRING DRem-JMM-2a
13674: PPUSH
13675: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13679: LD_EXP 14
13683: PPUSH
13684: LD_STRING DRem-Har-3
13686: PPUSH
13687: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13691: LD_EXP 1
13695: PPUSH
13696: LD_STRING DRem-JMM-3
13698: PPUSH
13699: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13703: LD_EXP 14
13707: PPUSH
13708: LD_STRING DRem-Har-4
13710: PPUSH
13711: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13715: LD_STRING DenisInDelta
13717: PPUSH
13718: LD_INT 0
13720: PPUSH
13721: CALL_OW 30
13725: PUSH
13726: LD_INT 1
13728: EQUAL
13729: IFFALSE 13789
// begin Say ( JMM , DRem-JMM-4 ) ;
13731: LD_EXP 1
13735: PPUSH
13736: LD_STRING DRem-JMM-4
13738: PPUSH
13739: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13743: LD_EXP 14
13747: PPUSH
13748: LD_STRING DRem-Har-5
13750: PPUSH
13751: CALL_OW 94
// DialogueOff ;
13755: CALL_OW 7
// wait ( 4 4$00 ) ;
13759: LD_INT 8400
13761: PPUSH
13762: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13766: LD_INT 35
13768: PPUSH
13769: CALL_OW 67
// until not InBattle ( 1 ) ;
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 463
13780: NOT
13781: IFFALSE 13766
// SpawnDenis ;
13783: CALL 13827 0 0
// end else
13787: GO 13826
// begin DialogueOff ;
13789: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13793: LD_INT 36
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: LD_INT 1
13801: PPUSH
13802: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13806: LD_INT 15
13808: PPUSH
13809: LD_INT 1
13811: PPUSH
13812: LD_INT 1
13814: PPUSH
13815: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13819: LD_STRING MR
13821: PPUSH
13822: CALL_OW 337
// end ; end ;
13826: END
// export function SpawnDenis ; var tmp ; begin
13827: LD_INT 0
13829: PPUSH
13830: PPUSH
// PrepareDenis ;
13831: CALL 2263 0 0
// CenterNowOnUnits ( Denis ) ;
13835: LD_EXP 9
13839: PPUSH
13840: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13844: LD_ADDR_VAR 0 2
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_INT 1
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PPUSH
13859: CALL_OW 69
13863: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13864: LD_EXP 9
13868: PPUSH
13869: LD_VAR 0 2
13873: PPUSH
13874: LD_EXP 9
13878: PPUSH
13879: CALL_OW 74
13883: PPUSH
13884: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13888: LD_INT 35
13890: PPUSH
13891: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13895: LD_INT 22
13897: PUSH
13898: LD_INT 1
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 91
13907: PUSH
13908: LD_EXP 9
13912: PUSH
13913: LD_INT 10
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 69
13929: IFFALSE 13888
// SetSide ( Denis , 1 ) ;
13931: LD_EXP 9
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 235
// DialogueOn ;
13943: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13947: LD_EXP 9
13951: PPUSH
13952: LD_STRING DDen-Den-1
13954: PPUSH
13955: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13959: LD_EXP 1
13963: PPUSH
13964: LD_STRING DDen-JMM-1
13966: PPUSH
13967: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13971: LD_EXP 9
13975: PPUSH
13976: LD_STRING DDen-Den-2
13978: PPUSH
13979: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13983: LD_EXP 1
13987: PPUSH
13988: LD_STRING DDen-JMM-2
13990: PPUSH
13991: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13995: LD_EXP 9
13999: PPUSH
14000: LD_STRING DDen-Den-3
14002: PPUSH
14003: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14007: LD_EXP 1
14011: PPUSH
14012: LD_STRING DDen-JMM-3
14014: PPUSH
14015: CALL_OW 88
// DialogueOff ;
14019: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14023: LD_INT 36
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: LD_INT 1
14031: PPUSH
14032: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14036: LD_INT 15
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: LD_INT 1
14044: PPUSH
14045: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14049: LD_STRING MR
14051: PPUSH
14052: CALL_OW 337
// end ;
14056: LD_VAR 0 1
14060: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14061: CALL 14116 0 0
14065: PUSH
14066: LD_EXP 9
14070: PPUSH
14071: CALL_OW 302
14075: AND
14076: PUSH
14077: LD_INT 1
14079: PPUSH
14080: CALL_OW 463
14084: NOT
14085: AND
14086: IFFALSE 14115
14088: GO 14090
14090: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14091: LD_EXP 9
14095: PPUSH
14096: LD_STRING DR1-Den-1
14098: PPUSH
14099: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14103: LD_EXP 1
14107: PPUSH
14108: LD_STRING DR1-JMM-1
14110: PPUSH
14111: CALL_OW 88
// end ;
14115: END
// function CheckOptoLab ; var i ; begin
14116: LD_INT 0
14118: PPUSH
14119: PPUSH
// result = false ;
14120: LD_ADDR_VAR 0 1
14124: PUSH
14125: LD_INT 0
14127: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_INT 22
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: LD_INT 30
14148: PUSH
14149: LD_INT 7
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 30
14158: PUSH
14159: LD_INT 8
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PPUSH
14175: CALL_OW 69
14179: PUSH
14180: FOR_IN
14181: IFFALSE 14233
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14183: LD_VAR 0 2
14187: PPUSH
14188: LD_INT 1
14190: PPUSH
14191: CALL_OW 268
14195: PUSH
14196: LD_INT 15
14198: EQUAL
14199: PUSH
14200: LD_VAR 0 2
14204: PPUSH
14205: LD_INT 2
14207: PPUSH
14208: CALL_OW 268
14212: PUSH
14213: LD_INT 15
14215: EQUAL
14216: OR
14217: IFFALSE 14229
// begin result = true ;
14219: LD_ADDR_VAR 0 1
14223: PUSH
14224: LD_INT 1
14226: ST_TO_ADDR
// break ;
14227: GO 14233
// end ; break ;
14229: GO 14233
// end ;
14231: GO 14180
14233: POP
14234: POP
// end ;
14235: LD_VAR 0 1
14239: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14240: LD_INT 15
14242: PPUSH
14243: LD_INT 1
14245: PPUSH
14246: CALL_OW 321
14250: PUSH
14251: LD_INT 2
14253: EQUAL
14254: PUSH
14255: LD_EXP 9
14259: PPUSH
14260: CALL_OW 302
14264: AND
14265: PUSH
14266: LD_INT 1
14268: PPUSH
14269: CALL_OW 463
14273: NOT
14274: AND
14275: IFFALSE 14507
14277: GO 14279
14279: DISABLE
// begin DialogueOn ;
14280: CALL_OW 6
// if IsOK ( Denis ) then
14284: LD_EXP 9
14288: PPUSH
14289: CALL_OW 302
14293: IFFALSE 14309
// begin Say ( Denis , DR2-Den-1 ) ;
14295: LD_EXP 9
14299: PPUSH
14300: LD_STRING DR2-Den-1
14302: PPUSH
14303: CALL_OW 88
// end else
14307: GO 14368
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14309: LD_INT 22
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 21
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 25
14331: PUSH
14332: LD_INT 4
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 69
14348: PUSH
14349: LD_EXP 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: DIFF
14357: PPUSH
14358: LD_STRING DR2-Sci1-1
14360: PPUSH
14361: LD_STRING DR2-FSci1-1
14363: PPUSH
14364: CALL 6259 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14368: LD_EXP 1
14372: PPUSH
14373: LD_STRING DR2-JMM-1
14375: PPUSH
14376: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14380: LD_INT 22
14382: PUSH
14383: LD_INT 1
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 2
14402: PUSH
14403: LD_INT 25
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 25
14415: PUSH
14416: LD_INT 2
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 25
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 25
14435: PUSH
14436: LD_INT 4
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: PUSH
14460: LD_EXP 1
14464: PUSH
14465: LD_EXP 9
14469: PUSH
14470: LD_EXP 8
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: DIFF
14480: PPUSH
14481: LD_STRING DR2-Sol1-1
14483: PPUSH
14484: LD_STRING DR2-Sol1-11
14486: PPUSH
14487: CALL 6259 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14491: LD_EXP 1
14495: PPUSH
14496: LD_STRING DR2-JMM-2
14498: PPUSH
14499: CALL_OW 88
// DialogueOff ;
14503: CALL_OW 7
// end ;
14507: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14508: LD_INT 22
14510: PUSH
14511: LD_INT 1
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 30
14520: PUSH
14521: LD_INT 36
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: PUSH
14537: LD_INT 0
14539: EQUAL
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: LD_INT 1
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 21
14553: PUSH
14554: LD_INT 2
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 33
14563: PUSH
14564: LD_INT 2
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: PPUSH
14576: CALL_OW 69
14580: PUSH
14581: LD_INT 0
14583: GREATER
14584: AND
14585: PUSH
14586: LD_EXP 23
14590: PUSH
14591: LD_INT 0
14593: EQUAL
14594: AND
14595: PUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 463
14603: NOT
14604: AND
14605: IFFALSE 14742
14607: GO 14609
14609: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14610: LD_INT 22
14612: PUSH
14613: LD_INT 1
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 21
14622: PUSH
14623: LD_INT 1
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 25
14632: PUSH
14633: LD_INT 3
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 26
14642: PUSH
14643: LD_INT 1
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: PUSH
14661: LD_EXP 1
14665: PUSH
14666: LD_EXP 6
14670: PUSH
14671: LD_EXP 7
14675: PUSH
14676: LD_EXP 9
14680: PUSH
14681: LD_EXP 15
14685: PUSH
14686: LD_EXP 3
14690: PUSH
14691: LD_EXP 4
14695: PUSH
14696: LD_EXP 2
14700: PUSH
14701: LD_EXP 5
14705: PUSH
14706: LD_EXP 8
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: DIFF
14723: PPUSH
14724: LD_STRING D3a-Mech1-1
14726: PPUSH
14727: LD_STRING D3a-Mech1-1
14729: PPUSH
14730: CALL 6259 0 3
// firstTower = 2 ;
14734: LD_ADDR_EXP 23
14738: PUSH
14739: LD_INT 2
14741: ST_TO_ADDR
// end ;
14742: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14743: LD_INT 22
14745: PUSH
14746: LD_INT 3
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 21
14755: PUSH
14756: LD_INT 3
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: CALL_OW 69
14771: PUSH
14772: LD_INT 0
14774: EQUAL
14775: IFFALSE 14890
14777: GO 14779
14779: DISABLE
14780: LD_INT 0
14782: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14783: LD_ADDR_VAR 0 1
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 21
14800: PUSH
14801: LD_INT 1
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: LD_INT 25
14813: PUSH
14814: LD_INT 1
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 25
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 25
14833: PUSH
14834: LD_INT 3
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 25
14843: PUSH
14844: LD_INT 4
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: PUSH
14868: FOR_IN
14869: IFFALSE 14888
// AddExperience ( i , 1 , 10000 ) ;
14871: LD_VAR 0 1
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: LD_INT 10000
14881: PPUSH
14882: CALL_OW 492
14886: GO 14868
14888: POP
14889: POP
// end ;
14890: PPOPN 1
14892: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14893: LD_INT 22
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 30
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PPUSH
14917: CALL_OW 69
14921: PUSH
14922: LD_INT 0
14924: GREATER
14925: PUSH
14926: LD_INT 22
14928: PUSH
14929: LD_INT 1
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 33
14948: PUSH
14949: LD_INT 2
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: PUSH
14966: LD_INT 0
14968: GREATER
14969: AND
14970: PUSH
14971: CALL 15563 0 0
14975: AND
14976: PUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL_OW 463
14984: NOT
14985: AND
14986: IFFALSE 15560
14988: GO 14990
14990: DISABLE
14991: LD_INT 0
14993: PPUSH
14994: PPUSH
14995: PPUSH
14996: PPUSH
14997: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14998: LD_ADDR_VAR 0 3
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 1
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 30
15015: PUSH
15016: LD_INT 36
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15032: LD_ADDR_VAR 0 4
15036: PUSH
15037: LD_INT 22
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 21
15049: PUSH
15050: LD_INT 2
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 33
15059: PUSH
15060: LD_INT 2
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15077: LD_ADDR_VAR 0 5
15081: PUSH
15082: EMPTY
15083: ST_TO_ADDR
// for i in tmpControlTowers do
15084: LD_ADDR_VAR 0 1
15088: PUSH
15089: LD_VAR 0 3
15093: PUSH
15094: FOR_IN
15095: IFFALSE 15558
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15097: LD_EXP 1
15101: PPUSH
15102: CALL_OW 310
15106: PUSH
15107: LD_VAR 0 1
15111: EQUAL
15112: PUSH
15113: LD_EXP 1
15117: PPUSH
15118: CALL_OW 257
15122: PUSH
15123: LD_INT 3
15125: EQUAL
15126: AND
15127: IFFALSE 15257
// begin InGameOn ;
15129: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15133: LD_VAR 0 4
15137: PUSH
15138: LD_INT 1
15140: ARRAY
15141: PPUSH
15142: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15146: LD_EXP 1
15150: PPUSH
15151: LD_STRING D4a-JMM-1
15153: PPUSH
15154: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15158: LD_VAR 0 4
15162: PUSH
15163: LD_INT 1
15165: ARRAY
15166: PPUSH
15167: LD_EXP 1
15171: PPUSH
15172: CALL_OW 53
// wait ( 0 0$1 ) ;
15176: LD_INT 35
15178: PPUSH
15179: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15183: LD_VAR 0 4
15187: PUSH
15188: LD_INT 1
15190: ARRAY
15191: PPUSH
15192: LD_VAR 0 4
15196: PUSH
15197: LD_INT 1
15199: ARRAY
15200: PPUSH
15201: CALL_OW 250
15205: PUSH
15206: LD_INT 3
15208: PLUS
15209: PPUSH
15210: LD_VAR 0 4
15214: PUSH
15215: LD_INT 1
15217: ARRAY
15218: PPUSH
15219: CALL_OW 251
15223: PUSH
15224: LD_INT 2
15226: MINUS
15227: PPUSH
15228: CALL_OW 111
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15239: LD_EXP 1
15243: PPUSH
15244: LD_STRING D4b-JMM-1
15246: PPUSH
15247: CALL_OW 88
// InGameOff ;
15251: CALL_OW 9
// end else
15255: GO 15556
// begin InGameOn ;
15257: CALL_OW 8
// for j in UnitsInside ( i ) do
15261: LD_ADDR_VAR 0 2
15265: PUSH
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 313
15275: PUSH
15276: FOR_IN
15277: IFFALSE 15312
// if GetClass ( j ) = 3 then
15279: LD_VAR 0 2
15283: PPUSH
15284: CALL_OW 257
15288: PUSH
15289: LD_INT 3
15291: EQUAL
15292: IFFALSE 15310
// tmpMechanicInside = tmpMechanicInside ^ j ;
15294: LD_ADDR_VAR 0 5
15298: PUSH
15299: LD_VAR 0 5
15303: PUSH
15304: LD_VAR 0 2
15308: ADD
15309: ST_TO_ADDR
15310: GO 15276
15312: POP
15313: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15314: LD_VAR 0 5
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: CALL_OW 258
15327: PUSH
15328: LD_INT 1
15330: EQUAL
15331: IFFALSE 15349
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15333: LD_VAR 0 5
15337: PUSH
15338: LD_INT 1
15340: ARRAY
15341: PPUSH
15342: LD_STRING D4a-Mech1-1
15344: PPUSH
15345: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15349: LD_VAR 0 5
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: CALL_OW 258
15362: PUSH
15363: LD_INT 2
15365: EQUAL
15366: IFFALSE 15384
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15368: LD_VAR 0 5
15372: PUSH
15373: LD_INT 1
15375: ARRAY
15376: PPUSH
15377: LD_STRING D4a-FMech1-1
15379: PPUSH
15380: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15384: LD_VAR 0 4
15388: PUSH
15389: LD_INT 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15397: LD_VAR 0 4
15401: PUSH
15402: LD_INT 1
15404: ARRAY
15405: PPUSH
15406: LD_VAR 0 5
15410: PUSH
15411: LD_INT 1
15413: ARRAY
15414: PPUSH
15415: CALL_OW 53
// wait ( 0 0$1 ) ;
15419: LD_INT 35
15421: PPUSH
15422: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15426: LD_VAR 0 4
15430: PUSH
15431: LD_INT 1
15433: ARRAY
15434: PPUSH
15435: LD_VAR 0 4
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: PPUSH
15444: CALL_OW 250
15448: PUSH
15449: LD_INT 3
15451: PLUS
15452: PPUSH
15453: LD_VAR 0 4
15457: PUSH
15458: LD_INT 1
15460: ARRAY
15461: PPUSH
15462: CALL_OW 251
15466: PUSH
15467: LD_INT 2
15469: MINUS
15470: PPUSH
15471: CALL_OW 111
// wait ( 0 0$2 ) ;
15475: LD_INT 70
15477: PPUSH
15478: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15482: LD_VAR 0 5
15486: PUSH
15487: LD_INT 1
15489: ARRAY
15490: PPUSH
15491: CALL_OW 258
15495: PUSH
15496: LD_INT 1
15498: EQUAL
15499: IFFALSE 15517
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15501: LD_VAR 0 5
15505: PUSH
15506: LD_INT 1
15508: ARRAY
15509: PPUSH
15510: LD_STRING D4b-Mech1-1
15512: PPUSH
15513: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15517: LD_VAR 0 5
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: CALL_OW 258
15530: PUSH
15531: LD_INT 2
15533: EQUAL
15534: IFFALSE 15552
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15536: LD_VAR 0 5
15540: PUSH
15541: LD_INT 1
15543: ARRAY
15544: PPUSH
15545: LD_STRING D4b-FMech1-1
15547: PPUSH
15548: CALL_OW 88
// InGameOff ;
15552: CALL_OW 9
// end ; end ;
15556: GO 15094
15558: POP
15559: POP
// end ;
15560: PPOPN 5
15562: END
// function CheckMehInside ; var i , j ; begin
15563: LD_INT 0
15565: PPUSH
15566: PPUSH
15567: PPUSH
// result = false ;
15568: LD_ADDR_VAR 0 1
15572: PUSH
15573: LD_INT 0
15575: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15576: LD_ADDR_VAR 0 2
15580: PUSH
15581: LD_INT 22
15583: PUSH
15584: LD_INT 1
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 30
15593: PUSH
15594: LD_INT 36
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: PUSH
15610: FOR_IN
15611: IFFALSE 15662
// begin for j in UnitsInside ( i ) do
15613: LD_ADDR_VAR 0 3
15617: PUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL_OW 313
15627: PUSH
15628: FOR_IN
15629: IFFALSE 15658
// begin if GetClass ( j ) = 3 then
15631: LD_VAR 0 3
15635: PPUSH
15636: CALL_OW 257
15640: PUSH
15641: LD_INT 3
15643: EQUAL
15644: IFFALSE 15656
// begin result = true ;
15646: LD_ADDR_VAR 0 1
15650: PUSH
15651: LD_INT 1
15653: ST_TO_ADDR
// break ;
15654: GO 15658
// end ; end ;
15656: GO 15628
15658: POP
15659: POP
// end ;
15660: GO 15610
15662: POP
15663: POP
// end ;
15664: LD_VAR 0 1
15668: RET
// every 12 12$0 do
15669: GO 15671
15671: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15672: LD_INT 35
15674: PPUSH
15675: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 463
15686: NOT
15687: PUSH
15688: LD_INT 32
15690: PPUSH
15691: LD_INT 81
15693: PUSH
15694: LD_INT 1
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PPUSH
15701: CALL_OW 70
15705: NOT
15706: AND
15707: IFFALSE 15672
// PrepareKurt ;
15709: CALL 19310 0 0
// end ;
15713: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15714: LD_EXP 15
15718: PPUSH
15719: CALL_OW 302
15723: PUSH
15724: LD_EXP 15
15728: PPUSH
15729: CALL_OW 255
15733: PUSH
15734: LD_INT 1
15736: EQUAL
15737: AND
15738: PUSH
15739: LD_EXP 2
15743: AND
15744: IFFALSE 15909
15746: GO 15748
15748: DISABLE
// begin wait ( 0 0$50 ) ;
15749: LD_INT 1750
15751: PPUSH
15752: CALL_OW 67
// if not IsOk ( Joan ) then
15756: LD_EXP 15
15760: PPUSH
15761: CALL_OW 302
15765: NOT
15766: IFFALSE 15770
// exit ;
15768: GO 15909
// if IsOK ( Lisa ) then
15770: LD_EXP 2
15774: PPUSH
15775: CALL_OW 302
15779: IFFALSE 15909
// begin DialogueOn ;
15781: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15785: LD_EXP 2
15789: PPUSH
15790: LD_STRING D7-Lisa-1
15792: PPUSH
15793: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15797: LD_EXP 1
15801: PPUSH
15802: LD_STRING D7-JMM-1
15804: PPUSH
15805: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15809: LD_EXP 2
15813: PPUSH
15814: LD_STRING D7-Lisa-2
15816: PPUSH
15817: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15821: LD_EXP 1
15825: PPUSH
15826: LD_STRING D7-JMM-2
15828: PPUSH
15829: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15833: LD_EXP 2
15837: PPUSH
15838: LD_STRING D7-Lisa-3
15840: PPUSH
15841: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15845: LD_EXP 1
15849: PPUSH
15850: LD_STRING D7-JMM-3
15852: PPUSH
15853: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15857: LD_EXP 2
15861: PPUSH
15862: LD_STRING D7-Lisa-4
15864: PPUSH
15865: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15869: LD_EXP 1
15873: PPUSH
15874: LD_STRING D7-JMM-4
15876: PPUSH
15877: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15881: LD_EXP 1
15885: PPUSH
15886: LD_STRING D7-JMM-4a
15888: PPUSH
15889: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15893: LD_EXP 2
15897: PPUSH
15898: LD_STRING D7-Lisa-5
15900: PPUSH
15901: CALL_OW 88
// DialogueOff ;
15905: CALL_OW 7
// end ; end ;
15909: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15910: LD_EXP 13
15914: PUSH
15915: LD_INT 22
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 91
15927: PUSH
15928: LD_EXP 13
15932: PUSH
15933: LD_INT 10
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 2
15943: PUSH
15944: LD_INT 25
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 25
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 25
15966: PUSH
15967: LD_INT 3
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 25
15976: PUSH
15977: LD_INT 4
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 69
16000: PUSH
16001: LD_INT 1
16003: GREATER
16004: AND
16005: IFFALSE 16022
16007: GO 16009
16009: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16010: LD_EXP 13
16014: PPUSH
16015: LD_STRING D5-Sol1-1
16017: PPUSH
16018: CALL_OW 88
// end ;
16022: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16023: LD_INT 22
16025: PUSH
16026: LD_INT 1
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: LD_INT 33
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PPUSH
16047: CALL_OW 69
16051: PUSH
16052: LD_INT 2
16054: GREATEREQUAL
16055: IFFALSE 16075
16057: GO 16059
16059: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16060: LD_STRING MRa
16062: PPUSH
16063: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16067: LD_ADDR_EXP 28
16071: PUSH
16072: LD_INT 1
16074: ST_TO_ADDR
// end ;
16075: END
// every 2 2$00 do var i , last ;
16076: GO 16078
16078: DISABLE
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
// begin last := 8 ;
16083: LD_ADDR_VAR 0 2
16087: PUSH
16088: LD_INT 8
16090: ST_TO_ADDR
// for i = 1 to last do
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_VAR 0 2
16105: PUSH
16106: FOR_TO
16107: IFFALSE 16135
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16109: LD_INT 6300
16111: PPUSH
16112: LD_INT 12600
16114: PPUSH
16115: CALL_OW 12
16119: PPUSH
16120: CALL_OW 67
// PrepareRandoms ( i ) ;
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL 4165 0 1
// end ;
16133: GO 16106
16135: POP
16136: POP
// end ;
16137: PPOPN 2
16139: END
// every 5 5$20 do
16140: GO 16142
16142: DISABLE
// begin DialogueOn ;
16143: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16147: LD_EXP 10
16151: PPUSH
16152: LD_STRING D12a-Sci-1
16154: PPUSH
16155: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16159: LD_EXP 1
16163: PPUSH
16164: LD_STRING D12a-JMM-1
16166: PPUSH
16167: CALL_OW 88
// DialogueOff ;
16171: CALL_OW 7
// cratesStatus = 1 ;
16175: LD_ADDR_EXP 38
16179: PUSH
16180: LD_INT 1
16182: ST_TO_ADDR
// end ;
16183: END
// every 13 13$0 do
16184: GO 16186
16186: DISABLE
// begin DialogueOn ;
16187: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16191: LD_EXP 10
16195: PPUSH
16196: LD_STRING D12b-Sci-1
16198: PPUSH
16199: CALL_OW 94
// DialogueOff ;
16203: CALL_OW 7
// cratesStatus = 2 ;
16207: LD_ADDR_EXP 38
16211: PUSH
16212: LD_INT 2
16214: ST_TO_ADDR
// end ;
16215: END
// every 32 32$0 do
16216: GO 16218
16218: DISABLE
// begin DialogueOn ;
16219: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16223: LD_EXP 10
16227: PPUSH
16228: LD_STRING D12c-Sci-1
16230: PPUSH
16231: CALL_OW 94
// DialogueOff ;
16235: CALL_OW 7
// wait ( 3 3$0 ) ;
16239: LD_INT 6300
16241: PPUSH
16242: CALL_OW 67
// DialogueOn ;
16246: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16250: LD_EXP 10
16254: PPUSH
16255: LD_STRING D12d-Sci-1
16257: PPUSH
16258: CALL_OW 94
// DialogueOff ;
16262: CALL_OW 7
// cratesStatus = 1 ;
16266: LD_ADDR_EXP 38
16270: PUSH
16271: LD_INT 1
16273: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16274: LD_INT 1400
16276: PPUSH
16277: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16281: LD_INT 35
16283: PPUSH
16284: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16288: LD_INT 1
16290: PPUSH
16291: CALL_OW 463
16295: NOT
16296: PUSH
16297: LD_INT 32
16299: PPUSH
16300: LD_INT 81
16302: PUSH
16303: LD_INT 1
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 70
16314: NOT
16315: AND
16316: IFFALSE 16281
// PrepareJoan ;
16318: CALL 3064 0 0
// end ;
16322: END
// every 42 42$0 do
16323: GO 16325
16325: DISABLE
// begin DialogueOn ;
16326: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16330: LD_EXP 10
16334: PPUSH
16335: LD_STRING D12e-Sci-1
16337: PPUSH
16338: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16342: LD_EXP 1
16346: PPUSH
16347: LD_STRING D12e-JMM-1
16349: PPUSH
16350: CALL_OW 88
// DialogueOff ;
16354: CALL_OW 7
// cratesStatus = 2 ;
16358: LD_ADDR_EXP 38
16362: PUSH
16363: LD_INT 2
16365: ST_TO_ADDR
// end ;
16366: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16367: LD_INT 22
16369: PUSH
16370: LD_INT 6
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 21
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 34
16389: PUSH
16390: LD_INT 51
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: LIST
16401: PPUSH
16402: CALL_OW 69
16406: PUSH
16407: LD_INT 0
16409: GREATER
16410: IFFALSE 16493
16412: GO 16414
16414: DISABLE
16415: LD_INT 0
16417: PPUSH
// begin enable ;
16418: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16419: LD_ADDR_VAR 0 1
16423: PUSH
16424: LD_INT 22
16426: PUSH
16427: LD_INT 6
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 2
16436: PUSH
16437: LD_INT 21
16439: PUSH
16440: LD_INT 1
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 21
16449: PUSH
16450: LD_INT 2
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: PUSH
16471: FOR_IN
16472: IFFALSE 16491
// ComAgressiveMove ( i , 138 , 168 ) ;
16474: LD_VAR 0 1
16478: PPUSH
16479: LD_INT 138
16481: PPUSH
16482: LD_INT 168
16484: PPUSH
16485: CALL_OW 114
16489: GO 16471
16491: POP
16492: POP
// end ;
16493: PPOPN 1
16495: END
// every 0 0$1 do var i ;
16496: GO 16498
16498: DISABLE
16499: LD_INT 0
16501: PPUSH
// begin enable ;
16502: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16503: LD_ADDR_VAR 0 1
16507: PUSH
16508: LD_INT 4
16510: PPUSH
16511: LD_INT 2
16513: PUSH
16514: LD_INT 22
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 22
16526: PUSH
16527: LD_INT 6
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: PPUSH
16542: CALL_OW 70
16546: PUSH
16547: FOR_IN
16548: IFFALSE 16612
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16550: LD_INT 4
16552: PPUSH
16553: LD_INT 22
16555: PUSH
16556: LD_INT 6
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 34
16565: PUSH
16566: LD_INT 51
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 70
16581: PUSH
16582: LD_INT 0
16584: GREATER
16585: IFFALSE 16601
// sendedConvoys = sendedConvoys + 1 ;
16587: LD_ADDR_EXP 39
16591: PUSH
16592: LD_EXP 39
16596: PUSH
16597: LD_INT 1
16599: PLUS
16600: ST_TO_ADDR
// RemoveUnit ( i ) ;
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 64
// end ;
16610: GO 16547
16612: POP
16613: POP
// end ; end_of_file
16614: PPOPN 1
16616: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16617: LD_VAR 0 1
16621: PUSH
16622: LD_INT 1
16624: EQUAL
16625: PUSH
16626: LD_VAR 0 2
16630: PUSH
16631: LD_INT 3
16633: EQUAL
16634: AND
16635: IFFALSE 16645
// contactWithRussian = 1 ;
16637: LD_ADDR_EXP 22
16641: PUSH
16642: LD_INT 1
16644: ST_TO_ADDR
// end ;
16645: PPOPN 2
16647: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16648: LD_VAR 0 1
16652: PPUSH
16653: CALL_OW 266
16657: PUSH
16658: LD_INT 36
16660: EQUAL
16661: PUSH
16662: LD_VAR 0 1
16666: PPUSH
16667: CALL_OW 255
16671: PUSH
16672: LD_INT 1
16674: EQUAL
16675: AND
16676: PUSH
16677: LD_INT 22
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 21
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 33
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: LIST
16711: PPUSH
16712: CALL_OW 69
16716: PUSH
16717: LD_INT 0
16719: EQUAL
16720: AND
16721: PUSH
16722: LD_EXP 23
16726: PUSH
16727: LD_INT 0
16729: EQUAL
16730: AND
16731: IFFALSE 16811
// begin firstTower = 1 ;
16733: LD_ADDR_EXP 23
16737: PUSH
16738: LD_INT 1
16740: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16741: LD_INT 22
16743: PUSH
16744: LD_INT 1
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 21
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 25
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 26
16773: PUSH
16774: LD_INT 1
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: PPUSH
16787: CALL_OW 69
16791: PUSH
16792: LD_EXP 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: DIFF
16800: PPUSH
16801: LD_STRING D3b-Mech1-1
16803: PPUSH
16804: LD_STRING D3b-Mech1-1
16806: PPUSH
16807: CALL 6259 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 266
16820: PUSH
16821: LD_INT 0
16823: EQUAL
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 255
16834: PUSH
16835: LD_INT 1
16837: EQUAL
16838: AND
16839: IFFALSE 16853
// SetBName ( building , theta ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: LD_STRING theta
16848: PPUSH
16849: CALL_OW 500
// if GetSide ( building ) = 3 then
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL_OW 255
16862: PUSH
16863: LD_INT 3
16865: EQUAL
16866: IFFALSE 16940
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16868: LD_ADDR_EXP 31
16872: PUSH
16873: LD_EXP 31
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: CALL_OW 3
16885: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16886: LD_ADDR_EXP 31
16890: PUSH
16891: LD_EXP 31
16895: PPUSH
16896: LD_INT 1
16898: PPUSH
16899: CALL_OW 3
16903: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16904: LD_ADDR_EXP 31
16908: PUSH
16909: LD_EXP 31
16913: PPUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 3
16921: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16922: LD_ADDR_EXP 31
16926: PUSH
16927: LD_EXP 31
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 3
16939: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16940: LD_VAR 0 1
16944: PPUSH
16945: CALL_OW 255
16949: PUSH
16950: LD_INT 3
16952: EQUAL
16953: PUSH
16954: LD_VAR 0 1
16958: PPUSH
16959: CALL_OW 266
16963: PUSH
16964: LD_INT 0
16966: EQUAL
16967: PUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 266
16977: PUSH
16978: LD_INT 2
16980: EQUAL
16981: OR
16982: PUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 266
16992: PUSH
16993: LD_INT 4
16995: EQUAL
16996: OR
16997: PUSH
16998: EMPTY
16999: LIST
17000: AND
17001: IFFALSE 17012
// ComUpgrade ( building ) ;
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 255
17021: PUSH
17022: LD_INT 3
17024: EQUAL
17025: PUSH
17026: LD_VAR 0 1
17030: PPUSH
17031: CALL_OW 266
17035: PUSH
17036: LD_INT 32
17038: EQUAL
17039: AND
17040: IFFALSE 17081
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17042: LD_VAR 0 1
17046: PPUSH
17047: LD_INT 42
17049: PUSH
17050: LD_INT 43
17052: PUSH
17053: LD_INT 44
17055: PUSH
17056: LD_INT 46
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 1
17067: PPUSH
17068: LD_INT 4
17070: PPUSH
17071: CALL_OW 12
17075: ARRAY
17076: PPUSH
17077: CALL_OW 208
// end ; end ;
17081: PPOPN 1
17083: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17084: LD_VAR 0 1
17088: PUSH
17089: LD_INT 22
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 21
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 23
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 69
17128: IN
17129: IFFALSE 17145
// killCounter := killCounter + 1 ;
17131: LD_ADDR_EXP 47
17135: PUSH
17136: LD_EXP 47
17140: PUSH
17141: LD_INT 1
17143: PLUS
17144: ST_TO_ADDR
// if unit = JMM then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_EXP 1
17154: EQUAL
17155: IFFALSE 17164
// YouLost ( JMM ) ;
17157: LD_STRING JMM
17159: PPUSH
17160: CALL_OW 104
// if unit = Joan then
17164: LD_VAR 0 1
17168: PUSH
17169: LD_EXP 15
17173: EQUAL
17174: IFFALSE 17184
// JoanStatus = 0 ;
17176: LD_ADDR_EXP 16
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17184: LD_VAR 0 1
17188: PPUSH
17189: CALL_OW 255
17193: PUSH
17194: LD_INT 1
17196: EQUAL
17197: PUSH
17198: LD_VAR 0 1
17202: PPUSH
17203: CALL_OW 247
17207: PUSH
17208: LD_INT 1
17210: EQUAL
17211: AND
17212: IFFALSE 17288
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17214: LD_VAR 0 1
17218: PPUSH
17219: CALL_OW 257
17223: PUSH
17224: LD_INT 1
17226: EQUAL
17227: PUSH
17228: LD_VAR 0 1
17232: PPUSH
17233: CALL_OW 257
17237: PUSH
17238: LD_INT 2
17240: EQUAL
17241: OR
17242: PUSH
17243: LD_VAR 0 1
17247: PPUSH
17248: CALL_OW 257
17252: PUSH
17253: LD_INT 3
17255: EQUAL
17256: OR
17257: PUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 257
17267: PUSH
17268: LD_INT 4
17270: EQUAL
17271: OR
17272: IFFALSE 17288
// unitLost = unitLost + 1 ;
17274: LD_ADDR_EXP 30
17278: PUSH
17279: LD_EXP 30
17283: PUSH
17284: LD_INT 1
17286: PLUS
17287: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17288: LD_VAR 0 1
17292: PPUSH
17293: CALL_OW 255
17297: PUSH
17298: LD_INT 3
17300: EQUAL
17301: PUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 247
17311: PUSH
17312: LD_INT 3
17314: EQUAL
17315: AND
17316: IFFALSE 18008
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 266
17327: PUSH
17328: LD_INT 31
17330: EQUAL
17331: PUSH
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 266
17341: PUSH
17342: LD_INT 32
17344: EQUAL
17345: OR
17346: PUSH
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 266
17356: PUSH
17357: LD_INT 36
17359: EQUAL
17360: OR
17361: PUSH
17362: LD_VAR 0 1
17366: PPUSH
17367: CALL_OW 266
17371: PUSH
17372: LD_INT 0
17374: EQUAL
17375: OR
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 266
17386: PUSH
17387: LD_INT 24
17389: EQUAL
17390: OR
17391: PUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 17
17404: EQUAL
17405: OR
17406: PUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 266
17416: PUSH
17417: LD_INT 25
17419: EQUAL
17420: OR
17421: PUSH
17422: LD_VAR 0 1
17426: PPUSH
17427: CALL_OW 266
17431: PUSH
17432: LD_INT 19
17434: EQUAL
17435: OR
17436: PUSH
17437: LD_VAR 0 1
17441: PPUSH
17442: CALL_OW 266
17446: PUSH
17447: LD_INT 20
17449: EQUAL
17450: OR
17451: PUSH
17452: LD_VAR 0 1
17456: PPUSH
17457: CALL_OW 266
17461: PUSH
17462: LD_INT 18
17464: EQUAL
17465: OR
17466: PUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 266
17476: PUSH
17477: LD_INT 21
17479: EQUAL
17480: OR
17481: PUSH
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 266
17491: PUSH
17492: LD_INT 23
17494: EQUAL
17495: OR
17496: PUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 266
17506: PUSH
17507: LD_INT 16
17509: EQUAL
17510: OR
17511: PUSH
17512: LD_VAR 0 1
17516: PPUSH
17517: CALL_OW 266
17521: PUSH
17522: LD_INT 6
17524: EQUAL
17525: OR
17526: PUSH
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 266
17536: PUSH
17537: LD_INT 29
17539: EQUAL
17540: OR
17541: PUSH
17542: LD_VAR 0 1
17546: PPUSH
17547: CALL_OW 266
17551: PUSH
17552: LD_INT 26
17554: EQUAL
17555: OR
17556: PUSH
17557: LD_VAR 0 1
17561: PPUSH
17562: CALL_OW 266
17566: PUSH
17567: LD_INT 30
17569: EQUAL
17570: OR
17571: PUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 266
17581: PUSH
17582: LD_INT 28
17584: EQUAL
17585: OR
17586: PUSH
17587: LD_VAR 0 1
17591: PPUSH
17592: CALL_OW 266
17596: PUSH
17597: LD_INT 27
17599: EQUAL
17600: OR
17601: PUSH
17602: LD_VAR 0 1
17606: PPUSH
17607: CALL_OW 266
17611: PUSH
17612: LD_INT 33
17614: EQUAL
17615: OR
17616: PUSH
17617: LD_VAR 0 1
17621: PPUSH
17622: CALL_OW 266
17626: PUSH
17627: LD_INT 2
17629: EQUAL
17630: OR
17631: PUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 266
17641: PUSH
17642: LD_INT 4
17644: EQUAL
17645: OR
17646: IFFALSE 17732
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17648: LD_ADDR_EXP 31
17652: PUSH
17653: LD_EXP 31
17657: PUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 266
17667: ADD
17668: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17669: LD_ADDR_EXP 31
17673: PUSH
17674: LD_EXP 31
17678: PUSH
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 250
17688: ADD
17689: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17690: LD_ADDR_EXP 31
17694: PUSH
17695: LD_EXP 31
17699: PUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 251
17709: ADD
17710: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17711: LD_ADDR_EXP 31
17715: PUSH
17716: LD_EXP 31
17720: PUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 254
17730: ADD
17731: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 266
17741: PUSH
17742: LD_INT 1
17744: EQUAL
17745: IFFALSE 17824
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17747: LD_ADDR_EXP 31
17751: PUSH
17752: LD_EXP 31
17756: PUSH
17757: LD_INT 0
17759: ADD
17760: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17761: LD_ADDR_EXP 31
17765: PUSH
17766: LD_EXP 31
17770: PUSH
17771: LD_VAR 0 1
17775: PPUSH
17776: CALL_OW 250
17780: ADD
17781: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17782: LD_ADDR_EXP 31
17786: PUSH
17787: LD_EXP 31
17791: PUSH
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 251
17801: ADD
17802: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17803: LD_ADDR_EXP 31
17807: PUSH
17808: LD_EXP 31
17812: PUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 254
17822: ADD
17823: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17824: LD_VAR 0 1
17828: PPUSH
17829: CALL_OW 266
17833: PUSH
17834: LD_INT 3
17836: EQUAL
17837: IFFALSE 17916
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17839: LD_ADDR_EXP 31
17843: PUSH
17844: LD_EXP 31
17848: PUSH
17849: LD_INT 2
17851: ADD
17852: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17853: LD_ADDR_EXP 31
17857: PUSH
17858: LD_EXP 31
17862: PUSH
17863: LD_VAR 0 1
17867: PPUSH
17868: CALL_OW 250
17872: ADD
17873: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17874: LD_ADDR_EXP 31
17878: PUSH
17879: LD_EXP 31
17883: PUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 251
17893: ADD
17894: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17895: LD_ADDR_EXP 31
17899: PUSH
17900: LD_EXP 31
17904: PUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 254
17914: ADD
17915: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17916: LD_VAR 0 1
17920: PPUSH
17921: CALL_OW 266
17925: PUSH
17926: LD_INT 5
17928: EQUAL
17929: IFFALSE 18008
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17931: LD_ADDR_EXP 31
17935: PUSH
17936: LD_EXP 31
17940: PUSH
17941: LD_INT 4
17943: ADD
17944: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17945: LD_ADDR_EXP 31
17949: PUSH
17950: LD_EXP 31
17954: PUSH
17955: LD_VAR 0 1
17959: PPUSH
17960: CALL_OW 250
17964: ADD
17965: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17966: LD_ADDR_EXP 31
17970: PUSH
17971: LD_EXP 31
17975: PUSH
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 251
17985: ADD
17986: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17987: LD_ADDR_EXP 31
17991: PUSH
17992: LD_EXP 31
17996: PUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: CALL_OW 254
18006: ADD
18007: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18008: LD_EXP 48
18012: PUSH
18013: LD_VAR 0 1
18017: PPUSH
18018: CALL_OW 257
18022: PUSH
18023: LD_INT 3
18025: EQUAL
18026: AND
18027: PUSH
18028: LD_VAR 0 1
18032: PPUSH
18033: CALL_OW 255
18037: PUSH
18038: LD_INT 3
18040: EQUAL
18041: AND
18042: PUSH
18043: LD_INT 21
18045: PPUSH
18046: CALL_OW 302
18050: AND
18051: PUSH
18052: LD_INT 21
18054: PPUSH
18055: CALL_OW 255
18059: PUSH
18060: LD_INT 3
18062: EQUAL
18063: AND
18064: IFFALSE 18146
// begin ruMechCounter := ruMechCounter - 1 ;
18066: LD_ADDR_EXP 48
18070: PUSH
18071: LD_EXP 48
18075: PUSH
18076: LD_INT 1
18078: MINUS
18079: ST_TO_ADDR
// uc_side = 3 ;
18080: LD_ADDR_OWVAR 20
18084: PUSH
18085: LD_INT 3
18087: ST_TO_ADDR
// uc_nation = 3 ;
18088: LD_ADDR_OWVAR 21
18092: PUSH
18093: LD_INT 3
18095: ST_TO_ADDR
// hc_gallery :=  ;
18096: LD_ADDR_OWVAR 33
18100: PUSH
18101: LD_STRING 
18103: ST_TO_ADDR
// hc_name :=  ;
18104: LD_ADDR_OWVAR 26
18108: PUSH
18109: LD_STRING 
18111: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18112: LD_INT 0
18114: PPUSH
18115: LD_EXP 34
18119: PPUSH
18120: LD_EXP 35
18124: PPUSH
18125: CALL_OW 12
18129: PPUSH
18130: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18134: CALL_OW 44
18138: PPUSH
18139: LD_INT 21
18141: PPUSH
18142: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL_OW 255
18155: PUSH
18156: LD_INT 3
18158: EQUAL
18159: PUSH
18160: LD_VAR 0 1
18164: PPUSH
18165: CALL_OW 264
18169: PUSH
18170: LD_INT 52
18172: EQUAL
18173: AND
18174: PUSH
18175: LD_INT 21
18177: PPUSH
18178: CALL_OW 302
18182: AND
18183: PUSH
18184: LD_INT 21
18186: PPUSH
18187: CALL_OW 255
18191: PUSH
18192: LD_INT 3
18194: EQUAL
18195: AND
18196: IFFALSE 18217
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18198: LD_INT 21
18200: PPUSH
18201: LD_INT 22
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: LD_INT 1
18209: PPUSH
18210: LD_INT 52
18212: PPUSH
18213: CALL_OW 125
// end ;
18217: PPOPN 1
18219: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18220: LD_INT 0
18222: PPUSH
18223: PPUSH
18224: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 264
18234: PUSH
18235: LD_INT 51
18237: EQUAL
18238: PUSH
18239: LD_VAR 0 1
18243: PPUSH
18244: CALL_OW 255
18248: PUSH
18249: LD_INT 3
18251: EQUAL
18252: AND
18253: IFFALSE 18315
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18255: LD_ADDR_VAR 0 5
18259: PUSH
18260: LD_INT 2
18262: PPUSH
18263: CALL_OW 274
18267: PPUSH
18268: LD_INT 1
18270: PPUSH
18271: CALL_OW 275
18275: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18276: LD_INT 2
18278: PPUSH
18279: CALL_OW 274
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: LD_VAR 0 5
18291: PUSH
18292: LD_INT 100
18294: MINUS
18295: PPUSH
18296: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18300: LD_VAR 0 1
18304: PPUSH
18305: LD_INT 1
18307: PPUSH
18308: LD_INT 100
18310: PPUSH
18311: CALL_OW 291
// end ; if building = rufabsupp then
18315: LD_VAR 0 2
18319: PUSH
18320: LD_INT 17
18322: EQUAL
18323: IFFALSE 18337
// SetSide ( vehicle , 6 ) ;
18325: LD_VAR 0 1
18329: PPUSH
18330: LD_INT 6
18332: PPUSH
18333: CALL_OW 235
// end ;
18337: PPOPN 5
18339: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18340: LD_VAR 0 1
18344: PPUSH
18345: CALL_OW 255
18349: PUSH
18350: LD_INT 3
18352: EQUAL
18353: IFFALSE 18384
// begin tamedApemans = tamedApemans + 1 ;
18355: LD_ADDR_EXP 32
18359: PUSH
18360: LD_EXP 32
18364: PUSH
18365: LD_INT 1
18367: PLUS
18368: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18369: LD_VAR 0 1
18373: PPUSH
18374: LD_INT 106
18376: PPUSH
18377: LD_INT 85
18379: PPUSH
18380: CALL_OW 111
// end ; end ;
18384: PPOPN 2
18386: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18387: LD_INT 0
18389: PPUSH
18390: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18391: LD_VAR 0 1
18395: PPUSH
18396: CALL_OW 255
18400: PUSH
18401: LD_INT 3
18403: EQUAL
18404: PUSH
18405: LD_VAR 0 1
18409: PPUSH
18410: CALL_OW 247
18414: PUSH
18415: LD_INT 2
18417: EQUAL
18418: AND
18419: IFFALSE 18528
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 264
18430: PUSH
18431: LD_INT 42
18433: EQUAL
18434: PUSH
18435: LD_VAR 0 1
18439: PPUSH
18440: CALL_OW 264
18444: PUSH
18445: LD_INT 43
18447: EQUAL
18448: OR
18449: PUSH
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 264
18459: PUSH
18460: LD_INT 44
18462: EQUAL
18463: OR
18464: PUSH
18465: LD_VAR 0 1
18469: PPUSH
18470: CALL_OW 264
18474: PUSH
18475: LD_INT 46
18477: EQUAL
18478: OR
18479: IFFALSE 18528
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18481: LD_INT 21
18483: PPUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 265
18493: PPUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL_OW 262
18503: PPUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 263
18513: PPUSH
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 264
18523: PPUSH
18524: CALL_OW 185
// end ;
18528: PPOPN 3
18530: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 255
18540: PUSH
18541: LD_INT 3
18543: EQUAL
18544: PUSH
18545: LD_VAR 0 2
18549: PPUSH
18550: CALL_OW 255
18554: PUSH
18555: LD_INT 3
18557: EQUAL
18558: AND
18559: PUSH
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL_OW 302
18569: AND
18570: IFFALSE 18612
// begin ComRepairVehicle ( human , vehicle ) ;
18572: LD_VAR 0 2
18576: PPUSH
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18586: LD_VAR 0 2
18590: PPUSH
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18600: LD_VAR 0 1
18604: PPUSH
18605: LD_INT 100
18607: PPUSH
18608: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18612: LD_VAR 0 1
18616: PPUSH
18617: CALL_OW 255
18621: PUSH
18622: LD_INT 3
18624: EQUAL
18625: PUSH
18626: LD_VAR 0 2
18630: PPUSH
18631: CALL_OW 255
18635: PUSH
18636: LD_INT 3
18638: EQUAL
18639: AND
18640: PUSH
18641: LD_INT 21
18643: PPUSH
18644: CALL_OW 302
18648: AND
18649: PUSH
18650: LD_VAR 0 1
18654: PPUSH
18655: CALL_OW 302
18659: NOT
18660: AND
18661: IFFALSE 18675
// ComEnterUnit ( human , rufab ) ;
18663: LD_VAR 0 2
18667: PPUSH
18668: LD_INT 21
18670: PPUSH
18671: CALL_OW 120
// end ;
18675: PPOPN 2
18677: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18678: LD_VAR 0 1
18682: PUSH
18683: LD_INT 21
18685: EQUAL
18686: PUSH
18687: LD_VAR 0 2
18691: PPUSH
18692: CALL_OW 255
18696: PUSH
18697: LD_INT 3
18699: EQUAL
18700: AND
18701: IFFALSE 18715
// SetLives ( human , 1000 ) ;
18703: LD_VAR 0 2
18707: PPUSH
18708: LD_INT 1000
18710: PPUSH
18711: CALL_OW 234
// end ;
18715: PPOPN 2
18717: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18718: LD_VAR 0 1
18722: PPUSH
18723: CALL 37716 0 1
// end ; end_of_file
18727: PPOPN 1
18729: END
// every 0 0$30 trigger cratesStatus = 1 do
18730: LD_EXP 38
18734: PUSH
18735: LD_INT 1
18737: EQUAL
18738: IFFALSE 18791
18740: GO 18742
18742: DISABLE
// begin enable ;
18743: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18744: LD_INT 350
18746: PUSH
18747: LD_INT 875
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: PPUSH
18757: LD_INT 2
18759: PPUSH
18760: CALL_OW 12
18764: ARRAY
18765: PPUSH
18766: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
18770: LD_INT 1
18772: PPUSH
18773: LD_INT 5
18775: PPUSH
18776: CALL_OW 12
18780: PPUSH
18781: LD_INT 7
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: CALL_OW 55
// end ;
18791: END
// every 1 1$0 trigger cratesStatus = 2 do
18792: LD_EXP 38
18796: PUSH
18797: LD_INT 2
18799: EQUAL
18800: IFFALSE 18883
18802: GO 18804
18804: DISABLE
// begin enable ;
18805: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18806: LD_INT 3150
18808: PUSH
18809: LD_INT 4550
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 1
18818: PPUSH
18819: LD_INT 2
18821: PPUSH
18822: CALL_OW 12
18826: ARRAY
18827: PPUSH
18828: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18832: LD_INT 2
18834: PUSH
18835: LD_INT 5
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: PPUSH
18845: LD_INT 2
18847: PPUSH
18848: CALL_OW 12
18852: ARRAY
18853: PPUSH
18854: LD_INT 6
18856: PUSH
18857: LD_INT 7
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: PPUSH
18867: LD_INT 2
18869: PPUSH
18870: CALL_OW 12
18874: ARRAY
18875: PPUSH
18876: LD_INT 1
18878: PPUSH
18879: CALL_OW 55
// end ;
18883: END
// every 0 0$30 + 0 0$10 do
18884: GO 18886
18886: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18887: LD_INT 4
18889: PUSH
18890: LD_INT 5
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: PPUSH
18900: LD_INT 2
18902: PPUSH
18903: CALL_OW 12
18907: ARRAY
18908: PPUSH
18909: LD_INT 7
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL_OW 55
// Wait ( 0 0$15 ) ;
18919: LD_INT 525
18921: PPUSH
18922: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18926: LD_INT 4
18928: PUSH
18929: LD_INT 5
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 1
18938: PPUSH
18939: LD_INT 2
18941: PPUSH
18942: CALL_OW 12
18946: ARRAY
18947: PPUSH
18948: LD_INT 7
18950: PPUSH
18951: LD_INT 1
18953: PPUSH
18954: CALL_OW 55
// Wait ( 0 0$20 ) ;
18958: LD_INT 700
18960: PPUSH
18961: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18965: LD_INT 4
18967: PUSH
18968: LD_INT 5
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 1
18977: PPUSH
18978: LD_INT 2
18980: PPUSH
18981: CALL_OW 12
18985: ARRAY
18986: PPUSH
18987: LD_INT 7
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: CALL_OW 55
// end ; end_of_file
18997: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18998: LD_EXP 24
19002: PUSH
19003: LD_INT 1
19005: EQUAL
19006: IFFALSE 19307
19008: GO 19010
19010: DISABLE
19011: LD_INT 0
19013: PPUSH
19014: PPUSH
19015: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19016: LD_ADDR_VAR 0 2
19020: PUSH
19021: LD_INT 22
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 21
19033: PUSH
19034: LD_INT 3
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 30
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 30
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: PPUSH
19074: CALL_OW 69
19078: ST_TO_ADDR
// for i in tmp do
19079: LD_ADDR_VAR 0 1
19083: PUSH
19084: LD_VAR 0 2
19088: PUSH
19089: FOR_IN
19090: IFFALSE 19123
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19092: LD_ADDR_VAR 0 3
19096: PUSH
19097: LD_VAR 0 3
19101: PUSH
19102: LD_VAR 0 1
19106: PPUSH
19107: CALL_OW 274
19111: PPUSH
19112: LD_INT 1
19114: PPUSH
19115: CALL_OW 275
19119: PLUS
19120: ST_TO_ADDR
19121: GO 19089
19123: POP
19124: POP
// strings = [ ] ;
19125: LD_ADDR_EXP 27
19129: PUSH
19130: EMPTY
19131: ST_TO_ADDR
// if tmp = 0 then
19132: LD_VAR 0 2
19136: PUSH
19137: LD_INT 0
19139: EQUAL
19140: IFFALSE 19165
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19142: LD_ADDR_EXP 27
19146: PUSH
19147: LD_EXP 27
19151: PUSH
19152: LD_STRING #Am06-1
19154: PUSH
19155: LD_EXP 25
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: ADD
19164: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19165: LD_VAR 0 2
19169: PUSH
19170: LD_INT 0
19172: GREATER
19173: PUSH
19174: LD_EXP 25
19178: PUSH
19179: LD_VAR 0 3
19183: GREATER
19184: AND
19185: IFFALSE 19216
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19187: LD_ADDR_EXP 27
19191: PUSH
19192: LD_EXP 27
19196: PUSH
19197: LD_STRING #Am06-1
19199: PUSH
19200: LD_EXP 25
19204: PUSH
19205: LD_VAR 0 3
19209: MINUS
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: ADD
19215: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19216: LD_VAR 0 2
19220: PUSH
19221: LD_INT 0
19223: GREATER
19224: PUSH
19225: LD_EXP 25
19229: PUSH
19230: LD_VAR 0 3
19234: LESSEQUAL
19235: AND
19236: IFFALSE 19259
// strings = strings ^ [ #Am06-1 , 0 ] ;
19238: LD_ADDR_EXP 27
19242: PUSH
19243: LD_EXP 27
19247: PUSH
19248: LD_STRING #Am06-1
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: ADD
19258: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19259: LD_ADDR_EXP 26
19263: PUSH
19264: LD_EXP 26
19268: PUSH
19269: LD_INT 35
19271: MINUS
19272: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19273: LD_ADDR_EXP 27
19277: PUSH
19278: LD_EXP 27
19282: PUSH
19283: LD_STRING #Am06-2
19285: PUSH
19286: LD_EXP 26
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: ADD
19295: ST_TO_ADDR
// display_strings = strings ;
19296: LD_ADDR_OWVAR 47
19300: PUSH
19301: LD_EXP 27
19305: ST_TO_ADDR
// enable ;
19306: ENABLE
// end ; end_of_file
19307: PPOPN 3
19309: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19310: LD_INT 0
19312: PPUSH
19313: PPUSH
19314: PPUSH
19315: PPUSH
19316: PPUSH
19317: PPUSH
19318: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: LD_INT 22
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 30
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 30
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PPUSH
19366: CALL_OW 69
19370: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19371: LD_INT 35
19373: PPUSH
19374: CALL_OW 67
// until depot ;
19378: LD_VAR 0 3
19382: IFFALSE 19319
// repeat wait ( 0 0$1 ) ;
19384: LD_INT 35
19386: PPUSH
19387: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19391: LD_ADDR_VAR 0 4
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 91
19408: PUSH
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 1
19416: ARRAY
19417: PUSH
19418: LD_INT 15
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 21
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: LD_INT 25
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 25
19451: PUSH
19452: LD_INT 2
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 25
19461: PUSH
19462: LD_INT 3
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 25
19471: PUSH
19472: LD_INT 4
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 3
19488: PUSH
19489: LD_INT 54
19491: PUSH
19492: EMPTY
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 3
19501: PUSH
19502: LD_INT 55
19504: PUSH
19505: EMPTY
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: PPUSH
19520: CALL_OW 69
19524: PUSH
19525: LD_EXP 2
19529: PUSH
19530: LD_EXP 3
19534: PUSH
19535: LD_EXP 4
19539: PUSH
19540: LD_EXP 5
19544: PUSH
19545: LD_EXP 7
19549: PUSH
19550: LD_EXP 8
19554: PUSH
19555: LD_EXP 9
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: PUSH
19569: LD_EXP 46
19573: ADD
19574: DIFF
19575: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19576: LD_VAR 0 4
19580: PUSH
19581: LD_INT 1
19583: PPUSH
19584: CALL_OW 463
19588: NOT
19589: AND
19590: IFFALSE 19384
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19592: LD_ADDR_VAR 0 4
19596: PUSH
19597: LD_VAR 0 4
19601: PUSH
19602: LD_INT 1
19604: PPUSH
19605: LD_VAR 0 4
19609: PPUSH
19610: CALL_OW 12
19614: ARRAY
19615: ST_TO_ADDR
// blockSpawn = 1 ;
19616: LD_ADDR_EXP 29
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// uc_side = 2 ;
19624: LD_ADDR_OWVAR 20
19628: PUSH
19629: LD_INT 2
19631: ST_TO_ADDR
// uc_nation = 2 ;
19632: LD_ADDR_OWVAR 21
19636: PUSH
19637: LD_INT 2
19639: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ,  ) ;
19640: LD_ADDR_EXP 19
19644: PUSH
19645: LD_STRING Kurt
19647: PPUSH
19648: LD_INT 0
19650: PPUSH
19651: LD_STRING 
19653: PPUSH
19654: CALL 41625 0 3
19658: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19659: LD_EXP 19
19663: PPUSH
19664: LD_VAR 0 4
19668: PPUSH
19669: CALL_OW 250
19673: PPUSH
19674: LD_VAR 0 4
19678: PPUSH
19679: CALL_OW 251
19683: PPUSH
19684: LD_INT 5
19686: PPUSH
19687: LD_INT 1
19689: PPUSH
19690: CALL_OW 50
// InGameOn ;
19694: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19698: LD_EXP 19
19702: PPUSH
19703: CALL_OW 87
// wait ( 0 0$2 ) ;
19707: LD_INT 70
19709: PPUSH
19710: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19714: LD_EXP 19
19718: PPUSH
19719: LD_VAR 0 4
19723: PPUSH
19724: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19728: LD_VAR 0 4
19732: PPUSH
19733: LD_EXP 19
19737: PPUSH
19738: CALL_OW 112
// wait ( 0 0$1 ) ;
19742: LD_INT 35
19744: PPUSH
19745: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19749: LD_VAR 0 4
19753: PPUSH
19754: LD_EXP 19
19758: PPUSH
19759: CALL_OW 119
// DialogueOn ;
19763: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19767: LD_EXP 19
19771: PPUSH
19772: LD_STRING D2-Kurt-1
19774: PPUSH
19775: CALL_OW 88
// if tmp = JMM then
19779: LD_VAR 0 4
19783: PUSH
19784: LD_EXP 1
19788: EQUAL
19789: IFFALSE 19881
// begin Say ( JMM , D2-JMM-1 ) ;
19791: LD_EXP 1
19795: PPUSH
19796: LD_STRING D2-JMM-1
19798: PPUSH
19799: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19803: LD_EXP 19
19807: PPUSH
19808: LD_STRING D2-Kurt-2
19810: PPUSH
19811: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19815: LD_EXP 1
19819: PPUSH
19820: LD_STRING D2-JMM-2
19822: PPUSH
19823: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19827: LD_EXP 19
19831: PPUSH
19832: LD_STRING D2-Kurt-3
19834: PPUSH
19835: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19839: LD_EXP 1
19843: PPUSH
19844: LD_STRING D2-JMM-3
19846: PPUSH
19847: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19851: LD_EXP 19
19855: PPUSH
19856: LD_STRING D2-Kurt-4
19858: PPUSH
19859: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19863: LD_EXP 1
19867: PPUSH
19868: LD_STRING D2-JMM-4
19870: PPUSH
19871: CALL_OW 88
// DialogueOff ;
19875: CALL_OW 7
// end else
19879: GO 20191
// begin if GetSex ( tmp ) = 1 then
19881: LD_VAR 0 4
19885: PPUSH
19886: CALL_OW 258
19890: PUSH
19891: LD_INT 1
19893: EQUAL
19894: IFFALSE 19908
// Say ( tmp , D2-Sol1-1 ) ;
19896: LD_VAR 0 4
19900: PPUSH
19901: LD_STRING D2-Sol1-1
19903: PPUSH
19904: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19908: LD_VAR 0 4
19912: PPUSH
19913: CALL_OW 258
19917: PUSH
19918: LD_INT 2
19920: EQUAL
19921: IFFALSE 19935
// Say ( tmp , D2-FSol1-1 ) ;
19923: LD_VAR 0 4
19927: PPUSH
19928: LD_STRING D2-FSol1-1
19930: PPUSH
19931: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19935: LD_EXP 19
19939: PPUSH
19940: LD_STRING D2-Kurt-2
19942: PPUSH
19943: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19947: LD_VAR 0 4
19951: PPUSH
19952: CALL_OW 258
19956: PUSH
19957: LD_INT 1
19959: EQUAL
19960: IFFALSE 19974
// Say ( tmp , D2-Sol1-2 ) ;
19962: LD_VAR 0 4
19966: PPUSH
19967: LD_STRING D2-Sol1-2
19969: PPUSH
19970: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19974: LD_VAR 0 4
19978: PPUSH
19979: CALL_OW 258
19983: PUSH
19984: LD_INT 2
19986: EQUAL
19987: IFFALSE 20001
// Say ( tmp , D2-FSol1-2 ) ;
19989: LD_VAR 0 4
19993: PPUSH
19994: LD_STRING D2-FSol1-2
19996: PPUSH
19997: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20001: LD_EXP 19
20005: PPUSH
20006: LD_STRING D2-Kurt-3
20008: PPUSH
20009: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20013: LD_VAR 0 4
20017: PPUSH
20018: CALL_OW 258
20022: PUSH
20023: LD_INT 1
20025: EQUAL
20026: IFFALSE 20040
// Say ( tmp , D2-Sol1-3 ) ;
20028: LD_VAR 0 4
20032: PPUSH
20033: LD_STRING D2-Sol1-3
20035: PPUSH
20036: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20040: LD_VAR 0 4
20044: PPUSH
20045: CALL_OW 258
20049: PUSH
20050: LD_INT 2
20052: EQUAL
20053: IFFALSE 20067
// Say ( tmp , D2-FSol1-3 ) ;
20055: LD_VAR 0 4
20059: PPUSH
20060: LD_STRING D2-FSol1-3
20062: PPUSH
20063: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20067: LD_EXP 19
20071: PPUSH
20072: LD_STRING D2-Kurt-4
20074: PPUSH
20075: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20079: LD_VAR 0 4
20083: PPUSH
20084: CALL_OW 258
20088: PUSH
20089: LD_INT 1
20091: EQUAL
20092: IFFALSE 20106
// Say ( tmp , D2-Sol1-4 ) ;
20094: LD_VAR 0 4
20098: PPUSH
20099: LD_STRING D2-Sol1-4
20101: PPUSH
20102: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20106: LD_VAR 0 4
20110: PPUSH
20111: CALL_OW 258
20115: PUSH
20116: LD_INT 2
20118: EQUAL
20119: IFFALSE 20133
// Say ( tmp , D2-FSol1-4 ) ;
20121: LD_VAR 0 4
20125: PPUSH
20126: LD_STRING D2-FSol1-4
20128: PPUSH
20129: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20133: LD_VAR 0 4
20137: PPUSH
20138: CALL_OW 258
20142: PUSH
20143: LD_INT 1
20145: EQUAL
20146: IFFALSE 20160
// Say ( tmp , D2-Sol1-5 ) ;
20148: LD_VAR 0 4
20152: PPUSH
20153: LD_STRING D2-Sol1-5
20155: PPUSH
20156: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20160: LD_VAR 0 4
20164: PPUSH
20165: CALL_OW 258
20169: PUSH
20170: LD_INT 2
20172: EQUAL
20173: IFFALSE 20187
// Say ( tmp , D2-FSol1-5 ) ;
20175: LD_VAR 0 4
20179: PPUSH
20180: LD_STRING D2-FSol1-5
20182: PPUSH
20183: CALL_OW 88
// DialogueOff ;
20187: CALL_OW 7
// end ; dec = ShowQuery1 ;
20191: LD_ADDR_VAR 0 6
20195: PUSH
20196: CALL 6720 0 0
20200: ST_TO_ADDR
// if dec = 1 then
20201: LD_VAR 0 6
20205: PUSH
20206: LD_INT 1
20208: EQUAL
20209: IFFALSE 20271
// begin DialogueOn ;
20211: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20215: LD_EXP 19
20219: PPUSH
20220: LD_STRING D2a-Kurt-1
20222: PPUSH
20223: CALL_OW 88
// DialogueOff ;
20227: CALL_OW 7
// InGameOff ;
20231: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20235: LD_INT 1
20237: PPUSH
20238: LD_INT 2
20240: PPUSH
20241: LD_INT 2
20243: PPUSH
20244: LD_INT 1
20246: PPUSH
20247: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20251: LD_EXP 19
20255: PPUSH
20256: LD_INT 8
20258: PPUSH
20259: CALL_OW 113
// readyToEscape = 1 ;
20263: LD_ADDR_EXP 21
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// end ; if dec = 2 then
20271: LD_VAR 0 6
20275: PUSH
20276: LD_INT 2
20278: EQUAL
20279: IFFALSE 20799
// begin DialogueOn ;
20281: CALL_OW 6
// if tmp = JMM then
20285: LD_VAR 0 4
20289: PUSH
20290: LD_EXP 1
20294: EQUAL
20295: IFFALSE 20351
// begin Say ( JMM , D2b-JMM-1 ) ;
20297: LD_EXP 1
20301: PPUSH
20302: LD_STRING D2b-JMM-1
20304: PPUSH
20305: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20309: LD_EXP 19
20313: PPUSH
20314: LD_STRING D2b-Kurt-1
20316: PPUSH
20317: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20321: LD_EXP 1
20325: PPUSH
20326: LD_STRING D2b-JMM-2
20328: PPUSH
20329: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20333: LD_EXP 19
20337: PPUSH
20338: LD_STRING D2b-Kurt-2
20340: PPUSH
20341: CALL_OW 88
// DialogueOff ;
20345: CALL_OW 7
// end else
20349: GO 20541
// begin if GetSex ( tmp ) = 1 then
20351: LD_VAR 0 4
20355: PPUSH
20356: CALL_OW 258
20360: PUSH
20361: LD_INT 1
20363: EQUAL
20364: IFFALSE 20378
// Say ( tmp , D2b-Sol1-1 ) ;
20366: LD_VAR 0 4
20370: PPUSH
20371: LD_STRING D2b-Sol1-1
20373: PPUSH
20374: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20378: LD_VAR 0 4
20382: PPUSH
20383: CALL_OW 258
20387: PUSH
20388: LD_INT 2
20390: EQUAL
20391: IFFALSE 20405
// Say ( tmp , D2b-FSol1-1 ) ;
20393: LD_VAR 0 4
20397: PPUSH
20398: LD_STRING D2b-FSol1-1
20400: PPUSH
20401: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20405: LD_EXP 19
20409: PPUSH
20410: LD_STRING D2b-Kurt-1
20412: PPUSH
20413: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20417: LD_VAR 0 4
20421: PPUSH
20422: CALL_OW 258
20426: PUSH
20427: LD_INT 1
20429: EQUAL
20430: IFFALSE 20444
// Say ( tmp , D2b-Sol1-2 ) ;
20432: LD_VAR 0 4
20436: PPUSH
20437: LD_STRING D2b-Sol1-2
20439: PPUSH
20440: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20444: LD_VAR 0 4
20448: PPUSH
20449: CALL_OW 258
20453: PUSH
20454: LD_INT 2
20456: EQUAL
20457: IFFALSE 20471
// Say ( tmp , D2b-FSol1-2 ) ;
20459: LD_VAR 0 4
20463: PPUSH
20464: LD_STRING D2b-FSol1-2
20466: PPUSH
20467: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20471: LD_EXP 19
20475: PPUSH
20476: LD_STRING D2b-Kurt-2
20478: PPUSH
20479: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20483: LD_VAR 0 4
20487: PPUSH
20488: CALL_OW 258
20492: PUSH
20493: LD_INT 1
20495: EQUAL
20496: IFFALSE 20510
// Say ( tmp , D2c-Sol1-2 ) ;
20498: LD_VAR 0 4
20502: PPUSH
20503: LD_STRING D2c-Sol1-2
20505: PPUSH
20506: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20510: LD_VAR 0 4
20514: PPUSH
20515: CALL_OW 258
20519: PUSH
20520: LD_INT 2
20522: EQUAL
20523: IFFALSE 20537
// Say ( tmp , D2c-FSol1-2 ) ;
20525: LD_VAR 0 4
20529: PPUSH
20530: LD_STRING D2c-FSol1-2
20532: PPUSH
20533: CALL_OW 88
// DialogueOff ;
20537: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20541: LD_ADDR_VAR 0 7
20545: PUSH
20546: CALL 6794 0 0
20550: ST_TO_ADDR
// if dec2 = 1 then
20551: LD_VAR 0 7
20555: PUSH
20556: LD_INT 1
20558: EQUAL
20559: IFFALSE 20621
// begin DialogueOn ;
20561: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20565: LD_EXP 19
20569: PPUSH
20570: LD_STRING D2a-Kurt-1
20572: PPUSH
20573: CALL_OW 88
// DialogueOff ;
20577: CALL_OW 7
// InGameOff ;
20581: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20585: LD_INT 1
20587: PPUSH
20588: LD_INT 2
20590: PPUSH
20591: LD_INT 2
20593: PPUSH
20594: LD_INT 1
20596: PPUSH
20597: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20601: LD_EXP 19
20605: PPUSH
20606: LD_INT 8
20608: PPUSH
20609: CALL_OW 113
// readyToEscape = 1 ;
20613: LD_ADDR_EXP 21
20617: PUSH
20618: LD_INT 1
20620: ST_TO_ADDR
// end ; if dec2 = 2 then
20621: LD_VAR 0 7
20625: PUSH
20626: LD_INT 2
20628: EQUAL
20629: IFFALSE 20799
// begin if tmp = JMM then
20631: LD_VAR 0 4
20635: PUSH
20636: LD_EXP 1
20640: EQUAL
20641: IFFALSE 20701
// begin DialogueOn ;
20643: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20647: LD_EXP 1
20651: PPUSH
20652: LD_STRING D2c-JMM-1
20654: PPUSH
20655: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20659: LD_EXP 19
20663: PPUSH
20664: LD_STRING D2c-Kurt-1
20666: PPUSH
20667: CALL_OW 88
// DialogueOff ;
20671: CALL_OW 7
// InGameOff ;
20675: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20679: LD_EXP 19
20683: PPUSH
20684: LD_INT 8
20686: PPUSH
20687: CALL_OW 113
// readyToEscape = 1 ;
20691: LD_ADDR_EXP 21
20695: PUSH
20696: LD_INT 1
20698: ST_TO_ADDR
// end else
20699: GO 20799
// begin DialogueOn ;
20701: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20705: LD_VAR 0 4
20709: PPUSH
20710: CALL_OW 258
20714: PUSH
20715: LD_INT 1
20717: EQUAL
20718: IFFALSE 20732
// Say ( tmp , D2c-Sol1-1 ) ;
20720: LD_VAR 0 4
20724: PPUSH
20725: LD_STRING D2c-Sol1-1
20727: PPUSH
20728: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20732: LD_VAR 0 4
20736: PPUSH
20737: CALL_OW 258
20741: PUSH
20742: LD_INT 2
20744: EQUAL
20745: IFFALSE 20759
// Say ( tmp , D2c-FSol1-1 ) ;
20747: LD_VAR 0 4
20751: PPUSH
20752: LD_STRING D2c-FSol1-1
20754: PPUSH
20755: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20759: LD_EXP 19
20763: PPUSH
20764: LD_STRING D2c-Kurt-1
20766: PPUSH
20767: CALL_OW 88
// DialogueOff ;
20771: CALL_OW 7
// InGameOff ;
20775: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20779: LD_EXP 19
20783: PPUSH
20784: LD_INT 8
20786: PPUSH
20787: CALL_OW 113
// readyToEscape = 1 ;
20791: LD_ADDR_EXP 21
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20799: LD_VAR 0 6
20803: PUSH
20804: LD_INT 3
20806: EQUAL
20807: IFFALSE 20981
// begin DialogueOn ;
20809: CALL_OW 6
// if tmp = JMM then
20813: LD_VAR 0 4
20817: PUSH
20818: LD_EXP 1
20822: EQUAL
20823: IFFALSE 20883
// begin DialogueOn ;
20825: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20829: LD_EXP 1
20833: PPUSH
20834: LD_STRING D2c-JMM-1
20836: PPUSH
20837: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20841: LD_EXP 19
20845: PPUSH
20846: LD_STRING D2c-Kurt-1
20848: PPUSH
20849: CALL_OW 88
// DialogueOff ;
20853: CALL_OW 7
// InGameOff ;
20857: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20861: LD_EXP 19
20865: PPUSH
20866: LD_INT 8
20868: PPUSH
20869: CALL_OW 113
// readyToEscape = 1 ;
20873: LD_ADDR_EXP 21
20877: PUSH
20878: LD_INT 1
20880: ST_TO_ADDR
// end else
20881: GO 20981
// begin DialogueOn ;
20883: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20887: LD_VAR 0 4
20891: PPUSH
20892: CALL_OW 258
20896: PUSH
20897: LD_INT 1
20899: EQUAL
20900: IFFALSE 20914
// Say ( tmp , D2c-Sol1-1 ) ;
20902: LD_VAR 0 4
20906: PPUSH
20907: LD_STRING D2c-Sol1-1
20909: PPUSH
20910: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20914: LD_VAR 0 4
20918: PPUSH
20919: CALL_OW 258
20923: PUSH
20924: LD_INT 2
20926: EQUAL
20927: IFFALSE 20941
// Say ( tmp , D2c-FSol1-1 ) ;
20929: LD_VAR 0 4
20933: PPUSH
20934: LD_STRING D2c-FSol1-1
20936: PPUSH
20937: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20941: LD_EXP 19
20945: PPUSH
20946: LD_STRING D2c-Kurt-1
20948: PPUSH
20949: CALL_OW 88
// DialogueOff ;
20953: CALL_OW 7
// InGameOff ;
20957: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20961: LD_EXP 19
20965: PPUSH
20966: LD_INT 8
20968: PPUSH
20969: CALL_OW 113
// readyToEscape = 1 ;
20973: LD_ADDR_EXP 21
20977: PUSH
20978: LD_INT 1
20980: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20981: LD_ADDR_EXP 29
20985: PUSH
20986: LD_INT 0
20988: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20989: LD_INT 35
20991: PPUSH
20992: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20996: LD_EXP 19
21000: PPUSH
21001: LD_INT 8
21003: PPUSH
21004: CALL_OW 308
21008: PUSH
21009: LD_EXP 21
21013: AND
21014: PUSH
21015: LD_EXP 19
21019: PPUSH
21020: CALL_OW 301
21024: OR
21025: IFFALSE 20989
// if IsDead ( Kurt ) then
21027: LD_EXP 19
21031: PPUSH
21032: CALL_OW 301
21036: IFFALSE 21040
// exit ;
21038: GO 21109
// RemoveUnit ( Kurt ) ;
21040: LD_EXP 19
21044: PPUSH
21045: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21049: LD_EXP 19
21053: PPUSH
21054: LD_STRING Kurt
21056: PPUSH
21057: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21061: LD_INT 1
21063: PPUSH
21064: LD_INT 2
21066: PPUSH
21067: CALL_OW 81
21071: PUSH
21072: LD_INT 0
21074: EQUAL
21075: IFFALSE 21085
// KurtStatus = 1 ;
21077: LD_ADDR_EXP 20
21081: PUSH
21082: LD_INT 1
21084: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21085: LD_INT 1
21087: PPUSH
21088: LD_INT 2
21090: PPUSH
21091: CALL_OW 81
21095: PUSH
21096: LD_INT 2
21098: EQUAL
21099: IFFALSE 21109
// KurtStatus = 2 ;
21101: LD_ADDR_EXP 20
21105: PUSH
21106: LD_INT 2
21108: ST_TO_ADDR
// end ; end_of_file
21109: LD_VAR 0 1
21113: RET
// every 0 0$1 do
21114: GO 21116
21116: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21117: LD_INT 3
21119: PPUSH
21120: LD_INT 32
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL 6849 0 3
21130: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21131: GO 21133
21133: DISABLE
21134: LD_INT 0
21136: PPUSH
// begin enemyWayX = [ ] ;
21137: LD_ADDR_EXP 49
21141: PUSH
21142: EMPTY
21143: ST_TO_ADDR
// enemyWayY = [ ] ;
21144: LD_ADDR_EXP 50
21148: PUSH
21149: EMPTY
21150: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21151: LD_ADDR_VAR 0 1
21155: PUSH
21156: LD_INT 1
21158: PPUSH
21159: LD_INT 2
21161: PPUSH
21162: CALL_OW 12
21166: ST_TO_ADDR
// if rnd = 1 then
21167: LD_VAR 0 1
21171: PUSH
21172: LD_INT 1
21174: EQUAL
21175: IFFALSE 21215
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21177: LD_ADDR_EXP 49
21181: PUSH
21182: LD_INT 93
21184: PUSH
21185: LD_INT 84
21187: PUSH
21188: LD_INT 104
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21196: LD_ADDR_EXP 50
21200: PUSH
21201: LD_INT 51
21203: PUSH
21204: LD_INT 35
21206: PUSH
21207: LD_INT 28
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: ST_TO_ADDR
// end ; if rnd = 2 then
21215: LD_VAR 0 1
21219: PUSH
21220: LD_INT 2
21222: EQUAL
21223: IFFALSE 21279
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21225: LD_ADDR_EXP 49
21229: PUSH
21230: LD_INT 93
21232: PUSH
21233: LD_INT 52
21235: PUSH
21236: LD_INT 34
21238: PUSH
21239: LD_INT 28
21241: PUSH
21242: LD_INT 30
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21252: LD_ADDR_EXP 50
21256: PUSH
21257: LD_INT 51
21259: PUSH
21260: LD_INT 45
21262: PUSH
21263: LD_INT 35
21265: PUSH
21266: LD_INT 26
21268: PUSH
21269: LD_INT 20
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: ST_TO_ADDR
// end ; enable ;
21279: ENABLE
// end ;
21280: PPOPN 1
21282: END
// every 0 0$1 do
21283: GO 21285
21285: DISABLE
// begin enable ;
21286: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21287: LD_INT 3
21289: PPUSH
21290: LD_INT 2
21292: PPUSH
21293: LD_INT 10
21295: PPUSH
21296: LD_EXP 31
21300: PPUSH
21301: CALL 8141 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21305: LD_INT 3
21307: PPUSH
21308: LD_INT 12
21310: PPUSH
21311: LD_EXP 31
21315: PPUSH
21316: CALL 10026 0 3
// if disableHealAI = 0 then
21320: LD_EXP 33
21324: PUSH
21325: LD_INT 0
21327: EQUAL
21328: IFFALSE 21349
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21330: LD_INT 3
21332: PPUSH
21333: LD_INT 9
21335: PPUSH
21336: LD_INT 10
21338: PPUSH
21339: LD_INT 32
21341: PUSH
21342: EMPTY
21343: LIST
21344: PPUSH
21345: CALL 8532 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21349: LD_INT 3
21351: PPUSH
21352: LD_INT 51
21354: PPUSH
21355: LD_INT 6
21357: PPUSH
21358: CALL 9240 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21362: LD_INT 3
21364: PPUSH
21365: LD_INT 12
21367: PPUSH
21368: LD_INT 121
21370: PPUSH
21371: LD_INT 100
21373: PPUSH
21374: CALL 7244 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21378: LD_INT 3
21380: PPUSH
21381: LD_INT 22
21383: PPUSH
21384: LD_EXP 49
21388: PPUSH
21389: LD_EXP 50
21393: PPUSH
21394: CALL 7447 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21398: LD_INT 3
21400: PPUSH
21401: LD_INT 10
21403: PPUSH
21404: CALL 9383 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21408: LD_INT 3
21410: PPUSH
21411: LD_INT 1
21413: PPUSH
21414: CALL 9796 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21418: LD_INT 2
21420: PPUSH
21421: CALL_OW 303
21425: PUSH
21426: LD_INT 2
21428: PPUSH
21429: CALL_OW 255
21433: PUSH
21434: LD_INT 1
21436: EQUAL
21437: OR
21438: IFFALSE 21450
// DefendDepot ( 3 , rudepo ) ;
21440: LD_INT 3
21442: PPUSH
21443: LD_INT 2
21445: PPUSH
21446: CALL 9076 0 2
// end ;
21450: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21451: LD_INT 22
21453: PUSH
21454: LD_INT 3
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 21
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 55
21473: PUSH
21474: EMPTY
21475: LIST
21476: PUSH
21477: LD_INT 3
21479: PUSH
21480: LD_INT 34
21482: PUSH
21483: LD_INT 51
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PPUSH
21500: CALL_OW 69
21504: PUSH
21505: LD_INT 0
21507: EQUAL
21508: PUSH
21509: LD_INT 21
21511: PPUSH
21512: CALL_OW 255
21516: PUSH
21517: LD_INT 3
21519: EQUAL
21520: AND
21521: PUSH
21522: LD_INT 21
21524: PPUSH
21525: CALL_OW 302
21529: AND
21530: PUSH
21531: LD_INT 2
21533: PPUSH
21534: CALL_OW 255
21538: PUSH
21539: LD_INT 3
21541: EQUAL
21542: AND
21543: PUSH
21544: LD_INT 2
21546: PPUSH
21547: CALL_OW 302
21551: AND
21552: IFFALSE 21732
21554: GO 21556
21556: DISABLE
// begin enable ;
21557: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21558: LD_INT 2
21560: PPUSH
21561: CALL_OW 274
21565: PPUSH
21566: LD_INT 1
21568: PPUSH
21569: LD_INT 1000
21571: PPUSH
21572: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21576: LD_INT 3
21578: PPUSH
21579: LD_INT 21
21581: PPUSH
21582: LD_INT 4
21584: PUSH
21585: LD_INT 5
21587: PUSH
21588: LD_INT 6
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: LIST
21595: PUSH
21596: LD_OWVAR 67
21600: ARRAY
21601: PPUSH
21602: LD_INT 43
21604: PUSH
21605: LD_INT 43
21607: PUSH
21608: LD_INT 44
21610: PUSH
21611: LD_INT 44
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 43
21622: PUSH
21623: LD_INT 43
21625: PUSH
21626: LD_INT 43
21628: PUSH
21629: LD_INT 44
21631: PUSH
21632: LD_INT 44
21634: PUSH
21635: LD_INT 46
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 43
21648: PUSH
21649: LD_INT 43
21651: PUSH
21652: LD_INT 43
21654: PUSH
21655: LD_INT 44
21657: PUSH
21658: LD_INT 44
21660: PUSH
21661: LD_INT 46
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: PUSH
21677: LD_OWVAR 67
21681: ARRAY
21682: PPUSH
21683: LD_INT 1
21685: PPUSH
21686: LD_INT 1
21688: PPUSH
21689: LD_INT 22
21691: PUSH
21692: LD_INT 22
21694: PUSH
21695: LD_INT 24
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PPUSH
21705: LD_INT 2
21707: PPUSH
21708: CALL_OW 12
21712: ARRAY
21713: PUSH
21714: LD_INT 24
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: PUSH
21722: LD_OWVAR 67
21726: ARRAY
21727: PPUSH
21728: CALL 7090 0 7
// end ;
21732: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21733: LD_INT 17
21735: PPUSH
21736: CALL_OW 255
21740: PUSH
21741: LD_INT 3
21743: EQUAL
21744: PUSH
21745: LD_INT 17
21747: PPUSH
21748: CALL_OW 302
21752: AND
21753: PUSH
21754: LD_INT 2
21756: PPUSH
21757: CALL_OW 255
21761: PUSH
21762: LD_INT 3
21764: EQUAL
21765: AND
21766: PUSH
21767: LD_INT 2
21769: PPUSH
21770: CALL_OW 302
21774: AND
21775: IFFALSE 21842
21777: GO 21779
21779: DISABLE
// begin enable ;
21780: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21781: LD_INT 17
21783: PPUSH
21784: LD_INT 22
21786: PPUSH
21787: LD_INT 1
21789: PPUSH
21790: LD_INT 1
21792: PPUSH
21793: LD_INT 42
21795: PUSH
21796: LD_INT 43
21798: PUSH
21799: LD_INT 44
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: PPUSH
21810: LD_INT 3
21812: PPUSH
21813: CALL_OW 12
21817: ARRAY
21818: PPUSH
21819: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21823: LD_INT 17
21825: PPUSH
21826: LD_INT 22
21828: PPUSH
21829: LD_INT 1
21831: PPUSH
21832: LD_INT 1
21834: PPUSH
21835: LD_INT 51
21837: PPUSH
21838: CALL_OW 185
// end ;
21842: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21843: LD_INT 17
21845: PPUSH
21846: CALL_OW 302
21850: PUSH
21851: LD_INT 17
21853: PPUSH
21854: CALL_OW 255
21858: PUSH
21859: LD_INT 3
21861: EQUAL
21862: AND
21863: PUSH
21864: LD_INT 2
21866: PPUSH
21867: CALL_OW 302
21871: AND
21872: PUSH
21873: LD_INT 2
21875: PPUSH
21876: CALL_OW 255
21880: PUSH
21881: LD_INT 3
21883: EQUAL
21884: AND
21885: PUSH
21886: LD_INT 17
21888: PPUSH
21889: CALL_OW 313
21893: NOT
21894: AND
21895: IFFALSE 21989
21897: GO 21899
21899: DISABLE
21900: LD_INT 0
21902: PPUSH
// begin for i = 1 to 6 do
21903: LD_ADDR_VAR 0 1
21907: PUSH
21908: DOUBLE
21909: LD_INT 1
21911: DEC
21912: ST_TO_ADDR
21913: LD_INT 6
21915: PUSH
21916: FOR_TO
21917: IFFALSE 21987
// begin uc_side = 3 ;
21919: LD_ADDR_OWVAR 20
21923: PUSH
21924: LD_INT 3
21926: ST_TO_ADDR
// uc_nation = 3 ;
21927: LD_ADDR_OWVAR 21
21931: PUSH
21932: LD_INT 3
21934: ST_TO_ADDR
// hc_gallery :=  ;
21935: LD_ADDR_OWVAR 33
21939: PUSH
21940: LD_STRING 
21942: ST_TO_ADDR
// hc_name :=  ;
21943: LD_ADDR_OWVAR 26
21947: PUSH
21948: LD_STRING 
21950: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21951: LD_INT 0
21953: PPUSH
21954: LD_EXP 34
21958: PPUSH
21959: LD_EXP 35
21963: PPUSH
21964: CALL_OW 12
21968: PPUSH
21969: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21973: CALL_OW 44
21977: PPUSH
21978: LD_INT 17
21980: PPUSH
21981: CALL_OW 52
// end ;
21985: GO 21916
21987: POP
21988: POP
// end ;
21989: PPOPN 1
21991: END
// every 2 2$0 do var i , j ;
21992: GO 21994
21994: DISABLE
21995: LD_INT 0
21997: PPUSH
21998: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21999: LD_INT 14700
22001: PUSH
22002: LD_INT 33600
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: PPUSH
22012: LD_INT 2
22014: PPUSH
22015: CALL_OW 12
22019: ARRAY
22020: PPUSH
22021: CALL_OW 67
// disableHealAI = 1 ;
22025: LD_ADDR_EXP 33
22029: PUSH
22030: LD_INT 1
22032: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22033: LD_ADDR_VAR 0 1
22037: PUSH
22038: LD_INT 22
22040: PUSH
22041: LD_INT 3
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 25
22050: PUSH
22051: LD_INT 4
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PPUSH
22062: CALL_OW 69
22066: PUSH
22067: FOR_IN
22068: IFFALSE 22081
// ComExitBuilding ( i ) ;
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 122
22079: GO 22067
22081: POP
22082: POP
// wait ( 0 0$1 ) ;
22083: LD_INT 35
22085: PPUSH
22086: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22090: LD_INT 35
22092: PPUSH
22093: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22097: LD_ADDR_VAR 0 1
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 3
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 4
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PPUSH
22126: CALL_OW 69
22130: PUSH
22131: FOR_IN
22132: IFFALSE 22209
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22134: LD_ADDR_VAR 0 2
22138: PUSH
22139: LD_INT 17
22141: PPUSH
22142: LD_INT 22
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 25
22154: PUSH
22155: LD_INT 12
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PPUSH
22166: CALL_OW 70
22170: PUSH
22171: FOR_IN
22172: IFFALSE 22205
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22174: LD_VAR 0 1
22178: PPUSH
22179: LD_VAR 0 2
22183: PPUSH
22184: CALL_OW 250
22188: PPUSH
22189: LD_VAR 0 2
22193: PPUSH
22194: CALL_OW 251
22198: PPUSH
22199: CALL_OW 191
// end ;
22203: GO 22171
22205: POP
22206: POP
// end ;
22207: GO 22131
22209: POP
22210: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22211: LD_INT 22
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 25
22223: PUSH
22224: LD_INT 4
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PPUSH
22235: CALL_OW 69
22239: PUSH
22240: LD_INT 0
22242: EQUAL
22243: PUSH
22244: LD_EXP 32
22248: PUSH
22249: LD_INT 6
22251: PUSH
22252: LD_INT 7
22254: PUSH
22255: LD_INT 8
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: PUSH
22263: LD_OWVAR 67
22267: ARRAY
22268: GREATEREQUAL
22269: OR
22270: PUSH
22271: LD_INT 17
22273: PPUSH
22274: LD_INT 22
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 25
22286: PUSH
22287: LD_INT 12
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PPUSH
22298: CALL_OW 70
22302: PUSH
22303: LD_INT 0
22305: EQUAL
22306: OR
22307: IFFALSE 22090
// disableHealAI = 0 ;
22309: LD_ADDR_EXP 33
22313: PUSH
22314: LD_INT 0
22316: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22317: LD_ADDR_VAR 0 1
22321: PUSH
22322: LD_INT 22
22324: PUSH
22325: LD_INT 3
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 25
22334: PUSH
22335: LD_INT 12
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PPUSH
22346: CALL_OW 69
22350: PUSH
22351: FOR_IN
22352: IFFALSE 22368
// SetClass ( i , 16 ) ;
22354: LD_VAR 0 1
22358: PPUSH
22359: LD_INT 16
22361: PPUSH
22362: CALL_OW 336
22366: GO 22351
22368: POP
22369: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22370: LD_ADDR_VAR 0 1
22374: PUSH
22375: LD_INT 22
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 25
22387: PUSH
22388: LD_INT 4
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PPUSH
22399: CALL_OW 69
22403: PUSH
22404: FOR_IN
22405: IFFALSE 22424
// ComMoveXY ( i , 113 , 94 ) ;
22407: LD_VAR 0 1
22411: PPUSH
22412: LD_INT 113
22414: PPUSH
22415: LD_INT 94
22417: PPUSH
22418: CALL_OW 111
22422: GO 22404
22424: POP
22425: POP
// end ;
22426: PPOPN 2
22428: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22429: LD_INT 21
22431: PPUSH
22432: CALL_OW 255
22436: PUSH
22437: LD_INT 3
22439: EQUAL
22440: PUSH
22441: LD_INT 21
22443: PPUSH
22444: CALL_OW 302
22448: AND
22449: PUSH
22450: LD_INT 22
22452: PUSH
22453: LD_INT 3
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 34
22462: PUSH
22463: LD_INT 51
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 69
22478: PUSH
22479: LD_INT 0
22481: EQUAL
22482: AND
22483: IFFALSE 22515
22485: GO 22487
22487: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22488: LD_INT 21
22490: PPUSH
22491: LD_INT 23
22493: PPUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_INT 1
22499: PPUSH
22500: LD_INT 51
22502: PPUSH
22503: CALL_OW 185
// wait ( 5 5$0 ) ;
22507: LD_INT 10500
22509: PPUSH
22510: CALL_OW 67
// enable ;
22514: ENABLE
// end ; end_of_file
22515: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22516: LD_EXP 26
22520: PUSH
22521: LD_INT 0
22523: LESSEQUAL
22524: IFFALSE 22673
22526: GO 22528
22528: DISABLE
22529: LD_INT 0
22531: PPUSH
22532: PPUSH
22533: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22534: LD_ADDR_VAR 0 2
22538: PUSH
22539: LD_INT 22
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 21
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 30
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 30
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: PPUSH
22592: CALL_OW 69
22596: ST_TO_ADDR
// for i in tmp do
22597: LD_ADDR_VAR 0 1
22601: PUSH
22602: LD_VAR 0 2
22606: PUSH
22607: FOR_IN
22608: IFFALSE 22641
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22610: LD_ADDR_VAR 0 3
22614: PUSH
22615: LD_VAR 0 3
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 274
22629: PPUSH
22630: LD_INT 1
22632: PPUSH
22633: CALL_OW 275
22637: PLUS
22638: ST_TO_ADDR
22639: GO 22607
22641: POP
22642: POP
// if yourCrates >= needCrates then
22643: LD_VAR 0 3
22647: PUSH
22648: LD_EXP 25
22652: GREATEREQUAL
22653: IFFALSE 22666
// FinishMission ( yourCrates ) else
22655: LD_VAR 0 3
22659: PPUSH
22660: CALL 22676 0 1
22664: GO 22673
// YouLost ( matmin ) ;
22666: LD_STRING matmin
22668: PPUSH
22669: CALL_OW 104
// end ;
22673: PPOPN 3
22675: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22676: LD_INT 0
22678: PPUSH
22679: PPUSH
22680: PPUSH
22681: PPUSH
// if killCounter = 0 then
22682: LD_EXP 47
22686: PUSH
22687: LD_INT 0
22689: EQUAL
22690: IFFALSE 22699
// SetAchievement ( ACH_SURV ) ;
22692: LD_STRING ACH_SURV
22694: PPUSH
22695: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22699: LD_INT 22
22701: PUSH
22702: LD_INT 3
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 21
22711: PUSH
22712: LD_INT 3
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PPUSH
22723: CALL_OW 69
22727: PUSH
22728: LD_INT 0
22730: EQUAL
22731: IFFALSE 22747
// begin wait ( 3 ) ;
22733: LD_INT 3
22735: PPUSH
22736: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22740: LD_STRING ACH_BASEDESTROYER
22742: PPUSH
22743: CALL_OW 543
// end ; m1 := false ;
22747: LD_ADDR_VAR 0 3
22751: PUSH
22752: LD_INT 0
22754: ST_TO_ADDR
// m2 := false ;
22755: LD_ADDR_VAR 0 4
22759: PUSH
22760: LD_INT 0
22762: ST_TO_ADDR
// m3 := false ;
22763: LD_ADDR_VAR 0 5
22767: PUSH
22768: LD_INT 0
22770: ST_TO_ADDR
// if crates + 100 > crates then
22771: LD_VAR 0 1
22775: PUSH
22776: LD_INT 100
22778: PLUS
22779: PUSH
22780: LD_VAR 0 1
22784: GREATER
22785: IFFALSE 22817
// begin AddMedal ( cans , 1 ) ;
22787: LD_STRING cans
22789: PPUSH
22790: LD_INT 1
22792: PPUSH
22793: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22797: LD_INT 1
22799: PPUSH
22800: LD_STRING 06_crates_1
22802: PPUSH
22803: CALL_OW 39
// m1 := true ;
22807: LD_ADDR_VAR 0 3
22811: PUSH
22812: LD_INT 1
22814: ST_TO_ADDR
// end else
22815: GO 22838
// begin AddMedal ( cans , - 1 ) ;
22817: LD_STRING cans
22819: PPUSH
22820: LD_INT 1
22822: NEG
22823: PPUSH
22824: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22828: LD_INT 0
22830: PPUSH
22831: LD_STRING 06_crates_1
22833: PPUSH
22834: CALL_OW 39
// end ; if unitLost < 3 then
22838: LD_EXP 30
22842: PUSH
22843: LD_INT 3
22845: LESS
22846: IFFALSE 22868
// begin AddMedal ( people , 1 ) ;
22848: LD_STRING people
22850: PPUSH
22851: LD_INT 1
22853: PPUSH
22854: CALL_OW 101
// m2 := true ;
22858: LD_ADDR_VAR 0 4
22862: PUSH
22863: LD_INT 1
22865: ST_TO_ADDR
// end else
22866: GO 22879
// begin AddMedal ( people , - 1 ) ;
22868: LD_STRING people
22870: PPUSH
22871: LD_INT 1
22873: NEG
22874: PPUSH
22875: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22879: LD_EXP 28
22883: PPUSH
22884: LD_STRING 06_remoteVehs_1
22886: PPUSH
22887: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22891: LD_EXP 28
22895: PUSH
22896: LD_INT 1
22898: EQUAL
22899: IFFALSE 22921
// begin AddMedal ( remote , 1 ) ;
22901: LD_STRING remote
22903: PPUSH
22904: LD_INT 1
22906: PPUSH
22907: CALL_OW 101
// m3 := true ;
22911: LD_ADDR_VAR 0 5
22915: PUSH
22916: LD_INT 1
22918: ST_TO_ADDR
// end else
22919: GO 22961
// begin if GetTech ( 18 , 1 ) = state_enabled then
22921: LD_INT 18
22923: PPUSH
22924: LD_INT 1
22926: PPUSH
22927: CALL_OW 321
22931: PUSH
22932: LD_INT 1
22934: EQUAL
22935: IFFALSE 22950
// begin AddMedal ( remote , - 1 ) ;
22937: LD_STRING remote
22939: PPUSH
22940: LD_INT 1
22942: NEG
22943: PPUSH
22944: CALL_OW 101
// end else
22948: GO 22961
// begin AddMedal ( remote , - 2 ) ;
22950: LD_STRING remote
22952: PPUSH
22953: LD_INT 2
22955: NEG
22956: PPUSH
22957: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
22961: LD_VAR 0 3
22965: PUSH
22966: LD_VAR 0 4
22970: AND
22971: PUSH
22972: LD_VAR 0 5
22976: AND
22977: IFFALSE 22993
// begin wait ( 3 ) ;
22979: LD_INT 3
22981: PPUSH
22982: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
22986: LD_STRING ACH_ASPEED_6
22988: PPUSH
22989: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
22993: LD_OWVAR 67
22997: PUSH
22998: LD_INT 3
23000: EQUAL
23001: PUSH
23002: LD_VAR 0 3
23006: AND
23007: PUSH
23008: LD_VAR 0 4
23012: AND
23013: PUSH
23014: LD_VAR 0 5
23018: AND
23019: IFFALSE 23031
// SetAchievementEX ( ACH_AMER , 6 ) ;
23021: LD_STRING ACH_AMER
23023: PPUSH
23024: LD_INT 6
23026: PPUSH
23027: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23031: LD_EXP 20
23035: PPUSH
23036: LD_STRING 06_KurtStatus_1
23038: PPUSH
23039: CALL_OW 39
// GiveMedals ( Main ) ;
23043: LD_STRING Main
23045: PPUSH
23046: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23050: LD_INT 22
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 21
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 50
23072: PUSH
23073: EMPTY
23074: LIST
23075: PUSH
23076: LD_INT 2
23078: PUSH
23079: LD_INT 25
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 25
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 25
23101: PUSH
23102: LD_INT 3
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 25
23111: PUSH
23112: LD_INT 4
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: PPUSH
23132: CALL_OW 69
23136: PPUSH
23137: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23141: LD_EXP 1
23145: PPUSH
23146: LD_EXP 43
23150: PUSH
23151: LD_STRING JMM
23153: STR
23154: PPUSH
23155: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23159: LD_EXP 2
23163: PPUSH
23164: LD_EXP 43
23168: PUSH
23169: LD_STRING Lisa
23171: STR
23172: PPUSH
23173: CALL 6348 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23177: LD_EXP 3
23181: PPUSH
23182: LD_EXP 43
23186: PUSH
23187: LD_STRING Bobby
23189: STR
23190: PPUSH
23191: CALL 6348 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23195: LD_EXP 4
23199: PPUSH
23200: LD_EXP 43
23204: PUSH
23205: LD_STRING Cyrus
23207: STR
23208: PPUSH
23209: CALL 6348 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23213: LD_EXP 5
23217: PPUSH
23218: LD_EXP 43
23222: PUSH
23223: LD_STRING Frank
23225: STR
23226: PPUSH
23227: CALL 6348 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23231: LD_EXP 6
23235: PPUSH
23236: LD_EXP 43
23240: PUSH
23241: LD_STRING Brown
23243: STR
23244: PPUSH
23245: CALL 6348 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23249: LD_EXP 7
23253: PPUSH
23254: LD_EXP 43
23258: PUSH
23259: LD_STRING Donaldson
23261: STR
23262: PPUSH
23263: CALL 6348 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23267: LD_EXP 8
23271: PPUSH
23272: LD_EXP 43
23276: PUSH
23277: LD_STRING Gladstone
23279: STR
23280: PPUSH
23281: CALL 6348 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23285: LD_EXP 9
23289: PPUSH
23290: LD_EXP 43
23294: PUSH
23295: LD_STRING Denis
23297: STR
23298: PPUSH
23299: CALL 6348 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23303: LD_EXP 15
23307: PPUSH
23308: LD_EXP 43
23312: PUSH
23313: LD_STRING Joan
23315: STR
23316: PPUSH
23317: CALL 6348 0 2
// if IsLive ( Joan ) then
23321: LD_EXP 15
23325: PPUSH
23326: CALL_OW 300
23330: IFFALSE 23344
// SaveCharacters ( Joan , Joan ) ;
23332: LD_EXP 15
23336: PPUSH
23337: LD_STRING Joan
23339: PPUSH
23340: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23344: LD_EXP 16
23348: PPUSH
23349: LD_STRING 06_JoanStatus_1
23351: PPUSH
23352: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23356: LD_INT 50
23358: PUSH
23359: EMPTY
23360: LIST
23361: PUSH
23362: LD_INT 22
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 21
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: LD_INT 25
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 25
23397: PUSH
23398: LD_INT 2
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 25
23407: PUSH
23408: LD_INT 3
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 25
23417: PUSH
23418: LD_INT 4
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: PPUSH
23438: CALL_OW 69
23442: PUSH
23443: LD_EXP 1
23447: PUSH
23448: LD_EXP 2
23452: PUSH
23453: LD_EXP 3
23457: PUSH
23458: LD_EXP 4
23462: PUSH
23463: LD_EXP 5
23467: PUSH
23468: LD_EXP 6
23472: PUSH
23473: LD_EXP 7
23477: PUSH
23478: LD_EXP 8
23482: PUSH
23483: LD_EXP 9
23487: PUSH
23488: LD_EXP 15
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: DIFF
23505: PPUSH
23506: LD_STRING 06_other_survivors
23508: PPUSH
23509: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23513: LD_INT 50
23515: PUSH
23516: EMPTY
23517: LIST
23518: PUSH
23519: LD_INT 22
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 21
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 25
23544: PUSH
23545: LD_INT 12
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 25
23554: PUSH
23555: LD_INT 16
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: LIST
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: PPUSH
23573: CALL_OW 69
23577: PPUSH
23578: LD_STRING 06_other_apemans
23580: PPUSH
23581: CALL_OW 38
// YouWin ;
23585: CALL_OW 103
// end ; end_of_file
23589: LD_VAR 0 2
23593: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23594: LD_EXP 39
23598: PUSH
23599: LD_INT 3
23601: EQUAL
23602: IFFALSE 23693
23604: GO 23606
23606: DISABLE
// begin enable ;
23607: ENABLE
// sendedConvoys = 0 ;
23608: LD_ADDR_EXP 39
23612: PUSH
23613: LD_INT 0
23615: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23616: LD_INT 6
23618: PPUSH
23619: LD_INT 3
23621: PPUSH
23622: LD_INT 3
23624: PUSH
23625: LD_INT 4
23627: PUSH
23628: LD_INT 6
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: PUSH
23636: LD_OWVAR 67
23640: ARRAY
23641: PPUSH
23642: LD_INT 0
23644: PPUSH
23645: LD_INT 0
23647: PPUSH
23648: LD_INT 0
23650: PPUSH
23651: LD_INT 0
23653: PPUSH
23654: LD_EXP 34
23658: PPUSH
23659: LD_EXP 35
23663: PPUSH
23664: CALL_OW 12
23668: PPUSH
23669: LD_INT 16
23671: PPUSH
23672: LD_INT 15
23674: PPUSH
23675: LD_INT 1
23677: PPUSH
23678: LD_INT 1
23680: PPUSH
23681: LD_INT 2
23683: PPUSH
23684: CALL_OW 12
23688: PPUSH
23689: CALL 10624 0 12
// end ; end_of_file
23693: END
// export function CreateNature ; var i , un ; begin
23694: LD_INT 0
23696: PPUSH
23697: PPUSH
23698: PPUSH
// for i = 1 to Difficulty + 2 do
23699: LD_ADDR_VAR 0 2
23703: PUSH
23704: DOUBLE
23705: LD_INT 1
23707: DEC
23708: ST_TO_ADDR
23709: LD_OWVAR 67
23713: PUSH
23714: LD_INT 2
23716: PLUS
23717: PUSH
23718: FOR_TO
23719: IFFALSE 23828
// begin hc_sex = sex_male ;
23721: LD_ADDR_OWVAR 27
23725: PUSH
23726: LD_INT 1
23728: ST_TO_ADDR
// uc_side = 0 ;
23729: LD_ADDR_OWVAR 20
23733: PUSH
23734: LD_INT 0
23736: ST_TO_ADDR
// uc_nation = nation_nature ;
23737: LD_ADDR_OWVAR 21
23741: PUSH
23742: LD_INT 0
23744: ST_TO_ADDR
// hc_class = class_tiger ;
23745: LD_ADDR_OWVAR 28
23749: PUSH
23750: LD_INT 14
23752: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23753: LD_ADDR_OWVAR 31
23757: PUSH
23758: LD_EXP 35
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23778: LD_ADDR_OWVAR 35
23782: PUSH
23783: LD_INT 5
23785: NEG
23786: PPUSH
23787: LD_INT 5
23789: PPUSH
23790: CALL_OW 12
23794: PUSH
23795: LD_OWVAR 67
23799: MUL
23800: ST_TO_ADDR
// un = CreateHuman ;
23801: LD_ADDR_VAR 0 3
23805: PUSH
23806: CALL_OW 44
23810: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23811: LD_VAR 0 3
23815: PPUSH
23816: LD_INT 18
23818: PPUSH
23819: LD_INT 0
23821: PPUSH
23822: CALL_OW 49
// end ;
23826: GO 23718
23828: POP
23829: POP
// for i = 1 to rand ( 3 , 4 ) do
23830: LD_ADDR_VAR 0 2
23834: PUSH
23835: DOUBLE
23836: LD_INT 1
23838: DEC
23839: ST_TO_ADDR
23840: LD_INT 3
23842: PPUSH
23843: LD_INT 4
23845: PPUSH
23846: CALL_OW 12
23850: PUSH
23851: FOR_TO
23852: IFFALSE 23946
// begin hc_sex = sex_male ;
23854: LD_ADDR_OWVAR 27
23858: PUSH
23859: LD_INT 1
23861: ST_TO_ADDR
// uc_side = 0 ;
23862: LD_ADDR_OWVAR 20
23866: PUSH
23867: LD_INT 0
23869: ST_TO_ADDR
// uc_nation = nation_nature ;
23870: LD_ADDR_OWVAR 21
23874: PUSH
23875: LD_INT 0
23877: ST_TO_ADDR
// hc_class = 18 ;
23878: LD_ADDR_OWVAR 28
23882: PUSH
23883: LD_INT 18
23885: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23886: LD_ADDR_OWVAR 31
23890: PUSH
23891: LD_EXP 35
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 0
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: ST_TO_ADDR
// hc_agressivity = 0 ;
23911: LD_ADDR_OWVAR 35
23915: PUSH
23916: LD_INT 0
23918: ST_TO_ADDR
// un = CreateHuman ;
23919: LD_ADDR_VAR 0 3
23923: PUSH
23924: CALL_OW 44
23928: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23929: LD_VAR 0 3
23933: PPUSH
23934: LD_INT 18
23936: PPUSH
23937: LD_INT 0
23939: PPUSH
23940: CALL_OW 49
// end ;
23944: GO 23851
23946: POP
23947: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23948: LD_ADDR_VAR 0 2
23952: PUSH
23953: DOUBLE
23954: LD_INT 1
23956: DEC
23957: ST_TO_ADDR
23958: LD_INT 1
23960: PPUSH
23961: LD_INT 3
23963: PPUSH
23964: CALL_OW 12
23968: PUSH
23969: LD_OWVAR 67
23973: PLUS
23974: PUSH
23975: FOR_TO
23976: IFFALSE 24125
// begin hc_sex = sex_male ;
23978: LD_ADDR_OWVAR 27
23982: PUSH
23983: LD_INT 1
23985: ST_TO_ADDR
// uc_side = 0 ;
23986: LD_ADDR_OWVAR 20
23990: PUSH
23991: LD_INT 0
23993: ST_TO_ADDR
// uc_nation = nation_nature ;
23994: LD_ADDR_OWVAR 21
23998: PUSH
23999: LD_INT 0
24001: ST_TO_ADDR
// hc_class = class_apeman ;
24002: LD_ADDR_OWVAR 28
24006: PUSH
24007: LD_INT 12
24009: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24010: LD_ADDR_OWVAR 31
24014: PUSH
24015: LD_INT 2
24017: PPUSH
24018: LD_INT 5
24020: PPUSH
24021: CALL_OW 12
24025: PUSH
24026: LD_INT 0
24028: PPUSH
24029: LD_INT 2
24031: PPUSH
24032: CALL_OW 12
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24049: LD_ADDR_OWVAR 35
24053: PUSH
24054: LD_INT 20
24056: PPUSH
24057: LD_INT 30
24059: PPUSH
24060: CALL_OW 12
24064: PUSH
24065: LD_INT 30
24067: PPUSH
24068: LD_INT 40
24070: PPUSH
24071: CALL_OW 12
24075: PUSH
24076: LD_INT 40
24078: PPUSH
24079: LD_INT 50
24081: PPUSH
24082: CALL_OW 12
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: PUSH
24092: LD_OWVAR 67
24096: ARRAY
24097: ST_TO_ADDR
// un = CreateHuman ;
24098: LD_ADDR_VAR 0 3
24102: PUSH
24103: CALL_OW 44
24107: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24108: LD_VAR 0 3
24112: PPUSH
24113: LD_INT 19
24115: PPUSH
24116: LD_INT 0
24118: PPUSH
24119: CALL_OW 49
// end ;
24123: GO 23975
24125: POP
24126: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24127: LD_ADDR_VAR 0 2
24131: PUSH
24132: DOUBLE
24133: LD_INT 1
24135: DEC
24136: ST_TO_ADDR
24137: LD_INT 5
24139: PPUSH
24140: LD_INT 6
24142: PPUSH
24143: CALL_OW 12
24147: PUSH
24148: LD_OWVAR 67
24152: PLUS
24153: PUSH
24154: FOR_TO
24155: IFFALSE 24263
// begin hc_sex = sex_male ;
24157: LD_ADDR_OWVAR 27
24161: PUSH
24162: LD_INT 1
24164: ST_TO_ADDR
// uc_side = 0 ;
24165: LD_ADDR_OWVAR 20
24169: PUSH
24170: LD_INT 0
24172: ST_TO_ADDR
// uc_nation = nation_nature ;
24173: LD_ADDR_OWVAR 21
24177: PUSH
24178: LD_INT 0
24180: ST_TO_ADDR
// hc_class = class_apeman ;
24181: LD_ADDR_OWVAR 28
24185: PUSH
24186: LD_INT 12
24188: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24189: LD_ADDR_OWVAR 31
24193: PUSH
24194: LD_INT 2
24196: PPUSH
24197: LD_INT 5
24199: PPUSH
24200: CALL_OW 12
24204: PUSH
24205: LD_INT 0
24207: PPUSH
24208: LD_INT 2
24210: PPUSH
24211: CALL_OW 12
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: ST_TO_ADDR
// hc_agressivity = 0 ;
24228: LD_ADDR_OWVAR 35
24232: PUSH
24233: LD_INT 0
24235: ST_TO_ADDR
// un = CreateHuman ;
24236: LD_ADDR_VAR 0 3
24240: PUSH
24241: CALL_OW 44
24245: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24246: LD_VAR 0 3
24250: PPUSH
24251: LD_INT 20
24253: PPUSH
24254: LD_INT 0
24256: PPUSH
24257: CALL_OW 49
// end ;
24261: GO 24154
24263: POP
24264: POP
// end ; end_of_file end_of_file
24265: LD_VAR 0 1
24269: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24270: LD_INT 0
24272: PPUSH
// ar_miner := 81 ;
24273: LD_ADDR_EXP 58
24277: PUSH
24278: LD_INT 81
24280: ST_TO_ADDR
// ar_crane := 88 ;
24281: LD_ADDR_EXP 57
24285: PUSH
24286: LD_INT 88
24288: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24289: LD_ADDR_EXP 52
24293: PUSH
24294: LD_INT 89
24296: ST_TO_ADDR
// us_hack := 99 ;
24297: LD_ADDR_EXP 53
24301: PUSH
24302: LD_INT 99
24304: ST_TO_ADDR
// us_artillery := 97 ;
24305: LD_ADDR_EXP 54
24309: PUSH
24310: LD_INT 97
24312: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24313: LD_ADDR_EXP 55
24317: PUSH
24318: LD_INT 91
24320: ST_TO_ADDR
// ar_mortar := 92 ;
24321: LD_ADDR_EXP 56
24325: PUSH
24326: LD_INT 92
24328: ST_TO_ADDR
// ru_radar := 98 ;
24329: LD_ADDR_EXP 51
24333: PUSH
24334: LD_INT 98
24336: ST_TO_ADDR
// tech_Artillery := 80 ;
24337: LD_ADDR_EXP 59
24341: PUSH
24342: LD_INT 80
24344: ST_TO_ADDR
// tech_RadMat := 81 ;
24345: LD_ADDR_EXP 60
24349: PUSH
24350: LD_INT 81
24352: ST_TO_ADDR
// tech_BasicTools := 82 ;
24353: LD_ADDR_EXP 61
24357: PUSH
24358: LD_INT 82
24360: ST_TO_ADDR
// tech_Cargo := 83 ;
24361: LD_ADDR_EXP 62
24365: PUSH
24366: LD_INT 83
24368: ST_TO_ADDR
// tech_Track := 84 ;
24369: LD_ADDR_EXP 63
24373: PUSH
24374: LD_INT 84
24376: ST_TO_ADDR
// tech_Crane := 85 ;
24377: LD_ADDR_EXP 64
24381: PUSH
24382: LD_INT 85
24384: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24385: LD_ADDR_EXP 65
24389: PUSH
24390: LD_INT 86
24392: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24393: LD_ADDR_EXP 66
24397: PUSH
24398: LD_INT 87
24400: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24401: LD_ADDR_EXP 67
24405: PUSH
24406: LD_INT 88
24408: ST_TO_ADDR
// class_mastodont := 31 ;
24409: LD_ADDR_EXP 68
24413: PUSH
24414: LD_INT 31
24416: ST_TO_ADDR
// class_horse := 21 ;
24417: LD_ADDR_EXP 69
24421: PUSH
24422: LD_INT 21
24424: ST_TO_ADDR
// end ;
24425: LD_VAR 0 1
24429: RET
// every 1 do
24430: GO 24432
24432: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24433: CALL 24270 0 0
24437: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24438: LD_INT 0
24440: PPUSH
// if p2 = 100 then
24441: LD_VAR 0 2
24445: PUSH
24446: LD_INT 100
24448: EQUAL
24449: IFFALSE 25398
// begin if not StreamModeActive then
24451: LD_EXP 70
24455: NOT
24456: IFFALSE 24466
// StreamModeActive := true ;
24458: LD_ADDR_EXP 70
24462: PUSH
24463: LD_INT 1
24465: ST_TO_ADDR
// if p3 = 0 then
24466: LD_VAR 0 3
24470: PUSH
24471: LD_INT 0
24473: EQUAL
24474: IFFALSE 24480
// InitStreamMode ;
24476: CALL 25558 0 0
// if p3 = 1 then
24480: LD_VAR 0 3
24484: PUSH
24485: LD_INT 1
24487: EQUAL
24488: IFFALSE 24498
// sRocket := true ;
24490: LD_ADDR_EXP 75
24494: PUSH
24495: LD_INT 1
24497: ST_TO_ADDR
// if p3 = 2 then
24498: LD_VAR 0 3
24502: PUSH
24503: LD_INT 2
24505: EQUAL
24506: IFFALSE 24516
// sSpeed := true ;
24508: LD_ADDR_EXP 74
24512: PUSH
24513: LD_INT 1
24515: ST_TO_ADDR
// if p3 = 3 then
24516: LD_VAR 0 3
24520: PUSH
24521: LD_INT 3
24523: EQUAL
24524: IFFALSE 24534
// sEngine := true ;
24526: LD_ADDR_EXP 76
24530: PUSH
24531: LD_INT 1
24533: ST_TO_ADDR
// if p3 = 4 then
24534: LD_VAR 0 3
24538: PUSH
24539: LD_INT 4
24541: EQUAL
24542: IFFALSE 24552
// sSpec := true ;
24544: LD_ADDR_EXP 73
24548: PUSH
24549: LD_INT 1
24551: ST_TO_ADDR
// if p3 = 5 then
24552: LD_VAR 0 3
24556: PUSH
24557: LD_INT 5
24559: EQUAL
24560: IFFALSE 24570
// sLevel := true ;
24562: LD_ADDR_EXP 77
24566: PUSH
24567: LD_INT 1
24569: ST_TO_ADDR
// if p3 = 6 then
24570: LD_VAR 0 3
24574: PUSH
24575: LD_INT 6
24577: EQUAL
24578: IFFALSE 24588
// sArmoury := true ;
24580: LD_ADDR_EXP 78
24584: PUSH
24585: LD_INT 1
24587: ST_TO_ADDR
// if p3 = 7 then
24588: LD_VAR 0 3
24592: PUSH
24593: LD_INT 7
24595: EQUAL
24596: IFFALSE 24606
// sRadar := true ;
24598: LD_ADDR_EXP 79
24602: PUSH
24603: LD_INT 1
24605: ST_TO_ADDR
// if p3 = 8 then
24606: LD_VAR 0 3
24610: PUSH
24611: LD_INT 8
24613: EQUAL
24614: IFFALSE 24624
// sBunker := true ;
24616: LD_ADDR_EXP 80
24620: PUSH
24621: LD_INT 1
24623: ST_TO_ADDR
// if p3 = 9 then
24624: LD_VAR 0 3
24628: PUSH
24629: LD_INT 9
24631: EQUAL
24632: IFFALSE 24642
// sHack := true ;
24634: LD_ADDR_EXP 81
24638: PUSH
24639: LD_INT 1
24641: ST_TO_ADDR
// if p3 = 10 then
24642: LD_VAR 0 3
24646: PUSH
24647: LD_INT 10
24649: EQUAL
24650: IFFALSE 24660
// sFire := true ;
24652: LD_ADDR_EXP 82
24656: PUSH
24657: LD_INT 1
24659: ST_TO_ADDR
// if p3 = 11 then
24660: LD_VAR 0 3
24664: PUSH
24665: LD_INT 11
24667: EQUAL
24668: IFFALSE 24678
// sRefresh := true ;
24670: LD_ADDR_EXP 83
24674: PUSH
24675: LD_INT 1
24677: ST_TO_ADDR
// if p3 = 12 then
24678: LD_VAR 0 3
24682: PUSH
24683: LD_INT 12
24685: EQUAL
24686: IFFALSE 24696
// sExp := true ;
24688: LD_ADDR_EXP 84
24692: PUSH
24693: LD_INT 1
24695: ST_TO_ADDR
// if p3 = 13 then
24696: LD_VAR 0 3
24700: PUSH
24701: LD_INT 13
24703: EQUAL
24704: IFFALSE 24714
// sDepot := true ;
24706: LD_ADDR_EXP 85
24710: PUSH
24711: LD_INT 1
24713: ST_TO_ADDR
// if p3 = 14 then
24714: LD_VAR 0 3
24718: PUSH
24719: LD_INT 14
24721: EQUAL
24722: IFFALSE 24732
// sFlag := true ;
24724: LD_ADDR_EXP 86
24728: PUSH
24729: LD_INT 1
24731: ST_TO_ADDR
// if p3 = 15 then
24732: LD_VAR 0 3
24736: PUSH
24737: LD_INT 15
24739: EQUAL
24740: IFFALSE 24750
// sKamikadze := true ;
24742: LD_ADDR_EXP 94
24746: PUSH
24747: LD_INT 1
24749: ST_TO_ADDR
// if p3 = 16 then
24750: LD_VAR 0 3
24754: PUSH
24755: LD_INT 16
24757: EQUAL
24758: IFFALSE 24768
// sTroll := true ;
24760: LD_ADDR_EXP 95
24764: PUSH
24765: LD_INT 1
24767: ST_TO_ADDR
// if p3 = 17 then
24768: LD_VAR 0 3
24772: PUSH
24773: LD_INT 17
24775: EQUAL
24776: IFFALSE 24786
// sSlow := true ;
24778: LD_ADDR_EXP 96
24782: PUSH
24783: LD_INT 1
24785: ST_TO_ADDR
// if p3 = 18 then
24786: LD_VAR 0 3
24790: PUSH
24791: LD_INT 18
24793: EQUAL
24794: IFFALSE 24804
// sLack := true ;
24796: LD_ADDR_EXP 97
24800: PUSH
24801: LD_INT 1
24803: ST_TO_ADDR
// if p3 = 19 then
24804: LD_VAR 0 3
24808: PUSH
24809: LD_INT 19
24811: EQUAL
24812: IFFALSE 24822
// sTank := true ;
24814: LD_ADDR_EXP 99
24818: PUSH
24819: LD_INT 1
24821: ST_TO_ADDR
// if p3 = 20 then
24822: LD_VAR 0 3
24826: PUSH
24827: LD_INT 20
24829: EQUAL
24830: IFFALSE 24840
// sRemote := true ;
24832: LD_ADDR_EXP 100
24836: PUSH
24837: LD_INT 1
24839: ST_TO_ADDR
// if p3 = 21 then
24840: LD_VAR 0 3
24844: PUSH
24845: LD_INT 21
24847: EQUAL
24848: IFFALSE 24858
// sPowell := true ;
24850: LD_ADDR_EXP 101
24854: PUSH
24855: LD_INT 1
24857: ST_TO_ADDR
// if p3 = 22 then
24858: LD_VAR 0 3
24862: PUSH
24863: LD_INT 22
24865: EQUAL
24866: IFFALSE 24876
// sTeleport := true ;
24868: LD_ADDR_EXP 104
24872: PUSH
24873: LD_INT 1
24875: ST_TO_ADDR
// if p3 = 23 then
24876: LD_VAR 0 3
24880: PUSH
24881: LD_INT 23
24883: EQUAL
24884: IFFALSE 24894
// sOilTower := true ;
24886: LD_ADDR_EXP 106
24890: PUSH
24891: LD_INT 1
24893: ST_TO_ADDR
// if p3 = 24 then
24894: LD_VAR 0 3
24898: PUSH
24899: LD_INT 24
24901: EQUAL
24902: IFFALSE 24912
// sShovel := true ;
24904: LD_ADDR_EXP 107
24908: PUSH
24909: LD_INT 1
24911: ST_TO_ADDR
// if p3 = 25 then
24912: LD_VAR 0 3
24916: PUSH
24917: LD_INT 25
24919: EQUAL
24920: IFFALSE 24930
// sSheik := true ;
24922: LD_ADDR_EXP 108
24926: PUSH
24927: LD_INT 1
24929: ST_TO_ADDR
// if p3 = 26 then
24930: LD_VAR 0 3
24934: PUSH
24935: LD_INT 26
24937: EQUAL
24938: IFFALSE 24948
// sEarthquake := true ;
24940: LD_ADDR_EXP 110
24944: PUSH
24945: LD_INT 1
24947: ST_TO_ADDR
// if p3 = 27 then
24948: LD_VAR 0 3
24952: PUSH
24953: LD_INT 27
24955: EQUAL
24956: IFFALSE 24966
// sAI := true ;
24958: LD_ADDR_EXP 111
24962: PUSH
24963: LD_INT 1
24965: ST_TO_ADDR
// if p3 = 28 then
24966: LD_VAR 0 3
24970: PUSH
24971: LD_INT 28
24973: EQUAL
24974: IFFALSE 24984
// sCargo := true ;
24976: LD_ADDR_EXP 114
24980: PUSH
24981: LD_INT 1
24983: ST_TO_ADDR
// if p3 = 29 then
24984: LD_VAR 0 3
24988: PUSH
24989: LD_INT 29
24991: EQUAL
24992: IFFALSE 25002
// sDLaser := true ;
24994: LD_ADDR_EXP 115
24998: PUSH
24999: LD_INT 1
25001: ST_TO_ADDR
// if p3 = 30 then
25002: LD_VAR 0 3
25006: PUSH
25007: LD_INT 30
25009: EQUAL
25010: IFFALSE 25020
// sExchange := true ;
25012: LD_ADDR_EXP 116
25016: PUSH
25017: LD_INT 1
25019: ST_TO_ADDR
// if p3 = 31 then
25020: LD_VAR 0 3
25024: PUSH
25025: LD_INT 31
25027: EQUAL
25028: IFFALSE 25038
// sFac := true ;
25030: LD_ADDR_EXP 117
25034: PUSH
25035: LD_INT 1
25037: ST_TO_ADDR
// if p3 = 32 then
25038: LD_VAR 0 3
25042: PUSH
25043: LD_INT 32
25045: EQUAL
25046: IFFALSE 25056
// sPower := true ;
25048: LD_ADDR_EXP 118
25052: PUSH
25053: LD_INT 1
25055: ST_TO_ADDR
// if p3 = 33 then
25056: LD_VAR 0 3
25060: PUSH
25061: LD_INT 33
25063: EQUAL
25064: IFFALSE 25074
// sRandom := true ;
25066: LD_ADDR_EXP 119
25070: PUSH
25071: LD_INT 1
25073: ST_TO_ADDR
// if p3 = 34 then
25074: LD_VAR 0 3
25078: PUSH
25079: LD_INT 34
25081: EQUAL
25082: IFFALSE 25092
// sShield := true ;
25084: LD_ADDR_EXP 120
25088: PUSH
25089: LD_INT 1
25091: ST_TO_ADDR
// if p3 = 35 then
25092: LD_VAR 0 3
25096: PUSH
25097: LD_INT 35
25099: EQUAL
25100: IFFALSE 25110
// sTime := true ;
25102: LD_ADDR_EXP 121
25106: PUSH
25107: LD_INT 1
25109: ST_TO_ADDR
// if p3 = 36 then
25110: LD_VAR 0 3
25114: PUSH
25115: LD_INT 36
25117: EQUAL
25118: IFFALSE 25128
// sTools := true ;
25120: LD_ADDR_EXP 122
25124: PUSH
25125: LD_INT 1
25127: ST_TO_ADDR
// if p3 = 101 then
25128: LD_VAR 0 3
25132: PUSH
25133: LD_INT 101
25135: EQUAL
25136: IFFALSE 25146
// sSold := true ;
25138: LD_ADDR_EXP 87
25142: PUSH
25143: LD_INT 1
25145: ST_TO_ADDR
// if p3 = 102 then
25146: LD_VAR 0 3
25150: PUSH
25151: LD_INT 102
25153: EQUAL
25154: IFFALSE 25164
// sDiff := true ;
25156: LD_ADDR_EXP 88
25160: PUSH
25161: LD_INT 1
25163: ST_TO_ADDR
// if p3 = 103 then
25164: LD_VAR 0 3
25168: PUSH
25169: LD_INT 103
25171: EQUAL
25172: IFFALSE 25182
// sFog := true ;
25174: LD_ADDR_EXP 91
25178: PUSH
25179: LD_INT 1
25181: ST_TO_ADDR
// if p3 = 104 then
25182: LD_VAR 0 3
25186: PUSH
25187: LD_INT 104
25189: EQUAL
25190: IFFALSE 25200
// sReset := true ;
25192: LD_ADDR_EXP 92
25196: PUSH
25197: LD_INT 1
25199: ST_TO_ADDR
// if p3 = 105 then
25200: LD_VAR 0 3
25204: PUSH
25205: LD_INT 105
25207: EQUAL
25208: IFFALSE 25218
// sSun := true ;
25210: LD_ADDR_EXP 93
25214: PUSH
25215: LD_INT 1
25217: ST_TO_ADDR
// if p3 = 106 then
25218: LD_VAR 0 3
25222: PUSH
25223: LD_INT 106
25225: EQUAL
25226: IFFALSE 25236
// sTiger := true ;
25228: LD_ADDR_EXP 89
25232: PUSH
25233: LD_INT 1
25235: ST_TO_ADDR
// if p3 = 107 then
25236: LD_VAR 0 3
25240: PUSH
25241: LD_INT 107
25243: EQUAL
25244: IFFALSE 25254
// sBomb := true ;
25246: LD_ADDR_EXP 90
25250: PUSH
25251: LD_INT 1
25253: ST_TO_ADDR
// if p3 = 108 then
25254: LD_VAR 0 3
25258: PUSH
25259: LD_INT 108
25261: EQUAL
25262: IFFALSE 25272
// sWound := true ;
25264: LD_ADDR_EXP 98
25268: PUSH
25269: LD_INT 1
25271: ST_TO_ADDR
// if p3 = 109 then
25272: LD_VAR 0 3
25276: PUSH
25277: LD_INT 109
25279: EQUAL
25280: IFFALSE 25290
// sBetray := true ;
25282: LD_ADDR_EXP 102
25286: PUSH
25287: LD_INT 1
25289: ST_TO_ADDR
// if p3 = 110 then
25290: LD_VAR 0 3
25294: PUSH
25295: LD_INT 110
25297: EQUAL
25298: IFFALSE 25308
// sContamin := true ;
25300: LD_ADDR_EXP 103
25304: PUSH
25305: LD_INT 1
25307: ST_TO_ADDR
// if p3 = 111 then
25308: LD_VAR 0 3
25312: PUSH
25313: LD_INT 111
25315: EQUAL
25316: IFFALSE 25326
// sOil := true ;
25318: LD_ADDR_EXP 105
25322: PUSH
25323: LD_INT 1
25325: ST_TO_ADDR
// if p3 = 112 then
25326: LD_VAR 0 3
25330: PUSH
25331: LD_INT 112
25333: EQUAL
25334: IFFALSE 25344
// sStu := true ;
25336: LD_ADDR_EXP 109
25340: PUSH
25341: LD_INT 1
25343: ST_TO_ADDR
// if p3 = 113 then
25344: LD_VAR 0 3
25348: PUSH
25349: LD_INT 113
25351: EQUAL
25352: IFFALSE 25362
// sBazooka := true ;
25354: LD_ADDR_EXP 112
25358: PUSH
25359: LD_INT 1
25361: ST_TO_ADDR
// if p3 = 114 then
25362: LD_VAR 0 3
25366: PUSH
25367: LD_INT 114
25369: EQUAL
25370: IFFALSE 25380
// sMortar := true ;
25372: LD_ADDR_EXP 113
25376: PUSH
25377: LD_INT 1
25379: ST_TO_ADDR
// if p3 = 115 then
25380: LD_VAR 0 3
25384: PUSH
25385: LD_INT 115
25387: EQUAL
25388: IFFALSE 25398
// sRanger := true ;
25390: LD_ADDR_EXP 123
25394: PUSH
25395: LD_INT 1
25397: ST_TO_ADDR
// end ; if p2 = 101 then
25398: LD_VAR 0 2
25402: PUSH
25403: LD_INT 101
25405: EQUAL
25406: IFFALSE 25534
// begin case p3 of 1 :
25408: LD_VAR 0 3
25412: PUSH
25413: LD_INT 1
25415: DOUBLE
25416: EQUAL
25417: IFTRUE 25421
25419: GO 25428
25421: POP
// hHackUnlimitedResources ; 2 :
25422: CALL 36571 0 0
25426: GO 25534
25428: LD_INT 2
25430: DOUBLE
25431: EQUAL
25432: IFTRUE 25436
25434: GO 25443
25436: POP
// hHackSetLevel10 ; 3 :
25437: CALL 36704 0 0
25441: GO 25534
25443: LD_INT 3
25445: DOUBLE
25446: EQUAL
25447: IFTRUE 25451
25449: GO 25458
25451: POP
// hHackSetLevel10YourUnits ; 4 :
25452: CALL 36789 0 0
25456: GO 25534
25458: LD_INT 4
25460: DOUBLE
25461: EQUAL
25462: IFTRUE 25466
25464: GO 25473
25466: POP
// hHackInvincible ; 5 :
25467: CALL 37237 0 0
25471: GO 25534
25473: LD_INT 5
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25488
25481: POP
// hHackInvisible ; 6 :
25482: CALL 37348 0 0
25486: GO 25534
25488: LD_INT 6
25490: DOUBLE
25491: EQUAL
25492: IFTRUE 25496
25494: GO 25503
25496: POP
// hHackChangeYourSide ; 7 :
25497: CALL 37405 0 0
25501: GO 25534
25503: LD_INT 7
25505: DOUBLE
25506: EQUAL
25507: IFTRUE 25511
25509: GO 25518
25511: POP
// hHackChangeUnitSide ; 8 :
25512: CALL 37447 0 0
25516: GO 25534
25518: LD_INT 8
25520: DOUBLE
25521: EQUAL
25522: IFTRUE 25526
25524: GO 25533
25526: POP
// hHackFog ; end ;
25527: CALL 37548 0 0
25531: GO 25534
25533: POP
// end ; end ;
25534: LD_VAR 0 7
25538: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25539: GO 25541
25541: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25542: LD_STRING initStreamRollete();
25544: PPUSH
25545: CALL_OW 559
// InitStreamMode ;
25549: CALL 25558 0 0
// DefineStreamItems ( ) ;
25553: CALL 25998 0 0
// end ;
25557: END
// function InitStreamMode ; begin
25558: LD_INT 0
25560: PPUSH
// streamModeActive := false ;
25561: LD_ADDR_EXP 70
25565: PUSH
25566: LD_INT 0
25568: ST_TO_ADDR
// normalCounter := 36 ;
25569: LD_ADDR_EXP 71
25573: PUSH
25574: LD_INT 36
25576: ST_TO_ADDR
// hardcoreCounter := 16 ;
25577: LD_ADDR_EXP 72
25581: PUSH
25582: LD_INT 16
25584: ST_TO_ADDR
// sRocket := false ;
25585: LD_ADDR_EXP 75
25589: PUSH
25590: LD_INT 0
25592: ST_TO_ADDR
// sSpeed := false ;
25593: LD_ADDR_EXP 74
25597: PUSH
25598: LD_INT 0
25600: ST_TO_ADDR
// sEngine := false ;
25601: LD_ADDR_EXP 76
25605: PUSH
25606: LD_INT 0
25608: ST_TO_ADDR
// sSpec := false ;
25609: LD_ADDR_EXP 73
25613: PUSH
25614: LD_INT 0
25616: ST_TO_ADDR
// sLevel := false ;
25617: LD_ADDR_EXP 77
25621: PUSH
25622: LD_INT 0
25624: ST_TO_ADDR
// sArmoury := false ;
25625: LD_ADDR_EXP 78
25629: PUSH
25630: LD_INT 0
25632: ST_TO_ADDR
// sRadar := false ;
25633: LD_ADDR_EXP 79
25637: PUSH
25638: LD_INT 0
25640: ST_TO_ADDR
// sBunker := false ;
25641: LD_ADDR_EXP 80
25645: PUSH
25646: LD_INT 0
25648: ST_TO_ADDR
// sHack := false ;
25649: LD_ADDR_EXP 81
25653: PUSH
25654: LD_INT 0
25656: ST_TO_ADDR
// sFire := false ;
25657: LD_ADDR_EXP 82
25661: PUSH
25662: LD_INT 0
25664: ST_TO_ADDR
// sRefresh := false ;
25665: LD_ADDR_EXP 83
25669: PUSH
25670: LD_INT 0
25672: ST_TO_ADDR
// sExp := false ;
25673: LD_ADDR_EXP 84
25677: PUSH
25678: LD_INT 0
25680: ST_TO_ADDR
// sDepot := false ;
25681: LD_ADDR_EXP 85
25685: PUSH
25686: LD_INT 0
25688: ST_TO_ADDR
// sFlag := false ;
25689: LD_ADDR_EXP 86
25693: PUSH
25694: LD_INT 0
25696: ST_TO_ADDR
// sKamikadze := false ;
25697: LD_ADDR_EXP 94
25701: PUSH
25702: LD_INT 0
25704: ST_TO_ADDR
// sTroll := false ;
25705: LD_ADDR_EXP 95
25709: PUSH
25710: LD_INT 0
25712: ST_TO_ADDR
// sSlow := false ;
25713: LD_ADDR_EXP 96
25717: PUSH
25718: LD_INT 0
25720: ST_TO_ADDR
// sLack := false ;
25721: LD_ADDR_EXP 97
25725: PUSH
25726: LD_INT 0
25728: ST_TO_ADDR
// sTank := false ;
25729: LD_ADDR_EXP 99
25733: PUSH
25734: LD_INT 0
25736: ST_TO_ADDR
// sRemote := false ;
25737: LD_ADDR_EXP 100
25741: PUSH
25742: LD_INT 0
25744: ST_TO_ADDR
// sPowell := false ;
25745: LD_ADDR_EXP 101
25749: PUSH
25750: LD_INT 0
25752: ST_TO_ADDR
// sTeleport := false ;
25753: LD_ADDR_EXP 104
25757: PUSH
25758: LD_INT 0
25760: ST_TO_ADDR
// sOilTower := false ;
25761: LD_ADDR_EXP 106
25765: PUSH
25766: LD_INT 0
25768: ST_TO_ADDR
// sShovel := false ;
25769: LD_ADDR_EXP 107
25773: PUSH
25774: LD_INT 0
25776: ST_TO_ADDR
// sSheik := false ;
25777: LD_ADDR_EXP 108
25781: PUSH
25782: LD_INT 0
25784: ST_TO_ADDR
// sEarthquake := false ;
25785: LD_ADDR_EXP 110
25789: PUSH
25790: LD_INT 0
25792: ST_TO_ADDR
// sAI := false ;
25793: LD_ADDR_EXP 111
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
// sCargo := false ;
25801: LD_ADDR_EXP 114
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
// sDLaser := false ;
25809: LD_ADDR_EXP 115
25813: PUSH
25814: LD_INT 0
25816: ST_TO_ADDR
// sExchange := false ;
25817: LD_ADDR_EXP 116
25821: PUSH
25822: LD_INT 0
25824: ST_TO_ADDR
// sFac := false ;
25825: LD_ADDR_EXP 117
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
// sPower := false ;
25833: LD_ADDR_EXP 118
25837: PUSH
25838: LD_INT 0
25840: ST_TO_ADDR
// sRandom := false ;
25841: LD_ADDR_EXP 119
25845: PUSH
25846: LD_INT 0
25848: ST_TO_ADDR
// sShield := false ;
25849: LD_ADDR_EXP 120
25853: PUSH
25854: LD_INT 0
25856: ST_TO_ADDR
// sTime := false ;
25857: LD_ADDR_EXP 121
25861: PUSH
25862: LD_INT 0
25864: ST_TO_ADDR
// sTools := false ;
25865: LD_ADDR_EXP 122
25869: PUSH
25870: LD_INT 0
25872: ST_TO_ADDR
// sSold := false ;
25873: LD_ADDR_EXP 87
25877: PUSH
25878: LD_INT 0
25880: ST_TO_ADDR
// sDiff := false ;
25881: LD_ADDR_EXP 88
25885: PUSH
25886: LD_INT 0
25888: ST_TO_ADDR
// sFog := false ;
25889: LD_ADDR_EXP 91
25893: PUSH
25894: LD_INT 0
25896: ST_TO_ADDR
// sReset := false ;
25897: LD_ADDR_EXP 92
25901: PUSH
25902: LD_INT 0
25904: ST_TO_ADDR
// sSun := false ;
25905: LD_ADDR_EXP 93
25909: PUSH
25910: LD_INT 0
25912: ST_TO_ADDR
// sTiger := false ;
25913: LD_ADDR_EXP 89
25917: PUSH
25918: LD_INT 0
25920: ST_TO_ADDR
// sBomb := false ;
25921: LD_ADDR_EXP 90
25925: PUSH
25926: LD_INT 0
25928: ST_TO_ADDR
// sWound := false ;
25929: LD_ADDR_EXP 98
25933: PUSH
25934: LD_INT 0
25936: ST_TO_ADDR
// sBetray := false ;
25937: LD_ADDR_EXP 102
25941: PUSH
25942: LD_INT 0
25944: ST_TO_ADDR
// sContamin := false ;
25945: LD_ADDR_EXP 103
25949: PUSH
25950: LD_INT 0
25952: ST_TO_ADDR
// sOil := false ;
25953: LD_ADDR_EXP 105
25957: PUSH
25958: LD_INT 0
25960: ST_TO_ADDR
// sStu := false ;
25961: LD_ADDR_EXP 109
25965: PUSH
25966: LD_INT 0
25968: ST_TO_ADDR
// sBazooka := false ;
25969: LD_ADDR_EXP 112
25973: PUSH
25974: LD_INT 0
25976: ST_TO_ADDR
// sMortar := false ;
25977: LD_ADDR_EXP 113
25981: PUSH
25982: LD_INT 0
25984: ST_TO_ADDR
// sRanger := false ;
25985: LD_ADDR_EXP 123
25989: PUSH
25990: LD_INT 0
25992: ST_TO_ADDR
// end ;
25993: LD_VAR 0 1
25997: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25998: LD_INT 0
26000: PPUSH
26001: PPUSH
26002: PPUSH
26003: PPUSH
26004: PPUSH
// result := [ ] ;
26005: LD_ADDR_VAR 0 1
26009: PUSH
26010: EMPTY
26011: ST_TO_ADDR
// if campaign_id = 1 then
26012: LD_OWVAR 69
26016: PUSH
26017: LD_INT 1
26019: EQUAL
26020: IFFALSE 28958
// begin case mission_number of 1 :
26022: LD_OWVAR 70
26026: PUSH
26027: LD_INT 1
26029: DOUBLE
26030: EQUAL
26031: IFTRUE 26035
26033: GO 26099
26035: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
26036: LD_ADDR_VAR 0 1
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 4
26046: PUSH
26047: LD_INT 11
26049: PUSH
26050: LD_INT 12
26052: PUSH
26053: LD_INT 15
26055: PUSH
26056: LD_INT 16
26058: PUSH
26059: LD_INT 22
26061: PUSH
26062: LD_INT 23
26064: PUSH
26065: LD_INT 26
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 101
26081: PUSH
26082: LD_INT 102
26084: PUSH
26085: LD_INT 106
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: ST_TO_ADDR
26097: GO 28956
26099: LD_INT 2
26101: DOUBLE
26102: EQUAL
26103: IFTRUE 26107
26105: GO 26179
26107: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
26108: LD_ADDR_VAR 0 1
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: LD_INT 4
26118: PUSH
26119: LD_INT 11
26121: PUSH
26122: LD_INT 12
26124: PUSH
26125: LD_INT 15
26127: PUSH
26128: LD_INT 16
26130: PUSH
26131: LD_INT 22
26133: PUSH
26134: LD_INT 23
26136: PUSH
26137: LD_INT 26
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 101
26153: PUSH
26154: LD_INT 102
26156: PUSH
26157: LD_INT 105
26159: PUSH
26160: LD_INT 106
26162: PUSH
26163: LD_INT 108
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: ST_TO_ADDR
26177: GO 28956
26179: LD_INT 3
26181: DOUBLE
26182: EQUAL
26183: IFTRUE 26187
26185: GO 26263
26187: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
26188: LD_ADDR_VAR 0 1
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 4
26198: PUSH
26199: LD_INT 5
26201: PUSH
26202: LD_INT 11
26204: PUSH
26205: LD_INT 12
26207: PUSH
26208: LD_INT 15
26210: PUSH
26211: LD_INT 16
26213: PUSH
26214: LD_INT 22
26216: PUSH
26217: LD_INT 26
26219: PUSH
26220: LD_INT 36
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 101
26237: PUSH
26238: LD_INT 102
26240: PUSH
26241: LD_INT 105
26243: PUSH
26244: LD_INT 106
26246: PUSH
26247: LD_INT 108
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: ST_TO_ADDR
26261: GO 28956
26263: LD_INT 4
26265: DOUBLE
26266: EQUAL
26267: IFTRUE 26271
26269: GO 26355
26271: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
26272: LD_ADDR_VAR 0 1
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: LD_INT 4
26282: PUSH
26283: LD_INT 5
26285: PUSH
26286: LD_INT 8
26288: PUSH
26289: LD_INT 11
26291: PUSH
26292: LD_INT 12
26294: PUSH
26295: LD_INT 15
26297: PUSH
26298: LD_INT 16
26300: PUSH
26301: LD_INT 22
26303: PUSH
26304: LD_INT 23
26306: PUSH
26307: LD_INT 26
26309: PUSH
26310: LD_INT 36
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 101
26329: PUSH
26330: LD_INT 102
26332: PUSH
26333: LD_INT 105
26335: PUSH
26336: LD_INT 106
26338: PUSH
26339: LD_INT 108
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: ST_TO_ADDR
26353: GO 28956
26355: LD_INT 5
26357: DOUBLE
26358: EQUAL
26359: IFTRUE 26363
26361: GO 26463
26363: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26364: LD_ADDR_VAR 0 1
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: LD_INT 4
26374: PUSH
26375: LD_INT 5
26377: PUSH
26378: LD_INT 6
26380: PUSH
26381: LD_INT 8
26383: PUSH
26384: LD_INT 11
26386: PUSH
26387: LD_INT 12
26389: PUSH
26390: LD_INT 15
26392: PUSH
26393: LD_INT 16
26395: PUSH
26396: LD_INT 22
26398: PUSH
26399: LD_INT 23
26401: PUSH
26402: LD_INT 25
26404: PUSH
26405: LD_INT 26
26407: PUSH
26408: LD_INT 36
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 101
26429: PUSH
26430: LD_INT 102
26432: PUSH
26433: LD_INT 105
26435: PUSH
26436: LD_INT 106
26438: PUSH
26439: LD_INT 108
26441: PUSH
26442: LD_INT 109
26444: PUSH
26445: LD_INT 112
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: ST_TO_ADDR
26461: GO 28956
26463: LD_INT 6
26465: DOUBLE
26466: EQUAL
26467: IFTRUE 26471
26469: GO 26591
26471: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26472: LD_ADDR_VAR 0 1
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 4
26482: PUSH
26483: LD_INT 5
26485: PUSH
26486: LD_INT 6
26488: PUSH
26489: LD_INT 8
26491: PUSH
26492: LD_INT 11
26494: PUSH
26495: LD_INT 12
26497: PUSH
26498: LD_INT 15
26500: PUSH
26501: LD_INT 16
26503: PUSH
26504: LD_INT 20
26506: PUSH
26507: LD_INT 21
26509: PUSH
26510: LD_INT 22
26512: PUSH
26513: LD_INT 23
26515: PUSH
26516: LD_INT 25
26518: PUSH
26519: LD_INT 26
26521: PUSH
26522: LD_INT 30
26524: PUSH
26525: LD_INT 31
26527: PUSH
26528: LD_INT 32
26530: PUSH
26531: LD_INT 36
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 101
26557: PUSH
26558: LD_INT 102
26560: PUSH
26561: LD_INT 105
26563: PUSH
26564: LD_INT 106
26566: PUSH
26567: LD_INT 108
26569: PUSH
26570: LD_INT 109
26572: PUSH
26573: LD_INT 112
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: ST_TO_ADDR
26589: GO 28956
26591: LD_INT 7
26593: DOUBLE
26594: EQUAL
26595: IFTRUE 26599
26597: GO 26699
26599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26600: LD_ADDR_VAR 0 1
26604: PUSH
26605: LD_INT 2
26607: PUSH
26608: LD_INT 4
26610: PUSH
26611: LD_INT 5
26613: PUSH
26614: LD_INT 7
26616: PUSH
26617: LD_INT 11
26619: PUSH
26620: LD_INT 12
26622: PUSH
26623: LD_INT 15
26625: PUSH
26626: LD_INT 16
26628: PUSH
26629: LD_INT 20
26631: PUSH
26632: LD_INT 21
26634: PUSH
26635: LD_INT 22
26637: PUSH
26638: LD_INT 23
26640: PUSH
26641: LD_INT 25
26643: PUSH
26644: LD_INT 26
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 101
26665: PUSH
26666: LD_INT 102
26668: PUSH
26669: LD_INT 103
26671: PUSH
26672: LD_INT 105
26674: PUSH
26675: LD_INT 106
26677: PUSH
26678: LD_INT 108
26680: PUSH
26681: LD_INT 112
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: ST_TO_ADDR
26697: GO 28956
26699: LD_INT 8
26701: DOUBLE
26702: EQUAL
26703: IFTRUE 26707
26705: GO 26835
26707: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
26708: LD_ADDR_VAR 0 1
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 4
26718: PUSH
26719: LD_INT 5
26721: PUSH
26722: LD_INT 6
26724: PUSH
26725: LD_INT 7
26727: PUSH
26728: LD_INT 8
26730: PUSH
26731: LD_INT 11
26733: PUSH
26734: LD_INT 12
26736: PUSH
26737: LD_INT 15
26739: PUSH
26740: LD_INT 16
26742: PUSH
26743: LD_INT 20
26745: PUSH
26746: LD_INT 21
26748: PUSH
26749: LD_INT 22
26751: PUSH
26752: LD_INT 23
26754: PUSH
26755: LD_INT 25
26757: PUSH
26758: LD_INT 26
26760: PUSH
26761: LD_INT 30
26763: PUSH
26764: LD_INT 31
26766: PUSH
26767: LD_INT 32
26769: PUSH
26770: LD_INT 36
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 101
26797: PUSH
26798: LD_INT 102
26800: PUSH
26801: LD_INT 103
26803: PUSH
26804: LD_INT 105
26806: PUSH
26807: LD_INT 106
26809: PUSH
26810: LD_INT 108
26812: PUSH
26813: LD_INT 109
26815: PUSH
26816: LD_INT 112
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: ST_TO_ADDR
26833: GO 28956
26835: LD_INT 9
26837: DOUBLE
26838: EQUAL
26839: IFTRUE 26843
26841: GO 26979
26843: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
26844: LD_ADDR_VAR 0 1
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 4
26854: PUSH
26855: LD_INT 5
26857: PUSH
26858: LD_INT 6
26860: PUSH
26861: LD_INT 7
26863: PUSH
26864: LD_INT 8
26866: PUSH
26867: LD_INT 11
26869: PUSH
26870: LD_INT 12
26872: PUSH
26873: LD_INT 15
26875: PUSH
26876: LD_INT 16
26878: PUSH
26879: LD_INT 20
26881: PUSH
26882: LD_INT 21
26884: PUSH
26885: LD_INT 22
26887: PUSH
26888: LD_INT 23
26890: PUSH
26891: LD_INT 25
26893: PUSH
26894: LD_INT 26
26896: PUSH
26897: LD_INT 28
26899: PUSH
26900: LD_INT 30
26902: PUSH
26903: LD_INT 31
26905: PUSH
26906: LD_INT 32
26908: PUSH
26909: LD_INT 36
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 101
26937: PUSH
26938: LD_INT 102
26940: PUSH
26941: LD_INT 103
26943: PUSH
26944: LD_INT 105
26946: PUSH
26947: LD_INT 106
26949: PUSH
26950: LD_INT 108
26952: PUSH
26953: LD_INT 109
26955: PUSH
26956: LD_INT 112
26958: PUSH
26959: LD_INT 114
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: ST_TO_ADDR
26977: GO 28956
26979: LD_INT 10
26981: DOUBLE
26982: EQUAL
26983: IFTRUE 26987
26985: GO 27171
26987: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
26988: LD_ADDR_VAR 0 1
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: LD_INT 4
26998: PUSH
26999: LD_INT 5
27001: PUSH
27002: LD_INT 6
27004: PUSH
27005: LD_INT 7
27007: PUSH
27008: LD_INT 8
27010: PUSH
27011: LD_INT 9
27013: PUSH
27014: LD_INT 10
27016: PUSH
27017: LD_INT 11
27019: PUSH
27020: LD_INT 12
27022: PUSH
27023: LD_INT 13
27025: PUSH
27026: LD_INT 14
27028: PUSH
27029: LD_INT 15
27031: PUSH
27032: LD_INT 16
27034: PUSH
27035: LD_INT 17
27037: PUSH
27038: LD_INT 18
27040: PUSH
27041: LD_INT 19
27043: PUSH
27044: LD_INT 20
27046: PUSH
27047: LD_INT 21
27049: PUSH
27050: LD_INT 22
27052: PUSH
27053: LD_INT 23
27055: PUSH
27056: LD_INT 24
27058: PUSH
27059: LD_INT 25
27061: PUSH
27062: LD_INT 26
27064: PUSH
27065: LD_INT 28
27067: PUSH
27068: LD_INT 30
27070: PUSH
27071: LD_INT 31
27073: PUSH
27074: LD_INT 32
27076: PUSH
27077: LD_INT 36
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 101
27113: PUSH
27114: LD_INT 102
27116: PUSH
27117: LD_INT 103
27119: PUSH
27120: LD_INT 104
27122: PUSH
27123: LD_INT 105
27125: PUSH
27126: LD_INT 106
27128: PUSH
27129: LD_INT 107
27131: PUSH
27132: LD_INT 108
27134: PUSH
27135: LD_INT 109
27137: PUSH
27138: LD_INT 110
27140: PUSH
27141: LD_INT 111
27143: PUSH
27144: LD_INT 112
27146: PUSH
27147: LD_INT 114
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: ST_TO_ADDR
27169: GO 28956
27171: LD_INT 11
27173: DOUBLE
27174: EQUAL
27175: IFTRUE 27179
27177: GO 27371
27179: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
27180: LD_ADDR_VAR 0 1
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: LD_INT 3
27190: PUSH
27191: LD_INT 4
27193: PUSH
27194: LD_INT 5
27196: PUSH
27197: LD_INT 6
27199: PUSH
27200: LD_INT 7
27202: PUSH
27203: LD_INT 8
27205: PUSH
27206: LD_INT 9
27208: PUSH
27209: LD_INT 10
27211: PUSH
27212: LD_INT 11
27214: PUSH
27215: LD_INT 12
27217: PUSH
27218: LD_INT 13
27220: PUSH
27221: LD_INT 14
27223: PUSH
27224: LD_INT 15
27226: PUSH
27227: LD_INT 16
27229: PUSH
27230: LD_INT 17
27232: PUSH
27233: LD_INT 18
27235: PUSH
27236: LD_INT 19
27238: PUSH
27239: LD_INT 20
27241: PUSH
27242: LD_INT 21
27244: PUSH
27245: LD_INT 22
27247: PUSH
27248: LD_INT 23
27250: PUSH
27251: LD_INT 24
27253: PUSH
27254: LD_INT 25
27256: PUSH
27257: LD_INT 26
27259: PUSH
27260: LD_INT 28
27262: PUSH
27263: LD_INT 30
27265: PUSH
27266: LD_INT 31
27268: PUSH
27269: LD_INT 32
27271: PUSH
27272: LD_INT 34
27274: PUSH
27275: LD_INT 36
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 101
27313: PUSH
27314: LD_INT 102
27316: PUSH
27317: LD_INT 103
27319: PUSH
27320: LD_INT 104
27322: PUSH
27323: LD_INT 105
27325: PUSH
27326: LD_INT 106
27328: PUSH
27329: LD_INT 107
27331: PUSH
27332: LD_INT 108
27334: PUSH
27335: LD_INT 109
27337: PUSH
27338: LD_INT 110
27340: PUSH
27341: LD_INT 111
27343: PUSH
27344: LD_INT 112
27346: PUSH
27347: LD_INT 114
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: ST_TO_ADDR
27369: GO 28956
27371: LD_INT 12
27373: DOUBLE
27374: EQUAL
27375: IFTRUE 27379
27377: GO 27587
27379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27380: LD_ADDR_VAR 0 1
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: LD_INT 3
27393: PUSH
27394: LD_INT 4
27396: PUSH
27397: LD_INT 5
27399: PUSH
27400: LD_INT 6
27402: PUSH
27403: LD_INT 7
27405: PUSH
27406: LD_INT 8
27408: PUSH
27409: LD_INT 9
27411: PUSH
27412: LD_INT 10
27414: PUSH
27415: LD_INT 11
27417: PUSH
27418: LD_INT 12
27420: PUSH
27421: LD_INT 13
27423: PUSH
27424: LD_INT 14
27426: PUSH
27427: LD_INT 15
27429: PUSH
27430: LD_INT 16
27432: PUSH
27433: LD_INT 17
27435: PUSH
27436: LD_INT 18
27438: PUSH
27439: LD_INT 19
27441: PUSH
27442: LD_INT 20
27444: PUSH
27445: LD_INT 21
27447: PUSH
27448: LD_INT 22
27450: PUSH
27451: LD_INT 23
27453: PUSH
27454: LD_INT 24
27456: PUSH
27457: LD_INT 25
27459: PUSH
27460: LD_INT 26
27462: PUSH
27463: LD_INT 27
27465: PUSH
27466: LD_INT 28
27468: PUSH
27469: LD_INT 30
27471: PUSH
27472: LD_INT 31
27474: PUSH
27475: LD_INT 32
27477: PUSH
27478: LD_INT 33
27480: PUSH
27481: LD_INT 34
27483: PUSH
27484: LD_INT 36
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 101
27525: PUSH
27526: LD_INT 102
27528: PUSH
27529: LD_INT 103
27531: PUSH
27532: LD_INT 104
27534: PUSH
27535: LD_INT 105
27537: PUSH
27538: LD_INT 106
27540: PUSH
27541: LD_INT 107
27543: PUSH
27544: LD_INT 108
27546: PUSH
27547: LD_INT 109
27549: PUSH
27550: LD_INT 110
27552: PUSH
27553: LD_INT 111
27555: PUSH
27556: LD_INT 112
27558: PUSH
27559: LD_INT 113
27561: PUSH
27562: LD_INT 114
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: ST_TO_ADDR
27585: GO 28956
27587: LD_INT 13
27589: DOUBLE
27590: EQUAL
27591: IFTRUE 27595
27593: GO 27791
27595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27596: LD_ADDR_VAR 0 1
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: LD_INT 3
27609: PUSH
27610: LD_INT 4
27612: PUSH
27613: LD_INT 5
27615: PUSH
27616: LD_INT 8
27618: PUSH
27619: LD_INT 9
27621: PUSH
27622: LD_INT 10
27624: PUSH
27625: LD_INT 11
27627: PUSH
27628: LD_INT 12
27630: PUSH
27631: LD_INT 14
27633: PUSH
27634: LD_INT 15
27636: PUSH
27637: LD_INT 16
27639: PUSH
27640: LD_INT 17
27642: PUSH
27643: LD_INT 18
27645: PUSH
27646: LD_INT 19
27648: PUSH
27649: LD_INT 20
27651: PUSH
27652: LD_INT 21
27654: PUSH
27655: LD_INT 22
27657: PUSH
27658: LD_INT 23
27660: PUSH
27661: LD_INT 24
27663: PUSH
27664: LD_INT 25
27666: PUSH
27667: LD_INT 26
27669: PUSH
27670: LD_INT 27
27672: PUSH
27673: LD_INT 28
27675: PUSH
27676: LD_INT 30
27678: PUSH
27679: LD_INT 31
27681: PUSH
27682: LD_INT 32
27684: PUSH
27685: LD_INT 33
27687: PUSH
27688: LD_INT 34
27690: PUSH
27691: LD_INT 36
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 101
27729: PUSH
27730: LD_INT 102
27732: PUSH
27733: LD_INT 103
27735: PUSH
27736: LD_INT 104
27738: PUSH
27739: LD_INT 105
27741: PUSH
27742: LD_INT 106
27744: PUSH
27745: LD_INT 107
27747: PUSH
27748: LD_INT 108
27750: PUSH
27751: LD_INT 109
27753: PUSH
27754: LD_INT 110
27756: PUSH
27757: LD_INT 111
27759: PUSH
27760: LD_INT 112
27762: PUSH
27763: LD_INT 113
27765: PUSH
27766: LD_INT 114
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: ST_TO_ADDR
27789: GO 28956
27791: LD_INT 14
27793: DOUBLE
27794: EQUAL
27795: IFTRUE 27799
27797: GO 28011
27799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
27800: LD_ADDR_VAR 0 1
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: LD_INT 2
27810: PUSH
27811: LD_INT 3
27813: PUSH
27814: LD_INT 4
27816: PUSH
27817: LD_INT 5
27819: PUSH
27820: LD_INT 6
27822: PUSH
27823: LD_INT 7
27825: PUSH
27826: LD_INT 8
27828: PUSH
27829: LD_INT 9
27831: PUSH
27832: LD_INT 10
27834: PUSH
27835: LD_INT 11
27837: PUSH
27838: LD_INT 12
27840: PUSH
27841: LD_INT 13
27843: PUSH
27844: LD_INT 14
27846: PUSH
27847: LD_INT 15
27849: PUSH
27850: LD_INT 16
27852: PUSH
27853: LD_INT 17
27855: PUSH
27856: LD_INT 18
27858: PUSH
27859: LD_INT 19
27861: PUSH
27862: LD_INT 20
27864: PUSH
27865: LD_INT 21
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_INT 23
27873: PUSH
27874: LD_INT 24
27876: PUSH
27877: LD_INT 25
27879: PUSH
27880: LD_INT 26
27882: PUSH
27883: LD_INT 27
27885: PUSH
27886: LD_INT 28
27888: PUSH
27889: LD_INT 29
27891: PUSH
27892: LD_INT 30
27894: PUSH
27895: LD_INT 31
27897: PUSH
27898: LD_INT 32
27900: PUSH
27901: LD_INT 33
27903: PUSH
27904: LD_INT 34
27906: PUSH
27907: LD_INT 36
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 101
27949: PUSH
27950: LD_INT 102
27952: PUSH
27953: LD_INT 103
27955: PUSH
27956: LD_INT 104
27958: PUSH
27959: LD_INT 105
27961: PUSH
27962: LD_INT 106
27964: PUSH
27965: LD_INT 107
27967: PUSH
27968: LD_INT 108
27970: PUSH
27971: LD_INT 109
27973: PUSH
27974: LD_INT 110
27976: PUSH
27977: LD_INT 111
27979: PUSH
27980: LD_INT 112
27982: PUSH
27983: LD_INT 113
27985: PUSH
27986: LD_INT 114
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: ST_TO_ADDR
28009: GO 28956
28011: LD_INT 15
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28019
28017: GO 28231
28019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
28020: LD_ADDR_VAR 0 1
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: LD_INT 4
28036: PUSH
28037: LD_INT 5
28039: PUSH
28040: LD_INT 6
28042: PUSH
28043: LD_INT 7
28045: PUSH
28046: LD_INT 8
28048: PUSH
28049: LD_INT 9
28051: PUSH
28052: LD_INT 10
28054: PUSH
28055: LD_INT 11
28057: PUSH
28058: LD_INT 12
28060: PUSH
28061: LD_INT 13
28063: PUSH
28064: LD_INT 14
28066: PUSH
28067: LD_INT 15
28069: PUSH
28070: LD_INT 16
28072: PUSH
28073: LD_INT 17
28075: PUSH
28076: LD_INT 18
28078: PUSH
28079: LD_INT 19
28081: PUSH
28082: LD_INT 20
28084: PUSH
28085: LD_INT 21
28087: PUSH
28088: LD_INT 22
28090: PUSH
28091: LD_INT 23
28093: PUSH
28094: LD_INT 24
28096: PUSH
28097: LD_INT 25
28099: PUSH
28100: LD_INT 26
28102: PUSH
28103: LD_INT 27
28105: PUSH
28106: LD_INT 28
28108: PUSH
28109: LD_INT 29
28111: PUSH
28112: LD_INT 30
28114: PUSH
28115: LD_INT 31
28117: PUSH
28118: LD_INT 32
28120: PUSH
28121: LD_INT 33
28123: PUSH
28124: LD_INT 34
28126: PUSH
28127: LD_INT 36
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 101
28169: PUSH
28170: LD_INT 102
28172: PUSH
28173: LD_INT 103
28175: PUSH
28176: LD_INT 104
28178: PUSH
28179: LD_INT 105
28181: PUSH
28182: LD_INT 106
28184: PUSH
28185: LD_INT 107
28187: PUSH
28188: LD_INT 108
28190: PUSH
28191: LD_INT 109
28193: PUSH
28194: LD_INT 110
28196: PUSH
28197: LD_INT 111
28199: PUSH
28200: LD_INT 112
28202: PUSH
28203: LD_INT 113
28205: PUSH
28206: LD_INT 114
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: ST_TO_ADDR
28229: GO 28956
28231: LD_INT 16
28233: DOUBLE
28234: EQUAL
28235: IFTRUE 28239
28237: GO 28363
28239: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
28240: LD_ADDR_VAR 0 1
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 4
28250: PUSH
28251: LD_INT 5
28253: PUSH
28254: LD_INT 7
28256: PUSH
28257: LD_INT 11
28259: PUSH
28260: LD_INT 12
28262: PUSH
28263: LD_INT 15
28265: PUSH
28266: LD_INT 16
28268: PUSH
28269: LD_INT 20
28271: PUSH
28272: LD_INT 21
28274: PUSH
28275: LD_INT 22
28277: PUSH
28278: LD_INT 23
28280: PUSH
28281: LD_INT 25
28283: PUSH
28284: LD_INT 26
28286: PUSH
28287: LD_INT 30
28289: PUSH
28290: LD_INT 31
28292: PUSH
28293: LD_INT 32
28295: PUSH
28296: LD_INT 33
28298: PUSH
28299: LD_INT 34
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 101
28325: PUSH
28326: LD_INT 102
28328: PUSH
28329: LD_INT 103
28331: PUSH
28332: LD_INT 106
28334: PUSH
28335: LD_INT 108
28337: PUSH
28338: LD_INT 112
28340: PUSH
28341: LD_INT 113
28343: PUSH
28344: LD_INT 114
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: ST_TO_ADDR
28361: GO 28956
28363: LD_INT 17
28365: DOUBLE
28366: EQUAL
28367: IFTRUE 28371
28369: GO 28583
28371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28372: LD_ADDR_VAR 0 1
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: LD_INT 3
28385: PUSH
28386: LD_INT 4
28388: PUSH
28389: LD_INT 5
28391: PUSH
28392: LD_INT 6
28394: PUSH
28395: LD_INT 7
28397: PUSH
28398: LD_INT 8
28400: PUSH
28401: LD_INT 9
28403: PUSH
28404: LD_INT 10
28406: PUSH
28407: LD_INT 11
28409: PUSH
28410: LD_INT 12
28412: PUSH
28413: LD_INT 13
28415: PUSH
28416: LD_INT 14
28418: PUSH
28419: LD_INT 15
28421: PUSH
28422: LD_INT 16
28424: PUSH
28425: LD_INT 17
28427: PUSH
28428: LD_INT 18
28430: PUSH
28431: LD_INT 19
28433: PUSH
28434: LD_INT 20
28436: PUSH
28437: LD_INT 21
28439: PUSH
28440: LD_INT 22
28442: PUSH
28443: LD_INT 23
28445: PUSH
28446: LD_INT 24
28448: PUSH
28449: LD_INT 25
28451: PUSH
28452: LD_INT 26
28454: PUSH
28455: LD_INT 27
28457: PUSH
28458: LD_INT 28
28460: PUSH
28461: LD_INT 29
28463: PUSH
28464: LD_INT 30
28466: PUSH
28467: LD_INT 31
28469: PUSH
28470: LD_INT 32
28472: PUSH
28473: LD_INT 33
28475: PUSH
28476: LD_INT 34
28478: PUSH
28479: LD_INT 36
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 101
28521: PUSH
28522: LD_INT 102
28524: PUSH
28525: LD_INT 103
28527: PUSH
28528: LD_INT 104
28530: PUSH
28531: LD_INT 105
28533: PUSH
28534: LD_INT 106
28536: PUSH
28537: LD_INT 107
28539: PUSH
28540: LD_INT 108
28542: PUSH
28543: LD_INT 109
28545: PUSH
28546: LD_INT 110
28548: PUSH
28549: LD_INT 111
28551: PUSH
28552: LD_INT 112
28554: PUSH
28555: LD_INT 113
28557: PUSH
28558: LD_INT 114
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: ST_TO_ADDR
28581: GO 28956
28583: LD_INT 18
28585: DOUBLE
28586: EQUAL
28587: IFTRUE 28591
28589: GO 28727
28591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28592: LD_ADDR_VAR 0 1
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: LD_INT 4
28602: PUSH
28603: LD_INT 5
28605: PUSH
28606: LD_INT 7
28608: PUSH
28609: LD_INT 11
28611: PUSH
28612: LD_INT 12
28614: PUSH
28615: LD_INT 15
28617: PUSH
28618: LD_INT 16
28620: PUSH
28621: LD_INT 20
28623: PUSH
28624: LD_INT 21
28626: PUSH
28627: LD_INT 22
28629: PUSH
28630: LD_INT 23
28632: PUSH
28633: LD_INT 25
28635: PUSH
28636: LD_INT 26
28638: PUSH
28639: LD_INT 30
28641: PUSH
28642: LD_INT 31
28644: PUSH
28645: LD_INT 32
28647: PUSH
28648: LD_INT 33
28650: PUSH
28651: LD_INT 34
28653: PUSH
28654: LD_INT 35
28656: PUSH
28657: LD_INT 36
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 101
28685: PUSH
28686: LD_INT 102
28688: PUSH
28689: LD_INT 103
28691: PUSH
28692: LD_INT 106
28694: PUSH
28695: LD_INT 108
28697: PUSH
28698: LD_INT 112
28700: PUSH
28701: LD_INT 113
28703: PUSH
28704: LD_INT 114
28706: PUSH
28707: LD_INT 115
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: ST_TO_ADDR
28725: GO 28956
28727: LD_INT 19
28729: DOUBLE
28730: EQUAL
28731: IFTRUE 28735
28733: GO 28955
28735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
28736: LD_ADDR_VAR 0 1
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: LD_INT 3
28749: PUSH
28750: LD_INT 4
28752: PUSH
28753: LD_INT 5
28755: PUSH
28756: LD_INT 6
28758: PUSH
28759: LD_INT 7
28761: PUSH
28762: LD_INT 8
28764: PUSH
28765: LD_INT 9
28767: PUSH
28768: LD_INT 10
28770: PUSH
28771: LD_INT 11
28773: PUSH
28774: LD_INT 12
28776: PUSH
28777: LD_INT 13
28779: PUSH
28780: LD_INT 14
28782: PUSH
28783: LD_INT 15
28785: PUSH
28786: LD_INT 16
28788: PUSH
28789: LD_INT 17
28791: PUSH
28792: LD_INT 18
28794: PUSH
28795: LD_INT 19
28797: PUSH
28798: LD_INT 20
28800: PUSH
28801: LD_INT 21
28803: PUSH
28804: LD_INT 22
28806: PUSH
28807: LD_INT 23
28809: PUSH
28810: LD_INT 24
28812: PUSH
28813: LD_INT 25
28815: PUSH
28816: LD_INT 26
28818: PUSH
28819: LD_INT 27
28821: PUSH
28822: LD_INT 28
28824: PUSH
28825: LD_INT 29
28827: PUSH
28828: LD_INT 30
28830: PUSH
28831: LD_INT 31
28833: PUSH
28834: LD_INT 32
28836: PUSH
28837: LD_INT 33
28839: PUSH
28840: LD_INT 34
28842: PUSH
28843: LD_INT 35
28845: PUSH
28846: LD_INT 36
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 101
28889: PUSH
28890: LD_INT 102
28892: PUSH
28893: LD_INT 103
28895: PUSH
28896: LD_INT 104
28898: PUSH
28899: LD_INT 105
28901: PUSH
28902: LD_INT 106
28904: PUSH
28905: LD_INT 107
28907: PUSH
28908: LD_INT 108
28910: PUSH
28911: LD_INT 109
28913: PUSH
28914: LD_INT 110
28916: PUSH
28917: LD_INT 111
28919: PUSH
28920: LD_INT 112
28922: PUSH
28923: LD_INT 113
28925: PUSH
28926: LD_INT 114
28928: PUSH
28929: LD_INT 115
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: ST_TO_ADDR
28953: GO 28956
28955: POP
// end else
28956: GO 29175
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
28958: LD_ADDR_VAR 0 1
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: LD_INT 4
28974: PUSH
28975: LD_INT 5
28977: PUSH
28978: LD_INT 6
28980: PUSH
28981: LD_INT 7
28983: PUSH
28984: LD_INT 8
28986: PUSH
28987: LD_INT 9
28989: PUSH
28990: LD_INT 10
28992: PUSH
28993: LD_INT 11
28995: PUSH
28996: LD_INT 12
28998: PUSH
28999: LD_INT 13
29001: PUSH
29002: LD_INT 14
29004: PUSH
29005: LD_INT 15
29007: PUSH
29008: LD_INT 16
29010: PUSH
29011: LD_INT 17
29013: PUSH
29014: LD_INT 18
29016: PUSH
29017: LD_INT 19
29019: PUSH
29020: LD_INT 20
29022: PUSH
29023: LD_INT 21
29025: PUSH
29026: LD_INT 22
29028: PUSH
29029: LD_INT 23
29031: PUSH
29032: LD_INT 24
29034: PUSH
29035: LD_INT 25
29037: PUSH
29038: LD_INT 26
29040: PUSH
29041: LD_INT 27
29043: PUSH
29044: LD_INT 28
29046: PUSH
29047: LD_INT 29
29049: PUSH
29050: LD_INT 30
29052: PUSH
29053: LD_INT 31
29055: PUSH
29056: LD_INT 32
29058: PUSH
29059: LD_INT 33
29061: PUSH
29062: LD_INT 34
29064: PUSH
29065: LD_INT 35
29067: PUSH
29068: LD_INT 36
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 101
29111: PUSH
29112: LD_INT 102
29114: PUSH
29115: LD_INT 103
29117: PUSH
29118: LD_INT 104
29120: PUSH
29121: LD_INT 105
29123: PUSH
29124: LD_INT 106
29126: PUSH
29127: LD_INT 107
29129: PUSH
29130: LD_INT 108
29132: PUSH
29133: LD_INT 109
29135: PUSH
29136: LD_INT 110
29138: PUSH
29139: LD_INT 111
29141: PUSH
29142: LD_INT 112
29144: PUSH
29145: LD_INT 113
29147: PUSH
29148: LD_INT 114
29150: PUSH
29151: LD_INT 115
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: ST_TO_ADDR
// if result then
29175: LD_VAR 0 1
29179: IFFALSE 29468
// begin normal :=  ;
29181: LD_ADDR_VAR 0 3
29185: PUSH
29186: LD_STRING 
29188: ST_TO_ADDR
// hardcore :=  ;
29189: LD_ADDR_VAR 0 4
29193: PUSH
29194: LD_STRING 
29196: ST_TO_ADDR
// for i = 1 to normalCounter do
29197: LD_ADDR_VAR 0 5
29201: PUSH
29202: DOUBLE
29203: LD_INT 1
29205: DEC
29206: ST_TO_ADDR
29207: LD_EXP 71
29211: PUSH
29212: FOR_TO
29213: IFFALSE 29314
// begin tmp := 0 ;
29215: LD_ADDR_VAR 0 2
29219: PUSH
29220: LD_STRING 0
29222: ST_TO_ADDR
// if result [ 1 ] then
29223: LD_VAR 0 1
29227: PUSH
29228: LD_INT 1
29230: ARRAY
29231: IFFALSE 29296
// if result [ 1 ] [ 1 ] = i then
29233: LD_VAR 0 1
29237: PUSH
29238: LD_INT 1
29240: ARRAY
29241: PUSH
29242: LD_INT 1
29244: ARRAY
29245: PUSH
29246: LD_VAR 0 5
29250: EQUAL
29251: IFFALSE 29296
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29253: LD_ADDR_VAR 0 1
29257: PUSH
29258: LD_VAR 0 1
29262: PPUSH
29263: LD_INT 1
29265: PPUSH
29266: LD_VAR 0 1
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: LD_INT 1
29277: PPUSH
29278: CALL_OW 3
29282: PPUSH
29283: CALL_OW 1
29287: ST_TO_ADDR
// tmp := 1 ;
29288: LD_ADDR_VAR 0 2
29292: PUSH
29293: LD_STRING 1
29295: ST_TO_ADDR
// end ; normal := normal & tmp ;
29296: LD_ADDR_VAR 0 3
29300: PUSH
29301: LD_VAR 0 3
29305: PUSH
29306: LD_VAR 0 2
29310: STR
29311: ST_TO_ADDR
// end ;
29312: GO 29212
29314: POP
29315: POP
// for i = 1 to hardcoreCounter do
29316: LD_ADDR_VAR 0 5
29320: PUSH
29321: DOUBLE
29322: LD_INT 1
29324: DEC
29325: ST_TO_ADDR
29326: LD_EXP 72
29330: PUSH
29331: FOR_TO
29332: IFFALSE 29437
// begin tmp := 0 ;
29334: LD_ADDR_VAR 0 2
29338: PUSH
29339: LD_STRING 0
29341: ST_TO_ADDR
// if result [ 2 ] then
29342: LD_VAR 0 1
29346: PUSH
29347: LD_INT 2
29349: ARRAY
29350: IFFALSE 29419
// if result [ 2 ] [ 1 ] = 100 + i then
29352: LD_VAR 0 1
29356: PUSH
29357: LD_INT 2
29359: ARRAY
29360: PUSH
29361: LD_INT 1
29363: ARRAY
29364: PUSH
29365: LD_INT 100
29367: PUSH
29368: LD_VAR 0 5
29372: PLUS
29373: EQUAL
29374: IFFALSE 29419
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29376: LD_ADDR_VAR 0 1
29380: PUSH
29381: LD_VAR 0 1
29385: PPUSH
29386: LD_INT 2
29388: PPUSH
29389: LD_VAR 0 1
29393: PUSH
29394: LD_INT 2
29396: ARRAY
29397: PPUSH
29398: LD_INT 1
29400: PPUSH
29401: CALL_OW 3
29405: PPUSH
29406: CALL_OW 1
29410: ST_TO_ADDR
// tmp := 1 ;
29411: LD_ADDR_VAR 0 2
29415: PUSH
29416: LD_STRING 1
29418: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29419: LD_ADDR_VAR 0 4
29423: PUSH
29424: LD_VAR 0 4
29428: PUSH
29429: LD_VAR 0 2
29433: STR
29434: ST_TO_ADDR
// end ;
29435: GO 29331
29437: POP
29438: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29439: LD_STRING getStreamItemsFromMission("
29441: PUSH
29442: LD_VAR 0 3
29446: STR
29447: PUSH
29448: LD_STRING ","
29450: STR
29451: PUSH
29452: LD_VAR 0 4
29456: STR
29457: PUSH
29458: LD_STRING ")
29460: STR
29461: PPUSH
29462: CALL_OW 559
// end else
29466: GO 29475
// ToLua ( getStreamItemsFromMission("","") ) ;
29468: LD_STRING getStreamItemsFromMission("","")
29470: PPUSH
29471: CALL_OW 559
// end ;
29475: LD_VAR 0 1
29479: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29480: LD_EXP 70
29484: PUSH
29485: LD_EXP 75
29489: AND
29490: IFFALSE 29614
29492: GO 29494
29494: DISABLE
29495: LD_INT 0
29497: PPUSH
29498: PPUSH
// begin enable ;
29499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29500: LD_ADDR_VAR 0 2
29504: PUSH
29505: LD_INT 22
29507: PUSH
29508: LD_OWVAR 2
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 34
29522: PUSH
29523: LD_INT 7
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 34
29532: PUSH
29533: LD_INT 45
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 34
29542: PUSH
29543: LD_INT 28
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 34
29552: PUSH
29553: LD_INT 47
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PPUSH
29571: CALL_OW 69
29575: ST_TO_ADDR
// if not tmp then
29576: LD_VAR 0 2
29580: NOT
29581: IFFALSE 29585
// exit ;
29583: GO 29614
// for i in tmp do
29585: LD_ADDR_VAR 0 1
29589: PUSH
29590: LD_VAR 0 2
29594: PUSH
29595: FOR_IN
29596: IFFALSE 29612
// begin SetLives ( i , 0 ) ;
29598: LD_VAR 0 1
29602: PPUSH
29603: LD_INT 0
29605: PPUSH
29606: CALL_OW 234
// end ;
29610: GO 29595
29612: POP
29613: POP
// end ;
29614: PPOPN 2
29616: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29617: LD_EXP 70
29621: PUSH
29622: LD_EXP 76
29626: AND
29627: IFFALSE 29711
29629: GO 29631
29631: DISABLE
29632: LD_INT 0
29634: PPUSH
29635: PPUSH
// begin enable ;
29636: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29637: LD_ADDR_VAR 0 2
29641: PUSH
29642: LD_INT 22
29644: PUSH
29645: LD_OWVAR 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 32
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PPUSH
29668: CALL_OW 69
29672: ST_TO_ADDR
// if not tmp then
29673: LD_VAR 0 2
29677: NOT
29678: IFFALSE 29682
// exit ;
29680: GO 29711
// for i in tmp do
29682: LD_ADDR_VAR 0 1
29686: PUSH
29687: LD_VAR 0 2
29691: PUSH
29692: FOR_IN
29693: IFFALSE 29709
// begin SetLives ( i , 0 ) ;
29695: LD_VAR 0 1
29699: PPUSH
29700: LD_INT 0
29702: PPUSH
29703: CALL_OW 234
// end ;
29707: GO 29692
29709: POP
29710: POP
// end ;
29711: PPOPN 2
29713: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29714: LD_EXP 70
29718: PUSH
29719: LD_EXP 73
29723: AND
29724: IFFALSE 29817
29726: GO 29728
29728: DISABLE
29729: LD_INT 0
29731: PPUSH
// begin enable ;
29732: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29733: LD_ADDR_VAR 0 1
29737: PUSH
29738: LD_INT 22
29740: PUSH
29741: LD_OWVAR 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: LD_INT 25
29755: PUSH
29756: LD_INT 5
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 25
29765: PUSH
29766: LD_INT 9
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 25
29775: PUSH
29776: LD_INT 8
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PPUSH
29793: CALL_OW 69
29797: PUSH
29798: FOR_IN
29799: IFFALSE 29815
// begin SetClass ( i , 1 ) ;
29801: LD_VAR 0 1
29805: PPUSH
29806: LD_INT 1
29808: PPUSH
29809: CALL_OW 336
// end ;
29813: GO 29798
29815: POP
29816: POP
// end ;
29817: PPOPN 1
29819: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29820: LD_EXP 70
29824: PUSH
29825: LD_EXP 74
29829: AND
29830: PUSH
29831: LD_OWVAR 65
29835: PUSH
29836: LD_INT 7
29838: LESS
29839: AND
29840: IFFALSE 29854
29842: GO 29844
29844: DISABLE
// begin enable ;
29845: ENABLE
// game_speed := 7 ;
29846: LD_ADDR_OWVAR 65
29850: PUSH
29851: LD_INT 7
29853: ST_TO_ADDR
// end ;
29854: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29855: LD_EXP 70
29859: PUSH
29860: LD_EXP 77
29864: AND
29865: IFFALSE 30067
29867: GO 29869
29869: DISABLE
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
29874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29875: LD_ADDR_VAR 0 3
29879: PUSH
29880: LD_INT 81
29882: PUSH
29883: LD_OWVAR 2
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 21
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PPUSH
29906: CALL_OW 69
29910: ST_TO_ADDR
// if not tmp then
29911: LD_VAR 0 3
29915: NOT
29916: IFFALSE 29920
// exit ;
29918: GO 30067
// if tmp > 5 then
29920: LD_VAR 0 3
29924: PUSH
29925: LD_INT 5
29927: GREATER
29928: IFFALSE 29940
// k := 5 else
29930: LD_ADDR_VAR 0 2
29934: PUSH
29935: LD_INT 5
29937: ST_TO_ADDR
29938: GO 29950
// k := tmp ;
29940: LD_ADDR_VAR 0 2
29944: PUSH
29945: LD_VAR 0 3
29949: ST_TO_ADDR
// for i := 1 to k do
29950: LD_ADDR_VAR 0 1
29954: PUSH
29955: DOUBLE
29956: LD_INT 1
29958: DEC
29959: ST_TO_ADDR
29960: LD_VAR 0 2
29964: PUSH
29965: FOR_TO
29966: IFFALSE 30065
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29968: LD_VAR 0 3
29972: PUSH
29973: LD_VAR 0 1
29977: ARRAY
29978: PPUSH
29979: LD_VAR 0 1
29983: PUSH
29984: LD_INT 4
29986: MOD
29987: PUSH
29988: LD_INT 1
29990: PLUS
29991: PPUSH
29992: CALL_OW 259
29996: PUSH
29997: LD_INT 10
29999: LESS
30000: IFFALSE 30063
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30002: LD_VAR 0 3
30006: PUSH
30007: LD_VAR 0 1
30011: ARRAY
30012: PPUSH
30013: LD_VAR 0 1
30017: PUSH
30018: LD_INT 4
30020: MOD
30021: PUSH
30022: LD_INT 1
30024: PLUS
30025: PPUSH
30026: LD_VAR 0 3
30030: PUSH
30031: LD_VAR 0 1
30035: ARRAY
30036: PPUSH
30037: LD_VAR 0 1
30041: PUSH
30042: LD_INT 4
30044: MOD
30045: PUSH
30046: LD_INT 1
30048: PLUS
30049: PPUSH
30050: CALL_OW 259
30054: PUSH
30055: LD_INT 1
30057: PLUS
30058: PPUSH
30059: CALL_OW 237
30063: GO 29965
30065: POP
30066: POP
// end ;
30067: PPOPN 3
30069: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30070: LD_EXP 70
30074: PUSH
30075: LD_EXP 78
30079: AND
30080: IFFALSE 30100
30082: GO 30084
30084: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30085: LD_INT 4
30087: PPUSH
30088: LD_OWVAR 2
30092: PPUSH
30093: LD_INT 0
30095: PPUSH
30096: CALL_OW 324
30100: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30101: LD_EXP 70
30105: PUSH
30106: LD_EXP 107
30110: AND
30111: IFFALSE 30131
30113: GO 30115
30115: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30116: LD_INT 19
30118: PPUSH
30119: LD_OWVAR 2
30123: PPUSH
30124: LD_INT 0
30126: PPUSH
30127: CALL_OW 324
30131: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30132: LD_EXP 70
30136: PUSH
30137: LD_EXP 79
30141: AND
30142: IFFALSE 30244
30144: GO 30146
30146: DISABLE
30147: LD_INT 0
30149: PPUSH
30150: PPUSH
// begin enable ;
30151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30152: LD_ADDR_VAR 0 2
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_OWVAR 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: LD_INT 34
30174: PUSH
30175: LD_INT 11
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 34
30184: PUSH
30185: LD_INT 30
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PPUSH
30201: CALL_OW 69
30205: ST_TO_ADDR
// if not tmp then
30206: LD_VAR 0 2
30210: NOT
30211: IFFALSE 30215
// exit ;
30213: GO 30244
// for i in tmp do
30215: LD_ADDR_VAR 0 1
30219: PUSH
30220: LD_VAR 0 2
30224: PUSH
30225: FOR_IN
30226: IFFALSE 30242
// begin SetLives ( i , 0 ) ;
30228: LD_VAR 0 1
30232: PPUSH
30233: LD_INT 0
30235: PPUSH
30236: CALL_OW 234
// end ;
30240: GO 30225
30242: POP
30243: POP
// end ;
30244: PPOPN 2
30246: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30247: LD_EXP 70
30251: PUSH
30252: LD_EXP 80
30256: AND
30257: IFFALSE 30277
30259: GO 30261
30261: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30262: LD_INT 32
30264: PPUSH
30265: LD_OWVAR 2
30269: PPUSH
30270: LD_INT 0
30272: PPUSH
30273: CALL_OW 324
30277: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30278: LD_EXP 70
30282: PUSH
30283: LD_EXP 81
30287: AND
30288: IFFALSE 30469
30290: GO 30292
30292: DISABLE
30293: LD_INT 0
30295: PPUSH
30296: PPUSH
30297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: LD_INT 22
30305: PUSH
30306: LD_OWVAR 2
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 33
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PPUSH
30329: CALL_OW 69
30333: ST_TO_ADDR
// if not tmp then
30334: LD_VAR 0 2
30338: NOT
30339: IFFALSE 30343
// exit ;
30341: GO 30469
// side := 0 ;
30343: LD_ADDR_VAR 0 3
30347: PUSH
30348: LD_INT 0
30350: ST_TO_ADDR
// for i := 1 to 8 do
30351: LD_ADDR_VAR 0 1
30355: PUSH
30356: DOUBLE
30357: LD_INT 1
30359: DEC
30360: ST_TO_ADDR
30361: LD_INT 8
30363: PUSH
30364: FOR_TO
30365: IFFALSE 30413
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30367: LD_OWVAR 2
30371: PUSH
30372: LD_VAR 0 1
30376: NONEQUAL
30377: PUSH
30378: LD_OWVAR 2
30382: PPUSH
30383: LD_VAR 0 1
30387: PPUSH
30388: CALL_OW 81
30392: PUSH
30393: LD_INT 2
30395: EQUAL
30396: AND
30397: IFFALSE 30411
// begin side := i ;
30399: LD_ADDR_VAR 0 3
30403: PUSH
30404: LD_VAR 0 1
30408: ST_TO_ADDR
// break ;
30409: GO 30413
// end ;
30411: GO 30364
30413: POP
30414: POP
// if not side then
30415: LD_VAR 0 3
30419: NOT
30420: IFFALSE 30424
// exit ;
30422: GO 30469
// for i := 1 to tmp do
30424: LD_ADDR_VAR 0 1
30428: PUSH
30429: DOUBLE
30430: LD_INT 1
30432: DEC
30433: ST_TO_ADDR
30434: LD_VAR 0 2
30438: PUSH
30439: FOR_TO
30440: IFFALSE 30467
// if Prob ( 60 ) then
30442: LD_INT 60
30444: PPUSH
30445: CALL_OW 13
30449: IFFALSE 30465
// SetSide ( i , side ) ;
30451: LD_VAR 0 1
30455: PPUSH
30456: LD_VAR 0 3
30460: PPUSH
30461: CALL_OW 235
30465: GO 30439
30467: POP
30468: POP
// end ;
30469: PPOPN 3
30471: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30472: LD_EXP 70
30476: PUSH
30477: LD_EXP 83
30481: AND
30482: IFFALSE 30601
30484: GO 30486
30486: DISABLE
30487: LD_INT 0
30489: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30490: LD_ADDR_VAR 0 1
30494: PUSH
30495: LD_INT 22
30497: PUSH
30498: LD_OWVAR 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 21
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 3
30519: PUSH
30520: LD_INT 23
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: PPUSH
30539: CALL_OW 69
30543: PUSH
30544: FOR_IN
30545: IFFALSE 30599
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30547: LD_VAR 0 1
30551: PPUSH
30552: CALL_OW 257
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: LD_INT 2
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: LD_INT 4
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: IN
30575: IFFALSE 30597
// SetClass ( un , rand ( 1 , 4 ) ) ;
30577: LD_VAR 0 1
30581: PPUSH
30582: LD_INT 1
30584: PPUSH
30585: LD_INT 4
30587: PPUSH
30588: CALL_OW 12
30592: PPUSH
30593: CALL_OW 336
30597: GO 30544
30599: POP
30600: POP
// end ;
30601: PPOPN 1
30603: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30604: LD_EXP 70
30608: PUSH
30609: LD_EXP 82
30613: AND
30614: IFFALSE 30693
30616: GO 30618
30618: DISABLE
30619: LD_INT 0
30621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30622: LD_ADDR_VAR 0 1
30626: PUSH
30627: LD_INT 22
30629: PUSH
30630: LD_OWVAR 2
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 21
30641: PUSH
30642: LD_INT 3
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PPUSH
30653: CALL_OW 69
30657: ST_TO_ADDR
// if not tmp then
30658: LD_VAR 0 1
30662: NOT
30663: IFFALSE 30667
// exit ;
30665: GO 30693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30667: LD_VAR 0 1
30671: PUSH
30672: LD_INT 1
30674: PPUSH
30675: LD_VAR 0 1
30679: PPUSH
30680: CALL_OW 12
30684: ARRAY
30685: PPUSH
30686: LD_INT 100
30688: PPUSH
30689: CALL_OW 234
// end ;
30693: PPOPN 1
30695: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30696: LD_EXP 70
30700: PUSH
30701: LD_EXP 84
30705: AND
30706: IFFALSE 30804
30708: GO 30710
30710: DISABLE
30711: LD_INT 0
30713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30714: LD_ADDR_VAR 0 1
30718: PUSH
30719: LD_INT 22
30721: PUSH
30722: LD_OWVAR 2
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 21
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PPUSH
30745: CALL_OW 69
30749: ST_TO_ADDR
// if not tmp then
30750: LD_VAR 0 1
30754: NOT
30755: IFFALSE 30759
// exit ;
30757: GO 30804
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30759: LD_VAR 0 1
30763: PUSH
30764: LD_INT 1
30766: PPUSH
30767: LD_VAR 0 1
30771: PPUSH
30772: CALL_OW 12
30776: ARRAY
30777: PPUSH
30778: LD_INT 1
30780: PPUSH
30781: LD_INT 4
30783: PPUSH
30784: CALL_OW 12
30788: PPUSH
30789: LD_INT 3000
30791: PPUSH
30792: LD_INT 9000
30794: PPUSH
30795: CALL_OW 12
30799: PPUSH
30800: CALL_OW 492
// end ;
30804: PPOPN 1
30806: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30807: LD_EXP 70
30811: PUSH
30812: LD_EXP 85
30816: AND
30817: IFFALSE 30837
30819: GO 30821
30821: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30822: LD_INT 1
30824: PPUSH
30825: LD_OWVAR 2
30829: PPUSH
30830: LD_INT 0
30832: PPUSH
30833: CALL_OW 324
30837: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30838: LD_EXP 70
30842: PUSH
30843: LD_EXP 86
30847: AND
30848: IFFALSE 30931
30850: GO 30852
30852: DISABLE
30853: LD_INT 0
30855: PPUSH
30856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30857: LD_ADDR_VAR 0 2
30861: PUSH
30862: LD_INT 22
30864: PUSH
30865: LD_OWVAR 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 21
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PPUSH
30888: CALL_OW 69
30892: ST_TO_ADDR
// if not tmp then
30893: LD_VAR 0 2
30897: NOT
30898: IFFALSE 30902
// exit ;
30900: GO 30931
// for i in tmp do
30902: LD_ADDR_VAR 0 1
30906: PUSH
30907: LD_VAR 0 2
30911: PUSH
30912: FOR_IN
30913: IFFALSE 30929
// SetBLevel ( i , 10 ) ;
30915: LD_VAR 0 1
30919: PPUSH
30920: LD_INT 10
30922: PPUSH
30923: CALL_OW 241
30927: GO 30912
30929: POP
30930: POP
// end ;
30931: PPOPN 2
30933: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30934: LD_EXP 70
30938: PUSH
30939: LD_EXP 87
30943: AND
30944: IFFALSE 31055
30946: GO 30948
30948: DISABLE
30949: LD_INT 0
30951: PPUSH
30952: PPUSH
30953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30954: LD_ADDR_VAR 0 3
30958: PUSH
30959: LD_INT 22
30961: PUSH
30962: LD_OWVAR 2
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 25
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 69
30989: ST_TO_ADDR
// if not tmp then
30990: LD_VAR 0 3
30994: NOT
30995: IFFALSE 30999
// exit ;
30997: GO 31055
// un := tmp [ rand ( 1 , tmp ) ] ;
30999: LD_ADDR_VAR 0 2
31003: PUSH
31004: LD_VAR 0 3
31008: PUSH
31009: LD_INT 1
31011: PPUSH
31012: LD_VAR 0 3
31016: PPUSH
31017: CALL_OW 12
31021: ARRAY
31022: ST_TO_ADDR
// if Crawls ( un ) then
31023: LD_VAR 0 2
31027: PPUSH
31028: CALL_OW 318
31032: IFFALSE 31043
// ComWalk ( un ) ;
31034: LD_VAR 0 2
31038: PPUSH
31039: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31043: LD_VAR 0 2
31047: PPUSH
31048: LD_INT 5
31050: PPUSH
31051: CALL_OW 336
// end ;
31055: PPOPN 3
31057: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
31058: LD_EXP 70
31062: PUSH
31063: LD_EXP 88
31067: AND
31068: PUSH
31069: LD_OWVAR 67
31073: PUSH
31074: LD_INT 3
31076: LESS
31077: AND
31078: IFFALSE 31097
31080: GO 31082
31082: DISABLE
// Difficulty := Difficulty + 1 ;
31083: LD_ADDR_OWVAR 67
31087: PUSH
31088: LD_OWVAR 67
31092: PUSH
31093: LD_INT 1
31095: PLUS
31096: ST_TO_ADDR
31097: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31098: LD_EXP 70
31102: PUSH
31103: LD_EXP 89
31107: AND
31108: IFFALSE 31211
31110: GO 31112
31112: DISABLE
31113: LD_INT 0
31115: PPUSH
// begin for i := 1 to 5 do
31116: LD_ADDR_VAR 0 1
31120: PUSH
31121: DOUBLE
31122: LD_INT 1
31124: DEC
31125: ST_TO_ADDR
31126: LD_INT 5
31128: PUSH
31129: FOR_TO
31130: IFFALSE 31209
// begin uc_nation := nation_nature ;
31132: LD_ADDR_OWVAR 21
31136: PUSH
31137: LD_INT 0
31139: ST_TO_ADDR
// uc_side := 0 ;
31140: LD_ADDR_OWVAR 20
31144: PUSH
31145: LD_INT 0
31147: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31148: LD_ADDR_OWVAR 29
31152: PUSH
31153: LD_INT 12
31155: PUSH
31156: LD_INT 12
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: ST_TO_ADDR
// hc_agressivity := 20 ;
31163: LD_ADDR_OWVAR 35
31167: PUSH
31168: LD_INT 20
31170: ST_TO_ADDR
// hc_class := class_tiger ;
31171: LD_ADDR_OWVAR 28
31175: PUSH
31176: LD_INT 14
31178: ST_TO_ADDR
// hc_gallery :=  ;
31179: LD_ADDR_OWVAR 33
31183: PUSH
31184: LD_STRING 
31186: ST_TO_ADDR
// hc_name :=  ;
31187: LD_ADDR_OWVAR 26
31191: PUSH
31192: LD_STRING 
31194: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31195: CALL_OW 44
31199: PPUSH
31200: LD_INT 0
31202: PPUSH
31203: CALL_OW 51
// end ;
31207: GO 31129
31209: POP
31210: POP
// end ;
31211: PPOPN 1
31213: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31214: LD_EXP 70
31218: PUSH
31219: LD_EXP 90
31223: AND
31224: IFFALSE 31233
31226: GO 31228
31228: DISABLE
// StreamSibBomb ;
31229: CALL 31234 0 0
31233: END
// export function StreamSibBomb ; var i , x , y ; begin
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
// result := false ;
31240: LD_ADDR_VAR 0 1
31244: PUSH
31245: LD_INT 0
31247: ST_TO_ADDR
// for i := 1 to 16 do
31248: LD_ADDR_VAR 0 2
31252: PUSH
31253: DOUBLE
31254: LD_INT 1
31256: DEC
31257: ST_TO_ADDR
31258: LD_INT 16
31260: PUSH
31261: FOR_TO
31262: IFFALSE 31461
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31264: LD_ADDR_VAR 0 3
31268: PUSH
31269: LD_INT 10
31271: PUSH
31272: LD_INT 20
31274: PUSH
31275: LD_INT 30
31277: PUSH
31278: LD_INT 40
31280: PUSH
31281: LD_INT 50
31283: PUSH
31284: LD_INT 60
31286: PUSH
31287: LD_INT 70
31289: PUSH
31290: LD_INT 80
31292: PUSH
31293: LD_INT 90
31295: PUSH
31296: LD_INT 100
31298: PUSH
31299: LD_INT 110
31301: PUSH
31302: LD_INT 120
31304: PUSH
31305: LD_INT 130
31307: PUSH
31308: LD_INT 140
31310: PUSH
31311: LD_INT 150
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: PPUSH
31334: LD_INT 15
31336: PPUSH
31337: CALL_OW 12
31341: ARRAY
31342: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31343: LD_ADDR_VAR 0 4
31347: PUSH
31348: LD_INT 10
31350: PUSH
31351: LD_INT 20
31353: PUSH
31354: LD_INT 30
31356: PUSH
31357: LD_INT 40
31359: PUSH
31360: LD_INT 50
31362: PUSH
31363: LD_INT 60
31365: PUSH
31366: LD_INT 70
31368: PUSH
31369: LD_INT 80
31371: PUSH
31372: LD_INT 90
31374: PUSH
31375: LD_INT 100
31377: PUSH
31378: LD_INT 110
31380: PUSH
31381: LD_INT 120
31383: PUSH
31384: LD_INT 130
31386: PUSH
31387: LD_INT 140
31389: PUSH
31390: LD_INT 150
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 1
31412: PPUSH
31413: LD_INT 15
31415: PPUSH
31416: CALL_OW 12
31420: ARRAY
31421: ST_TO_ADDR
// if ValidHex ( x , y ) then
31422: LD_VAR 0 3
31426: PPUSH
31427: LD_VAR 0 4
31431: PPUSH
31432: CALL_OW 488
31436: IFFALSE 31459
// begin result := [ x , y ] ;
31438: LD_ADDR_VAR 0 1
31442: PUSH
31443: LD_VAR 0 3
31447: PUSH
31448: LD_VAR 0 4
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: ST_TO_ADDR
// break ;
31457: GO 31461
// end ; end ;
31459: GO 31261
31461: POP
31462: POP
// if result then
31463: LD_VAR 0 1
31467: IFFALSE 31527
// begin ToLua ( playSibBomb() ) ;
31469: LD_STRING playSibBomb()
31471: PPUSH
31472: CALL_OW 559
// wait ( 0 0$14 ) ;
31476: LD_INT 490
31478: PPUSH
31479: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31483: LD_VAR 0 1
31487: PUSH
31488: LD_INT 1
31490: ARRAY
31491: PPUSH
31492: LD_VAR 0 1
31496: PUSH
31497: LD_INT 2
31499: ARRAY
31500: PPUSH
31501: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31505: LD_VAR 0 1
31509: PUSH
31510: LD_INT 1
31512: ARRAY
31513: PPUSH
31514: LD_VAR 0 1
31518: PUSH
31519: LD_INT 2
31521: ARRAY
31522: PPUSH
31523: CALL_OW 429
// end ; end ;
31527: LD_VAR 0 1
31531: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31532: LD_EXP 70
31536: PUSH
31537: LD_EXP 92
31541: AND
31542: IFFALSE 31554
31544: GO 31546
31546: DISABLE
// YouLost (  ) ;
31547: LD_STRING 
31549: PPUSH
31550: CALL_OW 104
31554: END
// every 0 0$1 trigger StreamModeActive and sFog do
31555: LD_EXP 70
31559: PUSH
31560: LD_EXP 91
31564: AND
31565: IFFALSE 31579
31567: GO 31569
31569: DISABLE
// FogOff ( your_side ) ;
31570: LD_OWVAR 2
31574: PPUSH
31575: CALL_OW 344
31579: END
// every 0 0$1 trigger StreamModeActive and sSun do
31580: LD_EXP 70
31584: PUSH
31585: LD_EXP 93
31589: AND
31590: IFFALSE 31618
31592: GO 31594
31594: DISABLE
// begin solar_recharge_percent := 0 ;
31595: LD_ADDR_OWVAR 79
31599: PUSH
31600: LD_INT 0
31602: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31603: LD_INT 10500
31605: PPUSH
31606: CALL_OW 67
// solar_recharge_percent := 100 ;
31610: LD_ADDR_OWVAR 79
31614: PUSH
31615: LD_INT 100
31617: ST_TO_ADDR
// end ;
31618: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31619: LD_EXP 70
31623: PUSH
31624: LD_EXP 94
31628: AND
31629: IFFALSE 31868
31631: GO 31633
31633: DISABLE
31634: LD_INT 0
31636: PPUSH
31637: PPUSH
31638: PPUSH
// begin tmp := [ ] ;
31639: LD_ADDR_VAR 0 3
31643: PUSH
31644: EMPTY
31645: ST_TO_ADDR
// for i := 1 to 6 do
31646: LD_ADDR_VAR 0 1
31650: PUSH
31651: DOUBLE
31652: LD_INT 1
31654: DEC
31655: ST_TO_ADDR
31656: LD_INT 6
31658: PUSH
31659: FOR_TO
31660: IFFALSE 31765
// begin uc_nation := nation_nature ;
31662: LD_ADDR_OWVAR 21
31666: PUSH
31667: LD_INT 0
31669: ST_TO_ADDR
// uc_side := 0 ;
31670: LD_ADDR_OWVAR 20
31674: PUSH
31675: LD_INT 0
31677: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31678: LD_ADDR_OWVAR 29
31682: PUSH
31683: LD_INT 12
31685: PUSH
31686: LD_INT 12
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: ST_TO_ADDR
// hc_agressivity := 20 ;
31693: LD_ADDR_OWVAR 35
31697: PUSH
31698: LD_INT 20
31700: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31701: LD_ADDR_OWVAR 28
31705: PUSH
31706: LD_INT 17
31708: ST_TO_ADDR
// hc_gallery :=  ;
31709: LD_ADDR_OWVAR 33
31713: PUSH
31714: LD_STRING 
31716: ST_TO_ADDR
// hc_name :=  ;
31717: LD_ADDR_OWVAR 26
31721: PUSH
31722: LD_STRING 
31724: ST_TO_ADDR
// un := CreateHuman ;
31725: LD_ADDR_VAR 0 2
31729: PUSH
31730: CALL_OW 44
31734: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31735: LD_VAR 0 2
31739: PPUSH
31740: LD_INT 1
31742: PPUSH
31743: CALL_OW 51
// tmp := tmp ^ un ;
31747: LD_ADDR_VAR 0 3
31751: PUSH
31752: LD_VAR 0 3
31756: PUSH
31757: LD_VAR 0 2
31761: ADD
31762: ST_TO_ADDR
// end ;
31763: GO 31659
31765: POP
31766: POP
// repeat wait ( 0 0$1 ) ;
31767: LD_INT 35
31769: PPUSH
31770: CALL_OW 67
// for un in tmp do
31774: LD_ADDR_VAR 0 2
31778: PUSH
31779: LD_VAR 0 3
31783: PUSH
31784: FOR_IN
31785: IFFALSE 31859
// begin if IsDead ( un ) then
31787: LD_VAR 0 2
31791: PPUSH
31792: CALL_OW 301
31796: IFFALSE 31816
// begin tmp := tmp diff un ;
31798: LD_ADDR_VAR 0 3
31802: PUSH
31803: LD_VAR 0 3
31807: PUSH
31808: LD_VAR 0 2
31812: DIFF
31813: ST_TO_ADDR
// continue ;
31814: GO 31784
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31816: LD_VAR 0 2
31820: PPUSH
31821: LD_INT 3
31823: PUSH
31824: LD_INT 22
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PPUSH
31838: CALL_OW 69
31842: PPUSH
31843: LD_VAR 0 2
31847: PPUSH
31848: CALL_OW 74
31852: PPUSH
31853: CALL_OW 115
// end ;
31857: GO 31784
31859: POP
31860: POP
// until not tmp ;
31861: LD_VAR 0 3
31865: NOT
31866: IFFALSE 31767
// end ;
31868: PPOPN 3
31870: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31871: LD_EXP 70
31875: PUSH
31876: LD_EXP 95
31880: AND
31881: IFFALSE 31935
31883: GO 31885
31885: DISABLE
// begin ToLua ( displayTroll(); ) ;
31886: LD_STRING displayTroll();
31888: PPUSH
31889: CALL_OW 559
// wait ( 3 3$00 ) ;
31893: LD_INT 6300
31895: PPUSH
31896: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31900: LD_STRING hideTroll();
31902: PPUSH
31903: CALL_OW 559
// wait ( 1 1$00 ) ;
31907: LD_INT 2100
31909: PPUSH
31910: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31914: LD_STRING displayTroll();
31916: PPUSH
31917: CALL_OW 559
// wait ( 1 1$00 ) ;
31921: LD_INT 2100
31923: PPUSH
31924: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31928: LD_STRING hideTroll();
31930: PPUSH
31931: CALL_OW 559
// end ;
31935: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31936: LD_EXP 70
31940: PUSH
31941: LD_EXP 96
31945: AND
31946: IFFALSE 32009
31948: GO 31950
31950: DISABLE
31951: LD_INT 0
31953: PPUSH
// begin p := 0 ;
31954: LD_ADDR_VAR 0 1
31958: PUSH
31959: LD_INT 0
31961: ST_TO_ADDR
// repeat game_speed := 1 ;
31962: LD_ADDR_OWVAR 65
31966: PUSH
31967: LD_INT 1
31969: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31970: LD_INT 35
31972: PPUSH
31973: CALL_OW 67
// p := p + 1 ;
31977: LD_ADDR_VAR 0 1
31981: PUSH
31982: LD_VAR 0 1
31986: PUSH
31987: LD_INT 1
31989: PLUS
31990: ST_TO_ADDR
// until p >= 60 ;
31991: LD_VAR 0 1
31995: PUSH
31996: LD_INT 60
31998: GREATEREQUAL
31999: IFFALSE 31962
// game_speed := 4 ;
32001: LD_ADDR_OWVAR 65
32005: PUSH
32006: LD_INT 4
32008: ST_TO_ADDR
// end ;
32009: PPOPN 1
32011: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32012: LD_EXP 70
32016: PUSH
32017: LD_EXP 97
32021: AND
32022: IFFALSE 32168
32024: GO 32026
32026: DISABLE
32027: LD_INT 0
32029: PPUSH
32030: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32031: LD_ADDR_VAR 0 1
32035: PUSH
32036: LD_INT 22
32038: PUSH
32039: LD_OWVAR 2
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 30
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 30
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PPUSH
32080: CALL_OW 69
32084: ST_TO_ADDR
// if not depot then
32085: LD_VAR 0 1
32089: NOT
32090: IFFALSE 32094
// exit ;
32092: GO 32168
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32094: LD_ADDR_VAR 0 2
32098: PUSH
32099: LD_VAR 0 1
32103: PUSH
32104: LD_INT 1
32106: PPUSH
32107: LD_VAR 0 1
32111: PPUSH
32112: CALL_OW 12
32116: ARRAY
32117: PPUSH
32118: CALL_OW 274
32122: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32123: LD_VAR 0 2
32127: PPUSH
32128: LD_INT 1
32130: PPUSH
32131: LD_INT 0
32133: PPUSH
32134: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32138: LD_VAR 0 2
32142: PPUSH
32143: LD_INT 2
32145: PPUSH
32146: LD_INT 0
32148: PPUSH
32149: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32153: LD_VAR 0 2
32157: PPUSH
32158: LD_INT 3
32160: PPUSH
32161: LD_INT 0
32163: PPUSH
32164: CALL_OW 277
// end ;
32168: PPOPN 2
32170: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32171: LD_EXP 70
32175: PUSH
32176: LD_EXP 98
32180: AND
32181: IFFALSE 32278
32183: GO 32185
32185: DISABLE
32186: LD_INT 0
32188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32189: LD_ADDR_VAR 0 1
32193: PUSH
32194: LD_INT 22
32196: PUSH
32197: LD_OWVAR 2
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 21
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 3
32218: PUSH
32219: LD_INT 23
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: PPUSH
32238: CALL_OW 69
32242: ST_TO_ADDR
// if not tmp then
32243: LD_VAR 0 1
32247: NOT
32248: IFFALSE 32252
// exit ;
32250: GO 32278
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32252: LD_VAR 0 1
32256: PUSH
32257: LD_INT 1
32259: PPUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 12
32269: ARRAY
32270: PPUSH
32271: LD_INT 200
32273: PPUSH
32274: CALL_OW 234
// end ;
32278: PPOPN 1
32280: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32281: LD_EXP 70
32285: PUSH
32286: LD_EXP 99
32290: AND
32291: IFFALSE 32370
32293: GO 32295
32295: DISABLE
32296: LD_INT 0
32298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32299: LD_ADDR_VAR 0 1
32303: PUSH
32304: LD_INT 22
32306: PUSH
32307: LD_OWVAR 2
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 21
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PPUSH
32330: CALL_OW 69
32334: ST_TO_ADDR
// if not tmp then
32335: LD_VAR 0 1
32339: NOT
32340: IFFALSE 32344
// exit ;
32342: GO 32370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32344: LD_VAR 0 1
32348: PUSH
32349: LD_INT 1
32351: PPUSH
32352: LD_VAR 0 1
32356: PPUSH
32357: CALL_OW 12
32361: ARRAY
32362: PPUSH
32363: LD_INT 60
32365: PPUSH
32366: CALL_OW 234
// end ;
32370: PPOPN 1
32372: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32373: LD_EXP 70
32377: PUSH
32378: LD_EXP 100
32382: AND
32383: IFFALSE 32482
32385: GO 32387
32387: DISABLE
32388: LD_INT 0
32390: PPUSH
32391: PPUSH
// begin enable ;
32392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32393: LD_ADDR_VAR 0 1
32397: PUSH
32398: LD_INT 22
32400: PUSH
32401: LD_OWVAR 2
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 61
32412: PUSH
32413: EMPTY
32414: LIST
32415: PUSH
32416: LD_INT 33
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: PPUSH
32431: CALL_OW 69
32435: ST_TO_ADDR
// if not tmp then
32436: LD_VAR 0 1
32440: NOT
32441: IFFALSE 32445
// exit ;
32443: GO 32482
// for i in tmp do
32445: LD_ADDR_VAR 0 2
32449: PUSH
32450: LD_VAR 0 1
32454: PUSH
32455: FOR_IN
32456: IFFALSE 32480
// if IsControledBy ( i ) then
32458: LD_VAR 0 2
32462: PPUSH
32463: CALL_OW 312
32467: IFFALSE 32478
// ComUnlink ( i ) ;
32469: LD_VAR 0 2
32473: PPUSH
32474: CALL_OW 136
32478: GO 32455
32480: POP
32481: POP
// end ;
32482: PPOPN 2
32484: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32485: LD_EXP 70
32489: PUSH
32490: LD_EXP 101
32494: AND
32495: IFFALSE 32635
32497: GO 32499
32499: DISABLE
32500: LD_INT 0
32502: PPUSH
32503: PPUSH
// begin ToLua ( displayPowell(); ) ;
32504: LD_STRING displayPowell();
32506: PPUSH
32507: CALL_OW 559
// uc_side := 0 ;
32511: LD_ADDR_OWVAR 20
32515: PUSH
32516: LD_INT 0
32518: ST_TO_ADDR
// uc_nation := 2 ;
32519: LD_ADDR_OWVAR 21
32523: PUSH
32524: LD_INT 2
32526: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32527: LD_ADDR_OWVAR 37
32531: PUSH
32532: LD_INT 14
32534: ST_TO_ADDR
// vc_engine := engine_siberite ;
32535: LD_ADDR_OWVAR 39
32539: PUSH
32540: LD_INT 3
32542: ST_TO_ADDR
// vc_control := control_apeman ;
32543: LD_ADDR_OWVAR 38
32547: PUSH
32548: LD_INT 5
32550: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32551: LD_ADDR_OWVAR 40
32555: PUSH
32556: LD_INT 29
32558: ST_TO_ADDR
// un := CreateVehicle ;
32559: LD_ADDR_VAR 0 2
32563: PUSH
32564: CALL_OW 45
32568: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32569: LD_VAR 0 2
32573: PPUSH
32574: LD_INT 1
32576: PPUSH
32577: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32581: LD_INT 35
32583: PPUSH
32584: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32588: LD_VAR 0 2
32592: PPUSH
32593: LD_INT 22
32595: PUSH
32596: LD_OWVAR 2
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PPUSH
32605: CALL_OW 69
32609: PPUSH
32610: LD_VAR 0 2
32614: PPUSH
32615: CALL_OW 74
32619: PPUSH
32620: CALL_OW 115
// until IsDead ( un ) ;
32624: LD_VAR 0 2
32628: PPUSH
32629: CALL_OW 301
32633: IFFALSE 32581
// end ;
32635: PPOPN 2
32637: END
// every 0 0$1 trigger StreamModeActive and sStu do
32638: LD_EXP 70
32642: PUSH
32643: LD_EXP 109
32647: AND
32648: IFFALSE 32664
32650: GO 32652
32652: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32653: LD_STRING displayStucuk();
32655: PPUSH
32656: CALL_OW 559
// ResetFog ;
32660: CALL_OW 335
// end ;
32664: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32665: LD_EXP 70
32669: PUSH
32670: LD_EXP 102
32674: AND
32675: IFFALSE 32816
32677: GO 32679
32679: DISABLE
32680: LD_INT 0
32682: PPUSH
32683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32684: LD_ADDR_VAR 0 2
32688: PUSH
32689: LD_INT 22
32691: PUSH
32692: LD_OWVAR 2
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 21
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PPUSH
32715: CALL_OW 69
32719: ST_TO_ADDR
// if not tmp then
32720: LD_VAR 0 2
32724: NOT
32725: IFFALSE 32729
// exit ;
32727: GO 32816
// un := tmp [ rand ( 1 , tmp ) ] ;
32729: LD_ADDR_VAR 0 1
32733: PUSH
32734: LD_VAR 0 2
32738: PUSH
32739: LD_INT 1
32741: PPUSH
32742: LD_VAR 0 2
32746: PPUSH
32747: CALL_OW 12
32751: ARRAY
32752: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32753: LD_VAR 0 1
32757: PPUSH
32758: LD_INT 0
32760: PPUSH
32761: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32765: LD_VAR 0 1
32769: PPUSH
32770: LD_OWVAR 3
32774: PUSH
32775: LD_VAR 0 1
32779: DIFF
32780: PPUSH
32781: LD_VAR 0 1
32785: PPUSH
32786: CALL_OW 74
32790: PPUSH
32791: CALL_OW 115
// wait ( 0 0$20 ) ;
32795: LD_INT 700
32797: PPUSH
32798: CALL_OW 67
// SetSide ( un , your_side ) ;
32802: LD_VAR 0 1
32806: PPUSH
32807: LD_OWVAR 2
32811: PPUSH
32812: CALL_OW 235
// end ;
32816: PPOPN 2
32818: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32819: LD_EXP 70
32823: PUSH
32824: LD_EXP 103
32828: AND
32829: IFFALSE 32935
32831: GO 32833
32833: DISABLE
32834: LD_INT 0
32836: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32837: LD_ADDR_VAR 0 1
32841: PUSH
32842: LD_INT 22
32844: PUSH
32845: LD_OWVAR 2
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: LD_INT 30
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 30
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PPUSH
32886: CALL_OW 69
32890: ST_TO_ADDR
// if not depot then
32891: LD_VAR 0 1
32895: NOT
32896: IFFALSE 32900
// exit ;
32898: GO 32935
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32900: LD_VAR 0 1
32904: PUSH
32905: LD_INT 1
32907: ARRAY
32908: PPUSH
32909: CALL_OW 250
32913: PPUSH
32914: LD_VAR 0 1
32918: PUSH
32919: LD_INT 1
32921: ARRAY
32922: PPUSH
32923: CALL_OW 251
32927: PPUSH
32928: LD_INT 70
32930: PPUSH
32931: CALL_OW 495
// end ;
32935: PPOPN 1
32937: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32938: LD_EXP 70
32942: PUSH
32943: LD_EXP 104
32947: AND
32948: IFFALSE 33159
32950: GO 32952
32952: DISABLE
32953: LD_INT 0
32955: PPUSH
32956: PPUSH
32957: PPUSH
32958: PPUSH
32959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32960: LD_ADDR_VAR 0 5
32964: PUSH
32965: LD_INT 22
32967: PUSH
32968: LD_OWVAR 2
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 21
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PPUSH
32991: CALL_OW 69
32995: ST_TO_ADDR
// if not tmp then
32996: LD_VAR 0 5
33000: NOT
33001: IFFALSE 33005
// exit ;
33003: GO 33159
// for i in tmp do
33005: LD_ADDR_VAR 0 1
33009: PUSH
33010: LD_VAR 0 5
33014: PUSH
33015: FOR_IN
33016: IFFALSE 33157
// begin d := rand ( 0 , 5 ) ;
33018: LD_ADDR_VAR 0 4
33022: PUSH
33023: LD_INT 0
33025: PPUSH
33026: LD_INT 5
33028: PPUSH
33029: CALL_OW 12
33033: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33034: LD_ADDR_VAR 0 2
33038: PUSH
33039: LD_VAR 0 1
33043: PPUSH
33044: CALL_OW 250
33048: PPUSH
33049: LD_VAR 0 4
33053: PPUSH
33054: LD_INT 3
33056: PPUSH
33057: LD_INT 12
33059: PPUSH
33060: CALL_OW 12
33064: PPUSH
33065: CALL_OW 272
33069: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33070: LD_ADDR_VAR 0 3
33074: PUSH
33075: LD_VAR 0 1
33079: PPUSH
33080: CALL_OW 251
33084: PPUSH
33085: LD_VAR 0 4
33089: PPUSH
33090: LD_INT 3
33092: PPUSH
33093: LD_INT 12
33095: PPUSH
33096: CALL_OW 12
33100: PPUSH
33101: CALL_OW 273
33105: ST_TO_ADDR
// if ValidHex ( x , y ) then
33106: LD_VAR 0 2
33110: PPUSH
33111: LD_VAR 0 3
33115: PPUSH
33116: CALL_OW 488
33120: IFFALSE 33155
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33122: LD_VAR 0 1
33126: PPUSH
33127: LD_VAR 0 2
33131: PPUSH
33132: LD_VAR 0 3
33136: PPUSH
33137: LD_INT 3
33139: PPUSH
33140: LD_INT 6
33142: PPUSH
33143: CALL_OW 12
33147: PPUSH
33148: LD_INT 1
33150: PPUSH
33151: CALL_OW 483
// end ;
33155: GO 33015
33157: POP
33158: POP
// end ;
33159: PPOPN 5
33161: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33162: LD_EXP 70
33166: PUSH
33167: LD_EXP 105
33171: AND
33172: IFFALSE 33266
33174: GO 33176
33176: DISABLE
33177: LD_INT 0
33179: PPUSH
33180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33181: LD_ADDR_VAR 0 2
33185: PUSH
33186: LD_INT 22
33188: PUSH
33189: LD_OWVAR 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 32
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 21
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: PPUSH
33223: CALL_OW 69
33227: ST_TO_ADDR
// if not tmp then
33228: LD_VAR 0 2
33232: NOT
33233: IFFALSE 33237
// exit ;
33235: GO 33266
// for i in tmp do
33237: LD_ADDR_VAR 0 1
33241: PUSH
33242: LD_VAR 0 2
33246: PUSH
33247: FOR_IN
33248: IFFALSE 33264
// SetFuel ( i , 0 ) ;
33250: LD_VAR 0 1
33254: PPUSH
33255: LD_INT 0
33257: PPUSH
33258: CALL_OW 240
33262: GO 33247
33264: POP
33265: POP
// end ;
33266: PPOPN 2
33268: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33269: LD_EXP 70
33273: PUSH
33274: LD_EXP 106
33278: AND
33279: IFFALSE 33345
33281: GO 33283
33283: DISABLE
33284: LD_INT 0
33286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33287: LD_ADDR_VAR 0 1
33291: PUSH
33292: LD_INT 22
33294: PUSH
33295: LD_OWVAR 2
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 30
33306: PUSH
33307: LD_INT 29
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PPUSH
33318: CALL_OW 69
33322: ST_TO_ADDR
// if not tmp then
33323: LD_VAR 0 1
33327: NOT
33328: IFFALSE 33332
// exit ;
33330: GO 33345
// DestroyUnit ( tmp [ 1 ] ) ;
33332: LD_VAR 0 1
33336: PUSH
33337: LD_INT 1
33339: ARRAY
33340: PPUSH
33341: CALL_OW 65
// end ;
33345: PPOPN 1
33347: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33348: LD_EXP 70
33352: PUSH
33353: LD_EXP 108
33357: AND
33358: IFFALSE 33487
33360: GO 33362
33362: DISABLE
33363: LD_INT 0
33365: PPUSH
// begin uc_side := 0 ;
33366: LD_ADDR_OWVAR 20
33370: PUSH
33371: LD_INT 0
33373: ST_TO_ADDR
// uc_nation := nation_arabian ;
33374: LD_ADDR_OWVAR 21
33378: PUSH
33379: LD_INT 2
33381: ST_TO_ADDR
// hc_gallery :=  ;
33382: LD_ADDR_OWVAR 33
33386: PUSH
33387: LD_STRING 
33389: ST_TO_ADDR
// hc_name :=  ;
33390: LD_ADDR_OWVAR 26
33394: PUSH
33395: LD_STRING 
33397: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33398: LD_INT 1
33400: PPUSH
33401: LD_INT 11
33403: PPUSH
33404: LD_INT 10
33406: PPUSH
33407: CALL_OW 380
// un := CreateHuman ;
33411: LD_ADDR_VAR 0 1
33415: PUSH
33416: CALL_OW 44
33420: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33421: LD_VAR 0 1
33425: PPUSH
33426: LD_INT 1
33428: PPUSH
33429: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33433: LD_INT 35
33435: PPUSH
33436: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33440: LD_VAR 0 1
33444: PPUSH
33445: LD_INT 22
33447: PUSH
33448: LD_OWVAR 2
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PPUSH
33457: CALL_OW 69
33461: PPUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 74
33471: PPUSH
33472: CALL_OW 115
// until IsDead ( un ) ;
33476: LD_VAR 0 1
33480: PPUSH
33481: CALL_OW 301
33485: IFFALSE 33433
// end ;
33487: PPOPN 1
33489: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33490: LD_EXP 70
33494: PUSH
33495: LD_EXP 110
33499: AND
33500: IFFALSE 33512
33502: GO 33504
33504: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33505: LD_STRING earthquake(getX(game), 0, 32)
33507: PPUSH
33508: CALL_OW 559
33512: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33513: LD_EXP 70
33517: PUSH
33518: LD_EXP 111
33522: AND
33523: IFFALSE 33614
33525: GO 33527
33527: DISABLE
33528: LD_INT 0
33530: PPUSH
// begin enable ;
33531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33532: LD_ADDR_VAR 0 1
33536: PUSH
33537: LD_INT 22
33539: PUSH
33540: LD_OWVAR 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 21
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 33
33561: PUSH
33562: LD_INT 3
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: PPUSH
33574: CALL_OW 69
33578: ST_TO_ADDR
// if not tmp then
33579: LD_VAR 0 1
33583: NOT
33584: IFFALSE 33588
// exit ;
33586: GO 33614
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33588: LD_VAR 0 1
33592: PUSH
33593: LD_INT 1
33595: PPUSH
33596: LD_VAR 0 1
33600: PPUSH
33601: CALL_OW 12
33605: ARRAY
33606: PPUSH
33607: LD_INT 1
33609: PPUSH
33610: CALL_OW 234
// end ;
33614: PPOPN 1
33616: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33617: LD_EXP 70
33621: PUSH
33622: LD_EXP 112
33626: AND
33627: IFFALSE 33768
33629: GO 33631
33631: DISABLE
33632: LD_INT 0
33634: PPUSH
33635: PPUSH
33636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33637: LD_ADDR_VAR 0 3
33641: PUSH
33642: LD_INT 22
33644: PUSH
33645: LD_OWVAR 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 25
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PPUSH
33668: CALL_OW 69
33672: ST_TO_ADDR
// if not tmp then
33673: LD_VAR 0 3
33677: NOT
33678: IFFALSE 33682
// exit ;
33680: GO 33768
// un := tmp [ rand ( 1 , tmp ) ] ;
33682: LD_ADDR_VAR 0 2
33686: PUSH
33687: LD_VAR 0 3
33691: PUSH
33692: LD_INT 1
33694: PPUSH
33695: LD_VAR 0 3
33699: PPUSH
33700: CALL_OW 12
33704: ARRAY
33705: ST_TO_ADDR
// if Crawls ( un ) then
33706: LD_VAR 0 2
33710: PPUSH
33711: CALL_OW 318
33715: IFFALSE 33726
// ComWalk ( un ) ;
33717: LD_VAR 0 2
33721: PPUSH
33722: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33726: LD_VAR 0 2
33730: PPUSH
33731: LD_INT 9
33733: PPUSH
33734: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33738: LD_INT 28
33740: PPUSH
33741: LD_OWVAR 2
33745: PPUSH
33746: LD_INT 2
33748: PPUSH
33749: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33753: LD_INT 29
33755: PPUSH
33756: LD_OWVAR 2
33760: PPUSH
33761: LD_INT 2
33763: PPUSH
33764: CALL_OW 322
// end ;
33768: PPOPN 3
33770: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33771: LD_EXP 70
33775: PUSH
33776: LD_EXP 113
33780: AND
33781: IFFALSE 33892
33783: GO 33785
33785: DISABLE
33786: LD_INT 0
33788: PPUSH
33789: PPUSH
33790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_INT 22
33798: PUSH
33799: LD_OWVAR 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 25
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PPUSH
33822: CALL_OW 69
33826: ST_TO_ADDR
// if not tmp then
33827: LD_VAR 0 3
33831: NOT
33832: IFFALSE 33836
// exit ;
33834: GO 33892
// un := tmp [ rand ( 1 , tmp ) ] ;
33836: LD_ADDR_VAR 0 2
33840: PUSH
33841: LD_VAR 0 3
33845: PUSH
33846: LD_INT 1
33848: PPUSH
33849: LD_VAR 0 3
33853: PPUSH
33854: CALL_OW 12
33858: ARRAY
33859: ST_TO_ADDR
// if Crawls ( un ) then
33860: LD_VAR 0 2
33864: PPUSH
33865: CALL_OW 318
33869: IFFALSE 33880
// ComWalk ( un ) ;
33871: LD_VAR 0 2
33875: PPUSH
33876: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33880: LD_VAR 0 2
33884: PPUSH
33885: LD_INT 8
33887: PPUSH
33888: CALL_OW 336
// end ;
33892: PPOPN 3
33894: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33895: LD_EXP 70
33899: PUSH
33900: LD_EXP 114
33904: AND
33905: IFFALSE 34049
33907: GO 33909
33909: DISABLE
33910: LD_INT 0
33912: PPUSH
33913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33914: LD_ADDR_VAR 0 2
33918: PUSH
33919: LD_INT 22
33921: PUSH
33922: LD_OWVAR 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 21
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 34
33946: PUSH
33947: LD_INT 12
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 34
33956: PUSH
33957: LD_INT 51
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 34
33966: PUSH
33967: LD_INT 32
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: PPUSH
33985: CALL_OW 69
33989: ST_TO_ADDR
// if not tmp then
33990: LD_VAR 0 2
33994: NOT
33995: IFFALSE 33999
// exit ;
33997: GO 34049
// for i in tmp do
33999: LD_ADDR_VAR 0 1
34003: PUSH
34004: LD_VAR 0 2
34008: PUSH
34009: FOR_IN
34010: IFFALSE 34047
// if GetCargo ( i , mat_artifact ) = 0 then
34012: LD_VAR 0 1
34016: PPUSH
34017: LD_INT 4
34019: PPUSH
34020: CALL_OW 289
34024: PUSH
34025: LD_INT 0
34027: EQUAL
34028: IFFALSE 34045
// SetCargo ( i , mat_siberit , 100 ) ;
34030: LD_VAR 0 1
34034: PPUSH
34035: LD_INT 3
34037: PPUSH
34038: LD_INT 100
34040: PPUSH
34041: CALL_OW 290
34045: GO 34009
34047: POP
34048: POP
// end ;
34049: PPOPN 2
34051: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34052: LD_EXP 70
34056: PUSH
34057: LD_EXP 115
34061: AND
34062: IFFALSE 34245
34064: GO 34066
34066: DISABLE
34067: LD_INT 0
34069: PPUSH
34070: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34071: LD_ADDR_VAR 0 2
34075: PUSH
34076: LD_INT 22
34078: PUSH
34079: LD_OWVAR 2
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PPUSH
34088: CALL_OW 69
34092: ST_TO_ADDR
// if not tmp then
34093: LD_VAR 0 2
34097: NOT
34098: IFFALSE 34102
// exit ;
34100: GO 34245
// for i := 1 to 2 do
34102: LD_ADDR_VAR 0 1
34106: PUSH
34107: DOUBLE
34108: LD_INT 1
34110: DEC
34111: ST_TO_ADDR
34112: LD_INT 2
34114: PUSH
34115: FOR_TO
34116: IFFALSE 34243
// begin uc_side := your_side ;
34118: LD_ADDR_OWVAR 20
34122: PUSH
34123: LD_OWVAR 2
34127: ST_TO_ADDR
// uc_nation := nation_american ;
34128: LD_ADDR_OWVAR 21
34132: PUSH
34133: LD_INT 1
34135: ST_TO_ADDR
// vc_chassis := us_morphling ;
34136: LD_ADDR_OWVAR 37
34140: PUSH
34141: LD_INT 5
34143: ST_TO_ADDR
// vc_engine := engine_siberite ;
34144: LD_ADDR_OWVAR 39
34148: PUSH
34149: LD_INT 3
34151: ST_TO_ADDR
// vc_control := control_computer ;
34152: LD_ADDR_OWVAR 38
34156: PUSH
34157: LD_INT 3
34159: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34160: LD_ADDR_OWVAR 40
34164: PUSH
34165: LD_INT 10
34167: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34168: LD_VAR 0 2
34172: PUSH
34173: LD_INT 1
34175: ARRAY
34176: PPUSH
34177: CALL_OW 310
34181: NOT
34182: IFFALSE 34229
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34184: CALL_OW 45
34188: PPUSH
34189: LD_VAR 0 2
34193: PUSH
34194: LD_INT 1
34196: ARRAY
34197: PPUSH
34198: CALL_OW 250
34202: PPUSH
34203: LD_VAR 0 2
34207: PUSH
34208: LD_INT 1
34210: ARRAY
34211: PPUSH
34212: CALL_OW 251
34216: PPUSH
34217: LD_INT 12
34219: PPUSH
34220: LD_INT 1
34222: PPUSH
34223: CALL_OW 50
34227: GO 34241
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34229: CALL_OW 45
34233: PPUSH
34234: LD_INT 1
34236: PPUSH
34237: CALL_OW 51
// end ;
34241: GO 34115
34243: POP
34244: POP
// end ;
34245: PPOPN 2
34247: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34248: LD_EXP 70
34252: PUSH
34253: LD_EXP 116
34257: AND
34258: IFFALSE 34480
34260: GO 34262
34262: DISABLE
34263: LD_INT 0
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34271: LD_ADDR_VAR 0 6
34275: PUSH
34276: LD_INT 22
34278: PUSH
34279: LD_OWVAR 2
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 21
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: LD_INT 23
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: LIST
34319: PPUSH
34320: CALL_OW 69
34324: ST_TO_ADDR
// if not tmp then
34325: LD_VAR 0 6
34329: NOT
34330: IFFALSE 34334
// exit ;
34332: GO 34480
// s1 := rand ( 1 , 4 ) ;
34334: LD_ADDR_VAR 0 2
34338: PUSH
34339: LD_INT 1
34341: PPUSH
34342: LD_INT 4
34344: PPUSH
34345: CALL_OW 12
34349: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34350: LD_ADDR_VAR 0 4
34354: PUSH
34355: LD_VAR 0 6
34359: PUSH
34360: LD_INT 1
34362: ARRAY
34363: PPUSH
34364: LD_VAR 0 2
34368: PPUSH
34369: CALL_OW 259
34373: ST_TO_ADDR
// if s1 = 1 then
34374: LD_VAR 0 2
34378: PUSH
34379: LD_INT 1
34381: EQUAL
34382: IFFALSE 34402
// s2 := rand ( 2 , 4 ) else
34384: LD_ADDR_VAR 0 3
34388: PUSH
34389: LD_INT 2
34391: PPUSH
34392: LD_INT 4
34394: PPUSH
34395: CALL_OW 12
34399: ST_TO_ADDR
34400: GO 34410
// s2 := 1 ;
34402: LD_ADDR_VAR 0 3
34406: PUSH
34407: LD_INT 1
34409: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34410: LD_ADDR_VAR 0 5
34414: PUSH
34415: LD_VAR 0 6
34419: PUSH
34420: LD_INT 1
34422: ARRAY
34423: PPUSH
34424: LD_VAR 0 3
34428: PPUSH
34429: CALL_OW 259
34433: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34434: LD_VAR 0 6
34438: PUSH
34439: LD_INT 1
34441: ARRAY
34442: PPUSH
34443: LD_VAR 0 2
34447: PPUSH
34448: LD_VAR 0 5
34452: PPUSH
34453: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34457: LD_VAR 0 6
34461: PUSH
34462: LD_INT 1
34464: ARRAY
34465: PPUSH
34466: LD_VAR 0 3
34470: PPUSH
34471: LD_VAR 0 4
34475: PPUSH
34476: CALL_OW 237
// end ;
34480: PPOPN 6
34482: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34483: LD_EXP 70
34487: PUSH
34488: LD_EXP 117
34492: AND
34493: IFFALSE 34572
34495: GO 34497
34497: DISABLE
34498: LD_INT 0
34500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34501: LD_ADDR_VAR 0 1
34505: PUSH
34506: LD_INT 22
34508: PUSH
34509: LD_OWVAR 2
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 30
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PPUSH
34532: CALL_OW 69
34536: ST_TO_ADDR
// if not tmp then
34537: LD_VAR 0 1
34541: NOT
34542: IFFALSE 34546
// exit ;
34544: GO 34572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34546: LD_VAR 0 1
34550: PUSH
34551: LD_INT 1
34553: PPUSH
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 12
34563: ARRAY
34564: PPUSH
34565: LD_INT 1
34567: PPUSH
34568: CALL_OW 234
// end ;
34572: PPOPN 1
34574: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34575: LD_EXP 70
34579: PUSH
34580: LD_EXP 118
34584: AND
34585: IFFALSE 34697
34587: GO 34589
34589: DISABLE
34590: LD_INT 0
34592: PPUSH
34593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34594: LD_ADDR_VAR 0 2
34598: PUSH
34599: LD_INT 22
34601: PUSH
34602: LD_OWVAR 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: LD_INT 30
34616: PUSH
34617: LD_INT 27
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 30
34626: PUSH
34627: LD_INT 26
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 30
34636: PUSH
34637: LD_INT 28
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PPUSH
34654: CALL_OW 69
34658: ST_TO_ADDR
// if not tmp then
34659: LD_VAR 0 2
34663: NOT
34664: IFFALSE 34668
// exit ;
34666: GO 34697
// for i in tmp do
34668: LD_ADDR_VAR 0 1
34672: PUSH
34673: LD_VAR 0 2
34677: PUSH
34678: FOR_IN
34679: IFFALSE 34695
// SetLives ( i , 1 ) ;
34681: LD_VAR 0 1
34685: PPUSH
34686: LD_INT 1
34688: PPUSH
34689: CALL_OW 234
34693: GO 34678
34695: POP
34696: POP
// end ;
34697: PPOPN 2
34699: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34700: LD_EXP 70
34704: PUSH
34705: LD_EXP 119
34709: AND
34710: IFFALSE 34984
34712: GO 34714
34714: DISABLE
34715: LD_INT 0
34717: PPUSH
34718: PPUSH
34719: PPUSH
// begin i := rand ( 1 , 7 ) ;
34720: LD_ADDR_VAR 0 1
34724: PUSH
34725: LD_INT 1
34727: PPUSH
34728: LD_INT 7
34730: PPUSH
34731: CALL_OW 12
34735: ST_TO_ADDR
// case i of 1 :
34736: LD_VAR 0 1
34740: PUSH
34741: LD_INT 1
34743: DOUBLE
34744: EQUAL
34745: IFTRUE 34749
34747: GO 34759
34749: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34750: LD_STRING earthquake(getX(game), 0, 32)
34752: PPUSH
34753: CALL_OW 559
34757: GO 34984
34759: LD_INT 2
34761: DOUBLE
34762: EQUAL
34763: IFTRUE 34767
34765: GO 34781
34767: POP
// begin ToLua ( displayStucuk(); ) ;
34768: LD_STRING displayStucuk();
34770: PPUSH
34771: CALL_OW 559
// ResetFog ;
34775: CALL_OW 335
// end ; 3 :
34779: GO 34984
34781: LD_INT 3
34783: DOUBLE
34784: EQUAL
34785: IFTRUE 34789
34787: GO 34893
34789: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34790: LD_ADDR_VAR 0 2
34794: PUSH
34795: LD_INT 22
34797: PUSH
34798: LD_OWVAR 2
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 25
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PPUSH
34821: CALL_OW 69
34825: ST_TO_ADDR
// if not tmp then
34826: LD_VAR 0 2
34830: NOT
34831: IFFALSE 34835
// exit ;
34833: GO 34984
// un := tmp [ rand ( 1 , tmp ) ] ;
34835: LD_ADDR_VAR 0 3
34839: PUSH
34840: LD_VAR 0 2
34844: PUSH
34845: LD_INT 1
34847: PPUSH
34848: LD_VAR 0 2
34852: PPUSH
34853: CALL_OW 12
34857: ARRAY
34858: ST_TO_ADDR
// if Crawls ( un ) then
34859: LD_VAR 0 3
34863: PPUSH
34864: CALL_OW 318
34868: IFFALSE 34879
// ComWalk ( un ) ;
34870: LD_VAR 0 3
34874: PPUSH
34875: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34879: LD_VAR 0 3
34883: PPUSH
34884: LD_INT 8
34886: PPUSH
34887: CALL_OW 336
// end ; 4 :
34891: GO 34984
34893: LD_INT 4
34895: DOUBLE
34896: EQUAL
34897: IFTRUE 34901
34899: GO 34962
34901: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34902: LD_ADDR_VAR 0 2
34906: PUSH
34907: LD_INT 22
34909: PUSH
34910: LD_OWVAR 2
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 30
34921: PUSH
34922: LD_INT 29
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PPUSH
34933: CALL_OW 69
34937: ST_TO_ADDR
// if not tmp then
34938: LD_VAR 0 2
34942: NOT
34943: IFFALSE 34947
// exit ;
34945: GO 34984
// DestroyUnit ( tmp [ 1 ] ) ;
34947: LD_VAR 0 2
34951: PUSH
34952: LD_INT 1
34954: ARRAY
34955: PPUSH
34956: CALL_OW 65
// end ; 5 .. 7 :
34960: GO 34984
34962: LD_INT 5
34964: DOUBLE
34965: GREATEREQUAL
34966: IFFALSE 34974
34968: LD_INT 7
34970: DOUBLE
34971: LESSEQUAL
34972: IFTRUE 34976
34974: GO 34983
34976: POP
// StreamSibBomb ; end ;
34977: CALL 31234 0 0
34981: GO 34984
34983: POP
// end ;
34984: PPOPN 3
34986: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34987: LD_EXP 70
34991: PUSH
34992: LD_EXP 120
34996: AND
34997: IFFALSE 35153
34999: GO 35001
35001: DISABLE
35002: LD_INT 0
35004: PPUSH
35005: PPUSH
35006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35007: LD_ADDR_VAR 0 2
35011: PUSH
35012: LD_INT 81
35014: PUSH
35015: LD_OWVAR 2
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 21
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 21
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PPUSH
35056: CALL_OW 69
35060: ST_TO_ADDR
// if not tmp then
35061: LD_VAR 0 2
35065: NOT
35066: IFFALSE 35070
// exit ;
35068: GO 35153
// p := 0 ;
35070: LD_ADDR_VAR 0 3
35074: PUSH
35075: LD_INT 0
35077: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35078: LD_INT 35
35080: PPUSH
35081: CALL_OW 67
// p := p + 1 ;
35085: LD_ADDR_VAR 0 3
35089: PUSH
35090: LD_VAR 0 3
35094: PUSH
35095: LD_INT 1
35097: PLUS
35098: ST_TO_ADDR
// for i in tmp do
35099: LD_ADDR_VAR 0 1
35103: PUSH
35104: LD_VAR 0 2
35108: PUSH
35109: FOR_IN
35110: IFFALSE 35141
// if GetLives ( i ) < 1000 then
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 256
35121: PUSH
35122: LD_INT 1000
35124: LESS
35125: IFFALSE 35139
// SetLives ( i , 1000 ) ;
35127: LD_VAR 0 1
35131: PPUSH
35132: LD_INT 1000
35134: PPUSH
35135: CALL_OW 234
35139: GO 35109
35141: POP
35142: POP
// until p > 20 ;
35143: LD_VAR 0 3
35147: PUSH
35148: LD_INT 20
35150: GREATER
35151: IFFALSE 35078
// end ;
35153: PPOPN 3
35155: END
// every 0 0$1 trigger StreamModeActive and sTime do
35156: LD_EXP 70
35160: PUSH
35161: LD_EXP 121
35165: AND
35166: IFFALSE 35201
35168: GO 35170
35170: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35171: LD_INT 28
35173: PPUSH
35174: LD_OWVAR 2
35178: PPUSH
35179: LD_INT 2
35181: PPUSH
35182: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35186: LD_INT 30
35188: PPUSH
35189: LD_OWVAR 2
35193: PPUSH
35194: LD_INT 2
35196: PPUSH
35197: CALL_OW 322
// end ;
35201: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35202: LD_EXP 70
35206: PUSH
35207: LD_EXP 122
35211: AND
35212: IFFALSE 35333
35214: GO 35216
35216: DISABLE
35217: LD_INT 0
35219: PPUSH
35220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35221: LD_ADDR_VAR 0 2
35225: PUSH
35226: LD_INT 22
35228: PUSH
35229: LD_OWVAR 2
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 21
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 3
35250: PUSH
35251: LD_INT 23
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: PPUSH
35270: CALL_OW 69
35274: ST_TO_ADDR
// if not tmp then
35275: LD_VAR 0 2
35279: NOT
35280: IFFALSE 35284
// exit ;
35282: GO 35333
// for i in tmp do
35284: LD_ADDR_VAR 0 1
35288: PUSH
35289: LD_VAR 0 2
35293: PUSH
35294: FOR_IN
35295: IFFALSE 35331
// begin if Crawls ( i ) then
35297: LD_VAR 0 1
35301: PPUSH
35302: CALL_OW 318
35306: IFFALSE 35317
// ComWalk ( i ) ;
35308: LD_VAR 0 1
35312: PPUSH
35313: CALL_OW 138
// SetClass ( i , 2 ) ;
35317: LD_VAR 0 1
35321: PPUSH
35322: LD_INT 2
35324: PPUSH
35325: CALL_OW 336
// end ;
35329: GO 35294
35331: POP
35332: POP
// end ;
35333: PPOPN 2
35335: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35336: LD_EXP 70
35340: PUSH
35341: LD_EXP 123
35345: AND
35346: IFFALSE 35627
35348: GO 35350
35350: DISABLE
35351: LD_INT 0
35353: PPUSH
35354: PPUSH
35355: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35356: LD_OWVAR 2
35360: PPUSH
35361: LD_INT 9
35363: PPUSH
35364: LD_INT 1
35366: PPUSH
35367: LD_INT 1
35369: PPUSH
35370: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35374: LD_INT 9
35376: PPUSH
35377: LD_OWVAR 2
35381: PPUSH
35382: CALL_OW 343
// uc_side := 9 ;
35386: LD_ADDR_OWVAR 20
35390: PUSH
35391: LD_INT 9
35393: ST_TO_ADDR
// uc_nation := 2 ;
35394: LD_ADDR_OWVAR 21
35398: PUSH
35399: LD_INT 2
35401: ST_TO_ADDR
// hc_name := Dark Warrior ;
35402: LD_ADDR_OWVAR 26
35406: PUSH
35407: LD_STRING Dark Warrior
35409: ST_TO_ADDR
// hc_gallery :=  ;
35410: LD_ADDR_OWVAR 33
35414: PUSH
35415: LD_STRING 
35417: ST_TO_ADDR
// hc_noskilllimit := true ;
35418: LD_ADDR_OWVAR 76
35422: PUSH
35423: LD_INT 1
35425: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35426: LD_ADDR_OWVAR 31
35430: PUSH
35431: LD_INT 30
35433: PUSH
35434: LD_INT 30
35436: PUSH
35437: LD_INT 30
35439: PUSH
35440: LD_INT 30
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: ST_TO_ADDR
// un := CreateHuman ;
35449: LD_ADDR_VAR 0 3
35453: PUSH
35454: CALL_OW 44
35458: ST_TO_ADDR
// hc_noskilllimit := false ;
35459: LD_ADDR_OWVAR 76
35463: PUSH
35464: LD_INT 0
35466: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35467: LD_VAR 0 3
35471: PPUSH
35472: LD_INT 1
35474: PPUSH
35475: CALL_OW 51
// p := 0 ;
35479: LD_ADDR_VAR 0 2
35483: PUSH
35484: LD_INT 0
35486: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35487: LD_INT 35
35489: PPUSH
35490: CALL_OW 67
// p := p + 1 ;
35494: LD_ADDR_VAR 0 2
35498: PUSH
35499: LD_VAR 0 2
35503: PUSH
35504: LD_INT 1
35506: PLUS
35507: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35508: LD_VAR 0 3
35512: PPUSH
35513: CALL_OW 256
35517: PUSH
35518: LD_INT 1000
35520: LESS
35521: IFFALSE 35535
// SetLives ( un , 1000 ) ;
35523: LD_VAR 0 3
35527: PPUSH
35528: LD_INT 1000
35530: PPUSH
35531: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35535: LD_VAR 0 3
35539: PPUSH
35540: LD_INT 81
35542: PUSH
35543: LD_OWVAR 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 91
35554: PUSH
35555: LD_VAR 0 3
35559: PUSH
35560: LD_INT 30
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PPUSH
35572: CALL_OW 69
35576: PPUSH
35577: LD_VAR 0 3
35581: PPUSH
35582: CALL_OW 74
35586: PPUSH
35587: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35591: LD_VAR 0 2
35595: PUSH
35596: LD_INT 60
35598: GREATER
35599: PUSH
35600: LD_VAR 0 3
35604: PPUSH
35605: CALL_OW 301
35609: OR
35610: IFFALSE 35487
// if un then
35612: LD_VAR 0 3
35616: IFFALSE 35627
// RemoveUnit ( un ) ;
35618: LD_VAR 0 3
35622: PPUSH
35623: CALL_OW 64
// end ;
35627: PPOPN 3
35629: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
35630: LD_INT 0
35632: PPUSH
// case cmd of 301 :
35633: LD_VAR 0 1
35637: PUSH
35638: LD_INT 301
35640: DOUBLE
35641: EQUAL
35642: IFTRUE 35646
35644: GO 35678
35646: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
35647: LD_VAR 0 6
35651: PPUSH
35652: LD_VAR 0 7
35656: PPUSH
35657: LD_VAR 0 8
35661: PPUSH
35662: LD_VAR 0 4
35666: PPUSH
35667: LD_VAR 0 5
35671: PPUSH
35672: CALL 36879 0 5
35676: GO 35799
35678: LD_INT 302
35680: DOUBLE
35681: EQUAL
35682: IFTRUE 35686
35684: GO 35723
35686: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
35687: LD_VAR 0 6
35691: PPUSH
35692: LD_VAR 0 7
35696: PPUSH
35697: LD_VAR 0 8
35701: PPUSH
35702: LD_VAR 0 9
35706: PPUSH
35707: LD_VAR 0 4
35711: PPUSH
35712: LD_VAR 0 5
35716: PPUSH
35717: CALL 36970 0 6
35721: GO 35799
35723: LD_INT 303
35725: DOUBLE
35726: EQUAL
35727: IFTRUE 35731
35729: GO 35768
35731: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
35732: LD_VAR 0 6
35736: PPUSH
35737: LD_VAR 0 7
35741: PPUSH
35742: LD_VAR 0 8
35746: PPUSH
35747: LD_VAR 0 9
35751: PPUSH
35752: LD_VAR 0 4
35756: PPUSH
35757: LD_VAR 0 5
35761: PPUSH
35762: CALL 35804 0 6
35766: GO 35799
35768: LD_INT 304
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35776
35774: GO 35798
35776: POP
// hHackTeleport ( unit , x , y ) ; end ;
35777: LD_VAR 0 2
35781: PPUSH
35782: LD_VAR 0 4
35786: PPUSH
35787: LD_VAR 0 5
35791: PPUSH
35792: CALL 37563 0 3
35796: GO 35799
35798: POP
// end ;
35799: LD_VAR 0 12
35803: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35804: LD_INT 0
35806: PPUSH
35807: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35808: LD_VAR 0 1
35812: PUSH
35813: LD_INT 1
35815: LESS
35816: PUSH
35817: LD_VAR 0 1
35821: PUSH
35822: LD_INT 3
35824: GREATER
35825: OR
35826: PUSH
35827: LD_VAR 0 5
35831: PPUSH
35832: LD_VAR 0 6
35836: PPUSH
35837: CALL_OW 428
35841: OR
35842: IFFALSE 35846
// exit ;
35844: GO 36566
// uc_side := your_side ;
35846: LD_ADDR_OWVAR 20
35850: PUSH
35851: LD_OWVAR 2
35855: ST_TO_ADDR
// uc_nation := nation ;
35856: LD_ADDR_OWVAR 21
35860: PUSH
35861: LD_VAR 0 1
35865: ST_TO_ADDR
// bc_level = 1 ;
35866: LD_ADDR_OWVAR 43
35870: PUSH
35871: LD_INT 1
35873: ST_TO_ADDR
// case btype of 1 :
35874: LD_VAR 0 2
35878: PUSH
35879: LD_INT 1
35881: DOUBLE
35882: EQUAL
35883: IFTRUE 35887
35885: GO 35898
35887: POP
// bc_type := b_depot ; 2 :
35888: LD_ADDR_OWVAR 42
35892: PUSH
35893: LD_INT 0
35895: ST_TO_ADDR
35896: GO 36510
35898: LD_INT 2
35900: DOUBLE
35901: EQUAL
35902: IFTRUE 35906
35904: GO 35917
35906: POP
// bc_type := b_warehouse ; 3 :
35907: LD_ADDR_OWVAR 42
35911: PUSH
35912: LD_INT 1
35914: ST_TO_ADDR
35915: GO 36510
35917: LD_INT 3
35919: DOUBLE
35920: EQUAL
35921: IFTRUE 35925
35923: GO 35936
35925: POP
// bc_type := b_lab ; 4 .. 9 :
35926: LD_ADDR_OWVAR 42
35930: PUSH
35931: LD_INT 6
35933: ST_TO_ADDR
35934: GO 36510
35936: LD_INT 4
35938: DOUBLE
35939: GREATEREQUAL
35940: IFFALSE 35948
35942: LD_INT 9
35944: DOUBLE
35945: LESSEQUAL
35946: IFTRUE 35950
35948: GO 36002
35950: POP
// begin bc_type := b_lab_half ;
35951: LD_ADDR_OWVAR 42
35955: PUSH
35956: LD_INT 7
35958: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35959: LD_ADDR_OWVAR 44
35963: PUSH
35964: LD_INT 10
35966: PUSH
35967: LD_INT 11
35969: PUSH
35970: LD_INT 12
35972: PUSH
35973: LD_INT 15
35975: PUSH
35976: LD_INT 14
35978: PUSH
35979: LD_INT 13
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: PUSH
35990: LD_VAR 0 2
35994: PUSH
35995: LD_INT 3
35997: MINUS
35998: ARRAY
35999: ST_TO_ADDR
// end ; 10 .. 13 :
36000: GO 36510
36002: LD_INT 10
36004: DOUBLE
36005: GREATEREQUAL
36006: IFFALSE 36014
36008: LD_INT 13
36010: DOUBLE
36011: LESSEQUAL
36012: IFTRUE 36016
36014: GO 36093
36016: POP
// begin bc_type := b_lab_full ;
36017: LD_ADDR_OWVAR 42
36021: PUSH
36022: LD_INT 8
36024: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36025: LD_ADDR_OWVAR 44
36029: PUSH
36030: LD_INT 10
36032: PUSH
36033: LD_INT 12
36035: PUSH
36036: LD_INT 14
36038: PUSH
36039: LD_INT 13
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: PUSH
36048: LD_VAR 0 2
36052: PUSH
36053: LD_INT 9
36055: MINUS
36056: ARRAY
36057: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36058: LD_ADDR_OWVAR 45
36062: PUSH
36063: LD_INT 11
36065: PUSH
36066: LD_INT 15
36068: PUSH
36069: LD_INT 12
36071: PUSH
36072: LD_INT 15
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: PUSH
36081: LD_VAR 0 2
36085: PUSH
36086: LD_INT 9
36088: MINUS
36089: ARRAY
36090: ST_TO_ADDR
// end ; 14 :
36091: GO 36510
36093: LD_INT 14
36095: DOUBLE
36096: EQUAL
36097: IFTRUE 36101
36099: GO 36112
36101: POP
// bc_type := b_workshop ; 15 :
36102: LD_ADDR_OWVAR 42
36106: PUSH
36107: LD_INT 2
36109: ST_TO_ADDR
36110: GO 36510
36112: LD_INT 15
36114: DOUBLE
36115: EQUAL
36116: IFTRUE 36120
36118: GO 36131
36120: POP
// bc_type := b_factory ; 16 :
36121: LD_ADDR_OWVAR 42
36125: PUSH
36126: LD_INT 3
36128: ST_TO_ADDR
36129: GO 36510
36131: LD_INT 16
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36150
36139: POP
// bc_type := b_ext_gun ; 17 :
36140: LD_ADDR_OWVAR 42
36144: PUSH
36145: LD_INT 17
36147: ST_TO_ADDR
36148: GO 36510
36150: LD_INT 17
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36186
36158: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
36159: LD_ADDR_OWVAR 42
36163: PUSH
36164: LD_INT 19
36166: PUSH
36167: LD_INT 23
36169: PUSH
36170: LD_INT 19
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: PUSH
36178: LD_VAR 0 1
36182: ARRAY
36183: ST_TO_ADDR
36184: GO 36510
36186: LD_INT 18
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36194
36192: GO 36205
36194: POP
// bc_type := b_ext_radar ; 19 :
36195: LD_ADDR_OWVAR 42
36199: PUSH
36200: LD_INT 20
36202: ST_TO_ADDR
36203: GO 36510
36205: LD_INT 19
36207: DOUBLE
36208: EQUAL
36209: IFTRUE 36213
36211: GO 36224
36213: POP
// bc_type := b_ext_radio ; 20 :
36214: LD_ADDR_OWVAR 42
36218: PUSH
36219: LD_INT 22
36221: ST_TO_ADDR
36222: GO 36510
36224: LD_INT 20
36226: DOUBLE
36227: EQUAL
36228: IFTRUE 36232
36230: GO 36243
36232: POP
// bc_type := b_ext_siberium ; 21 :
36233: LD_ADDR_OWVAR 42
36237: PUSH
36238: LD_INT 21
36240: ST_TO_ADDR
36241: GO 36510
36243: LD_INT 21
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36262
36251: POP
// bc_type := b_ext_computer ; 22 :
36252: LD_ADDR_OWVAR 42
36256: PUSH
36257: LD_INT 24
36259: ST_TO_ADDR
36260: GO 36510
36262: LD_INT 22
36264: DOUBLE
36265: EQUAL
36266: IFTRUE 36270
36268: GO 36281
36270: POP
// bc_type := b_ext_track ; 23 :
36271: LD_ADDR_OWVAR 42
36275: PUSH
36276: LD_INT 16
36278: ST_TO_ADDR
36279: GO 36510
36281: LD_INT 23
36283: DOUBLE
36284: EQUAL
36285: IFTRUE 36289
36287: GO 36300
36289: POP
// bc_type := b_ext_laser ; 24 :
36290: LD_ADDR_OWVAR 42
36294: PUSH
36295: LD_INT 25
36297: ST_TO_ADDR
36298: GO 36510
36300: LD_INT 24
36302: DOUBLE
36303: EQUAL
36304: IFTRUE 36308
36306: GO 36319
36308: POP
// bc_type := b_control_tower ; 25 :
36309: LD_ADDR_OWVAR 42
36313: PUSH
36314: LD_INT 36
36316: ST_TO_ADDR
36317: GO 36510
36319: LD_INT 25
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 36338
36327: POP
// bc_type := b_breastwork ; 26 :
36328: LD_ADDR_OWVAR 42
36332: PUSH
36333: LD_INT 31
36335: ST_TO_ADDR
36336: GO 36510
36338: LD_INT 26
36340: DOUBLE
36341: EQUAL
36342: IFTRUE 36346
36344: GO 36357
36346: POP
// bc_type := b_bunker ; 27 :
36347: LD_ADDR_OWVAR 42
36351: PUSH
36352: LD_INT 32
36354: ST_TO_ADDR
36355: GO 36510
36357: LD_INT 27
36359: DOUBLE
36360: EQUAL
36361: IFTRUE 36365
36363: GO 36376
36365: POP
// bc_type := b_turret ; 28 :
36366: LD_ADDR_OWVAR 42
36370: PUSH
36371: LD_INT 33
36373: ST_TO_ADDR
36374: GO 36510
36376: LD_INT 28
36378: DOUBLE
36379: EQUAL
36380: IFTRUE 36384
36382: GO 36395
36384: POP
// bc_type := b_armoury ; 29 :
36385: LD_ADDR_OWVAR 42
36389: PUSH
36390: LD_INT 4
36392: ST_TO_ADDR
36393: GO 36510
36395: LD_INT 29
36397: DOUBLE
36398: EQUAL
36399: IFTRUE 36403
36401: GO 36414
36403: POP
// bc_type := b_barracks ; 30 :
36404: LD_ADDR_OWVAR 42
36408: PUSH
36409: LD_INT 5
36411: ST_TO_ADDR
36412: GO 36510
36414: LD_INT 30
36416: DOUBLE
36417: EQUAL
36418: IFTRUE 36422
36420: GO 36433
36422: POP
// bc_type := b_solar_power ; 31 :
36423: LD_ADDR_OWVAR 42
36427: PUSH
36428: LD_INT 27
36430: ST_TO_ADDR
36431: GO 36510
36433: LD_INT 31
36435: DOUBLE
36436: EQUAL
36437: IFTRUE 36441
36439: GO 36452
36441: POP
// bc_type := b_oil_power ; 32 :
36442: LD_ADDR_OWVAR 42
36446: PUSH
36447: LD_INT 26
36449: ST_TO_ADDR
36450: GO 36510
36452: LD_INT 32
36454: DOUBLE
36455: EQUAL
36456: IFTRUE 36460
36458: GO 36471
36460: POP
// bc_type := b_siberite_power ; 33 :
36461: LD_ADDR_OWVAR 42
36465: PUSH
36466: LD_INT 28
36468: ST_TO_ADDR
36469: GO 36510
36471: LD_INT 33
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36479
36477: GO 36490
36479: POP
// bc_type := b_oil_mine ; 34 :
36480: LD_ADDR_OWVAR 42
36484: PUSH
36485: LD_INT 29
36487: ST_TO_ADDR
36488: GO 36510
36490: LD_INT 34
36492: DOUBLE
36493: EQUAL
36494: IFTRUE 36498
36496: GO 36509
36498: POP
// bc_type := b_siberite_mine ; end ;
36499: LD_ADDR_OWVAR 42
36503: PUSH
36504: LD_INT 30
36506: ST_TO_ADDR
36507: GO 36510
36509: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36510: LD_ADDR_VAR 0 8
36514: PUSH
36515: LD_VAR 0 5
36519: PPUSH
36520: LD_VAR 0 6
36524: PPUSH
36525: LD_VAR 0 3
36529: PPUSH
36530: CALL_OW 47
36534: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36535: LD_OWVAR 42
36539: PUSH
36540: LD_INT 32
36542: PUSH
36543: LD_INT 33
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: IN
36550: IFFALSE 36566
// PlaceWeaponTurret ( b , weapon ) ;
36552: LD_VAR 0 8
36556: PPUSH
36557: LD_VAR 0 4
36561: PPUSH
36562: CALL_OW 431
// end ;
36566: LD_VAR 0 7
36570: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36571: LD_INT 0
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36577: LD_ADDR_VAR 0 4
36581: PUSH
36582: LD_INT 22
36584: PUSH
36585: LD_OWVAR 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: LD_INT 30
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 30
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PPUSH
36626: CALL_OW 69
36630: ST_TO_ADDR
// if not tmp then
36631: LD_VAR 0 4
36635: NOT
36636: IFFALSE 36640
// exit ;
36638: GO 36699
// for i in tmp do
36640: LD_ADDR_VAR 0 2
36644: PUSH
36645: LD_VAR 0 4
36649: PUSH
36650: FOR_IN
36651: IFFALSE 36697
// for j = 1 to 3 do
36653: LD_ADDR_VAR 0 3
36657: PUSH
36658: DOUBLE
36659: LD_INT 1
36661: DEC
36662: ST_TO_ADDR
36663: LD_INT 3
36665: PUSH
36666: FOR_TO
36667: IFFALSE 36693
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
36669: LD_VAR 0 2
36673: PPUSH
36674: CALL_OW 274
36678: PPUSH
36679: LD_VAR 0 3
36683: PPUSH
36684: LD_INT 99999
36686: PPUSH
36687: CALL_OW 277
36691: GO 36666
36693: POP
36694: POP
36695: GO 36650
36697: POP
36698: POP
// end ;
36699: LD_VAR 0 1
36703: RET
// export function hHackSetLevel10 ; var i , j ; begin
36704: LD_INT 0
36706: PPUSH
36707: PPUSH
36708: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36709: LD_ADDR_VAR 0 2
36713: PUSH
36714: LD_INT 21
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PPUSH
36724: CALL_OW 69
36728: PUSH
36729: FOR_IN
36730: IFFALSE 36782
// if IsSelected ( i ) then
36732: LD_VAR 0 2
36736: PPUSH
36737: CALL_OW 306
36741: IFFALSE 36780
// begin for j := 1 to 4 do
36743: LD_ADDR_VAR 0 3
36747: PUSH
36748: DOUBLE
36749: LD_INT 1
36751: DEC
36752: ST_TO_ADDR
36753: LD_INT 4
36755: PUSH
36756: FOR_TO
36757: IFFALSE 36778
// SetSkill ( i , j , 10 ) ;
36759: LD_VAR 0 2
36763: PPUSH
36764: LD_VAR 0 3
36768: PPUSH
36769: LD_INT 10
36771: PPUSH
36772: CALL_OW 237
36776: GO 36756
36778: POP
36779: POP
// end ;
36780: GO 36729
36782: POP
36783: POP
// end ;
36784: LD_VAR 0 1
36788: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36789: LD_INT 0
36791: PPUSH
36792: PPUSH
36793: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36794: LD_ADDR_VAR 0 2
36798: PUSH
36799: LD_INT 22
36801: PUSH
36802: LD_OWVAR 2
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 21
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PPUSH
36825: CALL_OW 69
36829: PUSH
36830: FOR_IN
36831: IFFALSE 36872
// begin for j := 1 to 4 do
36833: LD_ADDR_VAR 0 3
36837: PUSH
36838: DOUBLE
36839: LD_INT 1
36841: DEC
36842: ST_TO_ADDR
36843: LD_INT 4
36845: PUSH
36846: FOR_TO
36847: IFFALSE 36868
// SetSkill ( i , j , 10 ) ;
36849: LD_VAR 0 2
36853: PPUSH
36854: LD_VAR 0 3
36858: PPUSH
36859: LD_INT 10
36861: PPUSH
36862: CALL_OW 237
36866: GO 36846
36868: POP
36869: POP
// end ;
36870: GO 36830
36872: POP
36873: POP
// end ;
36874: LD_VAR 0 1
36878: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36879: LD_INT 0
36881: PPUSH
// uc_side := your_side ;
36882: LD_ADDR_OWVAR 20
36886: PUSH
36887: LD_OWVAR 2
36891: ST_TO_ADDR
// uc_nation := nation ;
36892: LD_ADDR_OWVAR 21
36896: PUSH
36897: LD_VAR 0 1
36901: ST_TO_ADDR
// InitHc ;
36902: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36906: LD_INT 0
36908: PPUSH
36909: LD_VAR 0 2
36913: PPUSH
36914: LD_VAR 0 3
36918: PPUSH
36919: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
36923: LD_VAR 0 4
36927: PPUSH
36928: LD_VAR 0 5
36932: PPUSH
36933: CALL_OW 428
36937: PUSH
36938: LD_INT 0
36940: EQUAL
36941: IFFALSE 36965
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36943: CALL_OW 44
36947: PPUSH
36948: LD_VAR 0 4
36952: PPUSH
36953: LD_VAR 0 5
36957: PPUSH
36958: LD_INT 1
36960: PPUSH
36961: CALL_OW 48
// end ;
36965: LD_VAR 0 6
36969: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36970: LD_INT 0
36972: PPUSH
36973: PPUSH
// uc_side := your_side ;
36974: LD_ADDR_OWVAR 20
36978: PUSH
36979: LD_OWVAR 2
36983: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36984: LD_VAR 0 1
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: LD_INT 2
36994: PUSH
36995: LD_INT 3
36997: PUSH
36998: LD_INT 4
37000: PUSH
37001: LD_INT 5
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: IN
37011: IFFALSE 37023
// uc_nation := nation_american else
37013: LD_ADDR_OWVAR 21
37017: PUSH
37018: LD_INT 1
37020: ST_TO_ADDR
37021: GO 37066
// if chassis in [ 11 , 12 , 13 , 14 ] then
37023: LD_VAR 0 1
37027: PUSH
37028: LD_INT 11
37030: PUSH
37031: LD_INT 12
37033: PUSH
37034: LD_INT 13
37036: PUSH
37037: LD_INT 14
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: IN
37046: IFFALSE 37058
// uc_nation := nation_arabian else
37048: LD_ADDR_OWVAR 21
37052: PUSH
37053: LD_INT 2
37055: ST_TO_ADDR
37056: GO 37066
// uc_nation := nation_russian ;
37058: LD_ADDR_OWVAR 21
37062: PUSH
37063: LD_INT 3
37065: ST_TO_ADDR
// vc_chassis := chassis ;
37066: LD_ADDR_OWVAR 37
37070: PUSH
37071: LD_VAR 0 1
37075: ST_TO_ADDR
// vc_engine := engine ;
37076: LD_ADDR_OWVAR 39
37080: PUSH
37081: LD_VAR 0 2
37085: ST_TO_ADDR
// vc_control := control ;
37086: LD_ADDR_OWVAR 38
37090: PUSH
37091: LD_VAR 0 3
37095: ST_TO_ADDR
// vc_weapon := weapon ;
37096: LD_ADDR_OWVAR 40
37100: PUSH
37101: LD_VAR 0 4
37105: ST_TO_ADDR
// un := CreateVehicle ;
37106: LD_ADDR_VAR 0 8
37110: PUSH
37111: CALL_OW 45
37115: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
37116: LD_VAR 0 8
37120: PPUSH
37121: LD_INT 0
37123: PPUSH
37124: LD_INT 5
37126: PPUSH
37127: CALL_OW 12
37131: PPUSH
37132: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
37136: LD_VAR 0 8
37140: PPUSH
37141: LD_VAR 0 5
37145: PPUSH
37146: LD_VAR 0 6
37150: PPUSH
37151: LD_INT 1
37153: PPUSH
37154: CALL_OW 48
// end ;
37158: LD_VAR 0 7
37162: RET
// export hInvincible ; every 1 do
37163: GO 37165
37165: DISABLE
// hInvincible := [ ] ;
37166: LD_ADDR_EXP 124
37170: PUSH
37171: EMPTY
37172: ST_TO_ADDR
37173: END
// every 10 do var i ;
37174: GO 37176
37176: DISABLE
37177: LD_INT 0
37179: PPUSH
// begin enable ;
37180: ENABLE
// if not hInvincible then
37181: LD_EXP 124
37185: NOT
37186: IFFALSE 37190
// exit ;
37188: GO 37234
// for i in hInvincible do
37190: LD_ADDR_VAR 0 1
37194: PUSH
37195: LD_EXP 124
37199: PUSH
37200: FOR_IN
37201: IFFALSE 37232
// if GetLives ( i ) < 1000 then
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 256
37212: PUSH
37213: LD_INT 1000
37215: LESS
37216: IFFALSE 37230
// SetLives ( i , 1000 ) ;
37218: LD_VAR 0 1
37222: PPUSH
37223: LD_INT 1000
37225: PPUSH
37226: CALL_OW 234
37230: GO 37200
37232: POP
37233: POP
// end ;
37234: PPOPN 1
37236: END
// export function hHackInvincible ; var i ; begin
37237: LD_INT 0
37239: PPUSH
37240: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
37241: LD_ADDR_VAR 0 2
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: LD_INT 21
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 21
37261: PUSH
37262: LD_INT 2
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: LIST
37273: PPUSH
37274: CALL_OW 69
37278: PUSH
37279: FOR_IN
37280: IFFALSE 37341
// if IsSelected ( i ) then
37282: LD_VAR 0 2
37286: PPUSH
37287: CALL_OW 306
37291: IFFALSE 37339
// begin if i in hInvincible then
37293: LD_VAR 0 2
37297: PUSH
37298: LD_EXP 124
37302: IN
37303: IFFALSE 37323
// hInvincible := hInvincible diff i else
37305: LD_ADDR_EXP 124
37309: PUSH
37310: LD_EXP 124
37314: PUSH
37315: LD_VAR 0 2
37319: DIFF
37320: ST_TO_ADDR
37321: GO 37339
// hInvincible := hInvincible union i ;
37323: LD_ADDR_EXP 124
37327: PUSH
37328: LD_EXP 124
37332: PUSH
37333: LD_VAR 0 2
37337: UNION
37338: ST_TO_ADDR
// end ;
37339: GO 37279
37341: POP
37342: POP
// end ;
37343: LD_VAR 0 1
37347: RET
// export function hHackInvisible ; var i , j ; begin
37348: LD_INT 0
37350: PPUSH
37351: PPUSH
37352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37353: LD_ADDR_VAR 0 2
37357: PUSH
37358: LD_INT 21
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PPUSH
37368: CALL_OW 69
37372: PUSH
37373: FOR_IN
37374: IFFALSE 37398
// if IsSelected ( i ) then
37376: LD_VAR 0 2
37380: PPUSH
37381: CALL_OW 306
37385: IFFALSE 37396
// ComForceInvisible ( i ) ;
37387: LD_VAR 0 2
37391: PPUSH
37392: CALL_OW 496
37396: GO 37373
37398: POP
37399: POP
// end ;
37400: LD_VAR 0 1
37404: RET
// export function hHackChangeYourSide ; begin
37405: LD_INT 0
37407: PPUSH
// if your_side = 8 then
37408: LD_OWVAR 2
37412: PUSH
37413: LD_INT 8
37415: EQUAL
37416: IFFALSE 37428
// your_side := 0 else
37418: LD_ADDR_OWVAR 2
37422: PUSH
37423: LD_INT 0
37425: ST_TO_ADDR
37426: GO 37442
// your_side := your_side + 1 ;
37428: LD_ADDR_OWVAR 2
37432: PUSH
37433: LD_OWVAR 2
37437: PUSH
37438: LD_INT 1
37440: PLUS
37441: ST_TO_ADDR
// end ;
37442: LD_VAR 0 1
37446: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37447: LD_INT 0
37449: PPUSH
37450: PPUSH
37451: PPUSH
// for i in all_units do
37452: LD_ADDR_VAR 0 2
37456: PUSH
37457: LD_OWVAR 3
37461: PUSH
37462: FOR_IN
37463: IFFALSE 37541
// if IsSelected ( i ) then
37465: LD_VAR 0 2
37469: PPUSH
37470: CALL_OW 306
37474: IFFALSE 37539
// begin j := GetSide ( i ) ;
37476: LD_ADDR_VAR 0 3
37480: PUSH
37481: LD_VAR 0 2
37485: PPUSH
37486: CALL_OW 255
37490: ST_TO_ADDR
// if j = 8 then
37491: LD_VAR 0 3
37495: PUSH
37496: LD_INT 8
37498: EQUAL
37499: IFFALSE 37511
// j := 0 else
37501: LD_ADDR_VAR 0 3
37505: PUSH
37506: LD_INT 0
37508: ST_TO_ADDR
37509: GO 37525
// j := j + 1 ;
37511: LD_ADDR_VAR 0 3
37515: PUSH
37516: LD_VAR 0 3
37520: PUSH
37521: LD_INT 1
37523: PLUS
37524: ST_TO_ADDR
// SetSide ( i , j ) ;
37525: LD_VAR 0 2
37529: PPUSH
37530: LD_VAR 0 3
37534: PPUSH
37535: CALL_OW 235
// end ;
37539: GO 37462
37541: POP
37542: POP
// end ;
37543: LD_VAR 0 1
37547: RET
// export function hHackFog ; begin
37548: LD_INT 0
37550: PPUSH
// FogOff ( true ) ;
37551: LD_INT 1
37553: PPUSH
37554: CALL_OW 344
// end ;
37558: LD_VAR 0 1
37562: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37563: LD_INT 0
37565: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37566: LD_VAR 0 1
37570: PPUSH
37571: LD_VAR 0 2
37575: PPUSH
37576: LD_VAR 0 3
37580: PPUSH
37581: LD_INT 1
37583: PPUSH
37584: LD_INT 1
37586: PPUSH
37587: CALL_OW 483
// CenterOnXY ( x , y ) ;
37591: LD_VAR 0 2
37595: PPUSH
37596: LD_VAR 0 3
37600: PPUSH
37601: CALL_OW 84
// end ; end_of_file
37605: LD_VAR 0 4
37609: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37610: LD_INT 0
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37616: LD_VAR 0 1
37620: PPUSH
37621: CALL_OW 264
37625: PUSH
37626: LD_EXP 55
37630: EQUAL
37631: IFFALSE 37703
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37633: LD_INT 68
37635: PPUSH
37636: LD_VAR 0 1
37640: PPUSH
37641: CALL_OW 255
37645: PPUSH
37646: CALL_OW 321
37650: PUSH
37651: LD_INT 2
37653: EQUAL
37654: IFFALSE 37666
// eff := 70 else
37656: LD_ADDR_VAR 0 4
37660: PUSH
37661: LD_INT 70
37663: ST_TO_ADDR
37664: GO 37674
// eff := 30 ;
37666: LD_ADDR_VAR 0 4
37670: PUSH
37671: LD_INT 30
37673: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 250
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 251
37693: PPUSH
37694: LD_VAR 0 4
37698: PPUSH
37699: CALL_OW 495
// end ; end ;
37703: LD_VAR 0 2
37707: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37708: LD_INT 0
37710: PPUSH
// end ;
37711: LD_VAR 0 4
37715: RET
// export function SOS_Command ( cmd ) ; begin
37716: LD_INT 0
37718: PPUSH
// end ;
37719: LD_VAR 0 2
37723: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37724: LD_INT 0
37726: PPUSH
// if cmd = 121 then
37727: LD_VAR 0 1
37731: PUSH
37732: LD_INT 121
37734: EQUAL
37735: IFFALSE 37737
// end ;
37737: LD_VAR 0 6
37741: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37742: LD_INT 0
37744: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37745: LD_VAR 0 1
37749: PUSH
37750: LD_INT 250
37752: EQUAL
37753: PUSH
37754: LD_VAR 0 2
37758: PPUSH
37759: CALL_OW 264
37763: PUSH
37764: LD_EXP 58
37768: EQUAL
37769: AND
37770: IFFALSE 37791
// MinerPlaceMine ( unit , x , y ) ;
37772: LD_VAR 0 2
37776: PPUSH
37777: LD_VAR 0 4
37781: PPUSH
37782: LD_VAR 0 5
37786: PPUSH
37787: CALL 40140 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37791: LD_VAR 0 1
37795: PUSH
37796: LD_INT 251
37798: EQUAL
37799: PUSH
37800: LD_VAR 0 2
37804: PPUSH
37805: CALL_OW 264
37809: PUSH
37810: LD_EXP 58
37814: EQUAL
37815: AND
37816: IFFALSE 37837
// MinerDetonateMine ( unit , x , y ) ;
37818: LD_VAR 0 2
37822: PPUSH
37823: LD_VAR 0 4
37827: PPUSH
37828: LD_VAR 0 5
37832: PPUSH
37833: CALL 40417 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37837: LD_VAR 0 1
37841: PUSH
37842: LD_INT 252
37844: EQUAL
37845: PUSH
37846: LD_VAR 0 2
37850: PPUSH
37851: CALL_OW 264
37855: PUSH
37856: LD_EXP 58
37860: EQUAL
37861: AND
37862: IFFALSE 37883
// MinerCreateMinefield ( unit , x , y ) ;
37864: LD_VAR 0 2
37868: PPUSH
37869: LD_VAR 0 4
37873: PPUSH
37874: LD_VAR 0 5
37878: PPUSH
37879: CALL 40834 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37883: LD_VAR 0 1
37887: PUSH
37888: LD_INT 253
37890: EQUAL
37891: PUSH
37892: LD_VAR 0 2
37896: PPUSH
37897: CALL_OW 257
37901: PUSH
37902: LD_INT 5
37904: EQUAL
37905: AND
37906: IFFALSE 37927
// ComBinocular ( unit , x , y ) ;
37908: LD_VAR 0 2
37912: PPUSH
37913: LD_VAR 0 4
37917: PPUSH
37918: LD_VAR 0 5
37922: PPUSH
37923: CALL 41205 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37927: LD_VAR 0 1
37931: PUSH
37932: LD_INT 254
37934: EQUAL
37935: PUSH
37936: LD_VAR 0 2
37940: PPUSH
37941: CALL_OW 264
37945: PUSH
37946: LD_EXP 53
37950: EQUAL
37951: AND
37952: PUSH
37953: LD_VAR 0 3
37957: PPUSH
37958: CALL_OW 263
37962: PUSH
37963: LD_INT 3
37965: EQUAL
37966: AND
37967: IFFALSE 37983
// HackDestroyVehicle ( unit , selectedUnit ) ;
37969: LD_VAR 0 2
37973: PPUSH
37974: LD_VAR 0 3
37978: PPUSH
37979: CALL 39500 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37983: LD_VAR 0 1
37987: PUSH
37988: LD_INT 255
37990: EQUAL
37991: PUSH
37992: LD_VAR 0 2
37996: PPUSH
37997: CALL_OW 264
38001: PUSH
38002: LD_INT 14
38004: PUSH
38005: LD_INT 53
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: IN
38012: AND
38013: PUSH
38014: LD_VAR 0 4
38018: PPUSH
38019: LD_VAR 0 5
38023: PPUSH
38024: CALL_OW 488
38028: AND
38029: IFFALSE 38053
// CutTreeXYR ( unit , x , y , 12 ) ;
38031: LD_VAR 0 2
38035: PPUSH
38036: LD_VAR 0 4
38040: PPUSH
38041: LD_VAR 0 5
38045: PPUSH
38046: LD_INT 12
38048: PPUSH
38049: CALL 38066 0 4
// end ;
38053: LD_VAR 0 6
38057: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
38058: LD_INT 0
38060: PPUSH
// end ;
38061: LD_VAR 0 4
38065: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38066: LD_INT 0
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
38077: LD_VAR 0 1
38081: NOT
38082: PUSH
38083: LD_VAR 0 2
38087: PPUSH
38088: LD_VAR 0 3
38092: PPUSH
38093: CALL_OW 488
38097: NOT
38098: OR
38099: PUSH
38100: LD_VAR 0 4
38104: NOT
38105: OR
38106: IFFALSE 38110
// exit ;
38108: GO 38450
// list := [ ] ;
38110: LD_ADDR_VAR 0 13
38114: PUSH
38115: EMPTY
38116: ST_TO_ADDR
// if x - r < 0 then
38117: LD_VAR 0 2
38121: PUSH
38122: LD_VAR 0 4
38126: MINUS
38127: PUSH
38128: LD_INT 0
38130: LESS
38131: IFFALSE 38143
// min_x := 0 else
38133: LD_ADDR_VAR 0 7
38137: PUSH
38138: LD_INT 0
38140: ST_TO_ADDR
38141: GO 38159
// min_x := x - r ;
38143: LD_ADDR_VAR 0 7
38147: PUSH
38148: LD_VAR 0 2
38152: PUSH
38153: LD_VAR 0 4
38157: MINUS
38158: ST_TO_ADDR
// if y - r < 0 then
38159: LD_VAR 0 3
38163: PUSH
38164: LD_VAR 0 4
38168: MINUS
38169: PUSH
38170: LD_INT 0
38172: LESS
38173: IFFALSE 38185
// min_y := 0 else
38175: LD_ADDR_VAR 0 8
38179: PUSH
38180: LD_INT 0
38182: ST_TO_ADDR
38183: GO 38201
// min_y := y - r ;
38185: LD_ADDR_VAR 0 8
38189: PUSH
38190: LD_VAR 0 3
38194: PUSH
38195: LD_VAR 0 4
38199: MINUS
38200: ST_TO_ADDR
// max_x := x + r ;
38201: LD_ADDR_VAR 0 9
38205: PUSH
38206: LD_VAR 0 2
38210: PUSH
38211: LD_VAR 0 4
38215: PLUS
38216: ST_TO_ADDR
// max_y := y + r ;
38217: LD_ADDR_VAR 0 10
38221: PUSH
38222: LD_VAR 0 3
38226: PUSH
38227: LD_VAR 0 4
38231: PLUS
38232: ST_TO_ADDR
// for _x = min_x to max_x do
38233: LD_ADDR_VAR 0 11
38237: PUSH
38238: DOUBLE
38239: LD_VAR 0 7
38243: DEC
38244: ST_TO_ADDR
38245: LD_VAR 0 9
38249: PUSH
38250: FOR_TO
38251: IFFALSE 38368
// for _y = min_y to max_y do
38253: LD_ADDR_VAR 0 12
38257: PUSH
38258: DOUBLE
38259: LD_VAR 0 8
38263: DEC
38264: ST_TO_ADDR
38265: LD_VAR 0 10
38269: PUSH
38270: FOR_TO
38271: IFFALSE 38364
// begin if not ValidHex ( _x , _y ) then
38273: LD_VAR 0 11
38277: PPUSH
38278: LD_VAR 0 12
38282: PPUSH
38283: CALL_OW 488
38287: NOT
38288: IFFALSE 38292
// continue ;
38290: GO 38270
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38292: LD_VAR 0 11
38296: PPUSH
38297: LD_VAR 0 12
38301: PPUSH
38302: CALL_OW 351
38306: PUSH
38307: LD_VAR 0 11
38311: PPUSH
38312: LD_VAR 0 12
38316: PPUSH
38317: CALL_OW 554
38321: AND
38322: IFFALSE 38362
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38324: LD_ADDR_VAR 0 13
38328: PUSH
38329: LD_VAR 0 13
38333: PPUSH
38334: LD_VAR 0 13
38338: PUSH
38339: LD_INT 1
38341: PLUS
38342: PPUSH
38343: LD_VAR 0 11
38347: PUSH
38348: LD_VAR 0 12
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PPUSH
38357: CALL_OW 2
38361: ST_TO_ADDR
// end ;
38362: GO 38270
38364: POP
38365: POP
38366: GO 38250
38368: POP
38369: POP
// if not list then
38370: LD_VAR 0 13
38374: NOT
38375: IFFALSE 38379
// exit ;
38377: GO 38450
// for i in list do
38379: LD_ADDR_VAR 0 6
38383: PUSH
38384: LD_VAR 0 13
38388: PUSH
38389: FOR_IN
38390: IFFALSE 38448
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38392: LD_VAR 0 1
38396: PPUSH
38397: LD_STRING M
38399: PUSH
38400: LD_VAR 0 6
38404: PUSH
38405: LD_INT 1
38407: ARRAY
38408: PUSH
38409: LD_VAR 0 6
38413: PUSH
38414: LD_INT 2
38416: ARRAY
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: PUSH
38439: EMPTY
38440: LIST
38441: PPUSH
38442: CALL_OW 447
38446: GO 38389
38448: POP
38449: POP
// end ;
38450: LD_VAR 0 5
38454: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38455: LD_EXP 127
38459: NOT
38460: IFFALSE 38510
38462: GO 38464
38464: DISABLE
// begin initHack := true ;
38465: LD_ADDR_EXP 127
38469: PUSH
38470: LD_INT 1
38472: ST_TO_ADDR
// hackTanks := [ ] ;
38473: LD_ADDR_EXP 128
38477: PUSH
38478: EMPTY
38479: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38480: LD_ADDR_EXP 129
38484: PUSH
38485: EMPTY
38486: ST_TO_ADDR
// hackLimit := 3 ;
38487: LD_ADDR_EXP 130
38491: PUSH
38492: LD_INT 3
38494: ST_TO_ADDR
// hackDist := 12 ;
38495: LD_ADDR_EXP 131
38499: PUSH
38500: LD_INT 12
38502: ST_TO_ADDR
// hackCounter := [ ] ;
38503: LD_ADDR_EXP 132
38507: PUSH
38508: EMPTY
38509: ST_TO_ADDR
// end ;
38510: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38511: LD_EXP 127
38515: PUSH
38516: LD_INT 34
38518: PUSH
38519: LD_EXP 53
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PPUSH
38528: CALL_OW 69
38532: AND
38533: IFFALSE 38788
38535: GO 38537
38537: DISABLE
38538: LD_INT 0
38540: PPUSH
38541: PPUSH
// begin enable ;
38542: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38543: LD_ADDR_VAR 0 1
38547: PUSH
38548: LD_INT 34
38550: PUSH
38551: LD_EXP 53
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PPUSH
38560: CALL_OW 69
38564: PUSH
38565: FOR_IN
38566: IFFALSE 38786
// begin if not i in hackTanks then
38568: LD_VAR 0 1
38572: PUSH
38573: LD_EXP 128
38577: IN
38578: NOT
38579: IFFALSE 38662
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38581: LD_ADDR_EXP 128
38585: PUSH
38586: LD_EXP 128
38590: PPUSH
38591: LD_EXP 128
38595: PUSH
38596: LD_INT 1
38598: PLUS
38599: PPUSH
38600: LD_VAR 0 1
38604: PPUSH
38605: CALL_OW 1
38609: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38610: LD_ADDR_EXP 129
38614: PUSH
38615: LD_EXP 129
38619: PPUSH
38620: LD_EXP 129
38624: PUSH
38625: LD_INT 1
38627: PLUS
38628: PPUSH
38629: EMPTY
38630: PPUSH
38631: CALL_OW 1
38635: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38636: LD_ADDR_EXP 132
38640: PUSH
38641: LD_EXP 132
38645: PPUSH
38646: LD_EXP 132
38650: PUSH
38651: LD_INT 1
38653: PLUS
38654: PPUSH
38655: EMPTY
38656: PPUSH
38657: CALL_OW 1
38661: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38662: LD_VAR 0 1
38666: PPUSH
38667: CALL_OW 302
38671: NOT
38672: IFFALSE 38685
// begin HackUnlinkAll ( i ) ;
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL 38791 0 1
// continue ;
38683: GO 38565
// end ; HackCheckCapturedStatus ( i ) ;
38685: LD_VAR 0 1
38689: PPUSH
38690: CALL 39234 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38694: LD_ADDR_VAR 0 2
38698: PUSH
38699: LD_INT 81
38701: PUSH
38702: LD_VAR 0 1
38706: PPUSH
38707: CALL_OW 255
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 33
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 91
38728: PUSH
38729: LD_VAR 0 1
38733: PUSH
38734: LD_EXP 131
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 50
38746: PUSH
38747: EMPTY
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: PPUSH
38756: CALL_OW 69
38760: ST_TO_ADDR
// if not tmp then
38761: LD_VAR 0 2
38765: NOT
38766: IFFALSE 38770
// continue ;
38768: GO 38565
// HackLink ( i , tmp ) ;
38770: LD_VAR 0 1
38774: PPUSH
38775: LD_VAR 0 2
38779: PPUSH
38780: CALL 38927 0 2
// end ;
38784: GO 38565
38786: POP
38787: POP
// end ;
38788: PPOPN 2
38790: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38791: LD_INT 0
38793: PPUSH
38794: PPUSH
38795: PPUSH
// if not hack in hackTanks then
38796: LD_VAR 0 1
38800: PUSH
38801: LD_EXP 128
38805: IN
38806: NOT
38807: IFFALSE 38811
// exit ;
38809: GO 38922
// index := GetElementIndex ( hackTanks , hack ) ;
38811: LD_ADDR_VAR 0 4
38815: PUSH
38816: LD_EXP 128
38820: PPUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL 46396 0 2
38830: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38831: LD_EXP 129
38835: PUSH
38836: LD_VAR 0 4
38840: ARRAY
38841: IFFALSE 38922
// begin for i in hackTanksCaptured [ index ] do
38843: LD_ADDR_VAR 0 3
38847: PUSH
38848: LD_EXP 129
38852: PUSH
38853: LD_VAR 0 4
38857: ARRAY
38858: PUSH
38859: FOR_IN
38860: IFFALSE 38886
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38862: LD_VAR 0 3
38866: PUSH
38867: LD_INT 1
38869: ARRAY
38870: PPUSH
38871: LD_VAR 0 3
38875: PUSH
38876: LD_INT 2
38878: ARRAY
38879: PPUSH
38880: CALL_OW 235
38884: GO 38859
38886: POP
38887: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38888: LD_ADDR_EXP 129
38892: PUSH
38893: LD_EXP 129
38897: PPUSH
38898: LD_VAR 0 4
38902: PPUSH
38903: EMPTY
38904: PPUSH
38905: CALL_OW 1
38909: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38910: LD_VAR 0 1
38914: PPUSH
38915: LD_INT 0
38917: PPUSH
38918: CALL_OW 505
// end ; end ;
38922: LD_VAR 0 2
38926: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38927: LD_INT 0
38929: PPUSH
38930: PPUSH
38931: PPUSH
// if not hack in hackTanks or not vehicles then
38932: LD_VAR 0 1
38936: PUSH
38937: LD_EXP 128
38941: IN
38942: NOT
38943: PUSH
38944: LD_VAR 0 2
38948: NOT
38949: OR
38950: IFFALSE 38954
// exit ;
38952: GO 39229
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38954: LD_ADDR_VAR 0 2
38958: PUSH
38959: LD_VAR 0 1
38963: PPUSH
38964: LD_VAR 0 2
38968: PPUSH
38969: LD_INT 1
38971: PPUSH
38972: LD_INT 1
38974: PPUSH
38975: CALL 47046 0 4
38979: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38980: LD_ADDR_VAR 0 5
38984: PUSH
38985: LD_EXP 128
38989: PPUSH
38990: LD_VAR 0 1
38994: PPUSH
38995: CALL 46396 0 2
38999: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39000: LD_EXP 129
39004: PUSH
39005: LD_VAR 0 5
39009: ARRAY
39010: PUSH
39011: LD_EXP 130
39015: LESS
39016: IFFALSE 39205
// begin for i := 1 to vehicles do
39018: LD_ADDR_VAR 0 4
39022: PUSH
39023: DOUBLE
39024: LD_INT 1
39026: DEC
39027: ST_TO_ADDR
39028: LD_VAR 0 2
39032: PUSH
39033: FOR_TO
39034: IFFALSE 39203
// begin if hackTanksCaptured [ index ] = hackLimit then
39036: LD_EXP 129
39040: PUSH
39041: LD_VAR 0 5
39045: ARRAY
39046: PUSH
39047: LD_EXP 130
39051: EQUAL
39052: IFFALSE 39056
// break ;
39054: GO 39203
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39056: LD_ADDR_EXP 132
39060: PUSH
39061: LD_EXP 132
39065: PPUSH
39066: LD_VAR 0 5
39070: PPUSH
39071: LD_EXP 132
39075: PUSH
39076: LD_VAR 0 5
39080: ARRAY
39081: PUSH
39082: LD_INT 1
39084: PLUS
39085: PPUSH
39086: CALL_OW 1
39090: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39091: LD_ADDR_EXP 129
39095: PUSH
39096: LD_EXP 129
39100: PPUSH
39101: LD_VAR 0 5
39105: PUSH
39106: LD_EXP 129
39110: PUSH
39111: LD_VAR 0 5
39115: ARRAY
39116: PUSH
39117: LD_INT 1
39119: PLUS
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PPUSH
39125: LD_VAR 0 2
39129: PUSH
39130: LD_VAR 0 4
39134: ARRAY
39135: PUSH
39136: LD_VAR 0 2
39140: PUSH
39141: LD_VAR 0 4
39145: ARRAY
39146: PPUSH
39147: CALL_OW 255
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PPUSH
39156: CALL 46611 0 3
39160: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39161: LD_VAR 0 2
39165: PUSH
39166: LD_VAR 0 4
39170: ARRAY
39171: PPUSH
39172: LD_VAR 0 1
39176: PPUSH
39177: CALL_OW 255
39181: PPUSH
39182: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39186: LD_VAR 0 2
39190: PUSH
39191: LD_VAR 0 4
39195: ARRAY
39196: PPUSH
39197: CALL_OW 141
// end ;
39201: GO 39033
39203: POP
39204: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39205: LD_VAR 0 1
39209: PPUSH
39210: LD_EXP 129
39214: PUSH
39215: LD_VAR 0 5
39219: ARRAY
39220: PUSH
39221: LD_INT 0
39223: PLUS
39224: PPUSH
39225: CALL_OW 505
// end ;
39229: LD_VAR 0 3
39233: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39234: LD_INT 0
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
// if not hack in hackTanks then
39240: LD_VAR 0 1
39244: PUSH
39245: LD_EXP 128
39249: IN
39250: NOT
39251: IFFALSE 39255
// exit ;
39253: GO 39495
// index := GetElementIndex ( hackTanks , hack ) ;
39255: LD_ADDR_VAR 0 4
39259: PUSH
39260: LD_EXP 128
39264: PPUSH
39265: LD_VAR 0 1
39269: PPUSH
39270: CALL 46396 0 2
39274: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39275: LD_ADDR_VAR 0 3
39279: PUSH
39280: DOUBLE
39281: LD_EXP 129
39285: PUSH
39286: LD_VAR 0 4
39290: ARRAY
39291: INC
39292: ST_TO_ADDR
39293: LD_INT 1
39295: PUSH
39296: FOR_DOWNTO
39297: IFFALSE 39469
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39299: LD_ADDR_VAR 0 5
39303: PUSH
39304: LD_EXP 129
39308: PUSH
39309: LD_VAR 0 4
39313: ARRAY
39314: PUSH
39315: LD_VAR 0 3
39319: ARRAY
39320: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39321: LD_VAR 0 5
39325: PUSH
39326: LD_INT 1
39328: ARRAY
39329: PPUSH
39330: CALL_OW 302
39334: NOT
39335: PUSH
39336: LD_VAR 0 5
39340: PUSH
39341: LD_INT 1
39343: ARRAY
39344: PPUSH
39345: CALL_OW 255
39349: PUSH
39350: LD_VAR 0 1
39354: PPUSH
39355: CALL_OW 255
39359: NONEQUAL
39360: OR
39361: IFFALSE 39467
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39363: LD_VAR 0 5
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: CALL_OW 305
39376: PUSH
39377: LD_VAR 0 5
39381: PUSH
39382: LD_INT 1
39384: ARRAY
39385: PPUSH
39386: CALL_OW 255
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 255
39400: EQUAL
39401: AND
39402: IFFALSE 39426
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39404: LD_VAR 0 5
39408: PUSH
39409: LD_INT 1
39411: ARRAY
39412: PPUSH
39413: LD_VAR 0 5
39417: PUSH
39418: LD_INT 2
39420: ARRAY
39421: PPUSH
39422: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39426: LD_ADDR_EXP 129
39430: PUSH
39431: LD_EXP 129
39435: PPUSH
39436: LD_VAR 0 4
39440: PPUSH
39441: LD_EXP 129
39445: PUSH
39446: LD_VAR 0 4
39450: ARRAY
39451: PPUSH
39452: LD_VAR 0 3
39456: PPUSH
39457: CALL_OW 3
39461: PPUSH
39462: CALL_OW 1
39466: ST_TO_ADDR
// end ; end ;
39467: GO 39296
39469: POP
39470: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39471: LD_VAR 0 1
39475: PPUSH
39476: LD_EXP 129
39480: PUSH
39481: LD_VAR 0 4
39485: ARRAY
39486: PUSH
39487: LD_INT 0
39489: PLUS
39490: PPUSH
39491: CALL_OW 505
// end ;
39495: LD_VAR 0 2
39499: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39500: LD_INT 0
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
// if not hack in hackTanks then
39506: LD_VAR 0 1
39510: PUSH
39511: LD_EXP 128
39515: IN
39516: NOT
39517: IFFALSE 39521
// exit ;
39519: GO 39606
// index := GetElementIndex ( hackTanks , hack ) ;
39521: LD_ADDR_VAR 0 5
39525: PUSH
39526: LD_EXP 128
39530: PPUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: CALL 46396 0 2
39540: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39541: LD_ADDR_VAR 0 4
39545: PUSH
39546: DOUBLE
39547: LD_INT 1
39549: DEC
39550: ST_TO_ADDR
39551: LD_EXP 129
39555: PUSH
39556: LD_VAR 0 5
39560: ARRAY
39561: PUSH
39562: FOR_TO
39563: IFFALSE 39604
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39565: LD_EXP 129
39569: PUSH
39570: LD_VAR 0 5
39574: ARRAY
39575: PUSH
39576: LD_VAR 0 4
39580: ARRAY
39581: PUSH
39582: LD_INT 1
39584: ARRAY
39585: PUSH
39586: LD_VAR 0 2
39590: EQUAL
39591: IFFALSE 39602
// KillUnit ( vehicle ) ;
39593: LD_VAR 0 2
39597: PPUSH
39598: CALL_OW 66
39602: GO 39562
39604: POP
39605: POP
// end ;
39606: LD_VAR 0 3
39610: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39611: LD_EXP 133
39615: NOT
39616: IFFALSE 39651
39618: GO 39620
39620: DISABLE
// begin initMiner := true ;
39621: LD_ADDR_EXP 133
39625: PUSH
39626: LD_INT 1
39628: ST_TO_ADDR
// minersList := [ ] ;
39629: LD_ADDR_EXP 134
39633: PUSH
39634: EMPTY
39635: ST_TO_ADDR
// minerMinesList := [ ] ;
39636: LD_ADDR_EXP 135
39640: PUSH
39641: EMPTY
39642: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39643: LD_ADDR_EXP 136
39647: PUSH
39648: LD_INT 5
39650: ST_TO_ADDR
// end ;
39651: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39652: LD_EXP 133
39656: PUSH
39657: LD_INT 34
39659: PUSH
39660: LD_EXP 58
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PPUSH
39669: CALL_OW 69
39673: AND
39674: IFFALSE 40137
39676: GO 39678
39678: DISABLE
39679: LD_INT 0
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
// begin enable ;
39685: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39686: LD_ADDR_VAR 0 1
39690: PUSH
39691: LD_INT 34
39693: PUSH
39694: LD_EXP 58
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PPUSH
39703: CALL_OW 69
39707: PUSH
39708: FOR_IN
39709: IFFALSE 39781
// begin if not i in minersList then
39711: LD_VAR 0 1
39715: PUSH
39716: LD_EXP 134
39720: IN
39721: NOT
39722: IFFALSE 39779
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39724: LD_ADDR_EXP 134
39728: PUSH
39729: LD_EXP 134
39733: PPUSH
39734: LD_EXP 134
39738: PUSH
39739: LD_INT 1
39741: PLUS
39742: PPUSH
39743: LD_VAR 0 1
39747: PPUSH
39748: CALL_OW 1
39752: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39753: LD_ADDR_EXP 135
39757: PUSH
39758: LD_EXP 135
39762: PPUSH
39763: LD_EXP 135
39767: PUSH
39768: LD_INT 1
39770: PLUS
39771: PPUSH
39772: EMPTY
39773: PPUSH
39774: CALL_OW 1
39778: ST_TO_ADDR
// end end ;
39779: GO 39708
39781: POP
39782: POP
// for i := minerMinesList downto 1 do
39783: LD_ADDR_VAR 0 1
39787: PUSH
39788: DOUBLE
39789: LD_EXP 135
39793: INC
39794: ST_TO_ADDR
39795: LD_INT 1
39797: PUSH
39798: FOR_DOWNTO
39799: IFFALSE 40135
// begin if IsLive ( minersList [ i ] ) then
39801: LD_EXP 134
39805: PUSH
39806: LD_VAR 0 1
39810: ARRAY
39811: PPUSH
39812: CALL_OW 300
39816: IFFALSE 39844
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39818: LD_EXP 134
39822: PUSH
39823: LD_VAR 0 1
39827: ARRAY
39828: PPUSH
39829: LD_EXP 135
39833: PUSH
39834: LD_VAR 0 1
39838: ARRAY
39839: PPUSH
39840: CALL_OW 505
// if not minerMinesList [ i ] then
39844: LD_EXP 135
39848: PUSH
39849: LD_VAR 0 1
39853: ARRAY
39854: NOT
39855: IFFALSE 39859
// continue ;
39857: GO 39798
// for j := minerMinesList [ i ] downto 1 do
39859: LD_ADDR_VAR 0 2
39863: PUSH
39864: DOUBLE
39865: LD_EXP 135
39869: PUSH
39870: LD_VAR 0 1
39874: ARRAY
39875: INC
39876: ST_TO_ADDR
39877: LD_INT 1
39879: PUSH
39880: FOR_DOWNTO
39881: IFFALSE 40131
// begin side := GetSide ( minersList [ i ] ) ;
39883: LD_ADDR_VAR 0 3
39887: PUSH
39888: LD_EXP 134
39892: PUSH
39893: LD_VAR 0 1
39897: ARRAY
39898: PPUSH
39899: CALL_OW 255
39903: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39904: LD_ADDR_VAR 0 4
39908: PUSH
39909: LD_EXP 135
39913: PUSH
39914: LD_VAR 0 1
39918: ARRAY
39919: PUSH
39920: LD_VAR 0 2
39924: ARRAY
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: PPUSH
39930: LD_EXP 135
39934: PUSH
39935: LD_VAR 0 1
39939: ARRAY
39940: PUSH
39941: LD_VAR 0 2
39945: ARRAY
39946: PUSH
39947: LD_INT 2
39949: ARRAY
39950: PPUSH
39951: CALL_OW 428
39955: ST_TO_ADDR
// if not tmp then
39956: LD_VAR 0 4
39960: NOT
39961: IFFALSE 39965
// continue ;
39963: GO 39880
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39965: LD_VAR 0 4
39969: PUSH
39970: LD_INT 81
39972: PUSH
39973: LD_VAR 0 3
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PPUSH
39982: CALL_OW 69
39986: IN
39987: PUSH
39988: LD_EXP 135
39992: PUSH
39993: LD_VAR 0 1
39997: ARRAY
39998: PUSH
39999: LD_VAR 0 2
40003: ARRAY
40004: PUSH
40005: LD_INT 1
40007: ARRAY
40008: PPUSH
40009: LD_EXP 135
40013: PUSH
40014: LD_VAR 0 1
40018: ARRAY
40019: PUSH
40020: LD_VAR 0 2
40024: ARRAY
40025: PUSH
40026: LD_INT 2
40028: ARRAY
40029: PPUSH
40030: CALL_OW 458
40034: AND
40035: IFFALSE 40129
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40037: LD_EXP 135
40041: PUSH
40042: LD_VAR 0 1
40046: ARRAY
40047: PUSH
40048: LD_VAR 0 2
40052: ARRAY
40053: PUSH
40054: LD_INT 1
40056: ARRAY
40057: PPUSH
40058: LD_EXP 135
40062: PUSH
40063: LD_VAR 0 1
40067: ARRAY
40068: PUSH
40069: LD_VAR 0 2
40073: ARRAY
40074: PUSH
40075: LD_INT 2
40077: ARRAY
40078: PPUSH
40079: LD_VAR 0 3
40083: PPUSH
40084: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40088: LD_ADDR_EXP 135
40092: PUSH
40093: LD_EXP 135
40097: PPUSH
40098: LD_VAR 0 1
40102: PPUSH
40103: LD_EXP 135
40107: PUSH
40108: LD_VAR 0 1
40112: ARRAY
40113: PPUSH
40114: LD_VAR 0 2
40118: PPUSH
40119: CALL_OW 3
40123: PPUSH
40124: CALL_OW 1
40128: ST_TO_ADDR
// end ; end ;
40129: GO 39880
40131: POP
40132: POP
// end ;
40133: GO 39798
40135: POP
40136: POP
// end ;
40137: PPOPN 4
40139: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40140: LD_INT 0
40142: PPUSH
40143: PPUSH
// result := false ;
40144: LD_ADDR_VAR 0 4
40148: PUSH
40149: LD_INT 0
40151: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40152: LD_VAR 0 1
40156: PPUSH
40157: CALL_OW 264
40161: PUSH
40162: LD_EXP 58
40166: EQUAL
40167: NOT
40168: IFFALSE 40172
// exit ;
40170: GO 40412
// index := GetElementIndex ( minersList , unit ) ;
40172: LD_ADDR_VAR 0 5
40176: PUSH
40177: LD_EXP 134
40181: PPUSH
40182: LD_VAR 0 1
40186: PPUSH
40187: CALL 46396 0 2
40191: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40192: LD_EXP 135
40196: PUSH
40197: LD_VAR 0 5
40201: ARRAY
40202: PUSH
40203: LD_EXP 136
40207: GREATEREQUAL
40208: IFFALSE 40212
// exit ;
40210: GO 40412
// ComMoveXY ( unit , x , y ) ;
40212: LD_VAR 0 1
40216: PPUSH
40217: LD_VAR 0 2
40221: PPUSH
40222: LD_VAR 0 3
40226: PPUSH
40227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40231: LD_INT 35
40233: PPUSH
40234: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40238: LD_VAR 0 1
40242: PPUSH
40243: LD_VAR 0 2
40247: PPUSH
40248: LD_VAR 0 3
40252: PPUSH
40253: CALL 77169 0 3
40257: NOT
40258: PUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 314
40268: AND
40269: IFFALSE 40273
// exit ;
40271: GO 40412
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40273: LD_VAR 0 2
40277: PPUSH
40278: LD_VAR 0 3
40282: PPUSH
40283: CALL_OW 428
40287: PUSH
40288: LD_VAR 0 1
40292: EQUAL
40293: PUSH
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 314
40303: NOT
40304: AND
40305: IFFALSE 40231
// PlaySoundXY ( x , y , PlantMine ) ;
40307: LD_VAR 0 2
40311: PPUSH
40312: LD_VAR 0 3
40316: PPUSH
40317: LD_STRING PlantMine
40319: PPUSH
40320: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40324: LD_VAR 0 2
40328: PPUSH
40329: LD_VAR 0 3
40333: PPUSH
40334: LD_VAR 0 1
40338: PPUSH
40339: CALL_OW 255
40343: PPUSH
40344: LD_INT 0
40346: PPUSH
40347: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40351: LD_ADDR_EXP 135
40355: PUSH
40356: LD_EXP 135
40360: PPUSH
40361: LD_VAR 0 5
40365: PUSH
40366: LD_EXP 135
40370: PUSH
40371: LD_VAR 0 5
40375: ARRAY
40376: PUSH
40377: LD_INT 1
40379: PLUS
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PPUSH
40385: LD_VAR 0 2
40389: PUSH
40390: LD_VAR 0 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PPUSH
40399: CALL 46611 0 3
40403: ST_TO_ADDR
// result := true ;
40404: LD_ADDR_VAR 0 4
40408: PUSH
40409: LD_INT 1
40411: ST_TO_ADDR
// end ;
40412: LD_VAR 0 4
40416: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40417: LD_INT 0
40419: PPUSH
40420: PPUSH
40421: PPUSH
// if not unit in minersList then
40422: LD_VAR 0 1
40426: PUSH
40427: LD_EXP 134
40431: IN
40432: NOT
40433: IFFALSE 40437
// exit ;
40435: GO 40829
// index := GetElementIndex ( minersList , unit ) ;
40437: LD_ADDR_VAR 0 6
40441: PUSH
40442: LD_EXP 134
40446: PPUSH
40447: LD_VAR 0 1
40451: PPUSH
40452: CALL 46396 0 2
40456: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40457: LD_ADDR_VAR 0 5
40461: PUSH
40462: DOUBLE
40463: LD_EXP 135
40467: PUSH
40468: LD_VAR 0 6
40472: ARRAY
40473: INC
40474: ST_TO_ADDR
40475: LD_INT 1
40477: PUSH
40478: FOR_DOWNTO
40479: IFFALSE 40640
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40481: LD_EXP 135
40485: PUSH
40486: LD_VAR 0 6
40490: ARRAY
40491: PUSH
40492: LD_VAR 0 5
40496: ARRAY
40497: PUSH
40498: LD_INT 1
40500: ARRAY
40501: PUSH
40502: LD_VAR 0 2
40506: EQUAL
40507: PUSH
40508: LD_EXP 135
40512: PUSH
40513: LD_VAR 0 6
40517: ARRAY
40518: PUSH
40519: LD_VAR 0 5
40523: ARRAY
40524: PUSH
40525: LD_INT 2
40527: ARRAY
40528: PUSH
40529: LD_VAR 0 3
40533: EQUAL
40534: AND
40535: IFFALSE 40638
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40537: LD_EXP 135
40541: PUSH
40542: LD_VAR 0 6
40546: ARRAY
40547: PUSH
40548: LD_VAR 0 5
40552: ARRAY
40553: PUSH
40554: LD_INT 1
40556: ARRAY
40557: PPUSH
40558: LD_EXP 135
40562: PUSH
40563: LD_VAR 0 6
40567: ARRAY
40568: PUSH
40569: LD_VAR 0 5
40573: ARRAY
40574: PUSH
40575: LD_INT 2
40577: ARRAY
40578: PPUSH
40579: LD_VAR 0 1
40583: PPUSH
40584: CALL_OW 255
40588: PPUSH
40589: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40593: LD_ADDR_EXP 135
40597: PUSH
40598: LD_EXP 135
40602: PPUSH
40603: LD_VAR 0 6
40607: PPUSH
40608: LD_EXP 135
40612: PUSH
40613: LD_VAR 0 6
40617: ARRAY
40618: PPUSH
40619: LD_VAR 0 5
40623: PPUSH
40624: CALL_OW 3
40628: PPUSH
40629: CALL_OW 1
40633: ST_TO_ADDR
// exit ;
40634: POP
40635: POP
40636: GO 40829
// end ; end ;
40638: GO 40478
40640: POP
40641: POP
// for i := minerMinesList [ index ] downto 1 do
40642: LD_ADDR_VAR 0 5
40646: PUSH
40647: DOUBLE
40648: LD_EXP 135
40652: PUSH
40653: LD_VAR 0 6
40657: ARRAY
40658: INC
40659: ST_TO_ADDR
40660: LD_INT 1
40662: PUSH
40663: FOR_DOWNTO
40664: IFFALSE 40827
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40666: LD_EXP 135
40670: PUSH
40671: LD_VAR 0 6
40675: ARRAY
40676: PUSH
40677: LD_VAR 0 5
40681: ARRAY
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PPUSH
40687: LD_EXP 135
40691: PUSH
40692: LD_VAR 0 6
40696: ARRAY
40697: PUSH
40698: LD_VAR 0 5
40702: ARRAY
40703: PUSH
40704: LD_INT 2
40706: ARRAY
40707: PPUSH
40708: LD_VAR 0 2
40712: PPUSH
40713: LD_VAR 0 3
40717: PPUSH
40718: CALL_OW 298
40722: PUSH
40723: LD_INT 6
40725: LESS
40726: IFFALSE 40825
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40728: LD_EXP 135
40732: PUSH
40733: LD_VAR 0 6
40737: ARRAY
40738: PUSH
40739: LD_VAR 0 5
40743: ARRAY
40744: PUSH
40745: LD_INT 1
40747: ARRAY
40748: PPUSH
40749: LD_EXP 135
40753: PUSH
40754: LD_VAR 0 6
40758: ARRAY
40759: PUSH
40760: LD_VAR 0 5
40764: ARRAY
40765: PUSH
40766: LD_INT 2
40768: ARRAY
40769: PPUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: CALL_OW 255
40779: PPUSH
40780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40784: LD_ADDR_EXP 135
40788: PUSH
40789: LD_EXP 135
40793: PPUSH
40794: LD_VAR 0 6
40798: PPUSH
40799: LD_EXP 135
40803: PUSH
40804: LD_VAR 0 6
40808: ARRAY
40809: PPUSH
40810: LD_VAR 0 5
40814: PPUSH
40815: CALL_OW 3
40819: PPUSH
40820: CALL_OW 1
40824: ST_TO_ADDR
// end ; end ;
40825: GO 40663
40827: POP
40828: POP
// end ;
40829: LD_VAR 0 4
40833: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40834: LD_INT 0
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40845: LD_VAR 0 1
40849: PPUSH
40850: CALL_OW 264
40854: PUSH
40855: LD_EXP 58
40859: EQUAL
40860: NOT
40861: PUSH
40862: LD_VAR 0 1
40866: PUSH
40867: LD_EXP 134
40871: IN
40872: NOT
40873: OR
40874: IFFALSE 40878
// exit ;
40876: GO 41200
// index := GetElementIndex ( minersList , unit ) ;
40878: LD_ADDR_VAR 0 6
40882: PUSH
40883: LD_EXP 134
40887: PPUSH
40888: LD_VAR 0 1
40892: PPUSH
40893: CALL 46396 0 2
40897: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40898: LD_ADDR_VAR 0 8
40902: PUSH
40903: LD_EXP 136
40907: PUSH
40908: LD_EXP 135
40912: PUSH
40913: LD_VAR 0 6
40917: ARRAY
40918: MINUS
40919: ST_TO_ADDR
// if not minesFreeAmount then
40920: LD_VAR 0 8
40924: NOT
40925: IFFALSE 40929
// exit ;
40927: GO 41200
// tmp := [ ] ;
40929: LD_ADDR_VAR 0 7
40933: PUSH
40934: EMPTY
40935: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40936: LD_ADDR_VAR 0 5
40940: PUSH
40941: DOUBLE
40942: LD_INT 1
40944: DEC
40945: ST_TO_ADDR
40946: LD_VAR 0 8
40950: PUSH
40951: FOR_TO
40952: IFFALSE 41147
// begin _d := rand ( 0 , 5 ) ;
40954: LD_ADDR_VAR 0 11
40958: PUSH
40959: LD_INT 0
40961: PPUSH
40962: LD_INT 5
40964: PPUSH
40965: CALL_OW 12
40969: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40970: LD_ADDR_VAR 0 12
40974: PUSH
40975: LD_INT 2
40977: PPUSH
40978: LD_INT 6
40980: PPUSH
40981: CALL_OW 12
40985: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40986: LD_ADDR_VAR 0 9
40990: PUSH
40991: LD_VAR 0 2
40995: PPUSH
40996: LD_VAR 0 11
41000: PPUSH
41001: LD_VAR 0 12
41005: PPUSH
41006: CALL_OW 272
41010: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41011: LD_ADDR_VAR 0 10
41015: PUSH
41016: LD_VAR 0 3
41020: PPUSH
41021: LD_VAR 0 11
41025: PPUSH
41026: LD_VAR 0 12
41030: PPUSH
41031: CALL_OW 273
41035: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41036: LD_VAR 0 9
41040: PPUSH
41041: LD_VAR 0 10
41045: PPUSH
41046: CALL_OW 488
41050: PUSH
41051: LD_VAR 0 9
41055: PUSH
41056: LD_VAR 0 10
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_VAR 0 7
41069: IN
41070: NOT
41071: AND
41072: PUSH
41073: LD_VAR 0 9
41077: PPUSH
41078: LD_VAR 0 10
41082: PPUSH
41083: CALL_OW 458
41087: NOT
41088: AND
41089: IFFALSE 41131
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41091: LD_ADDR_VAR 0 7
41095: PUSH
41096: LD_VAR 0 7
41100: PPUSH
41101: LD_VAR 0 7
41105: PUSH
41106: LD_INT 1
41108: PLUS
41109: PPUSH
41110: LD_VAR 0 9
41114: PUSH
41115: LD_VAR 0 10
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PPUSH
41124: CALL_OW 1
41128: ST_TO_ADDR
41129: GO 41145
// i := i - 1 ;
41131: LD_ADDR_VAR 0 5
41135: PUSH
41136: LD_VAR 0 5
41140: PUSH
41141: LD_INT 1
41143: MINUS
41144: ST_TO_ADDR
// end ;
41145: GO 40951
41147: POP
41148: POP
// for i in tmp do
41149: LD_ADDR_VAR 0 5
41153: PUSH
41154: LD_VAR 0 7
41158: PUSH
41159: FOR_IN
41160: IFFALSE 41198
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41162: LD_VAR 0 1
41166: PPUSH
41167: LD_VAR 0 5
41171: PUSH
41172: LD_INT 1
41174: ARRAY
41175: PPUSH
41176: LD_VAR 0 5
41180: PUSH
41181: LD_INT 2
41183: ARRAY
41184: PPUSH
41185: CALL 40140 0 3
41189: NOT
41190: IFFALSE 41196
// exit ;
41192: POP
41193: POP
41194: GO 41200
41196: GO 41159
41198: POP
41199: POP
// end ;
41200: LD_VAR 0 4
41204: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41205: LD_INT 0
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
// if not GetClass ( unit ) = class_sniper then
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 257
41223: PUSH
41224: LD_INT 5
41226: EQUAL
41227: NOT
41228: IFFALSE 41232
// exit ;
41230: GO 41620
// dist := 8 ;
41232: LD_ADDR_VAR 0 5
41236: PUSH
41237: LD_INT 8
41239: ST_TO_ADDR
// viewRange := 12 ;
41240: LD_ADDR_VAR 0 7
41244: PUSH
41245: LD_INT 12
41247: ST_TO_ADDR
// side := GetSide ( unit ) ;
41248: LD_ADDR_VAR 0 6
41252: PUSH
41253: LD_VAR 0 1
41257: PPUSH
41258: CALL_OW 255
41262: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41263: LD_INT 61
41265: PPUSH
41266: LD_VAR 0 6
41270: PPUSH
41271: CALL_OW 321
41275: PUSH
41276: LD_INT 2
41278: EQUAL
41279: IFFALSE 41289
// viewRange := 16 ;
41281: LD_ADDR_VAR 0 7
41285: PUSH
41286: LD_INT 16
41288: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41289: LD_VAR 0 1
41293: PPUSH
41294: LD_VAR 0 2
41298: PPUSH
41299: LD_VAR 0 3
41303: PPUSH
41304: CALL_OW 297
41308: PUSH
41309: LD_VAR 0 5
41313: GREATER
41314: IFFALSE 41393
// begin ComMoveXY ( unit , x , y ) ;
41316: LD_VAR 0 1
41320: PPUSH
41321: LD_VAR 0 2
41325: PPUSH
41326: LD_VAR 0 3
41330: PPUSH
41331: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41335: LD_INT 35
41337: PPUSH
41338: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41342: LD_VAR 0 1
41346: PPUSH
41347: LD_VAR 0 2
41351: PPUSH
41352: LD_VAR 0 3
41356: PPUSH
41357: CALL 77169 0 3
41361: NOT
41362: IFFALSE 41366
// exit ;
41364: GO 41620
// until GetDistUnitXY ( unit , x , y ) < dist ;
41366: LD_VAR 0 1
41370: PPUSH
41371: LD_VAR 0 2
41375: PPUSH
41376: LD_VAR 0 3
41380: PPUSH
41381: CALL_OW 297
41385: PUSH
41386: LD_VAR 0 5
41390: LESS
41391: IFFALSE 41335
// end ; ComTurnXY ( unit , x , y ) ;
41393: LD_VAR 0 1
41397: PPUSH
41398: LD_VAR 0 2
41402: PPUSH
41403: LD_VAR 0 3
41407: PPUSH
41408: CALL_OW 118
// wait ( 5 ) ;
41412: LD_INT 5
41414: PPUSH
41415: CALL_OW 67
// _d := GetDir ( unit ) ;
41419: LD_ADDR_VAR 0 10
41423: PUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: CALL_OW 254
41433: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41434: LD_ADDR_VAR 0 8
41438: PUSH
41439: LD_VAR 0 1
41443: PPUSH
41444: CALL_OW 250
41448: PPUSH
41449: LD_VAR 0 10
41453: PPUSH
41454: LD_VAR 0 5
41458: PPUSH
41459: CALL_OW 272
41463: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41464: LD_ADDR_VAR 0 9
41468: PUSH
41469: LD_VAR 0 1
41473: PPUSH
41474: CALL_OW 251
41478: PPUSH
41479: LD_VAR 0 10
41483: PPUSH
41484: LD_VAR 0 5
41488: PPUSH
41489: CALL_OW 273
41493: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41494: LD_VAR 0 8
41498: PPUSH
41499: LD_VAR 0 9
41503: PPUSH
41504: CALL_OW 488
41508: NOT
41509: IFFALSE 41513
// exit ;
41511: GO 41620
// ComAnimCustom ( unit , 1 ) ;
41513: LD_VAR 0 1
41517: PPUSH
41518: LD_INT 1
41520: PPUSH
41521: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41525: LD_VAR 0 8
41529: PPUSH
41530: LD_VAR 0 9
41534: PPUSH
41535: LD_VAR 0 6
41539: PPUSH
41540: LD_VAR 0 7
41544: PPUSH
41545: CALL_OW 330
// repeat wait ( 1 ) ;
41549: LD_INT 1
41551: PPUSH
41552: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41556: LD_VAR 0 1
41560: PPUSH
41561: CALL_OW 316
41565: PUSH
41566: LD_VAR 0 1
41570: PPUSH
41571: CALL_OW 314
41575: OR
41576: PUSH
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 302
41586: NOT
41587: OR
41588: PUSH
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 301
41598: OR
41599: IFFALSE 41549
// RemoveSeeing ( _x , _y , side ) ;
41601: LD_VAR 0 8
41605: PPUSH
41606: LD_VAR 0 9
41610: PPUSH
41611: LD_VAR 0 6
41615: PPUSH
41616: CALL_OW 331
// end ; end_of_file
41620: LD_VAR 0 4
41624: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41625: LD_INT 0
41627: PPUSH
41628: PPUSH
// if exist_mode then
41629: LD_VAR 0 2
41633: IFFALSE 41658
// unit := CreateCharacter ( prefix & ident ) else
41635: LD_ADDR_VAR 0 5
41639: PUSH
41640: LD_VAR 0 3
41644: PUSH
41645: LD_VAR 0 1
41649: STR
41650: PPUSH
41651: CALL_OW 34
41655: ST_TO_ADDR
41656: GO 41673
// unit := NewCharacter ( ident ) ;
41658: LD_ADDR_VAR 0 5
41662: PUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 25
41672: ST_TO_ADDR
// result := unit ;
41673: LD_ADDR_VAR 0 4
41677: PUSH
41678: LD_VAR 0 5
41682: ST_TO_ADDR
// end ;
41683: LD_VAR 0 4
41687: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41688: LD_INT 0
41690: PPUSH
41691: PPUSH
// if not side or not nation then
41692: LD_VAR 0 1
41696: NOT
41697: PUSH
41698: LD_VAR 0 2
41702: NOT
41703: OR
41704: IFFALSE 41708
// exit ;
41706: GO 42476
// case nation of nation_american :
41708: LD_VAR 0 2
41712: PUSH
41713: LD_INT 1
41715: DOUBLE
41716: EQUAL
41717: IFTRUE 41721
41719: GO 41935
41721: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41722: LD_ADDR_VAR 0 4
41726: PUSH
41727: LD_INT 35
41729: PUSH
41730: LD_INT 45
41732: PUSH
41733: LD_INT 46
41735: PUSH
41736: LD_INT 47
41738: PUSH
41739: LD_INT 82
41741: PUSH
41742: LD_INT 83
41744: PUSH
41745: LD_INT 84
41747: PUSH
41748: LD_INT 85
41750: PUSH
41751: LD_INT 86
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: LD_INT 6
41762: PUSH
41763: LD_INT 15
41765: PUSH
41766: LD_INT 16
41768: PUSH
41769: LD_INT 7
41771: PUSH
41772: LD_INT 12
41774: PUSH
41775: LD_INT 13
41777: PUSH
41778: LD_INT 10
41780: PUSH
41781: LD_INT 14
41783: PUSH
41784: LD_INT 20
41786: PUSH
41787: LD_INT 21
41789: PUSH
41790: LD_INT 22
41792: PUSH
41793: LD_INT 25
41795: PUSH
41796: LD_INT 32
41798: PUSH
41799: LD_INT 27
41801: PUSH
41802: LD_INT 36
41804: PUSH
41805: LD_INT 69
41807: PUSH
41808: LD_INT 39
41810: PUSH
41811: LD_INT 34
41813: PUSH
41814: LD_INT 40
41816: PUSH
41817: LD_INT 48
41819: PUSH
41820: LD_INT 49
41822: PUSH
41823: LD_INT 50
41825: PUSH
41826: LD_INT 51
41828: PUSH
41829: LD_INT 52
41831: PUSH
41832: LD_INT 53
41834: PUSH
41835: LD_INT 54
41837: PUSH
41838: LD_INT 55
41840: PUSH
41841: LD_INT 56
41843: PUSH
41844: LD_INT 57
41846: PUSH
41847: LD_INT 58
41849: PUSH
41850: LD_INT 59
41852: PUSH
41853: LD_INT 60
41855: PUSH
41856: LD_INT 61
41858: PUSH
41859: LD_INT 62
41861: PUSH
41862: LD_INT 80
41864: PUSH
41865: LD_INT 82
41867: PUSH
41868: LD_INT 83
41870: PUSH
41871: LD_INT 84
41873: PUSH
41874: LD_INT 85
41876: PUSH
41877: LD_INT 86
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: ST_TO_ADDR
41933: GO 42400
41935: LD_INT 2
41937: DOUBLE
41938: EQUAL
41939: IFTRUE 41943
41941: GO 42169
41943: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41944: LD_ADDR_VAR 0 4
41948: PUSH
41949: LD_INT 35
41951: PUSH
41952: LD_INT 45
41954: PUSH
41955: LD_INT 46
41957: PUSH
41958: LD_INT 47
41960: PUSH
41961: LD_INT 82
41963: PUSH
41964: LD_INT 83
41966: PUSH
41967: LD_INT 84
41969: PUSH
41970: LD_INT 85
41972: PUSH
41973: LD_INT 87
41975: PUSH
41976: LD_INT 70
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 11
41984: PUSH
41985: LD_INT 3
41987: PUSH
41988: LD_INT 4
41990: PUSH
41991: LD_INT 5
41993: PUSH
41994: LD_INT 6
41996: PUSH
41997: LD_INT 15
41999: PUSH
42000: LD_INT 18
42002: PUSH
42003: LD_INT 7
42005: PUSH
42006: LD_INT 17
42008: PUSH
42009: LD_INT 8
42011: PUSH
42012: LD_INT 20
42014: PUSH
42015: LD_INT 21
42017: PUSH
42018: LD_INT 22
42020: PUSH
42021: LD_INT 72
42023: PUSH
42024: LD_INT 26
42026: PUSH
42027: LD_INT 69
42029: PUSH
42030: LD_INT 39
42032: PUSH
42033: LD_INT 40
42035: PUSH
42036: LD_INT 41
42038: PUSH
42039: LD_INT 42
42041: PUSH
42042: LD_INT 43
42044: PUSH
42045: LD_INT 48
42047: PUSH
42048: LD_INT 49
42050: PUSH
42051: LD_INT 50
42053: PUSH
42054: LD_INT 51
42056: PUSH
42057: LD_INT 52
42059: PUSH
42060: LD_INT 53
42062: PUSH
42063: LD_INT 54
42065: PUSH
42066: LD_INT 55
42068: PUSH
42069: LD_INT 56
42071: PUSH
42072: LD_INT 60
42074: PUSH
42075: LD_INT 61
42077: PUSH
42078: LD_INT 62
42080: PUSH
42081: LD_INT 66
42083: PUSH
42084: LD_INT 67
42086: PUSH
42087: LD_INT 68
42089: PUSH
42090: LD_INT 81
42092: PUSH
42093: LD_INT 82
42095: PUSH
42096: LD_INT 83
42098: PUSH
42099: LD_INT 84
42101: PUSH
42102: LD_INT 85
42104: PUSH
42105: LD_INT 87
42107: PUSH
42108: LD_INT 88
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: ST_TO_ADDR
42167: GO 42400
42169: LD_INT 3
42171: DOUBLE
42172: EQUAL
42173: IFTRUE 42177
42175: GO 42399
42177: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42178: LD_ADDR_VAR 0 4
42182: PUSH
42183: LD_INT 46
42185: PUSH
42186: LD_INT 47
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 82
42197: PUSH
42198: LD_INT 83
42200: PUSH
42201: LD_INT 84
42203: PUSH
42204: LD_INT 85
42206: PUSH
42207: LD_INT 86
42209: PUSH
42210: LD_INT 11
42212: PUSH
42213: LD_INT 9
42215: PUSH
42216: LD_INT 20
42218: PUSH
42219: LD_INT 19
42221: PUSH
42222: LD_INT 21
42224: PUSH
42225: LD_INT 24
42227: PUSH
42228: LD_INT 22
42230: PUSH
42231: LD_INT 25
42233: PUSH
42234: LD_INT 28
42236: PUSH
42237: LD_INT 29
42239: PUSH
42240: LD_INT 30
42242: PUSH
42243: LD_INT 31
42245: PUSH
42246: LD_INT 37
42248: PUSH
42249: LD_INT 38
42251: PUSH
42252: LD_INT 32
42254: PUSH
42255: LD_INT 27
42257: PUSH
42258: LD_INT 33
42260: PUSH
42261: LD_INT 69
42263: PUSH
42264: LD_INT 39
42266: PUSH
42267: LD_INT 34
42269: PUSH
42270: LD_INT 40
42272: PUSH
42273: LD_INT 71
42275: PUSH
42276: LD_INT 23
42278: PUSH
42279: LD_INT 44
42281: PUSH
42282: LD_INT 48
42284: PUSH
42285: LD_INT 49
42287: PUSH
42288: LD_INT 50
42290: PUSH
42291: LD_INT 51
42293: PUSH
42294: LD_INT 52
42296: PUSH
42297: LD_INT 53
42299: PUSH
42300: LD_INT 54
42302: PUSH
42303: LD_INT 55
42305: PUSH
42306: LD_INT 56
42308: PUSH
42309: LD_INT 57
42311: PUSH
42312: LD_INT 58
42314: PUSH
42315: LD_INT 59
42317: PUSH
42318: LD_INT 63
42320: PUSH
42321: LD_INT 64
42323: PUSH
42324: LD_INT 65
42326: PUSH
42327: LD_INT 82
42329: PUSH
42330: LD_INT 83
42332: PUSH
42333: LD_INT 84
42335: PUSH
42336: LD_INT 85
42338: PUSH
42339: LD_INT 86
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 42400
42399: POP
// if state > - 1 and state < 3 then
42400: LD_VAR 0 3
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: GREATER
42409: PUSH
42410: LD_VAR 0 3
42414: PUSH
42415: LD_INT 3
42417: LESS
42418: AND
42419: IFFALSE 42476
// for i in result do
42421: LD_ADDR_VAR 0 5
42425: PUSH
42426: LD_VAR 0 4
42430: PUSH
42431: FOR_IN
42432: IFFALSE 42474
// if GetTech ( i , side ) <> state then
42434: LD_VAR 0 5
42438: PPUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: CALL_OW 321
42448: PUSH
42449: LD_VAR 0 3
42453: NONEQUAL
42454: IFFALSE 42472
// result := result diff i ;
42456: LD_ADDR_VAR 0 4
42460: PUSH
42461: LD_VAR 0 4
42465: PUSH
42466: LD_VAR 0 5
42470: DIFF
42471: ST_TO_ADDR
42472: GO 42431
42474: POP
42475: POP
// end ;
42476: LD_VAR 0 4
42480: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42481: LD_INT 0
42483: PPUSH
42484: PPUSH
42485: PPUSH
// result := true ;
42486: LD_ADDR_VAR 0 3
42490: PUSH
42491: LD_INT 1
42493: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42494: LD_ADDR_VAR 0 5
42498: PUSH
42499: LD_VAR 0 2
42503: PPUSH
42504: CALL_OW 480
42508: ST_TO_ADDR
// if not tmp then
42509: LD_VAR 0 5
42513: NOT
42514: IFFALSE 42518
// exit ;
42516: GO 42567
// for i in tmp do
42518: LD_ADDR_VAR 0 4
42522: PUSH
42523: LD_VAR 0 5
42527: PUSH
42528: FOR_IN
42529: IFFALSE 42565
// if GetTech ( i , side ) <> state_researched then
42531: LD_VAR 0 4
42535: PPUSH
42536: LD_VAR 0 1
42540: PPUSH
42541: CALL_OW 321
42545: PUSH
42546: LD_INT 2
42548: NONEQUAL
42549: IFFALSE 42563
// begin result := false ;
42551: LD_ADDR_VAR 0 3
42555: PUSH
42556: LD_INT 0
42558: ST_TO_ADDR
// exit ;
42559: POP
42560: POP
42561: GO 42567
// end ;
42563: GO 42528
42565: POP
42566: POP
// end ;
42567: LD_VAR 0 3
42571: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42572: LD_INT 0
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
42585: PPUSH
42586: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42587: LD_VAR 0 1
42591: NOT
42592: PUSH
42593: LD_VAR 0 1
42597: PPUSH
42598: CALL_OW 257
42602: PUSH
42603: LD_INT 9
42605: NONEQUAL
42606: OR
42607: IFFALSE 42611
// exit ;
42609: GO 43184
// side := GetSide ( unit ) ;
42611: LD_ADDR_VAR 0 9
42615: PUSH
42616: LD_VAR 0 1
42620: PPUSH
42621: CALL_OW 255
42625: ST_TO_ADDR
// tech_space := tech_spacanom ;
42626: LD_ADDR_VAR 0 12
42630: PUSH
42631: LD_INT 29
42633: ST_TO_ADDR
// tech_time := tech_taurad ;
42634: LD_ADDR_VAR 0 13
42638: PUSH
42639: LD_INT 28
42641: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42642: LD_ADDR_VAR 0 11
42646: PUSH
42647: LD_VAR 0 1
42651: PPUSH
42652: CALL_OW 310
42656: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42657: LD_VAR 0 11
42661: PPUSH
42662: CALL_OW 247
42666: PUSH
42667: LD_INT 2
42669: EQUAL
42670: IFFALSE 42674
// exit ;
42672: GO 43184
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42674: LD_ADDR_VAR 0 8
42678: PUSH
42679: LD_INT 81
42681: PUSH
42682: LD_VAR 0 9
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 3
42693: PUSH
42694: LD_INT 21
42696: PUSH
42697: LD_INT 3
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PPUSH
42712: CALL_OW 69
42716: ST_TO_ADDR
// if not tmp then
42717: LD_VAR 0 8
42721: NOT
42722: IFFALSE 42726
// exit ;
42724: GO 43184
// if in_unit then
42726: LD_VAR 0 11
42730: IFFALSE 42754
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42732: LD_ADDR_VAR 0 10
42736: PUSH
42737: LD_VAR 0 8
42741: PPUSH
42742: LD_VAR 0 11
42746: PPUSH
42747: CALL_OW 74
42751: ST_TO_ADDR
42752: GO 42774
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42754: LD_ADDR_VAR 0 10
42758: PUSH
42759: LD_VAR 0 8
42763: PPUSH
42764: LD_VAR 0 1
42768: PPUSH
42769: CALL_OW 74
42773: ST_TO_ADDR
// if not enemy then
42774: LD_VAR 0 10
42778: NOT
42779: IFFALSE 42783
// exit ;
42781: GO 43184
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42783: LD_VAR 0 11
42787: PUSH
42788: LD_VAR 0 11
42792: PPUSH
42793: LD_VAR 0 10
42797: PPUSH
42798: CALL_OW 296
42802: PUSH
42803: LD_INT 13
42805: GREATER
42806: AND
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: LD_VAR 0 10
42817: PPUSH
42818: CALL_OW 296
42822: PUSH
42823: LD_INT 12
42825: GREATER
42826: OR
42827: IFFALSE 42831
// exit ;
42829: GO 43184
// missile := [ 1 ] ;
42831: LD_ADDR_VAR 0 14
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42842: LD_VAR 0 9
42846: PPUSH
42847: LD_VAR 0 12
42851: PPUSH
42852: CALL_OW 325
42856: IFFALSE 42885
// missile := Insert ( missile , missile + 1 , 2 ) ;
42858: LD_ADDR_VAR 0 14
42862: PUSH
42863: LD_VAR 0 14
42867: PPUSH
42868: LD_VAR 0 14
42872: PUSH
42873: LD_INT 1
42875: PLUS
42876: PPUSH
42877: LD_INT 2
42879: PPUSH
42880: CALL_OW 2
42884: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42885: LD_VAR 0 9
42889: PPUSH
42890: LD_VAR 0 13
42894: PPUSH
42895: CALL_OW 325
42899: PUSH
42900: LD_VAR 0 10
42904: PPUSH
42905: CALL_OW 255
42909: PPUSH
42910: LD_VAR 0 13
42914: PPUSH
42915: CALL_OW 325
42919: NOT
42920: AND
42921: IFFALSE 42950
// missile := Insert ( missile , missile + 1 , 3 ) ;
42923: LD_ADDR_VAR 0 14
42927: PUSH
42928: LD_VAR 0 14
42932: PPUSH
42933: LD_VAR 0 14
42937: PUSH
42938: LD_INT 1
42940: PLUS
42941: PPUSH
42942: LD_INT 3
42944: PPUSH
42945: CALL_OW 2
42949: ST_TO_ADDR
// if missile < 2 then
42950: LD_VAR 0 14
42954: PUSH
42955: LD_INT 2
42957: LESS
42958: IFFALSE 42962
// exit ;
42960: GO 43184
// x := GetX ( enemy ) ;
42962: LD_ADDR_VAR 0 4
42966: PUSH
42967: LD_VAR 0 10
42971: PPUSH
42972: CALL_OW 250
42976: ST_TO_ADDR
// y := GetY ( enemy ) ;
42977: LD_ADDR_VAR 0 5
42981: PUSH
42982: LD_VAR 0 10
42986: PPUSH
42987: CALL_OW 251
42991: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42992: LD_ADDR_VAR 0 6
42996: PUSH
42997: LD_VAR 0 4
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PPUSH
43006: LD_INT 1
43008: PPUSH
43009: CALL_OW 12
43013: PLUS
43014: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43015: LD_ADDR_VAR 0 7
43019: PUSH
43020: LD_VAR 0 5
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PPUSH
43029: LD_INT 1
43031: PPUSH
43032: CALL_OW 12
43036: PLUS
43037: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43038: LD_VAR 0 6
43042: PPUSH
43043: LD_VAR 0 7
43047: PPUSH
43048: CALL_OW 488
43052: NOT
43053: IFFALSE 43075
// begin _x := x ;
43055: LD_ADDR_VAR 0 6
43059: PUSH
43060: LD_VAR 0 4
43064: ST_TO_ADDR
// _y := y ;
43065: LD_ADDR_VAR 0 7
43069: PUSH
43070: LD_VAR 0 5
43074: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43075: LD_ADDR_VAR 0 3
43079: PUSH
43080: LD_INT 1
43082: PPUSH
43083: LD_VAR 0 14
43087: PPUSH
43088: CALL_OW 12
43092: ST_TO_ADDR
// case i of 1 :
43093: LD_VAR 0 3
43097: PUSH
43098: LD_INT 1
43100: DOUBLE
43101: EQUAL
43102: IFTRUE 43106
43104: GO 43123
43106: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43107: LD_VAR 0 1
43111: PPUSH
43112: LD_VAR 0 10
43116: PPUSH
43117: CALL_OW 115
43121: GO 43184
43123: LD_INT 2
43125: DOUBLE
43126: EQUAL
43127: IFTRUE 43131
43129: GO 43153
43131: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43132: LD_VAR 0 1
43136: PPUSH
43137: LD_VAR 0 6
43141: PPUSH
43142: LD_VAR 0 7
43146: PPUSH
43147: CALL_OW 153
43151: GO 43184
43153: LD_INT 3
43155: DOUBLE
43156: EQUAL
43157: IFTRUE 43161
43159: GO 43183
43161: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43162: LD_VAR 0 1
43166: PPUSH
43167: LD_VAR 0 6
43171: PPUSH
43172: LD_VAR 0 7
43176: PPUSH
43177: CALL_OW 154
43181: GO 43184
43183: POP
// end ;
43184: LD_VAR 0 2
43188: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43189: LD_INT 0
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
43196: PPUSH
// if not unit or not building then
43197: LD_VAR 0 1
43201: NOT
43202: PUSH
43203: LD_VAR 0 2
43207: NOT
43208: OR
43209: IFFALSE 43213
// exit ;
43211: GO 43371
// x := GetX ( building ) ;
43213: LD_ADDR_VAR 0 5
43217: PUSH
43218: LD_VAR 0 2
43222: PPUSH
43223: CALL_OW 250
43227: ST_TO_ADDR
// y := GetY ( building ) ;
43228: LD_ADDR_VAR 0 6
43232: PUSH
43233: LD_VAR 0 2
43237: PPUSH
43238: CALL_OW 251
43242: ST_TO_ADDR
// for i = 0 to 5 do
43243: LD_ADDR_VAR 0 4
43247: PUSH
43248: DOUBLE
43249: LD_INT 0
43251: DEC
43252: ST_TO_ADDR
43253: LD_INT 5
43255: PUSH
43256: FOR_TO
43257: IFFALSE 43369
// begin _x := ShiftX ( x , i , 3 ) ;
43259: LD_ADDR_VAR 0 7
43263: PUSH
43264: LD_VAR 0 5
43268: PPUSH
43269: LD_VAR 0 4
43273: PPUSH
43274: LD_INT 3
43276: PPUSH
43277: CALL_OW 272
43281: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43282: LD_ADDR_VAR 0 8
43286: PUSH
43287: LD_VAR 0 6
43291: PPUSH
43292: LD_VAR 0 4
43296: PPUSH
43297: LD_INT 3
43299: PPUSH
43300: CALL_OW 273
43304: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43305: LD_VAR 0 7
43309: PPUSH
43310: LD_VAR 0 8
43314: PPUSH
43315: CALL_OW 488
43319: NOT
43320: IFFALSE 43324
// continue ;
43322: GO 43256
// if HexInfo ( _x , _y ) = 0 then
43324: LD_VAR 0 7
43328: PPUSH
43329: LD_VAR 0 8
43333: PPUSH
43334: CALL_OW 428
43338: PUSH
43339: LD_INT 0
43341: EQUAL
43342: IFFALSE 43367
// begin ComMoveXY ( unit , _x , _y ) ;
43344: LD_VAR 0 1
43348: PPUSH
43349: LD_VAR 0 7
43353: PPUSH
43354: LD_VAR 0 8
43358: PPUSH
43359: CALL_OW 111
// exit ;
43363: POP
43364: POP
43365: GO 43371
// end ; end ;
43367: GO 43256
43369: POP
43370: POP
// end ;
43371: LD_VAR 0 3
43375: RET
// export function ScanBase ( side , base_area ) ; begin
43376: LD_INT 0
43378: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43379: LD_ADDR_VAR 0 3
43383: PUSH
43384: LD_VAR 0 2
43388: PPUSH
43389: LD_INT 81
43391: PUSH
43392: LD_VAR 0 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PPUSH
43401: CALL_OW 70
43405: ST_TO_ADDR
// end ;
43406: LD_VAR 0 3
43410: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43411: LD_INT 0
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
// result := false ;
43417: LD_ADDR_VAR 0 2
43421: PUSH
43422: LD_INT 0
43424: ST_TO_ADDR
// side := GetSide ( unit ) ;
43425: LD_ADDR_VAR 0 3
43429: PUSH
43430: LD_VAR 0 1
43434: PPUSH
43435: CALL_OW 255
43439: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43440: LD_ADDR_VAR 0 4
43444: PUSH
43445: LD_VAR 0 1
43449: PPUSH
43450: CALL_OW 248
43454: ST_TO_ADDR
// case nat of 1 :
43455: LD_VAR 0 4
43459: PUSH
43460: LD_INT 1
43462: DOUBLE
43463: EQUAL
43464: IFTRUE 43468
43466: GO 43479
43468: POP
// tech := tech_lassight ; 2 :
43469: LD_ADDR_VAR 0 5
43473: PUSH
43474: LD_INT 12
43476: ST_TO_ADDR
43477: GO 43518
43479: LD_INT 2
43481: DOUBLE
43482: EQUAL
43483: IFTRUE 43487
43485: GO 43498
43487: POP
// tech := tech_mortar ; 3 :
43488: LD_ADDR_VAR 0 5
43492: PUSH
43493: LD_INT 41
43495: ST_TO_ADDR
43496: GO 43518
43498: LD_INT 3
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 43517
43506: POP
// tech := tech_bazooka ; end ;
43507: LD_ADDR_VAR 0 5
43511: PUSH
43512: LD_INT 44
43514: ST_TO_ADDR
43515: GO 43518
43517: POP
// if Researched ( side , tech ) then
43518: LD_VAR 0 3
43522: PPUSH
43523: LD_VAR 0 5
43527: PPUSH
43528: CALL_OW 325
43532: IFFALSE 43559
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43534: LD_ADDR_VAR 0 2
43538: PUSH
43539: LD_INT 5
43541: PUSH
43542: LD_INT 8
43544: PUSH
43545: LD_INT 9
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: LIST
43552: PUSH
43553: LD_VAR 0 4
43557: ARRAY
43558: ST_TO_ADDR
// end ;
43559: LD_VAR 0 2
43563: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43564: LD_INT 0
43566: PPUSH
43567: PPUSH
43568: PPUSH
// if not mines then
43569: LD_VAR 0 2
43573: NOT
43574: IFFALSE 43578
// exit ;
43576: GO 43722
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43578: LD_ADDR_VAR 0 5
43582: PUSH
43583: LD_INT 81
43585: PUSH
43586: LD_VAR 0 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 21
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PPUSH
43616: CALL_OW 69
43620: ST_TO_ADDR
// for i in mines do
43621: LD_ADDR_VAR 0 4
43625: PUSH
43626: LD_VAR 0 2
43630: PUSH
43631: FOR_IN
43632: IFFALSE 43720
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43634: LD_VAR 0 4
43638: PUSH
43639: LD_INT 1
43641: ARRAY
43642: PPUSH
43643: LD_VAR 0 4
43647: PUSH
43648: LD_INT 2
43650: ARRAY
43651: PPUSH
43652: CALL_OW 458
43656: NOT
43657: IFFALSE 43661
// continue ;
43659: GO 43631
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43661: LD_VAR 0 4
43665: PUSH
43666: LD_INT 1
43668: ARRAY
43669: PPUSH
43670: LD_VAR 0 4
43674: PUSH
43675: LD_INT 2
43677: ARRAY
43678: PPUSH
43679: CALL_OW 428
43683: PUSH
43684: LD_VAR 0 5
43688: IN
43689: IFFALSE 43718
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43691: LD_VAR 0 4
43695: PUSH
43696: LD_INT 1
43698: ARRAY
43699: PPUSH
43700: LD_VAR 0 4
43704: PUSH
43705: LD_INT 2
43707: ARRAY
43708: PPUSH
43709: LD_VAR 0 1
43713: PPUSH
43714: CALL_OW 456
// end ;
43718: GO 43631
43720: POP
43721: POP
// end ;
43722: LD_VAR 0 3
43726: RET
// export function Count ( array ) ; var i ; begin
43727: LD_INT 0
43729: PPUSH
43730: PPUSH
// result := 0 ;
43731: LD_ADDR_VAR 0 2
43735: PUSH
43736: LD_INT 0
43738: ST_TO_ADDR
// for i in array do
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_VAR 0 1
43748: PUSH
43749: FOR_IN
43750: IFFALSE 43774
// if i then
43752: LD_VAR 0 3
43756: IFFALSE 43772
// result := result + 1 ;
43758: LD_ADDR_VAR 0 2
43762: PUSH
43763: LD_VAR 0 2
43767: PUSH
43768: LD_INT 1
43770: PLUS
43771: ST_TO_ADDR
43772: GO 43749
43774: POP
43775: POP
// end ;
43776: LD_VAR 0 2
43780: RET
// export function IsEmpty ( building ) ; begin
43781: LD_INT 0
43783: PPUSH
// if not building then
43784: LD_VAR 0 1
43788: NOT
43789: IFFALSE 43793
// exit ;
43791: GO 43836
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43793: LD_ADDR_VAR 0 2
43797: PUSH
43798: LD_VAR 0 1
43802: PUSH
43803: LD_INT 22
43805: PUSH
43806: LD_VAR 0 1
43810: PPUSH
43811: CALL_OW 255
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 58
43822: PUSH
43823: EMPTY
43824: LIST
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PPUSH
43830: CALL_OW 69
43834: IN
43835: ST_TO_ADDR
// end ;
43836: LD_VAR 0 2
43840: RET
// export function IsNotFull ( building ) ; begin
43841: LD_INT 0
43843: PPUSH
// if not building then
43844: LD_VAR 0 1
43848: NOT
43849: IFFALSE 43853
// exit ;
43851: GO 43872
// result := UnitsInside ( building ) < 6 ;
43853: LD_ADDR_VAR 0 2
43857: PUSH
43858: LD_VAR 0 1
43862: PPUSH
43863: CALL_OW 313
43867: PUSH
43868: LD_INT 6
43870: LESS
43871: ST_TO_ADDR
// end ;
43872: LD_VAR 0 2
43876: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43877: LD_INT 0
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
// tmp := [ ] ;
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: EMPTY
43889: ST_TO_ADDR
// list := [ ] ;
43890: LD_ADDR_VAR 0 5
43894: PUSH
43895: EMPTY
43896: ST_TO_ADDR
// for i = 16 to 25 do
43897: LD_ADDR_VAR 0 4
43901: PUSH
43902: DOUBLE
43903: LD_INT 16
43905: DEC
43906: ST_TO_ADDR
43907: LD_INT 25
43909: PUSH
43910: FOR_TO
43911: IFFALSE 43984
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43913: LD_ADDR_VAR 0 3
43917: PUSH
43918: LD_VAR 0 3
43922: PUSH
43923: LD_INT 22
43925: PUSH
43926: LD_VAR 0 1
43930: PPUSH
43931: CALL_OW 255
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 91
43942: PUSH
43943: LD_VAR 0 1
43947: PUSH
43948: LD_INT 6
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 30
43958: PUSH
43959: LD_VAR 0 4
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: PUSH
43973: EMPTY
43974: LIST
43975: PPUSH
43976: CALL_OW 69
43980: ADD
43981: ST_TO_ADDR
43982: GO 43910
43984: POP
43985: POP
// for i = 1 to tmp do
43986: LD_ADDR_VAR 0 4
43990: PUSH
43991: DOUBLE
43992: LD_INT 1
43994: DEC
43995: ST_TO_ADDR
43996: LD_VAR 0 3
44000: PUSH
44001: FOR_TO
44002: IFFALSE 44090
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44004: LD_ADDR_VAR 0 5
44008: PUSH
44009: LD_VAR 0 5
44013: PUSH
44014: LD_VAR 0 3
44018: PUSH
44019: LD_VAR 0 4
44023: ARRAY
44024: PPUSH
44025: CALL_OW 266
44029: PUSH
44030: LD_VAR 0 3
44034: PUSH
44035: LD_VAR 0 4
44039: ARRAY
44040: PPUSH
44041: CALL_OW 250
44045: PUSH
44046: LD_VAR 0 3
44050: PUSH
44051: LD_VAR 0 4
44055: ARRAY
44056: PPUSH
44057: CALL_OW 251
44061: PUSH
44062: LD_VAR 0 3
44066: PUSH
44067: LD_VAR 0 4
44071: ARRAY
44072: PPUSH
44073: CALL_OW 254
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: PUSH
44084: EMPTY
44085: LIST
44086: ADD
44087: ST_TO_ADDR
44088: GO 44001
44090: POP
44091: POP
// result := list ;
44092: LD_ADDR_VAR 0 2
44096: PUSH
44097: LD_VAR 0 5
44101: ST_TO_ADDR
// end ;
44102: LD_VAR 0 2
44106: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44107: LD_INT 0
44109: PPUSH
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
// if not factory then
44116: LD_VAR 0 1
44120: NOT
44121: IFFALSE 44125
// exit ;
44123: GO 44718
// if control = control_apeman then
44125: LD_VAR 0 4
44129: PUSH
44130: LD_INT 5
44132: EQUAL
44133: IFFALSE 44242
// begin tmp := UnitsInside ( factory ) ;
44135: LD_ADDR_VAR 0 8
44139: PUSH
44140: LD_VAR 0 1
44144: PPUSH
44145: CALL_OW 313
44149: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44150: LD_VAR 0 8
44154: PPUSH
44155: LD_INT 25
44157: PUSH
44158: LD_INT 12
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PPUSH
44165: CALL_OW 72
44169: NOT
44170: IFFALSE 44180
// control := control_manual ;
44172: LD_ADDR_VAR 0 4
44176: PUSH
44177: LD_INT 1
44179: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44180: LD_ADDR_VAR 0 8
44184: PUSH
44185: LD_VAR 0 1
44189: PPUSH
44190: CALL 43877 0 1
44194: ST_TO_ADDR
// if tmp then
44195: LD_VAR 0 8
44199: IFFALSE 44242
// begin for i in tmp do
44201: LD_ADDR_VAR 0 7
44205: PUSH
44206: LD_VAR 0 8
44210: PUSH
44211: FOR_IN
44212: IFFALSE 44240
// if i [ 1 ] = b_ext_radio then
44214: LD_VAR 0 7
44218: PUSH
44219: LD_INT 1
44221: ARRAY
44222: PUSH
44223: LD_INT 22
44225: EQUAL
44226: IFFALSE 44238
// begin control := control_remote ;
44228: LD_ADDR_VAR 0 4
44232: PUSH
44233: LD_INT 2
44235: ST_TO_ADDR
// break ;
44236: GO 44240
// end ;
44238: GO 44211
44240: POP
44241: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44242: LD_VAR 0 1
44246: PPUSH
44247: LD_VAR 0 2
44251: PPUSH
44252: LD_VAR 0 3
44256: PPUSH
44257: LD_VAR 0 4
44261: PPUSH
44262: LD_VAR 0 5
44266: PPUSH
44267: CALL_OW 448
44271: IFFALSE 44306
// begin result := [ chassis , engine , control , weapon ] ;
44273: LD_ADDR_VAR 0 6
44277: PUSH
44278: LD_VAR 0 2
44282: PUSH
44283: LD_VAR 0 3
44287: PUSH
44288: LD_VAR 0 4
44292: PUSH
44293: LD_VAR 0 5
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: ST_TO_ADDR
// exit ;
44304: GO 44718
// end ; _chassis := AvailableChassisList ( factory ) ;
44306: LD_ADDR_VAR 0 9
44310: PUSH
44311: LD_VAR 0 1
44315: PPUSH
44316: CALL_OW 475
44320: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44321: LD_ADDR_VAR 0 11
44325: PUSH
44326: LD_VAR 0 1
44330: PPUSH
44331: CALL_OW 476
44335: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44336: LD_ADDR_VAR 0 12
44340: PUSH
44341: LD_VAR 0 1
44345: PPUSH
44346: CALL_OW 477
44350: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44351: LD_ADDR_VAR 0 10
44355: PUSH
44356: LD_VAR 0 1
44360: PPUSH
44361: CALL_OW 478
44365: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44366: LD_VAR 0 9
44370: NOT
44371: PUSH
44372: LD_VAR 0 11
44376: NOT
44377: OR
44378: PUSH
44379: LD_VAR 0 12
44383: NOT
44384: OR
44385: PUSH
44386: LD_VAR 0 10
44390: NOT
44391: OR
44392: IFFALSE 44427
// begin result := [ chassis , engine , control , weapon ] ;
44394: LD_ADDR_VAR 0 6
44398: PUSH
44399: LD_VAR 0 2
44403: PUSH
44404: LD_VAR 0 3
44408: PUSH
44409: LD_VAR 0 4
44413: PUSH
44414: LD_VAR 0 5
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// exit ;
44425: GO 44718
// end ; if not chassis in _chassis then
44427: LD_VAR 0 2
44431: PUSH
44432: LD_VAR 0 9
44436: IN
44437: NOT
44438: IFFALSE 44464
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44440: LD_ADDR_VAR 0 2
44444: PUSH
44445: LD_VAR 0 9
44449: PUSH
44450: LD_INT 1
44452: PPUSH
44453: LD_VAR 0 9
44457: PPUSH
44458: CALL_OW 12
44462: ARRAY
44463: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44464: LD_VAR 0 2
44468: PPUSH
44469: LD_VAR 0 3
44473: PPUSH
44474: CALL 44723 0 2
44478: NOT
44479: IFFALSE 44538
// repeat engine := _engine [ 1 ] ;
44481: LD_ADDR_VAR 0 3
44485: PUSH
44486: LD_VAR 0 11
44490: PUSH
44491: LD_INT 1
44493: ARRAY
44494: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44495: LD_ADDR_VAR 0 11
44499: PUSH
44500: LD_VAR 0 11
44504: PPUSH
44505: LD_INT 1
44507: PPUSH
44508: CALL_OW 3
44512: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44513: LD_VAR 0 2
44517: PPUSH
44518: LD_VAR 0 3
44522: PPUSH
44523: CALL 44723 0 2
44527: PUSH
44528: LD_VAR 0 11
44532: PUSH
44533: EMPTY
44534: EQUAL
44535: OR
44536: IFFALSE 44481
// if not control in _control then
44538: LD_VAR 0 4
44542: PUSH
44543: LD_VAR 0 12
44547: IN
44548: NOT
44549: IFFALSE 44575
// control := _control [ rand ( 1 , _control ) ] ;
44551: LD_ADDR_VAR 0 4
44555: PUSH
44556: LD_VAR 0 12
44560: PUSH
44561: LD_INT 1
44563: PPUSH
44564: LD_VAR 0 12
44568: PPUSH
44569: CALL_OW 12
44573: ARRAY
44574: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44575: LD_VAR 0 2
44579: PPUSH
44580: LD_VAR 0 5
44584: PPUSH
44585: CALL 44943 0 2
44589: NOT
44590: IFFALSE 44649
// repeat weapon := _weapon [ 1 ] ;
44592: LD_ADDR_VAR 0 5
44596: PUSH
44597: LD_VAR 0 10
44601: PUSH
44602: LD_INT 1
44604: ARRAY
44605: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44606: LD_ADDR_VAR 0 10
44610: PUSH
44611: LD_VAR 0 10
44615: PPUSH
44616: LD_INT 1
44618: PPUSH
44619: CALL_OW 3
44623: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44624: LD_VAR 0 2
44628: PPUSH
44629: LD_VAR 0 5
44633: PPUSH
44634: CALL 44943 0 2
44638: PUSH
44639: LD_VAR 0 10
44643: PUSH
44644: EMPTY
44645: EQUAL
44646: OR
44647: IFFALSE 44592
// result := [ ] ;
44649: LD_ADDR_VAR 0 6
44653: PUSH
44654: EMPTY
44655: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44656: LD_VAR 0 1
44660: PPUSH
44661: LD_VAR 0 2
44665: PPUSH
44666: LD_VAR 0 3
44670: PPUSH
44671: LD_VAR 0 4
44675: PPUSH
44676: LD_VAR 0 5
44680: PPUSH
44681: CALL_OW 448
44685: IFFALSE 44718
// result := [ chassis , engine , control , weapon ] ;
44687: LD_ADDR_VAR 0 6
44691: PUSH
44692: LD_VAR 0 2
44696: PUSH
44697: LD_VAR 0 3
44701: PUSH
44702: LD_VAR 0 4
44706: PUSH
44707: LD_VAR 0 5
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: ST_TO_ADDR
// end ;
44718: LD_VAR 0 6
44722: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44723: LD_INT 0
44725: PPUSH
// if not chassis or not engine then
44726: LD_VAR 0 1
44730: NOT
44731: PUSH
44732: LD_VAR 0 2
44736: NOT
44737: OR
44738: IFFALSE 44742
// exit ;
44740: GO 44938
// case engine of engine_solar :
44742: LD_VAR 0 2
44746: PUSH
44747: LD_INT 2
44749: DOUBLE
44750: EQUAL
44751: IFTRUE 44755
44753: GO 44793
44755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44756: LD_ADDR_VAR 0 3
44760: PUSH
44761: LD_INT 11
44763: PUSH
44764: LD_INT 12
44766: PUSH
44767: LD_INT 13
44769: PUSH
44770: LD_INT 14
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 2
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: ST_TO_ADDR
44791: GO 44922
44793: LD_INT 1
44795: DOUBLE
44796: EQUAL
44797: IFTRUE 44801
44799: GO 44863
44801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44802: LD_ADDR_VAR 0 3
44806: PUSH
44807: LD_INT 11
44809: PUSH
44810: LD_INT 12
44812: PUSH
44813: LD_INT 13
44815: PUSH
44816: LD_INT 14
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: LD_INT 4
44830: PUSH
44831: LD_INT 5
44833: PUSH
44834: LD_INT 21
44836: PUSH
44837: LD_INT 23
44839: PUSH
44840: LD_INT 22
44842: PUSH
44843: LD_INT 24
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
44861: GO 44922
44863: LD_INT 3
44865: DOUBLE
44866: EQUAL
44867: IFTRUE 44871
44869: GO 44921
44871: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44872: LD_ADDR_VAR 0 3
44876: PUSH
44877: LD_INT 13
44879: PUSH
44880: LD_INT 14
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 3
44888: PUSH
44889: LD_INT 4
44891: PUSH
44892: LD_INT 5
44894: PUSH
44895: LD_INT 21
44897: PUSH
44898: LD_INT 22
44900: PUSH
44901: LD_INT 23
44903: PUSH
44904: LD_INT 24
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: ST_TO_ADDR
44919: GO 44922
44921: POP
// result := ( chassis in result ) ;
44922: LD_ADDR_VAR 0 3
44926: PUSH
44927: LD_VAR 0 1
44931: PUSH
44932: LD_VAR 0 3
44936: IN
44937: ST_TO_ADDR
// end ;
44938: LD_VAR 0 3
44942: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44943: LD_INT 0
44945: PPUSH
// if not chassis or not weapon then
44946: LD_VAR 0 1
44950: NOT
44951: PUSH
44952: LD_VAR 0 2
44956: NOT
44957: OR
44958: IFFALSE 44962
// exit ;
44960: GO 46024
// case weapon of us_machine_gun :
44962: LD_VAR 0 2
44966: PUSH
44967: LD_INT 2
44969: DOUBLE
44970: EQUAL
44971: IFTRUE 44975
44973: GO 45005
44975: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44976: LD_ADDR_VAR 0 3
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: LD_INT 4
44992: PUSH
44993: LD_INT 5
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
45003: GO 46008
45005: LD_INT 3
45007: DOUBLE
45008: EQUAL
45009: IFTRUE 45013
45011: GO 45043
45013: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45014: LD_ADDR_VAR 0 3
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: LD_INT 4
45030: PUSH
45031: LD_INT 5
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: ST_TO_ADDR
45041: GO 46008
45043: LD_INT 11
45045: DOUBLE
45046: EQUAL
45047: IFTRUE 45051
45049: GO 45081
45051: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45052: LD_ADDR_VAR 0 3
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: LD_INT 4
45068: PUSH
45069: LD_INT 5
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
45079: GO 46008
45081: LD_INT 4
45083: DOUBLE
45084: EQUAL
45085: IFTRUE 45089
45087: GO 45115
45089: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: LD_INT 4
45103: PUSH
45104: LD_INT 5
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
45113: GO 46008
45115: LD_INT 5
45117: DOUBLE
45118: EQUAL
45119: IFTRUE 45123
45121: GO 45149
45123: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45124: LD_ADDR_VAR 0 3
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 3
45134: PUSH
45135: LD_INT 4
45137: PUSH
45138: LD_INT 5
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: ST_TO_ADDR
45147: GO 46008
45149: LD_INT 9
45151: DOUBLE
45152: EQUAL
45153: IFTRUE 45157
45155: GO 45183
45157: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45158: LD_ADDR_VAR 0 3
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: LD_INT 4
45171: PUSH
45172: LD_INT 5
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
45181: GO 46008
45183: LD_INT 7
45185: DOUBLE
45186: EQUAL
45187: IFTRUE 45191
45189: GO 45217
45191: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45192: LD_ADDR_VAR 0 3
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 3
45202: PUSH
45203: LD_INT 4
45205: PUSH
45206: LD_INT 5
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
45215: GO 46008
45217: LD_INT 12
45219: DOUBLE
45220: EQUAL
45221: IFTRUE 45225
45223: GO 45251
45225: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45226: LD_ADDR_VAR 0 3
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 3
45236: PUSH
45237: LD_INT 4
45239: PUSH
45240: LD_INT 5
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
45249: GO 46008
45251: LD_INT 13
45253: DOUBLE
45254: EQUAL
45255: IFTRUE 45259
45257: GO 45285
45259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45260: LD_ADDR_VAR 0 3
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: LD_INT 4
45273: PUSH
45274: LD_INT 5
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
45283: GO 46008
45285: LD_INT 14
45287: DOUBLE
45288: EQUAL
45289: IFTRUE 45293
45291: GO 45311
45293: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45294: LD_ADDR_VAR 0 3
45298: PUSH
45299: LD_INT 4
45301: PUSH
45302: LD_INT 5
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: ST_TO_ADDR
45309: GO 46008
45311: LD_INT 6
45313: DOUBLE
45314: EQUAL
45315: IFTRUE 45319
45317: GO 45337
45319: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45320: LD_ADDR_VAR 0 3
45324: PUSH
45325: LD_INT 4
45327: PUSH
45328: LD_INT 5
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: ST_TO_ADDR
45335: GO 46008
45337: LD_INT 10
45339: DOUBLE
45340: EQUAL
45341: IFTRUE 45345
45343: GO 45363
45345: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45346: LD_ADDR_VAR 0 3
45350: PUSH
45351: LD_INT 4
45353: PUSH
45354: LD_INT 5
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: ST_TO_ADDR
45361: GO 46008
45363: LD_INT 22
45365: DOUBLE
45366: EQUAL
45367: IFTRUE 45371
45369: GO 45397
45371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45372: LD_ADDR_VAR 0 3
45376: PUSH
45377: LD_INT 11
45379: PUSH
45380: LD_INT 12
45382: PUSH
45383: LD_INT 13
45385: PUSH
45386: LD_INT 14
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
45395: GO 46008
45397: LD_INT 23
45399: DOUBLE
45400: EQUAL
45401: IFTRUE 45405
45403: GO 45431
45405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45406: LD_ADDR_VAR 0 3
45410: PUSH
45411: LD_INT 11
45413: PUSH
45414: LD_INT 12
45416: PUSH
45417: LD_INT 13
45419: PUSH
45420: LD_INT 14
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: ST_TO_ADDR
45429: GO 46008
45431: LD_INT 24
45433: DOUBLE
45434: EQUAL
45435: IFTRUE 45439
45437: GO 45465
45439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45440: LD_ADDR_VAR 0 3
45444: PUSH
45445: LD_INT 11
45447: PUSH
45448: LD_INT 12
45450: PUSH
45451: LD_INT 13
45453: PUSH
45454: LD_INT 14
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: ST_TO_ADDR
45463: GO 46008
45465: LD_INT 30
45467: DOUBLE
45468: EQUAL
45469: IFTRUE 45473
45471: GO 45499
45473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45474: LD_ADDR_VAR 0 3
45478: PUSH
45479: LD_INT 11
45481: PUSH
45482: LD_INT 12
45484: PUSH
45485: LD_INT 13
45487: PUSH
45488: LD_INT 14
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: ST_TO_ADDR
45497: GO 46008
45499: LD_INT 25
45501: DOUBLE
45502: EQUAL
45503: IFTRUE 45507
45505: GO 45525
45507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45508: LD_ADDR_VAR 0 3
45512: PUSH
45513: LD_INT 13
45515: PUSH
45516: LD_INT 14
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: ST_TO_ADDR
45523: GO 46008
45525: LD_INT 27
45527: DOUBLE
45528: EQUAL
45529: IFTRUE 45533
45531: GO 45551
45533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45534: LD_ADDR_VAR 0 3
45538: PUSH
45539: LD_INT 13
45541: PUSH
45542: LD_INT 14
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: ST_TO_ADDR
45549: GO 46008
45551: LD_EXP 56
45555: DOUBLE
45556: EQUAL
45557: IFTRUE 45561
45559: GO 45587
45561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45562: LD_ADDR_VAR 0 3
45566: PUSH
45567: LD_INT 11
45569: PUSH
45570: LD_INT 12
45572: PUSH
45573: LD_INT 13
45575: PUSH
45576: LD_INT 14
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: ST_TO_ADDR
45585: GO 46008
45587: LD_INT 28
45589: DOUBLE
45590: EQUAL
45591: IFTRUE 45595
45593: GO 45613
45595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45596: LD_ADDR_VAR 0 3
45600: PUSH
45601: LD_INT 13
45603: PUSH
45604: LD_INT 14
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: ST_TO_ADDR
45611: GO 46008
45613: LD_INT 29
45615: DOUBLE
45616: EQUAL
45617: IFTRUE 45621
45619: GO 45639
45621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45622: LD_ADDR_VAR 0 3
45626: PUSH
45627: LD_INT 13
45629: PUSH
45630: LD_INT 14
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: ST_TO_ADDR
45637: GO 46008
45639: LD_INT 31
45641: DOUBLE
45642: EQUAL
45643: IFTRUE 45647
45645: GO 45665
45647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45648: LD_ADDR_VAR 0 3
45652: PUSH
45653: LD_INT 13
45655: PUSH
45656: LD_INT 14
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: ST_TO_ADDR
45663: GO 46008
45665: LD_INT 26
45667: DOUBLE
45668: EQUAL
45669: IFTRUE 45673
45671: GO 45691
45673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45674: LD_ADDR_VAR 0 3
45678: PUSH
45679: LD_INT 13
45681: PUSH
45682: LD_INT 14
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: ST_TO_ADDR
45689: GO 46008
45691: LD_INT 42
45693: DOUBLE
45694: EQUAL
45695: IFTRUE 45699
45697: GO 45725
45699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45700: LD_ADDR_VAR 0 3
45704: PUSH
45705: LD_INT 21
45707: PUSH
45708: LD_INT 22
45710: PUSH
45711: LD_INT 23
45713: PUSH
45714: LD_INT 24
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
45723: GO 46008
45725: LD_INT 43
45727: DOUBLE
45728: EQUAL
45729: IFTRUE 45733
45731: GO 45759
45733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45734: LD_ADDR_VAR 0 3
45738: PUSH
45739: LD_INT 21
45741: PUSH
45742: LD_INT 22
45744: PUSH
45745: LD_INT 23
45747: PUSH
45748: LD_INT 24
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
45757: GO 46008
45759: LD_INT 44
45761: DOUBLE
45762: EQUAL
45763: IFTRUE 45767
45765: GO 45793
45767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45768: LD_ADDR_VAR 0 3
45772: PUSH
45773: LD_INT 21
45775: PUSH
45776: LD_INT 22
45778: PUSH
45779: LD_INT 23
45781: PUSH
45782: LD_INT 24
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
45791: GO 46008
45793: LD_INT 45
45795: DOUBLE
45796: EQUAL
45797: IFTRUE 45801
45799: GO 45827
45801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45802: LD_ADDR_VAR 0 3
45806: PUSH
45807: LD_INT 21
45809: PUSH
45810: LD_INT 22
45812: PUSH
45813: LD_INT 23
45815: PUSH
45816: LD_INT 24
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
45825: GO 46008
45827: LD_INT 49
45829: DOUBLE
45830: EQUAL
45831: IFTRUE 45835
45833: GO 45861
45835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45836: LD_ADDR_VAR 0 3
45840: PUSH
45841: LD_INT 21
45843: PUSH
45844: LD_INT 22
45846: PUSH
45847: LD_INT 23
45849: PUSH
45850: LD_INT 24
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
45859: GO 46008
45861: LD_INT 51
45863: DOUBLE
45864: EQUAL
45865: IFTRUE 45869
45867: GO 45895
45869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45870: LD_ADDR_VAR 0 3
45874: PUSH
45875: LD_INT 21
45877: PUSH
45878: LD_INT 22
45880: PUSH
45881: LD_INT 23
45883: PUSH
45884: LD_INT 24
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
45893: GO 46008
45895: LD_INT 52
45897: DOUBLE
45898: EQUAL
45899: IFTRUE 45903
45901: GO 45929
45903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45904: LD_ADDR_VAR 0 3
45908: PUSH
45909: LD_INT 21
45911: PUSH
45912: LD_INT 22
45914: PUSH
45915: LD_INT 23
45917: PUSH
45918: LD_INT 24
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: ST_TO_ADDR
45927: GO 46008
45929: LD_INT 53
45931: DOUBLE
45932: EQUAL
45933: IFTRUE 45937
45935: GO 45955
45937: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45938: LD_ADDR_VAR 0 3
45942: PUSH
45943: LD_INT 23
45945: PUSH
45946: LD_INT 24
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: ST_TO_ADDR
45953: GO 46008
45955: LD_INT 46
45957: DOUBLE
45958: EQUAL
45959: IFTRUE 45963
45961: GO 45981
45963: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45964: LD_ADDR_VAR 0 3
45968: PUSH
45969: LD_INT 23
45971: PUSH
45972: LD_INT 24
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: ST_TO_ADDR
45979: GO 46008
45981: LD_INT 47
45983: DOUBLE
45984: EQUAL
45985: IFTRUE 45989
45987: GO 46007
45989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45990: LD_ADDR_VAR 0 3
45994: PUSH
45995: LD_INT 23
45997: PUSH
45998: LD_INT 24
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: ST_TO_ADDR
46005: GO 46008
46007: POP
// result := ( chassis in result ) ;
46008: LD_ADDR_VAR 0 3
46012: PUSH
46013: LD_VAR 0 1
46017: PUSH
46018: LD_VAR 0 3
46022: IN
46023: ST_TO_ADDR
// end ;
46024: LD_VAR 0 3
46028: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46029: LD_INT 0
46031: PPUSH
46032: PPUSH
46033: PPUSH
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
// result := array ;
46038: LD_ADDR_VAR 0 5
46042: PUSH
46043: LD_VAR 0 1
46047: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46048: LD_VAR 0 1
46052: NOT
46053: PUSH
46054: LD_VAR 0 2
46058: NOT
46059: OR
46060: PUSH
46061: LD_VAR 0 3
46065: NOT
46066: OR
46067: PUSH
46068: LD_VAR 0 2
46072: PUSH
46073: LD_VAR 0 1
46077: GREATER
46078: OR
46079: PUSH
46080: LD_VAR 0 3
46084: PUSH
46085: LD_VAR 0 1
46089: GREATER
46090: OR
46091: IFFALSE 46095
// exit ;
46093: GO 46391
// if direction then
46095: LD_VAR 0 4
46099: IFFALSE 46163
// begin d := 1 ;
46101: LD_ADDR_VAR 0 9
46105: PUSH
46106: LD_INT 1
46108: ST_TO_ADDR
// if i_from > i_to then
46109: LD_VAR 0 2
46113: PUSH
46114: LD_VAR 0 3
46118: GREATER
46119: IFFALSE 46145
// length := ( array - i_from ) + i_to else
46121: LD_ADDR_VAR 0 11
46125: PUSH
46126: LD_VAR 0 1
46130: PUSH
46131: LD_VAR 0 2
46135: MINUS
46136: PUSH
46137: LD_VAR 0 3
46141: PLUS
46142: ST_TO_ADDR
46143: GO 46161
// length := i_to - i_from ;
46145: LD_ADDR_VAR 0 11
46149: PUSH
46150: LD_VAR 0 3
46154: PUSH
46155: LD_VAR 0 2
46159: MINUS
46160: ST_TO_ADDR
// end else
46161: GO 46224
// begin d := - 1 ;
46163: LD_ADDR_VAR 0 9
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: ST_TO_ADDR
// if i_from > i_to then
46172: LD_VAR 0 2
46176: PUSH
46177: LD_VAR 0 3
46181: GREATER
46182: IFFALSE 46202
// length := i_from - i_to else
46184: LD_ADDR_VAR 0 11
46188: PUSH
46189: LD_VAR 0 2
46193: PUSH
46194: LD_VAR 0 3
46198: MINUS
46199: ST_TO_ADDR
46200: GO 46224
// length := ( array - i_to ) + i_from ;
46202: LD_ADDR_VAR 0 11
46206: PUSH
46207: LD_VAR 0 1
46211: PUSH
46212: LD_VAR 0 3
46216: MINUS
46217: PUSH
46218: LD_VAR 0 2
46222: PLUS
46223: ST_TO_ADDR
// end ; if not length then
46224: LD_VAR 0 11
46228: NOT
46229: IFFALSE 46233
// exit ;
46231: GO 46391
// tmp := array ;
46233: LD_ADDR_VAR 0 10
46237: PUSH
46238: LD_VAR 0 1
46242: ST_TO_ADDR
// for i = 1 to length do
46243: LD_ADDR_VAR 0 6
46247: PUSH
46248: DOUBLE
46249: LD_INT 1
46251: DEC
46252: ST_TO_ADDR
46253: LD_VAR 0 11
46257: PUSH
46258: FOR_TO
46259: IFFALSE 46379
// begin for j = 1 to array do
46261: LD_ADDR_VAR 0 7
46265: PUSH
46266: DOUBLE
46267: LD_INT 1
46269: DEC
46270: ST_TO_ADDR
46271: LD_VAR 0 1
46275: PUSH
46276: FOR_TO
46277: IFFALSE 46365
// begin k := j + d ;
46279: LD_ADDR_VAR 0 8
46283: PUSH
46284: LD_VAR 0 7
46288: PUSH
46289: LD_VAR 0 9
46293: PLUS
46294: ST_TO_ADDR
// if k > array then
46295: LD_VAR 0 8
46299: PUSH
46300: LD_VAR 0 1
46304: GREATER
46305: IFFALSE 46315
// k := 1 ;
46307: LD_ADDR_VAR 0 8
46311: PUSH
46312: LD_INT 1
46314: ST_TO_ADDR
// if not k then
46315: LD_VAR 0 8
46319: NOT
46320: IFFALSE 46332
// k := array ;
46322: LD_ADDR_VAR 0 8
46326: PUSH
46327: LD_VAR 0 1
46331: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46332: LD_ADDR_VAR 0 10
46336: PUSH
46337: LD_VAR 0 10
46341: PPUSH
46342: LD_VAR 0 8
46346: PPUSH
46347: LD_VAR 0 1
46351: PUSH
46352: LD_VAR 0 7
46356: ARRAY
46357: PPUSH
46358: CALL_OW 1
46362: ST_TO_ADDR
// end ;
46363: GO 46276
46365: POP
46366: POP
// array := tmp ;
46367: LD_ADDR_VAR 0 1
46371: PUSH
46372: LD_VAR 0 10
46376: ST_TO_ADDR
// end ;
46377: GO 46258
46379: POP
46380: POP
// result := array ;
46381: LD_ADDR_VAR 0 5
46385: PUSH
46386: LD_VAR 0 1
46390: ST_TO_ADDR
// end ;
46391: LD_VAR 0 5
46395: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46396: LD_INT 0
46398: PPUSH
46399: PPUSH
// result := 0 ;
46400: LD_ADDR_VAR 0 3
46404: PUSH
46405: LD_INT 0
46407: ST_TO_ADDR
// if not array or not value in array then
46408: LD_VAR 0 1
46412: NOT
46413: PUSH
46414: LD_VAR 0 2
46418: PUSH
46419: LD_VAR 0 1
46423: IN
46424: NOT
46425: OR
46426: IFFALSE 46430
// exit ;
46428: GO 46484
// for i = 1 to array do
46430: LD_ADDR_VAR 0 4
46434: PUSH
46435: DOUBLE
46436: LD_INT 1
46438: DEC
46439: ST_TO_ADDR
46440: LD_VAR 0 1
46444: PUSH
46445: FOR_TO
46446: IFFALSE 46482
// if value = array [ i ] then
46448: LD_VAR 0 2
46452: PUSH
46453: LD_VAR 0 1
46457: PUSH
46458: LD_VAR 0 4
46462: ARRAY
46463: EQUAL
46464: IFFALSE 46480
// begin result := i ;
46466: LD_ADDR_VAR 0 3
46470: PUSH
46471: LD_VAR 0 4
46475: ST_TO_ADDR
// exit ;
46476: POP
46477: POP
46478: GO 46484
// end ;
46480: GO 46445
46482: POP
46483: POP
// end ;
46484: LD_VAR 0 3
46488: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46489: LD_INT 0
46491: PPUSH
// vc_chassis := chassis ;
46492: LD_ADDR_OWVAR 37
46496: PUSH
46497: LD_VAR 0 1
46501: ST_TO_ADDR
// vc_engine := engine ;
46502: LD_ADDR_OWVAR 39
46506: PUSH
46507: LD_VAR 0 2
46511: ST_TO_ADDR
// vc_control := control ;
46512: LD_ADDR_OWVAR 38
46516: PUSH
46517: LD_VAR 0 3
46521: ST_TO_ADDR
// vc_weapon := weapon ;
46522: LD_ADDR_OWVAR 40
46526: PUSH
46527: LD_VAR 0 4
46531: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46532: LD_ADDR_OWVAR 41
46536: PUSH
46537: LD_VAR 0 5
46541: ST_TO_ADDR
// end ;
46542: LD_VAR 0 6
46546: RET
// export function WantPlant ( unit ) ; var task ; begin
46547: LD_INT 0
46549: PPUSH
46550: PPUSH
// result := false ;
46551: LD_ADDR_VAR 0 2
46555: PUSH
46556: LD_INT 0
46558: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46559: LD_ADDR_VAR 0 3
46563: PUSH
46564: LD_VAR 0 1
46568: PPUSH
46569: CALL_OW 437
46573: ST_TO_ADDR
// if task then
46574: LD_VAR 0 3
46578: IFFALSE 46606
// if task [ 1 ] [ 1 ] = p then
46580: LD_VAR 0 3
46584: PUSH
46585: LD_INT 1
46587: ARRAY
46588: PUSH
46589: LD_INT 1
46591: ARRAY
46592: PUSH
46593: LD_STRING p
46595: EQUAL
46596: IFFALSE 46606
// result := true ;
46598: LD_ADDR_VAR 0 2
46602: PUSH
46603: LD_INT 1
46605: ST_TO_ADDR
// end ;
46606: LD_VAR 0 2
46610: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46611: LD_INT 0
46613: PPUSH
46614: PPUSH
46615: PPUSH
46616: PPUSH
// if pos < 1 then
46617: LD_VAR 0 2
46621: PUSH
46622: LD_INT 1
46624: LESS
46625: IFFALSE 46629
// exit ;
46627: GO 46932
// if pos = 1 then
46629: LD_VAR 0 2
46633: PUSH
46634: LD_INT 1
46636: EQUAL
46637: IFFALSE 46670
// result := Replace ( arr , pos [ 1 ] , value ) else
46639: LD_ADDR_VAR 0 4
46643: PUSH
46644: LD_VAR 0 1
46648: PPUSH
46649: LD_VAR 0 2
46653: PUSH
46654: LD_INT 1
46656: ARRAY
46657: PPUSH
46658: LD_VAR 0 3
46662: PPUSH
46663: CALL_OW 1
46667: ST_TO_ADDR
46668: GO 46932
// begin tmp := arr ;
46670: LD_ADDR_VAR 0 6
46674: PUSH
46675: LD_VAR 0 1
46679: ST_TO_ADDR
// s_arr := [ tmp ] ;
46680: LD_ADDR_VAR 0 7
46684: PUSH
46685: LD_VAR 0 6
46689: PUSH
46690: EMPTY
46691: LIST
46692: ST_TO_ADDR
// for i = 1 to pos - 1 do
46693: LD_ADDR_VAR 0 5
46697: PUSH
46698: DOUBLE
46699: LD_INT 1
46701: DEC
46702: ST_TO_ADDR
46703: LD_VAR 0 2
46707: PUSH
46708: LD_INT 1
46710: MINUS
46711: PUSH
46712: FOR_TO
46713: IFFALSE 46758
// begin tmp := tmp [ pos [ i ] ] ;
46715: LD_ADDR_VAR 0 6
46719: PUSH
46720: LD_VAR 0 6
46724: PUSH
46725: LD_VAR 0 2
46729: PUSH
46730: LD_VAR 0 5
46734: ARRAY
46735: ARRAY
46736: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46737: LD_ADDR_VAR 0 7
46741: PUSH
46742: LD_VAR 0 7
46746: PUSH
46747: LD_VAR 0 6
46751: PUSH
46752: EMPTY
46753: LIST
46754: ADD
46755: ST_TO_ADDR
// end ;
46756: GO 46712
46758: POP
46759: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46760: LD_ADDR_VAR 0 6
46764: PUSH
46765: LD_VAR 0 6
46769: PPUSH
46770: LD_VAR 0 2
46774: PUSH
46775: LD_VAR 0 2
46779: ARRAY
46780: PPUSH
46781: LD_VAR 0 3
46785: PPUSH
46786: CALL_OW 1
46790: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46791: LD_ADDR_VAR 0 7
46795: PUSH
46796: LD_VAR 0 7
46800: PPUSH
46801: LD_VAR 0 7
46805: PPUSH
46806: LD_VAR 0 6
46810: PPUSH
46811: CALL_OW 1
46815: ST_TO_ADDR
// for i = s_arr downto 2 do
46816: LD_ADDR_VAR 0 5
46820: PUSH
46821: DOUBLE
46822: LD_VAR 0 7
46826: INC
46827: ST_TO_ADDR
46828: LD_INT 2
46830: PUSH
46831: FOR_DOWNTO
46832: IFFALSE 46916
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46834: LD_ADDR_VAR 0 6
46838: PUSH
46839: LD_VAR 0 7
46843: PUSH
46844: LD_VAR 0 5
46848: PUSH
46849: LD_INT 1
46851: MINUS
46852: ARRAY
46853: PPUSH
46854: LD_VAR 0 2
46858: PUSH
46859: LD_VAR 0 5
46863: PUSH
46864: LD_INT 1
46866: MINUS
46867: ARRAY
46868: PPUSH
46869: LD_VAR 0 7
46873: PUSH
46874: LD_VAR 0 5
46878: ARRAY
46879: PPUSH
46880: CALL_OW 1
46884: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46885: LD_ADDR_VAR 0 7
46889: PUSH
46890: LD_VAR 0 7
46894: PPUSH
46895: LD_VAR 0 5
46899: PUSH
46900: LD_INT 1
46902: MINUS
46903: PPUSH
46904: LD_VAR 0 6
46908: PPUSH
46909: CALL_OW 1
46913: ST_TO_ADDR
// end ;
46914: GO 46831
46916: POP
46917: POP
// result := s_arr [ 1 ] ;
46918: LD_ADDR_VAR 0 4
46922: PUSH
46923: LD_VAR 0 7
46927: PUSH
46928: LD_INT 1
46930: ARRAY
46931: ST_TO_ADDR
// end ; end ;
46932: LD_VAR 0 4
46936: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46937: LD_INT 0
46939: PPUSH
46940: PPUSH
// if not list then
46941: LD_VAR 0 1
46945: NOT
46946: IFFALSE 46950
// exit ;
46948: GO 47041
// i := list [ pos1 ] ;
46950: LD_ADDR_VAR 0 5
46954: PUSH
46955: LD_VAR 0 1
46959: PUSH
46960: LD_VAR 0 2
46964: ARRAY
46965: ST_TO_ADDR
// if not i then
46966: LD_VAR 0 5
46970: NOT
46971: IFFALSE 46975
// exit ;
46973: GO 47041
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46975: LD_ADDR_VAR 0 1
46979: PUSH
46980: LD_VAR 0 1
46984: PPUSH
46985: LD_VAR 0 2
46989: PPUSH
46990: LD_VAR 0 1
46994: PUSH
46995: LD_VAR 0 3
46999: ARRAY
47000: PPUSH
47001: CALL_OW 1
47005: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47006: LD_ADDR_VAR 0 1
47010: PUSH
47011: LD_VAR 0 1
47015: PPUSH
47016: LD_VAR 0 3
47020: PPUSH
47021: LD_VAR 0 5
47025: PPUSH
47026: CALL_OW 1
47030: ST_TO_ADDR
// result := list ;
47031: LD_ADDR_VAR 0 4
47035: PUSH
47036: LD_VAR 0 1
47040: ST_TO_ADDR
// end ;
47041: LD_VAR 0 4
47045: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47046: LD_INT 0
47048: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47049: LD_ADDR_VAR 0 5
47053: PUSH
47054: LD_VAR 0 1
47058: PPUSH
47059: CALL_OW 250
47063: PPUSH
47064: LD_VAR 0 1
47068: PPUSH
47069: CALL_OW 251
47073: PPUSH
47074: LD_VAR 0 2
47078: PPUSH
47079: LD_VAR 0 3
47083: PPUSH
47084: LD_VAR 0 4
47088: PPUSH
47089: CALL 47099 0 5
47093: ST_TO_ADDR
// end ;
47094: LD_VAR 0 5
47098: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47099: LD_INT 0
47101: PPUSH
47102: PPUSH
47103: PPUSH
47104: PPUSH
// if not list then
47105: LD_VAR 0 3
47109: NOT
47110: IFFALSE 47114
// exit ;
47112: GO 47502
// result := [ ] ;
47114: LD_ADDR_VAR 0 6
47118: PUSH
47119: EMPTY
47120: ST_TO_ADDR
// for i in list do
47121: LD_ADDR_VAR 0 7
47125: PUSH
47126: LD_VAR 0 3
47130: PUSH
47131: FOR_IN
47132: IFFALSE 47334
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47134: LD_ADDR_VAR 0 9
47138: PUSH
47139: LD_VAR 0 7
47143: PPUSH
47144: LD_VAR 0 1
47148: PPUSH
47149: LD_VAR 0 2
47153: PPUSH
47154: CALL_OW 297
47158: ST_TO_ADDR
// if not result then
47159: LD_VAR 0 6
47163: NOT
47164: IFFALSE 47190
// result := [ [ i , tmp ] ] else
47166: LD_ADDR_VAR 0 6
47170: PUSH
47171: LD_VAR 0 7
47175: PUSH
47176: LD_VAR 0 9
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: EMPTY
47186: LIST
47187: ST_TO_ADDR
47188: GO 47332
// begin if result [ result ] [ 2 ] < tmp then
47190: LD_VAR 0 6
47194: PUSH
47195: LD_VAR 0 6
47199: ARRAY
47200: PUSH
47201: LD_INT 2
47203: ARRAY
47204: PUSH
47205: LD_VAR 0 9
47209: LESS
47210: IFFALSE 47252
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47212: LD_ADDR_VAR 0 6
47216: PUSH
47217: LD_VAR 0 6
47221: PPUSH
47222: LD_VAR 0 6
47226: PUSH
47227: LD_INT 1
47229: PLUS
47230: PPUSH
47231: LD_VAR 0 7
47235: PUSH
47236: LD_VAR 0 9
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PPUSH
47245: CALL_OW 2
47249: ST_TO_ADDR
47250: GO 47332
// for j = 1 to result do
47252: LD_ADDR_VAR 0 8
47256: PUSH
47257: DOUBLE
47258: LD_INT 1
47260: DEC
47261: ST_TO_ADDR
47262: LD_VAR 0 6
47266: PUSH
47267: FOR_TO
47268: IFFALSE 47330
// begin if tmp < result [ j ] [ 2 ] then
47270: LD_VAR 0 9
47274: PUSH
47275: LD_VAR 0 6
47279: PUSH
47280: LD_VAR 0 8
47284: ARRAY
47285: PUSH
47286: LD_INT 2
47288: ARRAY
47289: LESS
47290: IFFALSE 47328
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47292: LD_ADDR_VAR 0 6
47296: PUSH
47297: LD_VAR 0 6
47301: PPUSH
47302: LD_VAR 0 8
47306: PPUSH
47307: LD_VAR 0 7
47311: PUSH
47312: LD_VAR 0 9
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PPUSH
47321: CALL_OW 2
47325: ST_TO_ADDR
// break ;
47326: GO 47330
// end ; end ;
47328: GO 47267
47330: POP
47331: POP
// end ; end ;
47332: GO 47131
47334: POP
47335: POP
// if result and not asc then
47336: LD_VAR 0 6
47340: PUSH
47341: LD_VAR 0 4
47345: NOT
47346: AND
47347: IFFALSE 47422
// begin tmp := result ;
47349: LD_ADDR_VAR 0 9
47353: PUSH
47354: LD_VAR 0 6
47358: ST_TO_ADDR
// for i = tmp downto 1 do
47359: LD_ADDR_VAR 0 7
47363: PUSH
47364: DOUBLE
47365: LD_VAR 0 9
47369: INC
47370: ST_TO_ADDR
47371: LD_INT 1
47373: PUSH
47374: FOR_DOWNTO
47375: IFFALSE 47420
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47377: LD_ADDR_VAR 0 6
47381: PUSH
47382: LD_VAR 0 6
47386: PPUSH
47387: LD_VAR 0 9
47391: PUSH
47392: LD_VAR 0 7
47396: MINUS
47397: PUSH
47398: LD_INT 1
47400: PLUS
47401: PPUSH
47402: LD_VAR 0 9
47406: PUSH
47407: LD_VAR 0 7
47411: ARRAY
47412: PPUSH
47413: CALL_OW 1
47417: ST_TO_ADDR
47418: GO 47374
47420: POP
47421: POP
// end ; tmp := [ ] ;
47422: LD_ADDR_VAR 0 9
47426: PUSH
47427: EMPTY
47428: ST_TO_ADDR
// if mode then
47429: LD_VAR 0 5
47433: IFFALSE 47502
// begin for i = 1 to result do
47435: LD_ADDR_VAR 0 7
47439: PUSH
47440: DOUBLE
47441: LD_INT 1
47443: DEC
47444: ST_TO_ADDR
47445: LD_VAR 0 6
47449: PUSH
47450: FOR_TO
47451: IFFALSE 47490
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47453: LD_ADDR_VAR 0 9
47457: PUSH
47458: LD_VAR 0 9
47462: PPUSH
47463: LD_VAR 0 7
47467: PPUSH
47468: LD_VAR 0 6
47472: PUSH
47473: LD_VAR 0 7
47477: ARRAY
47478: PUSH
47479: LD_INT 1
47481: ARRAY
47482: PPUSH
47483: CALL_OW 1
47487: ST_TO_ADDR
47488: GO 47450
47490: POP
47491: POP
// result := tmp ;
47492: LD_ADDR_VAR 0 6
47496: PUSH
47497: LD_VAR 0 9
47501: ST_TO_ADDR
// end ; end ;
47502: LD_VAR 0 6
47506: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47507: LD_INT 0
47509: PPUSH
47510: PPUSH
47511: PPUSH
47512: PPUSH
47513: PPUSH
47514: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47515: LD_ADDR_VAR 0 5
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// if not x or not y then
47537: LD_VAR 0 2
47541: NOT
47542: PUSH
47543: LD_VAR 0 3
47547: NOT
47548: OR
47549: IFFALSE 47553
// exit ;
47551: GO 49205
// if not range then
47553: LD_VAR 0 4
47557: NOT
47558: IFFALSE 47568
// range := 10 ;
47560: LD_ADDR_VAR 0 4
47564: PUSH
47565: LD_INT 10
47567: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47568: LD_ADDR_VAR 0 8
47572: PUSH
47573: LD_INT 81
47575: PUSH
47576: LD_VAR 0 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 92
47587: PUSH
47588: LD_VAR 0 2
47592: PUSH
47593: LD_VAR 0 3
47597: PUSH
47598: LD_VAR 0 4
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 3
47611: PUSH
47612: LD_INT 21
47614: PUSH
47615: LD_INT 3
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: PPUSH
47631: CALL_OW 69
47635: ST_TO_ADDR
// if not tmp then
47636: LD_VAR 0 8
47640: NOT
47641: IFFALSE 47645
// exit ;
47643: GO 49205
// for i in tmp do
47645: LD_ADDR_VAR 0 6
47649: PUSH
47650: LD_VAR 0 8
47654: PUSH
47655: FOR_IN
47656: IFFALSE 49180
// begin points := [ 0 , 0 , 0 ] ;
47658: LD_ADDR_VAR 0 9
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: ST_TO_ADDR
// bpoints := 1 ;
47677: LD_ADDR_VAR 0 10
47681: PUSH
47682: LD_INT 1
47684: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47685: LD_VAR 0 6
47689: PPUSH
47690: CALL_OW 247
47694: PUSH
47695: LD_INT 1
47697: DOUBLE
47698: EQUAL
47699: IFTRUE 47703
47701: GO 48281
47703: POP
// begin if GetClass ( i ) = 1 then
47704: LD_VAR 0 6
47708: PPUSH
47709: CALL_OW 257
47713: PUSH
47714: LD_INT 1
47716: EQUAL
47717: IFFALSE 47738
// points := [ 10 , 5 , 3 ] ;
47719: LD_ADDR_VAR 0 9
47723: PUSH
47724: LD_INT 10
47726: PUSH
47727: LD_INT 5
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47738: LD_VAR 0 6
47742: PPUSH
47743: CALL_OW 257
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: LD_INT 4
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: IN
47762: IFFALSE 47783
// points := [ 3 , 2 , 1 ] ;
47764: LD_ADDR_VAR 0 9
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47783: LD_VAR 0 6
47787: PPUSH
47788: CALL_OW 257
47792: PUSH
47793: LD_INT 5
47795: EQUAL
47796: IFFALSE 47817
// points := [ 130 , 5 , 2 ] ;
47798: LD_ADDR_VAR 0 9
47802: PUSH
47803: LD_INT 130
47805: PUSH
47806: LD_INT 5
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47817: LD_VAR 0 6
47821: PPUSH
47822: CALL_OW 257
47826: PUSH
47827: LD_INT 8
47829: EQUAL
47830: IFFALSE 47851
// points := [ 35 , 35 , 30 ] ;
47832: LD_ADDR_VAR 0 9
47836: PUSH
47837: LD_INT 35
47839: PUSH
47840: LD_INT 35
47842: PUSH
47843: LD_INT 30
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47851: LD_VAR 0 6
47855: PPUSH
47856: CALL_OW 257
47860: PUSH
47861: LD_INT 9
47863: EQUAL
47864: IFFALSE 47885
// points := [ 20 , 55 , 40 ] ;
47866: LD_ADDR_VAR 0 9
47870: PUSH
47871: LD_INT 20
47873: PUSH
47874: LD_INT 55
47876: PUSH
47877: LD_INT 40
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47885: LD_VAR 0 6
47889: PPUSH
47890: CALL_OW 257
47894: PUSH
47895: LD_INT 12
47897: PUSH
47898: LD_INT 16
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: IN
47905: IFFALSE 47926
// points := [ 5 , 3 , 2 ] ;
47907: LD_ADDR_VAR 0 9
47911: PUSH
47912: LD_INT 5
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47926: LD_VAR 0 6
47930: PPUSH
47931: CALL_OW 257
47935: PUSH
47936: LD_INT 17
47938: EQUAL
47939: IFFALSE 47960
// points := [ 100 , 50 , 75 ] ;
47941: LD_ADDR_VAR 0 9
47945: PUSH
47946: LD_INT 100
47948: PUSH
47949: LD_INT 50
47951: PUSH
47952: LD_INT 75
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47960: LD_VAR 0 6
47964: PPUSH
47965: CALL_OW 257
47969: PUSH
47970: LD_INT 15
47972: EQUAL
47973: IFFALSE 47994
// points := [ 10 , 5 , 3 ] ;
47975: LD_ADDR_VAR 0 9
47979: PUSH
47980: LD_INT 10
47982: PUSH
47983: LD_INT 5
47985: PUSH
47986: LD_INT 3
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47994: LD_VAR 0 6
47998: PPUSH
47999: CALL_OW 257
48003: PUSH
48004: LD_INT 14
48006: EQUAL
48007: IFFALSE 48028
// points := [ 10 , 0 , 0 ] ;
48009: LD_ADDR_VAR 0 9
48013: PUSH
48014: LD_INT 10
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48028: LD_VAR 0 6
48032: PPUSH
48033: CALL_OW 257
48037: PUSH
48038: LD_INT 11
48040: EQUAL
48041: IFFALSE 48062
// points := [ 30 , 10 , 5 ] ;
48043: LD_ADDR_VAR 0 9
48047: PUSH
48048: LD_INT 30
48050: PUSH
48051: LD_INT 10
48053: PUSH
48054: LD_INT 5
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48062: LD_VAR 0 1
48066: PPUSH
48067: LD_INT 5
48069: PPUSH
48070: CALL_OW 321
48074: PUSH
48075: LD_INT 2
48077: EQUAL
48078: IFFALSE 48095
// bpoints := bpoints * 1.8 ;
48080: LD_ADDR_VAR 0 10
48084: PUSH
48085: LD_VAR 0 10
48089: PUSH
48090: LD_REAL  1.80000000000000E+0000
48093: MUL
48094: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48095: LD_VAR 0 6
48099: PPUSH
48100: CALL_OW 257
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: LD_INT 4
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: IN
48123: PUSH
48124: LD_VAR 0 1
48128: PPUSH
48129: LD_INT 51
48131: PPUSH
48132: CALL_OW 321
48136: PUSH
48137: LD_INT 2
48139: EQUAL
48140: AND
48141: IFFALSE 48158
// bpoints := bpoints * 1.2 ;
48143: LD_ADDR_VAR 0 10
48147: PUSH
48148: LD_VAR 0 10
48152: PUSH
48153: LD_REAL  1.20000000000000E+0000
48156: MUL
48157: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48158: LD_VAR 0 6
48162: PPUSH
48163: CALL_OW 257
48167: PUSH
48168: LD_INT 5
48170: PUSH
48171: LD_INT 7
48173: PUSH
48174: LD_INT 9
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: IN
48182: PUSH
48183: LD_VAR 0 1
48187: PPUSH
48188: LD_INT 52
48190: PPUSH
48191: CALL_OW 321
48195: PUSH
48196: LD_INT 2
48198: EQUAL
48199: AND
48200: IFFALSE 48217
// bpoints := bpoints * 1.5 ;
48202: LD_ADDR_VAR 0 10
48206: PUSH
48207: LD_VAR 0 10
48211: PUSH
48212: LD_REAL  1.50000000000000E+0000
48215: MUL
48216: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48217: LD_VAR 0 1
48221: PPUSH
48222: LD_INT 66
48224: PPUSH
48225: CALL_OW 321
48229: PUSH
48230: LD_INT 2
48232: EQUAL
48233: IFFALSE 48250
// bpoints := bpoints * 1.1 ;
48235: LD_ADDR_VAR 0 10
48239: PUSH
48240: LD_VAR 0 10
48244: PUSH
48245: LD_REAL  1.10000000000000E+0000
48248: MUL
48249: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48250: LD_ADDR_VAR 0 10
48254: PUSH
48255: LD_VAR 0 10
48259: PUSH
48260: LD_VAR 0 6
48264: PPUSH
48265: LD_INT 1
48267: PPUSH
48268: CALL_OW 259
48272: PUSH
48273: LD_REAL  1.15000000000000E+0000
48276: MUL
48277: MUL
48278: ST_TO_ADDR
// end ; unit_vehicle :
48279: GO 49109
48281: LD_INT 2
48283: DOUBLE
48284: EQUAL
48285: IFTRUE 48289
48287: GO 49097
48289: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48290: LD_VAR 0 6
48294: PPUSH
48295: CALL_OW 264
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 42
48305: PUSH
48306: LD_INT 24
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: IN
48314: IFFALSE 48335
// points := [ 25 , 5 , 3 ] ;
48316: LD_ADDR_VAR 0 9
48320: PUSH
48321: LD_INT 25
48323: PUSH
48324: LD_INT 5
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: LIST
48334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48335: LD_VAR 0 6
48339: PPUSH
48340: CALL_OW 264
48344: PUSH
48345: LD_INT 4
48347: PUSH
48348: LD_INT 43
48350: PUSH
48351: LD_INT 25
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: IN
48359: IFFALSE 48380
// points := [ 40 , 15 , 5 ] ;
48361: LD_ADDR_VAR 0 9
48365: PUSH
48366: LD_INT 40
48368: PUSH
48369: LD_INT 15
48371: PUSH
48372: LD_INT 5
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48380: LD_VAR 0 6
48384: PPUSH
48385: CALL_OW 264
48389: PUSH
48390: LD_INT 3
48392: PUSH
48393: LD_INT 23
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: IN
48400: IFFALSE 48421
// points := [ 7 , 25 , 8 ] ;
48402: LD_ADDR_VAR 0 9
48406: PUSH
48407: LD_INT 7
48409: PUSH
48410: LD_INT 25
48412: PUSH
48413: LD_INT 8
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48421: LD_VAR 0 6
48425: PPUSH
48426: CALL_OW 264
48430: PUSH
48431: LD_INT 5
48433: PUSH
48434: LD_INT 27
48436: PUSH
48437: LD_INT 44
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: LIST
48444: IN
48445: IFFALSE 48466
// points := [ 14 , 50 , 16 ] ;
48447: LD_ADDR_VAR 0 9
48451: PUSH
48452: LD_INT 14
48454: PUSH
48455: LD_INT 50
48457: PUSH
48458: LD_INT 16
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48466: LD_VAR 0 6
48470: PPUSH
48471: CALL_OW 264
48475: PUSH
48476: LD_INT 6
48478: PUSH
48479: LD_INT 46
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: IN
48486: IFFALSE 48507
// points := [ 32 , 120 , 70 ] ;
48488: LD_ADDR_VAR 0 9
48492: PUSH
48493: LD_INT 32
48495: PUSH
48496: LD_INT 120
48498: PUSH
48499: LD_INT 70
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48507: LD_VAR 0 6
48511: PPUSH
48512: CALL_OW 264
48516: PUSH
48517: LD_INT 7
48519: PUSH
48520: LD_INT 28
48522: PUSH
48523: LD_INT 45
48525: PUSH
48526: LD_EXP 56
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: IN
48537: IFFALSE 48558
// points := [ 35 , 20 , 45 ] ;
48539: LD_ADDR_VAR 0 9
48543: PUSH
48544: LD_INT 35
48546: PUSH
48547: LD_INT 20
48549: PUSH
48550: LD_INT 45
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: LIST
48557: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48558: LD_VAR 0 6
48562: PPUSH
48563: CALL_OW 264
48567: PUSH
48568: LD_INT 47
48570: PUSH
48571: EMPTY
48572: LIST
48573: IN
48574: IFFALSE 48595
// points := [ 67 , 45 , 75 ] ;
48576: LD_ADDR_VAR 0 9
48580: PUSH
48581: LD_INT 67
48583: PUSH
48584: LD_INT 45
48586: PUSH
48587: LD_INT 75
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48595: LD_VAR 0 6
48599: PPUSH
48600: CALL_OW 264
48604: PUSH
48605: LD_INT 26
48607: PUSH
48608: EMPTY
48609: LIST
48610: IN
48611: IFFALSE 48632
// points := [ 120 , 30 , 80 ] ;
48613: LD_ADDR_VAR 0 9
48617: PUSH
48618: LD_INT 120
48620: PUSH
48621: LD_INT 30
48623: PUSH
48624: LD_INT 80
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: LIST
48631: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48632: LD_VAR 0 6
48636: PPUSH
48637: CALL_OW 264
48641: PUSH
48642: LD_INT 22
48644: PUSH
48645: EMPTY
48646: LIST
48647: IN
48648: IFFALSE 48669
// points := [ 40 , 1 , 1 ] ;
48650: LD_ADDR_VAR 0 9
48654: PUSH
48655: LD_INT 40
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48669: LD_VAR 0 6
48673: PPUSH
48674: CALL_OW 264
48678: PUSH
48679: LD_INT 29
48681: PUSH
48682: EMPTY
48683: LIST
48684: IN
48685: IFFALSE 48706
// points := [ 70 , 200 , 400 ] ;
48687: LD_ADDR_VAR 0 9
48691: PUSH
48692: LD_INT 70
48694: PUSH
48695: LD_INT 200
48697: PUSH
48698: LD_INT 400
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48706: LD_VAR 0 6
48710: PPUSH
48711: CALL_OW 264
48715: PUSH
48716: LD_INT 14
48718: PUSH
48719: LD_INT 53
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: IN
48726: IFFALSE 48747
// points := [ 40 , 10 , 20 ] ;
48728: LD_ADDR_VAR 0 9
48732: PUSH
48733: LD_INT 40
48735: PUSH
48736: LD_INT 10
48738: PUSH
48739: LD_INT 20
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48747: LD_VAR 0 6
48751: PPUSH
48752: CALL_OW 264
48756: PUSH
48757: LD_INT 9
48759: PUSH
48760: EMPTY
48761: LIST
48762: IN
48763: IFFALSE 48784
// points := [ 5 , 70 , 20 ] ;
48765: LD_ADDR_VAR 0 9
48769: PUSH
48770: LD_INT 5
48772: PUSH
48773: LD_INT 70
48775: PUSH
48776: LD_INT 20
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48784: LD_VAR 0 6
48788: PPUSH
48789: CALL_OW 264
48793: PUSH
48794: LD_INT 10
48796: PUSH
48797: EMPTY
48798: LIST
48799: IN
48800: IFFALSE 48821
// points := [ 35 , 110 , 70 ] ;
48802: LD_ADDR_VAR 0 9
48806: PUSH
48807: LD_INT 35
48809: PUSH
48810: LD_INT 110
48812: PUSH
48813: LD_INT 70
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48821: LD_VAR 0 6
48825: PPUSH
48826: CALL_OW 265
48830: PUSH
48831: LD_INT 25
48833: EQUAL
48834: IFFALSE 48855
// points := [ 80 , 65 , 100 ] ;
48836: LD_ADDR_VAR 0 9
48840: PUSH
48841: LD_INT 80
48843: PUSH
48844: LD_INT 65
48846: PUSH
48847: LD_INT 100
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48855: LD_VAR 0 6
48859: PPUSH
48860: CALL_OW 263
48864: PUSH
48865: LD_INT 1
48867: EQUAL
48868: IFFALSE 48903
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48870: LD_ADDR_VAR 0 10
48874: PUSH
48875: LD_VAR 0 10
48879: PUSH
48880: LD_VAR 0 6
48884: PPUSH
48885: CALL_OW 311
48889: PPUSH
48890: LD_INT 3
48892: PPUSH
48893: CALL_OW 259
48897: PUSH
48898: LD_INT 4
48900: MUL
48901: MUL
48902: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48903: LD_VAR 0 6
48907: PPUSH
48908: CALL_OW 263
48912: PUSH
48913: LD_INT 2
48915: EQUAL
48916: IFFALSE 48967
// begin j := IsControledBy ( i ) ;
48918: LD_ADDR_VAR 0 7
48922: PUSH
48923: LD_VAR 0 6
48927: PPUSH
48928: CALL_OW 312
48932: ST_TO_ADDR
// if j then
48933: LD_VAR 0 7
48937: IFFALSE 48967
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48939: LD_ADDR_VAR 0 10
48943: PUSH
48944: LD_VAR 0 10
48948: PUSH
48949: LD_VAR 0 7
48953: PPUSH
48954: LD_INT 3
48956: PPUSH
48957: CALL_OW 259
48961: PUSH
48962: LD_INT 3
48964: MUL
48965: MUL
48966: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48967: LD_VAR 0 6
48971: PPUSH
48972: CALL_OW 264
48976: PUSH
48977: LD_INT 5
48979: PUSH
48980: LD_INT 6
48982: PUSH
48983: LD_INT 46
48985: PUSH
48986: LD_INT 44
48988: PUSH
48989: LD_INT 47
48991: PUSH
48992: LD_INT 45
48994: PUSH
48995: LD_INT 28
48997: PUSH
48998: LD_INT 7
49000: PUSH
49001: LD_INT 27
49003: PUSH
49004: LD_INT 29
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: IN
49019: PUSH
49020: LD_VAR 0 1
49024: PPUSH
49025: LD_INT 52
49027: PPUSH
49028: CALL_OW 321
49032: PUSH
49033: LD_INT 2
49035: EQUAL
49036: AND
49037: IFFALSE 49054
// bpoints := bpoints * 1.2 ;
49039: LD_ADDR_VAR 0 10
49043: PUSH
49044: LD_VAR 0 10
49048: PUSH
49049: LD_REAL  1.20000000000000E+0000
49052: MUL
49053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49054: LD_VAR 0 6
49058: PPUSH
49059: CALL_OW 264
49063: PUSH
49064: LD_INT 6
49066: PUSH
49067: LD_INT 46
49069: PUSH
49070: LD_INT 47
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: LIST
49077: IN
49078: IFFALSE 49095
// bpoints := bpoints * 1.2 ;
49080: LD_ADDR_VAR 0 10
49084: PUSH
49085: LD_VAR 0 10
49089: PUSH
49090: LD_REAL  1.20000000000000E+0000
49093: MUL
49094: ST_TO_ADDR
// end ; unit_building :
49095: GO 49109
49097: LD_INT 3
49099: DOUBLE
49100: EQUAL
49101: IFTRUE 49105
49103: GO 49108
49105: POP
// ; end ;
49106: GO 49109
49108: POP
// for j = 1 to 3 do
49109: LD_ADDR_VAR 0 7
49113: PUSH
49114: DOUBLE
49115: LD_INT 1
49117: DEC
49118: ST_TO_ADDR
49119: LD_INT 3
49121: PUSH
49122: FOR_TO
49123: IFFALSE 49176
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49125: LD_ADDR_VAR 0 5
49129: PUSH
49130: LD_VAR 0 5
49134: PPUSH
49135: LD_VAR 0 7
49139: PPUSH
49140: LD_VAR 0 5
49144: PUSH
49145: LD_VAR 0 7
49149: ARRAY
49150: PUSH
49151: LD_VAR 0 9
49155: PUSH
49156: LD_VAR 0 7
49160: ARRAY
49161: PUSH
49162: LD_VAR 0 10
49166: MUL
49167: PLUS
49168: PPUSH
49169: CALL_OW 1
49173: ST_TO_ADDR
49174: GO 49122
49176: POP
49177: POP
// end ;
49178: GO 47655
49180: POP
49181: POP
// result := Replace ( result , 4 , tmp ) ;
49182: LD_ADDR_VAR 0 5
49186: PUSH
49187: LD_VAR 0 5
49191: PPUSH
49192: LD_INT 4
49194: PPUSH
49195: LD_VAR 0 8
49199: PPUSH
49200: CALL_OW 1
49204: ST_TO_ADDR
// end ;
49205: LD_VAR 0 5
49209: RET
// export function DangerAtRange ( unit , range ) ; begin
49210: LD_INT 0
49212: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49213: LD_ADDR_VAR 0 3
49217: PUSH
49218: LD_VAR 0 1
49222: PPUSH
49223: CALL_OW 255
49227: PPUSH
49228: LD_VAR 0 1
49232: PPUSH
49233: CALL_OW 250
49237: PPUSH
49238: LD_VAR 0 1
49242: PPUSH
49243: CALL_OW 251
49247: PPUSH
49248: LD_VAR 0 2
49252: PPUSH
49253: CALL 47507 0 4
49257: ST_TO_ADDR
// end ;
49258: LD_VAR 0 3
49262: RET
// export function DangerInArea ( side , area ) ; begin
49263: LD_INT 0
49265: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49266: LD_ADDR_VAR 0 3
49270: PUSH
49271: LD_VAR 0 2
49275: PPUSH
49276: LD_INT 81
49278: PUSH
49279: LD_VAR 0 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PPUSH
49288: CALL_OW 70
49292: ST_TO_ADDR
// end ;
49293: LD_VAR 0 3
49297: RET
// export function IsExtension ( b ) ; begin
49298: LD_INT 0
49300: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49301: LD_ADDR_VAR 0 2
49305: PUSH
49306: LD_VAR 0 1
49310: PUSH
49311: LD_INT 23
49313: PUSH
49314: LD_INT 20
49316: PUSH
49317: LD_INT 22
49319: PUSH
49320: LD_INT 17
49322: PUSH
49323: LD_INT 24
49325: PUSH
49326: LD_INT 21
49328: PUSH
49329: LD_INT 19
49331: PUSH
49332: LD_INT 16
49334: PUSH
49335: LD_INT 25
49337: PUSH
49338: LD_INT 18
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: IN
49353: ST_TO_ADDR
// end ;
49354: LD_VAR 0 2
49358: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49359: LD_INT 0
49361: PPUSH
49362: PPUSH
49363: PPUSH
// result := [ ] ;
49364: LD_ADDR_VAR 0 4
49368: PUSH
49369: EMPTY
49370: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49371: LD_ADDR_VAR 0 5
49375: PUSH
49376: LD_VAR 0 2
49380: PPUSH
49381: LD_INT 21
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PPUSH
49391: CALL_OW 70
49395: ST_TO_ADDR
// if not tmp then
49396: LD_VAR 0 5
49400: NOT
49401: IFFALSE 49405
// exit ;
49403: GO 49469
// if checkLink then
49405: LD_VAR 0 3
49409: IFFALSE 49459
// begin for i in tmp do
49411: LD_ADDR_VAR 0 6
49415: PUSH
49416: LD_VAR 0 5
49420: PUSH
49421: FOR_IN
49422: IFFALSE 49457
// if GetBase ( i ) <> base then
49424: LD_VAR 0 6
49428: PPUSH
49429: CALL_OW 274
49433: PUSH
49434: LD_VAR 0 1
49438: NONEQUAL
49439: IFFALSE 49455
// ComLinkToBase ( base , i ) ;
49441: LD_VAR 0 1
49445: PPUSH
49446: LD_VAR 0 6
49450: PPUSH
49451: CALL_OW 169
49455: GO 49421
49457: POP
49458: POP
// end ; result := tmp ;
49459: LD_ADDR_VAR 0 4
49463: PUSH
49464: LD_VAR 0 5
49468: ST_TO_ADDR
// end ;
49469: LD_VAR 0 4
49473: RET
// export function ComComplete ( units , b ) ; var i ; begin
49474: LD_INT 0
49476: PPUSH
49477: PPUSH
// if not units then
49478: LD_VAR 0 1
49482: NOT
49483: IFFALSE 49487
// exit ;
49485: GO 49577
// for i in units do
49487: LD_ADDR_VAR 0 4
49491: PUSH
49492: LD_VAR 0 1
49496: PUSH
49497: FOR_IN
49498: IFFALSE 49575
// if BuildingStatus ( b ) = bs_build then
49500: LD_VAR 0 2
49504: PPUSH
49505: CALL_OW 461
49509: PUSH
49510: LD_INT 1
49512: EQUAL
49513: IFFALSE 49573
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49515: LD_VAR 0 4
49519: PPUSH
49520: LD_STRING h
49522: PUSH
49523: LD_VAR 0 2
49527: PPUSH
49528: CALL_OW 250
49532: PUSH
49533: LD_VAR 0 2
49537: PPUSH
49538: CALL_OW 251
49542: PUSH
49543: LD_VAR 0 2
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: PPUSH
49569: CALL_OW 446
49573: GO 49497
49575: POP
49576: POP
// end ;
49577: LD_VAR 0 3
49581: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49582: LD_INT 0
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
49588: PPUSH
49589: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
49590: LD_VAR 0 1
49594: NOT
49595: PUSH
49596: LD_VAR 0 1
49600: PPUSH
49601: CALL_OW 263
49605: PUSH
49606: LD_INT 2
49608: EQUAL
49609: NOT
49610: OR
49611: IFFALSE 49615
// exit ;
49613: GO 49931
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49615: LD_ADDR_VAR 0 6
49619: PUSH
49620: LD_INT 22
49622: PUSH
49623: LD_VAR 0 1
49627: PPUSH
49628: CALL_OW 255
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 30
49642: PUSH
49643: LD_INT 36
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 34
49652: PUSH
49653: LD_INT 31
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PPUSH
49669: CALL_OW 69
49673: ST_TO_ADDR
// if not tmp then
49674: LD_VAR 0 6
49678: NOT
49679: IFFALSE 49683
// exit ;
49681: GO 49931
// result := [ ] ;
49683: LD_ADDR_VAR 0 2
49687: PUSH
49688: EMPTY
49689: ST_TO_ADDR
// for i in tmp do
49690: LD_ADDR_VAR 0 3
49694: PUSH
49695: LD_VAR 0 6
49699: PUSH
49700: FOR_IN
49701: IFFALSE 49772
// begin t := UnitsInside ( i ) ;
49703: LD_ADDR_VAR 0 4
49707: PUSH
49708: LD_VAR 0 3
49712: PPUSH
49713: CALL_OW 313
49717: ST_TO_ADDR
// if t then
49718: LD_VAR 0 4
49722: IFFALSE 49770
// for j in t do
49724: LD_ADDR_VAR 0 7
49728: PUSH
49729: LD_VAR 0 4
49733: PUSH
49734: FOR_IN
49735: IFFALSE 49768
// result := Insert ( result , result + 1 , j ) ;
49737: LD_ADDR_VAR 0 2
49741: PUSH
49742: LD_VAR 0 2
49746: PPUSH
49747: LD_VAR 0 2
49751: PUSH
49752: LD_INT 1
49754: PLUS
49755: PPUSH
49756: LD_VAR 0 7
49760: PPUSH
49761: CALL_OW 2
49765: ST_TO_ADDR
49766: GO 49734
49768: POP
49769: POP
// end ;
49770: GO 49700
49772: POP
49773: POP
// if not result then
49774: LD_VAR 0 2
49778: NOT
49779: IFFALSE 49783
// exit ;
49781: GO 49931
// mech := result [ 1 ] ;
49783: LD_ADDR_VAR 0 5
49787: PUSH
49788: LD_VAR 0 2
49792: PUSH
49793: LD_INT 1
49795: ARRAY
49796: ST_TO_ADDR
// if result > 1 then
49797: LD_VAR 0 2
49801: PUSH
49802: LD_INT 1
49804: GREATER
49805: IFFALSE 49917
// for i = 2 to result do
49807: LD_ADDR_VAR 0 3
49811: PUSH
49812: DOUBLE
49813: LD_INT 2
49815: DEC
49816: ST_TO_ADDR
49817: LD_VAR 0 2
49821: PUSH
49822: FOR_TO
49823: IFFALSE 49915
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49825: LD_ADDR_VAR 0 4
49829: PUSH
49830: LD_VAR 0 2
49834: PUSH
49835: LD_VAR 0 3
49839: ARRAY
49840: PPUSH
49841: LD_INT 3
49843: PPUSH
49844: CALL_OW 259
49848: PUSH
49849: LD_VAR 0 2
49853: PUSH
49854: LD_VAR 0 3
49858: ARRAY
49859: PPUSH
49860: CALL_OW 432
49864: MINUS
49865: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49866: LD_VAR 0 4
49870: PUSH
49871: LD_VAR 0 5
49875: PPUSH
49876: LD_INT 3
49878: PPUSH
49879: CALL_OW 259
49883: PUSH
49884: LD_VAR 0 5
49888: PPUSH
49889: CALL_OW 432
49893: MINUS
49894: GREATEREQUAL
49895: IFFALSE 49913
// mech := result [ i ] ;
49897: LD_ADDR_VAR 0 5
49901: PUSH
49902: LD_VAR 0 2
49906: PUSH
49907: LD_VAR 0 3
49911: ARRAY
49912: ST_TO_ADDR
// end ;
49913: GO 49822
49915: POP
49916: POP
// ComLinkTo ( vehicle , mech ) ;
49917: LD_VAR 0 1
49921: PPUSH
49922: LD_VAR 0 5
49926: PPUSH
49927: CALL_OW 135
// end ;
49931: LD_VAR 0 2
49935: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49936: LD_INT 0
49938: PPUSH
49939: PPUSH
49940: PPUSH
49941: PPUSH
49942: PPUSH
49943: PPUSH
49944: PPUSH
49945: PPUSH
49946: PPUSH
49947: PPUSH
49948: PPUSH
49949: PPUSH
49950: PPUSH
// result := [ ] ;
49951: LD_ADDR_VAR 0 7
49955: PUSH
49956: EMPTY
49957: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49958: LD_VAR 0 1
49962: PPUSH
49963: CALL_OW 266
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: IN
49978: NOT
49979: IFFALSE 49983
// exit ;
49981: GO 51617
// if name then
49983: LD_VAR 0 3
49987: IFFALSE 50003
// SetBName ( base_dep , name ) ;
49989: LD_VAR 0 1
49993: PPUSH
49994: LD_VAR 0 3
49998: PPUSH
49999: CALL_OW 500
// base := GetBase ( base_dep ) ;
50003: LD_ADDR_VAR 0 15
50007: PUSH
50008: LD_VAR 0 1
50012: PPUSH
50013: CALL_OW 274
50017: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50018: LD_ADDR_VAR 0 16
50022: PUSH
50023: LD_VAR 0 1
50027: PPUSH
50028: CALL_OW 255
50032: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50033: LD_ADDR_VAR 0 17
50037: PUSH
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 248
50047: ST_TO_ADDR
// if sources then
50048: LD_VAR 0 5
50052: IFFALSE 50099
// for i = 1 to 3 do
50054: LD_ADDR_VAR 0 8
50058: PUSH
50059: DOUBLE
50060: LD_INT 1
50062: DEC
50063: ST_TO_ADDR
50064: LD_INT 3
50066: PUSH
50067: FOR_TO
50068: IFFALSE 50097
// AddResourceType ( base , i , sources [ i ] ) ;
50070: LD_VAR 0 15
50074: PPUSH
50075: LD_VAR 0 8
50079: PPUSH
50080: LD_VAR 0 5
50084: PUSH
50085: LD_VAR 0 8
50089: ARRAY
50090: PPUSH
50091: CALL_OW 276
50095: GO 50067
50097: POP
50098: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50099: LD_ADDR_VAR 0 18
50103: PUSH
50104: LD_VAR 0 15
50108: PPUSH
50109: LD_VAR 0 2
50113: PPUSH
50114: LD_INT 1
50116: PPUSH
50117: CALL 49359 0 3
50121: ST_TO_ADDR
// InitHc ;
50122: CALL_OW 19
// InitUc ;
50126: CALL_OW 18
// uc_side := side ;
50130: LD_ADDR_OWVAR 20
50134: PUSH
50135: LD_VAR 0 16
50139: ST_TO_ADDR
// uc_nation := nation ;
50140: LD_ADDR_OWVAR 21
50144: PUSH
50145: LD_VAR 0 17
50149: ST_TO_ADDR
// if buildings then
50150: LD_VAR 0 18
50154: IFFALSE 51476
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50156: LD_ADDR_VAR 0 19
50160: PUSH
50161: LD_VAR 0 18
50165: PPUSH
50166: LD_INT 2
50168: PUSH
50169: LD_INT 30
50171: PUSH
50172: LD_INT 29
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 30
50181: PUSH
50182: LD_INT 30
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: LIST
50193: PPUSH
50194: CALL_OW 72
50198: ST_TO_ADDR
// if tmp then
50199: LD_VAR 0 19
50203: IFFALSE 50251
// for i in tmp do
50205: LD_ADDR_VAR 0 8
50209: PUSH
50210: LD_VAR 0 19
50214: PUSH
50215: FOR_IN
50216: IFFALSE 50249
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50218: LD_VAR 0 8
50222: PPUSH
50223: CALL_OW 250
50227: PPUSH
50228: LD_VAR 0 8
50232: PPUSH
50233: CALL_OW 251
50237: PPUSH
50238: LD_VAR 0 16
50242: PPUSH
50243: CALL_OW 441
50247: GO 50215
50249: POP
50250: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50251: LD_VAR 0 18
50255: PPUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 30
50261: PUSH
50262: LD_INT 32
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 30
50271: PUSH
50272: LD_INT 33
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: LIST
50283: PPUSH
50284: CALL_OW 72
50288: IFFALSE 50376
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50290: LD_ADDR_VAR 0 8
50294: PUSH
50295: LD_VAR 0 18
50299: PPUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 30
50305: PUSH
50306: LD_INT 32
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 30
50315: PUSH
50316: LD_INT 33
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: PPUSH
50328: CALL_OW 72
50332: PUSH
50333: FOR_IN
50334: IFFALSE 50374
// begin if not GetBWeapon ( i ) then
50336: LD_VAR 0 8
50340: PPUSH
50341: CALL_OW 269
50345: NOT
50346: IFFALSE 50372
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50348: LD_VAR 0 8
50352: PPUSH
50353: LD_VAR 0 8
50357: PPUSH
50358: LD_VAR 0 2
50362: PPUSH
50363: CALL 51622 0 2
50367: PPUSH
50368: CALL_OW 431
// end ;
50372: GO 50333
50374: POP
50375: POP
// end ; for i = 1 to personel do
50376: LD_ADDR_VAR 0 8
50380: PUSH
50381: DOUBLE
50382: LD_INT 1
50384: DEC
50385: ST_TO_ADDR
50386: LD_VAR 0 6
50390: PUSH
50391: FOR_TO
50392: IFFALSE 51456
// begin if i > 4 then
50394: LD_VAR 0 8
50398: PUSH
50399: LD_INT 4
50401: GREATER
50402: IFFALSE 50406
// break ;
50404: GO 51456
// case i of 1 :
50406: LD_VAR 0 8
50410: PUSH
50411: LD_INT 1
50413: DOUBLE
50414: EQUAL
50415: IFTRUE 50419
50417: GO 50499
50419: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50420: LD_ADDR_VAR 0 12
50424: PUSH
50425: LD_VAR 0 18
50429: PPUSH
50430: LD_INT 22
50432: PUSH
50433: LD_VAR 0 16
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 58
50444: PUSH
50445: EMPTY
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 30
50453: PUSH
50454: LD_INT 32
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 30
50463: PUSH
50464: LD_INT 4
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 30
50473: PUSH
50474: LD_INT 5
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: PPUSH
50492: CALL_OW 72
50496: ST_TO_ADDR
50497: GO 50721
50499: LD_INT 2
50501: DOUBLE
50502: EQUAL
50503: IFTRUE 50507
50505: GO 50569
50507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50508: LD_ADDR_VAR 0 12
50512: PUSH
50513: LD_VAR 0 18
50517: PPUSH
50518: LD_INT 22
50520: PUSH
50521: LD_VAR 0 16
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 30
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 30
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PPUSH
50562: CALL_OW 72
50566: ST_TO_ADDR
50567: GO 50721
50569: LD_INT 3
50571: DOUBLE
50572: EQUAL
50573: IFTRUE 50577
50575: GO 50639
50577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50578: LD_ADDR_VAR 0 12
50582: PUSH
50583: LD_VAR 0 18
50587: PPUSH
50588: LD_INT 22
50590: PUSH
50591: LD_VAR 0 16
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 30
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 30
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PPUSH
50632: CALL_OW 72
50636: ST_TO_ADDR
50637: GO 50721
50639: LD_INT 4
50641: DOUBLE
50642: EQUAL
50643: IFTRUE 50647
50645: GO 50720
50647: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50648: LD_ADDR_VAR 0 12
50652: PUSH
50653: LD_VAR 0 18
50657: PPUSH
50658: LD_INT 22
50660: PUSH
50661: LD_VAR 0 16
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 30
50675: PUSH
50676: LD_INT 6
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 30
50685: PUSH
50686: LD_INT 7
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 30
50695: PUSH
50696: LD_INT 8
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PPUSH
50713: CALL_OW 72
50717: ST_TO_ADDR
50718: GO 50721
50720: POP
// if i = 1 then
50721: LD_VAR 0 8
50725: PUSH
50726: LD_INT 1
50728: EQUAL
50729: IFFALSE 50840
// begin tmp := [ ] ;
50731: LD_ADDR_VAR 0 19
50735: PUSH
50736: EMPTY
50737: ST_TO_ADDR
// for j in f do
50738: LD_ADDR_VAR 0 9
50742: PUSH
50743: LD_VAR 0 12
50747: PUSH
50748: FOR_IN
50749: IFFALSE 50822
// if GetBType ( j ) = b_bunker then
50751: LD_VAR 0 9
50755: PPUSH
50756: CALL_OW 266
50760: PUSH
50761: LD_INT 32
50763: EQUAL
50764: IFFALSE 50791
// tmp := Insert ( tmp , 1 , j ) else
50766: LD_ADDR_VAR 0 19
50770: PUSH
50771: LD_VAR 0 19
50775: PPUSH
50776: LD_INT 1
50778: PPUSH
50779: LD_VAR 0 9
50783: PPUSH
50784: CALL_OW 2
50788: ST_TO_ADDR
50789: GO 50820
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50791: LD_ADDR_VAR 0 19
50795: PUSH
50796: LD_VAR 0 19
50800: PPUSH
50801: LD_VAR 0 19
50805: PUSH
50806: LD_INT 1
50808: PLUS
50809: PPUSH
50810: LD_VAR 0 9
50814: PPUSH
50815: CALL_OW 2
50819: ST_TO_ADDR
50820: GO 50748
50822: POP
50823: POP
// if tmp then
50824: LD_VAR 0 19
50828: IFFALSE 50840
// f := tmp ;
50830: LD_ADDR_VAR 0 12
50834: PUSH
50835: LD_VAR 0 19
50839: ST_TO_ADDR
// end ; x := personel [ i ] ;
50840: LD_ADDR_VAR 0 13
50844: PUSH
50845: LD_VAR 0 6
50849: PUSH
50850: LD_VAR 0 8
50854: ARRAY
50855: ST_TO_ADDR
// if x = - 1 then
50856: LD_VAR 0 13
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: EQUAL
50865: IFFALSE 51074
// begin for j in f do
50867: LD_ADDR_VAR 0 9
50871: PUSH
50872: LD_VAR 0 12
50876: PUSH
50877: FOR_IN
50878: IFFALSE 51070
// repeat InitHc ;
50880: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50884: LD_VAR 0 9
50888: PPUSH
50889: CALL_OW 266
50893: PUSH
50894: LD_INT 5
50896: EQUAL
50897: IFFALSE 50967
// begin if UnitsInside ( j ) < 3 then
50899: LD_VAR 0 9
50903: PPUSH
50904: CALL_OW 313
50908: PUSH
50909: LD_INT 3
50911: LESS
50912: IFFALSE 50948
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50914: LD_INT 0
50916: PPUSH
50917: LD_INT 5
50919: PUSH
50920: LD_INT 8
50922: PUSH
50923: LD_INT 9
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: PUSH
50931: LD_VAR 0 17
50935: ARRAY
50936: PPUSH
50937: LD_VAR 0 4
50941: PPUSH
50942: CALL_OW 380
50946: GO 50965
// PrepareHuman ( false , i , skill ) ;
50948: LD_INT 0
50950: PPUSH
50951: LD_VAR 0 8
50955: PPUSH
50956: LD_VAR 0 4
50960: PPUSH
50961: CALL_OW 380
// end else
50965: GO 50984
// PrepareHuman ( false , i , skill ) ;
50967: LD_INT 0
50969: PPUSH
50970: LD_VAR 0 8
50974: PPUSH
50975: LD_VAR 0 4
50979: PPUSH
50980: CALL_OW 380
// un := CreateHuman ;
50984: LD_ADDR_VAR 0 14
50988: PUSH
50989: CALL_OW 44
50993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50994: LD_ADDR_VAR 0 7
50998: PUSH
50999: LD_VAR 0 7
51003: PPUSH
51004: LD_INT 1
51006: PPUSH
51007: LD_VAR 0 14
51011: PPUSH
51012: CALL_OW 2
51016: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51017: LD_VAR 0 14
51021: PPUSH
51022: LD_VAR 0 9
51026: PPUSH
51027: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51031: LD_VAR 0 9
51035: PPUSH
51036: CALL_OW 313
51040: PUSH
51041: LD_INT 6
51043: EQUAL
51044: PUSH
51045: LD_VAR 0 9
51049: PPUSH
51050: CALL_OW 266
51054: PUSH
51055: LD_INT 32
51057: PUSH
51058: LD_INT 31
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: IN
51065: OR
51066: IFFALSE 50880
51068: GO 50877
51070: POP
51071: POP
// end else
51072: GO 51454
// for j = 1 to x do
51074: LD_ADDR_VAR 0 9
51078: PUSH
51079: DOUBLE
51080: LD_INT 1
51082: DEC
51083: ST_TO_ADDR
51084: LD_VAR 0 13
51088: PUSH
51089: FOR_TO
51090: IFFALSE 51452
// begin InitHc ;
51092: CALL_OW 19
// if not f then
51096: LD_VAR 0 12
51100: NOT
51101: IFFALSE 51190
// begin PrepareHuman ( false , i , skill ) ;
51103: LD_INT 0
51105: PPUSH
51106: LD_VAR 0 8
51110: PPUSH
51111: LD_VAR 0 4
51115: PPUSH
51116: CALL_OW 380
// un := CreateHuman ;
51120: LD_ADDR_VAR 0 14
51124: PUSH
51125: CALL_OW 44
51129: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51130: LD_ADDR_VAR 0 7
51134: PUSH
51135: LD_VAR 0 7
51139: PPUSH
51140: LD_INT 1
51142: PPUSH
51143: LD_VAR 0 14
51147: PPUSH
51148: CALL_OW 2
51152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51153: LD_VAR 0 14
51157: PPUSH
51158: LD_VAR 0 1
51162: PPUSH
51163: CALL_OW 250
51167: PPUSH
51168: LD_VAR 0 1
51172: PPUSH
51173: CALL_OW 251
51177: PPUSH
51178: LD_INT 10
51180: PPUSH
51181: LD_INT 0
51183: PPUSH
51184: CALL_OW 50
// continue ;
51188: GO 51089
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51190: LD_VAR 0 12
51194: PUSH
51195: LD_INT 1
51197: ARRAY
51198: PPUSH
51199: CALL_OW 313
51203: PUSH
51204: LD_VAR 0 12
51208: PUSH
51209: LD_INT 1
51211: ARRAY
51212: PPUSH
51213: CALL_OW 266
51217: PUSH
51218: LD_INT 32
51220: PUSH
51221: LD_INT 31
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: IN
51228: AND
51229: PUSH
51230: LD_VAR 0 12
51234: PUSH
51235: LD_INT 1
51237: ARRAY
51238: PPUSH
51239: CALL_OW 313
51243: PUSH
51244: LD_INT 6
51246: EQUAL
51247: OR
51248: IFFALSE 51268
// f := Delete ( f , 1 ) ;
51250: LD_ADDR_VAR 0 12
51254: PUSH
51255: LD_VAR 0 12
51259: PPUSH
51260: LD_INT 1
51262: PPUSH
51263: CALL_OW 3
51267: ST_TO_ADDR
// if not f then
51268: LD_VAR 0 12
51272: NOT
51273: IFFALSE 51291
// begin x := x + 2 ;
51275: LD_ADDR_VAR 0 13
51279: PUSH
51280: LD_VAR 0 13
51284: PUSH
51285: LD_INT 2
51287: PLUS
51288: ST_TO_ADDR
// continue ;
51289: GO 51089
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51291: LD_VAR 0 12
51295: PUSH
51296: LD_INT 1
51298: ARRAY
51299: PPUSH
51300: CALL_OW 266
51304: PUSH
51305: LD_INT 5
51307: EQUAL
51308: IFFALSE 51382
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51310: LD_VAR 0 12
51314: PUSH
51315: LD_INT 1
51317: ARRAY
51318: PPUSH
51319: CALL_OW 313
51323: PUSH
51324: LD_INT 3
51326: LESS
51327: IFFALSE 51363
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51329: LD_INT 0
51331: PPUSH
51332: LD_INT 5
51334: PUSH
51335: LD_INT 8
51337: PUSH
51338: LD_INT 9
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: LIST
51345: PUSH
51346: LD_VAR 0 17
51350: ARRAY
51351: PPUSH
51352: LD_VAR 0 4
51356: PPUSH
51357: CALL_OW 380
51361: GO 51380
// PrepareHuman ( false , i , skill ) ;
51363: LD_INT 0
51365: PPUSH
51366: LD_VAR 0 8
51370: PPUSH
51371: LD_VAR 0 4
51375: PPUSH
51376: CALL_OW 380
// end else
51380: GO 51399
// PrepareHuman ( false , i , skill ) ;
51382: LD_INT 0
51384: PPUSH
51385: LD_VAR 0 8
51389: PPUSH
51390: LD_VAR 0 4
51394: PPUSH
51395: CALL_OW 380
// un := CreateHuman ;
51399: LD_ADDR_VAR 0 14
51403: PUSH
51404: CALL_OW 44
51408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51409: LD_ADDR_VAR 0 7
51413: PUSH
51414: LD_VAR 0 7
51418: PPUSH
51419: LD_INT 1
51421: PPUSH
51422: LD_VAR 0 14
51426: PPUSH
51427: CALL_OW 2
51431: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51432: LD_VAR 0 14
51436: PPUSH
51437: LD_VAR 0 12
51441: PUSH
51442: LD_INT 1
51444: ARRAY
51445: PPUSH
51446: CALL_OW 52
// end ;
51450: GO 51089
51452: POP
51453: POP
// end ;
51454: GO 50391
51456: POP
51457: POP
// result := result ^ buildings ;
51458: LD_ADDR_VAR 0 7
51462: PUSH
51463: LD_VAR 0 7
51467: PUSH
51468: LD_VAR 0 18
51472: ADD
51473: ST_TO_ADDR
// end else
51474: GO 51617
// begin for i = 1 to personel do
51476: LD_ADDR_VAR 0 8
51480: PUSH
51481: DOUBLE
51482: LD_INT 1
51484: DEC
51485: ST_TO_ADDR
51486: LD_VAR 0 6
51490: PUSH
51491: FOR_TO
51492: IFFALSE 51615
// begin if i > 4 then
51494: LD_VAR 0 8
51498: PUSH
51499: LD_INT 4
51501: GREATER
51502: IFFALSE 51506
// break ;
51504: GO 51615
// x := personel [ i ] ;
51506: LD_ADDR_VAR 0 13
51510: PUSH
51511: LD_VAR 0 6
51515: PUSH
51516: LD_VAR 0 8
51520: ARRAY
51521: ST_TO_ADDR
// if x = - 1 then
51522: LD_VAR 0 13
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: EQUAL
51531: IFFALSE 51535
// continue ;
51533: GO 51491
// PrepareHuman ( false , i , skill ) ;
51535: LD_INT 0
51537: PPUSH
51538: LD_VAR 0 8
51542: PPUSH
51543: LD_VAR 0 4
51547: PPUSH
51548: CALL_OW 380
// un := CreateHuman ;
51552: LD_ADDR_VAR 0 14
51556: PUSH
51557: CALL_OW 44
51561: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51562: LD_VAR 0 14
51566: PPUSH
51567: LD_VAR 0 1
51571: PPUSH
51572: CALL_OW 250
51576: PPUSH
51577: LD_VAR 0 1
51581: PPUSH
51582: CALL_OW 251
51586: PPUSH
51587: LD_INT 10
51589: PPUSH
51590: LD_INT 0
51592: PPUSH
51593: CALL_OW 50
// result := result ^ un ;
51597: LD_ADDR_VAR 0 7
51601: PUSH
51602: LD_VAR 0 7
51606: PUSH
51607: LD_VAR 0 14
51611: ADD
51612: ST_TO_ADDR
// end ;
51613: GO 51491
51615: POP
51616: POP
// end ; end ;
51617: LD_VAR 0 7
51621: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51622: LD_INT 0
51624: PPUSH
51625: PPUSH
51626: PPUSH
51627: PPUSH
51628: PPUSH
51629: PPUSH
51630: PPUSH
51631: PPUSH
51632: PPUSH
51633: PPUSH
51634: PPUSH
51635: PPUSH
51636: PPUSH
51637: PPUSH
51638: PPUSH
51639: PPUSH
// result := false ;
51640: LD_ADDR_VAR 0 3
51644: PUSH
51645: LD_INT 0
51647: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51648: LD_VAR 0 1
51652: NOT
51653: PUSH
51654: LD_VAR 0 1
51658: PPUSH
51659: CALL_OW 266
51663: PUSH
51664: LD_INT 32
51666: PUSH
51667: LD_INT 33
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: IN
51674: NOT
51675: OR
51676: IFFALSE 51680
// exit ;
51678: GO 52789
// nat := GetNation ( tower ) ;
51680: LD_ADDR_VAR 0 12
51684: PUSH
51685: LD_VAR 0 1
51689: PPUSH
51690: CALL_OW 248
51694: ST_TO_ADDR
// side := GetSide ( tower ) ;
51695: LD_ADDR_VAR 0 16
51699: PUSH
51700: LD_VAR 0 1
51704: PPUSH
51705: CALL_OW 255
51709: ST_TO_ADDR
// x := GetX ( tower ) ;
51710: LD_ADDR_VAR 0 10
51714: PUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: CALL_OW 250
51724: ST_TO_ADDR
// y := GetY ( tower ) ;
51725: LD_ADDR_VAR 0 11
51729: PUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: CALL_OW 251
51739: ST_TO_ADDR
// if not x or not y then
51740: LD_VAR 0 10
51744: NOT
51745: PUSH
51746: LD_VAR 0 11
51750: NOT
51751: OR
51752: IFFALSE 51756
// exit ;
51754: GO 52789
// weapon := 0 ;
51756: LD_ADDR_VAR 0 18
51760: PUSH
51761: LD_INT 0
51763: ST_TO_ADDR
// fac_list := [ ] ;
51764: LD_ADDR_VAR 0 17
51768: PUSH
51769: EMPTY
51770: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51771: LD_ADDR_VAR 0 6
51775: PUSH
51776: LD_VAR 0 1
51780: PPUSH
51781: CALL_OW 274
51785: PPUSH
51786: LD_VAR 0 2
51790: PPUSH
51791: LD_INT 0
51793: PPUSH
51794: CALL 49359 0 3
51798: PPUSH
51799: LD_INT 30
51801: PUSH
51802: LD_INT 3
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PPUSH
51809: CALL_OW 72
51813: ST_TO_ADDR
// if not factories then
51814: LD_VAR 0 6
51818: NOT
51819: IFFALSE 51823
// exit ;
51821: GO 52789
// for i in factories do
51823: LD_ADDR_VAR 0 8
51827: PUSH
51828: LD_VAR 0 6
51832: PUSH
51833: FOR_IN
51834: IFFALSE 51859
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51836: LD_ADDR_VAR 0 17
51840: PUSH
51841: LD_VAR 0 17
51845: PUSH
51846: LD_VAR 0 8
51850: PPUSH
51851: CALL_OW 478
51855: UNION
51856: ST_TO_ADDR
51857: GO 51833
51859: POP
51860: POP
// if not fac_list then
51861: LD_VAR 0 17
51865: NOT
51866: IFFALSE 51870
// exit ;
51868: GO 52789
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51870: LD_ADDR_VAR 0 5
51874: PUSH
51875: LD_INT 4
51877: PUSH
51878: LD_INT 5
51880: PUSH
51881: LD_INT 9
51883: PUSH
51884: LD_INT 10
51886: PUSH
51887: LD_INT 6
51889: PUSH
51890: LD_INT 7
51892: PUSH
51893: LD_INT 11
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 27
51907: PUSH
51908: LD_INT 28
51910: PUSH
51911: LD_INT 26
51913: PUSH
51914: LD_INT 30
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 43
51925: PUSH
51926: LD_INT 44
51928: PUSH
51929: LD_INT 46
51931: PUSH
51932: LD_INT 45
51934: PUSH
51935: LD_INT 47
51937: PUSH
51938: LD_INT 49
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: PUSH
51954: LD_VAR 0 12
51958: ARRAY
51959: ST_TO_ADDR
// list := list isect fac_list ;
51960: LD_ADDR_VAR 0 5
51964: PUSH
51965: LD_VAR 0 5
51969: PUSH
51970: LD_VAR 0 17
51974: ISECT
51975: ST_TO_ADDR
// if not list then
51976: LD_VAR 0 5
51980: NOT
51981: IFFALSE 51985
// exit ;
51983: GO 52789
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51985: LD_VAR 0 12
51989: PUSH
51990: LD_INT 3
51992: EQUAL
51993: PUSH
51994: LD_INT 49
51996: PUSH
51997: LD_VAR 0 5
52001: IN
52002: AND
52003: PUSH
52004: LD_INT 31
52006: PPUSH
52007: LD_VAR 0 16
52011: PPUSH
52012: CALL_OW 321
52016: PUSH
52017: LD_INT 2
52019: EQUAL
52020: AND
52021: IFFALSE 52081
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52023: LD_INT 22
52025: PUSH
52026: LD_VAR 0 16
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 35
52037: PUSH
52038: LD_INT 49
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 91
52047: PUSH
52048: LD_VAR 0 1
52052: PUSH
52053: LD_INT 10
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: PPUSH
52066: CALL_OW 69
52070: NOT
52071: IFFALSE 52081
// weapon := ru_time_lapser ;
52073: LD_ADDR_VAR 0 18
52077: PUSH
52078: LD_INT 49
52080: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52081: LD_VAR 0 12
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: IN
52096: PUSH
52097: LD_INT 11
52099: PUSH
52100: LD_VAR 0 5
52104: IN
52105: PUSH
52106: LD_INT 30
52108: PUSH
52109: LD_VAR 0 5
52113: IN
52114: OR
52115: AND
52116: PUSH
52117: LD_INT 6
52119: PPUSH
52120: LD_VAR 0 16
52124: PPUSH
52125: CALL_OW 321
52129: PUSH
52130: LD_INT 2
52132: EQUAL
52133: AND
52134: IFFALSE 52299
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52136: LD_INT 22
52138: PUSH
52139: LD_VAR 0 16
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 35
52153: PUSH
52154: LD_INT 11
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 35
52163: PUSH
52164: LD_INT 30
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 91
52178: PUSH
52179: LD_VAR 0 1
52183: PUSH
52184: LD_INT 18
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: LIST
52196: PPUSH
52197: CALL_OW 69
52201: NOT
52202: PUSH
52203: LD_INT 22
52205: PUSH
52206: LD_VAR 0 16
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 30
52220: PUSH
52221: LD_INT 32
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 30
52230: PUSH
52231: LD_INT 33
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 91
52245: PUSH
52246: LD_VAR 0 1
52250: PUSH
52251: LD_INT 12
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: PUSH
52264: EMPTY
52265: LIST
52266: PPUSH
52267: CALL_OW 69
52271: PUSH
52272: LD_INT 2
52274: GREATER
52275: AND
52276: IFFALSE 52299
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52278: LD_ADDR_VAR 0 18
52282: PUSH
52283: LD_INT 11
52285: PUSH
52286: LD_INT 30
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_VAR 0 12
52297: ARRAY
52298: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52299: LD_VAR 0 18
52303: NOT
52304: PUSH
52305: LD_INT 40
52307: PPUSH
52308: LD_VAR 0 16
52312: PPUSH
52313: CALL_OW 321
52317: PUSH
52318: LD_INT 2
52320: EQUAL
52321: AND
52322: PUSH
52323: LD_INT 7
52325: PUSH
52326: LD_VAR 0 5
52330: IN
52331: PUSH
52332: LD_INT 28
52334: PUSH
52335: LD_VAR 0 5
52339: IN
52340: OR
52341: PUSH
52342: LD_INT 45
52344: PUSH
52345: LD_VAR 0 5
52349: IN
52350: OR
52351: AND
52352: IFFALSE 52606
// begin hex := GetHexInfo ( x , y ) ;
52354: LD_ADDR_VAR 0 4
52358: PUSH
52359: LD_VAR 0 10
52363: PPUSH
52364: LD_VAR 0 11
52368: PPUSH
52369: CALL_OW 546
52373: ST_TO_ADDR
// if hex [ 1 ] then
52374: LD_VAR 0 4
52378: PUSH
52379: LD_INT 1
52381: ARRAY
52382: IFFALSE 52386
// exit ;
52384: GO 52789
// height := hex [ 2 ] ;
52386: LD_ADDR_VAR 0 15
52390: PUSH
52391: LD_VAR 0 4
52395: PUSH
52396: LD_INT 2
52398: ARRAY
52399: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52400: LD_ADDR_VAR 0 14
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 3
52413: PUSH
52414: LD_INT 5
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: ST_TO_ADDR
// for i in tmp do
52423: LD_ADDR_VAR 0 8
52427: PUSH
52428: LD_VAR 0 14
52432: PUSH
52433: FOR_IN
52434: IFFALSE 52604
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52436: LD_ADDR_VAR 0 9
52440: PUSH
52441: LD_VAR 0 10
52445: PPUSH
52446: LD_VAR 0 8
52450: PPUSH
52451: LD_INT 5
52453: PPUSH
52454: CALL_OW 272
52458: PUSH
52459: LD_VAR 0 11
52463: PPUSH
52464: LD_VAR 0 8
52468: PPUSH
52469: LD_INT 5
52471: PPUSH
52472: CALL_OW 273
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52481: LD_VAR 0 9
52485: PUSH
52486: LD_INT 1
52488: ARRAY
52489: PPUSH
52490: LD_VAR 0 9
52494: PUSH
52495: LD_INT 2
52497: ARRAY
52498: PPUSH
52499: CALL_OW 488
52503: IFFALSE 52602
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52505: LD_ADDR_VAR 0 4
52509: PUSH
52510: LD_VAR 0 9
52514: PUSH
52515: LD_INT 1
52517: ARRAY
52518: PPUSH
52519: LD_VAR 0 9
52523: PUSH
52524: LD_INT 2
52526: ARRAY
52527: PPUSH
52528: CALL_OW 546
52532: ST_TO_ADDR
// if hex [ 1 ] then
52533: LD_VAR 0 4
52537: PUSH
52538: LD_INT 1
52540: ARRAY
52541: IFFALSE 52545
// continue ;
52543: GO 52433
// h := hex [ 2 ] ;
52545: LD_ADDR_VAR 0 13
52549: PUSH
52550: LD_VAR 0 4
52554: PUSH
52555: LD_INT 2
52557: ARRAY
52558: ST_TO_ADDR
// if h + 7 < height then
52559: LD_VAR 0 13
52563: PUSH
52564: LD_INT 7
52566: PLUS
52567: PUSH
52568: LD_VAR 0 15
52572: LESS
52573: IFFALSE 52602
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52575: LD_ADDR_VAR 0 18
52579: PUSH
52580: LD_INT 7
52582: PUSH
52583: LD_INT 28
52585: PUSH
52586: LD_INT 45
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: PUSH
52594: LD_VAR 0 12
52598: ARRAY
52599: ST_TO_ADDR
// break ;
52600: GO 52604
// end ; end ; end ;
52602: GO 52433
52604: POP
52605: POP
// end ; if not weapon then
52606: LD_VAR 0 18
52610: NOT
52611: IFFALSE 52671
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52613: LD_ADDR_VAR 0 5
52617: PUSH
52618: LD_VAR 0 5
52622: PUSH
52623: LD_INT 11
52625: PUSH
52626: LD_INT 30
52628: PUSH
52629: LD_INT 49
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: DIFF
52637: ST_TO_ADDR
// if not list then
52638: LD_VAR 0 5
52642: NOT
52643: IFFALSE 52647
// exit ;
52645: GO 52789
// weapon := list [ rand ( 1 , list ) ] ;
52647: LD_ADDR_VAR 0 18
52651: PUSH
52652: LD_VAR 0 5
52656: PUSH
52657: LD_INT 1
52659: PPUSH
52660: LD_VAR 0 5
52664: PPUSH
52665: CALL_OW 12
52669: ARRAY
52670: ST_TO_ADDR
// end ; if weapon then
52671: LD_VAR 0 18
52675: IFFALSE 52789
// begin tmp := CostOfWeapon ( weapon ) ;
52677: LD_ADDR_VAR 0 14
52681: PUSH
52682: LD_VAR 0 18
52686: PPUSH
52687: CALL_OW 451
52691: ST_TO_ADDR
// j := GetBase ( tower ) ;
52692: LD_ADDR_VAR 0 9
52696: PUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 274
52706: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52707: LD_VAR 0 9
52711: PPUSH
52712: LD_INT 1
52714: PPUSH
52715: CALL_OW 275
52719: PUSH
52720: LD_VAR 0 14
52724: PUSH
52725: LD_INT 1
52727: ARRAY
52728: GREATEREQUAL
52729: PUSH
52730: LD_VAR 0 9
52734: PPUSH
52735: LD_INT 2
52737: PPUSH
52738: CALL_OW 275
52742: PUSH
52743: LD_VAR 0 14
52747: PUSH
52748: LD_INT 2
52750: ARRAY
52751: GREATEREQUAL
52752: AND
52753: PUSH
52754: LD_VAR 0 9
52758: PPUSH
52759: LD_INT 3
52761: PPUSH
52762: CALL_OW 275
52766: PUSH
52767: LD_VAR 0 14
52771: PUSH
52772: LD_INT 3
52774: ARRAY
52775: GREATEREQUAL
52776: AND
52777: IFFALSE 52789
// result := weapon ;
52779: LD_ADDR_VAR 0 3
52783: PUSH
52784: LD_VAR 0 18
52788: ST_TO_ADDR
// end ; end ;
52789: LD_VAR 0 3
52793: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52794: LD_INT 0
52796: PPUSH
52797: PPUSH
// result := true ;
52798: LD_ADDR_VAR 0 3
52802: PUSH
52803: LD_INT 1
52805: ST_TO_ADDR
// if array1 = array2 then
52806: LD_VAR 0 1
52810: PUSH
52811: LD_VAR 0 2
52815: EQUAL
52816: IFFALSE 52876
// begin for i = 1 to array1 do
52818: LD_ADDR_VAR 0 4
52822: PUSH
52823: DOUBLE
52824: LD_INT 1
52826: DEC
52827: ST_TO_ADDR
52828: LD_VAR 0 1
52832: PUSH
52833: FOR_TO
52834: IFFALSE 52872
// if array1 [ i ] <> array2 [ i ] then
52836: LD_VAR 0 1
52840: PUSH
52841: LD_VAR 0 4
52845: ARRAY
52846: PUSH
52847: LD_VAR 0 2
52851: PUSH
52852: LD_VAR 0 4
52856: ARRAY
52857: NONEQUAL
52858: IFFALSE 52870
// begin result := false ;
52860: LD_ADDR_VAR 0 3
52864: PUSH
52865: LD_INT 0
52867: ST_TO_ADDR
// break ;
52868: GO 52872
// end ;
52870: GO 52833
52872: POP
52873: POP
// end else
52874: GO 52884
// result := false ;
52876: LD_ADDR_VAR 0 3
52880: PUSH
52881: LD_INT 0
52883: ST_TO_ADDR
// end ;
52884: LD_VAR 0 3
52888: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52889: LD_INT 0
52891: PPUSH
52892: PPUSH
// if not array1 or not array2 then
52893: LD_VAR 0 1
52897: NOT
52898: PUSH
52899: LD_VAR 0 2
52903: NOT
52904: OR
52905: IFFALSE 52909
// exit ;
52907: GO 52973
// result := true ;
52909: LD_ADDR_VAR 0 3
52913: PUSH
52914: LD_INT 1
52916: ST_TO_ADDR
// for i = 1 to array1 do
52917: LD_ADDR_VAR 0 4
52921: PUSH
52922: DOUBLE
52923: LD_INT 1
52925: DEC
52926: ST_TO_ADDR
52927: LD_VAR 0 1
52931: PUSH
52932: FOR_TO
52933: IFFALSE 52971
// if array1 [ i ] <> array2 [ i ] then
52935: LD_VAR 0 1
52939: PUSH
52940: LD_VAR 0 4
52944: ARRAY
52945: PUSH
52946: LD_VAR 0 2
52950: PUSH
52951: LD_VAR 0 4
52955: ARRAY
52956: NONEQUAL
52957: IFFALSE 52969
// begin result := false ;
52959: LD_ADDR_VAR 0 3
52963: PUSH
52964: LD_INT 0
52966: ST_TO_ADDR
// break ;
52967: GO 52971
// end ;
52969: GO 52932
52971: POP
52972: POP
// end ;
52973: LD_VAR 0 3
52977: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52978: LD_INT 0
52980: PPUSH
52981: PPUSH
52982: PPUSH
// pom := GetBase ( fac ) ;
52983: LD_ADDR_VAR 0 5
52987: PUSH
52988: LD_VAR 0 1
52992: PPUSH
52993: CALL_OW 274
52997: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52998: LD_ADDR_VAR 0 4
53002: PUSH
53003: LD_VAR 0 2
53007: PUSH
53008: LD_INT 1
53010: ARRAY
53011: PPUSH
53012: LD_VAR 0 2
53016: PUSH
53017: LD_INT 2
53019: ARRAY
53020: PPUSH
53021: LD_VAR 0 2
53025: PUSH
53026: LD_INT 3
53028: ARRAY
53029: PPUSH
53030: LD_VAR 0 2
53034: PUSH
53035: LD_INT 4
53037: ARRAY
53038: PPUSH
53039: CALL_OW 449
53043: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53044: LD_ADDR_VAR 0 3
53048: PUSH
53049: LD_VAR 0 5
53053: PPUSH
53054: LD_INT 1
53056: PPUSH
53057: CALL_OW 275
53061: PUSH
53062: LD_VAR 0 4
53066: PUSH
53067: LD_INT 1
53069: ARRAY
53070: GREATEREQUAL
53071: PUSH
53072: LD_VAR 0 5
53076: PPUSH
53077: LD_INT 2
53079: PPUSH
53080: CALL_OW 275
53084: PUSH
53085: LD_VAR 0 4
53089: PUSH
53090: LD_INT 2
53092: ARRAY
53093: GREATEREQUAL
53094: AND
53095: PUSH
53096: LD_VAR 0 5
53100: PPUSH
53101: LD_INT 3
53103: PPUSH
53104: CALL_OW 275
53108: PUSH
53109: LD_VAR 0 4
53113: PUSH
53114: LD_INT 3
53116: ARRAY
53117: GREATEREQUAL
53118: AND
53119: ST_TO_ADDR
// end ;
53120: LD_VAR 0 3
53124: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53125: LD_INT 0
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
// pom := GetBase ( building ) ;
53131: LD_ADDR_VAR 0 3
53135: PUSH
53136: LD_VAR 0 1
53140: PPUSH
53141: CALL_OW 274
53145: ST_TO_ADDR
// if not pom then
53146: LD_VAR 0 3
53150: NOT
53151: IFFALSE 53155
// exit ;
53153: GO 53325
// btype := GetBType ( building ) ;
53155: LD_ADDR_VAR 0 5
53159: PUSH
53160: LD_VAR 0 1
53164: PPUSH
53165: CALL_OW 266
53169: ST_TO_ADDR
// if btype = b_armoury then
53170: LD_VAR 0 5
53174: PUSH
53175: LD_INT 4
53177: EQUAL
53178: IFFALSE 53188
// btype := b_barracks ;
53180: LD_ADDR_VAR 0 5
53184: PUSH
53185: LD_INT 5
53187: ST_TO_ADDR
// if btype = b_depot then
53188: LD_VAR 0 5
53192: PUSH
53193: LD_INT 0
53195: EQUAL
53196: IFFALSE 53206
// btype := b_warehouse ;
53198: LD_ADDR_VAR 0 5
53202: PUSH
53203: LD_INT 1
53205: ST_TO_ADDR
// if btype = b_workshop then
53206: LD_VAR 0 5
53210: PUSH
53211: LD_INT 2
53213: EQUAL
53214: IFFALSE 53224
// btype := b_factory ;
53216: LD_ADDR_VAR 0 5
53220: PUSH
53221: LD_INT 3
53223: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53224: LD_ADDR_VAR 0 4
53228: PUSH
53229: LD_VAR 0 5
53233: PPUSH
53234: LD_VAR 0 1
53238: PPUSH
53239: CALL_OW 248
53243: PPUSH
53244: CALL_OW 450
53248: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53249: LD_ADDR_VAR 0 2
53253: PUSH
53254: LD_VAR 0 3
53258: PPUSH
53259: LD_INT 1
53261: PPUSH
53262: CALL_OW 275
53266: PUSH
53267: LD_VAR 0 4
53271: PUSH
53272: LD_INT 1
53274: ARRAY
53275: GREATEREQUAL
53276: PUSH
53277: LD_VAR 0 3
53281: PPUSH
53282: LD_INT 2
53284: PPUSH
53285: CALL_OW 275
53289: PUSH
53290: LD_VAR 0 4
53294: PUSH
53295: LD_INT 2
53297: ARRAY
53298: GREATEREQUAL
53299: AND
53300: PUSH
53301: LD_VAR 0 3
53305: PPUSH
53306: LD_INT 3
53308: PPUSH
53309: CALL_OW 275
53313: PUSH
53314: LD_VAR 0 4
53318: PUSH
53319: LD_INT 3
53321: ARRAY
53322: GREATEREQUAL
53323: AND
53324: ST_TO_ADDR
// end ;
53325: LD_VAR 0 2
53329: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53330: LD_INT 0
53332: PPUSH
53333: PPUSH
53334: PPUSH
// pom := GetBase ( building ) ;
53335: LD_ADDR_VAR 0 4
53339: PUSH
53340: LD_VAR 0 1
53344: PPUSH
53345: CALL_OW 274
53349: ST_TO_ADDR
// if not pom then
53350: LD_VAR 0 4
53354: NOT
53355: IFFALSE 53359
// exit ;
53357: GO 53460
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53359: LD_ADDR_VAR 0 5
53363: PUSH
53364: LD_VAR 0 2
53368: PPUSH
53369: LD_VAR 0 1
53373: PPUSH
53374: CALL_OW 248
53378: PPUSH
53379: CALL_OW 450
53383: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53384: LD_ADDR_VAR 0 3
53388: PUSH
53389: LD_VAR 0 4
53393: PPUSH
53394: LD_INT 1
53396: PPUSH
53397: CALL_OW 275
53401: PUSH
53402: LD_VAR 0 5
53406: PUSH
53407: LD_INT 1
53409: ARRAY
53410: GREATEREQUAL
53411: PUSH
53412: LD_VAR 0 4
53416: PPUSH
53417: LD_INT 2
53419: PPUSH
53420: CALL_OW 275
53424: PUSH
53425: LD_VAR 0 5
53429: PUSH
53430: LD_INT 2
53432: ARRAY
53433: GREATEREQUAL
53434: AND
53435: PUSH
53436: LD_VAR 0 4
53440: PPUSH
53441: LD_INT 3
53443: PPUSH
53444: CALL_OW 275
53448: PUSH
53449: LD_VAR 0 5
53453: PUSH
53454: LD_INT 3
53456: ARRAY
53457: GREATEREQUAL
53458: AND
53459: ST_TO_ADDR
// end ;
53460: LD_VAR 0 3
53464: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53465: LD_INT 0
53467: PPUSH
53468: PPUSH
53469: PPUSH
53470: PPUSH
53471: PPUSH
53472: PPUSH
53473: PPUSH
53474: PPUSH
53475: PPUSH
53476: PPUSH
53477: PPUSH
// result := false ;
53478: LD_ADDR_VAR 0 8
53482: PUSH
53483: LD_INT 0
53485: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53486: LD_VAR 0 5
53490: NOT
53491: PUSH
53492: LD_VAR 0 1
53496: NOT
53497: OR
53498: PUSH
53499: LD_VAR 0 2
53503: NOT
53504: OR
53505: PUSH
53506: LD_VAR 0 3
53510: NOT
53511: OR
53512: IFFALSE 53516
// exit ;
53514: GO 54330
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53516: LD_ADDR_VAR 0 14
53520: PUSH
53521: LD_VAR 0 1
53525: PPUSH
53526: LD_VAR 0 2
53530: PPUSH
53531: LD_VAR 0 3
53535: PPUSH
53536: LD_VAR 0 4
53540: PPUSH
53541: LD_VAR 0 5
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PPUSH
53550: CALL_OW 248
53554: PPUSH
53555: LD_INT 0
53557: PPUSH
53558: CALL 55567 0 6
53562: ST_TO_ADDR
// if not hexes then
53563: LD_VAR 0 14
53567: NOT
53568: IFFALSE 53572
// exit ;
53570: GO 54330
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53572: LD_ADDR_VAR 0 17
53576: PUSH
53577: LD_VAR 0 5
53581: PPUSH
53582: LD_INT 22
53584: PUSH
53585: LD_VAR 0 13
53589: PPUSH
53590: CALL_OW 255
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 30
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 30
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PPUSH
53631: CALL_OW 72
53635: ST_TO_ADDR
// for i = 1 to hexes do
53636: LD_ADDR_VAR 0 9
53640: PUSH
53641: DOUBLE
53642: LD_INT 1
53644: DEC
53645: ST_TO_ADDR
53646: LD_VAR 0 14
53650: PUSH
53651: FOR_TO
53652: IFFALSE 54328
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53654: LD_ADDR_VAR 0 13
53658: PUSH
53659: LD_VAR 0 14
53663: PUSH
53664: LD_VAR 0 9
53668: ARRAY
53669: PUSH
53670: LD_INT 1
53672: ARRAY
53673: PPUSH
53674: LD_VAR 0 14
53678: PUSH
53679: LD_VAR 0 9
53683: ARRAY
53684: PUSH
53685: LD_INT 2
53687: ARRAY
53688: PPUSH
53689: CALL_OW 428
53693: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53694: LD_VAR 0 14
53698: PUSH
53699: LD_VAR 0 9
53703: ARRAY
53704: PUSH
53705: LD_INT 1
53707: ARRAY
53708: PPUSH
53709: LD_VAR 0 14
53713: PUSH
53714: LD_VAR 0 9
53718: ARRAY
53719: PUSH
53720: LD_INT 2
53722: ARRAY
53723: PPUSH
53724: CALL_OW 351
53728: PUSH
53729: LD_VAR 0 14
53733: PUSH
53734: LD_VAR 0 9
53738: ARRAY
53739: PUSH
53740: LD_INT 1
53742: ARRAY
53743: PPUSH
53744: LD_VAR 0 14
53748: PUSH
53749: LD_VAR 0 9
53753: ARRAY
53754: PUSH
53755: LD_INT 2
53757: ARRAY
53758: PPUSH
53759: CALL_OW 488
53763: NOT
53764: OR
53765: PUSH
53766: LD_VAR 0 13
53770: PPUSH
53771: CALL_OW 247
53775: PUSH
53776: LD_INT 3
53778: EQUAL
53779: OR
53780: IFFALSE 53786
// exit ;
53782: POP
53783: POP
53784: GO 54330
// if not tmp then
53786: LD_VAR 0 13
53790: NOT
53791: IFFALSE 53795
// continue ;
53793: GO 53651
// result := true ;
53795: LD_ADDR_VAR 0 8
53799: PUSH
53800: LD_INT 1
53802: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53803: LD_VAR 0 6
53807: PUSH
53808: LD_VAR 0 13
53812: PPUSH
53813: CALL_OW 247
53817: PUSH
53818: LD_INT 2
53820: EQUAL
53821: AND
53822: PUSH
53823: LD_VAR 0 13
53827: PPUSH
53828: CALL_OW 263
53832: PUSH
53833: LD_INT 1
53835: EQUAL
53836: AND
53837: IFFALSE 54001
// begin if IsDrivenBy ( tmp ) then
53839: LD_VAR 0 13
53843: PPUSH
53844: CALL_OW 311
53848: IFFALSE 53852
// continue ;
53850: GO 53651
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53852: LD_VAR 0 6
53856: PPUSH
53857: LD_INT 3
53859: PUSH
53860: LD_INT 60
53862: PUSH
53863: EMPTY
53864: LIST
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 55
53875: PUSH
53876: EMPTY
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PPUSH
53887: CALL_OW 72
53891: IFFALSE 53999
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53893: LD_ADDR_VAR 0 18
53897: PUSH
53898: LD_VAR 0 6
53902: PPUSH
53903: LD_INT 3
53905: PUSH
53906: LD_INT 60
53908: PUSH
53909: EMPTY
53910: LIST
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: LD_INT 55
53921: PUSH
53922: EMPTY
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PPUSH
53933: CALL_OW 72
53937: PUSH
53938: LD_INT 1
53940: ARRAY
53941: ST_TO_ADDR
// if IsInUnit ( driver ) then
53942: LD_VAR 0 18
53946: PPUSH
53947: CALL_OW 310
53951: IFFALSE 53962
// ComExit ( driver ) ;
53953: LD_VAR 0 18
53957: PPUSH
53958: CALL 78751 0 1
// AddComEnterUnit ( driver , tmp ) ;
53962: LD_VAR 0 18
53966: PPUSH
53967: LD_VAR 0 13
53971: PPUSH
53972: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53976: LD_VAR 0 18
53980: PPUSH
53981: LD_VAR 0 7
53985: PPUSH
53986: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53990: LD_VAR 0 18
53994: PPUSH
53995: CALL_OW 181
// end ; continue ;
53999: GO 53651
// end ; if not cleaners or not tmp in cleaners then
54001: LD_VAR 0 6
54005: NOT
54006: PUSH
54007: LD_VAR 0 13
54011: PUSH
54012: LD_VAR 0 6
54016: IN
54017: NOT
54018: OR
54019: IFFALSE 54326
// begin if dep then
54021: LD_VAR 0 17
54025: IFFALSE 54161
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54027: LD_ADDR_VAR 0 16
54031: PUSH
54032: LD_VAR 0 17
54036: PUSH
54037: LD_INT 1
54039: ARRAY
54040: PPUSH
54041: CALL_OW 250
54045: PPUSH
54046: LD_VAR 0 17
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: PPUSH
54055: CALL_OW 254
54059: PPUSH
54060: LD_INT 5
54062: PPUSH
54063: CALL_OW 272
54067: PUSH
54068: LD_VAR 0 17
54072: PUSH
54073: LD_INT 1
54075: ARRAY
54076: PPUSH
54077: CALL_OW 251
54081: PPUSH
54082: LD_VAR 0 17
54086: PUSH
54087: LD_INT 1
54089: ARRAY
54090: PPUSH
54091: CALL_OW 254
54095: PPUSH
54096: LD_INT 5
54098: PPUSH
54099: CALL_OW 273
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54108: LD_VAR 0 16
54112: PUSH
54113: LD_INT 1
54115: ARRAY
54116: PPUSH
54117: LD_VAR 0 16
54121: PUSH
54122: LD_INT 2
54124: ARRAY
54125: PPUSH
54126: CALL_OW 488
54130: IFFALSE 54161
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54132: LD_VAR 0 13
54136: PPUSH
54137: LD_VAR 0 16
54141: PUSH
54142: LD_INT 1
54144: ARRAY
54145: PPUSH
54146: LD_VAR 0 16
54150: PUSH
54151: LD_INT 2
54153: ARRAY
54154: PPUSH
54155: CALL_OW 111
// continue ;
54159: GO 53651
// end ; end ; r := GetDir ( tmp ) ;
54161: LD_ADDR_VAR 0 15
54165: PUSH
54166: LD_VAR 0 13
54170: PPUSH
54171: CALL_OW 254
54175: ST_TO_ADDR
// if r = 5 then
54176: LD_VAR 0 15
54180: PUSH
54181: LD_INT 5
54183: EQUAL
54184: IFFALSE 54194
// r := 0 ;
54186: LD_ADDR_VAR 0 15
54190: PUSH
54191: LD_INT 0
54193: ST_TO_ADDR
// for j = r to 5 do
54194: LD_ADDR_VAR 0 10
54198: PUSH
54199: DOUBLE
54200: LD_VAR 0 15
54204: DEC
54205: ST_TO_ADDR
54206: LD_INT 5
54208: PUSH
54209: FOR_TO
54210: IFFALSE 54324
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54212: LD_ADDR_VAR 0 11
54216: PUSH
54217: LD_VAR 0 13
54221: PPUSH
54222: CALL_OW 250
54226: PPUSH
54227: LD_VAR 0 10
54231: PPUSH
54232: LD_INT 2
54234: PPUSH
54235: CALL_OW 272
54239: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54240: LD_ADDR_VAR 0 12
54244: PUSH
54245: LD_VAR 0 13
54249: PPUSH
54250: CALL_OW 251
54254: PPUSH
54255: LD_VAR 0 10
54259: PPUSH
54260: LD_INT 2
54262: PPUSH
54263: CALL_OW 273
54267: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54268: LD_VAR 0 11
54272: PPUSH
54273: LD_VAR 0 12
54277: PPUSH
54278: CALL_OW 488
54282: PUSH
54283: LD_VAR 0 11
54287: PPUSH
54288: LD_VAR 0 12
54292: PPUSH
54293: CALL_OW 428
54297: NOT
54298: AND
54299: IFFALSE 54322
// begin ComMoveXY ( tmp , _x , _y ) ;
54301: LD_VAR 0 13
54305: PPUSH
54306: LD_VAR 0 11
54310: PPUSH
54311: LD_VAR 0 12
54315: PPUSH
54316: CALL_OW 111
// break ;
54320: GO 54324
// end ; end ;
54322: GO 54209
54324: POP
54325: POP
// end ; end ;
54326: GO 53651
54328: POP
54329: POP
// end ;
54330: LD_VAR 0 8
54334: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54335: LD_INT 0
54337: PPUSH
// result := true ;
54338: LD_ADDR_VAR 0 3
54342: PUSH
54343: LD_INT 1
54345: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54346: LD_VAR 0 2
54350: PUSH
54351: LD_INT 24
54353: DOUBLE
54354: EQUAL
54355: IFTRUE 54365
54357: LD_INT 33
54359: DOUBLE
54360: EQUAL
54361: IFTRUE 54365
54363: GO 54390
54365: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54366: LD_ADDR_VAR 0 3
54370: PUSH
54371: LD_INT 32
54373: PPUSH
54374: LD_VAR 0 1
54378: PPUSH
54379: CALL_OW 321
54383: PUSH
54384: LD_INT 2
54386: EQUAL
54387: ST_TO_ADDR
54388: GO 54710
54390: LD_INT 20
54392: DOUBLE
54393: EQUAL
54394: IFTRUE 54398
54396: GO 54423
54398: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54399: LD_ADDR_VAR 0 3
54403: PUSH
54404: LD_INT 6
54406: PPUSH
54407: LD_VAR 0 1
54411: PPUSH
54412: CALL_OW 321
54416: PUSH
54417: LD_INT 2
54419: EQUAL
54420: ST_TO_ADDR
54421: GO 54710
54423: LD_INT 22
54425: DOUBLE
54426: EQUAL
54427: IFTRUE 54437
54429: LD_INT 36
54431: DOUBLE
54432: EQUAL
54433: IFTRUE 54437
54435: GO 54462
54437: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54438: LD_ADDR_VAR 0 3
54442: PUSH
54443: LD_INT 15
54445: PPUSH
54446: LD_VAR 0 1
54450: PPUSH
54451: CALL_OW 321
54455: PUSH
54456: LD_INT 2
54458: EQUAL
54459: ST_TO_ADDR
54460: GO 54710
54462: LD_INT 30
54464: DOUBLE
54465: EQUAL
54466: IFTRUE 54470
54468: GO 54495
54470: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54471: LD_ADDR_VAR 0 3
54475: PUSH
54476: LD_INT 20
54478: PPUSH
54479: LD_VAR 0 1
54483: PPUSH
54484: CALL_OW 321
54488: PUSH
54489: LD_INT 2
54491: EQUAL
54492: ST_TO_ADDR
54493: GO 54710
54495: LD_INT 28
54497: DOUBLE
54498: EQUAL
54499: IFTRUE 54509
54501: LD_INT 21
54503: DOUBLE
54504: EQUAL
54505: IFTRUE 54509
54507: GO 54534
54509: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54510: LD_ADDR_VAR 0 3
54514: PUSH
54515: LD_INT 21
54517: PPUSH
54518: LD_VAR 0 1
54522: PPUSH
54523: CALL_OW 321
54527: PUSH
54528: LD_INT 2
54530: EQUAL
54531: ST_TO_ADDR
54532: GO 54710
54534: LD_INT 16
54536: DOUBLE
54537: EQUAL
54538: IFTRUE 54542
54540: GO 54569
54542: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54543: LD_ADDR_VAR 0 3
54547: PUSH
54548: LD_EXP 63
54552: PPUSH
54553: LD_VAR 0 1
54557: PPUSH
54558: CALL_OW 321
54562: PUSH
54563: LD_INT 2
54565: EQUAL
54566: ST_TO_ADDR
54567: GO 54710
54569: LD_INT 19
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54583
54575: LD_INT 23
54577: DOUBLE
54578: EQUAL
54579: IFTRUE 54583
54581: GO 54610
54583: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54584: LD_ADDR_VAR 0 3
54588: PUSH
54589: LD_EXP 62
54593: PPUSH
54594: LD_VAR 0 1
54598: PPUSH
54599: CALL_OW 321
54603: PUSH
54604: LD_INT 2
54606: EQUAL
54607: ST_TO_ADDR
54608: GO 54710
54610: LD_INT 17
54612: DOUBLE
54613: EQUAL
54614: IFTRUE 54618
54616: GO 54643
54618: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54619: LD_ADDR_VAR 0 3
54623: PUSH
54624: LD_INT 39
54626: PPUSH
54627: LD_VAR 0 1
54631: PPUSH
54632: CALL_OW 321
54636: PUSH
54637: LD_INT 2
54639: EQUAL
54640: ST_TO_ADDR
54641: GO 54710
54643: LD_INT 18
54645: DOUBLE
54646: EQUAL
54647: IFTRUE 54651
54649: GO 54676
54651: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54652: LD_ADDR_VAR 0 3
54656: PUSH
54657: LD_INT 40
54659: PPUSH
54660: LD_VAR 0 1
54664: PPUSH
54665: CALL_OW 321
54669: PUSH
54670: LD_INT 2
54672: EQUAL
54673: ST_TO_ADDR
54674: GO 54710
54676: LD_INT 27
54678: DOUBLE
54679: EQUAL
54680: IFTRUE 54684
54682: GO 54709
54684: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54685: LD_ADDR_VAR 0 3
54689: PUSH
54690: LD_INT 35
54692: PPUSH
54693: LD_VAR 0 1
54697: PPUSH
54698: CALL_OW 321
54702: PUSH
54703: LD_INT 2
54705: EQUAL
54706: ST_TO_ADDR
54707: GO 54710
54709: POP
// end ;
54710: LD_VAR 0 3
54714: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54715: LD_INT 0
54717: PPUSH
54718: PPUSH
54719: PPUSH
54720: PPUSH
54721: PPUSH
54722: PPUSH
54723: PPUSH
54724: PPUSH
54725: PPUSH
54726: PPUSH
54727: PPUSH
// result := false ;
54728: LD_ADDR_VAR 0 6
54732: PUSH
54733: LD_INT 0
54735: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54736: LD_VAR 0 1
54740: NOT
54741: PUSH
54742: LD_VAR 0 1
54746: PPUSH
54747: CALL_OW 266
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: IN
54762: NOT
54763: OR
54764: PUSH
54765: LD_VAR 0 2
54769: NOT
54770: OR
54771: PUSH
54772: LD_VAR 0 5
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: LD_INT 4
54791: PUSH
54792: LD_INT 5
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: IN
54803: NOT
54804: OR
54805: PUSH
54806: LD_VAR 0 3
54810: PPUSH
54811: LD_VAR 0 4
54815: PPUSH
54816: CALL_OW 488
54820: NOT
54821: OR
54822: IFFALSE 54826
// exit ;
54824: GO 55562
// side := GetSide ( depot ) ;
54826: LD_ADDR_VAR 0 9
54830: PUSH
54831: LD_VAR 0 1
54835: PPUSH
54836: CALL_OW 255
54840: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54841: LD_VAR 0 9
54845: PPUSH
54846: LD_VAR 0 2
54850: PPUSH
54851: CALL 54335 0 2
54855: NOT
54856: IFFALSE 54860
// exit ;
54858: GO 55562
// pom := GetBase ( depot ) ;
54860: LD_ADDR_VAR 0 10
54864: PUSH
54865: LD_VAR 0 1
54869: PPUSH
54870: CALL_OW 274
54874: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54875: LD_ADDR_VAR 0 11
54879: PUSH
54880: LD_VAR 0 2
54884: PPUSH
54885: LD_VAR 0 1
54889: PPUSH
54890: CALL_OW 248
54894: PPUSH
54895: CALL_OW 450
54899: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54900: LD_VAR 0 10
54904: PPUSH
54905: LD_INT 1
54907: PPUSH
54908: CALL_OW 275
54912: PUSH
54913: LD_VAR 0 11
54917: PUSH
54918: LD_INT 1
54920: ARRAY
54921: GREATEREQUAL
54922: PUSH
54923: LD_VAR 0 10
54927: PPUSH
54928: LD_INT 2
54930: PPUSH
54931: CALL_OW 275
54935: PUSH
54936: LD_VAR 0 11
54940: PUSH
54941: LD_INT 2
54943: ARRAY
54944: GREATEREQUAL
54945: AND
54946: PUSH
54947: LD_VAR 0 10
54951: PPUSH
54952: LD_INT 3
54954: PPUSH
54955: CALL_OW 275
54959: PUSH
54960: LD_VAR 0 11
54964: PUSH
54965: LD_INT 3
54967: ARRAY
54968: GREATEREQUAL
54969: AND
54970: NOT
54971: IFFALSE 54975
// exit ;
54973: GO 55562
// if GetBType ( depot ) = b_depot then
54975: LD_VAR 0 1
54979: PPUSH
54980: CALL_OW 266
54984: PUSH
54985: LD_INT 0
54987: EQUAL
54988: IFFALSE 55000
// dist := 28 else
54990: LD_ADDR_VAR 0 14
54994: PUSH
54995: LD_INT 28
54997: ST_TO_ADDR
54998: GO 55008
// dist := 36 ;
55000: LD_ADDR_VAR 0 14
55004: PUSH
55005: LD_INT 36
55007: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55008: LD_VAR 0 1
55012: PPUSH
55013: LD_VAR 0 3
55017: PPUSH
55018: LD_VAR 0 4
55022: PPUSH
55023: CALL_OW 297
55027: PUSH
55028: LD_VAR 0 14
55032: GREATER
55033: IFFALSE 55037
// exit ;
55035: GO 55562
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55037: LD_ADDR_VAR 0 12
55041: PUSH
55042: LD_VAR 0 2
55046: PPUSH
55047: LD_VAR 0 3
55051: PPUSH
55052: LD_VAR 0 4
55056: PPUSH
55057: LD_VAR 0 5
55061: PPUSH
55062: LD_VAR 0 1
55066: PPUSH
55067: CALL_OW 248
55071: PPUSH
55072: LD_INT 0
55074: PPUSH
55075: CALL 55567 0 6
55079: ST_TO_ADDR
// if not hexes then
55080: LD_VAR 0 12
55084: NOT
55085: IFFALSE 55089
// exit ;
55087: GO 55562
// hex := GetHexInfo ( x , y ) ;
55089: LD_ADDR_VAR 0 15
55093: PUSH
55094: LD_VAR 0 3
55098: PPUSH
55099: LD_VAR 0 4
55103: PPUSH
55104: CALL_OW 546
55108: ST_TO_ADDR
// if hex [ 1 ] then
55109: LD_VAR 0 15
55113: PUSH
55114: LD_INT 1
55116: ARRAY
55117: IFFALSE 55121
// exit ;
55119: GO 55562
// height := hex [ 2 ] ;
55121: LD_ADDR_VAR 0 13
55125: PUSH
55126: LD_VAR 0 15
55130: PUSH
55131: LD_INT 2
55133: ARRAY
55134: ST_TO_ADDR
// for i = 1 to hexes do
55135: LD_ADDR_VAR 0 7
55139: PUSH
55140: DOUBLE
55141: LD_INT 1
55143: DEC
55144: ST_TO_ADDR
55145: LD_VAR 0 12
55149: PUSH
55150: FOR_TO
55151: IFFALSE 55481
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55153: LD_VAR 0 12
55157: PUSH
55158: LD_VAR 0 7
55162: ARRAY
55163: PUSH
55164: LD_INT 1
55166: ARRAY
55167: PPUSH
55168: LD_VAR 0 12
55172: PUSH
55173: LD_VAR 0 7
55177: ARRAY
55178: PUSH
55179: LD_INT 2
55181: ARRAY
55182: PPUSH
55183: CALL_OW 488
55187: NOT
55188: PUSH
55189: LD_VAR 0 12
55193: PUSH
55194: LD_VAR 0 7
55198: ARRAY
55199: PUSH
55200: LD_INT 1
55202: ARRAY
55203: PPUSH
55204: LD_VAR 0 12
55208: PUSH
55209: LD_VAR 0 7
55213: ARRAY
55214: PUSH
55215: LD_INT 2
55217: ARRAY
55218: PPUSH
55219: CALL_OW 428
55223: PUSH
55224: LD_INT 0
55226: GREATER
55227: OR
55228: PUSH
55229: LD_VAR 0 12
55233: PUSH
55234: LD_VAR 0 7
55238: ARRAY
55239: PUSH
55240: LD_INT 1
55242: ARRAY
55243: PPUSH
55244: LD_VAR 0 12
55248: PUSH
55249: LD_VAR 0 7
55253: ARRAY
55254: PUSH
55255: LD_INT 2
55257: ARRAY
55258: PPUSH
55259: CALL_OW 351
55263: OR
55264: IFFALSE 55270
// exit ;
55266: POP
55267: POP
55268: GO 55562
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55270: LD_ADDR_VAR 0 8
55274: PUSH
55275: LD_VAR 0 12
55279: PUSH
55280: LD_VAR 0 7
55284: ARRAY
55285: PUSH
55286: LD_INT 1
55288: ARRAY
55289: PPUSH
55290: LD_VAR 0 12
55294: PUSH
55295: LD_VAR 0 7
55299: ARRAY
55300: PUSH
55301: LD_INT 2
55303: ARRAY
55304: PPUSH
55305: CALL_OW 546
55309: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55310: LD_VAR 0 8
55314: PUSH
55315: LD_INT 1
55317: ARRAY
55318: PUSH
55319: LD_VAR 0 8
55323: PUSH
55324: LD_INT 2
55326: ARRAY
55327: PUSH
55328: LD_VAR 0 13
55332: PUSH
55333: LD_INT 2
55335: PLUS
55336: GREATER
55337: OR
55338: PUSH
55339: LD_VAR 0 8
55343: PUSH
55344: LD_INT 2
55346: ARRAY
55347: PUSH
55348: LD_VAR 0 13
55352: PUSH
55353: LD_INT 2
55355: MINUS
55356: LESS
55357: OR
55358: PUSH
55359: LD_VAR 0 8
55363: PUSH
55364: LD_INT 3
55366: ARRAY
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 8
55373: PUSH
55374: LD_INT 9
55376: PUSH
55377: LD_INT 10
55379: PUSH
55380: LD_INT 11
55382: PUSH
55383: LD_INT 12
55385: PUSH
55386: LD_INT 13
55388: PUSH
55389: LD_INT 16
55391: PUSH
55392: LD_INT 17
55394: PUSH
55395: LD_INT 18
55397: PUSH
55398: LD_INT 19
55400: PUSH
55401: LD_INT 20
55403: PUSH
55404: LD_INT 21
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: IN
55422: NOT
55423: OR
55424: PUSH
55425: LD_VAR 0 8
55429: PUSH
55430: LD_INT 5
55432: ARRAY
55433: NOT
55434: OR
55435: PUSH
55436: LD_VAR 0 8
55440: PUSH
55441: LD_INT 6
55443: ARRAY
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 7
55453: PUSH
55454: LD_INT 9
55456: PUSH
55457: LD_INT 10
55459: PUSH
55460: LD_INT 11
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: IN
55471: NOT
55472: OR
55473: IFFALSE 55479
// exit ;
55475: POP
55476: POP
55477: GO 55562
// end ;
55479: GO 55150
55481: POP
55482: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55483: LD_VAR 0 9
55487: PPUSH
55488: LD_VAR 0 3
55492: PPUSH
55493: LD_VAR 0 4
55497: PPUSH
55498: LD_INT 20
55500: PPUSH
55501: CALL 47507 0 4
55505: PUSH
55506: LD_INT 4
55508: ARRAY
55509: IFFALSE 55513
// exit ;
55511: GO 55562
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55513: LD_VAR 0 2
55517: PUSH
55518: LD_INT 29
55520: PUSH
55521: LD_INT 30
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: IN
55528: PUSH
55529: LD_VAR 0 3
55533: PPUSH
55534: LD_VAR 0 4
55538: PPUSH
55539: LD_VAR 0 9
55543: PPUSH
55544: CALL_OW 440
55548: NOT
55549: AND
55550: IFFALSE 55554
// exit ;
55552: GO 55562
// result := true ;
55554: LD_ADDR_VAR 0 6
55558: PUSH
55559: LD_INT 1
55561: ST_TO_ADDR
// end ;
55562: LD_VAR 0 6
55566: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55567: LD_INT 0
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
55575: PPUSH
55576: PPUSH
55577: PPUSH
55578: PPUSH
55579: PPUSH
55580: PPUSH
55581: PPUSH
55582: PPUSH
55583: PPUSH
55584: PPUSH
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
55618: PPUSH
55619: PPUSH
55620: PPUSH
55621: PPUSH
55622: PPUSH
55623: PPUSH
55624: PPUSH
55625: PPUSH
55626: PPUSH
// result = [ ] ;
55627: LD_ADDR_VAR 0 7
55631: PUSH
55632: EMPTY
55633: ST_TO_ADDR
// temp_list = [ ] ;
55634: LD_ADDR_VAR 0 9
55638: PUSH
55639: EMPTY
55640: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55641: LD_VAR 0 4
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 4
55660: PUSH
55661: LD_INT 5
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: IN
55672: NOT
55673: PUSH
55674: LD_VAR 0 1
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: IN
55689: PUSH
55690: LD_VAR 0 5
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 3
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: IN
55709: NOT
55710: AND
55711: OR
55712: IFFALSE 55716
// exit ;
55714: GO 74107
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55716: LD_VAR 0 1
55720: PUSH
55721: LD_INT 6
55723: PUSH
55724: LD_INT 7
55726: PUSH
55727: LD_INT 8
55729: PUSH
55730: LD_INT 13
55732: PUSH
55733: LD_INT 12
55735: PUSH
55736: LD_INT 15
55738: PUSH
55739: LD_INT 11
55741: PUSH
55742: LD_INT 14
55744: PUSH
55745: LD_INT 10
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: IN
55759: IFFALSE 55769
// btype = b_lab ;
55761: LD_ADDR_VAR 0 1
55765: PUSH
55766: LD_INT 6
55768: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55769: LD_VAR 0 6
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: IN
55788: NOT
55789: PUSH
55790: LD_VAR 0 1
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: LD_INT 6
55809: PUSH
55810: LD_INT 36
55812: PUSH
55813: LD_INT 4
55815: PUSH
55816: LD_INT 5
55818: PUSH
55819: LD_INT 31
55821: PUSH
55822: LD_INT 32
55824: PUSH
55825: LD_INT 33
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: IN
55841: NOT
55842: PUSH
55843: LD_VAR 0 6
55847: PUSH
55848: LD_INT 1
55850: EQUAL
55851: AND
55852: OR
55853: PUSH
55854: LD_VAR 0 1
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: IN
55869: NOT
55870: PUSH
55871: LD_VAR 0 6
55875: PUSH
55876: LD_INT 2
55878: EQUAL
55879: AND
55880: OR
55881: IFFALSE 55891
// mode = 0 ;
55883: LD_ADDR_VAR 0 6
55887: PUSH
55888: LD_INT 0
55890: ST_TO_ADDR
// case mode of 0 :
55891: LD_VAR 0 6
55895: PUSH
55896: LD_INT 0
55898: DOUBLE
55899: EQUAL
55900: IFTRUE 55904
55902: GO 67357
55904: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55905: LD_ADDR_VAR 0 11
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56098: LD_ADDR_VAR 0 12
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56294: LD_ADDR_VAR 0 13
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 3
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 3
56453: NEG
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56493: LD_ADDR_VAR 0 14
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 3
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56689: LD_ADDR_VAR 0 15
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56882: LD_ADDR_VAR 0 16
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57075: LD_ADDR_VAR 0 17
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57305: LD_ADDR_VAR 0 18
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57535: LD_ADDR_VAR 0 19
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57765: LD_ADDR_VAR 0 20
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57995: LD_ADDR_VAR 0 21
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58225: LD_ADDR_VAR 0 22
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58455: LD_ADDR_VAR 0 23
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 3
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58735: LD_ADDR_VAR 0 24
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59011: LD_ADDR_VAR 0 25
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59285: LD_ADDR_VAR 0 26
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59561: LD_ADDR_VAR 0 27
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59841: LD_ADDR_VAR 0 28
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 3
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 3
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60123: LD_ADDR_VAR 0 29
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: LD_INT 2
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 3
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60402: LD_ADDR_VAR 0 30
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 2
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 3
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60680: LD_ADDR_VAR 0 31
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: LD_INT 2
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: LD_INT 3
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60958: LD_ADDR_VAR 0 32
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 3
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 3
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 3
61201: NEG
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61236: LD_ADDR_VAR 0 33
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: LD_INT 3
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 3
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: LD_INT 2
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61515: LD_ADDR_VAR 0 34
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: LD_INT 2
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 3
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: LD_INT 2
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: LD_INT 3
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61795: LD_ADDR_VAR 0 35
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61907: LD_ADDR_VAR 0 36
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62019: LD_ADDR_VAR 0 37
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62131: LD_ADDR_VAR 0 38
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 2
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62243: LD_ADDR_VAR 0 39
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62355: LD_ADDR_VAR 0 40
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62467: LD_ADDR_VAR 0 41
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: LD_INT 2
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 2
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 2
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 2
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: LD_INT 3
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 3
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 3
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 3
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: NEG
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 3
62752: NEG
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 3
62764: NEG
62765: PUSH
62766: LD_INT 2
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 3
62776: NEG
62777: PUSH
62778: LD_INT 3
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62817: LD_ADDR_VAR 0 42
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: LD_INT 2
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 2
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: LD_INT 2
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: LD_INT 3
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 3
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: LD_INT 2
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 3
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 3
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: LD_INT 3
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 3
63114: NEG
63115: PUSH
63116: LD_INT 2
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: LD_INT 3
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63167: LD_ADDR_VAR 0 43
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 2
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 2
63333: NEG
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 3
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 3
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 3
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: LD_INT 3
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 3
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 2
63452: NEG
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 3
63463: NEG
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 3
63474: NEG
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63515: LD_ADDR_VAR 0 44
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: NEG
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: LD_INT 3
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 3
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 3
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 3
63758: PUSH
63759: LD_INT 3
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: LD_INT 3
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: NEG
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 3
63789: NEG
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: NEG
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: LD_INT 2
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: LD_INT 3
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63865: LD_ADDR_VAR 0 45
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 1
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 2
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 2
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 2
64043: NEG
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 2
64055: NEG
64056: PUSH
64057: LD_INT 3
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: LD_INT 3
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: LD_INT 3
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: LD_INT 2
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: LD_INT 2
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: PUSH
64112: LD_INT 3
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: LD_INT 3
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 3
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 3
64174: NEG
64175: PUSH
64176: LD_INT 3
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64215: LD_ADDR_VAR 0 46
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 2
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 2
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: LD_INT 2
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 2
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: NEG
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: LD_INT 3
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 3
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 1
64427: PUSH
64428: LD_INT 2
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 2
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 3
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 3
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 3
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: NEG
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 3
64511: NEG
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 3
64522: NEG
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64563: LD_ADDR_VAR 0 47
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: LD_INT 2
64648: NEG
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: LD_INT 2
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64714: LD_ADDR_VAR 0 48
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: LD_INT 2
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64861: LD_ADDR_VAR 0 49
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 2
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65005: LD_ADDR_VAR 0 50
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: LD_INT 1
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 2
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65149: LD_ADDR_VAR 0 51
65153: PUSH
65154: LD_INT 0
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 1
65207: NEG
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: LD_INT 2
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 2
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: NEG
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 2
65261: NEG
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: NEG
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65296: LD_ADDR_VAR 0 52
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 0
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 1
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: LD_INT 1
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: NEG
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: LD_INT 2
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: LD_INT 1
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 2
65400: NEG
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: LD_INT 2
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65447: LD_ADDR_VAR 0 53
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 0
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: NEG
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: LD_INT 1
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 2
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 2
65623: NEG
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65677: LD_ADDR_VAR 0 54
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 2
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 2
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 2
65876: NEG
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65907: LD_ADDR_VAR 0 55
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: LD_INT 2
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: NEG
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66137: LD_ADDR_VAR 0 56
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: LD_INT 2
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66367: LD_ADDR_VAR 0 57
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 1
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 2
66566: NEG
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66597: LD_ADDR_VAR 0 58
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: LD_INT 2
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: LD_INT 1
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 2
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: LD_INT 1
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 2
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: NEG
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 2
66773: NEG
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 2
66784: NEG
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 2
66796: NEG
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66827: LD_ADDR_VAR 0 59
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66915: LD_ADDR_VAR 0 60
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 0
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: LD_INT 0
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: NEG
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67003: LD_ADDR_VAR 0 61
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: LD_INT 1
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67091: LD_ADDR_VAR 0 62
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 1
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 0
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 1
67149: NEG
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67179: LD_ADDR_VAR 0 63
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: LD_INT 1
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 1
67248: NEG
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67267: LD_ADDR_VAR 0 64
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 1
67325: NEG
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 1
67336: NEG
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: ST_TO_ADDR
// end ; 1 :
67355: GO 73252
67357: LD_INT 1
67359: DOUBLE
67360: EQUAL
67361: IFTRUE 67365
67363: GO 69988
67365: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67366: LD_ADDR_VAR 0 11
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: LD_INT 3
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 1
67396: PUSH
67397: LD_INT 2
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: LIST
67409: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67410: LD_ADDR_VAR 0 12
67414: PUSH
67415: LD_INT 2
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 3
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67451: LD_ADDR_VAR 0 13
67455: PUSH
67456: LD_INT 3
67458: PUSH
67459: LD_INT 2
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 3
67468: PUSH
67469: LD_INT 3
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: LD_INT 3
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67491: LD_ADDR_VAR 0 14
67495: PUSH
67496: LD_INT 1
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: LD_INT 2
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67532: LD_ADDR_VAR 0 15
67536: PUSH
67537: LD_INT 2
67539: NEG
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 3
67550: NEG
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: LIST
67575: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67576: LD_ADDR_VAR 0 16
67580: PUSH
67581: LD_INT 2
67583: NEG
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 3
67595: NEG
67596: PUSH
67597: LD_INT 2
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 3
67607: NEG
67608: PUSH
67609: LD_INT 3
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: LIST
67621: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67622: LD_ADDR_VAR 0 17
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: LD_INT 3
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: LD_INT 2
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: LIST
67665: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67666: LD_ADDR_VAR 0 18
67670: PUSH
67671: LD_INT 2
67673: PUSH
67674: LD_INT 1
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 3
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 3
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: LIST
67706: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67707: LD_ADDR_VAR 0 19
67711: PUSH
67712: LD_INT 3
67714: PUSH
67715: LD_INT 2
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: LD_INT 3
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67747: LD_ADDR_VAR 0 20
67751: PUSH
67752: LD_INT 1
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 3
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: LIST
67787: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67788: LD_ADDR_VAR 0 21
67792: PUSH
67793: LD_INT 2
67795: NEG
67796: PUSH
67797: LD_INT 1
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 3
67806: NEG
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 3
67817: NEG
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67832: LD_ADDR_VAR 0 22
67836: PUSH
67837: LD_INT 2
67839: NEG
67840: PUSH
67841: LD_INT 3
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: LD_INT 2
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 3
67863: NEG
67864: PUSH
67865: LD_INT 3
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67878: LD_ADDR_VAR 0 23
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: LD_INT 3
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: LD_INT 4
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 1
67908: PUSH
67909: LD_INT 3
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: LIST
67921: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67922: LD_ADDR_VAR 0 24
67926: PUSH
67927: LD_INT 3
67929: PUSH
67930: LD_INT 0
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 3
67939: PUSH
67940: LD_INT 1
67942: NEG
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 4
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67963: LD_ADDR_VAR 0 25
67967: PUSH
67968: LD_INT 3
67970: PUSH
67971: LD_INT 3
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: LD_INT 3
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 3
67990: PUSH
67991: LD_INT 4
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: LIST
68002: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68003: LD_ADDR_VAR 0 26
68007: PUSH
68008: LD_INT 0
68010: PUSH
68011: LD_INT 3
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: LD_INT 4
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68044: LD_ADDR_VAR 0 27
68048: PUSH
68049: LD_INT 3
68051: NEG
68052: PUSH
68053: LD_INT 0
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 3
68062: NEG
68063: PUSH
68064: LD_INT 1
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 4
68073: NEG
68074: PUSH
68075: LD_INT 1
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68088: LD_ADDR_VAR 0 28
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: LD_INT 3
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: LD_INT 4
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 4
68119: NEG
68120: PUSH
68121: LD_INT 3
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: LIST
68133: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68134: LD_ADDR_VAR 0 29
68138: PUSH
68139: LD_INT 1
68141: NEG
68142: PUSH
68143: LD_INT 3
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: LD_INT 3
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: LD_INT 2
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: LD_INT 4
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 0
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: LD_INT 3
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: LD_INT 5
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: LD_INT 5
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: PUSH
68233: LD_INT 4
68235: NEG
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 1
68243: NEG
68244: PUSH
68245: LD_INT 6
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: LD_INT 6
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 1
68266: PUSH
68267: LD_INT 5
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68289: LD_ADDR_VAR 0 30
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: LD_INT 1
68299: NEG
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: PUSH
68308: LD_INT 0
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 3
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 3
68327: PUSH
68328: LD_INT 1
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 4
68338: PUSH
68339: LD_INT 0
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 4
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 4
68358: PUSH
68359: LD_INT 1
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 5
68369: PUSH
68370: LD_INT 0
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 5
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 5
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 6
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 6
68410: PUSH
68411: LD_INT 1
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68432: LD_ADDR_VAR 0 31
68436: PUSH
68437: LD_INT 3
68439: PUSH
68440: LD_INT 2
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 3
68449: PUSH
68450: LD_INT 3
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 2
68459: PUSH
68460: LD_INT 3
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 4
68469: PUSH
68470: LD_INT 3
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 4
68479: PUSH
68480: LD_INT 4
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: LD_INT 4
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 5
68499: PUSH
68500: LD_INT 4
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 5
68509: PUSH
68510: LD_INT 5
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: LD_INT 5
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 6
68529: PUSH
68530: LD_INT 5
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 6
68539: PUSH
68540: LD_INT 6
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 5
68549: PUSH
68550: LD_INT 6
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68571: LD_ADDR_VAR 0 32
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 0
68588: PUSH
68589: LD_INT 3
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: LD_INT 2
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: PUSH
68610: LD_INT 4
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: LD_INT 4
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: LD_INT 3
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 1
68640: PUSH
68641: LD_INT 5
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: LD_INT 5
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 1
68660: NEG
68661: PUSH
68662: LD_INT 4
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 1
68671: PUSH
68672: LD_INT 6
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: LD_INT 6
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: NEG
68692: PUSH
68693: LD_INT 5
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68714: LD_ADDR_VAR 0 33
68718: PUSH
68719: LD_INT 2
68721: NEG
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 3
68732: NEG
68733: PUSH
68734: LD_INT 0
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 3
68743: NEG
68744: PUSH
68745: LD_INT 1
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 4
68766: NEG
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 4
68777: NEG
68778: PUSH
68779: LD_INT 1
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: NEG
68790: PUSH
68791: LD_INT 1
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 5
68800: NEG
68801: PUSH
68802: LD_INT 0
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 5
68811: NEG
68812: PUSH
68813: LD_INT 1
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 5
68823: NEG
68824: PUSH
68825: LD_INT 1
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 6
68834: NEG
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 6
68845: NEG
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68869: LD_ADDR_VAR 0 34
68873: PUSH
68874: LD_INT 2
68876: NEG
68877: PUSH
68878: LD_INT 3
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 3
68888: NEG
68889: PUSH
68890: LD_INT 2
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 3
68900: NEG
68901: PUSH
68902: LD_INT 3
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 3
68912: NEG
68913: PUSH
68914: LD_INT 4
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 4
68924: NEG
68925: PUSH
68926: LD_INT 3
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 4
68936: NEG
68937: PUSH
68938: LD_INT 4
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 4
68948: NEG
68949: PUSH
68950: LD_INT 5
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 5
68960: NEG
68961: PUSH
68962: LD_INT 4
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 5
68972: NEG
68973: PUSH
68974: LD_INT 5
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 5
68984: NEG
68985: PUSH
68986: LD_INT 6
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 6
68996: NEG
68997: PUSH
68998: LD_INT 5
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 6
69008: NEG
69009: PUSH
69010: LD_INT 6
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69032: LD_ADDR_VAR 0 41
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: LD_INT 2
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: PUSH
69052: LD_INT 3
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: PUSH
69063: LD_INT 2
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: LIST
69075: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69076: LD_ADDR_VAR 0 42
69080: PUSH
69081: LD_INT 2
69083: PUSH
69084: LD_INT 0
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 2
69093: PUSH
69094: LD_INT 1
69096: NEG
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: LD_INT 1
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: LIST
69116: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69117: LD_ADDR_VAR 0 43
69121: PUSH
69122: LD_INT 2
69124: PUSH
69125: LD_INT 2
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 3
69134: PUSH
69135: LD_INT 2
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 2
69144: PUSH
69145: LD_INT 3
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69157: LD_ADDR_VAR 0 44
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: LD_INT 2
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: LD_INT 3
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: LD_INT 2
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: LIST
69197: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69198: LD_ADDR_VAR 0 45
69202: PUSH
69203: LD_INT 2
69205: NEG
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: LD_INT 1
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 3
69227: NEG
69228: PUSH
69229: LD_INT 1
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: LIST
69241: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69242: LD_ADDR_VAR 0 46
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: LD_INT 2
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 2
69261: NEG
69262: PUSH
69263: LD_INT 3
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 3
69273: NEG
69274: PUSH
69275: LD_INT 2
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: LIST
69287: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69288: LD_ADDR_VAR 0 47
69292: PUSH
69293: LD_INT 2
69295: NEG
69296: PUSH
69297: LD_INT 3
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 1
69307: NEG
69308: PUSH
69309: LD_INT 3
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69321: LD_ADDR_VAR 0 48
69325: PUSH
69326: LD_INT 1
69328: PUSH
69329: LD_INT 2
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 2
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69352: LD_ADDR_VAR 0 49
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: LD_INT 2
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69381: LD_ADDR_VAR 0 50
69385: PUSH
69386: LD_INT 2
69388: PUSH
69389: LD_INT 3
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: LD_INT 3
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69410: LD_ADDR_VAR 0 51
69414: PUSH
69415: LD_INT 1
69417: NEG
69418: PUSH
69419: LD_INT 2
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 2
69428: NEG
69429: PUSH
69430: LD_INT 1
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69441: LD_ADDR_VAR 0 52
69445: PUSH
69446: LD_INT 3
69448: NEG
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 3
69460: NEG
69461: PUSH
69462: LD_INT 2
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69474: LD_ADDR_VAR 0 53
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: LD_INT 3
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: LD_INT 2
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: LIST
69517: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69518: LD_ADDR_VAR 0 54
69522: PUSH
69523: LD_INT 2
69525: PUSH
69526: LD_INT 1
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 3
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 3
69546: PUSH
69547: LD_INT 1
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: LIST
69558: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69559: LD_ADDR_VAR 0 55
69563: PUSH
69564: LD_INT 3
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 3
69576: PUSH
69577: LD_INT 3
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 2
69586: PUSH
69587: LD_INT 3
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: LIST
69598: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69599: LD_ADDR_VAR 0 56
69603: PUSH
69604: LD_INT 1
69606: PUSH
69607: LD_INT 3
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: LD_INT 2
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69640: LD_ADDR_VAR 0 57
69644: PUSH
69645: LD_INT 2
69647: NEG
69648: PUSH
69649: LD_INT 1
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 3
69658: NEG
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 3
69669: NEG
69670: PUSH
69671: LD_INT 1
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: LIST
69683: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69684: LD_ADDR_VAR 0 58
69688: PUSH
69689: LD_INT 2
69691: NEG
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: LD_INT 2
69707: NEG
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 3
69715: NEG
69716: PUSH
69717: LD_INT 3
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: LIST
69729: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69730: LD_ADDR_VAR 0 59
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: LD_INT 2
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: LD_INT 2
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 1
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: LIST
69773: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69774: LD_ADDR_VAR 0 60
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: LD_INT 1
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 2
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 2
69802: PUSH
69803: LD_INT 1
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: LIST
69814: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69815: LD_ADDR_VAR 0 61
69819: PUSH
69820: LD_INT 2
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 2
69832: PUSH
69833: LD_INT 2
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 1
69842: PUSH
69843: LD_INT 2
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: LIST
69854: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69855: LD_ADDR_VAR 0 62
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: LD_INT 2
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 0
69872: PUSH
69873: LD_INT 2
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: LD_INT 1
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: LIST
69895: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69896: LD_ADDR_VAR 0 63
69900: PUSH
69901: LD_INT 1
69903: NEG
69904: PUSH
69905: LD_INT 1
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 2
69914: NEG
69915: PUSH
69916: LD_INT 0
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 2
69925: NEG
69926: PUSH
69927: LD_INT 1
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: LIST
69939: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69940: LD_ADDR_VAR 0 64
69944: PUSH
69945: LD_INT 1
69947: NEG
69948: PUSH
69949: LD_INT 2
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 2
69959: NEG
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 2
69971: NEG
69972: PUSH
69973: LD_INT 2
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: LIST
69985: ST_TO_ADDR
// end ; 2 :
69986: GO 73252
69988: LD_INT 2
69990: DOUBLE
69991: EQUAL
69992: IFTRUE 69996
69994: GO 73251
69996: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69997: LD_ADDR_VAR 0 29
70001: PUSH
70002: LD_INT 4
70004: PUSH
70005: LD_INT 0
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 4
70014: PUSH
70015: LD_INT 1
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 5
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 5
70035: PUSH
70036: LD_INT 1
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 4
70045: PUSH
70046: LD_INT 1
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 5
70087: PUSH
70088: LD_INT 2
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 3
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 3
70107: PUSH
70108: LD_INT 2
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 4
70117: PUSH
70118: LD_INT 3
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: LD_INT 4
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 3
70137: PUSH
70138: LD_INT 4
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 2
70147: PUSH
70148: LD_INT 3
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: LD_INT 2
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 4
70167: PUSH
70168: LD_INT 2
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 2
70177: PUSH
70178: LD_INT 4
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: LD_INT 4
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: LD_INT 3
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 1
70207: PUSH
70208: LD_INT 4
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: LD_INT 5
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: LD_INT 5
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 1
70237: NEG
70238: PUSH
70239: LD_INT 4
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 1
70248: NEG
70249: PUSH
70250: LD_INT 3
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 2
70259: PUSH
70260: LD_INT 5
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 2
70269: NEG
70270: PUSH
70271: LD_INT 3
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 3
70280: NEG
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 3
70291: NEG
70292: PUSH
70293: LD_INT 1
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 2
70303: NEG
70304: PUSH
70305: LD_INT 0
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 2
70314: NEG
70315: PUSH
70316: LD_INT 1
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 3
70325: NEG
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 4
70336: NEG
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 4
70347: NEG
70348: PUSH
70349: LD_INT 1
70351: NEG
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 4
70359: NEG
70360: PUSH
70361: LD_INT 2
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 2
70371: NEG
70372: PUSH
70373: LD_INT 2
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 4
70382: NEG
70383: PUSH
70384: LD_INT 4
70386: NEG
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 4
70394: NEG
70395: PUSH
70396: LD_INT 5
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 3
70406: NEG
70407: PUSH
70408: LD_INT 4
70410: NEG
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 3
70418: NEG
70419: PUSH
70420: LD_INT 3
70422: NEG
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 4
70430: NEG
70431: PUSH
70432: LD_INT 3
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 5
70442: NEG
70443: PUSH
70444: LD_INT 4
70446: NEG
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 5
70454: NEG
70455: PUSH
70456: LD_INT 5
70458: NEG
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 3
70466: NEG
70467: PUSH
70468: LD_INT 5
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 5
70478: NEG
70479: PUSH
70480: LD_INT 3
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70535: LD_ADDR_VAR 0 30
70539: PUSH
70540: LD_INT 4
70542: PUSH
70543: LD_INT 4
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 4
70552: PUSH
70553: LD_INT 3
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 5
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 5
70572: PUSH
70573: LD_INT 5
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 4
70582: PUSH
70583: LD_INT 5
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 3
70592: PUSH
70593: LD_INT 4
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 5
70612: PUSH
70613: LD_INT 3
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 3
70622: PUSH
70623: LD_INT 5
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: LD_INT 3
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 0
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: LD_INT 3
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 1
70662: PUSH
70663: LD_INT 4
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 0
70672: PUSH
70673: LD_INT 4
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 1
70682: NEG
70683: PUSH
70684: LD_INT 3
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 1
70693: NEG
70694: PUSH
70695: LD_INT 2
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 2
70704: PUSH
70705: LD_INT 4
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 2
70714: NEG
70715: PUSH
70716: LD_INT 2
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 4
70725: NEG
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 4
70736: NEG
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 3
70748: NEG
70749: PUSH
70750: LD_INT 0
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 3
70759: NEG
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 4
70770: NEG
70771: PUSH
70772: LD_INT 1
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 5
70781: NEG
70782: PUSH
70783: LD_INT 0
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 5
70792: NEG
70793: PUSH
70794: LD_INT 1
70796: NEG
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 5
70804: NEG
70805: PUSH
70806: LD_INT 2
70808: NEG
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 3
70816: NEG
70817: PUSH
70818: LD_INT 2
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 3
70827: NEG
70828: PUSH
70829: LD_INT 3
70831: NEG
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 3
70839: NEG
70840: PUSH
70841: LD_INT 4
70843: NEG
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 2
70851: NEG
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 2
70863: NEG
70864: PUSH
70865: LD_INT 2
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 3
70875: NEG
70876: PUSH
70877: LD_INT 2
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 4
70887: NEG
70888: PUSH
70889: LD_INT 3
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 4
70899: NEG
70900: PUSH
70901: LD_INT 4
70903: NEG
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 2
70911: NEG
70912: PUSH
70913: LD_INT 4
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 4
70923: NEG
70924: PUSH
70925: LD_INT 2
70927: NEG
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 0
70935: PUSH
70936: LD_INT 4
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 0
70946: PUSH
70947: LD_INT 5
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 1
70957: PUSH
70958: LD_INT 4
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: LD_INT 3
70971: NEG
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: LD_INT 3
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 1
70990: NEG
70991: PUSH
70992: LD_INT 4
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 1
71002: NEG
71003: PUSH
71004: LD_INT 5
71006: NEG
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 2
71014: PUSH
71015: LD_INT 3
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 2
71025: NEG
71026: PUSH
71027: LD_INT 5
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71082: LD_ADDR_VAR 0 31
71086: PUSH
71087: LD_INT 0
71089: PUSH
71090: LD_INT 4
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 0
71099: PUSH
71100: LD_INT 3
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 1
71109: PUSH
71110: LD_INT 4
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 1
71119: PUSH
71120: LD_INT 5
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 0
71129: PUSH
71130: LD_INT 5
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 1
71139: NEG
71140: PUSH
71141: LD_INT 4
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 1
71150: NEG
71151: PUSH
71152: LD_INT 3
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 2
71161: PUSH
71162: LD_INT 5
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 2
71171: NEG
71172: PUSH
71173: LD_INT 3
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 3
71182: NEG
71183: PUSH
71184: LD_INT 0
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 3
71193: NEG
71194: PUSH
71195: LD_INT 1
71197: NEG
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 2
71205: NEG
71206: PUSH
71207: LD_INT 0
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 2
71216: NEG
71217: PUSH
71218: LD_INT 1
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 3
71227: NEG
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 4
71238: NEG
71239: PUSH
71240: LD_INT 0
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 4
71249: NEG
71250: PUSH
71251: LD_INT 1
71253: NEG
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 4
71261: NEG
71262: PUSH
71263: LD_INT 2
71265: NEG
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 2
71273: NEG
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 4
71284: NEG
71285: PUSH
71286: LD_INT 4
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 4
71296: NEG
71297: PUSH
71298: LD_INT 5
71300: NEG
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 3
71308: NEG
71309: PUSH
71310: LD_INT 4
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 3
71320: NEG
71321: PUSH
71322: LD_INT 3
71324: NEG
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 4
71332: NEG
71333: PUSH
71334: LD_INT 3
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 5
71344: NEG
71345: PUSH
71346: LD_INT 4
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 5
71356: NEG
71357: PUSH
71358: LD_INT 5
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 3
71368: NEG
71369: PUSH
71370: LD_INT 5
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 5
71380: NEG
71381: PUSH
71382: LD_INT 3
71384: NEG
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 0
71392: PUSH
71393: LD_INT 3
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 0
71403: PUSH
71404: LD_INT 4
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 1
71414: PUSH
71415: LD_INT 3
71417: NEG
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 1
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: LD_INT 2
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 1
71447: NEG
71448: PUSH
71449: LD_INT 3
71451: NEG
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 1
71459: NEG
71460: PUSH
71461: LD_INT 4
71463: NEG
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: LD_INT 2
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 2
71482: NEG
71483: PUSH
71484: LD_INT 4
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 4
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 4
71504: PUSH
71505: LD_INT 1
71507: NEG
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 5
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 5
71525: PUSH
71526: LD_INT 1
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 4
71535: PUSH
71536: LD_INT 1
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 3
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 3
71555: PUSH
71556: LD_INT 1
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: PUSH
71567: LD_INT 2
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 5
71577: PUSH
71578: LD_INT 2
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71632: LD_ADDR_VAR 0 32
71636: PUSH
71637: LD_INT 4
71639: NEG
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 4
71650: NEG
71651: PUSH
71652: LD_INT 1
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 3
71662: NEG
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 3
71673: NEG
71674: PUSH
71675: LD_INT 1
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 4
71684: NEG
71685: PUSH
71686: LD_INT 1
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 5
71695: NEG
71696: PUSH
71697: LD_INT 0
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 5
71706: NEG
71707: PUSH
71708: LD_INT 1
71710: NEG
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 5
71718: NEG
71719: PUSH
71720: LD_INT 2
71722: NEG
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 3
71730: NEG
71731: PUSH
71732: LD_INT 2
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 3
71741: NEG
71742: PUSH
71743: LD_INT 3
71745: NEG
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 3
71753: NEG
71754: PUSH
71755: LD_INT 4
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 2
71765: NEG
71766: PUSH
71767: LD_INT 3
71769: NEG
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 2
71777: NEG
71778: PUSH
71779: LD_INT 2
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 3
71789: NEG
71790: PUSH
71791: LD_INT 2
71793: NEG
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 4
71801: NEG
71802: PUSH
71803: LD_INT 3
71805: NEG
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 4
71813: NEG
71814: PUSH
71815: LD_INT 4
71817: NEG
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 2
71825: NEG
71826: PUSH
71827: LD_INT 4
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 4
71837: NEG
71838: PUSH
71839: LD_INT 2
71841: NEG
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: LD_INT 4
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 0
71860: PUSH
71861: LD_INT 5
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 1
71871: PUSH
71872: LD_INT 4
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 1
71882: PUSH
71883: LD_INT 3
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 0
71893: PUSH
71894: LD_INT 3
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 1
71904: NEG
71905: PUSH
71906: LD_INT 4
71908: NEG
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 1
71916: NEG
71917: PUSH
71918: LD_INT 5
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 2
71928: PUSH
71929: LD_INT 3
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 2
71939: NEG
71940: PUSH
71941: LD_INT 5
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 3
71951: PUSH
71952: LD_INT 0
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 3
71961: PUSH
71962: LD_INT 1
71964: NEG
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 4
71972: PUSH
71973: LD_INT 0
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 4
71982: PUSH
71983: LD_INT 1
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 3
71992: PUSH
71993: LD_INT 1
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 2
72002: PUSH
72003: LD_INT 0
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 2
72012: PUSH
72013: LD_INT 1
72015: NEG
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 2
72023: PUSH
72024: LD_INT 2
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 4
72034: PUSH
72035: LD_INT 2
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 4
72044: PUSH
72045: LD_INT 4
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 4
72054: PUSH
72055: LD_INT 3
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 5
72064: PUSH
72065: LD_INT 4
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 5
72074: PUSH
72075: LD_INT 5
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 4
72084: PUSH
72085: LD_INT 5
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 3
72094: PUSH
72095: LD_INT 4
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 3
72104: PUSH
72105: LD_INT 3
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 5
72114: PUSH
72115: LD_INT 3
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 3
72124: PUSH
72125: LD_INT 5
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72179: LD_ADDR_VAR 0 33
72183: PUSH
72184: LD_INT 4
72186: NEG
72187: PUSH
72188: LD_INT 4
72190: NEG
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 4
72198: NEG
72199: PUSH
72200: LD_INT 5
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 3
72210: NEG
72211: PUSH
72212: LD_INT 4
72214: NEG
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 3
72222: NEG
72223: PUSH
72224: LD_INT 3
72226: NEG
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 4
72234: NEG
72235: PUSH
72236: LD_INT 3
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 5
72246: NEG
72247: PUSH
72248: LD_INT 4
72250: NEG
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 5
72258: NEG
72259: PUSH
72260: LD_INT 5
72262: NEG
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 3
72270: NEG
72271: PUSH
72272: LD_INT 5
72274: NEG
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 5
72282: NEG
72283: PUSH
72284: LD_INT 3
72286: NEG
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: LD_INT 3
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: LD_INT 4
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 1
72316: PUSH
72317: LD_INT 3
72319: NEG
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 1
72327: PUSH
72328: LD_INT 2
72330: NEG
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 0
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 1
72349: NEG
72350: PUSH
72351: LD_INT 3
72353: NEG
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 1
72361: NEG
72362: PUSH
72363: LD_INT 4
72365: NEG
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 2
72373: PUSH
72374: LD_INT 2
72376: NEG
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 2
72384: NEG
72385: PUSH
72386: LD_INT 4
72388: NEG
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 4
72396: PUSH
72397: LD_INT 0
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: LD_INT 4
72406: PUSH
72407: LD_INT 1
72409: NEG
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 5
72417: PUSH
72418: LD_INT 0
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 5
72427: PUSH
72428: LD_INT 1
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 4
72437: PUSH
72438: LD_INT 1
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 3
72447: PUSH
72448: LD_INT 0
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 3
72457: PUSH
72458: LD_INT 1
72460: NEG
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 3
72468: PUSH
72469: LD_INT 2
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 5
72479: PUSH
72480: LD_INT 2
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 3
72489: PUSH
72490: LD_INT 3
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 3
72499: PUSH
72500: LD_INT 2
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 4
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 4
72519: PUSH
72520: LD_INT 4
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 3
72529: PUSH
72530: LD_INT 4
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 2
72539: PUSH
72540: LD_INT 3
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 2
72549: PUSH
72550: LD_INT 2
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 4
72559: PUSH
72560: LD_INT 2
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 2
72569: PUSH
72570: LD_INT 4
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 0
72579: PUSH
72580: LD_INT 4
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: LD_INT 3
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 1
72599: PUSH
72600: LD_INT 4
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 1
72609: PUSH
72610: LD_INT 5
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: LD_INT 5
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 1
72629: NEG
72630: PUSH
72631: LD_INT 4
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 1
72640: NEG
72641: PUSH
72642: LD_INT 3
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 2
72651: PUSH
72652: LD_INT 5
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 2
72661: NEG
72662: PUSH
72663: LD_INT 3
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72717: LD_ADDR_VAR 0 34
72721: PUSH
72722: LD_INT 0
72724: PUSH
72725: LD_INT 4
72727: NEG
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 0
72735: PUSH
72736: LD_INT 5
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 1
72746: PUSH
72747: LD_INT 4
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 1
72757: PUSH
72758: LD_INT 3
72760: NEG
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 0
72768: PUSH
72769: LD_INT 3
72771: NEG
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 1
72779: NEG
72780: PUSH
72781: LD_INT 4
72783: NEG
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 1
72791: NEG
72792: PUSH
72793: LD_INT 5
72795: NEG
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 2
72803: PUSH
72804: LD_INT 3
72806: NEG
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 2
72814: NEG
72815: PUSH
72816: LD_INT 5
72818: NEG
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 3
72826: PUSH
72827: LD_INT 0
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 3
72836: PUSH
72837: LD_INT 1
72839: NEG
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 4
72847: PUSH
72848: LD_INT 0
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 4
72857: PUSH
72858: LD_INT 1
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 3
72867: PUSH
72868: LD_INT 1
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 2
72877: PUSH
72878: LD_INT 0
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 2
72887: PUSH
72888: LD_INT 1
72890: NEG
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 2
72898: PUSH
72899: LD_INT 2
72901: NEG
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 4
72909: PUSH
72910: LD_INT 2
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 4
72919: PUSH
72920: LD_INT 4
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 4
72929: PUSH
72930: LD_INT 3
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 5
72939: PUSH
72940: LD_INT 4
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 5
72949: PUSH
72950: LD_INT 5
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 4
72959: PUSH
72960: LD_INT 5
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 3
72969: PUSH
72970: LD_INT 4
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 3
72979: PUSH
72980: LD_INT 3
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PUSH
72987: LD_INT 5
72989: PUSH
72990: LD_INT 3
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 3
72999: PUSH
73000: LD_INT 5
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 0
73009: PUSH
73010: LD_INT 3
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 0
73019: PUSH
73020: LD_INT 2
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 1
73029: PUSH
73030: LD_INT 3
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: LD_INT 1
73039: PUSH
73040: LD_INT 4
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 0
73049: PUSH
73050: LD_INT 4
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 1
73059: NEG
73060: PUSH
73061: LD_INT 3
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 1
73070: NEG
73071: PUSH
73072: LD_INT 2
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 2
73081: PUSH
73082: LD_INT 4
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 2
73091: NEG
73092: PUSH
73093: LD_INT 2
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 4
73102: NEG
73103: PUSH
73104: LD_INT 0
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 4
73113: NEG
73114: PUSH
73115: LD_INT 1
73117: NEG
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 3
73125: NEG
73126: PUSH
73127: LD_INT 0
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 3
73136: NEG
73137: PUSH
73138: LD_INT 1
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 4
73147: NEG
73148: PUSH
73149: LD_INT 1
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PUSH
73156: LD_INT 5
73158: NEG
73159: PUSH
73160: LD_INT 0
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 5
73169: NEG
73170: PUSH
73171: LD_INT 1
73173: NEG
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 5
73181: NEG
73182: PUSH
73183: LD_INT 2
73185: NEG
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 3
73193: NEG
73194: PUSH
73195: LD_INT 2
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: ST_TO_ADDR
// end ; end ;
73249: GO 73252
73251: POP
// case btype of b_depot , b_warehouse :
73252: LD_VAR 0 1
73256: PUSH
73257: LD_INT 0
73259: DOUBLE
73260: EQUAL
73261: IFTRUE 73271
73263: LD_INT 1
73265: DOUBLE
73266: EQUAL
73267: IFTRUE 73271
73269: GO 73472
73271: POP
// case nation of nation_american :
73272: LD_VAR 0 5
73276: PUSH
73277: LD_INT 1
73279: DOUBLE
73280: EQUAL
73281: IFTRUE 73285
73283: GO 73341
73285: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73286: LD_ADDR_VAR 0 9
73290: PUSH
73291: LD_VAR 0 11
73295: PUSH
73296: LD_VAR 0 12
73300: PUSH
73301: LD_VAR 0 13
73305: PUSH
73306: LD_VAR 0 14
73310: PUSH
73311: LD_VAR 0 15
73315: PUSH
73316: LD_VAR 0 16
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: PUSH
73329: LD_VAR 0 4
73333: PUSH
73334: LD_INT 1
73336: PLUS
73337: ARRAY
73338: ST_TO_ADDR
73339: GO 73470
73341: LD_INT 2
73343: DOUBLE
73344: EQUAL
73345: IFTRUE 73349
73347: GO 73405
73349: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73350: LD_ADDR_VAR 0 9
73354: PUSH
73355: LD_VAR 0 17
73359: PUSH
73360: LD_VAR 0 18
73364: PUSH
73365: LD_VAR 0 19
73369: PUSH
73370: LD_VAR 0 20
73374: PUSH
73375: LD_VAR 0 21
73379: PUSH
73380: LD_VAR 0 22
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: PUSH
73393: LD_VAR 0 4
73397: PUSH
73398: LD_INT 1
73400: PLUS
73401: ARRAY
73402: ST_TO_ADDR
73403: GO 73470
73405: LD_INT 3
73407: DOUBLE
73408: EQUAL
73409: IFTRUE 73413
73411: GO 73469
73413: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73414: LD_ADDR_VAR 0 9
73418: PUSH
73419: LD_VAR 0 23
73423: PUSH
73424: LD_VAR 0 24
73428: PUSH
73429: LD_VAR 0 25
73433: PUSH
73434: LD_VAR 0 26
73438: PUSH
73439: LD_VAR 0 27
73443: PUSH
73444: LD_VAR 0 28
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: PUSH
73457: LD_VAR 0 4
73461: PUSH
73462: LD_INT 1
73464: PLUS
73465: ARRAY
73466: ST_TO_ADDR
73467: GO 73470
73469: POP
73470: GO 74025
73472: LD_INT 2
73474: DOUBLE
73475: EQUAL
73476: IFTRUE 73486
73478: LD_INT 3
73480: DOUBLE
73481: EQUAL
73482: IFTRUE 73486
73484: GO 73542
73486: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73487: LD_ADDR_VAR 0 9
73491: PUSH
73492: LD_VAR 0 29
73496: PUSH
73497: LD_VAR 0 30
73501: PUSH
73502: LD_VAR 0 31
73506: PUSH
73507: LD_VAR 0 32
73511: PUSH
73512: LD_VAR 0 33
73516: PUSH
73517: LD_VAR 0 34
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: PUSH
73530: LD_VAR 0 4
73534: PUSH
73535: LD_INT 1
73537: PLUS
73538: ARRAY
73539: ST_TO_ADDR
73540: GO 74025
73542: LD_INT 16
73544: DOUBLE
73545: EQUAL
73546: IFTRUE 73604
73548: LD_INT 17
73550: DOUBLE
73551: EQUAL
73552: IFTRUE 73604
73554: LD_INT 18
73556: DOUBLE
73557: EQUAL
73558: IFTRUE 73604
73560: LD_INT 19
73562: DOUBLE
73563: EQUAL
73564: IFTRUE 73604
73566: LD_INT 22
73568: DOUBLE
73569: EQUAL
73570: IFTRUE 73604
73572: LD_INT 20
73574: DOUBLE
73575: EQUAL
73576: IFTRUE 73604
73578: LD_INT 21
73580: DOUBLE
73581: EQUAL
73582: IFTRUE 73604
73584: LD_INT 23
73586: DOUBLE
73587: EQUAL
73588: IFTRUE 73604
73590: LD_INT 24
73592: DOUBLE
73593: EQUAL
73594: IFTRUE 73604
73596: LD_INT 25
73598: DOUBLE
73599: EQUAL
73600: IFTRUE 73604
73602: GO 73660
73604: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73605: LD_ADDR_VAR 0 9
73609: PUSH
73610: LD_VAR 0 35
73614: PUSH
73615: LD_VAR 0 36
73619: PUSH
73620: LD_VAR 0 37
73624: PUSH
73625: LD_VAR 0 38
73629: PUSH
73630: LD_VAR 0 39
73634: PUSH
73635: LD_VAR 0 40
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: PUSH
73648: LD_VAR 0 4
73652: PUSH
73653: LD_INT 1
73655: PLUS
73656: ARRAY
73657: ST_TO_ADDR
73658: GO 74025
73660: LD_INT 6
73662: DOUBLE
73663: EQUAL
73664: IFTRUE 73716
73666: LD_INT 7
73668: DOUBLE
73669: EQUAL
73670: IFTRUE 73716
73672: LD_INT 8
73674: DOUBLE
73675: EQUAL
73676: IFTRUE 73716
73678: LD_INT 13
73680: DOUBLE
73681: EQUAL
73682: IFTRUE 73716
73684: LD_INT 12
73686: DOUBLE
73687: EQUAL
73688: IFTRUE 73716
73690: LD_INT 15
73692: DOUBLE
73693: EQUAL
73694: IFTRUE 73716
73696: LD_INT 11
73698: DOUBLE
73699: EQUAL
73700: IFTRUE 73716
73702: LD_INT 14
73704: DOUBLE
73705: EQUAL
73706: IFTRUE 73716
73708: LD_INT 10
73710: DOUBLE
73711: EQUAL
73712: IFTRUE 73716
73714: GO 73772
73716: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73717: LD_ADDR_VAR 0 9
73721: PUSH
73722: LD_VAR 0 41
73726: PUSH
73727: LD_VAR 0 42
73731: PUSH
73732: LD_VAR 0 43
73736: PUSH
73737: LD_VAR 0 44
73741: PUSH
73742: LD_VAR 0 45
73746: PUSH
73747: LD_VAR 0 46
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: PUSH
73760: LD_VAR 0 4
73764: PUSH
73765: LD_INT 1
73767: PLUS
73768: ARRAY
73769: ST_TO_ADDR
73770: GO 74025
73772: LD_INT 36
73774: DOUBLE
73775: EQUAL
73776: IFTRUE 73780
73778: GO 73836
73780: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73781: LD_ADDR_VAR 0 9
73785: PUSH
73786: LD_VAR 0 47
73790: PUSH
73791: LD_VAR 0 48
73795: PUSH
73796: LD_VAR 0 49
73800: PUSH
73801: LD_VAR 0 50
73805: PUSH
73806: LD_VAR 0 51
73810: PUSH
73811: LD_VAR 0 52
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: PUSH
73824: LD_VAR 0 4
73828: PUSH
73829: LD_INT 1
73831: PLUS
73832: ARRAY
73833: ST_TO_ADDR
73834: GO 74025
73836: LD_INT 4
73838: DOUBLE
73839: EQUAL
73840: IFTRUE 73862
73842: LD_INT 5
73844: DOUBLE
73845: EQUAL
73846: IFTRUE 73862
73848: LD_INT 34
73850: DOUBLE
73851: EQUAL
73852: IFTRUE 73862
73854: LD_INT 37
73856: DOUBLE
73857: EQUAL
73858: IFTRUE 73862
73860: GO 73918
73862: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73863: LD_ADDR_VAR 0 9
73867: PUSH
73868: LD_VAR 0 53
73872: PUSH
73873: LD_VAR 0 54
73877: PUSH
73878: LD_VAR 0 55
73882: PUSH
73883: LD_VAR 0 56
73887: PUSH
73888: LD_VAR 0 57
73892: PUSH
73893: LD_VAR 0 58
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: PUSH
73906: LD_VAR 0 4
73910: PUSH
73911: LD_INT 1
73913: PLUS
73914: ARRAY
73915: ST_TO_ADDR
73916: GO 74025
73918: LD_INT 31
73920: DOUBLE
73921: EQUAL
73922: IFTRUE 73968
73924: LD_INT 32
73926: DOUBLE
73927: EQUAL
73928: IFTRUE 73968
73930: LD_INT 33
73932: DOUBLE
73933: EQUAL
73934: IFTRUE 73968
73936: LD_INT 27
73938: DOUBLE
73939: EQUAL
73940: IFTRUE 73968
73942: LD_INT 26
73944: DOUBLE
73945: EQUAL
73946: IFTRUE 73968
73948: LD_INT 28
73950: DOUBLE
73951: EQUAL
73952: IFTRUE 73968
73954: LD_INT 29
73956: DOUBLE
73957: EQUAL
73958: IFTRUE 73968
73960: LD_INT 30
73962: DOUBLE
73963: EQUAL
73964: IFTRUE 73968
73966: GO 74024
73968: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73969: LD_ADDR_VAR 0 9
73973: PUSH
73974: LD_VAR 0 59
73978: PUSH
73979: LD_VAR 0 60
73983: PUSH
73984: LD_VAR 0 61
73988: PUSH
73989: LD_VAR 0 62
73993: PUSH
73994: LD_VAR 0 63
73998: PUSH
73999: LD_VAR 0 64
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: PUSH
74012: LD_VAR 0 4
74016: PUSH
74017: LD_INT 1
74019: PLUS
74020: ARRAY
74021: ST_TO_ADDR
74022: GO 74025
74024: POP
// temp_list2 = [ ] ;
74025: LD_ADDR_VAR 0 10
74029: PUSH
74030: EMPTY
74031: ST_TO_ADDR
// for i in temp_list do
74032: LD_ADDR_VAR 0 8
74036: PUSH
74037: LD_VAR 0 9
74041: PUSH
74042: FOR_IN
74043: IFFALSE 74095
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74045: LD_ADDR_VAR 0 10
74049: PUSH
74050: LD_VAR 0 10
74054: PUSH
74055: LD_VAR 0 8
74059: PUSH
74060: LD_INT 1
74062: ARRAY
74063: PUSH
74064: LD_VAR 0 2
74068: PLUS
74069: PUSH
74070: LD_VAR 0 8
74074: PUSH
74075: LD_INT 2
74077: ARRAY
74078: PUSH
74079: LD_VAR 0 3
74083: PLUS
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: EMPTY
74090: LIST
74091: ADD
74092: ST_TO_ADDR
74093: GO 74042
74095: POP
74096: POP
// result = temp_list2 ;
74097: LD_ADDR_VAR 0 7
74101: PUSH
74102: LD_VAR 0 10
74106: ST_TO_ADDR
// end ;
74107: LD_VAR 0 7
74111: RET
// export function EnemyInRange ( unit , dist ) ; begin
74112: LD_INT 0
74114: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74115: LD_ADDR_VAR 0 3
74119: PUSH
74120: LD_VAR 0 1
74124: PPUSH
74125: CALL_OW 255
74129: PPUSH
74130: LD_VAR 0 1
74134: PPUSH
74135: CALL_OW 250
74139: PPUSH
74140: LD_VAR 0 1
74144: PPUSH
74145: CALL_OW 251
74149: PPUSH
74150: LD_VAR 0 2
74154: PPUSH
74155: CALL 47507 0 4
74159: PUSH
74160: LD_INT 4
74162: ARRAY
74163: ST_TO_ADDR
// end ;
74164: LD_VAR 0 3
74168: RET
// export function PlayerSeeMe ( unit ) ; begin
74169: LD_INT 0
74171: PPUSH
// result := See ( your_side , unit ) ;
74172: LD_ADDR_VAR 0 2
74176: PUSH
74177: LD_OWVAR 2
74181: PPUSH
74182: LD_VAR 0 1
74186: PPUSH
74187: CALL_OW 292
74191: ST_TO_ADDR
// end ;
74192: LD_VAR 0 2
74196: RET
// export function ReverseDir ( unit ) ; begin
74197: LD_INT 0
74199: PPUSH
// if not unit then
74200: LD_VAR 0 1
74204: NOT
74205: IFFALSE 74209
// exit ;
74207: GO 74232
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74209: LD_ADDR_VAR 0 2
74213: PUSH
74214: LD_VAR 0 1
74218: PPUSH
74219: CALL_OW 254
74223: PUSH
74224: LD_INT 3
74226: PLUS
74227: PUSH
74228: LD_INT 6
74230: MOD
74231: ST_TO_ADDR
// end ;
74232: LD_VAR 0 2
74236: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74237: LD_INT 0
74239: PPUSH
74240: PPUSH
74241: PPUSH
74242: PPUSH
74243: PPUSH
// if not hexes then
74244: LD_VAR 0 2
74248: NOT
74249: IFFALSE 74253
// exit ;
74251: GO 74401
// dist := 9999 ;
74253: LD_ADDR_VAR 0 5
74257: PUSH
74258: LD_INT 9999
74260: ST_TO_ADDR
// for i = 1 to hexes do
74261: LD_ADDR_VAR 0 4
74265: PUSH
74266: DOUBLE
74267: LD_INT 1
74269: DEC
74270: ST_TO_ADDR
74271: LD_VAR 0 2
74275: PUSH
74276: FOR_TO
74277: IFFALSE 74389
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74279: LD_VAR 0 1
74283: PPUSH
74284: LD_VAR 0 2
74288: PUSH
74289: LD_VAR 0 4
74293: ARRAY
74294: PUSH
74295: LD_INT 1
74297: ARRAY
74298: PPUSH
74299: LD_VAR 0 2
74303: PUSH
74304: LD_VAR 0 4
74308: ARRAY
74309: PUSH
74310: LD_INT 2
74312: ARRAY
74313: PPUSH
74314: CALL_OW 297
74318: PUSH
74319: LD_VAR 0 5
74323: LESS
74324: IFFALSE 74387
// begin hex := hexes [ i ] ;
74326: LD_ADDR_VAR 0 7
74330: PUSH
74331: LD_VAR 0 2
74335: PUSH
74336: LD_VAR 0 4
74340: ARRAY
74341: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74342: LD_ADDR_VAR 0 5
74346: PUSH
74347: LD_VAR 0 1
74351: PPUSH
74352: LD_VAR 0 2
74356: PUSH
74357: LD_VAR 0 4
74361: ARRAY
74362: PUSH
74363: LD_INT 1
74365: ARRAY
74366: PPUSH
74367: LD_VAR 0 2
74371: PUSH
74372: LD_VAR 0 4
74376: ARRAY
74377: PUSH
74378: LD_INT 2
74380: ARRAY
74381: PPUSH
74382: CALL_OW 297
74386: ST_TO_ADDR
// end ; end ;
74387: GO 74276
74389: POP
74390: POP
// result := hex ;
74391: LD_ADDR_VAR 0 3
74395: PUSH
74396: LD_VAR 0 7
74400: ST_TO_ADDR
// end ;
74401: LD_VAR 0 3
74405: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74406: LD_INT 0
74408: PPUSH
74409: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74410: LD_VAR 0 1
74414: NOT
74415: PUSH
74416: LD_VAR 0 1
74420: PUSH
74421: LD_INT 21
74423: PUSH
74424: LD_INT 2
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 23
74433: PUSH
74434: LD_INT 2
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PPUSH
74445: CALL_OW 69
74449: IN
74450: NOT
74451: OR
74452: IFFALSE 74456
// exit ;
74454: GO 74503
// for i = 1 to 3 do
74456: LD_ADDR_VAR 0 3
74460: PUSH
74461: DOUBLE
74462: LD_INT 1
74464: DEC
74465: ST_TO_ADDR
74466: LD_INT 3
74468: PUSH
74469: FOR_TO
74470: IFFALSE 74501
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74472: LD_VAR 0 1
74476: PPUSH
74477: CALL_OW 250
74481: PPUSH
74482: LD_VAR 0 1
74486: PPUSH
74487: CALL_OW 251
74491: PPUSH
74492: LD_INT 1
74494: PPUSH
74495: CALL_OW 453
74499: GO 74469
74501: POP
74502: POP
// end ;
74503: LD_VAR 0 2
74507: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74508: LD_INT 0
74510: PPUSH
74511: PPUSH
74512: PPUSH
74513: PPUSH
74514: PPUSH
74515: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74516: LD_VAR 0 1
74520: NOT
74521: PUSH
74522: LD_VAR 0 2
74526: NOT
74527: OR
74528: PUSH
74529: LD_VAR 0 1
74533: PPUSH
74534: CALL_OW 314
74538: OR
74539: IFFALSE 74543
// exit ;
74541: GO 74984
// x := GetX ( enemy_unit ) ;
74543: LD_ADDR_VAR 0 7
74547: PUSH
74548: LD_VAR 0 2
74552: PPUSH
74553: CALL_OW 250
74557: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74558: LD_ADDR_VAR 0 8
74562: PUSH
74563: LD_VAR 0 2
74567: PPUSH
74568: CALL_OW 251
74572: ST_TO_ADDR
// if not x or not y then
74573: LD_VAR 0 7
74577: NOT
74578: PUSH
74579: LD_VAR 0 8
74583: NOT
74584: OR
74585: IFFALSE 74589
// exit ;
74587: GO 74984
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74589: LD_ADDR_VAR 0 6
74593: PUSH
74594: LD_VAR 0 7
74598: PPUSH
74599: LD_INT 0
74601: PPUSH
74602: LD_INT 4
74604: PPUSH
74605: CALL_OW 272
74609: PUSH
74610: LD_VAR 0 8
74614: PPUSH
74615: LD_INT 0
74617: PPUSH
74618: LD_INT 4
74620: PPUSH
74621: CALL_OW 273
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_VAR 0 7
74634: PPUSH
74635: LD_INT 1
74637: PPUSH
74638: LD_INT 4
74640: PPUSH
74641: CALL_OW 272
74645: PUSH
74646: LD_VAR 0 8
74650: PPUSH
74651: LD_INT 1
74653: PPUSH
74654: LD_INT 4
74656: PPUSH
74657: CALL_OW 273
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: PUSH
74666: LD_VAR 0 7
74670: PPUSH
74671: LD_INT 2
74673: PPUSH
74674: LD_INT 4
74676: PPUSH
74677: CALL_OW 272
74681: PUSH
74682: LD_VAR 0 8
74686: PPUSH
74687: LD_INT 2
74689: PPUSH
74690: LD_INT 4
74692: PPUSH
74693: CALL_OW 273
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_VAR 0 7
74706: PPUSH
74707: LD_INT 3
74709: PPUSH
74710: LD_INT 4
74712: PPUSH
74713: CALL_OW 272
74717: PUSH
74718: LD_VAR 0 8
74722: PPUSH
74723: LD_INT 3
74725: PPUSH
74726: LD_INT 4
74728: PPUSH
74729: CALL_OW 273
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_VAR 0 7
74742: PPUSH
74743: LD_INT 4
74745: PPUSH
74746: LD_INT 4
74748: PPUSH
74749: CALL_OW 272
74753: PUSH
74754: LD_VAR 0 8
74758: PPUSH
74759: LD_INT 4
74761: PPUSH
74762: LD_INT 4
74764: PPUSH
74765: CALL_OW 273
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_VAR 0 7
74778: PPUSH
74779: LD_INT 5
74781: PPUSH
74782: LD_INT 4
74784: PPUSH
74785: CALL_OW 272
74789: PUSH
74790: LD_VAR 0 8
74794: PPUSH
74795: LD_INT 5
74797: PPUSH
74798: LD_INT 4
74800: PPUSH
74801: CALL_OW 273
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: ST_TO_ADDR
// for i = tmp downto 1 do
74818: LD_ADDR_VAR 0 4
74822: PUSH
74823: DOUBLE
74824: LD_VAR 0 6
74828: INC
74829: ST_TO_ADDR
74830: LD_INT 1
74832: PUSH
74833: FOR_DOWNTO
74834: IFFALSE 74935
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74836: LD_VAR 0 6
74840: PUSH
74841: LD_VAR 0 4
74845: ARRAY
74846: PUSH
74847: LD_INT 1
74849: ARRAY
74850: PPUSH
74851: LD_VAR 0 6
74855: PUSH
74856: LD_VAR 0 4
74860: ARRAY
74861: PUSH
74862: LD_INT 2
74864: ARRAY
74865: PPUSH
74866: CALL_OW 488
74870: NOT
74871: PUSH
74872: LD_VAR 0 6
74876: PUSH
74877: LD_VAR 0 4
74881: ARRAY
74882: PUSH
74883: LD_INT 1
74885: ARRAY
74886: PPUSH
74887: LD_VAR 0 6
74891: PUSH
74892: LD_VAR 0 4
74896: ARRAY
74897: PUSH
74898: LD_INT 2
74900: ARRAY
74901: PPUSH
74902: CALL_OW 428
74906: PUSH
74907: LD_INT 0
74909: NONEQUAL
74910: OR
74911: IFFALSE 74933
// tmp := Delete ( tmp , i ) ;
74913: LD_ADDR_VAR 0 6
74917: PUSH
74918: LD_VAR 0 6
74922: PPUSH
74923: LD_VAR 0 4
74927: PPUSH
74928: CALL_OW 3
74932: ST_TO_ADDR
74933: GO 74833
74935: POP
74936: POP
// j := GetClosestHex ( unit , tmp ) ;
74937: LD_ADDR_VAR 0 5
74941: PUSH
74942: LD_VAR 0 1
74946: PPUSH
74947: LD_VAR 0 6
74951: PPUSH
74952: CALL 74237 0 2
74956: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74957: LD_VAR 0 1
74961: PPUSH
74962: LD_VAR 0 5
74966: PUSH
74967: LD_INT 1
74969: ARRAY
74970: PPUSH
74971: LD_VAR 0 5
74975: PUSH
74976: LD_INT 2
74978: ARRAY
74979: PPUSH
74980: CALL_OW 111
// end ;
74984: LD_VAR 0 3
74988: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74989: LD_INT 0
74991: PPUSH
74992: PPUSH
74993: PPUSH
// uc_side = 0 ;
74994: LD_ADDR_OWVAR 20
74998: PUSH
74999: LD_INT 0
75001: ST_TO_ADDR
// uc_nation = 0 ;
75002: LD_ADDR_OWVAR 21
75006: PUSH
75007: LD_INT 0
75009: ST_TO_ADDR
// InitHc_All ( ) ;
75010: CALL_OW 584
// InitVc ;
75014: CALL_OW 20
// if mastodonts then
75018: LD_VAR 0 6
75022: IFFALSE 75089
// for i = 1 to mastodonts do
75024: LD_ADDR_VAR 0 11
75028: PUSH
75029: DOUBLE
75030: LD_INT 1
75032: DEC
75033: ST_TO_ADDR
75034: LD_VAR 0 6
75038: PUSH
75039: FOR_TO
75040: IFFALSE 75087
// begin vc_chassis := 31 ;
75042: LD_ADDR_OWVAR 37
75046: PUSH
75047: LD_INT 31
75049: ST_TO_ADDR
// vc_control := control_rider ;
75050: LD_ADDR_OWVAR 38
75054: PUSH
75055: LD_INT 4
75057: ST_TO_ADDR
// animal := CreateVehicle ;
75058: LD_ADDR_VAR 0 12
75062: PUSH
75063: CALL_OW 45
75067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75068: LD_VAR 0 12
75072: PPUSH
75073: LD_VAR 0 8
75077: PPUSH
75078: LD_INT 0
75080: PPUSH
75081: CALL 77277 0 3
// end ;
75085: GO 75039
75087: POP
75088: POP
// if horses then
75089: LD_VAR 0 5
75093: IFFALSE 75160
// for i = 1 to horses do
75095: LD_ADDR_VAR 0 11
75099: PUSH
75100: DOUBLE
75101: LD_INT 1
75103: DEC
75104: ST_TO_ADDR
75105: LD_VAR 0 5
75109: PUSH
75110: FOR_TO
75111: IFFALSE 75158
// begin hc_class := 21 ;
75113: LD_ADDR_OWVAR 28
75117: PUSH
75118: LD_INT 21
75120: ST_TO_ADDR
// hc_gallery :=  ;
75121: LD_ADDR_OWVAR 33
75125: PUSH
75126: LD_STRING 
75128: ST_TO_ADDR
// animal := CreateHuman ;
75129: LD_ADDR_VAR 0 12
75133: PUSH
75134: CALL_OW 44
75138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75139: LD_VAR 0 12
75143: PPUSH
75144: LD_VAR 0 8
75148: PPUSH
75149: LD_INT 0
75151: PPUSH
75152: CALL 77277 0 3
// end ;
75156: GO 75110
75158: POP
75159: POP
// if birds then
75160: LD_VAR 0 1
75164: IFFALSE 75231
// for i = 1 to birds do
75166: LD_ADDR_VAR 0 11
75170: PUSH
75171: DOUBLE
75172: LD_INT 1
75174: DEC
75175: ST_TO_ADDR
75176: LD_VAR 0 1
75180: PUSH
75181: FOR_TO
75182: IFFALSE 75229
// begin hc_class = 18 ;
75184: LD_ADDR_OWVAR 28
75188: PUSH
75189: LD_INT 18
75191: ST_TO_ADDR
// hc_gallery =  ;
75192: LD_ADDR_OWVAR 33
75196: PUSH
75197: LD_STRING 
75199: ST_TO_ADDR
// animal := CreateHuman ;
75200: LD_ADDR_VAR 0 12
75204: PUSH
75205: CALL_OW 44
75209: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75210: LD_VAR 0 12
75214: PPUSH
75215: LD_VAR 0 8
75219: PPUSH
75220: LD_INT 0
75222: PPUSH
75223: CALL 77277 0 3
// end ;
75227: GO 75181
75229: POP
75230: POP
// if tigers then
75231: LD_VAR 0 2
75235: IFFALSE 75319
// for i = 1 to tigers do
75237: LD_ADDR_VAR 0 11
75241: PUSH
75242: DOUBLE
75243: LD_INT 1
75245: DEC
75246: ST_TO_ADDR
75247: LD_VAR 0 2
75251: PUSH
75252: FOR_TO
75253: IFFALSE 75317
// begin hc_class = class_tiger ;
75255: LD_ADDR_OWVAR 28
75259: PUSH
75260: LD_INT 14
75262: ST_TO_ADDR
// hc_gallery =  ;
75263: LD_ADDR_OWVAR 33
75267: PUSH
75268: LD_STRING 
75270: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75271: LD_ADDR_OWVAR 35
75275: PUSH
75276: LD_INT 7
75278: NEG
75279: PPUSH
75280: LD_INT 7
75282: PPUSH
75283: CALL_OW 12
75287: ST_TO_ADDR
// animal := CreateHuman ;
75288: LD_ADDR_VAR 0 12
75292: PUSH
75293: CALL_OW 44
75297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75298: LD_VAR 0 12
75302: PPUSH
75303: LD_VAR 0 8
75307: PPUSH
75308: LD_INT 0
75310: PPUSH
75311: CALL 77277 0 3
// end ;
75315: GO 75252
75317: POP
75318: POP
// if apemans then
75319: LD_VAR 0 3
75323: IFFALSE 75446
// for i = 1 to apemans do
75325: LD_ADDR_VAR 0 11
75329: PUSH
75330: DOUBLE
75331: LD_INT 1
75333: DEC
75334: ST_TO_ADDR
75335: LD_VAR 0 3
75339: PUSH
75340: FOR_TO
75341: IFFALSE 75444
// begin hc_class = class_apeman ;
75343: LD_ADDR_OWVAR 28
75347: PUSH
75348: LD_INT 12
75350: ST_TO_ADDR
// hc_gallery =  ;
75351: LD_ADDR_OWVAR 33
75355: PUSH
75356: LD_STRING 
75358: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75359: LD_ADDR_OWVAR 35
75363: PUSH
75364: LD_INT 2
75366: NEG
75367: PPUSH
75368: LD_INT 2
75370: PPUSH
75371: CALL_OW 12
75375: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75376: LD_ADDR_OWVAR 31
75380: PUSH
75381: LD_INT 1
75383: PPUSH
75384: LD_INT 3
75386: PPUSH
75387: CALL_OW 12
75391: PUSH
75392: LD_INT 1
75394: PPUSH
75395: LD_INT 3
75397: PPUSH
75398: CALL_OW 12
75402: PUSH
75403: LD_INT 0
75405: PUSH
75406: LD_INT 0
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: ST_TO_ADDR
// animal := CreateHuman ;
75415: LD_ADDR_VAR 0 12
75419: PUSH
75420: CALL_OW 44
75424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75425: LD_VAR 0 12
75429: PPUSH
75430: LD_VAR 0 8
75434: PPUSH
75435: LD_INT 0
75437: PPUSH
75438: CALL 77277 0 3
// end ;
75442: GO 75340
75444: POP
75445: POP
// if enchidnas then
75446: LD_VAR 0 4
75450: IFFALSE 75517
// for i = 1 to enchidnas do
75452: LD_ADDR_VAR 0 11
75456: PUSH
75457: DOUBLE
75458: LD_INT 1
75460: DEC
75461: ST_TO_ADDR
75462: LD_VAR 0 4
75466: PUSH
75467: FOR_TO
75468: IFFALSE 75515
// begin hc_class = 13 ;
75470: LD_ADDR_OWVAR 28
75474: PUSH
75475: LD_INT 13
75477: ST_TO_ADDR
// hc_gallery =  ;
75478: LD_ADDR_OWVAR 33
75482: PUSH
75483: LD_STRING 
75485: ST_TO_ADDR
// animal := CreateHuman ;
75486: LD_ADDR_VAR 0 12
75490: PUSH
75491: CALL_OW 44
75495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75496: LD_VAR 0 12
75500: PPUSH
75501: LD_VAR 0 8
75505: PPUSH
75506: LD_INT 0
75508: PPUSH
75509: CALL 77277 0 3
// end ;
75513: GO 75467
75515: POP
75516: POP
// if fishes then
75517: LD_VAR 0 7
75521: IFFALSE 75588
// for i = 1 to fishes do
75523: LD_ADDR_VAR 0 11
75527: PUSH
75528: DOUBLE
75529: LD_INT 1
75531: DEC
75532: ST_TO_ADDR
75533: LD_VAR 0 7
75537: PUSH
75538: FOR_TO
75539: IFFALSE 75586
// begin hc_class = 20 ;
75541: LD_ADDR_OWVAR 28
75545: PUSH
75546: LD_INT 20
75548: ST_TO_ADDR
// hc_gallery =  ;
75549: LD_ADDR_OWVAR 33
75553: PUSH
75554: LD_STRING 
75556: ST_TO_ADDR
// animal := CreateHuman ;
75557: LD_ADDR_VAR 0 12
75561: PUSH
75562: CALL_OW 44
75566: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75567: LD_VAR 0 12
75571: PPUSH
75572: LD_VAR 0 9
75576: PPUSH
75577: LD_INT 0
75579: PPUSH
75580: CALL 77277 0 3
// end ;
75584: GO 75538
75586: POP
75587: POP
// end ;
75588: LD_VAR 0 10
75592: RET
// export function WantHeal ( sci , unit ) ; begin
75593: LD_INT 0
75595: PPUSH
// if GetTaskList ( sci ) > 0 then
75596: LD_VAR 0 1
75600: PPUSH
75601: CALL_OW 437
75605: PUSH
75606: LD_INT 0
75608: GREATER
75609: IFFALSE 75679
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75611: LD_VAR 0 1
75615: PPUSH
75616: CALL_OW 437
75620: PUSH
75621: LD_INT 1
75623: ARRAY
75624: PUSH
75625: LD_INT 1
75627: ARRAY
75628: PUSH
75629: LD_STRING l
75631: EQUAL
75632: PUSH
75633: LD_VAR 0 1
75637: PPUSH
75638: CALL_OW 437
75642: PUSH
75643: LD_INT 1
75645: ARRAY
75646: PUSH
75647: LD_INT 4
75649: ARRAY
75650: PUSH
75651: LD_VAR 0 2
75655: EQUAL
75656: AND
75657: IFFALSE 75669
// result := true else
75659: LD_ADDR_VAR 0 3
75663: PUSH
75664: LD_INT 1
75666: ST_TO_ADDR
75667: GO 75677
// result := false ;
75669: LD_ADDR_VAR 0 3
75673: PUSH
75674: LD_INT 0
75676: ST_TO_ADDR
// end else
75677: GO 75687
// result := false ;
75679: LD_ADDR_VAR 0 3
75683: PUSH
75684: LD_INT 0
75686: ST_TO_ADDR
// end ;
75687: LD_VAR 0 3
75691: RET
// export function HealTarget ( sci ) ; begin
75692: LD_INT 0
75694: PPUSH
// if not sci then
75695: LD_VAR 0 1
75699: NOT
75700: IFFALSE 75704
// exit ;
75702: GO 75769
// result := 0 ;
75704: LD_ADDR_VAR 0 2
75708: PUSH
75709: LD_INT 0
75711: ST_TO_ADDR
// if GetTaskList ( sci ) then
75712: LD_VAR 0 1
75716: PPUSH
75717: CALL_OW 437
75721: IFFALSE 75769
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75723: LD_VAR 0 1
75727: PPUSH
75728: CALL_OW 437
75732: PUSH
75733: LD_INT 1
75735: ARRAY
75736: PUSH
75737: LD_INT 1
75739: ARRAY
75740: PUSH
75741: LD_STRING l
75743: EQUAL
75744: IFFALSE 75769
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75746: LD_ADDR_VAR 0 2
75750: PUSH
75751: LD_VAR 0 1
75755: PPUSH
75756: CALL_OW 437
75760: PUSH
75761: LD_INT 1
75763: ARRAY
75764: PUSH
75765: LD_INT 4
75767: ARRAY
75768: ST_TO_ADDR
// end ;
75769: LD_VAR 0 2
75773: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75774: LD_INT 0
75776: PPUSH
75777: PPUSH
75778: PPUSH
75779: PPUSH
// if not base_units then
75780: LD_VAR 0 1
75784: NOT
75785: IFFALSE 75789
// exit ;
75787: GO 75876
// result := false ;
75789: LD_ADDR_VAR 0 2
75793: PUSH
75794: LD_INT 0
75796: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75797: LD_ADDR_VAR 0 5
75801: PUSH
75802: LD_VAR 0 1
75806: PPUSH
75807: LD_INT 21
75809: PUSH
75810: LD_INT 3
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PPUSH
75817: CALL_OW 72
75821: ST_TO_ADDR
// if not tmp then
75822: LD_VAR 0 5
75826: NOT
75827: IFFALSE 75831
// exit ;
75829: GO 75876
// for i in tmp do
75831: LD_ADDR_VAR 0 3
75835: PUSH
75836: LD_VAR 0 5
75840: PUSH
75841: FOR_IN
75842: IFFALSE 75874
// begin result := EnemyInRange ( i , 22 ) ;
75844: LD_ADDR_VAR 0 2
75848: PUSH
75849: LD_VAR 0 3
75853: PPUSH
75854: LD_INT 22
75856: PPUSH
75857: CALL 74112 0 2
75861: ST_TO_ADDR
// if result then
75862: LD_VAR 0 2
75866: IFFALSE 75872
// exit ;
75868: POP
75869: POP
75870: GO 75876
// end ;
75872: GO 75841
75874: POP
75875: POP
// end ;
75876: LD_VAR 0 2
75880: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75881: LD_INT 0
75883: PPUSH
75884: PPUSH
// if not units then
75885: LD_VAR 0 1
75889: NOT
75890: IFFALSE 75894
// exit ;
75892: GO 75964
// result := [ ] ;
75894: LD_ADDR_VAR 0 3
75898: PUSH
75899: EMPTY
75900: ST_TO_ADDR
// for i in units do
75901: LD_ADDR_VAR 0 4
75905: PUSH
75906: LD_VAR 0 1
75910: PUSH
75911: FOR_IN
75912: IFFALSE 75962
// if GetTag ( i ) = tag then
75914: LD_VAR 0 4
75918: PPUSH
75919: CALL_OW 110
75923: PUSH
75924: LD_VAR 0 2
75928: EQUAL
75929: IFFALSE 75960
// result := Insert ( result , result + 1 , i ) ;
75931: LD_ADDR_VAR 0 3
75935: PUSH
75936: LD_VAR 0 3
75940: PPUSH
75941: LD_VAR 0 3
75945: PUSH
75946: LD_INT 1
75948: PLUS
75949: PPUSH
75950: LD_VAR 0 4
75954: PPUSH
75955: CALL_OW 2
75959: ST_TO_ADDR
75960: GO 75911
75962: POP
75963: POP
// end ;
75964: LD_VAR 0 3
75968: RET
// export function IsDriver ( un ) ; begin
75969: LD_INT 0
75971: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75972: LD_ADDR_VAR 0 2
75976: PUSH
75977: LD_VAR 0 1
75981: PUSH
75982: LD_INT 55
75984: PUSH
75985: EMPTY
75986: LIST
75987: PPUSH
75988: CALL_OW 69
75992: IN
75993: ST_TO_ADDR
// end ;
75994: LD_VAR 0 2
75998: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75999: LD_INT 0
76001: PPUSH
76002: PPUSH
// list := [ ] ;
76003: LD_ADDR_VAR 0 5
76007: PUSH
76008: EMPTY
76009: ST_TO_ADDR
// case d of 0 :
76010: LD_VAR 0 3
76014: PUSH
76015: LD_INT 0
76017: DOUBLE
76018: EQUAL
76019: IFTRUE 76023
76021: GO 76156
76023: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76024: LD_ADDR_VAR 0 5
76028: PUSH
76029: LD_VAR 0 1
76033: PUSH
76034: LD_INT 4
76036: MINUS
76037: PUSH
76038: LD_VAR 0 2
76042: PUSH
76043: LD_INT 4
76045: MINUS
76046: PUSH
76047: LD_INT 2
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: LIST
76054: PUSH
76055: LD_VAR 0 1
76059: PUSH
76060: LD_INT 3
76062: MINUS
76063: PUSH
76064: LD_VAR 0 2
76068: PUSH
76069: LD_INT 1
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: LIST
76076: PUSH
76077: LD_VAR 0 1
76081: PUSH
76082: LD_INT 4
76084: PLUS
76085: PUSH
76086: LD_VAR 0 2
76090: PUSH
76091: LD_INT 4
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: LIST
76098: PUSH
76099: LD_VAR 0 1
76103: PUSH
76104: LD_INT 3
76106: PLUS
76107: PUSH
76108: LD_VAR 0 2
76112: PUSH
76113: LD_INT 3
76115: PLUS
76116: PUSH
76117: LD_INT 5
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: LIST
76124: PUSH
76125: LD_VAR 0 1
76129: PUSH
76130: LD_VAR 0 2
76134: PUSH
76135: LD_INT 4
76137: PLUS
76138: PUSH
76139: LD_INT 0
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: LIST
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: ST_TO_ADDR
// end ; 1 :
76154: GO 76854
76156: LD_INT 1
76158: DOUBLE
76159: EQUAL
76160: IFTRUE 76164
76162: GO 76297
76164: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76165: LD_ADDR_VAR 0 5
76169: PUSH
76170: LD_VAR 0 1
76174: PUSH
76175: LD_VAR 0 2
76179: PUSH
76180: LD_INT 4
76182: MINUS
76183: PUSH
76184: LD_INT 3
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: LIST
76191: PUSH
76192: LD_VAR 0 1
76196: PUSH
76197: LD_INT 3
76199: MINUS
76200: PUSH
76201: LD_VAR 0 2
76205: PUSH
76206: LD_INT 3
76208: MINUS
76209: PUSH
76210: LD_INT 2
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: LIST
76217: PUSH
76218: LD_VAR 0 1
76222: PUSH
76223: LD_INT 4
76225: MINUS
76226: PUSH
76227: LD_VAR 0 2
76231: PUSH
76232: LD_INT 1
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: LIST
76239: PUSH
76240: LD_VAR 0 1
76244: PUSH
76245: LD_VAR 0 2
76249: PUSH
76250: LD_INT 3
76252: PLUS
76253: PUSH
76254: LD_INT 0
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: LIST
76261: PUSH
76262: LD_VAR 0 1
76266: PUSH
76267: LD_INT 4
76269: PLUS
76270: PUSH
76271: LD_VAR 0 2
76275: PUSH
76276: LD_INT 4
76278: PLUS
76279: PUSH
76280: LD_INT 5
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: LIST
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: ST_TO_ADDR
// end ; 2 :
76295: GO 76854
76297: LD_INT 2
76299: DOUBLE
76300: EQUAL
76301: IFTRUE 76305
76303: GO 76434
76305: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76306: LD_ADDR_VAR 0 5
76310: PUSH
76311: LD_VAR 0 1
76315: PUSH
76316: LD_VAR 0 2
76320: PUSH
76321: LD_INT 3
76323: MINUS
76324: PUSH
76325: LD_INT 3
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: LIST
76332: PUSH
76333: LD_VAR 0 1
76337: PUSH
76338: LD_INT 4
76340: PLUS
76341: PUSH
76342: LD_VAR 0 2
76346: PUSH
76347: LD_INT 4
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: LIST
76354: PUSH
76355: LD_VAR 0 1
76359: PUSH
76360: LD_VAR 0 2
76364: PUSH
76365: LD_INT 4
76367: PLUS
76368: PUSH
76369: LD_INT 0
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: LIST
76376: PUSH
76377: LD_VAR 0 1
76381: PUSH
76382: LD_INT 3
76384: MINUS
76385: PUSH
76386: LD_VAR 0 2
76390: PUSH
76391: LD_INT 1
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: LIST
76398: PUSH
76399: LD_VAR 0 1
76403: PUSH
76404: LD_INT 4
76406: MINUS
76407: PUSH
76408: LD_VAR 0 2
76412: PUSH
76413: LD_INT 4
76415: MINUS
76416: PUSH
76417: LD_INT 2
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: LIST
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: LIST
76429: LIST
76430: LIST
76431: ST_TO_ADDR
// end ; 3 :
76432: GO 76854
76434: LD_INT 3
76436: DOUBLE
76437: EQUAL
76438: IFTRUE 76442
76440: GO 76575
76442: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76443: LD_ADDR_VAR 0 5
76447: PUSH
76448: LD_VAR 0 1
76452: PUSH
76453: LD_INT 3
76455: PLUS
76456: PUSH
76457: LD_VAR 0 2
76461: PUSH
76462: LD_INT 4
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: LIST
76469: PUSH
76470: LD_VAR 0 1
76474: PUSH
76475: LD_INT 4
76477: PLUS
76478: PUSH
76479: LD_VAR 0 2
76483: PUSH
76484: LD_INT 4
76486: PLUS
76487: PUSH
76488: LD_INT 5
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: LIST
76495: PUSH
76496: LD_VAR 0 1
76500: PUSH
76501: LD_INT 4
76503: MINUS
76504: PUSH
76505: LD_VAR 0 2
76509: PUSH
76510: LD_INT 1
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: LIST
76517: PUSH
76518: LD_VAR 0 1
76522: PUSH
76523: LD_VAR 0 2
76527: PUSH
76528: LD_INT 4
76530: MINUS
76531: PUSH
76532: LD_INT 3
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: LIST
76539: PUSH
76540: LD_VAR 0 1
76544: PUSH
76545: LD_INT 3
76547: MINUS
76548: PUSH
76549: LD_VAR 0 2
76553: PUSH
76554: LD_INT 3
76556: MINUS
76557: PUSH
76558: LD_INT 2
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: LIST
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: LIST
76570: LIST
76571: LIST
76572: ST_TO_ADDR
// end ; 4 :
76573: GO 76854
76575: LD_INT 4
76577: DOUBLE
76578: EQUAL
76579: IFTRUE 76583
76581: GO 76716
76583: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76584: LD_ADDR_VAR 0 5
76588: PUSH
76589: LD_VAR 0 1
76593: PUSH
76594: LD_VAR 0 2
76598: PUSH
76599: LD_INT 4
76601: PLUS
76602: PUSH
76603: LD_INT 0
76605: PUSH
76606: EMPTY
76607: LIST
76608: LIST
76609: LIST
76610: PUSH
76611: LD_VAR 0 1
76615: PUSH
76616: LD_INT 3
76618: PLUS
76619: PUSH
76620: LD_VAR 0 2
76624: PUSH
76625: LD_INT 3
76627: PLUS
76628: PUSH
76629: LD_INT 5
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: LIST
76636: PUSH
76637: LD_VAR 0 1
76641: PUSH
76642: LD_INT 4
76644: PLUS
76645: PUSH
76646: LD_VAR 0 2
76650: PUSH
76651: LD_INT 4
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: LIST
76658: PUSH
76659: LD_VAR 0 1
76663: PUSH
76664: LD_VAR 0 2
76668: PUSH
76669: LD_INT 3
76671: MINUS
76672: PUSH
76673: LD_INT 3
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: LIST
76680: PUSH
76681: LD_VAR 0 1
76685: PUSH
76686: LD_INT 4
76688: MINUS
76689: PUSH
76690: LD_VAR 0 2
76694: PUSH
76695: LD_INT 4
76697: MINUS
76698: PUSH
76699: LD_INT 2
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: LIST
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: ST_TO_ADDR
// end ; 5 :
76714: GO 76854
76716: LD_INT 5
76718: DOUBLE
76719: EQUAL
76720: IFTRUE 76724
76722: GO 76853
76724: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76725: LD_ADDR_VAR 0 5
76729: PUSH
76730: LD_VAR 0 1
76734: PUSH
76735: LD_INT 4
76737: MINUS
76738: PUSH
76739: LD_VAR 0 2
76743: PUSH
76744: LD_INT 1
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: PUSH
76752: LD_VAR 0 1
76756: PUSH
76757: LD_VAR 0 2
76761: PUSH
76762: LD_INT 4
76764: MINUS
76765: PUSH
76766: LD_INT 3
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: LIST
76773: PUSH
76774: LD_VAR 0 1
76778: PUSH
76779: LD_INT 4
76781: PLUS
76782: PUSH
76783: LD_VAR 0 2
76787: PUSH
76788: LD_INT 4
76790: PLUS
76791: PUSH
76792: LD_INT 5
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: LIST
76799: PUSH
76800: LD_VAR 0 1
76804: PUSH
76805: LD_INT 3
76807: PLUS
76808: PUSH
76809: LD_VAR 0 2
76813: PUSH
76814: LD_INT 4
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: LIST
76821: PUSH
76822: LD_VAR 0 1
76826: PUSH
76827: LD_VAR 0 2
76831: PUSH
76832: LD_INT 3
76834: PLUS
76835: PUSH
76836: LD_INT 0
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: LIST
76843: PUSH
76844: EMPTY
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: ST_TO_ADDR
// end ; end ;
76851: GO 76854
76853: POP
// result := list ;
76854: LD_ADDR_VAR 0 4
76858: PUSH
76859: LD_VAR 0 5
76863: ST_TO_ADDR
// end ;
76864: LD_VAR 0 4
76868: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76869: LD_INT 0
76871: PPUSH
76872: PPUSH
76873: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76874: LD_VAR 0 1
76878: NOT
76879: PUSH
76880: LD_VAR 0 2
76884: PUSH
76885: LD_INT 1
76887: PUSH
76888: LD_INT 2
76890: PUSH
76891: LD_INT 3
76893: PUSH
76894: LD_INT 4
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: LIST
76901: LIST
76902: IN
76903: NOT
76904: OR
76905: IFFALSE 76909
// exit ;
76907: GO 77001
// tmp := [ ] ;
76909: LD_ADDR_VAR 0 5
76913: PUSH
76914: EMPTY
76915: ST_TO_ADDR
// for i in units do
76916: LD_ADDR_VAR 0 4
76920: PUSH
76921: LD_VAR 0 1
76925: PUSH
76926: FOR_IN
76927: IFFALSE 76970
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
76929: LD_ADDR_VAR 0 5
76933: PUSH
76934: LD_VAR 0 5
76938: PPUSH
76939: LD_VAR 0 5
76943: PUSH
76944: LD_INT 1
76946: PLUS
76947: PPUSH
76948: LD_VAR 0 4
76952: PPUSH
76953: LD_VAR 0 2
76957: PPUSH
76958: CALL_OW 259
76962: PPUSH
76963: CALL_OW 2
76967: ST_TO_ADDR
76968: GO 76926
76970: POP
76971: POP
// if not tmp then
76972: LD_VAR 0 5
76976: NOT
76977: IFFALSE 76981
// exit ;
76979: GO 77001
// result := SortListByListDesc ( units , tmp ) ;
76981: LD_ADDR_VAR 0 3
76985: PUSH
76986: LD_VAR 0 1
76990: PPUSH
76991: LD_VAR 0 5
76995: PPUSH
76996: CALL_OW 77
77000: ST_TO_ADDR
// end ;
77001: LD_VAR 0 3
77005: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77006: LD_INT 0
77008: PPUSH
77009: PPUSH
77010: PPUSH
// result := false ;
77011: LD_ADDR_VAR 0 3
77015: PUSH
77016: LD_INT 0
77018: ST_TO_ADDR
// x := GetX ( building ) ;
77019: LD_ADDR_VAR 0 4
77023: PUSH
77024: LD_VAR 0 2
77028: PPUSH
77029: CALL_OW 250
77033: ST_TO_ADDR
// y := GetY ( building ) ;
77034: LD_ADDR_VAR 0 5
77038: PUSH
77039: LD_VAR 0 2
77043: PPUSH
77044: CALL_OW 251
77048: ST_TO_ADDR
// if not building or not x or not y then
77049: LD_VAR 0 2
77053: NOT
77054: PUSH
77055: LD_VAR 0 4
77059: NOT
77060: OR
77061: PUSH
77062: LD_VAR 0 5
77066: NOT
77067: OR
77068: IFFALSE 77072
// exit ;
77070: GO 77164
// if GetTaskList ( unit ) then
77072: LD_VAR 0 1
77076: PPUSH
77077: CALL_OW 437
77081: IFFALSE 77164
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77083: LD_STRING e
77085: PUSH
77086: LD_VAR 0 1
77090: PPUSH
77091: CALL_OW 437
77095: PUSH
77096: LD_INT 1
77098: ARRAY
77099: PUSH
77100: LD_INT 1
77102: ARRAY
77103: EQUAL
77104: PUSH
77105: LD_VAR 0 4
77109: PUSH
77110: LD_VAR 0 1
77114: PPUSH
77115: CALL_OW 437
77119: PUSH
77120: LD_INT 1
77122: ARRAY
77123: PUSH
77124: LD_INT 2
77126: ARRAY
77127: EQUAL
77128: AND
77129: PUSH
77130: LD_VAR 0 5
77134: PUSH
77135: LD_VAR 0 1
77139: PPUSH
77140: CALL_OW 437
77144: PUSH
77145: LD_INT 1
77147: ARRAY
77148: PUSH
77149: LD_INT 3
77151: ARRAY
77152: EQUAL
77153: AND
77154: IFFALSE 77164
// result := true end ;
77156: LD_ADDR_VAR 0 3
77160: PUSH
77161: LD_INT 1
77163: ST_TO_ADDR
// end ;
77164: LD_VAR 0 3
77168: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77169: LD_INT 0
77171: PPUSH
// result := false ;
77172: LD_ADDR_VAR 0 4
77176: PUSH
77177: LD_INT 0
77179: ST_TO_ADDR
// if GetTaskList ( unit ) then
77180: LD_VAR 0 1
77184: PPUSH
77185: CALL_OW 437
77189: IFFALSE 77272
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77191: LD_STRING M
77193: PUSH
77194: LD_VAR 0 1
77198: PPUSH
77199: CALL_OW 437
77203: PUSH
77204: LD_INT 1
77206: ARRAY
77207: PUSH
77208: LD_INT 1
77210: ARRAY
77211: EQUAL
77212: PUSH
77213: LD_VAR 0 2
77217: PUSH
77218: LD_VAR 0 1
77222: PPUSH
77223: CALL_OW 437
77227: PUSH
77228: LD_INT 1
77230: ARRAY
77231: PUSH
77232: LD_INT 2
77234: ARRAY
77235: EQUAL
77236: AND
77237: PUSH
77238: LD_VAR 0 3
77242: PUSH
77243: LD_VAR 0 1
77247: PPUSH
77248: CALL_OW 437
77252: PUSH
77253: LD_INT 1
77255: ARRAY
77256: PUSH
77257: LD_INT 3
77259: ARRAY
77260: EQUAL
77261: AND
77262: IFFALSE 77272
// result := true ;
77264: LD_ADDR_VAR 0 4
77268: PUSH
77269: LD_INT 1
77271: ST_TO_ADDR
// end ; end ;
77272: LD_VAR 0 4
77276: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77277: LD_INT 0
77279: PPUSH
77280: PPUSH
77281: PPUSH
77282: PPUSH
// if not unit or not area then
77283: LD_VAR 0 1
77287: NOT
77288: PUSH
77289: LD_VAR 0 2
77293: NOT
77294: OR
77295: IFFALSE 77299
// exit ;
77297: GO 77463
// tmp := AreaToList ( area , i ) ;
77299: LD_ADDR_VAR 0 6
77303: PUSH
77304: LD_VAR 0 2
77308: PPUSH
77309: LD_VAR 0 5
77313: PPUSH
77314: CALL_OW 517
77318: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77319: LD_ADDR_VAR 0 5
77323: PUSH
77324: DOUBLE
77325: LD_INT 1
77327: DEC
77328: ST_TO_ADDR
77329: LD_VAR 0 6
77333: PUSH
77334: LD_INT 1
77336: ARRAY
77337: PUSH
77338: FOR_TO
77339: IFFALSE 77461
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77341: LD_ADDR_VAR 0 7
77345: PUSH
77346: LD_VAR 0 6
77350: PUSH
77351: LD_INT 1
77353: ARRAY
77354: PUSH
77355: LD_VAR 0 5
77359: ARRAY
77360: PUSH
77361: LD_VAR 0 6
77365: PUSH
77366: LD_INT 2
77368: ARRAY
77369: PUSH
77370: LD_VAR 0 5
77374: ARRAY
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77380: LD_VAR 0 7
77384: PUSH
77385: LD_INT 1
77387: ARRAY
77388: PPUSH
77389: LD_VAR 0 7
77393: PUSH
77394: LD_INT 2
77396: ARRAY
77397: PPUSH
77398: CALL_OW 428
77402: PUSH
77403: LD_INT 0
77405: EQUAL
77406: IFFALSE 77459
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77408: LD_VAR 0 1
77412: PPUSH
77413: LD_VAR 0 7
77417: PUSH
77418: LD_INT 1
77420: ARRAY
77421: PPUSH
77422: LD_VAR 0 7
77426: PUSH
77427: LD_INT 2
77429: ARRAY
77430: PPUSH
77431: LD_VAR 0 3
77435: PPUSH
77436: CALL_OW 48
// result := IsPlaced ( unit ) ;
77440: LD_ADDR_VAR 0 4
77444: PUSH
77445: LD_VAR 0 1
77449: PPUSH
77450: CALL_OW 305
77454: ST_TO_ADDR
// exit ;
77455: POP
77456: POP
77457: GO 77463
// end ; end ;
77459: GO 77338
77461: POP
77462: POP
// end ;
77463: LD_VAR 0 4
77467: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77468: LD_INT 0
77470: PPUSH
77471: PPUSH
77472: PPUSH
// if not side or side > 8 then
77473: LD_VAR 0 1
77477: NOT
77478: PUSH
77479: LD_VAR 0 1
77483: PUSH
77484: LD_INT 8
77486: GREATER
77487: OR
77488: IFFALSE 77492
// exit ;
77490: GO 77679
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77492: LD_ADDR_VAR 0 4
77496: PUSH
77497: LD_INT 22
77499: PUSH
77500: LD_VAR 0 1
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: PUSH
77509: LD_INT 21
77511: PUSH
77512: LD_INT 3
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PPUSH
77523: CALL_OW 69
77527: ST_TO_ADDR
// if not tmp then
77528: LD_VAR 0 4
77532: NOT
77533: IFFALSE 77537
// exit ;
77535: GO 77679
// enable_addtolog := true ;
77537: LD_ADDR_OWVAR 81
77541: PUSH
77542: LD_INT 1
77544: ST_TO_ADDR
// AddToLog ( [ ) ;
77545: LD_STRING [
77547: PPUSH
77548: CALL_OW 561
// for i in tmp do
77552: LD_ADDR_VAR 0 3
77556: PUSH
77557: LD_VAR 0 4
77561: PUSH
77562: FOR_IN
77563: IFFALSE 77670
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77565: LD_STRING [
77567: PUSH
77568: LD_VAR 0 3
77572: PPUSH
77573: CALL_OW 266
77577: STR
77578: PUSH
77579: LD_STRING , 
77581: STR
77582: PUSH
77583: LD_VAR 0 3
77587: PPUSH
77588: CALL_OW 250
77592: STR
77593: PUSH
77594: LD_STRING , 
77596: STR
77597: PUSH
77598: LD_VAR 0 3
77602: PPUSH
77603: CALL_OW 251
77607: STR
77608: PUSH
77609: LD_STRING , 
77611: STR
77612: PUSH
77613: LD_VAR 0 3
77617: PPUSH
77618: CALL_OW 254
77622: STR
77623: PUSH
77624: LD_STRING , 
77626: STR
77627: PUSH
77628: LD_VAR 0 3
77632: PPUSH
77633: LD_INT 1
77635: PPUSH
77636: CALL_OW 268
77640: STR
77641: PUSH
77642: LD_STRING , 
77644: STR
77645: PUSH
77646: LD_VAR 0 3
77650: PPUSH
77651: LD_INT 2
77653: PPUSH
77654: CALL_OW 268
77658: STR
77659: PUSH
77660: LD_STRING ],
77662: STR
77663: PPUSH
77664: CALL_OW 561
// end ;
77668: GO 77562
77670: POP
77671: POP
// AddToLog ( ]; ) ;
77672: LD_STRING ];
77674: PPUSH
77675: CALL_OW 561
// end ;
77679: LD_VAR 0 2
77683: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77684: LD_INT 0
77686: PPUSH
77687: PPUSH
77688: PPUSH
77689: PPUSH
77690: PPUSH
// if not area or not rate or not max then
77691: LD_VAR 0 1
77695: NOT
77696: PUSH
77697: LD_VAR 0 2
77701: NOT
77702: OR
77703: PUSH
77704: LD_VAR 0 4
77708: NOT
77709: OR
77710: IFFALSE 77714
// exit ;
77712: GO 77906
// while 1 do
77714: LD_INT 1
77716: IFFALSE 77906
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77718: LD_ADDR_VAR 0 9
77722: PUSH
77723: LD_VAR 0 1
77727: PPUSH
77728: LD_INT 1
77730: PPUSH
77731: CALL_OW 287
77735: PUSH
77736: LD_INT 10
77738: MUL
77739: ST_TO_ADDR
// r := rate / 10 ;
77740: LD_ADDR_VAR 0 7
77744: PUSH
77745: LD_VAR 0 2
77749: PUSH
77750: LD_INT 10
77752: DIVREAL
77753: ST_TO_ADDR
// time := 1 1$00 ;
77754: LD_ADDR_VAR 0 8
77758: PUSH
77759: LD_INT 2100
77761: ST_TO_ADDR
// if amount < min then
77762: LD_VAR 0 9
77766: PUSH
77767: LD_VAR 0 3
77771: LESS
77772: IFFALSE 77790
// r := r * 2 else
77774: LD_ADDR_VAR 0 7
77778: PUSH
77779: LD_VAR 0 7
77783: PUSH
77784: LD_INT 2
77786: MUL
77787: ST_TO_ADDR
77788: GO 77816
// if amount > max then
77790: LD_VAR 0 9
77794: PUSH
77795: LD_VAR 0 4
77799: GREATER
77800: IFFALSE 77816
// r := r / 2 ;
77802: LD_ADDR_VAR 0 7
77806: PUSH
77807: LD_VAR 0 7
77811: PUSH
77812: LD_INT 2
77814: DIVREAL
77815: ST_TO_ADDR
// time := time / r ;
77816: LD_ADDR_VAR 0 8
77820: PUSH
77821: LD_VAR 0 8
77825: PUSH
77826: LD_VAR 0 7
77830: DIVREAL
77831: ST_TO_ADDR
// if time < 0 then
77832: LD_VAR 0 8
77836: PUSH
77837: LD_INT 0
77839: LESS
77840: IFFALSE 77857
// time := time * - 1 ;
77842: LD_ADDR_VAR 0 8
77846: PUSH
77847: LD_VAR 0 8
77851: PUSH
77852: LD_INT 1
77854: NEG
77855: MUL
77856: ST_TO_ADDR
// wait ( time ) ;
77857: LD_VAR 0 8
77861: PPUSH
77862: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77866: LD_INT 35
77868: PPUSH
77869: LD_INT 875
77871: PPUSH
77872: CALL_OW 12
77876: PPUSH
77877: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77881: LD_INT 1
77883: PPUSH
77884: LD_INT 5
77886: PPUSH
77887: CALL_OW 12
77891: PPUSH
77892: LD_VAR 0 1
77896: PPUSH
77897: LD_INT 1
77899: PPUSH
77900: CALL_OW 55
// end ;
77904: GO 77714
// end ;
77906: LD_VAR 0 5
77910: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77911: LD_INT 0
77913: PPUSH
77914: PPUSH
77915: PPUSH
77916: PPUSH
77917: PPUSH
77918: PPUSH
77919: PPUSH
77920: PPUSH
// if not turrets or not factories then
77921: LD_VAR 0 1
77925: NOT
77926: PUSH
77927: LD_VAR 0 2
77931: NOT
77932: OR
77933: IFFALSE 77937
// exit ;
77935: GO 78244
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77937: LD_ADDR_VAR 0 10
77941: PUSH
77942: LD_INT 5
77944: PUSH
77945: LD_INT 6
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: PUSH
77952: LD_INT 2
77954: PUSH
77955: LD_INT 4
77957: PUSH
77958: EMPTY
77959: LIST
77960: LIST
77961: PUSH
77962: LD_INT 3
77964: PUSH
77965: LD_INT 5
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: LIST
77976: PUSH
77977: LD_INT 24
77979: PUSH
77980: LD_INT 25
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: LD_INT 23
77989: PUSH
77990: LD_INT 27
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: PUSH
78001: LD_INT 42
78003: PUSH
78004: LD_INT 43
78006: PUSH
78007: EMPTY
78008: LIST
78009: LIST
78010: PUSH
78011: LD_INT 44
78013: PUSH
78014: LD_INT 46
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: LD_INT 45
78023: PUSH
78024: LD_INT 47
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: LIST
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: LIST
78040: ST_TO_ADDR
// result := [ ] ;
78041: LD_ADDR_VAR 0 3
78045: PUSH
78046: EMPTY
78047: ST_TO_ADDR
// for i in turrets do
78048: LD_ADDR_VAR 0 4
78052: PUSH
78053: LD_VAR 0 1
78057: PUSH
78058: FOR_IN
78059: IFFALSE 78242
// begin nat := GetNation ( i ) ;
78061: LD_ADDR_VAR 0 7
78065: PUSH
78066: LD_VAR 0 4
78070: PPUSH
78071: CALL_OW 248
78075: ST_TO_ADDR
// weapon := 0 ;
78076: LD_ADDR_VAR 0 8
78080: PUSH
78081: LD_INT 0
78083: ST_TO_ADDR
// if not nat then
78084: LD_VAR 0 7
78088: NOT
78089: IFFALSE 78093
// continue ;
78091: GO 78058
// for j in list [ nat ] do
78093: LD_ADDR_VAR 0 5
78097: PUSH
78098: LD_VAR 0 10
78102: PUSH
78103: LD_VAR 0 7
78107: ARRAY
78108: PUSH
78109: FOR_IN
78110: IFFALSE 78151
// if GetBWeapon ( i ) = j [ 1 ] then
78112: LD_VAR 0 4
78116: PPUSH
78117: CALL_OW 269
78121: PUSH
78122: LD_VAR 0 5
78126: PUSH
78127: LD_INT 1
78129: ARRAY
78130: EQUAL
78131: IFFALSE 78149
// begin weapon := j [ 2 ] ;
78133: LD_ADDR_VAR 0 8
78137: PUSH
78138: LD_VAR 0 5
78142: PUSH
78143: LD_INT 2
78145: ARRAY
78146: ST_TO_ADDR
// break ;
78147: GO 78151
// end ;
78149: GO 78109
78151: POP
78152: POP
// if not weapon then
78153: LD_VAR 0 8
78157: NOT
78158: IFFALSE 78162
// continue ;
78160: GO 78058
// for k in factories do
78162: LD_ADDR_VAR 0 6
78166: PUSH
78167: LD_VAR 0 2
78171: PUSH
78172: FOR_IN
78173: IFFALSE 78238
// begin weapons := AvailableWeaponList ( k ) ;
78175: LD_ADDR_VAR 0 9
78179: PUSH
78180: LD_VAR 0 6
78184: PPUSH
78185: CALL_OW 478
78189: ST_TO_ADDR
// if not weapons then
78190: LD_VAR 0 9
78194: NOT
78195: IFFALSE 78199
// continue ;
78197: GO 78172
// if weapon in weapons then
78199: LD_VAR 0 8
78203: PUSH
78204: LD_VAR 0 9
78208: IN
78209: IFFALSE 78236
// begin result := [ i , weapon ] ;
78211: LD_ADDR_VAR 0 3
78215: PUSH
78216: LD_VAR 0 4
78220: PUSH
78221: LD_VAR 0 8
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: ST_TO_ADDR
// exit ;
78230: POP
78231: POP
78232: POP
78233: POP
78234: GO 78244
// end ; end ;
78236: GO 78172
78238: POP
78239: POP
// end ;
78240: GO 78058
78242: POP
78243: POP
// end ;
78244: LD_VAR 0 3
78248: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78249: LD_INT 0
78251: PPUSH
// if not side or side > 8 then
78252: LD_VAR 0 3
78256: NOT
78257: PUSH
78258: LD_VAR 0 3
78262: PUSH
78263: LD_INT 8
78265: GREATER
78266: OR
78267: IFFALSE 78271
// exit ;
78269: GO 78330
// if not range then
78271: LD_VAR 0 4
78275: NOT
78276: IFFALSE 78287
// range := - 12 ;
78278: LD_ADDR_VAR 0 4
78282: PUSH
78283: LD_INT 12
78285: NEG
78286: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78287: LD_VAR 0 1
78291: PPUSH
78292: LD_VAR 0 2
78296: PPUSH
78297: LD_VAR 0 3
78301: PPUSH
78302: LD_VAR 0 4
78306: PPUSH
78307: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78311: LD_VAR 0 1
78315: PPUSH
78316: LD_VAR 0 2
78320: PPUSH
78321: LD_VAR 0 3
78325: PPUSH
78326: CALL_OW 331
// end ;
78330: LD_VAR 0 5
78334: RET
// export function Video ( mode ) ; begin
78335: LD_INT 0
78337: PPUSH
// ingame_video = mode ;
78338: LD_ADDR_OWVAR 52
78342: PUSH
78343: LD_VAR 0 1
78347: ST_TO_ADDR
// interface_hidden = mode ;
78348: LD_ADDR_OWVAR 54
78352: PUSH
78353: LD_VAR 0 1
78357: ST_TO_ADDR
// end ;
78358: LD_VAR 0 2
78362: RET
// export function Join ( array , element ) ; begin
78363: LD_INT 0
78365: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78366: LD_ADDR_VAR 0 3
78370: PUSH
78371: LD_VAR 0 1
78375: PPUSH
78376: LD_VAR 0 1
78380: PUSH
78381: LD_INT 1
78383: PLUS
78384: PPUSH
78385: LD_VAR 0 2
78389: PPUSH
78390: CALL_OW 1
78394: ST_TO_ADDR
// end ;
78395: LD_VAR 0 3
78399: RET
// export function JoinUnion ( array , element ) ; begin
78400: LD_INT 0
78402: PPUSH
// result := array union element ;
78403: LD_ADDR_VAR 0 3
78407: PUSH
78408: LD_VAR 0 1
78412: PUSH
78413: LD_VAR 0 2
78417: UNION
78418: ST_TO_ADDR
// end ;
78419: LD_VAR 0 3
78423: RET
// export function GetBehemoths ( side ) ; begin
78424: LD_INT 0
78426: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
78427: LD_ADDR_VAR 0 2
78431: PUSH
78432: LD_INT 22
78434: PUSH
78435: LD_VAR 0 1
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: PUSH
78444: LD_INT 31
78446: PUSH
78447: LD_INT 25
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: PPUSH
78458: CALL_OW 69
78462: ST_TO_ADDR
// end ;
78463: LD_VAR 0 2
78467: RET
// export function Shuffle ( array ) ; var i , index ; begin
78468: LD_INT 0
78470: PPUSH
78471: PPUSH
78472: PPUSH
// result := [ ] ;
78473: LD_ADDR_VAR 0 2
78477: PUSH
78478: EMPTY
78479: ST_TO_ADDR
// if not array then
78480: LD_VAR 0 1
78484: NOT
78485: IFFALSE 78489
// exit ;
78487: GO 78588
// Randomize ;
78489: CALL_OW 10
// for i = array downto 1 do
78493: LD_ADDR_VAR 0 3
78497: PUSH
78498: DOUBLE
78499: LD_VAR 0 1
78503: INC
78504: ST_TO_ADDR
78505: LD_INT 1
78507: PUSH
78508: FOR_DOWNTO
78509: IFFALSE 78586
// begin index := rand ( 1 , array ) ;
78511: LD_ADDR_VAR 0 4
78515: PUSH
78516: LD_INT 1
78518: PPUSH
78519: LD_VAR 0 1
78523: PPUSH
78524: CALL_OW 12
78528: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78529: LD_ADDR_VAR 0 2
78533: PUSH
78534: LD_VAR 0 2
78538: PPUSH
78539: LD_VAR 0 2
78543: PUSH
78544: LD_INT 1
78546: PLUS
78547: PPUSH
78548: LD_VAR 0 1
78552: PUSH
78553: LD_VAR 0 4
78557: ARRAY
78558: PPUSH
78559: CALL_OW 2
78563: ST_TO_ADDR
// array := Delete ( array , index ) ;
78564: LD_ADDR_VAR 0 1
78568: PUSH
78569: LD_VAR 0 1
78573: PPUSH
78574: LD_VAR 0 4
78578: PPUSH
78579: CALL_OW 3
78583: ST_TO_ADDR
// end ;
78584: GO 78508
78586: POP
78587: POP
// end ;
78588: LD_VAR 0 2
78592: RET
// export function GetBaseMaterials ( base ) ; begin
78593: LD_INT 0
78595: PPUSH
// result := [ 0 , 0 , 0 ] ;
78596: LD_ADDR_VAR 0 2
78600: PUSH
78601: LD_INT 0
78603: PUSH
78604: LD_INT 0
78606: PUSH
78607: LD_INT 0
78609: PUSH
78610: EMPTY
78611: LIST
78612: LIST
78613: LIST
78614: ST_TO_ADDR
// if not base then
78615: LD_VAR 0 1
78619: NOT
78620: IFFALSE 78624
// exit ;
78622: GO 78673
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78624: LD_ADDR_VAR 0 2
78628: PUSH
78629: LD_VAR 0 1
78633: PPUSH
78634: LD_INT 1
78636: PPUSH
78637: CALL_OW 275
78641: PUSH
78642: LD_VAR 0 1
78646: PPUSH
78647: LD_INT 2
78649: PPUSH
78650: CALL_OW 275
78654: PUSH
78655: LD_VAR 0 1
78659: PPUSH
78660: LD_INT 3
78662: PPUSH
78663: CALL_OW 275
78667: PUSH
78668: EMPTY
78669: LIST
78670: LIST
78671: LIST
78672: ST_TO_ADDR
// end ;
78673: LD_VAR 0 2
78677: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78678: LD_INT 0
78680: PPUSH
78681: PPUSH
// result := array ;
78682: LD_ADDR_VAR 0 3
78686: PUSH
78687: LD_VAR 0 1
78691: ST_TO_ADDR
// if size > 0 then
78692: LD_VAR 0 2
78696: PUSH
78697: LD_INT 0
78699: GREATER
78700: IFFALSE 78746
// for i := array downto size do
78702: LD_ADDR_VAR 0 4
78706: PUSH
78707: DOUBLE
78708: LD_VAR 0 1
78712: INC
78713: ST_TO_ADDR
78714: LD_VAR 0 2
78718: PUSH
78719: FOR_DOWNTO
78720: IFFALSE 78744
// result := Delete ( result , result ) ;
78722: LD_ADDR_VAR 0 3
78726: PUSH
78727: LD_VAR 0 3
78731: PPUSH
78732: LD_VAR 0 3
78736: PPUSH
78737: CALL_OW 3
78741: ST_TO_ADDR
78742: GO 78719
78744: POP
78745: POP
// end ;
78746: LD_VAR 0 3
78750: RET
// export function ComExit ( unit ) ; var tmp ; begin
78751: LD_INT 0
78753: PPUSH
78754: PPUSH
// if not IsInUnit ( unit ) then
78755: LD_VAR 0 1
78759: PPUSH
78760: CALL_OW 310
78764: NOT
78765: IFFALSE 78769
// exit ;
78767: GO 78829
// tmp := IsInUnit ( unit ) ;
78769: LD_ADDR_VAR 0 3
78773: PUSH
78774: LD_VAR 0 1
78778: PPUSH
78779: CALL_OW 310
78783: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78784: LD_VAR 0 3
78788: PPUSH
78789: CALL_OW 247
78793: PUSH
78794: LD_INT 2
78796: EQUAL
78797: IFFALSE 78810
// ComExitVehicle ( unit ) else
78799: LD_VAR 0 1
78803: PPUSH
78804: CALL_OW 121
78808: GO 78819
// ComExitBuilding ( unit ) ;
78810: LD_VAR 0 1
78814: PPUSH
78815: CALL_OW 122
// result := tmp ;
78819: LD_ADDR_VAR 0 2
78823: PUSH
78824: LD_VAR 0 3
78828: ST_TO_ADDR
// end ;
78829: LD_VAR 0 2
78833: RET
// export function ComExitAll ( units ) ; var i ; begin
78834: LD_INT 0
78836: PPUSH
78837: PPUSH
// if not units then
78838: LD_VAR 0 1
78842: NOT
78843: IFFALSE 78847
// exit ;
78845: GO 78873
// for i in units do
78847: LD_ADDR_VAR 0 3
78851: PUSH
78852: LD_VAR 0 1
78856: PUSH
78857: FOR_IN
78858: IFFALSE 78871
// ComExit ( i ) ;
78860: LD_VAR 0 3
78864: PPUSH
78865: CALL 78751 0 1
78869: GO 78857
78871: POP
78872: POP
// end ;
78873: LD_VAR 0 2
78877: RET
// export function ResetHc ; begin
78878: LD_INT 0
78880: PPUSH
// InitHc ;
78881: CALL_OW 19
// hc_importance := 0 ;
78885: LD_ADDR_OWVAR 32
78889: PUSH
78890: LD_INT 0
78892: ST_TO_ADDR
// end ;
78893: LD_VAR 0 1
78897: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78898: LD_INT 0
78900: PPUSH
78901: PPUSH
78902: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78903: LD_ADDR_VAR 0 6
78907: PUSH
78908: LD_VAR 0 1
78912: PUSH
78913: LD_VAR 0 3
78917: PLUS
78918: PUSH
78919: LD_INT 2
78921: DIV
78922: ST_TO_ADDR
// if _x < 0 then
78923: LD_VAR 0 6
78927: PUSH
78928: LD_INT 0
78930: LESS
78931: IFFALSE 78948
// _x := _x * - 1 ;
78933: LD_ADDR_VAR 0 6
78937: PUSH
78938: LD_VAR 0 6
78942: PUSH
78943: LD_INT 1
78945: NEG
78946: MUL
78947: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78948: LD_ADDR_VAR 0 7
78952: PUSH
78953: LD_VAR 0 2
78957: PUSH
78958: LD_VAR 0 4
78962: PLUS
78963: PUSH
78964: LD_INT 2
78966: DIV
78967: ST_TO_ADDR
// if _y < 0 then
78968: LD_VAR 0 7
78972: PUSH
78973: LD_INT 0
78975: LESS
78976: IFFALSE 78993
// _y := _y * - 1 ;
78978: LD_ADDR_VAR 0 7
78982: PUSH
78983: LD_VAR 0 7
78987: PUSH
78988: LD_INT 1
78990: NEG
78991: MUL
78992: ST_TO_ADDR
// result := [ _x , _y ] ;
78993: LD_ADDR_VAR 0 5
78997: PUSH
78998: LD_VAR 0 6
79002: PUSH
79003: LD_VAR 0 7
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: ST_TO_ADDR
// end ;
79012: LD_VAR 0 5
79016: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79017: LD_INT 0
79019: PPUSH
79020: PPUSH
79021: PPUSH
79022: PPUSH
// task := GetTaskList ( unit ) ;
79023: LD_ADDR_VAR 0 7
79027: PUSH
79028: LD_VAR 0 1
79032: PPUSH
79033: CALL_OW 437
79037: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79038: LD_VAR 0 7
79042: NOT
79043: PUSH
79044: LD_VAR 0 1
79048: PPUSH
79049: LD_VAR 0 2
79053: PPUSH
79054: CALL_OW 308
79058: NOT
79059: AND
79060: IFFALSE 79064
// exit ;
79062: GO 79182
// if IsInArea ( unit , area ) then
79064: LD_VAR 0 1
79068: PPUSH
79069: LD_VAR 0 2
79073: PPUSH
79074: CALL_OW 308
79078: IFFALSE 79096
// begin ComMoveToArea ( unit , goAway ) ;
79080: LD_VAR 0 1
79084: PPUSH
79085: LD_VAR 0 3
79089: PPUSH
79090: CALL_OW 113
// exit ;
79094: GO 79182
// end ; if task [ 1 ] [ 1 ] <> M then
79096: LD_VAR 0 7
79100: PUSH
79101: LD_INT 1
79103: ARRAY
79104: PUSH
79105: LD_INT 1
79107: ARRAY
79108: PUSH
79109: LD_STRING M
79111: NONEQUAL
79112: IFFALSE 79116
// exit ;
79114: GO 79182
// x := task [ 1 ] [ 2 ] ;
79116: LD_ADDR_VAR 0 5
79120: PUSH
79121: LD_VAR 0 7
79125: PUSH
79126: LD_INT 1
79128: ARRAY
79129: PUSH
79130: LD_INT 2
79132: ARRAY
79133: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79134: LD_ADDR_VAR 0 6
79138: PUSH
79139: LD_VAR 0 7
79143: PUSH
79144: LD_INT 1
79146: ARRAY
79147: PUSH
79148: LD_INT 3
79150: ARRAY
79151: ST_TO_ADDR
// if InArea ( x , y , area ) then
79152: LD_VAR 0 5
79156: PPUSH
79157: LD_VAR 0 6
79161: PPUSH
79162: LD_VAR 0 2
79166: PPUSH
79167: CALL_OW 309
79171: IFFALSE 79182
// ComStop ( unit ) ;
79173: LD_VAR 0 1
79177: PPUSH
79178: CALL_OW 141
// end ;
79182: LD_VAR 0 4
79186: RET
// export function Abs ( value ) ; begin
79187: LD_INT 0
79189: PPUSH
// result := value ;
79190: LD_ADDR_VAR 0 2
79194: PUSH
79195: LD_VAR 0 1
79199: ST_TO_ADDR
// if value < 0 then
79200: LD_VAR 0 1
79204: PUSH
79205: LD_INT 0
79207: LESS
79208: IFFALSE 79225
// result := value * - 1 ;
79210: LD_ADDR_VAR 0 2
79214: PUSH
79215: LD_VAR 0 1
79219: PUSH
79220: LD_INT 1
79222: NEG
79223: MUL
79224: ST_TO_ADDR
// end ;
79225: LD_VAR 0 2
79229: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79230: LD_INT 0
79232: PPUSH
79233: PPUSH
79234: PPUSH
79235: PPUSH
79236: PPUSH
79237: PPUSH
79238: PPUSH
79239: PPUSH
// if not unit or not building then
79240: LD_VAR 0 1
79244: NOT
79245: PUSH
79246: LD_VAR 0 2
79250: NOT
79251: OR
79252: IFFALSE 79256
// exit ;
79254: GO 79482
// x := GetX ( building ) ;
79256: LD_ADDR_VAR 0 4
79260: PUSH
79261: LD_VAR 0 2
79265: PPUSH
79266: CALL_OW 250
79270: ST_TO_ADDR
// y := GetY ( building ) ;
79271: LD_ADDR_VAR 0 6
79275: PUSH
79276: LD_VAR 0 2
79280: PPUSH
79281: CALL_OW 251
79285: ST_TO_ADDR
// d := GetDir ( building ) ;
79286: LD_ADDR_VAR 0 8
79290: PUSH
79291: LD_VAR 0 2
79295: PPUSH
79296: CALL_OW 254
79300: ST_TO_ADDR
// r := 4 ;
79301: LD_ADDR_VAR 0 9
79305: PUSH
79306: LD_INT 4
79308: ST_TO_ADDR
// for i := 1 to 5 do
79309: LD_ADDR_VAR 0 10
79313: PUSH
79314: DOUBLE
79315: LD_INT 1
79317: DEC
79318: ST_TO_ADDR
79319: LD_INT 5
79321: PUSH
79322: FOR_TO
79323: IFFALSE 79480
// begin _x := ShiftX ( x , d , r + i ) ;
79325: LD_ADDR_VAR 0 5
79329: PUSH
79330: LD_VAR 0 4
79334: PPUSH
79335: LD_VAR 0 8
79339: PPUSH
79340: LD_VAR 0 9
79344: PUSH
79345: LD_VAR 0 10
79349: PLUS
79350: PPUSH
79351: CALL_OW 272
79355: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79356: LD_ADDR_VAR 0 7
79360: PUSH
79361: LD_VAR 0 6
79365: PPUSH
79366: LD_VAR 0 8
79370: PPUSH
79371: LD_VAR 0 9
79375: PUSH
79376: LD_VAR 0 10
79380: PLUS
79381: PPUSH
79382: CALL_OW 273
79386: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79387: LD_VAR 0 5
79391: PPUSH
79392: LD_VAR 0 7
79396: PPUSH
79397: CALL_OW 488
79401: PUSH
79402: LD_VAR 0 5
79406: PPUSH
79407: LD_VAR 0 7
79411: PPUSH
79412: CALL_OW 428
79416: PPUSH
79417: CALL_OW 247
79421: PUSH
79422: LD_INT 3
79424: PUSH
79425: LD_INT 2
79427: PUSH
79428: EMPTY
79429: LIST
79430: LIST
79431: IN
79432: NOT
79433: AND
79434: IFFALSE 79478
// begin ComMoveXY ( unit , _x , _y ) ;
79436: LD_VAR 0 1
79440: PPUSH
79441: LD_VAR 0 5
79445: PPUSH
79446: LD_VAR 0 7
79450: PPUSH
79451: CALL_OW 111
// result := [ _x , _y ] ;
79455: LD_ADDR_VAR 0 3
79459: PUSH
79460: LD_VAR 0 5
79464: PUSH
79465: LD_VAR 0 7
79469: PUSH
79470: EMPTY
79471: LIST
79472: LIST
79473: ST_TO_ADDR
// exit ;
79474: POP
79475: POP
79476: GO 79482
// end ; end ;
79478: GO 79322
79480: POP
79481: POP
// end ;
79482: LD_VAR 0 3
79486: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79487: LD_INT 0
79489: PPUSH
79490: PPUSH
79491: PPUSH
// result := 0 ;
79492: LD_ADDR_VAR 0 3
79496: PUSH
79497: LD_INT 0
79499: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79500: LD_VAR 0 1
79504: PUSH
79505: LD_INT 0
79507: LESS
79508: PUSH
79509: LD_VAR 0 1
79513: PUSH
79514: LD_INT 8
79516: GREATER
79517: OR
79518: PUSH
79519: LD_VAR 0 2
79523: PUSH
79524: LD_INT 0
79526: LESS
79527: OR
79528: PUSH
79529: LD_VAR 0 2
79533: PUSH
79534: LD_INT 8
79536: GREATER
79537: OR
79538: IFFALSE 79542
// exit ;
79540: GO 79617
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79542: LD_ADDR_VAR 0 4
79546: PUSH
79547: LD_INT 22
79549: PUSH
79550: LD_VAR 0 2
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: PPUSH
79559: CALL_OW 69
79563: PUSH
79564: FOR_IN
79565: IFFALSE 79615
// begin un := UnitShoot ( i ) ;
79567: LD_ADDR_VAR 0 5
79571: PUSH
79572: LD_VAR 0 4
79576: PPUSH
79577: CALL_OW 504
79581: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79582: LD_VAR 0 5
79586: PPUSH
79587: CALL_OW 255
79591: PUSH
79592: LD_VAR 0 1
79596: EQUAL
79597: IFFALSE 79613
// begin result := un ;
79599: LD_ADDR_VAR 0 3
79603: PUSH
79604: LD_VAR 0 5
79608: ST_TO_ADDR
// exit ;
79609: POP
79610: POP
79611: GO 79617
// end ; end ;
79613: GO 79564
79615: POP
79616: POP
// end ;
79617: LD_VAR 0 3
79621: RET
// export function GetCargoBay ( units ) ; begin
79622: LD_INT 0
79624: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79625: LD_ADDR_VAR 0 2
79629: PUSH
79630: LD_VAR 0 1
79634: PPUSH
79635: LD_INT 2
79637: PUSH
79638: LD_INT 34
79640: PUSH
79641: LD_INT 12
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: PUSH
79648: LD_INT 34
79650: PUSH
79651: LD_INT 51
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: LD_INT 34
79660: PUSH
79661: LD_INT 32
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: PUSH
79668: LD_INT 34
79670: PUSH
79671: LD_EXP 52
79675: PUSH
79676: EMPTY
79677: LIST
79678: LIST
79679: PUSH
79680: EMPTY
79681: LIST
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: PPUSH
79687: CALL_OW 72
79691: ST_TO_ADDR
// end ;
79692: LD_VAR 0 2
79696: RET
// export function Negate ( value ) ; begin
79697: LD_INT 0
79699: PPUSH
// result := not value ;
79700: LD_ADDR_VAR 0 2
79704: PUSH
79705: LD_VAR 0 1
79709: NOT
79710: ST_TO_ADDR
// end ;
79711: LD_VAR 0 2
79715: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
79716: LD_INT 0
79718: PPUSH
// if x1 = x2 then
79719: LD_VAR 0 1
79723: PUSH
79724: LD_VAR 0 3
79728: EQUAL
79729: IFFALSE 79763
// begin if y1 > y2 then
79731: LD_VAR 0 2
79735: PUSH
79736: LD_VAR 0 4
79740: GREATER
79741: IFFALSE 79753
// result := 0 else
79743: LD_ADDR_VAR 0 5
79747: PUSH
79748: LD_INT 0
79750: ST_TO_ADDR
79751: GO 79761
// result := 3 ;
79753: LD_ADDR_VAR 0 5
79757: PUSH
79758: LD_INT 3
79760: ST_TO_ADDR
// exit ;
79761: GO 79849
// end ; if y1 = y2 then
79763: LD_VAR 0 2
79767: PUSH
79768: LD_VAR 0 4
79772: EQUAL
79773: IFFALSE 79807
// begin if x1 > x2 then
79775: LD_VAR 0 1
79779: PUSH
79780: LD_VAR 0 3
79784: GREATER
79785: IFFALSE 79797
// result := 1 else
79787: LD_ADDR_VAR 0 5
79791: PUSH
79792: LD_INT 1
79794: ST_TO_ADDR
79795: GO 79805
// result := 4 ;
79797: LD_ADDR_VAR 0 5
79801: PUSH
79802: LD_INT 4
79804: ST_TO_ADDR
// exit ;
79805: GO 79849
// end ; if x1 > x2 and y1 > y2 then
79807: LD_VAR 0 1
79811: PUSH
79812: LD_VAR 0 3
79816: GREATER
79817: PUSH
79818: LD_VAR 0 2
79822: PUSH
79823: LD_VAR 0 4
79827: GREATER
79828: AND
79829: IFFALSE 79841
// result := 2 else
79831: LD_ADDR_VAR 0 5
79835: PUSH
79836: LD_INT 2
79838: ST_TO_ADDR
79839: GO 79849
// result := 5 ;
79841: LD_ADDR_VAR 0 5
79845: PUSH
79846: LD_INT 5
79848: ST_TO_ADDR
// end ;
79849: LD_VAR 0 5
79853: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79854: LD_INT 0
79856: PPUSH
79857: PPUSH
// if not driver or not IsInUnit ( driver ) then
79858: LD_VAR 0 1
79862: NOT
79863: PUSH
79864: LD_VAR 0 1
79868: PPUSH
79869: CALL_OW 310
79873: NOT
79874: OR
79875: IFFALSE 79879
// exit ;
79877: GO 79969
// vehicle := IsInUnit ( driver ) ;
79879: LD_ADDR_VAR 0 3
79883: PUSH
79884: LD_VAR 0 1
79888: PPUSH
79889: CALL_OW 310
79893: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79894: LD_VAR 0 1
79898: PPUSH
79899: LD_STRING \
79901: PUSH
79902: LD_INT 0
79904: PUSH
79905: LD_INT 0
79907: PUSH
79908: LD_INT 0
79910: PUSH
79911: LD_INT 0
79913: PUSH
79914: LD_INT 0
79916: PUSH
79917: LD_INT 0
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: LIST
79924: LIST
79925: LIST
79926: LIST
79927: LIST
79928: PUSH
79929: LD_STRING E
79931: PUSH
79932: LD_INT 0
79934: PUSH
79935: LD_INT 0
79937: PUSH
79938: LD_VAR 0 3
79942: PUSH
79943: LD_INT 0
79945: PUSH
79946: LD_INT 0
79948: PUSH
79949: LD_INT 0
79951: PUSH
79952: EMPTY
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: LIST
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PPUSH
79965: CALL_OW 446
// end ;
79969: LD_VAR 0 2
79973: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79974: LD_INT 0
79976: PPUSH
79977: PPUSH
79978: PPUSH
// tmp := [ ] ;
79979: LD_ADDR_VAR 0 5
79983: PUSH
79984: EMPTY
79985: ST_TO_ADDR
// for i in units do
79986: LD_ADDR_VAR 0 4
79990: PUSH
79991: LD_VAR 0 1
79995: PUSH
79996: FOR_IN
79997: IFFALSE 80035
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79999: LD_ADDR_VAR 0 5
80003: PUSH
80004: LD_VAR 0 5
80008: PPUSH
80009: LD_VAR 0 5
80013: PUSH
80014: LD_INT 1
80016: PLUS
80017: PPUSH
80018: LD_VAR 0 4
80022: PPUSH
80023: CALL_OW 256
80027: PPUSH
80028: CALL_OW 2
80032: ST_TO_ADDR
80033: GO 79996
80035: POP
80036: POP
// if not tmp then
80037: LD_VAR 0 5
80041: NOT
80042: IFFALSE 80046
// exit ;
80044: GO 80094
// if asc then
80046: LD_VAR 0 2
80050: IFFALSE 80074
// result := SortListByListAsc ( units , tmp ) else
80052: LD_ADDR_VAR 0 3
80056: PUSH
80057: LD_VAR 0 1
80061: PPUSH
80062: LD_VAR 0 5
80066: PPUSH
80067: CALL_OW 76
80071: ST_TO_ADDR
80072: GO 80094
// result := SortListByListDesc ( units , tmp ) ;
80074: LD_ADDR_VAR 0 3
80078: PUSH
80079: LD_VAR 0 1
80083: PPUSH
80084: LD_VAR 0 5
80088: PPUSH
80089: CALL_OW 77
80093: ST_TO_ADDR
// end ;
80094: LD_VAR 0 3
80098: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80099: LD_INT 0
80101: PPUSH
80102: PPUSH
// task := GetTaskList ( mech ) ;
80103: LD_ADDR_VAR 0 4
80107: PUSH
80108: LD_VAR 0 1
80112: PPUSH
80113: CALL_OW 437
80117: ST_TO_ADDR
// if not task then
80118: LD_VAR 0 4
80122: NOT
80123: IFFALSE 80127
// exit ;
80125: GO 80169
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80127: LD_ADDR_VAR 0 3
80131: PUSH
80132: LD_VAR 0 4
80136: PUSH
80137: LD_INT 1
80139: ARRAY
80140: PUSH
80141: LD_INT 1
80143: ARRAY
80144: PUSH
80145: LD_STRING r
80147: EQUAL
80148: PUSH
80149: LD_VAR 0 4
80153: PUSH
80154: LD_INT 1
80156: ARRAY
80157: PUSH
80158: LD_INT 4
80160: ARRAY
80161: PUSH
80162: LD_VAR 0 2
80166: EQUAL
80167: AND
80168: ST_TO_ADDR
// end ;
80169: LD_VAR 0 3
80173: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80174: LD_INT 0
80176: PPUSH
// SetDir ( unit , d ) ;
80177: LD_VAR 0 1
80181: PPUSH
80182: LD_VAR 0 4
80186: PPUSH
80187: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80191: LD_VAR 0 1
80195: PPUSH
80196: LD_VAR 0 2
80200: PPUSH
80201: LD_VAR 0 3
80205: PPUSH
80206: LD_VAR 0 5
80210: PPUSH
80211: CALL_OW 48
// end ; end_of_file
80215: LD_VAR 0 6
80219: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80220: LD_VAR 0 1
80224: PUSH
80225: LD_INT 200
80227: DOUBLE
80228: GREATEREQUAL
80229: IFFALSE 80237
80231: LD_INT 299
80233: DOUBLE
80234: LESSEQUAL
80235: IFTRUE 80239
80237: GO 80271
80239: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80240: LD_VAR 0 1
80244: PPUSH
80245: LD_VAR 0 2
80249: PPUSH
80250: LD_VAR 0 3
80254: PPUSH
80255: LD_VAR 0 4
80259: PPUSH
80260: LD_VAR 0 5
80264: PPUSH
80265: CALL 37742 0 5
80269: GO 80348
80271: LD_INT 300
80273: DOUBLE
80274: GREATEREQUAL
80275: IFFALSE 80283
80277: LD_INT 399
80279: DOUBLE
80280: LESSEQUAL
80281: IFTRUE 80285
80283: GO 80347
80285: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80286: LD_VAR 0 1
80290: PPUSH
80291: LD_VAR 0 2
80295: PPUSH
80296: LD_VAR 0 3
80300: PPUSH
80301: LD_VAR 0 4
80305: PPUSH
80306: LD_VAR 0 5
80310: PPUSH
80311: LD_VAR 0 6
80315: PPUSH
80316: LD_VAR 0 7
80320: PPUSH
80321: LD_VAR 0 8
80325: PPUSH
80326: LD_VAR 0 9
80330: PPUSH
80331: LD_VAR 0 10
80335: PPUSH
80336: LD_VAR 0 11
80340: PPUSH
80341: CALL 35630 0 11
80345: GO 80348
80347: POP
// end ;
80348: PPOPN 11
80350: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80351: LD_VAR 0 1
80355: PPUSH
80356: LD_VAR 0 2
80360: PPUSH
80361: LD_VAR 0 3
80365: PPUSH
80366: LD_VAR 0 4
80370: PPUSH
80371: LD_VAR 0 5
80375: PPUSH
80376: CALL 37724 0 5
// end ; end_of_file
80380: PPOPN 5
80382: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80383: LD_VAR 0 1
80387: PPUSH
80388: LD_VAR 0 2
80392: PPUSH
80393: LD_VAR 0 3
80397: PPUSH
80398: LD_VAR 0 4
80402: PPUSH
80403: LD_VAR 0 5
80407: PPUSH
80408: LD_VAR 0 6
80412: PPUSH
80413: CALL 24438 0 6
// end ;
80417: PPOPN 6
80419: END
