// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7206 0 0
// CreateNature ;
  57: CALL 20583 0 0
// PrepareRussian ;
  61: CALL 5705 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10525 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 41209 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41209 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 41209 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 41209 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 41209 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 41209 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 41209 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 41209 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 41209 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 41209 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 41209 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 41209 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 3993
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3785: LD_EXP 1
3789: PUSH
3790: LD_INT 55
3792: PUSH
3793: EMPTY
3794: LIST
3795: PPUSH
3796: CALL_OW 69
3800: IN
3801: IFFALSE 3824
// begin ComMoveUnit ( JMM , Joan ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_EXP 16
3812: PPUSH
3813: CALL_OW 112
// wait ( 0 0$05 ) ;
3817: LD_INT 175
3819: PPUSH
3820: CALL_OW 67
// end ; ComExit ( JMM ) ;
3824: LD_EXP 1
3828: PPUSH
3829: CALL 79075 0 1
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3847: LD_EXP 16
3851: PUSH
3852: LD_VAR 0 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3870: LD_EXP 16
3874: PPUSH
3875: LD_EXP 1
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3840
// ComTurnUnit ( Joan , JMM ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_EXP 1
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 119
// wait ( 0 0$1 ) ;
3918: LD_INT 35
3920: PPUSH
3921: CALL_OW 67
// DialogueOn ;
3925: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3929: LD_EXP 16
3933: PPUSH
3934: LD_STRING D5a-Joan-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D5a-JMM-4
3948: PPUSH
3949: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3953: LD_EXP 16
3957: PPUSH
3958: LD_STRING D5a-Joan-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D5a-JMM-5
3972: PPUSH
3973: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_STRING D5a-Joan-6
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; DialogueOn ;
3993: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3997: LD_EXP 1
4001: PPUSH
4002: LD_STRING D6-JMM-1
4004: PPUSH
4005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_STRING D6-Joan-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D6-JMM-2
4028: PPUSH
4029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_STRING D6-Joan-2
4040: PPUSH
4041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4045: LD_EXP 1
4049: PPUSH
4050: LD_STRING D6-JMM-3
4052: PPUSH
4053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4057: LD_EXP 16
4061: PPUSH
4062: LD_STRING D6-Joan-3
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING D6-JMM-4
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// InGameOff ;
4085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4089: LD_EXP 16
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4101: LD_STRING MJ
4103: PPUSH
4104: CALL_OW 337
// joanStatus = 1 ;
4108: LD_ADDR_EXP 17
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// blockSpawn = 0 ;
4116: LD_ADDR_EXP 30
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// end ;
4124: LD_VAR 0 1
4128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4129: LD_INT 0
4131: PPUSH
4132: PPUSH
// if not number or number > 8 then
4133: LD_VAR 0 1
4137: NOT
4138: PUSH
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 8
4146: GREATER
4147: OR
4148: IFFALSE 4152
// exit ;
4150: GO 5700
// repeat wait ( 0 0$7 ) ;
4152: LD_INT 245
4154: PPUSH
4155: CALL_OW 67
// until blockSpawn = 0 ;
4159: LD_EXP 30
4163: PUSH
4164: LD_INT 0
4166: EQUAL
4167: IFFALSE 4152
// uc_side := 1 ;
4169: LD_ADDR_OWVAR 20
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// uc_nation := 1 ;
4177: LD_ADDR_OWVAR 21
4181: PUSH
4182: LD_INT 1
4184: ST_TO_ADDR
// InitHc ;
4185: CALL_OW 19
// if number = 1 then
4189: LD_VAR 0 1
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: IFFALSE 4373
// begin hc_class := 3 ;
4199: LD_ADDR_OWVAR 28
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// hc_sex := sex_male ;
4207: LD_ADDR_OWVAR 27
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING SecondCharsGal
4222: ST_TO_ADDR
// hc_face_number := 55 ;
4223: LD_ADDR_OWVAR 34
4227: PUSH
4228: LD_INT 55
4230: ST_TO_ADDR
// hc_name := George McCarthy ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING George McCarthy
4238: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4239: LD_ADDR_OWVAR 29
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 10
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4254: LD_ADDR_OWVAR 30
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4277: LD_ADDR_OWVAR 31
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 23
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: CALL_OW 87
// wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// DialogueOn ;
4341: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_STRING D11d-Sol4-1
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D11d-JMM-1
4364: PPUSH
4365: CALL_OW 88
// DialogueOff ;
4369: CALL_OW 7
// end ; if number = 2 then
4373: LD_VAR 0 1
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4557
// begin hc_class := 1 ;
4383: LD_ADDR_OWVAR 28
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// hc_sex := sex_male ;
4391: LD_ADDR_OWVAR 27
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4399: LD_ADDR_OWVAR 33
4403: PUSH
4404: LD_STRING AmGalRemake
4406: ST_TO_ADDR
// hc_face_number := 7 ;
4407: LD_ADDR_OWVAR 34
4411: PUSH
4412: LD_INT 7
4414: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING Bobby Jordan
4422: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4423: LD_ADDR_OWVAR 29
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: LD_INT 11
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4438: LD_ADDR_OWVAR 30
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4461: LD_ADDR_OWVAR 31
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_INT 24
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 49
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// DialogueOn ;
4525: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_STRING D11b-Sol3-1
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D11b-JMM-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// end ; if number = 3 then
4557: LD_VAR 0 1
4561: PUSH
4562: LD_INT 3
4564: EQUAL
4565: IFFALSE 4729
// begin hc_class := 1 ;
4567: LD_ADDR_OWVAR 28
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// hc_sex := sex_male ;
4575: LD_ADDR_OWVAR 27
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// hc_gallery := DJ ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING DJ
4590: ST_TO_ADDR
// hc_face_number := 1 ;
4591: LD_ADDR_OWVAR 34
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// hc_name := Darius Dajay ;
4599: LD_ADDR_OWVAR 26
4603: PUSH
4604: LD_STRING Darius Dajay
4606: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4607: LD_ADDR_OWVAR 29
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4622: LD_ADDR_OWVAR 30
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4645: LD_ADDR_OWVAR 31
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 25
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4693: LD_VAR 0 3
4697: PPUSH
4698: CALL_OW 87
// wait ( 0 0$1 ) ;
4702: LD_INT 35
4704: PPUSH
4705: CALL_OW 67
// DialogueOn ;
4709: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_STRING D11f-Sol5-1
4720: PPUSH
4721: CALL_OW 88
// DialogueOff ;
4725: CALL_OW 7
// end ; if number = 4 then
4729: LD_VAR 0 1
4733: PUSH
4734: LD_INT 4
4736: EQUAL
4737: IFFALSE 4874
// begin hc_class := 2 ;
4739: LD_ADDR_OWVAR 28
4743: PUSH
4744: LD_INT 2
4746: ST_TO_ADDR
// hc_sex := sex_female ;
4747: LD_ADDR_OWVAR 27
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4755: LD_ADDR_OWVAR 33
4759: PUSH
4760: LD_STRING SecondCharsGal
4762: ST_TO_ADDR
// hc_face_number := 46 ;
4763: LD_ADDR_OWVAR 34
4767: PUSH
4768: LD_INT 46
4770: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING Sylvia Creak
4778: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4779: LD_ADDR_OWVAR 29
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 9
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4794: LD_ADDR_OWVAR 30
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4817: LD_ADDR_OWVAR 31
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
// un = CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 26
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 87
// end ; if number = 5 then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_INT 5
4881: EQUAL
4882: IFFALSE 5058
// begin hc_class := 1 ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// hc_sex := sex_female ;
4892: LD_ADDR_OWVAR 27
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4900: LD_ADDR_OWVAR 33
4904: PUSH
4905: LD_STRING SecondCharsGal
4907: ST_TO_ADDR
// hc_face_number := 37 ;
4908: LD_ADDR_OWVAR 34
4912: PUSH
4913: LD_INT 37
4915: ST_TO_ADDR
// hc_name := Malena Johnson ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING Malena Johnson
4923: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4924: LD_ADDR_OWVAR 29
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4939: LD_ADDR_OWVAR 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: LD_INT 0
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4962: LD_ADDR_OWVAR 31
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// un = CreateHuman ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 27
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: CALL_OW 87
// wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// DialogueOn ;
5026: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_STRING D11c-FSol3-1
5037: PPUSH
5038: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5042: LD_EXP 1
5046: PPUSH
5047: LD_STRING D11c-JMM-1
5049: PPUSH
5050: CALL_OW 88
// DialogueOff ;
5054: CALL_OW 7
// end ; if number = 6 then
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 6
5065: EQUAL
5066: IFFALSE 5240
// begin hc_class := 1 ;
5068: LD_ADDR_OWVAR 28
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// hc_sex := sex_male ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING AmGalRemake
5091: ST_TO_ADDR
// hc_face_number := 1 ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// hc_name := Charles Brown ;
5100: LD_ADDR_OWVAR 26
5104: PUSH
5105: LD_STRING Charles Brown
5107: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5108: LD_ADDR_OWVAR 29
5112: PUSH
5113: LD_INT 12
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5123: LD_ADDR_OWVAR 30
5127: PUSH
5128: LD_INT 2
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5146: LD_ADDR_OWVAR 31
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// un = CreateHuman ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: CALL_OW 44
5178: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 28
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 87
// wait ( 0 0$1 ) ;
5203: LD_INT 35
5205: PPUSH
5206: CALL_OW 67
// DialogueOn ;
5210: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5214: LD_VAR 0 3
5218: PPUSH
5219: LD_STRING D4-Sol1-5
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// tempCharles = un ;
5230: LD_ADDR_EXP 14
5234: PUSH
5235: LD_VAR 0 3
5239: ST_TO_ADDR
// end ; if number = 7 then
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 7
5247: EQUAL
5248: IFFALSE 5520
// begin hc_class := 1 ;
5250: LD_ADDR_OWVAR 28
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// hc_sex := sex_female ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 2
5265: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5266: LD_ADDR_OWVAR 33
5270: PUSH
5271: LD_STRING AmGalRemake
5273: ST_TO_ADDR
// hc_face_number := 2 ;
5274: LD_ADDR_OWVAR 34
5278: PUSH
5279: LD_INT 2
5281: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5282: LD_ADDR_OWVAR 26
5286: PUSH
5287: LD_STRING Rebecca Macdonald
5289: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: LD_INT 10
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5305: LD_ADDR_OWVAR 30
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5328: LD_ADDR_OWVAR 31
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 0
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: ST_TO_ADDR
// un = CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_INT 29
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: CALL_OW 87
// wait ( 0 0$1 ) ;
5385: LD_INT 35
5387: PPUSH
5388: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5392: LD_INT 30
5394: PPUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 70
5409: IFFALSE 5520
// begin DialogueOn ;
5411: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 15
5440: NEG
5441: PPUSH
5442: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5446: LD_VAR 0 3
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_STRING D11a-FSol2-1
5480: PPUSH
5481: CALL_OW 88
// DialogueOff ;
5485: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 471
// wait ( 0 0$2 ) ;
5501: LD_INT 70
5503: PPUSH
5504: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5508: LD_INT 3
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 472
// end ; end ; if number = 8 then
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: EQUAL
5528: IFFALSE 5684
// begin hc_class := 1 ;
5530: LD_ADDR_OWVAR 28
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// hc_sex := sex_female ;
5538: LD_ADDR_OWVAR 27
5542: PUSH
5543: LD_INT 2
5545: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5546: LD_ADDR_OWVAR 33
5550: PUSH
5551: LD_STRING SecondCharsGal
5553: ST_TO_ADDR
// hc_face_number := 45 ;
5554: LD_ADDR_OWVAR 34
5558: PUSH
5559: LD_INT 45
5561: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5562: LD_ADDR_OWVAR 26
5566: PUSH
5567: LD_STRING Margherite Simpson
5569: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5570: LD_ADDR_OWVAR 29
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 10
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5585: LD_ADDR_OWVAR 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5608: LD_ADDR_OWVAR 31
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// un = CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 33
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 87
// wait ( 0 0$1 ) ;
5665: LD_INT 35
5667: PPUSH
5668: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_STRING D11e-FSol4-1
5679: PPUSH
5680: CALL_OW 88
// end ; arrivals := arrivals union un ;
5684: LD_ADDR_EXP 45
5688: PUSH
5689: LD_EXP 45
5693: PUSH
5694: LD_VAR 0 3
5698: UNION
5699: ST_TO_ADDR
// end ; end_of_file
5700: LD_VAR 0 2
5704: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// ruAttackers := [ ] ;
5709: LD_ADDR_EXP 48
5713: PUSH
5714: EMPTY
5715: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5716: LD_ADDR_EXP 49
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// if Difficulty < 3 then
5723: LD_OWVAR 67
5727: PUSH
5728: LD_INT 3
5730: LESS
5731: IFFALSE 5748
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5733: LD_INT 130
5735: PPUSH
5736: LD_INT 81
5738: PPUSH
5739: CALL_OW 428
5743: PPUSH
5744: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: LD_EXP 36
5766: PPUSH
5767: CALL_OW 12
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 4
5777: PPUSH
5778: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_EXP 35
5795: PPUSH
5796: LD_EXP 36
5800: PPUSH
5801: CALL_OW 12
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 4
5811: PPUSH
5812: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 67
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: LD_EXP 36
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 21
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: LD_EXP 36
5868: PPUSH
5869: CALL_OW 12
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 6
5879: PPUSH
5880: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 17
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: LD_EXP 36
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 6
5913: PPUSH
5914: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 32
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: LD_EXP 36
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: LD_INT 2
5947: PPUSH
5948: CALL 6960 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 69
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6038
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 35
6015: PPUSH
6016: LD_EXP 36
6020: PPUSH
6021: CALL_OW 12
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL 6960 0 6
6036: GO 5997
6038: POP
6039: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 30
6067: PUSH
6068: LD_INT 31
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6114
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6088: LD_EXP 35
6092: PPUSH
6093: LD_EXP 36
6097: PPUSH
6098: CALL_OW 12
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL 7070 0 2
6112: GO 6085
6114: POP
6115: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 32
6121: PPUSH
6122: LD_INT 3
6124: PPUSH
6125: CALL 7349 0 3
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6239
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin enable ;
6170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6237
// if GetFuel ( i ) < 3 then
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 261
6217: PUSH
6218: LD_INT 3
6220: LESS
6221: IFFALSE 6235
// SetFuel ( i , 3 ) ;
6223: LD_VAR 0 1
6227: PPUSH
6228: LD_INT 3
6230: PPUSH
6231: CALL_OW 240
6235: GO 6205
6237: POP
6238: POP
// end ;
6239: PPOPN 1
6241: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: GREATER
6250: IFFALSE 6819
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin uc_side := 3 ;
6261: LD_ADDR_OWVAR 20
6265: PUSH
6266: LD_INT 3
6268: ST_TO_ADDR
// uc_nation := 3 ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_INT 3
6276: ST_TO_ADDR
// for i := 1 to 2 do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6405
// begin InitHC_All ( ) ;
6293: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_OWVAR 67
6322: ARRAY
6323: PPUSH
6324: CALL_OW 381
// un := CreateHuman ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: CALL_OW 44
6337: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_INT 91
6345: PPUSH
6346: LD_INT 87
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6359: LD_ADDR_EXP 49
6363: PUSH
6364: LD_EXP 49
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 46
6395: PPUSH
6396: LD_INT 78
6398: PPUSH
6399: CALL_OW 114
// end ;
6403: GO 6290
6405: POP
6406: POP
// if Difficulty > 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: GREATER
6415: IFFALSE 6547
// begin for i := 1 to 3 do
6417: LD_ADDR_VAR 0 1
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6545
// begin InitHC_All ( ) ;
6433: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 6
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: LD_OWVAR 67
6462: ARRAY
6463: PPUSH
6464: CALL_OW 381
// un := CreateHuman ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL_OW 44
6477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_INT 91
6485: PPUSH
6486: LD_INT 87
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6499: LD_ADDR_EXP 49
6503: PUSH
6504: LD_EXP 49
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 1
6527: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 89
6535: PPUSH
6536: LD_INT 148
6538: PPUSH
6539: CALL_OW 114
// end ;
6543: GO 6430
6545: POP
6546: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_INT 33
6554: PUSH
6555: LD_INT 61
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 49
6564: PUSH
6565: LD_INT 85
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 76
6574: PUSH
6575: LD_INT 99
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 81
6584: PUSH
6585: LD_INT 135
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 155
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 147
6604: PUSH
6605: LD_INT 158
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 49
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6810
// begin un := ruAttackersInForest [ i ] ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 49
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: ST_TO_ADDR
// tag := GetTag ( un ) ;
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 110
6675: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 302
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 314
6695: NOT
6696: AND
6697: IFFALSE 6808
// begin if tag <> i then
6699: LD_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: NONEQUAL
6709: IFFALSE 6737
// begin SetTag ( un , i ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 109
// tag := i ;
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 1
6734: ST_TO_ADDR
// end else
6735: GO 6769
// begin SetTag ( un , i + 1 ) ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 109
// tag := i + 1 ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 1
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 4
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 114
// end ; end ;
6808: GO 6642
6810: POP
6811: POP
// until not ruAttackersInForest ;
6812: LD_EXP 49
6816: NOT
6817: IFFALSE 6620
// end ; end_of_file
6819: PPOPN 4
6821: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6822: LD_INT 0
6824: PPUSH
6825: PPUSH
6826: PPUSH
// if not characters then
6827: LD_VAR 0 1
6831: NOT
6832: IFFALSE 6836
// exit ;
6834: GO 6915
// speaker := characters [ rand ( 1 , characters ) ] ;
6836: LD_ADDR_VAR 0 6
6840: PUSH
6841: LD_VAR 0 1
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_VAR 0 1
6853: PPUSH
6854: CALL_OW 12
6858: ARRAY
6859: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6860: LD_VAR 0 6
6864: PPUSH
6865: CALL_OW 258
6869: PUSH
6870: LD_INT 1
6872: EQUAL
6873: IFFALSE 6891
// Say ( speaker , dialogMID ) else
6875: LD_VAR 0 6
6879: PPUSH
6880: LD_VAR 0 2
6884: PPUSH
6885: CALL_OW 88
6889: GO 6905
// Say ( speaker , dialogFID ) ;
6891: LD_VAR 0 6
6895: PPUSH
6896: LD_VAR 0 3
6900: PPUSH
6901: CALL_OW 88
// result := speaker ;
6905: LD_ADDR_VAR 0 4
6909: PUSH
6910: LD_VAR 0 6
6914: ST_TO_ADDR
// end ;
6915: LD_VAR 0 4
6919: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6920: LD_INT 0
6922: PPUSH
6923: PPUSH
// for i in charactersList do
6924: LD_ADDR_VAR 0 4
6928: PUSH
6929: LD_VAR 0 1
6933: PUSH
6934: FOR_IN
6935: IFFALSE 6953
// SaveCharacters ( i , ident ) ;
6937: LD_VAR 0 4
6941: PPUSH
6942: LD_VAR 0 2
6946: PPUSH
6947: CALL_OW 38
6951: GO 6934
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 3
6959: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// for i = 1 to count do
6966: LD_ADDR_VAR 0 8
6970: PUSH
6971: DOUBLE
6972: LD_INT 1
6974: DEC
6975: ST_TO_ADDR
6976: LD_VAR 0 6
6980: PUSH
6981: FOR_TO
6982: IFFALSE 7063
// begin uc_side = side ;
6984: LD_ADDR_OWVAR 20
6988: PUSH
6989: LD_VAR 0 1
6993: ST_TO_ADDR
// uc_nation = nation ;
6994: LD_ADDR_OWVAR 21
6998: PUSH
6999: LD_VAR 0 2
7003: ST_TO_ADDR
// hc_gallery =  ;
7004: LD_ADDR_OWVAR 33
7008: PUSH
7009: LD_STRING 
7011: ST_TO_ADDR
// hc_name =  ;
7012: LD_ADDR_OWVAR 26
7016: PUSH
7017: LD_STRING 
7019: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7020: LD_INT 0
7022: PPUSH
7023: LD_VAR 0 5
7027: PPUSH
7028: LD_VAR 0 4
7032: PPUSH
7033: CALL_OW 380
// un = CreateHuman ;
7037: LD_ADDR_VAR 0 10
7041: PUSH
7042: CALL_OW 44
7046: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7047: LD_VAR 0 10
7051: PPUSH
7052: LD_VAR 0 3
7056: PPUSH
7057: CALL_OW 52
// end ;
7061: GO 6981
7063: POP
7064: POP
// end ;
7065: LD_VAR 0 7
7069: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
7074: PPUSH
// uc_side := GetSide ( b ) ;
7075: LD_ADDR_OWVAR 20
7079: PUSH
7080: LD_VAR 0 2
7084: PPUSH
7085: CALL_OW 255
7089: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7090: LD_ADDR_OWVAR 21
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 248
7104: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7105: LD_INT 0
7107: PPUSH
7108: LD_INT 1
7110: PPUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7120: LD_ADDR_VAR 0 5
7124: PUSH
7125: LD_VAR 0 2
7129: PPUSH
7130: CALL_OW 254
7134: PUSH
7135: LD_INT 3
7137: MINUS
7138: ST_TO_ADDR
// if dir < 0 then
7139: LD_VAR 0 5
7143: PUSH
7144: LD_INT 0
7146: LESS
7147: IFFALSE 7163
// dir := 6 + dir ;
7149: LD_ADDR_VAR 0 5
7153: PUSH
7154: LD_INT 6
7156: PUSH
7157: LD_VAR 0 5
7161: PLUS
7162: ST_TO_ADDR
// un := CreateHuman ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: CALL_OW 44
7172: ST_TO_ADDR
// SetDir ( un , dir ) ;
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_VAR 0 5
7182: PPUSH
7183: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7187: LD_VAR 0 4
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 52
// end ;
7201: LD_VAR 0 3
7205: RET
// export function PrepareDifficulty ; begin
7206: LD_INT 0
7208: PPUSH
// case Difficulty of 1 :
7209: LD_OWVAR 67
7213: PUSH
7214: LD_INT 1
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7241
7222: POP
// begin RuSolMinLevel = 2 ;
7223: LD_ADDR_EXP 35
7227: PUSH
7228: LD_INT 2
7230: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7231: LD_ADDR_EXP 36
7235: PUSH
7236: LD_INT 3
7238: ST_TO_ADDR
// end ; 2 :
7239: GO 7302
7241: LD_INT 2
7243: DOUBLE
7244: EQUAL
7245: IFTRUE 7249
7247: GO 7268
7249: POP
// begin RuSolMinLevel = 3 ;
7250: LD_ADDR_EXP 35
7254: PUSH
7255: LD_INT 3
7257: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7258: LD_ADDR_EXP 36
7262: PUSH
7263: LD_INT 5
7265: ST_TO_ADDR
// end ; 3 .. 4 :
7266: GO 7302
7268: LD_INT 3
7270: DOUBLE
7271: GREATEREQUAL
7272: IFFALSE 7280
7274: LD_INT 4
7276: DOUBLE
7277: LESSEQUAL
7278: IFTRUE 7282
7280: GO 7301
7282: POP
// begin RuSolMinLevel = 4 ;
7283: LD_ADDR_EXP 35
7287: PUSH
7288: LD_INT 4
7290: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7291: LD_ADDR_EXP 36
7295: PUSH
7296: LD_INT 6
7298: ST_TO_ADDR
// end ; end ;
7299: GO 7302
7301: POP
// end ;
7302: LD_VAR 0 1
7306: RET
// export function ShowQuery1 ; begin
7307: LD_INT 0
7309: PPUSH
// result := Query ( QKill ) ;
7310: LD_ADDR_VAR 0 1
7314: PUSH
7315: LD_STRING QKill
7317: PPUSH
7318: CALL_OW 97
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 1
7327: RET
// export function ShowQuery2 ; begin
7328: LD_INT 0
7330: PPUSH
// result := Query ( QKill2 ) ;
7331: LD_ADDR_VAR 0 1
7335: PUSH
7336: LD_STRING QKill2
7338: PPUSH
7339: CALL_OW 97
7343: ST_TO_ADDR
// end ;
7344: LD_VAR 0 1
7348: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7349: LD_INT 0
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7355: LD_ADDR_VAR 0 7
7359: PUSH
7360: LD_INT 48
7362: PUSH
7363: LD_INT 49
7365: PUSH
7366: LD_INT 50
7368: PUSH
7369: LD_INT 20
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: LD_INT 51
7377: PUSH
7378: LD_INT 52
7380: PUSH
7381: LD_INT 69
7383: PUSH
7384: LD_INT 39
7386: PUSH
7387: LD_INT 34
7389: PUSH
7390: LD_INT 40
7392: PUSH
7393: LD_INT 53
7395: PUSH
7396: LD_INT 71
7398: PUSH
7399: LD_INT 57
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: LD_INT 44
7407: PUSH
7408: LD_INT 32
7410: PUSH
7411: LD_INT 27
7413: PUSH
7414: LD_INT 23
7416: PUSH
7417: LD_INT 33
7419: PUSH
7420: LD_INT 59
7422: PUSH
7423: LD_INT 54
7425: PUSH
7426: LD_INT 55
7428: PUSH
7429: LD_INT 56
7431: PUSH
7432: LD_INT 63
7434: PUSH
7435: LD_INT 64
7437: PUSH
7438: LD_INT 65
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 31
7446: PUSH
7447: LD_INT 21
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 82
7458: PUSH
7459: LD_INT 83
7461: PUSH
7462: LD_INT 84
7464: PUSH
7465: LD_INT 85
7467: PUSH
7468: LD_INT 86
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: ST_TO_ADDR
// for i = 1 to list do
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: DOUBLE
7516: LD_INT 1
7518: DEC
7519: ST_TO_ADDR
7520: LD_VAR 0 7
7524: PUSH
7525: FOR_TO
7526: IFFALSE 7598
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7528: LD_VAR 0 7
7532: PUSH
7533: LD_VAR 0 5
7537: ARRAY
7538: PPUSH
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 321
7548: PUSH
7549: LD_INT 1
7551: EQUAL
7552: PUSH
7553: LD_VAR 0 7
7557: PUSH
7558: LD_VAR 0 5
7562: ARRAY
7563: PPUSH
7564: LD_VAR 0 3
7568: PPUSH
7569: CALL_OW 482
7573: AND
7574: IFFALSE 7596
// AddComResearch ( lab , list [ i ] ) ;
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_VAR 0 7
7585: PUSH
7586: LD_VAR 0 5
7590: ARRAY
7591: PPUSH
7592: CALL_OW 184
7596: GO 7525
7598: POP
7599: POP
// end ;
7600: LD_VAR 0 4
7604: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7605: LD_INT 0
7607: PPUSH
7608: PPUSH
7609: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 2
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: LD_VAR 0 3
7645: LESSEQUAL
7646: IFFALSE 7754
// begin for i = 1 to vehCount do
7648: LD_ADDR_VAR 0 9
7652: PUSH
7653: DOUBLE
7654: LD_INT 1
7656: DEC
7657: ST_TO_ADDR
7658: LD_VAR 0 3
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7752
// begin weapon := weaponTab [ i ] ;
7666: LD_ADDR_VAR 0 10
7670: PUSH
7671: LD_VAR 0 4
7675: PUSH
7676: LD_VAR 0 9
7680: ARRAY
7681: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7682: LD_VAR 0 10
7686: PUSH
7687: LD_INT 46
7689: EQUAL
7690: IFFALSE 7721
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7692: LD_VAR 0 2
7696: PPUSH
7697: LD_INT 24
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: LD_VAR 0 6
7709: PPUSH
7710: LD_VAR 0 10
7714: PPUSH
7715: CALL_OW 185
7719: GO 7750
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7721: LD_VAR 0 2
7725: PPUSH
7726: LD_VAR 0 7
7730: PPUSH
7731: LD_VAR 0 5
7735: PPUSH
7736: LD_VAR 0 6
7740: PPUSH
7741: LD_VAR 0 10
7745: PPUSH
7746: CALL_OW 185
// end ;
7750: GO 7663
7752: POP
7753: POP
// end ; end ;
7754: LD_VAR 0 8
7758: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7759: LD_INT 0
7761: PPUSH
7762: PPUSH
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7767: LD_ADDR_VAR 0 8
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL_OW 313
7781: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7782: LD_ADDR_VAR 0 9
7786: PUSH
7787: LD_VAR 0 3
7791: PPUSH
7792: LD_INT 22
7794: PUSH
7795: LD_VAR 0 1
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 24
7816: PUSH
7817: LD_INT 750
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: LD_INT 54
7829: PUSH
7830: EMPTY
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 70
7847: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7848: LD_ADDR_VAR 0 6
7852: PUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: LD_INT 24
7885: PUSH
7886: LD_INT 1000
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: PPUSH
7905: CALL_OW 70
7909: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7910: LD_VAR 0 6
7914: NOT
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_VAR 0 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 2
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 24
7940: PUSH
7941: LD_INT 250
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: NOT
7958: AND
7959: IFFALSE 7963
// exit ;
7961: GO 8121
// if buildingsList and engineerOkInside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_VAR 0 8
7972: AND
7973: IFFALSE 7984
// ComExitBuilding ( engineerOkInside ) ;
7975: LD_VAR 0 8
7979: PPUSH
7980: CALL_OW 122
// if buildingsList and engineerOkOutside then
7984: LD_VAR 0 6
7988: PUSH
7989: LD_VAR 0 9
7993: AND
7994: IFFALSE 8014
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7996: LD_VAR 0 9
8000: PPUSH
8001: LD_VAR 0 6
8005: PUSH
8006: LD_INT 1
8008: ARRAY
8009: PPUSH
8010: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8014: LD_VAR 0 6
8018: PUSH
8019: LD_INT 0
8021: EQUAL
8022: PUSH
8023: LD_VAR 0 4
8027: PUSH
8028: LD_INT 0
8030: EQUAL
8031: AND
8032: PUSH
8033: LD_VAR 0 9
8037: AND
8038: IFFALSE 8054
// ComEnterUnit ( engineerOkOutside , depot ) ;
8040: LD_VAR 0 9
8044: PPUSH
8045: LD_VAR 0 2
8049: PPUSH
8050: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8054: LD_VAR 0 9
8058: PUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_VAR 0 4
8073: AND
8074: IFFALSE 8121
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8076: LD_VAR 0 9
8080: PPUSH
8081: LD_VAR 0 4
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 4
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 4
8103: PUSH
8104: LD_INT 3
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_INT 4
8115: ARRAY
8116: PPUSH
8117: CALL_OW 145
// end ;
8121: LD_VAR 0 5
8125: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8126: LD_INT 0
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
8136: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8137: LD_ADDR_VAR 0 6
8141: PUSH
8142: LD_INT 22
8144: PUSH
8145: LD_VAR 0 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 23
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 24
8176: PUSH
8177: LD_INT 251
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 69
8194: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_VAR 0 3
8204: PPUSH
8205: LD_INT 22
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 23
8219: PUSH
8220: LD_INT 2
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 25
8229: PUSH
8230: LD_INT 4
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 50
8239: PUSH
8240: EMPTY
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 70
8253: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8254: LD_ADDR_VAR 0 10
8258: PUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_INT 22
8266: PUSH
8267: LD_VAR 0 1
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 21
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 3
8305: PUSH
8306: LD_INT 24
8308: PUSH
8309: LD_INT 750
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 70
8330: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8331: LD_ADDR_VAR 0 11
8335: PUSH
8336: LD_VAR 0 2
8340: PPUSH
8341: LD_INT 22
8343: PUSH
8344: LD_VAR 0 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 21
8355: PUSH
8356: LD_INT 1
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 3
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 24
8385: PUSH
8386: LD_INT 1000
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 70
8407: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8408: LD_VAR 0 10
8412: NOT
8413: PUSH
8414: LD_VAR 0 11
8418: NOT
8419: AND
8420: PUSH
8421: LD_VAR 0 6
8425: NOT
8426: AND
8427: IFFALSE 8431
// exit ;
8429: GO 8637
// if damageUnits and sci_list then
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 6
8440: AND
8441: IFFALSE 8457
// ComMoveToArea ( damageUnits , healArea ) ;
8443: LD_VAR 0 10
8447: PPUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 113
// if unitsToHeal and sci_list then
8457: LD_VAR 0 11
8461: PUSH
8462: LD_VAR 0 6
8466: AND
8467: IFFALSE 8478
// ComExitBuilding ( sci_list ) ;
8469: LD_VAR 0 6
8473: PPUSH
8474: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8478: LD_VAR 0 11
8482: PUSH
8483: LD_VAR 0 7
8487: AND
8488: IFFALSE 8508
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8490: LD_VAR 0 7
8494: PPUSH
8495: LD_VAR 0 11
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8508: LD_VAR 0 10
8512: PUSH
8513: LD_INT 0
8515: EQUAL
8516: PUSH
8517: LD_VAR 0 11
8521: PUSH
8522: LD_INT 0
8524: EQUAL
8525: AND
8526: PUSH
8527: LD_VAR 0 7
8531: AND
8532: IFFALSE 8637
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8534: LD_ADDR_VAR 0 12
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 30
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 69
8580: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8581: LD_ADDR_VAR 0 13
8585: PUSH
8586: LD_INT 1
8588: PPUSH
8589: LD_VAR 0 12
8593: PPUSH
8594: CALL_OW 12
8598: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8599: LD_VAR 0 7
8603: PPUSH
8604: LD_INT 3
8606: PUSH
8607: LD_INT 60
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 72
8621: PPUSH
8622: LD_VAR 0 12
8626: PUSH
8627: LD_VAR 0 13
8631: ARRAY
8632: PPUSH
8633: CALL_OW 120
// end ; end ;
8637: LD_VAR 0 5
8641: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8642: LD_INT 0
8644: PPUSH
8645: PPUSH
8646: PPUSH
8647: PPUSH
8648: PPUSH
// tmp := [ ] ;
8649: LD_ADDR_VAR 0 6
8653: PUSH
8654: EMPTY
8655: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8656: LD_ADDR_VAR 0 7
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_VAR 0 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 30
8675: PUSH
8676: LD_INT 32
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 69
8691: ST_TO_ADDR
// if bunkers then
8692: LD_VAR 0 7
8696: IFFALSE 8766
// for i in bunkers do
8698: LD_ADDR_VAR 0 4
8702: PUSH
8703: LD_VAR 0 7
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8764
// for j in UnitsInside ( i ) do
8711: LD_ADDR_VAR 0 5
8715: PUSH
8716: LD_VAR 0 4
8720: PPUSH
8721: CALL_OW 313
8725: PUSH
8726: FOR_IN
8727: IFFALSE 8760
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8729: LD_ADDR_VAR 0 6
8733: PUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: LD_VAR 0 6
8743: PUSH
8744: LD_INT 1
8746: PLUS
8747: PPUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL_OW 1
8757: ST_TO_ADDR
8758: GO 8726
8760: POP
8761: POP
8762: GO 8708
8764: POP
8765: POP
// if tmp then
8766: LD_VAR 0 6
8770: IFFALSE 8810
// begin ComExitBuilding ( tmp ) ;
8772: LD_VAR 0 6
8776: PPUSH
8777: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8781: LD_VAR 0 6
8785: PPUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 250
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 251
8805: PPUSH
8806: CALL_OW 174
// end ; end ;
8810: LD_VAR 0 3
8814: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
8819: PPUSH
// enable ;
8820: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8821: LD_ADDR_VAR 0 6
8825: PUSH
8826: LD_VAR 0 3
8830: PPUSH
8831: CALL_OW 435
8835: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_VAR 0 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 34
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8874: LD_VAR 0 5
8878: PUSH
8879: LD_VAR 0 3
8883: PPUSH
8884: CALL_OW 435
8888: AND
8889: PUSH
8890: LD_VAR 0 6
8894: AND
8895: IFFALSE 8928
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8897: LD_VAR 0 5
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 1
8913: ARRAY
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: CALL_OW 177
// end ;
8928: LD_VAR 0 4
8932: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8933: LD_INT 0
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
8942: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8943: LD_ADDR_VAR 0 6
8947: PUSH
8948: LD_VAR 0 2
8952: PPUSH
8953: LD_INT 22
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 56
8967: PUSH
8968: EMPTY
8969: LIST
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 700
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 60
8986: PUSH
8987: EMPTY
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 2
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 1
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 25
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 25
9019: PUSH
9020: LD_INT 8
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 9
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 70
9055: PUSH
9056: LD_EXP 48
9060: PUSH
9061: LD_EXP 49
9065: UNION
9066: DIFF
9067: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9068: LD_ADDR_VAR 0 7
9072: PUSH
9073: LD_VAR 0 2
9077: PPUSH
9078: LD_INT 22
9080: PUSH
9081: LD_VAR 0 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 30
9092: PUSH
9093: LD_INT 32
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 58
9102: PUSH
9103: EMPTY
9104: LIST
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 251
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 70
9126: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_VAR 0 2
9136: PPUSH
9137: LD_INT 22
9139: PUSH
9140: LD_VAR 0 1
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 30
9154: PUSH
9155: LD_INT 4
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 30
9164: PUSH
9165: LD_INT 5
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 24
9179: PUSH
9180: LD_INT 251
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 70
9196: ST_TO_ADDR
// if barrackList then
9197: LD_VAR 0 9
9201: IFFALSE 9357
// begin if turretList = 0 then
9203: LD_VAR 0 7
9207: PUSH
9208: LD_INT 0
9210: EQUAL
9211: IFFALSE 9249
// begin if soldiersList then
9213: LD_VAR 0 6
9217: IFFALSE 9247
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9219: LD_VAR 0 6
9223: PPUSH
9224: LD_VAR 0 9
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 9
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: PPUSH
9243: CALL_OW 120
// end else
9247: GO 9357
// begin for i in barrackList do
9249: LD_ADDR_VAR 0 4
9253: PUSH
9254: LD_VAR 0 9
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9355
// begin if not turretList then
9262: LD_VAR 0 7
9266: NOT
9267: IFFALSE 9273
// exit ;
9269: POP
9270: POP
9271: GO 9357
// insideUnits = UnitsInside ( i ) ;
9273: LD_ADDR_VAR 0 10
9277: PUSH
9278: LD_VAR 0 4
9282: PPUSH
9283: CALL_OW 313
9287: ST_TO_ADDR
// if insideUnits then
9288: LD_VAR 0 10
9292: IFFALSE 9353
// begin tmp := insideUnits [ 1 ] ;
9294: LD_ADDR_VAR 0 8
9298: PUSH
9299: LD_VAR 0 10
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9308: LD_VAR 0 8
9312: PPUSH
9313: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9317: LD_VAR 0 8
9321: PPUSH
9322: LD_VAR 0 7
9326: PUSH
9327: LD_INT 1
9329: ARRAY
9330: PPUSH
9331: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_VAR 0 7
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 3
9352: ST_TO_ADDR
// end ; end ;
9353: GO 9259
9355: POP
9356: POP
// end ; end ; end ;
9357: LD_VAR 0 3
9361: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
9366: PPUSH
9367: PPUSH
9368: PPUSH
9369: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9370: LD_ADDR_VAR 0 8
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_VAR 0 1
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 34
9399: PUSH
9400: LD_INT 52
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL_OW 69
9416: ST_TO_ADDR
// if not craneList then
9417: LD_VAR 0 8
9421: NOT
9422: IFFALSE 9426
// exit ;
9424: GO 9860
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9426: LD_ADDR_VAR 0 9
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 3
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 3
9455: PUSH
9456: LD_INT 24
9458: PUSH
9459: LD_INT 1000
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: PPUSH
9478: CALL_OW 69
9482: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9483: LD_VAR 0 9
9487: PUSH
9488: LD_VAR 0 8
9492: PPUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 750
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 72
9507: AND
9508: IFFALSE 9543
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9510: LD_VAR 0 8
9514: PPUSH
9515: LD_INT 24
9517: PUSH
9518: LD_INT 750
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 72
9529: PPUSH
9530: LD_VAR 0 9
9534: PUSH
9535: LD_INT 1
9537: ARRAY
9538: PPUSH
9539: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9543: LD_VAR 0 8
9547: PPUSH
9548: LD_INT 3
9550: PUSH
9551: LD_INT 24
9553: PUSH
9554: LD_INT 750
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 72
9569: IFFALSE 9607
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9571: LD_VAR 0 8
9575: PPUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 24
9581: PUSH
9582: LD_INT 750
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 72
9597: PPUSH
9598: LD_VAR 0 2
9602: PPUSH
9603: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9607: LD_VAR 0 8
9611: PUSH
9612: LD_VAR 0 9
9616: PUSH
9617: LD_INT 0
9619: EQUAL
9620: AND
9621: PUSH
9622: LD_VAR 0 3
9626: AND
9627: IFFALSE 9674
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9629: LD_VAR 0 8
9633: PPUSH
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 2
9650: ARRAY
9651: PPUSH
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 3
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 3
9665: PUSH
9666: LD_INT 4
9668: ARRAY
9669: PPUSH
9670: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9674: LD_ADDR_VAR 0 7
9678: PUSH
9679: LD_VAR 0 2
9683: PPUSH
9684: LD_INT 22
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 34
9708: PUSH
9709: LD_INT 52
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 3
9718: PUSH
9719: LD_INT 24
9721: PUSH
9722: LD_INT 750
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 70
9743: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9744: LD_ADDR_VAR 0 6
9748: PUSH
9749: LD_VAR 0 2
9753: PPUSH
9754: LD_INT 22
9756: PUSH
9757: LD_VAR 0 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: LD_INT 30
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 30
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 70
9802: ST_TO_ADDR
// if crane then
9803: LD_VAR 0 7
9807: IFFALSE 9860
// for i in crane do
9809: LD_ADDR_VAR 0 5
9813: PUSH
9814: LD_VAR 0 7
9818: PUSH
9819: FOR_IN
9820: IFFALSE 9858
// begin if dep then
9822: LD_VAR 0 6
9826: IFFALSE 9842
// ComMoveUnit ( i , dep ) ;
9828: LD_VAR 0 5
9832: PPUSH
9833: LD_VAR 0 6
9837: PPUSH
9838: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9842: LD_VAR 0 5
9846: PPUSH
9847: CALL_OW 311
9851: PPUSH
9852: CALL 80497 0 1
// end ;
9856: GO 9819
9858: POP
9859: POP
// end ;
9860: LD_VAR 0 4
9864: RET
// export function BuildBulldozer ; begin
9865: LD_INT 0
9867: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9868: LD_INT 17
9870: PPUSH
9871: CALL_OW 302
9875: NOT
9876: PUSH
9877: LD_INT 17
9879: PPUSH
9880: CALL_OW 255
9884: PUSH
9885: LD_INT 3
9887: NONEQUAL
9888: OR
9889: IFFALSE 9893
// exit ;
9891: GO 9912
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9893: LD_INT 17
9895: PPUSH
9896: LD_INT 24
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: LD_INT 53
9907: PPUSH
9908: CALL_OW 185
// end ;
9912: LD_VAR 0 1
9916: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9917: LD_INT 0
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
9923: PPUSH
// if not bulldozer then
9924: LD_VAR 0 1
9928: NOT
9929: IFFALSE 9933
// exit ;
9931: GO 10215
// list := ListEnvironmentArea ( area ) ;
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL_OW 353
9947: ST_TO_ADDR
// tmp := [ ] ;
9948: LD_ADDR_VAR 0 6
9952: PUSH
9953: EMPTY
9954: ST_TO_ADDR
// for i = 1 to list do
9955: LD_ADDR_VAR 0 4
9959: PUSH
9960: DOUBLE
9961: LD_INT 1
9963: DEC
9964: ST_TO_ADDR
9965: LD_VAR 0 5
9969: PUSH
9970: FOR_TO
9971: IFFALSE 10069
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9973: LD_VAR 0 5
9977: PUSH
9978: LD_VAR 0 4
9982: ARRAY
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: LD_VAR 0 5
9992: PUSH
9993: LD_VAR 0 4
9997: ARRAY
9998: PUSH
9999: LD_INT 2
10001: ARRAY
10002: PPUSH
10003: CALL_OW 554
10007: IFFALSE 10067
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10009: LD_ADDR_VAR 0 6
10013: PUSH
10014: LD_VAR 0 6
10018: PPUSH
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 1
10026: PLUS
10027: PPUSH
10028: LD_VAR 0 5
10032: PUSH
10033: LD_VAR 0 4
10037: ARRAY
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PUSH
10043: LD_VAR 0 5
10047: PUSH
10048: LD_VAR 0 4
10052: ARRAY
10053: PUSH
10054: LD_INT 2
10056: ARRAY
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 1
10066: ST_TO_ADDR
// end ;
10067: GO 9970
10069: POP
10070: POP
// ComStop ( bulldozer ) ;
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10080: LD_ADDR_VAR 0 7
10084: PUSH
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 250
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 251
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: ST_TO_ADDR
// for i = tmp downto 1 do
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: DOUBLE
10115: LD_VAR 0 6
10119: INC
10120: ST_TO_ADDR
10121: LD_INT 1
10123: PUSH
10124: FOR_DOWNTO
10125: IFFALSE 10213
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10127: LD_ADDR_VAR 0 7
10131: PUSH
10132: LD_VAR 0 7
10136: PUSH
10137: LD_INT 1
10139: ARRAY
10140: PPUSH
10141: LD_VAR 0 7
10145: PUSH
10146: LD_INT 2
10148: ARRAY
10149: PPUSH
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL 10316 0 3
10159: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_VAR 0 7
10169: PUSH
10170: LD_INT 1
10172: ARRAY
10173: PPUSH
10174: LD_VAR 0 7
10178: PUSH
10179: LD_INT 2
10181: ARRAY
10182: PPUSH
10183: CALL 10220 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10187: LD_ADDR_VAR 0 6
10191: PUSH
10192: LD_VAR 0 6
10196: PPUSH
10197: LD_VAR 0 7
10201: PUSH
10202: LD_INT 3
10204: ARRAY
10205: PPUSH
10206: CALL_OW 3
10210: ST_TO_ADDR
// end ;
10211: GO 10124
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 3
10219: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10220: LD_INT 0
10222: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10223: LD_VAR 0 2
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: CALL_OW 351
10237: PUSH
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: CALL_OW 554
10252: AND
10253: PUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: CALL_OW 488
10268: AND
10269: PUSH
10270: LD_VAR 0 2
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: CALL_OW 428
10284: PUSH
10285: LD_INT 1
10287: NEG
10288: EQUAL
10289: AND
10290: IFFALSE 10311
// AddComMoveXY ( bulldozer , x , y ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_VAR 0 2
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: CALL_OW 171
// end ;
10311: LD_VAR 0 4
10315: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
// dist := 99999 ;
10325: LD_ADDR_VAR 0 6
10329: PUSH
10330: LD_INT 99999
10332: ST_TO_ADDR
// for i = 1 to list do
10333: LD_ADDR_VAR 0 5
10337: PUSH
10338: DOUBLE
10339: LD_INT 1
10341: DEC
10342: ST_TO_ADDR
10343: LD_VAR 0 3
10347: PUSH
10348: FOR_TO
10349: IFFALSE 10487
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10351: LD_ADDR_VAR 0 7
10355: PUSH
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_VAR 0 2
10365: PPUSH
10366: LD_VAR 0 3
10370: PUSH
10371: LD_VAR 0 5
10375: ARRAY
10376: PUSH
10377: LD_INT 1
10379: ARRAY
10380: PPUSH
10381: LD_VAR 0 3
10385: PUSH
10386: LD_VAR 0 5
10390: ARRAY
10391: PUSH
10392: LD_INT 2
10394: ARRAY
10395: PPUSH
10396: CALL_OW 298
10400: ST_TO_ADDR
// if d = 0 then
10401: LD_VAR 0 7
10405: PUSH
10406: LD_INT 0
10408: EQUAL
10409: IFFALSE 10413
// continue ;
10411: GO 10348
// if d < dist then
10413: LD_VAR 0 7
10417: PUSH
10418: LD_VAR 0 6
10422: LESS
10423: IFFALSE 10485
// begin _x := list [ i ] [ 1 ] ;
10425: LD_ADDR_VAR 0 8
10429: PUSH
10430: LD_VAR 0 3
10434: PUSH
10435: LD_VAR 0 5
10439: ARRAY
10440: PUSH
10441: LD_INT 1
10443: ARRAY
10444: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_VAR 0 3
10454: PUSH
10455: LD_VAR 0 5
10459: ARRAY
10460: PUSH
10461: LD_INT 2
10463: ARRAY
10464: ST_TO_ADDR
// _i := i ;
10465: LD_ADDR_VAR 0 10
10469: PUSH
10470: LD_VAR 0 5
10474: ST_TO_ADDR
// dist := d ;
10475: LD_ADDR_VAR 0 6
10479: PUSH
10480: LD_VAR 0 7
10484: ST_TO_ADDR
// end ; end ;
10485: GO 10348
10487: POP
10488: POP
// result := [ _x , _y , _i , dist ] ;
10489: LD_ADDR_VAR 0 4
10493: PUSH
10494: LD_VAR 0 8
10498: PUSH
10499: LD_VAR 0 9
10503: PUSH
10504: LD_VAR 0 10
10508: PUSH
10509: LD_VAR 0 6
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: ST_TO_ADDR
// end ; end_of_file
10520: LD_VAR 0 4
10524: RET
// export function Action ; begin
10525: LD_INT 0
10527: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10528: LD_INT 66
10530: PPUSH
10531: LD_INT 4
10533: PPUSH
10534: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10538: LD_INT 22
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 69
10566: PUSH
10567: LD_INT 0
10569: EQUAL
10570: IFFALSE 10584
// SetClass ( JMM , 2 ) ;
10572: LD_EXP 1
10576: PPUSH
10577: LD_INT 2
10579: PPUSH
10580: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10584: LD_STRING M1
10586: PPUSH
10587: CALL_OW 337
// case Difficulty of 1 :
10591: LD_OWVAR 67
10595: PUSH
10596: LD_INT 1
10598: DOUBLE
10599: EQUAL
10600: IFTRUE 10604
10602: GO 10614
10604: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10605: LD_STRING M1-1
10607: PPUSH
10608: CALL_OW 337
10612: GO 10669
10614: LD_INT 2
10616: DOUBLE
10617: EQUAL
10618: IFTRUE 10622
10620: GO 10632
10622: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10623: LD_STRING M1-2
10625: PPUSH
10626: CALL_OW 337
10630: GO 10669
10632: LD_INT 3
10634: DOUBLE
10635: EQUAL
10636: IFTRUE 10640
10638: GO 10650
10640: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
10641: LD_STRING M1-3
10643: PPUSH
10644: CALL_OW 337
10648: GO 10669
10650: LD_INT 4
10652: DOUBLE
10653: EQUAL
10654: IFTRUE 10658
10656: GO 10668
10658: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
10659: LD_STRING M1-4
10661: PPUSH
10662: CALL_OW 337
10666: GO 10669
10668: POP
// ChangeMissionObjectives ( M1cont ) ;
10669: LD_STRING M1cont
10671: PPUSH
10672: CALL_OW 337
// SaveForQuickRestart ;
10676: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10680: LD_INT 525
10682: PPUSH
10683: LD_INT 700
10685: PPUSH
10686: CALL_OW 12
10690: PPUSH
10691: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10695: LD_INT 5
10697: PPUSH
10698: LD_INT 82
10700: PPUSH
10701: LD_INT 38
10703: PPUSH
10704: LD_INT 10
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 56
// wait ( 0 0$14 ) ;
10714: LD_INT 490
10716: PPUSH
10717: CALL_OW 67
// firstCrateSpawn := true ;
10721: LD_ADDR_EXP 41
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// end ;
10729: LD_VAR 0 1
10733: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10734: LD_EXP 41
10738: IFFALSE 11127
10740: GO 10742
10742: DISABLE
10743: LD_INT 0
10745: PPUSH
// begin if IsOk ( Lisa ) then
10746: LD_EXP 2
10750: PPUSH
10751: CALL_OW 302
10755: IFFALSE 10771
// Say ( Lisa , DR0-Lisa-1 ) else
10757: LD_EXP 2
10761: PPUSH
10762: LD_STRING DR0-Lisa-1
10764: PPUSH
10765: CALL_OW 88
10769: GO 10917
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10771: LD_INT 22
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 21
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 26
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 2
10803: PUSH
10804: LD_INT 25
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 25
10816: PUSH
10817: LD_INT 2
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 25
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 25
10836: PUSH
10837: LD_INT 4
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PUSH
10862: LD_EXP 1
10866: PUSH
10867: LD_EXP 8
10871: PUSH
10872: LD_EXP 5
10876: PUSH
10877: LD_EXP 6
10881: PUSH
10882: LD_EXP 7
10886: PUSH
10887: LD_EXP 4
10891: PUSH
10892: LD_EXP 3
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: DIFF
10906: PPUSH
10907: LD_STRING DR0-Sol1-1
10909: PPUSH
10910: LD_STRING DR0-Sol1-1
10912: PPUSH
10913: CALL 6822 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10917: LD_ADDR_VAR 0 1
10921: PUSH
10922: LD_INT 22
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 21
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 25
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 2
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 3
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 25
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: PUSH
11013: LD_EXP 1
11017: PUSH
11018: LD_EXP 8
11022: PUSH
11023: LD_EXP 5
11027: PUSH
11028: LD_EXP 2
11032: PUSH
11033: LD_EXP 6
11037: PUSH
11038: LD_EXP 7
11042: PUSH
11043: LD_EXP 4
11047: PUSH
11048: LD_EXP 3
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: DIFF
11063: PPUSH
11064: LD_STRING DR0-Sol2-1
11066: PPUSH
11067: LD_STRING DR0-Sol2-1
11069: PPUSH
11070: CALL 6822 0 3
11074: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11075: LD_EXP 4
11079: PPUSH
11080: CALL_OW 302
11084: IFFALSE 11098
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11086: LD_EXP 4
11090: PPUSH
11091: LD_STRING DR0-Cyrus-1
11093: PPUSH
11094: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11098: LD_EXP 2
11102: PPUSH
11103: CALL_OW 302
11107: PUSH
11108: LD_VAR 0 1
11112: OR
11113: IFFALSE 11127
// Say ( JMM , DR0-JMM-1 ) ;
11115: LD_EXP 1
11119: PPUSH
11120: LD_STRING DR0-JMM-1
11122: PPUSH
11123: CALL_OW 88
// end ;
11127: PPOPN 1
11129: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11130: LD_EXP 5
11134: PPUSH
11135: CALL_OW 302
11139: PUSH
11140: LD_INT 22
11142: PUSH
11143: LD_INT 1
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 16
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 69
11168: PUSH
11169: LD_INT 0
11171: GREATER
11172: AND
11173: PUSH
11174: LD_INT 1
11176: PPUSH
11177: CALL_OW 463
11181: NOT
11182: AND
11183: IFFALSE 11461
11185: GO 11187
11187: DISABLE
// begin DialogueOn ;
11188: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11192: LD_EXP 5
11196: PPUSH
11197: LD_STRING D10-Frank-1
11199: PPUSH
11200: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11204: LD_INT 22
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 21
11216: PUSH
11217: LD_INT 1
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 2
11226: PUSH
11227: LD_INT 25
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 25
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 25
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 25
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 69
11283: PUSH
11284: LD_EXP 1
11288: PUSH
11289: LD_EXP 5
11293: PUSH
11294: LD_EXP 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: DIFF
11304: PPUSH
11305: LD_STRING D10-Sol1-1
11307: PPUSH
11308: LD_STRING D10-FSol1-1
11310: PPUSH
11311: CALL 6822 0 3
// Say ( Frank , D10-Frank-2 ) ;
11315: LD_EXP 5
11319: PPUSH
11320: LD_STRING D10-Frank-2
11322: PPUSH
11323: CALL_OW 88
// if IsOk ( Lisa ) then
11327: LD_EXP 2
11331: PPUSH
11332: CALL_OW 302
11336: IFFALSE 11352
// Say ( Lisa , D10-Lisa-2 ) else
11338: LD_EXP 2
11342: PPUSH
11343: LD_STRING D10-Lisa-2
11345: PPUSH
11346: CALL_OW 88
11350: GO 11457
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11352: LD_INT 22
11354: PUSH
11355: LD_INT 1
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 21
11364: PUSH
11365: LD_INT 1
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 25
11387: PUSH
11388: LD_INT 2
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 25
11397: PUSH
11398: LD_INT 3
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 25
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: PUSH
11432: LD_EXP 1
11436: PUSH
11437: LD_EXP 5
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: DIFF
11446: PPUSH
11447: LD_STRING D10-Sol1-2
11449: PPUSH
11450: LD_STRING D10-FSol1-2
11452: PPUSH
11453: CALL 6822 0 3
// DialogueOff ;
11457: CALL_OW 7
// end ;
11461: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11462: LD_INT 1
11464: PPUSH
11465: CALL_OW 463
11469: NOT
11470: IFFALSE 11753
11472: GO 11474
11474: DISABLE
// begin HarrisonSupport ;
11475: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11479: LD_EXP 18
11483: PPUSH
11484: CALL_OW 310
11488: PPUSH
11489: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11493: LD_EXP 18
11497: PPUSH
11498: LD_STRING DEng-Eng1-1
11500: PPUSH
11501: CALL_OW 88
// wait ( 1 1$0 ) ;
11505: LD_INT 2100
11507: PPUSH
11508: CALL_OW 67
// DialogueOn ;
11512: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11516: LD_EXP 15
11520: PPUSH
11521: LD_STRING DRem-Har-1
11523: PPUSH
11524: CALL_OW 94
// if contactWithRussian then
11528: LD_EXP 23
11532: IFFALSE 11548
// Say ( JMM , DRem-JMM-1 ) else
11534: LD_EXP 1
11538: PPUSH
11539: LD_STRING DRem-JMM-1
11541: PPUSH
11542: CALL_OW 88
11546: GO 11560
// Say ( JMM , DRem-JMM-1a ) ;
11548: LD_EXP 1
11552: PPUSH
11553: LD_STRING DRem-JMM-1a
11555: PPUSH
11556: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11560: LD_EXP 15
11564: PPUSH
11565: LD_STRING DRem-Har-2
11567: PPUSH
11568: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11572: LD_STRING DenisInDelta
11574: PPUSH
11575: LD_INT 0
11577: PPUSH
11578: CALL_OW 30
11582: IFFALSE 11598
// Say ( JMM , DRem-JMM-2 ) else
11584: LD_EXP 1
11588: PPUSH
11589: LD_STRING DRem-JMM-2
11591: PPUSH
11592: CALL_OW 88
11596: GO 11610
// Say ( JMM , DRem-JMM-2a ) ;
11598: LD_EXP 1
11602: PPUSH
11603: LD_STRING DRem-JMM-2a
11605: PPUSH
11606: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11610: LD_EXP 15
11614: PPUSH
11615: LD_STRING DRem-Har-3
11617: PPUSH
11618: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11622: LD_EXP 1
11626: PPUSH
11627: LD_STRING DRem-JMM-3
11629: PPUSH
11630: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11634: LD_EXP 15
11638: PPUSH
11639: LD_STRING DRem-Har-4
11641: PPUSH
11642: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11646: LD_STRING DenisInDelta
11648: PPUSH
11649: LD_INT 0
11651: PPUSH
11652: CALL_OW 30
11656: IFFALSE 11716
// begin Say ( JMM , DRem-JMM-4 ) ;
11658: LD_EXP 1
11662: PPUSH
11663: LD_STRING DRem-JMM-4
11665: PPUSH
11666: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11670: LD_EXP 15
11674: PPUSH
11675: LD_STRING DRem-Har-5
11677: PPUSH
11678: CALL_OW 94
// DialogueOff ;
11682: CALL_OW 7
// wait ( 4 4$00 ) ;
11686: LD_INT 8400
11688: PPUSH
11689: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11693: LD_INT 35
11695: PPUSH
11696: CALL_OW 67
// until not InBattle ( 1 ) ;
11700: LD_INT 1
11702: PPUSH
11703: CALL_OW 463
11707: NOT
11708: IFFALSE 11693
// SpawnDenis ;
11710: CALL 11754 0 0
// end else
11714: GO 11753
// begin DialogueOff ;
11716: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11720: LD_INT 36
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11733: LD_INT 15
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11746: LD_STRING MR
11748: PPUSH
11749: CALL_OW 337
// end ; end ;
11753: END
// export function SpawnDenis ; var tmp ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
// PrepareDenis ;
11758: CALL 2244 0 0
// if not Denis then
11762: LD_EXP 9
11766: NOT
11767: IFFALSE 11771
// exit ;
11769: GO 11992
// CenterNowOnUnits ( Denis ) ;
11771: LD_EXP 9
11775: PPUSH
11776: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11780: LD_ADDR_VAR 0 2
11784: PUSH
11785: LD_INT 22
11787: PUSH
11788: LD_INT 1
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PPUSH
11795: CALL_OW 69
11799: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11800: LD_EXP 9
11804: PPUSH
11805: LD_VAR 0 2
11809: PPUSH
11810: LD_EXP 9
11814: PPUSH
11815: CALL_OW 74
11819: PPUSH
11820: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11824: LD_INT 35
11826: PPUSH
11827: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11831: LD_INT 22
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 91
11843: PUSH
11844: LD_EXP 9
11848: PUSH
11849: LD_INT 10
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 69
11865: IFFALSE 11824
// SetSide ( Denis , 1 ) ;
11867: LD_EXP 9
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 235
// DialogueOn ;
11879: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11883: LD_EXP 9
11887: PPUSH
11888: LD_STRING DDen-Den-1
11890: PPUSH
11891: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11895: LD_EXP 1
11899: PPUSH
11900: LD_STRING DDen-JMM-1
11902: PPUSH
11903: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11907: LD_EXP 9
11911: PPUSH
11912: LD_STRING DDen-Den-2
11914: PPUSH
11915: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11919: LD_EXP 1
11923: PPUSH
11924: LD_STRING DDen-JMM-2
11926: PPUSH
11927: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11931: LD_EXP 9
11935: PPUSH
11936: LD_STRING DDen-Den-3
11938: PPUSH
11939: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11943: LD_EXP 1
11947: PPUSH
11948: LD_STRING DDen-JMM-3
11950: PPUSH
11951: CALL_OW 88
// DialogueOff ;
11955: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11959: LD_INT 36
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11972: LD_INT 15
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11985: LD_STRING MR
11987: PPUSH
11988: CALL_OW 337
// end ;
11992: LD_VAR 0 1
11996: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11997: LD_INT 22
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 30
12009: PUSH
12010: LD_INT 15
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: PUSH
12026: LD_EXP 9
12030: PPUSH
12031: CALL_OW 302
12035: AND
12036: PUSH
12037: LD_INT 1
12039: PPUSH
12040: CALL_OW 463
12044: NOT
12045: AND
12046: IFFALSE 12075
12048: GO 12050
12050: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12051: LD_EXP 9
12055: PPUSH
12056: LD_STRING DR1-Den-1
12058: PPUSH
12059: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12063: LD_EXP 1
12067: PPUSH
12068: LD_STRING DR1-JMM-1
12070: PPUSH
12071: CALL_OW 88
// end ;
12075: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12076: LD_INT 15
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 321
12086: PUSH
12087: LD_INT 2
12089: EQUAL
12090: PUSH
12091: LD_EXP 9
12095: PPUSH
12096: CALL_OW 302
12100: AND
12101: PUSH
12102: LD_INT 1
12104: PPUSH
12105: CALL_OW 463
12109: NOT
12110: AND
12111: IFFALSE 12320
12113: GO 12115
12115: DISABLE
// begin DialogueOn ;
12116: CALL_OW 6
// if IsOK ( Denis ) then
12120: LD_EXP 9
12124: PPUSH
12125: CALL_OW 302
12129: IFFALSE 12145
// Say ( Denis , DR2-Den-1 ) else
12131: LD_EXP 9
12135: PPUSH
12136: LD_STRING DR2-Den-1
12138: PPUSH
12139: CALL_OW 88
12143: GO 12204
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12145: LD_INT 22
12147: PUSH
12148: LD_INT 1
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 21
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 25
12167: PUSH
12168: LD_INT 4
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: PPUSH
12180: CALL_OW 69
12184: PUSH
12185: LD_EXP 1
12189: PUSH
12190: EMPTY
12191: LIST
12192: DIFF
12193: PPUSH
12194: LD_STRING DR2-Sci1-1
12196: PPUSH
12197: LD_STRING DR2-FSci1-1
12199: PPUSH
12200: CALL 6822 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12204: LD_EXP 1
12208: PPUSH
12209: LD_STRING DR2-JMM-1
12211: PPUSH
12212: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12216: LD_INT 22
12218: PUSH
12219: LD_INT 1
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 21
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 26
12238: PUSH
12239: LD_INT 1
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 23
12248: PUSH
12249: LD_INT 1
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 69
12266: PUSH
12267: LD_EXP 1
12271: PUSH
12272: LD_EXP 9
12276: PUSH
12277: LD_EXP 8
12281: PUSH
12282: LD_EXP 5
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: DIFF
12293: PPUSH
12294: LD_STRING DR2-Sol1-1
12296: PPUSH
12297: LD_STRING 
12299: PPUSH
12300: CALL 6822 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12304: LD_EXP 1
12308: PPUSH
12309: LD_STRING DR2-JMM-2
12311: PPUSH
12312: CALL_OW 88
// DialogueOff ;
12316: CALL_OW 7
// end ;
12320: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12321: LD_INT 22
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 30
12333: PUSH
12334: LD_INT 36
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: PUSH
12350: LD_INT 0
12352: EQUAL
12353: PUSH
12354: LD_INT 22
12356: PUSH
12357: LD_INT 1
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 33
12376: PUSH
12377: LD_INT 2
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 69
12393: PUSH
12394: LD_INT 0
12396: GREATER
12397: AND
12398: PUSH
12399: LD_EXP 24
12403: PUSH
12404: LD_INT 0
12406: EQUAL
12407: AND
12408: PUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 463
12416: NOT
12417: AND
12418: IFFALSE 12555
12420: GO 12422
12422: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12423: LD_INT 22
12425: PUSH
12426: LD_INT 1
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 21
12435: PUSH
12436: LD_INT 1
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 25
12445: PUSH
12446: LD_INT 3
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 26
12455: PUSH
12456: LD_INT 1
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: PUSH
12474: LD_EXP 1
12478: PUSH
12479: LD_EXP 6
12483: PUSH
12484: LD_EXP 7
12488: PUSH
12489: LD_EXP 9
12493: PUSH
12494: LD_EXP 16
12498: PUSH
12499: LD_EXP 3
12503: PUSH
12504: LD_EXP 4
12508: PUSH
12509: LD_EXP 2
12513: PUSH
12514: LD_EXP 5
12518: PUSH
12519: LD_EXP 8
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: DIFF
12536: PPUSH
12537: LD_STRING D3a-Mech1-1
12539: PPUSH
12540: LD_STRING 
12542: PPUSH
12543: CALL 6822 0 3
// firstTower = 2 ;
12547: LD_ADDR_EXP 24
12551: PUSH
12552: LD_INT 2
12554: ST_TO_ADDR
// end ;
12555: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12556: LD_INT 22
12558: PUSH
12559: LD_INT 3
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 21
12568: PUSH
12569: LD_INT 3
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 69
12584: PUSH
12585: LD_INT 0
12587: EQUAL
12588: IFFALSE 12719
12590: GO 12592
12592: DISABLE
12593: LD_INT 0
12595: PPUSH
// begin stop_talking := true ;
12596: LD_ADDR_OWVAR 56
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12604: LD_ADDR_VAR 0 1
12608: PUSH
12609: LD_INT 22
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: LD_INT 21
12621: PUSH
12622: LD_INT 1
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 25
12634: PUSH
12635: LD_INT 1
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 25
12644: PUSH
12645: LD_INT 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 25
12654: PUSH
12655: LD_INT 3
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 25
12664: PUSH
12665: LD_INT 4
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: PPUSH
12684: CALL_OW 69
12688: PUSH
12689: FOR_IN
12690: IFFALSE 12709
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12692: LD_VAR 0 1
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: LD_INT 7500
12702: PPUSH
12703: CALL_OW 591
12707: GO 12689
12709: POP
12710: POP
// stop_talking := false ;
12711: LD_ADDR_OWVAR 56
12715: PUSH
12716: LD_INT 0
12718: ST_TO_ADDR
// end ;
12719: PPOPN 1
12721: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12722: LD_INT 22
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 30
12734: PUSH
12735: LD_INT 36
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 21
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 33
12773: PUSH
12774: LD_INT 2
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: PPUSH
12786: CALL_OW 69
12790: AND
12791: PUSH
12792: CALL 13344 0 0
12796: AND
12797: PUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 463
12805: NOT
12806: AND
12807: IFFALSE 13341
12809: GO 12811
12811: DISABLE
12812: LD_INT 0
12814: PPUSH
12815: PPUSH
12816: PPUSH
12817: PPUSH
12818: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12819: LD_ADDR_VAR 0 3
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 30
12836: PUSH
12837: LD_INT 36
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PPUSH
12848: CALL_OW 69
12852: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12853: LD_ADDR_VAR 0 4
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_INT 1
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 21
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 33
12880: PUSH
12881: LD_INT 2
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12898: LD_ADDR_VAR 0 5
12902: PUSH
12903: EMPTY
12904: ST_TO_ADDR
// for i in tmpControlTowers do
12905: LD_ADDR_VAR 0 1
12909: PUSH
12910: LD_VAR 0 3
12914: PUSH
12915: FOR_IN
12916: IFFALSE 13339
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12918: LD_EXP 1
12922: PPUSH
12923: CALL_OW 310
12927: PUSH
12928: LD_VAR 0 1
12932: EQUAL
12933: PUSH
12934: LD_EXP 1
12938: PPUSH
12939: CALL_OW 257
12943: PUSH
12944: LD_INT 3
12946: EQUAL
12947: AND
12948: IFFALSE 13082
// begin InGameOn ;
12950: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12954: LD_VAR 0 4
12958: PUSH
12959: LD_INT 1
12961: ARRAY
12962: PPUSH
12963: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12967: LD_EXP 1
12971: PPUSH
12972: LD_STRING D4a-JMM-1
12974: PPUSH
12975: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12979: LD_VAR 0 4
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: PPUSH
12988: LD_EXP 1
12992: PPUSH
12993: CALL_OW 53
// wait ( 0 0$1 ) ;
12997: LD_INT 35
12999: PPUSH
13000: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13004: LD_VAR 0 4
13008: PUSH
13009: LD_INT 1
13011: ARRAY
13012: PPUSH
13013: LD_VAR 0 4
13017: PUSH
13018: LD_INT 1
13020: ARRAY
13021: PPUSH
13022: CALL_OW 250
13026: PUSH
13027: LD_INT 3
13029: PLUS
13030: PPUSH
13031: LD_VAR 0 4
13035: PUSH
13036: LD_INT 1
13038: ARRAY
13039: PPUSH
13040: CALL_OW 251
13044: PUSH
13045: LD_INT 2
13047: MINUS
13048: PPUSH
13049: CALL_OW 111
// wait ( 0 0$2 ) ;
13053: LD_INT 70
13055: PPUSH
13056: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13060: LD_EXP 1
13064: PPUSH
13065: LD_STRING D4b-JMM-1
13067: PPUSH
13068: CALL_OW 88
// InGameOff ;
13072: CALL_OW 9
// exit ;
13076: POP
13077: POP
13078: GO 13341
// end else
13080: GO 13337
// begin InGameOn ;
13082: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13086: LD_ADDR_VAR 0 5
13090: PUSH
13091: LD_VAR 0 1
13095: PPUSH
13096: CALL_OW 313
13100: PPUSH
13101: LD_INT 25
13103: PUSH
13104: LD_INT 3
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PPUSH
13111: CALL_OW 72
13115: ST_TO_ADDR
// if not tmpMechanicInside then
13116: LD_VAR 0 5
13120: NOT
13121: IFFALSE 13125
// continue ;
13123: GO 12915
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13125: LD_VAR 0 5
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: PPUSH
13134: CALL_OW 258
13138: PUSH
13139: LD_INT 1
13141: EQUAL
13142: IFFALSE 13162
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13144: LD_VAR 0 5
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PPUSH
13153: LD_STRING D4a-Mech1-1
13155: PPUSH
13156: CALL_OW 88
13160: GO 13178
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13162: LD_VAR 0 5
13166: PUSH
13167: LD_INT 1
13169: ARRAY
13170: PPUSH
13171: LD_STRING D4a-FMech1-1
13173: PPUSH
13174: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13178: LD_VAR 0 4
13182: PUSH
13183: LD_INT 1
13185: ARRAY
13186: PPUSH
13187: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13191: LD_VAR 0 4
13195: PUSH
13196: LD_INT 1
13198: ARRAY
13199: PPUSH
13200: LD_VAR 0 5
13204: PUSH
13205: LD_INT 1
13207: ARRAY
13208: PPUSH
13209: CALL_OW 53
// wait ( 0 0$1 ) ;
13213: LD_INT 35
13215: PPUSH
13216: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13220: LD_VAR 0 4
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: LD_VAR 0 4
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: CALL_OW 250
13242: PUSH
13243: LD_INT 3
13245: PLUS
13246: PPUSH
13247: LD_VAR 0 4
13251: PUSH
13252: LD_INT 1
13254: ARRAY
13255: PPUSH
13256: CALL_OW 251
13260: PUSH
13261: LD_INT 2
13263: MINUS
13264: PPUSH
13265: CALL_OW 111
// wait ( 0 0$2 ) ;
13269: LD_INT 70
13271: PPUSH
13272: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13276: LD_VAR 0 5
13280: PUSH
13281: LD_INT 1
13283: ARRAY
13284: PPUSH
13285: CALL_OW 258
13289: PUSH
13290: LD_INT 1
13292: EQUAL
13293: IFFALSE 13313
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13295: LD_VAR 0 5
13299: PUSH
13300: LD_INT 1
13302: ARRAY
13303: PPUSH
13304: LD_STRING D4b-Mech1-1
13306: PPUSH
13307: CALL_OW 88
13311: GO 13329
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13313: LD_VAR 0 5
13317: PUSH
13318: LD_INT 1
13320: ARRAY
13321: PPUSH
13322: LD_STRING D4b-FMech1-1
13324: PPUSH
13325: CALL_OW 88
// InGameOff ;
13329: CALL_OW 9
// exit ;
13333: POP
13334: POP
13335: GO 13341
// end ; end ;
13337: GO 12915
13339: POP
13340: POP
// end ;
13341: PPOPN 5
13343: END
// function CheckMehInside ; var i , j , tmp ; begin
13344: LD_INT 0
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// result := false ;
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_INT 0
13357: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13358: LD_ADDR_VAR 0 4
13362: PUSH
13363: LD_INT 22
13365: PUSH
13366: LD_INT 1
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 30
13375: PUSH
13376: LD_INT 36
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PPUSH
13387: CALL_OW 69
13391: ST_TO_ADDR
// if not tmp then
13392: LD_VAR 0 4
13396: NOT
13397: IFFALSE 13401
// exit ;
13399: GO 13465
// for i in tmp do
13401: LD_ADDR_VAR 0 2
13405: PUSH
13406: LD_VAR 0 4
13410: PUSH
13411: FOR_IN
13412: IFFALSE 13463
// for j in UnitsInside ( i ) do
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: LD_VAR 0 2
13423: PPUSH
13424: CALL_OW 313
13428: PUSH
13429: FOR_IN
13430: IFFALSE 13459
// if GetClass ( j ) = class_mechanic then
13432: LD_VAR 0 3
13436: PPUSH
13437: CALL_OW 257
13441: PUSH
13442: LD_INT 3
13444: EQUAL
13445: IFFALSE 13457
// begin result := true ;
13447: LD_ADDR_VAR 0 1
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// break ;
13455: GO 13459
// end ;
13457: GO 13429
13459: POP
13460: POP
13461: GO 13411
13463: POP
13464: POP
// end ;
13465: LD_VAR 0 1
13469: RET
// every 12 12$0 do
13470: GO 13472
13472: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13473: LD_INT 35
13475: PPUSH
13476: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) or timeToEnd < 5 5$00 ;
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 463
13487: NOT
13488: PUSH
13489: LD_INT 32
13491: PPUSH
13492: LD_INT 81
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 70
13506: NOT
13507: AND
13508: PUSH
13509: LD_EXP 27
13513: PUSH
13514: LD_INT 10500
13516: LESS
13517: OR
13518: IFFALSE 13473
// PrepareKurt ;
13520: CALL 16153 0 0
// end ;
13524: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13525: LD_EXP 16
13529: PPUSH
13530: CALL_OW 302
13534: PUSH
13535: LD_EXP 16
13539: PPUSH
13540: CALL_OW 255
13544: PUSH
13545: LD_INT 1
13547: EQUAL
13548: AND
13549: PUSH
13550: LD_EXP 2
13554: AND
13555: IFFALSE 13720
13557: GO 13559
13559: DISABLE
// begin wait ( 0 0$50 ) ;
13560: LD_INT 1750
13562: PPUSH
13563: CALL_OW 67
// if not IsOk ( Joan ) then
13567: LD_EXP 16
13571: PPUSH
13572: CALL_OW 302
13576: NOT
13577: IFFALSE 13581
// exit ;
13579: GO 13720
// if IsOK ( Lisa ) then
13581: LD_EXP 2
13585: PPUSH
13586: CALL_OW 302
13590: IFFALSE 13720
// begin DialogueOn ;
13592: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13596: LD_EXP 2
13600: PPUSH
13601: LD_STRING D7-Lisa-1
13603: PPUSH
13604: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13608: LD_EXP 1
13612: PPUSH
13613: LD_STRING D7-JMM-1
13615: PPUSH
13616: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13620: LD_EXP 2
13624: PPUSH
13625: LD_STRING D7-Lisa-2
13627: PPUSH
13628: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13632: LD_EXP 1
13636: PPUSH
13637: LD_STRING D7-JMM-2
13639: PPUSH
13640: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13644: LD_EXP 2
13648: PPUSH
13649: LD_STRING D7-Lisa-3
13651: PPUSH
13652: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13656: LD_EXP 1
13660: PPUSH
13661: LD_STRING D7-JMM-3
13663: PPUSH
13664: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13668: LD_EXP 2
13672: PPUSH
13673: LD_STRING D7-Lisa-4
13675: PPUSH
13676: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13680: LD_EXP 1
13684: PPUSH
13685: LD_STRING D7-JMM-4
13687: PPUSH
13688: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13692: LD_EXP 1
13696: PPUSH
13697: LD_STRING D7-JMM-4a
13699: PPUSH
13700: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13704: LD_EXP 2
13708: PPUSH
13709: LD_STRING D7-Lisa-5
13711: PPUSH
13712: CALL_OW 88
// DialogueOff ;
13716: CALL_OW 7
// end ; end ;
13720: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13721: LD_EXP 14
13725: PUSH
13726: LD_INT 22
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 91
13738: PUSH
13739: LD_EXP 14
13743: PUSH
13744: LD_INT 10
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 25
13757: PUSH
13758: LD_INT 1
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 25
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 25
13777: PUSH
13778: LD_INT 3
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 25
13787: PUSH
13788: LD_INT 4
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: PUSH
13812: LD_INT 1
13814: GREATER
13815: AND
13816: IFFALSE 13833
13818: GO 13820
13820: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13821: LD_EXP 14
13825: PPUSH
13826: LD_STRING D5-Sol1-1
13828: PPUSH
13829: CALL_OW 88
13833: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13834: LD_INT 22
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 33
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PPUSH
13858: CALL_OW 69
13862: PUSH
13863: LD_INT 2
13865: GREATEREQUAL
13866: IFFALSE 13886
13868: GO 13870
13870: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13871: LD_STRING MRa
13873: PPUSH
13874: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13878: LD_ADDR_EXP 29
13882: PUSH
13883: LD_INT 1
13885: ST_TO_ADDR
// end ;
13886: END
// every 2 2$00 do var i , last ;
13887: GO 13889
13889: DISABLE
13890: LD_INT 0
13892: PPUSH
13893: PPUSH
// begin last := 8 ;
13894: LD_ADDR_VAR 0 2
13898: PUSH
13899: LD_INT 8
13901: ST_TO_ADDR
// for i = 1 to last do
13902: LD_ADDR_VAR 0 1
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_VAR 0 2
13916: PUSH
13917: FOR_TO
13918: IFFALSE 13946
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13920: LD_INT 6300
13922: PPUSH
13923: LD_INT 12600
13925: PPUSH
13926: CALL_OW 12
13930: PPUSH
13931: CALL_OW 67
// PrepareRandoms ( i ) ;
13935: LD_VAR 0 1
13939: PPUSH
13940: CALL 4129 0 1
// end ;
13944: GO 13917
13946: POP
13947: POP
// end ;
13948: PPOPN 2
13950: END
// every 5 5$20 do
13951: GO 13953
13953: DISABLE
// begin DialogueOn ;
13954: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13958: LD_EXP 10
13962: PPUSH
13963: LD_STRING D12a-Sci-1
13965: PPUSH
13966: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13970: LD_EXP 1
13974: PPUSH
13975: LD_STRING D12a-JMM-1
13977: PPUSH
13978: CALL_OW 88
// DialogueOff ;
13982: CALL_OW 7
// cratesStatus := 1 ;
13986: LD_ADDR_EXP 39
13990: PUSH
13991: LD_INT 1
13993: ST_TO_ADDR
// end ;
13994: END
// every 13 13$0 do
13995: GO 13997
13997: DISABLE
// begin DialogueOn ;
13998: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14002: LD_EXP 10
14006: PPUSH
14007: LD_STRING D12b-Sci-1
14009: PPUSH
14010: CALL_OW 94
// DialogueOff ;
14014: CALL_OW 7
// cratesStatus := 2 ;
14018: LD_ADDR_EXP 39
14022: PUSH
14023: LD_INT 2
14025: ST_TO_ADDR
// BuildBulldozer ;
14026: CALL 9865 0 0
// end ;
14030: END
// every 32 32$0 do
14031: GO 14033
14033: DISABLE
// begin DialogueOn ;
14034: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14038: LD_EXP 10
14042: PPUSH
14043: LD_STRING D12c-Sci-1
14045: PPUSH
14046: CALL_OW 94
// DialogueOff ;
14050: CALL_OW 7
// wait ( 3 3$0 ) ;
14054: LD_INT 6300
14056: PPUSH
14057: CALL_OW 67
// DialogueOn ;
14061: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14065: LD_EXP 10
14069: PPUSH
14070: LD_STRING D12d-Sci-1
14072: PPUSH
14073: CALL_OW 94
// DialogueOff ;
14077: CALL_OW 7
// cratesStatus = 1 ;
14081: LD_ADDR_EXP 39
14085: PUSH
14086: LD_INT 1
14088: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14089: CALL 20361 0 0
// wait ( 2 2$30 ) ;
14093: LD_INT 5250
14095: PPUSH
14096: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14100: LD_INT 35
14102: PPUSH
14103: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 463
14114: NOT
14115: PUSH
14116: LD_INT 32
14118: PPUSH
14119: LD_INT 81
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PPUSH
14129: CALL_OW 70
14133: NOT
14134: AND
14135: PUSH
14136: LD_EXP 27
14140: PUSH
14141: LD_INT 6300
14143: LESS
14144: OR
14145: IFFALSE 14100
// PrepareJoan ;
14147: CALL 3085 0 0
// end ;
14151: END
// every 42 42$0 do
14152: GO 14154
14154: DISABLE
// begin DialogueOn ;
14155: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14159: LD_EXP 10
14163: PPUSH
14164: LD_STRING D12e-Sci-1
14166: PPUSH
14167: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14171: LD_EXP 1
14175: PPUSH
14176: LD_STRING D12e-JMM-1
14178: PPUSH
14179: CALL_OW 88
// DialogueOff ;
14183: CALL_OW 7
// cratesStatus := 2 ;
14187: LD_ADDR_EXP 39
14191: PUSH
14192: LD_INT 2
14194: ST_TO_ADDR
// end ; end_of_file
14195: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14196: LD_VAR 0 1
14200: PUSH
14201: LD_INT 1
14203: EQUAL
14204: PUSH
14205: LD_VAR 0 2
14209: PUSH
14210: LD_INT 3
14212: EQUAL
14213: AND
14214: IFFALSE 14224
// contactWithRussian := 1 ;
14216: LD_ADDR_EXP 23
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// end ;
14224: PPOPN 2
14226: END
// on BuildingComplete ( building ) do var i ;
14227: LD_INT 0
14229: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 266
14239: PUSH
14240: LD_INT 36
14242: EQUAL
14243: PUSH
14244: LD_VAR 0 1
14248: PPUSH
14249: CALL_OW 255
14253: PUSH
14254: LD_INT 1
14256: EQUAL
14257: AND
14258: PUSH
14259: LD_EXP 24
14263: PUSH
14264: LD_INT 0
14266: EQUAL
14267: AND
14268: IFFALSE 14348
// begin firstTower = 1 ;
14270: LD_ADDR_EXP 24
14274: PUSH
14275: LD_INT 1
14277: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14278: LD_INT 22
14280: PUSH
14281: LD_INT 1
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 21
14290: PUSH
14291: LD_INT 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 25
14300: PUSH
14301: LD_INT 3
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 26
14310: PUSH
14311: LD_INT 1
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: PUSH
14329: LD_EXP 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: DIFF
14337: PPUSH
14338: LD_STRING D3b-Mech1-1
14340: PPUSH
14341: LD_STRING D3b-Mech1-1
14343: PPUSH
14344: CALL 6822 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 266
14357: PUSH
14358: LD_INT 0
14360: EQUAL
14361: PUSH
14362: LD_VAR 0 1
14366: PPUSH
14367: CALL_OW 255
14371: PUSH
14372: LD_INT 1
14374: EQUAL
14375: AND
14376: IFFALSE 14390
// SetBName ( building , theta ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_STRING theta
14385: PPUSH
14386: CALL_OW 500
// if GetSide ( building ) = 3 then
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 255
14399: PUSH
14400: LD_INT 3
14402: EQUAL
14403: IFFALSE 14443
// begin for i := 1 to 4 do
14405: LD_ADDR_VAR 0 2
14409: PUSH
14410: DOUBLE
14411: LD_INT 1
14413: DEC
14414: ST_TO_ADDR
14415: LD_INT 4
14417: PUSH
14418: FOR_TO
14419: IFFALSE 14441
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14421: LD_ADDR_EXP 32
14425: PUSH
14426: LD_EXP 32
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: CALL_OW 3
14438: ST_TO_ADDR
14439: GO 14418
14441: POP
14442: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14443: LD_VAR 0 1
14447: PPUSH
14448: CALL_OW 255
14452: PUSH
14453: LD_INT 3
14455: EQUAL
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 266
14466: PUSH
14467: LD_INT 0
14469: EQUAL
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 266
14480: PUSH
14481: LD_INT 2
14483: EQUAL
14484: OR
14485: PUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 266
14495: PUSH
14496: LD_INT 4
14498: EQUAL
14499: OR
14500: PUSH
14501: EMPTY
14502: LIST
14503: AND
14504: IFFALSE 14515
// ComUpgrade ( building ) ;
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14515: LD_VAR 0 1
14519: PPUSH
14520: CALL_OW 255
14524: PUSH
14525: LD_INT 3
14527: EQUAL
14528: PUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 266
14538: PUSH
14539: LD_INT 32
14541: EQUAL
14542: AND
14543: IFFALSE 14584
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14545: LD_VAR 0 1
14549: PPUSH
14550: LD_INT 42
14552: PUSH
14553: LD_INT 43
14555: PUSH
14556: LD_INT 44
14558: PUSH
14559: LD_INT 46
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 1
14570: PPUSH
14571: LD_INT 4
14573: PPUSH
14574: CALL_OW 12
14578: ARRAY
14579: PPUSH
14580: CALL_OW 208
// end ;
14584: PPOPN 2
14586: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL 36920 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14596: LD_VAR 0 1
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 1
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 21
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 23
14623: PUSH
14624: LD_INT 1
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: LIST
14635: PPUSH
14636: CALL_OW 69
14640: IN
14641: IFFALSE 14657
// killCounter := killCounter + 1 ;
14643: LD_ADDR_EXP 46
14647: PUSH
14648: LD_EXP 46
14652: PUSH
14653: LD_INT 1
14655: PLUS
14656: ST_TO_ADDR
// if unit in ruAttackersInForest then
14657: LD_VAR 0 1
14661: PUSH
14662: LD_EXP 49
14666: IN
14667: IFFALSE 14685
// ruAttackersInForest := ruAttackersInForest diff unit ;
14669: LD_ADDR_EXP 49
14673: PUSH
14674: LD_EXP 49
14678: PUSH
14679: LD_VAR 0 1
14683: DIFF
14684: ST_TO_ADDR
// if unit in ruAttackers then
14685: LD_VAR 0 1
14689: PUSH
14690: LD_EXP 48
14694: IN
14695: IFFALSE 14713
// ruAttackers := ruAttackers diff unit ;
14697: LD_ADDR_EXP 48
14701: PUSH
14702: LD_EXP 48
14706: PUSH
14707: LD_VAR 0 1
14711: DIFF
14712: ST_TO_ADDR
// if unit = JMM then
14713: LD_VAR 0 1
14717: PUSH
14718: LD_EXP 1
14722: EQUAL
14723: IFFALSE 14732
// YouLost ( JMM ) ;
14725: LD_STRING JMM
14727: PPUSH
14728: CALL_OW 104
// if unit = Joan then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_EXP 16
14741: EQUAL
14742: IFFALSE 14752
// JoanStatus := 0 ;
14744: LD_ADDR_EXP 17
14748: PUSH
14749: LD_INT 0
14751: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14752: LD_VAR 0 1
14756: PPUSH
14757: CALL_OW 255
14761: PUSH
14762: LD_INT 1
14764: EQUAL
14765: PUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 247
14775: PUSH
14776: LD_INT 1
14778: EQUAL
14779: AND
14780: PUSH
14781: LD_VAR 0 1
14785: PPUSH
14786: CALL_OW 248
14790: PUSH
14791: LD_INT 1
14793: EQUAL
14794: AND
14795: IFFALSE 14811
// unitLost = unitLost + 1 ;
14797: LD_ADDR_EXP 31
14801: PUSH
14802: LD_EXP 31
14806: PUSH
14807: LD_INT 1
14809: PLUS
14810: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14811: LD_VAR 0 1
14815: PPUSH
14816: CALL_OW 255
14820: PUSH
14821: LD_INT 3
14823: EQUAL
14824: PUSH
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 247
14834: PUSH
14835: LD_INT 3
14837: EQUAL
14838: AND
14839: PUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 266
14849: PUSH
14850: LD_INT 4
14852: PUSH
14853: LD_INT 5
14855: PUSH
14856: LD_INT 32
14858: PUSH
14859: LD_INT 31
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: IN
14868: AND
14869: IFFALSE 14955
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14871: LD_ADDR_EXP 32
14875: PUSH
14876: LD_EXP 32
14880: PUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 266
14890: ADD
14891: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14892: LD_ADDR_EXP 32
14896: PUSH
14897: LD_EXP 32
14901: PUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 250
14911: ADD
14912: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14913: LD_ADDR_EXP 32
14917: PUSH
14918: LD_EXP 32
14922: PUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 251
14932: ADD
14933: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14934: LD_ADDR_EXP 32
14938: PUSH
14939: LD_EXP 32
14943: PUSH
14944: LD_VAR 0 1
14948: PPUSH
14949: CALL_OW 254
14953: ADD
14954: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14955: LD_EXP 47
14959: PUSH
14960: LD_VAR 0 1
14964: PPUSH
14965: CALL_OW 257
14969: PUSH
14970: LD_INT 3
14972: EQUAL
14973: AND
14974: PUSH
14975: LD_VAR 0 1
14979: PPUSH
14980: CALL_OW 255
14984: PUSH
14985: LD_INT 3
14987: EQUAL
14988: AND
14989: PUSH
14990: LD_INT 21
14992: PPUSH
14993: CALL_OW 302
14997: AND
14998: PUSH
14999: LD_INT 21
15001: PPUSH
15002: CALL_OW 255
15006: PUSH
15007: LD_INT 3
15009: EQUAL
15010: AND
15011: IFFALSE 15093
// begin ruMechCounter := ruMechCounter - 1 ;
15013: LD_ADDR_EXP 47
15017: PUSH
15018: LD_EXP 47
15022: PUSH
15023: LD_INT 1
15025: MINUS
15026: ST_TO_ADDR
// uc_side := 3 ;
15027: LD_ADDR_OWVAR 20
15031: PUSH
15032: LD_INT 3
15034: ST_TO_ADDR
// uc_nation := 3 ;
15035: LD_ADDR_OWVAR 21
15039: PUSH
15040: LD_INT 3
15042: ST_TO_ADDR
// hc_gallery :=  ;
15043: LD_ADDR_OWVAR 33
15047: PUSH
15048: LD_STRING 
15050: ST_TO_ADDR
// hc_name :=  ;
15051: LD_ADDR_OWVAR 26
15055: PUSH
15056: LD_STRING 
15058: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15059: LD_INT 0
15061: PPUSH
15062: LD_EXP 35
15066: PPUSH
15067: LD_EXP 36
15071: PPUSH
15072: CALL_OW 12
15076: PPUSH
15077: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15081: CALL_OW 44
15085: PPUSH
15086: LD_INT 21
15088: PPUSH
15089: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15093: LD_VAR 0 1
15097: PPUSH
15098: CALL_OW 255
15102: PUSH
15103: LD_INT 3
15105: EQUAL
15106: PUSH
15107: LD_VAR 0 1
15111: PPUSH
15112: CALL_OW 264
15116: PUSH
15117: LD_INT 52
15119: EQUAL
15120: AND
15121: PUSH
15122: LD_INT 21
15124: PPUSH
15125: CALL_OW 302
15129: AND
15130: PUSH
15131: LD_INT 21
15133: PPUSH
15134: CALL_OW 255
15138: PUSH
15139: LD_INT 3
15141: EQUAL
15142: AND
15143: IFFALSE 15164
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15145: LD_INT 21
15147: PPUSH
15148: LD_INT 22
15150: PPUSH
15151: LD_INT 1
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: LD_INT 52
15159: PPUSH
15160: CALL_OW 125
// end ;
15164: PPOPN 1
15166: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15167: LD_INT 0
15169: PPUSH
15170: PPUSH
15171: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15172: LD_VAR 0 1
15176: PPUSH
15177: LD_VAR 0 2
15181: PPUSH
15182: CALL 37040 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15186: LD_VAR 0 1
15190: PPUSH
15191: CALL_OW 255
15195: PUSH
15196: LD_INT 3
15198: EQUAL
15199: PUSH
15200: LD_VAR 0 1
15204: PPUSH
15205: CALL_OW 264
15209: PUSH
15210: LD_INT 51
15212: PUSH
15213: LD_INT 52
15215: PUSH
15216: LD_INT 53
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: LIST
15223: IN
15224: NOT
15225: AND
15226: IFFALSE 15257
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15228: LD_ADDR_EXP 48
15232: PUSH
15233: LD_EXP 48
15237: PPUSH
15238: LD_EXP 48
15242: PUSH
15243: LD_INT 1
15245: PLUS
15246: PPUSH
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 1
15256: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 264
15266: PUSH
15267: LD_INT 53
15269: EQUAL
15270: IFFALSE 15425
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 60
15279: PPUSH
15280: LD_INT 85
15282: PPUSH
15283: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15287: LD_VAR 0 1
15291: PPUSH
15292: LD_INT 43
15294: PPUSH
15295: LD_INT 69
15297: PPUSH
15298: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 37
15309: PPUSH
15310: LD_INT 46
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$1 ) ;
15317: LD_INT 35
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until not HasTask ( vehicle ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 314
15340: NOT
15341: IFFALSE 15324
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15343: LD_VAR 0 1
15347: PPUSH
15348: LD_INT 34
15350: PPUSH
15351: CALL 9917 0 2
// repeat wait ( 0 0$1 ) ;
15355: LD_INT 35
15357: PPUSH
15358: CALL_OW 67
// until not HasTask ( vehicle ) ;
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 314
15371: NOT
15372: IFFALSE 15355
// un := IsDrivenBy ( vehicle ) ;
15374: LD_ADDR_VAR 0 4
15378: PUSH
15379: LD_VAR 0 1
15383: PPUSH
15384: CALL_OW 311
15388: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15389: LD_VAR 0 4
15393: PPUSH
15394: LD_INT 96
15396: PPUSH
15397: LD_INT 77
15399: PPUSH
15400: CALL_OW 171
// AddComExitVehicle ( un ) ;
15404: LD_VAR 0 4
15408: PPUSH
15409: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15413: LD_VAR 0 4
15417: PPUSH
15418: LD_INT 17
15420: PPUSH
15421: CALL_OW 180
// end ; end ;
15425: PPOPN 5
15427: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15428: LD_VAR 0 1
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: LD_INT 3
15440: EQUAL
15441: IFFALSE 15472
// begin tamedApemans = tamedApemans + 1 ;
15443: LD_ADDR_EXP 33
15447: PUSH
15448: LD_EXP 33
15452: PUSH
15453: LD_INT 1
15455: PLUS
15456: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15457: LD_VAR 0 1
15461: PPUSH
15462: LD_INT 106
15464: PPUSH
15465: LD_INT 85
15467: PPUSH
15468: CALL_OW 111
// end ; end ;
15472: PPOPN 2
15474: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15475: LD_VAR 0 2
15479: PPUSH
15480: CALL_OW 255
15484: PUSH
15485: LD_INT 3
15487: EQUAL
15488: PUSH
15489: LD_VAR 0 1
15493: PPUSH
15494: CALL_OW 255
15498: PUSH
15499: LD_INT 3
15501: EQUAL
15502: AND
15503: PUSH
15504: LD_INT 21
15506: PPUSH
15507: CALL_OW 302
15511: AND
15512: IFFALSE 15526
// ComEnterUnit ( human , rufab ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 21
15521: PPUSH
15522: CALL_OW 120
// end ;
15526: PPOPN 4
15528: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15529: LD_VAR 0 1
15533: PUSH
15534: LD_INT 21
15536: EQUAL
15537: PUSH
15538: LD_VAR 0 2
15542: PPUSH
15543: CALL_OW 255
15547: PUSH
15548: LD_INT 3
15550: EQUAL
15551: AND
15552: IFFALSE 15566
// SetLives ( human , 1000 ) ;
15554: LD_VAR 0 2
15558: PPUSH
15559: LD_INT 1000
15561: PPUSH
15562: CALL_OW 234
// end ;
15566: PPOPN 2
15568: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL 37024 0 1
// end ; end_of_file
15578: PPOPN 1
15580: END
// every 0 0$30 trigger cratesStatus = 1 do
15581: LD_EXP 39
15585: PUSH
15586: LD_INT 1
15588: EQUAL
15589: IFFALSE 15642
15591: GO 15593
15593: DISABLE
// begin enable ;
15594: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15595: LD_INT 350
15597: PUSH
15598: LD_INT 875
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 1
15607: PPUSH
15608: LD_INT 2
15610: PPUSH
15611: CALL_OW 12
15615: ARRAY
15616: PPUSH
15617: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15621: LD_INT 1
15623: PPUSH
15624: LD_INT 5
15626: PPUSH
15627: CALL_OW 12
15631: PPUSH
15632: LD_INT 7
15634: PPUSH
15635: LD_INT 1
15637: PPUSH
15638: CALL_OW 55
// end ;
15642: END
// every 1 1$0 trigger cratesStatus = 2 do
15643: LD_EXP 39
15647: PUSH
15648: LD_INT 2
15650: EQUAL
15651: IFFALSE 15734
15653: GO 15655
15655: DISABLE
// begin enable ;
15656: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15657: LD_INT 3150
15659: PUSH
15660: LD_INT 4550
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_INT 2
15672: PPUSH
15673: CALL_OW 12
15677: ARRAY
15678: PPUSH
15679: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15683: LD_INT 2
15685: PUSH
15686: LD_INT 5
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: LD_INT 2
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 6
15707: PUSH
15708: LD_INT 7
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 1
15717: PPUSH
15718: LD_INT 2
15720: PPUSH
15721: CALL_OW 12
15725: ARRAY
15726: PPUSH
15727: LD_INT 1
15729: PPUSH
15730: CALL_OW 55
// end ;
15734: END
// every 0 0$30 + 0 0$10 do
15735: GO 15737
15737: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15738: LD_INT 4
15740: PUSH
15741: LD_INT 5
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 1
15750: PPUSH
15751: LD_INT 2
15753: PPUSH
15754: CALL_OW 12
15758: ARRAY
15759: PPUSH
15760: LD_INT 7
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: CALL_OW 55
// Wait ( 0 0$15 ) ;
15770: LD_INT 525
15772: PPUSH
15773: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15777: LD_INT 4
15779: PUSH
15780: LD_INT 5
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 1
15789: PPUSH
15790: LD_INT 2
15792: PPUSH
15793: CALL_OW 12
15797: ARRAY
15798: PPUSH
15799: LD_INT 7
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 55
// Wait ( 0 0$20 ) ;
15809: LD_INT 700
15811: PPUSH
15812: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15816: LD_INT 4
15818: PUSH
15819: LD_INT 5
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 1
15828: PPUSH
15829: LD_INT 2
15831: PPUSH
15832: CALL_OW 12
15836: ARRAY
15837: PPUSH
15838: LD_INT 7
15840: PPUSH
15841: LD_INT 1
15843: PPUSH
15844: CALL_OW 55
// end ; end_of_file
15848: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15849: LD_EXP 25
15853: PUSH
15854: LD_INT 1
15856: EQUAL
15857: IFFALSE 16150
15859: GO 15861
15861: DISABLE
15862: LD_INT 0
15864: PPUSH
15865: PPUSH
15866: PPUSH
// begin enable ;
15867: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15868: LD_ADDR_VAR 0 2
15872: PUSH
15873: LD_INT 22
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 21
15885: PUSH
15886: LD_INT 3
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 2
15895: PUSH
15896: LD_INT 30
15898: PUSH
15899: LD_INT 0
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 30
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: LIST
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 69
15930: ST_TO_ADDR
// for i in tmp do
15931: LD_ADDR_VAR 0 1
15935: PUSH
15936: LD_VAR 0 2
15940: PUSH
15941: FOR_IN
15942: IFFALSE 15975
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15944: LD_ADDR_VAR 0 3
15948: PUSH
15949: LD_VAR 0 3
15953: PUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 274
15963: PPUSH
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 275
15971: PLUS
15972: ST_TO_ADDR
15973: GO 15941
15975: POP
15976: POP
// strings = [ ] ;
15977: LD_ADDR_EXP 28
15981: PUSH
15982: EMPTY
15983: ST_TO_ADDR
// if tmp = 0 then
15984: LD_VAR 0 2
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: IFFALSE 16017
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15994: LD_ADDR_EXP 28
15998: PUSH
15999: LD_EXP 28
16003: PUSH
16004: LD_STRING #Am06-1
16006: PUSH
16007: LD_EXP 26
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: ADD
16016: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16017: LD_VAR 0 2
16021: PUSH
16022: LD_EXP 26
16026: PUSH
16027: LD_VAR 0 3
16031: GREATER
16032: AND
16033: IFFALSE 16064
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16035: LD_ADDR_EXP 28
16039: PUSH
16040: LD_EXP 28
16044: PUSH
16045: LD_STRING #Am06-1
16047: PUSH
16048: LD_EXP 26
16052: PUSH
16053: LD_VAR 0 3
16057: MINUS
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: ADD
16063: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16064: LD_VAR 0 2
16068: PUSH
16069: LD_EXP 26
16073: PUSH
16074: LD_VAR 0 3
16078: LESSEQUAL
16079: AND
16080: IFFALSE 16103
// strings = strings ^ [ #Am06-1 , 0 ] ;
16082: LD_ADDR_EXP 28
16086: PUSH
16087: LD_EXP 28
16091: PUSH
16092: LD_STRING #Am06-1
16094: PUSH
16095: LD_INT 0
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: ADD
16102: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16103: LD_ADDR_EXP 27
16107: PUSH
16108: LD_EXP 27
16112: PUSH
16113: LD_INT 35
16115: MINUS
16116: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16117: LD_ADDR_EXP 28
16121: PUSH
16122: LD_EXP 28
16126: PUSH
16127: LD_STRING #Am06-2
16129: PUSH
16130: LD_EXP 27
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: ADD
16139: ST_TO_ADDR
// display_strings = strings ;
16140: LD_ADDR_OWVAR 47
16144: PUSH
16145: LD_EXP 28
16149: ST_TO_ADDR
// end ; end_of_file
16150: PPOPN 3
16152: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16153: LD_INT 0
16155: PPUSH
16156: PPUSH
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
16161: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16162: LD_ADDR_VAR 0 3
16166: PUSH
16167: LD_INT 22
16169: PUSH
16170: LD_INT 1
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 2
16179: PUSH
16180: LD_INT 30
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 30
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL_OW 69
16213: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16214: LD_INT 35
16216: PPUSH
16217: CALL_OW 67
// until depot ;
16221: LD_VAR 0 3
16225: IFFALSE 16162
// repeat wait ( 0 0$1 ) ;
16227: LD_INT 35
16229: PPUSH
16230: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16234: LD_ADDR_VAR 0 4
16238: PUSH
16239: LD_INT 22
16241: PUSH
16242: LD_INT 1
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 91
16251: PUSH
16252: LD_VAR 0 3
16256: PUSH
16257: LD_INT 1
16259: ARRAY
16260: PUSH
16261: LD_INT 15
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: LD_INT 25
16284: PUSH
16285: LD_INT 1
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 25
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 25
16304: PUSH
16305: LD_INT 3
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 25
16314: PUSH
16315: LD_INT 4
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 3
16331: PUSH
16332: LD_INT 54
16334: PUSH
16335: EMPTY
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 3
16344: PUSH
16345: LD_INT 55
16347: PUSH
16348: EMPTY
16349: LIST
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PPUSH
16363: CALL_OW 69
16367: PUSH
16368: LD_EXP 2
16372: PUSH
16373: LD_EXP 3
16377: PUSH
16378: LD_EXP 4
16382: PUSH
16383: LD_EXP 5
16387: PUSH
16388: LD_EXP 7
16392: PUSH
16393: LD_EXP 8
16397: PUSH
16398: LD_EXP 9
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: PUSH
16412: LD_EXP 45
16416: ADD
16417: DIFF
16418: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16419: LD_VAR 0 4
16423: PUSH
16424: LD_INT 1
16426: PPUSH
16427: CALL_OW 463
16431: NOT
16432: AND
16433: IFFALSE 16227
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16435: LD_ADDR_VAR 0 4
16439: PUSH
16440: LD_VAR 0 4
16444: PUSH
16445: LD_INT 1
16447: PPUSH
16448: LD_VAR 0 4
16452: PPUSH
16453: CALL_OW 12
16457: ARRAY
16458: ST_TO_ADDR
// blockSpawn := 1 ;
16459: LD_ADDR_EXP 30
16463: PUSH
16464: LD_INT 1
16466: ST_TO_ADDR
// uc_side := 2 ;
16467: LD_ADDR_OWVAR 20
16471: PUSH
16472: LD_INT 2
16474: ST_TO_ADDR
// uc_nation := 2 ;
16475: LD_ADDR_OWVAR 21
16479: PUSH
16480: LD_INT 2
16482: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16483: LD_ADDR_EXP 20
16487: PUSH
16488: LD_STRING Kurt
16490: PPUSH
16491: LD_INT 0
16493: PPUSH
16494: LD_STRING 
16496: PPUSH
16497: CALL 41209 0 3
16501: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16502: LD_EXP 20
16506: PPUSH
16507: LD_VAR 0 4
16511: PPUSH
16512: CALL_OW 250
16516: PPUSH
16517: LD_VAR 0 4
16521: PPUSH
16522: CALL_OW 251
16526: PPUSH
16527: LD_INT 5
16529: PPUSH
16530: LD_INT 1
16532: PPUSH
16533: CALL_OW 50
// InGameOn ;
16537: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16541: LD_EXP 20
16545: PPUSH
16546: CALL_OW 87
// wait ( 0 0$2 ) ;
16550: LD_INT 70
16552: PPUSH
16553: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16557: LD_EXP 20
16561: PPUSH
16562: LD_VAR 0 4
16566: PPUSH
16567: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16571: LD_VAR 0 4
16575: PPUSH
16576: LD_EXP 20
16580: PPUSH
16581: CALL_OW 112
// wait ( 0 0$1 ) ;
16585: LD_INT 35
16587: PPUSH
16588: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16592: LD_VAR 0 4
16596: PPUSH
16597: LD_EXP 20
16601: PPUSH
16602: CALL_OW 119
// DialogueOn ;
16606: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16610: LD_EXP 20
16614: PPUSH
16615: LD_STRING D2-Kurt-1
16617: PPUSH
16618: CALL_OW 88
// if tmp = JMM then
16622: LD_VAR 0 4
16626: PUSH
16627: LD_EXP 1
16631: EQUAL
16632: IFFALSE 16724
// begin Say ( JMM , D2-JMM-1 ) ;
16634: LD_EXP 1
16638: PPUSH
16639: LD_STRING D2-JMM-1
16641: PPUSH
16642: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16646: LD_EXP 20
16650: PPUSH
16651: LD_STRING D2-Kurt-2
16653: PPUSH
16654: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16658: LD_EXP 1
16662: PPUSH
16663: LD_STRING D2-JMM-2
16665: PPUSH
16666: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16670: LD_EXP 20
16674: PPUSH
16675: LD_STRING D2-Kurt-3
16677: PPUSH
16678: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16682: LD_EXP 1
16686: PPUSH
16687: LD_STRING D2-JMM-3
16689: PPUSH
16690: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16694: LD_EXP 20
16698: PPUSH
16699: LD_STRING D2-Kurt-4
16701: PPUSH
16702: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16706: LD_EXP 1
16710: PPUSH
16711: LD_STRING D2-JMM-4
16713: PPUSH
16714: CALL_OW 88
// DialogueOff ;
16718: CALL_OW 7
// end else
16722: GO 16952
// begin if GetSex ( tmp ) = 1 then
16724: LD_VAR 0 4
16728: PPUSH
16729: CALL_OW 258
16733: PUSH
16734: LD_INT 1
16736: EQUAL
16737: IFFALSE 16753
// Say ( tmp , D2-Sol1-1 ) else
16739: LD_VAR 0 4
16743: PPUSH
16744: LD_STRING D2-Sol1-1
16746: PPUSH
16747: CALL_OW 88
16751: GO 16765
// Say ( tmp , D2-FSol1-1 ) ;
16753: LD_VAR 0 4
16757: PPUSH
16758: LD_STRING D2-FSol1-1
16760: PPUSH
16761: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16765: LD_EXP 20
16769: PPUSH
16770: LD_STRING D2-Kurt-2
16772: PPUSH
16773: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16777: LD_VAR 0 4
16781: PPUSH
16782: CALL_OW 258
16786: PUSH
16787: LD_INT 1
16789: EQUAL
16790: IFFALSE 16806
// Say ( tmp , D2-Sol1-2 ) else
16792: LD_VAR 0 4
16796: PPUSH
16797: LD_STRING D2-Sol1-2
16799: PPUSH
16800: CALL_OW 88
16804: GO 16818
// Say ( tmp , D2-FSol1-2 ) ;
16806: LD_VAR 0 4
16810: PPUSH
16811: LD_STRING D2-FSol1-2
16813: PPUSH
16814: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16818: LD_EXP 20
16822: PPUSH
16823: LD_STRING D2-Kurt-3
16825: PPUSH
16826: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16830: LD_VAR 0 4
16834: PPUSH
16835: CALL_OW 258
16839: PUSH
16840: LD_INT 1
16842: EQUAL
16843: IFFALSE 16859
// Say ( tmp , D2-Sol1-3 ) else
16845: LD_VAR 0 4
16849: PPUSH
16850: LD_STRING D2-Sol1-3
16852: PPUSH
16853: CALL_OW 88
16857: GO 16871
// Say ( tmp , D2-FSol1-3 ) ;
16859: LD_VAR 0 4
16863: PPUSH
16864: LD_STRING D2-FSol1-3
16866: PPUSH
16867: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16871: LD_EXP 20
16875: PPUSH
16876: LD_STRING D2-Kurt-4
16878: PPUSH
16879: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16883: LD_VAR 0 4
16887: PPUSH
16888: CALL_OW 258
16892: PUSH
16893: LD_INT 1
16895: EQUAL
16896: IFFALSE 16924
// begin Say ( tmp , D2-Sol1-4 ) ;
16898: LD_VAR 0 4
16902: PPUSH
16903: LD_STRING D2-Sol1-4
16905: PPUSH
16906: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16910: LD_VAR 0 4
16914: PPUSH
16915: LD_STRING D2-Sol1-5
16917: PPUSH
16918: CALL_OW 88
// end else
16922: GO 16948
// begin Say ( tmp , D2-FSol1-4 ) ;
16924: LD_VAR 0 4
16928: PPUSH
16929: LD_STRING D2-FSol1-4
16931: PPUSH
16932: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16936: LD_VAR 0 4
16940: PPUSH
16941: LD_STRING D2-FSol1-5
16943: PPUSH
16944: CALL_OW 88
// end ; DialogueOff ;
16948: CALL_OW 7
// end ; dec := ShowQuery1 ;
16952: LD_ADDR_VAR 0 6
16956: PUSH
16957: CALL 7307 0 0
16961: ST_TO_ADDR
// if dec = 1 then
16962: LD_VAR 0 6
16966: PUSH
16967: LD_INT 1
16969: EQUAL
16970: IFFALSE 17032
// begin DialogueOn ;
16972: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16976: LD_EXP 20
16980: PPUSH
16981: LD_STRING D2a-Kurt-1
16983: PPUSH
16984: CALL_OW 88
// DialogueOff ;
16988: CALL_OW 7
// InGameOff ;
16992: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16996: LD_INT 1
16998: PPUSH
16999: LD_INT 2
17001: PPUSH
17002: LD_INT 2
17004: PPUSH
17005: LD_INT 1
17007: PPUSH
17008: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17012: LD_EXP 20
17016: PPUSH
17017: LD_INT 8
17019: PPUSH
17020: CALL_OW 113
// readyToEscape := 1 ;
17024: LD_ADDR_EXP 22
17028: PUSH
17029: LD_INT 1
17031: ST_TO_ADDR
// end ; if dec = 2 then
17032: LD_VAR 0 6
17036: PUSH
17037: LD_INT 2
17039: EQUAL
17040: IFFALSE 17508
// begin DialogueOn ;
17042: CALL_OW 6
// if tmp = JMM then
17046: LD_VAR 0 4
17050: PUSH
17051: LD_EXP 1
17055: EQUAL
17056: IFFALSE 17112
// begin Say ( JMM , D2b-JMM-1 ) ;
17058: LD_EXP 1
17062: PPUSH
17063: LD_STRING D2b-JMM-1
17065: PPUSH
17066: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17070: LD_EXP 20
17074: PPUSH
17075: LD_STRING D2b-Kurt-1
17077: PPUSH
17078: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17082: LD_EXP 1
17086: PPUSH
17087: LD_STRING D2b-JMM-2
17089: PPUSH
17090: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17094: LD_EXP 20
17098: PPUSH
17099: LD_STRING D2b-Kurt-2
17101: PPUSH
17102: CALL_OW 88
// DialogueOff ;
17106: CALL_OW 7
// end else
17110: GO 17263
// begin if GetSex ( tmp ) = 1 then
17112: LD_VAR 0 4
17116: PPUSH
17117: CALL_OW 258
17121: PUSH
17122: LD_INT 1
17124: EQUAL
17125: IFFALSE 17141
// Say ( tmp , D2b-Sol1-1 ) else
17127: LD_VAR 0 4
17131: PPUSH
17132: LD_STRING D2b-Sol1-1
17134: PPUSH
17135: CALL_OW 88
17139: GO 17153
// Say ( tmp , D2b-FSol1-1 ) ;
17141: LD_VAR 0 4
17145: PPUSH
17146: LD_STRING D2b-FSol1-1
17148: PPUSH
17149: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17153: LD_EXP 20
17157: PPUSH
17158: LD_STRING D2b-Kurt-1
17160: PPUSH
17161: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17165: LD_VAR 0 4
17169: PPUSH
17170: CALL_OW 258
17174: PUSH
17175: LD_INT 1
17177: EQUAL
17178: IFFALSE 17194
// Say ( tmp , D2b-Sol1-2 ) else
17180: LD_VAR 0 4
17184: PPUSH
17185: LD_STRING D2b-Sol1-2
17187: PPUSH
17188: CALL_OW 88
17192: GO 17206
// Say ( tmp , D2b-FSol1-2 ) ;
17194: LD_VAR 0 4
17198: PPUSH
17199: LD_STRING D2b-FSol1-2
17201: PPUSH
17202: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17206: LD_EXP 20
17210: PPUSH
17211: LD_STRING D2b-Kurt-2
17213: PPUSH
17214: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17218: LD_VAR 0 4
17222: PPUSH
17223: CALL_OW 258
17227: PUSH
17228: LD_INT 1
17230: EQUAL
17231: IFFALSE 17247
// Say ( tmp , D2c-Sol1-2 ) else
17233: LD_VAR 0 4
17237: PPUSH
17238: LD_STRING D2c-Sol1-2
17240: PPUSH
17241: CALL_OW 88
17245: GO 17259
// Say ( tmp , D2c-FSol1-2 ) ;
17247: LD_VAR 0 4
17251: PPUSH
17252: LD_STRING D2c-FSol1-2
17254: PPUSH
17255: CALL_OW 88
// DialogueOff ;
17259: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17263: LD_ADDR_VAR 0 7
17267: PUSH
17268: CALL 7328 0 0
17272: ST_TO_ADDR
// if dec2 = 1 then
17273: LD_VAR 0 7
17277: PUSH
17278: LD_INT 1
17280: EQUAL
17281: IFFALSE 17343
// begin DialogueOn ;
17283: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17287: LD_EXP 20
17291: PPUSH
17292: LD_STRING D2a-Kurt-1
17294: PPUSH
17295: CALL_OW 88
// DialogueOff ;
17299: CALL_OW 7
// InGameOff ;
17303: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17307: LD_INT 1
17309: PPUSH
17310: LD_INT 2
17312: PPUSH
17313: LD_INT 2
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17323: LD_EXP 20
17327: PPUSH
17328: LD_INT 8
17330: PPUSH
17331: CALL_OW 113
// readyToEscape := 1 ;
17335: LD_ADDR_EXP 22
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
// end ; if dec2 = 2 then
17343: LD_VAR 0 7
17347: PUSH
17348: LD_INT 2
17350: EQUAL
17351: IFFALSE 17508
// begin if tmp = JMM then
17353: LD_VAR 0 4
17357: PUSH
17358: LD_EXP 1
17362: EQUAL
17363: IFFALSE 17423
// begin DialogueOn ;
17365: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17369: LD_EXP 1
17373: PPUSH
17374: LD_STRING D2c-JMM-1
17376: PPUSH
17377: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17381: LD_EXP 20
17385: PPUSH
17386: LD_STRING D2c-Kurt-1
17388: PPUSH
17389: CALL_OW 88
// DialogueOff ;
17393: CALL_OW 7
// InGameOff ;
17397: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17401: LD_EXP 20
17405: PPUSH
17406: LD_INT 8
17408: PPUSH
17409: CALL_OW 113
// readyToEscape := 1 ;
17413: LD_ADDR_EXP 22
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// end else
17421: GO 17508
// begin DialogueOn ;
17423: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17427: LD_VAR 0 4
17431: PPUSH
17432: CALL_OW 258
17436: PUSH
17437: LD_INT 1
17439: EQUAL
17440: IFFALSE 17456
// Say ( tmp , D2c-Sol1-1 ) else
17442: LD_VAR 0 4
17446: PPUSH
17447: LD_STRING D2c-Sol1-1
17449: PPUSH
17450: CALL_OW 88
17454: GO 17468
// Say ( tmp , D2c-FSol1-1 ) ;
17456: LD_VAR 0 4
17460: PPUSH
17461: LD_STRING D2c-FSol1-1
17463: PPUSH
17464: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17468: LD_EXP 20
17472: PPUSH
17473: LD_STRING D2c-Kurt-1
17475: PPUSH
17476: CALL_OW 88
// DialogueOff ;
17480: CALL_OW 7
// InGameOff ;
17484: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17488: LD_EXP 20
17492: PPUSH
17493: LD_INT 8
17495: PPUSH
17496: CALL_OW 113
// readyToEscape := 1 ;
17500: LD_ADDR_EXP 22
17504: PUSH
17505: LD_INT 1
17507: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17508: LD_VAR 0 6
17512: PUSH
17513: LD_INT 3
17515: EQUAL
17516: IFFALSE 17677
// begin DialogueOn ;
17518: CALL_OW 6
// if tmp = JMM then
17522: LD_VAR 0 4
17526: PUSH
17527: LD_EXP 1
17531: EQUAL
17532: IFFALSE 17592
// begin DialogueOn ;
17534: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17538: LD_EXP 1
17542: PPUSH
17543: LD_STRING D2c-JMM-1
17545: PPUSH
17546: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17550: LD_EXP 20
17554: PPUSH
17555: LD_STRING D2c-Kurt-1
17557: PPUSH
17558: CALL_OW 88
// DialogueOff ;
17562: CALL_OW 7
// InGameOff ;
17566: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17570: LD_EXP 20
17574: PPUSH
17575: LD_INT 8
17577: PPUSH
17578: CALL_OW 113
// readyToEscape := 1 ;
17582: LD_ADDR_EXP 22
17586: PUSH
17587: LD_INT 1
17589: ST_TO_ADDR
// end else
17590: GO 17677
// begin DialogueOn ;
17592: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17596: LD_VAR 0 4
17600: PPUSH
17601: CALL_OW 258
17605: PUSH
17606: LD_INT 1
17608: EQUAL
17609: IFFALSE 17625
// Say ( tmp , D2c-Sol1-1 ) else
17611: LD_VAR 0 4
17615: PPUSH
17616: LD_STRING D2c-Sol1-1
17618: PPUSH
17619: CALL_OW 88
17623: GO 17637
// Say ( tmp , D2c-FSol1-1 ) ;
17625: LD_VAR 0 4
17629: PPUSH
17630: LD_STRING D2c-FSol1-1
17632: PPUSH
17633: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17637: LD_EXP 20
17641: PPUSH
17642: LD_STRING D2c-Kurt-1
17644: PPUSH
17645: CALL_OW 88
// DialogueOff ;
17649: CALL_OW 7
// InGameOff ;
17653: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17657: LD_EXP 20
17661: PPUSH
17662: LD_INT 8
17664: PPUSH
17665: CALL_OW 113
// readyToEscape := 1 ;
17669: LD_ADDR_EXP 22
17673: PUSH
17674: LD_INT 1
17676: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17677: LD_ADDR_EXP 30
17681: PUSH
17682: LD_INT 0
17684: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17685: LD_INT 35
17687: PPUSH
17688: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17692: LD_EXP 20
17696: PPUSH
17697: LD_INT 8
17699: PPUSH
17700: CALL_OW 308
17704: PUSH
17705: LD_EXP 22
17709: AND
17710: PUSH
17711: LD_EXP 20
17715: PPUSH
17716: CALL_OW 301
17720: OR
17721: IFFALSE 17685
// if IsDead ( Kurt ) then
17723: LD_EXP 20
17727: PPUSH
17728: CALL_OW 301
17732: IFFALSE 17736
// exit ;
17734: GO 17791
// RemoveUnit ( Kurt ) ;
17736: LD_EXP 20
17740: PPUSH
17741: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17745: LD_EXP 20
17749: PPUSH
17750: LD_STRING Kurt
17752: PPUSH
17753: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17757: LD_INT 1
17759: PPUSH
17760: LD_INT 2
17762: PPUSH
17763: CALL_OW 81
17767: PUSH
17768: LD_INT 0
17770: EQUAL
17771: IFFALSE 17783
// kurtStatus = 1 else
17773: LD_ADDR_EXP 21
17777: PUSH
17778: LD_INT 1
17780: ST_TO_ADDR
17781: GO 17791
// kurtStatus = 2 ;
17783: LD_ADDR_EXP 21
17787: PUSH
17788: LD_INT 2
17790: ST_TO_ADDR
// end ; end_of_file
17791: LD_VAR 0 1
17795: RET
// every 0 0$2 do
17796: GO 17798
17798: DISABLE
// begin enable ;
17799: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17800: LD_INT 3
17802: PPUSH
17803: LD_INT 2
17805: PPUSH
17806: LD_INT 10
17808: PPUSH
17809: LD_EXP 32
17813: PPUSH
17814: CALL 7759 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17818: LD_INT 3
17820: PPUSH
17821: LD_INT 12
17823: PPUSH
17824: LD_EXP 32
17828: PPUSH
17829: CALL 9362 0 3
// if disableHealAI = 0 then
17833: LD_EXP 34
17837: PUSH
17838: LD_INT 0
17840: EQUAL
17841: IFFALSE 17862
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17843: LD_INT 3
17845: PPUSH
17846: LD_INT 9
17848: PPUSH
17849: LD_INT 10
17851: PPUSH
17852: LD_INT 32
17854: PUSH
17855: EMPTY
17856: LIST
17857: PPUSH
17858: CALL 8126 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17862: LD_INT 3
17864: PPUSH
17865: LD_INT 51
17867: PPUSH
17868: LD_INT 6
17870: PPUSH
17871: CALL 8815 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17875: LD_INT 2
17877: PPUSH
17878: CALL_OW 303
17882: PUSH
17883: LD_INT 2
17885: PPUSH
17886: CALL_OW 255
17890: PUSH
17891: LD_INT 1
17893: EQUAL
17894: OR
17895: IFFALSE 17909
// DefendDepot ( 3 , rudepo ) else
17897: LD_INT 3
17899: PPUSH
17900: LD_INT 2
17902: PPUSH
17903: CALL 8642 0 2
17907: GO 17919
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17909: LD_INT 3
17911: PPUSH
17912: LD_INT 10
17914: PPUSH
17915: CALL 8933 0 2
// end ;
17919: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17920: LD_INT 22
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 21
17932: PUSH
17933: LD_INT 2
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 55
17942: PUSH
17943: EMPTY
17944: LIST
17945: PUSH
17946: LD_INT 3
17948: PUSH
17949: LD_INT 34
17951: PUSH
17952: LD_INT 51
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: PUSH
17974: LD_INT 0
17976: EQUAL
17977: PUSH
17978: LD_INT 21
17980: PPUSH
17981: CALL_OW 255
17985: PUSH
17986: LD_INT 3
17988: EQUAL
17989: AND
17990: PUSH
17991: LD_INT 21
17993: PPUSH
17994: CALL_OW 302
17998: AND
17999: PUSH
18000: LD_INT 2
18002: PPUSH
18003: CALL_OW 255
18007: PUSH
18008: LD_INT 3
18010: EQUAL
18011: AND
18012: PUSH
18013: LD_INT 2
18015: PPUSH
18016: CALL_OW 302
18020: AND
18021: PUSH
18022: LD_INT 21
18024: PPUSH
18025: CALL_OW 313
18029: AND
18030: PUSH
18031: LD_EXP 48
18035: PUSH
18036: LD_INT 4
18038: PUSH
18039: LD_INT 5
18041: PUSH
18042: LD_INT 6
18044: PUSH
18045: LD_INT 6
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: PUSH
18054: LD_OWVAR 67
18058: ARRAY
18059: LESS
18060: AND
18061: IFFALSE 18282
18063: GO 18065
18065: DISABLE
// begin enable ;
18066: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18067: LD_INT 2
18069: PPUSH
18070: CALL_OW 274
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: LD_INT 2000
18080: PPUSH
18081: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18085: LD_INT 3
18087: PPUSH
18088: LD_INT 21
18090: PPUSH
18091: LD_INT 4
18093: PUSH
18094: LD_INT 5
18096: PUSH
18097: LD_INT 6
18099: PUSH
18100: LD_INT 6
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: PUSH
18109: LD_OWVAR 67
18113: ARRAY
18114: PUSH
18115: LD_EXP 48
18119: MINUS
18120: PPUSH
18121: LD_INT 43
18123: PUSH
18124: LD_INT 43
18126: PUSH
18127: LD_INT 44
18129: PUSH
18130: LD_INT 44
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 43
18141: PUSH
18142: LD_INT 43
18144: PUSH
18145: LD_INT 43
18147: PUSH
18148: LD_INT 44
18150: PUSH
18151: LD_INT 44
18153: PUSH
18154: LD_INT 46
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 43
18167: PUSH
18168: LD_INT 43
18170: PUSH
18171: LD_INT 43
18173: PUSH
18174: LD_INT 44
18176: PUSH
18177: LD_INT 44
18179: PUSH
18180: LD_INT 46
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 43
18193: PUSH
18194: LD_INT 43
18196: PUSH
18197: LD_INT 44
18199: PUSH
18200: LD_INT 46
18202: PUSH
18203: LD_INT 46
18205: PUSH
18206: LD_INT 46
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: PUSH
18223: LD_OWVAR 67
18227: ARRAY
18228: PPUSH
18229: LD_INT 1
18231: PPUSH
18232: LD_INT 1
18234: PPUSH
18235: LD_INT 22
18237: PUSH
18238: LD_INT 22
18240: PUSH
18241: LD_INT 24
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 1
18250: PPUSH
18251: LD_INT 2
18253: PPUSH
18254: CALL_OW 12
18258: ARRAY
18259: PUSH
18260: LD_INT 24
18262: PUSH
18263: LD_INT 24
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PUSH
18272: LD_OWVAR 67
18276: ARRAY
18277: PPUSH
18278: CALL 7605 0 7
// end ;
18282: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18283: LD_INT 17
18285: PPUSH
18286: CALL_OW 255
18290: PUSH
18291: LD_INT 3
18293: EQUAL
18294: PUSH
18295: LD_INT 17
18297: PPUSH
18298: CALL_OW 302
18302: AND
18303: PUSH
18304: LD_INT 2
18306: PPUSH
18307: CALL_OW 255
18311: PUSH
18312: LD_INT 3
18314: EQUAL
18315: AND
18316: PUSH
18317: LD_INT 2
18319: PPUSH
18320: CALL_OW 302
18324: AND
18325: PUSH
18326: LD_EXP 48
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: LD_INT 5
18336: PUSH
18337: LD_INT 6
18339: PUSH
18340: LD_INT 7
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: PUSH
18349: LD_OWVAR 67
18353: ARRAY
18354: LESS
18355: AND
18356: IFFALSE 18404
18358: GO 18360
18360: DISABLE
// begin enable ;
18361: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18362: LD_INT 17
18364: PPUSH
18365: LD_INT 22
18367: PPUSH
18368: LD_INT 1
18370: PPUSH
18371: LD_INT 1
18373: PPUSH
18374: LD_INT 42
18376: PUSH
18377: LD_INT 43
18379: PUSH
18380: LD_INT 44
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 1
18390: PPUSH
18391: LD_INT 3
18393: PPUSH
18394: CALL_OW 12
18398: ARRAY
18399: PPUSH
18400: CALL_OW 185
// end ;
18404: END
// every 2 2$0 do var i , j ;
18405: GO 18407
18407: DISABLE
18408: LD_INT 0
18410: PPUSH
18411: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18412: LD_INT 14700
18414: PUSH
18415: LD_INT 33600
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: PPUSH
18425: LD_INT 2
18427: PPUSH
18428: CALL_OW 12
18432: ARRAY
18433: PPUSH
18434: CALL_OW 67
// disableHealAI = 1 ;
18438: LD_ADDR_EXP 34
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18446: LD_ADDR_VAR 0 1
18450: PUSH
18451: LD_INT 22
18453: PUSH
18454: LD_INT 3
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 4
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: PUSH
18480: FOR_IN
18481: IFFALSE 18494
// ComExitBuilding ( i ) ;
18483: LD_VAR 0 1
18487: PPUSH
18488: CALL_OW 122
18492: GO 18480
18494: POP
18495: POP
// wait ( 0 0$1 ) ;
18496: LD_INT 35
18498: PPUSH
18499: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18503: LD_INT 35
18505: PPUSH
18506: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18510: LD_ADDR_VAR 0 1
18514: PUSH
18515: LD_INT 22
18517: PUSH
18518: LD_INT 3
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 25
18527: PUSH
18528: LD_INT 4
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PPUSH
18539: CALL_OW 69
18543: PUSH
18544: FOR_IN
18545: IFFALSE 18622
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18547: LD_ADDR_VAR 0 2
18551: PUSH
18552: LD_INT 17
18554: PPUSH
18555: LD_INT 22
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 25
18567: PUSH
18568: LD_INT 12
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PPUSH
18579: CALL_OW 70
18583: PUSH
18584: FOR_IN
18585: IFFALSE 18618
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18587: LD_VAR 0 1
18591: PPUSH
18592: LD_VAR 0 2
18596: PPUSH
18597: CALL_OW 250
18601: PPUSH
18602: LD_VAR 0 2
18606: PPUSH
18607: CALL_OW 251
18611: PPUSH
18612: CALL_OW 191
18616: GO 18584
18618: POP
18619: POP
18620: GO 18544
18622: POP
18623: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18624: LD_INT 22
18626: PUSH
18627: LD_INT 3
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 25
18636: PUSH
18637: LD_INT 4
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PPUSH
18648: CALL_OW 69
18652: PUSH
18653: LD_INT 0
18655: EQUAL
18656: PUSH
18657: LD_EXP 33
18661: PUSH
18662: LD_INT 6
18664: PUSH
18665: LD_INT 7
18667: PUSH
18668: LD_INT 8
18670: PUSH
18671: LD_INT 8
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: PUSH
18680: LD_OWVAR 67
18684: ARRAY
18685: GREATEREQUAL
18686: OR
18687: PUSH
18688: LD_INT 17
18690: PPUSH
18691: LD_INT 22
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 25
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 70
18719: PUSH
18720: LD_INT 0
18722: EQUAL
18723: OR
18724: IFFALSE 18503
// disableHealAI = 0 ;
18726: LD_ADDR_EXP 34
18730: PUSH
18731: LD_INT 0
18733: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18734: LD_ADDR_VAR 0 1
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 3
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 25
18751: PUSH
18752: LD_INT 12
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 69
18767: PUSH
18768: FOR_IN
18769: IFFALSE 18785
// SetClass ( i , 16 ) ;
18771: LD_VAR 0 1
18775: PPUSH
18776: LD_INT 16
18778: PPUSH
18779: CALL_OW 336
18783: GO 18768
18785: POP
18786: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18787: LD_ADDR_VAR 0 1
18791: PUSH
18792: LD_INT 22
18794: PUSH
18795: LD_INT 3
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 25
18804: PUSH
18805: LD_INT 4
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PPUSH
18816: CALL_OW 69
18820: PUSH
18821: FOR_IN
18822: IFFALSE 18838
// ComEnterUnit ( i , rulab ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_INT 32
18831: PPUSH
18832: CALL_OW 120
18836: GO 18821
18838: POP
18839: POP
// end ; end_of_file
18840: PPOPN 2
18842: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18843: LD_EXP 27
18847: PUSH
18848: LD_INT 0
18850: LESSEQUAL
18851: IFFALSE 19005
18853: GO 18855
18855: DISABLE
18856: LD_INT 0
18858: PPUSH
18859: PPUSH
18860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18861: LD_ADDR_VAR 0 2
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 21
18878: PUSH
18879: LD_INT 3
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: LD_INT 30
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 30
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 69
18923: ST_TO_ADDR
// for i in tmp do
18924: LD_ADDR_VAR 0 1
18928: PUSH
18929: LD_VAR 0 2
18933: PUSH
18934: FOR_IN
18935: IFFALSE 18968
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_VAR 0 3
18946: PUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 274
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: CALL_OW 275
18964: PLUS
18965: ST_TO_ADDR
18966: GO 18934
18968: POP
18969: POP
// if yourCrates >= needCrates then
18970: LD_VAR 0 3
18974: PUSH
18975: LD_EXP 26
18979: GREATEREQUAL
18980: IFFALSE 18998
// FinishMission ( yourCrates , needCrates ) else
18982: LD_VAR 0 3
18986: PPUSH
18987: LD_EXP 26
18991: PPUSH
18992: CALL 19008 0 2
18996: GO 19005
// YouLost ( matmin ) ;
18998: LD_STRING matmin
19000: PPUSH
19001: CALL_OW 104
// end ;
19005: PPOPN 3
19007: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19008: LD_INT 0
19010: PPUSH
19011: PPUSH
19012: PPUSH
19013: PPUSH
// if killCounter = 0 then
19014: LD_EXP 46
19018: PUSH
19019: LD_INT 0
19021: EQUAL
19022: IFFALSE 19031
// SetAchievement ( ACH_SURV ) ;
19024: LD_STRING ACH_SURV
19026: PPUSH
19027: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19031: LD_INT 22
19033: PUSH
19034: LD_INT 3
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 21
19043: PUSH
19044: LD_INT 3
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PPUSH
19055: CALL_OW 69
19059: PUSH
19060: LD_INT 0
19062: EQUAL
19063: IFFALSE 19079
// begin wait ( 3 ) ;
19065: LD_INT 3
19067: PPUSH
19068: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19072: LD_STRING ACH_BASEDESTROYER
19074: PPUSH
19075: CALL_OW 543
// end ; m1 := false ;
19079: LD_ADDR_VAR 0 4
19083: PUSH
19084: LD_INT 0
19086: ST_TO_ADDR
// m2 := false ;
19087: LD_ADDR_VAR 0 5
19091: PUSH
19092: LD_INT 0
19094: ST_TO_ADDR
// m3 := false ;
19095: LD_ADDR_VAR 0 6
19099: PUSH
19100: LD_INT 0
19102: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19103: LD_VAR 0 1
19107: PUSH
19108: LD_INT 100
19110: PUSH
19111: LD_INT 140
19113: PUSH
19114: LD_INT 180
19116: PUSH
19117: LD_INT 220
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: PUSH
19126: LD_OWVAR 67
19130: ARRAY
19131: PLUS
19132: PUSH
19133: LD_VAR 0 2
19137: GREATER
19138: IFFALSE 19170
// begin AddMedal ( cans , 1 ) ;
19140: LD_STRING cans
19142: PPUSH
19143: LD_INT 1
19145: PPUSH
19146: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19150: LD_INT 1
19152: PPUSH
19153: LD_STRING 06_crates_1
19155: PPUSH
19156: CALL_OW 39
// m1 := true ;
19160: LD_ADDR_VAR 0 4
19164: PUSH
19165: LD_INT 1
19167: ST_TO_ADDR
// end else
19168: GO 19191
// begin AddMedal ( cans , - 1 ) ;
19170: LD_STRING cans
19172: PPUSH
19173: LD_INT 1
19175: NEG
19176: PPUSH
19177: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19181: LD_INT 0
19183: PPUSH
19184: LD_STRING 06_crates_1
19186: PPUSH
19187: CALL_OW 39
// end ; if unitLost < 3 then
19191: LD_EXP 31
19195: PUSH
19196: LD_INT 3
19198: LESS
19199: IFFALSE 19221
// begin AddMedal ( people , 1 ) ;
19201: LD_STRING people
19203: PPUSH
19204: LD_INT 1
19206: PPUSH
19207: CALL_OW 101
// m2 := true ;
19211: LD_ADDR_VAR 0 5
19215: PUSH
19216: LD_INT 1
19218: ST_TO_ADDR
// end else
19219: GO 19232
// AddMedal ( people , - 1 ) ;
19221: LD_STRING people
19223: PPUSH
19224: LD_INT 1
19226: NEG
19227: PPUSH
19228: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19232: LD_EXP 29
19236: PPUSH
19237: LD_STRING 06_remoteVehs_1
19239: PPUSH
19240: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19244: LD_EXP 29
19248: PUSH
19249: LD_INT 1
19251: EQUAL
19252: IFFALSE 19274
// begin AddMedal ( remote , 1 ) ;
19254: LD_STRING remote
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: CALL_OW 101
// m3 := true ;
19264: LD_ADDR_VAR 0 6
19268: PUSH
19269: LD_INT 1
19271: ST_TO_ADDR
// end else
19272: GO 19314
// begin if GetTech ( 18 , 1 ) = state_enabled then
19274: LD_INT 18
19276: PPUSH
19277: LD_INT 1
19279: PPUSH
19280: CALL_OW 321
19284: PUSH
19285: LD_INT 1
19287: EQUAL
19288: IFFALSE 19303
// AddMedal ( remote , - 1 ) else
19290: LD_STRING remote
19292: PPUSH
19293: LD_INT 1
19295: NEG
19296: PPUSH
19297: CALL_OW 101
19301: GO 19314
// AddMedal ( remote , - 2 ) ;
19303: LD_STRING remote
19305: PPUSH
19306: LD_INT 2
19308: NEG
19309: PPUSH
19310: CALL_OW 101
// end ; if m1 and m2 and m3 then
19314: LD_VAR 0 4
19318: PUSH
19319: LD_VAR 0 5
19323: AND
19324: PUSH
19325: LD_VAR 0 6
19329: AND
19330: IFFALSE 19346
// begin wait ( 3 ) ;
19332: LD_INT 3
19334: PPUSH
19335: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19339: LD_STRING ACH_ASPEED_6
19341: PPUSH
19342: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19346: LD_OWVAR 67
19350: PUSH
19351: LD_INT 3
19353: GREATEREQUAL
19354: PUSH
19355: LD_VAR 0 4
19359: AND
19360: PUSH
19361: LD_VAR 0 5
19365: AND
19366: PUSH
19367: LD_VAR 0 6
19371: AND
19372: IFFALSE 19384
// SetAchievementEX ( ACH_AMER , 6 ) ;
19374: LD_STRING ACH_AMER
19376: PPUSH
19377: LD_INT 6
19379: PPUSH
19380: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19384: LD_EXP 21
19388: PPUSH
19389: LD_STRING 06_KurtStatus_1
19391: PPUSH
19392: CALL_OW 39
// GiveMedals ( Main ) ;
19396: LD_STRING Main
19398: PPUSH
19399: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19403: LD_INT 22
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 21
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 50
19425: PUSH
19426: EMPTY
19427: LIST
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: LD_INT 25
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 25
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 25
19454: PUSH
19455: LD_INT 3
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 25
19464: PUSH
19465: LD_INT 4
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 69
19489: PPUSH
19490: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19494: LD_EXP 1
19498: PPUSH
19499: LD_EXP 43
19503: PUSH
19504: LD_STRING JMM
19506: STR
19507: PPUSH
19508: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19512: LD_EXP 2
19516: PPUSH
19517: LD_EXP 43
19521: PUSH
19522: LD_STRING Lisa
19524: STR
19525: PPUSH
19526: CALL 6920 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19530: LD_EXP 3
19534: PPUSH
19535: LD_EXP 43
19539: PUSH
19540: LD_STRING Bobby
19542: STR
19543: PPUSH
19544: CALL 6920 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19548: LD_EXP 4
19552: PPUSH
19553: LD_EXP 43
19557: PUSH
19558: LD_STRING Cyrus
19560: STR
19561: PPUSH
19562: CALL 6920 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19566: LD_EXP 5
19570: PPUSH
19571: LD_EXP 43
19575: PUSH
19576: LD_STRING Frank
19578: STR
19579: PPUSH
19580: CALL 6920 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19584: LD_EXP 6
19588: PPUSH
19589: LD_EXP 43
19593: PUSH
19594: LD_STRING Brown
19596: STR
19597: PPUSH
19598: CALL 6920 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19602: LD_EXP 7
19606: PPUSH
19607: LD_EXP 43
19611: PUSH
19612: LD_STRING Donaldson
19614: STR
19615: PPUSH
19616: CALL 6920 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19620: LD_EXP 8
19624: PPUSH
19625: LD_EXP 43
19629: PUSH
19630: LD_STRING Gladstone
19632: STR
19633: PPUSH
19634: CALL 6920 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19638: LD_EXP 9
19642: PPUSH
19643: LD_EXP 43
19647: PUSH
19648: LD_STRING Denis
19650: STR
19651: PPUSH
19652: CALL 6920 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19656: LD_EXP 16
19660: PPUSH
19661: LD_EXP 43
19665: PUSH
19666: LD_STRING Joan
19668: STR
19669: PPUSH
19670: CALL 6920 0 2
// if IsLive ( Mike ) then
19674: LD_EXP 11
19678: PPUSH
19679: CALL_OW 300
19683: IFFALSE 19703
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
19685: LD_EXP 11
19689: PPUSH
19690: LD_EXP 43
19694: PUSH
19695: LD_STRING Mike
19697: STR
19698: PPUSH
19699: CALL_OW 38
// if IsLive ( Joan ) then
19703: LD_EXP 16
19707: PPUSH
19708: CALL_OW 300
19712: IFFALSE 19726
// SaveCharacters ( Joan , Joan ) ;
19714: LD_EXP 16
19718: PPUSH
19719: LD_STRING Joan
19721: PPUSH
19722: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19726: LD_EXP 17
19730: PPUSH
19731: LD_STRING 06_JoanStatus_1
19733: PPUSH
19734: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19738: LD_INT 50
19740: PUSH
19741: EMPTY
19742: LIST
19743: PUSH
19744: LD_INT 22
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 21
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: LD_INT 25
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 25
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 25
19789: PUSH
19790: LD_INT 3
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 25
19799: PUSH
19800: LD_INT 4
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: PPUSH
19820: CALL_OW 69
19824: PUSH
19825: LD_EXP 1
19829: PUSH
19830: LD_EXP 2
19834: PUSH
19835: LD_EXP 3
19839: PUSH
19840: LD_EXP 4
19844: PUSH
19845: LD_EXP 5
19849: PUSH
19850: LD_EXP 6
19854: PUSH
19855: LD_EXP 7
19859: PUSH
19860: LD_EXP 8
19864: PUSH
19865: LD_EXP 9
19869: PUSH
19870: LD_EXP 16
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: DIFF
19887: PPUSH
19888: LD_STRING 06_other_survivors
19890: PPUSH
19891: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19895: LD_INT 50
19897: PUSH
19898: EMPTY
19899: LIST
19900: PUSH
19901: LD_INT 22
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 21
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 25
19926: PUSH
19927: LD_INT 12
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 25
19936: PUSH
19937: LD_INT 16
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: PPUSH
19955: CALL_OW 69
19959: PPUSH
19960: LD_STRING 06_other_apemans
19962: PPUSH
19963: CALL_OW 38
// YouWin ;
19967: CALL_OW 103
// end ; end_of_file
19971: LD_VAR 0 3
19975: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19976: LD_EXP 48
19980: PUSH
19981: LD_OWVAR 1
19985: PUSH
19986: LD_INT 23100
19988: PUSH
19989: LD_INT 21000
19991: PUSH
19992: LD_INT 18900
19994: PUSH
19995: LD_INT 16800
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: PUSH
20004: LD_OWVAR 67
20008: ARRAY
20009: GREATER
20010: AND
20011: IFFALSE 20358
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
20019: PPUSH
20020: PPUSH
20021: PPUSH
// begin enable ;
20022: ENABLE
// for i in ruAttackers do
20023: LD_ADDR_VAR 0 1
20027: PUSH
20028: LD_EXP 48
20032: PUSH
20033: FOR_IN
20034: IFFALSE 20356
// begin if not IsDrivenBy ( i ) then
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 311
20045: NOT
20046: IFFALSE 20050
// continue ;
20048: GO 20033
// if i mod 2 = 0 then
20050: LD_VAR 0 1
20054: PUSH
20055: LD_INT 2
20057: MOD
20058: PUSH
20059: LD_INT 0
20061: EQUAL
20062: IFFALSE 20117
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20064: LD_ADDR_VAR 0 3
20068: PUSH
20069: LD_INT 91
20071: PUSH
20072: LD_INT 52
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 82
20081: PUSH
20082: LD_INT 34
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 90
20091: PUSH
20092: LD_INT 26
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 86
20101: PUSH
20102: LD_INT 16
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: ST_TO_ADDR
20115: GO 20212
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20117: LD_ADDR_VAR 0 3
20121: PUSH
20122: LD_INT 91
20124: PUSH
20125: LD_INT 52
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 68
20134: PUSH
20135: LD_INT 46
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 48
20144: PUSH
20145: LD_INT 43
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 44
20154: PUSH
20155: LD_INT 42
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 33
20164: PUSH
20165: LD_INT 34
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 29
20174: PUSH
20175: LD_INT 23
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 30
20184: PUSH
20185: LD_INT 19
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 38
20194: PUSH
20195: LD_INT 16
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20212: LD_VAR 0 1
20216: PPUSH
20217: CALL_OW 256
20221: PUSH
20222: LD_INT 1000
20224: EQUAL
20225: IFFALSE 20243
// AgressiveMove ( i , path ) else
20227: LD_VAR 0 1
20231: PPUSH
20232: LD_VAR 0 3
20236: PPUSH
20237: CALL 81281 0 2
20241: GO 20354
// if GetLives ( i ) < 650 then
20243: LD_VAR 0 1
20247: PPUSH
20248: CALL_OW 256
20252: PUSH
20253: LD_INT 650
20255: LESS
20256: IFFALSE 20354
// begin if not IsInArea ( i , russianRepairArea ) then
20258: LD_VAR 0 1
20262: PPUSH
20263: LD_INT 12
20265: PPUSH
20266: CALL_OW 308
20270: NOT
20271: IFFALSE 20340
// begin SetTag ( i , 0 ) ;
20273: LD_VAR 0 1
20277: PPUSH
20278: LD_INT 0
20280: PPUSH
20281: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 261
20294: PUSH
20295: LD_INT 50
20297: LESS
20298: PUSH
20299: LD_INT 21
20301: PPUSH
20302: CALL_OW 302
20306: AND
20307: IFFALSE 20323
// ComMoveUnit ( i , rufab ) else
20309: LD_VAR 0 1
20313: PPUSH
20314: LD_INT 21
20316: PPUSH
20317: CALL_OW 112
20321: GO 20338
// ComMoveXY ( i , 121 , 99 ) ;
20323: LD_VAR 0 1
20327: PPUSH
20328: LD_INT 121
20330: PPUSH
20331: LD_INT 99
20333: PPUSH
20334: CALL_OW 111
// end else
20338: GO 20354
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20340: LD_VAR 0 1
20344: PPUSH
20345: CALL_OW 311
20349: PPUSH
20350: CALL 80377 0 1
// end ; end ;
20354: GO 20033
20356: POP
20357: POP
// end ;
20358: PPOPN 4
20360: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20361: LD_INT 0
20363: PPUSH
20364: PPUSH
20365: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20366: LD_ADDR_VAR 0 2
20370: PUSH
20371: DOUBLE
20372: LD_INT 1
20374: DEC
20375: ST_TO_ADDR
20376: LD_INT 4
20378: PUSH
20379: LD_INT 5
20381: PUSH
20382: LD_INT 6
20384: PUSH
20385: LD_INT 6
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: PUSH
20394: LD_OWVAR 67
20398: ARRAY
20399: PUSH
20400: FOR_TO
20401: IFFALSE 20576
// begin uc_side := 3 ;
20403: LD_ADDR_OWVAR 20
20407: PUSH
20408: LD_INT 3
20410: ST_TO_ADDR
// uc_nation := 3 ;
20411: LD_ADDR_OWVAR 21
20415: PUSH
20416: LD_INT 3
20418: ST_TO_ADDR
// InitHC_All ( ) ;
20419: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20423: LD_INT 0
20425: PPUSH
20426: LD_INT 4
20428: PUSH
20429: LD_INT 5
20431: PUSH
20432: LD_INT 6
20434: PUSH
20435: LD_INT 6
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: PUSH
20444: LD_OWVAR 67
20448: ARRAY
20449: PPUSH
20450: CALL_OW 381
// un := CreateHuman ;
20454: LD_ADDR_VAR 0 3
20458: PUSH
20459: CALL_OW 44
20463: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20464: LD_VAR 0 3
20468: PPUSH
20469: LD_INT 127
20471: PPUSH
20472: LD_INT 62
20474: PPUSH
20475: LD_INT 3
20477: PPUSH
20478: LD_INT 0
20480: PPUSH
20481: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20485: LD_ADDR_EXP 49
20489: PUSH
20490: LD_EXP 49
20494: PPUSH
20495: LD_EXP 49
20499: PUSH
20500: LD_INT 1
20502: PLUS
20503: PPUSH
20504: LD_VAR 0 3
20508: PPUSH
20509: CALL_OW 1
20513: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20514: LD_VAR 0 3
20518: PPUSH
20519: LD_INT 83
20521: PPUSH
20522: LD_INT 49
20524: PPUSH
20525: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20529: LD_VAR 0 3
20533: PPUSH
20534: LD_INT 49
20536: PPUSH
20537: LD_INT 43
20539: PPUSH
20540: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 31
20551: PPUSH
20552: LD_INT 15
20554: PPUSH
20555: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20559: LD_VAR 0 3
20563: PPUSH
20564: LD_INT 63
20566: PPUSH
20567: LD_INT 9
20569: PPUSH
20570: CALL_OW 174
// end ;
20574: GO 20400
20576: POP
20577: POP
// end ; end_of_file
20578: LD_VAR 0 1
20582: RET
// export function CreateNature ; var i , un ; begin
20583: LD_INT 0
20585: PPUSH
20586: PPUSH
20587: PPUSH
// for i := 1 to Difficulty + 2 do
20588: LD_ADDR_VAR 0 2
20592: PUSH
20593: DOUBLE
20594: LD_INT 1
20596: DEC
20597: ST_TO_ADDR
20598: LD_OWVAR 67
20602: PUSH
20603: LD_INT 2
20605: PLUS
20606: PUSH
20607: FOR_TO
20608: IFFALSE 20717
// begin hc_sex := sex_male ;
20610: LD_ADDR_OWVAR 27
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// uc_side := 0 ;
20618: LD_ADDR_OWVAR 20
20622: PUSH
20623: LD_INT 0
20625: ST_TO_ADDR
// uc_nation := nation_nature ;
20626: LD_ADDR_OWVAR 21
20630: PUSH
20631: LD_INT 0
20633: ST_TO_ADDR
// hc_class := class_tiger ;
20634: LD_ADDR_OWVAR 28
20638: PUSH
20639: LD_INT 14
20641: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20642: LD_ADDR_OWVAR 31
20646: PUSH
20647: LD_EXP 36
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: LD_INT 0
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20667: LD_ADDR_OWVAR 35
20671: PUSH
20672: LD_INT 5
20674: NEG
20675: PPUSH
20676: LD_INT 5
20678: PPUSH
20679: CALL_OW 12
20683: PUSH
20684: LD_OWVAR 67
20688: MUL
20689: ST_TO_ADDR
// un := CreateHuman ;
20690: LD_ADDR_VAR 0 3
20694: PUSH
20695: CALL_OW 44
20699: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20700: LD_VAR 0 3
20704: PPUSH
20705: LD_INT 18
20707: PPUSH
20708: LD_INT 0
20710: PPUSH
20711: CALL_OW 49
// end ;
20715: GO 20607
20717: POP
20718: POP
// for i = 1 to rand ( 3 , 4 ) do
20719: LD_ADDR_VAR 0 2
20723: PUSH
20724: DOUBLE
20725: LD_INT 1
20727: DEC
20728: ST_TO_ADDR
20729: LD_INT 3
20731: PPUSH
20732: LD_INT 4
20734: PPUSH
20735: CALL_OW 12
20739: PUSH
20740: FOR_TO
20741: IFFALSE 20811
// begin hc_class := class_phororhacos ;
20743: LD_ADDR_OWVAR 28
20747: PUSH
20748: LD_INT 18
20750: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20751: LD_ADDR_OWVAR 31
20755: PUSH
20756: LD_EXP 36
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: ST_TO_ADDR
// hc_agressivity := 0 ;
20776: LD_ADDR_OWVAR 35
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// un = CreateHuman ;
20784: LD_ADDR_VAR 0 3
20788: PUSH
20789: CALL_OW 44
20793: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20794: LD_VAR 0 3
20798: PPUSH
20799: LD_INT 18
20801: PPUSH
20802: LD_INT 0
20804: PPUSH
20805: CALL_OW 49
// end ;
20809: GO 20740
20811: POP
20812: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
20813: LD_ADDR_VAR 0 2
20817: PUSH
20818: DOUBLE
20819: LD_INT 1
20821: DEC
20822: ST_TO_ADDR
20823: LD_INT 3
20825: PUSH
20826: LD_INT 3
20828: PUSH
20829: LD_INT 4
20831: PUSH
20832: LD_INT 5
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: PUSH
20841: LD_OWVAR 67
20845: ARRAY
20846: PUSH
20847: FOR_TO
20848: IFFALSE 20989
// begin hc_class := class_apeman ;
20850: LD_ADDR_OWVAR 28
20854: PUSH
20855: LD_INT 12
20857: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20858: LD_ADDR_OWVAR 31
20862: PUSH
20863: LD_INT 2
20865: PPUSH
20866: LD_INT 5
20868: PPUSH
20869: CALL_OW 12
20873: PUSH
20874: LD_INT 0
20876: PPUSH
20877: LD_INT 2
20879: PPUSH
20880: CALL_OW 12
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
20897: LD_ADDR_OWVAR 35
20901: PUSH
20902: LD_INT 5
20904: NEG
20905: PPUSH
20906: LD_INT 10
20908: PPUSH
20909: CALL_OW 12
20913: PUSH
20914: LD_INT 10
20916: NEG
20917: PPUSH
20918: LD_INT 20
20920: PPUSH
20921: CALL_OW 12
20925: PUSH
20926: LD_INT 20
20928: NEG
20929: PPUSH
20930: LD_INT 25
20932: PPUSH
20933: CALL_OW 12
20937: PUSH
20938: LD_INT 30
20940: NEG
20941: PPUSH
20942: LD_INT 30
20944: PPUSH
20945: CALL_OW 12
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: PUSH
20956: LD_OWVAR 67
20960: ARRAY
20961: ST_TO_ADDR
// un := CreateHuman ;
20962: LD_ADDR_VAR 0 3
20966: PUSH
20967: CALL_OW 44
20971: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20972: LD_VAR 0 3
20976: PPUSH
20977: LD_INT 19
20979: PPUSH
20980: LD_INT 0
20982: PPUSH
20983: CALL_OW 49
// end ;
20987: GO 20847
20989: POP
20990: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
20991: LD_ADDR_VAR 0 2
20995: PUSH
20996: DOUBLE
20997: LD_INT 1
20999: DEC
21000: ST_TO_ADDR
21001: LD_INT 3
21003: PUSH
21004: LD_INT 4
21006: PUSH
21007: LD_INT 5
21009: PUSH
21010: LD_INT 6
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: PUSH
21019: LD_OWVAR 67
21023: ARRAY
21024: PUSH
21025: FOR_TO
21026: IFFALSE 21119
// begin hc_class := class_apeman ;
21028: LD_ADDR_OWVAR 28
21032: PUSH
21033: LD_INT 12
21035: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21036: LD_ADDR_OWVAR 31
21040: PUSH
21041: LD_INT 2
21043: PPUSH
21044: LD_INT 5
21046: PPUSH
21047: CALL_OW 12
21051: PUSH
21052: LD_INT 0
21054: PPUSH
21055: LD_INT 2
21057: PPUSH
21058: CALL_OW 12
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21075: LD_ADDR_OWVAR 35
21079: PUSH
21080: LD_INT 15
21082: NEG
21083: PPUSH
21084: LD_INT 15
21086: PPUSH
21087: CALL_OW 12
21091: ST_TO_ADDR
// un = CreateHuman ;
21092: LD_ADDR_VAR 0 3
21096: PUSH
21097: CALL_OW 44
21101: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21102: LD_VAR 0 3
21106: PPUSH
21107: LD_INT 20
21109: PPUSH
21110: LD_INT 0
21112: PPUSH
21113: CALL_OW 49
// end ;
21117: GO 21025
21119: POP
21120: POP
// end ; end_of_file end_of_file
21121: LD_VAR 0 1
21125: RET
// export globalGameSaveCounter ; every 0 0$1 do
21126: GO 21128
21128: DISABLE
// begin enable ;
21129: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21130: LD_STRING updateTimer(
21132: PUSH
21133: LD_OWVAR 1
21137: STR
21138: PUSH
21139: LD_STRING );
21141: STR
21142: PPUSH
21143: CALL_OW 559
// end ;
21147: END
// every 0 0$1 do
21148: GO 21150
21150: DISABLE
// begin globalGameSaveCounter := 0 ;
21151: LD_ADDR_EXP 50
21155: PUSH
21156: LD_INT 0
21158: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21159: LD_STRING setGameSaveCounter(0)
21161: PPUSH
21162: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21166: LD_STRING initStreamRollete();
21168: PPUSH
21169: CALL_OW 559
// InitStreamMode ;
21173: CALL 22499 0 0
// DefineStreamItems ( false ) ;
21177: LD_INT 0
21179: PPUSH
21180: CALL 22963 0 1
// end ;
21184: END
// export function SOS_MapStart ( ) ; begin
21185: LD_INT 0
21187: PPUSH
// if streamModeActive then
21188: LD_EXP 51
21192: IFFALSE 21201
// DefineStreamItems ( true ) ;
21194: LD_INT 1
21196: PPUSH
21197: CALL 22963 0 1
// UpdateLuaVariables ( ) ;
21201: CALL 21218 0 0
// UpdateFactoryWaypoints ( ) ;
21205: CALL 35824 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21209: CALL 36081 0 0
// end ;
21213: LD_VAR 0 1
21217: RET
// function UpdateLuaVariables ( ) ; begin
21218: LD_INT 0
21220: PPUSH
// if globalGameSaveCounter then
21221: LD_EXP 50
21225: IFFALSE 21259
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21227: LD_ADDR_EXP 50
21231: PUSH
21232: LD_EXP 50
21236: PPUSH
21237: CALL 80038 0 1
21241: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21242: LD_STRING setGameSaveCounter(
21244: PUSH
21245: LD_EXP 50
21249: STR
21250: PUSH
21251: LD_STRING )
21253: STR
21254: PPUSH
21255: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21259: LD_STRING setGameDifficulty(
21261: PUSH
21262: LD_OWVAR 67
21266: STR
21267: PUSH
21268: LD_STRING )
21270: STR
21271: PPUSH
21272: CALL_OW 559
// end ;
21276: LD_VAR 0 1
21280: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21281: LD_INT 0
21283: PPUSH
// if p2 = stream_mode then
21284: LD_VAR 0 2
21288: PUSH
21289: LD_INT 100
21291: EQUAL
21292: IFFALSE 22295
// begin if not StreamModeActive then
21294: LD_EXP 51
21298: NOT
21299: IFFALSE 21309
// StreamModeActive := true ;
21301: LD_ADDR_EXP 51
21305: PUSH
21306: LD_INT 1
21308: ST_TO_ADDR
// if p3 = 0 then
21309: LD_VAR 0 3
21313: PUSH
21314: LD_INT 0
21316: EQUAL
21317: IFFALSE 21323
// InitStreamMode ;
21319: CALL 22499 0 0
// if p3 = 1 then
21323: LD_VAR 0 3
21327: PUSH
21328: LD_INT 1
21330: EQUAL
21331: IFFALSE 21341
// sRocket := true ;
21333: LD_ADDR_EXP 56
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
// if p3 = 2 then
21341: LD_VAR 0 3
21345: PUSH
21346: LD_INT 2
21348: EQUAL
21349: IFFALSE 21359
// sSpeed := true ;
21351: LD_ADDR_EXP 55
21355: PUSH
21356: LD_INT 1
21358: ST_TO_ADDR
// if p3 = 3 then
21359: LD_VAR 0 3
21363: PUSH
21364: LD_INT 3
21366: EQUAL
21367: IFFALSE 21377
// sEngine := true ;
21369: LD_ADDR_EXP 57
21373: PUSH
21374: LD_INT 1
21376: ST_TO_ADDR
// if p3 = 4 then
21377: LD_VAR 0 3
21381: PUSH
21382: LD_INT 4
21384: EQUAL
21385: IFFALSE 21395
// sSpec := true ;
21387: LD_ADDR_EXP 54
21391: PUSH
21392: LD_INT 1
21394: ST_TO_ADDR
// if p3 = 5 then
21395: LD_VAR 0 3
21399: PUSH
21400: LD_INT 5
21402: EQUAL
21403: IFFALSE 21413
// sLevel := true ;
21405: LD_ADDR_EXP 58
21409: PUSH
21410: LD_INT 1
21412: ST_TO_ADDR
// if p3 = 6 then
21413: LD_VAR 0 3
21417: PUSH
21418: LD_INT 6
21420: EQUAL
21421: IFFALSE 21431
// sArmoury := true ;
21423: LD_ADDR_EXP 59
21427: PUSH
21428: LD_INT 1
21430: ST_TO_ADDR
// if p3 = 7 then
21431: LD_VAR 0 3
21435: PUSH
21436: LD_INT 7
21438: EQUAL
21439: IFFALSE 21449
// sRadar := true ;
21441: LD_ADDR_EXP 60
21445: PUSH
21446: LD_INT 1
21448: ST_TO_ADDR
// if p3 = 8 then
21449: LD_VAR 0 3
21453: PUSH
21454: LD_INT 8
21456: EQUAL
21457: IFFALSE 21467
// sBunker := true ;
21459: LD_ADDR_EXP 61
21463: PUSH
21464: LD_INT 1
21466: ST_TO_ADDR
// if p3 = 9 then
21467: LD_VAR 0 3
21471: PUSH
21472: LD_INT 9
21474: EQUAL
21475: IFFALSE 21485
// sHack := true ;
21477: LD_ADDR_EXP 62
21481: PUSH
21482: LD_INT 1
21484: ST_TO_ADDR
// if p3 = 10 then
21485: LD_VAR 0 3
21489: PUSH
21490: LD_INT 10
21492: EQUAL
21493: IFFALSE 21503
// sFire := true ;
21495: LD_ADDR_EXP 63
21499: PUSH
21500: LD_INT 1
21502: ST_TO_ADDR
// if p3 = 11 then
21503: LD_VAR 0 3
21507: PUSH
21508: LD_INT 11
21510: EQUAL
21511: IFFALSE 21521
// sRefresh := true ;
21513: LD_ADDR_EXP 64
21517: PUSH
21518: LD_INT 1
21520: ST_TO_ADDR
// if p3 = 12 then
21521: LD_VAR 0 3
21525: PUSH
21526: LD_INT 12
21528: EQUAL
21529: IFFALSE 21539
// sExp := true ;
21531: LD_ADDR_EXP 65
21535: PUSH
21536: LD_INT 1
21538: ST_TO_ADDR
// if p3 = 13 then
21539: LD_VAR 0 3
21543: PUSH
21544: LD_INT 13
21546: EQUAL
21547: IFFALSE 21557
// sDepot := true ;
21549: LD_ADDR_EXP 66
21553: PUSH
21554: LD_INT 1
21556: ST_TO_ADDR
// if p3 = 14 then
21557: LD_VAR 0 3
21561: PUSH
21562: LD_INT 14
21564: EQUAL
21565: IFFALSE 21575
// sFlag := true ;
21567: LD_ADDR_EXP 67
21571: PUSH
21572: LD_INT 1
21574: ST_TO_ADDR
// if p3 = 15 then
21575: LD_VAR 0 3
21579: PUSH
21580: LD_INT 15
21582: EQUAL
21583: IFFALSE 21593
// sKamikadze := true ;
21585: LD_ADDR_EXP 75
21589: PUSH
21590: LD_INT 1
21592: ST_TO_ADDR
// if p3 = 16 then
21593: LD_VAR 0 3
21597: PUSH
21598: LD_INT 16
21600: EQUAL
21601: IFFALSE 21611
// sTroll := true ;
21603: LD_ADDR_EXP 76
21607: PUSH
21608: LD_INT 1
21610: ST_TO_ADDR
// if p3 = 17 then
21611: LD_VAR 0 3
21615: PUSH
21616: LD_INT 17
21618: EQUAL
21619: IFFALSE 21629
// sSlow := true ;
21621: LD_ADDR_EXP 77
21625: PUSH
21626: LD_INT 1
21628: ST_TO_ADDR
// if p3 = 18 then
21629: LD_VAR 0 3
21633: PUSH
21634: LD_INT 18
21636: EQUAL
21637: IFFALSE 21647
// sLack := true ;
21639: LD_ADDR_EXP 78
21643: PUSH
21644: LD_INT 1
21646: ST_TO_ADDR
// if p3 = 19 then
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 19
21654: EQUAL
21655: IFFALSE 21665
// sTank := true ;
21657: LD_ADDR_EXP 80
21661: PUSH
21662: LD_INT 1
21664: ST_TO_ADDR
// if p3 = 20 then
21665: LD_VAR 0 3
21669: PUSH
21670: LD_INT 20
21672: EQUAL
21673: IFFALSE 21683
// sRemote := true ;
21675: LD_ADDR_EXP 81
21679: PUSH
21680: LD_INT 1
21682: ST_TO_ADDR
// if p3 = 21 then
21683: LD_VAR 0 3
21687: PUSH
21688: LD_INT 21
21690: EQUAL
21691: IFFALSE 21701
// sPowell := true ;
21693: LD_ADDR_EXP 82
21697: PUSH
21698: LD_INT 1
21700: ST_TO_ADDR
// if p3 = 22 then
21701: LD_VAR 0 3
21705: PUSH
21706: LD_INT 22
21708: EQUAL
21709: IFFALSE 21719
// sTeleport := true ;
21711: LD_ADDR_EXP 85
21715: PUSH
21716: LD_INT 1
21718: ST_TO_ADDR
// if p3 = 23 then
21719: LD_VAR 0 3
21723: PUSH
21724: LD_INT 23
21726: EQUAL
21727: IFFALSE 21737
// sOilTower := true ;
21729: LD_ADDR_EXP 87
21733: PUSH
21734: LD_INT 1
21736: ST_TO_ADDR
// if p3 = 24 then
21737: LD_VAR 0 3
21741: PUSH
21742: LD_INT 24
21744: EQUAL
21745: IFFALSE 21755
// sShovel := true ;
21747: LD_ADDR_EXP 88
21751: PUSH
21752: LD_INT 1
21754: ST_TO_ADDR
// if p3 = 25 then
21755: LD_VAR 0 3
21759: PUSH
21760: LD_INT 25
21762: EQUAL
21763: IFFALSE 21773
// sSheik := true ;
21765: LD_ADDR_EXP 89
21769: PUSH
21770: LD_INT 1
21772: ST_TO_ADDR
// if p3 = 26 then
21773: LD_VAR 0 3
21777: PUSH
21778: LD_INT 26
21780: EQUAL
21781: IFFALSE 21791
// sEarthquake := true ;
21783: LD_ADDR_EXP 91
21787: PUSH
21788: LD_INT 1
21790: ST_TO_ADDR
// if p3 = 27 then
21791: LD_VAR 0 3
21795: PUSH
21796: LD_INT 27
21798: EQUAL
21799: IFFALSE 21809
// sAI := true ;
21801: LD_ADDR_EXP 92
21805: PUSH
21806: LD_INT 1
21808: ST_TO_ADDR
// if p3 = 28 then
21809: LD_VAR 0 3
21813: PUSH
21814: LD_INT 28
21816: EQUAL
21817: IFFALSE 21827
// sCargo := true ;
21819: LD_ADDR_EXP 95
21823: PUSH
21824: LD_INT 1
21826: ST_TO_ADDR
// if p3 = 29 then
21827: LD_VAR 0 3
21831: PUSH
21832: LD_INT 29
21834: EQUAL
21835: IFFALSE 21845
// sDLaser := true ;
21837: LD_ADDR_EXP 96
21841: PUSH
21842: LD_INT 1
21844: ST_TO_ADDR
// if p3 = 30 then
21845: LD_VAR 0 3
21849: PUSH
21850: LD_INT 30
21852: EQUAL
21853: IFFALSE 21863
// sExchange := true ;
21855: LD_ADDR_EXP 97
21859: PUSH
21860: LD_INT 1
21862: ST_TO_ADDR
// if p3 = 31 then
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 31
21870: EQUAL
21871: IFFALSE 21881
// sFac := true ;
21873: LD_ADDR_EXP 98
21877: PUSH
21878: LD_INT 1
21880: ST_TO_ADDR
// if p3 = 32 then
21881: LD_VAR 0 3
21885: PUSH
21886: LD_INT 32
21888: EQUAL
21889: IFFALSE 21899
// sPower := true ;
21891: LD_ADDR_EXP 99
21895: PUSH
21896: LD_INT 1
21898: ST_TO_ADDR
// if p3 = 33 then
21899: LD_VAR 0 3
21903: PUSH
21904: LD_INT 33
21906: EQUAL
21907: IFFALSE 21917
// sRandom := true ;
21909: LD_ADDR_EXP 100
21913: PUSH
21914: LD_INT 1
21916: ST_TO_ADDR
// if p3 = 34 then
21917: LD_VAR 0 3
21921: PUSH
21922: LD_INT 34
21924: EQUAL
21925: IFFALSE 21935
// sShield := true ;
21927: LD_ADDR_EXP 101
21931: PUSH
21932: LD_INT 1
21934: ST_TO_ADDR
// if p3 = 35 then
21935: LD_VAR 0 3
21939: PUSH
21940: LD_INT 35
21942: EQUAL
21943: IFFALSE 21953
// sTime := true ;
21945: LD_ADDR_EXP 102
21949: PUSH
21950: LD_INT 1
21952: ST_TO_ADDR
// if p3 = 36 then
21953: LD_VAR 0 3
21957: PUSH
21958: LD_INT 36
21960: EQUAL
21961: IFFALSE 21971
// sTools := true ;
21963: LD_ADDR_EXP 103
21967: PUSH
21968: LD_INT 1
21970: ST_TO_ADDR
// if p3 = 101 then
21971: LD_VAR 0 3
21975: PUSH
21976: LD_INT 101
21978: EQUAL
21979: IFFALSE 21989
// sSold := true ;
21981: LD_ADDR_EXP 68
21985: PUSH
21986: LD_INT 1
21988: ST_TO_ADDR
// if p3 = 102 then
21989: LD_VAR 0 3
21993: PUSH
21994: LD_INT 102
21996: EQUAL
21997: IFFALSE 22007
// sDiff := true ;
21999: LD_ADDR_EXP 69
22003: PUSH
22004: LD_INT 1
22006: ST_TO_ADDR
// if p3 = 103 then
22007: LD_VAR 0 3
22011: PUSH
22012: LD_INT 103
22014: EQUAL
22015: IFFALSE 22025
// sFog := true ;
22017: LD_ADDR_EXP 72
22021: PUSH
22022: LD_INT 1
22024: ST_TO_ADDR
// if p3 = 104 then
22025: LD_VAR 0 3
22029: PUSH
22030: LD_INT 104
22032: EQUAL
22033: IFFALSE 22043
// sReset := true ;
22035: LD_ADDR_EXP 73
22039: PUSH
22040: LD_INT 1
22042: ST_TO_ADDR
// if p3 = 105 then
22043: LD_VAR 0 3
22047: PUSH
22048: LD_INT 105
22050: EQUAL
22051: IFFALSE 22061
// sSun := true ;
22053: LD_ADDR_EXP 74
22057: PUSH
22058: LD_INT 1
22060: ST_TO_ADDR
// if p3 = 106 then
22061: LD_VAR 0 3
22065: PUSH
22066: LD_INT 106
22068: EQUAL
22069: IFFALSE 22079
// sTiger := true ;
22071: LD_ADDR_EXP 70
22075: PUSH
22076: LD_INT 1
22078: ST_TO_ADDR
// if p3 = 107 then
22079: LD_VAR 0 3
22083: PUSH
22084: LD_INT 107
22086: EQUAL
22087: IFFALSE 22097
// sBomb := true ;
22089: LD_ADDR_EXP 71
22093: PUSH
22094: LD_INT 1
22096: ST_TO_ADDR
// if p3 = 108 then
22097: LD_VAR 0 3
22101: PUSH
22102: LD_INT 108
22104: EQUAL
22105: IFFALSE 22115
// sWound := true ;
22107: LD_ADDR_EXP 79
22111: PUSH
22112: LD_INT 1
22114: ST_TO_ADDR
// if p3 = 109 then
22115: LD_VAR 0 3
22119: PUSH
22120: LD_INT 109
22122: EQUAL
22123: IFFALSE 22133
// sBetray := true ;
22125: LD_ADDR_EXP 83
22129: PUSH
22130: LD_INT 1
22132: ST_TO_ADDR
// if p3 = 110 then
22133: LD_VAR 0 3
22137: PUSH
22138: LD_INT 110
22140: EQUAL
22141: IFFALSE 22151
// sContamin := true ;
22143: LD_ADDR_EXP 84
22147: PUSH
22148: LD_INT 1
22150: ST_TO_ADDR
// if p3 = 111 then
22151: LD_VAR 0 3
22155: PUSH
22156: LD_INT 111
22158: EQUAL
22159: IFFALSE 22169
// sOil := true ;
22161: LD_ADDR_EXP 86
22165: PUSH
22166: LD_INT 1
22168: ST_TO_ADDR
// if p3 = 112 then
22169: LD_VAR 0 3
22173: PUSH
22174: LD_INT 112
22176: EQUAL
22177: IFFALSE 22187
// sStu := true ;
22179: LD_ADDR_EXP 90
22183: PUSH
22184: LD_INT 1
22186: ST_TO_ADDR
// if p3 = 113 then
22187: LD_VAR 0 3
22191: PUSH
22192: LD_INT 113
22194: EQUAL
22195: IFFALSE 22205
// sBazooka := true ;
22197: LD_ADDR_EXP 93
22201: PUSH
22202: LD_INT 1
22204: ST_TO_ADDR
// if p3 = 114 then
22205: LD_VAR 0 3
22209: PUSH
22210: LD_INT 114
22212: EQUAL
22213: IFFALSE 22223
// sMortar := true ;
22215: LD_ADDR_EXP 94
22219: PUSH
22220: LD_INT 1
22222: ST_TO_ADDR
// if p3 = 115 then
22223: LD_VAR 0 3
22227: PUSH
22228: LD_INT 115
22230: EQUAL
22231: IFFALSE 22241
// sRanger := true ;
22233: LD_ADDR_EXP 104
22237: PUSH
22238: LD_INT 1
22240: ST_TO_ADDR
// if p3 = 116 then
22241: LD_VAR 0 3
22245: PUSH
22246: LD_INT 116
22248: EQUAL
22249: IFFALSE 22259
// sComputer := true ;
22251: LD_ADDR_EXP 105
22255: PUSH
22256: LD_INT 1
22258: ST_TO_ADDR
// if p3 = 117 then
22259: LD_VAR 0 3
22263: PUSH
22264: LD_INT 117
22266: EQUAL
22267: IFFALSE 22277
// s30 := true ;
22269: LD_ADDR_EXP 106
22273: PUSH
22274: LD_INT 1
22276: ST_TO_ADDR
// if p3 = 118 then
22277: LD_VAR 0 3
22281: PUSH
22282: LD_INT 118
22284: EQUAL
22285: IFFALSE 22295
// s60 := true ;
22287: LD_ADDR_EXP 107
22291: PUSH
22292: LD_INT 1
22294: ST_TO_ADDR
// end ; if p2 = hack_mode then
22295: LD_VAR 0 2
22299: PUSH
22300: LD_INT 101
22302: EQUAL
22303: IFFALSE 22431
// begin case p3 of 1 :
22305: LD_VAR 0 3
22309: PUSH
22310: LD_INT 1
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22325
22318: POP
// hHackUnlimitedResources ; 2 :
22319: CALL 34570 0 0
22323: GO 22431
22325: LD_INT 2
22327: DOUBLE
22328: EQUAL
22329: IFTRUE 22333
22331: GO 22340
22333: POP
// hHackSetLevel10 ; 3 :
22334: CALL 34703 0 0
22338: GO 22431
22340: LD_INT 3
22342: DOUBLE
22343: EQUAL
22344: IFTRUE 22348
22346: GO 22355
22348: POP
// hHackSetLevel10YourUnits ; 4 :
22349: CALL 34788 0 0
22353: GO 22431
22355: LD_INT 4
22357: DOUBLE
22358: EQUAL
22359: IFTRUE 22363
22361: GO 22370
22363: POP
// hHackInvincible ; 5 :
22364: CALL 35236 0 0
22368: GO 22431
22370: LD_INT 5
22372: DOUBLE
22373: EQUAL
22374: IFTRUE 22378
22376: GO 22385
22378: POP
// hHackInvisible ; 6 :
22379: CALL 35347 0 0
22383: GO 22431
22385: LD_INT 6
22387: DOUBLE
22388: EQUAL
22389: IFTRUE 22393
22391: GO 22400
22393: POP
// hHackChangeYourSide ; 7 :
22394: CALL 35404 0 0
22398: GO 22431
22400: LD_INT 7
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22408
22406: GO 22415
22408: POP
// hHackChangeUnitSide ; 8 :
22409: CALL 35446 0 0
22413: GO 22431
22415: LD_INT 8
22417: DOUBLE
22418: EQUAL
22419: IFTRUE 22423
22421: GO 22430
22423: POP
// hHackFog ; end ;
22424: CALL 35547 0 0
22428: GO 22431
22430: POP
// end ; if p2 = game_save_mode then
22431: LD_VAR 0 2
22435: PUSH
22436: LD_INT 102
22438: EQUAL
22439: IFFALSE 22494
// begin if p3 = 1 then
22441: LD_VAR 0 3
22445: PUSH
22446: LD_INT 1
22448: EQUAL
22449: IFFALSE 22461
// globalGameSaveCounter := p4 ;
22451: LD_ADDR_EXP 50
22455: PUSH
22456: LD_VAR 0 4
22460: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22461: LD_VAR 0 3
22465: PUSH
22466: LD_INT 2
22468: EQUAL
22469: PUSH
22470: LD_EXP 50
22474: AND
22475: IFFALSE 22494
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22477: LD_STRING setGameSaveCounter(
22479: PUSH
22480: LD_EXP 50
22484: STR
22485: PUSH
22486: LD_STRING )
22488: STR
22489: PPUSH
22490: CALL_OW 559
// end ; end ;
22494: LD_VAR 0 7
22498: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22499: LD_INT 0
22501: PPUSH
// streamModeActive := false ;
22502: LD_ADDR_EXP 51
22506: PUSH
22507: LD_INT 0
22509: ST_TO_ADDR
// normalCounter := 36 ;
22510: LD_ADDR_EXP 52
22514: PUSH
22515: LD_INT 36
22517: ST_TO_ADDR
// hardcoreCounter := 18 ;
22518: LD_ADDR_EXP 53
22522: PUSH
22523: LD_INT 18
22525: ST_TO_ADDR
// sRocket := false ;
22526: LD_ADDR_EXP 56
22530: PUSH
22531: LD_INT 0
22533: ST_TO_ADDR
// sSpeed := false ;
22534: LD_ADDR_EXP 55
22538: PUSH
22539: LD_INT 0
22541: ST_TO_ADDR
// sEngine := false ;
22542: LD_ADDR_EXP 57
22546: PUSH
22547: LD_INT 0
22549: ST_TO_ADDR
// sSpec := false ;
22550: LD_ADDR_EXP 54
22554: PUSH
22555: LD_INT 0
22557: ST_TO_ADDR
// sLevel := false ;
22558: LD_ADDR_EXP 58
22562: PUSH
22563: LD_INT 0
22565: ST_TO_ADDR
// sArmoury := false ;
22566: LD_ADDR_EXP 59
22570: PUSH
22571: LD_INT 0
22573: ST_TO_ADDR
// sRadar := false ;
22574: LD_ADDR_EXP 60
22578: PUSH
22579: LD_INT 0
22581: ST_TO_ADDR
// sBunker := false ;
22582: LD_ADDR_EXP 61
22586: PUSH
22587: LD_INT 0
22589: ST_TO_ADDR
// sHack := false ;
22590: LD_ADDR_EXP 62
22594: PUSH
22595: LD_INT 0
22597: ST_TO_ADDR
// sFire := false ;
22598: LD_ADDR_EXP 63
22602: PUSH
22603: LD_INT 0
22605: ST_TO_ADDR
// sRefresh := false ;
22606: LD_ADDR_EXP 64
22610: PUSH
22611: LD_INT 0
22613: ST_TO_ADDR
// sExp := false ;
22614: LD_ADDR_EXP 65
22618: PUSH
22619: LD_INT 0
22621: ST_TO_ADDR
// sDepot := false ;
22622: LD_ADDR_EXP 66
22626: PUSH
22627: LD_INT 0
22629: ST_TO_ADDR
// sFlag := false ;
22630: LD_ADDR_EXP 67
22634: PUSH
22635: LD_INT 0
22637: ST_TO_ADDR
// sKamikadze := false ;
22638: LD_ADDR_EXP 75
22642: PUSH
22643: LD_INT 0
22645: ST_TO_ADDR
// sTroll := false ;
22646: LD_ADDR_EXP 76
22650: PUSH
22651: LD_INT 0
22653: ST_TO_ADDR
// sSlow := false ;
22654: LD_ADDR_EXP 77
22658: PUSH
22659: LD_INT 0
22661: ST_TO_ADDR
// sLack := false ;
22662: LD_ADDR_EXP 78
22666: PUSH
22667: LD_INT 0
22669: ST_TO_ADDR
// sTank := false ;
22670: LD_ADDR_EXP 80
22674: PUSH
22675: LD_INT 0
22677: ST_TO_ADDR
// sRemote := false ;
22678: LD_ADDR_EXP 81
22682: PUSH
22683: LD_INT 0
22685: ST_TO_ADDR
// sPowell := false ;
22686: LD_ADDR_EXP 82
22690: PUSH
22691: LD_INT 0
22693: ST_TO_ADDR
// sTeleport := false ;
22694: LD_ADDR_EXP 85
22698: PUSH
22699: LD_INT 0
22701: ST_TO_ADDR
// sOilTower := false ;
22702: LD_ADDR_EXP 87
22706: PUSH
22707: LD_INT 0
22709: ST_TO_ADDR
// sShovel := false ;
22710: LD_ADDR_EXP 88
22714: PUSH
22715: LD_INT 0
22717: ST_TO_ADDR
// sSheik := false ;
22718: LD_ADDR_EXP 89
22722: PUSH
22723: LD_INT 0
22725: ST_TO_ADDR
// sEarthquake := false ;
22726: LD_ADDR_EXP 91
22730: PUSH
22731: LD_INT 0
22733: ST_TO_ADDR
// sAI := false ;
22734: LD_ADDR_EXP 92
22738: PUSH
22739: LD_INT 0
22741: ST_TO_ADDR
// sCargo := false ;
22742: LD_ADDR_EXP 95
22746: PUSH
22747: LD_INT 0
22749: ST_TO_ADDR
// sDLaser := false ;
22750: LD_ADDR_EXP 96
22754: PUSH
22755: LD_INT 0
22757: ST_TO_ADDR
// sExchange := false ;
22758: LD_ADDR_EXP 97
22762: PUSH
22763: LD_INT 0
22765: ST_TO_ADDR
// sFac := false ;
22766: LD_ADDR_EXP 98
22770: PUSH
22771: LD_INT 0
22773: ST_TO_ADDR
// sPower := false ;
22774: LD_ADDR_EXP 99
22778: PUSH
22779: LD_INT 0
22781: ST_TO_ADDR
// sRandom := false ;
22782: LD_ADDR_EXP 100
22786: PUSH
22787: LD_INT 0
22789: ST_TO_ADDR
// sShield := false ;
22790: LD_ADDR_EXP 101
22794: PUSH
22795: LD_INT 0
22797: ST_TO_ADDR
// sTime := false ;
22798: LD_ADDR_EXP 102
22802: PUSH
22803: LD_INT 0
22805: ST_TO_ADDR
// sTools := false ;
22806: LD_ADDR_EXP 103
22810: PUSH
22811: LD_INT 0
22813: ST_TO_ADDR
// sSold := false ;
22814: LD_ADDR_EXP 68
22818: PUSH
22819: LD_INT 0
22821: ST_TO_ADDR
// sDiff := false ;
22822: LD_ADDR_EXP 69
22826: PUSH
22827: LD_INT 0
22829: ST_TO_ADDR
// sFog := false ;
22830: LD_ADDR_EXP 72
22834: PUSH
22835: LD_INT 0
22837: ST_TO_ADDR
// sReset := false ;
22838: LD_ADDR_EXP 73
22842: PUSH
22843: LD_INT 0
22845: ST_TO_ADDR
// sSun := false ;
22846: LD_ADDR_EXP 74
22850: PUSH
22851: LD_INT 0
22853: ST_TO_ADDR
// sTiger := false ;
22854: LD_ADDR_EXP 70
22858: PUSH
22859: LD_INT 0
22861: ST_TO_ADDR
// sBomb := false ;
22862: LD_ADDR_EXP 71
22866: PUSH
22867: LD_INT 0
22869: ST_TO_ADDR
// sWound := false ;
22870: LD_ADDR_EXP 79
22874: PUSH
22875: LD_INT 0
22877: ST_TO_ADDR
// sBetray := false ;
22878: LD_ADDR_EXP 83
22882: PUSH
22883: LD_INT 0
22885: ST_TO_ADDR
// sContamin := false ;
22886: LD_ADDR_EXP 84
22890: PUSH
22891: LD_INT 0
22893: ST_TO_ADDR
// sOil := false ;
22894: LD_ADDR_EXP 86
22898: PUSH
22899: LD_INT 0
22901: ST_TO_ADDR
// sStu := false ;
22902: LD_ADDR_EXP 90
22906: PUSH
22907: LD_INT 0
22909: ST_TO_ADDR
// sBazooka := false ;
22910: LD_ADDR_EXP 93
22914: PUSH
22915: LD_INT 0
22917: ST_TO_ADDR
// sMortar := false ;
22918: LD_ADDR_EXP 94
22922: PUSH
22923: LD_INT 0
22925: ST_TO_ADDR
// sRanger := false ;
22926: LD_ADDR_EXP 104
22930: PUSH
22931: LD_INT 0
22933: ST_TO_ADDR
// sComputer := false ;
22934: LD_ADDR_EXP 105
22938: PUSH
22939: LD_INT 0
22941: ST_TO_ADDR
// s30 := false ;
22942: LD_ADDR_EXP 106
22946: PUSH
22947: LD_INT 0
22949: ST_TO_ADDR
// s60 := false ;
22950: LD_ADDR_EXP 107
22954: PUSH
22955: LD_INT 0
22957: ST_TO_ADDR
// end ;
22958: LD_VAR 0 1
22962: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22963: LD_INT 0
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
// result := [ ] ;
22972: LD_ADDR_VAR 0 2
22976: PUSH
22977: EMPTY
22978: ST_TO_ADDR
// if campaign_id = 1 then
22979: LD_OWVAR 69
22983: PUSH
22984: LD_INT 1
22986: EQUAL
22987: IFFALSE 26153
// begin case mission_number of 1 :
22989: LD_OWVAR 70
22993: PUSH
22994: LD_INT 1
22996: DOUBLE
22997: EQUAL
22998: IFTRUE 23002
23000: GO 23078
23002: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23003: LD_ADDR_VAR 0 2
23007: PUSH
23008: LD_INT 2
23010: PUSH
23011: LD_INT 4
23013: PUSH
23014: LD_INT 11
23016: PUSH
23017: LD_INT 12
23019: PUSH
23020: LD_INT 15
23022: PUSH
23023: LD_INT 16
23025: PUSH
23026: LD_INT 22
23028: PUSH
23029: LD_INT 23
23031: PUSH
23032: LD_INT 26
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 101
23048: PUSH
23049: LD_INT 102
23051: PUSH
23052: LD_INT 106
23054: PUSH
23055: LD_INT 116
23057: PUSH
23058: LD_INT 117
23060: PUSH
23061: LD_INT 118
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: ST_TO_ADDR
23076: GO 26151
23078: LD_INT 2
23080: DOUBLE
23081: EQUAL
23082: IFTRUE 23086
23084: GO 23170
23086: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23087: LD_ADDR_VAR 0 2
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: LD_INT 4
23097: PUSH
23098: LD_INT 11
23100: PUSH
23101: LD_INT 12
23103: PUSH
23104: LD_INT 15
23106: PUSH
23107: LD_INT 16
23109: PUSH
23110: LD_INT 22
23112: PUSH
23113: LD_INT 23
23115: PUSH
23116: LD_INT 26
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 101
23132: PUSH
23133: LD_INT 102
23135: PUSH
23136: LD_INT 105
23138: PUSH
23139: LD_INT 106
23141: PUSH
23142: LD_INT 108
23144: PUSH
23145: LD_INT 116
23147: PUSH
23148: LD_INT 117
23150: PUSH
23151: LD_INT 118
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: ST_TO_ADDR
23168: GO 26151
23170: LD_INT 3
23172: DOUBLE
23173: EQUAL
23174: IFTRUE 23178
23176: GO 23266
23178: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 4
23189: PUSH
23190: LD_INT 5
23192: PUSH
23193: LD_INT 11
23195: PUSH
23196: LD_INT 12
23198: PUSH
23199: LD_INT 15
23201: PUSH
23202: LD_INT 16
23204: PUSH
23205: LD_INT 22
23207: PUSH
23208: LD_INT 26
23210: PUSH
23211: LD_INT 36
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 101
23228: PUSH
23229: LD_INT 102
23231: PUSH
23232: LD_INT 105
23234: PUSH
23235: LD_INT 106
23237: PUSH
23238: LD_INT 108
23240: PUSH
23241: LD_INT 116
23243: PUSH
23244: LD_INT 117
23246: PUSH
23247: LD_INT 118
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: ST_TO_ADDR
23264: GO 26151
23266: LD_INT 4
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 23370
23274: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23275: LD_ADDR_VAR 0 2
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: LD_INT 4
23285: PUSH
23286: LD_INT 5
23288: PUSH
23289: LD_INT 8
23291: PUSH
23292: LD_INT 11
23294: PUSH
23295: LD_INT 12
23297: PUSH
23298: LD_INT 15
23300: PUSH
23301: LD_INT 16
23303: PUSH
23304: LD_INT 22
23306: PUSH
23307: LD_INT 23
23309: PUSH
23310: LD_INT 26
23312: PUSH
23313: LD_INT 36
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 101
23332: PUSH
23333: LD_INT 102
23335: PUSH
23336: LD_INT 105
23338: PUSH
23339: LD_INT 106
23341: PUSH
23342: LD_INT 108
23344: PUSH
23345: LD_INT 116
23347: PUSH
23348: LD_INT 117
23350: PUSH
23351: LD_INT 118
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: ST_TO_ADDR
23368: GO 26151
23370: LD_INT 5
23372: DOUBLE
23373: EQUAL
23374: IFTRUE 23378
23376: GO 23490
23378: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23379: LD_ADDR_VAR 0 2
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 4
23389: PUSH
23390: LD_INT 5
23392: PUSH
23393: LD_INT 6
23395: PUSH
23396: LD_INT 8
23398: PUSH
23399: LD_INT 11
23401: PUSH
23402: LD_INT 12
23404: PUSH
23405: LD_INT 15
23407: PUSH
23408: LD_INT 16
23410: PUSH
23411: LD_INT 22
23413: PUSH
23414: LD_INT 23
23416: PUSH
23417: LD_INT 25
23419: PUSH
23420: LD_INT 26
23422: PUSH
23423: LD_INT 36
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 101
23444: PUSH
23445: LD_INT 102
23447: PUSH
23448: LD_INT 105
23450: PUSH
23451: LD_INT 106
23453: PUSH
23454: LD_INT 108
23456: PUSH
23457: LD_INT 109
23459: PUSH
23460: LD_INT 112
23462: PUSH
23463: LD_INT 116
23465: PUSH
23466: LD_INT 117
23468: PUSH
23469: LD_INT 118
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: ST_TO_ADDR
23488: GO 26151
23490: LD_INT 6
23492: DOUBLE
23493: EQUAL
23494: IFTRUE 23498
23496: GO 23630
23498: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23499: LD_ADDR_VAR 0 2
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 4
23509: PUSH
23510: LD_INT 5
23512: PUSH
23513: LD_INT 6
23515: PUSH
23516: LD_INT 8
23518: PUSH
23519: LD_INT 11
23521: PUSH
23522: LD_INT 12
23524: PUSH
23525: LD_INT 15
23527: PUSH
23528: LD_INT 16
23530: PUSH
23531: LD_INT 20
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 22
23539: PUSH
23540: LD_INT 23
23542: PUSH
23543: LD_INT 25
23545: PUSH
23546: LD_INT 26
23548: PUSH
23549: LD_INT 30
23551: PUSH
23552: LD_INT 31
23554: PUSH
23555: LD_INT 32
23557: PUSH
23558: LD_INT 36
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 101
23584: PUSH
23585: LD_INT 102
23587: PUSH
23588: LD_INT 105
23590: PUSH
23591: LD_INT 106
23593: PUSH
23594: LD_INT 108
23596: PUSH
23597: LD_INT 109
23599: PUSH
23600: LD_INT 112
23602: PUSH
23603: LD_INT 116
23605: PUSH
23606: LD_INT 117
23608: PUSH
23609: LD_INT 118
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: ST_TO_ADDR
23628: GO 26151
23630: LD_INT 7
23632: DOUBLE
23633: EQUAL
23634: IFTRUE 23638
23636: GO 23750
23638: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23639: LD_ADDR_VAR 0 2
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: LD_INT 4
23649: PUSH
23650: LD_INT 5
23652: PUSH
23653: LD_INT 7
23655: PUSH
23656: LD_INT 11
23658: PUSH
23659: LD_INT 12
23661: PUSH
23662: LD_INT 15
23664: PUSH
23665: LD_INT 16
23667: PUSH
23668: LD_INT 20
23670: PUSH
23671: LD_INT 21
23673: PUSH
23674: LD_INT 22
23676: PUSH
23677: LD_INT 23
23679: PUSH
23680: LD_INT 25
23682: PUSH
23683: LD_INT 26
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 101
23704: PUSH
23705: LD_INT 102
23707: PUSH
23708: LD_INT 103
23710: PUSH
23711: LD_INT 105
23713: PUSH
23714: LD_INT 106
23716: PUSH
23717: LD_INT 108
23719: PUSH
23720: LD_INT 112
23722: PUSH
23723: LD_INT 116
23725: PUSH
23726: LD_INT 117
23728: PUSH
23729: LD_INT 118
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: ST_TO_ADDR
23748: GO 26151
23750: LD_INT 8
23752: DOUBLE
23753: EQUAL
23754: IFTRUE 23758
23756: GO 23898
23758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23759: LD_ADDR_VAR 0 2
23763: PUSH
23764: LD_INT 2
23766: PUSH
23767: LD_INT 4
23769: PUSH
23770: LD_INT 5
23772: PUSH
23773: LD_INT 6
23775: PUSH
23776: LD_INT 7
23778: PUSH
23779: LD_INT 8
23781: PUSH
23782: LD_INT 11
23784: PUSH
23785: LD_INT 12
23787: PUSH
23788: LD_INT 15
23790: PUSH
23791: LD_INT 16
23793: PUSH
23794: LD_INT 20
23796: PUSH
23797: LD_INT 21
23799: PUSH
23800: LD_INT 22
23802: PUSH
23803: LD_INT 23
23805: PUSH
23806: LD_INT 25
23808: PUSH
23809: LD_INT 26
23811: PUSH
23812: LD_INT 30
23814: PUSH
23815: LD_INT 31
23817: PUSH
23818: LD_INT 32
23820: PUSH
23821: LD_INT 36
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 101
23848: PUSH
23849: LD_INT 102
23851: PUSH
23852: LD_INT 103
23854: PUSH
23855: LD_INT 105
23857: PUSH
23858: LD_INT 106
23860: PUSH
23861: LD_INT 108
23863: PUSH
23864: LD_INT 109
23866: PUSH
23867: LD_INT 112
23869: PUSH
23870: LD_INT 116
23872: PUSH
23873: LD_INT 117
23875: PUSH
23876: LD_INT 118
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: ST_TO_ADDR
23896: GO 26151
23898: LD_INT 9
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 24054
23906: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23907: LD_ADDR_VAR 0 2
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: LD_INT 4
23917: PUSH
23918: LD_INT 5
23920: PUSH
23921: LD_INT 6
23923: PUSH
23924: LD_INT 7
23926: PUSH
23927: LD_INT 8
23929: PUSH
23930: LD_INT 11
23932: PUSH
23933: LD_INT 12
23935: PUSH
23936: LD_INT 15
23938: PUSH
23939: LD_INT 16
23941: PUSH
23942: LD_INT 20
23944: PUSH
23945: LD_INT 21
23947: PUSH
23948: LD_INT 22
23950: PUSH
23951: LD_INT 23
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 26
23959: PUSH
23960: LD_INT 28
23962: PUSH
23963: LD_INT 30
23965: PUSH
23966: LD_INT 31
23968: PUSH
23969: LD_INT 32
23971: PUSH
23972: LD_INT 36
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 101
24000: PUSH
24001: LD_INT 102
24003: PUSH
24004: LD_INT 103
24006: PUSH
24007: LD_INT 105
24009: PUSH
24010: LD_INT 106
24012: PUSH
24013: LD_INT 108
24015: PUSH
24016: LD_INT 109
24018: PUSH
24019: LD_INT 112
24021: PUSH
24022: LD_INT 114
24024: PUSH
24025: LD_INT 116
24027: PUSH
24028: LD_INT 117
24030: PUSH
24031: LD_INT 118
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: ST_TO_ADDR
24052: GO 26151
24054: LD_INT 10
24056: DOUBLE
24057: EQUAL
24058: IFTRUE 24062
24060: GO 24258
24062: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24063: LD_ADDR_VAR 0 2
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: LD_INT 4
24073: PUSH
24074: LD_INT 5
24076: PUSH
24077: LD_INT 6
24079: PUSH
24080: LD_INT 7
24082: PUSH
24083: LD_INT 8
24085: PUSH
24086: LD_INT 9
24088: PUSH
24089: LD_INT 10
24091: PUSH
24092: LD_INT 11
24094: PUSH
24095: LD_INT 12
24097: PUSH
24098: LD_INT 13
24100: PUSH
24101: LD_INT 14
24103: PUSH
24104: LD_INT 15
24106: PUSH
24107: LD_INT 16
24109: PUSH
24110: LD_INT 17
24112: PUSH
24113: LD_INT 18
24115: PUSH
24116: LD_INT 19
24118: PUSH
24119: LD_INT 20
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: LD_INT 24
24133: PUSH
24134: LD_INT 25
24136: PUSH
24137: LD_INT 26
24139: PUSH
24140: LD_INT 28
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 31
24148: PUSH
24149: LD_INT 32
24151: PUSH
24152: LD_INT 36
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 101
24188: PUSH
24189: LD_INT 102
24191: PUSH
24192: LD_INT 103
24194: PUSH
24195: LD_INT 104
24197: PUSH
24198: LD_INT 105
24200: PUSH
24201: LD_INT 106
24203: PUSH
24204: LD_INT 107
24206: PUSH
24207: LD_INT 108
24209: PUSH
24210: LD_INT 109
24212: PUSH
24213: LD_INT 110
24215: PUSH
24216: LD_INT 111
24218: PUSH
24219: LD_INT 112
24221: PUSH
24222: LD_INT 114
24224: PUSH
24225: LD_INT 116
24227: PUSH
24228: LD_INT 117
24230: PUSH
24231: LD_INT 118
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: ST_TO_ADDR
24256: GO 26151
24258: LD_INT 11
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24470
24266: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24267: LD_ADDR_VAR 0 2
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 3
24277: PUSH
24278: LD_INT 4
24280: PUSH
24281: LD_INT 5
24283: PUSH
24284: LD_INT 6
24286: PUSH
24287: LD_INT 7
24289: PUSH
24290: LD_INT 8
24292: PUSH
24293: LD_INT 9
24295: PUSH
24296: LD_INT 10
24298: PUSH
24299: LD_INT 11
24301: PUSH
24302: LD_INT 12
24304: PUSH
24305: LD_INT 13
24307: PUSH
24308: LD_INT 14
24310: PUSH
24311: LD_INT 15
24313: PUSH
24314: LD_INT 16
24316: PUSH
24317: LD_INT 17
24319: PUSH
24320: LD_INT 18
24322: PUSH
24323: LD_INT 19
24325: PUSH
24326: LD_INT 20
24328: PUSH
24329: LD_INT 21
24331: PUSH
24332: LD_INT 22
24334: PUSH
24335: LD_INT 23
24337: PUSH
24338: LD_INT 24
24340: PUSH
24341: LD_INT 25
24343: PUSH
24344: LD_INT 26
24346: PUSH
24347: LD_INT 28
24349: PUSH
24350: LD_INT 30
24352: PUSH
24353: LD_INT 31
24355: PUSH
24356: LD_INT 32
24358: PUSH
24359: LD_INT 34
24361: PUSH
24362: LD_INT 36
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 101
24400: PUSH
24401: LD_INT 102
24403: PUSH
24404: LD_INT 103
24406: PUSH
24407: LD_INT 104
24409: PUSH
24410: LD_INT 105
24412: PUSH
24413: LD_INT 106
24415: PUSH
24416: LD_INT 107
24418: PUSH
24419: LD_INT 108
24421: PUSH
24422: LD_INT 109
24424: PUSH
24425: LD_INT 110
24427: PUSH
24428: LD_INT 111
24430: PUSH
24431: LD_INT 112
24433: PUSH
24434: LD_INT 114
24436: PUSH
24437: LD_INT 116
24439: PUSH
24440: LD_INT 117
24442: PUSH
24443: LD_INT 118
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: ST_TO_ADDR
24468: GO 26151
24470: LD_INT 12
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24698
24478: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24479: LD_ADDR_VAR 0 2
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: LD_INT 3
24492: PUSH
24493: LD_INT 4
24495: PUSH
24496: LD_INT 5
24498: PUSH
24499: LD_INT 6
24501: PUSH
24502: LD_INT 7
24504: PUSH
24505: LD_INT 8
24507: PUSH
24508: LD_INT 9
24510: PUSH
24511: LD_INT 10
24513: PUSH
24514: LD_INT 11
24516: PUSH
24517: LD_INT 12
24519: PUSH
24520: LD_INT 13
24522: PUSH
24523: LD_INT 14
24525: PUSH
24526: LD_INT 15
24528: PUSH
24529: LD_INT 16
24531: PUSH
24532: LD_INT 17
24534: PUSH
24535: LD_INT 18
24537: PUSH
24538: LD_INT 19
24540: PUSH
24541: LD_INT 20
24543: PUSH
24544: LD_INT 21
24546: PUSH
24547: LD_INT 22
24549: PUSH
24550: LD_INT 23
24552: PUSH
24553: LD_INT 24
24555: PUSH
24556: LD_INT 25
24558: PUSH
24559: LD_INT 26
24561: PUSH
24562: LD_INT 27
24564: PUSH
24565: LD_INT 28
24567: PUSH
24568: LD_INT 30
24570: PUSH
24571: LD_INT 31
24573: PUSH
24574: LD_INT 32
24576: PUSH
24577: LD_INT 33
24579: PUSH
24580: LD_INT 34
24582: PUSH
24583: LD_INT 36
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 101
24624: PUSH
24625: LD_INT 102
24627: PUSH
24628: LD_INT 103
24630: PUSH
24631: LD_INT 104
24633: PUSH
24634: LD_INT 105
24636: PUSH
24637: LD_INT 106
24639: PUSH
24640: LD_INT 107
24642: PUSH
24643: LD_INT 108
24645: PUSH
24646: LD_INT 109
24648: PUSH
24649: LD_INT 110
24651: PUSH
24652: LD_INT 111
24654: PUSH
24655: LD_INT 112
24657: PUSH
24658: LD_INT 113
24660: PUSH
24661: LD_INT 114
24663: PUSH
24664: LD_INT 116
24666: PUSH
24667: LD_INT 117
24669: PUSH
24670: LD_INT 118
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: ST_TO_ADDR
24696: GO 26151
24698: LD_INT 13
24700: DOUBLE
24701: EQUAL
24702: IFTRUE 24706
24704: GO 24914
24706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24707: LD_ADDR_VAR 0 2
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: LD_INT 2
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: LD_INT 4
24723: PUSH
24724: LD_INT 5
24726: PUSH
24727: LD_INT 8
24729: PUSH
24730: LD_INT 9
24732: PUSH
24733: LD_INT 10
24735: PUSH
24736: LD_INT 11
24738: PUSH
24739: LD_INT 12
24741: PUSH
24742: LD_INT 14
24744: PUSH
24745: LD_INT 15
24747: PUSH
24748: LD_INT 16
24750: PUSH
24751: LD_INT 17
24753: PUSH
24754: LD_INT 18
24756: PUSH
24757: LD_INT 19
24759: PUSH
24760: LD_INT 20
24762: PUSH
24763: LD_INT 21
24765: PUSH
24766: LD_INT 22
24768: PUSH
24769: LD_INT 23
24771: PUSH
24772: LD_INT 24
24774: PUSH
24775: LD_INT 25
24777: PUSH
24778: LD_INT 26
24780: PUSH
24781: LD_INT 27
24783: PUSH
24784: LD_INT 28
24786: PUSH
24787: LD_INT 30
24789: PUSH
24790: LD_INT 31
24792: PUSH
24793: LD_INT 32
24795: PUSH
24796: LD_INT 33
24798: PUSH
24799: LD_INT 34
24801: PUSH
24802: LD_INT 36
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 101
24840: PUSH
24841: LD_INT 102
24843: PUSH
24844: LD_INT 103
24846: PUSH
24847: LD_INT 104
24849: PUSH
24850: LD_INT 105
24852: PUSH
24853: LD_INT 106
24855: PUSH
24856: LD_INT 107
24858: PUSH
24859: LD_INT 108
24861: PUSH
24862: LD_INT 109
24864: PUSH
24865: LD_INT 110
24867: PUSH
24868: LD_INT 111
24870: PUSH
24871: LD_INT 112
24873: PUSH
24874: LD_INT 113
24876: PUSH
24877: LD_INT 114
24879: PUSH
24880: LD_INT 116
24882: PUSH
24883: LD_INT 117
24885: PUSH
24886: LD_INT 118
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: ST_TO_ADDR
24912: GO 26151
24914: LD_INT 14
24916: DOUBLE
24917: EQUAL
24918: IFTRUE 24922
24920: GO 25146
24922: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24923: LD_ADDR_VAR 0 2
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: LD_INT 2
24933: PUSH
24934: LD_INT 3
24936: PUSH
24937: LD_INT 4
24939: PUSH
24940: LD_INT 5
24942: PUSH
24943: LD_INT 6
24945: PUSH
24946: LD_INT 7
24948: PUSH
24949: LD_INT 8
24951: PUSH
24952: LD_INT 9
24954: PUSH
24955: LD_INT 10
24957: PUSH
24958: LD_INT 11
24960: PUSH
24961: LD_INT 12
24963: PUSH
24964: LD_INT 13
24966: PUSH
24967: LD_INT 14
24969: PUSH
24970: LD_INT 15
24972: PUSH
24973: LD_INT 16
24975: PUSH
24976: LD_INT 17
24978: PUSH
24979: LD_INT 18
24981: PUSH
24982: LD_INT 19
24984: PUSH
24985: LD_INT 20
24987: PUSH
24988: LD_INT 21
24990: PUSH
24991: LD_INT 22
24993: PUSH
24994: LD_INT 23
24996: PUSH
24997: LD_INT 24
24999: PUSH
25000: LD_INT 25
25002: PUSH
25003: LD_INT 26
25005: PUSH
25006: LD_INT 27
25008: PUSH
25009: LD_INT 28
25011: PUSH
25012: LD_INT 29
25014: PUSH
25015: LD_INT 30
25017: PUSH
25018: LD_INT 31
25020: PUSH
25021: LD_INT 32
25023: PUSH
25024: LD_INT 33
25026: PUSH
25027: LD_INT 34
25029: PUSH
25030: LD_INT 36
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 101
25072: PUSH
25073: LD_INT 102
25075: PUSH
25076: LD_INT 103
25078: PUSH
25079: LD_INT 104
25081: PUSH
25082: LD_INT 105
25084: PUSH
25085: LD_INT 106
25087: PUSH
25088: LD_INT 107
25090: PUSH
25091: LD_INT 108
25093: PUSH
25094: LD_INT 109
25096: PUSH
25097: LD_INT 110
25099: PUSH
25100: LD_INT 111
25102: PUSH
25103: LD_INT 112
25105: PUSH
25106: LD_INT 113
25108: PUSH
25109: LD_INT 114
25111: PUSH
25112: LD_INT 116
25114: PUSH
25115: LD_INT 117
25117: PUSH
25118: LD_INT 118
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: ST_TO_ADDR
25144: GO 26151
25146: LD_INT 15
25148: DOUBLE
25149: EQUAL
25150: IFTRUE 25154
25152: GO 25378
25154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25155: LD_ADDR_VAR 0 2
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: LD_INT 3
25168: PUSH
25169: LD_INT 4
25171: PUSH
25172: LD_INT 5
25174: PUSH
25175: LD_INT 6
25177: PUSH
25178: LD_INT 7
25180: PUSH
25181: LD_INT 8
25183: PUSH
25184: LD_INT 9
25186: PUSH
25187: LD_INT 10
25189: PUSH
25190: LD_INT 11
25192: PUSH
25193: LD_INT 12
25195: PUSH
25196: LD_INT 13
25198: PUSH
25199: LD_INT 14
25201: PUSH
25202: LD_INT 15
25204: PUSH
25205: LD_INT 16
25207: PUSH
25208: LD_INT 17
25210: PUSH
25211: LD_INT 18
25213: PUSH
25214: LD_INT 19
25216: PUSH
25217: LD_INT 20
25219: PUSH
25220: LD_INT 21
25222: PUSH
25223: LD_INT 22
25225: PUSH
25226: LD_INT 23
25228: PUSH
25229: LD_INT 24
25231: PUSH
25232: LD_INT 25
25234: PUSH
25235: LD_INT 26
25237: PUSH
25238: LD_INT 27
25240: PUSH
25241: LD_INT 28
25243: PUSH
25244: LD_INT 29
25246: PUSH
25247: LD_INT 30
25249: PUSH
25250: LD_INT 31
25252: PUSH
25253: LD_INT 32
25255: PUSH
25256: LD_INT 33
25258: PUSH
25259: LD_INT 34
25261: PUSH
25262: LD_INT 36
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 101
25304: PUSH
25305: LD_INT 102
25307: PUSH
25308: LD_INT 103
25310: PUSH
25311: LD_INT 104
25313: PUSH
25314: LD_INT 105
25316: PUSH
25317: LD_INT 106
25319: PUSH
25320: LD_INT 107
25322: PUSH
25323: LD_INT 108
25325: PUSH
25326: LD_INT 109
25328: PUSH
25329: LD_INT 110
25331: PUSH
25332: LD_INT 111
25334: PUSH
25335: LD_INT 112
25337: PUSH
25338: LD_INT 113
25340: PUSH
25341: LD_INT 114
25343: PUSH
25344: LD_INT 116
25346: PUSH
25347: LD_INT 117
25349: PUSH
25350: LD_INT 118
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: ST_TO_ADDR
25376: GO 26151
25378: LD_INT 16
25380: DOUBLE
25381: EQUAL
25382: IFTRUE 25386
25384: GO 25522
25386: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25387: LD_ADDR_VAR 0 2
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: LD_INT 4
25397: PUSH
25398: LD_INT 5
25400: PUSH
25401: LD_INT 7
25403: PUSH
25404: LD_INT 11
25406: PUSH
25407: LD_INT 12
25409: PUSH
25410: LD_INT 15
25412: PUSH
25413: LD_INT 16
25415: PUSH
25416: LD_INT 20
25418: PUSH
25419: LD_INT 21
25421: PUSH
25422: LD_INT 22
25424: PUSH
25425: LD_INT 23
25427: PUSH
25428: LD_INT 25
25430: PUSH
25431: LD_INT 26
25433: PUSH
25434: LD_INT 30
25436: PUSH
25437: LD_INT 31
25439: PUSH
25440: LD_INT 32
25442: PUSH
25443: LD_INT 33
25445: PUSH
25446: LD_INT 34
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 101
25472: PUSH
25473: LD_INT 102
25475: PUSH
25476: LD_INT 103
25478: PUSH
25479: LD_INT 106
25481: PUSH
25482: LD_INT 108
25484: PUSH
25485: LD_INT 112
25487: PUSH
25488: LD_INT 113
25490: PUSH
25491: LD_INT 114
25493: PUSH
25494: LD_INT 116
25496: PUSH
25497: LD_INT 117
25499: PUSH
25500: LD_INT 118
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: ST_TO_ADDR
25520: GO 26151
25522: LD_INT 17
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25754
25530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25531: LD_ADDR_VAR 0 2
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 2
25541: PUSH
25542: LD_INT 3
25544: PUSH
25545: LD_INT 4
25547: PUSH
25548: LD_INT 5
25550: PUSH
25551: LD_INT 6
25553: PUSH
25554: LD_INT 7
25556: PUSH
25557: LD_INT 8
25559: PUSH
25560: LD_INT 9
25562: PUSH
25563: LD_INT 10
25565: PUSH
25566: LD_INT 11
25568: PUSH
25569: LD_INT 12
25571: PUSH
25572: LD_INT 13
25574: PUSH
25575: LD_INT 14
25577: PUSH
25578: LD_INT 15
25580: PUSH
25581: LD_INT 16
25583: PUSH
25584: LD_INT 17
25586: PUSH
25587: LD_INT 18
25589: PUSH
25590: LD_INT 19
25592: PUSH
25593: LD_INT 20
25595: PUSH
25596: LD_INT 21
25598: PUSH
25599: LD_INT 22
25601: PUSH
25602: LD_INT 23
25604: PUSH
25605: LD_INT 24
25607: PUSH
25608: LD_INT 25
25610: PUSH
25611: LD_INT 26
25613: PUSH
25614: LD_INT 27
25616: PUSH
25617: LD_INT 28
25619: PUSH
25620: LD_INT 29
25622: PUSH
25623: LD_INT 30
25625: PUSH
25626: LD_INT 31
25628: PUSH
25629: LD_INT 32
25631: PUSH
25632: LD_INT 33
25634: PUSH
25635: LD_INT 34
25637: PUSH
25638: LD_INT 36
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 101
25680: PUSH
25681: LD_INT 102
25683: PUSH
25684: LD_INT 103
25686: PUSH
25687: LD_INT 104
25689: PUSH
25690: LD_INT 105
25692: PUSH
25693: LD_INT 106
25695: PUSH
25696: LD_INT 107
25698: PUSH
25699: LD_INT 108
25701: PUSH
25702: LD_INT 109
25704: PUSH
25705: LD_INT 110
25707: PUSH
25708: LD_INT 111
25710: PUSH
25711: LD_INT 112
25713: PUSH
25714: LD_INT 113
25716: PUSH
25717: LD_INT 114
25719: PUSH
25720: LD_INT 116
25722: PUSH
25723: LD_INT 117
25725: PUSH
25726: LD_INT 118
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: ST_TO_ADDR
25752: GO 26151
25754: LD_INT 18
25756: DOUBLE
25757: EQUAL
25758: IFTRUE 25762
25760: GO 25910
25762: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25763: LD_ADDR_VAR 0 2
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: LD_INT 4
25773: PUSH
25774: LD_INT 5
25776: PUSH
25777: LD_INT 7
25779: PUSH
25780: LD_INT 11
25782: PUSH
25783: LD_INT 12
25785: PUSH
25786: LD_INT 15
25788: PUSH
25789: LD_INT 16
25791: PUSH
25792: LD_INT 20
25794: PUSH
25795: LD_INT 21
25797: PUSH
25798: LD_INT 22
25800: PUSH
25801: LD_INT 23
25803: PUSH
25804: LD_INT 25
25806: PUSH
25807: LD_INT 26
25809: PUSH
25810: LD_INT 30
25812: PUSH
25813: LD_INT 31
25815: PUSH
25816: LD_INT 32
25818: PUSH
25819: LD_INT 33
25821: PUSH
25822: LD_INT 34
25824: PUSH
25825: LD_INT 35
25827: PUSH
25828: LD_INT 36
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 101
25856: PUSH
25857: LD_INT 102
25859: PUSH
25860: LD_INT 103
25862: PUSH
25863: LD_INT 106
25865: PUSH
25866: LD_INT 108
25868: PUSH
25869: LD_INT 112
25871: PUSH
25872: LD_INT 113
25874: PUSH
25875: LD_INT 114
25877: PUSH
25878: LD_INT 115
25880: PUSH
25881: LD_INT 116
25883: PUSH
25884: LD_INT 117
25886: PUSH
25887: LD_INT 118
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: ST_TO_ADDR
25908: GO 26151
25910: LD_INT 19
25912: DOUBLE
25913: EQUAL
25914: IFTRUE 25918
25916: GO 26150
25918: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25919: LD_ADDR_VAR 0 2
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: LD_INT 2
25929: PUSH
25930: LD_INT 3
25932: PUSH
25933: LD_INT 4
25935: PUSH
25936: LD_INT 5
25938: PUSH
25939: LD_INT 6
25941: PUSH
25942: LD_INT 7
25944: PUSH
25945: LD_INT 8
25947: PUSH
25948: LD_INT 9
25950: PUSH
25951: LD_INT 10
25953: PUSH
25954: LD_INT 11
25956: PUSH
25957: LD_INT 12
25959: PUSH
25960: LD_INT 13
25962: PUSH
25963: LD_INT 14
25965: PUSH
25966: LD_INT 15
25968: PUSH
25969: LD_INT 16
25971: PUSH
25972: LD_INT 17
25974: PUSH
25975: LD_INT 18
25977: PUSH
25978: LD_INT 19
25980: PUSH
25981: LD_INT 20
25983: PUSH
25984: LD_INT 21
25986: PUSH
25987: LD_INT 22
25989: PUSH
25990: LD_INT 23
25992: PUSH
25993: LD_INT 24
25995: PUSH
25996: LD_INT 25
25998: PUSH
25999: LD_INT 26
26001: PUSH
26002: LD_INT 27
26004: PUSH
26005: LD_INT 28
26007: PUSH
26008: LD_INT 29
26010: PUSH
26011: LD_INT 30
26013: PUSH
26014: LD_INT 31
26016: PUSH
26017: LD_INT 32
26019: PUSH
26020: LD_INT 33
26022: PUSH
26023: LD_INT 34
26025: PUSH
26026: LD_INT 35
26028: PUSH
26029: LD_INT 36
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 101
26072: PUSH
26073: LD_INT 102
26075: PUSH
26076: LD_INT 103
26078: PUSH
26079: LD_INT 104
26081: PUSH
26082: LD_INT 105
26084: PUSH
26085: LD_INT 106
26087: PUSH
26088: LD_INT 107
26090: PUSH
26091: LD_INT 108
26093: PUSH
26094: LD_INT 109
26096: PUSH
26097: LD_INT 110
26099: PUSH
26100: LD_INT 111
26102: PUSH
26103: LD_INT 112
26105: PUSH
26106: LD_INT 113
26108: PUSH
26109: LD_INT 114
26111: PUSH
26112: LD_INT 115
26114: PUSH
26115: LD_INT 116
26117: PUSH
26118: LD_INT 117
26120: PUSH
26121: LD_INT 118
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: ST_TO_ADDR
26148: GO 26151
26150: POP
// end else
26151: GO 26382
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26153: LD_ADDR_VAR 0 2
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: LD_INT 3
26166: PUSH
26167: LD_INT 4
26169: PUSH
26170: LD_INT 5
26172: PUSH
26173: LD_INT 6
26175: PUSH
26176: LD_INT 7
26178: PUSH
26179: LD_INT 8
26181: PUSH
26182: LD_INT 9
26184: PUSH
26185: LD_INT 10
26187: PUSH
26188: LD_INT 11
26190: PUSH
26191: LD_INT 12
26193: PUSH
26194: LD_INT 13
26196: PUSH
26197: LD_INT 14
26199: PUSH
26200: LD_INT 15
26202: PUSH
26203: LD_INT 16
26205: PUSH
26206: LD_INT 17
26208: PUSH
26209: LD_INT 18
26211: PUSH
26212: LD_INT 19
26214: PUSH
26215: LD_INT 20
26217: PUSH
26218: LD_INT 21
26220: PUSH
26221: LD_INT 22
26223: PUSH
26224: LD_INT 23
26226: PUSH
26227: LD_INT 24
26229: PUSH
26230: LD_INT 25
26232: PUSH
26233: LD_INT 26
26235: PUSH
26236: LD_INT 27
26238: PUSH
26239: LD_INT 28
26241: PUSH
26242: LD_INT 29
26244: PUSH
26245: LD_INT 30
26247: PUSH
26248: LD_INT 31
26250: PUSH
26251: LD_INT 32
26253: PUSH
26254: LD_INT 33
26256: PUSH
26257: LD_INT 34
26259: PUSH
26260: LD_INT 35
26262: PUSH
26263: LD_INT 36
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 101
26306: PUSH
26307: LD_INT 102
26309: PUSH
26310: LD_INT 103
26312: PUSH
26313: LD_INT 104
26315: PUSH
26316: LD_INT 105
26318: PUSH
26319: LD_INT 106
26321: PUSH
26322: LD_INT 107
26324: PUSH
26325: LD_INT 108
26327: PUSH
26328: LD_INT 109
26330: PUSH
26331: LD_INT 110
26333: PUSH
26334: LD_INT 111
26336: PUSH
26337: LD_INT 112
26339: PUSH
26340: LD_INT 113
26342: PUSH
26343: LD_INT 114
26345: PUSH
26346: LD_INT 115
26348: PUSH
26349: LD_INT 116
26351: PUSH
26352: LD_INT 117
26354: PUSH
26355: LD_INT 118
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: ST_TO_ADDR
// if result then
26382: LD_VAR 0 2
26386: IFFALSE 27172
// begin normal :=  ;
26388: LD_ADDR_VAR 0 5
26392: PUSH
26393: LD_STRING 
26395: ST_TO_ADDR
// hardcore :=  ;
26396: LD_ADDR_VAR 0 6
26400: PUSH
26401: LD_STRING 
26403: ST_TO_ADDR
// active :=  ;
26404: LD_ADDR_VAR 0 7
26408: PUSH
26409: LD_STRING 
26411: ST_TO_ADDR
// for i = 1 to normalCounter do
26412: LD_ADDR_VAR 0 8
26416: PUSH
26417: DOUBLE
26418: LD_INT 1
26420: DEC
26421: ST_TO_ADDR
26422: LD_EXP 52
26426: PUSH
26427: FOR_TO
26428: IFFALSE 26529
// begin tmp := 0 ;
26430: LD_ADDR_VAR 0 3
26434: PUSH
26435: LD_STRING 0
26437: ST_TO_ADDR
// if result [ 1 ] then
26438: LD_VAR 0 2
26442: PUSH
26443: LD_INT 1
26445: ARRAY
26446: IFFALSE 26511
// if result [ 1 ] [ 1 ] = i then
26448: LD_VAR 0 2
26452: PUSH
26453: LD_INT 1
26455: ARRAY
26456: PUSH
26457: LD_INT 1
26459: ARRAY
26460: PUSH
26461: LD_VAR 0 8
26465: EQUAL
26466: IFFALSE 26511
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26468: LD_ADDR_VAR 0 2
26472: PUSH
26473: LD_VAR 0 2
26477: PPUSH
26478: LD_INT 1
26480: PPUSH
26481: LD_VAR 0 2
26485: PUSH
26486: LD_INT 1
26488: ARRAY
26489: PPUSH
26490: LD_INT 1
26492: PPUSH
26493: CALL_OW 3
26497: PPUSH
26498: CALL_OW 1
26502: ST_TO_ADDR
// tmp := 1 ;
26503: LD_ADDR_VAR 0 3
26507: PUSH
26508: LD_STRING 1
26510: ST_TO_ADDR
// end ; normal := normal & tmp ;
26511: LD_ADDR_VAR 0 5
26515: PUSH
26516: LD_VAR 0 5
26520: PUSH
26521: LD_VAR 0 3
26525: STR
26526: ST_TO_ADDR
// end ;
26527: GO 26427
26529: POP
26530: POP
// for i = 1 to hardcoreCounter do
26531: LD_ADDR_VAR 0 8
26535: PUSH
26536: DOUBLE
26537: LD_INT 1
26539: DEC
26540: ST_TO_ADDR
26541: LD_EXP 53
26545: PUSH
26546: FOR_TO
26547: IFFALSE 26652
// begin tmp := 0 ;
26549: LD_ADDR_VAR 0 3
26553: PUSH
26554: LD_STRING 0
26556: ST_TO_ADDR
// if result [ 2 ] then
26557: LD_VAR 0 2
26561: PUSH
26562: LD_INT 2
26564: ARRAY
26565: IFFALSE 26634
// if result [ 2 ] [ 1 ] = 100 + i then
26567: LD_VAR 0 2
26571: PUSH
26572: LD_INT 2
26574: ARRAY
26575: PUSH
26576: LD_INT 1
26578: ARRAY
26579: PUSH
26580: LD_INT 100
26582: PUSH
26583: LD_VAR 0 8
26587: PLUS
26588: EQUAL
26589: IFFALSE 26634
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26591: LD_ADDR_VAR 0 2
26595: PUSH
26596: LD_VAR 0 2
26600: PPUSH
26601: LD_INT 2
26603: PPUSH
26604: LD_VAR 0 2
26608: PUSH
26609: LD_INT 2
26611: ARRAY
26612: PPUSH
26613: LD_INT 1
26615: PPUSH
26616: CALL_OW 3
26620: PPUSH
26621: CALL_OW 1
26625: ST_TO_ADDR
// tmp := 1 ;
26626: LD_ADDR_VAR 0 3
26630: PUSH
26631: LD_STRING 1
26633: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26634: LD_ADDR_VAR 0 6
26638: PUSH
26639: LD_VAR 0 6
26643: PUSH
26644: LD_VAR 0 3
26648: STR
26649: ST_TO_ADDR
// end ;
26650: GO 26546
26652: POP
26653: POP
// if isGameLoad then
26654: LD_VAR 0 1
26658: IFFALSE 27133
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26660: LD_ADDR_VAR 0 4
26664: PUSH
26665: LD_EXP 56
26669: PUSH
26670: LD_EXP 55
26674: PUSH
26675: LD_EXP 57
26679: PUSH
26680: LD_EXP 54
26684: PUSH
26685: LD_EXP 58
26689: PUSH
26690: LD_EXP 59
26694: PUSH
26695: LD_EXP 60
26699: PUSH
26700: LD_EXP 61
26704: PUSH
26705: LD_EXP 62
26709: PUSH
26710: LD_EXP 63
26714: PUSH
26715: LD_EXP 64
26719: PUSH
26720: LD_EXP 65
26724: PUSH
26725: LD_EXP 66
26729: PUSH
26730: LD_EXP 67
26734: PUSH
26735: LD_EXP 75
26739: PUSH
26740: LD_EXP 76
26744: PUSH
26745: LD_EXP 77
26749: PUSH
26750: LD_EXP 78
26754: PUSH
26755: LD_EXP 80
26759: PUSH
26760: LD_EXP 81
26764: PUSH
26765: LD_EXP 82
26769: PUSH
26770: LD_EXP 85
26774: PUSH
26775: LD_EXP 87
26779: PUSH
26780: LD_EXP 88
26784: PUSH
26785: LD_EXP 89
26789: PUSH
26790: LD_EXP 91
26794: PUSH
26795: LD_EXP 92
26799: PUSH
26800: LD_EXP 95
26804: PUSH
26805: LD_EXP 96
26809: PUSH
26810: LD_EXP 97
26814: PUSH
26815: LD_EXP 98
26819: PUSH
26820: LD_EXP 99
26824: PUSH
26825: LD_EXP 100
26829: PUSH
26830: LD_EXP 101
26834: PUSH
26835: LD_EXP 102
26839: PUSH
26840: LD_EXP 103
26844: PUSH
26845: LD_EXP 68
26849: PUSH
26850: LD_EXP 69
26854: PUSH
26855: LD_EXP 72
26859: PUSH
26860: LD_EXP 73
26864: PUSH
26865: LD_EXP 74
26869: PUSH
26870: LD_EXP 70
26874: PUSH
26875: LD_EXP 71
26879: PUSH
26880: LD_EXP 79
26884: PUSH
26885: LD_EXP 83
26889: PUSH
26890: LD_EXP 84
26894: PUSH
26895: LD_EXP 86
26899: PUSH
26900: LD_EXP 90
26904: PUSH
26905: LD_EXP 93
26909: PUSH
26910: LD_EXP 94
26914: PUSH
26915: LD_EXP 104
26919: PUSH
26920: LD_EXP 105
26924: PUSH
26925: LD_EXP 106
26929: PUSH
26930: LD_EXP 107
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: ST_TO_ADDR
// tmp :=  ;
26991: LD_ADDR_VAR 0 3
26995: PUSH
26996: LD_STRING 
26998: ST_TO_ADDR
// for i = 1 to normalCounter do
26999: LD_ADDR_VAR 0 8
27003: PUSH
27004: DOUBLE
27005: LD_INT 1
27007: DEC
27008: ST_TO_ADDR
27009: LD_EXP 52
27013: PUSH
27014: FOR_TO
27015: IFFALSE 27051
// begin if flags [ i ] then
27017: LD_VAR 0 4
27021: PUSH
27022: LD_VAR 0 8
27026: ARRAY
27027: IFFALSE 27049
// tmp := tmp & i & ; ;
27029: LD_ADDR_VAR 0 3
27033: PUSH
27034: LD_VAR 0 3
27038: PUSH
27039: LD_VAR 0 8
27043: STR
27044: PUSH
27045: LD_STRING ;
27047: STR
27048: ST_TO_ADDR
// end ;
27049: GO 27014
27051: POP
27052: POP
// for i = 1 to hardcoreCounter do
27053: LD_ADDR_VAR 0 8
27057: PUSH
27058: DOUBLE
27059: LD_INT 1
27061: DEC
27062: ST_TO_ADDR
27063: LD_EXP 53
27067: PUSH
27068: FOR_TO
27069: IFFALSE 27115
// begin if flags [ normalCounter + i ] then
27071: LD_VAR 0 4
27075: PUSH
27076: LD_EXP 52
27080: PUSH
27081: LD_VAR 0 8
27085: PLUS
27086: ARRAY
27087: IFFALSE 27113
// tmp := tmp & ( 100 + i ) & ; ;
27089: LD_ADDR_VAR 0 3
27093: PUSH
27094: LD_VAR 0 3
27098: PUSH
27099: LD_INT 100
27101: PUSH
27102: LD_VAR 0 8
27106: PLUS
27107: STR
27108: PUSH
27109: LD_STRING ;
27111: STR
27112: ST_TO_ADDR
// end ;
27113: GO 27068
27115: POP
27116: POP
// if tmp then
27117: LD_VAR 0 3
27121: IFFALSE 27133
// active := tmp ;
27123: LD_ADDR_VAR 0 7
27127: PUSH
27128: LD_VAR 0 3
27132: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27133: LD_STRING getStreamItemsFromMission("
27135: PUSH
27136: LD_VAR 0 5
27140: STR
27141: PUSH
27142: LD_STRING ","
27144: STR
27145: PUSH
27146: LD_VAR 0 6
27150: STR
27151: PUSH
27152: LD_STRING ","
27154: STR
27155: PUSH
27156: LD_VAR 0 7
27160: STR
27161: PUSH
27162: LD_STRING ")
27164: STR
27165: PPUSH
27166: CALL_OW 559
// end else
27170: GO 27179
// ToLua ( getStreamItemsFromMission("","","") ) ;
27172: LD_STRING getStreamItemsFromMission("","","")
27174: PPUSH
27175: CALL_OW 559
// end ;
27179: LD_VAR 0 2
27183: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27184: LD_EXP 51
27188: PUSH
27189: LD_EXP 56
27193: AND
27194: IFFALSE 27318
27196: GO 27198
27198: DISABLE
27199: LD_INT 0
27201: PPUSH
27202: PPUSH
// begin enable ;
27203: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27204: LD_ADDR_VAR 0 2
27208: PUSH
27209: LD_INT 22
27211: PUSH
27212: LD_OWVAR 2
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: LD_INT 34
27226: PUSH
27227: LD_INT 7
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 34
27236: PUSH
27237: LD_INT 45
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 34
27246: PUSH
27247: LD_INT 28
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 34
27256: PUSH
27257: LD_INT 47
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PPUSH
27275: CALL_OW 69
27279: ST_TO_ADDR
// if not tmp then
27280: LD_VAR 0 2
27284: NOT
27285: IFFALSE 27289
// exit ;
27287: GO 27318
// for i in tmp do
27289: LD_ADDR_VAR 0 1
27293: PUSH
27294: LD_VAR 0 2
27298: PUSH
27299: FOR_IN
27300: IFFALSE 27316
// begin SetLives ( i , 0 ) ;
27302: LD_VAR 0 1
27306: PPUSH
27307: LD_INT 0
27309: PPUSH
27310: CALL_OW 234
// end ;
27314: GO 27299
27316: POP
27317: POP
// end ;
27318: PPOPN 2
27320: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27321: LD_EXP 51
27325: PUSH
27326: LD_EXP 57
27330: AND
27331: IFFALSE 27415
27333: GO 27335
27335: DISABLE
27336: LD_INT 0
27338: PPUSH
27339: PPUSH
// begin enable ;
27340: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27341: LD_ADDR_VAR 0 2
27345: PUSH
27346: LD_INT 22
27348: PUSH
27349: LD_OWVAR 2
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 32
27360: PUSH
27361: LD_INT 3
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PPUSH
27372: CALL_OW 69
27376: ST_TO_ADDR
// if not tmp then
27377: LD_VAR 0 2
27381: NOT
27382: IFFALSE 27386
// exit ;
27384: GO 27415
// for i in tmp do
27386: LD_ADDR_VAR 0 1
27390: PUSH
27391: LD_VAR 0 2
27395: PUSH
27396: FOR_IN
27397: IFFALSE 27413
// begin SetLives ( i , 0 ) ;
27399: LD_VAR 0 1
27403: PPUSH
27404: LD_INT 0
27406: PPUSH
27407: CALL_OW 234
// end ;
27411: GO 27396
27413: POP
27414: POP
// end ;
27415: PPOPN 2
27417: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27418: LD_EXP 51
27422: PUSH
27423: LD_EXP 54
27427: AND
27428: IFFALSE 27521
27430: GO 27432
27432: DISABLE
27433: LD_INT 0
27435: PPUSH
// begin enable ;
27436: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27437: LD_ADDR_VAR 0 1
27441: PUSH
27442: LD_INT 22
27444: PUSH
27445: LD_OWVAR 2
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: PUSH
27457: LD_INT 25
27459: PUSH
27460: LD_INT 5
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 25
27469: PUSH
27470: LD_INT 9
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 25
27479: PUSH
27480: LD_INT 8
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PPUSH
27497: CALL_OW 69
27501: PUSH
27502: FOR_IN
27503: IFFALSE 27519
// begin SetClass ( i , 1 ) ;
27505: LD_VAR 0 1
27509: PPUSH
27510: LD_INT 1
27512: PPUSH
27513: CALL_OW 336
// end ;
27517: GO 27502
27519: POP
27520: POP
// end ;
27521: PPOPN 1
27523: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27524: LD_EXP 51
27528: PUSH
27529: LD_EXP 55
27533: AND
27534: PUSH
27535: LD_OWVAR 65
27539: PUSH
27540: LD_INT 7
27542: LESS
27543: AND
27544: IFFALSE 27558
27546: GO 27548
27548: DISABLE
// begin enable ;
27549: ENABLE
// game_speed := 7 ;
27550: LD_ADDR_OWVAR 65
27554: PUSH
27555: LD_INT 7
27557: ST_TO_ADDR
// end ;
27558: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27559: LD_EXP 51
27563: PUSH
27564: LD_EXP 58
27568: AND
27569: IFFALSE 27771
27571: GO 27573
27573: DISABLE
27574: LD_INT 0
27576: PPUSH
27577: PPUSH
27578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27579: LD_ADDR_VAR 0 3
27583: PUSH
27584: LD_INT 81
27586: PUSH
27587: LD_OWVAR 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 21
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PPUSH
27610: CALL_OW 69
27614: ST_TO_ADDR
// if not tmp then
27615: LD_VAR 0 3
27619: NOT
27620: IFFALSE 27624
// exit ;
27622: GO 27771
// if tmp > 5 then
27624: LD_VAR 0 3
27628: PUSH
27629: LD_INT 5
27631: GREATER
27632: IFFALSE 27644
// k := 5 else
27634: LD_ADDR_VAR 0 2
27638: PUSH
27639: LD_INT 5
27641: ST_TO_ADDR
27642: GO 27654
// k := tmp ;
27644: LD_ADDR_VAR 0 2
27648: PUSH
27649: LD_VAR 0 3
27653: ST_TO_ADDR
// for i := 1 to k do
27654: LD_ADDR_VAR 0 1
27658: PUSH
27659: DOUBLE
27660: LD_INT 1
27662: DEC
27663: ST_TO_ADDR
27664: LD_VAR 0 2
27668: PUSH
27669: FOR_TO
27670: IFFALSE 27769
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27672: LD_VAR 0 3
27676: PUSH
27677: LD_VAR 0 1
27681: ARRAY
27682: PPUSH
27683: LD_VAR 0 1
27687: PUSH
27688: LD_INT 4
27690: MOD
27691: PUSH
27692: LD_INT 1
27694: PLUS
27695: PPUSH
27696: CALL_OW 259
27700: PUSH
27701: LD_INT 10
27703: LESS
27704: IFFALSE 27767
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27706: LD_VAR 0 3
27710: PUSH
27711: LD_VAR 0 1
27715: ARRAY
27716: PPUSH
27717: LD_VAR 0 1
27721: PUSH
27722: LD_INT 4
27724: MOD
27725: PUSH
27726: LD_INT 1
27728: PLUS
27729: PPUSH
27730: LD_VAR 0 3
27734: PUSH
27735: LD_VAR 0 1
27739: ARRAY
27740: PPUSH
27741: LD_VAR 0 1
27745: PUSH
27746: LD_INT 4
27748: MOD
27749: PUSH
27750: LD_INT 1
27752: PLUS
27753: PPUSH
27754: CALL_OW 259
27758: PUSH
27759: LD_INT 1
27761: PLUS
27762: PPUSH
27763: CALL_OW 237
27767: GO 27669
27769: POP
27770: POP
// end ;
27771: PPOPN 3
27773: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27774: LD_EXP 51
27778: PUSH
27779: LD_EXP 59
27783: AND
27784: IFFALSE 27804
27786: GO 27788
27788: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27789: LD_INT 4
27791: PPUSH
27792: LD_OWVAR 2
27796: PPUSH
27797: LD_INT 0
27799: PPUSH
27800: CALL_OW 324
27804: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27805: LD_EXP 51
27809: PUSH
27810: LD_EXP 88
27814: AND
27815: IFFALSE 27835
27817: GO 27819
27819: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27820: LD_INT 19
27822: PPUSH
27823: LD_OWVAR 2
27827: PPUSH
27828: LD_INT 0
27830: PPUSH
27831: CALL_OW 324
27835: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27836: LD_EXP 51
27840: PUSH
27841: LD_EXP 60
27845: AND
27846: IFFALSE 27948
27848: GO 27850
27850: DISABLE
27851: LD_INT 0
27853: PPUSH
27854: PPUSH
// begin enable ;
27855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27856: LD_ADDR_VAR 0 2
27860: PUSH
27861: LD_INT 22
27863: PUSH
27864: LD_OWVAR 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 34
27878: PUSH
27879: LD_INT 11
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 34
27888: PUSH
27889: LD_INT 30
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PPUSH
27905: CALL_OW 69
27909: ST_TO_ADDR
// if not tmp then
27910: LD_VAR 0 2
27914: NOT
27915: IFFALSE 27919
// exit ;
27917: GO 27948
// for i in tmp do
27919: LD_ADDR_VAR 0 1
27923: PUSH
27924: LD_VAR 0 2
27928: PUSH
27929: FOR_IN
27930: IFFALSE 27946
// begin SetLives ( i , 0 ) ;
27932: LD_VAR 0 1
27936: PPUSH
27937: LD_INT 0
27939: PPUSH
27940: CALL_OW 234
// end ;
27944: GO 27929
27946: POP
27947: POP
// end ;
27948: PPOPN 2
27950: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27951: LD_EXP 51
27955: PUSH
27956: LD_EXP 61
27960: AND
27961: IFFALSE 27981
27963: GO 27965
27965: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27966: LD_INT 32
27968: PPUSH
27969: LD_OWVAR 2
27973: PPUSH
27974: LD_INT 0
27976: PPUSH
27977: CALL_OW 324
27981: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27982: LD_EXP 51
27986: PUSH
27987: LD_EXP 62
27991: AND
27992: IFFALSE 28173
27994: GO 27996
27996: DISABLE
27997: LD_INT 0
27999: PPUSH
28000: PPUSH
28001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28002: LD_ADDR_VAR 0 2
28006: PUSH
28007: LD_INT 22
28009: PUSH
28010: LD_OWVAR 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 33
28021: PUSH
28022: LD_INT 3
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PPUSH
28033: CALL_OW 69
28037: ST_TO_ADDR
// if not tmp then
28038: LD_VAR 0 2
28042: NOT
28043: IFFALSE 28047
// exit ;
28045: GO 28173
// side := 0 ;
28047: LD_ADDR_VAR 0 3
28051: PUSH
28052: LD_INT 0
28054: ST_TO_ADDR
// for i := 1 to 8 do
28055: LD_ADDR_VAR 0 1
28059: PUSH
28060: DOUBLE
28061: LD_INT 1
28063: DEC
28064: ST_TO_ADDR
28065: LD_INT 8
28067: PUSH
28068: FOR_TO
28069: IFFALSE 28117
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28071: LD_OWVAR 2
28075: PUSH
28076: LD_VAR 0 1
28080: NONEQUAL
28081: PUSH
28082: LD_OWVAR 2
28086: PPUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 81
28096: PUSH
28097: LD_INT 2
28099: EQUAL
28100: AND
28101: IFFALSE 28115
// begin side := i ;
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: LD_VAR 0 1
28112: ST_TO_ADDR
// break ;
28113: GO 28117
// end ;
28115: GO 28068
28117: POP
28118: POP
// if not side then
28119: LD_VAR 0 3
28123: NOT
28124: IFFALSE 28128
// exit ;
28126: GO 28173
// for i := 1 to tmp do
28128: LD_ADDR_VAR 0 1
28132: PUSH
28133: DOUBLE
28134: LD_INT 1
28136: DEC
28137: ST_TO_ADDR
28138: LD_VAR 0 2
28142: PUSH
28143: FOR_TO
28144: IFFALSE 28171
// if Prob ( 60 ) then
28146: LD_INT 60
28148: PPUSH
28149: CALL_OW 13
28153: IFFALSE 28169
// SetSide ( i , side ) ;
28155: LD_VAR 0 1
28159: PPUSH
28160: LD_VAR 0 3
28164: PPUSH
28165: CALL_OW 235
28169: GO 28143
28171: POP
28172: POP
// end ;
28173: PPOPN 3
28175: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28176: LD_EXP 51
28180: PUSH
28181: LD_EXP 64
28185: AND
28186: IFFALSE 28305
28188: GO 28190
28190: DISABLE
28191: LD_INT 0
28193: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28194: LD_ADDR_VAR 0 1
28198: PUSH
28199: LD_INT 22
28201: PUSH
28202: LD_OWVAR 2
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 21
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 3
28223: PUSH
28224: LD_INT 23
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 69
28247: PUSH
28248: FOR_IN
28249: IFFALSE 28303
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28251: LD_VAR 0 1
28255: PPUSH
28256: CALL_OW 257
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: LD_INT 3
28269: PUSH
28270: LD_INT 4
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: IN
28279: IFFALSE 28301
// SetClass ( un , rand ( 1 , 4 ) ) ;
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_INT 1
28288: PPUSH
28289: LD_INT 4
28291: PPUSH
28292: CALL_OW 12
28296: PPUSH
28297: CALL_OW 336
28301: GO 28248
28303: POP
28304: POP
// end ;
28305: PPOPN 1
28307: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28308: LD_EXP 51
28312: PUSH
28313: LD_EXP 63
28317: AND
28318: IFFALSE 28397
28320: GO 28322
28322: DISABLE
28323: LD_INT 0
28325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28326: LD_ADDR_VAR 0 1
28330: PUSH
28331: LD_INT 22
28333: PUSH
28334: LD_OWVAR 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 21
28345: PUSH
28346: LD_INT 3
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PPUSH
28357: CALL_OW 69
28361: ST_TO_ADDR
// if not tmp then
28362: LD_VAR 0 1
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28371: LD_VAR 0 1
28375: PUSH
28376: LD_INT 1
28378: PPUSH
28379: LD_VAR 0 1
28383: PPUSH
28384: CALL_OW 12
28388: ARRAY
28389: PPUSH
28390: LD_INT 100
28392: PPUSH
28393: CALL_OW 234
// end ;
28397: PPOPN 1
28399: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28400: LD_EXP 51
28404: PUSH
28405: LD_EXP 65
28409: AND
28410: IFFALSE 28508
28412: GO 28414
28414: DISABLE
28415: LD_INT 0
28417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28418: LD_ADDR_VAR 0 1
28422: PUSH
28423: LD_INT 22
28425: PUSH
28426: LD_OWVAR 2
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 21
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 69
28453: ST_TO_ADDR
// if not tmp then
28454: LD_VAR 0 1
28458: NOT
28459: IFFALSE 28463
// exit ;
28461: GO 28508
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28463: LD_VAR 0 1
28467: PUSH
28468: LD_INT 1
28470: PPUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: CALL_OW 12
28480: ARRAY
28481: PPUSH
28482: LD_INT 1
28484: PPUSH
28485: LD_INT 4
28487: PPUSH
28488: CALL_OW 12
28492: PPUSH
28493: LD_INT 3000
28495: PPUSH
28496: LD_INT 9000
28498: PPUSH
28499: CALL_OW 12
28503: PPUSH
28504: CALL_OW 492
// end ;
28508: PPOPN 1
28510: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28511: LD_EXP 51
28515: PUSH
28516: LD_EXP 66
28520: AND
28521: IFFALSE 28541
28523: GO 28525
28525: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28526: LD_INT 1
28528: PPUSH
28529: LD_OWVAR 2
28533: PPUSH
28534: LD_INT 0
28536: PPUSH
28537: CALL_OW 324
28541: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28542: LD_EXP 51
28546: PUSH
28547: LD_EXP 67
28551: AND
28552: IFFALSE 28635
28554: GO 28556
28556: DISABLE
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28561: LD_ADDR_VAR 0 2
28565: PUSH
28566: LD_INT 22
28568: PUSH
28569: LD_OWVAR 2
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 21
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PPUSH
28592: CALL_OW 69
28596: ST_TO_ADDR
// if not tmp then
28597: LD_VAR 0 2
28601: NOT
28602: IFFALSE 28606
// exit ;
28604: GO 28635
// for i in tmp do
28606: LD_ADDR_VAR 0 1
28610: PUSH
28611: LD_VAR 0 2
28615: PUSH
28616: FOR_IN
28617: IFFALSE 28633
// SetBLevel ( i , 10 ) ;
28619: LD_VAR 0 1
28623: PPUSH
28624: LD_INT 10
28626: PPUSH
28627: CALL_OW 241
28631: GO 28616
28633: POP
28634: POP
// end ;
28635: PPOPN 2
28637: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28638: LD_EXP 51
28642: PUSH
28643: LD_EXP 68
28647: AND
28648: IFFALSE 28759
28650: GO 28652
28652: DISABLE
28653: LD_INT 0
28655: PPUSH
28656: PPUSH
28657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28658: LD_ADDR_VAR 0 3
28662: PUSH
28663: LD_INT 22
28665: PUSH
28666: LD_OWVAR 2
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 25
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 69
28693: ST_TO_ADDR
// if not tmp then
28694: LD_VAR 0 3
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 28759
// un := tmp [ rand ( 1 , tmp ) ] ;
28703: LD_ADDR_VAR 0 2
28707: PUSH
28708: LD_VAR 0 3
28712: PUSH
28713: LD_INT 1
28715: PPUSH
28716: LD_VAR 0 3
28720: PPUSH
28721: CALL_OW 12
28725: ARRAY
28726: ST_TO_ADDR
// if Crawls ( un ) then
28727: LD_VAR 0 2
28731: PPUSH
28732: CALL_OW 318
28736: IFFALSE 28747
// ComWalk ( un ) ;
28738: LD_VAR 0 2
28742: PPUSH
28743: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28747: LD_VAR 0 2
28751: PPUSH
28752: LD_INT 5
28754: PPUSH
28755: CALL_OW 336
// end ;
28759: PPOPN 3
28761: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28762: LD_EXP 51
28766: PUSH
28767: LD_EXP 69
28771: AND
28772: PUSH
28773: LD_OWVAR 67
28777: PUSH
28778: LD_INT 4
28780: LESS
28781: AND
28782: IFFALSE 28801
28784: GO 28786
28786: DISABLE
// begin Difficulty := Difficulty + 1 ;
28787: LD_ADDR_OWVAR 67
28791: PUSH
28792: LD_OWVAR 67
28796: PUSH
28797: LD_INT 1
28799: PLUS
28800: ST_TO_ADDR
// end ;
28801: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28802: LD_EXP 51
28806: PUSH
28807: LD_EXP 70
28811: AND
28812: IFFALSE 28915
28814: GO 28816
28816: DISABLE
28817: LD_INT 0
28819: PPUSH
// begin for i := 1 to 5 do
28820: LD_ADDR_VAR 0 1
28824: PUSH
28825: DOUBLE
28826: LD_INT 1
28828: DEC
28829: ST_TO_ADDR
28830: LD_INT 5
28832: PUSH
28833: FOR_TO
28834: IFFALSE 28913
// begin uc_nation := nation_nature ;
28836: LD_ADDR_OWVAR 21
28840: PUSH
28841: LD_INT 0
28843: ST_TO_ADDR
// uc_side := 0 ;
28844: LD_ADDR_OWVAR 20
28848: PUSH
28849: LD_INT 0
28851: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28852: LD_ADDR_OWVAR 29
28856: PUSH
28857: LD_INT 12
28859: PUSH
28860: LD_INT 12
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// hc_agressivity := 20 ;
28867: LD_ADDR_OWVAR 35
28871: PUSH
28872: LD_INT 20
28874: ST_TO_ADDR
// hc_class := class_tiger ;
28875: LD_ADDR_OWVAR 28
28879: PUSH
28880: LD_INT 14
28882: ST_TO_ADDR
// hc_gallery :=  ;
28883: LD_ADDR_OWVAR 33
28887: PUSH
28888: LD_STRING 
28890: ST_TO_ADDR
// hc_name :=  ;
28891: LD_ADDR_OWVAR 26
28895: PUSH
28896: LD_STRING 
28898: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28899: CALL_OW 44
28903: PPUSH
28904: LD_INT 0
28906: PPUSH
28907: CALL_OW 51
// end ;
28911: GO 28833
28913: POP
28914: POP
// end ;
28915: PPOPN 1
28917: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28918: LD_EXP 51
28922: PUSH
28923: LD_EXP 71
28927: AND
28928: IFFALSE 28937
28930: GO 28932
28932: DISABLE
// StreamSibBomb ;
28933: CALL 28938 0 0
28937: END
// export function StreamSibBomb ; var i , x , y ; begin
28938: LD_INT 0
28940: PPUSH
28941: PPUSH
28942: PPUSH
28943: PPUSH
// result := false ;
28944: LD_ADDR_VAR 0 1
28948: PUSH
28949: LD_INT 0
28951: ST_TO_ADDR
// for i := 1 to 16 do
28952: LD_ADDR_VAR 0 2
28956: PUSH
28957: DOUBLE
28958: LD_INT 1
28960: DEC
28961: ST_TO_ADDR
28962: LD_INT 16
28964: PUSH
28965: FOR_TO
28966: IFFALSE 29165
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28968: LD_ADDR_VAR 0 3
28972: PUSH
28973: LD_INT 10
28975: PUSH
28976: LD_INT 20
28978: PUSH
28979: LD_INT 30
28981: PUSH
28982: LD_INT 40
28984: PUSH
28985: LD_INT 50
28987: PUSH
28988: LD_INT 60
28990: PUSH
28991: LD_INT 70
28993: PUSH
28994: LD_INT 80
28996: PUSH
28997: LD_INT 90
28999: PUSH
29000: LD_INT 100
29002: PUSH
29003: LD_INT 110
29005: PUSH
29006: LD_INT 120
29008: PUSH
29009: LD_INT 130
29011: PUSH
29012: LD_INT 140
29014: PUSH
29015: LD_INT 150
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: PPUSH
29038: LD_INT 15
29040: PPUSH
29041: CALL_OW 12
29045: ARRAY
29046: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29047: LD_ADDR_VAR 0 4
29051: PUSH
29052: LD_INT 10
29054: PUSH
29055: LD_INT 20
29057: PUSH
29058: LD_INT 30
29060: PUSH
29061: LD_INT 40
29063: PUSH
29064: LD_INT 50
29066: PUSH
29067: LD_INT 60
29069: PUSH
29070: LD_INT 70
29072: PUSH
29073: LD_INT 80
29075: PUSH
29076: LD_INT 90
29078: PUSH
29079: LD_INT 100
29081: PUSH
29082: LD_INT 110
29084: PUSH
29085: LD_INT 120
29087: PUSH
29088: LD_INT 130
29090: PUSH
29091: LD_INT 140
29093: PUSH
29094: LD_INT 150
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: PPUSH
29117: LD_INT 15
29119: PPUSH
29120: CALL_OW 12
29124: ARRAY
29125: ST_TO_ADDR
// if ValidHex ( x , y ) then
29126: LD_VAR 0 3
29130: PPUSH
29131: LD_VAR 0 4
29135: PPUSH
29136: CALL_OW 488
29140: IFFALSE 29163
// begin result := [ x , y ] ;
29142: LD_ADDR_VAR 0 1
29146: PUSH
29147: LD_VAR 0 3
29151: PUSH
29152: LD_VAR 0 4
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// break ;
29161: GO 29165
// end ; end ;
29163: GO 28965
29165: POP
29166: POP
// if result then
29167: LD_VAR 0 1
29171: IFFALSE 29231
// begin ToLua ( playSibBomb() ) ;
29173: LD_STRING playSibBomb()
29175: PPUSH
29176: CALL_OW 559
// wait ( 0 0$14 ) ;
29180: LD_INT 490
29182: PPUSH
29183: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29187: LD_VAR 0 1
29191: PUSH
29192: LD_INT 1
29194: ARRAY
29195: PPUSH
29196: LD_VAR 0 1
29200: PUSH
29201: LD_INT 2
29203: ARRAY
29204: PPUSH
29205: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29209: LD_VAR 0 1
29213: PUSH
29214: LD_INT 1
29216: ARRAY
29217: PPUSH
29218: LD_VAR 0 1
29222: PUSH
29223: LD_INT 2
29225: ARRAY
29226: PPUSH
29227: CALL_OW 429
// end ; end ;
29231: LD_VAR 0 1
29235: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29236: LD_EXP 51
29240: PUSH
29241: LD_EXP 73
29245: AND
29246: IFFALSE 29258
29248: GO 29250
29250: DISABLE
// YouLost (  ) ;
29251: LD_STRING 
29253: PPUSH
29254: CALL_OW 104
29258: END
// every 0 0$1 trigger StreamModeActive and sFog do
29259: LD_EXP 51
29263: PUSH
29264: LD_EXP 72
29268: AND
29269: IFFALSE 29283
29271: GO 29273
29273: DISABLE
// FogOff ( your_side ) ;
29274: LD_OWVAR 2
29278: PPUSH
29279: CALL_OW 344
29283: END
// every 0 0$1 trigger StreamModeActive and sSun do
29284: LD_EXP 51
29288: PUSH
29289: LD_EXP 74
29293: AND
29294: IFFALSE 29322
29296: GO 29298
29298: DISABLE
// begin solar_recharge_percent := 0 ;
29299: LD_ADDR_OWVAR 79
29303: PUSH
29304: LD_INT 0
29306: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29307: LD_INT 10500
29309: PPUSH
29310: CALL_OW 67
// solar_recharge_percent := 100 ;
29314: LD_ADDR_OWVAR 79
29318: PUSH
29319: LD_INT 100
29321: ST_TO_ADDR
// end ;
29322: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29323: LD_EXP 51
29327: PUSH
29328: LD_EXP 75
29332: AND
29333: IFFALSE 29572
29335: GO 29337
29337: DISABLE
29338: LD_INT 0
29340: PPUSH
29341: PPUSH
29342: PPUSH
// begin tmp := [ ] ;
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: EMPTY
29349: ST_TO_ADDR
// for i := 1 to 6 do
29350: LD_ADDR_VAR 0 1
29354: PUSH
29355: DOUBLE
29356: LD_INT 1
29358: DEC
29359: ST_TO_ADDR
29360: LD_INT 6
29362: PUSH
29363: FOR_TO
29364: IFFALSE 29469
// begin uc_nation := nation_nature ;
29366: LD_ADDR_OWVAR 21
29370: PUSH
29371: LD_INT 0
29373: ST_TO_ADDR
// uc_side := 0 ;
29374: LD_ADDR_OWVAR 20
29378: PUSH
29379: LD_INT 0
29381: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29382: LD_ADDR_OWVAR 29
29386: PUSH
29387: LD_INT 12
29389: PUSH
29390: LD_INT 12
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: ST_TO_ADDR
// hc_agressivity := 20 ;
29397: LD_ADDR_OWVAR 35
29401: PUSH
29402: LD_INT 20
29404: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29405: LD_ADDR_OWVAR 28
29409: PUSH
29410: LD_INT 17
29412: ST_TO_ADDR
// hc_gallery :=  ;
29413: LD_ADDR_OWVAR 33
29417: PUSH
29418: LD_STRING 
29420: ST_TO_ADDR
// hc_name :=  ;
29421: LD_ADDR_OWVAR 26
29425: PUSH
29426: LD_STRING 
29428: ST_TO_ADDR
// un := CreateHuman ;
29429: LD_ADDR_VAR 0 2
29433: PUSH
29434: CALL_OW 44
29438: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29439: LD_VAR 0 2
29443: PPUSH
29444: LD_INT 1
29446: PPUSH
29447: CALL_OW 51
// tmp := tmp ^ un ;
29451: LD_ADDR_VAR 0 3
29455: PUSH
29456: LD_VAR 0 3
29460: PUSH
29461: LD_VAR 0 2
29465: ADD
29466: ST_TO_ADDR
// end ;
29467: GO 29363
29469: POP
29470: POP
// repeat wait ( 0 0$1 ) ;
29471: LD_INT 35
29473: PPUSH
29474: CALL_OW 67
// for un in tmp do
29478: LD_ADDR_VAR 0 2
29482: PUSH
29483: LD_VAR 0 3
29487: PUSH
29488: FOR_IN
29489: IFFALSE 29563
// begin if IsDead ( un ) then
29491: LD_VAR 0 2
29495: PPUSH
29496: CALL_OW 301
29500: IFFALSE 29520
// begin tmp := tmp diff un ;
29502: LD_ADDR_VAR 0 3
29506: PUSH
29507: LD_VAR 0 3
29511: PUSH
29512: LD_VAR 0 2
29516: DIFF
29517: ST_TO_ADDR
// continue ;
29518: GO 29488
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29520: LD_VAR 0 2
29524: PPUSH
29525: LD_INT 3
29527: PUSH
29528: LD_INT 22
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PPUSH
29542: CALL_OW 69
29546: PPUSH
29547: LD_VAR 0 2
29551: PPUSH
29552: CALL_OW 74
29556: PPUSH
29557: CALL_OW 115
// end ;
29561: GO 29488
29563: POP
29564: POP
// until not tmp ;
29565: LD_VAR 0 3
29569: NOT
29570: IFFALSE 29471
// end ;
29572: PPOPN 3
29574: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29575: LD_EXP 51
29579: PUSH
29580: LD_EXP 76
29584: AND
29585: IFFALSE 29639
29587: GO 29589
29589: DISABLE
// begin ToLua ( displayTroll(); ) ;
29590: LD_STRING displayTroll();
29592: PPUSH
29593: CALL_OW 559
// wait ( 3 3$00 ) ;
29597: LD_INT 6300
29599: PPUSH
29600: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29604: LD_STRING hideTroll();
29606: PPUSH
29607: CALL_OW 559
// wait ( 1 1$00 ) ;
29611: LD_INT 2100
29613: PPUSH
29614: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29618: LD_STRING displayTroll();
29620: PPUSH
29621: CALL_OW 559
// wait ( 1 1$00 ) ;
29625: LD_INT 2100
29627: PPUSH
29628: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29632: LD_STRING hideTroll();
29634: PPUSH
29635: CALL_OW 559
// end ;
29639: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29640: LD_EXP 51
29644: PUSH
29645: LD_EXP 77
29649: AND
29650: IFFALSE 29713
29652: GO 29654
29654: DISABLE
29655: LD_INT 0
29657: PPUSH
// begin p := 0 ;
29658: LD_ADDR_VAR 0 1
29662: PUSH
29663: LD_INT 0
29665: ST_TO_ADDR
// repeat game_speed := 1 ;
29666: LD_ADDR_OWVAR 65
29670: PUSH
29671: LD_INT 1
29673: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29674: LD_INT 35
29676: PPUSH
29677: CALL_OW 67
// p := p + 1 ;
29681: LD_ADDR_VAR 0 1
29685: PUSH
29686: LD_VAR 0 1
29690: PUSH
29691: LD_INT 1
29693: PLUS
29694: ST_TO_ADDR
// until p >= 60 ;
29695: LD_VAR 0 1
29699: PUSH
29700: LD_INT 60
29702: GREATEREQUAL
29703: IFFALSE 29666
// game_speed := 4 ;
29705: LD_ADDR_OWVAR 65
29709: PUSH
29710: LD_INT 4
29712: ST_TO_ADDR
// end ;
29713: PPOPN 1
29715: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29716: LD_EXP 51
29720: PUSH
29721: LD_EXP 78
29725: AND
29726: IFFALSE 29872
29728: GO 29730
29730: DISABLE
29731: LD_INT 0
29733: PPUSH
29734: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29735: LD_ADDR_VAR 0 1
29739: PUSH
29740: LD_INT 22
29742: PUSH
29743: LD_OWVAR 2
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: LD_INT 30
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 30
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PPUSH
29784: CALL_OW 69
29788: ST_TO_ADDR
// if not depot then
29789: LD_VAR 0 1
29793: NOT
29794: IFFALSE 29798
// exit ;
29796: GO 29872
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29798: LD_ADDR_VAR 0 2
29802: PUSH
29803: LD_VAR 0 1
29807: PUSH
29808: LD_INT 1
29810: PPUSH
29811: LD_VAR 0 1
29815: PPUSH
29816: CALL_OW 12
29820: ARRAY
29821: PPUSH
29822: CALL_OW 274
29826: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29827: LD_VAR 0 2
29831: PPUSH
29832: LD_INT 1
29834: PPUSH
29835: LD_INT 0
29837: PPUSH
29838: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29842: LD_VAR 0 2
29846: PPUSH
29847: LD_INT 2
29849: PPUSH
29850: LD_INT 0
29852: PPUSH
29853: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29857: LD_VAR 0 2
29861: PPUSH
29862: LD_INT 3
29864: PPUSH
29865: LD_INT 0
29867: PPUSH
29868: CALL_OW 277
// end ;
29872: PPOPN 2
29874: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29875: LD_EXP 51
29879: PUSH
29880: LD_EXP 79
29884: AND
29885: IFFALSE 29982
29887: GO 29889
29889: DISABLE
29890: LD_INT 0
29892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29893: LD_ADDR_VAR 0 1
29897: PUSH
29898: LD_INT 22
29900: PUSH
29901: LD_OWVAR 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 21
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 3
29922: PUSH
29923: LD_INT 23
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: PPUSH
29942: CALL_OW 69
29946: ST_TO_ADDR
// if not tmp then
29947: LD_VAR 0 1
29951: NOT
29952: IFFALSE 29956
// exit ;
29954: GO 29982
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29956: LD_VAR 0 1
29960: PUSH
29961: LD_INT 1
29963: PPUSH
29964: LD_VAR 0 1
29968: PPUSH
29969: CALL_OW 12
29973: ARRAY
29974: PPUSH
29975: LD_INT 200
29977: PPUSH
29978: CALL_OW 234
// end ;
29982: PPOPN 1
29984: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29985: LD_EXP 51
29989: PUSH
29990: LD_EXP 80
29994: AND
29995: IFFALSE 30074
29997: GO 29999
29999: DISABLE
30000: LD_INT 0
30002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30003: LD_ADDR_VAR 0 1
30007: PUSH
30008: LD_INT 22
30010: PUSH
30011: LD_OWVAR 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 21
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PPUSH
30034: CALL_OW 69
30038: ST_TO_ADDR
// if not tmp then
30039: LD_VAR 0 1
30043: NOT
30044: IFFALSE 30048
// exit ;
30046: GO 30074
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30048: LD_VAR 0 1
30052: PUSH
30053: LD_INT 1
30055: PPUSH
30056: LD_VAR 0 1
30060: PPUSH
30061: CALL_OW 12
30065: ARRAY
30066: PPUSH
30067: LD_INT 60
30069: PPUSH
30070: CALL_OW 234
// end ;
30074: PPOPN 1
30076: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30077: LD_EXP 51
30081: PUSH
30082: LD_EXP 81
30086: AND
30087: IFFALSE 30186
30089: GO 30091
30091: DISABLE
30092: LD_INT 0
30094: PPUSH
30095: PPUSH
// begin enable ;
30096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30097: LD_ADDR_VAR 0 1
30101: PUSH
30102: LD_INT 22
30104: PUSH
30105: LD_OWVAR 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 61
30116: PUSH
30117: EMPTY
30118: LIST
30119: PUSH
30120: LD_INT 33
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: PPUSH
30135: CALL_OW 69
30139: ST_TO_ADDR
// if not tmp then
30140: LD_VAR 0 1
30144: NOT
30145: IFFALSE 30149
// exit ;
30147: GO 30186
// for i in tmp do
30149: LD_ADDR_VAR 0 2
30153: PUSH
30154: LD_VAR 0 1
30158: PUSH
30159: FOR_IN
30160: IFFALSE 30184
// if IsControledBy ( i ) then
30162: LD_VAR 0 2
30166: PPUSH
30167: CALL_OW 312
30171: IFFALSE 30182
// ComUnlink ( i ) ;
30173: LD_VAR 0 2
30177: PPUSH
30178: CALL_OW 136
30182: GO 30159
30184: POP
30185: POP
// end ;
30186: PPOPN 2
30188: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30189: LD_EXP 51
30193: PUSH
30194: LD_EXP 82
30198: AND
30199: IFFALSE 30339
30201: GO 30203
30203: DISABLE
30204: LD_INT 0
30206: PPUSH
30207: PPUSH
// begin ToLua ( displayPowell(); ) ;
30208: LD_STRING displayPowell();
30210: PPUSH
30211: CALL_OW 559
// uc_side := 0 ;
30215: LD_ADDR_OWVAR 20
30219: PUSH
30220: LD_INT 0
30222: ST_TO_ADDR
// uc_nation := 2 ;
30223: LD_ADDR_OWVAR 21
30227: PUSH
30228: LD_INT 2
30230: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30231: LD_ADDR_OWVAR 37
30235: PUSH
30236: LD_INT 14
30238: ST_TO_ADDR
// vc_engine := engine_siberite ;
30239: LD_ADDR_OWVAR 39
30243: PUSH
30244: LD_INT 3
30246: ST_TO_ADDR
// vc_control := control_apeman ;
30247: LD_ADDR_OWVAR 38
30251: PUSH
30252: LD_INT 5
30254: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30255: LD_ADDR_OWVAR 40
30259: PUSH
30260: LD_INT 29
30262: ST_TO_ADDR
// un := CreateVehicle ;
30263: LD_ADDR_VAR 0 2
30267: PUSH
30268: CALL_OW 45
30272: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30273: LD_VAR 0 2
30277: PPUSH
30278: LD_INT 1
30280: PPUSH
30281: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30285: LD_INT 35
30287: PPUSH
30288: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30292: LD_VAR 0 2
30296: PPUSH
30297: LD_INT 22
30299: PUSH
30300: LD_OWVAR 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PPUSH
30309: CALL_OW 69
30313: PPUSH
30314: LD_VAR 0 2
30318: PPUSH
30319: CALL_OW 74
30323: PPUSH
30324: CALL_OW 115
// until IsDead ( un ) ;
30328: LD_VAR 0 2
30332: PPUSH
30333: CALL_OW 301
30337: IFFALSE 30285
// end ;
30339: PPOPN 2
30341: END
// every 0 0$1 trigger StreamModeActive and sStu do
30342: LD_EXP 51
30346: PUSH
30347: LD_EXP 90
30351: AND
30352: IFFALSE 30368
30354: GO 30356
30356: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30357: LD_STRING displayStucuk();
30359: PPUSH
30360: CALL_OW 559
// ResetFog ;
30364: CALL_OW 335
// end ;
30368: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30369: LD_EXP 51
30373: PUSH
30374: LD_EXP 83
30378: AND
30379: IFFALSE 30520
30381: GO 30383
30383: DISABLE
30384: LD_INT 0
30386: PPUSH
30387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30388: LD_ADDR_VAR 0 2
30392: PUSH
30393: LD_INT 22
30395: PUSH
30396: LD_OWVAR 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 21
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PPUSH
30419: CALL_OW 69
30423: ST_TO_ADDR
// if not tmp then
30424: LD_VAR 0 2
30428: NOT
30429: IFFALSE 30433
// exit ;
30431: GO 30520
// un := tmp [ rand ( 1 , tmp ) ] ;
30433: LD_ADDR_VAR 0 1
30437: PUSH
30438: LD_VAR 0 2
30442: PUSH
30443: LD_INT 1
30445: PPUSH
30446: LD_VAR 0 2
30450: PPUSH
30451: CALL_OW 12
30455: ARRAY
30456: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30457: LD_VAR 0 1
30461: PPUSH
30462: LD_INT 0
30464: PPUSH
30465: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30469: LD_VAR 0 1
30473: PPUSH
30474: LD_OWVAR 3
30478: PUSH
30479: LD_VAR 0 1
30483: DIFF
30484: PPUSH
30485: LD_VAR 0 1
30489: PPUSH
30490: CALL_OW 74
30494: PPUSH
30495: CALL_OW 115
// wait ( 0 0$20 ) ;
30499: LD_INT 700
30501: PPUSH
30502: CALL_OW 67
// SetSide ( un , your_side ) ;
30506: LD_VAR 0 1
30510: PPUSH
30511: LD_OWVAR 2
30515: PPUSH
30516: CALL_OW 235
// end ;
30520: PPOPN 2
30522: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30523: LD_EXP 51
30527: PUSH
30528: LD_EXP 84
30532: AND
30533: IFFALSE 30639
30535: GO 30537
30537: DISABLE
30538: LD_INT 0
30540: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30541: LD_ADDR_VAR 0 1
30545: PUSH
30546: LD_INT 22
30548: PUSH
30549: LD_OWVAR 2
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: LD_INT 30
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 30
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PPUSH
30590: CALL_OW 69
30594: ST_TO_ADDR
// if not depot then
30595: LD_VAR 0 1
30599: NOT
30600: IFFALSE 30604
// exit ;
30602: GO 30639
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30604: LD_VAR 0 1
30608: PUSH
30609: LD_INT 1
30611: ARRAY
30612: PPUSH
30613: CALL_OW 250
30617: PPUSH
30618: LD_VAR 0 1
30622: PUSH
30623: LD_INT 1
30625: ARRAY
30626: PPUSH
30627: CALL_OW 251
30631: PPUSH
30632: LD_INT 70
30634: PPUSH
30635: CALL_OW 495
// end ;
30639: PPOPN 1
30641: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30642: LD_EXP 51
30646: PUSH
30647: LD_EXP 85
30651: AND
30652: IFFALSE 30863
30654: GO 30656
30656: DISABLE
30657: LD_INT 0
30659: PPUSH
30660: PPUSH
30661: PPUSH
30662: PPUSH
30663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30664: LD_ADDR_VAR 0 5
30668: PUSH
30669: LD_INT 22
30671: PUSH
30672: LD_OWVAR 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 21
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PPUSH
30695: CALL_OW 69
30699: ST_TO_ADDR
// if not tmp then
30700: LD_VAR 0 5
30704: NOT
30705: IFFALSE 30709
// exit ;
30707: GO 30863
// for i in tmp do
30709: LD_ADDR_VAR 0 1
30713: PUSH
30714: LD_VAR 0 5
30718: PUSH
30719: FOR_IN
30720: IFFALSE 30861
// begin d := rand ( 0 , 5 ) ;
30722: LD_ADDR_VAR 0 4
30726: PUSH
30727: LD_INT 0
30729: PPUSH
30730: LD_INT 5
30732: PPUSH
30733: CALL_OW 12
30737: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30738: LD_ADDR_VAR 0 2
30742: PUSH
30743: LD_VAR 0 1
30747: PPUSH
30748: CALL_OW 250
30752: PPUSH
30753: LD_VAR 0 4
30757: PPUSH
30758: LD_INT 3
30760: PPUSH
30761: LD_INT 12
30763: PPUSH
30764: CALL_OW 12
30768: PPUSH
30769: CALL_OW 272
30773: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30774: LD_ADDR_VAR 0 3
30778: PUSH
30779: LD_VAR 0 1
30783: PPUSH
30784: CALL_OW 251
30788: PPUSH
30789: LD_VAR 0 4
30793: PPUSH
30794: LD_INT 3
30796: PPUSH
30797: LD_INT 12
30799: PPUSH
30800: CALL_OW 12
30804: PPUSH
30805: CALL_OW 273
30809: ST_TO_ADDR
// if ValidHex ( x , y ) then
30810: LD_VAR 0 2
30814: PPUSH
30815: LD_VAR 0 3
30819: PPUSH
30820: CALL_OW 488
30824: IFFALSE 30859
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30826: LD_VAR 0 1
30830: PPUSH
30831: LD_VAR 0 2
30835: PPUSH
30836: LD_VAR 0 3
30840: PPUSH
30841: LD_INT 3
30843: PPUSH
30844: LD_INT 6
30846: PPUSH
30847: CALL_OW 12
30851: PPUSH
30852: LD_INT 1
30854: PPUSH
30855: CALL_OW 483
// end ;
30859: GO 30719
30861: POP
30862: POP
// end ;
30863: PPOPN 5
30865: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30866: LD_EXP 51
30870: PUSH
30871: LD_EXP 86
30875: AND
30876: IFFALSE 30970
30878: GO 30880
30880: DISABLE
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30885: LD_ADDR_VAR 0 2
30889: PUSH
30890: LD_INT 22
30892: PUSH
30893: LD_OWVAR 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 32
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 21
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: PPUSH
30927: CALL_OW 69
30931: ST_TO_ADDR
// if not tmp then
30932: LD_VAR 0 2
30936: NOT
30937: IFFALSE 30941
// exit ;
30939: GO 30970
// for i in tmp do
30941: LD_ADDR_VAR 0 1
30945: PUSH
30946: LD_VAR 0 2
30950: PUSH
30951: FOR_IN
30952: IFFALSE 30968
// SetFuel ( i , 0 ) ;
30954: LD_VAR 0 1
30958: PPUSH
30959: LD_INT 0
30961: PPUSH
30962: CALL_OW 240
30966: GO 30951
30968: POP
30969: POP
// end ;
30970: PPOPN 2
30972: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30973: LD_EXP 51
30977: PUSH
30978: LD_EXP 87
30982: AND
30983: IFFALSE 31049
30985: GO 30987
30987: DISABLE
30988: LD_INT 0
30990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30991: LD_ADDR_VAR 0 1
30995: PUSH
30996: LD_INT 22
30998: PUSH
30999: LD_OWVAR 2
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 30
31010: PUSH
31011: LD_INT 29
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PPUSH
31022: CALL_OW 69
31026: ST_TO_ADDR
// if not tmp then
31027: LD_VAR 0 1
31031: NOT
31032: IFFALSE 31036
// exit ;
31034: GO 31049
// DestroyUnit ( tmp [ 1 ] ) ;
31036: LD_VAR 0 1
31040: PUSH
31041: LD_INT 1
31043: ARRAY
31044: PPUSH
31045: CALL_OW 65
// end ;
31049: PPOPN 1
31051: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31052: LD_EXP 51
31056: PUSH
31057: LD_EXP 89
31061: AND
31062: IFFALSE 31191
31064: GO 31066
31066: DISABLE
31067: LD_INT 0
31069: PPUSH
// begin uc_side := 0 ;
31070: LD_ADDR_OWVAR 20
31074: PUSH
31075: LD_INT 0
31077: ST_TO_ADDR
// uc_nation := nation_arabian ;
31078: LD_ADDR_OWVAR 21
31082: PUSH
31083: LD_INT 2
31085: ST_TO_ADDR
// hc_gallery :=  ;
31086: LD_ADDR_OWVAR 33
31090: PUSH
31091: LD_STRING 
31093: ST_TO_ADDR
// hc_name :=  ;
31094: LD_ADDR_OWVAR 26
31098: PUSH
31099: LD_STRING 
31101: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31102: LD_INT 1
31104: PPUSH
31105: LD_INT 11
31107: PPUSH
31108: LD_INT 10
31110: PPUSH
31111: CALL_OW 380
// un := CreateHuman ;
31115: LD_ADDR_VAR 0 1
31119: PUSH
31120: CALL_OW 44
31124: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31125: LD_VAR 0 1
31129: PPUSH
31130: LD_INT 1
31132: PPUSH
31133: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31137: LD_INT 35
31139: PPUSH
31140: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31144: LD_VAR 0 1
31148: PPUSH
31149: LD_INT 22
31151: PUSH
31152: LD_OWVAR 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PPUSH
31161: CALL_OW 69
31165: PPUSH
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL_OW 74
31175: PPUSH
31176: CALL_OW 115
// until IsDead ( un ) ;
31180: LD_VAR 0 1
31184: PPUSH
31185: CALL_OW 301
31189: IFFALSE 31137
// end ;
31191: PPOPN 1
31193: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31194: LD_EXP 51
31198: PUSH
31199: LD_EXP 91
31203: AND
31204: IFFALSE 31216
31206: GO 31208
31208: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31209: LD_STRING earthquake(getX(game), 0, 32)
31211: PPUSH
31212: CALL_OW 559
31216: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31217: LD_EXP 51
31221: PUSH
31222: LD_EXP 92
31226: AND
31227: IFFALSE 31318
31229: GO 31231
31231: DISABLE
31232: LD_INT 0
31234: PPUSH
// begin enable ;
31235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31236: LD_ADDR_VAR 0 1
31240: PUSH
31241: LD_INT 22
31243: PUSH
31244: LD_OWVAR 2
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 21
31255: PUSH
31256: LD_INT 2
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 33
31265: PUSH
31266: LD_INT 3
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: PPUSH
31278: CALL_OW 69
31282: ST_TO_ADDR
// if not tmp then
31283: LD_VAR 0 1
31287: NOT
31288: IFFALSE 31292
// exit ;
31290: GO 31318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31292: LD_VAR 0 1
31296: PUSH
31297: LD_INT 1
31299: PPUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 12
31309: ARRAY
31310: PPUSH
31311: LD_INT 1
31313: PPUSH
31314: CALL_OW 234
// end ;
31318: PPOPN 1
31320: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31321: LD_EXP 51
31325: PUSH
31326: LD_EXP 93
31330: AND
31331: IFFALSE 31472
31333: GO 31335
31335: DISABLE
31336: LD_INT 0
31338: PPUSH
31339: PPUSH
31340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31341: LD_ADDR_VAR 0 3
31345: PUSH
31346: LD_INT 22
31348: PUSH
31349: LD_OWVAR 2
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 25
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PPUSH
31372: CALL_OW 69
31376: ST_TO_ADDR
// if not tmp then
31377: LD_VAR 0 3
31381: NOT
31382: IFFALSE 31386
// exit ;
31384: GO 31472
// un := tmp [ rand ( 1 , tmp ) ] ;
31386: LD_ADDR_VAR 0 2
31390: PUSH
31391: LD_VAR 0 3
31395: PUSH
31396: LD_INT 1
31398: PPUSH
31399: LD_VAR 0 3
31403: PPUSH
31404: CALL_OW 12
31408: ARRAY
31409: ST_TO_ADDR
// if Crawls ( un ) then
31410: LD_VAR 0 2
31414: PPUSH
31415: CALL_OW 318
31419: IFFALSE 31430
// ComWalk ( un ) ;
31421: LD_VAR 0 2
31425: PPUSH
31426: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31430: LD_VAR 0 2
31434: PPUSH
31435: LD_INT 9
31437: PPUSH
31438: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31442: LD_INT 28
31444: PPUSH
31445: LD_OWVAR 2
31449: PPUSH
31450: LD_INT 2
31452: PPUSH
31453: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31457: LD_INT 29
31459: PPUSH
31460: LD_OWVAR 2
31464: PPUSH
31465: LD_INT 2
31467: PPUSH
31468: CALL_OW 322
// end ;
31472: PPOPN 3
31474: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31475: LD_EXP 51
31479: PUSH
31480: LD_EXP 94
31484: AND
31485: IFFALSE 31596
31487: GO 31489
31489: DISABLE
31490: LD_INT 0
31492: PPUSH
31493: PPUSH
31494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31495: LD_ADDR_VAR 0 3
31499: PUSH
31500: LD_INT 22
31502: PUSH
31503: LD_OWVAR 2
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 25
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PPUSH
31526: CALL_OW 69
31530: ST_TO_ADDR
// if not tmp then
31531: LD_VAR 0 3
31535: NOT
31536: IFFALSE 31540
// exit ;
31538: GO 31596
// un := tmp [ rand ( 1 , tmp ) ] ;
31540: LD_ADDR_VAR 0 2
31544: PUSH
31545: LD_VAR 0 3
31549: PUSH
31550: LD_INT 1
31552: PPUSH
31553: LD_VAR 0 3
31557: PPUSH
31558: CALL_OW 12
31562: ARRAY
31563: ST_TO_ADDR
// if Crawls ( un ) then
31564: LD_VAR 0 2
31568: PPUSH
31569: CALL_OW 318
31573: IFFALSE 31584
// ComWalk ( un ) ;
31575: LD_VAR 0 2
31579: PPUSH
31580: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31584: LD_VAR 0 2
31588: PPUSH
31589: LD_INT 8
31591: PPUSH
31592: CALL_OW 336
// end ;
31596: PPOPN 3
31598: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31599: LD_EXP 51
31603: PUSH
31604: LD_EXP 95
31608: AND
31609: IFFALSE 31753
31611: GO 31613
31613: DISABLE
31614: LD_INT 0
31616: PPUSH
31617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31618: LD_ADDR_VAR 0 2
31622: PUSH
31623: LD_INT 22
31625: PUSH
31626: LD_OWVAR 2
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 21
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 34
31650: PUSH
31651: LD_INT 12
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 34
31660: PUSH
31661: LD_INT 51
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 34
31670: PUSH
31671: LD_INT 32
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: PPUSH
31689: CALL_OW 69
31693: ST_TO_ADDR
// if not tmp then
31694: LD_VAR 0 2
31698: NOT
31699: IFFALSE 31703
// exit ;
31701: GO 31753
// for i in tmp do
31703: LD_ADDR_VAR 0 1
31707: PUSH
31708: LD_VAR 0 2
31712: PUSH
31713: FOR_IN
31714: IFFALSE 31751
// if GetCargo ( i , mat_artifact ) = 0 then
31716: LD_VAR 0 1
31720: PPUSH
31721: LD_INT 4
31723: PPUSH
31724: CALL_OW 289
31728: PUSH
31729: LD_INT 0
31731: EQUAL
31732: IFFALSE 31749
// SetCargo ( i , mat_siberit , 100 ) ;
31734: LD_VAR 0 1
31738: PPUSH
31739: LD_INT 3
31741: PPUSH
31742: LD_INT 100
31744: PPUSH
31745: CALL_OW 290
31749: GO 31713
31751: POP
31752: POP
// end ;
31753: PPOPN 2
31755: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31756: LD_EXP 51
31760: PUSH
31761: LD_EXP 96
31765: AND
31766: IFFALSE 31949
31768: GO 31770
31770: DISABLE
31771: LD_INT 0
31773: PPUSH
31774: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31775: LD_ADDR_VAR 0 2
31779: PUSH
31780: LD_INT 22
31782: PUSH
31783: LD_OWVAR 2
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PPUSH
31792: CALL_OW 69
31796: ST_TO_ADDR
// if not tmp then
31797: LD_VAR 0 2
31801: NOT
31802: IFFALSE 31806
// exit ;
31804: GO 31949
// for i := 1 to 2 do
31806: LD_ADDR_VAR 0 1
31810: PUSH
31811: DOUBLE
31812: LD_INT 1
31814: DEC
31815: ST_TO_ADDR
31816: LD_INT 2
31818: PUSH
31819: FOR_TO
31820: IFFALSE 31947
// begin uc_side := your_side ;
31822: LD_ADDR_OWVAR 20
31826: PUSH
31827: LD_OWVAR 2
31831: ST_TO_ADDR
// uc_nation := nation_american ;
31832: LD_ADDR_OWVAR 21
31836: PUSH
31837: LD_INT 1
31839: ST_TO_ADDR
// vc_chassis := us_morphling ;
31840: LD_ADDR_OWVAR 37
31844: PUSH
31845: LD_INT 5
31847: ST_TO_ADDR
// vc_engine := engine_siberite ;
31848: LD_ADDR_OWVAR 39
31852: PUSH
31853: LD_INT 3
31855: ST_TO_ADDR
// vc_control := control_computer ;
31856: LD_ADDR_OWVAR 38
31860: PUSH
31861: LD_INT 3
31863: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31864: LD_ADDR_OWVAR 40
31868: PUSH
31869: LD_INT 10
31871: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31872: LD_VAR 0 2
31876: PUSH
31877: LD_INT 1
31879: ARRAY
31880: PPUSH
31881: CALL_OW 310
31885: NOT
31886: IFFALSE 31933
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31888: CALL_OW 45
31892: PPUSH
31893: LD_VAR 0 2
31897: PUSH
31898: LD_INT 1
31900: ARRAY
31901: PPUSH
31902: CALL_OW 250
31906: PPUSH
31907: LD_VAR 0 2
31911: PUSH
31912: LD_INT 1
31914: ARRAY
31915: PPUSH
31916: CALL_OW 251
31920: PPUSH
31921: LD_INT 12
31923: PPUSH
31924: LD_INT 1
31926: PPUSH
31927: CALL_OW 50
31931: GO 31945
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31933: CALL_OW 45
31937: PPUSH
31938: LD_INT 1
31940: PPUSH
31941: CALL_OW 51
// end ;
31945: GO 31819
31947: POP
31948: POP
// end ;
31949: PPOPN 2
31951: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31952: LD_EXP 51
31956: PUSH
31957: LD_EXP 97
31961: AND
31962: IFFALSE 32184
31964: GO 31966
31966: DISABLE
31967: LD_INT 0
31969: PPUSH
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
31974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31975: LD_ADDR_VAR 0 6
31979: PUSH
31980: LD_INT 22
31982: PUSH
31983: LD_OWVAR 2
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 21
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: LD_INT 23
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: LIST
32023: PPUSH
32024: CALL_OW 69
32028: ST_TO_ADDR
// if not tmp then
32029: LD_VAR 0 6
32033: NOT
32034: IFFALSE 32038
// exit ;
32036: GO 32184
// s1 := rand ( 1 , 4 ) ;
32038: LD_ADDR_VAR 0 2
32042: PUSH
32043: LD_INT 1
32045: PPUSH
32046: LD_INT 4
32048: PPUSH
32049: CALL_OW 12
32053: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32054: LD_ADDR_VAR 0 4
32058: PUSH
32059: LD_VAR 0 6
32063: PUSH
32064: LD_INT 1
32066: ARRAY
32067: PPUSH
32068: LD_VAR 0 2
32072: PPUSH
32073: CALL_OW 259
32077: ST_TO_ADDR
// if s1 = 1 then
32078: LD_VAR 0 2
32082: PUSH
32083: LD_INT 1
32085: EQUAL
32086: IFFALSE 32106
// s2 := rand ( 2 , 4 ) else
32088: LD_ADDR_VAR 0 3
32092: PUSH
32093: LD_INT 2
32095: PPUSH
32096: LD_INT 4
32098: PPUSH
32099: CALL_OW 12
32103: ST_TO_ADDR
32104: GO 32114
// s2 := 1 ;
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_INT 1
32113: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32114: LD_ADDR_VAR 0 5
32118: PUSH
32119: LD_VAR 0 6
32123: PUSH
32124: LD_INT 1
32126: ARRAY
32127: PPUSH
32128: LD_VAR 0 3
32132: PPUSH
32133: CALL_OW 259
32137: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32138: LD_VAR 0 6
32142: PUSH
32143: LD_INT 1
32145: ARRAY
32146: PPUSH
32147: LD_VAR 0 2
32151: PPUSH
32152: LD_VAR 0 5
32156: PPUSH
32157: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32161: LD_VAR 0 6
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 3
32174: PPUSH
32175: LD_VAR 0 4
32179: PPUSH
32180: CALL_OW 237
// end ;
32184: PPOPN 6
32186: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32187: LD_EXP 51
32191: PUSH
32192: LD_EXP 98
32196: AND
32197: IFFALSE 32276
32199: GO 32201
32201: DISABLE
32202: LD_INT 0
32204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32205: LD_ADDR_VAR 0 1
32209: PUSH
32210: LD_INT 22
32212: PUSH
32213: LD_OWVAR 2
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 30
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PPUSH
32236: CALL_OW 69
32240: ST_TO_ADDR
// if not tmp then
32241: LD_VAR 0 1
32245: NOT
32246: IFFALSE 32250
// exit ;
32248: GO 32276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32250: LD_VAR 0 1
32254: PUSH
32255: LD_INT 1
32257: PPUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 12
32267: ARRAY
32268: PPUSH
32269: LD_INT 1
32271: PPUSH
32272: CALL_OW 234
// end ;
32276: PPOPN 1
32278: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32279: LD_EXP 51
32283: PUSH
32284: LD_EXP 99
32288: AND
32289: IFFALSE 32401
32291: GO 32293
32293: DISABLE
32294: LD_INT 0
32296: PPUSH
32297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32298: LD_ADDR_VAR 0 2
32302: PUSH
32303: LD_INT 22
32305: PUSH
32306: LD_OWVAR 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: LD_INT 30
32320: PUSH
32321: LD_INT 27
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 30
32330: PUSH
32331: LD_INT 26
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 30
32340: PUSH
32341: LD_INT 28
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PPUSH
32358: CALL_OW 69
32362: ST_TO_ADDR
// if not tmp then
32363: LD_VAR 0 2
32367: NOT
32368: IFFALSE 32372
// exit ;
32370: GO 32401
// for i in tmp do
32372: LD_ADDR_VAR 0 1
32376: PUSH
32377: LD_VAR 0 2
32381: PUSH
32382: FOR_IN
32383: IFFALSE 32399
// SetLives ( i , 1 ) ;
32385: LD_VAR 0 1
32389: PPUSH
32390: LD_INT 1
32392: PPUSH
32393: CALL_OW 234
32397: GO 32382
32399: POP
32400: POP
// end ;
32401: PPOPN 2
32403: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32404: LD_EXP 51
32408: PUSH
32409: LD_EXP 100
32413: AND
32414: IFFALSE 32701
32416: GO 32418
32418: DISABLE
32419: LD_INT 0
32421: PPUSH
32422: PPUSH
32423: PPUSH
// begin i := rand ( 1 , 7 ) ;
32424: LD_ADDR_VAR 0 1
32428: PUSH
32429: LD_INT 1
32431: PPUSH
32432: LD_INT 7
32434: PPUSH
32435: CALL_OW 12
32439: ST_TO_ADDR
// case i of 1 :
32440: LD_VAR 0 1
32444: PUSH
32445: LD_INT 1
32447: DOUBLE
32448: EQUAL
32449: IFTRUE 32453
32451: GO 32463
32453: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32454: LD_STRING earthquake(getX(game), 0, 32)
32456: PPUSH
32457: CALL_OW 559
32461: GO 32701
32463: LD_INT 2
32465: DOUBLE
32466: EQUAL
32467: IFTRUE 32471
32469: GO 32485
32471: POP
// begin ToLua ( displayStucuk(); ) ;
32472: LD_STRING displayStucuk();
32474: PPUSH
32475: CALL_OW 559
// ResetFog ;
32479: CALL_OW 335
// end ; 3 :
32483: GO 32701
32485: LD_INT 3
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32493
32491: GO 32597
32493: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32494: LD_ADDR_VAR 0 2
32498: PUSH
32499: LD_INT 22
32501: PUSH
32502: LD_OWVAR 2
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 25
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PPUSH
32525: CALL_OW 69
32529: ST_TO_ADDR
// if not tmp then
32530: LD_VAR 0 2
32534: NOT
32535: IFFALSE 32539
// exit ;
32537: GO 32701
// un := tmp [ rand ( 1 , tmp ) ] ;
32539: LD_ADDR_VAR 0 3
32543: PUSH
32544: LD_VAR 0 2
32548: PUSH
32549: LD_INT 1
32551: PPUSH
32552: LD_VAR 0 2
32556: PPUSH
32557: CALL_OW 12
32561: ARRAY
32562: ST_TO_ADDR
// if Crawls ( un ) then
32563: LD_VAR 0 3
32567: PPUSH
32568: CALL_OW 318
32572: IFFALSE 32583
// ComWalk ( un ) ;
32574: LD_VAR 0 3
32578: PPUSH
32579: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32583: LD_VAR 0 3
32587: PPUSH
32588: LD_INT 8
32590: PPUSH
32591: CALL_OW 336
// end ; 4 :
32595: GO 32701
32597: LD_INT 4
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32605
32603: GO 32679
32605: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32606: LD_ADDR_VAR 0 2
32610: PUSH
32611: LD_INT 22
32613: PUSH
32614: LD_OWVAR 2
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 30
32625: PUSH
32626: LD_INT 29
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PPUSH
32637: CALL_OW 69
32641: ST_TO_ADDR
// if not tmp then
32642: LD_VAR 0 2
32646: NOT
32647: IFFALSE 32651
// exit ;
32649: GO 32701
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32651: LD_VAR 0 2
32655: PUSH
32656: LD_INT 1
32658: ARRAY
32659: PPUSH
32660: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32664: LD_VAR 0 2
32668: PUSH
32669: LD_INT 1
32671: ARRAY
32672: PPUSH
32673: CALL_OW 65
// end ; 5 .. 7 :
32677: GO 32701
32679: LD_INT 5
32681: DOUBLE
32682: GREATEREQUAL
32683: IFFALSE 32691
32685: LD_INT 7
32687: DOUBLE
32688: LESSEQUAL
32689: IFTRUE 32693
32691: GO 32700
32693: POP
// StreamSibBomb ; end ;
32694: CALL 28938 0 0
32698: GO 32701
32700: POP
// end ;
32701: PPOPN 3
32703: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32704: LD_EXP 51
32708: PUSH
32709: LD_EXP 101
32713: AND
32714: IFFALSE 32870
32716: GO 32718
32718: DISABLE
32719: LD_INT 0
32721: PPUSH
32722: PPUSH
32723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32724: LD_ADDR_VAR 0 2
32728: PUSH
32729: LD_INT 81
32731: PUSH
32732: LD_OWVAR 2
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 21
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 21
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: LIST
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PPUSH
32773: CALL_OW 69
32777: ST_TO_ADDR
// if not tmp then
32778: LD_VAR 0 2
32782: NOT
32783: IFFALSE 32787
// exit ;
32785: GO 32870
// p := 0 ;
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_INT 0
32794: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32795: LD_INT 35
32797: PPUSH
32798: CALL_OW 67
// p := p + 1 ;
32802: LD_ADDR_VAR 0 3
32806: PUSH
32807: LD_VAR 0 3
32811: PUSH
32812: LD_INT 1
32814: PLUS
32815: ST_TO_ADDR
// for i in tmp do
32816: LD_ADDR_VAR 0 1
32820: PUSH
32821: LD_VAR 0 2
32825: PUSH
32826: FOR_IN
32827: IFFALSE 32858
// if GetLives ( i ) < 1000 then
32829: LD_VAR 0 1
32833: PPUSH
32834: CALL_OW 256
32838: PUSH
32839: LD_INT 1000
32841: LESS
32842: IFFALSE 32856
// SetLives ( i , 1000 ) ;
32844: LD_VAR 0 1
32848: PPUSH
32849: LD_INT 1000
32851: PPUSH
32852: CALL_OW 234
32856: GO 32826
32858: POP
32859: POP
// until p > 20 ;
32860: LD_VAR 0 3
32864: PUSH
32865: LD_INT 20
32867: GREATER
32868: IFFALSE 32795
// end ;
32870: PPOPN 3
32872: END
// every 0 0$1 trigger StreamModeActive and sTime do
32873: LD_EXP 51
32877: PUSH
32878: LD_EXP 102
32882: AND
32883: IFFALSE 32918
32885: GO 32887
32887: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32888: LD_INT 28
32890: PPUSH
32891: LD_OWVAR 2
32895: PPUSH
32896: LD_INT 2
32898: PPUSH
32899: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32903: LD_INT 30
32905: PPUSH
32906: LD_OWVAR 2
32910: PPUSH
32911: LD_INT 2
32913: PPUSH
32914: CALL_OW 322
// end ;
32918: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32919: LD_EXP 51
32923: PUSH
32924: LD_EXP 103
32928: AND
32929: IFFALSE 33050
32931: GO 32933
32933: DISABLE
32934: LD_INT 0
32936: PPUSH
32937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32938: LD_ADDR_VAR 0 2
32942: PUSH
32943: LD_INT 22
32945: PUSH
32946: LD_OWVAR 2
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 21
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 3
32967: PUSH
32968: LD_INT 23
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: LIST
32986: PPUSH
32987: CALL_OW 69
32991: ST_TO_ADDR
// if not tmp then
32992: LD_VAR 0 2
32996: NOT
32997: IFFALSE 33001
// exit ;
32999: GO 33050
// for i in tmp do
33001: LD_ADDR_VAR 0 1
33005: PUSH
33006: LD_VAR 0 2
33010: PUSH
33011: FOR_IN
33012: IFFALSE 33048
// begin if Crawls ( i ) then
33014: LD_VAR 0 1
33018: PPUSH
33019: CALL_OW 318
33023: IFFALSE 33034
// ComWalk ( i ) ;
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 138
// SetClass ( i , 2 ) ;
33034: LD_VAR 0 1
33038: PPUSH
33039: LD_INT 2
33041: PPUSH
33042: CALL_OW 336
// end ;
33046: GO 33011
33048: POP
33049: POP
// end ;
33050: PPOPN 2
33052: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33053: LD_EXP 51
33057: PUSH
33058: LD_EXP 104
33062: AND
33063: IFFALSE 33351
33065: GO 33067
33067: DISABLE
33068: LD_INT 0
33070: PPUSH
33071: PPUSH
33072: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33073: LD_OWVAR 2
33077: PPUSH
33078: LD_INT 9
33080: PPUSH
33081: LD_INT 1
33083: PPUSH
33084: LD_INT 1
33086: PPUSH
33087: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33091: LD_INT 9
33093: PPUSH
33094: LD_OWVAR 2
33098: PPUSH
33099: CALL_OW 343
// uc_side := 9 ;
33103: LD_ADDR_OWVAR 20
33107: PUSH
33108: LD_INT 9
33110: ST_TO_ADDR
// uc_nation := 2 ;
33111: LD_ADDR_OWVAR 21
33115: PUSH
33116: LD_INT 2
33118: ST_TO_ADDR
// hc_name := Dark Warrior ;
33119: LD_ADDR_OWVAR 26
33123: PUSH
33124: LD_STRING Dark Warrior
33126: ST_TO_ADDR
// hc_gallery :=  ;
33127: LD_ADDR_OWVAR 33
33131: PUSH
33132: LD_STRING 
33134: ST_TO_ADDR
// hc_noskilllimit := true ;
33135: LD_ADDR_OWVAR 76
33139: PUSH
33140: LD_INT 1
33142: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33143: LD_ADDR_OWVAR 31
33147: PUSH
33148: LD_INT 30
33150: PUSH
33151: LD_INT 30
33153: PUSH
33154: LD_INT 30
33156: PUSH
33157: LD_INT 30
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: ST_TO_ADDR
// un := CreateHuman ;
33166: LD_ADDR_VAR 0 3
33170: PUSH
33171: CALL_OW 44
33175: ST_TO_ADDR
// hc_noskilllimit := false ;
33176: LD_ADDR_OWVAR 76
33180: PUSH
33181: LD_INT 0
33183: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33184: LD_VAR 0 3
33188: PPUSH
33189: LD_INT 1
33191: PPUSH
33192: CALL_OW 51
// ToLua ( playRanger() ) ;
33196: LD_STRING playRanger()
33198: PPUSH
33199: CALL_OW 559
// p := 0 ;
33203: LD_ADDR_VAR 0 2
33207: PUSH
33208: LD_INT 0
33210: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33211: LD_INT 35
33213: PPUSH
33214: CALL_OW 67
// p := p + 1 ;
33218: LD_ADDR_VAR 0 2
33222: PUSH
33223: LD_VAR 0 2
33227: PUSH
33228: LD_INT 1
33230: PLUS
33231: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33232: LD_VAR 0 3
33236: PPUSH
33237: CALL_OW 256
33241: PUSH
33242: LD_INT 1000
33244: LESS
33245: IFFALSE 33259
// SetLives ( un , 1000 ) ;
33247: LD_VAR 0 3
33251: PPUSH
33252: LD_INT 1000
33254: PPUSH
33255: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33259: LD_VAR 0 3
33263: PPUSH
33264: LD_INT 81
33266: PUSH
33267: LD_OWVAR 2
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 91
33278: PUSH
33279: LD_VAR 0 3
33283: PUSH
33284: LD_INT 30
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PPUSH
33296: CALL_OW 69
33300: PPUSH
33301: LD_VAR 0 3
33305: PPUSH
33306: CALL_OW 74
33310: PPUSH
33311: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33315: LD_VAR 0 2
33319: PUSH
33320: LD_INT 80
33322: GREATER
33323: PUSH
33324: LD_VAR 0 3
33328: PPUSH
33329: CALL_OW 301
33333: OR
33334: IFFALSE 33211
// if un then
33336: LD_VAR 0 3
33340: IFFALSE 33351
// RemoveUnit ( un ) ;
33342: LD_VAR 0 3
33346: PPUSH
33347: CALL_OW 64
// end ;
33351: PPOPN 3
33353: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33354: LD_EXP 105
33358: IFFALSE 33474
33360: GO 33362
33362: DISABLE
33363: LD_INT 0
33365: PPUSH
33366: PPUSH
33367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33368: LD_ADDR_VAR 0 2
33372: PUSH
33373: LD_INT 81
33375: PUSH
33376: LD_OWVAR 2
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 21
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PPUSH
33399: CALL_OW 69
33403: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33404: LD_STRING playComputer()
33406: PPUSH
33407: CALL_OW 559
// if not tmp then
33411: LD_VAR 0 2
33415: NOT
33416: IFFALSE 33420
// exit ;
33418: GO 33474
// for i in tmp do
33420: LD_ADDR_VAR 0 1
33424: PUSH
33425: LD_VAR 0 2
33429: PUSH
33430: FOR_IN
33431: IFFALSE 33472
// for j := 1 to 4 do
33433: LD_ADDR_VAR 0 3
33437: PUSH
33438: DOUBLE
33439: LD_INT 1
33441: DEC
33442: ST_TO_ADDR
33443: LD_INT 4
33445: PUSH
33446: FOR_TO
33447: IFFALSE 33468
// SetSkill ( i , j , 10 ) ;
33449: LD_VAR 0 1
33453: PPUSH
33454: LD_VAR 0 3
33458: PPUSH
33459: LD_INT 10
33461: PPUSH
33462: CALL_OW 237
33466: GO 33446
33468: POP
33469: POP
33470: GO 33430
33472: POP
33473: POP
// end ;
33474: PPOPN 3
33476: END
// every 0 0$1 trigger s30 do var i , tmp ;
33477: LD_EXP 106
33481: IFFALSE 33550
33483: GO 33485
33485: DISABLE
33486: LD_INT 0
33488: PPUSH
33489: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33490: LD_ADDR_VAR 0 2
33494: PUSH
33495: LD_INT 22
33497: PUSH
33498: LD_OWVAR 2
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PPUSH
33507: CALL_OW 69
33511: ST_TO_ADDR
// if not tmp then
33512: LD_VAR 0 2
33516: NOT
33517: IFFALSE 33521
// exit ;
33519: GO 33550
// for i in tmp do
33521: LD_ADDR_VAR 0 1
33525: PUSH
33526: LD_VAR 0 2
33530: PUSH
33531: FOR_IN
33532: IFFALSE 33548
// SetLives ( i , 300 ) ;
33534: LD_VAR 0 1
33538: PPUSH
33539: LD_INT 300
33541: PPUSH
33542: CALL_OW 234
33546: GO 33531
33548: POP
33549: POP
// end ;
33550: PPOPN 2
33552: END
// every 0 0$1 trigger s60 do var i , tmp ;
33553: LD_EXP 107
33557: IFFALSE 33626
33559: GO 33561
33561: DISABLE
33562: LD_INT 0
33564: PPUSH
33565: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33566: LD_ADDR_VAR 0 2
33570: PUSH
33571: LD_INT 22
33573: PUSH
33574: LD_OWVAR 2
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PPUSH
33583: CALL_OW 69
33587: ST_TO_ADDR
// if not tmp then
33588: LD_VAR 0 2
33592: NOT
33593: IFFALSE 33597
// exit ;
33595: GO 33626
// for i in tmp do
33597: LD_ADDR_VAR 0 1
33601: PUSH
33602: LD_VAR 0 2
33606: PUSH
33607: FOR_IN
33608: IFFALSE 33624
// SetLives ( i , 600 ) ;
33610: LD_VAR 0 1
33614: PPUSH
33615: LD_INT 600
33617: PPUSH
33618: CALL_OW 234
33622: GO 33607
33624: POP
33625: POP
// end ;
33626: PPOPN 2
33628: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33629: LD_INT 0
33631: PPUSH
// case cmd of 301 :
33632: LD_VAR 0 1
33636: PUSH
33637: LD_INT 301
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33645
33643: GO 33677
33645: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33646: LD_VAR 0 6
33650: PPUSH
33651: LD_VAR 0 7
33655: PPUSH
33656: LD_VAR 0 8
33660: PPUSH
33661: LD_VAR 0 4
33665: PPUSH
33666: LD_VAR 0 5
33670: PPUSH
33671: CALL 34878 0 5
33675: GO 33798
33677: LD_INT 302
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33722
33685: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33686: LD_VAR 0 6
33690: PPUSH
33691: LD_VAR 0 7
33695: PPUSH
33696: LD_VAR 0 8
33700: PPUSH
33701: LD_VAR 0 9
33705: PPUSH
33706: LD_VAR 0 4
33710: PPUSH
33711: LD_VAR 0 5
33715: PPUSH
33716: CALL 34969 0 6
33720: GO 33798
33722: LD_INT 303
33724: DOUBLE
33725: EQUAL
33726: IFTRUE 33730
33728: GO 33767
33730: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33731: LD_VAR 0 6
33735: PPUSH
33736: LD_VAR 0 7
33740: PPUSH
33741: LD_VAR 0 8
33745: PPUSH
33746: LD_VAR 0 9
33750: PPUSH
33751: LD_VAR 0 4
33755: PPUSH
33756: LD_VAR 0 5
33760: PPUSH
33761: CALL 33803 0 6
33765: GO 33798
33767: LD_INT 304
33769: DOUBLE
33770: EQUAL
33771: IFTRUE 33775
33773: GO 33797
33775: POP
// hHackTeleport ( unit , x , y ) ; end ;
33776: LD_VAR 0 2
33780: PPUSH
33781: LD_VAR 0 4
33785: PPUSH
33786: LD_VAR 0 5
33790: PPUSH
33791: CALL 35562 0 3
33795: GO 33798
33797: POP
// end ;
33798: LD_VAR 0 12
33802: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33803: LD_INT 0
33805: PPUSH
33806: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33807: LD_VAR 0 1
33811: PUSH
33812: LD_INT 1
33814: LESS
33815: PUSH
33816: LD_VAR 0 1
33820: PUSH
33821: LD_INT 3
33823: GREATER
33824: OR
33825: PUSH
33826: LD_VAR 0 5
33830: PPUSH
33831: LD_VAR 0 6
33835: PPUSH
33836: CALL_OW 428
33840: OR
33841: IFFALSE 33845
// exit ;
33843: GO 34565
// uc_side := your_side ;
33845: LD_ADDR_OWVAR 20
33849: PUSH
33850: LD_OWVAR 2
33854: ST_TO_ADDR
// uc_nation := nation ;
33855: LD_ADDR_OWVAR 21
33859: PUSH
33860: LD_VAR 0 1
33864: ST_TO_ADDR
// bc_level = 1 ;
33865: LD_ADDR_OWVAR 43
33869: PUSH
33870: LD_INT 1
33872: ST_TO_ADDR
// case btype of 1 :
33873: LD_VAR 0 2
33877: PUSH
33878: LD_INT 1
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33897
33886: POP
// bc_type := b_depot ; 2 :
33887: LD_ADDR_OWVAR 42
33891: PUSH
33892: LD_INT 0
33894: ST_TO_ADDR
33895: GO 34509
33897: LD_INT 2
33899: DOUBLE
33900: EQUAL
33901: IFTRUE 33905
33903: GO 33916
33905: POP
// bc_type := b_warehouse ; 3 :
33906: LD_ADDR_OWVAR 42
33910: PUSH
33911: LD_INT 1
33913: ST_TO_ADDR
33914: GO 34509
33916: LD_INT 3
33918: DOUBLE
33919: EQUAL
33920: IFTRUE 33924
33922: GO 33935
33924: POP
// bc_type := b_lab ; 4 .. 9 :
33925: LD_ADDR_OWVAR 42
33929: PUSH
33930: LD_INT 6
33932: ST_TO_ADDR
33933: GO 34509
33935: LD_INT 4
33937: DOUBLE
33938: GREATEREQUAL
33939: IFFALSE 33947
33941: LD_INT 9
33943: DOUBLE
33944: LESSEQUAL
33945: IFTRUE 33949
33947: GO 34001
33949: POP
// begin bc_type := b_lab_half ;
33950: LD_ADDR_OWVAR 42
33954: PUSH
33955: LD_INT 7
33957: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33958: LD_ADDR_OWVAR 44
33962: PUSH
33963: LD_INT 10
33965: PUSH
33966: LD_INT 11
33968: PUSH
33969: LD_INT 12
33971: PUSH
33972: LD_INT 15
33974: PUSH
33975: LD_INT 14
33977: PUSH
33978: LD_INT 13
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: PUSH
33989: LD_VAR 0 2
33993: PUSH
33994: LD_INT 3
33996: MINUS
33997: ARRAY
33998: ST_TO_ADDR
// end ; 10 .. 13 :
33999: GO 34509
34001: LD_INT 10
34003: DOUBLE
34004: GREATEREQUAL
34005: IFFALSE 34013
34007: LD_INT 13
34009: DOUBLE
34010: LESSEQUAL
34011: IFTRUE 34015
34013: GO 34092
34015: POP
// begin bc_type := b_lab_full ;
34016: LD_ADDR_OWVAR 42
34020: PUSH
34021: LD_INT 8
34023: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34024: LD_ADDR_OWVAR 44
34028: PUSH
34029: LD_INT 10
34031: PUSH
34032: LD_INT 12
34034: PUSH
34035: LD_INT 14
34037: PUSH
34038: LD_INT 13
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: PUSH
34047: LD_VAR 0 2
34051: PUSH
34052: LD_INT 9
34054: MINUS
34055: ARRAY
34056: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34057: LD_ADDR_OWVAR 45
34061: PUSH
34062: LD_INT 11
34064: PUSH
34065: LD_INT 15
34067: PUSH
34068: LD_INT 12
34070: PUSH
34071: LD_INT 15
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: LD_VAR 0 2
34084: PUSH
34085: LD_INT 9
34087: MINUS
34088: ARRAY
34089: ST_TO_ADDR
// end ; 14 :
34090: GO 34509
34092: LD_INT 14
34094: DOUBLE
34095: EQUAL
34096: IFTRUE 34100
34098: GO 34111
34100: POP
// bc_type := b_workshop ; 15 :
34101: LD_ADDR_OWVAR 42
34105: PUSH
34106: LD_INT 2
34108: ST_TO_ADDR
34109: GO 34509
34111: LD_INT 15
34113: DOUBLE
34114: EQUAL
34115: IFTRUE 34119
34117: GO 34130
34119: POP
// bc_type := b_factory ; 16 :
34120: LD_ADDR_OWVAR 42
34124: PUSH
34125: LD_INT 3
34127: ST_TO_ADDR
34128: GO 34509
34130: LD_INT 16
34132: DOUBLE
34133: EQUAL
34134: IFTRUE 34138
34136: GO 34149
34138: POP
// bc_type := b_ext_gun ; 17 :
34139: LD_ADDR_OWVAR 42
34143: PUSH
34144: LD_INT 17
34146: ST_TO_ADDR
34147: GO 34509
34149: LD_INT 17
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34157
34155: GO 34185
34157: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34158: LD_ADDR_OWVAR 42
34162: PUSH
34163: LD_INT 19
34165: PUSH
34166: LD_INT 23
34168: PUSH
34169: LD_INT 19
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: PUSH
34177: LD_VAR 0 1
34181: ARRAY
34182: ST_TO_ADDR
34183: GO 34509
34185: LD_INT 18
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34193
34191: GO 34204
34193: POP
// bc_type := b_ext_radar ; 19 :
34194: LD_ADDR_OWVAR 42
34198: PUSH
34199: LD_INT 20
34201: ST_TO_ADDR
34202: GO 34509
34204: LD_INT 19
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34212
34210: GO 34223
34212: POP
// bc_type := b_ext_radio ; 20 :
34213: LD_ADDR_OWVAR 42
34217: PUSH
34218: LD_INT 22
34220: ST_TO_ADDR
34221: GO 34509
34223: LD_INT 20
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34231
34229: GO 34242
34231: POP
// bc_type := b_ext_siberium ; 21 :
34232: LD_ADDR_OWVAR 42
34236: PUSH
34237: LD_INT 21
34239: ST_TO_ADDR
34240: GO 34509
34242: LD_INT 21
34244: DOUBLE
34245: EQUAL
34246: IFTRUE 34250
34248: GO 34261
34250: POP
// bc_type := b_ext_computer ; 22 :
34251: LD_ADDR_OWVAR 42
34255: PUSH
34256: LD_INT 24
34258: ST_TO_ADDR
34259: GO 34509
34261: LD_INT 22
34263: DOUBLE
34264: EQUAL
34265: IFTRUE 34269
34267: GO 34280
34269: POP
// bc_type := b_ext_track ; 23 :
34270: LD_ADDR_OWVAR 42
34274: PUSH
34275: LD_INT 16
34277: ST_TO_ADDR
34278: GO 34509
34280: LD_INT 23
34282: DOUBLE
34283: EQUAL
34284: IFTRUE 34288
34286: GO 34299
34288: POP
// bc_type := b_ext_laser ; 24 :
34289: LD_ADDR_OWVAR 42
34293: PUSH
34294: LD_INT 25
34296: ST_TO_ADDR
34297: GO 34509
34299: LD_INT 24
34301: DOUBLE
34302: EQUAL
34303: IFTRUE 34307
34305: GO 34318
34307: POP
// bc_type := b_control_tower ; 25 :
34308: LD_ADDR_OWVAR 42
34312: PUSH
34313: LD_INT 36
34315: ST_TO_ADDR
34316: GO 34509
34318: LD_INT 25
34320: DOUBLE
34321: EQUAL
34322: IFTRUE 34326
34324: GO 34337
34326: POP
// bc_type := b_breastwork ; 26 :
34327: LD_ADDR_OWVAR 42
34331: PUSH
34332: LD_INT 31
34334: ST_TO_ADDR
34335: GO 34509
34337: LD_INT 26
34339: DOUBLE
34340: EQUAL
34341: IFTRUE 34345
34343: GO 34356
34345: POP
// bc_type := b_bunker ; 27 :
34346: LD_ADDR_OWVAR 42
34350: PUSH
34351: LD_INT 32
34353: ST_TO_ADDR
34354: GO 34509
34356: LD_INT 27
34358: DOUBLE
34359: EQUAL
34360: IFTRUE 34364
34362: GO 34375
34364: POP
// bc_type := b_turret ; 28 :
34365: LD_ADDR_OWVAR 42
34369: PUSH
34370: LD_INT 33
34372: ST_TO_ADDR
34373: GO 34509
34375: LD_INT 28
34377: DOUBLE
34378: EQUAL
34379: IFTRUE 34383
34381: GO 34394
34383: POP
// bc_type := b_armoury ; 29 :
34384: LD_ADDR_OWVAR 42
34388: PUSH
34389: LD_INT 4
34391: ST_TO_ADDR
34392: GO 34509
34394: LD_INT 29
34396: DOUBLE
34397: EQUAL
34398: IFTRUE 34402
34400: GO 34413
34402: POP
// bc_type := b_barracks ; 30 :
34403: LD_ADDR_OWVAR 42
34407: PUSH
34408: LD_INT 5
34410: ST_TO_ADDR
34411: GO 34509
34413: LD_INT 30
34415: DOUBLE
34416: EQUAL
34417: IFTRUE 34421
34419: GO 34432
34421: POP
// bc_type := b_solar_power ; 31 :
34422: LD_ADDR_OWVAR 42
34426: PUSH
34427: LD_INT 27
34429: ST_TO_ADDR
34430: GO 34509
34432: LD_INT 31
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34451
34440: POP
// bc_type := b_oil_power ; 32 :
34441: LD_ADDR_OWVAR 42
34445: PUSH
34446: LD_INT 26
34448: ST_TO_ADDR
34449: GO 34509
34451: LD_INT 32
34453: DOUBLE
34454: EQUAL
34455: IFTRUE 34459
34457: GO 34470
34459: POP
// bc_type := b_siberite_power ; 33 :
34460: LD_ADDR_OWVAR 42
34464: PUSH
34465: LD_INT 28
34467: ST_TO_ADDR
34468: GO 34509
34470: LD_INT 33
34472: DOUBLE
34473: EQUAL
34474: IFTRUE 34478
34476: GO 34489
34478: POP
// bc_type := b_oil_mine ; 34 :
34479: LD_ADDR_OWVAR 42
34483: PUSH
34484: LD_INT 29
34486: ST_TO_ADDR
34487: GO 34509
34489: LD_INT 34
34491: DOUBLE
34492: EQUAL
34493: IFTRUE 34497
34495: GO 34508
34497: POP
// bc_type := b_siberite_mine ; end ;
34498: LD_ADDR_OWVAR 42
34502: PUSH
34503: LD_INT 30
34505: ST_TO_ADDR
34506: GO 34509
34508: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34509: LD_ADDR_VAR 0 8
34513: PUSH
34514: LD_VAR 0 5
34518: PPUSH
34519: LD_VAR 0 6
34523: PPUSH
34524: LD_VAR 0 3
34528: PPUSH
34529: CALL_OW 47
34533: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34534: LD_OWVAR 42
34538: PUSH
34539: LD_INT 32
34541: PUSH
34542: LD_INT 33
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: IN
34549: IFFALSE 34565
// PlaceWeaponTurret ( b , weapon ) ;
34551: LD_VAR 0 8
34555: PPUSH
34556: LD_VAR 0 4
34560: PPUSH
34561: CALL_OW 431
// end ;
34565: LD_VAR 0 7
34569: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34570: LD_INT 0
34572: PPUSH
34573: PPUSH
34574: PPUSH
34575: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34576: LD_ADDR_VAR 0 4
34580: PUSH
34581: LD_INT 22
34583: PUSH
34584: LD_OWVAR 2
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: LD_INT 30
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 30
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: LIST
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PPUSH
34625: CALL_OW 69
34629: ST_TO_ADDR
// if not tmp then
34630: LD_VAR 0 4
34634: NOT
34635: IFFALSE 34639
// exit ;
34637: GO 34698
// for i in tmp do
34639: LD_ADDR_VAR 0 2
34643: PUSH
34644: LD_VAR 0 4
34648: PUSH
34649: FOR_IN
34650: IFFALSE 34696
// for j = 1 to 3 do
34652: LD_ADDR_VAR 0 3
34656: PUSH
34657: DOUBLE
34658: LD_INT 1
34660: DEC
34661: ST_TO_ADDR
34662: LD_INT 3
34664: PUSH
34665: FOR_TO
34666: IFFALSE 34692
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34668: LD_VAR 0 2
34672: PPUSH
34673: CALL_OW 274
34677: PPUSH
34678: LD_VAR 0 3
34682: PPUSH
34683: LD_INT 99999
34685: PPUSH
34686: CALL_OW 277
34690: GO 34665
34692: POP
34693: POP
34694: GO 34649
34696: POP
34697: POP
// end ;
34698: LD_VAR 0 1
34702: RET
// export function hHackSetLevel10 ; var i , j ; begin
34703: LD_INT 0
34705: PPUSH
34706: PPUSH
34707: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34708: LD_ADDR_VAR 0 2
34712: PUSH
34713: LD_INT 21
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PPUSH
34723: CALL_OW 69
34727: PUSH
34728: FOR_IN
34729: IFFALSE 34781
// if IsSelected ( i ) then
34731: LD_VAR 0 2
34735: PPUSH
34736: CALL_OW 306
34740: IFFALSE 34779
// begin for j := 1 to 4 do
34742: LD_ADDR_VAR 0 3
34746: PUSH
34747: DOUBLE
34748: LD_INT 1
34750: DEC
34751: ST_TO_ADDR
34752: LD_INT 4
34754: PUSH
34755: FOR_TO
34756: IFFALSE 34777
// SetSkill ( i , j , 10 ) ;
34758: LD_VAR 0 2
34762: PPUSH
34763: LD_VAR 0 3
34767: PPUSH
34768: LD_INT 10
34770: PPUSH
34771: CALL_OW 237
34775: GO 34755
34777: POP
34778: POP
// end ;
34779: GO 34728
34781: POP
34782: POP
// end ;
34783: LD_VAR 0 1
34787: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34788: LD_INT 0
34790: PPUSH
34791: PPUSH
34792: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34793: LD_ADDR_VAR 0 2
34797: PUSH
34798: LD_INT 22
34800: PUSH
34801: LD_OWVAR 2
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 21
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PPUSH
34824: CALL_OW 69
34828: PUSH
34829: FOR_IN
34830: IFFALSE 34871
// begin for j := 1 to 4 do
34832: LD_ADDR_VAR 0 3
34836: PUSH
34837: DOUBLE
34838: LD_INT 1
34840: DEC
34841: ST_TO_ADDR
34842: LD_INT 4
34844: PUSH
34845: FOR_TO
34846: IFFALSE 34867
// SetSkill ( i , j , 10 ) ;
34848: LD_VAR 0 2
34852: PPUSH
34853: LD_VAR 0 3
34857: PPUSH
34858: LD_INT 10
34860: PPUSH
34861: CALL_OW 237
34865: GO 34845
34867: POP
34868: POP
// end ;
34869: GO 34829
34871: POP
34872: POP
// end ;
34873: LD_VAR 0 1
34877: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34878: LD_INT 0
34880: PPUSH
// uc_side := your_side ;
34881: LD_ADDR_OWVAR 20
34885: PUSH
34886: LD_OWVAR 2
34890: ST_TO_ADDR
// uc_nation := nation ;
34891: LD_ADDR_OWVAR 21
34895: PUSH
34896: LD_VAR 0 1
34900: ST_TO_ADDR
// InitHc ;
34901: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34905: LD_INT 0
34907: PPUSH
34908: LD_VAR 0 2
34912: PPUSH
34913: LD_VAR 0 3
34917: PPUSH
34918: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34922: LD_VAR 0 4
34926: PPUSH
34927: LD_VAR 0 5
34931: PPUSH
34932: CALL_OW 428
34936: PUSH
34937: LD_INT 0
34939: EQUAL
34940: IFFALSE 34964
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34942: CALL_OW 44
34946: PPUSH
34947: LD_VAR 0 4
34951: PPUSH
34952: LD_VAR 0 5
34956: PPUSH
34957: LD_INT 1
34959: PPUSH
34960: CALL_OW 48
// end ;
34964: LD_VAR 0 6
34968: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34969: LD_INT 0
34971: PPUSH
34972: PPUSH
// uc_side := your_side ;
34973: LD_ADDR_OWVAR 20
34977: PUSH
34978: LD_OWVAR 2
34982: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34983: LD_VAR 0 1
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: LD_INT 4
34999: PUSH
35000: LD_INT 5
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: IN
35010: IFFALSE 35022
// uc_nation := nation_american else
35012: LD_ADDR_OWVAR 21
35016: PUSH
35017: LD_INT 1
35019: ST_TO_ADDR
35020: GO 35065
// if chassis in [ 11 , 12 , 13 , 14 ] then
35022: LD_VAR 0 1
35026: PUSH
35027: LD_INT 11
35029: PUSH
35030: LD_INT 12
35032: PUSH
35033: LD_INT 13
35035: PUSH
35036: LD_INT 14
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: IN
35045: IFFALSE 35057
// uc_nation := nation_arabian else
35047: LD_ADDR_OWVAR 21
35051: PUSH
35052: LD_INT 2
35054: ST_TO_ADDR
35055: GO 35065
// uc_nation := nation_russian ;
35057: LD_ADDR_OWVAR 21
35061: PUSH
35062: LD_INT 3
35064: ST_TO_ADDR
// vc_chassis := chassis ;
35065: LD_ADDR_OWVAR 37
35069: PUSH
35070: LD_VAR 0 1
35074: ST_TO_ADDR
// vc_engine := engine ;
35075: LD_ADDR_OWVAR 39
35079: PUSH
35080: LD_VAR 0 2
35084: ST_TO_ADDR
// vc_control := control ;
35085: LD_ADDR_OWVAR 38
35089: PUSH
35090: LD_VAR 0 3
35094: ST_TO_ADDR
// vc_weapon := weapon ;
35095: LD_ADDR_OWVAR 40
35099: PUSH
35100: LD_VAR 0 4
35104: ST_TO_ADDR
// un := CreateVehicle ;
35105: LD_ADDR_VAR 0 8
35109: PUSH
35110: CALL_OW 45
35114: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35115: LD_VAR 0 8
35119: PPUSH
35120: LD_INT 0
35122: PPUSH
35123: LD_INT 5
35125: PPUSH
35126: CALL_OW 12
35130: PPUSH
35131: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35135: LD_VAR 0 8
35139: PPUSH
35140: LD_VAR 0 5
35144: PPUSH
35145: LD_VAR 0 6
35149: PPUSH
35150: LD_INT 1
35152: PPUSH
35153: CALL_OW 48
// end ;
35157: LD_VAR 0 7
35161: RET
// export hInvincible ; every 1 do
35162: GO 35164
35164: DISABLE
// hInvincible := [ ] ;
35165: LD_ADDR_EXP 108
35169: PUSH
35170: EMPTY
35171: ST_TO_ADDR
35172: END
// every 10 do var i ;
35173: GO 35175
35175: DISABLE
35176: LD_INT 0
35178: PPUSH
// begin enable ;
35179: ENABLE
// if not hInvincible then
35180: LD_EXP 108
35184: NOT
35185: IFFALSE 35189
// exit ;
35187: GO 35233
// for i in hInvincible do
35189: LD_ADDR_VAR 0 1
35193: PUSH
35194: LD_EXP 108
35198: PUSH
35199: FOR_IN
35200: IFFALSE 35231
// if GetLives ( i ) < 1000 then
35202: LD_VAR 0 1
35206: PPUSH
35207: CALL_OW 256
35211: PUSH
35212: LD_INT 1000
35214: LESS
35215: IFFALSE 35229
// SetLives ( i , 1000 ) ;
35217: LD_VAR 0 1
35221: PPUSH
35222: LD_INT 1000
35224: PPUSH
35225: CALL_OW 234
35229: GO 35199
35231: POP
35232: POP
// end ;
35233: PPOPN 1
35235: END
// export function hHackInvincible ; var i ; begin
35236: LD_INT 0
35238: PPUSH
35239: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35240: LD_ADDR_VAR 0 2
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: LD_INT 21
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 21
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: PPUSH
35273: CALL_OW 69
35277: PUSH
35278: FOR_IN
35279: IFFALSE 35340
// if IsSelected ( i ) then
35281: LD_VAR 0 2
35285: PPUSH
35286: CALL_OW 306
35290: IFFALSE 35338
// begin if i in hInvincible then
35292: LD_VAR 0 2
35296: PUSH
35297: LD_EXP 108
35301: IN
35302: IFFALSE 35322
// hInvincible := hInvincible diff i else
35304: LD_ADDR_EXP 108
35308: PUSH
35309: LD_EXP 108
35313: PUSH
35314: LD_VAR 0 2
35318: DIFF
35319: ST_TO_ADDR
35320: GO 35338
// hInvincible := hInvincible union i ;
35322: LD_ADDR_EXP 108
35326: PUSH
35327: LD_EXP 108
35331: PUSH
35332: LD_VAR 0 2
35336: UNION
35337: ST_TO_ADDR
// end ;
35338: GO 35278
35340: POP
35341: POP
// end ;
35342: LD_VAR 0 1
35346: RET
// export function hHackInvisible ; var i , j ; begin
35347: LD_INT 0
35349: PPUSH
35350: PPUSH
35351: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35352: LD_ADDR_VAR 0 2
35356: PUSH
35357: LD_INT 21
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PPUSH
35367: CALL_OW 69
35371: PUSH
35372: FOR_IN
35373: IFFALSE 35397
// if IsSelected ( i ) then
35375: LD_VAR 0 2
35379: PPUSH
35380: CALL_OW 306
35384: IFFALSE 35395
// ComForceInvisible ( i ) ;
35386: LD_VAR 0 2
35390: PPUSH
35391: CALL_OW 496
35395: GO 35372
35397: POP
35398: POP
// end ;
35399: LD_VAR 0 1
35403: RET
// export function hHackChangeYourSide ; begin
35404: LD_INT 0
35406: PPUSH
// if your_side = 8 then
35407: LD_OWVAR 2
35411: PUSH
35412: LD_INT 8
35414: EQUAL
35415: IFFALSE 35427
// your_side := 0 else
35417: LD_ADDR_OWVAR 2
35421: PUSH
35422: LD_INT 0
35424: ST_TO_ADDR
35425: GO 35441
// your_side := your_side + 1 ;
35427: LD_ADDR_OWVAR 2
35431: PUSH
35432: LD_OWVAR 2
35436: PUSH
35437: LD_INT 1
35439: PLUS
35440: ST_TO_ADDR
// end ;
35441: LD_VAR 0 1
35445: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35446: LD_INT 0
35448: PPUSH
35449: PPUSH
35450: PPUSH
// for i in all_units do
35451: LD_ADDR_VAR 0 2
35455: PUSH
35456: LD_OWVAR 3
35460: PUSH
35461: FOR_IN
35462: IFFALSE 35540
// if IsSelected ( i ) then
35464: LD_VAR 0 2
35468: PPUSH
35469: CALL_OW 306
35473: IFFALSE 35538
// begin j := GetSide ( i ) ;
35475: LD_ADDR_VAR 0 3
35479: PUSH
35480: LD_VAR 0 2
35484: PPUSH
35485: CALL_OW 255
35489: ST_TO_ADDR
// if j = 8 then
35490: LD_VAR 0 3
35494: PUSH
35495: LD_INT 8
35497: EQUAL
35498: IFFALSE 35510
// j := 0 else
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_INT 0
35507: ST_TO_ADDR
35508: GO 35524
// j := j + 1 ;
35510: LD_ADDR_VAR 0 3
35514: PUSH
35515: LD_VAR 0 3
35519: PUSH
35520: LD_INT 1
35522: PLUS
35523: ST_TO_ADDR
// SetSide ( i , j ) ;
35524: LD_VAR 0 2
35528: PPUSH
35529: LD_VAR 0 3
35533: PPUSH
35534: CALL_OW 235
// end ;
35538: GO 35461
35540: POP
35541: POP
// end ;
35542: LD_VAR 0 1
35546: RET
// export function hHackFog ; begin
35547: LD_INT 0
35549: PPUSH
// FogOff ( true ) ;
35550: LD_INT 1
35552: PPUSH
35553: CALL_OW 344
// end ;
35557: LD_VAR 0 1
35561: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35562: LD_INT 0
35564: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35565: LD_VAR 0 1
35569: PPUSH
35570: LD_VAR 0 2
35574: PPUSH
35575: LD_VAR 0 3
35579: PPUSH
35580: LD_INT 1
35582: PPUSH
35583: LD_INT 1
35585: PPUSH
35586: CALL_OW 483
// CenterOnXY ( x , y ) ;
35590: LD_VAR 0 2
35594: PPUSH
35595: LD_VAR 0 3
35599: PPUSH
35600: CALL_OW 84
// end ;
35604: LD_VAR 0 4
35608: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35609: LD_INT 0
35611: PPUSH
35612: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35613: LD_VAR 0 1
35617: NOT
35618: PUSH
35619: LD_VAR 0 2
35623: PPUSH
35624: LD_VAR 0 3
35628: PPUSH
35629: CALL_OW 488
35633: NOT
35634: OR
35635: PUSH
35636: LD_VAR 0 1
35640: PPUSH
35641: CALL_OW 266
35645: PUSH
35646: LD_INT 3
35648: NONEQUAL
35649: PUSH
35650: LD_VAR 0 1
35654: PPUSH
35655: CALL_OW 247
35659: PUSH
35660: LD_INT 1
35662: EQUAL
35663: NOT
35664: AND
35665: OR
35666: IFFALSE 35670
// exit ;
35668: GO 35819
// if GetType ( factory ) = unit_human then
35670: LD_VAR 0 1
35674: PPUSH
35675: CALL_OW 247
35679: PUSH
35680: LD_INT 1
35682: EQUAL
35683: IFFALSE 35700
// factory := IsInUnit ( factory ) ;
35685: LD_ADDR_VAR 0 1
35689: PUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 310
35699: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL_OW 266
35709: PUSH
35710: LD_INT 3
35712: NONEQUAL
35713: IFFALSE 35717
// exit ;
35715: GO 35819
// if HexInfo ( x , y ) = factory then
35717: LD_VAR 0 2
35721: PPUSH
35722: LD_VAR 0 3
35726: PPUSH
35727: CALL_OW 428
35731: PUSH
35732: LD_VAR 0 1
35736: EQUAL
35737: IFFALSE 35764
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35739: LD_ADDR_EXP 109
35743: PUSH
35744: LD_EXP 109
35748: PPUSH
35749: LD_VAR 0 1
35753: PPUSH
35754: LD_INT 0
35756: PPUSH
35757: CALL_OW 1
35761: ST_TO_ADDR
35762: GO 35815
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35764: LD_ADDR_EXP 109
35768: PUSH
35769: LD_EXP 109
35773: PPUSH
35774: LD_VAR 0 1
35778: PPUSH
35779: LD_VAR 0 1
35783: PPUSH
35784: CALL_OW 255
35788: PUSH
35789: LD_VAR 0 1
35793: PUSH
35794: LD_VAR 0 2
35798: PUSH
35799: LD_VAR 0 3
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: PPUSH
35810: CALL_OW 1
35814: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35815: CALL 35824 0 0
// end ;
35819: LD_VAR 0 4
35823: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35824: LD_INT 0
35826: PPUSH
35827: PPUSH
35828: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35829: LD_STRING resetFactoryWaypoint();
35831: PPUSH
35832: CALL_OW 559
// if factoryWaypoints then
35836: LD_EXP 109
35840: IFFALSE 35966
// begin list := PrepareArray ( factoryWaypoints ) ;
35842: LD_ADDR_VAR 0 3
35846: PUSH
35847: LD_EXP 109
35851: PPUSH
35852: CALL 82435 0 1
35856: ST_TO_ADDR
// for i := 1 to list do
35857: LD_ADDR_VAR 0 2
35861: PUSH
35862: DOUBLE
35863: LD_INT 1
35865: DEC
35866: ST_TO_ADDR
35867: LD_VAR 0 3
35871: PUSH
35872: FOR_TO
35873: IFFALSE 35964
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35875: LD_STRING setFactoryWaypointXY(
35877: PUSH
35878: LD_VAR 0 3
35882: PUSH
35883: LD_VAR 0 2
35887: ARRAY
35888: PUSH
35889: LD_INT 1
35891: ARRAY
35892: STR
35893: PUSH
35894: LD_STRING ,
35896: STR
35897: PUSH
35898: LD_VAR 0 3
35902: PUSH
35903: LD_VAR 0 2
35907: ARRAY
35908: PUSH
35909: LD_INT 2
35911: ARRAY
35912: STR
35913: PUSH
35914: LD_STRING ,
35916: STR
35917: PUSH
35918: LD_VAR 0 3
35922: PUSH
35923: LD_VAR 0 2
35927: ARRAY
35928: PUSH
35929: LD_INT 3
35931: ARRAY
35932: STR
35933: PUSH
35934: LD_STRING ,
35936: STR
35937: PUSH
35938: LD_VAR 0 3
35942: PUSH
35943: LD_VAR 0 2
35947: ARRAY
35948: PUSH
35949: LD_INT 4
35951: ARRAY
35952: STR
35953: PUSH
35954: LD_STRING )
35956: STR
35957: PPUSH
35958: CALL_OW 559
35962: GO 35872
35964: POP
35965: POP
// end ; end ;
35966: LD_VAR 0 1
35970: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35971: LD_INT 0
35973: PPUSH
// if HexInfo ( x , y ) = warehouse then
35974: LD_VAR 0 2
35978: PPUSH
35979: LD_VAR 0 3
35983: PPUSH
35984: CALL_OW 428
35988: PUSH
35989: LD_VAR 0 1
35993: EQUAL
35994: IFFALSE 36021
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35996: LD_ADDR_EXP 110
36000: PUSH
36001: LD_EXP 110
36005: PPUSH
36006: LD_VAR 0 1
36010: PPUSH
36011: LD_INT 0
36013: PPUSH
36014: CALL_OW 1
36018: ST_TO_ADDR
36019: GO 36072
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36021: LD_ADDR_EXP 110
36025: PUSH
36026: LD_EXP 110
36030: PPUSH
36031: LD_VAR 0 1
36035: PPUSH
36036: LD_VAR 0 1
36040: PPUSH
36041: CALL_OW 255
36045: PUSH
36046: LD_VAR 0 1
36050: PUSH
36051: LD_VAR 0 2
36055: PUSH
36056: LD_VAR 0 3
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: PPUSH
36067: CALL_OW 1
36071: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36072: CALL 36081 0 0
// end ;
36076: LD_VAR 0 4
36080: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36081: LD_INT 0
36083: PPUSH
36084: PPUSH
36085: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36086: LD_STRING resetWarehouseGatheringPoints();
36088: PPUSH
36089: CALL_OW 559
// if warehouseGatheringPoints then
36093: LD_EXP 110
36097: IFFALSE 36223
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36099: LD_ADDR_VAR 0 3
36103: PUSH
36104: LD_EXP 110
36108: PPUSH
36109: CALL 82435 0 1
36113: ST_TO_ADDR
// for i := 1 to list do
36114: LD_ADDR_VAR 0 2
36118: PUSH
36119: DOUBLE
36120: LD_INT 1
36122: DEC
36123: ST_TO_ADDR
36124: LD_VAR 0 3
36128: PUSH
36129: FOR_TO
36130: IFFALSE 36221
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36132: LD_STRING setWarehouseGatheringPointXY(
36134: PUSH
36135: LD_VAR 0 3
36139: PUSH
36140: LD_VAR 0 2
36144: ARRAY
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: STR
36150: PUSH
36151: LD_STRING ,
36153: STR
36154: PUSH
36155: LD_VAR 0 3
36159: PUSH
36160: LD_VAR 0 2
36164: ARRAY
36165: PUSH
36166: LD_INT 2
36168: ARRAY
36169: STR
36170: PUSH
36171: LD_STRING ,
36173: STR
36174: PUSH
36175: LD_VAR 0 3
36179: PUSH
36180: LD_VAR 0 2
36184: ARRAY
36185: PUSH
36186: LD_INT 3
36188: ARRAY
36189: STR
36190: PUSH
36191: LD_STRING ,
36193: STR
36194: PUSH
36195: LD_VAR 0 3
36199: PUSH
36200: LD_VAR 0 2
36204: ARRAY
36205: PUSH
36206: LD_INT 4
36208: ARRAY
36209: STR
36210: PUSH
36211: LD_STRING )
36213: STR
36214: PPUSH
36215: CALL_OW 559
36219: GO 36129
36221: POP
36222: POP
// end ; end ;
36223: LD_VAR 0 1
36227: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36228: LD_EXP 110
36232: IFFALSE 36917
36234: GO 36236
36236: DISABLE
36237: LD_INT 0
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
// begin enable ;
36248: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36249: LD_ADDR_VAR 0 3
36253: PUSH
36254: LD_EXP 110
36258: PPUSH
36259: CALL 82435 0 1
36263: ST_TO_ADDR
// if not list then
36264: LD_VAR 0 3
36268: NOT
36269: IFFALSE 36273
// exit ;
36271: GO 36917
// for i := 1 to list do
36273: LD_ADDR_VAR 0 1
36277: PUSH
36278: DOUBLE
36279: LD_INT 1
36281: DEC
36282: ST_TO_ADDR
36283: LD_VAR 0 3
36287: PUSH
36288: FOR_TO
36289: IFFALSE 36915
// begin depot := list [ i ] [ 2 ] ;
36291: LD_ADDR_VAR 0 8
36295: PUSH
36296: LD_VAR 0 3
36300: PUSH
36301: LD_VAR 0 1
36305: ARRAY
36306: PUSH
36307: LD_INT 2
36309: ARRAY
36310: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36311: LD_ADDR_VAR 0 5
36315: PUSH
36316: LD_VAR 0 3
36320: PUSH
36321: LD_VAR 0 1
36325: ARRAY
36326: PUSH
36327: LD_INT 1
36329: ARRAY
36330: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36331: LD_VAR 0 8
36335: PPUSH
36336: CALL_OW 301
36340: PUSH
36341: LD_VAR 0 5
36345: PUSH
36346: LD_VAR 0 8
36350: PPUSH
36351: CALL_OW 255
36355: NONEQUAL
36356: OR
36357: IFFALSE 36386
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36359: LD_ADDR_EXP 110
36363: PUSH
36364: LD_EXP 110
36368: PPUSH
36369: LD_VAR 0 8
36373: PPUSH
36374: LD_INT 0
36376: PPUSH
36377: CALL_OW 1
36381: ST_TO_ADDR
// exit ;
36382: POP
36383: POP
36384: GO 36917
// end ; x := list [ i ] [ 3 ] ;
36386: LD_ADDR_VAR 0 6
36390: PUSH
36391: LD_VAR 0 3
36395: PUSH
36396: LD_VAR 0 1
36400: ARRAY
36401: PUSH
36402: LD_INT 3
36404: ARRAY
36405: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36406: LD_ADDR_VAR 0 7
36410: PUSH
36411: LD_VAR 0 3
36415: PUSH
36416: LD_VAR 0 1
36420: ARRAY
36421: PUSH
36422: LD_INT 4
36424: ARRAY
36425: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36426: LD_ADDR_VAR 0 9
36430: PUSH
36431: LD_VAR 0 6
36435: PPUSH
36436: LD_VAR 0 7
36440: PPUSH
36441: LD_INT 16
36443: PPUSH
36444: CALL 81023 0 3
36448: ST_TO_ADDR
// if not cratesNearbyPoint then
36449: LD_VAR 0 9
36453: NOT
36454: IFFALSE 36460
// exit ;
36456: POP
36457: POP
36458: GO 36917
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36460: LD_ADDR_VAR 0 4
36464: PUSH
36465: LD_INT 22
36467: PUSH
36468: LD_VAR 0 5
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 3
36479: PUSH
36480: LD_INT 60
36482: PUSH
36483: EMPTY
36484: LIST
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 91
36492: PUSH
36493: LD_VAR 0 8
36497: PUSH
36498: LD_INT 6
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: LD_INT 25
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 25
36521: PUSH
36522: LD_INT 16
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: PPUSH
36540: CALL_OW 69
36544: PUSH
36545: LD_VAR 0 8
36549: PPUSH
36550: CALL_OW 313
36554: PPUSH
36555: LD_INT 3
36557: PUSH
36558: LD_INT 60
36560: PUSH
36561: EMPTY
36562: LIST
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 25
36573: PUSH
36574: LD_INT 2
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 25
36583: PUSH
36584: LD_INT 16
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PPUSH
36600: CALL_OW 72
36604: UNION
36605: ST_TO_ADDR
// if tmp then
36606: LD_VAR 0 4
36610: IFFALSE 36690
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36612: LD_ADDR_VAR 0 4
36616: PUSH
36617: LD_VAR 0 4
36621: PPUSH
36622: LD_INT 3
36624: PPUSH
36625: CALL 78992 0 2
36629: ST_TO_ADDR
// for j in tmp do
36630: LD_ADDR_VAR 0 2
36634: PUSH
36635: LD_VAR 0 4
36639: PUSH
36640: FOR_IN
36641: IFFALSE 36684
// begin if IsInUnit ( j ) then
36643: LD_VAR 0 2
36647: PPUSH
36648: CALL_OW 310
36652: IFFALSE 36663
// ComExit ( j ) ;
36654: LD_VAR 0 2
36658: PPUSH
36659: CALL 79075 0 1
// AddComCollect ( j , x , y ) ;
36663: LD_VAR 0 2
36667: PPUSH
36668: LD_VAR 0 6
36672: PPUSH
36673: LD_VAR 0 7
36677: PPUSH
36678: CALL_OW 177
// end ;
36682: GO 36640
36684: POP
36685: POP
// exit ;
36686: POP
36687: POP
36688: GO 36917
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36690: LD_ADDR_VAR 0 4
36694: PUSH
36695: LD_INT 22
36697: PUSH
36698: LD_VAR 0 5
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 91
36709: PUSH
36710: LD_VAR 0 8
36714: PUSH
36715: LD_INT 8
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 34
36728: PUSH
36729: LD_INT 12
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 34
36738: PUSH
36739: LD_INT 51
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 34
36748: PUSH
36749: LD_INT 32
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 34
36758: PUSH
36759: LD_INT 89
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: PPUSH
36778: CALL_OW 69
36782: ST_TO_ADDR
// if tmp then
36783: LD_VAR 0 4
36787: IFFALSE 36913
// begin for j in tmp do
36789: LD_ADDR_VAR 0 2
36793: PUSH
36794: LD_VAR 0 4
36798: PUSH
36799: FOR_IN
36800: IFFALSE 36911
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36802: LD_VAR 0 2
36806: PPUSH
36807: CALL_OW 262
36811: PUSH
36812: LD_INT 3
36814: EQUAL
36815: PUSH
36816: LD_VAR 0 2
36820: PPUSH
36821: CALL_OW 261
36825: PUSH
36826: LD_INT 20
36828: GREATER
36829: OR
36830: PUSH
36831: LD_VAR 0 2
36835: PPUSH
36836: CALL_OW 314
36840: NOT
36841: AND
36842: PUSH
36843: LD_VAR 0 2
36847: PPUSH
36848: CALL_OW 263
36852: PUSH
36853: LD_INT 1
36855: NONEQUAL
36856: PUSH
36857: LD_VAR 0 2
36861: PPUSH
36862: CALL_OW 311
36866: OR
36867: AND
36868: IFFALSE 36909
// begin ComCollect ( j , x , y ) ;
36870: LD_VAR 0 2
36874: PPUSH
36875: LD_VAR 0 6
36879: PPUSH
36880: LD_VAR 0 7
36884: PPUSH
36885: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36889: LD_VAR 0 2
36893: PPUSH
36894: LD_VAR 0 8
36898: PPUSH
36899: CALL_OW 172
// exit ;
36903: POP
36904: POP
36905: POP
36906: POP
36907: GO 36917
// end ;
36909: GO 36799
36911: POP
36912: POP
// end ; end ;
36913: GO 36288
36915: POP
36916: POP
// end ; end_of_file
36917: PPOPN 9
36919: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36920: LD_INT 0
36922: PPUSH
36923: PPUSH
36924: PPUSH
36925: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36926: LD_VAR 0 1
36930: PPUSH
36931: CALL_OW 264
36935: PUSH
36936: LD_INT 91
36938: EQUAL
36939: IFFALSE 37011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36941: LD_INT 68
36943: PPUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 255
36953: PPUSH
36954: CALL_OW 321
36958: PUSH
36959: LD_INT 2
36961: EQUAL
36962: IFFALSE 36974
// eff := 70 else
36964: LD_ADDR_VAR 0 4
36968: PUSH
36969: LD_INT 70
36971: ST_TO_ADDR
36972: GO 36982
// eff := 30 ;
36974: LD_ADDR_VAR 0 4
36978: PUSH
36979: LD_INT 30
36981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36982: LD_VAR 0 1
36986: PPUSH
36987: CALL_OW 250
36991: PPUSH
36992: LD_VAR 0 1
36996: PPUSH
36997: CALL_OW 251
37001: PPUSH
37002: LD_VAR 0 4
37006: PPUSH
37007: CALL_OW 495
// end ; end ;
37011: LD_VAR 0 2
37015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37016: LD_INT 0
37018: PPUSH
// end ;
37019: LD_VAR 0 4
37023: RET
// export function SOS_Command ( cmd ) ; begin
37024: LD_INT 0
37026: PPUSH
// end ;
37027: LD_VAR 0 2
37031: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37032: LD_INT 0
37034: PPUSH
// end ;
37035: LD_VAR 0 6
37039: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37040: LD_INT 0
37042: PPUSH
37043: PPUSH
// if not vehicle or not factory then
37044: LD_VAR 0 1
37048: NOT
37049: PUSH
37050: LD_VAR 0 2
37054: NOT
37055: OR
37056: IFFALSE 37060
// exit ;
37058: GO 37291
// if factoryWaypoints >= factory then
37060: LD_EXP 109
37064: PUSH
37065: LD_VAR 0 2
37069: GREATEREQUAL
37070: IFFALSE 37291
// if factoryWaypoints [ factory ] then
37072: LD_EXP 109
37076: PUSH
37077: LD_VAR 0 2
37081: ARRAY
37082: IFFALSE 37291
// begin if GetControl ( vehicle ) = control_manual then
37084: LD_VAR 0 1
37088: PPUSH
37089: CALL_OW 263
37093: PUSH
37094: LD_INT 1
37096: EQUAL
37097: IFFALSE 37178
// begin driver := IsDrivenBy ( vehicle ) ;
37099: LD_ADDR_VAR 0 4
37103: PUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: CALL_OW 311
37113: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37114: LD_VAR 0 4
37118: PPUSH
37119: LD_EXP 109
37123: PUSH
37124: LD_VAR 0 2
37128: ARRAY
37129: PUSH
37130: LD_INT 3
37132: ARRAY
37133: PPUSH
37134: LD_EXP 109
37138: PUSH
37139: LD_VAR 0 2
37143: ARRAY
37144: PUSH
37145: LD_INT 4
37147: ARRAY
37148: PPUSH
37149: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37153: LD_VAR 0 4
37157: PPUSH
37158: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37162: LD_VAR 0 4
37166: PPUSH
37167: LD_VAR 0 2
37171: PPUSH
37172: CALL_OW 180
// end else
37176: GO 37291
// if GetControl ( vehicle ) = control_remote then
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL_OW 263
37187: PUSH
37188: LD_INT 2
37190: EQUAL
37191: IFFALSE 37252
// begin wait ( 0 0$2 ) ;
37193: LD_INT 70
37195: PPUSH
37196: CALL_OW 67
// if Connect ( vehicle ) then
37200: LD_VAR 0 1
37204: PPUSH
37205: CALL 49315 0 1
37209: IFFALSE 37250
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37211: LD_VAR 0 1
37215: PPUSH
37216: LD_EXP 109
37220: PUSH
37221: LD_VAR 0 2
37225: ARRAY
37226: PUSH
37227: LD_INT 3
37229: ARRAY
37230: PPUSH
37231: LD_EXP 109
37235: PUSH
37236: LD_VAR 0 2
37240: ARRAY
37241: PUSH
37242: LD_INT 4
37244: ARRAY
37245: PPUSH
37246: CALL_OW 171
// end else
37250: GO 37291
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37252: LD_VAR 0 1
37256: PPUSH
37257: LD_EXP 109
37261: PUSH
37262: LD_VAR 0 2
37266: ARRAY
37267: PUSH
37268: LD_INT 3
37270: ARRAY
37271: PPUSH
37272: LD_EXP 109
37276: PUSH
37277: LD_VAR 0 2
37281: ARRAY
37282: PUSH
37283: LD_INT 4
37285: ARRAY
37286: PPUSH
37287: CALL_OW 171
// end ; end ;
37291: LD_VAR 0 3
37295: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37296: LD_INT 0
37298: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37299: LD_VAR 0 1
37303: PUSH
37304: LD_INT 250
37306: EQUAL
37307: PUSH
37308: LD_VAR 0 2
37312: PPUSH
37313: CALL_OW 264
37317: PUSH
37318: LD_INT 81
37320: EQUAL
37321: AND
37322: IFFALSE 37343
// MinerPlaceMine ( unit , x , y ) ;
37324: LD_VAR 0 2
37328: PPUSH
37329: LD_VAR 0 4
37333: PPUSH
37334: LD_VAR 0 5
37338: PPUSH
37339: CALL 39728 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37343: LD_VAR 0 1
37347: PUSH
37348: LD_INT 251
37350: EQUAL
37351: PUSH
37352: LD_VAR 0 2
37356: PPUSH
37357: CALL_OW 264
37361: PUSH
37362: LD_INT 81
37364: EQUAL
37365: AND
37366: IFFALSE 37387
// MinerDetonateMine ( unit , x , y ) ;
37368: LD_VAR 0 2
37372: PPUSH
37373: LD_VAR 0 4
37377: PPUSH
37378: LD_VAR 0 5
37382: PPUSH
37383: CALL 40003 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37387: LD_VAR 0 1
37391: PUSH
37392: LD_INT 252
37394: EQUAL
37395: PUSH
37396: LD_VAR 0 2
37400: PPUSH
37401: CALL_OW 264
37405: PUSH
37406: LD_INT 81
37408: EQUAL
37409: AND
37410: IFFALSE 37431
// MinerCreateMinefield ( unit , x , y ) ;
37412: LD_VAR 0 2
37416: PPUSH
37417: LD_VAR 0 4
37421: PPUSH
37422: LD_VAR 0 5
37426: PPUSH
37427: CALL 40420 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37431: LD_VAR 0 1
37435: PUSH
37436: LD_INT 253
37438: EQUAL
37439: PUSH
37440: LD_VAR 0 2
37444: PPUSH
37445: CALL_OW 257
37449: PUSH
37450: LD_INT 5
37452: EQUAL
37453: AND
37454: IFFALSE 37475
// ComBinocular ( unit , x , y ) ;
37456: LD_VAR 0 2
37460: PPUSH
37461: LD_VAR 0 4
37465: PPUSH
37466: LD_VAR 0 5
37470: PPUSH
37471: CALL 40789 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37475: LD_VAR 0 1
37479: PUSH
37480: LD_INT 254
37482: EQUAL
37483: PUSH
37484: LD_VAR 0 2
37488: PPUSH
37489: CALL_OW 264
37493: PUSH
37494: LD_INT 99
37496: EQUAL
37497: AND
37498: PUSH
37499: LD_VAR 0 3
37503: PPUSH
37504: CALL_OW 263
37508: PUSH
37509: LD_INT 3
37511: EQUAL
37512: AND
37513: IFFALSE 37529
// HackDestroyVehicle ( unit , selectedUnit ) ;
37515: LD_VAR 0 2
37519: PPUSH
37520: LD_VAR 0 3
37524: PPUSH
37525: CALL 39092 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37529: LD_VAR 0 1
37533: PUSH
37534: LD_INT 255
37536: EQUAL
37537: PUSH
37538: LD_VAR 0 2
37542: PPUSH
37543: CALL_OW 264
37547: PUSH
37548: LD_INT 14
37550: PUSH
37551: LD_INT 53
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: IN
37558: AND
37559: PUSH
37560: LD_VAR 0 4
37564: PPUSH
37565: LD_VAR 0 5
37569: PPUSH
37570: CALL_OW 488
37574: AND
37575: IFFALSE 37599
// CutTreeXYR ( unit , x , y , 12 ) ;
37577: LD_VAR 0 2
37581: PPUSH
37582: LD_VAR 0 4
37586: PPUSH
37587: LD_VAR 0 5
37591: PPUSH
37592: LD_INT 12
37594: PPUSH
37595: CALL 37662 0 4
// if cmd = 256 then
37599: LD_VAR 0 1
37603: PUSH
37604: LD_INT 256
37606: EQUAL
37607: IFFALSE 37628
// SetFactoryWaypoint ( unit , x , y ) ;
37609: LD_VAR 0 2
37613: PPUSH
37614: LD_VAR 0 4
37618: PPUSH
37619: LD_VAR 0 5
37623: PPUSH
37624: CALL 35609 0 3
// if cmd = 257 then
37628: LD_VAR 0 1
37632: PUSH
37633: LD_INT 257
37635: EQUAL
37636: IFFALSE 37657
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37638: LD_VAR 0 2
37642: PPUSH
37643: LD_VAR 0 4
37647: PPUSH
37648: LD_VAR 0 5
37652: PPUSH
37653: CALL 35971 0 3
// end ;
37657: LD_VAR 0 6
37661: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37662: LD_INT 0
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
37671: PPUSH
37672: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37673: LD_VAR 0 1
37677: NOT
37678: PUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: LD_VAR 0 3
37688: PPUSH
37689: CALL_OW 488
37693: NOT
37694: OR
37695: PUSH
37696: LD_VAR 0 4
37700: NOT
37701: OR
37702: IFFALSE 37706
// exit ;
37704: GO 38046
// list := [ ] ;
37706: LD_ADDR_VAR 0 13
37710: PUSH
37711: EMPTY
37712: ST_TO_ADDR
// if x - r < 0 then
37713: LD_VAR 0 2
37717: PUSH
37718: LD_VAR 0 4
37722: MINUS
37723: PUSH
37724: LD_INT 0
37726: LESS
37727: IFFALSE 37739
// min_x := 0 else
37729: LD_ADDR_VAR 0 7
37733: PUSH
37734: LD_INT 0
37736: ST_TO_ADDR
37737: GO 37755
// min_x := x - r ;
37739: LD_ADDR_VAR 0 7
37743: PUSH
37744: LD_VAR 0 2
37748: PUSH
37749: LD_VAR 0 4
37753: MINUS
37754: ST_TO_ADDR
// if y - r < 0 then
37755: LD_VAR 0 3
37759: PUSH
37760: LD_VAR 0 4
37764: MINUS
37765: PUSH
37766: LD_INT 0
37768: LESS
37769: IFFALSE 37781
// min_y := 0 else
37771: LD_ADDR_VAR 0 8
37775: PUSH
37776: LD_INT 0
37778: ST_TO_ADDR
37779: GO 37797
// min_y := y - r ;
37781: LD_ADDR_VAR 0 8
37785: PUSH
37786: LD_VAR 0 3
37790: PUSH
37791: LD_VAR 0 4
37795: MINUS
37796: ST_TO_ADDR
// max_x := x + r ;
37797: LD_ADDR_VAR 0 9
37801: PUSH
37802: LD_VAR 0 2
37806: PUSH
37807: LD_VAR 0 4
37811: PLUS
37812: ST_TO_ADDR
// max_y := y + r ;
37813: LD_ADDR_VAR 0 10
37817: PUSH
37818: LD_VAR 0 3
37822: PUSH
37823: LD_VAR 0 4
37827: PLUS
37828: ST_TO_ADDR
// for _x = min_x to max_x do
37829: LD_ADDR_VAR 0 11
37833: PUSH
37834: DOUBLE
37835: LD_VAR 0 7
37839: DEC
37840: ST_TO_ADDR
37841: LD_VAR 0 9
37845: PUSH
37846: FOR_TO
37847: IFFALSE 37964
// for _y = min_y to max_y do
37849: LD_ADDR_VAR 0 12
37853: PUSH
37854: DOUBLE
37855: LD_VAR 0 8
37859: DEC
37860: ST_TO_ADDR
37861: LD_VAR 0 10
37865: PUSH
37866: FOR_TO
37867: IFFALSE 37960
// begin if not ValidHex ( _x , _y ) then
37869: LD_VAR 0 11
37873: PPUSH
37874: LD_VAR 0 12
37878: PPUSH
37879: CALL_OW 488
37883: NOT
37884: IFFALSE 37888
// continue ;
37886: GO 37866
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37888: LD_VAR 0 11
37892: PPUSH
37893: LD_VAR 0 12
37897: PPUSH
37898: CALL_OW 351
37902: PUSH
37903: LD_VAR 0 11
37907: PPUSH
37908: LD_VAR 0 12
37912: PPUSH
37913: CALL_OW 554
37917: AND
37918: IFFALSE 37958
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37920: LD_ADDR_VAR 0 13
37924: PUSH
37925: LD_VAR 0 13
37929: PPUSH
37930: LD_VAR 0 13
37934: PUSH
37935: LD_INT 1
37937: PLUS
37938: PPUSH
37939: LD_VAR 0 11
37943: PUSH
37944: LD_VAR 0 12
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PPUSH
37953: CALL_OW 2
37957: ST_TO_ADDR
// end ;
37958: GO 37866
37960: POP
37961: POP
37962: GO 37846
37964: POP
37965: POP
// if not list then
37966: LD_VAR 0 13
37970: NOT
37971: IFFALSE 37975
// exit ;
37973: GO 38046
// for i in list do
37975: LD_ADDR_VAR 0 6
37979: PUSH
37980: LD_VAR 0 13
37984: PUSH
37985: FOR_IN
37986: IFFALSE 38044
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37988: LD_VAR 0 1
37992: PPUSH
37993: LD_STRING M
37995: PUSH
37996: LD_VAR 0 6
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: PUSH
38005: LD_VAR 0 6
38009: PUSH
38010: LD_INT 2
38012: ARRAY
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: PPUSH
38038: CALL_OW 447
38042: GO 37985
38044: POP
38045: POP
// end ;
38046: LD_VAR 0 5
38050: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38051: LD_EXP 112
38055: NOT
38056: IFFALSE 38106
38058: GO 38060
38060: DISABLE
// begin initHack := true ;
38061: LD_ADDR_EXP 112
38065: PUSH
38066: LD_INT 1
38068: ST_TO_ADDR
// hackTanks := [ ] ;
38069: LD_ADDR_EXP 113
38073: PUSH
38074: EMPTY
38075: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38076: LD_ADDR_EXP 114
38080: PUSH
38081: EMPTY
38082: ST_TO_ADDR
// hackLimit := 3 ;
38083: LD_ADDR_EXP 115
38087: PUSH
38088: LD_INT 3
38090: ST_TO_ADDR
// hackDist := 12 ;
38091: LD_ADDR_EXP 116
38095: PUSH
38096: LD_INT 12
38098: ST_TO_ADDR
// hackCounter := [ ] ;
38099: LD_ADDR_EXP 117
38103: PUSH
38104: EMPTY
38105: ST_TO_ADDR
// end ;
38106: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38107: LD_EXP 112
38111: PUSH
38112: LD_INT 34
38114: PUSH
38115: LD_INT 99
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PPUSH
38122: CALL_OW 69
38126: AND
38127: IFFALSE 38380
38129: GO 38131
38131: DISABLE
38132: LD_INT 0
38134: PPUSH
38135: PPUSH
// begin enable ;
38136: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38137: LD_ADDR_VAR 0 1
38141: PUSH
38142: LD_INT 34
38144: PUSH
38145: LD_INT 99
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PPUSH
38152: CALL_OW 69
38156: PUSH
38157: FOR_IN
38158: IFFALSE 38378
// begin if not i in hackTanks then
38160: LD_VAR 0 1
38164: PUSH
38165: LD_EXP 113
38169: IN
38170: NOT
38171: IFFALSE 38254
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38173: LD_ADDR_EXP 113
38177: PUSH
38178: LD_EXP 113
38182: PPUSH
38183: LD_EXP 113
38187: PUSH
38188: LD_INT 1
38190: PLUS
38191: PPUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 1
38201: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38202: LD_ADDR_EXP 114
38206: PUSH
38207: LD_EXP 114
38211: PPUSH
38212: LD_EXP 114
38216: PUSH
38217: LD_INT 1
38219: PLUS
38220: PPUSH
38221: EMPTY
38222: PPUSH
38223: CALL_OW 1
38227: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38228: LD_ADDR_EXP 117
38232: PUSH
38233: LD_EXP 117
38237: PPUSH
38238: LD_EXP 117
38242: PUSH
38243: LD_INT 1
38245: PLUS
38246: PPUSH
38247: EMPTY
38248: PPUSH
38249: CALL_OW 1
38253: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 302
38263: NOT
38264: IFFALSE 38277
// begin HackUnlinkAll ( i ) ;
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL 38383 0 1
// continue ;
38275: GO 38157
// end ; HackCheckCapturedStatus ( i ) ;
38277: LD_VAR 0 1
38281: PPUSH
38282: CALL 38826 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38286: LD_ADDR_VAR 0 2
38290: PUSH
38291: LD_INT 81
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 255
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 33
38310: PUSH
38311: LD_INT 3
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 91
38320: PUSH
38321: LD_VAR 0 1
38325: PUSH
38326: LD_EXP 116
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 50
38338: PUSH
38339: EMPTY
38340: LIST
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: PPUSH
38348: CALL_OW 69
38352: ST_TO_ADDR
// if not tmp then
38353: LD_VAR 0 2
38357: NOT
38358: IFFALSE 38362
// continue ;
38360: GO 38157
// HackLink ( i , tmp ) ;
38362: LD_VAR 0 1
38366: PPUSH
38367: LD_VAR 0 2
38371: PPUSH
38372: CALL 38519 0 2
// end ;
38376: GO 38157
38378: POP
38379: POP
// end ;
38380: PPOPN 2
38382: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38383: LD_INT 0
38385: PPUSH
38386: PPUSH
38387: PPUSH
// if not hack in hackTanks then
38388: LD_VAR 0 1
38392: PUSH
38393: LD_EXP 113
38397: IN
38398: NOT
38399: IFFALSE 38403
// exit ;
38401: GO 38514
// index := GetElementIndex ( hackTanks , hack ) ;
38403: LD_ADDR_VAR 0 4
38407: PUSH
38408: LD_EXP 113
38412: PPUSH
38413: LD_VAR 0 1
38417: PPUSH
38418: CALL 46131 0 2
38422: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38423: LD_EXP 114
38427: PUSH
38428: LD_VAR 0 4
38432: ARRAY
38433: IFFALSE 38514
// begin for i in hackTanksCaptured [ index ] do
38435: LD_ADDR_VAR 0 3
38439: PUSH
38440: LD_EXP 114
38444: PUSH
38445: LD_VAR 0 4
38449: ARRAY
38450: PUSH
38451: FOR_IN
38452: IFFALSE 38478
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38454: LD_VAR 0 3
38458: PUSH
38459: LD_INT 1
38461: ARRAY
38462: PPUSH
38463: LD_VAR 0 3
38467: PUSH
38468: LD_INT 2
38470: ARRAY
38471: PPUSH
38472: CALL_OW 235
38476: GO 38451
38478: POP
38479: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38480: LD_ADDR_EXP 114
38484: PUSH
38485: LD_EXP 114
38489: PPUSH
38490: LD_VAR 0 4
38494: PPUSH
38495: EMPTY
38496: PPUSH
38497: CALL_OW 1
38501: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38502: LD_VAR 0 1
38506: PPUSH
38507: LD_INT 0
38509: PPUSH
38510: CALL_OW 505
// end ; end ;
38514: LD_VAR 0 2
38518: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38519: LD_INT 0
38521: PPUSH
38522: PPUSH
38523: PPUSH
// if not hack in hackTanks or not vehicles then
38524: LD_VAR 0 1
38528: PUSH
38529: LD_EXP 113
38533: IN
38534: NOT
38535: PUSH
38536: LD_VAR 0 2
38540: NOT
38541: OR
38542: IFFALSE 38546
// exit ;
38544: GO 38821
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38546: LD_ADDR_VAR 0 2
38550: PUSH
38551: LD_VAR 0 1
38555: PPUSH
38556: LD_VAR 0 2
38560: PPUSH
38561: LD_INT 1
38563: PPUSH
38564: LD_INT 1
38566: PPUSH
38567: CALL 46781 0 4
38571: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: LD_EXP 113
38581: PPUSH
38582: LD_VAR 0 1
38586: PPUSH
38587: CALL 46131 0 2
38591: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38592: LD_EXP 114
38596: PUSH
38597: LD_VAR 0 5
38601: ARRAY
38602: PUSH
38603: LD_EXP 115
38607: LESS
38608: IFFALSE 38797
// begin for i := 1 to vehicles do
38610: LD_ADDR_VAR 0 4
38614: PUSH
38615: DOUBLE
38616: LD_INT 1
38618: DEC
38619: ST_TO_ADDR
38620: LD_VAR 0 2
38624: PUSH
38625: FOR_TO
38626: IFFALSE 38795
// begin if hackTanksCaptured [ index ] = hackLimit then
38628: LD_EXP 114
38632: PUSH
38633: LD_VAR 0 5
38637: ARRAY
38638: PUSH
38639: LD_EXP 115
38643: EQUAL
38644: IFFALSE 38648
// break ;
38646: GO 38795
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38648: LD_ADDR_EXP 117
38652: PUSH
38653: LD_EXP 117
38657: PPUSH
38658: LD_VAR 0 5
38662: PPUSH
38663: LD_EXP 117
38667: PUSH
38668: LD_VAR 0 5
38672: ARRAY
38673: PUSH
38674: LD_INT 1
38676: PLUS
38677: PPUSH
38678: CALL_OW 1
38682: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38683: LD_ADDR_EXP 114
38687: PUSH
38688: LD_EXP 114
38692: PPUSH
38693: LD_VAR 0 5
38697: PUSH
38698: LD_EXP 114
38702: PUSH
38703: LD_VAR 0 5
38707: ARRAY
38708: PUSH
38709: LD_INT 1
38711: PLUS
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PPUSH
38717: LD_VAR 0 2
38721: PUSH
38722: LD_VAR 0 4
38726: ARRAY
38727: PUSH
38728: LD_VAR 0 2
38732: PUSH
38733: LD_VAR 0 4
38737: ARRAY
38738: PPUSH
38739: CALL_OW 255
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PPUSH
38748: CALL 46346 0 3
38752: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38753: LD_VAR 0 2
38757: PUSH
38758: LD_VAR 0 4
38762: ARRAY
38763: PPUSH
38764: LD_VAR 0 1
38768: PPUSH
38769: CALL_OW 255
38773: PPUSH
38774: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38778: LD_VAR 0 2
38782: PUSH
38783: LD_VAR 0 4
38787: ARRAY
38788: PPUSH
38789: CALL_OW 141
// end ;
38793: GO 38625
38795: POP
38796: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38797: LD_VAR 0 1
38801: PPUSH
38802: LD_EXP 114
38806: PUSH
38807: LD_VAR 0 5
38811: ARRAY
38812: PUSH
38813: LD_INT 0
38815: PLUS
38816: PPUSH
38817: CALL_OW 505
// end ;
38821: LD_VAR 0 3
38825: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38826: LD_INT 0
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
// if not hack in hackTanks then
38832: LD_VAR 0 1
38836: PUSH
38837: LD_EXP 113
38841: IN
38842: NOT
38843: IFFALSE 38847
// exit ;
38845: GO 39087
// index := GetElementIndex ( hackTanks , hack ) ;
38847: LD_ADDR_VAR 0 4
38851: PUSH
38852: LD_EXP 113
38856: PPUSH
38857: LD_VAR 0 1
38861: PPUSH
38862: CALL 46131 0 2
38866: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38867: LD_ADDR_VAR 0 3
38871: PUSH
38872: DOUBLE
38873: LD_EXP 114
38877: PUSH
38878: LD_VAR 0 4
38882: ARRAY
38883: INC
38884: ST_TO_ADDR
38885: LD_INT 1
38887: PUSH
38888: FOR_DOWNTO
38889: IFFALSE 39061
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38891: LD_ADDR_VAR 0 5
38895: PUSH
38896: LD_EXP 114
38900: PUSH
38901: LD_VAR 0 4
38905: ARRAY
38906: PUSH
38907: LD_VAR 0 3
38911: ARRAY
38912: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38913: LD_VAR 0 5
38917: PUSH
38918: LD_INT 1
38920: ARRAY
38921: PPUSH
38922: CALL_OW 302
38926: NOT
38927: PUSH
38928: LD_VAR 0 5
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: PPUSH
38937: CALL_OW 255
38941: PUSH
38942: LD_VAR 0 1
38946: PPUSH
38947: CALL_OW 255
38951: NONEQUAL
38952: OR
38953: IFFALSE 39059
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38955: LD_VAR 0 5
38959: PUSH
38960: LD_INT 1
38962: ARRAY
38963: PPUSH
38964: CALL_OW 305
38968: PUSH
38969: LD_VAR 0 5
38973: PUSH
38974: LD_INT 1
38976: ARRAY
38977: PPUSH
38978: CALL_OW 255
38982: PUSH
38983: LD_VAR 0 1
38987: PPUSH
38988: CALL_OW 255
38992: EQUAL
38993: AND
38994: IFFALSE 39018
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38996: LD_VAR 0 5
39000: PUSH
39001: LD_INT 1
39003: ARRAY
39004: PPUSH
39005: LD_VAR 0 5
39009: PUSH
39010: LD_INT 2
39012: ARRAY
39013: PPUSH
39014: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39018: LD_ADDR_EXP 114
39022: PUSH
39023: LD_EXP 114
39027: PPUSH
39028: LD_VAR 0 4
39032: PPUSH
39033: LD_EXP 114
39037: PUSH
39038: LD_VAR 0 4
39042: ARRAY
39043: PPUSH
39044: LD_VAR 0 3
39048: PPUSH
39049: CALL_OW 3
39053: PPUSH
39054: CALL_OW 1
39058: ST_TO_ADDR
// end ; end ;
39059: GO 38888
39061: POP
39062: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39063: LD_VAR 0 1
39067: PPUSH
39068: LD_EXP 114
39072: PUSH
39073: LD_VAR 0 4
39077: ARRAY
39078: PUSH
39079: LD_INT 0
39081: PLUS
39082: PPUSH
39083: CALL_OW 505
// end ;
39087: LD_VAR 0 2
39091: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39092: LD_INT 0
39094: PPUSH
39095: PPUSH
39096: PPUSH
39097: PPUSH
// if not hack in hackTanks then
39098: LD_VAR 0 1
39102: PUSH
39103: LD_EXP 113
39107: IN
39108: NOT
39109: IFFALSE 39113
// exit ;
39111: GO 39198
// index := GetElementIndex ( hackTanks , hack ) ;
39113: LD_ADDR_VAR 0 5
39117: PUSH
39118: LD_EXP 113
39122: PPUSH
39123: LD_VAR 0 1
39127: PPUSH
39128: CALL 46131 0 2
39132: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39133: LD_ADDR_VAR 0 4
39137: PUSH
39138: DOUBLE
39139: LD_INT 1
39141: DEC
39142: ST_TO_ADDR
39143: LD_EXP 114
39147: PUSH
39148: LD_VAR 0 5
39152: ARRAY
39153: PUSH
39154: FOR_TO
39155: IFFALSE 39196
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39157: LD_EXP 114
39161: PUSH
39162: LD_VAR 0 5
39166: ARRAY
39167: PUSH
39168: LD_VAR 0 4
39172: ARRAY
39173: PUSH
39174: LD_INT 1
39176: ARRAY
39177: PUSH
39178: LD_VAR 0 2
39182: EQUAL
39183: IFFALSE 39194
// KillUnit ( vehicle ) ;
39185: LD_VAR 0 2
39189: PPUSH
39190: CALL_OW 66
39194: GO 39154
39196: POP
39197: POP
// end ;
39198: LD_VAR 0 3
39202: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39203: LD_EXP 118
39207: NOT
39208: IFFALSE 39243
39210: GO 39212
39212: DISABLE
// begin initMiner := true ;
39213: LD_ADDR_EXP 118
39217: PUSH
39218: LD_INT 1
39220: ST_TO_ADDR
// minersList := [ ] ;
39221: LD_ADDR_EXP 119
39225: PUSH
39226: EMPTY
39227: ST_TO_ADDR
// minerMinesList := [ ] ;
39228: LD_ADDR_EXP 120
39232: PUSH
39233: EMPTY
39234: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39235: LD_ADDR_EXP 121
39239: PUSH
39240: LD_INT 5
39242: ST_TO_ADDR
// end ;
39243: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39244: LD_EXP 118
39248: PUSH
39249: LD_INT 34
39251: PUSH
39252: LD_INT 81
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PPUSH
39259: CALL_OW 69
39263: AND
39264: IFFALSE 39725
39266: GO 39268
39268: DISABLE
39269: LD_INT 0
39271: PPUSH
39272: PPUSH
39273: PPUSH
39274: PPUSH
// begin enable ;
39275: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39276: LD_ADDR_VAR 0 1
39280: PUSH
39281: LD_INT 34
39283: PUSH
39284: LD_INT 81
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PPUSH
39291: CALL_OW 69
39295: PUSH
39296: FOR_IN
39297: IFFALSE 39369
// begin if not i in minersList then
39299: LD_VAR 0 1
39303: PUSH
39304: LD_EXP 119
39308: IN
39309: NOT
39310: IFFALSE 39367
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39312: LD_ADDR_EXP 119
39316: PUSH
39317: LD_EXP 119
39321: PPUSH
39322: LD_EXP 119
39326: PUSH
39327: LD_INT 1
39329: PLUS
39330: PPUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: CALL_OW 1
39340: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39341: LD_ADDR_EXP 120
39345: PUSH
39346: LD_EXP 120
39350: PPUSH
39351: LD_EXP 120
39355: PUSH
39356: LD_INT 1
39358: PLUS
39359: PPUSH
39360: EMPTY
39361: PPUSH
39362: CALL_OW 1
39366: ST_TO_ADDR
// end end ;
39367: GO 39296
39369: POP
39370: POP
// for i := minerMinesList downto 1 do
39371: LD_ADDR_VAR 0 1
39375: PUSH
39376: DOUBLE
39377: LD_EXP 120
39381: INC
39382: ST_TO_ADDR
39383: LD_INT 1
39385: PUSH
39386: FOR_DOWNTO
39387: IFFALSE 39723
// begin if IsLive ( minersList [ i ] ) then
39389: LD_EXP 119
39393: PUSH
39394: LD_VAR 0 1
39398: ARRAY
39399: PPUSH
39400: CALL_OW 300
39404: IFFALSE 39432
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39406: LD_EXP 119
39410: PUSH
39411: LD_VAR 0 1
39415: ARRAY
39416: PPUSH
39417: LD_EXP 120
39421: PUSH
39422: LD_VAR 0 1
39426: ARRAY
39427: PPUSH
39428: CALL_OW 505
// if not minerMinesList [ i ] then
39432: LD_EXP 120
39436: PUSH
39437: LD_VAR 0 1
39441: ARRAY
39442: NOT
39443: IFFALSE 39447
// continue ;
39445: GO 39386
// for j := minerMinesList [ i ] downto 1 do
39447: LD_ADDR_VAR 0 2
39451: PUSH
39452: DOUBLE
39453: LD_EXP 120
39457: PUSH
39458: LD_VAR 0 1
39462: ARRAY
39463: INC
39464: ST_TO_ADDR
39465: LD_INT 1
39467: PUSH
39468: FOR_DOWNTO
39469: IFFALSE 39719
// begin side := GetSide ( minersList [ i ] ) ;
39471: LD_ADDR_VAR 0 3
39475: PUSH
39476: LD_EXP 119
39480: PUSH
39481: LD_VAR 0 1
39485: ARRAY
39486: PPUSH
39487: CALL_OW 255
39491: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39492: LD_ADDR_VAR 0 4
39496: PUSH
39497: LD_EXP 120
39501: PUSH
39502: LD_VAR 0 1
39506: ARRAY
39507: PUSH
39508: LD_VAR 0 2
39512: ARRAY
39513: PUSH
39514: LD_INT 1
39516: ARRAY
39517: PPUSH
39518: LD_EXP 120
39522: PUSH
39523: LD_VAR 0 1
39527: ARRAY
39528: PUSH
39529: LD_VAR 0 2
39533: ARRAY
39534: PUSH
39535: LD_INT 2
39537: ARRAY
39538: PPUSH
39539: CALL_OW 428
39543: ST_TO_ADDR
// if not tmp then
39544: LD_VAR 0 4
39548: NOT
39549: IFFALSE 39553
// continue ;
39551: GO 39468
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39553: LD_VAR 0 4
39557: PUSH
39558: LD_INT 81
39560: PUSH
39561: LD_VAR 0 3
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PPUSH
39570: CALL_OW 69
39574: IN
39575: PUSH
39576: LD_EXP 120
39580: PUSH
39581: LD_VAR 0 1
39585: ARRAY
39586: PUSH
39587: LD_VAR 0 2
39591: ARRAY
39592: PUSH
39593: LD_INT 1
39595: ARRAY
39596: PPUSH
39597: LD_EXP 120
39601: PUSH
39602: LD_VAR 0 1
39606: ARRAY
39607: PUSH
39608: LD_VAR 0 2
39612: ARRAY
39613: PUSH
39614: LD_INT 2
39616: ARRAY
39617: PPUSH
39618: CALL_OW 458
39622: AND
39623: IFFALSE 39717
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39625: LD_EXP 120
39629: PUSH
39630: LD_VAR 0 1
39634: ARRAY
39635: PUSH
39636: LD_VAR 0 2
39640: ARRAY
39641: PUSH
39642: LD_INT 1
39644: ARRAY
39645: PPUSH
39646: LD_EXP 120
39650: PUSH
39651: LD_VAR 0 1
39655: ARRAY
39656: PUSH
39657: LD_VAR 0 2
39661: ARRAY
39662: PUSH
39663: LD_INT 2
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 3
39671: PPUSH
39672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39676: LD_ADDR_EXP 120
39680: PUSH
39681: LD_EXP 120
39685: PPUSH
39686: LD_VAR 0 1
39690: PPUSH
39691: LD_EXP 120
39695: PUSH
39696: LD_VAR 0 1
39700: ARRAY
39701: PPUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: CALL_OW 3
39711: PPUSH
39712: CALL_OW 1
39716: ST_TO_ADDR
// end ; end ;
39717: GO 39468
39719: POP
39720: POP
// end ;
39721: GO 39386
39723: POP
39724: POP
// end ;
39725: PPOPN 4
39727: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39728: LD_INT 0
39730: PPUSH
39731: PPUSH
// result := false ;
39732: LD_ADDR_VAR 0 4
39736: PUSH
39737: LD_INT 0
39739: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39740: LD_VAR 0 1
39744: PPUSH
39745: CALL_OW 264
39749: PUSH
39750: LD_INT 81
39752: EQUAL
39753: NOT
39754: IFFALSE 39758
// exit ;
39756: GO 39998
// index := GetElementIndex ( minersList , unit ) ;
39758: LD_ADDR_VAR 0 5
39762: PUSH
39763: LD_EXP 119
39767: PPUSH
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL 46131 0 2
39777: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39778: LD_EXP 120
39782: PUSH
39783: LD_VAR 0 5
39787: ARRAY
39788: PUSH
39789: LD_EXP 121
39793: GREATEREQUAL
39794: IFFALSE 39798
// exit ;
39796: GO 39998
// ComMoveXY ( unit , x , y ) ;
39798: LD_VAR 0 1
39802: PPUSH
39803: LD_VAR 0 2
39807: PPUSH
39808: LD_VAR 0 3
39812: PPUSH
39813: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39817: LD_INT 35
39819: PPUSH
39820: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39824: LD_VAR 0 1
39828: PPUSH
39829: LD_VAR 0 2
39833: PPUSH
39834: LD_VAR 0 3
39838: PPUSH
39839: CALL 77486 0 3
39843: NOT
39844: PUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 314
39854: AND
39855: IFFALSE 39859
// exit ;
39857: GO 39998
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39859: LD_VAR 0 2
39863: PPUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: CALL_OW 428
39873: PUSH
39874: LD_VAR 0 1
39878: EQUAL
39879: PUSH
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 314
39889: NOT
39890: AND
39891: IFFALSE 39817
// PlaySoundXY ( x , y , PlantMine ) ;
39893: LD_VAR 0 2
39897: PPUSH
39898: LD_VAR 0 3
39902: PPUSH
39903: LD_STRING PlantMine
39905: PPUSH
39906: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39910: LD_VAR 0 2
39914: PPUSH
39915: LD_VAR 0 3
39919: PPUSH
39920: LD_VAR 0 1
39924: PPUSH
39925: CALL_OW 255
39929: PPUSH
39930: LD_INT 0
39932: PPUSH
39933: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39937: LD_ADDR_EXP 120
39941: PUSH
39942: LD_EXP 120
39946: PPUSH
39947: LD_VAR 0 5
39951: PUSH
39952: LD_EXP 120
39956: PUSH
39957: LD_VAR 0 5
39961: ARRAY
39962: PUSH
39963: LD_INT 1
39965: PLUS
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PPUSH
39971: LD_VAR 0 2
39975: PUSH
39976: LD_VAR 0 3
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PPUSH
39985: CALL 46346 0 3
39989: ST_TO_ADDR
// result := true ;
39990: LD_ADDR_VAR 0 4
39994: PUSH
39995: LD_INT 1
39997: ST_TO_ADDR
// end ;
39998: LD_VAR 0 4
40002: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40003: LD_INT 0
40005: PPUSH
40006: PPUSH
40007: PPUSH
// if not unit in minersList then
40008: LD_VAR 0 1
40012: PUSH
40013: LD_EXP 119
40017: IN
40018: NOT
40019: IFFALSE 40023
// exit ;
40021: GO 40415
// index := GetElementIndex ( minersList , unit ) ;
40023: LD_ADDR_VAR 0 6
40027: PUSH
40028: LD_EXP 119
40032: PPUSH
40033: LD_VAR 0 1
40037: PPUSH
40038: CALL 46131 0 2
40042: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40043: LD_ADDR_VAR 0 5
40047: PUSH
40048: DOUBLE
40049: LD_EXP 120
40053: PUSH
40054: LD_VAR 0 6
40058: ARRAY
40059: INC
40060: ST_TO_ADDR
40061: LD_INT 1
40063: PUSH
40064: FOR_DOWNTO
40065: IFFALSE 40226
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40067: LD_EXP 120
40071: PUSH
40072: LD_VAR 0 6
40076: ARRAY
40077: PUSH
40078: LD_VAR 0 5
40082: ARRAY
40083: PUSH
40084: LD_INT 1
40086: ARRAY
40087: PUSH
40088: LD_VAR 0 2
40092: EQUAL
40093: PUSH
40094: LD_EXP 120
40098: PUSH
40099: LD_VAR 0 6
40103: ARRAY
40104: PUSH
40105: LD_VAR 0 5
40109: ARRAY
40110: PUSH
40111: LD_INT 2
40113: ARRAY
40114: PUSH
40115: LD_VAR 0 3
40119: EQUAL
40120: AND
40121: IFFALSE 40224
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40123: LD_EXP 120
40127: PUSH
40128: LD_VAR 0 6
40132: ARRAY
40133: PUSH
40134: LD_VAR 0 5
40138: ARRAY
40139: PUSH
40140: LD_INT 1
40142: ARRAY
40143: PPUSH
40144: LD_EXP 120
40148: PUSH
40149: LD_VAR 0 6
40153: ARRAY
40154: PUSH
40155: LD_VAR 0 5
40159: ARRAY
40160: PUSH
40161: LD_INT 2
40163: ARRAY
40164: PPUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: CALL_OW 255
40174: PPUSH
40175: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40179: LD_ADDR_EXP 120
40183: PUSH
40184: LD_EXP 120
40188: PPUSH
40189: LD_VAR 0 6
40193: PPUSH
40194: LD_EXP 120
40198: PUSH
40199: LD_VAR 0 6
40203: ARRAY
40204: PPUSH
40205: LD_VAR 0 5
40209: PPUSH
40210: CALL_OW 3
40214: PPUSH
40215: CALL_OW 1
40219: ST_TO_ADDR
// exit ;
40220: POP
40221: POP
40222: GO 40415
// end ; end ;
40224: GO 40064
40226: POP
40227: POP
// for i := minerMinesList [ index ] downto 1 do
40228: LD_ADDR_VAR 0 5
40232: PUSH
40233: DOUBLE
40234: LD_EXP 120
40238: PUSH
40239: LD_VAR 0 6
40243: ARRAY
40244: INC
40245: ST_TO_ADDR
40246: LD_INT 1
40248: PUSH
40249: FOR_DOWNTO
40250: IFFALSE 40413
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40252: LD_EXP 120
40256: PUSH
40257: LD_VAR 0 6
40261: ARRAY
40262: PUSH
40263: LD_VAR 0 5
40267: ARRAY
40268: PUSH
40269: LD_INT 1
40271: ARRAY
40272: PPUSH
40273: LD_EXP 120
40277: PUSH
40278: LD_VAR 0 6
40282: ARRAY
40283: PUSH
40284: LD_VAR 0 5
40288: ARRAY
40289: PUSH
40290: LD_INT 2
40292: ARRAY
40293: PPUSH
40294: LD_VAR 0 2
40298: PPUSH
40299: LD_VAR 0 3
40303: PPUSH
40304: CALL_OW 298
40308: PUSH
40309: LD_INT 6
40311: LESS
40312: IFFALSE 40411
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40314: LD_EXP 120
40318: PUSH
40319: LD_VAR 0 6
40323: ARRAY
40324: PUSH
40325: LD_VAR 0 5
40329: ARRAY
40330: PUSH
40331: LD_INT 1
40333: ARRAY
40334: PPUSH
40335: LD_EXP 120
40339: PUSH
40340: LD_VAR 0 6
40344: ARRAY
40345: PUSH
40346: LD_VAR 0 5
40350: ARRAY
40351: PUSH
40352: LD_INT 2
40354: ARRAY
40355: PPUSH
40356: LD_VAR 0 1
40360: PPUSH
40361: CALL_OW 255
40365: PPUSH
40366: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40370: LD_ADDR_EXP 120
40374: PUSH
40375: LD_EXP 120
40379: PPUSH
40380: LD_VAR 0 6
40384: PPUSH
40385: LD_EXP 120
40389: PUSH
40390: LD_VAR 0 6
40394: ARRAY
40395: PPUSH
40396: LD_VAR 0 5
40400: PPUSH
40401: CALL_OW 3
40405: PPUSH
40406: CALL_OW 1
40410: ST_TO_ADDR
// end ; end ;
40411: GO 40249
40413: POP
40414: POP
// end ;
40415: LD_VAR 0 4
40419: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40420: LD_INT 0
40422: PPUSH
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 264
40440: PUSH
40441: LD_INT 81
40443: EQUAL
40444: NOT
40445: PUSH
40446: LD_VAR 0 1
40450: PUSH
40451: LD_EXP 119
40455: IN
40456: NOT
40457: OR
40458: IFFALSE 40462
// exit ;
40460: GO 40784
// index := GetElementIndex ( minersList , unit ) ;
40462: LD_ADDR_VAR 0 6
40466: PUSH
40467: LD_EXP 119
40471: PPUSH
40472: LD_VAR 0 1
40476: PPUSH
40477: CALL 46131 0 2
40481: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40482: LD_ADDR_VAR 0 8
40486: PUSH
40487: LD_EXP 121
40491: PUSH
40492: LD_EXP 120
40496: PUSH
40497: LD_VAR 0 6
40501: ARRAY
40502: MINUS
40503: ST_TO_ADDR
// if not minesFreeAmount then
40504: LD_VAR 0 8
40508: NOT
40509: IFFALSE 40513
// exit ;
40511: GO 40784
// tmp := [ ] ;
40513: LD_ADDR_VAR 0 7
40517: PUSH
40518: EMPTY
40519: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40520: LD_ADDR_VAR 0 5
40524: PUSH
40525: DOUBLE
40526: LD_INT 1
40528: DEC
40529: ST_TO_ADDR
40530: LD_VAR 0 8
40534: PUSH
40535: FOR_TO
40536: IFFALSE 40731
// begin _d := rand ( 0 , 5 ) ;
40538: LD_ADDR_VAR 0 11
40542: PUSH
40543: LD_INT 0
40545: PPUSH
40546: LD_INT 5
40548: PPUSH
40549: CALL_OW 12
40553: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40554: LD_ADDR_VAR 0 12
40558: PUSH
40559: LD_INT 2
40561: PPUSH
40562: LD_INT 6
40564: PPUSH
40565: CALL_OW 12
40569: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40570: LD_ADDR_VAR 0 9
40574: PUSH
40575: LD_VAR 0 2
40579: PPUSH
40580: LD_VAR 0 11
40584: PPUSH
40585: LD_VAR 0 12
40589: PPUSH
40590: CALL_OW 272
40594: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40595: LD_ADDR_VAR 0 10
40599: PUSH
40600: LD_VAR 0 3
40604: PPUSH
40605: LD_VAR 0 11
40609: PPUSH
40610: LD_VAR 0 12
40614: PPUSH
40615: CALL_OW 273
40619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40620: LD_VAR 0 9
40624: PPUSH
40625: LD_VAR 0 10
40629: PPUSH
40630: CALL_OW 488
40634: PUSH
40635: LD_VAR 0 9
40639: PUSH
40640: LD_VAR 0 10
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_VAR 0 7
40653: IN
40654: NOT
40655: AND
40656: PUSH
40657: LD_VAR 0 9
40661: PPUSH
40662: LD_VAR 0 10
40666: PPUSH
40667: CALL_OW 458
40671: NOT
40672: AND
40673: IFFALSE 40715
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40675: LD_ADDR_VAR 0 7
40679: PUSH
40680: LD_VAR 0 7
40684: PPUSH
40685: LD_VAR 0 7
40689: PUSH
40690: LD_INT 1
40692: PLUS
40693: PPUSH
40694: LD_VAR 0 9
40698: PUSH
40699: LD_VAR 0 10
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PPUSH
40708: CALL_OW 1
40712: ST_TO_ADDR
40713: GO 40729
// i := i - 1 ;
40715: LD_ADDR_VAR 0 5
40719: PUSH
40720: LD_VAR 0 5
40724: PUSH
40725: LD_INT 1
40727: MINUS
40728: ST_TO_ADDR
// end ;
40729: GO 40535
40731: POP
40732: POP
// for i in tmp do
40733: LD_ADDR_VAR 0 5
40737: PUSH
40738: LD_VAR 0 7
40742: PUSH
40743: FOR_IN
40744: IFFALSE 40782
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40746: LD_VAR 0 1
40750: PPUSH
40751: LD_VAR 0 5
40755: PUSH
40756: LD_INT 1
40758: ARRAY
40759: PPUSH
40760: LD_VAR 0 5
40764: PUSH
40765: LD_INT 2
40767: ARRAY
40768: PPUSH
40769: CALL 39728 0 3
40773: NOT
40774: IFFALSE 40780
// exit ;
40776: POP
40777: POP
40778: GO 40784
40780: GO 40743
40782: POP
40783: POP
// end ;
40784: LD_VAR 0 4
40788: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40789: LD_INT 0
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
// if not GetClass ( unit ) = class_sniper then
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 257
40807: PUSH
40808: LD_INT 5
40810: EQUAL
40811: NOT
40812: IFFALSE 40816
// exit ;
40814: GO 41204
// dist := 8 ;
40816: LD_ADDR_VAR 0 5
40820: PUSH
40821: LD_INT 8
40823: ST_TO_ADDR
// viewRange := 12 ;
40824: LD_ADDR_VAR 0 7
40828: PUSH
40829: LD_INT 12
40831: ST_TO_ADDR
// side := GetSide ( unit ) ;
40832: LD_ADDR_VAR 0 6
40836: PUSH
40837: LD_VAR 0 1
40841: PPUSH
40842: CALL_OW 255
40846: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40847: LD_INT 61
40849: PPUSH
40850: LD_VAR 0 6
40854: PPUSH
40855: CALL_OW 321
40859: PUSH
40860: LD_INT 2
40862: EQUAL
40863: IFFALSE 40873
// viewRange := 16 ;
40865: LD_ADDR_VAR 0 7
40869: PUSH
40870: LD_INT 16
40872: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40873: LD_VAR 0 1
40877: PPUSH
40878: LD_VAR 0 2
40882: PPUSH
40883: LD_VAR 0 3
40887: PPUSH
40888: CALL_OW 297
40892: PUSH
40893: LD_VAR 0 5
40897: GREATER
40898: IFFALSE 40977
// begin ComMoveXY ( unit , x , y ) ;
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_VAR 0 2
40909: PPUSH
40910: LD_VAR 0 3
40914: PPUSH
40915: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40919: LD_INT 35
40921: PPUSH
40922: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40926: LD_VAR 0 1
40930: PPUSH
40931: LD_VAR 0 2
40935: PPUSH
40936: LD_VAR 0 3
40940: PPUSH
40941: CALL 77486 0 3
40945: NOT
40946: IFFALSE 40950
// exit ;
40948: GO 41204
// until GetDistUnitXY ( unit , x , y ) < dist ;
40950: LD_VAR 0 1
40954: PPUSH
40955: LD_VAR 0 2
40959: PPUSH
40960: LD_VAR 0 3
40964: PPUSH
40965: CALL_OW 297
40969: PUSH
40970: LD_VAR 0 5
40974: LESS
40975: IFFALSE 40919
// end ; ComTurnXY ( unit , x , y ) ;
40977: LD_VAR 0 1
40981: PPUSH
40982: LD_VAR 0 2
40986: PPUSH
40987: LD_VAR 0 3
40991: PPUSH
40992: CALL_OW 118
// wait ( 5 ) ;
40996: LD_INT 5
40998: PPUSH
40999: CALL_OW 67
// _d := GetDir ( unit ) ;
41003: LD_ADDR_VAR 0 10
41007: PUSH
41008: LD_VAR 0 1
41012: PPUSH
41013: CALL_OW 254
41017: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41018: LD_ADDR_VAR 0 8
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 250
41032: PPUSH
41033: LD_VAR 0 10
41037: PPUSH
41038: LD_VAR 0 5
41042: PPUSH
41043: CALL_OW 272
41047: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41048: LD_ADDR_VAR 0 9
41052: PUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 251
41062: PPUSH
41063: LD_VAR 0 10
41067: PPUSH
41068: LD_VAR 0 5
41072: PPUSH
41073: CALL_OW 273
41077: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41078: LD_VAR 0 8
41082: PPUSH
41083: LD_VAR 0 9
41087: PPUSH
41088: CALL_OW 488
41092: NOT
41093: IFFALSE 41097
// exit ;
41095: GO 41204
// ComAnimCustom ( unit , 1 ) ;
41097: LD_VAR 0 1
41101: PPUSH
41102: LD_INT 1
41104: PPUSH
41105: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41109: LD_VAR 0 8
41113: PPUSH
41114: LD_VAR 0 9
41118: PPUSH
41119: LD_VAR 0 6
41123: PPUSH
41124: LD_VAR 0 7
41128: PPUSH
41129: CALL_OW 330
// repeat wait ( 1 ) ;
41133: LD_INT 1
41135: PPUSH
41136: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41140: LD_VAR 0 1
41144: PPUSH
41145: CALL_OW 316
41149: PUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: CALL_OW 314
41159: OR
41160: PUSH
41161: LD_VAR 0 1
41165: PPUSH
41166: CALL_OW 302
41170: NOT
41171: OR
41172: PUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 301
41182: OR
41183: IFFALSE 41133
// RemoveSeeing ( _x , _y , side ) ;
41185: LD_VAR 0 8
41189: PPUSH
41190: LD_VAR 0 9
41194: PPUSH
41195: LD_VAR 0 6
41199: PPUSH
41200: CALL_OW 331
// end ; end_of_file
41204: LD_VAR 0 4
41208: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41209: LD_INT 0
41211: PPUSH
41212: PPUSH
// if exist_mode then
41213: LD_VAR 0 2
41217: IFFALSE 41242
// unit := CreateCharacter ( prefix & ident ) else
41219: LD_ADDR_VAR 0 5
41223: PUSH
41224: LD_VAR 0 3
41228: PUSH
41229: LD_VAR 0 1
41233: STR
41234: PPUSH
41235: CALL_OW 34
41239: ST_TO_ADDR
41240: GO 41257
// unit := NewCharacter ( ident ) ;
41242: LD_ADDR_VAR 0 5
41246: PUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 25
41256: ST_TO_ADDR
// result := unit ;
41257: LD_ADDR_VAR 0 4
41261: PUSH
41262: LD_VAR 0 5
41266: ST_TO_ADDR
// end ;
41267: LD_VAR 0 4
41271: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41272: LD_INT 0
41274: PPUSH
41275: PPUSH
// if not side or not nation then
41276: LD_VAR 0 1
41280: NOT
41281: PUSH
41282: LD_VAR 0 2
41286: NOT
41287: OR
41288: IFFALSE 41292
// exit ;
41290: GO 42060
// case nation of nation_american :
41292: LD_VAR 0 2
41296: PUSH
41297: LD_INT 1
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41305
41303: GO 41519
41305: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41306: LD_ADDR_VAR 0 4
41310: PUSH
41311: LD_INT 35
41313: PUSH
41314: LD_INT 45
41316: PUSH
41317: LD_INT 46
41319: PUSH
41320: LD_INT 47
41322: PUSH
41323: LD_INT 82
41325: PUSH
41326: LD_INT 83
41328: PUSH
41329: LD_INT 84
41331: PUSH
41332: LD_INT 85
41334: PUSH
41335: LD_INT 86
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 6
41346: PUSH
41347: LD_INT 15
41349: PUSH
41350: LD_INT 16
41352: PUSH
41353: LD_INT 7
41355: PUSH
41356: LD_INT 12
41358: PUSH
41359: LD_INT 13
41361: PUSH
41362: LD_INT 10
41364: PUSH
41365: LD_INT 14
41367: PUSH
41368: LD_INT 20
41370: PUSH
41371: LD_INT 21
41373: PUSH
41374: LD_INT 22
41376: PUSH
41377: LD_INT 25
41379: PUSH
41380: LD_INT 32
41382: PUSH
41383: LD_INT 27
41385: PUSH
41386: LD_INT 36
41388: PUSH
41389: LD_INT 69
41391: PUSH
41392: LD_INT 39
41394: PUSH
41395: LD_INT 34
41397: PUSH
41398: LD_INT 40
41400: PUSH
41401: LD_INT 48
41403: PUSH
41404: LD_INT 49
41406: PUSH
41407: LD_INT 50
41409: PUSH
41410: LD_INT 51
41412: PUSH
41413: LD_INT 52
41415: PUSH
41416: LD_INT 53
41418: PUSH
41419: LD_INT 54
41421: PUSH
41422: LD_INT 55
41424: PUSH
41425: LD_INT 56
41427: PUSH
41428: LD_INT 57
41430: PUSH
41431: LD_INT 58
41433: PUSH
41434: LD_INT 59
41436: PUSH
41437: LD_INT 60
41439: PUSH
41440: LD_INT 61
41442: PUSH
41443: LD_INT 62
41445: PUSH
41446: LD_INT 80
41448: PUSH
41449: LD_INT 82
41451: PUSH
41452: LD_INT 83
41454: PUSH
41455: LD_INT 84
41457: PUSH
41458: LD_INT 85
41460: PUSH
41461: LD_INT 86
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: ST_TO_ADDR
41517: GO 41984
41519: LD_INT 2
41521: DOUBLE
41522: EQUAL
41523: IFTRUE 41527
41525: GO 41753
41527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41528: LD_ADDR_VAR 0 4
41532: PUSH
41533: LD_INT 35
41535: PUSH
41536: LD_INT 45
41538: PUSH
41539: LD_INT 46
41541: PUSH
41542: LD_INT 47
41544: PUSH
41545: LD_INT 82
41547: PUSH
41548: LD_INT 83
41550: PUSH
41551: LD_INT 84
41553: PUSH
41554: LD_INT 85
41556: PUSH
41557: LD_INT 87
41559: PUSH
41560: LD_INT 70
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 11
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: LD_INT 4
41574: PUSH
41575: LD_INT 5
41577: PUSH
41578: LD_INT 6
41580: PUSH
41581: LD_INT 15
41583: PUSH
41584: LD_INT 18
41586: PUSH
41587: LD_INT 7
41589: PUSH
41590: LD_INT 17
41592: PUSH
41593: LD_INT 8
41595: PUSH
41596: LD_INT 20
41598: PUSH
41599: LD_INT 21
41601: PUSH
41602: LD_INT 22
41604: PUSH
41605: LD_INT 72
41607: PUSH
41608: LD_INT 26
41610: PUSH
41611: LD_INT 69
41613: PUSH
41614: LD_INT 39
41616: PUSH
41617: LD_INT 40
41619: PUSH
41620: LD_INT 41
41622: PUSH
41623: LD_INT 42
41625: PUSH
41626: LD_INT 43
41628: PUSH
41629: LD_INT 48
41631: PUSH
41632: LD_INT 49
41634: PUSH
41635: LD_INT 50
41637: PUSH
41638: LD_INT 51
41640: PUSH
41641: LD_INT 52
41643: PUSH
41644: LD_INT 53
41646: PUSH
41647: LD_INT 54
41649: PUSH
41650: LD_INT 55
41652: PUSH
41653: LD_INT 56
41655: PUSH
41656: LD_INT 60
41658: PUSH
41659: LD_INT 61
41661: PUSH
41662: LD_INT 62
41664: PUSH
41665: LD_INT 66
41667: PUSH
41668: LD_INT 67
41670: PUSH
41671: LD_INT 68
41673: PUSH
41674: LD_INT 81
41676: PUSH
41677: LD_INT 82
41679: PUSH
41680: LD_INT 83
41682: PUSH
41683: LD_INT 84
41685: PUSH
41686: LD_INT 85
41688: PUSH
41689: LD_INT 87
41691: PUSH
41692: LD_INT 88
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: ST_TO_ADDR
41751: GO 41984
41753: LD_INT 3
41755: DOUBLE
41756: EQUAL
41757: IFTRUE 41761
41759: GO 41983
41761: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41762: LD_ADDR_VAR 0 4
41766: PUSH
41767: LD_INT 46
41769: PUSH
41770: LD_INT 47
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 82
41781: PUSH
41782: LD_INT 83
41784: PUSH
41785: LD_INT 84
41787: PUSH
41788: LD_INT 85
41790: PUSH
41791: LD_INT 86
41793: PUSH
41794: LD_INT 11
41796: PUSH
41797: LD_INT 9
41799: PUSH
41800: LD_INT 20
41802: PUSH
41803: LD_INT 19
41805: PUSH
41806: LD_INT 21
41808: PUSH
41809: LD_INT 24
41811: PUSH
41812: LD_INT 22
41814: PUSH
41815: LD_INT 25
41817: PUSH
41818: LD_INT 28
41820: PUSH
41821: LD_INT 29
41823: PUSH
41824: LD_INT 30
41826: PUSH
41827: LD_INT 31
41829: PUSH
41830: LD_INT 37
41832: PUSH
41833: LD_INT 38
41835: PUSH
41836: LD_INT 32
41838: PUSH
41839: LD_INT 27
41841: PUSH
41842: LD_INT 33
41844: PUSH
41845: LD_INT 69
41847: PUSH
41848: LD_INT 39
41850: PUSH
41851: LD_INT 34
41853: PUSH
41854: LD_INT 40
41856: PUSH
41857: LD_INT 71
41859: PUSH
41860: LD_INT 23
41862: PUSH
41863: LD_INT 44
41865: PUSH
41866: LD_INT 48
41868: PUSH
41869: LD_INT 49
41871: PUSH
41872: LD_INT 50
41874: PUSH
41875: LD_INT 51
41877: PUSH
41878: LD_INT 52
41880: PUSH
41881: LD_INT 53
41883: PUSH
41884: LD_INT 54
41886: PUSH
41887: LD_INT 55
41889: PUSH
41890: LD_INT 56
41892: PUSH
41893: LD_INT 57
41895: PUSH
41896: LD_INT 58
41898: PUSH
41899: LD_INT 59
41901: PUSH
41902: LD_INT 63
41904: PUSH
41905: LD_INT 64
41907: PUSH
41908: LD_INT 65
41910: PUSH
41911: LD_INT 82
41913: PUSH
41914: LD_INT 83
41916: PUSH
41917: LD_INT 84
41919: PUSH
41920: LD_INT 85
41922: PUSH
41923: LD_INT 86
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: ST_TO_ADDR
41981: GO 41984
41983: POP
// if state > - 1 and state < 3 then
41984: LD_VAR 0 3
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: GREATER
41993: PUSH
41994: LD_VAR 0 3
41998: PUSH
41999: LD_INT 3
42001: LESS
42002: AND
42003: IFFALSE 42060
// for i in result do
42005: LD_ADDR_VAR 0 5
42009: PUSH
42010: LD_VAR 0 4
42014: PUSH
42015: FOR_IN
42016: IFFALSE 42058
// if GetTech ( i , side ) <> state then
42018: LD_VAR 0 5
42022: PPUSH
42023: LD_VAR 0 1
42027: PPUSH
42028: CALL_OW 321
42032: PUSH
42033: LD_VAR 0 3
42037: NONEQUAL
42038: IFFALSE 42056
// result := result diff i ;
42040: LD_ADDR_VAR 0 4
42044: PUSH
42045: LD_VAR 0 4
42049: PUSH
42050: LD_VAR 0 5
42054: DIFF
42055: ST_TO_ADDR
42056: GO 42015
42058: POP
42059: POP
// end ;
42060: LD_VAR 0 4
42064: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42065: LD_INT 0
42067: PPUSH
42068: PPUSH
42069: PPUSH
// result := true ;
42070: LD_ADDR_VAR 0 3
42074: PUSH
42075: LD_INT 1
42077: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42078: LD_ADDR_VAR 0 5
42082: PUSH
42083: LD_VAR 0 2
42087: PPUSH
42088: CALL_OW 480
42092: ST_TO_ADDR
// if not tmp then
42093: LD_VAR 0 5
42097: NOT
42098: IFFALSE 42102
// exit ;
42100: GO 42151
// for i in tmp do
42102: LD_ADDR_VAR 0 4
42106: PUSH
42107: LD_VAR 0 5
42111: PUSH
42112: FOR_IN
42113: IFFALSE 42149
// if GetTech ( i , side ) <> state_researched then
42115: LD_VAR 0 4
42119: PPUSH
42120: LD_VAR 0 1
42124: PPUSH
42125: CALL_OW 321
42129: PUSH
42130: LD_INT 2
42132: NONEQUAL
42133: IFFALSE 42147
// begin result := false ;
42135: LD_ADDR_VAR 0 3
42139: PUSH
42140: LD_INT 0
42142: ST_TO_ADDR
// exit ;
42143: POP
42144: POP
42145: GO 42151
// end ;
42147: GO 42112
42149: POP
42150: POP
// end ;
42151: LD_VAR 0 3
42155: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42156: LD_INT 0
42158: PPUSH
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
42165: PPUSH
42166: PPUSH
42167: PPUSH
42168: PPUSH
42169: PPUSH
42170: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42171: LD_VAR 0 1
42175: NOT
42176: PUSH
42177: LD_VAR 0 1
42181: PPUSH
42182: CALL_OW 257
42186: PUSH
42187: LD_INT 9
42189: NONEQUAL
42190: OR
42191: IFFALSE 42195
// exit ;
42193: GO 42768
// side := GetSide ( unit ) ;
42195: LD_ADDR_VAR 0 9
42199: PUSH
42200: LD_VAR 0 1
42204: PPUSH
42205: CALL_OW 255
42209: ST_TO_ADDR
// tech_space := tech_spacanom ;
42210: LD_ADDR_VAR 0 12
42214: PUSH
42215: LD_INT 29
42217: ST_TO_ADDR
// tech_time := tech_taurad ;
42218: LD_ADDR_VAR 0 13
42222: PUSH
42223: LD_INT 28
42225: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42226: LD_ADDR_VAR 0 11
42230: PUSH
42231: LD_VAR 0 1
42235: PPUSH
42236: CALL_OW 310
42240: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42241: LD_VAR 0 11
42245: PPUSH
42246: CALL_OW 247
42250: PUSH
42251: LD_INT 2
42253: EQUAL
42254: IFFALSE 42258
// exit ;
42256: GO 42768
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42258: LD_ADDR_VAR 0 8
42262: PUSH
42263: LD_INT 81
42265: PUSH
42266: LD_VAR 0 9
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 3
42277: PUSH
42278: LD_INT 21
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PPUSH
42296: CALL_OW 69
42300: ST_TO_ADDR
// if not tmp then
42301: LD_VAR 0 8
42305: NOT
42306: IFFALSE 42310
// exit ;
42308: GO 42768
// if in_unit then
42310: LD_VAR 0 11
42314: IFFALSE 42338
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42316: LD_ADDR_VAR 0 10
42320: PUSH
42321: LD_VAR 0 8
42325: PPUSH
42326: LD_VAR 0 11
42330: PPUSH
42331: CALL_OW 74
42335: ST_TO_ADDR
42336: GO 42358
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42338: LD_ADDR_VAR 0 10
42342: PUSH
42343: LD_VAR 0 8
42347: PPUSH
42348: LD_VAR 0 1
42352: PPUSH
42353: CALL_OW 74
42357: ST_TO_ADDR
// if not enemy then
42358: LD_VAR 0 10
42362: NOT
42363: IFFALSE 42367
// exit ;
42365: GO 42768
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42367: LD_VAR 0 11
42371: PUSH
42372: LD_VAR 0 11
42376: PPUSH
42377: LD_VAR 0 10
42381: PPUSH
42382: CALL_OW 296
42386: PUSH
42387: LD_INT 13
42389: GREATER
42390: AND
42391: PUSH
42392: LD_VAR 0 1
42396: PPUSH
42397: LD_VAR 0 10
42401: PPUSH
42402: CALL_OW 296
42406: PUSH
42407: LD_INT 12
42409: GREATER
42410: OR
42411: IFFALSE 42415
// exit ;
42413: GO 42768
// missile := [ 1 ] ;
42415: LD_ADDR_VAR 0 14
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42426: LD_VAR 0 9
42430: PPUSH
42431: LD_VAR 0 12
42435: PPUSH
42436: CALL_OW 325
42440: IFFALSE 42469
// missile := Replace ( missile , missile + 1 , 2 ) ;
42442: LD_ADDR_VAR 0 14
42446: PUSH
42447: LD_VAR 0 14
42451: PPUSH
42452: LD_VAR 0 14
42456: PUSH
42457: LD_INT 1
42459: PLUS
42460: PPUSH
42461: LD_INT 2
42463: PPUSH
42464: CALL_OW 1
42468: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42469: LD_VAR 0 9
42473: PPUSH
42474: LD_VAR 0 13
42478: PPUSH
42479: CALL_OW 325
42483: PUSH
42484: LD_VAR 0 10
42488: PPUSH
42489: CALL_OW 255
42493: PPUSH
42494: LD_VAR 0 13
42498: PPUSH
42499: CALL_OW 325
42503: NOT
42504: AND
42505: IFFALSE 42534
// missile := Replace ( missile , missile + 1 , 3 ) ;
42507: LD_ADDR_VAR 0 14
42511: PUSH
42512: LD_VAR 0 14
42516: PPUSH
42517: LD_VAR 0 14
42521: PUSH
42522: LD_INT 1
42524: PLUS
42525: PPUSH
42526: LD_INT 3
42528: PPUSH
42529: CALL_OW 1
42533: ST_TO_ADDR
// if missile < 2 then
42534: LD_VAR 0 14
42538: PUSH
42539: LD_INT 2
42541: LESS
42542: IFFALSE 42546
// exit ;
42544: GO 42768
// x := GetX ( enemy ) ;
42546: LD_ADDR_VAR 0 4
42550: PUSH
42551: LD_VAR 0 10
42555: PPUSH
42556: CALL_OW 250
42560: ST_TO_ADDR
// y := GetY ( enemy ) ;
42561: LD_ADDR_VAR 0 5
42565: PUSH
42566: LD_VAR 0 10
42570: PPUSH
42571: CALL_OW 251
42575: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42576: LD_ADDR_VAR 0 6
42580: PUSH
42581: LD_VAR 0 4
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PPUSH
42590: LD_INT 1
42592: PPUSH
42593: CALL_OW 12
42597: PLUS
42598: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42599: LD_ADDR_VAR 0 7
42603: PUSH
42604: LD_VAR 0 5
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PPUSH
42613: LD_INT 1
42615: PPUSH
42616: CALL_OW 12
42620: PLUS
42621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42622: LD_VAR 0 6
42626: PPUSH
42627: LD_VAR 0 7
42631: PPUSH
42632: CALL_OW 488
42636: NOT
42637: IFFALSE 42659
// begin _x := x ;
42639: LD_ADDR_VAR 0 6
42643: PUSH
42644: LD_VAR 0 4
42648: ST_TO_ADDR
// _y := y ;
42649: LD_ADDR_VAR 0 7
42653: PUSH
42654: LD_VAR 0 5
42658: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42659: LD_ADDR_VAR 0 3
42663: PUSH
42664: LD_INT 1
42666: PPUSH
42667: LD_VAR 0 14
42671: PPUSH
42672: CALL_OW 12
42676: ST_TO_ADDR
// case i of 1 :
42677: LD_VAR 0 3
42681: PUSH
42682: LD_INT 1
42684: DOUBLE
42685: EQUAL
42686: IFTRUE 42690
42688: GO 42707
42690: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42691: LD_VAR 0 1
42695: PPUSH
42696: LD_VAR 0 10
42700: PPUSH
42701: CALL_OW 115
42705: GO 42768
42707: LD_INT 2
42709: DOUBLE
42710: EQUAL
42711: IFTRUE 42715
42713: GO 42737
42715: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42716: LD_VAR 0 1
42720: PPUSH
42721: LD_VAR 0 6
42725: PPUSH
42726: LD_VAR 0 7
42730: PPUSH
42731: CALL_OW 153
42735: GO 42768
42737: LD_INT 3
42739: DOUBLE
42740: EQUAL
42741: IFTRUE 42745
42743: GO 42767
42745: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42746: LD_VAR 0 1
42750: PPUSH
42751: LD_VAR 0 6
42755: PPUSH
42756: LD_VAR 0 7
42760: PPUSH
42761: CALL_OW 154
42765: GO 42768
42767: POP
// end ;
42768: LD_VAR 0 2
42772: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42773: LD_INT 0
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
// if not unit or not building then
42781: LD_VAR 0 1
42785: NOT
42786: PUSH
42787: LD_VAR 0 2
42791: NOT
42792: OR
42793: IFFALSE 42797
// exit ;
42795: GO 42955
// x := GetX ( building ) ;
42797: LD_ADDR_VAR 0 5
42801: PUSH
42802: LD_VAR 0 2
42806: PPUSH
42807: CALL_OW 250
42811: ST_TO_ADDR
// y := GetY ( building ) ;
42812: LD_ADDR_VAR 0 6
42816: PUSH
42817: LD_VAR 0 2
42821: PPUSH
42822: CALL_OW 251
42826: ST_TO_ADDR
// for i = 0 to 5 do
42827: LD_ADDR_VAR 0 4
42831: PUSH
42832: DOUBLE
42833: LD_INT 0
42835: DEC
42836: ST_TO_ADDR
42837: LD_INT 5
42839: PUSH
42840: FOR_TO
42841: IFFALSE 42953
// begin _x := ShiftX ( x , i , 3 ) ;
42843: LD_ADDR_VAR 0 7
42847: PUSH
42848: LD_VAR 0 5
42852: PPUSH
42853: LD_VAR 0 4
42857: PPUSH
42858: LD_INT 3
42860: PPUSH
42861: CALL_OW 272
42865: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42866: LD_ADDR_VAR 0 8
42870: PUSH
42871: LD_VAR 0 6
42875: PPUSH
42876: LD_VAR 0 4
42880: PPUSH
42881: LD_INT 3
42883: PPUSH
42884: CALL_OW 273
42888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42889: LD_VAR 0 7
42893: PPUSH
42894: LD_VAR 0 8
42898: PPUSH
42899: CALL_OW 488
42903: NOT
42904: IFFALSE 42908
// continue ;
42906: GO 42840
// if HexInfo ( _x , _y ) = 0 then
42908: LD_VAR 0 7
42912: PPUSH
42913: LD_VAR 0 8
42917: PPUSH
42918: CALL_OW 428
42922: PUSH
42923: LD_INT 0
42925: EQUAL
42926: IFFALSE 42951
// begin ComMoveXY ( unit , _x , _y ) ;
42928: LD_VAR 0 1
42932: PPUSH
42933: LD_VAR 0 7
42937: PPUSH
42938: LD_VAR 0 8
42942: PPUSH
42943: CALL_OW 111
// exit ;
42947: POP
42948: POP
42949: GO 42955
// end ; end ;
42951: GO 42840
42953: POP
42954: POP
// end ;
42955: LD_VAR 0 3
42959: RET
// export function ScanBase ( side , base_area ) ; begin
42960: LD_INT 0
42962: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42963: LD_ADDR_VAR 0 3
42967: PUSH
42968: LD_VAR 0 2
42972: PPUSH
42973: LD_INT 81
42975: PUSH
42976: LD_VAR 0 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PPUSH
42985: CALL_OW 70
42989: ST_TO_ADDR
// end ;
42990: LD_VAR 0 3
42994: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42995: LD_INT 0
42997: PPUSH
42998: PPUSH
42999: PPUSH
43000: PPUSH
// result := false ;
43001: LD_ADDR_VAR 0 2
43005: PUSH
43006: LD_INT 0
43008: ST_TO_ADDR
// side := GetSide ( unit ) ;
43009: LD_ADDR_VAR 0 3
43013: PUSH
43014: LD_VAR 0 1
43018: PPUSH
43019: CALL_OW 255
43023: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43024: LD_ADDR_VAR 0 4
43028: PUSH
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 248
43038: ST_TO_ADDR
// case nat of 1 :
43039: LD_VAR 0 4
43043: PUSH
43044: LD_INT 1
43046: DOUBLE
43047: EQUAL
43048: IFTRUE 43052
43050: GO 43063
43052: POP
// tech := tech_lassight ; 2 :
43053: LD_ADDR_VAR 0 5
43057: PUSH
43058: LD_INT 12
43060: ST_TO_ADDR
43061: GO 43102
43063: LD_INT 2
43065: DOUBLE
43066: EQUAL
43067: IFTRUE 43071
43069: GO 43082
43071: POP
// tech := tech_mortar ; 3 :
43072: LD_ADDR_VAR 0 5
43076: PUSH
43077: LD_INT 41
43079: ST_TO_ADDR
43080: GO 43102
43082: LD_INT 3
43084: DOUBLE
43085: EQUAL
43086: IFTRUE 43090
43088: GO 43101
43090: POP
// tech := tech_bazooka ; end ;
43091: LD_ADDR_VAR 0 5
43095: PUSH
43096: LD_INT 44
43098: ST_TO_ADDR
43099: GO 43102
43101: POP
// if Researched ( side , tech ) then
43102: LD_VAR 0 3
43106: PPUSH
43107: LD_VAR 0 5
43111: PPUSH
43112: CALL_OW 325
43116: IFFALSE 43143
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43118: LD_ADDR_VAR 0 2
43122: PUSH
43123: LD_INT 5
43125: PUSH
43126: LD_INT 8
43128: PUSH
43129: LD_INT 9
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: PUSH
43137: LD_VAR 0 4
43141: ARRAY
43142: ST_TO_ADDR
// end ;
43143: LD_VAR 0 2
43147: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43148: LD_INT 0
43150: PPUSH
43151: PPUSH
43152: PPUSH
// if not mines then
43153: LD_VAR 0 2
43157: NOT
43158: IFFALSE 43162
// exit ;
43160: GO 43306
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43162: LD_ADDR_VAR 0 5
43166: PUSH
43167: LD_INT 81
43169: PUSH
43170: LD_VAR 0 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: LD_INT 21
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PPUSH
43200: CALL_OW 69
43204: ST_TO_ADDR
// for i in mines do
43205: LD_ADDR_VAR 0 4
43209: PUSH
43210: LD_VAR 0 2
43214: PUSH
43215: FOR_IN
43216: IFFALSE 43304
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43218: LD_VAR 0 4
43222: PUSH
43223: LD_INT 1
43225: ARRAY
43226: PPUSH
43227: LD_VAR 0 4
43231: PUSH
43232: LD_INT 2
43234: ARRAY
43235: PPUSH
43236: CALL_OW 458
43240: NOT
43241: IFFALSE 43245
// continue ;
43243: GO 43215
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43245: LD_VAR 0 4
43249: PUSH
43250: LD_INT 1
43252: ARRAY
43253: PPUSH
43254: LD_VAR 0 4
43258: PUSH
43259: LD_INT 2
43261: ARRAY
43262: PPUSH
43263: CALL_OW 428
43267: PUSH
43268: LD_VAR 0 5
43272: IN
43273: IFFALSE 43302
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43275: LD_VAR 0 4
43279: PUSH
43280: LD_INT 1
43282: ARRAY
43283: PPUSH
43284: LD_VAR 0 4
43288: PUSH
43289: LD_INT 2
43291: ARRAY
43292: PPUSH
43293: LD_VAR 0 1
43297: PPUSH
43298: CALL_OW 456
// end ;
43302: GO 43215
43304: POP
43305: POP
// end ;
43306: LD_VAR 0 3
43310: RET
// export function Count ( array ) ; var i ; begin
43311: LD_INT 0
43313: PPUSH
43314: PPUSH
// result := 0 ;
43315: LD_ADDR_VAR 0 2
43319: PUSH
43320: LD_INT 0
43322: ST_TO_ADDR
// for i in array do
43323: LD_ADDR_VAR 0 3
43327: PUSH
43328: LD_VAR 0 1
43332: PUSH
43333: FOR_IN
43334: IFFALSE 43358
// if i then
43336: LD_VAR 0 3
43340: IFFALSE 43356
// result := result + 1 ;
43342: LD_ADDR_VAR 0 2
43346: PUSH
43347: LD_VAR 0 2
43351: PUSH
43352: LD_INT 1
43354: PLUS
43355: ST_TO_ADDR
43356: GO 43333
43358: POP
43359: POP
// end ;
43360: LD_VAR 0 2
43364: RET
// export function IsEmpty ( building ) ; begin
43365: LD_INT 0
43367: PPUSH
// if not building then
43368: LD_VAR 0 1
43372: NOT
43373: IFFALSE 43377
// exit ;
43375: GO 43420
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43377: LD_ADDR_VAR 0 2
43381: PUSH
43382: LD_VAR 0 1
43386: PUSH
43387: LD_INT 22
43389: PUSH
43390: LD_VAR 0 1
43394: PPUSH
43395: CALL_OW 255
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 58
43406: PUSH
43407: EMPTY
43408: LIST
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PPUSH
43414: CALL_OW 69
43418: IN
43419: ST_TO_ADDR
// end ;
43420: LD_VAR 0 2
43424: RET
// export function IsNotFull ( building ) ; var places ; begin
43425: LD_INT 0
43427: PPUSH
43428: PPUSH
// if not building then
43429: LD_VAR 0 1
43433: NOT
43434: IFFALSE 43438
// exit ;
43436: GO 43609
// result := false ;
43438: LD_ADDR_VAR 0 2
43442: PUSH
43443: LD_INT 0
43445: ST_TO_ADDR
// places := 0 ;
43446: LD_ADDR_VAR 0 3
43450: PUSH
43451: LD_INT 0
43453: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43454: LD_VAR 0 1
43458: PPUSH
43459: CALL_OW 266
43463: PUSH
43464: LD_INT 0
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43526
43470: LD_INT 1
43472: DOUBLE
43473: EQUAL
43474: IFTRUE 43526
43476: LD_INT 6
43478: DOUBLE
43479: EQUAL
43480: IFTRUE 43526
43482: LD_INT 7
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43526
43488: LD_INT 8
43490: DOUBLE
43491: EQUAL
43492: IFTRUE 43526
43494: LD_INT 4
43496: DOUBLE
43497: EQUAL
43498: IFTRUE 43526
43500: LD_INT 5
43502: DOUBLE
43503: EQUAL
43504: IFTRUE 43526
43506: LD_INT 2
43508: DOUBLE
43509: EQUAL
43510: IFTRUE 43526
43512: LD_INT 3
43514: DOUBLE
43515: EQUAL
43516: IFTRUE 43526
43518: LD_INT 35
43520: DOUBLE
43521: EQUAL
43522: IFTRUE 43526
43524: GO 43537
43526: POP
// places := 6 ; b_bunker , b_breastwork :
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_INT 6
43534: ST_TO_ADDR
43535: GO 43582
43537: LD_INT 32
43539: DOUBLE
43540: EQUAL
43541: IFTRUE 43551
43543: LD_INT 31
43545: DOUBLE
43546: EQUAL
43547: IFTRUE 43551
43549: GO 43562
43551: POP
// places := 1 ; b_control_tower :
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_INT 1
43559: ST_TO_ADDR
43560: GO 43582
43562: LD_INT 36
43564: DOUBLE
43565: EQUAL
43566: IFTRUE 43570
43568: GO 43581
43570: POP
// places := 3 ; end ;
43571: LD_ADDR_VAR 0 3
43575: PUSH
43576: LD_INT 3
43578: ST_TO_ADDR
43579: GO 43582
43581: POP
// if places then
43582: LD_VAR 0 3
43586: IFFALSE 43609
// result := UnitsInside ( building ) < places ;
43588: LD_ADDR_VAR 0 2
43592: PUSH
43593: LD_VAR 0 1
43597: PPUSH
43598: CALL_OW 313
43602: PUSH
43603: LD_VAR 0 3
43607: LESS
43608: ST_TO_ADDR
// end ;
43609: LD_VAR 0 2
43613: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43614: LD_INT 0
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
// tmp := [ ] ;
43620: LD_ADDR_VAR 0 3
43624: PUSH
43625: EMPTY
43626: ST_TO_ADDR
// list := [ ] ;
43627: LD_ADDR_VAR 0 5
43631: PUSH
43632: EMPTY
43633: ST_TO_ADDR
// for i = 16 to 25 do
43634: LD_ADDR_VAR 0 4
43638: PUSH
43639: DOUBLE
43640: LD_INT 16
43642: DEC
43643: ST_TO_ADDR
43644: LD_INT 25
43646: PUSH
43647: FOR_TO
43648: IFFALSE 43721
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43650: LD_ADDR_VAR 0 3
43654: PUSH
43655: LD_VAR 0 3
43659: PUSH
43660: LD_INT 22
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 255
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 91
43679: PUSH
43680: LD_VAR 0 1
43684: PUSH
43685: LD_INT 6
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 30
43695: PUSH
43696: LD_VAR 0 4
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: PPUSH
43713: CALL_OW 69
43717: ADD
43718: ST_TO_ADDR
43719: GO 43647
43721: POP
43722: POP
// for i = 1 to tmp do
43723: LD_ADDR_VAR 0 4
43727: PUSH
43728: DOUBLE
43729: LD_INT 1
43731: DEC
43732: ST_TO_ADDR
43733: LD_VAR 0 3
43737: PUSH
43738: FOR_TO
43739: IFFALSE 43827
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43741: LD_ADDR_VAR 0 5
43745: PUSH
43746: LD_VAR 0 5
43750: PUSH
43751: LD_VAR 0 3
43755: PUSH
43756: LD_VAR 0 4
43760: ARRAY
43761: PPUSH
43762: CALL_OW 266
43766: PUSH
43767: LD_VAR 0 3
43771: PUSH
43772: LD_VAR 0 4
43776: ARRAY
43777: PPUSH
43778: CALL_OW 250
43782: PUSH
43783: LD_VAR 0 3
43787: PUSH
43788: LD_VAR 0 4
43792: ARRAY
43793: PPUSH
43794: CALL_OW 251
43798: PUSH
43799: LD_VAR 0 3
43803: PUSH
43804: LD_VAR 0 4
43808: ARRAY
43809: PPUSH
43810: CALL_OW 254
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: PUSH
43821: EMPTY
43822: LIST
43823: ADD
43824: ST_TO_ADDR
43825: GO 43738
43827: POP
43828: POP
// result := list ;
43829: LD_ADDR_VAR 0 2
43833: PUSH
43834: LD_VAR 0 5
43838: ST_TO_ADDR
// end ;
43839: LD_VAR 0 2
43843: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43844: LD_INT 0
43846: PPUSH
43847: PPUSH
43848: PPUSH
43849: PPUSH
43850: PPUSH
43851: PPUSH
43852: PPUSH
// if not factory then
43853: LD_VAR 0 1
43857: NOT
43858: IFFALSE 43862
// exit ;
43860: GO 44455
// if control = control_apeman then
43862: LD_VAR 0 4
43866: PUSH
43867: LD_INT 5
43869: EQUAL
43870: IFFALSE 43979
// begin tmp := UnitsInside ( factory ) ;
43872: LD_ADDR_VAR 0 8
43876: PUSH
43877: LD_VAR 0 1
43881: PPUSH
43882: CALL_OW 313
43886: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43887: LD_VAR 0 8
43891: PPUSH
43892: LD_INT 25
43894: PUSH
43895: LD_INT 12
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PPUSH
43902: CALL_OW 72
43906: NOT
43907: IFFALSE 43917
// control := control_manual ;
43909: LD_ADDR_VAR 0 4
43913: PUSH
43914: LD_INT 1
43916: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43917: LD_ADDR_VAR 0 8
43921: PUSH
43922: LD_VAR 0 1
43926: PPUSH
43927: CALL 43614 0 1
43931: ST_TO_ADDR
// if tmp then
43932: LD_VAR 0 8
43936: IFFALSE 43979
// begin for i in tmp do
43938: LD_ADDR_VAR 0 7
43942: PUSH
43943: LD_VAR 0 8
43947: PUSH
43948: FOR_IN
43949: IFFALSE 43977
// if i [ 1 ] = b_ext_radio then
43951: LD_VAR 0 7
43955: PUSH
43956: LD_INT 1
43958: ARRAY
43959: PUSH
43960: LD_INT 22
43962: EQUAL
43963: IFFALSE 43975
// begin control := control_remote ;
43965: LD_ADDR_VAR 0 4
43969: PUSH
43970: LD_INT 2
43972: ST_TO_ADDR
// break ;
43973: GO 43977
// end ;
43975: GO 43948
43977: POP
43978: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43979: LD_VAR 0 1
43983: PPUSH
43984: LD_VAR 0 2
43988: PPUSH
43989: LD_VAR 0 3
43993: PPUSH
43994: LD_VAR 0 4
43998: PPUSH
43999: LD_VAR 0 5
44003: PPUSH
44004: CALL_OW 448
44008: IFFALSE 44043
// begin result := [ chassis , engine , control , weapon ] ;
44010: LD_ADDR_VAR 0 6
44014: PUSH
44015: LD_VAR 0 2
44019: PUSH
44020: LD_VAR 0 3
44024: PUSH
44025: LD_VAR 0 4
44029: PUSH
44030: LD_VAR 0 5
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// exit ;
44041: GO 44455
// end ; _chassis := AvailableChassisList ( factory ) ;
44043: LD_ADDR_VAR 0 9
44047: PUSH
44048: LD_VAR 0 1
44052: PPUSH
44053: CALL_OW 475
44057: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44058: LD_ADDR_VAR 0 11
44062: PUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 476
44072: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44073: LD_ADDR_VAR 0 12
44077: PUSH
44078: LD_VAR 0 1
44082: PPUSH
44083: CALL_OW 477
44087: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44088: LD_ADDR_VAR 0 10
44092: PUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 478
44102: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44103: LD_VAR 0 9
44107: NOT
44108: PUSH
44109: LD_VAR 0 11
44113: NOT
44114: OR
44115: PUSH
44116: LD_VAR 0 12
44120: NOT
44121: OR
44122: PUSH
44123: LD_VAR 0 10
44127: NOT
44128: OR
44129: IFFALSE 44164
// begin result := [ chassis , engine , control , weapon ] ;
44131: LD_ADDR_VAR 0 6
44135: PUSH
44136: LD_VAR 0 2
44140: PUSH
44141: LD_VAR 0 3
44145: PUSH
44146: LD_VAR 0 4
44150: PUSH
44151: LD_VAR 0 5
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: ST_TO_ADDR
// exit ;
44162: GO 44455
// end ; if not chassis in _chassis then
44164: LD_VAR 0 2
44168: PUSH
44169: LD_VAR 0 9
44173: IN
44174: NOT
44175: IFFALSE 44201
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44177: LD_ADDR_VAR 0 2
44181: PUSH
44182: LD_VAR 0 9
44186: PUSH
44187: LD_INT 1
44189: PPUSH
44190: LD_VAR 0 9
44194: PPUSH
44195: CALL_OW 12
44199: ARRAY
44200: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44201: LD_VAR 0 2
44205: PPUSH
44206: LD_VAR 0 3
44210: PPUSH
44211: CALL 44460 0 2
44215: NOT
44216: IFFALSE 44275
// repeat engine := _engine [ 1 ] ;
44218: LD_ADDR_VAR 0 3
44222: PUSH
44223: LD_VAR 0 11
44227: PUSH
44228: LD_INT 1
44230: ARRAY
44231: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44232: LD_ADDR_VAR 0 11
44236: PUSH
44237: LD_VAR 0 11
44241: PPUSH
44242: LD_INT 1
44244: PPUSH
44245: CALL_OW 3
44249: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44250: LD_VAR 0 2
44254: PPUSH
44255: LD_VAR 0 3
44259: PPUSH
44260: CALL 44460 0 2
44264: PUSH
44265: LD_VAR 0 11
44269: PUSH
44270: EMPTY
44271: EQUAL
44272: OR
44273: IFFALSE 44218
// if not control in _control then
44275: LD_VAR 0 4
44279: PUSH
44280: LD_VAR 0 12
44284: IN
44285: NOT
44286: IFFALSE 44312
// control := _control [ rand ( 1 , _control ) ] ;
44288: LD_ADDR_VAR 0 4
44292: PUSH
44293: LD_VAR 0 12
44297: PUSH
44298: LD_INT 1
44300: PPUSH
44301: LD_VAR 0 12
44305: PPUSH
44306: CALL_OW 12
44310: ARRAY
44311: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44312: LD_VAR 0 2
44316: PPUSH
44317: LD_VAR 0 5
44321: PPUSH
44322: CALL 44680 0 2
44326: NOT
44327: IFFALSE 44386
// repeat weapon := _weapon [ 1 ] ;
44329: LD_ADDR_VAR 0 5
44333: PUSH
44334: LD_VAR 0 10
44338: PUSH
44339: LD_INT 1
44341: ARRAY
44342: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44343: LD_ADDR_VAR 0 10
44347: PUSH
44348: LD_VAR 0 10
44352: PPUSH
44353: LD_INT 1
44355: PPUSH
44356: CALL_OW 3
44360: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44361: LD_VAR 0 2
44365: PPUSH
44366: LD_VAR 0 5
44370: PPUSH
44371: CALL 44680 0 2
44375: PUSH
44376: LD_VAR 0 10
44380: PUSH
44381: EMPTY
44382: EQUAL
44383: OR
44384: IFFALSE 44329
// result := [ ] ;
44386: LD_ADDR_VAR 0 6
44390: PUSH
44391: EMPTY
44392: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44393: LD_VAR 0 1
44397: PPUSH
44398: LD_VAR 0 2
44402: PPUSH
44403: LD_VAR 0 3
44407: PPUSH
44408: LD_VAR 0 4
44412: PPUSH
44413: LD_VAR 0 5
44417: PPUSH
44418: CALL_OW 448
44422: IFFALSE 44455
// result := [ chassis , engine , control , weapon ] ;
44424: LD_ADDR_VAR 0 6
44428: PUSH
44429: LD_VAR 0 2
44433: PUSH
44434: LD_VAR 0 3
44438: PUSH
44439: LD_VAR 0 4
44443: PUSH
44444: LD_VAR 0 5
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: ST_TO_ADDR
// end ;
44455: LD_VAR 0 6
44459: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44460: LD_INT 0
44462: PPUSH
// if not chassis or not engine then
44463: LD_VAR 0 1
44467: NOT
44468: PUSH
44469: LD_VAR 0 2
44473: NOT
44474: OR
44475: IFFALSE 44479
// exit ;
44477: GO 44675
// case engine of engine_solar :
44479: LD_VAR 0 2
44483: PUSH
44484: LD_INT 2
44486: DOUBLE
44487: EQUAL
44488: IFTRUE 44492
44490: GO 44530
44492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44493: LD_ADDR_VAR 0 3
44497: PUSH
44498: LD_INT 11
44500: PUSH
44501: LD_INT 12
44503: PUSH
44504: LD_INT 13
44506: PUSH
44507: LD_INT 14
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
44528: GO 44659
44530: LD_INT 1
44532: DOUBLE
44533: EQUAL
44534: IFTRUE 44538
44536: GO 44600
44538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44539: LD_ADDR_VAR 0 3
44543: PUSH
44544: LD_INT 11
44546: PUSH
44547: LD_INT 12
44549: PUSH
44550: LD_INT 13
44552: PUSH
44553: LD_INT 14
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: LD_INT 3
44564: PUSH
44565: LD_INT 4
44567: PUSH
44568: LD_INT 5
44570: PUSH
44571: LD_INT 21
44573: PUSH
44574: LD_INT 23
44576: PUSH
44577: LD_INT 22
44579: PUSH
44580: LD_INT 24
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: ST_TO_ADDR
44598: GO 44659
44600: LD_INT 3
44602: DOUBLE
44603: EQUAL
44604: IFTRUE 44608
44606: GO 44658
44608: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44609: LD_ADDR_VAR 0 3
44613: PUSH
44614: LD_INT 13
44616: PUSH
44617: LD_INT 14
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: LD_INT 4
44628: PUSH
44629: LD_INT 5
44631: PUSH
44632: LD_INT 21
44634: PUSH
44635: LD_INT 22
44637: PUSH
44638: LD_INT 23
44640: PUSH
44641: LD_INT 24
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: ST_TO_ADDR
44656: GO 44659
44658: POP
// result := ( chassis in result ) ;
44659: LD_ADDR_VAR 0 3
44663: PUSH
44664: LD_VAR 0 1
44668: PUSH
44669: LD_VAR 0 3
44673: IN
44674: ST_TO_ADDR
// end ;
44675: LD_VAR 0 3
44679: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44680: LD_INT 0
44682: PPUSH
// if not chassis or not weapon then
44683: LD_VAR 0 1
44687: NOT
44688: PUSH
44689: LD_VAR 0 2
44693: NOT
44694: OR
44695: IFFALSE 44699
// exit ;
44697: GO 45759
// case weapon of us_machine_gun :
44699: LD_VAR 0 2
44703: PUSH
44704: LD_INT 2
44706: DOUBLE
44707: EQUAL
44708: IFTRUE 44712
44710: GO 44742
44712: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44713: LD_ADDR_VAR 0 3
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 4
44729: PUSH
44730: LD_INT 5
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: ST_TO_ADDR
44740: GO 45743
44742: LD_INT 3
44744: DOUBLE
44745: EQUAL
44746: IFTRUE 44750
44748: GO 44780
44750: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44751: LD_ADDR_VAR 0 3
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: LD_INT 4
44767: PUSH
44768: LD_INT 5
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
44778: GO 45743
44780: LD_INT 11
44782: DOUBLE
44783: EQUAL
44784: IFTRUE 44788
44786: GO 44818
44788: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44789: LD_ADDR_VAR 0 3
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 4
44805: PUSH
44806: LD_INT 5
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
44816: GO 45743
44818: LD_INT 4
44820: DOUBLE
44821: EQUAL
44822: IFTRUE 44826
44824: GO 44852
44826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44827: LD_ADDR_VAR 0 3
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: LD_INT 4
44840: PUSH
44841: LD_INT 5
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
44850: GO 45743
44852: LD_INT 5
44854: DOUBLE
44855: EQUAL
44856: IFTRUE 44860
44858: GO 44886
44860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44861: LD_ADDR_VAR 0 3
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 3
44871: PUSH
44872: LD_INT 4
44874: PUSH
44875: LD_INT 5
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
44884: GO 45743
44886: LD_INT 9
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44894
44892: GO 44920
44894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44895: LD_ADDR_VAR 0 3
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: LD_INT 4
44908: PUSH
44909: LD_INT 5
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
44918: GO 45743
44920: LD_INT 7
44922: DOUBLE
44923: EQUAL
44924: IFTRUE 44928
44926: GO 44954
44928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44929: LD_ADDR_VAR 0 3
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: LD_INT 4
44942: PUSH
44943: LD_INT 5
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
44952: GO 45743
44954: LD_INT 12
44956: DOUBLE
44957: EQUAL
44958: IFTRUE 44962
44960: GO 44988
44962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44963: LD_ADDR_VAR 0 3
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: LD_INT 4
44976: PUSH
44977: LD_INT 5
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
44986: GO 45743
44988: LD_INT 13
44990: DOUBLE
44991: EQUAL
44992: IFTRUE 44996
44994: GO 45022
44996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44997: LD_ADDR_VAR 0 3
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: LD_INT 4
45010: PUSH
45011: LD_INT 5
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: ST_TO_ADDR
45020: GO 45743
45022: LD_INT 14
45024: DOUBLE
45025: EQUAL
45026: IFTRUE 45030
45028: GO 45048
45030: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45031: LD_ADDR_VAR 0 3
45035: PUSH
45036: LD_INT 4
45038: PUSH
45039: LD_INT 5
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: ST_TO_ADDR
45046: GO 45743
45048: LD_INT 6
45050: DOUBLE
45051: EQUAL
45052: IFTRUE 45056
45054: GO 45074
45056: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45057: LD_ADDR_VAR 0 3
45061: PUSH
45062: LD_INT 4
45064: PUSH
45065: LD_INT 5
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: ST_TO_ADDR
45072: GO 45743
45074: LD_INT 10
45076: DOUBLE
45077: EQUAL
45078: IFTRUE 45082
45080: GO 45100
45082: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45083: LD_ADDR_VAR 0 3
45087: PUSH
45088: LD_INT 4
45090: PUSH
45091: LD_INT 5
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: ST_TO_ADDR
45098: GO 45743
45100: LD_INT 22
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45108
45106: GO 45134
45108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45109: LD_ADDR_VAR 0 3
45113: PUSH
45114: LD_INT 11
45116: PUSH
45117: LD_INT 12
45119: PUSH
45120: LD_INT 13
45122: PUSH
45123: LD_INT 14
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
45132: GO 45743
45134: LD_INT 23
45136: DOUBLE
45137: EQUAL
45138: IFTRUE 45142
45140: GO 45168
45142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45143: LD_ADDR_VAR 0 3
45147: PUSH
45148: LD_INT 11
45150: PUSH
45151: LD_INT 12
45153: PUSH
45154: LD_INT 13
45156: PUSH
45157: LD_INT 14
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
45166: GO 45743
45168: LD_INT 24
45170: DOUBLE
45171: EQUAL
45172: IFTRUE 45176
45174: GO 45202
45176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45177: LD_ADDR_VAR 0 3
45181: PUSH
45182: LD_INT 11
45184: PUSH
45185: LD_INT 12
45187: PUSH
45188: LD_INT 13
45190: PUSH
45191: LD_INT 14
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
45200: GO 45743
45202: LD_INT 30
45204: DOUBLE
45205: EQUAL
45206: IFTRUE 45210
45208: GO 45236
45210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45211: LD_ADDR_VAR 0 3
45215: PUSH
45216: LD_INT 11
45218: PUSH
45219: LD_INT 12
45221: PUSH
45222: LD_INT 13
45224: PUSH
45225: LD_INT 14
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
45234: GO 45743
45236: LD_INT 25
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45244
45242: GO 45262
45244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45245: LD_ADDR_VAR 0 3
45249: PUSH
45250: LD_INT 13
45252: PUSH
45253: LD_INT 14
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: ST_TO_ADDR
45260: GO 45743
45262: LD_INT 27
45264: DOUBLE
45265: EQUAL
45266: IFTRUE 45270
45268: GO 45288
45270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45271: LD_ADDR_VAR 0 3
45275: PUSH
45276: LD_INT 13
45278: PUSH
45279: LD_INT 14
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: ST_TO_ADDR
45286: GO 45743
45288: LD_INT 92
45290: DOUBLE
45291: EQUAL
45292: IFTRUE 45296
45294: GO 45322
45296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45297: LD_ADDR_VAR 0 3
45301: PUSH
45302: LD_INT 11
45304: PUSH
45305: LD_INT 12
45307: PUSH
45308: LD_INT 13
45310: PUSH
45311: LD_INT 14
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
45320: GO 45743
45322: LD_INT 28
45324: DOUBLE
45325: EQUAL
45326: IFTRUE 45330
45328: GO 45348
45330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45331: LD_ADDR_VAR 0 3
45335: PUSH
45336: LD_INT 13
45338: PUSH
45339: LD_INT 14
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: ST_TO_ADDR
45346: GO 45743
45348: LD_INT 29
45350: DOUBLE
45351: EQUAL
45352: IFTRUE 45356
45354: GO 45374
45356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45357: LD_ADDR_VAR 0 3
45361: PUSH
45362: LD_INT 13
45364: PUSH
45365: LD_INT 14
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: ST_TO_ADDR
45372: GO 45743
45374: LD_INT 31
45376: DOUBLE
45377: EQUAL
45378: IFTRUE 45382
45380: GO 45400
45382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45383: LD_ADDR_VAR 0 3
45387: PUSH
45388: LD_INT 13
45390: PUSH
45391: LD_INT 14
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: ST_TO_ADDR
45398: GO 45743
45400: LD_INT 26
45402: DOUBLE
45403: EQUAL
45404: IFTRUE 45408
45406: GO 45426
45408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45409: LD_ADDR_VAR 0 3
45413: PUSH
45414: LD_INT 13
45416: PUSH
45417: LD_INT 14
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: ST_TO_ADDR
45424: GO 45743
45426: LD_INT 42
45428: DOUBLE
45429: EQUAL
45430: IFTRUE 45434
45432: GO 45460
45434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45435: LD_ADDR_VAR 0 3
45439: PUSH
45440: LD_INT 21
45442: PUSH
45443: LD_INT 22
45445: PUSH
45446: LD_INT 23
45448: PUSH
45449: LD_INT 24
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: ST_TO_ADDR
45458: GO 45743
45460: LD_INT 43
45462: DOUBLE
45463: EQUAL
45464: IFTRUE 45468
45466: GO 45494
45468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45469: LD_ADDR_VAR 0 3
45473: PUSH
45474: LD_INT 21
45476: PUSH
45477: LD_INT 22
45479: PUSH
45480: LD_INT 23
45482: PUSH
45483: LD_INT 24
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: ST_TO_ADDR
45492: GO 45743
45494: LD_INT 44
45496: DOUBLE
45497: EQUAL
45498: IFTRUE 45502
45500: GO 45528
45502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45503: LD_ADDR_VAR 0 3
45507: PUSH
45508: LD_INT 21
45510: PUSH
45511: LD_INT 22
45513: PUSH
45514: LD_INT 23
45516: PUSH
45517: LD_INT 24
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: ST_TO_ADDR
45526: GO 45743
45528: LD_INT 45
45530: DOUBLE
45531: EQUAL
45532: IFTRUE 45536
45534: GO 45562
45536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45537: LD_ADDR_VAR 0 3
45541: PUSH
45542: LD_INT 21
45544: PUSH
45545: LD_INT 22
45547: PUSH
45548: LD_INT 23
45550: PUSH
45551: LD_INT 24
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: ST_TO_ADDR
45560: GO 45743
45562: LD_INT 49
45564: DOUBLE
45565: EQUAL
45566: IFTRUE 45570
45568: GO 45596
45570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45571: LD_ADDR_VAR 0 3
45575: PUSH
45576: LD_INT 21
45578: PUSH
45579: LD_INT 22
45581: PUSH
45582: LD_INT 23
45584: PUSH
45585: LD_INT 24
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
45594: GO 45743
45596: LD_INT 51
45598: DOUBLE
45599: EQUAL
45600: IFTRUE 45604
45602: GO 45630
45604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45605: LD_ADDR_VAR 0 3
45609: PUSH
45610: LD_INT 21
45612: PUSH
45613: LD_INT 22
45615: PUSH
45616: LD_INT 23
45618: PUSH
45619: LD_INT 24
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
45628: GO 45743
45630: LD_INT 52
45632: DOUBLE
45633: EQUAL
45634: IFTRUE 45638
45636: GO 45664
45638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45639: LD_ADDR_VAR 0 3
45643: PUSH
45644: LD_INT 21
45646: PUSH
45647: LD_INT 22
45649: PUSH
45650: LD_INT 23
45652: PUSH
45653: LD_INT 24
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: ST_TO_ADDR
45662: GO 45743
45664: LD_INT 53
45666: DOUBLE
45667: EQUAL
45668: IFTRUE 45672
45670: GO 45690
45672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45673: LD_ADDR_VAR 0 3
45677: PUSH
45678: LD_INT 23
45680: PUSH
45681: LD_INT 24
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: ST_TO_ADDR
45688: GO 45743
45690: LD_INT 46
45692: DOUBLE
45693: EQUAL
45694: IFTRUE 45698
45696: GO 45716
45698: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45699: LD_ADDR_VAR 0 3
45703: PUSH
45704: LD_INT 23
45706: PUSH
45707: LD_INT 24
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: ST_TO_ADDR
45714: GO 45743
45716: LD_INT 47
45718: DOUBLE
45719: EQUAL
45720: IFTRUE 45724
45722: GO 45742
45724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45725: LD_ADDR_VAR 0 3
45729: PUSH
45730: LD_INT 23
45732: PUSH
45733: LD_INT 24
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: ST_TO_ADDR
45740: GO 45743
45742: POP
// result := ( chassis in result ) ;
45743: LD_ADDR_VAR 0 3
45747: PUSH
45748: LD_VAR 0 1
45752: PUSH
45753: LD_VAR 0 3
45757: IN
45758: ST_TO_ADDR
// end ;
45759: LD_VAR 0 3
45763: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45764: LD_INT 0
45766: PPUSH
45767: PPUSH
45768: PPUSH
45769: PPUSH
45770: PPUSH
45771: PPUSH
45772: PPUSH
// result := array ;
45773: LD_ADDR_VAR 0 5
45777: PUSH
45778: LD_VAR 0 1
45782: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45783: LD_VAR 0 1
45787: NOT
45788: PUSH
45789: LD_VAR 0 2
45793: NOT
45794: OR
45795: PUSH
45796: LD_VAR 0 3
45800: NOT
45801: OR
45802: PUSH
45803: LD_VAR 0 2
45807: PUSH
45808: LD_VAR 0 1
45812: GREATER
45813: OR
45814: PUSH
45815: LD_VAR 0 3
45819: PUSH
45820: LD_VAR 0 1
45824: GREATER
45825: OR
45826: IFFALSE 45830
// exit ;
45828: GO 46126
// if direction then
45830: LD_VAR 0 4
45834: IFFALSE 45898
// begin d := 1 ;
45836: LD_ADDR_VAR 0 9
45840: PUSH
45841: LD_INT 1
45843: ST_TO_ADDR
// if i_from > i_to then
45844: LD_VAR 0 2
45848: PUSH
45849: LD_VAR 0 3
45853: GREATER
45854: IFFALSE 45880
// length := ( array - i_from ) + i_to else
45856: LD_ADDR_VAR 0 11
45860: PUSH
45861: LD_VAR 0 1
45865: PUSH
45866: LD_VAR 0 2
45870: MINUS
45871: PUSH
45872: LD_VAR 0 3
45876: PLUS
45877: ST_TO_ADDR
45878: GO 45896
// length := i_to - i_from ;
45880: LD_ADDR_VAR 0 11
45884: PUSH
45885: LD_VAR 0 3
45889: PUSH
45890: LD_VAR 0 2
45894: MINUS
45895: ST_TO_ADDR
// end else
45896: GO 45959
// begin d := - 1 ;
45898: LD_ADDR_VAR 0 9
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: ST_TO_ADDR
// if i_from > i_to then
45907: LD_VAR 0 2
45911: PUSH
45912: LD_VAR 0 3
45916: GREATER
45917: IFFALSE 45937
// length := i_from - i_to else
45919: LD_ADDR_VAR 0 11
45923: PUSH
45924: LD_VAR 0 2
45928: PUSH
45929: LD_VAR 0 3
45933: MINUS
45934: ST_TO_ADDR
45935: GO 45959
// length := ( array - i_to ) + i_from ;
45937: LD_ADDR_VAR 0 11
45941: PUSH
45942: LD_VAR 0 1
45946: PUSH
45947: LD_VAR 0 3
45951: MINUS
45952: PUSH
45953: LD_VAR 0 2
45957: PLUS
45958: ST_TO_ADDR
// end ; if not length then
45959: LD_VAR 0 11
45963: NOT
45964: IFFALSE 45968
// exit ;
45966: GO 46126
// tmp := array ;
45968: LD_ADDR_VAR 0 10
45972: PUSH
45973: LD_VAR 0 1
45977: ST_TO_ADDR
// for i = 1 to length do
45978: LD_ADDR_VAR 0 6
45982: PUSH
45983: DOUBLE
45984: LD_INT 1
45986: DEC
45987: ST_TO_ADDR
45988: LD_VAR 0 11
45992: PUSH
45993: FOR_TO
45994: IFFALSE 46114
// begin for j = 1 to array do
45996: LD_ADDR_VAR 0 7
46000: PUSH
46001: DOUBLE
46002: LD_INT 1
46004: DEC
46005: ST_TO_ADDR
46006: LD_VAR 0 1
46010: PUSH
46011: FOR_TO
46012: IFFALSE 46100
// begin k := j + d ;
46014: LD_ADDR_VAR 0 8
46018: PUSH
46019: LD_VAR 0 7
46023: PUSH
46024: LD_VAR 0 9
46028: PLUS
46029: ST_TO_ADDR
// if k > array then
46030: LD_VAR 0 8
46034: PUSH
46035: LD_VAR 0 1
46039: GREATER
46040: IFFALSE 46050
// k := 1 ;
46042: LD_ADDR_VAR 0 8
46046: PUSH
46047: LD_INT 1
46049: ST_TO_ADDR
// if not k then
46050: LD_VAR 0 8
46054: NOT
46055: IFFALSE 46067
// k := array ;
46057: LD_ADDR_VAR 0 8
46061: PUSH
46062: LD_VAR 0 1
46066: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46067: LD_ADDR_VAR 0 10
46071: PUSH
46072: LD_VAR 0 10
46076: PPUSH
46077: LD_VAR 0 8
46081: PPUSH
46082: LD_VAR 0 1
46086: PUSH
46087: LD_VAR 0 7
46091: ARRAY
46092: PPUSH
46093: CALL_OW 1
46097: ST_TO_ADDR
// end ;
46098: GO 46011
46100: POP
46101: POP
// array := tmp ;
46102: LD_ADDR_VAR 0 1
46106: PUSH
46107: LD_VAR 0 10
46111: ST_TO_ADDR
// end ;
46112: GO 45993
46114: POP
46115: POP
// result := array ;
46116: LD_ADDR_VAR 0 5
46120: PUSH
46121: LD_VAR 0 1
46125: ST_TO_ADDR
// end ;
46126: LD_VAR 0 5
46130: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46131: LD_INT 0
46133: PPUSH
46134: PPUSH
// result := 0 ;
46135: LD_ADDR_VAR 0 3
46139: PUSH
46140: LD_INT 0
46142: ST_TO_ADDR
// if not array or not value in array then
46143: LD_VAR 0 1
46147: NOT
46148: PUSH
46149: LD_VAR 0 2
46153: PUSH
46154: LD_VAR 0 1
46158: IN
46159: NOT
46160: OR
46161: IFFALSE 46165
// exit ;
46163: GO 46219
// for i = 1 to array do
46165: LD_ADDR_VAR 0 4
46169: PUSH
46170: DOUBLE
46171: LD_INT 1
46173: DEC
46174: ST_TO_ADDR
46175: LD_VAR 0 1
46179: PUSH
46180: FOR_TO
46181: IFFALSE 46217
// if value = array [ i ] then
46183: LD_VAR 0 2
46187: PUSH
46188: LD_VAR 0 1
46192: PUSH
46193: LD_VAR 0 4
46197: ARRAY
46198: EQUAL
46199: IFFALSE 46215
// begin result := i ;
46201: LD_ADDR_VAR 0 3
46205: PUSH
46206: LD_VAR 0 4
46210: ST_TO_ADDR
// exit ;
46211: POP
46212: POP
46213: GO 46219
// end ;
46215: GO 46180
46217: POP
46218: POP
// end ;
46219: LD_VAR 0 3
46223: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46224: LD_INT 0
46226: PPUSH
// vc_chassis := chassis ;
46227: LD_ADDR_OWVAR 37
46231: PUSH
46232: LD_VAR 0 1
46236: ST_TO_ADDR
// vc_engine := engine ;
46237: LD_ADDR_OWVAR 39
46241: PUSH
46242: LD_VAR 0 2
46246: ST_TO_ADDR
// vc_control := control ;
46247: LD_ADDR_OWVAR 38
46251: PUSH
46252: LD_VAR 0 3
46256: ST_TO_ADDR
// vc_weapon := weapon ;
46257: LD_ADDR_OWVAR 40
46261: PUSH
46262: LD_VAR 0 4
46266: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46267: LD_ADDR_OWVAR 41
46271: PUSH
46272: LD_VAR 0 5
46276: ST_TO_ADDR
// end ;
46277: LD_VAR 0 6
46281: RET
// export function WantPlant ( unit ) ; var task ; begin
46282: LD_INT 0
46284: PPUSH
46285: PPUSH
// result := false ;
46286: LD_ADDR_VAR 0 2
46290: PUSH
46291: LD_INT 0
46293: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46294: LD_ADDR_VAR 0 3
46298: PUSH
46299: LD_VAR 0 1
46303: PPUSH
46304: CALL_OW 437
46308: ST_TO_ADDR
// if task then
46309: LD_VAR 0 3
46313: IFFALSE 46341
// if task [ 1 ] [ 1 ] = p then
46315: LD_VAR 0 3
46319: PUSH
46320: LD_INT 1
46322: ARRAY
46323: PUSH
46324: LD_INT 1
46326: ARRAY
46327: PUSH
46328: LD_STRING p
46330: EQUAL
46331: IFFALSE 46341
// result := true ;
46333: LD_ADDR_VAR 0 2
46337: PUSH
46338: LD_INT 1
46340: ST_TO_ADDR
// end ;
46341: LD_VAR 0 2
46345: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46346: LD_INT 0
46348: PPUSH
46349: PPUSH
46350: PPUSH
46351: PPUSH
// if pos < 1 then
46352: LD_VAR 0 2
46356: PUSH
46357: LD_INT 1
46359: LESS
46360: IFFALSE 46364
// exit ;
46362: GO 46667
// if pos = 1 then
46364: LD_VAR 0 2
46368: PUSH
46369: LD_INT 1
46371: EQUAL
46372: IFFALSE 46405
// result := Replace ( arr , pos [ 1 ] , value ) else
46374: LD_ADDR_VAR 0 4
46378: PUSH
46379: LD_VAR 0 1
46383: PPUSH
46384: LD_VAR 0 2
46388: PUSH
46389: LD_INT 1
46391: ARRAY
46392: PPUSH
46393: LD_VAR 0 3
46397: PPUSH
46398: CALL_OW 1
46402: ST_TO_ADDR
46403: GO 46667
// begin tmp := arr ;
46405: LD_ADDR_VAR 0 6
46409: PUSH
46410: LD_VAR 0 1
46414: ST_TO_ADDR
// s_arr := [ tmp ] ;
46415: LD_ADDR_VAR 0 7
46419: PUSH
46420: LD_VAR 0 6
46424: PUSH
46425: EMPTY
46426: LIST
46427: ST_TO_ADDR
// for i = 1 to pos - 1 do
46428: LD_ADDR_VAR 0 5
46432: PUSH
46433: DOUBLE
46434: LD_INT 1
46436: DEC
46437: ST_TO_ADDR
46438: LD_VAR 0 2
46442: PUSH
46443: LD_INT 1
46445: MINUS
46446: PUSH
46447: FOR_TO
46448: IFFALSE 46493
// begin tmp := tmp [ pos [ i ] ] ;
46450: LD_ADDR_VAR 0 6
46454: PUSH
46455: LD_VAR 0 6
46459: PUSH
46460: LD_VAR 0 2
46464: PUSH
46465: LD_VAR 0 5
46469: ARRAY
46470: ARRAY
46471: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46472: LD_ADDR_VAR 0 7
46476: PUSH
46477: LD_VAR 0 7
46481: PUSH
46482: LD_VAR 0 6
46486: PUSH
46487: EMPTY
46488: LIST
46489: ADD
46490: ST_TO_ADDR
// end ;
46491: GO 46447
46493: POP
46494: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46495: LD_ADDR_VAR 0 6
46499: PUSH
46500: LD_VAR 0 6
46504: PPUSH
46505: LD_VAR 0 2
46509: PUSH
46510: LD_VAR 0 2
46514: ARRAY
46515: PPUSH
46516: LD_VAR 0 3
46520: PPUSH
46521: CALL_OW 1
46525: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46526: LD_ADDR_VAR 0 7
46530: PUSH
46531: LD_VAR 0 7
46535: PPUSH
46536: LD_VAR 0 7
46540: PPUSH
46541: LD_VAR 0 6
46545: PPUSH
46546: CALL_OW 1
46550: ST_TO_ADDR
// for i = s_arr downto 2 do
46551: LD_ADDR_VAR 0 5
46555: PUSH
46556: DOUBLE
46557: LD_VAR 0 7
46561: INC
46562: ST_TO_ADDR
46563: LD_INT 2
46565: PUSH
46566: FOR_DOWNTO
46567: IFFALSE 46651
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46569: LD_ADDR_VAR 0 6
46573: PUSH
46574: LD_VAR 0 7
46578: PUSH
46579: LD_VAR 0 5
46583: PUSH
46584: LD_INT 1
46586: MINUS
46587: ARRAY
46588: PPUSH
46589: LD_VAR 0 2
46593: PUSH
46594: LD_VAR 0 5
46598: PUSH
46599: LD_INT 1
46601: MINUS
46602: ARRAY
46603: PPUSH
46604: LD_VAR 0 7
46608: PUSH
46609: LD_VAR 0 5
46613: ARRAY
46614: PPUSH
46615: CALL_OW 1
46619: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46620: LD_ADDR_VAR 0 7
46624: PUSH
46625: LD_VAR 0 7
46629: PPUSH
46630: LD_VAR 0 5
46634: PUSH
46635: LD_INT 1
46637: MINUS
46638: PPUSH
46639: LD_VAR 0 6
46643: PPUSH
46644: CALL_OW 1
46648: ST_TO_ADDR
// end ;
46649: GO 46566
46651: POP
46652: POP
// result := s_arr [ 1 ] ;
46653: LD_ADDR_VAR 0 4
46657: PUSH
46658: LD_VAR 0 7
46662: PUSH
46663: LD_INT 1
46665: ARRAY
46666: ST_TO_ADDR
// end ; end ;
46667: LD_VAR 0 4
46671: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46672: LD_INT 0
46674: PPUSH
46675: PPUSH
// if not list then
46676: LD_VAR 0 1
46680: NOT
46681: IFFALSE 46685
// exit ;
46683: GO 46776
// i := list [ pos1 ] ;
46685: LD_ADDR_VAR 0 5
46689: PUSH
46690: LD_VAR 0 1
46694: PUSH
46695: LD_VAR 0 2
46699: ARRAY
46700: ST_TO_ADDR
// if not i then
46701: LD_VAR 0 5
46705: NOT
46706: IFFALSE 46710
// exit ;
46708: GO 46776
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46710: LD_ADDR_VAR 0 1
46714: PUSH
46715: LD_VAR 0 1
46719: PPUSH
46720: LD_VAR 0 2
46724: PPUSH
46725: LD_VAR 0 1
46729: PUSH
46730: LD_VAR 0 3
46734: ARRAY
46735: PPUSH
46736: CALL_OW 1
46740: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46741: LD_ADDR_VAR 0 1
46745: PUSH
46746: LD_VAR 0 1
46750: PPUSH
46751: LD_VAR 0 3
46755: PPUSH
46756: LD_VAR 0 5
46760: PPUSH
46761: CALL_OW 1
46765: ST_TO_ADDR
// result := list ;
46766: LD_ADDR_VAR 0 4
46770: PUSH
46771: LD_VAR 0 1
46775: ST_TO_ADDR
// end ;
46776: LD_VAR 0 4
46780: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46781: LD_INT 0
46783: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46784: LD_ADDR_VAR 0 5
46788: PUSH
46789: LD_VAR 0 1
46793: PPUSH
46794: CALL_OW 250
46798: PPUSH
46799: LD_VAR 0 1
46803: PPUSH
46804: CALL_OW 251
46808: PPUSH
46809: LD_VAR 0 2
46813: PPUSH
46814: LD_VAR 0 3
46818: PPUSH
46819: LD_VAR 0 4
46823: PPUSH
46824: CALL 46834 0 5
46828: ST_TO_ADDR
// end ;
46829: LD_VAR 0 5
46833: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46834: LD_INT 0
46836: PPUSH
46837: PPUSH
46838: PPUSH
46839: PPUSH
// if not list then
46840: LD_VAR 0 3
46844: NOT
46845: IFFALSE 46849
// exit ;
46847: GO 47237
// result := [ ] ;
46849: LD_ADDR_VAR 0 6
46853: PUSH
46854: EMPTY
46855: ST_TO_ADDR
// for i in list do
46856: LD_ADDR_VAR 0 7
46860: PUSH
46861: LD_VAR 0 3
46865: PUSH
46866: FOR_IN
46867: IFFALSE 47069
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46869: LD_ADDR_VAR 0 9
46873: PUSH
46874: LD_VAR 0 7
46878: PPUSH
46879: LD_VAR 0 1
46883: PPUSH
46884: LD_VAR 0 2
46888: PPUSH
46889: CALL_OW 297
46893: ST_TO_ADDR
// if not result then
46894: LD_VAR 0 6
46898: NOT
46899: IFFALSE 46925
// result := [ [ i , tmp ] ] else
46901: LD_ADDR_VAR 0 6
46905: PUSH
46906: LD_VAR 0 7
46910: PUSH
46911: LD_VAR 0 9
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: ST_TO_ADDR
46923: GO 47067
// begin if result [ result ] [ 2 ] < tmp then
46925: LD_VAR 0 6
46929: PUSH
46930: LD_VAR 0 6
46934: ARRAY
46935: PUSH
46936: LD_INT 2
46938: ARRAY
46939: PUSH
46940: LD_VAR 0 9
46944: LESS
46945: IFFALSE 46987
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46947: LD_ADDR_VAR 0 6
46951: PUSH
46952: LD_VAR 0 6
46956: PPUSH
46957: LD_VAR 0 6
46961: PUSH
46962: LD_INT 1
46964: PLUS
46965: PPUSH
46966: LD_VAR 0 7
46970: PUSH
46971: LD_VAR 0 9
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PPUSH
46980: CALL_OW 2
46984: ST_TO_ADDR
46985: GO 47067
// for j = 1 to result do
46987: LD_ADDR_VAR 0 8
46991: PUSH
46992: DOUBLE
46993: LD_INT 1
46995: DEC
46996: ST_TO_ADDR
46997: LD_VAR 0 6
47001: PUSH
47002: FOR_TO
47003: IFFALSE 47065
// begin if tmp < result [ j ] [ 2 ] then
47005: LD_VAR 0 9
47009: PUSH
47010: LD_VAR 0 6
47014: PUSH
47015: LD_VAR 0 8
47019: ARRAY
47020: PUSH
47021: LD_INT 2
47023: ARRAY
47024: LESS
47025: IFFALSE 47063
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47027: LD_ADDR_VAR 0 6
47031: PUSH
47032: LD_VAR 0 6
47036: PPUSH
47037: LD_VAR 0 8
47041: PPUSH
47042: LD_VAR 0 7
47046: PUSH
47047: LD_VAR 0 9
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PPUSH
47056: CALL_OW 2
47060: ST_TO_ADDR
// break ;
47061: GO 47065
// end ; end ;
47063: GO 47002
47065: POP
47066: POP
// end ; end ;
47067: GO 46866
47069: POP
47070: POP
// if result and not asc then
47071: LD_VAR 0 6
47075: PUSH
47076: LD_VAR 0 4
47080: NOT
47081: AND
47082: IFFALSE 47157
// begin tmp := result ;
47084: LD_ADDR_VAR 0 9
47088: PUSH
47089: LD_VAR 0 6
47093: ST_TO_ADDR
// for i = tmp downto 1 do
47094: LD_ADDR_VAR 0 7
47098: PUSH
47099: DOUBLE
47100: LD_VAR 0 9
47104: INC
47105: ST_TO_ADDR
47106: LD_INT 1
47108: PUSH
47109: FOR_DOWNTO
47110: IFFALSE 47155
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47112: LD_ADDR_VAR 0 6
47116: PUSH
47117: LD_VAR 0 6
47121: PPUSH
47122: LD_VAR 0 9
47126: PUSH
47127: LD_VAR 0 7
47131: MINUS
47132: PUSH
47133: LD_INT 1
47135: PLUS
47136: PPUSH
47137: LD_VAR 0 9
47141: PUSH
47142: LD_VAR 0 7
47146: ARRAY
47147: PPUSH
47148: CALL_OW 1
47152: ST_TO_ADDR
47153: GO 47109
47155: POP
47156: POP
// end ; tmp := [ ] ;
47157: LD_ADDR_VAR 0 9
47161: PUSH
47162: EMPTY
47163: ST_TO_ADDR
// if mode then
47164: LD_VAR 0 5
47168: IFFALSE 47237
// begin for i = 1 to result do
47170: LD_ADDR_VAR 0 7
47174: PUSH
47175: DOUBLE
47176: LD_INT 1
47178: DEC
47179: ST_TO_ADDR
47180: LD_VAR 0 6
47184: PUSH
47185: FOR_TO
47186: IFFALSE 47225
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47188: LD_ADDR_VAR 0 9
47192: PUSH
47193: LD_VAR 0 9
47197: PPUSH
47198: LD_VAR 0 7
47202: PPUSH
47203: LD_VAR 0 6
47207: PUSH
47208: LD_VAR 0 7
47212: ARRAY
47213: PUSH
47214: LD_INT 1
47216: ARRAY
47217: PPUSH
47218: CALL_OW 1
47222: ST_TO_ADDR
47223: GO 47185
47225: POP
47226: POP
// result := tmp ;
47227: LD_ADDR_VAR 0 6
47231: PUSH
47232: LD_VAR 0 9
47236: ST_TO_ADDR
// end ; end ;
47237: LD_VAR 0 6
47241: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47242: LD_INT 0
47244: PPUSH
47245: PPUSH
47246: PPUSH
47247: PPUSH
47248: PPUSH
47249: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47250: LD_ADDR_VAR 0 5
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// if not x or not y then
47272: LD_VAR 0 2
47276: NOT
47277: PUSH
47278: LD_VAR 0 3
47282: NOT
47283: OR
47284: IFFALSE 47288
// exit ;
47286: GO 48938
// if not range then
47288: LD_VAR 0 4
47292: NOT
47293: IFFALSE 47303
// range := 10 ;
47295: LD_ADDR_VAR 0 4
47299: PUSH
47300: LD_INT 10
47302: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47303: LD_ADDR_VAR 0 8
47307: PUSH
47308: LD_INT 81
47310: PUSH
47311: LD_VAR 0 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 92
47322: PUSH
47323: LD_VAR 0 2
47327: PUSH
47328: LD_VAR 0 3
47332: PUSH
47333: LD_VAR 0 4
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 21
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: PPUSH
47366: CALL_OW 69
47370: ST_TO_ADDR
// if not tmp then
47371: LD_VAR 0 8
47375: NOT
47376: IFFALSE 47380
// exit ;
47378: GO 48938
// for i in tmp do
47380: LD_ADDR_VAR 0 6
47384: PUSH
47385: LD_VAR 0 8
47389: PUSH
47390: FOR_IN
47391: IFFALSE 48913
// begin points := [ 0 , 0 , 0 ] ;
47393: LD_ADDR_VAR 0 9
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
// bpoints := 1 ;
47412: LD_ADDR_VAR 0 10
47416: PUSH
47417: LD_INT 1
47419: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47420: LD_VAR 0 6
47424: PPUSH
47425: CALL_OW 247
47429: PUSH
47430: LD_INT 1
47432: DOUBLE
47433: EQUAL
47434: IFTRUE 47438
47436: GO 48016
47438: POP
// begin if GetClass ( i ) = 1 then
47439: LD_VAR 0 6
47443: PPUSH
47444: CALL_OW 257
47448: PUSH
47449: LD_INT 1
47451: EQUAL
47452: IFFALSE 47473
// points := [ 10 , 5 , 3 ] ;
47454: LD_ADDR_VAR 0 9
47458: PUSH
47459: LD_INT 10
47461: PUSH
47462: LD_INT 5
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47473: LD_VAR 0 6
47477: PPUSH
47478: CALL_OW 257
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: LD_INT 4
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: IN
47497: IFFALSE 47518
// points := [ 3 , 2 , 1 ] ;
47499: LD_ADDR_VAR 0 9
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47518: LD_VAR 0 6
47522: PPUSH
47523: CALL_OW 257
47527: PUSH
47528: LD_INT 5
47530: EQUAL
47531: IFFALSE 47552
// points := [ 130 , 5 , 2 ] ;
47533: LD_ADDR_VAR 0 9
47537: PUSH
47538: LD_INT 130
47540: PUSH
47541: LD_INT 5
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47552: LD_VAR 0 6
47556: PPUSH
47557: CALL_OW 257
47561: PUSH
47562: LD_INT 8
47564: EQUAL
47565: IFFALSE 47586
// points := [ 35 , 35 , 30 ] ;
47567: LD_ADDR_VAR 0 9
47571: PUSH
47572: LD_INT 35
47574: PUSH
47575: LD_INT 35
47577: PUSH
47578: LD_INT 30
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47586: LD_VAR 0 6
47590: PPUSH
47591: CALL_OW 257
47595: PUSH
47596: LD_INT 9
47598: EQUAL
47599: IFFALSE 47620
// points := [ 20 , 55 , 40 ] ;
47601: LD_ADDR_VAR 0 9
47605: PUSH
47606: LD_INT 20
47608: PUSH
47609: LD_INT 55
47611: PUSH
47612: LD_INT 40
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47620: LD_VAR 0 6
47624: PPUSH
47625: CALL_OW 257
47629: PUSH
47630: LD_INT 12
47632: PUSH
47633: LD_INT 16
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: IN
47640: IFFALSE 47661
// points := [ 5 , 3 , 2 ] ;
47642: LD_ADDR_VAR 0 9
47646: PUSH
47647: LD_INT 5
47649: PUSH
47650: LD_INT 3
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47661: LD_VAR 0 6
47665: PPUSH
47666: CALL_OW 257
47670: PUSH
47671: LD_INT 17
47673: EQUAL
47674: IFFALSE 47695
// points := [ 100 , 50 , 75 ] ;
47676: LD_ADDR_VAR 0 9
47680: PUSH
47681: LD_INT 100
47683: PUSH
47684: LD_INT 50
47686: PUSH
47687: LD_INT 75
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: LIST
47694: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47695: LD_VAR 0 6
47699: PPUSH
47700: CALL_OW 257
47704: PUSH
47705: LD_INT 15
47707: EQUAL
47708: IFFALSE 47729
// points := [ 10 , 5 , 3 ] ;
47710: LD_ADDR_VAR 0 9
47714: PUSH
47715: LD_INT 10
47717: PUSH
47718: LD_INT 5
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47729: LD_VAR 0 6
47733: PPUSH
47734: CALL_OW 257
47738: PUSH
47739: LD_INT 14
47741: EQUAL
47742: IFFALSE 47763
// points := [ 10 , 0 , 0 ] ;
47744: LD_ADDR_VAR 0 9
47748: PUSH
47749: LD_INT 10
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: LIST
47762: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47763: LD_VAR 0 6
47767: PPUSH
47768: CALL_OW 257
47772: PUSH
47773: LD_INT 11
47775: EQUAL
47776: IFFALSE 47797
// points := [ 30 , 10 , 5 ] ;
47778: LD_ADDR_VAR 0 9
47782: PUSH
47783: LD_INT 30
47785: PUSH
47786: LD_INT 10
47788: PUSH
47789: LD_INT 5
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47797: LD_VAR 0 1
47801: PPUSH
47802: LD_INT 5
47804: PPUSH
47805: CALL_OW 321
47809: PUSH
47810: LD_INT 2
47812: EQUAL
47813: IFFALSE 47830
// bpoints := bpoints * 1.8 ;
47815: LD_ADDR_VAR 0 10
47819: PUSH
47820: LD_VAR 0 10
47824: PUSH
47825: LD_REAL  1.80000000000000E+0000
47828: MUL
47829: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47830: LD_VAR 0 6
47834: PPUSH
47835: CALL_OW 257
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: LD_INT 4
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: IN
47858: PUSH
47859: LD_VAR 0 1
47863: PPUSH
47864: LD_INT 51
47866: PPUSH
47867: CALL_OW 321
47871: PUSH
47872: LD_INT 2
47874: EQUAL
47875: AND
47876: IFFALSE 47893
// bpoints := bpoints * 1.2 ;
47878: LD_ADDR_VAR 0 10
47882: PUSH
47883: LD_VAR 0 10
47887: PUSH
47888: LD_REAL  1.20000000000000E+0000
47891: MUL
47892: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47893: LD_VAR 0 6
47897: PPUSH
47898: CALL_OW 257
47902: PUSH
47903: LD_INT 5
47905: PUSH
47906: LD_INT 7
47908: PUSH
47909: LD_INT 9
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: IN
47917: PUSH
47918: LD_VAR 0 1
47922: PPUSH
47923: LD_INT 52
47925: PPUSH
47926: CALL_OW 321
47930: PUSH
47931: LD_INT 2
47933: EQUAL
47934: AND
47935: IFFALSE 47952
// bpoints := bpoints * 1.5 ;
47937: LD_ADDR_VAR 0 10
47941: PUSH
47942: LD_VAR 0 10
47946: PUSH
47947: LD_REAL  1.50000000000000E+0000
47950: MUL
47951: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47952: LD_VAR 0 1
47956: PPUSH
47957: LD_INT 66
47959: PPUSH
47960: CALL_OW 321
47964: PUSH
47965: LD_INT 2
47967: EQUAL
47968: IFFALSE 47985
// bpoints := bpoints * 1.1 ;
47970: LD_ADDR_VAR 0 10
47974: PUSH
47975: LD_VAR 0 10
47979: PUSH
47980: LD_REAL  1.10000000000000E+0000
47983: MUL
47984: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47985: LD_ADDR_VAR 0 10
47989: PUSH
47990: LD_VAR 0 10
47994: PUSH
47995: LD_VAR 0 6
47999: PPUSH
48000: LD_INT 1
48002: PPUSH
48003: CALL_OW 259
48007: PUSH
48008: LD_REAL  1.15000000000000E+0000
48011: MUL
48012: MUL
48013: ST_TO_ADDR
// end ; unit_vehicle :
48014: GO 48842
48016: LD_INT 2
48018: DOUBLE
48019: EQUAL
48020: IFTRUE 48024
48022: GO 48830
48024: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48025: LD_VAR 0 6
48029: PPUSH
48030: CALL_OW 264
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 42
48040: PUSH
48041: LD_INT 24
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: IN
48049: IFFALSE 48070
// points := [ 25 , 5 , 3 ] ;
48051: LD_ADDR_VAR 0 9
48055: PUSH
48056: LD_INT 25
48058: PUSH
48059: LD_INT 5
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: LIST
48069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48070: LD_VAR 0 6
48074: PPUSH
48075: CALL_OW 264
48079: PUSH
48080: LD_INT 4
48082: PUSH
48083: LD_INT 43
48085: PUSH
48086: LD_INT 25
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: IN
48094: IFFALSE 48115
// points := [ 40 , 15 , 5 ] ;
48096: LD_ADDR_VAR 0 9
48100: PUSH
48101: LD_INT 40
48103: PUSH
48104: LD_INT 15
48106: PUSH
48107: LD_INT 5
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48115: LD_VAR 0 6
48119: PPUSH
48120: CALL_OW 264
48124: PUSH
48125: LD_INT 3
48127: PUSH
48128: LD_INT 23
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: IN
48135: IFFALSE 48156
// points := [ 7 , 25 , 8 ] ;
48137: LD_ADDR_VAR 0 9
48141: PUSH
48142: LD_INT 7
48144: PUSH
48145: LD_INT 25
48147: PUSH
48148: LD_INT 8
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48156: LD_VAR 0 6
48160: PPUSH
48161: CALL_OW 264
48165: PUSH
48166: LD_INT 5
48168: PUSH
48169: LD_INT 27
48171: PUSH
48172: LD_INT 44
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: IN
48180: IFFALSE 48201
// points := [ 14 , 50 , 16 ] ;
48182: LD_ADDR_VAR 0 9
48186: PUSH
48187: LD_INT 14
48189: PUSH
48190: LD_INT 50
48192: PUSH
48193: LD_INT 16
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48201: LD_VAR 0 6
48205: PPUSH
48206: CALL_OW 264
48210: PUSH
48211: LD_INT 6
48213: PUSH
48214: LD_INT 46
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: IN
48221: IFFALSE 48242
// points := [ 32 , 120 , 70 ] ;
48223: LD_ADDR_VAR 0 9
48227: PUSH
48228: LD_INT 32
48230: PUSH
48231: LD_INT 120
48233: PUSH
48234: LD_INT 70
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48242: LD_VAR 0 6
48246: PPUSH
48247: CALL_OW 264
48251: PUSH
48252: LD_INT 7
48254: PUSH
48255: LD_INT 28
48257: PUSH
48258: LD_INT 45
48260: PUSH
48261: LD_INT 92
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: IN
48270: IFFALSE 48291
// points := [ 35 , 20 , 45 ] ;
48272: LD_ADDR_VAR 0 9
48276: PUSH
48277: LD_INT 35
48279: PUSH
48280: LD_INT 20
48282: PUSH
48283: LD_INT 45
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48291: LD_VAR 0 6
48295: PPUSH
48296: CALL_OW 264
48300: PUSH
48301: LD_INT 47
48303: PUSH
48304: EMPTY
48305: LIST
48306: IN
48307: IFFALSE 48328
// points := [ 67 , 45 , 75 ] ;
48309: LD_ADDR_VAR 0 9
48313: PUSH
48314: LD_INT 67
48316: PUSH
48317: LD_INT 45
48319: PUSH
48320: LD_INT 75
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48328: LD_VAR 0 6
48332: PPUSH
48333: CALL_OW 264
48337: PUSH
48338: LD_INT 26
48340: PUSH
48341: EMPTY
48342: LIST
48343: IN
48344: IFFALSE 48365
// points := [ 120 , 30 , 80 ] ;
48346: LD_ADDR_VAR 0 9
48350: PUSH
48351: LD_INT 120
48353: PUSH
48354: LD_INT 30
48356: PUSH
48357: LD_INT 80
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48365: LD_VAR 0 6
48369: PPUSH
48370: CALL_OW 264
48374: PUSH
48375: LD_INT 22
48377: PUSH
48378: EMPTY
48379: LIST
48380: IN
48381: IFFALSE 48402
// points := [ 40 , 1 , 1 ] ;
48383: LD_ADDR_VAR 0 9
48387: PUSH
48388: LD_INT 40
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48402: LD_VAR 0 6
48406: PPUSH
48407: CALL_OW 264
48411: PUSH
48412: LD_INT 29
48414: PUSH
48415: EMPTY
48416: LIST
48417: IN
48418: IFFALSE 48439
// points := [ 70 , 200 , 400 ] ;
48420: LD_ADDR_VAR 0 9
48424: PUSH
48425: LD_INT 70
48427: PUSH
48428: LD_INT 200
48430: PUSH
48431: LD_INT 400
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48439: LD_VAR 0 6
48443: PPUSH
48444: CALL_OW 264
48448: PUSH
48449: LD_INT 14
48451: PUSH
48452: LD_INT 53
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: IN
48459: IFFALSE 48480
// points := [ 40 , 10 , 20 ] ;
48461: LD_ADDR_VAR 0 9
48465: PUSH
48466: LD_INT 40
48468: PUSH
48469: LD_INT 10
48471: PUSH
48472: LD_INT 20
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48480: LD_VAR 0 6
48484: PPUSH
48485: CALL_OW 264
48489: PUSH
48490: LD_INT 9
48492: PUSH
48493: EMPTY
48494: LIST
48495: IN
48496: IFFALSE 48517
// points := [ 5 , 70 , 20 ] ;
48498: LD_ADDR_VAR 0 9
48502: PUSH
48503: LD_INT 5
48505: PUSH
48506: LD_INT 70
48508: PUSH
48509: LD_INT 20
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48517: LD_VAR 0 6
48521: PPUSH
48522: CALL_OW 264
48526: PUSH
48527: LD_INT 10
48529: PUSH
48530: EMPTY
48531: LIST
48532: IN
48533: IFFALSE 48554
// points := [ 35 , 110 , 70 ] ;
48535: LD_ADDR_VAR 0 9
48539: PUSH
48540: LD_INT 35
48542: PUSH
48543: LD_INT 110
48545: PUSH
48546: LD_INT 70
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48554: LD_VAR 0 6
48558: PPUSH
48559: CALL_OW 265
48563: PUSH
48564: LD_INT 25
48566: EQUAL
48567: IFFALSE 48588
// points := [ 80 , 65 , 100 ] ;
48569: LD_ADDR_VAR 0 9
48573: PUSH
48574: LD_INT 80
48576: PUSH
48577: LD_INT 65
48579: PUSH
48580: LD_INT 100
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48588: LD_VAR 0 6
48592: PPUSH
48593: CALL_OW 263
48597: PUSH
48598: LD_INT 1
48600: EQUAL
48601: IFFALSE 48636
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48603: LD_ADDR_VAR 0 10
48607: PUSH
48608: LD_VAR 0 10
48612: PUSH
48613: LD_VAR 0 6
48617: PPUSH
48618: CALL_OW 311
48622: PPUSH
48623: LD_INT 3
48625: PPUSH
48626: CALL_OW 259
48630: PUSH
48631: LD_INT 4
48633: MUL
48634: MUL
48635: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48636: LD_VAR 0 6
48640: PPUSH
48641: CALL_OW 263
48645: PUSH
48646: LD_INT 2
48648: EQUAL
48649: IFFALSE 48700
// begin j := IsControledBy ( i ) ;
48651: LD_ADDR_VAR 0 7
48655: PUSH
48656: LD_VAR 0 6
48660: PPUSH
48661: CALL_OW 312
48665: ST_TO_ADDR
// if j then
48666: LD_VAR 0 7
48670: IFFALSE 48700
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48672: LD_ADDR_VAR 0 10
48676: PUSH
48677: LD_VAR 0 10
48681: PUSH
48682: LD_VAR 0 7
48686: PPUSH
48687: LD_INT 3
48689: PPUSH
48690: CALL_OW 259
48694: PUSH
48695: LD_INT 3
48697: MUL
48698: MUL
48699: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48700: LD_VAR 0 6
48704: PPUSH
48705: CALL_OW 264
48709: PUSH
48710: LD_INT 5
48712: PUSH
48713: LD_INT 6
48715: PUSH
48716: LD_INT 46
48718: PUSH
48719: LD_INT 44
48721: PUSH
48722: LD_INT 47
48724: PUSH
48725: LD_INT 45
48727: PUSH
48728: LD_INT 28
48730: PUSH
48731: LD_INT 7
48733: PUSH
48734: LD_INT 27
48736: PUSH
48737: LD_INT 29
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: IN
48752: PUSH
48753: LD_VAR 0 1
48757: PPUSH
48758: LD_INT 52
48760: PPUSH
48761: CALL_OW 321
48765: PUSH
48766: LD_INT 2
48768: EQUAL
48769: AND
48770: IFFALSE 48787
// bpoints := bpoints * 1.2 ;
48772: LD_ADDR_VAR 0 10
48776: PUSH
48777: LD_VAR 0 10
48781: PUSH
48782: LD_REAL  1.20000000000000E+0000
48785: MUL
48786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48787: LD_VAR 0 6
48791: PPUSH
48792: CALL_OW 264
48796: PUSH
48797: LD_INT 6
48799: PUSH
48800: LD_INT 46
48802: PUSH
48803: LD_INT 47
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: IN
48811: IFFALSE 48828
// bpoints := bpoints * 1.2 ;
48813: LD_ADDR_VAR 0 10
48817: PUSH
48818: LD_VAR 0 10
48822: PUSH
48823: LD_REAL  1.20000000000000E+0000
48826: MUL
48827: ST_TO_ADDR
// end ; unit_building :
48828: GO 48842
48830: LD_INT 3
48832: DOUBLE
48833: EQUAL
48834: IFTRUE 48838
48836: GO 48841
48838: POP
// ; end ;
48839: GO 48842
48841: POP
// for j = 1 to 3 do
48842: LD_ADDR_VAR 0 7
48846: PUSH
48847: DOUBLE
48848: LD_INT 1
48850: DEC
48851: ST_TO_ADDR
48852: LD_INT 3
48854: PUSH
48855: FOR_TO
48856: IFFALSE 48909
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48858: LD_ADDR_VAR 0 5
48862: PUSH
48863: LD_VAR 0 5
48867: PPUSH
48868: LD_VAR 0 7
48872: PPUSH
48873: LD_VAR 0 5
48877: PUSH
48878: LD_VAR 0 7
48882: ARRAY
48883: PUSH
48884: LD_VAR 0 9
48888: PUSH
48889: LD_VAR 0 7
48893: ARRAY
48894: PUSH
48895: LD_VAR 0 10
48899: MUL
48900: PLUS
48901: PPUSH
48902: CALL_OW 1
48906: ST_TO_ADDR
48907: GO 48855
48909: POP
48910: POP
// end ;
48911: GO 47390
48913: POP
48914: POP
// result := Replace ( result , 4 , tmp ) ;
48915: LD_ADDR_VAR 0 5
48919: PUSH
48920: LD_VAR 0 5
48924: PPUSH
48925: LD_INT 4
48927: PPUSH
48928: LD_VAR 0 8
48932: PPUSH
48933: CALL_OW 1
48937: ST_TO_ADDR
// end ;
48938: LD_VAR 0 5
48942: RET
// export function DangerAtRange ( unit , range ) ; begin
48943: LD_INT 0
48945: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48946: LD_ADDR_VAR 0 3
48950: PUSH
48951: LD_VAR 0 1
48955: PPUSH
48956: CALL_OW 255
48960: PPUSH
48961: LD_VAR 0 1
48965: PPUSH
48966: CALL_OW 250
48970: PPUSH
48971: LD_VAR 0 1
48975: PPUSH
48976: CALL_OW 251
48980: PPUSH
48981: LD_VAR 0 2
48985: PPUSH
48986: CALL 47242 0 4
48990: ST_TO_ADDR
// end ;
48991: LD_VAR 0 3
48995: RET
// export function DangerInArea ( side , area ) ; begin
48996: LD_INT 0
48998: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48999: LD_ADDR_VAR 0 3
49003: PUSH
49004: LD_VAR 0 2
49008: PPUSH
49009: LD_INT 81
49011: PUSH
49012: LD_VAR 0 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PPUSH
49021: CALL_OW 70
49025: ST_TO_ADDR
// end ;
49026: LD_VAR 0 3
49030: RET
// export function IsExtension ( b ) ; begin
49031: LD_INT 0
49033: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: LD_VAR 0 1
49043: PUSH
49044: LD_INT 23
49046: PUSH
49047: LD_INT 20
49049: PUSH
49050: LD_INT 22
49052: PUSH
49053: LD_INT 17
49055: PUSH
49056: LD_INT 24
49058: PUSH
49059: LD_INT 21
49061: PUSH
49062: LD_INT 19
49064: PUSH
49065: LD_INT 16
49067: PUSH
49068: LD_INT 25
49070: PUSH
49071: LD_INT 18
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: IN
49086: ST_TO_ADDR
// end ;
49087: LD_VAR 0 2
49091: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49092: LD_INT 0
49094: PPUSH
49095: PPUSH
49096: PPUSH
// result := [ ] ;
49097: LD_ADDR_VAR 0 4
49101: PUSH
49102: EMPTY
49103: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49104: LD_ADDR_VAR 0 5
49108: PUSH
49109: LD_VAR 0 2
49113: PPUSH
49114: LD_INT 21
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PPUSH
49124: CALL_OW 70
49128: ST_TO_ADDR
// if not tmp then
49129: LD_VAR 0 5
49133: NOT
49134: IFFALSE 49138
// exit ;
49136: GO 49202
// if checkLink then
49138: LD_VAR 0 3
49142: IFFALSE 49192
// begin for i in tmp do
49144: LD_ADDR_VAR 0 6
49148: PUSH
49149: LD_VAR 0 5
49153: PUSH
49154: FOR_IN
49155: IFFALSE 49190
// if GetBase ( i ) <> base then
49157: LD_VAR 0 6
49161: PPUSH
49162: CALL_OW 274
49166: PUSH
49167: LD_VAR 0 1
49171: NONEQUAL
49172: IFFALSE 49188
// ComLinkToBase ( base , i ) ;
49174: LD_VAR 0 1
49178: PPUSH
49179: LD_VAR 0 6
49183: PPUSH
49184: CALL_OW 169
49188: GO 49154
49190: POP
49191: POP
// end ; result := tmp ;
49192: LD_ADDR_VAR 0 4
49196: PUSH
49197: LD_VAR 0 5
49201: ST_TO_ADDR
// end ;
49202: LD_VAR 0 4
49206: RET
// export function ComComplete ( units , b ) ; var i ; begin
49207: LD_INT 0
49209: PPUSH
49210: PPUSH
// if not units then
49211: LD_VAR 0 1
49215: NOT
49216: IFFALSE 49220
// exit ;
49218: GO 49310
// for i in units do
49220: LD_ADDR_VAR 0 4
49224: PUSH
49225: LD_VAR 0 1
49229: PUSH
49230: FOR_IN
49231: IFFALSE 49308
// if BuildingStatus ( b ) = bs_build then
49233: LD_VAR 0 2
49237: PPUSH
49238: CALL_OW 461
49242: PUSH
49243: LD_INT 1
49245: EQUAL
49246: IFFALSE 49306
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49248: LD_VAR 0 4
49252: PPUSH
49253: LD_STRING h
49255: PUSH
49256: LD_VAR 0 2
49260: PPUSH
49261: CALL_OW 250
49265: PUSH
49266: LD_VAR 0 2
49270: PPUSH
49271: CALL_OW 251
49275: PUSH
49276: LD_VAR 0 2
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: PPUSH
49302: CALL_OW 446
49306: GO 49230
49308: POP
49309: POP
// end ;
49310: LD_VAR 0 3
49314: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49315: LD_INT 0
49317: PPUSH
49318: PPUSH
49319: PPUSH
49320: PPUSH
49321: PPUSH
49322: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49323: LD_VAR 0 1
49327: NOT
49328: PUSH
49329: LD_VAR 0 1
49333: PPUSH
49334: CALL_OW 263
49338: PUSH
49339: LD_INT 2
49341: NONEQUAL
49342: OR
49343: IFFALSE 49347
// exit ;
49345: GO 49663
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49347: LD_ADDR_VAR 0 6
49351: PUSH
49352: LD_INT 22
49354: PUSH
49355: LD_VAR 0 1
49359: PPUSH
49360: CALL_OW 255
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 30
49374: PUSH
49375: LD_INT 36
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 34
49384: PUSH
49385: LD_INT 31
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PPUSH
49401: CALL_OW 69
49405: ST_TO_ADDR
// if not tmp then
49406: LD_VAR 0 6
49410: NOT
49411: IFFALSE 49415
// exit ;
49413: GO 49663
// result := [ ] ;
49415: LD_ADDR_VAR 0 2
49419: PUSH
49420: EMPTY
49421: ST_TO_ADDR
// for i in tmp do
49422: LD_ADDR_VAR 0 3
49426: PUSH
49427: LD_VAR 0 6
49431: PUSH
49432: FOR_IN
49433: IFFALSE 49504
// begin t := UnitsInside ( i ) ;
49435: LD_ADDR_VAR 0 4
49439: PUSH
49440: LD_VAR 0 3
49444: PPUSH
49445: CALL_OW 313
49449: ST_TO_ADDR
// if t then
49450: LD_VAR 0 4
49454: IFFALSE 49502
// for j in t do
49456: LD_ADDR_VAR 0 7
49460: PUSH
49461: LD_VAR 0 4
49465: PUSH
49466: FOR_IN
49467: IFFALSE 49500
// result := Replace ( result , result + 1 , j ) ;
49469: LD_ADDR_VAR 0 2
49473: PUSH
49474: LD_VAR 0 2
49478: PPUSH
49479: LD_VAR 0 2
49483: PUSH
49484: LD_INT 1
49486: PLUS
49487: PPUSH
49488: LD_VAR 0 7
49492: PPUSH
49493: CALL_OW 1
49497: ST_TO_ADDR
49498: GO 49466
49500: POP
49501: POP
// end ;
49502: GO 49432
49504: POP
49505: POP
// if not result then
49506: LD_VAR 0 2
49510: NOT
49511: IFFALSE 49515
// exit ;
49513: GO 49663
// mech := result [ 1 ] ;
49515: LD_ADDR_VAR 0 5
49519: PUSH
49520: LD_VAR 0 2
49524: PUSH
49525: LD_INT 1
49527: ARRAY
49528: ST_TO_ADDR
// if result > 1 then
49529: LD_VAR 0 2
49533: PUSH
49534: LD_INT 1
49536: GREATER
49537: IFFALSE 49649
// begin for i = 2 to result do
49539: LD_ADDR_VAR 0 3
49543: PUSH
49544: DOUBLE
49545: LD_INT 2
49547: DEC
49548: ST_TO_ADDR
49549: LD_VAR 0 2
49553: PUSH
49554: FOR_TO
49555: IFFALSE 49647
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49557: LD_ADDR_VAR 0 4
49561: PUSH
49562: LD_VAR 0 2
49566: PUSH
49567: LD_VAR 0 3
49571: ARRAY
49572: PPUSH
49573: LD_INT 3
49575: PPUSH
49576: CALL_OW 259
49580: PUSH
49581: LD_VAR 0 2
49585: PUSH
49586: LD_VAR 0 3
49590: ARRAY
49591: PPUSH
49592: CALL_OW 432
49596: MINUS
49597: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49598: LD_VAR 0 4
49602: PUSH
49603: LD_VAR 0 5
49607: PPUSH
49608: LD_INT 3
49610: PPUSH
49611: CALL_OW 259
49615: PUSH
49616: LD_VAR 0 5
49620: PPUSH
49621: CALL_OW 432
49625: MINUS
49626: GREATEREQUAL
49627: IFFALSE 49645
// mech := result [ i ] ;
49629: LD_ADDR_VAR 0 5
49633: PUSH
49634: LD_VAR 0 2
49638: PUSH
49639: LD_VAR 0 3
49643: ARRAY
49644: ST_TO_ADDR
// end ;
49645: GO 49554
49647: POP
49648: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49649: LD_VAR 0 1
49653: PPUSH
49654: LD_VAR 0 5
49658: PPUSH
49659: CALL_OW 135
// end ;
49663: LD_VAR 0 2
49667: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49668: LD_INT 0
49670: PPUSH
49671: PPUSH
49672: PPUSH
49673: PPUSH
49674: PPUSH
49675: PPUSH
49676: PPUSH
49677: PPUSH
49678: PPUSH
49679: PPUSH
49680: PPUSH
49681: PPUSH
49682: PPUSH
// result := [ ] ;
49683: LD_ADDR_VAR 0 7
49687: PUSH
49688: EMPTY
49689: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49690: LD_VAR 0 1
49694: PPUSH
49695: CALL_OW 266
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: IN
49710: NOT
49711: IFFALSE 49715
// exit ;
49713: GO 51349
// if name then
49715: LD_VAR 0 3
49719: IFFALSE 49735
// SetBName ( base_dep , name ) ;
49721: LD_VAR 0 1
49725: PPUSH
49726: LD_VAR 0 3
49730: PPUSH
49731: CALL_OW 500
// base := GetBase ( base_dep ) ;
49735: LD_ADDR_VAR 0 15
49739: PUSH
49740: LD_VAR 0 1
49744: PPUSH
49745: CALL_OW 274
49749: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49750: LD_ADDR_VAR 0 16
49754: PUSH
49755: LD_VAR 0 1
49759: PPUSH
49760: CALL_OW 255
49764: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49765: LD_ADDR_VAR 0 17
49769: PUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 248
49779: ST_TO_ADDR
// if sources then
49780: LD_VAR 0 5
49784: IFFALSE 49831
// for i = 1 to 3 do
49786: LD_ADDR_VAR 0 8
49790: PUSH
49791: DOUBLE
49792: LD_INT 1
49794: DEC
49795: ST_TO_ADDR
49796: LD_INT 3
49798: PUSH
49799: FOR_TO
49800: IFFALSE 49829
// AddResourceType ( base , i , sources [ i ] ) ;
49802: LD_VAR 0 15
49806: PPUSH
49807: LD_VAR 0 8
49811: PPUSH
49812: LD_VAR 0 5
49816: PUSH
49817: LD_VAR 0 8
49821: ARRAY
49822: PPUSH
49823: CALL_OW 276
49827: GO 49799
49829: POP
49830: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49831: LD_ADDR_VAR 0 18
49835: PUSH
49836: LD_VAR 0 15
49840: PPUSH
49841: LD_VAR 0 2
49845: PPUSH
49846: LD_INT 1
49848: PPUSH
49849: CALL 49092 0 3
49853: ST_TO_ADDR
// InitHc ;
49854: CALL_OW 19
// InitUc ;
49858: CALL_OW 18
// uc_side := side ;
49862: LD_ADDR_OWVAR 20
49866: PUSH
49867: LD_VAR 0 16
49871: ST_TO_ADDR
// uc_nation := nation ;
49872: LD_ADDR_OWVAR 21
49876: PUSH
49877: LD_VAR 0 17
49881: ST_TO_ADDR
// if buildings then
49882: LD_VAR 0 18
49886: IFFALSE 51208
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49888: LD_ADDR_VAR 0 19
49892: PUSH
49893: LD_VAR 0 18
49897: PPUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 30
49903: PUSH
49904: LD_INT 29
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 30
49913: PUSH
49914: LD_INT 30
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: PPUSH
49926: CALL_OW 72
49930: ST_TO_ADDR
// if tmp then
49931: LD_VAR 0 19
49935: IFFALSE 49983
// for i in tmp do
49937: LD_ADDR_VAR 0 8
49941: PUSH
49942: LD_VAR 0 19
49946: PUSH
49947: FOR_IN
49948: IFFALSE 49981
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49950: LD_VAR 0 8
49954: PPUSH
49955: CALL_OW 250
49959: PPUSH
49960: LD_VAR 0 8
49964: PPUSH
49965: CALL_OW 251
49969: PPUSH
49970: LD_VAR 0 16
49974: PPUSH
49975: CALL_OW 441
49979: GO 49947
49981: POP
49982: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49983: LD_VAR 0 18
49987: PPUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 30
49993: PUSH
49994: LD_INT 32
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 30
50003: PUSH
50004: LD_INT 33
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: PPUSH
50016: CALL_OW 72
50020: IFFALSE 50108
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50022: LD_ADDR_VAR 0 8
50026: PUSH
50027: LD_VAR 0 18
50031: PPUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 30
50037: PUSH
50038: LD_INT 32
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 30
50047: PUSH
50048: LD_INT 33
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: PPUSH
50060: CALL_OW 72
50064: PUSH
50065: FOR_IN
50066: IFFALSE 50106
// begin if not GetBWeapon ( i ) then
50068: LD_VAR 0 8
50072: PPUSH
50073: CALL_OW 269
50077: NOT
50078: IFFALSE 50104
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50080: LD_VAR 0 8
50084: PPUSH
50085: LD_VAR 0 8
50089: PPUSH
50090: LD_VAR 0 2
50094: PPUSH
50095: CALL 51354 0 2
50099: PPUSH
50100: CALL_OW 431
// end ;
50104: GO 50065
50106: POP
50107: POP
// end ; for i = 1 to personel do
50108: LD_ADDR_VAR 0 8
50112: PUSH
50113: DOUBLE
50114: LD_INT 1
50116: DEC
50117: ST_TO_ADDR
50118: LD_VAR 0 6
50122: PUSH
50123: FOR_TO
50124: IFFALSE 51188
// begin if i > 4 then
50126: LD_VAR 0 8
50130: PUSH
50131: LD_INT 4
50133: GREATER
50134: IFFALSE 50138
// break ;
50136: GO 51188
// case i of 1 :
50138: LD_VAR 0 8
50142: PUSH
50143: LD_INT 1
50145: DOUBLE
50146: EQUAL
50147: IFTRUE 50151
50149: GO 50231
50151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50152: LD_ADDR_VAR 0 12
50156: PUSH
50157: LD_VAR 0 18
50161: PPUSH
50162: LD_INT 22
50164: PUSH
50165: LD_VAR 0 16
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 58
50176: PUSH
50177: EMPTY
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 30
50185: PUSH
50186: LD_INT 32
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 30
50195: PUSH
50196: LD_INT 4
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 30
50205: PUSH
50206: LD_INT 5
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: PPUSH
50224: CALL_OW 72
50228: ST_TO_ADDR
50229: GO 50453
50231: LD_INT 2
50233: DOUBLE
50234: EQUAL
50235: IFTRUE 50239
50237: GO 50301
50239: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50240: LD_ADDR_VAR 0 12
50244: PUSH
50245: LD_VAR 0 18
50249: PPUSH
50250: LD_INT 22
50252: PUSH
50253: LD_VAR 0 16
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 30
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 30
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PPUSH
50294: CALL_OW 72
50298: ST_TO_ADDR
50299: GO 50453
50301: LD_INT 3
50303: DOUBLE
50304: EQUAL
50305: IFTRUE 50309
50307: GO 50371
50309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50310: LD_ADDR_VAR 0 12
50314: PUSH
50315: LD_VAR 0 18
50319: PPUSH
50320: LD_INT 22
50322: PUSH
50323: LD_VAR 0 16
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 30
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 30
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PPUSH
50364: CALL_OW 72
50368: ST_TO_ADDR
50369: GO 50453
50371: LD_INT 4
50373: DOUBLE
50374: EQUAL
50375: IFTRUE 50379
50377: GO 50452
50379: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50380: LD_ADDR_VAR 0 12
50384: PUSH
50385: LD_VAR 0 18
50389: PPUSH
50390: LD_INT 22
50392: PUSH
50393: LD_VAR 0 16
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 30
50407: PUSH
50408: LD_INT 6
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 30
50417: PUSH
50418: LD_INT 7
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 30
50427: PUSH
50428: LD_INT 8
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PPUSH
50445: CALL_OW 72
50449: ST_TO_ADDR
50450: GO 50453
50452: POP
// if i = 1 then
50453: LD_VAR 0 8
50457: PUSH
50458: LD_INT 1
50460: EQUAL
50461: IFFALSE 50572
// begin tmp := [ ] ;
50463: LD_ADDR_VAR 0 19
50467: PUSH
50468: EMPTY
50469: ST_TO_ADDR
// for j in f do
50470: LD_ADDR_VAR 0 9
50474: PUSH
50475: LD_VAR 0 12
50479: PUSH
50480: FOR_IN
50481: IFFALSE 50554
// if GetBType ( j ) = b_bunker then
50483: LD_VAR 0 9
50487: PPUSH
50488: CALL_OW 266
50492: PUSH
50493: LD_INT 32
50495: EQUAL
50496: IFFALSE 50523
// tmp := Insert ( tmp , 1 , j ) else
50498: LD_ADDR_VAR 0 19
50502: PUSH
50503: LD_VAR 0 19
50507: PPUSH
50508: LD_INT 1
50510: PPUSH
50511: LD_VAR 0 9
50515: PPUSH
50516: CALL_OW 2
50520: ST_TO_ADDR
50521: GO 50552
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50523: LD_ADDR_VAR 0 19
50527: PUSH
50528: LD_VAR 0 19
50532: PPUSH
50533: LD_VAR 0 19
50537: PUSH
50538: LD_INT 1
50540: PLUS
50541: PPUSH
50542: LD_VAR 0 9
50546: PPUSH
50547: CALL_OW 2
50551: ST_TO_ADDR
50552: GO 50480
50554: POP
50555: POP
// if tmp then
50556: LD_VAR 0 19
50560: IFFALSE 50572
// f := tmp ;
50562: LD_ADDR_VAR 0 12
50566: PUSH
50567: LD_VAR 0 19
50571: ST_TO_ADDR
// end ; x := personel [ i ] ;
50572: LD_ADDR_VAR 0 13
50576: PUSH
50577: LD_VAR 0 6
50581: PUSH
50582: LD_VAR 0 8
50586: ARRAY
50587: ST_TO_ADDR
// if x = - 1 then
50588: LD_VAR 0 13
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: EQUAL
50597: IFFALSE 50806
// begin for j in f do
50599: LD_ADDR_VAR 0 9
50603: PUSH
50604: LD_VAR 0 12
50608: PUSH
50609: FOR_IN
50610: IFFALSE 50802
// repeat InitHc ;
50612: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50616: LD_VAR 0 9
50620: PPUSH
50621: CALL_OW 266
50625: PUSH
50626: LD_INT 5
50628: EQUAL
50629: IFFALSE 50699
// begin if UnitsInside ( j ) < 3 then
50631: LD_VAR 0 9
50635: PPUSH
50636: CALL_OW 313
50640: PUSH
50641: LD_INT 3
50643: LESS
50644: IFFALSE 50680
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50646: LD_INT 0
50648: PPUSH
50649: LD_INT 5
50651: PUSH
50652: LD_INT 8
50654: PUSH
50655: LD_INT 9
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: PUSH
50663: LD_VAR 0 17
50667: ARRAY
50668: PPUSH
50669: LD_VAR 0 4
50673: PPUSH
50674: CALL_OW 380
50678: GO 50697
// PrepareHuman ( false , i , skill ) ;
50680: LD_INT 0
50682: PPUSH
50683: LD_VAR 0 8
50687: PPUSH
50688: LD_VAR 0 4
50692: PPUSH
50693: CALL_OW 380
// end else
50697: GO 50716
// PrepareHuman ( false , i , skill ) ;
50699: LD_INT 0
50701: PPUSH
50702: LD_VAR 0 8
50706: PPUSH
50707: LD_VAR 0 4
50711: PPUSH
50712: CALL_OW 380
// un := CreateHuman ;
50716: LD_ADDR_VAR 0 14
50720: PUSH
50721: CALL_OW 44
50725: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50726: LD_ADDR_VAR 0 7
50730: PUSH
50731: LD_VAR 0 7
50735: PPUSH
50736: LD_INT 1
50738: PPUSH
50739: LD_VAR 0 14
50743: PPUSH
50744: CALL_OW 2
50748: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50749: LD_VAR 0 14
50753: PPUSH
50754: LD_VAR 0 9
50758: PPUSH
50759: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50763: LD_VAR 0 9
50767: PPUSH
50768: CALL_OW 313
50772: PUSH
50773: LD_INT 6
50775: EQUAL
50776: PUSH
50777: LD_VAR 0 9
50781: PPUSH
50782: CALL_OW 266
50786: PUSH
50787: LD_INT 32
50789: PUSH
50790: LD_INT 31
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: IN
50797: OR
50798: IFFALSE 50612
50800: GO 50609
50802: POP
50803: POP
// end else
50804: GO 51186
// for j = 1 to x do
50806: LD_ADDR_VAR 0 9
50810: PUSH
50811: DOUBLE
50812: LD_INT 1
50814: DEC
50815: ST_TO_ADDR
50816: LD_VAR 0 13
50820: PUSH
50821: FOR_TO
50822: IFFALSE 51184
// begin InitHc ;
50824: CALL_OW 19
// if not f then
50828: LD_VAR 0 12
50832: NOT
50833: IFFALSE 50922
// begin PrepareHuman ( false , i , skill ) ;
50835: LD_INT 0
50837: PPUSH
50838: LD_VAR 0 8
50842: PPUSH
50843: LD_VAR 0 4
50847: PPUSH
50848: CALL_OW 380
// un := CreateHuman ;
50852: LD_ADDR_VAR 0 14
50856: PUSH
50857: CALL_OW 44
50861: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50862: LD_ADDR_VAR 0 7
50866: PUSH
50867: LD_VAR 0 7
50871: PPUSH
50872: LD_INT 1
50874: PPUSH
50875: LD_VAR 0 14
50879: PPUSH
50880: CALL_OW 2
50884: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50885: LD_VAR 0 14
50889: PPUSH
50890: LD_VAR 0 1
50894: PPUSH
50895: CALL_OW 250
50899: PPUSH
50900: LD_VAR 0 1
50904: PPUSH
50905: CALL_OW 251
50909: PPUSH
50910: LD_INT 10
50912: PPUSH
50913: LD_INT 0
50915: PPUSH
50916: CALL_OW 50
// continue ;
50920: GO 50821
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50922: LD_VAR 0 12
50926: PUSH
50927: LD_INT 1
50929: ARRAY
50930: PPUSH
50931: CALL_OW 313
50935: PUSH
50936: LD_VAR 0 12
50940: PUSH
50941: LD_INT 1
50943: ARRAY
50944: PPUSH
50945: CALL_OW 266
50949: PUSH
50950: LD_INT 32
50952: PUSH
50953: LD_INT 31
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: IN
50960: AND
50961: PUSH
50962: LD_VAR 0 12
50966: PUSH
50967: LD_INT 1
50969: ARRAY
50970: PPUSH
50971: CALL_OW 313
50975: PUSH
50976: LD_INT 6
50978: EQUAL
50979: OR
50980: IFFALSE 51000
// f := Delete ( f , 1 ) ;
50982: LD_ADDR_VAR 0 12
50986: PUSH
50987: LD_VAR 0 12
50991: PPUSH
50992: LD_INT 1
50994: PPUSH
50995: CALL_OW 3
50999: ST_TO_ADDR
// if not f then
51000: LD_VAR 0 12
51004: NOT
51005: IFFALSE 51023
// begin x := x + 2 ;
51007: LD_ADDR_VAR 0 13
51011: PUSH
51012: LD_VAR 0 13
51016: PUSH
51017: LD_INT 2
51019: PLUS
51020: ST_TO_ADDR
// continue ;
51021: GO 50821
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51023: LD_VAR 0 12
51027: PUSH
51028: LD_INT 1
51030: ARRAY
51031: PPUSH
51032: CALL_OW 266
51036: PUSH
51037: LD_INT 5
51039: EQUAL
51040: IFFALSE 51114
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51042: LD_VAR 0 12
51046: PUSH
51047: LD_INT 1
51049: ARRAY
51050: PPUSH
51051: CALL_OW 313
51055: PUSH
51056: LD_INT 3
51058: LESS
51059: IFFALSE 51095
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51061: LD_INT 0
51063: PPUSH
51064: LD_INT 5
51066: PUSH
51067: LD_INT 8
51069: PUSH
51070: LD_INT 9
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: LIST
51077: PUSH
51078: LD_VAR 0 17
51082: ARRAY
51083: PPUSH
51084: LD_VAR 0 4
51088: PPUSH
51089: CALL_OW 380
51093: GO 51112
// PrepareHuman ( false , i , skill ) ;
51095: LD_INT 0
51097: PPUSH
51098: LD_VAR 0 8
51102: PPUSH
51103: LD_VAR 0 4
51107: PPUSH
51108: CALL_OW 380
// end else
51112: GO 51131
// PrepareHuman ( false , i , skill ) ;
51114: LD_INT 0
51116: PPUSH
51117: LD_VAR 0 8
51121: PPUSH
51122: LD_VAR 0 4
51126: PPUSH
51127: CALL_OW 380
// un := CreateHuman ;
51131: LD_ADDR_VAR 0 14
51135: PUSH
51136: CALL_OW 44
51140: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51141: LD_ADDR_VAR 0 7
51145: PUSH
51146: LD_VAR 0 7
51150: PPUSH
51151: LD_INT 1
51153: PPUSH
51154: LD_VAR 0 14
51158: PPUSH
51159: CALL_OW 2
51163: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51164: LD_VAR 0 14
51168: PPUSH
51169: LD_VAR 0 12
51173: PUSH
51174: LD_INT 1
51176: ARRAY
51177: PPUSH
51178: CALL_OW 52
// end ;
51182: GO 50821
51184: POP
51185: POP
// end ;
51186: GO 50123
51188: POP
51189: POP
// result := result ^ buildings ;
51190: LD_ADDR_VAR 0 7
51194: PUSH
51195: LD_VAR 0 7
51199: PUSH
51200: LD_VAR 0 18
51204: ADD
51205: ST_TO_ADDR
// end else
51206: GO 51349
// begin for i = 1 to personel do
51208: LD_ADDR_VAR 0 8
51212: PUSH
51213: DOUBLE
51214: LD_INT 1
51216: DEC
51217: ST_TO_ADDR
51218: LD_VAR 0 6
51222: PUSH
51223: FOR_TO
51224: IFFALSE 51347
// begin if i > 4 then
51226: LD_VAR 0 8
51230: PUSH
51231: LD_INT 4
51233: GREATER
51234: IFFALSE 51238
// break ;
51236: GO 51347
// x := personel [ i ] ;
51238: LD_ADDR_VAR 0 13
51242: PUSH
51243: LD_VAR 0 6
51247: PUSH
51248: LD_VAR 0 8
51252: ARRAY
51253: ST_TO_ADDR
// if x = - 1 then
51254: LD_VAR 0 13
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: EQUAL
51263: IFFALSE 51267
// continue ;
51265: GO 51223
// PrepareHuman ( false , i , skill ) ;
51267: LD_INT 0
51269: PPUSH
51270: LD_VAR 0 8
51274: PPUSH
51275: LD_VAR 0 4
51279: PPUSH
51280: CALL_OW 380
// un := CreateHuman ;
51284: LD_ADDR_VAR 0 14
51288: PUSH
51289: CALL_OW 44
51293: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51294: LD_VAR 0 14
51298: PPUSH
51299: LD_VAR 0 1
51303: PPUSH
51304: CALL_OW 250
51308: PPUSH
51309: LD_VAR 0 1
51313: PPUSH
51314: CALL_OW 251
51318: PPUSH
51319: LD_INT 10
51321: PPUSH
51322: LD_INT 0
51324: PPUSH
51325: CALL_OW 50
// result := result ^ un ;
51329: LD_ADDR_VAR 0 7
51333: PUSH
51334: LD_VAR 0 7
51338: PUSH
51339: LD_VAR 0 14
51343: ADD
51344: ST_TO_ADDR
// end ;
51345: GO 51223
51347: POP
51348: POP
// end ; end ;
51349: LD_VAR 0 7
51353: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51354: LD_INT 0
51356: PPUSH
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
51365: PPUSH
51366: PPUSH
51367: PPUSH
51368: PPUSH
51369: PPUSH
51370: PPUSH
51371: PPUSH
// result := false ;
51372: LD_ADDR_VAR 0 3
51376: PUSH
51377: LD_INT 0
51379: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51380: LD_VAR 0 1
51384: NOT
51385: PUSH
51386: LD_VAR 0 1
51390: PPUSH
51391: CALL_OW 266
51395: PUSH
51396: LD_INT 32
51398: PUSH
51399: LD_INT 33
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: IN
51406: NOT
51407: OR
51408: IFFALSE 51412
// exit ;
51410: GO 52521
// nat := GetNation ( tower ) ;
51412: LD_ADDR_VAR 0 12
51416: PUSH
51417: LD_VAR 0 1
51421: PPUSH
51422: CALL_OW 248
51426: ST_TO_ADDR
// side := GetSide ( tower ) ;
51427: LD_ADDR_VAR 0 16
51431: PUSH
51432: LD_VAR 0 1
51436: PPUSH
51437: CALL_OW 255
51441: ST_TO_ADDR
// x := GetX ( tower ) ;
51442: LD_ADDR_VAR 0 10
51446: PUSH
51447: LD_VAR 0 1
51451: PPUSH
51452: CALL_OW 250
51456: ST_TO_ADDR
// y := GetY ( tower ) ;
51457: LD_ADDR_VAR 0 11
51461: PUSH
51462: LD_VAR 0 1
51466: PPUSH
51467: CALL_OW 251
51471: ST_TO_ADDR
// if not x or not y then
51472: LD_VAR 0 10
51476: NOT
51477: PUSH
51478: LD_VAR 0 11
51482: NOT
51483: OR
51484: IFFALSE 51488
// exit ;
51486: GO 52521
// weapon := 0 ;
51488: LD_ADDR_VAR 0 18
51492: PUSH
51493: LD_INT 0
51495: ST_TO_ADDR
// fac_list := [ ] ;
51496: LD_ADDR_VAR 0 17
51500: PUSH
51501: EMPTY
51502: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51503: LD_ADDR_VAR 0 6
51507: PUSH
51508: LD_VAR 0 1
51512: PPUSH
51513: CALL_OW 274
51517: PPUSH
51518: LD_VAR 0 2
51522: PPUSH
51523: LD_INT 0
51525: PPUSH
51526: CALL 49092 0 3
51530: PPUSH
51531: LD_INT 30
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PPUSH
51541: CALL_OW 72
51545: ST_TO_ADDR
// if not factories then
51546: LD_VAR 0 6
51550: NOT
51551: IFFALSE 51555
// exit ;
51553: GO 52521
// for i in factories do
51555: LD_ADDR_VAR 0 8
51559: PUSH
51560: LD_VAR 0 6
51564: PUSH
51565: FOR_IN
51566: IFFALSE 51591
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51568: LD_ADDR_VAR 0 17
51572: PUSH
51573: LD_VAR 0 17
51577: PUSH
51578: LD_VAR 0 8
51582: PPUSH
51583: CALL_OW 478
51587: UNION
51588: ST_TO_ADDR
51589: GO 51565
51591: POP
51592: POP
// if not fac_list then
51593: LD_VAR 0 17
51597: NOT
51598: IFFALSE 51602
// exit ;
51600: GO 52521
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51602: LD_ADDR_VAR 0 5
51606: PUSH
51607: LD_INT 4
51609: PUSH
51610: LD_INT 5
51612: PUSH
51613: LD_INT 9
51615: PUSH
51616: LD_INT 10
51618: PUSH
51619: LD_INT 6
51621: PUSH
51622: LD_INT 7
51624: PUSH
51625: LD_INT 11
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 27
51639: PUSH
51640: LD_INT 28
51642: PUSH
51643: LD_INT 26
51645: PUSH
51646: LD_INT 30
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 43
51657: PUSH
51658: LD_INT 44
51660: PUSH
51661: LD_INT 46
51663: PUSH
51664: LD_INT 45
51666: PUSH
51667: LD_INT 47
51669: PUSH
51670: LD_INT 49
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: PUSH
51686: LD_VAR 0 12
51690: ARRAY
51691: ST_TO_ADDR
// list := list isect fac_list ;
51692: LD_ADDR_VAR 0 5
51696: PUSH
51697: LD_VAR 0 5
51701: PUSH
51702: LD_VAR 0 17
51706: ISECT
51707: ST_TO_ADDR
// if not list then
51708: LD_VAR 0 5
51712: NOT
51713: IFFALSE 51717
// exit ;
51715: GO 52521
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51717: LD_VAR 0 12
51721: PUSH
51722: LD_INT 3
51724: EQUAL
51725: PUSH
51726: LD_INT 49
51728: PUSH
51729: LD_VAR 0 5
51733: IN
51734: AND
51735: PUSH
51736: LD_INT 31
51738: PPUSH
51739: LD_VAR 0 16
51743: PPUSH
51744: CALL_OW 321
51748: PUSH
51749: LD_INT 2
51751: EQUAL
51752: AND
51753: IFFALSE 51813
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51755: LD_INT 22
51757: PUSH
51758: LD_VAR 0 16
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 35
51769: PUSH
51770: LD_INT 49
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 91
51779: PUSH
51780: LD_VAR 0 1
51784: PUSH
51785: LD_INT 10
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: LIST
51797: PPUSH
51798: CALL_OW 69
51802: NOT
51803: IFFALSE 51813
// weapon := ru_time_lapser ;
51805: LD_ADDR_VAR 0 18
51809: PUSH
51810: LD_INT 49
51812: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51813: LD_VAR 0 12
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: IN
51828: PUSH
51829: LD_INT 11
51831: PUSH
51832: LD_VAR 0 5
51836: IN
51837: PUSH
51838: LD_INT 30
51840: PUSH
51841: LD_VAR 0 5
51845: IN
51846: OR
51847: AND
51848: PUSH
51849: LD_INT 6
51851: PPUSH
51852: LD_VAR 0 16
51856: PPUSH
51857: CALL_OW 321
51861: PUSH
51862: LD_INT 2
51864: EQUAL
51865: AND
51866: IFFALSE 52031
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51868: LD_INT 22
51870: PUSH
51871: LD_VAR 0 16
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 35
51885: PUSH
51886: LD_INT 11
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 35
51895: PUSH
51896: LD_INT 30
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 91
51910: PUSH
51911: LD_VAR 0 1
51915: PUSH
51916: LD_INT 18
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: LIST
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: PPUSH
51929: CALL_OW 69
51933: NOT
51934: PUSH
51935: LD_INT 22
51937: PUSH
51938: LD_VAR 0 16
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 30
51952: PUSH
51953: LD_INT 32
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 30
51962: PUSH
51963: LD_INT 33
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 91
51977: PUSH
51978: LD_VAR 0 1
51982: PUSH
51983: LD_INT 12
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: PPUSH
51999: CALL_OW 69
52003: PUSH
52004: LD_INT 2
52006: GREATER
52007: AND
52008: IFFALSE 52031
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52010: LD_ADDR_VAR 0 18
52014: PUSH
52015: LD_INT 11
52017: PUSH
52018: LD_INT 30
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_VAR 0 12
52029: ARRAY
52030: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52031: LD_VAR 0 18
52035: NOT
52036: PUSH
52037: LD_INT 40
52039: PPUSH
52040: LD_VAR 0 16
52044: PPUSH
52045: CALL_OW 321
52049: PUSH
52050: LD_INT 2
52052: EQUAL
52053: AND
52054: PUSH
52055: LD_INT 7
52057: PUSH
52058: LD_VAR 0 5
52062: IN
52063: PUSH
52064: LD_INT 28
52066: PUSH
52067: LD_VAR 0 5
52071: IN
52072: OR
52073: PUSH
52074: LD_INT 45
52076: PUSH
52077: LD_VAR 0 5
52081: IN
52082: OR
52083: AND
52084: IFFALSE 52338
// begin hex := GetHexInfo ( x , y ) ;
52086: LD_ADDR_VAR 0 4
52090: PUSH
52091: LD_VAR 0 10
52095: PPUSH
52096: LD_VAR 0 11
52100: PPUSH
52101: CALL_OW 546
52105: ST_TO_ADDR
// if hex [ 1 ] then
52106: LD_VAR 0 4
52110: PUSH
52111: LD_INT 1
52113: ARRAY
52114: IFFALSE 52118
// exit ;
52116: GO 52521
// height := hex [ 2 ] ;
52118: LD_ADDR_VAR 0 15
52122: PUSH
52123: LD_VAR 0 4
52127: PUSH
52128: LD_INT 2
52130: ARRAY
52131: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52132: LD_ADDR_VAR 0 14
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: LD_INT 5
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: ST_TO_ADDR
// for i in tmp do
52155: LD_ADDR_VAR 0 8
52159: PUSH
52160: LD_VAR 0 14
52164: PUSH
52165: FOR_IN
52166: IFFALSE 52336
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52168: LD_ADDR_VAR 0 9
52172: PUSH
52173: LD_VAR 0 10
52177: PPUSH
52178: LD_VAR 0 8
52182: PPUSH
52183: LD_INT 5
52185: PPUSH
52186: CALL_OW 272
52190: PUSH
52191: LD_VAR 0 11
52195: PPUSH
52196: LD_VAR 0 8
52200: PPUSH
52201: LD_INT 5
52203: PPUSH
52204: CALL_OW 273
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52213: LD_VAR 0 9
52217: PUSH
52218: LD_INT 1
52220: ARRAY
52221: PPUSH
52222: LD_VAR 0 9
52226: PUSH
52227: LD_INT 2
52229: ARRAY
52230: PPUSH
52231: CALL_OW 488
52235: IFFALSE 52334
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52237: LD_ADDR_VAR 0 4
52241: PUSH
52242: LD_VAR 0 9
52246: PUSH
52247: LD_INT 1
52249: ARRAY
52250: PPUSH
52251: LD_VAR 0 9
52255: PUSH
52256: LD_INT 2
52258: ARRAY
52259: PPUSH
52260: CALL_OW 546
52264: ST_TO_ADDR
// if hex [ 1 ] then
52265: LD_VAR 0 4
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: IFFALSE 52277
// continue ;
52275: GO 52165
// h := hex [ 2 ] ;
52277: LD_ADDR_VAR 0 13
52281: PUSH
52282: LD_VAR 0 4
52286: PUSH
52287: LD_INT 2
52289: ARRAY
52290: ST_TO_ADDR
// if h + 7 < height then
52291: LD_VAR 0 13
52295: PUSH
52296: LD_INT 7
52298: PLUS
52299: PUSH
52300: LD_VAR 0 15
52304: LESS
52305: IFFALSE 52334
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52307: LD_ADDR_VAR 0 18
52311: PUSH
52312: LD_INT 7
52314: PUSH
52315: LD_INT 28
52317: PUSH
52318: LD_INT 45
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: LIST
52325: PUSH
52326: LD_VAR 0 12
52330: ARRAY
52331: ST_TO_ADDR
// break ;
52332: GO 52336
// end ; end ; end ;
52334: GO 52165
52336: POP
52337: POP
// end ; if not weapon then
52338: LD_VAR 0 18
52342: NOT
52343: IFFALSE 52403
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52345: LD_ADDR_VAR 0 5
52349: PUSH
52350: LD_VAR 0 5
52354: PUSH
52355: LD_INT 11
52357: PUSH
52358: LD_INT 30
52360: PUSH
52361: LD_INT 49
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: DIFF
52369: ST_TO_ADDR
// if not list then
52370: LD_VAR 0 5
52374: NOT
52375: IFFALSE 52379
// exit ;
52377: GO 52521
// weapon := list [ rand ( 1 , list ) ] ;
52379: LD_ADDR_VAR 0 18
52383: PUSH
52384: LD_VAR 0 5
52388: PUSH
52389: LD_INT 1
52391: PPUSH
52392: LD_VAR 0 5
52396: PPUSH
52397: CALL_OW 12
52401: ARRAY
52402: ST_TO_ADDR
// end ; if weapon then
52403: LD_VAR 0 18
52407: IFFALSE 52521
// begin tmp := CostOfWeapon ( weapon ) ;
52409: LD_ADDR_VAR 0 14
52413: PUSH
52414: LD_VAR 0 18
52418: PPUSH
52419: CALL_OW 451
52423: ST_TO_ADDR
// j := GetBase ( tower ) ;
52424: LD_ADDR_VAR 0 9
52428: PUSH
52429: LD_VAR 0 1
52433: PPUSH
52434: CALL_OW 274
52438: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52439: LD_VAR 0 9
52443: PPUSH
52444: LD_INT 1
52446: PPUSH
52447: CALL_OW 275
52451: PUSH
52452: LD_VAR 0 14
52456: PUSH
52457: LD_INT 1
52459: ARRAY
52460: GREATEREQUAL
52461: PUSH
52462: LD_VAR 0 9
52466: PPUSH
52467: LD_INT 2
52469: PPUSH
52470: CALL_OW 275
52474: PUSH
52475: LD_VAR 0 14
52479: PUSH
52480: LD_INT 2
52482: ARRAY
52483: GREATEREQUAL
52484: AND
52485: PUSH
52486: LD_VAR 0 9
52490: PPUSH
52491: LD_INT 3
52493: PPUSH
52494: CALL_OW 275
52498: PUSH
52499: LD_VAR 0 14
52503: PUSH
52504: LD_INT 3
52506: ARRAY
52507: GREATEREQUAL
52508: AND
52509: IFFALSE 52521
// result := weapon ;
52511: LD_ADDR_VAR 0 3
52515: PUSH
52516: LD_VAR 0 18
52520: ST_TO_ADDR
// end ; end ;
52521: LD_VAR 0 3
52525: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52526: LD_INT 0
52528: PPUSH
52529: PPUSH
// result := true ;
52530: LD_ADDR_VAR 0 3
52534: PUSH
52535: LD_INT 1
52537: ST_TO_ADDR
// if array1 = array2 then
52538: LD_VAR 0 1
52542: PUSH
52543: LD_VAR 0 2
52547: EQUAL
52548: IFFALSE 52608
// begin for i = 1 to array1 do
52550: LD_ADDR_VAR 0 4
52554: PUSH
52555: DOUBLE
52556: LD_INT 1
52558: DEC
52559: ST_TO_ADDR
52560: LD_VAR 0 1
52564: PUSH
52565: FOR_TO
52566: IFFALSE 52604
// if array1 [ i ] <> array2 [ i ] then
52568: LD_VAR 0 1
52572: PUSH
52573: LD_VAR 0 4
52577: ARRAY
52578: PUSH
52579: LD_VAR 0 2
52583: PUSH
52584: LD_VAR 0 4
52588: ARRAY
52589: NONEQUAL
52590: IFFALSE 52602
// begin result := false ;
52592: LD_ADDR_VAR 0 3
52596: PUSH
52597: LD_INT 0
52599: ST_TO_ADDR
// break ;
52600: GO 52604
// end ;
52602: GO 52565
52604: POP
52605: POP
// end else
52606: GO 52616
// result := false ;
52608: LD_ADDR_VAR 0 3
52612: PUSH
52613: LD_INT 0
52615: ST_TO_ADDR
// end ;
52616: LD_VAR 0 3
52620: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52621: LD_INT 0
52623: PPUSH
52624: PPUSH
// if not array1 or not array2 then
52625: LD_VAR 0 1
52629: NOT
52630: PUSH
52631: LD_VAR 0 2
52635: NOT
52636: OR
52637: IFFALSE 52641
// exit ;
52639: GO 52705
// result := true ;
52641: LD_ADDR_VAR 0 3
52645: PUSH
52646: LD_INT 1
52648: ST_TO_ADDR
// for i = 1 to array1 do
52649: LD_ADDR_VAR 0 4
52653: PUSH
52654: DOUBLE
52655: LD_INT 1
52657: DEC
52658: ST_TO_ADDR
52659: LD_VAR 0 1
52663: PUSH
52664: FOR_TO
52665: IFFALSE 52703
// if array1 [ i ] <> array2 [ i ] then
52667: LD_VAR 0 1
52671: PUSH
52672: LD_VAR 0 4
52676: ARRAY
52677: PUSH
52678: LD_VAR 0 2
52682: PUSH
52683: LD_VAR 0 4
52687: ARRAY
52688: NONEQUAL
52689: IFFALSE 52701
// begin result := false ;
52691: LD_ADDR_VAR 0 3
52695: PUSH
52696: LD_INT 0
52698: ST_TO_ADDR
// break ;
52699: GO 52703
// end ;
52701: GO 52664
52703: POP
52704: POP
// end ;
52705: LD_VAR 0 3
52709: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52710: LD_INT 0
52712: PPUSH
52713: PPUSH
52714: PPUSH
// pom := GetBase ( fac ) ;
52715: LD_ADDR_VAR 0 5
52719: PUSH
52720: LD_VAR 0 1
52724: PPUSH
52725: CALL_OW 274
52729: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52730: LD_ADDR_VAR 0 4
52734: PUSH
52735: LD_VAR 0 2
52739: PUSH
52740: LD_INT 1
52742: ARRAY
52743: PPUSH
52744: LD_VAR 0 2
52748: PUSH
52749: LD_INT 2
52751: ARRAY
52752: PPUSH
52753: LD_VAR 0 2
52757: PUSH
52758: LD_INT 3
52760: ARRAY
52761: PPUSH
52762: LD_VAR 0 2
52766: PUSH
52767: LD_INT 4
52769: ARRAY
52770: PPUSH
52771: CALL_OW 449
52775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52776: LD_ADDR_VAR 0 3
52780: PUSH
52781: LD_VAR 0 5
52785: PPUSH
52786: LD_INT 1
52788: PPUSH
52789: CALL_OW 275
52793: PUSH
52794: LD_VAR 0 4
52798: PUSH
52799: LD_INT 1
52801: ARRAY
52802: GREATEREQUAL
52803: PUSH
52804: LD_VAR 0 5
52808: PPUSH
52809: LD_INT 2
52811: PPUSH
52812: CALL_OW 275
52816: PUSH
52817: LD_VAR 0 4
52821: PUSH
52822: LD_INT 2
52824: ARRAY
52825: GREATEREQUAL
52826: AND
52827: PUSH
52828: LD_VAR 0 5
52832: PPUSH
52833: LD_INT 3
52835: PPUSH
52836: CALL_OW 275
52840: PUSH
52841: LD_VAR 0 4
52845: PUSH
52846: LD_INT 3
52848: ARRAY
52849: GREATEREQUAL
52850: AND
52851: ST_TO_ADDR
// end ;
52852: LD_VAR 0 3
52856: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52857: LD_INT 0
52859: PPUSH
52860: PPUSH
52861: PPUSH
52862: PPUSH
// pom := GetBase ( building ) ;
52863: LD_ADDR_VAR 0 3
52867: PUSH
52868: LD_VAR 0 1
52872: PPUSH
52873: CALL_OW 274
52877: ST_TO_ADDR
// if not pom then
52878: LD_VAR 0 3
52882: NOT
52883: IFFALSE 52887
// exit ;
52885: GO 53057
// btype := GetBType ( building ) ;
52887: LD_ADDR_VAR 0 5
52891: PUSH
52892: LD_VAR 0 1
52896: PPUSH
52897: CALL_OW 266
52901: ST_TO_ADDR
// if btype = b_armoury then
52902: LD_VAR 0 5
52906: PUSH
52907: LD_INT 4
52909: EQUAL
52910: IFFALSE 52920
// btype := b_barracks ;
52912: LD_ADDR_VAR 0 5
52916: PUSH
52917: LD_INT 5
52919: ST_TO_ADDR
// if btype = b_depot then
52920: LD_VAR 0 5
52924: PUSH
52925: LD_INT 0
52927: EQUAL
52928: IFFALSE 52938
// btype := b_warehouse ;
52930: LD_ADDR_VAR 0 5
52934: PUSH
52935: LD_INT 1
52937: ST_TO_ADDR
// if btype = b_workshop then
52938: LD_VAR 0 5
52942: PUSH
52943: LD_INT 2
52945: EQUAL
52946: IFFALSE 52956
// btype := b_factory ;
52948: LD_ADDR_VAR 0 5
52952: PUSH
52953: LD_INT 3
52955: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52956: LD_ADDR_VAR 0 4
52960: PUSH
52961: LD_VAR 0 5
52965: PPUSH
52966: LD_VAR 0 1
52970: PPUSH
52971: CALL_OW 248
52975: PPUSH
52976: CALL_OW 450
52980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52981: LD_ADDR_VAR 0 2
52985: PUSH
52986: LD_VAR 0 3
52990: PPUSH
52991: LD_INT 1
52993: PPUSH
52994: CALL_OW 275
52998: PUSH
52999: LD_VAR 0 4
53003: PUSH
53004: LD_INT 1
53006: ARRAY
53007: GREATEREQUAL
53008: PUSH
53009: LD_VAR 0 3
53013: PPUSH
53014: LD_INT 2
53016: PPUSH
53017: CALL_OW 275
53021: PUSH
53022: LD_VAR 0 4
53026: PUSH
53027: LD_INT 2
53029: ARRAY
53030: GREATEREQUAL
53031: AND
53032: PUSH
53033: LD_VAR 0 3
53037: PPUSH
53038: LD_INT 3
53040: PPUSH
53041: CALL_OW 275
53045: PUSH
53046: LD_VAR 0 4
53050: PUSH
53051: LD_INT 3
53053: ARRAY
53054: GREATEREQUAL
53055: AND
53056: ST_TO_ADDR
// end ;
53057: LD_VAR 0 2
53061: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53062: LD_INT 0
53064: PPUSH
53065: PPUSH
53066: PPUSH
// pom := GetBase ( building ) ;
53067: LD_ADDR_VAR 0 4
53071: PUSH
53072: LD_VAR 0 1
53076: PPUSH
53077: CALL_OW 274
53081: ST_TO_ADDR
// if not pom then
53082: LD_VAR 0 4
53086: NOT
53087: IFFALSE 53091
// exit ;
53089: GO 53192
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53091: LD_ADDR_VAR 0 5
53095: PUSH
53096: LD_VAR 0 2
53100: PPUSH
53101: LD_VAR 0 1
53105: PPUSH
53106: CALL_OW 248
53110: PPUSH
53111: CALL_OW 450
53115: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: LD_VAR 0 4
53125: PPUSH
53126: LD_INT 1
53128: PPUSH
53129: CALL_OW 275
53133: PUSH
53134: LD_VAR 0 5
53138: PUSH
53139: LD_INT 1
53141: ARRAY
53142: GREATEREQUAL
53143: PUSH
53144: LD_VAR 0 4
53148: PPUSH
53149: LD_INT 2
53151: PPUSH
53152: CALL_OW 275
53156: PUSH
53157: LD_VAR 0 5
53161: PUSH
53162: LD_INT 2
53164: ARRAY
53165: GREATEREQUAL
53166: AND
53167: PUSH
53168: LD_VAR 0 4
53172: PPUSH
53173: LD_INT 3
53175: PPUSH
53176: CALL_OW 275
53180: PUSH
53181: LD_VAR 0 5
53185: PUSH
53186: LD_INT 3
53188: ARRAY
53189: GREATEREQUAL
53190: AND
53191: ST_TO_ADDR
// end ;
53192: LD_VAR 0 3
53196: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53197: LD_INT 0
53199: PPUSH
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
// result := false ;
53210: LD_ADDR_VAR 0 8
53214: PUSH
53215: LD_INT 0
53217: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53218: LD_VAR 0 5
53222: NOT
53223: PUSH
53224: LD_VAR 0 1
53228: NOT
53229: OR
53230: PUSH
53231: LD_VAR 0 2
53235: NOT
53236: OR
53237: PUSH
53238: LD_VAR 0 3
53242: NOT
53243: OR
53244: IFFALSE 53248
// exit ;
53246: GO 54062
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53248: LD_ADDR_VAR 0 14
53252: PUSH
53253: LD_VAR 0 1
53257: PPUSH
53258: LD_VAR 0 2
53262: PPUSH
53263: LD_VAR 0 3
53267: PPUSH
53268: LD_VAR 0 4
53272: PPUSH
53273: LD_VAR 0 5
53277: PUSH
53278: LD_INT 1
53280: ARRAY
53281: PPUSH
53282: CALL_OW 248
53286: PPUSH
53287: LD_INT 0
53289: PPUSH
53290: CALL 55295 0 6
53294: ST_TO_ADDR
// if not hexes then
53295: LD_VAR 0 14
53299: NOT
53300: IFFALSE 53304
// exit ;
53302: GO 54062
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53304: LD_ADDR_VAR 0 17
53308: PUSH
53309: LD_VAR 0 5
53313: PPUSH
53314: LD_INT 22
53316: PUSH
53317: LD_VAR 0 13
53321: PPUSH
53322: CALL_OW 255
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: LD_INT 30
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 30
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PPUSH
53363: CALL_OW 72
53367: ST_TO_ADDR
// for i = 1 to hexes do
53368: LD_ADDR_VAR 0 9
53372: PUSH
53373: DOUBLE
53374: LD_INT 1
53376: DEC
53377: ST_TO_ADDR
53378: LD_VAR 0 14
53382: PUSH
53383: FOR_TO
53384: IFFALSE 54060
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53386: LD_ADDR_VAR 0 13
53390: PUSH
53391: LD_VAR 0 14
53395: PUSH
53396: LD_VAR 0 9
53400: ARRAY
53401: PUSH
53402: LD_INT 1
53404: ARRAY
53405: PPUSH
53406: LD_VAR 0 14
53410: PUSH
53411: LD_VAR 0 9
53415: ARRAY
53416: PUSH
53417: LD_INT 2
53419: ARRAY
53420: PPUSH
53421: CALL_OW 428
53425: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53426: LD_VAR 0 14
53430: PUSH
53431: LD_VAR 0 9
53435: ARRAY
53436: PUSH
53437: LD_INT 1
53439: ARRAY
53440: PPUSH
53441: LD_VAR 0 14
53445: PUSH
53446: LD_VAR 0 9
53450: ARRAY
53451: PUSH
53452: LD_INT 2
53454: ARRAY
53455: PPUSH
53456: CALL_OW 351
53460: PUSH
53461: LD_VAR 0 14
53465: PUSH
53466: LD_VAR 0 9
53470: ARRAY
53471: PUSH
53472: LD_INT 1
53474: ARRAY
53475: PPUSH
53476: LD_VAR 0 14
53480: PUSH
53481: LD_VAR 0 9
53485: ARRAY
53486: PUSH
53487: LD_INT 2
53489: ARRAY
53490: PPUSH
53491: CALL_OW 488
53495: NOT
53496: OR
53497: PUSH
53498: LD_VAR 0 13
53502: PPUSH
53503: CALL_OW 247
53507: PUSH
53508: LD_INT 3
53510: EQUAL
53511: OR
53512: IFFALSE 53518
// exit ;
53514: POP
53515: POP
53516: GO 54062
// if not tmp then
53518: LD_VAR 0 13
53522: NOT
53523: IFFALSE 53527
// continue ;
53525: GO 53383
// result := true ;
53527: LD_ADDR_VAR 0 8
53531: PUSH
53532: LD_INT 1
53534: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53535: LD_VAR 0 6
53539: PUSH
53540: LD_VAR 0 13
53544: PPUSH
53545: CALL_OW 247
53549: PUSH
53550: LD_INT 2
53552: EQUAL
53553: AND
53554: PUSH
53555: LD_VAR 0 13
53559: PPUSH
53560: CALL_OW 263
53564: PUSH
53565: LD_INT 1
53567: EQUAL
53568: AND
53569: IFFALSE 53733
// begin if IsDrivenBy ( tmp ) then
53571: LD_VAR 0 13
53575: PPUSH
53576: CALL_OW 311
53580: IFFALSE 53584
// continue ;
53582: GO 53383
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53584: LD_VAR 0 6
53588: PPUSH
53589: LD_INT 3
53591: PUSH
53592: LD_INT 60
53594: PUSH
53595: EMPTY
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: PUSH
53605: LD_INT 55
53607: PUSH
53608: EMPTY
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PPUSH
53619: CALL_OW 72
53623: IFFALSE 53731
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53625: LD_ADDR_VAR 0 18
53629: PUSH
53630: LD_VAR 0 6
53634: PPUSH
53635: LD_INT 3
53637: PUSH
53638: LD_INT 60
53640: PUSH
53641: EMPTY
53642: LIST
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: LD_INT 55
53653: PUSH
53654: EMPTY
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PPUSH
53665: CALL_OW 72
53669: PUSH
53670: LD_INT 1
53672: ARRAY
53673: ST_TO_ADDR
// if IsInUnit ( driver ) then
53674: LD_VAR 0 18
53678: PPUSH
53679: CALL_OW 310
53683: IFFALSE 53694
// ComExit ( driver ) ;
53685: LD_VAR 0 18
53689: PPUSH
53690: CALL 79075 0 1
// AddComEnterUnit ( driver , tmp ) ;
53694: LD_VAR 0 18
53698: PPUSH
53699: LD_VAR 0 13
53703: PPUSH
53704: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53708: LD_VAR 0 18
53712: PPUSH
53713: LD_VAR 0 7
53717: PPUSH
53718: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53722: LD_VAR 0 18
53726: PPUSH
53727: CALL_OW 181
// end ; continue ;
53731: GO 53383
// end ; if not cleaners or not tmp in cleaners then
53733: LD_VAR 0 6
53737: NOT
53738: PUSH
53739: LD_VAR 0 13
53743: PUSH
53744: LD_VAR 0 6
53748: IN
53749: NOT
53750: OR
53751: IFFALSE 54058
// begin if dep then
53753: LD_VAR 0 17
53757: IFFALSE 53893
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53759: LD_ADDR_VAR 0 16
53763: PUSH
53764: LD_VAR 0 17
53768: PUSH
53769: LD_INT 1
53771: ARRAY
53772: PPUSH
53773: CALL_OW 250
53777: PPUSH
53778: LD_VAR 0 17
53782: PUSH
53783: LD_INT 1
53785: ARRAY
53786: PPUSH
53787: CALL_OW 254
53791: PPUSH
53792: LD_INT 5
53794: PPUSH
53795: CALL_OW 272
53799: PUSH
53800: LD_VAR 0 17
53804: PUSH
53805: LD_INT 1
53807: ARRAY
53808: PPUSH
53809: CALL_OW 251
53813: PPUSH
53814: LD_VAR 0 17
53818: PUSH
53819: LD_INT 1
53821: ARRAY
53822: PPUSH
53823: CALL_OW 254
53827: PPUSH
53828: LD_INT 5
53830: PPUSH
53831: CALL_OW 273
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53840: LD_VAR 0 16
53844: PUSH
53845: LD_INT 1
53847: ARRAY
53848: PPUSH
53849: LD_VAR 0 16
53853: PUSH
53854: LD_INT 2
53856: ARRAY
53857: PPUSH
53858: CALL_OW 488
53862: IFFALSE 53893
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53864: LD_VAR 0 13
53868: PPUSH
53869: LD_VAR 0 16
53873: PUSH
53874: LD_INT 1
53876: ARRAY
53877: PPUSH
53878: LD_VAR 0 16
53882: PUSH
53883: LD_INT 2
53885: ARRAY
53886: PPUSH
53887: CALL_OW 111
// continue ;
53891: GO 53383
// end ; end ; r := GetDir ( tmp ) ;
53893: LD_ADDR_VAR 0 15
53897: PUSH
53898: LD_VAR 0 13
53902: PPUSH
53903: CALL_OW 254
53907: ST_TO_ADDR
// if r = 5 then
53908: LD_VAR 0 15
53912: PUSH
53913: LD_INT 5
53915: EQUAL
53916: IFFALSE 53926
// r := 0 ;
53918: LD_ADDR_VAR 0 15
53922: PUSH
53923: LD_INT 0
53925: ST_TO_ADDR
// for j = r to 5 do
53926: LD_ADDR_VAR 0 10
53930: PUSH
53931: DOUBLE
53932: LD_VAR 0 15
53936: DEC
53937: ST_TO_ADDR
53938: LD_INT 5
53940: PUSH
53941: FOR_TO
53942: IFFALSE 54056
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53944: LD_ADDR_VAR 0 11
53948: PUSH
53949: LD_VAR 0 13
53953: PPUSH
53954: CALL_OW 250
53958: PPUSH
53959: LD_VAR 0 10
53963: PPUSH
53964: LD_INT 2
53966: PPUSH
53967: CALL_OW 272
53971: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53972: LD_ADDR_VAR 0 12
53976: PUSH
53977: LD_VAR 0 13
53981: PPUSH
53982: CALL_OW 251
53986: PPUSH
53987: LD_VAR 0 10
53991: PPUSH
53992: LD_INT 2
53994: PPUSH
53995: CALL_OW 273
53999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54000: LD_VAR 0 11
54004: PPUSH
54005: LD_VAR 0 12
54009: PPUSH
54010: CALL_OW 488
54014: PUSH
54015: LD_VAR 0 11
54019: PPUSH
54020: LD_VAR 0 12
54024: PPUSH
54025: CALL_OW 428
54029: NOT
54030: AND
54031: IFFALSE 54054
// begin ComMoveXY ( tmp , _x , _y ) ;
54033: LD_VAR 0 13
54037: PPUSH
54038: LD_VAR 0 11
54042: PPUSH
54043: LD_VAR 0 12
54047: PPUSH
54048: CALL_OW 111
// break ;
54052: GO 54056
// end ; end ;
54054: GO 53941
54056: POP
54057: POP
// end ; end ;
54058: GO 53383
54060: POP
54061: POP
// end ;
54062: LD_VAR 0 8
54066: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54067: LD_INT 0
54069: PPUSH
// result := true ;
54070: LD_ADDR_VAR 0 3
54074: PUSH
54075: LD_INT 1
54077: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54078: LD_VAR 0 2
54082: PUSH
54083: LD_INT 24
54085: DOUBLE
54086: EQUAL
54087: IFTRUE 54097
54089: LD_INT 33
54091: DOUBLE
54092: EQUAL
54093: IFTRUE 54097
54095: GO 54122
54097: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54098: LD_ADDR_VAR 0 3
54102: PUSH
54103: LD_INT 32
54105: PPUSH
54106: LD_VAR 0 1
54110: PPUSH
54111: CALL_OW 321
54115: PUSH
54116: LD_INT 2
54118: EQUAL
54119: ST_TO_ADDR
54120: GO 54438
54122: LD_INT 20
54124: DOUBLE
54125: EQUAL
54126: IFTRUE 54130
54128: GO 54155
54130: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54131: LD_ADDR_VAR 0 3
54135: PUSH
54136: LD_INT 6
54138: PPUSH
54139: LD_VAR 0 1
54143: PPUSH
54144: CALL_OW 321
54148: PUSH
54149: LD_INT 2
54151: EQUAL
54152: ST_TO_ADDR
54153: GO 54438
54155: LD_INT 22
54157: DOUBLE
54158: EQUAL
54159: IFTRUE 54169
54161: LD_INT 36
54163: DOUBLE
54164: EQUAL
54165: IFTRUE 54169
54167: GO 54194
54169: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54170: LD_ADDR_VAR 0 3
54174: PUSH
54175: LD_INT 15
54177: PPUSH
54178: LD_VAR 0 1
54182: PPUSH
54183: CALL_OW 321
54187: PUSH
54188: LD_INT 2
54190: EQUAL
54191: ST_TO_ADDR
54192: GO 54438
54194: LD_INT 30
54196: DOUBLE
54197: EQUAL
54198: IFTRUE 54202
54200: GO 54227
54202: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54203: LD_ADDR_VAR 0 3
54207: PUSH
54208: LD_INT 20
54210: PPUSH
54211: LD_VAR 0 1
54215: PPUSH
54216: CALL_OW 321
54220: PUSH
54221: LD_INT 2
54223: EQUAL
54224: ST_TO_ADDR
54225: GO 54438
54227: LD_INT 28
54229: DOUBLE
54230: EQUAL
54231: IFTRUE 54241
54233: LD_INT 21
54235: DOUBLE
54236: EQUAL
54237: IFTRUE 54241
54239: GO 54266
54241: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54242: LD_ADDR_VAR 0 3
54246: PUSH
54247: LD_INT 21
54249: PPUSH
54250: LD_VAR 0 1
54254: PPUSH
54255: CALL_OW 321
54259: PUSH
54260: LD_INT 2
54262: EQUAL
54263: ST_TO_ADDR
54264: GO 54438
54266: LD_INT 16
54268: DOUBLE
54269: EQUAL
54270: IFTRUE 54274
54272: GO 54299
54274: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54275: LD_ADDR_VAR 0 3
54279: PUSH
54280: LD_INT 84
54282: PPUSH
54283: LD_VAR 0 1
54287: PPUSH
54288: CALL_OW 321
54292: PUSH
54293: LD_INT 2
54295: EQUAL
54296: ST_TO_ADDR
54297: GO 54438
54299: LD_INT 19
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54313
54305: LD_INT 23
54307: DOUBLE
54308: EQUAL
54309: IFTRUE 54313
54311: GO 54338
54313: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54314: LD_ADDR_VAR 0 3
54318: PUSH
54319: LD_INT 83
54321: PPUSH
54322: LD_VAR 0 1
54326: PPUSH
54327: CALL_OW 321
54331: PUSH
54332: LD_INT 2
54334: EQUAL
54335: ST_TO_ADDR
54336: GO 54438
54338: LD_INT 17
54340: DOUBLE
54341: EQUAL
54342: IFTRUE 54346
54344: GO 54371
54346: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54347: LD_ADDR_VAR 0 3
54351: PUSH
54352: LD_INT 39
54354: PPUSH
54355: LD_VAR 0 1
54359: PPUSH
54360: CALL_OW 321
54364: PUSH
54365: LD_INT 2
54367: EQUAL
54368: ST_TO_ADDR
54369: GO 54438
54371: LD_INT 18
54373: DOUBLE
54374: EQUAL
54375: IFTRUE 54379
54377: GO 54404
54379: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54380: LD_ADDR_VAR 0 3
54384: PUSH
54385: LD_INT 40
54387: PPUSH
54388: LD_VAR 0 1
54392: PPUSH
54393: CALL_OW 321
54397: PUSH
54398: LD_INT 2
54400: EQUAL
54401: ST_TO_ADDR
54402: GO 54438
54404: LD_INT 27
54406: DOUBLE
54407: EQUAL
54408: IFTRUE 54412
54410: GO 54437
54412: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54413: LD_ADDR_VAR 0 3
54417: PUSH
54418: LD_INT 35
54420: PPUSH
54421: LD_VAR 0 1
54425: PPUSH
54426: CALL_OW 321
54430: PUSH
54431: LD_INT 2
54433: EQUAL
54434: ST_TO_ADDR
54435: GO 54438
54437: POP
// end ;
54438: LD_VAR 0 3
54442: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54443: LD_INT 0
54445: PPUSH
54446: PPUSH
54447: PPUSH
54448: PPUSH
54449: PPUSH
54450: PPUSH
54451: PPUSH
54452: PPUSH
54453: PPUSH
54454: PPUSH
54455: PPUSH
// result := false ;
54456: LD_ADDR_VAR 0 6
54460: PUSH
54461: LD_INT 0
54463: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54464: LD_VAR 0 1
54468: NOT
54469: PUSH
54470: LD_VAR 0 1
54474: PPUSH
54475: CALL_OW 266
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: IN
54490: NOT
54491: OR
54492: PUSH
54493: LD_VAR 0 2
54497: NOT
54498: OR
54499: PUSH
54500: LD_VAR 0 5
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 3
54516: PUSH
54517: LD_INT 4
54519: PUSH
54520: LD_INT 5
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: IN
54531: NOT
54532: OR
54533: PUSH
54534: LD_VAR 0 3
54538: PPUSH
54539: LD_VAR 0 4
54543: PPUSH
54544: CALL_OW 488
54548: NOT
54549: OR
54550: IFFALSE 54554
// exit ;
54552: GO 55290
// side := GetSide ( depot ) ;
54554: LD_ADDR_VAR 0 9
54558: PUSH
54559: LD_VAR 0 1
54563: PPUSH
54564: CALL_OW 255
54568: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54569: LD_VAR 0 9
54573: PPUSH
54574: LD_VAR 0 2
54578: PPUSH
54579: CALL 54067 0 2
54583: NOT
54584: IFFALSE 54588
// exit ;
54586: GO 55290
// pom := GetBase ( depot ) ;
54588: LD_ADDR_VAR 0 10
54592: PUSH
54593: LD_VAR 0 1
54597: PPUSH
54598: CALL_OW 274
54602: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54603: LD_ADDR_VAR 0 11
54607: PUSH
54608: LD_VAR 0 2
54612: PPUSH
54613: LD_VAR 0 1
54617: PPUSH
54618: CALL_OW 248
54622: PPUSH
54623: CALL_OW 450
54627: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54628: LD_VAR 0 10
54632: PPUSH
54633: LD_INT 1
54635: PPUSH
54636: CALL_OW 275
54640: PUSH
54641: LD_VAR 0 11
54645: PUSH
54646: LD_INT 1
54648: ARRAY
54649: GREATEREQUAL
54650: PUSH
54651: LD_VAR 0 10
54655: PPUSH
54656: LD_INT 2
54658: PPUSH
54659: CALL_OW 275
54663: PUSH
54664: LD_VAR 0 11
54668: PUSH
54669: LD_INT 2
54671: ARRAY
54672: GREATEREQUAL
54673: AND
54674: PUSH
54675: LD_VAR 0 10
54679: PPUSH
54680: LD_INT 3
54682: PPUSH
54683: CALL_OW 275
54687: PUSH
54688: LD_VAR 0 11
54692: PUSH
54693: LD_INT 3
54695: ARRAY
54696: GREATEREQUAL
54697: AND
54698: NOT
54699: IFFALSE 54703
// exit ;
54701: GO 55290
// if GetBType ( depot ) = b_depot then
54703: LD_VAR 0 1
54707: PPUSH
54708: CALL_OW 266
54712: PUSH
54713: LD_INT 0
54715: EQUAL
54716: IFFALSE 54728
// dist := 28 else
54718: LD_ADDR_VAR 0 14
54722: PUSH
54723: LD_INT 28
54725: ST_TO_ADDR
54726: GO 54736
// dist := 36 ;
54728: LD_ADDR_VAR 0 14
54732: PUSH
54733: LD_INT 36
54735: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54736: LD_VAR 0 1
54740: PPUSH
54741: LD_VAR 0 3
54745: PPUSH
54746: LD_VAR 0 4
54750: PPUSH
54751: CALL_OW 297
54755: PUSH
54756: LD_VAR 0 14
54760: GREATER
54761: IFFALSE 54765
// exit ;
54763: GO 55290
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54765: LD_ADDR_VAR 0 12
54769: PUSH
54770: LD_VAR 0 2
54774: PPUSH
54775: LD_VAR 0 3
54779: PPUSH
54780: LD_VAR 0 4
54784: PPUSH
54785: LD_VAR 0 5
54789: PPUSH
54790: LD_VAR 0 1
54794: PPUSH
54795: CALL_OW 248
54799: PPUSH
54800: LD_INT 0
54802: PPUSH
54803: CALL 55295 0 6
54807: ST_TO_ADDR
// if not hexes then
54808: LD_VAR 0 12
54812: NOT
54813: IFFALSE 54817
// exit ;
54815: GO 55290
// hex := GetHexInfo ( x , y ) ;
54817: LD_ADDR_VAR 0 15
54821: PUSH
54822: LD_VAR 0 3
54826: PPUSH
54827: LD_VAR 0 4
54831: PPUSH
54832: CALL_OW 546
54836: ST_TO_ADDR
// if hex [ 1 ] then
54837: LD_VAR 0 15
54841: PUSH
54842: LD_INT 1
54844: ARRAY
54845: IFFALSE 54849
// exit ;
54847: GO 55290
// height := hex [ 2 ] ;
54849: LD_ADDR_VAR 0 13
54853: PUSH
54854: LD_VAR 0 15
54858: PUSH
54859: LD_INT 2
54861: ARRAY
54862: ST_TO_ADDR
// for i = 1 to hexes do
54863: LD_ADDR_VAR 0 7
54867: PUSH
54868: DOUBLE
54869: LD_INT 1
54871: DEC
54872: ST_TO_ADDR
54873: LD_VAR 0 12
54877: PUSH
54878: FOR_TO
54879: IFFALSE 55209
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54881: LD_VAR 0 12
54885: PUSH
54886: LD_VAR 0 7
54890: ARRAY
54891: PUSH
54892: LD_INT 1
54894: ARRAY
54895: PPUSH
54896: LD_VAR 0 12
54900: PUSH
54901: LD_VAR 0 7
54905: ARRAY
54906: PUSH
54907: LD_INT 2
54909: ARRAY
54910: PPUSH
54911: CALL_OW 488
54915: NOT
54916: PUSH
54917: LD_VAR 0 12
54921: PUSH
54922: LD_VAR 0 7
54926: ARRAY
54927: PUSH
54928: LD_INT 1
54930: ARRAY
54931: PPUSH
54932: LD_VAR 0 12
54936: PUSH
54937: LD_VAR 0 7
54941: ARRAY
54942: PUSH
54943: LD_INT 2
54945: ARRAY
54946: PPUSH
54947: CALL_OW 428
54951: PUSH
54952: LD_INT 0
54954: GREATER
54955: OR
54956: PUSH
54957: LD_VAR 0 12
54961: PUSH
54962: LD_VAR 0 7
54966: ARRAY
54967: PUSH
54968: LD_INT 1
54970: ARRAY
54971: PPUSH
54972: LD_VAR 0 12
54976: PUSH
54977: LD_VAR 0 7
54981: ARRAY
54982: PUSH
54983: LD_INT 2
54985: ARRAY
54986: PPUSH
54987: CALL_OW 351
54991: OR
54992: IFFALSE 54998
// exit ;
54994: POP
54995: POP
54996: GO 55290
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54998: LD_ADDR_VAR 0 8
55002: PUSH
55003: LD_VAR 0 12
55007: PUSH
55008: LD_VAR 0 7
55012: ARRAY
55013: PUSH
55014: LD_INT 1
55016: ARRAY
55017: PPUSH
55018: LD_VAR 0 12
55022: PUSH
55023: LD_VAR 0 7
55027: ARRAY
55028: PUSH
55029: LD_INT 2
55031: ARRAY
55032: PPUSH
55033: CALL_OW 546
55037: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55038: LD_VAR 0 8
55042: PUSH
55043: LD_INT 1
55045: ARRAY
55046: PUSH
55047: LD_VAR 0 8
55051: PUSH
55052: LD_INT 2
55054: ARRAY
55055: PUSH
55056: LD_VAR 0 13
55060: PUSH
55061: LD_INT 2
55063: PLUS
55064: GREATER
55065: OR
55066: PUSH
55067: LD_VAR 0 8
55071: PUSH
55072: LD_INT 2
55074: ARRAY
55075: PUSH
55076: LD_VAR 0 13
55080: PUSH
55081: LD_INT 2
55083: MINUS
55084: LESS
55085: OR
55086: PUSH
55087: LD_VAR 0 8
55091: PUSH
55092: LD_INT 3
55094: ARRAY
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 8
55101: PUSH
55102: LD_INT 9
55104: PUSH
55105: LD_INT 10
55107: PUSH
55108: LD_INT 11
55110: PUSH
55111: LD_INT 12
55113: PUSH
55114: LD_INT 13
55116: PUSH
55117: LD_INT 16
55119: PUSH
55120: LD_INT 17
55122: PUSH
55123: LD_INT 18
55125: PUSH
55126: LD_INT 19
55128: PUSH
55129: LD_INT 20
55131: PUSH
55132: LD_INT 21
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: IN
55150: NOT
55151: OR
55152: PUSH
55153: LD_VAR 0 8
55157: PUSH
55158: LD_INT 5
55160: ARRAY
55161: NOT
55162: OR
55163: PUSH
55164: LD_VAR 0 8
55168: PUSH
55169: LD_INT 6
55171: ARRAY
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 7
55181: PUSH
55182: LD_INT 9
55184: PUSH
55185: LD_INT 10
55187: PUSH
55188: LD_INT 11
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: IN
55199: NOT
55200: OR
55201: IFFALSE 55207
// exit ;
55203: POP
55204: POP
55205: GO 55290
// end ;
55207: GO 54878
55209: POP
55210: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55211: LD_VAR 0 9
55215: PPUSH
55216: LD_VAR 0 3
55220: PPUSH
55221: LD_VAR 0 4
55225: PPUSH
55226: LD_INT 20
55228: PPUSH
55229: CALL 47242 0 4
55233: PUSH
55234: LD_INT 4
55236: ARRAY
55237: IFFALSE 55241
// exit ;
55239: GO 55290
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55241: LD_VAR 0 2
55245: PUSH
55246: LD_INT 29
55248: PUSH
55249: LD_INT 30
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: IN
55256: PUSH
55257: LD_VAR 0 3
55261: PPUSH
55262: LD_VAR 0 4
55266: PPUSH
55267: LD_VAR 0 9
55271: PPUSH
55272: CALL_OW 440
55276: NOT
55277: AND
55278: IFFALSE 55282
// exit ;
55280: GO 55290
// result := true ;
55282: LD_ADDR_VAR 0 6
55286: PUSH
55287: LD_INT 1
55289: ST_TO_ADDR
// end ;
55290: LD_VAR 0 6
55294: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55295: LD_INT 0
55297: PPUSH
55298: PPUSH
55299: PPUSH
55300: PPUSH
55301: PPUSH
55302: PPUSH
55303: PPUSH
55304: PPUSH
55305: PPUSH
55306: PPUSH
55307: PPUSH
55308: PPUSH
55309: PPUSH
55310: PPUSH
55311: PPUSH
55312: PPUSH
55313: PPUSH
55314: PPUSH
55315: PPUSH
55316: PPUSH
55317: PPUSH
55318: PPUSH
55319: PPUSH
55320: PPUSH
55321: PPUSH
55322: PPUSH
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
55328: PPUSH
55329: PPUSH
55330: PPUSH
55331: PPUSH
55332: PPUSH
55333: PPUSH
55334: PPUSH
55335: PPUSH
55336: PPUSH
55337: PPUSH
55338: PPUSH
55339: PPUSH
55340: PPUSH
55341: PPUSH
55342: PPUSH
55343: PPUSH
55344: PPUSH
55345: PPUSH
55346: PPUSH
55347: PPUSH
55348: PPUSH
55349: PPUSH
55350: PPUSH
55351: PPUSH
55352: PPUSH
55353: PPUSH
55354: PPUSH
// result = [ ] ;
55355: LD_ADDR_VAR 0 7
55359: PUSH
55360: EMPTY
55361: ST_TO_ADDR
// temp_list = [ ] ;
55362: LD_ADDR_VAR 0 9
55366: PUSH
55367: EMPTY
55368: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55369: LD_VAR 0 4
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: LD_INT 4
55388: PUSH
55389: LD_INT 5
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: IN
55400: NOT
55401: PUSH
55402: LD_VAR 0 1
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: IN
55417: PUSH
55418: LD_VAR 0 5
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 3
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: IN
55437: NOT
55438: AND
55439: OR
55440: IFFALSE 55444
// exit ;
55442: GO 73835
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55444: LD_VAR 0 1
55448: PUSH
55449: LD_INT 6
55451: PUSH
55452: LD_INT 7
55454: PUSH
55455: LD_INT 8
55457: PUSH
55458: LD_INT 13
55460: PUSH
55461: LD_INT 12
55463: PUSH
55464: LD_INT 15
55466: PUSH
55467: LD_INT 11
55469: PUSH
55470: LD_INT 14
55472: PUSH
55473: LD_INT 10
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: IN
55487: IFFALSE 55497
// btype = b_lab ;
55489: LD_ADDR_VAR 0 1
55493: PUSH
55494: LD_INT 6
55496: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55497: LD_VAR 0 6
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: IN
55516: NOT
55517: PUSH
55518: LD_VAR 0 1
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: LD_INT 6
55537: PUSH
55538: LD_INT 36
55540: PUSH
55541: LD_INT 4
55543: PUSH
55544: LD_INT 5
55546: PUSH
55547: LD_INT 31
55549: PUSH
55550: LD_INT 32
55552: PUSH
55553: LD_INT 33
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: IN
55569: NOT
55570: PUSH
55571: LD_VAR 0 6
55575: PUSH
55576: LD_INT 1
55578: EQUAL
55579: AND
55580: OR
55581: PUSH
55582: LD_VAR 0 1
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 3
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: IN
55597: NOT
55598: PUSH
55599: LD_VAR 0 6
55603: PUSH
55604: LD_INT 2
55606: EQUAL
55607: AND
55608: OR
55609: IFFALSE 55619
// mode = 0 ;
55611: LD_ADDR_VAR 0 6
55615: PUSH
55616: LD_INT 0
55618: ST_TO_ADDR
// case mode of 0 :
55619: LD_VAR 0 6
55623: PUSH
55624: LD_INT 0
55626: DOUBLE
55627: EQUAL
55628: IFTRUE 55632
55630: GO 67085
55632: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55633: LD_ADDR_VAR 0 11
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55826: LD_ADDR_VAR 0 12
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56022: LD_ADDR_VAR 0 13
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56221: LD_ADDR_VAR 0 14
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 2
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56417: LD_ADDR_VAR 0 15
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56610: LD_ADDR_VAR 0 16
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: LD_INT 3
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 3
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56803: LD_ADDR_VAR 0 17
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57033: LD_ADDR_VAR 0 18
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57263: LD_ADDR_VAR 0 19
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57493: LD_ADDR_VAR 0 20
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57723: LD_ADDR_VAR 0 21
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57953: LD_ADDR_VAR 0 22
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58183: LD_ADDR_VAR 0 23
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58463: LD_ADDR_VAR 0 24
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58739: LD_ADDR_VAR 0 25
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59013: LD_ADDR_VAR 0 26
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59289: LD_ADDR_VAR 0 27
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59569: LD_ADDR_VAR 0 28
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 2
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 3
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59851: LD_ADDR_VAR 0 29
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: LD_INT 3
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 3
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60130: LD_ADDR_VAR 0 30
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 3
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60408: LD_ADDR_VAR 0 31
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: LD_INT 3
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60686: LD_ADDR_VAR 0 32
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: LD_INT 2
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 3
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60964: LD_ADDR_VAR 0 33
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 2
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 2
61130: NEG
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 3
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61243: LD_ADDR_VAR 0 34
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: LD_INT 3
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61523: LD_ADDR_VAR 0 35
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61635: LD_ADDR_VAR 0 36
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61747: LD_ADDR_VAR 0 37
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61859: LD_ADDR_VAR 0 38
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61971: LD_ADDR_VAR 0 39
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62083: LD_ADDR_VAR 0 40
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62195: LD_ADDR_VAR 0 41
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 2
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: NEG
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: NEG
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 2
62373: NEG
62374: PUSH
62375: LD_INT 2
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 3
62469: NEG
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 3
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 3
62492: NEG
62493: PUSH
62494: LD_INT 2
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: NEG
62505: PUSH
62506: LD_INT 3
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62545: LD_ADDR_VAR 0 42
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: NEG
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: LD_INT 3
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 3
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: LD_INT 3
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: LD_INT 3
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: LD_INT 3
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: LD_INT 2
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 3
62842: NEG
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 3
62854: NEG
62855: PUSH
62856: LD_INT 3
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62895: LD_ADDR_VAR 0 43
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: NEG
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: LD_INT 3
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 3
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 2
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 3
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 3
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 3
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 3
63191: NEG
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 3
63202: NEG
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63243: LD_ADDR_VAR 0 44
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 2
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 2
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 2
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: NEG
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 2
63421: NEG
63422: PUSH
63423: LD_INT 2
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: NEG
63434: PUSH
63435: LD_INT 3
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 3
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 3
63476: PUSH
63477: LD_INT 2
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 3
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: NEG
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 3
63528: NEG
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 3
63540: NEG
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 3
63552: NEG
63553: PUSH
63554: LD_INT 3
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63593: LD_ADDR_VAR 0 45
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: NEG
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 2
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: LD_INT 2
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 2
63759: NEG
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: NEG
63784: PUSH
63785: LD_INT 3
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 3
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: LD_INT 3
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 3
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 3
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 3
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 3
63890: NEG
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: NEG
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63943: LD_ADDR_VAR 0 46
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: LD_INT 1
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: LD_INT 1
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 2
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: NEG
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: LD_INT 3
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 3
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 3
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: LD_INT 2
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 3
64239: NEG
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 3
64250: NEG
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64291: LD_ADDR_VAR 0 47
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: LD_INT 2
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: LD_INT 1
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64442: LD_ADDR_VAR 0 48
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64589: LD_ADDR_VAR 0 49
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 2
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64733: LD_ADDR_VAR 0 50
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 2
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64877: LD_ADDR_VAR 0 51
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 2
64989: NEG
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 2
65000: NEG
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65024: LD_ADDR_VAR 0 52
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 1
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: NEG
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65175: LD_ADDR_VAR 0 53
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: LD_INT 1
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 1
65256: NEG
65257: PUSH
65258: LD_INT 2
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: LD_INT 2
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 2
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 2
65310: PUSH
65311: LD_INT 2
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: LD_INT 2
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: NEG
65341: PUSH
65342: LD_INT 1
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 2
65351: NEG
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 2
65374: NEG
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65405: LD_ADDR_VAR 0 54
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 1
65463: NEG
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: NEG
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: LD_INT 2
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: LD_INT 0
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: LD_INT 1
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 2
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 2
65581: NEG
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 2
65592: NEG
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 2
65604: NEG
65605: PUSH
65606: LD_INT 2
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65635: LD_ADDR_VAR 0 55
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: LD_INT 1
65655: NEG
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 1
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 1
65693: NEG
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: LD_INT 2
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: LD_INT 2
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: LD_INT 2
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: LD_INT 2
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 2
65834: NEG
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65865: LD_ADDR_VAR 0 56
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 1
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: NEG
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: LD_INT 2
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 2
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: LD_INT 2
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 2
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 2
66041: NEG
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 2
66052: NEG
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66095: LD_ADDR_VAR 0 57
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 1
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: NEG
66177: PUSH
66178: LD_INT 2
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: LD_INT 2
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 2
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 2
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 2
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: LD_INT 2
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 2
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 2
66271: NEG
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 2
66282: NEG
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: LD_INT 2
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66325: LD_ADDR_VAR 0 58
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: PUSH
66364: LD_INT 1
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: LD_INT 0
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 1
66394: NEG
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: NEG
66407: PUSH
66408: LD_INT 2
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 2
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_INT 2
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 2
66501: NEG
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 2
66512: NEG
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 2
66524: NEG
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66555: LD_ADDR_VAR 0 59
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66643: LD_ADDR_VAR 0 60
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66731: LD_ADDR_VAR 0 61
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: NEG
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66819: LD_ADDR_VAR 0 62
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 1
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66907: LD_ADDR_VAR 0 63
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: LD_INT 0
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: LD_INT 1
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66995: LD_ADDR_VAR 0 64
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 1
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: ST_TO_ADDR
// end ; 1 :
67083: GO 72980
67085: LD_INT 1
67087: DOUBLE
67088: EQUAL
67089: IFTRUE 67093
67091: GO 69716
67093: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67094: LD_ADDR_VAR 0 11
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: LD_INT 3
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67138: LD_ADDR_VAR 0 12
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 3
67156: PUSH
67157: LD_INT 0
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67179: LD_ADDR_VAR 0 13
67183: PUSH
67184: LD_INT 3
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 3
67196: PUSH
67197: LD_INT 3
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: LD_INT 3
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67219: LD_ADDR_VAR 0 14
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: LD_INT 3
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: LD_INT 3
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 1
67246: NEG
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67260: LD_ADDR_VAR 0 15
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 3
67278: NEG
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: LD_INT 1
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67304: LD_ADDR_VAR 0 16
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: LD_INT 3
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: NEG
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67350: LD_ADDR_VAR 0 17
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: LD_INT 3
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 3
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: LD_INT 2
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67394: LD_ADDR_VAR 0 18
67398: PUSH
67399: LD_INT 2
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 3
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: LIST
67434: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67435: LD_ADDR_VAR 0 19
67439: PUSH
67440: LD_INT 3
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: LD_INT 3
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: LD_INT 3
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67475: LD_ADDR_VAR 0 20
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: LD_INT 3
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: LD_INT 3
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: LD_INT 2
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: LIST
67515: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67516: LD_ADDR_VAR 0 21
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 3
67534: NEG
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: LD_INT 1
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: LIST
67559: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67560: LD_ADDR_VAR 0 22
67564: PUSH
67565: LD_INT 2
67567: NEG
67568: PUSH
67569: LD_INT 3
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: LD_INT 2
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 3
67591: NEG
67592: PUSH
67593: LD_INT 3
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67606: LD_ADDR_VAR 0 23
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 4
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: LD_INT 3
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67650: LD_ADDR_VAR 0 24
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 4
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67691: LD_ADDR_VAR 0 25
67695: PUSH
67696: LD_INT 3
67698: PUSH
67699: LD_INT 3
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 4
67708: PUSH
67709: LD_INT 3
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 3
67718: PUSH
67719: LD_INT 4
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: LIST
67730: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67731: LD_ADDR_VAR 0 26
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: LD_INT 4
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: LD_INT 3
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: LIST
67771: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67772: LD_ADDR_VAR 0 27
67776: PUSH
67777: LD_INT 3
67779: NEG
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 3
67790: NEG
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 4
67801: NEG
67802: PUSH
67803: LD_INT 1
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: LIST
67815: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67816: LD_ADDR_VAR 0 28
67820: PUSH
67821: LD_INT 3
67823: NEG
67824: PUSH
67825: LD_INT 3
67827: NEG
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 3
67835: NEG
67836: PUSH
67837: LD_INT 4
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 4
67847: NEG
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: LIST
67861: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67862: LD_ADDR_VAR 0 29
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: LD_INT 3
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 0
67881: PUSH
67882: LD_INT 3
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 1
67892: PUSH
67893: LD_INT 2
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: NEG
67904: PUSH
67905: LD_INT 4
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: LD_INT 4
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 1
67937: NEG
67938: PUSH
67939: LD_INT 5
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: LD_INT 5
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: LD_INT 4
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: LD_INT 6
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: LD_INT 6
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 1
67994: PUSH
67995: LD_INT 5
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68017: LD_ADDR_VAR 0 30
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: LD_INT 1
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: LD_INT 1
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 4
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 4
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 4
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 5
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 5
68107: PUSH
68108: LD_INT 1
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 5
68117: PUSH
68118: LD_INT 1
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 6
68128: PUSH
68129: LD_INT 0
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 6
68138: PUSH
68139: LD_INT 1
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68160: LD_ADDR_VAR 0 31
68164: PUSH
68165: LD_INT 3
68167: PUSH
68168: LD_INT 2
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 3
68177: PUSH
68178: LD_INT 3
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 2
68187: PUSH
68188: LD_INT 3
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 4
68197: PUSH
68198: LD_INT 3
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 4
68207: PUSH
68208: LD_INT 4
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: LD_INT 4
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 5
68227: PUSH
68228: LD_INT 4
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 5
68237: PUSH
68238: LD_INT 5
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 4
68247: PUSH
68248: LD_INT 5
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 6
68257: PUSH
68258: LD_INT 5
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 6
68267: PUSH
68268: LD_INT 6
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 5
68277: PUSH
68278: LD_INT 6
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68299: LD_ADDR_VAR 0 32
68303: PUSH
68304: LD_INT 1
68306: PUSH
68307: LD_INT 3
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: LD_INT 3
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: LD_INT 2
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: PUSH
68338: LD_INT 4
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: LD_INT 4
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 1
68368: PUSH
68369: LD_INT 5
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 0
68378: PUSH
68379: LD_INT 5
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 1
68388: NEG
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: LD_INT 6
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: LD_INT 6
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 1
68419: NEG
68420: PUSH
68421: LD_INT 5
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68442: LD_ADDR_VAR 0 33
68446: PUSH
68447: LD_INT 2
68449: NEG
68450: PUSH
68451: LD_INT 1
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 3
68460: NEG
68461: PUSH
68462: LD_INT 0
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 3
68471: NEG
68472: PUSH
68473: LD_INT 1
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 3
68483: NEG
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 4
68494: NEG
68495: PUSH
68496: LD_INT 0
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 4
68505: NEG
68506: PUSH
68507: LD_INT 1
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 4
68517: NEG
68518: PUSH
68519: LD_INT 1
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 5
68528: NEG
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 5
68539: NEG
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 5
68551: NEG
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 6
68562: NEG
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 6
68573: NEG
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68597: LD_ADDR_VAR 0 34
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: LD_INT 3
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 3
68616: NEG
68617: PUSH
68618: LD_INT 2
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 3
68628: NEG
68629: PUSH
68630: LD_INT 3
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 3
68640: NEG
68641: PUSH
68642: LD_INT 4
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 4
68652: NEG
68653: PUSH
68654: LD_INT 3
68656: NEG
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 4
68664: NEG
68665: PUSH
68666: LD_INT 4
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 4
68676: NEG
68677: PUSH
68678: LD_INT 5
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 5
68688: NEG
68689: PUSH
68690: LD_INT 4
68692: NEG
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 5
68700: NEG
68701: PUSH
68702: LD_INT 5
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 5
68712: NEG
68713: PUSH
68714: LD_INT 6
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 6
68724: NEG
68725: PUSH
68726: LD_INT 5
68728: NEG
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 6
68736: NEG
68737: PUSH
68738: LD_INT 6
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68760: LD_ADDR_VAR 0 41
68764: PUSH
68765: LD_INT 0
68767: PUSH
68768: LD_INT 2
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 1
68778: NEG
68779: PUSH
68780: LD_INT 3
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 1
68790: PUSH
68791: LD_INT 2
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: LIST
68803: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68804: LD_ADDR_VAR 0 42
68808: PUSH
68809: LD_INT 2
68811: PUSH
68812: LD_INT 0
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 2
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 3
68832: PUSH
68833: LD_INT 1
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: LIST
68844: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68845: LD_ADDR_VAR 0 43
68849: PUSH
68850: LD_INT 2
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 3
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 2
68872: PUSH
68873: LD_INT 3
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68885: LD_ADDR_VAR 0 44
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: LD_INT 2
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 1
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: LD_INT 2
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: LIST
68925: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68926: LD_ADDR_VAR 0 45
68930: PUSH
68931: LD_INT 2
68933: NEG
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 2
68944: NEG
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: LD_INT 1
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68970: LD_ADDR_VAR 0 46
68974: PUSH
68975: LD_INT 2
68977: NEG
68978: PUSH
68979: LD_INT 2
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: LD_INT 3
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 3
69001: NEG
69002: PUSH
69003: LD_INT 2
69005: NEG
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: LIST
69015: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69016: LD_ADDR_VAR 0 47
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: LD_INT 3
69027: NEG
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 1
69035: NEG
69036: PUSH
69037: LD_INT 3
69039: NEG
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69049: LD_ADDR_VAR 0 48
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: LD_INT 2
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 2
69067: PUSH
69068: LD_INT 1
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69080: LD_ADDR_VAR 0 49
69084: PUSH
69085: LD_INT 3
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: LD_INT 2
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69109: LD_ADDR_VAR 0 50
69113: PUSH
69114: LD_INT 2
69116: PUSH
69117: LD_INT 3
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 1
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69138: LD_ADDR_VAR 0 51
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: LD_INT 2
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 2
69156: NEG
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69169: LD_ADDR_VAR 0 52
69173: PUSH
69174: LD_INT 3
69176: NEG
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 3
69188: NEG
69189: PUSH
69190: LD_INT 2
69192: NEG
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69202: LD_ADDR_VAR 0 53
69206: PUSH
69207: LD_INT 1
69209: NEG
69210: PUSH
69211: LD_INT 3
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 0
69221: PUSH
69222: LD_INT 3
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 1
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: LIST
69245: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69246: LD_ADDR_VAR 0 54
69250: PUSH
69251: LD_INT 2
69253: PUSH
69254: LD_INT 1
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 3
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 3
69274: PUSH
69275: LD_INT 1
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69287: LD_ADDR_VAR 0 55
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: LD_INT 2
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 3
69304: PUSH
69305: LD_INT 3
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 2
69314: PUSH
69315: LD_INT 3
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: LIST
69326: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69327: LD_ADDR_VAR 0 56
69331: PUSH
69332: LD_INT 1
69334: PUSH
69335: LD_INT 3
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 0
69344: PUSH
69345: LD_INT 3
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: LD_INT 2
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: LIST
69367: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69368: LD_ADDR_VAR 0 57
69372: PUSH
69373: LD_INT 2
69375: NEG
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 3
69386: NEG
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 3
69397: NEG
69398: PUSH
69399: LD_INT 1
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69412: LD_ADDR_VAR 0 58
69416: PUSH
69417: LD_INT 2
69419: NEG
69420: PUSH
69421: LD_INT 3
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: LD_INT 2
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 3
69443: NEG
69444: PUSH
69445: LD_INT 3
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: LIST
69457: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69458: LD_ADDR_VAR 0 59
69462: PUSH
69463: LD_INT 1
69465: NEG
69466: PUSH
69467: LD_INT 2
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: LIST
69501: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69502: LD_ADDR_VAR 0 60
69506: PUSH
69507: LD_INT 1
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 2
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 2
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69543: LD_ADDR_VAR 0 61
69547: PUSH
69548: LD_INT 2
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 2
69560: PUSH
69561: LD_INT 2
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 1
69570: PUSH
69571: LD_INT 2
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: LIST
69582: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69583: LD_ADDR_VAR 0 62
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 2
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: LD_INT 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69624: LD_ADDR_VAR 0 63
69628: PUSH
69629: LD_INT 1
69631: NEG
69632: PUSH
69633: LD_INT 1
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 2
69642: NEG
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 2
69653: NEG
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: LIST
69667: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69668: LD_ADDR_VAR 0 64
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: LD_INT 2
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 2
69687: NEG
69688: PUSH
69689: LD_INT 1
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 2
69699: NEG
69700: PUSH
69701: LD_INT 2
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: LIST
69713: ST_TO_ADDR
// end ; 2 :
69714: GO 72980
69716: LD_INT 2
69718: DOUBLE
69719: EQUAL
69720: IFTRUE 69724
69722: GO 72979
69724: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69725: LD_ADDR_VAR 0 29
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 4
69742: PUSH
69743: LD_INT 1
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 5
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 5
69763: PUSH
69764: LD_INT 1
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 4
69773: PUSH
69774: LD_INT 1
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 3
69783: PUSH
69784: LD_INT 0
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 3
69793: PUSH
69794: LD_INT 1
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 3
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 5
69815: PUSH
69816: LD_INT 2
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: LD_INT 3
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 4
69845: PUSH
69846: LD_INT 3
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 4
69855: PUSH
69856: LD_INT 4
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: LD_INT 4
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: PUSH
69876: LD_INT 3
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 2
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 4
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: LD_INT 4
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 0
69915: PUSH
69916: LD_INT 4
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: LD_INT 3
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: LD_INT 4
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 1
69945: PUSH
69946: LD_INT 5
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: LD_INT 5
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: PUSH
69967: LD_INT 4
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 1
69976: NEG
69977: PUSH
69978: LD_INT 3
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 2
69987: PUSH
69988: LD_INT 5
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 2
69997: NEG
69998: PUSH
69999: LD_INT 3
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: LD_INT 0
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 3
70019: NEG
70020: PUSH
70021: LD_INT 1
70023: NEG
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 2
70031: NEG
70032: PUSH
70033: LD_INT 0
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 3
70053: NEG
70054: PUSH
70055: LD_INT 1
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 4
70064: NEG
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 4
70075: NEG
70076: PUSH
70077: LD_INT 1
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 4
70087: NEG
70088: PUSH
70089: LD_INT 2
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 2
70099: NEG
70100: PUSH
70101: LD_INT 2
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 4
70110: NEG
70111: PUSH
70112: LD_INT 4
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 4
70122: NEG
70123: PUSH
70124: LD_INT 5
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 3
70134: NEG
70135: PUSH
70136: LD_INT 4
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 3
70146: NEG
70147: PUSH
70148: LD_INT 3
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 4
70158: NEG
70159: PUSH
70160: LD_INT 3
70162: NEG
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 5
70170: NEG
70171: PUSH
70172: LD_INT 4
70174: NEG
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 5
70182: NEG
70183: PUSH
70184: LD_INT 5
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 3
70194: NEG
70195: PUSH
70196: LD_INT 5
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 5
70206: NEG
70207: PUSH
70208: LD_INT 3
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70263: LD_ADDR_VAR 0 30
70267: PUSH
70268: LD_INT 4
70270: PUSH
70271: LD_INT 4
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 4
70280: PUSH
70281: LD_INT 3
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 5
70290: PUSH
70291: LD_INT 4
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 5
70300: PUSH
70301: LD_INT 5
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 4
70310: PUSH
70311: LD_INT 5
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: PUSH
70321: LD_INT 4
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 3
70330: PUSH
70331: LD_INT 3
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 5
70340: PUSH
70341: LD_INT 3
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 3
70350: PUSH
70351: LD_INT 5
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: LD_INT 3
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: LD_INT 2
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 1
70380: PUSH
70381: LD_INT 3
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 1
70390: PUSH
70391: LD_INT 4
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: LD_INT 4
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: NEG
70411: PUSH
70412: LD_INT 3
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 1
70421: NEG
70422: PUSH
70423: LD_INT 2
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 2
70432: PUSH
70433: LD_INT 4
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 2
70442: NEG
70443: PUSH
70444: LD_INT 2
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: NEG
70454: PUSH
70455: LD_INT 0
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 4
70464: NEG
70465: PUSH
70466: LD_INT 1
70468: NEG
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 3
70476: NEG
70477: PUSH
70478: LD_INT 0
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 3
70487: NEG
70488: PUSH
70489: LD_INT 1
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 4
70498: NEG
70499: PUSH
70500: LD_INT 1
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 5
70509: NEG
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 5
70520: NEG
70521: PUSH
70522: LD_INT 1
70524: NEG
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 5
70532: NEG
70533: PUSH
70534: LD_INT 2
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 3
70544: NEG
70545: PUSH
70546: LD_INT 2
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 3
70555: NEG
70556: PUSH
70557: LD_INT 3
70559: NEG
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 3
70567: NEG
70568: PUSH
70569: LD_INT 4
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 2
70579: NEG
70580: PUSH
70581: LD_INT 3
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 2
70591: NEG
70592: PUSH
70593: LD_INT 2
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 3
70603: NEG
70604: PUSH
70605: LD_INT 2
70607: NEG
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 4
70615: NEG
70616: PUSH
70617: LD_INT 3
70619: NEG
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 4
70627: NEG
70628: PUSH
70629: LD_INT 4
70631: NEG
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 2
70639: NEG
70640: PUSH
70641: LD_INT 4
70643: NEG
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 4
70651: NEG
70652: PUSH
70653: LD_INT 2
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: LD_INT 4
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 0
70674: PUSH
70675: LD_INT 5
70677: NEG
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: LD_INT 4
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 1
70696: PUSH
70697: LD_INT 3
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: LD_INT 3
70710: NEG
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 1
70718: NEG
70719: PUSH
70720: LD_INT 4
70722: NEG
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 1
70730: NEG
70731: PUSH
70732: LD_INT 5
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 2
70742: PUSH
70743: LD_INT 3
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 2
70753: NEG
70754: PUSH
70755: LD_INT 5
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70810: LD_ADDR_VAR 0 31
70814: PUSH
70815: LD_INT 0
70817: PUSH
70818: LD_INT 4
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 0
70827: PUSH
70828: LD_INT 3
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 1
70837: PUSH
70838: LD_INT 4
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 1
70847: PUSH
70848: LD_INT 5
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: LD_INT 5
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: NEG
70868: PUSH
70869: LD_INT 4
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 1
70878: NEG
70879: PUSH
70880: LD_INT 3
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 2
70889: PUSH
70890: LD_INT 5
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 2
70899: NEG
70900: PUSH
70901: LD_INT 3
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 3
70910: NEG
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 3
70921: NEG
70922: PUSH
70923: LD_INT 1
70925: NEG
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 2
70933: NEG
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 2
70944: NEG
70945: PUSH
70946: LD_INT 1
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 3
70955: NEG
70956: PUSH
70957: LD_INT 1
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 4
70966: NEG
70967: PUSH
70968: LD_INT 0
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 4
70977: NEG
70978: PUSH
70979: LD_INT 1
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 4
70989: NEG
70990: PUSH
70991: LD_INT 2
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 2
71001: NEG
71002: PUSH
71003: LD_INT 2
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 4
71012: NEG
71013: PUSH
71014: LD_INT 4
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 4
71024: NEG
71025: PUSH
71026: LD_INT 5
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 3
71036: NEG
71037: PUSH
71038: LD_INT 4
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 3
71048: NEG
71049: PUSH
71050: LD_INT 3
71052: NEG
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 4
71060: NEG
71061: PUSH
71062: LD_INT 3
71064: NEG
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 5
71072: NEG
71073: PUSH
71074: LD_INT 4
71076: NEG
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 5
71084: NEG
71085: PUSH
71086: LD_INT 5
71088: NEG
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: LD_INT 5
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 5
71108: NEG
71109: PUSH
71110: LD_INT 3
71112: NEG
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 0
71120: PUSH
71121: LD_INT 3
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 0
71131: PUSH
71132: LD_INT 4
71134: NEG
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 1
71142: PUSH
71143: LD_INT 3
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 1
71153: PUSH
71154: LD_INT 2
71156: NEG
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: LD_INT 2
71167: NEG
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 1
71175: NEG
71176: PUSH
71177: LD_INT 3
71179: NEG
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 1
71187: NEG
71188: PUSH
71189: LD_INT 4
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 2
71199: PUSH
71200: LD_INT 2
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 2
71210: NEG
71211: PUSH
71212: LD_INT 4
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 4
71222: PUSH
71223: LD_INT 0
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: LD_INT 1
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 5
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 5
71253: PUSH
71254: LD_INT 1
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 4
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 3
71273: PUSH
71274: LD_INT 0
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 3
71283: PUSH
71284: LD_INT 1
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 3
71294: PUSH
71295: LD_INT 2
71297: NEG
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 5
71305: PUSH
71306: LD_INT 2
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71360: LD_ADDR_VAR 0 32
71364: PUSH
71365: LD_INT 4
71367: NEG
71368: PUSH
71369: LD_INT 0
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 4
71378: NEG
71379: PUSH
71380: LD_INT 1
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 3
71390: NEG
71391: PUSH
71392: LD_INT 0
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 3
71401: NEG
71402: PUSH
71403: LD_INT 1
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 4
71412: NEG
71413: PUSH
71414: LD_INT 1
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 5
71423: NEG
71424: PUSH
71425: LD_INT 0
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 5
71434: NEG
71435: PUSH
71436: LD_INT 1
71438: NEG
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 5
71446: NEG
71447: PUSH
71448: LD_INT 2
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 3
71458: NEG
71459: PUSH
71460: LD_INT 2
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 3
71469: NEG
71470: PUSH
71471: LD_INT 3
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 3
71481: NEG
71482: PUSH
71483: LD_INT 4
71485: NEG
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 2
71493: NEG
71494: PUSH
71495: LD_INT 3
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 2
71505: NEG
71506: PUSH
71507: LD_INT 2
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 3
71517: NEG
71518: PUSH
71519: LD_INT 2
71521: NEG
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 4
71529: NEG
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 4
71541: NEG
71542: PUSH
71543: LD_INT 4
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 2
71553: NEG
71554: PUSH
71555: LD_INT 4
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 4
71565: NEG
71566: PUSH
71567: LD_INT 2
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 0
71577: PUSH
71578: LD_INT 4
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 0
71588: PUSH
71589: LD_INT 5
71591: NEG
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 1
71599: PUSH
71600: LD_INT 4
71602: NEG
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 1
71610: PUSH
71611: LD_INT 3
71613: NEG
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 0
71621: PUSH
71622: LD_INT 3
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 1
71632: NEG
71633: PUSH
71634: LD_INT 4
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 1
71644: NEG
71645: PUSH
71646: LD_INT 5
71648: NEG
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 2
71656: PUSH
71657: LD_INT 3
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 2
71667: NEG
71668: PUSH
71669: LD_INT 5
71671: NEG
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 3
71679: PUSH
71680: LD_INT 0
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 3
71689: PUSH
71690: LD_INT 1
71692: NEG
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 4
71700: PUSH
71701: LD_INT 0
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 4
71710: PUSH
71711: LD_INT 1
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 3
71720: PUSH
71721: LD_INT 1
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 2
71730: PUSH
71731: LD_INT 0
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 2
71740: PUSH
71741: LD_INT 1
71743: NEG
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 2
71751: PUSH
71752: LD_INT 2
71754: NEG
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 4
71762: PUSH
71763: LD_INT 2
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 4
71772: PUSH
71773: LD_INT 4
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 4
71782: PUSH
71783: LD_INT 3
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 5
71792: PUSH
71793: LD_INT 4
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 5
71802: PUSH
71803: LD_INT 5
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 4
71812: PUSH
71813: LD_INT 5
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 3
71822: PUSH
71823: LD_INT 4
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 3
71832: PUSH
71833: LD_INT 3
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 5
71842: PUSH
71843: LD_INT 3
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 3
71852: PUSH
71853: LD_INT 5
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71907: LD_ADDR_VAR 0 33
71911: PUSH
71912: LD_INT 4
71914: NEG
71915: PUSH
71916: LD_INT 4
71918: NEG
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 4
71926: NEG
71927: PUSH
71928: LD_INT 5
71930: NEG
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 3
71938: NEG
71939: PUSH
71940: LD_INT 4
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 3
71950: NEG
71951: PUSH
71952: LD_INT 3
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 4
71962: NEG
71963: PUSH
71964: LD_INT 3
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 5
71974: NEG
71975: PUSH
71976: LD_INT 4
71978: NEG
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 5
71986: NEG
71987: PUSH
71988: LD_INT 5
71990: NEG
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 3
71998: NEG
71999: PUSH
72000: LD_INT 5
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 5
72010: NEG
72011: PUSH
72012: LD_INT 3
72014: NEG
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 0
72022: PUSH
72023: LD_INT 3
72025: NEG
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 0
72033: PUSH
72034: LD_INT 4
72036: NEG
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 1
72044: PUSH
72045: LD_INT 3
72047: NEG
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 1
72055: PUSH
72056: LD_INT 2
72058: NEG
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 0
72066: PUSH
72067: LD_INT 2
72069: NEG
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 1
72077: NEG
72078: PUSH
72079: LD_INT 3
72081: NEG
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 1
72089: NEG
72090: PUSH
72091: LD_INT 4
72093: NEG
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 2
72101: PUSH
72102: LD_INT 2
72104: NEG
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 2
72112: NEG
72113: PUSH
72114: LD_INT 4
72116: NEG
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 4
72124: PUSH
72125: LD_INT 0
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 4
72134: PUSH
72135: LD_INT 1
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 5
72145: PUSH
72146: LD_INT 0
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 5
72155: PUSH
72156: LD_INT 1
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 4
72165: PUSH
72166: LD_INT 1
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 3
72175: PUSH
72176: LD_INT 0
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 3
72185: PUSH
72186: LD_INT 1
72188: NEG
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 3
72196: PUSH
72197: LD_INT 2
72199: NEG
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 5
72207: PUSH
72208: LD_INT 2
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 3
72217: PUSH
72218: LD_INT 3
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 3
72227: PUSH
72228: LD_INT 2
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 4
72237: PUSH
72238: LD_INT 3
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 4
72247: PUSH
72248: LD_INT 4
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 3
72257: PUSH
72258: LD_INT 4
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 2
72267: PUSH
72268: LD_INT 3
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 2
72277: PUSH
72278: LD_INT 2
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 4
72287: PUSH
72288: LD_INT 2
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 2
72297: PUSH
72298: LD_INT 4
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 0
72307: PUSH
72308: LD_INT 4
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 0
72317: PUSH
72318: LD_INT 3
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 1
72327: PUSH
72328: LD_INT 4
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 1
72337: PUSH
72338: LD_INT 5
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 0
72347: PUSH
72348: LD_INT 5
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 1
72357: NEG
72358: PUSH
72359: LD_INT 4
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 1
72368: NEG
72369: PUSH
72370: LD_INT 3
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 2
72379: PUSH
72380: LD_INT 5
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 2
72389: NEG
72390: PUSH
72391: LD_INT 3
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72445: LD_ADDR_VAR 0 34
72449: PUSH
72450: LD_INT 0
72452: PUSH
72453: LD_INT 4
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 0
72463: PUSH
72464: LD_INT 5
72466: NEG
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 1
72474: PUSH
72475: LD_INT 4
72477: NEG
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 1
72485: PUSH
72486: LD_INT 3
72488: NEG
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: LD_INT 3
72499: NEG
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 1
72507: NEG
72508: PUSH
72509: LD_INT 4
72511: NEG
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 1
72519: NEG
72520: PUSH
72521: LD_INT 5
72523: NEG
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 2
72531: PUSH
72532: LD_INT 3
72534: NEG
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 2
72542: NEG
72543: PUSH
72544: LD_INT 5
72546: NEG
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 3
72554: PUSH
72555: LD_INT 0
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 3
72564: PUSH
72565: LD_INT 1
72567: NEG
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 4
72575: PUSH
72576: LD_INT 0
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 4
72585: PUSH
72586: LD_INT 1
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 3
72595: PUSH
72596: LD_INT 1
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 2
72605: PUSH
72606: LD_INT 0
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 2
72615: PUSH
72616: LD_INT 1
72618: NEG
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 2
72626: PUSH
72627: LD_INT 2
72629: NEG
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 4
72637: PUSH
72638: LD_INT 2
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 4
72647: PUSH
72648: LD_INT 4
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 4
72657: PUSH
72658: LD_INT 3
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 5
72667: PUSH
72668: LD_INT 4
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 5
72677: PUSH
72678: LD_INT 5
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 4
72687: PUSH
72688: LD_INT 5
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 3
72697: PUSH
72698: LD_INT 4
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 3
72707: PUSH
72708: LD_INT 3
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PUSH
72715: LD_INT 5
72717: PUSH
72718: LD_INT 3
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 3
72727: PUSH
72728: LD_INT 5
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 0
72737: PUSH
72738: LD_INT 3
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: LD_INT 2
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 1
72757: PUSH
72758: LD_INT 3
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 1
72767: PUSH
72768: LD_INT 4
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: LD_INT 0
72777: PUSH
72778: LD_INT 4
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 1
72787: NEG
72788: PUSH
72789: LD_INT 3
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 1
72798: NEG
72799: PUSH
72800: LD_INT 2
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 2
72809: PUSH
72810: LD_INT 4
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 2
72819: NEG
72820: PUSH
72821: LD_INT 2
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 4
72830: NEG
72831: PUSH
72832: LD_INT 0
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 4
72841: NEG
72842: PUSH
72843: LD_INT 1
72845: NEG
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 3
72853: NEG
72854: PUSH
72855: LD_INT 0
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 3
72864: NEG
72865: PUSH
72866: LD_INT 1
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: LD_INT 4
72875: NEG
72876: PUSH
72877: LD_INT 1
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: PUSH
72884: LD_INT 5
72886: NEG
72887: PUSH
72888: LD_INT 0
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 5
72897: NEG
72898: PUSH
72899: LD_INT 1
72901: NEG
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 5
72909: NEG
72910: PUSH
72911: LD_INT 2
72913: NEG
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 3
72921: NEG
72922: PUSH
72923: LD_INT 2
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: ST_TO_ADDR
// end ; end ;
72977: GO 72980
72979: POP
// case btype of b_depot , b_warehouse :
72980: LD_VAR 0 1
72984: PUSH
72985: LD_INT 0
72987: DOUBLE
72988: EQUAL
72989: IFTRUE 72999
72991: LD_INT 1
72993: DOUBLE
72994: EQUAL
72995: IFTRUE 72999
72997: GO 73200
72999: POP
// case nation of nation_american :
73000: LD_VAR 0 5
73004: PUSH
73005: LD_INT 1
73007: DOUBLE
73008: EQUAL
73009: IFTRUE 73013
73011: GO 73069
73013: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73014: LD_ADDR_VAR 0 9
73018: PUSH
73019: LD_VAR 0 11
73023: PUSH
73024: LD_VAR 0 12
73028: PUSH
73029: LD_VAR 0 13
73033: PUSH
73034: LD_VAR 0 14
73038: PUSH
73039: LD_VAR 0 15
73043: PUSH
73044: LD_VAR 0 16
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: PUSH
73057: LD_VAR 0 4
73061: PUSH
73062: LD_INT 1
73064: PLUS
73065: ARRAY
73066: ST_TO_ADDR
73067: GO 73198
73069: LD_INT 2
73071: DOUBLE
73072: EQUAL
73073: IFTRUE 73077
73075: GO 73133
73077: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73078: LD_ADDR_VAR 0 9
73082: PUSH
73083: LD_VAR 0 17
73087: PUSH
73088: LD_VAR 0 18
73092: PUSH
73093: LD_VAR 0 19
73097: PUSH
73098: LD_VAR 0 20
73102: PUSH
73103: LD_VAR 0 21
73107: PUSH
73108: LD_VAR 0 22
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: PUSH
73121: LD_VAR 0 4
73125: PUSH
73126: LD_INT 1
73128: PLUS
73129: ARRAY
73130: ST_TO_ADDR
73131: GO 73198
73133: LD_INT 3
73135: DOUBLE
73136: EQUAL
73137: IFTRUE 73141
73139: GO 73197
73141: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73142: LD_ADDR_VAR 0 9
73146: PUSH
73147: LD_VAR 0 23
73151: PUSH
73152: LD_VAR 0 24
73156: PUSH
73157: LD_VAR 0 25
73161: PUSH
73162: LD_VAR 0 26
73166: PUSH
73167: LD_VAR 0 27
73171: PUSH
73172: LD_VAR 0 28
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: PUSH
73185: LD_VAR 0 4
73189: PUSH
73190: LD_INT 1
73192: PLUS
73193: ARRAY
73194: ST_TO_ADDR
73195: GO 73198
73197: POP
73198: GO 73753
73200: LD_INT 2
73202: DOUBLE
73203: EQUAL
73204: IFTRUE 73214
73206: LD_INT 3
73208: DOUBLE
73209: EQUAL
73210: IFTRUE 73214
73212: GO 73270
73214: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73215: LD_ADDR_VAR 0 9
73219: PUSH
73220: LD_VAR 0 29
73224: PUSH
73225: LD_VAR 0 30
73229: PUSH
73230: LD_VAR 0 31
73234: PUSH
73235: LD_VAR 0 32
73239: PUSH
73240: LD_VAR 0 33
73244: PUSH
73245: LD_VAR 0 34
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: PUSH
73258: LD_VAR 0 4
73262: PUSH
73263: LD_INT 1
73265: PLUS
73266: ARRAY
73267: ST_TO_ADDR
73268: GO 73753
73270: LD_INT 16
73272: DOUBLE
73273: EQUAL
73274: IFTRUE 73332
73276: LD_INT 17
73278: DOUBLE
73279: EQUAL
73280: IFTRUE 73332
73282: LD_INT 18
73284: DOUBLE
73285: EQUAL
73286: IFTRUE 73332
73288: LD_INT 19
73290: DOUBLE
73291: EQUAL
73292: IFTRUE 73332
73294: LD_INT 22
73296: DOUBLE
73297: EQUAL
73298: IFTRUE 73332
73300: LD_INT 20
73302: DOUBLE
73303: EQUAL
73304: IFTRUE 73332
73306: LD_INT 21
73308: DOUBLE
73309: EQUAL
73310: IFTRUE 73332
73312: LD_INT 23
73314: DOUBLE
73315: EQUAL
73316: IFTRUE 73332
73318: LD_INT 24
73320: DOUBLE
73321: EQUAL
73322: IFTRUE 73332
73324: LD_INT 25
73326: DOUBLE
73327: EQUAL
73328: IFTRUE 73332
73330: GO 73388
73332: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73333: LD_ADDR_VAR 0 9
73337: PUSH
73338: LD_VAR 0 35
73342: PUSH
73343: LD_VAR 0 36
73347: PUSH
73348: LD_VAR 0 37
73352: PUSH
73353: LD_VAR 0 38
73357: PUSH
73358: LD_VAR 0 39
73362: PUSH
73363: LD_VAR 0 40
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: PUSH
73376: LD_VAR 0 4
73380: PUSH
73381: LD_INT 1
73383: PLUS
73384: ARRAY
73385: ST_TO_ADDR
73386: GO 73753
73388: LD_INT 6
73390: DOUBLE
73391: EQUAL
73392: IFTRUE 73444
73394: LD_INT 7
73396: DOUBLE
73397: EQUAL
73398: IFTRUE 73444
73400: LD_INT 8
73402: DOUBLE
73403: EQUAL
73404: IFTRUE 73444
73406: LD_INT 13
73408: DOUBLE
73409: EQUAL
73410: IFTRUE 73444
73412: LD_INT 12
73414: DOUBLE
73415: EQUAL
73416: IFTRUE 73444
73418: LD_INT 15
73420: DOUBLE
73421: EQUAL
73422: IFTRUE 73444
73424: LD_INT 11
73426: DOUBLE
73427: EQUAL
73428: IFTRUE 73444
73430: LD_INT 14
73432: DOUBLE
73433: EQUAL
73434: IFTRUE 73444
73436: LD_INT 10
73438: DOUBLE
73439: EQUAL
73440: IFTRUE 73444
73442: GO 73500
73444: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73445: LD_ADDR_VAR 0 9
73449: PUSH
73450: LD_VAR 0 41
73454: PUSH
73455: LD_VAR 0 42
73459: PUSH
73460: LD_VAR 0 43
73464: PUSH
73465: LD_VAR 0 44
73469: PUSH
73470: LD_VAR 0 45
73474: PUSH
73475: LD_VAR 0 46
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: PUSH
73488: LD_VAR 0 4
73492: PUSH
73493: LD_INT 1
73495: PLUS
73496: ARRAY
73497: ST_TO_ADDR
73498: GO 73753
73500: LD_INT 36
73502: DOUBLE
73503: EQUAL
73504: IFTRUE 73508
73506: GO 73564
73508: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73509: LD_ADDR_VAR 0 9
73513: PUSH
73514: LD_VAR 0 47
73518: PUSH
73519: LD_VAR 0 48
73523: PUSH
73524: LD_VAR 0 49
73528: PUSH
73529: LD_VAR 0 50
73533: PUSH
73534: LD_VAR 0 51
73538: PUSH
73539: LD_VAR 0 52
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: PUSH
73552: LD_VAR 0 4
73556: PUSH
73557: LD_INT 1
73559: PLUS
73560: ARRAY
73561: ST_TO_ADDR
73562: GO 73753
73564: LD_INT 4
73566: DOUBLE
73567: EQUAL
73568: IFTRUE 73590
73570: LD_INT 5
73572: DOUBLE
73573: EQUAL
73574: IFTRUE 73590
73576: LD_INT 34
73578: DOUBLE
73579: EQUAL
73580: IFTRUE 73590
73582: LD_INT 37
73584: DOUBLE
73585: EQUAL
73586: IFTRUE 73590
73588: GO 73646
73590: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73591: LD_ADDR_VAR 0 9
73595: PUSH
73596: LD_VAR 0 53
73600: PUSH
73601: LD_VAR 0 54
73605: PUSH
73606: LD_VAR 0 55
73610: PUSH
73611: LD_VAR 0 56
73615: PUSH
73616: LD_VAR 0 57
73620: PUSH
73621: LD_VAR 0 58
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: PUSH
73634: LD_VAR 0 4
73638: PUSH
73639: LD_INT 1
73641: PLUS
73642: ARRAY
73643: ST_TO_ADDR
73644: GO 73753
73646: LD_INT 31
73648: DOUBLE
73649: EQUAL
73650: IFTRUE 73696
73652: LD_INT 32
73654: DOUBLE
73655: EQUAL
73656: IFTRUE 73696
73658: LD_INT 33
73660: DOUBLE
73661: EQUAL
73662: IFTRUE 73696
73664: LD_INT 27
73666: DOUBLE
73667: EQUAL
73668: IFTRUE 73696
73670: LD_INT 26
73672: DOUBLE
73673: EQUAL
73674: IFTRUE 73696
73676: LD_INT 28
73678: DOUBLE
73679: EQUAL
73680: IFTRUE 73696
73682: LD_INT 29
73684: DOUBLE
73685: EQUAL
73686: IFTRUE 73696
73688: LD_INT 30
73690: DOUBLE
73691: EQUAL
73692: IFTRUE 73696
73694: GO 73752
73696: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73697: LD_ADDR_VAR 0 9
73701: PUSH
73702: LD_VAR 0 59
73706: PUSH
73707: LD_VAR 0 60
73711: PUSH
73712: LD_VAR 0 61
73716: PUSH
73717: LD_VAR 0 62
73721: PUSH
73722: LD_VAR 0 63
73726: PUSH
73727: LD_VAR 0 64
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: PUSH
73740: LD_VAR 0 4
73744: PUSH
73745: LD_INT 1
73747: PLUS
73748: ARRAY
73749: ST_TO_ADDR
73750: GO 73753
73752: POP
// temp_list2 = [ ] ;
73753: LD_ADDR_VAR 0 10
73757: PUSH
73758: EMPTY
73759: ST_TO_ADDR
// for i in temp_list do
73760: LD_ADDR_VAR 0 8
73764: PUSH
73765: LD_VAR 0 9
73769: PUSH
73770: FOR_IN
73771: IFFALSE 73823
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73773: LD_ADDR_VAR 0 10
73777: PUSH
73778: LD_VAR 0 10
73782: PUSH
73783: LD_VAR 0 8
73787: PUSH
73788: LD_INT 1
73790: ARRAY
73791: PUSH
73792: LD_VAR 0 2
73796: PLUS
73797: PUSH
73798: LD_VAR 0 8
73802: PUSH
73803: LD_INT 2
73805: ARRAY
73806: PUSH
73807: LD_VAR 0 3
73811: PLUS
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: EMPTY
73818: LIST
73819: ADD
73820: ST_TO_ADDR
73821: GO 73770
73823: POP
73824: POP
// result = temp_list2 ;
73825: LD_ADDR_VAR 0 7
73829: PUSH
73830: LD_VAR 0 10
73834: ST_TO_ADDR
// end ;
73835: LD_VAR 0 7
73839: RET
// export function EnemyInRange ( unit , dist ) ; begin
73840: LD_INT 0
73842: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73843: LD_ADDR_VAR 0 3
73847: PUSH
73848: LD_VAR 0 1
73852: PPUSH
73853: CALL_OW 255
73857: PPUSH
73858: LD_VAR 0 1
73862: PPUSH
73863: CALL_OW 250
73867: PPUSH
73868: LD_VAR 0 1
73872: PPUSH
73873: CALL_OW 251
73877: PPUSH
73878: LD_VAR 0 2
73882: PPUSH
73883: CALL 47242 0 4
73887: PUSH
73888: LD_INT 4
73890: ARRAY
73891: ST_TO_ADDR
// end ;
73892: LD_VAR 0 3
73896: RET
// export function PlayerSeeMe ( unit ) ; begin
73897: LD_INT 0
73899: PPUSH
// result := See ( your_side , unit ) ;
73900: LD_ADDR_VAR 0 2
73904: PUSH
73905: LD_OWVAR 2
73909: PPUSH
73910: LD_VAR 0 1
73914: PPUSH
73915: CALL_OW 292
73919: ST_TO_ADDR
// end ;
73920: LD_VAR 0 2
73924: RET
// export function ReverseDir ( unit ) ; begin
73925: LD_INT 0
73927: PPUSH
// if not unit then
73928: LD_VAR 0 1
73932: NOT
73933: IFFALSE 73937
// exit ;
73935: GO 73960
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73937: LD_ADDR_VAR 0 2
73941: PUSH
73942: LD_VAR 0 1
73946: PPUSH
73947: CALL_OW 254
73951: PUSH
73952: LD_INT 3
73954: PLUS
73955: PUSH
73956: LD_INT 6
73958: MOD
73959: ST_TO_ADDR
// end ;
73960: LD_VAR 0 2
73964: RET
// export function ReverseArray ( array ) ; var i ; begin
73965: LD_INT 0
73967: PPUSH
73968: PPUSH
// if not array then
73969: LD_VAR 0 1
73973: NOT
73974: IFFALSE 73978
// exit ;
73976: GO 74033
// result := [ ] ;
73978: LD_ADDR_VAR 0 2
73982: PUSH
73983: EMPTY
73984: ST_TO_ADDR
// for i := array downto 1 do
73985: LD_ADDR_VAR 0 3
73989: PUSH
73990: DOUBLE
73991: LD_VAR 0 1
73995: INC
73996: ST_TO_ADDR
73997: LD_INT 1
73999: PUSH
74000: FOR_DOWNTO
74001: IFFALSE 74031
// result := Join ( result , array [ i ] ) ;
74003: LD_ADDR_VAR 0 2
74007: PUSH
74008: LD_VAR 0 2
74012: PPUSH
74013: LD_VAR 0 1
74017: PUSH
74018: LD_VAR 0 3
74022: ARRAY
74023: PPUSH
74024: CALL 78677 0 2
74028: ST_TO_ADDR
74029: GO 74000
74031: POP
74032: POP
// end ;
74033: LD_VAR 0 2
74037: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74038: LD_INT 0
74040: PPUSH
74041: PPUSH
74042: PPUSH
74043: PPUSH
74044: PPUSH
74045: PPUSH
// if not unit or not hexes then
74046: LD_VAR 0 1
74050: NOT
74051: PUSH
74052: LD_VAR 0 2
74056: NOT
74057: OR
74058: IFFALSE 74062
// exit ;
74060: GO 74185
// dist := 9999 ;
74062: LD_ADDR_VAR 0 5
74066: PUSH
74067: LD_INT 9999
74069: ST_TO_ADDR
// for i = 1 to hexes do
74070: LD_ADDR_VAR 0 4
74074: PUSH
74075: DOUBLE
74076: LD_INT 1
74078: DEC
74079: ST_TO_ADDR
74080: LD_VAR 0 2
74084: PUSH
74085: FOR_TO
74086: IFFALSE 74173
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74088: LD_ADDR_VAR 0 6
74092: PUSH
74093: LD_VAR 0 1
74097: PPUSH
74098: LD_VAR 0 2
74102: PUSH
74103: LD_VAR 0 4
74107: ARRAY
74108: PUSH
74109: LD_INT 1
74111: ARRAY
74112: PPUSH
74113: LD_VAR 0 2
74117: PUSH
74118: LD_VAR 0 4
74122: ARRAY
74123: PUSH
74124: LD_INT 2
74126: ARRAY
74127: PPUSH
74128: CALL_OW 297
74132: ST_TO_ADDR
// if tdist < dist then
74133: LD_VAR 0 6
74137: PUSH
74138: LD_VAR 0 5
74142: LESS
74143: IFFALSE 74171
// begin hex := hexes [ i ] ;
74145: LD_ADDR_VAR 0 8
74149: PUSH
74150: LD_VAR 0 2
74154: PUSH
74155: LD_VAR 0 4
74159: ARRAY
74160: ST_TO_ADDR
// dist := tdist ;
74161: LD_ADDR_VAR 0 5
74165: PUSH
74166: LD_VAR 0 6
74170: ST_TO_ADDR
// end ; end ;
74171: GO 74085
74173: POP
74174: POP
// result := hex ;
74175: LD_ADDR_VAR 0 3
74179: PUSH
74180: LD_VAR 0 8
74184: ST_TO_ADDR
// end ;
74185: LD_VAR 0 3
74189: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74190: LD_INT 0
74192: PPUSH
74193: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74194: LD_VAR 0 1
74198: NOT
74199: PUSH
74200: LD_VAR 0 1
74204: PUSH
74205: LD_INT 21
74207: PUSH
74208: LD_INT 2
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_INT 23
74217: PUSH
74218: LD_INT 2
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PPUSH
74229: CALL_OW 69
74233: IN
74234: NOT
74235: OR
74236: IFFALSE 74240
// exit ;
74238: GO 74287
// for i = 1 to 3 do
74240: LD_ADDR_VAR 0 3
74244: PUSH
74245: DOUBLE
74246: LD_INT 1
74248: DEC
74249: ST_TO_ADDR
74250: LD_INT 3
74252: PUSH
74253: FOR_TO
74254: IFFALSE 74285
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74256: LD_VAR 0 1
74260: PPUSH
74261: CALL_OW 250
74265: PPUSH
74266: LD_VAR 0 1
74270: PPUSH
74271: CALL_OW 251
74275: PPUSH
74276: LD_INT 1
74278: PPUSH
74279: CALL_OW 453
74283: GO 74253
74285: POP
74286: POP
// end ;
74287: LD_VAR 0 2
74291: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74292: LD_INT 0
74294: PPUSH
74295: PPUSH
74296: PPUSH
74297: PPUSH
74298: PPUSH
74299: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74300: LD_VAR 0 1
74304: NOT
74305: PUSH
74306: LD_VAR 0 2
74310: NOT
74311: OR
74312: PUSH
74313: LD_VAR 0 1
74317: PPUSH
74318: CALL_OW 314
74322: OR
74323: IFFALSE 74327
// exit ;
74325: GO 74794
// if GetLives ( i ) < 250 then
74327: LD_VAR 0 4
74331: PPUSH
74332: CALL_OW 256
74336: PUSH
74337: LD_INT 250
74339: LESS
74340: IFFALSE 74353
// begin ComAutodestruct ( i ) ;
74342: LD_VAR 0 4
74346: PPUSH
74347: CALL 74190 0 1
// exit ;
74351: GO 74794
// end ; x := GetX ( enemy_unit ) ;
74353: LD_ADDR_VAR 0 7
74357: PUSH
74358: LD_VAR 0 2
74362: PPUSH
74363: CALL_OW 250
74367: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74368: LD_ADDR_VAR 0 8
74372: PUSH
74373: LD_VAR 0 2
74377: PPUSH
74378: CALL_OW 251
74382: ST_TO_ADDR
// if not x or not y then
74383: LD_VAR 0 7
74387: NOT
74388: PUSH
74389: LD_VAR 0 8
74393: NOT
74394: OR
74395: IFFALSE 74399
// exit ;
74397: GO 74794
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74399: LD_ADDR_VAR 0 6
74403: PUSH
74404: LD_VAR 0 7
74408: PPUSH
74409: LD_INT 0
74411: PPUSH
74412: LD_INT 4
74414: PPUSH
74415: CALL_OW 272
74419: PUSH
74420: LD_VAR 0 8
74424: PPUSH
74425: LD_INT 0
74427: PPUSH
74428: LD_INT 4
74430: PPUSH
74431: CALL_OW 273
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_VAR 0 7
74444: PPUSH
74445: LD_INT 1
74447: PPUSH
74448: LD_INT 4
74450: PPUSH
74451: CALL_OW 272
74455: PUSH
74456: LD_VAR 0 8
74460: PPUSH
74461: LD_INT 1
74463: PPUSH
74464: LD_INT 4
74466: PPUSH
74467: CALL_OW 273
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_VAR 0 7
74480: PPUSH
74481: LD_INT 2
74483: PPUSH
74484: LD_INT 4
74486: PPUSH
74487: CALL_OW 272
74491: PUSH
74492: LD_VAR 0 8
74496: PPUSH
74497: LD_INT 2
74499: PPUSH
74500: LD_INT 4
74502: PPUSH
74503: CALL_OW 273
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_VAR 0 7
74516: PPUSH
74517: LD_INT 3
74519: PPUSH
74520: LD_INT 4
74522: PPUSH
74523: CALL_OW 272
74527: PUSH
74528: LD_VAR 0 8
74532: PPUSH
74533: LD_INT 3
74535: PPUSH
74536: LD_INT 4
74538: PPUSH
74539: CALL_OW 273
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_VAR 0 7
74552: PPUSH
74553: LD_INT 4
74555: PPUSH
74556: LD_INT 4
74558: PPUSH
74559: CALL_OW 272
74563: PUSH
74564: LD_VAR 0 8
74568: PPUSH
74569: LD_INT 4
74571: PPUSH
74572: LD_INT 4
74574: PPUSH
74575: CALL_OW 273
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: PUSH
74584: LD_VAR 0 7
74588: PPUSH
74589: LD_INT 5
74591: PPUSH
74592: LD_INT 4
74594: PPUSH
74595: CALL_OW 272
74599: PUSH
74600: LD_VAR 0 8
74604: PPUSH
74605: LD_INT 5
74607: PPUSH
74608: LD_INT 4
74610: PPUSH
74611: CALL_OW 273
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: ST_TO_ADDR
// for i = tmp downto 1 do
74628: LD_ADDR_VAR 0 4
74632: PUSH
74633: DOUBLE
74634: LD_VAR 0 6
74638: INC
74639: ST_TO_ADDR
74640: LD_INT 1
74642: PUSH
74643: FOR_DOWNTO
74644: IFFALSE 74745
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74646: LD_VAR 0 6
74650: PUSH
74651: LD_VAR 0 4
74655: ARRAY
74656: PUSH
74657: LD_INT 1
74659: ARRAY
74660: PPUSH
74661: LD_VAR 0 6
74665: PUSH
74666: LD_VAR 0 4
74670: ARRAY
74671: PUSH
74672: LD_INT 2
74674: ARRAY
74675: PPUSH
74676: CALL_OW 488
74680: NOT
74681: PUSH
74682: LD_VAR 0 6
74686: PUSH
74687: LD_VAR 0 4
74691: ARRAY
74692: PUSH
74693: LD_INT 1
74695: ARRAY
74696: PPUSH
74697: LD_VAR 0 6
74701: PUSH
74702: LD_VAR 0 4
74706: ARRAY
74707: PUSH
74708: LD_INT 2
74710: ARRAY
74711: PPUSH
74712: CALL_OW 428
74716: PUSH
74717: LD_INT 0
74719: NONEQUAL
74720: OR
74721: IFFALSE 74743
// tmp := Delete ( tmp , i ) ;
74723: LD_ADDR_VAR 0 6
74727: PUSH
74728: LD_VAR 0 6
74732: PPUSH
74733: LD_VAR 0 4
74737: PPUSH
74738: CALL_OW 3
74742: ST_TO_ADDR
74743: GO 74643
74745: POP
74746: POP
// j := GetClosestHex ( unit , tmp ) ;
74747: LD_ADDR_VAR 0 5
74751: PUSH
74752: LD_VAR 0 1
74756: PPUSH
74757: LD_VAR 0 6
74761: PPUSH
74762: CALL 74038 0 2
74766: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74767: LD_VAR 0 1
74771: PPUSH
74772: LD_VAR 0 5
74776: PUSH
74777: LD_INT 1
74779: ARRAY
74780: PPUSH
74781: LD_VAR 0 5
74785: PUSH
74786: LD_INT 2
74788: ARRAY
74789: PPUSH
74790: CALL_OW 111
// end ;
74794: LD_VAR 0 3
74798: RET
// export function PrepareApemanSoldier ( ) ; begin
74799: LD_INT 0
74801: PPUSH
// uc_nation := 0 ;
74802: LD_ADDR_OWVAR 21
74806: PUSH
74807: LD_INT 0
74809: ST_TO_ADDR
// hc_sex := sex_male ;
74810: LD_ADDR_OWVAR 27
74814: PUSH
74815: LD_INT 1
74817: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74818: LD_ADDR_OWVAR 28
74822: PUSH
74823: LD_INT 15
74825: ST_TO_ADDR
// hc_gallery :=  ;
74826: LD_ADDR_OWVAR 33
74830: PUSH
74831: LD_STRING 
74833: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74834: LD_ADDR_OWVAR 31
74838: PUSH
74839: LD_INT 0
74841: PPUSH
74842: LD_INT 3
74844: PPUSH
74845: CALL_OW 12
74849: PUSH
74850: LD_INT 0
74852: PPUSH
74853: LD_INT 3
74855: PPUSH
74856: CALL_OW 12
74860: PUSH
74861: LD_INT 0
74863: PUSH
74864: LD_INT 0
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: ST_TO_ADDR
// end ;
74873: LD_VAR 0 1
74877: RET
// export function PrepareApemanEngineer ( ) ; begin
74878: LD_INT 0
74880: PPUSH
// uc_nation := 0 ;
74881: LD_ADDR_OWVAR 21
74885: PUSH
74886: LD_INT 0
74888: ST_TO_ADDR
// hc_sex := sex_male ;
74889: LD_ADDR_OWVAR 27
74893: PUSH
74894: LD_INT 1
74896: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74897: LD_ADDR_OWVAR 28
74901: PUSH
74902: LD_INT 16
74904: ST_TO_ADDR
// hc_gallery :=  ;
74905: LD_ADDR_OWVAR 33
74909: PUSH
74910: LD_STRING 
74912: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74913: LD_ADDR_OWVAR 31
74917: PUSH
74918: LD_INT 0
74920: PPUSH
74921: LD_INT 3
74923: PPUSH
74924: CALL_OW 12
74928: PUSH
74929: LD_INT 0
74931: PPUSH
74932: LD_INT 3
74934: PPUSH
74935: CALL_OW 12
74939: PUSH
74940: LD_INT 0
74942: PUSH
74943: LD_INT 0
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: ST_TO_ADDR
// end ;
74952: LD_VAR 0 1
74956: RET
// export function PrepareApeman ( agressivity ) ; begin
74957: LD_INT 0
74959: PPUSH
// uc_side := 0 ;
74960: LD_ADDR_OWVAR 20
74964: PUSH
74965: LD_INT 0
74967: ST_TO_ADDR
// uc_nation := 0 ;
74968: LD_ADDR_OWVAR 21
74972: PUSH
74973: LD_INT 0
74975: ST_TO_ADDR
// hc_sex := sex_male ;
74976: LD_ADDR_OWVAR 27
74980: PUSH
74981: LD_INT 1
74983: ST_TO_ADDR
// hc_class := class_apeman ;
74984: LD_ADDR_OWVAR 28
74988: PUSH
74989: LD_INT 12
74991: ST_TO_ADDR
// hc_gallery :=  ;
74992: LD_ADDR_OWVAR 33
74996: PUSH
74997: LD_STRING 
74999: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75000: LD_ADDR_OWVAR 35
75004: PUSH
75005: LD_VAR 0 1
75009: NEG
75010: PPUSH
75011: LD_VAR 0 1
75015: PPUSH
75016: CALL_OW 12
75020: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75021: LD_ADDR_OWVAR 31
75025: PUSH
75026: LD_INT 0
75028: PPUSH
75029: LD_INT 3
75031: PPUSH
75032: CALL_OW 12
75036: PUSH
75037: LD_INT 0
75039: PPUSH
75040: LD_INT 3
75042: PPUSH
75043: CALL_OW 12
75047: PUSH
75048: LD_INT 0
75050: PUSH
75051: LD_INT 0
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: ST_TO_ADDR
// end ;
75060: LD_VAR 0 2
75064: RET
// export function PrepareTiger ( agressivity ) ; begin
75065: LD_INT 0
75067: PPUSH
// uc_side := 0 ;
75068: LD_ADDR_OWVAR 20
75072: PUSH
75073: LD_INT 0
75075: ST_TO_ADDR
// uc_nation := 0 ;
75076: LD_ADDR_OWVAR 21
75080: PUSH
75081: LD_INT 0
75083: ST_TO_ADDR
// hc_class := class_tiger ;
75084: LD_ADDR_OWVAR 28
75088: PUSH
75089: LD_INT 14
75091: ST_TO_ADDR
// hc_gallery :=  ;
75092: LD_ADDR_OWVAR 33
75096: PUSH
75097: LD_STRING 
75099: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75100: LD_ADDR_OWVAR 35
75104: PUSH
75105: LD_VAR 0 1
75109: NEG
75110: PPUSH
75111: LD_VAR 0 1
75115: PPUSH
75116: CALL_OW 12
75120: ST_TO_ADDR
// end ;
75121: LD_VAR 0 2
75125: RET
// export function PrepareEnchidna ( ) ; begin
75126: LD_INT 0
75128: PPUSH
// uc_side := 0 ;
75129: LD_ADDR_OWVAR 20
75133: PUSH
75134: LD_INT 0
75136: ST_TO_ADDR
// uc_nation := 0 ;
75137: LD_ADDR_OWVAR 21
75141: PUSH
75142: LD_INT 0
75144: ST_TO_ADDR
// hc_class := class_baggie ;
75145: LD_ADDR_OWVAR 28
75149: PUSH
75150: LD_INT 13
75152: ST_TO_ADDR
// hc_gallery :=  ;
75153: LD_ADDR_OWVAR 33
75157: PUSH
75158: LD_STRING 
75160: ST_TO_ADDR
// end ;
75161: LD_VAR 0 1
75165: RET
// export function PrepareFrog ( ) ; begin
75166: LD_INT 0
75168: PPUSH
// uc_side := 0 ;
75169: LD_ADDR_OWVAR 20
75173: PUSH
75174: LD_INT 0
75176: ST_TO_ADDR
// uc_nation := 0 ;
75177: LD_ADDR_OWVAR 21
75181: PUSH
75182: LD_INT 0
75184: ST_TO_ADDR
// hc_class := class_frog ;
75185: LD_ADDR_OWVAR 28
75189: PUSH
75190: LD_INT 19
75192: ST_TO_ADDR
// hc_gallery :=  ;
75193: LD_ADDR_OWVAR 33
75197: PUSH
75198: LD_STRING 
75200: ST_TO_ADDR
// end ;
75201: LD_VAR 0 1
75205: RET
// export function PrepareFish ( ) ; begin
75206: LD_INT 0
75208: PPUSH
// uc_side := 0 ;
75209: LD_ADDR_OWVAR 20
75213: PUSH
75214: LD_INT 0
75216: ST_TO_ADDR
// uc_nation := 0 ;
75217: LD_ADDR_OWVAR 21
75221: PUSH
75222: LD_INT 0
75224: ST_TO_ADDR
// hc_class := class_fish ;
75225: LD_ADDR_OWVAR 28
75229: PUSH
75230: LD_INT 20
75232: ST_TO_ADDR
// hc_gallery :=  ;
75233: LD_ADDR_OWVAR 33
75237: PUSH
75238: LD_STRING 
75240: ST_TO_ADDR
// end ;
75241: LD_VAR 0 1
75245: RET
// export function PrepareBird ( ) ; begin
75246: LD_INT 0
75248: PPUSH
// uc_side := 0 ;
75249: LD_ADDR_OWVAR 20
75253: PUSH
75254: LD_INT 0
75256: ST_TO_ADDR
// uc_nation := 0 ;
75257: LD_ADDR_OWVAR 21
75261: PUSH
75262: LD_INT 0
75264: ST_TO_ADDR
// hc_class := class_phororhacos ;
75265: LD_ADDR_OWVAR 28
75269: PUSH
75270: LD_INT 18
75272: ST_TO_ADDR
// hc_gallery :=  ;
75273: LD_ADDR_OWVAR 33
75277: PUSH
75278: LD_STRING 
75280: ST_TO_ADDR
// end ;
75281: LD_VAR 0 1
75285: RET
// export function PrepareHorse ( ) ; begin
75286: LD_INT 0
75288: PPUSH
// uc_side := 0 ;
75289: LD_ADDR_OWVAR 20
75293: PUSH
75294: LD_INT 0
75296: ST_TO_ADDR
// uc_nation := 0 ;
75297: LD_ADDR_OWVAR 21
75301: PUSH
75302: LD_INT 0
75304: ST_TO_ADDR
// hc_class := class_horse ;
75305: LD_ADDR_OWVAR 28
75309: PUSH
75310: LD_INT 21
75312: ST_TO_ADDR
// hc_gallery :=  ;
75313: LD_ADDR_OWVAR 33
75317: PUSH
75318: LD_STRING 
75320: ST_TO_ADDR
// end ;
75321: LD_VAR 0 1
75325: RET
// export function PrepareMastodont ( ) ; begin
75326: LD_INT 0
75328: PPUSH
// uc_side := 0 ;
75329: LD_ADDR_OWVAR 20
75333: PUSH
75334: LD_INT 0
75336: ST_TO_ADDR
// uc_nation := 0 ;
75337: LD_ADDR_OWVAR 21
75341: PUSH
75342: LD_INT 0
75344: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75345: LD_ADDR_OWVAR 37
75349: PUSH
75350: LD_INT 31
75352: ST_TO_ADDR
// vc_control := control_rider ;
75353: LD_ADDR_OWVAR 38
75357: PUSH
75358: LD_INT 4
75360: ST_TO_ADDR
// end ;
75361: LD_VAR 0 1
75365: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75366: LD_INT 0
75368: PPUSH
75369: PPUSH
75370: PPUSH
// uc_side = 0 ;
75371: LD_ADDR_OWVAR 20
75375: PUSH
75376: LD_INT 0
75378: ST_TO_ADDR
// uc_nation = 0 ;
75379: LD_ADDR_OWVAR 21
75383: PUSH
75384: LD_INT 0
75386: ST_TO_ADDR
// InitHc_All ( ) ;
75387: CALL_OW 584
// InitVc ;
75391: CALL_OW 20
// if mastodonts then
75395: LD_VAR 0 6
75399: IFFALSE 75466
// for i = 1 to mastodonts do
75401: LD_ADDR_VAR 0 11
75405: PUSH
75406: DOUBLE
75407: LD_INT 1
75409: DEC
75410: ST_TO_ADDR
75411: LD_VAR 0 6
75415: PUSH
75416: FOR_TO
75417: IFFALSE 75464
// begin vc_chassis := 31 ;
75419: LD_ADDR_OWVAR 37
75423: PUSH
75424: LD_INT 31
75426: ST_TO_ADDR
// vc_control := control_rider ;
75427: LD_ADDR_OWVAR 38
75431: PUSH
75432: LD_INT 4
75434: ST_TO_ADDR
// animal := CreateVehicle ;
75435: LD_ADDR_VAR 0 12
75439: PUSH
75440: CALL_OW 45
75444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75445: LD_VAR 0 12
75449: PPUSH
75450: LD_VAR 0 8
75454: PPUSH
75455: LD_INT 0
75457: PPUSH
75458: CALL 77594 0 3
// end ;
75462: GO 75416
75464: POP
75465: POP
// if horses then
75466: LD_VAR 0 5
75470: IFFALSE 75537
// for i = 1 to horses do
75472: LD_ADDR_VAR 0 11
75476: PUSH
75477: DOUBLE
75478: LD_INT 1
75480: DEC
75481: ST_TO_ADDR
75482: LD_VAR 0 5
75486: PUSH
75487: FOR_TO
75488: IFFALSE 75535
// begin hc_class := 21 ;
75490: LD_ADDR_OWVAR 28
75494: PUSH
75495: LD_INT 21
75497: ST_TO_ADDR
// hc_gallery :=  ;
75498: LD_ADDR_OWVAR 33
75502: PUSH
75503: LD_STRING 
75505: ST_TO_ADDR
// animal := CreateHuman ;
75506: LD_ADDR_VAR 0 12
75510: PUSH
75511: CALL_OW 44
75515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75516: LD_VAR 0 12
75520: PPUSH
75521: LD_VAR 0 8
75525: PPUSH
75526: LD_INT 0
75528: PPUSH
75529: CALL 77594 0 3
// end ;
75533: GO 75487
75535: POP
75536: POP
// if birds then
75537: LD_VAR 0 1
75541: IFFALSE 75608
// for i = 1 to birds do
75543: LD_ADDR_VAR 0 11
75547: PUSH
75548: DOUBLE
75549: LD_INT 1
75551: DEC
75552: ST_TO_ADDR
75553: LD_VAR 0 1
75557: PUSH
75558: FOR_TO
75559: IFFALSE 75606
// begin hc_class = 18 ;
75561: LD_ADDR_OWVAR 28
75565: PUSH
75566: LD_INT 18
75568: ST_TO_ADDR
// hc_gallery =  ;
75569: LD_ADDR_OWVAR 33
75573: PUSH
75574: LD_STRING 
75576: ST_TO_ADDR
// animal := CreateHuman ;
75577: LD_ADDR_VAR 0 12
75581: PUSH
75582: CALL_OW 44
75586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75587: LD_VAR 0 12
75591: PPUSH
75592: LD_VAR 0 8
75596: PPUSH
75597: LD_INT 0
75599: PPUSH
75600: CALL 77594 0 3
// end ;
75604: GO 75558
75606: POP
75607: POP
// if tigers then
75608: LD_VAR 0 2
75612: IFFALSE 75696
// for i = 1 to tigers do
75614: LD_ADDR_VAR 0 11
75618: PUSH
75619: DOUBLE
75620: LD_INT 1
75622: DEC
75623: ST_TO_ADDR
75624: LD_VAR 0 2
75628: PUSH
75629: FOR_TO
75630: IFFALSE 75694
// begin hc_class = class_tiger ;
75632: LD_ADDR_OWVAR 28
75636: PUSH
75637: LD_INT 14
75639: ST_TO_ADDR
// hc_gallery =  ;
75640: LD_ADDR_OWVAR 33
75644: PUSH
75645: LD_STRING 
75647: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75648: LD_ADDR_OWVAR 35
75652: PUSH
75653: LD_INT 7
75655: NEG
75656: PPUSH
75657: LD_INT 7
75659: PPUSH
75660: CALL_OW 12
75664: ST_TO_ADDR
// animal := CreateHuman ;
75665: LD_ADDR_VAR 0 12
75669: PUSH
75670: CALL_OW 44
75674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75675: LD_VAR 0 12
75679: PPUSH
75680: LD_VAR 0 8
75684: PPUSH
75685: LD_INT 0
75687: PPUSH
75688: CALL 77594 0 3
// end ;
75692: GO 75629
75694: POP
75695: POP
// if apemans then
75696: LD_VAR 0 3
75700: IFFALSE 75823
// for i = 1 to apemans do
75702: LD_ADDR_VAR 0 11
75706: PUSH
75707: DOUBLE
75708: LD_INT 1
75710: DEC
75711: ST_TO_ADDR
75712: LD_VAR 0 3
75716: PUSH
75717: FOR_TO
75718: IFFALSE 75821
// begin hc_class = class_apeman ;
75720: LD_ADDR_OWVAR 28
75724: PUSH
75725: LD_INT 12
75727: ST_TO_ADDR
// hc_gallery =  ;
75728: LD_ADDR_OWVAR 33
75732: PUSH
75733: LD_STRING 
75735: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75736: LD_ADDR_OWVAR 35
75740: PUSH
75741: LD_INT 2
75743: NEG
75744: PPUSH
75745: LD_INT 2
75747: PPUSH
75748: CALL_OW 12
75752: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75753: LD_ADDR_OWVAR 31
75757: PUSH
75758: LD_INT 1
75760: PPUSH
75761: LD_INT 3
75763: PPUSH
75764: CALL_OW 12
75768: PUSH
75769: LD_INT 1
75771: PPUSH
75772: LD_INT 3
75774: PPUSH
75775: CALL_OW 12
75779: PUSH
75780: LD_INT 0
75782: PUSH
75783: LD_INT 0
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: ST_TO_ADDR
// animal := CreateHuman ;
75792: LD_ADDR_VAR 0 12
75796: PUSH
75797: CALL_OW 44
75801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75802: LD_VAR 0 12
75806: PPUSH
75807: LD_VAR 0 8
75811: PPUSH
75812: LD_INT 0
75814: PPUSH
75815: CALL 77594 0 3
// end ;
75819: GO 75717
75821: POP
75822: POP
// if enchidnas then
75823: LD_VAR 0 4
75827: IFFALSE 75894
// for i = 1 to enchidnas do
75829: LD_ADDR_VAR 0 11
75833: PUSH
75834: DOUBLE
75835: LD_INT 1
75837: DEC
75838: ST_TO_ADDR
75839: LD_VAR 0 4
75843: PUSH
75844: FOR_TO
75845: IFFALSE 75892
// begin hc_class = 13 ;
75847: LD_ADDR_OWVAR 28
75851: PUSH
75852: LD_INT 13
75854: ST_TO_ADDR
// hc_gallery =  ;
75855: LD_ADDR_OWVAR 33
75859: PUSH
75860: LD_STRING 
75862: ST_TO_ADDR
// animal := CreateHuman ;
75863: LD_ADDR_VAR 0 12
75867: PUSH
75868: CALL_OW 44
75872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75873: LD_VAR 0 12
75877: PPUSH
75878: LD_VAR 0 8
75882: PPUSH
75883: LD_INT 0
75885: PPUSH
75886: CALL 77594 0 3
// end ;
75890: GO 75844
75892: POP
75893: POP
// if fishes then
75894: LD_VAR 0 7
75898: IFFALSE 75965
// for i = 1 to fishes do
75900: LD_ADDR_VAR 0 11
75904: PUSH
75905: DOUBLE
75906: LD_INT 1
75908: DEC
75909: ST_TO_ADDR
75910: LD_VAR 0 7
75914: PUSH
75915: FOR_TO
75916: IFFALSE 75963
// begin hc_class = 20 ;
75918: LD_ADDR_OWVAR 28
75922: PUSH
75923: LD_INT 20
75925: ST_TO_ADDR
// hc_gallery =  ;
75926: LD_ADDR_OWVAR 33
75930: PUSH
75931: LD_STRING 
75933: ST_TO_ADDR
// animal := CreateHuman ;
75934: LD_ADDR_VAR 0 12
75938: PUSH
75939: CALL_OW 44
75943: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75944: LD_VAR 0 12
75948: PPUSH
75949: LD_VAR 0 9
75953: PPUSH
75954: LD_INT 0
75956: PPUSH
75957: CALL 77594 0 3
// end ;
75961: GO 75915
75963: POP
75964: POP
// end ;
75965: LD_VAR 0 10
75969: RET
// export function WantHeal ( sci , unit ) ; begin
75970: LD_INT 0
75972: PPUSH
// if GetTaskList ( sci ) > 0 then
75973: LD_VAR 0 1
75977: PPUSH
75978: CALL_OW 437
75982: PUSH
75983: LD_INT 0
75985: GREATER
75986: IFFALSE 76056
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75988: LD_VAR 0 1
75992: PPUSH
75993: CALL_OW 437
75997: PUSH
75998: LD_INT 1
76000: ARRAY
76001: PUSH
76002: LD_INT 1
76004: ARRAY
76005: PUSH
76006: LD_STRING l
76008: EQUAL
76009: PUSH
76010: LD_VAR 0 1
76014: PPUSH
76015: CALL_OW 437
76019: PUSH
76020: LD_INT 1
76022: ARRAY
76023: PUSH
76024: LD_INT 4
76026: ARRAY
76027: PUSH
76028: LD_VAR 0 2
76032: EQUAL
76033: AND
76034: IFFALSE 76046
// result := true else
76036: LD_ADDR_VAR 0 3
76040: PUSH
76041: LD_INT 1
76043: ST_TO_ADDR
76044: GO 76054
// result := false ;
76046: LD_ADDR_VAR 0 3
76050: PUSH
76051: LD_INT 0
76053: ST_TO_ADDR
// end else
76054: GO 76064
// result := false ;
76056: LD_ADDR_VAR 0 3
76060: PUSH
76061: LD_INT 0
76063: ST_TO_ADDR
// end ;
76064: LD_VAR 0 3
76068: RET
// export function HealTarget ( sci ) ; begin
76069: LD_INT 0
76071: PPUSH
// if not sci then
76072: LD_VAR 0 1
76076: NOT
76077: IFFALSE 76081
// exit ;
76079: GO 76146
// result := 0 ;
76081: LD_ADDR_VAR 0 2
76085: PUSH
76086: LD_INT 0
76088: ST_TO_ADDR
// if GetTaskList ( sci ) then
76089: LD_VAR 0 1
76093: PPUSH
76094: CALL_OW 437
76098: IFFALSE 76146
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76100: LD_VAR 0 1
76104: PPUSH
76105: CALL_OW 437
76109: PUSH
76110: LD_INT 1
76112: ARRAY
76113: PUSH
76114: LD_INT 1
76116: ARRAY
76117: PUSH
76118: LD_STRING l
76120: EQUAL
76121: IFFALSE 76146
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76123: LD_ADDR_VAR 0 2
76127: PUSH
76128: LD_VAR 0 1
76132: PPUSH
76133: CALL_OW 437
76137: PUSH
76138: LD_INT 1
76140: ARRAY
76141: PUSH
76142: LD_INT 4
76144: ARRAY
76145: ST_TO_ADDR
// end ;
76146: LD_VAR 0 2
76150: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76151: LD_INT 0
76153: PPUSH
76154: PPUSH
76155: PPUSH
76156: PPUSH
// if not base_units then
76157: LD_VAR 0 1
76161: NOT
76162: IFFALSE 76166
// exit ;
76164: GO 76253
// result := false ;
76166: LD_ADDR_VAR 0 2
76170: PUSH
76171: LD_INT 0
76173: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76174: LD_ADDR_VAR 0 5
76178: PUSH
76179: LD_VAR 0 1
76183: PPUSH
76184: LD_INT 21
76186: PUSH
76187: LD_INT 3
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PPUSH
76194: CALL_OW 72
76198: ST_TO_ADDR
// if not tmp then
76199: LD_VAR 0 5
76203: NOT
76204: IFFALSE 76208
// exit ;
76206: GO 76253
// for i in tmp do
76208: LD_ADDR_VAR 0 3
76212: PUSH
76213: LD_VAR 0 5
76217: PUSH
76218: FOR_IN
76219: IFFALSE 76251
// begin result := EnemyInRange ( i , 22 ) ;
76221: LD_ADDR_VAR 0 2
76225: PUSH
76226: LD_VAR 0 3
76230: PPUSH
76231: LD_INT 22
76233: PPUSH
76234: CALL 73840 0 2
76238: ST_TO_ADDR
// if result then
76239: LD_VAR 0 2
76243: IFFALSE 76249
// exit ;
76245: POP
76246: POP
76247: GO 76253
// end ;
76249: GO 76218
76251: POP
76252: POP
// end ;
76253: LD_VAR 0 2
76257: RET
// export function FilterByTag ( units , tag ) ; begin
76258: LD_INT 0
76260: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76261: LD_ADDR_VAR 0 3
76265: PUSH
76266: LD_VAR 0 1
76270: PPUSH
76271: LD_INT 120
76273: PUSH
76274: LD_VAR 0 2
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PPUSH
76283: CALL_OW 72
76287: ST_TO_ADDR
// end ;
76288: LD_VAR 0 3
76292: RET
// export function IsDriver ( un ) ; begin
76293: LD_INT 0
76295: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76296: LD_ADDR_VAR 0 2
76300: PUSH
76301: LD_VAR 0 1
76305: PUSH
76306: LD_INT 55
76308: PUSH
76309: EMPTY
76310: LIST
76311: PPUSH
76312: CALL_OW 69
76316: IN
76317: ST_TO_ADDR
// end ;
76318: LD_VAR 0 2
76322: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76323: LD_INT 0
76325: PPUSH
76326: PPUSH
// list := [ ] ;
76327: LD_ADDR_VAR 0 5
76331: PUSH
76332: EMPTY
76333: ST_TO_ADDR
// case d of 0 :
76334: LD_VAR 0 3
76338: PUSH
76339: LD_INT 0
76341: DOUBLE
76342: EQUAL
76343: IFTRUE 76347
76345: GO 76480
76347: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76348: LD_ADDR_VAR 0 5
76352: PUSH
76353: LD_VAR 0 1
76357: PUSH
76358: LD_INT 4
76360: MINUS
76361: PUSH
76362: LD_VAR 0 2
76366: PUSH
76367: LD_INT 4
76369: MINUS
76370: PUSH
76371: LD_INT 2
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: LIST
76378: PUSH
76379: LD_VAR 0 1
76383: PUSH
76384: LD_INT 3
76386: MINUS
76387: PUSH
76388: LD_VAR 0 2
76392: PUSH
76393: LD_INT 1
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: LIST
76400: PUSH
76401: LD_VAR 0 1
76405: PUSH
76406: LD_INT 4
76408: PLUS
76409: PUSH
76410: LD_VAR 0 2
76414: PUSH
76415: LD_INT 4
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: LIST
76422: PUSH
76423: LD_VAR 0 1
76427: PUSH
76428: LD_INT 3
76430: PLUS
76431: PUSH
76432: LD_VAR 0 2
76436: PUSH
76437: LD_INT 3
76439: PLUS
76440: PUSH
76441: LD_INT 5
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: LIST
76448: PUSH
76449: LD_VAR 0 1
76453: PUSH
76454: LD_VAR 0 2
76458: PUSH
76459: LD_INT 4
76461: PLUS
76462: PUSH
76463: LD_INT 0
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: LIST
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: ST_TO_ADDR
// end ; 1 :
76478: GO 77178
76480: LD_INT 1
76482: DOUBLE
76483: EQUAL
76484: IFTRUE 76488
76486: GO 76621
76488: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76489: LD_ADDR_VAR 0 5
76493: PUSH
76494: LD_VAR 0 1
76498: PUSH
76499: LD_VAR 0 2
76503: PUSH
76504: LD_INT 4
76506: MINUS
76507: PUSH
76508: LD_INT 3
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: LIST
76515: PUSH
76516: LD_VAR 0 1
76520: PUSH
76521: LD_INT 3
76523: MINUS
76524: PUSH
76525: LD_VAR 0 2
76529: PUSH
76530: LD_INT 3
76532: MINUS
76533: PUSH
76534: LD_INT 2
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: PUSH
76542: LD_VAR 0 1
76546: PUSH
76547: LD_INT 4
76549: MINUS
76550: PUSH
76551: LD_VAR 0 2
76555: PUSH
76556: LD_INT 1
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: LIST
76563: PUSH
76564: LD_VAR 0 1
76568: PUSH
76569: LD_VAR 0 2
76573: PUSH
76574: LD_INT 3
76576: PLUS
76577: PUSH
76578: LD_INT 0
76580: PUSH
76581: EMPTY
76582: LIST
76583: LIST
76584: LIST
76585: PUSH
76586: LD_VAR 0 1
76590: PUSH
76591: LD_INT 4
76593: PLUS
76594: PUSH
76595: LD_VAR 0 2
76599: PUSH
76600: LD_INT 4
76602: PLUS
76603: PUSH
76604: LD_INT 5
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: LIST
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: ST_TO_ADDR
// end ; 2 :
76619: GO 77178
76621: LD_INT 2
76623: DOUBLE
76624: EQUAL
76625: IFTRUE 76629
76627: GO 76758
76629: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76630: LD_ADDR_VAR 0 5
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_VAR 0 2
76644: PUSH
76645: LD_INT 3
76647: MINUS
76648: PUSH
76649: LD_INT 3
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: LIST
76656: PUSH
76657: LD_VAR 0 1
76661: PUSH
76662: LD_INT 4
76664: PLUS
76665: PUSH
76666: LD_VAR 0 2
76670: PUSH
76671: LD_INT 4
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: LIST
76678: PUSH
76679: LD_VAR 0 1
76683: PUSH
76684: LD_VAR 0 2
76688: PUSH
76689: LD_INT 4
76691: PLUS
76692: PUSH
76693: LD_INT 0
76695: PUSH
76696: EMPTY
76697: LIST
76698: LIST
76699: LIST
76700: PUSH
76701: LD_VAR 0 1
76705: PUSH
76706: LD_INT 3
76708: MINUS
76709: PUSH
76710: LD_VAR 0 2
76714: PUSH
76715: LD_INT 1
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: LIST
76722: PUSH
76723: LD_VAR 0 1
76727: PUSH
76728: LD_INT 4
76730: MINUS
76731: PUSH
76732: LD_VAR 0 2
76736: PUSH
76737: LD_INT 4
76739: MINUS
76740: PUSH
76741: LD_INT 2
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: LIST
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: ST_TO_ADDR
// end ; 3 :
76756: GO 77178
76758: LD_INT 3
76760: DOUBLE
76761: EQUAL
76762: IFTRUE 76766
76764: GO 76899
76766: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76767: LD_ADDR_VAR 0 5
76771: PUSH
76772: LD_VAR 0 1
76776: PUSH
76777: LD_INT 3
76779: PLUS
76780: PUSH
76781: LD_VAR 0 2
76785: PUSH
76786: LD_INT 4
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: LIST
76793: PUSH
76794: LD_VAR 0 1
76798: PUSH
76799: LD_INT 4
76801: PLUS
76802: PUSH
76803: LD_VAR 0 2
76807: PUSH
76808: LD_INT 4
76810: PLUS
76811: PUSH
76812: LD_INT 5
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: LIST
76819: PUSH
76820: LD_VAR 0 1
76824: PUSH
76825: LD_INT 4
76827: MINUS
76828: PUSH
76829: LD_VAR 0 2
76833: PUSH
76834: LD_INT 1
76836: PUSH
76837: EMPTY
76838: LIST
76839: LIST
76840: LIST
76841: PUSH
76842: LD_VAR 0 1
76846: PUSH
76847: LD_VAR 0 2
76851: PUSH
76852: LD_INT 4
76854: MINUS
76855: PUSH
76856: LD_INT 3
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: LIST
76863: PUSH
76864: LD_VAR 0 1
76868: PUSH
76869: LD_INT 3
76871: MINUS
76872: PUSH
76873: LD_VAR 0 2
76877: PUSH
76878: LD_INT 3
76880: MINUS
76881: PUSH
76882: LD_INT 2
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: LIST
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: LIST
76894: LIST
76895: LIST
76896: ST_TO_ADDR
// end ; 4 :
76897: GO 77178
76899: LD_INT 4
76901: DOUBLE
76902: EQUAL
76903: IFTRUE 76907
76905: GO 77040
76907: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76908: LD_ADDR_VAR 0 5
76912: PUSH
76913: LD_VAR 0 1
76917: PUSH
76918: LD_VAR 0 2
76922: PUSH
76923: LD_INT 4
76925: PLUS
76926: PUSH
76927: LD_INT 0
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: LIST
76934: PUSH
76935: LD_VAR 0 1
76939: PUSH
76940: LD_INT 3
76942: PLUS
76943: PUSH
76944: LD_VAR 0 2
76948: PUSH
76949: LD_INT 3
76951: PLUS
76952: PUSH
76953: LD_INT 5
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: LIST
76960: PUSH
76961: LD_VAR 0 1
76965: PUSH
76966: LD_INT 4
76968: PLUS
76969: PUSH
76970: LD_VAR 0 2
76974: PUSH
76975: LD_INT 4
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: LIST
76982: PUSH
76983: LD_VAR 0 1
76987: PUSH
76988: LD_VAR 0 2
76992: PUSH
76993: LD_INT 3
76995: MINUS
76996: PUSH
76997: LD_INT 3
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: LIST
77004: PUSH
77005: LD_VAR 0 1
77009: PUSH
77010: LD_INT 4
77012: MINUS
77013: PUSH
77014: LD_VAR 0 2
77018: PUSH
77019: LD_INT 4
77021: MINUS
77022: PUSH
77023: LD_INT 2
77025: PUSH
77026: EMPTY
77027: LIST
77028: LIST
77029: LIST
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: ST_TO_ADDR
// end ; 5 :
77038: GO 77178
77040: LD_INT 5
77042: DOUBLE
77043: EQUAL
77044: IFTRUE 77048
77046: GO 77177
77048: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77049: LD_ADDR_VAR 0 5
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_INT 4
77061: MINUS
77062: PUSH
77063: LD_VAR 0 2
77067: PUSH
77068: LD_INT 1
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: LIST
77075: PUSH
77076: LD_VAR 0 1
77080: PUSH
77081: LD_VAR 0 2
77085: PUSH
77086: LD_INT 4
77088: MINUS
77089: PUSH
77090: LD_INT 3
77092: PUSH
77093: EMPTY
77094: LIST
77095: LIST
77096: LIST
77097: PUSH
77098: LD_VAR 0 1
77102: PUSH
77103: LD_INT 4
77105: PLUS
77106: PUSH
77107: LD_VAR 0 2
77111: PUSH
77112: LD_INT 4
77114: PLUS
77115: PUSH
77116: LD_INT 5
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: LIST
77123: PUSH
77124: LD_VAR 0 1
77128: PUSH
77129: LD_INT 3
77131: PLUS
77132: PUSH
77133: LD_VAR 0 2
77137: PUSH
77138: LD_INT 4
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: LIST
77145: PUSH
77146: LD_VAR 0 1
77150: PUSH
77151: LD_VAR 0 2
77155: PUSH
77156: LD_INT 3
77158: PLUS
77159: PUSH
77160: LD_INT 0
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: LIST
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: LIST
77172: LIST
77173: LIST
77174: ST_TO_ADDR
// end ; end ;
77175: GO 77178
77177: POP
// result := list ;
77178: LD_ADDR_VAR 0 4
77182: PUSH
77183: LD_VAR 0 5
77187: ST_TO_ADDR
// end ;
77188: LD_VAR 0 4
77192: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77193: LD_INT 0
77195: PPUSH
77196: PPUSH
77197: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77198: LD_VAR 0 1
77202: NOT
77203: PUSH
77204: LD_VAR 0 2
77208: PUSH
77209: LD_INT 1
77211: PUSH
77212: LD_INT 2
77214: PUSH
77215: LD_INT 3
77217: PUSH
77218: LD_INT 4
77220: PUSH
77221: EMPTY
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: IN
77227: NOT
77228: OR
77229: IFFALSE 77233
// exit ;
77231: GO 77316
// tmp := [ ] ;
77233: LD_ADDR_VAR 0 5
77237: PUSH
77238: EMPTY
77239: ST_TO_ADDR
// for i in units do
77240: LD_ADDR_VAR 0 4
77244: PUSH
77245: LD_VAR 0 1
77249: PUSH
77250: FOR_IN
77251: IFFALSE 77285
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77253: LD_ADDR_VAR 0 5
77257: PUSH
77258: LD_VAR 0 5
77262: PPUSH
77263: LD_VAR 0 4
77267: PPUSH
77268: LD_VAR 0 2
77272: PPUSH
77273: CALL_OW 259
77277: PPUSH
77278: CALL 78677 0 2
77282: ST_TO_ADDR
77283: GO 77250
77285: POP
77286: POP
// if not tmp then
77287: LD_VAR 0 5
77291: NOT
77292: IFFALSE 77296
// exit ;
77294: GO 77316
// result := SortListByListDesc ( units , tmp ) ;
77296: LD_ADDR_VAR 0 3
77300: PUSH
77301: LD_VAR 0 1
77305: PPUSH
77306: LD_VAR 0 5
77310: PPUSH
77311: CALL_OW 77
77315: ST_TO_ADDR
// end ;
77316: LD_VAR 0 3
77320: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77321: LD_INT 0
77323: PPUSH
77324: PPUSH
77325: PPUSH
// result := false ;
77326: LD_ADDR_VAR 0 3
77330: PUSH
77331: LD_INT 0
77333: ST_TO_ADDR
// if not building then
77334: LD_VAR 0 2
77338: NOT
77339: IFFALSE 77343
// exit ;
77341: GO 77481
// x := GetX ( building ) ;
77343: LD_ADDR_VAR 0 4
77347: PUSH
77348: LD_VAR 0 2
77352: PPUSH
77353: CALL_OW 250
77357: ST_TO_ADDR
// y := GetY ( building ) ;
77358: LD_ADDR_VAR 0 5
77362: PUSH
77363: LD_VAR 0 2
77367: PPUSH
77368: CALL_OW 251
77372: ST_TO_ADDR
// if not x or not y then
77373: LD_VAR 0 4
77377: NOT
77378: PUSH
77379: LD_VAR 0 5
77383: NOT
77384: OR
77385: IFFALSE 77389
// exit ;
77387: GO 77481
// if GetTaskList ( unit ) then
77389: LD_VAR 0 1
77393: PPUSH
77394: CALL_OW 437
77398: IFFALSE 77481
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77400: LD_STRING e
77402: PUSH
77403: LD_VAR 0 1
77407: PPUSH
77408: CALL_OW 437
77412: PUSH
77413: LD_INT 1
77415: ARRAY
77416: PUSH
77417: LD_INT 1
77419: ARRAY
77420: EQUAL
77421: PUSH
77422: LD_VAR 0 4
77426: PUSH
77427: LD_VAR 0 1
77431: PPUSH
77432: CALL_OW 437
77436: PUSH
77437: LD_INT 1
77439: ARRAY
77440: PUSH
77441: LD_INT 2
77443: ARRAY
77444: EQUAL
77445: AND
77446: PUSH
77447: LD_VAR 0 5
77451: PUSH
77452: LD_VAR 0 1
77456: PPUSH
77457: CALL_OW 437
77461: PUSH
77462: LD_INT 1
77464: ARRAY
77465: PUSH
77466: LD_INT 3
77468: ARRAY
77469: EQUAL
77470: AND
77471: IFFALSE 77481
// result := true end ;
77473: LD_ADDR_VAR 0 3
77477: PUSH
77478: LD_INT 1
77480: ST_TO_ADDR
// end ;
77481: LD_VAR 0 3
77485: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77486: LD_INT 0
77488: PPUSH
// result := false ;
77489: LD_ADDR_VAR 0 4
77493: PUSH
77494: LD_INT 0
77496: ST_TO_ADDR
// if GetTaskList ( unit ) then
77497: LD_VAR 0 1
77501: PPUSH
77502: CALL_OW 437
77506: IFFALSE 77589
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77508: LD_STRING M
77510: PUSH
77511: LD_VAR 0 1
77515: PPUSH
77516: CALL_OW 437
77520: PUSH
77521: LD_INT 1
77523: ARRAY
77524: PUSH
77525: LD_INT 1
77527: ARRAY
77528: EQUAL
77529: PUSH
77530: LD_VAR 0 2
77534: PUSH
77535: LD_VAR 0 1
77539: PPUSH
77540: CALL_OW 437
77544: PUSH
77545: LD_INT 1
77547: ARRAY
77548: PUSH
77549: LD_INT 2
77551: ARRAY
77552: EQUAL
77553: AND
77554: PUSH
77555: LD_VAR 0 3
77559: PUSH
77560: LD_VAR 0 1
77564: PPUSH
77565: CALL_OW 437
77569: PUSH
77570: LD_INT 1
77572: ARRAY
77573: PUSH
77574: LD_INT 3
77576: ARRAY
77577: EQUAL
77578: AND
77579: IFFALSE 77589
// result := true ;
77581: LD_ADDR_VAR 0 4
77585: PUSH
77586: LD_INT 1
77588: ST_TO_ADDR
// end ; end ;
77589: LD_VAR 0 4
77593: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77594: LD_INT 0
77596: PPUSH
77597: PPUSH
77598: PPUSH
77599: PPUSH
// if not unit or not area then
77600: LD_VAR 0 1
77604: NOT
77605: PUSH
77606: LD_VAR 0 2
77610: NOT
77611: OR
77612: IFFALSE 77616
// exit ;
77614: GO 77780
// tmp := AreaToList ( area , i ) ;
77616: LD_ADDR_VAR 0 6
77620: PUSH
77621: LD_VAR 0 2
77625: PPUSH
77626: LD_VAR 0 5
77630: PPUSH
77631: CALL_OW 517
77635: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77636: LD_ADDR_VAR 0 5
77640: PUSH
77641: DOUBLE
77642: LD_INT 1
77644: DEC
77645: ST_TO_ADDR
77646: LD_VAR 0 6
77650: PUSH
77651: LD_INT 1
77653: ARRAY
77654: PUSH
77655: FOR_TO
77656: IFFALSE 77778
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77658: LD_ADDR_VAR 0 7
77662: PUSH
77663: LD_VAR 0 6
77667: PUSH
77668: LD_INT 1
77670: ARRAY
77671: PUSH
77672: LD_VAR 0 5
77676: ARRAY
77677: PUSH
77678: LD_VAR 0 6
77682: PUSH
77683: LD_INT 2
77685: ARRAY
77686: PUSH
77687: LD_VAR 0 5
77691: ARRAY
77692: PUSH
77693: EMPTY
77694: LIST
77695: LIST
77696: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77697: LD_VAR 0 7
77701: PUSH
77702: LD_INT 1
77704: ARRAY
77705: PPUSH
77706: LD_VAR 0 7
77710: PUSH
77711: LD_INT 2
77713: ARRAY
77714: PPUSH
77715: CALL_OW 428
77719: PUSH
77720: LD_INT 0
77722: EQUAL
77723: IFFALSE 77776
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77725: LD_VAR 0 1
77729: PPUSH
77730: LD_VAR 0 7
77734: PUSH
77735: LD_INT 1
77737: ARRAY
77738: PPUSH
77739: LD_VAR 0 7
77743: PUSH
77744: LD_INT 2
77746: ARRAY
77747: PPUSH
77748: LD_VAR 0 3
77752: PPUSH
77753: CALL_OW 48
// result := IsPlaced ( unit ) ;
77757: LD_ADDR_VAR 0 4
77761: PUSH
77762: LD_VAR 0 1
77766: PPUSH
77767: CALL_OW 305
77771: ST_TO_ADDR
// exit ;
77772: POP
77773: POP
77774: GO 77780
// end ; end ;
77776: GO 77655
77778: POP
77779: POP
// end ;
77780: LD_VAR 0 4
77784: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77785: LD_INT 0
77787: PPUSH
77788: PPUSH
77789: PPUSH
// if not side or side > 8 then
77790: LD_VAR 0 1
77794: NOT
77795: PUSH
77796: LD_VAR 0 1
77800: PUSH
77801: LD_INT 8
77803: GREATER
77804: OR
77805: IFFALSE 77809
// exit ;
77807: GO 77996
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77809: LD_ADDR_VAR 0 4
77813: PUSH
77814: LD_INT 22
77816: PUSH
77817: LD_VAR 0 1
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: LD_INT 21
77828: PUSH
77829: LD_INT 3
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PUSH
77836: EMPTY
77837: LIST
77838: LIST
77839: PPUSH
77840: CALL_OW 69
77844: ST_TO_ADDR
// if not tmp then
77845: LD_VAR 0 4
77849: NOT
77850: IFFALSE 77854
// exit ;
77852: GO 77996
// enable_addtolog := true ;
77854: LD_ADDR_OWVAR 81
77858: PUSH
77859: LD_INT 1
77861: ST_TO_ADDR
// AddToLog ( [ ) ;
77862: LD_STRING [
77864: PPUSH
77865: CALL_OW 561
// for i in tmp do
77869: LD_ADDR_VAR 0 3
77873: PUSH
77874: LD_VAR 0 4
77878: PUSH
77879: FOR_IN
77880: IFFALSE 77987
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77882: LD_STRING [
77884: PUSH
77885: LD_VAR 0 3
77889: PPUSH
77890: CALL_OW 266
77894: STR
77895: PUSH
77896: LD_STRING , 
77898: STR
77899: PUSH
77900: LD_VAR 0 3
77904: PPUSH
77905: CALL_OW 250
77909: STR
77910: PUSH
77911: LD_STRING , 
77913: STR
77914: PUSH
77915: LD_VAR 0 3
77919: PPUSH
77920: CALL_OW 251
77924: STR
77925: PUSH
77926: LD_STRING , 
77928: STR
77929: PUSH
77930: LD_VAR 0 3
77934: PPUSH
77935: CALL_OW 254
77939: STR
77940: PUSH
77941: LD_STRING , 
77943: STR
77944: PUSH
77945: LD_VAR 0 3
77949: PPUSH
77950: LD_INT 1
77952: PPUSH
77953: CALL_OW 268
77957: STR
77958: PUSH
77959: LD_STRING , 
77961: STR
77962: PUSH
77963: LD_VAR 0 3
77967: PPUSH
77968: LD_INT 2
77970: PPUSH
77971: CALL_OW 268
77975: STR
77976: PUSH
77977: LD_STRING ],
77979: STR
77980: PPUSH
77981: CALL_OW 561
// end ;
77985: GO 77879
77987: POP
77988: POP
// AddToLog ( ]; ) ;
77989: LD_STRING ];
77991: PPUSH
77992: CALL_OW 561
// end ;
77996: LD_VAR 0 2
78000: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78001: LD_INT 0
78003: PPUSH
78004: PPUSH
78005: PPUSH
78006: PPUSH
78007: PPUSH
// if not area or not rate or not max then
78008: LD_VAR 0 1
78012: NOT
78013: PUSH
78014: LD_VAR 0 2
78018: NOT
78019: OR
78020: PUSH
78021: LD_VAR 0 4
78025: NOT
78026: OR
78027: IFFALSE 78031
// exit ;
78029: GO 78220
// while 1 do
78031: LD_INT 1
78033: IFFALSE 78220
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78035: LD_ADDR_VAR 0 9
78039: PUSH
78040: LD_VAR 0 1
78044: PPUSH
78045: LD_INT 1
78047: PPUSH
78048: CALL_OW 287
78052: PUSH
78053: LD_INT 10
78055: MUL
78056: ST_TO_ADDR
// r := rate / 10 ;
78057: LD_ADDR_VAR 0 7
78061: PUSH
78062: LD_VAR 0 2
78066: PUSH
78067: LD_INT 10
78069: DIVREAL
78070: ST_TO_ADDR
// time := 1 1$00 ;
78071: LD_ADDR_VAR 0 8
78075: PUSH
78076: LD_INT 2100
78078: ST_TO_ADDR
// if amount < min then
78079: LD_VAR 0 9
78083: PUSH
78084: LD_VAR 0 3
78088: LESS
78089: IFFALSE 78107
// r := r * 2 else
78091: LD_ADDR_VAR 0 7
78095: PUSH
78096: LD_VAR 0 7
78100: PUSH
78101: LD_INT 2
78103: MUL
78104: ST_TO_ADDR
78105: GO 78133
// if amount > max then
78107: LD_VAR 0 9
78111: PUSH
78112: LD_VAR 0 4
78116: GREATER
78117: IFFALSE 78133
// r := r / 2 ;
78119: LD_ADDR_VAR 0 7
78123: PUSH
78124: LD_VAR 0 7
78128: PUSH
78129: LD_INT 2
78131: DIVREAL
78132: ST_TO_ADDR
// time := time / r ;
78133: LD_ADDR_VAR 0 8
78137: PUSH
78138: LD_VAR 0 8
78142: PUSH
78143: LD_VAR 0 7
78147: DIVREAL
78148: ST_TO_ADDR
// if time < 0 then
78149: LD_VAR 0 8
78153: PUSH
78154: LD_INT 0
78156: LESS
78157: IFFALSE 78174
// time := time * - 1 ;
78159: LD_ADDR_VAR 0 8
78163: PUSH
78164: LD_VAR 0 8
78168: PUSH
78169: LD_INT 1
78171: NEG
78172: MUL
78173: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78174: LD_VAR 0 8
78178: PUSH
78179: LD_INT 35
78181: PPUSH
78182: LD_INT 875
78184: PPUSH
78185: CALL_OW 12
78189: PLUS
78190: PPUSH
78191: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78195: LD_INT 1
78197: PPUSH
78198: LD_INT 5
78200: PPUSH
78201: CALL_OW 12
78205: PPUSH
78206: LD_VAR 0 1
78210: PPUSH
78211: LD_INT 1
78213: PPUSH
78214: CALL_OW 55
// end ;
78218: GO 78031
// end ;
78220: LD_VAR 0 5
78224: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78225: LD_INT 0
78227: PPUSH
78228: PPUSH
78229: PPUSH
78230: PPUSH
78231: PPUSH
78232: PPUSH
78233: PPUSH
78234: PPUSH
// if not turrets or not factories then
78235: LD_VAR 0 1
78239: NOT
78240: PUSH
78241: LD_VAR 0 2
78245: NOT
78246: OR
78247: IFFALSE 78251
// exit ;
78249: GO 78558
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78251: LD_ADDR_VAR 0 10
78255: PUSH
78256: LD_INT 5
78258: PUSH
78259: LD_INT 6
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: PUSH
78266: LD_INT 2
78268: PUSH
78269: LD_INT 4
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: PUSH
78276: LD_INT 3
78278: PUSH
78279: LD_INT 5
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: PUSH
78286: EMPTY
78287: LIST
78288: LIST
78289: LIST
78290: PUSH
78291: LD_INT 24
78293: PUSH
78294: LD_INT 25
78296: PUSH
78297: EMPTY
78298: LIST
78299: LIST
78300: PUSH
78301: LD_INT 23
78303: PUSH
78304: LD_INT 27
78306: PUSH
78307: EMPTY
78308: LIST
78309: LIST
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: PUSH
78315: LD_INT 42
78317: PUSH
78318: LD_INT 43
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: PUSH
78325: LD_INT 44
78327: PUSH
78328: LD_INT 46
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: PUSH
78335: LD_INT 45
78337: PUSH
78338: LD_INT 47
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: LIST
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: LIST
78354: ST_TO_ADDR
// result := [ ] ;
78355: LD_ADDR_VAR 0 3
78359: PUSH
78360: EMPTY
78361: ST_TO_ADDR
// for i in turrets do
78362: LD_ADDR_VAR 0 4
78366: PUSH
78367: LD_VAR 0 1
78371: PUSH
78372: FOR_IN
78373: IFFALSE 78556
// begin nat := GetNation ( i ) ;
78375: LD_ADDR_VAR 0 7
78379: PUSH
78380: LD_VAR 0 4
78384: PPUSH
78385: CALL_OW 248
78389: ST_TO_ADDR
// weapon := 0 ;
78390: LD_ADDR_VAR 0 8
78394: PUSH
78395: LD_INT 0
78397: ST_TO_ADDR
// if not nat then
78398: LD_VAR 0 7
78402: NOT
78403: IFFALSE 78407
// continue ;
78405: GO 78372
// for j in list [ nat ] do
78407: LD_ADDR_VAR 0 5
78411: PUSH
78412: LD_VAR 0 10
78416: PUSH
78417: LD_VAR 0 7
78421: ARRAY
78422: PUSH
78423: FOR_IN
78424: IFFALSE 78465
// if GetBWeapon ( i ) = j [ 1 ] then
78426: LD_VAR 0 4
78430: PPUSH
78431: CALL_OW 269
78435: PUSH
78436: LD_VAR 0 5
78440: PUSH
78441: LD_INT 1
78443: ARRAY
78444: EQUAL
78445: IFFALSE 78463
// begin weapon := j [ 2 ] ;
78447: LD_ADDR_VAR 0 8
78451: PUSH
78452: LD_VAR 0 5
78456: PUSH
78457: LD_INT 2
78459: ARRAY
78460: ST_TO_ADDR
// break ;
78461: GO 78465
// end ;
78463: GO 78423
78465: POP
78466: POP
// if not weapon then
78467: LD_VAR 0 8
78471: NOT
78472: IFFALSE 78476
// continue ;
78474: GO 78372
// for k in factories do
78476: LD_ADDR_VAR 0 6
78480: PUSH
78481: LD_VAR 0 2
78485: PUSH
78486: FOR_IN
78487: IFFALSE 78552
// begin weapons := AvailableWeaponList ( k ) ;
78489: LD_ADDR_VAR 0 9
78493: PUSH
78494: LD_VAR 0 6
78498: PPUSH
78499: CALL_OW 478
78503: ST_TO_ADDR
// if not weapons then
78504: LD_VAR 0 9
78508: NOT
78509: IFFALSE 78513
// continue ;
78511: GO 78486
// if weapon in weapons then
78513: LD_VAR 0 8
78517: PUSH
78518: LD_VAR 0 9
78522: IN
78523: IFFALSE 78550
// begin result := [ i , weapon ] ;
78525: LD_ADDR_VAR 0 3
78529: PUSH
78530: LD_VAR 0 4
78534: PUSH
78535: LD_VAR 0 8
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: ST_TO_ADDR
// exit ;
78544: POP
78545: POP
78546: POP
78547: POP
78548: GO 78558
// end ; end ;
78550: GO 78486
78552: POP
78553: POP
// end ;
78554: GO 78372
78556: POP
78557: POP
// end ;
78558: LD_VAR 0 3
78562: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78563: LD_INT 0
78565: PPUSH
// if not side or side > 8 then
78566: LD_VAR 0 3
78570: NOT
78571: PUSH
78572: LD_VAR 0 3
78576: PUSH
78577: LD_INT 8
78579: GREATER
78580: OR
78581: IFFALSE 78585
// exit ;
78583: GO 78644
// if not range then
78585: LD_VAR 0 4
78589: NOT
78590: IFFALSE 78601
// range := - 12 ;
78592: LD_ADDR_VAR 0 4
78596: PUSH
78597: LD_INT 12
78599: NEG
78600: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78601: LD_VAR 0 1
78605: PPUSH
78606: LD_VAR 0 2
78610: PPUSH
78611: LD_VAR 0 3
78615: PPUSH
78616: LD_VAR 0 4
78620: PPUSH
78621: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78625: LD_VAR 0 1
78629: PPUSH
78630: LD_VAR 0 2
78634: PPUSH
78635: LD_VAR 0 3
78639: PPUSH
78640: CALL_OW 331
// end ;
78644: LD_VAR 0 5
78648: RET
// export function Video ( mode ) ; begin
78649: LD_INT 0
78651: PPUSH
// ingame_video = mode ;
78652: LD_ADDR_OWVAR 52
78656: PUSH
78657: LD_VAR 0 1
78661: ST_TO_ADDR
// interface_hidden = mode ;
78662: LD_ADDR_OWVAR 54
78666: PUSH
78667: LD_VAR 0 1
78671: ST_TO_ADDR
// end ;
78672: LD_VAR 0 2
78676: RET
// export function Join ( array , element ) ; begin
78677: LD_INT 0
78679: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78680: LD_ADDR_VAR 0 3
78684: PUSH
78685: LD_VAR 0 1
78689: PPUSH
78690: LD_VAR 0 1
78694: PUSH
78695: LD_INT 1
78697: PLUS
78698: PPUSH
78699: LD_VAR 0 2
78703: PPUSH
78704: CALL_OW 1
78708: ST_TO_ADDR
// end ;
78709: LD_VAR 0 3
78713: RET
// export function JoinUnion ( array , element ) ; begin
78714: LD_INT 0
78716: PPUSH
// result := array union element ;
78717: LD_ADDR_VAR 0 3
78721: PUSH
78722: LD_VAR 0 1
78726: PUSH
78727: LD_VAR 0 2
78731: UNION
78732: ST_TO_ADDR
// end ;
78733: LD_VAR 0 3
78737: RET
// export function GetBehemoths ( side ) ; begin
78738: LD_INT 0
78740: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78741: LD_ADDR_VAR 0 2
78745: PUSH
78746: LD_INT 22
78748: PUSH
78749: LD_VAR 0 1
78753: PUSH
78754: EMPTY
78755: LIST
78756: LIST
78757: PUSH
78758: LD_INT 31
78760: PUSH
78761: LD_INT 25
78763: PUSH
78764: EMPTY
78765: LIST
78766: LIST
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: PPUSH
78772: CALL_OW 69
78776: ST_TO_ADDR
// end ;
78777: LD_VAR 0 2
78781: RET
// export function Shuffle ( array ) ; var i , index ; begin
78782: LD_INT 0
78784: PPUSH
78785: PPUSH
78786: PPUSH
// result := [ ] ;
78787: LD_ADDR_VAR 0 2
78791: PUSH
78792: EMPTY
78793: ST_TO_ADDR
// if not array then
78794: LD_VAR 0 1
78798: NOT
78799: IFFALSE 78803
// exit ;
78801: GO 78902
// Randomize ;
78803: CALL_OW 10
// for i = array downto 1 do
78807: LD_ADDR_VAR 0 3
78811: PUSH
78812: DOUBLE
78813: LD_VAR 0 1
78817: INC
78818: ST_TO_ADDR
78819: LD_INT 1
78821: PUSH
78822: FOR_DOWNTO
78823: IFFALSE 78900
// begin index := rand ( 1 , array ) ;
78825: LD_ADDR_VAR 0 4
78829: PUSH
78830: LD_INT 1
78832: PPUSH
78833: LD_VAR 0 1
78837: PPUSH
78838: CALL_OW 12
78842: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78843: LD_ADDR_VAR 0 2
78847: PUSH
78848: LD_VAR 0 2
78852: PPUSH
78853: LD_VAR 0 2
78857: PUSH
78858: LD_INT 1
78860: PLUS
78861: PPUSH
78862: LD_VAR 0 1
78866: PUSH
78867: LD_VAR 0 4
78871: ARRAY
78872: PPUSH
78873: CALL_OW 2
78877: ST_TO_ADDR
// array := Delete ( array , index ) ;
78878: LD_ADDR_VAR 0 1
78882: PUSH
78883: LD_VAR 0 1
78887: PPUSH
78888: LD_VAR 0 4
78892: PPUSH
78893: CALL_OW 3
78897: ST_TO_ADDR
// end ;
78898: GO 78822
78900: POP
78901: POP
// end ;
78902: LD_VAR 0 2
78906: RET
// export function GetBaseMaterials ( base ) ; begin
78907: LD_INT 0
78909: PPUSH
// result := [ 0 , 0 , 0 ] ;
78910: LD_ADDR_VAR 0 2
78914: PUSH
78915: LD_INT 0
78917: PUSH
78918: LD_INT 0
78920: PUSH
78921: LD_INT 0
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: LIST
78928: ST_TO_ADDR
// if not base then
78929: LD_VAR 0 1
78933: NOT
78934: IFFALSE 78938
// exit ;
78936: GO 78987
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78938: LD_ADDR_VAR 0 2
78942: PUSH
78943: LD_VAR 0 1
78947: PPUSH
78948: LD_INT 1
78950: PPUSH
78951: CALL_OW 275
78955: PUSH
78956: LD_VAR 0 1
78960: PPUSH
78961: LD_INT 2
78963: PPUSH
78964: CALL_OW 275
78968: PUSH
78969: LD_VAR 0 1
78973: PPUSH
78974: LD_INT 3
78976: PPUSH
78977: CALL_OW 275
78981: PUSH
78982: EMPTY
78983: LIST
78984: LIST
78985: LIST
78986: ST_TO_ADDR
// end ;
78987: LD_VAR 0 2
78991: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78992: LD_INT 0
78994: PPUSH
78995: PPUSH
// result := array ;
78996: LD_ADDR_VAR 0 3
79000: PUSH
79001: LD_VAR 0 1
79005: ST_TO_ADDR
// if size >= result then
79006: LD_VAR 0 2
79010: PUSH
79011: LD_VAR 0 3
79015: GREATEREQUAL
79016: IFFALSE 79020
// exit ;
79018: GO 79070
// if size then
79020: LD_VAR 0 2
79024: IFFALSE 79070
// for i := array downto size do
79026: LD_ADDR_VAR 0 4
79030: PUSH
79031: DOUBLE
79032: LD_VAR 0 1
79036: INC
79037: ST_TO_ADDR
79038: LD_VAR 0 2
79042: PUSH
79043: FOR_DOWNTO
79044: IFFALSE 79068
// result := Delete ( result , result ) ;
79046: LD_ADDR_VAR 0 3
79050: PUSH
79051: LD_VAR 0 3
79055: PPUSH
79056: LD_VAR 0 3
79060: PPUSH
79061: CALL_OW 3
79065: ST_TO_ADDR
79066: GO 79043
79068: POP
79069: POP
// end ;
79070: LD_VAR 0 3
79074: RET
// export function ComExit ( unit ) ; var tmp ; begin
79075: LD_INT 0
79077: PPUSH
79078: PPUSH
// if not IsInUnit ( unit ) then
79079: LD_VAR 0 1
79083: PPUSH
79084: CALL_OW 310
79088: NOT
79089: IFFALSE 79093
// exit ;
79091: GO 79153
// tmp := IsInUnit ( unit ) ;
79093: LD_ADDR_VAR 0 3
79097: PUSH
79098: LD_VAR 0 1
79102: PPUSH
79103: CALL_OW 310
79107: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79108: LD_VAR 0 3
79112: PPUSH
79113: CALL_OW 247
79117: PUSH
79118: LD_INT 2
79120: EQUAL
79121: IFFALSE 79134
// ComExitVehicle ( unit ) else
79123: LD_VAR 0 1
79127: PPUSH
79128: CALL_OW 121
79132: GO 79143
// ComExitBuilding ( unit ) ;
79134: LD_VAR 0 1
79138: PPUSH
79139: CALL_OW 122
// result := tmp ;
79143: LD_ADDR_VAR 0 2
79147: PUSH
79148: LD_VAR 0 3
79152: ST_TO_ADDR
// end ;
79153: LD_VAR 0 2
79157: RET
// export function ComExitAll ( units ) ; var i ; begin
79158: LD_INT 0
79160: PPUSH
79161: PPUSH
// if not units then
79162: LD_VAR 0 1
79166: NOT
79167: IFFALSE 79171
// exit ;
79169: GO 79197
// for i in units do
79171: LD_ADDR_VAR 0 3
79175: PUSH
79176: LD_VAR 0 1
79180: PUSH
79181: FOR_IN
79182: IFFALSE 79195
// ComExit ( i ) ;
79184: LD_VAR 0 3
79188: PPUSH
79189: CALL 79075 0 1
79193: GO 79181
79195: POP
79196: POP
// end ;
79197: LD_VAR 0 2
79201: RET
// export function ResetHc ; begin
79202: LD_INT 0
79204: PPUSH
// InitHc ;
79205: CALL_OW 19
// hc_importance := 0 ;
79209: LD_ADDR_OWVAR 32
79213: PUSH
79214: LD_INT 0
79216: ST_TO_ADDR
// end ;
79217: LD_VAR 0 1
79221: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79222: LD_INT 0
79224: PPUSH
79225: PPUSH
79226: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79227: LD_ADDR_VAR 0 6
79231: PUSH
79232: LD_VAR 0 1
79236: PUSH
79237: LD_VAR 0 3
79241: PLUS
79242: PUSH
79243: LD_INT 2
79245: DIV
79246: ST_TO_ADDR
// if _x < 0 then
79247: LD_VAR 0 6
79251: PUSH
79252: LD_INT 0
79254: LESS
79255: IFFALSE 79272
// _x := _x * - 1 ;
79257: LD_ADDR_VAR 0 6
79261: PUSH
79262: LD_VAR 0 6
79266: PUSH
79267: LD_INT 1
79269: NEG
79270: MUL
79271: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79272: LD_ADDR_VAR 0 7
79276: PUSH
79277: LD_VAR 0 2
79281: PUSH
79282: LD_VAR 0 4
79286: PLUS
79287: PUSH
79288: LD_INT 2
79290: DIV
79291: ST_TO_ADDR
// if _y < 0 then
79292: LD_VAR 0 7
79296: PUSH
79297: LD_INT 0
79299: LESS
79300: IFFALSE 79317
// _y := _y * - 1 ;
79302: LD_ADDR_VAR 0 7
79306: PUSH
79307: LD_VAR 0 7
79311: PUSH
79312: LD_INT 1
79314: NEG
79315: MUL
79316: ST_TO_ADDR
// result := [ _x , _y ] ;
79317: LD_ADDR_VAR 0 5
79321: PUSH
79322: LD_VAR 0 6
79326: PUSH
79327: LD_VAR 0 7
79331: PUSH
79332: EMPTY
79333: LIST
79334: LIST
79335: ST_TO_ADDR
// end ;
79336: LD_VAR 0 5
79340: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79341: LD_INT 0
79343: PPUSH
79344: PPUSH
79345: PPUSH
79346: PPUSH
// task := GetTaskList ( unit ) ;
79347: LD_ADDR_VAR 0 7
79351: PUSH
79352: LD_VAR 0 1
79356: PPUSH
79357: CALL_OW 437
79361: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79362: LD_VAR 0 7
79366: NOT
79367: PUSH
79368: LD_VAR 0 1
79372: PPUSH
79373: LD_VAR 0 2
79377: PPUSH
79378: CALL_OW 308
79382: NOT
79383: AND
79384: IFFALSE 79388
// exit ;
79386: GO 79506
// if IsInArea ( unit , area ) then
79388: LD_VAR 0 1
79392: PPUSH
79393: LD_VAR 0 2
79397: PPUSH
79398: CALL_OW 308
79402: IFFALSE 79420
// begin ComMoveToArea ( unit , goAway ) ;
79404: LD_VAR 0 1
79408: PPUSH
79409: LD_VAR 0 3
79413: PPUSH
79414: CALL_OW 113
// exit ;
79418: GO 79506
// end ; if task [ 1 ] [ 1 ] <> M then
79420: LD_VAR 0 7
79424: PUSH
79425: LD_INT 1
79427: ARRAY
79428: PUSH
79429: LD_INT 1
79431: ARRAY
79432: PUSH
79433: LD_STRING M
79435: NONEQUAL
79436: IFFALSE 79440
// exit ;
79438: GO 79506
// x := task [ 1 ] [ 2 ] ;
79440: LD_ADDR_VAR 0 5
79444: PUSH
79445: LD_VAR 0 7
79449: PUSH
79450: LD_INT 1
79452: ARRAY
79453: PUSH
79454: LD_INT 2
79456: ARRAY
79457: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79458: LD_ADDR_VAR 0 6
79462: PUSH
79463: LD_VAR 0 7
79467: PUSH
79468: LD_INT 1
79470: ARRAY
79471: PUSH
79472: LD_INT 3
79474: ARRAY
79475: ST_TO_ADDR
// if InArea ( x , y , area ) then
79476: LD_VAR 0 5
79480: PPUSH
79481: LD_VAR 0 6
79485: PPUSH
79486: LD_VAR 0 2
79490: PPUSH
79491: CALL_OW 309
79495: IFFALSE 79506
// ComStop ( unit ) ;
79497: LD_VAR 0 1
79501: PPUSH
79502: CALL_OW 141
// end ;
79506: LD_VAR 0 4
79510: RET
// export function Abs ( value ) ; begin
79511: LD_INT 0
79513: PPUSH
// result := value ;
79514: LD_ADDR_VAR 0 2
79518: PUSH
79519: LD_VAR 0 1
79523: ST_TO_ADDR
// if value < 0 then
79524: LD_VAR 0 1
79528: PUSH
79529: LD_INT 0
79531: LESS
79532: IFFALSE 79549
// result := value * - 1 ;
79534: LD_ADDR_VAR 0 2
79538: PUSH
79539: LD_VAR 0 1
79543: PUSH
79544: LD_INT 1
79546: NEG
79547: MUL
79548: ST_TO_ADDR
// end ;
79549: LD_VAR 0 2
79553: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79554: LD_INT 0
79556: PPUSH
79557: PPUSH
79558: PPUSH
79559: PPUSH
79560: PPUSH
79561: PPUSH
79562: PPUSH
79563: PPUSH
// if not unit or not building then
79564: LD_VAR 0 1
79568: NOT
79569: PUSH
79570: LD_VAR 0 2
79574: NOT
79575: OR
79576: IFFALSE 79580
// exit ;
79578: GO 79806
// x := GetX ( building ) ;
79580: LD_ADDR_VAR 0 4
79584: PUSH
79585: LD_VAR 0 2
79589: PPUSH
79590: CALL_OW 250
79594: ST_TO_ADDR
// y := GetY ( building ) ;
79595: LD_ADDR_VAR 0 6
79599: PUSH
79600: LD_VAR 0 2
79604: PPUSH
79605: CALL_OW 251
79609: ST_TO_ADDR
// d := GetDir ( building ) ;
79610: LD_ADDR_VAR 0 8
79614: PUSH
79615: LD_VAR 0 2
79619: PPUSH
79620: CALL_OW 254
79624: ST_TO_ADDR
// r := 4 ;
79625: LD_ADDR_VAR 0 9
79629: PUSH
79630: LD_INT 4
79632: ST_TO_ADDR
// for i := 1 to 5 do
79633: LD_ADDR_VAR 0 10
79637: PUSH
79638: DOUBLE
79639: LD_INT 1
79641: DEC
79642: ST_TO_ADDR
79643: LD_INT 5
79645: PUSH
79646: FOR_TO
79647: IFFALSE 79804
// begin _x := ShiftX ( x , d , r + i ) ;
79649: LD_ADDR_VAR 0 5
79653: PUSH
79654: LD_VAR 0 4
79658: PPUSH
79659: LD_VAR 0 8
79663: PPUSH
79664: LD_VAR 0 9
79668: PUSH
79669: LD_VAR 0 10
79673: PLUS
79674: PPUSH
79675: CALL_OW 272
79679: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79680: LD_ADDR_VAR 0 7
79684: PUSH
79685: LD_VAR 0 6
79689: PPUSH
79690: LD_VAR 0 8
79694: PPUSH
79695: LD_VAR 0 9
79699: PUSH
79700: LD_VAR 0 10
79704: PLUS
79705: PPUSH
79706: CALL_OW 273
79710: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79711: LD_VAR 0 5
79715: PPUSH
79716: LD_VAR 0 7
79720: PPUSH
79721: CALL_OW 488
79725: PUSH
79726: LD_VAR 0 5
79730: PPUSH
79731: LD_VAR 0 7
79735: PPUSH
79736: CALL_OW 428
79740: PPUSH
79741: CALL_OW 247
79745: PUSH
79746: LD_INT 3
79748: PUSH
79749: LD_INT 2
79751: PUSH
79752: EMPTY
79753: LIST
79754: LIST
79755: IN
79756: NOT
79757: AND
79758: IFFALSE 79802
// begin ComMoveXY ( unit , _x , _y ) ;
79760: LD_VAR 0 1
79764: PPUSH
79765: LD_VAR 0 5
79769: PPUSH
79770: LD_VAR 0 7
79774: PPUSH
79775: CALL_OW 111
// result := [ _x , _y ] ;
79779: LD_ADDR_VAR 0 3
79783: PUSH
79784: LD_VAR 0 5
79788: PUSH
79789: LD_VAR 0 7
79793: PUSH
79794: EMPTY
79795: LIST
79796: LIST
79797: ST_TO_ADDR
// exit ;
79798: POP
79799: POP
79800: GO 79806
// end ; end ;
79802: GO 79646
79804: POP
79805: POP
// end ;
79806: LD_VAR 0 3
79810: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79811: LD_INT 0
79813: PPUSH
79814: PPUSH
79815: PPUSH
// result := 0 ;
79816: LD_ADDR_VAR 0 3
79820: PUSH
79821: LD_INT 0
79823: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79824: LD_VAR 0 1
79828: PUSH
79829: LD_INT 0
79831: LESS
79832: PUSH
79833: LD_VAR 0 1
79837: PUSH
79838: LD_INT 8
79840: GREATER
79841: OR
79842: PUSH
79843: LD_VAR 0 2
79847: PUSH
79848: LD_INT 0
79850: LESS
79851: OR
79852: PUSH
79853: LD_VAR 0 2
79857: PUSH
79858: LD_INT 8
79860: GREATER
79861: OR
79862: IFFALSE 79866
// exit ;
79864: GO 79941
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79866: LD_ADDR_VAR 0 4
79870: PUSH
79871: LD_INT 22
79873: PUSH
79874: LD_VAR 0 2
79878: PUSH
79879: EMPTY
79880: LIST
79881: LIST
79882: PPUSH
79883: CALL_OW 69
79887: PUSH
79888: FOR_IN
79889: IFFALSE 79939
// begin un := UnitShoot ( i ) ;
79891: LD_ADDR_VAR 0 5
79895: PUSH
79896: LD_VAR 0 4
79900: PPUSH
79901: CALL_OW 504
79905: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79906: LD_VAR 0 5
79910: PPUSH
79911: CALL_OW 255
79915: PUSH
79916: LD_VAR 0 1
79920: EQUAL
79921: IFFALSE 79937
// begin result := un ;
79923: LD_ADDR_VAR 0 3
79927: PUSH
79928: LD_VAR 0 5
79932: ST_TO_ADDR
// exit ;
79933: POP
79934: POP
79935: GO 79941
// end ; end ;
79937: GO 79888
79939: POP
79940: POP
// end ;
79941: LD_VAR 0 3
79945: RET
// export function GetCargoBay ( units ) ; begin
79946: LD_INT 0
79948: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79949: LD_ADDR_VAR 0 2
79953: PUSH
79954: LD_VAR 0 1
79958: PPUSH
79959: LD_INT 2
79961: PUSH
79962: LD_INT 34
79964: PUSH
79965: LD_INT 12
79967: PUSH
79968: EMPTY
79969: LIST
79970: LIST
79971: PUSH
79972: LD_INT 34
79974: PUSH
79975: LD_INT 51
79977: PUSH
79978: EMPTY
79979: LIST
79980: LIST
79981: PUSH
79982: LD_INT 34
79984: PUSH
79985: LD_INT 32
79987: PUSH
79988: EMPTY
79989: LIST
79990: LIST
79991: PUSH
79992: LD_INT 34
79994: PUSH
79995: LD_INT 89
79997: PUSH
79998: EMPTY
79999: LIST
80000: LIST
80001: PUSH
80002: EMPTY
80003: LIST
80004: LIST
80005: LIST
80006: LIST
80007: LIST
80008: PPUSH
80009: CALL_OW 72
80013: ST_TO_ADDR
// end ;
80014: LD_VAR 0 2
80018: RET
// export function Negate ( value ) ; begin
80019: LD_INT 0
80021: PPUSH
// result := not value ;
80022: LD_ADDR_VAR 0 2
80026: PUSH
80027: LD_VAR 0 1
80031: NOT
80032: ST_TO_ADDR
// end ;
80033: LD_VAR 0 2
80037: RET
// export function Inc ( value ) ; begin
80038: LD_INT 0
80040: PPUSH
// result := value + 1 ;
80041: LD_ADDR_VAR 0 2
80045: PUSH
80046: LD_VAR 0 1
80050: PUSH
80051: LD_INT 1
80053: PLUS
80054: ST_TO_ADDR
// end ;
80055: LD_VAR 0 2
80059: RET
// export function Dec ( value ) ; begin
80060: LD_INT 0
80062: PPUSH
// result := value - 1 ;
80063: LD_ADDR_VAR 0 2
80067: PUSH
80068: LD_VAR 0 1
80072: PUSH
80073: LD_INT 1
80075: MINUS
80076: ST_TO_ADDR
// end ;
80077: LD_VAR 0 2
80081: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80082: LD_INT 0
80084: PPUSH
80085: PPUSH
80086: PPUSH
80087: PPUSH
80088: PPUSH
80089: PPUSH
80090: PPUSH
80091: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80092: LD_VAR 0 1
80096: PPUSH
80097: LD_VAR 0 2
80101: PPUSH
80102: CALL_OW 488
80106: NOT
80107: PUSH
80108: LD_VAR 0 3
80112: PPUSH
80113: LD_VAR 0 4
80117: PPUSH
80118: CALL_OW 488
80122: NOT
80123: OR
80124: IFFALSE 80137
// begin result := - 1 ;
80126: LD_ADDR_VAR 0 5
80130: PUSH
80131: LD_INT 1
80133: NEG
80134: ST_TO_ADDR
// exit ;
80135: GO 80372
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80137: LD_ADDR_VAR 0 12
80141: PUSH
80142: LD_VAR 0 1
80146: PPUSH
80147: LD_VAR 0 2
80151: PPUSH
80152: LD_VAR 0 3
80156: PPUSH
80157: LD_VAR 0 4
80161: PPUSH
80162: CALL 79222 0 4
80166: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80167: LD_ADDR_VAR 0 11
80171: PUSH
80172: LD_VAR 0 1
80176: PPUSH
80177: LD_VAR 0 2
80181: PPUSH
80182: LD_VAR 0 12
80186: PUSH
80187: LD_INT 1
80189: ARRAY
80190: PPUSH
80191: LD_VAR 0 12
80195: PUSH
80196: LD_INT 2
80198: ARRAY
80199: PPUSH
80200: CALL_OW 298
80204: ST_TO_ADDR
// distance := 9999 ;
80205: LD_ADDR_VAR 0 10
80209: PUSH
80210: LD_INT 9999
80212: ST_TO_ADDR
// for i := 0 to 5 do
80213: LD_ADDR_VAR 0 6
80217: PUSH
80218: DOUBLE
80219: LD_INT 0
80221: DEC
80222: ST_TO_ADDR
80223: LD_INT 5
80225: PUSH
80226: FOR_TO
80227: IFFALSE 80370
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80229: LD_ADDR_VAR 0 7
80233: PUSH
80234: LD_VAR 0 1
80238: PPUSH
80239: LD_VAR 0 6
80243: PPUSH
80244: LD_VAR 0 11
80248: PPUSH
80249: CALL_OW 272
80253: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80254: LD_ADDR_VAR 0 8
80258: PUSH
80259: LD_VAR 0 2
80263: PPUSH
80264: LD_VAR 0 6
80268: PPUSH
80269: LD_VAR 0 11
80273: PPUSH
80274: CALL_OW 273
80278: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80279: LD_VAR 0 7
80283: PPUSH
80284: LD_VAR 0 8
80288: PPUSH
80289: CALL_OW 488
80293: NOT
80294: IFFALSE 80298
// continue ;
80296: GO 80226
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80298: LD_ADDR_VAR 0 9
80302: PUSH
80303: LD_VAR 0 12
80307: PUSH
80308: LD_INT 1
80310: ARRAY
80311: PPUSH
80312: LD_VAR 0 12
80316: PUSH
80317: LD_INT 2
80319: ARRAY
80320: PPUSH
80321: LD_VAR 0 7
80325: PPUSH
80326: LD_VAR 0 8
80330: PPUSH
80331: CALL_OW 298
80335: ST_TO_ADDR
// if tmp < distance then
80336: LD_VAR 0 9
80340: PUSH
80341: LD_VAR 0 10
80345: LESS
80346: IFFALSE 80368
// begin result := i ;
80348: LD_ADDR_VAR 0 5
80352: PUSH
80353: LD_VAR 0 6
80357: ST_TO_ADDR
// distance := tmp ;
80358: LD_ADDR_VAR 0 10
80362: PUSH
80363: LD_VAR 0 9
80367: ST_TO_ADDR
// end ; end ;
80368: GO 80226
80370: POP
80371: POP
// end ;
80372: LD_VAR 0 5
80376: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80377: LD_INT 0
80379: PPUSH
80380: PPUSH
// if not driver or not IsInUnit ( driver ) then
80381: LD_VAR 0 1
80385: NOT
80386: PUSH
80387: LD_VAR 0 1
80391: PPUSH
80392: CALL_OW 310
80396: NOT
80397: OR
80398: IFFALSE 80402
// exit ;
80400: GO 80492
// vehicle := IsInUnit ( driver ) ;
80402: LD_ADDR_VAR 0 3
80406: PUSH
80407: LD_VAR 0 1
80411: PPUSH
80412: CALL_OW 310
80416: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80417: LD_VAR 0 1
80421: PPUSH
80422: LD_STRING \
80424: PUSH
80425: LD_INT 0
80427: PUSH
80428: LD_INT 0
80430: PUSH
80431: LD_INT 0
80433: PUSH
80434: LD_INT 0
80436: PUSH
80437: LD_INT 0
80439: PUSH
80440: LD_INT 0
80442: PUSH
80443: EMPTY
80444: LIST
80445: LIST
80446: LIST
80447: LIST
80448: LIST
80449: LIST
80450: LIST
80451: PUSH
80452: LD_STRING E
80454: PUSH
80455: LD_INT 0
80457: PUSH
80458: LD_INT 0
80460: PUSH
80461: LD_VAR 0 3
80465: PUSH
80466: LD_INT 0
80468: PUSH
80469: LD_INT 0
80471: PUSH
80472: LD_INT 0
80474: PUSH
80475: EMPTY
80476: LIST
80477: LIST
80478: LIST
80479: LIST
80480: LIST
80481: LIST
80482: LIST
80483: PUSH
80484: EMPTY
80485: LIST
80486: LIST
80487: PPUSH
80488: CALL_OW 446
// end ;
80492: LD_VAR 0 2
80496: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80497: LD_INT 0
80499: PPUSH
80500: PPUSH
// if not driver or not IsInUnit ( driver ) then
80501: LD_VAR 0 1
80505: NOT
80506: PUSH
80507: LD_VAR 0 1
80511: PPUSH
80512: CALL_OW 310
80516: NOT
80517: OR
80518: IFFALSE 80522
// exit ;
80520: GO 80612
// vehicle := IsInUnit ( driver ) ;
80522: LD_ADDR_VAR 0 3
80526: PUSH
80527: LD_VAR 0 1
80531: PPUSH
80532: CALL_OW 310
80536: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80537: LD_VAR 0 1
80541: PPUSH
80542: LD_STRING \
80544: PUSH
80545: LD_INT 0
80547: PUSH
80548: LD_INT 0
80550: PUSH
80551: LD_INT 0
80553: PUSH
80554: LD_INT 0
80556: PUSH
80557: LD_INT 0
80559: PUSH
80560: LD_INT 0
80562: PUSH
80563: EMPTY
80564: LIST
80565: LIST
80566: LIST
80567: LIST
80568: LIST
80569: LIST
80570: LIST
80571: PUSH
80572: LD_STRING E
80574: PUSH
80575: LD_INT 0
80577: PUSH
80578: LD_INT 0
80580: PUSH
80581: LD_VAR 0 3
80585: PUSH
80586: LD_INT 0
80588: PUSH
80589: LD_INT 0
80591: PUSH
80592: LD_INT 0
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: LIST
80599: LIST
80600: LIST
80601: LIST
80602: LIST
80603: PUSH
80604: EMPTY
80605: LIST
80606: LIST
80607: PPUSH
80608: CALL_OW 447
// end ;
80612: LD_VAR 0 2
80616: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80617: LD_INT 0
80619: PPUSH
80620: PPUSH
80621: PPUSH
// tmp := [ ] ;
80622: LD_ADDR_VAR 0 5
80626: PUSH
80627: EMPTY
80628: ST_TO_ADDR
// for i in units do
80629: LD_ADDR_VAR 0 4
80633: PUSH
80634: LD_VAR 0 1
80638: PUSH
80639: FOR_IN
80640: IFFALSE 80678
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80642: LD_ADDR_VAR 0 5
80646: PUSH
80647: LD_VAR 0 5
80651: PPUSH
80652: LD_VAR 0 5
80656: PUSH
80657: LD_INT 1
80659: PLUS
80660: PPUSH
80661: LD_VAR 0 4
80665: PPUSH
80666: CALL_OW 256
80670: PPUSH
80671: CALL_OW 2
80675: ST_TO_ADDR
80676: GO 80639
80678: POP
80679: POP
// if not tmp then
80680: LD_VAR 0 5
80684: NOT
80685: IFFALSE 80689
// exit ;
80687: GO 80737
// if asc then
80689: LD_VAR 0 2
80693: IFFALSE 80717
// result := SortListByListAsc ( units , tmp ) else
80695: LD_ADDR_VAR 0 3
80699: PUSH
80700: LD_VAR 0 1
80704: PPUSH
80705: LD_VAR 0 5
80709: PPUSH
80710: CALL_OW 76
80714: ST_TO_ADDR
80715: GO 80737
// result := SortListByListDesc ( units , tmp ) ;
80717: LD_ADDR_VAR 0 3
80721: PUSH
80722: LD_VAR 0 1
80726: PPUSH
80727: LD_VAR 0 5
80731: PPUSH
80732: CALL_OW 77
80736: ST_TO_ADDR
// end ;
80737: LD_VAR 0 3
80741: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80742: LD_INT 0
80744: PPUSH
80745: PPUSH
// task := GetTaskList ( mech ) ;
80746: LD_ADDR_VAR 0 4
80750: PUSH
80751: LD_VAR 0 1
80755: PPUSH
80756: CALL_OW 437
80760: ST_TO_ADDR
// if not task then
80761: LD_VAR 0 4
80765: NOT
80766: IFFALSE 80770
// exit ;
80768: GO 80812
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80770: LD_ADDR_VAR 0 3
80774: PUSH
80775: LD_VAR 0 4
80779: PUSH
80780: LD_INT 1
80782: ARRAY
80783: PUSH
80784: LD_INT 1
80786: ARRAY
80787: PUSH
80788: LD_STRING r
80790: EQUAL
80791: PUSH
80792: LD_VAR 0 4
80796: PUSH
80797: LD_INT 1
80799: ARRAY
80800: PUSH
80801: LD_INT 4
80803: ARRAY
80804: PUSH
80805: LD_VAR 0 2
80809: EQUAL
80810: AND
80811: ST_TO_ADDR
// end ;
80812: LD_VAR 0 3
80816: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80817: LD_INT 0
80819: PPUSH
// SetDir ( unit , d ) ;
80820: LD_VAR 0 1
80824: PPUSH
80825: LD_VAR 0 4
80829: PPUSH
80830: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80834: LD_VAR 0 1
80838: PPUSH
80839: LD_VAR 0 2
80843: PPUSH
80844: LD_VAR 0 3
80848: PPUSH
80849: LD_VAR 0 5
80853: PPUSH
80854: CALL_OW 48
// end ;
80858: LD_VAR 0 6
80862: RET
// export function ToNaturalNumber ( number ) ; begin
80863: LD_INT 0
80865: PPUSH
// result := number div 1 ;
80866: LD_ADDR_VAR 0 2
80870: PUSH
80871: LD_VAR 0 1
80875: PUSH
80876: LD_INT 1
80878: DIV
80879: ST_TO_ADDR
// if number < 0 then
80880: LD_VAR 0 1
80884: PUSH
80885: LD_INT 0
80887: LESS
80888: IFFALSE 80898
// result := 0 ;
80890: LD_ADDR_VAR 0 2
80894: PUSH
80895: LD_INT 0
80897: ST_TO_ADDR
// end ;
80898: LD_VAR 0 2
80902: RET
// export function SortByClass ( units , class ) ; var un ; begin
80903: LD_INT 0
80905: PPUSH
80906: PPUSH
// if not units or not class then
80907: LD_VAR 0 1
80911: NOT
80912: PUSH
80913: LD_VAR 0 2
80917: NOT
80918: OR
80919: IFFALSE 80923
// exit ;
80921: GO 81018
// result := [ ] ;
80923: LD_ADDR_VAR 0 3
80927: PUSH
80928: EMPTY
80929: ST_TO_ADDR
// for un in units do
80930: LD_ADDR_VAR 0 4
80934: PUSH
80935: LD_VAR 0 1
80939: PUSH
80940: FOR_IN
80941: IFFALSE 81016
// if GetClass ( un ) = class then
80943: LD_VAR 0 4
80947: PPUSH
80948: CALL_OW 257
80952: PUSH
80953: LD_VAR 0 2
80957: EQUAL
80958: IFFALSE 80985
// result := Insert ( result , 1 , un ) else
80960: LD_ADDR_VAR 0 3
80964: PUSH
80965: LD_VAR 0 3
80969: PPUSH
80970: LD_INT 1
80972: PPUSH
80973: LD_VAR 0 4
80977: PPUSH
80978: CALL_OW 2
80982: ST_TO_ADDR
80983: GO 81014
// result := Replace ( result , result + 1 , un ) ;
80985: LD_ADDR_VAR 0 3
80989: PUSH
80990: LD_VAR 0 3
80994: PPUSH
80995: LD_VAR 0 3
80999: PUSH
81000: LD_INT 1
81002: PLUS
81003: PPUSH
81004: LD_VAR 0 4
81008: PPUSH
81009: CALL_OW 1
81013: ST_TO_ADDR
81014: GO 80940
81016: POP
81017: POP
// end ;
81018: LD_VAR 0 3
81022: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81023: LD_INT 0
81025: PPUSH
81026: PPUSH
81027: PPUSH
81028: PPUSH
81029: PPUSH
81030: PPUSH
81031: PPUSH
// result := [ ] ;
81032: LD_ADDR_VAR 0 4
81036: PUSH
81037: EMPTY
81038: ST_TO_ADDR
// if x - r < 0 then
81039: LD_VAR 0 1
81043: PUSH
81044: LD_VAR 0 3
81048: MINUS
81049: PUSH
81050: LD_INT 0
81052: LESS
81053: IFFALSE 81065
// min_x := 0 else
81055: LD_ADDR_VAR 0 8
81059: PUSH
81060: LD_INT 0
81062: ST_TO_ADDR
81063: GO 81081
// min_x := x - r ;
81065: LD_ADDR_VAR 0 8
81069: PUSH
81070: LD_VAR 0 1
81074: PUSH
81075: LD_VAR 0 3
81079: MINUS
81080: ST_TO_ADDR
// if y - r < 0 then
81081: LD_VAR 0 2
81085: PUSH
81086: LD_VAR 0 3
81090: MINUS
81091: PUSH
81092: LD_INT 0
81094: LESS
81095: IFFALSE 81107
// min_y := 0 else
81097: LD_ADDR_VAR 0 7
81101: PUSH
81102: LD_INT 0
81104: ST_TO_ADDR
81105: GO 81123
// min_y := y - r ;
81107: LD_ADDR_VAR 0 7
81111: PUSH
81112: LD_VAR 0 2
81116: PUSH
81117: LD_VAR 0 3
81121: MINUS
81122: ST_TO_ADDR
// max_x := x + r ;
81123: LD_ADDR_VAR 0 9
81127: PUSH
81128: LD_VAR 0 1
81132: PUSH
81133: LD_VAR 0 3
81137: PLUS
81138: ST_TO_ADDR
// max_y := y + r ;
81139: LD_ADDR_VAR 0 10
81143: PUSH
81144: LD_VAR 0 2
81148: PUSH
81149: LD_VAR 0 3
81153: PLUS
81154: ST_TO_ADDR
// for _x = min_x to max_x do
81155: LD_ADDR_VAR 0 5
81159: PUSH
81160: DOUBLE
81161: LD_VAR 0 8
81165: DEC
81166: ST_TO_ADDR
81167: LD_VAR 0 9
81171: PUSH
81172: FOR_TO
81173: IFFALSE 81274
// for _y = min_y to max_y do
81175: LD_ADDR_VAR 0 6
81179: PUSH
81180: DOUBLE
81181: LD_VAR 0 7
81185: DEC
81186: ST_TO_ADDR
81187: LD_VAR 0 10
81191: PUSH
81192: FOR_TO
81193: IFFALSE 81270
// begin if not ValidHex ( _x , _y ) then
81195: LD_VAR 0 5
81199: PPUSH
81200: LD_VAR 0 6
81204: PPUSH
81205: CALL_OW 488
81209: NOT
81210: IFFALSE 81214
// continue ;
81212: GO 81192
// if GetResourceTypeXY ( _x , _y ) then
81214: LD_VAR 0 5
81218: PPUSH
81219: LD_VAR 0 6
81223: PPUSH
81224: CALL_OW 283
81228: IFFALSE 81268
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81230: LD_ADDR_VAR 0 4
81234: PUSH
81235: LD_VAR 0 4
81239: PPUSH
81240: LD_VAR 0 4
81244: PUSH
81245: LD_INT 1
81247: PLUS
81248: PPUSH
81249: LD_VAR 0 5
81253: PUSH
81254: LD_VAR 0 6
81258: PUSH
81259: EMPTY
81260: LIST
81261: LIST
81262: PPUSH
81263: CALL_OW 1
81267: ST_TO_ADDR
// end ;
81268: GO 81192
81270: POP
81271: POP
81272: GO 81172
81274: POP
81275: POP
// end ;
81276: LD_VAR 0 4
81280: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81281: LD_INT 0
81283: PPUSH
81284: PPUSH
81285: PPUSH
81286: PPUSH
81287: PPUSH
81288: PPUSH
81289: PPUSH
81290: PPUSH
// if not units then
81291: LD_VAR 0 1
81295: NOT
81296: IFFALSE 81300
// exit ;
81298: GO 81824
// result := UnitFilter ( units , [ f_ok ] ) ;
81300: LD_ADDR_VAR 0 3
81304: PUSH
81305: LD_VAR 0 1
81309: PPUSH
81310: LD_INT 50
81312: PUSH
81313: EMPTY
81314: LIST
81315: PPUSH
81316: CALL_OW 72
81320: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81321: LD_ADDR_VAR 0 8
81325: PUSH
81326: LD_VAR 0 1
81330: PUSH
81331: LD_INT 1
81333: ARRAY
81334: PPUSH
81335: CALL_OW 255
81339: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81340: LD_ADDR_VAR 0 10
81344: PUSH
81345: LD_INT 29
81347: PUSH
81348: LD_INT 91
81350: PUSH
81351: LD_INT 49
81353: PUSH
81354: EMPTY
81355: LIST
81356: LIST
81357: LIST
81358: ST_TO_ADDR
// if not result then
81359: LD_VAR 0 3
81363: NOT
81364: IFFALSE 81368
// exit ;
81366: GO 81824
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81368: LD_ADDR_VAR 0 5
81372: PUSH
81373: LD_INT 81
81375: PUSH
81376: LD_VAR 0 8
81380: PUSH
81381: EMPTY
81382: LIST
81383: LIST
81384: PPUSH
81385: CALL_OW 69
81389: ST_TO_ADDR
// for i in result do
81390: LD_ADDR_VAR 0 4
81394: PUSH
81395: LD_VAR 0 3
81399: PUSH
81400: FOR_IN
81401: IFFALSE 81822
// begin tag := GetTag ( i ) + 1 ;
81403: LD_ADDR_VAR 0 9
81407: PUSH
81408: LD_VAR 0 4
81412: PPUSH
81413: CALL_OW 110
81417: PUSH
81418: LD_INT 1
81420: PLUS
81421: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81422: LD_ADDR_VAR 0 7
81426: PUSH
81427: LD_VAR 0 4
81431: PPUSH
81432: CALL_OW 250
81436: PPUSH
81437: LD_VAR 0 4
81441: PPUSH
81442: CALL_OW 251
81446: PPUSH
81447: LD_INT 6
81449: PPUSH
81450: CALL 81023 0 3
81454: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81455: LD_VAR 0 4
81459: PPUSH
81460: CALL_OW 247
81464: PUSH
81465: LD_INT 2
81467: EQUAL
81468: PUSH
81469: LD_VAR 0 7
81473: AND
81474: PUSH
81475: LD_VAR 0 4
81479: PPUSH
81480: CALL_OW 264
81484: PUSH
81485: LD_VAR 0 10
81489: IN
81490: NOT
81491: AND
81492: IFFALSE 81531
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81494: LD_VAR 0 4
81498: PPUSH
81499: LD_VAR 0 7
81503: PUSH
81504: LD_INT 1
81506: ARRAY
81507: PUSH
81508: LD_INT 1
81510: ARRAY
81511: PPUSH
81512: LD_VAR 0 7
81516: PUSH
81517: LD_INT 1
81519: ARRAY
81520: PUSH
81521: LD_INT 2
81523: ARRAY
81524: PPUSH
81525: CALL_OW 116
81529: GO 81820
// if path > tag then
81531: LD_VAR 0 2
81535: PUSH
81536: LD_VAR 0 9
81540: GREATER
81541: IFFALSE 81749
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81543: LD_ADDR_VAR 0 6
81547: PUSH
81548: LD_VAR 0 5
81552: PPUSH
81553: LD_INT 91
81555: PUSH
81556: LD_VAR 0 4
81560: PUSH
81561: LD_INT 8
81563: PUSH
81564: EMPTY
81565: LIST
81566: LIST
81567: LIST
81568: PPUSH
81569: CALL_OW 72
81573: ST_TO_ADDR
// if nearEnemy then
81574: LD_VAR 0 6
81578: IFFALSE 81647
// begin if GetWeapon ( i ) = ru_time_lapser then
81580: LD_VAR 0 4
81584: PPUSH
81585: CALL_OW 264
81589: PUSH
81590: LD_INT 49
81592: EQUAL
81593: IFFALSE 81621
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81595: LD_VAR 0 4
81599: PPUSH
81600: LD_VAR 0 6
81604: PPUSH
81605: LD_VAR 0 4
81609: PPUSH
81610: CALL_OW 74
81614: PPUSH
81615: CALL_OW 112
81619: GO 81645
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81621: LD_VAR 0 4
81625: PPUSH
81626: LD_VAR 0 6
81630: PPUSH
81631: LD_VAR 0 4
81635: PPUSH
81636: CALL_OW 74
81640: PPUSH
81641: CALL_OW 115
// end else
81645: GO 81747
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81647: LD_VAR 0 4
81651: PPUSH
81652: LD_VAR 0 2
81656: PUSH
81657: LD_VAR 0 9
81661: ARRAY
81662: PUSH
81663: LD_INT 1
81665: ARRAY
81666: PPUSH
81667: LD_VAR 0 2
81671: PUSH
81672: LD_VAR 0 9
81676: ARRAY
81677: PUSH
81678: LD_INT 2
81680: ARRAY
81681: PPUSH
81682: CALL_OW 297
81686: PUSH
81687: LD_INT 6
81689: GREATER
81690: IFFALSE 81733
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81692: LD_VAR 0 4
81696: PPUSH
81697: LD_VAR 0 2
81701: PUSH
81702: LD_VAR 0 9
81706: ARRAY
81707: PUSH
81708: LD_INT 1
81710: ARRAY
81711: PPUSH
81712: LD_VAR 0 2
81716: PUSH
81717: LD_VAR 0 9
81721: ARRAY
81722: PUSH
81723: LD_INT 2
81725: ARRAY
81726: PPUSH
81727: CALL_OW 114
81731: GO 81747
// SetTag ( i , tag ) ;
81733: LD_VAR 0 4
81737: PPUSH
81738: LD_VAR 0 9
81742: PPUSH
81743: CALL_OW 109
// end else
81747: GO 81820
// if enemy then
81749: LD_VAR 0 5
81753: IFFALSE 81820
// begin if GetWeapon ( i ) = ru_time_lapser then
81755: LD_VAR 0 4
81759: PPUSH
81760: CALL_OW 264
81764: PUSH
81765: LD_INT 49
81767: EQUAL
81768: IFFALSE 81796
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81770: LD_VAR 0 4
81774: PPUSH
81775: LD_VAR 0 5
81779: PPUSH
81780: LD_VAR 0 4
81784: PPUSH
81785: CALL_OW 74
81789: PPUSH
81790: CALL_OW 112
81794: GO 81820
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81796: LD_VAR 0 4
81800: PPUSH
81801: LD_VAR 0 5
81805: PPUSH
81806: LD_VAR 0 4
81810: PPUSH
81811: CALL_OW 74
81815: PPUSH
81816: CALL_OW 115
// end ; end ;
81820: GO 81400
81822: POP
81823: POP
// end ;
81824: LD_VAR 0 3
81828: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81829: LD_INT 0
81831: PPUSH
81832: PPUSH
81833: PPUSH
// if not unit or IsInUnit ( unit ) then
81834: LD_VAR 0 1
81838: NOT
81839: PUSH
81840: LD_VAR 0 1
81844: PPUSH
81845: CALL_OW 310
81849: OR
81850: IFFALSE 81854
// exit ;
81852: GO 81945
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81854: LD_ADDR_VAR 0 4
81858: PUSH
81859: LD_VAR 0 1
81863: PPUSH
81864: CALL_OW 250
81868: PPUSH
81869: LD_VAR 0 2
81873: PPUSH
81874: LD_INT 1
81876: PPUSH
81877: CALL_OW 272
81881: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81882: LD_ADDR_VAR 0 5
81886: PUSH
81887: LD_VAR 0 1
81891: PPUSH
81892: CALL_OW 251
81896: PPUSH
81897: LD_VAR 0 2
81901: PPUSH
81902: LD_INT 1
81904: PPUSH
81905: CALL_OW 273
81909: ST_TO_ADDR
// if ValidHex ( x , y ) then
81910: LD_VAR 0 4
81914: PPUSH
81915: LD_VAR 0 5
81919: PPUSH
81920: CALL_OW 488
81924: IFFALSE 81945
// ComTurnXY ( unit , x , y ) ;
81926: LD_VAR 0 1
81930: PPUSH
81931: LD_VAR 0 4
81935: PPUSH
81936: LD_VAR 0 5
81940: PPUSH
81941: CALL_OW 118
// end ;
81945: LD_VAR 0 3
81949: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81950: LD_INT 0
81952: PPUSH
81953: PPUSH
// result := false ;
81954: LD_ADDR_VAR 0 3
81958: PUSH
81959: LD_INT 0
81961: ST_TO_ADDR
// if not units then
81962: LD_VAR 0 2
81966: NOT
81967: IFFALSE 81971
// exit ;
81969: GO 82016
// for i in units do
81971: LD_ADDR_VAR 0 4
81975: PUSH
81976: LD_VAR 0 2
81980: PUSH
81981: FOR_IN
81982: IFFALSE 82014
// if See ( side , i ) then
81984: LD_VAR 0 1
81988: PPUSH
81989: LD_VAR 0 4
81993: PPUSH
81994: CALL_OW 292
81998: IFFALSE 82012
// begin result := true ;
82000: LD_ADDR_VAR 0 3
82004: PUSH
82005: LD_INT 1
82007: ST_TO_ADDR
// exit ;
82008: POP
82009: POP
82010: GO 82016
// end ;
82012: GO 81981
82014: POP
82015: POP
// end ;
82016: LD_VAR 0 3
82020: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82021: LD_INT 0
82023: PPUSH
82024: PPUSH
82025: PPUSH
82026: PPUSH
// if not unit or not points then
82027: LD_VAR 0 1
82031: NOT
82032: PUSH
82033: LD_VAR 0 2
82037: NOT
82038: OR
82039: IFFALSE 82043
// exit ;
82041: GO 82133
// dist := 99999 ;
82043: LD_ADDR_VAR 0 5
82047: PUSH
82048: LD_INT 99999
82050: ST_TO_ADDR
// for i in points do
82051: LD_ADDR_VAR 0 4
82055: PUSH
82056: LD_VAR 0 2
82060: PUSH
82061: FOR_IN
82062: IFFALSE 82131
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82064: LD_ADDR_VAR 0 6
82068: PUSH
82069: LD_VAR 0 1
82073: PPUSH
82074: LD_VAR 0 4
82078: PUSH
82079: LD_INT 1
82081: ARRAY
82082: PPUSH
82083: LD_VAR 0 4
82087: PUSH
82088: LD_INT 2
82090: ARRAY
82091: PPUSH
82092: CALL_OW 297
82096: ST_TO_ADDR
// if tmpDist < dist then
82097: LD_VAR 0 6
82101: PUSH
82102: LD_VAR 0 5
82106: LESS
82107: IFFALSE 82129
// begin result := i ;
82109: LD_ADDR_VAR 0 3
82113: PUSH
82114: LD_VAR 0 4
82118: ST_TO_ADDR
// dist := tmpDist ;
82119: LD_ADDR_VAR 0 5
82123: PUSH
82124: LD_VAR 0 6
82128: ST_TO_ADDR
// end ; end ;
82129: GO 82061
82131: POP
82132: POP
// end ;
82133: LD_VAR 0 3
82137: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82138: LD_INT 0
82140: PPUSH
// uc_side := side ;
82141: LD_ADDR_OWVAR 20
82145: PUSH
82146: LD_VAR 0 1
82150: ST_TO_ADDR
// uc_nation := 3 ;
82151: LD_ADDR_OWVAR 21
82155: PUSH
82156: LD_INT 3
82158: ST_TO_ADDR
// vc_chassis := 25 ;
82159: LD_ADDR_OWVAR 37
82163: PUSH
82164: LD_INT 25
82166: ST_TO_ADDR
// vc_engine := engine_siberite ;
82167: LD_ADDR_OWVAR 39
82171: PUSH
82172: LD_INT 3
82174: ST_TO_ADDR
// vc_control := control_computer ;
82175: LD_ADDR_OWVAR 38
82179: PUSH
82180: LD_INT 3
82182: ST_TO_ADDR
// vc_weapon := 59 ;
82183: LD_ADDR_OWVAR 40
82187: PUSH
82188: LD_INT 59
82190: ST_TO_ADDR
// result := CreateVehicle ;
82191: LD_ADDR_VAR 0 5
82195: PUSH
82196: CALL_OW 45
82200: ST_TO_ADDR
// SetDir ( result , d ) ;
82201: LD_VAR 0 5
82205: PPUSH
82206: LD_VAR 0 4
82210: PPUSH
82211: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82215: LD_VAR 0 5
82219: PPUSH
82220: LD_VAR 0 2
82224: PPUSH
82225: LD_VAR 0 3
82229: PPUSH
82230: LD_INT 0
82232: PPUSH
82233: CALL_OW 48
// end ;
82237: LD_VAR 0 5
82241: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82242: LD_INT 0
82244: PPUSH
82245: PPUSH
82246: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82247: LD_ADDR_VAR 0 2
82251: PUSH
82252: LD_INT 0
82254: PUSH
82255: LD_INT 0
82257: PUSH
82258: LD_INT 0
82260: PUSH
82261: LD_INT 0
82263: PUSH
82264: EMPTY
82265: LIST
82266: LIST
82267: LIST
82268: LIST
82269: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82270: LD_VAR 0 1
82274: NOT
82275: PUSH
82276: LD_VAR 0 1
82280: PPUSH
82281: CALL_OW 264
82285: PUSH
82286: LD_INT 12
82288: PUSH
82289: LD_INT 51
82291: PUSH
82292: LD_INT 32
82294: PUSH
82295: LD_INT 89
82297: PUSH
82298: EMPTY
82299: LIST
82300: LIST
82301: LIST
82302: LIST
82303: IN
82304: NOT
82305: OR
82306: IFFALSE 82310
// exit ;
82308: GO 82408
// for i := 1 to 3 do
82310: LD_ADDR_VAR 0 3
82314: PUSH
82315: DOUBLE
82316: LD_INT 1
82318: DEC
82319: ST_TO_ADDR
82320: LD_INT 3
82322: PUSH
82323: FOR_TO
82324: IFFALSE 82406
// begin tmp := GetCargo ( cargo , i ) ;
82326: LD_ADDR_VAR 0 4
82330: PUSH
82331: LD_VAR 0 1
82335: PPUSH
82336: LD_VAR 0 3
82340: PPUSH
82341: CALL_OW 289
82345: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82346: LD_ADDR_VAR 0 2
82350: PUSH
82351: LD_VAR 0 2
82355: PPUSH
82356: LD_VAR 0 3
82360: PPUSH
82361: LD_VAR 0 4
82365: PPUSH
82366: CALL_OW 1
82370: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82371: LD_ADDR_VAR 0 2
82375: PUSH
82376: LD_VAR 0 2
82380: PPUSH
82381: LD_INT 4
82383: PPUSH
82384: LD_VAR 0 2
82388: PUSH
82389: LD_INT 4
82391: ARRAY
82392: PUSH
82393: LD_VAR 0 4
82397: PLUS
82398: PPUSH
82399: CALL_OW 1
82403: ST_TO_ADDR
// end ;
82404: GO 82323
82406: POP
82407: POP
// end ;
82408: LD_VAR 0 2
82412: RET
// export function Length ( array ) ; begin
82413: LD_INT 0
82415: PPUSH
// result := array + 0 ;
82416: LD_ADDR_VAR 0 2
82420: PUSH
82421: LD_VAR 0 1
82425: PUSH
82426: LD_INT 0
82428: PLUS
82429: ST_TO_ADDR
// end ;
82430: LD_VAR 0 2
82434: RET
// export function PrepareArray ( array ) ; begin
82435: LD_INT 0
82437: PPUSH
// result := array diff 0 ;
82438: LD_ADDR_VAR 0 2
82442: PUSH
82443: LD_VAR 0 1
82447: PUSH
82448: LD_INT 0
82450: DIFF
82451: ST_TO_ADDR
// if not result [ 1 ] then
82452: LD_VAR 0 2
82456: PUSH
82457: LD_INT 1
82459: ARRAY
82460: NOT
82461: IFFALSE 82481
// result := Delete ( result , 1 ) ;
82463: LD_ADDR_VAR 0 2
82467: PUSH
82468: LD_VAR 0 2
82472: PPUSH
82473: LD_INT 1
82475: PPUSH
82476: CALL_OW 3
82480: ST_TO_ADDR
// end ;
82481: LD_VAR 0 2
82485: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82486: LD_INT 0
82488: PPUSH
82489: PPUSH
82490: PPUSH
82491: PPUSH
// sibRocketRange := 25 ;
82492: LD_ADDR_VAR 0 6
82496: PUSH
82497: LD_INT 25
82499: ST_TO_ADDR
// result := false ;
82500: LD_ADDR_VAR 0 4
82504: PUSH
82505: LD_INT 0
82507: ST_TO_ADDR
// for i := 0 to 5 do
82508: LD_ADDR_VAR 0 5
82512: PUSH
82513: DOUBLE
82514: LD_INT 0
82516: DEC
82517: ST_TO_ADDR
82518: LD_INT 5
82520: PUSH
82521: FOR_TO
82522: IFFALSE 82589
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82524: LD_VAR 0 1
82528: PPUSH
82529: LD_VAR 0 5
82533: PPUSH
82534: LD_VAR 0 6
82538: PPUSH
82539: CALL_OW 272
82543: PPUSH
82544: LD_VAR 0 2
82548: PPUSH
82549: LD_VAR 0 5
82553: PPUSH
82554: LD_VAR 0 6
82558: PPUSH
82559: CALL_OW 273
82563: PPUSH
82564: LD_VAR 0 3
82568: PPUSH
82569: CALL_OW 309
82573: IFFALSE 82587
// begin result := true ;
82575: LD_ADDR_VAR 0 4
82579: PUSH
82580: LD_INT 1
82582: ST_TO_ADDR
// exit ;
82583: POP
82584: POP
82585: GO 82591
// end ;
82587: GO 82521
82589: POP
82590: POP
// end ;
82591: LD_VAR 0 4
82595: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82596: LD_INT 0
82598: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82599: LD_VAR 0 1
82603: PPUSH
82604: LD_VAR 0 2
82608: PPUSH
82609: LD_INT 0
82611: PPUSH
82612: LD_INT 0
82614: PPUSH
82615: LD_INT 1
82617: PPUSH
82618: LD_INT 0
82620: PPUSH
82621: CALL_OW 587
// end ; end_of_file
82625: LD_VAR 0 3
82629: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82630: LD_VAR 0 1
82634: PUSH
82635: LD_INT 200
82637: DOUBLE
82638: GREATEREQUAL
82639: IFFALSE 82647
82641: LD_INT 299
82643: DOUBLE
82644: LESSEQUAL
82645: IFTRUE 82649
82647: GO 82681
82649: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82650: LD_VAR 0 1
82654: PPUSH
82655: LD_VAR 0 2
82659: PPUSH
82660: LD_VAR 0 3
82664: PPUSH
82665: LD_VAR 0 4
82669: PPUSH
82670: LD_VAR 0 5
82674: PPUSH
82675: CALL 37296 0 5
82679: GO 82758
82681: LD_INT 300
82683: DOUBLE
82684: GREATEREQUAL
82685: IFFALSE 82693
82687: LD_INT 399
82689: DOUBLE
82690: LESSEQUAL
82691: IFTRUE 82695
82693: GO 82757
82695: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82696: LD_VAR 0 1
82700: PPUSH
82701: LD_VAR 0 2
82705: PPUSH
82706: LD_VAR 0 3
82710: PPUSH
82711: LD_VAR 0 4
82715: PPUSH
82716: LD_VAR 0 5
82720: PPUSH
82721: LD_VAR 0 6
82725: PPUSH
82726: LD_VAR 0 7
82730: PPUSH
82731: LD_VAR 0 8
82735: PPUSH
82736: LD_VAR 0 9
82740: PPUSH
82741: LD_VAR 0 10
82745: PPUSH
82746: LD_VAR 0 11
82750: PPUSH
82751: CALL 33629 0 11
82755: GO 82758
82757: POP
// end ;
82758: PPOPN 11
82760: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82761: LD_VAR 0 1
82765: PPUSH
82766: LD_VAR 0 2
82770: PPUSH
82771: LD_VAR 0 3
82775: PPUSH
82776: LD_VAR 0 4
82780: PPUSH
82781: LD_VAR 0 5
82785: PPUSH
82786: CALL 37032 0 5
// end ; end_of_file
82790: PPOPN 5
82792: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82793: LD_VAR 0 1
82797: PPUSH
82798: LD_VAR 0 2
82802: PPUSH
82803: LD_VAR 0 3
82807: PPUSH
82808: LD_VAR 0 4
82812: PPUSH
82813: LD_VAR 0 5
82817: PPUSH
82818: LD_VAR 0 6
82822: PPUSH
82823: CALL 21281 0 6
// end ;
82827: PPOPN 6
82829: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82830: LD_INT 0
82832: PPUSH
// begin if not units then
82833: LD_VAR 0 1
82837: NOT
82838: IFFALSE 82842
// exit ;
82840: GO 82842
// end ;
82842: PPOPN 7
82844: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82845: CALL 21185 0 0
// end ;
82849: PPOPN 1
82851: END
