Export function DialogRandom(characters, dialogMID, dialogFID);
var i, speaker;
begin
if not characters then
   exit;

speaker := characters[rand(1, characters)];

if GetSex(speaker) = sex_male then
   Say(speaker, dialogMID)
else
   Say(speaker, dialogFID);

result := speaker;
end;

Export function EnchancedSaveCharacters(charactersList, ident);
var i;
begin
for i in charactersList do
    SaveCharacters(i, ident);
End;


Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un;
begin
for i := 1 to count do
    begin
    uc_side = side;
    uc_nation = nation;

    hc_gallery = '';
    hc_name = '';
    PrepareHuman(false, class, skill);

    un = CreateHuman;
    PlaceHumanInUnit(un, build);
    end;
End;

Export Function PrepareSolBun(skill, b);
var un, dir;
begin
uc_side := GetSide(b);
uc_nation := GetNation(b);

PrepareHuman(false, 1, skill);

dir := GetDir(b) - 3;

if dir < 0 then
   dir := 6 + dir;

un := CreateHuman;
SetDir(un, dir);
PlaceHumanInUnit(un, b);
End;

Export function PrepareDifficulty;
begin
case Difficulty of
     1:
     begin
     RuSolMinLevel = 2;
     RuSolMaxLevel = 3;
     end;

     2:
     begin
     RuSolMinLevel = 3;
     RuSolMaxLevel = 5;
     end;

     3..4:
     begin
     RuSolMinLevel = 4;
     RuSolMaxLevel = 6;
     end;
end;
End;

Export function ShowQuery1;
begin
result := Query('QKill');
End;

Export function ShowQuery2;
begin
result := Query('QKill2');
End;

Export function ResAllTechs(side, lab, nation);
var i, tech, list;
begin
list := [48, 49, 50, 20, 1, 51, 52, 69, 39, 34, 40, 53, 71, 57, 58, 44, 32, 27, 23, 33, 59, 54, 55, 56, 63, 64, 65, 30, 31, 21, 22, 25, 82, 83, 84, 85, 86];

for i = 1 to list do
    if GetTech(list[i], side) = state_enabled and TechNationAvailable(list[i], nation) then
       AddComResearch(lab, list[i]);
End;

Export function BuildingVehicle(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i, weapon;
begin
if FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
   begin
   for i = 1 to vehCount do
       begin
       weapon := weaponTab[i];

       if weapon = ru_heavy_gun then
          AddComConstruct(fabric, ru_heavy_tracked, engine, control, weapon)
       else
          AddComConstruct(fabric, chassis, engine, control, weapon);
       end;
   end;
End;

Export function RepairAndRebuildBase(side, depot, area, destroyedBuildings);
var buildingsList, i, engineerOkInside, engineerOkOutside, j;
begin
engineerOkInside := UnitsInside(depot);
engineerOkOutside := FilterUnitsInArea(area, [[f_side, side], [f_class, 2], [f_lives, 750], [f_not, [f_inside]]]);
buildingsList := FilterUnitsInArea(area,[[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

if not buildingsList and not FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 250]]) then
   exit;

if buildingsList and engineerOkInside then
   ComExitBuilding(engineerOkInside);

if buildingsList and engineerOkOutside then
   ComRepairBuilding(engineerOkOutside, buildingsList[1]);

if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
   ComEnterUnit(engineerOkOutside, depot);

if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
   ComBuild(engineerOkOutside, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);
End;

Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list, sci_listOutside,  i, j, damageUnits, unitsToHeal, tmp, rnd;
begin
sci_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_nation ,2], [f_lives, 251]]);
sci_listOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_nation, 2], [f_class, 4], [f_ok]]);
damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 750]]]);
unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 1000]]]);

if not damageUnits and not unitsToHeal and not sci_list then
   exit;

if damageUnits and sci_list then
   ComMoveToArea(damageUnits, healArea);

if unitsToHeal and sci_list then
   ComExitBuilding(sci_list);

if unitsToHeal and sci_listOutside then
   ComHeal(sci_listOutside, unitsToHeal[1]);

if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
   begin
   tmp := FilterAllUnits([[f_side, side], [f_type, unit_building], [f_btype, b_lab_full]]);
   rnd := rand(1, tmp);
   ComEnterUnit(UnitFilter(sci_listOutside, [f_not, [f_hastask]]), tmp[rnd]);
   end;
End;

Export function DefendDepot(side, build);
var i, j, tmp, bunkers;
begin
tmp := [];
bunkers := FilterAllUnits([[f_side, side], [f_btype, b_bunker]]);

if bunkers then
   for i in bunkers do
       for j in UnitsInside(i) do
           tmp := Replace(tmp, tmp + 1, j);

if tmp then
   begin
   ComExitBuilding(tmp);
   AddComAgressiveMove(tmp, GetX(build), GetY(build));
   end;
End;

Export function CollectCrates(side, cargo, cratesArea);
var cargoList, crateList;
begin
enable;

crateList := GetListOfCratesInArea(cratesArea);
cargoList := FilterAllUnits([[f_side, side], [f_weapon, cargo]]);

if cargoList and GetListOfCratesInArea(cratesArea) and crateList then
   AddComCollect(cargoList[1], crateList[1], crateList[2]);
End;

Export function EnterBunkerOrBarrack(side, area);
var i, j, soldiersList, turretList, tmp, barrackList, insideUnits;
begin
soldiersList := FilterUnitsInArea(area, [[f_side, side], [f_outside], [f_lives, 700],  [f_not, [f_hastask]], [f_or, [f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]]]) diff (ruAttackers union ruAttackersInForest);
turretList := FilterUnitsInArea(area, [[f_side, side], [f_btype, b_bunker], [f_empty], [f_lives, 251]]);
barrackList := FilterUnitsInArea(area, [[f_side, side], [f_or, [f_btype, 4], [f_btype, 5]], [f_lives, 251]]);

if barrackList then
   begin
   if turretList = 0 then
      begin
      if soldiersList then
         ComEnterUnit(soldiersList, barrackList[Rand(1, barrackList)]);
      end
   else
      begin
      for i in barrackList do
          begin
          if not turretList then
             exit;

          insideUnits = UnitsInside(i);

          if insideUnits then
             begin
             tmp := insideUnits[1];
             ComExitBuilding(tmp);
             AddComEnterUnit(tmp, turretList[1]);
             turretList := Delete(turretList, 1);
             end;
          end;
      end; 
   end;
End;

Export function CraneRepairBuild(side, repairArea, destroyedBuildings);
var i, dep, crane, craneList, buildingsList;
begin
craneList := FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_weapon, ru_crane]]);

if not craneList then
   exit;

buildingsList := FilterAllUnits([[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

if buildingsList and UnitFilter(craneList, [f_lives, 750]) then
   ComRepairBuilding(UnitFilter(craneList, [f_lives, 750]), buildingsList[1]);

if UnitFilter(craneList, [f_not, [f_lives, 750]]) then
   ComMoveToArea(UnitFilter(craneList, [f_not, [f_lives, 750]]), repairArea);

if craneList and buildingsList = 0 and destroyedBuildings then
   AddComCraneBuild(craneList, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);

crane := FilterUnitsInArea(repairArea, [[f_side, side], [f_type, unit_vehicle], [f_weapon, ru_crane], [f_not, [f_lives, 750]]]);
dep := FilterUnitsInArea(repairArea, [[f_side, side], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);

if crane then
   for i in crane do
       begin
       if dep then
          ComMoveUnit(i, dep);

       AddComRepairVehicleAndReturn(IsDrivenBy(i));
       end;
End;

Export function BuildBulldozer;
begin
if not IsOk(rufabsupp) or GetSide(rufabsupp) <> 3 then
   exit;

AddComConstruct(rufabsupp, ru_heavy_tracked, engine_combustion, control_manual, ru_bulldozer);
End;

Export Function CutTreeInArea(bulldozer, area);
var i, list, tmp, hex;
begin
if not bulldozer then
   exit;

list := ListEnvironmentArea(area);
tmp := [];

for i = 1 to list do
    if IsEnvironmentDestroyable(list[i][1], list[i][2]) then
       begin
       tmp := Replace(tmp, tmp+1, [list[i][1], list[i][2]]);
       end;  

ComStop(bulldozer);

hex := [GetX(bulldozer), GetY(bulldozer)];

for i = tmp downto 1 do
    begin
    hex := GetClosestPoint(hex[1], hex[2], tmp);
    AddComCutTreeOnHex(bulldozer, hex[1], hex[2]);
    tmp := Delete(tmp, hex[3]);
    end;
End;

Export Function AddComCutTreeOnHex(bulldozer, x, y);
begin
if IsEnvironment(x, y) and IsEnvironmentDestroyable(x, y) and ValidHex(x, y) and HexInfo(x, y) = -1 then
   AddComMoveXY(bulldozer, x, y);
End;

Export Function GetClosestPoint(x, y, list);
var i, dist, d, _x, _y, _i;
begin
dist := 99999;

for i = 1 to list do
    begin
    d := GetDistXY(x, y, list[i][1], list[i][2]);

    if d = 0 then
       continue;

    if d < dist then
       begin
       _x := list[i][1];
       _y := list[i][2];
       _i := i;
       dist := d;
       end;
    end;

result := [_x, _y, _i, dist];
End;