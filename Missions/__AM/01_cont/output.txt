// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 870 0 0
// InitRussian ;
  19: CALL 1141 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 3086 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 2 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 2
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 787
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 787
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 515
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: IFFALSE 487
 472: PUSH
 473: LD_INT 1
 475: PPUSH
 476: LD_VAR 0 1
 480: PPUSH
 481: CALL_OW 292
 485: NOT
 486: AND
 487: IFFALSE 501
 489: PUSH
 490: LD_VAR 0 1
 494: PPUSH
 495: CALL_OW 314
 499: NOT
 500: AND
 501: IFFALSE 515
// SetFuel ( unit , 100 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: LD_INT 100
 510: PPUSH
 511: CALL_OW 240
// if mode = forest then
 515: LD_VAR 0 2
 519: PUSH
 520: LD_STRING forest
 522: EQUAL
 523: IFFALSE 603
// if GetLives ( unit ) < 600 then
 525: LD_VAR 0 1
 529: PPUSH
 530: CALL_OW 256
 534: PUSH
 535: LD_INT 600
 537: LESS
 538: IFFALSE 603
// begin ComMoveXY ( unit , 42 , 3 ) ;
 540: LD_VAR 0 1
 544: PPUSH
 545: LD_INT 42
 547: PPUSH
 548: LD_INT 3
 550: PPUSH
 551: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 250
 569: PPUSH
 570: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 574: LD_VAR 0 1
 578: PPUSH
 579: LD_VAR 0 1
 583: PPUSH
 584: CALL_OW 251
 588: PPUSH
 589: CALL_OW 232
// send_troops_to_forest := true ;
 593: LD_ADDR_EXP 14
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// break ;
 601: GO 787
// end ; if not HasTask ( unit ) then
 603: LD_VAR 0 1
 607: PPUSH
 608: CALL_OW 314
 612: NOT
 613: IFFALSE 785
// begin for i = 1 to coords do
 615: LD_ADDR_VAR 0 6
 619: PUSH
 620: DOUBLE
 621: LD_INT 1
 623: DEC
 624: ST_TO_ADDR
 625: LD_VAR 0 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 698
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 633: LD_VAR 0 1
 637: PPUSH
 638: LD_VAR 0 4
 642: PUSH
 643: LD_VAR 0 6
 647: ARRAY
 648: PPUSH
 649: LD_VAR 0 4
 653: PUSH
 654: LD_VAR 0 6
 658: PUSH
 659: LD_INT 1
 661: PLUS
 662: ARRAY
 663: PPUSH
 664: CALL_OW 174
// AddComWait ( unit , pause ) ;
 668: LD_VAR 0 1
 672: PPUSH
 673: LD_VAR 0 3
 677: PPUSH
 678: CALL_OW 202
// i := i + 1 ;
 682: LD_ADDR_VAR 0 6
 686: PUSH
 687: LD_VAR 0 6
 691: PUSH
 692: LD_INT 1
 694: PLUS
 695: ST_TO_ADDR
// end ;
 696: GO 630
 698: POP
 699: POP
// for i = coords downto 1 do
 700: LD_ADDR_VAR 0 6
 704: PUSH
 705: DOUBLE
 706: LD_VAR 0 4
 710: INC
 711: ST_TO_ADDR
 712: LD_INT 1
 714: PUSH
 715: FOR_DOWNTO
 716: IFFALSE 783
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 718: LD_VAR 0 1
 722: PPUSH
 723: LD_VAR 0 4
 727: PUSH
 728: LD_VAR 0 6
 732: PUSH
 733: LD_INT 1
 735: MINUS
 736: ARRAY
 737: PPUSH
 738: LD_VAR 0 4
 742: PUSH
 743: LD_VAR 0 6
 747: ARRAY
 748: PPUSH
 749: CALL_OW 174
// AddComWait ( unit , pause ) ;
 753: LD_VAR 0 1
 757: PPUSH
 758: LD_VAR 0 3
 762: PPUSH
 763: CALL_OW 202
// i := i - 1 ;
 767: LD_ADDR_VAR 0 6
 771: PUSH
 772: LD_VAR 0 6
 776: PUSH
 777: LD_INT 1
 779: MINUS
 780: ST_TO_ADDR
// end ;
 781: GO 715
 783: POP
 784: POP
// end ; end ;
 785: GO 425
// end ;
 787: LD_VAR 0 5
 791: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
// uc_nation := 1 ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: ST_TO_ADDR
// uc_side := 0 ;
 804: LD_ADDR_OWVAR 20
 808: PUSH
 809: LD_INT 0
 811: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 380
// hc_name := speaker ;
 825: LD_ADDR_OWVAR 26
 829: PUSH
 830: LD_STRING speaker
 832: ST_TO_ADDR
// hc_gallery :=  ;
 833: LD_ADDR_OWVAR 33
 837: PUSH
 838: LD_STRING 
 840: ST_TO_ADDR
// speaker := CreateHuman ;
 841: LD_ADDR_VAR 0 3
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 851: LD_VAR 0 3
 855: PPUSH
 856: LD_VAR 0 1
 860: PPUSH
 861: CALL_OW 88
// end ; end_of_file
 865: LD_VAR 0 2
 869: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 870: LD_INT 0
 872: PPUSH
// uc_nation := 1 ;
 873: LD_ADDR_OWVAR 21
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 881: LD_ADDR_EXP 16
 885: PUSH
 886: LD_STRING JMM
 888: PPUSH
 889: LD_INT 0
 891: PPUSH
 892: LD_STRING 
 894: PPUSH
 895: CALL 30135 0 3
 899: ST_TO_ADDR
// uc_side := 4 ;
 900: LD_ADDR_OWVAR 20
 904: PUSH
 905: LD_INT 4
 907: ST_TO_ADDR
// hc_gallery := us ;
 908: LD_ADDR_OWVAR 33
 912: PUSH
 913: LD_STRING us
 915: ST_TO_ADDR
// hc_face_number := 7 ;
 916: LD_ADDR_OWVAR 34
 920: PUSH
 921: LD_INT 7
 923: ST_TO_ADDR
// hc_sex := sex_male ;
 924: LD_ADDR_OWVAR 27
 928: PUSH
 929: LD_INT 1
 931: ST_TO_ADDR
// hc_name := . ;
 932: LD_ADDR_OWVAR 26
 936: PUSH
 937: LD_STRING .
 939: ST_TO_ADDR
// hc_class := 1 ;
 940: LD_ADDR_OWVAR 28
 944: PUSH
 945: LD_INT 1
 947: ST_TO_ADDR
// Powell := CreateHuman ;
 948: LD_ADDR_EXP 19
 952: PUSH
 953: CALL_OW 44
 957: ST_TO_ADDR
// hc_name := . ;
 958: LD_ADDR_OWVAR 26
 962: PUSH
 963: LD_STRING .
 965: ST_TO_ADDR
// hc_gallery := ru ;
 966: LD_ADDR_OWVAR 33
 970: PUSH
 971: LD_STRING ru
 973: ST_TO_ADDR
// hc_face_number := 4 ;
 974: LD_ADDR_OWVAR 34
 978: PUSH
 979: LD_INT 4
 981: ST_TO_ADDR
// hc_sex := sex_male ;
 982: LD_ADDR_OWVAR 27
 986: PUSH
 987: LD_INT 1
 989: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 990: LD_ADDR_EXP 20
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
1000: LD_ADDR_EXP 17
1004: PUSH
1005: LD_STRING Bobby
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: LD_STRING 
1013: PPUSH
1014: CALL 30135 0 3
1018: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1019: LD_ADDR_EXP 18
1023: PUSH
1024: LD_STRING Cyrus
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: LD_STRING 
1032: PPUSH
1033: CALL 30135 0 3
1037: ST_TO_ADDR
// case Difficulty of 1 :
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 1
1045: DOUBLE
1046: EQUAL
1047: IFTRUE 1051
1049: GO 1066
1051: POP
// SetLives ( Bobby , 500 ) ; 2 :
1052: LD_EXP 17
1056: PPUSH
1057: LD_INT 500
1059: PPUSH
1060: CALL_OW 234
1064: GO 1136
1066: LD_INT 2
1068: DOUBLE
1069: EQUAL
1070: IFTRUE 1074
1072: GO 1089
1074: POP
// SetLives ( Bobby , 460 ) ; 3 :
1075: LD_EXP 17
1079: PPUSH
1080: LD_INT 460
1082: PPUSH
1083: CALL_OW 234
1087: GO 1136
1089: LD_INT 3
1091: DOUBLE
1092: EQUAL
1093: IFTRUE 1097
1095: GO 1112
1097: POP
// SetLives ( Bobby , 420 ) ; 4 :
1098: LD_EXP 17
1102: PPUSH
1103: LD_INT 420
1105: PPUSH
1106: CALL_OW 234
1110: GO 1136
1112: LD_INT 4
1114: DOUBLE
1115: EQUAL
1116: IFTRUE 1120
1118: GO 1135
1120: POP
// SetLives ( Bobby , 400 ) ; end ;
1121: LD_EXP 17
1125: PPUSH
1126: LD_INT 400
1128: PPUSH
1129: CALL_OW 234
1133: GO 1136
1135: POP
// end ; end_of_file
1136: LD_VAR 0 1
1140: RET
// export russian_troops_1 , russian_troops_2 , russian_troops_3 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_VAR 0 2
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// uc_side := 3 ;
1176: LD_ADDR_OWVAR 20
1180: PUSH
1181: LD_INT 3
1183: ST_TO_ADDR
// uc_nation := 3 ;
1184: LD_ADDR_OWVAR 21
1188: PUSH
1189: LD_INT 3
1191: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1192: LD_ADDR_EXP 28
1196: PUSH
1197: LD_STRING Pokryshkin
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: LD_STRING 
1205: PPUSH
1206: CALL 30135 0 3
1210: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1211: LD_EXP 28
1215: PPUSH
1216: LD_INT 44
1218: PPUSH
1219: LD_INT 5
1221: PPUSH
1222: LD_INT 0
1224: PPUSH
1225: CALL_OW 48
// hc_importance := 0 ;
1229: LD_ADDR_OWVAR 32
1233: PUSH
1234: LD_INT 0
1236: ST_TO_ADDR
// hc_gallery :=  ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING 
1244: ST_TO_ADDR
// hc_name :=  ;
1245: LD_ADDR_OWVAR 26
1249: PUSH
1250: LD_STRING 
1252: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 1
1258: PPUSH
1259: LD_VAR 0 2
1263: PPUSH
1264: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1268: LD_ADDR_OWVAR 33
1272: PUSH
1273: LD_STRING SecondCharsGal
1275: ST_TO_ADDR
// hc_face_number := 69 ;
1276: LD_ADDR_OWVAR 34
1280: PUSH
1281: LD_INT 69
1283: ST_TO_ADDR
// hc_sex := sex_male ;
1284: LD_ADDR_OWVAR 27
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1292: LD_ADDR_OWVAR 26
1296: PUSH
1297: LD_STRING Ilja Ivanov
1299: ST_TO_ADDR
// un := CreateHuman ;
1300: LD_ADDR_VAR 0 4
1304: PUSH
1305: CALL_OW 44
1309: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1310: LD_ADDR_EXP 21
1314: PUSH
1315: LD_EXP 21
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 4
1327: PPUSH
1328: CALL_OW 2
1332: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1348: LD_INT 1
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1363: LD_ADDR_OWVAR 33
1367: PUSH
1368: LD_STRING SecondCharsGal
1370: ST_TO_ADDR
// hc_face_number := 68 ;
1371: LD_ADDR_OWVAR 34
1375: PUSH
1376: LD_INT 68
1378: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1379: LD_ADDR_OWVAR 26
1383: PUSH
1384: LD_STRING Pavel Starczy
1386: ST_TO_ADDR
// un := CreateHuman ;
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: CALL_OW 44
1396: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1397: LD_ADDR_EXP 21
1401: PUSH
1402: LD_EXP 21
1406: PPUSH
1407: LD_INT 2
1409: PPUSH
1410: LD_VAR 0 4
1414: PPUSH
1415: CALL_OW 2
1419: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1420: LD_VAR 0 4
1424: PPUSH
1425: LD_INT 3
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL_OW 49
// InitHc ;
1435: CALL_OW 19
// for i = 1 to 7 do
1439: LD_ADDR_VAR 0 3
1443: PUSH
1444: DOUBLE
1445: LD_INT 1
1447: DEC
1448: ST_TO_ADDR
1449: LD_INT 7
1451: PUSH
1452: FOR_TO
1453: IFFALSE 1604
// begin PrepareHuman ( false , 1 , skill ) ;
1455: LD_INT 0
1457: PPUSH
1458: LD_INT 1
1460: PPUSH
1461: LD_VAR 0 2
1465: PPUSH
1466: CALL_OW 380
// un := CreateHuman ;
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: CALL_OW 44
1479: ST_TO_ADDR
// if i mod 2 = 0 then
1480: LD_VAR 0 3
1484: PUSH
1485: LD_INT 2
1487: MOD
1488: PUSH
1489: LD_INT 0
1491: EQUAL
1492: IFFALSE 1549
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1494: LD_ADDR_EXP 21
1498: PUSH
1499: LD_EXP 21
1503: PPUSH
1504: LD_EXP 21
1508: PUSH
1509: LD_INT 1
1511: PLUS
1512: PPUSH
1513: LD_VAR 0 4
1517: PPUSH
1518: CALL_OW 2
1522: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_INT 3
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 49
// ComHold ( un ) ;
1538: LD_VAR 0 4
1542: PPUSH
1543: CALL_OW 140
// end else
1547: GO 1602
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1549: LD_ADDR_EXP 22
1553: PUSH
1554: LD_EXP 22
1558: PPUSH
1559: LD_EXP 22
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL_OW 2
1577: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1578: LD_VAR 0 4
1582: PPUSH
1583: LD_INT 4
1585: PPUSH
1586: LD_INT 0
1588: PPUSH
1589: CALL_OW 49
// ComHold ( un ) ;
1593: LD_VAR 0 4
1597: PPUSH
1598: CALL_OW 140
// end ; end ;
1602: GO 1452
1604: POP
1605: POP
// for i := 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1685
// begin PrepareSoldier ( false , 3 ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// russian_troops_3 := Join ( russian_troops_3 , un ) ;
1642: LD_ADDR_EXP 23
1646: PUSH
1647: LD_EXP 23
1651: PPUSH
1652: LD_VAR 0 4
1656: PPUSH
1657: CALL 68335 0 2
1661: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 5 , 3 , false ) ;
1662: LD_VAR 0 4
1666: PPUSH
1667: LD_INT 9
1669: PPUSH
1670: LD_INT 5
1672: PPUSH
1673: LD_INT 3
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL_OW 50
// end ;
1683: GO 1619
1685: POP
1686: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1687: LD_ADDR_VAR 0 3
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 3
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 30
1704: PUSH
1705: LD_INT 31
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL_OW 69
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1740
// PrepareSolBun ( skill , i ) ;
1724: LD_VAR 0 2
1728: PPUSH
1729: LD_VAR 0 3
1733: PPUSH
1734: CALL 197 0 2
1738: GO 1721
1740: POP
1741: POP
// for i = 1 to 3 do
1742: LD_ADDR_VAR 0 3
1746: PUSH
1747: DOUBLE
1748: LD_INT 1
1750: DEC
1751: ST_TO_ADDR
1752: LD_INT 3
1754: PUSH
1755: FOR_TO
1756: IFFALSE 1892
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1758: LD_ADDR_VAR 0 4
1762: PUSH
1763: LD_INT 3
1765: PPUSH
1766: LD_INT 3
1768: PPUSH
1769: LD_INT 22
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_INT 42
1780: PPUSH
1781: LD_INT 100
1783: PPUSH
1784: CALL 333 0 7
1788: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1789: LD_INT 0
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_VAR 0 2
1799: PPUSH
1800: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1804: CALL_OW 44
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1818: LD_VAR 0 4
1822: PPUSH
1823: LD_INT 131
1825: PUSH
1826: LD_INT 23
1828: PUSH
1829: LD_INT 167
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_VAR 0 3
1841: ARRAY
1842: PPUSH
1843: LD_INT 87
1845: PUSH
1846: LD_INT 14
1848: PUSH
1849: LD_INT 95
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_VAR 0 3
1861: ARRAY
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1870: LD_ADDR_EXP 24
1874: PUSH
1875: LD_EXP 24
1879: PPUSH
1880: LD_VAR 0 4
1884: PPUSH
1885: CALL 68335 0 2
1889: ST_TO_ADDR
// end ;
1890: GO 1755
1892: POP
1893: POP
// for i = 1 to 2 do
1894: LD_ADDR_VAR 0 3
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_INT 2
1906: PUSH
1907: FOR_TO
1908: IFFALSE 1999
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1910: LD_INT 2
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 380
// un := CreateHuman ;
1940: LD_ADDR_VAR 0 4
1944: PUSH
1945: CALL_OW 44
1949: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1950: LD_ADDR_EXP 25
1954: PUSH
1955: LD_EXP 25
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: LD_VAR 0 4
1967: PPUSH
1968: CALL_OW 2
1972: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1973: LD_VAR 0 4
1977: PPUSH
1978: LD_INT 10
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 49
// ComHold ( un ) ;
1988: LD_VAR 0 4
1992: PPUSH
1993: CALL_OW 140
// end ;
1997: GO 1907
1999: POP
2000: POP
// if Difficulty < 3 then
2001: LD_OWVAR 67
2005: PUSH
2006: LD_INT 3
2008: LESS
2009: IFFALSE 2013
// exit ;
2011: GO 2084
// PrepareHuman ( false , 1 , skill ) ;
2013: LD_INT 0
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_VAR 0 2
2023: PPUSH
2024: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
2028: LD_ADDR_EXP 26
2032: PUSH
2033: CALL_OW 44
2037: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
2038: LD_EXP 26
2042: PPUSH
2043: LD_INT 82
2045: PPUSH
2046: LD_INT 2
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
2056: LD_ADDR_EXP 27
2060: PUSH
2061: CALL_OW 44
2065: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
2066: LD_EXP 27
2070: PPUSH
2071: LD_INT 136
2073: PPUSH
2074: LD_INT 30
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 48
// end ;
2084: LD_VAR 0 1
2088: RET
// every 0 0$01 trigger active_road_patrol do
2089: LD_EXP 8
2093: IFFALSE 2159
2095: GO 2097
2097: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2098: LD_EXP 24
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_STRING road
2109: PPUSH
2110: LD_INT 70
2112: PPUSH
2113: LD_INT 131
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 107
2121: PUSH
2122: LD_INT 75
2124: PUSH
2125: LD_INT 107
2127: PUSH
2128: LD_INT 66
2130: PUSH
2131: LD_INT 114
2133: PUSH
2134: LD_INT 61
2136: PUSH
2137: LD_INT 107
2139: PUSH
2140: LD_INT 34
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PPUSH
2155: CALL 421 0 4
2159: END
// every 0 0$01 trigger active_road_patrol do
2160: LD_EXP 8
2164: IFFALSE 2222
2166: GO 2168
2168: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2169: LD_EXP 24
2173: PUSH
2174: LD_INT 2
2176: ARRAY
2177: PPUSH
2178: LD_STRING road
2180: PPUSH
2181: LD_INT 70
2183: PPUSH
2184: LD_INT 21
2186: PUSH
2187: LD_INT 12
2189: PUSH
2190: LD_INT 37
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 65
2198: PUSH
2199: LD_INT 62
2201: PUSH
2202: LD_INT 107
2204: PUSH
2205: LD_INT 76
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL 421 0 4
2222: END
// every 0 0$01 trigger active_road_patrol do
2223: LD_EXP 8
2227: IFFALSE 2285
2229: GO 2231
2231: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2232: LD_EXP 24
2236: PUSH
2237: LD_INT 3
2239: ARRAY
2240: PPUSH
2241: LD_STRING road
2243: PPUSH
2244: LD_INT 70
2246: PPUSH
2247: LD_INT 167
2249: PUSH
2250: LD_INT 95
2252: PUSH
2253: LD_INT 147
2255: PUSH
2256: LD_INT 81
2258: PUSH
2259: LD_INT 144
2261: PUSH
2262: LD_INT 66
2264: PUSH
2265: LD_INT 149
2267: PUSH
2268: LD_INT 55
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: PPUSH
2281: CALL 421 0 4
2285: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2286: LD_EXP 26
2290: PPUSH
2291: CALL_OW 302
2295: IFFALSE 2357
2297: GO 2299
2299: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2300: LD_EXP 26
2304: PPUSH
2305: LD_STRING forest
2307: PPUSH
2308: LD_INT 35
2310: PPUSH
2311: LD_INT 52
2313: PUSH
2314: LD_INT 15
2316: PUSH
2317: LD_INT 81
2319: PUSH
2320: LD_INT 9
2322: PUSH
2323: LD_INT 120
2325: PUSH
2326: LD_INT 52
2328: PUSH
2329: LD_INT 135
2331: PUSH
2332: LD_INT 80
2334: PUSH
2335: LD_INT 122
2337: PUSH
2338: LD_INT 95
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: PPUSH
2353: CALL 421 0 4
2357: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2358: LD_EXP 27
2362: PPUSH
2363: CALL_OW 302
2367: IFFALSE 2421
2369: GO 2371
2371: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2372: LD_EXP 27
2376: PPUSH
2377: LD_STRING forest
2379: PPUSH
2380: LD_INT 70
2382: PPUSH
2383: LD_INT 137
2385: PUSH
2386: LD_INT 30
2388: PUSH
2389: LD_INT 127
2391: PUSH
2392: LD_INT 23
2394: PUSH
2395: LD_INT 122
2397: PUSH
2398: LD_INT 16
2400: PUSH
2401: LD_INT 114
2403: PUSH
2404: LD_INT 3
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL 421 0 4
2421: END
// every 0 0$01 trigger macmilan_use_radio do
2422: LD_EXP 6
2426: IFFALSE 2487
2428: GO 2430
2430: DISABLE
// begin active_road_patrol := false ;
2431: LD_ADDR_EXP 8
2435: PUSH
2436: LD_INT 0
2438: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2439: LD_EXP 24
2443: PPUSH
2444: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2448: LD_EXP 24
2452: PPUSH
2453: LD_INT 72
2455: PPUSH
2456: LD_INT 41
2458: PPUSH
2459: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2463: LD_EXP 22
2467: PPUSH
2468: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2472: LD_EXP 22
2476: PPUSH
2477: LD_INT 72
2479: PPUSH
2480: LD_INT 41
2482: PPUSH
2483: CALL_OW 174
// end ;
2487: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2488: LD_INT 9
2490: PPUSH
2491: LD_INT 22
2493: PUSH
2494: LD_INT 1
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 70
2505: IFFALSE 2579
2507: GO 2509
2509: DISABLE
2510: LD_INT 0
2512: PPUSH
// begin enable ;
2513: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2514: LD_ADDR_VAR 0 1
2518: PUSH
2519: LD_INT 9
2521: PPUSH
2522: LD_INT 22
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PPUSH
2532: CALL_OW 70
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2541: LD_EXP 22
2545: PPUSH
2546: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2550: LD_EXP 22
2554: PPUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 250
2564: PPUSH
2565: LD_VAR 0 1
2569: PPUSH
2570: CALL_OW 251
2574: PPUSH
2575: CALL_OW 174
// end ;
2579: PPOPN 1
2581: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 990 or GetLives ( russian_patrol_tanks [ 2 ] ) < 990 ) and See ( 3 , JMM ) do var i ;
2582: LD_EXP 24
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: CALL_OW 256
2595: PUSH
2596: LD_INT 990
2598: LESS
2599: IFTRUE 2620
2601: PUSH
2602: LD_EXP 24
2606: PUSH
2607: LD_INT 2
2609: ARRAY
2610: PPUSH
2611: CALL_OW 256
2615: PUSH
2616: LD_INT 990
2618: LESS
2619: OR
2620: IFFALSE 2636
2622: PUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_EXP 16
2630: PPUSH
2631: CALL_OW 292
2635: AND
2636: IFFALSE 2711
2638: GO 2640
2640: DISABLE
2641: LD_INT 0
2643: PPUSH
// begin active_road_patrol := false ;
2644: LD_ADDR_EXP 8
2648: PUSH
2649: LD_INT 0
2651: ST_TO_ADDR
// for i in russian_patrol_tanks do
2652: LD_ADDR_VAR 0 1
2656: PUSH
2657: LD_EXP 24
2661: PUSH
2662: FOR_IN
2663: IFFALSE 2701
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: LD_INT 22
2672: PUSH
2673: LD_INT 1
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: PPUSH
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 74
2694: PPUSH
2695: CALL_OW 115
2699: GO 2662
2701: POP
2702: POP
// wait ( 0 0$2 ) ;
2703: LD_INT 70
2705: PPUSH
2706: CALL_OW 67
// enable ;
2710: ENABLE
// end ;
2711: PPOPN 1
2713: END
// every 0 0$01 trigger macmilan_in_trap do
2714: LD_EXP 9
2718: IFFALSE 2764
2720: GO 2722
2722: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2723: LD_EXP 22
2727: PPUSH
2728: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2732: LD_EXP 21
2736: PUSH
2737: LD_EXP 22
2741: ADD
2742: PUSH
2743: LD_EXP 28
2747: ADD
2748: PUSH
2749: LD_EXP 24
2753: ADD
2754: PPUSH
2755: LD_EXP 16
2759: PPUSH
2760: CALL_OW 115
// end ;
2764: END
// every 0 0$01 trigger meta_action do
2765: LD_EXP 10
2769: IFFALSE 2887
2771: GO 2773
2773: DISABLE
// begin active_road_patrol := false ;
2774: LD_ADDR_EXP 8
2778: PUSH
2779: LD_INT 0
2781: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2782: LD_INT 15
2784: PPUSH
2785: LD_INT 22
2787: PUSH
2788: LD_INT 1
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PPUSH
2795: CALL_OW 70
2799: IFFALSE 2854
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2801: LD_EXP 21
2805: PUSH
2806: LD_EXP 22
2810: ADD
2811: PPUSH
2812: LD_INT 104
2814: PPUSH
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2822: LD_EXP 24
2826: PPUSH
2827: LD_INT 96
2829: PPUSH
2830: LD_INT 14
2832: PPUSH
2833: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2837: LD_EXP 28
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: LD_INT 4
2847: PPUSH
2848: CALL_OW 114
// end else
2852: GO 2887
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2854: LD_EXP 21
2858: PUSH
2859: LD_EXP 22
2863: ADD
2864: PUSH
2865: LD_EXP 28
2869: ADD
2870: PUSH
2871: LD_EXP 24
2875: ADD
2876: PPUSH
2877: LD_INT 93
2879: PPUSH
2880: LD_INT 1
2882: PPUSH
2883: CALL_OW 114
// end ;
2887: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2888: LD_EXP 28
2892: PPUSH
2893: CALL_OW 256
2897: PUSH
2898: LD_INT 1000
2900: LESS
2901: IFFALSE 2952
2903: GO 2905
2905: DISABLE
// begin enable ;
2906: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2907: LD_INT 18
2909: PPUSH
2910: LD_INT 1
2912: PPUSH
2913: CALL_OW 428
2917: PUSH
2918: LD_EXP 28
2922: EQUAL
2923: IFFALSE 2937
// begin RemoveUnit ( Pokryshkin ) ;
2925: LD_EXP 28
2929: PPUSH
2930: CALL_OW 64
// disable ;
2934: DISABLE
// end else
2935: GO 2952
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2937: LD_EXP 28
2941: PPUSH
2942: LD_INT 18
2944: PPUSH
2945: LD_INT 1
2947: PPUSH
2948: CALL_OW 111
// end ;
2952: END
// every 0 0$20 trigger send_troops_to_forest do
2953: LD_EXP 14
2957: IFFALSE 3011
2959: GO 2961
2961: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2962: LD_EXP 26
2966: PPUSH
2967: CALL_OW 302
2971: NOT
2972: IFFALSE 2976
// exit ;
2974: GO 3011
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2976: LD_EXP 21
2980: PUSH
2981: LD_EXP 28
2985: ADD
2986: PPUSH
2987: LD_EXP 26
2991: PPUSH
2992: CALL_OW 252
2996: PPUSH
2997: LD_EXP 26
3001: PPUSH
3002: CALL_OW 253
3006: PPUSH
3007: CALL_OW 114
// end ;
3011: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
3012: LD_VAR 0 1
3016: PPUSH
3017: CALL_OW 255
3021: PUSH
3022: LD_INT 3
3024: EQUAL
3025: IFFALSE 3083
// begin wait ( 11 ) ;
3027: LD_INT 11
3029: PPUSH
3030: CALL_OW 67
// ComMoveXY ( driver , 24 , 14 ) ;
3034: LD_VAR 0 1
3038: PPUSH
3039: LD_INT 24
3041: PPUSH
3042: LD_INT 14
3044: PPUSH
3045: CALL_OW 111
// AddComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
3049: LD_VAR 0 1
3053: PPUSH
3054: LD_INT 30
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PPUSH
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 74
3078: PPUSH
3079: CALL_OW 180
// end ; end ; end_of_file
3083: PPOPN 4
3085: END
// export function Action ; var i ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3090: LD_ADDR_VAR 0 2
3094: PUSH
3095: LD_INT 22
3097: PUSH
3098: LD_INT 3
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: LD_INT 25
3107: PUSH
3108: LD_INT 1
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PPUSH
3119: CALL_OW 69
3123: PUSH
3124: FOR_IN
3125: IFFALSE 3138
// ComHold ( i ) ;
3127: LD_VAR 0 2
3131: PPUSH
3132: CALL_OW 140
3136: GO 3124
3138: POP
3139: POP
// InGameOn ;
3140: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
3144: LD_INT 79
3146: PPUSH
3147: LD_INT 76
3149: PPUSH
3150: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3154: LD_INT 10
3156: PPUSH
3157: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3161: LD_EXP 16
3165: PPUSH
3166: LD_INT 80
3168: PPUSH
3169: LD_INT 79
3171: PPUSH
3172: LD_INT 1
3174: PPUSH
3175: CALL_OW 48
// wait ( 0 0$03 ) ;
3179: LD_INT 105
3181: PPUSH
3182: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3186: LD_EXP 16
3190: PPUSH
3191: LD_INT 80
3193: PPUSH
3194: LD_INT 76
3196: PPUSH
3197: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3201: LD_EXP 16
3205: PPUSH
3206: LD_STRING D1-JMM-1
3208: PPUSH
3209: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3213: LD_INT 10
3215: PPUSH
3216: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3220: LD_EXP 16
3224: PPUSH
3225: LD_INT 76
3227: PPUSH
3228: LD_INT 76
3230: PPUSH
3231: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3235: LD_EXP 16
3239: PPUSH
3240: LD_STRING D1-JMM-1a
3242: PPUSH
3243: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3247: LD_INT 10
3249: PPUSH
3250: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3254: LD_EXP 16
3258: PPUSH
3259: LD_INT 83
3261: PPUSH
3262: LD_INT 66
3264: PPUSH
3265: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3269: LD_EXP 16
3273: PPUSH
3274: LD_STRING D1-JMM-1b
3276: PPUSH
3277: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3281: LD_INT 18
3283: PPUSH
3284: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3288: LD_EXP 16
3292: PPUSH
3293: LD_STRING D1-JMM-1c
3295: PPUSH
3296: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3300: LD_INT 7
3302: PPUSH
3303: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3307: LD_EXP 19
3311: PPUSH
3312: LD_STRING D1-Pow-1
3314: PPUSH
3315: CALL 72580 0 2
// Say ( JMM , D1-JMM-2 ) ;
3319: LD_EXP 16
3323: PPUSH
3324: LD_STRING D1-JMM-2
3326: PPUSH
3327: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3331: LD_EXP 19
3335: PPUSH
3336: LD_STRING D1-Pow-2
3338: PPUSH
3339: CALL 72580 0 2
// Say ( JMM , D1-JMM-3 ) ;
3343: LD_EXP 16
3347: PPUSH
3348: LD_STRING D1-JMM-3
3350: PPUSH
3351: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3355: LD_EXP 19
3359: PPUSH
3360: LD_STRING D1-Pow-3
3362: PPUSH
3363: CALL 72580 0 2
// Say ( JMM , D1-JMM-4 ) ;
3367: LD_EXP 16
3371: PPUSH
3372: LD_STRING D1-JMM-4
3374: PPUSH
3375: CALL_OW 88
// ComFree ( JMM ) ;
3379: LD_EXP 16
3383: PPUSH
3384: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3388: LD_INT 10
3390: PPUSH
3391: CALL_OW 67
// InGameOff ;
3395: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3399: LD_STRING M1
3401: PPUSH
3402: CALL_OW 337
// SaveForQuickRestart ;
3406: CALL_OW 22
// active_russian_dialog := true ;
3410: LD_ADDR_EXP 3
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
// active_road_patrol := true ;
3418: LD_ADDR_EXP 8
3422: PUSH
3423: LD_INT 1
3425: ST_TO_ADDR
// if Difficulty < 3 then
3426: LD_OWVAR 67
3430: PUSH
3431: LD_INT 3
3433: LESS
3434: IFFALSE 3465
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3436: LD_EXP 17
3440: PPUSH
3441: LD_INT 41
3443: PPUSH
3444: LD_INT 71
3446: PPUSH
3447: LD_INT 0
3449: PPUSH
3450: CALL_OW 48
// ComHold ( Bobby ) ;
3454: LD_EXP 17
3458: PPUSH
3459: CALL_OW 140
// end else
3463: GO 3513
// begin SetDir ( Bobby , 5 ) ;
3465: LD_EXP 17
3469: PPUSH
3470: LD_INT 5
3472: PPUSH
3473: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3477: LD_EXP 17
3481: PPUSH
3482: LD_INT 105
3484: PPUSH
3485: LD_INT 98
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: CALL_OW 48
// ComCrawl ( Bobby ) ;
3495: LD_EXP 17
3499: PPUSH
3500: CALL_OW 137
// AddComHold ( Bobby ) ;
3504: LD_EXP 17
3508: PPUSH
3509: CALL_OW 200
// end ; if Difficulty < 3 then
3513: LD_OWVAR 67
3517: PUSH
3518: LD_INT 3
3520: LESS
3521: IFFALSE 3558
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3523: LD_EXP 18
3527: PPUSH
3528: LD_INT 90
3530: PPUSH
3531: LD_INT 42
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3541: LD_EXP 18
3545: PPUSH
3546: LD_INT 79
3548: PPUSH
3549: LD_INT 34
3551: PPUSH
3552: CALL_OW 111
// end else
3556: GO 3606
// if Difficulty = 3 then
3558: LD_OWVAR 67
3562: PUSH
3563: LD_INT 3
3565: EQUAL
3566: IFFALSE 3588
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3568: LD_EXP 18
3572: PPUSH
3573: LD_INT 125
3575: PPUSH
3576: LD_INT 42
3578: PPUSH
3579: LD_INT 0
3581: PPUSH
3582: CALL_OW 48
3586: GO 3606
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3588: LD_EXP 18
3592: PPUSH
3593: LD_INT 154
3595: PPUSH
3596: LD_INT 97
3598: PPUSH
3599: LD_INT 0
3601: PPUSH
3602: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3606: LD_EXP 18
3610: PPUSH
3611: CALL_OW 197
// AddComHold ( Cyrus ) ;
3615: LD_EXP 18
3619: PPUSH
3620: CALL_OW 200
// end ;
3624: LD_VAR 0 1
3628: RET
// every 0 0$01 trigger active_russian_dialog do var i , wait_points , tmp ;
3629: LD_EXP 3
3633: IFFALSE 4379
3635: GO 3637
3637: DISABLE
3638: LD_INT 0
3640: PPUSH
3641: PPUSH
3642: PPUSH
// begin wait_points := 0 ;
3643: LD_ADDR_VAR 0 2
3647: PUSH
3648: LD_INT 0
3650: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3651: LD_INT 70
3653: PPUSH
3654: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3658: LD_EXP 21
3662: PPUSH
3663: LD_INT 79
3665: PPUSH
3666: LD_INT 83
3668: PPUSH
3669: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3673: LD_EXP 21
3677: PUSH
3678: LD_INT 2
3680: ARRAY
3681: PPUSH
3682: LD_STRING D1R-Rus1-1
3684: PPUSH
3685: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3689: LD_EXP 21
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: PPUSH
3698: LD_STRING D1R-Rus2-1
3700: PPUSH
3701: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3705: LD_EXP 22
3709: PPUSH
3710: LD_INT 91
3712: PPUSH
3713: LD_INT 80
3715: PPUSH
3716: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3720: LD_INT 35
3722: PPUSH
3723: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3727: LD_EXP 21
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_INT 79
3738: PPUSH
3739: LD_INT 82
3741: PPUSH
3742: CALL_OW 297
3746: PUSH
3747: LD_INT 6
3749: LESS
3750: IFFALSE 3720
// if not IsInArea ( JMM , jmm_spot ) then
3752: LD_EXP 16
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: CALL_OW 308
3764: NOT
3765: IFFALSE 3785
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_STRING D1Ra-Rus2-1
3778: PPUSH
3779: CALL_OW 88
3783: GO 3852
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3785: LD_EXP 21
3789: PUSH
3790: LD_INT 2
3792: ARRAY
3793: PPUSH
3794: LD_STRING D1Rb-Rus1-1
3796: PPUSH
3797: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3801: LD_EXP 21
3805: PUSH
3806: LD_INT 1
3808: ARRAY
3809: PPUSH
3810: LD_STRING D1Rb-Rus2-1
3812: PPUSH
3813: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3817: LD_EXP 21
3821: PUSH
3822: LD_EXP 22
3826: ADD
3827: PPUSH
3828: LD_EXP 16
3832: PPUSH
3833: CALL_OW 250
3837: PPUSH
3838: LD_EXP 16
3842: PPUSH
3843: CALL_OW 251
3847: PPUSH
3848: CALL_OW 114
// end ; wait_points := 10 ;
3852: LD_ADDR_VAR 0 2
3856: PUSH
3857: LD_INT 10
3859: ST_TO_ADDR
// if Difficulty > 1 then
3860: LD_OWVAR 67
3864: PUSH
3865: LD_INT 1
3867: GREATER
3868: IFFALSE 4027
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3870: LD_EXP 21
3874: PPUSH
3875: LD_INT 78
3877: PPUSH
3878: LD_INT 95
3880: PPUSH
3881: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3885: LD_EXP 21
3889: PPUSH
3890: LD_INT 175
3892: PPUSH
3893: CALL_OW 202
// wait_points := wait_points + 15 ;
3897: LD_ADDR_VAR 0 2
3901: PUSH
3902: LD_VAR 0 2
3906: PUSH
3907: LD_INT 15
3909: PLUS
3910: ST_TO_ADDR
// if Difficulty > 2 then
3911: LD_OWVAR 67
3915: PUSH
3916: LD_INT 2
3918: GREATER
3919: IFFALSE 3950
// begin AddComAgressiveMove ( russian_troops_1 , 63 , 81 ) ;
3921: LD_EXP 21
3925: PPUSH
3926: LD_INT 63
3928: PPUSH
3929: LD_INT 81
3931: PPUSH
3932: CALL_OW 174
// wait_points := wait_points + 7 ;
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: LD_VAR 0 2
3945: PUSH
3946: LD_INT 7
3948: PLUS
3949: ST_TO_ADDR
// end ; if Difficulty > 3 then
3950: LD_OWVAR 67
3954: PUSH
3955: LD_INT 3
3957: GREATER
3958: IFFALSE 4027
// begin AddComAgressiveMove ( russian_troops_1 [ 1 ] , 56 , 73 ) ;
3960: LD_EXP 21
3964: PUSH
3965: LD_INT 1
3967: ARRAY
3968: PPUSH
3969: LD_INT 56
3971: PPUSH
3972: LD_INT 73
3974: PPUSH
3975: CALL_OW 174
// AddComAgressiveMove ( russian_troops_1 [ 2 ] , 89 , 96 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: LD_INT 89
3990: PPUSH
3991: LD_INT 96
3993: PPUSH
3994: CALL_OW 174
// AddComAgressiveMove ( russian_troops_1 , 67 , 95 ) ;
3998: LD_EXP 21
4002: PPUSH
4003: LD_INT 67
4005: PPUSH
4006: LD_INT 95
4008: PPUSH
4009: CALL_OW 174
// wait_points := wait_points + 12 ;
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 12
4025: PLUS
4026: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
4027: LD_INT 35
4029: PPUSH
4030: CALL_OW 67
// wait_points := wait_points - 1 ;
4034: LD_ADDR_VAR 0 2
4038: PUSH
4039: LD_VAR 0 2
4043: PUSH
4044: LD_INT 1
4046: MINUS
4047: ST_TO_ADDR
// if See ( 3 , JMM ) then
4048: LD_INT 3
4050: PPUSH
4051: LD_EXP 16
4055: PPUSH
4056: CALL_OW 292
4060: IFFALSE 4114
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
4062: LD_EXP 21
4066: PUSH
4067: LD_INT 2
4069: ARRAY
4070: PPUSH
4071: LD_STRING D1Rb-Rus1-1
4073: PPUSH
4074: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
4078: LD_EXP 21
4082: PPUSH
4083: LD_EXP 16
4087: PPUSH
4088: CALL_OW 250
4092: PPUSH
4093: LD_EXP 16
4097: PPUSH
4098: CALL_OW 251
4102: PPUSH
4103: CALL_OW 114
// wait ( 0 0$03 ) ;
4107: LD_INT 105
4109: PPUSH
4110: CALL_OW 67
// end ; until wait_points = 0 ;
4114: LD_VAR 0 2
4118: PUSH
4119: LD_INT 0
4121: EQUAL
4122: IFFALSE 4027
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
4124: LD_EXP 21
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PPUSH
4133: LD_STRING D1Rc-Rus1-1
4135: PPUSH
4136: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
4140: LD_EXP 21
4144: PUSH
4145: LD_INT 1
4147: ARRAY
4148: PPUSH
4149: LD_STRING D1Ra-Rus2-1a
4151: PPUSH
4152: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_distxy , 70 , 89 , 9 ] ] ) ;
4156: LD_ADDR_VAR 0 3
4160: PUSH
4161: LD_INT 22
4163: PUSH
4164: LD_INT 0
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PUSH
4171: LD_INT 92
4173: PUSH
4174: LD_INT 70
4176: PUSH
4177: LD_INT 89
4179: PUSH
4180: LD_INT 9
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 69
4197: ST_TO_ADDR
// if tmp then
4198: LD_VAR 0 3
4202: IFFALSE 4229
// begin ComAttackUnit ( russian_troops_1 , tmp [ 1 ] ) ;
4204: LD_EXP 21
4208: PPUSH
4209: LD_VAR 0 3
4213: PUSH
4214: LD_INT 1
4216: ARRAY
4217: PPUSH
4218: CALL_OW 115
// wait ( 0 0$4 ) ;
4222: LD_INT 140
4224: PPUSH
4225: CALL_OW 67
// end ; active_powell_dialog := true ;
4229: LD_ADDR_EXP 15
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4237: LD_EXP 21
4241: PPUSH
4242: LD_INT 45
4244: PPUSH
4245: LD_INT 5
4247: PPUSH
4248: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
4252: LD_EXP 22
4256: PPUSH
4257: LD_INT 26
4259: PPUSH
4260: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
4264: LD_INT 35
4266: PPUSH
4267: CALL_OW 67
// if See ( 3 , JMM ) then
4271: LD_INT 3
4273: PPUSH
4274: LD_EXP 16
4278: PPUSH
4279: CALL_OW 292
4283: IFFALSE 4339
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
4285: LD_EXP 21
4289: PUSH
4290: LD_INT 2
4292: ARRAY
4293: PPUSH
4294: LD_STRING D1Rb-Rus1-1
4296: PPUSH
4297: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
4301: LD_EXP 21
4305: PPUSH
4306: LD_EXP 16
4310: PPUSH
4311: CALL_OW 250
4315: PPUSH
4316: LD_EXP 16
4320: PPUSH
4321: CALL_OW 251
4325: PPUSH
4326: CALL_OW 114
// Wait ( 0 0$50 ) ;
4330: LD_INT 1750
4332: PPUSH
4333: CALL_OW 67
// end else
4337: GO 4354
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4339: LD_EXP 21
4343: PPUSH
4344: LD_INT 45
4346: PPUSH
4347: LD_INT 5
4349: PPUSH
4350: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4354: LD_EXP 21
4358: PUSH
4359: LD_INT 1
4361: ARRAY
4362: PPUSH
4363: LD_INT 45
4365: PPUSH
4366: LD_INT 5
4368: PPUSH
4369: CALL_OW 297
4373: PUSH
4374: LD_INT 10
4376: LESS
4377: IFFALSE 4264
// end ;
4379: PPOPN 3
4381: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4382: LD_INT 22
4384: PUSH
4385: LD_INT 3
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: LD_INT 92
4394: PUSH
4395: LD_INT 80
4397: PUSH
4398: LD_INT 83
4400: PUSH
4401: LD_INT 6
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PPUSH
4414: CALL_OW 69
4418: IFFALSE 4430
4420: PUSH
4421: LD_OWVAR 67
4425: PUSH
4426: LD_INT 1
4428: EQUAL
4429: AND
4430: IFFALSE 4511
4432: GO 4434
4434: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4435: LD_INT 80
4437: PPUSH
4438: LD_INT 83
4440: PPUSH
4441: LD_INT 1
4443: PPUSH
4444: LD_INT 7
4446: NEG
4447: PPUSH
4448: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4452: LD_INT 35
4454: PPUSH
4455: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4459: LD_INT 22
4461: PUSH
4462: LD_INT 3
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 92
4471: PUSH
4472: LD_INT 80
4474: PUSH
4475: LD_INT 83
4477: PUSH
4478: LD_INT 10
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 69
4495: NOT
4496: IFFALSE 4452
// RemoveSeeing ( 80 , 83 , 1 ) ;
4498: LD_INT 80
4500: PPUSH
4501: LD_INT 83
4503: PPUSH
4504: LD_INT 1
4506: PPUSH
4507: CALL_OW 331
// end ;
4511: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4512: LD_EXP 16
4516: PPUSH
4517: LD_EXP 17
4521: PPUSH
4522: CALL_OW 296
4526: PUSH
4527: LD_INT 6
4529: LESS
4530: IFFALSE 4543
4532: PUSH
4533: LD_EXP 17
4537: PPUSH
4538: CALL_OW 302
4542: AND
4543: IFFALSE 5041
4545: GO 4547
4547: DISABLE
// begin ComWalk ( Bobby ) ;
4548: LD_EXP 17
4552: PPUSH
4553: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4557: LD_EXP 17
4561: PPUSH
4562: LD_EXP 16
4566: PPUSH
4567: CALL_OW 250
4571: PPUSH
4572: LD_EXP 16
4576: PPUSH
4577: CALL_OW 251
4581: PPUSH
4582: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4586: LD_INT 35
4588: PPUSH
4589: CALL_OW 67
// until See ( 4 , JMM ) ;
4593: LD_INT 4
4595: PPUSH
4596: LD_EXP 16
4600: PPUSH
4601: CALL_OW 292
4605: IFFALSE 4586
// InGameOn ;
4607: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4611: LD_EXP 16
4615: PPUSH
4616: LD_EXP 17
4620: PPUSH
4621: CALL_OW 119
// if not cyrus_in_squad then
4625: LD_EXP 7
4629: NOT
4630: IFFALSE 4658
// begin AddComAnim ( JMM , 6 ) ;
4632: LD_EXP 16
4636: PPUSH
4637: LD_INT 6
4639: PPUSH
4640: CALL_OW 209
// AddComTurnUnit ( JMM , Bobby ) ;
4644: LD_EXP 16
4648: PPUSH
4649: LD_EXP 17
4653: PPUSH
4654: CALL_OW 179
// end ; if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4658: LD_EXP 7
4662: IFFALSE 4675
4664: PUSH
4665: LD_EXP 18
4669: PPUSH
4670: CALL_OW 302
4674: AND
4675: IFFALSE 4697
4677: PUSH
4678: LD_EXP 16
4682: PPUSH
4683: LD_EXP 18
4687: PPUSH
4688: CALL_OW 296
4692: PUSH
4693: LD_INT 10
4695: LESS
4696: AND
4697: IFFALSE 4742
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4699: LD_EXP 18
4703: PPUSH
4704: LD_EXP 16
4708: PPUSH
4709: CALL_OW 250
4713: PPUSH
4714: LD_EXP 16
4718: PPUSH
4719: CALL_OW 251
4723: PPUSH
4724: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4728: LD_EXP 18
4732: PPUSH
4733: LD_EXP 17
4737: PPUSH
4738: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4742: LD_EXP 16
4746: PPUSH
4747: LD_STRING D2-JMM-1
4749: PPUSH
4750: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4754: LD_EXP 17
4758: PPUSH
4759: LD_EXP 16
4763: PPUSH
4764: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4768: LD_INT 10
4770: PPUSH
4771: CALL_OW 67
// Say ( Bobby , D2-Bobby-1 ) ;
4775: LD_EXP 17
4779: PPUSH
4780: LD_STRING D2-Bobby-1
4782: PPUSH
4783: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4787: LD_EXP 16
4791: PPUSH
4792: LD_STRING D2-JMM-2
4794: PPUSH
4795: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4799: LD_EXP 17
4803: PPUSH
4804: LD_EXP 16
4808: PPUSH
4809: CALL_OW 250
4813: PPUSH
4814: LD_EXP 16
4818: PPUSH
4819: CALL_OW 251
4823: PPUSH
4824: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4828: LD_EXP 17
4832: PPUSH
4833: LD_STRING D2-Bobby-2
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4840: LD_EXP 16
4844: PPUSH
4845: LD_STRING D2-JMM-3
4847: PPUSH
4848: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4852: LD_EXP 17
4856: PPUSH
4857: LD_EXP 16
4861: PPUSH
4862: CALL_OW 119
// DialogueOn ;
4866: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4870: LD_EXP 17
4874: PPUSH
4875: LD_STRING D2-Bobby-3
4877: PPUSH
4878: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4882: LD_EXP 16
4886: PPUSH
4887: LD_STRING D2-JMM-4
4889: PPUSH
4890: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4894: LD_EXP 17
4898: PPUSH
4899: LD_STRING D2-Bobby-4
4901: PPUSH
4902: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4906: LD_EXP 16
4910: PPUSH
4911: LD_STRING D2-JMM-5
4913: PPUSH
4914: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4918: LD_EXP 17
4922: PPUSH
4923: LD_STRING D2-Bobby-5
4925: PPUSH
4926: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING D2-JMM-6
4937: PPUSH
4938: CALL_OW 88
// if not powell_contact then
4942: LD_EXP 5
4946: NOT
4947: IFFALSE 4973
// begin Say ( Bobby , D2-Bobby-6 ) ;
4949: LD_EXP 17
4953: PPUSH
4954: LD_STRING D2-Bobby-6
4956: PPUSH
4957: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4961: LD_EXP 16
4965: PPUSH
4966: LD_STRING D2-JMM-7
4968: PPUSH
4969: CALL_OW 88
// end ; DialogueOff ;
4973: CALL_OW 7
// InGameOff ;
4977: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4981: LD_EXP 17
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4993: LD_EXP 16
4997: PUSH
4998: LD_EXP 17
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 139
// bobby_in_squad := true ;
5011: LD_ADDR_EXP 4
5015: PUSH
5016: LD_INT 1
5018: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
5019: LD_EXP 5
5023: IFFALSE 5032
5025: PUSH
5026: LD_EXP 7
5030: NOT
5031: AND
5032: IFFALSE 5041
// ChangeMissionObjectives ( M2b ) ;
5034: LD_STRING M2b
5036: PPUSH
5037: CALL_OW 337
// end ;
5041: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
5042: LD_EXP 3
5046: IFFALSE 5058
5048: PUSH
5049: LD_OWVAR 67
5053: PUSH
5054: LD_INT 3
5056: LESS
5057: AND
5058: IFFALSE 5092
5060: GO 5062
5062: DISABLE
// begin wait ( 1 1$00 ) ;
5063: LD_INT 2100
5065: PPUSH
5066: CALL_OW 67
// if not bobby_in_squad then
5070: LD_EXP 4
5074: NOT
5075: IFFALSE 5092
// ComMoveXY ( Bobby , 75 , 83 ) ;
5077: LD_EXP 17
5081: PPUSH
5082: LD_INT 75
5084: PPUSH
5085: LD_INT 83
5087: PPUSH
5088: CALL_OW 111
// end ;
5092: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
5093: LD_EXP 7
5097: IFFALSE 5106
5099: PUSH
5100: LD_EXP 4
5104: NOT
5105: AND
5106: IFFALSE 5135
5108: GO 5110
5110: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
5111: LD_EXP 17
5115: PPUSH
5116: LD_INT 105
5118: PPUSH
5119: LD_INT 97
5121: PPUSH
5122: CALL_OW 111
// AddComCrawl ( Bobby ) ;
5126: LD_EXP 17
5130: PPUSH
5131: CALL_OW 197
// end ;
5135: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
5136: LD_EXP 16
5140: PPUSH
5141: LD_INT 6
5143: PPUSH
5144: CALL_OW 308
5148: IFFALSE 5170
5150: PUSH
5151: LD_EXP 16
5155: PPUSH
5156: LD_EXP 17
5160: PPUSH
5161: CALL_OW 296
5165: PUSH
5166: LD_INT 7
5168: LESS
5169: AND
5170: IFFALSE 5178
5172: PUSH
5173: LD_EXP 4
5177: AND
5178: IFFALSE 5225
5180: GO 5182
5182: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
5183: LD_EXP 16
5187: PUSH
5188: LD_EXP 17
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
5201: LD_EXP 16
5205: PPUSH
5206: LD_STRING D2a-JMM-1
5208: PPUSH
5209: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
5213: LD_EXP 17
5217: PPUSH
5218: LD_STRING D2a-Bobby-1
5220: PPUSH
5221: CALL_OW 88
// end ;
5225: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
5226: LD_EXP 15
5230: IFFALSE 5247
5232: PUSH
5233: LD_INT 3
5235: PPUSH
5236: LD_EXP 16
5240: PPUSH
5241: CALL_OW 292
5245: NOT
5246: AND
5247: IFFALSE 5418
5249: GO 5251
5251: DISABLE
// begin wait ( 0 0$5 ) ;
5252: LD_INT 175
5254: PPUSH
5255: CALL_OW 67
// InGameOn ;
5259: CALL_OW 8
// DialogueOn ;
5263: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
5267: LD_EXP 19
5271: PPUSH
5272: LD_STRING D3-Pow-1
5274: PPUSH
5275: CALL 72580 0 2
// Say ( JMM , D3-JMM-1 ) ;
5279: LD_EXP 16
5283: PPUSH
5284: LD_STRING D3-JMM-1
5286: PPUSH
5287: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
5291: LD_EXP 19
5295: PPUSH
5296: LD_STRING D3-Pow-2
5298: PPUSH
5299: CALL 72580 0 2
// Say ( JMM , D3-JMM-2 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D3-JMM-2
5310: PPUSH
5311: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
5315: LD_EXP 19
5319: PPUSH
5320: LD_STRING D3-Pow-3
5322: PPUSH
5323: CALL 72580 0 2
// DialogueOff ;
5327: CALL_OW 7
// InGameOff ;
5331: CALL_OW 9
// powell_contact := true ;
5335: LD_ADDR_EXP 5
5339: PUSH
5340: LD_INT 1
5342: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
5343: LD_INT 10
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: CALL_OW 424
// uc_side := 4 ;
5353: LD_ADDR_OWVAR 20
5357: PUSH
5358: LD_INT 4
5360: ST_TO_ADDR
// uc_nation := 1 ;
5361: LD_ADDR_OWVAR 21
5365: PUSH
5366: LD_INT 1
5368: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5369: LD_ADDR_EXP 19
5373: PUSH
5374: LD_STRING Powell
5376: PPUSH
5377: LD_INT 0
5379: PPUSH
5380: LD_STRING 
5382: PPUSH
5383: CALL 30135 0 3
5387: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5388: LD_STRING M2
5390: PPUSH
5391: CALL_OW 337
// if not bobby_in_squad then
5395: LD_EXP 4
5399: NOT
5400: IFFALSE 5411
// ChangeMissionObjectives ( M2a ) else
5402: LD_STRING M2a
5404: PPUSH
5405: CALL_OW 337
5409: GO 5418
// ChangeMissionObjectives ( M2b ) ;
5411: LD_STRING M2b
5413: PPUSH
5414: CALL_OW 337
// end ;
5418: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5419: LD_EXP 16
5423: PPUSH
5424: LD_INT 7
5426: PPUSH
5427: CALL_OW 308
5431: IFFALSE 5566
5433: GO 5435
5435: DISABLE
// begin DialogueOn ;
5436: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5440: LD_EXP 20
5444: PPUSH
5445: LD_STRING D4-Rus3-1
5447: PPUSH
5448: CALL 72580 0 2
// DialogueOff ;
5452: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5456: LD_STRING M3a
5458: PPUSH
5459: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5463: LD_INT 11
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 424
// Wait ( 0 0$02 ) ;
5473: LD_INT 70
5475: PPUSH
5476: CALL_OW 67
// DialogueOn ;
5480: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5484: LD_EXP 19
5488: PPUSH
5489: LD_STRING D4-Pow-1
5491: PPUSH
5492: CALL_OW 586
// DialogueOff ;
5496: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5500: LD_STRING M3b
5502: PPUSH
5503: CALL_OW 337
// case Query ( Q1 ) of 1 :
5507: LD_STRING Q1
5509: PPUSH
5510: CALL_OW 97
5514: PUSH
5515: LD_INT 1
5517: DOUBLE
5518: EQUAL
5519: IFTRUE 5523
5521: GO 5554
5523: POP
// begin macmilan_use_radio := true ;
5524: LD_ADDR_EXP 6
5528: PUSH
5529: LD_INT 1
5531: ST_TO_ADDR
// DialogueOn ;
5532: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5536: LD_EXP 16
5540: PPUSH
5541: LD_STRING D4a-JMM-1
5543: PPUSH
5544: CALL_OW 88
// DialogueOff ;
5548: CALL_OW 7
// end ; 2 :
5552: GO 5566
5554: LD_INT 2
5556: DOUBLE
5557: EQUAL
5558: IFTRUE 5562
5560: GO 5565
5562: POP
// ; end ;
5563: GO 5566
5565: POP
// end ;
5566: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5567: LD_EXP 16
5571: PPUSH
5572: LD_EXP 18
5576: PPUSH
5577: CALL_OW 296
5581: PUSH
5582: LD_INT 8
5584: LESS
5585: IFFALSE 5598
5587: PUSH
5588: LD_EXP 18
5592: PPUSH
5593: CALL_OW 302
5597: AND
5598: IFFALSE 5899
5600: GO 5602
5602: DISABLE
// begin InGameOn ;
5603: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5607: LD_EXP 16
5611: PPUSH
5612: LD_EXP 18
5616: PPUSH
5617: CALL_OW 250
5621: PPUSH
5622: LD_EXP 18
5626: PPUSH
5627: CALL_OW 251
5631: PPUSH
5632: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5636: LD_EXP 17
5640: PPUSH
5641: CALL_OW 302
5645: IFFALSE 5653
5647: PUSH
5648: LD_EXP 4
5652: AND
5653: IFFALSE 5684
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5655: LD_EXP 17
5659: PPUSH
5660: LD_EXP 16
5664: PPUSH
5665: CALL_OW 250
5669: PPUSH
5670: LD_EXP 16
5674: PPUSH
5675: CALL_OW 251
5679: PPUSH
5680: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5684: LD_EXP 16
5688: PPUSH
5689: LD_STRING D5-JMM-1
5691: PPUSH
5692: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5696: LD_INT 10
5698: PPUSH
5699: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5703: LD_EXP 16
5707: PPUSH
5708: LD_EXP 18
5712: PPUSH
5713: CALL_OW 119
// ComWalk ( Cyrus ) ;
5717: LD_EXP 18
5721: PPUSH
5722: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5726: LD_EXP 18
5730: PPUSH
5731: LD_EXP 16
5735: PPUSH
5736: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5740: LD_EXP 18
5744: PPUSH
5745: LD_STRING D5-Cyrus-1
5747: PPUSH
5748: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5752: LD_EXP 17
5756: PPUSH
5757: CALL_OW 302
5761: IFFALSE 5769
5763: PUSH
5764: LD_EXP 4
5768: AND
5769: IFFALSE 5809
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5771: LD_EXP 17
5775: PPUSH
5776: LD_EXP 18
5780: PPUSH
5781: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5785: LD_EXP 17
5789: PPUSH
5790: LD_STRING D5-Bobby-1
5792: PPUSH
5793: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5797: LD_EXP 16
5801: PPUSH
5802: LD_STRING D5-JMM-2
5804: PPUSH
5805: CALL_OW 88
// end ; InGameOff ;
5809: CALL_OW 9
// cyrus_in_squad := true ;
5813: LD_ADDR_EXP 7
5817: PUSH
5818: LD_INT 1
5820: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5821: LD_EXP 18
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5833: LD_EXP 5
5837: IFFALSE 5846
5839: PUSH
5840: LD_EXP 4
5844: NOT
5845: AND
5846: IFFALSE 5855
// ChangeMissionObjectives ( M2b ) ;
5848: LD_STRING M2b
5850: PPUSH
5851: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5855: LD_EXP 4
5859: NOT
5860: IFFALSE 5877
5862: PUSH
5863: LD_EXP 17
5867: PPUSH
5868: CALL_OW 255
5872: PUSH
5873: LD_INT 4
5875: EQUAL
5876: AND
5877: IFFALSE 5890
5879: PUSH
5880: LD_EXP 17
5884: PPUSH
5885: CALL_OW 302
5889: AND
5890: IFFALSE 5899
// SetAchievement ( ACH_CYRUS ) ;
5892: LD_STRING ACH_CYRUS
5894: PPUSH
5895: CALL_OW 543
// end ;
5899: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5900: LD_EXP 4
5904: IFFALSE 5912
5906: PUSH
5907: LD_EXP 7
5911: AND
5912: IFFALSE 5924
5914: GO 5916
5916: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5917: LD_STRING M2c
5919: PPUSH
5920: CALL_OW 337
5924: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5925: LD_EXP 16
5929: PPUSH
5930: LD_INT 8
5932: PPUSH
5933: CALL_OW 308
5937: IFFALSE 5989
5939: GO 5941
5941: DISABLE
// begin macmilan_in_trap := true ;
5942: LD_ADDR_EXP 9
5946: PUSH
5947: LD_INT 1
5949: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5950: LD_INT 35
5952: PPUSH
5953: CALL_OW 67
// DialogueOn ;
5957: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5961: LD_EXP 28
5965: PPUSH
5966: LD_STRING D5-Pok-1
5968: PPUSH
5969: CALL_OW 88
// DialogueOff ;
5973: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5977: LD_EXP 16
5981: PPUSH
5982: LD_STRING D4b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// end ;
5989: END
// every 0 0$1 trigger IsInArea ( JMM , ruBaseArea ) do
5990: LD_EXP 16
5994: PPUSH
5995: LD_INT 16
5997: PPUSH
5998: CALL_OW 308
6002: IFFALSE 6079
6004: GO 6006
6006: DISABLE
// begin macmilan_in_trap := true ;
6007: LD_ADDR_EXP 9
6011: PUSH
6012: LD_INT 1
6014: ST_TO_ADDR
// ComAttackUnit ( russian_troops_3 , JMM ) ;
6015: LD_EXP 23
6019: PPUSH
6020: LD_EXP 16
6024: PPUSH
6025: CALL_OW 115
// repeat wait ( 0 0$0.3 ) ;
6029: LD_INT 10
6031: PPUSH
6032: CALL_OW 67
// until GetLives ( JMM ) < 1000 and See ( 3 , JMM ) ;
6036: LD_EXP 16
6040: PPUSH
6041: CALL_OW 256
6045: PUSH
6046: LD_INT 1000
6048: LESS
6049: IFFALSE 6065
6051: PUSH
6052: LD_INT 3
6054: PPUSH
6055: LD_EXP 16
6059: PPUSH
6060: CALL_OW 292
6064: AND
6065: IFFALSE 6029
// Say ( JMM , D4b-JMM-1 ) ;
6067: LD_EXP 16
6071: PPUSH
6072: LD_STRING D4b-JMM-1
6074: PPUSH
6075: CALL_OW 88
// end ;
6079: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
6080: LD_EXP 16
6084: PPUSH
6085: LD_INT 13
6087: PPUSH
6088: CALL_OW 308
6092: IFFALSE 6120
6094: PUSH
6095: LD_EXP 16
6099: PPUSH
6100: LD_EXP 25
6104: PUSH
6105: LD_EXP 25
6109: ARRAY
6110: PPUSH
6111: CALL_OW 296
6115: PUSH
6116: LD_INT 12
6118: LESS
6119: AND
6120: IFTRUE 6150
6122: PUSH
6123: LD_EXP 25
6127: PPUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 24
6133: PUSH
6134: LD_INT 990
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PPUSH
6145: CALL_OW 72
6149: OR
6150: IFFALSE 6422
6152: GO 6154
6154: DISABLE
6155: LD_INT 0
6157: PPUSH
6158: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: LD_INT 300
6166: PUSH
6167: LD_INT 250
6169: PUSH
6170: LD_INT 200
6172: PUSH
6173: LD_INT 150
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_OWVAR 67
6186: ARRAY
6187: ST_TO_ADDR
// for i in russian_meta_guards do
6188: LD_ADDR_VAR 0 1
6192: PUSH
6193: LD_EXP 25
6197: PUSH
6198: FOR_IN
6199: IFFALSE 6239
// if IsOk ( i ) then
6201: LD_VAR 0 1
6205: PPUSH
6206: CALL_OW 302
6210: IFFALSE 6237
// SetLives ( i , GetLives ( i ) - hp ) ;
6212: LD_VAR 0 1
6216: PPUSH
6217: LD_VAR 0 1
6221: PPUSH
6222: CALL_OW 256
6226: PUSH
6227: LD_VAR 0 2
6231: MINUS
6232: PPUSH
6233: CALL_OW 234
6237: GO 6198
6239: POP
6240: POP
// DialogueOn ;
6241: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
6245: LD_EXP 25
6249: PUSH
6250: LD_EXP 25
6254: ARRAY
6255: PPUSH
6256: LD_STRING D6-FRus1-1
6258: PPUSH
6259: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 1 then
6263: LD_INT 22
6265: PUSH
6266: LD_INT 1
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 50
6275: PUSH
6276: EMPTY
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: PUSH
6288: LD_INT 1
6290: GREATER
6291: IFFALSE 6305
// Say ( JMM , D6-JMM-1 ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING D6-JMM-1
6300: PPUSH
6301: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
6305: LD_EXP 18
6309: PPUSH
6310: CALL_OW 302
6314: IFFALSE 6322
6316: PUSH
6317: LD_EXP 7
6321: AND
6322: IFFALSE 6336
// Say ( Cyrus , D6-Cyrus-1 ) ;
6324: LD_EXP 18
6328: PPUSH
6329: LD_STRING D6-Cyrus-1
6331: PPUSH
6332: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
6336: LD_EXP 17
6340: PPUSH
6341: CALL_OW 302
6345: IFFALSE 6353
6347: PUSH
6348: LD_EXP 4
6352: AND
6353: IFFALSE 6367
// Say ( Bobby , D6-Bobby-1 ) ;
6355: LD_EXP 17
6359: PPUSH
6360: LD_STRING D6-Bobby-1
6362: PPUSH
6363: CALL_OW 88
// DialogueOff ;
6367: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
6371: LD_INT 140
6373: PUSH
6374: LD_INT 105
6376: PUSH
6377: LD_INT 70
6379: PUSH
6380: LD_INT 70
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: PUSH
6389: LD_OWVAR 67
6393: ARRAY
6394: PPUSH
6395: CALL_OW 67
// meta_action := true ;
6399: LD_ADDR_EXP 10
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
6407: LD_EXP 25
6411: PPUSH
6412: LD_INT 94
6414: PPUSH
6415: LD_INT 8
6417: PPUSH
6418: CALL_OW 114
// end ;
6422: PPOPN 2
6424: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
6425: LD_EXP 16
6429: PPUSH
6430: LD_INT 14
6432: PPUSH
6433: CALL_OW 308
6437: IFFALSE 6449
6439: GO 6441
6441: DISABLE
// SetAchievement ( ACH_SECRET ) ;
6442: LD_STRING ACH_SECRET
6444: PPUSH
6445: CALL_OW 543
6449: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
6450: LD_EXP 16
6454: PPUSH
6455: LD_INT 93
6457: PPUSH
6458: LD_INT 1
6460: PPUSH
6461: CALL_OW 297
6465: PUSH
6466: LD_INT 5
6468: LESS
6469: IFFALSE 6491
6471: PUSH
6472: LD_INT 22
6474: PUSH
6475: LD_INT 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: PUSH
6487: LD_INT 1
6489: GREATER
6490: AND
6491: IFFALSE 6508
6493: GO 6495
6495: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
6496: LD_EXP 16
6500: PPUSH
6501: LD_STRING D6a-JMM-1
6503: PPUSH
6504: CALL_OW 88
6508: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6509: LD_EXP 17
6513: PPUSH
6514: LD_INT 10
6516: PPUSH
6517: CALL_OW 308
6521: IFTRUE 6537
6523: PUSH
6524: LD_EXP 17
6528: PPUSH
6529: LD_INT 12
6531: PPUSH
6532: CALL_OW 308
6536: OR
6537: IFFALSE 6593
6539: GO 6541
6541: DISABLE
// begin bobby_saved := true ;
6542: LD_ADDR_EXP 12
6546: PUSH
6547: LD_INT 1
6549: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6550: LD_EXP 17
6554: PPUSH
6555: CALL_OW 256
6559: PPUSH
6560: LD_STRING 01_BobbyLifePoints_1
6562: PPUSH
6563: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6567: LD_EXP 17
6571: PPUSH
6572: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6576: LD_STRING Bobby
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6586: LD_STRING enableBioCharacter(BIO_BOBBY)
6588: PPUSH
6589: CALL_OW 559
// end ;
6593: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6594: LD_EXP 18
6598: PPUSH
6599: LD_INT 10
6601: PPUSH
6602: CALL_OW 308
6606: IFTRUE 6622
6608: PUSH
6609: LD_EXP 18
6613: PPUSH
6614: LD_INT 12
6616: PPUSH
6617: CALL_OW 308
6621: OR
6622: IFFALSE 6678
6624: GO 6626
6626: DISABLE
// begin cyrus_saved := true ;
6627: LD_ADDR_EXP 13
6631: PUSH
6632: LD_INT 1
6634: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6635: LD_EXP 18
6639: PPUSH
6640: CALL_OW 256
6644: PPUSH
6645: LD_STRING 01_CyrusLifePoints_1
6647: PPUSH
6648: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6652: LD_EXP 18
6656: PPUSH
6657: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6661: LD_STRING Cyrus
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6671: LD_STRING enableBioCharacter(BIO_CYRUS)
6673: PPUSH
6674: CALL_OW 559
// end ;
6678: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6679: LD_EXP 16
6683: PPUSH
6684: LD_INT 10
6686: PPUSH
6687: CALL_OW 308
6691: IFTRUE 6707
6693: PUSH
6694: LD_EXP 16
6698: PPUSH
6699: LD_INT 12
6701: PPUSH
6702: CALL_OW 308
6706: OR
6707: IFFALSE 7382
6709: GO 6711
6711: DISABLE
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
6717: PPUSH
6718: PPUSH
6719: PPUSH
// begin if macmilan_use_radio then
6720: LD_EXP 6
6724: IFFALSE 6733
// SetAchievement ( ACH_RADIO ) ;
6726: LD_STRING ACH_RADIO
6728: PPUSH
6729: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6733: LD_EXP 13
6737: NOT
6738: IFFALSE 6746
6740: PUSH
6741: LD_EXP 7
6745: AND
6746: IFFALSE 6759
6748: PUSH
6749: LD_EXP 18
6753: PPUSH
6754: CALL_OW 302
6758: AND
6759: IFTRUE 6789
6761: PUSH
6762: LD_EXP 12
6766: NOT
6767: IFFALSE 6775
6769: PUSH
6770: LD_EXP 4
6774: AND
6775: IFFALSE 6788
6777: PUSH
6778: LD_EXP 17
6782: PPUSH
6783: CALL_OW 302
6787: AND
6788: OR
6789: IFFALSE 6830
// case Query ( Q2 ) of 1 :
6791: LD_STRING Q2
6793: PPUSH
6794: CALL_OW 97
6798: PUSH
6799: LD_INT 1
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6818
6807: POP
// wait_for_them := true ; 2 :
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_INT 1
6815: ST_TO_ADDR
6816: GO 6830
6818: LD_INT 2
6820: DOUBLE
6821: EQUAL
6822: IFTRUE 6826
6824: GO 6829
6826: POP
// ; end ;
6827: GO 6830
6829: POP
// if wait_for_them then
6830: LD_VAR 0 3
6834: IFFALSE 6969
// repeat wait ( 0 0$01 ) ;
6836: LD_INT 35
6838: PPUSH
6839: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6843: LD_EXP 13
6847: IFFALSE 6855
6849: PUSH
6850: LD_EXP 12
6854: AND
6855: IFTRUE 6898
6857: PUSH
6858: LD_EXP 13
6862: IFFALSE 6897
6864: PUSH
6865: LD_EXP 4
6869: NOT
6870: IFTRUE 6883
6872: PUSH
6873: LD_EXP 17
6877: PPUSH
6878: CALL_OW 303
6882: OR
6883: IFTRUE 6896
6885: PUSH
6886: LD_EXP 17
6890: PPUSH
6891: CALL_OW 301
6895: OR
6896: AND
6897: OR
6898: IFTRUE 6941
6900: PUSH
6901: LD_EXP 12
6905: IFFALSE 6940
6907: PUSH
6908: LD_EXP 7
6912: NOT
6913: IFTRUE 6926
6915: PUSH
6916: LD_EXP 18
6920: PPUSH
6921: CALL_OW 303
6925: OR
6926: IFTRUE 6939
6928: PUSH
6929: LD_EXP 18
6933: PPUSH
6934: CALL_OW 301
6938: OR
6939: AND
6940: OR
6941: IFTRUE 6967
6943: PUSH
6944: LD_EXP 17
6948: PPUSH
6949: CALL_OW 301
6953: IFFALSE 6966
6955: PUSH
6956: LD_EXP 18
6960: PPUSH
6961: CALL_OW 301
6965: AND
6966: OR
6967: IFFALSE 6836
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6969: LD_EXP 16
6973: PPUSH
6974: CALL_OW 256
6978: PPUSH
6979: LD_STRING 01_JMMLifePoints_1
6981: PPUSH
6982: CALL_OW 39
// RemoveUnit ( JMM ) ;
6986: LD_EXP 16
6990: PPUSH
6991: CALL_OW 64
// to_reward := [ JMM ] ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: LD_EXP 16
7004: PUSH
7005: EMPTY
7006: LIST
7007: ST_TO_ADDR
// if bobby_saved then
7008: LD_EXP 12
7012: IFFALSE 7030
// to_reward := to_reward ^ Bobby ;
7014: LD_ADDR_VAR 0 2
7018: PUSH
7019: LD_VAR 0 2
7023: PUSH
7024: LD_EXP 17
7028: ADD
7029: ST_TO_ADDR
// if cyrus_saved then
7030: LD_EXP 13
7034: IFFALSE 7052
// to_reward := to_reward ^ Cyrus ;
7036: LD_ADDR_VAR 0 2
7040: PUSH
7041: LD_VAR 0 2
7045: PUSH
7046: LD_EXP 18
7050: ADD
7051: ST_TO_ADDR
// m1 := true ;
7052: LD_ADDR_VAR 0 4
7056: PUSH
7057: LD_INT 1
7059: ST_TO_ADDR
// m2 := bobby_saved ;
7060: LD_ADDR_VAR 0 5
7064: PUSH
7065: LD_EXP 12
7069: ST_TO_ADDR
// m3 := cyrus_saved ;
7070: LD_ADDR_VAR 0 6
7074: PUSH
7075: LD_EXP 13
7079: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
7080: LD_STRING JMM
7082: PPUSH
7083: LD_INT 1
7085: PPUSH
7086: CALL_OW 101
// if not bobby_in_squad then
7090: LD_EXP 4
7094: NOT
7095: IFFALSE 7108
// AddMedal ( Bobby , - 1 ) ;
7097: LD_STRING Bobby
7099: PPUSH
7100: LD_INT 1
7102: NEG
7103: PPUSH
7104: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
7108: LD_EXP 12
7112: NOT
7113: IFFALSE 7139
7115: PUSH
7116: LD_EXP 17
7120: PPUSH
7121: CALL_OW 303
7125: IFTRUE 7138
7127: PUSH
7128: LD_EXP 17
7132: PPUSH
7133: CALL_OW 301
7137: OR
7138: AND
7139: IFFALSE 7152
// AddMedal ( Bobby , - 2 ) ;
7141: LD_STRING Bobby
7143: PPUSH
7144: LD_INT 2
7146: NEG
7147: PPUSH
7148: CALL_OW 101
// if not cyrus_in_squad then
7152: LD_EXP 7
7156: NOT
7157: IFFALSE 7170
// AddMedal ( Cyrus , - 1 ) ;
7159: LD_STRING Cyrus
7161: PPUSH
7162: LD_INT 1
7164: NEG
7165: PPUSH
7166: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
7170: LD_EXP 13
7174: NOT
7175: IFFALSE 7201
7177: PUSH
7178: LD_EXP 18
7182: PPUSH
7183: CALL_OW 303
7187: IFTRUE 7200
7189: PUSH
7190: LD_EXP 18
7194: PPUSH
7195: CALL_OW 301
7199: OR
7200: AND
7201: IFFALSE 7214
// AddMedal ( Cyrus , - 2 ) ;
7203: LD_STRING Cyrus
7205: PPUSH
7206: LD_INT 2
7208: NEG
7209: PPUSH
7210: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
7214: LD_OWVAR 67
7218: PUSH
7219: LD_INT 3
7221: GREATEREQUAL
7222: IFFALSE 7230
7224: PUSH
7225: LD_VAR 0 4
7229: AND
7230: IFFALSE 7238
7232: PUSH
7233: LD_VAR 0 5
7237: AND
7238: IFFALSE 7246
7240: PUSH
7241: LD_VAR 0 6
7245: AND
7246: IFFALSE 7258
// SetAchievementEX ( ACH_AMER , 1 ) ;
7248: LD_STRING ACH_AMER
7250: PPUSH
7251: LD_INT 1
7253: PPUSH
7254: CALL_OW 564
// GiveMedals ( MAIN ) ;
7258: LD_STRING MAIN
7260: PPUSH
7261: CALL_OW 102
// RewardPeople ( to_reward ) ;
7265: LD_VAR 0 2
7269: PPUSH
7270: CALL_OW 43
// if bobby_saved then
7274: LD_EXP 12
7278: IFFALSE 7298
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
7280: LD_EXP 17
7284: PPUSH
7285: LD_EXP 2
7289: PUSH
7290: LD_STRING Bobby
7292: STR
7293: PPUSH
7294: CALL_OW 38
// if cyrus_saved then
7298: LD_EXP 13
7302: IFFALSE 7322
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
7304: LD_EXP 18
7308: PPUSH
7309: LD_EXP 2
7313: PUSH
7314: LD_STRING Cyrus
7316: STR
7317: PPUSH
7318: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
7322: LD_EXP 16
7326: PPUSH
7327: LD_EXP 2
7331: PUSH
7332: LD_STRING JMM
7334: STR
7335: PPUSH
7336: CALL_OW 38
// if tick <= 3 3$00 then
7340: LD_OWVAR 1
7344: PUSH
7345: LD_INT 6300
7347: LESSEQUAL
7348: IFFALSE 7357
// SetAchievement ( ACH_ASPEED_1 ) ;
7350: LD_STRING ACH_ASPEED_1
7352: PPUSH
7353: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
7357: LD_STRING enableBioCharacter(BIO_JMM)
7359: PPUSH
7360: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
7364: LD_STRING enableBioCharacter(BIO_JOAN)
7366: PPUSH
7367: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
7371: LD_STRING enableBioCharacter(BIO_BARN)
7373: PPUSH
7374: CALL_OW 559
// YouWin ;
7378: CALL_OW 103
// end ; end_of_file
7382: PPOPN 6
7384: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
7385: LD_VAR 0 1
7389: PUSH
7390: LD_EXP 16
7394: EQUAL
7395: IFFALSE 7404
// YouLost ( JMM ) ;
7397: LD_STRING JMM
7399: PPUSH
7400: CALL_OW 104
// end ;
7404: PPOPN 1
7406: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7407: LD_VAR 0 1
7411: PPUSH
7412: LD_VAR 0 2
7416: PPUSH
7417: CALL 23719 0 2
// end ;
7421: PPOPN 2
7423: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
7424: LD_INT 0
7426: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
7427: LD_VAR 0 1
7431: PUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 1
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 23
7444: PUSH
7445: LD_INT 1
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 21
7454: PUSH
7455: LD_INT 1
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 69
7471: IN
7472: IFFALSE 7484
7474: PUSH
7475: LD_VAR 0 2
7479: PUSH
7480: LD_INT 1
7482: EQUAL
7483: AND
7484: IFFALSE 7541
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
7486: LD_ADDR_VAR 0 4
7490: PUSH
7491: LD_INT 22
7493: PUSH
7494: LD_INT 3
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 25
7503: PUSH
7504: LD_INT 1
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PPUSH
7515: CALL_OW 69
7519: PUSH
7520: FOR_IN
7521: IFFALSE 7539
// ComAttackUnit ( i , JMM ) ;
7523: LD_VAR 0 4
7527: PPUSH
7528: LD_EXP 16
7532: PPUSH
7533: CALL_OW 115
7537: GO 7520
7539: POP
7540: POP
// end ;
7541: PPOPN 4
7543: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL 23661 0 1
// if un = JMM then
7553: LD_VAR 0 1
7557: PUSH
7558: LD_EXP 16
7562: EQUAL
7563: IFFALSE 7572
// YouLost ( JMM ) ;
7565: LD_STRING JMM
7567: PPUSH
7568: CALL_OW 104
// end ; end_of_file end_of_file
7572: PPOPN 1
7574: END
// export globalGameSaveCounter ; every 0 0$1 do
7575: GO 7577
7577: DISABLE
// begin enable ;
7578: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7579: LD_STRING updateTimer(
7581: PUSH
7582: LD_OWVAR 1
7586: STR
7587: PUSH
7588: LD_STRING );
7590: STR
7591: PPUSH
7592: CALL_OW 559
// end ;
7596: END
// every 0 0$1 do
7597: GO 7599
7599: DISABLE
// begin globalGameSaveCounter := 0 ;
7600: LD_ADDR_EXP 29
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7608: LD_STRING setGameSaveCounter(0)
7610: PPUSH
7611: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7615: LD_STRING initStreamRollete();
7617: PPUSH
7618: CALL_OW 559
// InitStreamMode ;
7622: CALL 8974 0 0
// DefineStreamItems ( false ) ;
7626: LD_INT 0
7628: PPUSH
7629: CALL 9438 0 1
// end ;
7633: END
// export function SOS_MapStart ( ) ; begin
7634: LD_INT 0
7636: PPUSH
// if streamModeActive then
7637: LD_EXP 30
7641: IFFALSE 7650
// DefineStreamItems ( true ) ;
7643: LD_INT 1
7645: PPUSH
7646: CALL 9438 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
7650: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
7652: PPUSH
7653: CALL_OW 559
// UpdateLuaVariables ( ) ;
7657: CALL 7674 0 0
// UpdateFactoryWaypoints ( ) ;
7661: CALL 22560 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7665: CALL 22812 0 0
// end ;
7669: LD_VAR 0 1
7673: RET
// function UpdateLuaVariables ( ) ; begin
7674: LD_INT 0
7676: PPUSH
// if globalGameSaveCounter then
7677: LD_EXP 29
7681: IFFALSE 7715
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7683: LD_ADDR_EXP 29
7687: PUSH
7688: LD_EXP 29
7692: PPUSH
7693: CALL 69708 0 1
7697: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7698: LD_STRING setGameSaveCounter(
7700: PUSH
7701: LD_EXP 29
7705: STR
7706: PUSH
7707: LD_STRING )
7709: STR
7710: PPUSH
7711: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7715: LD_STRING setGameDifficulty(
7717: PUSH
7718: LD_OWVAR 67
7722: STR
7723: PUSH
7724: LD_STRING )
7726: STR
7727: PPUSH
7728: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7732: LD_STRING displayDifficulty(
7734: PUSH
7735: LD_OWVAR 67
7739: STR
7740: PUSH
7741: LD_STRING )
7743: STR
7744: PPUSH
7745: CALL_OW 559
// end ;
7749: LD_VAR 0 1
7753: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7754: LD_INT 0
7756: PPUSH
// if p2 = stream_mode then
7757: LD_VAR 0 2
7761: PUSH
7762: LD_INT 100
7764: EQUAL
7765: IFFALSE 8768
// begin if not StreamModeActive then
7767: LD_EXP 30
7771: NOT
7772: IFFALSE 7782
// StreamModeActive := true ;
7774: LD_ADDR_EXP 30
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// if p3 = 0 then
7782: LD_VAR 0 3
7786: PUSH
7787: LD_INT 0
7789: EQUAL
7790: IFFALSE 7796
// InitStreamMode ;
7792: CALL 8974 0 0
// if p3 = 1 then
7796: LD_VAR 0 3
7800: PUSH
7801: LD_INT 1
7803: EQUAL
7804: IFFALSE 7814
// sRocket := true ;
7806: LD_ADDR_EXP 35
7810: PUSH
7811: LD_INT 1
7813: ST_TO_ADDR
// if p3 = 2 then
7814: LD_VAR 0 3
7818: PUSH
7819: LD_INT 2
7821: EQUAL
7822: IFFALSE 7832
// sSpeed := true ;
7824: LD_ADDR_EXP 34
7828: PUSH
7829: LD_INT 1
7831: ST_TO_ADDR
// if p3 = 3 then
7832: LD_VAR 0 3
7836: PUSH
7837: LD_INT 3
7839: EQUAL
7840: IFFALSE 7850
// sEngine := true ;
7842: LD_ADDR_EXP 36
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// if p3 = 4 then
7850: LD_VAR 0 3
7854: PUSH
7855: LD_INT 4
7857: EQUAL
7858: IFFALSE 7868
// sSpec := true ;
7860: LD_ADDR_EXP 33
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// if p3 = 5 then
7868: LD_VAR 0 3
7872: PUSH
7873: LD_INT 5
7875: EQUAL
7876: IFFALSE 7886
// sLevel := true ;
7878: LD_ADDR_EXP 37
7882: PUSH
7883: LD_INT 1
7885: ST_TO_ADDR
// if p3 = 6 then
7886: LD_VAR 0 3
7890: PUSH
7891: LD_INT 6
7893: EQUAL
7894: IFFALSE 7904
// sArmoury := true ;
7896: LD_ADDR_EXP 38
7900: PUSH
7901: LD_INT 1
7903: ST_TO_ADDR
// if p3 = 7 then
7904: LD_VAR 0 3
7908: PUSH
7909: LD_INT 7
7911: EQUAL
7912: IFFALSE 7922
// sRadar := true ;
7914: LD_ADDR_EXP 39
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// if p3 = 8 then
7922: LD_VAR 0 3
7926: PUSH
7927: LD_INT 8
7929: EQUAL
7930: IFFALSE 7940
// sBunker := true ;
7932: LD_ADDR_EXP 40
7936: PUSH
7937: LD_INT 1
7939: ST_TO_ADDR
// if p3 = 9 then
7940: LD_VAR 0 3
7944: PUSH
7945: LD_INT 9
7947: EQUAL
7948: IFFALSE 7958
// sHack := true ;
7950: LD_ADDR_EXP 41
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// if p3 = 10 then
7958: LD_VAR 0 3
7962: PUSH
7963: LD_INT 10
7965: EQUAL
7966: IFFALSE 7976
// sFire := true ;
7968: LD_ADDR_EXP 42
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// if p3 = 11 then
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 11
7983: EQUAL
7984: IFFALSE 7994
// sRefresh := true ;
7986: LD_ADDR_EXP 43
7990: PUSH
7991: LD_INT 1
7993: ST_TO_ADDR
// if p3 = 12 then
7994: LD_VAR 0 3
7998: PUSH
7999: LD_INT 12
8001: EQUAL
8002: IFFALSE 8012
// sExp := true ;
8004: LD_ADDR_EXP 44
8008: PUSH
8009: LD_INT 1
8011: ST_TO_ADDR
// if p3 = 13 then
8012: LD_VAR 0 3
8016: PUSH
8017: LD_INT 13
8019: EQUAL
8020: IFFALSE 8030
// sDepot := true ;
8022: LD_ADDR_EXP 45
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// if p3 = 14 then
8030: LD_VAR 0 3
8034: PUSH
8035: LD_INT 14
8037: EQUAL
8038: IFFALSE 8048
// sFlag := true ;
8040: LD_ADDR_EXP 46
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// if p3 = 15 then
8048: LD_VAR 0 3
8052: PUSH
8053: LD_INT 15
8055: EQUAL
8056: IFFALSE 8066
// sKamikadze := true ;
8058: LD_ADDR_EXP 54
8062: PUSH
8063: LD_INT 1
8065: ST_TO_ADDR
// if p3 = 16 then
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 16
8073: EQUAL
8074: IFFALSE 8084
// sTroll := true ;
8076: LD_ADDR_EXP 55
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// if p3 = 17 then
8084: LD_VAR 0 3
8088: PUSH
8089: LD_INT 17
8091: EQUAL
8092: IFFALSE 8102
// sSlow := true ;
8094: LD_ADDR_EXP 56
8098: PUSH
8099: LD_INT 1
8101: ST_TO_ADDR
// if p3 = 18 then
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 18
8109: EQUAL
8110: IFFALSE 8120
// sLack := true ;
8112: LD_ADDR_EXP 57
8116: PUSH
8117: LD_INT 1
8119: ST_TO_ADDR
// if p3 = 19 then
8120: LD_VAR 0 3
8124: PUSH
8125: LD_INT 19
8127: EQUAL
8128: IFFALSE 8138
// sTank := true ;
8130: LD_ADDR_EXP 59
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// if p3 = 20 then
8138: LD_VAR 0 3
8142: PUSH
8143: LD_INT 20
8145: EQUAL
8146: IFFALSE 8156
// sRemote := true ;
8148: LD_ADDR_EXP 60
8152: PUSH
8153: LD_INT 1
8155: ST_TO_ADDR
// if p3 = 21 then
8156: LD_VAR 0 3
8160: PUSH
8161: LD_INT 21
8163: EQUAL
8164: IFFALSE 8174
// sPowell := true ;
8166: LD_ADDR_EXP 61
8170: PUSH
8171: LD_INT 1
8173: ST_TO_ADDR
// if p3 = 22 then
8174: LD_VAR 0 3
8178: PUSH
8179: LD_INT 22
8181: EQUAL
8182: IFFALSE 8192
// sTeleport := true ;
8184: LD_ADDR_EXP 64
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// if p3 = 23 then
8192: LD_VAR 0 3
8196: PUSH
8197: LD_INT 23
8199: EQUAL
8200: IFFALSE 8210
// sOilTower := true ;
8202: LD_ADDR_EXP 66
8206: PUSH
8207: LD_INT 1
8209: ST_TO_ADDR
// if p3 = 24 then
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 24
8217: EQUAL
8218: IFFALSE 8228
// sShovel := true ;
8220: LD_ADDR_EXP 67
8224: PUSH
8225: LD_INT 1
8227: ST_TO_ADDR
// if p3 = 25 then
8228: LD_VAR 0 3
8232: PUSH
8233: LD_INT 25
8235: EQUAL
8236: IFFALSE 8246
// sSheik := true ;
8238: LD_ADDR_EXP 68
8242: PUSH
8243: LD_INT 1
8245: ST_TO_ADDR
// if p3 = 26 then
8246: LD_VAR 0 3
8250: PUSH
8251: LD_INT 26
8253: EQUAL
8254: IFFALSE 8264
// sEarthquake := true ;
8256: LD_ADDR_EXP 70
8260: PUSH
8261: LD_INT 1
8263: ST_TO_ADDR
// if p3 = 27 then
8264: LD_VAR 0 3
8268: PUSH
8269: LD_INT 27
8271: EQUAL
8272: IFFALSE 8282
// sAI := true ;
8274: LD_ADDR_EXP 71
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// if p3 = 28 then
8282: LD_VAR 0 3
8286: PUSH
8287: LD_INT 28
8289: EQUAL
8290: IFFALSE 8300
// sCargo := true ;
8292: LD_ADDR_EXP 74
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// if p3 = 29 then
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 29
8307: EQUAL
8308: IFFALSE 8318
// sDLaser := true ;
8310: LD_ADDR_EXP 75
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// if p3 = 30 then
8318: LD_VAR 0 3
8322: PUSH
8323: LD_INT 30
8325: EQUAL
8326: IFFALSE 8336
// sExchange := true ;
8328: LD_ADDR_EXP 76
8332: PUSH
8333: LD_INT 1
8335: ST_TO_ADDR
// if p3 = 31 then
8336: LD_VAR 0 3
8340: PUSH
8341: LD_INT 31
8343: EQUAL
8344: IFFALSE 8354
// sFac := true ;
8346: LD_ADDR_EXP 77
8350: PUSH
8351: LD_INT 1
8353: ST_TO_ADDR
// if p3 = 32 then
8354: LD_VAR 0 3
8358: PUSH
8359: LD_INT 32
8361: EQUAL
8362: IFFALSE 8372
// sPower := true ;
8364: LD_ADDR_EXP 78
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// if p3 = 33 then
8372: LD_VAR 0 3
8376: PUSH
8377: LD_INT 33
8379: EQUAL
8380: IFFALSE 8390
// sRandom := true ;
8382: LD_ADDR_EXP 79
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// if p3 = 34 then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 34
8397: EQUAL
8398: IFFALSE 8408
// sShield := true ;
8400: LD_ADDR_EXP 80
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// if p3 = 35 then
8408: LD_VAR 0 3
8412: PUSH
8413: LD_INT 35
8415: EQUAL
8416: IFFALSE 8426
// sTime := true ;
8418: LD_ADDR_EXP 81
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// if p3 = 36 then
8426: LD_VAR 0 3
8430: PUSH
8431: LD_INT 36
8433: EQUAL
8434: IFFALSE 8444
// sTools := true ;
8436: LD_ADDR_EXP 82
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// if p3 = 101 then
8444: LD_VAR 0 3
8448: PUSH
8449: LD_INT 101
8451: EQUAL
8452: IFFALSE 8462
// sSold := true ;
8454: LD_ADDR_EXP 47
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// if p3 = 102 then
8462: LD_VAR 0 3
8466: PUSH
8467: LD_INT 102
8469: EQUAL
8470: IFFALSE 8480
// sDiff := true ;
8472: LD_ADDR_EXP 48
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// if p3 = 103 then
8480: LD_VAR 0 3
8484: PUSH
8485: LD_INT 103
8487: EQUAL
8488: IFFALSE 8498
// sFog := true ;
8490: LD_ADDR_EXP 51
8494: PUSH
8495: LD_INT 1
8497: ST_TO_ADDR
// if p3 = 104 then
8498: LD_VAR 0 3
8502: PUSH
8503: LD_INT 104
8505: EQUAL
8506: IFFALSE 8516
// sReset := true ;
8508: LD_ADDR_EXP 52
8512: PUSH
8513: LD_INT 1
8515: ST_TO_ADDR
// if p3 = 105 then
8516: LD_VAR 0 3
8520: PUSH
8521: LD_INT 105
8523: EQUAL
8524: IFFALSE 8534
// sSun := true ;
8526: LD_ADDR_EXP 53
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// if p3 = 106 then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_INT 106
8541: EQUAL
8542: IFFALSE 8552
// sTiger := true ;
8544: LD_ADDR_EXP 49
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// if p3 = 107 then
8552: LD_VAR 0 3
8556: PUSH
8557: LD_INT 107
8559: EQUAL
8560: IFFALSE 8570
// sBomb := true ;
8562: LD_ADDR_EXP 50
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// if p3 = 108 then
8570: LD_VAR 0 3
8574: PUSH
8575: LD_INT 108
8577: EQUAL
8578: IFFALSE 8588
// sWound := true ;
8580: LD_ADDR_EXP 58
8584: PUSH
8585: LD_INT 1
8587: ST_TO_ADDR
// if p3 = 109 then
8588: LD_VAR 0 3
8592: PUSH
8593: LD_INT 109
8595: EQUAL
8596: IFFALSE 8606
// sBetray := true ;
8598: LD_ADDR_EXP 62
8602: PUSH
8603: LD_INT 1
8605: ST_TO_ADDR
// if p3 = 110 then
8606: LD_VAR 0 3
8610: PUSH
8611: LD_INT 110
8613: EQUAL
8614: IFFALSE 8624
// sContamin := true ;
8616: LD_ADDR_EXP 63
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// if p3 = 111 then
8624: LD_VAR 0 3
8628: PUSH
8629: LD_INT 111
8631: EQUAL
8632: IFFALSE 8642
// sOil := true ;
8634: LD_ADDR_EXP 65
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// if p3 = 112 then
8642: LD_VAR 0 3
8646: PUSH
8647: LD_INT 112
8649: EQUAL
8650: IFFALSE 8660
// sStu := true ;
8652: LD_ADDR_EXP 69
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// if p3 = 113 then
8660: LD_VAR 0 3
8664: PUSH
8665: LD_INT 113
8667: EQUAL
8668: IFFALSE 8678
// sBazooka := true ;
8670: LD_ADDR_EXP 72
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if p3 = 114 then
8678: LD_VAR 0 3
8682: PUSH
8683: LD_INT 114
8685: EQUAL
8686: IFFALSE 8696
// sMortar := true ;
8688: LD_ADDR_EXP 73
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// if p3 = 115 then
8696: LD_VAR 0 3
8700: PUSH
8701: LD_INT 115
8703: EQUAL
8704: IFFALSE 8714
// sRanger := true ;
8706: LD_ADDR_EXP 83
8710: PUSH
8711: LD_INT 1
8713: ST_TO_ADDR
// if p3 = 116 then
8714: LD_VAR 0 3
8718: PUSH
8719: LD_INT 116
8721: EQUAL
8722: IFFALSE 8732
// sComputer := true ;
8724: LD_ADDR_EXP 84
8728: PUSH
8729: LD_INT 1
8731: ST_TO_ADDR
// if p3 = 117 then
8732: LD_VAR 0 3
8736: PUSH
8737: LD_INT 117
8739: EQUAL
8740: IFFALSE 8750
// s30 := true ;
8742: LD_ADDR_EXP 85
8746: PUSH
8747: LD_INT 1
8749: ST_TO_ADDR
// if p3 = 118 then
8750: LD_VAR 0 3
8754: PUSH
8755: LD_INT 118
8757: EQUAL
8758: IFFALSE 8768
// s60 := true ;
8760: LD_ADDR_EXP 86
8764: PUSH
8765: LD_INT 1
8767: ST_TO_ADDR
// end ; if p2 = hack_mode then
8768: LD_VAR 0 2
8772: PUSH
8773: LD_INT 101
8775: EQUAL
8776: IFFALSE 8904
// begin case p3 of 1 :
8778: LD_VAR 0 3
8782: PUSH
8783: LD_INT 1
8785: DOUBLE
8786: EQUAL
8787: IFTRUE 8791
8789: GO 8798
8791: POP
// hHackUnlimitedResources ; 2 :
8792: CALL 21167 0 0
8796: GO 8904
8798: LD_INT 2
8800: DOUBLE
8801: EQUAL
8802: IFTRUE 8806
8804: GO 8813
8806: POP
// hHackSetLevel10 ; 3 :
8807: CALL 21300 0 0
8811: GO 8904
8813: LD_INT 3
8815: DOUBLE
8816: EQUAL
8817: IFTRUE 8821
8819: GO 8828
8821: POP
// hHackSetLevel10YourUnits ; 4 :
8822: CALL 21385 0 0
8826: GO 8904
8828: LD_INT 4
8830: DOUBLE
8831: EQUAL
8832: IFTRUE 8836
8834: GO 8843
8836: POP
// hHackInvincible ; 5 :
8837: CALL 21833 0 0
8841: GO 8904
8843: LD_INT 5
8845: DOUBLE
8846: EQUAL
8847: IFTRUE 8851
8849: GO 8858
8851: POP
// hHackInvisible ; 6 :
8852: CALL 21944 0 0
8856: GO 8904
8858: LD_INT 6
8860: DOUBLE
8861: EQUAL
8862: IFTRUE 8866
8864: GO 8873
8866: POP
// hHackChangeYourSide ; 7 :
8867: CALL 22001 0 0
8871: GO 8904
8873: LD_INT 7
8875: DOUBLE
8876: EQUAL
8877: IFTRUE 8881
8879: GO 8888
8881: POP
// hHackChangeUnitSide ; 8 :
8882: CALL 22043 0 0
8886: GO 8904
8888: LD_INT 8
8890: DOUBLE
8891: EQUAL
8892: IFTRUE 8896
8894: GO 8903
8896: POP
// hHackFog ; end ;
8897: CALL 22144 0 0
8901: GO 8904
8903: POP
// end ; if p2 = game_save_mode then
8904: LD_VAR 0 2
8908: PUSH
8909: LD_INT 102
8911: EQUAL
8912: IFFALSE 8969
// begin if p3 = 1 then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_INT 1
8921: EQUAL
8922: IFFALSE 8934
// globalGameSaveCounter := p4 ;
8924: LD_ADDR_EXP 29
8928: PUSH
8929: LD_VAR 0 4
8933: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8934: LD_VAR 0 3
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: IFFALSE 8950
8944: PUSH
8945: LD_EXP 29
8949: AND
8950: IFFALSE 8969
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8952: LD_STRING setGameSaveCounter(
8954: PUSH
8955: LD_EXP 29
8959: STR
8960: PUSH
8961: LD_STRING )
8963: STR
8964: PPUSH
8965: CALL_OW 559
// end ; end ;
8969: LD_VAR 0 7
8973: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8974: LD_INT 0
8976: PPUSH
// streamModeActive := false ;
8977: LD_ADDR_EXP 30
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// normalCounter := 36 ;
8985: LD_ADDR_EXP 31
8989: PUSH
8990: LD_INT 36
8992: ST_TO_ADDR
// hardcoreCounter := 18 ;
8993: LD_ADDR_EXP 32
8997: PUSH
8998: LD_INT 18
9000: ST_TO_ADDR
// sRocket := false ;
9001: LD_ADDR_EXP 35
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// sSpeed := false ;
9009: LD_ADDR_EXP 34
9013: PUSH
9014: LD_INT 0
9016: ST_TO_ADDR
// sEngine := false ;
9017: LD_ADDR_EXP 36
9021: PUSH
9022: LD_INT 0
9024: ST_TO_ADDR
// sSpec := false ;
9025: LD_ADDR_EXP 33
9029: PUSH
9030: LD_INT 0
9032: ST_TO_ADDR
// sLevel := false ;
9033: LD_ADDR_EXP 37
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// sArmoury := false ;
9041: LD_ADDR_EXP 38
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// sRadar := false ;
9049: LD_ADDR_EXP 39
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// sBunker := false ;
9057: LD_ADDR_EXP 40
9061: PUSH
9062: LD_INT 0
9064: ST_TO_ADDR
// sHack := false ;
9065: LD_ADDR_EXP 41
9069: PUSH
9070: LD_INT 0
9072: ST_TO_ADDR
// sFire := false ;
9073: LD_ADDR_EXP 42
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// sRefresh := false ;
9081: LD_ADDR_EXP 43
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// sExp := false ;
9089: LD_ADDR_EXP 44
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// sDepot := false ;
9097: LD_ADDR_EXP 45
9101: PUSH
9102: LD_INT 0
9104: ST_TO_ADDR
// sFlag := false ;
9105: LD_ADDR_EXP 46
9109: PUSH
9110: LD_INT 0
9112: ST_TO_ADDR
// sKamikadze := false ;
9113: LD_ADDR_EXP 54
9117: PUSH
9118: LD_INT 0
9120: ST_TO_ADDR
// sTroll := false ;
9121: LD_ADDR_EXP 55
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// sSlow := false ;
9129: LD_ADDR_EXP 56
9133: PUSH
9134: LD_INT 0
9136: ST_TO_ADDR
// sLack := false ;
9137: LD_ADDR_EXP 57
9141: PUSH
9142: LD_INT 0
9144: ST_TO_ADDR
// sTank := false ;
9145: LD_ADDR_EXP 59
9149: PUSH
9150: LD_INT 0
9152: ST_TO_ADDR
// sRemote := false ;
9153: LD_ADDR_EXP 60
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// sPowell := false ;
9161: LD_ADDR_EXP 61
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// sTeleport := false ;
9169: LD_ADDR_EXP 64
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// sOilTower := false ;
9177: LD_ADDR_EXP 66
9181: PUSH
9182: LD_INT 0
9184: ST_TO_ADDR
// sShovel := false ;
9185: LD_ADDR_EXP 67
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// sSheik := false ;
9193: LD_ADDR_EXP 68
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// sEarthquake := false ;
9201: LD_ADDR_EXP 70
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// sAI := false ;
9209: LD_ADDR_EXP 71
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// sCargo := false ;
9217: LD_ADDR_EXP 74
9221: PUSH
9222: LD_INT 0
9224: ST_TO_ADDR
// sDLaser := false ;
9225: LD_ADDR_EXP 75
9229: PUSH
9230: LD_INT 0
9232: ST_TO_ADDR
// sExchange := false ;
9233: LD_ADDR_EXP 76
9237: PUSH
9238: LD_INT 0
9240: ST_TO_ADDR
// sFac := false ;
9241: LD_ADDR_EXP 77
9245: PUSH
9246: LD_INT 0
9248: ST_TO_ADDR
// sPower := false ;
9249: LD_ADDR_EXP 78
9253: PUSH
9254: LD_INT 0
9256: ST_TO_ADDR
// sRandom := false ;
9257: LD_ADDR_EXP 79
9261: PUSH
9262: LD_INT 0
9264: ST_TO_ADDR
// sShield := false ;
9265: LD_ADDR_EXP 80
9269: PUSH
9270: LD_INT 0
9272: ST_TO_ADDR
// sTime := false ;
9273: LD_ADDR_EXP 81
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// sTools := false ;
9281: LD_ADDR_EXP 82
9285: PUSH
9286: LD_INT 0
9288: ST_TO_ADDR
// sSold := false ;
9289: LD_ADDR_EXP 47
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// sDiff := false ;
9297: LD_ADDR_EXP 48
9301: PUSH
9302: LD_INT 0
9304: ST_TO_ADDR
// sFog := false ;
9305: LD_ADDR_EXP 51
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// sReset := false ;
9313: LD_ADDR_EXP 52
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// sSun := false ;
9321: LD_ADDR_EXP 53
9325: PUSH
9326: LD_INT 0
9328: ST_TO_ADDR
// sTiger := false ;
9329: LD_ADDR_EXP 49
9333: PUSH
9334: LD_INT 0
9336: ST_TO_ADDR
// sBomb := false ;
9337: LD_ADDR_EXP 50
9341: PUSH
9342: LD_INT 0
9344: ST_TO_ADDR
// sWound := false ;
9345: LD_ADDR_EXP 58
9349: PUSH
9350: LD_INT 0
9352: ST_TO_ADDR
// sBetray := false ;
9353: LD_ADDR_EXP 62
9357: PUSH
9358: LD_INT 0
9360: ST_TO_ADDR
// sContamin := false ;
9361: LD_ADDR_EXP 63
9365: PUSH
9366: LD_INT 0
9368: ST_TO_ADDR
// sOil := false ;
9369: LD_ADDR_EXP 65
9373: PUSH
9374: LD_INT 0
9376: ST_TO_ADDR
// sStu := false ;
9377: LD_ADDR_EXP 69
9381: PUSH
9382: LD_INT 0
9384: ST_TO_ADDR
// sBazooka := false ;
9385: LD_ADDR_EXP 72
9389: PUSH
9390: LD_INT 0
9392: ST_TO_ADDR
// sMortar := false ;
9393: LD_ADDR_EXP 73
9397: PUSH
9398: LD_INT 0
9400: ST_TO_ADDR
// sRanger := false ;
9401: LD_ADDR_EXP 83
9405: PUSH
9406: LD_INT 0
9408: ST_TO_ADDR
// sComputer := false ;
9409: LD_ADDR_EXP 84
9413: PUSH
9414: LD_INT 0
9416: ST_TO_ADDR
// s30 := false ;
9417: LD_ADDR_EXP 85
9421: PUSH
9422: LD_INT 0
9424: ST_TO_ADDR
// s60 := false ;
9425: LD_ADDR_EXP 86
9429: PUSH
9430: LD_INT 0
9432: ST_TO_ADDR
// end ;
9433: LD_VAR 0 1
9437: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9438: LD_INT 0
9440: PPUSH
9441: PPUSH
9442: PPUSH
9443: PPUSH
9444: PPUSH
9445: PPUSH
9446: PPUSH
// result := [ ] ;
9447: LD_ADDR_VAR 0 2
9451: PUSH
9452: EMPTY
9453: ST_TO_ADDR
// if campaign_id = 1 then
9454: LD_OWVAR 69
9458: PUSH
9459: LD_INT 1
9461: EQUAL
9462: IFFALSE 12628
// begin case mission_number of 1 :
9464: LD_OWVAR 70
9468: PUSH
9469: LD_INT 1
9471: DOUBLE
9472: EQUAL
9473: IFTRUE 9477
9475: GO 9553
9477: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9478: LD_ADDR_VAR 0 2
9482: PUSH
9483: LD_INT 2
9485: PUSH
9486: LD_INT 4
9488: PUSH
9489: LD_INT 11
9491: PUSH
9492: LD_INT 12
9494: PUSH
9495: LD_INT 15
9497: PUSH
9498: LD_INT 16
9500: PUSH
9501: LD_INT 22
9503: PUSH
9504: LD_INT 23
9506: PUSH
9507: LD_INT 26
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 101
9523: PUSH
9524: LD_INT 102
9526: PUSH
9527: LD_INT 106
9529: PUSH
9530: LD_INT 116
9532: PUSH
9533: LD_INT 117
9535: PUSH
9536: LD_INT 118
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: ST_TO_ADDR
9551: GO 12626
9553: LD_INT 2
9555: DOUBLE
9556: EQUAL
9557: IFTRUE 9561
9559: GO 9645
9561: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_INT 2
9569: PUSH
9570: LD_INT 4
9572: PUSH
9573: LD_INT 11
9575: PUSH
9576: LD_INT 12
9578: PUSH
9579: LD_INT 15
9581: PUSH
9582: LD_INT 16
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_INT 23
9590: PUSH
9591: LD_INT 26
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 101
9607: PUSH
9608: LD_INT 102
9610: PUSH
9611: LD_INT 105
9613: PUSH
9614: LD_INT 106
9616: PUSH
9617: LD_INT 108
9619: PUSH
9620: LD_INT 116
9622: PUSH
9623: LD_INT 117
9625: PUSH
9626: LD_INT 118
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: ST_TO_ADDR
9643: GO 12626
9645: LD_INT 3
9647: DOUBLE
9648: EQUAL
9649: IFTRUE 9653
9651: GO 9741
9653: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: LD_INT 4
9664: PUSH
9665: LD_INT 5
9667: PUSH
9668: LD_INT 11
9670: PUSH
9671: LD_INT 12
9673: PUSH
9674: LD_INT 15
9676: PUSH
9677: LD_INT 16
9679: PUSH
9680: LD_INT 22
9682: PUSH
9683: LD_INT 26
9685: PUSH
9686: LD_INT 36
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 101
9703: PUSH
9704: LD_INT 102
9706: PUSH
9707: LD_INT 105
9709: PUSH
9710: LD_INT 106
9712: PUSH
9713: LD_INT 108
9715: PUSH
9716: LD_INT 116
9718: PUSH
9719: LD_INT 117
9721: PUSH
9722: LD_INT 118
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: ST_TO_ADDR
9739: GO 12626
9741: LD_INT 4
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9845
9749: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9750: LD_ADDR_VAR 0 2
9754: PUSH
9755: LD_INT 2
9757: PUSH
9758: LD_INT 4
9760: PUSH
9761: LD_INT 5
9763: PUSH
9764: LD_INT 8
9766: PUSH
9767: LD_INT 11
9769: PUSH
9770: LD_INT 12
9772: PUSH
9773: LD_INT 15
9775: PUSH
9776: LD_INT 16
9778: PUSH
9779: LD_INT 22
9781: PUSH
9782: LD_INT 23
9784: PUSH
9785: LD_INT 26
9787: PUSH
9788: LD_INT 36
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 101
9807: PUSH
9808: LD_INT 102
9810: PUSH
9811: LD_INT 105
9813: PUSH
9814: LD_INT 106
9816: PUSH
9817: LD_INT 108
9819: PUSH
9820: LD_INT 116
9822: PUSH
9823: LD_INT 117
9825: PUSH
9826: LD_INT 118
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: ST_TO_ADDR
9843: GO 12626
9845: LD_INT 5
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 9965
9853: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 4
9864: PUSH
9865: LD_INT 5
9867: PUSH
9868: LD_INT 6
9870: PUSH
9871: LD_INT 8
9873: PUSH
9874: LD_INT 11
9876: PUSH
9877: LD_INT 12
9879: PUSH
9880: LD_INT 15
9882: PUSH
9883: LD_INT 16
9885: PUSH
9886: LD_INT 22
9888: PUSH
9889: LD_INT 23
9891: PUSH
9892: LD_INT 25
9894: PUSH
9895: LD_INT 26
9897: PUSH
9898: LD_INT 36
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 101
9919: PUSH
9920: LD_INT 102
9922: PUSH
9923: LD_INT 105
9925: PUSH
9926: LD_INT 106
9928: PUSH
9929: LD_INT 108
9931: PUSH
9932: LD_INT 109
9934: PUSH
9935: LD_INT 112
9937: PUSH
9938: LD_INT 116
9940: PUSH
9941: LD_INT 117
9943: PUSH
9944: LD_INT 118
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: ST_TO_ADDR
9963: GO 12626
9965: LD_INT 6
9967: DOUBLE
9968: EQUAL
9969: IFTRUE 9973
9971: GO 10105
9973: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9974: LD_ADDR_VAR 0 2
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 4
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: LD_INT 6
9990: PUSH
9991: LD_INT 8
9993: PUSH
9994: LD_INT 11
9996: PUSH
9997: LD_INT 12
9999: PUSH
10000: LD_INT 15
10002: PUSH
10003: LD_INT 16
10005: PUSH
10006: LD_INT 20
10008: PUSH
10009: LD_INT 21
10011: PUSH
10012: LD_INT 22
10014: PUSH
10015: LD_INT 23
10017: PUSH
10018: LD_INT 25
10020: PUSH
10021: LD_INT 26
10023: PUSH
10024: LD_INT 30
10026: PUSH
10027: LD_INT 31
10029: PUSH
10030: LD_INT 32
10032: PUSH
10033: LD_INT 36
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: PUSH
10057: LD_INT 101
10059: PUSH
10060: LD_INT 102
10062: PUSH
10063: LD_INT 105
10065: PUSH
10066: LD_INT 106
10068: PUSH
10069: LD_INT 108
10071: PUSH
10072: LD_INT 109
10074: PUSH
10075: LD_INT 112
10077: PUSH
10078: LD_INT 116
10080: PUSH
10081: LD_INT 117
10083: PUSH
10084: LD_INT 118
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: ST_TO_ADDR
10103: GO 12626
10105: LD_INT 7
10107: DOUBLE
10108: EQUAL
10109: IFTRUE 10113
10111: GO 10225
10113: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10114: LD_ADDR_VAR 0 2
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: LD_INT 4
10124: PUSH
10125: LD_INT 5
10127: PUSH
10128: LD_INT 7
10130: PUSH
10131: LD_INT 11
10133: PUSH
10134: LD_INT 12
10136: PUSH
10137: LD_INT 15
10139: PUSH
10140: LD_INT 16
10142: PUSH
10143: LD_INT 20
10145: PUSH
10146: LD_INT 21
10148: PUSH
10149: LD_INT 22
10151: PUSH
10152: LD_INT 23
10154: PUSH
10155: LD_INT 25
10157: PUSH
10158: LD_INT 26
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 101
10179: PUSH
10180: LD_INT 102
10182: PUSH
10183: LD_INT 103
10185: PUSH
10186: LD_INT 105
10188: PUSH
10189: LD_INT 106
10191: PUSH
10192: LD_INT 108
10194: PUSH
10195: LD_INT 112
10197: PUSH
10198: LD_INT 116
10200: PUSH
10201: LD_INT 117
10203: PUSH
10204: LD_INT 118
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: ST_TO_ADDR
10223: GO 12626
10225: LD_INT 8
10227: DOUBLE
10228: EQUAL
10229: IFTRUE 10233
10231: GO 10373
10233: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10234: LD_ADDR_VAR 0 2
10238: PUSH
10239: LD_INT 2
10241: PUSH
10242: LD_INT 4
10244: PUSH
10245: LD_INT 5
10247: PUSH
10248: LD_INT 6
10250: PUSH
10251: LD_INT 7
10253: PUSH
10254: LD_INT 8
10256: PUSH
10257: LD_INT 11
10259: PUSH
10260: LD_INT 12
10262: PUSH
10263: LD_INT 15
10265: PUSH
10266: LD_INT 16
10268: PUSH
10269: LD_INT 20
10271: PUSH
10272: LD_INT 21
10274: PUSH
10275: LD_INT 22
10277: PUSH
10278: LD_INT 23
10280: PUSH
10281: LD_INT 25
10283: PUSH
10284: LD_INT 26
10286: PUSH
10287: LD_INT 30
10289: PUSH
10290: LD_INT 31
10292: PUSH
10293: LD_INT 32
10295: PUSH
10296: LD_INT 36
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 101
10323: PUSH
10324: LD_INT 102
10326: PUSH
10327: LD_INT 103
10329: PUSH
10330: LD_INT 105
10332: PUSH
10333: LD_INT 106
10335: PUSH
10336: LD_INT 108
10338: PUSH
10339: LD_INT 109
10341: PUSH
10342: LD_INT 112
10344: PUSH
10345: LD_INT 116
10347: PUSH
10348: LD_INT 117
10350: PUSH
10351: LD_INT 118
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: ST_TO_ADDR
10371: GO 12626
10373: LD_INT 9
10375: DOUBLE
10376: EQUAL
10377: IFTRUE 10381
10379: GO 10529
10381: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: LD_INT 4
10392: PUSH
10393: LD_INT 5
10395: PUSH
10396: LD_INT 6
10398: PUSH
10399: LD_INT 7
10401: PUSH
10402: LD_INT 8
10404: PUSH
10405: LD_INT 11
10407: PUSH
10408: LD_INT 12
10410: PUSH
10411: LD_INT 15
10413: PUSH
10414: LD_INT 16
10416: PUSH
10417: LD_INT 20
10419: PUSH
10420: LD_INT 21
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_INT 23
10428: PUSH
10429: LD_INT 25
10431: PUSH
10432: LD_INT 26
10434: PUSH
10435: LD_INT 28
10437: PUSH
10438: LD_INT 30
10440: PUSH
10441: LD_INT 31
10443: PUSH
10444: LD_INT 32
10446: PUSH
10447: LD_INT 36
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 101
10475: PUSH
10476: LD_INT 102
10478: PUSH
10479: LD_INT 103
10481: PUSH
10482: LD_INT 105
10484: PUSH
10485: LD_INT 106
10487: PUSH
10488: LD_INT 108
10490: PUSH
10491: LD_INT 109
10493: PUSH
10494: LD_INT 112
10496: PUSH
10497: LD_INT 114
10499: PUSH
10500: LD_INT 116
10502: PUSH
10503: LD_INT 117
10505: PUSH
10506: LD_INT 118
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: ST_TO_ADDR
10527: GO 12626
10529: LD_INT 10
10531: DOUBLE
10532: EQUAL
10533: IFTRUE 10537
10535: GO 10733
10537: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 2
10545: PUSH
10546: LD_INT 4
10548: PUSH
10549: LD_INT 5
10551: PUSH
10552: LD_INT 6
10554: PUSH
10555: LD_INT 7
10557: PUSH
10558: LD_INT 8
10560: PUSH
10561: LD_INT 9
10563: PUSH
10564: LD_INT 10
10566: PUSH
10567: LD_INT 11
10569: PUSH
10570: LD_INT 12
10572: PUSH
10573: LD_INT 13
10575: PUSH
10576: LD_INT 14
10578: PUSH
10579: LD_INT 15
10581: PUSH
10582: LD_INT 16
10584: PUSH
10585: LD_INT 17
10587: PUSH
10588: LD_INT 18
10590: PUSH
10591: LD_INT 19
10593: PUSH
10594: LD_INT 20
10596: PUSH
10597: LD_INT 21
10599: PUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 23
10605: PUSH
10606: LD_INT 24
10608: PUSH
10609: LD_INT 25
10611: PUSH
10612: LD_INT 26
10614: PUSH
10615: LD_INT 28
10617: PUSH
10618: LD_INT 30
10620: PUSH
10621: LD_INT 31
10623: PUSH
10624: LD_INT 32
10626: PUSH
10627: LD_INT 36
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 101
10663: PUSH
10664: LD_INT 102
10666: PUSH
10667: LD_INT 103
10669: PUSH
10670: LD_INT 104
10672: PUSH
10673: LD_INT 105
10675: PUSH
10676: LD_INT 106
10678: PUSH
10679: LD_INT 107
10681: PUSH
10682: LD_INT 108
10684: PUSH
10685: LD_INT 109
10687: PUSH
10688: LD_INT 110
10690: PUSH
10691: LD_INT 111
10693: PUSH
10694: LD_INT 112
10696: PUSH
10697: LD_INT 114
10699: PUSH
10700: LD_INT 116
10702: PUSH
10703: LD_INT 117
10705: PUSH
10706: LD_INT 118
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: ST_TO_ADDR
10731: GO 12626
10733: LD_INT 11
10735: DOUBLE
10736: EQUAL
10737: IFTRUE 10741
10739: GO 10945
10741: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10742: LD_ADDR_VAR 0 2
10746: PUSH
10747: LD_INT 2
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: LD_INT 4
10755: PUSH
10756: LD_INT 5
10758: PUSH
10759: LD_INT 6
10761: PUSH
10762: LD_INT 7
10764: PUSH
10765: LD_INT 8
10767: PUSH
10768: LD_INT 9
10770: PUSH
10771: LD_INT 10
10773: PUSH
10774: LD_INT 11
10776: PUSH
10777: LD_INT 12
10779: PUSH
10780: LD_INT 13
10782: PUSH
10783: LD_INT 14
10785: PUSH
10786: LD_INT 15
10788: PUSH
10789: LD_INT 16
10791: PUSH
10792: LD_INT 17
10794: PUSH
10795: LD_INT 18
10797: PUSH
10798: LD_INT 19
10800: PUSH
10801: LD_INT 20
10803: PUSH
10804: LD_INT 21
10806: PUSH
10807: LD_INT 22
10809: PUSH
10810: LD_INT 23
10812: PUSH
10813: LD_INT 24
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 26
10821: PUSH
10822: LD_INT 28
10824: PUSH
10825: LD_INT 30
10827: PUSH
10828: LD_INT 31
10830: PUSH
10831: LD_INT 32
10833: PUSH
10834: LD_INT 34
10836: PUSH
10837: LD_INT 36
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 101
10875: PUSH
10876: LD_INT 102
10878: PUSH
10879: LD_INT 103
10881: PUSH
10882: LD_INT 104
10884: PUSH
10885: LD_INT 105
10887: PUSH
10888: LD_INT 106
10890: PUSH
10891: LD_INT 107
10893: PUSH
10894: LD_INT 108
10896: PUSH
10897: LD_INT 109
10899: PUSH
10900: LD_INT 110
10902: PUSH
10903: LD_INT 111
10905: PUSH
10906: LD_INT 112
10908: PUSH
10909: LD_INT 114
10911: PUSH
10912: LD_INT 116
10914: PUSH
10915: LD_INT 117
10917: PUSH
10918: LD_INT 118
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: ST_TO_ADDR
10943: GO 12626
10945: LD_INT 12
10947: DOUBLE
10948: EQUAL
10949: IFTRUE 10953
10951: GO 11173
10953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10954: LD_ADDR_VAR 0 2
10958: PUSH
10959: LD_INT 1
10961: PUSH
10962: LD_INT 2
10964: PUSH
10965: LD_INT 3
10967: PUSH
10968: LD_INT 4
10970: PUSH
10971: LD_INT 5
10973: PUSH
10974: LD_INT 6
10976: PUSH
10977: LD_INT 7
10979: PUSH
10980: LD_INT 8
10982: PUSH
10983: LD_INT 9
10985: PUSH
10986: LD_INT 10
10988: PUSH
10989: LD_INT 11
10991: PUSH
10992: LD_INT 12
10994: PUSH
10995: LD_INT 13
10997: PUSH
10998: LD_INT 14
11000: PUSH
11001: LD_INT 15
11003: PUSH
11004: LD_INT 16
11006: PUSH
11007: LD_INT 17
11009: PUSH
11010: LD_INT 18
11012: PUSH
11013: LD_INT 19
11015: PUSH
11016: LD_INT 20
11018: PUSH
11019: LD_INT 21
11021: PUSH
11022: LD_INT 22
11024: PUSH
11025: LD_INT 23
11027: PUSH
11028: LD_INT 24
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 26
11036: PUSH
11037: LD_INT 27
11039: PUSH
11040: LD_INT 28
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 31
11048: PUSH
11049: LD_INT 32
11051: PUSH
11052: LD_INT 33
11054: PUSH
11055: LD_INT 34
11057: PUSH
11058: LD_INT 36
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 101
11099: PUSH
11100: LD_INT 102
11102: PUSH
11103: LD_INT 103
11105: PUSH
11106: LD_INT 104
11108: PUSH
11109: LD_INT 105
11111: PUSH
11112: LD_INT 106
11114: PUSH
11115: LD_INT 107
11117: PUSH
11118: LD_INT 108
11120: PUSH
11121: LD_INT 109
11123: PUSH
11124: LD_INT 110
11126: PUSH
11127: LD_INT 111
11129: PUSH
11130: LD_INT 112
11132: PUSH
11133: LD_INT 113
11135: PUSH
11136: LD_INT 114
11138: PUSH
11139: LD_INT 116
11141: PUSH
11142: LD_INT 117
11144: PUSH
11145: LD_INT 118
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: ST_TO_ADDR
11171: GO 12626
11173: LD_INT 13
11175: DOUBLE
11176: EQUAL
11177: IFTRUE 11181
11179: GO 11389
11181: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11182: LD_ADDR_VAR 0 2
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: LD_INT 2
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: LD_INT 4
11198: PUSH
11199: LD_INT 5
11201: PUSH
11202: LD_INT 8
11204: PUSH
11205: LD_INT 9
11207: PUSH
11208: LD_INT 10
11210: PUSH
11211: LD_INT 11
11213: PUSH
11214: LD_INT 12
11216: PUSH
11217: LD_INT 14
11219: PUSH
11220: LD_INT 15
11222: PUSH
11223: LD_INT 16
11225: PUSH
11226: LD_INT 17
11228: PUSH
11229: LD_INT 18
11231: PUSH
11232: LD_INT 19
11234: PUSH
11235: LD_INT 20
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 22
11243: PUSH
11244: LD_INT 23
11246: PUSH
11247: LD_INT 24
11249: PUSH
11250: LD_INT 25
11252: PUSH
11253: LD_INT 26
11255: PUSH
11256: LD_INT 27
11258: PUSH
11259: LD_INT 28
11261: PUSH
11262: LD_INT 30
11264: PUSH
11265: LD_INT 31
11267: PUSH
11268: LD_INT 32
11270: PUSH
11271: LD_INT 33
11273: PUSH
11274: LD_INT 34
11276: PUSH
11277: LD_INT 36
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 101
11315: PUSH
11316: LD_INT 102
11318: PUSH
11319: LD_INT 103
11321: PUSH
11322: LD_INT 104
11324: PUSH
11325: LD_INT 105
11327: PUSH
11328: LD_INT 106
11330: PUSH
11331: LD_INT 107
11333: PUSH
11334: LD_INT 108
11336: PUSH
11337: LD_INT 109
11339: PUSH
11340: LD_INT 110
11342: PUSH
11343: LD_INT 111
11345: PUSH
11346: LD_INT 112
11348: PUSH
11349: LD_INT 113
11351: PUSH
11352: LD_INT 114
11354: PUSH
11355: LD_INT 116
11357: PUSH
11358: LD_INT 117
11360: PUSH
11361: LD_INT 118
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: ST_TO_ADDR
11387: GO 12626
11389: LD_INT 14
11391: DOUBLE
11392: EQUAL
11393: IFTRUE 11397
11395: GO 11621
11397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11398: LD_ADDR_VAR 0 2
11402: PUSH
11403: LD_INT 1
11405: PUSH
11406: LD_INT 2
11408: PUSH
11409: LD_INT 3
11411: PUSH
11412: LD_INT 4
11414: PUSH
11415: LD_INT 5
11417: PUSH
11418: LD_INT 6
11420: PUSH
11421: LD_INT 7
11423: PUSH
11424: LD_INT 8
11426: PUSH
11427: LD_INT 9
11429: PUSH
11430: LD_INT 10
11432: PUSH
11433: LD_INT 11
11435: PUSH
11436: LD_INT 12
11438: PUSH
11439: LD_INT 13
11441: PUSH
11442: LD_INT 14
11444: PUSH
11445: LD_INT 15
11447: PUSH
11448: LD_INT 16
11450: PUSH
11451: LD_INT 17
11453: PUSH
11454: LD_INT 18
11456: PUSH
11457: LD_INT 19
11459: PUSH
11460: LD_INT 20
11462: PUSH
11463: LD_INT 21
11465: PUSH
11466: LD_INT 22
11468: PUSH
11469: LD_INT 23
11471: PUSH
11472: LD_INT 24
11474: PUSH
11475: LD_INT 25
11477: PUSH
11478: LD_INT 26
11480: PUSH
11481: LD_INT 27
11483: PUSH
11484: LD_INT 28
11486: PUSH
11487: LD_INT 29
11489: PUSH
11490: LD_INT 30
11492: PUSH
11493: LD_INT 31
11495: PUSH
11496: LD_INT 32
11498: PUSH
11499: LD_INT 33
11501: PUSH
11502: LD_INT 34
11504: PUSH
11505: LD_INT 36
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 101
11547: PUSH
11548: LD_INT 102
11550: PUSH
11551: LD_INT 103
11553: PUSH
11554: LD_INT 104
11556: PUSH
11557: LD_INT 105
11559: PUSH
11560: LD_INT 106
11562: PUSH
11563: LD_INT 107
11565: PUSH
11566: LD_INT 108
11568: PUSH
11569: LD_INT 109
11571: PUSH
11572: LD_INT 110
11574: PUSH
11575: LD_INT 111
11577: PUSH
11578: LD_INT 112
11580: PUSH
11581: LD_INT 113
11583: PUSH
11584: LD_INT 114
11586: PUSH
11587: LD_INT 116
11589: PUSH
11590: LD_INT 117
11592: PUSH
11593: LD_INT 118
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: ST_TO_ADDR
11619: GO 12626
11621: LD_INT 15
11623: DOUBLE
11624: EQUAL
11625: IFTRUE 11629
11627: GO 11853
11629: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11630: LD_ADDR_VAR 0 2
11634: PUSH
11635: LD_INT 1
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: LD_INT 3
11643: PUSH
11644: LD_INT 4
11646: PUSH
11647: LD_INT 5
11649: PUSH
11650: LD_INT 6
11652: PUSH
11653: LD_INT 7
11655: PUSH
11656: LD_INT 8
11658: PUSH
11659: LD_INT 9
11661: PUSH
11662: LD_INT 10
11664: PUSH
11665: LD_INT 11
11667: PUSH
11668: LD_INT 12
11670: PUSH
11671: LD_INT 13
11673: PUSH
11674: LD_INT 14
11676: PUSH
11677: LD_INT 15
11679: PUSH
11680: LD_INT 16
11682: PUSH
11683: LD_INT 17
11685: PUSH
11686: LD_INT 18
11688: PUSH
11689: LD_INT 19
11691: PUSH
11692: LD_INT 20
11694: PUSH
11695: LD_INT 21
11697: PUSH
11698: LD_INT 22
11700: PUSH
11701: LD_INT 23
11703: PUSH
11704: LD_INT 24
11706: PUSH
11707: LD_INT 25
11709: PUSH
11710: LD_INT 26
11712: PUSH
11713: LD_INT 27
11715: PUSH
11716: LD_INT 28
11718: PUSH
11719: LD_INT 29
11721: PUSH
11722: LD_INT 30
11724: PUSH
11725: LD_INT 31
11727: PUSH
11728: LD_INT 32
11730: PUSH
11731: LD_INT 33
11733: PUSH
11734: LD_INT 34
11736: PUSH
11737: LD_INT 36
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 101
11779: PUSH
11780: LD_INT 102
11782: PUSH
11783: LD_INT 103
11785: PUSH
11786: LD_INT 104
11788: PUSH
11789: LD_INT 105
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 107
11797: PUSH
11798: LD_INT 108
11800: PUSH
11801: LD_INT 109
11803: PUSH
11804: LD_INT 110
11806: PUSH
11807: LD_INT 111
11809: PUSH
11810: LD_INT 112
11812: PUSH
11813: LD_INT 113
11815: PUSH
11816: LD_INT 114
11818: PUSH
11819: LD_INT 116
11821: PUSH
11822: LD_INT 117
11824: PUSH
11825: LD_INT 118
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: ST_TO_ADDR
11851: GO 12626
11853: LD_INT 16
11855: DOUBLE
11856: EQUAL
11857: IFTRUE 11861
11859: GO 11997
11861: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11862: LD_ADDR_VAR 0 2
11866: PUSH
11867: LD_INT 2
11869: PUSH
11870: LD_INT 4
11872: PUSH
11873: LD_INT 5
11875: PUSH
11876: LD_INT 7
11878: PUSH
11879: LD_INT 11
11881: PUSH
11882: LD_INT 12
11884: PUSH
11885: LD_INT 15
11887: PUSH
11888: LD_INT 16
11890: PUSH
11891: LD_INT 20
11893: PUSH
11894: LD_INT 21
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 23
11902: PUSH
11903: LD_INT 25
11905: PUSH
11906: LD_INT 26
11908: PUSH
11909: LD_INT 30
11911: PUSH
11912: LD_INT 31
11914: PUSH
11915: LD_INT 32
11917: PUSH
11918: LD_INT 33
11920: PUSH
11921: LD_INT 34
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 101
11947: PUSH
11948: LD_INT 102
11950: PUSH
11951: LD_INT 103
11953: PUSH
11954: LD_INT 106
11956: PUSH
11957: LD_INT 108
11959: PUSH
11960: LD_INT 112
11962: PUSH
11963: LD_INT 113
11965: PUSH
11966: LD_INT 114
11968: PUSH
11969: LD_INT 116
11971: PUSH
11972: LD_INT 117
11974: PUSH
11975: LD_INT 118
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: ST_TO_ADDR
11995: GO 12626
11997: LD_INT 17
11999: DOUBLE
12000: EQUAL
12001: IFTRUE 12005
12003: GO 12229
12005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12006: LD_ADDR_VAR 0 2
12010: PUSH
12011: LD_INT 1
12013: PUSH
12014: LD_INT 2
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: LD_INT 4
12022: PUSH
12023: LD_INT 5
12025: PUSH
12026: LD_INT 6
12028: PUSH
12029: LD_INT 7
12031: PUSH
12032: LD_INT 8
12034: PUSH
12035: LD_INT 9
12037: PUSH
12038: LD_INT 10
12040: PUSH
12041: LD_INT 11
12043: PUSH
12044: LD_INT 12
12046: PUSH
12047: LD_INT 13
12049: PUSH
12050: LD_INT 14
12052: PUSH
12053: LD_INT 15
12055: PUSH
12056: LD_INT 16
12058: PUSH
12059: LD_INT 17
12061: PUSH
12062: LD_INT 18
12064: PUSH
12065: LD_INT 19
12067: PUSH
12068: LD_INT 20
12070: PUSH
12071: LD_INT 21
12073: PUSH
12074: LD_INT 22
12076: PUSH
12077: LD_INT 23
12079: PUSH
12080: LD_INT 24
12082: PUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 26
12088: PUSH
12089: LD_INT 27
12091: PUSH
12092: LD_INT 28
12094: PUSH
12095: LD_INT 29
12097: PUSH
12098: LD_INT 30
12100: PUSH
12101: LD_INT 31
12103: PUSH
12104: LD_INT 32
12106: PUSH
12107: LD_INT 33
12109: PUSH
12110: LD_INT 34
12112: PUSH
12113: LD_INT 36
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 101
12155: PUSH
12156: LD_INT 102
12158: PUSH
12159: LD_INT 103
12161: PUSH
12162: LD_INT 104
12164: PUSH
12165: LD_INT 105
12167: PUSH
12168: LD_INT 106
12170: PUSH
12171: LD_INT 107
12173: PUSH
12174: LD_INT 108
12176: PUSH
12177: LD_INT 109
12179: PUSH
12180: LD_INT 110
12182: PUSH
12183: LD_INT 111
12185: PUSH
12186: LD_INT 112
12188: PUSH
12189: LD_INT 113
12191: PUSH
12192: LD_INT 114
12194: PUSH
12195: LD_INT 116
12197: PUSH
12198: LD_INT 117
12200: PUSH
12201: LD_INT 118
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: ST_TO_ADDR
12227: GO 12626
12229: LD_INT 18
12231: DOUBLE
12232: EQUAL
12233: IFTRUE 12237
12235: GO 12385
12237: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12238: LD_ADDR_VAR 0 2
12242: PUSH
12243: LD_INT 2
12245: PUSH
12246: LD_INT 4
12248: PUSH
12249: LD_INT 5
12251: PUSH
12252: LD_INT 7
12254: PUSH
12255: LD_INT 11
12257: PUSH
12258: LD_INT 12
12260: PUSH
12261: LD_INT 15
12263: PUSH
12264: LD_INT 16
12266: PUSH
12267: LD_INT 20
12269: PUSH
12270: LD_INT 21
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_INT 23
12278: PUSH
12279: LD_INT 25
12281: PUSH
12282: LD_INT 26
12284: PUSH
12285: LD_INT 30
12287: PUSH
12288: LD_INT 31
12290: PUSH
12291: LD_INT 32
12293: PUSH
12294: LD_INT 33
12296: PUSH
12297: LD_INT 34
12299: PUSH
12300: LD_INT 35
12302: PUSH
12303: LD_INT 36
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 101
12331: PUSH
12332: LD_INT 102
12334: PUSH
12335: LD_INT 103
12337: PUSH
12338: LD_INT 106
12340: PUSH
12341: LD_INT 108
12343: PUSH
12344: LD_INT 112
12346: PUSH
12347: LD_INT 113
12349: PUSH
12350: LD_INT 114
12352: PUSH
12353: LD_INT 115
12355: PUSH
12356: LD_INT 116
12358: PUSH
12359: LD_INT 117
12361: PUSH
12362: LD_INT 118
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: ST_TO_ADDR
12383: GO 12626
12385: LD_INT 19
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12625
12393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12394: LD_ADDR_VAR 0 2
12398: PUSH
12399: LD_INT 1
12401: PUSH
12402: LD_INT 2
12404: PUSH
12405: LD_INT 3
12407: PUSH
12408: LD_INT 4
12410: PUSH
12411: LD_INT 5
12413: PUSH
12414: LD_INT 6
12416: PUSH
12417: LD_INT 7
12419: PUSH
12420: LD_INT 8
12422: PUSH
12423: LD_INT 9
12425: PUSH
12426: LD_INT 10
12428: PUSH
12429: LD_INT 11
12431: PUSH
12432: LD_INT 12
12434: PUSH
12435: LD_INT 13
12437: PUSH
12438: LD_INT 14
12440: PUSH
12441: LD_INT 15
12443: PUSH
12444: LD_INT 16
12446: PUSH
12447: LD_INT 17
12449: PUSH
12450: LD_INT 18
12452: PUSH
12453: LD_INT 19
12455: PUSH
12456: LD_INT 20
12458: PUSH
12459: LD_INT 21
12461: PUSH
12462: LD_INT 22
12464: PUSH
12465: LD_INT 23
12467: PUSH
12468: LD_INT 24
12470: PUSH
12471: LD_INT 25
12473: PUSH
12474: LD_INT 26
12476: PUSH
12477: LD_INT 27
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: LD_INT 29
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 31
12491: PUSH
12492: LD_INT 32
12494: PUSH
12495: LD_INT 33
12497: PUSH
12498: LD_INT 34
12500: PUSH
12501: LD_INT 35
12503: PUSH
12504: LD_INT 36
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 101
12547: PUSH
12548: LD_INT 102
12550: PUSH
12551: LD_INT 103
12553: PUSH
12554: LD_INT 104
12556: PUSH
12557: LD_INT 105
12559: PUSH
12560: LD_INT 106
12562: PUSH
12563: LD_INT 107
12565: PUSH
12566: LD_INT 108
12568: PUSH
12569: LD_INT 109
12571: PUSH
12572: LD_INT 110
12574: PUSH
12575: LD_INT 111
12577: PUSH
12578: LD_INT 112
12580: PUSH
12581: LD_INT 113
12583: PUSH
12584: LD_INT 114
12586: PUSH
12587: LD_INT 115
12589: PUSH
12590: LD_INT 116
12592: PUSH
12593: LD_INT 117
12595: PUSH
12596: LD_INT 118
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: ST_TO_ADDR
12623: GO 12626
12625: POP
// end else
12626: GO 12857
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12628: LD_ADDR_VAR 0 2
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: LD_INT 2
12638: PUSH
12639: LD_INT 3
12641: PUSH
12642: LD_INT 4
12644: PUSH
12645: LD_INT 5
12647: PUSH
12648: LD_INT 6
12650: PUSH
12651: LD_INT 7
12653: PUSH
12654: LD_INT 8
12656: PUSH
12657: LD_INT 9
12659: PUSH
12660: LD_INT 10
12662: PUSH
12663: LD_INT 11
12665: PUSH
12666: LD_INT 12
12668: PUSH
12669: LD_INT 13
12671: PUSH
12672: LD_INT 14
12674: PUSH
12675: LD_INT 15
12677: PUSH
12678: LD_INT 16
12680: PUSH
12681: LD_INT 17
12683: PUSH
12684: LD_INT 18
12686: PUSH
12687: LD_INT 19
12689: PUSH
12690: LD_INT 20
12692: PUSH
12693: LD_INT 21
12695: PUSH
12696: LD_INT 22
12698: PUSH
12699: LD_INT 23
12701: PUSH
12702: LD_INT 24
12704: PUSH
12705: LD_INT 25
12707: PUSH
12708: LD_INT 26
12710: PUSH
12711: LD_INT 27
12713: PUSH
12714: LD_INT 28
12716: PUSH
12717: LD_INT 29
12719: PUSH
12720: LD_INT 30
12722: PUSH
12723: LD_INT 31
12725: PUSH
12726: LD_INT 32
12728: PUSH
12729: LD_INT 33
12731: PUSH
12732: LD_INT 34
12734: PUSH
12735: LD_INT 35
12737: PUSH
12738: LD_INT 36
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 101
12781: PUSH
12782: LD_INT 102
12784: PUSH
12785: LD_INT 103
12787: PUSH
12788: LD_INT 104
12790: PUSH
12791: LD_INT 105
12793: PUSH
12794: LD_INT 106
12796: PUSH
12797: LD_INT 107
12799: PUSH
12800: LD_INT 108
12802: PUSH
12803: LD_INT 109
12805: PUSH
12806: LD_INT 110
12808: PUSH
12809: LD_INT 111
12811: PUSH
12812: LD_INT 112
12814: PUSH
12815: LD_INT 113
12817: PUSH
12818: LD_INT 114
12820: PUSH
12821: LD_INT 115
12823: PUSH
12824: LD_INT 116
12826: PUSH
12827: LD_INT 117
12829: PUSH
12830: LD_INT 118
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: ST_TO_ADDR
// if result then
12857: LD_VAR 0 2
12861: IFFALSE 13647
// begin normal :=  ;
12863: LD_ADDR_VAR 0 5
12867: PUSH
12868: LD_STRING 
12870: ST_TO_ADDR
// hardcore :=  ;
12871: LD_ADDR_VAR 0 6
12875: PUSH
12876: LD_STRING 
12878: ST_TO_ADDR
// active :=  ;
12879: LD_ADDR_VAR 0 7
12883: PUSH
12884: LD_STRING 
12886: ST_TO_ADDR
// for i = 1 to normalCounter do
12887: LD_ADDR_VAR 0 8
12891: PUSH
12892: DOUBLE
12893: LD_INT 1
12895: DEC
12896: ST_TO_ADDR
12897: LD_EXP 31
12901: PUSH
12902: FOR_TO
12903: IFFALSE 13004
// begin tmp := 0 ;
12905: LD_ADDR_VAR 0 3
12909: PUSH
12910: LD_STRING 0
12912: ST_TO_ADDR
// if result [ 1 ] then
12913: LD_VAR 0 2
12917: PUSH
12918: LD_INT 1
12920: ARRAY
12921: IFFALSE 12986
// if result [ 1 ] [ 1 ] = i then
12923: LD_VAR 0 2
12927: PUSH
12928: LD_INT 1
12930: ARRAY
12931: PUSH
12932: LD_INT 1
12934: ARRAY
12935: PUSH
12936: LD_VAR 0 8
12940: EQUAL
12941: IFFALSE 12986
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: LD_VAR 0 2
12952: PPUSH
12953: LD_INT 1
12955: PPUSH
12956: LD_VAR 0 2
12960: PUSH
12961: LD_INT 1
12963: ARRAY
12964: PPUSH
12965: LD_INT 1
12967: PPUSH
12968: CALL_OW 3
12972: PPUSH
12973: CALL_OW 1
12977: ST_TO_ADDR
// tmp := 1 ;
12978: LD_ADDR_VAR 0 3
12982: PUSH
12983: LD_STRING 1
12985: ST_TO_ADDR
// end ; normal := normal & tmp ;
12986: LD_ADDR_VAR 0 5
12990: PUSH
12991: LD_VAR 0 5
12995: PUSH
12996: LD_VAR 0 3
13000: STR
13001: ST_TO_ADDR
// end ;
13002: GO 12902
13004: POP
13005: POP
// for i = 1 to hardcoreCounter do
13006: LD_ADDR_VAR 0 8
13010: PUSH
13011: DOUBLE
13012: LD_INT 1
13014: DEC
13015: ST_TO_ADDR
13016: LD_EXP 32
13020: PUSH
13021: FOR_TO
13022: IFFALSE 13127
// begin tmp := 0 ;
13024: LD_ADDR_VAR 0 3
13028: PUSH
13029: LD_STRING 0
13031: ST_TO_ADDR
// if result [ 2 ] then
13032: LD_VAR 0 2
13036: PUSH
13037: LD_INT 2
13039: ARRAY
13040: IFFALSE 13109
// if result [ 2 ] [ 1 ] = 100 + i then
13042: LD_VAR 0 2
13046: PUSH
13047: LD_INT 2
13049: ARRAY
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PUSH
13055: LD_INT 100
13057: PUSH
13058: LD_VAR 0 8
13062: PLUS
13063: EQUAL
13064: IFFALSE 13109
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13066: LD_ADDR_VAR 0 2
13070: PUSH
13071: LD_VAR 0 2
13075: PPUSH
13076: LD_INT 2
13078: PPUSH
13079: LD_VAR 0 2
13083: PUSH
13084: LD_INT 2
13086: ARRAY
13087: PPUSH
13088: LD_INT 1
13090: PPUSH
13091: CALL_OW 3
13095: PPUSH
13096: CALL_OW 1
13100: ST_TO_ADDR
// tmp := 1 ;
13101: LD_ADDR_VAR 0 3
13105: PUSH
13106: LD_STRING 1
13108: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13109: LD_ADDR_VAR 0 6
13113: PUSH
13114: LD_VAR 0 6
13118: PUSH
13119: LD_VAR 0 3
13123: STR
13124: ST_TO_ADDR
// end ;
13125: GO 13021
13127: POP
13128: POP
// if isGameLoad then
13129: LD_VAR 0 1
13133: IFFALSE 13608
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13135: LD_ADDR_VAR 0 4
13139: PUSH
13140: LD_EXP 35
13144: PUSH
13145: LD_EXP 34
13149: PUSH
13150: LD_EXP 36
13154: PUSH
13155: LD_EXP 33
13159: PUSH
13160: LD_EXP 37
13164: PUSH
13165: LD_EXP 38
13169: PUSH
13170: LD_EXP 39
13174: PUSH
13175: LD_EXP 40
13179: PUSH
13180: LD_EXP 41
13184: PUSH
13185: LD_EXP 42
13189: PUSH
13190: LD_EXP 43
13194: PUSH
13195: LD_EXP 44
13199: PUSH
13200: LD_EXP 45
13204: PUSH
13205: LD_EXP 46
13209: PUSH
13210: LD_EXP 54
13214: PUSH
13215: LD_EXP 55
13219: PUSH
13220: LD_EXP 56
13224: PUSH
13225: LD_EXP 57
13229: PUSH
13230: LD_EXP 59
13234: PUSH
13235: LD_EXP 60
13239: PUSH
13240: LD_EXP 61
13244: PUSH
13245: LD_EXP 64
13249: PUSH
13250: LD_EXP 66
13254: PUSH
13255: LD_EXP 67
13259: PUSH
13260: LD_EXP 68
13264: PUSH
13265: LD_EXP 70
13269: PUSH
13270: LD_EXP 71
13274: PUSH
13275: LD_EXP 74
13279: PUSH
13280: LD_EXP 75
13284: PUSH
13285: LD_EXP 76
13289: PUSH
13290: LD_EXP 77
13294: PUSH
13295: LD_EXP 78
13299: PUSH
13300: LD_EXP 79
13304: PUSH
13305: LD_EXP 80
13309: PUSH
13310: LD_EXP 81
13314: PUSH
13315: LD_EXP 82
13319: PUSH
13320: LD_EXP 47
13324: PUSH
13325: LD_EXP 48
13329: PUSH
13330: LD_EXP 51
13334: PUSH
13335: LD_EXP 52
13339: PUSH
13340: LD_EXP 53
13344: PUSH
13345: LD_EXP 49
13349: PUSH
13350: LD_EXP 50
13354: PUSH
13355: LD_EXP 58
13359: PUSH
13360: LD_EXP 62
13364: PUSH
13365: LD_EXP 63
13369: PUSH
13370: LD_EXP 65
13374: PUSH
13375: LD_EXP 69
13379: PUSH
13380: LD_EXP 72
13384: PUSH
13385: LD_EXP 73
13389: PUSH
13390: LD_EXP 83
13394: PUSH
13395: LD_EXP 84
13399: PUSH
13400: LD_EXP 85
13404: PUSH
13405: LD_EXP 86
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: ST_TO_ADDR
// tmp :=  ;
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_STRING 
13473: ST_TO_ADDR
// for i = 1 to normalCounter do
13474: LD_ADDR_VAR 0 8
13478: PUSH
13479: DOUBLE
13480: LD_INT 1
13482: DEC
13483: ST_TO_ADDR
13484: LD_EXP 31
13488: PUSH
13489: FOR_TO
13490: IFFALSE 13526
// begin if flags [ i ] then
13492: LD_VAR 0 4
13496: PUSH
13497: LD_VAR 0 8
13501: ARRAY
13502: IFFALSE 13524
// tmp := tmp & i & ; ;
13504: LD_ADDR_VAR 0 3
13508: PUSH
13509: LD_VAR 0 3
13513: PUSH
13514: LD_VAR 0 8
13518: STR
13519: PUSH
13520: LD_STRING ;
13522: STR
13523: ST_TO_ADDR
// end ;
13524: GO 13489
13526: POP
13527: POP
// for i = 1 to hardcoreCounter do
13528: LD_ADDR_VAR 0 8
13532: PUSH
13533: DOUBLE
13534: LD_INT 1
13536: DEC
13537: ST_TO_ADDR
13538: LD_EXP 32
13542: PUSH
13543: FOR_TO
13544: IFFALSE 13590
// begin if flags [ normalCounter + i ] then
13546: LD_VAR 0 4
13550: PUSH
13551: LD_EXP 31
13555: PUSH
13556: LD_VAR 0 8
13560: PLUS
13561: ARRAY
13562: IFFALSE 13588
// tmp := tmp & ( 100 + i ) & ; ;
13564: LD_ADDR_VAR 0 3
13568: PUSH
13569: LD_VAR 0 3
13573: PUSH
13574: LD_INT 100
13576: PUSH
13577: LD_VAR 0 8
13581: PLUS
13582: STR
13583: PUSH
13584: LD_STRING ;
13586: STR
13587: ST_TO_ADDR
// end ;
13588: GO 13543
13590: POP
13591: POP
// if tmp then
13592: LD_VAR 0 3
13596: IFFALSE 13608
// active := tmp ;
13598: LD_ADDR_VAR 0 7
13602: PUSH
13603: LD_VAR 0 3
13607: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13608: LD_STRING getStreamItemsFromMission("
13610: PUSH
13611: LD_VAR 0 5
13615: STR
13616: PUSH
13617: LD_STRING ","
13619: STR
13620: PUSH
13621: LD_VAR 0 6
13625: STR
13626: PUSH
13627: LD_STRING ","
13629: STR
13630: PUSH
13631: LD_VAR 0 7
13635: STR
13636: PUSH
13637: LD_STRING ")
13639: STR
13640: PPUSH
13641: CALL_OW 559
// end else
13645: GO 13654
// ToLua ( getStreamItemsFromMission("","","") ) ;
13647: LD_STRING getStreamItemsFromMission("","","")
13649: PPUSH
13650: CALL_OW 559
// end ;
13654: LD_VAR 0 2
13658: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13659: LD_EXP 30
13663: IFFALSE 13671
13665: PUSH
13666: LD_EXP 35
13670: AND
13671: IFFALSE 13795
13673: GO 13675
13675: DISABLE
13676: LD_INT 0
13678: PPUSH
13679: PPUSH
// begin enable ;
13680: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13681: LD_ADDR_VAR 0 2
13685: PUSH
13686: LD_INT 22
13688: PUSH
13689: LD_OWVAR 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 2
13700: PUSH
13701: LD_INT 34
13703: PUSH
13704: LD_INT 7
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 34
13713: PUSH
13714: LD_INT 45
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 34
13723: PUSH
13724: LD_INT 28
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 34
13733: PUSH
13734: LD_INT 47
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PPUSH
13752: CALL_OW 69
13756: ST_TO_ADDR
// if not tmp then
13757: LD_VAR 0 2
13761: NOT
13762: IFFALSE 13766
// exit ;
13764: GO 13795
// for i in tmp do
13766: LD_ADDR_VAR 0 1
13770: PUSH
13771: LD_VAR 0 2
13775: PUSH
13776: FOR_IN
13777: IFFALSE 13793
// begin SetLives ( i , 0 ) ;
13779: LD_VAR 0 1
13783: PPUSH
13784: LD_INT 0
13786: PPUSH
13787: CALL_OW 234
// end ;
13791: GO 13776
13793: POP
13794: POP
// end ;
13795: PPOPN 2
13797: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13798: LD_EXP 30
13802: IFFALSE 13810
13804: PUSH
13805: LD_EXP 36
13809: AND
13810: IFFALSE 13894
13812: GO 13814
13814: DISABLE
13815: LD_INT 0
13817: PPUSH
13818: PPUSH
// begin enable ;
13819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13820: LD_ADDR_VAR 0 2
13824: PUSH
13825: LD_INT 22
13827: PUSH
13828: LD_OWVAR 2
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 32
13839: PUSH
13840: LD_INT 3
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PPUSH
13851: CALL_OW 69
13855: ST_TO_ADDR
// if not tmp then
13856: LD_VAR 0 2
13860: NOT
13861: IFFALSE 13865
// exit ;
13863: GO 13894
// for i in tmp do
13865: LD_ADDR_VAR 0 1
13869: PUSH
13870: LD_VAR 0 2
13874: PUSH
13875: FOR_IN
13876: IFFALSE 13892
// begin SetLives ( i , 0 ) ;
13878: LD_VAR 0 1
13882: PPUSH
13883: LD_INT 0
13885: PPUSH
13886: CALL_OW 234
// end ;
13890: GO 13875
13892: POP
13893: POP
// end ;
13894: PPOPN 2
13896: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13897: LD_EXP 30
13901: IFFALSE 13909
13903: PUSH
13904: LD_EXP 33
13908: AND
13909: IFFALSE 14002
13911: GO 13913
13913: DISABLE
13914: LD_INT 0
13916: PPUSH
// begin enable ;
13917: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13918: LD_ADDR_VAR 0 1
13922: PUSH
13923: LD_INT 22
13925: PUSH
13926: LD_OWVAR 2
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 2
13937: PUSH
13938: LD_INT 25
13940: PUSH
13941: LD_INT 5
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 25
13950: PUSH
13951: LD_INT 9
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 25
13960: PUSH
13961: LD_INT 8
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: FOR_IN
13984: IFFALSE 14000
// begin SetClass ( i , 1 ) ;
13986: LD_VAR 0 1
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 336
// end ;
13998: GO 13983
14000: POP
14001: POP
// end ;
14002: PPOPN 1
14004: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14005: LD_EXP 30
14009: IFFALSE 14017
14011: PUSH
14012: LD_EXP 34
14016: AND
14017: IFFALSE 14029
14019: PUSH
14020: LD_OWVAR 65
14024: PUSH
14025: LD_INT 7
14027: LESS
14028: AND
14029: IFFALSE 14043
14031: GO 14033
14033: DISABLE
// begin enable ;
14034: ENABLE
// game_speed := 7 ;
14035: LD_ADDR_OWVAR 65
14039: PUSH
14040: LD_INT 7
14042: ST_TO_ADDR
// end ;
14043: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14044: LD_EXP 30
14048: IFFALSE 14056
14050: PUSH
14051: LD_EXP 37
14055: AND
14056: IFFALSE 14258
14058: GO 14060
14060: DISABLE
14061: LD_INT 0
14063: PPUSH
14064: PPUSH
14065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14066: LD_ADDR_VAR 0 3
14070: PUSH
14071: LD_INT 81
14073: PUSH
14074: LD_OWVAR 2
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 21
14085: PUSH
14086: LD_INT 1
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PPUSH
14097: CALL_OW 69
14101: ST_TO_ADDR
// if not tmp then
14102: LD_VAR 0 3
14106: NOT
14107: IFFALSE 14111
// exit ;
14109: GO 14258
// if tmp > 5 then
14111: LD_VAR 0 3
14115: PUSH
14116: LD_INT 5
14118: GREATER
14119: IFFALSE 14131
// k := 5 else
14121: LD_ADDR_VAR 0 2
14125: PUSH
14126: LD_INT 5
14128: ST_TO_ADDR
14129: GO 14141
// k := tmp ;
14131: LD_ADDR_VAR 0 2
14135: PUSH
14136: LD_VAR 0 3
14140: ST_TO_ADDR
// for i := 1 to k do
14141: LD_ADDR_VAR 0 1
14145: PUSH
14146: DOUBLE
14147: LD_INT 1
14149: DEC
14150: ST_TO_ADDR
14151: LD_VAR 0 2
14155: PUSH
14156: FOR_TO
14157: IFFALSE 14256
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14159: LD_VAR 0 3
14163: PUSH
14164: LD_VAR 0 1
14168: ARRAY
14169: PPUSH
14170: LD_VAR 0 1
14174: PUSH
14175: LD_INT 4
14177: MOD
14178: PUSH
14179: LD_INT 1
14181: PLUS
14182: PPUSH
14183: CALL_OW 259
14187: PUSH
14188: LD_INT 10
14190: LESS
14191: IFFALSE 14254
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14193: LD_VAR 0 3
14197: PUSH
14198: LD_VAR 0 1
14202: ARRAY
14203: PPUSH
14204: LD_VAR 0 1
14208: PUSH
14209: LD_INT 4
14211: MOD
14212: PUSH
14213: LD_INT 1
14215: PLUS
14216: PPUSH
14217: LD_VAR 0 3
14221: PUSH
14222: LD_VAR 0 1
14226: ARRAY
14227: PPUSH
14228: LD_VAR 0 1
14232: PUSH
14233: LD_INT 4
14235: MOD
14236: PUSH
14237: LD_INT 1
14239: PLUS
14240: PPUSH
14241: CALL_OW 259
14245: PUSH
14246: LD_INT 1
14248: PLUS
14249: PPUSH
14250: CALL_OW 237
14254: GO 14156
14256: POP
14257: POP
// end ;
14258: PPOPN 3
14260: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14261: LD_EXP 30
14265: IFFALSE 14273
14267: PUSH
14268: LD_EXP 38
14272: AND
14273: IFFALSE 14293
14275: GO 14277
14277: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14278: LD_INT 4
14280: PPUSH
14281: LD_OWVAR 2
14285: PPUSH
14286: LD_INT 0
14288: PPUSH
14289: CALL_OW 324
14293: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14294: LD_EXP 30
14298: IFFALSE 14306
14300: PUSH
14301: LD_EXP 67
14305: AND
14306: IFFALSE 14326
14308: GO 14310
14310: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14311: LD_INT 19
14313: PPUSH
14314: LD_OWVAR 2
14318: PPUSH
14319: LD_INT 0
14321: PPUSH
14322: CALL_OW 324
14326: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14327: LD_EXP 30
14331: IFFALSE 14339
14333: PUSH
14334: LD_EXP 39
14338: AND
14339: IFFALSE 14441
14341: GO 14343
14343: DISABLE
14344: LD_INT 0
14346: PPUSH
14347: PPUSH
// begin enable ;
14348: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14349: LD_ADDR_VAR 0 2
14353: PUSH
14354: LD_INT 22
14356: PUSH
14357: LD_OWVAR 2
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 2
14368: PUSH
14369: LD_INT 34
14371: PUSH
14372: LD_INT 11
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 34
14381: PUSH
14382: LD_INT 30
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PPUSH
14398: CALL_OW 69
14402: ST_TO_ADDR
// if not tmp then
14403: LD_VAR 0 2
14407: NOT
14408: IFFALSE 14412
// exit ;
14410: GO 14441
// for i in tmp do
14412: LD_ADDR_VAR 0 1
14416: PUSH
14417: LD_VAR 0 2
14421: PUSH
14422: FOR_IN
14423: IFFALSE 14439
// begin SetLives ( i , 0 ) ;
14425: LD_VAR 0 1
14429: PPUSH
14430: LD_INT 0
14432: PPUSH
14433: CALL_OW 234
// end ;
14437: GO 14422
14439: POP
14440: POP
// end ;
14441: PPOPN 2
14443: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14444: LD_EXP 30
14448: IFFALSE 14456
14450: PUSH
14451: LD_EXP 40
14455: AND
14456: IFFALSE 14476
14458: GO 14460
14460: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14461: LD_INT 32
14463: PPUSH
14464: LD_OWVAR 2
14468: PPUSH
14469: LD_INT 0
14471: PPUSH
14472: CALL_OW 324
14476: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14477: LD_EXP 30
14481: IFFALSE 14489
14483: PUSH
14484: LD_EXP 41
14488: AND
14489: IFFALSE 14672
14491: GO 14493
14493: DISABLE
14494: LD_INT 0
14496: PPUSH
14497: PPUSH
14498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: LD_INT 22
14506: PUSH
14507: LD_OWVAR 2
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 33
14518: PUSH
14519: LD_INT 3
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PPUSH
14530: CALL_OW 69
14534: ST_TO_ADDR
// if not tmp then
14535: LD_VAR 0 2
14539: NOT
14540: IFFALSE 14544
// exit ;
14542: GO 14672
// side := 0 ;
14544: LD_ADDR_VAR 0 3
14548: PUSH
14549: LD_INT 0
14551: ST_TO_ADDR
// for i := 1 to 8 do
14552: LD_ADDR_VAR 0 1
14556: PUSH
14557: DOUBLE
14558: LD_INT 1
14560: DEC
14561: ST_TO_ADDR
14562: LD_INT 8
14564: PUSH
14565: FOR_TO
14566: IFFALSE 14616
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14568: LD_OWVAR 2
14572: PUSH
14573: LD_VAR 0 1
14577: NONEQUAL
14578: IFFALSE 14600
14580: PUSH
14581: LD_OWVAR 2
14585: PPUSH
14586: LD_VAR 0 1
14590: PPUSH
14591: CALL_OW 81
14595: PUSH
14596: LD_INT 2
14598: EQUAL
14599: AND
14600: IFFALSE 14614
// begin side := i ;
14602: LD_ADDR_VAR 0 3
14606: PUSH
14607: LD_VAR 0 1
14611: ST_TO_ADDR
// break ;
14612: GO 14616
// end ;
14614: GO 14565
14616: POP
14617: POP
// if not side then
14618: LD_VAR 0 3
14622: NOT
14623: IFFALSE 14627
// exit ;
14625: GO 14672
// for i := 1 to tmp do
14627: LD_ADDR_VAR 0 1
14631: PUSH
14632: DOUBLE
14633: LD_INT 1
14635: DEC
14636: ST_TO_ADDR
14637: LD_VAR 0 2
14641: PUSH
14642: FOR_TO
14643: IFFALSE 14670
// if Prob ( 60 ) then
14645: LD_INT 60
14647: PPUSH
14648: CALL_OW 13
14652: IFFALSE 14668
// SetSide ( i , side ) ;
14654: LD_VAR 0 1
14658: PPUSH
14659: LD_VAR 0 3
14663: PPUSH
14664: CALL_OW 235
14668: GO 14642
14670: POP
14671: POP
// end ;
14672: PPOPN 3
14674: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14675: LD_EXP 30
14679: IFFALSE 14687
14681: PUSH
14682: LD_EXP 43
14686: AND
14687: IFFALSE 14806
14689: GO 14691
14691: DISABLE
14692: LD_INT 0
14694: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14695: LD_ADDR_VAR 0 1
14699: PUSH
14700: LD_INT 22
14702: PUSH
14703: LD_OWVAR 2
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 21
14714: PUSH
14715: LD_INT 1
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 3
14724: PUSH
14725: LD_INT 23
14727: PUSH
14728: LD_INT 0
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: PPUSH
14744: CALL_OW 69
14748: PUSH
14749: FOR_IN
14750: IFFALSE 14804
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14752: LD_VAR 0 1
14756: PPUSH
14757: CALL_OW 257
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: LD_INT 2
14767: PUSH
14768: LD_INT 3
14770: PUSH
14771: LD_INT 4
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: IN
14780: IFFALSE 14802
// SetClass ( un , rand ( 1 , 4 ) ) ;
14782: LD_VAR 0 1
14786: PPUSH
14787: LD_INT 1
14789: PPUSH
14790: LD_INT 4
14792: PPUSH
14793: CALL_OW 12
14797: PPUSH
14798: CALL_OW 336
14802: GO 14749
14804: POP
14805: POP
// end ;
14806: PPOPN 1
14808: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14809: LD_EXP 30
14813: IFFALSE 14821
14815: PUSH
14816: LD_EXP 42
14820: AND
14821: IFFALSE 14900
14823: GO 14825
14825: DISABLE
14826: LD_INT 0
14828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14829: LD_ADDR_VAR 0 1
14833: PUSH
14834: LD_INT 22
14836: PUSH
14837: LD_OWVAR 2
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 21
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PPUSH
14860: CALL_OW 69
14864: ST_TO_ADDR
// if not tmp then
14865: LD_VAR 0 1
14869: NOT
14870: IFFALSE 14874
// exit ;
14872: GO 14900
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14874: LD_VAR 0 1
14878: PUSH
14879: LD_INT 1
14881: PPUSH
14882: LD_VAR 0 1
14886: PPUSH
14887: CALL_OW 12
14891: ARRAY
14892: PPUSH
14893: LD_INT 100
14895: PPUSH
14896: CALL_OW 234
// end ;
14900: PPOPN 1
14902: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14903: LD_EXP 30
14907: IFFALSE 14915
14909: PUSH
14910: LD_EXP 44
14914: AND
14915: IFFALSE 15013
14917: GO 14919
14919: DISABLE
14920: LD_INT 0
14922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14923: LD_ADDR_VAR 0 1
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_OWVAR 2
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 21
14942: PUSH
14943: LD_INT 1
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PPUSH
14954: CALL_OW 69
14958: ST_TO_ADDR
// if not tmp then
14959: LD_VAR 0 1
14963: NOT
14964: IFFALSE 14968
// exit ;
14966: GO 15013
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14968: LD_VAR 0 1
14972: PUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 12
14985: ARRAY
14986: PPUSH
14987: LD_INT 1
14989: PPUSH
14990: LD_INT 4
14992: PPUSH
14993: CALL_OW 12
14997: PPUSH
14998: LD_INT 3000
15000: PPUSH
15001: LD_INT 9000
15003: PPUSH
15004: CALL_OW 12
15008: PPUSH
15009: CALL_OW 492
// end ;
15013: PPOPN 1
15015: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15016: LD_EXP 30
15020: IFFALSE 15028
15022: PUSH
15023: LD_EXP 45
15027: AND
15028: IFFALSE 15048
15030: GO 15032
15032: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15033: LD_INT 1
15035: PPUSH
15036: LD_OWVAR 2
15040: PPUSH
15041: LD_INT 0
15043: PPUSH
15044: CALL_OW 324
15048: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15049: LD_EXP 30
15053: IFFALSE 15061
15055: PUSH
15056: LD_EXP 46
15060: AND
15061: IFFALSE 15144
15063: GO 15065
15065: DISABLE
15066: LD_INT 0
15068: PPUSH
15069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15070: LD_ADDR_VAR 0 2
15074: PUSH
15075: LD_INT 22
15077: PUSH
15078: LD_OWVAR 2
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 3
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 69
15105: ST_TO_ADDR
// if not tmp then
15106: LD_VAR 0 2
15110: NOT
15111: IFFALSE 15115
// exit ;
15113: GO 15144
// for i in tmp do
15115: LD_ADDR_VAR 0 1
15119: PUSH
15120: LD_VAR 0 2
15124: PUSH
15125: FOR_IN
15126: IFFALSE 15142
// SetBLevel ( i , 10 ) ;
15128: LD_VAR 0 1
15132: PPUSH
15133: LD_INT 10
15135: PPUSH
15136: CALL_OW 241
15140: GO 15125
15142: POP
15143: POP
// end ;
15144: PPOPN 2
15146: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15147: LD_EXP 30
15151: IFFALSE 15159
15153: PUSH
15154: LD_EXP 47
15158: AND
15159: IFFALSE 15270
15161: GO 15163
15163: DISABLE
15164: LD_INT 0
15166: PPUSH
15167: PPUSH
15168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_INT 22
15176: PUSH
15177: LD_OWVAR 2
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 25
15188: PUSH
15189: LD_INT 1
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PPUSH
15200: CALL_OW 69
15204: ST_TO_ADDR
// if not tmp then
15205: LD_VAR 0 3
15209: NOT
15210: IFFALSE 15214
// exit ;
15212: GO 15270
// un := tmp [ rand ( 1 , tmp ) ] ;
15214: LD_ADDR_VAR 0 2
15218: PUSH
15219: LD_VAR 0 3
15223: PUSH
15224: LD_INT 1
15226: PPUSH
15227: LD_VAR 0 3
15231: PPUSH
15232: CALL_OW 12
15236: ARRAY
15237: ST_TO_ADDR
// if Crawls ( un ) then
15238: LD_VAR 0 2
15242: PPUSH
15243: CALL_OW 318
15247: IFFALSE 15258
// ComWalk ( un ) ;
15249: LD_VAR 0 2
15253: PPUSH
15254: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: LD_INT 5
15265: PPUSH
15266: CALL_OW 336
// end ;
15270: PPOPN 3
15272: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15273: LD_EXP 30
15277: IFFALSE 15285
15279: PUSH
15280: LD_EXP 48
15284: AND
15285: IFFALSE 15297
15287: PUSH
15288: LD_OWVAR 67
15292: PUSH
15293: LD_INT 4
15295: LESS
15296: AND
15297: IFFALSE 15316
15299: GO 15301
15301: DISABLE
// begin Difficulty := Difficulty + 1 ;
15302: LD_ADDR_OWVAR 67
15306: PUSH
15307: LD_OWVAR 67
15311: PUSH
15312: LD_INT 1
15314: PLUS
15315: ST_TO_ADDR
// end ;
15316: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15317: LD_EXP 30
15321: IFFALSE 15329
15323: PUSH
15324: LD_EXP 49
15328: AND
15329: IFFALSE 15432
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
// begin for i := 1 to 5 do
15337: LD_ADDR_VAR 0 1
15341: PUSH
15342: DOUBLE
15343: LD_INT 1
15345: DEC
15346: ST_TO_ADDR
15347: LD_INT 5
15349: PUSH
15350: FOR_TO
15351: IFFALSE 15430
// begin uc_nation := nation_nature ;
15353: LD_ADDR_OWVAR 21
15357: PUSH
15358: LD_INT 0
15360: ST_TO_ADDR
// uc_side := 0 ;
15361: LD_ADDR_OWVAR 20
15365: PUSH
15366: LD_INT 0
15368: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15369: LD_ADDR_OWVAR 29
15373: PUSH
15374: LD_INT 12
15376: PUSH
15377: LD_INT 12
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: ST_TO_ADDR
// hc_agressivity := 20 ;
15384: LD_ADDR_OWVAR 35
15388: PUSH
15389: LD_INT 20
15391: ST_TO_ADDR
// hc_class := class_tiger ;
15392: LD_ADDR_OWVAR 28
15396: PUSH
15397: LD_INT 14
15399: ST_TO_ADDR
// hc_gallery :=  ;
15400: LD_ADDR_OWVAR 33
15404: PUSH
15405: LD_STRING 
15407: ST_TO_ADDR
// hc_name :=  ;
15408: LD_ADDR_OWVAR 26
15412: PUSH
15413: LD_STRING 
15415: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15416: CALL_OW 44
15420: PPUSH
15421: LD_INT 0
15423: PPUSH
15424: CALL_OW 51
// end ;
15428: GO 15350
15430: POP
15431: POP
// end ;
15432: PPOPN 1
15434: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15435: LD_EXP 30
15439: IFFALSE 15447
15441: PUSH
15442: LD_EXP 50
15446: AND
15447: IFFALSE 15456
15449: GO 15451
15451: DISABLE
// StreamSibBomb ;
15452: CALL 15457 0 0
15456: END
// export function StreamSibBomb ; var i , x , y ; begin
15457: LD_INT 0
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
// result := false ;
15463: LD_ADDR_VAR 0 1
15467: PUSH
15468: LD_INT 0
15470: ST_TO_ADDR
// for i := 1 to 16 do
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: DOUBLE
15477: LD_INT 1
15479: DEC
15480: ST_TO_ADDR
15481: LD_INT 16
15483: PUSH
15484: FOR_TO
15485: IFFALSE 15684
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: LD_INT 10
15494: PUSH
15495: LD_INT 20
15497: PUSH
15498: LD_INT 30
15500: PUSH
15501: LD_INT 40
15503: PUSH
15504: LD_INT 50
15506: PUSH
15507: LD_INT 60
15509: PUSH
15510: LD_INT 70
15512: PUSH
15513: LD_INT 80
15515: PUSH
15516: LD_INT 90
15518: PUSH
15519: LD_INT 100
15521: PUSH
15522: LD_INT 110
15524: PUSH
15525: LD_INT 120
15527: PUSH
15528: LD_INT 130
15530: PUSH
15531: LD_INT 140
15533: PUSH
15534: LD_INT 150
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 1
15556: PPUSH
15557: LD_INT 15
15559: PPUSH
15560: CALL_OW 12
15564: ARRAY
15565: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15566: LD_ADDR_VAR 0 4
15570: PUSH
15571: LD_INT 10
15573: PUSH
15574: LD_INT 20
15576: PUSH
15577: LD_INT 30
15579: PUSH
15580: LD_INT 40
15582: PUSH
15583: LD_INT 50
15585: PUSH
15586: LD_INT 60
15588: PUSH
15589: LD_INT 70
15591: PUSH
15592: LD_INT 80
15594: PUSH
15595: LD_INT 90
15597: PUSH
15598: LD_INT 100
15600: PUSH
15601: LD_INT 110
15603: PUSH
15604: LD_INT 120
15606: PUSH
15607: LD_INT 130
15609: PUSH
15610: LD_INT 140
15612: PUSH
15613: LD_INT 150
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 1
15635: PPUSH
15636: LD_INT 15
15638: PPUSH
15639: CALL_OW 12
15643: ARRAY
15644: ST_TO_ADDR
// if ValidHex ( x , y ) then
15645: LD_VAR 0 3
15649: PPUSH
15650: LD_VAR 0 4
15654: PPUSH
15655: CALL_OW 488
15659: IFFALSE 15682
// begin result := [ x , y ] ;
15661: LD_ADDR_VAR 0 1
15665: PUSH
15666: LD_VAR 0 3
15670: PUSH
15671: LD_VAR 0 4
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: ST_TO_ADDR
// break ;
15680: GO 15684
// end ; end ;
15682: GO 15484
15684: POP
15685: POP
// if result then
15686: LD_VAR 0 1
15690: IFFALSE 15750
// begin ToLua ( playSibBomb() ) ;
15692: LD_STRING playSibBomb()
15694: PPUSH
15695: CALL_OW 559
// wait ( 0 0$14 ) ;
15699: LD_INT 490
15701: PPUSH
15702: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15706: LD_VAR 0 1
15710: PUSH
15711: LD_INT 1
15713: ARRAY
15714: PPUSH
15715: LD_VAR 0 1
15719: PUSH
15720: LD_INT 2
15722: ARRAY
15723: PPUSH
15724: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15728: LD_VAR 0 1
15732: PUSH
15733: LD_INT 1
15735: ARRAY
15736: PPUSH
15737: LD_VAR 0 1
15741: PUSH
15742: LD_INT 2
15744: ARRAY
15745: PPUSH
15746: CALL_OW 429
// end ; end ;
15750: LD_VAR 0 1
15754: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15755: LD_EXP 30
15759: IFFALSE 15767
15761: PUSH
15762: LD_EXP 52
15766: AND
15767: IFFALSE 15779
15769: GO 15771
15771: DISABLE
// YouLost (  ) ;
15772: LD_STRING 
15774: PPUSH
15775: CALL_OW 104
15779: END
// every 0 0$1 trigger StreamModeActive and sFog do
15780: LD_EXP 30
15784: IFFALSE 15792
15786: PUSH
15787: LD_EXP 51
15791: AND
15792: IFFALSE 15806
15794: GO 15796
15796: DISABLE
// FogOff ( your_side ) ;
15797: LD_OWVAR 2
15801: PPUSH
15802: CALL_OW 344
15806: END
// every 0 0$1 trigger StreamModeActive and sSun do
15807: LD_EXP 30
15811: IFFALSE 15819
15813: PUSH
15814: LD_EXP 53
15818: AND
15819: IFFALSE 15847
15821: GO 15823
15823: DISABLE
// begin solar_recharge_percent := 0 ;
15824: LD_ADDR_OWVAR 79
15828: PUSH
15829: LD_INT 0
15831: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15832: LD_INT 10500
15834: PPUSH
15835: CALL_OW 67
// solar_recharge_percent := 100 ;
15839: LD_ADDR_OWVAR 79
15843: PUSH
15844: LD_INT 100
15846: ST_TO_ADDR
// end ;
15847: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15848: LD_EXP 30
15852: IFFALSE 15860
15854: PUSH
15855: LD_EXP 54
15859: AND
15860: IFFALSE 16099
15862: GO 15864
15864: DISABLE
15865: LD_INT 0
15867: PPUSH
15868: PPUSH
15869: PPUSH
// begin tmp := [ ] ;
15870: LD_ADDR_VAR 0 3
15874: PUSH
15875: EMPTY
15876: ST_TO_ADDR
// for i := 1 to 6 do
15877: LD_ADDR_VAR 0 1
15881: PUSH
15882: DOUBLE
15883: LD_INT 1
15885: DEC
15886: ST_TO_ADDR
15887: LD_INT 6
15889: PUSH
15890: FOR_TO
15891: IFFALSE 15996
// begin uc_nation := nation_nature ;
15893: LD_ADDR_OWVAR 21
15897: PUSH
15898: LD_INT 0
15900: ST_TO_ADDR
// uc_side := 0 ;
15901: LD_ADDR_OWVAR 20
15905: PUSH
15906: LD_INT 0
15908: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15909: LD_ADDR_OWVAR 29
15913: PUSH
15914: LD_INT 12
15916: PUSH
15917: LD_INT 12
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: ST_TO_ADDR
// hc_agressivity := 20 ;
15924: LD_ADDR_OWVAR 35
15928: PUSH
15929: LD_INT 20
15931: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15932: LD_ADDR_OWVAR 28
15936: PUSH
15937: LD_INT 17
15939: ST_TO_ADDR
// hc_gallery :=  ;
15940: LD_ADDR_OWVAR 33
15944: PUSH
15945: LD_STRING 
15947: ST_TO_ADDR
// hc_name :=  ;
15948: LD_ADDR_OWVAR 26
15952: PUSH
15953: LD_STRING 
15955: ST_TO_ADDR
// un := CreateHuman ;
15956: LD_ADDR_VAR 0 2
15960: PUSH
15961: CALL_OW 44
15965: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15966: LD_VAR 0 2
15970: PPUSH
15971: LD_INT 1
15973: PPUSH
15974: CALL_OW 51
// tmp := tmp ^ un ;
15978: LD_ADDR_VAR 0 3
15982: PUSH
15983: LD_VAR 0 3
15987: PUSH
15988: LD_VAR 0 2
15992: ADD
15993: ST_TO_ADDR
// end ;
15994: GO 15890
15996: POP
15997: POP
// repeat wait ( 0 0$1 ) ;
15998: LD_INT 35
16000: PPUSH
16001: CALL_OW 67
// for un in tmp do
16005: LD_ADDR_VAR 0 2
16009: PUSH
16010: LD_VAR 0 3
16014: PUSH
16015: FOR_IN
16016: IFFALSE 16090
// begin if IsDead ( un ) then
16018: LD_VAR 0 2
16022: PPUSH
16023: CALL_OW 301
16027: IFFALSE 16047
// begin tmp := tmp diff un ;
16029: LD_ADDR_VAR 0 3
16033: PUSH
16034: LD_VAR 0 3
16038: PUSH
16039: LD_VAR 0 2
16043: DIFF
16044: ST_TO_ADDR
// continue ;
16045: GO 16015
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16047: LD_VAR 0 2
16051: PPUSH
16052: LD_INT 3
16054: PUSH
16055: LD_INT 22
16057: PUSH
16058: LD_INT 0
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PPUSH
16069: CALL_OW 69
16073: PPUSH
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL_OW 74
16083: PPUSH
16084: CALL_OW 115
// end ;
16088: GO 16015
16090: POP
16091: POP
// until not tmp ;
16092: LD_VAR 0 3
16096: NOT
16097: IFFALSE 15998
// end ;
16099: PPOPN 3
16101: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16102: LD_EXP 30
16106: IFFALSE 16114
16108: PUSH
16109: LD_EXP 55
16113: AND
16114: IFFALSE 16168
16116: GO 16118
16118: DISABLE
// begin ToLua ( displayTroll(); ) ;
16119: LD_STRING displayTroll();
16121: PPUSH
16122: CALL_OW 559
// wait ( 3 3$00 ) ;
16126: LD_INT 6300
16128: PPUSH
16129: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16133: LD_STRING hideTroll();
16135: PPUSH
16136: CALL_OW 559
// wait ( 1 1$00 ) ;
16140: LD_INT 2100
16142: PPUSH
16143: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16147: LD_STRING displayTroll();
16149: PPUSH
16150: CALL_OW 559
// wait ( 1 1$00 ) ;
16154: LD_INT 2100
16156: PPUSH
16157: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16161: LD_STRING hideTroll();
16163: PPUSH
16164: CALL_OW 559
// end ;
16168: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16169: LD_EXP 30
16173: IFFALSE 16181
16175: PUSH
16176: LD_EXP 56
16180: AND
16181: IFFALSE 16244
16183: GO 16185
16185: DISABLE
16186: LD_INT 0
16188: PPUSH
// begin p := 0 ;
16189: LD_ADDR_VAR 0 1
16193: PUSH
16194: LD_INT 0
16196: ST_TO_ADDR
// repeat game_speed := 1 ;
16197: LD_ADDR_OWVAR 65
16201: PUSH
16202: LD_INT 1
16204: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16205: LD_INT 35
16207: PPUSH
16208: CALL_OW 67
// p := p + 1 ;
16212: LD_ADDR_VAR 0 1
16216: PUSH
16217: LD_VAR 0 1
16221: PUSH
16222: LD_INT 1
16224: PLUS
16225: ST_TO_ADDR
// until p >= 60 ;
16226: LD_VAR 0 1
16230: PUSH
16231: LD_INT 60
16233: GREATEREQUAL
16234: IFFALSE 16197
// game_speed := 4 ;
16236: LD_ADDR_OWVAR 65
16240: PUSH
16241: LD_INT 4
16243: ST_TO_ADDR
// end ;
16244: PPOPN 1
16246: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16247: LD_EXP 30
16251: IFFALSE 16259
16253: PUSH
16254: LD_EXP 57
16258: AND
16259: IFFALSE 16405
16261: GO 16263
16263: DISABLE
16264: LD_INT 0
16266: PPUSH
16267: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16268: LD_ADDR_VAR 0 1
16272: PUSH
16273: LD_INT 22
16275: PUSH
16276: LD_OWVAR 2
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 2
16287: PUSH
16288: LD_INT 30
16290: PUSH
16291: LD_INT 0
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 30
16300: PUSH
16301: LD_INT 1
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: ST_TO_ADDR
// if not depot then
16322: LD_VAR 0 1
16326: NOT
16327: IFFALSE 16331
// exit ;
16329: GO 16405
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_VAR 0 1
16340: PUSH
16341: LD_INT 1
16343: PPUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 12
16353: ARRAY
16354: PPUSH
16355: CALL_OW 274
16359: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16360: LD_VAR 0 2
16364: PPUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_INT 0
16370: PPUSH
16371: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16375: LD_VAR 0 2
16379: PPUSH
16380: LD_INT 2
16382: PPUSH
16383: LD_INT 0
16385: PPUSH
16386: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16390: LD_VAR 0 2
16394: PPUSH
16395: LD_INT 3
16397: PPUSH
16398: LD_INT 0
16400: PPUSH
16401: CALL_OW 277
// end ;
16405: PPOPN 2
16407: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16408: LD_EXP 30
16412: IFFALSE 16420
16414: PUSH
16415: LD_EXP 58
16419: AND
16420: IFFALSE 16517
16422: GO 16424
16424: DISABLE
16425: LD_INT 0
16427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16428: LD_ADDR_VAR 0 1
16432: PUSH
16433: LD_INT 22
16435: PUSH
16436: LD_OWVAR 2
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 3
16457: PUSH
16458: LD_INT 23
16460: PUSH
16461: LD_INT 0
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: PPUSH
16477: CALL_OW 69
16481: ST_TO_ADDR
// if not tmp then
16482: LD_VAR 0 1
16486: NOT
16487: IFFALSE 16491
// exit ;
16489: GO 16517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16491: LD_VAR 0 1
16495: PUSH
16496: LD_INT 1
16498: PPUSH
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 12
16508: ARRAY
16509: PPUSH
16510: LD_INT 200
16512: PPUSH
16513: CALL_OW 234
// end ;
16517: PPOPN 1
16519: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16520: LD_EXP 30
16524: IFFALSE 16532
16526: PUSH
16527: LD_EXP 59
16531: AND
16532: IFFALSE 16611
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 21
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// if not tmp then
16576: LD_VAR 0 1
16580: NOT
16581: IFFALSE 16585
// exit ;
16583: GO 16611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16585: LD_VAR 0 1
16589: PUSH
16590: LD_INT 1
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 12
16602: ARRAY
16603: PPUSH
16604: LD_INT 60
16606: PPUSH
16607: CALL_OW 234
// end ;
16611: PPOPN 1
16613: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16614: LD_EXP 30
16618: IFFALSE 16626
16620: PUSH
16621: LD_EXP 60
16625: AND
16626: IFFALSE 16725
16628: GO 16630
16630: DISABLE
16631: LD_INT 0
16633: PPUSH
16634: PPUSH
// begin enable ;
16635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16636: LD_ADDR_VAR 0 1
16640: PUSH
16641: LD_INT 22
16643: PUSH
16644: LD_OWVAR 2
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 61
16655: PUSH
16656: EMPTY
16657: LIST
16658: PUSH
16659: LD_INT 33
16661: PUSH
16662: LD_INT 2
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: ST_TO_ADDR
// if not tmp then
16679: LD_VAR 0 1
16683: NOT
16684: IFFALSE 16688
// exit ;
16686: GO 16725
// for i in tmp do
16688: LD_ADDR_VAR 0 2
16692: PUSH
16693: LD_VAR 0 1
16697: PUSH
16698: FOR_IN
16699: IFFALSE 16723
// if IsControledBy ( i ) then
16701: LD_VAR 0 2
16705: PPUSH
16706: CALL_OW 312
16710: IFFALSE 16721
// ComUnlink ( i ) ;
16712: LD_VAR 0 2
16716: PPUSH
16717: CALL_OW 136
16721: GO 16698
16723: POP
16724: POP
// end ;
16725: PPOPN 2
16727: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16728: LD_EXP 30
16732: IFFALSE 16740
16734: PUSH
16735: LD_EXP 61
16739: AND
16740: IFFALSE 16880
16742: GO 16744
16744: DISABLE
16745: LD_INT 0
16747: PPUSH
16748: PPUSH
// begin ToLua ( displayPowell(); ) ;
16749: LD_STRING displayPowell();
16751: PPUSH
16752: CALL_OW 559
// uc_side := 0 ;
16756: LD_ADDR_OWVAR 20
16760: PUSH
16761: LD_INT 0
16763: ST_TO_ADDR
// uc_nation := 2 ;
16764: LD_ADDR_OWVAR 21
16768: PUSH
16769: LD_INT 2
16771: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16772: LD_ADDR_OWVAR 37
16776: PUSH
16777: LD_INT 14
16779: ST_TO_ADDR
// vc_engine := engine_siberite ;
16780: LD_ADDR_OWVAR 39
16784: PUSH
16785: LD_INT 3
16787: ST_TO_ADDR
// vc_control := control_apeman ;
16788: LD_ADDR_OWVAR 38
16792: PUSH
16793: LD_INT 5
16795: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16796: LD_ADDR_OWVAR 40
16800: PUSH
16801: LD_INT 29
16803: ST_TO_ADDR
// un := CreateVehicle ;
16804: LD_ADDR_VAR 0 2
16808: PUSH
16809: CALL_OW 45
16813: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16814: LD_VAR 0 2
16818: PPUSH
16819: LD_INT 1
16821: PPUSH
16822: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16826: LD_INT 35
16828: PPUSH
16829: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16833: LD_VAR 0 2
16837: PPUSH
16838: LD_INT 22
16840: PUSH
16841: LD_OWVAR 2
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL_OW 69
16854: PPUSH
16855: LD_VAR 0 2
16859: PPUSH
16860: CALL_OW 74
16864: PPUSH
16865: CALL_OW 115
// until IsDead ( un ) ;
16869: LD_VAR 0 2
16873: PPUSH
16874: CALL_OW 301
16878: IFFALSE 16826
// end ;
16880: PPOPN 2
16882: END
// every 0 0$1 trigger StreamModeActive and sStu do
16883: LD_EXP 30
16887: IFFALSE 16895
16889: PUSH
16890: LD_EXP 69
16894: AND
16895: IFFALSE 16911
16897: GO 16899
16899: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16900: LD_STRING displayStucuk();
16902: PPUSH
16903: CALL_OW 559
// ResetFog ;
16907: CALL_OW 335
// end ;
16911: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16912: LD_EXP 30
16916: IFFALSE 16924
16918: PUSH
16919: LD_EXP 62
16923: AND
16924: IFFALSE 17065
16926: GO 16928
16928: DISABLE
16929: LD_INT 0
16931: PPUSH
16932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16933: LD_ADDR_VAR 0 2
16937: PUSH
16938: LD_INT 22
16940: PUSH
16941: LD_OWVAR 2
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 21
16952: PUSH
16953: LD_INT 1
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PPUSH
16964: CALL_OW 69
16968: ST_TO_ADDR
// if not tmp then
16969: LD_VAR 0 2
16973: NOT
16974: IFFALSE 16978
// exit ;
16976: GO 17065
// un := tmp [ rand ( 1 , tmp ) ] ;
16978: LD_ADDR_VAR 0 1
16982: PUSH
16983: LD_VAR 0 2
16987: PUSH
16988: LD_INT 1
16990: PPUSH
16991: LD_VAR 0 2
16995: PPUSH
16996: CALL_OW 12
17000: ARRAY
17001: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17002: LD_VAR 0 1
17006: PPUSH
17007: LD_INT 0
17009: PPUSH
17010: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_OWVAR 3
17023: PUSH
17024: LD_VAR 0 1
17028: DIFF
17029: PPUSH
17030: LD_VAR 0 1
17034: PPUSH
17035: CALL_OW 74
17039: PPUSH
17040: CALL_OW 115
// wait ( 0 0$20 ) ;
17044: LD_INT 700
17046: PPUSH
17047: CALL_OW 67
// SetSide ( un , your_side ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_OWVAR 2
17060: PPUSH
17061: CALL_OW 235
// end ;
17065: PPOPN 2
17067: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17068: LD_EXP 30
17072: IFFALSE 17080
17074: PUSH
17075: LD_EXP 63
17079: AND
17080: IFFALSE 17186
17082: GO 17084
17084: DISABLE
17085: LD_INT 0
17087: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17088: LD_ADDR_VAR 0 1
17092: PUSH
17093: LD_INT 22
17095: PUSH
17096: LD_OWVAR 2
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: LD_INT 30
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 30
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 69
17141: ST_TO_ADDR
// if not depot then
17142: LD_VAR 0 1
17146: NOT
17147: IFFALSE 17151
// exit ;
17149: GO 17186
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17151: LD_VAR 0 1
17155: PUSH
17156: LD_INT 1
17158: ARRAY
17159: PPUSH
17160: CALL_OW 250
17164: PPUSH
17165: LD_VAR 0 1
17169: PUSH
17170: LD_INT 1
17172: ARRAY
17173: PPUSH
17174: CALL_OW 251
17178: PPUSH
17179: LD_INT 70
17181: PPUSH
17182: CALL_OW 495
// end ;
17186: PPOPN 1
17188: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17189: LD_EXP 30
17193: IFFALSE 17201
17195: PUSH
17196: LD_EXP 64
17200: AND
17201: IFFALSE 17412
17203: GO 17205
17205: DISABLE
17206: LD_INT 0
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17213: LD_ADDR_VAR 0 5
17217: PUSH
17218: LD_INT 22
17220: PUSH
17221: LD_OWVAR 2
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 21
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: ST_TO_ADDR
// if not tmp then
17249: LD_VAR 0 5
17253: NOT
17254: IFFALSE 17258
// exit ;
17256: GO 17412
// for i in tmp do
17258: LD_ADDR_VAR 0 1
17262: PUSH
17263: LD_VAR 0 5
17267: PUSH
17268: FOR_IN
17269: IFFALSE 17410
// begin d := rand ( 0 , 5 ) ;
17271: LD_ADDR_VAR 0 4
17275: PUSH
17276: LD_INT 0
17278: PPUSH
17279: LD_INT 5
17281: PPUSH
17282: CALL_OW 12
17286: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17287: LD_ADDR_VAR 0 2
17291: PUSH
17292: LD_VAR 0 1
17296: PPUSH
17297: CALL_OW 250
17301: PPUSH
17302: LD_VAR 0 4
17306: PPUSH
17307: LD_INT 3
17309: PPUSH
17310: LD_INT 12
17312: PPUSH
17313: CALL_OW 12
17317: PPUSH
17318: CALL_OW 272
17322: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 251
17337: PPUSH
17338: LD_VAR 0 4
17342: PPUSH
17343: LD_INT 3
17345: PPUSH
17346: LD_INT 12
17348: PPUSH
17349: CALL_OW 12
17353: PPUSH
17354: CALL_OW 273
17358: ST_TO_ADDR
// if ValidHex ( x , y ) then
17359: LD_VAR 0 2
17363: PPUSH
17364: LD_VAR 0 3
17368: PPUSH
17369: CALL_OW 488
17373: IFFALSE 17408
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17375: LD_VAR 0 1
17379: PPUSH
17380: LD_VAR 0 2
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 3
17392: PPUSH
17393: LD_INT 6
17395: PPUSH
17396: CALL_OW 12
17400: PPUSH
17401: LD_INT 1
17403: PPUSH
17404: CALL_OW 483
// end ;
17408: GO 17268
17410: POP
17411: POP
// end ;
17412: PPOPN 5
17414: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17415: LD_EXP 30
17419: IFFALSE 17427
17421: PUSH
17422: LD_EXP 65
17426: AND
17427: IFFALSE 17521
17429: GO 17431
17431: DISABLE
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17436: LD_ADDR_VAR 0 2
17440: PUSH
17441: LD_INT 22
17443: PUSH
17444: LD_OWVAR 2
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 32
17455: PUSH
17456: LD_INT 1
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 21
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: PPUSH
17478: CALL_OW 69
17482: ST_TO_ADDR
// if not tmp then
17483: LD_VAR 0 2
17487: NOT
17488: IFFALSE 17492
// exit ;
17490: GO 17521
// for i in tmp do
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: LD_VAR 0 2
17501: PUSH
17502: FOR_IN
17503: IFFALSE 17519
// SetFuel ( i , 0 ) ;
17505: LD_VAR 0 1
17509: PPUSH
17510: LD_INT 0
17512: PPUSH
17513: CALL_OW 240
17517: GO 17502
17519: POP
17520: POP
// end ;
17521: PPOPN 2
17523: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17524: LD_EXP 30
17528: IFFALSE 17536
17530: PUSH
17531: LD_EXP 66
17535: AND
17536: IFFALSE 17602
17538: GO 17540
17540: DISABLE
17541: LD_INT 0
17543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17544: LD_ADDR_VAR 0 1
17548: PUSH
17549: LD_INT 22
17551: PUSH
17552: LD_OWVAR 2
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 30
17563: PUSH
17564: LD_INT 29
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PPUSH
17575: CALL_OW 69
17579: ST_TO_ADDR
// if not tmp then
17580: LD_VAR 0 1
17584: NOT
17585: IFFALSE 17589
// exit ;
17587: GO 17602
// DestroyUnit ( tmp [ 1 ] ) ;
17589: LD_VAR 0 1
17593: PUSH
17594: LD_INT 1
17596: ARRAY
17597: PPUSH
17598: CALL_OW 65
// end ;
17602: PPOPN 1
17604: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17605: LD_EXP 30
17609: IFFALSE 17617
17611: PUSH
17612: LD_EXP 68
17616: AND
17617: IFFALSE 17746
17619: GO 17621
17621: DISABLE
17622: LD_INT 0
17624: PPUSH
// begin uc_side := 0 ;
17625: LD_ADDR_OWVAR 20
17629: PUSH
17630: LD_INT 0
17632: ST_TO_ADDR
// uc_nation := nation_arabian ;
17633: LD_ADDR_OWVAR 21
17637: PUSH
17638: LD_INT 2
17640: ST_TO_ADDR
// hc_gallery :=  ;
17641: LD_ADDR_OWVAR 33
17645: PUSH
17646: LD_STRING 
17648: ST_TO_ADDR
// hc_name :=  ;
17649: LD_ADDR_OWVAR 26
17653: PUSH
17654: LD_STRING 
17656: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17657: LD_INT 1
17659: PPUSH
17660: LD_INT 11
17662: PPUSH
17663: LD_INT 10
17665: PPUSH
17666: CALL_OW 380
// un := CreateHuman ;
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: CALL_OW 44
17679: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 1
17687: PPUSH
17688: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17692: LD_INT 35
17694: PPUSH
17695: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17699: LD_VAR 0 1
17703: PPUSH
17704: LD_INT 22
17706: PUSH
17707: LD_OWVAR 2
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PPUSH
17716: CALL_OW 69
17720: PPUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 74
17730: PPUSH
17731: CALL_OW 115
// until IsDead ( un ) ;
17735: LD_VAR 0 1
17739: PPUSH
17740: CALL_OW 301
17744: IFFALSE 17692
// end ;
17746: PPOPN 1
17748: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17749: LD_EXP 30
17753: IFFALSE 17761
17755: PUSH
17756: LD_EXP 70
17760: AND
17761: IFFALSE 17773
17763: GO 17765
17765: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17766: LD_STRING earthquake(getX(game), 0, 32)
17768: PPUSH
17769: CALL_OW 559
17773: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17774: LD_EXP 30
17778: IFFALSE 17786
17780: PUSH
17781: LD_EXP 71
17785: AND
17786: IFFALSE 17877
17788: GO 17790
17790: DISABLE
17791: LD_INT 0
17793: PPUSH
// begin enable ;
17794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17795: LD_ADDR_VAR 0 1
17799: PUSH
17800: LD_INT 22
17802: PUSH
17803: LD_OWVAR 2
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 21
17814: PUSH
17815: LD_INT 2
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 33
17824: PUSH
17825: LD_INT 3
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: PPUSH
17837: CALL_OW 69
17841: ST_TO_ADDR
// if not tmp then
17842: LD_VAR 0 1
17846: NOT
17847: IFFALSE 17851
// exit ;
17849: GO 17877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17851: LD_VAR 0 1
17855: PUSH
17856: LD_INT 1
17858: PPUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 12
17868: ARRAY
17869: PPUSH
17870: LD_INT 1
17872: PPUSH
17873: CALL_OW 234
// end ;
17877: PPOPN 1
17879: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17880: LD_EXP 30
17884: IFFALSE 17892
17886: PUSH
17887: LD_EXP 72
17891: AND
17892: IFFALSE 18033
17894: GO 17896
17896: DISABLE
17897: LD_INT 0
17899: PPUSH
17900: PPUSH
17901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17902: LD_ADDR_VAR 0 3
17906: PUSH
17907: LD_INT 22
17909: PUSH
17910: LD_OWVAR 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 25
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PPUSH
17933: CALL_OW 69
17937: ST_TO_ADDR
// if not tmp then
17938: LD_VAR 0 3
17942: NOT
17943: IFFALSE 17947
// exit ;
17945: GO 18033
// un := tmp [ rand ( 1 , tmp ) ] ;
17947: LD_ADDR_VAR 0 2
17951: PUSH
17952: LD_VAR 0 3
17956: PUSH
17957: LD_INT 1
17959: PPUSH
17960: LD_VAR 0 3
17964: PPUSH
17965: CALL_OW 12
17969: ARRAY
17970: ST_TO_ADDR
// if Crawls ( un ) then
17971: LD_VAR 0 2
17975: PPUSH
17976: CALL_OW 318
17980: IFFALSE 17991
// ComWalk ( un ) ;
17982: LD_VAR 0 2
17986: PPUSH
17987: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17991: LD_VAR 0 2
17995: PPUSH
17996: LD_INT 9
17998: PPUSH
17999: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18003: LD_INT 28
18005: PPUSH
18006: LD_OWVAR 2
18010: PPUSH
18011: LD_INT 2
18013: PPUSH
18014: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18018: LD_INT 29
18020: PPUSH
18021: LD_OWVAR 2
18025: PPUSH
18026: LD_INT 2
18028: PPUSH
18029: CALL_OW 322
// end ;
18033: PPOPN 3
18035: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18036: LD_EXP 30
18040: IFFALSE 18048
18042: PUSH
18043: LD_EXP 73
18047: AND
18048: IFFALSE 18159
18050: GO 18052
18052: DISABLE
18053: LD_INT 0
18055: PPUSH
18056: PPUSH
18057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18058: LD_ADDR_VAR 0 3
18062: PUSH
18063: LD_INT 22
18065: PUSH
18066: LD_OWVAR 2
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 25
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PPUSH
18089: CALL_OW 69
18093: ST_TO_ADDR
// if not tmp then
18094: LD_VAR 0 3
18098: NOT
18099: IFFALSE 18103
// exit ;
18101: GO 18159
// un := tmp [ rand ( 1 , tmp ) ] ;
18103: LD_ADDR_VAR 0 2
18107: PUSH
18108: LD_VAR 0 3
18112: PUSH
18113: LD_INT 1
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: CALL_OW 12
18125: ARRAY
18126: ST_TO_ADDR
// if Crawls ( un ) then
18127: LD_VAR 0 2
18131: PPUSH
18132: CALL_OW 318
18136: IFFALSE 18147
// ComWalk ( un ) ;
18138: LD_VAR 0 2
18142: PPUSH
18143: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18147: LD_VAR 0 2
18151: PPUSH
18152: LD_INT 8
18154: PPUSH
18155: CALL_OW 336
// end ;
18159: PPOPN 3
18161: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18162: LD_EXP 30
18166: IFFALSE 18174
18168: PUSH
18169: LD_EXP 74
18173: AND
18174: IFFALSE 18318
18176: GO 18178
18178: DISABLE
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_OWVAR 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 21
18202: PUSH
18203: LD_INT 2
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 34
18215: PUSH
18216: LD_INT 12
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 34
18225: PUSH
18226: LD_INT 51
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 34
18235: PUSH
18236: LD_INT 32
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: PPUSH
18254: CALL_OW 69
18258: ST_TO_ADDR
// if not tmp then
18259: LD_VAR 0 2
18263: NOT
18264: IFFALSE 18268
// exit ;
18266: GO 18318
// for i in tmp do
18268: LD_ADDR_VAR 0 1
18272: PUSH
18273: LD_VAR 0 2
18277: PUSH
18278: FOR_IN
18279: IFFALSE 18316
// if GetCargo ( i , mat_artifact ) = 0 then
18281: LD_VAR 0 1
18285: PPUSH
18286: LD_INT 4
18288: PPUSH
18289: CALL_OW 289
18293: PUSH
18294: LD_INT 0
18296: EQUAL
18297: IFFALSE 18314
// SetCargo ( i , mat_siberit , 100 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 3
18306: PPUSH
18307: LD_INT 100
18309: PPUSH
18310: CALL_OW 290
18314: GO 18278
18316: POP
18317: POP
// end ;
18318: PPOPN 2
18320: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18321: LD_EXP 30
18325: IFFALSE 18333
18327: PUSH
18328: LD_EXP 75
18332: AND
18333: IFFALSE 18516
18335: GO 18337
18337: DISABLE
18338: LD_INT 0
18340: PPUSH
18341: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18342: LD_ADDR_VAR 0 2
18346: PUSH
18347: LD_INT 22
18349: PUSH
18350: LD_OWVAR 2
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: ST_TO_ADDR
// if not tmp then
18364: LD_VAR 0 2
18368: NOT
18369: IFFALSE 18373
// exit ;
18371: GO 18516
// for i := 1 to 2 do
18373: LD_ADDR_VAR 0 1
18377: PUSH
18378: DOUBLE
18379: LD_INT 1
18381: DEC
18382: ST_TO_ADDR
18383: LD_INT 2
18385: PUSH
18386: FOR_TO
18387: IFFALSE 18514
// begin uc_side := your_side ;
18389: LD_ADDR_OWVAR 20
18393: PUSH
18394: LD_OWVAR 2
18398: ST_TO_ADDR
// uc_nation := nation_american ;
18399: LD_ADDR_OWVAR 21
18403: PUSH
18404: LD_INT 1
18406: ST_TO_ADDR
// vc_chassis := us_morphling ;
18407: LD_ADDR_OWVAR 37
18411: PUSH
18412: LD_INT 5
18414: ST_TO_ADDR
// vc_engine := engine_siberite ;
18415: LD_ADDR_OWVAR 39
18419: PUSH
18420: LD_INT 3
18422: ST_TO_ADDR
// vc_control := control_computer ;
18423: LD_ADDR_OWVAR 38
18427: PUSH
18428: LD_INT 3
18430: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18431: LD_ADDR_OWVAR 40
18435: PUSH
18436: LD_INT 10
18438: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18439: LD_VAR 0 2
18443: PUSH
18444: LD_INT 1
18446: ARRAY
18447: PPUSH
18448: CALL_OW 310
18452: NOT
18453: IFFALSE 18500
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18455: CALL_OW 45
18459: PPUSH
18460: LD_VAR 0 2
18464: PUSH
18465: LD_INT 1
18467: ARRAY
18468: PPUSH
18469: CALL_OW 250
18473: PPUSH
18474: LD_VAR 0 2
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: CALL_OW 251
18487: PPUSH
18488: LD_INT 12
18490: PPUSH
18491: LD_INT 1
18493: PPUSH
18494: CALL_OW 50
18498: GO 18512
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18500: CALL_OW 45
18504: PPUSH
18505: LD_INT 1
18507: PPUSH
18508: CALL_OW 51
// end ;
18512: GO 18386
18514: POP
18515: POP
// end ;
18516: PPOPN 2
18518: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18519: LD_EXP 30
18523: IFFALSE 18531
18525: PUSH
18526: LD_EXP 76
18530: AND
18531: IFFALSE 18753
18533: GO 18535
18535: DISABLE
18536: LD_INT 0
18538: PPUSH
18539: PPUSH
18540: PPUSH
18541: PPUSH
18542: PPUSH
18543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18544: LD_ADDR_VAR 0 6
18548: PUSH
18549: LD_INT 22
18551: PUSH
18552: LD_OWVAR 2
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 21
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 3
18573: PUSH
18574: LD_INT 23
18576: PUSH
18577: LD_INT 0
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: LIST
18592: PPUSH
18593: CALL_OW 69
18597: ST_TO_ADDR
// if not tmp then
18598: LD_VAR 0 6
18602: NOT
18603: IFFALSE 18607
// exit ;
18605: GO 18753
// s1 := rand ( 1 , 4 ) ;
18607: LD_ADDR_VAR 0 2
18611: PUSH
18612: LD_INT 1
18614: PPUSH
18615: LD_INT 4
18617: PPUSH
18618: CALL_OW 12
18622: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18623: LD_ADDR_VAR 0 4
18627: PUSH
18628: LD_VAR 0 6
18632: PUSH
18633: LD_INT 1
18635: ARRAY
18636: PPUSH
18637: LD_VAR 0 2
18641: PPUSH
18642: CALL_OW 259
18646: ST_TO_ADDR
// if s1 = 1 then
18647: LD_VAR 0 2
18651: PUSH
18652: LD_INT 1
18654: EQUAL
18655: IFFALSE 18675
// s2 := rand ( 2 , 4 ) else
18657: LD_ADDR_VAR 0 3
18661: PUSH
18662: LD_INT 2
18664: PPUSH
18665: LD_INT 4
18667: PPUSH
18668: CALL_OW 12
18672: ST_TO_ADDR
18673: GO 18683
// s2 := 1 ;
18675: LD_ADDR_VAR 0 3
18679: PUSH
18680: LD_INT 1
18682: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18683: LD_ADDR_VAR 0 5
18687: PUSH
18688: LD_VAR 0 6
18692: PUSH
18693: LD_INT 1
18695: ARRAY
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: CALL_OW 259
18706: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18707: LD_VAR 0 6
18711: PUSH
18712: LD_INT 1
18714: ARRAY
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 5
18725: PPUSH
18726: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18730: LD_VAR 0 6
18734: PUSH
18735: LD_INT 1
18737: ARRAY
18738: PPUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_VAR 0 4
18748: PPUSH
18749: CALL_OW 237
// end ;
18753: PPOPN 6
18755: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18756: LD_EXP 30
18760: IFFALSE 18768
18762: PUSH
18763: LD_EXP 77
18767: AND
18768: IFFALSE 18847
18770: GO 18772
18772: DISABLE
18773: LD_INT 0
18775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_INT 22
18783: PUSH
18784: LD_OWVAR 2
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 30
18795: PUSH
18796: LD_INT 3
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PPUSH
18807: CALL_OW 69
18811: ST_TO_ADDR
// if not tmp then
18812: LD_VAR 0 1
18816: NOT
18817: IFFALSE 18821
// exit ;
18819: GO 18847
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18821: LD_VAR 0 1
18825: PUSH
18826: LD_INT 1
18828: PPUSH
18829: LD_VAR 0 1
18833: PPUSH
18834: CALL_OW 12
18838: ARRAY
18839: PPUSH
18840: LD_INT 1
18842: PPUSH
18843: CALL_OW 234
// end ;
18847: PPOPN 1
18849: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18850: LD_EXP 30
18854: IFFALSE 18862
18856: PUSH
18857: LD_EXP 78
18861: AND
18862: IFFALSE 18974
18864: GO 18866
18866: DISABLE
18867: LD_INT 0
18869: PPUSH
18870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18871: LD_ADDR_VAR 0 2
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_OWVAR 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: LD_INT 30
18893: PUSH
18894: LD_INT 27
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 30
18903: PUSH
18904: LD_INT 26
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 30
18913: PUSH
18914: LD_INT 28
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PPUSH
18931: CALL_OW 69
18935: ST_TO_ADDR
// if not tmp then
18936: LD_VAR 0 2
18940: NOT
18941: IFFALSE 18945
// exit ;
18943: GO 18974
// for i in tmp do
18945: LD_ADDR_VAR 0 1
18949: PUSH
18950: LD_VAR 0 2
18954: PUSH
18955: FOR_IN
18956: IFFALSE 18972
// SetLives ( i , 1 ) ;
18958: LD_VAR 0 1
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: CALL_OW 234
18970: GO 18955
18972: POP
18973: POP
// end ;
18974: PPOPN 2
18976: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18977: LD_EXP 30
18981: IFFALSE 18989
18983: PUSH
18984: LD_EXP 79
18988: AND
18989: IFFALSE 19276
18991: GO 18993
18993: DISABLE
18994: LD_INT 0
18996: PPUSH
18997: PPUSH
18998: PPUSH
// begin i := rand ( 1 , 7 ) ;
18999: LD_ADDR_VAR 0 1
19003: PUSH
19004: LD_INT 1
19006: PPUSH
19007: LD_INT 7
19009: PPUSH
19010: CALL_OW 12
19014: ST_TO_ADDR
// case i of 1 :
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 1
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19038
19028: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19029: LD_STRING earthquake(getX(game), 0, 32)
19031: PPUSH
19032: CALL_OW 559
19036: GO 19276
19038: LD_INT 2
19040: DOUBLE
19041: EQUAL
19042: IFTRUE 19046
19044: GO 19060
19046: POP
// begin ToLua ( displayStucuk(); ) ;
19047: LD_STRING displayStucuk();
19049: PPUSH
19050: CALL_OW 559
// ResetFog ;
19054: CALL_OW 335
// end ; 3 :
19058: GO 19276
19060: LD_INT 3
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19172
19068: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19069: LD_ADDR_VAR 0 2
19073: PUSH
19074: LD_INT 22
19076: PUSH
19077: LD_OWVAR 2
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 25
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 69
19104: ST_TO_ADDR
// if not tmp then
19105: LD_VAR 0 2
19109: NOT
19110: IFFALSE 19114
// exit ;
19112: GO 19276
// un := tmp [ rand ( 1 , tmp ) ] ;
19114: LD_ADDR_VAR 0 3
19118: PUSH
19119: LD_VAR 0 2
19123: PUSH
19124: LD_INT 1
19126: PPUSH
19127: LD_VAR 0 2
19131: PPUSH
19132: CALL_OW 12
19136: ARRAY
19137: ST_TO_ADDR
// if Crawls ( un ) then
19138: LD_VAR 0 3
19142: PPUSH
19143: CALL_OW 318
19147: IFFALSE 19158
// ComWalk ( un ) ;
19149: LD_VAR 0 3
19153: PPUSH
19154: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19158: LD_VAR 0 3
19162: PPUSH
19163: LD_INT 8
19165: PPUSH
19166: CALL_OW 336
// end ; 4 :
19170: GO 19276
19172: LD_INT 4
19174: DOUBLE
19175: EQUAL
19176: IFTRUE 19180
19178: GO 19254
19180: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19181: LD_ADDR_VAR 0 2
19185: PUSH
19186: LD_INT 22
19188: PUSH
19189: LD_OWVAR 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 30
19200: PUSH
19201: LD_INT 29
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: ST_TO_ADDR
// if not tmp then
19217: LD_VAR 0 2
19221: NOT
19222: IFFALSE 19226
// exit ;
19224: GO 19276
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19226: LD_VAR 0 2
19230: PUSH
19231: LD_INT 1
19233: ARRAY
19234: PPUSH
19235: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19239: LD_VAR 0 2
19243: PUSH
19244: LD_INT 1
19246: ARRAY
19247: PPUSH
19248: CALL_OW 65
// end ; 5 .. 7 :
19252: GO 19276
19254: LD_INT 5
19256: DOUBLE
19257: GREATEREQUAL
19258: IFFALSE 19266
19260: LD_INT 7
19262: DOUBLE
19263: LESSEQUAL
19264: IFTRUE 19268
19266: GO 19275
19268: POP
// StreamSibBomb ; end ;
19269: CALL 15457 0 0
19273: GO 19276
19275: POP
// end ;
19276: PPOPN 3
19278: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19279: LD_EXP 30
19283: IFFALSE 19291
19285: PUSH
19286: LD_EXP 80
19290: AND
19291: IFFALSE 19447
19293: GO 19295
19295: DISABLE
19296: LD_INT 0
19298: PPUSH
19299: PPUSH
19300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19301: LD_ADDR_VAR 0 2
19305: PUSH
19306: LD_INT 81
19308: PUSH
19309: LD_OWVAR 2
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: PUSH
19321: LD_INT 21
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 21
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PPUSH
19350: CALL_OW 69
19354: ST_TO_ADDR
// if not tmp then
19355: LD_VAR 0 2
19359: NOT
19360: IFFALSE 19364
// exit ;
19362: GO 19447
// p := 0 ;
19364: LD_ADDR_VAR 0 3
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19372: LD_INT 35
19374: PPUSH
19375: CALL_OW 67
// p := p + 1 ;
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_VAR 0 3
19388: PUSH
19389: LD_INT 1
19391: PLUS
19392: ST_TO_ADDR
// for i in tmp do
19393: LD_ADDR_VAR 0 1
19397: PUSH
19398: LD_VAR 0 2
19402: PUSH
19403: FOR_IN
19404: IFFALSE 19435
// if GetLives ( i ) < 1000 then
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 256
19415: PUSH
19416: LD_INT 1000
19418: LESS
19419: IFFALSE 19433
// SetLives ( i , 1000 ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: LD_INT 1000
19428: PPUSH
19429: CALL_OW 234
19433: GO 19403
19435: POP
19436: POP
// until p > 20 ;
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 20
19444: GREATER
19445: IFFALSE 19372
// end ;
19447: PPOPN 3
19449: END
// every 0 0$1 trigger StreamModeActive and sTime do
19450: LD_EXP 30
19454: IFFALSE 19462
19456: PUSH
19457: LD_EXP 81
19461: AND
19462: IFFALSE 19497
19464: GO 19466
19466: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19467: LD_INT 28
19469: PPUSH
19470: LD_OWVAR 2
19474: PPUSH
19475: LD_INT 2
19477: PPUSH
19478: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19482: LD_INT 30
19484: PPUSH
19485: LD_OWVAR 2
19489: PPUSH
19490: LD_INT 2
19492: PPUSH
19493: CALL_OW 322
// end ;
19497: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19498: LD_EXP 30
19502: IFFALSE 19510
19504: PUSH
19505: LD_EXP 82
19509: AND
19510: IFFALSE 19631
19512: GO 19514
19514: DISABLE
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19519: LD_ADDR_VAR 0 2
19523: PUSH
19524: LD_INT 22
19526: PUSH
19527: LD_OWVAR 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 21
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 3
19548: PUSH
19549: LD_INT 23
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: PPUSH
19568: CALL_OW 69
19572: ST_TO_ADDR
// if not tmp then
19573: LD_VAR 0 2
19577: NOT
19578: IFFALSE 19582
// exit ;
19580: GO 19631
// for i in tmp do
19582: LD_ADDR_VAR 0 1
19586: PUSH
19587: LD_VAR 0 2
19591: PUSH
19592: FOR_IN
19593: IFFALSE 19629
// begin if Crawls ( i ) then
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 318
19604: IFFALSE 19615
// ComWalk ( i ) ;
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 138
// SetClass ( i , 2 ) ;
19615: LD_VAR 0 1
19619: PPUSH
19620: LD_INT 2
19622: PPUSH
19623: CALL_OW 336
// end ;
19627: GO 19592
19629: POP
19630: POP
// end ;
19631: PPOPN 2
19633: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19634: LD_EXP 30
19638: IFFALSE 19646
19640: PUSH
19641: LD_EXP 83
19645: AND
19646: IFFALSE 19936
19648: GO 19650
19650: DISABLE
19651: LD_INT 0
19653: PPUSH
19654: PPUSH
19655: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19656: LD_OWVAR 2
19660: PPUSH
19661: LD_INT 9
19663: PPUSH
19664: LD_INT 1
19666: PPUSH
19667: LD_INT 1
19669: PPUSH
19670: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19674: LD_INT 9
19676: PPUSH
19677: LD_OWVAR 2
19681: PPUSH
19682: CALL_OW 343
// uc_side := 9 ;
19686: LD_ADDR_OWVAR 20
19690: PUSH
19691: LD_INT 9
19693: ST_TO_ADDR
// uc_nation := 2 ;
19694: LD_ADDR_OWVAR 21
19698: PUSH
19699: LD_INT 2
19701: ST_TO_ADDR
// hc_name := Dark Warrior ;
19702: LD_ADDR_OWVAR 26
19706: PUSH
19707: LD_STRING Dark Warrior
19709: ST_TO_ADDR
// hc_gallery :=  ;
19710: LD_ADDR_OWVAR 33
19714: PUSH
19715: LD_STRING 
19717: ST_TO_ADDR
// hc_noskilllimit := true ;
19718: LD_ADDR_OWVAR 76
19722: PUSH
19723: LD_INT 1
19725: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19726: LD_ADDR_OWVAR 31
19730: PUSH
19731: LD_INT 30
19733: PUSH
19734: LD_INT 30
19736: PUSH
19737: LD_INT 30
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: ST_TO_ADDR
// un := CreateHuman ;
19749: LD_ADDR_VAR 0 3
19753: PUSH
19754: CALL_OW 44
19758: ST_TO_ADDR
// hc_noskilllimit := false ;
19759: LD_ADDR_OWVAR 76
19763: PUSH
19764: LD_INT 0
19766: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19767: LD_VAR 0 3
19771: PPUSH
19772: LD_INT 1
19774: PPUSH
19775: CALL_OW 51
// ToLua ( playRanger() ) ;
19779: LD_STRING playRanger()
19781: PPUSH
19782: CALL_OW 559
// p := 0 ;
19786: LD_ADDR_VAR 0 2
19790: PUSH
19791: LD_INT 0
19793: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19794: LD_INT 35
19796: PPUSH
19797: CALL_OW 67
// p := p + 1 ;
19801: LD_ADDR_VAR 0 2
19805: PUSH
19806: LD_VAR 0 2
19810: PUSH
19811: LD_INT 1
19813: PLUS
19814: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19815: LD_VAR 0 3
19819: PPUSH
19820: CALL_OW 256
19824: PUSH
19825: LD_INT 1000
19827: LESS
19828: IFFALSE 19842
// SetLives ( un , 1000 ) ;
19830: LD_VAR 0 3
19834: PPUSH
19835: LD_INT 1000
19837: PPUSH
19838: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19842: LD_VAR 0 3
19846: PPUSH
19847: LD_INT 81
19849: PUSH
19850: LD_OWVAR 2
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 91
19861: PUSH
19862: LD_VAR 0 3
19866: PUSH
19867: LD_INT 30
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: LIST
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PPUSH
19879: CALL_OW 69
19883: PPUSH
19884: LD_VAR 0 3
19888: PPUSH
19889: CALL_OW 74
19893: PPUSH
19894: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19898: LD_VAR 0 2
19902: PUSH
19903: LD_INT 80
19905: GREATER
19906: IFTRUE 19919
19908: PUSH
19909: LD_VAR 0 3
19913: PPUSH
19914: CALL_OW 301
19918: OR
19919: IFFALSE 19794
// if un then
19921: LD_VAR 0 3
19925: IFFALSE 19936
// RemoveUnit ( un ) ;
19927: LD_VAR 0 3
19931: PPUSH
19932: CALL_OW 64
// end ;
19936: PPOPN 3
19938: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19939: LD_EXP 84
19943: IFFALSE 20059
19945: GO 19947
19947: DISABLE
19948: LD_INT 0
19950: PPUSH
19951: PPUSH
19952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19953: LD_ADDR_VAR 0 2
19957: PUSH
19958: LD_INT 81
19960: PUSH
19961: LD_OWVAR 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 21
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PPUSH
19984: CALL_OW 69
19988: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19989: LD_STRING playComputer()
19991: PPUSH
19992: CALL_OW 559
// if not tmp then
19996: LD_VAR 0 2
20000: NOT
20001: IFFALSE 20005
// exit ;
20003: GO 20059
// for i in tmp do
20005: LD_ADDR_VAR 0 1
20009: PUSH
20010: LD_VAR 0 2
20014: PUSH
20015: FOR_IN
20016: IFFALSE 20057
// for j := 1 to 4 do
20018: LD_ADDR_VAR 0 3
20022: PUSH
20023: DOUBLE
20024: LD_INT 1
20026: DEC
20027: ST_TO_ADDR
20028: LD_INT 4
20030: PUSH
20031: FOR_TO
20032: IFFALSE 20053
// SetSkill ( i , j , 10 ) ;
20034: LD_VAR 0 1
20038: PPUSH
20039: LD_VAR 0 3
20043: PPUSH
20044: LD_INT 10
20046: PPUSH
20047: CALL_OW 237
20051: GO 20031
20053: POP
20054: POP
20055: GO 20015
20057: POP
20058: POP
// end ;
20059: PPOPN 3
20061: END
// every 0 0$1 trigger s30 do var i , tmp ;
20062: LD_EXP 85
20066: IFFALSE 20135
20068: GO 20070
20070: DISABLE
20071: LD_INT 0
20073: PPUSH
20074: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20075: LD_ADDR_VAR 0 2
20079: PUSH
20080: LD_INT 22
20082: PUSH
20083: LD_OWVAR 2
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PPUSH
20092: CALL_OW 69
20096: ST_TO_ADDR
// if not tmp then
20097: LD_VAR 0 2
20101: NOT
20102: IFFALSE 20106
// exit ;
20104: GO 20135
// for i in tmp do
20106: LD_ADDR_VAR 0 1
20110: PUSH
20111: LD_VAR 0 2
20115: PUSH
20116: FOR_IN
20117: IFFALSE 20133
// SetLives ( i , 300 ) ;
20119: LD_VAR 0 1
20123: PPUSH
20124: LD_INT 300
20126: PPUSH
20127: CALL_OW 234
20131: GO 20116
20133: POP
20134: POP
// end ;
20135: PPOPN 2
20137: END
// every 0 0$1 trigger s60 do var i , tmp ;
20138: LD_EXP 86
20142: IFFALSE 20211
20144: GO 20146
20146: DISABLE
20147: LD_INT 0
20149: PPUSH
20150: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: LD_INT 22
20158: PUSH
20159: LD_OWVAR 2
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PPUSH
20168: CALL_OW 69
20172: ST_TO_ADDR
// if not tmp then
20173: LD_VAR 0 2
20177: NOT
20178: IFFALSE 20182
// exit ;
20180: GO 20211
// for i in tmp do
20182: LD_ADDR_VAR 0 1
20186: PUSH
20187: LD_VAR 0 2
20191: PUSH
20192: FOR_IN
20193: IFFALSE 20209
// SetLives ( i , 600 ) ;
20195: LD_VAR 0 1
20199: PPUSH
20200: LD_INT 600
20202: PPUSH
20203: CALL_OW 234
20207: GO 20192
20209: POP
20210: POP
// end ;
20211: PPOPN 2
20213: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20214: LD_INT 0
20216: PPUSH
// case cmd of 301 :
20217: LD_VAR 0 1
20221: PUSH
20222: LD_INT 301
20224: DOUBLE
20225: EQUAL
20226: IFTRUE 20230
20228: GO 20262
20230: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20231: LD_VAR 0 6
20235: PPUSH
20236: LD_VAR 0 7
20240: PPUSH
20241: LD_VAR 0 8
20245: PPUSH
20246: LD_VAR 0 4
20250: PPUSH
20251: LD_VAR 0 5
20255: PPUSH
20256: CALL 21475 0 5
20260: GO 20383
20262: LD_INT 302
20264: DOUBLE
20265: EQUAL
20266: IFTRUE 20270
20268: GO 20307
20270: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20271: LD_VAR 0 6
20275: PPUSH
20276: LD_VAR 0 7
20280: PPUSH
20281: LD_VAR 0 8
20285: PPUSH
20286: LD_VAR 0 9
20290: PPUSH
20291: LD_VAR 0 4
20295: PPUSH
20296: LD_VAR 0 5
20300: PPUSH
20301: CALL 21566 0 6
20305: GO 20383
20307: LD_INT 303
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20352
20315: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20316: LD_VAR 0 6
20320: PPUSH
20321: LD_VAR 0 7
20325: PPUSH
20326: LD_VAR 0 8
20330: PPUSH
20331: LD_VAR 0 9
20335: PPUSH
20336: LD_VAR 0 4
20340: PPUSH
20341: LD_VAR 0 5
20345: PPUSH
20346: CALL 20388 0 6
20350: GO 20383
20352: LD_INT 304
20354: DOUBLE
20355: EQUAL
20356: IFTRUE 20360
20358: GO 20382
20360: POP
// hHackTeleport ( unit , x , y ) ; end ;
20361: LD_VAR 0 2
20365: PPUSH
20366: LD_VAR 0 4
20370: PPUSH
20371: LD_VAR 0 5
20375: PPUSH
20376: CALL 22159 0 3
20380: GO 20383
20382: POP
// end ;
20383: LD_VAR 0 12
20387: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20388: LD_INT 0
20390: PPUSH
20391: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20392: LD_VAR 0 1
20396: PUSH
20397: LD_INT 1
20399: LESS
20400: IFTRUE 20412
20402: PUSH
20403: LD_VAR 0 1
20407: PUSH
20408: LD_INT 3
20410: GREATER
20411: OR
20412: IFTRUE 20430
20414: PUSH
20415: LD_VAR 0 5
20419: PPUSH
20420: LD_VAR 0 6
20424: PPUSH
20425: CALL_OW 428
20429: OR
20430: IFFALSE 20434
// exit ;
20432: GO 21162
// uc_side := your_side ;
20434: LD_ADDR_OWVAR 20
20438: PUSH
20439: LD_OWVAR 2
20443: ST_TO_ADDR
// uc_nation := nation ;
20444: LD_ADDR_OWVAR 21
20448: PUSH
20449: LD_VAR 0 1
20453: ST_TO_ADDR
// bc_level = 1 ;
20454: LD_ADDR_OWVAR 43
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// case btype of 1 :
20462: LD_VAR 0 2
20466: PUSH
20467: LD_INT 1
20469: DOUBLE
20470: EQUAL
20471: IFTRUE 20475
20473: GO 20486
20475: POP
// bc_type := b_depot ; 2 :
20476: LD_ADDR_OWVAR 42
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
20484: GO 21106
20486: LD_INT 2
20488: DOUBLE
20489: EQUAL
20490: IFTRUE 20494
20492: GO 20505
20494: POP
// bc_type := b_warehouse ; 3 :
20495: LD_ADDR_OWVAR 42
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
20503: GO 21106
20505: LD_INT 3
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20524
20513: POP
// bc_type := b_lab ; 4 .. 9 :
20514: LD_ADDR_OWVAR 42
20518: PUSH
20519: LD_INT 6
20521: ST_TO_ADDR
20522: GO 21106
20524: LD_INT 4
20526: DOUBLE
20527: GREATEREQUAL
20528: IFFALSE 20536
20530: LD_INT 9
20532: DOUBLE
20533: LESSEQUAL
20534: IFTRUE 20538
20536: GO 20598
20538: POP
// begin bc_type := b_lab_half ;
20539: LD_ADDR_OWVAR 42
20543: PUSH
20544: LD_INT 7
20546: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20547: LD_ADDR_OWVAR 44
20551: PUSH
20552: LD_INT 10
20554: PUSH
20555: LD_INT 11
20557: PUSH
20558: LD_INT 12
20560: PUSH
20561: LD_INT 15
20563: PUSH
20564: LD_INT 14
20566: PUSH
20567: LD_INT 13
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: PUSH
20578: LD_VAR 0 2
20582: PUSH
20583: LD_INT 3
20585: MINUS
20586: ARRAY
20587: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20588: LD_ADDR_OWVAR 45
20592: PUSH
20593: LD_INT 9
20595: ST_TO_ADDR
// end ; 10 .. 13 :
20596: GO 21106
20598: LD_INT 10
20600: DOUBLE
20601: GREATEREQUAL
20602: IFFALSE 20610
20604: LD_INT 13
20606: DOUBLE
20607: LESSEQUAL
20608: IFTRUE 20612
20610: GO 20689
20612: POP
// begin bc_type := b_lab_full ;
20613: LD_ADDR_OWVAR 42
20617: PUSH
20618: LD_INT 8
20620: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20621: LD_ADDR_OWVAR 44
20625: PUSH
20626: LD_INT 10
20628: PUSH
20629: LD_INT 12
20631: PUSH
20632: LD_INT 14
20634: PUSH
20635: LD_INT 13
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: LD_VAR 0 2
20648: PUSH
20649: LD_INT 9
20651: MINUS
20652: ARRAY
20653: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20654: LD_ADDR_OWVAR 45
20658: PUSH
20659: LD_INT 11
20661: PUSH
20662: LD_INT 15
20664: PUSH
20665: LD_INT 12
20667: PUSH
20668: LD_INT 15
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: PUSH
20677: LD_VAR 0 2
20681: PUSH
20682: LD_INT 9
20684: MINUS
20685: ARRAY
20686: ST_TO_ADDR
// end ; 14 :
20687: GO 21106
20689: LD_INT 14
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20708
20697: POP
// bc_type := b_workshop ; 15 :
20698: LD_ADDR_OWVAR 42
20702: PUSH
20703: LD_INT 2
20705: ST_TO_ADDR
20706: GO 21106
20708: LD_INT 15
20710: DOUBLE
20711: EQUAL
20712: IFTRUE 20716
20714: GO 20727
20716: POP
// bc_type := b_factory ; 16 :
20717: LD_ADDR_OWVAR 42
20721: PUSH
20722: LD_INT 3
20724: ST_TO_ADDR
20725: GO 21106
20727: LD_INT 16
20729: DOUBLE
20730: EQUAL
20731: IFTRUE 20735
20733: GO 20746
20735: POP
// bc_type := b_ext_gun ; 17 :
20736: LD_ADDR_OWVAR 42
20740: PUSH
20741: LD_INT 17
20743: ST_TO_ADDR
20744: GO 21106
20746: LD_INT 17
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20782
20754: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20755: LD_ADDR_OWVAR 42
20759: PUSH
20760: LD_INT 19
20762: PUSH
20763: LD_INT 23
20765: PUSH
20766: LD_INT 19
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: PUSH
20774: LD_VAR 0 1
20778: ARRAY
20779: ST_TO_ADDR
20780: GO 21106
20782: LD_INT 18
20784: DOUBLE
20785: EQUAL
20786: IFTRUE 20790
20788: GO 20801
20790: POP
// bc_type := b_ext_radar ; 19 :
20791: LD_ADDR_OWVAR 42
20795: PUSH
20796: LD_INT 20
20798: ST_TO_ADDR
20799: GO 21106
20801: LD_INT 19
20803: DOUBLE
20804: EQUAL
20805: IFTRUE 20809
20807: GO 20820
20809: POP
// bc_type := b_ext_radio ; 20 :
20810: LD_ADDR_OWVAR 42
20814: PUSH
20815: LD_INT 22
20817: ST_TO_ADDR
20818: GO 21106
20820: LD_INT 20
20822: DOUBLE
20823: EQUAL
20824: IFTRUE 20828
20826: GO 20839
20828: POP
// bc_type := b_ext_siberium ; 21 :
20829: LD_ADDR_OWVAR 42
20833: PUSH
20834: LD_INT 21
20836: ST_TO_ADDR
20837: GO 21106
20839: LD_INT 21
20841: DOUBLE
20842: EQUAL
20843: IFTRUE 20847
20845: GO 20858
20847: POP
// bc_type := b_ext_computer ; 22 :
20848: LD_ADDR_OWVAR 42
20852: PUSH
20853: LD_INT 24
20855: ST_TO_ADDR
20856: GO 21106
20858: LD_INT 22
20860: DOUBLE
20861: EQUAL
20862: IFTRUE 20866
20864: GO 20877
20866: POP
// bc_type := b_ext_track ; 23 :
20867: LD_ADDR_OWVAR 42
20871: PUSH
20872: LD_INT 16
20874: ST_TO_ADDR
20875: GO 21106
20877: LD_INT 23
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20896
20885: POP
// bc_type := b_ext_laser ; 24 :
20886: LD_ADDR_OWVAR 42
20890: PUSH
20891: LD_INT 25
20893: ST_TO_ADDR
20894: GO 21106
20896: LD_INT 24
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20915
20904: POP
// bc_type := b_control_tower ; 25 :
20905: LD_ADDR_OWVAR 42
20909: PUSH
20910: LD_INT 36
20912: ST_TO_ADDR
20913: GO 21106
20915: LD_INT 25
20917: DOUBLE
20918: EQUAL
20919: IFTRUE 20923
20921: GO 20934
20923: POP
// bc_type := b_breastwork ; 26 :
20924: LD_ADDR_OWVAR 42
20928: PUSH
20929: LD_INT 31
20931: ST_TO_ADDR
20932: GO 21106
20934: LD_INT 26
20936: DOUBLE
20937: EQUAL
20938: IFTRUE 20942
20940: GO 20953
20942: POP
// bc_type := b_bunker ; 27 :
20943: LD_ADDR_OWVAR 42
20947: PUSH
20948: LD_INT 32
20950: ST_TO_ADDR
20951: GO 21106
20953: LD_INT 27
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20972
20961: POP
// bc_type := b_turret ; 28 :
20962: LD_ADDR_OWVAR 42
20966: PUSH
20967: LD_INT 33
20969: ST_TO_ADDR
20970: GO 21106
20972: LD_INT 28
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20991
20980: POP
// bc_type := b_armoury ; 29 :
20981: LD_ADDR_OWVAR 42
20985: PUSH
20986: LD_INT 4
20988: ST_TO_ADDR
20989: GO 21106
20991: LD_INT 29
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21010
20999: POP
// bc_type := b_barracks ; 30 :
21000: LD_ADDR_OWVAR 42
21004: PUSH
21005: LD_INT 5
21007: ST_TO_ADDR
21008: GO 21106
21010: LD_INT 30
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21029
21018: POP
// bc_type := b_solar_power ; 31 :
21019: LD_ADDR_OWVAR 42
21023: PUSH
21024: LD_INT 27
21026: ST_TO_ADDR
21027: GO 21106
21029: LD_INT 31
21031: DOUBLE
21032: EQUAL
21033: IFTRUE 21037
21035: GO 21048
21037: POP
// bc_type := b_oil_power ; 32 :
21038: LD_ADDR_OWVAR 42
21042: PUSH
21043: LD_INT 26
21045: ST_TO_ADDR
21046: GO 21106
21048: LD_INT 32
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21067
21056: POP
// bc_type := b_siberite_power ; 33 :
21057: LD_ADDR_OWVAR 42
21061: PUSH
21062: LD_INT 28
21064: ST_TO_ADDR
21065: GO 21106
21067: LD_INT 33
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21086
21075: POP
// bc_type := b_oil_mine ; 34 :
21076: LD_ADDR_OWVAR 42
21080: PUSH
21081: LD_INT 29
21083: ST_TO_ADDR
21084: GO 21106
21086: LD_INT 34
21088: DOUBLE
21089: EQUAL
21090: IFTRUE 21094
21092: GO 21105
21094: POP
// bc_type := b_siberite_mine ; end ;
21095: LD_ADDR_OWVAR 42
21099: PUSH
21100: LD_INT 30
21102: ST_TO_ADDR
21103: GO 21106
21105: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21106: LD_ADDR_VAR 0 8
21110: PUSH
21111: LD_VAR 0 5
21115: PPUSH
21116: LD_VAR 0 6
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: CALL_OW 47
21130: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21131: LD_OWVAR 42
21135: PUSH
21136: LD_INT 32
21138: PUSH
21139: LD_INT 33
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: IN
21146: IFFALSE 21162
// PlaceWeaponTurret ( b , weapon ) ;
21148: LD_VAR 0 8
21152: PPUSH
21153: LD_VAR 0 4
21157: PPUSH
21158: CALL_OW 431
// end ;
21162: LD_VAR 0 7
21166: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21167: LD_INT 0
21169: PPUSH
21170: PPUSH
21171: PPUSH
21172: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21173: LD_ADDR_VAR 0 4
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_OWVAR 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 30
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 30
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PPUSH
21222: CALL_OW 69
21226: ST_TO_ADDR
// if not tmp then
21227: LD_VAR 0 4
21231: NOT
21232: IFFALSE 21236
// exit ;
21234: GO 21295
// for i in tmp do
21236: LD_ADDR_VAR 0 2
21240: PUSH
21241: LD_VAR 0 4
21245: PUSH
21246: FOR_IN
21247: IFFALSE 21293
// for j = 1 to 3 do
21249: LD_ADDR_VAR 0 3
21253: PUSH
21254: DOUBLE
21255: LD_INT 1
21257: DEC
21258: ST_TO_ADDR
21259: LD_INT 3
21261: PUSH
21262: FOR_TO
21263: IFFALSE 21289
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21265: LD_VAR 0 2
21269: PPUSH
21270: CALL_OW 274
21274: PPUSH
21275: LD_VAR 0 3
21279: PPUSH
21280: LD_INT 99999
21282: PPUSH
21283: CALL_OW 277
21287: GO 21262
21289: POP
21290: POP
21291: GO 21246
21293: POP
21294: POP
// end ;
21295: LD_VAR 0 1
21299: RET
// export function hHackSetLevel10 ; var i , j ; begin
21300: LD_INT 0
21302: PPUSH
21303: PPUSH
21304: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21305: LD_ADDR_VAR 0 2
21309: PUSH
21310: LD_INT 21
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL_OW 69
21324: PUSH
21325: FOR_IN
21326: IFFALSE 21378
// if IsSelected ( i ) then
21328: LD_VAR 0 2
21332: PPUSH
21333: CALL_OW 306
21337: IFFALSE 21376
// begin for j := 1 to 4 do
21339: LD_ADDR_VAR 0 3
21343: PUSH
21344: DOUBLE
21345: LD_INT 1
21347: DEC
21348: ST_TO_ADDR
21349: LD_INT 4
21351: PUSH
21352: FOR_TO
21353: IFFALSE 21374
// SetSkill ( i , j , 10 ) ;
21355: LD_VAR 0 2
21359: PPUSH
21360: LD_VAR 0 3
21364: PPUSH
21365: LD_INT 10
21367: PPUSH
21368: CALL_OW 237
21372: GO 21352
21374: POP
21375: POP
// end ;
21376: GO 21325
21378: POP
21379: POP
// end ;
21380: LD_VAR 0 1
21384: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21385: LD_INT 0
21387: PPUSH
21388: PPUSH
21389: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21390: LD_ADDR_VAR 0 2
21394: PUSH
21395: LD_INT 22
21397: PUSH
21398: LD_OWVAR 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 21
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PPUSH
21421: CALL_OW 69
21425: PUSH
21426: FOR_IN
21427: IFFALSE 21468
// begin for j := 1 to 4 do
21429: LD_ADDR_VAR 0 3
21433: PUSH
21434: DOUBLE
21435: LD_INT 1
21437: DEC
21438: ST_TO_ADDR
21439: LD_INT 4
21441: PUSH
21442: FOR_TO
21443: IFFALSE 21464
// SetSkill ( i , j , 10 ) ;
21445: LD_VAR 0 2
21449: PPUSH
21450: LD_VAR 0 3
21454: PPUSH
21455: LD_INT 10
21457: PPUSH
21458: CALL_OW 237
21462: GO 21442
21464: POP
21465: POP
// end ;
21466: GO 21426
21468: POP
21469: POP
// end ;
21470: LD_VAR 0 1
21474: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21475: LD_INT 0
21477: PPUSH
// uc_side := your_side ;
21478: LD_ADDR_OWVAR 20
21482: PUSH
21483: LD_OWVAR 2
21487: ST_TO_ADDR
// uc_nation := nation ;
21488: LD_ADDR_OWVAR 21
21492: PUSH
21493: LD_VAR 0 1
21497: ST_TO_ADDR
// InitHc ;
21498: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21502: LD_INT 0
21504: PPUSH
21505: LD_VAR 0 2
21509: PPUSH
21510: LD_VAR 0 3
21514: PPUSH
21515: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21519: LD_VAR 0 4
21523: PPUSH
21524: LD_VAR 0 5
21528: PPUSH
21529: CALL_OW 428
21533: PUSH
21534: LD_INT 0
21536: EQUAL
21537: IFFALSE 21561
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21539: CALL_OW 44
21543: PPUSH
21544: LD_VAR 0 4
21548: PPUSH
21549: LD_VAR 0 5
21553: PPUSH
21554: LD_INT 1
21556: PPUSH
21557: CALL_OW 48
// end ;
21561: LD_VAR 0 6
21565: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21566: LD_INT 0
21568: PPUSH
21569: PPUSH
// uc_side := your_side ;
21570: LD_ADDR_OWVAR 20
21574: PUSH
21575: LD_OWVAR 2
21579: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21580: LD_VAR 0 1
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: LD_INT 3
21593: PUSH
21594: LD_INT 4
21596: PUSH
21597: LD_INT 5
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: IN
21607: IFFALSE 21619
// uc_nation := nation_american else
21609: LD_ADDR_OWVAR 21
21613: PUSH
21614: LD_INT 1
21616: ST_TO_ADDR
21617: GO 21662
// if chassis in [ 11 , 12 , 13 , 14 ] then
21619: LD_VAR 0 1
21623: PUSH
21624: LD_INT 11
21626: PUSH
21627: LD_INT 12
21629: PUSH
21630: LD_INT 13
21632: PUSH
21633: LD_INT 14
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: IN
21642: IFFALSE 21654
// uc_nation := nation_arabian else
21644: LD_ADDR_OWVAR 21
21648: PUSH
21649: LD_INT 2
21651: ST_TO_ADDR
21652: GO 21662
// uc_nation := nation_russian ;
21654: LD_ADDR_OWVAR 21
21658: PUSH
21659: LD_INT 3
21661: ST_TO_ADDR
// vc_chassis := chassis ;
21662: LD_ADDR_OWVAR 37
21666: PUSH
21667: LD_VAR 0 1
21671: ST_TO_ADDR
// vc_engine := engine ;
21672: LD_ADDR_OWVAR 39
21676: PUSH
21677: LD_VAR 0 2
21681: ST_TO_ADDR
// vc_control := control ;
21682: LD_ADDR_OWVAR 38
21686: PUSH
21687: LD_VAR 0 3
21691: ST_TO_ADDR
// vc_weapon := weapon ;
21692: LD_ADDR_OWVAR 40
21696: PUSH
21697: LD_VAR 0 4
21701: ST_TO_ADDR
// un := CreateVehicle ;
21702: LD_ADDR_VAR 0 8
21706: PUSH
21707: CALL_OW 45
21711: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21712: LD_VAR 0 8
21716: PPUSH
21717: LD_INT 0
21719: PPUSH
21720: LD_INT 5
21722: PPUSH
21723: CALL_OW 12
21727: PPUSH
21728: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21732: LD_VAR 0 8
21736: PPUSH
21737: LD_VAR 0 5
21741: PPUSH
21742: LD_VAR 0 6
21746: PPUSH
21747: LD_INT 1
21749: PPUSH
21750: CALL_OW 48
// end ;
21754: LD_VAR 0 7
21758: RET
// export hInvincible ; every 1 do
21759: GO 21761
21761: DISABLE
// hInvincible := [ ] ;
21762: LD_ADDR_EXP 87
21766: PUSH
21767: EMPTY
21768: ST_TO_ADDR
21769: END
// every 10 do var i ;
21770: GO 21772
21772: DISABLE
21773: LD_INT 0
21775: PPUSH
// begin enable ;
21776: ENABLE
// if not hInvincible then
21777: LD_EXP 87
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21830
// for i in hInvincible do
21786: LD_ADDR_VAR 0 1
21790: PUSH
21791: LD_EXP 87
21795: PUSH
21796: FOR_IN
21797: IFFALSE 21828
// if GetLives ( i ) < 1000 then
21799: LD_VAR 0 1
21803: PPUSH
21804: CALL_OW 256
21808: PUSH
21809: LD_INT 1000
21811: LESS
21812: IFFALSE 21826
// SetLives ( i , 1000 ) ;
21814: LD_VAR 0 1
21818: PPUSH
21819: LD_INT 1000
21821: PPUSH
21822: CALL_OW 234
21826: GO 21796
21828: POP
21829: POP
// end ;
21830: PPOPN 1
21832: END
// export function hHackInvincible ; var i ; begin
21833: LD_INT 0
21835: PPUSH
21836: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21837: LD_ADDR_VAR 0 2
21841: PUSH
21842: LD_INT 2
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 21
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: PPUSH
21870: CALL_OW 69
21874: PUSH
21875: FOR_IN
21876: IFFALSE 21937
// if IsSelected ( i ) then
21878: LD_VAR 0 2
21882: PPUSH
21883: CALL_OW 306
21887: IFFALSE 21935
// begin if i in hInvincible then
21889: LD_VAR 0 2
21893: PUSH
21894: LD_EXP 87
21898: IN
21899: IFFALSE 21919
// hInvincible := hInvincible diff i else
21901: LD_ADDR_EXP 87
21905: PUSH
21906: LD_EXP 87
21910: PUSH
21911: LD_VAR 0 2
21915: DIFF
21916: ST_TO_ADDR
21917: GO 21935
// hInvincible := hInvincible union i ;
21919: LD_ADDR_EXP 87
21923: PUSH
21924: LD_EXP 87
21928: PUSH
21929: LD_VAR 0 2
21933: UNION
21934: ST_TO_ADDR
// end ;
21935: GO 21875
21937: POP
21938: POP
// end ;
21939: LD_VAR 0 1
21943: RET
// export function hHackInvisible ; var i , j ; begin
21944: LD_INT 0
21946: PPUSH
21947: PPUSH
21948: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21949: LD_ADDR_VAR 0 2
21953: PUSH
21954: LD_INT 21
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PPUSH
21964: CALL_OW 69
21968: PUSH
21969: FOR_IN
21970: IFFALSE 21994
// if IsSelected ( i ) then
21972: LD_VAR 0 2
21976: PPUSH
21977: CALL_OW 306
21981: IFFALSE 21992
// ComForceInvisible ( i ) ;
21983: LD_VAR 0 2
21987: PPUSH
21988: CALL_OW 496
21992: GO 21969
21994: POP
21995: POP
// end ;
21996: LD_VAR 0 1
22000: RET
// export function hHackChangeYourSide ; begin
22001: LD_INT 0
22003: PPUSH
// if your_side = 8 then
22004: LD_OWVAR 2
22008: PUSH
22009: LD_INT 8
22011: EQUAL
22012: IFFALSE 22024
// your_side := 0 else
22014: LD_ADDR_OWVAR 2
22018: PUSH
22019: LD_INT 0
22021: ST_TO_ADDR
22022: GO 22038
// your_side := your_side + 1 ;
22024: LD_ADDR_OWVAR 2
22028: PUSH
22029: LD_OWVAR 2
22033: PUSH
22034: LD_INT 1
22036: PLUS
22037: ST_TO_ADDR
// end ;
22038: LD_VAR 0 1
22042: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22043: LD_INT 0
22045: PPUSH
22046: PPUSH
22047: PPUSH
// for i in all_units do
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: LD_OWVAR 3
22057: PUSH
22058: FOR_IN
22059: IFFALSE 22137
// if IsSelected ( i ) then
22061: LD_VAR 0 2
22065: PPUSH
22066: CALL_OW 306
22070: IFFALSE 22135
// begin j := GetSide ( i ) ;
22072: LD_ADDR_VAR 0 3
22076: PUSH
22077: LD_VAR 0 2
22081: PPUSH
22082: CALL_OW 255
22086: ST_TO_ADDR
// if j = 8 then
22087: LD_VAR 0 3
22091: PUSH
22092: LD_INT 8
22094: EQUAL
22095: IFFALSE 22107
// j := 0 else
22097: LD_ADDR_VAR 0 3
22101: PUSH
22102: LD_INT 0
22104: ST_TO_ADDR
22105: GO 22121
// j := j + 1 ;
22107: LD_ADDR_VAR 0 3
22111: PUSH
22112: LD_VAR 0 3
22116: PUSH
22117: LD_INT 1
22119: PLUS
22120: ST_TO_ADDR
// SetSide ( i , j ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_VAR 0 3
22130: PPUSH
22131: CALL_OW 235
// end ;
22135: GO 22058
22137: POP
22138: POP
// end ;
22139: LD_VAR 0 1
22143: RET
// export function hHackFog ; begin
22144: LD_INT 0
22146: PPUSH
// FogOff ( true ) ;
22147: LD_INT 1
22149: PPUSH
22150: CALL_OW 344
// end ;
22154: LD_VAR 0 1
22158: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22159: LD_INT 0
22161: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22162: LD_VAR 0 1
22166: PPUSH
22167: LD_VAR 0 2
22171: PPUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: LD_INT 1
22179: PPUSH
22180: LD_INT 1
22182: PPUSH
22183: CALL_OW 483
// CenterOnXY ( x , y ) ;
22187: LD_VAR 0 2
22191: PPUSH
22192: LD_VAR 0 3
22196: PPUSH
22197: CALL_OW 84
// end ;
22201: LD_VAR 0 4
22205: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22206: LD_INT 0
22208: PPUSH
22209: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22210: LD_VAR 0 1
22214: NOT
22215: IFTRUE 22234
22217: PUSH
22218: LD_VAR 0 2
22222: PPUSH
22223: LD_VAR 0 3
22227: PPUSH
22228: CALL_OW 488
22232: NOT
22233: OR
22234: IFTRUE 22269
22236: PUSH
22237: LD_VAR 0 1
22241: PPUSH
22242: CALL_OW 266
22246: PUSH
22247: LD_INT 3
22249: NONEQUAL
22250: IFFALSE 22268
22252: PUSH
22253: LD_VAR 0 1
22257: PPUSH
22258: CALL_OW 247
22262: PUSH
22263: LD_INT 1
22265: EQUAL
22266: NOT
22267: AND
22268: OR
22269: IFFALSE 22273
// exit ;
22271: GO 22555
// if GetType ( factory ) = unit_human then
22273: LD_VAR 0 1
22277: PPUSH
22278: CALL_OW 247
22282: PUSH
22283: LD_INT 1
22285: EQUAL
22286: IFFALSE 22303
// factory := IsInUnit ( factory ) ;
22288: LD_ADDR_VAR 0 1
22292: PUSH
22293: LD_VAR 0 1
22297: PPUSH
22298: CALL_OW 310
22302: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 266
22312: PUSH
22313: LD_INT 3
22315: NONEQUAL
22316: IFFALSE 22320
// exit ;
22318: GO 22555
// for i := 1 to Count ( factoryWaypoints ) do
22320: LD_ADDR_VAR 0 5
22324: PUSH
22325: DOUBLE
22326: LD_INT 1
22328: DEC
22329: ST_TO_ADDR
22330: LD_EXP 88
22334: PPUSH
22335: CALL 32359 0 1
22339: PUSH
22340: FOR_TO
22341: IFFALSE 22503
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22343: LD_VAR 0 2
22347: PPUSH
22348: LD_VAR 0 3
22352: PPUSH
22353: CALL_OW 428
22357: PUSH
22358: LD_EXP 88
22362: PUSH
22363: LD_VAR 0 5
22367: ARRAY
22368: PUSH
22369: LD_INT 2
22371: ARRAY
22372: EQUAL
22373: IFFALSE 22405
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22375: LD_ADDR_EXP 88
22379: PUSH
22380: LD_EXP 88
22384: PPUSH
22385: LD_VAR 0 5
22389: PPUSH
22390: CALL_OW 3
22394: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22395: CALL 22560 0 0
// exit ;
22399: POP
22400: POP
22401: GO 22555
// end else
22403: GO 22501
// if factory = factoryWaypoints [ i ] [ 2 ] then
22405: LD_VAR 0 1
22409: PUSH
22410: LD_EXP 88
22414: PUSH
22415: LD_VAR 0 5
22419: ARRAY
22420: PUSH
22421: LD_INT 2
22423: ARRAY
22424: EQUAL
22425: IFFALSE 22501
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22427: LD_ADDR_EXP 88
22431: PUSH
22432: LD_EXP 88
22436: PPUSH
22437: LD_VAR 0 5
22441: PPUSH
22442: CALL_OW 3
22446: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22447: LD_ADDR_EXP 88
22451: PUSH
22452: LD_EXP 88
22456: PPUSH
22457: LD_VAR 0 1
22461: PPUSH
22462: CALL_OW 255
22466: PUSH
22467: LD_VAR 0 1
22471: PUSH
22472: LD_VAR 0 2
22476: PUSH
22477: LD_VAR 0 3
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: PPUSH
22488: CALL 68335 0 2
22492: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22493: CALL 22560 0 0
// exit ;
22497: POP
22498: POP
22499: GO 22555
// end ; end ;
22501: GO 22340
22503: POP
22504: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22505: LD_ADDR_EXP 88
22509: PUSH
22510: LD_EXP 88
22514: PPUSH
22515: LD_VAR 0 1
22519: PPUSH
22520: CALL_OW 255
22524: PUSH
22525: LD_VAR 0 1
22529: PUSH
22530: LD_VAR 0 2
22534: PUSH
22535: LD_VAR 0 3
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: PPUSH
22546: CALL 68335 0 2
22550: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22551: CALL 22560 0 0
// end ;
22555: LD_VAR 0 4
22559: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22560: LD_INT 0
22562: PPUSH
22563: PPUSH
22564: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22565: LD_STRING resetFactoryWaypoint();
22567: PPUSH
22568: CALL_OW 559
// if factoryWaypoints then
22572: LD_EXP 88
22576: IFFALSE 22697
// begin list := factoryWaypoints ;
22578: LD_ADDR_VAR 0 3
22582: PUSH
22583: LD_EXP 88
22587: ST_TO_ADDR
// for i := 1 to list do
22588: LD_ADDR_VAR 0 2
22592: PUSH
22593: DOUBLE
22594: LD_INT 1
22596: DEC
22597: ST_TO_ADDR
22598: LD_VAR 0 3
22602: PUSH
22603: FOR_TO
22604: IFFALSE 22695
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22606: LD_STRING setFactoryWaypointXY(
22608: PUSH
22609: LD_VAR 0 3
22613: PUSH
22614: LD_VAR 0 2
22618: ARRAY
22619: PUSH
22620: LD_INT 1
22622: ARRAY
22623: STR
22624: PUSH
22625: LD_STRING ,
22627: STR
22628: PUSH
22629: LD_VAR 0 3
22633: PUSH
22634: LD_VAR 0 2
22638: ARRAY
22639: PUSH
22640: LD_INT 2
22642: ARRAY
22643: STR
22644: PUSH
22645: LD_STRING ,
22647: STR
22648: PUSH
22649: LD_VAR 0 3
22653: PUSH
22654: LD_VAR 0 2
22658: ARRAY
22659: PUSH
22660: LD_INT 3
22662: ARRAY
22663: STR
22664: PUSH
22665: LD_STRING ,
22667: STR
22668: PUSH
22669: LD_VAR 0 3
22673: PUSH
22674: LD_VAR 0 2
22678: ARRAY
22679: PUSH
22680: LD_INT 4
22682: ARRAY
22683: STR
22684: PUSH
22685: LD_STRING )
22687: STR
22688: PPUSH
22689: CALL_OW 559
22693: GO 22603
22695: POP
22696: POP
// end ; end ;
22697: LD_VAR 0 1
22701: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22702: LD_INT 0
22704: PPUSH
// if HexInfo ( x , y ) = warehouse then
22705: LD_VAR 0 2
22709: PPUSH
22710: LD_VAR 0 3
22714: PPUSH
22715: CALL_OW 428
22719: PUSH
22720: LD_VAR 0 1
22724: EQUAL
22725: IFFALSE 22752
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22727: LD_ADDR_EXP 90
22731: PUSH
22732: LD_EXP 90
22736: PPUSH
22737: LD_VAR 0 1
22741: PPUSH
22742: LD_INT 0
22744: PPUSH
22745: CALL_OW 1
22749: ST_TO_ADDR
22750: GO 22803
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22752: LD_ADDR_EXP 90
22756: PUSH
22757: LD_EXP 90
22761: PPUSH
22762: LD_VAR 0 1
22766: PPUSH
22767: LD_VAR 0 1
22771: PPUSH
22772: CALL_OW 255
22776: PUSH
22777: LD_VAR 0 1
22781: PUSH
22782: LD_VAR 0 2
22786: PUSH
22787: LD_VAR 0 3
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: PPUSH
22798: CALL_OW 1
22802: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22803: CALL 22812 0 0
// end ;
22807: LD_VAR 0 4
22811: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22817: LD_STRING resetWarehouseGatheringPoints();
22819: PPUSH
22820: CALL_OW 559
// if warehouseGatheringPoints then
22824: LD_EXP 90
22828: IFFALSE 22954
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22830: LD_ADDR_VAR 0 3
22834: PUSH
22835: LD_EXP 90
22839: PPUSH
22840: CALL 72269 0 1
22844: ST_TO_ADDR
// for i := 1 to list do
22845: LD_ADDR_VAR 0 2
22849: PUSH
22850: DOUBLE
22851: LD_INT 1
22853: DEC
22854: ST_TO_ADDR
22855: LD_VAR 0 3
22859: PUSH
22860: FOR_TO
22861: IFFALSE 22952
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22863: LD_STRING setWarehouseGatheringPointXY(
22865: PUSH
22866: LD_VAR 0 3
22870: PUSH
22871: LD_VAR 0 2
22875: ARRAY
22876: PUSH
22877: LD_INT 1
22879: ARRAY
22880: STR
22881: PUSH
22882: LD_STRING ,
22884: STR
22885: PUSH
22886: LD_VAR 0 3
22890: PUSH
22891: LD_VAR 0 2
22895: ARRAY
22896: PUSH
22897: LD_INT 2
22899: ARRAY
22900: STR
22901: PUSH
22902: LD_STRING ,
22904: STR
22905: PUSH
22906: LD_VAR 0 3
22910: PUSH
22911: LD_VAR 0 2
22915: ARRAY
22916: PUSH
22917: LD_INT 3
22919: ARRAY
22920: STR
22921: PUSH
22922: LD_STRING ,
22924: STR
22925: PUSH
22926: LD_VAR 0 3
22930: PUSH
22931: LD_VAR 0 2
22935: ARRAY
22936: PUSH
22937: LD_INT 4
22939: ARRAY
22940: STR
22941: PUSH
22942: LD_STRING )
22944: STR
22945: PPUSH
22946: CALL_OW 559
22950: GO 22860
22952: POP
22953: POP
// end ; end ;
22954: LD_VAR 0 1
22958: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22959: LD_EXP 90
22963: IFFALSE 23658
22965: GO 22967
22967: DISABLE
22968: LD_INT 0
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
22977: PPUSH
22978: PPUSH
// begin enable ;
22979: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22980: LD_ADDR_VAR 0 3
22984: PUSH
22985: LD_EXP 90
22989: PPUSH
22990: CALL 72269 0 1
22994: ST_TO_ADDR
// if not list then
22995: LD_VAR 0 3
22999: NOT
23000: IFFALSE 23004
// exit ;
23002: GO 23658
// for i := 1 to list do
23004: LD_ADDR_VAR 0 1
23008: PUSH
23009: DOUBLE
23010: LD_INT 1
23012: DEC
23013: ST_TO_ADDR
23014: LD_VAR 0 3
23018: PUSH
23019: FOR_TO
23020: IFFALSE 23656
// begin depot := list [ i ] [ 2 ] ;
23022: LD_ADDR_VAR 0 8
23026: PUSH
23027: LD_VAR 0 3
23031: PUSH
23032: LD_VAR 0 1
23036: ARRAY
23037: PUSH
23038: LD_INT 2
23040: ARRAY
23041: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23042: LD_ADDR_VAR 0 5
23046: PUSH
23047: LD_VAR 0 3
23051: PUSH
23052: LD_VAR 0 1
23056: ARRAY
23057: PUSH
23058: LD_INT 1
23060: ARRAY
23061: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23062: LD_VAR 0 8
23066: PPUSH
23067: CALL_OW 301
23071: IFTRUE 23090
23073: PUSH
23074: LD_VAR 0 5
23078: PUSH
23079: LD_VAR 0 8
23083: PPUSH
23084: CALL_OW 255
23088: NONEQUAL
23089: OR
23090: IFFALSE 23119
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23092: LD_ADDR_EXP 90
23096: PUSH
23097: LD_EXP 90
23101: PPUSH
23102: LD_VAR 0 8
23106: PPUSH
23107: LD_INT 0
23109: PPUSH
23110: CALL_OW 1
23114: ST_TO_ADDR
// exit ;
23115: POP
23116: POP
23117: GO 23658
// end ; x := list [ i ] [ 3 ] ;
23119: LD_ADDR_VAR 0 6
23123: PUSH
23124: LD_VAR 0 3
23128: PUSH
23129: LD_VAR 0 1
23133: ARRAY
23134: PUSH
23135: LD_INT 3
23137: ARRAY
23138: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23139: LD_ADDR_VAR 0 7
23143: PUSH
23144: LD_VAR 0 3
23148: PUSH
23149: LD_VAR 0 1
23153: ARRAY
23154: PUSH
23155: LD_INT 4
23157: ARRAY
23158: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23159: LD_ADDR_VAR 0 9
23163: PUSH
23164: LD_VAR 0 6
23168: PPUSH
23169: LD_VAR 0 7
23173: PPUSH
23174: LD_INT 16
23176: PPUSH
23177: CALL 70843 0 3
23181: ST_TO_ADDR
// if not cratesNearbyPoint then
23182: LD_VAR 0 9
23186: NOT
23187: IFFALSE 23193
// exit ;
23189: POP
23190: POP
23191: GO 23658
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23193: LD_ADDR_VAR 0 4
23197: PUSH
23198: LD_INT 22
23200: PUSH
23201: LD_VAR 0 5
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 3
23212: PUSH
23213: LD_INT 60
23215: PUSH
23216: EMPTY
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 91
23225: PUSH
23226: LD_VAR 0 8
23230: PUSH
23231: LD_INT 6
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 2
23241: PUSH
23242: LD_INT 25
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 25
23254: PUSH
23255: LD_INT 16
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: PPUSH
23273: CALL_OW 69
23277: PUSH
23278: LD_VAR 0 8
23282: PPUSH
23283: CALL_OW 313
23287: PPUSH
23288: LD_INT 3
23290: PUSH
23291: LD_INT 60
23293: PUSH
23294: EMPTY
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 2
23303: PUSH
23304: LD_INT 25
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 25
23316: PUSH
23317: LD_INT 16
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PPUSH
23333: CALL_OW 72
23337: UNION
23338: ST_TO_ADDR
// if tmp then
23339: LD_VAR 0 4
23343: IFFALSE 23423
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23345: LD_ADDR_VAR 0 4
23349: PUSH
23350: LD_VAR 0 4
23354: PPUSH
23355: LD_INT 3
23357: PPUSH
23358: CALL 68650 0 2
23362: ST_TO_ADDR
// for j in tmp do
23363: LD_ADDR_VAR 0 2
23367: PUSH
23368: LD_VAR 0 4
23372: PUSH
23373: FOR_IN
23374: IFFALSE 23417
// begin if IsInUnit ( j ) then
23376: LD_VAR 0 2
23380: PPUSH
23381: CALL_OW 310
23385: IFFALSE 23396
// ComExit ( j ) ;
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL 68733 0 1
// AddComCollect ( j , x , y ) ;
23396: LD_VAR 0 2
23400: PPUSH
23401: LD_VAR 0 6
23405: PPUSH
23406: LD_VAR 0 7
23410: PPUSH
23411: CALL_OW 177
// end ;
23415: GO 23373
23417: POP
23418: POP
// exit ;
23419: POP
23420: POP
23421: GO 23658
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23423: LD_ADDR_VAR 0 4
23427: PUSH
23428: LD_INT 22
23430: PUSH
23431: LD_VAR 0 5
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 91
23442: PUSH
23443: LD_VAR 0 8
23447: PUSH
23448: LD_INT 8
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: LD_INT 34
23461: PUSH
23462: LD_INT 12
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 34
23471: PUSH
23472: LD_INT 51
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 34
23481: PUSH
23482: LD_INT 32
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 34
23491: PUSH
23492: LD_INT 89
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: LIST
23510: PPUSH
23511: CALL_OW 69
23515: ST_TO_ADDR
// if tmp then
23516: LD_VAR 0 4
23520: IFFALSE 23654
// begin for j in tmp do
23522: LD_ADDR_VAR 0 2
23526: PUSH
23527: LD_VAR 0 4
23531: PUSH
23532: FOR_IN
23533: IFFALSE 23652
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23535: LD_VAR 0 2
23539: PPUSH
23540: CALL_OW 262
23544: PUSH
23545: LD_INT 3
23547: EQUAL
23548: IFTRUE 23565
23550: PUSH
23551: LD_VAR 0 2
23555: PPUSH
23556: CALL_OW 261
23560: PUSH
23561: LD_INT 20
23563: GREATER
23564: OR
23565: IFFALSE 23579
23567: PUSH
23568: LD_VAR 0 2
23572: PPUSH
23573: CALL_OW 314
23577: NOT
23578: AND
23579: IFFALSE 23609
23581: PUSH
23582: LD_VAR 0 2
23586: PPUSH
23587: CALL_OW 263
23591: PUSH
23592: LD_INT 1
23594: NONEQUAL
23595: IFTRUE 23608
23597: PUSH
23598: LD_VAR 0 2
23602: PPUSH
23603: CALL_OW 311
23607: OR
23608: AND
23609: IFFALSE 23650
// begin ComCollect ( j , x , y ) ;
23611: LD_VAR 0 2
23615: PPUSH
23616: LD_VAR 0 6
23620: PPUSH
23621: LD_VAR 0 7
23625: PPUSH
23626: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23630: LD_VAR 0 2
23634: PPUSH
23635: LD_VAR 0 8
23639: PPUSH
23640: CALL_OW 172
// exit ;
23644: POP
23645: POP
23646: POP
23647: POP
23648: GO 23658
// end ;
23650: GO 23532
23652: POP
23653: POP
// end ; end ;
23654: GO 23019
23656: POP
23657: POP
// end ; end_of_file
23658: PPOPN 9
23660: END
// export function SOS_UnitDestroyed ( un ) ; begin
23661: LD_INT 0
23663: PPUSH
// ComRadiation ( un ) ;
23664: LD_VAR 0 1
23668: PPUSH
23669: CALL 24831 0 1
// end ;
23673: LD_VAR 0 2
23677: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23678: LD_INT 0
23680: PPUSH
// ComRadiation ( un ) ;
23681: LD_VAR 0 1
23685: PPUSH
23686: CALL 24831 0 1
// end ;
23690: LD_VAR 0 2
23694: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23695: LD_INT 0
23697: PPUSH
// end ;
23698: LD_VAR 0 4
23702: RET
// export function SOS_Command ( cmd ) ; begin
23703: LD_INT 0
23705: PPUSH
// end ;
23706: LD_VAR 0 2
23710: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23711: LD_INT 0
23713: PPUSH
// end ;
23714: LD_VAR 0 6
23718: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
23719: LD_INT 0
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
// if not vehicle or not factory then
23726: LD_VAR 0 1
23730: NOT
23731: IFTRUE 23740
23733: PUSH
23734: LD_VAR 0 2
23738: NOT
23739: OR
23740: IFFALSE 23744
// exit ;
23742: GO 24406
// weapon := GetWeapon ( vehicle ) ;
23744: LD_ADDR_VAR 0 7
23748: PUSH
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 264
23758: ST_TO_ADDR
// if weapon = ar_miner then
23759: LD_VAR 0 7
23763: PUSH
23764: LD_INT 81
23766: EQUAL
23767: IFFALSE 23824
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
23769: LD_ADDR_EXP 99
23773: PUSH
23774: LD_EXP 99
23778: PPUSH
23779: LD_EXP 99
23783: PUSH
23784: LD_INT 1
23786: PLUS
23787: PPUSH
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 1
23797: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23798: LD_ADDR_EXP 100
23802: PUSH
23803: LD_EXP 100
23807: PPUSH
23808: LD_EXP 100
23812: PUSH
23813: LD_INT 1
23815: PLUS
23816: PPUSH
23817: EMPTY
23818: PPUSH
23819: CALL_OW 1
23823: ST_TO_ADDR
// end ; if not factoryWaypoints then
23824: LD_EXP 88
23828: NOT
23829: IFFALSE 23833
// exit ;
23831: GO 24406
// for i := 1 to Count ( factoryWaypoints ) do
23833: LD_ADDR_VAR 0 4
23837: PUSH
23838: DOUBLE
23839: LD_INT 1
23841: DEC
23842: ST_TO_ADDR
23843: LD_EXP 88
23847: PPUSH
23848: CALL 32359 0 1
23852: PUSH
23853: FOR_TO
23854: IFFALSE 24404
// if factoryWaypoints [ i ] [ 2 ] = factory then
23856: LD_EXP 88
23860: PUSH
23861: LD_VAR 0 4
23865: ARRAY
23866: PUSH
23867: LD_INT 2
23869: ARRAY
23870: PUSH
23871: LD_VAR 0 2
23875: EQUAL
23876: IFFALSE 24402
// begin if GetControl ( vehicle ) = control_manual then
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 263
23887: PUSH
23888: LD_INT 1
23890: EQUAL
23891: IFFALSE 24255
// begin driver := IsDrivenBy ( vehicle ) ;
23893: LD_ADDR_VAR 0 5
23897: PUSH
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 311
23907: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23908: LD_VAR 0 5
23912: PUSH
23913: LD_EXP 89
23917: IN
23918: IFTRUE 23932
23920: PUSH
23921: LD_VAR 0 1
23925: PUSH
23926: LD_EXP 89
23930: IN
23931: OR
23932: IFFALSE 23938
// exit ;
23934: POP
23935: POP
23936: GO 24406
// if not HasTask ( driver ) then
23938: LD_VAR 0 5
23942: PPUSH
23943: CALL_OW 314
23947: NOT
23948: IFFALSE 24253
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23950: LD_ADDR_EXP 89
23954: PUSH
23955: LD_EXP 89
23959: PPUSH
23960: LD_VAR 0 5
23964: PPUSH
23965: CALL 68335 0 2
23969: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
23970: LD_ADDR_EXP 89
23974: PUSH
23975: LD_EXP 89
23979: PPUSH
23980: LD_VAR 0 1
23984: PPUSH
23985: CALL 68335 0 2
23989: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23990: LD_ADDR_VAR 0 6
23994: PUSH
23995: LD_EXP 88
23999: PUSH
24000: LD_VAR 0 4
24004: ARRAY
24005: PUSH
24006: LD_INT 3
24008: ARRAY
24009: PPUSH
24010: LD_EXP 88
24014: PUSH
24015: LD_VAR 0 4
24019: ARRAY
24020: PUSH
24021: LD_INT 4
24023: ARRAY
24024: PPUSH
24025: CALL_OW 428
24029: ST_TO_ADDR
// if hex then
24030: LD_VAR 0 6
24034: IFFALSE 24052
// ComMoveUnit ( driver , hex ) else
24036: LD_VAR 0 5
24040: PPUSH
24041: LD_VAR 0 6
24045: PPUSH
24046: CALL_OW 112
24050: GO 24136
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
24052: LD_VAR 0 1
24056: PPUSH
24057: LD_EXP 88
24061: PUSH
24062: LD_VAR 0 4
24066: ARRAY
24067: PUSH
24068: LD_INT 3
24070: ARRAY
24071: PPUSH
24072: LD_EXP 88
24076: PUSH
24077: LD_VAR 0 4
24081: ARRAY
24082: PUSH
24083: LD_INT 4
24085: ARRAY
24086: PPUSH
24087: CALL_OW 297
24091: PUSH
24092: LD_INT 0
24094: GREATER
24095: IFFALSE 24136
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24097: LD_VAR 0 5
24101: PPUSH
24102: LD_EXP 88
24106: PUSH
24107: LD_VAR 0 4
24111: ARRAY
24112: PUSH
24113: LD_INT 3
24115: ARRAY
24116: PPUSH
24117: LD_EXP 88
24121: PUSH
24122: LD_VAR 0 4
24126: ARRAY
24127: PUSH
24128: LD_INT 4
24130: ARRAY
24131: PPUSH
24132: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24136: LD_VAR 0 5
24140: PPUSH
24141: CALL_OW 181
// if Multiplayer then
24145: LD_OWVAR 4
24149: IFFALSE 24198
// begin repeat wait ( 10 ) ;
24151: LD_INT 10
24153: PPUSH
24154: CALL_OW 67
// until not IsInUnit ( driver ) ;
24158: LD_VAR 0 5
24162: PPUSH
24163: CALL_OW 310
24167: NOT
24168: IFFALSE 24151
// if not HasTask ( driver ) then
24170: LD_VAR 0 5
24174: PPUSH
24175: CALL_OW 314
24179: NOT
24180: IFFALSE 24196
// ComEnterUnit ( driver , factory ) ;
24182: LD_VAR 0 5
24186: PPUSH
24187: LD_VAR 0 2
24191: PPUSH
24192: CALL_OW 120
// end else
24196: GO 24212
// AddComEnterUnit ( driver , factory ) ;
24198: LD_VAR 0 5
24202: PPUSH
24203: LD_VAR 0 2
24207: PPUSH
24208: CALL_OW 180
// wait ( 0 0$1 ) ;
24212: LD_INT 35
24214: PPUSH
24215: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
24219: LD_ADDR_EXP 89
24223: PUSH
24224: LD_EXP 89
24228: PUSH
24229: LD_VAR 0 5
24233: DIFF
24234: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
24235: LD_ADDR_EXP 89
24239: PUSH
24240: LD_EXP 89
24244: PUSH
24245: LD_VAR 0 1
24249: DIFF
24250: ST_TO_ADDR
// break ;
24251: GO 24404
// end ; end else
24253: GO 24402
// if GetControl ( vehicle ) = control_remote then
24255: LD_VAR 0 1
24259: PPUSH
24260: CALL_OW 263
24264: PUSH
24265: LD_INT 2
24267: EQUAL
24268: IFFALSE 24354
// begin wait ( 0 0$2 ) ;
24270: LD_INT 70
24272: PPUSH
24273: CALL_OW 67
// repeat wait ( 10 ) ;
24277: LD_INT 10
24279: PPUSH
24280: CALL_OW 67
// Connect ( vehicle ) ;
24284: LD_VAR 0 1
24288: PPUSH
24289: CALL 38637 0 1
// until IsControledBy ( vehicle ) ;
24293: LD_VAR 0 1
24297: PPUSH
24298: CALL_OW 312
24302: IFFALSE 24277
// wait ( 10 ) ;
24304: LD_INT 10
24306: PPUSH
24307: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24311: LD_VAR 0 1
24315: PPUSH
24316: LD_EXP 88
24320: PUSH
24321: LD_VAR 0 4
24325: ARRAY
24326: PUSH
24327: LD_INT 3
24329: ARRAY
24330: PPUSH
24331: LD_EXP 88
24335: PUSH
24336: LD_VAR 0 4
24340: ARRAY
24341: PUSH
24342: LD_INT 4
24344: ARRAY
24345: PPUSH
24346: CALL_OW 111
// break ;
24350: GO 24404
// end else
24352: GO 24402
// begin wait ( 0 0$3 ) ;
24354: LD_INT 105
24356: PPUSH
24357: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_EXP 88
24370: PUSH
24371: LD_VAR 0 4
24375: ARRAY
24376: PUSH
24377: LD_INT 3
24379: ARRAY
24380: PPUSH
24381: LD_EXP 88
24385: PUSH
24386: LD_VAR 0 4
24390: ARRAY
24391: PUSH
24392: LD_INT 4
24394: ARRAY
24395: PPUSH
24396: CALL_OW 111
// break ;
24400: GO 24404
// end ; end ;
24402: GO 23853
24404: POP
24405: POP
// end ;
24406: LD_VAR 0 3
24410: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24411: LD_INT 0
24413: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24414: LD_VAR 0 1
24418: PUSH
24419: LD_INT 250
24421: EQUAL
24422: IFFALSE 24439
24424: PUSH
24425: LD_VAR 0 2
24429: PPUSH
24430: CALL_OW 264
24434: PUSH
24435: LD_INT 81
24437: EQUAL
24438: AND
24439: IFFALSE 24460
// MinerPlaceMine ( unit , x , y ) ;
24441: LD_VAR 0 2
24445: PPUSH
24446: LD_VAR 0 4
24450: PPUSH
24451: LD_VAR 0 5
24455: PPUSH
24456: CALL 27806 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24460: LD_VAR 0 1
24464: PUSH
24465: LD_INT 251
24467: EQUAL
24468: IFFALSE 24485
24470: PUSH
24471: LD_VAR 0 2
24475: PPUSH
24476: CALL_OW 264
24480: PUSH
24481: LD_INT 81
24483: EQUAL
24484: AND
24485: IFFALSE 24506
// MinerDetonateMine ( unit , x , y ) ;
24487: LD_VAR 0 2
24491: PPUSH
24492: LD_VAR 0 4
24496: PPUSH
24497: LD_VAR 0 5
24501: PPUSH
24502: CALL 28213 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24506: LD_VAR 0 1
24510: PUSH
24511: LD_INT 252
24513: EQUAL
24514: IFFALSE 24531
24516: PUSH
24517: LD_VAR 0 2
24521: PPUSH
24522: CALL_OW 264
24526: PUSH
24527: LD_INT 81
24529: EQUAL
24530: AND
24531: IFFALSE 24552
// MinerCreateMinefield ( unit , x , y ) ;
24533: LD_VAR 0 2
24537: PPUSH
24538: LD_VAR 0 4
24542: PPUSH
24543: LD_VAR 0 5
24547: PPUSH
24548: CALL 28445 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24552: LD_VAR 0 1
24556: PUSH
24557: LD_INT 253
24559: EQUAL
24560: IFFALSE 24577
24562: PUSH
24563: LD_VAR 0 2
24567: PPUSH
24568: CALL_OW 257
24572: PUSH
24573: LD_INT 5
24575: EQUAL
24576: AND
24577: IFFALSE 24598
// ComBinocular ( unit , x , y ) ;
24579: LD_VAR 0 2
24583: PPUSH
24584: LD_VAR 0 4
24588: PPUSH
24589: LD_VAR 0 5
24593: PPUSH
24594: CALL 28820 0 3
// if selectedUnit then
24598: LD_VAR 0 3
24602: IFFALSE 24662
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24604: LD_VAR 0 1
24608: PUSH
24609: LD_INT 254
24611: EQUAL
24612: IFFALSE 24629
24614: PUSH
24615: LD_VAR 0 2
24619: PPUSH
24620: CALL_OW 264
24624: PUSH
24625: LD_INT 99
24627: EQUAL
24628: AND
24629: IFFALSE 24646
24631: PUSH
24632: LD_VAR 0 3
24636: PPUSH
24637: CALL_OW 263
24641: PUSH
24642: LD_INT 3
24644: EQUAL
24645: AND
24646: IFFALSE 24662
// HackDestroyVehicle ( unit , selectedUnit ) ;
24648: LD_VAR 0 2
24652: PPUSH
24653: LD_VAR 0 3
24657: PPUSH
24658: CALL 26996 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24662: LD_VAR 0 1
24666: PUSH
24667: LD_INT 255
24669: EQUAL
24670: IFFALSE 24694
24672: PUSH
24673: LD_VAR 0 2
24677: PPUSH
24678: CALL_OW 264
24682: PUSH
24683: LD_INT 14
24685: PUSH
24686: LD_INT 53
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: IN
24693: AND
24694: IFFALSE 24712
24696: PUSH
24697: LD_VAR 0 4
24701: PPUSH
24702: LD_VAR 0 5
24706: PPUSH
24707: CALL_OW 488
24711: AND
24712: IFFALSE 24736
// CutTreeXYR ( unit , x , y , 12 ) ;
24714: LD_VAR 0 2
24718: PPUSH
24719: LD_VAR 0 4
24723: PPUSH
24724: LD_VAR 0 5
24728: PPUSH
24729: LD_INT 12
24731: PPUSH
24732: CALL 24927 0 4
// if cmd = 256 then
24736: LD_VAR 0 1
24740: PUSH
24741: LD_INT 256
24743: EQUAL
24744: IFFALSE 24765
// SetFactoryWaypoint ( unit , x , y ) ;
24746: LD_VAR 0 2
24750: PPUSH
24751: LD_VAR 0 4
24755: PPUSH
24756: LD_VAR 0 5
24760: PPUSH
24761: CALL 22206 0 3
// if cmd = 257 then
24765: LD_VAR 0 1
24769: PUSH
24770: LD_INT 257
24772: EQUAL
24773: IFFALSE 24794
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24775: LD_VAR 0 2
24779: PPUSH
24780: LD_VAR 0 4
24784: PPUSH
24785: LD_VAR 0 5
24789: PPUSH
24790: CALL 22702 0 3
// if cmd = 258 then
24794: LD_VAR 0 1
24798: PUSH
24799: LD_INT 258
24801: EQUAL
24802: IFFALSE 24826
// BurnTreeXYR ( unit , x , y , 8 ) ;
24804: LD_VAR 0 2
24808: PPUSH
24809: LD_VAR 0 4
24813: PPUSH
24814: LD_VAR 0 5
24818: PPUSH
24819: LD_INT 8
24821: PPUSH
24822: CALL 25349 0 4
// end ;
24826: LD_VAR 0 6
24830: RET
// export function ComRadiation ( un ) ; var eff ; begin
24831: LD_INT 0
24833: PPUSH
24834: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24835: LD_VAR 0 1
24839: PPUSH
24840: CALL_OW 264
24844: PUSH
24845: LD_INT 91
24847: NONEQUAL
24848: IFFALSE 24852
// exit ;
24850: GO 24922
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24852: LD_INT 68
24854: PPUSH
24855: LD_VAR 0 1
24859: PPUSH
24860: CALL_OW 255
24864: PPUSH
24865: CALL_OW 321
24869: PUSH
24870: LD_INT 2
24872: EQUAL
24873: IFFALSE 24885
// eff := 50 else
24875: LD_ADDR_VAR 0 3
24879: PUSH
24880: LD_INT 50
24882: ST_TO_ADDR
24883: GO 24893
// eff := 25 ;
24885: LD_ADDR_VAR 0 3
24889: PUSH
24890: LD_INT 25
24892: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24893: LD_VAR 0 1
24897: PPUSH
24898: CALL_OW 250
24902: PPUSH
24903: LD_VAR 0 1
24907: PPUSH
24908: CALL_OW 251
24912: PPUSH
24913: LD_VAR 0 3
24917: PPUSH
24918: CALL_OW 495
// end ;
24922: LD_VAR 0 2
24926: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24927: LD_INT 0
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
24937: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 302
24947: NOT
24948: IFTRUE 24967
24950: PUSH
24951: LD_VAR 0 2
24955: PPUSH
24956: LD_VAR 0 3
24960: PPUSH
24961: CALL_OW 488
24965: NOT
24966: OR
24967: IFTRUE 24976
24969: PUSH
24970: LD_VAR 0 4
24974: NOT
24975: OR
24976: IFFALSE 24980
// exit ;
24978: GO 25344
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
24980: LD_VAR 0 1
24984: PPUSH
24985: CALL_OW 437
24989: PPUSH
24990: CALL 32359 0 1
24994: PUSH
24995: LD_INT 10
24997: GREATER
24998: IFFALSE 25002
// exit ;
25000: GO 25344
// list := [ ] ;
25002: LD_ADDR_VAR 0 13
25006: PUSH
25007: EMPTY
25008: ST_TO_ADDR
// if x - r < 0 then
25009: LD_VAR 0 2
25013: PUSH
25014: LD_VAR 0 4
25018: MINUS
25019: PUSH
25020: LD_INT 0
25022: LESS
25023: IFFALSE 25035
// min_x := 0 else
25025: LD_ADDR_VAR 0 7
25029: PUSH
25030: LD_INT 0
25032: ST_TO_ADDR
25033: GO 25051
// min_x := x - r ;
25035: LD_ADDR_VAR 0 7
25039: PUSH
25040: LD_VAR 0 2
25044: PUSH
25045: LD_VAR 0 4
25049: MINUS
25050: ST_TO_ADDR
// if y - r < 0 then
25051: LD_VAR 0 3
25055: PUSH
25056: LD_VAR 0 4
25060: MINUS
25061: PUSH
25062: LD_INT 0
25064: LESS
25065: IFFALSE 25077
// min_y := 0 else
25067: LD_ADDR_VAR 0 8
25071: PUSH
25072: LD_INT 0
25074: ST_TO_ADDR
25075: GO 25093
// min_y := y - r ;
25077: LD_ADDR_VAR 0 8
25081: PUSH
25082: LD_VAR 0 3
25086: PUSH
25087: LD_VAR 0 4
25091: MINUS
25092: ST_TO_ADDR
// max_x := x + r ;
25093: LD_ADDR_VAR 0 9
25097: PUSH
25098: LD_VAR 0 2
25102: PUSH
25103: LD_VAR 0 4
25107: PLUS
25108: ST_TO_ADDR
// max_y := y + r ;
25109: LD_ADDR_VAR 0 10
25113: PUSH
25114: LD_VAR 0 3
25118: PUSH
25119: LD_VAR 0 4
25123: PLUS
25124: ST_TO_ADDR
// for _x = min_x to max_x do
25125: LD_ADDR_VAR 0 11
25129: PUSH
25130: DOUBLE
25131: LD_VAR 0 7
25135: DEC
25136: ST_TO_ADDR
25137: LD_VAR 0 9
25141: PUSH
25142: FOR_TO
25143: IFFALSE 25262
// for _y = min_y to max_y do
25145: LD_ADDR_VAR 0 12
25149: PUSH
25150: DOUBLE
25151: LD_VAR 0 8
25155: DEC
25156: ST_TO_ADDR
25157: LD_VAR 0 10
25161: PUSH
25162: FOR_TO
25163: IFFALSE 25258
// begin if not ValidHex ( _x , _y ) then
25165: LD_VAR 0 11
25169: PPUSH
25170: LD_VAR 0 12
25174: PPUSH
25175: CALL_OW 488
25179: NOT
25180: IFFALSE 25184
// continue ;
25182: GO 25162
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25184: LD_VAR 0 11
25188: PPUSH
25189: LD_VAR 0 12
25193: PPUSH
25194: CALL_OW 351
25198: IFFALSE 25216
25200: PUSH
25201: LD_VAR 0 11
25205: PPUSH
25206: LD_VAR 0 12
25210: PPUSH
25211: CALL_OW 554
25215: AND
25216: IFFALSE 25256
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25218: LD_ADDR_VAR 0 13
25222: PUSH
25223: LD_VAR 0 13
25227: PPUSH
25228: LD_VAR 0 13
25232: PUSH
25233: LD_INT 1
25235: PLUS
25236: PPUSH
25237: LD_VAR 0 11
25241: PUSH
25242: LD_VAR 0 12
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PPUSH
25251: CALL_OW 2
25255: ST_TO_ADDR
// end ;
25256: GO 25162
25258: POP
25259: POP
25260: GO 25142
25262: POP
25263: POP
// if not list then
25264: LD_VAR 0 13
25268: NOT
25269: IFFALSE 25273
// exit ;
25271: GO 25344
// for i in list do
25273: LD_ADDR_VAR 0 6
25277: PUSH
25278: LD_VAR 0 13
25282: PUSH
25283: FOR_IN
25284: IFFALSE 25342
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25286: LD_VAR 0 1
25290: PPUSH
25291: LD_STRING M
25293: PUSH
25294: LD_VAR 0 6
25298: PUSH
25299: LD_INT 1
25301: ARRAY
25302: PUSH
25303: LD_VAR 0 6
25307: PUSH
25308: LD_INT 2
25310: ARRAY
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: PPUSH
25336: CALL_OW 447
25340: GO 25283
25342: POP
25343: POP
// end ;
25344: LD_VAR 0 5
25348: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25349: LD_INT 0
25351: PPUSH
25352: PPUSH
25353: PPUSH
25354: PPUSH
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25361: LD_VAR 0 1
25365: PPUSH
25366: CALL_OW 302
25370: NOT
25371: IFTRUE 25390
25373: PUSH
25374: LD_VAR 0 2
25378: PPUSH
25379: LD_VAR 0 3
25383: PPUSH
25384: CALL_OW 488
25388: NOT
25389: OR
25390: IFTRUE 25399
25392: PUSH
25393: LD_VAR 0 4
25397: NOT
25398: OR
25399: IFFALSE 25403
// exit ;
25401: GO 25942
// if Count ( GetTaskList ( flame ) ) > 10 then
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 437
25412: PPUSH
25413: CALL 32359 0 1
25417: PUSH
25418: LD_INT 10
25420: GREATER
25421: IFFALSE 25425
// exit ;
25423: GO 25942
// list := [ ] ;
25425: LD_ADDR_VAR 0 13
25429: PUSH
25430: EMPTY
25431: ST_TO_ADDR
// if x - r < 0 then
25432: LD_VAR 0 2
25436: PUSH
25437: LD_VAR 0 4
25441: MINUS
25442: PUSH
25443: LD_INT 0
25445: LESS
25446: IFFALSE 25458
// min_x := 0 else
25448: LD_ADDR_VAR 0 7
25452: PUSH
25453: LD_INT 0
25455: ST_TO_ADDR
25456: GO 25474
// min_x := x - r ;
25458: LD_ADDR_VAR 0 7
25462: PUSH
25463: LD_VAR 0 2
25467: PUSH
25468: LD_VAR 0 4
25472: MINUS
25473: ST_TO_ADDR
// if y - r < 0 then
25474: LD_VAR 0 3
25478: PUSH
25479: LD_VAR 0 4
25483: MINUS
25484: PUSH
25485: LD_INT 0
25487: LESS
25488: IFFALSE 25500
// min_y := 0 else
25490: LD_ADDR_VAR 0 8
25494: PUSH
25495: LD_INT 0
25497: ST_TO_ADDR
25498: GO 25516
// min_y := y - r ;
25500: LD_ADDR_VAR 0 8
25504: PUSH
25505: LD_VAR 0 3
25509: PUSH
25510: LD_VAR 0 4
25514: MINUS
25515: ST_TO_ADDR
// max_x := x + r ;
25516: LD_ADDR_VAR 0 9
25520: PUSH
25521: LD_VAR 0 2
25525: PUSH
25526: LD_VAR 0 4
25530: PLUS
25531: ST_TO_ADDR
// max_y := y + r ;
25532: LD_ADDR_VAR 0 10
25536: PUSH
25537: LD_VAR 0 3
25541: PUSH
25542: LD_VAR 0 4
25546: PLUS
25547: ST_TO_ADDR
// for _x = min_x to max_x do
25548: LD_ADDR_VAR 0 11
25552: PUSH
25553: DOUBLE
25554: LD_VAR 0 7
25558: DEC
25559: ST_TO_ADDR
25560: LD_VAR 0 9
25564: PUSH
25565: FOR_TO
25566: IFFALSE 25685
// for _y = min_y to max_y do
25568: LD_ADDR_VAR 0 12
25572: PUSH
25573: DOUBLE
25574: LD_VAR 0 8
25578: DEC
25579: ST_TO_ADDR
25580: LD_VAR 0 10
25584: PUSH
25585: FOR_TO
25586: IFFALSE 25681
// begin if not ValidHex ( _x , _y ) then
25588: LD_VAR 0 11
25592: PPUSH
25593: LD_VAR 0 12
25597: PPUSH
25598: CALL_OW 488
25602: NOT
25603: IFFALSE 25607
// continue ;
25605: GO 25585
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25607: LD_VAR 0 11
25611: PPUSH
25612: LD_VAR 0 12
25616: PPUSH
25617: CALL_OW 351
25621: IFFALSE 25639
25623: PUSH
25624: LD_VAR 0 11
25628: PPUSH
25629: LD_VAR 0 12
25633: PPUSH
25634: CALL_OW 554
25638: AND
25639: IFFALSE 25679
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25641: LD_ADDR_VAR 0 13
25645: PUSH
25646: LD_VAR 0 13
25650: PPUSH
25651: LD_VAR 0 13
25655: PUSH
25656: LD_INT 1
25658: PLUS
25659: PPUSH
25660: LD_VAR 0 11
25664: PUSH
25665: LD_VAR 0 12
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PPUSH
25674: CALL_OW 2
25678: ST_TO_ADDR
// end ;
25679: GO 25585
25681: POP
25682: POP
25683: GO 25565
25685: POP
25686: POP
// if not list then
25687: LD_VAR 0 13
25691: NOT
25692: IFFALSE 25696
// exit ;
25694: GO 25942
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25696: LD_ADDR_VAR 0 13
25700: PUSH
25701: LD_VAR 0 1
25705: PPUSH
25706: LD_VAR 0 13
25710: PPUSH
25711: LD_INT 1
25713: PPUSH
25714: LD_INT 1
25716: PPUSH
25717: CALL 35765 0 4
25721: ST_TO_ADDR
// ComStop ( flame ) ;
25722: LD_VAR 0 1
25726: PPUSH
25727: CALL_OW 141
// for i in list do
25731: LD_ADDR_VAR 0 6
25735: PUSH
25736: LD_VAR 0 13
25740: PUSH
25741: FOR_IN
25742: IFFALSE 25773
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25744: LD_VAR 0 1
25748: PPUSH
25749: LD_VAR 0 6
25753: PUSH
25754: LD_INT 1
25756: ARRAY
25757: PPUSH
25758: LD_VAR 0 6
25762: PUSH
25763: LD_INT 2
25765: ARRAY
25766: PPUSH
25767: CALL_OW 176
25771: GO 25741
25773: POP
25774: POP
// repeat wait ( 0 0$1 ) ;
25775: LD_INT 35
25777: PPUSH
25778: CALL_OW 67
// task := GetTaskList ( flame ) ;
25782: LD_ADDR_VAR 0 14
25786: PUSH
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 437
25796: ST_TO_ADDR
// if not task then
25797: LD_VAR 0 14
25801: NOT
25802: IFFALSE 25806
// exit ;
25804: GO 25942
// if task [ 1 ] [ 1 ] <> | then
25806: LD_VAR 0 14
25810: PUSH
25811: LD_INT 1
25813: ARRAY
25814: PUSH
25815: LD_INT 1
25817: ARRAY
25818: PUSH
25819: LD_STRING |
25821: NONEQUAL
25822: IFFALSE 25826
// exit ;
25824: GO 25942
// _x := task [ 1 ] [ 2 ] ;
25826: LD_ADDR_VAR 0 11
25830: PUSH
25831: LD_VAR 0 14
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: PUSH
25840: LD_INT 2
25842: ARRAY
25843: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25844: LD_ADDR_VAR 0 12
25848: PUSH
25849: LD_VAR 0 14
25853: PUSH
25854: LD_INT 1
25856: ARRAY
25857: PUSH
25858: LD_INT 3
25860: ARRAY
25861: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25862: LD_VAR 0 11
25866: PPUSH
25867: LD_VAR 0 12
25871: PPUSH
25872: CALL_OW 351
25876: NOT
25877: IFTRUE 25896
25879: PUSH
25880: LD_VAR 0 11
25884: PPUSH
25885: LD_VAR 0 12
25889: PPUSH
25890: CALL_OW 554
25894: NOT
25895: OR
25896: IFFALSE 25930
// begin task := Delete ( task , 1 ) ;
25898: LD_ADDR_VAR 0 14
25902: PUSH
25903: LD_VAR 0 14
25907: PPUSH
25908: LD_INT 1
25910: PPUSH
25911: CALL_OW 3
25915: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25916: LD_VAR 0 1
25920: PPUSH
25921: LD_VAR 0 14
25925: PPUSH
25926: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25930: LD_VAR 0 1
25934: PPUSH
25935: CALL_OW 314
25939: NOT
25940: IFFALSE 25775
// end ;
25942: LD_VAR 0 5
25946: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25947: LD_EXP 92
25951: NOT
25952: IFFALSE 26002
25954: GO 25956
25956: DISABLE
// begin initHack := true ;
25957: LD_ADDR_EXP 92
25961: PUSH
25962: LD_INT 1
25964: ST_TO_ADDR
// hackTanks := [ ] ;
25965: LD_ADDR_EXP 93
25969: PUSH
25970: EMPTY
25971: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25972: LD_ADDR_EXP 94
25976: PUSH
25977: EMPTY
25978: ST_TO_ADDR
// hackLimit := 3 ;
25979: LD_ADDR_EXP 95
25983: PUSH
25984: LD_INT 3
25986: ST_TO_ADDR
// hackDist := 12 ;
25987: LD_ADDR_EXP 96
25991: PUSH
25992: LD_INT 12
25994: ST_TO_ADDR
// hackCounter := [ ] ;
25995: LD_ADDR_EXP 97
25999: PUSH
26000: EMPTY
26001: ST_TO_ADDR
// end ;
26002: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26003: LD_EXP 92
26007: IFFALSE 26025
26009: PUSH
26010: LD_INT 34
26012: PUSH
26013: LD_INT 99
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PPUSH
26020: CALL_OW 69
26024: AND
26025: IFFALSE 26278
26027: GO 26029
26029: DISABLE
26030: LD_INT 0
26032: PPUSH
26033: PPUSH
// begin enable ;
26034: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26035: LD_ADDR_VAR 0 1
26039: PUSH
26040: LD_INT 34
26042: PUSH
26043: LD_INT 99
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PPUSH
26050: CALL_OW 69
26054: PUSH
26055: FOR_IN
26056: IFFALSE 26276
// begin if not i in hackTanks then
26058: LD_VAR 0 1
26062: PUSH
26063: LD_EXP 93
26067: IN
26068: NOT
26069: IFFALSE 26152
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26071: LD_ADDR_EXP 93
26075: PUSH
26076: LD_EXP 93
26080: PPUSH
26081: LD_EXP 93
26085: PUSH
26086: LD_INT 1
26088: PLUS
26089: PPUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 1
26099: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26100: LD_ADDR_EXP 94
26104: PUSH
26105: LD_EXP 94
26109: PPUSH
26110: LD_EXP 94
26114: PUSH
26115: LD_INT 1
26117: PLUS
26118: PPUSH
26119: EMPTY
26120: PPUSH
26121: CALL_OW 1
26125: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26126: LD_ADDR_EXP 97
26130: PUSH
26131: LD_EXP 97
26135: PPUSH
26136: LD_EXP 97
26140: PUSH
26141: LD_INT 1
26143: PLUS
26144: PPUSH
26145: EMPTY
26146: PPUSH
26147: CALL_OW 1
26151: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26152: LD_VAR 0 1
26156: PPUSH
26157: CALL_OW 302
26161: NOT
26162: IFFALSE 26175
// begin HackUnlinkAll ( i ) ;
26164: LD_VAR 0 1
26168: PPUSH
26169: CALL 26281 0 1
// continue ;
26173: GO 26055
// end ; HackCheckCapturedStatus ( i ) ;
26175: LD_VAR 0 1
26179: PPUSH
26180: CALL 26726 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26184: LD_ADDR_VAR 0 2
26188: PUSH
26189: LD_INT 81
26191: PUSH
26192: LD_VAR 0 1
26196: PPUSH
26197: CALL_OW 255
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 33
26208: PUSH
26209: LD_INT 3
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 91
26218: PUSH
26219: LD_VAR 0 1
26223: PUSH
26224: LD_EXP 96
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 50
26236: PUSH
26237: EMPTY
26238: LIST
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: PPUSH
26246: CALL_OW 69
26250: ST_TO_ADDR
// if not tmp then
26251: LD_VAR 0 2
26255: NOT
26256: IFFALSE 26260
// continue ;
26258: GO 26055
// HackLink ( i , tmp ) ;
26260: LD_VAR 0 1
26264: PPUSH
26265: LD_VAR 0 2
26269: PPUSH
26270: CALL 26417 0 2
// end ;
26274: GO 26055
26276: POP
26277: POP
// end ;
26278: PPOPN 2
26280: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26281: LD_INT 0
26283: PPUSH
26284: PPUSH
26285: PPUSH
// if not hack in hackTanks then
26286: LD_VAR 0 1
26290: PUSH
26291: LD_EXP 93
26295: IN
26296: NOT
26297: IFFALSE 26301
// exit ;
26299: GO 26412
// index := GetElementIndex ( hackTanks , hack ) ;
26301: LD_ADDR_VAR 0 4
26305: PUSH
26306: LD_EXP 93
26310: PPUSH
26311: LD_VAR 0 1
26315: PPUSH
26316: CALL 35060 0 2
26320: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26321: LD_EXP 94
26325: PUSH
26326: LD_VAR 0 4
26330: ARRAY
26331: IFFALSE 26412
// begin for i in hackTanksCaptured [ index ] do
26333: LD_ADDR_VAR 0 3
26337: PUSH
26338: LD_EXP 94
26342: PUSH
26343: LD_VAR 0 4
26347: ARRAY
26348: PUSH
26349: FOR_IN
26350: IFFALSE 26376
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26352: LD_VAR 0 3
26356: PUSH
26357: LD_INT 1
26359: ARRAY
26360: PPUSH
26361: LD_VAR 0 3
26365: PUSH
26366: LD_INT 2
26368: ARRAY
26369: PPUSH
26370: CALL_OW 235
26374: GO 26349
26376: POP
26377: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26378: LD_ADDR_EXP 94
26382: PUSH
26383: LD_EXP 94
26387: PPUSH
26388: LD_VAR 0 4
26392: PPUSH
26393: EMPTY
26394: PPUSH
26395: CALL_OW 1
26399: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26400: LD_VAR 0 1
26404: PPUSH
26405: LD_INT 0
26407: PPUSH
26408: CALL_OW 505
// end ; end ;
26412: LD_VAR 0 2
26416: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26417: LD_INT 0
26419: PPUSH
26420: PPUSH
26421: PPUSH
// if not hack in hackTanks or not vehicles then
26422: LD_VAR 0 1
26426: PUSH
26427: LD_EXP 93
26431: IN
26432: NOT
26433: IFTRUE 26442
26435: PUSH
26436: LD_VAR 0 2
26440: NOT
26441: OR
26442: IFFALSE 26446
// exit ;
26444: GO 26721
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26446: LD_ADDR_VAR 0 2
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: LD_VAR 0 2
26460: PPUSH
26461: LD_INT 1
26463: PPUSH
26464: LD_INT 1
26466: PPUSH
26467: CALL 35712 0 4
26471: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26472: LD_ADDR_VAR 0 5
26476: PUSH
26477: LD_EXP 93
26481: PPUSH
26482: LD_VAR 0 1
26486: PPUSH
26487: CALL 35060 0 2
26491: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26492: LD_EXP 94
26496: PUSH
26497: LD_VAR 0 5
26501: ARRAY
26502: PUSH
26503: LD_EXP 95
26507: LESS
26508: IFFALSE 26697
// begin for i := 1 to vehicles do
26510: LD_ADDR_VAR 0 4
26514: PUSH
26515: DOUBLE
26516: LD_INT 1
26518: DEC
26519: ST_TO_ADDR
26520: LD_VAR 0 2
26524: PUSH
26525: FOR_TO
26526: IFFALSE 26695
// begin if hackTanksCaptured [ index ] = hackLimit then
26528: LD_EXP 94
26532: PUSH
26533: LD_VAR 0 5
26537: ARRAY
26538: PUSH
26539: LD_EXP 95
26543: EQUAL
26544: IFFALSE 26548
// break ;
26546: GO 26695
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26548: LD_ADDR_EXP 97
26552: PUSH
26553: LD_EXP 97
26557: PPUSH
26558: LD_VAR 0 5
26562: PPUSH
26563: LD_EXP 97
26567: PUSH
26568: LD_VAR 0 5
26572: ARRAY
26573: PUSH
26574: LD_INT 1
26576: PLUS
26577: PPUSH
26578: CALL_OW 1
26582: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26583: LD_ADDR_EXP 94
26587: PUSH
26588: LD_EXP 94
26592: PPUSH
26593: LD_VAR 0 5
26597: PUSH
26598: LD_EXP 94
26602: PUSH
26603: LD_VAR 0 5
26607: ARRAY
26608: PUSH
26609: LD_INT 1
26611: PLUS
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PPUSH
26617: LD_VAR 0 2
26621: PUSH
26622: LD_VAR 0 4
26626: ARRAY
26627: PUSH
26628: LD_VAR 0 2
26632: PUSH
26633: LD_VAR 0 4
26637: ARRAY
26638: PPUSH
26639: CALL_OW 255
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PPUSH
26648: CALL 35277 0 3
26652: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26653: LD_VAR 0 2
26657: PUSH
26658: LD_VAR 0 4
26662: ARRAY
26663: PPUSH
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 255
26673: PPUSH
26674: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26678: LD_VAR 0 2
26682: PUSH
26683: LD_VAR 0 4
26687: ARRAY
26688: PPUSH
26689: CALL_OW 141
// end ;
26693: GO 26525
26695: POP
26696: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26697: LD_VAR 0 1
26701: PPUSH
26702: LD_EXP 94
26706: PUSH
26707: LD_VAR 0 5
26711: ARRAY
26712: PUSH
26713: LD_INT 0
26715: PLUS
26716: PPUSH
26717: CALL_OW 505
// end ;
26721: LD_VAR 0 3
26725: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26726: LD_INT 0
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
// if not hack in hackTanks then
26732: LD_VAR 0 1
26736: PUSH
26737: LD_EXP 93
26741: IN
26742: NOT
26743: IFFALSE 26747
// exit ;
26745: GO 26991
// index := GetElementIndex ( hackTanks , hack ) ;
26747: LD_ADDR_VAR 0 4
26751: PUSH
26752: LD_EXP 93
26756: PPUSH
26757: LD_VAR 0 1
26761: PPUSH
26762: CALL 35060 0 2
26766: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26767: LD_ADDR_VAR 0 3
26771: PUSH
26772: DOUBLE
26773: LD_EXP 94
26777: PUSH
26778: LD_VAR 0 4
26782: ARRAY
26783: INC
26784: ST_TO_ADDR
26785: LD_INT 1
26787: PUSH
26788: FOR_DOWNTO
26789: IFFALSE 26965
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26791: LD_ADDR_VAR 0 5
26795: PUSH
26796: LD_EXP 94
26800: PUSH
26801: LD_VAR 0 4
26805: ARRAY
26806: PUSH
26807: LD_VAR 0 3
26811: ARRAY
26812: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26813: LD_VAR 0 5
26817: PUSH
26818: LD_INT 1
26820: ARRAY
26821: PPUSH
26822: CALL_OW 302
26826: NOT
26827: IFTRUE 26855
26829: PUSH
26830: LD_VAR 0 5
26834: PUSH
26835: LD_INT 1
26837: ARRAY
26838: PPUSH
26839: CALL_OW 255
26843: PUSH
26844: LD_VAR 0 1
26848: PPUSH
26849: CALL_OW 255
26853: NONEQUAL
26854: OR
26855: IFFALSE 26963
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26857: LD_VAR 0 5
26861: PUSH
26862: LD_INT 1
26864: ARRAY
26865: PPUSH
26866: CALL_OW 305
26870: IFFALSE 26898
26872: PUSH
26873: LD_VAR 0 5
26877: PUSH
26878: LD_INT 1
26880: ARRAY
26881: PPUSH
26882: CALL_OW 255
26886: PUSH
26887: LD_VAR 0 1
26891: PPUSH
26892: CALL_OW 255
26896: EQUAL
26897: AND
26898: IFFALSE 26922
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26900: LD_VAR 0 5
26904: PUSH
26905: LD_INT 1
26907: ARRAY
26908: PPUSH
26909: LD_VAR 0 5
26913: PUSH
26914: LD_INT 2
26916: ARRAY
26917: PPUSH
26918: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26922: LD_ADDR_EXP 94
26926: PUSH
26927: LD_EXP 94
26931: PPUSH
26932: LD_VAR 0 4
26936: PPUSH
26937: LD_EXP 94
26941: PUSH
26942: LD_VAR 0 4
26946: ARRAY
26947: PPUSH
26948: LD_VAR 0 3
26952: PPUSH
26953: CALL_OW 3
26957: PPUSH
26958: CALL_OW 1
26962: ST_TO_ADDR
// end ; end ;
26963: GO 26788
26965: POP
26966: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26967: LD_VAR 0 1
26971: PPUSH
26972: LD_EXP 94
26976: PUSH
26977: LD_VAR 0 4
26981: ARRAY
26982: PUSH
26983: LD_INT 0
26985: PLUS
26986: PPUSH
26987: CALL_OW 505
// end ;
26991: LD_VAR 0 2
26995: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26996: LD_INT 0
26998: PPUSH
26999: PPUSH
27000: PPUSH
27001: PPUSH
// if not hack in hackTanks then
27002: LD_VAR 0 1
27006: PUSH
27007: LD_EXP 93
27011: IN
27012: NOT
27013: IFFALSE 27017
// exit ;
27015: GO 27102
// index := GetElementIndex ( hackTanks , hack ) ;
27017: LD_ADDR_VAR 0 5
27021: PUSH
27022: LD_EXP 93
27026: PPUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL 35060 0 2
27036: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27037: LD_ADDR_VAR 0 4
27041: PUSH
27042: DOUBLE
27043: LD_INT 1
27045: DEC
27046: ST_TO_ADDR
27047: LD_EXP 94
27051: PUSH
27052: LD_VAR 0 5
27056: ARRAY
27057: PUSH
27058: FOR_TO
27059: IFFALSE 27100
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27061: LD_EXP 94
27065: PUSH
27066: LD_VAR 0 5
27070: ARRAY
27071: PUSH
27072: LD_VAR 0 4
27076: ARRAY
27077: PUSH
27078: LD_INT 1
27080: ARRAY
27081: PUSH
27082: LD_VAR 0 2
27086: EQUAL
27087: IFFALSE 27098
// KillUnit ( vehicle ) ;
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL_OW 66
27098: GO 27058
27100: POP
27101: POP
// end ;
27102: LD_VAR 0 3
27106: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
27107: LD_EXP 98
27111: NOT
27112: IFFALSE 27245
27114: GO 27116
27116: DISABLE
27117: LD_INT 0
27119: PPUSH
// begin initMiner := true ;
27120: LD_ADDR_EXP 98
27124: PUSH
27125: LD_INT 1
27127: ST_TO_ADDR
// minersList := [ ] ;
27128: LD_ADDR_EXP 99
27132: PUSH
27133: EMPTY
27134: ST_TO_ADDR
// minerMinesList := [ ] ;
27135: LD_ADDR_EXP 100
27139: PUSH
27140: EMPTY
27141: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
27142: LD_ADDR_EXP 101
27146: PUSH
27147: LD_INT 10
27149: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27150: LD_ADDR_VAR 0 1
27154: PUSH
27155: LD_INT 34
27157: PUSH
27158: LD_INT 81
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PPUSH
27165: CALL_OW 69
27169: PUSH
27170: FOR_IN
27171: IFFALSE 27243
// begin if not i in minersList then
27173: LD_VAR 0 1
27177: PUSH
27178: LD_EXP 99
27182: IN
27183: NOT
27184: IFFALSE 27241
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27186: LD_ADDR_EXP 99
27190: PUSH
27191: LD_EXP 99
27195: PPUSH
27196: LD_EXP 99
27200: PUSH
27201: LD_INT 1
27203: PLUS
27204: PPUSH
27205: LD_VAR 0 1
27209: PPUSH
27210: CALL_OW 1
27214: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27215: LD_ADDR_EXP 100
27219: PUSH
27220: LD_EXP 100
27224: PPUSH
27225: LD_EXP 100
27229: PUSH
27230: LD_INT 1
27232: PLUS
27233: PPUSH
27234: EMPTY
27235: PPUSH
27236: CALL_OW 1
27240: ST_TO_ADDR
// end end ;
27241: GO 27170
27243: POP
27244: POP
// end ;
27245: PPOPN 1
27247: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
27248: LD_EXP 98
27252: IFFALSE 27283
27254: PUSH
27255: LD_EXP 100
27259: PPUSH
27260: CALL 32359 0 1
27264: IFTRUE 27282
27266: PUSH
27267: LD_INT 34
27269: PUSH
27270: LD_INT 81
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PPUSH
27277: CALL_OW 69
27281: OR
27282: AND
27283: IFFALSE 27803
27285: GO 27287
27287: DISABLE
27288: LD_INT 0
27290: PPUSH
27291: PPUSH
27292: PPUSH
27293: PPUSH
// begin enable ;
27294: ENABLE
// for i := minerMinesList downto 1 do
27295: LD_ADDR_VAR 0 1
27299: PUSH
27300: DOUBLE
27301: LD_EXP 100
27305: INC
27306: ST_TO_ADDR
27307: LD_INT 1
27309: PUSH
27310: FOR_DOWNTO
27311: IFFALSE 27801
// begin side := GetSide ( minersList [ i ] ) ;
27313: LD_ADDR_VAR 0 3
27317: PUSH
27318: LD_EXP 99
27322: PUSH
27323: LD_VAR 0 1
27327: ARRAY
27328: PPUSH
27329: CALL_OW 255
27333: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
27334: LD_EXP 99
27338: PUSH
27339: LD_VAR 0 1
27343: ARRAY
27344: PPUSH
27345: CALL_OW 300
27349: IFFALSE 27370
27351: PUSH
27352: LD_VAR 0 3
27356: PUSH
27357: LD_OWVAR 2
27361: PUSH
27362: LD_INT 9
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: IN
27369: AND
27370: IFFALSE 27403
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
27372: LD_EXP 99
27376: PUSH
27377: LD_VAR 0 1
27381: ARRAY
27382: PPUSH
27383: LD_EXP 100
27387: PUSH
27388: LD_VAR 0 1
27392: ARRAY
27393: PPUSH
27394: CALL 32359 0 1
27398: PPUSH
27399: CALL_OW 505
// if not minerMinesList [ i ] then
27403: LD_EXP 100
27407: PUSH
27408: LD_VAR 0 1
27412: ARRAY
27413: NOT
27414: IFFALSE 27418
// continue ;
27416: GO 27310
// for j := minerMinesList [ i ] downto 1 do
27418: LD_ADDR_VAR 0 2
27422: PUSH
27423: DOUBLE
27424: LD_EXP 100
27428: PUSH
27429: LD_VAR 0 1
27433: ARRAY
27434: INC
27435: ST_TO_ADDR
27436: LD_INT 1
27438: PUSH
27439: FOR_DOWNTO
27440: IFFALSE 27797
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
27442: LD_EXP 99
27446: PUSH
27447: LD_VAR 0 1
27451: ARRAY
27452: PPUSH
27453: CALL_OW 301
27457: IFTRUE 27477
27459: PUSH
27460: LD_EXP 99
27464: PUSH
27465: LD_VAR 0 1
27469: ARRAY
27470: PPUSH
27471: CALL_OW 305
27475: NOT
27476: OR
27477: IFFALSE 27568
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27479: LD_EXP 100
27483: PUSH
27484: LD_VAR 0 1
27488: ARRAY
27489: PUSH
27490: LD_VAR 0 2
27494: ARRAY
27495: PUSH
27496: LD_INT 1
27498: ARRAY
27499: PPUSH
27500: LD_EXP 100
27504: PUSH
27505: LD_VAR 0 1
27509: ARRAY
27510: PUSH
27511: LD_VAR 0 2
27515: ARRAY
27516: PUSH
27517: LD_INT 2
27519: ARRAY
27520: PPUSH
27521: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27525: LD_ADDR_EXP 100
27529: PUSH
27530: LD_EXP 100
27534: PPUSH
27535: LD_VAR 0 1
27539: PPUSH
27540: LD_EXP 100
27544: PUSH
27545: LD_VAR 0 1
27549: ARRAY
27550: PPUSH
27551: LD_VAR 0 2
27555: PPUSH
27556: CALL_OW 3
27560: PPUSH
27561: CALL_OW 1
27565: ST_TO_ADDR
// continue ;
27566: GO 27439
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27568: LD_ADDR_VAR 0 4
27572: PUSH
27573: LD_EXP 100
27577: PUSH
27578: LD_VAR 0 1
27582: ARRAY
27583: PUSH
27584: LD_VAR 0 2
27588: ARRAY
27589: PUSH
27590: LD_INT 1
27592: ARRAY
27593: PPUSH
27594: LD_EXP 100
27598: PUSH
27599: LD_VAR 0 1
27603: ARRAY
27604: PUSH
27605: LD_VAR 0 2
27609: ARRAY
27610: PUSH
27611: LD_INT 2
27613: ARRAY
27614: PPUSH
27615: CALL_OW 428
27619: ST_TO_ADDR
// if not tmp then
27620: LD_VAR 0 4
27624: NOT
27625: IFFALSE 27629
// continue ;
27627: GO 27439
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27629: LD_VAR 0 4
27633: PUSH
27634: LD_INT 81
27636: PUSH
27637: LD_VAR 0 3
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PPUSH
27646: CALL_OW 69
27650: IN
27651: IFFALSE 27701
27653: PUSH
27654: LD_EXP 100
27658: PUSH
27659: LD_VAR 0 1
27663: ARRAY
27664: PUSH
27665: LD_VAR 0 2
27669: ARRAY
27670: PUSH
27671: LD_INT 1
27673: ARRAY
27674: PPUSH
27675: LD_EXP 100
27679: PUSH
27680: LD_VAR 0 1
27684: ARRAY
27685: PUSH
27686: LD_VAR 0 2
27690: ARRAY
27691: PUSH
27692: LD_INT 2
27694: ARRAY
27695: PPUSH
27696: CALL_OW 458
27700: AND
27701: IFFALSE 27795
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27703: LD_EXP 100
27707: PUSH
27708: LD_VAR 0 1
27712: ARRAY
27713: PUSH
27714: LD_VAR 0 2
27718: ARRAY
27719: PUSH
27720: LD_INT 1
27722: ARRAY
27723: PPUSH
27724: LD_EXP 100
27728: PUSH
27729: LD_VAR 0 1
27733: ARRAY
27734: PUSH
27735: LD_VAR 0 2
27739: ARRAY
27740: PUSH
27741: LD_INT 2
27743: ARRAY
27744: PPUSH
27745: LD_VAR 0 3
27749: PPUSH
27750: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27754: LD_ADDR_EXP 100
27758: PUSH
27759: LD_EXP 100
27763: PPUSH
27764: LD_VAR 0 1
27768: PPUSH
27769: LD_EXP 100
27773: PUSH
27774: LD_VAR 0 1
27778: ARRAY
27779: PPUSH
27780: LD_VAR 0 2
27784: PPUSH
27785: CALL_OW 3
27789: PPUSH
27790: CALL_OW 1
27794: ST_TO_ADDR
// end ; end ;
27795: GO 27439
27797: POP
27798: POP
// end ;
27799: GO 27310
27801: POP
27802: POP
// end ;
27803: PPOPN 4
27805: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
27806: LD_INT 0
27808: PPUSH
27809: PPUSH
27810: PPUSH
27811: PPUSH
// result := false ;
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: LD_INT 0
27819: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27820: LD_VAR 0 1
27824: PPUSH
27825: CALL_OW 264
27829: PUSH
27830: LD_INT 81
27832: EQUAL
27833: NOT
27834: IFFALSE 27838
// exit ;
27836: GO 28208
// side := GetSide ( unit ) ;
27838: LD_ADDR_VAR 0 6
27842: PUSH
27843: LD_VAR 0 1
27847: PPUSH
27848: CALL_OW 255
27852: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
27853: LD_ADDR_VAR 0 5
27857: PUSH
27858: LD_EXP 99
27862: PPUSH
27863: LD_VAR 0 1
27867: PPUSH
27868: CALL 35060 0 2
27872: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27873: LD_EXP 100
27877: PUSH
27878: LD_VAR 0 5
27882: ARRAY
27883: PUSH
27884: LD_EXP 101
27888: GREATEREQUAL
27889: IFFALSE 27893
// exit ;
27891: GO 28208
// ComMoveXY ( unit , x , y ) ;
27893: LD_VAR 0 1
27897: PPUSH
27898: LD_VAR 0 2
27902: PPUSH
27903: LD_VAR 0 3
27907: PPUSH
27908: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27912: LD_INT 35
27914: PPUSH
27915: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27919: LD_VAR 0 1
27923: PPUSH
27924: LD_VAR 0 2
27928: PPUSH
27929: LD_VAR 0 3
27933: PPUSH
27934: CALL 67116 0 3
27938: NOT
27939: IFFALSE 27952
27941: PUSH
27942: LD_VAR 0 1
27946: PPUSH
27947: CALL_OW 314
27951: AND
27952: IFFALSE 27956
// exit ;
27954: GO 28208
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27956: LD_VAR 0 2
27960: PPUSH
27961: LD_VAR 0 3
27965: PPUSH
27966: CALL_OW 428
27970: PUSH
27971: LD_VAR 0 1
27975: EQUAL
27976: IFFALSE 27990
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 314
27988: NOT
27989: AND
27990: IFFALSE 27912
// if MineAtPos ( x , y ) then
27992: LD_VAR 0 2
27996: PPUSH
27997: LD_VAR 0 3
28001: PPUSH
28002: CALL_OW 458
28006: IFFALSE 28010
// exit ;
28008: GO 28208
// if your_side = side then
28010: LD_OWVAR 2
28014: PUSH
28015: LD_VAR 0 6
28019: EQUAL
28020: IFFALSE 28039
// PlaySoundXY ( x , y , PlantMine ) ;
28022: LD_VAR 0 2
28026: PPUSH
28027: LD_VAR 0 3
28031: PPUSH
28032: LD_STRING PlantMine
28034: PPUSH
28035: CALL_OW 366
// repeat wait ( 1 ) ;
28039: LD_INT 1
28041: PPUSH
28042: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
28046: LD_VAR 0 2
28050: PPUSH
28051: LD_VAR 0 3
28055: PPUSH
28056: LD_VAR 0 6
28060: PPUSH
28061: LD_INT 0
28063: PPUSH
28064: CALL_OW 454
28068: IFFALSE 28039
// if MineAtPos ( x , y ) then
28070: LD_VAR 0 2
28074: PPUSH
28075: LD_VAR 0 3
28079: PPUSH
28080: CALL_OW 458
28084: IFFALSE 28200
// begin for i in minerMinesList [ index ] do
28086: LD_ADDR_VAR 0 7
28090: PUSH
28091: LD_EXP 100
28095: PUSH
28096: LD_VAR 0 5
28100: ARRAY
28101: PUSH
28102: FOR_IN
28103: IFFALSE 28145
// if i [ 1 ] = x and i [ 2 ] = y then
28105: LD_VAR 0 7
28109: PUSH
28110: LD_INT 1
28112: ARRAY
28113: PUSH
28114: LD_VAR 0 2
28118: EQUAL
28119: IFFALSE 28137
28121: PUSH
28122: LD_VAR 0 7
28126: PUSH
28127: LD_INT 2
28129: ARRAY
28130: PUSH
28131: LD_VAR 0 3
28135: EQUAL
28136: AND
28137: IFFALSE 28143
// exit ;
28139: POP
28140: POP
28141: GO 28208
28143: GO 28102
28145: POP
28146: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28147: LD_ADDR_EXP 100
28151: PUSH
28152: LD_EXP 100
28156: PPUSH
28157: LD_VAR 0 5
28161: PUSH
28162: LD_EXP 100
28166: PUSH
28167: LD_VAR 0 5
28171: ARRAY
28172: PUSH
28173: LD_INT 1
28175: PLUS
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PPUSH
28181: LD_VAR 0 2
28185: PUSH
28186: LD_VAR 0 3
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PPUSH
28195: CALL 35277 0 3
28199: ST_TO_ADDR
// end ; result := true ;
28200: LD_ADDR_VAR 0 4
28204: PUSH
28205: LD_INT 1
28207: ST_TO_ADDR
// end ;
28208: LD_VAR 0 4
28212: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28213: LD_INT 0
28215: PPUSH
28216: PPUSH
28217: PPUSH
// if not unit in minersList then
28218: LD_VAR 0 1
28222: PUSH
28223: LD_EXP 99
28227: IN
28228: NOT
28229: IFFALSE 28233
// exit ;
28231: GO 28440
// index := GetElementIndex ( minersList , unit ) ;
28233: LD_ADDR_VAR 0 6
28237: PUSH
28238: LD_EXP 99
28242: PPUSH
28243: LD_VAR 0 1
28247: PPUSH
28248: CALL 35060 0 2
28252: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28253: LD_ADDR_VAR 0 5
28257: PUSH
28258: DOUBLE
28259: LD_EXP 100
28263: PUSH
28264: LD_VAR 0 6
28268: ARRAY
28269: INC
28270: ST_TO_ADDR
28271: LD_INT 1
28273: PUSH
28274: FOR_DOWNTO
28275: IFFALSE 28438
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28277: LD_EXP 100
28281: PUSH
28282: LD_VAR 0 6
28286: ARRAY
28287: PUSH
28288: LD_VAR 0 5
28292: ARRAY
28293: PUSH
28294: LD_INT 1
28296: ARRAY
28297: PPUSH
28298: LD_EXP 100
28302: PUSH
28303: LD_VAR 0 6
28307: ARRAY
28308: PUSH
28309: LD_VAR 0 5
28313: ARRAY
28314: PUSH
28315: LD_INT 2
28317: ARRAY
28318: PPUSH
28319: LD_VAR 0 2
28323: PPUSH
28324: LD_VAR 0 3
28328: PPUSH
28329: CALL_OW 298
28333: PUSH
28334: LD_INT 6
28336: LESS
28337: IFFALSE 28436
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28339: LD_EXP 100
28343: PUSH
28344: LD_VAR 0 6
28348: ARRAY
28349: PUSH
28350: LD_VAR 0 5
28354: ARRAY
28355: PUSH
28356: LD_INT 1
28358: ARRAY
28359: PPUSH
28360: LD_EXP 100
28364: PUSH
28365: LD_VAR 0 6
28369: ARRAY
28370: PUSH
28371: LD_VAR 0 5
28375: ARRAY
28376: PUSH
28377: LD_INT 2
28379: ARRAY
28380: PPUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL_OW 255
28390: PPUSH
28391: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28395: LD_ADDR_EXP 100
28399: PUSH
28400: LD_EXP 100
28404: PPUSH
28405: LD_VAR 0 6
28409: PPUSH
28410: LD_EXP 100
28414: PUSH
28415: LD_VAR 0 6
28419: ARRAY
28420: PPUSH
28421: LD_VAR 0 5
28425: PPUSH
28426: CALL_OW 3
28430: PPUSH
28431: CALL_OW 1
28435: ST_TO_ADDR
// end ; end ;
28436: GO 28274
28438: POP
28439: POP
// end ;
28440: LD_VAR 0 4
28444: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
28449: PPUSH
28450: PPUSH
28451: PPUSH
28452: PPUSH
28453: PPUSH
28454: PPUSH
28455: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28456: LD_VAR 0 1
28460: PPUSH
28461: CALL_OW 264
28465: PUSH
28466: LD_INT 81
28468: EQUAL
28469: NOT
28470: IFTRUE 28485
28472: PUSH
28473: LD_VAR 0 1
28477: PUSH
28478: LD_EXP 99
28482: IN
28483: NOT
28484: OR
28485: IFFALSE 28489
// exit ;
28487: GO 28815
// index := GetElementIndex ( minersList , unit ) ;
28489: LD_ADDR_VAR 0 6
28493: PUSH
28494: LD_EXP 99
28498: PPUSH
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL 35060 0 2
28508: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28509: LD_ADDR_VAR 0 8
28513: PUSH
28514: LD_EXP 101
28518: PUSH
28519: LD_EXP 100
28523: PUSH
28524: LD_VAR 0 6
28528: ARRAY
28529: MINUS
28530: ST_TO_ADDR
// if not minesFreeAmount then
28531: LD_VAR 0 8
28535: NOT
28536: IFFALSE 28540
// exit ;
28538: GO 28815
// tmp := [ ] ;
28540: LD_ADDR_VAR 0 7
28544: PUSH
28545: EMPTY
28546: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28547: LD_ADDR_VAR 0 5
28551: PUSH
28552: DOUBLE
28553: LD_INT 1
28555: DEC
28556: ST_TO_ADDR
28557: LD_VAR 0 8
28561: PUSH
28562: FOR_TO
28563: IFFALSE 28762
// begin _d := rand ( 0 , 5 ) ;
28565: LD_ADDR_VAR 0 11
28569: PUSH
28570: LD_INT 0
28572: PPUSH
28573: LD_INT 5
28575: PPUSH
28576: CALL_OW 12
28580: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28581: LD_ADDR_VAR 0 12
28585: PUSH
28586: LD_INT 2
28588: PPUSH
28589: LD_INT 6
28591: PPUSH
28592: CALL_OW 12
28596: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28597: LD_ADDR_VAR 0 9
28601: PUSH
28602: LD_VAR 0 2
28606: PPUSH
28607: LD_VAR 0 11
28611: PPUSH
28612: LD_VAR 0 12
28616: PPUSH
28617: CALL_OW 272
28621: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28622: LD_ADDR_VAR 0 10
28626: PUSH
28627: LD_VAR 0 3
28631: PPUSH
28632: LD_VAR 0 11
28636: PPUSH
28637: LD_VAR 0 12
28641: PPUSH
28642: CALL_OW 273
28646: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28647: LD_VAR 0 9
28651: PPUSH
28652: LD_VAR 0 10
28656: PPUSH
28657: CALL_OW 488
28661: IFFALSE 28685
28663: PUSH
28664: LD_VAR 0 9
28668: PUSH
28669: LD_VAR 0 10
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_VAR 0 7
28682: IN
28683: NOT
28684: AND
28685: IFFALSE 28704
28687: PUSH
28688: LD_VAR 0 9
28692: PPUSH
28693: LD_VAR 0 10
28697: PPUSH
28698: CALL_OW 458
28702: NOT
28703: AND
28704: IFFALSE 28746
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28706: LD_ADDR_VAR 0 7
28710: PUSH
28711: LD_VAR 0 7
28715: PPUSH
28716: LD_VAR 0 7
28720: PUSH
28721: LD_INT 1
28723: PLUS
28724: PPUSH
28725: LD_VAR 0 9
28729: PUSH
28730: LD_VAR 0 10
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PPUSH
28739: CALL_OW 1
28743: ST_TO_ADDR
28744: GO 28760
// i := i - 1 ;
28746: LD_ADDR_VAR 0 5
28750: PUSH
28751: LD_VAR 0 5
28755: PUSH
28756: LD_INT 1
28758: MINUS
28759: ST_TO_ADDR
// end ;
28760: GO 28562
28762: POP
28763: POP
// for i in tmp do
28764: LD_ADDR_VAR 0 5
28768: PUSH
28769: LD_VAR 0 7
28773: PUSH
28774: FOR_IN
28775: IFFALSE 28813
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28777: LD_VAR 0 1
28781: PPUSH
28782: LD_VAR 0 5
28786: PUSH
28787: LD_INT 1
28789: ARRAY
28790: PPUSH
28791: LD_VAR 0 5
28795: PUSH
28796: LD_INT 2
28798: ARRAY
28799: PPUSH
28800: CALL 27806 0 3
28804: NOT
28805: IFFALSE 28811
// exit ;
28807: POP
28808: POP
28809: GO 28815
28811: GO 28774
28813: POP
28814: POP
// end ;
28815: LD_VAR 0 4
28819: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28820: LD_INT 0
28822: PPUSH
28823: PPUSH
28824: PPUSH
28825: PPUSH
28826: PPUSH
28827: PPUSH
28828: PPUSH
28829: PPUSH
28830: PPUSH
// if GetClass ( unit ) <> class_sniper then
28831: LD_VAR 0 1
28835: PPUSH
28836: CALL_OW 257
28840: PUSH
28841: LD_INT 5
28843: NONEQUAL
28844: IFFALSE 28848
// exit ;
28846: GO 29318
// dist := 8 ;
28848: LD_ADDR_VAR 0 5
28852: PUSH
28853: LD_INT 8
28855: ST_TO_ADDR
// viewRange := 12 ;
28856: LD_ADDR_VAR 0 8
28860: PUSH
28861: LD_INT 12
28863: ST_TO_ADDR
// side := GetSide ( unit ) ;
28864: LD_ADDR_VAR 0 6
28868: PUSH
28869: LD_VAR 0 1
28873: PPUSH
28874: CALL_OW 255
28878: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28879: LD_INT 61
28881: PPUSH
28882: LD_VAR 0 6
28886: PPUSH
28887: CALL_OW 321
28891: PUSH
28892: LD_INT 2
28894: EQUAL
28895: IFFALSE 28905
// viewRange := 16 ;
28897: LD_ADDR_VAR 0 8
28901: PUSH
28902: LD_INT 16
28904: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28905: LD_VAR 0 1
28909: PPUSH
28910: LD_VAR 0 2
28914: PPUSH
28915: LD_VAR 0 3
28919: PPUSH
28920: CALL_OW 297
28924: PUSH
28925: LD_VAR 0 5
28929: GREATER
28930: IFFALSE 29009
// begin ComMoveXY ( unit , x , y ) ;
28932: LD_VAR 0 1
28936: PPUSH
28937: LD_VAR 0 2
28941: PPUSH
28942: LD_VAR 0 3
28946: PPUSH
28947: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28951: LD_INT 35
28953: PPUSH
28954: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28958: LD_VAR 0 1
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: CALL 67116 0 3
28977: NOT
28978: IFFALSE 28982
// exit ;
28980: GO 29318
// until GetDistUnitXY ( unit , x , y ) < dist ;
28982: LD_VAR 0 1
28986: PPUSH
28987: LD_VAR 0 2
28991: PPUSH
28992: LD_VAR 0 3
28996: PPUSH
28997: CALL_OW 297
29001: PUSH
29002: LD_VAR 0 5
29006: LESS
29007: IFFALSE 28951
// end ; ComTurnXY ( unit , x , y ) ;
29009: LD_VAR 0 1
29013: PPUSH
29014: LD_VAR 0 2
29018: PPUSH
29019: LD_VAR 0 3
29023: PPUSH
29024: CALL_OW 118
// repeat if Multiplayer then
29028: LD_OWVAR 4
29032: IFFALSE 29043
// wait ( 35 ) else
29034: LD_INT 35
29036: PPUSH
29037: CALL_OW 67
29041: GO 29050
// wait ( 5 ) ;
29043: LD_INT 5
29045: PPUSH
29046: CALL_OW 67
// _d := GetDir ( unit ) ;
29050: LD_ADDR_VAR 0 11
29054: PUSH
29055: LD_VAR 0 1
29059: PPUSH
29060: CALL_OW 254
29064: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
29065: LD_ADDR_VAR 0 7
29069: PUSH
29070: LD_VAR 0 1
29074: PPUSH
29075: CALL_OW 250
29079: PPUSH
29080: LD_VAR 0 1
29084: PPUSH
29085: CALL_OW 251
29089: PPUSH
29090: LD_VAR 0 2
29094: PPUSH
29095: LD_VAR 0 3
29099: PPUSH
29100: CALL 69752 0 4
29104: ST_TO_ADDR
// until dir = _d ;
29105: LD_VAR 0 7
29109: PUSH
29110: LD_VAR 0 11
29114: EQUAL
29115: IFFALSE 29028
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
29117: LD_ADDR_VAR 0 9
29121: PUSH
29122: LD_VAR 0 1
29126: PPUSH
29127: CALL_OW 250
29131: PPUSH
29132: LD_VAR 0 7
29136: PPUSH
29137: LD_VAR 0 5
29141: PPUSH
29142: CALL_OW 272
29146: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
29147: LD_ADDR_VAR 0 10
29151: PUSH
29152: LD_VAR 0 1
29156: PPUSH
29157: CALL_OW 251
29161: PPUSH
29162: LD_VAR 0 7
29166: PPUSH
29167: LD_VAR 0 5
29171: PPUSH
29172: CALL_OW 273
29176: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29177: LD_VAR 0 9
29181: PPUSH
29182: LD_VAR 0 10
29186: PPUSH
29187: CALL_OW 488
29191: NOT
29192: IFFALSE 29196
// exit ;
29194: GO 29318
// ComAnimCustom ( unit , 1 ) ;
29196: LD_VAR 0 1
29200: PPUSH
29201: LD_INT 1
29203: PPUSH
29204: CALL_OW 592
// p := 0 ;
29208: LD_ADDR_VAR 0 12
29212: PUSH
29213: LD_INT 0
29215: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29216: LD_VAR 0 9
29220: PPUSH
29221: LD_VAR 0 10
29225: PPUSH
29226: LD_VAR 0 6
29230: PPUSH
29231: LD_VAR 0 8
29235: PPUSH
29236: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
29240: LD_INT 35
29242: PPUSH
29243: CALL_OW 67
// p := Inc ( p ) ;
29247: LD_ADDR_VAR 0 12
29251: PUSH
29252: LD_VAR 0 12
29256: PPUSH
29257: CALL 69708 0 1
29261: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
29262: LD_VAR 0 12
29266: PUSH
29267: LD_INT 3
29269: EQUAL
29270: IFTRUE 29284
29272: PUSH
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 302
29282: NOT
29283: OR
29284: IFTRUE 29297
29286: PUSH
29287: LD_VAR 0 1
29291: PPUSH
29292: CALL_OW 301
29296: OR
29297: IFFALSE 29240
// RemoveSeeing ( _x , _y , side ) ;
29299: LD_VAR 0 9
29303: PPUSH
29304: LD_VAR 0 10
29308: PPUSH
29309: LD_VAR 0 6
29313: PPUSH
29314: CALL_OW 331
// end ;
29318: LD_VAR 0 4
29322: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
29323: LD_INT 0
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
// if not unit then
29336: LD_VAR 0 1
29340: NOT
29341: IFFALSE 29345
// exit ;
29343: GO 29616
// side := GetSide ( unit ) ;
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 255
29359: ST_TO_ADDR
// x := GetX ( unit ) ;
29360: LD_ADDR_VAR 0 5
29364: PUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 250
29374: ST_TO_ADDR
// y := GetY ( unit ) ;
29375: LD_ADDR_VAR 0 6
29379: PUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 251
29389: ST_TO_ADDR
// r := 8 ;
29390: LD_ADDR_VAR 0 4
29394: PUSH
29395: LD_INT 8
29397: ST_TO_ADDR
// if x - r < 0 then
29398: LD_VAR 0 5
29402: PUSH
29403: LD_VAR 0 4
29407: MINUS
29408: PUSH
29409: LD_INT 0
29411: LESS
29412: IFFALSE 29424
// min_x := 0 else
29414: LD_ADDR_VAR 0 7
29418: PUSH
29419: LD_INT 0
29421: ST_TO_ADDR
29422: GO 29440
// min_x := x - r ;
29424: LD_ADDR_VAR 0 7
29428: PUSH
29429: LD_VAR 0 5
29433: PUSH
29434: LD_VAR 0 4
29438: MINUS
29439: ST_TO_ADDR
// if y - r < 0 then
29440: LD_VAR 0 6
29444: PUSH
29445: LD_VAR 0 4
29449: MINUS
29450: PUSH
29451: LD_INT 0
29453: LESS
29454: IFFALSE 29466
// min_y := 0 else
29456: LD_ADDR_VAR 0 8
29460: PUSH
29461: LD_INT 0
29463: ST_TO_ADDR
29464: GO 29482
// min_y := y - r ;
29466: LD_ADDR_VAR 0 8
29470: PUSH
29471: LD_VAR 0 6
29475: PUSH
29476: LD_VAR 0 4
29480: MINUS
29481: ST_TO_ADDR
// max_x := x + r ;
29482: LD_ADDR_VAR 0 9
29486: PUSH
29487: LD_VAR 0 5
29491: PUSH
29492: LD_VAR 0 4
29496: PLUS
29497: ST_TO_ADDR
// max_y := y + r ;
29498: LD_ADDR_VAR 0 10
29502: PUSH
29503: LD_VAR 0 6
29507: PUSH
29508: LD_VAR 0 4
29512: PLUS
29513: ST_TO_ADDR
// for _x = min_x to max_x do
29514: LD_ADDR_VAR 0 11
29518: PUSH
29519: DOUBLE
29520: LD_VAR 0 7
29524: DEC
29525: ST_TO_ADDR
29526: LD_VAR 0 9
29530: PUSH
29531: FOR_TO
29532: IFFALSE 29614
// for _y = min_y to max_y do
29534: LD_ADDR_VAR 0 12
29538: PUSH
29539: DOUBLE
29540: LD_VAR 0 8
29544: DEC
29545: ST_TO_ADDR
29546: LD_VAR 0 10
29550: PUSH
29551: FOR_TO
29552: IFFALSE 29610
// begin if not ValidHex ( _x , _y ) then
29554: LD_VAR 0 11
29558: PPUSH
29559: LD_VAR 0 12
29563: PPUSH
29564: CALL_OW 488
29568: NOT
29569: IFFALSE 29573
// continue ;
29571: GO 29551
// if MineAtPos ( _x , _y ) then
29573: LD_VAR 0 11
29577: PPUSH
29578: LD_VAR 0 12
29582: PPUSH
29583: CALL_OW 458
29587: IFFALSE 29608
// ViewMineAtPos ( _x , _y , side ) ;
29589: LD_VAR 0 11
29593: PPUSH
29594: LD_VAR 0 12
29598: PPUSH
29599: LD_VAR 0 3
29603: PPUSH
29604: CALL_OW 457
// end ;
29608: GO 29551
29610: POP
29611: POP
29612: GO 29531
29614: POP
29615: POP
// end ;
29616: LD_VAR 0 2
29620: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
29621: LD_INT 0
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
// if not units then
29630: LD_VAR 0 1
29634: NOT
29635: IFFALSE 29639
// exit ;
29637: GO 30103
// scaners := [ ] ;
29639: LD_ADDR_VAR 0 6
29643: PUSH
29644: EMPTY
29645: ST_TO_ADDR
// for i in units do
29646: LD_ADDR_VAR 0 3
29650: PUSH
29651: LD_VAR 0 1
29655: PUSH
29656: FOR_IN
29657: IFFALSE 29814
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
29659: LD_VAR 0 3
29663: PPUSH
29664: CALL_OW 264
29668: PUSH
29669: LD_INT 11
29671: NONEQUAL
29672: IFTRUE 29686
29674: PUSH
29675: LD_VAR 0 3
29679: PPUSH
29680: CALL_OW 302
29684: NOT
29685: OR
29686: IFTRUE 29703
29688: PUSH
29689: LD_VAR 0 3
29693: PPUSH
29694: CALL_OW 110
29698: PUSH
29699: LD_INT 502
29701: EQUAL
29702: OR
29703: IFFALSE 29707
// continue ;
29705: GO 29656
// ComStop ( i ) ;
29707: LD_VAR 0 3
29711: PPUSH
29712: CALL_OW 141
// x := GetX ( i ) ;
29716: LD_ADDR_VAR 0 4
29720: PUSH
29721: LD_VAR 0 3
29725: PPUSH
29726: CALL_OW 250
29730: ST_TO_ADDR
// y := GetY ( i ) ;
29731: LD_ADDR_VAR 0 5
29735: PUSH
29736: LD_VAR 0 3
29740: PPUSH
29741: CALL_OW 251
29745: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29746: LD_VAR 0 3
29750: PPUSH
29751: CALL_OW 255
29755: PUSH
29756: LD_OWVAR 2
29760: EQUAL
29761: IFFALSE 29780
// PlaySoundXY ( x , y , mineDetector ) ;
29763: LD_VAR 0 4
29767: PPUSH
29768: LD_VAR 0 5
29772: PPUSH
29773: LD_STRING mineDetector
29775: PPUSH
29776: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29780: LD_ADDR_VAR 0 6
29784: PUSH
29785: LD_VAR 0 6
29789: PPUSH
29790: LD_VAR 0 3
29794: PPUSH
29795: CALL 68335 0 2
29799: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29800: LD_VAR 0 3
29804: PPUSH
29805: LD_INT 502
29807: PPUSH
29808: CALL_OW 109
// end ;
29812: GO 29656
29814: POP
29815: POP
// if not scaners then
29816: LD_VAR 0 6
29820: NOT
29821: IFFALSE 29825
// exit ;
29823: GO 30103
// wait ( 3 ) ;
29825: LD_INT 3
29827: PPUSH
29828: CALL_OW 67
// timer := 6 ;
29832: LD_ADDR_VAR 0 7
29836: PUSH
29837: LD_INT 6
29839: ST_TO_ADDR
// repeat for i in scaners do
29840: LD_ADDR_VAR 0 3
29844: PUSH
29845: LD_VAR 0 6
29849: PUSH
29850: FOR_IN
29851: IFFALSE 30001
// begin side := GetSide ( i ) ;
29853: LD_ADDR_VAR 0 8
29857: PUSH
29858: LD_VAR 0 3
29862: PPUSH
29863: CALL_OW 255
29867: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29868: LD_VAR 0 3
29872: PPUSH
29873: CALL_OW 302
29877: NOT
29878: IFTRUE 29891
29880: PUSH
29881: LD_VAR 0 3
29885: PPUSH
29886: CALL_OW 314
29890: OR
29891: IFTRUE 29922
29893: PUSH
29894: LD_VAR 0 3
29898: PPUSH
29899: CALL_OW 263
29903: PUSH
29904: LD_INT 1
29906: EQUAL
29907: IFFALSE 29921
29909: PUSH
29910: LD_VAR 0 3
29914: PPUSH
29915: CALL_OW 311
29919: NOT
29920: AND
29921: OR
29922: IFFALSE 29966
// begin SetUnitDisplayNumber ( i , 0 ) ;
29924: LD_VAR 0 3
29928: PPUSH
29929: LD_INT 0
29931: PPUSH
29932: CALL_OW 505
// SetTag ( i , 0 ) ;
29936: LD_VAR 0 3
29940: PPUSH
29941: LD_INT 0
29943: PPUSH
29944: CALL_OW 109
// scaners := scaners diff i ;
29948: LD_ADDR_VAR 0 6
29952: PUSH
29953: LD_VAR 0 6
29957: PUSH
29958: LD_VAR 0 3
29962: DIFF
29963: ST_TO_ADDR
// continue ;
29964: GO 29850
// end ; if side in [ your_side , 9 ] then
29966: LD_VAR 0 8
29970: PUSH
29971: LD_OWVAR 2
29975: PUSH
29976: LD_INT 9
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: IN
29983: IFFALSE 29999
// SetUnitDisplayNumber ( i , timer ) ;
29985: LD_VAR 0 3
29989: PPUSH
29990: LD_VAR 0 7
29994: PPUSH
29995: CALL_OW 505
// end ;
29999: GO 29850
30001: POP
30002: POP
// if not scaners then
30003: LD_VAR 0 6
30007: NOT
30008: IFFALSE 30012
// exit ;
30010: GO 30103
// timer := Dec ( timer ) ;
30012: LD_ADDR_VAR 0 7
30016: PUSH
30017: LD_VAR 0 7
30021: PPUSH
30022: CALL 69730 0 1
30026: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30027: LD_INT 35
30029: PPUSH
30030: CALL_OW 67
// until timer = 0 ;
30034: LD_VAR 0 7
30038: PUSH
30039: LD_INT 0
30041: EQUAL
30042: IFFALSE 29840
// if not scaners then
30044: LD_VAR 0 6
30048: NOT
30049: IFFALSE 30053
// exit ;
30051: GO 30103
// for i in scaners do
30053: LD_ADDR_VAR 0 3
30057: PUSH
30058: LD_VAR 0 6
30062: PUSH
30063: FOR_IN
30064: IFFALSE 30101
// begin SetUnitDisplayNumber ( i , 0 ) ;
30066: LD_VAR 0 3
30070: PPUSH
30071: LD_INT 0
30073: PPUSH
30074: CALL_OW 505
// SetTag ( i , 0 ) ;
30078: LD_VAR 0 3
30082: PPUSH
30083: LD_INT 0
30085: PPUSH
30086: CALL_OW 109
// RevealDetectorMine ( i ) ;
30090: LD_VAR 0 3
30094: PPUSH
30095: CALL 29323 0 1
// end ;
30099: GO 30063
30101: POP
30102: POP
// end ;
30103: LD_VAR 0 2
30107: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
30108: LD_INT 0
30110: PPUSH
// if p1 = mine_detector_mode then
30111: LD_VAR 0 2
30115: PUSH
30116: LD_INT 103
30118: EQUAL
30119: IFFALSE 30130
// DetectMine ( units ) ;
30121: LD_VAR 0 1
30125: PPUSH
30126: CALL 29621 0 1
// end ; end_of_file
30130: LD_VAR 0 7
30134: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30135: LD_INT 0
30137: PPUSH
30138: PPUSH
// if exist_mode then
30139: LD_VAR 0 2
30143: IFFALSE 30189
// begin unit := CreateCharacter ( prefix & ident ) ;
30145: LD_ADDR_VAR 0 5
30149: PUSH
30150: LD_VAR 0 3
30154: PUSH
30155: LD_VAR 0 1
30159: STR
30160: PPUSH
30161: CALL_OW 34
30165: ST_TO_ADDR
// if unit then
30166: LD_VAR 0 5
30170: IFFALSE 30187
// DeleteCharacters ( prefix & ident ) ;
30172: LD_VAR 0 3
30176: PUSH
30177: LD_VAR 0 1
30181: STR
30182: PPUSH
30183: CALL_OW 40
// end else
30187: GO 30204
// unit := NewCharacter ( ident ) ;
30189: LD_ADDR_VAR 0 5
30193: PUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: CALL_OW 25
30203: ST_TO_ADDR
// result := unit ;
30204: LD_ADDR_VAR 0 4
30208: PUSH
30209: LD_VAR 0 5
30213: ST_TO_ADDR
// end ;
30214: LD_VAR 0 4
30218: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30219: LD_INT 0
30221: PPUSH
30222: PPUSH
// if exist_mode then
30223: LD_VAR 0 2
30227: IFFALSE 30252
// unit := CreateCharacter ( prefix & ident ) else
30229: LD_ADDR_VAR 0 5
30233: PUSH
30234: LD_VAR 0 3
30238: PUSH
30239: LD_VAR 0 1
30243: STR
30244: PPUSH
30245: CALL_OW 34
30249: ST_TO_ADDR
30250: GO 30267
// unit := NewCharacter ( ident ) ;
30252: LD_ADDR_VAR 0 5
30256: PUSH
30257: LD_VAR 0 1
30261: PPUSH
30262: CALL_OW 25
30266: ST_TO_ADDR
// result := unit ;
30267: LD_ADDR_VAR 0 4
30271: PUSH
30272: LD_VAR 0 5
30276: ST_TO_ADDR
// end ;
30277: LD_VAR 0 4
30281: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30282: LD_INT 0
30284: PPUSH
30285: PPUSH
// if not side or not nation then
30286: LD_VAR 0 1
30290: NOT
30291: IFTRUE 30300
30293: PUSH
30294: LD_VAR 0 2
30298: NOT
30299: OR
30300: IFFALSE 30304
// exit ;
30302: GO 31098
// case nation of nation_american :
30304: LD_VAR 0 2
30308: PUSH
30309: LD_INT 1
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30539
30317: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30318: LD_ADDR_VAR 0 4
30322: PUSH
30323: LD_INT 35
30325: PUSH
30326: LD_INT 45
30328: PUSH
30329: LD_INT 46
30331: PUSH
30332: LD_INT 47
30334: PUSH
30335: LD_INT 82
30337: PUSH
30338: LD_INT 83
30340: PUSH
30341: LD_INT 84
30343: PUSH
30344: LD_INT 85
30346: PUSH
30347: LD_INT 86
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: LD_INT 6
30358: PUSH
30359: LD_INT 15
30361: PUSH
30362: LD_INT 16
30364: PUSH
30365: LD_INT 7
30367: PUSH
30368: LD_INT 12
30370: PUSH
30371: LD_INT 13
30373: PUSH
30374: LD_INT 10
30376: PUSH
30377: LD_INT 14
30379: PUSH
30380: LD_INT 20
30382: PUSH
30383: LD_INT 21
30385: PUSH
30386: LD_INT 22
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 32
30394: PUSH
30395: LD_INT 27
30397: PUSH
30398: LD_INT 36
30400: PUSH
30401: LD_INT 69
30403: PUSH
30404: LD_INT 39
30406: PUSH
30407: LD_INT 34
30409: PUSH
30410: LD_INT 40
30412: PUSH
30413: LD_INT 48
30415: PUSH
30416: LD_INT 49
30418: PUSH
30419: LD_INT 50
30421: PUSH
30422: LD_INT 51
30424: PUSH
30425: LD_INT 52
30427: PUSH
30428: LD_INT 53
30430: PUSH
30431: LD_INT 54
30433: PUSH
30434: LD_INT 55
30436: PUSH
30437: LD_INT 56
30439: PUSH
30440: LD_INT 57
30442: PUSH
30443: LD_INT 58
30445: PUSH
30446: LD_INT 59
30448: PUSH
30449: LD_INT 60
30451: PUSH
30452: LD_INT 61
30454: PUSH
30455: LD_INT 62
30457: PUSH
30458: LD_INT 80
30460: PUSH
30461: LD_INT 82
30463: PUSH
30464: LD_INT 83
30466: PUSH
30467: LD_INT 84
30469: PUSH
30470: LD_INT 85
30472: PUSH
30473: LD_INT 86
30475: PUSH
30476: LD_INT 90
30478: PUSH
30479: LD_INT 93
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: ST_TO_ADDR
30537: GO 31020
30539: LD_INT 2
30541: DOUBLE
30542: EQUAL
30543: IFTRUE 30547
30545: GO 30781
30547: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30548: LD_ADDR_VAR 0 4
30552: PUSH
30553: LD_INT 35
30555: PUSH
30556: LD_INT 45
30558: PUSH
30559: LD_INT 46
30561: PUSH
30562: LD_INT 47
30564: PUSH
30565: LD_INT 82
30567: PUSH
30568: LD_INT 83
30570: PUSH
30571: LD_INT 84
30573: PUSH
30574: LD_INT 85
30576: PUSH
30577: LD_INT 87
30579: PUSH
30580: LD_INT 70
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: LD_INT 11
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: LD_INT 4
30594: PUSH
30595: LD_INT 5
30597: PUSH
30598: LD_INT 6
30600: PUSH
30601: LD_INT 15
30603: PUSH
30604: LD_INT 18
30606: PUSH
30607: LD_INT 7
30609: PUSH
30610: LD_INT 17
30612: PUSH
30613: LD_INT 8
30615: PUSH
30616: LD_INT 20
30618: PUSH
30619: LD_INT 21
30621: PUSH
30622: LD_INT 22
30624: PUSH
30625: LD_INT 72
30627: PUSH
30628: LD_INT 26
30630: PUSH
30631: LD_INT 69
30633: PUSH
30634: LD_INT 39
30636: PUSH
30637: LD_INT 40
30639: PUSH
30640: LD_INT 41
30642: PUSH
30643: LD_INT 42
30645: PUSH
30646: LD_INT 43
30648: PUSH
30649: LD_INT 48
30651: PUSH
30652: LD_INT 49
30654: PUSH
30655: LD_INT 50
30657: PUSH
30658: LD_INT 51
30660: PUSH
30661: LD_INT 52
30663: PUSH
30664: LD_INT 53
30666: PUSH
30667: LD_INT 54
30669: PUSH
30670: LD_INT 55
30672: PUSH
30673: LD_INT 56
30675: PUSH
30676: LD_INT 60
30678: PUSH
30679: LD_INT 61
30681: PUSH
30682: LD_INT 62
30684: PUSH
30685: LD_INT 66
30687: PUSH
30688: LD_INT 67
30690: PUSH
30691: LD_INT 68
30693: PUSH
30694: LD_INT 81
30696: PUSH
30697: LD_INT 82
30699: PUSH
30700: LD_INT 83
30702: PUSH
30703: LD_INT 84
30705: PUSH
30706: LD_INT 85
30708: PUSH
30709: LD_INT 87
30711: PUSH
30712: LD_INT 88
30714: PUSH
30715: LD_INT 92
30717: PUSH
30718: LD_INT 94
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: ST_TO_ADDR
30779: GO 31020
30781: LD_INT 3
30783: DOUBLE
30784: EQUAL
30785: IFTRUE 30789
30787: GO 31019
30789: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30790: LD_ADDR_VAR 0 4
30794: PUSH
30795: LD_INT 46
30797: PUSH
30798: LD_INT 47
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: LD_INT 82
30809: PUSH
30810: LD_INT 83
30812: PUSH
30813: LD_INT 84
30815: PUSH
30816: LD_INT 85
30818: PUSH
30819: LD_INT 86
30821: PUSH
30822: LD_INT 11
30824: PUSH
30825: LD_INT 9
30827: PUSH
30828: LD_INT 20
30830: PUSH
30831: LD_INT 19
30833: PUSH
30834: LD_INT 21
30836: PUSH
30837: LD_INT 24
30839: PUSH
30840: LD_INT 22
30842: PUSH
30843: LD_INT 25
30845: PUSH
30846: LD_INT 28
30848: PUSH
30849: LD_INT 29
30851: PUSH
30852: LD_INT 30
30854: PUSH
30855: LD_INT 31
30857: PUSH
30858: LD_INT 37
30860: PUSH
30861: LD_INT 38
30863: PUSH
30864: LD_INT 32
30866: PUSH
30867: LD_INT 27
30869: PUSH
30870: LD_INT 33
30872: PUSH
30873: LD_INT 69
30875: PUSH
30876: LD_INT 39
30878: PUSH
30879: LD_INT 34
30881: PUSH
30882: LD_INT 40
30884: PUSH
30885: LD_INT 71
30887: PUSH
30888: LD_INT 23
30890: PUSH
30891: LD_INT 44
30893: PUSH
30894: LD_INT 48
30896: PUSH
30897: LD_INT 49
30899: PUSH
30900: LD_INT 50
30902: PUSH
30903: LD_INT 51
30905: PUSH
30906: LD_INT 52
30908: PUSH
30909: LD_INT 53
30911: PUSH
30912: LD_INT 54
30914: PUSH
30915: LD_INT 55
30917: PUSH
30918: LD_INT 56
30920: PUSH
30921: LD_INT 57
30923: PUSH
30924: LD_INT 58
30926: PUSH
30927: LD_INT 59
30929: PUSH
30930: LD_INT 63
30932: PUSH
30933: LD_INT 64
30935: PUSH
30936: LD_INT 65
30938: PUSH
30939: LD_INT 82
30941: PUSH
30942: LD_INT 83
30944: PUSH
30945: LD_INT 84
30947: PUSH
30948: LD_INT 85
30950: PUSH
30951: LD_INT 86
30953: PUSH
30954: LD_INT 89
30956: PUSH
30957: LD_INT 91
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
31017: GO 31020
31019: POP
// if state > - 1 and state < 3 then
31020: LD_VAR 0 3
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: GREATER
31029: IFFALSE 31041
31031: PUSH
31032: LD_VAR 0 3
31036: PUSH
31037: LD_INT 3
31039: LESS
31040: AND
31041: IFFALSE 31098
// for i in result do
31043: LD_ADDR_VAR 0 5
31047: PUSH
31048: LD_VAR 0 4
31052: PUSH
31053: FOR_IN
31054: IFFALSE 31096
// if GetTech ( i , side ) <> state then
31056: LD_VAR 0 5
31060: PPUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 321
31070: PUSH
31071: LD_VAR 0 3
31075: NONEQUAL
31076: IFFALSE 31094
// result := result diff i ;
31078: LD_ADDR_VAR 0 4
31082: PUSH
31083: LD_VAR 0 4
31087: PUSH
31088: LD_VAR 0 5
31092: DIFF
31093: ST_TO_ADDR
31094: GO 31053
31096: POP
31097: POP
// end ;
31098: LD_VAR 0 4
31102: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31103: LD_INT 0
31105: PPUSH
31106: PPUSH
31107: PPUSH
// result := true ;
31108: LD_ADDR_VAR 0 3
31112: PUSH
31113: LD_INT 1
31115: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31116: LD_ADDR_VAR 0 5
31120: PUSH
31121: LD_VAR 0 2
31125: PPUSH
31126: CALL_OW 480
31130: ST_TO_ADDR
// if not tmp then
31131: LD_VAR 0 5
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31189
// for i in tmp do
31140: LD_ADDR_VAR 0 4
31144: PUSH
31145: LD_VAR 0 5
31149: PUSH
31150: FOR_IN
31151: IFFALSE 31187
// if GetTech ( i , side ) <> state_researched then
31153: LD_VAR 0 4
31157: PPUSH
31158: LD_VAR 0 1
31162: PPUSH
31163: CALL_OW 321
31167: PUSH
31168: LD_INT 2
31170: NONEQUAL
31171: IFFALSE 31185
// begin result := false ;
31173: LD_ADDR_VAR 0 3
31177: PUSH
31178: LD_INT 0
31180: ST_TO_ADDR
// exit ;
31181: POP
31182: POP
31183: GO 31189
// end ;
31185: GO 31150
31187: POP
31188: POP
// end ;
31189: LD_VAR 0 3
31193: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31194: LD_INT 0
31196: PPUSH
31197: PPUSH
31198: PPUSH
31199: PPUSH
31200: PPUSH
31201: PPUSH
31202: PPUSH
31203: PPUSH
31204: PPUSH
31205: PPUSH
31206: PPUSH
31207: PPUSH
31208: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31209: LD_VAR 0 1
31213: NOT
31214: IFTRUE 31231
31216: PUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: CALL_OW 257
31226: PUSH
31227: LD_INT 9
31229: NONEQUAL
31230: OR
31231: IFFALSE 31235
// exit ;
31233: GO 31814
// side := GetSide ( unit ) ;
31235: LD_ADDR_VAR 0 9
31239: PUSH
31240: LD_VAR 0 1
31244: PPUSH
31245: CALL_OW 255
31249: ST_TO_ADDR
// tech_space := tech_spacanom ;
31250: LD_ADDR_VAR 0 12
31254: PUSH
31255: LD_INT 29
31257: ST_TO_ADDR
// tech_time := tech_taurad ;
31258: LD_ADDR_VAR 0 13
31262: PUSH
31263: LD_INT 28
31265: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31266: LD_ADDR_VAR 0 11
31270: PUSH
31271: LD_VAR 0 1
31275: PPUSH
31276: CALL_OW 310
31280: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31281: LD_VAR 0 11
31285: PPUSH
31286: CALL_OW 247
31290: PUSH
31291: LD_INT 2
31293: EQUAL
31294: IFFALSE 31298
// exit ;
31296: GO 31814
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31298: LD_ADDR_VAR 0 8
31302: PUSH
31303: LD_INT 81
31305: PUSH
31306: LD_VAR 0 9
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: LD_INT 21
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PPUSH
31336: CALL_OW 69
31340: ST_TO_ADDR
// if not tmp then
31341: LD_VAR 0 8
31345: NOT
31346: IFFALSE 31350
// exit ;
31348: GO 31814
// if in_unit then
31350: LD_VAR 0 11
31354: IFFALSE 31378
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31356: LD_ADDR_VAR 0 10
31360: PUSH
31361: LD_VAR 0 8
31365: PPUSH
31366: LD_VAR 0 11
31370: PPUSH
31371: CALL_OW 74
31375: ST_TO_ADDR
31376: GO 31398
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31378: LD_ADDR_VAR 0 10
31382: PUSH
31383: LD_VAR 0 8
31387: PPUSH
31388: LD_VAR 0 1
31392: PPUSH
31393: CALL_OW 74
31397: ST_TO_ADDR
// if not enemy then
31398: LD_VAR 0 10
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31814
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31407: LD_VAR 0 11
31411: IFFALSE 31433
31413: PUSH
31414: LD_VAR 0 11
31418: PPUSH
31419: LD_VAR 0 10
31423: PPUSH
31424: CALL_OW 296
31428: PUSH
31429: LD_INT 13
31431: GREATER
31432: AND
31433: IFTRUE 31455
31435: PUSH
31436: LD_VAR 0 1
31440: PPUSH
31441: LD_VAR 0 10
31445: PPUSH
31446: CALL_OW 296
31450: PUSH
31451: LD_INT 12
31453: GREATER
31454: OR
31455: IFFALSE 31459
// exit ;
31457: GO 31814
// missile := [ 1 ] ;
31459: LD_ADDR_VAR 0 14
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31470: LD_VAR 0 9
31474: PPUSH
31475: LD_VAR 0 12
31479: PPUSH
31480: CALL_OW 325
31484: IFFALSE 31513
// missile := Replace ( missile , missile + 1 , 2 ) ;
31486: LD_ADDR_VAR 0 14
31490: PUSH
31491: LD_VAR 0 14
31495: PPUSH
31496: LD_VAR 0 14
31500: PUSH
31501: LD_INT 1
31503: PLUS
31504: PPUSH
31505: LD_INT 2
31507: PPUSH
31508: CALL_OW 1
31512: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31513: LD_VAR 0 9
31517: PPUSH
31518: LD_VAR 0 13
31522: PPUSH
31523: CALL_OW 325
31527: IFFALSE 31551
31529: PUSH
31530: LD_VAR 0 10
31534: PPUSH
31535: CALL_OW 255
31539: PPUSH
31540: LD_VAR 0 13
31544: PPUSH
31545: CALL_OW 325
31549: NOT
31550: AND
31551: IFFALSE 31580
// missile := Replace ( missile , missile + 1 , 3 ) ;
31553: LD_ADDR_VAR 0 14
31557: PUSH
31558: LD_VAR 0 14
31562: PPUSH
31563: LD_VAR 0 14
31567: PUSH
31568: LD_INT 1
31570: PLUS
31571: PPUSH
31572: LD_INT 3
31574: PPUSH
31575: CALL_OW 1
31579: ST_TO_ADDR
// if missile < 2 then
31580: LD_VAR 0 14
31584: PUSH
31585: LD_INT 2
31587: LESS
31588: IFFALSE 31592
// exit ;
31590: GO 31814
// x := GetX ( enemy ) ;
31592: LD_ADDR_VAR 0 4
31596: PUSH
31597: LD_VAR 0 10
31601: PPUSH
31602: CALL_OW 250
31606: ST_TO_ADDR
// y := GetY ( enemy ) ;
31607: LD_ADDR_VAR 0 5
31611: PUSH
31612: LD_VAR 0 10
31616: PPUSH
31617: CALL_OW 251
31621: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31622: LD_ADDR_VAR 0 6
31626: PUSH
31627: LD_VAR 0 4
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PPUSH
31636: LD_INT 1
31638: PPUSH
31639: CALL_OW 12
31643: PLUS
31644: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31645: LD_ADDR_VAR 0 7
31649: PUSH
31650: LD_VAR 0 5
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PPUSH
31659: LD_INT 1
31661: PPUSH
31662: CALL_OW 12
31666: PLUS
31667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31668: LD_VAR 0 6
31672: PPUSH
31673: LD_VAR 0 7
31677: PPUSH
31678: CALL_OW 488
31682: NOT
31683: IFFALSE 31705
// begin _x := x ;
31685: LD_ADDR_VAR 0 6
31689: PUSH
31690: LD_VAR 0 4
31694: ST_TO_ADDR
// _y := y ;
31695: LD_ADDR_VAR 0 7
31699: PUSH
31700: LD_VAR 0 5
31704: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31705: LD_ADDR_VAR 0 3
31709: PUSH
31710: LD_INT 1
31712: PPUSH
31713: LD_VAR 0 14
31717: PPUSH
31718: CALL_OW 12
31722: ST_TO_ADDR
// case i of 1 :
31723: LD_VAR 0 3
31727: PUSH
31728: LD_INT 1
31730: DOUBLE
31731: EQUAL
31732: IFTRUE 31736
31734: GO 31753
31736: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31737: LD_VAR 0 1
31741: PPUSH
31742: LD_VAR 0 10
31746: PPUSH
31747: CALL_OW 115
31751: GO 31814
31753: LD_INT 2
31755: DOUBLE
31756: EQUAL
31757: IFTRUE 31761
31759: GO 31783
31761: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31762: LD_VAR 0 1
31766: PPUSH
31767: LD_VAR 0 6
31771: PPUSH
31772: LD_VAR 0 7
31776: PPUSH
31777: CALL_OW 153
31781: GO 31814
31783: LD_INT 3
31785: DOUBLE
31786: EQUAL
31787: IFTRUE 31791
31789: GO 31813
31791: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31792: LD_VAR 0 1
31796: PPUSH
31797: LD_VAR 0 6
31801: PPUSH
31802: LD_VAR 0 7
31806: PPUSH
31807: CALL_OW 154
31811: GO 31814
31813: POP
// end ;
31814: LD_VAR 0 2
31818: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31819: LD_INT 0
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
31826: PPUSH
// if not unit or not building then
31827: LD_VAR 0 1
31831: NOT
31832: IFTRUE 31841
31834: PUSH
31835: LD_VAR 0 2
31839: NOT
31840: OR
31841: IFFALSE 31845
// exit ;
31843: GO 32003
// x := GetX ( building ) ;
31845: LD_ADDR_VAR 0 5
31849: PUSH
31850: LD_VAR 0 2
31854: PPUSH
31855: CALL_OW 250
31859: ST_TO_ADDR
// y := GetY ( building ) ;
31860: LD_ADDR_VAR 0 6
31864: PUSH
31865: LD_VAR 0 2
31869: PPUSH
31870: CALL_OW 251
31874: ST_TO_ADDR
// for i := 0 to 5 do
31875: LD_ADDR_VAR 0 4
31879: PUSH
31880: DOUBLE
31881: LD_INT 0
31883: DEC
31884: ST_TO_ADDR
31885: LD_INT 5
31887: PUSH
31888: FOR_TO
31889: IFFALSE 32001
// begin _x := ShiftX ( x , i , 3 ) ;
31891: LD_ADDR_VAR 0 7
31895: PUSH
31896: LD_VAR 0 5
31900: PPUSH
31901: LD_VAR 0 4
31905: PPUSH
31906: LD_INT 3
31908: PPUSH
31909: CALL_OW 272
31913: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31914: LD_ADDR_VAR 0 8
31918: PUSH
31919: LD_VAR 0 6
31923: PPUSH
31924: LD_VAR 0 4
31928: PPUSH
31929: LD_INT 3
31931: PPUSH
31932: CALL_OW 273
31936: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31937: LD_VAR 0 7
31941: PPUSH
31942: LD_VAR 0 8
31946: PPUSH
31947: CALL_OW 488
31951: NOT
31952: IFFALSE 31956
// continue ;
31954: GO 31888
// if HexInfo ( _x , _y ) = 0 then
31956: LD_VAR 0 7
31960: PPUSH
31961: LD_VAR 0 8
31965: PPUSH
31966: CALL_OW 428
31970: PUSH
31971: LD_INT 0
31973: EQUAL
31974: IFFALSE 31999
// begin ComMoveXY ( unit , _x , _y ) ;
31976: LD_VAR 0 1
31980: PPUSH
31981: LD_VAR 0 7
31985: PPUSH
31986: LD_VAR 0 8
31990: PPUSH
31991: CALL_OW 111
// exit ;
31995: POP
31996: POP
31997: GO 32003
// end ; end ;
31999: GO 31888
32001: POP
32002: POP
// end ;
32003: LD_VAR 0 3
32007: RET
// export function ScanBase ( side , base_area ) ; begin
32008: LD_INT 0
32010: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32011: LD_ADDR_VAR 0 3
32015: PUSH
32016: LD_VAR 0 2
32020: PPUSH
32021: LD_INT 81
32023: PUSH
32024: LD_VAR 0 1
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PPUSH
32033: CALL_OW 70
32037: ST_TO_ADDR
// end ;
32038: LD_VAR 0 3
32042: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32043: LD_INT 0
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
// result := false ;
32049: LD_ADDR_VAR 0 2
32053: PUSH
32054: LD_INT 0
32056: ST_TO_ADDR
// side := GetSide ( unit ) ;
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_VAR 0 1
32066: PPUSH
32067: CALL_OW 255
32071: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32072: LD_ADDR_VAR 0 4
32076: PUSH
32077: LD_VAR 0 1
32081: PPUSH
32082: CALL_OW 248
32086: ST_TO_ADDR
// case nat of 1 :
32087: LD_VAR 0 4
32091: PUSH
32092: LD_INT 1
32094: DOUBLE
32095: EQUAL
32096: IFTRUE 32100
32098: GO 32111
32100: POP
// tech := tech_lassight ; 2 :
32101: LD_ADDR_VAR 0 5
32105: PUSH
32106: LD_INT 12
32108: ST_TO_ADDR
32109: GO 32150
32111: LD_INT 2
32113: DOUBLE
32114: EQUAL
32115: IFTRUE 32119
32117: GO 32130
32119: POP
// tech := tech_mortar ; 3 :
32120: LD_ADDR_VAR 0 5
32124: PUSH
32125: LD_INT 41
32127: ST_TO_ADDR
32128: GO 32150
32130: LD_INT 3
32132: DOUBLE
32133: EQUAL
32134: IFTRUE 32138
32136: GO 32149
32138: POP
// tech := tech_bazooka ; end ;
32139: LD_ADDR_VAR 0 5
32143: PUSH
32144: LD_INT 44
32146: ST_TO_ADDR
32147: GO 32150
32149: POP
// if Researched ( side , tech ) then
32150: LD_VAR 0 3
32154: PPUSH
32155: LD_VAR 0 5
32159: PPUSH
32160: CALL_OW 325
32164: IFFALSE 32191
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32166: LD_ADDR_VAR 0 2
32170: PUSH
32171: LD_INT 5
32173: PUSH
32174: LD_INT 8
32176: PUSH
32177: LD_INT 9
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: PUSH
32185: LD_VAR 0 4
32189: ARRAY
32190: ST_TO_ADDR
// end ;
32191: LD_VAR 0 2
32195: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32196: LD_INT 0
32198: PPUSH
32199: PPUSH
32200: PPUSH
// if not mines then
32201: LD_VAR 0 2
32205: NOT
32206: IFFALSE 32210
// exit ;
32208: GO 32354
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32210: LD_ADDR_VAR 0 5
32214: PUSH
32215: LD_INT 81
32217: PUSH
32218: LD_VAR 0 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 3
32229: PUSH
32230: LD_INT 21
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PPUSH
32248: CALL_OW 69
32252: ST_TO_ADDR
// for i in mines do
32253: LD_ADDR_VAR 0 4
32257: PUSH
32258: LD_VAR 0 2
32262: PUSH
32263: FOR_IN
32264: IFFALSE 32352
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32266: LD_VAR 0 4
32270: PUSH
32271: LD_INT 1
32273: ARRAY
32274: PPUSH
32275: LD_VAR 0 4
32279: PUSH
32280: LD_INT 2
32282: ARRAY
32283: PPUSH
32284: CALL_OW 458
32288: NOT
32289: IFFALSE 32293
// continue ;
32291: GO 32263
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32293: LD_VAR 0 4
32297: PUSH
32298: LD_INT 1
32300: ARRAY
32301: PPUSH
32302: LD_VAR 0 4
32306: PUSH
32307: LD_INT 2
32309: ARRAY
32310: PPUSH
32311: CALL_OW 428
32315: PUSH
32316: LD_VAR 0 5
32320: IN
32321: IFFALSE 32350
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32323: LD_VAR 0 4
32327: PUSH
32328: LD_INT 1
32330: ARRAY
32331: PPUSH
32332: LD_VAR 0 4
32336: PUSH
32337: LD_INT 2
32339: ARRAY
32340: PPUSH
32341: LD_VAR 0 1
32345: PPUSH
32346: CALL_OW 456
// end ;
32350: GO 32263
32352: POP
32353: POP
// end ;
32354: LD_VAR 0 3
32358: RET
// export function Count ( array ) ; begin
32359: LD_INT 0
32361: PPUSH
// result := array + 0 ;
32362: LD_ADDR_VAR 0 2
32366: PUSH
32367: LD_VAR 0 1
32371: PUSH
32372: LD_INT 0
32374: PLUS
32375: ST_TO_ADDR
// end ;
32376: LD_VAR 0 2
32380: RET
// export function IsEmpty ( building ) ; begin
32381: LD_INT 0
32383: PPUSH
// if not building then
32384: LD_VAR 0 1
32388: NOT
32389: IFFALSE 32393
// exit ;
32391: GO 32436
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32393: LD_ADDR_VAR 0 2
32397: PUSH
32398: LD_VAR 0 1
32402: PUSH
32403: LD_INT 22
32405: PUSH
32406: LD_VAR 0 1
32410: PPUSH
32411: CALL_OW 255
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 58
32422: PUSH
32423: EMPTY
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PPUSH
32430: CALL_OW 69
32434: IN
32435: ST_TO_ADDR
// end ;
32436: LD_VAR 0 2
32440: RET
// export function IsNotFull ( building ) ; var places ; begin
32441: LD_INT 0
32443: PPUSH
32444: PPUSH
// if not building then
32445: LD_VAR 0 1
32449: NOT
32450: IFFALSE 32454
// exit ;
32452: GO 32482
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32454: LD_ADDR_VAR 0 2
32458: PUSH
32459: LD_VAR 0 1
32463: PPUSH
32464: LD_INT 3
32466: PUSH
32467: LD_INT 62
32469: PUSH
32470: EMPTY
32471: LIST
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PPUSH
32477: CALL_OW 72
32481: ST_TO_ADDR
// end ;
32482: LD_VAR 0 2
32486: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32487: LD_INT 0
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
// tmp := [ ] ;
32493: LD_ADDR_VAR 0 3
32497: PUSH
32498: EMPTY
32499: ST_TO_ADDR
// list := [ ] ;
32500: LD_ADDR_VAR 0 5
32504: PUSH
32505: EMPTY
32506: ST_TO_ADDR
// for i = 16 to 25 do
32507: LD_ADDR_VAR 0 4
32511: PUSH
32512: DOUBLE
32513: LD_INT 16
32515: DEC
32516: ST_TO_ADDR
32517: LD_INT 25
32519: PUSH
32520: FOR_TO
32521: IFFALSE 32594
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32523: LD_ADDR_VAR 0 3
32527: PUSH
32528: LD_VAR 0 3
32532: PUSH
32533: LD_INT 22
32535: PUSH
32536: LD_VAR 0 1
32540: PPUSH
32541: CALL_OW 255
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 91
32552: PUSH
32553: LD_VAR 0 1
32557: PUSH
32558: LD_INT 6
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 30
32568: PUSH
32569: LD_VAR 0 4
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: PUSH
32583: EMPTY
32584: LIST
32585: PPUSH
32586: CALL_OW 69
32590: ADD
32591: ST_TO_ADDR
32592: GO 32520
32594: POP
32595: POP
// for i = 1 to tmp do
32596: LD_ADDR_VAR 0 4
32600: PUSH
32601: DOUBLE
32602: LD_INT 1
32604: DEC
32605: ST_TO_ADDR
32606: LD_VAR 0 3
32610: PUSH
32611: FOR_TO
32612: IFFALSE 32700
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32614: LD_ADDR_VAR 0 5
32618: PUSH
32619: LD_VAR 0 5
32623: PUSH
32624: LD_VAR 0 3
32628: PUSH
32629: LD_VAR 0 4
32633: ARRAY
32634: PPUSH
32635: CALL_OW 266
32639: PUSH
32640: LD_VAR 0 3
32644: PUSH
32645: LD_VAR 0 4
32649: ARRAY
32650: PPUSH
32651: CALL_OW 250
32655: PUSH
32656: LD_VAR 0 3
32660: PUSH
32661: LD_VAR 0 4
32665: ARRAY
32666: PPUSH
32667: CALL_OW 251
32671: PUSH
32672: LD_VAR 0 3
32676: PUSH
32677: LD_VAR 0 4
32681: ARRAY
32682: PPUSH
32683: CALL_OW 254
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: PUSH
32694: EMPTY
32695: LIST
32696: ADD
32697: ST_TO_ADDR
32698: GO 32611
32700: POP
32701: POP
// result := list ;
32702: LD_ADDR_VAR 0 2
32706: PUSH
32707: LD_VAR 0 5
32711: ST_TO_ADDR
// end ;
32712: LD_VAR 0 2
32716: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32717: LD_INT 0
32719: PPUSH
32720: PPUSH
32721: PPUSH
32722: PPUSH
32723: PPUSH
32724: PPUSH
32725: PPUSH
// if not factory then
32726: LD_VAR 0 1
32730: NOT
32731: IFFALSE 32735
// exit ;
32733: GO 33338
// if control = control_apeman then
32735: LD_VAR 0 4
32739: PUSH
32740: LD_INT 5
32742: EQUAL
32743: IFFALSE 32852
// begin tmp := UnitsInside ( factory ) ;
32745: LD_ADDR_VAR 0 8
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 313
32759: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32760: LD_VAR 0 8
32764: PPUSH
32765: LD_INT 25
32767: PUSH
32768: LD_INT 12
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PPUSH
32775: CALL_OW 72
32779: NOT
32780: IFFALSE 32790
// control := control_manual ;
32782: LD_ADDR_VAR 0 4
32786: PUSH
32787: LD_INT 1
32789: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32790: LD_ADDR_VAR 0 8
32794: PUSH
32795: LD_VAR 0 1
32799: PPUSH
32800: CALL 32487 0 1
32804: ST_TO_ADDR
// if tmp then
32805: LD_VAR 0 8
32809: IFFALSE 32852
// begin for i in tmp do
32811: LD_ADDR_VAR 0 7
32815: PUSH
32816: LD_VAR 0 8
32820: PUSH
32821: FOR_IN
32822: IFFALSE 32850
// if i [ 1 ] = b_ext_radio then
32824: LD_VAR 0 7
32828: PUSH
32829: LD_INT 1
32831: ARRAY
32832: PUSH
32833: LD_INT 22
32835: EQUAL
32836: IFFALSE 32848
// begin control := control_remote ;
32838: LD_ADDR_VAR 0 4
32842: PUSH
32843: LD_INT 2
32845: ST_TO_ADDR
// break ;
32846: GO 32850
// end ;
32848: GO 32821
32850: POP
32851: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32852: LD_VAR 0 1
32856: PPUSH
32857: LD_VAR 0 2
32861: PPUSH
32862: LD_VAR 0 3
32866: PPUSH
32867: LD_VAR 0 4
32871: PPUSH
32872: LD_VAR 0 5
32876: PPUSH
32877: CALL_OW 448
32881: IFFALSE 32916
// begin result := [ chassis , engine , control , weapon ] ;
32883: LD_ADDR_VAR 0 6
32887: PUSH
32888: LD_VAR 0 2
32892: PUSH
32893: LD_VAR 0 3
32897: PUSH
32898: LD_VAR 0 4
32902: PUSH
32903: LD_VAR 0 5
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
// exit ;
32914: GO 33338
// end ; _chassis := AvailableChassisList ( factory ) ;
32916: LD_ADDR_VAR 0 9
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 475
32930: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32931: LD_ADDR_VAR 0 11
32935: PUSH
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL_OW 476
32945: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32946: LD_ADDR_VAR 0 12
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 477
32960: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32961: LD_ADDR_VAR 0 10
32965: PUSH
32966: LD_VAR 0 1
32970: PPUSH
32971: CALL_OW 478
32975: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32976: LD_VAR 0 9
32980: NOT
32981: IFTRUE 32990
32983: PUSH
32984: LD_VAR 0 11
32988: NOT
32989: OR
32990: IFTRUE 32999
32992: PUSH
32993: LD_VAR 0 12
32997: NOT
32998: OR
32999: IFTRUE 33008
33001: PUSH
33002: LD_VAR 0 10
33006: NOT
33007: OR
33008: IFFALSE 33043
// begin result := [ chassis , engine , control , weapon ] ;
33010: LD_ADDR_VAR 0 6
33014: PUSH
33015: LD_VAR 0 2
33019: PUSH
33020: LD_VAR 0 3
33024: PUSH
33025: LD_VAR 0 4
33029: PUSH
33030: LD_VAR 0 5
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: ST_TO_ADDR
// exit ;
33041: GO 33338
// end ; if not chassis in _chassis then
33043: LD_VAR 0 2
33047: PUSH
33048: LD_VAR 0 9
33052: IN
33053: NOT
33054: IFFALSE 33080
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33056: LD_ADDR_VAR 0 2
33060: PUSH
33061: LD_VAR 0 9
33065: PUSH
33066: LD_INT 1
33068: PPUSH
33069: LD_VAR 0 9
33073: PPUSH
33074: CALL_OW 12
33078: ARRAY
33079: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33080: LD_VAR 0 2
33084: PPUSH
33085: LD_VAR 0 3
33089: PPUSH
33090: CALL 33343 0 2
33094: NOT
33095: IFFALSE 33156
// repeat engine := _engine [ 1 ] ;
33097: LD_ADDR_VAR 0 3
33101: PUSH
33102: LD_VAR 0 11
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33111: LD_ADDR_VAR 0 11
33115: PUSH
33116: LD_VAR 0 11
33120: PPUSH
33121: LD_INT 1
33123: PPUSH
33124: CALL_OW 3
33128: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33129: LD_VAR 0 2
33133: PPUSH
33134: LD_VAR 0 3
33138: PPUSH
33139: CALL 33343 0 2
33143: IFTRUE 33154
33145: PUSH
33146: LD_VAR 0 11
33150: PUSH
33151: EMPTY
33152: EQUAL
33153: OR
33154: IFFALSE 33097
// if not control in _control then
33156: LD_VAR 0 4
33160: PUSH
33161: LD_VAR 0 12
33165: IN
33166: NOT
33167: IFFALSE 33193
// control := _control [ rand ( 1 , _control ) ] ;
33169: LD_ADDR_VAR 0 4
33173: PUSH
33174: LD_VAR 0 12
33178: PUSH
33179: LD_INT 1
33181: PPUSH
33182: LD_VAR 0 12
33186: PPUSH
33187: CALL_OW 12
33191: ARRAY
33192: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33193: LD_VAR 0 2
33197: PPUSH
33198: LD_VAR 0 5
33202: PPUSH
33203: CALL 33565 0 2
33207: NOT
33208: IFFALSE 33269
// repeat weapon := _weapon [ 1 ] ;
33210: LD_ADDR_VAR 0 5
33214: PUSH
33215: LD_VAR 0 10
33219: PUSH
33220: LD_INT 1
33222: ARRAY
33223: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33224: LD_ADDR_VAR 0 10
33228: PUSH
33229: LD_VAR 0 10
33233: PPUSH
33234: LD_INT 1
33236: PPUSH
33237: CALL_OW 3
33241: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33242: LD_VAR 0 2
33246: PPUSH
33247: LD_VAR 0 5
33251: PPUSH
33252: CALL 33565 0 2
33256: IFTRUE 33267
33258: PUSH
33259: LD_VAR 0 10
33263: PUSH
33264: EMPTY
33265: EQUAL
33266: OR
33267: IFFALSE 33210
// result := [ ] ;
33269: LD_ADDR_VAR 0 6
33273: PUSH
33274: EMPTY
33275: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33276: LD_VAR 0 1
33280: PPUSH
33281: LD_VAR 0 2
33285: PPUSH
33286: LD_VAR 0 3
33290: PPUSH
33291: LD_VAR 0 4
33295: PPUSH
33296: LD_VAR 0 5
33300: PPUSH
33301: CALL_OW 448
33305: IFFALSE 33338
// result := [ chassis , engine , control , weapon ] ;
33307: LD_ADDR_VAR 0 6
33311: PUSH
33312: LD_VAR 0 2
33316: PUSH
33317: LD_VAR 0 3
33321: PUSH
33322: LD_VAR 0 4
33326: PUSH
33327: LD_VAR 0 5
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: ST_TO_ADDR
// end ;
33338: LD_VAR 0 6
33342: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33343: LD_INT 0
33345: PPUSH
// if not chassis or not engine then
33346: LD_VAR 0 1
33350: NOT
33351: IFTRUE 33360
33353: PUSH
33354: LD_VAR 0 2
33358: NOT
33359: OR
33360: IFFALSE 33364
// exit ;
33362: GO 33560
// case engine of engine_solar :
33364: LD_VAR 0 2
33368: PUSH
33369: LD_INT 2
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33415
33377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_INT 11
33385: PUSH
33386: LD_INT 12
33388: PUSH
33389: LD_INT 13
33391: PUSH
33392: LD_INT 14
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 3
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
33413: GO 33544
33415: LD_INT 1
33417: DOUBLE
33418: EQUAL
33419: IFTRUE 33423
33421: GO 33485
33423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33424: LD_ADDR_VAR 0 3
33428: PUSH
33429: LD_INT 11
33431: PUSH
33432: LD_INT 12
33434: PUSH
33435: LD_INT 13
33437: PUSH
33438: LD_INT 14
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: LD_INT 3
33449: PUSH
33450: LD_INT 4
33452: PUSH
33453: LD_INT 5
33455: PUSH
33456: LD_INT 21
33458: PUSH
33459: LD_INT 23
33461: PUSH
33462: LD_INT 22
33464: PUSH
33465: LD_INT 24
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: ST_TO_ADDR
33483: GO 33544
33485: LD_INT 3
33487: DOUBLE
33488: EQUAL
33489: IFTRUE 33493
33491: GO 33543
33493: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33494: LD_ADDR_VAR 0 3
33498: PUSH
33499: LD_INT 13
33501: PUSH
33502: LD_INT 14
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: LD_INT 3
33510: PUSH
33511: LD_INT 4
33513: PUSH
33514: LD_INT 5
33516: PUSH
33517: LD_INT 21
33519: PUSH
33520: LD_INT 22
33522: PUSH
33523: LD_INT 23
33525: PUSH
33526: LD_INT 24
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: ST_TO_ADDR
33541: GO 33544
33543: POP
// result := ( chassis in result ) ;
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: LD_VAR 0 1
33553: PUSH
33554: LD_VAR 0 3
33558: IN
33559: ST_TO_ADDR
// end ;
33560: LD_VAR 0 3
33564: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33565: LD_INT 0
33567: PPUSH
// if not chassis or not weapon then
33568: LD_VAR 0 1
33572: NOT
33573: IFTRUE 33582
33575: PUSH
33576: LD_VAR 0 2
33580: NOT
33581: OR
33582: IFFALSE 33586
// exit ;
33584: GO 34680
// case weapon of us_machine_gun :
33586: LD_VAR 0 2
33590: PUSH
33591: LD_INT 2
33593: DOUBLE
33594: EQUAL
33595: IFTRUE 33599
33597: GO 33629
33599: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33600: LD_ADDR_VAR 0 3
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: LD_INT 2
33610: PUSH
33611: LD_INT 3
33613: PUSH
33614: LD_INT 4
33616: PUSH
33617: LD_INT 5
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
33627: GO 34664
33629: LD_INT 3
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33637
33635: GO 33667
33637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33638: LD_ADDR_VAR 0 3
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 3
33651: PUSH
33652: LD_INT 4
33654: PUSH
33655: LD_INT 5
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: ST_TO_ADDR
33665: GO 34664
33667: LD_INT 11
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33675
33673: GO 33705
33675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: LD_INT 4
33692: PUSH
33693: LD_INT 5
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: ST_TO_ADDR
33703: GO 34664
33705: LD_INT 4
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33713
33711: GO 33739
33713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33714: LD_ADDR_VAR 0 3
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: LD_INT 3
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: LD_INT 5
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
33737: GO 34664
33739: LD_INT 5
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33747
33745: GO 33773
33747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33748: LD_ADDR_VAR 0 3
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 3
33758: PUSH
33759: LD_INT 4
33761: PUSH
33762: LD_INT 5
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: ST_TO_ADDR
33771: GO 34664
33773: LD_INT 9
33775: DOUBLE
33776: EQUAL
33777: IFTRUE 33781
33779: GO 33807
33781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33782: LD_ADDR_VAR 0 3
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: LD_INT 4
33795: PUSH
33796: LD_INT 5
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: ST_TO_ADDR
33805: GO 34664
33807: LD_INT 7
33809: DOUBLE
33810: EQUAL
33811: IFTRUE 33815
33813: GO 33841
33815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33816: LD_ADDR_VAR 0 3
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: LD_INT 4
33829: PUSH
33830: LD_INT 5
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: ST_TO_ADDR
33839: GO 34664
33841: LD_INT 12
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33849
33847: GO 33875
33849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33850: LD_ADDR_VAR 0 3
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: LD_INT 3
33860: PUSH
33861: LD_INT 4
33863: PUSH
33864: LD_INT 5
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
33873: GO 34664
33875: LD_INT 13
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33883
33881: GO 33909
33883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33884: LD_ADDR_VAR 0 3
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 3
33894: PUSH
33895: LD_INT 4
33897: PUSH
33898: LD_INT 5
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: ST_TO_ADDR
33907: GO 34664
33909: LD_INT 14
33911: DOUBLE
33912: EQUAL
33913: IFTRUE 33917
33915: GO 33935
33917: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33918: LD_ADDR_VAR 0 3
33922: PUSH
33923: LD_INT 4
33925: PUSH
33926: LD_INT 5
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: ST_TO_ADDR
33933: GO 34664
33935: LD_INT 6
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33943
33941: GO 33961
33943: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33944: LD_ADDR_VAR 0 3
33948: PUSH
33949: LD_INT 4
33951: PUSH
33952: LD_INT 5
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: ST_TO_ADDR
33959: GO 34664
33961: LD_INT 10
33963: DOUBLE
33964: EQUAL
33965: IFTRUE 33969
33967: GO 33987
33969: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33970: LD_ADDR_VAR 0 3
33974: PUSH
33975: LD_INT 4
33977: PUSH
33978: LD_INT 5
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: ST_TO_ADDR
33985: GO 34664
33987: LD_INT 22
33989: DOUBLE
33990: EQUAL
33991: IFTRUE 33995
33993: GO 34021
33995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33996: LD_ADDR_VAR 0 3
34000: PUSH
34001: LD_INT 11
34003: PUSH
34004: LD_INT 12
34006: PUSH
34007: LD_INT 13
34009: PUSH
34010: LD_INT 14
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: ST_TO_ADDR
34019: GO 34664
34021: LD_INT 23
34023: DOUBLE
34024: EQUAL
34025: IFTRUE 34029
34027: GO 34055
34029: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34030: LD_ADDR_VAR 0 3
34034: PUSH
34035: LD_INT 11
34037: PUSH
34038: LD_INT 12
34040: PUSH
34041: LD_INT 13
34043: PUSH
34044: LD_INT 14
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: ST_TO_ADDR
34053: GO 34664
34055: LD_INT 24
34057: DOUBLE
34058: EQUAL
34059: IFTRUE 34063
34061: GO 34089
34063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34064: LD_ADDR_VAR 0 3
34068: PUSH
34069: LD_INT 11
34071: PUSH
34072: LD_INT 12
34074: PUSH
34075: LD_INT 13
34077: PUSH
34078: LD_INT 14
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: ST_TO_ADDR
34087: GO 34664
34089: LD_INT 30
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34097
34095: GO 34123
34097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: LD_INT 11
34105: PUSH
34106: LD_INT 12
34108: PUSH
34109: LD_INT 13
34111: PUSH
34112: LD_INT 14
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: ST_TO_ADDR
34121: GO 34664
34123: LD_INT 25
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34131
34129: GO 34149
34131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34132: LD_ADDR_VAR 0 3
34136: PUSH
34137: LD_INT 13
34139: PUSH
34140: LD_INT 14
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: ST_TO_ADDR
34147: GO 34664
34149: LD_INT 27
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34157
34155: GO 34175
34157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34158: LD_ADDR_VAR 0 3
34162: PUSH
34163: LD_INT 13
34165: PUSH
34166: LD_INT 14
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: ST_TO_ADDR
34173: GO 34664
34175: LD_INT 92
34177: DOUBLE
34178: EQUAL
34179: IFTRUE 34183
34181: GO 34209
34183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34184: LD_ADDR_VAR 0 3
34188: PUSH
34189: LD_INT 11
34191: PUSH
34192: LD_INT 12
34194: PUSH
34195: LD_INT 13
34197: PUSH
34198: LD_INT 14
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: ST_TO_ADDR
34207: GO 34664
34209: LD_INT 28
34211: DOUBLE
34212: EQUAL
34213: IFTRUE 34217
34215: GO 34235
34217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34218: LD_ADDR_VAR 0 3
34222: PUSH
34223: LD_INT 13
34225: PUSH
34226: LD_INT 14
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: ST_TO_ADDR
34233: GO 34664
34235: LD_INT 29
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34243
34241: GO 34261
34243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34244: LD_ADDR_VAR 0 3
34248: PUSH
34249: LD_INT 13
34251: PUSH
34252: LD_INT 14
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: ST_TO_ADDR
34259: GO 34664
34261: LD_INT 31
34263: DOUBLE
34264: EQUAL
34265: IFTRUE 34269
34267: GO 34287
34269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34270: LD_ADDR_VAR 0 3
34274: PUSH
34275: LD_INT 13
34277: PUSH
34278: LD_INT 14
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: ST_TO_ADDR
34285: GO 34664
34287: LD_INT 26
34289: DOUBLE
34290: EQUAL
34291: IFTRUE 34295
34293: GO 34313
34295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34296: LD_ADDR_VAR 0 3
34300: PUSH
34301: LD_INT 13
34303: PUSH
34304: LD_INT 14
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 34664
34313: LD_INT 42
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34347
34321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 21
34329: PUSH
34330: LD_INT 22
34332: PUSH
34333: LD_INT 23
34335: PUSH
34336: LD_INT 24
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: ST_TO_ADDR
34345: GO 34664
34347: LD_INT 43
34349: DOUBLE
34350: EQUAL
34351: IFTRUE 34355
34353: GO 34381
34355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34356: LD_ADDR_VAR 0 3
34360: PUSH
34361: LD_INT 21
34363: PUSH
34364: LD_INT 22
34366: PUSH
34367: LD_INT 23
34369: PUSH
34370: LD_INT 24
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
34379: GO 34664
34381: LD_INT 44
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34389
34387: GO 34415
34389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34390: LD_ADDR_VAR 0 3
34394: PUSH
34395: LD_INT 21
34397: PUSH
34398: LD_INT 22
34400: PUSH
34401: LD_INT 23
34403: PUSH
34404: LD_INT 24
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: ST_TO_ADDR
34413: GO 34664
34415: LD_INT 45
34417: DOUBLE
34418: EQUAL
34419: IFTRUE 34423
34421: GO 34449
34423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_INT 21
34431: PUSH
34432: LD_INT 22
34434: PUSH
34435: LD_INT 23
34437: PUSH
34438: LD_INT 24
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
34447: GO 34664
34449: LD_INT 49
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34457
34455: GO 34483
34457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_INT 21
34465: PUSH
34466: LD_INT 22
34468: PUSH
34469: LD_INT 23
34471: PUSH
34472: LD_INT 24
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
34481: GO 34664
34483: LD_INT 51
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34491
34489: GO 34517
34491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: LD_INT 21
34499: PUSH
34500: LD_INT 22
34502: PUSH
34503: LD_INT 23
34505: PUSH
34506: LD_INT 24
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: ST_TO_ADDR
34515: GO 34664
34517: LD_INT 52
34519: DOUBLE
34520: EQUAL
34521: IFTRUE 34525
34523: GO 34551
34525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_INT 21
34533: PUSH
34534: LD_INT 22
34536: PUSH
34537: LD_INT 23
34539: PUSH
34540: LD_INT 24
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
34549: GO 34664
34551: LD_INT 53
34553: DOUBLE
34554: EQUAL
34555: IFTRUE 34559
34557: GO 34577
34559: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34560: LD_ADDR_VAR 0 3
34564: PUSH
34565: LD_INT 23
34567: PUSH
34568: LD_INT 24
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: ST_TO_ADDR
34575: GO 34664
34577: LD_INT 46
34579: DOUBLE
34580: EQUAL
34581: IFTRUE 34585
34583: GO 34603
34585: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34586: LD_ADDR_VAR 0 3
34590: PUSH
34591: LD_INT 23
34593: PUSH
34594: LD_INT 24
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: ST_TO_ADDR
34601: GO 34664
34603: LD_INT 47
34605: DOUBLE
34606: EQUAL
34607: IFTRUE 34611
34609: GO 34629
34611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_INT 23
34619: PUSH
34620: LD_INT 24
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: ST_TO_ADDR
34627: GO 34664
34629: LD_INT 98
34631: DOUBLE
34632: EQUAL
34633: IFTRUE 34637
34635: GO 34663
34637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34638: LD_ADDR_VAR 0 3
34642: PUSH
34643: LD_INT 21
34645: PUSH
34646: LD_INT 22
34648: PUSH
34649: LD_INT 23
34651: PUSH
34652: LD_INT 24
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: ST_TO_ADDR
34661: GO 34664
34663: POP
// result := ( chassis in result ) ;
34664: LD_ADDR_VAR 0 3
34668: PUSH
34669: LD_VAR 0 1
34673: PUSH
34674: LD_VAR 0 3
34678: IN
34679: ST_TO_ADDR
// end ;
34680: LD_VAR 0 3
34684: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34685: LD_INT 0
34687: PPUSH
34688: PPUSH
34689: PPUSH
34690: PPUSH
34691: PPUSH
34692: PPUSH
34693: PPUSH
// result := array ;
34694: LD_ADDR_VAR 0 5
34698: PUSH
34699: LD_VAR 0 1
34703: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34704: LD_VAR 0 1
34708: NOT
34709: IFTRUE 34718
34711: PUSH
34712: LD_VAR 0 2
34716: NOT
34717: OR
34718: IFTRUE 34727
34720: PUSH
34721: LD_VAR 0 3
34725: NOT
34726: OR
34727: IFTRUE 34741
34729: PUSH
34730: LD_VAR 0 2
34734: PUSH
34735: LD_VAR 0 1
34739: GREATER
34740: OR
34741: IFTRUE 34755
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_VAR 0 1
34753: GREATER
34754: OR
34755: IFFALSE 34759
// exit ;
34757: GO 35055
// if direction then
34759: LD_VAR 0 4
34763: IFFALSE 34827
// begin d := 1 ;
34765: LD_ADDR_VAR 0 9
34769: PUSH
34770: LD_INT 1
34772: ST_TO_ADDR
// if i_from > i_to then
34773: LD_VAR 0 2
34777: PUSH
34778: LD_VAR 0 3
34782: GREATER
34783: IFFALSE 34809
// length := ( array - i_from ) + i_to else
34785: LD_ADDR_VAR 0 11
34789: PUSH
34790: LD_VAR 0 1
34794: PUSH
34795: LD_VAR 0 2
34799: MINUS
34800: PUSH
34801: LD_VAR 0 3
34805: PLUS
34806: ST_TO_ADDR
34807: GO 34825
// length := i_to - i_from ;
34809: LD_ADDR_VAR 0 11
34813: PUSH
34814: LD_VAR 0 3
34818: PUSH
34819: LD_VAR 0 2
34823: MINUS
34824: ST_TO_ADDR
// end else
34825: GO 34888
// begin d := - 1 ;
34827: LD_ADDR_VAR 0 9
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: ST_TO_ADDR
// if i_from > i_to then
34836: LD_VAR 0 2
34840: PUSH
34841: LD_VAR 0 3
34845: GREATER
34846: IFFALSE 34866
// length := i_from - i_to else
34848: LD_ADDR_VAR 0 11
34852: PUSH
34853: LD_VAR 0 2
34857: PUSH
34858: LD_VAR 0 3
34862: MINUS
34863: ST_TO_ADDR
34864: GO 34888
// length := ( array - i_to ) + i_from ;
34866: LD_ADDR_VAR 0 11
34870: PUSH
34871: LD_VAR 0 1
34875: PUSH
34876: LD_VAR 0 3
34880: MINUS
34881: PUSH
34882: LD_VAR 0 2
34886: PLUS
34887: ST_TO_ADDR
// end ; if not length then
34888: LD_VAR 0 11
34892: NOT
34893: IFFALSE 34897
// exit ;
34895: GO 35055
// tmp := array ;
34897: LD_ADDR_VAR 0 10
34901: PUSH
34902: LD_VAR 0 1
34906: ST_TO_ADDR
// for i = 1 to length do
34907: LD_ADDR_VAR 0 6
34911: PUSH
34912: DOUBLE
34913: LD_INT 1
34915: DEC
34916: ST_TO_ADDR
34917: LD_VAR 0 11
34921: PUSH
34922: FOR_TO
34923: IFFALSE 35043
// begin for j = 1 to array do
34925: LD_ADDR_VAR 0 7
34929: PUSH
34930: DOUBLE
34931: LD_INT 1
34933: DEC
34934: ST_TO_ADDR
34935: LD_VAR 0 1
34939: PUSH
34940: FOR_TO
34941: IFFALSE 35029
// begin k := j + d ;
34943: LD_ADDR_VAR 0 8
34947: PUSH
34948: LD_VAR 0 7
34952: PUSH
34953: LD_VAR 0 9
34957: PLUS
34958: ST_TO_ADDR
// if k > array then
34959: LD_VAR 0 8
34963: PUSH
34964: LD_VAR 0 1
34968: GREATER
34969: IFFALSE 34979
// k := 1 ;
34971: LD_ADDR_VAR 0 8
34975: PUSH
34976: LD_INT 1
34978: ST_TO_ADDR
// if not k then
34979: LD_VAR 0 8
34983: NOT
34984: IFFALSE 34996
// k := array ;
34986: LD_ADDR_VAR 0 8
34990: PUSH
34991: LD_VAR 0 1
34995: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34996: LD_ADDR_VAR 0 10
35000: PUSH
35001: LD_VAR 0 10
35005: PPUSH
35006: LD_VAR 0 8
35010: PPUSH
35011: LD_VAR 0 1
35015: PUSH
35016: LD_VAR 0 7
35020: ARRAY
35021: PPUSH
35022: CALL_OW 1
35026: ST_TO_ADDR
// end ;
35027: GO 34940
35029: POP
35030: POP
// array := tmp ;
35031: LD_ADDR_VAR 0 1
35035: PUSH
35036: LD_VAR 0 10
35040: ST_TO_ADDR
// end ;
35041: GO 34922
35043: POP
35044: POP
// result := array ;
35045: LD_ADDR_VAR 0 5
35049: PUSH
35050: LD_VAR 0 1
35054: ST_TO_ADDR
// end ;
35055: LD_VAR 0 5
35059: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35060: LD_INT 0
35062: PPUSH
35063: PPUSH
// result := 0 ;
35064: LD_ADDR_VAR 0 3
35068: PUSH
35069: LD_INT 0
35071: ST_TO_ADDR
// if not array or not value in array then
35072: LD_VAR 0 1
35076: NOT
35077: IFTRUE 35092
35079: PUSH
35080: LD_VAR 0 2
35084: PUSH
35085: LD_VAR 0 1
35089: IN
35090: NOT
35091: OR
35092: IFFALSE 35096
// exit ;
35094: GO 35150
// for i = 1 to array do
35096: LD_ADDR_VAR 0 4
35100: PUSH
35101: DOUBLE
35102: LD_INT 1
35104: DEC
35105: ST_TO_ADDR
35106: LD_VAR 0 1
35110: PUSH
35111: FOR_TO
35112: IFFALSE 35148
// if value = array [ i ] then
35114: LD_VAR 0 2
35118: PUSH
35119: LD_VAR 0 1
35123: PUSH
35124: LD_VAR 0 4
35128: ARRAY
35129: EQUAL
35130: IFFALSE 35146
// begin result := i ;
35132: LD_ADDR_VAR 0 3
35136: PUSH
35137: LD_VAR 0 4
35141: ST_TO_ADDR
// exit ;
35142: POP
35143: POP
35144: GO 35150
// end ;
35146: GO 35111
35148: POP
35149: POP
// end ;
35150: LD_VAR 0 3
35154: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35155: LD_INT 0
35157: PPUSH
// vc_chassis := chassis ;
35158: LD_ADDR_OWVAR 37
35162: PUSH
35163: LD_VAR 0 1
35167: ST_TO_ADDR
// vc_engine := engine ;
35168: LD_ADDR_OWVAR 39
35172: PUSH
35173: LD_VAR 0 2
35177: ST_TO_ADDR
// vc_control := control ;
35178: LD_ADDR_OWVAR 38
35182: PUSH
35183: LD_VAR 0 3
35187: ST_TO_ADDR
// vc_weapon := weapon ;
35188: LD_ADDR_OWVAR 40
35192: PUSH
35193: LD_VAR 0 4
35197: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35198: LD_ADDR_OWVAR 41
35202: PUSH
35203: LD_VAR 0 5
35207: ST_TO_ADDR
// end ;
35208: LD_VAR 0 6
35212: RET
// export function WantPlant ( unit ) ; var task ; begin
35213: LD_INT 0
35215: PPUSH
35216: PPUSH
// result := false ;
35217: LD_ADDR_VAR 0 2
35221: PUSH
35222: LD_INT 0
35224: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35225: LD_ADDR_VAR 0 3
35229: PUSH
35230: LD_VAR 0 1
35234: PPUSH
35235: CALL_OW 437
35239: ST_TO_ADDR
// if task then
35240: LD_VAR 0 3
35244: IFFALSE 35272
// if task [ 1 ] [ 1 ] = p then
35246: LD_VAR 0 3
35250: PUSH
35251: LD_INT 1
35253: ARRAY
35254: PUSH
35255: LD_INT 1
35257: ARRAY
35258: PUSH
35259: LD_STRING p
35261: EQUAL
35262: IFFALSE 35272
// result := true ;
35264: LD_ADDR_VAR 0 2
35268: PUSH
35269: LD_INT 1
35271: ST_TO_ADDR
// end ;
35272: LD_VAR 0 2
35276: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35277: LD_INT 0
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
// if pos < 1 then
35283: LD_VAR 0 2
35287: PUSH
35288: LD_INT 1
35290: LESS
35291: IFFALSE 35295
// exit ;
35293: GO 35598
// if pos = 1 then
35295: LD_VAR 0 2
35299: PUSH
35300: LD_INT 1
35302: EQUAL
35303: IFFALSE 35336
// result := Replace ( arr , pos [ 1 ] , value ) else
35305: LD_ADDR_VAR 0 4
35309: PUSH
35310: LD_VAR 0 1
35314: PPUSH
35315: LD_VAR 0 2
35319: PUSH
35320: LD_INT 1
35322: ARRAY
35323: PPUSH
35324: LD_VAR 0 3
35328: PPUSH
35329: CALL_OW 1
35333: ST_TO_ADDR
35334: GO 35598
// begin tmp := arr ;
35336: LD_ADDR_VAR 0 6
35340: PUSH
35341: LD_VAR 0 1
35345: ST_TO_ADDR
// s_arr := [ tmp ] ;
35346: LD_ADDR_VAR 0 7
35350: PUSH
35351: LD_VAR 0 6
35355: PUSH
35356: EMPTY
35357: LIST
35358: ST_TO_ADDR
// for i = 1 to pos - 1 do
35359: LD_ADDR_VAR 0 5
35363: PUSH
35364: DOUBLE
35365: LD_INT 1
35367: DEC
35368: ST_TO_ADDR
35369: LD_VAR 0 2
35373: PUSH
35374: LD_INT 1
35376: MINUS
35377: PUSH
35378: FOR_TO
35379: IFFALSE 35424
// begin tmp := tmp [ pos [ i ] ] ;
35381: LD_ADDR_VAR 0 6
35385: PUSH
35386: LD_VAR 0 6
35390: PUSH
35391: LD_VAR 0 2
35395: PUSH
35396: LD_VAR 0 5
35400: ARRAY
35401: ARRAY
35402: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35403: LD_ADDR_VAR 0 7
35407: PUSH
35408: LD_VAR 0 7
35412: PUSH
35413: LD_VAR 0 6
35417: PUSH
35418: EMPTY
35419: LIST
35420: ADD
35421: ST_TO_ADDR
// end ;
35422: GO 35378
35424: POP
35425: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35426: LD_ADDR_VAR 0 6
35430: PUSH
35431: LD_VAR 0 6
35435: PPUSH
35436: LD_VAR 0 2
35440: PUSH
35441: LD_VAR 0 2
35445: ARRAY
35446: PPUSH
35447: LD_VAR 0 3
35451: PPUSH
35452: CALL_OW 1
35456: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35457: LD_ADDR_VAR 0 7
35461: PUSH
35462: LD_VAR 0 7
35466: PPUSH
35467: LD_VAR 0 7
35471: PPUSH
35472: LD_VAR 0 6
35476: PPUSH
35477: CALL_OW 1
35481: ST_TO_ADDR
// for i = s_arr downto 2 do
35482: LD_ADDR_VAR 0 5
35486: PUSH
35487: DOUBLE
35488: LD_VAR 0 7
35492: INC
35493: ST_TO_ADDR
35494: LD_INT 2
35496: PUSH
35497: FOR_DOWNTO
35498: IFFALSE 35582
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35500: LD_ADDR_VAR 0 6
35504: PUSH
35505: LD_VAR 0 7
35509: PUSH
35510: LD_VAR 0 5
35514: PUSH
35515: LD_INT 1
35517: MINUS
35518: ARRAY
35519: PPUSH
35520: LD_VAR 0 2
35524: PUSH
35525: LD_VAR 0 5
35529: PUSH
35530: LD_INT 1
35532: MINUS
35533: ARRAY
35534: PPUSH
35535: LD_VAR 0 7
35539: PUSH
35540: LD_VAR 0 5
35544: ARRAY
35545: PPUSH
35546: CALL_OW 1
35550: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35551: LD_ADDR_VAR 0 7
35555: PUSH
35556: LD_VAR 0 7
35560: PPUSH
35561: LD_VAR 0 5
35565: PUSH
35566: LD_INT 1
35568: MINUS
35569: PPUSH
35570: LD_VAR 0 6
35574: PPUSH
35575: CALL_OW 1
35579: ST_TO_ADDR
// end ;
35580: GO 35497
35582: POP
35583: POP
// result := s_arr [ 1 ] ;
35584: LD_ADDR_VAR 0 4
35588: PUSH
35589: LD_VAR 0 7
35593: PUSH
35594: LD_INT 1
35596: ARRAY
35597: ST_TO_ADDR
// end ; end ;
35598: LD_VAR 0 4
35602: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35603: LD_INT 0
35605: PPUSH
35606: PPUSH
// if not list then
35607: LD_VAR 0 1
35611: NOT
35612: IFFALSE 35616
// exit ;
35614: GO 35707
// i := list [ pos1 ] ;
35616: LD_ADDR_VAR 0 5
35620: PUSH
35621: LD_VAR 0 1
35625: PUSH
35626: LD_VAR 0 2
35630: ARRAY
35631: ST_TO_ADDR
// if not i then
35632: LD_VAR 0 5
35636: NOT
35637: IFFALSE 35641
// exit ;
35639: GO 35707
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35641: LD_ADDR_VAR 0 1
35645: PUSH
35646: LD_VAR 0 1
35650: PPUSH
35651: LD_VAR 0 2
35655: PPUSH
35656: LD_VAR 0 1
35660: PUSH
35661: LD_VAR 0 3
35665: ARRAY
35666: PPUSH
35667: CALL_OW 1
35671: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35672: LD_ADDR_VAR 0 1
35676: PUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: LD_VAR 0 3
35686: PPUSH
35687: LD_VAR 0 5
35691: PPUSH
35692: CALL_OW 1
35696: ST_TO_ADDR
// result := list ;
35697: LD_ADDR_VAR 0 4
35701: PUSH
35702: LD_VAR 0 1
35706: ST_TO_ADDR
// end ;
35707: LD_VAR 0 4
35711: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35712: LD_INT 0
35714: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35715: LD_ADDR_VAR 0 5
35719: PUSH
35720: LD_VAR 0 1
35724: PPUSH
35725: CALL_OW 250
35729: PPUSH
35730: LD_VAR 0 1
35734: PPUSH
35735: CALL_OW 251
35739: PPUSH
35740: LD_VAR 0 2
35744: PPUSH
35745: LD_VAR 0 3
35749: PPUSH
35750: LD_VAR 0 4
35754: PPUSH
35755: CALL 36137 0 5
35759: ST_TO_ADDR
// end ;
35760: LD_VAR 0 5
35764: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35765: LD_INT 0
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
// if not list or not unit then
35771: LD_VAR 0 2
35775: NOT
35776: IFTRUE 35785
35778: PUSH
35779: LD_VAR 0 1
35783: NOT
35784: OR
35785: IFFALSE 35789
// exit ;
35787: GO 36132
// result := [ ] ;
35789: LD_ADDR_VAR 0 5
35793: PUSH
35794: EMPTY
35795: ST_TO_ADDR
// for i in list do
35796: LD_ADDR_VAR 0 6
35800: PUSH
35801: LD_VAR 0 2
35805: PUSH
35806: FOR_IN
35807: IFFALSE 36025
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35809: LD_ADDR_VAR 0 8
35813: PUSH
35814: LD_VAR 0 1
35818: PPUSH
35819: LD_VAR 0 6
35823: PUSH
35824: LD_INT 1
35826: ARRAY
35827: PPUSH
35828: LD_VAR 0 6
35832: PUSH
35833: LD_INT 2
35835: ARRAY
35836: PPUSH
35837: CALL_OW 297
35841: ST_TO_ADDR
// if not Count ( result ) then
35842: LD_VAR 0 5
35846: PPUSH
35847: CALL 32359 0 1
35851: NOT
35852: IFFALSE 35885
// begin result := Join ( result , [ i , tmp ] ) ;
35854: LD_ADDR_VAR 0 5
35858: PUSH
35859: LD_VAR 0 5
35863: PPUSH
35864: LD_VAR 0 6
35868: PUSH
35869: LD_VAR 0 8
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL 68335 0 2
35882: ST_TO_ADDR
// continue ;
35883: GO 35806
// end ; if result [ result ] [ 2 ] <= tmp then
35885: LD_VAR 0 5
35889: PUSH
35890: LD_VAR 0 5
35894: ARRAY
35895: PUSH
35896: LD_INT 2
35898: ARRAY
35899: PUSH
35900: LD_VAR 0 8
35904: LESSEQUAL
35905: IFFALSE 35938
// result := Join ( result , [ i , tmp ] ) else
35907: LD_ADDR_VAR 0 5
35911: PUSH
35912: LD_VAR 0 5
35916: PPUSH
35917: LD_VAR 0 6
35921: PUSH
35922: LD_VAR 0 8
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PPUSH
35931: CALL 68335 0 2
35935: ST_TO_ADDR
35936: GO 36023
// begin for j := 1 to Count ( result ) do
35938: LD_ADDR_VAR 0 7
35942: PUSH
35943: DOUBLE
35944: LD_INT 1
35946: DEC
35947: ST_TO_ADDR
35948: LD_VAR 0 5
35952: PPUSH
35953: CALL 32359 0 1
35957: PUSH
35958: FOR_TO
35959: IFFALSE 36021
// begin if tmp < result [ j ] [ 2 ] then
35961: LD_VAR 0 8
35965: PUSH
35966: LD_VAR 0 5
35970: PUSH
35971: LD_VAR 0 7
35975: ARRAY
35976: PUSH
35977: LD_INT 2
35979: ARRAY
35980: LESS
35981: IFFALSE 36019
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35983: LD_ADDR_VAR 0 5
35987: PUSH
35988: LD_VAR 0 5
35992: PPUSH
35993: LD_VAR 0 7
35997: PPUSH
35998: LD_VAR 0 6
36002: PUSH
36003: LD_VAR 0 8
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PPUSH
36012: CALL_OW 2
36016: ST_TO_ADDR
// break ;
36017: GO 36021
// end ; end ;
36019: GO 35958
36021: POP
36022: POP
// end ; end ;
36023: GO 35806
36025: POP
36026: POP
// if result and not asc then
36027: LD_VAR 0 5
36031: IFFALSE 36040
36033: PUSH
36034: LD_VAR 0 3
36038: NOT
36039: AND
36040: IFFALSE 36057
// result := ReverseArray ( result ) ;
36042: LD_ADDR_VAR 0 5
36046: PUSH
36047: LD_VAR 0 5
36051: PPUSH
36052: CALL 63415 0 1
36056: ST_TO_ADDR
// tmp := [ ] ;
36057: LD_ADDR_VAR 0 8
36061: PUSH
36062: EMPTY
36063: ST_TO_ADDR
// if mode then
36064: LD_VAR 0 4
36068: IFFALSE 36132
// begin for i := 1 to result do
36070: LD_ADDR_VAR 0 6
36074: PUSH
36075: DOUBLE
36076: LD_INT 1
36078: DEC
36079: ST_TO_ADDR
36080: LD_VAR 0 5
36084: PUSH
36085: FOR_TO
36086: IFFALSE 36120
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36088: LD_ADDR_VAR 0 8
36092: PUSH
36093: LD_VAR 0 8
36097: PPUSH
36098: LD_VAR 0 5
36102: PUSH
36103: LD_VAR 0 6
36107: ARRAY
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: PPUSH
36113: CALL 68335 0 2
36117: ST_TO_ADDR
36118: GO 36085
36120: POP
36121: POP
// result := tmp ;
36122: LD_ADDR_VAR 0 5
36126: PUSH
36127: LD_VAR 0 8
36131: ST_TO_ADDR
// end ; end ;
36132: LD_VAR 0 5
36136: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36137: LD_INT 0
36139: PPUSH
36140: PPUSH
36141: PPUSH
36142: PPUSH
// if not list then
36143: LD_VAR 0 3
36147: NOT
36148: IFFALSE 36152
// exit ;
36150: GO 36542
// result := [ ] ;
36152: LD_ADDR_VAR 0 6
36156: PUSH
36157: EMPTY
36158: ST_TO_ADDR
// for i in list do
36159: LD_ADDR_VAR 0 7
36163: PUSH
36164: LD_VAR 0 3
36168: PUSH
36169: FOR_IN
36170: IFFALSE 36372
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36172: LD_ADDR_VAR 0 9
36176: PUSH
36177: LD_VAR 0 7
36181: PPUSH
36182: LD_VAR 0 1
36186: PPUSH
36187: LD_VAR 0 2
36191: PPUSH
36192: CALL_OW 297
36196: ST_TO_ADDR
// if not result then
36197: LD_VAR 0 6
36201: NOT
36202: IFFALSE 36228
// result := [ [ i , tmp ] ] else
36204: LD_ADDR_VAR 0 6
36208: PUSH
36209: LD_VAR 0 7
36213: PUSH
36214: LD_VAR 0 9
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: EMPTY
36224: LIST
36225: ST_TO_ADDR
36226: GO 36370
// begin if result [ result ] [ 2 ] <= tmp then
36228: LD_VAR 0 6
36232: PUSH
36233: LD_VAR 0 6
36237: ARRAY
36238: PUSH
36239: LD_INT 2
36241: ARRAY
36242: PUSH
36243: LD_VAR 0 9
36247: LESSEQUAL
36248: IFFALSE 36290
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36250: LD_ADDR_VAR 0 6
36254: PUSH
36255: LD_VAR 0 6
36259: PPUSH
36260: LD_VAR 0 6
36264: PUSH
36265: LD_INT 1
36267: PLUS
36268: PPUSH
36269: LD_VAR 0 7
36273: PUSH
36274: LD_VAR 0 9
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PPUSH
36283: CALL_OW 2
36287: ST_TO_ADDR
36288: GO 36370
// for j := 1 to result do
36290: LD_ADDR_VAR 0 8
36294: PUSH
36295: DOUBLE
36296: LD_INT 1
36298: DEC
36299: ST_TO_ADDR
36300: LD_VAR 0 6
36304: PUSH
36305: FOR_TO
36306: IFFALSE 36368
// begin if tmp < result [ j ] [ 2 ] then
36308: LD_VAR 0 9
36312: PUSH
36313: LD_VAR 0 6
36317: PUSH
36318: LD_VAR 0 8
36322: ARRAY
36323: PUSH
36324: LD_INT 2
36326: ARRAY
36327: LESS
36328: IFFALSE 36366
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36330: LD_ADDR_VAR 0 6
36334: PUSH
36335: LD_VAR 0 6
36339: PPUSH
36340: LD_VAR 0 8
36344: PPUSH
36345: LD_VAR 0 7
36349: PUSH
36350: LD_VAR 0 9
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PPUSH
36359: CALL_OW 2
36363: ST_TO_ADDR
// break ;
36364: GO 36368
// end ; end ;
36366: GO 36305
36368: POP
36369: POP
// end ; end ;
36370: GO 36169
36372: POP
36373: POP
// if result and not asc then
36374: LD_VAR 0 6
36378: IFFALSE 36387
36380: PUSH
36381: LD_VAR 0 4
36385: NOT
36386: AND
36387: IFFALSE 36462
// begin tmp := result ;
36389: LD_ADDR_VAR 0 9
36393: PUSH
36394: LD_VAR 0 6
36398: ST_TO_ADDR
// for i = tmp downto 1 do
36399: LD_ADDR_VAR 0 7
36403: PUSH
36404: DOUBLE
36405: LD_VAR 0 9
36409: INC
36410: ST_TO_ADDR
36411: LD_INT 1
36413: PUSH
36414: FOR_DOWNTO
36415: IFFALSE 36460
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36417: LD_ADDR_VAR 0 6
36421: PUSH
36422: LD_VAR 0 6
36426: PPUSH
36427: LD_VAR 0 9
36431: PUSH
36432: LD_VAR 0 7
36436: MINUS
36437: PUSH
36438: LD_INT 1
36440: PLUS
36441: PPUSH
36442: LD_VAR 0 9
36446: PUSH
36447: LD_VAR 0 7
36451: ARRAY
36452: PPUSH
36453: CALL_OW 1
36457: ST_TO_ADDR
36458: GO 36414
36460: POP
36461: POP
// end ; tmp := [ ] ;
36462: LD_ADDR_VAR 0 9
36466: PUSH
36467: EMPTY
36468: ST_TO_ADDR
// if mode then
36469: LD_VAR 0 5
36473: IFFALSE 36542
// begin for i = 1 to result do
36475: LD_ADDR_VAR 0 7
36479: PUSH
36480: DOUBLE
36481: LD_INT 1
36483: DEC
36484: ST_TO_ADDR
36485: LD_VAR 0 6
36489: PUSH
36490: FOR_TO
36491: IFFALSE 36530
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36493: LD_ADDR_VAR 0 9
36497: PUSH
36498: LD_VAR 0 9
36502: PPUSH
36503: LD_VAR 0 7
36507: PPUSH
36508: LD_VAR 0 6
36512: PUSH
36513: LD_VAR 0 7
36517: ARRAY
36518: PUSH
36519: LD_INT 1
36521: ARRAY
36522: PPUSH
36523: CALL_OW 1
36527: ST_TO_ADDR
36528: GO 36490
36530: POP
36531: POP
// result := tmp ;
36532: LD_ADDR_VAR 0 6
36536: PUSH
36537: LD_VAR 0 9
36541: ST_TO_ADDR
// end ; end ;
36542: LD_VAR 0 6
36546: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36547: LD_INT 0
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36555: LD_ADDR_VAR 0 5
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: EMPTY
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: ST_TO_ADDR
// if not x or not y then
36577: LD_VAR 0 2
36581: NOT
36582: IFTRUE 36591
36584: PUSH
36585: LD_VAR 0 3
36589: NOT
36590: OR
36591: IFFALSE 36595
// exit ;
36593: GO 38251
// if not range then
36595: LD_VAR 0 4
36599: NOT
36600: IFFALSE 36610
// range := 10 ;
36602: LD_ADDR_VAR 0 4
36606: PUSH
36607: LD_INT 10
36609: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36610: LD_ADDR_VAR 0 8
36614: PUSH
36615: LD_INT 81
36617: PUSH
36618: LD_VAR 0 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 92
36629: PUSH
36630: LD_VAR 0 2
36634: PUSH
36635: LD_VAR 0 3
36639: PUSH
36640: LD_VAR 0 4
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 3
36653: PUSH
36654: LD_INT 21
36656: PUSH
36657: LD_INT 3
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: PPUSH
36673: CALL_OW 69
36677: ST_TO_ADDR
// if not tmp then
36678: LD_VAR 0 8
36682: NOT
36683: IFFALSE 36687
// exit ;
36685: GO 38251
// for i in tmp do
36687: LD_ADDR_VAR 0 6
36691: PUSH
36692: LD_VAR 0 8
36696: PUSH
36697: FOR_IN
36698: IFFALSE 38226
// begin points := [ 0 , 0 , 0 ] ;
36700: LD_ADDR_VAR 0 9
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// bpoints := 1 ;
36719: LD_ADDR_VAR 0 10
36723: PUSH
36724: LD_INT 1
36726: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36727: LD_VAR 0 6
36731: PPUSH
36732: CALL_OW 247
36736: PUSH
36737: LD_INT 1
36739: DOUBLE
36740: EQUAL
36741: IFTRUE 36745
36743: GO 37327
36745: POP
// begin if GetClass ( i ) = 1 then
36746: LD_VAR 0 6
36750: PPUSH
36751: CALL_OW 257
36755: PUSH
36756: LD_INT 1
36758: EQUAL
36759: IFFALSE 36780
// points := [ 10 , 5 , 3 ] ;
36761: LD_ADDR_VAR 0 9
36765: PUSH
36766: LD_INT 10
36768: PUSH
36769: LD_INT 5
36771: PUSH
36772: LD_INT 3
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36780: LD_VAR 0 6
36784: PPUSH
36785: CALL_OW 257
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 3
36795: PUSH
36796: LD_INT 4
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: IN
36804: IFFALSE 36825
// points := [ 3 , 2 , 1 ] ;
36806: LD_ADDR_VAR 0 9
36810: PUSH
36811: LD_INT 3
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36825: LD_VAR 0 6
36829: PPUSH
36830: CALL_OW 257
36834: PUSH
36835: LD_INT 5
36837: EQUAL
36838: IFFALSE 36859
// points := [ 130 , 5 , 2 ] ;
36840: LD_ADDR_VAR 0 9
36844: PUSH
36845: LD_INT 130
36847: PUSH
36848: LD_INT 5
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36859: LD_VAR 0 6
36863: PPUSH
36864: CALL_OW 257
36868: PUSH
36869: LD_INT 8
36871: EQUAL
36872: IFFALSE 36893
// points := [ 35 , 35 , 30 ] ;
36874: LD_ADDR_VAR 0 9
36878: PUSH
36879: LD_INT 35
36881: PUSH
36882: LD_INT 35
36884: PUSH
36885: LD_INT 30
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: LIST
36892: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36893: LD_VAR 0 6
36897: PPUSH
36898: CALL_OW 257
36902: PUSH
36903: LD_INT 9
36905: EQUAL
36906: IFFALSE 36927
// points := [ 20 , 55 , 40 ] ;
36908: LD_ADDR_VAR 0 9
36912: PUSH
36913: LD_INT 20
36915: PUSH
36916: LD_INT 55
36918: PUSH
36919: LD_INT 40
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36927: LD_VAR 0 6
36931: PPUSH
36932: CALL_OW 257
36936: PUSH
36937: LD_INT 12
36939: PUSH
36940: LD_INT 16
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: IN
36947: IFFALSE 36968
// points := [ 5 , 3 , 2 ] ;
36949: LD_ADDR_VAR 0 9
36953: PUSH
36954: LD_INT 5
36956: PUSH
36957: LD_INT 3
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36968: LD_VAR 0 6
36972: PPUSH
36973: CALL_OW 257
36977: PUSH
36978: LD_INT 17
36980: EQUAL
36981: IFFALSE 37002
// points := [ 100 , 50 , 75 ] ;
36983: LD_ADDR_VAR 0 9
36987: PUSH
36988: LD_INT 100
36990: PUSH
36991: LD_INT 50
36993: PUSH
36994: LD_INT 75
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37002: LD_VAR 0 6
37006: PPUSH
37007: CALL_OW 257
37011: PUSH
37012: LD_INT 15
37014: EQUAL
37015: IFFALSE 37036
// points := [ 10 , 5 , 3 ] ;
37017: LD_ADDR_VAR 0 9
37021: PUSH
37022: LD_INT 10
37024: PUSH
37025: LD_INT 5
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37036: LD_VAR 0 6
37040: PPUSH
37041: CALL_OW 257
37045: PUSH
37046: LD_INT 14
37048: EQUAL
37049: IFFALSE 37070
// points := [ 10 , 0 , 0 ] ;
37051: LD_ADDR_VAR 0 9
37055: PUSH
37056: LD_INT 10
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37070: LD_VAR 0 6
37074: PPUSH
37075: CALL_OW 257
37079: PUSH
37080: LD_INT 11
37082: EQUAL
37083: IFFALSE 37104
// points := [ 30 , 10 , 5 ] ;
37085: LD_ADDR_VAR 0 9
37089: PUSH
37090: LD_INT 30
37092: PUSH
37093: LD_INT 10
37095: PUSH
37096: LD_INT 5
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37104: LD_VAR 0 1
37108: PPUSH
37109: LD_INT 5
37111: PPUSH
37112: CALL_OW 321
37116: PUSH
37117: LD_INT 2
37119: EQUAL
37120: IFFALSE 37137
// bpoints := bpoints * 1.8 ;
37122: LD_ADDR_VAR 0 10
37126: PUSH
37127: LD_VAR 0 10
37131: PUSH
37132: LD_REAL  1.80000000000000E+0000
37135: MUL
37136: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37137: LD_VAR 0 6
37141: PPUSH
37142: CALL_OW 257
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: LD_INT 3
37155: PUSH
37156: LD_INT 4
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: IN
37165: IFFALSE 37185
37167: PUSH
37168: LD_VAR 0 1
37172: PPUSH
37173: LD_INT 51
37175: PPUSH
37176: CALL_OW 321
37180: PUSH
37181: LD_INT 2
37183: EQUAL
37184: AND
37185: IFFALSE 37202
// bpoints := bpoints * 1.2 ;
37187: LD_ADDR_VAR 0 10
37191: PUSH
37192: LD_VAR 0 10
37196: PUSH
37197: LD_REAL  1.20000000000000E+0000
37200: MUL
37201: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37202: LD_VAR 0 6
37206: PPUSH
37207: CALL_OW 257
37211: PUSH
37212: LD_INT 5
37214: PUSH
37215: LD_INT 7
37217: PUSH
37218: LD_INT 9
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: IN
37226: IFFALSE 37246
37228: PUSH
37229: LD_VAR 0 1
37233: PPUSH
37234: LD_INT 52
37236: PPUSH
37237: CALL_OW 321
37241: PUSH
37242: LD_INT 2
37244: EQUAL
37245: AND
37246: IFFALSE 37263
// bpoints := bpoints * 1.5 ;
37248: LD_ADDR_VAR 0 10
37252: PUSH
37253: LD_VAR 0 10
37257: PUSH
37258: LD_REAL  1.50000000000000E+0000
37261: MUL
37262: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37263: LD_VAR 0 1
37267: PPUSH
37268: LD_INT 66
37270: PPUSH
37271: CALL_OW 321
37275: PUSH
37276: LD_INT 2
37278: EQUAL
37279: IFFALSE 37296
// bpoints := bpoints * 1.1 ;
37281: LD_ADDR_VAR 0 10
37285: PUSH
37286: LD_VAR 0 10
37290: PUSH
37291: LD_REAL  1.10000000000000E+0000
37294: MUL
37295: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37296: LD_ADDR_VAR 0 10
37300: PUSH
37301: LD_VAR 0 10
37305: PUSH
37306: LD_VAR 0 6
37310: PPUSH
37311: LD_INT 1
37313: PPUSH
37314: CALL_OW 259
37318: PUSH
37319: LD_REAL  1.15000000000000E+0000
37322: MUL
37323: MUL
37324: ST_TO_ADDR
// end ; unit_vehicle :
37325: GO 38155
37327: LD_INT 2
37329: DOUBLE
37330: EQUAL
37331: IFTRUE 37335
37333: GO 38143
37335: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37336: LD_VAR 0 6
37340: PPUSH
37341: CALL_OW 264
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 42
37351: PUSH
37352: LD_INT 24
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: LIST
37359: IN
37360: IFFALSE 37381
// points := [ 25 , 5 , 3 ] ;
37362: LD_ADDR_VAR 0 9
37366: PUSH
37367: LD_INT 25
37369: PUSH
37370: LD_INT 5
37372: PUSH
37373: LD_INT 3
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37381: LD_VAR 0 6
37385: PPUSH
37386: CALL_OW 264
37390: PUSH
37391: LD_INT 4
37393: PUSH
37394: LD_INT 43
37396: PUSH
37397: LD_INT 25
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: IN
37405: IFFALSE 37426
// points := [ 40 , 15 , 5 ] ;
37407: LD_ADDR_VAR 0 9
37411: PUSH
37412: LD_INT 40
37414: PUSH
37415: LD_INT 15
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37426: LD_VAR 0 6
37430: PPUSH
37431: CALL_OW 264
37435: PUSH
37436: LD_INT 3
37438: PUSH
37439: LD_INT 23
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: IN
37446: IFFALSE 37467
// points := [ 7 , 25 , 8 ] ;
37448: LD_ADDR_VAR 0 9
37452: PUSH
37453: LD_INT 7
37455: PUSH
37456: LD_INT 25
37458: PUSH
37459: LD_INT 8
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37467: LD_VAR 0 6
37471: PPUSH
37472: CALL_OW 264
37476: PUSH
37477: LD_INT 5
37479: PUSH
37480: LD_INT 27
37482: PUSH
37483: LD_INT 44
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: IN
37491: IFFALSE 37512
// points := [ 14 , 50 , 16 ] ;
37493: LD_ADDR_VAR 0 9
37497: PUSH
37498: LD_INT 14
37500: PUSH
37501: LD_INT 50
37503: PUSH
37504: LD_INT 16
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37512: LD_VAR 0 6
37516: PPUSH
37517: CALL_OW 264
37521: PUSH
37522: LD_INT 6
37524: PUSH
37525: LD_INT 46
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: IN
37532: IFFALSE 37553
// points := [ 32 , 120 , 70 ] ;
37534: LD_ADDR_VAR 0 9
37538: PUSH
37539: LD_INT 32
37541: PUSH
37542: LD_INT 120
37544: PUSH
37545: LD_INT 70
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37553: LD_VAR 0 6
37557: PPUSH
37558: CALL_OW 264
37562: PUSH
37563: LD_INT 7
37565: PUSH
37566: LD_INT 28
37568: PUSH
37569: LD_INT 45
37571: PUSH
37572: LD_INT 92
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: IN
37581: IFFALSE 37602
// points := [ 35 , 20 , 45 ] ;
37583: LD_ADDR_VAR 0 9
37587: PUSH
37588: LD_INT 35
37590: PUSH
37591: LD_INT 20
37593: PUSH
37594: LD_INT 45
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: LIST
37601: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37602: LD_VAR 0 6
37606: PPUSH
37607: CALL_OW 264
37611: PUSH
37612: LD_INT 47
37614: PUSH
37615: EMPTY
37616: LIST
37617: IN
37618: IFFALSE 37639
// points := [ 67 , 45 , 75 ] ;
37620: LD_ADDR_VAR 0 9
37624: PUSH
37625: LD_INT 67
37627: PUSH
37628: LD_INT 45
37630: PUSH
37631: LD_INT 75
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37639: LD_VAR 0 6
37643: PPUSH
37644: CALL_OW 264
37648: PUSH
37649: LD_INT 26
37651: PUSH
37652: EMPTY
37653: LIST
37654: IN
37655: IFFALSE 37676
// points := [ 120 , 30 , 80 ] ;
37657: LD_ADDR_VAR 0 9
37661: PUSH
37662: LD_INT 120
37664: PUSH
37665: LD_INT 30
37667: PUSH
37668: LD_INT 80
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37676: LD_VAR 0 6
37680: PPUSH
37681: CALL_OW 264
37685: PUSH
37686: LD_INT 22
37688: PUSH
37689: EMPTY
37690: LIST
37691: IN
37692: IFFALSE 37713
// points := [ 40 , 1 , 1 ] ;
37694: LD_ADDR_VAR 0 9
37698: PUSH
37699: LD_INT 40
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37713: LD_VAR 0 6
37717: PPUSH
37718: CALL_OW 264
37722: PUSH
37723: LD_INT 29
37725: PUSH
37726: EMPTY
37727: LIST
37728: IN
37729: IFFALSE 37750
// points := [ 70 , 200 , 400 ] ;
37731: LD_ADDR_VAR 0 9
37735: PUSH
37736: LD_INT 70
37738: PUSH
37739: LD_INT 200
37741: PUSH
37742: LD_INT 400
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37750: LD_VAR 0 6
37754: PPUSH
37755: CALL_OW 264
37759: PUSH
37760: LD_INT 14
37762: PUSH
37763: LD_INT 53
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: IN
37770: IFFALSE 37791
// points := [ 40 , 10 , 20 ] ;
37772: LD_ADDR_VAR 0 9
37776: PUSH
37777: LD_INT 40
37779: PUSH
37780: LD_INT 10
37782: PUSH
37783: LD_INT 20
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37791: LD_VAR 0 6
37795: PPUSH
37796: CALL_OW 264
37800: PUSH
37801: LD_INT 9
37803: PUSH
37804: EMPTY
37805: LIST
37806: IN
37807: IFFALSE 37828
// points := [ 5 , 70 , 20 ] ;
37809: LD_ADDR_VAR 0 9
37813: PUSH
37814: LD_INT 5
37816: PUSH
37817: LD_INT 70
37819: PUSH
37820: LD_INT 20
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37828: LD_VAR 0 6
37832: PPUSH
37833: CALL_OW 264
37837: PUSH
37838: LD_INT 10
37840: PUSH
37841: EMPTY
37842: LIST
37843: IN
37844: IFFALSE 37865
// points := [ 35 , 110 , 70 ] ;
37846: LD_ADDR_VAR 0 9
37850: PUSH
37851: LD_INT 35
37853: PUSH
37854: LD_INT 110
37856: PUSH
37857: LD_INT 70
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37865: LD_VAR 0 6
37869: PPUSH
37870: CALL_OW 265
37874: PUSH
37875: LD_INT 25
37877: EQUAL
37878: IFFALSE 37899
// points := [ 80 , 65 , 100 ] ;
37880: LD_ADDR_VAR 0 9
37884: PUSH
37885: LD_INT 80
37887: PUSH
37888: LD_INT 65
37890: PUSH
37891: LD_INT 100
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37899: LD_VAR 0 6
37903: PPUSH
37904: CALL_OW 263
37908: PUSH
37909: LD_INT 1
37911: EQUAL
37912: IFFALSE 37947
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37914: LD_ADDR_VAR 0 10
37918: PUSH
37919: LD_VAR 0 10
37923: PUSH
37924: LD_VAR 0 6
37928: PPUSH
37929: CALL_OW 311
37933: PPUSH
37934: LD_INT 3
37936: PPUSH
37937: CALL_OW 259
37941: PUSH
37942: LD_INT 4
37944: MUL
37945: MUL
37946: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37947: LD_VAR 0 6
37951: PPUSH
37952: CALL_OW 263
37956: PUSH
37957: LD_INT 2
37959: EQUAL
37960: IFFALSE 38011
// begin j := IsControledBy ( i ) ;
37962: LD_ADDR_VAR 0 7
37966: PUSH
37967: LD_VAR 0 6
37971: PPUSH
37972: CALL_OW 312
37976: ST_TO_ADDR
// if j then
37977: LD_VAR 0 7
37981: IFFALSE 38011
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37983: LD_ADDR_VAR 0 10
37987: PUSH
37988: LD_VAR 0 10
37992: PUSH
37993: LD_VAR 0 7
37997: PPUSH
37998: LD_INT 3
38000: PPUSH
38001: CALL_OW 259
38005: PUSH
38006: LD_INT 3
38008: MUL
38009: MUL
38010: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38011: LD_VAR 0 6
38015: PPUSH
38016: CALL_OW 264
38020: PUSH
38021: LD_INT 5
38023: PUSH
38024: LD_INT 6
38026: PUSH
38027: LD_INT 46
38029: PUSH
38030: LD_INT 44
38032: PUSH
38033: LD_INT 47
38035: PUSH
38036: LD_INT 45
38038: PUSH
38039: LD_INT 28
38041: PUSH
38042: LD_INT 7
38044: PUSH
38045: LD_INT 27
38047: PUSH
38048: LD_INT 29
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: IN
38063: IFFALSE 38083
38065: PUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: LD_INT 52
38073: PPUSH
38074: CALL_OW 321
38078: PUSH
38079: LD_INT 2
38081: EQUAL
38082: AND
38083: IFFALSE 38100
// bpoints := bpoints * 1.2 ;
38085: LD_ADDR_VAR 0 10
38089: PUSH
38090: LD_VAR 0 10
38094: PUSH
38095: LD_REAL  1.20000000000000E+0000
38098: MUL
38099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38100: LD_VAR 0 6
38104: PPUSH
38105: CALL_OW 264
38109: PUSH
38110: LD_INT 6
38112: PUSH
38113: LD_INT 46
38115: PUSH
38116: LD_INT 47
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: IN
38124: IFFALSE 38141
// bpoints := bpoints * 1.2 ;
38126: LD_ADDR_VAR 0 10
38130: PUSH
38131: LD_VAR 0 10
38135: PUSH
38136: LD_REAL  1.20000000000000E+0000
38139: MUL
38140: ST_TO_ADDR
// end ; unit_building :
38141: GO 38155
38143: LD_INT 3
38145: DOUBLE
38146: EQUAL
38147: IFTRUE 38151
38149: GO 38154
38151: POP
// ; end ;
38152: GO 38155
38154: POP
// for j = 1 to 3 do
38155: LD_ADDR_VAR 0 7
38159: PUSH
38160: DOUBLE
38161: LD_INT 1
38163: DEC
38164: ST_TO_ADDR
38165: LD_INT 3
38167: PUSH
38168: FOR_TO
38169: IFFALSE 38222
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38171: LD_ADDR_VAR 0 5
38175: PUSH
38176: LD_VAR 0 5
38180: PPUSH
38181: LD_VAR 0 7
38185: PPUSH
38186: LD_VAR 0 5
38190: PUSH
38191: LD_VAR 0 7
38195: ARRAY
38196: PUSH
38197: LD_VAR 0 9
38201: PUSH
38202: LD_VAR 0 7
38206: ARRAY
38207: PUSH
38208: LD_VAR 0 10
38212: MUL
38213: PLUS
38214: PPUSH
38215: CALL_OW 1
38219: ST_TO_ADDR
38220: GO 38168
38222: POP
38223: POP
// end ;
38224: GO 36697
38226: POP
38227: POP
// result := Replace ( result , 4 , tmp ) ;
38228: LD_ADDR_VAR 0 5
38232: PUSH
38233: LD_VAR 0 5
38237: PPUSH
38238: LD_INT 4
38240: PPUSH
38241: LD_VAR 0 8
38245: PPUSH
38246: CALL_OW 1
38250: ST_TO_ADDR
// end ;
38251: LD_VAR 0 5
38255: RET
// export function DangerAtRange ( unit , range ) ; begin
38256: LD_INT 0
38258: PPUSH
// if not unit then
38259: LD_VAR 0 1
38263: NOT
38264: IFFALSE 38268
// exit ;
38266: GO 38313
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38268: LD_ADDR_VAR 0 3
38272: PUSH
38273: LD_VAR 0 1
38277: PPUSH
38278: CALL_OW 255
38282: PPUSH
38283: LD_VAR 0 1
38287: PPUSH
38288: CALL_OW 250
38292: PPUSH
38293: LD_VAR 0 1
38297: PPUSH
38298: CALL_OW 251
38302: PPUSH
38303: LD_VAR 0 2
38307: PPUSH
38308: CALL 36547 0 4
38312: ST_TO_ADDR
// end ;
38313: LD_VAR 0 3
38317: RET
// export function DangerInArea ( side , area ) ; begin
38318: LD_INT 0
38320: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_VAR 0 2
38330: PPUSH
38331: LD_INT 81
38333: PUSH
38334: LD_VAR 0 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PPUSH
38343: CALL_OW 70
38347: ST_TO_ADDR
// end ;
38348: LD_VAR 0 3
38352: RET
// export function IsExtension ( b ) ; begin
38353: LD_INT 0
38355: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38356: LD_ADDR_VAR 0 2
38360: PUSH
38361: LD_VAR 0 1
38365: PUSH
38366: LD_INT 23
38368: PUSH
38369: LD_INT 20
38371: PUSH
38372: LD_INT 22
38374: PUSH
38375: LD_INT 17
38377: PUSH
38378: LD_INT 24
38380: PUSH
38381: LD_INT 21
38383: PUSH
38384: LD_INT 19
38386: PUSH
38387: LD_INT 16
38389: PUSH
38390: LD_INT 25
38392: PUSH
38393: LD_INT 18
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: IN
38408: ST_TO_ADDR
// end ;
38409: LD_VAR 0 2
38413: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38414: LD_INT 0
38416: PPUSH
38417: PPUSH
38418: PPUSH
// result := [ ] ;
38419: LD_ADDR_VAR 0 4
38423: PUSH
38424: EMPTY
38425: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38426: LD_ADDR_VAR 0 5
38430: PUSH
38431: LD_VAR 0 2
38435: PPUSH
38436: LD_INT 21
38438: PUSH
38439: LD_INT 3
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PPUSH
38446: CALL_OW 70
38450: ST_TO_ADDR
// if not tmp then
38451: LD_VAR 0 5
38455: NOT
38456: IFFALSE 38460
// exit ;
38458: GO 38524
// if checkLink then
38460: LD_VAR 0 3
38464: IFFALSE 38514
// begin for i in tmp do
38466: LD_ADDR_VAR 0 6
38470: PUSH
38471: LD_VAR 0 5
38475: PUSH
38476: FOR_IN
38477: IFFALSE 38512
// if GetBase ( i ) <> base then
38479: LD_VAR 0 6
38483: PPUSH
38484: CALL_OW 274
38488: PUSH
38489: LD_VAR 0 1
38493: NONEQUAL
38494: IFFALSE 38510
// ComLinkToBase ( base , i ) ;
38496: LD_VAR 0 1
38500: PPUSH
38501: LD_VAR 0 6
38505: PPUSH
38506: CALL_OW 169
38510: GO 38476
38512: POP
38513: POP
// end ; result := tmp ;
38514: LD_ADDR_VAR 0 4
38518: PUSH
38519: LD_VAR 0 5
38523: ST_TO_ADDR
// end ;
38524: LD_VAR 0 4
38528: RET
// export function ComComplete ( units , b ) ; var i ; begin
38529: LD_INT 0
38531: PPUSH
38532: PPUSH
// if not units then
38533: LD_VAR 0 1
38537: NOT
38538: IFFALSE 38542
// exit ;
38540: GO 38632
// for i in units do
38542: LD_ADDR_VAR 0 4
38546: PUSH
38547: LD_VAR 0 1
38551: PUSH
38552: FOR_IN
38553: IFFALSE 38630
// if BuildingStatus ( b ) = bs_build then
38555: LD_VAR 0 2
38559: PPUSH
38560: CALL_OW 461
38564: PUSH
38565: LD_INT 1
38567: EQUAL
38568: IFFALSE 38628
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38570: LD_VAR 0 4
38574: PPUSH
38575: LD_STRING h
38577: PUSH
38578: LD_VAR 0 2
38582: PPUSH
38583: CALL_OW 250
38587: PUSH
38588: LD_VAR 0 2
38592: PPUSH
38593: CALL_OW 251
38597: PUSH
38598: LD_VAR 0 2
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: PPUSH
38624: CALL_OW 446
38628: GO 38552
38630: POP
38631: POP
// end ;
38632: LD_VAR 0 3
38636: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38637: LD_INT 0
38639: PPUSH
38640: PPUSH
38641: PPUSH
38642: PPUSH
38643: PPUSH
38644: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38645: LD_VAR 0 1
38649: NOT
38650: IFTRUE 38667
38652: PUSH
38653: LD_VAR 0 1
38657: PPUSH
38658: CALL_OW 263
38662: PUSH
38663: LD_INT 2
38665: NONEQUAL
38666: OR
38667: IFFALSE 38671
// exit ;
38669: GO 38987
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38671: LD_ADDR_VAR 0 6
38675: PUSH
38676: LD_INT 22
38678: PUSH
38679: LD_VAR 0 1
38683: PPUSH
38684: CALL_OW 255
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: LD_INT 30
38698: PUSH
38699: LD_INT 36
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 34
38708: PUSH
38709: LD_INT 31
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PPUSH
38725: CALL_OW 69
38729: ST_TO_ADDR
// if not tmp then
38730: LD_VAR 0 6
38734: NOT
38735: IFFALSE 38739
// exit ;
38737: GO 38987
// result := [ ] ;
38739: LD_ADDR_VAR 0 2
38743: PUSH
38744: EMPTY
38745: ST_TO_ADDR
// for i in tmp do
38746: LD_ADDR_VAR 0 3
38750: PUSH
38751: LD_VAR 0 6
38755: PUSH
38756: FOR_IN
38757: IFFALSE 38828
// begin t := UnitsInside ( i ) ;
38759: LD_ADDR_VAR 0 4
38763: PUSH
38764: LD_VAR 0 3
38768: PPUSH
38769: CALL_OW 313
38773: ST_TO_ADDR
// if t then
38774: LD_VAR 0 4
38778: IFFALSE 38826
// for j in t do
38780: LD_ADDR_VAR 0 7
38784: PUSH
38785: LD_VAR 0 4
38789: PUSH
38790: FOR_IN
38791: IFFALSE 38824
// result := Replace ( result , result + 1 , j ) ;
38793: LD_ADDR_VAR 0 2
38797: PUSH
38798: LD_VAR 0 2
38802: PPUSH
38803: LD_VAR 0 2
38807: PUSH
38808: LD_INT 1
38810: PLUS
38811: PPUSH
38812: LD_VAR 0 7
38816: PPUSH
38817: CALL_OW 1
38821: ST_TO_ADDR
38822: GO 38790
38824: POP
38825: POP
// end ;
38826: GO 38756
38828: POP
38829: POP
// if not result then
38830: LD_VAR 0 2
38834: NOT
38835: IFFALSE 38839
// exit ;
38837: GO 38987
// mech := result [ 1 ] ;
38839: LD_ADDR_VAR 0 5
38843: PUSH
38844: LD_VAR 0 2
38848: PUSH
38849: LD_INT 1
38851: ARRAY
38852: ST_TO_ADDR
// if result > 1 then
38853: LD_VAR 0 2
38857: PUSH
38858: LD_INT 1
38860: GREATER
38861: IFFALSE 38973
// begin for i = 2 to result do
38863: LD_ADDR_VAR 0 3
38867: PUSH
38868: DOUBLE
38869: LD_INT 2
38871: DEC
38872: ST_TO_ADDR
38873: LD_VAR 0 2
38877: PUSH
38878: FOR_TO
38879: IFFALSE 38971
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38881: LD_ADDR_VAR 0 4
38885: PUSH
38886: LD_VAR 0 2
38890: PUSH
38891: LD_VAR 0 3
38895: ARRAY
38896: PPUSH
38897: LD_INT 3
38899: PPUSH
38900: CALL_OW 259
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: LD_VAR 0 3
38914: ARRAY
38915: PPUSH
38916: CALL_OW 432
38920: MINUS
38921: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38922: LD_VAR 0 4
38926: PUSH
38927: LD_VAR 0 5
38931: PPUSH
38932: LD_INT 3
38934: PPUSH
38935: CALL_OW 259
38939: PUSH
38940: LD_VAR 0 5
38944: PPUSH
38945: CALL_OW 432
38949: MINUS
38950: GREATEREQUAL
38951: IFFALSE 38969
// mech := result [ i ] ;
38953: LD_ADDR_VAR 0 5
38957: PUSH
38958: LD_VAR 0 2
38962: PUSH
38963: LD_VAR 0 3
38967: ARRAY
38968: ST_TO_ADDR
// end ;
38969: GO 38878
38971: POP
38972: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38973: LD_VAR 0 1
38977: PPUSH
38978: LD_VAR 0 5
38982: PPUSH
38983: CALL_OW 135
// end ;
38987: LD_VAR 0 2
38991: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38992: LD_INT 0
38994: PPUSH
38995: PPUSH
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
// result := [ ] ;
39007: LD_ADDR_VAR 0 7
39011: PUSH
39012: EMPTY
39013: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39014: LD_VAR 0 1
39018: PPUSH
39019: CALL_OW 266
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: IN
39034: NOT
39035: IFFALSE 39039
// exit ;
39037: GO 40679
// if name then
39039: LD_VAR 0 3
39043: IFFALSE 39059
// SetBName ( base_dep , name ) ;
39045: LD_VAR 0 1
39049: PPUSH
39050: LD_VAR 0 3
39054: PPUSH
39055: CALL_OW 500
// base := GetBase ( base_dep ) ;
39059: LD_ADDR_VAR 0 15
39063: PUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 274
39073: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39074: LD_ADDR_VAR 0 16
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 255
39088: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39089: LD_ADDR_VAR 0 17
39093: PUSH
39094: LD_VAR 0 1
39098: PPUSH
39099: CALL_OW 248
39103: ST_TO_ADDR
// if sources then
39104: LD_VAR 0 5
39108: IFFALSE 39155
// for i = 1 to 3 do
39110: LD_ADDR_VAR 0 8
39114: PUSH
39115: DOUBLE
39116: LD_INT 1
39118: DEC
39119: ST_TO_ADDR
39120: LD_INT 3
39122: PUSH
39123: FOR_TO
39124: IFFALSE 39153
// AddResourceType ( base , i , sources [ i ] ) ;
39126: LD_VAR 0 15
39130: PPUSH
39131: LD_VAR 0 8
39135: PPUSH
39136: LD_VAR 0 5
39140: PUSH
39141: LD_VAR 0 8
39145: ARRAY
39146: PPUSH
39147: CALL_OW 276
39151: GO 39123
39153: POP
39154: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39155: LD_ADDR_VAR 0 18
39159: PUSH
39160: LD_VAR 0 15
39164: PPUSH
39165: LD_VAR 0 2
39169: PPUSH
39170: LD_INT 1
39172: PPUSH
39173: CALL 38414 0 3
39177: ST_TO_ADDR
// InitHc ;
39178: CALL_OW 19
// InitUc ;
39182: CALL_OW 18
// uc_side := side ;
39186: LD_ADDR_OWVAR 20
39190: PUSH
39191: LD_VAR 0 16
39195: ST_TO_ADDR
// uc_nation := nation ;
39196: LD_ADDR_OWVAR 21
39200: PUSH
39201: LD_VAR 0 17
39205: ST_TO_ADDR
// if buildings then
39206: LD_VAR 0 18
39210: IFFALSE 40538
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39212: LD_ADDR_VAR 0 19
39216: PUSH
39217: LD_VAR 0 18
39221: PPUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 30
39227: PUSH
39228: LD_INT 29
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 30
39237: PUSH
39238: LD_INT 30
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: PPUSH
39250: CALL_OW 72
39254: ST_TO_ADDR
// if tmp then
39255: LD_VAR 0 19
39259: IFFALSE 39307
// for i in tmp do
39261: LD_ADDR_VAR 0 8
39265: PUSH
39266: LD_VAR 0 19
39270: PUSH
39271: FOR_IN
39272: IFFALSE 39305
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39274: LD_VAR 0 8
39278: PPUSH
39279: CALL_OW 250
39283: PPUSH
39284: LD_VAR 0 8
39288: PPUSH
39289: CALL_OW 251
39293: PPUSH
39294: LD_VAR 0 16
39298: PPUSH
39299: CALL_OW 441
39303: GO 39271
39305: POP
39306: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39307: LD_VAR 0 18
39311: PPUSH
39312: LD_INT 2
39314: PUSH
39315: LD_INT 30
39317: PUSH
39318: LD_INT 32
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 30
39327: PUSH
39328: LD_INT 33
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: PPUSH
39340: CALL_OW 72
39344: IFFALSE 39432
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39346: LD_ADDR_VAR 0 8
39350: PUSH
39351: LD_VAR 0 18
39355: PPUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 30
39361: PUSH
39362: LD_INT 32
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 30
39371: PUSH
39372: LD_INT 33
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: PPUSH
39384: CALL_OW 72
39388: PUSH
39389: FOR_IN
39390: IFFALSE 39430
// begin if not GetBWeapon ( i ) then
39392: LD_VAR 0 8
39396: PPUSH
39397: CALL_OW 269
39401: NOT
39402: IFFALSE 39428
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39404: LD_VAR 0 8
39408: PPUSH
39409: LD_VAR 0 8
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: CALL 40684 0 2
39423: PPUSH
39424: CALL_OW 431
// end ;
39428: GO 39389
39430: POP
39431: POP
// end ; for i = 1 to personel do
39432: LD_ADDR_VAR 0 8
39436: PUSH
39437: DOUBLE
39438: LD_INT 1
39440: DEC
39441: ST_TO_ADDR
39442: LD_VAR 0 6
39446: PUSH
39447: FOR_TO
39448: IFFALSE 40518
// begin if i > 4 then
39450: LD_VAR 0 8
39454: PUSH
39455: LD_INT 4
39457: GREATER
39458: IFFALSE 39462
// break ;
39460: GO 40518
// case i of 1 :
39462: LD_VAR 0 8
39466: PUSH
39467: LD_INT 1
39469: DOUBLE
39470: EQUAL
39471: IFTRUE 39475
39473: GO 39555
39475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39476: LD_ADDR_VAR 0 12
39480: PUSH
39481: LD_VAR 0 18
39485: PPUSH
39486: LD_INT 22
39488: PUSH
39489: LD_VAR 0 16
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 58
39500: PUSH
39501: EMPTY
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: LD_INT 30
39509: PUSH
39510: LD_INT 32
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 30
39519: PUSH
39520: LD_INT 4
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 30
39529: PUSH
39530: LD_INT 5
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: PPUSH
39548: CALL_OW 72
39552: ST_TO_ADDR
39553: GO 39777
39555: LD_INT 2
39557: DOUBLE
39558: EQUAL
39559: IFTRUE 39563
39561: GO 39625
39563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39564: LD_ADDR_VAR 0 12
39568: PUSH
39569: LD_VAR 0 18
39573: PPUSH
39574: LD_INT 22
39576: PUSH
39577: LD_VAR 0 16
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 30
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 30
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PPUSH
39618: CALL_OW 72
39622: ST_TO_ADDR
39623: GO 39777
39625: LD_INT 3
39627: DOUBLE
39628: EQUAL
39629: IFTRUE 39633
39631: GO 39695
39633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39634: LD_ADDR_VAR 0 12
39638: PUSH
39639: LD_VAR 0 18
39643: PPUSH
39644: LD_INT 22
39646: PUSH
39647: LD_VAR 0 16
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 30
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 30
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PPUSH
39688: CALL_OW 72
39692: ST_TO_ADDR
39693: GO 39777
39695: LD_INT 4
39697: DOUBLE
39698: EQUAL
39699: IFTRUE 39703
39701: GO 39776
39703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39704: LD_ADDR_VAR 0 12
39708: PUSH
39709: LD_VAR 0 18
39713: PPUSH
39714: LD_INT 22
39716: PUSH
39717: LD_VAR 0 16
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 30
39731: PUSH
39732: LD_INT 6
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 30
39741: PUSH
39742: LD_INT 7
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 30
39751: PUSH
39752: LD_INT 8
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PPUSH
39769: CALL_OW 72
39773: ST_TO_ADDR
39774: GO 39777
39776: POP
// if i = 1 then
39777: LD_VAR 0 8
39781: PUSH
39782: LD_INT 1
39784: EQUAL
39785: IFFALSE 39896
// begin tmp := [ ] ;
39787: LD_ADDR_VAR 0 19
39791: PUSH
39792: EMPTY
39793: ST_TO_ADDR
// for j in f do
39794: LD_ADDR_VAR 0 9
39798: PUSH
39799: LD_VAR 0 12
39803: PUSH
39804: FOR_IN
39805: IFFALSE 39878
// if GetBType ( j ) = b_bunker then
39807: LD_VAR 0 9
39811: PPUSH
39812: CALL_OW 266
39816: PUSH
39817: LD_INT 32
39819: EQUAL
39820: IFFALSE 39847
// tmp := Insert ( tmp , 1 , j ) else
39822: LD_ADDR_VAR 0 19
39826: PUSH
39827: LD_VAR 0 19
39831: PPUSH
39832: LD_INT 1
39834: PPUSH
39835: LD_VAR 0 9
39839: PPUSH
39840: CALL_OW 2
39844: ST_TO_ADDR
39845: GO 39876
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39847: LD_ADDR_VAR 0 19
39851: PUSH
39852: LD_VAR 0 19
39856: PPUSH
39857: LD_VAR 0 19
39861: PUSH
39862: LD_INT 1
39864: PLUS
39865: PPUSH
39866: LD_VAR 0 9
39870: PPUSH
39871: CALL_OW 2
39875: ST_TO_ADDR
39876: GO 39804
39878: POP
39879: POP
// if tmp then
39880: LD_VAR 0 19
39884: IFFALSE 39896
// f := tmp ;
39886: LD_ADDR_VAR 0 12
39890: PUSH
39891: LD_VAR 0 19
39895: ST_TO_ADDR
// end ; x := personel [ i ] ;
39896: LD_ADDR_VAR 0 13
39900: PUSH
39901: LD_VAR 0 6
39905: PUSH
39906: LD_VAR 0 8
39910: ARRAY
39911: ST_TO_ADDR
// if x = - 1 then
39912: LD_VAR 0 13
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: EQUAL
39921: IFFALSE 40132
// begin for j in f do
39923: LD_ADDR_VAR 0 9
39927: PUSH
39928: LD_VAR 0 12
39932: PUSH
39933: FOR_IN
39934: IFFALSE 40128
// repeat InitHc ;
39936: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39940: LD_VAR 0 9
39944: PPUSH
39945: CALL_OW 266
39949: PUSH
39950: LD_INT 5
39952: EQUAL
39953: IFFALSE 40023
// begin if UnitsInside ( j ) < 3 then
39955: LD_VAR 0 9
39959: PPUSH
39960: CALL_OW 313
39964: PUSH
39965: LD_INT 3
39967: LESS
39968: IFFALSE 40004
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39970: LD_INT 0
39972: PPUSH
39973: LD_INT 5
39975: PUSH
39976: LD_INT 8
39978: PUSH
39979: LD_INT 9
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: LIST
39986: PUSH
39987: LD_VAR 0 17
39991: ARRAY
39992: PPUSH
39993: LD_VAR 0 4
39997: PPUSH
39998: CALL_OW 380
40002: GO 40021
// PrepareHuman ( false , i , skill ) ;
40004: LD_INT 0
40006: PPUSH
40007: LD_VAR 0 8
40011: PPUSH
40012: LD_VAR 0 4
40016: PPUSH
40017: CALL_OW 380
// end else
40021: GO 40040
// PrepareHuman ( false , i , skill ) ;
40023: LD_INT 0
40025: PPUSH
40026: LD_VAR 0 8
40030: PPUSH
40031: LD_VAR 0 4
40035: PPUSH
40036: CALL_OW 380
// un := CreateHuman ;
40040: LD_ADDR_VAR 0 14
40044: PUSH
40045: CALL_OW 44
40049: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40050: LD_ADDR_VAR 0 7
40054: PUSH
40055: LD_VAR 0 7
40059: PPUSH
40060: LD_INT 1
40062: PPUSH
40063: LD_VAR 0 14
40067: PPUSH
40068: CALL_OW 2
40072: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40073: LD_VAR 0 14
40077: PPUSH
40078: LD_VAR 0 9
40082: PPUSH
40083: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40087: LD_VAR 0 9
40091: PPUSH
40092: CALL_OW 313
40096: PUSH
40097: LD_INT 6
40099: EQUAL
40100: IFTRUE 40124
40102: PUSH
40103: LD_VAR 0 9
40107: PPUSH
40108: CALL_OW 266
40112: PUSH
40113: LD_INT 32
40115: PUSH
40116: LD_INT 31
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: IN
40123: OR
40124: IFFALSE 39936
40126: GO 39933
40128: POP
40129: POP
// end else
40130: GO 40516
// for j = 1 to x do
40132: LD_ADDR_VAR 0 9
40136: PUSH
40137: DOUBLE
40138: LD_INT 1
40140: DEC
40141: ST_TO_ADDR
40142: LD_VAR 0 13
40146: PUSH
40147: FOR_TO
40148: IFFALSE 40514
// begin InitHc ;
40150: CALL_OW 19
// if not f then
40154: LD_VAR 0 12
40158: NOT
40159: IFFALSE 40248
// begin PrepareHuman ( false , i , skill ) ;
40161: LD_INT 0
40163: PPUSH
40164: LD_VAR 0 8
40168: PPUSH
40169: LD_VAR 0 4
40173: PPUSH
40174: CALL_OW 380
// un := CreateHuman ;
40178: LD_ADDR_VAR 0 14
40182: PUSH
40183: CALL_OW 44
40187: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40188: LD_ADDR_VAR 0 7
40192: PUSH
40193: LD_VAR 0 7
40197: PPUSH
40198: LD_INT 1
40200: PPUSH
40201: LD_VAR 0 14
40205: PPUSH
40206: CALL_OW 2
40210: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40211: LD_VAR 0 14
40215: PPUSH
40216: LD_VAR 0 1
40220: PPUSH
40221: CALL_OW 250
40225: PPUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 251
40235: PPUSH
40236: LD_INT 10
40238: PPUSH
40239: LD_INT 0
40241: PPUSH
40242: CALL_OW 50
// continue ;
40246: GO 40147
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40248: LD_VAR 0 12
40252: PUSH
40253: LD_INT 1
40255: ARRAY
40256: PPUSH
40257: CALL_OW 313
40261: IFFALSE 40289
40263: PUSH
40264: LD_VAR 0 12
40268: PUSH
40269: LD_INT 1
40271: ARRAY
40272: PPUSH
40273: CALL_OW 266
40277: PUSH
40278: LD_INT 32
40280: PUSH
40281: LD_INT 31
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: IN
40288: AND
40289: IFTRUE 40310
40291: PUSH
40292: LD_VAR 0 12
40296: PUSH
40297: LD_INT 1
40299: ARRAY
40300: PPUSH
40301: CALL_OW 313
40305: PUSH
40306: LD_INT 6
40308: EQUAL
40309: OR
40310: IFFALSE 40330
// f := Delete ( f , 1 ) ;
40312: LD_ADDR_VAR 0 12
40316: PUSH
40317: LD_VAR 0 12
40321: PPUSH
40322: LD_INT 1
40324: PPUSH
40325: CALL_OW 3
40329: ST_TO_ADDR
// if not f then
40330: LD_VAR 0 12
40334: NOT
40335: IFFALSE 40353
// begin x := x + 2 ;
40337: LD_ADDR_VAR 0 13
40341: PUSH
40342: LD_VAR 0 13
40346: PUSH
40347: LD_INT 2
40349: PLUS
40350: ST_TO_ADDR
// continue ;
40351: GO 40147
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40353: LD_VAR 0 12
40357: PUSH
40358: LD_INT 1
40360: ARRAY
40361: PPUSH
40362: CALL_OW 266
40366: PUSH
40367: LD_INT 5
40369: EQUAL
40370: IFFALSE 40444
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40372: LD_VAR 0 12
40376: PUSH
40377: LD_INT 1
40379: ARRAY
40380: PPUSH
40381: CALL_OW 313
40385: PUSH
40386: LD_INT 3
40388: LESS
40389: IFFALSE 40425
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40391: LD_INT 0
40393: PPUSH
40394: LD_INT 5
40396: PUSH
40397: LD_INT 8
40399: PUSH
40400: LD_INT 9
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: PUSH
40408: LD_VAR 0 17
40412: ARRAY
40413: PPUSH
40414: LD_VAR 0 4
40418: PPUSH
40419: CALL_OW 380
40423: GO 40442
// PrepareHuman ( false , i , skill ) ;
40425: LD_INT 0
40427: PPUSH
40428: LD_VAR 0 8
40432: PPUSH
40433: LD_VAR 0 4
40437: PPUSH
40438: CALL_OW 380
// end else
40442: GO 40461
// PrepareHuman ( false , i , skill ) ;
40444: LD_INT 0
40446: PPUSH
40447: LD_VAR 0 8
40451: PPUSH
40452: LD_VAR 0 4
40456: PPUSH
40457: CALL_OW 380
// un := CreateHuman ;
40461: LD_ADDR_VAR 0 14
40465: PUSH
40466: CALL_OW 44
40470: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40471: LD_ADDR_VAR 0 7
40475: PUSH
40476: LD_VAR 0 7
40480: PPUSH
40481: LD_INT 1
40483: PPUSH
40484: LD_VAR 0 14
40488: PPUSH
40489: CALL_OW 2
40493: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40494: LD_VAR 0 14
40498: PPUSH
40499: LD_VAR 0 12
40503: PUSH
40504: LD_INT 1
40506: ARRAY
40507: PPUSH
40508: CALL_OW 52
// end ;
40512: GO 40147
40514: POP
40515: POP
// end ;
40516: GO 39447
40518: POP
40519: POP
// result := result ^ buildings ;
40520: LD_ADDR_VAR 0 7
40524: PUSH
40525: LD_VAR 0 7
40529: PUSH
40530: LD_VAR 0 18
40534: ADD
40535: ST_TO_ADDR
// end else
40536: GO 40679
// begin for i = 1 to personel do
40538: LD_ADDR_VAR 0 8
40542: PUSH
40543: DOUBLE
40544: LD_INT 1
40546: DEC
40547: ST_TO_ADDR
40548: LD_VAR 0 6
40552: PUSH
40553: FOR_TO
40554: IFFALSE 40677
// begin if i > 4 then
40556: LD_VAR 0 8
40560: PUSH
40561: LD_INT 4
40563: GREATER
40564: IFFALSE 40568
// break ;
40566: GO 40677
// x := personel [ i ] ;
40568: LD_ADDR_VAR 0 13
40572: PUSH
40573: LD_VAR 0 6
40577: PUSH
40578: LD_VAR 0 8
40582: ARRAY
40583: ST_TO_ADDR
// if x = - 1 then
40584: LD_VAR 0 13
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: EQUAL
40593: IFFALSE 40597
// continue ;
40595: GO 40553
// PrepareHuman ( false , i , skill ) ;
40597: LD_INT 0
40599: PPUSH
40600: LD_VAR 0 8
40604: PPUSH
40605: LD_VAR 0 4
40609: PPUSH
40610: CALL_OW 380
// un := CreateHuman ;
40614: LD_ADDR_VAR 0 14
40618: PUSH
40619: CALL_OW 44
40623: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40624: LD_VAR 0 14
40628: PPUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: CALL_OW 250
40638: PPUSH
40639: LD_VAR 0 1
40643: PPUSH
40644: CALL_OW 251
40648: PPUSH
40649: LD_INT 10
40651: PPUSH
40652: LD_INT 0
40654: PPUSH
40655: CALL_OW 50
// result := result ^ un ;
40659: LD_ADDR_VAR 0 7
40663: PUSH
40664: LD_VAR 0 7
40668: PUSH
40669: LD_VAR 0 14
40673: ADD
40674: ST_TO_ADDR
// end ;
40675: GO 40553
40677: POP
40678: POP
// end ; end ;
40679: LD_VAR 0 7
40683: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40684: LD_INT 0
40686: PPUSH
40687: PPUSH
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
// result := false ;
40702: LD_ADDR_VAR 0 3
40706: PUSH
40707: LD_INT 0
40709: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40710: LD_VAR 0 1
40714: NOT
40715: IFTRUE 40740
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 266
40727: PUSH
40728: LD_INT 32
40730: PUSH
40731: LD_INT 33
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: IN
40738: NOT
40739: OR
40740: IFFALSE 40744
// exit ;
40742: GO 41879
// nat := GetNation ( tower ) ;
40744: LD_ADDR_VAR 0 12
40748: PUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 248
40758: ST_TO_ADDR
// side := GetSide ( tower ) ;
40759: LD_ADDR_VAR 0 16
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: CALL_OW 255
40773: ST_TO_ADDR
// x := GetX ( tower ) ;
40774: LD_ADDR_VAR 0 10
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 250
40788: ST_TO_ADDR
// y := GetY ( tower ) ;
40789: LD_ADDR_VAR 0 11
40793: PUSH
40794: LD_VAR 0 1
40798: PPUSH
40799: CALL_OW 251
40803: ST_TO_ADDR
// if not x or not y then
40804: LD_VAR 0 10
40808: NOT
40809: IFTRUE 40818
40811: PUSH
40812: LD_VAR 0 11
40816: NOT
40817: OR
40818: IFFALSE 40822
// exit ;
40820: GO 41879
// weapon := 0 ;
40822: LD_ADDR_VAR 0 18
40826: PUSH
40827: LD_INT 0
40829: ST_TO_ADDR
// fac_list := [ ] ;
40830: LD_ADDR_VAR 0 17
40834: PUSH
40835: EMPTY
40836: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40837: LD_ADDR_VAR 0 6
40841: PUSH
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 274
40851: PPUSH
40852: LD_VAR 0 2
40856: PPUSH
40857: LD_INT 0
40859: PPUSH
40860: CALL 38414 0 3
40864: PPUSH
40865: LD_INT 30
40867: PUSH
40868: LD_INT 3
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PPUSH
40875: CALL_OW 72
40879: ST_TO_ADDR
// if not factories then
40880: LD_VAR 0 6
40884: NOT
40885: IFFALSE 40889
// exit ;
40887: GO 41879
// for i in factories do
40889: LD_ADDR_VAR 0 8
40893: PUSH
40894: LD_VAR 0 6
40898: PUSH
40899: FOR_IN
40900: IFFALSE 40925
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40902: LD_ADDR_VAR 0 17
40906: PUSH
40907: LD_VAR 0 17
40911: PUSH
40912: LD_VAR 0 8
40916: PPUSH
40917: CALL_OW 478
40921: UNION
40922: ST_TO_ADDR
40923: GO 40899
40925: POP
40926: POP
// if not fac_list then
40927: LD_VAR 0 17
40931: NOT
40932: IFFALSE 40936
// exit ;
40934: GO 41879
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40936: LD_ADDR_VAR 0 5
40940: PUSH
40941: LD_INT 4
40943: PUSH
40944: LD_INT 5
40946: PUSH
40947: LD_INT 9
40949: PUSH
40950: LD_INT 10
40952: PUSH
40953: LD_INT 6
40955: PUSH
40956: LD_INT 7
40958: PUSH
40959: LD_INT 11
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 27
40973: PUSH
40974: LD_INT 28
40976: PUSH
40977: LD_INT 26
40979: PUSH
40980: LD_INT 30
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 43
40991: PUSH
40992: LD_INT 44
40994: PUSH
40995: LD_INT 46
40997: PUSH
40998: LD_INT 45
41000: PUSH
41001: LD_INT 47
41003: PUSH
41004: LD_INT 49
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: PUSH
41020: LD_VAR 0 12
41024: ARRAY
41025: ST_TO_ADDR
// list := list isect fac_list ;
41026: LD_ADDR_VAR 0 5
41030: PUSH
41031: LD_VAR 0 5
41035: PUSH
41036: LD_VAR 0 17
41040: ISECT
41041: ST_TO_ADDR
// if not list then
41042: LD_VAR 0 5
41046: NOT
41047: IFFALSE 41051
// exit ;
41049: GO 41879
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41051: LD_VAR 0 12
41055: PUSH
41056: LD_INT 3
41058: EQUAL
41059: IFFALSE 41071
41061: PUSH
41062: LD_INT 49
41064: PUSH
41065: LD_VAR 0 5
41069: IN
41070: AND
41071: IFFALSE 41091
41073: PUSH
41074: LD_INT 31
41076: PPUSH
41077: LD_VAR 0 16
41081: PPUSH
41082: CALL_OW 321
41086: PUSH
41087: LD_INT 2
41089: EQUAL
41090: AND
41091: IFFALSE 41151
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41093: LD_INT 22
41095: PUSH
41096: LD_VAR 0 16
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 35
41107: PUSH
41108: LD_INT 49
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 91
41117: PUSH
41118: LD_VAR 0 1
41122: PUSH
41123: LD_INT 10
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: LIST
41135: PPUSH
41136: CALL_OW 69
41140: NOT
41141: IFFALSE 41151
// weapon := ru_time_lapser ;
41143: LD_ADDR_VAR 0 18
41147: PUSH
41148: LD_INT 49
41150: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41151: LD_VAR 0 12
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: IN
41166: IFFALSE 41190
41168: PUSH
41169: LD_INT 11
41171: PUSH
41172: LD_VAR 0 5
41176: IN
41177: IFTRUE 41189
41179: PUSH
41180: LD_INT 30
41182: PUSH
41183: LD_VAR 0 5
41187: IN
41188: OR
41189: AND
41190: IFFALSE 41210
41192: PUSH
41193: LD_INT 6
41195: PPUSH
41196: LD_VAR 0 16
41200: PPUSH
41201: CALL_OW 321
41205: PUSH
41206: LD_INT 2
41208: EQUAL
41209: AND
41210: IFFALSE 41377
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41212: LD_INT 22
41214: PUSH
41215: LD_VAR 0 16
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: LD_INT 35
41229: PUSH
41230: LD_INT 11
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 35
41239: PUSH
41240: LD_INT 30
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 91
41254: PUSH
41255: LD_VAR 0 1
41259: PUSH
41260: LD_INT 18
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: PPUSH
41273: CALL_OW 69
41277: NOT
41278: IFFALSE 41354
41280: PUSH
41281: LD_INT 22
41283: PUSH
41284: LD_VAR 0 16
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 30
41298: PUSH
41299: LD_INT 32
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 30
41308: PUSH
41309: LD_INT 33
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 91
41323: PUSH
41324: LD_VAR 0 1
41328: PUSH
41329: LD_INT 12
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: LIST
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: PPUSH
41345: CALL_OW 69
41349: PUSH
41350: LD_INT 2
41352: GREATER
41353: AND
41354: IFFALSE 41377
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41356: LD_ADDR_VAR 0 18
41360: PUSH
41361: LD_INT 11
41363: PUSH
41364: LD_INT 30
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_VAR 0 12
41375: ARRAY
41376: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41377: LD_VAR 0 18
41381: NOT
41382: IFFALSE 41402
41384: PUSH
41385: LD_INT 40
41387: PPUSH
41388: LD_VAR 0 16
41392: PPUSH
41393: CALL_OW 321
41397: PUSH
41398: LD_INT 2
41400: EQUAL
41401: AND
41402: IFFALSE 41438
41404: PUSH
41405: LD_INT 7
41407: PUSH
41408: LD_VAR 0 5
41412: IN
41413: IFTRUE 41425
41415: PUSH
41416: LD_INT 28
41418: PUSH
41419: LD_VAR 0 5
41423: IN
41424: OR
41425: IFTRUE 41437
41427: PUSH
41428: LD_INT 45
41430: PUSH
41431: LD_VAR 0 5
41435: IN
41436: OR
41437: AND
41438: IFFALSE 41692
// begin hex := GetHexInfo ( x , y ) ;
41440: LD_ADDR_VAR 0 4
41444: PUSH
41445: LD_VAR 0 10
41449: PPUSH
41450: LD_VAR 0 11
41454: PPUSH
41455: CALL_OW 546
41459: ST_TO_ADDR
// if hex [ 1 ] then
41460: LD_VAR 0 4
41464: PUSH
41465: LD_INT 1
41467: ARRAY
41468: IFFALSE 41472
// exit ;
41470: GO 41879
// height := hex [ 2 ] ;
41472: LD_ADDR_VAR 0 15
41476: PUSH
41477: LD_VAR 0 4
41481: PUSH
41482: LD_INT 2
41484: ARRAY
41485: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41486: LD_ADDR_VAR 0 14
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: LD_INT 5
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: ST_TO_ADDR
// for i in tmp do
41509: LD_ADDR_VAR 0 8
41513: PUSH
41514: LD_VAR 0 14
41518: PUSH
41519: FOR_IN
41520: IFFALSE 41690
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41522: LD_ADDR_VAR 0 9
41526: PUSH
41527: LD_VAR 0 10
41531: PPUSH
41532: LD_VAR 0 8
41536: PPUSH
41537: LD_INT 5
41539: PPUSH
41540: CALL_OW 272
41544: PUSH
41545: LD_VAR 0 11
41549: PPUSH
41550: LD_VAR 0 8
41554: PPUSH
41555: LD_INT 5
41557: PPUSH
41558: CALL_OW 273
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41567: LD_VAR 0 9
41571: PUSH
41572: LD_INT 1
41574: ARRAY
41575: PPUSH
41576: LD_VAR 0 9
41580: PUSH
41581: LD_INT 2
41583: ARRAY
41584: PPUSH
41585: CALL_OW 488
41589: IFFALSE 41688
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41591: LD_ADDR_VAR 0 4
41595: PUSH
41596: LD_VAR 0 9
41600: PUSH
41601: LD_INT 1
41603: ARRAY
41604: PPUSH
41605: LD_VAR 0 9
41609: PUSH
41610: LD_INT 2
41612: ARRAY
41613: PPUSH
41614: CALL_OW 546
41618: ST_TO_ADDR
// if hex [ 1 ] then
41619: LD_VAR 0 4
41623: PUSH
41624: LD_INT 1
41626: ARRAY
41627: IFFALSE 41631
// continue ;
41629: GO 41519
// h := hex [ 2 ] ;
41631: LD_ADDR_VAR 0 13
41635: PUSH
41636: LD_VAR 0 4
41640: PUSH
41641: LD_INT 2
41643: ARRAY
41644: ST_TO_ADDR
// if h + 7 < height then
41645: LD_VAR 0 13
41649: PUSH
41650: LD_INT 7
41652: PLUS
41653: PUSH
41654: LD_VAR 0 15
41658: LESS
41659: IFFALSE 41688
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41661: LD_ADDR_VAR 0 18
41665: PUSH
41666: LD_INT 7
41668: PUSH
41669: LD_INT 28
41671: PUSH
41672: LD_INT 45
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: PUSH
41680: LD_VAR 0 12
41684: ARRAY
41685: ST_TO_ADDR
// break ;
41686: GO 41690
// end ; end ; end ;
41688: GO 41519
41690: POP
41691: POP
// end ; if not weapon then
41692: LD_VAR 0 18
41696: NOT
41697: IFFALSE 41757
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41699: LD_ADDR_VAR 0 5
41703: PUSH
41704: LD_VAR 0 5
41708: PUSH
41709: LD_INT 11
41711: PUSH
41712: LD_INT 30
41714: PUSH
41715: LD_INT 49
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: LIST
41722: DIFF
41723: ST_TO_ADDR
// if not list then
41724: LD_VAR 0 5
41728: NOT
41729: IFFALSE 41733
// exit ;
41731: GO 41879
// weapon := list [ rand ( 1 , list ) ] ;
41733: LD_ADDR_VAR 0 18
41737: PUSH
41738: LD_VAR 0 5
41742: PUSH
41743: LD_INT 1
41745: PPUSH
41746: LD_VAR 0 5
41750: PPUSH
41751: CALL_OW 12
41755: ARRAY
41756: ST_TO_ADDR
// end ; if weapon then
41757: LD_VAR 0 18
41761: IFFALSE 41879
// begin tmp := CostOfWeapon ( weapon ) ;
41763: LD_ADDR_VAR 0 14
41767: PUSH
41768: LD_VAR 0 18
41772: PPUSH
41773: CALL_OW 451
41777: ST_TO_ADDR
// j := GetBase ( tower ) ;
41778: LD_ADDR_VAR 0 9
41782: PUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 274
41792: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41793: LD_VAR 0 9
41797: PPUSH
41798: LD_INT 1
41800: PPUSH
41801: CALL_OW 275
41805: PUSH
41806: LD_VAR 0 14
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: GREATEREQUAL
41815: IFFALSE 41841
41817: PUSH
41818: LD_VAR 0 9
41822: PPUSH
41823: LD_INT 2
41825: PPUSH
41826: CALL_OW 275
41830: PUSH
41831: LD_VAR 0 14
41835: PUSH
41836: LD_INT 2
41838: ARRAY
41839: GREATEREQUAL
41840: AND
41841: IFFALSE 41867
41843: PUSH
41844: LD_VAR 0 9
41848: PPUSH
41849: LD_INT 3
41851: PPUSH
41852: CALL_OW 275
41856: PUSH
41857: LD_VAR 0 14
41861: PUSH
41862: LD_INT 3
41864: ARRAY
41865: GREATEREQUAL
41866: AND
41867: IFFALSE 41879
// result := weapon ;
41869: LD_ADDR_VAR 0 3
41873: PUSH
41874: LD_VAR 0 18
41878: ST_TO_ADDR
// end ; end ;
41879: LD_VAR 0 3
41883: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41884: LD_INT 0
41886: PPUSH
41887: PPUSH
// result := true ;
41888: LD_ADDR_VAR 0 3
41892: PUSH
41893: LD_INT 1
41895: ST_TO_ADDR
// if array1 = array2 then
41896: LD_VAR 0 1
41900: PUSH
41901: LD_VAR 0 2
41905: EQUAL
41906: IFFALSE 41966
// begin for i = 1 to array1 do
41908: LD_ADDR_VAR 0 4
41912: PUSH
41913: DOUBLE
41914: LD_INT 1
41916: DEC
41917: ST_TO_ADDR
41918: LD_VAR 0 1
41922: PUSH
41923: FOR_TO
41924: IFFALSE 41962
// if array1 [ i ] <> array2 [ i ] then
41926: LD_VAR 0 1
41930: PUSH
41931: LD_VAR 0 4
41935: ARRAY
41936: PUSH
41937: LD_VAR 0 2
41941: PUSH
41942: LD_VAR 0 4
41946: ARRAY
41947: NONEQUAL
41948: IFFALSE 41960
// begin result := false ;
41950: LD_ADDR_VAR 0 3
41954: PUSH
41955: LD_INT 0
41957: ST_TO_ADDR
// break ;
41958: GO 41962
// end ;
41960: GO 41923
41962: POP
41963: POP
// end else
41964: GO 41974
// result := false ;
41966: LD_ADDR_VAR 0 3
41970: PUSH
41971: LD_INT 0
41973: ST_TO_ADDR
// end ;
41974: LD_VAR 0 3
41978: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41979: LD_INT 0
41981: PPUSH
41982: PPUSH
// if not array1 or not array2 then
41983: LD_VAR 0 1
41987: NOT
41988: IFTRUE 41997
41990: PUSH
41991: LD_VAR 0 2
41995: NOT
41996: OR
41997: IFFALSE 42001
// exit ;
41999: GO 42065
// result := true ;
42001: LD_ADDR_VAR 0 3
42005: PUSH
42006: LD_INT 1
42008: ST_TO_ADDR
// for i = 1 to array1 do
42009: LD_ADDR_VAR 0 4
42013: PUSH
42014: DOUBLE
42015: LD_INT 1
42017: DEC
42018: ST_TO_ADDR
42019: LD_VAR 0 1
42023: PUSH
42024: FOR_TO
42025: IFFALSE 42063
// if array1 [ i ] <> array2 [ i ] then
42027: LD_VAR 0 1
42031: PUSH
42032: LD_VAR 0 4
42036: ARRAY
42037: PUSH
42038: LD_VAR 0 2
42042: PUSH
42043: LD_VAR 0 4
42047: ARRAY
42048: NONEQUAL
42049: IFFALSE 42061
// begin result := false ;
42051: LD_ADDR_VAR 0 3
42055: PUSH
42056: LD_INT 0
42058: ST_TO_ADDR
// break ;
42059: GO 42063
// end ;
42061: GO 42024
42063: POP
42064: POP
// end ;
42065: LD_VAR 0 3
42069: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42070: LD_INT 0
42072: PPUSH
42073: PPUSH
42074: PPUSH
// pom := GetBase ( fac ) ;
42075: LD_ADDR_VAR 0 5
42079: PUSH
42080: LD_VAR 0 1
42084: PPUSH
42085: CALL_OW 274
42089: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42090: LD_ADDR_VAR 0 4
42094: PUSH
42095: LD_VAR 0 2
42099: PUSH
42100: LD_INT 1
42102: ARRAY
42103: PPUSH
42104: LD_VAR 0 2
42108: PUSH
42109: LD_INT 2
42111: ARRAY
42112: PPUSH
42113: LD_VAR 0 2
42117: PUSH
42118: LD_INT 3
42120: ARRAY
42121: PPUSH
42122: LD_VAR 0 2
42126: PUSH
42127: LD_INT 4
42129: ARRAY
42130: PPUSH
42131: CALL_OW 449
42135: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_VAR 0 5
42145: PPUSH
42146: LD_INT 1
42148: PPUSH
42149: CALL_OW 275
42153: PUSH
42154: LD_VAR 0 4
42158: PUSH
42159: LD_INT 1
42161: ARRAY
42162: GREATEREQUAL
42163: IFFALSE 42189
42165: PUSH
42166: LD_VAR 0 5
42170: PPUSH
42171: LD_INT 2
42173: PPUSH
42174: CALL_OW 275
42178: PUSH
42179: LD_VAR 0 4
42183: PUSH
42184: LD_INT 2
42186: ARRAY
42187: GREATEREQUAL
42188: AND
42189: IFFALSE 42215
42191: PUSH
42192: LD_VAR 0 5
42196: PPUSH
42197: LD_INT 3
42199: PPUSH
42200: CALL_OW 275
42204: PUSH
42205: LD_VAR 0 4
42209: PUSH
42210: LD_INT 3
42212: ARRAY
42213: GREATEREQUAL
42214: AND
42215: ST_TO_ADDR
// end ;
42216: LD_VAR 0 3
42220: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42221: LD_INT 0
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
// pom := GetBase ( building ) ;
42227: LD_ADDR_VAR 0 3
42231: PUSH
42232: LD_VAR 0 1
42236: PPUSH
42237: CALL_OW 274
42241: ST_TO_ADDR
// if not pom then
42242: LD_VAR 0 3
42246: NOT
42247: IFFALSE 42251
// exit ;
42249: GO 42425
// btype := GetBType ( building ) ;
42251: LD_ADDR_VAR 0 5
42255: PUSH
42256: LD_VAR 0 1
42260: PPUSH
42261: CALL_OW 266
42265: ST_TO_ADDR
// if btype = b_armoury then
42266: LD_VAR 0 5
42270: PUSH
42271: LD_INT 4
42273: EQUAL
42274: IFFALSE 42284
// btype := b_barracks ;
42276: LD_ADDR_VAR 0 5
42280: PUSH
42281: LD_INT 5
42283: ST_TO_ADDR
// if btype = b_depot then
42284: LD_VAR 0 5
42288: PUSH
42289: LD_INT 0
42291: EQUAL
42292: IFFALSE 42302
// btype := b_warehouse ;
42294: LD_ADDR_VAR 0 5
42298: PUSH
42299: LD_INT 1
42301: ST_TO_ADDR
// if btype = b_workshop then
42302: LD_VAR 0 5
42306: PUSH
42307: LD_INT 2
42309: EQUAL
42310: IFFALSE 42320
// btype := b_factory ;
42312: LD_ADDR_VAR 0 5
42316: PUSH
42317: LD_INT 3
42319: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42320: LD_ADDR_VAR 0 4
42324: PUSH
42325: LD_VAR 0 5
42329: PPUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: CALL_OW 248
42339: PPUSH
42340: CALL_OW 450
42344: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42345: LD_ADDR_VAR 0 2
42349: PUSH
42350: LD_VAR 0 3
42354: PPUSH
42355: LD_INT 1
42357: PPUSH
42358: CALL_OW 275
42362: PUSH
42363: LD_VAR 0 4
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: GREATEREQUAL
42372: IFFALSE 42398
42374: PUSH
42375: LD_VAR 0 3
42379: PPUSH
42380: LD_INT 2
42382: PPUSH
42383: CALL_OW 275
42387: PUSH
42388: LD_VAR 0 4
42392: PUSH
42393: LD_INT 2
42395: ARRAY
42396: GREATEREQUAL
42397: AND
42398: IFFALSE 42424
42400: PUSH
42401: LD_VAR 0 3
42405: PPUSH
42406: LD_INT 3
42408: PPUSH
42409: CALL_OW 275
42413: PUSH
42414: LD_VAR 0 4
42418: PUSH
42419: LD_INT 3
42421: ARRAY
42422: GREATEREQUAL
42423: AND
42424: ST_TO_ADDR
// end ;
42425: LD_VAR 0 2
42429: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42430: LD_INT 0
42432: PPUSH
42433: PPUSH
42434: PPUSH
// pom := GetBase ( building ) ;
42435: LD_ADDR_VAR 0 4
42439: PUSH
42440: LD_VAR 0 1
42444: PPUSH
42445: CALL_OW 274
42449: ST_TO_ADDR
// if not pom then
42450: LD_VAR 0 4
42454: NOT
42455: IFFALSE 42459
// exit ;
42457: GO 42564
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42459: LD_ADDR_VAR 0 5
42463: PUSH
42464: LD_VAR 0 2
42468: PPUSH
42469: LD_VAR 0 1
42473: PPUSH
42474: CALL_OW 248
42478: PPUSH
42479: CALL_OW 450
42483: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42484: LD_ADDR_VAR 0 3
42488: PUSH
42489: LD_VAR 0 4
42493: PPUSH
42494: LD_INT 1
42496: PPUSH
42497: CALL_OW 275
42501: PUSH
42502: LD_VAR 0 5
42506: PUSH
42507: LD_INT 1
42509: ARRAY
42510: GREATEREQUAL
42511: IFFALSE 42537
42513: PUSH
42514: LD_VAR 0 4
42518: PPUSH
42519: LD_INT 2
42521: PPUSH
42522: CALL_OW 275
42526: PUSH
42527: LD_VAR 0 5
42531: PUSH
42532: LD_INT 2
42534: ARRAY
42535: GREATEREQUAL
42536: AND
42537: IFFALSE 42563
42539: PUSH
42540: LD_VAR 0 4
42544: PPUSH
42545: LD_INT 3
42547: PPUSH
42548: CALL_OW 275
42552: PUSH
42553: LD_VAR 0 5
42557: PUSH
42558: LD_INT 3
42560: ARRAY
42561: GREATEREQUAL
42562: AND
42563: ST_TO_ADDR
// end ;
42564: LD_VAR 0 3
42568: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42569: LD_INT 0
42571: PPUSH
42572: PPUSH
42573: PPUSH
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
// result := false ;
42582: LD_ADDR_VAR 0 8
42586: PUSH
42587: LD_INT 0
42589: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42590: LD_VAR 0 5
42594: NOT
42595: IFTRUE 42604
42597: PUSH
42598: LD_VAR 0 1
42602: NOT
42603: OR
42604: IFTRUE 42613
42606: PUSH
42607: LD_VAR 0 2
42611: NOT
42612: OR
42613: IFTRUE 42622
42615: PUSH
42616: LD_VAR 0 3
42620: NOT
42621: OR
42622: IFFALSE 42626
// exit ;
42624: GO 43452
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42626: LD_ADDR_VAR 0 14
42630: PUSH
42631: LD_VAR 0 1
42635: PPUSH
42636: LD_VAR 0 2
42640: PPUSH
42641: LD_VAR 0 3
42645: PPUSH
42646: LD_VAR 0 4
42650: PPUSH
42651: LD_VAR 0 5
42655: PUSH
42656: LD_INT 1
42658: ARRAY
42659: PPUSH
42660: CALL_OW 248
42664: PPUSH
42665: LD_INT 0
42667: PPUSH
42668: CALL 44733 0 6
42672: ST_TO_ADDR
// if not hexes then
42673: LD_VAR 0 14
42677: NOT
42678: IFFALSE 42682
// exit ;
42680: GO 43452
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42682: LD_ADDR_VAR 0 17
42686: PUSH
42687: LD_VAR 0 5
42691: PPUSH
42692: LD_INT 22
42694: PUSH
42695: LD_VAR 0 13
42699: PPUSH
42700: CALL_OW 255
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 30
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 30
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PPUSH
42741: CALL_OW 72
42745: ST_TO_ADDR
// for i = 1 to hexes do
42746: LD_ADDR_VAR 0 9
42750: PUSH
42751: DOUBLE
42752: LD_INT 1
42754: DEC
42755: ST_TO_ADDR
42756: LD_VAR 0 14
42760: PUSH
42761: FOR_TO
42762: IFFALSE 43450
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42764: LD_ADDR_VAR 0 13
42768: PUSH
42769: LD_VAR 0 14
42773: PUSH
42774: LD_VAR 0 9
42778: ARRAY
42779: PUSH
42780: LD_INT 1
42782: ARRAY
42783: PPUSH
42784: LD_VAR 0 14
42788: PUSH
42789: LD_VAR 0 9
42793: ARRAY
42794: PUSH
42795: LD_INT 2
42797: ARRAY
42798: PPUSH
42799: CALL_OW 428
42803: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42804: LD_VAR 0 14
42808: PUSH
42809: LD_VAR 0 9
42813: ARRAY
42814: PUSH
42815: LD_INT 1
42817: ARRAY
42818: PPUSH
42819: LD_VAR 0 14
42823: PUSH
42824: LD_VAR 0 9
42828: ARRAY
42829: PUSH
42830: LD_INT 2
42832: ARRAY
42833: PPUSH
42834: CALL_OW 351
42838: IFTRUE 42877
42840: PUSH
42841: LD_VAR 0 14
42845: PUSH
42846: LD_VAR 0 9
42850: ARRAY
42851: PUSH
42852: LD_INT 1
42854: ARRAY
42855: PPUSH
42856: LD_VAR 0 14
42860: PUSH
42861: LD_VAR 0 9
42865: ARRAY
42866: PUSH
42867: LD_INT 2
42869: ARRAY
42870: PPUSH
42871: CALL_OW 488
42875: NOT
42876: OR
42877: IFTRUE 42894
42879: PUSH
42880: LD_VAR 0 13
42884: PPUSH
42885: CALL_OW 247
42889: PUSH
42890: LD_INT 3
42892: EQUAL
42893: OR
42894: IFFALSE 42900
// exit ;
42896: POP
42897: POP
42898: GO 43452
// if not tmp then
42900: LD_VAR 0 13
42904: NOT
42905: IFFALSE 42909
// continue ;
42907: GO 42761
// result := true ;
42909: LD_ADDR_VAR 0 8
42913: PUSH
42914: LD_INT 1
42916: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42917: LD_VAR 0 6
42921: IFFALSE 42938
42923: PUSH
42924: LD_VAR 0 13
42928: PPUSH
42929: CALL_OW 247
42933: PUSH
42934: LD_INT 2
42936: EQUAL
42937: AND
42938: IFFALSE 42955
42940: PUSH
42941: LD_VAR 0 13
42945: PPUSH
42946: CALL_OW 263
42950: PUSH
42951: LD_INT 1
42953: EQUAL
42954: AND
42955: IFFALSE 43119
// begin if IsDrivenBy ( tmp ) then
42957: LD_VAR 0 13
42961: PPUSH
42962: CALL_OW 311
42966: IFFALSE 42970
// continue ;
42968: GO 42761
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42970: LD_VAR 0 6
42974: PPUSH
42975: LD_INT 3
42977: PUSH
42978: LD_INT 60
42980: PUSH
42981: EMPTY
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 3
42990: PUSH
42991: LD_INT 55
42993: PUSH
42994: EMPTY
42995: LIST
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PPUSH
43005: CALL_OW 72
43009: IFFALSE 43117
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43011: LD_ADDR_VAR 0 18
43015: PUSH
43016: LD_VAR 0 6
43020: PPUSH
43021: LD_INT 3
43023: PUSH
43024: LD_INT 60
43026: PUSH
43027: EMPTY
43028: LIST
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 3
43036: PUSH
43037: LD_INT 55
43039: PUSH
43040: EMPTY
43041: LIST
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PPUSH
43051: CALL_OW 72
43055: PUSH
43056: LD_INT 1
43058: ARRAY
43059: ST_TO_ADDR
// if IsInUnit ( driver ) then
43060: LD_VAR 0 18
43064: PPUSH
43065: CALL_OW 310
43069: IFFALSE 43080
// ComExit ( driver ) ;
43071: LD_VAR 0 18
43075: PPUSH
43076: CALL 68733 0 1
// AddComEnterUnit ( driver , tmp ) ;
43080: LD_VAR 0 18
43084: PPUSH
43085: LD_VAR 0 13
43089: PPUSH
43090: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43094: LD_VAR 0 18
43098: PPUSH
43099: LD_VAR 0 7
43103: PPUSH
43104: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43108: LD_VAR 0 18
43112: PPUSH
43113: CALL_OW 181
// end ; continue ;
43117: GO 42761
// end ; if not cleaners or not tmp in cleaners then
43119: LD_VAR 0 6
43123: NOT
43124: IFTRUE 43139
43126: PUSH
43127: LD_VAR 0 13
43131: PUSH
43132: LD_VAR 0 6
43136: IN
43137: NOT
43138: OR
43139: IFFALSE 43448
// begin if dep then
43141: LD_VAR 0 17
43145: IFFALSE 43281
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43147: LD_ADDR_VAR 0 16
43151: PUSH
43152: LD_VAR 0 17
43156: PUSH
43157: LD_INT 1
43159: ARRAY
43160: PPUSH
43161: CALL_OW 250
43165: PPUSH
43166: LD_VAR 0 17
43170: PUSH
43171: LD_INT 1
43173: ARRAY
43174: PPUSH
43175: CALL_OW 254
43179: PPUSH
43180: LD_INT 5
43182: PPUSH
43183: CALL_OW 272
43187: PUSH
43188: LD_VAR 0 17
43192: PUSH
43193: LD_INT 1
43195: ARRAY
43196: PPUSH
43197: CALL_OW 251
43201: PPUSH
43202: LD_VAR 0 17
43206: PUSH
43207: LD_INT 1
43209: ARRAY
43210: PPUSH
43211: CALL_OW 254
43215: PPUSH
43216: LD_INT 5
43218: PPUSH
43219: CALL_OW 273
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43228: LD_VAR 0 16
43232: PUSH
43233: LD_INT 1
43235: ARRAY
43236: PPUSH
43237: LD_VAR 0 16
43241: PUSH
43242: LD_INT 2
43244: ARRAY
43245: PPUSH
43246: CALL_OW 488
43250: IFFALSE 43281
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43252: LD_VAR 0 13
43256: PPUSH
43257: LD_VAR 0 16
43261: PUSH
43262: LD_INT 1
43264: ARRAY
43265: PPUSH
43266: LD_VAR 0 16
43270: PUSH
43271: LD_INT 2
43273: ARRAY
43274: PPUSH
43275: CALL_OW 111
// continue ;
43279: GO 42761
// end ; end ; r := GetDir ( tmp ) ;
43281: LD_ADDR_VAR 0 15
43285: PUSH
43286: LD_VAR 0 13
43290: PPUSH
43291: CALL_OW 254
43295: ST_TO_ADDR
// if r = 5 then
43296: LD_VAR 0 15
43300: PUSH
43301: LD_INT 5
43303: EQUAL
43304: IFFALSE 43314
// r := 0 ;
43306: LD_ADDR_VAR 0 15
43310: PUSH
43311: LD_INT 0
43313: ST_TO_ADDR
// for j = r to 5 do
43314: LD_ADDR_VAR 0 10
43318: PUSH
43319: DOUBLE
43320: LD_VAR 0 15
43324: DEC
43325: ST_TO_ADDR
43326: LD_INT 5
43328: PUSH
43329: FOR_TO
43330: IFFALSE 43446
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43332: LD_ADDR_VAR 0 11
43336: PUSH
43337: LD_VAR 0 13
43341: PPUSH
43342: CALL_OW 250
43346: PPUSH
43347: LD_VAR 0 10
43351: PPUSH
43352: LD_INT 2
43354: PPUSH
43355: CALL_OW 272
43359: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43360: LD_ADDR_VAR 0 12
43364: PUSH
43365: LD_VAR 0 13
43369: PPUSH
43370: CALL_OW 251
43374: PPUSH
43375: LD_VAR 0 10
43379: PPUSH
43380: LD_INT 2
43382: PPUSH
43383: CALL_OW 273
43387: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43388: LD_VAR 0 11
43392: PPUSH
43393: LD_VAR 0 12
43397: PPUSH
43398: CALL_OW 488
43402: IFFALSE 43421
43404: PUSH
43405: LD_VAR 0 11
43409: PPUSH
43410: LD_VAR 0 12
43414: PPUSH
43415: CALL_OW 428
43419: NOT
43420: AND
43421: IFFALSE 43444
// begin ComMoveXY ( tmp , _x , _y ) ;
43423: LD_VAR 0 13
43427: PPUSH
43428: LD_VAR 0 11
43432: PPUSH
43433: LD_VAR 0 12
43437: PPUSH
43438: CALL_OW 111
// break ;
43442: GO 43446
// end ; end ;
43444: GO 43329
43446: POP
43447: POP
// end ; end ;
43448: GO 42761
43450: POP
43451: POP
// end ;
43452: LD_VAR 0 8
43456: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43457: LD_INT 0
43459: PPUSH
// result := true ;
43460: LD_ADDR_VAR 0 3
43464: PUSH
43465: LD_INT 1
43467: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43468: LD_VAR 0 2
43472: PUSH
43473: LD_INT 24
43475: DOUBLE
43476: EQUAL
43477: IFTRUE 43487
43479: LD_INT 33
43481: DOUBLE
43482: EQUAL
43483: IFTRUE 43487
43485: GO 43512
43487: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43488: LD_ADDR_VAR 0 3
43492: PUSH
43493: LD_INT 32
43495: PPUSH
43496: LD_VAR 0 1
43500: PPUSH
43501: CALL_OW 321
43505: PUSH
43506: LD_INT 2
43508: EQUAL
43509: ST_TO_ADDR
43510: GO 43828
43512: LD_INT 20
43514: DOUBLE
43515: EQUAL
43516: IFTRUE 43520
43518: GO 43545
43520: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_INT 6
43528: PPUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 321
43538: PUSH
43539: LD_INT 2
43541: EQUAL
43542: ST_TO_ADDR
43543: GO 43828
43545: LD_INT 22
43547: DOUBLE
43548: EQUAL
43549: IFTRUE 43559
43551: LD_INT 36
43553: DOUBLE
43554: EQUAL
43555: IFTRUE 43559
43557: GO 43584
43559: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43560: LD_ADDR_VAR 0 3
43564: PUSH
43565: LD_INT 15
43567: PPUSH
43568: LD_VAR 0 1
43572: PPUSH
43573: CALL_OW 321
43577: PUSH
43578: LD_INT 2
43580: EQUAL
43581: ST_TO_ADDR
43582: GO 43828
43584: LD_INT 30
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43617
43592: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 20
43600: PPUSH
43601: LD_VAR 0 1
43605: PPUSH
43606: CALL_OW 321
43610: PUSH
43611: LD_INT 2
43613: EQUAL
43614: ST_TO_ADDR
43615: GO 43828
43617: LD_INT 28
43619: DOUBLE
43620: EQUAL
43621: IFTRUE 43631
43623: LD_INT 21
43625: DOUBLE
43626: EQUAL
43627: IFTRUE 43631
43629: GO 43656
43631: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43632: LD_ADDR_VAR 0 3
43636: PUSH
43637: LD_INT 21
43639: PPUSH
43640: LD_VAR 0 1
43644: PPUSH
43645: CALL_OW 321
43649: PUSH
43650: LD_INT 2
43652: EQUAL
43653: ST_TO_ADDR
43654: GO 43828
43656: LD_INT 16
43658: DOUBLE
43659: EQUAL
43660: IFTRUE 43664
43662: GO 43689
43664: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43665: LD_ADDR_VAR 0 3
43669: PUSH
43670: LD_INT 84
43672: PPUSH
43673: LD_VAR 0 1
43677: PPUSH
43678: CALL_OW 321
43682: PUSH
43683: LD_INT 2
43685: EQUAL
43686: ST_TO_ADDR
43687: GO 43828
43689: LD_INT 19
43691: DOUBLE
43692: EQUAL
43693: IFTRUE 43703
43695: LD_INT 23
43697: DOUBLE
43698: EQUAL
43699: IFTRUE 43703
43701: GO 43728
43703: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_INT 83
43711: PPUSH
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 321
43721: PUSH
43722: LD_INT 2
43724: EQUAL
43725: ST_TO_ADDR
43726: GO 43828
43728: LD_INT 17
43730: DOUBLE
43731: EQUAL
43732: IFTRUE 43736
43734: GO 43761
43736: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43737: LD_ADDR_VAR 0 3
43741: PUSH
43742: LD_INT 39
43744: PPUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: CALL_OW 321
43754: PUSH
43755: LD_INT 2
43757: EQUAL
43758: ST_TO_ADDR
43759: GO 43828
43761: LD_INT 18
43763: DOUBLE
43764: EQUAL
43765: IFTRUE 43769
43767: GO 43794
43769: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_INT 40
43777: PPUSH
43778: LD_VAR 0 1
43782: PPUSH
43783: CALL_OW 321
43787: PUSH
43788: LD_INT 2
43790: EQUAL
43791: ST_TO_ADDR
43792: GO 43828
43794: LD_INT 27
43796: DOUBLE
43797: EQUAL
43798: IFTRUE 43802
43800: GO 43827
43802: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43803: LD_ADDR_VAR 0 3
43807: PUSH
43808: LD_INT 35
43810: PPUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 321
43820: PUSH
43821: LD_INT 2
43823: EQUAL
43824: ST_TO_ADDR
43825: GO 43828
43827: POP
// end ;
43828: LD_VAR 0 3
43832: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43833: LD_INT 0
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
// result := false ;
43846: LD_ADDR_VAR 0 6
43850: PUSH
43851: LD_INT 0
43853: ST_TO_ADDR
// if btype = b_depot then
43854: LD_VAR 0 2
43858: PUSH
43859: LD_INT 0
43861: EQUAL
43862: IFFALSE 43874
// begin result := true ;
43864: LD_ADDR_VAR 0 6
43868: PUSH
43869: LD_INT 1
43871: ST_TO_ADDR
// exit ;
43872: GO 44728
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43874: LD_VAR 0 1
43878: NOT
43879: IFTRUE 43904
43881: PUSH
43882: LD_VAR 0 1
43886: PPUSH
43887: CALL_OW 266
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: IN
43902: NOT
43903: OR
43904: IFTRUE 43913
43906: PUSH
43907: LD_VAR 0 2
43911: NOT
43912: OR
43913: IFTRUE 43949
43915: PUSH
43916: LD_VAR 0 5
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: LD_INT 4
43935: PUSH
43936: LD_INT 5
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: IN
43947: NOT
43948: OR
43949: IFTRUE 43968
43951: PUSH
43952: LD_VAR 0 3
43956: PPUSH
43957: LD_VAR 0 4
43961: PPUSH
43962: CALL_OW 488
43966: NOT
43967: OR
43968: IFFALSE 43972
// exit ;
43970: GO 44728
// side := GetSide ( depot ) ;
43972: LD_ADDR_VAR 0 9
43976: PUSH
43977: LD_VAR 0 1
43981: PPUSH
43982: CALL_OW 255
43986: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43987: LD_VAR 0 9
43991: PPUSH
43992: LD_VAR 0 2
43996: PPUSH
43997: CALL 43457 0 2
44001: NOT
44002: IFFALSE 44006
// exit ;
44004: GO 44728
// pom := GetBase ( depot ) ;
44006: LD_ADDR_VAR 0 10
44010: PUSH
44011: LD_VAR 0 1
44015: PPUSH
44016: CALL_OW 274
44020: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44021: LD_ADDR_VAR 0 11
44025: PUSH
44026: LD_VAR 0 2
44030: PPUSH
44031: LD_VAR 0 1
44035: PPUSH
44036: CALL_OW 248
44040: PPUSH
44041: CALL_OW 450
44045: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44046: LD_VAR 0 10
44050: PPUSH
44051: LD_INT 1
44053: PPUSH
44054: CALL_OW 275
44058: PUSH
44059: LD_VAR 0 11
44063: PUSH
44064: LD_INT 1
44066: ARRAY
44067: GREATEREQUAL
44068: IFFALSE 44094
44070: PUSH
44071: LD_VAR 0 10
44075: PPUSH
44076: LD_INT 2
44078: PPUSH
44079: CALL_OW 275
44083: PUSH
44084: LD_VAR 0 11
44088: PUSH
44089: LD_INT 2
44091: ARRAY
44092: GREATEREQUAL
44093: AND
44094: IFFALSE 44120
44096: PUSH
44097: LD_VAR 0 10
44101: PPUSH
44102: LD_INT 3
44104: PPUSH
44105: CALL_OW 275
44109: PUSH
44110: LD_VAR 0 11
44114: PUSH
44115: LD_INT 3
44117: ARRAY
44118: GREATEREQUAL
44119: AND
44120: NOT
44121: IFFALSE 44125
// exit ;
44123: GO 44728
// if GetBType ( depot ) = b_depot then
44125: LD_VAR 0 1
44129: PPUSH
44130: CALL_OW 266
44134: PUSH
44135: LD_INT 0
44137: EQUAL
44138: IFFALSE 44150
// dist := 28 else
44140: LD_ADDR_VAR 0 14
44144: PUSH
44145: LD_INT 28
44147: ST_TO_ADDR
44148: GO 44158
// dist := 36 ;
44150: LD_ADDR_VAR 0 14
44154: PUSH
44155: LD_INT 36
44157: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44158: LD_VAR 0 1
44162: PPUSH
44163: LD_VAR 0 3
44167: PPUSH
44168: LD_VAR 0 4
44172: PPUSH
44173: CALL_OW 297
44177: PUSH
44178: LD_VAR 0 14
44182: GREATER
44183: IFFALSE 44187
// exit ;
44185: GO 44728
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44187: LD_ADDR_VAR 0 12
44191: PUSH
44192: LD_VAR 0 2
44196: PPUSH
44197: LD_VAR 0 3
44201: PPUSH
44202: LD_VAR 0 4
44206: PPUSH
44207: LD_VAR 0 5
44211: PPUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 248
44221: PPUSH
44222: LD_INT 0
44224: PPUSH
44225: CALL 44733 0 6
44229: ST_TO_ADDR
// if not hexes then
44230: LD_VAR 0 12
44234: NOT
44235: IFFALSE 44239
// exit ;
44237: GO 44728
// hex := GetHexInfo ( x , y ) ;
44239: LD_ADDR_VAR 0 15
44243: PUSH
44244: LD_VAR 0 3
44248: PPUSH
44249: LD_VAR 0 4
44253: PPUSH
44254: CALL_OW 546
44258: ST_TO_ADDR
// if hex [ 1 ] then
44259: LD_VAR 0 15
44263: PUSH
44264: LD_INT 1
44266: ARRAY
44267: IFFALSE 44271
// exit ;
44269: GO 44728
// height := hex [ 2 ] ;
44271: LD_ADDR_VAR 0 13
44275: PUSH
44276: LD_VAR 0 15
44280: PUSH
44281: LD_INT 2
44283: ARRAY
44284: ST_TO_ADDR
// for i = 1 to hexes do
44285: LD_ADDR_VAR 0 7
44289: PUSH
44290: DOUBLE
44291: LD_INT 1
44293: DEC
44294: ST_TO_ADDR
44295: LD_VAR 0 12
44299: PUSH
44300: FOR_TO
44301: IFFALSE 44645
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44303: LD_VAR 0 12
44307: PUSH
44308: LD_VAR 0 7
44312: ARRAY
44313: PUSH
44314: LD_INT 1
44316: ARRAY
44317: PPUSH
44318: LD_VAR 0 12
44322: PUSH
44323: LD_VAR 0 7
44327: ARRAY
44328: PUSH
44329: LD_INT 2
44331: ARRAY
44332: PPUSH
44333: CALL_OW 488
44337: NOT
44338: IFTRUE 44380
44340: PUSH
44341: LD_VAR 0 12
44345: PUSH
44346: LD_VAR 0 7
44350: ARRAY
44351: PUSH
44352: LD_INT 1
44354: ARRAY
44355: PPUSH
44356: LD_VAR 0 12
44360: PUSH
44361: LD_VAR 0 7
44365: ARRAY
44366: PUSH
44367: LD_INT 2
44369: ARRAY
44370: PPUSH
44371: CALL_OW 428
44375: PUSH
44376: LD_INT 0
44378: GREATER
44379: OR
44380: IFTRUE 44418
44382: PUSH
44383: LD_VAR 0 12
44387: PUSH
44388: LD_VAR 0 7
44392: ARRAY
44393: PUSH
44394: LD_INT 1
44396: ARRAY
44397: PPUSH
44398: LD_VAR 0 12
44402: PUSH
44403: LD_VAR 0 7
44407: ARRAY
44408: PUSH
44409: LD_INT 2
44411: ARRAY
44412: PPUSH
44413: CALL_OW 351
44417: OR
44418: IFFALSE 44424
// exit ;
44420: POP
44421: POP
44422: GO 44728
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44424: LD_ADDR_VAR 0 8
44428: PUSH
44429: LD_VAR 0 12
44433: PUSH
44434: LD_VAR 0 7
44438: ARRAY
44439: PUSH
44440: LD_INT 1
44442: ARRAY
44443: PPUSH
44444: LD_VAR 0 12
44448: PUSH
44449: LD_VAR 0 7
44453: ARRAY
44454: PUSH
44455: LD_INT 2
44457: ARRAY
44458: PPUSH
44459: CALL_OW 546
44463: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44464: LD_VAR 0 8
44468: PUSH
44469: LD_INT 1
44471: ARRAY
44472: IFTRUE 44494
44474: PUSH
44475: LD_VAR 0 8
44479: PUSH
44480: LD_INT 2
44482: ARRAY
44483: PUSH
44484: LD_VAR 0 13
44488: PUSH
44489: LD_INT 2
44491: PLUS
44492: GREATER
44493: OR
44494: IFTRUE 44516
44496: PUSH
44497: LD_VAR 0 8
44501: PUSH
44502: LD_INT 2
44504: ARRAY
44505: PUSH
44506: LD_VAR 0 13
44510: PUSH
44511: LD_INT 2
44513: MINUS
44514: LESS
44515: OR
44516: IFTRUE 44584
44518: PUSH
44519: LD_VAR 0 8
44523: PUSH
44524: LD_INT 3
44526: ARRAY
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 8
44533: PUSH
44534: LD_INT 9
44536: PUSH
44537: LD_INT 10
44539: PUSH
44540: LD_INT 11
44542: PUSH
44543: LD_INT 12
44545: PUSH
44546: LD_INT 13
44548: PUSH
44549: LD_INT 16
44551: PUSH
44552: LD_INT 17
44554: PUSH
44555: LD_INT 18
44557: PUSH
44558: LD_INT 19
44560: PUSH
44561: LD_INT 20
44563: PUSH
44564: LD_INT 21
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: IN
44582: NOT
44583: OR
44584: IFTRUE 44597
44586: PUSH
44587: LD_VAR 0 8
44591: PUSH
44592: LD_INT 5
44594: ARRAY
44595: NOT
44596: OR
44597: IFTRUE 44637
44599: PUSH
44600: LD_VAR 0 8
44604: PUSH
44605: LD_INT 6
44607: ARRAY
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 7
44617: PUSH
44618: LD_INT 9
44620: PUSH
44621: LD_INT 10
44623: PUSH
44624: LD_INT 11
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: IN
44635: NOT
44636: OR
44637: IFFALSE 44643
// exit ;
44639: POP
44640: POP
44641: GO 44728
// end ;
44643: GO 44300
44645: POP
44646: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44647: LD_VAR 0 9
44651: PPUSH
44652: LD_VAR 0 3
44656: PPUSH
44657: LD_VAR 0 4
44661: PPUSH
44662: LD_INT 20
44664: PPUSH
44665: CALL 36547 0 4
44669: PUSH
44670: LD_INT 4
44672: ARRAY
44673: IFFALSE 44677
// exit ;
44675: GO 44728
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44677: LD_VAR 0 2
44681: PUSH
44682: LD_INT 29
44684: PUSH
44685: LD_INT 30
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: IN
44692: IFFALSE 44716
44694: PUSH
44695: LD_VAR 0 3
44699: PPUSH
44700: LD_VAR 0 4
44704: PPUSH
44705: LD_VAR 0 9
44709: PPUSH
44710: CALL_OW 440
44714: NOT
44715: AND
44716: IFFALSE 44720
// exit ;
44718: GO 44728
// result := true ;
44720: LD_ADDR_VAR 0 6
44724: PUSH
44725: LD_INT 1
44727: ST_TO_ADDR
// end ;
44728: LD_VAR 0 6
44732: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44733: LD_INT 0
44735: PPUSH
44736: PPUSH
44737: PPUSH
44738: PPUSH
44739: PPUSH
44740: PPUSH
44741: PPUSH
44742: PPUSH
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
44749: PPUSH
44750: PPUSH
44751: PPUSH
44752: PPUSH
44753: PPUSH
44754: PPUSH
44755: PPUSH
44756: PPUSH
44757: PPUSH
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
44768: PPUSH
44769: PPUSH
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
// result = [ ] ;
44793: LD_ADDR_VAR 0 7
44797: PUSH
44798: EMPTY
44799: ST_TO_ADDR
// temp_list = [ ] ;
44800: LD_ADDR_VAR 0 9
44804: PUSH
44805: EMPTY
44806: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44807: LD_VAR 0 4
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: LD_INT 4
44826: PUSH
44827: LD_INT 5
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: IN
44838: NOT
44839: IFTRUE 44882
44841: PUSH
44842: LD_VAR 0 1
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: IN
44857: IFFALSE 44881
44859: PUSH
44860: LD_VAR 0 5
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: LIST
44878: IN
44879: NOT
44880: AND
44881: OR
44882: IFFALSE 44886
// exit ;
44884: GO 63285
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44886: LD_VAR 0 1
44890: PUSH
44891: LD_INT 6
44893: PUSH
44894: LD_INT 7
44896: PUSH
44897: LD_INT 8
44899: PUSH
44900: LD_INT 13
44902: PUSH
44903: LD_INT 12
44905: PUSH
44906: LD_INT 15
44908: PUSH
44909: LD_INT 11
44911: PUSH
44912: LD_INT 14
44914: PUSH
44915: LD_INT 10
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: IN
44929: IFFALSE 44939
// btype = b_lab ;
44931: LD_ADDR_VAR 0 1
44935: PUSH
44936: LD_INT 6
44938: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44939: LD_VAR 0 6
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: IN
44958: NOT
44959: IFTRUE 45027
44961: PUSH
44962: LD_VAR 0 1
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: LD_INT 6
44981: PUSH
44982: LD_INT 36
44984: PUSH
44985: LD_INT 4
44987: PUSH
44988: LD_INT 5
44990: PUSH
44991: LD_INT 31
44993: PUSH
44994: LD_INT 32
44996: PUSH
44997: LD_INT 33
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: IN
45013: NOT
45014: IFFALSE 45026
45016: PUSH
45017: LD_VAR 0 6
45021: PUSH
45022: LD_INT 1
45024: EQUAL
45025: AND
45026: OR
45027: IFTRUE 45059
45029: PUSH
45030: LD_VAR 0 1
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: LD_INT 3
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: IN
45045: NOT
45046: IFFALSE 45058
45048: PUSH
45049: LD_VAR 0 6
45053: PUSH
45054: LD_INT 2
45056: EQUAL
45057: AND
45058: OR
45059: IFFALSE 45069
// mode = 0 ;
45061: LD_ADDR_VAR 0 6
45065: PUSH
45066: LD_INT 0
45068: ST_TO_ADDR
// case mode of 0 :
45069: LD_VAR 0 6
45073: PUSH
45074: LD_INT 0
45076: DOUBLE
45077: EQUAL
45078: IFTRUE 45082
45080: GO 56535
45082: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45083: LD_ADDR_VAR 0 11
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 3
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45276: LD_ADDR_VAR 0 12
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 3
45433: NEG
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45472: LD_ADDR_VAR 0 13
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 3
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 3
45643: NEG
45644: PUSH
45645: LD_INT 3
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45671: LD_ADDR_VAR 0 14
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 3
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 3
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45867: LD_ADDR_VAR 0 15
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46060: LD_ADDR_VAR 0 16
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: LD_INT 3
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46253: LD_ADDR_VAR 0 17
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: NEG
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46483: LD_ADDR_VAR 0 18
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46713: LD_ADDR_VAR 0 19
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46943: LD_ADDR_VAR 0 20
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47173: LD_ADDR_VAR 0 21
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47403: LD_ADDR_VAR 0 22
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47633: LD_ADDR_VAR 0 23
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: LD_INT 3
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47913: LD_ADDR_VAR 0 24
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 3
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48189: LD_ADDR_VAR 0 25
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48463: LD_ADDR_VAR 0 26
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 3
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48739: LD_ADDR_VAR 0 27
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 3
48972: NEG
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 3
48984: NEG
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49019: LD_ADDR_VAR 0 28
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 3
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49301: LD_ADDR_VAR 0 29
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49580: LD_ADDR_VAR 0 30
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 3
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 3
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49858: LD_ADDR_VAR 0 31
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 3
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 3
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50136: LD_ADDR_VAR 0 32
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 3
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50414: LD_ADDR_VAR 0 33
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 3
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50693: LD_ADDR_VAR 0 34
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50973: LD_ADDR_VAR 0 35
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51085: LD_ADDR_VAR 0 36
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51197: LD_ADDR_VAR 0 37
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51309: LD_ADDR_VAR 0 38
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51421: LD_ADDR_VAR 0 39
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51533: LD_ADDR_VAR 0 40
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51645: LD_ADDR_VAR 0 41
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: LD_INT 3
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 3
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: NEG
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51995: LD_ADDR_VAR 0 42
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 3
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52345: LD_ADDR_VAR 0 43
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 3
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 3
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 3
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 3
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52693: LD_ADDR_VAR 0 44
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 3
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 3
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 3
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53043: LD_ADDR_VAR 0 45
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: NEG
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: LD_INT 3
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53393: LD_ADDR_VAR 0 46
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: NEG
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53741: LD_ADDR_VAR 0 47
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53892: LD_ADDR_VAR 0 48
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54039: LD_ADDR_VAR 0 49
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54183: LD_ADDR_VAR 0 50
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54327: LD_ADDR_VAR 0 51
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54474: LD_ADDR_VAR 0 52
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54625: LD_ADDR_VAR 0 53
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54855: LD_ADDR_VAR 0 54
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55085: LD_ADDR_VAR 0 55
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55315: LD_ADDR_VAR 0 56
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55545: LD_ADDR_VAR 0 57
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55775: LD_ADDR_VAR 0 58
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56005: LD_ADDR_VAR 0 59
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56093: LD_ADDR_VAR 0 60
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56181: LD_ADDR_VAR 0 61
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56269: LD_ADDR_VAR 0 62
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56357: LD_ADDR_VAR 0 63
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56445: LD_ADDR_VAR 0 64
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// end ; 1 :
56533: GO 62430
56535: LD_INT 1
56537: DOUBLE
56538: EQUAL
56539: IFTRUE 56543
56541: GO 59166
56543: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56544: LD_ADDR_VAR 0 11
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 3
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56588: LD_ADDR_VAR 0 12
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56629: LD_ADDR_VAR 0 13
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: LD_INT 3
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: LIST
56668: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56669: LD_ADDR_VAR 0 14
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56710: LD_ADDR_VAR 0 15
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 3
56728: NEG
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56754: LD_ADDR_VAR 0 16
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 3
56773: NEG
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56800: LD_ADDR_VAR 0 17
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 3
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56844: LD_ADDR_VAR 0 18
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: LIST
56884: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56885: LD_ADDR_VAR 0 19
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56925: LD_ADDR_VAR 0 20
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: LIST
56965: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56966: LD_ADDR_VAR 0 21
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: NEG
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57010: LD_ADDR_VAR 0 22
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: LD_INT 3
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: LIST
57055: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57056: LD_ADDR_VAR 0 23
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: LD_INT 4
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: LIST
57099: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57100: LD_ADDR_VAR 0 24
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 4
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57141: LD_ADDR_VAR 0 25
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 4
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 3
57168: PUSH
57169: LD_INT 4
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57181: LD_ADDR_VAR 0 26
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 3
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 4
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57222: LD_ADDR_VAR 0 27
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 4
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: LIST
57265: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57266: LD_ADDR_VAR 0 28
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 4
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 4
57297: NEG
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57312: LD_ADDR_VAR 0 29
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 3
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 4
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 4
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 3
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 5
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 5
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 4
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 6
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 6
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: LD_INT 5
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57467: LD_ADDR_VAR 0 30
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 4
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 4
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 5
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 5
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 5
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 6
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 6
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57610: LD_ADDR_VAR 0 31
57614: PUSH
57615: LD_INT 3
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 4
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 4
57657: PUSH
57658: LD_INT 4
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: PUSH
57668: LD_INT 4
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 5
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 5
57687: PUSH
57688: LD_INT 5
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: LD_INT 5
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 6
57707: PUSH
57708: LD_INT 5
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 6
57717: PUSH
57718: LD_INT 6
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 5
57727: PUSH
57728: LD_INT 6
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57749: LD_ADDR_VAR 0 32
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 4
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: LD_INT 4
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: LD_INT 5
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 5
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 4
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 6
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 6
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 5
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57892: LD_ADDR_VAR 0 33
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 4
57944: NEG
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 4
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 4
57967: NEG
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 5
57978: NEG
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 5
57989: NEG
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 5
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 6
58012: NEG
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 6
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58047: LD_ADDR_VAR 0 34
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: LD_INT 4
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 4
58102: NEG
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 4
58114: NEG
58115: PUSH
58116: LD_INT 4
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 4
58126: NEG
58127: PUSH
58128: LD_INT 5
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 5
58138: NEG
58139: PUSH
58140: LD_INT 4
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 5
58150: NEG
58151: PUSH
58152: LD_INT 5
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 5
58162: NEG
58163: PUSH
58164: LD_INT 6
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 6
58174: NEG
58175: PUSH
58176: LD_INT 5
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 6
58186: NEG
58187: PUSH
58188: LD_INT 6
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58210: LD_ADDR_VAR 0 41
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58254: LD_ADDR_VAR 0 42
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 3
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58295: LD_ADDR_VAR 0 43
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58335: LD_ADDR_VAR 0 44
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58376: LD_ADDR_VAR 0 45
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58420: LD_ADDR_VAR 0 46
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: NEG
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58466: LD_ADDR_VAR 0 47
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58499: LD_ADDR_VAR 0 48
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58530: LD_ADDR_VAR 0 49
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 3
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58559: LD_ADDR_VAR 0 50
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58588: LD_ADDR_VAR 0 51
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58619: LD_ADDR_VAR 0 52
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58652: LD_ADDR_VAR 0 53
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58696: LD_ADDR_VAR 0 54
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: LIST
58736: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58737: LD_ADDR_VAR 0 55
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: LD_INT 3
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 3
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58777: LD_ADDR_VAR 0 56
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58818: LD_ADDR_VAR 0 57
58822: PUSH
58823: LD_INT 2
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: LIST
58861: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58862: LD_ADDR_VAR 0 58
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 3
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58908: LD_ADDR_VAR 0 59
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58952: LD_ADDR_VAR 0 60
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: LIST
58992: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58993: LD_ADDR_VAR 0 61
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: LIST
59032: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59033: LD_ADDR_VAR 0 62
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: LIST
59073: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59074: LD_ADDR_VAR 0 63
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59118: LD_ADDR_VAR 0 64
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: LD_INT 2
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: LIST
59163: ST_TO_ADDR
// end ; 2 :
59164: GO 62430
59166: LD_INT 2
59168: DOUBLE
59169: EQUAL
59170: IFTRUE 59174
59172: GO 62429
59174: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59175: LD_ADDR_VAR 0 29
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 4
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 5
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: LD_INT 4
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: LD_INT 4
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: LD_INT 4
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 4
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: LD_INT 5
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 5
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 4
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: LD_INT 5
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 3
59458: NEG
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 3
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 4
59514: NEG
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 4
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 4
59537: NEG
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 4
59560: NEG
59561: PUSH
59562: LD_INT 4
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 4
59572: NEG
59573: PUSH
59574: LD_INT 5
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: LD_INT 4
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: NEG
59609: PUSH
59610: LD_INT 3
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 5
59620: NEG
59621: PUSH
59622: LD_INT 4
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 5
59632: NEG
59633: PUSH
59634: LD_INT 5
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 5
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 5
59656: NEG
59657: PUSH
59658: LD_INT 3
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59713: LD_ADDR_VAR 0 30
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: LD_INT 4
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 5
59740: PUSH
59741: LD_INT 4
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 5
59750: PUSH
59751: LD_INT 5
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: LD_INT 5
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 4
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 3
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 5
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 5
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 4
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 4
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 4
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 4
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 4
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 3
59926: NEG
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 4
59948: NEG
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 5
59959: NEG
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 5
59970: NEG
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 5
59982: NEG
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: LD_INT 3
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: LD_INT 2
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 4
60065: NEG
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 4
60077: NEG
60078: PUSH
60079: LD_INT 4
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 4
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 4
60101: NEG
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 4
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 5
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 3
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 3
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 4
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 5
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: LD_INT 3
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: LD_INT 5
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60260: LD_ADDR_VAR 0 31
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 4
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 3
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 4
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 5
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 5
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 4
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 3
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: LD_INT 5
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 3
60360: NEG
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 3
60371: NEG
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 4
60416: NEG
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 4
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 4
60439: NEG
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 4
60462: NEG
60463: PUSH
60464: LD_INT 4
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 4
60474: NEG
60475: PUSH
60476: LD_INT 5
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 3
60486: NEG
60487: PUSH
60488: LD_INT 4
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 4
60510: NEG
60511: PUSH
60512: LD_INT 3
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 5
60522: NEG
60523: PUSH
60524: LD_INT 4
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 5
60534: NEG
60535: PUSH
60536: LD_INT 5
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 3
60546: NEG
60547: PUSH
60548: LD_INT 5
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 5
60558: NEG
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 3
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 4
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 4
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: LD_INT 4
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 4
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 4
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 5
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 5
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 4
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 3
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 5
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60810: LD_ADDR_VAR 0 32
60814: PUSH
60815: LD_INT 4
60817: NEG
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 4
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 3
60840: NEG
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 5
60873: NEG
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 5
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 5
60896: NEG
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 3
60919: NEG
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: LD_INT 4
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: NEG
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 4
60979: NEG
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 4
60991: NEG
60992: PUSH
60993: LD_INT 4
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: LD_INT 4
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 4
61015: NEG
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 4
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 5
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 4
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: LD_INT 3
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 3
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 4
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 5
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 3
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 5
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 4
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 4
61222: PUSH
61223: LD_INT 4
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 4
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 5
61242: PUSH
61243: LD_INT 4
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: PUSH
61253: LD_INT 5
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: LD_INT 5
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: LD_INT 4
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 5
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 3
61302: PUSH
61303: LD_INT 5
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61357: LD_ADDR_VAR 0 33
61361: PUSH
61362: LD_INT 4
61364: NEG
61365: PUSH
61366: LD_INT 4
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 4
61376: NEG
61377: PUSH
61378: LD_INT 5
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: NEG
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 3
61400: NEG
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 4
61412: NEG
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 5
61424: NEG
61425: PUSH
61426: LD_INT 4
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 5
61436: NEG
61437: PUSH
61438: LD_INT 5
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: LD_INT 5
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 5
61460: NEG
61461: PUSH
61462: LD_INT 3
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 4
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 3
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 4
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: LD_INT 4
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 4
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 5
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 5
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 4
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 3
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 5
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: LD_INT 3
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 4
61687: PUSH
61688: LD_INT 3
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 4
61697: PUSH
61698: LD_INT 4
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: LD_INT 4
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 4
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 4
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: LD_INT 4
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: LD_INT 3
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 4
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 5
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 5
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: LD_INT 4
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: LD_INT 3
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: LD_INT 5
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61895: LD_ADDR_VAR 0 34
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: LD_INT 4
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 5
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 4
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 3
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 3
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 4
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 5
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 2
61981: PUSH
61982: LD_INT 3
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 5
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 4
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 4
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 2
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 4
62087: PUSH
62088: LD_INT 2
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 4
62097: PUSH
62098: LD_INT 4
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 4
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 5
62117: PUSH
62118: LD_INT 4
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 5
62127: PUSH
62128: LD_INT 5
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: LD_INT 5
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: LD_INT 4
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: LD_INT 3
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: LD_INT 5
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 3
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 3
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: LD_INT 4
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 4
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 3
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: LD_INT 4
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 4
62280: NEG
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 4
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 4
62325: NEG
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 5
62336: NEG
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 5
62347: NEG
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 5
62359: NEG
62360: PUSH
62361: LD_INT 2
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: ST_TO_ADDR
// end ; end ;
62427: GO 62430
62429: POP
// case btype of b_depot , b_warehouse :
62430: LD_VAR 0 1
62434: PUSH
62435: LD_INT 0
62437: DOUBLE
62438: EQUAL
62439: IFTRUE 62449
62441: LD_INT 1
62443: DOUBLE
62444: EQUAL
62445: IFTRUE 62449
62447: GO 62650
62449: POP
// case nation of nation_american :
62450: LD_VAR 0 5
62454: PUSH
62455: LD_INT 1
62457: DOUBLE
62458: EQUAL
62459: IFTRUE 62463
62461: GO 62519
62463: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62464: LD_ADDR_VAR 0 9
62468: PUSH
62469: LD_VAR 0 11
62473: PUSH
62474: LD_VAR 0 12
62478: PUSH
62479: LD_VAR 0 13
62483: PUSH
62484: LD_VAR 0 14
62488: PUSH
62489: LD_VAR 0 15
62493: PUSH
62494: LD_VAR 0 16
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_VAR 0 4
62511: PUSH
62512: LD_INT 1
62514: PLUS
62515: ARRAY
62516: ST_TO_ADDR
62517: GO 62648
62519: LD_INT 2
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62527
62525: GO 62583
62527: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62528: LD_ADDR_VAR 0 9
62532: PUSH
62533: LD_VAR 0 17
62537: PUSH
62538: LD_VAR 0 18
62542: PUSH
62543: LD_VAR 0 19
62547: PUSH
62548: LD_VAR 0 20
62552: PUSH
62553: LD_VAR 0 21
62557: PUSH
62558: LD_VAR 0 22
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: PUSH
62571: LD_VAR 0 4
62575: PUSH
62576: LD_INT 1
62578: PLUS
62579: ARRAY
62580: ST_TO_ADDR
62581: GO 62648
62583: LD_INT 3
62585: DOUBLE
62586: EQUAL
62587: IFTRUE 62591
62589: GO 62647
62591: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62592: LD_ADDR_VAR 0 9
62596: PUSH
62597: LD_VAR 0 23
62601: PUSH
62602: LD_VAR 0 24
62606: PUSH
62607: LD_VAR 0 25
62611: PUSH
62612: LD_VAR 0 26
62616: PUSH
62617: LD_VAR 0 27
62621: PUSH
62622: LD_VAR 0 28
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: PUSH
62635: LD_VAR 0 4
62639: PUSH
62640: LD_INT 1
62642: PLUS
62643: ARRAY
62644: ST_TO_ADDR
62645: GO 62648
62647: POP
62648: GO 63203
62650: LD_INT 2
62652: DOUBLE
62653: EQUAL
62654: IFTRUE 62664
62656: LD_INT 3
62658: DOUBLE
62659: EQUAL
62660: IFTRUE 62664
62662: GO 62720
62664: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62665: LD_ADDR_VAR 0 9
62669: PUSH
62670: LD_VAR 0 29
62674: PUSH
62675: LD_VAR 0 30
62679: PUSH
62680: LD_VAR 0 31
62684: PUSH
62685: LD_VAR 0 32
62689: PUSH
62690: LD_VAR 0 33
62694: PUSH
62695: LD_VAR 0 34
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: PUSH
62708: LD_VAR 0 4
62712: PUSH
62713: LD_INT 1
62715: PLUS
62716: ARRAY
62717: ST_TO_ADDR
62718: GO 63203
62720: LD_INT 16
62722: DOUBLE
62723: EQUAL
62724: IFTRUE 62782
62726: LD_INT 17
62728: DOUBLE
62729: EQUAL
62730: IFTRUE 62782
62732: LD_INT 18
62734: DOUBLE
62735: EQUAL
62736: IFTRUE 62782
62738: LD_INT 19
62740: DOUBLE
62741: EQUAL
62742: IFTRUE 62782
62744: LD_INT 22
62746: DOUBLE
62747: EQUAL
62748: IFTRUE 62782
62750: LD_INT 20
62752: DOUBLE
62753: EQUAL
62754: IFTRUE 62782
62756: LD_INT 21
62758: DOUBLE
62759: EQUAL
62760: IFTRUE 62782
62762: LD_INT 23
62764: DOUBLE
62765: EQUAL
62766: IFTRUE 62782
62768: LD_INT 24
62770: DOUBLE
62771: EQUAL
62772: IFTRUE 62782
62774: LD_INT 25
62776: DOUBLE
62777: EQUAL
62778: IFTRUE 62782
62780: GO 62838
62782: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62783: LD_ADDR_VAR 0 9
62787: PUSH
62788: LD_VAR 0 35
62792: PUSH
62793: LD_VAR 0 36
62797: PUSH
62798: LD_VAR 0 37
62802: PUSH
62803: LD_VAR 0 38
62807: PUSH
62808: LD_VAR 0 39
62812: PUSH
62813: LD_VAR 0 40
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: PUSH
62826: LD_VAR 0 4
62830: PUSH
62831: LD_INT 1
62833: PLUS
62834: ARRAY
62835: ST_TO_ADDR
62836: GO 63203
62838: LD_INT 6
62840: DOUBLE
62841: EQUAL
62842: IFTRUE 62894
62844: LD_INT 7
62846: DOUBLE
62847: EQUAL
62848: IFTRUE 62894
62850: LD_INT 8
62852: DOUBLE
62853: EQUAL
62854: IFTRUE 62894
62856: LD_INT 13
62858: DOUBLE
62859: EQUAL
62860: IFTRUE 62894
62862: LD_INT 12
62864: DOUBLE
62865: EQUAL
62866: IFTRUE 62894
62868: LD_INT 15
62870: DOUBLE
62871: EQUAL
62872: IFTRUE 62894
62874: LD_INT 11
62876: DOUBLE
62877: EQUAL
62878: IFTRUE 62894
62880: LD_INT 14
62882: DOUBLE
62883: EQUAL
62884: IFTRUE 62894
62886: LD_INT 10
62888: DOUBLE
62889: EQUAL
62890: IFTRUE 62894
62892: GO 62950
62894: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62895: LD_ADDR_VAR 0 9
62899: PUSH
62900: LD_VAR 0 41
62904: PUSH
62905: LD_VAR 0 42
62909: PUSH
62910: LD_VAR 0 43
62914: PUSH
62915: LD_VAR 0 44
62919: PUSH
62920: LD_VAR 0 45
62924: PUSH
62925: LD_VAR 0 46
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: PUSH
62938: LD_VAR 0 4
62942: PUSH
62943: LD_INT 1
62945: PLUS
62946: ARRAY
62947: ST_TO_ADDR
62948: GO 63203
62950: LD_INT 36
62952: DOUBLE
62953: EQUAL
62954: IFTRUE 62958
62956: GO 63014
62958: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62959: LD_ADDR_VAR 0 9
62963: PUSH
62964: LD_VAR 0 47
62968: PUSH
62969: LD_VAR 0 48
62973: PUSH
62974: LD_VAR 0 49
62978: PUSH
62979: LD_VAR 0 50
62983: PUSH
62984: LD_VAR 0 51
62988: PUSH
62989: LD_VAR 0 52
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: PUSH
63002: LD_VAR 0 4
63006: PUSH
63007: LD_INT 1
63009: PLUS
63010: ARRAY
63011: ST_TO_ADDR
63012: GO 63203
63014: LD_INT 4
63016: DOUBLE
63017: EQUAL
63018: IFTRUE 63040
63020: LD_INT 5
63022: DOUBLE
63023: EQUAL
63024: IFTRUE 63040
63026: LD_INT 34
63028: DOUBLE
63029: EQUAL
63030: IFTRUE 63040
63032: LD_INT 37
63034: DOUBLE
63035: EQUAL
63036: IFTRUE 63040
63038: GO 63096
63040: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63041: LD_ADDR_VAR 0 9
63045: PUSH
63046: LD_VAR 0 53
63050: PUSH
63051: LD_VAR 0 54
63055: PUSH
63056: LD_VAR 0 55
63060: PUSH
63061: LD_VAR 0 56
63065: PUSH
63066: LD_VAR 0 57
63070: PUSH
63071: LD_VAR 0 58
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: PUSH
63084: LD_VAR 0 4
63088: PUSH
63089: LD_INT 1
63091: PLUS
63092: ARRAY
63093: ST_TO_ADDR
63094: GO 63203
63096: LD_INT 31
63098: DOUBLE
63099: EQUAL
63100: IFTRUE 63146
63102: LD_INT 32
63104: DOUBLE
63105: EQUAL
63106: IFTRUE 63146
63108: LD_INT 33
63110: DOUBLE
63111: EQUAL
63112: IFTRUE 63146
63114: LD_INT 27
63116: DOUBLE
63117: EQUAL
63118: IFTRUE 63146
63120: LD_INT 26
63122: DOUBLE
63123: EQUAL
63124: IFTRUE 63146
63126: LD_INT 28
63128: DOUBLE
63129: EQUAL
63130: IFTRUE 63146
63132: LD_INT 29
63134: DOUBLE
63135: EQUAL
63136: IFTRUE 63146
63138: LD_INT 30
63140: DOUBLE
63141: EQUAL
63142: IFTRUE 63146
63144: GO 63202
63146: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63147: LD_ADDR_VAR 0 9
63151: PUSH
63152: LD_VAR 0 59
63156: PUSH
63157: LD_VAR 0 60
63161: PUSH
63162: LD_VAR 0 61
63166: PUSH
63167: LD_VAR 0 62
63171: PUSH
63172: LD_VAR 0 63
63176: PUSH
63177: LD_VAR 0 64
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: PUSH
63190: LD_VAR 0 4
63194: PUSH
63195: LD_INT 1
63197: PLUS
63198: ARRAY
63199: ST_TO_ADDR
63200: GO 63203
63202: POP
// temp_list2 = [ ] ;
63203: LD_ADDR_VAR 0 10
63207: PUSH
63208: EMPTY
63209: ST_TO_ADDR
// for i in temp_list do
63210: LD_ADDR_VAR 0 8
63214: PUSH
63215: LD_VAR 0 9
63219: PUSH
63220: FOR_IN
63221: IFFALSE 63273
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63223: LD_ADDR_VAR 0 10
63227: PUSH
63228: LD_VAR 0 10
63232: PUSH
63233: LD_VAR 0 8
63237: PUSH
63238: LD_INT 1
63240: ARRAY
63241: PUSH
63242: LD_VAR 0 2
63246: PLUS
63247: PUSH
63248: LD_VAR 0 8
63252: PUSH
63253: LD_INT 2
63255: ARRAY
63256: PUSH
63257: LD_VAR 0 3
63261: PLUS
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: ADD
63270: ST_TO_ADDR
63271: GO 63220
63273: POP
63274: POP
// result = temp_list2 ;
63275: LD_ADDR_VAR 0 7
63279: PUSH
63280: LD_VAR 0 10
63284: ST_TO_ADDR
// end ;
63285: LD_VAR 0 7
63289: RET
// export function EnemyInRange ( unit , dist ) ; begin
63290: LD_INT 0
63292: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63293: LD_ADDR_VAR 0 3
63297: PUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: CALL_OW 255
63307: PPUSH
63308: LD_VAR 0 1
63312: PPUSH
63313: CALL_OW 250
63317: PPUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: CALL_OW 251
63327: PPUSH
63328: LD_VAR 0 2
63332: PPUSH
63333: CALL 36547 0 4
63337: PUSH
63338: LD_INT 4
63340: ARRAY
63341: ST_TO_ADDR
// end ;
63342: LD_VAR 0 3
63346: RET
// export function PlayerSeeMe ( unit ) ; begin
63347: LD_INT 0
63349: PPUSH
// result := See ( your_side , unit ) ;
63350: LD_ADDR_VAR 0 2
63354: PUSH
63355: LD_OWVAR 2
63359: PPUSH
63360: LD_VAR 0 1
63364: PPUSH
63365: CALL_OW 292
63369: ST_TO_ADDR
// end ;
63370: LD_VAR 0 2
63374: RET
// export function ReverseDir ( unit ) ; begin
63375: LD_INT 0
63377: PPUSH
// if not unit then
63378: LD_VAR 0 1
63382: NOT
63383: IFFALSE 63387
// exit ;
63385: GO 63410
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63387: LD_ADDR_VAR 0 2
63391: PUSH
63392: LD_VAR 0 1
63396: PPUSH
63397: CALL_OW 254
63401: PUSH
63402: LD_INT 3
63404: PLUS
63405: PUSH
63406: LD_INT 6
63408: MOD
63409: ST_TO_ADDR
// end ;
63410: LD_VAR 0 2
63414: RET
// export function ReverseArray ( array ) ; var i ; begin
63415: LD_INT 0
63417: PPUSH
63418: PPUSH
// if not array then
63419: LD_VAR 0 1
63423: NOT
63424: IFFALSE 63428
// exit ;
63426: GO 63483
// result := [ ] ;
63428: LD_ADDR_VAR 0 2
63432: PUSH
63433: EMPTY
63434: ST_TO_ADDR
// for i := array downto 1 do
63435: LD_ADDR_VAR 0 3
63439: PUSH
63440: DOUBLE
63441: LD_VAR 0 1
63445: INC
63446: ST_TO_ADDR
63447: LD_INT 1
63449: PUSH
63450: FOR_DOWNTO
63451: IFFALSE 63481
// result := Join ( result , array [ i ] ) ;
63453: LD_ADDR_VAR 0 2
63457: PUSH
63458: LD_VAR 0 2
63462: PPUSH
63463: LD_VAR 0 1
63467: PUSH
63468: LD_VAR 0 3
63472: ARRAY
63473: PPUSH
63474: CALL 68335 0 2
63478: ST_TO_ADDR
63479: GO 63450
63481: POP
63482: POP
// end ;
63483: LD_VAR 0 2
63487: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63488: LD_INT 0
63490: PPUSH
63491: PPUSH
63492: PPUSH
63493: PPUSH
63494: PPUSH
63495: PPUSH
// if not unit or not hexes then
63496: LD_VAR 0 1
63500: NOT
63501: IFTRUE 63510
63503: PUSH
63504: LD_VAR 0 2
63508: NOT
63509: OR
63510: IFFALSE 63514
// exit ;
63512: GO 63637
// dist := 9999 ;
63514: LD_ADDR_VAR 0 5
63518: PUSH
63519: LD_INT 9999
63521: ST_TO_ADDR
// for i = 1 to hexes do
63522: LD_ADDR_VAR 0 4
63526: PUSH
63527: DOUBLE
63528: LD_INT 1
63530: DEC
63531: ST_TO_ADDR
63532: LD_VAR 0 2
63536: PUSH
63537: FOR_TO
63538: IFFALSE 63625
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63540: LD_ADDR_VAR 0 6
63544: PUSH
63545: LD_VAR 0 1
63549: PPUSH
63550: LD_VAR 0 2
63554: PUSH
63555: LD_VAR 0 4
63559: ARRAY
63560: PUSH
63561: LD_INT 1
63563: ARRAY
63564: PPUSH
63565: LD_VAR 0 2
63569: PUSH
63570: LD_VAR 0 4
63574: ARRAY
63575: PUSH
63576: LD_INT 2
63578: ARRAY
63579: PPUSH
63580: CALL_OW 297
63584: ST_TO_ADDR
// if tdist < dist then
63585: LD_VAR 0 6
63589: PUSH
63590: LD_VAR 0 5
63594: LESS
63595: IFFALSE 63623
// begin hex := hexes [ i ] ;
63597: LD_ADDR_VAR 0 8
63601: PUSH
63602: LD_VAR 0 2
63606: PUSH
63607: LD_VAR 0 4
63611: ARRAY
63612: ST_TO_ADDR
// dist := tdist ;
63613: LD_ADDR_VAR 0 5
63617: PUSH
63618: LD_VAR 0 6
63622: ST_TO_ADDR
// end ; end ;
63623: GO 63537
63625: POP
63626: POP
// result := hex ;
63627: LD_ADDR_VAR 0 3
63631: PUSH
63632: LD_VAR 0 8
63636: ST_TO_ADDR
// end ;
63637: LD_VAR 0 3
63641: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63642: LD_INT 0
63644: PPUSH
63645: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63646: LD_VAR 0 1
63650: NOT
63651: IFTRUE 63690
63653: PUSH
63654: LD_VAR 0 1
63658: PUSH
63659: LD_INT 21
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 23
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PPUSH
63683: CALL_OW 69
63687: IN
63688: NOT
63689: OR
63690: IFFALSE 63694
// exit ;
63692: GO 63741
// for i = 1 to 3 do
63694: LD_ADDR_VAR 0 3
63698: PUSH
63699: DOUBLE
63700: LD_INT 1
63702: DEC
63703: ST_TO_ADDR
63704: LD_INT 3
63706: PUSH
63707: FOR_TO
63708: IFFALSE 63739
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63710: LD_VAR 0 1
63714: PPUSH
63715: CALL_OW 250
63719: PPUSH
63720: LD_VAR 0 1
63724: PPUSH
63725: CALL_OW 251
63729: PPUSH
63730: LD_INT 1
63732: PPUSH
63733: CALL_OW 453
63737: GO 63707
63739: POP
63740: POP
// end ;
63741: LD_VAR 0 2
63745: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63746: LD_INT 0
63748: PPUSH
63749: PPUSH
63750: PPUSH
63751: PPUSH
63752: PPUSH
63753: PPUSH
// if not unit or not enemy_unit then
63754: LD_VAR 0 1
63758: NOT
63759: IFTRUE 63768
63761: PUSH
63762: LD_VAR 0 2
63766: NOT
63767: OR
63768: IFFALSE 63772
// exit ;
63770: GO 64253
// if GetLives ( i ) < 250 then
63772: LD_VAR 0 4
63776: PPUSH
63777: CALL_OW 256
63781: PUSH
63782: LD_INT 250
63784: LESS
63785: IFFALSE 63798
// begin ComAutodestruct ( i ) ;
63787: LD_VAR 0 4
63791: PPUSH
63792: CALL 63642 0 1
// exit ;
63796: GO 64253
// end ; x := GetX ( enemy_unit ) ;
63798: LD_ADDR_VAR 0 7
63802: PUSH
63803: LD_VAR 0 2
63807: PPUSH
63808: CALL_OW 250
63812: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63813: LD_ADDR_VAR 0 8
63817: PUSH
63818: LD_VAR 0 2
63822: PPUSH
63823: CALL_OW 251
63827: ST_TO_ADDR
// if not x or not y then
63828: LD_VAR 0 7
63832: NOT
63833: IFTRUE 63842
63835: PUSH
63836: LD_VAR 0 8
63840: NOT
63841: OR
63842: IFFALSE 63846
// exit ;
63844: GO 64253
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63846: LD_ADDR_VAR 0 6
63850: PUSH
63851: LD_VAR 0 7
63855: PPUSH
63856: LD_INT 0
63858: PPUSH
63859: LD_INT 4
63861: PPUSH
63862: CALL_OW 272
63866: PUSH
63867: LD_VAR 0 8
63871: PPUSH
63872: LD_INT 0
63874: PPUSH
63875: LD_INT 4
63877: PPUSH
63878: CALL_OW 273
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_VAR 0 7
63891: PPUSH
63892: LD_INT 1
63894: PPUSH
63895: LD_INT 4
63897: PPUSH
63898: CALL_OW 272
63902: PUSH
63903: LD_VAR 0 8
63907: PPUSH
63908: LD_INT 1
63910: PPUSH
63911: LD_INT 4
63913: PPUSH
63914: CALL_OW 273
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_VAR 0 7
63927: PPUSH
63928: LD_INT 2
63930: PPUSH
63931: LD_INT 4
63933: PPUSH
63934: CALL_OW 272
63938: PUSH
63939: LD_VAR 0 8
63943: PPUSH
63944: LD_INT 2
63946: PPUSH
63947: LD_INT 4
63949: PPUSH
63950: CALL_OW 273
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_VAR 0 7
63963: PPUSH
63964: LD_INT 3
63966: PPUSH
63967: LD_INT 4
63969: PPUSH
63970: CALL_OW 272
63974: PUSH
63975: LD_VAR 0 8
63979: PPUSH
63980: LD_INT 3
63982: PPUSH
63983: LD_INT 4
63985: PPUSH
63986: CALL_OW 273
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_VAR 0 7
63999: PPUSH
64000: LD_INT 4
64002: PPUSH
64003: LD_INT 4
64005: PPUSH
64006: CALL_OW 272
64010: PUSH
64011: LD_VAR 0 8
64015: PPUSH
64016: LD_INT 4
64018: PPUSH
64019: LD_INT 4
64021: PPUSH
64022: CALL_OW 273
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_VAR 0 7
64035: PPUSH
64036: LD_INT 5
64038: PPUSH
64039: LD_INT 4
64041: PPUSH
64042: CALL_OW 272
64046: PUSH
64047: LD_VAR 0 8
64051: PPUSH
64052: LD_INT 5
64054: PPUSH
64055: LD_INT 4
64057: PPUSH
64058: CALL_OW 273
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: ST_TO_ADDR
// for i = tmp downto 1 do
64075: LD_ADDR_VAR 0 4
64079: PUSH
64080: DOUBLE
64081: LD_VAR 0 6
64085: INC
64086: ST_TO_ADDR
64087: LD_INT 1
64089: PUSH
64090: FOR_DOWNTO
64091: IFFALSE 64194
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64093: LD_VAR 0 6
64097: PUSH
64098: LD_VAR 0 4
64102: ARRAY
64103: PUSH
64104: LD_INT 1
64106: ARRAY
64107: PPUSH
64108: LD_VAR 0 6
64112: PUSH
64113: LD_VAR 0 4
64117: ARRAY
64118: PUSH
64119: LD_INT 2
64121: ARRAY
64122: PPUSH
64123: CALL_OW 488
64127: NOT
64128: IFTRUE 64170
64130: PUSH
64131: LD_VAR 0 6
64135: PUSH
64136: LD_VAR 0 4
64140: ARRAY
64141: PUSH
64142: LD_INT 1
64144: ARRAY
64145: PPUSH
64146: LD_VAR 0 6
64150: PUSH
64151: LD_VAR 0 4
64155: ARRAY
64156: PUSH
64157: LD_INT 2
64159: ARRAY
64160: PPUSH
64161: CALL_OW 428
64165: PUSH
64166: LD_INT 0
64168: NONEQUAL
64169: OR
64170: IFFALSE 64192
// tmp := Delete ( tmp , i ) ;
64172: LD_ADDR_VAR 0 6
64176: PUSH
64177: LD_VAR 0 6
64181: PPUSH
64182: LD_VAR 0 4
64186: PPUSH
64187: CALL_OW 3
64191: ST_TO_ADDR
64192: GO 64090
64194: POP
64195: POP
// j := GetClosestHex ( unit , tmp ) ;
64196: LD_ADDR_VAR 0 5
64200: PUSH
64201: LD_VAR 0 1
64205: PPUSH
64206: LD_VAR 0 6
64210: PPUSH
64211: CALL 63488 0 2
64215: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64216: LD_VAR 0 1
64220: PPUSH
64221: LD_VAR 0 5
64225: PUSH
64226: LD_INT 1
64228: ARRAY
64229: PPUSH
64230: LD_VAR 0 5
64234: PUSH
64235: LD_INT 2
64237: ARRAY
64238: PPUSH
64239: CALL_OW 111
// result := j ;
64243: LD_ADDR_VAR 0 3
64247: PUSH
64248: LD_VAR 0 5
64252: ST_TO_ADDR
// end ;
64253: LD_VAR 0 3
64257: RET
// export function PrepareApemanSoldier ( ) ; begin
64258: LD_INT 0
64260: PPUSH
// uc_nation := 0 ;
64261: LD_ADDR_OWVAR 21
64265: PUSH
64266: LD_INT 0
64268: ST_TO_ADDR
// hc_sex := sex_male ;
64269: LD_ADDR_OWVAR 27
64273: PUSH
64274: LD_INT 1
64276: ST_TO_ADDR
// hc_name :=  ;
64277: LD_ADDR_OWVAR 26
64281: PUSH
64282: LD_STRING 
64284: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64285: LD_ADDR_OWVAR 28
64289: PUSH
64290: LD_INT 15
64292: ST_TO_ADDR
// hc_gallery :=  ;
64293: LD_ADDR_OWVAR 33
64297: PUSH
64298: LD_STRING 
64300: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64301: LD_ADDR_OWVAR 31
64305: PUSH
64306: LD_INT 0
64308: PPUSH
64309: LD_INT 3
64311: PPUSH
64312: CALL_OW 12
64316: PUSH
64317: LD_INT 0
64319: PPUSH
64320: LD_INT 3
64322: PPUSH
64323: CALL_OW 12
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64340: LD_ADDR_OWVAR 29
64344: PUSH
64345: LD_INT 10
64347: PUSH
64348: LD_INT 12
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// end ;
64355: LD_VAR 0 1
64359: RET
// export function PrepareApemanEngineer ( ) ; begin
64360: LD_INT 0
64362: PPUSH
// uc_nation := 0 ;
64363: LD_ADDR_OWVAR 21
64367: PUSH
64368: LD_INT 0
64370: ST_TO_ADDR
// hc_sex := sex_male ;
64371: LD_ADDR_OWVAR 27
64375: PUSH
64376: LD_INT 1
64378: ST_TO_ADDR
// hc_name :=  ;
64379: LD_ADDR_OWVAR 26
64383: PUSH
64384: LD_STRING 
64386: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64387: LD_ADDR_OWVAR 28
64391: PUSH
64392: LD_INT 16
64394: ST_TO_ADDR
// hc_gallery :=  ;
64395: LD_ADDR_OWVAR 33
64399: PUSH
64400: LD_STRING 
64402: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64403: LD_ADDR_OWVAR 31
64407: PUSH
64408: LD_INT 0
64410: PPUSH
64411: LD_INT 3
64413: PPUSH
64414: CALL_OW 12
64418: PUSH
64419: LD_INT 0
64421: PPUSH
64422: LD_INT 3
64424: PPUSH
64425: CALL_OW 12
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64442: LD_ADDR_OWVAR 29
64446: PUSH
64447: LD_INT 10
64449: PUSH
64450: LD_INT 12
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: ST_TO_ADDR
// end ;
64457: LD_VAR 0 1
64461: RET
// export function PrepareApeman ( agressivity ) ; begin
64462: LD_INT 0
64464: PPUSH
// uc_side := 0 ;
64465: LD_ADDR_OWVAR 20
64469: PUSH
64470: LD_INT 0
64472: ST_TO_ADDR
// uc_nation := 0 ;
64473: LD_ADDR_OWVAR 21
64477: PUSH
64478: LD_INT 0
64480: ST_TO_ADDR
// hc_sex := sex_male ;
64481: LD_ADDR_OWVAR 27
64485: PUSH
64486: LD_INT 1
64488: ST_TO_ADDR
// hc_class := class_apeman ;
64489: LD_ADDR_OWVAR 28
64493: PUSH
64494: LD_INT 12
64496: ST_TO_ADDR
// hc_gallery :=  ;
64497: LD_ADDR_OWVAR 33
64501: PUSH
64502: LD_STRING 
64504: ST_TO_ADDR
// hc_name :=  ;
64505: LD_ADDR_OWVAR 26
64509: PUSH
64510: LD_STRING 
64512: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64513: LD_ADDR_OWVAR 29
64517: PUSH
64518: LD_INT 10
64520: PUSH
64521: LD_INT 12
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: ST_TO_ADDR
// if agressivity = 0 then
64528: LD_VAR 0 1
64532: PUSH
64533: LD_INT 0
64535: EQUAL
64536: IFFALSE 64548
// hc_agressivity := 0 else
64538: LD_ADDR_OWVAR 35
64542: PUSH
64543: LD_INT 0
64545: ST_TO_ADDR
64546: GO 64569
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64548: LD_ADDR_OWVAR 35
64552: PUSH
64553: LD_VAR 0 1
64557: NEG
64558: PPUSH
64559: LD_VAR 0 1
64563: PPUSH
64564: CALL_OW 12
64568: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64569: LD_ADDR_OWVAR 31
64573: PUSH
64574: LD_INT 0
64576: PPUSH
64577: LD_INT 3
64579: PPUSH
64580: CALL_OW 12
64584: PUSH
64585: LD_INT 0
64587: PPUSH
64588: LD_INT 3
64590: PPUSH
64591: CALL_OW 12
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: ST_TO_ADDR
// end ;
64608: LD_VAR 0 2
64612: RET
// export function PrepareTiger ( agressivity ) ; begin
64613: LD_INT 0
64615: PPUSH
// uc_side := 0 ;
64616: LD_ADDR_OWVAR 20
64620: PUSH
64621: LD_INT 0
64623: ST_TO_ADDR
// uc_nation := 0 ;
64624: LD_ADDR_OWVAR 21
64628: PUSH
64629: LD_INT 0
64631: ST_TO_ADDR
// InitHc ;
64632: CALL_OW 19
// hc_class := class_tiger ;
64636: LD_ADDR_OWVAR 28
64640: PUSH
64641: LD_INT 14
64643: ST_TO_ADDR
// hc_gallery :=  ;
64644: LD_ADDR_OWVAR 33
64648: PUSH
64649: LD_STRING 
64651: ST_TO_ADDR
// hc_name :=  ;
64652: LD_ADDR_OWVAR 26
64656: PUSH
64657: LD_STRING 
64659: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64660: LD_ADDR_OWVAR 35
64664: PUSH
64665: LD_VAR 0 1
64669: NEG
64670: PPUSH
64671: LD_VAR 0 1
64675: PPUSH
64676: CALL_OW 12
64680: ST_TO_ADDR
// end ;
64681: LD_VAR 0 2
64685: RET
// export function PrepareEnchidna ( ) ; begin
64686: LD_INT 0
64688: PPUSH
// uc_side := 0 ;
64689: LD_ADDR_OWVAR 20
64693: PUSH
64694: LD_INT 0
64696: ST_TO_ADDR
// uc_nation := 0 ;
64697: LD_ADDR_OWVAR 21
64701: PUSH
64702: LD_INT 0
64704: ST_TO_ADDR
// InitHc ;
64705: CALL_OW 19
// hc_class := class_baggie ;
64709: LD_ADDR_OWVAR 28
64713: PUSH
64714: LD_INT 13
64716: ST_TO_ADDR
// hc_gallery :=  ;
64717: LD_ADDR_OWVAR 33
64721: PUSH
64722: LD_STRING 
64724: ST_TO_ADDR
// hc_name :=  ;
64725: LD_ADDR_OWVAR 26
64729: PUSH
64730: LD_STRING 
64732: ST_TO_ADDR
// end ;
64733: LD_VAR 0 1
64737: RET
// export function PrepareFrog ( ) ; begin
64738: LD_INT 0
64740: PPUSH
// uc_side := 0 ;
64741: LD_ADDR_OWVAR 20
64745: PUSH
64746: LD_INT 0
64748: ST_TO_ADDR
// uc_nation := 0 ;
64749: LD_ADDR_OWVAR 21
64753: PUSH
64754: LD_INT 0
64756: ST_TO_ADDR
// InitHc ;
64757: CALL_OW 19
// hc_class := class_frog ;
64761: LD_ADDR_OWVAR 28
64765: PUSH
64766: LD_INT 19
64768: ST_TO_ADDR
// hc_gallery :=  ;
64769: LD_ADDR_OWVAR 33
64773: PUSH
64774: LD_STRING 
64776: ST_TO_ADDR
// hc_name :=  ;
64777: LD_ADDR_OWVAR 26
64781: PUSH
64782: LD_STRING 
64784: ST_TO_ADDR
// end ;
64785: LD_VAR 0 1
64789: RET
// export function PrepareFish ( ) ; begin
64790: LD_INT 0
64792: PPUSH
// uc_side := 0 ;
64793: LD_ADDR_OWVAR 20
64797: PUSH
64798: LD_INT 0
64800: ST_TO_ADDR
// uc_nation := 0 ;
64801: LD_ADDR_OWVAR 21
64805: PUSH
64806: LD_INT 0
64808: ST_TO_ADDR
// InitHc ;
64809: CALL_OW 19
// hc_class := class_fish ;
64813: LD_ADDR_OWVAR 28
64817: PUSH
64818: LD_INT 20
64820: ST_TO_ADDR
// hc_gallery :=  ;
64821: LD_ADDR_OWVAR 33
64825: PUSH
64826: LD_STRING 
64828: ST_TO_ADDR
// hc_name :=  ;
64829: LD_ADDR_OWVAR 26
64833: PUSH
64834: LD_STRING 
64836: ST_TO_ADDR
// end ;
64837: LD_VAR 0 1
64841: RET
// export function PrepareBird ( ) ; begin
64842: LD_INT 0
64844: PPUSH
// uc_side := 0 ;
64845: LD_ADDR_OWVAR 20
64849: PUSH
64850: LD_INT 0
64852: ST_TO_ADDR
// uc_nation := 0 ;
64853: LD_ADDR_OWVAR 21
64857: PUSH
64858: LD_INT 0
64860: ST_TO_ADDR
// InitHc ;
64861: CALL_OW 19
// hc_class := class_phororhacos ;
64865: LD_ADDR_OWVAR 28
64869: PUSH
64870: LD_INT 18
64872: ST_TO_ADDR
// hc_gallery :=  ;
64873: LD_ADDR_OWVAR 33
64877: PUSH
64878: LD_STRING 
64880: ST_TO_ADDR
// hc_name :=  ;
64881: LD_ADDR_OWVAR 26
64885: PUSH
64886: LD_STRING 
64888: ST_TO_ADDR
// end ;
64889: LD_VAR 0 1
64893: RET
// export function PrepareHorse ( ) ; begin
64894: LD_INT 0
64896: PPUSH
// uc_side := 0 ;
64897: LD_ADDR_OWVAR 20
64901: PUSH
64902: LD_INT 0
64904: ST_TO_ADDR
// uc_nation := 0 ;
64905: LD_ADDR_OWVAR 21
64909: PUSH
64910: LD_INT 0
64912: ST_TO_ADDR
// InitHc ;
64913: CALL_OW 19
// hc_class := class_horse ;
64917: LD_ADDR_OWVAR 28
64921: PUSH
64922: LD_INT 21
64924: ST_TO_ADDR
// hc_gallery :=  ;
64925: LD_ADDR_OWVAR 33
64929: PUSH
64930: LD_STRING 
64932: ST_TO_ADDR
// hc_name :=  ;
64933: LD_ADDR_OWVAR 26
64937: PUSH
64938: LD_STRING 
64940: ST_TO_ADDR
// end ;
64941: LD_VAR 0 1
64945: RET
// export function PrepareMastodont ( ) ; begin
64946: LD_INT 0
64948: PPUSH
// uc_side := 0 ;
64949: LD_ADDR_OWVAR 20
64953: PUSH
64954: LD_INT 0
64956: ST_TO_ADDR
// uc_nation := 0 ;
64957: LD_ADDR_OWVAR 21
64961: PUSH
64962: LD_INT 0
64964: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64965: LD_ADDR_OWVAR 37
64969: PUSH
64970: LD_INT 31
64972: ST_TO_ADDR
// vc_control := control_rider ;
64973: LD_ADDR_OWVAR 38
64977: PUSH
64978: LD_INT 4
64980: ST_TO_ADDR
// end ;
64981: LD_VAR 0 1
64985: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64986: LD_INT 0
64988: PPUSH
64989: PPUSH
64990: PPUSH
// uc_side = 0 ;
64991: LD_ADDR_OWVAR 20
64995: PUSH
64996: LD_INT 0
64998: ST_TO_ADDR
// uc_nation = 0 ;
64999: LD_ADDR_OWVAR 21
65003: PUSH
65004: LD_INT 0
65006: ST_TO_ADDR
// InitHc_All ( ) ;
65007: CALL_OW 584
// InitVc ;
65011: CALL_OW 20
// if mastodonts then
65015: LD_VAR 0 6
65019: IFFALSE 65086
// for i = 1 to mastodonts do
65021: LD_ADDR_VAR 0 11
65025: PUSH
65026: DOUBLE
65027: LD_INT 1
65029: DEC
65030: ST_TO_ADDR
65031: LD_VAR 0 6
65035: PUSH
65036: FOR_TO
65037: IFFALSE 65084
// begin vc_chassis := 31 ;
65039: LD_ADDR_OWVAR 37
65043: PUSH
65044: LD_INT 31
65046: ST_TO_ADDR
// vc_control := control_rider ;
65047: LD_ADDR_OWVAR 38
65051: PUSH
65052: LD_INT 4
65054: ST_TO_ADDR
// animal := CreateVehicle ;
65055: LD_ADDR_VAR 0 12
65059: PUSH
65060: CALL_OW 45
65064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65065: LD_VAR 0 12
65069: PPUSH
65070: LD_VAR 0 8
65074: PPUSH
65075: LD_INT 0
65077: PPUSH
65078: CALL 67228 0 3
// end ;
65082: GO 65036
65084: POP
65085: POP
// if horses then
65086: LD_VAR 0 5
65090: IFFALSE 65157
// for i = 1 to horses do
65092: LD_ADDR_VAR 0 11
65096: PUSH
65097: DOUBLE
65098: LD_INT 1
65100: DEC
65101: ST_TO_ADDR
65102: LD_VAR 0 5
65106: PUSH
65107: FOR_TO
65108: IFFALSE 65155
// begin hc_class := 21 ;
65110: LD_ADDR_OWVAR 28
65114: PUSH
65115: LD_INT 21
65117: ST_TO_ADDR
// hc_gallery :=  ;
65118: LD_ADDR_OWVAR 33
65122: PUSH
65123: LD_STRING 
65125: ST_TO_ADDR
// animal := CreateHuman ;
65126: LD_ADDR_VAR 0 12
65130: PUSH
65131: CALL_OW 44
65135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65136: LD_VAR 0 12
65140: PPUSH
65141: LD_VAR 0 8
65145: PPUSH
65146: LD_INT 0
65148: PPUSH
65149: CALL 67228 0 3
// end ;
65153: GO 65107
65155: POP
65156: POP
// if birds then
65157: LD_VAR 0 1
65161: IFFALSE 65228
// for i = 1 to birds do
65163: LD_ADDR_VAR 0 11
65167: PUSH
65168: DOUBLE
65169: LD_INT 1
65171: DEC
65172: ST_TO_ADDR
65173: LD_VAR 0 1
65177: PUSH
65178: FOR_TO
65179: IFFALSE 65226
// begin hc_class := 18 ;
65181: LD_ADDR_OWVAR 28
65185: PUSH
65186: LD_INT 18
65188: ST_TO_ADDR
// hc_gallery =  ;
65189: LD_ADDR_OWVAR 33
65193: PUSH
65194: LD_STRING 
65196: ST_TO_ADDR
// animal := CreateHuman ;
65197: LD_ADDR_VAR 0 12
65201: PUSH
65202: CALL_OW 44
65206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65207: LD_VAR 0 12
65211: PPUSH
65212: LD_VAR 0 8
65216: PPUSH
65217: LD_INT 0
65219: PPUSH
65220: CALL 67228 0 3
// end ;
65224: GO 65178
65226: POP
65227: POP
// if tigers then
65228: LD_VAR 0 2
65232: IFFALSE 65316
// for i = 1 to tigers do
65234: LD_ADDR_VAR 0 11
65238: PUSH
65239: DOUBLE
65240: LD_INT 1
65242: DEC
65243: ST_TO_ADDR
65244: LD_VAR 0 2
65248: PUSH
65249: FOR_TO
65250: IFFALSE 65314
// begin hc_class = class_tiger ;
65252: LD_ADDR_OWVAR 28
65256: PUSH
65257: LD_INT 14
65259: ST_TO_ADDR
// hc_gallery =  ;
65260: LD_ADDR_OWVAR 33
65264: PUSH
65265: LD_STRING 
65267: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65268: LD_ADDR_OWVAR 35
65272: PUSH
65273: LD_INT 7
65275: NEG
65276: PPUSH
65277: LD_INT 7
65279: PPUSH
65280: CALL_OW 12
65284: ST_TO_ADDR
// animal := CreateHuman ;
65285: LD_ADDR_VAR 0 12
65289: PUSH
65290: CALL_OW 44
65294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65295: LD_VAR 0 12
65299: PPUSH
65300: LD_VAR 0 8
65304: PPUSH
65305: LD_INT 0
65307: PPUSH
65308: CALL 67228 0 3
// end ;
65312: GO 65249
65314: POP
65315: POP
// if apemans then
65316: LD_VAR 0 3
65320: IFFALSE 65443
// for i = 1 to apemans do
65322: LD_ADDR_VAR 0 11
65326: PUSH
65327: DOUBLE
65328: LD_INT 1
65330: DEC
65331: ST_TO_ADDR
65332: LD_VAR 0 3
65336: PUSH
65337: FOR_TO
65338: IFFALSE 65441
// begin hc_class = class_apeman ;
65340: LD_ADDR_OWVAR 28
65344: PUSH
65345: LD_INT 12
65347: ST_TO_ADDR
// hc_gallery =  ;
65348: LD_ADDR_OWVAR 33
65352: PUSH
65353: LD_STRING 
65355: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65356: LD_ADDR_OWVAR 35
65360: PUSH
65361: LD_INT 2
65363: NEG
65364: PPUSH
65365: LD_INT 2
65367: PPUSH
65368: CALL_OW 12
65372: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65373: LD_ADDR_OWVAR 31
65377: PUSH
65378: LD_INT 1
65380: PPUSH
65381: LD_INT 3
65383: PPUSH
65384: CALL_OW 12
65388: PUSH
65389: LD_INT 1
65391: PPUSH
65392: LD_INT 3
65394: PPUSH
65395: CALL_OW 12
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: ST_TO_ADDR
// animal := CreateHuman ;
65412: LD_ADDR_VAR 0 12
65416: PUSH
65417: CALL_OW 44
65421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65422: LD_VAR 0 12
65426: PPUSH
65427: LD_VAR 0 8
65431: PPUSH
65432: LD_INT 0
65434: PPUSH
65435: CALL 67228 0 3
// end ;
65439: GO 65337
65441: POP
65442: POP
// if enchidnas then
65443: LD_VAR 0 4
65447: IFFALSE 65514
// for i = 1 to enchidnas do
65449: LD_ADDR_VAR 0 11
65453: PUSH
65454: DOUBLE
65455: LD_INT 1
65457: DEC
65458: ST_TO_ADDR
65459: LD_VAR 0 4
65463: PUSH
65464: FOR_TO
65465: IFFALSE 65512
// begin hc_class = 13 ;
65467: LD_ADDR_OWVAR 28
65471: PUSH
65472: LD_INT 13
65474: ST_TO_ADDR
// hc_gallery =  ;
65475: LD_ADDR_OWVAR 33
65479: PUSH
65480: LD_STRING 
65482: ST_TO_ADDR
// animal := CreateHuman ;
65483: LD_ADDR_VAR 0 12
65487: PUSH
65488: CALL_OW 44
65492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65493: LD_VAR 0 12
65497: PPUSH
65498: LD_VAR 0 8
65502: PPUSH
65503: LD_INT 0
65505: PPUSH
65506: CALL 67228 0 3
// end ;
65510: GO 65464
65512: POP
65513: POP
// if fishes then
65514: LD_VAR 0 7
65518: IFFALSE 65585
// for i = 1 to fishes do
65520: LD_ADDR_VAR 0 11
65524: PUSH
65525: DOUBLE
65526: LD_INT 1
65528: DEC
65529: ST_TO_ADDR
65530: LD_VAR 0 7
65534: PUSH
65535: FOR_TO
65536: IFFALSE 65583
// begin hc_class = 20 ;
65538: LD_ADDR_OWVAR 28
65542: PUSH
65543: LD_INT 20
65545: ST_TO_ADDR
// hc_gallery =  ;
65546: LD_ADDR_OWVAR 33
65550: PUSH
65551: LD_STRING 
65553: ST_TO_ADDR
// animal := CreateHuman ;
65554: LD_ADDR_VAR 0 12
65558: PUSH
65559: CALL_OW 44
65563: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65564: LD_VAR 0 12
65568: PPUSH
65569: LD_VAR 0 9
65573: PPUSH
65574: LD_INT 0
65576: PPUSH
65577: CALL 67228 0 3
// end ;
65581: GO 65535
65583: POP
65584: POP
// end ;
65585: LD_VAR 0 10
65589: RET
// export function WantHeal ( sci , unit ) ; begin
65590: LD_INT 0
65592: PPUSH
// if GetTaskList ( sci ) > 0 then
65593: LD_VAR 0 1
65597: PPUSH
65598: CALL_OW 437
65602: PUSH
65603: LD_INT 0
65605: GREATER
65606: IFFALSE 65678
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65608: LD_VAR 0 1
65612: PPUSH
65613: CALL_OW 437
65617: PUSH
65618: LD_INT 1
65620: ARRAY
65621: PUSH
65622: LD_INT 1
65624: ARRAY
65625: PUSH
65626: LD_STRING l
65628: EQUAL
65629: IFFALSE 65656
65631: PUSH
65632: LD_VAR 0 1
65636: PPUSH
65637: CALL_OW 437
65641: PUSH
65642: LD_INT 1
65644: ARRAY
65645: PUSH
65646: LD_INT 4
65648: ARRAY
65649: PUSH
65650: LD_VAR 0 2
65654: EQUAL
65655: AND
65656: IFFALSE 65668
// result := true else
65658: LD_ADDR_VAR 0 3
65662: PUSH
65663: LD_INT 1
65665: ST_TO_ADDR
65666: GO 65676
// result := false ;
65668: LD_ADDR_VAR 0 3
65672: PUSH
65673: LD_INT 0
65675: ST_TO_ADDR
// end else
65676: GO 65686
// result := false ;
65678: LD_ADDR_VAR 0 3
65682: PUSH
65683: LD_INT 0
65685: ST_TO_ADDR
// end ;
65686: LD_VAR 0 3
65690: RET
// export function HealTarget ( sci ) ; begin
65691: LD_INT 0
65693: PPUSH
// if not sci then
65694: LD_VAR 0 1
65698: NOT
65699: IFFALSE 65703
// exit ;
65701: GO 65768
// result := 0 ;
65703: LD_ADDR_VAR 0 2
65707: PUSH
65708: LD_INT 0
65710: ST_TO_ADDR
// if GetTaskList ( sci ) then
65711: LD_VAR 0 1
65715: PPUSH
65716: CALL_OW 437
65720: IFFALSE 65768
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65722: LD_VAR 0 1
65726: PPUSH
65727: CALL_OW 437
65731: PUSH
65732: LD_INT 1
65734: ARRAY
65735: PUSH
65736: LD_INT 1
65738: ARRAY
65739: PUSH
65740: LD_STRING l
65742: EQUAL
65743: IFFALSE 65768
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65745: LD_ADDR_VAR 0 2
65749: PUSH
65750: LD_VAR 0 1
65754: PPUSH
65755: CALL_OW 437
65759: PUSH
65760: LD_INT 1
65762: ARRAY
65763: PUSH
65764: LD_INT 4
65766: ARRAY
65767: ST_TO_ADDR
// end ;
65768: LD_VAR 0 2
65772: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65773: LD_INT 0
65775: PPUSH
65776: PPUSH
65777: PPUSH
65778: PPUSH
// if not base_units then
65779: LD_VAR 0 1
65783: NOT
65784: IFFALSE 65788
// exit ;
65786: GO 65875
// result := false ;
65788: LD_ADDR_VAR 0 2
65792: PUSH
65793: LD_INT 0
65795: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65796: LD_ADDR_VAR 0 5
65800: PUSH
65801: LD_VAR 0 1
65805: PPUSH
65806: LD_INT 21
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PPUSH
65816: CALL_OW 72
65820: ST_TO_ADDR
// if not tmp then
65821: LD_VAR 0 5
65825: NOT
65826: IFFALSE 65830
// exit ;
65828: GO 65875
// for i in tmp do
65830: LD_ADDR_VAR 0 3
65834: PUSH
65835: LD_VAR 0 5
65839: PUSH
65840: FOR_IN
65841: IFFALSE 65873
// begin result := EnemyInRange ( i , 22 ) ;
65843: LD_ADDR_VAR 0 2
65847: PUSH
65848: LD_VAR 0 3
65852: PPUSH
65853: LD_INT 22
65855: PPUSH
65856: CALL 63290 0 2
65860: ST_TO_ADDR
// if result then
65861: LD_VAR 0 2
65865: IFFALSE 65871
// exit ;
65867: POP
65868: POP
65869: GO 65875
// end ;
65871: GO 65840
65873: POP
65874: POP
// end ;
65875: LD_VAR 0 2
65879: RET
// export function FilterByTag ( units , tag ) ; begin
65880: LD_INT 0
65882: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65883: LD_ADDR_VAR 0 3
65887: PUSH
65888: LD_VAR 0 1
65892: PPUSH
65893: LD_INT 120
65895: PUSH
65896: LD_VAR 0 2
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PPUSH
65905: CALL_OW 72
65909: ST_TO_ADDR
// end ;
65910: LD_VAR 0 3
65914: RET
// export function IsDriver ( un ) ; begin
65915: LD_INT 0
65917: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65918: LD_ADDR_VAR 0 2
65922: PUSH
65923: LD_VAR 0 1
65927: PUSH
65928: LD_INT 55
65930: PUSH
65931: EMPTY
65932: LIST
65933: PPUSH
65934: CALL_OW 69
65938: IN
65939: ST_TO_ADDR
// end ;
65940: LD_VAR 0 2
65944: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65945: LD_INT 0
65947: PPUSH
65948: PPUSH
// list := [ ] ;
65949: LD_ADDR_VAR 0 5
65953: PUSH
65954: EMPTY
65955: ST_TO_ADDR
// case d of 0 :
65956: LD_VAR 0 3
65960: PUSH
65961: LD_INT 0
65963: DOUBLE
65964: EQUAL
65965: IFTRUE 65969
65967: GO 66102
65969: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65970: LD_ADDR_VAR 0 5
65974: PUSH
65975: LD_VAR 0 1
65979: PUSH
65980: LD_INT 4
65982: MINUS
65983: PUSH
65984: LD_VAR 0 2
65988: PUSH
65989: LD_INT 4
65991: MINUS
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: LIST
66000: PUSH
66001: LD_VAR 0 1
66005: PUSH
66006: LD_INT 3
66008: MINUS
66009: PUSH
66010: LD_VAR 0 2
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: LIST
66022: PUSH
66023: LD_VAR 0 1
66027: PUSH
66028: LD_INT 4
66030: PLUS
66031: PUSH
66032: LD_VAR 0 2
66036: PUSH
66037: LD_INT 4
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: PUSH
66045: LD_VAR 0 1
66049: PUSH
66050: LD_INT 3
66052: PLUS
66053: PUSH
66054: LD_VAR 0 2
66058: PUSH
66059: LD_INT 3
66061: PLUS
66062: PUSH
66063: LD_INT 5
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: PUSH
66071: LD_VAR 0 1
66075: PUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_INT 4
66083: PLUS
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: ST_TO_ADDR
// end ; 1 :
66100: GO 66800
66102: LD_INT 1
66104: DOUBLE
66105: EQUAL
66106: IFTRUE 66110
66108: GO 66243
66110: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66111: LD_ADDR_VAR 0 5
66115: PUSH
66116: LD_VAR 0 1
66120: PUSH
66121: LD_VAR 0 2
66125: PUSH
66126: LD_INT 4
66128: MINUS
66129: PUSH
66130: LD_INT 3
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: PUSH
66138: LD_VAR 0 1
66142: PUSH
66143: LD_INT 3
66145: MINUS
66146: PUSH
66147: LD_VAR 0 2
66151: PUSH
66152: LD_INT 3
66154: MINUS
66155: PUSH
66156: LD_INT 2
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: LIST
66163: PUSH
66164: LD_VAR 0 1
66168: PUSH
66169: LD_INT 4
66171: MINUS
66172: PUSH
66173: LD_VAR 0 2
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: PUSH
66186: LD_VAR 0 1
66190: PUSH
66191: LD_VAR 0 2
66195: PUSH
66196: LD_INT 3
66198: PLUS
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: LIST
66207: PUSH
66208: LD_VAR 0 1
66212: PUSH
66213: LD_INT 4
66215: PLUS
66216: PUSH
66217: LD_VAR 0 2
66221: PUSH
66222: LD_INT 4
66224: PLUS
66225: PUSH
66226: LD_INT 5
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: ST_TO_ADDR
// end ; 2 :
66241: GO 66800
66243: LD_INT 2
66245: DOUBLE
66246: EQUAL
66247: IFTRUE 66251
66249: GO 66380
66251: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66252: LD_ADDR_VAR 0 5
66256: PUSH
66257: LD_VAR 0 1
66261: PUSH
66262: LD_VAR 0 2
66266: PUSH
66267: LD_INT 3
66269: MINUS
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: LIST
66278: PUSH
66279: LD_VAR 0 1
66283: PUSH
66284: LD_INT 4
66286: PLUS
66287: PUSH
66288: LD_VAR 0 2
66292: PUSH
66293: LD_INT 4
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: PUSH
66301: LD_VAR 0 1
66305: PUSH
66306: LD_VAR 0 2
66310: PUSH
66311: LD_INT 4
66313: PLUS
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: PUSH
66323: LD_VAR 0 1
66327: PUSH
66328: LD_INT 3
66330: MINUS
66331: PUSH
66332: LD_VAR 0 2
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: PUSH
66345: LD_VAR 0 1
66349: PUSH
66350: LD_INT 4
66352: MINUS
66353: PUSH
66354: LD_VAR 0 2
66358: PUSH
66359: LD_INT 4
66361: MINUS
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: ST_TO_ADDR
// end ; 3 :
66378: GO 66800
66380: LD_INT 3
66382: DOUBLE
66383: EQUAL
66384: IFTRUE 66388
66386: GO 66521
66388: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66389: LD_ADDR_VAR 0 5
66393: PUSH
66394: LD_VAR 0 1
66398: PUSH
66399: LD_INT 3
66401: PLUS
66402: PUSH
66403: LD_VAR 0 2
66407: PUSH
66408: LD_INT 4
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: LIST
66415: PUSH
66416: LD_VAR 0 1
66420: PUSH
66421: LD_INT 4
66423: PLUS
66424: PUSH
66425: LD_VAR 0 2
66429: PUSH
66430: LD_INT 4
66432: PLUS
66433: PUSH
66434: LD_INT 5
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: PUSH
66442: LD_VAR 0 1
66446: PUSH
66447: LD_INT 4
66449: MINUS
66450: PUSH
66451: LD_VAR 0 2
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: LIST
66463: PUSH
66464: LD_VAR 0 1
66468: PUSH
66469: LD_VAR 0 2
66473: PUSH
66474: LD_INT 4
66476: MINUS
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: LIST
66485: PUSH
66486: LD_VAR 0 1
66490: PUSH
66491: LD_INT 3
66493: MINUS
66494: PUSH
66495: LD_VAR 0 2
66499: PUSH
66500: LD_INT 3
66502: MINUS
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: LIST
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: ST_TO_ADDR
// end ; 4 :
66519: GO 66800
66521: LD_INT 4
66523: DOUBLE
66524: EQUAL
66525: IFTRUE 66529
66527: GO 66662
66529: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66530: LD_ADDR_VAR 0 5
66534: PUSH
66535: LD_VAR 0 1
66539: PUSH
66540: LD_VAR 0 2
66544: PUSH
66545: LD_INT 4
66547: PLUS
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: LIST
66556: PUSH
66557: LD_VAR 0 1
66561: PUSH
66562: LD_INT 3
66564: PLUS
66565: PUSH
66566: LD_VAR 0 2
66570: PUSH
66571: LD_INT 3
66573: PLUS
66574: PUSH
66575: LD_INT 5
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: LIST
66582: PUSH
66583: LD_VAR 0 1
66587: PUSH
66588: LD_INT 4
66590: PLUS
66591: PUSH
66592: LD_VAR 0 2
66596: PUSH
66597: LD_INT 4
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: LIST
66604: PUSH
66605: LD_VAR 0 1
66609: PUSH
66610: LD_VAR 0 2
66614: PUSH
66615: LD_INT 3
66617: MINUS
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: PUSH
66627: LD_VAR 0 1
66631: PUSH
66632: LD_INT 4
66634: MINUS
66635: PUSH
66636: LD_VAR 0 2
66640: PUSH
66641: LD_INT 4
66643: MINUS
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: ST_TO_ADDR
// end ; 5 :
66660: GO 66800
66662: LD_INT 5
66664: DOUBLE
66665: EQUAL
66666: IFTRUE 66670
66668: GO 66799
66670: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66671: LD_ADDR_VAR 0 5
66675: PUSH
66676: LD_VAR 0 1
66680: PUSH
66681: LD_INT 4
66683: MINUS
66684: PUSH
66685: LD_VAR 0 2
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: PUSH
66698: LD_VAR 0 1
66702: PUSH
66703: LD_VAR 0 2
66707: PUSH
66708: LD_INT 4
66710: MINUS
66711: PUSH
66712: LD_INT 3
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: LIST
66719: PUSH
66720: LD_VAR 0 1
66724: PUSH
66725: LD_INT 4
66727: PLUS
66728: PUSH
66729: LD_VAR 0 2
66733: PUSH
66734: LD_INT 4
66736: PLUS
66737: PUSH
66738: LD_INT 5
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: LIST
66745: PUSH
66746: LD_VAR 0 1
66750: PUSH
66751: LD_INT 3
66753: PLUS
66754: PUSH
66755: LD_VAR 0 2
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: PUSH
66768: LD_VAR 0 1
66772: PUSH
66773: LD_VAR 0 2
66777: PUSH
66778: LD_INT 3
66780: PLUS
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: ST_TO_ADDR
// end ; end ;
66797: GO 66800
66799: POP
// result := list ;
66800: LD_ADDR_VAR 0 4
66804: PUSH
66805: LD_VAR 0 5
66809: ST_TO_ADDR
// end ;
66810: LD_VAR 0 4
66814: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66815: LD_INT 0
66817: PPUSH
66818: PPUSH
66819: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66820: LD_VAR 0 1
66824: NOT
66825: IFTRUE 66853
66827: PUSH
66828: LD_VAR 0 2
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: LD_INT 2
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: LD_INT 4
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: IN
66851: NOT
66852: OR
66853: IFFALSE 66857
// exit ;
66855: GO 66940
// tmp := [ ] ;
66857: LD_ADDR_VAR 0 5
66861: PUSH
66862: EMPTY
66863: ST_TO_ADDR
// for i in units do
66864: LD_ADDR_VAR 0 4
66868: PUSH
66869: LD_VAR 0 1
66873: PUSH
66874: FOR_IN
66875: IFFALSE 66909
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66877: LD_ADDR_VAR 0 5
66881: PUSH
66882: LD_VAR 0 5
66886: PPUSH
66887: LD_VAR 0 4
66891: PPUSH
66892: LD_VAR 0 2
66896: PPUSH
66897: CALL_OW 259
66901: PPUSH
66902: CALL 68335 0 2
66906: ST_TO_ADDR
66907: GO 66874
66909: POP
66910: POP
// if not tmp then
66911: LD_VAR 0 5
66915: NOT
66916: IFFALSE 66920
// exit ;
66918: GO 66940
// result := SortListByListDesc ( units , tmp ) ;
66920: LD_ADDR_VAR 0 3
66924: PUSH
66925: LD_VAR 0 1
66929: PPUSH
66930: LD_VAR 0 5
66934: PPUSH
66935: CALL_OW 77
66939: ST_TO_ADDR
// end ;
66940: LD_VAR 0 3
66944: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66945: LD_INT 0
66947: PPUSH
66948: PPUSH
66949: PPUSH
// result := false ;
66950: LD_ADDR_VAR 0 3
66954: PUSH
66955: LD_INT 0
66957: ST_TO_ADDR
// if not building then
66958: LD_VAR 0 2
66962: NOT
66963: IFFALSE 66967
// exit ;
66965: GO 67111
// x := GetX ( building ) ;
66967: LD_ADDR_VAR 0 4
66971: PUSH
66972: LD_VAR 0 2
66976: PPUSH
66977: CALL_OW 250
66981: ST_TO_ADDR
// y := GetY ( building ) ;
66982: LD_ADDR_VAR 0 5
66986: PUSH
66987: LD_VAR 0 2
66991: PPUSH
66992: CALL_OW 251
66996: ST_TO_ADDR
// if not x or not y then
66997: LD_VAR 0 4
67001: NOT
67002: IFTRUE 67011
67004: PUSH
67005: LD_VAR 0 5
67009: NOT
67010: OR
67011: IFFALSE 67015
// exit ;
67013: GO 67111
// if GetTaskList ( unit ) then
67015: LD_VAR 0 1
67019: PPUSH
67020: CALL_OW 437
67024: IFFALSE 67111
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67026: LD_STRING e
67028: PUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: CALL_OW 437
67038: PUSH
67039: LD_INT 1
67041: ARRAY
67042: PUSH
67043: LD_INT 1
67045: ARRAY
67046: EQUAL
67047: IFFALSE 67074
67049: PUSH
67050: LD_VAR 0 4
67054: PUSH
67055: LD_VAR 0 1
67059: PPUSH
67060: CALL_OW 437
67064: PUSH
67065: LD_INT 1
67067: ARRAY
67068: PUSH
67069: LD_INT 2
67071: ARRAY
67072: EQUAL
67073: AND
67074: IFFALSE 67101
67076: PUSH
67077: LD_VAR 0 5
67081: PUSH
67082: LD_VAR 0 1
67086: PPUSH
67087: CALL_OW 437
67091: PUSH
67092: LD_INT 1
67094: ARRAY
67095: PUSH
67096: LD_INT 3
67098: ARRAY
67099: EQUAL
67100: AND
67101: IFFALSE 67111
// result := true end ;
67103: LD_ADDR_VAR 0 3
67107: PUSH
67108: LD_INT 1
67110: ST_TO_ADDR
// end ;
67111: LD_VAR 0 3
67115: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67116: LD_INT 0
67118: PPUSH
// result := false ;
67119: LD_ADDR_VAR 0 4
67123: PUSH
67124: LD_INT 0
67126: ST_TO_ADDR
// if GetTaskList ( unit ) then
67127: LD_VAR 0 1
67131: PPUSH
67132: CALL_OW 437
67136: IFFALSE 67223
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67138: LD_STRING M
67140: PUSH
67141: LD_VAR 0 1
67145: PPUSH
67146: CALL_OW 437
67150: PUSH
67151: LD_INT 1
67153: ARRAY
67154: PUSH
67155: LD_INT 1
67157: ARRAY
67158: EQUAL
67159: IFFALSE 67186
67161: PUSH
67162: LD_VAR 0 2
67166: PUSH
67167: LD_VAR 0 1
67171: PPUSH
67172: CALL_OW 437
67176: PUSH
67177: LD_INT 1
67179: ARRAY
67180: PUSH
67181: LD_INT 2
67183: ARRAY
67184: EQUAL
67185: AND
67186: IFFALSE 67213
67188: PUSH
67189: LD_VAR 0 3
67193: PUSH
67194: LD_VAR 0 1
67198: PPUSH
67199: CALL_OW 437
67203: PUSH
67204: LD_INT 1
67206: ARRAY
67207: PUSH
67208: LD_INT 3
67210: ARRAY
67211: EQUAL
67212: AND
67213: IFFALSE 67223
// result := true ;
67215: LD_ADDR_VAR 0 4
67219: PUSH
67220: LD_INT 1
67222: ST_TO_ADDR
// end ; end ;
67223: LD_VAR 0 4
67227: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67228: LD_INT 0
67230: PPUSH
67231: PPUSH
67232: PPUSH
67233: PPUSH
// if not unit or not area then
67234: LD_VAR 0 1
67238: NOT
67239: IFTRUE 67248
67241: PUSH
67242: LD_VAR 0 2
67246: NOT
67247: OR
67248: IFFALSE 67252
// exit ;
67250: GO 67428
// tmp := AreaToList ( area , i ) ;
67252: LD_ADDR_VAR 0 6
67256: PUSH
67257: LD_VAR 0 2
67261: PPUSH
67262: LD_VAR 0 5
67266: PPUSH
67267: CALL_OW 517
67271: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67272: LD_ADDR_VAR 0 5
67276: PUSH
67277: DOUBLE
67278: LD_INT 1
67280: DEC
67281: ST_TO_ADDR
67282: LD_VAR 0 6
67286: PUSH
67287: LD_INT 1
67289: ARRAY
67290: PUSH
67291: FOR_TO
67292: IFFALSE 67426
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67294: LD_ADDR_VAR 0 7
67298: PUSH
67299: LD_VAR 0 6
67303: PUSH
67304: LD_INT 1
67306: ARRAY
67307: PUSH
67308: LD_VAR 0 5
67312: ARRAY
67313: PUSH
67314: LD_VAR 0 6
67318: PUSH
67319: LD_INT 2
67321: ARRAY
67322: PUSH
67323: LD_VAR 0 5
67327: ARRAY
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67333: LD_INT 92
67335: PUSH
67336: LD_VAR 0 7
67340: PUSH
67341: LD_INT 1
67343: ARRAY
67344: PUSH
67345: LD_VAR 0 7
67349: PUSH
67350: LD_INT 2
67352: ARRAY
67353: PUSH
67354: LD_INT 2
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: PPUSH
67363: CALL_OW 69
67367: PUSH
67368: LD_INT 0
67370: EQUAL
67371: IFFALSE 67424
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67373: LD_VAR 0 1
67377: PPUSH
67378: LD_VAR 0 7
67382: PUSH
67383: LD_INT 1
67385: ARRAY
67386: PPUSH
67387: LD_VAR 0 7
67391: PUSH
67392: LD_INT 2
67394: ARRAY
67395: PPUSH
67396: LD_VAR 0 3
67400: PPUSH
67401: CALL_OW 48
// result := IsPlaced ( unit ) ;
67405: LD_ADDR_VAR 0 4
67409: PUSH
67410: LD_VAR 0 1
67414: PPUSH
67415: CALL_OW 305
67419: ST_TO_ADDR
// exit ;
67420: POP
67421: POP
67422: GO 67428
// end ; end ;
67424: GO 67291
67426: POP
67427: POP
// end ;
67428: LD_VAR 0 4
67432: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67433: LD_INT 0
67435: PPUSH
67436: PPUSH
67437: PPUSH
// if not side or side > 8 then
67438: LD_VAR 0 1
67442: NOT
67443: IFTRUE 67455
67445: PUSH
67446: LD_VAR 0 1
67450: PUSH
67451: LD_INT 8
67453: GREATER
67454: OR
67455: IFFALSE 67459
// exit ;
67457: GO 67646
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67459: LD_ADDR_VAR 0 4
67463: PUSH
67464: LD_INT 22
67466: PUSH
67467: LD_VAR 0 1
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 21
67478: PUSH
67479: LD_INT 3
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PPUSH
67490: CALL_OW 69
67494: ST_TO_ADDR
// if not tmp then
67495: LD_VAR 0 4
67499: NOT
67500: IFFALSE 67504
// exit ;
67502: GO 67646
// enable_addtolog := true ;
67504: LD_ADDR_OWVAR 81
67508: PUSH
67509: LD_INT 1
67511: ST_TO_ADDR
// AddToLog ( [ ) ;
67512: LD_STRING [
67514: PPUSH
67515: CALL_OW 561
// for i in tmp do
67519: LD_ADDR_VAR 0 3
67523: PUSH
67524: LD_VAR 0 4
67528: PUSH
67529: FOR_IN
67530: IFFALSE 67637
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67532: LD_STRING [
67534: PUSH
67535: LD_VAR 0 3
67539: PPUSH
67540: CALL_OW 266
67544: STR
67545: PUSH
67546: LD_STRING , 
67548: STR
67549: PUSH
67550: LD_VAR 0 3
67554: PPUSH
67555: CALL_OW 250
67559: STR
67560: PUSH
67561: LD_STRING , 
67563: STR
67564: PUSH
67565: LD_VAR 0 3
67569: PPUSH
67570: CALL_OW 251
67574: STR
67575: PUSH
67576: LD_STRING , 
67578: STR
67579: PUSH
67580: LD_VAR 0 3
67584: PPUSH
67585: CALL_OW 254
67589: STR
67590: PUSH
67591: LD_STRING , 
67593: STR
67594: PUSH
67595: LD_VAR 0 3
67599: PPUSH
67600: LD_INT 1
67602: PPUSH
67603: CALL_OW 268
67607: STR
67608: PUSH
67609: LD_STRING , 
67611: STR
67612: PUSH
67613: LD_VAR 0 3
67617: PPUSH
67618: LD_INT 2
67620: PPUSH
67621: CALL_OW 268
67625: STR
67626: PUSH
67627: LD_STRING ],
67629: STR
67630: PPUSH
67631: CALL_OW 561
// end ;
67635: GO 67529
67637: POP
67638: POP
// AddToLog ( ]; ) ;
67639: LD_STRING ];
67641: PPUSH
67642: CALL_OW 561
// end ;
67646: LD_VAR 0 2
67650: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67651: LD_INT 0
67653: PPUSH
67654: PPUSH
67655: PPUSH
67656: PPUSH
67657: PPUSH
// if not area or not rate or not max then
67658: LD_VAR 0 1
67662: NOT
67663: IFTRUE 67672
67665: PUSH
67666: LD_VAR 0 2
67670: NOT
67671: OR
67672: IFTRUE 67681
67674: PUSH
67675: LD_VAR 0 4
67679: NOT
67680: OR
67681: IFFALSE 67685
// exit ;
67683: GO 67874
// while 1 do
67685: LD_INT 1
67687: IFFALSE 67874
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67689: LD_ADDR_VAR 0 9
67693: PUSH
67694: LD_VAR 0 1
67698: PPUSH
67699: LD_INT 1
67701: PPUSH
67702: CALL_OW 287
67706: PUSH
67707: LD_INT 10
67709: MUL
67710: ST_TO_ADDR
// r := rate / 10 ;
67711: LD_ADDR_VAR 0 7
67715: PUSH
67716: LD_VAR 0 2
67720: PUSH
67721: LD_INT 10
67723: DIVREAL
67724: ST_TO_ADDR
// time := 1 1$00 ;
67725: LD_ADDR_VAR 0 8
67729: PUSH
67730: LD_INT 2100
67732: ST_TO_ADDR
// if amount < min then
67733: LD_VAR 0 9
67737: PUSH
67738: LD_VAR 0 3
67742: LESS
67743: IFFALSE 67761
// r := r * 2 else
67745: LD_ADDR_VAR 0 7
67749: PUSH
67750: LD_VAR 0 7
67754: PUSH
67755: LD_INT 2
67757: MUL
67758: ST_TO_ADDR
67759: GO 67787
// if amount > max then
67761: LD_VAR 0 9
67765: PUSH
67766: LD_VAR 0 4
67770: GREATER
67771: IFFALSE 67787
// r := r / 2 ;
67773: LD_ADDR_VAR 0 7
67777: PUSH
67778: LD_VAR 0 7
67782: PUSH
67783: LD_INT 2
67785: DIVREAL
67786: ST_TO_ADDR
// time := time / r ;
67787: LD_ADDR_VAR 0 8
67791: PUSH
67792: LD_VAR 0 8
67796: PUSH
67797: LD_VAR 0 7
67801: DIVREAL
67802: ST_TO_ADDR
// if time < 0 then
67803: LD_VAR 0 8
67807: PUSH
67808: LD_INT 0
67810: LESS
67811: IFFALSE 67828
// time := time * - 1 ;
67813: LD_ADDR_VAR 0 8
67817: PUSH
67818: LD_VAR 0 8
67822: PUSH
67823: LD_INT 1
67825: NEG
67826: MUL
67827: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67828: LD_VAR 0 8
67832: PUSH
67833: LD_INT 35
67835: PPUSH
67836: LD_INT 875
67838: PPUSH
67839: CALL_OW 12
67843: PLUS
67844: PPUSH
67845: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67849: LD_INT 1
67851: PPUSH
67852: LD_INT 5
67854: PPUSH
67855: CALL_OW 12
67859: PPUSH
67860: LD_VAR 0 1
67864: PPUSH
67865: LD_INT 1
67867: PPUSH
67868: CALL_OW 55
// end ;
67872: GO 67685
// end ;
67874: LD_VAR 0 5
67878: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67879: LD_INT 0
67881: PPUSH
67882: PPUSH
67883: PPUSH
67884: PPUSH
67885: PPUSH
67886: PPUSH
67887: PPUSH
67888: PPUSH
// if not turrets or not factories then
67889: LD_VAR 0 1
67893: NOT
67894: IFTRUE 67903
67896: PUSH
67897: LD_VAR 0 2
67901: NOT
67902: OR
67903: IFFALSE 67907
// exit ;
67905: GO 68214
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67907: LD_ADDR_VAR 0 10
67911: PUSH
67912: LD_INT 5
67914: PUSH
67915: LD_INT 6
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 2
67924: PUSH
67925: LD_INT 4
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: PUSH
67935: LD_INT 5
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 24
67949: PUSH
67950: LD_INT 25
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 23
67959: PUSH
67960: LD_INT 27
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 42
67973: PUSH
67974: LD_INT 43
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 44
67983: PUSH
67984: LD_INT 46
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 45
67993: PUSH
67994: LD_INT 47
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: LIST
68010: ST_TO_ADDR
// result := [ ] ;
68011: LD_ADDR_VAR 0 3
68015: PUSH
68016: EMPTY
68017: ST_TO_ADDR
// for i in turrets do
68018: LD_ADDR_VAR 0 4
68022: PUSH
68023: LD_VAR 0 1
68027: PUSH
68028: FOR_IN
68029: IFFALSE 68212
// begin nat := GetNation ( i ) ;
68031: LD_ADDR_VAR 0 7
68035: PUSH
68036: LD_VAR 0 4
68040: PPUSH
68041: CALL_OW 248
68045: ST_TO_ADDR
// weapon := 0 ;
68046: LD_ADDR_VAR 0 8
68050: PUSH
68051: LD_INT 0
68053: ST_TO_ADDR
// if not nat then
68054: LD_VAR 0 7
68058: NOT
68059: IFFALSE 68063
// continue ;
68061: GO 68028
// for j in list [ nat ] do
68063: LD_ADDR_VAR 0 5
68067: PUSH
68068: LD_VAR 0 10
68072: PUSH
68073: LD_VAR 0 7
68077: ARRAY
68078: PUSH
68079: FOR_IN
68080: IFFALSE 68121
// if GetBWeapon ( i ) = j [ 1 ] then
68082: LD_VAR 0 4
68086: PPUSH
68087: CALL_OW 269
68091: PUSH
68092: LD_VAR 0 5
68096: PUSH
68097: LD_INT 1
68099: ARRAY
68100: EQUAL
68101: IFFALSE 68119
// begin weapon := j [ 2 ] ;
68103: LD_ADDR_VAR 0 8
68107: PUSH
68108: LD_VAR 0 5
68112: PUSH
68113: LD_INT 2
68115: ARRAY
68116: ST_TO_ADDR
// break ;
68117: GO 68121
// end ;
68119: GO 68079
68121: POP
68122: POP
// if not weapon then
68123: LD_VAR 0 8
68127: NOT
68128: IFFALSE 68132
// continue ;
68130: GO 68028
// for k in factories do
68132: LD_ADDR_VAR 0 6
68136: PUSH
68137: LD_VAR 0 2
68141: PUSH
68142: FOR_IN
68143: IFFALSE 68208
// begin weapons := AvailableWeaponList ( k ) ;
68145: LD_ADDR_VAR 0 9
68149: PUSH
68150: LD_VAR 0 6
68154: PPUSH
68155: CALL_OW 478
68159: ST_TO_ADDR
// if not weapons then
68160: LD_VAR 0 9
68164: NOT
68165: IFFALSE 68169
// continue ;
68167: GO 68142
// if weapon in weapons then
68169: LD_VAR 0 8
68173: PUSH
68174: LD_VAR 0 9
68178: IN
68179: IFFALSE 68206
// begin result := [ i , weapon ] ;
68181: LD_ADDR_VAR 0 3
68185: PUSH
68186: LD_VAR 0 4
68190: PUSH
68191: LD_VAR 0 8
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: ST_TO_ADDR
// exit ;
68200: POP
68201: POP
68202: POP
68203: POP
68204: GO 68214
// end ; end ;
68206: GO 68142
68208: POP
68209: POP
// end ;
68210: GO 68028
68212: POP
68213: POP
// end ;
68214: LD_VAR 0 3
68218: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68219: LD_INT 0
68221: PPUSH
// if not side or side > 8 then
68222: LD_VAR 0 3
68226: NOT
68227: IFTRUE 68239
68229: PUSH
68230: LD_VAR 0 3
68234: PUSH
68235: LD_INT 8
68237: GREATER
68238: OR
68239: IFFALSE 68243
// exit ;
68241: GO 68302
// if not range then
68243: LD_VAR 0 4
68247: NOT
68248: IFFALSE 68259
// range := - 12 ;
68250: LD_ADDR_VAR 0 4
68254: PUSH
68255: LD_INT 12
68257: NEG
68258: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68259: LD_VAR 0 1
68263: PPUSH
68264: LD_VAR 0 2
68268: PPUSH
68269: LD_VAR 0 3
68273: PPUSH
68274: LD_VAR 0 4
68278: PPUSH
68279: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68283: LD_VAR 0 1
68287: PPUSH
68288: LD_VAR 0 2
68292: PPUSH
68293: LD_VAR 0 3
68297: PPUSH
68298: CALL_OW 331
// end ;
68302: LD_VAR 0 5
68306: RET
// export function Video ( mode ) ; begin
68307: LD_INT 0
68309: PPUSH
// ingame_video = mode ;
68310: LD_ADDR_OWVAR 52
68314: PUSH
68315: LD_VAR 0 1
68319: ST_TO_ADDR
// interface_hidden = mode ;
68320: LD_ADDR_OWVAR 54
68324: PUSH
68325: LD_VAR 0 1
68329: ST_TO_ADDR
// end ;
68330: LD_VAR 0 2
68334: RET
// export function Join ( array , element ) ; begin
68335: LD_INT 0
68337: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68338: LD_ADDR_VAR 0 3
68342: PUSH
68343: LD_VAR 0 1
68347: PPUSH
68348: LD_VAR 0 1
68352: PUSH
68353: LD_INT 1
68355: PLUS
68356: PPUSH
68357: LD_VAR 0 2
68361: PPUSH
68362: CALL_OW 1
68366: ST_TO_ADDR
// end ;
68367: LD_VAR 0 3
68371: RET
// export function JoinUnion ( array , element ) ; begin
68372: LD_INT 0
68374: PPUSH
// result := array union element ;
68375: LD_ADDR_VAR 0 3
68379: PUSH
68380: LD_VAR 0 1
68384: PUSH
68385: LD_VAR 0 2
68389: UNION
68390: ST_TO_ADDR
// end ;
68391: LD_VAR 0 3
68395: RET
// export function GetBehemoths ( side ) ; begin
68396: LD_INT 0
68398: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68399: LD_ADDR_VAR 0 2
68403: PUSH
68404: LD_INT 22
68406: PUSH
68407: LD_VAR 0 1
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 31
68418: PUSH
68419: LD_INT 25
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PPUSH
68430: CALL_OW 69
68434: ST_TO_ADDR
// end ;
68435: LD_VAR 0 2
68439: RET
// export function Shuffle ( array ) ; var i , index ; begin
68440: LD_INT 0
68442: PPUSH
68443: PPUSH
68444: PPUSH
// result := [ ] ;
68445: LD_ADDR_VAR 0 2
68449: PUSH
68450: EMPTY
68451: ST_TO_ADDR
// if not array then
68452: LD_VAR 0 1
68456: NOT
68457: IFFALSE 68461
// exit ;
68459: GO 68560
// Randomize ;
68461: CALL_OW 10
// for i = array downto 1 do
68465: LD_ADDR_VAR 0 3
68469: PUSH
68470: DOUBLE
68471: LD_VAR 0 1
68475: INC
68476: ST_TO_ADDR
68477: LD_INT 1
68479: PUSH
68480: FOR_DOWNTO
68481: IFFALSE 68558
// begin index := rand ( 1 , array ) ;
68483: LD_ADDR_VAR 0 4
68487: PUSH
68488: LD_INT 1
68490: PPUSH
68491: LD_VAR 0 1
68495: PPUSH
68496: CALL_OW 12
68500: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68501: LD_ADDR_VAR 0 2
68505: PUSH
68506: LD_VAR 0 2
68510: PPUSH
68511: LD_VAR 0 2
68515: PUSH
68516: LD_INT 1
68518: PLUS
68519: PPUSH
68520: LD_VAR 0 1
68524: PUSH
68525: LD_VAR 0 4
68529: ARRAY
68530: PPUSH
68531: CALL_OW 2
68535: ST_TO_ADDR
// array := Delete ( array , index ) ;
68536: LD_ADDR_VAR 0 1
68540: PUSH
68541: LD_VAR 0 1
68545: PPUSH
68546: LD_VAR 0 4
68550: PPUSH
68551: CALL_OW 3
68555: ST_TO_ADDR
// end ;
68556: GO 68480
68558: POP
68559: POP
// end ;
68560: LD_VAR 0 2
68564: RET
// export function GetBaseMaterials ( base ) ; begin
68565: LD_INT 0
68567: PPUSH
// result := [ 0 , 0 , 0 ] ;
68568: LD_ADDR_VAR 0 2
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: ST_TO_ADDR
// if not base then
68587: LD_VAR 0 1
68591: NOT
68592: IFFALSE 68596
// exit ;
68594: GO 68645
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68596: LD_ADDR_VAR 0 2
68600: PUSH
68601: LD_VAR 0 1
68605: PPUSH
68606: LD_INT 1
68608: PPUSH
68609: CALL_OW 275
68613: PUSH
68614: LD_VAR 0 1
68618: PPUSH
68619: LD_INT 2
68621: PPUSH
68622: CALL_OW 275
68626: PUSH
68627: LD_VAR 0 1
68631: PPUSH
68632: LD_INT 3
68634: PPUSH
68635: CALL_OW 275
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: LIST
68644: ST_TO_ADDR
// end ;
68645: LD_VAR 0 2
68649: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68650: LD_INT 0
68652: PPUSH
68653: PPUSH
// result := array ;
68654: LD_ADDR_VAR 0 3
68658: PUSH
68659: LD_VAR 0 1
68663: ST_TO_ADDR
// if size >= result then
68664: LD_VAR 0 2
68668: PUSH
68669: LD_VAR 0 3
68673: GREATEREQUAL
68674: IFFALSE 68678
// exit ;
68676: GO 68728
// if size then
68678: LD_VAR 0 2
68682: IFFALSE 68728
// for i := array downto size do
68684: LD_ADDR_VAR 0 4
68688: PUSH
68689: DOUBLE
68690: LD_VAR 0 1
68694: INC
68695: ST_TO_ADDR
68696: LD_VAR 0 2
68700: PUSH
68701: FOR_DOWNTO
68702: IFFALSE 68726
// result := Delete ( result , result ) ;
68704: LD_ADDR_VAR 0 3
68708: PUSH
68709: LD_VAR 0 3
68713: PPUSH
68714: LD_VAR 0 3
68718: PPUSH
68719: CALL_OW 3
68723: ST_TO_ADDR
68724: GO 68701
68726: POP
68727: POP
// end ;
68728: LD_VAR 0 3
68732: RET
// export function ComExit ( unit ) ; var tmp ; begin
68733: LD_INT 0
68735: PPUSH
68736: PPUSH
// if not IsInUnit ( unit ) then
68737: LD_VAR 0 1
68741: PPUSH
68742: CALL_OW 310
68746: NOT
68747: IFFALSE 68751
// exit ;
68749: GO 68811
// tmp := IsInUnit ( unit ) ;
68751: LD_ADDR_VAR 0 3
68755: PUSH
68756: LD_VAR 0 1
68760: PPUSH
68761: CALL_OW 310
68765: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68766: LD_VAR 0 3
68770: PPUSH
68771: CALL_OW 247
68775: PUSH
68776: LD_INT 2
68778: EQUAL
68779: IFFALSE 68792
// ComExitVehicle ( unit ) else
68781: LD_VAR 0 1
68785: PPUSH
68786: CALL_OW 121
68790: GO 68801
// ComExitBuilding ( unit ) ;
68792: LD_VAR 0 1
68796: PPUSH
68797: CALL_OW 122
// result := tmp ;
68801: LD_ADDR_VAR 0 2
68805: PUSH
68806: LD_VAR 0 3
68810: ST_TO_ADDR
// end ;
68811: LD_VAR 0 2
68815: RET
// export function ComExitAll ( units ) ; var i ; begin
68816: LD_INT 0
68818: PPUSH
68819: PPUSH
// if not units then
68820: LD_VAR 0 1
68824: NOT
68825: IFFALSE 68829
// exit ;
68827: GO 68855
// for i in units do
68829: LD_ADDR_VAR 0 3
68833: PUSH
68834: LD_VAR 0 1
68838: PUSH
68839: FOR_IN
68840: IFFALSE 68853
// ComExit ( i ) ;
68842: LD_VAR 0 3
68846: PPUSH
68847: CALL 68733 0 1
68851: GO 68839
68853: POP
68854: POP
// end ;
68855: LD_VAR 0 2
68859: RET
// export function ResetHc ; begin
68860: LD_INT 0
68862: PPUSH
// InitHc ;
68863: CALL_OW 19
// hc_importance := 0 ;
68867: LD_ADDR_OWVAR 32
68871: PUSH
68872: LD_INT 0
68874: ST_TO_ADDR
// end ;
68875: LD_VAR 0 1
68879: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68880: LD_INT 0
68882: PPUSH
68883: PPUSH
68884: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68885: LD_ADDR_VAR 0 6
68889: PUSH
68890: LD_VAR 0 1
68894: PUSH
68895: LD_VAR 0 3
68899: PLUS
68900: PUSH
68901: LD_INT 2
68903: DIV
68904: ST_TO_ADDR
// if _x < 0 then
68905: LD_VAR 0 6
68909: PUSH
68910: LD_INT 0
68912: LESS
68913: IFFALSE 68930
// _x := _x * - 1 ;
68915: LD_ADDR_VAR 0 6
68919: PUSH
68920: LD_VAR 0 6
68924: PUSH
68925: LD_INT 1
68927: NEG
68928: MUL
68929: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68930: LD_ADDR_VAR 0 7
68934: PUSH
68935: LD_VAR 0 2
68939: PUSH
68940: LD_VAR 0 4
68944: PLUS
68945: PUSH
68946: LD_INT 2
68948: DIV
68949: ST_TO_ADDR
// if _y < 0 then
68950: LD_VAR 0 7
68954: PUSH
68955: LD_INT 0
68957: LESS
68958: IFFALSE 68975
// _y := _y * - 1 ;
68960: LD_ADDR_VAR 0 7
68964: PUSH
68965: LD_VAR 0 7
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: MUL
68974: ST_TO_ADDR
// result := [ _x , _y ] ;
68975: LD_ADDR_VAR 0 5
68979: PUSH
68980: LD_VAR 0 6
68984: PUSH
68985: LD_VAR 0 7
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: ST_TO_ADDR
// end ;
68994: LD_VAR 0 5
68998: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68999: LD_INT 0
69001: PPUSH
69002: PPUSH
69003: PPUSH
69004: PPUSH
// task := GetTaskList ( unit ) ;
69005: LD_ADDR_VAR 0 7
69009: PUSH
69010: LD_VAR 0 1
69014: PPUSH
69015: CALL_OW 437
69019: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69020: LD_VAR 0 7
69024: NOT
69025: IFFALSE 69044
69027: PUSH
69028: LD_VAR 0 1
69032: PPUSH
69033: LD_VAR 0 2
69037: PPUSH
69038: CALL_OW 308
69042: NOT
69043: AND
69044: IFFALSE 69048
// exit ;
69046: GO 69166
// if IsInArea ( unit , area ) then
69048: LD_VAR 0 1
69052: PPUSH
69053: LD_VAR 0 2
69057: PPUSH
69058: CALL_OW 308
69062: IFFALSE 69080
// begin ComMoveToArea ( unit , goAway ) ;
69064: LD_VAR 0 1
69068: PPUSH
69069: LD_VAR 0 3
69073: PPUSH
69074: CALL_OW 113
// exit ;
69078: GO 69166
// end ; if task [ 1 ] [ 1 ] <> M then
69080: LD_VAR 0 7
69084: PUSH
69085: LD_INT 1
69087: ARRAY
69088: PUSH
69089: LD_INT 1
69091: ARRAY
69092: PUSH
69093: LD_STRING M
69095: NONEQUAL
69096: IFFALSE 69100
// exit ;
69098: GO 69166
// x := task [ 1 ] [ 2 ] ;
69100: LD_ADDR_VAR 0 5
69104: PUSH
69105: LD_VAR 0 7
69109: PUSH
69110: LD_INT 1
69112: ARRAY
69113: PUSH
69114: LD_INT 2
69116: ARRAY
69117: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69118: LD_ADDR_VAR 0 6
69122: PUSH
69123: LD_VAR 0 7
69127: PUSH
69128: LD_INT 1
69130: ARRAY
69131: PUSH
69132: LD_INT 3
69134: ARRAY
69135: ST_TO_ADDR
// if InArea ( x , y , area ) then
69136: LD_VAR 0 5
69140: PPUSH
69141: LD_VAR 0 6
69145: PPUSH
69146: LD_VAR 0 2
69150: PPUSH
69151: CALL_OW 309
69155: IFFALSE 69166
// ComStop ( unit ) ;
69157: LD_VAR 0 1
69161: PPUSH
69162: CALL_OW 141
// end ;
69166: LD_VAR 0 4
69170: RET
// export function Abs ( value ) ; begin
69171: LD_INT 0
69173: PPUSH
// result := value ;
69174: LD_ADDR_VAR 0 2
69178: PUSH
69179: LD_VAR 0 1
69183: ST_TO_ADDR
// if value < 0 then
69184: LD_VAR 0 1
69188: PUSH
69189: LD_INT 0
69191: LESS
69192: IFFALSE 69209
// result := value * - 1 ;
69194: LD_ADDR_VAR 0 2
69198: PUSH
69199: LD_VAR 0 1
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: MUL
69208: ST_TO_ADDR
// end ;
69209: LD_VAR 0 2
69213: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69214: LD_INT 0
69216: PPUSH
69217: PPUSH
69218: PPUSH
69219: PPUSH
69220: PPUSH
69221: PPUSH
69222: PPUSH
69223: PPUSH
// if not unit or not building then
69224: LD_VAR 0 1
69228: NOT
69229: IFTRUE 69238
69231: PUSH
69232: LD_VAR 0 2
69236: NOT
69237: OR
69238: IFFALSE 69242
// exit ;
69240: GO 69470
// x := GetX ( building ) ;
69242: LD_ADDR_VAR 0 4
69246: PUSH
69247: LD_VAR 0 2
69251: PPUSH
69252: CALL_OW 250
69256: ST_TO_ADDR
// y := GetY ( building ) ;
69257: LD_ADDR_VAR 0 6
69261: PUSH
69262: LD_VAR 0 2
69266: PPUSH
69267: CALL_OW 251
69271: ST_TO_ADDR
// d := GetDir ( building ) ;
69272: LD_ADDR_VAR 0 8
69276: PUSH
69277: LD_VAR 0 2
69281: PPUSH
69282: CALL_OW 254
69286: ST_TO_ADDR
// r := 4 ;
69287: LD_ADDR_VAR 0 9
69291: PUSH
69292: LD_INT 4
69294: ST_TO_ADDR
// for i := 1 to 5 do
69295: LD_ADDR_VAR 0 10
69299: PUSH
69300: DOUBLE
69301: LD_INT 1
69303: DEC
69304: ST_TO_ADDR
69305: LD_INT 5
69307: PUSH
69308: FOR_TO
69309: IFFALSE 69468
// begin _x := ShiftX ( x , d , r + i ) ;
69311: LD_ADDR_VAR 0 5
69315: PUSH
69316: LD_VAR 0 4
69320: PPUSH
69321: LD_VAR 0 8
69325: PPUSH
69326: LD_VAR 0 9
69330: PUSH
69331: LD_VAR 0 10
69335: PLUS
69336: PPUSH
69337: CALL_OW 272
69341: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69342: LD_ADDR_VAR 0 7
69346: PUSH
69347: LD_VAR 0 6
69351: PPUSH
69352: LD_VAR 0 8
69356: PPUSH
69357: LD_VAR 0 9
69361: PUSH
69362: LD_VAR 0 10
69366: PLUS
69367: PPUSH
69368: CALL_OW 273
69372: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69373: LD_VAR 0 5
69377: PPUSH
69378: LD_VAR 0 7
69382: PPUSH
69383: CALL_OW 488
69387: IFFALSE 69422
69389: PUSH
69390: LD_VAR 0 5
69394: PPUSH
69395: LD_VAR 0 7
69399: PPUSH
69400: CALL_OW 428
69404: PPUSH
69405: CALL_OW 247
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: LD_INT 2
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: IN
69420: NOT
69421: AND
69422: IFFALSE 69466
// begin ComMoveXY ( unit , _x , _y ) ;
69424: LD_VAR 0 1
69428: PPUSH
69429: LD_VAR 0 5
69433: PPUSH
69434: LD_VAR 0 7
69438: PPUSH
69439: CALL_OW 111
// result := [ _x , _y ] ;
69443: LD_ADDR_VAR 0 3
69447: PUSH
69448: LD_VAR 0 5
69452: PUSH
69453: LD_VAR 0 7
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: ST_TO_ADDR
// exit ;
69462: POP
69463: POP
69464: GO 69470
// end ; end ;
69466: GO 69308
69468: POP
69469: POP
// end ;
69470: LD_VAR 0 3
69474: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69475: LD_INT 0
69477: PPUSH
69478: PPUSH
69479: PPUSH
// result := 0 ;
69480: LD_ADDR_VAR 0 3
69484: PUSH
69485: LD_INT 0
69487: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69488: LD_VAR 0 1
69492: PUSH
69493: LD_INT 0
69495: LESS
69496: IFTRUE 69508
69498: PUSH
69499: LD_VAR 0 1
69503: PUSH
69504: LD_INT 8
69506: GREATER
69507: OR
69508: IFTRUE 69520
69510: PUSH
69511: LD_VAR 0 2
69515: PUSH
69516: LD_INT 0
69518: LESS
69519: OR
69520: IFTRUE 69532
69522: PUSH
69523: LD_VAR 0 2
69527: PUSH
69528: LD_INT 8
69530: GREATER
69531: OR
69532: IFFALSE 69536
// exit ;
69534: GO 69611
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69536: LD_ADDR_VAR 0 4
69540: PUSH
69541: LD_INT 22
69543: PUSH
69544: LD_VAR 0 2
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PPUSH
69553: CALL_OW 69
69557: PUSH
69558: FOR_IN
69559: IFFALSE 69609
// begin un := UnitShoot ( i ) ;
69561: LD_ADDR_VAR 0 5
69565: PUSH
69566: LD_VAR 0 4
69570: PPUSH
69571: CALL_OW 504
69575: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69576: LD_VAR 0 5
69580: PPUSH
69581: CALL_OW 255
69585: PUSH
69586: LD_VAR 0 1
69590: EQUAL
69591: IFFALSE 69607
// begin result := un ;
69593: LD_ADDR_VAR 0 3
69597: PUSH
69598: LD_VAR 0 5
69602: ST_TO_ADDR
// exit ;
69603: POP
69604: POP
69605: GO 69611
// end ; end ;
69607: GO 69558
69609: POP
69610: POP
// end ;
69611: LD_VAR 0 3
69615: RET
// export function GetCargoBay ( units ) ; begin
69616: LD_INT 0
69618: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69619: LD_ADDR_VAR 0 2
69623: PUSH
69624: LD_VAR 0 1
69628: PPUSH
69629: LD_INT 2
69631: PUSH
69632: LD_INT 34
69634: PUSH
69635: LD_INT 12
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 34
69644: PUSH
69645: LD_INT 51
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 34
69654: PUSH
69655: LD_INT 32
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 34
69664: PUSH
69665: LD_INT 89
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: PPUSH
69679: CALL_OW 72
69683: ST_TO_ADDR
// end ;
69684: LD_VAR 0 2
69688: RET
// export function Negate ( value ) ; begin
69689: LD_INT 0
69691: PPUSH
// result := not value ;
69692: LD_ADDR_VAR 0 2
69696: PUSH
69697: LD_VAR 0 1
69701: NOT
69702: ST_TO_ADDR
// end ;
69703: LD_VAR 0 2
69707: RET
// export function Inc ( value ) ; begin
69708: LD_INT 0
69710: PPUSH
// result := value + 1 ;
69711: LD_ADDR_VAR 0 2
69715: PUSH
69716: LD_VAR 0 1
69720: PUSH
69721: LD_INT 1
69723: PLUS
69724: ST_TO_ADDR
// end ;
69725: LD_VAR 0 2
69729: RET
// export function Dec ( value ) ; begin
69730: LD_INT 0
69732: PPUSH
// result := value - 1 ;
69733: LD_ADDR_VAR 0 2
69737: PUSH
69738: LD_VAR 0 1
69742: PUSH
69743: LD_INT 1
69745: MINUS
69746: ST_TO_ADDR
// end ;
69747: LD_VAR 0 2
69751: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69752: LD_INT 0
69754: PPUSH
69755: PPUSH
69756: PPUSH
69757: PPUSH
69758: PPUSH
69759: PPUSH
69760: PPUSH
69761: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69762: LD_VAR 0 1
69766: PPUSH
69767: LD_VAR 0 2
69771: PPUSH
69772: CALL_OW 488
69776: NOT
69777: IFTRUE 69796
69779: PUSH
69780: LD_VAR 0 3
69784: PPUSH
69785: LD_VAR 0 4
69789: PPUSH
69790: CALL_OW 488
69794: NOT
69795: OR
69796: IFFALSE 69809
// begin result := - 1 ;
69798: LD_ADDR_VAR 0 5
69802: PUSH
69803: LD_INT 1
69805: NEG
69806: ST_TO_ADDR
// exit ;
69807: GO 70044
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69809: LD_ADDR_VAR 0 12
69813: PUSH
69814: LD_VAR 0 1
69818: PPUSH
69819: LD_VAR 0 2
69823: PPUSH
69824: LD_VAR 0 3
69828: PPUSH
69829: LD_VAR 0 4
69833: PPUSH
69834: CALL 68880 0 4
69838: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69839: LD_ADDR_VAR 0 11
69843: PUSH
69844: LD_VAR 0 1
69848: PPUSH
69849: LD_VAR 0 2
69853: PPUSH
69854: LD_VAR 0 12
69858: PUSH
69859: LD_INT 1
69861: ARRAY
69862: PPUSH
69863: LD_VAR 0 12
69867: PUSH
69868: LD_INT 2
69870: ARRAY
69871: PPUSH
69872: CALL_OW 298
69876: ST_TO_ADDR
// distance := 9999 ;
69877: LD_ADDR_VAR 0 10
69881: PUSH
69882: LD_INT 9999
69884: ST_TO_ADDR
// for i := 0 to 5 do
69885: LD_ADDR_VAR 0 6
69889: PUSH
69890: DOUBLE
69891: LD_INT 0
69893: DEC
69894: ST_TO_ADDR
69895: LD_INT 5
69897: PUSH
69898: FOR_TO
69899: IFFALSE 70042
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69901: LD_ADDR_VAR 0 7
69905: PUSH
69906: LD_VAR 0 1
69910: PPUSH
69911: LD_VAR 0 6
69915: PPUSH
69916: LD_VAR 0 11
69920: PPUSH
69921: CALL_OW 272
69925: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69926: LD_ADDR_VAR 0 8
69930: PUSH
69931: LD_VAR 0 2
69935: PPUSH
69936: LD_VAR 0 6
69940: PPUSH
69941: LD_VAR 0 11
69945: PPUSH
69946: CALL_OW 273
69950: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69951: LD_VAR 0 7
69955: PPUSH
69956: LD_VAR 0 8
69960: PPUSH
69961: CALL_OW 488
69965: NOT
69966: IFFALSE 69970
// continue ;
69968: GO 69898
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69970: LD_ADDR_VAR 0 9
69974: PUSH
69975: LD_VAR 0 12
69979: PUSH
69980: LD_INT 1
69982: ARRAY
69983: PPUSH
69984: LD_VAR 0 12
69988: PUSH
69989: LD_INT 2
69991: ARRAY
69992: PPUSH
69993: LD_VAR 0 7
69997: PPUSH
69998: LD_VAR 0 8
70002: PPUSH
70003: CALL_OW 298
70007: ST_TO_ADDR
// if tmp < distance then
70008: LD_VAR 0 9
70012: PUSH
70013: LD_VAR 0 10
70017: LESS
70018: IFFALSE 70040
// begin result := i ;
70020: LD_ADDR_VAR 0 5
70024: PUSH
70025: LD_VAR 0 6
70029: ST_TO_ADDR
// distance := tmp ;
70030: LD_ADDR_VAR 0 10
70034: PUSH
70035: LD_VAR 0 9
70039: ST_TO_ADDR
// end ; end ;
70040: GO 69898
70042: POP
70043: POP
// end ;
70044: LD_VAR 0 5
70048: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70049: LD_INT 0
70051: PPUSH
70052: PPUSH
// if not driver or not IsInUnit ( driver ) then
70053: LD_VAR 0 1
70057: NOT
70058: IFTRUE 70072
70060: PUSH
70061: LD_VAR 0 1
70065: PPUSH
70066: CALL_OW 310
70070: NOT
70071: OR
70072: IFFALSE 70076
// exit ;
70074: GO 70166
// vehicle := IsInUnit ( driver ) ;
70076: LD_ADDR_VAR 0 3
70080: PUSH
70081: LD_VAR 0 1
70085: PPUSH
70086: CALL_OW 310
70090: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70091: LD_VAR 0 1
70095: PPUSH
70096: LD_STRING \
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: LD_INT 0
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: PUSH
70126: LD_STRING E
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: LD_INT 0
70134: PUSH
70135: LD_VAR 0 3
70139: PUSH
70140: LD_INT 0
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PPUSH
70162: CALL_OW 446
// end ;
70166: LD_VAR 0 2
70170: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70171: LD_INT 0
70173: PPUSH
70174: PPUSH
// if not driver or not IsInUnit ( driver ) then
70175: LD_VAR 0 1
70179: NOT
70180: IFTRUE 70194
70182: PUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 310
70192: NOT
70193: OR
70194: IFFALSE 70198
// exit ;
70196: GO 70288
// vehicle := IsInUnit ( driver ) ;
70198: LD_ADDR_VAR 0 3
70202: PUSH
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL_OW 310
70212: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70213: LD_VAR 0 1
70217: PPUSH
70218: LD_STRING \
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: LD_INT 0
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: PUSH
70248: LD_STRING E
70250: PUSH
70251: LD_INT 0
70253: PUSH
70254: LD_INT 0
70256: PUSH
70257: LD_VAR 0 3
70261: PUSH
70262: LD_INT 0
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PPUSH
70284: CALL_OW 447
// end ;
70288: LD_VAR 0 2
70292: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70293: LD_INT 0
70295: PPUSH
70296: PPUSH
70297: PPUSH
// tmp := [ ] ;
70298: LD_ADDR_VAR 0 5
70302: PUSH
70303: EMPTY
70304: ST_TO_ADDR
// for i in units do
70305: LD_ADDR_VAR 0 4
70309: PUSH
70310: LD_VAR 0 1
70314: PUSH
70315: FOR_IN
70316: IFFALSE 70354
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70318: LD_ADDR_VAR 0 5
70322: PUSH
70323: LD_VAR 0 5
70327: PPUSH
70328: LD_VAR 0 5
70332: PUSH
70333: LD_INT 1
70335: PLUS
70336: PPUSH
70337: LD_VAR 0 4
70341: PPUSH
70342: CALL_OW 256
70346: PPUSH
70347: CALL_OW 2
70351: ST_TO_ADDR
70352: GO 70315
70354: POP
70355: POP
// if not tmp then
70356: LD_VAR 0 5
70360: NOT
70361: IFFALSE 70365
// exit ;
70363: GO 70413
// if asc then
70365: LD_VAR 0 2
70369: IFFALSE 70393
// result := SortListByListAsc ( units , tmp ) else
70371: LD_ADDR_VAR 0 3
70375: PUSH
70376: LD_VAR 0 1
70380: PPUSH
70381: LD_VAR 0 5
70385: PPUSH
70386: CALL_OW 76
70390: ST_TO_ADDR
70391: GO 70413
// result := SortListByListDesc ( units , tmp ) ;
70393: LD_ADDR_VAR 0 3
70397: PUSH
70398: LD_VAR 0 1
70402: PPUSH
70403: LD_VAR 0 5
70407: PPUSH
70408: CALL_OW 77
70412: ST_TO_ADDR
// end ;
70413: LD_VAR 0 3
70417: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70418: LD_INT 0
70420: PPUSH
70421: PPUSH
// task := GetTaskList ( mech ) ;
70422: LD_ADDR_VAR 0 4
70426: PUSH
70427: LD_VAR 0 1
70431: PPUSH
70432: CALL_OW 437
70436: ST_TO_ADDR
// if not task then
70437: LD_VAR 0 4
70441: NOT
70442: IFFALSE 70446
// exit ;
70444: GO 70490
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70446: LD_ADDR_VAR 0 3
70450: PUSH
70451: LD_VAR 0 4
70455: PUSH
70456: LD_INT 1
70458: ARRAY
70459: PUSH
70460: LD_INT 1
70462: ARRAY
70463: PUSH
70464: LD_STRING r
70466: EQUAL
70467: IFFALSE 70489
70469: PUSH
70470: LD_VAR 0 4
70474: PUSH
70475: LD_INT 1
70477: ARRAY
70478: PUSH
70479: LD_INT 4
70481: ARRAY
70482: PUSH
70483: LD_VAR 0 2
70487: EQUAL
70488: AND
70489: ST_TO_ADDR
// end ;
70490: LD_VAR 0 3
70494: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70495: LD_INT 0
70497: PPUSH
// SetDir ( unit , d ) ;
70498: LD_VAR 0 1
70502: PPUSH
70503: LD_VAR 0 4
70507: PPUSH
70508: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70512: LD_ADDR_VAR 0 6
70516: PUSH
70517: LD_VAR 0 1
70521: PPUSH
70522: LD_VAR 0 2
70526: PPUSH
70527: LD_VAR 0 3
70531: PPUSH
70532: LD_VAR 0 5
70536: PPUSH
70537: CALL_OW 48
70541: ST_TO_ADDR
// end ;
70542: LD_VAR 0 6
70546: RET
// export function ToNaturalNumber ( number ) ; begin
70547: LD_INT 0
70549: PPUSH
// result := number div 1 ;
70550: LD_ADDR_VAR 0 2
70554: PUSH
70555: LD_VAR 0 1
70559: PUSH
70560: LD_INT 1
70562: DIV
70563: ST_TO_ADDR
// if number < 0 then
70564: LD_VAR 0 1
70568: PUSH
70569: LD_INT 0
70571: LESS
70572: IFFALSE 70582
// result := 0 ;
70574: LD_ADDR_VAR 0 2
70578: PUSH
70579: LD_INT 0
70581: ST_TO_ADDR
// end ;
70582: LD_VAR 0 2
70586: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70587: LD_INT 0
70589: PPUSH
70590: PPUSH
70591: PPUSH
// if not buildings then
70592: LD_VAR 0 1
70596: NOT
70597: IFFALSE 70601
// exit ;
70599: GO 70716
// tmp := [ ] ;
70601: LD_ADDR_VAR 0 5
70605: PUSH
70606: EMPTY
70607: ST_TO_ADDR
// for b in buildings do
70608: LD_ADDR_VAR 0 4
70612: PUSH
70613: LD_VAR 0 1
70617: PUSH
70618: FOR_IN
70619: IFFALSE 70657
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70621: LD_ADDR_VAR 0 5
70625: PUSH
70626: LD_VAR 0 5
70630: PPUSH
70631: LD_VAR 0 5
70635: PUSH
70636: LD_INT 1
70638: PLUS
70639: PPUSH
70640: LD_VAR 0 4
70644: PPUSH
70645: CALL_OW 266
70649: PPUSH
70650: CALL_OW 1
70654: ST_TO_ADDR
70655: GO 70618
70657: POP
70658: POP
// if not tmp then
70659: LD_VAR 0 5
70663: NOT
70664: IFFALSE 70668
// exit ;
70666: GO 70716
// if asc then
70668: LD_VAR 0 2
70672: IFFALSE 70696
// result := SortListByListAsc ( buildings , tmp ) else
70674: LD_ADDR_VAR 0 3
70678: PUSH
70679: LD_VAR 0 1
70683: PPUSH
70684: LD_VAR 0 5
70688: PPUSH
70689: CALL_OW 76
70693: ST_TO_ADDR
70694: GO 70716
// result := SortListByListDesc ( buildings , tmp ) ;
70696: LD_ADDR_VAR 0 3
70700: PUSH
70701: LD_VAR 0 1
70705: PPUSH
70706: LD_VAR 0 5
70710: PPUSH
70711: CALL_OW 77
70715: ST_TO_ADDR
// end ;
70716: LD_VAR 0 3
70720: RET
// export function SortByClass ( units , class ) ; var un ; begin
70721: LD_INT 0
70723: PPUSH
70724: PPUSH
// if not units or not class then
70725: LD_VAR 0 1
70729: NOT
70730: IFTRUE 70739
70732: PUSH
70733: LD_VAR 0 2
70737: NOT
70738: OR
70739: IFFALSE 70743
// exit ;
70741: GO 70838
// result := [ ] ;
70743: LD_ADDR_VAR 0 3
70747: PUSH
70748: EMPTY
70749: ST_TO_ADDR
// for un in units do
70750: LD_ADDR_VAR 0 4
70754: PUSH
70755: LD_VAR 0 1
70759: PUSH
70760: FOR_IN
70761: IFFALSE 70836
// if GetClass ( un ) = class then
70763: LD_VAR 0 4
70767: PPUSH
70768: CALL_OW 257
70772: PUSH
70773: LD_VAR 0 2
70777: EQUAL
70778: IFFALSE 70805
// result := Insert ( result , 1 , un ) else
70780: LD_ADDR_VAR 0 3
70784: PUSH
70785: LD_VAR 0 3
70789: PPUSH
70790: LD_INT 1
70792: PPUSH
70793: LD_VAR 0 4
70797: PPUSH
70798: CALL_OW 2
70802: ST_TO_ADDR
70803: GO 70834
// result := Replace ( result , result + 1 , un ) ;
70805: LD_ADDR_VAR 0 3
70809: PUSH
70810: LD_VAR 0 3
70814: PPUSH
70815: LD_VAR 0 3
70819: PUSH
70820: LD_INT 1
70822: PLUS
70823: PPUSH
70824: LD_VAR 0 4
70828: PPUSH
70829: CALL_OW 1
70833: ST_TO_ADDR
70834: GO 70760
70836: POP
70837: POP
// end ;
70838: LD_VAR 0 3
70842: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70843: LD_INT 0
70845: PPUSH
70846: PPUSH
70847: PPUSH
70848: PPUSH
70849: PPUSH
70850: PPUSH
70851: PPUSH
// result := [ ] ;
70852: LD_ADDR_VAR 0 4
70856: PUSH
70857: EMPTY
70858: ST_TO_ADDR
// if x - r < 0 then
70859: LD_VAR 0 1
70863: PUSH
70864: LD_VAR 0 3
70868: MINUS
70869: PUSH
70870: LD_INT 0
70872: LESS
70873: IFFALSE 70885
// min_x := 0 else
70875: LD_ADDR_VAR 0 8
70879: PUSH
70880: LD_INT 0
70882: ST_TO_ADDR
70883: GO 70901
// min_x := x - r ;
70885: LD_ADDR_VAR 0 8
70889: PUSH
70890: LD_VAR 0 1
70894: PUSH
70895: LD_VAR 0 3
70899: MINUS
70900: ST_TO_ADDR
// if y - r < 0 then
70901: LD_VAR 0 2
70905: PUSH
70906: LD_VAR 0 3
70910: MINUS
70911: PUSH
70912: LD_INT 0
70914: LESS
70915: IFFALSE 70927
// min_y := 0 else
70917: LD_ADDR_VAR 0 7
70921: PUSH
70922: LD_INT 0
70924: ST_TO_ADDR
70925: GO 70943
// min_y := y - r ;
70927: LD_ADDR_VAR 0 7
70931: PUSH
70932: LD_VAR 0 2
70936: PUSH
70937: LD_VAR 0 3
70941: MINUS
70942: ST_TO_ADDR
// max_x := x + r ;
70943: LD_ADDR_VAR 0 9
70947: PUSH
70948: LD_VAR 0 1
70952: PUSH
70953: LD_VAR 0 3
70957: PLUS
70958: ST_TO_ADDR
// max_y := y + r ;
70959: LD_ADDR_VAR 0 10
70963: PUSH
70964: LD_VAR 0 2
70968: PUSH
70969: LD_VAR 0 3
70973: PLUS
70974: ST_TO_ADDR
// for _x = min_x to max_x do
70975: LD_ADDR_VAR 0 5
70979: PUSH
70980: DOUBLE
70981: LD_VAR 0 8
70985: DEC
70986: ST_TO_ADDR
70987: LD_VAR 0 9
70991: PUSH
70992: FOR_TO
70993: IFFALSE 71094
// for _y = min_y to max_y do
70995: LD_ADDR_VAR 0 6
70999: PUSH
71000: DOUBLE
71001: LD_VAR 0 7
71005: DEC
71006: ST_TO_ADDR
71007: LD_VAR 0 10
71011: PUSH
71012: FOR_TO
71013: IFFALSE 71090
// begin if not ValidHex ( _x , _y ) then
71015: LD_VAR 0 5
71019: PPUSH
71020: LD_VAR 0 6
71024: PPUSH
71025: CALL_OW 488
71029: NOT
71030: IFFALSE 71034
// continue ;
71032: GO 71012
// if GetResourceTypeXY ( _x , _y ) then
71034: LD_VAR 0 5
71038: PPUSH
71039: LD_VAR 0 6
71043: PPUSH
71044: CALL_OW 283
71048: IFFALSE 71088
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71050: LD_ADDR_VAR 0 4
71054: PUSH
71055: LD_VAR 0 4
71059: PPUSH
71060: LD_VAR 0 4
71064: PUSH
71065: LD_INT 1
71067: PLUS
71068: PPUSH
71069: LD_VAR 0 5
71073: PUSH
71074: LD_VAR 0 6
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PPUSH
71083: CALL_OW 1
71087: ST_TO_ADDR
// end ;
71088: GO 71012
71090: POP
71091: POP
71092: GO 70992
71094: POP
71095: POP
// end ;
71096: LD_VAR 0 4
71100: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71101: LD_INT 0
71103: PPUSH
71104: PPUSH
71105: PPUSH
71106: PPUSH
71107: PPUSH
71108: PPUSH
71109: PPUSH
71110: PPUSH
// if not units then
71111: LD_VAR 0 1
71115: NOT
71116: IFFALSE 71120
// exit ;
71118: GO 71652
// result := UnitFilter ( units , [ f_ok ] ) ;
71120: LD_ADDR_VAR 0 3
71124: PUSH
71125: LD_VAR 0 1
71129: PPUSH
71130: LD_INT 50
71132: PUSH
71133: EMPTY
71134: LIST
71135: PPUSH
71136: CALL_OW 72
71140: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71141: LD_ADDR_VAR 0 8
71145: PUSH
71146: LD_VAR 0 1
71150: PUSH
71151: LD_INT 1
71153: ARRAY
71154: PPUSH
71155: CALL_OW 255
71159: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71160: LD_ADDR_VAR 0 10
71164: PUSH
71165: LD_INT 29
71167: PUSH
71168: LD_INT 91
71170: PUSH
71171: LD_INT 49
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: LIST
71178: ST_TO_ADDR
// if not result then
71179: LD_VAR 0 3
71183: NOT
71184: IFFALSE 71188
// exit ;
71186: GO 71652
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71188: LD_ADDR_VAR 0 5
71192: PUSH
71193: LD_INT 81
71195: PUSH
71196: LD_VAR 0 8
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PPUSH
71205: CALL_OW 69
71209: ST_TO_ADDR
// for i in result do
71210: LD_ADDR_VAR 0 4
71214: PUSH
71215: LD_VAR 0 3
71219: PUSH
71220: FOR_IN
71221: IFFALSE 71650
// begin tag := GetTag ( i ) + 1 ;
71223: LD_ADDR_VAR 0 9
71227: PUSH
71228: LD_VAR 0 4
71232: PPUSH
71233: CALL_OW 110
71237: PUSH
71238: LD_INT 1
71240: PLUS
71241: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71242: LD_ADDR_VAR 0 7
71246: PUSH
71247: LD_VAR 0 4
71251: PPUSH
71252: CALL_OW 250
71256: PPUSH
71257: LD_VAR 0 4
71261: PPUSH
71262: CALL_OW 251
71266: PPUSH
71267: LD_INT 4
71269: PPUSH
71270: CALL 70843 0 3
71274: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71275: LD_VAR 0 4
71279: PPUSH
71280: CALL_OW 247
71284: PUSH
71285: LD_INT 2
71287: EQUAL
71288: IFFALSE 71300
71290: PUSH
71291: LD_VAR 0 7
71295: PUSH
71296: LD_INT 2
71298: GREATER
71299: AND
71300: IFFALSE 71320
71302: PUSH
71303: LD_VAR 0 4
71307: PPUSH
71308: CALL_OW 264
71312: PUSH
71313: LD_VAR 0 10
71317: IN
71318: NOT
71319: AND
71320: IFFALSE 71359
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71322: LD_VAR 0 4
71326: PPUSH
71327: LD_VAR 0 7
71331: PUSH
71332: LD_INT 1
71334: ARRAY
71335: PUSH
71336: LD_INT 1
71338: ARRAY
71339: PPUSH
71340: LD_VAR 0 7
71344: PUSH
71345: LD_INT 1
71347: ARRAY
71348: PUSH
71349: LD_INT 2
71351: ARRAY
71352: PPUSH
71353: CALL_OW 116
71357: GO 71648
// if path > tag then
71359: LD_VAR 0 2
71363: PUSH
71364: LD_VAR 0 9
71368: GREATER
71369: IFFALSE 71577
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71371: LD_ADDR_VAR 0 6
71375: PUSH
71376: LD_VAR 0 5
71380: PPUSH
71381: LD_INT 91
71383: PUSH
71384: LD_VAR 0 4
71388: PUSH
71389: LD_INT 8
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: LIST
71396: PPUSH
71397: CALL_OW 72
71401: ST_TO_ADDR
// if nearEnemy then
71402: LD_VAR 0 6
71406: IFFALSE 71475
// begin if GetWeapon ( i ) = ru_time_lapser then
71408: LD_VAR 0 4
71412: PPUSH
71413: CALL_OW 264
71417: PUSH
71418: LD_INT 49
71420: EQUAL
71421: IFFALSE 71449
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71423: LD_VAR 0 4
71427: PPUSH
71428: LD_VAR 0 6
71432: PPUSH
71433: LD_VAR 0 4
71437: PPUSH
71438: CALL_OW 74
71442: PPUSH
71443: CALL_OW 112
71447: GO 71473
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71449: LD_VAR 0 4
71453: PPUSH
71454: LD_VAR 0 6
71458: PPUSH
71459: LD_VAR 0 4
71463: PPUSH
71464: CALL_OW 74
71468: PPUSH
71469: CALL 72733 0 2
// end else
71473: GO 71575
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71475: LD_VAR 0 4
71479: PPUSH
71480: LD_VAR 0 2
71484: PUSH
71485: LD_VAR 0 9
71489: ARRAY
71490: PUSH
71491: LD_INT 1
71493: ARRAY
71494: PPUSH
71495: LD_VAR 0 2
71499: PUSH
71500: LD_VAR 0 9
71504: ARRAY
71505: PUSH
71506: LD_INT 2
71508: ARRAY
71509: PPUSH
71510: CALL_OW 297
71514: PUSH
71515: LD_INT 6
71517: GREATER
71518: IFFALSE 71561
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71520: LD_VAR 0 4
71524: PPUSH
71525: LD_VAR 0 2
71529: PUSH
71530: LD_VAR 0 9
71534: ARRAY
71535: PUSH
71536: LD_INT 1
71538: ARRAY
71539: PPUSH
71540: LD_VAR 0 2
71544: PUSH
71545: LD_VAR 0 9
71549: ARRAY
71550: PUSH
71551: LD_INT 2
71553: ARRAY
71554: PPUSH
71555: CALL_OW 114
71559: GO 71575
// SetTag ( i , tag ) ;
71561: LD_VAR 0 4
71565: PPUSH
71566: LD_VAR 0 9
71570: PPUSH
71571: CALL_OW 109
// end else
71575: GO 71648
// if enemy then
71577: LD_VAR 0 5
71581: IFFALSE 71648
// begin if GetWeapon ( i ) = ru_time_lapser then
71583: LD_VAR 0 4
71587: PPUSH
71588: CALL_OW 264
71592: PUSH
71593: LD_INT 49
71595: EQUAL
71596: IFFALSE 71624
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71598: LD_VAR 0 4
71602: PPUSH
71603: LD_VAR 0 5
71607: PPUSH
71608: LD_VAR 0 4
71612: PPUSH
71613: CALL_OW 74
71617: PPUSH
71618: CALL_OW 112
71622: GO 71648
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71624: LD_VAR 0 4
71628: PPUSH
71629: LD_VAR 0 5
71633: PPUSH
71634: LD_VAR 0 4
71638: PPUSH
71639: CALL_OW 74
71643: PPUSH
71644: CALL 72733 0 2
// end ; end ;
71648: GO 71220
71650: POP
71651: POP
// end ;
71652: LD_VAR 0 3
71656: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71657: LD_INT 0
71659: PPUSH
71660: PPUSH
71661: PPUSH
// if not unit or IsInUnit ( unit ) then
71662: LD_VAR 0 1
71666: NOT
71667: IFTRUE 71680
71669: PUSH
71670: LD_VAR 0 1
71674: PPUSH
71675: CALL_OW 310
71679: OR
71680: IFFALSE 71684
// exit ;
71682: GO 71775
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71684: LD_ADDR_VAR 0 4
71688: PUSH
71689: LD_VAR 0 1
71693: PPUSH
71694: CALL_OW 250
71698: PPUSH
71699: LD_VAR 0 2
71703: PPUSH
71704: LD_INT 1
71706: PPUSH
71707: CALL_OW 272
71711: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71712: LD_ADDR_VAR 0 5
71716: PUSH
71717: LD_VAR 0 1
71721: PPUSH
71722: CALL_OW 251
71726: PPUSH
71727: LD_VAR 0 2
71731: PPUSH
71732: LD_INT 1
71734: PPUSH
71735: CALL_OW 273
71739: ST_TO_ADDR
// if ValidHex ( x , y ) then
71740: LD_VAR 0 4
71744: PPUSH
71745: LD_VAR 0 5
71749: PPUSH
71750: CALL_OW 488
71754: IFFALSE 71775
// ComTurnXY ( unit , x , y ) ;
71756: LD_VAR 0 1
71760: PPUSH
71761: LD_VAR 0 4
71765: PPUSH
71766: LD_VAR 0 5
71770: PPUSH
71771: CALL_OW 118
// end ;
71775: LD_VAR 0 3
71779: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71780: LD_INT 0
71782: PPUSH
71783: PPUSH
// result := false ;
71784: LD_ADDR_VAR 0 3
71788: PUSH
71789: LD_INT 0
71791: ST_TO_ADDR
// if not units then
71792: LD_VAR 0 2
71796: NOT
71797: IFFALSE 71801
// exit ;
71799: GO 71846
// for i in units do
71801: LD_ADDR_VAR 0 4
71805: PUSH
71806: LD_VAR 0 2
71810: PUSH
71811: FOR_IN
71812: IFFALSE 71844
// if See ( side , i ) then
71814: LD_VAR 0 1
71818: PPUSH
71819: LD_VAR 0 4
71823: PPUSH
71824: CALL_OW 292
71828: IFFALSE 71842
// begin result := true ;
71830: LD_ADDR_VAR 0 3
71834: PUSH
71835: LD_INT 1
71837: ST_TO_ADDR
// exit ;
71838: POP
71839: POP
71840: GO 71846
// end ;
71842: GO 71811
71844: POP
71845: POP
// end ;
71846: LD_VAR 0 3
71850: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71851: LD_INT 0
71853: PPUSH
71854: PPUSH
71855: PPUSH
71856: PPUSH
// if not unit or not points then
71857: LD_VAR 0 1
71861: NOT
71862: IFTRUE 71871
71864: PUSH
71865: LD_VAR 0 2
71869: NOT
71870: OR
71871: IFFALSE 71875
// exit ;
71873: GO 71965
// dist := 99999 ;
71875: LD_ADDR_VAR 0 5
71879: PUSH
71880: LD_INT 99999
71882: ST_TO_ADDR
// for i in points do
71883: LD_ADDR_VAR 0 4
71887: PUSH
71888: LD_VAR 0 2
71892: PUSH
71893: FOR_IN
71894: IFFALSE 71963
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71896: LD_ADDR_VAR 0 6
71900: PUSH
71901: LD_VAR 0 1
71905: PPUSH
71906: LD_VAR 0 4
71910: PUSH
71911: LD_INT 1
71913: ARRAY
71914: PPUSH
71915: LD_VAR 0 4
71919: PUSH
71920: LD_INT 2
71922: ARRAY
71923: PPUSH
71924: CALL_OW 297
71928: ST_TO_ADDR
// if tmpDist < dist then
71929: LD_VAR 0 6
71933: PUSH
71934: LD_VAR 0 5
71938: LESS
71939: IFFALSE 71961
// begin result := i ;
71941: LD_ADDR_VAR 0 3
71945: PUSH
71946: LD_VAR 0 4
71950: ST_TO_ADDR
// dist := tmpDist ;
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: LD_VAR 0 6
71960: ST_TO_ADDR
// end ; end ;
71961: GO 71893
71963: POP
71964: POP
// end ;
71965: LD_VAR 0 3
71969: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71970: LD_INT 0
71972: PPUSH
// uc_side := side ;
71973: LD_ADDR_OWVAR 20
71977: PUSH
71978: LD_VAR 0 1
71982: ST_TO_ADDR
// uc_nation := 3 ;
71983: LD_ADDR_OWVAR 21
71987: PUSH
71988: LD_INT 3
71990: ST_TO_ADDR
// vc_chassis := 25 ;
71991: LD_ADDR_OWVAR 37
71995: PUSH
71996: LD_INT 25
71998: ST_TO_ADDR
// vc_engine := engine_siberite ;
71999: LD_ADDR_OWVAR 39
72003: PUSH
72004: LD_INT 3
72006: ST_TO_ADDR
// vc_control := control_computer ;
72007: LD_ADDR_OWVAR 38
72011: PUSH
72012: LD_INT 3
72014: ST_TO_ADDR
// vc_weapon := 59 ;
72015: LD_ADDR_OWVAR 40
72019: PUSH
72020: LD_INT 59
72022: ST_TO_ADDR
// result := CreateVehicle ;
72023: LD_ADDR_VAR 0 5
72027: PUSH
72028: CALL_OW 45
72032: ST_TO_ADDR
// SetDir ( result , d ) ;
72033: LD_VAR 0 5
72037: PPUSH
72038: LD_VAR 0 4
72042: PPUSH
72043: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72047: LD_VAR 0 5
72051: PPUSH
72052: LD_VAR 0 2
72056: PPUSH
72057: LD_VAR 0 3
72061: PPUSH
72062: LD_INT 0
72064: PPUSH
72065: CALL_OW 48
// end ;
72069: LD_VAR 0 5
72073: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72074: LD_INT 0
72076: PPUSH
72077: PPUSH
72078: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72079: LD_ADDR_VAR 0 2
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72102: LD_VAR 0 1
72106: NOT
72107: IFTRUE 72140
72109: PUSH
72110: LD_VAR 0 1
72114: PPUSH
72115: CALL_OW 264
72119: PUSH
72120: LD_INT 12
72122: PUSH
72123: LD_INT 51
72125: PUSH
72126: LD_INT 32
72128: PUSH
72129: LD_INT 89
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: IN
72138: NOT
72139: OR
72140: IFFALSE 72144
// exit ;
72142: GO 72242
// for i := 1 to 3 do
72144: LD_ADDR_VAR 0 3
72148: PUSH
72149: DOUBLE
72150: LD_INT 1
72152: DEC
72153: ST_TO_ADDR
72154: LD_INT 3
72156: PUSH
72157: FOR_TO
72158: IFFALSE 72240
// begin tmp := GetCargo ( cargo , i ) ;
72160: LD_ADDR_VAR 0 4
72164: PUSH
72165: LD_VAR 0 1
72169: PPUSH
72170: LD_VAR 0 3
72174: PPUSH
72175: CALL_OW 289
72179: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72180: LD_ADDR_VAR 0 2
72184: PUSH
72185: LD_VAR 0 2
72189: PPUSH
72190: LD_VAR 0 3
72194: PPUSH
72195: LD_VAR 0 4
72199: PPUSH
72200: CALL_OW 1
72204: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72205: LD_ADDR_VAR 0 2
72209: PUSH
72210: LD_VAR 0 2
72214: PPUSH
72215: LD_INT 4
72217: PPUSH
72218: LD_VAR 0 2
72222: PUSH
72223: LD_INT 4
72225: ARRAY
72226: PUSH
72227: LD_VAR 0 4
72231: PLUS
72232: PPUSH
72233: CALL_OW 1
72237: ST_TO_ADDR
// end ;
72238: GO 72157
72240: POP
72241: POP
// end ;
72242: LD_VAR 0 2
72246: RET
// export function Length ( array ) ; begin
72247: LD_INT 0
72249: PPUSH
// result := array + 0 ;
72250: LD_ADDR_VAR 0 2
72254: PUSH
72255: LD_VAR 0 1
72259: PUSH
72260: LD_INT 0
72262: PLUS
72263: ST_TO_ADDR
// end ;
72264: LD_VAR 0 2
72268: RET
// export function PrepareArray ( array ) ; begin
72269: LD_INT 0
72271: PPUSH
// result := array diff 0 ;
72272: LD_ADDR_VAR 0 2
72276: PUSH
72277: LD_VAR 0 1
72281: PUSH
72282: LD_INT 0
72284: DIFF
72285: ST_TO_ADDR
// if not result [ 1 ] then
72286: LD_VAR 0 2
72290: PUSH
72291: LD_INT 1
72293: ARRAY
72294: NOT
72295: IFFALSE 72315
// result := Delete ( result , 1 ) ;
72297: LD_ADDR_VAR 0 2
72301: PUSH
72302: LD_VAR 0 2
72306: PPUSH
72307: LD_INT 1
72309: PPUSH
72310: CALL_OW 3
72314: ST_TO_ADDR
// end ;
72315: LD_VAR 0 2
72319: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72320: LD_INT 0
72322: PPUSH
72323: PPUSH
72324: PPUSH
72325: PPUSH
// sibRocketRange := 25 ;
72326: LD_ADDR_VAR 0 6
72330: PUSH
72331: LD_INT 25
72333: ST_TO_ADDR
// result := false ;
72334: LD_ADDR_VAR 0 4
72338: PUSH
72339: LD_INT 0
72341: ST_TO_ADDR
// for i := 0 to 5 do
72342: LD_ADDR_VAR 0 5
72346: PUSH
72347: DOUBLE
72348: LD_INT 0
72350: DEC
72351: ST_TO_ADDR
72352: LD_INT 5
72354: PUSH
72355: FOR_TO
72356: IFFALSE 72423
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72358: LD_VAR 0 1
72362: PPUSH
72363: LD_VAR 0 5
72367: PPUSH
72368: LD_VAR 0 6
72372: PPUSH
72373: CALL_OW 272
72377: PPUSH
72378: LD_VAR 0 2
72382: PPUSH
72383: LD_VAR 0 5
72387: PPUSH
72388: LD_VAR 0 6
72392: PPUSH
72393: CALL_OW 273
72397: PPUSH
72398: LD_VAR 0 3
72402: PPUSH
72403: CALL_OW 309
72407: IFFALSE 72421
// begin result := true ;
72409: LD_ADDR_VAR 0 4
72413: PUSH
72414: LD_INT 1
72416: ST_TO_ADDR
// exit ;
72417: POP
72418: POP
72419: GO 72425
// end ;
72421: GO 72355
72423: POP
72424: POP
// end ;
72425: LD_VAR 0 4
72429: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72430: LD_INT 0
72432: PPUSH
72433: PPUSH
72434: PPUSH
// if btype = b_depot then
72435: LD_VAR 0 2
72439: PUSH
72440: LD_INT 0
72442: EQUAL
72443: IFFALSE 72455
// begin result := true ;
72445: LD_ADDR_VAR 0 3
72449: PUSH
72450: LD_INT 1
72452: ST_TO_ADDR
// exit ;
72453: GO 72575
// end ; pom := GetBase ( depot ) ;
72455: LD_ADDR_VAR 0 4
72459: PUSH
72460: LD_VAR 0 1
72464: PPUSH
72465: CALL_OW 274
72469: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72470: LD_ADDR_VAR 0 5
72474: PUSH
72475: LD_VAR 0 2
72479: PPUSH
72480: LD_VAR 0 1
72484: PPUSH
72485: CALL_OW 248
72489: PPUSH
72490: CALL_OW 450
72494: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72495: LD_ADDR_VAR 0 3
72499: PUSH
72500: LD_VAR 0 4
72504: PPUSH
72505: LD_INT 1
72507: PPUSH
72508: CALL_OW 275
72512: PUSH
72513: LD_VAR 0 5
72517: PUSH
72518: LD_INT 1
72520: ARRAY
72521: GREATEREQUAL
72522: IFFALSE 72548
72524: PUSH
72525: LD_VAR 0 4
72529: PPUSH
72530: LD_INT 2
72532: PPUSH
72533: CALL_OW 275
72537: PUSH
72538: LD_VAR 0 5
72542: PUSH
72543: LD_INT 2
72545: ARRAY
72546: GREATEREQUAL
72547: AND
72548: IFFALSE 72574
72550: PUSH
72551: LD_VAR 0 4
72555: PPUSH
72556: LD_INT 3
72558: PPUSH
72559: CALL_OW 275
72563: PUSH
72564: LD_VAR 0 5
72568: PUSH
72569: LD_INT 3
72571: ARRAY
72572: GREATEREQUAL
72573: AND
72574: ST_TO_ADDR
// end ;
72575: LD_VAR 0 3
72579: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72580: LD_INT 0
72582: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72583: LD_VAR 0 1
72587: PPUSH
72588: LD_VAR 0 2
72592: PPUSH
72593: LD_INT 0
72595: PPUSH
72596: LD_INT 0
72598: PPUSH
72599: LD_INT 1
72601: PPUSH
72602: LD_INT 0
72604: PPUSH
72605: CALL_OW 587
// end ;
72609: LD_VAR 0 3
72613: RET
// export function CenterOnNow ( unit ) ; begin
72614: LD_INT 0
72616: PPUSH
// result := IsInUnit ( unit ) ;
72617: LD_ADDR_VAR 0 2
72621: PUSH
72622: LD_VAR 0 1
72626: PPUSH
72627: CALL_OW 310
72631: ST_TO_ADDR
// if not result then
72632: LD_VAR 0 2
72636: NOT
72637: IFFALSE 72649
// result := unit ;
72639: LD_ADDR_VAR 0 2
72643: PUSH
72644: LD_VAR 0 1
72648: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72649: LD_VAR 0 1
72653: PPUSH
72654: CALL_OW 87
// end ;
72658: LD_VAR 0 2
72662: RET
// export function ComMoveHex ( unit , hex ) ; begin
72663: LD_INT 0
72665: PPUSH
// if not hex then
72666: LD_VAR 0 2
72670: NOT
72671: IFFALSE 72675
// exit ;
72673: GO 72728
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72675: LD_VAR 0 2
72679: PUSH
72680: LD_INT 1
72682: ARRAY
72683: PPUSH
72684: LD_VAR 0 2
72688: PUSH
72689: LD_INT 2
72691: ARRAY
72692: PPUSH
72693: CALL_OW 428
72697: IFFALSE 72701
// exit ;
72699: GO 72728
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72701: LD_VAR 0 1
72705: PPUSH
72706: LD_VAR 0 2
72710: PUSH
72711: LD_INT 1
72713: ARRAY
72714: PPUSH
72715: LD_VAR 0 2
72719: PUSH
72720: LD_INT 2
72722: ARRAY
72723: PPUSH
72724: CALL_OW 111
// end ;
72728: LD_VAR 0 3
72732: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72733: LD_INT 0
72735: PPUSH
72736: PPUSH
72737: PPUSH
// if not unit or not enemy then
72738: LD_VAR 0 1
72742: NOT
72743: IFTRUE 72752
72745: PUSH
72746: LD_VAR 0 2
72750: NOT
72751: OR
72752: IFFALSE 72756
// exit ;
72754: GO 72882
// x := GetX ( enemy ) ;
72756: LD_ADDR_VAR 0 4
72760: PUSH
72761: LD_VAR 0 2
72765: PPUSH
72766: CALL_OW 250
72770: ST_TO_ADDR
// y := GetY ( enemy ) ;
72771: LD_ADDR_VAR 0 5
72775: PUSH
72776: LD_VAR 0 2
72780: PPUSH
72781: CALL_OW 251
72785: ST_TO_ADDR
// if ValidHex ( x , y ) then
72786: LD_VAR 0 4
72790: PPUSH
72791: LD_VAR 0 5
72795: PPUSH
72796: CALL_OW 488
72800: IFFALSE 72882
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72802: LD_VAR 0 2
72806: PPUSH
72807: CALL_OW 247
72811: PUSH
72812: LD_INT 3
72814: PUSH
72815: LD_INT 2
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: IN
72822: IFTRUE 72845
72824: PUSH
72825: LD_VAR 0 1
72829: PPUSH
72830: CALL_OW 255
72834: PPUSH
72835: LD_VAR 0 2
72839: PPUSH
72840: CALL_OW 292
72844: OR
72845: IFFALSE 72863
// ComAttackUnit ( unit , enemy ) else
72847: LD_VAR 0 1
72851: PPUSH
72852: LD_VAR 0 2
72856: PPUSH
72857: CALL_OW 115
72861: GO 72882
// ComAgressiveMove ( unit , x , y ) ;
72863: LD_VAR 0 1
72867: PPUSH
72868: LD_VAR 0 4
72872: PPUSH
72873: LD_VAR 0 5
72877: PPUSH
72878: CALL_OW 114
// end ;
72882: LD_VAR 0 3
72886: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72887: LD_INT 0
72889: PPUSH
72890: PPUSH
72891: PPUSH
// list := AreaToList ( area , 0 ) ;
72892: LD_ADDR_VAR 0 5
72896: PUSH
72897: LD_VAR 0 1
72901: PPUSH
72902: LD_INT 0
72904: PPUSH
72905: CALL_OW 517
72909: ST_TO_ADDR
// if not list then
72910: LD_VAR 0 5
72914: NOT
72915: IFFALSE 72919
// exit ;
72917: GO 73049
// if all then
72919: LD_VAR 0 2
72923: IFFALSE 73011
// begin for i := 1 to list [ 1 ] do
72925: LD_ADDR_VAR 0 4
72929: PUSH
72930: DOUBLE
72931: LD_INT 1
72933: DEC
72934: ST_TO_ADDR
72935: LD_VAR 0 5
72939: PUSH
72940: LD_INT 1
72942: ARRAY
72943: PUSH
72944: FOR_TO
72945: IFFALSE 73007
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72947: LD_ADDR_VAR 0 3
72951: PUSH
72952: LD_VAR 0 3
72956: PPUSH
72957: LD_VAR 0 3
72961: PUSH
72962: LD_INT 1
72964: PLUS
72965: PPUSH
72966: LD_VAR 0 5
72970: PUSH
72971: LD_INT 1
72973: ARRAY
72974: PUSH
72975: LD_VAR 0 4
72979: ARRAY
72980: PUSH
72981: LD_VAR 0 5
72985: PUSH
72986: LD_INT 2
72988: ARRAY
72989: PUSH
72990: LD_VAR 0 4
72994: ARRAY
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PPUSH
73000: CALL_OW 1
73004: ST_TO_ADDR
73005: GO 72944
73007: POP
73008: POP
// exit ;
73009: GO 73049
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73011: LD_ADDR_VAR 0 3
73015: PUSH
73016: LD_VAR 0 5
73020: PUSH
73021: LD_INT 1
73023: ARRAY
73024: PUSH
73025: LD_INT 1
73027: ARRAY
73028: PUSH
73029: LD_VAR 0 5
73033: PUSH
73034: LD_INT 2
73036: ARRAY
73037: PUSH
73038: LD_INT 1
73040: ARRAY
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: EMPTY
73047: LIST
73048: ST_TO_ADDR
// end ;
73049: LD_VAR 0 3
73053: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73054: LD_INT 0
73056: PPUSH
73057: PPUSH
// list := AreaToList ( area , 0 ) ;
73058: LD_ADDR_VAR 0 4
73062: PUSH
73063: LD_VAR 0 1
73067: PPUSH
73068: LD_INT 0
73070: PPUSH
73071: CALL_OW 517
73075: ST_TO_ADDR
// if not list then
73076: LD_VAR 0 4
73080: NOT
73081: IFFALSE 73085
// exit ;
73083: GO 73126
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73085: LD_ADDR_VAR 0 3
73089: PUSH
73090: LD_VAR 0 4
73094: PUSH
73095: LD_INT 1
73097: ARRAY
73098: PUSH
73099: LD_INT 1
73101: ARRAY
73102: PUSH
73103: LD_VAR 0 4
73107: PUSH
73108: LD_INT 2
73110: ARRAY
73111: PUSH
73112: LD_INT 1
73114: ARRAY
73115: PUSH
73116: LD_VAR 0 2
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: LIST
73125: ST_TO_ADDR
// end ;
73126: LD_VAR 0 3
73130: RET
// export function First ( array ) ; begin
73131: LD_INT 0
73133: PPUSH
// if not array then
73134: LD_VAR 0 1
73138: NOT
73139: IFFALSE 73143
// exit ;
73141: GO 73157
// result := array [ 1 ] ;
73143: LD_ADDR_VAR 0 2
73147: PUSH
73148: LD_VAR 0 1
73152: PUSH
73153: LD_INT 1
73155: ARRAY
73156: ST_TO_ADDR
// end ;
73157: LD_VAR 0 2
73161: RET
// export function Last ( array ) ; begin
73162: LD_INT 0
73164: PPUSH
// if not array then
73165: LD_VAR 0 1
73169: NOT
73170: IFFALSE 73174
// exit ;
73172: GO 73190
// result := array [ array ] ;
73174: LD_ADDR_VAR 0 2
73178: PUSH
73179: LD_VAR 0 1
73183: PUSH
73184: LD_VAR 0 1
73188: ARRAY
73189: ST_TO_ADDR
// end ;
73190: LD_VAR 0 2
73194: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73195: LD_INT 0
73197: PPUSH
73198: PPUSH
// result := [ ] ;
73199: LD_ADDR_VAR 0 5
73203: PUSH
73204: EMPTY
73205: ST_TO_ADDR
// if not array then
73206: LD_VAR 0 1
73210: NOT
73211: IFFALSE 73215
// exit ;
73213: GO 73327
// for i := 1 to array do
73215: LD_ADDR_VAR 0 6
73219: PUSH
73220: DOUBLE
73221: LD_INT 1
73223: DEC
73224: ST_TO_ADDR
73225: LD_VAR 0 1
73229: PUSH
73230: FOR_TO
73231: IFFALSE 73325
// if array [ i ] [ index ] = value then
73233: LD_VAR 0 1
73237: PUSH
73238: LD_VAR 0 6
73242: ARRAY
73243: PUSH
73244: LD_VAR 0 2
73248: ARRAY
73249: PUSH
73250: LD_VAR 0 3
73254: EQUAL
73255: IFFALSE 73323
// begin if indexColumn then
73257: LD_VAR 0 4
73261: IFFALSE 73297
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73263: LD_ADDR_VAR 0 5
73267: PUSH
73268: LD_VAR 0 5
73272: PPUSH
73273: LD_VAR 0 1
73277: PUSH
73278: LD_VAR 0 6
73282: ARRAY
73283: PUSH
73284: LD_VAR 0 4
73288: ARRAY
73289: PPUSH
73290: CALL 68335 0 2
73294: ST_TO_ADDR
73295: GO 73323
// result := Join ( result , array [ i ] ) ;
73297: LD_ADDR_VAR 0 5
73301: PUSH
73302: LD_VAR 0 5
73306: PPUSH
73307: LD_VAR 0 1
73311: PUSH
73312: LD_VAR 0 6
73316: ARRAY
73317: PPUSH
73318: CALL 68335 0 2
73322: ST_TO_ADDR
// end ;
73323: GO 73230
73325: POP
73326: POP
// end ;
73327: LD_VAR 0 5
73331: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73332: LD_INT 0
73334: PPUSH
// if not vehicles or not parkingPoint then
73335: LD_VAR 0 1
73339: NOT
73340: IFTRUE 73349
73342: PUSH
73343: LD_VAR 0 2
73347: NOT
73348: OR
73349: IFFALSE 73353
// exit ;
73351: GO 73451
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73353: LD_ADDR_VAR 0 1
73357: PUSH
73358: LD_VAR 0 1
73362: PPUSH
73363: LD_INT 50
73365: PUSH
73366: EMPTY
73367: LIST
73368: PUSH
73369: LD_INT 3
73371: PUSH
73372: LD_INT 92
73374: PUSH
73375: LD_VAR 0 2
73379: PUSH
73380: LD_INT 1
73382: ARRAY
73383: PUSH
73384: LD_VAR 0 2
73388: PUSH
73389: LD_INT 2
73391: ARRAY
73392: PUSH
73393: LD_INT 8
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PPUSH
73410: CALL_OW 72
73414: ST_TO_ADDR
// if not vehicles then
73415: LD_VAR 0 1
73419: NOT
73420: IFFALSE 73424
// exit ;
73422: GO 73451
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73424: LD_VAR 0 1
73428: PPUSH
73429: LD_VAR 0 2
73433: PUSH
73434: LD_INT 1
73436: ARRAY
73437: PPUSH
73438: LD_VAR 0 2
73442: PUSH
73443: LD_INT 2
73445: ARRAY
73446: PPUSH
73447: CALL_OW 111
// end ;
73451: LD_VAR 0 3
73455: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73456: LD_INT 0
73458: PPUSH
73459: PPUSH
73460: PPUSH
// if not side or not area then
73461: LD_VAR 0 1
73465: NOT
73466: IFTRUE 73475
73468: PUSH
73469: LD_VAR 0 2
73473: NOT
73474: OR
73475: IFFALSE 73479
// exit ;
73477: GO 73598
// tmp := AreaToList ( area , 0 ) ;
73479: LD_ADDR_VAR 0 5
73483: PUSH
73484: LD_VAR 0 2
73488: PPUSH
73489: LD_INT 0
73491: PPUSH
73492: CALL_OW 517
73496: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73497: LD_ADDR_VAR 0 4
73501: PUSH
73502: DOUBLE
73503: LD_INT 1
73505: DEC
73506: ST_TO_ADDR
73507: LD_VAR 0 5
73511: PUSH
73512: LD_INT 1
73514: ARRAY
73515: PUSH
73516: FOR_TO
73517: IFFALSE 73596
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73519: LD_VAR 0 5
73523: PUSH
73524: LD_INT 1
73526: ARRAY
73527: PUSH
73528: LD_VAR 0 4
73532: ARRAY
73533: PPUSH
73534: LD_VAR 0 5
73538: PUSH
73539: LD_INT 2
73541: ARRAY
73542: PUSH
73543: LD_VAR 0 4
73547: ARRAY
73548: PPUSH
73549: CALL_OW 351
73553: IFFALSE 73594
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73555: LD_VAR 0 5
73559: PUSH
73560: LD_INT 1
73562: ARRAY
73563: PUSH
73564: LD_VAR 0 4
73568: ARRAY
73569: PPUSH
73570: LD_VAR 0 5
73574: PUSH
73575: LD_INT 2
73577: ARRAY
73578: PUSH
73579: LD_VAR 0 4
73583: ARRAY
73584: PPUSH
73585: LD_VAR 0 1
73589: PPUSH
73590: CALL_OW 244
// end ;
73594: GO 73516
73596: POP
73597: POP
// end ;
73598: LD_VAR 0 3
73602: RET
// export function UniqueArray ( array ) ; var i ; begin
73603: LD_INT 0
73605: PPUSH
73606: PPUSH
// result := [ ] ;
73607: LD_ADDR_VAR 0 2
73611: PUSH
73612: EMPTY
73613: ST_TO_ADDR
// if not array then
73614: LD_VAR 0 1
73618: NOT
73619: IFFALSE 73623
// exit ;
73621: GO 73684
// for i := 1 to array do
73623: LD_ADDR_VAR 0 3
73627: PUSH
73628: DOUBLE
73629: LD_INT 1
73631: DEC
73632: ST_TO_ADDR
73633: LD_VAR 0 1
73637: PUSH
73638: FOR_TO
73639: IFFALSE 73682
// if not array [ i ] in result then
73641: LD_VAR 0 1
73645: PUSH
73646: LD_VAR 0 3
73650: ARRAY
73651: PUSH
73652: LD_VAR 0 2
73656: IN
73657: NOT
73658: IFFALSE 73680
// result := Join ( result , i ) ;
73660: LD_ADDR_VAR 0 2
73664: PUSH
73665: LD_VAR 0 2
73669: PPUSH
73670: LD_VAR 0 3
73674: PPUSH
73675: CALL 68335 0 2
73679: ST_TO_ADDR
73680: GO 73638
73682: POP
73683: POP
// end ; end_of_file
73684: LD_VAR 0 2
73688: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73689: LD_VAR 0 1
73693: PUSH
73694: LD_INT 200
73696: DOUBLE
73697: GREATEREQUAL
73698: IFFALSE 73706
73700: LD_INT 299
73702: DOUBLE
73703: LESSEQUAL
73704: IFTRUE 73708
73706: GO 73740
73708: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73709: LD_VAR 0 1
73713: PPUSH
73714: LD_VAR 0 2
73718: PPUSH
73719: LD_VAR 0 3
73723: PPUSH
73724: LD_VAR 0 4
73728: PPUSH
73729: LD_VAR 0 5
73733: PPUSH
73734: CALL 24411 0 5
73738: GO 73817
73740: LD_INT 300
73742: DOUBLE
73743: GREATEREQUAL
73744: IFFALSE 73752
73746: LD_INT 399
73748: DOUBLE
73749: LESSEQUAL
73750: IFTRUE 73754
73752: GO 73816
73754: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73755: LD_VAR 0 1
73759: PPUSH
73760: LD_VAR 0 2
73764: PPUSH
73765: LD_VAR 0 3
73769: PPUSH
73770: LD_VAR 0 4
73774: PPUSH
73775: LD_VAR 0 5
73779: PPUSH
73780: LD_VAR 0 6
73784: PPUSH
73785: LD_VAR 0 7
73789: PPUSH
73790: LD_VAR 0 8
73794: PPUSH
73795: LD_VAR 0 9
73799: PPUSH
73800: LD_VAR 0 10
73804: PPUSH
73805: LD_VAR 0 11
73809: PPUSH
73810: CALL 20214 0 11
73814: GO 73817
73816: POP
// end ;
73817: PPOPN 11
73819: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73820: LD_VAR 0 1
73824: PPUSH
73825: LD_VAR 0 2
73829: PPUSH
73830: LD_VAR 0 3
73834: PPUSH
73835: LD_VAR 0 4
73839: PPUSH
73840: LD_VAR 0 5
73844: PPUSH
73845: CALL 23711 0 5
// end ; end_of_file
73849: PPOPN 5
73851: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73852: LD_VAR 0 1
73856: PPUSH
73857: LD_VAR 0 2
73861: PPUSH
73862: LD_VAR 0 3
73866: PPUSH
73867: LD_VAR 0 4
73871: PPUSH
73872: LD_VAR 0 5
73876: PPUSH
73877: LD_VAR 0 6
73881: PPUSH
73882: CALL 7754 0 6
// end ;
73886: PPOPN 6
73888: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73889: LD_INT 0
73891: PPUSH
// begin if not units then
73892: LD_VAR 0 1
73896: NOT
73897: IFFALSE 73901
// exit ;
73899: GO 73935
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73901: LD_VAR 0 1
73905: PPUSH
73906: LD_VAR 0 2
73910: PPUSH
73911: LD_VAR 0 3
73915: PPUSH
73916: LD_VAR 0 4
73920: PPUSH
73921: LD_VAR 0 5
73925: PPUSH
73926: LD_VAR 0 6
73930: PPUSH
73931: CALL 30108 0 6
// end ;
73935: PPOPN 7
73937: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73938: CALL 7634 0 0
// end ;
73942: PPOPN 1
73944: END
