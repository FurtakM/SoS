// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2700 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 24437 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 24437 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 24437 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 26
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 24437 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 26
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 2 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 2
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1802
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 131
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_VAR 0 3
1752: ARRAY
1753: PPUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 87
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_VAR 0 3
1768: ARRAY
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1777: LD_ADDR_EXP 23
1781: PUSH
1782: LD_EXP 23
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_VAR 0 4
1794: PPUSH
1795: CALL_OW 2
1799: ST_TO_ADDR
// end ;
1800: GO 1670
1802: POP
1803: POP
// for i = 1 to 2 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 2
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1909
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1820: LD_INT 2
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_VAR 0 3
1838: ARRAY
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 380
// un := CreateHuman ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: CALL_OW 44
1859: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1860: LD_ADDR_EXP 24
1864: PUSH
1865: LD_EXP 24
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 2
1882: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// ComHold ( un ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: CALL_OW 140
// end ;
1907: GO 1817
1909: POP
1910: POP
// if Difficulty < 3 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 3
1918: LESS
1919: IFFALSE 1923
// exit ;
1921: GO 1966
// PrepareHuman ( false , 1 , skill ) ;
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1938: LD_ADDR_EXP 25
1942: PUSH
1943: CALL_OW 44
1947: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1948: LD_EXP 25
1952: PPUSH
1953: LD_INT 82
1955: PPUSH
1956: LD_INT 2
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 48
// end ;
1966: LD_VAR 0 1
1970: RET
// every 0 0$01 trigger active_road_patrol do
1971: LD_EXP 8
1975: IFFALSE 2041
1977: GO 1979
1979: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1980: LD_EXP 23
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: LD_STRING road
1991: PPUSH
1992: LD_INT 70
1994: PPUSH
1995: LD_INT 131
1997: PUSH
1998: LD_INT 87
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 75
2006: PUSH
2007: LD_INT 107
2009: PUSH
2010: LD_INT 66
2012: PUSH
2013: LD_INT 114
2015: PUSH
2016: LD_INT 61
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 34
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PPUSH
2037: CALL 421 0 4
2041: END
// every 0 0$01 trigger active_road_patrol do
2042: LD_EXP 8
2046: IFFALSE 2104
2048: GO 2050
2050: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 2
2058: ARRAY
2059: PPUSH
2060: LD_STRING road
2062: PPUSH
2063: LD_INT 70
2065: PPUSH
2066: LD_INT 21
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 37
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 65
2080: PUSH
2081: LD_INT 62
2083: PUSH
2084: LD_INT 107
2086: PUSH
2087: LD_INT 76
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 421 0 4
2104: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2105: LD_EXP 25
2109: PPUSH
2110: CALL_OW 302
2114: IFFALSE 2176
2116: GO 2118
2118: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2119: LD_EXP 25
2123: PPUSH
2124: LD_STRING forest
2126: PPUSH
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 52
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 9
2141: PUSH
2142: LD_INT 120
2144: PUSH
2145: LD_INT 52
2147: PUSH
2148: LD_INT 135
2150: PUSH
2151: LD_INT 80
2153: PUSH
2154: LD_INT 122
2156: PUSH
2157: LD_INT 95
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL 421 0 4
2176: END
// every 0 0$01 trigger macmilan_use_radio do
2177: LD_EXP 6
2181: IFFALSE 2242
2183: GO 2185
2185: DISABLE
// begin active_road_patrol := false ;
2186: LD_ADDR_EXP 8
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2194: LD_EXP 23
2198: PPUSH
2199: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2203: LD_EXP 23
2207: PPUSH
2208: LD_INT 72
2210: PPUSH
2211: LD_INT 41
2213: PPUSH
2214: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2218: LD_EXP 22
2222: PPUSH
2223: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 72
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 174
// end ;
2242: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2243: LD_INT 9
2245: PPUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2334
2262: GO 2264
2264: DISABLE
2265: LD_INT 0
2267: PPUSH
// begin enable ;
2268: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 9
2276: PPUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2296: LD_EXP 22
2300: PPUSH
2301: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2305: LD_EXP 22
2309: PPUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 250
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 251
2329: PPUSH
2330: CALL_OW 174
// end ;
2334: PPOPN 1
2336: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2337: LD_EXP 23
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: CALL_OW 256
2350: PUSH
2351: LD_INT 999
2353: LESS
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: OR
2373: PUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_EXP 16
2381: PPUSH
2382: CALL_OW 292
2386: AND
2387: IFFALSE 2414
2389: GO 2391
2391: DISABLE
// begin active_road_patrol := false ;
2392: LD_ADDR_EXP 8
2396: PUSH
2397: LD_INT 0
2399: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2400: LD_EXP 23
2404: PPUSH
2405: LD_EXP 16
2409: PPUSH
2410: CALL_OW 115
// end ;
2414: END
// every 0 0$01 trigger macmilan_in_trap do
2415: LD_EXP 9
2419: IFFALSE 2465
2421: GO 2423
2423: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2424: LD_EXP 22
2428: PPUSH
2429: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2433: LD_EXP 21
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PUSH
2444: LD_EXP 26
2448: ADD
2449: PUSH
2450: LD_EXP 23
2454: ADD
2455: PPUSH
2456: LD_EXP 16
2460: PPUSH
2461: CALL_OW 115
// end ;
2465: END
// every 0 0$01 trigger meta_action do
2466: LD_EXP 10
2470: IFFALSE 2516
2472: GO 2474
2474: DISABLE
// begin active_road_patrol := false ;
2475: LD_ADDR_EXP 8
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2483: LD_EXP 21
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PUSH
2494: LD_EXP 26
2498: ADD
2499: PUSH
2500: LD_EXP 23
2504: ADD
2505: PPUSH
2506: LD_INT 93
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 114
// end ;
2516: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2517: LD_EXP 26
2521: PPUSH
2522: CALL_OW 256
2526: PUSH
2527: LD_INT 1000
2529: LESS
2530: IFFALSE 2581
2532: GO 2534
2534: DISABLE
// begin enable ;
2535: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2536: LD_INT 18
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: CALL_OW 428
2546: PUSH
2547: LD_EXP 26
2551: EQUAL
2552: IFFALSE 2566
// begin RemoveUnit ( Pokryshkin ) ;
2554: LD_EXP 26
2558: PPUSH
2559: CALL_OW 64
// disable ;
2563: DISABLE
// end else
2564: GO 2581
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2566: LD_EXP 26
2570: PPUSH
2571: LD_INT 18
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 111
// end ;
2581: END
// every 0 0$20 trigger send_troops_to_forest do
2582: LD_EXP 14
2586: IFFALSE 2640
2588: GO 2590
2590: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2591: LD_EXP 25
2595: PPUSH
2596: CALL_OW 302
2600: NOT
2601: IFFALSE 2605
// exit ;
2603: GO 2640
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2605: LD_EXP 21
2609: PUSH
2610: LD_EXP 26
2614: ADD
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 252
2625: PPUSH
2626: LD_EXP 25
2630: PPUSH
2631: CALL_OW 253
2635: PPUSH
2636: CALL_OW 114
// end ;
2640: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2697
// begin wait ( 11 ) ;
2656: LD_INT 11
2658: PPUSH
2659: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PPUSH
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 74
2692: PPUSH
2693: CALL_OW 120
// end ; end ; end_of_file
2697: PPOPN 4
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2752
// ComHold ( i ) ;
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 140
2750: GO 2738
2752: POP
2753: POP
// InGameOn ;
2754: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2758: LD_INT 79
2760: PPUSH
2761: LD_INT 76
2763: PPUSH
2764: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2775: LD_EXP 16
2779: PPUSH
2780: LD_INT 80
2782: PPUSH
2783: LD_INT 79
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 48
// Wait ( 0 0$03 ) ;
2793: LD_INT 105
2795: PPUSH
2796: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2800: LD_EXP 16
2804: PPUSH
2805: LD_INT 80
2807: PPUSH
2808: LD_INT 76
2810: PPUSH
2811: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2815: LD_EXP 16
2819: PPUSH
2820: LD_STRING D1-JMM-1
2822: PPUSH
2823: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2827: LD_INT 10
2829: PPUSH
2830: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2834: LD_EXP 16
2838: PPUSH
2839: LD_INT 76
2841: PPUSH
2842: LD_INT 76
2844: PPUSH
2845: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_STRING D1-JMM-1a
2856: PPUSH
2857: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2861: LD_INT 10
2863: PPUSH
2864: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 83
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2883: LD_EXP 16
2887: PPUSH
2888: LD_STRING D1-JMM-1b
2890: PPUSH
2891: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2895: LD_INT 18
2897: PPUSH
2898: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2902: LD_EXP 16
2906: PPUSH
2907: LD_STRING D1-JMM-1c
2909: PPUSH
2910: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2914: LD_INT 7
2916: PPUSH
2917: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2921: LD_EXP 19
2925: PPUSH
2926: LD_STRING D1-Pow-1
2928: PPUSH
2929: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2933: LD_EXP 16
2937: PPUSH
2938: LD_STRING D1-JMM-2
2940: PPUSH
2941: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2945: LD_EXP 19
2949: PPUSH
2950: LD_STRING D1-Pow-2
2952: PPUSH
2953: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2957: LD_EXP 16
2961: PPUSH
2962: LD_STRING D1-JMM-3
2964: PPUSH
2965: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D1-Pow-3
2976: PPUSH
2977: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_STRING D1-JMM-4
2988: PPUSH
2989: CALL_OW 88
// ComFree ( JMM ) ;
2993: LD_EXP 16
2997: PPUSH
2998: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3002: LD_INT 10
3004: PPUSH
3005: CALL_OW 67
// InGameOff ;
3009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3013: LD_STRING M1
3015: PPUSH
3016: CALL_OW 337
// SaveForQuickRestart ;
3020: CALL_OW 22
// active_russian_dialog := true ;
3024: LD_ADDR_EXP 3
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// active_road_patrol := true ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// if Difficulty < 3 then
3040: LD_OWVAR 67
3044: PUSH
3045: LD_INT 3
3047: LESS
3048: IFFALSE 3079
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3050: LD_EXP 17
3054: PPUSH
3055: LD_INT 41
3057: PPUSH
3058: LD_INT 71
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL_OW 48
// ComHold ( Bobby ) ;
3068: LD_EXP 17
3072: PPUSH
3073: CALL_OW 140
// end else
3077: GO 3127
// begin SetDir ( Bobby , 5 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_INT 5
3086: PPUSH
3087: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 105
3098: PPUSH
3099: LD_INT 98
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 48
// ComCrawl ( Bobby ) ;
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 137
// AddComHold ( Bobby ) ;
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3127: LD_EXP 18
3131: PPUSH
3132: LD_INT 90
3134: PPUSH
3135: LD_INT 42
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 79
3152: PPUSH
3153: LD_INT 34
3155: PPUSH
3156: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3160: LD_EXP 18
3164: PPUSH
3165: CALL_OW 197
// end ;
3169: LD_VAR 0 1
3173: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3174: LD_EXP 3
3178: IFFALSE 3772
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin wait_points := 0 ;
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3194: LD_INT 70
3196: PPUSH
3197: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3201: LD_EXP 21
3205: PPUSH
3206: LD_INT 79
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3216: LD_EXP 21
3220: PUSH
3221: LD_INT 2
3223: ARRAY
3224: PPUSH
3225: LD_STRING D1R-Rus1-1
3227: PPUSH
3228: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3232: LD_EXP 21
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_STRING D1R-Rus2-1
3243: PPUSH
3244: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3248: LD_EXP 22
3252: PPUSH
3253: LD_INT 91
3255: PPUSH
3256: LD_INT 80
3258: PPUSH
3259: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3263: LD_INT 35
3265: PPUSH
3266: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3270: LD_EXP 21
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 79
3281: PPUSH
3282: LD_INT 82
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 6
3292: LESS
3293: IFFALSE 3263
// if not IsInArea ( JMM , jmm_spot ) then
3295: LD_EXP 16
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: CALL_OW 308
3307: NOT
3308: IFFALSE 3328
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3310: LD_EXP 21
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_STRING D1Ra-Rus2-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Rb-Rus1-1
3339: PPUSH
3340: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3344: LD_EXP 21
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_STRING D1Rb-Rus2-1
3355: PPUSH
3356: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3360: LD_EXP 21
3364: PUSH
3365: LD_EXP 22
3369: ADD
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: CALL_OW 250
3380: PPUSH
3381: LD_EXP 16
3385: PPUSH
3386: CALL_OW 251
3390: PPUSH
3391: CALL_OW 114
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 21
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 21
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 21
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 16
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 21
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 21
3548: PPUSH
3549: LD_EXP 16
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 16
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3590: LD_EXP 21
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_STRING D1Rc-Rus1-1
3601: PPUSH
3602: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1Ra-Rus2-1a
3617: PPUSH
3618: CALL_OW 88
// active_powell_dialog := true ;
3622: LD_ADDR_EXP 15
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3630: LD_EXP 21
3634: PPUSH
3635: LD_INT 45
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3645: LD_EXP 22
3649: PPUSH
3650: LD_INT 26
3652: PPUSH
3653: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if See ( 3 , JMM ) then
3664: LD_INT 3
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: CALL_OW 292
3676: IFFALSE 3732
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3678: LD_EXP 21
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: PPUSH
3687: LD_STRING D1Rb-Rus1-1
3689: PPUSH
3690: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3694: LD_EXP 21
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 250
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 251
3718: PPUSH
3719: CALL_OW 114
// Wait ( 0 0$50 ) ;
3723: LD_INT 1750
3725: PPUSH
3726: CALL_OW 67
// end else
3730: GO 3747
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 45
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3747: LD_EXP 21
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: PPUSH
3756: LD_INT 45
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: CALL_OW 297
3766: PUSH
3767: LD_INT 10
3769: LESS
3770: IFFALSE 3657
// end ;
3772: PPOPN 1
3774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3775: LD_INT 22
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 92
3787: PUSH
3788: LD_INT 80
3790: PUSH
3791: LD_INT 83
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: PUSH
3812: LD_OWVAR 67
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3902
3823: GO 3825
3825: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 83
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: NEG
3838: PPUSH
3839: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 92
3862: PUSH
3863: LD_INT 80
3865: PUSH
3866: LD_INT 83
3868: PUSH
3869: LD_INT 10
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: NOT
3887: IFFALSE 3843
// RemoveSeeing ( 80 , 83 , 1 ) ;
3889: LD_INT 80
3891: PPUSH
3892: LD_INT 83
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 331
// end ;
3902: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3903: LD_EXP 16
3907: PPUSH
3908: LD_EXP 17
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 6
3920: LESS
3921: PUSH
3922: LD_EXP 17
3926: PPUSH
3927: CALL_OW 302
3931: AND
3932: IFFALSE 4391
3934: GO 3936
3936: DISABLE
// begin ComWalk ( Bobby ) ;
3937: LD_EXP 17
3941: PPUSH
3942: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3946: LD_EXP 17
3950: PPUSH
3951: LD_EXP 16
3955: PPUSH
3956: CALL_OW 250
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 251
3970: PPUSH
3971: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// until See ( 4 , JMM ) ;
3982: LD_INT 4
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 292
3994: IFFALSE 3975
// InGameOn ;
3996: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4000: LD_EXP 16
4004: PPUSH
4005: LD_EXP 17
4009: PPUSH
4010: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4014: LD_EXP 7
4018: PUSH
4019: LD_EXP 18
4023: PPUSH
4024: CALL_OW 302
4028: AND
4029: PUSH
4030: LD_EXP 16
4034: PPUSH
4035: LD_EXP 18
4039: PPUSH
4040: CALL_OW 296
4044: PUSH
4045: LD_INT 10
4047: LESS
4048: AND
4049: IFFALSE 4094
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4051: LD_EXP 18
4055: PPUSH
4056: LD_EXP 16
4060: PPUSH
4061: CALL_OW 250
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 251
4075: PPUSH
4076: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_EXP 17
4089: PPUSH
4090: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_STRING D2-JMM-1
4101: PPUSH
4102: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4106: LD_INT 10
4108: PPUSH
4109: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4113: LD_EXP 17
4117: PPUSH
4118: LD_EXP 16
4122: PPUSH
4123: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4127: LD_EXP 17
4131: PPUSH
4132: LD_STRING D2-Bobby-1
4134: PPUSH
4135: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4139: LD_EXP 16
4143: PPUSH
4144: LD_STRING D2-JMM-2
4146: PPUSH
4147: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4151: LD_EXP 17
4155: PPUSH
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 250
4165: PPUSH
4166: LD_EXP 16
4170: PPUSH
4171: CALL_OW 251
4175: PPUSH
4176: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4180: LD_EXP 17
4184: PPUSH
4185: LD_STRING D2-Bobby-2
4187: PPUSH
4188: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4192: LD_EXP 16
4196: PPUSH
4197: LD_STRING D2-JMM-3
4199: PPUSH
4200: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4204: LD_EXP 17
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 119
// DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D2-Bobby-3
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4234: LD_EXP 16
4238: PPUSH
4239: LD_STRING D2-JMM-4
4241: PPUSH
4242: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4246: LD_EXP 17
4250: PPUSH
4251: LD_STRING D2-Bobby-4
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4258: LD_EXP 16
4262: PPUSH
4263: LD_STRING D2-JMM-5
4265: PPUSH
4266: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-5
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-6
4289: PPUSH
4290: CALL_OW 88
// if not powell_contact then
4294: LD_EXP 5
4298: NOT
4299: IFFALSE 4325
// begin Say ( Bobby , D2-Bobby-6 ) ;
4301: LD_EXP 17
4305: PPUSH
4306: LD_STRING D2-Bobby-6
4308: PPUSH
4309: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4313: LD_EXP 16
4317: PPUSH
4318: LD_STRING D2-JMM-7
4320: PPUSH
4321: CALL_OW 88
// end ; DialogueOff ;
4325: CALL_OW 7
// InGameOff ;
4329: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4333: LD_EXP 17
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4345: LD_EXP 16
4349: PUSH
4350: LD_EXP 17
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PPUSH
4359: CALL_OW 139
// bobby_in_squad := true ;
4363: LD_ADDR_EXP 4
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4371: LD_EXP 5
4375: PUSH
4376: LD_EXP 7
4380: NOT
4381: AND
4382: IFFALSE 4391
// ChangeMissionObjectives ( M2b ) ;
4384: LD_STRING M2b
4386: PPUSH
4387: CALL_OW 337
// end ;
4391: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4392: LD_EXP 3
4396: PUSH
4397: LD_OWVAR 67
4401: PUSH
4402: LD_INT 3
4404: LESS
4405: AND
4406: IFFALSE 4440
4408: GO 4410
4410: DISABLE
// begin wait ( 1 1$00 ) ;
4411: LD_INT 2100
4413: PPUSH
4414: CALL_OW 67
// if not bobby_in_squad then
4418: LD_EXP 4
4422: NOT
4423: IFFALSE 4440
// ComMoveXY ( Bobby , 75 , 83 ) ;
4425: LD_EXP 17
4429: PPUSH
4430: LD_INT 75
4432: PPUSH
4433: LD_INT 83
4435: PPUSH
4436: CALL_OW 111
// end ;
4440: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4441: LD_EXP 7
4445: PUSH
4446: LD_EXP 4
4450: NOT
4451: AND
4452: IFFALSE 4481
4454: GO 4456
4456: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4457: LD_EXP 17
4461: PPUSH
4462: LD_INT 105
4464: PPUSH
4465: LD_INT 97
4467: PPUSH
4468: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4472: LD_EXP 17
4476: PPUSH
4477: CALL_OW 197
// end ;
4481: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4482: LD_EXP 16
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: CALL_OW 308
4494: PUSH
4495: LD_EXP 16
4499: PPUSH
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 296
4509: PUSH
4510: LD_INT 7
4512: LESS
4513: AND
4514: PUSH
4515: LD_EXP 4
4519: AND
4520: IFFALSE 4567
4522: GO 4524
4524: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4525: LD_EXP 16
4529: PUSH
4530: LD_EXP 17
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4543: LD_EXP 16
4547: PPUSH
4548: LD_STRING D2a-JMM-1
4550: PPUSH
4551: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4555: LD_EXP 17
4559: PPUSH
4560: LD_STRING D2a-Bobby-1
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4568: LD_EXP 15
4572: PUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_EXP 16
4580: PPUSH
4581: CALL_OW 292
4585: NOT
4586: AND
4587: IFFALSE 4758
4589: GO 4591
4591: DISABLE
// begin wait ( 0 0$5 ) ;
4592: LD_INT 175
4594: PPUSH
4595: CALL_OW 67
// InGameOn ;
4599: CALL_OW 8
// DialogueOn ;
4603: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4607: LD_EXP 19
4611: PPUSH
4612: LD_STRING D3-Pow-1
4614: PPUSH
4615: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4619: LD_EXP 16
4623: PPUSH
4624: LD_STRING D3-JMM-1
4626: PPUSH
4627: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4631: LD_EXP 19
4635: PPUSH
4636: LD_STRING D3-Pow-2
4638: PPUSH
4639: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4643: LD_EXP 16
4647: PPUSH
4648: LD_STRING D3-JMM-2
4650: PPUSH
4651: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4655: LD_EXP 19
4659: PPUSH
4660: LD_STRING D3-Pow-3
4662: PPUSH
4663: CALL_OW 586
// DialogueOff ;
4667: CALL_OW 7
// InGameOff ;
4671: CALL_OW 9
// powell_contact := true ;
4675: LD_ADDR_EXP 5
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4683: LD_INT 10
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 424
// uc_side := 4 ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_INT 4
4700: ST_TO_ADDR
// uc_nation := 1 ;
4701: LD_ADDR_OWVAR 21
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4709: LD_ADDR_EXP 19
4713: PUSH
4714: LD_STRING Powell
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_STRING 
4722: PPUSH
4723: CALL 24437 0 3
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 586
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 586
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5606
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: LD_INT 150
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_OWVAR 67
5404: ARRAY
5405: ST_TO_ADDR
// for i in russian_meta_guards do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 24
5415: PUSH
5416: FOR_IN
5417: IFFALSE 5457
// if IsOk ( i ) then
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5455
// SetLives ( i , GetLives ( i ) - hp ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 256
5444: PUSH
5445: LD_VAR 0 2
5449: MINUS
5450: PPUSH
5451: CALL_OW 234
5455: GO 5416
5457: POP
5458: POP
// DialogueOn ;
5459: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 24
5472: ARRAY
5473: PPUSH
5474: LD_STRING D6-FRus1-1
5476: PPUSH
5477: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5481: LD_EXP 16
5485: PPUSH
5486: LD_STRING D6-JMM-1
5488: PPUSH
5489: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 302
5502: PUSH
5503: LD_EXP 7
5507: AND
5508: IFFALSE 5522
// Say ( Cyrus , D6-Cyrus-1 ) ;
5510: LD_EXP 18
5514: PPUSH
5515: LD_STRING D6-Cyrus-1
5517: PPUSH
5518: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5522: LD_EXP 17
5526: PPUSH
5527: CALL_OW 302
5531: PUSH
5532: LD_EXP 4
5536: AND
5537: IFFALSE 5551
// Say ( Bobby , D6-Bobby-1 ) ;
5539: LD_EXP 17
5543: PPUSH
5544: LD_STRING D6-Bobby-1
5546: PPUSH
5547: CALL_OW 88
// DialogueOff ;
5551: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5555: LD_INT 140
5557: PUSH
5558: LD_INT 105
5560: PUSH
5561: LD_INT 70
5563: PUSH
5564: LD_INT 70
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PPUSH
5579: CALL_OW 67
// meta_action := true ;
5583: LD_ADDR_EXP 10
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5591: LD_EXP 24
5595: PPUSH
5596: LD_INT 94
5598: PPUSH
5599: LD_INT 8
5601: PPUSH
5602: CALL_OW 114
// end ;
5606: PPOPN 2
5608: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5609: LD_EXP 16
5613: PPUSH
5614: LD_INT 93
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 297
5624: PUSH
5625: LD_INT 5
5627: LESS
5628: PUSH
5629: LD_INT 22
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: LD_INT 1
5646: GREATER
5647: AND
5648: IFFALSE 5665
5650: GO 5652
5652: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5653: LD_EXP 16
5657: PPUSH
5658: LD_STRING D6a-JMM-1
5660: PPUSH
5661: CALL_OW 88
5665: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5666: LD_VAR 0 1
5670: PUSH
5671: LD_EXP 16
5675: EQUAL
5676: IFFALSE 5685
// YouLost ( JMM ) ;
5678: LD_STRING JMM
5680: PPUSH
5681: CALL_OW 104
// end ;
5685: PPOPN 1
5687: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5688: LD_VAR 0 1
5692: PUSH
5693: LD_EXP 16
5697: EQUAL
5698: IFFALSE 5707
// YouLost ( JMM ) ;
5700: LD_STRING JMM
5702: PPUSH
5703: CALL_OW 104
// end ;
5707: PPOPN 1
5709: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5710: LD_EXP 17
5714: PPUSH
5715: LD_INT 10
5717: PPUSH
5718: CALL_OW 308
5722: IFFALSE 5771
5724: GO 5726
5726: DISABLE
// begin bobby_saved := true ;
5727: LD_ADDR_EXP 12
5731: PUSH
5732: LD_INT 1
5734: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5735: LD_EXP 17
5739: PPUSH
5740: CALL_OW 256
5744: PPUSH
5745: LD_STRING 01_BobbyLifePoints_1
5747: PPUSH
5748: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5752: LD_EXP 17
5756: PPUSH
5757: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5761: LD_STRING Bobby
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL_OW 101
// end ;
5771: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5772: LD_EXP 18
5776: PPUSH
5777: LD_INT 10
5779: PPUSH
5780: CALL_OW 308
5784: IFFALSE 5833
5786: GO 5788
5788: DISABLE
// begin cyrus_saved := true ;
5789: LD_ADDR_EXP 13
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5797: LD_EXP 18
5801: PPUSH
5802: CALL_OW 256
5806: PPUSH
5807: LD_STRING 01_CyrusLifePoints_1
5809: PPUSH
5810: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5814: LD_EXP 18
5818: PPUSH
5819: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5823: LD_STRING Cyrus
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: CALL_OW 101
// end ;
5833: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5834: LD_EXP 16
5838: PPUSH
5839: LD_INT 10
5841: PPUSH
5842: CALL_OW 308
5846: IFFALSE 6454
5848: GO 5850
5850: DISABLE
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin if macmilan_use_radio then
5859: LD_EXP 6
5863: IFFALSE 5872
// SetAchievement ( ACH_RADIO ) ;
5865: LD_STRING ACH_RADIO
5867: PPUSH
5868: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5872: LD_EXP 13
5876: NOT
5877: PUSH
5878: LD_EXP 7
5882: AND
5883: PUSH
5884: LD_EXP 18
5888: PPUSH
5889: CALL_OW 302
5893: AND
5894: PUSH
5895: LD_EXP 12
5899: NOT
5900: PUSH
5901: LD_EXP 4
5905: AND
5906: PUSH
5907: LD_EXP 17
5911: PPUSH
5912: CALL_OW 302
5916: AND
5917: OR
5918: IFFALSE 5959
// case Query ( Q2 ) of 1 :
5920: LD_STRING Q2
5922: PPUSH
5923: CALL_OW 97
5927: PUSH
5928: LD_INT 1
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5936
5934: GO 5947
5936: POP
// wait_for_them := true ; 2 :
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
5945: GO 5959
5947: LD_INT 2
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5955
5953: GO 5958
5955: POP
// ; end ;
5956: GO 5959
5958: POP
// if wait_for_them then
5959: LD_VAR 0 3
5963: IFFALSE 6076
// repeat wait ( 0 0$01 ) ;
5965: LD_INT 35
5967: PPUSH
5968: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5972: LD_EXP 13
5976: PUSH
5977: LD_EXP 12
5981: AND
5982: PUSH
5983: LD_EXP 13
5987: PUSH
5988: LD_EXP 4
5992: NOT
5993: PUSH
5994: LD_EXP 17
5998: PPUSH
5999: CALL_OW 303
6003: OR
6004: PUSH
6005: LD_EXP 17
6009: PPUSH
6010: CALL_OW 301
6014: OR
6015: AND
6016: OR
6017: PUSH
6018: LD_EXP 12
6022: PUSH
6023: LD_EXP 7
6027: NOT
6028: PUSH
6029: LD_EXP 18
6033: PPUSH
6034: CALL_OW 303
6038: OR
6039: PUSH
6040: LD_EXP 18
6044: PPUSH
6045: CALL_OW 301
6049: OR
6050: AND
6051: OR
6052: PUSH
6053: LD_EXP 17
6057: PPUSH
6058: CALL_OW 301
6062: PUSH
6063: LD_EXP 18
6067: PPUSH
6068: CALL_OW 301
6072: AND
6073: OR
6074: IFFALSE 5965
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6076: LD_EXP 16
6080: PPUSH
6081: CALL_OW 256
6085: PPUSH
6086: LD_STRING 01_JMMLifePoints_1
6088: PPUSH
6089: CALL_OW 39
// RemoveUnit ( JMM ) ;
6093: LD_EXP 16
6097: PPUSH
6098: CALL_OW 64
// to_reward := [ JMM ] ;
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: LD_EXP 16
6111: PUSH
6112: EMPTY
6113: LIST
6114: ST_TO_ADDR
// if bobby_saved then
6115: LD_EXP 12
6119: IFFALSE 6137
// to_reward := to_reward ^ Bobby ;
6121: LD_ADDR_VAR 0 2
6125: PUSH
6126: LD_VAR 0 2
6130: PUSH
6131: LD_EXP 17
6135: ADD
6136: ST_TO_ADDR
// if cyrus_saved then
6137: LD_EXP 13
6141: IFFALSE 6159
// to_reward := to_reward ^ Cyrus ;
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_EXP 18
6157: ADD
6158: ST_TO_ADDR
// m1 := true ;
6159: LD_ADDR_VAR 0 4
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// m2 := bobby_saved ;
6167: LD_ADDR_VAR 0 5
6171: PUSH
6172: LD_EXP 12
6176: ST_TO_ADDR
// m3 := cyrus_saved ;
6177: LD_ADDR_VAR 0 6
6181: PUSH
6182: LD_EXP 13
6186: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6187: LD_STRING JMM
6189: PPUSH
6190: LD_INT 1
6192: PPUSH
6193: CALL_OW 101
// if not bobby_in_squad then
6197: LD_EXP 4
6201: NOT
6202: IFFALSE 6215
// AddMedal ( Bobby , - 1 ) ;
6204: LD_STRING Bobby
6206: PPUSH
6207: LD_INT 1
6209: NEG
6210: PPUSH
6211: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6215: LD_EXP 12
6219: NOT
6220: PUSH
6221: LD_EXP 17
6225: PPUSH
6226: CALL_OW 303
6230: PUSH
6231: LD_EXP 17
6235: PPUSH
6236: CALL_OW 301
6240: OR
6241: AND
6242: IFFALSE 6255
// AddMedal ( Bobby , - 2 ) ;
6244: LD_STRING Bobby
6246: PPUSH
6247: LD_INT 2
6249: NEG
6250: PPUSH
6251: CALL_OW 101
// if not cyrus_in_squad then
6255: LD_EXP 7
6259: NOT
6260: IFFALSE 6273
// AddMedal ( Cyrus , - 1 ) ;
6262: LD_STRING Cyrus
6264: PPUSH
6265: LD_INT 1
6267: NEG
6268: PPUSH
6269: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6273: LD_EXP 13
6277: NOT
6278: PUSH
6279: LD_EXP 18
6283: PPUSH
6284: CALL_OW 303
6288: PUSH
6289: LD_EXP 18
6293: PPUSH
6294: CALL_OW 301
6298: OR
6299: AND
6300: IFFALSE 6313
// AddMedal ( Cyrus , - 2 ) ;
6302: LD_STRING Cyrus
6304: PPUSH
6305: LD_INT 2
6307: NEG
6308: PPUSH
6309: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6313: LD_OWVAR 67
6317: PUSH
6318: LD_INT 3
6320: GREATEREQUAL
6321: PUSH
6322: LD_VAR 0 4
6326: AND
6327: PUSH
6328: LD_VAR 0 5
6332: AND
6333: PUSH
6334: LD_VAR 0 6
6338: AND
6339: IFFALSE 6351
// SetAchievementEX ( ACH_AMER , 1 ) ;
6341: LD_STRING ACH_AMER
6343: PPUSH
6344: LD_INT 1
6346: PPUSH
6347: CALL_OW 564
// GiveMedals ( MAIN ) ;
6351: LD_STRING MAIN
6353: PPUSH
6354: CALL_OW 102
// RewardPeople ( to_reward ) ;
6358: LD_VAR 0 2
6362: PPUSH
6363: CALL_OW 43
// if bobby_saved then
6367: LD_EXP 12
6371: IFFALSE 6391
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6373: LD_EXP 17
6377: PPUSH
6378: LD_EXP 2
6382: PUSH
6383: LD_STRING Bobby
6385: STR
6386: PPUSH
6387: CALL_OW 38
// if cyrus_saved then
6391: LD_EXP 13
6395: IFFALSE 6415
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6397: LD_EXP 18
6401: PPUSH
6402: LD_EXP 2
6406: PUSH
6407: LD_STRING Cyrus
6409: STR
6410: PPUSH
6411: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6415: LD_EXP 16
6419: PPUSH
6420: LD_EXP 2
6424: PUSH
6425: LD_STRING JMM
6427: STR
6428: PPUSH
6429: CALL_OW 38
// if tick <= 3 3$00 then
6433: LD_OWVAR 1
6437: PUSH
6438: LD_INT 6300
6440: LESSEQUAL
6441: IFFALSE 6450
// SetAchievement ( ACH_ASPEED_1 ) ;
6443: LD_STRING ACH_ASPEED_1
6445: PPUSH
6446: CALL_OW 543
// YouWin ;
6450: CALL_OW 103
// end ; end_of_file end_of_file
6454: PPOPN 6
6456: END
// every 0 0$1 do
6457: GO 6459
6459: DISABLE
// begin enable ;
6460: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6461: LD_STRING updateTimer(
6463: PUSH
6464: LD_OWVAR 1
6468: STR
6469: PUSH
6470: LD_STRING );
6472: STR
6473: PPUSH
6474: CALL_OW 559
// end ;
6478: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6479: LD_INT 0
6481: PPUSH
// if p2 = 100 then
6482: LD_VAR 0 2
6486: PUSH
6487: LD_INT 100
6489: EQUAL
6490: IFFALSE 7493
// begin if not StreamModeActive then
6492: LD_EXP 27
6496: NOT
6497: IFFALSE 6507
// StreamModeActive := true ;
6499: LD_ADDR_EXP 27
6503: PUSH
6504: LD_INT 1
6506: ST_TO_ADDR
// if p3 = 0 then
6507: LD_VAR 0 3
6511: PUSH
6512: LD_INT 0
6514: EQUAL
6515: IFFALSE 6521
// InitStreamMode ;
6517: CALL 7653 0 0
// if p3 = 1 then
6521: LD_VAR 0 3
6525: PUSH
6526: LD_INT 1
6528: EQUAL
6529: IFFALSE 6539
// sRocket := true ;
6531: LD_ADDR_EXP 32
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// if p3 = 2 then
6539: LD_VAR 0 3
6543: PUSH
6544: LD_INT 2
6546: EQUAL
6547: IFFALSE 6557
// sSpeed := true ;
6549: LD_ADDR_EXP 31
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// if p3 = 3 then
6557: LD_VAR 0 3
6561: PUSH
6562: LD_INT 3
6564: EQUAL
6565: IFFALSE 6575
// sEngine := true ;
6567: LD_ADDR_EXP 33
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// if p3 = 4 then
6575: LD_VAR 0 3
6579: PUSH
6580: LD_INT 4
6582: EQUAL
6583: IFFALSE 6593
// sSpec := true ;
6585: LD_ADDR_EXP 30
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// if p3 = 5 then
6593: LD_VAR 0 3
6597: PUSH
6598: LD_INT 5
6600: EQUAL
6601: IFFALSE 6611
// sLevel := true ;
6603: LD_ADDR_EXP 34
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// if p3 = 6 then
6611: LD_VAR 0 3
6615: PUSH
6616: LD_INT 6
6618: EQUAL
6619: IFFALSE 6629
// sArmoury := true ;
6621: LD_ADDR_EXP 35
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// if p3 = 7 then
6629: LD_VAR 0 3
6633: PUSH
6634: LD_INT 7
6636: EQUAL
6637: IFFALSE 6647
// sRadar := true ;
6639: LD_ADDR_EXP 36
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// if p3 = 8 then
6647: LD_VAR 0 3
6651: PUSH
6652: LD_INT 8
6654: EQUAL
6655: IFFALSE 6665
// sBunker := true ;
6657: LD_ADDR_EXP 37
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if p3 = 9 then
6665: LD_VAR 0 3
6669: PUSH
6670: LD_INT 9
6672: EQUAL
6673: IFFALSE 6683
// sHack := true ;
6675: LD_ADDR_EXP 38
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// if p3 = 10 then
6683: LD_VAR 0 3
6687: PUSH
6688: LD_INT 10
6690: EQUAL
6691: IFFALSE 6701
// sFire := true ;
6693: LD_ADDR_EXP 39
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// if p3 = 11 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_INT 11
6708: EQUAL
6709: IFFALSE 6719
// sRefresh := true ;
6711: LD_ADDR_EXP 40
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// if p3 = 12 then
6719: LD_VAR 0 3
6723: PUSH
6724: LD_INT 12
6726: EQUAL
6727: IFFALSE 6737
// sExp := true ;
6729: LD_ADDR_EXP 41
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// if p3 = 13 then
6737: LD_VAR 0 3
6741: PUSH
6742: LD_INT 13
6744: EQUAL
6745: IFFALSE 6755
// sDepot := true ;
6747: LD_ADDR_EXP 42
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// if p3 = 14 then
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 14
6762: EQUAL
6763: IFFALSE 6773
// sFlag := true ;
6765: LD_ADDR_EXP 43
6769: PUSH
6770: LD_INT 1
6772: ST_TO_ADDR
// if p3 = 15 then
6773: LD_VAR 0 3
6777: PUSH
6778: LD_INT 15
6780: EQUAL
6781: IFFALSE 6791
// sKamikadze := true ;
6783: LD_ADDR_EXP 51
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// if p3 = 16 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 16
6798: EQUAL
6799: IFFALSE 6809
// sTroll := true ;
6801: LD_ADDR_EXP 52
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
// if p3 = 17 then
6809: LD_VAR 0 3
6813: PUSH
6814: LD_INT 17
6816: EQUAL
6817: IFFALSE 6827
// sSlow := true ;
6819: LD_ADDR_EXP 53
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// if p3 = 18 then
6827: LD_VAR 0 3
6831: PUSH
6832: LD_INT 18
6834: EQUAL
6835: IFFALSE 6845
// sLack := true ;
6837: LD_ADDR_EXP 54
6841: PUSH
6842: LD_INT 1
6844: ST_TO_ADDR
// if p3 = 19 then
6845: LD_VAR 0 3
6849: PUSH
6850: LD_INT 19
6852: EQUAL
6853: IFFALSE 6863
// sTank := true ;
6855: LD_ADDR_EXP 56
6859: PUSH
6860: LD_INT 1
6862: ST_TO_ADDR
// if p3 = 20 then
6863: LD_VAR 0 3
6867: PUSH
6868: LD_INT 20
6870: EQUAL
6871: IFFALSE 6881
// sRemote := true ;
6873: LD_ADDR_EXP 57
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// if p3 = 21 then
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 21
6888: EQUAL
6889: IFFALSE 6899
// sPowell := true ;
6891: LD_ADDR_EXP 58
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// if p3 = 22 then
6899: LD_VAR 0 3
6903: PUSH
6904: LD_INT 22
6906: EQUAL
6907: IFFALSE 6917
// sTeleport := true ;
6909: LD_ADDR_EXP 61
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// if p3 = 23 then
6917: LD_VAR 0 3
6921: PUSH
6922: LD_INT 23
6924: EQUAL
6925: IFFALSE 6935
// sOilTower := true ;
6927: LD_ADDR_EXP 63
6931: PUSH
6932: LD_INT 1
6934: ST_TO_ADDR
// if p3 = 24 then
6935: LD_VAR 0 3
6939: PUSH
6940: LD_INT 24
6942: EQUAL
6943: IFFALSE 6953
// sShovel := true ;
6945: LD_ADDR_EXP 64
6949: PUSH
6950: LD_INT 1
6952: ST_TO_ADDR
// if p3 = 25 then
6953: LD_VAR 0 3
6957: PUSH
6958: LD_INT 25
6960: EQUAL
6961: IFFALSE 6971
// sSheik := true ;
6963: LD_ADDR_EXP 65
6967: PUSH
6968: LD_INT 1
6970: ST_TO_ADDR
// if p3 = 26 then
6971: LD_VAR 0 3
6975: PUSH
6976: LD_INT 26
6978: EQUAL
6979: IFFALSE 6989
// sEarthquake := true ;
6981: LD_ADDR_EXP 67
6985: PUSH
6986: LD_INT 1
6988: ST_TO_ADDR
// if p3 = 27 then
6989: LD_VAR 0 3
6993: PUSH
6994: LD_INT 27
6996: EQUAL
6997: IFFALSE 7007
// sAI := true ;
6999: LD_ADDR_EXP 68
7003: PUSH
7004: LD_INT 1
7006: ST_TO_ADDR
// if p3 = 28 then
7007: LD_VAR 0 3
7011: PUSH
7012: LD_INT 28
7014: EQUAL
7015: IFFALSE 7025
// sCargo := true ;
7017: LD_ADDR_EXP 71
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// if p3 = 29 then
7025: LD_VAR 0 3
7029: PUSH
7030: LD_INT 29
7032: EQUAL
7033: IFFALSE 7043
// sDLaser := true ;
7035: LD_ADDR_EXP 72
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// if p3 = 30 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 30
7050: EQUAL
7051: IFFALSE 7061
// sExchange := true ;
7053: LD_ADDR_EXP 73
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// if p3 = 31 then
7061: LD_VAR 0 3
7065: PUSH
7066: LD_INT 31
7068: EQUAL
7069: IFFALSE 7079
// sFac := true ;
7071: LD_ADDR_EXP 74
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// if p3 = 32 then
7079: LD_VAR 0 3
7083: PUSH
7084: LD_INT 32
7086: EQUAL
7087: IFFALSE 7097
// sPower := true ;
7089: LD_ADDR_EXP 75
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// if p3 = 33 then
7097: LD_VAR 0 3
7101: PUSH
7102: LD_INT 33
7104: EQUAL
7105: IFFALSE 7115
// sRandom := true ;
7107: LD_ADDR_EXP 76
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// if p3 = 34 then
7115: LD_VAR 0 3
7119: PUSH
7120: LD_INT 34
7122: EQUAL
7123: IFFALSE 7133
// sShield := true ;
7125: LD_ADDR_EXP 77
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// if p3 = 35 then
7133: LD_VAR 0 3
7137: PUSH
7138: LD_INT 35
7140: EQUAL
7141: IFFALSE 7151
// sTime := true ;
7143: LD_ADDR_EXP 78
7147: PUSH
7148: LD_INT 1
7150: ST_TO_ADDR
// if p3 = 36 then
7151: LD_VAR 0 3
7155: PUSH
7156: LD_INT 36
7158: EQUAL
7159: IFFALSE 7169
// sTools := true ;
7161: LD_ADDR_EXP 79
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// if p3 = 101 then
7169: LD_VAR 0 3
7173: PUSH
7174: LD_INT 101
7176: EQUAL
7177: IFFALSE 7187
// sSold := true ;
7179: LD_ADDR_EXP 44
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// if p3 = 102 then
7187: LD_VAR 0 3
7191: PUSH
7192: LD_INT 102
7194: EQUAL
7195: IFFALSE 7205
// sDiff := true ;
7197: LD_ADDR_EXP 45
7201: PUSH
7202: LD_INT 1
7204: ST_TO_ADDR
// if p3 = 103 then
7205: LD_VAR 0 3
7209: PUSH
7210: LD_INT 103
7212: EQUAL
7213: IFFALSE 7223
// sFog := true ;
7215: LD_ADDR_EXP 48
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// if p3 = 104 then
7223: LD_VAR 0 3
7227: PUSH
7228: LD_INT 104
7230: EQUAL
7231: IFFALSE 7241
// sReset := true ;
7233: LD_ADDR_EXP 49
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// if p3 = 105 then
7241: LD_VAR 0 3
7245: PUSH
7246: LD_INT 105
7248: EQUAL
7249: IFFALSE 7259
// sSun := true ;
7251: LD_ADDR_EXP 50
7255: PUSH
7256: LD_INT 1
7258: ST_TO_ADDR
// if p3 = 106 then
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 106
7266: EQUAL
7267: IFFALSE 7277
// sTiger := true ;
7269: LD_ADDR_EXP 46
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// if p3 = 107 then
7277: LD_VAR 0 3
7281: PUSH
7282: LD_INT 107
7284: EQUAL
7285: IFFALSE 7295
// sBomb := true ;
7287: LD_ADDR_EXP 47
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// if p3 = 108 then
7295: LD_VAR 0 3
7299: PUSH
7300: LD_INT 108
7302: EQUAL
7303: IFFALSE 7313
// sWound := true ;
7305: LD_ADDR_EXP 55
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// if p3 = 109 then
7313: LD_VAR 0 3
7317: PUSH
7318: LD_INT 109
7320: EQUAL
7321: IFFALSE 7331
// sBetray := true ;
7323: LD_ADDR_EXP 59
7327: PUSH
7328: LD_INT 1
7330: ST_TO_ADDR
// if p3 = 110 then
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 110
7338: EQUAL
7339: IFFALSE 7349
// sContamin := true ;
7341: LD_ADDR_EXP 60
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if p3 = 111 then
7349: LD_VAR 0 3
7353: PUSH
7354: LD_INT 111
7356: EQUAL
7357: IFFALSE 7367
// sOil := true ;
7359: LD_ADDR_EXP 62
7363: PUSH
7364: LD_INT 1
7366: ST_TO_ADDR
// if p3 = 112 then
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 112
7374: EQUAL
7375: IFFALSE 7385
// sStu := true ;
7377: LD_ADDR_EXP 66
7381: PUSH
7382: LD_INT 1
7384: ST_TO_ADDR
// if p3 = 113 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 113
7392: EQUAL
7393: IFFALSE 7403
// sBazooka := true ;
7395: LD_ADDR_EXP 69
7399: PUSH
7400: LD_INT 1
7402: ST_TO_ADDR
// if p3 = 114 then
7403: LD_VAR 0 3
7407: PUSH
7408: LD_INT 114
7410: EQUAL
7411: IFFALSE 7421
// sMortar := true ;
7413: LD_ADDR_EXP 70
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// if p3 = 115 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 115
7428: EQUAL
7429: IFFALSE 7439
// sRanger := true ;
7431: LD_ADDR_EXP 80
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 116 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 116
7446: EQUAL
7447: IFFALSE 7457
// sComputer := true ;
7449: LD_ADDR_EXP 81
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 117 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 117
7464: EQUAL
7465: IFFALSE 7475
// s30 := true ;
7467: LD_ADDR_EXP 82
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 118 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 118
7482: EQUAL
7483: IFFALSE 7493
// s60 := true ;
7485: LD_ADDR_EXP 83
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// end ; if p2 = 101 then
7493: LD_VAR 0 2
7497: PUSH
7498: LD_INT 101
7500: EQUAL
7501: IFFALSE 7629
// begin case p3 of 1 :
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 1
7510: DOUBLE
7511: EQUAL
7512: IFTRUE 7516
7514: GO 7523
7516: POP
// hHackUnlimitedResources ; 2 :
7517: CALL 19225 0 0
7521: GO 7629
7523: LD_INT 2
7525: DOUBLE
7526: EQUAL
7527: IFTRUE 7531
7529: GO 7538
7531: POP
// hHackSetLevel10 ; 3 :
7532: CALL 19358 0 0
7536: GO 7629
7538: LD_INT 3
7540: DOUBLE
7541: EQUAL
7542: IFTRUE 7546
7544: GO 7553
7546: POP
// hHackSetLevel10YourUnits ; 4 :
7547: CALL 19443 0 0
7551: GO 7629
7553: LD_INT 4
7555: DOUBLE
7556: EQUAL
7557: IFTRUE 7561
7559: GO 7568
7561: POP
// hHackInvincible ; 5 :
7562: CALL 19891 0 0
7566: GO 7629
7568: LD_INT 5
7570: DOUBLE
7571: EQUAL
7572: IFTRUE 7576
7574: GO 7583
7576: POP
// hHackInvisible ; 6 :
7577: CALL 20002 0 0
7581: GO 7629
7583: LD_INT 6
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7598
7591: POP
// hHackChangeYourSide ; 7 :
7592: CALL 20059 0 0
7596: GO 7629
7598: LD_INT 7
7600: DOUBLE
7601: EQUAL
7602: IFTRUE 7606
7604: GO 7613
7606: POP
// hHackChangeUnitSide ; 8 :
7607: CALL 20101 0 0
7611: GO 7629
7613: LD_INT 8
7615: DOUBLE
7616: EQUAL
7617: IFTRUE 7621
7619: GO 7628
7621: POP
// hHackFog ; end ;
7622: CALL 20202 0 0
7626: GO 7629
7628: POP
// end ; end ;
7629: LD_VAR 0 7
7633: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7634: GO 7636
7636: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7637: LD_STRING initStreamRollete();
7639: PPUSH
7640: CALL_OW 559
// InitStreamMode ;
7644: CALL 7653 0 0
// DefineStreamItems ( ) ;
7648: CALL 8117 0 0
// end ;
7652: END
// function InitStreamMode ; begin
7653: LD_INT 0
7655: PPUSH
// streamModeActive := false ;
7656: LD_ADDR_EXP 27
7660: PUSH
7661: LD_INT 0
7663: ST_TO_ADDR
// normalCounter := 36 ;
7664: LD_ADDR_EXP 28
7668: PUSH
7669: LD_INT 36
7671: ST_TO_ADDR
// hardcoreCounter := 16 ;
7672: LD_ADDR_EXP 29
7676: PUSH
7677: LD_INT 16
7679: ST_TO_ADDR
// sRocket := false ;
7680: LD_ADDR_EXP 32
7684: PUSH
7685: LD_INT 0
7687: ST_TO_ADDR
// sSpeed := false ;
7688: LD_ADDR_EXP 31
7692: PUSH
7693: LD_INT 0
7695: ST_TO_ADDR
// sEngine := false ;
7696: LD_ADDR_EXP 33
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// sSpec := false ;
7704: LD_ADDR_EXP 30
7708: PUSH
7709: LD_INT 0
7711: ST_TO_ADDR
// sLevel := false ;
7712: LD_ADDR_EXP 34
7716: PUSH
7717: LD_INT 0
7719: ST_TO_ADDR
// sArmoury := false ;
7720: LD_ADDR_EXP 35
7724: PUSH
7725: LD_INT 0
7727: ST_TO_ADDR
// sRadar := false ;
7728: LD_ADDR_EXP 36
7732: PUSH
7733: LD_INT 0
7735: ST_TO_ADDR
// sBunker := false ;
7736: LD_ADDR_EXP 37
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// sHack := false ;
7744: LD_ADDR_EXP 38
7748: PUSH
7749: LD_INT 0
7751: ST_TO_ADDR
// sFire := false ;
7752: LD_ADDR_EXP 39
7756: PUSH
7757: LD_INT 0
7759: ST_TO_ADDR
// sRefresh := false ;
7760: LD_ADDR_EXP 40
7764: PUSH
7765: LD_INT 0
7767: ST_TO_ADDR
// sExp := false ;
7768: LD_ADDR_EXP 41
7772: PUSH
7773: LD_INT 0
7775: ST_TO_ADDR
// sDepot := false ;
7776: LD_ADDR_EXP 42
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// sFlag := false ;
7784: LD_ADDR_EXP 43
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// sKamikadze := false ;
7792: LD_ADDR_EXP 51
7796: PUSH
7797: LD_INT 0
7799: ST_TO_ADDR
// sTroll := false ;
7800: LD_ADDR_EXP 52
7804: PUSH
7805: LD_INT 0
7807: ST_TO_ADDR
// sSlow := false ;
7808: LD_ADDR_EXP 53
7812: PUSH
7813: LD_INT 0
7815: ST_TO_ADDR
// sLack := false ;
7816: LD_ADDR_EXP 54
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// sTank := false ;
7824: LD_ADDR_EXP 56
7828: PUSH
7829: LD_INT 0
7831: ST_TO_ADDR
// sRemote := false ;
7832: LD_ADDR_EXP 57
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// sPowell := false ;
7840: LD_ADDR_EXP 58
7844: PUSH
7845: LD_INT 0
7847: ST_TO_ADDR
// sTeleport := false ;
7848: LD_ADDR_EXP 61
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// sOilTower := false ;
7856: LD_ADDR_EXP 63
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// sShovel := false ;
7864: LD_ADDR_EXP 64
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// sSheik := false ;
7872: LD_ADDR_EXP 65
7876: PUSH
7877: LD_INT 0
7879: ST_TO_ADDR
// sEarthquake := false ;
7880: LD_ADDR_EXP 67
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// sAI := false ;
7888: LD_ADDR_EXP 68
7892: PUSH
7893: LD_INT 0
7895: ST_TO_ADDR
// sCargo := false ;
7896: LD_ADDR_EXP 71
7900: PUSH
7901: LD_INT 0
7903: ST_TO_ADDR
// sDLaser := false ;
7904: LD_ADDR_EXP 72
7908: PUSH
7909: LD_INT 0
7911: ST_TO_ADDR
// sExchange := false ;
7912: LD_ADDR_EXP 73
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// sFac := false ;
7920: LD_ADDR_EXP 74
7924: PUSH
7925: LD_INT 0
7927: ST_TO_ADDR
// sPower := false ;
7928: LD_ADDR_EXP 75
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// sRandom := false ;
7936: LD_ADDR_EXP 76
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// sShield := false ;
7944: LD_ADDR_EXP 77
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// sTime := false ;
7952: LD_ADDR_EXP 78
7956: PUSH
7957: LD_INT 0
7959: ST_TO_ADDR
// sTools := false ;
7960: LD_ADDR_EXP 79
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// sSold := false ;
7968: LD_ADDR_EXP 44
7972: PUSH
7973: LD_INT 0
7975: ST_TO_ADDR
// sDiff := false ;
7976: LD_ADDR_EXP 45
7980: PUSH
7981: LD_INT 0
7983: ST_TO_ADDR
// sFog := false ;
7984: LD_ADDR_EXP 48
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// sReset := false ;
7992: LD_ADDR_EXP 49
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// sSun := false ;
8000: LD_ADDR_EXP 50
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// sTiger := false ;
8008: LD_ADDR_EXP 46
8012: PUSH
8013: LD_INT 0
8015: ST_TO_ADDR
// sBomb := false ;
8016: LD_ADDR_EXP 47
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// sWound := false ;
8024: LD_ADDR_EXP 55
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// sBetray := false ;
8032: LD_ADDR_EXP 59
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// sContamin := false ;
8040: LD_ADDR_EXP 60
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// sOil := false ;
8048: LD_ADDR_EXP 62
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// sStu := false ;
8056: LD_ADDR_EXP 66
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// sBazooka := false ;
8064: LD_ADDR_EXP 69
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// sMortar := false ;
8072: LD_ADDR_EXP 70
8076: PUSH
8077: LD_INT 0
8079: ST_TO_ADDR
// sRanger := false ;
8080: LD_ADDR_EXP 80
8084: PUSH
8085: LD_INT 0
8087: ST_TO_ADDR
// sComputer := false ;
8088: LD_ADDR_EXP 81
8092: PUSH
8093: LD_INT 0
8095: ST_TO_ADDR
// s30 := false ;
8096: LD_ADDR_EXP 82
8100: PUSH
8101: LD_INT 0
8103: ST_TO_ADDR
// s60 := false ;
8104: LD_ADDR_EXP 83
8108: PUSH
8109: LD_INT 0
8111: ST_TO_ADDR
// end ;
8112: LD_VAR 0 1
8116: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8117: LD_INT 0
8119: PPUSH
8120: PPUSH
8121: PPUSH
8122: PPUSH
8123: PPUSH
// result := [ ] ;
8124: LD_ADDR_VAR 0 1
8128: PUSH
8129: EMPTY
8130: ST_TO_ADDR
// if campaign_id = 1 then
8131: LD_OWVAR 69
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: IFFALSE 11305
// begin case mission_number of 1 :
8141: LD_OWVAR 70
8145: PUSH
8146: LD_INT 1
8148: DOUBLE
8149: EQUAL
8150: IFTRUE 8154
8152: GO 8230
8154: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8155: LD_ADDR_VAR 0 1
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: LD_INT 4
8165: PUSH
8166: LD_INT 11
8168: PUSH
8169: LD_INT 12
8171: PUSH
8172: LD_INT 15
8174: PUSH
8175: LD_INT 16
8177: PUSH
8178: LD_INT 22
8180: PUSH
8181: LD_INT 23
8183: PUSH
8184: LD_INT 26
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: PUSH
8198: LD_INT 101
8200: PUSH
8201: LD_INT 102
8203: PUSH
8204: LD_INT 106
8206: PUSH
8207: LD_INT 116
8209: PUSH
8210: LD_INT 117
8212: PUSH
8213: LD_INT 118
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: ST_TO_ADDR
8228: GO 11303
8230: LD_INT 2
8232: DOUBLE
8233: EQUAL
8234: IFTRUE 8238
8236: GO 8322
8238: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: LD_INT 2
8246: PUSH
8247: LD_INT 4
8249: PUSH
8250: LD_INT 11
8252: PUSH
8253: LD_INT 12
8255: PUSH
8256: LD_INT 15
8258: PUSH
8259: LD_INT 16
8261: PUSH
8262: LD_INT 22
8264: PUSH
8265: LD_INT 23
8267: PUSH
8268: LD_INT 26
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 101
8284: PUSH
8285: LD_INT 102
8287: PUSH
8288: LD_INT 105
8290: PUSH
8291: LD_INT 106
8293: PUSH
8294: LD_INT 108
8296: PUSH
8297: LD_INT 116
8299: PUSH
8300: LD_INT 117
8302: PUSH
8303: LD_INT 118
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: ST_TO_ADDR
8320: GO 11303
8322: LD_INT 3
8324: DOUBLE
8325: EQUAL
8326: IFTRUE 8330
8328: GO 8418
8330: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8331: LD_ADDR_VAR 0 1
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 4
8341: PUSH
8342: LD_INT 5
8344: PUSH
8345: LD_INT 11
8347: PUSH
8348: LD_INT 12
8350: PUSH
8351: LD_INT 15
8353: PUSH
8354: LD_INT 16
8356: PUSH
8357: LD_INT 22
8359: PUSH
8360: LD_INT 26
8362: PUSH
8363: LD_INT 36
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 101
8380: PUSH
8381: LD_INT 102
8383: PUSH
8384: LD_INT 105
8386: PUSH
8387: LD_INT 106
8389: PUSH
8390: LD_INT 108
8392: PUSH
8393: LD_INT 116
8395: PUSH
8396: LD_INT 117
8398: PUSH
8399: LD_INT 118
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: ST_TO_ADDR
8416: GO 11303
8418: LD_INT 4
8420: DOUBLE
8421: EQUAL
8422: IFTRUE 8426
8424: GO 8522
8426: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8427: LD_ADDR_VAR 0 1
8431: PUSH
8432: LD_INT 2
8434: PUSH
8435: LD_INT 4
8437: PUSH
8438: LD_INT 5
8440: PUSH
8441: LD_INT 8
8443: PUSH
8444: LD_INT 11
8446: PUSH
8447: LD_INT 12
8449: PUSH
8450: LD_INT 15
8452: PUSH
8453: LD_INT 16
8455: PUSH
8456: LD_INT 22
8458: PUSH
8459: LD_INT 23
8461: PUSH
8462: LD_INT 26
8464: PUSH
8465: LD_INT 36
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 101
8484: PUSH
8485: LD_INT 102
8487: PUSH
8488: LD_INT 105
8490: PUSH
8491: LD_INT 106
8493: PUSH
8494: LD_INT 108
8496: PUSH
8497: LD_INT 116
8499: PUSH
8500: LD_INT 117
8502: PUSH
8503: LD_INT 118
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: ST_TO_ADDR
8520: GO 11303
8522: LD_INT 5
8524: DOUBLE
8525: EQUAL
8526: IFTRUE 8530
8528: GO 8642
8530: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8531: LD_ADDR_VAR 0 1
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: LD_INT 4
8541: PUSH
8542: LD_INT 5
8544: PUSH
8545: LD_INT 6
8547: PUSH
8548: LD_INT 8
8550: PUSH
8551: LD_INT 11
8553: PUSH
8554: LD_INT 12
8556: PUSH
8557: LD_INT 15
8559: PUSH
8560: LD_INT 16
8562: PUSH
8563: LD_INT 22
8565: PUSH
8566: LD_INT 23
8568: PUSH
8569: LD_INT 25
8571: PUSH
8572: LD_INT 26
8574: PUSH
8575: LD_INT 36
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 101
8596: PUSH
8597: LD_INT 102
8599: PUSH
8600: LD_INT 105
8602: PUSH
8603: LD_INT 106
8605: PUSH
8606: LD_INT 108
8608: PUSH
8609: LD_INT 109
8611: PUSH
8612: LD_INT 112
8614: PUSH
8615: LD_INT 116
8617: PUSH
8618: LD_INT 117
8620: PUSH
8621: LD_INT 118
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: ST_TO_ADDR
8640: GO 11303
8642: LD_INT 6
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8782
8650: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8651: LD_ADDR_VAR 0 1
8655: PUSH
8656: LD_INT 2
8658: PUSH
8659: LD_INT 4
8661: PUSH
8662: LD_INT 5
8664: PUSH
8665: LD_INT 6
8667: PUSH
8668: LD_INT 8
8670: PUSH
8671: LD_INT 11
8673: PUSH
8674: LD_INT 12
8676: PUSH
8677: LD_INT 15
8679: PUSH
8680: LD_INT 16
8682: PUSH
8683: LD_INT 20
8685: PUSH
8686: LD_INT 21
8688: PUSH
8689: LD_INT 22
8691: PUSH
8692: LD_INT 23
8694: PUSH
8695: LD_INT 25
8697: PUSH
8698: LD_INT 26
8700: PUSH
8701: LD_INT 30
8703: PUSH
8704: LD_INT 31
8706: PUSH
8707: LD_INT 32
8709: PUSH
8710: LD_INT 36
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 101
8736: PUSH
8737: LD_INT 102
8739: PUSH
8740: LD_INT 105
8742: PUSH
8743: LD_INT 106
8745: PUSH
8746: LD_INT 108
8748: PUSH
8749: LD_INT 109
8751: PUSH
8752: LD_INT 112
8754: PUSH
8755: LD_INT 116
8757: PUSH
8758: LD_INT 117
8760: PUSH
8761: LD_INT 118
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: ST_TO_ADDR
8780: GO 11303
8782: LD_INT 7
8784: DOUBLE
8785: EQUAL
8786: IFTRUE 8790
8788: GO 8902
8790: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8791: LD_ADDR_VAR 0 1
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: LD_INT 4
8801: PUSH
8802: LD_INT 5
8804: PUSH
8805: LD_INT 7
8807: PUSH
8808: LD_INT 11
8810: PUSH
8811: LD_INT 12
8813: PUSH
8814: LD_INT 15
8816: PUSH
8817: LD_INT 16
8819: PUSH
8820: LD_INT 20
8822: PUSH
8823: LD_INT 21
8825: PUSH
8826: LD_INT 22
8828: PUSH
8829: LD_INT 23
8831: PUSH
8832: LD_INT 25
8834: PUSH
8835: LD_INT 26
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 101
8856: PUSH
8857: LD_INT 102
8859: PUSH
8860: LD_INT 103
8862: PUSH
8863: LD_INT 105
8865: PUSH
8866: LD_INT 106
8868: PUSH
8869: LD_INT 108
8871: PUSH
8872: LD_INT 112
8874: PUSH
8875: LD_INT 116
8877: PUSH
8878: LD_INT 117
8880: PUSH
8881: LD_INT 118
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: ST_TO_ADDR
8900: GO 11303
8902: LD_INT 8
8904: DOUBLE
8905: EQUAL
8906: IFTRUE 8910
8908: GO 9050
8910: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8911: LD_ADDR_VAR 0 1
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: LD_INT 4
8921: PUSH
8922: LD_INT 5
8924: PUSH
8925: LD_INT 6
8927: PUSH
8928: LD_INT 7
8930: PUSH
8931: LD_INT 8
8933: PUSH
8934: LD_INT 11
8936: PUSH
8937: LD_INT 12
8939: PUSH
8940: LD_INT 15
8942: PUSH
8943: LD_INT 16
8945: PUSH
8946: LD_INT 20
8948: PUSH
8949: LD_INT 21
8951: PUSH
8952: LD_INT 22
8954: PUSH
8955: LD_INT 23
8957: PUSH
8958: LD_INT 25
8960: PUSH
8961: LD_INT 26
8963: PUSH
8964: LD_INT 30
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: LD_INT 32
8972: PUSH
8973: LD_INT 36
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 101
9000: PUSH
9001: LD_INT 102
9003: PUSH
9004: LD_INT 103
9006: PUSH
9007: LD_INT 105
9009: PUSH
9010: LD_INT 106
9012: PUSH
9013: LD_INT 108
9015: PUSH
9016: LD_INT 109
9018: PUSH
9019: LD_INT 112
9021: PUSH
9022: LD_INT 116
9024: PUSH
9025: LD_INT 117
9027: PUSH
9028: LD_INT 118
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: ST_TO_ADDR
9048: GO 11303
9050: LD_INT 9
9052: DOUBLE
9053: EQUAL
9054: IFTRUE 9058
9056: GO 9206
9058: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9059: LD_ADDR_VAR 0 1
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: LD_INT 4
9069: PUSH
9070: LD_INT 5
9072: PUSH
9073: LD_INT 6
9075: PUSH
9076: LD_INT 7
9078: PUSH
9079: LD_INT 8
9081: PUSH
9082: LD_INT 11
9084: PUSH
9085: LD_INT 12
9087: PUSH
9088: LD_INT 15
9090: PUSH
9091: LD_INT 16
9093: PUSH
9094: LD_INT 20
9096: PUSH
9097: LD_INT 21
9099: PUSH
9100: LD_INT 22
9102: PUSH
9103: LD_INT 23
9105: PUSH
9106: LD_INT 25
9108: PUSH
9109: LD_INT 26
9111: PUSH
9112: LD_INT 28
9114: PUSH
9115: LD_INT 30
9117: PUSH
9118: LD_INT 31
9120: PUSH
9121: LD_INT 32
9123: PUSH
9124: LD_INT 36
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 101
9152: PUSH
9153: LD_INT 102
9155: PUSH
9156: LD_INT 103
9158: PUSH
9159: LD_INT 105
9161: PUSH
9162: LD_INT 106
9164: PUSH
9165: LD_INT 108
9167: PUSH
9168: LD_INT 109
9170: PUSH
9171: LD_INT 112
9173: PUSH
9174: LD_INT 114
9176: PUSH
9177: LD_INT 116
9179: PUSH
9180: LD_INT 117
9182: PUSH
9183: LD_INT 118
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: ST_TO_ADDR
9204: GO 11303
9206: LD_INT 10
9208: DOUBLE
9209: EQUAL
9210: IFTRUE 9214
9212: GO 9410
9214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9215: LD_ADDR_VAR 0 1
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 4
9225: PUSH
9226: LD_INT 5
9228: PUSH
9229: LD_INT 6
9231: PUSH
9232: LD_INT 7
9234: PUSH
9235: LD_INT 8
9237: PUSH
9238: LD_INT 9
9240: PUSH
9241: LD_INT 10
9243: PUSH
9244: LD_INT 11
9246: PUSH
9247: LD_INT 12
9249: PUSH
9250: LD_INT 13
9252: PUSH
9253: LD_INT 14
9255: PUSH
9256: LD_INT 15
9258: PUSH
9259: LD_INT 16
9261: PUSH
9262: LD_INT 17
9264: PUSH
9265: LD_INT 18
9267: PUSH
9268: LD_INT 19
9270: PUSH
9271: LD_INT 20
9273: PUSH
9274: LD_INT 21
9276: PUSH
9277: LD_INT 22
9279: PUSH
9280: LD_INT 23
9282: PUSH
9283: LD_INT 24
9285: PUSH
9286: LD_INT 25
9288: PUSH
9289: LD_INT 26
9291: PUSH
9292: LD_INT 28
9294: PUSH
9295: LD_INT 30
9297: PUSH
9298: LD_INT 31
9300: PUSH
9301: LD_INT 32
9303: PUSH
9304: LD_INT 36
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 101
9340: PUSH
9341: LD_INT 102
9343: PUSH
9344: LD_INT 103
9346: PUSH
9347: LD_INT 104
9349: PUSH
9350: LD_INT 105
9352: PUSH
9353: LD_INT 106
9355: PUSH
9356: LD_INT 107
9358: PUSH
9359: LD_INT 108
9361: PUSH
9362: LD_INT 109
9364: PUSH
9365: LD_INT 110
9367: PUSH
9368: LD_INT 111
9370: PUSH
9371: LD_INT 112
9373: PUSH
9374: LD_INT 114
9376: PUSH
9377: LD_INT 116
9379: PUSH
9380: LD_INT 117
9382: PUSH
9383: LD_INT 118
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: ST_TO_ADDR
9408: GO 11303
9410: LD_INT 11
9412: DOUBLE
9413: EQUAL
9414: IFTRUE 9418
9416: GO 9622
9418: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9419: LD_ADDR_VAR 0 1
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 4
9432: PUSH
9433: LD_INT 5
9435: PUSH
9436: LD_INT 6
9438: PUSH
9439: LD_INT 7
9441: PUSH
9442: LD_INT 8
9444: PUSH
9445: LD_INT 9
9447: PUSH
9448: LD_INT 10
9450: PUSH
9451: LD_INT 11
9453: PUSH
9454: LD_INT 12
9456: PUSH
9457: LD_INT 13
9459: PUSH
9460: LD_INT 14
9462: PUSH
9463: LD_INT 15
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: LD_INT 17
9471: PUSH
9472: LD_INT 18
9474: PUSH
9475: LD_INT 19
9477: PUSH
9478: LD_INT 20
9480: PUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 22
9486: PUSH
9487: LD_INT 23
9489: PUSH
9490: LD_INT 24
9492: PUSH
9493: LD_INT 25
9495: PUSH
9496: LD_INT 26
9498: PUSH
9499: LD_INT 28
9501: PUSH
9502: LD_INT 30
9504: PUSH
9505: LD_INT 31
9507: PUSH
9508: LD_INT 32
9510: PUSH
9511: LD_INT 34
9513: PUSH
9514: LD_INT 36
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 101
9552: PUSH
9553: LD_INT 102
9555: PUSH
9556: LD_INT 103
9558: PUSH
9559: LD_INT 104
9561: PUSH
9562: LD_INT 105
9564: PUSH
9565: LD_INT 106
9567: PUSH
9568: LD_INT 107
9570: PUSH
9571: LD_INT 108
9573: PUSH
9574: LD_INT 109
9576: PUSH
9577: LD_INT 110
9579: PUSH
9580: LD_INT 111
9582: PUSH
9583: LD_INT 112
9585: PUSH
9586: LD_INT 114
9588: PUSH
9589: LD_INT 116
9591: PUSH
9592: LD_INT 117
9594: PUSH
9595: LD_INT 118
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: ST_TO_ADDR
9620: GO 11303
9622: LD_INT 12
9624: DOUBLE
9625: EQUAL
9626: IFTRUE 9630
9628: GO 9850
9630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9631: LD_ADDR_VAR 0 1
9635: PUSH
9636: LD_INT 1
9638: PUSH
9639: LD_INT 2
9641: PUSH
9642: LD_INT 3
9644: PUSH
9645: LD_INT 4
9647: PUSH
9648: LD_INT 5
9650: PUSH
9651: LD_INT 6
9653: PUSH
9654: LD_INT 7
9656: PUSH
9657: LD_INT 8
9659: PUSH
9660: LD_INT 9
9662: PUSH
9663: LD_INT 10
9665: PUSH
9666: LD_INT 11
9668: PUSH
9669: LD_INT 12
9671: PUSH
9672: LD_INT 13
9674: PUSH
9675: LD_INT 14
9677: PUSH
9678: LD_INT 15
9680: PUSH
9681: LD_INT 16
9683: PUSH
9684: LD_INT 17
9686: PUSH
9687: LD_INT 18
9689: PUSH
9690: LD_INT 19
9692: PUSH
9693: LD_INT 20
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 22
9701: PUSH
9702: LD_INT 23
9704: PUSH
9705: LD_INT 24
9707: PUSH
9708: LD_INT 25
9710: PUSH
9711: LD_INT 26
9713: PUSH
9714: LD_INT 27
9716: PUSH
9717: LD_INT 28
9719: PUSH
9720: LD_INT 30
9722: PUSH
9723: LD_INT 31
9725: PUSH
9726: LD_INT 32
9728: PUSH
9729: LD_INT 33
9731: PUSH
9732: LD_INT 34
9734: PUSH
9735: LD_INT 36
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 101
9776: PUSH
9777: LD_INT 102
9779: PUSH
9780: LD_INT 103
9782: PUSH
9783: LD_INT 104
9785: PUSH
9786: LD_INT 105
9788: PUSH
9789: LD_INT 106
9791: PUSH
9792: LD_INT 107
9794: PUSH
9795: LD_INT 108
9797: PUSH
9798: LD_INT 109
9800: PUSH
9801: LD_INT 110
9803: PUSH
9804: LD_INT 111
9806: PUSH
9807: LD_INT 112
9809: PUSH
9810: LD_INT 113
9812: PUSH
9813: LD_INT 114
9815: PUSH
9816: LD_INT 116
9818: PUSH
9819: LD_INT 117
9821: PUSH
9822: LD_INT 118
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: ST_TO_ADDR
9848: GO 11303
9850: LD_INT 13
9852: DOUBLE
9853: EQUAL
9854: IFTRUE 9858
9856: GO 10066
9858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9859: LD_ADDR_VAR 0 1
9863: PUSH
9864: LD_INT 1
9866: PUSH
9867: LD_INT 2
9869: PUSH
9870: LD_INT 3
9872: PUSH
9873: LD_INT 4
9875: PUSH
9876: LD_INT 5
9878: PUSH
9879: LD_INT 8
9881: PUSH
9882: LD_INT 9
9884: PUSH
9885: LD_INT 10
9887: PUSH
9888: LD_INT 11
9890: PUSH
9891: LD_INT 12
9893: PUSH
9894: LD_INT 14
9896: PUSH
9897: LD_INT 15
9899: PUSH
9900: LD_INT 16
9902: PUSH
9903: LD_INT 17
9905: PUSH
9906: LD_INT 18
9908: PUSH
9909: LD_INT 19
9911: PUSH
9912: LD_INT 20
9914: PUSH
9915: LD_INT 21
9917: PUSH
9918: LD_INT 22
9920: PUSH
9921: LD_INT 23
9923: PUSH
9924: LD_INT 24
9926: PUSH
9927: LD_INT 25
9929: PUSH
9930: LD_INT 26
9932: PUSH
9933: LD_INT 27
9935: PUSH
9936: LD_INT 28
9938: PUSH
9939: LD_INT 30
9941: PUSH
9942: LD_INT 31
9944: PUSH
9945: LD_INT 32
9947: PUSH
9948: LD_INT 33
9950: PUSH
9951: LD_INT 34
9953: PUSH
9954: LD_INT 36
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 101
9992: PUSH
9993: LD_INT 102
9995: PUSH
9996: LD_INT 103
9998: PUSH
9999: LD_INT 104
10001: PUSH
10002: LD_INT 105
10004: PUSH
10005: LD_INT 106
10007: PUSH
10008: LD_INT 107
10010: PUSH
10011: LD_INT 108
10013: PUSH
10014: LD_INT 109
10016: PUSH
10017: LD_INT 110
10019: PUSH
10020: LD_INT 111
10022: PUSH
10023: LD_INT 112
10025: PUSH
10026: LD_INT 113
10028: PUSH
10029: LD_INT 114
10031: PUSH
10032: LD_INT 116
10034: PUSH
10035: LD_INT 117
10037: PUSH
10038: LD_INT 118
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: ST_TO_ADDR
10064: GO 11303
10066: LD_INT 14
10068: DOUBLE
10069: EQUAL
10070: IFTRUE 10074
10072: GO 10298
10074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10075: LD_ADDR_VAR 0 1
10079: PUSH
10080: LD_INT 1
10082: PUSH
10083: LD_INT 2
10085: PUSH
10086: LD_INT 3
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 6
10097: PUSH
10098: LD_INT 7
10100: PUSH
10101: LD_INT 8
10103: PUSH
10104: LD_INT 9
10106: PUSH
10107: LD_INT 10
10109: PUSH
10110: LD_INT 11
10112: PUSH
10113: LD_INT 12
10115: PUSH
10116: LD_INT 13
10118: PUSH
10119: LD_INT 14
10121: PUSH
10122: LD_INT 15
10124: PUSH
10125: LD_INT 16
10127: PUSH
10128: LD_INT 17
10130: PUSH
10131: LD_INT 18
10133: PUSH
10134: LD_INT 19
10136: PUSH
10137: LD_INT 20
10139: PUSH
10140: LD_INT 21
10142: PUSH
10143: LD_INT 22
10145: PUSH
10146: LD_INT 23
10148: PUSH
10149: LD_INT 24
10151: PUSH
10152: LD_INT 25
10154: PUSH
10155: LD_INT 26
10157: PUSH
10158: LD_INT 27
10160: PUSH
10161: LD_INT 28
10163: PUSH
10164: LD_INT 29
10166: PUSH
10167: LD_INT 30
10169: PUSH
10170: LD_INT 31
10172: PUSH
10173: LD_INT 32
10175: PUSH
10176: LD_INT 33
10178: PUSH
10179: LD_INT 34
10181: PUSH
10182: LD_INT 36
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 101
10224: PUSH
10225: LD_INT 102
10227: PUSH
10228: LD_INT 103
10230: PUSH
10231: LD_INT 104
10233: PUSH
10234: LD_INT 105
10236: PUSH
10237: LD_INT 106
10239: PUSH
10240: LD_INT 107
10242: PUSH
10243: LD_INT 108
10245: PUSH
10246: LD_INT 109
10248: PUSH
10249: LD_INT 110
10251: PUSH
10252: LD_INT 111
10254: PUSH
10255: LD_INT 112
10257: PUSH
10258: LD_INT 113
10260: PUSH
10261: LD_INT 114
10263: PUSH
10264: LD_INT 116
10266: PUSH
10267: LD_INT 117
10269: PUSH
10270: LD_INT 118
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: ST_TO_ADDR
10296: GO 11303
10298: LD_INT 15
10300: DOUBLE
10301: EQUAL
10302: IFTRUE 10306
10304: GO 10530
10306: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10307: LD_ADDR_VAR 0 1
10311: PUSH
10312: LD_INT 1
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: LD_INT 3
10320: PUSH
10321: LD_INT 4
10323: PUSH
10324: LD_INT 5
10326: PUSH
10327: LD_INT 6
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: LD_INT 8
10335: PUSH
10336: LD_INT 9
10338: PUSH
10339: LD_INT 10
10341: PUSH
10342: LD_INT 11
10344: PUSH
10345: LD_INT 12
10347: PUSH
10348: LD_INT 13
10350: PUSH
10351: LD_INT 14
10353: PUSH
10354: LD_INT 15
10356: PUSH
10357: LD_INT 16
10359: PUSH
10360: LD_INT 17
10362: PUSH
10363: LD_INT 18
10365: PUSH
10366: LD_INT 19
10368: PUSH
10369: LD_INT 20
10371: PUSH
10372: LD_INT 21
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: LD_INT 23
10380: PUSH
10381: LD_INT 24
10383: PUSH
10384: LD_INT 25
10386: PUSH
10387: LD_INT 26
10389: PUSH
10390: LD_INT 27
10392: PUSH
10393: LD_INT 28
10395: PUSH
10396: LD_INT 29
10398: PUSH
10399: LD_INT 30
10401: PUSH
10402: LD_INT 31
10404: PUSH
10405: LD_INT 32
10407: PUSH
10408: LD_INT 33
10410: PUSH
10411: LD_INT 34
10413: PUSH
10414: LD_INT 36
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 101
10456: PUSH
10457: LD_INT 102
10459: PUSH
10460: LD_INT 103
10462: PUSH
10463: LD_INT 104
10465: PUSH
10466: LD_INT 105
10468: PUSH
10469: LD_INT 106
10471: PUSH
10472: LD_INT 107
10474: PUSH
10475: LD_INT 108
10477: PUSH
10478: LD_INT 109
10480: PUSH
10481: LD_INT 110
10483: PUSH
10484: LD_INT 111
10486: PUSH
10487: LD_INT 112
10489: PUSH
10490: LD_INT 113
10492: PUSH
10493: LD_INT 114
10495: PUSH
10496: LD_INT 116
10498: PUSH
10499: LD_INT 117
10501: PUSH
10502: LD_INT 118
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: ST_TO_ADDR
10528: GO 11303
10530: LD_INT 16
10532: DOUBLE
10533: EQUAL
10534: IFTRUE 10538
10536: GO 10674
10538: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10539: LD_ADDR_VAR 0 1
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: LD_INT 4
10549: PUSH
10550: LD_INT 5
10552: PUSH
10553: LD_INT 7
10555: PUSH
10556: LD_INT 11
10558: PUSH
10559: LD_INT 12
10561: PUSH
10562: LD_INT 15
10564: PUSH
10565: LD_INT 16
10567: PUSH
10568: LD_INT 20
10570: PUSH
10571: LD_INT 21
10573: PUSH
10574: LD_INT 22
10576: PUSH
10577: LD_INT 23
10579: PUSH
10580: LD_INT 25
10582: PUSH
10583: LD_INT 26
10585: PUSH
10586: LD_INT 30
10588: PUSH
10589: LD_INT 31
10591: PUSH
10592: LD_INT 32
10594: PUSH
10595: LD_INT 33
10597: PUSH
10598: LD_INT 34
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 101
10624: PUSH
10625: LD_INT 102
10627: PUSH
10628: LD_INT 103
10630: PUSH
10631: LD_INT 106
10633: PUSH
10634: LD_INT 108
10636: PUSH
10637: LD_INT 112
10639: PUSH
10640: LD_INT 113
10642: PUSH
10643: LD_INT 114
10645: PUSH
10646: LD_INT 116
10648: PUSH
10649: LD_INT 117
10651: PUSH
10652: LD_INT 118
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: ST_TO_ADDR
10672: GO 11303
10674: LD_INT 17
10676: DOUBLE
10677: EQUAL
10678: IFTRUE 10682
10680: GO 10906
10682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10683: LD_ADDR_VAR 0 1
10687: PUSH
10688: LD_INT 1
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: LD_INT 3
10696: PUSH
10697: LD_INT 4
10699: PUSH
10700: LD_INT 5
10702: PUSH
10703: LD_INT 6
10705: PUSH
10706: LD_INT 7
10708: PUSH
10709: LD_INT 8
10711: PUSH
10712: LD_INT 9
10714: PUSH
10715: LD_INT 10
10717: PUSH
10718: LD_INT 11
10720: PUSH
10721: LD_INT 12
10723: PUSH
10724: LD_INT 13
10726: PUSH
10727: LD_INT 14
10729: PUSH
10730: LD_INT 15
10732: PUSH
10733: LD_INT 16
10735: PUSH
10736: LD_INT 17
10738: PUSH
10739: LD_INT 18
10741: PUSH
10742: LD_INT 19
10744: PUSH
10745: LD_INT 20
10747: PUSH
10748: LD_INT 21
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: LD_INT 23
10756: PUSH
10757: LD_INT 24
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 26
10765: PUSH
10766: LD_INT 27
10768: PUSH
10769: LD_INT 28
10771: PUSH
10772: LD_INT 29
10774: PUSH
10775: LD_INT 30
10777: PUSH
10778: LD_INT 31
10780: PUSH
10781: LD_INT 32
10783: PUSH
10784: LD_INT 33
10786: PUSH
10787: LD_INT 34
10789: PUSH
10790: LD_INT 36
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 101
10832: PUSH
10833: LD_INT 102
10835: PUSH
10836: LD_INT 103
10838: PUSH
10839: LD_INT 104
10841: PUSH
10842: LD_INT 105
10844: PUSH
10845: LD_INT 106
10847: PUSH
10848: LD_INT 107
10850: PUSH
10851: LD_INT 108
10853: PUSH
10854: LD_INT 109
10856: PUSH
10857: LD_INT 110
10859: PUSH
10860: LD_INT 111
10862: PUSH
10863: LD_INT 112
10865: PUSH
10866: LD_INT 113
10868: PUSH
10869: LD_INT 114
10871: PUSH
10872: LD_INT 116
10874: PUSH
10875: LD_INT 117
10877: PUSH
10878: LD_INT 118
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: ST_TO_ADDR
10904: GO 11303
10906: LD_INT 18
10908: DOUBLE
10909: EQUAL
10910: IFTRUE 10914
10912: GO 11062
10914: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10915: LD_ADDR_VAR 0 1
10919: PUSH
10920: LD_INT 2
10922: PUSH
10923: LD_INT 4
10925: PUSH
10926: LD_INT 5
10928: PUSH
10929: LD_INT 7
10931: PUSH
10932: LD_INT 11
10934: PUSH
10935: LD_INT 12
10937: PUSH
10938: LD_INT 15
10940: PUSH
10941: LD_INT 16
10943: PUSH
10944: LD_INT 20
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 22
10952: PUSH
10953: LD_INT 23
10955: PUSH
10956: LD_INT 25
10958: PUSH
10959: LD_INT 26
10961: PUSH
10962: LD_INT 30
10964: PUSH
10965: LD_INT 31
10967: PUSH
10968: LD_INT 32
10970: PUSH
10971: LD_INT 33
10973: PUSH
10974: LD_INT 34
10976: PUSH
10977: LD_INT 35
10979: PUSH
10980: LD_INT 36
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 101
11008: PUSH
11009: LD_INT 102
11011: PUSH
11012: LD_INT 103
11014: PUSH
11015: LD_INT 106
11017: PUSH
11018: LD_INT 108
11020: PUSH
11021: LD_INT 112
11023: PUSH
11024: LD_INT 113
11026: PUSH
11027: LD_INT 114
11029: PUSH
11030: LD_INT 115
11032: PUSH
11033: LD_INT 116
11035: PUSH
11036: LD_INT 117
11038: PUSH
11039: LD_INT 118
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: ST_TO_ADDR
11060: GO 11303
11062: LD_INT 19
11064: DOUBLE
11065: EQUAL
11066: IFTRUE 11070
11068: GO 11302
11070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11071: LD_ADDR_VAR 0 1
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: LD_INT 3
11084: PUSH
11085: LD_INT 4
11087: PUSH
11088: LD_INT 5
11090: PUSH
11091: LD_INT 6
11093: PUSH
11094: LD_INT 7
11096: PUSH
11097: LD_INT 8
11099: PUSH
11100: LD_INT 9
11102: PUSH
11103: LD_INT 10
11105: PUSH
11106: LD_INT 11
11108: PUSH
11109: LD_INT 12
11111: PUSH
11112: LD_INT 13
11114: PUSH
11115: LD_INT 14
11117: PUSH
11118: LD_INT 15
11120: PUSH
11121: LD_INT 16
11123: PUSH
11124: LD_INT 17
11126: PUSH
11127: LD_INT 18
11129: PUSH
11130: LD_INT 19
11132: PUSH
11133: LD_INT 20
11135: PUSH
11136: LD_INT 21
11138: PUSH
11139: LD_INT 22
11141: PUSH
11142: LD_INT 23
11144: PUSH
11145: LD_INT 24
11147: PUSH
11148: LD_INT 25
11150: PUSH
11151: LD_INT 26
11153: PUSH
11154: LD_INT 27
11156: PUSH
11157: LD_INT 28
11159: PUSH
11160: LD_INT 29
11162: PUSH
11163: LD_INT 30
11165: PUSH
11166: LD_INT 31
11168: PUSH
11169: LD_INT 32
11171: PUSH
11172: LD_INT 33
11174: PUSH
11175: LD_INT 34
11177: PUSH
11178: LD_INT 35
11180: PUSH
11181: LD_INT 36
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 101
11224: PUSH
11225: LD_INT 102
11227: PUSH
11228: LD_INT 103
11230: PUSH
11231: LD_INT 104
11233: PUSH
11234: LD_INT 105
11236: PUSH
11237: LD_INT 106
11239: PUSH
11240: LD_INT 107
11242: PUSH
11243: LD_INT 108
11245: PUSH
11246: LD_INT 109
11248: PUSH
11249: LD_INT 110
11251: PUSH
11252: LD_INT 111
11254: PUSH
11255: LD_INT 112
11257: PUSH
11258: LD_INT 113
11260: PUSH
11261: LD_INT 114
11263: PUSH
11264: LD_INT 115
11266: PUSH
11267: LD_INT 116
11269: PUSH
11270: LD_INT 117
11272: PUSH
11273: LD_INT 118
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: ST_TO_ADDR
11300: GO 11303
11302: POP
// end else
11303: GO 11534
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11305: LD_ADDR_VAR 0 1
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: LD_INT 3
11318: PUSH
11319: LD_INT 4
11321: PUSH
11322: LD_INT 5
11324: PUSH
11325: LD_INT 6
11327: PUSH
11328: LD_INT 7
11330: PUSH
11331: LD_INT 8
11333: PUSH
11334: LD_INT 9
11336: PUSH
11337: LD_INT 10
11339: PUSH
11340: LD_INT 11
11342: PUSH
11343: LD_INT 12
11345: PUSH
11346: LD_INT 13
11348: PUSH
11349: LD_INT 14
11351: PUSH
11352: LD_INT 15
11354: PUSH
11355: LD_INT 16
11357: PUSH
11358: LD_INT 17
11360: PUSH
11361: LD_INT 18
11363: PUSH
11364: LD_INT 19
11366: PUSH
11367: LD_INT 20
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 22
11375: PUSH
11376: LD_INT 23
11378: PUSH
11379: LD_INT 24
11381: PUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 26
11387: PUSH
11388: LD_INT 27
11390: PUSH
11391: LD_INT 28
11393: PUSH
11394: LD_INT 29
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 31
11402: PUSH
11403: LD_INT 32
11405: PUSH
11406: LD_INT 33
11408: PUSH
11409: LD_INT 34
11411: PUSH
11412: LD_INT 35
11414: PUSH
11415: LD_INT 36
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 101
11458: PUSH
11459: LD_INT 102
11461: PUSH
11462: LD_INT 103
11464: PUSH
11465: LD_INT 104
11467: PUSH
11468: LD_INT 105
11470: PUSH
11471: LD_INT 106
11473: PUSH
11474: LD_INT 107
11476: PUSH
11477: LD_INT 108
11479: PUSH
11480: LD_INT 109
11482: PUSH
11483: LD_INT 110
11485: PUSH
11486: LD_INT 111
11488: PUSH
11489: LD_INT 112
11491: PUSH
11492: LD_INT 113
11494: PUSH
11495: LD_INT 114
11497: PUSH
11498: LD_INT 115
11500: PUSH
11501: LD_INT 116
11503: PUSH
11504: LD_INT 117
11506: PUSH
11507: LD_INT 118
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: ST_TO_ADDR
// if result then
11534: LD_VAR 0 1
11538: IFFALSE 11827
// begin normal :=  ;
11540: LD_ADDR_VAR 0 3
11544: PUSH
11545: LD_STRING 
11547: ST_TO_ADDR
// hardcore :=  ;
11548: LD_ADDR_VAR 0 4
11552: PUSH
11553: LD_STRING 
11555: ST_TO_ADDR
// for i = 1 to normalCounter do
11556: LD_ADDR_VAR 0 5
11560: PUSH
11561: DOUBLE
11562: LD_INT 1
11564: DEC
11565: ST_TO_ADDR
11566: LD_EXP 28
11570: PUSH
11571: FOR_TO
11572: IFFALSE 11673
// begin tmp := 0 ;
11574: LD_ADDR_VAR 0 2
11578: PUSH
11579: LD_STRING 0
11581: ST_TO_ADDR
// if result [ 1 ] then
11582: LD_VAR 0 1
11586: PUSH
11587: LD_INT 1
11589: ARRAY
11590: IFFALSE 11655
// if result [ 1 ] [ 1 ] = i then
11592: LD_VAR 0 1
11596: PUSH
11597: LD_INT 1
11599: ARRAY
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PUSH
11605: LD_VAR 0 5
11609: EQUAL
11610: IFFALSE 11655
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11612: LD_ADDR_VAR 0 1
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: LD_INT 1
11624: PPUSH
11625: LD_VAR 0 1
11629: PUSH
11630: LD_INT 1
11632: ARRAY
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 3
11641: PPUSH
11642: CALL_OW 1
11646: ST_TO_ADDR
// tmp := 1 ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_STRING 1
11654: ST_TO_ADDR
// end ; normal := normal & tmp ;
11655: LD_ADDR_VAR 0 3
11659: PUSH
11660: LD_VAR 0 3
11664: PUSH
11665: LD_VAR 0 2
11669: STR
11670: ST_TO_ADDR
// end ;
11671: GO 11571
11673: POP
11674: POP
// for i = 1 to hardcoreCounter do
11675: LD_ADDR_VAR 0 5
11679: PUSH
11680: DOUBLE
11681: LD_INT 1
11683: DEC
11684: ST_TO_ADDR
11685: LD_EXP 29
11689: PUSH
11690: FOR_TO
11691: IFFALSE 11796
// begin tmp := 0 ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_STRING 0
11700: ST_TO_ADDR
// if result [ 2 ] then
11701: LD_VAR 0 1
11705: PUSH
11706: LD_INT 2
11708: ARRAY
11709: IFFALSE 11778
// if result [ 2 ] [ 1 ] = 100 + i then
11711: LD_VAR 0 1
11715: PUSH
11716: LD_INT 2
11718: ARRAY
11719: PUSH
11720: LD_INT 1
11722: ARRAY
11723: PUSH
11724: LD_INT 100
11726: PUSH
11727: LD_VAR 0 5
11731: PLUS
11732: EQUAL
11733: IFFALSE 11778
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11735: LD_ADDR_VAR 0 1
11739: PUSH
11740: LD_VAR 0 1
11744: PPUSH
11745: LD_INT 2
11747: PPUSH
11748: LD_VAR 0 1
11752: PUSH
11753: LD_INT 2
11755: ARRAY
11756: PPUSH
11757: LD_INT 1
11759: PPUSH
11760: CALL_OW 3
11764: PPUSH
11765: CALL_OW 1
11769: ST_TO_ADDR
// tmp := 1 ;
11770: LD_ADDR_VAR 0 2
11774: PUSH
11775: LD_STRING 1
11777: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11778: LD_ADDR_VAR 0 4
11782: PUSH
11783: LD_VAR 0 4
11787: PUSH
11788: LD_VAR 0 2
11792: STR
11793: ST_TO_ADDR
// end ;
11794: GO 11690
11796: POP
11797: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11798: LD_STRING getStreamItemsFromMission("
11800: PUSH
11801: LD_VAR 0 3
11805: STR
11806: PUSH
11807: LD_STRING ","
11809: STR
11810: PUSH
11811: LD_VAR 0 4
11815: STR
11816: PUSH
11817: LD_STRING ")
11819: STR
11820: PPUSH
11821: CALL_OW 559
// end else
11825: GO 11834
// ToLua ( getStreamItemsFromMission("","") ) ;
11827: LD_STRING getStreamItemsFromMission("","")
11829: PPUSH
11830: CALL_OW 559
// end ;
11834: LD_VAR 0 1
11838: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11839: LD_EXP 27
11843: PUSH
11844: LD_EXP 32
11848: AND
11849: IFFALSE 11973
11851: GO 11853
11853: DISABLE
11854: LD_INT 0
11856: PPUSH
11857: PPUSH
// begin enable ;
11858: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_OWVAR 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 2
11878: PUSH
11879: LD_INT 34
11881: PUSH
11882: LD_INT 7
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 45
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 34
11901: PUSH
11902: LD_INT 28
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 34
11911: PUSH
11912: LD_INT 47
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: ST_TO_ADDR
// if not tmp then
11935: LD_VAR 0 2
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 11973
// for i in tmp do
11944: LD_ADDR_VAR 0 1
11948: PUSH
11949: LD_VAR 0 2
11953: PUSH
11954: FOR_IN
11955: IFFALSE 11971
// begin SetLives ( i , 0 ) ;
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_INT 0
11964: PPUSH
11965: CALL_OW 234
// end ;
11969: GO 11954
11971: POP
11972: POP
// end ;
11973: PPOPN 2
11975: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11976: LD_EXP 27
11980: PUSH
11981: LD_EXP 33
11985: AND
11986: IFFALSE 12070
11988: GO 11990
11990: DISABLE
11991: LD_INT 0
11993: PPUSH
11994: PPUSH
// begin enable ;
11995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11996: LD_ADDR_VAR 0 2
12000: PUSH
12001: LD_INT 22
12003: PUSH
12004: LD_OWVAR 2
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 32
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: ST_TO_ADDR
// if not tmp then
12032: LD_VAR 0 2
12036: NOT
12037: IFFALSE 12041
// exit ;
12039: GO 12070
// for i in tmp do
12041: LD_ADDR_VAR 0 1
12045: PUSH
12046: LD_VAR 0 2
12050: PUSH
12051: FOR_IN
12052: IFFALSE 12068
// begin SetLives ( i , 0 ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_INT 0
12061: PPUSH
12062: CALL_OW 234
// end ;
12066: GO 12051
12068: POP
12069: POP
// end ;
12070: PPOPN 2
12072: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12073: LD_EXP 27
12077: PUSH
12078: LD_EXP 30
12082: AND
12083: IFFALSE 12176
12085: GO 12087
12087: DISABLE
12088: LD_INT 0
12090: PPUSH
// begin enable ;
12091: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12092: LD_ADDR_VAR 0 1
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: LD_OWVAR 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: LD_INT 25
12114: PUSH
12115: LD_INT 5
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 25
12124: PUSH
12125: LD_INT 9
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 25
12134: PUSH
12135: LD_INT 8
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PPUSH
12152: CALL_OW 69
12156: PUSH
12157: FOR_IN
12158: IFFALSE 12174
// begin SetClass ( i , 1 ) ;
12160: LD_VAR 0 1
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 336
// end ;
12172: GO 12157
12174: POP
12175: POP
// end ;
12176: PPOPN 1
12178: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12179: LD_EXP 27
12183: PUSH
12184: LD_EXP 31
12188: AND
12189: PUSH
12190: LD_OWVAR 65
12194: PUSH
12195: LD_INT 7
12197: LESS
12198: AND
12199: IFFALSE 12213
12201: GO 12203
12203: DISABLE
// begin enable ;
12204: ENABLE
// game_speed := 7 ;
12205: LD_ADDR_OWVAR 65
12209: PUSH
12210: LD_INT 7
12212: ST_TO_ADDR
// end ;
12213: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12214: LD_EXP 27
12218: PUSH
12219: LD_EXP 34
12223: AND
12224: IFFALSE 12426
12226: GO 12228
12228: DISABLE
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
12233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12234: LD_ADDR_VAR 0 3
12238: PUSH
12239: LD_INT 81
12241: PUSH
12242: LD_OWVAR 2
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 21
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: ST_TO_ADDR
// if not tmp then
12270: LD_VAR 0 3
12274: NOT
12275: IFFALSE 12279
// exit ;
12277: GO 12426
// if tmp > 5 then
12279: LD_VAR 0 3
12283: PUSH
12284: LD_INT 5
12286: GREATER
12287: IFFALSE 12299
// k := 5 else
12289: LD_ADDR_VAR 0 2
12293: PUSH
12294: LD_INT 5
12296: ST_TO_ADDR
12297: GO 12309
// k := tmp ;
12299: LD_ADDR_VAR 0 2
12303: PUSH
12304: LD_VAR 0 3
12308: ST_TO_ADDR
// for i := 1 to k do
12309: LD_ADDR_VAR 0 1
12313: PUSH
12314: DOUBLE
12315: LD_INT 1
12317: DEC
12318: ST_TO_ADDR
12319: LD_VAR 0 2
12323: PUSH
12324: FOR_TO
12325: IFFALSE 12424
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12327: LD_VAR 0 3
12331: PUSH
12332: LD_VAR 0 1
12336: ARRAY
12337: PPUSH
12338: LD_VAR 0 1
12342: PUSH
12343: LD_INT 4
12345: MOD
12346: PUSH
12347: LD_INT 1
12349: PLUS
12350: PPUSH
12351: CALL_OW 259
12355: PUSH
12356: LD_INT 10
12358: LESS
12359: IFFALSE 12422
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12361: LD_VAR 0 3
12365: PUSH
12366: LD_VAR 0 1
12370: ARRAY
12371: PPUSH
12372: LD_VAR 0 1
12376: PUSH
12377: LD_INT 4
12379: MOD
12380: PUSH
12381: LD_INT 1
12383: PLUS
12384: PPUSH
12385: LD_VAR 0 3
12389: PUSH
12390: LD_VAR 0 1
12394: ARRAY
12395: PPUSH
12396: LD_VAR 0 1
12400: PUSH
12401: LD_INT 4
12403: MOD
12404: PUSH
12405: LD_INT 1
12407: PLUS
12408: PPUSH
12409: CALL_OW 259
12413: PUSH
12414: LD_INT 1
12416: PLUS
12417: PPUSH
12418: CALL_OW 237
12422: GO 12324
12424: POP
12425: POP
// end ;
12426: PPOPN 3
12428: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12429: LD_EXP 27
12433: PUSH
12434: LD_EXP 35
12438: AND
12439: IFFALSE 12459
12441: GO 12443
12443: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12444: LD_INT 4
12446: PPUSH
12447: LD_OWVAR 2
12451: PPUSH
12452: LD_INT 0
12454: PPUSH
12455: CALL_OW 324
12459: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12460: LD_EXP 27
12464: PUSH
12465: LD_EXP 64
12469: AND
12470: IFFALSE 12490
12472: GO 12474
12474: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12475: LD_INT 19
12477: PPUSH
12478: LD_OWVAR 2
12482: PPUSH
12483: LD_INT 0
12485: PPUSH
12486: CALL_OW 324
12490: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12491: LD_EXP 27
12495: PUSH
12496: LD_EXP 36
12500: AND
12501: IFFALSE 12603
12503: GO 12505
12505: DISABLE
12506: LD_INT 0
12508: PPUSH
12509: PPUSH
// begin enable ;
12510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12511: LD_ADDR_VAR 0 2
12515: PUSH
12516: LD_INT 22
12518: PUSH
12519: LD_OWVAR 2
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: LD_INT 34
12533: PUSH
12534: LD_INT 11
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 34
12543: PUSH
12544: LD_INT 30
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PPUSH
12560: CALL_OW 69
12564: ST_TO_ADDR
// if not tmp then
12565: LD_VAR 0 2
12569: NOT
12570: IFFALSE 12574
// exit ;
12572: GO 12603
// for i in tmp do
12574: LD_ADDR_VAR 0 1
12578: PUSH
12579: LD_VAR 0 2
12583: PUSH
12584: FOR_IN
12585: IFFALSE 12601
// begin SetLives ( i , 0 ) ;
12587: LD_VAR 0 1
12591: PPUSH
12592: LD_INT 0
12594: PPUSH
12595: CALL_OW 234
// end ;
12599: GO 12584
12601: POP
12602: POP
// end ;
12603: PPOPN 2
12605: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12606: LD_EXP 27
12610: PUSH
12611: LD_EXP 37
12615: AND
12616: IFFALSE 12636
12618: GO 12620
12620: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12621: LD_INT 32
12623: PPUSH
12624: LD_OWVAR 2
12628: PPUSH
12629: LD_INT 0
12631: PPUSH
12632: CALL_OW 324
12636: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12637: LD_EXP 27
12641: PUSH
12642: LD_EXP 38
12646: AND
12647: IFFALSE 12828
12649: GO 12651
12651: DISABLE
12652: LD_INT 0
12654: PPUSH
12655: PPUSH
12656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12657: LD_ADDR_VAR 0 2
12661: PUSH
12662: LD_INT 22
12664: PUSH
12665: LD_OWVAR 2
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 33
12676: PUSH
12677: LD_INT 3
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PPUSH
12688: CALL_OW 69
12692: ST_TO_ADDR
// if not tmp then
12693: LD_VAR 0 2
12697: NOT
12698: IFFALSE 12702
// exit ;
12700: GO 12828
// side := 0 ;
12702: LD_ADDR_VAR 0 3
12706: PUSH
12707: LD_INT 0
12709: ST_TO_ADDR
// for i := 1 to 8 do
12710: LD_ADDR_VAR 0 1
12714: PUSH
12715: DOUBLE
12716: LD_INT 1
12718: DEC
12719: ST_TO_ADDR
12720: LD_INT 8
12722: PUSH
12723: FOR_TO
12724: IFFALSE 12772
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12726: LD_OWVAR 2
12730: PUSH
12731: LD_VAR 0 1
12735: NONEQUAL
12736: PUSH
12737: LD_OWVAR 2
12741: PPUSH
12742: LD_VAR 0 1
12746: PPUSH
12747: CALL_OW 81
12751: PUSH
12752: LD_INT 2
12754: EQUAL
12755: AND
12756: IFFALSE 12770
// begin side := i ;
12758: LD_ADDR_VAR 0 3
12762: PUSH
12763: LD_VAR 0 1
12767: ST_TO_ADDR
// break ;
12768: GO 12772
// end ;
12770: GO 12723
12772: POP
12773: POP
// if not side then
12774: LD_VAR 0 3
12778: NOT
12779: IFFALSE 12783
// exit ;
12781: GO 12828
// for i := 1 to tmp do
12783: LD_ADDR_VAR 0 1
12787: PUSH
12788: DOUBLE
12789: LD_INT 1
12791: DEC
12792: ST_TO_ADDR
12793: LD_VAR 0 2
12797: PUSH
12798: FOR_TO
12799: IFFALSE 12826
// if Prob ( 60 ) then
12801: LD_INT 60
12803: PPUSH
12804: CALL_OW 13
12808: IFFALSE 12824
// SetSide ( i , side ) ;
12810: LD_VAR 0 1
12814: PPUSH
12815: LD_VAR 0 3
12819: PPUSH
12820: CALL_OW 235
12824: GO 12798
12826: POP
12827: POP
// end ;
12828: PPOPN 3
12830: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12831: LD_EXP 27
12835: PUSH
12836: LD_EXP 40
12840: AND
12841: IFFALSE 12960
12843: GO 12845
12845: DISABLE
12846: LD_INT 0
12848: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12849: LD_ADDR_VAR 0 1
12853: PUSH
12854: LD_INT 22
12856: PUSH
12857: LD_OWVAR 2
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 21
12868: PUSH
12869: LD_INT 1
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 3
12878: PUSH
12879: LD_INT 23
12881: PUSH
12882: LD_INT 0
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 69
12902: PUSH
12903: FOR_IN
12904: IFFALSE 12958
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12906: LD_VAR 0 1
12910: PPUSH
12911: CALL_OW 257
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: LD_INT 2
12921: PUSH
12922: LD_INT 3
12924: PUSH
12925: LD_INT 4
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: IN
12934: IFFALSE 12956
// SetClass ( un , rand ( 1 , 4 ) ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: LD_INT 4
12946: PPUSH
12947: CALL_OW 12
12951: PPUSH
12952: CALL_OW 336
12956: GO 12903
12958: POP
12959: POP
// end ;
12960: PPOPN 1
12962: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12963: LD_EXP 27
12967: PUSH
12968: LD_EXP 39
12972: AND
12973: IFFALSE 13052
12975: GO 12977
12977: DISABLE
12978: LD_INT 0
12980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12981: LD_ADDR_VAR 0 1
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_OWVAR 2
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 21
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 69
13016: ST_TO_ADDR
// if not tmp then
13017: LD_VAR 0 1
13021: NOT
13022: IFFALSE 13026
// exit ;
13024: GO 13052
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13026: LD_VAR 0 1
13030: PUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_VAR 0 1
13038: PPUSH
13039: CALL_OW 12
13043: ARRAY
13044: PPUSH
13045: LD_INT 100
13047: PPUSH
13048: CALL_OW 234
// end ;
13052: PPOPN 1
13054: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13055: LD_EXP 27
13059: PUSH
13060: LD_EXP 41
13064: AND
13065: IFFALSE 13163
13067: GO 13069
13069: DISABLE
13070: LD_INT 0
13072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13073: LD_ADDR_VAR 0 1
13077: PUSH
13078: LD_INT 22
13080: PUSH
13081: LD_OWVAR 2
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 1
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 69
13108: ST_TO_ADDR
// if not tmp then
13109: LD_VAR 0 1
13113: NOT
13114: IFFALSE 13118
// exit ;
13116: GO 13163
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13118: LD_VAR 0 1
13122: PUSH
13123: LD_INT 1
13125: PPUSH
13126: LD_VAR 0 1
13130: PPUSH
13131: CALL_OW 12
13135: ARRAY
13136: PPUSH
13137: LD_INT 1
13139: PPUSH
13140: LD_INT 4
13142: PPUSH
13143: CALL_OW 12
13147: PPUSH
13148: LD_INT 3000
13150: PPUSH
13151: LD_INT 9000
13153: PPUSH
13154: CALL_OW 12
13158: PPUSH
13159: CALL_OW 492
// end ;
13163: PPOPN 1
13165: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13166: LD_EXP 27
13170: PUSH
13171: LD_EXP 42
13175: AND
13176: IFFALSE 13196
13178: GO 13180
13180: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13181: LD_INT 1
13183: PPUSH
13184: LD_OWVAR 2
13188: PPUSH
13189: LD_INT 0
13191: PPUSH
13192: CALL_OW 324
13196: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13197: LD_EXP 27
13201: PUSH
13202: LD_EXP 43
13206: AND
13207: IFFALSE 13290
13209: GO 13211
13211: DISABLE
13212: LD_INT 0
13214: PPUSH
13215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13216: LD_ADDR_VAR 0 2
13220: PUSH
13221: LD_INT 22
13223: PUSH
13224: LD_OWVAR 2
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 21
13235: PUSH
13236: LD_INT 3
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PPUSH
13247: CALL_OW 69
13251: ST_TO_ADDR
// if not tmp then
13252: LD_VAR 0 2
13256: NOT
13257: IFFALSE 13261
// exit ;
13259: GO 13290
// for i in tmp do
13261: LD_ADDR_VAR 0 1
13265: PUSH
13266: LD_VAR 0 2
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13288
// SetBLevel ( i , 10 ) ;
13274: LD_VAR 0 1
13278: PPUSH
13279: LD_INT 10
13281: PPUSH
13282: CALL_OW 241
13286: GO 13271
13288: POP
13289: POP
// end ;
13290: PPOPN 2
13292: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13293: LD_EXP 27
13297: PUSH
13298: LD_EXP 44
13302: AND
13303: IFFALSE 13414
13305: GO 13307
13307: DISABLE
13308: LD_INT 0
13310: PPUSH
13311: PPUSH
13312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13313: LD_ADDR_VAR 0 3
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_OWVAR 2
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 25
13332: PUSH
13333: LD_INT 1
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PPUSH
13344: CALL_OW 69
13348: ST_TO_ADDR
// if not tmp then
13349: LD_VAR 0 3
13353: NOT
13354: IFFALSE 13358
// exit ;
13356: GO 13414
// un := tmp [ rand ( 1 , tmp ) ] ;
13358: LD_ADDR_VAR 0 2
13362: PUSH
13363: LD_VAR 0 3
13367: PUSH
13368: LD_INT 1
13370: PPUSH
13371: LD_VAR 0 3
13375: PPUSH
13376: CALL_OW 12
13380: ARRAY
13381: ST_TO_ADDR
// if Crawls ( un ) then
13382: LD_VAR 0 2
13386: PPUSH
13387: CALL_OW 318
13391: IFFALSE 13402
// ComWalk ( un ) ;
13393: LD_VAR 0 2
13397: PPUSH
13398: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13402: LD_VAR 0 2
13406: PPUSH
13407: LD_INT 5
13409: PPUSH
13410: CALL_OW 336
// end ;
13414: PPOPN 3
13416: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13417: LD_EXP 27
13421: PUSH
13422: LD_EXP 45
13426: AND
13427: PUSH
13428: LD_OWVAR 67
13432: PUSH
13433: LD_INT 4
13435: LESS
13436: AND
13437: IFFALSE 13456
13439: GO 13441
13441: DISABLE
// begin Difficulty := Difficulty + 1 ;
13442: LD_ADDR_OWVAR 67
13446: PUSH
13447: LD_OWVAR 67
13451: PUSH
13452: LD_INT 1
13454: PLUS
13455: ST_TO_ADDR
// end ;
13456: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13457: LD_EXP 27
13461: PUSH
13462: LD_EXP 46
13466: AND
13467: IFFALSE 13570
13469: GO 13471
13471: DISABLE
13472: LD_INT 0
13474: PPUSH
// begin for i := 1 to 5 do
13475: LD_ADDR_VAR 0 1
13479: PUSH
13480: DOUBLE
13481: LD_INT 1
13483: DEC
13484: ST_TO_ADDR
13485: LD_INT 5
13487: PUSH
13488: FOR_TO
13489: IFFALSE 13568
// begin uc_nation := nation_nature ;
13491: LD_ADDR_OWVAR 21
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// uc_side := 0 ;
13499: LD_ADDR_OWVAR 20
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13507: LD_ADDR_OWVAR 29
13511: PUSH
13512: LD_INT 12
13514: PUSH
13515: LD_INT 12
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: ST_TO_ADDR
// hc_agressivity := 20 ;
13522: LD_ADDR_OWVAR 35
13526: PUSH
13527: LD_INT 20
13529: ST_TO_ADDR
// hc_class := class_tiger ;
13530: LD_ADDR_OWVAR 28
13534: PUSH
13535: LD_INT 14
13537: ST_TO_ADDR
// hc_gallery :=  ;
13538: LD_ADDR_OWVAR 33
13542: PUSH
13543: LD_STRING 
13545: ST_TO_ADDR
// hc_name :=  ;
13546: LD_ADDR_OWVAR 26
13550: PUSH
13551: LD_STRING 
13553: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13554: CALL_OW 44
13558: PPUSH
13559: LD_INT 0
13561: PPUSH
13562: CALL_OW 51
// end ;
13566: GO 13488
13568: POP
13569: POP
// end ;
13570: PPOPN 1
13572: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13573: LD_EXP 27
13577: PUSH
13578: LD_EXP 47
13582: AND
13583: IFFALSE 13592
13585: GO 13587
13587: DISABLE
// StreamSibBomb ;
13588: CALL 13593 0 0
13592: END
// export function StreamSibBomb ; var i , x , y ; begin
13593: LD_INT 0
13595: PPUSH
13596: PPUSH
13597: PPUSH
13598: PPUSH
// result := false ;
13599: LD_ADDR_VAR 0 1
13603: PUSH
13604: LD_INT 0
13606: ST_TO_ADDR
// for i := 1 to 16 do
13607: LD_ADDR_VAR 0 2
13611: PUSH
13612: DOUBLE
13613: LD_INT 1
13615: DEC
13616: ST_TO_ADDR
13617: LD_INT 16
13619: PUSH
13620: FOR_TO
13621: IFFALSE 13820
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13623: LD_ADDR_VAR 0 3
13627: PUSH
13628: LD_INT 10
13630: PUSH
13631: LD_INT 20
13633: PUSH
13634: LD_INT 30
13636: PUSH
13637: LD_INT 40
13639: PUSH
13640: LD_INT 50
13642: PUSH
13643: LD_INT 60
13645: PUSH
13646: LD_INT 70
13648: PUSH
13649: LD_INT 80
13651: PUSH
13652: LD_INT 90
13654: PUSH
13655: LD_INT 100
13657: PUSH
13658: LD_INT 110
13660: PUSH
13661: LD_INT 120
13663: PUSH
13664: LD_INT 130
13666: PUSH
13667: LD_INT 140
13669: PUSH
13670: LD_INT 150
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 1
13692: PPUSH
13693: LD_INT 15
13695: PPUSH
13696: CALL_OW 12
13700: ARRAY
13701: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13702: LD_ADDR_VAR 0 4
13706: PUSH
13707: LD_INT 10
13709: PUSH
13710: LD_INT 20
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_INT 40
13718: PUSH
13719: LD_INT 50
13721: PUSH
13722: LD_INT 60
13724: PUSH
13725: LD_INT 70
13727: PUSH
13728: LD_INT 80
13730: PUSH
13731: LD_INT 90
13733: PUSH
13734: LD_INT 100
13736: PUSH
13737: LD_INT 110
13739: PUSH
13740: LD_INT 120
13742: PUSH
13743: LD_INT 130
13745: PUSH
13746: LD_INT 140
13748: PUSH
13749: LD_INT 150
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 1
13771: PPUSH
13772: LD_INT 15
13774: PPUSH
13775: CALL_OW 12
13779: ARRAY
13780: ST_TO_ADDR
// if ValidHex ( x , y ) then
13781: LD_VAR 0 3
13785: PPUSH
13786: LD_VAR 0 4
13790: PPUSH
13791: CALL_OW 488
13795: IFFALSE 13818
// begin result := [ x , y ] ;
13797: LD_ADDR_VAR 0 1
13801: PUSH
13802: LD_VAR 0 3
13806: PUSH
13807: LD_VAR 0 4
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: ST_TO_ADDR
// break ;
13816: GO 13820
// end ; end ;
13818: GO 13620
13820: POP
13821: POP
// if result then
13822: LD_VAR 0 1
13826: IFFALSE 13886
// begin ToLua ( playSibBomb() ) ;
13828: LD_STRING playSibBomb()
13830: PPUSH
13831: CALL_OW 559
// wait ( 0 0$14 ) ;
13835: LD_INT 490
13837: PPUSH
13838: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13842: LD_VAR 0 1
13846: PUSH
13847: LD_INT 1
13849: ARRAY
13850: PPUSH
13851: LD_VAR 0 1
13855: PUSH
13856: LD_INT 2
13858: ARRAY
13859: PPUSH
13860: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13864: LD_VAR 0 1
13868: PUSH
13869: LD_INT 1
13871: ARRAY
13872: PPUSH
13873: LD_VAR 0 1
13877: PUSH
13878: LD_INT 2
13880: ARRAY
13881: PPUSH
13882: CALL_OW 429
// end ; end ;
13886: LD_VAR 0 1
13890: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13891: LD_EXP 27
13895: PUSH
13896: LD_EXP 49
13900: AND
13901: IFFALSE 13913
13903: GO 13905
13905: DISABLE
// YouLost (  ) ;
13906: LD_STRING 
13908: PPUSH
13909: CALL_OW 104
13913: END
// every 0 0$1 trigger StreamModeActive and sFog do
13914: LD_EXP 27
13918: PUSH
13919: LD_EXP 48
13923: AND
13924: IFFALSE 13938
13926: GO 13928
13928: DISABLE
// FogOff ( your_side ) ;
13929: LD_OWVAR 2
13933: PPUSH
13934: CALL_OW 344
13938: END
// every 0 0$1 trigger StreamModeActive and sSun do
13939: LD_EXP 27
13943: PUSH
13944: LD_EXP 50
13948: AND
13949: IFFALSE 13977
13951: GO 13953
13953: DISABLE
// begin solar_recharge_percent := 0 ;
13954: LD_ADDR_OWVAR 79
13958: PUSH
13959: LD_INT 0
13961: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13962: LD_INT 10500
13964: PPUSH
13965: CALL_OW 67
// solar_recharge_percent := 100 ;
13969: LD_ADDR_OWVAR 79
13973: PUSH
13974: LD_INT 100
13976: ST_TO_ADDR
// end ;
13977: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13978: LD_EXP 27
13982: PUSH
13983: LD_EXP 51
13987: AND
13988: IFFALSE 14227
13990: GO 13992
13992: DISABLE
13993: LD_INT 0
13995: PPUSH
13996: PPUSH
13997: PPUSH
// begin tmp := [ ] ;
13998: LD_ADDR_VAR 0 3
14002: PUSH
14003: EMPTY
14004: ST_TO_ADDR
// for i := 1 to 6 do
14005: LD_ADDR_VAR 0 1
14009: PUSH
14010: DOUBLE
14011: LD_INT 1
14013: DEC
14014: ST_TO_ADDR
14015: LD_INT 6
14017: PUSH
14018: FOR_TO
14019: IFFALSE 14124
// begin uc_nation := nation_nature ;
14021: LD_ADDR_OWVAR 21
14025: PUSH
14026: LD_INT 0
14028: ST_TO_ADDR
// uc_side := 0 ;
14029: LD_ADDR_OWVAR 20
14033: PUSH
14034: LD_INT 0
14036: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14037: LD_ADDR_OWVAR 29
14041: PUSH
14042: LD_INT 12
14044: PUSH
14045: LD_INT 12
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: ST_TO_ADDR
// hc_agressivity := 20 ;
14052: LD_ADDR_OWVAR 35
14056: PUSH
14057: LD_INT 20
14059: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14060: LD_ADDR_OWVAR 28
14064: PUSH
14065: LD_INT 17
14067: ST_TO_ADDR
// hc_gallery :=  ;
14068: LD_ADDR_OWVAR 33
14072: PUSH
14073: LD_STRING 
14075: ST_TO_ADDR
// hc_name :=  ;
14076: LD_ADDR_OWVAR 26
14080: PUSH
14081: LD_STRING 
14083: ST_TO_ADDR
// un := CreateHuman ;
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: CALL_OW 44
14093: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14094: LD_VAR 0 2
14098: PPUSH
14099: LD_INT 1
14101: PPUSH
14102: CALL_OW 51
// tmp := tmp ^ un ;
14106: LD_ADDR_VAR 0 3
14110: PUSH
14111: LD_VAR 0 3
14115: PUSH
14116: LD_VAR 0 2
14120: ADD
14121: ST_TO_ADDR
// end ;
14122: GO 14018
14124: POP
14125: POP
// repeat wait ( 0 0$1 ) ;
14126: LD_INT 35
14128: PPUSH
14129: CALL_OW 67
// for un in tmp do
14133: LD_ADDR_VAR 0 2
14137: PUSH
14138: LD_VAR 0 3
14142: PUSH
14143: FOR_IN
14144: IFFALSE 14218
// begin if IsDead ( un ) then
14146: LD_VAR 0 2
14150: PPUSH
14151: CALL_OW 301
14155: IFFALSE 14175
// begin tmp := tmp diff un ;
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_VAR 0 3
14166: PUSH
14167: LD_VAR 0 2
14171: DIFF
14172: ST_TO_ADDR
// continue ;
14173: GO 14143
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14175: LD_VAR 0 2
14179: PPUSH
14180: LD_INT 3
14182: PUSH
14183: LD_INT 22
14185: PUSH
14186: LD_INT 0
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PPUSH
14197: CALL_OW 69
14201: PPUSH
14202: LD_VAR 0 2
14206: PPUSH
14207: CALL_OW 74
14211: PPUSH
14212: CALL_OW 115
// end ;
14216: GO 14143
14218: POP
14219: POP
// until not tmp ;
14220: LD_VAR 0 3
14224: NOT
14225: IFFALSE 14126
// end ;
14227: PPOPN 3
14229: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14230: LD_EXP 27
14234: PUSH
14235: LD_EXP 52
14239: AND
14240: IFFALSE 14294
14242: GO 14244
14244: DISABLE
// begin ToLua ( displayTroll(); ) ;
14245: LD_STRING displayTroll();
14247: PPUSH
14248: CALL_OW 559
// wait ( 3 3$00 ) ;
14252: LD_INT 6300
14254: PPUSH
14255: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14259: LD_STRING hideTroll();
14261: PPUSH
14262: CALL_OW 559
// wait ( 1 1$00 ) ;
14266: LD_INT 2100
14268: PPUSH
14269: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14273: LD_STRING displayTroll();
14275: PPUSH
14276: CALL_OW 559
// wait ( 1 1$00 ) ;
14280: LD_INT 2100
14282: PPUSH
14283: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14287: LD_STRING hideTroll();
14289: PPUSH
14290: CALL_OW 559
// end ;
14294: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14295: LD_EXP 27
14299: PUSH
14300: LD_EXP 53
14304: AND
14305: IFFALSE 14368
14307: GO 14309
14309: DISABLE
14310: LD_INT 0
14312: PPUSH
// begin p := 0 ;
14313: LD_ADDR_VAR 0 1
14317: PUSH
14318: LD_INT 0
14320: ST_TO_ADDR
// repeat game_speed := 1 ;
14321: LD_ADDR_OWVAR 65
14325: PUSH
14326: LD_INT 1
14328: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14329: LD_INT 35
14331: PPUSH
14332: CALL_OW 67
// p := p + 1 ;
14336: LD_ADDR_VAR 0 1
14340: PUSH
14341: LD_VAR 0 1
14345: PUSH
14346: LD_INT 1
14348: PLUS
14349: ST_TO_ADDR
// until p >= 60 ;
14350: LD_VAR 0 1
14354: PUSH
14355: LD_INT 60
14357: GREATEREQUAL
14358: IFFALSE 14321
// game_speed := 4 ;
14360: LD_ADDR_OWVAR 65
14364: PUSH
14365: LD_INT 4
14367: ST_TO_ADDR
// end ;
14368: PPOPN 1
14370: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14371: LD_EXP 27
14375: PUSH
14376: LD_EXP 54
14380: AND
14381: IFFALSE 14527
14383: GO 14385
14385: DISABLE
14386: LD_INT 0
14388: PPUSH
14389: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14390: LD_ADDR_VAR 0 1
14394: PUSH
14395: LD_INT 22
14397: PUSH
14398: LD_OWVAR 2
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 2
14409: PUSH
14410: LD_INT 30
14412: PUSH
14413: LD_INT 0
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 30
14422: PUSH
14423: LD_INT 1
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 69
14443: ST_TO_ADDR
// if not depot then
14444: LD_VAR 0 1
14448: NOT
14449: IFFALSE 14453
// exit ;
14451: GO 14527
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14453: LD_ADDR_VAR 0 2
14457: PUSH
14458: LD_VAR 0 1
14462: PUSH
14463: LD_INT 1
14465: PPUSH
14466: LD_VAR 0 1
14470: PPUSH
14471: CALL_OW 12
14475: ARRAY
14476: PPUSH
14477: CALL_OW 274
14481: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14482: LD_VAR 0 2
14486: PPUSH
14487: LD_INT 1
14489: PPUSH
14490: LD_INT 0
14492: PPUSH
14493: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14497: LD_VAR 0 2
14501: PPUSH
14502: LD_INT 2
14504: PPUSH
14505: LD_INT 0
14507: PPUSH
14508: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14512: LD_VAR 0 2
14516: PPUSH
14517: LD_INT 3
14519: PPUSH
14520: LD_INT 0
14522: PPUSH
14523: CALL_OW 277
// end ;
14527: PPOPN 2
14529: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14530: LD_EXP 27
14534: PUSH
14535: LD_EXP 55
14539: AND
14540: IFFALSE 14637
14542: GO 14544
14544: DISABLE
14545: LD_INT 0
14547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14548: LD_ADDR_VAR 0 1
14552: PUSH
14553: LD_INT 22
14555: PUSH
14556: LD_OWVAR 2
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 21
14567: PUSH
14568: LD_INT 1
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 3
14577: PUSH
14578: LD_INT 23
14580: PUSH
14581: LD_INT 0
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: PPUSH
14597: CALL_OW 69
14601: ST_TO_ADDR
// if not tmp then
14602: LD_VAR 0 1
14606: NOT
14607: IFFALSE 14611
// exit ;
14609: GO 14637
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14611: LD_VAR 0 1
14615: PUSH
14616: LD_INT 1
14618: PPUSH
14619: LD_VAR 0 1
14623: PPUSH
14624: CALL_OW 12
14628: ARRAY
14629: PPUSH
14630: LD_INT 200
14632: PPUSH
14633: CALL_OW 234
// end ;
14637: PPOPN 1
14639: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14640: LD_EXP 27
14644: PUSH
14645: LD_EXP 56
14649: AND
14650: IFFALSE 14729
14652: GO 14654
14654: DISABLE
14655: LD_INT 0
14657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14658: LD_ADDR_VAR 0 1
14662: PUSH
14663: LD_INT 22
14665: PUSH
14666: LD_OWVAR 2
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 21
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PPUSH
14689: CALL_OW 69
14693: ST_TO_ADDR
// if not tmp then
14694: LD_VAR 0 1
14698: NOT
14699: IFFALSE 14703
// exit ;
14701: GO 14729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14703: LD_VAR 0 1
14707: PUSH
14708: LD_INT 1
14710: PPUSH
14711: LD_VAR 0 1
14715: PPUSH
14716: CALL_OW 12
14720: ARRAY
14721: PPUSH
14722: LD_INT 60
14724: PPUSH
14725: CALL_OW 234
// end ;
14729: PPOPN 1
14731: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14732: LD_EXP 27
14736: PUSH
14737: LD_EXP 57
14741: AND
14742: IFFALSE 14841
14744: GO 14746
14746: DISABLE
14747: LD_INT 0
14749: PPUSH
14750: PPUSH
// begin enable ;
14751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14752: LD_ADDR_VAR 0 1
14756: PUSH
14757: LD_INT 22
14759: PUSH
14760: LD_OWVAR 2
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 61
14771: PUSH
14772: EMPTY
14773: LIST
14774: PUSH
14775: LD_INT 33
14777: PUSH
14778: LD_INT 2
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: LIST
14789: PPUSH
14790: CALL_OW 69
14794: ST_TO_ADDR
// if not tmp then
14795: LD_VAR 0 1
14799: NOT
14800: IFFALSE 14804
// exit ;
14802: GO 14841
// for i in tmp do
14804: LD_ADDR_VAR 0 2
14808: PUSH
14809: LD_VAR 0 1
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14839
// if IsControledBy ( i ) then
14817: LD_VAR 0 2
14821: PPUSH
14822: CALL_OW 312
14826: IFFALSE 14837
// ComUnlink ( i ) ;
14828: LD_VAR 0 2
14832: PPUSH
14833: CALL_OW 136
14837: GO 14814
14839: POP
14840: POP
// end ;
14841: PPOPN 2
14843: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14844: LD_EXP 27
14848: PUSH
14849: LD_EXP 58
14853: AND
14854: IFFALSE 14994
14856: GO 14858
14858: DISABLE
14859: LD_INT 0
14861: PPUSH
14862: PPUSH
// begin ToLua ( displayPowell(); ) ;
14863: LD_STRING displayPowell();
14865: PPUSH
14866: CALL_OW 559
// uc_side := 0 ;
14870: LD_ADDR_OWVAR 20
14874: PUSH
14875: LD_INT 0
14877: ST_TO_ADDR
// uc_nation := 2 ;
14878: LD_ADDR_OWVAR 21
14882: PUSH
14883: LD_INT 2
14885: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14886: LD_ADDR_OWVAR 37
14890: PUSH
14891: LD_INT 14
14893: ST_TO_ADDR
// vc_engine := engine_siberite ;
14894: LD_ADDR_OWVAR 39
14898: PUSH
14899: LD_INT 3
14901: ST_TO_ADDR
// vc_control := control_apeman ;
14902: LD_ADDR_OWVAR 38
14906: PUSH
14907: LD_INT 5
14909: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14910: LD_ADDR_OWVAR 40
14914: PUSH
14915: LD_INT 29
14917: ST_TO_ADDR
// un := CreateVehicle ;
14918: LD_ADDR_VAR 0 2
14922: PUSH
14923: CALL_OW 45
14927: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14928: LD_VAR 0 2
14932: PPUSH
14933: LD_INT 1
14935: PPUSH
14936: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14940: LD_INT 35
14942: PPUSH
14943: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14947: LD_VAR 0 2
14951: PPUSH
14952: LD_INT 22
14954: PUSH
14955: LD_OWVAR 2
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 69
14968: PPUSH
14969: LD_VAR 0 2
14973: PPUSH
14974: CALL_OW 74
14978: PPUSH
14979: CALL_OW 115
// until IsDead ( un ) ;
14983: LD_VAR 0 2
14987: PPUSH
14988: CALL_OW 301
14992: IFFALSE 14940
// end ;
14994: PPOPN 2
14996: END
// every 0 0$1 trigger StreamModeActive and sStu do
14997: LD_EXP 27
15001: PUSH
15002: LD_EXP 66
15006: AND
15007: IFFALSE 15023
15009: GO 15011
15011: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15012: LD_STRING displayStucuk();
15014: PPUSH
15015: CALL_OW 559
// ResetFog ;
15019: CALL_OW 335
// end ;
15023: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15024: LD_EXP 27
15028: PUSH
15029: LD_EXP 59
15033: AND
15034: IFFALSE 15175
15036: GO 15038
15038: DISABLE
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15043: LD_ADDR_VAR 0 2
15047: PUSH
15048: LD_INT 22
15050: PUSH
15051: LD_OWVAR 2
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 69
15078: ST_TO_ADDR
// if not tmp then
15079: LD_VAR 0 2
15083: NOT
15084: IFFALSE 15088
// exit ;
15086: GO 15175
// un := tmp [ rand ( 1 , tmp ) ] ;
15088: LD_ADDR_VAR 0 1
15092: PUSH
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 1
15100: PPUSH
15101: LD_VAR 0 2
15105: PPUSH
15106: CALL_OW 12
15110: ARRAY
15111: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15112: LD_VAR 0 1
15116: PPUSH
15117: LD_INT 0
15119: PPUSH
15120: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15124: LD_VAR 0 1
15128: PPUSH
15129: LD_OWVAR 3
15133: PUSH
15134: LD_VAR 0 1
15138: DIFF
15139: PPUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: CALL_OW 74
15149: PPUSH
15150: CALL_OW 115
// wait ( 0 0$20 ) ;
15154: LD_INT 700
15156: PPUSH
15157: CALL_OW 67
// SetSide ( un , your_side ) ;
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_OWVAR 2
15170: PPUSH
15171: CALL_OW 235
// end ;
15175: PPOPN 2
15177: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15178: LD_EXP 27
15182: PUSH
15183: LD_EXP 60
15187: AND
15188: IFFALSE 15294
15190: GO 15192
15192: DISABLE
15193: LD_INT 0
15195: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15196: LD_ADDR_VAR 0 1
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_OWVAR 2
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: LD_INT 30
15218: PUSH
15219: LD_INT 0
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 30
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 69
15249: ST_TO_ADDR
// if not depot then
15250: LD_VAR 0 1
15254: NOT
15255: IFFALSE 15259
// exit ;
15257: GO 15294
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15259: LD_VAR 0 1
15263: PUSH
15264: LD_INT 1
15266: ARRAY
15267: PPUSH
15268: CALL_OW 250
15272: PPUSH
15273: LD_VAR 0 1
15277: PUSH
15278: LD_INT 1
15280: ARRAY
15281: PPUSH
15282: CALL_OW 251
15286: PPUSH
15287: LD_INT 70
15289: PPUSH
15290: CALL_OW 495
// end ;
15294: PPOPN 1
15296: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15297: LD_EXP 27
15301: PUSH
15302: LD_EXP 61
15306: AND
15307: IFFALSE 15518
15309: GO 15311
15311: DISABLE
15312: LD_INT 0
15314: PPUSH
15315: PPUSH
15316: PPUSH
15317: PPUSH
15318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_INT 22
15326: PUSH
15327: LD_OWVAR 2
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 21
15338: PUSH
15339: LD_INT 1
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PPUSH
15350: CALL_OW 69
15354: ST_TO_ADDR
// if not tmp then
15355: LD_VAR 0 5
15359: NOT
15360: IFFALSE 15364
// exit ;
15362: GO 15518
// for i in tmp do
15364: LD_ADDR_VAR 0 1
15368: PUSH
15369: LD_VAR 0 5
15373: PUSH
15374: FOR_IN
15375: IFFALSE 15516
// begin d := rand ( 0 , 5 ) ;
15377: LD_ADDR_VAR 0 4
15381: PUSH
15382: LD_INT 0
15384: PPUSH
15385: LD_INT 5
15387: PPUSH
15388: CALL_OW 12
15392: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15393: LD_ADDR_VAR 0 2
15397: PUSH
15398: LD_VAR 0 1
15402: PPUSH
15403: CALL_OW 250
15407: PPUSH
15408: LD_VAR 0 4
15412: PPUSH
15413: LD_INT 3
15415: PPUSH
15416: LD_INT 12
15418: PPUSH
15419: CALL_OW 12
15423: PPUSH
15424: CALL_OW 272
15428: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15429: LD_ADDR_VAR 0 3
15433: PUSH
15434: LD_VAR 0 1
15438: PPUSH
15439: CALL_OW 251
15443: PPUSH
15444: LD_VAR 0 4
15448: PPUSH
15449: LD_INT 3
15451: PPUSH
15452: LD_INT 12
15454: PPUSH
15455: CALL_OW 12
15459: PPUSH
15460: CALL_OW 273
15464: ST_TO_ADDR
// if ValidHex ( x , y ) then
15465: LD_VAR 0 2
15469: PPUSH
15470: LD_VAR 0 3
15474: PPUSH
15475: CALL_OW 488
15479: IFFALSE 15514
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_INT 3
15498: PPUSH
15499: LD_INT 6
15501: PPUSH
15502: CALL_OW 12
15506: PPUSH
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 483
// end ;
15514: GO 15374
15516: POP
15517: POP
// end ;
15518: PPOPN 5
15520: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15521: LD_EXP 27
15525: PUSH
15526: LD_EXP 62
15530: AND
15531: IFFALSE 15625
15533: GO 15535
15535: DISABLE
15536: LD_INT 0
15538: PPUSH
15539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15540: LD_ADDR_VAR 0 2
15544: PUSH
15545: LD_INT 22
15547: PUSH
15548: LD_OWVAR 2
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 32
15559: PUSH
15560: LD_INT 1
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 21
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 69
15586: ST_TO_ADDR
// if not tmp then
15587: LD_VAR 0 2
15591: NOT
15592: IFFALSE 15596
// exit ;
15594: GO 15625
// for i in tmp do
15596: LD_ADDR_VAR 0 1
15600: PUSH
15601: LD_VAR 0 2
15605: PUSH
15606: FOR_IN
15607: IFFALSE 15623
// SetFuel ( i , 0 ) ;
15609: LD_VAR 0 1
15613: PPUSH
15614: LD_INT 0
15616: PPUSH
15617: CALL_OW 240
15621: GO 15606
15623: POP
15624: POP
// end ;
15625: PPOPN 2
15627: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15628: LD_EXP 27
15632: PUSH
15633: LD_EXP 63
15637: AND
15638: IFFALSE 15704
15640: GO 15642
15642: DISABLE
15643: LD_INT 0
15645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15646: LD_ADDR_VAR 0 1
15650: PUSH
15651: LD_INT 22
15653: PUSH
15654: LD_OWVAR 2
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 30
15665: PUSH
15666: LD_INT 29
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PPUSH
15677: CALL_OW 69
15681: ST_TO_ADDR
// if not tmp then
15682: LD_VAR 0 1
15686: NOT
15687: IFFALSE 15691
// exit ;
15689: GO 15704
// DestroyUnit ( tmp [ 1 ] ) ;
15691: LD_VAR 0 1
15695: PUSH
15696: LD_INT 1
15698: ARRAY
15699: PPUSH
15700: CALL_OW 65
// end ;
15704: PPOPN 1
15706: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15707: LD_EXP 27
15711: PUSH
15712: LD_EXP 65
15716: AND
15717: IFFALSE 15846
15719: GO 15721
15721: DISABLE
15722: LD_INT 0
15724: PPUSH
// begin uc_side := 0 ;
15725: LD_ADDR_OWVAR 20
15729: PUSH
15730: LD_INT 0
15732: ST_TO_ADDR
// uc_nation := nation_arabian ;
15733: LD_ADDR_OWVAR 21
15737: PUSH
15738: LD_INT 2
15740: ST_TO_ADDR
// hc_gallery :=  ;
15741: LD_ADDR_OWVAR 33
15745: PUSH
15746: LD_STRING 
15748: ST_TO_ADDR
// hc_name :=  ;
15749: LD_ADDR_OWVAR 26
15753: PUSH
15754: LD_STRING 
15756: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15757: LD_INT 1
15759: PPUSH
15760: LD_INT 11
15762: PPUSH
15763: LD_INT 10
15765: PPUSH
15766: CALL_OW 380
// un := CreateHuman ;
15770: LD_ADDR_VAR 0 1
15774: PUSH
15775: CALL_OW 44
15779: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15780: LD_VAR 0 1
15784: PPUSH
15785: LD_INT 1
15787: PPUSH
15788: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15792: LD_INT 35
15794: PPUSH
15795: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15799: LD_VAR 0 1
15803: PPUSH
15804: LD_INT 22
15806: PUSH
15807: LD_OWVAR 2
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PPUSH
15816: CALL_OW 69
15820: PPUSH
15821: LD_VAR 0 1
15825: PPUSH
15826: CALL_OW 74
15830: PPUSH
15831: CALL_OW 115
// until IsDead ( un ) ;
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 301
15844: IFFALSE 15792
// end ;
15846: PPOPN 1
15848: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15849: LD_EXP 27
15853: PUSH
15854: LD_EXP 67
15858: AND
15859: IFFALSE 15871
15861: GO 15863
15863: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15864: LD_STRING earthquake(getX(game), 0, 32)
15866: PPUSH
15867: CALL_OW 559
15871: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15872: LD_EXP 27
15876: PUSH
15877: LD_EXP 68
15881: AND
15882: IFFALSE 15973
15884: GO 15886
15886: DISABLE
15887: LD_INT 0
15889: PPUSH
// begin enable ;
15890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15891: LD_ADDR_VAR 0 1
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_OWVAR 2
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 33
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: PPUSH
15933: CALL_OW 69
15937: ST_TO_ADDR
// if not tmp then
15938: LD_VAR 0 1
15942: NOT
15943: IFFALSE 15947
// exit ;
15945: GO 15973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15947: LD_VAR 0 1
15951: PUSH
15952: LD_INT 1
15954: PPUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 12
15964: ARRAY
15965: PPUSH
15966: LD_INT 1
15968: PPUSH
15969: CALL_OW 234
// end ;
15973: PPOPN 1
15975: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15976: LD_EXP 27
15980: PUSH
15981: LD_EXP 69
15985: AND
15986: IFFALSE 16127
15988: GO 15990
15990: DISABLE
15991: LD_INT 0
15993: PPUSH
15994: PPUSH
15995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15996: LD_ADDR_VAR 0 3
16000: PUSH
16001: LD_INT 22
16003: PUSH
16004: LD_OWVAR 2
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 25
16015: PUSH
16016: LD_INT 1
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 69
16031: ST_TO_ADDR
// if not tmp then
16032: LD_VAR 0 3
16036: NOT
16037: IFFALSE 16041
// exit ;
16039: GO 16127
// un := tmp [ rand ( 1 , tmp ) ] ;
16041: LD_ADDR_VAR 0 2
16045: PUSH
16046: LD_VAR 0 3
16050: PUSH
16051: LD_INT 1
16053: PPUSH
16054: LD_VAR 0 3
16058: PPUSH
16059: CALL_OW 12
16063: ARRAY
16064: ST_TO_ADDR
// if Crawls ( un ) then
16065: LD_VAR 0 2
16069: PPUSH
16070: CALL_OW 318
16074: IFFALSE 16085
// ComWalk ( un ) ;
16076: LD_VAR 0 2
16080: PPUSH
16081: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16085: LD_VAR 0 2
16089: PPUSH
16090: LD_INT 9
16092: PPUSH
16093: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16097: LD_INT 28
16099: PPUSH
16100: LD_OWVAR 2
16104: PPUSH
16105: LD_INT 2
16107: PPUSH
16108: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16112: LD_INT 29
16114: PPUSH
16115: LD_OWVAR 2
16119: PPUSH
16120: LD_INT 2
16122: PPUSH
16123: CALL_OW 322
// end ;
16127: PPOPN 3
16129: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16130: LD_EXP 27
16134: PUSH
16135: LD_EXP 70
16139: AND
16140: IFFALSE 16251
16142: GO 16144
16144: DISABLE
16145: LD_INT 0
16147: PPUSH
16148: PPUSH
16149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_INT 22
16157: PUSH
16158: LD_OWVAR 2
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 25
16169: PUSH
16170: LD_INT 1
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PPUSH
16181: CALL_OW 69
16185: ST_TO_ADDR
// if not tmp then
16186: LD_VAR 0 3
16190: NOT
16191: IFFALSE 16195
// exit ;
16193: GO 16251
// un := tmp [ rand ( 1 , tmp ) ] ;
16195: LD_ADDR_VAR 0 2
16199: PUSH
16200: LD_VAR 0 3
16204: PUSH
16205: LD_INT 1
16207: PPUSH
16208: LD_VAR 0 3
16212: PPUSH
16213: CALL_OW 12
16217: ARRAY
16218: ST_TO_ADDR
// if Crawls ( un ) then
16219: LD_VAR 0 2
16223: PPUSH
16224: CALL_OW 318
16228: IFFALSE 16239
// ComWalk ( un ) ;
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16239: LD_VAR 0 2
16243: PPUSH
16244: LD_INT 8
16246: PPUSH
16247: CALL_OW 336
// end ;
16251: PPOPN 3
16253: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16254: LD_EXP 27
16258: PUSH
16259: LD_EXP 71
16263: AND
16264: IFFALSE 16408
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
16272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_INT 22
16280: PUSH
16281: LD_OWVAR 2
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 2
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 2
16302: PUSH
16303: LD_INT 34
16305: PUSH
16306: LD_INT 12
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 34
16315: PUSH
16316: LD_INT 51
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 34
16325: PUSH
16326: LD_INT 32
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: ST_TO_ADDR
// if not tmp then
16349: LD_VAR 0 2
16353: NOT
16354: IFFALSE 16358
// exit ;
16356: GO 16408
// for i in tmp do
16358: LD_ADDR_VAR 0 1
16362: PUSH
16363: LD_VAR 0 2
16367: PUSH
16368: FOR_IN
16369: IFFALSE 16406
// if GetCargo ( i , mat_artifact ) = 0 then
16371: LD_VAR 0 1
16375: PPUSH
16376: LD_INT 4
16378: PPUSH
16379: CALL_OW 289
16383: PUSH
16384: LD_INT 0
16386: EQUAL
16387: IFFALSE 16404
// SetCargo ( i , mat_siberit , 100 ) ;
16389: LD_VAR 0 1
16393: PPUSH
16394: LD_INT 3
16396: PPUSH
16397: LD_INT 100
16399: PPUSH
16400: CALL_OW 290
16404: GO 16368
16406: POP
16407: POP
// end ;
16408: PPOPN 2
16410: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16411: LD_EXP 27
16415: PUSH
16416: LD_EXP 72
16420: AND
16421: IFFALSE 16604
16423: GO 16425
16425: DISABLE
16426: LD_INT 0
16428: PPUSH
16429: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16430: LD_ADDR_VAR 0 2
16434: PUSH
16435: LD_INT 22
16437: PUSH
16438: LD_OWVAR 2
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PPUSH
16447: CALL_OW 69
16451: ST_TO_ADDR
// if not tmp then
16452: LD_VAR 0 2
16456: NOT
16457: IFFALSE 16461
// exit ;
16459: GO 16604
// for i := 1 to 2 do
16461: LD_ADDR_VAR 0 1
16465: PUSH
16466: DOUBLE
16467: LD_INT 1
16469: DEC
16470: ST_TO_ADDR
16471: LD_INT 2
16473: PUSH
16474: FOR_TO
16475: IFFALSE 16602
// begin uc_side := your_side ;
16477: LD_ADDR_OWVAR 20
16481: PUSH
16482: LD_OWVAR 2
16486: ST_TO_ADDR
// uc_nation := nation_american ;
16487: LD_ADDR_OWVAR 21
16491: PUSH
16492: LD_INT 1
16494: ST_TO_ADDR
// vc_chassis := us_morphling ;
16495: LD_ADDR_OWVAR 37
16499: PUSH
16500: LD_INT 5
16502: ST_TO_ADDR
// vc_engine := engine_siberite ;
16503: LD_ADDR_OWVAR 39
16507: PUSH
16508: LD_INT 3
16510: ST_TO_ADDR
// vc_control := control_computer ;
16511: LD_ADDR_OWVAR 38
16515: PUSH
16516: LD_INT 3
16518: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16519: LD_ADDR_OWVAR 40
16523: PUSH
16524: LD_INT 10
16526: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16527: LD_VAR 0 2
16531: PUSH
16532: LD_INT 1
16534: ARRAY
16535: PPUSH
16536: CALL_OW 310
16540: NOT
16541: IFFALSE 16588
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16543: CALL_OW 45
16547: PPUSH
16548: LD_VAR 0 2
16552: PUSH
16553: LD_INT 1
16555: ARRAY
16556: PPUSH
16557: CALL_OW 250
16561: PPUSH
16562: LD_VAR 0 2
16566: PUSH
16567: LD_INT 1
16569: ARRAY
16570: PPUSH
16571: CALL_OW 251
16575: PPUSH
16576: LD_INT 12
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: CALL_OW 50
16586: GO 16600
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16588: CALL_OW 45
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 51
// end ;
16600: GO 16474
16602: POP
16603: POP
// end ;
16604: PPOPN 2
16606: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16607: LD_EXP 27
16611: PUSH
16612: LD_EXP 73
16616: AND
16617: IFFALSE 16839
16619: GO 16621
16621: DISABLE
16622: LD_INT 0
16624: PPUSH
16625: PPUSH
16626: PPUSH
16627: PPUSH
16628: PPUSH
16629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16630: LD_ADDR_VAR 0 6
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_OWVAR 2
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 23
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: PPUSH
16679: CALL_OW 69
16683: ST_TO_ADDR
// if not tmp then
16684: LD_VAR 0 6
16688: NOT
16689: IFFALSE 16693
// exit ;
16691: GO 16839
// s1 := rand ( 1 , 4 ) ;
16693: LD_ADDR_VAR 0 2
16697: PUSH
16698: LD_INT 1
16700: PPUSH
16701: LD_INT 4
16703: PPUSH
16704: CALL_OW 12
16708: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16709: LD_ADDR_VAR 0 4
16713: PUSH
16714: LD_VAR 0 6
16718: PUSH
16719: LD_INT 1
16721: ARRAY
16722: PPUSH
16723: LD_VAR 0 2
16727: PPUSH
16728: CALL_OW 259
16732: ST_TO_ADDR
// if s1 = 1 then
16733: LD_VAR 0 2
16737: PUSH
16738: LD_INT 1
16740: EQUAL
16741: IFFALSE 16761
// s2 := rand ( 2 , 4 ) else
16743: LD_ADDR_VAR 0 3
16747: PUSH
16748: LD_INT 2
16750: PPUSH
16751: LD_INT 4
16753: PPUSH
16754: CALL_OW 12
16758: ST_TO_ADDR
16759: GO 16769
// s2 := 1 ;
16761: LD_ADDR_VAR 0 3
16765: PUSH
16766: LD_INT 1
16768: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16769: LD_ADDR_VAR 0 5
16773: PUSH
16774: LD_VAR 0 6
16778: PUSH
16779: LD_INT 1
16781: ARRAY
16782: PPUSH
16783: LD_VAR 0 3
16787: PPUSH
16788: CALL_OW 259
16792: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16793: LD_VAR 0 6
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_VAR 0 2
16806: PPUSH
16807: LD_VAR 0 5
16811: PPUSH
16812: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16816: LD_VAR 0 6
16820: PUSH
16821: LD_INT 1
16823: ARRAY
16824: PPUSH
16825: LD_VAR 0 3
16829: PPUSH
16830: LD_VAR 0 4
16834: PPUSH
16835: CALL_OW 237
// end ;
16839: PPOPN 6
16841: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16842: LD_EXP 27
16846: PUSH
16847: LD_EXP 74
16851: AND
16852: IFFALSE 16931
16854: GO 16856
16856: DISABLE
16857: LD_INT 0
16859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16860: LD_ADDR_VAR 0 1
16864: PUSH
16865: LD_INT 22
16867: PUSH
16868: LD_OWVAR 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 30
16879: PUSH
16880: LD_INT 3
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: ST_TO_ADDR
// if not tmp then
16896: LD_VAR 0 1
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 16931
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16905: LD_VAR 0 1
16909: PUSH
16910: LD_INT 1
16912: PPUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 12
16922: ARRAY
16923: PPUSH
16924: LD_INT 1
16926: PPUSH
16927: CALL_OW 234
// end ;
16931: PPOPN 1
16933: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16934: LD_EXP 27
16938: PUSH
16939: LD_EXP 75
16943: AND
16944: IFFALSE 17056
16946: GO 16948
16948: DISABLE
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16953: LD_ADDR_VAR 0 2
16957: PUSH
16958: LD_INT 22
16960: PUSH
16961: LD_OWVAR 2
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: LD_INT 30
16975: PUSH
16976: LD_INT 27
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 30
16985: PUSH
16986: LD_INT 26
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 30
16995: PUSH
16996: LD_INT 28
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 69
17017: ST_TO_ADDR
// if not tmp then
17018: LD_VAR 0 2
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17056
// for i in tmp do
17027: LD_ADDR_VAR 0 1
17031: PUSH
17032: LD_VAR 0 2
17036: PUSH
17037: FOR_IN
17038: IFFALSE 17054
// SetLives ( i , 1 ) ;
17040: LD_VAR 0 1
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 234
17052: GO 17037
17054: POP
17055: POP
// end ;
17056: PPOPN 2
17058: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17059: LD_EXP 27
17063: PUSH
17064: LD_EXP 76
17068: AND
17069: IFFALSE 17356
17071: GO 17073
17073: DISABLE
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
17078: PPUSH
// begin i := rand ( 1 , 7 ) ;
17079: LD_ADDR_VAR 0 1
17083: PUSH
17084: LD_INT 1
17086: PPUSH
17087: LD_INT 7
17089: PPUSH
17090: CALL_OW 12
17094: ST_TO_ADDR
// case i of 1 :
17095: LD_VAR 0 1
17099: PUSH
17100: LD_INT 1
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17118
17108: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17109: LD_STRING earthquake(getX(game), 0, 32)
17111: PPUSH
17112: CALL_OW 559
17116: GO 17356
17118: LD_INT 2
17120: DOUBLE
17121: EQUAL
17122: IFTRUE 17126
17124: GO 17140
17126: POP
// begin ToLua ( displayStucuk(); ) ;
17127: LD_STRING displayStucuk();
17129: PPUSH
17130: CALL_OW 559
// ResetFog ;
17134: CALL_OW 335
// end ; 3 :
17138: GO 17356
17140: LD_INT 3
17142: DOUBLE
17143: EQUAL
17144: IFTRUE 17148
17146: GO 17252
17148: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 22
17156: PUSH
17157: LD_OWVAR 2
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 25
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PPUSH
17180: CALL_OW 69
17184: ST_TO_ADDR
// if not tmp then
17185: LD_VAR 0 2
17189: NOT
17190: IFFALSE 17194
// exit ;
17192: GO 17356
// un := tmp [ rand ( 1 , tmp ) ] ;
17194: LD_ADDR_VAR 0 3
17198: PUSH
17199: LD_VAR 0 2
17203: PUSH
17204: LD_INT 1
17206: PPUSH
17207: LD_VAR 0 2
17211: PPUSH
17212: CALL_OW 12
17216: ARRAY
17217: ST_TO_ADDR
// if Crawls ( un ) then
17218: LD_VAR 0 3
17222: PPUSH
17223: CALL_OW 318
17227: IFFALSE 17238
// ComWalk ( un ) ;
17229: LD_VAR 0 3
17233: PPUSH
17234: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17238: LD_VAR 0 3
17242: PPUSH
17243: LD_INT 8
17245: PPUSH
17246: CALL_OW 336
// end ; 4 :
17250: GO 17356
17252: LD_INT 4
17254: DOUBLE
17255: EQUAL
17256: IFTRUE 17260
17258: GO 17334
17260: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17261: LD_ADDR_VAR 0 2
17265: PUSH
17266: LD_INT 22
17268: PUSH
17269: LD_OWVAR 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 30
17280: PUSH
17281: LD_INT 29
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 2
17301: NOT
17302: IFFALSE 17306
// exit ;
17304: GO 17356
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17306: LD_VAR 0 2
17310: PUSH
17311: LD_INT 1
17313: ARRAY
17314: PPUSH
17315: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17319: LD_VAR 0 2
17323: PUSH
17324: LD_INT 1
17326: ARRAY
17327: PPUSH
17328: CALL_OW 65
// end ; 5 .. 7 :
17332: GO 17356
17334: LD_INT 5
17336: DOUBLE
17337: GREATEREQUAL
17338: IFFALSE 17346
17340: LD_INT 7
17342: DOUBLE
17343: LESSEQUAL
17344: IFTRUE 17348
17346: GO 17355
17348: POP
// StreamSibBomb ; end ;
17349: CALL 13593 0 0
17353: GO 17356
17355: POP
// end ;
17356: PPOPN 3
17358: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17359: LD_EXP 27
17363: PUSH
17364: LD_EXP 77
17368: AND
17369: IFFALSE 17525
17371: GO 17373
17373: DISABLE
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17379: LD_ADDR_VAR 0 2
17383: PUSH
17384: LD_INT 81
17386: PUSH
17387: LD_OWVAR 2
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 2
17398: PUSH
17399: LD_INT 21
17401: PUSH
17402: LD_INT 1
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 21
17411: PUSH
17412: LD_INT 2
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PPUSH
17428: CALL_OW 69
17432: ST_TO_ADDR
// if not tmp then
17433: LD_VAR 0 2
17437: NOT
17438: IFFALSE 17442
// exit ;
17440: GO 17525
// p := 0 ;
17442: LD_ADDR_VAR 0 3
17446: PUSH
17447: LD_INT 0
17449: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17450: LD_INT 35
17452: PPUSH
17453: CALL_OW 67
// p := p + 1 ;
17457: LD_ADDR_VAR 0 3
17461: PUSH
17462: LD_VAR 0 3
17466: PUSH
17467: LD_INT 1
17469: PLUS
17470: ST_TO_ADDR
// for i in tmp do
17471: LD_ADDR_VAR 0 1
17475: PUSH
17476: LD_VAR 0 2
17480: PUSH
17481: FOR_IN
17482: IFFALSE 17513
// if GetLives ( i ) < 1000 then
17484: LD_VAR 0 1
17488: PPUSH
17489: CALL_OW 256
17493: PUSH
17494: LD_INT 1000
17496: LESS
17497: IFFALSE 17511
// SetLives ( i , 1000 ) ;
17499: LD_VAR 0 1
17503: PPUSH
17504: LD_INT 1000
17506: PPUSH
17507: CALL_OW 234
17511: GO 17481
17513: POP
17514: POP
// until p > 20 ;
17515: LD_VAR 0 3
17519: PUSH
17520: LD_INT 20
17522: GREATER
17523: IFFALSE 17450
// end ;
17525: PPOPN 3
17527: END
// every 0 0$1 trigger StreamModeActive and sTime do
17528: LD_EXP 27
17532: PUSH
17533: LD_EXP 78
17537: AND
17538: IFFALSE 17573
17540: GO 17542
17542: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17543: LD_INT 28
17545: PPUSH
17546: LD_OWVAR 2
17550: PPUSH
17551: LD_INT 2
17553: PPUSH
17554: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17558: LD_INT 30
17560: PPUSH
17561: LD_OWVAR 2
17565: PPUSH
17566: LD_INT 2
17568: PPUSH
17569: CALL_OW 322
// end ;
17573: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17574: LD_EXP 27
17578: PUSH
17579: LD_EXP 79
17583: AND
17584: IFFALSE 17705
17586: GO 17588
17588: DISABLE
17589: LD_INT 0
17591: PPUSH
17592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_OWVAR 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 3
17622: PUSH
17623: LD_INT 23
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: PPUSH
17642: CALL_OW 69
17646: ST_TO_ADDR
// if not tmp then
17647: LD_VAR 0 2
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17705
// for i in tmp do
17656: LD_ADDR_VAR 0 1
17660: PUSH
17661: LD_VAR 0 2
17665: PUSH
17666: FOR_IN
17667: IFFALSE 17703
// begin if Crawls ( i ) then
17669: LD_VAR 0 1
17673: PPUSH
17674: CALL_OW 318
17678: IFFALSE 17689
// ComWalk ( i ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 138
// SetClass ( i , 2 ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: LD_INT 2
17696: PPUSH
17697: CALL_OW 336
// end ;
17701: GO 17666
17703: POP
17704: POP
// end ;
17705: PPOPN 2
17707: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17708: LD_EXP 27
17712: PUSH
17713: LD_EXP 80
17717: AND
17718: IFFALSE 18006
17720: GO 17722
17722: DISABLE
17723: LD_INT 0
17725: PPUSH
17726: PPUSH
17727: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17728: LD_OWVAR 2
17732: PPUSH
17733: LD_INT 9
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: LD_INT 1
17741: PPUSH
17742: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17746: LD_INT 9
17748: PPUSH
17749: LD_OWVAR 2
17753: PPUSH
17754: CALL_OW 343
// uc_side := 9 ;
17758: LD_ADDR_OWVAR 20
17762: PUSH
17763: LD_INT 9
17765: ST_TO_ADDR
// uc_nation := 2 ;
17766: LD_ADDR_OWVAR 21
17770: PUSH
17771: LD_INT 2
17773: ST_TO_ADDR
// hc_name := Dark Warrior ;
17774: LD_ADDR_OWVAR 26
17778: PUSH
17779: LD_STRING Dark Warrior
17781: ST_TO_ADDR
// hc_gallery :=  ;
17782: LD_ADDR_OWVAR 33
17786: PUSH
17787: LD_STRING 
17789: ST_TO_ADDR
// hc_noskilllimit := true ;
17790: LD_ADDR_OWVAR 76
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17798: LD_ADDR_OWVAR 31
17802: PUSH
17803: LD_INT 30
17805: PUSH
17806: LD_INT 30
17808: PUSH
17809: LD_INT 30
17811: PUSH
17812: LD_INT 30
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: ST_TO_ADDR
// un := CreateHuman ;
17821: LD_ADDR_VAR 0 3
17825: PUSH
17826: CALL_OW 44
17830: ST_TO_ADDR
// hc_noskilllimit := false ;
17831: LD_ADDR_OWVAR 76
17835: PUSH
17836: LD_INT 0
17838: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17839: LD_VAR 0 3
17843: PPUSH
17844: LD_INT 1
17846: PPUSH
17847: CALL_OW 51
// ToLua ( playRanger() ) ;
17851: LD_STRING playRanger()
17853: PPUSH
17854: CALL_OW 559
// p := 0 ;
17858: LD_ADDR_VAR 0 2
17862: PUSH
17863: LD_INT 0
17865: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17866: LD_INT 35
17868: PPUSH
17869: CALL_OW 67
// p := p + 1 ;
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_VAR 0 2
17882: PUSH
17883: LD_INT 1
17885: PLUS
17886: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17887: LD_VAR 0 3
17891: PPUSH
17892: CALL_OW 256
17896: PUSH
17897: LD_INT 1000
17899: LESS
17900: IFFALSE 17914
// SetLives ( un , 1000 ) ;
17902: LD_VAR 0 3
17906: PPUSH
17907: LD_INT 1000
17909: PPUSH
17910: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_INT 81
17921: PUSH
17922: LD_OWVAR 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 91
17933: PUSH
17934: LD_VAR 0 3
17938: PUSH
17939: LD_INT 30
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 69
17955: PPUSH
17956: LD_VAR 0 3
17960: PPUSH
17961: CALL_OW 74
17965: PPUSH
17966: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17970: LD_VAR 0 2
17974: PUSH
17975: LD_INT 80
17977: GREATER
17978: PUSH
17979: LD_VAR 0 3
17983: PPUSH
17984: CALL_OW 301
17988: OR
17989: IFFALSE 17866
// if un then
17991: LD_VAR 0 3
17995: IFFALSE 18006
// RemoveUnit ( un ) ;
17997: LD_VAR 0 3
18001: PPUSH
18002: CALL_OW 64
// end ;
18006: PPOPN 3
18008: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18009: LD_EXP 81
18013: IFFALSE 18129
18015: GO 18017
18017: DISABLE
18018: LD_INT 0
18020: PPUSH
18021: PPUSH
18022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18023: LD_ADDR_VAR 0 2
18027: PUSH
18028: LD_INT 81
18030: PUSH
18031: LD_OWVAR 2
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 21
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PPUSH
18054: CALL_OW 69
18058: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18059: LD_STRING playComputer()
18061: PPUSH
18062: CALL_OW 559
// if not tmp then
18066: LD_VAR 0 2
18070: NOT
18071: IFFALSE 18075
// exit ;
18073: GO 18129
// for i in tmp do
18075: LD_ADDR_VAR 0 1
18079: PUSH
18080: LD_VAR 0 2
18084: PUSH
18085: FOR_IN
18086: IFFALSE 18127
// for j := 1 to 4 do
18088: LD_ADDR_VAR 0 3
18092: PUSH
18093: DOUBLE
18094: LD_INT 1
18096: DEC
18097: ST_TO_ADDR
18098: LD_INT 4
18100: PUSH
18101: FOR_TO
18102: IFFALSE 18123
// SetSkill ( i , j , 10 ) ;
18104: LD_VAR 0 1
18108: PPUSH
18109: LD_VAR 0 3
18113: PPUSH
18114: LD_INT 10
18116: PPUSH
18117: CALL_OW 237
18121: GO 18101
18123: POP
18124: POP
18125: GO 18085
18127: POP
18128: POP
// end ;
18129: PPOPN 3
18131: END
// every 0 0$1 trigger s30 do var i , tmp ;
18132: LD_EXP 82
18136: IFFALSE 18205
18138: GO 18140
18140: DISABLE
18141: LD_INT 0
18143: PPUSH
18144: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18145: LD_ADDR_VAR 0 2
18149: PUSH
18150: LD_INT 22
18152: PUSH
18153: LD_OWVAR 2
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL_OW 69
18166: ST_TO_ADDR
// if not tmp then
18167: LD_VAR 0 2
18171: NOT
18172: IFFALSE 18176
// exit ;
18174: GO 18205
// for i in tmp do
18176: LD_ADDR_VAR 0 1
18180: PUSH
18181: LD_VAR 0 2
18185: PUSH
18186: FOR_IN
18187: IFFALSE 18203
// SetLives ( i , 300 ) ;
18189: LD_VAR 0 1
18193: PPUSH
18194: LD_INT 300
18196: PPUSH
18197: CALL_OW 234
18201: GO 18186
18203: POP
18204: POP
// end ;
18205: PPOPN 2
18207: END
// every 0 0$1 trigger s60 do var i , tmp ;
18208: LD_EXP 83
18212: IFFALSE 18281
18214: GO 18216
18216: DISABLE
18217: LD_INT 0
18219: PPUSH
18220: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18221: LD_ADDR_VAR 0 2
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_OWVAR 2
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PPUSH
18238: CALL_OW 69
18242: ST_TO_ADDR
// if not tmp then
18243: LD_VAR 0 2
18247: NOT
18248: IFFALSE 18252
// exit ;
18250: GO 18281
// for i in tmp do
18252: LD_ADDR_VAR 0 1
18256: PUSH
18257: LD_VAR 0 2
18261: PUSH
18262: FOR_IN
18263: IFFALSE 18279
// SetLives ( i , 600 ) ;
18265: LD_VAR 0 1
18269: PPUSH
18270: LD_INT 600
18272: PPUSH
18273: CALL_OW 234
18277: GO 18262
18279: POP
18280: POP
// end ;
18281: PPOPN 2
18283: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18284: LD_INT 0
18286: PPUSH
// case cmd of 301 :
18287: LD_VAR 0 1
18291: PUSH
18292: LD_INT 301
18294: DOUBLE
18295: EQUAL
18296: IFTRUE 18300
18298: GO 18332
18300: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18301: LD_VAR 0 6
18305: PPUSH
18306: LD_VAR 0 7
18310: PPUSH
18311: LD_VAR 0 8
18315: PPUSH
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_VAR 0 5
18325: PPUSH
18326: CALL 19533 0 5
18330: GO 18453
18332: LD_INT 302
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18377
18340: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18341: LD_VAR 0 6
18345: PPUSH
18346: LD_VAR 0 7
18350: PPUSH
18351: LD_VAR 0 8
18355: PPUSH
18356: LD_VAR 0 9
18360: PPUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 5
18370: PPUSH
18371: CALL 19624 0 6
18375: GO 18453
18377: LD_INT 303
18379: DOUBLE
18380: EQUAL
18381: IFTRUE 18385
18383: GO 18422
18385: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18386: LD_VAR 0 6
18390: PPUSH
18391: LD_VAR 0 7
18395: PPUSH
18396: LD_VAR 0 8
18400: PPUSH
18401: LD_VAR 0 9
18405: PPUSH
18406: LD_VAR 0 4
18410: PPUSH
18411: LD_VAR 0 5
18415: PPUSH
18416: CALL 18458 0 6
18420: GO 18453
18422: LD_INT 304
18424: DOUBLE
18425: EQUAL
18426: IFTRUE 18430
18428: GO 18452
18430: POP
// hHackTeleport ( unit , x , y ) ; end ;
18431: LD_VAR 0 2
18435: PPUSH
18436: LD_VAR 0 4
18440: PPUSH
18441: LD_VAR 0 5
18445: PPUSH
18446: CALL 20217 0 3
18450: GO 18453
18452: POP
// end ;
18453: LD_VAR 0 12
18457: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18458: LD_INT 0
18460: PPUSH
18461: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18462: LD_VAR 0 1
18466: PUSH
18467: LD_INT 1
18469: LESS
18470: PUSH
18471: LD_VAR 0 1
18475: PUSH
18476: LD_INT 3
18478: GREATER
18479: OR
18480: PUSH
18481: LD_VAR 0 5
18485: PPUSH
18486: LD_VAR 0 6
18490: PPUSH
18491: CALL_OW 428
18495: OR
18496: IFFALSE 18500
// exit ;
18498: GO 19220
// uc_side := your_side ;
18500: LD_ADDR_OWVAR 20
18504: PUSH
18505: LD_OWVAR 2
18509: ST_TO_ADDR
// uc_nation := nation ;
18510: LD_ADDR_OWVAR 21
18514: PUSH
18515: LD_VAR 0 1
18519: ST_TO_ADDR
// bc_level = 1 ;
18520: LD_ADDR_OWVAR 43
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// case btype of 1 :
18528: LD_VAR 0 2
18532: PUSH
18533: LD_INT 1
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 18552
18541: POP
// bc_type := b_depot ; 2 :
18542: LD_ADDR_OWVAR 42
18546: PUSH
18547: LD_INT 0
18549: ST_TO_ADDR
18550: GO 19164
18552: LD_INT 2
18554: DOUBLE
18555: EQUAL
18556: IFTRUE 18560
18558: GO 18571
18560: POP
// bc_type := b_warehouse ; 3 :
18561: LD_ADDR_OWVAR 42
18565: PUSH
18566: LD_INT 1
18568: ST_TO_ADDR
18569: GO 19164
18571: LD_INT 3
18573: DOUBLE
18574: EQUAL
18575: IFTRUE 18579
18577: GO 18590
18579: POP
// bc_type := b_lab ; 4 .. 9 :
18580: LD_ADDR_OWVAR 42
18584: PUSH
18585: LD_INT 6
18587: ST_TO_ADDR
18588: GO 19164
18590: LD_INT 4
18592: DOUBLE
18593: GREATEREQUAL
18594: IFFALSE 18602
18596: LD_INT 9
18598: DOUBLE
18599: LESSEQUAL
18600: IFTRUE 18604
18602: GO 18656
18604: POP
// begin bc_type := b_lab_half ;
18605: LD_ADDR_OWVAR 42
18609: PUSH
18610: LD_INT 7
18612: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18613: LD_ADDR_OWVAR 44
18617: PUSH
18618: LD_INT 10
18620: PUSH
18621: LD_INT 11
18623: PUSH
18624: LD_INT 12
18626: PUSH
18627: LD_INT 15
18629: PUSH
18630: LD_INT 14
18632: PUSH
18633: LD_INT 13
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: PUSH
18644: LD_VAR 0 2
18648: PUSH
18649: LD_INT 3
18651: MINUS
18652: ARRAY
18653: ST_TO_ADDR
// end ; 10 .. 13 :
18654: GO 19164
18656: LD_INT 10
18658: DOUBLE
18659: GREATEREQUAL
18660: IFFALSE 18668
18662: LD_INT 13
18664: DOUBLE
18665: LESSEQUAL
18666: IFTRUE 18670
18668: GO 18747
18670: POP
// begin bc_type := b_lab_full ;
18671: LD_ADDR_OWVAR 42
18675: PUSH
18676: LD_INT 8
18678: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18679: LD_ADDR_OWVAR 44
18683: PUSH
18684: LD_INT 10
18686: PUSH
18687: LD_INT 12
18689: PUSH
18690: LD_INT 14
18692: PUSH
18693: LD_INT 13
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: PUSH
18702: LD_VAR 0 2
18706: PUSH
18707: LD_INT 9
18709: MINUS
18710: ARRAY
18711: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18712: LD_ADDR_OWVAR 45
18716: PUSH
18717: LD_INT 11
18719: PUSH
18720: LD_INT 15
18722: PUSH
18723: LD_INT 12
18725: PUSH
18726: LD_INT 15
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: PUSH
18735: LD_VAR 0 2
18739: PUSH
18740: LD_INT 9
18742: MINUS
18743: ARRAY
18744: ST_TO_ADDR
// end ; 14 :
18745: GO 19164
18747: LD_INT 14
18749: DOUBLE
18750: EQUAL
18751: IFTRUE 18755
18753: GO 18766
18755: POP
// bc_type := b_workshop ; 15 :
18756: LD_ADDR_OWVAR 42
18760: PUSH
18761: LD_INT 2
18763: ST_TO_ADDR
18764: GO 19164
18766: LD_INT 15
18768: DOUBLE
18769: EQUAL
18770: IFTRUE 18774
18772: GO 18785
18774: POP
// bc_type := b_factory ; 16 :
18775: LD_ADDR_OWVAR 42
18779: PUSH
18780: LD_INT 3
18782: ST_TO_ADDR
18783: GO 19164
18785: LD_INT 16
18787: DOUBLE
18788: EQUAL
18789: IFTRUE 18793
18791: GO 18804
18793: POP
// bc_type := b_ext_gun ; 17 :
18794: LD_ADDR_OWVAR 42
18798: PUSH
18799: LD_INT 17
18801: ST_TO_ADDR
18802: GO 19164
18804: LD_INT 17
18806: DOUBLE
18807: EQUAL
18808: IFTRUE 18812
18810: GO 18840
18812: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18813: LD_ADDR_OWVAR 42
18817: PUSH
18818: LD_INT 19
18820: PUSH
18821: LD_INT 23
18823: PUSH
18824: LD_INT 19
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: PUSH
18832: LD_VAR 0 1
18836: ARRAY
18837: ST_TO_ADDR
18838: GO 19164
18840: LD_INT 18
18842: DOUBLE
18843: EQUAL
18844: IFTRUE 18848
18846: GO 18859
18848: POP
// bc_type := b_ext_radar ; 19 :
18849: LD_ADDR_OWVAR 42
18853: PUSH
18854: LD_INT 20
18856: ST_TO_ADDR
18857: GO 19164
18859: LD_INT 19
18861: DOUBLE
18862: EQUAL
18863: IFTRUE 18867
18865: GO 18878
18867: POP
// bc_type := b_ext_radio ; 20 :
18868: LD_ADDR_OWVAR 42
18872: PUSH
18873: LD_INT 22
18875: ST_TO_ADDR
18876: GO 19164
18878: LD_INT 20
18880: DOUBLE
18881: EQUAL
18882: IFTRUE 18886
18884: GO 18897
18886: POP
// bc_type := b_ext_siberium ; 21 :
18887: LD_ADDR_OWVAR 42
18891: PUSH
18892: LD_INT 21
18894: ST_TO_ADDR
18895: GO 19164
18897: LD_INT 21
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18916
18905: POP
// bc_type := b_ext_computer ; 22 :
18906: LD_ADDR_OWVAR 42
18910: PUSH
18911: LD_INT 24
18913: ST_TO_ADDR
18914: GO 19164
18916: LD_INT 22
18918: DOUBLE
18919: EQUAL
18920: IFTRUE 18924
18922: GO 18935
18924: POP
// bc_type := b_ext_track ; 23 :
18925: LD_ADDR_OWVAR 42
18929: PUSH
18930: LD_INT 16
18932: ST_TO_ADDR
18933: GO 19164
18935: LD_INT 23
18937: DOUBLE
18938: EQUAL
18939: IFTRUE 18943
18941: GO 18954
18943: POP
// bc_type := b_ext_laser ; 24 :
18944: LD_ADDR_OWVAR 42
18948: PUSH
18949: LD_INT 25
18951: ST_TO_ADDR
18952: GO 19164
18954: LD_INT 24
18956: DOUBLE
18957: EQUAL
18958: IFTRUE 18962
18960: GO 18973
18962: POP
// bc_type := b_control_tower ; 25 :
18963: LD_ADDR_OWVAR 42
18967: PUSH
18968: LD_INT 36
18970: ST_TO_ADDR
18971: GO 19164
18973: LD_INT 25
18975: DOUBLE
18976: EQUAL
18977: IFTRUE 18981
18979: GO 18992
18981: POP
// bc_type := b_breastwork ; 26 :
18982: LD_ADDR_OWVAR 42
18986: PUSH
18987: LD_INT 31
18989: ST_TO_ADDR
18990: GO 19164
18992: LD_INT 26
18994: DOUBLE
18995: EQUAL
18996: IFTRUE 19000
18998: GO 19011
19000: POP
// bc_type := b_bunker ; 27 :
19001: LD_ADDR_OWVAR 42
19005: PUSH
19006: LD_INT 32
19008: ST_TO_ADDR
19009: GO 19164
19011: LD_INT 27
19013: DOUBLE
19014: EQUAL
19015: IFTRUE 19019
19017: GO 19030
19019: POP
// bc_type := b_turret ; 28 :
19020: LD_ADDR_OWVAR 42
19024: PUSH
19025: LD_INT 33
19027: ST_TO_ADDR
19028: GO 19164
19030: LD_INT 28
19032: DOUBLE
19033: EQUAL
19034: IFTRUE 19038
19036: GO 19049
19038: POP
// bc_type := b_armoury ; 29 :
19039: LD_ADDR_OWVAR 42
19043: PUSH
19044: LD_INT 4
19046: ST_TO_ADDR
19047: GO 19164
19049: LD_INT 29
19051: DOUBLE
19052: EQUAL
19053: IFTRUE 19057
19055: GO 19068
19057: POP
// bc_type := b_barracks ; 30 :
19058: LD_ADDR_OWVAR 42
19062: PUSH
19063: LD_INT 5
19065: ST_TO_ADDR
19066: GO 19164
19068: LD_INT 30
19070: DOUBLE
19071: EQUAL
19072: IFTRUE 19076
19074: GO 19087
19076: POP
// bc_type := b_solar_power ; 31 :
19077: LD_ADDR_OWVAR 42
19081: PUSH
19082: LD_INT 27
19084: ST_TO_ADDR
19085: GO 19164
19087: LD_INT 31
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19106
19095: POP
// bc_type := b_oil_power ; 32 :
19096: LD_ADDR_OWVAR 42
19100: PUSH
19101: LD_INT 26
19103: ST_TO_ADDR
19104: GO 19164
19106: LD_INT 32
19108: DOUBLE
19109: EQUAL
19110: IFTRUE 19114
19112: GO 19125
19114: POP
// bc_type := b_siberite_power ; 33 :
19115: LD_ADDR_OWVAR 42
19119: PUSH
19120: LD_INT 28
19122: ST_TO_ADDR
19123: GO 19164
19125: LD_INT 33
19127: DOUBLE
19128: EQUAL
19129: IFTRUE 19133
19131: GO 19144
19133: POP
// bc_type := b_oil_mine ; 34 :
19134: LD_ADDR_OWVAR 42
19138: PUSH
19139: LD_INT 29
19141: ST_TO_ADDR
19142: GO 19164
19144: LD_INT 34
19146: DOUBLE
19147: EQUAL
19148: IFTRUE 19152
19150: GO 19163
19152: POP
// bc_type := b_siberite_mine ; end ;
19153: LD_ADDR_OWVAR 42
19157: PUSH
19158: LD_INT 30
19160: ST_TO_ADDR
19161: GO 19164
19163: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19164: LD_ADDR_VAR 0 8
19168: PUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: LD_VAR 0 6
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: CALL_OW 47
19188: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19189: LD_OWVAR 42
19193: PUSH
19194: LD_INT 32
19196: PUSH
19197: LD_INT 33
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: IN
19204: IFFALSE 19220
// PlaceWeaponTurret ( b , weapon ) ;
19206: LD_VAR 0 8
19210: PPUSH
19211: LD_VAR 0 4
19215: PPUSH
19216: CALL_OW 431
// end ;
19220: LD_VAR 0 7
19224: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19225: LD_INT 0
19227: PPUSH
19228: PPUSH
19229: PPUSH
19230: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19231: LD_ADDR_VAR 0 4
19235: PUSH
19236: LD_INT 22
19238: PUSH
19239: LD_OWVAR 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: LD_INT 30
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 30
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PPUSH
19280: CALL_OW 69
19284: ST_TO_ADDR
// if not tmp then
19285: LD_VAR 0 4
19289: NOT
19290: IFFALSE 19294
// exit ;
19292: GO 19353
// for i in tmp do
19294: LD_ADDR_VAR 0 2
19298: PUSH
19299: LD_VAR 0 4
19303: PUSH
19304: FOR_IN
19305: IFFALSE 19351
// for j = 1 to 3 do
19307: LD_ADDR_VAR 0 3
19311: PUSH
19312: DOUBLE
19313: LD_INT 1
19315: DEC
19316: ST_TO_ADDR
19317: LD_INT 3
19319: PUSH
19320: FOR_TO
19321: IFFALSE 19347
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19323: LD_VAR 0 2
19327: PPUSH
19328: CALL_OW 274
19332: PPUSH
19333: LD_VAR 0 3
19337: PPUSH
19338: LD_INT 99999
19340: PPUSH
19341: CALL_OW 277
19345: GO 19320
19347: POP
19348: POP
19349: GO 19304
19351: POP
19352: POP
// end ;
19353: LD_VAR 0 1
19357: RET
// export function hHackSetLevel10 ; var i , j ; begin
19358: LD_INT 0
19360: PPUSH
19361: PPUSH
19362: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19363: LD_ADDR_VAR 0 2
19367: PUSH
19368: LD_INT 21
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PPUSH
19378: CALL_OW 69
19382: PUSH
19383: FOR_IN
19384: IFFALSE 19436
// if IsSelected ( i ) then
19386: LD_VAR 0 2
19390: PPUSH
19391: CALL_OW 306
19395: IFFALSE 19434
// begin for j := 1 to 4 do
19397: LD_ADDR_VAR 0 3
19401: PUSH
19402: DOUBLE
19403: LD_INT 1
19405: DEC
19406: ST_TO_ADDR
19407: LD_INT 4
19409: PUSH
19410: FOR_TO
19411: IFFALSE 19432
// SetSkill ( i , j , 10 ) ;
19413: LD_VAR 0 2
19417: PPUSH
19418: LD_VAR 0 3
19422: PPUSH
19423: LD_INT 10
19425: PPUSH
19426: CALL_OW 237
19430: GO 19410
19432: POP
19433: POP
// end ;
19434: GO 19383
19436: POP
19437: POP
// end ;
19438: LD_VAR 0 1
19442: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
19447: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_INT 22
19455: PUSH
19456: LD_OWVAR 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL_OW 69
19483: PUSH
19484: FOR_IN
19485: IFFALSE 19526
// begin for j := 1 to 4 do
19487: LD_ADDR_VAR 0 3
19491: PUSH
19492: DOUBLE
19493: LD_INT 1
19495: DEC
19496: ST_TO_ADDR
19497: LD_INT 4
19499: PUSH
19500: FOR_TO
19501: IFFALSE 19522
// SetSkill ( i , j , 10 ) ;
19503: LD_VAR 0 2
19507: PPUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: LD_INT 10
19515: PPUSH
19516: CALL_OW 237
19520: GO 19500
19522: POP
19523: POP
// end ;
19524: GO 19484
19526: POP
19527: POP
// end ;
19528: LD_VAR 0 1
19532: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19533: LD_INT 0
19535: PPUSH
// uc_side := your_side ;
19536: LD_ADDR_OWVAR 20
19540: PUSH
19541: LD_OWVAR 2
19545: ST_TO_ADDR
// uc_nation := nation ;
19546: LD_ADDR_OWVAR 21
19550: PUSH
19551: LD_VAR 0 1
19555: ST_TO_ADDR
// InitHc ;
19556: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19560: LD_INT 0
19562: PPUSH
19563: LD_VAR 0 2
19567: PPUSH
19568: LD_VAR 0 3
19572: PPUSH
19573: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19577: LD_VAR 0 4
19581: PPUSH
19582: LD_VAR 0 5
19586: PPUSH
19587: CALL_OW 428
19591: PUSH
19592: LD_INT 0
19594: EQUAL
19595: IFFALSE 19619
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19597: CALL_OW 44
19601: PPUSH
19602: LD_VAR 0 4
19606: PPUSH
19607: LD_VAR 0 5
19611: PPUSH
19612: LD_INT 1
19614: PPUSH
19615: CALL_OW 48
// end ;
19619: LD_VAR 0 6
19623: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19624: LD_INT 0
19626: PPUSH
19627: PPUSH
// uc_side := your_side ;
19628: LD_ADDR_OWVAR 20
19632: PUSH
19633: LD_OWVAR 2
19637: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19638: LD_VAR 0 1
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: LD_INT 3
19651: PUSH
19652: LD_INT 4
19654: PUSH
19655: LD_INT 5
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: IN
19665: IFFALSE 19677
// uc_nation := nation_american else
19667: LD_ADDR_OWVAR 21
19671: PUSH
19672: LD_INT 1
19674: ST_TO_ADDR
19675: GO 19720
// if chassis in [ 11 , 12 , 13 , 14 ] then
19677: LD_VAR 0 1
19681: PUSH
19682: LD_INT 11
19684: PUSH
19685: LD_INT 12
19687: PUSH
19688: LD_INT 13
19690: PUSH
19691: LD_INT 14
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: IN
19700: IFFALSE 19712
// uc_nation := nation_arabian else
19702: LD_ADDR_OWVAR 21
19706: PUSH
19707: LD_INT 2
19709: ST_TO_ADDR
19710: GO 19720
// uc_nation := nation_russian ;
19712: LD_ADDR_OWVAR 21
19716: PUSH
19717: LD_INT 3
19719: ST_TO_ADDR
// vc_chassis := chassis ;
19720: LD_ADDR_OWVAR 37
19724: PUSH
19725: LD_VAR 0 1
19729: ST_TO_ADDR
// vc_engine := engine ;
19730: LD_ADDR_OWVAR 39
19734: PUSH
19735: LD_VAR 0 2
19739: ST_TO_ADDR
// vc_control := control ;
19740: LD_ADDR_OWVAR 38
19744: PUSH
19745: LD_VAR 0 3
19749: ST_TO_ADDR
// vc_weapon := weapon ;
19750: LD_ADDR_OWVAR 40
19754: PUSH
19755: LD_VAR 0 4
19759: ST_TO_ADDR
// un := CreateVehicle ;
19760: LD_ADDR_VAR 0 8
19764: PUSH
19765: CALL_OW 45
19769: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19770: LD_VAR 0 8
19774: PPUSH
19775: LD_INT 0
19777: PPUSH
19778: LD_INT 5
19780: PPUSH
19781: CALL_OW 12
19785: PPUSH
19786: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19790: LD_VAR 0 8
19794: PPUSH
19795: LD_VAR 0 5
19799: PPUSH
19800: LD_VAR 0 6
19804: PPUSH
19805: LD_INT 1
19807: PPUSH
19808: CALL_OW 48
// end ;
19812: LD_VAR 0 7
19816: RET
// export hInvincible ; every 1 do
19817: GO 19819
19819: DISABLE
// hInvincible := [ ] ;
19820: LD_ADDR_EXP 84
19824: PUSH
19825: EMPTY
19826: ST_TO_ADDR
19827: END
// every 10 do var i ;
19828: GO 19830
19830: DISABLE
19831: LD_INT 0
19833: PPUSH
// begin enable ;
19834: ENABLE
// if not hInvincible then
19835: LD_EXP 84
19839: NOT
19840: IFFALSE 19844
// exit ;
19842: GO 19888
// for i in hInvincible do
19844: LD_ADDR_VAR 0 1
19848: PUSH
19849: LD_EXP 84
19853: PUSH
19854: FOR_IN
19855: IFFALSE 19886
// if GetLives ( i ) < 1000 then
19857: LD_VAR 0 1
19861: PPUSH
19862: CALL_OW 256
19866: PUSH
19867: LD_INT 1000
19869: LESS
19870: IFFALSE 19884
// SetLives ( i , 1000 ) ;
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_INT 1000
19879: PPUSH
19880: CALL_OW 234
19884: GO 19854
19886: POP
19887: POP
// end ;
19888: PPOPN 1
19890: END
// export function hHackInvincible ; var i ; begin
19891: LD_INT 0
19893: PPUSH
19894: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19895: LD_ADDR_VAR 0 2
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 21
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: PUSH
19933: FOR_IN
19934: IFFALSE 19995
// if IsSelected ( i ) then
19936: LD_VAR 0 2
19940: PPUSH
19941: CALL_OW 306
19945: IFFALSE 19993
// begin if i in hInvincible then
19947: LD_VAR 0 2
19951: PUSH
19952: LD_EXP 84
19956: IN
19957: IFFALSE 19977
// hInvincible := hInvincible diff i else
19959: LD_ADDR_EXP 84
19963: PUSH
19964: LD_EXP 84
19968: PUSH
19969: LD_VAR 0 2
19973: DIFF
19974: ST_TO_ADDR
19975: GO 19993
// hInvincible := hInvincible union i ;
19977: LD_ADDR_EXP 84
19981: PUSH
19982: LD_EXP 84
19986: PUSH
19987: LD_VAR 0 2
19991: UNION
19992: ST_TO_ADDR
// end ;
19993: GO 19933
19995: POP
19996: POP
// end ;
19997: LD_VAR 0 1
20001: RET
// export function hHackInvisible ; var i , j ; begin
20002: LD_INT 0
20004: PPUSH
20005: PPUSH
20006: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20007: LD_ADDR_VAR 0 2
20011: PUSH
20012: LD_INT 21
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 69
20026: PUSH
20027: FOR_IN
20028: IFFALSE 20052
// if IsSelected ( i ) then
20030: LD_VAR 0 2
20034: PPUSH
20035: CALL_OW 306
20039: IFFALSE 20050
// ComForceInvisible ( i ) ;
20041: LD_VAR 0 2
20045: PPUSH
20046: CALL_OW 496
20050: GO 20027
20052: POP
20053: POP
// end ;
20054: LD_VAR 0 1
20058: RET
// export function hHackChangeYourSide ; begin
20059: LD_INT 0
20061: PPUSH
// if your_side = 8 then
20062: LD_OWVAR 2
20066: PUSH
20067: LD_INT 8
20069: EQUAL
20070: IFFALSE 20082
// your_side := 0 else
20072: LD_ADDR_OWVAR 2
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
20080: GO 20096
// your_side := your_side + 1 ;
20082: LD_ADDR_OWVAR 2
20086: PUSH
20087: LD_OWVAR 2
20091: PUSH
20092: LD_INT 1
20094: PLUS
20095: ST_TO_ADDR
// end ;
20096: LD_VAR 0 1
20100: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20101: LD_INT 0
20103: PPUSH
20104: PPUSH
20105: PPUSH
// for i in all_units do
20106: LD_ADDR_VAR 0 2
20110: PUSH
20111: LD_OWVAR 3
20115: PUSH
20116: FOR_IN
20117: IFFALSE 20195
// if IsSelected ( i ) then
20119: LD_VAR 0 2
20123: PPUSH
20124: CALL_OW 306
20128: IFFALSE 20193
// begin j := GetSide ( i ) ;
20130: LD_ADDR_VAR 0 3
20134: PUSH
20135: LD_VAR 0 2
20139: PPUSH
20140: CALL_OW 255
20144: ST_TO_ADDR
// if j = 8 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 8
20152: EQUAL
20153: IFFALSE 20165
// j := 0 else
20155: LD_ADDR_VAR 0 3
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
20163: GO 20179
// j := j + 1 ;
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_VAR 0 3
20174: PUSH
20175: LD_INT 1
20177: PLUS
20178: ST_TO_ADDR
// SetSide ( i , j ) ;
20179: LD_VAR 0 2
20183: PPUSH
20184: LD_VAR 0 3
20188: PPUSH
20189: CALL_OW 235
// end ;
20193: GO 20116
20195: POP
20196: POP
// end ;
20197: LD_VAR 0 1
20201: RET
// export function hHackFog ; begin
20202: LD_INT 0
20204: PPUSH
// FogOff ( true ) ;
20205: LD_INT 1
20207: PPUSH
20208: CALL_OW 344
// end ;
20212: LD_VAR 0 1
20216: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20217: LD_INT 0
20219: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20220: LD_VAR 0 1
20224: PPUSH
20225: LD_VAR 0 2
20229: PPUSH
20230: LD_VAR 0 3
20234: PPUSH
20235: LD_INT 1
20237: PPUSH
20238: LD_INT 1
20240: PPUSH
20241: CALL_OW 483
// CenterOnXY ( x , y ) ;
20245: LD_VAR 0 2
20249: PPUSH
20250: LD_VAR 0 3
20254: PPUSH
20255: CALL_OW 84
// end ; end_of_file
20259: LD_VAR 0 4
20263: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20264: LD_INT 0
20266: PPUSH
20267: PPUSH
20268: PPUSH
20269: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20270: LD_VAR 0 1
20274: PPUSH
20275: CALL_OW 264
20279: PUSH
20280: LD_EXP 101
20284: EQUAL
20285: IFFALSE 20357
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20287: LD_INT 68
20289: PPUSH
20290: LD_VAR 0 1
20294: PPUSH
20295: CALL_OW 255
20299: PPUSH
20300: CALL_OW 321
20304: PUSH
20305: LD_INT 2
20307: EQUAL
20308: IFFALSE 20320
// eff := 70 else
20310: LD_ADDR_VAR 0 4
20314: PUSH
20315: LD_INT 70
20317: ST_TO_ADDR
20318: GO 20328
// eff := 30 ;
20320: LD_ADDR_VAR 0 4
20324: PUSH
20325: LD_INT 30
20327: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20328: LD_VAR 0 1
20332: PPUSH
20333: CALL_OW 250
20337: PPUSH
20338: LD_VAR 0 1
20342: PPUSH
20343: CALL_OW 251
20347: PPUSH
20348: LD_VAR 0 4
20352: PPUSH
20353: CALL_OW 495
// end ; end ;
20357: LD_VAR 0 2
20361: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20362: LD_INT 0
20364: PPUSH
// end ;
20365: LD_VAR 0 4
20369: RET
// export function SOS_Command ( cmd ) ; begin
20370: LD_INT 0
20372: PPUSH
// end ;
20373: LD_VAR 0 2
20377: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20378: LD_INT 0
20380: PPUSH
// end ;
20381: LD_VAR 0 6
20385: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20386: LD_INT 0
20388: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20389: LD_VAR 0 1
20393: PUSH
20394: LD_INT 250
20396: EQUAL
20397: PUSH
20398: LD_VAR 0 2
20402: PPUSH
20403: CALL_OW 264
20407: PUSH
20408: LD_EXP 104
20412: EQUAL
20413: AND
20414: IFFALSE 20435
// MinerPlaceMine ( unit , x , y ) ;
20416: LD_VAR 0 2
20420: PPUSH
20421: LD_VAR 0 4
20425: PPUSH
20426: LD_VAR 0 5
20430: PPUSH
20431: CALL 22784 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20435: LD_VAR 0 1
20439: PUSH
20440: LD_INT 251
20442: EQUAL
20443: PUSH
20444: LD_VAR 0 2
20448: PPUSH
20449: CALL_OW 264
20453: PUSH
20454: LD_EXP 104
20458: EQUAL
20459: AND
20460: IFFALSE 20481
// MinerDetonateMine ( unit , x , y ) ;
20462: LD_VAR 0 2
20466: PPUSH
20467: LD_VAR 0 4
20471: PPUSH
20472: LD_VAR 0 5
20476: PPUSH
20477: CALL 23061 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20481: LD_VAR 0 1
20485: PUSH
20486: LD_INT 252
20488: EQUAL
20489: PUSH
20490: LD_VAR 0 2
20494: PPUSH
20495: CALL_OW 264
20499: PUSH
20500: LD_EXP 104
20504: EQUAL
20505: AND
20506: IFFALSE 20527
// MinerCreateMinefield ( unit , x , y ) ;
20508: LD_VAR 0 2
20512: PPUSH
20513: LD_VAR 0 4
20517: PPUSH
20518: LD_VAR 0 5
20522: PPUSH
20523: CALL 23478 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20527: LD_VAR 0 1
20531: PUSH
20532: LD_INT 253
20534: EQUAL
20535: PUSH
20536: LD_VAR 0 2
20540: PPUSH
20541: CALL_OW 257
20545: PUSH
20546: LD_INT 5
20548: EQUAL
20549: AND
20550: IFFALSE 20571
// ComBinocular ( unit , x , y ) ;
20552: LD_VAR 0 2
20556: PPUSH
20557: LD_VAR 0 4
20561: PPUSH
20562: LD_VAR 0 5
20566: PPUSH
20567: CALL 23849 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20571: LD_VAR 0 1
20575: PUSH
20576: LD_INT 254
20578: EQUAL
20579: PUSH
20580: LD_VAR 0 2
20584: PPUSH
20585: CALL_OW 264
20589: PUSH
20590: LD_EXP 99
20594: EQUAL
20595: AND
20596: PUSH
20597: LD_VAR 0 3
20601: PPUSH
20602: CALL_OW 263
20606: PUSH
20607: LD_INT 3
20609: EQUAL
20610: AND
20611: IFFALSE 20627
// HackDestroyVehicle ( unit , selectedUnit ) ;
20613: LD_VAR 0 2
20617: PPUSH
20618: LD_VAR 0 3
20622: PPUSH
20623: CALL 22144 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20627: LD_VAR 0 1
20631: PUSH
20632: LD_INT 255
20634: EQUAL
20635: PUSH
20636: LD_VAR 0 2
20640: PPUSH
20641: CALL_OW 264
20645: PUSH
20646: LD_INT 14
20648: PUSH
20649: LD_INT 53
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: IN
20656: AND
20657: PUSH
20658: LD_VAR 0 4
20662: PPUSH
20663: LD_VAR 0 5
20667: PPUSH
20668: CALL_OW 488
20672: AND
20673: IFFALSE 20697
// CutTreeXYR ( unit , x , y , 12 ) ;
20675: LD_VAR 0 2
20679: PPUSH
20680: LD_VAR 0 4
20684: PPUSH
20685: LD_VAR 0 5
20689: PPUSH
20690: LD_INT 12
20692: PPUSH
20693: CALL 20710 0 4
// end ;
20697: LD_VAR 0 6
20701: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20702: LD_INT 0
20704: PPUSH
// end ;
20705: LD_VAR 0 4
20709: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20710: LD_INT 0
20712: PPUSH
20713: PPUSH
20714: PPUSH
20715: PPUSH
20716: PPUSH
20717: PPUSH
20718: PPUSH
20719: PPUSH
20720: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20721: LD_VAR 0 1
20725: NOT
20726: PUSH
20727: LD_VAR 0 2
20731: PPUSH
20732: LD_VAR 0 3
20736: PPUSH
20737: CALL_OW 488
20741: NOT
20742: OR
20743: PUSH
20744: LD_VAR 0 4
20748: NOT
20749: OR
20750: IFFALSE 20754
// exit ;
20752: GO 21094
// list := [ ] ;
20754: LD_ADDR_VAR 0 13
20758: PUSH
20759: EMPTY
20760: ST_TO_ADDR
// if x - r < 0 then
20761: LD_VAR 0 2
20765: PUSH
20766: LD_VAR 0 4
20770: MINUS
20771: PUSH
20772: LD_INT 0
20774: LESS
20775: IFFALSE 20787
// min_x := 0 else
20777: LD_ADDR_VAR 0 7
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
20785: GO 20803
// min_x := x - r ;
20787: LD_ADDR_VAR 0 7
20791: PUSH
20792: LD_VAR 0 2
20796: PUSH
20797: LD_VAR 0 4
20801: MINUS
20802: ST_TO_ADDR
// if y - r < 0 then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_VAR 0 4
20812: MINUS
20813: PUSH
20814: LD_INT 0
20816: LESS
20817: IFFALSE 20829
// min_y := 0 else
20819: LD_ADDR_VAR 0 8
20823: PUSH
20824: LD_INT 0
20826: ST_TO_ADDR
20827: GO 20845
// min_y := y - r ;
20829: LD_ADDR_VAR 0 8
20833: PUSH
20834: LD_VAR 0 3
20838: PUSH
20839: LD_VAR 0 4
20843: MINUS
20844: ST_TO_ADDR
// max_x := x + r ;
20845: LD_ADDR_VAR 0 9
20849: PUSH
20850: LD_VAR 0 2
20854: PUSH
20855: LD_VAR 0 4
20859: PLUS
20860: ST_TO_ADDR
// max_y := y + r ;
20861: LD_ADDR_VAR 0 10
20865: PUSH
20866: LD_VAR 0 3
20870: PUSH
20871: LD_VAR 0 4
20875: PLUS
20876: ST_TO_ADDR
// for _x = min_x to max_x do
20877: LD_ADDR_VAR 0 11
20881: PUSH
20882: DOUBLE
20883: LD_VAR 0 7
20887: DEC
20888: ST_TO_ADDR
20889: LD_VAR 0 9
20893: PUSH
20894: FOR_TO
20895: IFFALSE 21012
// for _y = min_y to max_y do
20897: LD_ADDR_VAR 0 12
20901: PUSH
20902: DOUBLE
20903: LD_VAR 0 8
20907: DEC
20908: ST_TO_ADDR
20909: LD_VAR 0 10
20913: PUSH
20914: FOR_TO
20915: IFFALSE 21008
// begin if not ValidHex ( _x , _y ) then
20917: LD_VAR 0 11
20921: PPUSH
20922: LD_VAR 0 12
20926: PPUSH
20927: CALL_OW 488
20931: NOT
20932: IFFALSE 20936
// continue ;
20934: GO 20914
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20936: LD_VAR 0 11
20940: PPUSH
20941: LD_VAR 0 12
20945: PPUSH
20946: CALL_OW 351
20950: PUSH
20951: LD_VAR 0 11
20955: PPUSH
20956: LD_VAR 0 12
20960: PPUSH
20961: CALL_OW 554
20965: AND
20966: IFFALSE 21006
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20968: LD_ADDR_VAR 0 13
20972: PUSH
20973: LD_VAR 0 13
20977: PPUSH
20978: LD_VAR 0 13
20982: PUSH
20983: LD_INT 1
20985: PLUS
20986: PPUSH
20987: LD_VAR 0 11
20991: PUSH
20992: LD_VAR 0 12
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PPUSH
21001: CALL_OW 2
21005: ST_TO_ADDR
// end ;
21006: GO 20914
21008: POP
21009: POP
21010: GO 20894
21012: POP
21013: POP
// if not list then
21014: LD_VAR 0 13
21018: NOT
21019: IFFALSE 21023
// exit ;
21021: GO 21094
// for i in list do
21023: LD_ADDR_VAR 0 6
21027: PUSH
21028: LD_VAR 0 13
21032: PUSH
21033: FOR_IN
21034: IFFALSE 21092
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21036: LD_VAR 0 1
21040: PPUSH
21041: LD_STRING M
21043: PUSH
21044: LD_VAR 0 6
21048: PUSH
21049: LD_INT 1
21051: ARRAY
21052: PUSH
21053: LD_VAR 0 6
21057: PUSH
21058: LD_INT 2
21060: ARRAY
21061: PUSH
21062: LD_INT 0
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: PPUSH
21086: CALL_OW 447
21090: GO 21033
21092: POP
21093: POP
// end ;
21094: LD_VAR 0 5
21098: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21099: LD_EXP 87
21103: NOT
21104: IFFALSE 21154
21106: GO 21108
21108: DISABLE
// begin initHack := true ;
21109: LD_ADDR_EXP 87
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// hackTanks := [ ] ;
21117: LD_ADDR_EXP 88
21121: PUSH
21122: EMPTY
21123: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21124: LD_ADDR_EXP 89
21128: PUSH
21129: EMPTY
21130: ST_TO_ADDR
// hackLimit := 3 ;
21131: LD_ADDR_EXP 90
21135: PUSH
21136: LD_INT 3
21138: ST_TO_ADDR
// hackDist := 12 ;
21139: LD_ADDR_EXP 91
21143: PUSH
21144: LD_INT 12
21146: ST_TO_ADDR
// hackCounter := [ ] ;
21147: LD_ADDR_EXP 92
21151: PUSH
21152: EMPTY
21153: ST_TO_ADDR
// end ;
21154: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21155: LD_EXP 87
21159: PUSH
21160: LD_INT 34
21162: PUSH
21163: LD_EXP 99
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PPUSH
21172: CALL_OW 69
21176: AND
21177: IFFALSE 21432
21179: GO 21181
21181: DISABLE
21182: LD_INT 0
21184: PPUSH
21185: PPUSH
// begin enable ;
21186: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21187: LD_ADDR_VAR 0 1
21191: PUSH
21192: LD_INT 34
21194: PUSH
21195: LD_EXP 99
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 69
21208: PUSH
21209: FOR_IN
21210: IFFALSE 21430
// begin if not i in hackTanks then
21212: LD_VAR 0 1
21216: PUSH
21217: LD_EXP 88
21221: IN
21222: NOT
21223: IFFALSE 21306
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21225: LD_ADDR_EXP 88
21229: PUSH
21230: LD_EXP 88
21234: PPUSH
21235: LD_EXP 88
21239: PUSH
21240: LD_INT 1
21242: PLUS
21243: PPUSH
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 1
21253: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21254: LD_ADDR_EXP 89
21258: PUSH
21259: LD_EXP 89
21263: PPUSH
21264: LD_EXP 89
21268: PUSH
21269: LD_INT 1
21271: PLUS
21272: PPUSH
21273: EMPTY
21274: PPUSH
21275: CALL_OW 1
21279: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21280: LD_ADDR_EXP 92
21284: PUSH
21285: LD_EXP 92
21289: PPUSH
21290: LD_EXP 92
21294: PUSH
21295: LD_INT 1
21297: PLUS
21298: PPUSH
21299: EMPTY
21300: PPUSH
21301: CALL_OW 1
21305: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21306: LD_VAR 0 1
21310: PPUSH
21311: CALL_OW 302
21315: NOT
21316: IFFALSE 21329
// begin HackUnlinkAll ( i ) ;
21318: LD_VAR 0 1
21322: PPUSH
21323: CALL 21435 0 1
// continue ;
21327: GO 21209
// end ; HackCheckCapturedStatus ( i ) ;
21329: LD_VAR 0 1
21333: PPUSH
21334: CALL 21878 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21338: LD_ADDR_VAR 0 2
21342: PUSH
21343: LD_INT 81
21345: PUSH
21346: LD_VAR 0 1
21350: PPUSH
21351: CALL_OW 255
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 33
21362: PUSH
21363: LD_INT 3
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 91
21372: PUSH
21373: LD_VAR 0 1
21377: PUSH
21378: LD_EXP 91
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 50
21390: PUSH
21391: EMPTY
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: PPUSH
21400: CALL_OW 69
21404: ST_TO_ADDR
// if not tmp then
21405: LD_VAR 0 2
21409: NOT
21410: IFFALSE 21414
// continue ;
21412: GO 21209
// HackLink ( i , tmp ) ;
21414: LD_VAR 0 1
21418: PPUSH
21419: LD_VAR 0 2
21423: PPUSH
21424: CALL 21571 0 2
// end ;
21428: GO 21209
21430: POP
21431: POP
// end ;
21432: PPOPN 2
21434: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21435: LD_INT 0
21437: PPUSH
21438: PPUSH
21439: PPUSH
// if not hack in hackTanks then
21440: LD_VAR 0 1
21444: PUSH
21445: LD_EXP 88
21449: IN
21450: NOT
21451: IFFALSE 21455
// exit ;
21453: GO 21566
// index := GetElementIndex ( hackTanks , hack ) ;
21455: LD_ADDR_VAR 0 4
21459: PUSH
21460: LD_EXP 88
21464: PPUSH
21465: LD_VAR 0 1
21469: PPUSH
21470: CALL 29208 0 2
21474: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21475: LD_EXP 89
21479: PUSH
21480: LD_VAR 0 4
21484: ARRAY
21485: IFFALSE 21566
// begin for i in hackTanksCaptured [ index ] do
21487: LD_ADDR_VAR 0 3
21491: PUSH
21492: LD_EXP 89
21496: PUSH
21497: LD_VAR 0 4
21501: ARRAY
21502: PUSH
21503: FOR_IN
21504: IFFALSE 21530
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21506: LD_VAR 0 3
21510: PUSH
21511: LD_INT 1
21513: ARRAY
21514: PPUSH
21515: LD_VAR 0 3
21519: PUSH
21520: LD_INT 2
21522: ARRAY
21523: PPUSH
21524: CALL_OW 235
21528: GO 21503
21530: POP
21531: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21532: LD_ADDR_EXP 89
21536: PUSH
21537: LD_EXP 89
21541: PPUSH
21542: LD_VAR 0 4
21546: PPUSH
21547: EMPTY
21548: PPUSH
21549: CALL_OW 1
21553: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21554: LD_VAR 0 1
21558: PPUSH
21559: LD_INT 0
21561: PPUSH
21562: CALL_OW 505
// end ; end ;
21566: LD_VAR 0 2
21570: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21571: LD_INT 0
21573: PPUSH
21574: PPUSH
21575: PPUSH
// if not hack in hackTanks or not vehicles then
21576: LD_VAR 0 1
21580: PUSH
21581: LD_EXP 88
21585: IN
21586: NOT
21587: PUSH
21588: LD_VAR 0 2
21592: NOT
21593: OR
21594: IFFALSE 21598
// exit ;
21596: GO 21873
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21598: LD_ADDR_VAR 0 2
21602: PUSH
21603: LD_VAR 0 1
21607: PPUSH
21608: LD_VAR 0 2
21612: PPUSH
21613: LD_INT 1
21615: PPUSH
21616: LD_INT 1
21618: PPUSH
21619: CALL 29858 0 4
21623: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21624: LD_ADDR_VAR 0 5
21628: PUSH
21629: LD_EXP 88
21633: PPUSH
21634: LD_VAR 0 1
21638: PPUSH
21639: CALL 29208 0 2
21643: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21644: LD_EXP 89
21648: PUSH
21649: LD_VAR 0 5
21653: ARRAY
21654: PUSH
21655: LD_EXP 90
21659: LESS
21660: IFFALSE 21849
// begin for i := 1 to vehicles do
21662: LD_ADDR_VAR 0 4
21666: PUSH
21667: DOUBLE
21668: LD_INT 1
21670: DEC
21671: ST_TO_ADDR
21672: LD_VAR 0 2
21676: PUSH
21677: FOR_TO
21678: IFFALSE 21847
// begin if hackTanksCaptured [ index ] = hackLimit then
21680: LD_EXP 89
21684: PUSH
21685: LD_VAR 0 5
21689: ARRAY
21690: PUSH
21691: LD_EXP 90
21695: EQUAL
21696: IFFALSE 21700
// break ;
21698: GO 21847
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21700: LD_ADDR_EXP 92
21704: PUSH
21705: LD_EXP 92
21709: PPUSH
21710: LD_VAR 0 5
21714: PPUSH
21715: LD_EXP 92
21719: PUSH
21720: LD_VAR 0 5
21724: ARRAY
21725: PUSH
21726: LD_INT 1
21728: PLUS
21729: PPUSH
21730: CALL_OW 1
21734: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21735: LD_ADDR_EXP 89
21739: PUSH
21740: LD_EXP 89
21744: PPUSH
21745: LD_VAR 0 5
21749: PUSH
21750: LD_EXP 89
21754: PUSH
21755: LD_VAR 0 5
21759: ARRAY
21760: PUSH
21761: LD_INT 1
21763: PLUS
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PPUSH
21769: LD_VAR 0 2
21773: PUSH
21774: LD_VAR 0 4
21778: ARRAY
21779: PUSH
21780: LD_VAR 0 2
21784: PUSH
21785: LD_VAR 0 4
21789: ARRAY
21790: PPUSH
21791: CALL_OW 255
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PPUSH
21800: CALL 29423 0 3
21804: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21805: LD_VAR 0 2
21809: PUSH
21810: LD_VAR 0 4
21814: ARRAY
21815: PPUSH
21816: LD_VAR 0 1
21820: PPUSH
21821: CALL_OW 255
21825: PPUSH
21826: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21830: LD_VAR 0 2
21834: PUSH
21835: LD_VAR 0 4
21839: ARRAY
21840: PPUSH
21841: CALL_OW 141
// end ;
21845: GO 21677
21847: POP
21848: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21849: LD_VAR 0 1
21853: PPUSH
21854: LD_EXP 89
21858: PUSH
21859: LD_VAR 0 5
21863: ARRAY
21864: PUSH
21865: LD_INT 0
21867: PLUS
21868: PPUSH
21869: CALL_OW 505
// end ;
21873: LD_VAR 0 3
21877: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21878: LD_INT 0
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
// if not hack in hackTanks then
21884: LD_VAR 0 1
21888: PUSH
21889: LD_EXP 88
21893: IN
21894: NOT
21895: IFFALSE 21899
// exit ;
21897: GO 22139
// index := GetElementIndex ( hackTanks , hack ) ;
21899: LD_ADDR_VAR 0 4
21903: PUSH
21904: LD_EXP 88
21908: PPUSH
21909: LD_VAR 0 1
21913: PPUSH
21914: CALL 29208 0 2
21918: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21919: LD_ADDR_VAR 0 3
21923: PUSH
21924: DOUBLE
21925: LD_EXP 89
21929: PUSH
21930: LD_VAR 0 4
21934: ARRAY
21935: INC
21936: ST_TO_ADDR
21937: LD_INT 1
21939: PUSH
21940: FOR_DOWNTO
21941: IFFALSE 22113
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21943: LD_ADDR_VAR 0 5
21947: PUSH
21948: LD_EXP 89
21952: PUSH
21953: LD_VAR 0 4
21957: ARRAY
21958: PUSH
21959: LD_VAR 0 3
21963: ARRAY
21964: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21965: LD_VAR 0 5
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PPUSH
21974: CALL_OW 302
21978: NOT
21979: PUSH
21980: LD_VAR 0 5
21984: PUSH
21985: LD_INT 1
21987: ARRAY
21988: PPUSH
21989: CALL_OW 255
21993: PUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL_OW 255
22003: NONEQUAL
22004: OR
22005: IFFALSE 22111
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22007: LD_VAR 0 5
22011: PUSH
22012: LD_INT 1
22014: ARRAY
22015: PPUSH
22016: CALL_OW 305
22020: PUSH
22021: LD_VAR 0 5
22025: PUSH
22026: LD_INT 1
22028: ARRAY
22029: PPUSH
22030: CALL_OW 255
22034: PUSH
22035: LD_VAR 0 1
22039: PPUSH
22040: CALL_OW 255
22044: EQUAL
22045: AND
22046: IFFALSE 22070
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22048: LD_VAR 0 5
22052: PUSH
22053: LD_INT 1
22055: ARRAY
22056: PPUSH
22057: LD_VAR 0 5
22061: PUSH
22062: LD_INT 2
22064: ARRAY
22065: PPUSH
22066: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22070: LD_ADDR_EXP 89
22074: PUSH
22075: LD_EXP 89
22079: PPUSH
22080: LD_VAR 0 4
22084: PPUSH
22085: LD_EXP 89
22089: PUSH
22090: LD_VAR 0 4
22094: ARRAY
22095: PPUSH
22096: LD_VAR 0 3
22100: PPUSH
22101: CALL_OW 3
22105: PPUSH
22106: CALL_OW 1
22110: ST_TO_ADDR
// end ; end ;
22111: GO 21940
22113: POP
22114: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22115: LD_VAR 0 1
22119: PPUSH
22120: LD_EXP 89
22124: PUSH
22125: LD_VAR 0 4
22129: ARRAY
22130: PUSH
22131: LD_INT 0
22133: PLUS
22134: PPUSH
22135: CALL_OW 505
// end ;
22139: LD_VAR 0 2
22143: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22144: LD_INT 0
22146: PPUSH
22147: PPUSH
22148: PPUSH
22149: PPUSH
// if not hack in hackTanks then
22150: LD_VAR 0 1
22154: PUSH
22155: LD_EXP 88
22159: IN
22160: NOT
22161: IFFALSE 22165
// exit ;
22163: GO 22250
// index := GetElementIndex ( hackTanks , hack ) ;
22165: LD_ADDR_VAR 0 5
22169: PUSH
22170: LD_EXP 88
22174: PPUSH
22175: LD_VAR 0 1
22179: PPUSH
22180: CALL 29208 0 2
22184: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22185: LD_ADDR_VAR 0 4
22189: PUSH
22190: DOUBLE
22191: LD_INT 1
22193: DEC
22194: ST_TO_ADDR
22195: LD_EXP 89
22199: PUSH
22200: LD_VAR 0 5
22204: ARRAY
22205: PUSH
22206: FOR_TO
22207: IFFALSE 22248
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22209: LD_EXP 89
22213: PUSH
22214: LD_VAR 0 5
22218: ARRAY
22219: PUSH
22220: LD_VAR 0 4
22224: ARRAY
22225: PUSH
22226: LD_INT 1
22228: ARRAY
22229: PUSH
22230: LD_VAR 0 2
22234: EQUAL
22235: IFFALSE 22246
// KillUnit ( vehicle ) ;
22237: LD_VAR 0 2
22241: PPUSH
22242: CALL_OW 66
22246: GO 22206
22248: POP
22249: POP
// end ;
22250: LD_VAR 0 3
22254: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22255: LD_EXP 93
22259: NOT
22260: IFFALSE 22295
22262: GO 22264
22264: DISABLE
// begin initMiner := true ;
22265: LD_ADDR_EXP 93
22269: PUSH
22270: LD_INT 1
22272: ST_TO_ADDR
// minersList := [ ] ;
22273: LD_ADDR_EXP 94
22277: PUSH
22278: EMPTY
22279: ST_TO_ADDR
// minerMinesList := [ ] ;
22280: LD_ADDR_EXP 95
22284: PUSH
22285: EMPTY
22286: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22287: LD_ADDR_EXP 96
22291: PUSH
22292: LD_INT 5
22294: ST_TO_ADDR
// end ;
22295: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22296: LD_EXP 93
22300: PUSH
22301: LD_INT 34
22303: PUSH
22304: LD_EXP 104
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PPUSH
22313: CALL_OW 69
22317: AND
22318: IFFALSE 22781
22320: GO 22322
22322: DISABLE
22323: LD_INT 0
22325: PPUSH
22326: PPUSH
22327: PPUSH
22328: PPUSH
// begin enable ;
22329: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22330: LD_ADDR_VAR 0 1
22334: PUSH
22335: LD_INT 34
22337: PUSH
22338: LD_EXP 104
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PPUSH
22347: CALL_OW 69
22351: PUSH
22352: FOR_IN
22353: IFFALSE 22425
// begin if not i in minersList then
22355: LD_VAR 0 1
22359: PUSH
22360: LD_EXP 94
22364: IN
22365: NOT
22366: IFFALSE 22423
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22368: LD_ADDR_EXP 94
22372: PUSH
22373: LD_EXP 94
22377: PPUSH
22378: LD_EXP 94
22382: PUSH
22383: LD_INT 1
22385: PLUS
22386: PPUSH
22387: LD_VAR 0 1
22391: PPUSH
22392: CALL_OW 1
22396: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22397: LD_ADDR_EXP 95
22401: PUSH
22402: LD_EXP 95
22406: PPUSH
22407: LD_EXP 95
22411: PUSH
22412: LD_INT 1
22414: PLUS
22415: PPUSH
22416: EMPTY
22417: PPUSH
22418: CALL_OW 1
22422: ST_TO_ADDR
// end end ;
22423: GO 22352
22425: POP
22426: POP
// for i := minerMinesList downto 1 do
22427: LD_ADDR_VAR 0 1
22431: PUSH
22432: DOUBLE
22433: LD_EXP 95
22437: INC
22438: ST_TO_ADDR
22439: LD_INT 1
22441: PUSH
22442: FOR_DOWNTO
22443: IFFALSE 22779
// begin if IsLive ( minersList [ i ] ) then
22445: LD_EXP 94
22449: PUSH
22450: LD_VAR 0 1
22454: ARRAY
22455: PPUSH
22456: CALL_OW 300
22460: IFFALSE 22488
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22462: LD_EXP 94
22466: PUSH
22467: LD_VAR 0 1
22471: ARRAY
22472: PPUSH
22473: LD_EXP 95
22477: PUSH
22478: LD_VAR 0 1
22482: ARRAY
22483: PPUSH
22484: CALL_OW 505
// if not minerMinesList [ i ] then
22488: LD_EXP 95
22492: PUSH
22493: LD_VAR 0 1
22497: ARRAY
22498: NOT
22499: IFFALSE 22503
// continue ;
22501: GO 22442
// for j := minerMinesList [ i ] downto 1 do
22503: LD_ADDR_VAR 0 2
22507: PUSH
22508: DOUBLE
22509: LD_EXP 95
22513: PUSH
22514: LD_VAR 0 1
22518: ARRAY
22519: INC
22520: ST_TO_ADDR
22521: LD_INT 1
22523: PUSH
22524: FOR_DOWNTO
22525: IFFALSE 22775
// begin side := GetSide ( minersList [ i ] ) ;
22527: LD_ADDR_VAR 0 3
22531: PUSH
22532: LD_EXP 94
22536: PUSH
22537: LD_VAR 0 1
22541: ARRAY
22542: PPUSH
22543: CALL_OW 255
22547: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22548: LD_ADDR_VAR 0 4
22552: PUSH
22553: LD_EXP 95
22557: PUSH
22558: LD_VAR 0 1
22562: ARRAY
22563: PUSH
22564: LD_VAR 0 2
22568: ARRAY
22569: PUSH
22570: LD_INT 1
22572: ARRAY
22573: PPUSH
22574: LD_EXP 95
22578: PUSH
22579: LD_VAR 0 1
22583: ARRAY
22584: PUSH
22585: LD_VAR 0 2
22589: ARRAY
22590: PUSH
22591: LD_INT 2
22593: ARRAY
22594: PPUSH
22595: CALL_OW 428
22599: ST_TO_ADDR
// if not tmp then
22600: LD_VAR 0 4
22604: NOT
22605: IFFALSE 22609
// continue ;
22607: GO 22524
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22609: LD_VAR 0 4
22613: PUSH
22614: LD_INT 81
22616: PUSH
22617: LD_VAR 0 3
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: IN
22631: PUSH
22632: LD_EXP 95
22636: PUSH
22637: LD_VAR 0 1
22641: ARRAY
22642: PUSH
22643: LD_VAR 0 2
22647: ARRAY
22648: PUSH
22649: LD_INT 1
22651: ARRAY
22652: PPUSH
22653: LD_EXP 95
22657: PUSH
22658: LD_VAR 0 1
22662: ARRAY
22663: PUSH
22664: LD_VAR 0 2
22668: ARRAY
22669: PUSH
22670: LD_INT 2
22672: ARRAY
22673: PPUSH
22674: CALL_OW 458
22678: AND
22679: IFFALSE 22773
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22681: LD_EXP 95
22685: PUSH
22686: LD_VAR 0 1
22690: ARRAY
22691: PUSH
22692: LD_VAR 0 2
22696: ARRAY
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: PPUSH
22702: LD_EXP 95
22706: PUSH
22707: LD_VAR 0 1
22711: ARRAY
22712: PUSH
22713: LD_VAR 0 2
22717: ARRAY
22718: PUSH
22719: LD_INT 2
22721: ARRAY
22722: PPUSH
22723: LD_VAR 0 3
22727: PPUSH
22728: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22732: LD_ADDR_EXP 95
22736: PUSH
22737: LD_EXP 95
22741: PPUSH
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_EXP 95
22751: PUSH
22752: LD_VAR 0 1
22756: ARRAY
22757: PPUSH
22758: LD_VAR 0 2
22762: PPUSH
22763: CALL_OW 3
22767: PPUSH
22768: CALL_OW 1
22772: ST_TO_ADDR
// end ; end ;
22773: GO 22524
22775: POP
22776: POP
// end ;
22777: GO 22442
22779: POP
22780: POP
// end ;
22781: PPOPN 4
22783: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22784: LD_INT 0
22786: PPUSH
22787: PPUSH
// result := false ;
22788: LD_ADDR_VAR 0 4
22792: PUSH
22793: LD_INT 0
22795: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22796: LD_VAR 0 1
22800: PPUSH
22801: CALL_OW 264
22805: PUSH
22806: LD_EXP 104
22810: EQUAL
22811: NOT
22812: IFFALSE 22816
// exit ;
22814: GO 23056
// index := GetElementIndex ( minersList , unit ) ;
22816: LD_ADDR_VAR 0 5
22820: PUSH
22821: LD_EXP 94
22825: PPUSH
22826: LD_VAR 0 1
22830: PPUSH
22831: CALL 29208 0 2
22835: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22836: LD_EXP 95
22840: PUSH
22841: LD_VAR 0 5
22845: ARRAY
22846: PUSH
22847: LD_EXP 96
22851: GREATEREQUAL
22852: IFFALSE 22856
// exit ;
22854: GO 23056
// ComMoveXY ( unit , x , y ) ;
22856: LD_VAR 0 1
22860: PPUSH
22861: LD_VAR 0 2
22865: PPUSH
22866: LD_VAR 0 3
22870: PPUSH
22871: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22875: LD_INT 35
22877: PPUSH
22878: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22882: LD_VAR 0 1
22886: PPUSH
22887: LD_VAR 0 2
22891: PPUSH
22892: LD_VAR 0 3
22896: PPUSH
22897: CALL 59980 0 3
22901: NOT
22902: PUSH
22903: LD_VAR 0 1
22907: PPUSH
22908: CALL_OW 314
22912: AND
22913: IFFALSE 22917
// exit ;
22915: GO 23056
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22917: LD_VAR 0 2
22921: PPUSH
22922: LD_VAR 0 3
22926: PPUSH
22927: CALL_OW 428
22931: PUSH
22932: LD_VAR 0 1
22936: EQUAL
22937: PUSH
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 314
22947: NOT
22948: AND
22949: IFFALSE 22875
// PlaySoundXY ( x , y , PlantMine ) ;
22951: LD_VAR 0 2
22955: PPUSH
22956: LD_VAR 0 3
22960: PPUSH
22961: LD_STRING PlantMine
22963: PPUSH
22964: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22968: LD_VAR 0 2
22972: PPUSH
22973: LD_VAR 0 3
22977: PPUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL_OW 255
22987: PPUSH
22988: LD_INT 0
22990: PPUSH
22991: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22995: LD_ADDR_EXP 95
22999: PUSH
23000: LD_EXP 95
23004: PPUSH
23005: LD_VAR 0 5
23009: PUSH
23010: LD_EXP 95
23014: PUSH
23015: LD_VAR 0 5
23019: ARRAY
23020: PUSH
23021: LD_INT 1
23023: PLUS
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PPUSH
23029: LD_VAR 0 2
23033: PUSH
23034: LD_VAR 0 3
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PPUSH
23043: CALL 29423 0 3
23047: ST_TO_ADDR
// result := true ;
23048: LD_ADDR_VAR 0 4
23052: PUSH
23053: LD_INT 1
23055: ST_TO_ADDR
// end ;
23056: LD_VAR 0 4
23060: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23061: LD_INT 0
23063: PPUSH
23064: PPUSH
23065: PPUSH
// if not unit in minersList then
23066: LD_VAR 0 1
23070: PUSH
23071: LD_EXP 94
23075: IN
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23473
// index := GetElementIndex ( minersList , unit ) ;
23081: LD_ADDR_VAR 0 6
23085: PUSH
23086: LD_EXP 94
23090: PPUSH
23091: LD_VAR 0 1
23095: PPUSH
23096: CALL 29208 0 2
23100: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23101: LD_ADDR_VAR 0 5
23105: PUSH
23106: DOUBLE
23107: LD_EXP 95
23111: PUSH
23112: LD_VAR 0 6
23116: ARRAY
23117: INC
23118: ST_TO_ADDR
23119: LD_INT 1
23121: PUSH
23122: FOR_DOWNTO
23123: IFFALSE 23284
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23125: LD_EXP 95
23129: PUSH
23130: LD_VAR 0 6
23134: ARRAY
23135: PUSH
23136: LD_VAR 0 5
23140: ARRAY
23141: PUSH
23142: LD_INT 1
23144: ARRAY
23145: PUSH
23146: LD_VAR 0 2
23150: EQUAL
23151: PUSH
23152: LD_EXP 95
23156: PUSH
23157: LD_VAR 0 6
23161: ARRAY
23162: PUSH
23163: LD_VAR 0 5
23167: ARRAY
23168: PUSH
23169: LD_INT 2
23171: ARRAY
23172: PUSH
23173: LD_VAR 0 3
23177: EQUAL
23178: AND
23179: IFFALSE 23282
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23181: LD_EXP 95
23185: PUSH
23186: LD_VAR 0 6
23190: ARRAY
23191: PUSH
23192: LD_VAR 0 5
23196: ARRAY
23197: PUSH
23198: LD_INT 1
23200: ARRAY
23201: PPUSH
23202: LD_EXP 95
23206: PUSH
23207: LD_VAR 0 6
23211: ARRAY
23212: PUSH
23213: LD_VAR 0 5
23217: ARRAY
23218: PUSH
23219: LD_INT 2
23221: ARRAY
23222: PPUSH
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 255
23232: PPUSH
23233: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23237: LD_ADDR_EXP 95
23241: PUSH
23242: LD_EXP 95
23246: PPUSH
23247: LD_VAR 0 6
23251: PPUSH
23252: LD_EXP 95
23256: PUSH
23257: LD_VAR 0 6
23261: ARRAY
23262: PPUSH
23263: LD_VAR 0 5
23267: PPUSH
23268: CALL_OW 3
23272: PPUSH
23273: CALL_OW 1
23277: ST_TO_ADDR
// exit ;
23278: POP
23279: POP
23280: GO 23473
// end ; end ;
23282: GO 23122
23284: POP
23285: POP
// for i := minerMinesList [ index ] downto 1 do
23286: LD_ADDR_VAR 0 5
23290: PUSH
23291: DOUBLE
23292: LD_EXP 95
23296: PUSH
23297: LD_VAR 0 6
23301: ARRAY
23302: INC
23303: ST_TO_ADDR
23304: LD_INT 1
23306: PUSH
23307: FOR_DOWNTO
23308: IFFALSE 23471
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23310: LD_EXP 95
23314: PUSH
23315: LD_VAR 0 6
23319: ARRAY
23320: PUSH
23321: LD_VAR 0 5
23325: ARRAY
23326: PUSH
23327: LD_INT 1
23329: ARRAY
23330: PPUSH
23331: LD_EXP 95
23335: PUSH
23336: LD_VAR 0 6
23340: ARRAY
23341: PUSH
23342: LD_VAR 0 5
23346: ARRAY
23347: PUSH
23348: LD_INT 2
23350: ARRAY
23351: PPUSH
23352: LD_VAR 0 2
23356: PPUSH
23357: LD_VAR 0 3
23361: PPUSH
23362: CALL_OW 298
23366: PUSH
23367: LD_INT 6
23369: LESS
23370: IFFALSE 23469
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23372: LD_EXP 95
23376: PUSH
23377: LD_VAR 0 6
23381: ARRAY
23382: PUSH
23383: LD_VAR 0 5
23387: ARRAY
23388: PUSH
23389: LD_INT 1
23391: ARRAY
23392: PPUSH
23393: LD_EXP 95
23397: PUSH
23398: LD_VAR 0 6
23402: ARRAY
23403: PUSH
23404: LD_VAR 0 5
23408: ARRAY
23409: PUSH
23410: LD_INT 2
23412: ARRAY
23413: PPUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 255
23423: PPUSH
23424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23428: LD_ADDR_EXP 95
23432: PUSH
23433: LD_EXP 95
23437: PPUSH
23438: LD_VAR 0 6
23442: PPUSH
23443: LD_EXP 95
23447: PUSH
23448: LD_VAR 0 6
23452: ARRAY
23453: PPUSH
23454: LD_VAR 0 5
23458: PPUSH
23459: CALL_OW 3
23463: PPUSH
23464: CALL_OW 1
23468: ST_TO_ADDR
// end ; end ;
23469: GO 23307
23471: POP
23472: POP
// end ;
23473: LD_VAR 0 4
23477: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23478: LD_INT 0
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23489: LD_VAR 0 1
23493: PPUSH
23494: CALL_OW 264
23498: PUSH
23499: LD_EXP 104
23503: EQUAL
23504: NOT
23505: PUSH
23506: LD_VAR 0 1
23510: PUSH
23511: LD_EXP 94
23515: IN
23516: NOT
23517: OR
23518: IFFALSE 23522
// exit ;
23520: GO 23844
// index := GetElementIndex ( minersList , unit ) ;
23522: LD_ADDR_VAR 0 6
23526: PUSH
23527: LD_EXP 94
23531: PPUSH
23532: LD_VAR 0 1
23536: PPUSH
23537: CALL 29208 0 2
23541: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23542: LD_ADDR_VAR 0 8
23546: PUSH
23547: LD_EXP 96
23551: PUSH
23552: LD_EXP 95
23556: PUSH
23557: LD_VAR 0 6
23561: ARRAY
23562: MINUS
23563: ST_TO_ADDR
// if not minesFreeAmount then
23564: LD_VAR 0 8
23568: NOT
23569: IFFALSE 23573
// exit ;
23571: GO 23844
// tmp := [ ] ;
23573: LD_ADDR_VAR 0 7
23577: PUSH
23578: EMPTY
23579: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23580: LD_ADDR_VAR 0 5
23584: PUSH
23585: DOUBLE
23586: LD_INT 1
23588: DEC
23589: ST_TO_ADDR
23590: LD_VAR 0 8
23594: PUSH
23595: FOR_TO
23596: IFFALSE 23791
// begin _d := rand ( 0 , 5 ) ;
23598: LD_ADDR_VAR 0 11
23602: PUSH
23603: LD_INT 0
23605: PPUSH
23606: LD_INT 5
23608: PPUSH
23609: CALL_OW 12
23613: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23614: LD_ADDR_VAR 0 12
23618: PUSH
23619: LD_INT 2
23621: PPUSH
23622: LD_INT 6
23624: PPUSH
23625: CALL_OW 12
23629: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23630: LD_ADDR_VAR 0 9
23634: PUSH
23635: LD_VAR 0 2
23639: PPUSH
23640: LD_VAR 0 11
23644: PPUSH
23645: LD_VAR 0 12
23649: PPUSH
23650: CALL_OW 272
23654: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23655: LD_ADDR_VAR 0 10
23659: PUSH
23660: LD_VAR 0 3
23664: PPUSH
23665: LD_VAR 0 11
23669: PPUSH
23670: LD_VAR 0 12
23674: PPUSH
23675: CALL_OW 273
23679: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23680: LD_VAR 0 9
23684: PPUSH
23685: LD_VAR 0 10
23689: PPUSH
23690: CALL_OW 488
23694: PUSH
23695: LD_VAR 0 9
23699: PUSH
23700: LD_VAR 0 10
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_VAR 0 7
23713: IN
23714: NOT
23715: AND
23716: PUSH
23717: LD_VAR 0 9
23721: PPUSH
23722: LD_VAR 0 10
23726: PPUSH
23727: CALL_OW 458
23731: NOT
23732: AND
23733: IFFALSE 23775
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23735: LD_ADDR_VAR 0 7
23739: PUSH
23740: LD_VAR 0 7
23744: PPUSH
23745: LD_VAR 0 7
23749: PUSH
23750: LD_INT 1
23752: PLUS
23753: PPUSH
23754: LD_VAR 0 9
23758: PUSH
23759: LD_VAR 0 10
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PPUSH
23768: CALL_OW 1
23772: ST_TO_ADDR
23773: GO 23789
// i := i - 1 ;
23775: LD_ADDR_VAR 0 5
23779: PUSH
23780: LD_VAR 0 5
23784: PUSH
23785: LD_INT 1
23787: MINUS
23788: ST_TO_ADDR
// end ;
23789: GO 23595
23791: POP
23792: POP
// for i in tmp do
23793: LD_ADDR_VAR 0 5
23797: PUSH
23798: LD_VAR 0 7
23802: PUSH
23803: FOR_IN
23804: IFFALSE 23842
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23806: LD_VAR 0 1
23810: PPUSH
23811: LD_VAR 0 5
23815: PUSH
23816: LD_INT 1
23818: ARRAY
23819: PPUSH
23820: LD_VAR 0 5
23824: PUSH
23825: LD_INT 2
23827: ARRAY
23828: PPUSH
23829: CALL 22784 0 3
23833: NOT
23834: IFFALSE 23840
// exit ;
23836: POP
23837: POP
23838: GO 23844
23840: GO 23803
23842: POP
23843: POP
// end ;
23844: LD_VAR 0 4
23848: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23849: LD_INT 0
23851: PPUSH
23852: PPUSH
23853: PPUSH
23854: PPUSH
23855: PPUSH
23856: PPUSH
23857: PPUSH
// if not GetClass ( unit ) = class_sniper then
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 257
23867: PUSH
23868: LD_INT 5
23870: EQUAL
23871: NOT
23872: IFFALSE 23876
// exit ;
23874: GO 24264
// dist := 8 ;
23876: LD_ADDR_VAR 0 5
23880: PUSH
23881: LD_INT 8
23883: ST_TO_ADDR
// viewRange := 12 ;
23884: LD_ADDR_VAR 0 7
23888: PUSH
23889: LD_INT 12
23891: ST_TO_ADDR
// side := GetSide ( unit ) ;
23892: LD_ADDR_VAR 0 6
23896: PUSH
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 255
23906: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23907: LD_INT 61
23909: PPUSH
23910: LD_VAR 0 6
23914: PPUSH
23915: CALL_OW 321
23919: PUSH
23920: LD_INT 2
23922: EQUAL
23923: IFFALSE 23933
// viewRange := 16 ;
23925: LD_ADDR_VAR 0 7
23929: PUSH
23930: LD_INT 16
23932: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23933: LD_VAR 0 1
23937: PPUSH
23938: LD_VAR 0 2
23942: PPUSH
23943: LD_VAR 0 3
23947: PPUSH
23948: CALL_OW 297
23952: PUSH
23953: LD_VAR 0 5
23957: GREATER
23958: IFFALSE 24037
// begin ComMoveXY ( unit , x , y ) ;
23960: LD_VAR 0 1
23964: PPUSH
23965: LD_VAR 0 2
23969: PPUSH
23970: LD_VAR 0 3
23974: PPUSH
23975: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23979: LD_INT 35
23981: PPUSH
23982: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23986: LD_VAR 0 1
23990: PPUSH
23991: LD_VAR 0 2
23995: PPUSH
23996: LD_VAR 0 3
24000: PPUSH
24001: CALL 59980 0 3
24005: NOT
24006: IFFALSE 24010
// exit ;
24008: GO 24264
// until GetDistUnitXY ( unit , x , y ) < dist ;
24010: LD_VAR 0 1
24014: PPUSH
24015: LD_VAR 0 2
24019: PPUSH
24020: LD_VAR 0 3
24024: PPUSH
24025: CALL_OW 297
24029: PUSH
24030: LD_VAR 0 5
24034: LESS
24035: IFFALSE 23979
// end ; ComTurnXY ( unit , x , y ) ;
24037: LD_VAR 0 1
24041: PPUSH
24042: LD_VAR 0 2
24046: PPUSH
24047: LD_VAR 0 3
24051: PPUSH
24052: CALL_OW 118
// wait ( 5 ) ;
24056: LD_INT 5
24058: PPUSH
24059: CALL_OW 67
// _d := GetDir ( unit ) ;
24063: LD_ADDR_VAR 0 10
24067: PUSH
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 254
24077: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24078: LD_ADDR_VAR 0 8
24082: PUSH
24083: LD_VAR 0 1
24087: PPUSH
24088: CALL_OW 250
24092: PPUSH
24093: LD_VAR 0 10
24097: PPUSH
24098: LD_VAR 0 5
24102: PPUSH
24103: CALL_OW 272
24107: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24108: LD_ADDR_VAR 0 9
24112: PUSH
24113: LD_VAR 0 1
24117: PPUSH
24118: CALL_OW 251
24122: PPUSH
24123: LD_VAR 0 10
24127: PPUSH
24128: LD_VAR 0 5
24132: PPUSH
24133: CALL_OW 273
24137: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24138: LD_VAR 0 8
24142: PPUSH
24143: LD_VAR 0 9
24147: PPUSH
24148: CALL_OW 488
24152: NOT
24153: IFFALSE 24157
// exit ;
24155: GO 24264
// ComAnimCustom ( unit , 1 ) ;
24157: LD_VAR 0 1
24161: PPUSH
24162: LD_INT 1
24164: PPUSH
24165: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24169: LD_VAR 0 8
24173: PPUSH
24174: LD_VAR 0 9
24178: PPUSH
24179: LD_VAR 0 6
24183: PPUSH
24184: LD_VAR 0 7
24188: PPUSH
24189: CALL_OW 330
// repeat wait ( 1 ) ;
24193: LD_INT 1
24195: PPUSH
24196: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 316
24209: PUSH
24210: LD_VAR 0 1
24214: PPUSH
24215: CALL_OW 314
24219: OR
24220: PUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 302
24230: NOT
24231: OR
24232: PUSH
24233: LD_VAR 0 1
24237: PPUSH
24238: CALL_OW 301
24242: OR
24243: IFFALSE 24193
// RemoveSeeing ( _x , _y , side ) ;
24245: LD_VAR 0 8
24249: PPUSH
24250: LD_VAR 0 9
24254: PPUSH
24255: LD_VAR 0 6
24259: PPUSH
24260: CALL_OW 331
// end ; end_of_file
24264: LD_VAR 0 4
24268: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24269: LD_INT 0
24271: PPUSH
// ar_miner := 81 ;
24272: LD_ADDR_EXP 104
24276: PUSH
24277: LD_INT 81
24279: ST_TO_ADDR
// ar_crane := 88 ;
24280: LD_ADDR_EXP 103
24284: PUSH
24285: LD_INT 88
24287: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24288: LD_ADDR_EXP 98
24292: PUSH
24293: LD_INT 89
24295: ST_TO_ADDR
// us_hack := 99 ;
24296: LD_ADDR_EXP 99
24300: PUSH
24301: LD_INT 99
24303: ST_TO_ADDR
// us_artillery := 97 ;
24304: LD_ADDR_EXP 100
24308: PUSH
24309: LD_INT 97
24311: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24312: LD_ADDR_EXP 101
24316: PUSH
24317: LD_INT 91
24319: ST_TO_ADDR
// ar_mortar := 92 ;
24320: LD_ADDR_EXP 102
24324: PUSH
24325: LD_INT 92
24327: ST_TO_ADDR
// ru_radar := 98 ;
24328: LD_ADDR_EXP 97
24332: PUSH
24333: LD_INT 98
24335: ST_TO_ADDR
// tech_Artillery := 80 ;
24336: LD_ADDR_EXP 105
24340: PUSH
24341: LD_INT 80
24343: ST_TO_ADDR
// tech_RadMat := 81 ;
24344: LD_ADDR_EXP 106
24348: PUSH
24349: LD_INT 81
24351: ST_TO_ADDR
// tech_BasicTools := 82 ;
24352: LD_ADDR_EXP 107
24356: PUSH
24357: LD_INT 82
24359: ST_TO_ADDR
// tech_Cargo := 83 ;
24360: LD_ADDR_EXP 108
24364: PUSH
24365: LD_INT 83
24367: ST_TO_ADDR
// tech_Track := 84 ;
24368: LD_ADDR_EXP 109
24372: PUSH
24373: LD_INT 84
24375: ST_TO_ADDR
// tech_Crane := 85 ;
24376: LD_ADDR_EXP 110
24380: PUSH
24381: LD_INT 85
24383: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24384: LD_ADDR_EXP 111
24388: PUSH
24389: LD_INT 86
24391: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24392: LD_ADDR_EXP 112
24396: PUSH
24397: LD_INT 87
24399: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24400: LD_ADDR_EXP 113
24404: PUSH
24405: LD_INT 88
24407: ST_TO_ADDR
// class_mastodont := 31 ;
24408: LD_ADDR_EXP 114
24412: PUSH
24413: LD_INT 31
24415: ST_TO_ADDR
// class_horse := 21 ;
24416: LD_ADDR_EXP 115
24420: PUSH
24421: LD_INT 21
24423: ST_TO_ADDR
// end ;
24424: LD_VAR 0 1
24428: RET
// every 1 do
24429: GO 24431
24431: DISABLE
// InitGlobalVariables ; end_of_file
24432: CALL 24269 0 0
24436: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24437: LD_INT 0
24439: PPUSH
24440: PPUSH
// if exist_mode then
24441: LD_VAR 0 2
24445: IFFALSE 24470
// unit := CreateCharacter ( prefix & ident ) else
24447: LD_ADDR_VAR 0 5
24451: PUSH
24452: LD_VAR 0 3
24456: PUSH
24457: LD_VAR 0 1
24461: STR
24462: PPUSH
24463: CALL_OW 34
24467: ST_TO_ADDR
24468: GO 24485
// unit := NewCharacter ( ident ) ;
24470: LD_ADDR_VAR 0 5
24474: PUSH
24475: LD_VAR 0 1
24479: PPUSH
24480: CALL_OW 25
24484: ST_TO_ADDR
// result := unit ;
24485: LD_ADDR_VAR 0 4
24489: PUSH
24490: LD_VAR 0 5
24494: ST_TO_ADDR
// end ;
24495: LD_VAR 0 4
24499: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24500: LD_INT 0
24502: PPUSH
24503: PPUSH
// if not side or not nation then
24504: LD_VAR 0 1
24508: NOT
24509: PUSH
24510: LD_VAR 0 2
24514: NOT
24515: OR
24516: IFFALSE 24520
// exit ;
24518: GO 25288
// case nation of nation_american :
24520: LD_VAR 0 2
24524: PUSH
24525: LD_INT 1
24527: DOUBLE
24528: EQUAL
24529: IFTRUE 24533
24531: GO 24747
24533: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24534: LD_ADDR_VAR 0 4
24538: PUSH
24539: LD_INT 35
24541: PUSH
24542: LD_INT 45
24544: PUSH
24545: LD_INT 46
24547: PUSH
24548: LD_INT 47
24550: PUSH
24551: LD_INT 82
24553: PUSH
24554: LD_INT 83
24556: PUSH
24557: LD_INT 84
24559: PUSH
24560: LD_INT 85
24562: PUSH
24563: LD_INT 86
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: LD_INT 2
24571: PUSH
24572: LD_INT 6
24574: PUSH
24575: LD_INT 15
24577: PUSH
24578: LD_INT 16
24580: PUSH
24581: LD_INT 7
24583: PUSH
24584: LD_INT 12
24586: PUSH
24587: LD_INT 13
24589: PUSH
24590: LD_INT 10
24592: PUSH
24593: LD_INT 14
24595: PUSH
24596: LD_INT 20
24598: PUSH
24599: LD_INT 21
24601: PUSH
24602: LD_INT 22
24604: PUSH
24605: LD_INT 25
24607: PUSH
24608: LD_INT 32
24610: PUSH
24611: LD_INT 27
24613: PUSH
24614: LD_INT 36
24616: PUSH
24617: LD_INT 69
24619: PUSH
24620: LD_INT 39
24622: PUSH
24623: LD_INT 34
24625: PUSH
24626: LD_INT 40
24628: PUSH
24629: LD_INT 48
24631: PUSH
24632: LD_INT 49
24634: PUSH
24635: LD_INT 50
24637: PUSH
24638: LD_INT 51
24640: PUSH
24641: LD_INT 52
24643: PUSH
24644: LD_INT 53
24646: PUSH
24647: LD_INT 54
24649: PUSH
24650: LD_INT 55
24652: PUSH
24653: LD_INT 56
24655: PUSH
24656: LD_INT 57
24658: PUSH
24659: LD_INT 58
24661: PUSH
24662: LD_INT 59
24664: PUSH
24665: LD_INT 60
24667: PUSH
24668: LD_INT 61
24670: PUSH
24671: LD_INT 62
24673: PUSH
24674: LD_INT 80
24676: PUSH
24677: LD_INT 82
24679: PUSH
24680: LD_INT 83
24682: PUSH
24683: LD_INT 84
24685: PUSH
24686: LD_INT 85
24688: PUSH
24689: LD_INT 86
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: ST_TO_ADDR
24745: GO 25212
24747: LD_INT 2
24749: DOUBLE
24750: EQUAL
24751: IFTRUE 24755
24753: GO 24981
24755: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24756: LD_ADDR_VAR 0 4
24760: PUSH
24761: LD_INT 35
24763: PUSH
24764: LD_INT 45
24766: PUSH
24767: LD_INT 46
24769: PUSH
24770: LD_INT 47
24772: PUSH
24773: LD_INT 82
24775: PUSH
24776: LD_INT 83
24778: PUSH
24779: LD_INT 84
24781: PUSH
24782: LD_INT 85
24784: PUSH
24785: LD_INT 87
24787: PUSH
24788: LD_INT 70
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: LD_INT 11
24796: PUSH
24797: LD_INT 3
24799: PUSH
24800: LD_INT 4
24802: PUSH
24803: LD_INT 5
24805: PUSH
24806: LD_INT 6
24808: PUSH
24809: LD_INT 15
24811: PUSH
24812: LD_INT 18
24814: PUSH
24815: LD_INT 7
24817: PUSH
24818: LD_INT 17
24820: PUSH
24821: LD_INT 8
24823: PUSH
24824: LD_INT 20
24826: PUSH
24827: LD_INT 21
24829: PUSH
24830: LD_INT 22
24832: PUSH
24833: LD_INT 72
24835: PUSH
24836: LD_INT 26
24838: PUSH
24839: LD_INT 69
24841: PUSH
24842: LD_INT 39
24844: PUSH
24845: LD_INT 40
24847: PUSH
24848: LD_INT 41
24850: PUSH
24851: LD_INT 42
24853: PUSH
24854: LD_INT 43
24856: PUSH
24857: LD_INT 48
24859: PUSH
24860: LD_INT 49
24862: PUSH
24863: LD_INT 50
24865: PUSH
24866: LD_INT 51
24868: PUSH
24869: LD_INT 52
24871: PUSH
24872: LD_INT 53
24874: PUSH
24875: LD_INT 54
24877: PUSH
24878: LD_INT 55
24880: PUSH
24881: LD_INT 56
24883: PUSH
24884: LD_INT 60
24886: PUSH
24887: LD_INT 61
24889: PUSH
24890: LD_INT 62
24892: PUSH
24893: LD_INT 66
24895: PUSH
24896: LD_INT 67
24898: PUSH
24899: LD_INT 68
24901: PUSH
24902: LD_INT 81
24904: PUSH
24905: LD_INT 82
24907: PUSH
24908: LD_INT 83
24910: PUSH
24911: LD_INT 84
24913: PUSH
24914: LD_INT 85
24916: PUSH
24917: LD_INT 87
24919: PUSH
24920: LD_INT 88
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: ST_TO_ADDR
24979: GO 25212
24981: LD_INT 3
24983: DOUBLE
24984: EQUAL
24985: IFTRUE 24989
24987: GO 25211
24989: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24990: LD_ADDR_VAR 0 4
24994: PUSH
24995: LD_INT 46
24997: PUSH
24998: LD_INT 47
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: LD_INT 82
25009: PUSH
25010: LD_INT 83
25012: PUSH
25013: LD_INT 84
25015: PUSH
25016: LD_INT 85
25018: PUSH
25019: LD_INT 86
25021: PUSH
25022: LD_INT 11
25024: PUSH
25025: LD_INT 9
25027: PUSH
25028: LD_INT 20
25030: PUSH
25031: LD_INT 19
25033: PUSH
25034: LD_INT 21
25036: PUSH
25037: LD_INT 24
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 25
25045: PUSH
25046: LD_INT 28
25048: PUSH
25049: LD_INT 29
25051: PUSH
25052: LD_INT 30
25054: PUSH
25055: LD_INT 31
25057: PUSH
25058: LD_INT 37
25060: PUSH
25061: LD_INT 38
25063: PUSH
25064: LD_INT 32
25066: PUSH
25067: LD_INT 27
25069: PUSH
25070: LD_INT 33
25072: PUSH
25073: LD_INT 69
25075: PUSH
25076: LD_INT 39
25078: PUSH
25079: LD_INT 34
25081: PUSH
25082: LD_INT 40
25084: PUSH
25085: LD_INT 71
25087: PUSH
25088: LD_INT 23
25090: PUSH
25091: LD_INT 44
25093: PUSH
25094: LD_INT 48
25096: PUSH
25097: LD_INT 49
25099: PUSH
25100: LD_INT 50
25102: PUSH
25103: LD_INT 51
25105: PUSH
25106: LD_INT 52
25108: PUSH
25109: LD_INT 53
25111: PUSH
25112: LD_INT 54
25114: PUSH
25115: LD_INT 55
25117: PUSH
25118: LD_INT 56
25120: PUSH
25121: LD_INT 57
25123: PUSH
25124: LD_INT 58
25126: PUSH
25127: LD_INT 59
25129: PUSH
25130: LD_INT 63
25132: PUSH
25133: LD_INT 64
25135: PUSH
25136: LD_INT 65
25138: PUSH
25139: LD_INT 82
25141: PUSH
25142: LD_INT 83
25144: PUSH
25145: LD_INT 84
25147: PUSH
25148: LD_INT 85
25150: PUSH
25151: LD_INT 86
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: ST_TO_ADDR
25209: GO 25212
25211: POP
// if state > - 1 and state < 3 then
25212: LD_VAR 0 3
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: GREATER
25221: PUSH
25222: LD_VAR 0 3
25226: PUSH
25227: LD_INT 3
25229: LESS
25230: AND
25231: IFFALSE 25288
// for i in result do
25233: LD_ADDR_VAR 0 5
25237: PUSH
25238: LD_VAR 0 4
25242: PUSH
25243: FOR_IN
25244: IFFALSE 25286
// if GetTech ( i , side ) <> state then
25246: LD_VAR 0 5
25250: PPUSH
25251: LD_VAR 0 1
25255: PPUSH
25256: CALL_OW 321
25260: PUSH
25261: LD_VAR 0 3
25265: NONEQUAL
25266: IFFALSE 25284
// result := result diff i ;
25268: LD_ADDR_VAR 0 4
25272: PUSH
25273: LD_VAR 0 4
25277: PUSH
25278: LD_VAR 0 5
25282: DIFF
25283: ST_TO_ADDR
25284: GO 25243
25286: POP
25287: POP
// end ;
25288: LD_VAR 0 4
25292: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25293: LD_INT 0
25295: PPUSH
25296: PPUSH
25297: PPUSH
// result := true ;
25298: LD_ADDR_VAR 0 3
25302: PUSH
25303: LD_INT 1
25305: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25306: LD_ADDR_VAR 0 5
25310: PUSH
25311: LD_VAR 0 2
25315: PPUSH
25316: CALL_OW 480
25320: ST_TO_ADDR
// if not tmp then
25321: LD_VAR 0 5
25325: NOT
25326: IFFALSE 25330
// exit ;
25328: GO 25379
// for i in tmp do
25330: LD_ADDR_VAR 0 4
25334: PUSH
25335: LD_VAR 0 5
25339: PUSH
25340: FOR_IN
25341: IFFALSE 25377
// if GetTech ( i , side ) <> state_researched then
25343: LD_VAR 0 4
25347: PPUSH
25348: LD_VAR 0 1
25352: PPUSH
25353: CALL_OW 321
25357: PUSH
25358: LD_INT 2
25360: NONEQUAL
25361: IFFALSE 25375
// begin result := false ;
25363: LD_ADDR_VAR 0 3
25367: PUSH
25368: LD_INT 0
25370: ST_TO_ADDR
// exit ;
25371: POP
25372: POP
25373: GO 25379
// end ;
25375: GO 25340
25377: POP
25378: POP
// end ;
25379: LD_VAR 0 3
25383: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25384: LD_INT 0
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
25398: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25399: LD_VAR 0 1
25403: NOT
25404: PUSH
25405: LD_VAR 0 1
25409: PPUSH
25410: CALL_OW 257
25414: PUSH
25415: LD_INT 9
25417: NONEQUAL
25418: OR
25419: IFFALSE 25423
// exit ;
25421: GO 25996
// side := GetSide ( unit ) ;
25423: LD_ADDR_VAR 0 9
25427: PUSH
25428: LD_VAR 0 1
25432: PPUSH
25433: CALL_OW 255
25437: ST_TO_ADDR
// tech_space := tech_spacanom ;
25438: LD_ADDR_VAR 0 12
25442: PUSH
25443: LD_INT 29
25445: ST_TO_ADDR
// tech_time := tech_taurad ;
25446: LD_ADDR_VAR 0 13
25450: PUSH
25451: LD_INT 28
25453: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25454: LD_ADDR_VAR 0 11
25458: PUSH
25459: LD_VAR 0 1
25463: PPUSH
25464: CALL_OW 310
25468: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25469: LD_VAR 0 11
25473: PPUSH
25474: CALL_OW 247
25478: PUSH
25479: LD_INT 2
25481: EQUAL
25482: IFFALSE 25486
// exit ;
25484: GO 25996
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25486: LD_ADDR_VAR 0 8
25490: PUSH
25491: LD_INT 81
25493: PUSH
25494: LD_VAR 0 9
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 3
25505: PUSH
25506: LD_INT 21
25508: PUSH
25509: LD_INT 3
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// if not tmp then
25529: LD_VAR 0 8
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25996
// if in_unit then
25538: LD_VAR 0 11
25542: IFFALSE 25566
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25544: LD_ADDR_VAR 0 10
25548: PUSH
25549: LD_VAR 0 8
25553: PPUSH
25554: LD_VAR 0 11
25558: PPUSH
25559: CALL_OW 74
25563: ST_TO_ADDR
25564: GO 25586
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25566: LD_ADDR_VAR 0 10
25570: PUSH
25571: LD_VAR 0 8
25575: PPUSH
25576: LD_VAR 0 1
25580: PPUSH
25581: CALL_OW 74
25585: ST_TO_ADDR
// if not enemy then
25586: LD_VAR 0 10
25590: NOT
25591: IFFALSE 25595
// exit ;
25593: GO 25996
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25595: LD_VAR 0 11
25599: PUSH
25600: LD_VAR 0 11
25604: PPUSH
25605: LD_VAR 0 10
25609: PPUSH
25610: CALL_OW 296
25614: PUSH
25615: LD_INT 13
25617: GREATER
25618: AND
25619: PUSH
25620: LD_VAR 0 1
25624: PPUSH
25625: LD_VAR 0 10
25629: PPUSH
25630: CALL_OW 296
25634: PUSH
25635: LD_INT 12
25637: GREATER
25638: OR
25639: IFFALSE 25643
// exit ;
25641: GO 25996
// missile := [ 1 ] ;
25643: LD_ADDR_VAR 0 14
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25654: LD_VAR 0 9
25658: PPUSH
25659: LD_VAR 0 12
25663: PPUSH
25664: CALL_OW 325
25668: IFFALSE 25697
// missile := Insert ( missile , missile + 1 , 2 ) ;
25670: LD_ADDR_VAR 0 14
25674: PUSH
25675: LD_VAR 0 14
25679: PPUSH
25680: LD_VAR 0 14
25684: PUSH
25685: LD_INT 1
25687: PLUS
25688: PPUSH
25689: LD_INT 2
25691: PPUSH
25692: CALL_OW 2
25696: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25697: LD_VAR 0 9
25701: PPUSH
25702: LD_VAR 0 13
25706: PPUSH
25707: CALL_OW 325
25711: PUSH
25712: LD_VAR 0 10
25716: PPUSH
25717: CALL_OW 255
25721: PPUSH
25722: LD_VAR 0 13
25726: PPUSH
25727: CALL_OW 325
25731: NOT
25732: AND
25733: IFFALSE 25762
// missile := Insert ( missile , missile + 1 , 3 ) ;
25735: LD_ADDR_VAR 0 14
25739: PUSH
25740: LD_VAR 0 14
25744: PPUSH
25745: LD_VAR 0 14
25749: PUSH
25750: LD_INT 1
25752: PLUS
25753: PPUSH
25754: LD_INT 3
25756: PPUSH
25757: CALL_OW 2
25761: ST_TO_ADDR
// if missile < 2 then
25762: LD_VAR 0 14
25766: PUSH
25767: LD_INT 2
25769: LESS
25770: IFFALSE 25774
// exit ;
25772: GO 25996
// x := GetX ( enemy ) ;
25774: LD_ADDR_VAR 0 4
25778: PUSH
25779: LD_VAR 0 10
25783: PPUSH
25784: CALL_OW 250
25788: ST_TO_ADDR
// y := GetY ( enemy ) ;
25789: LD_ADDR_VAR 0 5
25793: PUSH
25794: LD_VAR 0 10
25798: PPUSH
25799: CALL_OW 251
25803: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25804: LD_ADDR_VAR 0 6
25808: PUSH
25809: LD_VAR 0 4
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PPUSH
25818: LD_INT 1
25820: PPUSH
25821: CALL_OW 12
25825: PLUS
25826: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25827: LD_ADDR_VAR 0 7
25831: PUSH
25832: LD_VAR 0 5
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PPUSH
25841: LD_INT 1
25843: PPUSH
25844: CALL_OW 12
25848: PLUS
25849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25850: LD_VAR 0 6
25854: PPUSH
25855: LD_VAR 0 7
25859: PPUSH
25860: CALL_OW 488
25864: NOT
25865: IFFALSE 25887
// begin _x := x ;
25867: LD_ADDR_VAR 0 6
25871: PUSH
25872: LD_VAR 0 4
25876: ST_TO_ADDR
// _y := y ;
25877: LD_ADDR_VAR 0 7
25881: PUSH
25882: LD_VAR 0 5
25886: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25887: LD_ADDR_VAR 0 3
25891: PUSH
25892: LD_INT 1
25894: PPUSH
25895: LD_VAR 0 14
25899: PPUSH
25900: CALL_OW 12
25904: ST_TO_ADDR
// case i of 1 :
25905: LD_VAR 0 3
25909: PUSH
25910: LD_INT 1
25912: DOUBLE
25913: EQUAL
25914: IFTRUE 25918
25916: GO 25935
25918: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25919: LD_VAR 0 1
25923: PPUSH
25924: LD_VAR 0 10
25928: PPUSH
25929: CALL_OW 115
25933: GO 25996
25935: LD_INT 2
25937: DOUBLE
25938: EQUAL
25939: IFTRUE 25943
25941: GO 25965
25943: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25944: LD_VAR 0 1
25948: PPUSH
25949: LD_VAR 0 6
25953: PPUSH
25954: LD_VAR 0 7
25958: PPUSH
25959: CALL_OW 153
25963: GO 25996
25965: LD_INT 3
25967: DOUBLE
25968: EQUAL
25969: IFTRUE 25973
25971: GO 25995
25973: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25974: LD_VAR 0 1
25978: PPUSH
25979: LD_VAR 0 6
25983: PPUSH
25984: LD_VAR 0 7
25988: PPUSH
25989: CALL_OW 154
25993: GO 25996
25995: POP
// end ;
25996: LD_VAR 0 2
26000: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
// if not unit or not building then
26009: LD_VAR 0 1
26013: NOT
26014: PUSH
26015: LD_VAR 0 2
26019: NOT
26020: OR
26021: IFFALSE 26025
// exit ;
26023: GO 26183
// x := GetX ( building ) ;
26025: LD_ADDR_VAR 0 5
26029: PUSH
26030: LD_VAR 0 2
26034: PPUSH
26035: CALL_OW 250
26039: ST_TO_ADDR
// y := GetY ( building ) ;
26040: LD_ADDR_VAR 0 6
26044: PUSH
26045: LD_VAR 0 2
26049: PPUSH
26050: CALL_OW 251
26054: ST_TO_ADDR
// for i = 0 to 5 do
26055: LD_ADDR_VAR 0 4
26059: PUSH
26060: DOUBLE
26061: LD_INT 0
26063: DEC
26064: ST_TO_ADDR
26065: LD_INT 5
26067: PUSH
26068: FOR_TO
26069: IFFALSE 26181
// begin _x := ShiftX ( x , i , 3 ) ;
26071: LD_ADDR_VAR 0 7
26075: PUSH
26076: LD_VAR 0 5
26080: PPUSH
26081: LD_VAR 0 4
26085: PPUSH
26086: LD_INT 3
26088: PPUSH
26089: CALL_OW 272
26093: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26094: LD_ADDR_VAR 0 8
26098: PUSH
26099: LD_VAR 0 6
26103: PPUSH
26104: LD_VAR 0 4
26108: PPUSH
26109: LD_INT 3
26111: PPUSH
26112: CALL_OW 273
26116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26117: LD_VAR 0 7
26121: PPUSH
26122: LD_VAR 0 8
26126: PPUSH
26127: CALL_OW 488
26131: NOT
26132: IFFALSE 26136
// continue ;
26134: GO 26068
// if HexInfo ( _x , _y ) = 0 then
26136: LD_VAR 0 7
26140: PPUSH
26141: LD_VAR 0 8
26145: PPUSH
26146: CALL_OW 428
26150: PUSH
26151: LD_INT 0
26153: EQUAL
26154: IFFALSE 26179
// begin ComMoveXY ( unit , _x , _y ) ;
26156: LD_VAR 0 1
26160: PPUSH
26161: LD_VAR 0 7
26165: PPUSH
26166: LD_VAR 0 8
26170: PPUSH
26171: CALL_OW 111
// exit ;
26175: POP
26176: POP
26177: GO 26183
// end ; end ;
26179: GO 26068
26181: POP
26182: POP
// end ;
26183: LD_VAR 0 3
26187: RET
// export function ScanBase ( side , base_area ) ; begin
26188: LD_INT 0
26190: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: LD_VAR 0 2
26200: PPUSH
26201: LD_INT 81
26203: PUSH
26204: LD_VAR 0 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PPUSH
26213: CALL_OW 70
26217: ST_TO_ADDR
// end ;
26218: LD_VAR 0 3
26222: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26223: LD_INT 0
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
// result := false ;
26229: LD_ADDR_VAR 0 2
26233: PUSH
26234: LD_INT 0
26236: ST_TO_ADDR
// side := GetSide ( unit ) ;
26237: LD_ADDR_VAR 0 3
26241: PUSH
26242: LD_VAR 0 1
26246: PPUSH
26247: CALL_OW 255
26251: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26252: LD_ADDR_VAR 0 4
26256: PUSH
26257: LD_VAR 0 1
26261: PPUSH
26262: CALL_OW 248
26266: ST_TO_ADDR
// case nat of 1 :
26267: LD_VAR 0 4
26271: PUSH
26272: LD_INT 1
26274: DOUBLE
26275: EQUAL
26276: IFTRUE 26280
26278: GO 26291
26280: POP
// tech := tech_lassight ; 2 :
26281: LD_ADDR_VAR 0 5
26285: PUSH
26286: LD_INT 12
26288: ST_TO_ADDR
26289: GO 26330
26291: LD_INT 2
26293: DOUBLE
26294: EQUAL
26295: IFTRUE 26299
26297: GO 26310
26299: POP
// tech := tech_mortar ; 3 :
26300: LD_ADDR_VAR 0 5
26304: PUSH
26305: LD_INT 41
26307: ST_TO_ADDR
26308: GO 26330
26310: LD_INT 3
26312: DOUBLE
26313: EQUAL
26314: IFTRUE 26318
26316: GO 26329
26318: POP
// tech := tech_bazooka ; end ;
26319: LD_ADDR_VAR 0 5
26323: PUSH
26324: LD_INT 44
26326: ST_TO_ADDR
26327: GO 26330
26329: POP
// if Researched ( side , tech ) then
26330: LD_VAR 0 3
26334: PPUSH
26335: LD_VAR 0 5
26339: PPUSH
26340: CALL_OW 325
26344: IFFALSE 26371
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26346: LD_ADDR_VAR 0 2
26350: PUSH
26351: LD_INT 5
26353: PUSH
26354: LD_INT 8
26356: PUSH
26357: LD_INT 9
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: PUSH
26365: LD_VAR 0 4
26369: ARRAY
26370: ST_TO_ADDR
// end ;
26371: LD_VAR 0 2
26375: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26376: LD_INT 0
26378: PPUSH
26379: PPUSH
26380: PPUSH
// if not mines then
26381: LD_VAR 0 2
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26534
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_INT 81
26397: PUSH
26398: LD_VAR 0 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: LD_INT 21
26412: PUSH
26413: LD_INT 3
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PPUSH
26428: CALL_OW 69
26432: ST_TO_ADDR
// for i in mines do
26433: LD_ADDR_VAR 0 4
26437: PUSH
26438: LD_VAR 0 2
26442: PUSH
26443: FOR_IN
26444: IFFALSE 26532
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26446: LD_VAR 0 4
26450: PUSH
26451: LD_INT 1
26453: ARRAY
26454: PPUSH
26455: LD_VAR 0 4
26459: PUSH
26460: LD_INT 2
26462: ARRAY
26463: PPUSH
26464: CALL_OW 458
26468: NOT
26469: IFFALSE 26473
// continue ;
26471: GO 26443
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26473: LD_VAR 0 4
26477: PUSH
26478: LD_INT 1
26480: ARRAY
26481: PPUSH
26482: LD_VAR 0 4
26486: PUSH
26487: LD_INT 2
26489: ARRAY
26490: PPUSH
26491: CALL_OW 428
26495: PUSH
26496: LD_VAR 0 5
26500: IN
26501: IFFALSE 26530
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26503: LD_VAR 0 4
26507: PUSH
26508: LD_INT 1
26510: ARRAY
26511: PPUSH
26512: LD_VAR 0 4
26516: PUSH
26517: LD_INT 2
26519: ARRAY
26520: PPUSH
26521: LD_VAR 0 1
26525: PPUSH
26526: CALL_OW 456
// end ;
26530: GO 26443
26532: POP
26533: POP
// end ;
26534: LD_VAR 0 3
26538: RET
// export function Count ( array ) ; var i ; begin
26539: LD_INT 0
26541: PPUSH
26542: PPUSH
// result := 0 ;
26543: LD_ADDR_VAR 0 2
26547: PUSH
26548: LD_INT 0
26550: ST_TO_ADDR
// for i in array do
26551: LD_ADDR_VAR 0 3
26555: PUSH
26556: LD_VAR 0 1
26560: PUSH
26561: FOR_IN
26562: IFFALSE 26586
// if i then
26564: LD_VAR 0 3
26568: IFFALSE 26584
// result := result + 1 ;
26570: LD_ADDR_VAR 0 2
26574: PUSH
26575: LD_VAR 0 2
26579: PUSH
26580: LD_INT 1
26582: PLUS
26583: ST_TO_ADDR
26584: GO 26561
26586: POP
26587: POP
// end ;
26588: LD_VAR 0 2
26592: RET
// export function IsEmpty ( building ) ; begin
26593: LD_INT 0
26595: PPUSH
// if not building then
26596: LD_VAR 0 1
26600: NOT
26601: IFFALSE 26605
// exit ;
26603: GO 26648
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26605: LD_ADDR_VAR 0 2
26609: PUSH
26610: LD_VAR 0 1
26614: PUSH
26615: LD_INT 22
26617: PUSH
26618: LD_VAR 0 1
26622: PPUSH
26623: CALL_OW 255
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 58
26634: PUSH
26635: EMPTY
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PPUSH
26642: CALL_OW 69
26646: IN
26647: ST_TO_ADDR
// end ;
26648: LD_VAR 0 2
26652: RET
// export function IsNotFull ( building ) ; begin
26653: LD_INT 0
26655: PPUSH
// if not building then
26656: LD_VAR 0 1
26660: NOT
26661: IFFALSE 26665
// exit ;
26663: GO 26684
// result := UnitsInside ( building ) < 6 ;
26665: LD_ADDR_VAR 0 2
26669: PUSH
26670: LD_VAR 0 1
26674: PPUSH
26675: CALL_OW 313
26679: PUSH
26680: LD_INT 6
26682: LESS
26683: ST_TO_ADDR
// end ;
26684: LD_VAR 0 2
26688: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26689: LD_INT 0
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
// tmp := [ ] ;
26695: LD_ADDR_VAR 0 3
26699: PUSH
26700: EMPTY
26701: ST_TO_ADDR
// list := [ ] ;
26702: LD_ADDR_VAR 0 5
26706: PUSH
26707: EMPTY
26708: ST_TO_ADDR
// for i = 16 to 25 do
26709: LD_ADDR_VAR 0 4
26713: PUSH
26714: DOUBLE
26715: LD_INT 16
26717: DEC
26718: ST_TO_ADDR
26719: LD_INT 25
26721: PUSH
26722: FOR_TO
26723: IFFALSE 26796
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26725: LD_ADDR_VAR 0 3
26729: PUSH
26730: LD_VAR 0 3
26734: PUSH
26735: LD_INT 22
26737: PUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 255
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 91
26754: PUSH
26755: LD_VAR 0 1
26759: PUSH
26760: LD_INT 6
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 30
26770: PUSH
26771: LD_VAR 0 4
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: LIST
26784: PUSH
26785: EMPTY
26786: LIST
26787: PPUSH
26788: CALL_OW 69
26792: ADD
26793: ST_TO_ADDR
26794: GO 26722
26796: POP
26797: POP
// for i = 1 to tmp do
26798: LD_ADDR_VAR 0 4
26802: PUSH
26803: DOUBLE
26804: LD_INT 1
26806: DEC
26807: ST_TO_ADDR
26808: LD_VAR 0 3
26812: PUSH
26813: FOR_TO
26814: IFFALSE 26902
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26816: LD_ADDR_VAR 0 5
26820: PUSH
26821: LD_VAR 0 5
26825: PUSH
26826: LD_VAR 0 3
26830: PUSH
26831: LD_VAR 0 4
26835: ARRAY
26836: PPUSH
26837: CALL_OW 266
26841: PUSH
26842: LD_VAR 0 3
26846: PUSH
26847: LD_VAR 0 4
26851: ARRAY
26852: PPUSH
26853: CALL_OW 250
26857: PUSH
26858: LD_VAR 0 3
26862: PUSH
26863: LD_VAR 0 4
26867: ARRAY
26868: PPUSH
26869: CALL_OW 251
26873: PUSH
26874: LD_VAR 0 3
26878: PUSH
26879: LD_VAR 0 4
26883: ARRAY
26884: PPUSH
26885: CALL_OW 254
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: ADD
26899: ST_TO_ADDR
26900: GO 26813
26902: POP
26903: POP
// result := list ;
26904: LD_ADDR_VAR 0 2
26908: PUSH
26909: LD_VAR 0 5
26913: ST_TO_ADDR
// end ;
26914: LD_VAR 0 2
26918: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26919: LD_INT 0
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
26926: PPUSH
26927: PPUSH
// if not factory then
26928: LD_VAR 0 1
26932: NOT
26933: IFFALSE 26937
// exit ;
26935: GO 27530
// if control = control_apeman then
26937: LD_VAR 0 4
26941: PUSH
26942: LD_INT 5
26944: EQUAL
26945: IFFALSE 27054
// begin tmp := UnitsInside ( factory ) ;
26947: LD_ADDR_VAR 0 8
26951: PUSH
26952: LD_VAR 0 1
26956: PPUSH
26957: CALL_OW 313
26961: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26962: LD_VAR 0 8
26966: PPUSH
26967: LD_INT 25
26969: PUSH
26970: LD_INT 12
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PPUSH
26977: CALL_OW 72
26981: NOT
26982: IFFALSE 26992
// control := control_manual ;
26984: LD_ADDR_VAR 0 4
26988: PUSH
26989: LD_INT 1
26991: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26992: LD_ADDR_VAR 0 8
26996: PUSH
26997: LD_VAR 0 1
27001: PPUSH
27002: CALL 26689 0 1
27006: ST_TO_ADDR
// if tmp then
27007: LD_VAR 0 8
27011: IFFALSE 27054
// begin for i in tmp do
27013: LD_ADDR_VAR 0 7
27017: PUSH
27018: LD_VAR 0 8
27022: PUSH
27023: FOR_IN
27024: IFFALSE 27052
// if i [ 1 ] = b_ext_radio then
27026: LD_VAR 0 7
27030: PUSH
27031: LD_INT 1
27033: ARRAY
27034: PUSH
27035: LD_INT 22
27037: EQUAL
27038: IFFALSE 27050
// begin control := control_remote ;
27040: LD_ADDR_VAR 0 4
27044: PUSH
27045: LD_INT 2
27047: ST_TO_ADDR
// break ;
27048: GO 27052
// end ;
27050: GO 27023
27052: POP
27053: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27054: LD_VAR 0 1
27058: PPUSH
27059: LD_VAR 0 2
27063: PPUSH
27064: LD_VAR 0 3
27068: PPUSH
27069: LD_VAR 0 4
27073: PPUSH
27074: LD_VAR 0 5
27078: PPUSH
27079: CALL_OW 448
27083: IFFALSE 27118
// begin result := [ chassis , engine , control , weapon ] ;
27085: LD_ADDR_VAR 0 6
27089: PUSH
27090: LD_VAR 0 2
27094: PUSH
27095: LD_VAR 0 3
27099: PUSH
27100: LD_VAR 0 4
27104: PUSH
27105: LD_VAR 0 5
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: ST_TO_ADDR
// exit ;
27116: GO 27530
// end ; _chassis := AvailableChassisList ( factory ) ;
27118: LD_ADDR_VAR 0 9
27122: PUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL_OW 475
27132: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27133: LD_ADDR_VAR 0 11
27137: PUSH
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 476
27147: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27148: LD_ADDR_VAR 0 12
27152: PUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 477
27162: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27163: LD_ADDR_VAR 0 10
27167: PUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: CALL_OW 478
27177: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27178: LD_VAR 0 9
27182: NOT
27183: PUSH
27184: LD_VAR 0 11
27188: NOT
27189: OR
27190: PUSH
27191: LD_VAR 0 12
27195: NOT
27196: OR
27197: PUSH
27198: LD_VAR 0 10
27202: NOT
27203: OR
27204: IFFALSE 27239
// begin result := [ chassis , engine , control , weapon ] ;
27206: LD_ADDR_VAR 0 6
27210: PUSH
27211: LD_VAR 0 2
27215: PUSH
27216: LD_VAR 0 3
27220: PUSH
27221: LD_VAR 0 4
27225: PUSH
27226: LD_VAR 0 5
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: ST_TO_ADDR
// exit ;
27237: GO 27530
// end ; if not chassis in _chassis then
27239: LD_VAR 0 2
27243: PUSH
27244: LD_VAR 0 9
27248: IN
27249: NOT
27250: IFFALSE 27276
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27252: LD_ADDR_VAR 0 2
27256: PUSH
27257: LD_VAR 0 9
27261: PUSH
27262: LD_INT 1
27264: PPUSH
27265: LD_VAR 0 9
27269: PPUSH
27270: CALL_OW 12
27274: ARRAY
27275: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27276: LD_VAR 0 2
27280: PPUSH
27281: LD_VAR 0 3
27285: PPUSH
27286: CALL 27535 0 2
27290: NOT
27291: IFFALSE 27350
// repeat engine := _engine [ 1 ] ;
27293: LD_ADDR_VAR 0 3
27297: PUSH
27298: LD_VAR 0 11
27302: PUSH
27303: LD_INT 1
27305: ARRAY
27306: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27307: LD_ADDR_VAR 0 11
27311: PUSH
27312: LD_VAR 0 11
27316: PPUSH
27317: LD_INT 1
27319: PPUSH
27320: CALL_OW 3
27324: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27325: LD_VAR 0 2
27329: PPUSH
27330: LD_VAR 0 3
27334: PPUSH
27335: CALL 27535 0 2
27339: PUSH
27340: LD_VAR 0 11
27344: PUSH
27345: EMPTY
27346: EQUAL
27347: OR
27348: IFFALSE 27293
// if not control in _control then
27350: LD_VAR 0 4
27354: PUSH
27355: LD_VAR 0 12
27359: IN
27360: NOT
27361: IFFALSE 27387
// control := _control [ rand ( 1 , _control ) ] ;
27363: LD_ADDR_VAR 0 4
27367: PUSH
27368: LD_VAR 0 12
27372: PUSH
27373: LD_INT 1
27375: PPUSH
27376: LD_VAR 0 12
27380: PPUSH
27381: CALL_OW 12
27385: ARRAY
27386: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27387: LD_VAR 0 2
27391: PPUSH
27392: LD_VAR 0 5
27396: PPUSH
27397: CALL 27755 0 2
27401: NOT
27402: IFFALSE 27461
// repeat weapon := _weapon [ 1 ] ;
27404: LD_ADDR_VAR 0 5
27408: PUSH
27409: LD_VAR 0 10
27413: PUSH
27414: LD_INT 1
27416: ARRAY
27417: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27418: LD_ADDR_VAR 0 10
27422: PUSH
27423: LD_VAR 0 10
27427: PPUSH
27428: LD_INT 1
27430: PPUSH
27431: CALL_OW 3
27435: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27436: LD_VAR 0 2
27440: PPUSH
27441: LD_VAR 0 5
27445: PPUSH
27446: CALL 27755 0 2
27450: PUSH
27451: LD_VAR 0 10
27455: PUSH
27456: EMPTY
27457: EQUAL
27458: OR
27459: IFFALSE 27404
// result := [ ] ;
27461: LD_ADDR_VAR 0 6
27465: PUSH
27466: EMPTY
27467: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27468: LD_VAR 0 1
27472: PPUSH
27473: LD_VAR 0 2
27477: PPUSH
27478: LD_VAR 0 3
27482: PPUSH
27483: LD_VAR 0 4
27487: PPUSH
27488: LD_VAR 0 5
27492: PPUSH
27493: CALL_OW 448
27497: IFFALSE 27530
// result := [ chassis , engine , control , weapon ] ;
27499: LD_ADDR_VAR 0 6
27503: PUSH
27504: LD_VAR 0 2
27508: PUSH
27509: LD_VAR 0 3
27513: PUSH
27514: LD_VAR 0 4
27518: PUSH
27519: LD_VAR 0 5
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
// end ;
27530: LD_VAR 0 6
27534: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27535: LD_INT 0
27537: PPUSH
// if not chassis or not engine then
27538: LD_VAR 0 1
27542: NOT
27543: PUSH
27544: LD_VAR 0 2
27548: NOT
27549: OR
27550: IFFALSE 27554
// exit ;
27552: GO 27750
// case engine of engine_solar :
27554: LD_VAR 0 2
27558: PUSH
27559: LD_INT 2
27561: DOUBLE
27562: EQUAL
27563: IFTRUE 27567
27565: GO 27605
27567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27568: LD_ADDR_VAR 0 3
27572: PUSH
27573: LD_INT 11
27575: PUSH
27576: LD_INT 12
27578: PUSH
27579: LD_INT 13
27581: PUSH
27582: LD_INT 14
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 3
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: ST_TO_ADDR
27603: GO 27734
27605: LD_INT 1
27607: DOUBLE
27608: EQUAL
27609: IFTRUE 27613
27611: GO 27675
27613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27614: LD_ADDR_VAR 0 3
27618: PUSH
27619: LD_INT 11
27621: PUSH
27622: LD_INT 12
27624: PUSH
27625: LD_INT 13
27627: PUSH
27628: LD_INT 14
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: LD_INT 3
27639: PUSH
27640: LD_INT 4
27642: PUSH
27643: LD_INT 5
27645: PUSH
27646: LD_INT 21
27648: PUSH
27649: LD_INT 23
27651: PUSH
27652: LD_INT 22
27654: PUSH
27655: LD_INT 24
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: ST_TO_ADDR
27673: GO 27734
27675: LD_INT 3
27677: DOUBLE
27678: EQUAL
27679: IFTRUE 27683
27681: GO 27733
27683: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27684: LD_ADDR_VAR 0 3
27688: PUSH
27689: LD_INT 13
27691: PUSH
27692: LD_INT 14
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 3
27700: PUSH
27701: LD_INT 4
27703: PUSH
27704: LD_INT 5
27706: PUSH
27707: LD_INT 21
27709: PUSH
27710: LD_INT 22
27712: PUSH
27713: LD_INT 23
27715: PUSH
27716: LD_INT 24
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: ST_TO_ADDR
27731: GO 27734
27733: POP
// result := ( chassis in result ) ;
27734: LD_ADDR_VAR 0 3
27738: PUSH
27739: LD_VAR 0 1
27743: PUSH
27744: LD_VAR 0 3
27748: IN
27749: ST_TO_ADDR
// end ;
27750: LD_VAR 0 3
27754: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27755: LD_INT 0
27757: PPUSH
// if not chassis or not weapon then
27758: LD_VAR 0 1
27762: NOT
27763: PUSH
27764: LD_VAR 0 2
27768: NOT
27769: OR
27770: IFFALSE 27774
// exit ;
27772: GO 28836
// case weapon of us_machine_gun :
27774: LD_VAR 0 2
27778: PUSH
27779: LD_INT 2
27781: DOUBLE
27782: EQUAL
27783: IFTRUE 27787
27785: GO 27817
27787: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27788: LD_ADDR_VAR 0 3
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: LD_INT 3
27801: PUSH
27802: LD_INT 4
27804: PUSH
27805: LD_INT 5
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: ST_TO_ADDR
27815: GO 28820
27817: LD_INT 3
27819: DOUBLE
27820: EQUAL
27821: IFTRUE 27825
27823: GO 27855
27825: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27826: LD_ADDR_VAR 0 3
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 3
27839: PUSH
27840: LD_INT 4
27842: PUSH
27843: LD_INT 5
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
27853: GO 28820
27855: LD_INT 11
27857: DOUBLE
27858: EQUAL
27859: IFTRUE 27863
27861: GO 27893
27863: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27864: LD_ADDR_VAR 0 3
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: LD_INT 3
27877: PUSH
27878: LD_INT 4
27880: PUSH
27881: LD_INT 5
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: ST_TO_ADDR
27891: GO 28820
27893: LD_INT 4
27895: DOUBLE
27896: EQUAL
27897: IFTRUE 27901
27899: GO 27927
27901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27902: LD_ADDR_VAR 0 3
27906: PUSH
27907: LD_INT 2
27909: PUSH
27910: LD_INT 3
27912: PUSH
27913: LD_INT 4
27915: PUSH
27916: LD_INT 5
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
27925: GO 28820
27927: LD_INT 5
27929: DOUBLE
27930: EQUAL
27931: IFTRUE 27935
27933: GO 27961
27935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27936: LD_ADDR_VAR 0 3
27940: PUSH
27941: LD_INT 2
27943: PUSH
27944: LD_INT 3
27946: PUSH
27947: LD_INT 4
27949: PUSH
27950: LD_INT 5
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
27959: GO 28820
27961: LD_INT 9
27963: DOUBLE
27964: EQUAL
27965: IFTRUE 27969
27967: GO 27995
27969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27970: LD_ADDR_VAR 0 3
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 3
27980: PUSH
27981: LD_INT 4
27983: PUSH
27984: LD_INT 5
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: ST_TO_ADDR
27993: GO 28820
27995: LD_INT 7
27997: DOUBLE
27998: EQUAL
27999: IFTRUE 28003
28001: GO 28029
28003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28004: LD_ADDR_VAR 0 3
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: LD_INT 3
28014: PUSH
28015: LD_INT 4
28017: PUSH
28018: LD_INT 5
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: ST_TO_ADDR
28027: GO 28820
28029: LD_INT 12
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28037
28035: GO 28063
28037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28038: LD_ADDR_VAR 0 3
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: LD_INT 3
28048: PUSH
28049: LD_INT 4
28051: PUSH
28052: LD_INT 5
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: ST_TO_ADDR
28061: GO 28820
28063: LD_INT 13
28065: DOUBLE
28066: EQUAL
28067: IFTRUE 28071
28069: GO 28097
28071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28072: LD_ADDR_VAR 0 3
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: LD_INT 3
28082: PUSH
28083: LD_INT 4
28085: PUSH
28086: LD_INT 5
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
28095: GO 28820
28097: LD_INT 14
28099: DOUBLE
28100: EQUAL
28101: IFTRUE 28105
28103: GO 28123
28105: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28106: LD_ADDR_VAR 0 3
28110: PUSH
28111: LD_INT 4
28113: PUSH
28114: LD_INT 5
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: ST_TO_ADDR
28121: GO 28820
28123: LD_INT 6
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28131
28129: GO 28149
28131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28132: LD_ADDR_VAR 0 3
28136: PUSH
28137: LD_INT 4
28139: PUSH
28140: LD_INT 5
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: ST_TO_ADDR
28147: GO 28820
28149: LD_INT 10
28151: DOUBLE
28152: EQUAL
28153: IFTRUE 28157
28155: GO 28175
28157: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28158: LD_ADDR_VAR 0 3
28162: PUSH
28163: LD_INT 4
28165: PUSH
28166: LD_INT 5
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: ST_TO_ADDR
28173: GO 28820
28175: LD_INT 22
28177: DOUBLE
28178: EQUAL
28179: IFTRUE 28183
28181: GO 28209
28183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28184: LD_ADDR_VAR 0 3
28188: PUSH
28189: LD_INT 11
28191: PUSH
28192: LD_INT 12
28194: PUSH
28195: LD_INT 13
28197: PUSH
28198: LD_INT 14
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: ST_TO_ADDR
28207: GO 28820
28209: LD_INT 23
28211: DOUBLE
28212: EQUAL
28213: IFTRUE 28217
28215: GO 28243
28217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28218: LD_ADDR_VAR 0 3
28222: PUSH
28223: LD_INT 11
28225: PUSH
28226: LD_INT 12
28228: PUSH
28229: LD_INT 13
28231: PUSH
28232: LD_INT 14
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
28241: GO 28820
28243: LD_INT 24
28245: DOUBLE
28246: EQUAL
28247: IFTRUE 28251
28249: GO 28277
28251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28252: LD_ADDR_VAR 0 3
28256: PUSH
28257: LD_INT 11
28259: PUSH
28260: LD_INT 12
28262: PUSH
28263: LD_INT 13
28265: PUSH
28266: LD_INT 14
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: ST_TO_ADDR
28275: GO 28820
28277: LD_INT 30
28279: DOUBLE
28280: EQUAL
28281: IFTRUE 28285
28283: GO 28311
28285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28286: LD_ADDR_VAR 0 3
28290: PUSH
28291: LD_INT 11
28293: PUSH
28294: LD_INT 12
28296: PUSH
28297: LD_INT 13
28299: PUSH
28300: LD_INT 14
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
28309: GO 28820
28311: LD_INT 25
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28337
28319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28320: LD_ADDR_VAR 0 3
28324: PUSH
28325: LD_INT 13
28327: PUSH
28328: LD_INT 14
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: ST_TO_ADDR
28335: GO 28820
28337: LD_INT 27
28339: DOUBLE
28340: EQUAL
28341: IFTRUE 28345
28343: GO 28363
28345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28346: LD_ADDR_VAR 0 3
28350: PUSH
28351: LD_INT 13
28353: PUSH
28354: LD_INT 14
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: ST_TO_ADDR
28361: GO 28820
28363: LD_EXP 102
28367: DOUBLE
28368: EQUAL
28369: IFTRUE 28373
28371: GO 28399
28373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28374: LD_ADDR_VAR 0 3
28378: PUSH
28379: LD_INT 11
28381: PUSH
28382: LD_INT 12
28384: PUSH
28385: LD_INT 13
28387: PUSH
28388: LD_INT 14
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
28397: GO 28820
28399: LD_INT 28
28401: DOUBLE
28402: EQUAL
28403: IFTRUE 28407
28405: GO 28425
28407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28408: LD_ADDR_VAR 0 3
28412: PUSH
28413: LD_INT 13
28415: PUSH
28416: LD_INT 14
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: ST_TO_ADDR
28423: GO 28820
28425: LD_INT 29
28427: DOUBLE
28428: EQUAL
28429: IFTRUE 28433
28431: GO 28451
28433: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28434: LD_ADDR_VAR 0 3
28438: PUSH
28439: LD_INT 13
28441: PUSH
28442: LD_INT 14
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: ST_TO_ADDR
28449: GO 28820
28451: LD_INT 31
28453: DOUBLE
28454: EQUAL
28455: IFTRUE 28459
28457: GO 28477
28459: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28460: LD_ADDR_VAR 0 3
28464: PUSH
28465: LD_INT 13
28467: PUSH
28468: LD_INT 14
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: ST_TO_ADDR
28475: GO 28820
28477: LD_INT 26
28479: DOUBLE
28480: EQUAL
28481: IFTRUE 28485
28483: GO 28503
28485: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_INT 13
28493: PUSH
28494: LD_INT 14
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: ST_TO_ADDR
28501: GO 28820
28503: LD_INT 42
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28537
28511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_INT 21
28519: PUSH
28520: LD_INT 22
28522: PUSH
28523: LD_INT 23
28525: PUSH
28526: LD_INT 24
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
28535: GO 28820
28537: LD_INT 43
28539: DOUBLE
28540: EQUAL
28541: IFTRUE 28545
28543: GO 28571
28545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28546: LD_ADDR_VAR 0 3
28550: PUSH
28551: LD_INT 21
28553: PUSH
28554: LD_INT 22
28556: PUSH
28557: LD_INT 23
28559: PUSH
28560: LD_INT 24
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: ST_TO_ADDR
28569: GO 28820
28571: LD_INT 44
28573: DOUBLE
28574: EQUAL
28575: IFTRUE 28579
28577: GO 28605
28579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28580: LD_ADDR_VAR 0 3
28584: PUSH
28585: LD_INT 21
28587: PUSH
28588: LD_INT 22
28590: PUSH
28591: LD_INT 23
28593: PUSH
28594: LD_INT 24
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
28603: GO 28820
28605: LD_INT 45
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28639
28613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_INT 21
28621: PUSH
28622: LD_INT 22
28624: PUSH
28625: LD_INT 23
28627: PUSH
28628: LD_INT 24
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: ST_TO_ADDR
28637: GO 28820
28639: LD_INT 49
28641: DOUBLE
28642: EQUAL
28643: IFTRUE 28647
28645: GO 28673
28647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: LD_INT 21
28655: PUSH
28656: LD_INT 22
28658: PUSH
28659: LD_INT 23
28661: PUSH
28662: LD_INT 24
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: ST_TO_ADDR
28671: GO 28820
28673: LD_INT 51
28675: DOUBLE
28676: EQUAL
28677: IFTRUE 28681
28679: GO 28707
28681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28682: LD_ADDR_VAR 0 3
28686: PUSH
28687: LD_INT 21
28689: PUSH
28690: LD_INT 22
28692: PUSH
28693: LD_INT 23
28695: PUSH
28696: LD_INT 24
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: ST_TO_ADDR
28705: GO 28820
28707: LD_INT 52
28709: DOUBLE
28710: EQUAL
28711: IFTRUE 28715
28713: GO 28741
28715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_INT 21
28723: PUSH
28724: LD_INT 22
28726: PUSH
28727: LD_INT 23
28729: PUSH
28730: LD_INT 24
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: ST_TO_ADDR
28739: GO 28820
28741: LD_INT 53
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28767
28749: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28750: LD_ADDR_VAR 0 3
28754: PUSH
28755: LD_INT 23
28757: PUSH
28758: LD_INT 24
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: ST_TO_ADDR
28765: GO 28820
28767: LD_INT 46
28769: DOUBLE
28770: EQUAL
28771: IFTRUE 28775
28773: GO 28793
28775: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28776: LD_ADDR_VAR 0 3
28780: PUSH
28781: LD_INT 23
28783: PUSH
28784: LD_INT 24
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: ST_TO_ADDR
28791: GO 28820
28793: LD_INT 47
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28819
28801: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_INT 23
28809: PUSH
28810: LD_INT 24
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: ST_TO_ADDR
28817: GO 28820
28819: POP
// result := ( chassis in result ) ;
28820: LD_ADDR_VAR 0 3
28824: PUSH
28825: LD_VAR 0 1
28829: PUSH
28830: LD_VAR 0 3
28834: IN
28835: ST_TO_ADDR
// end ;
28836: LD_VAR 0 3
28840: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28841: LD_INT 0
28843: PPUSH
28844: PPUSH
28845: PPUSH
28846: PPUSH
28847: PPUSH
28848: PPUSH
28849: PPUSH
// result := array ;
28850: LD_ADDR_VAR 0 5
28854: PUSH
28855: LD_VAR 0 1
28859: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28860: LD_VAR 0 1
28864: NOT
28865: PUSH
28866: LD_VAR 0 2
28870: NOT
28871: OR
28872: PUSH
28873: LD_VAR 0 3
28877: NOT
28878: OR
28879: PUSH
28880: LD_VAR 0 2
28884: PUSH
28885: LD_VAR 0 1
28889: GREATER
28890: OR
28891: PUSH
28892: LD_VAR 0 3
28896: PUSH
28897: LD_VAR 0 1
28901: GREATER
28902: OR
28903: IFFALSE 28907
// exit ;
28905: GO 29203
// if direction then
28907: LD_VAR 0 4
28911: IFFALSE 28975
// begin d := 1 ;
28913: LD_ADDR_VAR 0 9
28917: PUSH
28918: LD_INT 1
28920: ST_TO_ADDR
// if i_from > i_to then
28921: LD_VAR 0 2
28925: PUSH
28926: LD_VAR 0 3
28930: GREATER
28931: IFFALSE 28957
// length := ( array - i_from ) + i_to else
28933: LD_ADDR_VAR 0 11
28937: PUSH
28938: LD_VAR 0 1
28942: PUSH
28943: LD_VAR 0 2
28947: MINUS
28948: PUSH
28949: LD_VAR 0 3
28953: PLUS
28954: ST_TO_ADDR
28955: GO 28973
// length := i_to - i_from ;
28957: LD_ADDR_VAR 0 11
28961: PUSH
28962: LD_VAR 0 3
28966: PUSH
28967: LD_VAR 0 2
28971: MINUS
28972: ST_TO_ADDR
// end else
28973: GO 29036
// begin d := - 1 ;
28975: LD_ADDR_VAR 0 9
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: ST_TO_ADDR
// if i_from > i_to then
28984: LD_VAR 0 2
28988: PUSH
28989: LD_VAR 0 3
28993: GREATER
28994: IFFALSE 29014
// length := i_from - i_to else
28996: LD_ADDR_VAR 0 11
29000: PUSH
29001: LD_VAR 0 2
29005: PUSH
29006: LD_VAR 0 3
29010: MINUS
29011: ST_TO_ADDR
29012: GO 29036
// length := ( array - i_to ) + i_from ;
29014: LD_ADDR_VAR 0 11
29018: PUSH
29019: LD_VAR 0 1
29023: PUSH
29024: LD_VAR 0 3
29028: MINUS
29029: PUSH
29030: LD_VAR 0 2
29034: PLUS
29035: ST_TO_ADDR
// end ; if not length then
29036: LD_VAR 0 11
29040: NOT
29041: IFFALSE 29045
// exit ;
29043: GO 29203
// tmp := array ;
29045: LD_ADDR_VAR 0 10
29049: PUSH
29050: LD_VAR 0 1
29054: ST_TO_ADDR
// for i = 1 to length do
29055: LD_ADDR_VAR 0 6
29059: PUSH
29060: DOUBLE
29061: LD_INT 1
29063: DEC
29064: ST_TO_ADDR
29065: LD_VAR 0 11
29069: PUSH
29070: FOR_TO
29071: IFFALSE 29191
// begin for j = 1 to array do
29073: LD_ADDR_VAR 0 7
29077: PUSH
29078: DOUBLE
29079: LD_INT 1
29081: DEC
29082: ST_TO_ADDR
29083: LD_VAR 0 1
29087: PUSH
29088: FOR_TO
29089: IFFALSE 29177
// begin k := j + d ;
29091: LD_ADDR_VAR 0 8
29095: PUSH
29096: LD_VAR 0 7
29100: PUSH
29101: LD_VAR 0 9
29105: PLUS
29106: ST_TO_ADDR
// if k > array then
29107: LD_VAR 0 8
29111: PUSH
29112: LD_VAR 0 1
29116: GREATER
29117: IFFALSE 29127
// k := 1 ;
29119: LD_ADDR_VAR 0 8
29123: PUSH
29124: LD_INT 1
29126: ST_TO_ADDR
// if not k then
29127: LD_VAR 0 8
29131: NOT
29132: IFFALSE 29144
// k := array ;
29134: LD_ADDR_VAR 0 8
29138: PUSH
29139: LD_VAR 0 1
29143: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29144: LD_ADDR_VAR 0 10
29148: PUSH
29149: LD_VAR 0 10
29153: PPUSH
29154: LD_VAR 0 8
29158: PPUSH
29159: LD_VAR 0 1
29163: PUSH
29164: LD_VAR 0 7
29168: ARRAY
29169: PPUSH
29170: CALL_OW 1
29174: ST_TO_ADDR
// end ;
29175: GO 29088
29177: POP
29178: POP
// array := tmp ;
29179: LD_ADDR_VAR 0 1
29183: PUSH
29184: LD_VAR 0 10
29188: ST_TO_ADDR
// end ;
29189: GO 29070
29191: POP
29192: POP
// result := array ;
29193: LD_ADDR_VAR 0 5
29197: PUSH
29198: LD_VAR 0 1
29202: ST_TO_ADDR
// end ;
29203: LD_VAR 0 5
29207: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29208: LD_INT 0
29210: PPUSH
29211: PPUSH
// result := 0 ;
29212: LD_ADDR_VAR 0 3
29216: PUSH
29217: LD_INT 0
29219: ST_TO_ADDR
// if not array or not value in array then
29220: LD_VAR 0 1
29224: NOT
29225: PUSH
29226: LD_VAR 0 2
29230: PUSH
29231: LD_VAR 0 1
29235: IN
29236: NOT
29237: OR
29238: IFFALSE 29242
// exit ;
29240: GO 29296
// for i = 1 to array do
29242: LD_ADDR_VAR 0 4
29246: PUSH
29247: DOUBLE
29248: LD_INT 1
29250: DEC
29251: ST_TO_ADDR
29252: LD_VAR 0 1
29256: PUSH
29257: FOR_TO
29258: IFFALSE 29294
// if value = array [ i ] then
29260: LD_VAR 0 2
29264: PUSH
29265: LD_VAR 0 1
29269: PUSH
29270: LD_VAR 0 4
29274: ARRAY
29275: EQUAL
29276: IFFALSE 29292
// begin result := i ;
29278: LD_ADDR_VAR 0 3
29282: PUSH
29283: LD_VAR 0 4
29287: ST_TO_ADDR
// exit ;
29288: POP
29289: POP
29290: GO 29296
// end ;
29292: GO 29257
29294: POP
29295: POP
// end ;
29296: LD_VAR 0 3
29300: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29301: LD_INT 0
29303: PPUSH
// vc_chassis := chassis ;
29304: LD_ADDR_OWVAR 37
29308: PUSH
29309: LD_VAR 0 1
29313: ST_TO_ADDR
// vc_engine := engine ;
29314: LD_ADDR_OWVAR 39
29318: PUSH
29319: LD_VAR 0 2
29323: ST_TO_ADDR
// vc_control := control ;
29324: LD_ADDR_OWVAR 38
29328: PUSH
29329: LD_VAR 0 3
29333: ST_TO_ADDR
// vc_weapon := weapon ;
29334: LD_ADDR_OWVAR 40
29338: PUSH
29339: LD_VAR 0 4
29343: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29344: LD_ADDR_OWVAR 41
29348: PUSH
29349: LD_VAR 0 5
29353: ST_TO_ADDR
// end ;
29354: LD_VAR 0 6
29358: RET
// export function WantPlant ( unit ) ; var task ; begin
29359: LD_INT 0
29361: PPUSH
29362: PPUSH
// result := false ;
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: LD_INT 0
29370: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29371: LD_ADDR_VAR 0 3
29375: PUSH
29376: LD_VAR 0 1
29380: PPUSH
29381: CALL_OW 437
29385: ST_TO_ADDR
// if task then
29386: LD_VAR 0 3
29390: IFFALSE 29418
// if task [ 1 ] [ 1 ] = p then
29392: LD_VAR 0 3
29396: PUSH
29397: LD_INT 1
29399: ARRAY
29400: PUSH
29401: LD_INT 1
29403: ARRAY
29404: PUSH
29405: LD_STRING p
29407: EQUAL
29408: IFFALSE 29418
// result := true ;
29410: LD_ADDR_VAR 0 2
29414: PUSH
29415: LD_INT 1
29417: ST_TO_ADDR
// end ;
29418: LD_VAR 0 2
29422: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29423: LD_INT 0
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
// if pos < 1 then
29429: LD_VAR 0 2
29433: PUSH
29434: LD_INT 1
29436: LESS
29437: IFFALSE 29441
// exit ;
29439: GO 29744
// if pos = 1 then
29441: LD_VAR 0 2
29445: PUSH
29446: LD_INT 1
29448: EQUAL
29449: IFFALSE 29482
// result := Replace ( arr , pos [ 1 ] , value ) else
29451: LD_ADDR_VAR 0 4
29455: PUSH
29456: LD_VAR 0 1
29460: PPUSH
29461: LD_VAR 0 2
29465: PUSH
29466: LD_INT 1
29468: ARRAY
29469: PPUSH
29470: LD_VAR 0 3
29474: PPUSH
29475: CALL_OW 1
29479: ST_TO_ADDR
29480: GO 29744
// begin tmp := arr ;
29482: LD_ADDR_VAR 0 6
29486: PUSH
29487: LD_VAR 0 1
29491: ST_TO_ADDR
// s_arr := [ tmp ] ;
29492: LD_ADDR_VAR 0 7
29496: PUSH
29497: LD_VAR 0 6
29501: PUSH
29502: EMPTY
29503: LIST
29504: ST_TO_ADDR
// for i = 1 to pos - 1 do
29505: LD_ADDR_VAR 0 5
29509: PUSH
29510: DOUBLE
29511: LD_INT 1
29513: DEC
29514: ST_TO_ADDR
29515: LD_VAR 0 2
29519: PUSH
29520: LD_INT 1
29522: MINUS
29523: PUSH
29524: FOR_TO
29525: IFFALSE 29570
// begin tmp := tmp [ pos [ i ] ] ;
29527: LD_ADDR_VAR 0 6
29531: PUSH
29532: LD_VAR 0 6
29536: PUSH
29537: LD_VAR 0 2
29541: PUSH
29542: LD_VAR 0 5
29546: ARRAY
29547: ARRAY
29548: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29549: LD_ADDR_VAR 0 7
29553: PUSH
29554: LD_VAR 0 7
29558: PUSH
29559: LD_VAR 0 6
29563: PUSH
29564: EMPTY
29565: LIST
29566: ADD
29567: ST_TO_ADDR
// end ;
29568: GO 29524
29570: POP
29571: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29572: LD_ADDR_VAR 0 6
29576: PUSH
29577: LD_VAR 0 6
29581: PPUSH
29582: LD_VAR 0 2
29586: PUSH
29587: LD_VAR 0 2
29591: ARRAY
29592: PPUSH
29593: LD_VAR 0 3
29597: PPUSH
29598: CALL_OW 1
29602: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29603: LD_ADDR_VAR 0 7
29607: PUSH
29608: LD_VAR 0 7
29612: PPUSH
29613: LD_VAR 0 7
29617: PPUSH
29618: LD_VAR 0 6
29622: PPUSH
29623: CALL_OW 1
29627: ST_TO_ADDR
// for i = s_arr downto 2 do
29628: LD_ADDR_VAR 0 5
29632: PUSH
29633: DOUBLE
29634: LD_VAR 0 7
29638: INC
29639: ST_TO_ADDR
29640: LD_INT 2
29642: PUSH
29643: FOR_DOWNTO
29644: IFFALSE 29728
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29646: LD_ADDR_VAR 0 6
29650: PUSH
29651: LD_VAR 0 7
29655: PUSH
29656: LD_VAR 0 5
29660: PUSH
29661: LD_INT 1
29663: MINUS
29664: ARRAY
29665: PPUSH
29666: LD_VAR 0 2
29670: PUSH
29671: LD_VAR 0 5
29675: PUSH
29676: LD_INT 1
29678: MINUS
29679: ARRAY
29680: PPUSH
29681: LD_VAR 0 7
29685: PUSH
29686: LD_VAR 0 5
29690: ARRAY
29691: PPUSH
29692: CALL_OW 1
29696: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29697: LD_ADDR_VAR 0 7
29701: PUSH
29702: LD_VAR 0 7
29706: PPUSH
29707: LD_VAR 0 5
29711: PUSH
29712: LD_INT 1
29714: MINUS
29715: PPUSH
29716: LD_VAR 0 6
29720: PPUSH
29721: CALL_OW 1
29725: ST_TO_ADDR
// end ;
29726: GO 29643
29728: POP
29729: POP
// result := s_arr [ 1 ] ;
29730: LD_ADDR_VAR 0 4
29734: PUSH
29735: LD_VAR 0 7
29739: PUSH
29740: LD_INT 1
29742: ARRAY
29743: ST_TO_ADDR
// end ; end ;
29744: LD_VAR 0 4
29748: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29749: LD_INT 0
29751: PPUSH
29752: PPUSH
// if not list then
29753: LD_VAR 0 1
29757: NOT
29758: IFFALSE 29762
// exit ;
29760: GO 29853
// i := list [ pos1 ] ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_VAR 0 1
29771: PUSH
29772: LD_VAR 0 2
29776: ARRAY
29777: ST_TO_ADDR
// if not i then
29778: LD_VAR 0 5
29782: NOT
29783: IFFALSE 29787
// exit ;
29785: GO 29853
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29787: LD_ADDR_VAR 0 1
29791: PUSH
29792: LD_VAR 0 1
29796: PPUSH
29797: LD_VAR 0 2
29801: PPUSH
29802: LD_VAR 0 1
29806: PUSH
29807: LD_VAR 0 3
29811: ARRAY
29812: PPUSH
29813: CALL_OW 1
29817: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29818: LD_ADDR_VAR 0 1
29822: PUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: LD_VAR 0 3
29832: PPUSH
29833: LD_VAR 0 5
29837: PPUSH
29838: CALL_OW 1
29842: ST_TO_ADDR
// result := list ;
29843: LD_ADDR_VAR 0 4
29847: PUSH
29848: LD_VAR 0 1
29852: ST_TO_ADDR
// end ;
29853: LD_VAR 0 4
29857: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29858: LD_INT 0
29860: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29861: LD_ADDR_VAR 0 5
29865: PUSH
29866: LD_VAR 0 1
29870: PPUSH
29871: CALL_OW 250
29875: PPUSH
29876: LD_VAR 0 1
29880: PPUSH
29881: CALL_OW 251
29885: PPUSH
29886: LD_VAR 0 2
29890: PPUSH
29891: LD_VAR 0 3
29895: PPUSH
29896: LD_VAR 0 4
29900: PPUSH
29901: CALL 29911 0 5
29905: ST_TO_ADDR
// end ;
29906: LD_VAR 0 5
29910: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29911: LD_INT 0
29913: PPUSH
29914: PPUSH
29915: PPUSH
29916: PPUSH
// if not list then
29917: LD_VAR 0 3
29921: NOT
29922: IFFALSE 29926
// exit ;
29924: GO 30314
// result := [ ] ;
29926: LD_ADDR_VAR 0 6
29930: PUSH
29931: EMPTY
29932: ST_TO_ADDR
// for i in list do
29933: LD_ADDR_VAR 0 7
29937: PUSH
29938: LD_VAR 0 3
29942: PUSH
29943: FOR_IN
29944: IFFALSE 30146
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29946: LD_ADDR_VAR 0 9
29950: PUSH
29951: LD_VAR 0 7
29955: PPUSH
29956: LD_VAR 0 1
29960: PPUSH
29961: LD_VAR 0 2
29965: PPUSH
29966: CALL_OW 297
29970: ST_TO_ADDR
// if not result then
29971: LD_VAR 0 6
29975: NOT
29976: IFFALSE 30002
// result := [ [ i , tmp ] ] else
29978: LD_ADDR_VAR 0 6
29982: PUSH
29983: LD_VAR 0 7
29987: PUSH
29988: LD_VAR 0 9
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: ST_TO_ADDR
30000: GO 30144
// begin if result [ result ] [ 2 ] < tmp then
30002: LD_VAR 0 6
30006: PUSH
30007: LD_VAR 0 6
30011: ARRAY
30012: PUSH
30013: LD_INT 2
30015: ARRAY
30016: PUSH
30017: LD_VAR 0 9
30021: LESS
30022: IFFALSE 30064
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30024: LD_ADDR_VAR 0 6
30028: PUSH
30029: LD_VAR 0 6
30033: PPUSH
30034: LD_VAR 0 6
30038: PUSH
30039: LD_INT 1
30041: PLUS
30042: PPUSH
30043: LD_VAR 0 7
30047: PUSH
30048: LD_VAR 0 9
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PPUSH
30057: CALL_OW 2
30061: ST_TO_ADDR
30062: GO 30144
// for j = 1 to result do
30064: LD_ADDR_VAR 0 8
30068: PUSH
30069: DOUBLE
30070: LD_INT 1
30072: DEC
30073: ST_TO_ADDR
30074: LD_VAR 0 6
30078: PUSH
30079: FOR_TO
30080: IFFALSE 30142
// begin if tmp < result [ j ] [ 2 ] then
30082: LD_VAR 0 9
30086: PUSH
30087: LD_VAR 0 6
30091: PUSH
30092: LD_VAR 0 8
30096: ARRAY
30097: PUSH
30098: LD_INT 2
30100: ARRAY
30101: LESS
30102: IFFALSE 30140
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30104: LD_ADDR_VAR 0 6
30108: PUSH
30109: LD_VAR 0 6
30113: PPUSH
30114: LD_VAR 0 8
30118: PPUSH
30119: LD_VAR 0 7
30123: PUSH
30124: LD_VAR 0 9
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PPUSH
30133: CALL_OW 2
30137: ST_TO_ADDR
// break ;
30138: GO 30142
// end ; end ;
30140: GO 30079
30142: POP
30143: POP
// end ; end ;
30144: GO 29943
30146: POP
30147: POP
// if result and not asc then
30148: LD_VAR 0 6
30152: PUSH
30153: LD_VAR 0 4
30157: NOT
30158: AND
30159: IFFALSE 30234
// begin tmp := result ;
30161: LD_ADDR_VAR 0 9
30165: PUSH
30166: LD_VAR 0 6
30170: ST_TO_ADDR
// for i = tmp downto 1 do
30171: LD_ADDR_VAR 0 7
30175: PUSH
30176: DOUBLE
30177: LD_VAR 0 9
30181: INC
30182: ST_TO_ADDR
30183: LD_INT 1
30185: PUSH
30186: FOR_DOWNTO
30187: IFFALSE 30232
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30189: LD_ADDR_VAR 0 6
30193: PUSH
30194: LD_VAR 0 6
30198: PPUSH
30199: LD_VAR 0 9
30203: PUSH
30204: LD_VAR 0 7
30208: MINUS
30209: PUSH
30210: LD_INT 1
30212: PLUS
30213: PPUSH
30214: LD_VAR 0 9
30218: PUSH
30219: LD_VAR 0 7
30223: ARRAY
30224: PPUSH
30225: CALL_OW 1
30229: ST_TO_ADDR
30230: GO 30186
30232: POP
30233: POP
// end ; tmp := [ ] ;
30234: LD_ADDR_VAR 0 9
30238: PUSH
30239: EMPTY
30240: ST_TO_ADDR
// if mode then
30241: LD_VAR 0 5
30245: IFFALSE 30314
// begin for i = 1 to result do
30247: LD_ADDR_VAR 0 7
30251: PUSH
30252: DOUBLE
30253: LD_INT 1
30255: DEC
30256: ST_TO_ADDR
30257: LD_VAR 0 6
30261: PUSH
30262: FOR_TO
30263: IFFALSE 30302
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30265: LD_ADDR_VAR 0 9
30269: PUSH
30270: LD_VAR 0 9
30274: PPUSH
30275: LD_VAR 0 7
30279: PPUSH
30280: LD_VAR 0 6
30284: PUSH
30285: LD_VAR 0 7
30289: ARRAY
30290: PUSH
30291: LD_INT 1
30293: ARRAY
30294: PPUSH
30295: CALL_OW 1
30299: ST_TO_ADDR
30300: GO 30262
30302: POP
30303: POP
// result := tmp ;
30304: LD_ADDR_VAR 0 6
30308: PUSH
30309: LD_VAR 0 9
30313: ST_TO_ADDR
// end ; end ;
30314: LD_VAR 0 6
30318: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30319: LD_INT 0
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30327: LD_ADDR_VAR 0 5
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// if not x or not y then
30349: LD_VAR 0 2
30353: NOT
30354: PUSH
30355: LD_VAR 0 3
30359: NOT
30360: OR
30361: IFFALSE 30365
// exit ;
30363: GO 32017
// if not range then
30365: LD_VAR 0 4
30369: NOT
30370: IFFALSE 30380
// range := 10 ;
30372: LD_ADDR_VAR 0 4
30376: PUSH
30377: LD_INT 10
30379: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30380: LD_ADDR_VAR 0 8
30384: PUSH
30385: LD_INT 81
30387: PUSH
30388: LD_VAR 0 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 92
30399: PUSH
30400: LD_VAR 0 2
30404: PUSH
30405: LD_VAR 0 3
30409: PUSH
30410: LD_VAR 0 4
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 21
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: ST_TO_ADDR
// if not tmp then
30448: LD_VAR 0 8
30452: NOT
30453: IFFALSE 30457
// exit ;
30455: GO 32017
// for i in tmp do
30457: LD_ADDR_VAR 0 6
30461: PUSH
30462: LD_VAR 0 8
30466: PUSH
30467: FOR_IN
30468: IFFALSE 31992
// begin points := [ 0 , 0 , 0 ] ;
30470: LD_ADDR_VAR 0 9
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: LD_INT 0
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: ST_TO_ADDR
// bpoints := 1 ;
30489: LD_ADDR_VAR 0 10
30493: PUSH
30494: LD_INT 1
30496: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30497: LD_VAR 0 6
30501: PPUSH
30502: CALL_OW 247
30506: PUSH
30507: LD_INT 1
30509: DOUBLE
30510: EQUAL
30511: IFTRUE 30515
30513: GO 31093
30515: POP
// begin if GetClass ( i ) = 1 then
30516: LD_VAR 0 6
30520: PPUSH
30521: CALL_OW 257
30525: PUSH
30526: LD_INT 1
30528: EQUAL
30529: IFFALSE 30550
// points := [ 10 , 5 , 3 ] ;
30531: LD_ADDR_VAR 0 9
30535: PUSH
30536: LD_INT 10
30538: PUSH
30539: LD_INT 5
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30550: LD_VAR 0 6
30554: PPUSH
30555: CALL_OW 257
30559: PUSH
30560: LD_INT 2
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: LD_INT 4
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: IN
30574: IFFALSE 30595
// points := [ 3 , 2 , 1 ] ;
30576: LD_ADDR_VAR 0 9
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: LD_INT 2
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: LIST
30594: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30595: LD_VAR 0 6
30599: PPUSH
30600: CALL_OW 257
30604: PUSH
30605: LD_INT 5
30607: EQUAL
30608: IFFALSE 30629
// points := [ 130 , 5 , 2 ] ;
30610: LD_ADDR_VAR 0 9
30614: PUSH
30615: LD_INT 130
30617: PUSH
30618: LD_INT 5
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30629: LD_VAR 0 6
30633: PPUSH
30634: CALL_OW 257
30638: PUSH
30639: LD_INT 8
30641: EQUAL
30642: IFFALSE 30663
// points := [ 35 , 35 , 30 ] ;
30644: LD_ADDR_VAR 0 9
30648: PUSH
30649: LD_INT 35
30651: PUSH
30652: LD_INT 35
30654: PUSH
30655: LD_INT 30
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30663: LD_VAR 0 6
30667: PPUSH
30668: CALL_OW 257
30672: PUSH
30673: LD_INT 9
30675: EQUAL
30676: IFFALSE 30697
// points := [ 20 , 55 , 40 ] ;
30678: LD_ADDR_VAR 0 9
30682: PUSH
30683: LD_INT 20
30685: PUSH
30686: LD_INT 55
30688: PUSH
30689: LD_INT 40
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: LIST
30696: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30697: LD_VAR 0 6
30701: PPUSH
30702: CALL_OW 257
30706: PUSH
30707: LD_INT 12
30709: PUSH
30710: LD_INT 16
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: IN
30717: IFFALSE 30738
// points := [ 5 , 3 , 2 ] ;
30719: LD_ADDR_VAR 0 9
30723: PUSH
30724: LD_INT 5
30726: PUSH
30727: LD_INT 3
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30738: LD_VAR 0 6
30742: PPUSH
30743: CALL_OW 257
30747: PUSH
30748: LD_INT 17
30750: EQUAL
30751: IFFALSE 30772
// points := [ 100 , 50 , 75 ] ;
30753: LD_ADDR_VAR 0 9
30757: PUSH
30758: LD_INT 100
30760: PUSH
30761: LD_INT 50
30763: PUSH
30764: LD_INT 75
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30772: LD_VAR 0 6
30776: PPUSH
30777: CALL_OW 257
30781: PUSH
30782: LD_INT 15
30784: EQUAL
30785: IFFALSE 30806
// points := [ 10 , 5 , 3 ] ;
30787: LD_ADDR_VAR 0 9
30791: PUSH
30792: LD_INT 10
30794: PUSH
30795: LD_INT 5
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: LIST
30805: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30806: LD_VAR 0 6
30810: PPUSH
30811: CALL_OW 257
30815: PUSH
30816: LD_INT 14
30818: EQUAL
30819: IFFALSE 30840
// points := [ 10 , 0 , 0 ] ;
30821: LD_ADDR_VAR 0 9
30825: PUSH
30826: LD_INT 10
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30840: LD_VAR 0 6
30844: PPUSH
30845: CALL_OW 257
30849: PUSH
30850: LD_INT 11
30852: EQUAL
30853: IFFALSE 30874
// points := [ 30 , 10 , 5 ] ;
30855: LD_ADDR_VAR 0 9
30859: PUSH
30860: LD_INT 30
30862: PUSH
30863: LD_INT 10
30865: PUSH
30866: LD_INT 5
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: LIST
30873: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30874: LD_VAR 0 1
30878: PPUSH
30879: LD_INT 5
30881: PPUSH
30882: CALL_OW 321
30886: PUSH
30887: LD_INT 2
30889: EQUAL
30890: IFFALSE 30907
// bpoints := bpoints * 1.8 ;
30892: LD_ADDR_VAR 0 10
30896: PUSH
30897: LD_VAR 0 10
30901: PUSH
30902: LD_REAL  1.80000000000000E+0000
30905: MUL
30906: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30907: LD_VAR 0 6
30911: PPUSH
30912: CALL_OW 257
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: LD_INT 3
30925: PUSH
30926: LD_INT 4
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: IN
30935: PUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: LD_INT 51
30943: PPUSH
30944: CALL_OW 321
30948: PUSH
30949: LD_INT 2
30951: EQUAL
30952: AND
30953: IFFALSE 30970
// bpoints := bpoints * 1.2 ;
30955: LD_ADDR_VAR 0 10
30959: PUSH
30960: LD_VAR 0 10
30964: PUSH
30965: LD_REAL  1.20000000000000E+0000
30968: MUL
30969: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30970: LD_VAR 0 6
30974: PPUSH
30975: CALL_OW 257
30979: PUSH
30980: LD_INT 5
30982: PUSH
30983: LD_INT 7
30985: PUSH
30986: LD_INT 9
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: IN
30994: PUSH
30995: LD_VAR 0 1
30999: PPUSH
31000: LD_INT 52
31002: PPUSH
31003: CALL_OW 321
31007: PUSH
31008: LD_INT 2
31010: EQUAL
31011: AND
31012: IFFALSE 31029
// bpoints := bpoints * 1.5 ;
31014: LD_ADDR_VAR 0 10
31018: PUSH
31019: LD_VAR 0 10
31023: PUSH
31024: LD_REAL  1.50000000000000E+0000
31027: MUL
31028: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31029: LD_VAR 0 1
31033: PPUSH
31034: LD_INT 66
31036: PPUSH
31037: CALL_OW 321
31041: PUSH
31042: LD_INT 2
31044: EQUAL
31045: IFFALSE 31062
// bpoints := bpoints * 1.1 ;
31047: LD_ADDR_VAR 0 10
31051: PUSH
31052: LD_VAR 0 10
31056: PUSH
31057: LD_REAL  1.10000000000000E+0000
31060: MUL
31061: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31062: LD_ADDR_VAR 0 10
31066: PUSH
31067: LD_VAR 0 10
31071: PUSH
31072: LD_VAR 0 6
31076: PPUSH
31077: LD_INT 1
31079: PPUSH
31080: CALL_OW 259
31084: PUSH
31085: LD_REAL  1.15000000000000E+0000
31088: MUL
31089: MUL
31090: ST_TO_ADDR
// end ; unit_vehicle :
31091: GO 31921
31093: LD_INT 2
31095: DOUBLE
31096: EQUAL
31097: IFTRUE 31101
31099: GO 31909
31101: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31102: LD_VAR 0 6
31106: PPUSH
31107: CALL_OW 264
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: LD_INT 42
31117: PUSH
31118: LD_INT 24
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: IN
31126: IFFALSE 31147
// points := [ 25 , 5 , 3 ] ;
31128: LD_ADDR_VAR 0 9
31132: PUSH
31133: LD_INT 25
31135: PUSH
31136: LD_INT 5
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31147: LD_VAR 0 6
31151: PPUSH
31152: CALL_OW 264
31156: PUSH
31157: LD_INT 4
31159: PUSH
31160: LD_INT 43
31162: PUSH
31163: LD_INT 25
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: IN
31171: IFFALSE 31192
// points := [ 40 , 15 , 5 ] ;
31173: LD_ADDR_VAR 0 9
31177: PUSH
31178: LD_INT 40
31180: PUSH
31181: LD_INT 15
31183: PUSH
31184: LD_INT 5
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31192: LD_VAR 0 6
31196: PPUSH
31197: CALL_OW 264
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: LD_INT 23
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: IN
31212: IFFALSE 31233
// points := [ 7 , 25 , 8 ] ;
31214: LD_ADDR_VAR 0 9
31218: PUSH
31219: LD_INT 7
31221: PUSH
31222: LD_INT 25
31224: PUSH
31225: LD_INT 8
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31233: LD_VAR 0 6
31237: PPUSH
31238: CALL_OW 264
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: LD_INT 27
31248: PUSH
31249: LD_INT 44
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: LIST
31256: IN
31257: IFFALSE 31278
// points := [ 14 , 50 , 16 ] ;
31259: LD_ADDR_VAR 0 9
31263: PUSH
31264: LD_INT 14
31266: PUSH
31267: LD_INT 50
31269: PUSH
31270: LD_INT 16
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31278: LD_VAR 0 6
31282: PPUSH
31283: CALL_OW 264
31287: PUSH
31288: LD_INT 6
31290: PUSH
31291: LD_INT 46
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: IN
31298: IFFALSE 31319
// points := [ 32 , 120 , 70 ] ;
31300: LD_ADDR_VAR 0 9
31304: PUSH
31305: LD_INT 32
31307: PUSH
31308: LD_INT 120
31310: PUSH
31311: LD_INT 70
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: LIST
31318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31319: LD_VAR 0 6
31323: PPUSH
31324: CALL_OW 264
31328: PUSH
31329: LD_INT 7
31331: PUSH
31332: LD_INT 28
31334: PUSH
31335: LD_INT 45
31337: PUSH
31338: LD_EXP 102
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: IN
31349: IFFALSE 31370
// points := [ 35 , 20 , 45 ] ;
31351: LD_ADDR_VAR 0 9
31355: PUSH
31356: LD_INT 35
31358: PUSH
31359: LD_INT 20
31361: PUSH
31362: LD_INT 45
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31370: LD_VAR 0 6
31374: PPUSH
31375: CALL_OW 264
31379: PUSH
31380: LD_INT 47
31382: PUSH
31383: EMPTY
31384: LIST
31385: IN
31386: IFFALSE 31407
// points := [ 67 , 45 , 75 ] ;
31388: LD_ADDR_VAR 0 9
31392: PUSH
31393: LD_INT 67
31395: PUSH
31396: LD_INT 45
31398: PUSH
31399: LD_INT 75
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31407: LD_VAR 0 6
31411: PPUSH
31412: CALL_OW 264
31416: PUSH
31417: LD_INT 26
31419: PUSH
31420: EMPTY
31421: LIST
31422: IN
31423: IFFALSE 31444
// points := [ 120 , 30 , 80 ] ;
31425: LD_ADDR_VAR 0 9
31429: PUSH
31430: LD_INT 120
31432: PUSH
31433: LD_INT 30
31435: PUSH
31436: LD_INT 80
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31444: LD_VAR 0 6
31448: PPUSH
31449: CALL_OW 264
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: EMPTY
31458: LIST
31459: IN
31460: IFFALSE 31481
// points := [ 40 , 1 , 1 ] ;
31462: LD_ADDR_VAR 0 9
31466: PUSH
31467: LD_INT 40
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31481: LD_VAR 0 6
31485: PPUSH
31486: CALL_OW 264
31490: PUSH
31491: LD_INT 29
31493: PUSH
31494: EMPTY
31495: LIST
31496: IN
31497: IFFALSE 31518
// points := [ 70 , 200 , 400 ] ;
31499: LD_ADDR_VAR 0 9
31503: PUSH
31504: LD_INT 70
31506: PUSH
31507: LD_INT 200
31509: PUSH
31510: LD_INT 400
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31518: LD_VAR 0 6
31522: PPUSH
31523: CALL_OW 264
31527: PUSH
31528: LD_INT 14
31530: PUSH
31531: LD_INT 53
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: IN
31538: IFFALSE 31559
// points := [ 40 , 10 , 20 ] ;
31540: LD_ADDR_VAR 0 9
31544: PUSH
31545: LD_INT 40
31547: PUSH
31548: LD_INT 10
31550: PUSH
31551: LD_INT 20
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31559: LD_VAR 0 6
31563: PPUSH
31564: CALL_OW 264
31568: PUSH
31569: LD_INT 9
31571: PUSH
31572: EMPTY
31573: LIST
31574: IN
31575: IFFALSE 31596
// points := [ 5 , 70 , 20 ] ;
31577: LD_ADDR_VAR 0 9
31581: PUSH
31582: LD_INT 5
31584: PUSH
31585: LD_INT 70
31587: PUSH
31588: LD_INT 20
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: LIST
31595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31596: LD_VAR 0 6
31600: PPUSH
31601: CALL_OW 264
31605: PUSH
31606: LD_INT 10
31608: PUSH
31609: EMPTY
31610: LIST
31611: IN
31612: IFFALSE 31633
// points := [ 35 , 110 , 70 ] ;
31614: LD_ADDR_VAR 0 9
31618: PUSH
31619: LD_INT 35
31621: PUSH
31622: LD_INT 110
31624: PUSH
31625: LD_INT 70
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: LIST
31632: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31633: LD_VAR 0 6
31637: PPUSH
31638: CALL_OW 265
31642: PUSH
31643: LD_INT 25
31645: EQUAL
31646: IFFALSE 31667
// points := [ 80 , 65 , 100 ] ;
31648: LD_ADDR_VAR 0 9
31652: PUSH
31653: LD_INT 80
31655: PUSH
31656: LD_INT 65
31658: PUSH
31659: LD_INT 100
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 263
31676: PUSH
31677: LD_INT 1
31679: EQUAL
31680: IFFALSE 31715
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31682: LD_ADDR_VAR 0 10
31686: PUSH
31687: LD_VAR 0 10
31691: PUSH
31692: LD_VAR 0 6
31696: PPUSH
31697: CALL_OW 311
31701: PPUSH
31702: LD_INT 3
31704: PPUSH
31705: CALL_OW 259
31709: PUSH
31710: LD_INT 4
31712: MUL
31713: MUL
31714: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31715: LD_VAR 0 6
31719: PPUSH
31720: CALL_OW 263
31724: PUSH
31725: LD_INT 2
31727: EQUAL
31728: IFFALSE 31779
// begin j := IsControledBy ( i ) ;
31730: LD_ADDR_VAR 0 7
31734: PUSH
31735: LD_VAR 0 6
31739: PPUSH
31740: CALL_OW 312
31744: ST_TO_ADDR
// if j then
31745: LD_VAR 0 7
31749: IFFALSE 31779
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31751: LD_ADDR_VAR 0 10
31755: PUSH
31756: LD_VAR 0 10
31760: PUSH
31761: LD_VAR 0 7
31765: PPUSH
31766: LD_INT 3
31768: PPUSH
31769: CALL_OW 259
31773: PUSH
31774: LD_INT 3
31776: MUL
31777: MUL
31778: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31779: LD_VAR 0 6
31783: PPUSH
31784: CALL_OW 264
31788: PUSH
31789: LD_INT 5
31791: PUSH
31792: LD_INT 6
31794: PUSH
31795: LD_INT 46
31797: PUSH
31798: LD_INT 44
31800: PUSH
31801: LD_INT 47
31803: PUSH
31804: LD_INT 45
31806: PUSH
31807: LD_INT 28
31809: PUSH
31810: LD_INT 7
31812: PUSH
31813: LD_INT 27
31815: PUSH
31816: LD_INT 29
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: IN
31831: PUSH
31832: LD_VAR 0 1
31836: PPUSH
31837: LD_INT 52
31839: PPUSH
31840: CALL_OW 321
31844: PUSH
31845: LD_INT 2
31847: EQUAL
31848: AND
31849: IFFALSE 31866
// bpoints := bpoints * 1.2 ;
31851: LD_ADDR_VAR 0 10
31855: PUSH
31856: LD_VAR 0 10
31860: PUSH
31861: LD_REAL  1.20000000000000E+0000
31864: MUL
31865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31866: LD_VAR 0 6
31870: PPUSH
31871: CALL_OW 264
31875: PUSH
31876: LD_INT 6
31878: PUSH
31879: LD_INT 46
31881: PUSH
31882: LD_INT 47
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: IN
31890: IFFALSE 31907
// bpoints := bpoints * 1.2 ;
31892: LD_ADDR_VAR 0 10
31896: PUSH
31897: LD_VAR 0 10
31901: PUSH
31902: LD_REAL  1.20000000000000E+0000
31905: MUL
31906: ST_TO_ADDR
// end ; unit_building :
31907: GO 31921
31909: LD_INT 3
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 31920
31917: POP
// ; end ;
31918: GO 31921
31920: POP
// for j = 1 to 3 do
31921: LD_ADDR_VAR 0 7
31925: PUSH
31926: DOUBLE
31927: LD_INT 1
31929: DEC
31930: ST_TO_ADDR
31931: LD_INT 3
31933: PUSH
31934: FOR_TO
31935: IFFALSE 31988
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31937: LD_ADDR_VAR 0 5
31941: PUSH
31942: LD_VAR 0 5
31946: PPUSH
31947: LD_VAR 0 7
31951: PPUSH
31952: LD_VAR 0 5
31956: PUSH
31957: LD_VAR 0 7
31961: ARRAY
31962: PUSH
31963: LD_VAR 0 9
31967: PUSH
31968: LD_VAR 0 7
31972: ARRAY
31973: PUSH
31974: LD_VAR 0 10
31978: MUL
31979: PLUS
31980: PPUSH
31981: CALL_OW 1
31985: ST_TO_ADDR
31986: GO 31934
31988: POP
31989: POP
// end ;
31990: GO 30467
31992: POP
31993: POP
// result := Replace ( result , 4 , tmp ) ;
31994: LD_ADDR_VAR 0 5
31998: PUSH
31999: LD_VAR 0 5
32003: PPUSH
32004: LD_INT 4
32006: PPUSH
32007: LD_VAR 0 8
32011: PPUSH
32012: CALL_OW 1
32016: ST_TO_ADDR
// end ;
32017: LD_VAR 0 5
32021: RET
// export function DangerAtRange ( unit , range ) ; begin
32022: LD_INT 0
32024: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_VAR 0 1
32034: PPUSH
32035: CALL_OW 255
32039: PPUSH
32040: LD_VAR 0 1
32044: PPUSH
32045: CALL_OW 250
32049: PPUSH
32050: LD_VAR 0 1
32054: PPUSH
32055: CALL_OW 251
32059: PPUSH
32060: LD_VAR 0 2
32064: PPUSH
32065: CALL 30319 0 4
32069: ST_TO_ADDR
// end ;
32070: LD_VAR 0 3
32074: RET
// export function DangerInArea ( side , area ) ; begin
32075: LD_INT 0
32077: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_VAR 0 2
32087: PPUSH
32088: LD_INT 81
32090: PUSH
32091: LD_VAR 0 1
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PPUSH
32100: CALL_OW 70
32104: ST_TO_ADDR
// end ;
32105: LD_VAR 0 3
32109: RET
// export function IsExtension ( b ) ; begin
32110: LD_INT 0
32112: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32113: LD_ADDR_VAR 0 2
32117: PUSH
32118: LD_VAR 0 1
32122: PUSH
32123: LD_INT 23
32125: PUSH
32126: LD_INT 20
32128: PUSH
32129: LD_INT 22
32131: PUSH
32132: LD_INT 17
32134: PUSH
32135: LD_INT 24
32137: PUSH
32138: LD_INT 21
32140: PUSH
32141: LD_INT 19
32143: PUSH
32144: LD_INT 16
32146: PUSH
32147: LD_INT 25
32149: PUSH
32150: LD_INT 18
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: IN
32165: ST_TO_ADDR
// end ;
32166: LD_VAR 0 2
32170: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32171: LD_INT 0
32173: PPUSH
32174: PPUSH
32175: PPUSH
// result := [ ] ;
32176: LD_ADDR_VAR 0 4
32180: PUSH
32181: EMPTY
32182: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32183: LD_ADDR_VAR 0 5
32187: PUSH
32188: LD_VAR 0 2
32192: PPUSH
32193: LD_INT 21
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL_OW 70
32207: ST_TO_ADDR
// if not tmp then
32208: LD_VAR 0 5
32212: NOT
32213: IFFALSE 32217
// exit ;
32215: GO 32281
// if checkLink then
32217: LD_VAR 0 3
32221: IFFALSE 32271
// begin for i in tmp do
32223: LD_ADDR_VAR 0 6
32227: PUSH
32228: LD_VAR 0 5
32232: PUSH
32233: FOR_IN
32234: IFFALSE 32269
// if GetBase ( i ) <> base then
32236: LD_VAR 0 6
32240: PPUSH
32241: CALL_OW 274
32245: PUSH
32246: LD_VAR 0 1
32250: NONEQUAL
32251: IFFALSE 32267
// ComLinkToBase ( base , i ) ;
32253: LD_VAR 0 1
32257: PPUSH
32258: LD_VAR 0 6
32262: PPUSH
32263: CALL_OW 169
32267: GO 32233
32269: POP
32270: POP
// end ; result := tmp ;
32271: LD_ADDR_VAR 0 4
32275: PUSH
32276: LD_VAR 0 5
32280: ST_TO_ADDR
// end ;
32281: LD_VAR 0 4
32285: RET
// export function ComComplete ( units , b ) ; var i ; begin
32286: LD_INT 0
32288: PPUSH
32289: PPUSH
// if not units then
32290: LD_VAR 0 1
32294: NOT
32295: IFFALSE 32299
// exit ;
32297: GO 32389
// for i in units do
32299: LD_ADDR_VAR 0 4
32303: PUSH
32304: LD_VAR 0 1
32308: PUSH
32309: FOR_IN
32310: IFFALSE 32387
// if BuildingStatus ( b ) = bs_build then
32312: LD_VAR 0 2
32316: PPUSH
32317: CALL_OW 461
32321: PUSH
32322: LD_INT 1
32324: EQUAL
32325: IFFALSE 32385
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32327: LD_VAR 0 4
32331: PPUSH
32332: LD_STRING h
32334: PUSH
32335: LD_VAR 0 2
32339: PPUSH
32340: CALL_OW 250
32344: PUSH
32345: LD_VAR 0 2
32349: PPUSH
32350: CALL_OW 251
32354: PUSH
32355: LD_VAR 0 2
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: PUSH
32378: EMPTY
32379: LIST
32380: PPUSH
32381: CALL_OW 446
32385: GO 32309
32387: POP
32388: POP
// end ;
32389: LD_VAR 0 3
32393: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32394: LD_INT 0
32396: PPUSH
32397: PPUSH
32398: PPUSH
32399: PPUSH
32400: PPUSH
32401: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32402: LD_VAR 0 1
32406: NOT
32407: PUSH
32408: LD_VAR 0 1
32412: PPUSH
32413: CALL_OW 263
32417: PUSH
32418: LD_INT 2
32420: NONEQUAL
32421: OR
32422: IFFALSE 32426
// exit ;
32424: GO 32742
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32426: LD_ADDR_VAR 0 6
32430: PUSH
32431: LD_INT 22
32433: PUSH
32434: LD_VAR 0 1
32438: PPUSH
32439: CALL_OW 255
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 30
32453: PUSH
32454: LD_INT 36
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 34
32463: PUSH
32464: LD_INT 31
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PPUSH
32480: CALL_OW 69
32484: ST_TO_ADDR
// if not tmp then
32485: LD_VAR 0 6
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 32742
// result := [ ] ;
32494: LD_ADDR_VAR 0 2
32498: PUSH
32499: EMPTY
32500: ST_TO_ADDR
// for i in tmp do
32501: LD_ADDR_VAR 0 3
32505: PUSH
32506: LD_VAR 0 6
32510: PUSH
32511: FOR_IN
32512: IFFALSE 32583
// begin t := UnitsInside ( i ) ;
32514: LD_ADDR_VAR 0 4
32518: PUSH
32519: LD_VAR 0 3
32523: PPUSH
32524: CALL_OW 313
32528: ST_TO_ADDR
// if t then
32529: LD_VAR 0 4
32533: IFFALSE 32581
// for j in t do
32535: LD_ADDR_VAR 0 7
32539: PUSH
32540: LD_VAR 0 4
32544: PUSH
32545: FOR_IN
32546: IFFALSE 32579
// result := Replace ( result , result + 1 , j ) ;
32548: LD_ADDR_VAR 0 2
32552: PUSH
32553: LD_VAR 0 2
32557: PPUSH
32558: LD_VAR 0 2
32562: PUSH
32563: LD_INT 1
32565: PLUS
32566: PPUSH
32567: LD_VAR 0 7
32571: PPUSH
32572: CALL_OW 1
32576: ST_TO_ADDR
32577: GO 32545
32579: POP
32580: POP
// end ;
32581: GO 32511
32583: POP
32584: POP
// if not result then
32585: LD_VAR 0 2
32589: NOT
32590: IFFALSE 32594
// exit ;
32592: GO 32742
// mech := result [ 1 ] ;
32594: LD_ADDR_VAR 0 5
32598: PUSH
32599: LD_VAR 0 2
32603: PUSH
32604: LD_INT 1
32606: ARRAY
32607: ST_TO_ADDR
// if result > 1 then
32608: LD_VAR 0 2
32612: PUSH
32613: LD_INT 1
32615: GREATER
32616: IFFALSE 32728
// begin for i = 2 to result do
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: DOUBLE
32624: LD_INT 2
32626: DEC
32627: ST_TO_ADDR
32628: LD_VAR 0 2
32632: PUSH
32633: FOR_TO
32634: IFFALSE 32726
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32636: LD_ADDR_VAR 0 4
32640: PUSH
32641: LD_VAR 0 2
32645: PUSH
32646: LD_VAR 0 3
32650: ARRAY
32651: PPUSH
32652: LD_INT 3
32654: PPUSH
32655: CALL_OW 259
32659: PUSH
32660: LD_VAR 0 2
32664: PUSH
32665: LD_VAR 0 3
32669: ARRAY
32670: PPUSH
32671: CALL_OW 432
32675: MINUS
32676: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32677: LD_VAR 0 4
32681: PUSH
32682: LD_VAR 0 5
32686: PPUSH
32687: LD_INT 3
32689: PPUSH
32690: CALL_OW 259
32694: PUSH
32695: LD_VAR 0 5
32699: PPUSH
32700: CALL_OW 432
32704: MINUS
32705: GREATEREQUAL
32706: IFFALSE 32724
// mech := result [ i ] ;
32708: LD_ADDR_VAR 0 5
32712: PUSH
32713: LD_VAR 0 2
32717: PUSH
32718: LD_VAR 0 3
32722: ARRAY
32723: ST_TO_ADDR
// end ;
32724: GO 32633
32726: POP
32727: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32728: LD_VAR 0 1
32732: PPUSH
32733: LD_VAR 0 5
32737: PPUSH
32738: CALL_OW 135
// end ;
32742: LD_VAR 0 2
32746: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32747: LD_INT 0
32749: PPUSH
32750: PPUSH
32751: PPUSH
32752: PPUSH
32753: PPUSH
32754: PPUSH
32755: PPUSH
32756: PPUSH
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
32761: PPUSH
// result := [ ] ;
32762: LD_ADDR_VAR 0 7
32766: PUSH
32767: EMPTY
32768: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32769: LD_VAR 0 1
32773: PPUSH
32774: CALL_OW 266
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: IN
32789: NOT
32790: IFFALSE 32794
// exit ;
32792: GO 34428
// if name then
32794: LD_VAR 0 3
32798: IFFALSE 32814
// SetBName ( base_dep , name ) ;
32800: LD_VAR 0 1
32804: PPUSH
32805: LD_VAR 0 3
32809: PPUSH
32810: CALL_OW 500
// base := GetBase ( base_dep ) ;
32814: LD_ADDR_VAR 0 15
32818: PUSH
32819: LD_VAR 0 1
32823: PPUSH
32824: CALL_OW 274
32828: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32829: LD_ADDR_VAR 0 16
32833: PUSH
32834: LD_VAR 0 1
32838: PPUSH
32839: CALL_OW 255
32843: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32844: LD_ADDR_VAR 0 17
32848: PUSH
32849: LD_VAR 0 1
32853: PPUSH
32854: CALL_OW 248
32858: ST_TO_ADDR
// if sources then
32859: LD_VAR 0 5
32863: IFFALSE 32910
// for i = 1 to 3 do
32865: LD_ADDR_VAR 0 8
32869: PUSH
32870: DOUBLE
32871: LD_INT 1
32873: DEC
32874: ST_TO_ADDR
32875: LD_INT 3
32877: PUSH
32878: FOR_TO
32879: IFFALSE 32908
// AddResourceType ( base , i , sources [ i ] ) ;
32881: LD_VAR 0 15
32885: PPUSH
32886: LD_VAR 0 8
32890: PPUSH
32891: LD_VAR 0 5
32895: PUSH
32896: LD_VAR 0 8
32900: ARRAY
32901: PPUSH
32902: CALL_OW 276
32906: GO 32878
32908: POP
32909: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32910: LD_ADDR_VAR 0 18
32914: PUSH
32915: LD_VAR 0 15
32919: PPUSH
32920: LD_VAR 0 2
32924: PPUSH
32925: LD_INT 1
32927: PPUSH
32928: CALL 32171 0 3
32932: ST_TO_ADDR
// InitHc ;
32933: CALL_OW 19
// InitUc ;
32937: CALL_OW 18
// uc_side := side ;
32941: LD_ADDR_OWVAR 20
32945: PUSH
32946: LD_VAR 0 16
32950: ST_TO_ADDR
// uc_nation := nation ;
32951: LD_ADDR_OWVAR 21
32955: PUSH
32956: LD_VAR 0 17
32960: ST_TO_ADDR
// if buildings then
32961: LD_VAR 0 18
32965: IFFALSE 34287
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32967: LD_ADDR_VAR 0 19
32971: PUSH
32972: LD_VAR 0 18
32976: PPUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 30
32982: PUSH
32983: LD_INT 29
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 30
32992: PUSH
32993: LD_INT 30
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: LIST
33004: PPUSH
33005: CALL_OW 72
33009: ST_TO_ADDR
// if tmp then
33010: LD_VAR 0 19
33014: IFFALSE 33062
// for i in tmp do
33016: LD_ADDR_VAR 0 8
33020: PUSH
33021: LD_VAR 0 19
33025: PUSH
33026: FOR_IN
33027: IFFALSE 33060
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33029: LD_VAR 0 8
33033: PPUSH
33034: CALL_OW 250
33038: PPUSH
33039: LD_VAR 0 8
33043: PPUSH
33044: CALL_OW 251
33048: PPUSH
33049: LD_VAR 0 16
33053: PPUSH
33054: CALL_OW 441
33058: GO 33026
33060: POP
33061: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33062: LD_VAR 0 18
33066: PPUSH
33067: LD_INT 2
33069: PUSH
33070: LD_INT 30
33072: PUSH
33073: LD_INT 32
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 30
33082: PUSH
33083: LD_INT 33
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: LIST
33094: PPUSH
33095: CALL_OW 72
33099: IFFALSE 33187
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33101: LD_ADDR_VAR 0 8
33105: PUSH
33106: LD_VAR 0 18
33110: PPUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 30
33116: PUSH
33117: LD_INT 32
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 30
33126: PUSH
33127: LD_INT 33
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: LIST
33138: PPUSH
33139: CALL_OW 72
33143: PUSH
33144: FOR_IN
33145: IFFALSE 33185
// begin if not GetBWeapon ( i ) then
33147: LD_VAR 0 8
33151: PPUSH
33152: CALL_OW 269
33156: NOT
33157: IFFALSE 33183
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33159: LD_VAR 0 8
33163: PPUSH
33164: LD_VAR 0 8
33168: PPUSH
33169: LD_VAR 0 2
33173: PPUSH
33174: CALL 34433 0 2
33178: PPUSH
33179: CALL_OW 431
// end ;
33183: GO 33144
33185: POP
33186: POP
// end ; for i = 1 to personel do
33187: LD_ADDR_VAR 0 8
33191: PUSH
33192: DOUBLE
33193: LD_INT 1
33195: DEC
33196: ST_TO_ADDR
33197: LD_VAR 0 6
33201: PUSH
33202: FOR_TO
33203: IFFALSE 34267
// begin if i > 4 then
33205: LD_VAR 0 8
33209: PUSH
33210: LD_INT 4
33212: GREATER
33213: IFFALSE 33217
// break ;
33215: GO 34267
// case i of 1 :
33217: LD_VAR 0 8
33221: PUSH
33222: LD_INT 1
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33310
33230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33231: LD_ADDR_VAR 0 12
33235: PUSH
33236: LD_VAR 0 18
33240: PPUSH
33241: LD_INT 22
33243: PUSH
33244: LD_VAR 0 16
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 58
33255: PUSH
33256: EMPTY
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 30
33264: PUSH
33265: LD_INT 32
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 30
33274: PUSH
33275: LD_INT 4
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 30
33284: PUSH
33285: LD_INT 5
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: LIST
33302: PPUSH
33303: CALL_OW 72
33307: ST_TO_ADDR
33308: GO 33532
33310: LD_INT 2
33312: DOUBLE
33313: EQUAL
33314: IFTRUE 33318
33316: GO 33380
33318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33319: LD_ADDR_VAR 0 12
33323: PUSH
33324: LD_VAR 0 18
33328: PPUSH
33329: LD_INT 22
33331: PUSH
33332: LD_VAR 0 16
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 30
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 30
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PPUSH
33373: CALL_OW 72
33377: ST_TO_ADDR
33378: GO 33532
33380: LD_INT 3
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33388
33386: GO 33450
33388: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33389: LD_ADDR_VAR 0 12
33393: PUSH
33394: LD_VAR 0 18
33398: PPUSH
33399: LD_INT 22
33401: PUSH
33402: LD_VAR 0 16
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 30
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 30
33426: PUSH
33427: LD_INT 3
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PPUSH
33443: CALL_OW 72
33447: ST_TO_ADDR
33448: GO 33532
33450: LD_INT 4
33452: DOUBLE
33453: EQUAL
33454: IFTRUE 33458
33456: GO 33531
33458: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33459: LD_ADDR_VAR 0 12
33463: PUSH
33464: LD_VAR 0 18
33468: PPUSH
33469: LD_INT 22
33471: PUSH
33472: LD_VAR 0 16
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 30
33486: PUSH
33487: LD_INT 6
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 30
33496: PUSH
33497: LD_INT 7
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 30
33506: PUSH
33507: LD_INT 8
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PPUSH
33524: CALL_OW 72
33528: ST_TO_ADDR
33529: GO 33532
33531: POP
// if i = 1 then
33532: LD_VAR 0 8
33536: PUSH
33537: LD_INT 1
33539: EQUAL
33540: IFFALSE 33651
// begin tmp := [ ] ;
33542: LD_ADDR_VAR 0 19
33546: PUSH
33547: EMPTY
33548: ST_TO_ADDR
// for j in f do
33549: LD_ADDR_VAR 0 9
33553: PUSH
33554: LD_VAR 0 12
33558: PUSH
33559: FOR_IN
33560: IFFALSE 33633
// if GetBType ( j ) = b_bunker then
33562: LD_VAR 0 9
33566: PPUSH
33567: CALL_OW 266
33571: PUSH
33572: LD_INT 32
33574: EQUAL
33575: IFFALSE 33602
// tmp := Insert ( tmp , 1 , j ) else
33577: LD_ADDR_VAR 0 19
33581: PUSH
33582: LD_VAR 0 19
33586: PPUSH
33587: LD_INT 1
33589: PPUSH
33590: LD_VAR 0 9
33594: PPUSH
33595: CALL_OW 2
33599: ST_TO_ADDR
33600: GO 33631
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33602: LD_ADDR_VAR 0 19
33606: PUSH
33607: LD_VAR 0 19
33611: PPUSH
33612: LD_VAR 0 19
33616: PUSH
33617: LD_INT 1
33619: PLUS
33620: PPUSH
33621: LD_VAR 0 9
33625: PPUSH
33626: CALL_OW 2
33630: ST_TO_ADDR
33631: GO 33559
33633: POP
33634: POP
// if tmp then
33635: LD_VAR 0 19
33639: IFFALSE 33651
// f := tmp ;
33641: LD_ADDR_VAR 0 12
33645: PUSH
33646: LD_VAR 0 19
33650: ST_TO_ADDR
// end ; x := personel [ i ] ;
33651: LD_ADDR_VAR 0 13
33655: PUSH
33656: LD_VAR 0 6
33660: PUSH
33661: LD_VAR 0 8
33665: ARRAY
33666: ST_TO_ADDR
// if x = - 1 then
33667: LD_VAR 0 13
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: EQUAL
33676: IFFALSE 33885
// begin for j in f do
33678: LD_ADDR_VAR 0 9
33682: PUSH
33683: LD_VAR 0 12
33687: PUSH
33688: FOR_IN
33689: IFFALSE 33881
// repeat InitHc ;
33691: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33695: LD_VAR 0 9
33699: PPUSH
33700: CALL_OW 266
33704: PUSH
33705: LD_INT 5
33707: EQUAL
33708: IFFALSE 33778
// begin if UnitsInside ( j ) < 3 then
33710: LD_VAR 0 9
33714: PPUSH
33715: CALL_OW 313
33719: PUSH
33720: LD_INT 3
33722: LESS
33723: IFFALSE 33759
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33725: LD_INT 0
33727: PPUSH
33728: LD_INT 5
33730: PUSH
33731: LD_INT 8
33733: PUSH
33734: LD_INT 9
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: PUSH
33742: LD_VAR 0 17
33746: ARRAY
33747: PPUSH
33748: LD_VAR 0 4
33752: PPUSH
33753: CALL_OW 380
33757: GO 33776
// PrepareHuman ( false , i , skill ) ;
33759: LD_INT 0
33761: PPUSH
33762: LD_VAR 0 8
33766: PPUSH
33767: LD_VAR 0 4
33771: PPUSH
33772: CALL_OW 380
// end else
33776: GO 33795
// PrepareHuman ( false , i , skill ) ;
33778: LD_INT 0
33780: PPUSH
33781: LD_VAR 0 8
33785: PPUSH
33786: LD_VAR 0 4
33790: PPUSH
33791: CALL_OW 380
// un := CreateHuman ;
33795: LD_ADDR_VAR 0 14
33799: PUSH
33800: CALL_OW 44
33804: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33805: LD_ADDR_VAR 0 7
33809: PUSH
33810: LD_VAR 0 7
33814: PPUSH
33815: LD_INT 1
33817: PPUSH
33818: LD_VAR 0 14
33822: PPUSH
33823: CALL_OW 2
33827: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33828: LD_VAR 0 14
33832: PPUSH
33833: LD_VAR 0 9
33837: PPUSH
33838: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33842: LD_VAR 0 9
33846: PPUSH
33847: CALL_OW 313
33851: PUSH
33852: LD_INT 6
33854: EQUAL
33855: PUSH
33856: LD_VAR 0 9
33860: PPUSH
33861: CALL_OW 266
33865: PUSH
33866: LD_INT 32
33868: PUSH
33869: LD_INT 31
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: IN
33876: OR
33877: IFFALSE 33691
33879: GO 33688
33881: POP
33882: POP
// end else
33883: GO 34265
// for j = 1 to x do
33885: LD_ADDR_VAR 0 9
33889: PUSH
33890: DOUBLE
33891: LD_INT 1
33893: DEC
33894: ST_TO_ADDR
33895: LD_VAR 0 13
33899: PUSH
33900: FOR_TO
33901: IFFALSE 34263
// begin InitHc ;
33903: CALL_OW 19
// if not f then
33907: LD_VAR 0 12
33911: NOT
33912: IFFALSE 34001
// begin PrepareHuman ( false , i , skill ) ;
33914: LD_INT 0
33916: PPUSH
33917: LD_VAR 0 8
33921: PPUSH
33922: LD_VAR 0 4
33926: PPUSH
33927: CALL_OW 380
// un := CreateHuman ;
33931: LD_ADDR_VAR 0 14
33935: PUSH
33936: CALL_OW 44
33940: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33941: LD_ADDR_VAR 0 7
33945: PUSH
33946: LD_VAR 0 7
33950: PPUSH
33951: LD_INT 1
33953: PPUSH
33954: LD_VAR 0 14
33958: PPUSH
33959: CALL_OW 2
33963: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33964: LD_VAR 0 14
33968: PPUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: CALL_OW 250
33978: PPUSH
33979: LD_VAR 0 1
33983: PPUSH
33984: CALL_OW 251
33988: PPUSH
33989: LD_INT 10
33991: PPUSH
33992: LD_INT 0
33994: PPUSH
33995: CALL_OW 50
// continue ;
33999: GO 33900
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34001: LD_VAR 0 12
34005: PUSH
34006: LD_INT 1
34008: ARRAY
34009: PPUSH
34010: CALL_OW 313
34014: PUSH
34015: LD_VAR 0 12
34019: PUSH
34020: LD_INT 1
34022: ARRAY
34023: PPUSH
34024: CALL_OW 266
34028: PUSH
34029: LD_INT 32
34031: PUSH
34032: LD_INT 31
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: IN
34039: AND
34040: PUSH
34041: LD_VAR 0 12
34045: PUSH
34046: LD_INT 1
34048: ARRAY
34049: PPUSH
34050: CALL_OW 313
34054: PUSH
34055: LD_INT 6
34057: EQUAL
34058: OR
34059: IFFALSE 34079
// f := Delete ( f , 1 ) ;
34061: LD_ADDR_VAR 0 12
34065: PUSH
34066: LD_VAR 0 12
34070: PPUSH
34071: LD_INT 1
34073: PPUSH
34074: CALL_OW 3
34078: ST_TO_ADDR
// if not f then
34079: LD_VAR 0 12
34083: NOT
34084: IFFALSE 34102
// begin x := x + 2 ;
34086: LD_ADDR_VAR 0 13
34090: PUSH
34091: LD_VAR 0 13
34095: PUSH
34096: LD_INT 2
34098: PLUS
34099: ST_TO_ADDR
// continue ;
34100: GO 33900
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34102: LD_VAR 0 12
34106: PUSH
34107: LD_INT 1
34109: ARRAY
34110: PPUSH
34111: CALL_OW 266
34115: PUSH
34116: LD_INT 5
34118: EQUAL
34119: IFFALSE 34193
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34121: LD_VAR 0 12
34125: PUSH
34126: LD_INT 1
34128: ARRAY
34129: PPUSH
34130: CALL_OW 313
34134: PUSH
34135: LD_INT 3
34137: LESS
34138: IFFALSE 34174
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34140: LD_INT 0
34142: PPUSH
34143: LD_INT 5
34145: PUSH
34146: LD_INT 8
34148: PUSH
34149: LD_INT 9
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: PUSH
34157: LD_VAR 0 17
34161: ARRAY
34162: PPUSH
34163: LD_VAR 0 4
34167: PPUSH
34168: CALL_OW 380
34172: GO 34191
// PrepareHuman ( false , i , skill ) ;
34174: LD_INT 0
34176: PPUSH
34177: LD_VAR 0 8
34181: PPUSH
34182: LD_VAR 0 4
34186: PPUSH
34187: CALL_OW 380
// end else
34191: GO 34210
// PrepareHuman ( false , i , skill ) ;
34193: LD_INT 0
34195: PPUSH
34196: LD_VAR 0 8
34200: PPUSH
34201: LD_VAR 0 4
34205: PPUSH
34206: CALL_OW 380
// un := CreateHuman ;
34210: LD_ADDR_VAR 0 14
34214: PUSH
34215: CALL_OW 44
34219: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34220: LD_ADDR_VAR 0 7
34224: PUSH
34225: LD_VAR 0 7
34229: PPUSH
34230: LD_INT 1
34232: PPUSH
34233: LD_VAR 0 14
34237: PPUSH
34238: CALL_OW 2
34242: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34243: LD_VAR 0 14
34247: PPUSH
34248: LD_VAR 0 12
34252: PUSH
34253: LD_INT 1
34255: ARRAY
34256: PPUSH
34257: CALL_OW 52
// end ;
34261: GO 33900
34263: POP
34264: POP
// end ;
34265: GO 33202
34267: POP
34268: POP
// result := result ^ buildings ;
34269: LD_ADDR_VAR 0 7
34273: PUSH
34274: LD_VAR 0 7
34278: PUSH
34279: LD_VAR 0 18
34283: ADD
34284: ST_TO_ADDR
// end else
34285: GO 34428
// begin for i = 1 to personel do
34287: LD_ADDR_VAR 0 8
34291: PUSH
34292: DOUBLE
34293: LD_INT 1
34295: DEC
34296: ST_TO_ADDR
34297: LD_VAR 0 6
34301: PUSH
34302: FOR_TO
34303: IFFALSE 34426
// begin if i > 4 then
34305: LD_VAR 0 8
34309: PUSH
34310: LD_INT 4
34312: GREATER
34313: IFFALSE 34317
// break ;
34315: GO 34426
// x := personel [ i ] ;
34317: LD_ADDR_VAR 0 13
34321: PUSH
34322: LD_VAR 0 6
34326: PUSH
34327: LD_VAR 0 8
34331: ARRAY
34332: ST_TO_ADDR
// if x = - 1 then
34333: LD_VAR 0 13
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: EQUAL
34342: IFFALSE 34346
// continue ;
34344: GO 34302
// PrepareHuman ( false , i , skill ) ;
34346: LD_INT 0
34348: PPUSH
34349: LD_VAR 0 8
34353: PPUSH
34354: LD_VAR 0 4
34358: PPUSH
34359: CALL_OW 380
// un := CreateHuman ;
34363: LD_ADDR_VAR 0 14
34367: PUSH
34368: CALL_OW 44
34372: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34373: LD_VAR 0 14
34377: PPUSH
34378: LD_VAR 0 1
34382: PPUSH
34383: CALL_OW 250
34387: PPUSH
34388: LD_VAR 0 1
34392: PPUSH
34393: CALL_OW 251
34397: PPUSH
34398: LD_INT 10
34400: PPUSH
34401: LD_INT 0
34403: PPUSH
34404: CALL_OW 50
// result := result ^ un ;
34408: LD_ADDR_VAR 0 7
34412: PUSH
34413: LD_VAR 0 7
34417: PUSH
34418: LD_VAR 0 14
34422: ADD
34423: ST_TO_ADDR
// end ;
34424: GO 34302
34426: POP
34427: POP
// end ; end ;
34428: LD_VAR 0 7
34432: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34433: LD_INT 0
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
// result := false ;
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_INT 0
34458: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34459: LD_VAR 0 1
34463: NOT
34464: PUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: CALL_OW 266
34474: PUSH
34475: LD_INT 32
34477: PUSH
34478: LD_INT 33
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: IN
34485: NOT
34486: OR
34487: IFFALSE 34491
// exit ;
34489: GO 35600
// nat := GetNation ( tower ) ;
34491: LD_ADDR_VAR 0 12
34495: PUSH
34496: LD_VAR 0 1
34500: PPUSH
34501: CALL_OW 248
34505: ST_TO_ADDR
// side := GetSide ( tower ) ;
34506: LD_ADDR_VAR 0 16
34510: PUSH
34511: LD_VAR 0 1
34515: PPUSH
34516: CALL_OW 255
34520: ST_TO_ADDR
// x := GetX ( tower ) ;
34521: LD_ADDR_VAR 0 10
34525: PUSH
34526: LD_VAR 0 1
34530: PPUSH
34531: CALL_OW 250
34535: ST_TO_ADDR
// y := GetY ( tower ) ;
34536: LD_ADDR_VAR 0 11
34540: PUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 251
34550: ST_TO_ADDR
// if not x or not y then
34551: LD_VAR 0 10
34555: NOT
34556: PUSH
34557: LD_VAR 0 11
34561: NOT
34562: OR
34563: IFFALSE 34567
// exit ;
34565: GO 35600
// weapon := 0 ;
34567: LD_ADDR_VAR 0 18
34571: PUSH
34572: LD_INT 0
34574: ST_TO_ADDR
// fac_list := [ ] ;
34575: LD_ADDR_VAR 0 17
34579: PUSH
34580: EMPTY
34581: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34582: LD_ADDR_VAR 0 6
34586: PUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: CALL_OW 274
34596: PPUSH
34597: LD_VAR 0 2
34601: PPUSH
34602: LD_INT 0
34604: PPUSH
34605: CALL 32171 0 3
34609: PPUSH
34610: LD_INT 30
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PPUSH
34620: CALL_OW 72
34624: ST_TO_ADDR
// if not factories then
34625: LD_VAR 0 6
34629: NOT
34630: IFFALSE 34634
// exit ;
34632: GO 35600
// for i in factories do
34634: LD_ADDR_VAR 0 8
34638: PUSH
34639: LD_VAR 0 6
34643: PUSH
34644: FOR_IN
34645: IFFALSE 34670
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34647: LD_ADDR_VAR 0 17
34651: PUSH
34652: LD_VAR 0 17
34656: PUSH
34657: LD_VAR 0 8
34661: PPUSH
34662: CALL_OW 478
34666: UNION
34667: ST_TO_ADDR
34668: GO 34644
34670: POP
34671: POP
// if not fac_list then
34672: LD_VAR 0 17
34676: NOT
34677: IFFALSE 34681
// exit ;
34679: GO 35600
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34681: LD_ADDR_VAR 0 5
34685: PUSH
34686: LD_INT 4
34688: PUSH
34689: LD_INT 5
34691: PUSH
34692: LD_INT 9
34694: PUSH
34695: LD_INT 10
34697: PUSH
34698: LD_INT 6
34700: PUSH
34701: LD_INT 7
34703: PUSH
34704: LD_INT 11
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 27
34718: PUSH
34719: LD_INT 28
34721: PUSH
34722: LD_INT 26
34724: PUSH
34725: LD_INT 30
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 43
34736: PUSH
34737: LD_INT 44
34739: PUSH
34740: LD_INT 46
34742: PUSH
34743: LD_INT 45
34745: PUSH
34746: LD_INT 47
34748: PUSH
34749: LD_INT 49
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: PUSH
34765: LD_VAR 0 12
34769: ARRAY
34770: ST_TO_ADDR
// list := list isect fac_list ;
34771: LD_ADDR_VAR 0 5
34775: PUSH
34776: LD_VAR 0 5
34780: PUSH
34781: LD_VAR 0 17
34785: ISECT
34786: ST_TO_ADDR
// if not list then
34787: LD_VAR 0 5
34791: NOT
34792: IFFALSE 34796
// exit ;
34794: GO 35600
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34796: LD_VAR 0 12
34800: PUSH
34801: LD_INT 3
34803: EQUAL
34804: PUSH
34805: LD_INT 49
34807: PUSH
34808: LD_VAR 0 5
34812: IN
34813: AND
34814: PUSH
34815: LD_INT 31
34817: PPUSH
34818: LD_VAR 0 16
34822: PPUSH
34823: CALL_OW 321
34827: PUSH
34828: LD_INT 2
34830: EQUAL
34831: AND
34832: IFFALSE 34892
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34834: LD_INT 22
34836: PUSH
34837: LD_VAR 0 16
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 35
34848: PUSH
34849: LD_INT 49
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 91
34858: PUSH
34859: LD_VAR 0 1
34863: PUSH
34864: LD_INT 10
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: PPUSH
34877: CALL_OW 69
34881: NOT
34882: IFFALSE 34892
// weapon := ru_time_lapser ;
34884: LD_ADDR_VAR 0 18
34888: PUSH
34889: LD_INT 49
34891: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34892: LD_VAR 0 12
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: LD_INT 2
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: IN
34907: PUSH
34908: LD_INT 11
34910: PUSH
34911: LD_VAR 0 5
34915: IN
34916: PUSH
34917: LD_INT 30
34919: PUSH
34920: LD_VAR 0 5
34924: IN
34925: OR
34926: AND
34927: PUSH
34928: LD_INT 6
34930: PPUSH
34931: LD_VAR 0 16
34935: PPUSH
34936: CALL_OW 321
34940: PUSH
34941: LD_INT 2
34943: EQUAL
34944: AND
34945: IFFALSE 35110
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34947: LD_INT 22
34949: PUSH
34950: LD_VAR 0 16
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 35
34964: PUSH
34965: LD_INT 11
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 35
34974: PUSH
34975: LD_INT 30
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 91
34989: PUSH
34990: LD_VAR 0 1
34994: PUSH
34995: LD_INT 18
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: PPUSH
35008: CALL_OW 69
35012: NOT
35013: PUSH
35014: LD_INT 22
35016: PUSH
35017: LD_VAR 0 16
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: LD_INT 30
35031: PUSH
35032: LD_INT 32
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 30
35041: PUSH
35042: LD_INT 33
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 91
35056: PUSH
35057: LD_VAR 0 1
35061: PUSH
35062: LD_INT 12
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: LIST
35074: PUSH
35075: EMPTY
35076: LIST
35077: PPUSH
35078: CALL_OW 69
35082: PUSH
35083: LD_INT 2
35085: GREATER
35086: AND
35087: IFFALSE 35110
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35089: LD_ADDR_VAR 0 18
35093: PUSH
35094: LD_INT 11
35096: PUSH
35097: LD_INT 30
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_VAR 0 12
35108: ARRAY
35109: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35110: LD_VAR 0 18
35114: NOT
35115: PUSH
35116: LD_INT 40
35118: PPUSH
35119: LD_VAR 0 16
35123: PPUSH
35124: CALL_OW 321
35128: PUSH
35129: LD_INT 2
35131: EQUAL
35132: AND
35133: PUSH
35134: LD_INT 7
35136: PUSH
35137: LD_VAR 0 5
35141: IN
35142: PUSH
35143: LD_INT 28
35145: PUSH
35146: LD_VAR 0 5
35150: IN
35151: OR
35152: PUSH
35153: LD_INT 45
35155: PUSH
35156: LD_VAR 0 5
35160: IN
35161: OR
35162: AND
35163: IFFALSE 35417
// begin hex := GetHexInfo ( x , y ) ;
35165: LD_ADDR_VAR 0 4
35169: PUSH
35170: LD_VAR 0 10
35174: PPUSH
35175: LD_VAR 0 11
35179: PPUSH
35180: CALL_OW 546
35184: ST_TO_ADDR
// if hex [ 1 ] then
35185: LD_VAR 0 4
35189: PUSH
35190: LD_INT 1
35192: ARRAY
35193: IFFALSE 35197
// exit ;
35195: GO 35600
// height := hex [ 2 ] ;
35197: LD_ADDR_VAR 0 15
35201: PUSH
35202: LD_VAR 0 4
35206: PUSH
35207: LD_INT 2
35209: ARRAY
35210: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35211: LD_ADDR_VAR 0 14
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: LD_INT 3
35224: PUSH
35225: LD_INT 5
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
// for i in tmp do
35234: LD_ADDR_VAR 0 8
35238: PUSH
35239: LD_VAR 0 14
35243: PUSH
35244: FOR_IN
35245: IFFALSE 35415
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35247: LD_ADDR_VAR 0 9
35251: PUSH
35252: LD_VAR 0 10
35256: PPUSH
35257: LD_VAR 0 8
35261: PPUSH
35262: LD_INT 5
35264: PPUSH
35265: CALL_OW 272
35269: PUSH
35270: LD_VAR 0 11
35274: PPUSH
35275: LD_VAR 0 8
35279: PPUSH
35280: LD_INT 5
35282: PPUSH
35283: CALL_OW 273
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35292: LD_VAR 0 9
35296: PUSH
35297: LD_INT 1
35299: ARRAY
35300: PPUSH
35301: LD_VAR 0 9
35305: PUSH
35306: LD_INT 2
35308: ARRAY
35309: PPUSH
35310: CALL_OW 488
35314: IFFALSE 35413
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35316: LD_ADDR_VAR 0 4
35320: PUSH
35321: LD_VAR 0 9
35325: PUSH
35326: LD_INT 1
35328: ARRAY
35329: PPUSH
35330: LD_VAR 0 9
35334: PUSH
35335: LD_INT 2
35337: ARRAY
35338: PPUSH
35339: CALL_OW 546
35343: ST_TO_ADDR
// if hex [ 1 ] then
35344: LD_VAR 0 4
35348: PUSH
35349: LD_INT 1
35351: ARRAY
35352: IFFALSE 35356
// continue ;
35354: GO 35244
// h := hex [ 2 ] ;
35356: LD_ADDR_VAR 0 13
35360: PUSH
35361: LD_VAR 0 4
35365: PUSH
35366: LD_INT 2
35368: ARRAY
35369: ST_TO_ADDR
// if h + 7 < height then
35370: LD_VAR 0 13
35374: PUSH
35375: LD_INT 7
35377: PLUS
35378: PUSH
35379: LD_VAR 0 15
35383: LESS
35384: IFFALSE 35413
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35386: LD_ADDR_VAR 0 18
35390: PUSH
35391: LD_INT 7
35393: PUSH
35394: LD_INT 28
35396: PUSH
35397: LD_INT 45
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: PUSH
35405: LD_VAR 0 12
35409: ARRAY
35410: ST_TO_ADDR
// break ;
35411: GO 35415
// end ; end ; end ;
35413: GO 35244
35415: POP
35416: POP
// end ; if not weapon then
35417: LD_VAR 0 18
35421: NOT
35422: IFFALSE 35482
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35424: LD_ADDR_VAR 0 5
35428: PUSH
35429: LD_VAR 0 5
35433: PUSH
35434: LD_INT 11
35436: PUSH
35437: LD_INT 30
35439: PUSH
35440: LD_INT 49
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: DIFF
35448: ST_TO_ADDR
// if not list then
35449: LD_VAR 0 5
35453: NOT
35454: IFFALSE 35458
// exit ;
35456: GO 35600
// weapon := list [ rand ( 1 , list ) ] ;
35458: LD_ADDR_VAR 0 18
35462: PUSH
35463: LD_VAR 0 5
35467: PUSH
35468: LD_INT 1
35470: PPUSH
35471: LD_VAR 0 5
35475: PPUSH
35476: CALL_OW 12
35480: ARRAY
35481: ST_TO_ADDR
// end ; if weapon then
35482: LD_VAR 0 18
35486: IFFALSE 35600
// begin tmp := CostOfWeapon ( weapon ) ;
35488: LD_ADDR_VAR 0 14
35492: PUSH
35493: LD_VAR 0 18
35497: PPUSH
35498: CALL_OW 451
35502: ST_TO_ADDR
// j := GetBase ( tower ) ;
35503: LD_ADDR_VAR 0 9
35507: PUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: CALL_OW 274
35517: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35518: LD_VAR 0 9
35522: PPUSH
35523: LD_INT 1
35525: PPUSH
35526: CALL_OW 275
35530: PUSH
35531: LD_VAR 0 14
35535: PUSH
35536: LD_INT 1
35538: ARRAY
35539: GREATEREQUAL
35540: PUSH
35541: LD_VAR 0 9
35545: PPUSH
35546: LD_INT 2
35548: PPUSH
35549: CALL_OW 275
35553: PUSH
35554: LD_VAR 0 14
35558: PUSH
35559: LD_INT 2
35561: ARRAY
35562: GREATEREQUAL
35563: AND
35564: PUSH
35565: LD_VAR 0 9
35569: PPUSH
35570: LD_INT 3
35572: PPUSH
35573: CALL_OW 275
35577: PUSH
35578: LD_VAR 0 14
35582: PUSH
35583: LD_INT 3
35585: ARRAY
35586: GREATEREQUAL
35587: AND
35588: IFFALSE 35600
// result := weapon ;
35590: LD_ADDR_VAR 0 3
35594: PUSH
35595: LD_VAR 0 18
35599: ST_TO_ADDR
// end ; end ;
35600: LD_VAR 0 3
35604: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35605: LD_INT 0
35607: PPUSH
35608: PPUSH
// result := true ;
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_INT 1
35616: ST_TO_ADDR
// if array1 = array2 then
35617: LD_VAR 0 1
35621: PUSH
35622: LD_VAR 0 2
35626: EQUAL
35627: IFFALSE 35687
// begin for i = 1 to array1 do
35629: LD_ADDR_VAR 0 4
35633: PUSH
35634: DOUBLE
35635: LD_INT 1
35637: DEC
35638: ST_TO_ADDR
35639: LD_VAR 0 1
35643: PUSH
35644: FOR_TO
35645: IFFALSE 35683
// if array1 [ i ] <> array2 [ i ] then
35647: LD_VAR 0 1
35651: PUSH
35652: LD_VAR 0 4
35656: ARRAY
35657: PUSH
35658: LD_VAR 0 2
35662: PUSH
35663: LD_VAR 0 4
35667: ARRAY
35668: NONEQUAL
35669: IFFALSE 35681
// begin result := false ;
35671: LD_ADDR_VAR 0 3
35675: PUSH
35676: LD_INT 0
35678: ST_TO_ADDR
// break ;
35679: GO 35683
// end ;
35681: GO 35644
35683: POP
35684: POP
// end else
35685: GO 35695
// result := false ;
35687: LD_ADDR_VAR 0 3
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// end ;
35695: LD_VAR 0 3
35699: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
// if not array1 or not array2 then
35704: LD_VAR 0 1
35708: NOT
35709: PUSH
35710: LD_VAR 0 2
35714: NOT
35715: OR
35716: IFFALSE 35720
// exit ;
35718: GO 35784
// result := true ;
35720: LD_ADDR_VAR 0 3
35724: PUSH
35725: LD_INT 1
35727: ST_TO_ADDR
// for i = 1 to array1 do
35728: LD_ADDR_VAR 0 4
35732: PUSH
35733: DOUBLE
35734: LD_INT 1
35736: DEC
35737: ST_TO_ADDR
35738: LD_VAR 0 1
35742: PUSH
35743: FOR_TO
35744: IFFALSE 35782
// if array1 [ i ] <> array2 [ i ] then
35746: LD_VAR 0 1
35750: PUSH
35751: LD_VAR 0 4
35755: ARRAY
35756: PUSH
35757: LD_VAR 0 2
35761: PUSH
35762: LD_VAR 0 4
35766: ARRAY
35767: NONEQUAL
35768: IFFALSE 35780
// begin result := false ;
35770: LD_ADDR_VAR 0 3
35774: PUSH
35775: LD_INT 0
35777: ST_TO_ADDR
// break ;
35778: GO 35782
// end ;
35780: GO 35743
35782: POP
35783: POP
// end ;
35784: LD_VAR 0 3
35788: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35789: LD_INT 0
35791: PPUSH
35792: PPUSH
35793: PPUSH
// pom := GetBase ( fac ) ;
35794: LD_ADDR_VAR 0 5
35798: PUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL_OW 274
35808: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35809: LD_ADDR_VAR 0 4
35813: PUSH
35814: LD_VAR 0 2
35818: PUSH
35819: LD_INT 1
35821: ARRAY
35822: PPUSH
35823: LD_VAR 0 2
35827: PUSH
35828: LD_INT 2
35830: ARRAY
35831: PPUSH
35832: LD_VAR 0 2
35836: PUSH
35837: LD_INT 3
35839: ARRAY
35840: PPUSH
35841: LD_VAR 0 2
35845: PUSH
35846: LD_INT 4
35848: ARRAY
35849: PPUSH
35850: CALL_OW 449
35854: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35855: LD_ADDR_VAR 0 3
35859: PUSH
35860: LD_VAR 0 5
35864: PPUSH
35865: LD_INT 1
35867: PPUSH
35868: CALL_OW 275
35872: PUSH
35873: LD_VAR 0 4
35877: PUSH
35878: LD_INT 1
35880: ARRAY
35881: GREATEREQUAL
35882: PUSH
35883: LD_VAR 0 5
35887: PPUSH
35888: LD_INT 2
35890: PPUSH
35891: CALL_OW 275
35895: PUSH
35896: LD_VAR 0 4
35900: PUSH
35901: LD_INT 2
35903: ARRAY
35904: GREATEREQUAL
35905: AND
35906: PUSH
35907: LD_VAR 0 5
35911: PPUSH
35912: LD_INT 3
35914: PPUSH
35915: CALL_OW 275
35919: PUSH
35920: LD_VAR 0 4
35924: PUSH
35925: LD_INT 3
35927: ARRAY
35928: GREATEREQUAL
35929: AND
35930: ST_TO_ADDR
// end ;
35931: LD_VAR 0 3
35935: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35936: LD_INT 0
35938: PPUSH
35939: PPUSH
35940: PPUSH
35941: PPUSH
// pom := GetBase ( building ) ;
35942: LD_ADDR_VAR 0 3
35946: PUSH
35947: LD_VAR 0 1
35951: PPUSH
35952: CALL_OW 274
35956: ST_TO_ADDR
// if not pom then
35957: LD_VAR 0 3
35961: NOT
35962: IFFALSE 35966
// exit ;
35964: GO 36136
// btype := GetBType ( building ) ;
35966: LD_ADDR_VAR 0 5
35970: PUSH
35971: LD_VAR 0 1
35975: PPUSH
35976: CALL_OW 266
35980: ST_TO_ADDR
// if btype = b_armoury then
35981: LD_VAR 0 5
35985: PUSH
35986: LD_INT 4
35988: EQUAL
35989: IFFALSE 35999
// btype := b_barracks ;
35991: LD_ADDR_VAR 0 5
35995: PUSH
35996: LD_INT 5
35998: ST_TO_ADDR
// if btype = b_depot then
35999: LD_VAR 0 5
36003: PUSH
36004: LD_INT 0
36006: EQUAL
36007: IFFALSE 36017
// btype := b_warehouse ;
36009: LD_ADDR_VAR 0 5
36013: PUSH
36014: LD_INT 1
36016: ST_TO_ADDR
// if btype = b_workshop then
36017: LD_VAR 0 5
36021: PUSH
36022: LD_INT 2
36024: EQUAL
36025: IFFALSE 36035
// btype := b_factory ;
36027: LD_ADDR_VAR 0 5
36031: PUSH
36032: LD_INT 3
36034: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36035: LD_ADDR_VAR 0 4
36039: PUSH
36040: LD_VAR 0 5
36044: PPUSH
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL_OW 248
36054: PPUSH
36055: CALL_OW 450
36059: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36060: LD_ADDR_VAR 0 2
36064: PUSH
36065: LD_VAR 0 3
36069: PPUSH
36070: LD_INT 1
36072: PPUSH
36073: CALL_OW 275
36077: PUSH
36078: LD_VAR 0 4
36082: PUSH
36083: LD_INT 1
36085: ARRAY
36086: GREATEREQUAL
36087: PUSH
36088: LD_VAR 0 3
36092: PPUSH
36093: LD_INT 2
36095: PPUSH
36096: CALL_OW 275
36100: PUSH
36101: LD_VAR 0 4
36105: PUSH
36106: LD_INT 2
36108: ARRAY
36109: GREATEREQUAL
36110: AND
36111: PUSH
36112: LD_VAR 0 3
36116: PPUSH
36117: LD_INT 3
36119: PPUSH
36120: CALL_OW 275
36124: PUSH
36125: LD_VAR 0 4
36129: PUSH
36130: LD_INT 3
36132: ARRAY
36133: GREATEREQUAL
36134: AND
36135: ST_TO_ADDR
// end ;
36136: LD_VAR 0 2
36140: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36141: LD_INT 0
36143: PPUSH
36144: PPUSH
36145: PPUSH
// pom := GetBase ( building ) ;
36146: LD_ADDR_VAR 0 4
36150: PUSH
36151: LD_VAR 0 1
36155: PPUSH
36156: CALL_OW 274
36160: ST_TO_ADDR
// if not pom then
36161: LD_VAR 0 4
36165: NOT
36166: IFFALSE 36170
// exit ;
36168: GO 36271
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36170: LD_ADDR_VAR 0 5
36174: PUSH
36175: LD_VAR 0 2
36179: PPUSH
36180: LD_VAR 0 1
36184: PPUSH
36185: CALL_OW 248
36189: PPUSH
36190: CALL_OW 450
36194: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36195: LD_ADDR_VAR 0 3
36199: PUSH
36200: LD_VAR 0 4
36204: PPUSH
36205: LD_INT 1
36207: PPUSH
36208: CALL_OW 275
36212: PUSH
36213: LD_VAR 0 5
36217: PUSH
36218: LD_INT 1
36220: ARRAY
36221: GREATEREQUAL
36222: PUSH
36223: LD_VAR 0 4
36227: PPUSH
36228: LD_INT 2
36230: PPUSH
36231: CALL_OW 275
36235: PUSH
36236: LD_VAR 0 5
36240: PUSH
36241: LD_INT 2
36243: ARRAY
36244: GREATEREQUAL
36245: AND
36246: PUSH
36247: LD_VAR 0 4
36251: PPUSH
36252: LD_INT 3
36254: PPUSH
36255: CALL_OW 275
36259: PUSH
36260: LD_VAR 0 5
36264: PUSH
36265: LD_INT 3
36267: ARRAY
36268: GREATEREQUAL
36269: AND
36270: ST_TO_ADDR
// end ;
36271: LD_VAR 0 3
36275: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36276: LD_INT 0
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
// result := false ;
36289: LD_ADDR_VAR 0 8
36293: PUSH
36294: LD_INT 0
36296: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36297: LD_VAR 0 5
36301: NOT
36302: PUSH
36303: LD_VAR 0 1
36307: NOT
36308: OR
36309: PUSH
36310: LD_VAR 0 2
36314: NOT
36315: OR
36316: PUSH
36317: LD_VAR 0 3
36321: NOT
36322: OR
36323: IFFALSE 36327
// exit ;
36325: GO 37141
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36327: LD_ADDR_VAR 0 14
36331: PUSH
36332: LD_VAR 0 1
36336: PPUSH
36337: LD_VAR 0 2
36341: PPUSH
36342: LD_VAR 0 3
36346: PPUSH
36347: LD_VAR 0 4
36351: PPUSH
36352: LD_VAR 0 5
36356: PUSH
36357: LD_INT 1
36359: ARRAY
36360: PPUSH
36361: CALL_OW 248
36365: PPUSH
36366: LD_INT 0
36368: PPUSH
36369: CALL 38378 0 6
36373: ST_TO_ADDR
// if not hexes then
36374: LD_VAR 0 14
36378: NOT
36379: IFFALSE 36383
// exit ;
36381: GO 37141
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36383: LD_ADDR_VAR 0 17
36387: PUSH
36388: LD_VAR 0 5
36392: PPUSH
36393: LD_INT 22
36395: PUSH
36396: LD_VAR 0 13
36400: PPUSH
36401: CALL_OW 255
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: LD_INT 30
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 30
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PPUSH
36442: CALL_OW 72
36446: ST_TO_ADDR
// for i = 1 to hexes do
36447: LD_ADDR_VAR 0 9
36451: PUSH
36452: DOUBLE
36453: LD_INT 1
36455: DEC
36456: ST_TO_ADDR
36457: LD_VAR 0 14
36461: PUSH
36462: FOR_TO
36463: IFFALSE 37139
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36465: LD_ADDR_VAR 0 13
36469: PUSH
36470: LD_VAR 0 14
36474: PUSH
36475: LD_VAR 0 9
36479: ARRAY
36480: PUSH
36481: LD_INT 1
36483: ARRAY
36484: PPUSH
36485: LD_VAR 0 14
36489: PUSH
36490: LD_VAR 0 9
36494: ARRAY
36495: PUSH
36496: LD_INT 2
36498: ARRAY
36499: PPUSH
36500: CALL_OW 428
36504: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36505: LD_VAR 0 14
36509: PUSH
36510: LD_VAR 0 9
36514: ARRAY
36515: PUSH
36516: LD_INT 1
36518: ARRAY
36519: PPUSH
36520: LD_VAR 0 14
36524: PUSH
36525: LD_VAR 0 9
36529: ARRAY
36530: PUSH
36531: LD_INT 2
36533: ARRAY
36534: PPUSH
36535: CALL_OW 351
36539: PUSH
36540: LD_VAR 0 14
36544: PUSH
36545: LD_VAR 0 9
36549: ARRAY
36550: PUSH
36551: LD_INT 1
36553: ARRAY
36554: PPUSH
36555: LD_VAR 0 14
36559: PUSH
36560: LD_VAR 0 9
36564: ARRAY
36565: PUSH
36566: LD_INT 2
36568: ARRAY
36569: PPUSH
36570: CALL_OW 488
36574: NOT
36575: OR
36576: PUSH
36577: LD_VAR 0 13
36581: PPUSH
36582: CALL_OW 247
36586: PUSH
36587: LD_INT 3
36589: EQUAL
36590: OR
36591: IFFALSE 36597
// exit ;
36593: POP
36594: POP
36595: GO 37141
// if not tmp then
36597: LD_VAR 0 13
36601: NOT
36602: IFFALSE 36606
// continue ;
36604: GO 36462
// result := true ;
36606: LD_ADDR_VAR 0 8
36610: PUSH
36611: LD_INT 1
36613: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36614: LD_VAR 0 6
36618: PUSH
36619: LD_VAR 0 13
36623: PPUSH
36624: CALL_OW 247
36628: PUSH
36629: LD_INT 2
36631: EQUAL
36632: AND
36633: PUSH
36634: LD_VAR 0 13
36638: PPUSH
36639: CALL_OW 263
36643: PUSH
36644: LD_INT 1
36646: EQUAL
36647: AND
36648: IFFALSE 36812
// begin if IsDrivenBy ( tmp ) then
36650: LD_VAR 0 13
36654: PPUSH
36655: CALL_OW 311
36659: IFFALSE 36663
// continue ;
36661: GO 36462
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36663: LD_VAR 0 6
36667: PPUSH
36668: LD_INT 3
36670: PUSH
36671: LD_INT 60
36673: PUSH
36674: EMPTY
36675: LIST
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 3
36683: PUSH
36684: LD_INT 55
36686: PUSH
36687: EMPTY
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PPUSH
36698: CALL_OW 72
36702: IFFALSE 36810
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36704: LD_ADDR_VAR 0 18
36708: PUSH
36709: LD_VAR 0 6
36713: PPUSH
36714: LD_INT 3
36716: PUSH
36717: LD_INT 60
36719: PUSH
36720: EMPTY
36721: LIST
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 55
36732: PUSH
36733: EMPTY
36734: LIST
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PPUSH
36744: CALL_OW 72
36748: PUSH
36749: LD_INT 1
36751: ARRAY
36752: ST_TO_ADDR
// if IsInUnit ( driver ) then
36753: LD_VAR 0 18
36757: PPUSH
36758: CALL_OW 310
36762: IFFALSE 36773
// ComExit ( driver ) ;
36764: LD_VAR 0 18
36768: PPUSH
36769: CALL 61562 0 1
// AddComEnterUnit ( driver , tmp ) ;
36773: LD_VAR 0 18
36777: PPUSH
36778: LD_VAR 0 13
36782: PPUSH
36783: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36787: LD_VAR 0 18
36791: PPUSH
36792: LD_VAR 0 7
36796: PPUSH
36797: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36801: LD_VAR 0 18
36805: PPUSH
36806: CALL_OW 181
// end ; continue ;
36810: GO 36462
// end ; if not cleaners or not tmp in cleaners then
36812: LD_VAR 0 6
36816: NOT
36817: PUSH
36818: LD_VAR 0 13
36822: PUSH
36823: LD_VAR 0 6
36827: IN
36828: NOT
36829: OR
36830: IFFALSE 37137
// begin if dep then
36832: LD_VAR 0 17
36836: IFFALSE 36972
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36838: LD_ADDR_VAR 0 16
36842: PUSH
36843: LD_VAR 0 17
36847: PUSH
36848: LD_INT 1
36850: ARRAY
36851: PPUSH
36852: CALL_OW 250
36856: PPUSH
36857: LD_VAR 0 17
36861: PUSH
36862: LD_INT 1
36864: ARRAY
36865: PPUSH
36866: CALL_OW 254
36870: PPUSH
36871: LD_INT 5
36873: PPUSH
36874: CALL_OW 272
36878: PUSH
36879: LD_VAR 0 17
36883: PUSH
36884: LD_INT 1
36886: ARRAY
36887: PPUSH
36888: CALL_OW 251
36892: PPUSH
36893: LD_VAR 0 17
36897: PUSH
36898: LD_INT 1
36900: ARRAY
36901: PPUSH
36902: CALL_OW 254
36906: PPUSH
36907: LD_INT 5
36909: PPUSH
36910: CALL_OW 273
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36919: LD_VAR 0 16
36923: PUSH
36924: LD_INT 1
36926: ARRAY
36927: PPUSH
36928: LD_VAR 0 16
36932: PUSH
36933: LD_INT 2
36935: ARRAY
36936: PPUSH
36937: CALL_OW 488
36941: IFFALSE 36972
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36943: LD_VAR 0 13
36947: PPUSH
36948: LD_VAR 0 16
36952: PUSH
36953: LD_INT 1
36955: ARRAY
36956: PPUSH
36957: LD_VAR 0 16
36961: PUSH
36962: LD_INT 2
36964: ARRAY
36965: PPUSH
36966: CALL_OW 111
// continue ;
36970: GO 36462
// end ; end ; r := GetDir ( tmp ) ;
36972: LD_ADDR_VAR 0 15
36976: PUSH
36977: LD_VAR 0 13
36981: PPUSH
36982: CALL_OW 254
36986: ST_TO_ADDR
// if r = 5 then
36987: LD_VAR 0 15
36991: PUSH
36992: LD_INT 5
36994: EQUAL
36995: IFFALSE 37005
// r := 0 ;
36997: LD_ADDR_VAR 0 15
37001: PUSH
37002: LD_INT 0
37004: ST_TO_ADDR
// for j = r to 5 do
37005: LD_ADDR_VAR 0 10
37009: PUSH
37010: DOUBLE
37011: LD_VAR 0 15
37015: DEC
37016: ST_TO_ADDR
37017: LD_INT 5
37019: PUSH
37020: FOR_TO
37021: IFFALSE 37135
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37023: LD_ADDR_VAR 0 11
37027: PUSH
37028: LD_VAR 0 13
37032: PPUSH
37033: CALL_OW 250
37037: PPUSH
37038: LD_VAR 0 10
37042: PPUSH
37043: LD_INT 2
37045: PPUSH
37046: CALL_OW 272
37050: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37051: LD_ADDR_VAR 0 12
37055: PUSH
37056: LD_VAR 0 13
37060: PPUSH
37061: CALL_OW 251
37065: PPUSH
37066: LD_VAR 0 10
37070: PPUSH
37071: LD_INT 2
37073: PPUSH
37074: CALL_OW 273
37078: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37079: LD_VAR 0 11
37083: PPUSH
37084: LD_VAR 0 12
37088: PPUSH
37089: CALL_OW 488
37093: PUSH
37094: LD_VAR 0 11
37098: PPUSH
37099: LD_VAR 0 12
37103: PPUSH
37104: CALL_OW 428
37108: NOT
37109: AND
37110: IFFALSE 37133
// begin ComMoveXY ( tmp , _x , _y ) ;
37112: LD_VAR 0 13
37116: PPUSH
37117: LD_VAR 0 11
37121: PPUSH
37122: LD_VAR 0 12
37126: PPUSH
37127: CALL_OW 111
// break ;
37131: GO 37135
// end ; end ;
37133: GO 37020
37135: POP
37136: POP
// end ; end ;
37137: GO 36462
37139: POP
37140: POP
// end ;
37141: LD_VAR 0 8
37145: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37146: LD_INT 0
37148: PPUSH
// result := true ;
37149: LD_ADDR_VAR 0 3
37153: PUSH
37154: LD_INT 1
37156: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37157: LD_VAR 0 2
37161: PUSH
37162: LD_INT 24
37164: DOUBLE
37165: EQUAL
37166: IFTRUE 37176
37168: LD_INT 33
37170: DOUBLE
37171: EQUAL
37172: IFTRUE 37176
37174: GO 37201
37176: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37177: LD_ADDR_VAR 0 3
37181: PUSH
37182: LD_INT 32
37184: PPUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL_OW 321
37194: PUSH
37195: LD_INT 2
37197: EQUAL
37198: ST_TO_ADDR
37199: GO 37521
37201: LD_INT 20
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37234
37209: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_INT 6
37217: PPUSH
37218: LD_VAR 0 1
37222: PPUSH
37223: CALL_OW 321
37227: PUSH
37228: LD_INT 2
37230: EQUAL
37231: ST_TO_ADDR
37232: GO 37521
37234: LD_INT 22
37236: DOUBLE
37237: EQUAL
37238: IFTRUE 37248
37240: LD_INT 36
37242: DOUBLE
37243: EQUAL
37244: IFTRUE 37248
37246: GO 37273
37248: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_INT 15
37256: PPUSH
37257: LD_VAR 0 1
37261: PPUSH
37262: CALL_OW 321
37266: PUSH
37267: LD_INT 2
37269: EQUAL
37270: ST_TO_ADDR
37271: GO 37521
37273: LD_INT 30
37275: DOUBLE
37276: EQUAL
37277: IFTRUE 37281
37279: GO 37306
37281: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_INT 20
37289: PPUSH
37290: LD_VAR 0 1
37294: PPUSH
37295: CALL_OW 321
37299: PUSH
37300: LD_INT 2
37302: EQUAL
37303: ST_TO_ADDR
37304: GO 37521
37306: LD_INT 28
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37320
37312: LD_INT 21
37314: DOUBLE
37315: EQUAL
37316: IFTRUE 37320
37318: GO 37345
37320: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37321: LD_ADDR_VAR 0 3
37325: PUSH
37326: LD_INT 21
37328: PPUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 321
37338: PUSH
37339: LD_INT 2
37341: EQUAL
37342: ST_TO_ADDR
37343: GO 37521
37345: LD_INT 16
37347: DOUBLE
37348: EQUAL
37349: IFTRUE 37353
37351: GO 37380
37353: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37354: LD_ADDR_VAR 0 3
37358: PUSH
37359: LD_EXP 109
37363: PPUSH
37364: LD_VAR 0 1
37368: PPUSH
37369: CALL_OW 321
37373: PUSH
37374: LD_INT 2
37376: EQUAL
37377: ST_TO_ADDR
37378: GO 37521
37380: LD_INT 19
37382: DOUBLE
37383: EQUAL
37384: IFTRUE 37394
37386: LD_INT 23
37388: DOUBLE
37389: EQUAL
37390: IFTRUE 37394
37392: GO 37421
37394: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37395: LD_ADDR_VAR 0 3
37399: PUSH
37400: LD_EXP 108
37404: PPUSH
37405: LD_VAR 0 1
37409: PPUSH
37410: CALL_OW 321
37414: PUSH
37415: LD_INT 2
37417: EQUAL
37418: ST_TO_ADDR
37419: GO 37521
37421: LD_INT 17
37423: DOUBLE
37424: EQUAL
37425: IFTRUE 37429
37427: GO 37454
37429: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37430: LD_ADDR_VAR 0 3
37434: PUSH
37435: LD_INT 39
37437: PPUSH
37438: LD_VAR 0 1
37442: PPUSH
37443: CALL_OW 321
37447: PUSH
37448: LD_INT 2
37450: EQUAL
37451: ST_TO_ADDR
37452: GO 37521
37454: LD_INT 18
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37487
37462: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37463: LD_ADDR_VAR 0 3
37467: PUSH
37468: LD_INT 40
37470: PPUSH
37471: LD_VAR 0 1
37475: PPUSH
37476: CALL_OW 321
37480: PUSH
37481: LD_INT 2
37483: EQUAL
37484: ST_TO_ADDR
37485: GO 37521
37487: LD_INT 27
37489: DOUBLE
37490: EQUAL
37491: IFTRUE 37495
37493: GO 37520
37495: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37496: LD_ADDR_VAR 0 3
37500: PUSH
37501: LD_INT 35
37503: PPUSH
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 321
37513: PUSH
37514: LD_INT 2
37516: EQUAL
37517: ST_TO_ADDR
37518: GO 37521
37520: POP
// end ;
37521: LD_VAR 0 3
37525: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37526: LD_INT 0
37528: PPUSH
37529: PPUSH
37530: PPUSH
37531: PPUSH
37532: PPUSH
37533: PPUSH
37534: PPUSH
37535: PPUSH
37536: PPUSH
37537: PPUSH
37538: PPUSH
// result := false ;
37539: LD_ADDR_VAR 0 6
37543: PUSH
37544: LD_INT 0
37546: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37547: LD_VAR 0 1
37551: NOT
37552: PUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: CALL_OW 266
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: IN
37573: NOT
37574: OR
37575: PUSH
37576: LD_VAR 0 2
37580: NOT
37581: OR
37582: PUSH
37583: LD_VAR 0 5
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: LD_INT 4
37602: PUSH
37603: LD_INT 5
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: IN
37614: NOT
37615: OR
37616: PUSH
37617: LD_VAR 0 3
37621: PPUSH
37622: LD_VAR 0 4
37626: PPUSH
37627: CALL_OW 488
37631: NOT
37632: OR
37633: IFFALSE 37637
// exit ;
37635: GO 38373
// side := GetSide ( depot ) ;
37637: LD_ADDR_VAR 0 9
37641: PUSH
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 255
37651: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37652: LD_VAR 0 9
37656: PPUSH
37657: LD_VAR 0 2
37661: PPUSH
37662: CALL 37146 0 2
37666: NOT
37667: IFFALSE 37671
// exit ;
37669: GO 38373
// pom := GetBase ( depot ) ;
37671: LD_ADDR_VAR 0 10
37675: PUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: CALL_OW 274
37685: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37686: LD_ADDR_VAR 0 11
37690: PUSH
37691: LD_VAR 0 2
37695: PPUSH
37696: LD_VAR 0 1
37700: PPUSH
37701: CALL_OW 248
37705: PPUSH
37706: CALL_OW 450
37710: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37711: LD_VAR 0 10
37715: PPUSH
37716: LD_INT 1
37718: PPUSH
37719: CALL_OW 275
37723: PUSH
37724: LD_VAR 0 11
37728: PUSH
37729: LD_INT 1
37731: ARRAY
37732: GREATEREQUAL
37733: PUSH
37734: LD_VAR 0 10
37738: PPUSH
37739: LD_INT 2
37741: PPUSH
37742: CALL_OW 275
37746: PUSH
37747: LD_VAR 0 11
37751: PUSH
37752: LD_INT 2
37754: ARRAY
37755: GREATEREQUAL
37756: AND
37757: PUSH
37758: LD_VAR 0 10
37762: PPUSH
37763: LD_INT 3
37765: PPUSH
37766: CALL_OW 275
37770: PUSH
37771: LD_VAR 0 11
37775: PUSH
37776: LD_INT 3
37778: ARRAY
37779: GREATEREQUAL
37780: AND
37781: NOT
37782: IFFALSE 37786
// exit ;
37784: GO 38373
// if GetBType ( depot ) = b_depot then
37786: LD_VAR 0 1
37790: PPUSH
37791: CALL_OW 266
37795: PUSH
37796: LD_INT 0
37798: EQUAL
37799: IFFALSE 37811
// dist := 28 else
37801: LD_ADDR_VAR 0 14
37805: PUSH
37806: LD_INT 28
37808: ST_TO_ADDR
37809: GO 37819
// dist := 36 ;
37811: LD_ADDR_VAR 0 14
37815: PUSH
37816: LD_INT 36
37818: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37819: LD_VAR 0 1
37823: PPUSH
37824: LD_VAR 0 3
37828: PPUSH
37829: LD_VAR 0 4
37833: PPUSH
37834: CALL_OW 297
37838: PUSH
37839: LD_VAR 0 14
37843: GREATER
37844: IFFALSE 37848
// exit ;
37846: GO 38373
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37848: LD_ADDR_VAR 0 12
37852: PUSH
37853: LD_VAR 0 2
37857: PPUSH
37858: LD_VAR 0 3
37862: PPUSH
37863: LD_VAR 0 4
37867: PPUSH
37868: LD_VAR 0 5
37872: PPUSH
37873: LD_VAR 0 1
37877: PPUSH
37878: CALL_OW 248
37882: PPUSH
37883: LD_INT 0
37885: PPUSH
37886: CALL 38378 0 6
37890: ST_TO_ADDR
// if not hexes then
37891: LD_VAR 0 12
37895: NOT
37896: IFFALSE 37900
// exit ;
37898: GO 38373
// hex := GetHexInfo ( x , y ) ;
37900: LD_ADDR_VAR 0 15
37904: PUSH
37905: LD_VAR 0 3
37909: PPUSH
37910: LD_VAR 0 4
37914: PPUSH
37915: CALL_OW 546
37919: ST_TO_ADDR
// if hex [ 1 ] then
37920: LD_VAR 0 15
37924: PUSH
37925: LD_INT 1
37927: ARRAY
37928: IFFALSE 37932
// exit ;
37930: GO 38373
// height := hex [ 2 ] ;
37932: LD_ADDR_VAR 0 13
37936: PUSH
37937: LD_VAR 0 15
37941: PUSH
37942: LD_INT 2
37944: ARRAY
37945: ST_TO_ADDR
// for i = 1 to hexes do
37946: LD_ADDR_VAR 0 7
37950: PUSH
37951: DOUBLE
37952: LD_INT 1
37954: DEC
37955: ST_TO_ADDR
37956: LD_VAR 0 12
37960: PUSH
37961: FOR_TO
37962: IFFALSE 38292
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37964: LD_VAR 0 12
37968: PUSH
37969: LD_VAR 0 7
37973: ARRAY
37974: PUSH
37975: LD_INT 1
37977: ARRAY
37978: PPUSH
37979: LD_VAR 0 12
37983: PUSH
37984: LD_VAR 0 7
37988: ARRAY
37989: PUSH
37990: LD_INT 2
37992: ARRAY
37993: PPUSH
37994: CALL_OW 488
37998: NOT
37999: PUSH
38000: LD_VAR 0 12
38004: PUSH
38005: LD_VAR 0 7
38009: ARRAY
38010: PUSH
38011: LD_INT 1
38013: ARRAY
38014: PPUSH
38015: LD_VAR 0 12
38019: PUSH
38020: LD_VAR 0 7
38024: ARRAY
38025: PUSH
38026: LD_INT 2
38028: ARRAY
38029: PPUSH
38030: CALL_OW 428
38034: PUSH
38035: LD_INT 0
38037: GREATER
38038: OR
38039: PUSH
38040: LD_VAR 0 12
38044: PUSH
38045: LD_VAR 0 7
38049: ARRAY
38050: PUSH
38051: LD_INT 1
38053: ARRAY
38054: PPUSH
38055: LD_VAR 0 12
38059: PUSH
38060: LD_VAR 0 7
38064: ARRAY
38065: PUSH
38066: LD_INT 2
38068: ARRAY
38069: PPUSH
38070: CALL_OW 351
38074: OR
38075: IFFALSE 38081
// exit ;
38077: POP
38078: POP
38079: GO 38373
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38081: LD_ADDR_VAR 0 8
38085: PUSH
38086: LD_VAR 0 12
38090: PUSH
38091: LD_VAR 0 7
38095: ARRAY
38096: PUSH
38097: LD_INT 1
38099: ARRAY
38100: PPUSH
38101: LD_VAR 0 12
38105: PUSH
38106: LD_VAR 0 7
38110: ARRAY
38111: PUSH
38112: LD_INT 2
38114: ARRAY
38115: PPUSH
38116: CALL_OW 546
38120: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38121: LD_VAR 0 8
38125: PUSH
38126: LD_INT 1
38128: ARRAY
38129: PUSH
38130: LD_VAR 0 8
38134: PUSH
38135: LD_INT 2
38137: ARRAY
38138: PUSH
38139: LD_VAR 0 13
38143: PUSH
38144: LD_INT 2
38146: PLUS
38147: GREATER
38148: OR
38149: PUSH
38150: LD_VAR 0 8
38154: PUSH
38155: LD_INT 2
38157: ARRAY
38158: PUSH
38159: LD_VAR 0 13
38163: PUSH
38164: LD_INT 2
38166: MINUS
38167: LESS
38168: OR
38169: PUSH
38170: LD_VAR 0 8
38174: PUSH
38175: LD_INT 3
38177: ARRAY
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 8
38184: PUSH
38185: LD_INT 9
38187: PUSH
38188: LD_INT 10
38190: PUSH
38191: LD_INT 11
38193: PUSH
38194: LD_INT 12
38196: PUSH
38197: LD_INT 13
38199: PUSH
38200: LD_INT 16
38202: PUSH
38203: LD_INT 17
38205: PUSH
38206: LD_INT 18
38208: PUSH
38209: LD_INT 19
38211: PUSH
38212: LD_INT 20
38214: PUSH
38215: LD_INT 21
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: IN
38233: NOT
38234: OR
38235: PUSH
38236: LD_VAR 0 8
38240: PUSH
38241: LD_INT 5
38243: ARRAY
38244: NOT
38245: OR
38246: PUSH
38247: LD_VAR 0 8
38251: PUSH
38252: LD_INT 6
38254: ARRAY
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: LD_INT 7
38264: PUSH
38265: LD_INT 9
38267: PUSH
38268: LD_INT 10
38270: PUSH
38271: LD_INT 11
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: IN
38282: NOT
38283: OR
38284: IFFALSE 38290
// exit ;
38286: POP
38287: POP
38288: GO 38373
// end ;
38290: GO 37961
38292: POP
38293: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38294: LD_VAR 0 9
38298: PPUSH
38299: LD_VAR 0 3
38303: PPUSH
38304: LD_VAR 0 4
38308: PPUSH
38309: LD_INT 20
38311: PPUSH
38312: CALL 30319 0 4
38316: PUSH
38317: LD_INT 4
38319: ARRAY
38320: IFFALSE 38324
// exit ;
38322: GO 38373
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38324: LD_VAR 0 2
38328: PUSH
38329: LD_INT 29
38331: PUSH
38332: LD_INT 30
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: IN
38339: PUSH
38340: LD_VAR 0 3
38344: PPUSH
38345: LD_VAR 0 4
38349: PPUSH
38350: LD_VAR 0 9
38354: PPUSH
38355: CALL_OW 440
38359: NOT
38360: AND
38361: IFFALSE 38365
// exit ;
38363: GO 38373
// result := true ;
38365: LD_ADDR_VAR 0 6
38369: PUSH
38370: LD_INT 1
38372: ST_TO_ADDR
// end ;
38373: LD_VAR 0 6
38377: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38378: LD_INT 0
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
// result = [ ] ;
38438: LD_ADDR_VAR 0 7
38442: PUSH
38443: EMPTY
38444: ST_TO_ADDR
// temp_list = [ ] ;
38445: LD_ADDR_VAR 0 9
38449: PUSH
38450: EMPTY
38451: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38452: LD_VAR 0 4
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 3
38468: PUSH
38469: LD_INT 4
38471: PUSH
38472: LD_INT 5
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: IN
38483: NOT
38484: PUSH
38485: LD_VAR 0 1
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: IN
38500: PUSH
38501: LD_VAR 0 5
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: IN
38520: NOT
38521: AND
38522: OR
38523: IFFALSE 38527
// exit ;
38525: GO 56918
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38527: LD_VAR 0 1
38531: PUSH
38532: LD_INT 6
38534: PUSH
38535: LD_INT 7
38537: PUSH
38538: LD_INT 8
38540: PUSH
38541: LD_INT 13
38543: PUSH
38544: LD_INT 12
38546: PUSH
38547: LD_INT 15
38549: PUSH
38550: LD_INT 11
38552: PUSH
38553: LD_INT 14
38555: PUSH
38556: LD_INT 10
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: IN
38570: IFFALSE 38580
// btype = b_lab ;
38572: LD_ADDR_VAR 0 1
38576: PUSH
38577: LD_INT 6
38579: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38580: LD_VAR 0 6
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: IN
38599: NOT
38600: PUSH
38601: LD_VAR 0 1
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: LD_INT 3
38617: PUSH
38618: LD_INT 6
38620: PUSH
38621: LD_INT 36
38623: PUSH
38624: LD_INT 4
38626: PUSH
38627: LD_INT 5
38629: PUSH
38630: LD_INT 31
38632: PUSH
38633: LD_INT 32
38635: PUSH
38636: LD_INT 33
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: IN
38652: NOT
38653: PUSH
38654: LD_VAR 0 6
38658: PUSH
38659: LD_INT 1
38661: EQUAL
38662: AND
38663: OR
38664: PUSH
38665: LD_VAR 0 1
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 3
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: IN
38680: NOT
38681: PUSH
38682: LD_VAR 0 6
38686: PUSH
38687: LD_INT 2
38689: EQUAL
38690: AND
38691: OR
38692: IFFALSE 38702
// mode = 0 ;
38694: LD_ADDR_VAR 0 6
38698: PUSH
38699: LD_INT 0
38701: ST_TO_ADDR
// case mode of 0 :
38702: LD_VAR 0 6
38706: PUSH
38707: LD_INT 0
38709: DOUBLE
38710: EQUAL
38711: IFTRUE 38715
38713: GO 50168
38715: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38716: LD_ADDR_VAR 0 11
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38909: LD_ADDR_VAR 0 12
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 2
39043: NEG
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 2
39055: NEG
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 3
39066: NEG
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 3
39077: NEG
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39105: LD_ADDR_VAR 0 13
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: NEG
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: LD_INT 2
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: NEG
39253: PUSH
39254: LD_INT 3
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 3
39264: NEG
39265: PUSH
39266: LD_INT 2
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 3
39276: NEG
39277: PUSH
39278: LD_INT 3
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39304: LD_ADDR_VAR 0 14
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 3
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 3
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39500: LD_ADDR_VAR 0 15
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 3
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39693: LD_ADDR_VAR 0 16
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 3
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 3
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39886: LD_ADDR_VAR 0 17
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: NEG
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40116: LD_ADDR_VAR 0 18
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40346: LD_ADDR_VAR 0 19
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40576: LD_ADDR_VAR 0 20
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: LD_INT 2
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40806: LD_ADDR_VAR 0 21
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: NEG
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: NEG
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41036: LD_ADDR_VAR 0 22
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 2
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 2
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: LD_INT 2
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41266: LD_ADDR_VAR 0 23
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 2
41442: NEG
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: LD_INT 3
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: LD_INT 3
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41546: LD_ADDR_VAR 0 24
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: LD_INT 2
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 2
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 2
41722: NEG
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 3
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 3
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41822: LD_ADDR_VAR 0 25
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 3
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 3
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: LD_INT 3
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42096: LD_ADDR_VAR 0 26
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: LD_INT 2
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: LD_INT 3
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 3
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42372: LD_ADDR_VAR 0 27
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 3
42605: NEG
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 3
42617: NEG
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42652: LD_ADDR_VAR 0 28
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 3
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 3
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 3
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42934: LD_ADDR_VAR 0 29
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 3
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: NEG
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43213: LD_ADDR_VAR 0 30
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 3
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: LD_INT 3
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43491: LD_ADDR_VAR 0 31
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: LD_INT 3
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 3
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 3
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 3
43734: NEG
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43769: LD_ADDR_VAR 0 32
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 3
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 3
44012: NEG
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44047: LD_ADDR_VAR 0 33
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: LD_INT 3
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 3
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 3
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 3
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44326: LD_ADDR_VAR 0 34
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 3
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 3
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 3
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 3
44571: NEG
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44606: LD_ADDR_VAR 0 35
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44718: LD_ADDR_VAR 0 36
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44830: LD_ADDR_VAR 0 37
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44942: LD_ADDR_VAR 0 38
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45054: LD_ADDR_VAR 0 39
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45166: LD_ADDR_VAR 0 40
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45278: LD_ADDR_VAR 0 41
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 3
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 3
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 3
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 3
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45628: LD_ADDR_VAR 0 42
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 3
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 3
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 3
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: PUSH
45875: LD_INT 3
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 3
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 3
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 3
45925: NEG
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45978: LD_ADDR_VAR 0 43
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 3
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 3
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 3
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: NEG
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46326: LD_ADDR_VAR 0 44
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 3
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 3
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 3
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 3
46635: NEG
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46676: LD_ADDR_VAR 0 45
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 3
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 3
46922: PUSH
46923: LD_INT 3
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 3
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 3
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47026: LD_ADDR_VAR 0 46
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 3
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 3
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 3
47322: NEG
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 3
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47374: LD_ADDR_VAR 0 47
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47525: LD_ADDR_VAR 0 48
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47672: LD_ADDR_VAR 0 49
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47816: LD_ADDR_VAR 0 50
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47960: LD_ADDR_VAR 0 51
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48107: LD_ADDR_VAR 0 52
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48258: LD_ADDR_VAR 0 53
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48488: LD_ADDR_VAR 0 54
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48718: LD_ADDR_VAR 0 55
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48948: LD_ADDR_VAR 0 56
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49178: LD_ADDR_VAR 0 57
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49408: LD_ADDR_VAR 0 58
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49638: LD_ADDR_VAR 0 59
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49726: LD_ADDR_VAR 0 60
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49814: LD_ADDR_VAR 0 61
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49902: LD_ADDR_VAR 0 62
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49990: LD_ADDR_VAR 0 63
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50078: LD_ADDR_VAR 0 64
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// end ; 1 :
50166: GO 56063
50168: LD_INT 1
50170: DOUBLE
50171: EQUAL
50172: IFTRUE 50176
50174: GO 52799
50176: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50177: LD_ADDR_VAR 0 11
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 3
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50221: LD_ADDR_VAR 0 12
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50262: LD_ADDR_VAR 0 13
50266: PUSH
50267: LD_INT 3
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 3
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: LIST
50301: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50302: LD_ADDR_VAR 0 14
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 3
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: LIST
50342: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50343: LD_ADDR_VAR 0 15
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: NEG
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50387: LD_ADDR_VAR 0 16
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: NEG
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50433: LD_ADDR_VAR 0 17
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 3
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50477: LD_ADDR_VAR 0 18
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50518: LD_ADDR_VAR 0 19
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: LD_INT 3
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50558: LD_ADDR_VAR 0 20
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50599: LD_ADDR_VAR 0 21
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: LIST
50642: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50643: LD_ADDR_VAR 0 22
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 3
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: NEG
50675: PUSH
50676: LD_INT 3
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50689: LD_ADDR_VAR 0 23
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 4
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: LIST
50732: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50733: LD_ADDR_VAR 0 24
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 4
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50774: LD_ADDR_VAR 0 25
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 4
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 4
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: LIST
50813: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50814: LD_ADDR_VAR 0 26
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 4
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: LIST
50854: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50855: LD_ADDR_VAR 0 27
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 4
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50899: LD_ADDR_VAR 0 28
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 4
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 4
50930: NEG
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50945: LD_ADDR_VAR 0 29
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 4
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 4
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: LD_INT 5
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 5
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 4
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 6
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 6
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 5
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51100: LD_ADDR_VAR 0 30
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 4
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 4
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 4
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 5
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 5
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 5
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 6
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 6
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51243: LD_ADDR_VAR 0 31
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 4
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 4
51290: PUSH
51291: LD_INT 4
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 5
51310: PUSH
51311: LD_INT 4
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 5
51320: PUSH
51321: LD_INT 5
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: LD_INT 5
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 6
51340: PUSH
51341: LD_INT 5
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 6
51350: PUSH
51351: LD_INT 6
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 5
51360: PUSH
51361: LD_INT 6
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51382: LD_ADDR_VAR 0 32
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 3
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 4
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 4
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 5
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 5
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 4
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 6
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 6
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 5
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51525: LD_ADDR_VAR 0 33
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: NEG
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 3
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 4
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 4
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 4
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 5
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 5
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 5
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 6
51645: NEG
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 6
51656: NEG
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51680: LD_ADDR_VAR 0 34
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 3
51723: NEG
51724: PUSH
51725: LD_INT 4
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 4
51735: NEG
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 4
51747: NEG
51748: PUSH
51749: LD_INT 4
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: LD_INT 5
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 5
51771: NEG
51772: PUSH
51773: LD_INT 4
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 5
51783: NEG
51784: PUSH
51785: LD_INT 5
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 5
51795: NEG
51796: PUSH
51797: LD_INT 6
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 6
51807: NEG
51808: PUSH
51809: LD_INT 5
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 6
51819: NEG
51820: PUSH
51821: LD_INT 6
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51843: LD_ADDR_VAR 0 41
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 3
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51887: LD_ADDR_VAR 0 42
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51928: LD_ADDR_VAR 0 43
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51968: LD_ADDR_VAR 0 44
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: LIST
52008: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52009: LD_ADDR_VAR 0 45
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52053: LD_ADDR_VAR 0 46
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: LD_INT 3
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52099: LD_ADDR_VAR 0 47
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52132: LD_ADDR_VAR 0 48
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52163: LD_ADDR_VAR 0 49
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52192: LD_ADDR_VAR 0 50
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52221: LD_ADDR_VAR 0 51
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52252: LD_ADDR_VAR 0 52
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52285: LD_ADDR_VAR 0 53
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52329: LD_ADDR_VAR 0 54
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52370: LD_ADDR_VAR 0 55
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52410: LD_ADDR_VAR 0 56
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52451: LD_ADDR_VAR 0 57
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52495: LD_ADDR_VAR 0 58
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 3
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52541: LD_ADDR_VAR 0 59
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52585: LD_ADDR_VAR 0 60
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52626: LD_ADDR_VAR 0 61
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52666: LD_ADDR_VAR 0 62
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52707: LD_ADDR_VAR 0 63
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52751: LD_ADDR_VAR 0 64
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: ST_TO_ADDR
// end ; 2 :
52797: GO 56063
52799: LD_INT 2
52801: DOUBLE
52802: EQUAL
52803: IFTRUE 52807
52805: GO 56062
52807: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52808: LD_ADDR_VAR 0 29
52812: PUSH
52813: LD_INT 4
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 4
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 5
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 5
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 4
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 5
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 4
52928: PUSH
52929: LD_INT 3
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 4
52938: PUSH
52939: LD_INT 4
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: LD_INT 4
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 3
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 4
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 4
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 4
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 4
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 5
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 5
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 4
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: LD_INT 3
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 5
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 4
53147: NEG
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 4
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 4
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 4
53193: NEG
53194: PUSH
53195: LD_INT 4
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 4
53205: NEG
53206: PUSH
53207: LD_INT 5
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: LD_INT 4
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 4
53241: NEG
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 5
53253: NEG
53254: PUSH
53255: LD_INT 4
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 5
53265: NEG
53266: PUSH
53267: LD_INT 5
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: LD_INT 5
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 5
53289: NEG
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53346: LD_ADDR_VAR 0 30
53350: PUSH
53351: LD_INT 4
53353: PUSH
53354: LD_INT 4
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 4
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 5
53373: PUSH
53374: LD_INT 4
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 5
53383: PUSH
53384: LD_INT 5
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 4
53393: PUSH
53394: LD_INT 5
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 3
53403: PUSH
53404: LD_INT 4
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 5
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 5
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 4
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 4
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: LD_INT 4
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 4
53536: NEG
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 4
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 4
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 5
53592: NEG
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 5
53603: NEG
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 5
53615: NEG
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: LD_INT 4
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 4
53698: NEG
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 4
53710: NEG
53711: PUSH
53712: LD_INT 4
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: LD_INT 4
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 4
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 4
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 5
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: LD_INT 4
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 3
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 4
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 5
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 5
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53893: LD_ADDR_VAR 0 31
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 4
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 4
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: LD_INT 5
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 5
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 4
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 3
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 5
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 4
54049: NEG
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 4
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 4
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 4
54095: NEG
54096: PUSH
54097: LD_INT 4
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 4
54107: NEG
54108: PUSH
54109: LD_INT 5
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: LD_INT 4
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 4
54143: NEG
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 5
54155: NEG
54156: PUSH
54157: LD_INT 4
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 5
54167: NEG
54168: PUSH
54169: LD_INT 5
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: LD_INT 5
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 5
54191: NEG
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 3
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 4
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 4
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: LD_INT 4
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 4
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 5
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 5
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 4
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 3
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 5
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54443: LD_ADDR_VAR 0 32
54447: PUSH
54448: LD_INT 4
54450: NEG
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 4
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 4
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 5
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 5
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 5
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: NEG
54565: PUSH
54566: LD_INT 4
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 4
54612: NEG
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 4
54624: NEG
54625: PUSH
54626: LD_INT 4
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 4
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 5
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 4
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 5
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 5
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 4
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 4
54855: PUSH
54856: LD_INT 4
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 4
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: PUSH
54876: LD_INT 4
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 5
54885: PUSH
54886: LD_INT 5
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 4
54895: PUSH
54896: LD_INT 5
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: LD_INT 4
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: LD_INT 3
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 5
54925: PUSH
54926: LD_INT 3
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: PUSH
54936: LD_INT 5
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54990: LD_ADDR_VAR 0 33
54994: PUSH
54995: LD_INT 4
54997: NEG
54998: PUSH
54999: LD_INT 4
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 4
55009: NEG
55010: PUSH
55011: LD_INT 5
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: LD_INT 4
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: LD_INT 3
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 5
55057: NEG
55058: PUSH
55059: LD_INT 4
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 5
55069: NEG
55070: PUSH
55071: LD_INT 5
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: LD_INT 5
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 5
55093: NEG
55094: PUSH
55095: LD_INT 3
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 4
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 3
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 4
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: LD_INT 4
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 4
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 4
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 5
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 5
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 4
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 5
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 3
55300: PUSH
55301: LD_INT 3
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 4
55330: PUSH
55331: LD_INT 4
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: LD_INT 4
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 4
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 4
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 4
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 3
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 4
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 5
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 4
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: LD_INT 5
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55528: LD_ADDR_VAR 0 34
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 4
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 5
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 4
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: LD_INT 4
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 5
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: LD_INT 5
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 4
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 4
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 4
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 4
55730: PUSH
55731: LD_INT 4
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 4
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 5
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 5
55760: PUSH
55761: LD_INT 5
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 4
55770: PUSH
55771: LD_INT 5
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: LD_INT 4
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 3
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 5
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: LD_INT 5
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 4
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 4
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 4
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 4
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 5
55969: NEG
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 5
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 5
55992: NEG
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: NEG
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: ST_TO_ADDR
// end ; end ;
56060: GO 56063
56062: POP
// case btype of b_depot , b_warehouse :
56063: LD_VAR 0 1
56067: PUSH
56068: LD_INT 0
56070: DOUBLE
56071: EQUAL
56072: IFTRUE 56082
56074: LD_INT 1
56076: DOUBLE
56077: EQUAL
56078: IFTRUE 56082
56080: GO 56283
56082: POP
// case nation of nation_american :
56083: LD_VAR 0 5
56087: PUSH
56088: LD_INT 1
56090: DOUBLE
56091: EQUAL
56092: IFTRUE 56096
56094: GO 56152
56096: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56097: LD_ADDR_VAR 0 9
56101: PUSH
56102: LD_VAR 0 11
56106: PUSH
56107: LD_VAR 0 12
56111: PUSH
56112: LD_VAR 0 13
56116: PUSH
56117: LD_VAR 0 14
56121: PUSH
56122: LD_VAR 0 15
56126: PUSH
56127: LD_VAR 0 16
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: PUSH
56140: LD_VAR 0 4
56144: PUSH
56145: LD_INT 1
56147: PLUS
56148: ARRAY
56149: ST_TO_ADDR
56150: GO 56281
56152: LD_INT 2
56154: DOUBLE
56155: EQUAL
56156: IFTRUE 56160
56158: GO 56216
56160: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56161: LD_ADDR_VAR 0 9
56165: PUSH
56166: LD_VAR 0 17
56170: PUSH
56171: LD_VAR 0 18
56175: PUSH
56176: LD_VAR 0 19
56180: PUSH
56181: LD_VAR 0 20
56185: PUSH
56186: LD_VAR 0 21
56190: PUSH
56191: LD_VAR 0 22
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: PUSH
56204: LD_VAR 0 4
56208: PUSH
56209: LD_INT 1
56211: PLUS
56212: ARRAY
56213: ST_TO_ADDR
56214: GO 56281
56216: LD_INT 3
56218: DOUBLE
56219: EQUAL
56220: IFTRUE 56224
56222: GO 56280
56224: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56225: LD_ADDR_VAR 0 9
56229: PUSH
56230: LD_VAR 0 23
56234: PUSH
56235: LD_VAR 0 24
56239: PUSH
56240: LD_VAR 0 25
56244: PUSH
56245: LD_VAR 0 26
56249: PUSH
56250: LD_VAR 0 27
56254: PUSH
56255: LD_VAR 0 28
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: PUSH
56268: LD_VAR 0 4
56272: PUSH
56273: LD_INT 1
56275: PLUS
56276: ARRAY
56277: ST_TO_ADDR
56278: GO 56281
56280: POP
56281: GO 56836
56283: LD_INT 2
56285: DOUBLE
56286: EQUAL
56287: IFTRUE 56297
56289: LD_INT 3
56291: DOUBLE
56292: EQUAL
56293: IFTRUE 56297
56295: GO 56353
56297: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56298: LD_ADDR_VAR 0 9
56302: PUSH
56303: LD_VAR 0 29
56307: PUSH
56308: LD_VAR 0 30
56312: PUSH
56313: LD_VAR 0 31
56317: PUSH
56318: LD_VAR 0 32
56322: PUSH
56323: LD_VAR 0 33
56327: PUSH
56328: LD_VAR 0 34
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: PUSH
56341: LD_VAR 0 4
56345: PUSH
56346: LD_INT 1
56348: PLUS
56349: ARRAY
56350: ST_TO_ADDR
56351: GO 56836
56353: LD_INT 16
56355: DOUBLE
56356: EQUAL
56357: IFTRUE 56415
56359: LD_INT 17
56361: DOUBLE
56362: EQUAL
56363: IFTRUE 56415
56365: LD_INT 18
56367: DOUBLE
56368: EQUAL
56369: IFTRUE 56415
56371: LD_INT 19
56373: DOUBLE
56374: EQUAL
56375: IFTRUE 56415
56377: LD_INT 22
56379: DOUBLE
56380: EQUAL
56381: IFTRUE 56415
56383: LD_INT 20
56385: DOUBLE
56386: EQUAL
56387: IFTRUE 56415
56389: LD_INT 21
56391: DOUBLE
56392: EQUAL
56393: IFTRUE 56415
56395: LD_INT 23
56397: DOUBLE
56398: EQUAL
56399: IFTRUE 56415
56401: LD_INT 24
56403: DOUBLE
56404: EQUAL
56405: IFTRUE 56415
56407: LD_INT 25
56409: DOUBLE
56410: EQUAL
56411: IFTRUE 56415
56413: GO 56471
56415: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56416: LD_ADDR_VAR 0 9
56420: PUSH
56421: LD_VAR 0 35
56425: PUSH
56426: LD_VAR 0 36
56430: PUSH
56431: LD_VAR 0 37
56435: PUSH
56436: LD_VAR 0 38
56440: PUSH
56441: LD_VAR 0 39
56445: PUSH
56446: LD_VAR 0 40
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: PUSH
56459: LD_VAR 0 4
56463: PUSH
56464: LD_INT 1
56466: PLUS
56467: ARRAY
56468: ST_TO_ADDR
56469: GO 56836
56471: LD_INT 6
56473: DOUBLE
56474: EQUAL
56475: IFTRUE 56527
56477: LD_INT 7
56479: DOUBLE
56480: EQUAL
56481: IFTRUE 56527
56483: LD_INT 8
56485: DOUBLE
56486: EQUAL
56487: IFTRUE 56527
56489: LD_INT 13
56491: DOUBLE
56492: EQUAL
56493: IFTRUE 56527
56495: LD_INT 12
56497: DOUBLE
56498: EQUAL
56499: IFTRUE 56527
56501: LD_INT 15
56503: DOUBLE
56504: EQUAL
56505: IFTRUE 56527
56507: LD_INT 11
56509: DOUBLE
56510: EQUAL
56511: IFTRUE 56527
56513: LD_INT 14
56515: DOUBLE
56516: EQUAL
56517: IFTRUE 56527
56519: LD_INT 10
56521: DOUBLE
56522: EQUAL
56523: IFTRUE 56527
56525: GO 56583
56527: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56528: LD_ADDR_VAR 0 9
56532: PUSH
56533: LD_VAR 0 41
56537: PUSH
56538: LD_VAR 0 42
56542: PUSH
56543: LD_VAR 0 43
56547: PUSH
56548: LD_VAR 0 44
56552: PUSH
56553: LD_VAR 0 45
56557: PUSH
56558: LD_VAR 0 46
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: PUSH
56571: LD_VAR 0 4
56575: PUSH
56576: LD_INT 1
56578: PLUS
56579: ARRAY
56580: ST_TO_ADDR
56581: GO 56836
56583: LD_INT 36
56585: DOUBLE
56586: EQUAL
56587: IFTRUE 56591
56589: GO 56647
56591: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56592: LD_ADDR_VAR 0 9
56596: PUSH
56597: LD_VAR 0 47
56601: PUSH
56602: LD_VAR 0 48
56606: PUSH
56607: LD_VAR 0 49
56611: PUSH
56612: LD_VAR 0 50
56616: PUSH
56617: LD_VAR 0 51
56621: PUSH
56622: LD_VAR 0 52
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: PUSH
56635: LD_VAR 0 4
56639: PUSH
56640: LD_INT 1
56642: PLUS
56643: ARRAY
56644: ST_TO_ADDR
56645: GO 56836
56647: LD_INT 4
56649: DOUBLE
56650: EQUAL
56651: IFTRUE 56673
56653: LD_INT 5
56655: DOUBLE
56656: EQUAL
56657: IFTRUE 56673
56659: LD_INT 34
56661: DOUBLE
56662: EQUAL
56663: IFTRUE 56673
56665: LD_INT 37
56667: DOUBLE
56668: EQUAL
56669: IFTRUE 56673
56671: GO 56729
56673: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56674: LD_ADDR_VAR 0 9
56678: PUSH
56679: LD_VAR 0 53
56683: PUSH
56684: LD_VAR 0 54
56688: PUSH
56689: LD_VAR 0 55
56693: PUSH
56694: LD_VAR 0 56
56698: PUSH
56699: LD_VAR 0 57
56703: PUSH
56704: LD_VAR 0 58
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: PUSH
56717: LD_VAR 0 4
56721: PUSH
56722: LD_INT 1
56724: PLUS
56725: ARRAY
56726: ST_TO_ADDR
56727: GO 56836
56729: LD_INT 31
56731: DOUBLE
56732: EQUAL
56733: IFTRUE 56779
56735: LD_INT 32
56737: DOUBLE
56738: EQUAL
56739: IFTRUE 56779
56741: LD_INT 33
56743: DOUBLE
56744: EQUAL
56745: IFTRUE 56779
56747: LD_INT 27
56749: DOUBLE
56750: EQUAL
56751: IFTRUE 56779
56753: LD_INT 26
56755: DOUBLE
56756: EQUAL
56757: IFTRUE 56779
56759: LD_INT 28
56761: DOUBLE
56762: EQUAL
56763: IFTRUE 56779
56765: LD_INT 29
56767: DOUBLE
56768: EQUAL
56769: IFTRUE 56779
56771: LD_INT 30
56773: DOUBLE
56774: EQUAL
56775: IFTRUE 56779
56777: GO 56835
56779: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56780: LD_ADDR_VAR 0 9
56784: PUSH
56785: LD_VAR 0 59
56789: PUSH
56790: LD_VAR 0 60
56794: PUSH
56795: LD_VAR 0 61
56799: PUSH
56800: LD_VAR 0 62
56804: PUSH
56805: LD_VAR 0 63
56809: PUSH
56810: LD_VAR 0 64
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: PUSH
56823: LD_VAR 0 4
56827: PUSH
56828: LD_INT 1
56830: PLUS
56831: ARRAY
56832: ST_TO_ADDR
56833: GO 56836
56835: POP
// temp_list2 = [ ] ;
56836: LD_ADDR_VAR 0 10
56840: PUSH
56841: EMPTY
56842: ST_TO_ADDR
// for i in temp_list do
56843: LD_ADDR_VAR 0 8
56847: PUSH
56848: LD_VAR 0 9
56852: PUSH
56853: FOR_IN
56854: IFFALSE 56906
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56856: LD_ADDR_VAR 0 10
56860: PUSH
56861: LD_VAR 0 10
56865: PUSH
56866: LD_VAR 0 8
56870: PUSH
56871: LD_INT 1
56873: ARRAY
56874: PUSH
56875: LD_VAR 0 2
56879: PLUS
56880: PUSH
56881: LD_VAR 0 8
56885: PUSH
56886: LD_INT 2
56888: ARRAY
56889: PUSH
56890: LD_VAR 0 3
56894: PLUS
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: ADD
56903: ST_TO_ADDR
56904: GO 56853
56906: POP
56907: POP
// result = temp_list2 ;
56908: LD_ADDR_VAR 0 7
56912: PUSH
56913: LD_VAR 0 10
56917: ST_TO_ADDR
// end ;
56918: LD_VAR 0 7
56922: RET
// export function EnemyInRange ( unit , dist ) ; begin
56923: LD_INT 0
56925: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56926: LD_ADDR_VAR 0 3
56930: PUSH
56931: LD_VAR 0 1
56935: PPUSH
56936: CALL_OW 255
56940: PPUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: CALL_OW 250
56950: PPUSH
56951: LD_VAR 0 1
56955: PPUSH
56956: CALL_OW 251
56960: PPUSH
56961: LD_VAR 0 2
56965: PPUSH
56966: CALL 30319 0 4
56970: PUSH
56971: LD_INT 4
56973: ARRAY
56974: ST_TO_ADDR
// end ;
56975: LD_VAR 0 3
56979: RET
// export function PlayerSeeMe ( unit ) ; begin
56980: LD_INT 0
56982: PPUSH
// result := See ( your_side , unit ) ;
56983: LD_ADDR_VAR 0 2
56987: PUSH
56988: LD_OWVAR 2
56992: PPUSH
56993: LD_VAR 0 1
56997: PPUSH
56998: CALL_OW 292
57002: ST_TO_ADDR
// end ;
57003: LD_VAR 0 2
57007: RET
// export function ReverseDir ( unit ) ; begin
57008: LD_INT 0
57010: PPUSH
// if not unit then
57011: LD_VAR 0 1
57015: NOT
57016: IFFALSE 57020
// exit ;
57018: GO 57043
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57020: LD_ADDR_VAR 0 2
57024: PUSH
57025: LD_VAR 0 1
57029: PPUSH
57030: CALL_OW 254
57034: PUSH
57035: LD_INT 3
57037: PLUS
57038: PUSH
57039: LD_INT 6
57041: MOD
57042: ST_TO_ADDR
// end ;
57043: LD_VAR 0 2
57047: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57048: LD_INT 0
57050: PPUSH
57051: PPUSH
57052: PPUSH
57053: PPUSH
57054: PPUSH
// if not hexes then
57055: LD_VAR 0 2
57059: NOT
57060: IFFALSE 57064
// exit ;
57062: GO 57212
// dist := 9999 ;
57064: LD_ADDR_VAR 0 5
57068: PUSH
57069: LD_INT 9999
57071: ST_TO_ADDR
// for i = 1 to hexes do
57072: LD_ADDR_VAR 0 4
57076: PUSH
57077: DOUBLE
57078: LD_INT 1
57080: DEC
57081: ST_TO_ADDR
57082: LD_VAR 0 2
57086: PUSH
57087: FOR_TO
57088: IFFALSE 57200
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57090: LD_VAR 0 1
57094: PPUSH
57095: LD_VAR 0 2
57099: PUSH
57100: LD_VAR 0 4
57104: ARRAY
57105: PUSH
57106: LD_INT 1
57108: ARRAY
57109: PPUSH
57110: LD_VAR 0 2
57114: PUSH
57115: LD_VAR 0 4
57119: ARRAY
57120: PUSH
57121: LD_INT 2
57123: ARRAY
57124: PPUSH
57125: CALL_OW 297
57129: PUSH
57130: LD_VAR 0 5
57134: LESS
57135: IFFALSE 57198
// begin hex := hexes [ i ] ;
57137: LD_ADDR_VAR 0 7
57141: PUSH
57142: LD_VAR 0 2
57146: PUSH
57147: LD_VAR 0 4
57151: ARRAY
57152: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57153: LD_ADDR_VAR 0 5
57157: PUSH
57158: LD_VAR 0 1
57162: PPUSH
57163: LD_VAR 0 2
57167: PUSH
57168: LD_VAR 0 4
57172: ARRAY
57173: PUSH
57174: LD_INT 1
57176: ARRAY
57177: PPUSH
57178: LD_VAR 0 2
57182: PUSH
57183: LD_VAR 0 4
57187: ARRAY
57188: PUSH
57189: LD_INT 2
57191: ARRAY
57192: PPUSH
57193: CALL_OW 297
57197: ST_TO_ADDR
// end ; end ;
57198: GO 57087
57200: POP
57201: POP
// result := hex ;
57202: LD_ADDR_VAR 0 3
57206: PUSH
57207: LD_VAR 0 7
57211: ST_TO_ADDR
// end ;
57212: LD_VAR 0 3
57216: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57217: LD_INT 0
57219: PPUSH
57220: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57221: LD_VAR 0 1
57225: NOT
57226: PUSH
57227: LD_VAR 0 1
57231: PUSH
57232: LD_INT 21
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 23
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PPUSH
57256: CALL_OW 69
57260: IN
57261: NOT
57262: OR
57263: IFFALSE 57267
// exit ;
57265: GO 57314
// for i = 1 to 3 do
57267: LD_ADDR_VAR 0 3
57271: PUSH
57272: DOUBLE
57273: LD_INT 1
57275: DEC
57276: ST_TO_ADDR
57277: LD_INT 3
57279: PUSH
57280: FOR_TO
57281: IFFALSE 57312
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57283: LD_VAR 0 1
57287: PPUSH
57288: CALL_OW 250
57292: PPUSH
57293: LD_VAR 0 1
57297: PPUSH
57298: CALL_OW 251
57302: PPUSH
57303: LD_INT 1
57305: PPUSH
57306: CALL_OW 453
57310: GO 57280
57312: POP
57313: POP
// end ;
57314: LD_VAR 0 2
57318: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57319: LD_INT 0
57321: PPUSH
57322: PPUSH
57323: PPUSH
57324: PPUSH
57325: PPUSH
57326: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57327: LD_VAR 0 1
57331: NOT
57332: PUSH
57333: LD_VAR 0 2
57337: NOT
57338: OR
57339: PUSH
57340: LD_VAR 0 1
57344: PPUSH
57345: CALL_OW 314
57349: OR
57350: IFFALSE 57354
// exit ;
57352: GO 57795
// x := GetX ( enemy_unit ) ;
57354: LD_ADDR_VAR 0 7
57358: PUSH
57359: LD_VAR 0 2
57363: PPUSH
57364: CALL_OW 250
57368: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57369: LD_ADDR_VAR 0 8
57373: PUSH
57374: LD_VAR 0 2
57378: PPUSH
57379: CALL_OW 251
57383: ST_TO_ADDR
// if not x or not y then
57384: LD_VAR 0 7
57388: NOT
57389: PUSH
57390: LD_VAR 0 8
57394: NOT
57395: OR
57396: IFFALSE 57400
// exit ;
57398: GO 57795
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57400: LD_ADDR_VAR 0 6
57404: PUSH
57405: LD_VAR 0 7
57409: PPUSH
57410: LD_INT 0
57412: PPUSH
57413: LD_INT 4
57415: PPUSH
57416: CALL_OW 272
57420: PUSH
57421: LD_VAR 0 8
57425: PPUSH
57426: LD_INT 0
57428: PPUSH
57429: LD_INT 4
57431: PPUSH
57432: CALL_OW 273
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_VAR 0 7
57445: PPUSH
57446: LD_INT 1
57448: PPUSH
57449: LD_INT 4
57451: PPUSH
57452: CALL_OW 272
57456: PUSH
57457: LD_VAR 0 8
57461: PPUSH
57462: LD_INT 1
57464: PPUSH
57465: LD_INT 4
57467: PPUSH
57468: CALL_OW 273
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_VAR 0 7
57481: PPUSH
57482: LD_INT 2
57484: PPUSH
57485: LD_INT 4
57487: PPUSH
57488: CALL_OW 272
57492: PUSH
57493: LD_VAR 0 8
57497: PPUSH
57498: LD_INT 2
57500: PPUSH
57501: LD_INT 4
57503: PPUSH
57504: CALL_OW 273
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_VAR 0 7
57517: PPUSH
57518: LD_INT 3
57520: PPUSH
57521: LD_INT 4
57523: PPUSH
57524: CALL_OW 272
57528: PUSH
57529: LD_VAR 0 8
57533: PPUSH
57534: LD_INT 3
57536: PPUSH
57537: LD_INT 4
57539: PPUSH
57540: CALL_OW 273
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_VAR 0 7
57553: PPUSH
57554: LD_INT 4
57556: PPUSH
57557: LD_INT 4
57559: PPUSH
57560: CALL_OW 272
57564: PUSH
57565: LD_VAR 0 8
57569: PPUSH
57570: LD_INT 4
57572: PPUSH
57573: LD_INT 4
57575: PPUSH
57576: CALL_OW 273
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_VAR 0 7
57589: PPUSH
57590: LD_INT 5
57592: PPUSH
57593: LD_INT 4
57595: PPUSH
57596: CALL_OW 272
57600: PUSH
57601: LD_VAR 0 8
57605: PPUSH
57606: LD_INT 5
57608: PPUSH
57609: LD_INT 4
57611: PPUSH
57612: CALL_OW 273
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: ST_TO_ADDR
// for i = tmp downto 1 do
57629: LD_ADDR_VAR 0 4
57633: PUSH
57634: DOUBLE
57635: LD_VAR 0 6
57639: INC
57640: ST_TO_ADDR
57641: LD_INT 1
57643: PUSH
57644: FOR_DOWNTO
57645: IFFALSE 57746
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57647: LD_VAR 0 6
57651: PUSH
57652: LD_VAR 0 4
57656: ARRAY
57657: PUSH
57658: LD_INT 1
57660: ARRAY
57661: PPUSH
57662: LD_VAR 0 6
57666: PUSH
57667: LD_VAR 0 4
57671: ARRAY
57672: PUSH
57673: LD_INT 2
57675: ARRAY
57676: PPUSH
57677: CALL_OW 488
57681: NOT
57682: PUSH
57683: LD_VAR 0 6
57687: PUSH
57688: LD_VAR 0 4
57692: ARRAY
57693: PUSH
57694: LD_INT 1
57696: ARRAY
57697: PPUSH
57698: LD_VAR 0 6
57702: PUSH
57703: LD_VAR 0 4
57707: ARRAY
57708: PUSH
57709: LD_INT 2
57711: ARRAY
57712: PPUSH
57713: CALL_OW 428
57717: PUSH
57718: LD_INT 0
57720: NONEQUAL
57721: OR
57722: IFFALSE 57744
// tmp := Delete ( tmp , i ) ;
57724: LD_ADDR_VAR 0 6
57728: PUSH
57729: LD_VAR 0 6
57733: PPUSH
57734: LD_VAR 0 4
57738: PPUSH
57739: CALL_OW 3
57743: ST_TO_ADDR
57744: GO 57644
57746: POP
57747: POP
// j := GetClosestHex ( unit , tmp ) ;
57748: LD_ADDR_VAR 0 5
57752: PUSH
57753: LD_VAR 0 1
57757: PPUSH
57758: LD_VAR 0 6
57762: PPUSH
57763: CALL 57048 0 2
57767: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57768: LD_VAR 0 1
57772: PPUSH
57773: LD_VAR 0 5
57777: PUSH
57778: LD_INT 1
57780: ARRAY
57781: PPUSH
57782: LD_VAR 0 5
57786: PUSH
57787: LD_INT 2
57789: ARRAY
57790: PPUSH
57791: CALL_OW 111
// end ;
57795: LD_VAR 0 3
57799: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57800: LD_INT 0
57802: PPUSH
57803: PPUSH
57804: PPUSH
// uc_side = 0 ;
57805: LD_ADDR_OWVAR 20
57809: PUSH
57810: LD_INT 0
57812: ST_TO_ADDR
// uc_nation = 0 ;
57813: LD_ADDR_OWVAR 21
57817: PUSH
57818: LD_INT 0
57820: ST_TO_ADDR
// InitHc_All ( ) ;
57821: CALL_OW 584
// InitVc ;
57825: CALL_OW 20
// if mastodonts then
57829: LD_VAR 0 6
57833: IFFALSE 57900
// for i = 1 to mastodonts do
57835: LD_ADDR_VAR 0 11
57839: PUSH
57840: DOUBLE
57841: LD_INT 1
57843: DEC
57844: ST_TO_ADDR
57845: LD_VAR 0 6
57849: PUSH
57850: FOR_TO
57851: IFFALSE 57898
// begin vc_chassis := 31 ;
57853: LD_ADDR_OWVAR 37
57857: PUSH
57858: LD_INT 31
57860: ST_TO_ADDR
// vc_control := control_rider ;
57861: LD_ADDR_OWVAR 38
57865: PUSH
57866: LD_INT 4
57868: ST_TO_ADDR
// animal := CreateVehicle ;
57869: LD_ADDR_VAR 0 12
57873: PUSH
57874: CALL_OW 45
57878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57879: LD_VAR 0 12
57883: PPUSH
57884: LD_VAR 0 8
57888: PPUSH
57889: LD_INT 0
57891: PPUSH
57892: CALL 60088 0 3
// end ;
57896: GO 57850
57898: POP
57899: POP
// if horses then
57900: LD_VAR 0 5
57904: IFFALSE 57971
// for i = 1 to horses do
57906: LD_ADDR_VAR 0 11
57910: PUSH
57911: DOUBLE
57912: LD_INT 1
57914: DEC
57915: ST_TO_ADDR
57916: LD_VAR 0 5
57920: PUSH
57921: FOR_TO
57922: IFFALSE 57969
// begin hc_class := 21 ;
57924: LD_ADDR_OWVAR 28
57928: PUSH
57929: LD_INT 21
57931: ST_TO_ADDR
// hc_gallery :=  ;
57932: LD_ADDR_OWVAR 33
57936: PUSH
57937: LD_STRING 
57939: ST_TO_ADDR
// animal := CreateHuman ;
57940: LD_ADDR_VAR 0 12
57944: PUSH
57945: CALL_OW 44
57949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57950: LD_VAR 0 12
57954: PPUSH
57955: LD_VAR 0 8
57959: PPUSH
57960: LD_INT 0
57962: PPUSH
57963: CALL 60088 0 3
// end ;
57967: GO 57921
57969: POP
57970: POP
// if birds then
57971: LD_VAR 0 1
57975: IFFALSE 58042
// for i = 1 to birds do
57977: LD_ADDR_VAR 0 11
57981: PUSH
57982: DOUBLE
57983: LD_INT 1
57985: DEC
57986: ST_TO_ADDR
57987: LD_VAR 0 1
57991: PUSH
57992: FOR_TO
57993: IFFALSE 58040
// begin hc_class = 18 ;
57995: LD_ADDR_OWVAR 28
57999: PUSH
58000: LD_INT 18
58002: ST_TO_ADDR
// hc_gallery =  ;
58003: LD_ADDR_OWVAR 33
58007: PUSH
58008: LD_STRING 
58010: ST_TO_ADDR
// animal := CreateHuman ;
58011: LD_ADDR_VAR 0 12
58015: PUSH
58016: CALL_OW 44
58020: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58021: LD_VAR 0 12
58025: PPUSH
58026: LD_VAR 0 8
58030: PPUSH
58031: LD_INT 0
58033: PPUSH
58034: CALL 60088 0 3
// end ;
58038: GO 57992
58040: POP
58041: POP
// if tigers then
58042: LD_VAR 0 2
58046: IFFALSE 58130
// for i = 1 to tigers do
58048: LD_ADDR_VAR 0 11
58052: PUSH
58053: DOUBLE
58054: LD_INT 1
58056: DEC
58057: ST_TO_ADDR
58058: LD_VAR 0 2
58062: PUSH
58063: FOR_TO
58064: IFFALSE 58128
// begin hc_class = class_tiger ;
58066: LD_ADDR_OWVAR 28
58070: PUSH
58071: LD_INT 14
58073: ST_TO_ADDR
// hc_gallery =  ;
58074: LD_ADDR_OWVAR 33
58078: PUSH
58079: LD_STRING 
58081: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58082: LD_ADDR_OWVAR 35
58086: PUSH
58087: LD_INT 7
58089: NEG
58090: PPUSH
58091: LD_INT 7
58093: PPUSH
58094: CALL_OW 12
58098: ST_TO_ADDR
// animal := CreateHuman ;
58099: LD_ADDR_VAR 0 12
58103: PUSH
58104: CALL_OW 44
58108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58109: LD_VAR 0 12
58113: PPUSH
58114: LD_VAR 0 8
58118: PPUSH
58119: LD_INT 0
58121: PPUSH
58122: CALL 60088 0 3
// end ;
58126: GO 58063
58128: POP
58129: POP
// if apemans then
58130: LD_VAR 0 3
58134: IFFALSE 58257
// for i = 1 to apemans do
58136: LD_ADDR_VAR 0 11
58140: PUSH
58141: DOUBLE
58142: LD_INT 1
58144: DEC
58145: ST_TO_ADDR
58146: LD_VAR 0 3
58150: PUSH
58151: FOR_TO
58152: IFFALSE 58255
// begin hc_class = class_apeman ;
58154: LD_ADDR_OWVAR 28
58158: PUSH
58159: LD_INT 12
58161: ST_TO_ADDR
// hc_gallery =  ;
58162: LD_ADDR_OWVAR 33
58166: PUSH
58167: LD_STRING 
58169: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58170: LD_ADDR_OWVAR 35
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PPUSH
58179: LD_INT 2
58181: PPUSH
58182: CALL_OW 12
58186: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58187: LD_ADDR_OWVAR 31
58191: PUSH
58192: LD_INT 1
58194: PPUSH
58195: LD_INT 3
58197: PPUSH
58198: CALL_OW 12
58202: PUSH
58203: LD_INT 1
58205: PPUSH
58206: LD_INT 3
58208: PPUSH
58209: CALL_OW 12
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// animal := CreateHuman ;
58226: LD_ADDR_VAR 0 12
58230: PUSH
58231: CALL_OW 44
58235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58236: LD_VAR 0 12
58240: PPUSH
58241: LD_VAR 0 8
58245: PPUSH
58246: LD_INT 0
58248: PPUSH
58249: CALL 60088 0 3
// end ;
58253: GO 58151
58255: POP
58256: POP
// if enchidnas then
58257: LD_VAR 0 4
58261: IFFALSE 58328
// for i = 1 to enchidnas do
58263: LD_ADDR_VAR 0 11
58267: PUSH
58268: DOUBLE
58269: LD_INT 1
58271: DEC
58272: ST_TO_ADDR
58273: LD_VAR 0 4
58277: PUSH
58278: FOR_TO
58279: IFFALSE 58326
// begin hc_class = 13 ;
58281: LD_ADDR_OWVAR 28
58285: PUSH
58286: LD_INT 13
58288: ST_TO_ADDR
// hc_gallery =  ;
58289: LD_ADDR_OWVAR 33
58293: PUSH
58294: LD_STRING 
58296: ST_TO_ADDR
// animal := CreateHuman ;
58297: LD_ADDR_VAR 0 12
58301: PUSH
58302: CALL_OW 44
58306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58307: LD_VAR 0 12
58311: PPUSH
58312: LD_VAR 0 8
58316: PPUSH
58317: LD_INT 0
58319: PPUSH
58320: CALL 60088 0 3
// end ;
58324: GO 58278
58326: POP
58327: POP
// if fishes then
58328: LD_VAR 0 7
58332: IFFALSE 58399
// for i = 1 to fishes do
58334: LD_ADDR_VAR 0 11
58338: PUSH
58339: DOUBLE
58340: LD_INT 1
58342: DEC
58343: ST_TO_ADDR
58344: LD_VAR 0 7
58348: PUSH
58349: FOR_TO
58350: IFFALSE 58397
// begin hc_class = 20 ;
58352: LD_ADDR_OWVAR 28
58356: PUSH
58357: LD_INT 20
58359: ST_TO_ADDR
// hc_gallery =  ;
58360: LD_ADDR_OWVAR 33
58364: PUSH
58365: LD_STRING 
58367: ST_TO_ADDR
// animal := CreateHuman ;
58368: LD_ADDR_VAR 0 12
58372: PUSH
58373: CALL_OW 44
58377: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58378: LD_VAR 0 12
58382: PPUSH
58383: LD_VAR 0 9
58387: PPUSH
58388: LD_INT 0
58390: PPUSH
58391: CALL 60088 0 3
// end ;
58395: GO 58349
58397: POP
58398: POP
// end ;
58399: LD_VAR 0 10
58403: RET
// export function WantHeal ( sci , unit ) ; begin
58404: LD_INT 0
58406: PPUSH
// if GetTaskList ( sci ) > 0 then
58407: LD_VAR 0 1
58411: PPUSH
58412: CALL_OW 437
58416: PUSH
58417: LD_INT 0
58419: GREATER
58420: IFFALSE 58490
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58422: LD_VAR 0 1
58426: PPUSH
58427: CALL_OW 437
58431: PUSH
58432: LD_INT 1
58434: ARRAY
58435: PUSH
58436: LD_INT 1
58438: ARRAY
58439: PUSH
58440: LD_STRING l
58442: EQUAL
58443: PUSH
58444: LD_VAR 0 1
58448: PPUSH
58449: CALL_OW 437
58453: PUSH
58454: LD_INT 1
58456: ARRAY
58457: PUSH
58458: LD_INT 4
58460: ARRAY
58461: PUSH
58462: LD_VAR 0 2
58466: EQUAL
58467: AND
58468: IFFALSE 58480
// result := true else
58470: LD_ADDR_VAR 0 3
58474: PUSH
58475: LD_INT 1
58477: ST_TO_ADDR
58478: GO 58488
// result := false ;
58480: LD_ADDR_VAR 0 3
58484: PUSH
58485: LD_INT 0
58487: ST_TO_ADDR
// end else
58488: GO 58498
// result := false ;
58490: LD_ADDR_VAR 0 3
58494: PUSH
58495: LD_INT 0
58497: ST_TO_ADDR
// end ;
58498: LD_VAR 0 3
58502: RET
// export function HealTarget ( sci ) ; begin
58503: LD_INT 0
58505: PPUSH
// if not sci then
58506: LD_VAR 0 1
58510: NOT
58511: IFFALSE 58515
// exit ;
58513: GO 58580
// result := 0 ;
58515: LD_ADDR_VAR 0 2
58519: PUSH
58520: LD_INT 0
58522: ST_TO_ADDR
// if GetTaskList ( sci ) then
58523: LD_VAR 0 1
58527: PPUSH
58528: CALL_OW 437
58532: IFFALSE 58580
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58534: LD_VAR 0 1
58538: PPUSH
58539: CALL_OW 437
58543: PUSH
58544: LD_INT 1
58546: ARRAY
58547: PUSH
58548: LD_INT 1
58550: ARRAY
58551: PUSH
58552: LD_STRING l
58554: EQUAL
58555: IFFALSE 58580
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58557: LD_ADDR_VAR 0 2
58561: PUSH
58562: LD_VAR 0 1
58566: PPUSH
58567: CALL_OW 437
58571: PUSH
58572: LD_INT 1
58574: ARRAY
58575: PUSH
58576: LD_INT 4
58578: ARRAY
58579: ST_TO_ADDR
// end ;
58580: LD_VAR 0 2
58584: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58585: LD_INT 0
58587: PPUSH
58588: PPUSH
58589: PPUSH
58590: PPUSH
// if not base_units then
58591: LD_VAR 0 1
58595: NOT
58596: IFFALSE 58600
// exit ;
58598: GO 58687
// result := false ;
58600: LD_ADDR_VAR 0 2
58604: PUSH
58605: LD_INT 0
58607: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58608: LD_ADDR_VAR 0 5
58612: PUSH
58613: LD_VAR 0 1
58617: PPUSH
58618: LD_INT 21
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PPUSH
58628: CALL_OW 72
58632: ST_TO_ADDR
// if not tmp then
58633: LD_VAR 0 5
58637: NOT
58638: IFFALSE 58642
// exit ;
58640: GO 58687
// for i in tmp do
58642: LD_ADDR_VAR 0 3
58646: PUSH
58647: LD_VAR 0 5
58651: PUSH
58652: FOR_IN
58653: IFFALSE 58685
// begin result := EnemyInRange ( i , 22 ) ;
58655: LD_ADDR_VAR 0 2
58659: PUSH
58660: LD_VAR 0 3
58664: PPUSH
58665: LD_INT 22
58667: PPUSH
58668: CALL 56923 0 2
58672: ST_TO_ADDR
// if result then
58673: LD_VAR 0 2
58677: IFFALSE 58683
// exit ;
58679: POP
58680: POP
58681: GO 58687
// end ;
58683: GO 58652
58685: POP
58686: POP
// end ;
58687: LD_VAR 0 2
58691: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58692: LD_INT 0
58694: PPUSH
58695: PPUSH
// if not units then
58696: LD_VAR 0 1
58700: NOT
58701: IFFALSE 58705
// exit ;
58703: GO 58775
// result := [ ] ;
58705: LD_ADDR_VAR 0 3
58709: PUSH
58710: EMPTY
58711: ST_TO_ADDR
// for i in units do
58712: LD_ADDR_VAR 0 4
58716: PUSH
58717: LD_VAR 0 1
58721: PUSH
58722: FOR_IN
58723: IFFALSE 58773
// if GetTag ( i ) = tag then
58725: LD_VAR 0 4
58729: PPUSH
58730: CALL_OW 110
58734: PUSH
58735: LD_VAR 0 2
58739: EQUAL
58740: IFFALSE 58771
// result := Replace ( result , result + 1 , i ) ;
58742: LD_ADDR_VAR 0 3
58746: PUSH
58747: LD_VAR 0 3
58751: PPUSH
58752: LD_VAR 0 3
58756: PUSH
58757: LD_INT 1
58759: PLUS
58760: PPUSH
58761: LD_VAR 0 4
58765: PPUSH
58766: CALL_OW 1
58770: ST_TO_ADDR
58771: GO 58722
58773: POP
58774: POP
// end ;
58775: LD_VAR 0 3
58779: RET
// export function IsDriver ( un ) ; begin
58780: LD_INT 0
58782: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58783: LD_ADDR_VAR 0 2
58787: PUSH
58788: LD_VAR 0 1
58792: PUSH
58793: LD_INT 55
58795: PUSH
58796: EMPTY
58797: LIST
58798: PPUSH
58799: CALL_OW 69
58803: IN
58804: ST_TO_ADDR
// end ;
58805: LD_VAR 0 2
58809: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58810: LD_INT 0
58812: PPUSH
58813: PPUSH
// list := [ ] ;
58814: LD_ADDR_VAR 0 5
58818: PUSH
58819: EMPTY
58820: ST_TO_ADDR
// case d of 0 :
58821: LD_VAR 0 3
58825: PUSH
58826: LD_INT 0
58828: DOUBLE
58829: EQUAL
58830: IFTRUE 58834
58832: GO 58967
58834: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58835: LD_ADDR_VAR 0 5
58839: PUSH
58840: LD_VAR 0 1
58844: PUSH
58845: LD_INT 4
58847: MINUS
58848: PUSH
58849: LD_VAR 0 2
58853: PUSH
58854: LD_INT 4
58856: MINUS
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: PUSH
58866: LD_VAR 0 1
58870: PUSH
58871: LD_INT 3
58873: MINUS
58874: PUSH
58875: LD_VAR 0 2
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: PUSH
58888: LD_VAR 0 1
58892: PUSH
58893: LD_INT 4
58895: PLUS
58896: PUSH
58897: LD_VAR 0 2
58901: PUSH
58902: LD_INT 4
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: PUSH
58910: LD_VAR 0 1
58914: PUSH
58915: LD_INT 3
58917: PLUS
58918: PUSH
58919: LD_VAR 0 2
58923: PUSH
58924: LD_INT 3
58926: PLUS
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: LIST
58935: PUSH
58936: LD_VAR 0 1
58940: PUSH
58941: LD_VAR 0 2
58945: PUSH
58946: LD_INT 4
58948: PLUS
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: LIST
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// end ; 1 :
58965: GO 59665
58967: LD_INT 1
58969: DOUBLE
58970: EQUAL
58971: IFTRUE 58975
58973: GO 59108
58975: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58976: LD_ADDR_VAR 0 5
58980: PUSH
58981: LD_VAR 0 1
58985: PUSH
58986: LD_VAR 0 2
58990: PUSH
58991: LD_INT 4
58993: MINUS
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: PUSH
59003: LD_VAR 0 1
59007: PUSH
59008: LD_INT 3
59010: MINUS
59011: PUSH
59012: LD_VAR 0 2
59016: PUSH
59017: LD_INT 3
59019: MINUS
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: PUSH
59029: LD_VAR 0 1
59033: PUSH
59034: LD_INT 4
59036: MINUS
59037: PUSH
59038: LD_VAR 0 2
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: PUSH
59051: LD_VAR 0 1
59055: PUSH
59056: LD_VAR 0 2
59060: PUSH
59061: LD_INT 3
59063: PLUS
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: PUSH
59073: LD_VAR 0 1
59077: PUSH
59078: LD_INT 4
59080: PLUS
59081: PUSH
59082: LD_VAR 0 2
59086: PUSH
59087: LD_INT 4
59089: PLUS
59090: PUSH
59091: LD_INT 5
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: ST_TO_ADDR
// end ; 2 :
59106: GO 59665
59108: LD_INT 2
59110: DOUBLE
59111: EQUAL
59112: IFTRUE 59116
59114: GO 59245
59116: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59117: LD_ADDR_VAR 0 5
59121: PUSH
59122: LD_VAR 0 1
59126: PUSH
59127: LD_VAR 0 2
59131: PUSH
59132: LD_INT 3
59134: MINUS
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: PUSH
59144: LD_VAR 0 1
59148: PUSH
59149: LD_INT 4
59151: PLUS
59152: PUSH
59153: LD_VAR 0 2
59157: PUSH
59158: LD_INT 4
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: PUSH
59166: LD_VAR 0 1
59170: PUSH
59171: LD_VAR 0 2
59175: PUSH
59176: LD_INT 4
59178: PLUS
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: PUSH
59188: LD_VAR 0 1
59192: PUSH
59193: LD_INT 3
59195: MINUS
59196: PUSH
59197: LD_VAR 0 2
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: LIST
59209: PUSH
59210: LD_VAR 0 1
59214: PUSH
59215: LD_INT 4
59217: MINUS
59218: PUSH
59219: LD_VAR 0 2
59223: PUSH
59224: LD_INT 4
59226: MINUS
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// end ; 3 :
59243: GO 59665
59245: LD_INT 3
59247: DOUBLE
59248: EQUAL
59249: IFTRUE 59253
59251: GO 59386
59253: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59254: LD_ADDR_VAR 0 5
59258: PUSH
59259: LD_VAR 0 1
59263: PUSH
59264: LD_INT 3
59266: PLUS
59267: PUSH
59268: LD_VAR 0 2
59272: PUSH
59273: LD_INT 4
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: PUSH
59281: LD_VAR 0 1
59285: PUSH
59286: LD_INT 4
59288: PLUS
59289: PUSH
59290: LD_VAR 0 2
59294: PUSH
59295: LD_INT 4
59297: PLUS
59298: PUSH
59299: LD_INT 5
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: PUSH
59307: LD_VAR 0 1
59311: PUSH
59312: LD_INT 4
59314: MINUS
59315: PUSH
59316: LD_VAR 0 2
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: PUSH
59329: LD_VAR 0 1
59333: PUSH
59334: LD_VAR 0 2
59338: PUSH
59339: LD_INT 4
59341: MINUS
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: PUSH
59351: LD_VAR 0 1
59355: PUSH
59356: LD_INT 3
59358: MINUS
59359: PUSH
59360: LD_VAR 0 2
59364: PUSH
59365: LD_INT 3
59367: MINUS
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: ST_TO_ADDR
// end ; 4 :
59384: GO 59665
59386: LD_INT 4
59388: DOUBLE
59389: EQUAL
59390: IFTRUE 59394
59392: GO 59527
59394: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59395: LD_ADDR_VAR 0 5
59399: PUSH
59400: LD_VAR 0 1
59404: PUSH
59405: LD_VAR 0 2
59409: PUSH
59410: LD_INT 4
59412: PLUS
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: PUSH
59422: LD_VAR 0 1
59426: PUSH
59427: LD_INT 3
59429: PLUS
59430: PUSH
59431: LD_VAR 0 2
59435: PUSH
59436: LD_INT 3
59438: PLUS
59439: PUSH
59440: LD_INT 5
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: LIST
59447: PUSH
59448: LD_VAR 0 1
59452: PUSH
59453: LD_INT 4
59455: PLUS
59456: PUSH
59457: LD_VAR 0 2
59461: PUSH
59462: LD_INT 4
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: PUSH
59470: LD_VAR 0 1
59474: PUSH
59475: LD_VAR 0 2
59479: PUSH
59480: LD_INT 3
59482: MINUS
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: LIST
59491: PUSH
59492: LD_VAR 0 1
59496: PUSH
59497: LD_INT 4
59499: MINUS
59500: PUSH
59501: LD_VAR 0 2
59505: PUSH
59506: LD_INT 4
59508: MINUS
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: ST_TO_ADDR
// end ; 5 :
59525: GO 59665
59527: LD_INT 5
59529: DOUBLE
59530: EQUAL
59531: IFTRUE 59535
59533: GO 59664
59535: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59536: LD_ADDR_VAR 0 5
59540: PUSH
59541: LD_VAR 0 1
59545: PUSH
59546: LD_INT 4
59548: MINUS
59549: PUSH
59550: LD_VAR 0 2
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: PUSH
59563: LD_VAR 0 1
59567: PUSH
59568: LD_VAR 0 2
59572: PUSH
59573: LD_INT 4
59575: MINUS
59576: PUSH
59577: LD_INT 3
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: PUSH
59585: LD_VAR 0 1
59589: PUSH
59590: LD_INT 4
59592: PLUS
59593: PUSH
59594: LD_VAR 0 2
59598: PUSH
59599: LD_INT 4
59601: PLUS
59602: PUSH
59603: LD_INT 5
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: LIST
59610: PUSH
59611: LD_VAR 0 1
59615: PUSH
59616: LD_INT 3
59618: PLUS
59619: PUSH
59620: LD_VAR 0 2
59624: PUSH
59625: LD_INT 4
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: PUSH
59633: LD_VAR 0 1
59637: PUSH
59638: LD_VAR 0 2
59642: PUSH
59643: LD_INT 3
59645: PLUS
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// end ; end ;
59662: GO 59665
59664: POP
// result := list ;
59665: LD_ADDR_VAR 0 4
59669: PUSH
59670: LD_VAR 0 5
59674: ST_TO_ADDR
// end ;
59675: LD_VAR 0 4
59679: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59680: LD_INT 0
59682: PPUSH
59683: PPUSH
59684: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59685: LD_VAR 0 1
59689: NOT
59690: PUSH
59691: LD_VAR 0 2
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: LD_INT 4
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: IN
59714: NOT
59715: OR
59716: IFFALSE 59720
// exit ;
59718: GO 59812
// tmp := [ ] ;
59720: LD_ADDR_VAR 0 5
59724: PUSH
59725: EMPTY
59726: ST_TO_ADDR
// for i in units do
59727: LD_ADDR_VAR 0 4
59731: PUSH
59732: LD_VAR 0 1
59736: PUSH
59737: FOR_IN
59738: IFFALSE 59781
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59740: LD_ADDR_VAR 0 5
59744: PUSH
59745: LD_VAR 0 5
59749: PPUSH
59750: LD_VAR 0 5
59754: PUSH
59755: LD_INT 1
59757: PLUS
59758: PPUSH
59759: LD_VAR 0 4
59763: PPUSH
59764: LD_VAR 0 2
59768: PPUSH
59769: CALL_OW 259
59773: PPUSH
59774: CALL_OW 2
59778: ST_TO_ADDR
59779: GO 59737
59781: POP
59782: POP
// if not tmp then
59783: LD_VAR 0 5
59787: NOT
59788: IFFALSE 59792
// exit ;
59790: GO 59812
// result := SortListByListDesc ( units , tmp ) ;
59792: LD_ADDR_VAR 0 3
59796: PUSH
59797: LD_VAR 0 1
59801: PPUSH
59802: LD_VAR 0 5
59806: PPUSH
59807: CALL_OW 77
59811: ST_TO_ADDR
// end ;
59812: LD_VAR 0 3
59816: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59817: LD_INT 0
59819: PPUSH
59820: PPUSH
59821: PPUSH
// result := false ;
59822: LD_ADDR_VAR 0 3
59826: PUSH
59827: LD_INT 0
59829: ST_TO_ADDR
// x := GetX ( building ) ;
59830: LD_ADDR_VAR 0 4
59834: PUSH
59835: LD_VAR 0 2
59839: PPUSH
59840: CALL_OW 250
59844: ST_TO_ADDR
// y := GetY ( building ) ;
59845: LD_ADDR_VAR 0 5
59849: PUSH
59850: LD_VAR 0 2
59854: PPUSH
59855: CALL_OW 251
59859: ST_TO_ADDR
// if not building or not x or not y then
59860: LD_VAR 0 2
59864: NOT
59865: PUSH
59866: LD_VAR 0 4
59870: NOT
59871: OR
59872: PUSH
59873: LD_VAR 0 5
59877: NOT
59878: OR
59879: IFFALSE 59883
// exit ;
59881: GO 59975
// if GetTaskList ( unit ) then
59883: LD_VAR 0 1
59887: PPUSH
59888: CALL_OW 437
59892: IFFALSE 59975
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59894: LD_STRING e
59896: PUSH
59897: LD_VAR 0 1
59901: PPUSH
59902: CALL_OW 437
59906: PUSH
59907: LD_INT 1
59909: ARRAY
59910: PUSH
59911: LD_INT 1
59913: ARRAY
59914: EQUAL
59915: PUSH
59916: LD_VAR 0 4
59920: PUSH
59921: LD_VAR 0 1
59925: PPUSH
59926: CALL_OW 437
59930: PUSH
59931: LD_INT 1
59933: ARRAY
59934: PUSH
59935: LD_INT 2
59937: ARRAY
59938: EQUAL
59939: AND
59940: PUSH
59941: LD_VAR 0 5
59945: PUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: CALL_OW 437
59955: PUSH
59956: LD_INT 1
59958: ARRAY
59959: PUSH
59960: LD_INT 3
59962: ARRAY
59963: EQUAL
59964: AND
59965: IFFALSE 59975
// result := true end ;
59967: LD_ADDR_VAR 0 3
59971: PUSH
59972: LD_INT 1
59974: ST_TO_ADDR
// end ;
59975: LD_VAR 0 3
59979: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59980: LD_INT 0
59982: PPUSH
// result := false ;
59983: LD_ADDR_VAR 0 4
59987: PUSH
59988: LD_INT 0
59990: ST_TO_ADDR
// if GetTaskList ( unit ) then
59991: LD_VAR 0 1
59995: PPUSH
59996: CALL_OW 437
60000: IFFALSE 60083
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60002: LD_STRING M
60004: PUSH
60005: LD_VAR 0 1
60009: PPUSH
60010: CALL_OW 437
60014: PUSH
60015: LD_INT 1
60017: ARRAY
60018: PUSH
60019: LD_INT 1
60021: ARRAY
60022: EQUAL
60023: PUSH
60024: LD_VAR 0 2
60028: PUSH
60029: LD_VAR 0 1
60033: PPUSH
60034: CALL_OW 437
60038: PUSH
60039: LD_INT 1
60041: ARRAY
60042: PUSH
60043: LD_INT 2
60045: ARRAY
60046: EQUAL
60047: AND
60048: PUSH
60049: LD_VAR 0 3
60053: PUSH
60054: LD_VAR 0 1
60058: PPUSH
60059: CALL_OW 437
60063: PUSH
60064: LD_INT 1
60066: ARRAY
60067: PUSH
60068: LD_INT 3
60070: ARRAY
60071: EQUAL
60072: AND
60073: IFFALSE 60083
// result := true ;
60075: LD_ADDR_VAR 0 4
60079: PUSH
60080: LD_INT 1
60082: ST_TO_ADDR
// end ; end ;
60083: LD_VAR 0 4
60087: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60088: LD_INT 0
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
// if not unit or not area then
60094: LD_VAR 0 1
60098: NOT
60099: PUSH
60100: LD_VAR 0 2
60104: NOT
60105: OR
60106: IFFALSE 60110
// exit ;
60108: GO 60274
// tmp := AreaToList ( area , i ) ;
60110: LD_ADDR_VAR 0 6
60114: PUSH
60115: LD_VAR 0 2
60119: PPUSH
60120: LD_VAR 0 5
60124: PPUSH
60125: CALL_OW 517
60129: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60130: LD_ADDR_VAR 0 5
60134: PUSH
60135: DOUBLE
60136: LD_INT 1
60138: DEC
60139: ST_TO_ADDR
60140: LD_VAR 0 6
60144: PUSH
60145: LD_INT 1
60147: ARRAY
60148: PUSH
60149: FOR_TO
60150: IFFALSE 60272
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60152: LD_ADDR_VAR 0 7
60156: PUSH
60157: LD_VAR 0 6
60161: PUSH
60162: LD_INT 1
60164: ARRAY
60165: PUSH
60166: LD_VAR 0 5
60170: ARRAY
60171: PUSH
60172: LD_VAR 0 6
60176: PUSH
60177: LD_INT 2
60179: ARRAY
60180: PUSH
60181: LD_VAR 0 5
60185: ARRAY
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60191: LD_VAR 0 7
60195: PUSH
60196: LD_INT 1
60198: ARRAY
60199: PPUSH
60200: LD_VAR 0 7
60204: PUSH
60205: LD_INT 2
60207: ARRAY
60208: PPUSH
60209: CALL_OW 428
60213: PUSH
60214: LD_INT 0
60216: EQUAL
60217: IFFALSE 60270
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60219: LD_VAR 0 1
60223: PPUSH
60224: LD_VAR 0 7
60228: PUSH
60229: LD_INT 1
60231: ARRAY
60232: PPUSH
60233: LD_VAR 0 7
60237: PUSH
60238: LD_INT 2
60240: ARRAY
60241: PPUSH
60242: LD_VAR 0 3
60246: PPUSH
60247: CALL_OW 48
// result := IsPlaced ( unit ) ;
60251: LD_ADDR_VAR 0 4
60255: PUSH
60256: LD_VAR 0 1
60260: PPUSH
60261: CALL_OW 305
60265: ST_TO_ADDR
// exit ;
60266: POP
60267: POP
60268: GO 60274
// end ; end ;
60270: GO 60149
60272: POP
60273: POP
// end ;
60274: LD_VAR 0 4
60278: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60279: LD_INT 0
60281: PPUSH
60282: PPUSH
60283: PPUSH
// if not side or side > 8 then
60284: LD_VAR 0 1
60288: NOT
60289: PUSH
60290: LD_VAR 0 1
60294: PUSH
60295: LD_INT 8
60297: GREATER
60298: OR
60299: IFFALSE 60303
// exit ;
60301: GO 60490
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60303: LD_ADDR_VAR 0 4
60307: PUSH
60308: LD_INT 22
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 21
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PPUSH
60334: CALL_OW 69
60338: ST_TO_ADDR
// if not tmp then
60339: LD_VAR 0 4
60343: NOT
60344: IFFALSE 60348
// exit ;
60346: GO 60490
// enable_addtolog := true ;
60348: LD_ADDR_OWVAR 81
60352: PUSH
60353: LD_INT 1
60355: ST_TO_ADDR
// AddToLog ( [ ) ;
60356: LD_STRING [
60358: PPUSH
60359: CALL_OW 561
// for i in tmp do
60363: LD_ADDR_VAR 0 3
60367: PUSH
60368: LD_VAR 0 4
60372: PUSH
60373: FOR_IN
60374: IFFALSE 60481
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60376: LD_STRING [
60378: PUSH
60379: LD_VAR 0 3
60383: PPUSH
60384: CALL_OW 266
60388: STR
60389: PUSH
60390: LD_STRING , 
60392: STR
60393: PUSH
60394: LD_VAR 0 3
60398: PPUSH
60399: CALL_OW 250
60403: STR
60404: PUSH
60405: LD_STRING , 
60407: STR
60408: PUSH
60409: LD_VAR 0 3
60413: PPUSH
60414: CALL_OW 251
60418: STR
60419: PUSH
60420: LD_STRING , 
60422: STR
60423: PUSH
60424: LD_VAR 0 3
60428: PPUSH
60429: CALL_OW 254
60433: STR
60434: PUSH
60435: LD_STRING , 
60437: STR
60438: PUSH
60439: LD_VAR 0 3
60443: PPUSH
60444: LD_INT 1
60446: PPUSH
60447: CALL_OW 268
60451: STR
60452: PUSH
60453: LD_STRING , 
60455: STR
60456: PUSH
60457: LD_VAR 0 3
60461: PPUSH
60462: LD_INT 2
60464: PPUSH
60465: CALL_OW 268
60469: STR
60470: PUSH
60471: LD_STRING ],
60473: STR
60474: PPUSH
60475: CALL_OW 561
// end ;
60479: GO 60373
60481: POP
60482: POP
// AddToLog ( ]; ) ;
60483: LD_STRING ];
60485: PPUSH
60486: CALL_OW 561
// end ;
60490: LD_VAR 0 2
60494: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60495: LD_INT 0
60497: PPUSH
60498: PPUSH
60499: PPUSH
60500: PPUSH
60501: PPUSH
// if not area or not rate or not max then
60502: LD_VAR 0 1
60506: NOT
60507: PUSH
60508: LD_VAR 0 2
60512: NOT
60513: OR
60514: PUSH
60515: LD_VAR 0 4
60519: NOT
60520: OR
60521: IFFALSE 60525
// exit ;
60523: GO 60717
// while 1 do
60525: LD_INT 1
60527: IFFALSE 60717
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60529: LD_ADDR_VAR 0 9
60533: PUSH
60534: LD_VAR 0 1
60538: PPUSH
60539: LD_INT 1
60541: PPUSH
60542: CALL_OW 287
60546: PUSH
60547: LD_INT 10
60549: MUL
60550: ST_TO_ADDR
// r := rate / 10 ;
60551: LD_ADDR_VAR 0 7
60555: PUSH
60556: LD_VAR 0 2
60560: PUSH
60561: LD_INT 10
60563: DIVREAL
60564: ST_TO_ADDR
// time := 1 1$00 ;
60565: LD_ADDR_VAR 0 8
60569: PUSH
60570: LD_INT 2100
60572: ST_TO_ADDR
// if amount < min then
60573: LD_VAR 0 9
60577: PUSH
60578: LD_VAR 0 3
60582: LESS
60583: IFFALSE 60601
// r := r * 2 else
60585: LD_ADDR_VAR 0 7
60589: PUSH
60590: LD_VAR 0 7
60594: PUSH
60595: LD_INT 2
60597: MUL
60598: ST_TO_ADDR
60599: GO 60627
// if amount > max then
60601: LD_VAR 0 9
60605: PUSH
60606: LD_VAR 0 4
60610: GREATER
60611: IFFALSE 60627
// r := r / 2 ;
60613: LD_ADDR_VAR 0 7
60617: PUSH
60618: LD_VAR 0 7
60622: PUSH
60623: LD_INT 2
60625: DIVREAL
60626: ST_TO_ADDR
// time := time / r ;
60627: LD_ADDR_VAR 0 8
60631: PUSH
60632: LD_VAR 0 8
60636: PUSH
60637: LD_VAR 0 7
60641: DIVREAL
60642: ST_TO_ADDR
// if time < 0 then
60643: LD_VAR 0 8
60647: PUSH
60648: LD_INT 0
60650: LESS
60651: IFFALSE 60668
// time := time * - 1 ;
60653: LD_ADDR_VAR 0 8
60657: PUSH
60658: LD_VAR 0 8
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: MUL
60667: ST_TO_ADDR
// wait ( time ) ;
60668: LD_VAR 0 8
60672: PPUSH
60673: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60677: LD_INT 35
60679: PPUSH
60680: LD_INT 875
60682: PPUSH
60683: CALL_OW 12
60687: PPUSH
60688: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60692: LD_INT 1
60694: PPUSH
60695: LD_INT 5
60697: PPUSH
60698: CALL_OW 12
60702: PPUSH
60703: LD_VAR 0 1
60707: PPUSH
60708: LD_INT 1
60710: PPUSH
60711: CALL_OW 55
// end ;
60715: GO 60525
// end ;
60717: LD_VAR 0 5
60721: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60722: LD_INT 0
60724: PPUSH
60725: PPUSH
60726: PPUSH
60727: PPUSH
60728: PPUSH
60729: PPUSH
60730: PPUSH
60731: PPUSH
// if not turrets or not factories then
60732: LD_VAR 0 1
60736: NOT
60737: PUSH
60738: LD_VAR 0 2
60742: NOT
60743: OR
60744: IFFALSE 60748
// exit ;
60746: GO 61055
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60748: LD_ADDR_VAR 0 10
60752: PUSH
60753: LD_INT 5
60755: PUSH
60756: LD_INT 6
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: LD_INT 4
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: LD_INT 5
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 24
60790: PUSH
60791: LD_INT 25
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 23
60800: PUSH
60801: LD_INT 27
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 42
60814: PUSH
60815: LD_INT 43
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 44
60824: PUSH
60825: LD_INT 46
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 45
60834: PUSH
60835: LD_INT 47
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: ST_TO_ADDR
// result := [ ] ;
60852: LD_ADDR_VAR 0 3
60856: PUSH
60857: EMPTY
60858: ST_TO_ADDR
// for i in turrets do
60859: LD_ADDR_VAR 0 4
60863: PUSH
60864: LD_VAR 0 1
60868: PUSH
60869: FOR_IN
60870: IFFALSE 61053
// begin nat := GetNation ( i ) ;
60872: LD_ADDR_VAR 0 7
60876: PUSH
60877: LD_VAR 0 4
60881: PPUSH
60882: CALL_OW 248
60886: ST_TO_ADDR
// weapon := 0 ;
60887: LD_ADDR_VAR 0 8
60891: PUSH
60892: LD_INT 0
60894: ST_TO_ADDR
// if not nat then
60895: LD_VAR 0 7
60899: NOT
60900: IFFALSE 60904
// continue ;
60902: GO 60869
// for j in list [ nat ] do
60904: LD_ADDR_VAR 0 5
60908: PUSH
60909: LD_VAR 0 10
60913: PUSH
60914: LD_VAR 0 7
60918: ARRAY
60919: PUSH
60920: FOR_IN
60921: IFFALSE 60962
// if GetBWeapon ( i ) = j [ 1 ] then
60923: LD_VAR 0 4
60927: PPUSH
60928: CALL_OW 269
60932: PUSH
60933: LD_VAR 0 5
60937: PUSH
60938: LD_INT 1
60940: ARRAY
60941: EQUAL
60942: IFFALSE 60960
// begin weapon := j [ 2 ] ;
60944: LD_ADDR_VAR 0 8
60948: PUSH
60949: LD_VAR 0 5
60953: PUSH
60954: LD_INT 2
60956: ARRAY
60957: ST_TO_ADDR
// break ;
60958: GO 60962
// end ;
60960: GO 60920
60962: POP
60963: POP
// if not weapon then
60964: LD_VAR 0 8
60968: NOT
60969: IFFALSE 60973
// continue ;
60971: GO 60869
// for k in factories do
60973: LD_ADDR_VAR 0 6
60977: PUSH
60978: LD_VAR 0 2
60982: PUSH
60983: FOR_IN
60984: IFFALSE 61049
// begin weapons := AvailableWeaponList ( k ) ;
60986: LD_ADDR_VAR 0 9
60990: PUSH
60991: LD_VAR 0 6
60995: PPUSH
60996: CALL_OW 478
61000: ST_TO_ADDR
// if not weapons then
61001: LD_VAR 0 9
61005: NOT
61006: IFFALSE 61010
// continue ;
61008: GO 60983
// if weapon in weapons then
61010: LD_VAR 0 8
61014: PUSH
61015: LD_VAR 0 9
61019: IN
61020: IFFALSE 61047
// begin result := [ i , weapon ] ;
61022: LD_ADDR_VAR 0 3
61026: PUSH
61027: LD_VAR 0 4
61031: PUSH
61032: LD_VAR 0 8
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// exit ;
61041: POP
61042: POP
61043: POP
61044: POP
61045: GO 61055
// end ; end ;
61047: GO 60983
61049: POP
61050: POP
// end ;
61051: GO 60869
61053: POP
61054: POP
// end ;
61055: LD_VAR 0 3
61059: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61060: LD_INT 0
61062: PPUSH
// if not side or side > 8 then
61063: LD_VAR 0 3
61067: NOT
61068: PUSH
61069: LD_VAR 0 3
61073: PUSH
61074: LD_INT 8
61076: GREATER
61077: OR
61078: IFFALSE 61082
// exit ;
61080: GO 61141
// if not range then
61082: LD_VAR 0 4
61086: NOT
61087: IFFALSE 61098
// range := - 12 ;
61089: LD_ADDR_VAR 0 4
61093: PUSH
61094: LD_INT 12
61096: NEG
61097: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61098: LD_VAR 0 1
61102: PPUSH
61103: LD_VAR 0 2
61107: PPUSH
61108: LD_VAR 0 3
61112: PPUSH
61113: LD_VAR 0 4
61117: PPUSH
61118: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61122: LD_VAR 0 1
61126: PPUSH
61127: LD_VAR 0 2
61131: PPUSH
61132: LD_VAR 0 3
61136: PPUSH
61137: CALL_OW 331
// end ;
61141: LD_VAR 0 5
61145: RET
// export function Video ( mode ) ; begin
61146: LD_INT 0
61148: PPUSH
// ingame_video = mode ;
61149: LD_ADDR_OWVAR 52
61153: PUSH
61154: LD_VAR 0 1
61158: ST_TO_ADDR
// interface_hidden = mode ;
61159: LD_ADDR_OWVAR 54
61163: PUSH
61164: LD_VAR 0 1
61168: ST_TO_ADDR
// end ;
61169: LD_VAR 0 2
61173: RET
// export function Join ( array , element ) ; begin
61174: LD_INT 0
61176: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61177: LD_ADDR_VAR 0 3
61181: PUSH
61182: LD_VAR 0 1
61186: PPUSH
61187: LD_VAR 0 1
61191: PUSH
61192: LD_INT 1
61194: PLUS
61195: PPUSH
61196: LD_VAR 0 2
61200: PPUSH
61201: CALL_OW 1
61205: ST_TO_ADDR
// end ;
61206: LD_VAR 0 3
61210: RET
// export function JoinUnion ( array , element ) ; begin
61211: LD_INT 0
61213: PPUSH
// result := array union element ;
61214: LD_ADDR_VAR 0 3
61218: PUSH
61219: LD_VAR 0 1
61223: PUSH
61224: LD_VAR 0 2
61228: UNION
61229: ST_TO_ADDR
// end ;
61230: LD_VAR 0 3
61234: RET
// export function GetBehemoths ( side ) ; begin
61235: LD_INT 0
61237: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61238: LD_ADDR_VAR 0 2
61242: PUSH
61243: LD_INT 22
61245: PUSH
61246: LD_VAR 0 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 31
61257: PUSH
61258: LD_INT 25
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PPUSH
61269: CALL_OW 69
61273: ST_TO_ADDR
// end ;
61274: LD_VAR 0 2
61278: RET
// export function Shuffle ( array ) ; var i , index ; begin
61279: LD_INT 0
61281: PPUSH
61282: PPUSH
61283: PPUSH
// result := [ ] ;
61284: LD_ADDR_VAR 0 2
61288: PUSH
61289: EMPTY
61290: ST_TO_ADDR
// if not array then
61291: LD_VAR 0 1
61295: NOT
61296: IFFALSE 61300
// exit ;
61298: GO 61399
// Randomize ;
61300: CALL_OW 10
// for i = array downto 1 do
61304: LD_ADDR_VAR 0 3
61308: PUSH
61309: DOUBLE
61310: LD_VAR 0 1
61314: INC
61315: ST_TO_ADDR
61316: LD_INT 1
61318: PUSH
61319: FOR_DOWNTO
61320: IFFALSE 61397
// begin index := rand ( 1 , array ) ;
61322: LD_ADDR_VAR 0 4
61326: PUSH
61327: LD_INT 1
61329: PPUSH
61330: LD_VAR 0 1
61334: PPUSH
61335: CALL_OW 12
61339: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61340: LD_ADDR_VAR 0 2
61344: PUSH
61345: LD_VAR 0 2
61349: PPUSH
61350: LD_VAR 0 2
61354: PUSH
61355: LD_INT 1
61357: PLUS
61358: PPUSH
61359: LD_VAR 0 1
61363: PUSH
61364: LD_VAR 0 4
61368: ARRAY
61369: PPUSH
61370: CALL_OW 2
61374: ST_TO_ADDR
// array := Delete ( array , index ) ;
61375: LD_ADDR_VAR 0 1
61379: PUSH
61380: LD_VAR 0 1
61384: PPUSH
61385: LD_VAR 0 4
61389: PPUSH
61390: CALL_OW 3
61394: ST_TO_ADDR
// end ;
61395: GO 61319
61397: POP
61398: POP
// end ;
61399: LD_VAR 0 2
61403: RET
// export function GetBaseMaterials ( base ) ; begin
61404: LD_INT 0
61406: PPUSH
// result := [ 0 , 0 , 0 ] ;
61407: LD_ADDR_VAR 0 2
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: LIST
61425: ST_TO_ADDR
// if not base then
61426: LD_VAR 0 1
61430: NOT
61431: IFFALSE 61435
// exit ;
61433: GO 61484
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61435: LD_ADDR_VAR 0 2
61439: PUSH
61440: LD_VAR 0 1
61444: PPUSH
61445: LD_INT 1
61447: PPUSH
61448: CALL_OW 275
61452: PUSH
61453: LD_VAR 0 1
61457: PPUSH
61458: LD_INT 2
61460: PPUSH
61461: CALL_OW 275
61465: PUSH
61466: LD_VAR 0 1
61470: PPUSH
61471: LD_INT 3
61473: PPUSH
61474: CALL_OW 275
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: LIST
61483: ST_TO_ADDR
// end ;
61484: LD_VAR 0 2
61488: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61489: LD_INT 0
61491: PPUSH
61492: PPUSH
// result := array ;
61493: LD_ADDR_VAR 0 3
61497: PUSH
61498: LD_VAR 0 1
61502: ST_TO_ADDR
// if size > 0 then
61503: LD_VAR 0 2
61507: PUSH
61508: LD_INT 0
61510: GREATER
61511: IFFALSE 61557
// for i := array downto size do
61513: LD_ADDR_VAR 0 4
61517: PUSH
61518: DOUBLE
61519: LD_VAR 0 1
61523: INC
61524: ST_TO_ADDR
61525: LD_VAR 0 2
61529: PUSH
61530: FOR_DOWNTO
61531: IFFALSE 61555
// result := Delete ( result , result ) ;
61533: LD_ADDR_VAR 0 3
61537: PUSH
61538: LD_VAR 0 3
61542: PPUSH
61543: LD_VAR 0 3
61547: PPUSH
61548: CALL_OW 3
61552: ST_TO_ADDR
61553: GO 61530
61555: POP
61556: POP
// end ;
61557: LD_VAR 0 3
61561: RET
// export function ComExit ( unit ) ; var tmp ; begin
61562: LD_INT 0
61564: PPUSH
61565: PPUSH
// if not IsInUnit ( unit ) then
61566: LD_VAR 0 1
61570: PPUSH
61571: CALL_OW 310
61575: NOT
61576: IFFALSE 61580
// exit ;
61578: GO 61640
// tmp := IsInUnit ( unit ) ;
61580: LD_ADDR_VAR 0 3
61584: PUSH
61585: LD_VAR 0 1
61589: PPUSH
61590: CALL_OW 310
61594: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61595: LD_VAR 0 3
61599: PPUSH
61600: CALL_OW 247
61604: PUSH
61605: LD_INT 2
61607: EQUAL
61608: IFFALSE 61621
// ComExitVehicle ( unit ) else
61610: LD_VAR 0 1
61614: PPUSH
61615: CALL_OW 121
61619: GO 61630
// ComExitBuilding ( unit ) ;
61621: LD_VAR 0 1
61625: PPUSH
61626: CALL_OW 122
// result := tmp ;
61630: LD_ADDR_VAR 0 2
61634: PUSH
61635: LD_VAR 0 3
61639: ST_TO_ADDR
// end ;
61640: LD_VAR 0 2
61644: RET
// export function ComExitAll ( units ) ; var i ; begin
61645: LD_INT 0
61647: PPUSH
61648: PPUSH
// if not units then
61649: LD_VAR 0 1
61653: NOT
61654: IFFALSE 61658
// exit ;
61656: GO 61684
// for i in units do
61658: LD_ADDR_VAR 0 3
61662: PUSH
61663: LD_VAR 0 1
61667: PUSH
61668: FOR_IN
61669: IFFALSE 61682
// ComExit ( i ) ;
61671: LD_VAR 0 3
61675: PPUSH
61676: CALL 61562 0 1
61680: GO 61668
61682: POP
61683: POP
// end ;
61684: LD_VAR 0 2
61688: RET
// export function ResetHc ; begin
61689: LD_INT 0
61691: PPUSH
// InitHc ;
61692: CALL_OW 19
// hc_importance := 0 ;
61696: LD_ADDR_OWVAR 32
61700: PUSH
61701: LD_INT 0
61703: ST_TO_ADDR
// end ;
61704: LD_VAR 0 1
61708: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61709: LD_INT 0
61711: PPUSH
61712: PPUSH
61713: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61714: LD_ADDR_VAR 0 6
61718: PUSH
61719: LD_VAR 0 1
61723: PUSH
61724: LD_VAR 0 3
61728: PLUS
61729: PUSH
61730: LD_INT 2
61732: DIV
61733: ST_TO_ADDR
// if _x < 0 then
61734: LD_VAR 0 6
61738: PUSH
61739: LD_INT 0
61741: LESS
61742: IFFALSE 61759
// _x := _x * - 1 ;
61744: LD_ADDR_VAR 0 6
61748: PUSH
61749: LD_VAR 0 6
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: MUL
61758: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61759: LD_ADDR_VAR 0 7
61763: PUSH
61764: LD_VAR 0 2
61768: PUSH
61769: LD_VAR 0 4
61773: PLUS
61774: PUSH
61775: LD_INT 2
61777: DIV
61778: ST_TO_ADDR
// if _y < 0 then
61779: LD_VAR 0 7
61783: PUSH
61784: LD_INT 0
61786: LESS
61787: IFFALSE 61804
// _y := _y * - 1 ;
61789: LD_ADDR_VAR 0 7
61793: PUSH
61794: LD_VAR 0 7
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: MUL
61803: ST_TO_ADDR
// result := [ _x , _y ] ;
61804: LD_ADDR_VAR 0 5
61808: PUSH
61809: LD_VAR 0 6
61813: PUSH
61814: LD_VAR 0 7
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: ST_TO_ADDR
// end ;
61823: LD_VAR 0 5
61827: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61828: LD_INT 0
61830: PPUSH
61831: PPUSH
61832: PPUSH
61833: PPUSH
// task := GetTaskList ( unit ) ;
61834: LD_ADDR_VAR 0 7
61838: PUSH
61839: LD_VAR 0 1
61843: PPUSH
61844: CALL_OW 437
61848: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61849: LD_VAR 0 7
61853: NOT
61854: PUSH
61855: LD_VAR 0 1
61859: PPUSH
61860: LD_VAR 0 2
61864: PPUSH
61865: CALL_OW 308
61869: NOT
61870: AND
61871: IFFALSE 61875
// exit ;
61873: GO 61993
// if IsInArea ( unit , area ) then
61875: LD_VAR 0 1
61879: PPUSH
61880: LD_VAR 0 2
61884: PPUSH
61885: CALL_OW 308
61889: IFFALSE 61907
// begin ComMoveToArea ( unit , goAway ) ;
61891: LD_VAR 0 1
61895: PPUSH
61896: LD_VAR 0 3
61900: PPUSH
61901: CALL_OW 113
// exit ;
61905: GO 61993
// end ; if task [ 1 ] [ 1 ] <> M then
61907: LD_VAR 0 7
61911: PUSH
61912: LD_INT 1
61914: ARRAY
61915: PUSH
61916: LD_INT 1
61918: ARRAY
61919: PUSH
61920: LD_STRING M
61922: NONEQUAL
61923: IFFALSE 61927
// exit ;
61925: GO 61993
// x := task [ 1 ] [ 2 ] ;
61927: LD_ADDR_VAR 0 5
61931: PUSH
61932: LD_VAR 0 7
61936: PUSH
61937: LD_INT 1
61939: ARRAY
61940: PUSH
61941: LD_INT 2
61943: ARRAY
61944: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61945: LD_ADDR_VAR 0 6
61949: PUSH
61950: LD_VAR 0 7
61954: PUSH
61955: LD_INT 1
61957: ARRAY
61958: PUSH
61959: LD_INT 3
61961: ARRAY
61962: ST_TO_ADDR
// if InArea ( x , y , area ) then
61963: LD_VAR 0 5
61967: PPUSH
61968: LD_VAR 0 6
61972: PPUSH
61973: LD_VAR 0 2
61977: PPUSH
61978: CALL_OW 309
61982: IFFALSE 61993
// ComStop ( unit ) ;
61984: LD_VAR 0 1
61988: PPUSH
61989: CALL_OW 141
// end ;
61993: LD_VAR 0 4
61997: RET
// export function Abs ( value ) ; begin
61998: LD_INT 0
62000: PPUSH
// result := value ;
62001: LD_ADDR_VAR 0 2
62005: PUSH
62006: LD_VAR 0 1
62010: ST_TO_ADDR
// if value < 0 then
62011: LD_VAR 0 1
62015: PUSH
62016: LD_INT 0
62018: LESS
62019: IFFALSE 62036
// result := value * - 1 ;
62021: LD_ADDR_VAR 0 2
62025: PUSH
62026: LD_VAR 0 1
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: MUL
62035: ST_TO_ADDR
// end ;
62036: LD_VAR 0 2
62040: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62041: LD_INT 0
62043: PPUSH
62044: PPUSH
62045: PPUSH
62046: PPUSH
62047: PPUSH
62048: PPUSH
62049: PPUSH
62050: PPUSH
// if not unit or not building then
62051: LD_VAR 0 1
62055: NOT
62056: PUSH
62057: LD_VAR 0 2
62061: NOT
62062: OR
62063: IFFALSE 62067
// exit ;
62065: GO 62293
// x := GetX ( building ) ;
62067: LD_ADDR_VAR 0 4
62071: PUSH
62072: LD_VAR 0 2
62076: PPUSH
62077: CALL_OW 250
62081: ST_TO_ADDR
// y := GetY ( building ) ;
62082: LD_ADDR_VAR 0 6
62086: PUSH
62087: LD_VAR 0 2
62091: PPUSH
62092: CALL_OW 251
62096: ST_TO_ADDR
// d := GetDir ( building ) ;
62097: LD_ADDR_VAR 0 8
62101: PUSH
62102: LD_VAR 0 2
62106: PPUSH
62107: CALL_OW 254
62111: ST_TO_ADDR
// r := 4 ;
62112: LD_ADDR_VAR 0 9
62116: PUSH
62117: LD_INT 4
62119: ST_TO_ADDR
// for i := 1 to 5 do
62120: LD_ADDR_VAR 0 10
62124: PUSH
62125: DOUBLE
62126: LD_INT 1
62128: DEC
62129: ST_TO_ADDR
62130: LD_INT 5
62132: PUSH
62133: FOR_TO
62134: IFFALSE 62291
// begin _x := ShiftX ( x , d , r + i ) ;
62136: LD_ADDR_VAR 0 5
62140: PUSH
62141: LD_VAR 0 4
62145: PPUSH
62146: LD_VAR 0 8
62150: PPUSH
62151: LD_VAR 0 9
62155: PUSH
62156: LD_VAR 0 10
62160: PLUS
62161: PPUSH
62162: CALL_OW 272
62166: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62167: LD_ADDR_VAR 0 7
62171: PUSH
62172: LD_VAR 0 6
62176: PPUSH
62177: LD_VAR 0 8
62181: PPUSH
62182: LD_VAR 0 9
62186: PUSH
62187: LD_VAR 0 10
62191: PLUS
62192: PPUSH
62193: CALL_OW 273
62197: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62198: LD_VAR 0 5
62202: PPUSH
62203: LD_VAR 0 7
62207: PPUSH
62208: CALL_OW 488
62212: PUSH
62213: LD_VAR 0 5
62217: PPUSH
62218: LD_VAR 0 7
62222: PPUSH
62223: CALL_OW 428
62227: PPUSH
62228: CALL_OW 247
62232: PUSH
62233: LD_INT 3
62235: PUSH
62236: LD_INT 2
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: IN
62243: NOT
62244: AND
62245: IFFALSE 62289
// begin ComMoveXY ( unit , _x , _y ) ;
62247: LD_VAR 0 1
62251: PPUSH
62252: LD_VAR 0 5
62256: PPUSH
62257: LD_VAR 0 7
62261: PPUSH
62262: CALL_OW 111
// result := [ _x , _y ] ;
62266: LD_ADDR_VAR 0 3
62270: PUSH
62271: LD_VAR 0 5
62275: PUSH
62276: LD_VAR 0 7
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: ST_TO_ADDR
// exit ;
62285: POP
62286: POP
62287: GO 62293
// end ; end ;
62289: GO 62133
62291: POP
62292: POP
// end ;
62293: LD_VAR 0 3
62297: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62298: LD_INT 0
62300: PPUSH
62301: PPUSH
62302: PPUSH
// result := 0 ;
62303: LD_ADDR_VAR 0 3
62307: PUSH
62308: LD_INT 0
62310: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62311: LD_VAR 0 1
62315: PUSH
62316: LD_INT 0
62318: LESS
62319: PUSH
62320: LD_VAR 0 1
62324: PUSH
62325: LD_INT 8
62327: GREATER
62328: OR
62329: PUSH
62330: LD_VAR 0 2
62334: PUSH
62335: LD_INT 0
62337: LESS
62338: OR
62339: PUSH
62340: LD_VAR 0 2
62344: PUSH
62345: LD_INT 8
62347: GREATER
62348: OR
62349: IFFALSE 62353
// exit ;
62351: GO 62428
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62353: LD_ADDR_VAR 0 4
62357: PUSH
62358: LD_INT 22
62360: PUSH
62361: LD_VAR 0 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PPUSH
62370: CALL_OW 69
62374: PUSH
62375: FOR_IN
62376: IFFALSE 62426
// begin un := UnitShoot ( i ) ;
62378: LD_ADDR_VAR 0 5
62382: PUSH
62383: LD_VAR 0 4
62387: PPUSH
62388: CALL_OW 504
62392: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62393: LD_VAR 0 5
62397: PPUSH
62398: CALL_OW 255
62402: PUSH
62403: LD_VAR 0 1
62407: EQUAL
62408: IFFALSE 62424
// begin result := un ;
62410: LD_ADDR_VAR 0 3
62414: PUSH
62415: LD_VAR 0 5
62419: ST_TO_ADDR
// exit ;
62420: POP
62421: POP
62422: GO 62428
// end ; end ;
62424: GO 62375
62426: POP
62427: POP
// end ;
62428: LD_VAR 0 3
62432: RET
// export function GetCargoBay ( units ) ; begin
62433: LD_INT 0
62435: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62436: LD_ADDR_VAR 0 2
62440: PUSH
62441: LD_VAR 0 1
62445: PPUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 34
62451: PUSH
62452: LD_INT 12
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 34
62461: PUSH
62462: LD_INT 51
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 34
62471: PUSH
62472: LD_INT 32
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 34
62481: PUSH
62482: LD_EXP 98
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: PPUSH
62498: CALL_OW 72
62502: ST_TO_ADDR
// end ;
62503: LD_VAR 0 2
62507: RET
// export function Negate ( value ) ; begin
62508: LD_INT 0
62510: PPUSH
// result := not value ;
62511: LD_ADDR_VAR 0 2
62515: PUSH
62516: LD_VAR 0 1
62520: NOT
62521: ST_TO_ADDR
// end ;
62522: LD_VAR 0 2
62526: RET
// export function Inc ( value ) ; begin
62527: LD_INT 0
62529: PPUSH
// result := value + 1 ;
62530: LD_ADDR_VAR 0 2
62534: PUSH
62535: LD_VAR 0 1
62539: PUSH
62540: LD_INT 1
62542: PLUS
62543: ST_TO_ADDR
// end ;
62544: LD_VAR 0 2
62548: RET
// export function Dec ( value ) ; begin
62549: LD_INT 0
62551: PPUSH
// result := value - 1 ;
62552: LD_ADDR_VAR 0 2
62556: PUSH
62557: LD_VAR 0 1
62561: PUSH
62562: LD_INT 1
62564: MINUS
62565: ST_TO_ADDR
// end ;
62566: LD_VAR 0 2
62570: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62571: LD_INT 0
62573: PPUSH
62574: PPUSH
62575: PPUSH
62576: PPUSH
62577: PPUSH
62578: PPUSH
62579: PPUSH
62580: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62581: LD_VAR 0 1
62585: PPUSH
62586: LD_VAR 0 2
62590: PPUSH
62591: CALL_OW 488
62595: NOT
62596: PUSH
62597: LD_VAR 0 3
62601: PPUSH
62602: LD_VAR 0 4
62606: PPUSH
62607: CALL_OW 488
62611: NOT
62612: OR
62613: IFFALSE 62626
// begin result := - 1 ;
62615: LD_ADDR_VAR 0 5
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: ST_TO_ADDR
// exit ;
62624: GO 62861
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62626: LD_ADDR_VAR 0 12
62630: PUSH
62631: LD_VAR 0 1
62635: PPUSH
62636: LD_VAR 0 2
62640: PPUSH
62641: LD_VAR 0 3
62645: PPUSH
62646: LD_VAR 0 4
62650: PPUSH
62651: CALL 61709 0 4
62655: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62656: LD_ADDR_VAR 0 11
62660: PUSH
62661: LD_VAR 0 1
62665: PPUSH
62666: LD_VAR 0 2
62670: PPUSH
62671: LD_VAR 0 12
62675: PUSH
62676: LD_INT 1
62678: ARRAY
62679: PPUSH
62680: LD_VAR 0 12
62684: PUSH
62685: LD_INT 2
62687: ARRAY
62688: PPUSH
62689: CALL_OW 298
62693: ST_TO_ADDR
// distance := 9999 ;
62694: LD_ADDR_VAR 0 10
62698: PUSH
62699: LD_INT 9999
62701: ST_TO_ADDR
// for i := 0 to 5 do
62702: LD_ADDR_VAR 0 6
62706: PUSH
62707: DOUBLE
62708: LD_INT 0
62710: DEC
62711: ST_TO_ADDR
62712: LD_INT 5
62714: PUSH
62715: FOR_TO
62716: IFFALSE 62859
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62718: LD_ADDR_VAR 0 7
62722: PUSH
62723: LD_VAR 0 1
62727: PPUSH
62728: LD_VAR 0 6
62732: PPUSH
62733: LD_VAR 0 11
62737: PPUSH
62738: CALL_OW 272
62742: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62743: LD_ADDR_VAR 0 8
62747: PUSH
62748: LD_VAR 0 2
62752: PPUSH
62753: LD_VAR 0 6
62757: PPUSH
62758: LD_VAR 0 11
62762: PPUSH
62763: CALL_OW 273
62767: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62768: LD_VAR 0 7
62772: PPUSH
62773: LD_VAR 0 8
62777: PPUSH
62778: CALL_OW 488
62782: NOT
62783: IFFALSE 62787
// continue ;
62785: GO 62715
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62787: LD_ADDR_VAR 0 9
62791: PUSH
62792: LD_VAR 0 12
62796: PUSH
62797: LD_INT 1
62799: ARRAY
62800: PPUSH
62801: LD_VAR 0 12
62805: PUSH
62806: LD_INT 2
62808: ARRAY
62809: PPUSH
62810: LD_VAR 0 7
62814: PPUSH
62815: LD_VAR 0 8
62819: PPUSH
62820: CALL_OW 298
62824: ST_TO_ADDR
// if tmp < distance then
62825: LD_VAR 0 9
62829: PUSH
62830: LD_VAR 0 10
62834: LESS
62835: IFFALSE 62857
// begin result := i ;
62837: LD_ADDR_VAR 0 5
62841: PUSH
62842: LD_VAR 0 6
62846: ST_TO_ADDR
// distance := tmp ;
62847: LD_ADDR_VAR 0 10
62851: PUSH
62852: LD_VAR 0 9
62856: ST_TO_ADDR
// end ; end ;
62857: GO 62715
62859: POP
62860: POP
// end ;
62861: LD_VAR 0 5
62865: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62866: LD_INT 0
62868: PPUSH
62869: PPUSH
// if not driver or not IsInUnit ( driver ) then
62870: LD_VAR 0 1
62874: NOT
62875: PUSH
62876: LD_VAR 0 1
62880: PPUSH
62881: CALL_OW 310
62885: NOT
62886: OR
62887: IFFALSE 62891
// exit ;
62889: GO 62981
// vehicle := IsInUnit ( driver ) ;
62891: LD_ADDR_VAR 0 3
62895: PUSH
62896: LD_VAR 0 1
62900: PPUSH
62901: CALL_OW 310
62905: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62906: LD_VAR 0 1
62910: PPUSH
62911: LD_STRING \
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: PUSH
62941: LD_STRING E
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_VAR 0 3
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PPUSH
62977: CALL_OW 446
// end ;
62981: LD_VAR 0 2
62985: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62986: LD_INT 0
62988: PPUSH
62989: PPUSH
// if not driver or not IsInUnit ( driver ) then
62990: LD_VAR 0 1
62994: NOT
62995: PUSH
62996: LD_VAR 0 1
63000: PPUSH
63001: CALL_OW 310
63005: NOT
63006: OR
63007: IFFALSE 63011
// exit ;
63009: GO 63101
// vehicle := IsInUnit ( driver ) ;
63011: LD_ADDR_VAR 0 3
63015: PUSH
63016: LD_VAR 0 1
63020: PPUSH
63021: CALL_OW 310
63025: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63026: LD_VAR 0 1
63030: PPUSH
63031: LD_STRING \
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: PUSH
63061: LD_STRING E
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_VAR 0 3
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PPUSH
63097: CALL_OW 447
// end ;
63101: LD_VAR 0 2
63105: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63106: LD_INT 0
63108: PPUSH
63109: PPUSH
63110: PPUSH
// tmp := [ ] ;
63111: LD_ADDR_VAR 0 5
63115: PUSH
63116: EMPTY
63117: ST_TO_ADDR
// for i in units do
63118: LD_ADDR_VAR 0 4
63122: PUSH
63123: LD_VAR 0 1
63127: PUSH
63128: FOR_IN
63129: IFFALSE 63167
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63131: LD_ADDR_VAR 0 5
63135: PUSH
63136: LD_VAR 0 5
63140: PPUSH
63141: LD_VAR 0 5
63145: PUSH
63146: LD_INT 1
63148: PLUS
63149: PPUSH
63150: LD_VAR 0 4
63154: PPUSH
63155: CALL_OW 256
63159: PPUSH
63160: CALL_OW 2
63164: ST_TO_ADDR
63165: GO 63128
63167: POP
63168: POP
// if not tmp then
63169: LD_VAR 0 5
63173: NOT
63174: IFFALSE 63178
// exit ;
63176: GO 63226
// if asc then
63178: LD_VAR 0 2
63182: IFFALSE 63206
// result := SortListByListAsc ( units , tmp ) else
63184: LD_ADDR_VAR 0 3
63188: PUSH
63189: LD_VAR 0 1
63193: PPUSH
63194: LD_VAR 0 5
63198: PPUSH
63199: CALL_OW 76
63203: ST_TO_ADDR
63204: GO 63226
// result := SortListByListDesc ( units , tmp ) ;
63206: LD_ADDR_VAR 0 3
63210: PUSH
63211: LD_VAR 0 1
63215: PPUSH
63216: LD_VAR 0 5
63220: PPUSH
63221: CALL_OW 77
63225: ST_TO_ADDR
// end ;
63226: LD_VAR 0 3
63230: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63231: LD_INT 0
63233: PPUSH
63234: PPUSH
// task := GetTaskList ( mech ) ;
63235: LD_ADDR_VAR 0 4
63239: PUSH
63240: LD_VAR 0 1
63244: PPUSH
63245: CALL_OW 437
63249: ST_TO_ADDR
// if not task then
63250: LD_VAR 0 4
63254: NOT
63255: IFFALSE 63259
// exit ;
63257: GO 63301
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63259: LD_ADDR_VAR 0 3
63263: PUSH
63264: LD_VAR 0 4
63268: PUSH
63269: LD_INT 1
63271: ARRAY
63272: PUSH
63273: LD_INT 1
63275: ARRAY
63276: PUSH
63277: LD_STRING r
63279: EQUAL
63280: PUSH
63281: LD_VAR 0 4
63285: PUSH
63286: LD_INT 1
63288: ARRAY
63289: PUSH
63290: LD_INT 4
63292: ARRAY
63293: PUSH
63294: LD_VAR 0 2
63298: EQUAL
63299: AND
63300: ST_TO_ADDR
// end ;
63301: LD_VAR 0 3
63305: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63306: LD_INT 0
63308: PPUSH
// SetDir ( unit , d ) ;
63309: LD_VAR 0 1
63313: PPUSH
63314: LD_VAR 0 4
63318: PPUSH
63319: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63323: LD_VAR 0 1
63327: PPUSH
63328: LD_VAR 0 2
63332: PPUSH
63333: LD_VAR 0 3
63337: PPUSH
63338: LD_VAR 0 5
63342: PPUSH
63343: CALL_OW 48
// end ;
63347: LD_VAR 0 6
63351: RET
// export function ToNaturalNumber ( number ) ; begin
63352: LD_INT 0
63354: PPUSH
// result := number div 1 ;
63355: LD_ADDR_VAR 0 2
63359: PUSH
63360: LD_VAR 0 1
63364: PUSH
63365: LD_INT 1
63367: DIV
63368: ST_TO_ADDR
// if number < 0 then
63369: LD_VAR 0 1
63373: PUSH
63374: LD_INT 0
63376: LESS
63377: IFFALSE 63387
// result := 0 ;
63379: LD_ADDR_VAR 0 2
63383: PUSH
63384: LD_INT 0
63386: ST_TO_ADDR
// end ;
63387: LD_VAR 0 2
63391: RET
// export function SortByClass ( units , class ) ; var un ; begin
63392: LD_INT 0
63394: PPUSH
63395: PPUSH
// if not units or not class then
63396: LD_VAR 0 1
63400: NOT
63401: PUSH
63402: LD_VAR 0 2
63406: NOT
63407: OR
63408: IFFALSE 63412
// exit ;
63410: GO 63507
// result := [ ] ;
63412: LD_ADDR_VAR 0 3
63416: PUSH
63417: EMPTY
63418: ST_TO_ADDR
// for un in units do
63419: LD_ADDR_VAR 0 4
63423: PUSH
63424: LD_VAR 0 1
63428: PUSH
63429: FOR_IN
63430: IFFALSE 63505
// if GetClass ( un ) = class then
63432: LD_VAR 0 4
63436: PPUSH
63437: CALL_OW 257
63441: PUSH
63442: LD_VAR 0 2
63446: EQUAL
63447: IFFALSE 63474
// result := Insert ( result , 1 , un ) else
63449: LD_ADDR_VAR 0 3
63453: PUSH
63454: LD_VAR 0 3
63458: PPUSH
63459: LD_INT 1
63461: PPUSH
63462: LD_VAR 0 4
63466: PPUSH
63467: CALL_OW 2
63471: ST_TO_ADDR
63472: GO 63503
// result := Replace ( result , result + 1 , un ) ;
63474: LD_ADDR_VAR 0 3
63478: PUSH
63479: LD_VAR 0 3
63483: PPUSH
63484: LD_VAR 0 3
63488: PUSH
63489: LD_INT 1
63491: PLUS
63492: PPUSH
63493: LD_VAR 0 4
63497: PPUSH
63498: CALL_OW 1
63502: ST_TO_ADDR
63503: GO 63429
63505: POP
63506: POP
// end ;
63507: LD_VAR 0 3
63511: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63512: LD_INT 0
63514: PPUSH
63515: PPUSH
63516: PPUSH
63517: PPUSH
63518: PPUSH
63519: PPUSH
63520: PPUSH
// result := [ ] ;
63521: LD_ADDR_VAR 0 4
63525: PUSH
63526: EMPTY
63527: ST_TO_ADDR
// if x - r < 0 then
63528: LD_VAR 0 1
63532: PUSH
63533: LD_VAR 0 3
63537: MINUS
63538: PUSH
63539: LD_INT 0
63541: LESS
63542: IFFALSE 63554
// min_x := 0 else
63544: LD_ADDR_VAR 0 8
63548: PUSH
63549: LD_INT 0
63551: ST_TO_ADDR
63552: GO 63570
// min_x := x - r ;
63554: LD_ADDR_VAR 0 8
63558: PUSH
63559: LD_VAR 0 1
63563: PUSH
63564: LD_VAR 0 3
63568: MINUS
63569: ST_TO_ADDR
// if y - r < 0 then
63570: LD_VAR 0 2
63574: PUSH
63575: LD_VAR 0 3
63579: MINUS
63580: PUSH
63581: LD_INT 0
63583: LESS
63584: IFFALSE 63596
// min_y := 0 else
63586: LD_ADDR_VAR 0 7
63590: PUSH
63591: LD_INT 0
63593: ST_TO_ADDR
63594: GO 63612
// min_y := y - r ;
63596: LD_ADDR_VAR 0 7
63600: PUSH
63601: LD_VAR 0 2
63605: PUSH
63606: LD_VAR 0 3
63610: MINUS
63611: ST_TO_ADDR
// max_x := x + r ;
63612: LD_ADDR_VAR 0 9
63616: PUSH
63617: LD_VAR 0 1
63621: PUSH
63622: LD_VAR 0 3
63626: PLUS
63627: ST_TO_ADDR
// max_y := y + r ;
63628: LD_ADDR_VAR 0 10
63632: PUSH
63633: LD_VAR 0 2
63637: PUSH
63638: LD_VAR 0 3
63642: PLUS
63643: ST_TO_ADDR
// for _x = min_x to max_x do
63644: LD_ADDR_VAR 0 5
63648: PUSH
63649: DOUBLE
63650: LD_VAR 0 8
63654: DEC
63655: ST_TO_ADDR
63656: LD_VAR 0 9
63660: PUSH
63661: FOR_TO
63662: IFFALSE 63763
// for _y = min_y to max_y do
63664: LD_ADDR_VAR 0 6
63668: PUSH
63669: DOUBLE
63670: LD_VAR 0 7
63674: DEC
63675: ST_TO_ADDR
63676: LD_VAR 0 10
63680: PUSH
63681: FOR_TO
63682: IFFALSE 63759
// begin if not ValidHex ( _x , _y ) then
63684: LD_VAR 0 5
63688: PPUSH
63689: LD_VAR 0 6
63693: PPUSH
63694: CALL_OW 488
63698: NOT
63699: IFFALSE 63703
// continue ;
63701: GO 63681
// if GetResourceTypeXY ( _x , _y ) then
63703: LD_VAR 0 5
63707: PPUSH
63708: LD_VAR 0 6
63712: PPUSH
63713: CALL_OW 283
63717: IFFALSE 63757
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63719: LD_ADDR_VAR 0 4
63723: PUSH
63724: LD_VAR 0 4
63728: PPUSH
63729: LD_VAR 0 4
63733: PUSH
63734: LD_INT 1
63736: PLUS
63737: PPUSH
63738: LD_VAR 0 5
63742: PUSH
63743: LD_VAR 0 6
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PPUSH
63752: CALL_OW 1
63756: ST_TO_ADDR
// end ;
63757: GO 63681
63759: POP
63760: POP
63761: GO 63661
63763: POP
63764: POP
// end ;
63765: LD_VAR 0 4
63769: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63770: LD_INT 0
63772: PPUSH
63773: PPUSH
63774: PPUSH
63775: PPUSH
63776: PPUSH
63777: PPUSH
63778: PPUSH
63779: PPUSH
// if not units then
63780: LD_VAR 0 1
63784: NOT
63785: IFFALSE 63789
// exit ;
63787: GO 64214
// result := UnitFilter ( units , [ f_ok ] ) ;
63789: LD_ADDR_VAR 0 3
63793: PUSH
63794: LD_VAR 0 1
63798: PPUSH
63799: LD_INT 50
63801: PUSH
63802: EMPTY
63803: LIST
63804: PPUSH
63805: CALL_OW 72
63809: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63810: LD_ADDR_VAR 0 8
63814: PUSH
63815: LD_VAR 0 1
63819: PUSH
63820: LD_INT 1
63822: ARRAY
63823: PPUSH
63824: CALL_OW 255
63828: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
63829: LD_ADDR_VAR 0 10
63833: PUSH
63834: LD_INT 29
63836: PUSH
63837: LD_EXP 101
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: ST_TO_ADDR
// if not result then
63846: LD_VAR 0 3
63850: NOT
63851: IFFALSE 63855
// exit ;
63853: GO 64214
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63855: LD_ADDR_VAR 0 5
63859: PUSH
63860: LD_INT 81
63862: PUSH
63863: LD_VAR 0 8
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PPUSH
63872: CALL_OW 69
63876: ST_TO_ADDR
// for i in result do
63877: LD_ADDR_VAR 0 4
63881: PUSH
63882: LD_VAR 0 3
63886: PUSH
63887: FOR_IN
63888: IFFALSE 64212
// begin tag := GetTag ( i ) + 1 ;
63890: LD_ADDR_VAR 0 9
63894: PUSH
63895: LD_VAR 0 4
63899: PPUSH
63900: CALL_OW 110
63904: PUSH
63905: LD_INT 1
63907: PLUS
63908: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63909: LD_ADDR_VAR 0 7
63913: PUSH
63914: LD_VAR 0 4
63918: PPUSH
63919: CALL_OW 250
63923: PPUSH
63924: LD_VAR 0 4
63928: PPUSH
63929: CALL_OW 251
63933: PPUSH
63934: LD_INT 6
63936: PPUSH
63937: CALL 63512 0 3
63941: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63942: LD_VAR 0 7
63946: PUSH
63947: LD_VAR 0 4
63951: PPUSH
63952: CALL_OW 264
63956: PUSH
63957: LD_VAR 0 10
63961: IN
63962: NOT
63963: AND
63964: IFFALSE 64003
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63966: LD_VAR 0 4
63970: PPUSH
63971: LD_VAR 0 7
63975: PUSH
63976: LD_INT 1
63978: ARRAY
63979: PUSH
63980: LD_INT 1
63982: ARRAY
63983: PPUSH
63984: LD_VAR 0 7
63988: PUSH
63989: LD_INT 1
63991: ARRAY
63992: PUSH
63993: LD_INT 2
63995: ARRAY
63996: PPUSH
63997: CALL_OW 116
64001: GO 64210
// if path > tag then
64003: LD_VAR 0 2
64007: PUSH
64008: LD_VAR 0 9
64012: GREATER
64013: IFFALSE 64180
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64015: LD_ADDR_VAR 0 6
64019: PUSH
64020: LD_VAR 0 5
64024: PPUSH
64025: LD_INT 91
64027: PUSH
64028: LD_VAR 0 4
64032: PUSH
64033: LD_INT 12
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: LIST
64040: PPUSH
64041: CALL_OW 72
64045: ST_TO_ADDR
// if nearEnemy then
64046: LD_VAR 0 6
64050: IFFALSE 64078
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64052: LD_VAR 0 4
64056: PPUSH
64057: LD_VAR 0 6
64061: PPUSH
64062: LD_VAR 0 4
64066: PPUSH
64067: CALL_OW 74
64071: PPUSH
64072: CALL_OW 115
64076: GO 64178
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64078: LD_VAR 0 4
64082: PPUSH
64083: LD_VAR 0 2
64087: PUSH
64088: LD_VAR 0 9
64092: ARRAY
64093: PUSH
64094: LD_INT 1
64096: ARRAY
64097: PPUSH
64098: LD_VAR 0 2
64102: PUSH
64103: LD_VAR 0 9
64107: ARRAY
64108: PUSH
64109: LD_INT 2
64111: ARRAY
64112: PPUSH
64113: CALL_OW 297
64117: PUSH
64118: LD_INT 6
64120: GREATER
64121: IFFALSE 64164
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64123: LD_VAR 0 4
64127: PPUSH
64128: LD_VAR 0 2
64132: PUSH
64133: LD_VAR 0 9
64137: ARRAY
64138: PUSH
64139: LD_INT 1
64141: ARRAY
64142: PPUSH
64143: LD_VAR 0 2
64147: PUSH
64148: LD_VAR 0 9
64152: ARRAY
64153: PUSH
64154: LD_INT 2
64156: ARRAY
64157: PPUSH
64158: CALL_OW 114
64162: GO 64178
// SetTag ( i , tag ) ;
64164: LD_VAR 0 4
64168: PPUSH
64169: LD_VAR 0 9
64173: PPUSH
64174: CALL_OW 109
// end else
64178: GO 64210
// if enemy then
64180: LD_VAR 0 5
64184: IFFALSE 64210
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64186: LD_VAR 0 4
64190: PPUSH
64191: LD_VAR 0 5
64195: PPUSH
64196: LD_VAR 0 4
64200: PPUSH
64201: CALL_OW 74
64205: PPUSH
64206: CALL_OW 115
// end ;
64210: GO 63887
64212: POP
64213: POP
// end ;
64214: LD_VAR 0 3
64218: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64219: LD_INT 0
64221: PPUSH
64222: PPUSH
64223: PPUSH
// if not unit or IsInUnit ( unit ) then
64224: LD_VAR 0 1
64228: NOT
64229: PUSH
64230: LD_VAR 0 1
64234: PPUSH
64235: CALL_OW 310
64239: OR
64240: IFFALSE 64244
// exit ;
64242: GO 64335
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64244: LD_ADDR_VAR 0 4
64248: PUSH
64249: LD_VAR 0 1
64253: PPUSH
64254: CALL_OW 250
64258: PPUSH
64259: LD_VAR 0 2
64263: PPUSH
64264: LD_INT 1
64266: PPUSH
64267: CALL_OW 272
64271: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64272: LD_ADDR_VAR 0 5
64276: PUSH
64277: LD_VAR 0 1
64281: PPUSH
64282: CALL_OW 251
64286: PPUSH
64287: LD_VAR 0 2
64291: PPUSH
64292: LD_INT 1
64294: PPUSH
64295: CALL_OW 273
64299: ST_TO_ADDR
// if ValidHex ( x , y ) then
64300: LD_VAR 0 4
64304: PPUSH
64305: LD_VAR 0 5
64309: PPUSH
64310: CALL_OW 488
64314: IFFALSE 64335
// ComTurnXY ( unit , x , y ) ;
64316: LD_VAR 0 1
64320: PPUSH
64321: LD_VAR 0 4
64325: PPUSH
64326: LD_VAR 0 5
64330: PPUSH
64331: CALL_OW 118
// end ;
64335: LD_VAR 0 3
64339: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64340: LD_INT 0
64342: PPUSH
64343: PPUSH
// result := false ;
64344: LD_ADDR_VAR 0 3
64348: PUSH
64349: LD_INT 0
64351: ST_TO_ADDR
// if not units then
64352: LD_VAR 0 2
64356: NOT
64357: IFFALSE 64361
// exit ;
64359: GO 64406
// for i in units do
64361: LD_ADDR_VAR 0 4
64365: PUSH
64366: LD_VAR 0 2
64370: PUSH
64371: FOR_IN
64372: IFFALSE 64404
// if See ( side , i ) then
64374: LD_VAR 0 1
64378: PPUSH
64379: LD_VAR 0 4
64383: PPUSH
64384: CALL_OW 292
64388: IFFALSE 64402
// begin result := true ;
64390: LD_ADDR_VAR 0 3
64394: PUSH
64395: LD_INT 1
64397: ST_TO_ADDR
// exit ;
64398: POP
64399: POP
64400: GO 64406
// end ;
64402: GO 64371
64404: POP
64405: POP
// end ;
64406: LD_VAR 0 3
64410: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64411: LD_INT 0
64413: PPUSH
64414: PPUSH
64415: PPUSH
64416: PPUSH
// if not unit or not points then
64417: LD_VAR 0 1
64421: NOT
64422: PUSH
64423: LD_VAR 0 2
64427: NOT
64428: OR
64429: IFFALSE 64433
// exit ;
64431: GO 64523
// dist := 99999 ;
64433: LD_ADDR_VAR 0 5
64437: PUSH
64438: LD_INT 99999
64440: ST_TO_ADDR
// for i in points do
64441: LD_ADDR_VAR 0 4
64445: PUSH
64446: LD_VAR 0 2
64450: PUSH
64451: FOR_IN
64452: IFFALSE 64521
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64454: LD_ADDR_VAR 0 6
64458: PUSH
64459: LD_VAR 0 1
64463: PPUSH
64464: LD_VAR 0 4
64468: PUSH
64469: LD_INT 1
64471: ARRAY
64472: PPUSH
64473: LD_VAR 0 4
64477: PUSH
64478: LD_INT 2
64480: ARRAY
64481: PPUSH
64482: CALL_OW 297
64486: ST_TO_ADDR
// if tmpDist < dist then
64487: LD_VAR 0 6
64491: PUSH
64492: LD_VAR 0 5
64496: LESS
64497: IFFALSE 64519
// begin result := i ;
64499: LD_ADDR_VAR 0 3
64503: PUSH
64504: LD_VAR 0 4
64508: ST_TO_ADDR
// dist := tmpDist ;
64509: LD_ADDR_VAR 0 5
64513: PUSH
64514: LD_VAR 0 6
64518: ST_TO_ADDR
// end ; end ;
64519: GO 64451
64521: POP
64522: POP
// end ; end_of_file
64523: LD_VAR 0 3
64527: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64528: LD_VAR 0 1
64532: PUSH
64533: LD_INT 200
64535: DOUBLE
64536: GREATEREQUAL
64537: IFFALSE 64545
64539: LD_INT 299
64541: DOUBLE
64542: LESSEQUAL
64543: IFTRUE 64547
64545: GO 64579
64547: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64548: LD_VAR 0 1
64552: PPUSH
64553: LD_VAR 0 2
64557: PPUSH
64558: LD_VAR 0 3
64562: PPUSH
64563: LD_VAR 0 4
64567: PPUSH
64568: LD_VAR 0 5
64572: PPUSH
64573: CALL 20386 0 5
64577: GO 64656
64579: LD_INT 300
64581: DOUBLE
64582: GREATEREQUAL
64583: IFFALSE 64591
64585: LD_INT 399
64587: DOUBLE
64588: LESSEQUAL
64589: IFTRUE 64593
64591: GO 64655
64593: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64594: LD_VAR 0 1
64598: PPUSH
64599: LD_VAR 0 2
64603: PPUSH
64604: LD_VAR 0 3
64608: PPUSH
64609: LD_VAR 0 4
64613: PPUSH
64614: LD_VAR 0 5
64618: PPUSH
64619: LD_VAR 0 6
64623: PPUSH
64624: LD_VAR 0 7
64628: PPUSH
64629: LD_VAR 0 8
64633: PPUSH
64634: LD_VAR 0 9
64638: PPUSH
64639: LD_VAR 0 10
64643: PPUSH
64644: LD_VAR 0 11
64648: PPUSH
64649: CALL 18284 0 11
64653: GO 64656
64655: POP
// end ;
64656: PPOPN 11
64658: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64659: LD_VAR 0 1
64663: PPUSH
64664: LD_VAR 0 2
64668: PPUSH
64669: LD_VAR 0 3
64673: PPUSH
64674: LD_VAR 0 4
64678: PPUSH
64679: LD_VAR 0 5
64683: PPUSH
64684: CALL 20378 0 5
// end ; end_of_file
64688: PPOPN 5
64690: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64691: LD_VAR 0 1
64695: PPUSH
64696: LD_VAR 0 2
64700: PPUSH
64701: LD_VAR 0 3
64705: PPUSH
64706: LD_VAR 0 4
64710: PPUSH
64711: LD_VAR 0 5
64715: PPUSH
64716: LD_VAR 0 6
64720: PPUSH
64721: CALL 6479 0 6
// end ;
64725: PPOPN 6
64727: END
