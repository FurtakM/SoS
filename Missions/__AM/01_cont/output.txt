// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1114 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2673 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 23769 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 23769 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 23769 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1109
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1109
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; end ;
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1109
1108: POP
// end ; end_of_file
1109: LD_VAR 0 1
1113: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 2
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_OWVAR 67
1143: ARRAY
1144: ST_TO_ADDR
// uc_side := 3 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// uc_nation := 3 ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1161: LD_ADDR_EXP 26
1165: PUSH
1166: LD_STRING Pokryshkin
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: LD_STRING 
1174: PPUSH
1175: CALL 23769 0 3
1179: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1180: LD_EXP 26
1184: PPUSH
1185: LD_INT 44
1187: PPUSH
1188: LD_INT 5
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 48
// hc_importance := 0 ;
1198: LD_ADDR_OWVAR 32
1202: PUSH
1203: LD_INT 0
1205: ST_TO_ADDR
// hc_gallery :=  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name :=  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1222: LD_INT 1
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_VAR 0 2
1232: PPUSH
1233: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 69 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 69
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1261: LD_ADDR_OWVAR 26
1265: PUSH
1266: LD_STRING Ilja Ivanov
1268: ST_TO_ADDR
// un := CreateHuman ;
1269: LD_ADDR_VAR 0 4
1273: PUSH
1274: CALL_OW 44
1278: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1279: LD_ADDR_EXP 21
1283: PUSH
1284: LD_EXP 21
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: CALL_OW 2
1301: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 3
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 2
1327: PPUSH
1328: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING SecondCharsGal
1339: ST_TO_ADDR
// hc_face_number := 70 ;
1340: LD_ADDR_OWVAR 34
1344: PUSH
1345: LD_INT 70
1347: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1348: LD_ADDR_OWVAR 26
1352: PUSH
1353: LD_STRING Pavel Starczy
1355: ST_TO_ADDR
// un := CreateHuman ;
1356: LD_ADDR_VAR 0 4
1360: PUSH
1361: CALL_OW 44
1365: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1366: LD_ADDR_EXP 21
1370: PUSH
1371: LD_EXP 21
1375: PPUSH
1376: LD_INT 2
1378: PPUSH
1379: LD_VAR 0 4
1383: PPUSH
1384: CALL_OW 2
1388: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1389: LD_VAR 0 4
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// InitHc ;
1404: CALL_OW 19
// for i = 1 to 7 do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_INT 7
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1573
// begin PrepareHuman ( false , 1 , skill ) ;
1424: LD_INT 0
1426: PPUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_VAR 0 2
1434: PPUSH
1435: CALL_OW 380
// un := CreateHuman ;
1439: LD_ADDR_VAR 0 4
1443: PUSH
1444: CALL_OW 44
1448: ST_TO_ADDR
// if i mod 2 = 0 then
1449: LD_VAR 0 3
1453: PUSH
1454: LD_INT 2
1456: MOD
1457: PUSH
1458: LD_INT 0
1460: EQUAL
1461: IFFALSE 1518
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1463: LD_ADDR_EXP 21
1467: PUSH
1468: LD_EXP 21
1472: PPUSH
1473: LD_EXP 21
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: PPUSH
1482: LD_VAR 0 4
1486: PPUSH
1487: CALL_OW 2
1491: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1492: LD_VAR 0 4
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL_OW 49
// ComHold ( un ) ;
1507: LD_VAR 0 4
1511: PPUSH
1512: CALL_OW 140
// end else
1516: GO 1571
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1518: LD_ADDR_EXP 22
1522: PUSH
1523: LD_EXP 22
1527: PPUSH
1528: LD_EXP 22
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 2
1546: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_INT 4
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// ComHold ( un ) ;
1562: LD_VAR 0 4
1566: PPUSH
1567: CALL_OW 140
// end ; end ;
1571: GO 1421
1573: POP
1574: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 30
1592: PUSH
1593: LD_INT 31
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 69
1608: PUSH
1609: FOR_IN
1610: IFFALSE 1628
// PrepareSolBun ( skill , i ) ;
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 3
1621: PPUSH
1622: CALL 197 0 2
1626: GO 1609
1628: POP
1629: POP
// for i = 1 to 2 do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 2
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1775
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_INT 3
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: LD_INT 22
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: LD_INT 42
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 333 0 7
1676: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1677: LD_INT 0
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_VAR 0 2
1687: PPUSH
1688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1692: CALL_OW 44
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1706: LD_VAR 0 4
1710: PPUSH
1711: LD_INT 23
1713: PUSH
1714: LD_INT 131
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_VAR 0 3
1725: ARRAY
1726: PPUSH
1727: LD_INT 14
1729: PUSH
1730: LD_INT 87
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_VAR 0 3
1741: ARRAY
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1750: LD_ADDR_EXP 23
1754: PUSH
1755: LD_EXP 23
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_VAR 0 4
1767: PPUSH
1768: CALL_OW 2
1772: ST_TO_ADDR
// end ;
1773: GO 1643
1775: POP
1776: POP
// for i = 1 to 2 do
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: DOUBLE
1783: LD_INT 1
1785: DEC
1786: ST_TO_ADDR
1787: LD_INT 2
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1882
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1793: LD_INT 2
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_VAR 0 3
1811: ARRAY
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: CALL_OW 380
// un := CreateHuman ;
1823: LD_ADDR_VAR 0 4
1827: PUSH
1828: CALL_OW 44
1832: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1833: LD_ADDR_EXP 24
1837: PUSH
1838: LD_EXP 24
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_VAR 0 4
1850: PPUSH
1851: CALL_OW 2
1855: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 10
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// ComHold ( un ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: CALL_OW 140
// end ;
1880: GO 1790
1882: POP
1883: POP
// if Difficulty < 3 then
1884: LD_OWVAR 67
1888: PUSH
1889: LD_INT 3
1891: LESS
1892: IFFALSE 1896
// exit ;
1894: GO 1939
// PrepareHuman ( false , 1 , skill ) ;
1896: LD_INT 0
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: LD_VAR 0 2
1906: PPUSH
1907: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1911: LD_ADDR_EXP 25
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1921: LD_EXP 25
1925: PPUSH
1926: LD_INT 82
1928: PPUSH
1929: LD_INT 2
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// end ;
1939: LD_VAR 0 1
1943: RET
// every 0 0$01 trigger active_road_patrol do
1944: LD_EXP 8
1948: IFFALSE 2014
1950: GO 1952
1952: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1953: LD_EXP 23
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: LD_STRING road
1964: PPUSH
1965: LD_INT 70
1967: PPUSH
1968: LD_INT 131
1970: PUSH
1971: LD_INT 87
1973: PUSH
1974: LD_INT 107
1976: PUSH
1977: LD_INT 75
1979: PUSH
1980: LD_INT 107
1982: PUSH
1983: LD_INT 66
1985: PUSH
1986: LD_INT 114
1988: PUSH
1989: LD_INT 61
1991: PUSH
1992: LD_INT 107
1994: PUSH
1995: LD_INT 34
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: PPUSH
2010: CALL 421 0 4
2014: END
// every 0 0$01 trigger active_road_patrol do
2015: LD_EXP 8
2019: IFFALSE 2077
2021: GO 2023
2023: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2024: LD_EXP 23
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_STRING road
2035: PPUSH
2036: LD_INT 70
2038: PPUSH
2039: LD_INT 21
2041: PUSH
2042: LD_INT 12
2044: PUSH
2045: LD_INT 37
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 65
2053: PUSH
2054: LD_INT 62
2056: PUSH
2057: LD_INT 107
2059: PUSH
2060: LD_INT 76
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL 421 0 4
2077: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2078: LD_EXP 25
2082: PPUSH
2083: CALL_OW 302
2087: IFFALSE 2149
2089: GO 2091
2091: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2092: LD_EXP 25
2096: PPUSH
2097: LD_STRING forest
2099: PPUSH
2100: LD_INT 35
2102: PPUSH
2103: LD_INT 52
2105: PUSH
2106: LD_INT 15
2108: PUSH
2109: LD_INT 81
2111: PUSH
2112: LD_INT 9
2114: PUSH
2115: LD_INT 120
2117: PUSH
2118: LD_INT 52
2120: PUSH
2121: LD_INT 135
2123: PUSH
2124: LD_INT 80
2126: PUSH
2127: LD_INT 122
2129: PUSH
2130: LD_INT 95
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL 421 0 4
2149: END
// every 0 0$01 trigger macmilan_use_radio do
2150: LD_EXP 6
2154: IFFALSE 2215
2156: GO 2158
2158: DISABLE
// begin active_road_patrol := false ;
2159: LD_ADDR_EXP 8
2163: PUSH
2164: LD_INT 0
2166: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2167: LD_EXP 23
2171: PPUSH
2172: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2176: LD_EXP 23
2180: PPUSH
2181: LD_INT 72
2183: PPUSH
2184: LD_INT 41
2186: PPUSH
2187: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2191: LD_EXP 22
2195: PPUSH
2196: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2200: LD_EXP 22
2204: PPUSH
2205: LD_INT 72
2207: PPUSH
2208: LD_INT 41
2210: PPUSH
2211: CALL_OW 174
// end ;
2215: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2216: LD_INT 9
2218: PPUSH
2219: LD_INT 22
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 70
2233: IFFALSE 2307
2235: GO 2237
2237: DISABLE
2238: LD_INT 0
2240: PPUSH
// begin enable ;
2241: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2242: LD_ADDR_VAR 0 1
2246: PUSH
2247: LD_INT 9
2249: PPUSH
2250: LD_INT 22
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 70
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2269: LD_EXP 22
2273: PPUSH
2274: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2278: LD_EXP 22
2282: PPUSH
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 250
2292: PPUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 251
2302: PPUSH
2303: CALL_OW 174
// end ;
2307: PPOPN 1
2309: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2310: LD_EXP 23
2314: PUSH
2315: LD_INT 1
2317: ARRAY
2318: PPUSH
2319: CALL_OW 256
2323: PUSH
2324: LD_INT 999
2326: LESS
2327: PUSH
2328: LD_EXP 23
2332: PUSH
2333: LD_INT 2
2335: ARRAY
2336: PPUSH
2337: CALL_OW 256
2341: PUSH
2342: LD_INT 999
2344: LESS
2345: OR
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_EXP 16
2354: PPUSH
2355: CALL_OW 292
2359: AND
2360: IFFALSE 2387
2362: GO 2364
2364: DISABLE
// begin active_road_patrol := false ;
2365: LD_ADDR_EXP 8
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2373: LD_EXP 23
2377: PPUSH
2378: LD_EXP 16
2382: PPUSH
2383: CALL_OW 115
// end ;
2387: END
// every 0 0$01 trigger macmilan_in_trap do
2388: LD_EXP 9
2392: IFFALSE 2438
2394: GO 2396
2396: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2397: LD_EXP 22
2401: PPUSH
2402: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2406: LD_EXP 21
2410: PUSH
2411: LD_EXP 22
2415: ADD
2416: PUSH
2417: LD_EXP 26
2421: ADD
2422: PUSH
2423: LD_EXP 23
2427: ADD
2428: PPUSH
2429: LD_EXP 16
2433: PPUSH
2434: CALL_OW 115
// end ;
2438: END
// every 0 0$01 trigger meta_action do
2439: LD_EXP 10
2443: IFFALSE 2489
2445: GO 2447
2447: DISABLE
// begin active_road_patrol := false ;
2448: LD_ADDR_EXP 8
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2456: LD_EXP 21
2460: PUSH
2461: LD_EXP 22
2465: ADD
2466: PUSH
2467: LD_EXP 26
2471: ADD
2472: PUSH
2473: LD_EXP 23
2477: ADD
2478: PPUSH
2479: LD_INT 93
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 114
// end ;
2489: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2490: LD_EXP 26
2494: PPUSH
2495: CALL_OW 256
2499: PUSH
2500: LD_INT 1000
2502: LESS
2503: IFFALSE 2554
2505: GO 2507
2507: DISABLE
// begin enable ;
2508: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2509: LD_INT 18
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 428
2519: PUSH
2520: LD_EXP 26
2524: EQUAL
2525: IFFALSE 2539
// begin RemoveUnit ( Pokryshkin ) ;
2527: LD_EXP 26
2531: PPUSH
2532: CALL_OW 64
// disable ;
2536: DISABLE
// end else
2537: GO 2554
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2539: LD_EXP 26
2543: PPUSH
2544: LD_INT 18
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 111
// end ;
2554: END
// every 0 0$20 trigger send_troops_to_forest do
2555: LD_EXP 14
2559: IFFALSE 2613
2561: GO 2563
2563: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 302
2573: NOT
2574: IFFALSE 2578
// exit ;
2576: GO 2613
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2578: LD_EXP 21
2582: PUSH
2583: LD_EXP 26
2587: ADD
2588: PPUSH
2589: LD_EXP 25
2593: PPUSH
2594: CALL_OW 252
2598: PPUSH
2599: LD_EXP 25
2603: PPUSH
2604: CALL_OW 253
2608: PPUSH
2609: CALL_OW 114
// end ;
2613: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 255
2623: PUSH
2624: LD_INT 3
2626: EQUAL
2627: IFFALSE 2670
// begin wait ( 11 ) ;
2629: LD_INT 11
2631: PPUSH
2632: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2636: LD_VAR 0 1
2640: PPUSH
2641: LD_INT 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: PPUSH
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 74
2665: PPUSH
2666: CALL_OW 120
// end ; end ; end_of_file
2670: PPOPN 4
2672: END
// export function Action ; var i ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: LD_INT 22
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2725
// ComHold ( i ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: CALL_OW 140
2723: GO 2711
2725: POP
2726: POP
// InGameOn ;
2727: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2731: LD_INT 79
2733: PPUSH
2734: LD_INT 76
2736: PPUSH
2737: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2741: LD_INT 10
2743: PPUSH
2744: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2748: LD_EXP 16
2752: PPUSH
2753: LD_INT 80
2755: PPUSH
2756: LD_INT 79
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 48
// Wait ( 0 0$03 ) ;
2766: LD_INT 105
2768: PPUSH
2769: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_INT 80
2780: PPUSH
2781: LD_INT 76
2783: PPUSH
2784: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2788: LD_EXP 16
2792: PPUSH
2793: LD_STRING D1-JMM-1
2795: PPUSH
2796: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2800: LD_INT 10
2802: PPUSH
2803: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2807: LD_EXP 16
2811: PPUSH
2812: LD_INT 76
2814: PPUSH
2815: LD_INT 76
2817: PPUSH
2818: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2822: LD_EXP 16
2826: PPUSH
2827: LD_STRING D1-JMM-1a
2829: PPUSH
2830: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2834: LD_INT 10
2836: PPUSH
2837: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2841: LD_EXP 16
2845: PPUSH
2846: LD_INT 83
2848: PPUSH
2849: LD_INT 66
2851: PPUSH
2852: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2856: LD_EXP 16
2860: PPUSH
2861: LD_STRING D1-JMM-1b
2863: PPUSH
2864: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2868: LD_INT 18
2870: PPUSH
2871: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2875: LD_EXP 16
2879: PPUSH
2880: LD_STRING D1-JMM-1c
2882: PPUSH
2883: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2894: LD_EXP 19
2898: PPUSH
2899: LD_STRING D1-Pow-1
2901: PPUSH
2902: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2906: LD_EXP 16
2910: PPUSH
2911: LD_STRING D1-JMM-2
2913: PPUSH
2914: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2918: LD_EXP 19
2922: PPUSH
2923: LD_STRING D1-Pow-2
2925: PPUSH
2926: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2930: LD_EXP 16
2934: PPUSH
2935: LD_STRING D1-JMM-3
2937: PPUSH
2938: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2942: LD_EXP 19
2946: PPUSH
2947: LD_STRING D1-Pow-3
2949: PPUSH
2950: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2954: LD_EXP 16
2958: PPUSH
2959: LD_STRING D1-JMM-4
2961: PPUSH
2962: CALL_OW 88
// ComFree ( JMM ) ;
2966: LD_EXP 16
2970: PPUSH
2971: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2975: LD_INT 10
2977: PPUSH
2978: CALL_OW 67
// InGameOff ;
2982: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2986: LD_STRING M1
2988: PPUSH
2989: CALL_OW 337
// SaveForQuickRestart ;
2993: CALL_OW 22
// active_russian_dialog := true ;
2997: LD_ADDR_EXP 3
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// active_road_patrol := true ;
3005: LD_ADDR_EXP 8
3009: PUSH
3010: LD_INT 1
3012: ST_TO_ADDR
// if Difficulty < 3 then
3013: LD_OWVAR 67
3017: PUSH
3018: LD_INT 3
3020: LESS
3021: IFFALSE 3052
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3023: LD_EXP 17
3027: PPUSH
3028: LD_INT 41
3030: PPUSH
3031: LD_INT 71
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( Bobby ) ;
3041: LD_EXP 17
3045: PPUSH
3046: CALL_OW 140
// end else
3050: GO 3100
// begin SetDir ( Bobby , 5 ) ;
3052: LD_EXP 17
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3064: LD_EXP 17
3068: PPUSH
3069: LD_INT 105
3071: PPUSH
3072: LD_INT 98
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 48
// ComCrawl ( Bobby ) ;
3082: LD_EXP 17
3086: PPUSH
3087: CALL_OW 137
// AddComHold ( Bobby ) ;
3091: LD_EXP 17
3095: PPUSH
3096: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3100: LD_EXP 18
3104: PPUSH
3105: LD_INT 90
3107: PPUSH
3108: LD_INT 42
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3118: LD_EXP 18
3122: PPUSH
3123: LD_INT 79
3125: PPUSH
3126: LD_INT 34
3128: PPUSH
3129: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3133: LD_EXP 18
3137: PPUSH
3138: CALL_OW 197
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3147: LD_EXP 3
3151: IFFALSE 3745
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
// begin wait_points := 0 ;
3159: LD_ADDR_VAR 0 1
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3167: LD_INT 70
3169: PPUSH
3170: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3174: LD_EXP 21
3178: PPUSH
3179: LD_INT 79
3181: PPUSH
3182: LD_INT 83
3184: PPUSH
3185: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3189: LD_EXP 21
3193: PUSH
3194: LD_INT 2
3196: ARRAY
3197: PPUSH
3198: LD_STRING D1R-Rus1-1
3200: PPUSH
3201: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3205: LD_EXP 21
3209: PUSH
3210: LD_INT 1
3212: ARRAY
3213: PPUSH
3214: LD_STRING D1R-Rus2-1
3216: PPUSH
3217: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3221: LD_EXP 22
3225: PPUSH
3226: LD_INT 91
3228: PPUSH
3229: LD_INT 80
3231: PPUSH
3232: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3236: LD_INT 35
3238: PPUSH
3239: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3243: LD_EXP 21
3247: PUSH
3248: LD_INT 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 79
3254: PPUSH
3255: LD_INT 82
3257: PPUSH
3258: CALL_OW 297
3262: PUSH
3263: LD_INT 6
3265: LESS
3266: IFFALSE 3236
// if not IsInArea ( JMM , jmm_spot ) then
3268: LD_EXP 16
3272: PPUSH
3273: LD_INT 5
3275: PPUSH
3276: CALL_OW 308
3280: NOT
3281: IFFALSE 3301
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3283: LD_EXP 21
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: PPUSH
3292: LD_STRING D1Ra-Rus2-1
3294: PPUSH
3295: CALL_OW 88
3299: GO 3368
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3301: LD_EXP 21
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: LD_STRING D1Rb-Rus1-1
3312: PPUSH
3313: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3317: LD_EXP 21
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_STRING D1Rb-Rus2-1
3328: PPUSH
3329: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3333: LD_EXP 21
3337: PUSH
3338: LD_EXP 22
3342: ADD
3343: PPUSH
3344: LD_EXP 16
3348: PPUSH
3349: CALL_OW 250
3353: PPUSH
3354: LD_EXP 16
3358: PPUSH
3359: CALL_OW 251
3363: PPUSH
3364: CALL_OW 114
// end ; wait_points := 10 ;
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_INT 10
3375: ST_TO_ADDR
// if Difficulty > 1 then
3376: LD_OWVAR 67
3380: PUSH
3381: LD_INT 1
3383: GREATER
3384: IFFALSE 3466
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3386: LD_EXP 21
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 95
3396: PPUSH
3397: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3401: LD_EXP 21
3405: PPUSH
3406: LD_INT 175
3408: PPUSH
3409: CALL_OW 202
// wait_points := wait_points + 15 ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 15
3425: PLUS
3426: ST_TO_ADDR
// if Difficulty > 2 then
3427: LD_OWVAR 67
3431: PUSH
3432: LD_INT 2
3434: GREATER
3435: IFFALSE 3466
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3437: LD_EXP 21
3441: PPUSH
3442: LD_INT 65
3444: PPUSH
3445: LD_INT 79
3447: PPUSH
3448: CALL_OW 174
// wait_points := wait_points + 5 ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_VAR 0 1
3461: PUSH
3462: LD_INT 5
3464: PLUS
3465: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// wait_points := wait_points - 1 ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: LD_VAR 0 1
3482: PUSH
3483: LD_INT 1
3485: MINUS
3486: ST_TO_ADDR
// if See ( 3 , JMM ) then
3487: LD_INT 3
3489: PPUSH
3490: LD_EXP 16
3494: PPUSH
3495: CALL_OW 292
3499: IFFALSE 3553
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3501: LD_EXP 21
3505: PUSH
3506: LD_INT 2
3508: ARRAY
3509: PPUSH
3510: LD_STRING D1Rb-Rus1-1
3512: PPUSH
3513: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3517: LD_EXP 21
3521: PPUSH
3522: LD_EXP 16
3526: PPUSH
3527: CALL_OW 250
3531: PPUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 251
3541: PPUSH
3542: CALL_OW 114
// Wait ( 0 0$03 ) ;
3546: LD_INT 105
3548: PPUSH
3549: CALL_OW 67
// end ; until wait_points = 0 ;
3553: LD_VAR 0 1
3557: PUSH
3558: LD_INT 0
3560: EQUAL
3561: IFFALSE 3466
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3563: LD_EXP 21
3567: PUSH
3568: LD_INT 2
3570: ARRAY
3571: PPUSH
3572: LD_STRING D1Rc-Rus1-1
3574: PPUSH
3575: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING D1Ra-Rus2-1a
3590: PPUSH
3591: CALL_OW 88
// active_powell_dialog := true ;
3595: LD_ADDR_EXP 15
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 45
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3618: LD_EXP 22
3622: PPUSH
3623: LD_INT 26
3625: PPUSH
3626: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3630: LD_INT 35
3632: PPUSH
3633: CALL_OW 67
// if See ( 3 , JMM ) then
3637: LD_INT 3
3639: PPUSH
3640: LD_EXP 16
3644: PPUSH
3645: CALL_OW 292
3649: IFFALSE 3705
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3651: LD_EXP 21
3655: PUSH
3656: LD_INT 2
3658: ARRAY
3659: PPUSH
3660: LD_STRING D1Rb-Rus1-1
3662: PPUSH
3663: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3667: LD_EXP 21
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// Wait ( 0 0$50 ) ;
3696: LD_INT 1750
3698: PPUSH
3699: CALL_OW 67
// end else
3703: GO 3720
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3705: LD_EXP 21
3709: PPUSH
3710: LD_INT 45
3712: PPUSH
3713: LD_INT 5
3715: PPUSH
3716: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_INT 45
3731: PPUSH
3732: LD_INT 5
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 10
3742: LESS
3743: IFFALSE 3630
// end ;
3745: PPOPN 1
3747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3748: LD_INT 22
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 92
3760: PUSH
3761: LD_INT 80
3763: PUSH
3764: LD_INT 83
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: PUSH
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: EQUAL
3793: AND
3794: IFFALSE 3875
3796: GO 3798
3798: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3799: LD_INT 80
3801: PPUSH
3802: LD_INT 83
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 7
3810: NEG
3811: PPUSH
3812: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3823: LD_INT 22
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 92
3835: PUSH
3836: LD_INT 80
3838: PUSH
3839: LD_INT 83
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 69
3859: NOT
3860: IFFALSE 3816
// RemoveSeeing ( 80 , 83 , 1 ) ;
3862: LD_INT 80
3864: PPUSH
3865: LD_INT 83
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 331
// end ;
3875: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3876: LD_EXP 16
3880: PPUSH
3881: LD_EXP 17
3885: PPUSH
3886: CALL_OW 296
3890: PUSH
3891: LD_INT 6
3893: LESS
3894: PUSH
3895: LD_EXP 17
3899: PPUSH
3900: CALL_OW 302
3904: AND
3905: IFFALSE 4364
3907: GO 3909
3909: DISABLE
// begin ComWalk ( Bobby ) ;
3910: LD_EXP 17
3914: PPUSH
3915: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3919: LD_EXP 17
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 250
3933: PPUSH
3934: LD_EXP 16
3938: PPUSH
3939: CALL_OW 251
3943: PPUSH
3944: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3948: LD_INT 35
3950: PPUSH
3951: CALL_OW 67
// until See ( 4 , JMM ) ;
3955: LD_INT 4
3957: PPUSH
3958: LD_EXP 16
3962: PPUSH
3963: CALL_OW 292
3967: IFFALSE 3948
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 17
3982: PPUSH
3983: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3987: LD_EXP 7
3991: PUSH
3992: LD_EXP 18
3996: PPUSH
3997: CALL_OW 302
4001: AND
4002: PUSH
4003: LD_EXP 16
4007: PPUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 296
4017: PUSH
4018: LD_INT 10
4020: LESS
4021: AND
4022: IFFALSE 4067
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4024: LD_EXP 18
4028: PPUSH
4029: LD_EXP 16
4033: PPUSH
4034: CALL_OW 250
4038: PPUSH
4039: LD_EXP 16
4043: PPUSH
4044: CALL_OW 251
4048: PPUSH
4049: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4053: LD_EXP 18
4057: PPUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING D2-JMM-1
4074: PPUSH
4075: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4079: LD_INT 10
4081: PPUSH
4082: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4086: LD_EXP 17
4090: PPUSH
4091: LD_EXP 16
4095: PPUSH
4096: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4100: LD_EXP 17
4104: PPUSH
4105: LD_STRING D2-Bobby-1
4107: PPUSH
4108: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4112: LD_EXP 16
4116: PPUSH
4117: LD_STRING D2-JMM-2
4119: PPUSH
4120: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4124: LD_EXP 17
4128: PPUSH
4129: LD_EXP 16
4133: PPUSH
4134: CALL_OW 250
4138: PPUSH
4139: LD_EXP 16
4143: PPUSH
4144: CALL_OW 251
4148: PPUSH
4149: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4153: LD_EXP 17
4157: PPUSH
4158: LD_STRING D2-Bobby-2
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4165: LD_EXP 16
4169: PPUSH
4170: LD_STRING D2-JMM-3
4172: PPUSH
4173: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4177: LD_EXP 17
4181: PPUSH
4182: LD_EXP 16
4186: PPUSH
4187: CALL_OW 119
// DialogueOn ;
4191: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4195: LD_EXP 17
4199: PPUSH
4200: LD_STRING D2-Bobby-3
4202: PPUSH
4203: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4207: LD_EXP 16
4211: PPUSH
4212: LD_STRING D2-JMM-4
4214: PPUSH
4215: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4219: LD_EXP 17
4223: PPUSH
4224: LD_STRING D2-Bobby-4
4226: PPUSH
4227: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4231: LD_EXP 16
4235: PPUSH
4236: LD_STRING D2-JMM-5
4238: PPUSH
4239: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4243: LD_EXP 17
4247: PPUSH
4248: LD_STRING D2-Bobby-5
4250: PPUSH
4251: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4255: LD_EXP 16
4259: PPUSH
4260: LD_STRING D2-JMM-6
4262: PPUSH
4263: CALL_OW 88
// if not powell_contact then
4267: LD_EXP 5
4271: NOT
4272: IFFALSE 4298
// begin Say ( Bobby , D2-Bobby-6 ) ;
4274: LD_EXP 17
4278: PPUSH
4279: LD_STRING D2-Bobby-6
4281: PPUSH
4282: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4286: LD_EXP 16
4290: PPUSH
4291: LD_STRING D2-JMM-7
4293: PPUSH
4294: CALL_OW 88
// end ; DialogueOff ;
4298: CALL_OW 7
// InGameOff ;
4302: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4306: LD_EXP 17
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4318: LD_EXP 16
4322: PUSH
4323: LD_EXP 17
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PPUSH
4332: CALL_OW 139
// bobby_in_squad := true ;
4336: LD_ADDR_EXP 4
4340: PUSH
4341: LD_INT 1
4343: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4344: LD_EXP 5
4348: PUSH
4349: LD_EXP 7
4353: NOT
4354: AND
4355: IFFALSE 4364
// ChangeMissionObjectives ( M2b ) ;
4357: LD_STRING M2b
4359: PPUSH
4360: CALL_OW 337
// end ;
4364: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4365: LD_EXP 3
4369: PUSH
4370: LD_OWVAR 67
4374: PUSH
4375: LD_INT 3
4377: LESS
4378: AND
4379: IFFALSE 4413
4381: GO 4383
4383: DISABLE
// begin wait ( 1 1$00 ) ;
4384: LD_INT 2100
4386: PPUSH
4387: CALL_OW 67
// if not bobby_in_squad then
4391: LD_EXP 4
4395: NOT
4396: IFFALSE 4413
// ComMoveXY ( Bobby , 75 , 83 ) ;
4398: LD_EXP 17
4402: PPUSH
4403: LD_INT 75
4405: PPUSH
4406: LD_INT 83
4408: PPUSH
4409: CALL_OW 111
// end ;
4413: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4414: LD_EXP 7
4418: PUSH
4419: LD_EXP 4
4423: NOT
4424: AND
4425: IFFALSE 4454
4427: GO 4429
4429: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4430: LD_EXP 17
4434: PPUSH
4435: LD_INT 105
4437: PPUSH
4438: LD_INT 97
4440: PPUSH
4441: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4445: LD_EXP 17
4449: PPUSH
4450: CALL_OW 197
// end ;
4454: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4455: LD_EXP 16
4459: PPUSH
4460: LD_INT 6
4462: PPUSH
4463: CALL_OW 308
4467: PUSH
4468: LD_EXP 16
4472: PPUSH
4473: LD_EXP 17
4477: PPUSH
4478: CALL_OW 296
4482: PUSH
4483: LD_INT 7
4485: LESS
4486: AND
4487: PUSH
4488: LD_EXP 4
4492: AND
4493: IFFALSE 4540
4495: GO 4497
4497: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4498: LD_EXP 16
4502: PUSH
4503: LD_EXP 17
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4516: LD_EXP 16
4520: PPUSH
4521: LD_STRING D2a-JMM-1
4523: PPUSH
4524: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4528: LD_EXP 17
4532: PPUSH
4533: LD_STRING D2a-Bobby-1
4535: PPUSH
4536: CALL_OW 88
// end ;
4540: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4541: LD_EXP 15
4545: PUSH
4546: LD_INT 3
4548: PPUSH
4549: LD_EXP 16
4553: PPUSH
4554: CALL_OW 292
4558: NOT
4559: AND
4560: IFFALSE 4731
4562: GO 4564
4564: DISABLE
// begin wait ( 0 0$5 ) ;
4565: LD_INT 175
4567: PPUSH
4568: CALL_OW 67
// InGameOn ;
4572: CALL_OW 8
// DialogueOn ;
4576: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4580: LD_EXP 19
4584: PPUSH
4585: LD_STRING D3-Pow-1
4587: PPUSH
4588: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4592: LD_EXP 16
4596: PPUSH
4597: LD_STRING D3-JMM-1
4599: PPUSH
4600: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4604: LD_EXP 19
4608: PPUSH
4609: LD_STRING D3-Pow-2
4611: PPUSH
4612: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4616: LD_EXP 16
4620: PPUSH
4621: LD_STRING D3-JMM-2
4623: PPUSH
4624: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4628: LD_EXP 19
4632: PPUSH
4633: LD_STRING D3-Pow-3
4635: PPUSH
4636: CALL_OW 586
// DialogueOff ;
4640: CALL_OW 7
// InGameOff ;
4644: CALL_OW 9
// powell_contact := true ;
4648: LD_ADDR_EXP 5
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4656: LD_INT 10
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: CALL_OW 424
// uc_side := 4 ;
4666: LD_ADDR_OWVAR 20
4670: PUSH
4671: LD_INT 4
4673: ST_TO_ADDR
// uc_nation := 1 ;
4674: LD_ADDR_OWVAR 21
4678: PUSH
4679: LD_INT 1
4681: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4682: LD_ADDR_EXP 19
4686: PUSH
4687: LD_STRING Powell
4689: PPUSH
4690: LD_INT 0
4692: PPUSH
4693: LD_STRING 
4695: PPUSH
4696: CALL 23769 0 3
4700: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4701: LD_STRING M2
4703: PPUSH
4704: CALL_OW 337
// if not bobby_in_squad then
4708: LD_EXP 4
4712: NOT
4713: IFFALSE 4724
// ChangeMissionObjectives ( M2a ) else
4715: LD_STRING M2a
4717: PPUSH
4718: CALL_OW 337
4722: GO 4731
// ChangeMissionObjectives ( M2b ) ;
4724: LD_STRING M2b
4726: PPUSH
4727: CALL_OW 337
// end ;
4731: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4732: LD_EXP 16
4736: PPUSH
4737: LD_INT 7
4739: PPUSH
4740: CALL_OW 308
4744: IFFALSE 4879
4746: GO 4748
4748: DISABLE
// begin DialogueOn ;
4749: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4753: LD_EXP 20
4757: PPUSH
4758: LD_STRING D4-Rus3-1
4760: PPUSH
4761: CALL_OW 586
// DialogueOff ;
4765: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4769: LD_STRING M3a
4771: PPUSH
4772: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4776: LD_INT 11
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: CALL_OW 424
// Wait ( 0 0$02 ) ;
4786: LD_INT 70
4788: PPUSH
4789: CALL_OW 67
// DialogueOn ;
4793: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4797: LD_EXP 19
4801: PPUSH
4802: LD_STRING D4-Pow-1
4804: PPUSH
4805: CALL_OW 586
// DialogueOff ;
4809: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4813: LD_STRING M3b
4815: PPUSH
4816: CALL_OW 337
// case Query ( Q1 ) of 1 :
4820: LD_STRING Q1
4822: PPUSH
4823: CALL_OW 97
4827: PUSH
4828: LD_INT 1
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4836
4834: GO 4867
4836: POP
// begin macmilan_use_radio := true ;
4837: LD_ADDR_EXP 6
4841: PUSH
4842: LD_INT 1
4844: ST_TO_ADDR
// DialogueOn ;
4845: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4849: LD_EXP 16
4853: PPUSH
4854: LD_STRING D4a-JMM-1
4856: PPUSH
4857: CALL_OW 88
// DialogueOff ;
4861: CALL_OW 7
// end ; 2 :
4865: GO 4879
4867: LD_INT 2
4869: DOUBLE
4870: EQUAL
4871: IFTRUE 4875
4873: GO 4878
4875: POP
// ; end ;
4876: GO 4879
4878: POP
// end ;
4879: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4880: LD_EXP 16
4884: PPUSH
4885: LD_EXP 18
4889: PPUSH
4890: CALL_OW 296
4894: PUSH
4895: LD_INT 8
4897: LESS
4898: PUSH
4899: LD_EXP 18
4903: PPUSH
4904: CALL_OW 302
4908: AND
4909: IFFALSE 5200
4911: GO 4913
4913: DISABLE
// begin InGameOn ;
4914: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4918: LD_EXP 16
4922: PPUSH
4923: LD_EXP 18
4927: PPUSH
4928: CALL_OW 250
4932: PPUSH
4933: LD_EXP 18
4937: PPUSH
4938: CALL_OW 251
4942: PPUSH
4943: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4947: LD_EXP 17
4951: PPUSH
4952: CALL_OW 302
4956: PUSH
4957: LD_EXP 4
4961: AND
4962: IFFALSE 4993
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4964: LD_EXP 17
4968: PPUSH
4969: LD_EXP 16
4973: PPUSH
4974: CALL_OW 250
4978: PPUSH
4979: LD_EXP 16
4983: PPUSH
4984: CALL_OW 251
4988: PPUSH
4989: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4993: LD_EXP 16
4997: PPUSH
4998: LD_STRING D5-JMM-1
5000: PPUSH
5001: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5005: LD_INT 10
5007: PPUSH
5008: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5012: LD_EXP 16
5016: PPUSH
5017: LD_EXP 18
5021: PPUSH
5022: CALL_OW 119
// ComWalk ( Cyrus ) ;
5026: LD_EXP 18
5030: PPUSH
5031: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5035: LD_EXP 18
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5049: LD_EXP 18
5053: PPUSH
5054: LD_STRING D5-Cyrus-1
5056: PPUSH
5057: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5061: LD_EXP 17
5065: PPUSH
5066: CALL_OW 302
5070: PUSH
5071: LD_EXP 4
5075: AND
5076: IFFALSE 5116
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5078: LD_EXP 17
5082: PPUSH
5083: LD_EXP 18
5087: PPUSH
5088: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5092: LD_EXP 17
5096: PPUSH
5097: LD_STRING D5-Bobby-1
5099: PPUSH
5100: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5104: LD_EXP 16
5108: PPUSH
5109: LD_STRING D5-JMM-2
5111: PPUSH
5112: CALL_OW 88
// end ; InGameOff ;
5116: CALL_OW 9
// cyrus_in_squad := true ;
5120: LD_ADDR_EXP 7
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5128: LD_EXP 18
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5140: LD_EXP 5
5144: PUSH
5145: LD_EXP 4
5149: NOT
5150: AND
5151: IFFALSE 5160
// ChangeMissionObjectives ( M2b ) ;
5153: LD_STRING M2b
5155: PPUSH
5156: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5160: LD_EXP 4
5164: NOT
5165: PUSH
5166: LD_EXP 17
5170: PPUSH
5171: CALL_OW 255
5175: PUSH
5176: LD_INT 4
5178: EQUAL
5179: AND
5180: PUSH
5181: LD_EXP 17
5185: PPUSH
5186: CALL_OW 302
5190: AND
5191: IFFALSE 5200
// SetAchievement ( ACH_CYRUS ) ;
5193: LD_STRING ACH_CYRUS
5195: PPUSH
5196: CALL_OW 543
// end ;
5200: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5201: LD_EXP 4
5205: PUSH
5206: LD_EXP 7
5210: AND
5211: IFFALSE 5223
5213: GO 5215
5215: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5216: LD_STRING M2c
5218: PPUSH
5219: CALL_OW 337
5223: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5224: LD_EXP 16
5228: PPUSH
5229: LD_INT 8
5231: PPUSH
5232: CALL_OW 308
5236: IFFALSE 5288
5238: GO 5240
5240: DISABLE
// begin macmilan_in_trap := true ;
5241: LD_ADDR_EXP 9
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5249: LD_INT 35
5251: PPUSH
5252: CALL_OW 67
// DialogueOn ;
5256: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5260: LD_EXP 26
5264: PPUSH
5265: LD_STRING D5-Pok-1
5267: PPUSH
5268: CALL_OW 88
// DialogueOff ;
5272: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5276: LD_EXP 16
5280: PPUSH
5281: LD_STRING D4b-JMM-1
5283: PPUSH
5284: CALL_OW 88
// end ;
5288: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5289: LD_EXP 16
5293: PPUSH
5294: LD_EXP 24
5298: PUSH
5299: LD_EXP 24
5303: ARRAY
5304: PPUSH
5305: CALL_OW 296
5309: PUSH
5310: LD_INT 12
5312: LESS
5313: PUSH
5314: LD_EXP 24
5318: PPUSH
5319: LD_INT 3
5321: PUSH
5322: LD_INT 24
5324: PUSH
5325: LD_INT 990
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PPUSH
5336: CALL_OW 72
5340: OR
5341: IFFALSE 5571
5343: GO 5345
5345: DISABLE
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_INT 300
5357: PUSH
5358: LD_INT 250
5360: PUSH
5361: LD_INT 200
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: LD_OWVAR 67
5373: ARRAY
5374: ST_TO_ADDR
// for i in russian_meta_guards do
5375: LD_ADDR_VAR 0 1
5379: PUSH
5380: LD_EXP 24
5384: PUSH
5385: FOR_IN
5386: IFFALSE 5426
// if IsOk ( i ) then
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 302
5397: IFFALSE 5424
// SetLives ( i , GetLives ( i ) - hp ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 256
5413: PUSH
5414: LD_VAR 0 2
5418: MINUS
5419: PPUSH
5420: CALL_OW 234
5424: GO 5385
5426: POP
5427: POP
// DialogueOn ;
5428: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5432: LD_EXP 24
5436: PUSH
5437: LD_EXP 24
5441: ARRAY
5442: PPUSH
5443: LD_STRING D6-FRus1-1
5445: PPUSH
5446: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5450: LD_EXP 16
5454: PPUSH
5455: LD_STRING D6-JMM-1
5457: PPUSH
5458: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5462: LD_EXP 18
5466: PPUSH
5467: CALL_OW 302
5471: PUSH
5472: LD_EXP 7
5476: AND
5477: IFFALSE 5491
// Say ( Cyrus , D6-Cyrus-1 ) ;
5479: LD_EXP 18
5483: PPUSH
5484: LD_STRING D6-Cyrus-1
5486: PPUSH
5487: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5491: LD_EXP 17
5495: PPUSH
5496: CALL_OW 302
5500: PUSH
5501: LD_EXP 4
5505: AND
5506: IFFALSE 5520
// Say ( Bobby , D6-Bobby-1 ) ;
5508: LD_EXP 17
5512: PPUSH
5513: LD_STRING D6-Bobby-1
5515: PPUSH
5516: CALL_OW 88
// DialogueOff ;
5520: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5524: LD_INT 140
5526: PUSH
5527: LD_INT 105
5529: PUSH
5530: LD_INT 70
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: PUSH
5538: LD_OWVAR 67
5542: ARRAY
5543: PPUSH
5544: CALL_OW 67
// meta_action := true ;
5548: LD_ADDR_EXP 10
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5556: LD_EXP 24
5560: PPUSH
5561: LD_INT 94
5563: PPUSH
5564: LD_INT 8
5566: PPUSH
5567: CALL_OW 114
// end ;
5571: PPOPN 2
5573: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5574: LD_EXP 16
5578: PPUSH
5579: LD_INT 93
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: CALL_OW 297
5589: PUSH
5590: LD_INT 5
5592: LESS
5593: PUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 1
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PPUSH
5604: CALL_OW 69
5608: PUSH
5609: LD_INT 1
5611: GREATER
5612: AND
5613: IFFALSE 5630
5615: GO 5617
5617: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5618: LD_EXP 16
5622: PPUSH
5623: LD_STRING D6a-JMM-1
5625: PPUSH
5626: CALL_OW 88
5630: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5631: LD_VAR 0 1
5635: PUSH
5636: LD_EXP 16
5640: EQUAL
5641: IFFALSE 5650
// YouLost ( JMM ) ;
5643: LD_STRING JMM
5645: PPUSH
5646: CALL_OW 104
// end ;
5650: PPOPN 1
5652: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5653: LD_VAR 0 1
5657: PUSH
5658: LD_EXP 16
5662: EQUAL
5663: IFFALSE 5672
// YouLost ( JMM ) ;
5665: LD_STRING JMM
5667: PPUSH
5668: CALL_OW 104
// end ;
5672: PPOPN 1
5674: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5675: LD_EXP 17
5679: PPUSH
5680: LD_INT 10
5682: PPUSH
5683: CALL_OW 308
5687: IFFALSE 5736
5689: GO 5691
5691: DISABLE
// begin bobby_saved := true ;
5692: LD_ADDR_EXP 12
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5700: LD_EXP 17
5704: PPUSH
5705: CALL_OW 256
5709: PPUSH
5710: LD_STRING 01_BobbyLifePoints_1
5712: PPUSH
5713: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5717: LD_EXP 17
5721: PPUSH
5722: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5726: LD_STRING Bobby
5728: PPUSH
5729: LD_INT 1
5731: PPUSH
5732: CALL_OW 101
// end ;
5736: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5737: LD_EXP 18
5741: PPUSH
5742: LD_INT 10
5744: PPUSH
5745: CALL_OW 308
5749: IFFALSE 5798
5751: GO 5753
5753: DISABLE
// begin cyrus_saved := true ;
5754: LD_ADDR_EXP 13
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5762: LD_EXP 18
5766: PPUSH
5767: CALL_OW 256
5771: PPUSH
5772: LD_STRING 01_CyrusLifePoints_1
5774: PPUSH
5775: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5779: LD_EXP 18
5783: PPUSH
5784: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5788: LD_STRING Cyrus
5790: PPUSH
5791: LD_INT 1
5793: PPUSH
5794: CALL_OW 101
// end ;
5798: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5799: LD_EXP 16
5803: PPUSH
5804: LD_INT 10
5806: PPUSH
5807: CALL_OW 308
5811: IFFALSE 6419
5813: GO 5815
5815: DISABLE
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
// begin if macmilan_use_radio then
5824: LD_EXP 6
5828: IFFALSE 5837
// SetAchievement ( ACH_RADIO ) ;
5830: LD_STRING ACH_RADIO
5832: PPUSH
5833: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5837: LD_EXP 13
5841: NOT
5842: PUSH
5843: LD_EXP 7
5847: AND
5848: PUSH
5849: LD_EXP 18
5853: PPUSH
5854: CALL_OW 302
5858: AND
5859: PUSH
5860: LD_EXP 12
5864: NOT
5865: PUSH
5866: LD_EXP 4
5870: AND
5871: PUSH
5872: LD_EXP 17
5876: PPUSH
5877: CALL_OW 302
5881: AND
5882: OR
5883: IFFALSE 5924
// case Query ( Q2 ) of 1 :
5885: LD_STRING Q2
5887: PPUSH
5888: CALL_OW 97
5892: PUSH
5893: LD_INT 1
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5912
5901: POP
// wait_for_them := true ; 2 :
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
5910: GO 5924
5912: LD_INT 2
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 5923
5920: POP
// ; end ;
5921: GO 5924
5923: POP
// if wait_for_them then
5924: LD_VAR 0 3
5928: IFFALSE 6041
// repeat wait ( 0 0$01 ) ;
5930: LD_INT 35
5932: PPUSH
5933: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5937: LD_EXP 13
5941: PUSH
5942: LD_EXP 12
5946: AND
5947: PUSH
5948: LD_EXP 13
5952: PUSH
5953: LD_EXP 4
5957: NOT
5958: PUSH
5959: LD_EXP 17
5963: PPUSH
5964: CALL_OW 303
5968: OR
5969: PUSH
5970: LD_EXP 17
5974: PPUSH
5975: CALL_OW 301
5979: OR
5980: AND
5981: OR
5982: PUSH
5983: LD_EXP 12
5987: PUSH
5988: LD_EXP 7
5992: NOT
5993: PUSH
5994: LD_EXP 18
5998: PPUSH
5999: CALL_OW 303
6003: OR
6004: PUSH
6005: LD_EXP 18
6009: PPUSH
6010: CALL_OW 301
6014: OR
6015: AND
6016: OR
6017: PUSH
6018: LD_EXP 17
6022: PPUSH
6023: CALL_OW 301
6027: PUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 301
6037: AND
6038: OR
6039: IFFALSE 5930
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6041: LD_EXP 16
6045: PPUSH
6046: CALL_OW 256
6050: PPUSH
6051: LD_STRING 01_JMMLifePoints_1
6053: PPUSH
6054: CALL_OW 39
// RemoveUnit ( JMM ) ;
6058: LD_EXP 16
6062: PPUSH
6063: CALL_OW 64
// to_reward := [ JMM ] ;
6067: LD_ADDR_VAR 0 2
6071: PUSH
6072: LD_EXP 16
6076: PUSH
6077: EMPTY
6078: LIST
6079: ST_TO_ADDR
// if bobby_saved then
6080: LD_EXP 12
6084: IFFALSE 6102
// to_reward := to_reward ^ Bobby ;
6086: LD_ADDR_VAR 0 2
6090: PUSH
6091: LD_VAR 0 2
6095: PUSH
6096: LD_EXP 17
6100: ADD
6101: ST_TO_ADDR
// if cyrus_saved then
6102: LD_EXP 13
6106: IFFALSE 6124
// to_reward := to_reward ^ Cyrus ;
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_VAR 0 2
6117: PUSH
6118: LD_EXP 18
6122: ADD
6123: ST_TO_ADDR
// m1 := true ;
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: LD_INT 1
6131: ST_TO_ADDR
// m2 := bobby_saved ;
6132: LD_ADDR_VAR 0 5
6136: PUSH
6137: LD_EXP 12
6141: ST_TO_ADDR
// m3 := cyrus_saved ;
6142: LD_ADDR_VAR 0 6
6146: PUSH
6147: LD_EXP 13
6151: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6152: LD_STRING JMM
6154: PPUSH
6155: LD_INT 1
6157: PPUSH
6158: CALL_OW 101
// if not bobby_in_squad then
6162: LD_EXP 4
6166: NOT
6167: IFFALSE 6180
// AddMedal ( Bobby , - 1 ) ;
6169: LD_STRING Bobby
6171: PPUSH
6172: LD_INT 1
6174: NEG
6175: PPUSH
6176: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6180: LD_EXP 12
6184: NOT
6185: PUSH
6186: LD_EXP 17
6190: PPUSH
6191: CALL_OW 303
6195: PUSH
6196: LD_EXP 17
6200: PPUSH
6201: CALL_OW 301
6205: OR
6206: AND
6207: IFFALSE 6220
// AddMedal ( Bobby , - 2 ) ;
6209: LD_STRING Bobby
6211: PPUSH
6212: LD_INT 2
6214: NEG
6215: PPUSH
6216: CALL_OW 101
// if not cyrus_in_squad then
6220: LD_EXP 7
6224: NOT
6225: IFFALSE 6238
// AddMedal ( Cyrus , - 1 ) ;
6227: LD_STRING Cyrus
6229: PPUSH
6230: LD_INT 1
6232: NEG
6233: PPUSH
6234: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6238: LD_EXP 13
6242: NOT
6243: PUSH
6244: LD_EXP 18
6248: PPUSH
6249: CALL_OW 303
6253: PUSH
6254: LD_EXP 18
6258: PPUSH
6259: CALL_OW 301
6263: OR
6264: AND
6265: IFFALSE 6278
// AddMedal ( Cyrus , - 2 ) ;
6267: LD_STRING Cyrus
6269: PPUSH
6270: LD_INT 2
6272: NEG
6273: PPUSH
6274: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6278: LD_OWVAR 67
6282: PUSH
6283: LD_INT 3
6285: EQUAL
6286: PUSH
6287: LD_VAR 0 4
6291: AND
6292: PUSH
6293: LD_VAR 0 5
6297: AND
6298: PUSH
6299: LD_VAR 0 6
6303: AND
6304: IFFALSE 6316
// SetAchievementEX ( ACH_AMER , 1 ) ;
6306: LD_STRING ACH_AMER
6308: PPUSH
6309: LD_INT 1
6311: PPUSH
6312: CALL_OW 564
// GiveMedals ( MAIN ) ;
6316: LD_STRING MAIN
6318: PPUSH
6319: CALL_OW 102
// RewardPeople ( to_reward ) ;
6323: LD_VAR 0 2
6327: PPUSH
6328: CALL_OW 43
// if bobby_saved then
6332: LD_EXP 12
6336: IFFALSE 6356
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6338: LD_EXP 17
6342: PPUSH
6343: LD_EXP 2
6347: PUSH
6348: LD_STRING Bobby
6350: STR
6351: PPUSH
6352: CALL_OW 38
// if cyrus_saved then
6356: LD_EXP 13
6360: IFFALSE 6380
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6362: LD_EXP 18
6366: PPUSH
6367: LD_EXP 2
6371: PUSH
6372: LD_STRING Cyrus
6374: STR
6375: PPUSH
6376: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6380: LD_EXP 16
6384: PPUSH
6385: LD_EXP 2
6389: PUSH
6390: LD_STRING JMM
6392: STR
6393: PPUSH
6394: CALL_OW 38
// if tick <= 3 3$00 then
6398: LD_OWVAR 1
6402: PUSH
6403: LD_INT 6300
6405: LESSEQUAL
6406: IFFALSE 6415
// SetAchievement ( ACH_ASPEED_1 ) ;
6408: LD_STRING ACH_ASPEED_1
6410: PPUSH
6411: CALL_OW 543
// YouWin ;
6415: CALL_OW 103
// end ; end_of_file end_of_file
6419: PPOPN 6
6421: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6422: LD_INT 0
6424: PPUSH
// if p2 = 100 then
6425: LD_VAR 0 2
6429: PUSH
6430: LD_INT 100
6432: EQUAL
6433: IFFALSE 7382
// begin if not StreamModeActive then
6435: LD_EXP 27
6439: NOT
6440: IFFALSE 6450
// StreamModeActive := true ;
6442: LD_ADDR_EXP 27
6446: PUSH
6447: LD_INT 1
6449: ST_TO_ADDR
// if p3 = 0 then
6450: LD_VAR 0 3
6454: PUSH
6455: LD_INT 0
6457: EQUAL
6458: IFFALSE 6464
// InitStreamMode ;
6460: CALL 7542 0 0
// if p3 = 1 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 1
6471: EQUAL
6472: IFFALSE 6482
// sRocket := true ;
6474: LD_ADDR_EXP 32
6478: PUSH
6479: LD_INT 1
6481: ST_TO_ADDR
// if p3 = 2 then
6482: LD_VAR 0 3
6486: PUSH
6487: LD_INT 2
6489: EQUAL
6490: IFFALSE 6500
// sSpeed := true ;
6492: LD_ADDR_EXP 31
6496: PUSH
6497: LD_INT 1
6499: ST_TO_ADDR
// if p3 = 3 then
6500: LD_VAR 0 3
6504: PUSH
6505: LD_INT 3
6507: EQUAL
6508: IFFALSE 6518
// sEngine := true ;
6510: LD_ADDR_EXP 33
6514: PUSH
6515: LD_INT 1
6517: ST_TO_ADDR
// if p3 = 4 then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 4
6525: EQUAL
6526: IFFALSE 6536
// sSpec := true ;
6528: LD_ADDR_EXP 30
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// if p3 = 5 then
6536: LD_VAR 0 3
6540: PUSH
6541: LD_INT 5
6543: EQUAL
6544: IFFALSE 6554
// sLevel := true ;
6546: LD_ADDR_EXP 34
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// if p3 = 6 then
6554: LD_VAR 0 3
6558: PUSH
6559: LD_INT 6
6561: EQUAL
6562: IFFALSE 6572
// sArmoury := true ;
6564: LD_ADDR_EXP 35
6568: PUSH
6569: LD_INT 1
6571: ST_TO_ADDR
// if p3 = 7 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 7
6579: EQUAL
6580: IFFALSE 6590
// sRadar := true ;
6582: LD_ADDR_EXP 36
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 8 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 8
6597: EQUAL
6598: IFFALSE 6608
// sBunker := true ;
6600: LD_ADDR_EXP 37
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 9 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 9
6615: EQUAL
6616: IFFALSE 6626
// sHack := true ;
6618: LD_ADDR_EXP 38
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 10 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 10
6633: EQUAL
6634: IFFALSE 6644
// sFire := true ;
6636: LD_ADDR_EXP 39
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 11 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 11
6651: EQUAL
6652: IFFALSE 6662
// sRefresh := true ;
6654: LD_ADDR_EXP 40
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 12 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 12
6669: EQUAL
6670: IFFALSE 6680
// sExp := true ;
6672: LD_ADDR_EXP 41
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 13 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 13
6687: EQUAL
6688: IFFALSE 6698
// sDepot := true ;
6690: LD_ADDR_EXP 42
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 14 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 14
6705: EQUAL
6706: IFFALSE 6716
// sFlag := true ;
6708: LD_ADDR_EXP 43
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 15 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 15
6723: EQUAL
6724: IFFALSE 6734
// sKamikadze := true ;
6726: LD_ADDR_EXP 51
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 16 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 16
6741: EQUAL
6742: IFFALSE 6752
// sTroll := true ;
6744: LD_ADDR_EXP 52
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 17 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 17
6759: EQUAL
6760: IFFALSE 6770
// sSlow := true ;
6762: LD_ADDR_EXP 53
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 18 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 18
6777: EQUAL
6778: IFFALSE 6788
// sLack := true ;
6780: LD_ADDR_EXP 54
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 19 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 19
6795: EQUAL
6796: IFFALSE 6806
// sTank := true ;
6798: LD_ADDR_EXP 56
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 20 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 20
6813: EQUAL
6814: IFFALSE 6824
// sRemote := true ;
6816: LD_ADDR_EXP 57
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 21 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 21
6831: EQUAL
6832: IFFALSE 6842
// sPowell := true ;
6834: LD_ADDR_EXP 58
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 22 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 22
6849: EQUAL
6850: IFFALSE 6860
// sTeleport := true ;
6852: LD_ADDR_EXP 61
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 23 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 23
6867: EQUAL
6868: IFFALSE 6878
// sOilTower := true ;
6870: LD_ADDR_EXP 63
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 24 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 24
6885: EQUAL
6886: IFFALSE 6896
// sShovel := true ;
6888: LD_ADDR_EXP 64
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 25 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 25
6903: EQUAL
6904: IFFALSE 6914
// sSheik := true ;
6906: LD_ADDR_EXP 65
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 26 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 26
6921: EQUAL
6922: IFFALSE 6932
// sEarthquake := true ;
6924: LD_ADDR_EXP 67
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 27 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 27
6939: EQUAL
6940: IFFALSE 6950
// sAI := true ;
6942: LD_ADDR_EXP 68
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 28 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 28
6957: EQUAL
6958: IFFALSE 6968
// sCargo := true ;
6960: LD_ADDR_EXP 71
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 29 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 29
6975: EQUAL
6976: IFFALSE 6986
// sDLaser := true ;
6978: LD_ADDR_EXP 72
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 30 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 30
6993: EQUAL
6994: IFFALSE 7004
// sExchange := true ;
6996: LD_ADDR_EXP 73
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 31 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 31
7011: EQUAL
7012: IFFALSE 7022
// sFac := true ;
7014: LD_ADDR_EXP 74
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 32 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 32
7029: EQUAL
7030: IFFALSE 7040
// sPower := true ;
7032: LD_ADDR_EXP 75
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// if p3 = 33 then
7040: LD_VAR 0 3
7044: PUSH
7045: LD_INT 33
7047: EQUAL
7048: IFFALSE 7058
// sRandom := true ;
7050: LD_ADDR_EXP 76
7054: PUSH
7055: LD_INT 1
7057: ST_TO_ADDR
// if p3 = 34 then
7058: LD_VAR 0 3
7062: PUSH
7063: LD_INT 34
7065: EQUAL
7066: IFFALSE 7076
// sShield := true ;
7068: LD_ADDR_EXP 77
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
// if p3 = 35 then
7076: LD_VAR 0 3
7080: PUSH
7081: LD_INT 35
7083: EQUAL
7084: IFFALSE 7094
// sTime := true ;
7086: LD_ADDR_EXP 78
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// if p3 = 36 then
7094: LD_VAR 0 3
7098: PUSH
7099: LD_INT 36
7101: EQUAL
7102: IFFALSE 7112
// sTools := true ;
7104: LD_ADDR_EXP 79
7108: PUSH
7109: LD_INT 1
7111: ST_TO_ADDR
// if p3 = 101 then
7112: LD_VAR 0 3
7116: PUSH
7117: LD_INT 101
7119: EQUAL
7120: IFFALSE 7130
// sSold := true ;
7122: LD_ADDR_EXP 44
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
// if p3 = 102 then
7130: LD_VAR 0 3
7134: PUSH
7135: LD_INT 102
7137: EQUAL
7138: IFFALSE 7148
// sDiff := true ;
7140: LD_ADDR_EXP 45
7144: PUSH
7145: LD_INT 1
7147: ST_TO_ADDR
// if p3 = 103 then
7148: LD_VAR 0 3
7152: PUSH
7153: LD_INT 103
7155: EQUAL
7156: IFFALSE 7166
// sFog := true ;
7158: LD_ADDR_EXP 48
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// if p3 = 104 then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 104
7173: EQUAL
7174: IFFALSE 7184
// sReset := true ;
7176: LD_ADDR_EXP 49
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// if p3 = 105 then
7184: LD_VAR 0 3
7188: PUSH
7189: LD_INT 105
7191: EQUAL
7192: IFFALSE 7202
// sSun := true ;
7194: LD_ADDR_EXP 50
7198: PUSH
7199: LD_INT 1
7201: ST_TO_ADDR
// if p3 = 106 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 106
7209: EQUAL
7210: IFFALSE 7220
// sTiger := true ;
7212: LD_ADDR_EXP 46
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// if p3 = 107 then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 107
7227: EQUAL
7228: IFFALSE 7238
// sBomb := true ;
7230: LD_ADDR_EXP 47
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 108 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 108
7245: EQUAL
7246: IFFALSE 7256
// sWound := true ;
7248: LD_ADDR_EXP 55
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// if p3 = 109 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 109
7263: EQUAL
7264: IFFALSE 7274
// sBetray := true ;
7266: LD_ADDR_EXP 59
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// if p3 = 110 then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 110
7281: EQUAL
7282: IFFALSE 7292
// sContamin := true ;
7284: LD_ADDR_EXP 60
7288: PUSH
7289: LD_INT 1
7291: ST_TO_ADDR
// if p3 = 111 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 111
7299: EQUAL
7300: IFFALSE 7310
// sOil := true ;
7302: LD_ADDR_EXP 62
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// if p3 = 112 then
7310: LD_VAR 0 3
7314: PUSH
7315: LD_INT 112
7317: EQUAL
7318: IFFALSE 7328
// sStu := true ;
7320: LD_ADDR_EXP 66
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// if p3 = 113 then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 113
7335: EQUAL
7336: IFFALSE 7346
// sBazooka := true ;
7338: LD_ADDR_EXP 69
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// if p3 = 114 then
7346: LD_VAR 0 3
7350: PUSH
7351: LD_INT 114
7353: EQUAL
7354: IFFALSE 7364
// sMortar := true ;
7356: LD_ADDR_EXP 70
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// if p3 = 115 then
7364: LD_VAR 0 3
7368: PUSH
7369: LD_INT 115
7371: EQUAL
7372: IFFALSE 7382
// sRanger := true ;
7374: LD_ADDR_EXP 80
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// end ; if p2 = 101 then
7382: LD_VAR 0 2
7386: PUSH
7387: LD_INT 101
7389: EQUAL
7390: IFFALSE 7518
// begin case p3 of 1 :
7392: LD_VAR 0 3
7396: PUSH
7397: LD_INT 1
7399: DOUBLE
7400: EQUAL
7401: IFTRUE 7405
7403: GO 7412
7405: POP
// hHackUnlimitedResources ; 2 :
7406: CALL 18555 0 0
7410: GO 7518
7412: LD_INT 2
7414: DOUBLE
7415: EQUAL
7416: IFTRUE 7420
7418: GO 7427
7420: POP
// hHackSetLevel10 ; 3 :
7421: CALL 18688 0 0
7425: GO 7518
7427: LD_INT 3
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7442
7435: POP
// hHackSetLevel10YourUnits ; 4 :
7436: CALL 18773 0 0
7440: GO 7518
7442: LD_INT 4
7444: DOUBLE
7445: EQUAL
7446: IFTRUE 7450
7448: GO 7457
7450: POP
// hHackInvincible ; 5 :
7451: CALL 19221 0 0
7455: GO 7518
7457: LD_INT 5
7459: DOUBLE
7460: EQUAL
7461: IFTRUE 7465
7463: GO 7472
7465: POP
// hHackInvisible ; 6 :
7466: CALL 19332 0 0
7470: GO 7518
7472: LD_INT 6
7474: DOUBLE
7475: EQUAL
7476: IFTRUE 7480
7478: GO 7487
7480: POP
// hHackChangeYourSide ; 7 :
7481: CALL 19389 0 0
7485: GO 7518
7487: LD_INT 7
7489: DOUBLE
7490: EQUAL
7491: IFTRUE 7495
7493: GO 7502
7495: POP
// hHackChangeUnitSide ; 8 :
7496: CALL 19431 0 0
7500: GO 7518
7502: LD_INT 8
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7517
7510: POP
// hHackFog ; end ;
7511: CALL 19532 0 0
7515: GO 7518
7517: POP
// end ; end ;
7518: LD_VAR 0 7
7522: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7523: GO 7525
7525: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7526: LD_STRING initStreamRollete();
7528: PPUSH
7529: CALL_OW 559
// InitStreamMode ;
7533: CALL 7542 0 0
// DefineStreamItems ( ) ;
7537: CALL 7982 0 0
// end ;
7541: END
// function InitStreamMode ; begin
7542: LD_INT 0
7544: PPUSH
// streamModeActive := false ;
7545: LD_ADDR_EXP 27
7549: PUSH
7550: LD_INT 0
7552: ST_TO_ADDR
// normalCounter := 36 ;
7553: LD_ADDR_EXP 28
7557: PUSH
7558: LD_INT 36
7560: ST_TO_ADDR
// hardcoreCounter := 16 ;
7561: LD_ADDR_EXP 29
7565: PUSH
7566: LD_INT 16
7568: ST_TO_ADDR
// sRocket := false ;
7569: LD_ADDR_EXP 32
7573: PUSH
7574: LD_INT 0
7576: ST_TO_ADDR
// sSpeed := false ;
7577: LD_ADDR_EXP 31
7581: PUSH
7582: LD_INT 0
7584: ST_TO_ADDR
// sEngine := false ;
7585: LD_ADDR_EXP 33
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// sSpec := false ;
7593: LD_ADDR_EXP 30
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// sLevel := false ;
7601: LD_ADDR_EXP 34
7605: PUSH
7606: LD_INT 0
7608: ST_TO_ADDR
// sArmoury := false ;
7609: LD_ADDR_EXP 35
7613: PUSH
7614: LD_INT 0
7616: ST_TO_ADDR
// sRadar := false ;
7617: LD_ADDR_EXP 36
7621: PUSH
7622: LD_INT 0
7624: ST_TO_ADDR
// sBunker := false ;
7625: LD_ADDR_EXP 37
7629: PUSH
7630: LD_INT 0
7632: ST_TO_ADDR
// sHack := false ;
7633: LD_ADDR_EXP 38
7637: PUSH
7638: LD_INT 0
7640: ST_TO_ADDR
// sFire := false ;
7641: LD_ADDR_EXP 39
7645: PUSH
7646: LD_INT 0
7648: ST_TO_ADDR
// sRefresh := false ;
7649: LD_ADDR_EXP 40
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// sExp := false ;
7657: LD_ADDR_EXP 41
7661: PUSH
7662: LD_INT 0
7664: ST_TO_ADDR
// sDepot := false ;
7665: LD_ADDR_EXP 42
7669: PUSH
7670: LD_INT 0
7672: ST_TO_ADDR
// sFlag := false ;
7673: LD_ADDR_EXP 43
7677: PUSH
7678: LD_INT 0
7680: ST_TO_ADDR
// sKamikadze := false ;
7681: LD_ADDR_EXP 51
7685: PUSH
7686: LD_INT 0
7688: ST_TO_ADDR
// sTroll := false ;
7689: LD_ADDR_EXP 52
7693: PUSH
7694: LD_INT 0
7696: ST_TO_ADDR
// sSlow := false ;
7697: LD_ADDR_EXP 53
7701: PUSH
7702: LD_INT 0
7704: ST_TO_ADDR
// sLack := false ;
7705: LD_ADDR_EXP 54
7709: PUSH
7710: LD_INT 0
7712: ST_TO_ADDR
// sTank := false ;
7713: LD_ADDR_EXP 56
7717: PUSH
7718: LD_INT 0
7720: ST_TO_ADDR
// sRemote := false ;
7721: LD_ADDR_EXP 57
7725: PUSH
7726: LD_INT 0
7728: ST_TO_ADDR
// sPowell := false ;
7729: LD_ADDR_EXP 58
7733: PUSH
7734: LD_INT 0
7736: ST_TO_ADDR
// sTeleport := false ;
7737: LD_ADDR_EXP 61
7741: PUSH
7742: LD_INT 0
7744: ST_TO_ADDR
// sOilTower := false ;
7745: LD_ADDR_EXP 63
7749: PUSH
7750: LD_INT 0
7752: ST_TO_ADDR
// sShovel := false ;
7753: LD_ADDR_EXP 64
7757: PUSH
7758: LD_INT 0
7760: ST_TO_ADDR
// sSheik := false ;
7761: LD_ADDR_EXP 65
7765: PUSH
7766: LD_INT 0
7768: ST_TO_ADDR
// sEarthquake := false ;
7769: LD_ADDR_EXP 67
7773: PUSH
7774: LD_INT 0
7776: ST_TO_ADDR
// sAI := false ;
7777: LD_ADDR_EXP 68
7781: PUSH
7782: LD_INT 0
7784: ST_TO_ADDR
// sCargo := false ;
7785: LD_ADDR_EXP 71
7789: PUSH
7790: LD_INT 0
7792: ST_TO_ADDR
// sDLaser := false ;
7793: LD_ADDR_EXP 72
7797: PUSH
7798: LD_INT 0
7800: ST_TO_ADDR
// sExchange := false ;
7801: LD_ADDR_EXP 73
7805: PUSH
7806: LD_INT 0
7808: ST_TO_ADDR
// sFac := false ;
7809: LD_ADDR_EXP 74
7813: PUSH
7814: LD_INT 0
7816: ST_TO_ADDR
// sPower := false ;
7817: LD_ADDR_EXP 75
7821: PUSH
7822: LD_INT 0
7824: ST_TO_ADDR
// sRandom := false ;
7825: LD_ADDR_EXP 76
7829: PUSH
7830: LD_INT 0
7832: ST_TO_ADDR
// sShield := false ;
7833: LD_ADDR_EXP 77
7837: PUSH
7838: LD_INT 0
7840: ST_TO_ADDR
// sTime := false ;
7841: LD_ADDR_EXP 78
7845: PUSH
7846: LD_INT 0
7848: ST_TO_ADDR
// sTools := false ;
7849: LD_ADDR_EXP 79
7853: PUSH
7854: LD_INT 0
7856: ST_TO_ADDR
// sSold := false ;
7857: LD_ADDR_EXP 44
7861: PUSH
7862: LD_INT 0
7864: ST_TO_ADDR
// sDiff := false ;
7865: LD_ADDR_EXP 45
7869: PUSH
7870: LD_INT 0
7872: ST_TO_ADDR
// sFog := false ;
7873: LD_ADDR_EXP 48
7877: PUSH
7878: LD_INT 0
7880: ST_TO_ADDR
// sReset := false ;
7881: LD_ADDR_EXP 49
7885: PUSH
7886: LD_INT 0
7888: ST_TO_ADDR
// sSun := false ;
7889: LD_ADDR_EXP 50
7893: PUSH
7894: LD_INT 0
7896: ST_TO_ADDR
// sTiger := false ;
7897: LD_ADDR_EXP 46
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// sBomb := false ;
7905: LD_ADDR_EXP 47
7909: PUSH
7910: LD_INT 0
7912: ST_TO_ADDR
// sWound := false ;
7913: LD_ADDR_EXP 55
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// sBetray := false ;
7921: LD_ADDR_EXP 59
7925: PUSH
7926: LD_INT 0
7928: ST_TO_ADDR
// sContamin := false ;
7929: LD_ADDR_EXP 60
7933: PUSH
7934: LD_INT 0
7936: ST_TO_ADDR
// sOil := false ;
7937: LD_ADDR_EXP 62
7941: PUSH
7942: LD_INT 0
7944: ST_TO_ADDR
// sStu := false ;
7945: LD_ADDR_EXP 66
7949: PUSH
7950: LD_INT 0
7952: ST_TO_ADDR
// sBazooka := false ;
7953: LD_ADDR_EXP 69
7957: PUSH
7958: LD_INT 0
7960: ST_TO_ADDR
// sMortar := false ;
7961: LD_ADDR_EXP 70
7965: PUSH
7966: LD_INT 0
7968: ST_TO_ADDR
// sRanger := false ;
7969: LD_ADDR_EXP 80
7973: PUSH
7974: LD_INT 0
7976: ST_TO_ADDR
// end ;
7977: LD_VAR 0 1
7981: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7982: LD_INT 0
7984: PPUSH
7985: PPUSH
7986: PPUSH
7987: PPUSH
7988: PPUSH
// result := [ ] ;
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: EMPTY
7995: ST_TO_ADDR
// if campaign_id = 1 then
7996: LD_OWVAR 69
8000: PUSH
8001: LD_INT 1
8003: EQUAL
8004: IFFALSE 10942
// begin case mission_number of 1 :
8006: LD_OWVAR 70
8010: PUSH
8011: LD_INT 1
8013: DOUBLE
8014: EQUAL
8015: IFTRUE 8019
8017: GO 8083
8019: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8020: LD_ADDR_VAR 0 1
8024: PUSH
8025: LD_INT 2
8027: PUSH
8028: LD_INT 4
8030: PUSH
8031: LD_INT 11
8033: PUSH
8034: LD_INT 12
8036: PUSH
8037: LD_INT 15
8039: PUSH
8040: LD_INT 16
8042: PUSH
8043: LD_INT 22
8045: PUSH
8046: LD_INT 23
8048: PUSH
8049: LD_INT 26
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 101
8065: PUSH
8066: LD_INT 102
8068: PUSH
8069: LD_INT 106
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: ST_TO_ADDR
8081: GO 10940
8083: LD_INT 2
8085: DOUBLE
8086: EQUAL
8087: IFTRUE 8091
8089: GO 8163
8091: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8092: LD_ADDR_VAR 0 1
8096: PUSH
8097: LD_INT 2
8099: PUSH
8100: LD_INT 4
8102: PUSH
8103: LD_INT 11
8105: PUSH
8106: LD_INT 12
8108: PUSH
8109: LD_INT 15
8111: PUSH
8112: LD_INT 16
8114: PUSH
8115: LD_INT 22
8117: PUSH
8118: LD_INT 23
8120: PUSH
8121: LD_INT 26
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 101
8137: PUSH
8138: LD_INT 102
8140: PUSH
8141: LD_INT 105
8143: PUSH
8144: LD_INT 106
8146: PUSH
8147: LD_INT 108
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: ST_TO_ADDR
8161: GO 10940
8163: LD_INT 3
8165: DOUBLE
8166: EQUAL
8167: IFTRUE 8171
8169: GO 8247
8171: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8172: LD_ADDR_VAR 0 1
8176: PUSH
8177: LD_INT 2
8179: PUSH
8180: LD_INT 4
8182: PUSH
8183: LD_INT 5
8185: PUSH
8186: LD_INT 11
8188: PUSH
8189: LD_INT 12
8191: PUSH
8192: LD_INT 15
8194: PUSH
8195: LD_INT 16
8197: PUSH
8198: LD_INT 22
8200: PUSH
8201: LD_INT 26
8203: PUSH
8204: LD_INT 36
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 101
8221: PUSH
8222: LD_INT 102
8224: PUSH
8225: LD_INT 105
8227: PUSH
8228: LD_INT 106
8230: PUSH
8231: LD_INT 108
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: ST_TO_ADDR
8245: GO 10940
8247: LD_INT 4
8249: DOUBLE
8250: EQUAL
8251: IFTRUE 8255
8253: GO 8339
8255: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8256: LD_ADDR_VAR 0 1
8260: PUSH
8261: LD_INT 2
8263: PUSH
8264: LD_INT 4
8266: PUSH
8267: LD_INT 5
8269: PUSH
8270: LD_INT 8
8272: PUSH
8273: LD_INT 11
8275: PUSH
8276: LD_INT 12
8278: PUSH
8279: LD_INT 15
8281: PUSH
8282: LD_INT 16
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_INT 23
8290: PUSH
8291: LD_INT 26
8293: PUSH
8294: LD_INT 36
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 101
8313: PUSH
8314: LD_INT 102
8316: PUSH
8317: LD_INT 105
8319: PUSH
8320: LD_INT 106
8322: PUSH
8323: LD_INT 108
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: ST_TO_ADDR
8337: GO 10940
8339: LD_INT 5
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8447
8347: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8348: LD_ADDR_VAR 0 1
8352: PUSH
8353: LD_INT 2
8355: PUSH
8356: LD_INT 4
8358: PUSH
8359: LD_INT 5
8361: PUSH
8362: LD_INT 6
8364: PUSH
8365: LD_INT 8
8367: PUSH
8368: LD_INT 11
8370: PUSH
8371: LD_INT 12
8373: PUSH
8374: LD_INT 15
8376: PUSH
8377: LD_INT 16
8379: PUSH
8380: LD_INT 22
8382: PUSH
8383: LD_INT 23
8385: PUSH
8386: LD_INT 25
8388: PUSH
8389: LD_INT 26
8391: PUSH
8392: LD_INT 36
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: PUSH
8411: LD_INT 101
8413: PUSH
8414: LD_INT 102
8416: PUSH
8417: LD_INT 105
8419: PUSH
8420: LD_INT 106
8422: PUSH
8423: LD_INT 108
8425: PUSH
8426: LD_INT 109
8428: PUSH
8429: LD_INT 112
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: ST_TO_ADDR
8445: GO 10940
8447: LD_INT 6
8449: DOUBLE
8450: EQUAL
8451: IFTRUE 8455
8453: GO 8575
8455: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8456: LD_ADDR_VAR 0 1
8460: PUSH
8461: LD_INT 2
8463: PUSH
8464: LD_INT 4
8466: PUSH
8467: LD_INT 5
8469: PUSH
8470: LD_INT 6
8472: PUSH
8473: LD_INT 8
8475: PUSH
8476: LD_INT 11
8478: PUSH
8479: LD_INT 12
8481: PUSH
8482: LD_INT 15
8484: PUSH
8485: LD_INT 16
8487: PUSH
8488: LD_INT 20
8490: PUSH
8491: LD_INT 21
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 23
8499: PUSH
8500: LD_INT 25
8502: PUSH
8503: LD_INT 26
8505: PUSH
8506: LD_INT 30
8508: PUSH
8509: LD_INT 31
8511: PUSH
8512: LD_INT 32
8514: PUSH
8515: LD_INT 36
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 101
8541: PUSH
8542: LD_INT 102
8544: PUSH
8545: LD_INT 105
8547: PUSH
8548: LD_INT 106
8550: PUSH
8551: LD_INT 108
8553: PUSH
8554: LD_INT 109
8556: PUSH
8557: LD_INT 112
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: ST_TO_ADDR
8573: GO 10940
8575: LD_INT 7
8577: DOUBLE
8578: EQUAL
8579: IFTRUE 8583
8581: GO 8683
8583: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8584: LD_ADDR_VAR 0 1
8588: PUSH
8589: LD_INT 2
8591: PUSH
8592: LD_INT 4
8594: PUSH
8595: LD_INT 5
8597: PUSH
8598: LD_INT 7
8600: PUSH
8601: LD_INT 11
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: LD_INT 15
8609: PUSH
8610: LD_INT 16
8612: PUSH
8613: LD_INT 20
8615: PUSH
8616: LD_INT 21
8618: PUSH
8619: LD_INT 22
8621: PUSH
8622: LD_INT 23
8624: PUSH
8625: LD_INT 25
8627: PUSH
8628: LD_INT 26
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: PUSH
8647: LD_INT 101
8649: PUSH
8650: LD_INT 102
8652: PUSH
8653: LD_INT 103
8655: PUSH
8656: LD_INT 105
8658: PUSH
8659: LD_INT 106
8661: PUSH
8662: LD_INT 108
8664: PUSH
8665: LD_INT 112
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: ST_TO_ADDR
8681: GO 10940
8683: LD_INT 8
8685: DOUBLE
8686: EQUAL
8687: IFTRUE 8691
8689: GO 8819
8691: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8692: LD_ADDR_VAR 0 1
8696: PUSH
8697: LD_INT 2
8699: PUSH
8700: LD_INT 4
8702: PUSH
8703: LD_INT 5
8705: PUSH
8706: LD_INT 6
8708: PUSH
8709: LD_INT 7
8711: PUSH
8712: LD_INT 8
8714: PUSH
8715: LD_INT 11
8717: PUSH
8718: LD_INT 12
8720: PUSH
8721: LD_INT 15
8723: PUSH
8724: LD_INT 16
8726: PUSH
8727: LD_INT 20
8729: PUSH
8730: LD_INT 21
8732: PUSH
8733: LD_INT 22
8735: PUSH
8736: LD_INT 23
8738: PUSH
8739: LD_INT 25
8741: PUSH
8742: LD_INT 26
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 31
8750: PUSH
8751: LD_INT 32
8753: PUSH
8754: LD_INT 36
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 101
8781: PUSH
8782: LD_INT 102
8784: PUSH
8785: LD_INT 103
8787: PUSH
8788: LD_INT 105
8790: PUSH
8791: LD_INT 106
8793: PUSH
8794: LD_INT 108
8796: PUSH
8797: LD_INT 109
8799: PUSH
8800: LD_INT 112
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: ST_TO_ADDR
8817: GO 10940
8819: LD_INT 9
8821: DOUBLE
8822: EQUAL
8823: IFTRUE 8827
8825: GO 8963
8827: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8828: LD_ADDR_VAR 0 1
8832: PUSH
8833: LD_INT 2
8835: PUSH
8836: LD_INT 4
8838: PUSH
8839: LD_INT 5
8841: PUSH
8842: LD_INT 6
8844: PUSH
8845: LD_INT 7
8847: PUSH
8848: LD_INT 8
8850: PUSH
8851: LD_INT 11
8853: PUSH
8854: LD_INT 12
8856: PUSH
8857: LD_INT 15
8859: PUSH
8860: LD_INT 16
8862: PUSH
8863: LD_INT 20
8865: PUSH
8866: LD_INT 21
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 23
8874: PUSH
8875: LD_INT 25
8877: PUSH
8878: LD_INT 26
8880: PUSH
8881: LD_INT 28
8883: PUSH
8884: LD_INT 30
8886: PUSH
8887: LD_INT 31
8889: PUSH
8890: LD_INT 32
8892: PUSH
8893: LD_INT 36
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: PUSH
8919: LD_INT 101
8921: PUSH
8922: LD_INT 102
8924: PUSH
8925: LD_INT 103
8927: PUSH
8928: LD_INT 105
8930: PUSH
8931: LD_INT 106
8933: PUSH
8934: LD_INT 108
8936: PUSH
8937: LD_INT 109
8939: PUSH
8940: LD_INT 112
8942: PUSH
8943: LD_INT 114
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: ST_TO_ADDR
8961: GO 10940
8963: LD_INT 10
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9155
8971: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: LD_INT 2
8979: PUSH
8980: LD_INT 4
8982: PUSH
8983: LD_INT 5
8985: PUSH
8986: LD_INT 6
8988: PUSH
8989: LD_INT 7
8991: PUSH
8992: LD_INT 8
8994: PUSH
8995: LD_INT 9
8997: PUSH
8998: LD_INT 10
9000: PUSH
9001: LD_INT 11
9003: PUSH
9004: LD_INT 12
9006: PUSH
9007: LD_INT 13
9009: PUSH
9010: LD_INT 14
9012: PUSH
9013: LD_INT 15
9015: PUSH
9016: LD_INT 16
9018: PUSH
9019: LD_INT 17
9021: PUSH
9022: LD_INT 18
9024: PUSH
9025: LD_INT 19
9027: PUSH
9028: LD_INT 20
9030: PUSH
9031: LD_INT 21
9033: PUSH
9034: LD_INT 22
9036: PUSH
9037: LD_INT 23
9039: PUSH
9040: LD_INT 24
9042: PUSH
9043: LD_INT 25
9045: PUSH
9046: LD_INT 26
9048: PUSH
9049: LD_INT 28
9051: PUSH
9052: LD_INT 30
9054: PUSH
9055: LD_INT 31
9057: PUSH
9058: LD_INT 32
9060: PUSH
9061: LD_INT 36
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 101
9097: PUSH
9098: LD_INT 102
9100: PUSH
9101: LD_INT 103
9103: PUSH
9104: LD_INT 104
9106: PUSH
9107: LD_INT 105
9109: PUSH
9110: LD_INT 106
9112: PUSH
9113: LD_INT 107
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: LD_INT 109
9121: PUSH
9122: LD_INT 110
9124: PUSH
9125: LD_INT 111
9127: PUSH
9128: LD_INT 112
9130: PUSH
9131: LD_INT 114
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: ST_TO_ADDR
9153: GO 10940
9155: LD_INT 11
9157: DOUBLE
9158: EQUAL
9159: IFTRUE 9163
9161: GO 9355
9163: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9164: LD_ADDR_VAR 0 1
9168: PUSH
9169: LD_INT 2
9171: PUSH
9172: LD_INT 3
9174: PUSH
9175: LD_INT 4
9177: PUSH
9178: LD_INT 5
9180: PUSH
9181: LD_INT 6
9183: PUSH
9184: LD_INT 7
9186: PUSH
9187: LD_INT 8
9189: PUSH
9190: LD_INT 9
9192: PUSH
9193: LD_INT 10
9195: PUSH
9196: LD_INT 11
9198: PUSH
9199: LD_INT 12
9201: PUSH
9202: LD_INT 13
9204: PUSH
9205: LD_INT 14
9207: PUSH
9208: LD_INT 15
9210: PUSH
9211: LD_INT 16
9213: PUSH
9214: LD_INT 17
9216: PUSH
9217: LD_INT 18
9219: PUSH
9220: LD_INT 19
9222: PUSH
9223: LD_INT 20
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 22
9231: PUSH
9232: LD_INT 23
9234: PUSH
9235: LD_INT 24
9237: PUSH
9238: LD_INT 25
9240: PUSH
9241: LD_INT 26
9243: PUSH
9244: LD_INT 28
9246: PUSH
9247: LD_INT 30
9249: PUSH
9250: LD_INT 31
9252: PUSH
9253: LD_INT 32
9255: PUSH
9256: LD_INT 34
9258: PUSH
9259: LD_INT 36
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 101
9297: PUSH
9298: LD_INT 102
9300: PUSH
9301: LD_INT 103
9303: PUSH
9304: LD_INT 104
9306: PUSH
9307: LD_INT 105
9309: PUSH
9310: LD_INT 106
9312: PUSH
9313: LD_INT 107
9315: PUSH
9316: LD_INT 108
9318: PUSH
9319: LD_INT 109
9321: PUSH
9322: LD_INT 110
9324: PUSH
9325: LD_INT 111
9327: PUSH
9328: LD_INT 112
9330: PUSH
9331: LD_INT 114
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: ST_TO_ADDR
9353: GO 10940
9355: LD_INT 12
9357: DOUBLE
9358: EQUAL
9359: IFTRUE 9363
9361: GO 9571
9363: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9364: LD_ADDR_VAR 0 1
9368: PUSH
9369: LD_INT 1
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: LD_INT 3
9377: PUSH
9378: LD_INT 4
9380: PUSH
9381: LD_INT 5
9383: PUSH
9384: LD_INT 6
9386: PUSH
9387: LD_INT 7
9389: PUSH
9390: LD_INT 8
9392: PUSH
9393: LD_INT 9
9395: PUSH
9396: LD_INT 10
9398: PUSH
9399: LD_INT 11
9401: PUSH
9402: LD_INT 12
9404: PUSH
9405: LD_INT 13
9407: PUSH
9408: LD_INT 14
9410: PUSH
9411: LD_INT 15
9413: PUSH
9414: LD_INT 16
9416: PUSH
9417: LD_INT 17
9419: PUSH
9420: LD_INT 18
9422: PUSH
9423: LD_INT 19
9425: PUSH
9426: LD_INT 20
9428: PUSH
9429: LD_INT 21
9431: PUSH
9432: LD_INT 22
9434: PUSH
9435: LD_INT 23
9437: PUSH
9438: LD_INT 24
9440: PUSH
9441: LD_INT 25
9443: PUSH
9444: LD_INT 26
9446: PUSH
9447: LD_INT 27
9449: PUSH
9450: LD_INT 28
9452: PUSH
9453: LD_INT 30
9455: PUSH
9456: LD_INT 31
9458: PUSH
9459: LD_INT 32
9461: PUSH
9462: LD_INT 33
9464: PUSH
9465: LD_INT 34
9467: PUSH
9468: LD_INT 36
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 101
9509: PUSH
9510: LD_INT 102
9512: PUSH
9513: LD_INT 103
9515: PUSH
9516: LD_INT 104
9518: PUSH
9519: LD_INT 105
9521: PUSH
9522: LD_INT 106
9524: PUSH
9525: LD_INT 107
9527: PUSH
9528: LD_INT 108
9530: PUSH
9531: LD_INT 109
9533: PUSH
9534: LD_INT 110
9536: PUSH
9537: LD_INT 111
9539: PUSH
9540: LD_INT 112
9542: PUSH
9543: LD_INT 113
9545: PUSH
9546: LD_INT 114
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: ST_TO_ADDR
9569: GO 10940
9571: LD_INT 13
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9775
9579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9580: LD_ADDR_VAR 0 1
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: LD_INT 2
9590: PUSH
9591: LD_INT 3
9593: PUSH
9594: LD_INT 4
9596: PUSH
9597: LD_INT 5
9599: PUSH
9600: LD_INT 8
9602: PUSH
9603: LD_INT 9
9605: PUSH
9606: LD_INT 10
9608: PUSH
9609: LD_INT 11
9611: PUSH
9612: LD_INT 12
9614: PUSH
9615: LD_INT 14
9617: PUSH
9618: LD_INT 15
9620: PUSH
9621: LD_INT 16
9623: PUSH
9624: LD_INT 17
9626: PUSH
9627: LD_INT 18
9629: PUSH
9630: LD_INT 19
9632: PUSH
9633: LD_INT 20
9635: PUSH
9636: LD_INT 21
9638: PUSH
9639: LD_INT 22
9641: PUSH
9642: LD_INT 23
9644: PUSH
9645: LD_INT 24
9647: PUSH
9648: LD_INT 25
9650: PUSH
9651: LD_INT 26
9653: PUSH
9654: LD_INT 27
9656: PUSH
9657: LD_INT 28
9659: PUSH
9660: LD_INT 30
9662: PUSH
9663: LD_INT 31
9665: PUSH
9666: LD_INT 32
9668: PUSH
9669: LD_INT 33
9671: PUSH
9672: LD_INT 34
9674: PUSH
9675: LD_INT 36
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 101
9713: PUSH
9714: LD_INT 102
9716: PUSH
9717: LD_INT 103
9719: PUSH
9720: LD_INT 104
9722: PUSH
9723: LD_INT 105
9725: PUSH
9726: LD_INT 106
9728: PUSH
9729: LD_INT 107
9731: PUSH
9732: LD_INT 108
9734: PUSH
9735: LD_INT 109
9737: PUSH
9738: LD_INT 110
9740: PUSH
9741: LD_INT 111
9743: PUSH
9744: LD_INT 112
9746: PUSH
9747: LD_INT 113
9749: PUSH
9750: LD_INT 114
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: ST_TO_ADDR
9773: GO 10940
9775: LD_INT 14
9777: DOUBLE
9778: EQUAL
9779: IFTRUE 9783
9781: GO 9995
9783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9784: LD_ADDR_VAR 0 1
9788: PUSH
9789: LD_INT 1
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: LD_INT 3
9797: PUSH
9798: LD_INT 4
9800: PUSH
9801: LD_INT 5
9803: PUSH
9804: LD_INT 6
9806: PUSH
9807: LD_INT 7
9809: PUSH
9810: LD_INT 8
9812: PUSH
9813: LD_INT 9
9815: PUSH
9816: LD_INT 10
9818: PUSH
9819: LD_INT 11
9821: PUSH
9822: LD_INT 12
9824: PUSH
9825: LD_INT 13
9827: PUSH
9828: LD_INT 14
9830: PUSH
9831: LD_INT 15
9833: PUSH
9834: LD_INT 16
9836: PUSH
9837: LD_INT 17
9839: PUSH
9840: LD_INT 18
9842: PUSH
9843: LD_INT 19
9845: PUSH
9846: LD_INT 20
9848: PUSH
9849: LD_INT 21
9851: PUSH
9852: LD_INT 22
9854: PUSH
9855: LD_INT 23
9857: PUSH
9858: LD_INT 24
9860: PUSH
9861: LD_INT 25
9863: PUSH
9864: LD_INT 26
9866: PUSH
9867: LD_INT 27
9869: PUSH
9870: LD_INT 28
9872: PUSH
9873: LD_INT 29
9875: PUSH
9876: LD_INT 30
9878: PUSH
9879: LD_INT 31
9881: PUSH
9882: LD_INT 32
9884: PUSH
9885: LD_INT 33
9887: PUSH
9888: LD_INT 34
9890: PUSH
9891: LD_INT 36
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 101
9933: PUSH
9934: LD_INT 102
9936: PUSH
9937: LD_INT 103
9939: PUSH
9940: LD_INT 104
9942: PUSH
9943: LD_INT 105
9945: PUSH
9946: LD_INT 106
9948: PUSH
9949: LD_INT 107
9951: PUSH
9952: LD_INT 108
9954: PUSH
9955: LD_INT 109
9957: PUSH
9958: LD_INT 110
9960: PUSH
9961: LD_INT 111
9963: PUSH
9964: LD_INT 112
9966: PUSH
9967: LD_INT 113
9969: PUSH
9970: LD_INT 114
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: ST_TO_ADDR
9993: GO 10940
9995: LD_INT 15
9997: DOUBLE
9998: EQUAL
9999: IFTRUE 10003
10001: GO 10215
10003: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10004: LD_ADDR_VAR 0 1
10008: PUSH
10009: LD_INT 1
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: LD_INT 3
10017: PUSH
10018: LD_INT 4
10020: PUSH
10021: LD_INT 5
10023: PUSH
10024: LD_INT 6
10026: PUSH
10027: LD_INT 7
10029: PUSH
10030: LD_INT 8
10032: PUSH
10033: LD_INT 9
10035: PUSH
10036: LD_INT 10
10038: PUSH
10039: LD_INT 11
10041: PUSH
10042: LD_INT 12
10044: PUSH
10045: LD_INT 13
10047: PUSH
10048: LD_INT 14
10050: PUSH
10051: LD_INT 15
10053: PUSH
10054: LD_INT 16
10056: PUSH
10057: LD_INT 17
10059: PUSH
10060: LD_INT 18
10062: PUSH
10063: LD_INT 19
10065: PUSH
10066: LD_INT 20
10068: PUSH
10069: LD_INT 21
10071: PUSH
10072: LD_INT 22
10074: PUSH
10075: LD_INT 23
10077: PUSH
10078: LD_INT 24
10080: PUSH
10081: LD_INT 25
10083: PUSH
10084: LD_INT 26
10086: PUSH
10087: LD_INT 27
10089: PUSH
10090: LD_INT 28
10092: PUSH
10093: LD_INT 29
10095: PUSH
10096: LD_INT 30
10098: PUSH
10099: LD_INT 31
10101: PUSH
10102: LD_INT 32
10104: PUSH
10105: LD_INT 33
10107: PUSH
10108: LD_INT 34
10110: PUSH
10111: LD_INT 36
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 101
10153: PUSH
10154: LD_INT 102
10156: PUSH
10157: LD_INT 103
10159: PUSH
10160: LD_INT 104
10162: PUSH
10163: LD_INT 105
10165: PUSH
10166: LD_INT 106
10168: PUSH
10169: LD_INT 107
10171: PUSH
10172: LD_INT 108
10174: PUSH
10175: LD_INT 109
10177: PUSH
10178: LD_INT 110
10180: PUSH
10181: LD_INT 111
10183: PUSH
10184: LD_INT 112
10186: PUSH
10187: LD_INT 113
10189: PUSH
10190: LD_INT 114
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: ST_TO_ADDR
10213: GO 10940
10215: LD_INT 16
10217: DOUBLE
10218: EQUAL
10219: IFTRUE 10223
10221: GO 10347
10223: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10224: LD_ADDR_VAR 0 1
10228: PUSH
10229: LD_INT 2
10231: PUSH
10232: LD_INT 4
10234: PUSH
10235: LD_INT 5
10237: PUSH
10238: LD_INT 7
10240: PUSH
10241: LD_INT 11
10243: PUSH
10244: LD_INT 12
10246: PUSH
10247: LD_INT 15
10249: PUSH
10250: LD_INT 16
10252: PUSH
10253: LD_INT 20
10255: PUSH
10256: LD_INT 21
10258: PUSH
10259: LD_INT 22
10261: PUSH
10262: LD_INT 23
10264: PUSH
10265: LD_INT 25
10267: PUSH
10268: LD_INT 26
10270: PUSH
10271: LD_INT 30
10273: PUSH
10274: LD_INT 31
10276: PUSH
10277: LD_INT 32
10279: PUSH
10280: LD_INT 33
10282: PUSH
10283: LD_INT 34
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 101
10309: PUSH
10310: LD_INT 102
10312: PUSH
10313: LD_INT 103
10315: PUSH
10316: LD_INT 106
10318: PUSH
10319: LD_INT 108
10321: PUSH
10322: LD_INT 112
10324: PUSH
10325: LD_INT 113
10327: PUSH
10328: LD_INT 114
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: ST_TO_ADDR
10345: GO 10940
10347: LD_INT 17
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10567
10355: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10356: LD_ADDR_VAR 0 1
10360: PUSH
10361: LD_INT 1
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 3
10369: PUSH
10370: LD_INT 4
10372: PUSH
10373: LD_INT 5
10375: PUSH
10376: LD_INT 6
10378: PUSH
10379: LD_INT 7
10381: PUSH
10382: LD_INT 8
10384: PUSH
10385: LD_INT 9
10387: PUSH
10388: LD_INT 10
10390: PUSH
10391: LD_INT 11
10393: PUSH
10394: LD_INT 12
10396: PUSH
10397: LD_INT 13
10399: PUSH
10400: LD_INT 14
10402: PUSH
10403: LD_INT 15
10405: PUSH
10406: LD_INT 16
10408: PUSH
10409: LD_INT 17
10411: PUSH
10412: LD_INT 18
10414: PUSH
10415: LD_INT 19
10417: PUSH
10418: LD_INT 20
10420: PUSH
10421: LD_INT 21
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 23
10429: PUSH
10430: LD_INT 24
10432: PUSH
10433: LD_INT 25
10435: PUSH
10436: LD_INT 26
10438: PUSH
10439: LD_INT 27
10441: PUSH
10442: LD_INT 28
10444: PUSH
10445: LD_INT 29
10447: PUSH
10448: LD_INT 30
10450: PUSH
10451: LD_INT 31
10453: PUSH
10454: LD_INT 32
10456: PUSH
10457: LD_INT 33
10459: PUSH
10460: LD_INT 34
10462: PUSH
10463: LD_INT 36
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 101
10505: PUSH
10506: LD_INT 102
10508: PUSH
10509: LD_INT 103
10511: PUSH
10512: LD_INT 104
10514: PUSH
10515: LD_INT 105
10517: PUSH
10518: LD_INT 106
10520: PUSH
10521: LD_INT 107
10523: PUSH
10524: LD_INT 108
10526: PUSH
10527: LD_INT 109
10529: PUSH
10530: LD_INT 110
10532: PUSH
10533: LD_INT 111
10535: PUSH
10536: LD_INT 112
10538: PUSH
10539: LD_INT 113
10541: PUSH
10542: LD_INT 114
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: ST_TO_ADDR
10565: GO 10940
10567: LD_INT 18
10569: DOUBLE
10570: EQUAL
10571: IFTRUE 10575
10573: GO 10711
10575: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10576: LD_ADDR_VAR 0 1
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 4
10586: PUSH
10587: LD_INT 5
10589: PUSH
10590: LD_INT 7
10592: PUSH
10593: LD_INT 11
10595: PUSH
10596: LD_INT 12
10598: PUSH
10599: LD_INT 15
10601: PUSH
10602: LD_INT 16
10604: PUSH
10605: LD_INT 20
10607: PUSH
10608: LD_INT 21
10610: PUSH
10611: LD_INT 22
10613: PUSH
10614: LD_INT 23
10616: PUSH
10617: LD_INT 25
10619: PUSH
10620: LD_INT 26
10622: PUSH
10623: LD_INT 30
10625: PUSH
10626: LD_INT 31
10628: PUSH
10629: LD_INT 32
10631: PUSH
10632: LD_INT 33
10634: PUSH
10635: LD_INT 34
10637: PUSH
10638: LD_INT 35
10640: PUSH
10641: LD_INT 36
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 101
10669: PUSH
10670: LD_INT 102
10672: PUSH
10673: LD_INT 103
10675: PUSH
10676: LD_INT 106
10678: PUSH
10679: LD_INT 108
10681: PUSH
10682: LD_INT 112
10684: PUSH
10685: LD_INT 113
10687: PUSH
10688: LD_INT 114
10690: PUSH
10691: LD_INT 115
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: ST_TO_ADDR
10709: GO 10940
10711: LD_INT 19
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10939
10719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10720: LD_ADDR_VAR 0 1
10724: PUSH
10725: LD_INT 1
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: LD_INT 3
10733: PUSH
10734: LD_INT 4
10736: PUSH
10737: LD_INT 5
10739: PUSH
10740: LD_INT 6
10742: PUSH
10743: LD_INT 7
10745: PUSH
10746: LD_INT 8
10748: PUSH
10749: LD_INT 9
10751: PUSH
10752: LD_INT 10
10754: PUSH
10755: LD_INT 11
10757: PUSH
10758: LD_INT 12
10760: PUSH
10761: LD_INT 13
10763: PUSH
10764: LD_INT 14
10766: PUSH
10767: LD_INT 15
10769: PUSH
10770: LD_INT 16
10772: PUSH
10773: LD_INT 17
10775: PUSH
10776: LD_INT 18
10778: PUSH
10779: LD_INT 19
10781: PUSH
10782: LD_INT 20
10784: PUSH
10785: LD_INT 21
10787: PUSH
10788: LD_INT 22
10790: PUSH
10791: LD_INT 23
10793: PUSH
10794: LD_INT 24
10796: PUSH
10797: LD_INT 25
10799: PUSH
10800: LD_INT 26
10802: PUSH
10803: LD_INT 27
10805: PUSH
10806: LD_INT 28
10808: PUSH
10809: LD_INT 29
10811: PUSH
10812: LD_INT 30
10814: PUSH
10815: LD_INT 31
10817: PUSH
10818: LD_INT 32
10820: PUSH
10821: LD_INT 33
10823: PUSH
10824: LD_INT 34
10826: PUSH
10827: LD_INT 35
10829: PUSH
10830: LD_INT 36
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 101
10873: PUSH
10874: LD_INT 102
10876: PUSH
10877: LD_INT 103
10879: PUSH
10880: LD_INT 104
10882: PUSH
10883: LD_INT 105
10885: PUSH
10886: LD_INT 106
10888: PUSH
10889: LD_INT 107
10891: PUSH
10892: LD_INT 108
10894: PUSH
10895: LD_INT 109
10897: PUSH
10898: LD_INT 110
10900: PUSH
10901: LD_INT 111
10903: PUSH
10904: LD_INT 112
10906: PUSH
10907: LD_INT 113
10909: PUSH
10910: LD_INT 114
10912: PUSH
10913: LD_INT 115
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: ST_TO_ADDR
10937: GO 10940
10939: POP
// end else
10940: GO 11159
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10942: LD_ADDR_VAR 0 1
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: LD_INT 2
10952: PUSH
10953: LD_INT 3
10955: PUSH
10956: LD_INT 4
10958: PUSH
10959: LD_INT 5
10961: PUSH
10962: LD_INT 6
10964: PUSH
10965: LD_INT 7
10967: PUSH
10968: LD_INT 8
10970: PUSH
10971: LD_INT 9
10973: PUSH
10974: LD_INT 10
10976: PUSH
10977: LD_INT 11
10979: PUSH
10980: LD_INT 12
10982: PUSH
10983: LD_INT 13
10985: PUSH
10986: LD_INT 14
10988: PUSH
10989: LD_INT 15
10991: PUSH
10992: LD_INT 16
10994: PUSH
10995: LD_INT 17
10997: PUSH
10998: LD_INT 18
11000: PUSH
11001: LD_INT 19
11003: PUSH
11004: LD_INT 20
11006: PUSH
11007: LD_INT 21
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_INT 23
11015: PUSH
11016: LD_INT 24
11018: PUSH
11019: LD_INT 25
11021: PUSH
11022: LD_INT 26
11024: PUSH
11025: LD_INT 27
11027: PUSH
11028: LD_INT 28
11030: PUSH
11031: LD_INT 29
11033: PUSH
11034: LD_INT 30
11036: PUSH
11037: LD_INT 31
11039: PUSH
11040: LD_INT 32
11042: PUSH
11043: LD_INT 33
11045: PUSH
11046: LD_INT 34
11048: PUSH
11049: LD_INT 35
11051: PUSH
11052: LD_INT 36
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 101
11095: PUSH
11096: LD_INT 102
11098: PUSH
11099: LD_INT 103
11101: PUSH
11102: LD_INT 104
11104: PUSH
11105: LD_INT 105
11107: PUSH
11108: LD_INT 106
11110: PUSH
11111: LD_INT 107
11113: PUSH
11114: LD_INT 108
11116: PUSH
11117: LD_INT 109
11119: PUSH
11120: LD_INT 110
11122: PUSH
11123: LD_INT 111
11125: PUSH
11126: LD_INT 112
11128: PUSH
11129: LD_INT 113
11131: PUSH
11132: LD_INT 114
11134: PUSH
11135: LD_INT 115
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: ST_TO_ADDR
// if result then
11159: LD_VAR 0 1
11163: IFFALSE 11452
// begin normal :=  ;
11165: LD_ADDR_VAR 0 3
11169: PUSH
11170: LD_STRING 
11172: ST_TO_ADDR
// hardcore :=  ;
11173: LD_ADDR_VAR 0 4
11177: PUSH
11178: LD_STRING 
11180: ST_TO_ADDR
// for i = 1 to normalCounter do
11181: LD_ADDR_VAR 0 5
11185: PUSH
11186: DOUBLE
11187: LD_INT 1
11189: DEC
11190: ST_TO_ADDR
11191: LD_EXP 28
11195: PUSH
11196: FOR_TO
11197: IFFALSE 11298
// begin tmp := 0 ;
11199: LD_ADDR_VAR 0 2
11203: PUSH
11204: LD_STRING 0
11206: ST_TO_ADDR
// if result [ 1 ] then
11207: LD_VAR 0 1
11211: PUSH
11212: LD_INT 1
11214: ARRAY
11215: IFFALSE 11280
// if result [ 1 ] [ 1 ] = i then
11217: LD_VAR 0 1
11221: PUSH
11222: LD_INT 1
11224: ARRAY
11225: PUSH
11226: LD_INT 1
11228: ARRAY
11229: PUSH
11230: LD_VAR 0 5
11234: EQUAL
11235: IFFALSE 11280
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11237: LD_ADDR_VAR 0 1
11241: PUSH
11242: LD_VAR 0 1
11246: PPUSH
11247: LD_INT 1
11249: PPUSH
11250: LD_VAR 0 1
11254: PUSH
11255: LD_INT 1
11257: ARRAY
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: CALL_OW 3
11266: PPUSH
11267: CALL_OW 1
11271: ST_TO_ADDR
// tmp := 1 ;
11272: LD_ADDR_VAR 0 2
11276: PUSH
11277: LD_STRING 1
11279: ST_TO_ADDR
// end ; normal := normal & tmp ;
11280: LD_ADDR_VAR 0 3
11284: PUSH
11285: LD_VAR 0 3
11289: PUSH
11290: LD_VAR 0 2
11294: STR
11295: ST_TO_ADDR
// end ;
11296: GO 11196
11298: POP
11299: POP
// for i = 1 to hardcoreCounter do
11300: LD_ADDR_VAR 0 5
11304: PUSH
11305: DOUBLE
11306: LD_INT 1
11308: DEC
11309: ST_TO_ADDR
11310: LD_EXP 29
11314: PUSH
11315: FOR_TO
11316: IFFALSE 11421
// begin tmp := 0 ;
11318: LD_ADDR_VAR 0 2
11322: PUSH
11323: LD_STRING 0
11325: ST_TO_ADDR
// if result [ 2 ] then
11326: LD_VAR 0 1
11330: PUSH
11331: LD_INT 2
11333: ARRAY
11334: IFFALSE 11403
// if result [ 2 ] [ 1 ] = 100 + i then
11336: LD_VAR 0 1
11340: PUSH
11341: LD_INT 2
11343: ARRAY
11344: PUSH
11345: LD_INT 1
11347: ARRAY
11348: PUSH
11349: LD_INT 100
11351: PUSH
11352: LD_VAR 0 5
11356: PLUS
11357: EQUAL
11358: IFFALSE 11403
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11360: LD_ADDR_VAR 0 1
11364: PUSH
11365: LD_VAR 0 1
11369: PPUSH
11370: LD_INT 2
11372: PPUSH
11373: LD_VAR 0 1
11377: PUSH
11378: LD_INT 2
11380: ARRAY
11381: PPUSH
11382: LD_INT 1
11384: PPUSH
11385: CALL_OW 3
11389: PPUSH
11390: CALL_OW 1
11394: ST_TO_ADDR
// tmp := 1 ;
11395: LD_ADDR_VAR 0 2
11399: PUSH
11400: LD_STRING 1
11402: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11403: LD_ADDR_VAR 0 4
11407: PUSH
11408: LD_VAR 0 4
11412: PUSH
11413: LD_VAR 0 2
11417: STR
11418: ST_TO_ADDR
// end ;
11419: GO 11315
11421: POP
11422: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11423: LD_STRING getStreamItemsFromMission("
11425: PUSH
11426: LD_VAR 0 3
11430: STR
11431: PUSH
11432: LD_STRING ","
11434: STR
11435: PUSH
11436: LD_VAR 0 4
11440: STR
11441: PUSH
11442: LD_STRING ")
11444: STR
11445: PPUSH
11446: CALL_OW 559
// end else
11450: GO 11459
// ToLua ( getStreamItemsFromMission("","") ) ;
11452: LD_STRING getStreamItemsFromMission("","")
11454: PPUSH
11455: CALL_OW 559
// end ;
11459: LD_VAR 0 1
11463: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11464: LD_EXP 27
11468: PUSH
11469: LD_EXP 32
11473: AND
11474: IFFALSE 11598
11476: GO 11478
11478: DISABLE
11479: LD_INT 0
11481: PPUSH
11482: PPUSH
// begin enable ;
11483: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11484: LD_ADDR_VAR 0 2
11488: PUSH
11489: LD_INT 22
11491: PUSH
11492: LD_OWVAR 2
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: LD_INT 34
11506: PUSH
11507: LD_INT 7
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 34
11516: PUSH
11517: LD_INT 45
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 34
11526: PUSH
11527: LD_INT 28
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 34
11536: PUSH
11537: LD_INT 47
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: ST_TO_ADDR
// if not tmp then
11560: LD_VAR 0 2
11564: NOT
11565: IFFALSE 11569
// exit ;
11567: GO 11598
// for i in tmp do
11569: LD_ADDR_VAR 0 1
11573: PUSH
11574: LD_VAR 0 2
11578: PUSH
11579: FOR_IN
11580: IFFALSE 11596
// begin SetLives ( i , 0 ) ;
11582: LD_VAR 0 1
11586: PPUSH
11587: LD_INT 0
11589: PPUSH
11590: CALL_OW 234
// end ;
11594: GO 11579
11596: POP
11597: POP
// end ;
11598: PPOPN 2
11600: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11601: LD_EXP 27
11605: PUSH
11606: LD_EXP 33
11610: AND
11611: IFFALSE 11695
11613: GO 11615
11615: DISABLE
11616: LD_INT 0
11618: PPUSH
11619: PPUSH
// begin enable ;
11620: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_INT 22
11628: PUSH
11629: LD_OWVAR 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 32
11640: PUSH
11641: LD_INT 3
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 69
11656: ST_TO_ADDR
// if not tmp then
11657: LD_VAR 0 2
11661: NOT
11662: IFFALSE 11666
// exit ;
11664: GO 11695
// for i in tmp do
11666: LD_ADDR_VAR 0 1
11670: PUSH
11671: LD_VAR 0 2
11675: PUSH
11676: FOR_IN
11677: IFFALSE 11693
// begin SetLives ( i , 0 ) ;
11679: LD_VAR 0 1
11683: PPUSH
11684: LD_INT 0
11686: PPUSH
11687: CALL_OW 234
// end ;
11691: GO 11676
11693: POP
11694: POP
// end ;
11695: PPOPN 2
11697: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11698: LD_EXP 27
11702: PUSH
11703: LD_EXP 30
11707: AND
11708: IFFALSE 11801
11710: GO 11712
11712: DISABLE
11713: LD_INT 0
11715: PPUSH
// begin enable ;
11716: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11717: LD_ADDR_VAR 0 1
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_OWVAR 2
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 2
11736: PUSH
11737: LD_INT 25
11739: PUSH
11740: LD_INT 5
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 25
11749: PUSH
11750: LD_INT 9
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 25
11759: PUSH
11760: LD_INT 8
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PPUSH
11777: CALL_OW 69
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11799
// begin SetClass ( i , 1 ) ;
11785: LD_VAR 0 1
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 336
// end ;
11797: GO 11782
11799: POP
11800: POP
// end ;
11801: PPOPN 1
11803: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11804: LD_EXP 27
11808: PUSH
11809: LD_EXP 31
11813: AND
11814: PUSH
11815: LD_OWVAR 65
11819: PUSH
11820: LD_INT 7
11822: LESS
11823: AND
11824: IFFALSE 11838
11826: GO 11828
11828: DISABLE
// begin enable ;
11829: ENABLE
// game_speed := 7 ;
11830: LD_ADDR_OWVAR 65
11834: PUSH
11835: LD_INT 7
11837: ST_TO_ADDR
// end ;
11838: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11839: LD_EXP 27
11843: PUSH
11844: LD_EXP 34
11848: AND
11849: IFFALSE 12051
11851: GO 11853
11853: DISABLE
11854: LD_INT 0
11856: PPUSH
11857: PPUSH
11858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11859: LD_ADDR_VAR 0 3
11863: PUSH
11864: LD_INT 81
11866: PUSH
11867: LD_OWVAR 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 1
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: ST_TO_ADDR
// if not tmp then
11895: LD_VAR 0 3
11899: NOT
11900: IFFALSE 11904
// exit ;
11902: GO 12051
// if tmp > 5 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 5
11911: GREATER
11912: IFFALSE 11924
// k := 5 else
11914: LD_ADDR_VAR 0 2
11918: PUSH
11919: LD_INT 5
11921: ST_TO_ADDR
11922: GO 11934
// k := tmp ;
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_VAR 0 3
11933: ST_TO_ADDR
// for i := 1 to k do
11934: LD_ADDR_VAR 0 1
11938: PUSH
11939: DOUBLE
11940: LD_INT 1
11942: DEC
11943: ST_TO_ADDR
11944: LD_VAR 0 2
11948: PUSH
11949: FOR_TO
11950: IFFALSE 12049
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11952: LD_VAR 0 3
11956: PUSH
11957: LD_VAR 0 1
11961: ARRAY
11962: PPUSH
11963: LD_VAR 0 1
11967: PUSH
11968: LD_INT 4
11970: MOD
11971: PUSH
11972: LD_INT 1
11974: PLUS
11975: PPUSH
11976: CALL_OW 259
11980: PUSH
11981: LD_INT 10
11983: LESS
11984: IFFALSE 12047
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11986: LD_VAR 0 3
11990: PUSH
11991: LD_VAR 0 1
11995: ARRAY
11996: PPUSH
11997: LD_VAR 0 1
12001: PUSH
12002: LD_INT 4
12004: MOD
12005: PUSH
12006: LD_INT 1
12008: PLUS
12009: PPUSH
12010: LD_VAR 0 3
12014: PUSH
12015: LD_VAR 0 1
12019: ARRAY
12020: PPUSH
12021: LD_VAR 0 1
12025: PUSH
12026: LD_INT 4
12028: MOD
12029: PUSH
12030: LD_INT 1
12032: PLUS
12033: PPUSH
12034: CALL_OW 259
12038: PUSH
12039: LD_INT 1
12041: PLUS
12042: PPUSH
12043: CALL_OW 237
12047: GO 11949
12049: POP
12050: POP
// end ;
12051: PPOPN 3
12053: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12054: LD_EXP 27
12058: PUSH
12059: LD_EXP 35
12063: AND
12064: IFFALSE 12084
12066: GO 12068
12068: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12069: LD_INT 4
12071: PPUSH
12072: LD_OWVAR 2
12076: PPUSH
12077: LD_INT 0
12079: PPUSH
12080: CALL_OW 324
12084: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12085: LD_EXP 27
12089: PUSH
12090: LD_EXP 64
12094: AND
12095: IFFALSE 12115
12097: GO 12099
12099: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12100: LD_INT 19
12102: PPUSH
12103: LD_OWVAR 2
12107: PPUSH
12108: LD_INT 0
12110: PPUSH
12111: CALL_OW 324
12115: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12116: LD_EXP 27
12120: PUSH
12121: LD_EXP 36
12125: AND
12126: IFFALSE 12228
12128: GO 12130
12130: DISABLE
12131: LD_INT 0
12133: PPUSH
12134: PPUSH
// begin enable ;
12135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12136: LD_ADDR_VAR 0 2
12140: PUSH
12141: LD_INT 22
12143: PUSH
12144: LD_OWVAR 2
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: LD_INT 34
12158: PUSH
12159: LD_INT 11
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 34
12168: PUSH
12169: LD_INT 30
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 69
12189: ST_TO_ADDR
// if not tmp then
12190: LD_VAR 0 2
12194: NOT
12195: IFFALSE 12199
// exit ;
12197: GO 12228
// for i in tmp do
12199: LD_ADDR_VAR 0 1
12203: PUSH
12204: LD_VAR 0 2
12208: PUSH
12209: FOR_IN
12210: IFFALSE 12226
// begin SetLives ( i , 0 ) ;
12212: LD_VAR 0 1
12216: PPUSH
12217: LD_INT 0
12219: PPUSH
12220: CALL_OW 234
// end ;
12224: GO 12209
12226: POP
12227: POP
// end ;
12228: PPOPN 2
12230: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12231: LD_EXP 27
12235: PUSH
12236: LD_EXP 37
12240: AND
12241: IFFALSE 12261
12243: GO 12245
12245: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12246: LD_INT 32
12248: PPUSH
12249: LD_OWVAR 2
12253: PPUSH
12254: LD_INT 0
12256: PPUSH
12257: CALL_OW 324
12261: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12262: LD_EXP 27
12266: PUSH
12267: LD_EXP 38
12271: AND
12272: IFFALSE 12453
12274: GO 12276
12276: DISABLE
12277: LD_INT 0
12279: PPUSH
12280: PPUSH
12281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12282: LD_ADDR_VAR 0 2
12286: PUSH
12287: LD_INT 22
12289: PUSH
12290: LD_OWVAR 2
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: LD_INT 33
12301: PUSH
12302: LD_INT 3
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 69
12317: ST_TO_ADDR
// if not tmp then
12318: LD_VAR 0 2
12322: NOT
12323: IFFALSE 12327
// exit ;
12325: GO 12453
// side := 0 ;
12327: LD_ADDR_VAR 0 3
12331: PUSH
12332: LD_INT 0
12334: ST_TO_ADDR
// for i := 1 to 8 do
12335: LD_ADDR_VAR 0 1
12339: PUSH
12340: DOUBLE
12341: LD_INT 1
12343: DEC
12344: ST_TO_ADDR
12345: LD_INT 8
12347: PUSH
12348: FOR_TO
12349: IFFALSE 12397
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12351: LD_OWVAR 2
12355: PUSH
12356: LD_VAR 0 1
12360: NONEQUAL
12361: PUSH
12362: LD_OWVAR 2
12366: PPUSH
12367: LD_VAR 0 1
12371: PPUSH
12372: CALL_OW 81
12376: PUSH
12377: LD_INT 2
12379: EQUAL
12380: AND
12381: IFFALSE 12395
// begin side := i ;
12383: LD_ADDR_VAR 0 3
12387: PUSH
12388: LD_VAR 0 1
12392: ST_TO_ADDR
// break ;
12393: GO 12397
// end ;
12395: GO 12348
12397: POP
12398: POP
// if not side then
12399: LD_VAR 0 3
12403: NOT
12404: IFFALSE 12408
// exit ;
12406: GO 12453
// for i := 1 to tmp do
12408: LD_ADDR_VAR 0 1
12412: PUSH
12413: DOUBLE
12414: LD_INT 1
12416: DEC
12417: ST_TO_ADDR
12418: LD_VAR 0 2
12422: PUSH
12423: FOR_TO
12424: IFFALSE 12451
// if Prob ( 60 ) then
12426: LD_INT 60
12428: PPUSH
12429: CALL_OW 13
12433: IFFALSE 12449
// SetSide ( i , side ) ;
12435: LD_VAR 0 1
12439: PPUSH
12440: LD_VAR 0 3
12444: PPUSH
12445: CALL_OW 235
12449: GO 12423
12451: POP
12452: POP
// end ;
12453: PPOPN 3
12455: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12456: LD_EXP 27
12460: PUSH
12461: LD_EXP 40
12465: AND
12466: IFFALSE 12585
12468: GO 12470
12470: DISABLE
12471: LD_INT 0
12473: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12474: LD_ADDR_VAR 0 1
12478: PUSH
12479: LD_INT 22
12481: PUSH
12482: LD_OWVAR 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 21
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 3
12503: PUSH
12504: LD_INT 23
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: LIST
12522: PPUSH
12523: CALL_OW 69
12527: PUSH
12528: FOR_IN
12529: IFFALSE 12583
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12531: LD_VAR 0 1
12535: PPUSH
12536: CALL_OW 257
12540: PUSH
12541: LD_INT 1
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: LD_INT 3
12549: PUSH
12550: LD_INT 4
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: IN
12559: IFFALSE 12581
// SetClass ( un , rand ( 1 , 4 ) ) ;
12561: LD_VAR 0 1
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: LD_INT 4
12571: PPUSH
12572: CALL_OW 12
12576: PPUSH
12577: CALL_OW 336
12581: GO 12528
12583: POP
12584: POP
// end ;
12585: PPOPN 1
12587: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12588: LD_EXP 27
12592: PUSH
12593: LD_EXP 39
12597: AND
12598: IFFALSE 12677
12600: GO 12602
12602: DISABLE
12603: LD_INT 0
12605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12606: LD_ADDR_VAR 0 1
12610: PUSH
12611: LD_INT 22
12613: PUSH
12614: LD_OWVAR 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 21
12625: PUSH
12626: LD_INT 3
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 69
12641: ST_TO_ADDR
// if not tmp then
12642: LD_VAR 0 1
12646: NOT
12647: IFFALSE 12651
// exit ;
12649: GO 12677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12651: LD_VAR 0 1
12655: PUSH
12656: LD_INT 1
12658: PPUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 12
12668: ARRAY
12669: PPUSH
12670: LD_INT 100
12672: PPUSH
12673: CALL_OW 234
// end ;
12677: PPOPN 1
12679: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12680: LD_EXP 27
12684: PUSH
12685: LD_EXP 41
12689: AND
12690: IFFALSE 12788
12692: GO 12694
12694: DISABLE
12695: LD_INT 0
12697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12698: LD_ADDR_VAR 0 1
12702: PUSH
12703: LD_INT 22
12705: PUSH
12706: LD_OWVAR 2
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 21
12717: PUSH
12718: LD_INT 1
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PPUSH
12729: CALL_OW 69
12733: ST_TO_ADDR
// if not tmp then
12734: LD_VAR 0 1
12738: NOT
12739: IFFALSE 12743
// exit ;
12741: GO 12788
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12743: LD_VAR 0 1
12747: PUSH
12748: LD_INT 1
12750: PPUSH
12751: LD_VAR 0 1
12755: PPUSH
12756: CALL_OW 12
12760: ARRAY
12761: PPUSH
12762: LD_INT 1
12764: PPUSH
12765: LD_INT 4
12767: PPUSH
12768: CALL_OW 12
12772: PPUSH
12773: LD_INT 3000
12775: PPUSH
12776: LD_INT 9000
12778: PPUSH
12779: CALL_OW 12
12783: PPUSH
12784: CALL_OW 492
// end ;
12788: PPOPN 1
12790: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12791: LD_EXP 27
12795: PUSH
12796: LD_EXP 42
12800: AND
12801: IFFALSE 12821
12803: GO 12805
12805: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12806: LD_INT 1
12808: PPUSH
12809: LD_OWVAR 2
12813: PPUSH
12814: LD_INT 0
12816: PPUSH
12817: CALL_OW 324
12821: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12822: LD_EXP 27
12826: PUSH
12827: LD_EXP 43
12831: AND
12832: IFFALSE 12915
12834: GO 12836
12836: DISABLE
12837: LD_INT 0
12839: PPUSH
12840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12841: LD_ADDR_VAR 0 2
12845: PUSH
12846: LD_INT 22
12848: PUSH
12849: LD_OWVAR 2
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 21
12860: PUSH
12861: LD_INT 3
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PPUSH
12872: CALL_OW 69
12876: ST_TO_ADDR
// if not tmp then
12877: LD_VAR 0 2
12881: NOT
12882: IFFALSE 12886
// exit ;
12884: GO 12915
// for i in tmp do
12886: LD_ADDR_VAR 0 1
12890: PUSH
12891: LD_VAR 0 2
12895: PUSH
12896: FOR_IN
12897: IFFALSE 12913
// SetBLevel ( i , 10 ) ;
12899: LD_VAR 0 1
12903: PPUSH
12904: LD_INT 10
12906: PPUSH
12907: CALL_OW 241
12911: GO 12896
12913: POP
12914: POP
// end ;
12915: PPOPN 2
12917: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12918: LD_EXP 27
12922: PUSH
12923: LD_EXP 44
12927: AND
12928: IFFALSE 13039
12930: GO 12932
12932: DISABLE
12933: LD_INT 0
12935: PPUSH
12936: PPUSH
12937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12938: LD_ADDR_VAR 0 3
12942: PUSH
12943: LD_INT 22
12945: PUSH
12946: LD_OWVAR 2
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 25
12957: PUSH
12958: LD_INT 1
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PPUSH
12969: CALL_OW 69
12973: ST_TO_ADDR
// if not tmp then
12974: LD_VAR 0 3
12978: NOT
12979: IFFALSE 12983
// exit ;
12981: GO 13039
// un := tmp [ rand ( 1 , tmp ) ] ;
12983: LD_ADDR_VAR 0 2
12987: PUSH
12988: LD_VAR 0 3
12992: PUSH
12993: LD_INT 1
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: CALL_OW 12
13005: ARRAY
13006: ST_TO_ADDR
// if Crawls ( un ) then
13007: LD_VAR 0 2
13011: PPUSH
13012: CALL_OW 318
13016: IFFALSE 13027
// ComWalk ( un ) ;
13018: LD_VAR 0 2
13022: PPUSH
13023: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13027: LD_VAR 0 2
13031: PPUSH
13032: LD_INT 5
13034: PPUSH
13035: CALL_OW 336
// end ;
13039: PPOPN 3
13041: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13042: LD_EXP 27
13046: PUSH
13047: LD_EXP 45
13051: AND
13052: PUSH
13053: LD_OWVAR 67
13057: PUSH
13058: LD_INT 3
13060: LESS
13061: AND
13062: IFFALSE 13081
13064: GO 13066
13066: DISABLE
// Difficulty := Difficulty + 1 ;
13067: LD_ADDR_OWVAR 67
13071: PUSH
13072: LD_OWVAR 67
13076: PUSH
13077: LD_INT 1
13079: PLUS
13080: ST_TO_ADDR
13081: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13082: LD_EXP 27
13086: PUSH
13087: LD_EXP 46
13091: AND
13092: IFFALSE 13195
13094: GO 13096
13096: DISABLE
13097: LD_INT 0
13099: PPUSH
// begin for i := 1 to 5 do
13100: LD_ADDR_VAR 0 1
13104: PUSH
13105: DOUBLE
13106: LD_INT 1
13108: DEC
13109: ST_TO_ADDR
13110: LD_INT 5
13112: PUSH
13113: FOR_TO
13114: IFFALSE 13193
// begin uc_nation := nation_nature ;
13116: LD_ADDR_OWVAR 21
13120: PUSH
13121: LD_INT 0
13123: ST_TO_ADDR
// uc_side := 0 ;
13124: LD_ADDR_OWVAR 20
13128: PUSH
13129: LD_INT 0
13131: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13132: LD_ADDR_OWVAR 29
13136: PUSH
13137: LD_INT 12
13139: PUSH
13140: LD_INT 12
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: ST_TO_ADDR
// hc_agressivity := 20 ;
13147: LD_ADDR_OWVAR 35
13151: PUSH
13152: LD_INT 20
13154: ST_TO_ADDR
// hc_class := class_tiger ;
13155: LD_ADDR_OWVAR 28
13159: PUSH
13160: LD_INT 14
13162: ST_TO_ADDR
// hc_gallery :=  ;
13163: LD_ADDR_OWVAR 33
13167: PUSH
13168: LD_STRING 
13170: ST_TO_ADDR
// hc_name :=  ;
13171: LD_ADDR_OWVAR 26
13175: PUSH
13176: LD_STRING 
13178: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13179: CALL_OW 44
13183: PPUSH
13184: LD_INT 0
13186: PPUSH
13187: CALL_OW 51
// end ;
13191: GO 13113
13193: POP
13194: POP
// end ;
13195: PPOPN 1
13197: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13198: LD_EXP 27
13202: PUSH
13203: LD_EXP 47
13207: AND
13208: IFFALSE 13217
13210: GO 13212
13212: DISABLE
// StreamSibBomb ;
13213: CALL 13218 0 0
13217: END
// export function StreamSibBomb ; var i , x , y ; begin
13218: LD_INT 0
13220: PPUSH
13221: PPUSH
13222: PPUSH
13223: PPUSH
// result := false ;
13224: LD_ADDR_VAR 0 1
13228: PUSH
13229: LD_INT 0
13231: ST_TO_ADDR
// for i := 1 to 16 do
13232: LD_ADDR_VAR 0 2
13236: PUSH
13237: DOUBLE
13238: LD_INT 1
13240: DEC
13241: ST_TO_ADDR
13242: LD_INT 16
13244: PUSH
13245: FOR_TO
13246: IFFALSE 13445
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13248: LD_ADDR_VAR 0 3
13252: PUSH
13253: LD_INT 10
13255: PUSH
13256: LD_INT 20
13258: PUSH
13259: LD_INT 30
13261: PUSH
13262: LD_INT 40
13264: PUSH
13265: LD_INT 50
13267: PUSH
13268: LD_INT 60
13270: PUSH
13271: LD_INT 70
13273: PUSH
13274: LD_INT 80
13276: PUSH
13277: LD_INT 90
13279: PUSH
13280: LD_INT 100
13282: PUSH
13283: LD_INT 110
13285: PUSH
13286: LD_INT 120
13288: PUSH
13289: LD_INT 130
13291: PUSH
13292: LD_INT 140
13294: PUSH
13295: LD_INT 150
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 1
13317: PPUSH
13318: LD_INT 15
13320: PPUSH
13321: CALL_OW 12
13325: ARRAY
13326: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13327: LD_ADDR_VAR 0 4
13331: PUSH
13332: LD_INT 10
13334: PUSH
13335: LD_INT 20
13337: PUSH
13338: LD_INT 30
13340: PUSH
13341: LD_INT 40
13343: PUSH
13344: LD_INT 50
13346: PUSH
13347: LD_INT 60
13349: PUSH
13350: LD_INT 70
13352: PUSH
13353: LD_INT 80
13355: PUSH
13356: LD_INT 90
13358: PUSH
13359: LD_INT 100
13361: PUSH
13362: LD_INT 110
13364: PUSH
13365: LD_INT 120
13367: PUSH
13368: LD_INT 130
13370: PUSH
13371: LD_INT 140
13373: PUSH
13374: LD_INT 150
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 1
13396: PPUSH
13397: LD_INT 15
13399: PPUSH
13400: CALL_OW 12
13404: ARRAY
13405: ST_TO_ADDR
// if ValidHex ( x , y ) then
13406: LD_VAR 0 3
13410: PPUSH
13411: LD_VAR 0 4
13415: PPUSH
13416: CALL_OW 488
13420: IFFALSE 13443
// begin result := [ x , y ] ;
13422: LD_ADDR_VAR 0 1
13426: PUSH
13427: LD_VAR 0 3
13431: PUSH
13432: LD_VAR 0 4
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: ST_TO_ADDR
// break ;
13441: GO 13445
// end ; end ;
13443: GO 13245
13445: POP
13446: POP
// if result then
13447: LD_VAR 0 1
13451: IFFALSE 13511
// begin ToLua ( playSibBomb() ) ;
13453: LD_STRING playSibBomb()
13455: PPUSH
13456: CALL_OW 559
// wait ( 0 0$14 ) ;
13460: LD_INT 490
13462: PPUSH
13463: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13467: LD_VAR 0 1
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PPUSH
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 2
13483: ARRAY
13484: PPUSH
13485: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13489: LD_VAR 0 1
13493: PUSH
13494: LD_INT 1
13496: ARRAY
13497: PPUSH
13498: LD_VAR 0 1
13502: PUSH
13503: LD_INT 2
13505: ARRAY
13506: PPUSH
13507: CALL_OW 429
// end ; end ;
13511: LD_VAR 0 1
13515: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13516: LD_EXP 27
13520: PUSH
13521: LD_EXP 49
13525: AND
13526: IFFALSE 13538
13528: GO 13530
13530: DISABLE
// YouLost (  ) ;
13531: LD_STRING 
13533: PPUSH
13534: CALL_OW 104
13538: END
// every 0 0$1 trigger StreamModeActive and sFog do
13539: LD_EXP 27
13543: PUSH
13544: LD_EXP 48
13548: AND
13549: IFFALSE 13563
13551: GO 13553
13553: DISABLE
// FogOff ( your_side ) ;
13554: LD_OWVAR 2
13558: PPUSH
13559: CALL_OW 344
13563: END
// every 0 0$1 trigger StreamModeActive and sSun do
13564: LD_EXP 27
13568: PUSH
13569: LD_EXP 50
13573: AND
13574: IFFALSE 13602
13576: GO 13578
13578: DISABLE
// begin solar_recharge_percent := 0 ;
13579: LD_ADDR_OWVAR 79
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13587: LD_INT 10500
13589: PPUSH
13590: CALL_OW 67
// solar_recharge_percent := 100 ;
13594: LD_ADDR_OWVAR 79
13598: PUSH
13599: LD_INT 100
13601: ST_TO_ADDR
// end ;
13602: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13603: LD_EXP 27
13607: PUSH
13608: LD_EXP 51
13612: AND
13613: IFFALSE 13852
13615: GO 13617
13617: DISABLE
13618: LD_INT 0
13620: PPUSH
13621: PPUSH
13622: PPUSH
// begin tmp := [ ] ;
13623: LD_ADDR_VAR 0 3
13627: PUSH
13628: EMPTY
13629: ST_TO_ADDR
// for i := 1 to 6 do
13630: LD_ADDR_VAR 0 1
13634: PUSH
13635: DOUBLE
13636: LD_INT 1
13638: DEC
13639: ST_TO_ADDR
13640: LD_INT 6
13642: PUSH
13643: FOR_TO
13644: IFFALSE 13749
// begin uc_nation := nation_nature ;
13646: LD_ADDR_OWVAR 21
13650: PUSH
13651: LD_INT 0
13653: ST_TO_ADDR
// uc_side := 0 ;
13654: LD_ADDR_OWVAR 20
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13662: LD_ADDR_OWVAR 29
13666: PUSH
13667: LD_INT 12
13669: PUSH
13670: LD_INT 12
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: ST_TO_ADDR
// hc_agressivity := 20 ;
13677: LD_ADDR_OWVAR 35
13681: PUSH
13682: LD_INT 20
13684: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13685: LD_ADDR_OWVAR 28
13689: PUSH
13690: LD_INT 17
13692: ST_TO_ADDR
// hc_gallery :=  ;
13693: LD_ADDR_OWVAR 33
13697: PUSH
13698: LD_STRING 
13700: ST_TO_ADDR
// hc_name :=  ;
13701: LD_ADDR_OWVAR 26
13705: PUSH
13706: LD_STRING 
13708: ST_TO_ADDR
// un := CreateHuman ;
13709: LD_ADDR_VAR 0 2
13713: PUSH
13714: CALL_OW 44
13718: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13719: LD_VAR 0 2
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: CALL_OW 51
// tmp := tmp ^ un ;
13731: LD_ADDR_VAR 0 3
13735: PUSH
13736: LD_VAR 0 3
13740: PUSH
13741: LD_VAR 0 2
13745: ADD
13746: ST_TO_ADDR
// end ;
13747: GO 13643
13749: POP
13750: POP
// repeat wait ( 0 0$1 ) ;
13751: LD_INT 35
13753: PPUSH
13754: CALL_OW 67
// for un in tmp do
13758: LD_ADDR_VAR 0 2
13762: PUSH
13763: LD_VAR 0 3
13767: PUSH
13768: FOR_IN
13769: IFFALSE 13843
// begin if IsDead ( un ) then
13771: LD_VAR 0 2
13775: PPUSH
13776: CALL_OW 301
13780: IFFALSE 13800
// begin tmp := tmp diff un ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: LD_VAR 0 3
13791: PUSH
13792: LD_VAR 0 2
13796: DIFF
13797: ST_TO_ADDR
// continue ;
13798: GO 13768
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_INT 3
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_INT 0
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 69
13826: PPUSH
13827: LD_VAR 0 2
13831: PPUSH
13832: CALL_OW 74
13836: PPUSH
13837: CALL_OW 115
// end ;
13841: GO 13768
13843: POP
13844: POP
// until not tmp ;
13845: LD_VAR 0 3
13849: NOT
13850: IFFALSE 13751
// end ;
13852: PPOPN 3
13854: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13855: LD_EXP 27
13859: PUSH
13860: LD_EXP 52
13864: AND
13865: IFFALSE 13919
13867: GO 13869
13869: DISABLE
// begin ToLua ( displayTroll(); ) ;
13870: LD_STRING displayTroll();
13872: PPUSH
13873: CALL_OW 559
// wait ( 3 3$00 ) ;
13877: LD_INT 6300
13879: PPUSH
13880: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13884: LD_STRING hideTroll();
13886: PPUSH
13887: CALL_OW 559
// wait ( 1 1$00 ) ;
13891: LD_INT 2100
13893: PPUSH
13894: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13898: LD_STRING displayTroll();
13900: PPUSH
13901: CALL_OW 559
// wait ( 1 1$00 ) ;
13905: LD_INT 2100
13907: PPUSH
13908: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13912: LD_STRING hideTroll();
13914: PPUSH
13915: CALL_OW 559
// end ;
13919: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13920: LD_EXP 27
13924: PUSH
13925: LD_EXP 53
13929: AND
13930: IFFALSE 13993
13932: GO 13934
13934: DISABLE
13935: LD_INT 0
13937: PPUSH
// begin p := 0 ;
13938: LD_ADDR_VAR 0 1
13942: PUSH
13943: LD_INT 0
13945: ST_TO_ADDR
// repeat game_speed := 1 ;
13946: LD_ADDR_OWVAR 65
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13954: LD_INT 35
13956: PPUSH
13957: CALL_OW 67
// p := p + 1 ;
13961: LD_ADDR_VAR 0 1
13965: PUSH
13966: LD_VAR 0 1
13970: PUSH
13971: LD_INT 1
13973: PLUS
13974: ST_TO_ADDR
// until p >= 60 ;
13975: LD_VAR 0 1
13979: PUSH
13980: LD_INT 60
13982: GREATEREQUAL
13983: IFFALSE 13946
// game_speed := 4 ;
13985: LD_ADDR_OWVAR 65
13989: PUSH
13990: LD_INT 4
13992: ST_TO_ADDR
// end ;
13993: PPOPN 1
13995: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13996: LD_EXP 27
14000: PUSH
14001: LD_EXP 54
14005: AND
14006: IFFALSE 14152
14008: GO 14010
14010: DISABLE
14011: LD_INT 0
14013: PPUSH
14014: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14015: LD_ADDR_VAR 0 1
14019: PUSH
14020: LD_INT 22
14022: PUSH
14023: LD_OWVAR 2
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: LD_INT 30
14037: PUSH
14038: LD_INT 0
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 30
14047: PUSH
14048: LD_INT 1
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 69
14068: ST_TO_ADDR
// if not depot then
14069: LD_VAR 0 1
14073: NOT
14074: IFFALSE 14078
// exit ;
14076: GO 14152
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_VAR 0 1
14087: PUSH
14088: LD_INT 1
14090: PPUSH
14091: LD_VAR 0 1
14095: PPUSH
14096: CALL_OW 12
14100: ARRAY
14101: PPUSH
14102: CALL_OW 274
14106: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14107: LD_VAR 0 2
14111: PPUSH
14112: LD_INT 1
14114: PPUSH
14115: LD_INT 0
14117: PPUSH
14118: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14122: LD_VAR 0 2
14126: PPUSH
14127: LD_INT 2
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14137: LD_VAR 0 2
14141: PPUSH
14142: LD_INT 3
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 277
// end ;
14152: PPOPN 2
14154: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14155: LD_EXP 27
14159: PUSH
14160: LD_EXP 55
14164: AND
14165: IFFALSE 14262
14167: GO 14169
14169: DISABLE
14170: LD_INT 0
14172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_INT 22
14180: PUSH
14181: LD_OWVAR 2
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 21
14192: PUSH
14193: LD_INT 1
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 3
14202: PUSH
14203: LD_INT 23
14205: PUSH
14206: LD_INT 0
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: PPUSH
14222: CALL_OW 69
14226: ST_TO_ADDR
// if not tmp then
14227: LD_VAR 0 1
14231: NOT
14232: IFFALSE 14236
// exit ;
14234: GO 14262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14236: LD_VAR 0 1
14240: PUSH
14241: LD_INT 1
14243: PPUSH
14244: LD_VAR 0 1
14248: PPUSH
14249: CALL_OW 12
14253: ARRAY
14254: PPUSH
14255: LD_INT 200
14257: PPUSH
14258: CALL_OW 234
// end ;
14262: PPOPN 1
14264: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14265: LD_EXP 27
14269: PUSH
14270: LD_EXP 56
14274: AND
14275: IFFALSE 14354
14277: GO 14279
14279: DISABLE
14280: LD_INT 0
14282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14283: LD_ADDR_VAR 0 1
14287: PUSH
14288: LD_INT 22
14290: PUSH
14291: LD_OWVAR 2
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 21
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: ST_TO_ADDR
// if not tmp then
14319: LD_VAR 0 1
14323: NOT
14324: IFFALSE 14328
// exit ;
14326: GO 14354
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14328: LD_VAR 0 1
14332: PUSH
14333: LD_INT 1
14335: PPUSH
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 12
14345: ARRAY
14346: PPUSH
14347: LD_INT 60
14349: PPUSH
14350: CALL_OW 234
// end ;
14354: PPOPN 1
14356: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14357: LD_EXP 27
14361: PUSH
14362: LD_EXP 57
14366: AND
14367: IFFALSE 14466
14369: GO 14371
14371: DISABLE
14372: LD_INT 0
14374: PPUSH
14375: PPUSH
// begin enable ;
14376: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: LD_INT 22
14384: PUSH
14385: LD_OWVAR 2
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 61
14396: PUSH
14397: EMPTY
14398: LIST
14399: PUSH
14400: LD_INT 33
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// if not tmp then
14420: LD_VAR 0 1
14424: NOT
14425: IFFALSE 14429
// exit ;
14427: GO 14466
// for i in tmp do
14429: LD_ADDR_VAR 0 2
14433: PUSH
14434: LD_VAR 0 1
14438: PUSH
14439: FOR_IN
14440: IFFALSE 14464
// if IsControledBy ( i ) then
14442: LD_VAR 0 2
14446: PPUSH
14447: CALL_OW 312
14451: IFFALSE 14462
// ComUnlink ( i ) ;
14453: LD_VAR 0 2
14457: PPUSH
14458: CALL_OW 136
14462: GO 14439
14464: POP
14465: POP
// end ;
14466: PPOPN 2
14468: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14469: LD_EXP 27
14473: PUSH
14474: LD_EXP 58
14478: AND
14479: IFFALSE 14619
14481: GO 14483
14483: DISABLE
14484: LD_INT 0
14486: PPUSH
14487: PPUSH
// begin ToLua ( displayPowell(); ) ;
14488: LD_STRING displayPowell();
14490: PPUSH
14491: CALL_OW 559
// uc_side := 0 ;
14495: LD_ADDR_OWVAR 20
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// uc_nation := 2 ;
14503: LD_ADDR_OWVAR 21
14507: PUSH
14508: LD_INT 2
14510: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14511: LD_ADDR_OWVAR 37
14515: PUSH
14516: LD_INT 14
14518: ST_TO_ADDR
// vc_engine := engine_siberite ;
14519: LD_ADDR_OWVAR 39
14523: PUSH
14524: LD_INT 3
14526: ST_TO_ADDR
// vc_control := control_apeman ;
14527: LD_ADDR_OWVAR 38
14531: PUSH
14532: LD_INT 5
14534: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14535: LD_ADDR_OWVAR 40
14539: PUSH
14540: LD_INT 29
14542: ST_TO_ADDR
// un := CreateVehicle ;
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: CALL_OW 45
14552: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14553: LD_VAR 0 2
14557: PPUSH
14558: LD_INT 1
14560: PPUSH
14561: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14565: LD_INT 35
14567: PPUSH
14568: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_INT 22
14579: PUSH
14580: LD_OWVAR 2
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PPUSH
14589: CALL_OW 69
14593: PPUSH
14594: LD_VAR 0 2
14598: PPUSH
14599: CALL_OW 74
14603: PPUSH
14604: CALL_OW 115
// until IsDead ( un ) ;
14608: LD_VAR 0 2
14612: PPUSH
14613: CALL_OW 301
14617: IFFALSE 14565
// end ;
14619: PPOPN 2
14621: END
// every 0 0$1 trigger StreamModeActive and sStu do
14622: LD_EXP 27
14626: PUSH
14627: LD_EXP 66
14631: AND
14632: IFFALSE 14648
14634: GO 14636
14636: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14637: LD_STRING displayStucuk();
14639: PPUSH
14640: CALL_OW 559
// ResetFog ;
14644: CALL_OW 335
// end ;
14648: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14649: LD_EXP 27
14653: PUSH
14654: LD_EXP 59
14658: AND
14659: IFFALSE 14800
14661: GO 14663
14663: DISABLE
14664: LD_INT 0
14666: PPUSH
14667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14668: LD_ADDR_VAR 0 2
14672: PUSH
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 21
14687: PUSH
14688: LD_INT 1
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 69
14703: ST_TO_ADDR
// if not tmp then
14704: LD_VAR 0 2
14708: NOT
14709: IFFALSE 14713
// exit ;
14711: GO 14800
// un := tmp [ rand ( 1 , tmp ) ] ;
14713: LD_ADDR_VAR 0 1
14717: PUSH
14718: LD_VAR 0 2
14722: PUSH
14723: LD_INT 1
14725: PPUSH
14726: LD_VAR 0 2
14730: PPUSH
14731: CALL_OW 12
14735: ARRAY
14736: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14737: LD_VAR 0 1
14741: PPUSH
14742: LD_INT 0
14744: PPUSH
14745: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14749: LD_VAR 0 1
14753: PPUSH
14754: LD_OWVAR 3
14758: PUSH
14759: LD_VAR 0 1
14763: DIFF
14764: PPUSH
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 74
14774: PPUSH
14775: CALL_OW 115
// wait ( 0 0$20 ) ;
14779: LD_INT 700
14781: PPUSH
14782: CALL_OW 67
// SetSide ( un , your_side ) ;
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_OWVAR 2
14795: PPUSH
14796: CALL_OW 235
// end ;
14800: PPOPN 2
14802: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14803: LD_EXP 27
14807: PUSH
14808: LD_EXP 60
14812: AND
14813: IFFALSE 14919
14815: GO 14817
14817: DISABLE
14818: LD_INT 0
14820: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14821: LD_ADDR_VAR 0 1
14825: PUSH
14826: LD_INT 22
14828: PUSH
14829: LD_OWVAR 2
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 2
14840: PUSH
14841: LD_INT 30
14843: PUSH
14844: LD_INT 0
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 30
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if not depot then
14875: LD_VAR 0 1
14879: NOT
14880: IFFALSE 14884
// exit ;
14882: GO 14919
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14884: LD_VAR 0 1
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PPUSH
14893: CALL_OW 250
14897: PPUSH
14898: LD_VAR 0 1
14902: PUSH
14903: LD_INT 1
14905: ARRAY
14906: PPUSH
14907: CALL_OW 251
14911: PPUSH
14912: LD_INT 70
14914: PPUSH
14915: CALL_OW 495
// end ;
14919: PPOPN 1
14921: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14922: LD_EXP 27
14926: PUSH
14927: LD_EXP 61
14931: AND
14932: IFFALSE 15143
14934: GO 14936
14936: DISABLE
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14944: LD_ADDR_VAR 0 5
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_OWVAR 2
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 21
14963: PUSH
14964: LD_INT 1
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PPUSH
14975: CALL_OW 69
14979: ST_TO_ADDR
// if not tmp then
14980: LD_VAR 0 5
14984: NOT
14985: IFFALSE 14989
// exit ;
14987: GO 15143
// for i in tmp do
14989: LD_ADDR_VAR 0 1
14993: PUSH
14994: LD_VAR 0 5
14998: PUSH
14999: FOR_IN
15000: IFFALSE 15141
// begin d := rand ( 0 , 5 ) ;
15002: LD_ADDR_VAR 0 4
15006: PUSH
15007: LD_INT 0
15009: PPUSH
15010: LD_INT 5
15012: PPUSH
15013: CALL_OW 12
15017: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15018: LD_ADDR_VAR 0 2
15022: PUSH
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 250
15032: PPUSH
15033: LD_VAR 0 4
15037: PPUSH
15038: LD_INT 3
15040: PPUSH
15041: LD_INT 12
15043: PPUSH
15044: CALL_OW 12
15048: PPUSH
15049: CALL_OW 272
15053: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15054: LD_ADDR_VAR 0 3
15058: PUSH
15059: LD_VAR 0 1
15063: PPUSH
15064: CALL_OW 251
15068: PPUSH
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_INT 3
15076: PPUSH
15077: LD_INT 12
15079: PPUSH
15080: CALL_OW 12
15084: PPUSH
15085: CALL_OW 273
15089: ST_TO_ADDR
// if ValidHex ( x , y ) then
15090: LD_VAR 0 2
15094: PPUSH
15095: LD_VAR 0 3
15099: PPUSH
15100: CALL_OW 488
15104: IFFALSE 15139
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15106: LD_VAR 0 1
15110: PPUSH
15111: LD_VAR 0 2
15115: PPUSH
15116: LD_VAR 0 3
15120: PPUSH
15121: LD_INT 3
15123: PPUSH
15124: LD_INT 6
15126: PPUSH
15127: CALL_OW 12
15131: PPUSH
15132: LD_INT 1
15134: PPUSH
15135: CALL_OW 483
// end ;
15139: GO 14999
15141: POP
15142: POP
// end ;
15143: PPOPN 5
15145: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15146: LD_EXP 27
15150: PUSH
15151: LD_EXP 62
15155: AND
15156: IFFALSE 15250
15158: GO 15160
15160: DISABLE
15161: LD_INT 0
15163: PPUSH
15164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_INT 22
15172: PUSH
15173: LD_OWVAR 2
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 32
15184: PUSH
15185: LD_INT 1
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 21
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: PPUSH
15207: CALL_OW 69
15211: ST_TO_ADDR
// if not tmp then
15212: LD_VAR 0 2
15216: NOT
15217: IFFALSE 15221
// exit ;
15219: GO 15250
// for i in tmp do
15221: LD_ADDR_VAR 0 1
15225: PUSH
15226: LD_VAR 0 2
15230: PUSH
15231: FOR_IN
15232: IFFALSE 15248
// SetFuel ( i , 0 ) ;
15234: LD_VAR 0 1
15238: PPUSH
15239: LD_INT 0
15241: PPUSH
15242: CALL_OW 240
15246: GO 15231
15248: POP
15249: POP
// end ;
15250: PPOPN 2
15252: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15253: LD_EXP 27
15257: PUSH
15258: LD_EXP 63
15262: AND
15263: IFFALSE 15329
15265: GO 15267
15267: DISABLE
15268: LD_INT 0
15270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15271: LD_ADDR_VAR 0 1
15275: PUSH
15276: LD_INT 22
15278: PUSH
15279: LD_OWVAR 2
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 30
15290: PUSH
15291: LD_INT 29
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PPUSH
15302: CALL_OW 69
15306: ST_TO_ADDR
// if not tmp then
15307: LD_VAR 0 1
15311: NOT
15312: IFFALSE 15316
// exit ;
15314: GO 15329
// DestroyUnit ( tmp [ 1 ] ) ;
15316: LD_VAR 0 1
15320: PUSH
15321: LD_INT 1
15323: ARRAY
15324: PPUSH
15325: CALL_OW 65
// end ;
15329: PPOPN 1
15331: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15332: LD_EXP 27
15336: PUSH
15337: LD_EXP 65
15341: AND
15342: IFFALSE 15471
15344: GO 15346
15346: DISABLE
15347: LD_INT 0
15349: PPUSH
// begin uc_side := 0 ;
15350: LD_ADDR_OWVAR 20
15354: PUSH
15355: LD_INT 0
15357: ST_TO_ADDR
// uc_nation := nation_arabian ;
15358: LD_ADDR_OWVAR 21
15362: PUSH
15363: LD_INT 2
15365: ST_TO_ADDR
// hc_gallery :=  ;
15366: LD_ADDR_OWVAR 33
15370: PUSH
15371: LD_STRING 
15373: ST_TO_ADDR
// hc_name :=  ;
15374: LD_ADDR_OWVAR 26
15378: PUSH
15379: LD_STRING 
15381: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15382: LD_INT 1
15384: PPUSH
15385: LD_INT 11
15387: PPUSH
15388: LD_INT 10
15390: PPUSH
15391: CALL_OW 380
// un := CreateHuman ;
15395: LD_ADDR_VAR 0 1
15399: PUSH
15400: CALL_OW 44
15404: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15405: LD_VAR 0 1
15409: PPUSH
15410: LD_INT 1
15412: PPUSH
15413: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15417: LD_INT 35
15419: PPUSH
15420: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15424: LD_VAR 0 1
15428: PPUSH
15429: LD_INT 22
15431: PUSH
15432: LD_OWVAR 2
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: PPUSH
15446: LD_VAR 0 1
15450: PPUSH
15451: CALL_OW 74
15455: PPUSH
15456: CALL_OW 115
// until IsDead ( un ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 301
15469: IFFALSE 15417
// end ;
15471: PPOPN 1
15473: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15474: LD_EXP 27
15478: PUSH
15479: LD_EXP 67
15483: AND
15484: IFFALSE 15496
15486: GO 15488
15488: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15489: LD_STRING earthquake(getX(game), 0, 32)
15491: PPUSH
15492: CALL_OW 559
15496: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15497: LD_EXP 27
15501: PUSH
15502: LD_EXP 68
15506: AND
15507: IFFALSE 15598
15509: GO 15511
15511: DISABLE
15512: LD_INT 0
15514: PPUSH
// begin enable ;
15515: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15516: LD_ADDR_VAR 0 1
15520: PUSH
15521: LD_INT 22
15523: PUSH
15524: LD_OWVAR 2
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 21
15535: PUSH
15536: LD_INT 2
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 33
15545: PUSH
15546: LD_INT 3
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: ST_TO_ADDR
// if not tmp then
15563: LD_VAR 0 1
15567: NOT
15568: IFFALSE 15572
// exit ;
15570: GO 15598
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15572: LD_VAR 0 1
15576: PUSH
15577: LD_INT 1
15579: PPUSH
15580: LD_VAR 0 1
15584: PPUSH
15585: CALL_OW 12
15589: ARRAY
15590: PPUSH
15591: LD_INT 1
15593: PPUSH
15594: CALL_OW 234
// end ;
15598: PPOPN 1
15600: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15601: LD_EXP 27
15605: PUSH
15606: LD_EXP 69
15610: AND
15611: IFFALSE 15752
15613: GO 15615
15615: DISABLE
15616: LD_INT 0
15618: PPUSH
15619: PPUSH
15620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15621: LD_ADDR_VAR 0 3
15625: PUSH
15626: LD_INT 22
15628: PUSH
15629: LD_OWVAR 2
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 25
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PPUSH
15652: CALL_OW 69
15656: ST_TO_ADDR
// if not tmp then
15657: LD_VAR 0 3
15661: NOT
15662: IFFALSE 15666
// exit ;
15664: GO 15752
// un := tmp [ rand ( 1 , tmp ) ] ;
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_VAR 0 3
15675: PUSH
15676: LD_INT 1
15678: PPUSH
15679: LD_VAR 0 3
15683: PPUSH
15684: CALL_OW 12
15688: ARRAY
15689: ST_TO_ADDR
// if Crawls ( un ) then
15690: LD_VAR 0 2
15694: PPUSH
15695: CALL_OW 318
15699: IFFALSE 15710
// ComWalk ( un ) ;
15701: LD_VAR 0 2
15705: PPUSH
15706: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15710: LD_VAR 0 2
15714: PPUSH
15715: LD_INT 9
15717: PPUSH
15718: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15722: LD_INT 28
15724: PPUSH
15725: LD_OWVAR 2
15729: PPUSH
15730: LD_INT 2
15732: PPUSH
15733: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15737: LD_INT 29
15739: PPUSH
15740: LD_OWVAR 2
15744: PPUSH
15745: LD_INT 2
15747: PPUSH
15748: CALL_OW 322
// end ;
15752: PPOPN 3
15754: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15755: LD_EXP 27
15759: PUSH
15760: LD_EXP 70
15764: AND
15765: IFFALSE 15876
15767: GO 15769
15769: DISABLE
15770: LD_INT 0
15772: PPUSH
15773: PPUSH
15774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15775: LD_ADDR_VAR 0 3
15779: PUSH
15780: LD_INT 22
15782: PUSH
15783: LD_OWVAR 2
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 25
15794: PUSH
15795: LD_INT 1
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: ST_TO_ADDR
// if not tmp then
15811: LD_VAR 0 3
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15876
// un := tmp [ rand ( 1 , tmp ) ] ;
15820: LD_ADDR_VAR 0 2
15824: PUSH
15825: LD_VAR 0 3
15829: PUSH
15830: LD_INT 1
15832: PPUSH
15833: LD_VAR 0 3
15837: PPUSH
15838: CALL_OW 12
15842: ARRAY
15843: ST_TO_ADDR
// if Crawls ( un ) then
15844: LD_VAR 0 2
15848: PPUSH
15849: CALL_OW 318
15853: IFFALSE 15864
// ComWalk ( un ) ;
15855: LD_VAR 0 2
15859: PPUSH
15860: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15864: LD_VAR 0 2
15868: PPUSH
15869: LD_INT 8
15871: PPUSH
15872: CALL_OW 336
// end ;
15876: PPOPN 3
15878: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15879: LD_EXP 27
15883: PUSH
15884: LD_EXP 71
15888: AND
15889: IFFALSE 16033
15891: GO 15893
15893: DISABLE
15894: LD_INT 0
15896: PPUSH
15897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15898: LD_ADDR_VAR 0 2
15902: PUSH
15903: LD_INT 22
15905: PUSH
15906: LD_OWVAR 2
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 21
15917: PUSH
15918: LD_INT 2
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 2
15927: PUSH
15928: LD_INT 34
15930: PUSH
15931: LD_INT 12
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 34
15940: PUSH
15941: LD_INT 51
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 34
15950: PUSH
15951: LD_INT 32
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: PPUSH
15969: CALL_OW 69
15973: ST_TO_ADDR
// if not tmp then
15974: LD_VAR 0 2
15978: NOT
15979: IFFALSE 15983
// exit ;
15981: GO 16033
// for i in tmp do
15983: LD_ADDR_VAR 0 1
15987: PUSH
15988: LD_VAR 0 2
15992: PUSH
15993: FOR_IN
15994: IFFALSE 16031
// if GetCargo ( i , mat_artifact ) = 0 then
15996: LD_VAR 0 1
16000: PPUSH
16001: LD_INT 4
16003: PPUSH
16004: CALL_OW 289
16008: PUSH
16009: LD_INT 0
16011: EQUAL
16012: IFFALSE 16029
// SetCargo ( i , mat_siberit , 100 ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_INT 3
16021: PPUSH
16022: LD_INT 100
16024: PPUSH
16025: CALL_OW 290
16029: GO 15993
16031: POP
16032: POP
// end ;
16033: PPOPN 2
16035: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16036: LD_EXP 27
16040: PUSH
16041: LD_EXP 72
16045: AND
16046: IFFALSE 16229
16048: GO 16050
16050: DISABLE
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16055: LD_ADDR_VAR 0 2
16059: PUSH
16060: LD_INT 22
16062: PUSH
16063: LD_OWVAR 2
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PPUSH
16072: CALL_OW 69
16076: ST_TO_ADDR
// if not tmp then
16077: LD_VAR 0 2
16081: NOT
16082: IFFALSE 16086
// exit ;
16084: GO 16229
// for i := 1 to 2 do
16086: LD_ADDR_VAR 0 1
16090: PUSH
16091: DOUBLE
16092: LD_INT 1
16094: DEC
16095: ST_TO_ADDR
16096: LD_INT 2
16098: PUSH
16099: FOR_TO
16100: IFFALSE 16227
// begin uc_side := your_side ;
16102: LD_ADDR_OWVAR 20
16106: PUSH
16107: LD_OWVAR 2
16111: ST_TO_ADDR
// uc_nation := nation_american ;
16112: LD_ADDR_OWVAR 21
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// vc_chassis := us_morphling ;
16120: LD_ADDR_OWVAR 37
16124: PUSH
16125: LD_INT 5
16127: ST_TO_ADDR
// vc_engine := engine_siberite ;
16128: LD_ADDR_OWVAR 39
16132: PUSH
16133: LD_INT 3
16135: ST_TO_ADDR
// vc_control := control_computer ;
16136: LD_ADDR_OWVAR 38
16140: PUSH
16141: LD_INT 3
16143: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16144: LD_ADDR_OWVAR 40
16148: PUSH
16149: LD_INT 10
16151: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16152: LD_VAR 0 2
16156: PUSH
16157: LD_INT 1
16159: ARRAY
16160: PPUSH
16161: CALL_OW 310
16165: NOT
16166: IFFALSE 16213
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16168: CALL_OW 45
16172: PPUSH
16173: LD_VAR 0 2
16177: PUSH
16178: LD_INT 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 250
16186: PPUSH
16187: LD_VAR 0 2
16191: PUSH
16192: LD_INT 1
16194: ARRAY
16195: PPUSH
16196: CALL_OW 251
16200: PPUSH
16201: LD_INT 12
16203: PPUSH
16204: LD_INT 1
16206: PPUSH
16207: CALL_OW 50
16211: GO 16225
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16213: CALL_OW 45
16217: PPUSH
16218: LD_INT 1
16220: PPUSH
16221: CALL_OW 51
// end ;
16225: GO 16099
16227: POP
16228: POP
// end ;
16229: PPOPN 2
16231: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16232: LD_EXP 27
16236: PUSH
16237: LD_EXP 73
16241: AND
16242: IFFALSE 16464
16244: GO 16246
16246: DISABLE
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
16253: PPUSH
16254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16255: LD_ADDR_VAR 0 6
16259: PUSH
16260: LD_INT 22
16262: PUSH
16263: LD_OWVAR 2
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 21
16274: PUSH
16275: LD_INT 1
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 3
16284: PUSH
16285: LD_INT 23
16287: PUSH
16288: LD_INT 0
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: ST_TO_ADDR
// if not tmp then
16309: LD_VAR 0 6
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 16464
// s1 := rand ( 1 , 4 ) ;
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_INT 1
16325: PPUSH
16326: LD_INT 4
16328: PPUSH
16329: CALL_OW 12
16333: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16334: LD_ADDR_VAR 0 4
16338: PUSH
16339: LD_VAR 0 6
16343: PUSH
16344: LD_INT 1
16346: ARRAY
16347: PPUSH
16348: LD_VAR 0 2
16352: PPUSH
16353: CALL_OW 259
16357: ST_TO_ADDR
// if s1 = 1 then
16358: LD_VAR 0 2
16362: PUSH
16363: LD_INT 1
16365: EQUAL
16366: IFFALSE 16386
// s2 := rand ( 2 , 4 ) else
16368: LD_ADDR_VAR 0 3
16372: PUSH
16373: LD_INT 2
16375: PPUSH
16376: LD_INT 4
16378: PPUSH
16379: CALL_OW 12
16383: ST_TO_ADDR
16384: GO 16394
// s2 := 1 ;
16386: LD_ADDR_VAR 0 3
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16394: LD_ADDR_VAR 0 5
16398: PUSH
16399: LD_VAR 0 6
16403: PUSH
16404: LD_INT 1
16406: ARRAY
16407: PPUSH
16408: LD_VAR 0 3
16412: PPUSH
16413: CALL_OW 259
16417: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16418: LD_VAR 0 6
16422: PUSH
16423: LD_INT 1
16425: ARRAY
16426: PPUSH
16427: LD_VAR 0 2
16431: PPUSH
16432: LD_VAR 0 5
16436: PPUSH
16437: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16441: LD_VAR 0 6
16445: PUSH
16446: LD_INT 1
16448: ARRAY
16449: PPUSH
16450: LD_VAR 0 3
16454: PPUSH
16455: LD_VAR 0 4
16459: PPUSH
16460: CALL_OW 237
// end ;
16464: PPOPN 6
16466: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16467: LD_EXP 27
16471: PUSH
16472: LD_EXP 74
16476: AND
16477: IFFALSE 16556
16479: GO 16481
16481: DISABLE
16482: LD_INT 0
16484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16485: LD_ADDR_VAR 0 1
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_OWVAR 2
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 30
16504: PUSH
16505: LD_INT 3
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 69
16520: ST_TO_ADDR
// if not tmp then
16521: LD_VAR 0 1
16525: NOT
16526: IFFALSE 16530
// exit ;
16528: GO 16556
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16530: LD_VAR 0 1
16534: PUSH
16535: LD_INT 1
16537: PPUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 12
16547: ARRAY
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: CALL_OW 234
// end ;
16556: PPOPN 1
16558: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16559: LD_EXP 27
16563: PUSH
16564: LD_EXP 75
16568: AND
16569: IFFALSE 16681
16571: GO 16573
16573: DISABLE
16574: LD_INT 0
16576: PPUSH
16577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16578: LD_ADDR_VAR 0 2
16582: PUSH
16583: LD_INT 22
16585: PUSH
16586: LD_OWVAR 2
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 2
16597: PUSH
16598: LD_INT 30
16600: PUSH
16601: LD_INT 27
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 30
16610: PUSH
16611: LD_INT 26
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 30
16620: PUSH
16621: LD_INT 28
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// if not tmp then
16643: LD_VAR 0 2
16647: NOT
16648: IFFALSE 16652
// exit ;
16650: GO 16681
// for i in tmp do
16652: LD_ADDR_VAR 0 1
16656: PUSH
16657: LD_VAR 0 2
16661: PUSH
16662: FOR_IN
16663: IFFALSE 16679
// SetLives ( i , 1 ) ;
16665: LD_VAR 0 1
16669: PPUSH
16670: LD_INT 1
16672: PPUSH
16673: CALL_OW 234
16677: GO 16662
16679: POP
16680: POP
// end ;
16681: PPOPN 2
16683: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16684: LD_EXP 27
16688: PUSH
16689: LD_EXP 76
16693: AND
16694: IFFALSE 16968
16696: GO 16698
16698: DISABLE
16699: LD_INT 0
16701: PPUSH
16702: PPUSH
16703: PPUSH
// begin i := rand ( 1 , 7 ) ;
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_INT 1
16711: PPUSH
16712: LD_INT 7
16714: PPUSH
16715: CALL_OW 12
16719: ST_TO_ADDR
// case i of 1 :
16720: LD_VAR 0 1
16724: PUSH
16725: LD_INT 1
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16743
16733: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16734: LD_STRING earthquake(getX(game), 0, 32)
16736: PPUSH
16737: CALL_OW 559
16741: GO 16968
16743: LD_INT 2
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 16765
16751: POP
// begin ToLua ( displayStucuk(); ) ;
16752: LD_STRING displayStucuk();
16754: PPUSH
16755: CALL_OW 559
// ResetFog ;
16759: CALL_OW 335
// end ; 3 :
16763: GO 16968
16765: LD_INT 3
16767: DOUBLE
16768: EQUAL
16769: IFTRUE 16773
16771: GO 16877
16773: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: LD_INT 22
16781: PUSH
16782: LD_OWVAR 2
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 25
16793: PUSH
16794: LD_INT 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PPUSH
16805: CALL_OW 69
16809: ST_TO_ADDR
// if not tmp then
16810: LD_VAR 0 2
16814: NOT
16815: IFFALSE 16819
// exit ;
16817: GO 16968
// un := tmp [ rand ( 1 , tmp ) ] ;
16819: LD_ADDR_VAR 0 3
16823: PUSH
16824: LD_VAR 0 2
16828: PUSH
16829: LD_INT 1
16831: PPUSH
16832: LD_VAR 0 2
16836: PPUSH
16837: CALL_OW 12
16841: ARRAY
16842: ST_TO_ADDR
// if Crawls ( un ) then
16843: LD_VAR 0 3
16847: PPUSH
16848: CALL_OW 318
16852: IFFALSE 16863
// ComWalk ( un ) ;
16854: LD_VAR 0 3
16858: PPUSH
16859: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16863: LD_VAR 0 3
16867: PPUSH
16868: LD_INT 8
16870: PPUSH
16871: CALL_OW 336
// end ; 4 :
16875: GO 16968
16877: LD_INT 4
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16946
16885: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16886: LD_ADDR_VAR 0 2
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: LD_INT 29
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: ST_TO_ADDR
// if not tmp then
16922: LD_VAR 0 2
16926: NOT
16927: IFFALSE 16931
// exit ;
16929: GO 16968
// DestroyUnit ( tmp [ 1 ] ) ;
16931: LD_VAR 0 2
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PPUSH
16940: CALL_OW 65
// end ; 5 .. 7 :
16944: GO 16968
16946: LD_INT 5
16948: DOUBLE
16949: GREATEREQUAL
16950: IFFALSE 16958
16952: LD_INT 7
16954: DOUBLE
16955: LESSEQUAL
16956: IFTRUE 16960
16958: GO 16967
16960: POP
// StreamSibBomb ; end ;
16961: CALL 13218 0 0
16965: GO 16968
16967: POP
// end ;
16968: PPOPN 3
16970: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16971: LD_EXP 27
16975: PUSH
16976: LD_EXP 77
16980: AND
16981: IFFALSE 17137
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
16990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_INT 81
16998: PUSH
16999: LD_OWVAR 2
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 21
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 21
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: ST_TO_ADDR
// if not tmp then
17045: LD_VAR 0 2
17049: NOT
17050: IFFALSE 17054
// exit ;
17052: GO 17137
// p := 0 ;
17054: LD_ADDR_VAR 0 3
17058: PUSH
17059: LD_INT 0
17061: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17062: LD_INT 35
17064: PPUSH
17065: CALL_OW 67
// p := p + 1 ;
17069: LD_ADDR_VAR 0 3
17073: PUSH
17074: LD_VAR 0 3
17078: PUSH
17079: LD_INT 1
17081: PLUS
17082: ST_TO_ADDR
// for i in tmp do
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: LD_VAR 0 2
17092: PUSH
17093: FOR_IN
17094: IFFALSE 17125
// if GetLives ( i ) < 1000 then
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 256
17105: PUSH
17106: LD_INT 1000
17108: LESS
17109: IFFALSE 17123
// SetLives ( i , 1000 ) ;
17111: LD_VAR 0 1
17115: PPUSH
17116: LD_INT 1000
17118: PPUSH
17119: CALL_OW 234
17123: GO 17093
17125: POP
17126: POP
// until p > 20 ;
17127: LD_VAR 0 3
17131: PUSH
17132: LD_INT 20
17134: GREATER
17135: IFFALSE 17062
// end ;
17137: PPOPN 3
17139: END
// every 0 0$1 trigger StreamModeActive and sTime do
17140: LD_EXP 27
17144: PUSH
17145: LD_EXP 78
17149: AND
17150: IFFALSE 17185
17152: GO 17154
17154: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17155: LD_INT 28
17157: PPUSH
17158: LD_OWVAR 2
17162: PPUSH
17163: LD_INT 2
17165: PPUSH
17166: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17170: LD_INT 30
17172: PPUSH
17173: LD_OWVAR 2
17177: PPUSH
17178: LD_INT 2
17180: PPUSH
17181: CALL_OW 322
// end ;
17185: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17186: LD_EXP 27
17190: PUSH
17191: LD_EXP 79
17195: AND
17196: IFFALSE 17317
17198: GO 17200
17200: DISABLE
17201: LD_INT 0
17203: PPUSH
17204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 22
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 21
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 3
17234: PUSH
17235: LD_INT 23
17237: PUSH
17238: LD_INT 0
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: PPUSH
17254: CALL_OW 69
17258: ST_TO_ADDR
// if not tmp then
17259: LD_VAR 0 2
17263: NOT
17264: IFFALSE 17268
// exit ;
17266: GO 17317
// for i in tmp do
17268: LD_ADDR_VAR 0 1
17272: PUSH
17273: LD_VAR 0 2
17277: PUSH
17278: FOR_IN
17279: IFFALSE 17315
// begin if Crawls ( i ) then
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 318
17290: IFFALSE 17301
// ComWalk ( i ) ;
17292: LD_VAR 0 1
17296: PPUSH
17297: CALL_OW 138
// SetClass ( i , 2 ) ;
17301: LD_VAR 0 1
17305: PPUSH
17306: LD_INT 2
17308: PPUSH
17309: CALL_OW 336
// end ;
17313: GO 17278
17315: POP
17316: POP
// end ;
17317: PPOPN 2
17319: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17320: LD_EXP 27
17324: PUSH
17325: LD_EXP 80
17329: AND
17330: IFFALSE 17611
17332: GO 17334
17334: DISABLE
17335: LD_INT 0
17337: PPUSH
17338: PPUSH
17339: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17340: LD_OWVAR 2
17344: PPUSH
17345: LD_INT 9
17347: PPUSH
17348: LD_INT 1
17350: PPUSH
17351: LD_INT 1
17353: PPUSH
17354: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17358: LD_INT 9
17360: PPUSH
17361: LD_OWVAR 2
17365: PPUSH
17366: CALL_OW 343
// uc_side := 9 ;
17370: LD_ADDR_OWVAR 20
17374: PUSH
17375: LD_INT 9
17377: ST_TO_ADDR
// uc_nation := 2 ;
17378: LD_ADDR_OWVAR 21
17382: PUSH
17383: LD_INT 2
17385: ST_TO_ADDR
// hc_name := Dark Warrior ;
17386: LD_ADDR_OWVAR 26
17390: PUSH
17391: LD_STRING Dark Warrior
17393: ST_TO_ADDR
// hc_gallery :=  ;
17394: LD_ADDR_OWVAR 33
17398: PUSH
17399: LD_STRING 
17401: ST_TO_ADDR
// hc_noskilllimit := true ;
17402: LD_ADDR_OWVAR 76
17406: PUSH
17407: LD_INT 1
17409: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17410: LD_ADDR_OWVAR 31
17414: PUSH
17415: LD_INT 30
17417: PUSH
17418: LD_INT 30
17420: PUSH
17421: LD_INT 30
17423: PUSH
17424: LD_INT 30
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: ST_TO_ADDR
// un := CreateHuman ;
17433: LD_ADDR_VAR 0 3
17437: PUSH
17438: CALL_OW 44
17442: ST_TO_ADDR
// hc_noskilllimit := false ;
17443: LD_ADDR_OWVAR 76
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17451: LD_VAR 0 3
17455: PPUSH
17456: LD_INT 1
17458: PPUSH
17459: CALL_OW 51
// p := 0 ;
17463: LD_ADDR_VAR 0 2
17467: PUSH
17468: LD_INT 0
17470: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17471: LD_INT 35
17473: PPUSH
17474: CALL_OW 67
// p := p + 1 ;
17478: LD_ADDR_VAR 0 2
17482: PUSH
17483: LD_VAR 0 2
17487: PUSH
17488: LD_INT 1
17490: PLUS
17491: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17492: LD_VAR 0 3
17496: PPUSH
17497: CALL_OW 256
17501: PUSH
17502: LD_INT 1000
17504: LESS
17505: IFFALSE 17519
// SetLives ( un , 1000 ) ;
17507: LD_VAR 0 3
17511: PPUSH
17512: LD_INT 1000
17514: PPUSH
17515: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17519: LD_VAR 0 3
17523: PPUSH
17524: LD_INT 81
17526: PUSH
17527: LD_OWVAR 2
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 91
17538: PUSH
17539: LD_VAR 0 3
17543: PUSH
17544: LD_INT 30
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PPUSH
17556: CALL_OW 69
17560: PPUSH
17561: LD_VAR 0 3
17565: PPUSH
17566: CALL_OW 74
17570: PPUSH
17571: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17575: LD_VAR 0 2
17579: PUSH
17580: LD_INT 60
17582: GREATER
17583: PUSH
17584: LD_VAR 0 3
17588: PPUSH
17589: CALL_OW 301
17593: OR
17594: IFFALSE 17471
// if un then
17596: LD_VAR 0 3
17600: IFFALSE 17611
// RemoveUnit ( un ) ;
17602: LD_VAR 0 3
17606: PPUSH
17607: CALL_OW 64
// end ;
17611: PPOPN 3
17613: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17614: LD_INT 0
17616: PPUSH
// case cmd of 301 :
17617: LD_VAR 0 1
17621: PUSH
17622: LD_INT 301
17624: DOUBLE
17625: EQUAL
17626: IFTRUE 17630
17628: GO 17662
17630: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17631: LD_VAR 0 6
17635: PPUSH
17636: LD_VAR 0 7
17640: PPUSH
17641: LD_VAR 0 8
17645: PPUSH
17646: LD_VAR 0 4
17650: PPUSH
17651: LD_VAR 0 5
17655: PPUSH
17656: CALL 18863 0 5
17660: GO 17783
17662: LD_INT 302
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17707
17670: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17671: LD_VAR 0 6
17675: PPUSH
17676: LD_VAR 0 7
17680: PPUSH
17681: LD_VAR 0 8
17685: PPUSH
17686: LD_VAR 0 9
17690: PPUSH
17691: LD_VAR 0 4
17695: PPUSH
17696: LD_VAR 0 5
17700: PPUSH
17701: CALL 18954 0 6
17705: GO 17783
17707: LD_INT 303
17709: DOUBLE
17710: EQUAL
17711: IFTRUE 17715
17713: GO 17752
17715: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17716: LD_VAR 0 6
17720: PPUSH
17721: LD_VAR 0 7
17725: PPUSH
17726: LD_VAR 0 8
17730: PPUSH
17731: LD_VAR 0 9
17735: PPUSH
17736: LD_VAR 0 4
17740: PPUSH
17741: LD_VAR 0 5
17745: PPUSH
17746: CALL 17788 0 6
17750: GO 17783
17752: LD_INT 304
17754: DOUBLE
17755: EQUAL
17756: IFTRUE 17760
17758: GO 17782
17760: POP
// hHackTeleport ( unit , x , y ) ; end ;
17761: LD_VAR 0 2
17765: PPUSH
17766: LD_VAR 0 4
17770: PPUSH
17771: LD_VAR 0 5
17775: PPUSH
17776: CALL 19547 0 3
17780: GO 17783
17782: POP
// end ;
17783: LD_VAR 0 12
17787: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17792: LD_VAR 0 1
17796: PUSH
17797: LD_INT 1
17799: LESS
17800: PUSH
17801: LD_VAR 0 1
17805: PUSH
17806: LD_INT 3
17808: GREATER
17809: OR
17810: PUSH
17811: LD_VAR 0 5
17815: PPUSH
17816: LD_VAR 0 6
17820: PPUSH
17821: CALL_OW 428
17825: OR
17826: IFFALSE 17830
// exit ;
17828: GO 18550
// uc_side := your_side ;
17830: LD_ADDR_OWVAR 20
17834: PUSH
17835: LD_OWVAR 2
17839: ST_TO_ADDR
// uc_nation := nation ;
17840: LD_ADDR_OWVAR 21
17844: PUSH
17845: LD_VAR 0 1
17849: ST_TO_ADDR
// bc_level = 1 ;
17850: LD_ADDR_OWVAR 43
17854: PUSH
17855: LD_INT 1
17857: ST_TO_ADDR
// case btype of 1 :
17858: LD_VAR 0 2
17862: PUSH
17863: LD_INT 1
17865: DOUBLE
17866: EQUAL
17867: IFTRUE 17871
17869: GO 17882
17871: POP
// bc_type := b_depot ; 2 :
17872: LD_ADDR_OWVAR 42
17876: PUSH
17877: LD_INT 0
17879: ST_TO_ADDR
17880: GO 18494
17882: LD_INT 2
17884: DOUBLE
17885: EQUAL
17886: IFTRUE 17890
17888: GO 17901
17890: POP
// bc_type := b_warehouse ; 3 :
17891: LD_ADDR_OWVAR 42
17895: PUSH
17896: LD_INT 1
17898: ST_TO_ADDR
17899: GO 18494
17901: LD_INT 3
17903: DOUBLE
17904: EQUAL
17905: IFTRUE 17909
17907: GO 17920
17909: POP
// bc_type := b_lab ; 4 .. 9 :
17910: LD_ADDR_OWVAR 42
17914: PUSH
17915: LD_INT 6
17917: ST_TO_ADDR
17918: GO 18494
17920: LD_INT 4
17922: DOUBLE
17923: GREATEREQUAL
17924: IFFALSE 17932
17926: LD_INT 9
17928: DOUBLE
17929: LESSEQUAL
17930: IFTRUE 17934
17932: GO 17986
17934: POP
// begin bc_type := b_lab_half ;
17935: LD_ADDR_OWVAR 42
17939: PUSH
17940: LD_INT 7
17942: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17943: LD_ADDR_OWVAR 44
17947: PUSH
17948: LD_INT 10
17950: PUSH
17951: LD_INT 11
17953: PUSH
17954: LD_INT 12
17956: PUSH
17957: LD_INT 15
17959: PUSH
17960: LD_INT 14
17962: PUSH
17963: LD_INT 13
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: PUSH
17974: LD_VAR 0 2
17978: PUSH
17979: LD_INT 3
17981: MINUS
17982: ARRAY
17983: ST_TO_ADDR
// end ; 10 .. 13 :
17984: GO 18494
17986: LD_INT 10
17988: DOUBLE
17989: GREATEREQUAL
17990: IFFALSE 17998
17992: LD_INT 13
17994: DOUBLE
17995: LESSEQUAL
17996: IFTRUE 18000
17998: GO 18077
18000: POP
// begin bc_type := b_lab_full ;
18001: LD_ADDR_OWVAR 42
18005: PUSH
18006: LD_INT 8
18008: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18009: LD_ADDR_OWVAR 44
18013: PUSH
18014: LD_INT 10
18016: PUSH
18017: LD_INT 12
18019: PUSH
18020: LD_INT 14
18022: PUSH
18023: LD_INT 13
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: PUSH
18032: LD_VAR 0 2
18036: PUSH
18037: LD_INT 9
18039: MINUS
18040: ARRAY
18041: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18042: LD_ADDR_OWVAR 45
18046: PUSH
18047: LD_INT 11
18049: PUSH
18050: LD_INT 15
18052: PUSH
18053: LD_INT 12
18055: PUSH
18056: LD_INT 15
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_VAR 0 2
18069: PUSH
18070: LD_INT 9
18072: MINUS
18073: ARRAY
18074: ST_TO_ADDR
// end ; 14 :
18075: GO 18494
18077: LD_INT 14
18079: DOUBLE
18080: EQUAL
18081: IFTRUE 18085
18083: GO 18096
18085: POP
// bc_type := b_workshop ; 15 :
18086: LD_ADDR_OWVAR 42
18090: PUSH
18091: LD_INT 2
18093: ST_TO_ADDR
18094: GO 18494
18096: LD_INT 15
18098: DOUBLE
18099: EQUAL
18100: IFTRUE 18104
18102: GO 18115
18104: POP
// bc_type := b_factory ; 16 :
18105: LD_ADDR_OWVAR 42
18109: PUSH
18110: LD_INT 3
18112: ST_TO_ADDR
18113: GO 18494
18115: LD_INT 16
18117: DOUBLE
18118: EQUAL
18119: IFTRUE 18123
18121: GO 18134
18123: POP
// bc_type := b_ext_gun ; 17 :
18124: LD_ADDR_OWVAR 42
18128: PUSH
18129: LD_INT 17
18131: ST_TO_ADDR
18132: GO 18494
18134: LD_INT 17
18136: DOUBLE
18137: EQUAL
18138: IFTRUE 18142
18140: GO 18170
18142: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18143: LD_ADDR_OWVAR 42
18147: PUSH
18148: LD_INT 19
18150: PUSH
18151: LD_INT 23
18153: PUSH
18154: LD_INT 19
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: PUSH
18162: LD_VAR 0 1
18166: ARRAY
18167: ST_TO_ADDR
18168: GO 18494
18170: LD_INT 18
18172: DOUBLE
18173: EQUAL
18174: IFTRUE 18178
18176: GO 18189
18178: POP
// bc_type := b_ext_radar ; 19 :
18179: LD_ADDR_OWVAR 42
18183: PUSH
18184: LD_INT 20
18186: ST_TO_ADDR
18187: GO 18494
18189: LD_INT 19
18191: DOUBLE
18192: EQUAL
18193: IFTRUE 18197
18195: GO 18208
18197: POP
// bc_type := b_ext_radio ; 20 :
18198: LD_ADDR_OWVAR 42
18202: PUSH
18203: LD_INT 22
18205: ST_TO_ADDR
18206: GO 18494
18208: LD_INT 20
18210: DOUBLE
18211: EQUAL
18212: IFTRUE 18216
18214: GO 18227
18216: POP
// bc_type := b_ext_siberium ; 21 :
18217: LD_ADDR_OWVAR 42
18221: PUSH
18222: LD_INT 21
18224: ST_TO_ADDR
18225: GO 18494
18227: LD_INT 21
18229: DOUBLE
18230: EQUAL
18231: IFTRUE 18235
18233: GO 18246
18235: POP
// bc_type := b_ext_computer ; 22 :
18236: LD_ADDR_OWVAR 42
18240: PUSH
18241: LD_INT 24
18243: ST_TO_ADDR
18244: GO 18494
18246: LD_INT 22
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 18265
18254: POP
// bc_type := b_ext_track ; 23 :
18255: LD_ADDR_OWVAR 42
18259: PUSH
18260: LD_INT 16
18262: ST_TO_ADDR
18263: GO 18494
18265: LD_INT 23
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18284
18273: POP
// bc_type := b_ext_laser ; 24 :
18274: LD_ADDR_OWVAR 42
18278: PUSH
18279: LD_INT 25
18281: ST_TO_ADDR
18282: GO 18494
18284: LD_INT 24
18286: DOUBLE
18287: EQUAL
18288: IFTRUE 18292
18290: GO 18303
18292: POP
// bc_type := b_control_tower ; 25 :
18293: LD_ADDR_OWVAR 42
18297: PUSH
18298: LD_INT 36
18300: ST_TO_ADDR
18301: GO 18494
18303: LD_INT 25
18305: DOUBLE
18306: EQUAL
18307: IFTRUE 18311
18309: GO 18322
18311: POP
// bc_type := b_breastwork ; 26 :
18312: LD_ADDR_OWVAR 42
18316: PUSH
18317: LD_INT 31
18319: ST_TO_ADDR
18320: GO 18494
18322: LD_INT 26
18324: DOUBLE
18325: EQUAL
18326: IFTRUE 18330
18328: GO 18341
18330: POP
// bc_type := b_bunker ; 27 :
18331: LD_ADDR_OWVAR 42
18335: PUSH
18336: LD_INT 32
18338: ST_TO_ADDR
18339: GO 18494
18341: LD_INT 27
18343: DOUBLE
18344: EQUAL
18345: IFTRUE 18349
18347: GO 18360
18349: POP
// bc_type := b_turret ; 28 :
18350: LD_ADDR_OWVAR 42
18354: PUSH
18355: LD_INT 33
18357: ST_TO_ADDR
18358: GO 18494
18360: LD_INT 28
18362: DOUBLE
18363: EQUAL
18364: IFTRUE 18368
18366: GO 18379
18368: POP
// bc_type := b_armoury ; 29 :
18369: LD_ADDR_OWVAR 42
18373: PUSH
18374: LD_INT 4
18376: ST_TO_ADDR
18377: GO 18494
18379: LD_INT 29
18381: DOUBLE
18382: EQUAL
18383: IFTRUE 18387
18385: GO 18398
18387: POP
// bc_type := b_barracks ; 30 :
18388: LD_ADDR_OWVAR 42
18392: PUSH
18393: LD_INT 5
18395: ST_TO_ADDR
18396: GO 18494
18398: LD_INT 30
18400: DOUBLE
18401: EQUAL
18402: IFTRUE 18406
18404: GO 18417
18406: POP
// bc_type := b_solar_power ; 31 :
18407: LD_ADDR_OWVAR 42
18411: PUSH
18412: LD_INT 27
18414: ST_TO_ADDR
18415: GO 18494
18417: LD_INT 31
18419: DOUBLE
18420: EQUAL
18421: IFTRUE 18425
18423: GO 18436
18425: POP
// bc_type := b_oil_power ; 32 :
18426: LD_ADDR_OWVAR 42
18430: PUSH
18431: LD_INT 26
18433: ST_TO_ADDR
18434: GO 18494
18436: LD_INT 32
18438: DOUBLE
18439: EQUAL
18440: IFTRUE 18444
18442: GO 18455
18444: POP
// bc_type := b_siberite_power ; 33 :
18445: LD_ADDR_OWVAR 42
18449: PUSH
18450: LD_INT 28
18452: ST_TO_ADDR
18453: GO 18494
18455: LD_INT 33
18457: DOUBLE
18458: EQUAL
18459: IFTRUE 18463
18461: GO 18474
18463: POP
// bc_type := b_oil_mine ; 34 :
18464: LD_ADDR_OWVAR 42
18468: PUSH
18469: LD_INT 29
18471: ST_TO_ADDR
18472: GO 18494
18474: LD_INT 34
18476: DOUBLE
18477: EQUAL
18478: IFTRUE 18482
18480: GO 18493
18482: POP
// bc_type := b_siberite_mine ; end ;
18483: LD_ADDR_OWVAR 42
18487: PUSH
18488: LD_INT 30
18490: ST_TO_ADDR
18491: GO 18494
18493: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18494: LD_ADDR_VAR 0 8
18498: PUSH
18499: LD_VAR 0 5
18503: PPUSH
18504: LD_VAR 0 6
18508: PPUSH
18509: LD_VAR 0 3
18513: PPUSH
18514: CALL_OW 47
18518: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18519: LD_OWVAR 42
18523: PUSH
18524: LD_INT 32
18526: PUSH
18527: LD_INT 33
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: IN
18534: IFFALSE 18550
// PlaceWeaponTurret ( b , weapon ) ;
18536: LD_VAR 0 8
18540: PPUSH
18541: LD_VAR 0 4
18545: PPUSH
18546: CALL_OW 431
// end ;
18550: LD_VAR 0 7
18554: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18555: LD_INT 0
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18561: LD_ADDR_VAR 0 4
18565: PUSH
18566: LD_INT 22
18568: PUSH
18569: LD_OWVAR 2
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 30
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 30
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// if not tmp then
18615: LD_VAR 0 4
18619: NOT
18620: IFFALSE 18624
// exit ;
18622: GO 18683
// for i in tmp do
18624: LD_ADDR_VAR 0 2
18628: PUSH
18629: LD_VAR 0 4
18633: PUSH
18634: FOR_IN
18635: IFFALSE 18681
// for j = 1 to 3 do
18637: LD_ADDR_VAR 0 3
18641: PUSH
18642: DOUBLE
18643: LD_INT 1
18645: DEC
18646: ST_TO_ADDR
18647: LD_INT 3
18649: PUSH
18650: FOR_TO
18651: IFFALSE 18677
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18653: LD_VAR 0 2
18657: PPUSH
18658: CALL_OW 274
18662: PPUSH
18663: LD_VAR 0 3
18667: PPUSH
18668: LD_INT 99999
18670: PPUSH
18671: CALL_OW 277
18675: GO 18650
18677: POP
18678: POP
18679: GO 18634
18681: POP
18682: POP
// end ;
18683: LD_VAR 0 1
18687: RET
// export function hHackSetLevel10 ; var i , j ; begin
18688: LD_INT 0
18690: PPUSH
18691: PPUSH
18692: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18693: LD_ADDR_VAR 0 2
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: PUSH
18713: FOR_IN
18714: IFFALSE 18766
// if IsSelected ( i ) then
18716: LD_VAR 0 2
18720: PPUSH
18721: CALL_OW 306
18725: IFFALSE 18764
// begin for j := 1 to 4 do
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: DOUBLE
18733: LD_INT 1
18735: DEC
18736: ST_TO_ADDR
18737: LD_INT 4
18739: PUSH
18740: FOR_TO
18741: IFFALSE 18762
// SetSkill ( i , j , 10 ) ;
18743: LD_VAR 0 2
18747: PPUSH
18748: LD_VAR 0 3
18752: PPUSH
18753: LD_INT 10
18755: PPUSH
18756: CALL_OW 237
18760: GO 18740
18762: POP
18763: POP
// end ;
18764: GO 18713
18766: POP
18767: POP
// end ;
18768: LD_VAR 0 1
18772: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18773: LD_INT 0
18775: PPUSH
18776: PPUSH
18777: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18778: LD_ADDR_VAR 0 2
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_OWVAR 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 21
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 69
18813: PUSH
18814: FOR_IN
18815: IFFALSE 18856
// begin for j := 1 to 4 do
18817: LD_ADDR_VAR 0 3
18821: PUSH
18822: DOUBLE
18823: LD_INT 1
18825: DEC
18826: ST_TO_ADDR
18827: LD_INT 4
18829: PUSH
18830: FOR_TO
18831: IFFALSE 18852
// SetSkill ( i , j , 10 ) ;
18833: LD_VAR 0 2
18837: PPUSH
18838: LD_VAR 0 3
18842: PPUSH
18843: LD_INT 10
18845: PPUSH
18846: CALL_OW 237
18850: GO 18830
18852: POP
18853: POP
// end ;
18854: GO 18814
18856: POP
18857: POP
// end ;
18858: LD_VAR 0 1
18862: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18863: LD_INT 0
18865: PPUSH
// uc_side := your_side ;
18866: LD_ADDR_OWVAR 20
18870: PUSH
18871: LD_OWVAR 2
18875: ST_TO_ADDR
// uc_nation := nation ;
18876: LD_ADDR_OWVAR 21
18880: PUSH
18881: LD_VAR 0 1
18885: ST_TO_ADDR
// InitHc ;
18886: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18890: LD_INT 0
18892: PPUSH
18893: LD_VAR 0 2
18897: PPUSH
18898: LD_VAR 0 3
18902: PPUSH
18903: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18907: LD_VAR 0 4
18911: PPUSH
18912: LD_VAR 0 5
18916: PPUSH
18917: CALL_OW 428
18921: PUSH
18922: LD_INT 0
18924: EQUAL
18925: IFFALSE 18949
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18927: CALL_OW 44
18931: PPUSH
18932: LD_VAR 0 4
18936: PPUSH
18937: LD_VAR 0 5
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 48
// end ;
18949: LD_VAR 0 6
18953: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18954: LD_INT 0
18956: PPUSH
18957: PPUSH
// uc_side := your_side ;
18958: LD_ADDR_OWVAR 20
18962: PUSH
18963: LD_OWVAR 2
18967: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18968: LD_VAR 0 1
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: LD_INT 3
18981: PUSH
18982: LD_INT 4
18984: PUSH
18985: LD_INT 5
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: IN
18995: IFFALSE 19007
// uc_nation := nation_american else
18997: LD_ADDR_OWVAR 21
19001: PUSH
19002: LD_INT 1
19004: ST_TO_ADDR
19005: GO 19050
// if chassis in [ 11 , 12 , 13 , 14 ] then
19007: LD_VAR 0 1
19011: PUSH
19012: LD_INT 11
19014: PUSH
19015: LD_INT 12
19017: PUSH
19018: LD_INT 13
19020: PUSH
19021: LD_INT 14
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: IN
19030: IFFALSE 19042
// uc_nation := nation_arabian else
19032: LD_ADDR_OWVAR 21
19036: PUSH
19037: LD_INT 2
19039: ST_TO_ADDR
19040: GO 19050
// uc_nation := nation_russian ;
19042: LD_ADDR_OWVAR 21
19046: PUSH
19047: LD_INT 3
19049: ST_TO_ADDR
// vc_chassis := chassis ;
19050: LD_ADDR_OWVAR 37
19054: PUSH
19055: LD_VAR 0 1
19059: ST_TO_ADDR
// vc_engine := engine ;
19060: LD_ADDR_OWVAR 39
19064: PUSH
19065: LD_VAR 0 2
19069: ST_TO_ADDR
// vc_control := control ;
19070: LD_ADDR_OWVAR 38
19074: PUSH
19075: LD_VAR 0 3
19079: ST_TO_ADDR
// vc_weapon := weapon ;
19080: LD_ADDR_OWVAR 40
19084: PUSH
19085: LD_VAR 0 4
19089: ST_TO_ADDR
// un := CreateVehicle ;
19090: LD_ADDR_VAR 0 8
19094: PUSH
19095: CALL_OW 45
19099: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19100: LD_VAR 0 8
19104: PPUSH
19105: LD_INT 0
19107: PPUSH
19108: LD_INT 5
19110: PPUSH
19111: CALL_OW 12
19115: PPUSH
19116: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19120: LD_VAR 0 8
19124: PPUSH
19125: LD_VAR 0 5
19129: PPUSH
19130: LD_VAR 0 6
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 48
// end ;
19142: LD_VAR 0 7
19146: RET
// export hInvincible ; every 1 do
19147: GO 19149
19149: DISABLE
// hInvincible := [ ] ;
19150: LD_ADDR_EXP 81
19154: PUSH
19155: EMPTY
19156: ST_TO_ADDR
19157: END
// every 10 do var i ;
19158: GO 19160
19160: DISABLE
19161: LD_INT 0
19163: PPUSH
// begin enable ;
19164: ENABLE
// if not hInvincible then
19165: LD_EXP 81
19169: NOT
19170: IFFALSE 19174
// exit ;
19172: GO 19218
// for i in hInvincible do
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_EXP 81
19183: PUSH
19184: FOR_IN
19185: IFFALSE 19216
// if GetLives ( i ) < 1000 then
19187: LD_VAR 0 1
19191: PPUSH
19192: CALL_OW 256
19196: PUSH
19197: LD_INT 1000
19199: LESS
19200: IFFALSE 19214
// SetLives ( i , 1000 ) ;
19202: LD_VAR 0 1
19206: PPUSH
19207: LD_INT 1000
19209: PPUSH
19210: CALL_OW 234
19214: GO 19184
19216: POP
19217: POP
// end ;
19218: PPOPN 1
19220: END
// export function hHackInvincible ; var i ; begin
19221: LD_INT 0
19223: PPUSH
19224: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19225: LD_ADDR_VAR 0 2
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 21
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 21
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: PPUSH
19258: CALL_OW 69
19262: PUSH
19263: FOR_IN
19264: IFFALSE 19325
// if IsSelected ( i ) then
19266: LD_VAR 0 2
19270: PPUSH
19271: CALL_OW 306
19275: IFFALSE 19323
// begin if i in hInvincible then
19277: LD_VAR 0 2
19281: PUSH
19282: LD_EXP 81
19286: IN
19287: IFFALSE 19307
// hInvincible := hInvincible diff i else
19289: LD_ADDR_EXP 81
19293: PUSH
19294: LD_EXP 81
19298: PUSH
19299: LD_VAR 0 2
19303: DIFF
19304: ST_TO_ADDR
19305: GO 19323
// hInvincible := hInvincible union i ;
19307: LD_ADDR_EXP 81
19311: PUSH
19312: LD_EXP 81
19316: PUSH
19317: LD_VAR 0 2
19321: UNION
19322: ST_TO_ADDR
// end ;
19323: GO 19263
19325: POP
19326: POP
// end ;
19327: LD_VAR 0 1
19331: RET
// export function hHackInvisible ; var i , j ; begin
19332: LD_INT 0
19334: PPUSH
19335: PPUSH
19336: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19337: LD_ADDR_VAR 0 2
19341: PUSH
19342: LD_INT 21
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PPUSH
19352: CALL_OW 69
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19382
// if IsSelected ( i ) then
19360: LD_VAR 0 2
19364: PPUSH
19365: CALL_OW 306
19369: IFFALSE 19380
// ComForceInvisible ( i ) ;
19371: LD_VAR 0 2
19375: PPUSH
19376: CALL_OW 496
19380: GO 19357
19382: POP
19383: POP
// end ;
19384: LD_VAR 0 1
19388: RET
// export function hHackChangeYourSide ; begin
19389: LD_INT 0
19391: PPUSH
// if your_side = 8 then
19392: LD_OWVAR 2
19396: PUSH
19397: LD_INT 8
19399: EQUAL
19400: IFFALSE 19412
// your_side := 0 else
19402: LD_ADDR_OWVAR 2
19406: PUSH
19407: LD_INT 0
19409: ST_TO_ADDR
19410: GO 19426
// your_side := your_side + 1 ;
19412: LD_ADDR_OWVAR 2
19416: PUSH
19417: LD_OWVAR 2
19421: PUSH
19422: LD_INT 1
19424: PLUS
19425: ST_TO_ADDR
// end ;
19426: LD_VAR 0 1
19430: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19431: LD_INT 0
19433: PPUSH
19434: PPUSH
19435: PPUSH
// for i in all_units do
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: LD_OWVAR 3
19445: PUSH
19446: FOR_IN
19447: IFFALSE 19525
// if IsSelected ( i ) then
19449: LD_VAR 0 2
19453: PPUSH
19454: CALL_OW 306
19458: IFFALSE 19523
// begin j := GetSide ( i ) ;
19460: LD_ADDR_VAR 0 3
19464: PUSH
19465: LD_VAR 0 2
19469: PPUSH
19470: CALL_OW 255
19474: ST_TO_ADDR
// if j = 8 then
19475: LD_VAR 0 3
19479: PUSH
19480: LD_INT 8
19482: EQUAL
19483: IFFALSE 19495
// j := 0 else
19485: LD_ADDR_VAR 0 3
19489: PUSH
19490: LD_INT 0
19492: ST_TO_ADDR
19493: GO 19509
// j := j + 1 ;
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 1
19507: PLUS
19508: ST_TO_ADDR
// SetSide ( i , j ) ;
19509: LD_VAR 0 2
19513: PPUSH
19514: LD_VAR 0 3
19518: PPUSH
19519: CALL_OW 235
// end ;
19523: GO 19446
19525: POP
19526: POP
// end ;
19527: LD_VAR 0 1
19531: RET
// export function hHackFog ; begin
19532: LD_INT 0
19534: PPUSH
// FogOff ( true ) ;
19535: LD_INT 1
19537: PPUSH
19538: CALL_OW 344
// end ;
19542: LD_VAR 0 1
19546: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19547: LD_INT 0
19549: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19550: LD_VAR 0 1
19554: PPUSH
19555: LD_VAR 0 2
19559: PPUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1
19567: PPUSH
19568: LD_INT 1
19570: PPUSH
19571: CALL_OW 483
// CenterOnXY ( x , y ) ;
19575: LD_VAR 0 2
19579: PPUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: CALL_OW 84
// end ; end_of_file
19589: LD_VAR 0 4
19593: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19594: LD_INT 0
19596: PPUSH
19597: PPUSH
19598: PPUSH
19599: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19600: LD_VAR 0 1
19604: PPUSH
19605: CALL_OW 264
19609: PUSH
19610: LD_EXP 98
19614: EQUAL
19615: IFFALSE 19687
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19617: LD_INT 68
19619: PPUSH
19620: LD_VAR 0 1
19624: PPUSH
19625: CALL_OW 255
19629: PPUSH
19630: CALL_OW 321
19634: PUSH
19635: LD_INT 2
19637: EQUAL
19638: IFFALSE 19650
// eff := 70 else
19640: LD_ADDR_VAR 0 4
19644: PUSH
19645: LD_INT 70
19647: ST_TO_ADDR
19648: GO 19658
// eff := 30 ;
19650: LD_ADDR_VAR 0 4
19654: PUSH
19655: LD_INT 30
19657: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 250
19667: PPUSH
19668: LD_VAR 0 1
19672: PPUSH
19673: CALL_OW 251
19677: PPUSH
19678: LD_VAR 0 4
19682: PPUSH
19683: CALL_OW 495
// end ; end ;
19687: LD_VAR 0 2
19691: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19692: LD_INT 0
19694: PPUSH
// end ;
19695: LD_VAR 0 4
19699: RET
// export function SOS_Command ( cmd ) ; begin
19700: LD_INT 0
19702: PPUSH
// end ;
19703: LD_VAR 0 2
19707: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19708: LD_INT 0
19710: PPUSH
// if cmd = 121 then
19711: LD_VAR 0 1
19715: PUSH
19716: LD_INT 121
19718: EQUAL
19719: IFFALSE 19721
// end ;
19721: LD_VAR 0 6
19725: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19726: LD_INT 0
19728: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19729: LD_VAR 0 1
19733: PUSH
19734: LD_INT 250
19736: EQUAL
19737: PUSH
19738: LD_VAR 0 2
19742: PPUSH
19743: CALL_OW 264
19747: PUSH
19748: LD_EXP 101
19752: EQUAL
19753: AND
19754: IFFALSE 19775
// MinerPlaceMine ( unit , x , y ) ;
19756: LD_VAR 0 2
19760: PPUSH
19761: LD_VAR 0 4
19765: PPUSH
19766: LD_VAR 0 5
19770: PPUSH
19771: CALL 22124 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19775: LD_VAR 0 1
19779: PUSH
19780: LD_INT 251
19782: EQUAL
19783: PUSH
19784: LD_VAR 0 2
19788: PPUSH
19789: CALL_OW 264
19793: PUSH
19794: LD_EXP 101
19798: EQUAL
19799: AND
19800: IFFALSE 19821
// MinerDetonateMine ( unit , x , y ) ;
19802: LD_VAR 0 2
19806: PPUSH
19807: LD_VAR 0 4
19811: PPUSH
19812: LD_VAR 0 5
19816: PPUSH
19817: CALL 22401 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19821: LD_VAR 0 1
19825: PUSH
19826: LD_INT 252
19828: EQUAL
19829: PUSH
19830: LD_VAR 0 2
19834: PPUSH
19835: CALL_OW 264
19839: PUSH
19840: LD_EXP 101
19844: EQUAL
19845: AND
19846: IFFALSE 19867
// MinerCreateMinefield ( unit , x , y ) ;
19848: LD_VAR 0 2
19852: PPUSH
19853: LD_VAR 0 4
19857: PPUSH
19858: LD_VAR 0 5
19862: PPUSH
19863: CALL 22818 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19867: LD_VAR 0 1
19871: PUSH
19872: LD_INT 253
19874: EQUAL
19875: PUSH
19876: LD_VAR 0 2
19880: PPUSH
19881: CALL_OW 257
19885: PUSH
19886: LD_INT 5
19888: EQUAL
19889: AND
19890: IFFALSE 19911
// ComBinocular ( unit , x , y ) ;
19892: LD_VAR 0 2
19896: PPUSH
19897: LD_VAR 0 4
19901: PPUSH
19902: LD_VAR 0 5
19906: PPUSH
19907: CALL 23189 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19911: LD_VAR 0 1
19915: PUSH
19916: LD_INT 254
19918: EQUAL
19919: PUSH
19920: LD_VAR 0 2
19924: PPUSH
19925: CALL_OW 264
19929: PUSH
19930: LD_EXP 96
19934: EQUAL
19935: AND
19936: PUSH
19937: LD_VAR 0 3
19941: PPUSH
19942: CALL_OW 263
19946: PUSH
19947: LD_INT 3
19949: EQUAL
19950: AND
19951: IFFALSE 19967
// HackDestroyVehicle ( unit , selectedUnit ) ;
19953: LD_VAR 0 2
19957: PPUSH
19958: LD_VAR 0 3
19962: PPUSH
19963: CALL 21484 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19967: LD_VAR 0 1
19971: PUSH
19972: LD_INT 255
19974: EQUAL
19975: PUSH
19976: LD_VAR 0 2
19980: PPUSH
19981: CALL_OW 264
19985: PUSH
19986: LD_INT 14
19988: PUSH
19989: LD_INT 53
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: IN
19996: AND
19997: PUSH
19998: LD_VAR 0 4
20002: PPUSH
20003: LD_VAR 0 5
20007: PPUSH
20008: CALL_OW 488
20012: AND
20013: IFFALSE 20037
// CutTreeXYR ( unit , x , y , 12 ) ;
20015: LD_VAR 0 2
20019: PPUSH
20020: LD_VAR 0 4
20024: PPUSH
20025: LD_VAR 0 5
20029: PPUSH
20030: LD_INT 12
20032: PPUSH
20033: CALL 20050 0 4
// end ;
20037: LD_VAR 0 6
20041: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20042: LD_INT 0
20044: PPUSH
// end ;
20045: LD_VAR 0 4
20049: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20050: LD_INT 0
20052: PPUSH
20053: PPUSH
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
20059: PPUSH
20060: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20061: LD_VAR 0 1
20065: NOT
20066: PUSH
20067: LD_VAR 0 2
20071: PPUSH
20072: LD_VAR 0 3
20076: PPUSH
20077: CALL_OW 488
20081: NOT
20082: OR
20083: PUSH
20084: LD_VAR 0 4
20088: NOT
20089: OR
20090: IFFALSE 20094
// exit ;
20092: GO 20434
// list := [ ] ;
20094: LD_ADDR_VAR 0 13
20098: PUSH
20099: EMPTY
20100: ST_TO_ADDR
// if x - r < 0 then
20101: LD_VAR 0 2
20105: PUSH
20106: LD_VAR 0 4
20110: MINUS
20111: PUSH
20112: LD_INT 0
20114: LESS
20115: IFFALSE 20127
// min_x := 0 else
20117: LD_ADDR_VAR 0 7
20121: PUSH
20122: LD_INT 0
20124: ST_TO_ADDR
20125: GO 20143
// min_x := x - r ;
20127: LD_ADDR_VAR 0 7
20131: PUSH
20132: LD_VAR 0 2
20136: PUSH
20137: LD_VAR 0 4
20141: MINUS
20142: ST_TO_ADDR
// if y - r < 0 then
20143: LD_VAR 0 3
20147: PUSH
20148: LD_VAR 0 4
20152: MINUS
20153: PUSH
20154: LD_INT 0
20156: LESS
20157: IFFALSE 20169
// min_y := 0 else
20159: LD_ADDR_VAR 0 8
20163: PUSH
20164: LD_INT 0
20166: ST_TO_ADDR
20167: GO 20185
// min_y := y - r ;
20169: LD_ADDR_VAR 0 8
20173: PUSH
20174: LD_VAR 0 3
20178: PUSH
20179: LD_VAR 0 4
20183: MINUS
20184: ST_TO_ADDR
// max_x := x + r ;
20185: LD_ADDR_VAR 0 9
20189: PUSH
20190: LD_VAR 0 2
20194: PUSH
20195: LD_VAR 0 4
20199: PLUS
20200: ST_TO_ADDR
// max_y := y + r ;
20201: LD_ADDR_VAR 0 10
20205: PUSH
20206: LD_VAR 0 3
20210: PUSH
20211: LD_VAR 0 4
20215: PLUS
20216: ST_TO_ADDR
// for _x = min_x to max_x do
20217: LD_ADDR_VAR 0 11
20221: PUSH
20222: DOUBLE
20223: LD_VAR 0 7
20227: DEC
20228: ST_TO_ADDR
20229: LD_VAR 0 9
20233: PUSH
20234: FOR_TO
20235: IFFALSE 20352
// for _y = min_y to max_y do
20237: LD_ADDR_VAR 0 12
20241: PUSH
20242: DOUBLE
20243: LD_VAR 0 8
20247: DEC
20248: ST_TO_ADDR
20249: LD_VAR 0 10
20253: PUSH
20254: FOR_TO
20255: IFFALSE 20348
// begin if not ValidHex ( _x , _y ) then
20257: LD_VAR 0 11
20261: PPUSH
20262: LD_VAR 0 12
20266: PPUSH
20267: CALL_OW 488
20271: NOT
20272: IFFALSE 20276
// continue ;
20274: GO 20254
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20276: LD_VAR 0 11
20280: PPUSH
20281: LD_VAR 0 12
20285: PPUSH
20286: CALL_OW 351
20290: PUSH
20291: LD_VAR 0 11
20295: PPUSH
20296: LD_VAR 0 12
20300: PPUSH
20301: CALL_OW 554
20305: AND
20306: IFFALSE 20346
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20308: LD_ADDR_VAR 0 13
20312: PUSH
20313: LD_VAR 0 13
20317: PPUSH
20318: LD_VAR 0 13
20322: PUSH
20323: LD_INT 1
20325: PLUS
20326: PPUSH
20327: LD_VAR 0 11
20331: PUSH
20332: LD_VAR 0 12
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PPUSH
20341: CALL_OW 2
20345: ST_TO_ADDR
// end ;
20346: GO 20254
20348: POP
20349: POP
20350: GO 20234
20352: POP
20353: POP
// if not list then
20354: LD_VAR 0 13
20358: NOT
20359: IFFALSE 20363
// exit ;
20361: GO 20434
// for i in list do
20363: LD_ADDR_VAR 0 6
20367: PUSH
20368: LD_VAR 0 13
20372: PUSH
20373: FOR_IN
20374: IFFALSE 20432
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20376: LD_VAR 0 1
20380: PPUSH
20381: LD_STRING M
20383: PUSH
20384: LD_VAR 0 6
20388: PUSH
20389: LD_INT 1
20391: ARRAY
20392: PUSH
20393: LD_VAR 0 6
20397: PUSH
20398: LD_INT 2
20400: ARRAY
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: PPUSH
20426: CALL_OW 447
20430: GO 20373
20432: POP
20433: POP
// end ;
20434: LD_VAR 0 5
20438: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20439: LD_EXP 84
20443: NOT
20444: IFFALSE 20494
20446: GO 20448
20448: DISABLE
// begin initHack := true ;
20449: LD_ADDR_EXP 84
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// hackTanks := [ ] ;
20457: LD_ADDR_EXP 85
20461: PUSH
20462: EMPTY
20463: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20464: LD_ADDR_EXP 86
20468: PUSH
20469: EMPTY
20470: ST_TO_ADDR
// hackLimit := 3 ;
20471: LD_ADDR_EXP 87
20475: PUSH
20476: LD_INT 3
20478: ST_TO_ADDR
// hackDist := 12 ;
20479: LD_ADDR_EXP 88
20483: PUSH
20484: LD_INT 12
20486: ST_TO_ADDR
// hackCounter := [ ] ;
20487: LD_ADDR_EXP 89
20491: PUSH
20492: EMPTY
20493: ST_TO_ADDR
// end ;
20494: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20495: LD_EXP 84
20499: PUSH
20500: LD_INT 34
20502: PUSH
20503: LD_EXP 96
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 69
20516: AND
20517: IFFALSE 20772
20519: GO 20521
20521: DISABLE
20522: LD_INT 0
20524: PPUSH
20525: PPUSH
// begin enable ;
20526: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20527: LD_ADDR_VAR 0 1
20531: PUSH
20532: LD_INT 34
20534: PUSH
20535: LD_EXP 96
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PPUSH
20544: CALL_OW 69
20548: PUSH
20549: FOR_IN
20550: IFFALSE 20770
// begin if not i in hackTanks then
20552: LD_VAR 0 1
20556: PUSH
20557: LD_EXP 85
20561: IN
20562: NOT
20563: IFFALSE 20646
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20565: LD_ADDR_EXP 85
20569: PUSH
20570: LD_EXP 85
20574: PPUSH
20575: LD_EXP 85
20579: PUSH
20580: LD_INT 1
20582: PLUS
20583: PPUSH
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 1
20593: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20594: LD_ADDR_EXP 86
20598: PUSH
20599: LD_EXP 86
20603: PPUSH
20604: LD_EXP 86
20608: PUSH
20609: LD_INT 1
20611: PLUS
20612: PPUSH
20613: EMPTY
20614: PPUSH
20615: CALL_OW 1
20619: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20620: LD_ADDR_EXP 89
20624: PUSH
20625: LD_EXP 89
20629: PPUSH
20630: LD_EXP 89
20634: PUSH
20635: LD_INT 1
20637: PLUS
20638: PPUSH
20639: EMPTY
20640: PPUSH
20641: CALL_OW 1
20645: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20646: LD_VAR 0 1
20650: PPUSH
20651: CALL_OW 302
20655: NOT
20656: IFFALSE 20669
// begin HackUnlinkAll ( i ) ;
20658: LD_VAR 0 1
20662: PPUSH
20663: CALL 20775 0 1
// continue ;
20667: GO 20549
// end ; HackCheckCapturedStatus ( i ) ;
20669: LD_VAR 0 1
20673: PPUSH
20674: CALL 21218 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20678: LD_ADDR_VAR 0 2
20682: PUSH
20683: LD_INT 81
20685: PUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: CALL_OW 255
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 33
20702: PUSH
20703: LD_INT 3
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 91
20712: PUSH
20713: LD_VAR 0 1
20717: PUSH
20718: LD_EXP 88
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 50
20730: PUSH
20731: EMPTY
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 69
20744: ST_TO_ADDR
// if not tmp then
20745: LD_VAR 0 2
20749: NOT
20750: IFFALSE 20754
// continue ;
20752: GO 20549
// HackLink ( i , tmp ) ;
20754: LD_VAR 0 1
20758: PPUSH
20759: LD_VAR 0 2
20763: PPUSH
20764: CALL 20911 0 2
// end ;
20768: GO 20549
20770: POP
20771: POP
// end ;
20772: PPOPN 2
20774: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20775: LD_INT 0
20777: PPUSH
20778: PPUSH
20779: PPUSH
// if not hack in hackTanks then
20780: LD_VAR 0 1
20784: PUSH
20785: LD_EXP 85
20789: IN
20790: NOT
20791: IFFALSE 20795
// exit ;
20793: GO 20906
// index := GetElementIndex ( hackTanks , hack ) ;
20795: LD_ADDR_VAR 0 4
20799: PUSH
20800: LD_EXP 85
20804: PPUSH
20805: LD_VAR 0 1
20809: PPUSH
20810: CALL 28500 0 2
20814: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20815: LD_EXP 86
20819: PUSH
20820: LD_VAR 0 4
20824: ARRAY
20825: IFFALSE 20906
// begin for i in hackTanksCaptured [ index ] do
20827: LD_ADDR_VAR 0 3
20831: PUSH
20832: LD_EXP 86
20836: PUSH
20837: LD_VAR 0 4
20841: ARRAY
20842: PUSH
20843: FOR_IN
20844: IFFALSE 20870
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20846: LD_VAR 0 3
20850: PUSH
20851: LD_INT 1
20853: ARRAY
20854: PPUSH
20855: LD_VAR 0 3
20859: PUSH
20860: LD_INT 2
20862: ARRAY
20863: PPUSH
20864: CALL_OW 235
20868: GO 20843
20870: POP
20871: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20872: LD_ADDR_EXP 86
20876: PUSH
20877: LD_EXP 86
20881: PPUSH
20882: LD_VAR 0 4
20886: PPUSH
20887: EMPTY
20888: PPUSH
20889: CALL_OW 1
20893: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20894: LD_VAR 0 1
20898: PPUSH
20899: LD_INT 0
20901: PPUSH
20902: CALL_OW 505
// end ; end ;
20906: LD_VAR 0 2
20910: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20911: LD_INT 0
20913: PPUSH
20914: PPUSH
20915: PPUSH
// if not hack in hackTanks or not vehicles then
20916: LD_VAR 0 1
20920: PUSH
20921: LD_EXP 85
20925: IN
20926: NOT
20927: PUSH
20928: LD_VAR 0 2
20932: NOT
20933: OR
20934: IFFALSE 20938
// exit ;
20936: GO 21213
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20938: LD_ADDR_VAR 0 2
20942: PUSH
20943: LD_VAR 0 1
20947: PPUSH
20948: LD_VAR 0 2
20952: PPUSH
20953: LD_INT 1
20955: PPUSH
20956: LD_INT 1
20958: PPUSH
20959: CALL 29150 0 4
20963: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20964: LD_ADDR_VAR 0 5
20968: PUSH
20969: LD_EXP 85
20973: PPUSH
20974: LD_VAR 0 1
20978: PPUSH
20979: CALL 28500 0 2
20983: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20984: LD_EXP 86
20988: PUSH
20989: LD_VAR 0 5
20993: ARRAY
20994: PUSH
20995: LD_EXP 87
20999: LESS
21000: IFFALSE 21189
// begin for i := 1 to vehicles do
21002: LD_ADDR_VAR 0 4
21006: PUSH
21007: DOUBLE
21008: LD_INT 1
21010: DEC
21011: ST_TO_ADDR
21012: LD_VAR 0 2
21016: PUSH
21017: FOR_TO
21018: IFFALSE 21187
// begin if hackTanksCaptured [ index ] = hackLimit then
21020: LD_EXP 86
21024: PUSH
21025: LD_VAR 0 5
21029: ARRAY
21030: PUSH
21031: LD_EXP 87
21035: EQUAL
21036: IFFALSE 21040
// break ;
21038: GO 21187
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21040: LD_ADDR_EXP 89
21044: PUSH
21045: LD_EXP 89
21049: PPUSH
21050: LD_VAR 0 5
21054: PPUSH
21055: LD_EXP 89
21059: PUSH
21060: LD_VAR 0 5
21064: ARRAY
21065: PUSH
21066: LD_INT 1
21068: PLUS
21069: PPUSH
21070: CALL_OW 1
21074: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21075: LD_ADDR_EXP 86
21079: PUSH
21080: LD_EXP 86
21084: PPUSH
21085: LD_VAR 0 5
21089: PUSH
21090: LD_EXP 86
21094: PUSH
21095: LD_VAR 0 5
21099: ARRAY
21100: PUSH
21101: LD_INT 1
21103: PLUS
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: LD_VAR 0 2
21113: PUSH
21114: LD_VAR 0 4
21118: ARRAY
21119: PUSH
21120: LD_VAR 0 2
21124: PUSH
21125: LD_VAR 0 4
21129: ARRAY
21130: PPUSH
21131: CALL_OW 255
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PPUSH
21140: CALL 28715 0 3
21144: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21145: LD_VAR 0 2
21149: PUSH
21150: LD_VAR 0 4
21154: ARRAY
21155: PPUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 255
21165: PPUSH
21166: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21170: LD_VAR 0 2
21174: PUSH
21175: LD_VAR 0 4
21179: ARRAY
21180: PPUSH
21181: CALL_OW 141
// end ;
21185: GO 21017
21187: POP
21188: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21189: LD_VAR 0 1
21193: PPUSH
21194: LD_EXP 86
21198: PUSH
21199: LD_VAR 0 5
21203: ARRAY
21204: PUSH
21205: LD_INT 0
21207: PLUS
21208: PPUSH
21209: CALL_OW 505
// end ;
21213: LD_VAR 0 3
21217: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21218: LD_INT 0
21220: PPUSH
21221: PPUSH
21222: PPUSH
21223: PPUSH
// if not hack in hackTanks then
21224: LD_VAR 0 1
21228: PUSH
21229: LD_EXP 85
21233: IN
21234: NOT
21235: IFFALSE 21239
// exit ;
21237: GO 21479
// index := GetElementIndex ( hackTanks , hack ) ;
21239: LD_ADDR_VAR 0 4
21243: PUSH
21244: LD_EXP 85
21248: PPUSH
21249: LD_VAR 0 1
21253: PPUSH
21254: CALL 28500 0 2
21258: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21259: LD_ADDR_VAR 0 3
21263: PUSH
21264: DOUBLE
21265: LD_EXP 86
21269: PUSH
21270: LD_VAR 0 4
21274: ARRAY
21275: INC
21276: ST_TO_ADDR
21277: LD_INT 1
21279: PUSH
21280: FOR_DOWNTO
21281: IFFALSE 21453
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21283: LD_ADDR_VAR 0 5
21287: PUSH
21288: LD_EXP 86
21292: PUSH
21293: LD_VAR 0 4
21297: ARRAY
21298: PUSH
21299: LD_VAR 0 3
21303: ARRAY
21304: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21305: LD_VAR 0 5
21309: PUSH
21310: LD_INT 1
21312: ARRAY
21313: PPUSH
21314: CALL_OW 302
21318: NOT
21319: PUSH
21320: LD_VAR 0 5
21324: PUSH
21325: LD_INT 1
21327: ARRAY
21328: PPUSH
21329: CALL_OW 255
21333: PUSH
21334: LD_VAR 0 1
21338: PPUSH
21339: CALL_OW 255
21343: NONEQUAL
21344: OR
21345: IFFALSE 21451
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21347: LD_VAR 0 5
21351: PUSH
21352: LD_INT 1
21354: ARRAY
21355: PPUSH
21356: CALL_OW 305
21360: PUSH
21361: LD_VAR 0 5
21365: PUSH
21366: LD_INT 1
21368: ARRAY
21369: PPUSH
21370: CALL_OW 255
21374: PUSH
21375: LD_VAR 0 1
21379: PPUSH
21380: CALL_OW 255
21384: EQUAL
21385: AND
21386: IFFALSE 21410
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21388: LD_VAR 0 5
21392: PUSH
21393: LD_INT 1
21395: ARRAY
21396: PPUSH
21397: LD_VAR 0 5
21401: PUSH
21402: LD_INT 2
21404: ARRAY
21405: PPUSH
21406: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21410: LD_ADDR_EXP 86
21414: PUSH
21415: LD_EXP 86
21419: PPUSH
21420: LD_VAR 0 4
21424: PPUSH
21425: LD_EXP 86
21429: PUSH
21430: LD_VAR 0 4
21434: ARRAY
21435: PPUSH
21436: LD_VAR 0 3
21440: PPUSH
21441: CALL_OW 3
21445: PPUSH
21446: CALL_OW 1
21450: ST_TO_ADDR
// end ; end ;
21451: GO 21280
21453: POP
21454: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21455: LD_VAR 0 1
21459: PPUSH
21460: LD_EXP 86
21464: PUSH
21465: LD_VAR 0 4
21469: ARRAY
21470: PUSH
21471: LD_INT 0
21473: PLUS
21474: PPUSH
21475: CALL_OW 505
// end ;
21479: LD_VAR 0 2
21483: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21484: LD_INT 0
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
// if not hack in hackTanks then
21490: LD_VAR 0 1
21494: PUSH
21495: LD_EXP 85
21499: IN
21500: NOT
21501: IFFALSE 21505
// exit ;
21503: GO 21590
// index := GetElementIndex ( hackTanks , hack ) ;
21505: LD_ADDR_VAR 0 5
21509: PUSH
21510: LD_EXP 85
21514: PPUSH
21515: LD_VAR 0 1
21519: PPUSH
21520: CALL 28500 0 2
21524: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21525: LD_ADDR_VAR 0 4
21529: PUSH
21530: DOUBLE
21531: LD_INT 1
21533: DEC
21534: ST_TO_ADDR
21535: LD_EXP 86
21539: PUSH
21540: LD_VAR 0 5
21544: ARRAY
21545: PUSH
21546: FOR_TO
21547: IFFALSE 21588
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21549: LD_EXP 86
21553: PUSH
21554: LD_VAR 0 5
21558: ARRAY
21559: PUSH
21560: LD_VAR 0 4
21564: ARRAY
21565: PUSH
21566: LD_INT 1
21568: ARRAY
21569: PUSH
21570: LD_VAR 0 2
21574: EQUAL
21575: IFFALSE 21586
// KillUnit ( vehicle ) ;
21577: LD_VAR 0 2
21581: PPUSH
21582: CALL_OW 66
21586: GO 21546
21588: POP
21589: POP
// end ;
21590: LD_VAR 0 3
21594: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21595: LD_EXP 90
21599: NOT
21600: IFFALSE 21635
21602: GO 21604
21604: DISABLE
// begin initMiner := true ;
21605: LD_ADDR_EXP 90
21609: PUSH
21610: LD_INT 1
21612: ST_TO_ADDR
// minersList := [ ] ;
21613: LD_ADDR_EXP 91
21617: PUSH
21618: EMPTY
21619: ST_TO_ADDR
// minerMinesList := [ ] ;
21620: LD_ADDR_EXP 92
21624: PUSH
21625: EMPTY
21626: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21627: LD_ADDR_EXP 93
21631: PUSH
21632: LD_INT 5
21634: ST_TO_ADDR
// end ;
21635: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21636: LD_EXP 90
21640: PUSH
21641: LD_INT 34
21643: PUSH
21644: LD_EXP 101
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PPUSH
21653: CALL_OW 69
21657: AND
21658: IFFALSE 22121
21660: GO 21662
21662: DISABLE
21663: LD_INT 0
21665: PPUSH
21666: PPUSH
21667: PPUSH
21668: PPUSH
// begin enable ;
21669: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21670: LD_ADDR_VAR 0 1
21674: PUSH
21675: LD_INT 34
21677: PUSH
21678: LD_EXP 101
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 69
21691: PUSH
21692: FOR_IN
21693: IFFALSE 21765
// begin if not i in minersList then
21695: LD_VAR 0 1
21699: PUSH
21700: LD_EXP 91
21704: IN
21705: NOT
21706: IFFALSE 21763
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21708: LD_ADDR_EXP 91
21712: PUSH
21713: LD_EXP 91
21717: PPUSH
21718: LD_EXP 91
21722: PUSH
21723: LD_INT 1
21725: PLUS
21726: PPUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 1
21736: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21737: LD_ADDR_EXP 92
21741: PUSH
21742: LD_EXP 92
21746: PPUSH
21747: LD_EXP 92
21751: PUSH
21752: LD_INT 1
21754: PLUS
21755: PPUSH
21756: EMPTY
21757: PPUSH
21758: CALL_OW 1
21762: ST_TO_ADDR
// end end ;
21763: GO 21692
21765: POP
21766: POP
// for i := minerMinesList downto 1 do
21767: LD_ADDR_VAR 0 1
21771: PUSH
21772: DOUBLE
21773: LD_EXP 92
21777: INC
21778: ST_TO_ADDR
21779: LD_INT 1
21781: PUSH
21782: FOR_DOWNTO
21783: IFFALSE 22119
// begin if IsLive ( minersList [ i ] ) then
21785: LD_EXP 91
21789: PUSH
21790: LD_VAR 0 1
21794: ARRAY
21795: PPUSH
21796: CALL_OW 300
21800: IFFALSE 21828
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21802: LD_EXP 91
21806: PUSH
21807: LD_VAR 0 1
21811: ARRAY
21812: PPUSH
21813: LD_EXP 92
21817: PUSH
21818: LD_VAR 0 1
21822: ARRAY
21823: PPUSH
21824: CALL_OW 505
// if not minerMinesList [ i ] then
21828: LD_EXP 92
21832: PUSH
21833: LD_VAR 0 1
21837: ARRAY
21838: NOT
21839: IFFALSE 21843
// continue ;
21841: GO 21782
// for j := minerMinesList [ i ] downto 1 do
21843: LD_ADDR_VAR 0 2
21847: PUSH
21848: DOUBLE
21849: LD_EXP 92
21853: PUSH
21854: LD_VAR 0 1
21858: ARRAY
21859: INC
21860: ST_TO_ADDR
21861: LD_INT 1
21863: PUSH
21864: FOR_DOWNTO
21865: IFFALSE 22115
// begin side := GetSide ( minersList [ i ] ) ;
21867: LD_ADDR_VAR 0 3
21871: PUSH
21872: LD_EXP 91
21876: PUSH
21877: LD_VAR 0 1
21881: ARRAY
21882: PPUSH
21883: CALL_OW 255
21887: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21888: LD_ADDR_VAR 0 4
21892: PUSH
21893: LD_EXP 92
21897: PUSH
21898: LD_VAR 0 1
21902: ARRAY
21903: PUSH
21904: LD_VAR 0 2
21908: ARRAY
21909: PUSH
21910: LD_INT 1
21912: ARRAY
21913: PPUSH
21914: LD_EXP 92
21918: PUSH
21919: LD_VAR 0 1
21923: ARRAY
21924: PUSH
21925: LD_VAR 0 2
21929: ARRAY
21930: PUSH
21931: LD_INT 2
21933: ARRAY
21934: PPUSH
21935: CALL_OW 428
21939: ST_TO_ADDR
// if not tmp then
21940: LD_VAR 0 4
21944: NOT
21945: IFFALSE 21949
// continue ;
21947: GO 21864
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21949: LD_VAR 0 4
21953: PUSH
21954: LD_INT 81
21956: PUSH
21957: LD_VAR 0 3
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PPUSH
21966: CALL_OW 69
21970: IN
21971: PUSH
21972: LD_EXP 92
21976: PUSH
21977: LD_VAR 0 1
21981: ARRAY
21982: PUSH
21983: LD_VAR 0 2
21987: ARRAY
21988: PUSH
21989: LD_INT 1
21991: ARRAY
21992: PPUSH
21993: LD_EXP 92
21997: PUSH
21998: LD_VAR 0 1
22002: ARRAY
22003: PUSH
22004: LD_VAR 0 2
22008: ARRAY
22009: PUSH
22010: LD_INT 2
22012: ARRAY
22013: PPUSH
22014: CALL_OW 458
22018: AND
22019: IFFALSE 22113
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22021: LD_EXP 92
22025: PUSH
22026: LD_VAR 0 1
22030: ARRAY
22031: PUSH
22032: LD_VAR 0 2
22036: ARRAY
22037: PUSH
22038: LD_INT 1
22040: ARRAY
22041: PPUSH
22042: LD_EXP 92
22046: PUSH
22047: LD_VAR 0 1
22051: ARRAY
22052: PUSH
22053: LD_VAR 0 2
22057: ARRAY
22058: PUSH
22059: LD_INT 2
22061: ARRAY
22062: PPUSH
22063: LD_VAR 0 3
22067: PPUSH
22068: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22072: LD_ADDR_EXP 92
22076: PUSH
22077: LD_EXP 92
22081: PPUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_EXP 92
22091: PUSH
22092: LD_VAR 0 1
22096: ARRAY
22097: PPUSH
22098: LD_VAR 0 2
22102: PPUSH
22103: CALL_OW 3
22107: PPUSH
22108: CALL_OW 1
22112: ST_TO_ADDR
// end ; end ;
22113: GO 21864
22115: POP
22116: POP
// end ;
22117: GO 21782
22119: POP
22120: POP
// end ;
22121: PPOPN 4
22123: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22124: LD_INT 0
22126: PPUSH
22127: PPUSH
// result := false ;
22128: LD_ADDR_VAR 0 4
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 264
22145: PUSH
22146: LD_EXP 101
22150: EQUAL
22151: NOT
22152: IFFALSE 22156
// exit ;
22154: GO 22396
// index := GetElementIndex ( minersList , unit ) ;
22156: LD_ADDR_VAR 0 5
22160: PUSH
22161: LD_EXP 91
22165: PPUSH
22166: LD_VAR 0 1
22170: PPUSH
22171: CALL 28500 0 2
22175: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22176: LD_EXP 92
22180: PUSH
22181: LD_VAR 0 5
22185: ARRAY
22186: PUSH
22187: LD_EXP 93
22191: GREATEREQUAL
22192: IFFALSE 22196
// exit ;
22194: GO 22396
// ComMoveXY ( unit , x , y ) ;
22196: LD_VAR 0 1
22200: PPUSH
22201: LD_VAR 0 2
22205: PPUSH
22206: LD_VAR 0 3
22210: PPUSH
22211: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22215: LD_INT 35
22217: PPUSH
22218: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22222: LD_VAR 0 1
22226: PPUSH
22227: LD_VAR 0 2
22231: PPUSH
22232: LD_VAR 0 3
22236: PPUSH
22237: CALL 58897 0 3
22241: NOT
22242: PUSH
22243: LD_VAR 0 1
22247: PPUSH
22248: CALL_OW 314
22252: AND
22253: IFFALSE 22257
// exit ;
22255: GO 22396
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22257: LD_VAR 0 2
22261: PPUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: CALL_OW 428
22271: PUSH
22272: LD_VAR 0 1
22276: EQUAL
22277: PUSH
22278: LD_VAR 0 1
22282: PPUSH
22283: CALL_OW 314
22287: NOT
22288: AND
22289: IFFALSE 22215
// PlaySoundXY ( x , y , PlantMine ) ;
22291: LD_VAR 0 2
22295: PPUSH
22296: LD_VAR 0 3
22300: PPUSH
22301: LD_STRING PlantMine
22303: PPUSH
22304: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22308: LD_VAR 0 2
22312: PPUSH
22313: LD_VAR 0 3
22317: PPUSH
22318: LD_VAR 0 1
22322: PPUSH
22323: CALL_OW 255
22327: PPUSH
22328: LD_INT 0
22330: PPUSH
22331: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22335: LD_ADDR_EXP 92
22339: PUSH
22340: LD_EXP 92
22344: PPUSH
22345: LD_VAR 0 5
22349: PUSH
22350: LD_EXP 92
22354: PUSH
22355: LD_VAR 0 5
22359: ARRAY
22360: PUSH
22361: LD_INT 1
22363: PLUS
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PPUSH
22369: LD_VAR 0 2
22373: PUSH
22374: LD_VAR 0 3
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PPUSH
22383: CALL 28715 0 3
22387: ST_TO_ADDR
// result := true ;
22388: LD_ADDR_VAR 0 4
22392: PUSH
22393: LD_INT 1
22395: ST_TO_ADDR
// end ;
22396: LD_VAR 0 4
22400: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22401: LD_INT 0
22403: PPUSH
22404: PPUSH
22405: PPUSH
// if not unit in minersList then
22406: LD_VAR 0 1
22410: PUSH
22411: LD_EXP 91
22415: IN
22416: NOT
22417: IFFALSE 22421
// exit ;
22419: GO 22813
// index := GetElementIndex ( minersList , unit ) ;
22421: LD_ADDR_VAR 0 6
22425: PUSH
22426: LD_EXP 91
22430: PPUSH
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL 28500 0 2
22440: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22441: LD_ADDR_VAR 0 5
22445: PUSH
22446: DOUBLE
22447: LD_EXP 92
22451: PUSH
22452: LD_VAR 0 6
22456: ARRAY
22457: INC
22458: ST_TO_ADDR
22459: LD_INT 1
22461: PUSH
22462: FOR_DOWNTO
22463: IFFALSE 22624
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22465: LD_EXP 92
22469: PUSH
22470: LD_VAR 0 6
22474: ARRAY
22475: PUSH
22476: LD_VAR 0 5
22480: ARRAY
22481: PUSH
22482: LD_INT 1
22484: ARRAY
22485: PUSH
22486: LD_VAR 0 2
22490: EQUAL
22491: PUSH
22492: LD_EXP 92
22496: PUSH
22497: LD_VAR 0 6
22501: ARRAY
22502: PUSH
22503: LD_VAR 0 5
22507: ARRAY
22508: PUSH
22509: LD_INT 2
22511: ARRAY
22512: PUSH
22513: LD_VAR 0 3
22517: EQUAL
22518: AND
22519: IFFALSE 22622
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22521: LD_EXP 92
22525: PUSH
22526: LD_VAR 0 6
22530: ARRAY
22531: PUSH
22532: LD_VAR 0 5
22536: ARRAY
22537: PUSH
22538: LD_INT 1
22540: ARRAY
22541: PPUSH
22542: LD_EXP 92
22546: PUSH
22547: LD_VAR 0 6
22551: ARRAY
22552: PUSH
22553: LD_VAR 0 5
22557: ARRAY
22558: PUSH
22559: LD_INT 2
22561: ARRAY
22562: PPUSH
22563: LD_VAR 0 1
22567: PPUSH
22568: CALL_OW 255
22572: PPUSH
22573: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22577: LD_ADDR_EXP 92
22581: PUSH
22582: LD_EXP 92
22586: PPUSH
22587: LD_VAR 0 6
22591: PPUSH
22592: LD_EXP 92
22596: PUSH
22597: LD_VAR 0 6
22601: ARRAY
22602: PPUSH
22603: LD_VAR 0 5
22607: PPUSH
22608: CALL_OW 3
22612: PPUSH
22613: CALL_OW 1
22617: ST_TO_ADDR
// exit ;
22618: POP
22619: POP
22620: GO 22813
// end ; end ;
22622: GO 22462
22624: POP
22625: POP
// for i := minerMinesList [ index ] downto 1 do
22626: LD_ADDR_VAR 0 5
22630: PUSH
22631: DOUBLE
22632: LD_EXP 92
22636: PUSH
22637: LD_VAR 0 6
22641: ARRAY
22642: INC
22643: ST_TO_ADDR
22644: LD_INT 1
22646: PUSH
22647: FOR_DOWNTO
22648: IFFALSE 22811
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22650: LD_EXP 92
22654: PUSH
22655: LD_VAR 0 6
22659: ARRAY
22660: PUSH
22661: LD_VAR 0 5
22665: ARRAY
22666: PUSH
22667: LD_INT 1
22669: ARRAY
22670: PPUSH
22671: LD_EXP 92
22675: PUSH
22676: LD_VAR 0 6
22680: ARRAY
22681: PUSH
22682: LD_VAR 0 5
22686: ARRAY
22687: PUSH
22688: LD_INT 2
22690: ARRAY
22691: PPUSH
22692: LD_VAR 0 2
22696: PPUSH
22697: LD_VAR 0 3
22701: PPUSH
22702: CALL_OW 298
22706: PUSH
22707: LD_INT 6
22709: LESS
22710: IFFALSE 22809
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22712: LD_EXP 92
22716: PUSH
22717: LD_VAR 0 6
22721: ARRAY
22722: PUSH
22723: LD_VAR 0 5
22727: ARRAY
22728: PUSH
22729: LD_INT 1
22731: ARRAY
22732: PPUSH
22733: LD_EXP 92
22737: PUSH
22738: LD_VAR 0 6
22742: ARRAY
22743: PUSH
22744: LD_VAR 0 5
22748: ARRAY
22749: PUSH
22750: LD_INT 2
22752: ARRAY
22753: PPUSH
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 255
22763: PPUSH
22764: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22768: LD_ADDR_EXP 92
22772: PUSH
22773: LD_EXP 92
22777: PPUSH
22778: LD_VAR 0 6
22782: PPUSH
22783: LD_EXP 92
22787: PUSH
22788: LD_VAR 0 6
22792: ARRAY
22793: PPUSH
22794: LD_VAR 0 5
22798: PPUSH
22799: CALL_OW 3
22803: PPUSH
22804: CALL_OW 1
22808: ST_TO_ADDR
// end ; end ;
22809: GO 22647
22811: POP
22812: POP
// end ;
22813: LD_VAR 0 4
22817: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22818: LD_INT 0
22820: PPUSH
22821: PPUSH
22822: PPUSH
22823: PPUSH
22824: PPUSH
22825: PPUSH
22826: PPUSH
22827: PPUSH
22828: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22829: LD_VAR 0 1
22833: PPUSH
22834: CALL_OW 264
22838: PUSH
22839: LD_EXP 101
22843: EQUAL
22844: NOT
22845: PUSH
22846: LD_VAR 0 1
22850: PUSH
22851: LD_EXP 91
22855: IN
22856: NOT
22857: OR
22858: IFFALSE 22862
// exit ;
22860: GO 23184
// index := GetElementIndex ( minersList , unit ) ;
22862: LD_ADDR_VAR 0 6
22866: PUSH
22867: LD_EXP 91
22871: PPUSH
22872: LD_VAR 0 1
22876: PPUSH
22877: CALL 28500 0 2
22881: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22882: LD_ADDR_VAR 0 8
22886: PUSH
22887: LD_EXP 93
22891: PUSH
22892: LD_EXP 92
22896: PUSH
22897: LD_VAR 0 6
22901: ARRAY
22902: MINUS
22903: ST_TO_ADDR
// if not minesFreeAmount then
22904: LD_VAR 0 8
22908: NOT
22909: IFFALSE 22913
// exit ;
22911: GO 23184
// tmp := [ ] ;
22913: LD_ADDR_VAR 0 7
22917: PUSH
22918: EMPTY
22919: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22920: LD_ADDR_VAR 0 5
22924: PUSH
22925: DOUBLE
22926: LD_INT 1
22928: DEC
22929: ST_TO_ADDR
22930: LD_VAR 0 8
22934: PUSH
22935: FOR_TO
22936: IFFALSE 23131
// begin _d := rand ( 0 , 5 ) ;
22938: LD_ADDR_VAR 0 11
22942: PUSH
22943: LD_INT 0
22945: PPUSH
22946: LD_INT 5
22948: PPUSH
22949: CALL_OW 12
22953: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22954: LD_ADDR_VAR 0 12
22958: PUSH
22959: LD_INT 2
22961: PPUSH
22962: LD_INT 6
22964: PPUSH
22965: CALL_OW 12
22969: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22970: LD_ADDR_VAR 0 9
22974: PUSH
22975: LD_VAR 0 2
22979: PPUSH
22980: LD_VAR 0 11
22984: PPUSH
22985: LD_VAR 0 12
22989: PPUSH
22990: CALL_OW 272
22994: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22995: LD_ADDR_VAR 0 10
22999: PUSH
23000: LD_VAR 0 3
23004: PPUSH
23005: LD_VAR 0 11
23009: PPUSH
23010: LD_VAR 0 12
23014: PPUSH
23015: CALL_OW 273
23019: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23020: LD_VAR 0 9
23024: PPUSH
23025: LD_VAR 0 10
23029: PPUSH
23030: CALL_OW 488
23034: PUSH
23035: LD_VAR 0 9
23039: PUSH
23040: LD_VAR 0 10
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_VAR 0 7
23053: IN
23054: NOT
23055: AND
23056: PUSH
23057: LD_VAR 0 9
23061: PPUSH
23062: LD_VAR 0 10
23066: PPUSH
23067: CALL_OW 458
23071: NOT
23072: AND
23073: IFFALSE 23115
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23075: LD_ADDR_VAR 0 7
23079: PUSH
23080: LD_VAR 0 7
23084: PPUSH
23085: LD_VAR 0 7
23089: PUSH
23090: LD_INT 1
23092: PLUS
23093: PPUSH
23094: LD_VAR 0 9
23098: PUSH
23099: LD_VAR 0 10
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PPUSH
23108: CALL_OW 1
23112: ST_TO_ADDR
23113: GO 23129
// i := i - 1 ;
23115: LD_ADDR_VAR 0 5
23119: PUSH
23120: LD_VAR 0 5
23124: PUSH
23125: LD_INT 1
23127: MINUS
23128: ST_TO_ADDR
// end ;
23129: GO 22935
23131: POP
23132: POP
// for i in tmp do
23133: LD_ADDR_VAR 0 5
23137: PUSH
23138: LD_VAR 0 7
23142: PUSH
23143: FOR_IN
23144: IFFALSE 23182
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23146: LD_VAR 0 1
23150: PPUSH
23151: LD_VAR 0 5
23155: PUSH
23156: LD_INT 1
23158: ARRAY
23159: PPUSH
23160: LD_VAR 0 5
23164: PUSH
23165: LD_INT 2
23167: ARRAY
23168: PPUSH
23169: CALL 22124 0 3
23173: NOT
23174: IFFALSE 23180
// exit ;
23176: POP
23177: POP
23178: GO 23184
23180: GO 23143
23182: POP
23183: POP
// end ;
23184: LD_VAR 0 4
23188: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23189: LD_INT 0
23191: PPUSH
23192: PPUSH
23193: PPUSH
23194: PPUSH
23195: PPUSH
23196: PPUSH
23197: PPUSH
// if not GetClass ( unit ) = class_sniper then
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 257
23207: PUSH
23208: LD_INT 5
23210: EQUAL
23211: NOT
23212: IFFALSE 23216
// exit ;
23214: GO 23604
// dist := 8 ;
23216: LD_ADDR_VAR 0 5
23220: PUSH
23221: LD_INT 8
23223: ST_TO_ADDR
// viewRange := 12 ;
23224: LD_ADDR_VAR 0 7
23228: PUSH
23229: LD_INT 12
23231: ST_TO_ADDR
// side := GetSide ( unit ) ;
23232: LD_ADDR_VAR 0 6
23236: PUSH
23237: LD_VAR 0 1
23241: PPUSH
23242: CALL_OW 255
23246: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23247: LD_INT 61
23249: PPUSH
23250: LD_VAR 0 6
23254: PPUSH
23255: CALL_OW 321
23259: PUSH
23260: LD_INT 2
23262: EQUAL
23263: IFFALSE 23273
// viewRange := 16 ;
23265: LD_ADDR_VAR 0 7
23269: PUSH
23270: LD_INT 16
23272: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23273: LD_VAR 0 1
23277: PPUSH
23278: LD_VAR 0 2
23282: PPUSH
23283: LD_VAR 0 3
23287: PPUSH
23288: CALL_OW 297
23292: PUSH
23293: LD_VAR 0 5
23297: GREATER
23298: IFFALSE 23377
// begin ComMoveXY ( unit , x , y ) ;
23300: LD_VAR 0 1
23304: PPUSH
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_VAR 0 3
23314: PPUSH
23315: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23319: LD_INT 35
23321: PPUSH
23322: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23326: LD_VAR 0 1
23330: PPUSH
23331: LD_VAR 0 2
23335: PPUSH
23336: LD_VAR 0 3
23340: PPUSH
23341: CALL 58897 0 3
23345: NOT
23346: IFFALSE 23350
// exit ;
23348: GO 23604
// until GetDistUnitXY ( unit , x , y ) < dist ;
23350: LD_VAR 0 1
23354: PPUSH
23355: LD_VAR 0 2
23359: PPUSH
23360: LD_VAR 0 3
23364: PPUSH
23365: CALL_OW 297
23369: PUSH
23370: LD_VAR 0 5
23374: LESS
23375: IFFALSE 23319
// end ; ComTurnXY ( unit , x , y ) ;
23377: LD_VAR 0 1
23381: PPUSH
23382: LD_VAR 0 2
23386: PPUSH
23387: LD_VAR 0 3
23391: PPUSH
23392: CALL_OW 118
// wait ( 5 ) ;
23396: LD_INT 5
23398: PPUSH
23399: CALL_OW 67
// _d := GetDir ( unit ) ;
23403: LD_ADDR_VAR 0 10
23407: PUSH
23408: LD_VAR 0 1
23412: PPUSH
23413: CALL_OW 254
23417: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23418: LD_ADDR_VAR 0 8
23422: PUSH
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 250
23432: PPUSH
23433: LD_VAR 0 10
23437: PPUSH
23438: LD_VAR 0 5
23442: PPUSH
23443: CALL_OW 272
23447: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23448: LD_ADDR_VAR 0 9
23452: PUSH
23453: LD_VAR 0 1
23457: PPUSH
23458: CALL_OW 251
23462: PPUSH
23463: LD_VAR 0 10
23467: PPUSH
23468: LD_VAR 0 5
23472: PPUSH
23473: CALL_OW 273
23477: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23478: LD_VAR 0 8
23482: PPUSH
23483: LD_VAR 0 9
23487: PPUSH
23488: CALL_OW 488
23492: NOT
23493: IFFALSE 23497
// exit ;
23495: GO 23604
// ComAnimCustom ( unit , 1 ) ;
23497: LD_VAR 0 1
23501: PPUSH
23502: LD_INT 1
23504: PPUSH
23505: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23509: LD_VAR 0 8
23513: PPUSH
23514: LD_VAR 0 9
23518: PPUSH
23519: LD_VAR 0 6
23523: PPUSH
23524: LD_VAR 0 7
23528: PPUSH
23529: CALL_OW 330
// repeat wait ( 1 ) ;
23533: LD_INT 1
23535: PPUSH
23536: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL_OW 316
23549: PUSH
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL_OW 314
23559: OR
23560: PUSH
23561: LD_VAR 0 1
23565: PPUSH
23566: CALL_OW 302
23570: NOT
23571: OR
23572: PUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 301
23582: OR
23583: IFFALSE 23533
// RemoveSeeing ( _x , _y , side ) ;
23585: LD_VAR 0 8
23589: PPUSH
23590: LD_VAR 0 9
23594: PPUSH
23595: LD_VAR 0 6
23599: PPUSH
23600: CALL_OW 331
// end ; end_of_file
23604: LD_VAR 0 4
23608: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23609: LD_INT 0
23611: PPUSH
// ar_miner := 81 ;
23612: LD_ADDR_EXP 101
23616: PUSH
23617: LD_INT 81
23619: ST_TO_ADDR
// ar_crane := 88 ;
23620: LD_ADDR_EXP 100
23624: PUSH
23625: LD_INT 88
23627: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23628: LD_ADDR_EXP 95
23632: PUSH
23633: LD_INT 89
23635: ST_TO_ADDR
// us_hack := 99 ;
23636: LD_ADDR_EXP 96
23640: PUSH
23641: LD_INT 99
23643: ST_TO_ADDR
// us_artillery := 97 ;
23644: LD_ADDR_EXP 97
23648: PUSH
23649: LD_INT 97
23651: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23652: LD_ADDR_EXP 98
23656: PUSH
23657: LD_INT 91
23659: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23660: LD_ADDR_EXP 99
23664: PUSH
23665: LD_INT 92
23667: ST_TO_ADDR
// ru_radar := 98 ;
23668: LD_ADDR_EXP 94
23672: PUSH
23673: LD_INT 98
23675: ST_TO_ADDR
// tech_Artillery := 80 ;
23676: LD_ADDR_EXP 102
23680: PUSH
23681: LD_INT 80
23683: ST_TO_ADDR
// tech_RadMat := 81 ;
23684: LD_ADDR_EXP 103
23688: PUSH
23689: LD_INT 81
23691: ST_TO_ADDR
// tech_BasicTools := 82 ;
23692: LD_ADDR_EXP 104
23696: PUSH
23697: LD_INT 82
23699: ST_TO_ADDR
// tech_Cargo := 83 ;
23700: LD_ADDR_EXP 105
23704: PUSH
23705: LD_INT 83
23707: ST_TO_ADDR
// tech_Track := 84 ;
23708: LD_ADDR_EXP 106
23712: PUSH
23713: LD_INT 84
23715: ST_TO_ADDR
// tech_Crane := 85 ;
23716: LD_ADDR_EXP 107
23720: PUSH
23721: LD_INT 85
23723: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23724: LD_ADDR_EXP 108
23728: PUSH
23729: LD_INT 86
23731: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23732: LD_ADDR_EXP 109
23736: PUSH
23737: LD_INT 87
23739: ST_TO_ADDR
// class_mastodont := 31 ;
23740: LD_ADDR_EXP 110
23744: PUSH
23745: LD_INT 31
23747: ST_TO_ADDR
// class_horse := 21 ;
23748: LD_ADDR_EXP 111
23752: PUSH
23753: LD_INT 21
23755: ST_TO_ADDR
// end ;
23756: LD_VAR 0 1
23760: RET
// every 1 do
23761: GO 23763
23763: DISABLE
// InitGlobalVariables ; end_of_file
23764: CALL 23609 0 0
23768: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23769: LD_INT 0
23771: PPUSH
23772: PPUSH
// if exist_mode then
23773: LD_VAR 0 2
23777: IFFALSE 23802
// unit := CreateCharacter ( prefix & ident ) else
23779: LD_ADDR_VAR 0 5
23783: PUSH
23784: LD_VAR 0 3
23788: PUSH
23789: LD_VAR 0 1
23793: STR
23794: PPUSH
23795: CALL_OW 34
23799: ST_TO_ADDR
23800: GO 23817
// unit := NewCharacter ( ident ) ;
23802: LD_ADDR_VAR 0 5
23806: PUSH
23807: LD_VAR 0 1
23811: PPUSH
23812: CALL_OW 25
23816: ST_TO_ADDR
// result := unit ;
23817: LD_ADDR_VAR 0 4
23821: PUSH
23822: LD_VAR 0 5
23826: ST_TO_ADDR
// end ;
23827: LD_VAR 0 4
23831: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23832: LD_INT 0
23834: PPUSH
23835: PPUSH
// if not side or not nation then
23836: LD_VAR 0 1
23840: NOT
23841: PUSH
23842: LD_VAR 0 2
23846: NOT
23847: OR
23848: IFFALSE 23852
// exit ;
23850: GO 24616
// case nation of nation_american :
23852: LD_VAR 0 2
23856: PUSH
23857: LD_INT 1
23859: DOUBLE
23860: EQUAL
23861: IFTRUE 23865
23863: GO 24079
23865: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23866: LD_ADDR_VAR 0 4
23870: PUSH
23871: LD_INT 35
23873: PUSH
23874: LD_INT 45
23876: PUSH
23877: LD_INT 46
23879: PUSH
23880: LD_INT 47
23882: PUSH
23883: LD_INT 82
23885: PUSH
23886: LD_INT 83
23888: PUSH
23889: LD_INT 84
23891: PUSH
23892: LD_INT 85
23894: PUSH
23895: LD_INT 86
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: LD_INT 6
23906: PUSH
23907: LD_INT 15
23909: PUSH
23910: LD_INT 16
23912: PUSH
23913: LD_INT 7
23915: PUSH
23916: LD_INT 12
23918: PUSH
23919: LD_INT 13
23921: PUSH
23922: LD_INT 10
23924: PUSH
23925: LD_INT 14
23927: PUSH
23928: LD_INT 20
23930: PUSH
23931: LD_INT 21
23933: PUSH
23934: LD_INT 22
23936: PUSH
23937: LD_INT 25
23939: PUSH
23940: LD_INT 32
23942: PUSH
23943: LD_INT 27
23945: PUSH
23946: LD_INT 36
23948: PUSH
23949: LD_INT 69
23951: PUSH
23952: LD_INT 39
23954: PUSH
23955: LD_INT 34
23957: PUSH
23958: LD_INT 40
23960: PUSH
23961: LD_INT 48
23963: PUSH
23964: LD_INT 49
23966: PUSH
23967: LD_INT 50
23969: PUSH
23970: LD_INT 51
23972: PUSH
23973: LD_INT 52
23975: PUSH
23976: LD_INT 53
23978: PUSH
23979: LD_INT 54
23981: PUSH
23982: LD_INT 55
23984: PUSH
23985: LD_INT 56
23987: PUSH
23988: LD_INT 57
23990: PUSH
23991: LD_INT 58
23993: PUSH
23994: LD_INT 59
23996: PUSH
23997: LD_INT 60
23999: PUSH
24000: LD_INT 61
24002: PUSH
24003: LD_INT 62
24005: PUSH
24006: LD_INT 80
24008: PUSH
24009: LD_INT 82
24011: PUSH
24012: LD_INT 83
24014: PUSH
24015: LD_INT 84
24017: PUSH
24018: LD_INT 85
24020: PUSH
24021: LD_INT 86
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: ST_TO_ADDR
24077: GO 24540
24079: LD_INT 2
24081: DOUBLE
24082: EQUAL
24083: IFTRUE 24087
24085: GO 24309
24087: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24088: LD_ADDR_VAR 0 4
24092: PUSH
24093: LD_INT 35
24095: PUSH
24096: LD_INT 45
24098: PUSH
24099: LD_INT 46
24101: PUSH
24102: LD_INT 47
24104: PUSH
24105: LD_INT 82
24107: PUSH
24108: LD_INT 83
24110: PUSH
24111: LD_INT 84
24113: PUSH
24114: LD_INT 85
24116: PUSH
24117: LD_INT 87
24119: PUSH
24120: LD_INT 70
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: LD_INT 6
24140: PUSH
24141: LD_INT 15
24143: PUSH
24144: LD_INT 18
24146: PUSH
24147: LD_INT 7
24149: PUSH
24150: LD_INT 17
24152: PUSH
24153: LD_INT 8
24155: PUSH
24156: LD_INT 20
24158: PUSH
24159: LD_INT 21
24161: PUSH
24162: LD_INT 22
24164: PUSH
24165: LD_INT 72
24167: PUSH
24168: LD_INT 26
24170: PUSH
24171: LD_INT 69
24173: PUSH
24174: LD_INT 39
24176: PUSH
24177: LD_INT 40
24179: PUSH
24180: LD_INT 41
24182: PUSH
24183: LD_INT 42
24185: PUSH
24186: LD_INT 43
24188: PUSH
24189: LD_INT 48
24191: PUSH
24192: LD_INT 49
24194: PUSH
24195: LD_INT 50
24197: PUSH
24198: LD_INT 51
24200: PUSH
24201: LD_INT 52
24203: PUSH
24204: LD_INT 53
24206: PUSH
24207: LD_INT 54
24209: PUSH
24210: LD_INT 55
24212: PUSH
24213: LD_INT 56
24215: PUSH
24216: LD_INT 60
24218: PUSH
24219: LD_INT 61
24221: PUSH
24222: LD_INT 62
24224: PUSH
24225: LD_INT 66
24227: PUSH
24228: LD_INT 67
24230: PUSH
24231: LD_INT 68
24233: PUSH
24234: LD_INT 81
24236: PUSH
24237: LD_INT 82
24239: PUSH
24240: LD_INT 83
24242: PUSH
24243: LD_INT 84
24245: PUSH
24246: LD_INT 85
24248: PUSH
24249: LD_INT 87
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: ST_TO_ADDR
24307: GO 24540
24309: LD_INT 3
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24539
24317: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24318: LD_ADDR_VAR 0 4
24322: PUSH
24323: LD_INT 46
24325: PUSH
24326: LD_INT 47
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: LD_INT 82
24337: PUSH
24338: LD_INT 83
24340: PUSH
24341: LD_INT 84
24343: PUSH
24344: LD_INT 85
24346: PUSH
24347: LD_INT 86
24349: PUSH
24350: LD_INT 11
24352: PUSH
24353: LD_INT 9
24355: PUSH
24356: LD_INT 20
24358: PUSH
24359: LD_INT 19
24361: PUSH
24362: LD_INT 21
24364: PUSH
24365: LD_INT 24
24367: PUSH
24368: LD_INT 22
24370: PUSH
24371: LD_INT 25
24373: PUSH
24374: LD_INT 28
24376: PUSH
24377: LD_INT 29
24379: PUSH
24380: LD_INT 30
24382: PUSH
24383: LD_INT 31
24385: PUSH
24386: LD_INT 37
24388: PUSH
24389: LD_INT 38
24391: PUSH
24392: LD_INT 32
24394: PUSH
24395: LD_INT 27
24397: PUSH
24398: LD_INT 33
24400: PUSH
24401: LD_INT 69
24403: PUSH
24404: LD_INT 39
24406: PUSH
24407: LD_INT 34
24409: PUSH
24410: LD_INT 40
24412: PUSH
24413: LD_INT 71
24415: PUSH
24416: LD_INT 23
24418: PUSH
24419: LD_INT 44
24421: PUSH
24422: LD_INT 48
24424: PUSH
24425: LD_INT 49
24427: PUSH
24428: LD_INT 50
24430: PUSH
24431: LD_INT 51
24433: PUSH
24434: LD_INT 52
24436: PUSH
24437: LD_INT 53
24439: PUSH
24440: LD_INT 54
24442: PUSH
24443: LD_INT 55
24445: PUSH
24446: LD_INT 56
24448: PUSH
24449: LD_INT 57
24451: PUSH
24452: LD_INT 58
24454: PUSH
24455: LD_INT 59
24457: PUSH
24458: LD_INT 63
24460: PUSH
24461: LD_INT 64
24463: PUSH
24464: LD_INT 65
24466: PUSH
24467: LD_INT 82
24469: PUSH
24470: LD_INT 83
24472: PUSH
24473: LD_INT 84
24475: PUSH
24476: LD_INT 85
24478: PUSH
24479: LD_INT 86
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
24537: GO 24540
24539: POP
// if state > - 1 and state < 3 then
24540: LD_VAR 0 3
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: GREATER
24549: PUSH
24550: LD_VAR 0 3
24554: PUSH
24555: LD_INT 3
24557: LESS
24558: AND
24559: IFFALSE 24616
// for i in result do
24561: LD_ADDR_VAR 0 5
24565: PUSH
24566: LD_VAR 0 4
24570: PUSH
24571: FOR_IN
24572: IFFALSE 24614
// if GetTech ( i , side ) <> state then
24574: LD_VAR 0 5
24578: PPUSH
24579: LD_VAR 0 1
24583: PPUSH
24584: CALL_OW 321
24588: PUSH
24589: LD_VAR 0 3
24593: NONEQUAL
24594: IFFALSE 24612
// result := result diff i ;
24596: LD_ADDR_VAR 0 4
24600: PUSH
24601: LD_VAR 0 4
24605: PUSH
24606: LD_VAR 0 5
24610: DIFF
24611: ST_TO_ADDR
24612: GO 24571
24614: POP
24615: POP
// end ;
24616: LD_VAR 0 4
24620: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24621: LD_INT 0
24623: PPUSH
24624: PPUSH
24625: PPUSH
// result := true ;
24626: LD_ADDR_VAR 0 3
24630: PUSH
24631: LD_INT 1
24633: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24634: LD_ADDR_VAR 0 5
24638: PUSH
24639: LD_VAR 0 2
24643: PPUSH
24644: CALL_OW 480
24648: ST_TO_ADDR
// if not tmp then
24649: LD_VAR 0 5
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24707
// for i in tmp do
24658: LD_ADDR_VAR 0 4
24662: PUSH
24663: LD_VAR 0 5
24667: PUSH
24668: FOR_IN
24669: IFFALSE 24705
// if GetTech ( i , side ) <> state_researched then
24671: LD_VAR 0 4
24675: PPUSH
24676: LD_VAR 0 1
24680: PPUSH
24681: CALL_OW 321
24685: PUSH
24686: LD_INT 2
24688: NONEQUAL
24689: IFFALSE 24703
// begin result := false ;
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_INT 0
24698: ST_TO_ADDR
// exit ;
24699: POP
24700: POP
24701: GO 24707
// end ;
24703: GO 24668
24705: POP
24706: POP
// end ;
24707: LD_VAR 0 3
24711: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24712: LD_INT 0
24714: PPUSH
24715: PPUSH
24716: PPUSH
24717: PPUSH
24718: PPUSH
24719: PPUSH
24720: PPUSH
24721: PPUSH
24722: PPUSH
24723: PPUSH
24724: PPUSH
24725: PPUSH
24726: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24727: LD_VAR 0 1
24731: NOT
24732: PUSH
24733: LD_VAR 0 1
24737: PPUSH
24738: CALL_OW 257
24742: PUSH
24743: LD_INT 9
24745: NONEQUAL
24746: OR
24747: IFFALSE 24751
// exit ;
24749: GO 25324
// side := GetSide ( unit ) ;
24751: LD_ADDR_VAR 0 9
24755: PUSH
24756: LD_VAR 0 1
24760: PPUSH
24761: CALL_OW 255
24765: ST_TO_ADDR
// tech_space := tech_spacanom ;
24766: LD_ADDR_VAR 0 12
24770: PUSH
24771: LD_INT 29
24773: ST_TO_ADDR
// tech_time := tech_taurad ;
24774: LD_ADDR_VAR 0 13
24778: PUSH
24779: LD_INT 28
24781: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24782: LD_ADDR_VAR 0 11
24786: PUSH
24787: LD_VAR 0 1
24791: PPUSH
24792: CALL_OW 310
24796: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24797: LD_VAR 0 11
24801: PPUSH
24802: CALL_OW 247
24806: PUSH
24807: LD_INT 2
24809: EQUAL
24810: IFFALSE 24814
// exit ;
24812: GO 25324
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24814: LD_ADDR_VAR 0 8
24818: PUSH
24819: LD_INT 81
24821: PUSH
24822: LD_VAR 0 9
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 3
24833: PUSH
24834: LD_INT 21
24836: PUSH
24837: LD_INT 3
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PPUSH
24852: CALL_OW 69
24856: ST_TO_ADDR
// if not tmp then
24857: LD_VAR 0 8
24861: NOT
24862: IFFALSE 24866
// exit ;
24864: GO 25324
// if in_unit then
24866: LD_VAR 0 11
24870: IFFALSE 24894
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24872: LD_ADDR_VAR 0 10
24876: PUSH
24877: LD_VAR 0 8
24881: PPUSH
24882: LD_VAR 0 11
24886: PPUSH
24887: CALL_OW 74
24891: ST_TO_ADDR
24892: GO 24914
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24894: LD_ADDR_VAR 0 10
24898: PUSH
24899: LD_VAR 0 8
24903: PPUSH
24904: LD_VAR 0 1
24908: PPUSH
24909: CALL_OW 74
24913: ST_TO_ADDR
// if not enemy then
24914: LD_VAR 0 10
24918: NOT
24919: IFFALSE 24923
// exit ;
24921: GO 25324
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24923: LD_VAR 0 11
24927: PUSH
24928: LD_VAR 0 11
24932: PPUSH
24933: LD_VAR 0 10
24937: PPUSH
24938: CALL_OW 296
24942: PUSH
24943: LD_INT 13
24945: GREATER
24946: AND
24947: PUSH
24948: LD_VAR 0 1
24952: PPUSH
24953: LD_VAR 0 10
24957: PPUSH
24958: CALL_OW 296
24962: PUSH
24963: LD_INT 12
24965: GREATER
24966: OR
24967: IFFALSE 24971
// exit ;
24969: GO 25324
// missile := [ 1 ] ;
24971: LD_ADDR_VAR 0 14
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24982: LD_VAR 0 9
24986: PPUSH
24987: LD_VAR 0 12
24991: PPUSH
24992: CALL_OW 325
24996: IFFALSE 25025
// missile := Insert ( missile , missile + 1 , 2 ) ;
24998: LD_ADDR_VAR 0 14
25002: PUSH
25003: LD_VAR 0 14
25007: PPUSH
25008: LD_VAR 0 14
25012: PUSH
25013: LD_INT 1
25015: PLUS
25016: PPUSH
25017: LD_INT 2
25019: PPUSH
25020: CALL_OW 2
25024: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25025: LD_VAR 0 9
25029: PPUSH
25030: LD_VAR 0 13
25034: PPUSH
25035: CALL_OW 325
25039: PUSH
25040: LD_VAR 0 10
25044: PPUSH
25045: CALL_OW 255
25049: PPUSH
25050: LD_VAR 0 13
25054: PPUSH
25055: CALL_OW 325
25059: NOT
25060: AND
25061: IFFALSE 25090
// missile := Insert ( missile , missile + 1 , 3 ) ;
25063: LD_ADDR_VAR 0 14
25067: PUSH
25068: LD_VAR 0 14
25072: PPUSH
25073: LD_VAR 0 14
25077: PUSH
25078: LD_INT 1
25080: PLUS
25081: PPUSH
25082: LD_INT 3
25084: PPUSH
25085: CALL_OW 2
25089: ST_TO_ADDR
// if missile < 2 then
25090: LD_VAR 0 14
25094: PUSH
25095: LD_INT 2
25097: LESS
25098: IFFALSE 25102
// exit ;
25100: GO 25324
// x := GetX ( enemy ) ;
25102: LD_ADDR_VAR 0 4
25106: PUSH
25107: LD_VAR 0 10
25111: PPUSH
25112: CALL_OW 250
25116: ST_TO_ADDR
// y := GetY ( enemy ) ;
25117: LD_ADDR_VAR 0 5
25121: PUSH
25122: LD_VAR 0 10
25126: PPUSH
25127: CALL_OW 251
25131: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25132: LD_ADDR_VAR 0 6
25136: PUSH
25137: LD_VAR 0 4
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PPUSH
25146: LD_INT 1
25148: PPUSH
25149: CALL_OW 12
25153: PLUS
25154: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25155: LD_ADDR_VAR 0 7
25159: PUSH
25160: LD_VAR 0 5
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PPUSH
25169: LD_INT 1
25171: PPUSH
25172: CALL_OW 12
25176: PLUS
25177: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25178: LD_VAR 0 6
25182: PPUSH
25183: LD_VAR 0 7
25187: PPUSH
25188: CALL_OW 488
25192: NOT
25193: IFFALSE 25215
// begin _x := x ;
25195: LD_ADDR_VAR 0 6
25199: PUSH
25200: LD_VAR 0 4
25204: ST_TO_ADDR
// _y := y ;
25205: LD_ADDR_VAR 0 7
25209: PUSH
25210: LD_VAR 0 5
25214: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_INT 1
25222: PPUSH
25223: LD_VAR 0 14
25227: PPUSH
25228: CALL_OW 12
25232: ST_TO_ADDR
// case i of 1 :
25233: LD_VAR 0 3
25237: PUSH
25238: LD_INT 1
25240: DOUBLE
25241: EQUAL
25242: IFTRUE 25246
25244: GO 25263
25246: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25247: LD_VAR 0 1
25251: PPUSH
25252: LD_VAR 0 10
25256: PPUSH
25257: CALL_OW 115
25261: GO 25324
25263: LD_INT 2
25265: DOUBLE
25266: EQUAL
25267: IFTRUE 25271
25269: GO 25293
25271: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25272: LD_VAR 0 1
25276: PPUSH
25277: LD_VAR 0 6
25281: PPUSH
25282: LD_VAR 0 7
25286: PPUSH
25287: CALL_OW 153
25291: GO 25324
25293: LD_INT 3
25295: DOUBLE
25296: EQUAL
25297: IFTRUE 25301
25299: GO 25323
25301: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25302: LD_VAR 0 1
25306: PPUSH
25307: LD_VAR 0 6
25311: PPUSH
25312: LD_VAR 0 7
25316: PPUSH
25317: CALL_OW 154
25321: GO 25324
25323: POP
// end ;
25324: LD_VAR 0 2
25328: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25329: LD_INT 0
25331: PPUSH
25332: PPUSH
25333: PPUSH
25334: PPUSH
25335: PPUSH
25336: PPUSH
// if not unit or not building then
25337: LD_VAR 0 1
25341: NOT
25342: PUSH
25343: LD_VAR 0 2
25347: NOT
25348: OR
25349: IFFALSE 25353
// exit ;
25351: GO 25511
// x := GetX ( building ) ;
25353: LD_ADDR_VAR 0 5
25357: PUSH
25358: LD_VAR 0 2
25362: PPUSH
25363: CALL_OW 250
25367: ST_TO_ADDR
// y := GetY ( building ) ;
25368: LD_ADDR_VAR 0 6
25372: PUSH
25373: LD_VAR 0 2
25377: PPUSH
25378: CALL_OW 251
25382: ST_TO_ADDR
// for i = 0 to 5 do
25383: LD_ADDR_VAR 0 4
25387: PUSH
25388: DOUBLE
25389: LD_INT 0
25391: DEC
25392: ST_TO_ADDR
25393: LD_INT 5
25395: PUSH
25396: FOR_TO
25397: IFFALSE 25509
// begin _x := ShiftX ( x , i , 3 ) ;
25399: LD_ADDR_VAR 0 7
25403: PUSH
25404: LD_VAR 0 5
25408: PPUSH
25409: LD_VAR 0 4
25413: PPUSH
25414: LD_INT 3
25416: PPUSH
25417: CALL_OW 272
25421: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25422: LD_ADDR_VAR 0 8
25426: PUSH
25427: LD_VAR 0 6
25431: PPUSH
25432: LD_VAR 0 4
25436: PPUSH
25437: LD_INT 3
25439: PPUSH
25440: CALL_OW 273
25444: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25445: LD_VAR 0 7
25449: PPUSH
25450: LD_VAR 0 8
25454: PPUSH
25455: CALL_OW 488
25459: NOT
25460: IFFALSE 25464
// continue ;
25462: GO 25396
// if HexInfo ( _x , _y ) = 0 then
25464: LD_VAR 0 7
25468: PPUSH
25469: LD_VAR 0 8
25473: PPUSH
25474: CALL_OW 428
25478: PUSH
25479: LD_INT 0
25481: EQUAL
25482: IFFALSE 25507
// begin ComMoveXY ( unit , _x , _y ) ;
25484: LD_VAR 0 1
25488: PPUSH
25489: LD_VAR 0 7
25493: PPUSH
25494: LD_VAR 0 8
25498: PPUSH
25499: CALL_OW 111
// exit ;
25503: POP
25504: POP
25505: GO 25511
// end ; end ;
25507: GO 25396
25509: POP
25510: POP
// end ;
25511: LD_VAR 0 3
25515: RET
// export function ScanBase ( side , base_area ) ; begin
25516: LD_INT 0
25518: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25519: LD_ADDR_VAR 0 3
25523: PUSH
25524: LD_VAR 0 2
25528: PPUSH
25529: LD_INT 81
25531: PUSH
25532: LD_VAR 0 1
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PPUSH
25541: CALL_OW 70
25545: ST_TO_ADDR
// end ;
25546: LD_VAR 0 3
25550: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25551: LD_INT 0
25553: PPUSH
25554: PPUSH
25555: PPUSH
25556: PPUSH
// result := false ;
25557: LD_ADDR_VAR 0 2
25561: PUSH
25562: LD_INT 0
25564: ST_TO_ADDR
// side := GetSide ( unit ) ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 255
25579: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25580: LD_ADDR_VAR 0 4
25584: PUSH
25585: LD_VAR 0 1
25589: PPUSH
25590: CALL_OW 248
25594: ST_TO_ADDR
// case nat of 1 :
25595: LD_VAR 0 4
25599: PUSH
25600: LD_INT 1
25602: DOUBLE
25603: EQUAL
25604: IFTRUE 25608
25606: GO 25619
25608: POP
// tech := tech_lassight ; 2 :
25609: LD_ADDR_VAR 0 5
25613: PUSH
25614: LD_INT 12
25616: ST_TO_ADDR
25617: GO 25658
25619: LD_INT 2
25621: DOUBLE
25622: EQUAL
25623: IFTRUE 25627
25625: GO 25638
25627: POP
// tech := tech_mortar ; 3 :
25628: LD_ADDR_VAR 0 5
25632: PUSH
25633: LD_INT 41
25635: ST_TO_ADDR
25636: GO 25658
25638: LD_INT 3
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25657
25646: POP
// tech := tech_bazooka ; end ;
25647: LD_ADDR_VAR 0 5
25651: PUSH
25652: LD_INT 44
25654: ST_TO_ADDR
25655: GO 25658
25657: POP
// if Researched ( side , tech ) then
25658: LD_VAR 0 3
25662: PPUSH
25663: LD_VAR 0 5
25667: PPUSH
25668: CALL_OW 325
25672: IFFALSE 25699
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25674: LD_ADDR_VAR 0 2
25678: PUSH
25679: LD_INT 5
25681: PUSH
25682: LD_INT 8
25684: PUSH
25685: LD_INT 9
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: PUSH
25693: LD_VAR 0 4
25697: ARRAY
25698: ST_TO_ADDR
// end ;
25699: LD_VAR 0 2
25703: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25704: LD_INT 0
25706: PPUSH
25707: PPUSH
25708: PPUSH
// if not mines then
25709: LD_VAR 0 2
25713: NOT
25714: IFFALSE 25718
// exit ;
25716: GO 25862
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25718: LD_ADDR_VAR 0 5
25722: PUSH
25723: LD_INT 81
25725: PUSH
25726: LD_VAR 0 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: LD_INT 21
25740: PUSH
25741: LD_INT 3
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PPUSH
25756: CALL_OW 69
25760: ST_TO_ADDR
// for i in mines do
25761: LD_ADDR_VAR 0 4
25765: PUSH
25766: LD_VAR 0 2
25770: PUSH
25771: FOR_IN
25772: IFFALSE 25860
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25774: LD_VAR 0 4
25778: PUSH
25779: LD_INT 1
25781: ARRAY
25782: PPUSH
25783: LD_VAR 0 4
25787: PUSH
25788: LD_INT 2
25790: ARRAY
25791: PPUSH
25792: CALL_OW 458
25796: NOT
25797: IFFALSE 25801
// continue ;
25799: GO 25771
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25801: LD_VAR 0 4
25805: PUSH
25806: LD_INT 1
25808: ARRAY
25809: PPUSH
25810: LD_VAR 0 4
25814: PUSH
25815: LD_INT 2
25817: ARRAY
25818: PPUSH
25819: CALL_OW 428
25823: PUSH
25824: LD_VAR 0 5
25828: IN
25829: IFFALSE 25858
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25831: LD_VAR 0 4
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: PPUSH
25840: LD_VAR 0 4
25844: PUSH
25845: LD_INT 2
25847: ARRAY
25848: PPUSH
25849: LD_VAR 0 1
25853: PPUSH
25854: CALL_OW 456
// end ;
25858: GO 25771
25860: POP
25861: POP
// end ;
25862: LD_VAR 0 3
25866: RET
// export function Count ( array ) ; var i ; begin
25867: LD_INT 0
25869: PPUSH
25870: PPUSH
// result := 0 ;
25871: LD_ADDR_VAR 0 2
25875: PUSH
25876: LD_INT 0
25878: ST_TO_ADDR
// for i in array do
25879: LD_ADDR_VAR 0 3
25883: PUSH
25884: LD_VAR 0 1
25888: PUSH
25889: FOR_IN
25890: IFFALSE 25914
// if i then
25892: LD_VAR 0 3
25896: IFFALSE 25912
// result := result + 1 ;
25898: LD_ADDR_VAR 0 2
25902: PUSH
25903: LD_VAR 0 2
25907: PUSH
25908: LD_INT 1
25910: PLUS
25911: ST_TO_ADDR
25912: GO 25889
25914: POP
25915: POP
// end ;
25916: LD_VAR 0 2
25920: RET
// export function IsEmpty ( building ) ; begin
25921: LD_INT 0
25923: PPUSH
// if not building then
25924: LD_VAR 0 1
25928: NOT
25929: IFFALSE 25933
// exit ;
25931: GO 25976
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25933: LD_ADDR_VAR 0 2
25937: PUSH
25938: LD_VAR 0 1
25942: PUSH
25943: LD_INT 22
25945: PUSH
25946: LD_VAR 0 1
25950: PPUSH
25951: CALL_OW 255
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 58
25962: PUSH
25963: EMPTY
25964: LIST
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PPUSH
25970: CALL_OW 69
25974: IN
25975: ST_TO_ADDR
// end ;
25976: LD_VAR 0 2
25980: RET
// export function IsNotFull ( building ) ; begin
25981: LD_INT 0
25983: PPUSH
// if not building then
25984: LD_VAR 0 1
25988: NOT
25989: IFFALSE 25993
// exit ;
25991: GO 26012
// result := UnitsInside ( building ) < 6 ;
25993: LD_ADDR_VAR 0 2
25997: PUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 313
26007: PUSH
26008: LD_INT 6
26010: LESS
26011: ST_TO_ADDR
// end ;
26012: LD_VAR 0 2
26016: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26017: LD_INT 0
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
// tmp := [ ] ;
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: EMPTY
26029: ST_TO_ADDR
// list := [ ] ;
26030: LD_ADDR_VAR 0 5
26034: PUSH
26035: EMPTY
26036: ST_TO_ADDR
// for i = 16 to 25 do
26037: LD_ADDR_VAR 0 4
26041: PUSH
26042: DOUBLE
26043: LD_INT 16
26045: DEC
26046: ST_TO_ADDR
26047: LD_INT 25
26049: PUSH
26050: FOR_TO
26051: IFFALSE 26124
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26053: LD_ADDR_VAR 0 3
26057: PUSH
26058: LD_VAR 0 3
26062: PUSH
26063: LD_INT 22
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 255
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 91
26082: PUSH
26083: LD_VAR 0 1
26087: PUSH
26088: LD_INT 6
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 30
26098: PUSH
26099: LD_VAR 0 4
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: LIST
26112: PUSH
26113: EMPTY
26114: LIST
26115: PPUSH
26116: CALL_OW 69
26120: ADD
26121: ST_TO_ADDR
26122: GO 26050
26124: POP
26125: POP
// for i = 1 to tmp do
26126: LD_ADDR_VAR 0 4
26130: PUSH
26131: DOUBLE
26132: LD_INT 1
26134: DEC
26135: ST_TO_ADDR
26136: LD_VAR 0 3
26140: PUSH
26141: FOR_TO
26142: IFFALSE 26230
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26144: LD_ADDR_VAR 0 5
26148: PUSH
26149: LD_VAR 0 5
26153: PUSH
26154: LD_VAR 0 3
26158: PUSH
26159: LD_VAR 0 4
26163: ARRAY
26164: PPUSH
26165: CALL_OW 266
26169: PUSH
26170: LD_VAR 0 3
26174: PUSH
26175: LD_VAR 0 4
26179: ARRAY
26180: PPUSH
26181: CALL_OW 250
26185: PUSH
26186: LD_VAR 0 3
26190: PUSH
26191: LD_VAR 0 4
26195: ARRAY
26196: PPUSH
26197: CALL_OW 251
26201: PUSH
26202: LD_VAR 0 3
26206: PUSH
26207: LD_VAR 0 4
26211: ARRAY
26212: PPUSH
26213: CALL_OW 254
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: ADD
26227: ST_TO_ADDR
26228: GO 26141
26230: POP
26231: POP
// result := list ;
26232: LD_ADDR_VAR 0 2
26236: PUSH
26237: LD_VAR 0 5
26241: ST_TO_ADDR
// end ;
26242: LD_VAR 0 2
26246: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26247: LD_INT 0
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
// if not factory then
26256: LD_VAR 0 1
26260: NOT
26261: IFFALSE 26265
// exit ;
26263: GO 26858
// if control = control_apeman then
26265: LD_VAR 0 4
26269: PUSH
26270: LD_INT 5
26272: EQUAL
26273: IFFALSE 26382
// begin tmp := UnitsInside ( factory ) ;
26275: LD_ADDR_VAR 0 8
26279: PUSH
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL_OW 313
26289: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26290: LD_VAR 0 8
26294: PPUSH
26295: LD_INT 25
26297: PUSH
26298: LD_INT 12
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PPUSH
26305: CALL_OW 72
26309: NOT
26310: IFFALSE 26320
// control := control_manual ;
26312: LD_ADDR_VAR 0 4
26316: PUSH
26317: LD_INT 1
26319: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26320: LD_ADDR_VAR 0 8
26324: PUSH
26325: LD_VAR 0 1
26329: PPUSH
26330: CALL 26017 0 1
26334: ST_TO_ADDR
// if tmp then
26335: LD_VAR 0 8
26339: IFFALSE 26382
// begin for i in tmp do
26341: LD_ADDR_VAR 0 7
26345: PUSH
26346: LD_VAR 0 8
26350: PUSH
26351: FOR_IN
26352: IFFALSE 26380
// if i [ 1 ] = b_ext_radio then
26354: LD_VAR 0 7
26358: PUSH
26359: LD_INT 1
26361: ARRAY
26362: PUSH
26363: LD_INT 22
26365: EQUAL
26366: IFFALSE 26378
// begin control := control_remote ;
26368: LD_ADDR_VAR 0 4
26372: PUSH
26373: LD_INT 2
26375: ST_TO_ADDR
// break ;
26376: GO 26380
// end ;
26378: GO 26351
26380: POP
26381: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26382: LD_VAR 0 1
26386: PPUSH
26387: LD_VAR 0 2
26391: PPUSH
26392: LD_VAR 0 3
26396: PPUSH
26397: LD_VAR 0 4
26401: PPUSH
26402: LD_VAR 0 5
26406: PPUSH
26407: CALL_OW 448
26411: IFFALSE 26446
// begin result := [ chassis , engine , control , weapon ] ;
26413: LD_ADDR_VAR 0 6
26417: PUSH
26418: LD_VAR 0 2
26422: PUSH
26423: LD_VAR 0 3
26427: PUSH
26428: LD_VAR 0 4
26432: PUSH
26433: LD_VAR 0 5
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: ST_TO_ADDR
// exit ;
26444: GO 26858
// end ; _chassis := AvailableChassisList ( factory ) ;
26446: LD_ADDR_VAR 0 9
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 475
26460: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26461: LD_ADDR_VAR 0 11
26465: PUSH
26466: LD_VAR 0 1
26470: PPUSH
26471: CALL_OW 476
26475: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26476: LD_ADDR_VAR 0 12
26480: PUSH
26481: LD_VAR 0 1
26485: PPUSH
26486: CALL_OW 477
26490: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26491: LD_ADDR_VAR 0 10
26495: PUSH
26496: LD_VAR 0 1
26500: PPUSH
26501: CALL_OW 478
26505: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26506: LD_VAR 0 9
26510: NOT
26511: PUSH
26512: LD_VAR 0 11
26516: NOT
26517: OR
26518: PUSH
26519: LD_VAR 0 12
26523: NOT
26524: OR
26525: PUSH
26526: LD_VAR 0 10
26530: NOT
26531: OR
26532: IFFALSE 26567
// begin result := [ chassis , engine , control , weapon ] ;
26534: LD_ADDR_VAR 0 6
26538: PUSH
26539: LD_VAR 0 2
26543: PUSH
26544: LD_VAR 0 3
26548: PUSH
26549: LD_VAR 0 4
26553: PUSH
26554: LD_VAR 0 5
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: ST_TO_ADDR
// exit ;
26565: GO 26858
// end ; if not chassis in _chassis then
26567: LD_VAR 0 2
26571: PUSH
26572: LD_VAR 0 9
26576: IN
26577: NOT
26578: IFFALSE 26604
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26580: LD_ADDR_VAR 0 2
26584: PUSH
26585: LD_VAR 0 9
26589: PUSH
26590: LD_INT 1
26592: PPUSH
26593: LD_VAR 0 9
26597: PPUSH
26598: CALL_OW 12
26602: ARRAY
26603: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26604: LD_VAR 0 2
26608: PPUSH
26609: LD_VAR 0 3
26613: PPUSH
26614: CALL 26863 0 2
26618: NOT
26619: IFFALSE 26678
// repeat engine := _engine [ 1 ] ;
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_VAR 0 11
26630: PUSH
26631: LD_INT 1
26633: ARRAY
26634: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26635: LD_ADDR_VAR 0 11
26639: PUSH
26640: LD_VAR 0 11
26644: PPUSH
26645: LD_INT 1
26647: PPUSH
26648: CALL_OW 3
26652: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26653: LD_VAR 0 2
26657: PPUSH
26658: LD_VAR 0 3
26662: PPUSH
26663: CALL 26863 0 2
26667: PUSH
26668: LD_VAR 0 11
26672: PUSH
26673: EMPTY
26674: EQUAL
26675: OR
26676: IFFALSE 26621
// if not control in _control then
26678: LD_VAR 0 4
26682: PUSH
26683: LD_VAR 0 12
26687: IN
26688: NOT
26689: IFFALSE 26715
// control := _control [ rand ( 1 , _control ) ] ;
26691: LD_ADDR_VAR 0 4
26695: PUSH
26696: LD_VAR 0 12
26700: PUSH
26701: LD_INT 1
26703: PPUSH
26704: LD_VAR 0 12
26708: PPUSH
26709: CALL_OW 12
26713: ARRAY
26714: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26715: LD_VAR 0 2
26719: PPUSH
26720: LD_VAR 0 5
26724: PPUSH
26725: CALL 27083 0 2
26729: NOT
26730: IFFALSE 26789
// repeat weapon := _weapon [ 1 ] ;
26732: LD_ADDR_VAR 0 5
26736: PUSH
26737: LD_VAR 0 10
26741: PUSH
26742: LD_INT 1
26744: ARRAY
26745: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26746: LD_ADDR_VAR 0 10
26750: PUSH
26751: LD_VAR 0 10
26755: PPUSH
26756: LD_INT 1
26758: PPUSH
26759: CALL_OW 3
26763: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26764: LD_VAR 0 2
26768: PPUSH
26769: LD_VAR 0 5
26773: PPUSH
26774: CALL 27083 0 2
26778: PUSH
26779: LD_VAR 0 10
26783: PUSH
26784: EMPTY
26785: EQUAL
26786: OR
26787: IFFALSE 26732
// result := [ ] ;
26789: LD_ADDR_VAR 0 6
26793: PUSH
26794: EMPTY
26795: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26796: LD_VAR 0 1
26800: PPUSH
26801: LD_VAR 0 2
26805: PPUSH
26806: LD_VAR 0 3
26810: PPUSH
26811: LD_VAR 0 4
26815: PPUSH
26816: LD_VAR 0 5
26820: PPUSH
26821: CALL_OW 448
26825: IFFALSE 26858
// result := [ chassis , engine , control , weapon ] ;
26827: LD_ADDR_VAR 0 6
26831: PUSH
26832: LD_VAR 0 2
26836: PUSH
26837: LD_VAR 0 3
26841: PUSH
26842: LD_VAR 0 4
26846: PUSH
26847: LD_VAR 0 5
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: ST_TO_ADDR
// end ;
26858: LD_VAR 0 6
26862: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26863: LD_INT 0
26865: PPUSH
// if not chassis or not engine then
26866: LD_VAR 0 1
26870: NOT
26871: PUSH
26872: LD_VAR 0 2
26876: NOT
26877: OR
26878: IFFALSE 26882
// exit ;
26880: GO 27078
// case engine of engine_solar :
26882: LD_VAR 0 2
26886: PUSH
26887: LD_INT 2
26889: DOUBLE
26890: EQUAL
26891: IFTRUE 26895
26893: GO 26933
26895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26896: LD_ADDR_VAR 0 3
26900: PUSH
26901: LD_INT 11
26903: PUSH
26904: LD_INT 12
26906: PUSH
26907: LD_INT 13
26909: PUSH
26910: LD_INT 14
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: ST_TO_ADDR
26931: GO 27062
26933: LD_INT 1
26935: DOUBLE
26936: EQUAL
26937: IFTRUE 26941
26939: GO 27003
26941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26942: LD_ADDR_VAR 0 3
26946: PUSH
26947: LD_INT 11
26949: PUSH
26950: LD_INT 12
26952: PUSH
26953: LD_INT 13
26955: PUSH
26956: LD_INT 14
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: LD_INT 3
26967: PUSH
26968: LD_INT 4
26970: PUSH
26971: LD_INT 5
26973: PUSH
26974: LD_INT 21
26976: PUSH
26977: LD_INT 23
26979: PUSH
26980: LD_INT 22
26982: PUSH
26983: LD_INT 24
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: ST_TO_ADDR
27001: GO 27062
27003: LD_INT 3
27005: DOUBLE
27006: EQUAL
27007: IFTRUE 27011
27009: GO 27061
27011: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27012: LD_ADDR_VAR 0 3
27016: PUSH
27017: LD_INT 13
27019: PUSH
27020: LD_INT 14
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: LD_INT 4
27031: PUSH
27032: LD_INT 5
27034: PUSH
27035: LD_INT 21
27037: PUSH
27038: LD_INT 22
27040: PUSH
27041: LD_INT 23
27043: PUSH
27044: LD_INT 24
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: ST_TO_ADDR
27059: GO 27062
27061: POP
// result := ( chassis in result ) ;
27062: LD_ADDR_VAR 0 3
27066: PUSH
27067: LD_VAR 0 1
27071: PUSH
27072: LD_VAR 0 3
27076: IN
27077: ST_TO_ADDR
// end ;
27078: LD_VAR 0 3
27082: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27083: LD_INT 0
27085: PPUSH
// if not chassis or not weapon then
27086: LD_VAR 0 1
27090: NOT
27091: PUSH
27092: LD_VAR 0 2
27096: NOT
27097: OR
27098: IFFALSE 27102
// exit ;
27100: GO 28128
// case weapon of us_machine_gun :
27102: LD_VAR 0 2
27106: PUSH
27107: LD_INT 2
27109: DOUBLE
27110: EQUAL
27111: IFTRUE 27115
27113: GO 27145
27115: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27116: LD_ADDR_VAR 0 3
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: LD_INT 4
27132: PUSH
27133: LD_INT 5
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: ST_TO_ADDR
27143: GO 28112
27145: LD_INT 3
27147: DOUBLE
27148: EQUAL
27149: IFTRUE 27153
27151: GO 27183
27153: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27154: LD_ADDR_VAR 0 3
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: LD_INT 3
27167: PUSH
27168: LD_INT 4
27170: PUSH
27171: LD_INT 5
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: ST_TO_ADDR
27181: GO 28112
27183: LD_INT 11
27185: DOUBLE
27186: EQUAL
27187: IFTRUE 27191
27189: GO 27221
27191: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27192: LD_ADDR_VAR 0 3
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: LD_INT 3
27205: PUSH
27206: LD_INT 4
27208: PUSH
27209: LD_INT 5
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: ST_TO_ADDR
27219: GO 28112
27221: LD_INT 4
27223: DOUBLE
27224: EQUAL
27225: IFTRUE 27229
27227: GO 27255
27229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: LD_INT 4
27243: PUSH
27244: LD_INT 5
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: ST_TO_ADDR
27253: GO 28112
27255: LD_INT 5
27257: DOUBLE
27258: EQUAL
27259: IFTRUE 27263
27261: GO 27289
27263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27264: LD_ADDR_VAR 0 3
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: LD_INT 3
27274: PUSH
27275: LD_INT 4
27277: PUSH
27278: LD_INT 5
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
27287: GO 28112
27289: LD_INT 9
27291: DOUBLE
27292: EQUAL
27293: IFTRUE 27297
27295: GO 27323
27297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27298: LD_ADDR_VAR 0 3
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: LD_INT 3
27308: PUSH
27309: LD_INT 4
27311: PUSH
27312: LD_INT 5
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: ST_TO_ADDR
27321: GO 28112
27323: LD_INT 7
27325: DOUBLE
27326: EQUAL
27327: IFTRUE 27331
27329: GO 27357
27331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27332: LD_ADDR_VAR 0 3
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: LD_INT 3
27342: PUSH
27343: LD_INT 4
27345: PUSH
27346: LD_INT 5
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
27355: GO 28112
27357: LD_INT 12
27359: DOUBLE
27360: EQUAL
27361: IFTRUE 27365
27363: GO 27391
27365: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27366: LD_ADDR_VAR 0 3
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 3
27376: PUSH
27377: LD_INT 4
27379: PUSH
27380: LD_INT 5
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: ST_TO_ADDR
27389: GO 28112
27391: LD_INT 13
27393: DOUBLE
27394: EQUAL
27395: IFTRUE 27399
27397: GO 27425
27399: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27400: LD_ADDR_VAR 0 3
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: LD_INT 3
27410: PUSH
27411: LD_INT 4
27413: PUSH
27414: LD_INT 5
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: ST_TO_ADDR
27423: GO 28112
27425: LD_INT 14
27427: DOUBLE
27428: EQUAL
27429: IFTRUE 27433
27431: GO 27451
27433: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: LD_INT 4
27441: PUSH
27442: LD_INT 5
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: ST_TO_ADDR
27449: GO 28112
27451: LD_INT 6
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 27477
27459: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27460: LD_ADDR_VAR 0 3
27464: PUSH
27465: LD_INT 4
27467: PUSH
27468: LD_INT 5
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: ST_TO_ADDR
27475: GO 28112
27477: LD_INT 10
27479: DOUBLE
27480: EQUAL
27481: IFTRUE 27485
27483: GO 27503
27485: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27486: LD_ADDR_VAR 0 3
27490: PUSH
27491: LD_INT 4
27493: PUSH
27494: LD_INT 5
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: ST_TO_ADDR
27501: GO 28112
27503: LD_INT 22
27505: DOUBLE
27506: EQUAL
27507: IFTRUE 27511
27509: GO 27537
27511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: LD_INT 11
27519: PUSH
27520: LD_INT 12
27522: PUSH
27523: LD_INT 13
27525: PUSH
27526: LD_INT 14
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: ST_TO_ADDR
27535: GO 28112
27537: LD_INT 23
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27545
27543: GO 27571
27545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27546: LD_ADDR_VAR 0 3
27550: PUSH
27551: LD_INT 11
27553: PUSH
27554: LD_INT 12
27556: PUSH
27557: LD_INT 13
27559: PUSH
27560: LD_INT 14
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: ST_TO_ADDR
27569: GO 28112
27571: LD_INT 24
27573: DOUBLE
27574: EQUAL
27575: IFTRUE 27579
27577: GO 27605
27579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27580: LD_ADDR_VAR 0 3
27584: PUSH
27585: LD_INT 11
27587: PUSH
27588: LD_INT 12
27590: PUSH
27591: LD_INT 13
27593: PUSH
27594: LD_INT 14
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: ST_TO_ADDR
27603: GO 28112
27605: LD_INT 30
27607: DOUBLE
27608: EQUAL
27609: IFTRUE 27613
27611: GO 27639
27613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27614: LD_ADDR_VAR 0 3
27618: PUSH
27619: LD_INT 11
27621: PUSH
27622: LD_INT 12
27624: PUSH
27625: LD_INT 13
27627: PUSH
27628: LD_INT 14
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
27637: GO 28112
27639: LD_INT 25
27641: DOUBLE
27642: EQUAL
27643: IFTRUE 27647
27645: GO 27665
27647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27648: LD_ADDR_VAR 0 3
27652: PUSH
27653: LD_INT 13
27655: PUSH
27656: LD_INT 14
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: ST_TO_ADDR
27663: GO 28112
27665: LD_INT 27
27667: DOUBLE
27668: EQUAL
27669: IFTRUE 27673
27671: GO 27691
27673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27674: LD_ADDR_VAR 0 3
27678: PUSH
27679: LD_INT 13
27681: PUSH
27682: LD_INT 14
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: ST_TO_ADDR
27689: GO 28112
27691: LD_INT 28
27693: DOUBLE
27694: EQUAL
27695: IFTRUE 27699
27697: GO 27717
27699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27700: LD_ADDR_VAR 0 3
27704: PUSH
27705: LD_INT 13
27707: PUSH
27708: LD_INT 14
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: ST_TO_ADDR
27715: GO 28112
27717: LD_INT 29
27719: DOUBLE
27720: EQUAL
27721: IFTRUE 27725
27723: GO 27743
27725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27726: LD_ADDR_VAR 0 3
27730: PUSH
27731: LD_INT 13
27733: PUSH
27734: LD_INT 14
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: ST_TO_ADDR
27741: GO 28112
27743: LD_INT 31
27745: DOUBLE
27746: EQUAL
27747: IFTRUE 27751
27749: GO 27769
27751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27752: LD_ADDR_VAR 0 3
27756: PUSH
27757: LD_INT 13
27759: PUSH
27760: LD_INT 14
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: ST_TO_ADDR
27767: GO 28112
27769: LD_INT 26
27771: DOUBLE
27772: EQUAL
27773: IFTRUE 27777
27775: GO 27795
27777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27778: LD_ADDR_VAR 0 3
27782: PUSH
27783: LD_INT 13
27785: PUSH
27786: LD_INT 14
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: ST_TO_ADDR
27793: GO 28112
27795: LD_INT 42
27797: DOUBLE
27798: EQUAL
27799: IFTRUE 27803
27801: GO 27829
27803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27804: LD_ADDR_VAR 0 3
27808: PUSH
27809: LD_INT 21
27811: PUSH
27812: LD_INT 22
27814: PUSH
27815: LD_INT 23
27817: PUSH
27818: LD_INT 24
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: ST_TO_ADDR
27827: GO 28112
27829: LD_INT 43
27831: DOUBLE
27832: EQUAL
27833: IFTRUE 27837
27835: GO 27863
27837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27838: LD_ADDR_VAR 0 3
27842: PUSH
27843: LD_INT 21
27845: PUSH
27846: LD_INT 22
27848: PUSH
27849: LD_INT 23
27851: PUSH
27852: LD_INT 24
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: ST_TO_ADDR
27861: GO 28112
27863: LD_INT 44
27865: DOUBLE
27866: EQUAL
27867: IFTRUE 27871
27869: GO 27897
27871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27872: LD_ADDR_VAR 0 3
27876: PUSH
27877: LD_INT 21
27879: PUSH
27880: LD_INT 22
27882: PUSH
27883: LD_INT 23
27885: PUSH
27886: LD_INT 24
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: ST_TO_ADDR
27895: GO 28112
27897: LD_INT 45
27899: DOUBLE
27900: EQUAL
27901: IFTRUE 27905
27903: GO 27931
27905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27906: LD_ADDR_VAR 0 3
27910: PUSH
27911: LD_INT 21
27913: PUSH
27914: LD_INT 22
27916: PUSH
27917: LD_INT 23
27919: PUSH
27920: LD_INT 24
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: ST_TO_ADDR
27929: GO 28112
27931: LD_INT 49
27933: DOUBLE
27934: EQUAL
27935: IFTRUE 27939
27937: GO 27965
27939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27940: LD_ADDR_VAR 0 3
27944: PUSH
27945: LD_INT 21
27947: PUSH
27948: LD_INT 22
27950: PUSH
27951: LD_INT 23
27953: PUSH
27954: LD_INT 24
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: ST_TO_ADDR
27963: GO 28112
27965: LD_INT 51
27967: DOUBLE
27968: EQUAL
27969: IFTRUE 27973
27971: GO 27999
27973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27974: LD_ADDR_VAR 0 3
27978: PUSH
27979: LD_INT 21
27981: PUSH
27982: LD_INT 22
27984: PUSH
27985: LD_INT 23
27987: PUSH
27988: LD_INT 24
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: ST_TO_ADDR
27997: GO 28112
27999: LD_INT 52
28001: DOUBLE
28002: EQUAL
28003: IFTRUE 28007
28005: GO 28033
28007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28008: LD_ADDR_VAR 0 3
28012: PUSH
28013: LD_INT 21
28015: PUSH
28016: LD_INT 22
28018: PUSH
28019: LD_INT 23
28021: PUSH
28022: LD_INT 24
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: ST_TO_ADDR
28031: GO 28112
28033: LD_INT 53
28035: DOUBLE
28036: EQUAL
28037: IFTRUE 28041
28039: GO 28059
28041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28042: LD_ADDR_VAR 0 3
28046: PUSH
28047: LD_INT 23
28049: PUSH
28050: LD_INT 24
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: ST_TO_ADDR
28057: GO 28112
28059: LD_INT 46
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28085
28067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_INT 23
28075: PUSH
28076: LD_INT 24
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: ST_TO_ADDR
28083: GO 28112
28085: LD_INT 47
28087: DOUBLE
28088: EQUAL
28089: IFTRUE 28093
28091: GO 28111
28093: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28094: LD_ADDR_VAR 0 3
28098: PUSH
28099: LD_INT 23
28101: PUSH
28102: LD_INT 24
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: ST_TO_ADDR
28109: GO 28112
28111: POP
// result := ( chassis in result ) ;
28112: LD_ADDR_VAR 0 3
28116: PUSH
28117: LD_VAR 0 1
28121: PUSH
28122: LD_VAR 0 3
28126: IN
28127: ST_TO_ADDR
// end ;
28128: LD_VAR 0 3
28132: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28133: LD_INT 0
28135: PPUSH
28136: PPUSH
28137: PPUSH
28138: PPUSH
28139: PPUSH
28140: PPUSH
28141: PPUSH
// result := array ;
28142: LD_ADDR_VAR 0 5
28146: PUSH
28147: LD_VAR 0 1
28151: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28152: LD_VAR 0 1
28156: NOT
28157: PUSH
28158: LD_VAR 0 2
28162: NOT
28163: OR
28164: PUSH
28165: LD_VAR 0 3
28169: NOT
28170: OR
28171: PUSH
28172: LD_VAR 0 2
28176: PUSH
28177: LD_VAR 0 1
28181: GREATER
28182: OR
28183: PUSH
28184: LD_VAR 0 3
28188: PUSH
28189: LD_VAR 0 1
28193: GREATER
28194: OR
28195: IFFALSE 28199
// exit ;
28197: GO 28495
// if direction then
28199: LD_VAR 0 4
28203: IFFALSE 28267
// begin d := 1 ;
28205: LD_ADDR_VAR 0 9
28209: PUSH
28210: LD_INT 1
28212: ST_TO_ADDR
// if i_from > i_to then
28213: LD_VAR 0 2
28217: PUSH
28218: LD_VAR 0 3
28222: GREATER
28223: IFFALSE 28249
// length := ( array - i_from ) + i_to else
28225: LD_ADDR_VAR 0 11
28229: PUSH
28230: LD_VAR 0 1
28234: PUSH
28235: LD_VAR 0 2
28239: MINUS
28240: PUSH
28241: LD_VAR 0 3
28245: PLUS
28246: ST_TO_ADDR
28247: GO 28265
// length := i_to - i_from ;
28249: LD_ADDR_VAR 0 11
28253: PUSH
28254: LD_VAR 0 3
28258: PUSH
28259: LD_VAR 0 2
28263: MINUS
28264: ST_TO_ADDR
// end else
28265: GO 28328
// begin d := - 1 ;
28267: LD_ADDR_VAR 0 9
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: ST_TO_ADDR
// if i_from > i_to then
28276: LD_VAR 0 2
28280: PUSH
28281: LD_VAR 0 3
28285: GREATER
28286: IFFALSE 28306
// length := i_from - i_to else
28288: LD_ADDR_VAR 0 11
28292: PUSH
28293: LD_VAR 0 2
28297: PUSH
28298: LD_VAR 0 3
28302: MINUS
28303: ST_TO_ADDR
28304: GO 28328
// length := ( array - i_to ) + i_from ;
28306: LD_ADDR_VAR 0 11
28310: PUSH
28311: LD_VAR 0 1
28315: PUSH
28316: LD_VAR 0 3
28320: MINUS
28321: PUSH
28322: LD_VAR 0 2
28326: PLUS
28327: ST_TO_ADDR
// end ; if not length then
28328: LD_VAR 0 11
28332: NOT
28333: IFFALSE 28337
// exit ;
28335: GO 28495
// tmp := array ;
28337: LD_ADDR_VAR 0 10
28341: PUSH
28342: LD_VAR 0 1
28346: ST_TO_ADDR
// for i = 1 to length do
28347: LD_ADDR_VAR 0 6
28351: PUSH
28352: DOUBLE
28353: LD_INT 1
28355: DEC
28356: ST_TO_ADDR
28357: LD_VAR 0 11
28361: PUSH
28362: FOR_TO
28363: IFFALSE 28483
// begin for j = 1 to array do
28365: LD_ADDR_VAR 0 7
28369: PUSH
28370: DOUBLE
28371: LD_INT 1
28373: DEC
28374: ST_TO_ADDR
28375: LD_VAR 0 1
28379: PUSH
28380: FOR_TO
28381: IFFALSE 28469
// begin k := j + d ;
28383: LD_ADDR_VAR 0 8
28387: PUSH
28388: LD_VAR 0 7
28392: PUSH
28393: LD_VAR 0 9
28397: PLUS
28398: ST_TO_ADDR
// if k > array then
28399: LD_VAR 0 8
28403: PUSH
28404: LD_VAR 0 1
28408: GREATER
28409: IFFALSE 28419
// k := 1 ;
28411: LD_ADDR_VAR 0 8
28415: PUSH
28416: LD_INT 1
28418: ST_TO_ADDR
// if not k then
28419: LD_VAR 0 8
28423: NOT
28424: IFFALSE 28436
// k := array ;
28426: LD_ADDR_VAR 0 8
28430: PUSH
28431: LD_VAR 0 1
28435: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28436: LD_ADDR_VAR 0 10
28440: PUSH
28441: LD_VAR 0 10
28445: PPUSH
28446: LD_VAR 0 8
28450: PPUSH
28451: LD_VAR 0 1
28455: PUSH
28456: LD_VAR 0 7
28460: ARRAY
28461: PPUSH
28462: CALL_OW 1
28466: ST_TO_ADDR
// end ;
28467: GO 28380
28469: POP
28470: POP
// array := tmp ;
28471: LD_ADDR_VAR 0 1
28475: PUSH
28476: LD_VAR 0 10
28480: ST_TO_ADDR
// end ;
28481: GO 28362
28483: POP
28484: POP
// result := array ;
28485: LD_ADDR_VAR 0 5
28489: PUSH
28490: LD_VAR 0 1
28494: ST_TO_ADDR
// end ;
28495: LD_VAR 0 5
28499: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28500: LD_INT 0
28502: PPUSH
28503: PPUSH
// result := 0 ;
28504: LD_ADDR_VAR 0 3
28508: PUSH
28509: LD_INT 0
28511: ST_TO_ADDR
// if not array or not value in array then
28512: LD_VAR 0 1
28516: NOT
28517: PUSH
28518: LD_VAR 0 2
28522: PUSH
28523: LD_VAR 0 1
28527: IN
28528: NOT
28529: OR
28530: IFFALSE 28534
// exit ;
28532: GO 28588
// for i = 1 to array do
28534: LD_ADDR_VAR 0 4
28538: PUSH
28539: DOUBLE
28540: LD_INT 1
28542: DEC
28543: ST_TO_ADDR
28544: LD_VAR 0 1
28548: PUSH
28549: FOR_TO
28550: IFFALSE 28586
// if value = array [ i ] then
28552: LD_VAR 0 2
28556: PUSH
28557: LD_VAR 0 1
28561: PUSH
28562: LD_VAR 0 4
28566: ARRAY
28567: EQUAL
28568: IFFALSE 28584
// begin result := i ;
28570: LD_ADDR_VAR 0 3
28574: PUSH
28575: LD_VAR 0 4
28579: ST_TO_ADDR
// exit ;
28580: POP
28581: POP
28582: GO 28588
// end ;
28584: GO 28549
28586: POP
28587: POP
// end ;
28588: LD_VAR 0 3
28592: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28593: LD_INT 0
28595: PPUSH
// vc_chassis := chassis ;
28596: LD_ADDR_OWVAR 37
28600: PUSH
28601: LD_VAR 0 1
28605: ST_TO_ADDR
// vc_engine := engine ;
28606: LD_ADDR_OWVAR 39
28610: PUSH
28611: LD_VAR 0 2
28615: ST_TO_ADDR
// vc_control := control ;
28616: LD_ADDR_OWVAR 38
28620: PUSH
28621: LD_VAR 0 3
28625: ST_TO_ADDR
// vc_weapon := weapon ;
28626: LD_ADDR_OWVAR 40
28630: PUSH
28631: LD_VAR 0 4
28635: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28636: LD_ADDR_OWVAR 41
28640: PUSH
28641: LD_VAR 0 5
28645: ST_TO_ADDR
// end ;
28646: LD_VAR 0 6
28650: RET
// export function WantPlant ( unit ) ; var task ; begin
28651: LD_INT 0
28653: PPUSH
28654: PPUSH
// result := false ;
28655: LD_ADDR_VAR 0 2
28659: PUSH
28660: LD_INT 0
28662: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28663: LD_ADDR_VAR 0 3
28667: PUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 437
28677: ST_TO_ADDR
// if task then
28678: LD_VAR 0 3
28682: IFFALSE 28710
// if task [ 1 ] [ 1 ] = p then
28684: LD_VAR 0 3
28688: PUSH
28689: LD_INT 1
28691: ARRAY
28692: PUSH
28693: LD_INT 1
28695: ARRAY
28696: PUSH
28697: LD_STRING p
28699: EQUAL
28700: IFFALSE 28710
// result := true ;
28702: LD_ADDR_VAR 0 2
28706: PUSH
28707: LD_INT 1
28709: ST_TO_ADDR
// end ;
28710: LD_VAR 0 2
28714: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28715: LD_INT 0
28717: PPUSH
28718: PPUSH
28719: PPUSH
28720: PPUSH
// if pos < 1 then
28721: LD_VAR 0 2
28725: PUSH
28726: LD_INT 1
28728: LESS
28729: IFFALSE 28733
// exit ;
28731: GO 29036
// if pos = 1 then
28733: LD_VAR 0 2
28737: PUSH
28738: LD_INT 1
28740: EQUAL
28741: IFFALSE 28774
// result := Replace ( arr , pos [ 1 ] , value ) else
28743: LD_ADDR_VAR 0 4
28747: PUSH
28748: LD_VAR 0 1
28752: PPUSH
28753: LD_VAR 0 2
28757: PUSH
28758: LD_INT 1
28760: ARRAY
28761: PPUSH
28762: LD_VAR 0 3
28766: PPUSH
28767: CALL_OW 1
28771: ST_TO_ADDR
28772: GO 29036
// begin tmp := arr ;
28774: LD_ADDR_VAR 0 6
28778: PUSH
28779: LD_VAR 0 1
28783: ST_TO_ADDR
// s_arr := [ tmp ] ;
28784: LD_ADDR_VAR 0 7
28788: PUSH
28789: LD_VAR 0 6
28793: PUSH
28794: EMPTY
28795: LIST
28796: ST_TO_ADDR
// for i = 1 to pos - 1 do
28797: LD_ADDR_VAR 0 5
28801: PUSH
28802: DOUBLE
28803: LD_INT 1
28805: DEC
28806: ST_TO_ADDR
28807: LD_VAR 0 2
28811: PUSH
28812: LD_INT 1
28814: MINUS
28815: PUSH
28816: FOR_TO
28817: IFFALSE 28862
// begin tmp := tmp [ pos [ i ] ] ;
28819: LD_ADDR_VAR 0 6
28823: PUSH
28824: LD_VAR 0 6
28828: PUSH
28829: LD_VAR 0 2
28833: PUSH
28834: LD_VAR 0 5
28838: ARRAY
28839: ARRAY
28840: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28841: LD_ADDR_VAR 0 7
28845: PUSH
28846: LD_VAR 0 7
28850: PUSH
28851: LD_VAR 0 6
28855: PUSH
28856: EMPTY
28857: LIST
28858: ADD
28859: ST_TO_ADDR
// end ;
28860: GO 28816
28862: POP
28863: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28864: LD_ADDR_VAR 0 6
28868: PUSH
28869: LD_VAR 0 6
28873: PPUSH
28874: LD_VAR 0 2
28878: PUSH
28879: LD_VAR 0 2
28883: ARRAY
28884: PPUSH
28885: LD_VAR 0 3
28889: PPUSH
28890: CALL_OW 1
28894: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28895: LD_ADDR_VAR 0 7
28899: PUSH
28900: LD_VAR 0 7
28904: PPUSH
28905: LD_VAR 0 7
28909: PPUSH
28910: LD_VAR 0 6
28914: PPUSH
28915: CALL_OW 1
28919: ST_TO_ADDR
// for i = s_arr downto 2 do
28920: LD_ADDR_VAR 0 5
28924: PUSH
28925: DOUBLE
28926: LD_VAR 0 7
28930: INC
28931: ST_TO_ADDR
28932: LD_INT 2
28934: PUSH
28935: FOR_DOWNTO
28936: IFFALSE 29020
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28938: LD_ADDR_VAR 0 6
28942: PUSH
28943: LD_VAR 0 7
28947: PUSH
28948: LD_VAR 0 5
28952: PUSH
28953: LD_INT 1
28955: MINUS
28956: ARRAY
28957: PPUSH
28958: LD_VAR 0 2
28962: PUSH
28963: LD_VAR 0 5
28967: PUSH
28968: LD_INT 1
28970: MINUS
28971: ARRAY
28972: PPUSH
28973: LD_VAR 0 7
28977: PUSH
28978: LD_VAR 0 5
28982: ARRAY
28983: PPUSH
28984: CALL_OW 1
28988: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28989: LD_ADDR_VAR 0 7
28993: PUSH
28994: LD_VAR 0 7
28998: PPUSH
28999: LD_VAR 0 5
29003: PUSH
29004: LD_INT 1
29006: MINUS
29007: PPUSH
29008: LD_VAR 0 6
29012: PPUSH
29013: CALL_OW 1
29017: ST_TO_ADDR
// end ;
29018: GO 28935
29020: POP
29021: POP
// result := s_arr [ 1 ] ;
29022: LD_ADDR_VAR 0 4
29026: PUSH
29027: LD_VAR 0 7
29031: PUSH
29032: LD_INT 1
29034: ARRAY
29035: ST_TO_ADDR
// end ; end ;
29036: LD_VAR 0 4
29040: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29041: LD_INT 0
29043: PPUSH
29044: PPUSH
// if not list then
29045: LD_VAR 0 1
29049: NOT
29050: IFFALSE 29054
// exit ;
29052: GO 29145
// i := list [ pos1 ] ;
29054: LD_ADDR_VAR 0 5
29058: PUSH
29059: LD_VAR 0 1
29063: PUSH
29064: LD_VAR 0 2
29068: ARRAY
29069: ST_TO_ADDR
// if not i then
29070: LD_VAR 0 5
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29145
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 1
29088: PPUSH
29089: LD_VAR 0 2
29093: PPUSH
29094: LD_VAR 0 1
29098: PUSH
29099: LD_VAR 0 3
29103: ARRAY
29104: PPUSH
29105: CALL_OW 1
29109: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29110: LD_ADDR_VAR 0 1
29114: PUSH
29115: LD_VAR 0 1
29119: PPUSH
29120: LD_VAR 0 3
29124: PPUSH
29125: LD_VAR 0 5
29129: PPUSH
29130: CALL_OW 1
29134: ST_TO_ADDR
// result := list ;
29135: LD_ADDR_VAR 0 4
29139: PUSH
29140: LD_VAR 0 1
29144: ST_TO_ADDR
// end ;
29145: LD_VAR 0 4
29149: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29150: LD_INT 0
29152: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29153: LD_ADDR_VAR 0 5
29157: PUSH
29158: LD_VAR 0 1
29162: PPUSH
29163: CALL_OW 250
29167: PPUSH
29168: LD_VAR 0 1
29172: PPUSH
29173: CALL_OW 251
29177: PPUSH
29178: LD_VAR 0 2
29182: PPUSH
29183: LD_VAR 0 3
29187: PPUSH
29188: LD_VAR 0 4
29192: PPUSH
29193: CALL 29203 0 5
29197: ST_TO_ADDR
// end ;
29198: LD_VAR 0 5
29202: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
29207: PPUSH
29208: PPUSH
// if not list then
29209: LD_VAR 0 3
29213: NOT
29214: IFFALSE 29218
// exit ;
29216: GO 29606
// result := [ ] ;
29218: LD_ADDR_VAR 0 6
29222: PUSH
29223: EMPTY
29224: ST_TO_ADDR
// for i in list do
29225: LD_ADDR_VAR 0 7
29229: PUSH
29230: LD_VAR 0 3
29234: PUSH
29235: FOR_IN
29236: IFFALSE 29438
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29238: LD_ADDR_VAR 0 9
29242: PUSH
29243: LD_VAR 0 7
29247: PPUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: LD_VAR 0 2
29257: PPUSH
29258: CALL_OW 297
29262: ST_TO_ADDR
// if not result then
29263: LD_VAR 0 6
29267: NOT
29268: IFFALSE 29294
// result := [ [ i , tmp ] ] else
29270: LD_ADDR_VAR 0 6
29274: PUSH
29275: LD_VAR 0 7
29279: PUSH
29280: LD_VAR 0 9
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: ST_TO_ADDR
29292: GO 29436
// begin if result [ result ] [ 2 ] < tmp then
29294: LD_VAR 0 6
29298: PUSH
29299: LD_VAR 0 6
29303: ARRAY
29304: PUSH
29305: LD_INT 2
29307: ARRAY
29308: PUSH
29309: LD_VAR 0 9
29313: LESS
29314: IFFALSE 29356
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29316: LD_ADDR_VAR 0 6
29320: PUSH
29321: LD_VAR 0 6
29325: PPUSH
29326: LD_VAR 0 6
29330: PUSH
29331: LD_INT 1
29333: PLUS
29334: PPUSH
29335: LD_VAR 0 7
29339: PUSH
29340: LD_VAR 0 9
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PPUSH
29349: CALL_OW 2
29353: ST_TO_ADDR
29354: GO 29436
// for j = 1 to result do
29356: LD_ADDR_VAR 0 8
29360: PUSH
29361: DOUBLE
29362: LD_INT 1
29364: DEC
29365: ST_TO_ADDR
29366: LD_VAR 0 6
29370: PUSH
29371: FOR_TO
29372: IFFALSE 29434
// begin if tmp < result [ j ] [ 2 ] then
29374: LD_VAR 0 9
29378: PUSH
29379: LD_VAR 0 6
29383: PUSH
29384: LD_VAR 0 8
29388: ARRAY
29389: PUSH
29390: LD_INT 2
29392: ARRAY
29393: LESS
29394: IFFALSE 29432
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29396: LD_ADDR_VAR 0 6
29400: PUSH
29401: LD_VAR 0 6
29405: PPUSH
29406: LD_VAR 0 8
29410: PPUSH
29411: LD_VAR 0 7
29415: PUSH
29416: LD_VAR 0 9
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PPUSH
29425: CALL_OW 2
29429: ST_TO_ADDR
// break ;
29430: GO 29434
// end ; end ;
29432: GO 29371
29434: POP
29435: POP
// end ; end ;
29436: GO 29235
29438: POP
29439: POP
// if result and not asc then
29440: LD_VAR 0 6
29444: PUSH
29445: LD_VAR 0 4
29449: NOT
29450: AND
29451: IFFALSE 29526
// begin tmp := result ;
29453: LD_ADDR_VAR 0 9
29457: PUSH
29458: LD_VAR 0 6
29462: ST_TO_ADDR
// for i = tmp downto 1 do
29463: LD_ADDR_VAR 0 7
29467: PUSH
29468: DOUBLE
29469: LD_VAR 0 9
29473: INC
29474: ST_TO_ADDR
29475: LD_INT 1
29477: PUSH
29478: FOR_DOWNTO
29479: IFFALSE 29524
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29481: LD_ADDR_VAR 0 6
29485: PUSH
29486: LD_VAR 0 6
29490: PPUSH
29491: LD_VAR 0 9
29495: PUSH
29496: LD_VAR 0 7
29500: MINUS
29501: PUSH
29502: LD_INT 1
29504: PLUS
29505: PPUSH
29506: LD_VAR 0 9
29510: PUSH
29511: LD_VAR 0 7
29515: ARRAY
29516: PPUSH
29517: CALL_OW 1
29521: ST_TO_ADDR
29522: GO 29478
29524: POP
29525: POP
// end ; tmp := [ ] ;
29526: LD_ADDR_VAR 0 9
29530: PUSH
29531: EMPTY
29532: ST_TO_ADDR
// if mode then
29533: LD_VAR 0 5
29537: IFFALSE 29606
// begin for i = 1 to result do
29539: LD_ADDR_VAR 0 7
29543: PUSH
29544: DOUBLE
29545: LD_INT 1
29547: DEC
29548: ST_TO_ADDR
29549: LD_VAR 0 6
29553: PUSH
29554: FOR_TO
29555: IFFALSE 29594
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29557: LD_ADDR_VAR 0 9
29561: PUSH
29562: LD_VAR 0 9
29566: PPUSH
29567: LD_VAR 0 7
29571: PPUSH
29572: LD_VAR 0 6
29576: PUSH
29577: LD_VAR 0 7
29581: ARRAY
29582: PUSH
29583: LD_INT 1
29585: ARRAY
29586: PPUSH
29587: CALL_OW 1
29591: ST_TO_ADDR
29592: GO 29554
29594: POP
29595: POP
// result := tmp ;
29596: LD_ADDR_VAR 0 6
29600: PUSH
29601: LD_VAR 0 9
29605: ST_TO_ADDR
// end ; end ;
29606: LD_VAR 0 6
29610: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29611: LD_INT 0
29613: PPUSH
29614: PPUSH
29615: PPUSH
29616: PPUSH
29617: PPUSH
29618: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29619: LD_ADDR_VAR 0 5
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: EMPTY
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
// if not x or not y then
29641: LD_VAR 0 2
29645: NOT
29646: PUSH
29647: LD_VAR 0 3
29651: NOT
29652: OR
29653: IFFALSE 29657
// exit ;
29655: GO 31303
// if not range then
29657: LD_VAR 0 4
29661: NOT
29662: IFFALSE 29672
// range := 10 ;
29664: LD_ADDR_VAR 0 4
29668: PUSH
29669: LD_INT 10
29671: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29672: LD_ADDR_VAR 0 8
29676: PUSH
29677: LD_INT 81
29679: PUSH
29680: LD_VAR 0 1
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 92
29691: PUSH
29692: LD_VAR 0 2
29696: PUSH
29697: LD_VAR 0 3
29701: PUSH
29702: LD_VAR 0 4
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: LD_INT 21
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: PPUSH
29735: CALL_OW 69
29739: ST_TO_ADDR
// if not tmp then
29740: LD_VAR 0 8
29744: NOT
29745: IFFALSE 29749
// exit ;
29747: GO 31303
// for i in tmp do
29749: LD_ADDR_VAR 0 6
29753: PUSH
29754: LD_VAR 0 8
29758: PUSH
29759: FOR_IN
29760: IFFALSE 31278
// begin points := [ 0 , 0 , 0 ] ;
29762: LD_ADDR_VAR 0 9
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: ST_TO_ADDR
// bpoints := 1 ;
29781: LD_ADDR_VAR 0 10
29785: PUSH
29786: LD_INT 1
29788: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29789: LD_VAR 0 6
29793: PPUSH
29794: CALL_OW 247
29798: PUSH
29799: LD_INT 1
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 30385
29807: POP
// begin if GetClass ( i ) = 1 then
29808: LD_VAR 0 6
29812: PPUSH
29813: CALL_OW 257
29817: PUSH
29818: LD_INT 1
29820: EQUAL
29821: IFFALSE 29842
// points := [ 10 , 5 , 3 ] ;
29823: LD_ADDR_VAR 0 9
29827: PUSH
29828: LD_INT 10
29830: PUSH
29831: LD_INT 5
29833: PUSH
29834: LD_INT 3
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29842: LD_VAR 0 6
29846: PPUSH
29847: CALL_OW 257
29851: PUSH
29852: LD_INT 2
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: LD_INT 4
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: IN
29866: IFFALSE 29887
// points := [ 3 , 2 , 1 ] ;
29868: LD_ADDR_VAR 0 9
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29887: LD_VAR 0 6
29891: PPUSH
29892: CALL_OW 257
29896: PUSH
29897: LD_INT 5
29899: EQUAL
29900: IFFALSE 29921
// points := [ 130 , 5 , 2 ] ;
29902: LD_ADDR_VAR 0 9
29906: PUSH
29907: LD_INT 130
29909: PUSH
29910: LD_INT 5
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29921: LD_VAR 0 6
29925: PPUSH
29926: CALL_OW 257
29930: PUSH
29931: LD_INT 8
29933: EQUAL
29934: IFFALSE 29955
// points := [ 35 , 35 , 30 ] ;
29936: LD_ADDR_VAR 0 9
29940: PUSH
29941: LD_INT 35
29943: PUSH
29944: LD_INT 35
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29955: LD_VAR 0 6
29959: PPUSH
29960: CALL_OW 257
29964: PUSH
29965: LD_INT 9
29967: EQUAL
29968: IFFALSE 29989
// points := [ 20 , 55 , 40 ] ;
29970: LD_ADDR_VAR 0 9
29974: PUSH
29975: LD_INT 20
29977: PUSH
29978: LD_INT 55
29980: PUSH
29981: LD_INT 40
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29989: LD_VAR 0 6
29993: PPUSH
29994: CALL_OW 257
29998: PUSH
29999: LD_INT 12
30001: PUSH
30002: LD_INT 16
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: IN
30009: IFFALSE 30030
// points := [ 5 , 3 , 2 ] ;
30011: LD_ADDR_VAR 0 9
30015: PUSH
30016: LD_INT 5
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30030: LD_VAR 0 6
30034: PPUSH
30035: CALL_OW 257
30039: PUSH
30040: LD_INT 17
30042: EQUAL
30043: IFFALSE 30064
// points := [ 100 , 50 , 75 ] ;
30045: LD_ADDR_VAR 0 9
30049: PUSH
30050: LD_INT 100
30052: PUSH
30053: LD_INT 50
30055: PUSH
30056: LD_INT 75
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: LIST
30063: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30064: LD_VAR 0 6
30068: PPUSH
30069: CALL_OW 257
30073: PUSH
30074: LD_INT 15
30076: EQUAL
30077: IFFALSE 30098
// points := [ 10 , 5 , 3 ] ;
30079: LD_ADDR_VAR 0 9
30083: PUSH
30084: LD_INT 10
30086: PUSH
30087: LD_INT 5
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30098: LD_VAR 0 6
30102: PPUSH
30103: CALL_OW 257
30107: PUSH
30108: LD_INT 14
30110: EQUAL
30111: IFFALSE 30132
// points := [ 10 , 0 , 0 ] ;
30113: LD_ADDR_VAR 0 9
30117: PUSH
30118: LD_INT 10
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30132: LD_VAR 0 6
30136: PPUSH
30137: CALL_OW 257
30141: PUSH
30142: LD_INT 11
30144: EQUAL
30145: IFFALSE 30166
// points := [ 30 , 10 , 5 ] ;
30147: LD_ADDR_VAR 0 9
30151: PUSH
30152: LD_INT 30
30154: PUSH
30155: LD_INT 10
30157: PUSH
30158: LD_INT 5
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: LIST
30165: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30166: LD_VAR 0 1
30170: PPUSH
30171: LD_INT 5
30173: PPUSH
30174: CALL_OW 321
30178: PUSH
30179: LD_INT 2
30181: EQUAL
30182: IFFALSE 30199
// bpoints := bpoints * 1.8 ;
30184: LD_ADDR_VAR 0 10
30188: PUSH
30189: LD_VAR 0 10
30193: PUSH
30194: LD_REAL  1.80000000000000E+0000
30197: MUL
30198: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30199: LD_VAR 0 6
30203: PPUSH
30204: CALL_OW 257
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: LD_INT 4
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: IN
30227: PUSH
30228: LD_VAR 0 1
30232: PPUSH
30233: LD_INT 51
30235: PPUSH
30236: CALL_OW 321
30240: PUSH
30241: LD_INT 2
30243: EQUAL
30244: AND
30245: IFFALSE 30262
// bpoints := bpoints * 1.2 ;
30247: LD_ADDR_VAR 0 10
30251: PUSH
30252: LD_VAR 0 10
30256: PUSH
30257: LD_REAL  1.20000000000000E+0000
30260: MUL
30261: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30262: LD_VAR 0 6
30266: PPUSH
30267: CALL_OW 257
30271: PUSH
30272: LD_INT 5
30274: PUSH
30275: LD_INT 7
30277: PUSH
30278: LD_INT 9
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: IN
30286: PUSH
30287: LD_VAR 0 1
30291: PPUSH
30292: LD_INT 52
30294: PPUSH
30295: CALL_OW 321
30299: PUSH
30300: LD_INT 2
30302: EQUAL
30303: AND
30304: IFFALSE 30321
// bpoints := bpoints * 1.5 ;
30306: LD_ADDR_VAR 0 10
30310: PUSH
30311: LD_VAR 0 10
30315: PUSH
30316: LD_REAL  1.50000000000000E+0000
30319: MUL
30320: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30321: LD_VAR 0 1
30325: PPUSH
30326: LD_INT 66
30328: PPUSH
30329: CALL_OW 321
30333: PUSH
30334: LD_INT 2
30336: EQUAL
30337: IFFALSE 30354
// bpoints := bpoints * 1.1 ;
30339: LD_ADDR_VAR 0 10
30343: PUSH
30344: LD_VAR 0 10
30348: PUSH
30349: LD_REAL  1.10000000000000E+0000
30352: MUL
30353: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30354: LD_ADDR_VAR 0 10
30358: PUSH
30359: LD_VAR 0 10
30363: PUSH
30364: LD_VAR 0 6
30368: PPUSH
30369: LD_INT 1
30371: PPUSH
30372: CALL_OW 259
30376: PUSH
30377: LD_REAL  1.15000000000000E+0000
30380: MUL
30381: MUL
30382: ST_TO_ADDR
// end ; unit_vehicle :
30383: GO 31207
30385: LD_INT 2
30387: DOUBLE
30388: EQUAL
30389: IFTRUE 30393
30391: GO 31195
30393: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30394: LD_VAR 0 6
30398: PPUSH
30399: CALL_OW 264
30403: PUSH
30404: LD_INT 2
30406: PUSH
30407: LD_INT 42
30409: PUSH
30410: LD_INT 24
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: IN
30418: IFFALSE 30439
// points := [ 25 , 5 , 3 ] ;
30420: LD_ADDR_VAR 0 9
30424: PUSH
30425: LD_INT 25
30427: PUSH
30428: LD_INT 5
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30439: LD_VAR 0 6
30443: PPUSH
30444: CALL_OW 264
30448: PUSH
30449: LD_INT 4
30451: PUSH
30452: LD_INT 43
30454: PUSH
30455: LD_INT 25
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: LIST
30462: IN
30463: IFFALSE 30484
// points := [ 40 , 15 , 5 ] ;
30465: LD_ADDR_VAR 0 9
30469: PUSH
30470: LD_INT 40
30472: PUSH
30473: LD_INT 15
30475: PUSH
30476: LD_INT 5
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30484: LD_VAR 0 6
30488: PPUSH
30489: CALL_OW 264
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: LD_INT 23
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: IN
30504: IFFALSE 30525
// points := [ 7 , 25 , 8 ] ;
30506: LD_ADDR_VAR 0 9
30510: PUSH
30511: LD_INT 7
30513: PUSH
30514: LD_INT 25
30516: PUSH
30517: LD_INT 8
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30525: LD_VAR 0 6
30529: PPUSH
30530: CALL_OW 264
30534: PUSH
30535: LD_INT 5
30537: PUSH
30538: LD_INT 27
30540: PUSH
30541: LD_INT 44
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: IN
30549: IFFALSE 30570
// points := [ 14 , 50 , 16 ] ;
30551: LD_ADDR_VAR 0 9
30555: PUSH
30556: LD_INT 14
30558: PUSH
30559: LD_INT 50
30561: PUSH
30562: LD_INT 16
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: LIST
30569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30570: LD_VAR 0 6
30574: PPUSH
30575: CALL_OW 264
30579: PUSH
30580: LD_INT 6
30582: PUSH
30583: LD_INT 46
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: IN
30590: IFFALSE 30611
// points := [ 32 , 120 , 70 ] ;
30592: LD_ADDR_VAR 0 9
30596: PUSH
30597: LD_INT 32
30599: PUSH
30600: LD_INT 120
30602: PUSH
30603: LD_INT 70
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30611: LD_VAR 0 6
30615: PPUSH
30616: CALL_OW 264
30620: PUSH
30621: LD_INT 7
30623: PUSH
30624: LD_INT 28
30626: PUSH
30627: LD_INT 45
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: IN
30635: IFFALSE 30656
// points := [ 35 , 20 , 45 ] ;
30637: LD_ADDR_VAR 0 9
30641: PUSH
30642: LD_INT 35
30644: PUSH
30645: LD_INT 20
30647: PUSH
30648: LD_INT 45
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30656: LD_VAR 0 6
30660: PPUSH
30661: CALL_OW 264
30665: PUSH
30666: LD_INT 47
30668: PUSH
30669: EMPTY
30670: LIST
30671: IN
30672: IFFALSE 30693
// points := [ 67 , 45 , 75 ] ;
30674: LD_ADDR_VAR 0 9
30678: PUSH
30679: LD_INT 67
30681: PUSH
30682: LD_INT 45
30684: PUSH
30685: LD_INT 75
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30693: LD_VAR 0 6
30697: PPUSH
30698: CALL_OW 264
30702: PUSH
30703: LD_INT 26
30705: PUSH
30706: EMPTY
30707: LIST
30708: IN
30709: IFFALSE 30730
// points := [ 120 , 30 , 80 ] ;
30711: LD_ADDR_VAR 0 9
30715: PUSH
30716: LD_INT 120
30718: PUSH
30719: LD_INT 30
30721: PUSH
30722: LD_INT 80
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30730: LD_VAR 0 6
30734: PPUSH
30735: CALL_OW 264
30739: PUSH
30740: LD_INT 22
30742: PUSH
30743: EMPTY
30744: LIST
30745: IN
30746: IFFALSE 30767
// points := [ 40 , 1 , 1 ] ;
30748: LD_ADDR_VAR 0 9
30752: PUSH
30753: LD_INT 40
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30767: LD_VAR 0 6
30771: PPUSH
30772: CALL_OW 264
30776: PUSH
30777: LD_INT 29
30779: PUSH
30780: EMPTY
30781: LIST
30782: IN
30783: IFFALSE 30804
// points := [ 70 , 200 , 400 ] ;
30785: LD_ADDR_VAR 0 9
30789: PUSH
30790: LD_INT 70
30792: PUSH
30793: LD_INT 200
30795: PUSH
30796: LD_INT 400
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30804: LD_VAR 0 6
30808: PPUSH
30809: CALL_OW 264
30813: PUSH
30814: LD_INT 14
30816: PUSH
30817: LD_INT 53
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: IN
30824: IFFALSE 30845
// points := [ 40 , 10 , 20 ] ;
30826: LD_ADDR_VAR 0 9
30830: PUSH
30831: LD_INT 40
30833: PUSH
30834: LD_INT 10
30836: PUSH
30837: LD_INT 20
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: LIST
30844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30845: LD_VAR 0 6
30849: PPUSH
30850: CALL_OW 264
30854: PUSH
30855: LD_INT 9
30857: PUSH
30858: EMPTY
30859: LIST
30860: IN
30861: IFFALSE 30882
// points := [ 5 , 70 , 20 ] ;
30863: LD_ADDR_VAR 0 9
30867: PUSH
30868: LD_INT 5
30870: PUSH
30871: LD_INT 70
30873: PUSH
30874: LD_INT 20
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: LIST
30881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30882: LD_VAR 0 6
30886: PPUSH
30887: CALL_OW 264
30891: PUSH
30892: LD_INT 10
30894: PUSH
30895: EMPTY
30896: LIST
30897: IN
30898: IFFALSE 30919
// points := [ 35 , 110 , 70 ] ;
30900: LD_ADDR_VAR 0 9
30904: PUSH
30905: LD_INT 35
30907: PUSH
30908: LD_INT 110
30910: PUSH
30911: LD_INT 70
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30919: LD_VAR 0 6
30923: PPUSH
30924: CALL_OW 265
30928: PUSH
30929: LD_INT 25
30931: EQUAL
30932: IFFALSE 30953
// points := [ 80 , 65 , 100 ] ;
30934: LD_ADDR_VAR 0 9
30938: PUSH
30939: LD_INT 80
30941: PUSH
30942: LD_INT 65
30944: PUSH
30945: LD_INT 100
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30953: LD_VAR 0 6
30957: PPUSH
30958: CALL_OW 263
30962: PUSH
30963: LD_INT 1
30965: EQUAL
30966: IFFALSE 31001
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30968: LD_ADDR_VAR 0 10
30972: PUSH
30973: LD_VAR 0 10
30977: PUSH
30978: LD_VAR 0 6
30982: PPUSH
30983: CALL_OW 311
30987: PPUSH
30988: LD_INT 3
30990: PPUSH
30991: CALL_OW 259
30995: PUSH
30996: LD_INT 4
30998: MUL
30999: MUL
31000: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31001: LD_VAR 0 6
31005: PPUSH
31006: CALL_OW 263
31010: PUSH
31011: LD_INT 2
31013: EQUAL
31014: IFFALSE 31065
// begin j := IsControledBy ( i ) ;
31016: LD_ADDR_VAR 0 7
31020: PUSH
31021: LD_VAR 0 6
31025: PPUSH
31026: CALL_OW 312
31030: ST_TO_ADDR
// if j then
31031: LD_VAR 0 7
31035: IFFALSE 31065
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31037: LD_ADDR_VAR 0 10
31041: PUSH
31042: LD_VAR 0 10
31046: PUSH
31047: LD_VAR 0 7
31051: PPUSH
31052: LD_INT 3
31054: PPUSH
31055: CALL_OW 259
31059: PUSH
31060: LD_INT 3
31062: MUL
31063: MUL
31064: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31065: LD_VAR 0 6
31069: PPUSH
31070: CALL_OW 264
31074: PUSH
31075: LD_INT 5
31077: PUSH
31078: LD_INT 6
31080: PUSH
31081: LD_INT 46
31083: PUSH
31084: LD_INT 44
31086: PUSH
31087: LD_INT 47
31089: PUSH
31090: LD_INT 45
31092: PUSH
31093: LD_INT 28
31095: PUSH
31096: LD_INT 7
31098: PUSH
31099: LD_INT 27
31101: PUSH
31102: LD_INT 29
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: IN
31117: PUSH
31118: LD_VAR 0 1
31122: PPUSH
31123: LD_INT 52
31125: PPUSH
31126: CALL_OW 321
31130: PUSH
31131: LD_INT 2
31133: EQUAL
31134: AND
31135: IFFALSE 31152
// bpoints := bpoints * 1.2 ;
31137: LD_ADDR_VAR 0 10
31141: PUSH
31142: LD_VAR 0 10
31146: PUSH
31147: LD_REAL  1.20000000000000E+0000
31150: MUL
31151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31152: LD_VAR 0 6
31156: PPUSH
31157: CALL_OW 264
31161: PUSH
31162: LD_INT 6
31164: PUSH
31165: LD_INT 46
31167: PUSH
31168: LD_INT 47
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: IN
31176: IFFALSE 31193
// bpoints := bpoints * 1.2 ;
31178: LD_ADDR_VAR 0 10
31182: PUSH
31183: LD_VAR 0 10
31187: PUSH
31188: LD_REAL  1.20000000000000E+0000
31191: MUL
31192: ST_TO_ADDR
// end ; unit_building :
31193: GO 31207
31195: LD_INT 3
31197: DOUBLE
31198: EQUAL
31199: IFTRUE 31203
31201: GO 31206
31203: POP
// ; end ;
31204: GO 31207
31206: POP
// for j = 1 to 3 do
31207: LD_ADDR_VAR 0 7
31211: PUSH
31212: DOUBLE
31213: LD_INT 1
31215: DEC
31216: ST_TO_ADDR
31217: LD_INT 3
31219: PUSH
31220: FOR_TO
31221: IFFALSE 31274
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31223: LD_ADDR_VAR 0 5
31227: PUSH
31228: LD_VAR 0 5
31232: PPUSH
31233: LD_VAR 0 7
31237: PPUSH
31238: LD_VAR 0 5
31242: PUSH
31243: LD_VAR 0 7
31247: ARRAY
31248: PUSH
31249: LD_VAR 0 9
31253: PUSH
31254: LD_VAR 0 7
31258: ARRAY
31259: PUSH
31260: LD_VAR 0 10
31264: MUL
31265: PLUS
31266: PPUSH
31267: CALL_OW 1
31271: ST_TO_ADDR
31272: GO 31220
31274: POP
31275: POP
// end ;
31276: GO 29759
31278: POP
31279: POP
// result := Replace ( result , 4 , tmp ) ;
31280: LD_ADDR_VAR 0 5
31284: PUSH
31285: LD_VAR 0 5
31289: PPUSH
31290: LD_INT 4
31292: PPUSH
31293: LD_VAR 0 8
31297: PPUSH
31298: CALL_OW 1
31302: ST_TO_ADDR
// end ;
31303: LD_VAR 0 5
31307: RET
// export function DangerAtRange ( unit , range ) ; begin
31308: LD_INT 0
31310: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31311: LD_ADDR_VAR 0 3
31315: PUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: CALL_OW 255
31325: PPUSH
31326: LD_VAR 0 1
31330: PPUSH
31331: CALL_OW 250
31335: PPUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 251
31345: PPUSH
31346: LD_VAR 0 2
31350: PPUSH
31351: CALL 29611 0 4
31355: ST_TO_ADDR
// end ;
31356: LD_VAR 0 3
31360: RET
// export function DangerInArea ( side , area ) ; begin
31361: LD_INT 0
31363: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31364: LD_ADDR_VAR 0 3
31368: PUSH
31369: LD_VAR 0 2
31373: PPUSH
31374: LD_INT 81
31376: PUSH
31377: LD_VAR 0 1
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PPUSH
31386: CALL_OW 70
31390: ST_TO_ADDR
// end ;
31391: LD_VAR 0 3
31395: RET
// export function IsExtension ( b ) ; begin
31396: LD_INT 0
31398: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31399: LD_ADDR_VAR 0 2
31403: PUSH
31404: LD_VAR 0 1
31408: PUSH
31409: LD_INT 23
31411: PUSH
31412: LD_INT 20
31414: PUSH
31415: LD_INT 22
31417: PUSH
31418: LD_INT 17
31420: PUSH
31421: LD_INT 24
31423: PUSH
31424: LD_INT 21
31426: PUSH
31427: LD_INT 19
31429: PUSH
31430: LD_INT 16
31432: PUSH
31433: LD_INT 25
31435: PUSH
31436: LD_INT 18
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: IN
31451: ST_TO_ADDR
// end ;
31452: LD_VAR 0 2
31456: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31457: LD_INT 0
31459: PPUSH
31460: PPUSH
31461: PPUSH
// result := [ ] ;
31462: LD_ADDR_VAR 0 4
31466: PUSH
31467: EMPTY
31468: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31469: LD_ADDR_VAR 0 5
31473: PUSH
31474: LD_VAR 0 2
31478: PPUSH
31479: LD_INT 21
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PPUSH
31489: CALL_OW 70
31493: ST_TO_ADDR
// if not tmp then
31494: LD_VAR 0 5
31498: NOT
31499: IFFALSE 31503
// exit ;
31501: GO 31567
// if checkLink then
31503: LD_VAR 0 3
31507: IFFALSE 31557
// begin for i in tmp do
31509: LD_ADDR_VAR 0 6
31513: PUSH
31514: LD_VAR 0 5
31518: PUSH
31519: FOR_IN
31520: IFFALSE 31555
// if GetBase ( i ) <> base then
31522: LD_VAR 0 6
31526: PPUSH
31527: CALL_OW 274
31531: PUSH
31532: LD_VAR 0 1
31536: NONEQUAL
31537: IFFALSE 31553
// ComLinkToBase ( base , i ) ;
31539: LD_VAR 0 1
31543: PPUSH
31544: LD_VAR 0 6
31548: PPUSH
31549: CALL_OW 169
31553: GO 31519
31555: POP
31556: POP
// end ; result := tmp ;
31557: LD_ADDR_VAR 0 4
31561: PUSH
31562: LD_VAR 0 5
31566: ST_TO_ADDR
// end ;
31567: LD_VAR 0 4
31571: RET
// export function ComComplete ( units , b ) ; var i ; begin
31572: LD_INT 0
31574: PPUSH
31575: PPUSH
// if not units then
31576: LD_VAR 0 1
31580: NOT
31581: IFFALSE 31585
// exit ;
31583: GO 31675
// for i in units do
31585: LD_ADDR_VAR 0 4
31589: PUSH
31590: LD_VAR 0 1
31594: PUSH
31595: FOR_IN
31596: IFFALSE 31673
// if BuildingStatus ( b ) = bs_build then
31598: LD_VAR 0 2
31602: PPUSH
31603: CALL_OW 461
31607: PUSH
31608: LD_INT 1
31610: EQUAL
31611: IFFALSE 31671
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31613: LD_VAR 0 4
31617: PPUSH
31618: LD_STRING h
31620: PUSH
31621: LD_VAR 0 2
31625: PPUSH
31626: CALL_OW 250
31630: PUSH
31631: LD_VAR 0 2
31635: PPUSH
31636: CALL_OW 251
31640: PUSH
31641: LD_VAR 0 2
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: PPUSH
31667: CALL_OW 446
31671: GO 31595
31673: POP
31674: POP
// end ;
31675: LD_VAR 0 3
31679: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31680: LD_INT 0
31682: PPUSH
31683: PPUSH
31684: PPUSH
31685: PPUSH
31686: PPUSH
31687: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31688: LD_VAR 0 1
31692: NOT
31693: PUSH
31694: LD_VAR 0 1
31698: PPUSH
31699: CALL_OW 263
31703: PUSH
31704: LD_INT 2
31706: EQUAL
31707: NOT
31708: OR
31709: IFFALSE 31713
// exit ;
31711: GO 32029
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31713: LD_ADDR_VAR 0 6
31717: PUSH
31718: LD_INT 22
31720: PUSH
31721: LD_VAR 0 1
31725: PPUSH
31726: CALL_OW 255
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: LD_INT 36
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 34
31750: PUSH
31751: LD_INT 31
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PPUSH
31767: CALL_OW 69
31771: ST_TO_ADDR
// if not tmp then
31772: LD_VAR 0 6
31776: NOT
31777: IFFALSE 31781
// exit ;
31779: GO 32029
// result := [ ] ;
31781: LD_ADDR_VAR 0 2
31785: PUSH
31786: EMPTY
31787: ST_TO_ADDR
// for i in tmp do
31788: LD_ADDR_VAR 0 3
31792: PUSH
31793: LD_VAR 0 6
31797: PUSH
31798: FOR_IN
31799: IFFALSE 31870
// begin t := UnitsInside ( i ) ;
31801: LD_ADDR_VAR 0 4
31805: PUSH
31806: LD_VAR 0 3
31810: PPUSH
31811: CALL_OW 313
31815: ST_TO_ADDR
// if t then
31816: LD_VAR 0 4
31820: IFFALSE 31868
// for j in t do
31822: LD_ADDR_VAR 0 7
31826: PUSH
31827: LD_VAR 0 4
31831: PUSH
31832: FOR_IN
31833: IFFALSE 31866
// result := Insert ( result , result + 1 , j ) ;
31835: LD_ADDR_VAR 0 2
31839: PUSH
31840: LD_VAR 0 2
31844: PPUSH
31845: LD_VAR 0 2
31849: PUSH
31850: LD_INT 1
31852: PLUS
31853: PPUSH
31854: LD_VAR 0 7
31858: PPUSH
31859: CALL_OW 2
31863: ST_TO_ADDR
31864: GO 31832
31866: POP
31867: POP
// end ;
31868: GO 31798
31870: POP
31871: POP
// if not result then
31872: LD_VAR 0 2
31876: NOT
31877: IFFALSE 31881
// exit ;
31879: GO 32029
// mech := result [ 1 ] ;
31881: LD_ADDR_VAR 0 5
31885: PUSH
31886: LD_VAR 0 2
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: ST_TO_ADDR
// if result > 1 then
31895: LD_VAR 0 2
31899: PUSH
31900: LD_INT 1
31902: GREATER
31903: IFFALSE 32015
// for i = 2 to result do
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: DOUBLE
31911: LD_INT 2
31913: DEC
31914: ST_TO_ADDR
31915: LD_VAR 0 2
31919: PUSH
31920: FOR_TO
31921: IFFALSE 32013
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31923: LD_ADDR_VAR 0 4
31927: PUSH
31928: LD_VAR 0 2
31932: PUSH
31933: LD_VAR 0 3
31937: ARRAY
31938: PPUSH
31939: LD_INT 3
31941: PPUSH
31942: CALL_OW 259
31946: PUSH
31947: LD_VAR 0 2
31951: PUSH
31952: LD_VAR 0 3
31956: ARRAY
31957: PPUSH
31958: CALL_OW 432
31962: MINUS
31963: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31964: LD_VAR 0 4
31968: PUSH
31969: LD_VAR 0 5
31973: PPUSH
31974: LD_INT 3
31976: PPUSH
31977: CALL_OW 259
31981: PUSH
31982: LD_VAR 0 5
31986: PPUSH
31987: CALL_OW 432
31991: MINUS
31992: GREATEREQUAL
31993: IFFALSE 32011
// mech := result [ i ] ;
31995: LD_ADDR_VAR 0 5
31999: PUSH
32000: LD_VAR 0 2
32004: PUSH
32005: LD_VAR 0 3
32009: ARRAY
32010: ST_TO_ADDR
// end ;
32011: GO 31920
32013: POP
32014: POP
// ComLinkTo ( vehicle , mech ) ;
32015: LD_VAR 0 1
32019: PPUSH
32020: LD_VAR 0 5
32024: PPUSH
32025: CALL_OW 135
// end ;
32029: LD_VAR 0 2
32033: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32034: LD_INT 0
32036: PPUSH
32037: PPUSH
32038: PPUSH
32039: PPUSH
32040: PPUSH
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
// result := [ ] ;
32049: LD_ADDR_VAR 0 7
32053: PUSH
32054: EMPTY
32055: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32056: LD_VAR 0 1
32060: PPUSH
32061: CALL_OW 266
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: IN
32076: NOT
32077: IFFALSE 32081
// exit ;
32079: GO 33715
// if name then
32081: LD_VAR 0 3
32085: IFFALSE 32101
// SetBName ( base_dep , name ) ;
32087: LD_VAR 0 1
32091: PPUSH
32092: LD_VAR 0 3
32096: PPUSH
32097: CALL_OW 500
// base := GetBase ( base_dep ) ;
32101: LD_ADDR_VAR 0 15
32105: PUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: CALL_OW 274
32115: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32116: LD_ADDR_VAR 0 16
32120: PUSH
32121: LD_VAR 0 1
32125: PPUSH
32126: CALL_OW 255
32130: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32131: LD_ADDR_VAR 0 17
32135: PUSH
32136: LD_VAR 0 1
32140: PPUSH
32141: CALL_OW 248
32145: ST_TO_ADDR
// if sources then
32146: LD_VAR 0 5
32150: IFFALSE 32197
// for i = 1 to 3 do
32152: LD_ADDR_VAR 0 8
32156: PUSH
32157: DOUBLE
32158: LD_INT 1
32160: DEC
32161: ST_TO_ADDR
32162: LD_INT 3
32164: PUSH
32165: FOR_TO
32166: IFFALSE 32195
// AddResourceType ( base , i , sources [ i ] ) ;
32168: LD_VAR 0 15
32172: PPUSH
32173: LD_VAR 0 8
32177: PPUSH
32178: LD_VAR 0 5
32182: PUSH
32183: LD_VAR 0 8
32187: ARRAY
32188: PPUSH
32189: CALL_OW 276
32193: GO 32165
32195: POP
32196: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32197: LD_ADDR_VAR 0 18
32201: PUSH
32202: LD_VAR 0 15
32206: PPUSH
32207: LD_VAR 0 2
32211: PPUSH
32212: LD_INT 1
32214: PPUSH
32215: CALL 31457 0 3
32219: ST_TO_ADDR
// InitHc ;
32220: CALL_OW 19
// InitUc ;
32224: CALL_OW 18
// uc_side := side ;
32228: LD_ADDR_OWVAR 20
32232: PUSH
32233: LD_VAR 0 16
32237: ST_TO_ADDR
// uc_nation := nation ;
32238: LD_ADDR_OWVAR 21
32242: PUSH
32243: LD_VAR 0 17
32247: ST_TO_ADDR
// if buildings then
32248: LD_VAR 0 18
32252: IFFALSE 33574
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32254: LD_ADDR_VAR 0 19
32258: PUSH
32259: LD_VAR 0 18
32263: PPUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 30
32269: PUSH
32270: LD_INT 29
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 30
32279: PUSH
32280: LD_INT 30
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: PPUSH
32292: CALL_OW 72
32296: ST_TO_ADDR
// if tmp then
32297: LD_VAR 0 19
32301: IFFALSE 32349
// for i in tmp do
32303: LD_ADDR_VAR 0 8
32307: PUSH
32308: LD_VAR 0 19
32312: PUSH
32313: FOR_IN
32314: IFFALSE 32347
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32316: LD_VAR 0 8
32320: PPUSH
32321: CALL_OW 250
32325: PPUSH
32326: LD_VAR 0 8
32330: PPUSH
32331: CALL_OW 251
32335: PPUSH
32336: LD_VAR 0 16
32340: PPUSH
32341: CALL_OW 441
32345: GO 32313
32347: POP
32348: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32349: LD_VAR 0 18
32353: PPUSH
32354: LD_INT 2
32356: PUSH
32357: LD_INT 30
32359: PUSH
32360: LD_INT 32
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 30
32369: PUSH
32370: LD_INT 33
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: PPUSH
32382: CALL_OW 72
32386: IFFALSE 32474
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32388: LD_ADDR_VAR 0 8
32392: PUSH
32393: LD_VAR 0 18
32397: PPUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 30
32403: PUSH
32404: LD_INT 32
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 30
32413: PUSH
32414: LD_INT 33
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: LIST
32425: PPUSH
32426: CALL_OW 72
32430: PUSH
32431: FOR_IN
32432: IFFALSE 32472
// begin if not GetBWeapon ( i ) then
32434: LD_VAR 0 8
32438: PPUSH
32439: CALL_OW 269
32443: NOT
32444: IFFALSE 32470
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32446: LD_VAR 0 8
32450: PPUSH
32451: LD_VAR 0 8
32455: PPUSH
32456: LD_VAR 0 2
32460: PPUSH
32461: CALL 33720 0 2
32465: PPUSH
32466: CALL_OW 431
// end ;
32470: GO 32431
32472: POP
32473: POP
// end ; for i = 1 to personel do
32474: LD_ADDR_VAR 0 8
32478: PUSH
32479: DOUBLE
32480: LD_INT 1
32482: DEC
32483: ST_TO_ADDR
32484: LD_VAR 0 6
32488: PUSH
32489: FOR_TO
32490: IFFALSE 33554
// begin if i > 4 then
32492: LD_VAR 0 8
32496: PUSH
32497: LD_INT 4
32499: GREATER
32500: IFFALSE 32504
// break ;
32502: GO 33554
// case i of 1 :
32504: LD_VAR 0 8
32508: PUSH
32509: LD_INT 1
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32597
32517: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32518: LD_ADDR_VAR 0 12
32522: PUSH
32523: LD_VAR 0 18
32527: PPUSH
32528: LD_INT 22
32530: PUSH
32531: LD_VAR 0 16
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 58
32542: PUSH
32543: EMPTY
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: LD_INT 30
32551: PUSH
32552: LD_INT 32
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 30
32561: PUSH
32562: LD_INT 4
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 30
32571: PUSH
32572: LD_INT 5
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: PPUSH
32590: CALL_OW 72
32594: ST_TO_ADDR
32595: GO 32819
32597: LD_INT 2
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32605
32603: GO 32667
32605: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32606: LD_ADDR_VAR 0 12
32610: PUSH
32611: LD_VAR 0 18
32615: PPUSH
32616: LD_INT 22
32618: PUSH
32619: LD_VAR 0 16
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 30
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 30
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: LIST
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PPUSH
32660: CALL_OW 72
32664: ST_TO_ADDR
32665: GO 32819
32667: LD_INT 3
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32737
32675: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32676: LD_ADDR_VAR 0 12
32680: PUSH
32681: LD_VAR 0 18
32685: PPUSH
32686: LD_INT 22
32688: PUSH
32689: LD_VAR 0 16
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: LD_INT 30
32703: PUSH
32704: LD_INT 2
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 30
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PPUSH
32730: CALL_OW 72
32734: ST_TO_ADDR
32735: GO 32819
32737: LD_INT 4
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32818
32745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32746: LD_ADDR_VAR 0 12
32750: PUSH
32751: LD_VAR 0 18
32755: PPUSH
32756: LD_INT 22
32758: PUSH
32759: LD_VAR 0 16
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: LD_INT 30
32773: PUSH
32774: LD_INT 6
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 30
32783: PUSH
32784: LD_INT 7
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 30
32793: PUSH
32794: LD_INT 8
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PPUSH
32811: CALL_OW 72
32815: ST_TO_ADDR
32816: GO 32819
32818: POP
// if i = 1 then
32819: LD_VAR 0 8
32823: PUSH
32824: LD_INT 1
32826: EQUAL
32827: IFFALSE 32938
// begin tmp := [ ] ;
32829: LD_ADDR_VAR 0 19
32833: PUSH
32834: EMPTY
32835: ST_TO_ADDR
// for j in f do
32836: LD_ADDR_VAR 0 9
32840: PUSH
32841: LD_VAR 0 12
32845: PUSH
32846: FOR_IN
32847: IFFALSE 32920
// if GetBType ( j ) = b_bunker then
32849: LD_VAR 0 9
32853: PPUSH
32854: CALL_OW 266
32858: PUSH
32859: LD_INT 32
32861: EQUAL
32862: IFFALSE 32889
// tmp := Insert ( tmp , 1 , j ) else
32864: LD_ADDR_VAR 0 19
32868: PUSH
32869: LD_VAR 0 19
32873: PPUSH
32874: LD_INT 1
32876: PPUSH
32877: LD_VAR 0 9
32881: PPUSH
32882: CALL_OW 2
32886: ST_TO_ADDR
32887: GO 32918
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32889: LD_ADDR_VAR 0 19
32893: PUSH
32894: LD_VAR 0 19
32898: PPUSH
32899: LD_VAR 0 19
32903: PUSH
32904: LD_INT 1
32906: PLUS
32907: PPUSH
32908: LD_VAR 0 9
32912: PPUSH
32913: CALL_OW 2
32917: ST_TO_ADDR
32918: GO 32846
32920: POP
32921: POP
// if tmp then
32922: LD_VAR 0 19
32926: IFFALSE 32938
// f := tmp ;
32928: LD_ADDR_VAR 0 12
32932: PUSH
32933: LD_VAR 0 19
32937: ST_TO_ADDR
// end ; x := personel [ i ] ;
32938: LD_ADDR_VAR 0 13
32942: PUSH
32943: LD_VAR 0 6
32947: PUSH
32948: LD_VAR 0 8
32952: ARRAY
32953: ST_TO_ADDR
// if x = - 1 then
32954: LD_VAR 0 13
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: EQUAL
32963: IFFALSE 33172
// begin for j in f do
32965: LD_ADDR_VAR 0 9
32969: PUSH
32970: LD_VAR 0 12
32974: PUSH
32975: FOR_IN
32976: IFFALSE 33168
// repeat InitHc ;
32978: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32982: LD_VAR 0 9
32986: PPUSH
32987: CALL_OW 266
32991: PUSH
32992: LD_INT 5
32994: EQUAL
32995: IFFALSE 33065
// begin if UnitsInside ( j ) < 3 then
32997: LD_VAR 0 9
33001: PPUSH
33002: CALL_OW 313
33006: PUSH
33007: LD_INT 3
33009: LESS
33010: IFFALSE 33046
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33012: LD_INT 0
33014: PPUSH
33015: LD_INT 5
33017: PUSH
33018: LD_INT 8
33020: PUSH
33021: LD_INT 9
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: PUSH
33029: LD_VAR 0 17
33033: ARRAY
33034: PPUSH
33035: LD_VAR 0 4
33039: PPUSH
33040: CALL_OW 380
33044: GO 33063
// PrepareHuman ( false , i , skill ) ;
33046: LD_INT 0
33048: PPUSH
33049: LD_VAR 0 8
33053: PPUSH
33054: LD_VAR 0 4
33058: PPUSH
33059: CALL_OW 380
// end else
33063: GO 33082
// PrepareHuman ( false , i , skill ) ;
33065: LD_INT 0
33067: PPUSH
33068: LD_VAR 0 8
33072: PPUSH
33073: LD_VAR 0 4
33077: PPUSH
33078: CALL_OW 380
// un := CreateHuman ;
33082: LD_ADDR_VAR 0 14
33086: PUSH
33087: CALL_OW 44
33091: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33092: LD_ADDR_VAR 0 7
33096: PUSH
33097: LD_VAR 0 7
33101: PPUSH
33102: LD_INT 1
33104: PPUSH
33105: LD_VAR 0 14
33109: PPUSH
33110: CALL_OW 2
33114: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33115: LD_VAR 0 14
33119: PPUSH
33120: LD_VAR 0 9
33124: PPUSH
33125: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33129: LD_VAR 0 9
33133: PPUSH
33134: CALL_OW 313
33138: PUSH
33139: LD_INT 6
33141: EQUAL
33142: PUSH
33143: LD_VAR 0 9
33147: PPUSH
33148: CALL_OW 266
33152: PUSH
33153: LD_INT 32
33155: PUSH
33156: LD_INT 31
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: IN
33163: OR
33164: IFFALSE 32978
33166: GO 32975
33168: POP
33169: POP
// end else
33170: GO 33552
// for j = 1 to x do
33172: LD_ADDR_VAR 0 9
33176: PUSH
33177: DOUBLE
33178: LD_INT 1
33180: DEC
33181: ST_TO_ADDR
33182: LD_VAR 0 13
33186: PUSH
33187: FOR_TO
33188: IFFALSE 33550
// begin InitHc ;
33190: CALL_OW 19
// if not f then
33194: LD_VAR 0 12
33198: NOT
33199: IFFALSE 33288
// begin PrepareHuman ( false , i , skill ) ;
33201: LD_INT 0
33203: PPUSH
33204: LD_VAR 0 8
33208: PPUSH
33209: LD_VAR 0 4
33213: PPUSH
33214: CALL_OW 380
// un := CreateHuman ;
33218: LD_ADDR_VAR 0 14
33222: PUSH
33223: CALL_OW 44
33227: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33228: LD_ADDR_VAR 0 7
33232: PUSH
33233: LD_VAR 0 7
33237: PPUSH
33238: LD_INT 1
33240: PPUSH
33241: LD_VAR 0 14
33245: PPUSH
33246: CALL_OW 2
33250: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33251: LD_VAR 0 14
33255: PPUSH
33256: LD_VAR 0 1
33260: PPUSH
33261: CALL_OW 250
33265: PPUSH
33266: LD_VAR 0 1
33270: PPUSH
33271: CALL_OW 251
33275: PPUSH
33276: LD_INT 10
33278: PPUSH
33279: LD_INT 0
33281: PPUSH
33282: CALL_OW 50
// continue ;
33286: GO 33187
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33288: LD_VAR 0 12
33292: PUSH
33293: LD_INT 1
33295: ARRAY
33296: PPUSH
33297: CALL_OW 313
33301: PUSH
33302: LD_VAR 0 12
33306: PUSH
33307: LD_INT 1
33309: ARRAY
33310: PPUSH
33311: CALL_OW 266
33315: PUSH
33316: LD_INT 32
33318: PUSH
33319: LD_INT 31
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: IN
33326: AND
33327: PUSH
33328: LD_VAR 0 12
33332: PUSH
33333: LD_INT 1
33335: ARRAY
33336: PPUSH
33337: CALL_OW 313
33341: PUSH
33342: LD_INT 6
33344: EQUAL
33345: OR
33346: IFFALSE 33366
// f := Delete ( f , 1 ) ;
33348: LD_ADDR_VAR 0 12
33352: PUSH
33353: LD_VAR 0 12
33357: PPUSH
33358: LD_INT 1
33360: PPUSH
33361: CALL_OW 3
33365: ST_TO_ADDR
// if not f then
33366: LD_VAR 0 12
33370: NOT
33371: IFFALSE 33389
// begin x := x + 2 ;
33373: LD_ADDR_VAR 0 13
33377: PUSH
33378: LD_VAR 0 13
33382: PUSH
33383: LD_INT 2
33385: PLUS
33386: ST_TO_ADDR
// continue ;
33387: GO 33187
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33389: LD_VAR 0 12
33393: PUSH
33394: LD_INT 1
33396: ARRAY
33397: PPUSH
33398: CALL_OW 266
33402: PUSH
33403: LD_INT 5
33405: EQUAL
33406: IFFALSE 33480
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33408: LD_VAR 0 12
33412: PUSH
33413: LD_INT 1
33415: ARRAY
33416: PPUSH
33417: CALL_OW 313
33421: PUSH
33422: LD_INT 3
33424: LESS
33425: IFFALSE 33461
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33427: LD_INT 0
33429: PPUSH
33430: LD_INT 5
33432: PUSH
33433: LD_INT 8
33435: PUSH
33436: LD_INT 9
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: PUSH
33444: LD_VAR 0 17
33448: ARRAY
33449: PPUSH
33450: LD_VAR 0 4
33454: PPUSH
33455: CALL_OW 380
33459: GO 33478
// PrepareHuman ( false , i , skill ) ;
33461: LD_INT 0
33463: PPUSH
33464: LD_VAR 0 8
33468: PPUSH
33469: LD_VAR 0 4
33473: PPUSH
33474: CALL_OW 380
// end else
33478: GO 33497
// PrepareHuman ( false , i , skill ) ;
33480: LD_INT 0
33482: PPUSH
33483: LD_VAR 0 8
33487: PPUSH
33488: LD_VAR 0 4
33492: PPUSH
33493: CALL_OW 380
// un := CreateHuman ;
33497: LD_ADDR_VAR 0 14
33501: PUSH
33502: CALL_OW 44
33506: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33507: LD_ADDR_VAR 0 7
33511: PUSH
33512: LD_VAR 0 7
33516: PPUSH
33517: LD_INT 1
33519: PPUSH
33520: LD_VAR 0 14
33524: PPUSH
33525: CALL_OW 2
33529: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33530: LD_VAR 0 14
33534: PPUSH
33535: LD_VAR 0 12
33539: PUSH
33540: LD_INT 1
33542: ARRAY
33543: PPUSH
33544: CALL_OW 52
// end ;
33548: GO 33187
33550: POP
33551: POP
// end ;
33552: GO 32489
33554: POP
33555: POP
// result := result ^ buildings ;
33556: LD_ADDR_VAR 0 7
33560: PUSH
33561: LD_VAR 0 7
33565: PUSH
33566: LD_VAR 0 18
33570: ADD
33571: ST_TO_ADDR
// end else
33572: GO 33715
// begin for i = 1 to personel do
33574: LD_ADDR_VAR 0 8
33578: PUSH
33579: DOUBLE
33580: LD_INT 1
33582: DEC
33583: ST_TO_ADDR
33584: LD_VAR 0 6
33588: PUSH
33589: FOR_TO
33590: IFFALSE 33713
// begin if i > 4 then
33592: LD_VAR 0 8
33596: PUSH
33597: LD_INT 4
33599: GREATER
33600: IFFALSE 33604
// break ;
33602: GO 33713
// x := personel [ i ] ;
33604: LD_ADDR_VAR 0 13
33608: PUSH
33609: LD_VAR 0 6
33613: PUSH
33614: LD_VAR 0 8
33618: ARRAY
33619: ST_TO_ADDR
// if x = - 1 then
33620: LD_VAR 0 13
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: EQUAL
33629: IFFALSE 33633
// continue ;
33631: GO 33589
// PrepareHuman ( false , i , skill ) ;
33633: LD_INT 0
33635: PPUSH
33636: LD_VAR 0 8
33640: PPUSH
33641: LD_VAR 0 4
33645: PPUSH
33646: CALL_OW 380
// un := CreateHuman ;
33650: LD_ADDR_VAR 0 14
33654: PUSH
33655: CALL_OW 44
33659: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33660: LD_VAR 0 14
33664: PPUSH
33665: LD_VAR 0 1
33669: PPUSH
33670: CALL_OW 250
33674: PPUSH
33675: LD_VAR 0 1
33679: PPUSH
33680: CALL_OW 251
33684: PPUSH
33685: LD_INT 10
33687: PPUSH
33688: LD_INT 0
33690: PPUSH
33691: CALL_OW 50
// result := result ^ un ;
33695: LD_ADDR_VAR 0 7
33699: PUSH
33700: LD_VAR 0 7
33704: PUSH
33705: LD_VAR 0 14
33709: ADD
33710: ST_TO_ADDR
// end ;
33711: GO 33589
33713: POP
33714: POP
// end ; end ;
33715: LD_VAR 0 7
33719: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33720: LD_INT 0
33722: PPUSH
33723: PPUSH
33724: PPUSH
33725: PPUSH
33726: PPUSH
33727: PPUSH
33728: PPUSH
33729: PPUSH
33730: PPUSH
33731: PPUSH
33732: PPUSH
33733: PPUSH
33734: PPUSH
33735: PPUSH
33736: PPUSH
33737: PPUSH
// result := false ;
33738: LD_ADDR_VAR 0 3
33742: PUSH
33743: LD_INT 0
33745: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33746: LD_VAR 0 1
33750: NOT
33751: PUSH
33752: LD_VAR 0 1
33756: PPUSH
33757: CALL_OW 266
33761: PUSH
33762: LD_INT 32
33764: PUSH
33765: LD_INT 33
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: IN
33772: NOT
33773: OR
33774: IFFALSE 33778
// exit ;
33776: GO 34917
// nat := GetNation ( tower ) ;
33778: LD_ADDR_VAR 0 12
33782: PUSH
33783: LD_VAR 0 1
33787: PPUSH
33788: CALL_OW 248
33792: ST_TO_ADDR
// side := GetSide ( tower ) ;
33793: LD_ADDR_VAR 0 16
33797: PUSH
33798: LD_VAR 0 1
33802: PPUSH
33803: CALL_OW 255
33807: ST_TO_ADDR
// x := GetX ( tower ) ;
33808: LD_ADDR_VAR 0 10
33812: PUSH
33813: LD_VAR 0 1
33817: PPUSH
33818: CALL_OW 250
33822: ST_TO_ADDR
// y := GetY ( tower ) ;
33823: LD_ADDR_VAR 0 11
33827: PUSH
33828: LD_VAR 0 1
33832: PPUSH
33833: CALL_OW 251
33837: ST_TO_ADDR
// if not x or not y then
33838: LD_VAR 0 10
33842: NOT
33843: PUSH
33844: LD_VAR 0 11
33848: NOT
33849: OR
33850: IFFALSE 33854
// exit ;
33852: GO 34917
// weapon := 0 ;
33854: LD_ADDR_VAR 0 18
33858: PUSH
33859: LD_INT 0
33861: ST_TO_ADDR
// fac_list := [ ] ;
33862: LD_ADDR_VAR 0 17
33866: PUSH
33867: EMPTY
33868: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33869: LD_ADDR_VAR 0 6
33873: PUSH
33874: LD_VAR 0 1
33878: PPUSH
33879: CALL_OW 274
33883: PPUSH
33884: LD_VAR 0 2
33888: PPUSH
33889: LD_INT 0
33891: PPUSH
33892: CALL 31457 0 3
33896: PPUSH
33897: LD_INT 30
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PPUSH
33907: CALL_OW 72
33911: ST_TO_ADDR
// if not factories then
33912: LD_VAR 0 6
33916: NOT
33917: IFFALSE 33921
// exit ;
33919: GO 34917
// for i in factories do
33921: LD_ADDR_VAR 0 8
33925: PUSH
33926: LD_VAR 0 6
33930: PUSH
33931: FOR_IN
33932: IFFALSE 33957
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33934: LD_ADDR_VAR 0 17
33938: PUSH
33939: LD_VAR 0 17
33943: PUSH
33944: LD_VAR 0 8
33948: PPUSH
33949: CALL_OW 478
33953: UNION
33954: ST_TO_ADDR
33955: GO 33931
33957: POP
33958: POP
// if not fac_list then
33959: LD_VAR 0 17
33963: NOT
33964: IFFALSE 33968
// exit ;
33966: GO 34917
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33968: LD_ADDR_VAR 0 5
33972: PUSH
33973: LD_INT 4
33975: PUSH
33976: LD_INT 5
33978: PUSH
33979: LD_INT 9
33981: PUSH
33982: LD_INT 10
33984: PUSH
33985: LD_INT 6
33987: PUSH
33988: LD_INT 7
33990: PUSH
33991: LD_INT 11
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 27
34005: PUSH
34006: LD_INT 28
34008: PUSH
34009: LD_INT 26
34011: PUSH
34012: LD_INT 30
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 43
34023: PUSH
34024: LD_INT 44
34026: PUSH
34027: LD_INT 46
34029: PUSH
34030: LD_INT 45
34032: PUSH
34033: LD_INT 47
34035: PUSH
34036: LD_INT 49
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: PUSH
34052: LD_VAR 0 12
34056: ARRAY
34057: ST_TO_ADDR
// for i in list do
34058: LD_ADDR_VAR 0 8
34062: PUSH
34063: LD_VAR 0 5
34067: PUSH
34068: FOR_IN
34069: IFFALSE 34102
// if not i in fac_list then
34071: LD_VAR 0 8
34075: PUSH
34076: LD_VAR 0 17
34080: IN
34081: NOT
34082: IFFALSE 34100
// list := list diff i ;
34084: LD_ADDR_VAR 0 5
34088: PUSH
34089: LD_VAR 0 5
34093: PUSH
34094: LD_VAR 0 8
34098: DIFF
34099: ST_TO_ADDR
34100: GO 34068
34102: POP
34103: POP
// if not list then
34104: LD_VAR 0 5
34108: NOT
34109: IFFALSE 34113
// exit ;
34111: GO 34917
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34113: LD_VAR 0 12
34117: PUSH
34118: LD_INT 3
34120: EQUAL
34121: PUSH
34122: LD_INT 49
34124: PUSH
34125: LD_VAR 0 5
34129: IN
34130: AND
34131: PUSH
34132: LD_INT 31
34134: PPUSH
34135: LD_VAR 0 16
34139: PPUSH
34140: CALL_OW 321
34144: PUSH
34145: LD_INT 2
34147: EQUAL
34148: AND
34149: IFFALSE 34209
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34151: LD_INT 22
34153: PUSH
34154: LD_VAR 0 16
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 35
34165: PUSH
34166: LD_INT 49
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 91
34175: PUSH
34176: LD_VAR 0 1
34180: PUSH
34181: LD_INT 10
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: PPUSH
34194: CALL_OW 69
34198: NOT
34199: IFFALSE 34209
// weapon := ru_time_lapser ;
34201: LD_ADDR_VAR 0 18
34205: PUSH
34206: LD_INT 49
34208: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34209: LD_VAR 0 12
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: LD_INT 2
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: IN
34224: PUSH
34225: LD_INT 11
34227: PUSH
34228: LD_VAR 0 5
34232: IN
34233: PUSH
34234: LD_INT 30
34236: PUSH
34237: LD_VAR 0 5
34241: IN
34242: OR
34243: AND
34244: PUSH
34245: LD_INT 6
34247: PPUSH
34248: LD_VAR 0 16
34252: PPUSH
34253: CALL_OW 321
34257: PUSH
34258: LD_INT 2
34260: EQUAL
34261: AND
34262: IFFALSE 34427
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34264: LD_INT 22
34266: PUSH
34267: LD_VAR 0 16
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: PUSH
34279: LD_INT 35
34281: PUSH
34282: LD_INT 11
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 35
34291: PUSH
34292: LD_INT 30
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 91
34306: PUSH
34307: LD_VAR 0 1
34311: PUSH
34312: LD_INT 18
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: LIST
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: LIST
34324: PPUSH
34325: CALL_OW 69
34329: NOT
34330: PUSH
34331: LD_INT 22
34333: PUSH
34334: LD_VAR 0 16
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: LD_INT 30
34348: PUSH
34349: LD_INT 32
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 30
34358: PUSH
34359: LD_INT 33
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 91
34373: PUSH
34374: LD_VAR 0 1
34378: PUSH
34379: LD_INT 12
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: LIST
34391: PUSH
34392: EMPTY
34393: LIST
34394: PPUSH
34395: CALL_OW 69
34399: PUSH
34400: LD_INT 2
34402: GREATER
34403: AND
34404: IFFALSE 34427
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34406: LD_ADDR_VAR 0 18
34410: PUSH
34411: LD_INT 11
34413: PUSH
34414: LD_INT 30
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_VAR 0 12
34425: ARRAY
34426: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34427: LD_VAR 0 18
34431: NOT
34432: PUSH
34433: LD_INT 40
34435: PPUSH
34436: LD_VAR 0 16
34440: PPUSH
34441: CALL_OW 321
34445: PUSH
34446: LD_INT 2
34448: EQUAL
34449: AND
34450: PUSH
34451: LD_INT 7
34453: PUSH
34454: LD_VAR 0 5
34458: IN
34459: PUSH
34460: LD_INT 28
34462: PUSH
34463: LD_VAR 0 5
34467: IN
34468: OR
34469: PUSH
34470: LD_INT 45
34472: PUSH
34473: LD_VAR 0 5
34477: IN
34478: OR
34479: AND
34480: IFFALSE 34734
// begin hex := GetHexInfo ( x , y ) ;
34482: LD_ADDR_VAR 0 4
34486: PUSH
34487: LD_VAR 0 10
34491: PPUSH
34492: LD_VAR 0 11
34496: PPUSH
34497: CALL_OW 546
34501: ST_TO_ADDR
// if hex [ 1 ] then
34502: LD_VAR 0 4
34506: PUSH
34507: LD_INT 1
34509: ARRAY
34510: IFFALSE 34514
// exit ;
34512: GO 34917
// height := hex [ 2 ] ;
34514: LD_ADDR_VAR 0 15
34518: PUSH
34519: LD_VAR 0 4
34523: PUSH
34524: LD_INT 2
34526: ARRAY
34527: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34528: LD_ADDR_VAR 0 14
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: LD_INT 5
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: ST_TO_ADDR
// for i in tmp do
34551: LD_ADDR_VAR 0 8
34555: PUSH
34556: LD_VAR 0 14
34560: PUSH
34561: FOR_IN
34562: IFFALSE 34732
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34564: LD_ADDR_VAR 0 9
34568: PUSH
34569: LD_VAR 0 10
34573: PPUSH
34574: LD_VAR 0 8
34578: PPUSH
34579: LD_INT 5
34581: PPUSH
34582: CALL_OW 272
34586: PUSH
34587: LD_VAR 0 11
34591: PPUSH
34592: LD_VAR 0 8
34596: PPUSH
34597: LD_INT 5
34599: PPUSH
34600: CALL_OW 273
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34609: LD_VAR 0 9
34613: PUSH
34614: LD_INT 1
34616: ARRAY
34617: PPUSH
34618: LD_VAR 0 9
34622: PUSH
34623: LD_INT 2
34625: ARRAY
34626: PPUSH
34627: CALL_OW 488
34631: IFFALSE 34730
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34633: LD_ADDR_VAR 0 4
34637: PUSH
34638: LD_VAR 0 9
34642: PUSH
34643: LD_INT 1
34645: ARRAY
34646: PPUSH
34647: LD_VAR 0 9
34651: PUSH
34652: LD_INT 2
34654: ARRAY
34655: PPUSH
34656: CALL_OW 546
34660: ST_TO_ADDR
// if hex [ 1 ] then
34661: LD_VAR 0 4
34665: PUSH
34666: LD_INT 1
34668: ARRAY
34669: IFFALSE 34673
// continue ;
34671: GO 34561
// h := hex [ 2 ] ;
34673: LD_ADDR_VAR 0 13
34677: PUSH
34678: LD_VAR 0 4
34682: PUSH
34683: LD_INT 2
34685: ARRAY
34686: ST_TO_ADDR
// if h + 7 < height then
34687: LD_VAR 0 13
34691: PUSH
34692: LD_INT 7
34694: PLUS
34695: PUSH
34696: LD_VAR 0 15
34700: LESS
34701: IFFALSE 34730
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34703: LD_ADDR_VAR 0 18
34707: PUSH
34708: LD_INT 7
34710: PUSH
34711: LD_INT 28
34713: PUSH
34714: LD_INT 45
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: LIST
34721: PUSH
34722: LD_VAR 0 12
34726: ARRAY
34727: ST_TO_ADDR
// break ;
34728: GO 34732
// end ; end ; end ;
34730: GO 34561
34732: POP
34733: POP
// end ; if not weapon then
34734: LD_VAR 0 18
34738: NOT
34739: IFFALSE 34799
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34741: LD_ADDR_VAR 0 5
34745: PUSH
34746: LD_VAR 0 5
34750: PUSH
34751: LD_INT 11
34753: PUSH
34754: LD_INT 30
34756: PUSH
34757: LD_INT 49
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: DIFF
34765: ST_TO_ADDR
// if not list then
34766: LD_VAR 0 5
34770: NOT
34771: IFFALSE 34775
// exit ;
34773: GO 34917
// weapon := list [ rand ( 1 , list ) ] ;
34775: LD_ADDR_VAR 0 18
34779: PUSH
34780: LD_VAR 0 5
34784: PUSH
34785: LD_INT 1
34787: PPUSH
34788: LD_VAR 0 5
34792: PPUSH
34793: CALL_OW 12
34797: ARRAY
34798: ST_TO_ADDR
// end ; if weapon then
34799: LD_VAR 0 18
34803: IFFALSE 34917
// begin tmp := CostOfWeapon ( weapon ) ;
34805: LD_ADDR_VAR 0 14
34809: PUSH
34810: LD_VAR 0 18
34814: PPUSH
34815: CALL_OW 451
34819: ST_TO_ADDR
// j := GetBase ( tower ) ;
34820: LD_ADDR_VAR 0 9
34824: PUSH
34825: LD_VAR 0 1
34829: PPUSH
34830: CALL_OW 274
34834: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34835: LD_VAR 0 9
34839: PPUSH
34840: LD_INT 1
34842: PPUSH
34843: CALL_OW 275
34847: PUSH
34848: LD_VAR 0 14
34852: PUSH
34853: LD_INT 1
34855: ARRAY
34856: GREATEREQUAL
34857: PUSH
34858: LD_VAR 0 9
34862: PPUSH
34863: LD_INT 2
34865: PPUSH
34866: CALL_OW 275
34870: PUSH
34871: LD_VAR 0 14
34875: PUSH
34876: LD_INT 2
34878: ARRAY
34879: GREATEREQUAL
34880: AND
34881: PUSH
34882: LD_VAR 0 9
34886: PPUSH
34887: LD_INT 3
34889: PPUSH
34890: CALL_OW 275
34894: PUSH
34895: LD_VAR 0 14
34899: PUSH
34900: LD_INT 3
34902: ARRAY
34903: GREATEREQUAL
34904: AND
34905: IFFALSE 34917
// result := weapon ;
34907: LD_ADDR_VAR 0 3
34911: PUSH
34912: LD_VAR 0 18
34916: ST_TO_ADDR
// end ; end ;
34917: LD_VAR 0 3
34921: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34922: LD_INT 0
34924: PPUSH
34925: PPUSH
// result := true ;
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_INT 1
34933: ST_TO_ADDR
// if array1 = array2 then
34934: LD_VAR 0 1
34938: PUSH
34939: LD_VAR 0 2
34943: EQUAL
34944: IFFALSE 35004
// begin for i = 1 to array1 do
34946: LD_ADDR_VAR 0 4
34950: PUSH
34951: DOUBLE
34952: LD_INT 1
34954: DEC
34955: ST_TO_ADDR
34956: LD_VAR 0 1
34960: PUSH
34961: FOR_TO
34962: IFFALSE 35000
// if array1 [ i ] <> array2 [ i ] then
34964: LD_VAR 0 1
34968: PUSH
34969: LD_VAR 0 4
34973: ARRAY
34974: PUSH
34975: LD_VAR 0 2
34979: PUSH
34980: LD_VAR 0 4
34984: ARRAY
34985: NONEQUAL
34986: IFFALSE 34998
// begin result := false ;
34988: LD_ADDR_VAR 0 3
34992: PUSH
34993: LD_INT 0
34995: ST_TO_ADDR
// break ;
34996: GO 35000
// end ;
34998: GO 34961
35000: POP
35001: POP
// end else
35002: GO 35012
// result := false ;
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_INT 0
35011: ST_TO_ADDR
// end ;
35012: LD_VAR 0 3
35016: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35017: LD_INT 0
35019: PPUSH
35020: PPUSH
// if not array1 or not array2 then
35021: LD_VAR 0 1
35025: NOT
35026: PUSH
35027: LD_VAR 0 2
35031: NOT
35032: OR
35033: IFFALSE 35037
// exit ;
35035: GO 35101
// result := true ;
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 1
35044: ST_TO_ADDR
// for i = 1 to array1 do
35045: LD_ADDR_VAR 0 4
35049: PUSH
35050: DOUBLE
35051: LD_INT 1
35053: DEC
35054: ST_TO_ADDR
35055: LD_VAR 0 1
35059: PUSH
35060: FOR_TO
35061: IFFALSE 35099
// if array1 [ i ] <> array2 [ i ] then
35063: LD_VAR 0 1
35067: PUSH
35068: LD_VAR 0 4
35072: ARRAY
35073: PUSH
35074: LD_VAR 0 2
35078: PUSH
35079: LD_VAR 0 4
35083: ARRAY
35084: NONEQUAL
35085: IFFALSE 35097
// begin result := false ;
35087: LD_ADDR_VAR 0 3
35091: PUSH
35092: LD_INT 0
35094: ST_TO_ADDR
// break ;
35095: GO 35099
// end ;
35097: GO 35060
35099: POP
35100: POP
// end ;
35101: LD_VAR 0 3
35105: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35106: LD_INT 0
35108: PPUSH
35109: PPUSH
35110: PPUSH
// pom := GetBase ( fac ) ;
35111: LD_ADDR_VAR 0 5
35115: PUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL_OW 274
35125: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35126: LD_ADDR_VAR 0 4
35130: PUSH
35131: LD_VAR 0 2
35135: PUSH
35136: LD_INT 1
35138: ARRAY
35139: PPUSH
35140: LD_VAR 0 2
35144: PUSH
35145: LD_INT 2
35147: ARRAY
35148: PPUSH
35149: LD_VAR 0 2
35153: PUSH
35154: LD_INT 3
35156: ARRAY
35157: PPUSH
35158: LD_VAR 0 2
35162: PUSH
35163: LD_INT 4
35165: ARRAY
35166: PPUSH
35167: CALL_OW 449
35171: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35172: LD_ADDR_VAR 0 3
35176: PUSH
35177: LD_VAR 0 5
35181: PPUSH
35182: LD_INT 1
35184: PPUSH
35185: CALL_OW 275
35189: PUSH
35190: LD_VAR 0 4
35194: PUSH
35195: LD_INT 1
35197: ARRAY
35198: GREATEREQUAL
35199: PUSH
35200: LD_VAR 0 5
35204: PPUSH
35205: LD_INT 2
35207: PPUSH
35208: CALL_OW 275
35212: PUSH
35213: LD_VAR 0 4
35217: PUSH
35218: LD_INT 2
35220: ARRAY
35221: GREATEREQUAL
35222: AND
35223: PUSH
35224: LD_VAR 0 5
35228: PPUSH
35229: LD_INT 3
35231: PPUSH
35232: CALL_OW 275
35236: PUSH
35237: LD_VAR 0 4
35241: PUSH
35242: LD_INT 3
35244: ARRAY
35245: GREATEREQUAL
35246: AND
35247: ST_TO_ADDR
// end ;
35248: LD_VAR 0 3
35252: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35253: LD_INT 0
35255: PPUSH
35256: PPUSH
35257: PPUSH
35258: PPUSH
// pom := GetBase ( building ) ;
35259: LD_ADDR_VAR 0 3
35263: PUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 274
35273: ST_TO_ADDR
// if not pom then
35274: LD_VAR 0 3
35278: NOT
35279: IFFALSE 35283
// exit ;
35281: GO 35453
// btype := GetBType ( building ) ;
35283: LD_ADDR_VAR 0 5
35287: PUSH
35288: LD_VAR 0 1
35292: PPUSH
35293: CALL_OW 266
35297: ST_TO_ADDR
// if btype = b_armoury then
35298: LD_VAR 0 5
35302: PUSH
35303: LD_INT 4
35305: EQUAL
35306: IFFALSE 35316
// btype := b_barracks ;
35308: LD_ADDR_VAR 0 5
35312: PUSH
35313: LD_INT 5
35315: ST_TO_ADDR
// if btype = b_depot then
35316: LD_VAR 0 5
35320: PUSH
35321: LD_INT 0
35323: EQUAL
35324: IFFALSE 35334
// btype := b_warehouse ;
35326: LD_ADDR_VAR 0 5
35330: PUSH
35331: LD_INT 1
35333: ST_TO_ADDR
// if btype = b_workshop then
35334: LD_VAR 0 5
35338: PUSH
35339: LD_INT 2
35341: EQUAL
35342: IFFALSE 35352
// btype := b_factory ;
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: LD_INT 3
35351: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35352: LD_ADDR_VAR 0 4
35356: PUSH
35357: LD_VAR 0 5
35361: PPUSH
35362: LD_VAR 0 1
35366: PPUSH
35367: CALL_OW 248
35371: PPUSH
35372: CALL_OW 450
35376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35377: LD_ADDR_VAR 0 2
35381: PUSH
35382: LD_VAR 0 3
35386: PPUSH
35387: LD_INT 1
35389: PPUSH
35390: CALL_OW 275
35394: PUSH
35395: LD_VAR 0 4
35399: PUSH
35400: LD_INT 1
35402: ARRAY
35403: GREATEREQUAL
35404: PUSH
35405: LD_VAR 0 3
35409: PPUSH
35410: LD_INT 2
35412: PPUSH
35413: CALL_OW 275
35417: PUSH
35418: LD_VAR 0 4
35422: PUSH
35423: LD_INT 2
35425: ARRAY
35426: GREATEREQUAL
35427: AND
35428: PUSH
35429: LD_VAR 0 3
35433: PPUSH
35434: LD_INT 3
35436: PPUSH
35437: CALL_OW 275
35441: PUSH
35442: LD_VAR 0 4
35446: PUSH
35447: LD_INT 3
35449: ARRAY
35450: GREATEREQUAL
35451: AND
35452: ST_TO_ADDR
// end ;
35453: LD_VAR 0 2
35457: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35458: LD_INT 0
35460: PPUSH
35461: PPUSH
35462: PPUSH
// pom := GetBase ( building ) ;
35463: LD_ADDR_VAR 0 4
35467: PUSH
35468: LD_VAR 0 1
35472: PPUSH
35473: CALL_OW 274
35477: ST_TO_ADDR
// if not pom then
35478: LD_VAR 0 4
35482: NOT
35483: IFFALSE 35487
// exit ;
35485: GO 35588
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35487: LD_ADDR_VAR 0 5
35491: PUSH
35492: LD_VAR 0 2
35496: PPUSH
35497: LD_VAR 0 1
35501: PPUSH
35502: CALL_OW 248
35506: PPUSH
35507: CALL_OW 450
35511: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35512: LD_ADDR_VAR 0 3
35516: PUSH
35517: LD_VAR 0 4
35521: PPUSH
35522: LD_INT 1
35524: PPUSH
35525: CALL_OW 275
35529: PUSH
35530: LD_VAR 0 5
35534: PUSH
35535: LD_INT 1
35537: ARRAY
35538: GREATEREQUAL
35539: PUSH
35540: LD_VAR 0 4
35544: PPUSH
35545: LD_INT 2
35547: PPUSH
35548: CALL_OW 275
35552: PUSH
35553: LD_VAR 0 5
35557: PUSH
35558: LD_INT 2
35560: ARRAY
35561: GREATEREQUAL
35562: AND
35563: PUSH
35564: LD_VAR 0 4
35568: PPUSH
35569: LD_INT 3
35571: PPUSH
35572: CALL_OW 275
35576: PUSH
35577: LD_VAR 0 5
35581: PUSH
35582: LD_INT 3
35584: ARRAY
35585: GREATEREQUAL
35586: AND
35587: ST_TO_ADDR
// end ;
35588: LD_VAR 0 3
35592: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35593: LD_INT 0
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
// result := false ;
35606: LD_ADDR_VAR 0 8
35610: PUSH
35611: LD_INT 0
35613: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35614: LD_VAR 0 5
35618: NOT
35619: PUSH
35620: LD_VAR 0 1
35624: NOT
35625: OR
35626: PUSH
35627: LD_VAR 0 2
35631: NOT
35632: OR
35633: PUSH
35634: LD_VAR 0 3
35638: NOT
35639: OR
35640: IFFALSE 35644
// exit ;
35642: GO 36458
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35644: LD_ADDR_VAR 0 14
35648: PUSH
35649: LD_VAR 0 1
35653: PPUSH
35654: LD_VAR 0 2
35658: PPUSH
35659: LD_VAR 0 3
35663: PPUSH
35664: LD_VAR 0 4
35668: PPUSH
35669: LD_VAR 0 5
35673: PUSH
35674: LD_INT 1
35676: ARRAY
35677: PPUSH
35678: CALL_OW 248
35682: PPUSH
35683: LD_INT 0
35685: PPUSH
35686: CALL 37295 0 6
35690: ST_TO_ADDR
// if not hexes then
35691: LD_VAR 0 14
35695: NOT
35696: IFFALSE 35700
// exit ;
35698: GO 36458
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35700: LD_ADDR_VAR 0 17
35704: PUSH
35705: LD_VAR 0 5
35709: PPUSH
35710: LD_INT 22
35712: PUSH
35713: LD_VAR 0 13
35717: PPUSH
35718: CALL_OW 255
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: LD_INT 30
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 30
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PPUSH
35759: CALL_OW 72
35763: ST_TO_ADDR
// for i = 1 to hexes do
35764: LD_ADDR_VAR 0 9
35768: PUSH
35769: DOUBLE
35770: LD_INT 1
35772: DEC
35773: ST_TO_ADDR
35774: LD_VAR 0 14
35778: PUSH
35779: FOR_TO
35780: IFFALSE 36456
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35782: LD_ADDR_VAR 0 13
35786: PUSH
35787: LD_VAR 0 14
35791: PUSH
35792: LD_VAR 0 9
35796: ARRAY
35797: PUSH
35798: LD_INT 1
35800: ARRAY
35801: PPUSH
35802: LD_VAR 0 14
35806: PUSH
35807: LD_VAR 0 9
35811: ARRAY
35812: PUSH
35813: LD_INT 2
35815: ARRAY
35816: PPUSH
35817: CALL_OW 428
35821: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35822: LD_VAR 0 14
35826: PUSH
35827: LD_VAR 0 9
35831: ARRAY
35832: PUSH
35833: LD_INT 1
35835: ARRAY
35836: PPUSH
35837: LD_VAR 0 14
35841: PUSH
35842: LD_VAR 0 9
35846: ARRAY
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: PPUSH
35852: CALL_OW 351
35856: PUSH
35857: LD_VAR 0 14
35861: PUSH
35862: LD_VAR 0 9
35866: ARRAY
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: PPUSH
35872: LD_VAR 0 14
35876: PUSH
35877: LD_VAR 0 9
35881: ARRAY
35882: PUSH
35883: LD_INT 2
35885: ARRAY
35886: PPUSH
35887: CALL_OW 488
35891: NOT
35892: OR
35893: PUSH
35894: LD_VAR 0 13
35898: PPUSH
35899: CALL_OW 247
35903: PUSH
35904: LD_INT 3
35906: EQUAL
35907: OR
35908: IFFALSE 35914
// exit ;
35910: POP
35911: POP
35912: GO 36458
// if not tmp then
35914: LD_VAR 0 13
35918: NOT
35919: IFFALSE 35923
// continue ;
35921: GO 35779
// result := true ;
35923: LD_ADDR_VAR 0 8
35927: PUSH
35928: LD_INT 1
35930: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35931: LD_VAR 0 6
35935: PUSH
35936: LD_VAR 0 13
35940: PPUSH
35941: CALL_OW 247
35945: PUSH
35946: LD_INT 2
35948: EQUAL
35949: AND
35950: PUSH
35951: LD_VAR 0 13
35955: PPUSH
35956: CALL_OW 263
35960: PUSH
35961: LD_INT 1
35963: EQUAL
35964: AND
35965: IFFALSE 36129
// begin if IsDrivenBy ( tmp ) then
35967: LD_VAR 0 13
35971: PPUSH
35972: CALL_OW 311
35976: IFFALSE 35980
// continue ;
35978: GO 35779
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35980: LD_VAR 0 6
35984: PPUSH
35985: LD_INT 3
35987: PUSH
35988: LD_INT 60
35990: PUSH
35991: EMPTY
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 3
36000: PUSH
36001: LD_INT 55
36003: PUSH
36004: EMPTY
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PPUSH
36015: CALL_OW 72
36019: IFFALSE 36127
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36021: LD_ADDR_VAR 0 18
36025: PUSH
36026: LD_VAR 0 6
36030: PPUSH
36031: LD_INT 3
36033: PUSH
36034: LD_INT 60
36036: PUSH
36037: EMPTY
36038: LIST
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: LD_INT 55
36049: PUSH
36050: EMPTY
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PPUSH
36061: CALL_OW 72
36065: PUSH
36066: LD_INT 1
36068: ARRAY
36069: ST_TO_ADDR
// if IsInUnit ( driver ) then
36070: LD_VAR 0 18
36074: PPUSH
36075: CALL_OW 310
36079: IFFALSE 36090
// ComExit ( driver ) ;
36081: LD_VAR 0 18
36085: PPUSH
36086: CALL 60479 0 1
// AddComEnterUnit ( driver , tmp ) ;
36090: LD_VAR 0 18
36094: PPUSH
36095: LD_VAR 0 13
36099: PPUSH
36100: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36104: LD_VAR 0 18
36108: PPUSH
36109: LD_VAR 0 7
36113: PPUSH
36114: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36118: LD_VAR 0 18
36122: PPUSH
36123: CALL_OW 181
// end ; continue ;
36127: GO 35779
// end ; if not cleaners or not tmp in cleaners then
36129: LD_VAR 0 6
36133: NOT
36134: PUSH
36135: LD_VAR 0 13
36139: PUSH
36140: LD_VAR 0 6
36144: IN
36145: NOT
36146: OR
36147: IFFALSE 36454
// begin if dep then
36149: LD_VAR 0 17
36153: IFFALSE 36289
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36155: LD_ADDR_VAR 0 16
36159: PUSH
36160: LD_VAR 0 17
36164: PUSH
36165: LD_INT 1
36167: ARRAY
36168: PPUSH
36169: CALL_OW 250
36173: PPUSH
36174: LD_VAR 0 17
36178: PUSH
36179: LD_INT 1
36181: ARRAY
36182: PPUSH
36183: CALL_OW 254
36187: PPUSH
36188: LD_INT 5
36190: PPUSH
36191: CALL_OW 272
36195: PUSH
36196: LD_VAR 0 17
36200: PUSH
36201: LD_INT 1
36203: ARRAY
36204: PPUSH
36205: CALL_OW 251
36209: PPUSH
36210: LD_VAR 0 17
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: PPUSH
36219: CALL_OW 254
36223: PPUSH
36224: LD_INT 5
36226: PPUSH
36227: CALL_OW 273
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36236: LD_VAR 0 16
36240: PUSH
36241: LD_INT 1
36243: ARRAY
36244: PPUSH
36245: LD_VAR 0 16
36249: PUSH
36250: LD_INT 2
36252: ARRAY
36253: PPUSH
36254: CALL_OW 488
36258: IFFALSE 36289
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36260: LD_VAR 0 13
36264: PPUSH
36265: LD_VAR 0 16
36269: PUSH
36270: LD_INT 1
36272: ARRAY
36273: PPUSH
36274: LD_VAR 0 16
36278: PUSH
36279: LD_INT 2
36281: ARRAY
36282: PPUSH
36283: CALL_OW 111
// continue ;
36287: GO 35779
// end ; end ; r := GetDir ( tmp ) ;
36289: LD_ADDR_VAR 0 15
36293: PUSH
36294: LD_VAR 0 13
36298: PPUSH
36299: CALL_OW 254
36303: ST_TO_ADDR
// if r = 5 then
36304: LD_VAR 0 15
36308: PUSH
36309: LD_INT 5
36311: EQUAL
36312: IFFALSE 36322
// r := 0 ;
36314: LD_ADDR_VAR 0 15
36318: PUSH
36319: LD_INT 0
36321: ST_TO_ADDR
// for j = r to 5 do
36322: LD_ADDR_VAR 0 10
36326: PUSH
36327: DOUBLE
36328: LD_VAR 0 15
36332: DEC
36333: ST_TO_ADDR
36334: LD_INT 5
36336: PUSH
36337: FOR_TO
36338: IFFALSE 36452
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36340: LD_ADDR_VAR 0 11
36344: PUSH
36345: LD_VAR 0 13
36349: PPUSH
36350: CALL_OW 250
36354: PPUSH
36355: LD_VAR 0 10
36359: PPUSH
36360: LD_INT 2
36362: PPUSH
36363: CALL_OW 272
36367: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36368: LD_ADDR_VAR 0 12
36372: PUSH
36373: LD_VAR 0 13
36377: PPUSH
36378: CALL_OW 251
36382: PPUSH
36383: LD_VAR 0 10
36387: PPUSH
36388: LD_INT 2
36390: PPUSH
36391: CALL_OW 273
36395: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36396: LD_VAR 0 11
36400: PPUSH
36401: LD_VAR 0 12
36405: PPUSH
36406: CALL_OW 488
36410: PUSH
36411: LD_VAR 0 11
36415: PPUSH
36416: LD_VAR 0 12
36420: PPUSH
36421: CALL_OW 428
36425: NOT
36426: AND
36427: IFFALSE 36450
// begin ComMoveXY ( tmp , _x , _y ) ;
36429: LD_VAR 0 13
36433: PPUSH
36434: LD_VAR 0 11
36438: PPUSH
36439: LD_VAR 0 12
36443: PPUSH
36444: CALL_OW 111
// break ;
36448: GO 36452
// end ; end ;
36450: GO 36337
36452: POP
36453: POP
// end ; end ;
36454: GO 35779
36456: POP
36457: POP
// end ;
36458: LD_VAR 0 8
36462: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36463: LD_INT 0
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
36469: PPUSH
36470: PPUSH
36471: PPUSH
36472: PPUSH
36473: PPUSH
36474: PPUSH
// result := false ;
36475: LD_ADDR_VAR 0 6
36479: PUSH
36480: LD_INT 0
36482: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36483: LD_VAR 0 1
36487: NOT
36488: PUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL_OW 266
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: IN
36509: NOT
36510: OR
36511: PUSH
36512: LD_VAR 0 2
36516: NOT
36517: OR
36518: PUSH
36519: LD_VAR 0 5
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: LD_INT 4
36538: PUSH
36539: LD_INT 5
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: IN
36550: NOT
36551: OR
36552: PUSH
36553: LD_VAR 0 3
36557: PPUSH
36558: LD_VAR 0 4
36562: PPUSH
36563: CALL_OW 488
36567: NOT
36568: OR
36569: IFFALSE 36573
// exit ;
36571: GO 37290
// pom := GetBase ( depot ) ;
36573: LD_ADDR_VAR 0 10
36577: PUSH
36578: LD_VAR 0 1
36582: PPUSH
36583: CALL_OW 274
36587: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36588: LD_ADDR_VAR 0 11
36592: PUSH
36593: LD_VAR 0 2
36597: PPUSH
36598: LD_VAR 0 1
36602: PPUSH
36603: CALL_OW 248
36607: PPUSH
36608: CALL_OW 450
36612: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36613: LD_VAR 0 10
36617: PPUSH
36618: LD_INT 1
36620: PPUSH
36621: CALL_OW 275
36625: PUSH
36626: LD_VAR 0 11
36630: PUSH
36631: LD_INT 1
36633: ARRAY
36634: GREATEREQUAL
36635: PUSH
36636: LD_VAR 0 10
36640: PPUSH
36641: LD_INT 2
36643: PPUSH
36644: CALL_OW 275
36648: PUSH
36649: LD_VAR 0 11
36653: PUSH
36654: LD_INT 2
36656: ARRAY
36657: GREATEREQUAL
36658: AND
36659: PUSH
36660: LD_VAR 0 10
36664: PPUSH
36665: LD_INT 3
36667: PPUSH
36668: CALL_OW 275
36672: PUSH
36673: LD_VAR 0 11
36677: PUSH
36678: LD_INT 3
36680: ARRAY
36681: GREATEREQUAL
36682: AND
36683: NOT
36684: IFFALSE 36688
// exit ;
36686: GO 37290
// if GetBType ( depot ) = b_depot then
36688: LD_VAR 0 1
36692: PPUSH
36693: CALL_OW 266
36697: PUSH
36698: LD_INT 0
36700: EQUAL
36701: IFFALSE 36713
// dist := 28 else
36703: LD_ADDR_VAR 0 14
36707: PUSH
36708: LD_INT 28
36710: ST_TO_ADDR
36711: GO 36721
// dist := 36 ;
36713: LD_ADDR_VAR 0 14
36717: PUSH
36718: LD_INT 36
36720: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36721: LD_VAR 0 1
36725: PPUSH
36726: LD_VAR 0 3
36730: PPUSH
36731: LD_VAR 0 4
36735: PPUSH
36736: CALL_OW 297
36740: PUSH
36741: LD_VAR 0 14
36745: GREATER
36746: IFFALSE 36750
// exit ;
36748: GO 37290
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36750: LD_ADDR_VAR 0 12
36754: PUSH
36755: LD_VAR 0 2
36759: PPUSH
36760: LD_VAR 0 3
36764: PPUSH
36765: LD_VAR 0 4
36769: PPUSH
36770: LD_VAR 0 5
36774: PPUSH
36775: LD_VAR 0 1
36779: PPUSH
36780: CALL_OW 248
36784: PPUSH
36785: LD_INT 0
36787: PPUSH
36788: CALL 37295 0 6
36792: ST_TO_ADDR
// if not hexes then
36793: LD_VAR 0 12
36797: NOT
36798: IFFALSE 36802
// exit ;
36800: GO 37290
// hex := GetHexInfo ( x , y ) ;
36802: LD_ADDR_VAR 0 15
36806: PUSH
36807: LD_VAR 0 3
36811: PPUSH
36812: LD_VAR 0 4
36816: PPUSH
36817: CALL_OW 546
36821: ST_TO_ADDR
// if hex [ 1 ] then
36822: LD_VAR 0 15
36826: PUSH
36827: LD_INT 1
36829: ARRAY
36830: IFFALSE 36834
// exit ;
36832: GO 37290
// height := hex [ 2 ] ;
36834: LD_ADDR_VAR 0 13
36838: PUSH
36839: LD_VAR 0 15
36843: PUSH
36844: LD_INT 2
36846: ARRAY
36847: ST_TO_ADDR
// for i = 1 to hexes do
36848: LD_ADDR_VAR 0 7
36852: PUSH
36853: DOUBLE
36854: LD_INT 1
36856: DEC
36857: ST_TO_ADDR
36858: LD_VAR 0 12
36862: PUSH
36863: FOR_TO
36864: IFFALSE 37194
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36866: LD_VAR 0 12
36870: PUSH
36871: LD_VAR 0 7
36875: ARRAY
36876: PUSH
36877: LD_INT 1
36879: ARRAY
36880: PPUSH
36881: LD_VAR 0 12
36885: PUSH
36886: LD_VAR 0 7
36890: ARRAY
36891: PUSH
36892: LD_INT 2
36894: ARRAY
36895: PPUSH
36896: CALL_OW 488
36900: NOT
36901: PUSH
36902: LD_VAR 0 12
36906: PUSH
36907: LD_VAR 0 7
36911: ARRAY
36912: PUSH
36913: LD_INT 1
36915: ARRAY
36916: PPUSH
36917: LD_VAR 0 12
36921: PUSH
36922: LD_VAR 0 7
36926: ARRAY
36927: PUSH
36928: LD_INT 2
36930: ARRAY
36931: PPUSH
36932: CALL_OW 428
36936: PUSH
36937: LD_INT 0
36939: GREATER
36940: OR
36941: PUSH
36942: LD_VAR 0 12
36946: PUSH
36947: LD_VAR 0 7
36951: ARRAY
36952: PUSH
36953: LD_INT 1
36955: ARRAY
36956: PPUSH
36957: LD_VAR 0 12
36961: PUSH
36962: LD_VAR 0 7
36966: ARRAY
36967: PUSH
36968: LD_INT 2
36970: ARRAY
36971: PPUSH
36972: CALL_OW 351
36976: OR
36977: IFFALSE 36983
// exit ;
36979: POP
36980: POP
36981: GO 37290
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36983: LD_ADDR_VAR 0 8
36987: PUSH
36988: LD_VAR 0 12
36992: PUSH
36993: LD_VAR 0 7
36997: ARRAY
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: LD_VAR 0 12
37007: PUSH
37008: LD_VAR 0 7
37012: ARRAY
37013: PUSH
37014: LD_INT 2
37016: ARRAY
37017: PPUSH
37018: CALL_OW 546
37022: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37023: LD_VAR 0 8
37027: PUSH
37028: LD_INT 1
37030: ARRAY
37031: PUSH
37032: LD_VAR 0 8
37036: PUSH
37037: LD_INT 2
37039: ARRAY
37040: PUSH
37041: LD_VAR 0 13
37045: PUSH
37046: LD_INT 2
37048: PLUS
37049: GREATER
37050: OR
37051: PUSH
37052: LD_VAR 0 8
37056: PUSH
37057: LD_INT 2
37059: ARRAY
37060: PUSH
37061: LD_VAR 0 13
37065: PUSH
37066: LD_INT 2
37068: MINUS
37069: LESS
37070: OR
37071: PUSH
37072: LD_VAR 0 8
37076: PUSH
37077: LD_INT 3
37079: ARRAY
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 8
37086: PUSH
37087: LD_INT 9
37089: PUSH
37090: LD_INT 10
37092: PUSH
37093: LD_INT 11
37095: PUSH
37096: LD_INT 12
37098: PUSH
37099: LD_INT 13
37101: PUSH
37102: LD_INT 16
37104: PUSH
37105: LD_INT 17
37107: PUSH
37108: LD_INT 18
37110: PUSH
37111: LD_INT 19
37113: PUSH
37114: LD_INT 20
37116: PUSH
37117: LD_INT 21
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: IN
37135: NOT
37136: OR
37137: PUSH
37138: LD_VAR 0 8
37142: PUSH
37143: LD_INT 5
37145: ARRAY
37146: NOT
37147: OR
37148: PUSH
37149: LD_VAR 0 8
37153: PUSH
37154: LD_INT 6
37156: ARRAY
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 7
37166: PUSH
37167: LD_INT 9
37169: PUSH
37170: LD_INT 10
37172: PUSH
37173: LD_INT 11
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: IN
37184: NOT
37185: OR
37186: IFFALSE 37192
// exit ;
37188: POP
37189: POP
37190: GO 37290
// end ;
37192: GO 36863
37194: POP
37195: POP
// side := GetSide ( depot ) ;
37196: LD_ADDR_VAR 0 9
37200: PUSH
37201: LD_VAR 0 1
37205: PPUSH
37206: CALL_OW 255
37210: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37211: LD_VAR 0 9
37215: PPUSH
37216: LD_VAR 0 3
37220: PPUSH
37221: LD_VAR 0 4
37225: PPUSH
37226: LD_INT 20
37228: PPUSH
37229: CALL 29611 0 4
37233: PUSH
37234: LD_INT 4
37236: ARRAY
37237: IFFALSE 37241
// exit ;
37239: GO 37290
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37241: LD_VAR 0 2
37245: PUSH
37246: LD_INT 29
37248: PUSH
37249: LD_INT 30
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: IN
37256: PUSH
37257: LD_VAR 0 3
37261: PPUSH
37262: LD_VAR 0 4
37266: PPUSH
37267: LD_VAR 0 9
37271: PPUSH
37272: CALL_OW 440
37276: NOT
37277: AND
37278: IFFALSE 37282
// exit ;
37280: GO 37290
// result := true ;
37282: LD_ADDR_VAR 0 6
37286: PUSH
37287: LD_INT 1
37289: ST_TO_ADDR
// end ;
37290: LD_VAR 0 6
37294: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37295: LD_INT 0
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
37306: PPUSH
37307: PPUSH
37308: PPUSH
37309: PPUSH
37310: PPUSH
37311: PPUSH
37312: PPUSH
37313: PPUSH
37314: PPUSH
37315: PPUSH
37316: PPUSH
37317: PPUSH
37318: PPUSH
37319: PPUSH
37320: PPUSH
37321: PPUSH
37322: PPUSH
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
37332: PPUSH
37333: PPUSH
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
37350: PPUSH
37351: PPUSH
37352: PPUSH
37353: PPUSH
37354: PPUSH
// result = [ ] ;
37355: LD_ADDR_VAR 0 7
37359: PUSH
37360: EMPTY
37361: ST_TO_ADDR
// temp_list = [ ] ;
37362: LD_ADDR_VAR 0 9
37366: PUSH
37367: EMPTY
37368: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37369: LD_VAR 0 4
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: LD_INT 3
37385: PUSH
37386: LD_INT 4
37388: PUSH
37389: LD_INT 5
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: IN
37400: NOT
37401: PUSH
37402: LD_VAR 0 1
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: IN
37417: PUSH
37418: LD_VAR 0 5
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: LD_INT 3
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: IN
37437: NOT
37438: AND
37439: OR
37440: IFFALSE 37444
// exit ;
37442: GO 55835
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37444: LD_VAR 0 1
37448: PUSH
37449: LD_INT 6
37451: PUSH
37452: LD_INT 7
37454: PUSH
37455: LD_INT 8
37457: PUSH
37458: LD_INT 13
37460: PUSH
37461: LD_INT 12
37463: PUSH
37464: LD_INT 15
37466: PUSH
37467: LD_INT 11
37469: PUSH
37470: LD_INT 14
37472: PUSH
37473: LD_INT 10
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: IN
37487: IFFALSE 37497
// btype = b_lab ;
37489: LD_ADDR_VAR 0 1
37493: PUSH
37494: LD_INT 6
37496: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37497: LD_VAR 0 6
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: IN
37516: NOT
37517: PUSH
37518: LD_VAR 0 1
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: LD_INT 6
37537: PUSH
37538: LD_INT 36
37540: PUSH
37541: LD_INT 4
37543: PUSH
37544: LD_INT 5
37546: PUSH
37547: LD_INT 31
37549: PUSH
37550: LD_INT 32
37552: PUSH
37553: LD_INT 33
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: IN
37569: NOT
37570: PUSH
37571: LD_VAR 0 6
37575: PUSH
37576: LD_INT 1
37578: EQUAL
37579: AND
37580: OR
37581: PUSH
37582: LD_VAR 0 1
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 3
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: IN
37597: NOT
37598: PUSH
37599: LD_VAR 0 6
37603: PUSH
37604: LD_INT 2
37606: EQUAL
37607: AND
37608: OR
37609: IFFALSE 37619
// mode = 0 ;
37611: LD_ADDR_VAR 0 6
37615: PUSH
37616: LD_INT 0
37618: ST_TO_ADDR
// case mode of 0 :
37619: LD_VAR 0 6
37623: PUSH
37624: LD_INT 0
37626: DOUBLE
37627: EQUAL
37628: IFTRUE 37632
37630: GO 49085
37632: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37633: LD_ADDR_VAR 0 11
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: LD_INT 2
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37826: LD_ADDR_VAR 0 12
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 2
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 3
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 3
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38022: LD_ADDR_VAR 0 13
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 2
38169: NEG
38170: PUSH
38171: LD_INT 3
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 3
38181: NEG
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 3
38193: NEG
38194: PUSH
38195: LD_INT 3
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38221: LD_ADDR_VAR 0 14
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 3
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 3
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38417: LD_ADDR_VAR 0 15
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 3
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 3
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38610: LD_ADDR_VAR 0 16
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 2
38745: NEG
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 3
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 3
38767: PUSH
38768: LD_INT 3
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 3
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38803: LD_ADDR_VAR 0 17
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 2
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: LD_INT 2
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: NEG
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39033: LD_ADDR_VAR 0 18
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39263: LD_ADDR_VAR 0 19
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39493: LD_ADDR_VAR 0 20
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39723: LD_ADDR_VAR 0 21
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: LD_INT 2
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39953: LD_ADDR_VAR 0 22
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40183: LD_ADDR_VAR 0 23
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: LD_INT 3
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 3
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 2
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40463: LD_ADDR_VAR 0 24
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 3
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 3
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40739: LD_ADDR_VAR 0 25
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 2
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 3
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: LD_INT 3
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: LD_INT 3
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41013: LD_ADDR_VAR 0 26
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 2
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: NEG
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 3
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41289: LD_ADDR_VAR 0 27
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 3
41522: NEG
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 3
41534: NEG
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41569: LD_ADDR_VAR 0 28
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: LD_INT 3
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 3
41804: NEG
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 3
41816: NEG
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41851: LD_ADDR_VAR 0 29
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 3
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 3
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 3
42095: NEG
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42130: LD_ADDR_VAR 0 30
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: LD_INT 3
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 2
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: NEG
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42408: LD_ADDR_VAR 0 31
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: NEG
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 3
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42686: LD_ADDR_VAR 0 32
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 3
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 3
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42964: LD_ADDR_VAR 0 33
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 2
43142: NEG
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 3
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43243: LD_ADDR_VAR 0 34
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: NEG
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 2
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 3
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 3
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: LD_INT 3
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 3
43488: NEG
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43523: LD_ADDR_VAR 0 35
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43635: LD_ADDR_VAR 0 36
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43747: LD_ADDR_VAR 0 37
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43859: LD_ADDR_VAR 0 38
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43971: LD_ADDR_VAR 0 39
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44083: LD_ADDR_VAR 0 40
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44195: LD_ADDR_VAR 0 41
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: LD_INT 3
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: LD_INT 3
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 3
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 3
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 3
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: LD_INT 3
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44545: LD_ADDR_VAR 0 42
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: LD_INT 3
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 3
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 3
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: LD_INT 3
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 3
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 3
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 3
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 3
44842: NEG
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 3
44854: NEG
44855: PUSH
44856: LD_INT 3
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44895: LD_ADDR_VAR 0 43
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 3
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 3
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 3
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 3
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 3
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 3
45191: NEG
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 3
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45243: LD_ADDR_VAR 0 44
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 3
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 3
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: LD_INT 3
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: LD_INT 3
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45593: LD_ADDR_VAR 0 45
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 3
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45943: LD_ADDR_VAR 0 46
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 3
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46291: LD_ADDR_VAR 0 47
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46442: LD_ADDR_VAR 0 48
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46589: LD_ADDR_VAR 0 49
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46733: LD_ADDR_VAR 0 50
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46877: LD_ADDR_VAR 0 51
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47024: LD_ADDR_VAR 0 52
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47175: LD_ADDR_VAR 0 53
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47405: LD_ADDR_VAR 0 54
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47635: LD_ADDR_VAR 0 55
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47865: LD_ADDR_VAR 0 56
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48095: LD_ADDR_VAR 0 57
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48325: LD_ADDR_VAR 0 58
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48555: LD_ADDR_VAR 0 59
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48643: LD_ADDR_VAR 0 60
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48731: LD_ADDR_VAR 0 61
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48819: LD_ADDR_VAR 0 62
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48907: LD_ADDR_VAR 0 63
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48995: LD_ADDR_VAR 0 64
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: ST_TO_ADDR
// end ; 1 :
49083: GO 54980
49085: LD_INT 1
49087: DOUBLE
49088: EQUAL
49089: IFTRUE 49093
49091: GO 51716
49093: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49094: LD_ADDR_VAR 0 11
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 3
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 3
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49138: LD_ADDR_VAR 0 12
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 3
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49179: LD_ADDR_VAR 0 13
49183: PUSH
49184: LD_INT 3
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: LD_INT 3
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49219: LD_ADDR_VAR 0 14
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 3
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 3
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49260: LD_ADDR_VAR 0 15
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49304: LD_ADDR_VAR 0 16
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: LD_INT 3
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: LIST
49349: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49350: LD_ADDR_VAR 0 17
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 3
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49394: LD_ADDR_VAR 0 18
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49435: LD_ADDR_VAR 0 19
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: LD_INT 3
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: LD_INT 3
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: LIST
49474: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49475: LD_ADDR_VAR 0 20
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 3
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49516: LD_ADDR_VAR 0 21
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49560: LD_ADDR_VAR 0 22
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: LIST
49605: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49606: LD_ADDR_VAR 0 23
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 3
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 4
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49650: LD_ADDR_VAR 0 24
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 4
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: LIST
49690: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49691: LD_ADDR_VAR 0 25
49695: PUSH
49696: LD_INT 3
49698: PUSH
49699: LD_INT 3
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 4
49708: PUSH
49709: LD_INT 3
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: LD_INT 4
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: LIST
49730: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49731: LD_ADDR_VAR 0 26
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 4
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 3
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: LIST
49771: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49772: LD_ADDR_VAR 0 27
49776: PUSH
49777: LD_INT 3
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 3
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 4
49801: NEG
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49816: LD_ADDR_VAR 0 28
49820: PUSH
49821: LD_INT 3
49823: NEG
49824: PUSH
49825: LD_INT 3
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: NEG
49836: PUSH
49837: LD_INT 4
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 4
49847: NEG
49848: PUSH
49849: LD_INT 3
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49862: LD_ADDR_VAR 0 29
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 3
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 4
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 4
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 5
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 5
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 4
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 6
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 6
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 5
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50017: LD_ADDR_VAR 0 30
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 3
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 3
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 4
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 4
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 4
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 5
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 5
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 5
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 6
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 6
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50160: LD_ADDR_VAR 0 31
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 4
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 4
50207: PUSH
50208: LD_INT 4
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 4
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 5
50227: PUSH
50228: LD_INT 4
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 5
50237: PUSH
50238: LD_INT 5
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 4
50247: PUSH
50248: LD_INT 5
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 6
50257: PUSH
50258: LD_INT 5
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 6
50267: PUSH
50268: LD_INT 6
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 5
50277: PUSH
50278: LD_INT 6
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50299: LD_ADDR_VAR 0 32
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 4
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 4
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 5
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 5
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 4
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 6
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 6
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 5
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50442: LD_ADDR_VAR 0 33
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 4
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 4
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 4
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 5
50528: NEG
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 5
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 5
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 6
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 6
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50597: LD_ADDR_VAR 0 34
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: NEG
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 3
50640: NEG
50641: PUSH
50642: LD_INT 4
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 4
50652: NEG
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 4
50664: NEG
50665: PUSH
50666: LD_INT 4
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 4
50676: NEG
50677: PUSH
50678: LD_INT 5
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 5
50688: NEG
50689: PUSH
50690: LD_INT 4
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 5
50700: NEG
50701: PUSH
50702: LD_INT 5
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 5
50712: NEG
50713: PUSH
50714: LD_INT 6
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 6
50724: NEG
50725: PUSH
50726: LD_INT 5
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 6
50736: NEG
50737: PUSH
50738: LD_INT 6
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50760: LD_ADDR_VAR 0 41
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50804: LD_ADDR_VAR 0 42
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50845: LD_ADDR_VAR 0 43
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50885: LD_ADDR_VAR 0 44
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 3
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: LIST
50925: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50926: LD_ADDR_VAR 0 45
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 3
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50970: LD_ADDR_VAR 0 46
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 3
51001: NEG
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: LIST
51015: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51016: LD_ADDR_VAR 0 47
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 3
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51049: LD_ADDR_VAR 0 48
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51080: LD_ADDR_VAR 0 49
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51109: LD_ADDR_VAR 0 50
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51138: LD_ADDR_VAR 0 51
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51169: LD_ADDR_VAR 0 52
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: NEG
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51202: LD_ADDR_VAR 0 53
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 3
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51246: LD_ADDR_VAR 0 54
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51287: LD_ADDR_VAR 0 55
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51327: LD_ADDR_VAR 0 56
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: LIST
51367: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51368: LD_ADDR_VAR 0 57
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 3
51386: NEG
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51412: LD_ADDR_VAR 0 58
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51458: LD_ADDR_VAR 0 59
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51502: LD_ADDR_VAR 0 60
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: LIST
51542: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51543: LD_ADDR_VAR 0 61
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: LIST
51582: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51583: LD_ADDR_VAR 0 62
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51624: LD_ADDR_VAR 0 63
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: LIST
51667: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51668: LD_ADDR_VAR 0 64
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// end ; 2 :
51714: GO 54980
51716: LD_INT 2
51718: DOUBLE
51719: EQUAL
51720: IFTRUE 51724
51722: GO 54979
51724: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51725: LD_ADDR_VAR 0 29
51729: PUSH
51730: LD_INT 4
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 4
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 5
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 5
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 4
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 5
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: LD_INT 3
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 4
51855: PUSH
51856: LD_INT 4
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 4
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 3
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 4
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 4
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 4
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 5
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 5
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 4
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 5
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 3
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 4
52064: NEG
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 4
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 4
52087: NEG
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 4
52110: NEG
52111: PUSH
52112: LD_INT 4
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 4
52122: NEG
52123: PUSH
52124: LD_INT 5
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: LD_INT 4
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: LD_INT 3
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 4
52158: NEG
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 5
52170: NEG
52171: PUSH
52172: LD_INT 4
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 5
52182: NEG
52183: PUSH
52184: LD_INT 5
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: NEG
52195: PUSH
52196: LD_INT 5
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 5
52206: NEG
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52263: LD_ADDR_VAR 0 30
52267: PUSH
52268: LD_INT 4
52270: PUSH
52271: LD_INT 4
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 5
52290: PUSH
52291: LD_INT 4
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 5
52300: PUSH
52301: LD_INT 5
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 4
52310: PUSH
52311: LD_INT 5
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: LD_INT 4
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: LD_INT 3
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 5
52340: PUSH
52341: LD_INT 3
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: LD_INT 5
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 4
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 4
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 3
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 4
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 4
52453: NEG
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 4
52464: NEG
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 4
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 5
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 5
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 5
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 3
52555: NEG
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: LD_INT 4
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 4
52615: NEG
52616: PUSH
52617: LD_INT 3
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 4
52627: NEG
52628: PUSH
52629: LD_INT 4
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: LD_INT 4
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 4
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 4
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 5
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 4
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 3
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 3
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 4
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 5
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: LD_INT 5
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52810: LD_ADDR_VAR 0 31
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 4
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 4
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 5
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 5
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 4
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 3
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 5
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: NEG
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 4
52966: NEG
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 4
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 4
52989: NEG
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 4
53012: NEG
53013: PUSH
53014: LD_INT 4
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 4
53024: NEG
53025: PUSH
53026: LD_INT 5
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: LD_INT 4
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 4
53060: NEG
53061: PUSH
53062: LD_INT 3
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 5
53072: NEG
53073: PUSH
53074: LD_INT 4
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 5
53084: NEG
53085: PUSH
53086: LD_INT 5
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: LD_INT 5
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 5
53108: NEG
53109: PUSH
53110: LD_INT 3
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 4
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 3
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 4
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: LD_INT 4
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 4
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 4
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 5
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 5
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 4
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 5
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53360: LD_ADDR_VAR 0 32
53364: PUSH
53365: LD_INT 4
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 4
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 3
53390: NEG
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 4
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 5
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 5
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 5
53446: NEG
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: LD_INT 4
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 4
53529: NEG
53530: PUSH
53531: LD_INT 3
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 4
53541: NEG
53542: PUSH
53543: LD_INT 4
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 4
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 4
53565: NEG
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 4
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 5
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 4
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 3
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 4
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 5
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 5
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 4
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 4
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 4
53772: PUSH
53773: LD_INT 4
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 4
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 5
53792: PUSH
53793: LD_INT 4
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 5
53802: PUSH
53803: LD_INT 5
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 4
53812: PUSH
53813: LD_INT 5
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: LD_INT 4
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 5
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: LD_INT 5
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53907: LD_ADDR_VAR 0 33
53911: PUSH
53912: LD_INT 4
53914: NEG
53915: PUSH
53916: LD_INT 4
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 4
53926: NEG
53927: PUSH
53928: LD_INT 5
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: LD_INT 4
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 4
53962: NEG
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 5
53974: NEG
53975: PUSH
53976: LD_INT 4
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 5
53986: NEG
53987: PUSH
53988: LD_INT 5
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: LD_INT 5
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 5
54010: NEG
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 3
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 4
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: LD_INT 3
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 4
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 4
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 4
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 4
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 5
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 5
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 4
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 3
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 5
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: LD_INT 3
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 4
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 4
54247: PUSH
54248: LD_INT 4
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: LD_INT 4
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 4
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 4
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 4
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 4
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 5
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 5
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 4
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 3
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 5
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 3
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54445: LD_ADDR_VAR 0 34
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 4
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 5
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 4
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 3
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 5
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: LD_INT 3
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: LD_INT 5
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 4
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 4
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 4
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 4
54647: PUSH
54648: LD_INT 4
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 4
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 5
54667: PUSH
54668: LD_INT 4
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 5
54677: PUSH
54678: LD_INT 5
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 4
54687: PUSH
54688: LD_INT 5
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 3
54697: PUSH
54698: LD_INT 4
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 3
54707: PUSH
54708: LD_INT 3
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 5
54717: PUSH
54718: LD_INT 3
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: LD_INT 5
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: LD_INT 4
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 4
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 4
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 4
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 4
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: NEG
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 4
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 5
54886: NEG
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 5
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 5
54909: NEG
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: NEG
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: ST_TO_ADDR
// end ; end ;
54977: GO 54980
54979: POP
// case btype of b_depot , b_warehouse :
54980: LD_VAR 0 1
54984: PUSH
54985: LD_INT 0
54987: DOUBLE
54988: EQUAL
54989: IFTRUE 54999
54991: LD_INT 1
54993: DOUBLE
54994: EQUAL
54995: IFTRUE 54999
54997: GO 55200
54999: POP
// case nation of nation_american :
55000: LD_VAR 0 5
55004: PUSH
55005: LD_INT 1
55007: DOUBLE
55008: EQUAL
55009: IFTRUE 55013
55011: GO 55069
55013: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55014: LD_ADDR_VAR 0 9
55018: PUSH
55019: LD_VAR 0 11
55023: PUSH
55024: LD_VAR 0 12
55028: PUSH
55029: LD_VAR 0 13
55033: PUSH
55034: LD_VAR 0 14
55038: PUSH
55039: LD_VAR 0 15
55043: PUSH
55044: LD_VAR 0 16
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: PUSH
55057: LD_VAR 0 4
55061: PUSH
55062: LD_INT 1
55064: PLUS
55065: ARRAY
55066: ST_TO_ADDR
55067: GO 55198
55069: LD_INT 2
55071: DOUBLE
55072: EQUAL
55073: IFTRUE 55077
55075: GO 55133
55077: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55078: LD_ADDR_VAR 0 9
55082: PUSH
55083: LD_VAR 0 17
55087: PUSH
55088: LD_VAR 0 18
55092: PUSH
55093: LD_VAR 0 19
55097: PUSH
55098: LD_VAR 0 20
55102: PUSH
55103: LD_VAR 0 21
55107: PUSH
55108: LD_VAR 0 22
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: PUSH
55121: LD_VAR 0 4
55125: PUSH
55126: LD_INT 1
55128: PLUS
55129: ARRAY
55130: ST_TO_ADDR
55131: GO 55198
55133: LD_INT 3
55135: DOUBLE
55136: EQUAL
55137: IFTRUE 55141
55139: GO 55197
55141: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55142: LD_ADDR_VAR 0 9
55146: PUSH
55147: LD_VAR 0 23
55151: PUSH
55152: LD_VAR 0 24
55156: PUSH
55157: LD_VAR 0 25
55161: PUSH
55162: LD_VAR 0 26
55166: PUSH
55167: LD_VAR 0 27
55171: PUSH
55172: LD_VAR 0 28
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: PUSH
55185: LD_VAR 0 4
55189: PUSH
55190: LD_INT 1
55192: PLUS
55193: ARRAY
55194: ST_TO_ADDR
55195: GO 55198
55197: POP
55198: GO 55753
55200: LD_INT 2
55202: DOUBLE
55203: EQUAL
55204: IFTRUE 55214
55206: LD_INT 3
55208: DOUBLE
55209: EQUAL
55210: IFTRUE 55214
55212: GO 55270
55214: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55215: LD_ADDR_VAR 0 9
55219: PUSH
55220: LD_VAR 0 29
55224: PUSH
55225: LD_VAR 0 30
55229: PUSH
55230: LD_VAR 0 31
55234: PUSH
55235: LD_VAR 0 32
55239: PUSH
55240: LD_VAR 0 33
55244: PUSH
55245: LD_VAR 0 34
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: PUSH
55258: LD_VAR 0 4
55262: PUSH
55263: LD_INT 1
55265: PLUS
55266: ARRAY
55267: ST_TO_ADDR
55268: GO 55753
55270: LD_INT 16
55272: DOUBLE
55273: EQUAL
55274: IFTRUE 55332
55276: LD_INT 17
55278: DOUBLE
55279: EQUAL
55280: IFTRUE 55332
55282: LD_INT 18
55284: DOUBLE
55285: EQUAL
55286: IFTRUE 55332
55288: LD_INT 19
55290: DOUBLE
55291: EQUAL
55292: IFTRUE 55332
55294: LD_INT 22
55296: DOUBLE
55297: EQUAL
55298: IFTRUE 55332
55300: LD_INT 20
55302: DOUBLE
55303: EQUAL
55304: IFTRUE 55332
55306: LD_INT 21
55308: DOUBLE
55309: EQUAL
55310: IFTRUE 55332
55312: LD_INT 23
55314: DOUBLE
55315: EQUAL
55316: IFTRUE 55332
55318: LD_INT 24
55320: DOUBLE
55321: EQUAL
55322: IFTRUE 55332
55324: LD_INT 25
55326: DOUBLE
55327: EQUAL
55328: IFTRUE 55332
55330: GO 55388
55332: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55333: LD_ADDR_VAR 0 9
55337: PUSH
55338: LD_VAR 0 35
55342: PUSH
55343: LD_VAR 0 36
55347: PUSH
55348: LD_VAR 0 37
55352: PUSH
55353: LD_VAR 0 38
55357: PUSH
55358: LD_VAR 0 39
55362: PUSH
55363: LD_VAR 0 40
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: PUSH
55376: LD_VAR 0 4
55380: PUSH
55381: LD_INT 1
55383: PLUS
55384: ARRAY
55385: ST_TO_ADDR
55386: GO 55753
55388: LD_INT 6
55390: DOUBLE
55391: EQUAL
55392: IFTRUE 55444
55394: LD_INT 7
55396: DOUBLE
55397: EQUAL
55398: IFTRUE 55444
55400: LD_INT 8
55402: DOUBLE
55403: EQUAL
55404: IFTRUE 55444
55406: LD_INT 13
55408: DOUBLE
55409: EQUAL
55410: IFTRUE 55444
55412: LD_INT 12
55414: DOUBLE
55415: EQUAL
55416: IFTRUE 55444
55418: LD_INT 15
55420: DOUBLE
55421: EQUAL
55422: IFTRUE 55444
55424: LD_INT 11
55426: DOUBLE
55427: EQUAL
55428: IFTRUE 55444
55430: LD_INT 14
55432: DOUBLE
55433: EQUAL
55434: IFTRUE 55444
55436: LD_INT 10
55438: DOUBLE
55439: EQUAL
55440: IFTRUE 55444
55442: GO 55500
55444: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55445: LD_ADDR_VAR 0 9
55449: PUSH
55450: LD_VAR 0 41
55454: PUSH
55455: LD_VAR 0 42
55459: PUSH
55460: LD_VAR 0 43
55464: PUSH
55465: LD_VAR 0 44
55469: PUSH
55470: LD_VAR 0 45
55474: PUSH
55475: LD_VAR 0 46
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: PUSH
55488: LD_VAR 0 4
55492: PUSH
55493: LD_INT 1
55495: PLUS
55496: ARRAY
55497: ST_TO_ADDR
55498: GO 55753
55500: LD_INT 36
55502: DOUBLE
55503: EQUAL
55504: IFTRUE 55508
55506: GO 55564
55508: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55509: LD_ADDR_VAR 0 9
55513: PUSH
55514: LD_VAR 0 47
55518: PUSH
55519: LD_VAR 0 48
55523: PUSH
55524: LD_VAR 0 49
55528: PUSH
55529: LD_VAR 0 50
55533: PUSH
55534: LD_VAR 0 51
55538: PUSH
55539: LD_VAR 0 52
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: PUSH
55552: LD_VAR 0 4
55556: PUSH
55557: LD_INT 1
55559: PLUS
55560: ARRAY
55561: ST_TO_ADDR
55562: GO 55753
55564: LD_INT 4
55566: DOUBLE
55567: EQUAL
55568: IFTRUE 55590
55570: LD_INT 5
55572: DOUBLE
55573: EQUAL
55574: IFTRUE 55590
55576: LD_INT 34
55578: DOUBLE
55579: EQUAL
55580: IFTRUE 55590
55582: LD_INT 37
55584: DOUBLE
55585: EQUAL
55586: IFTRUE 55590
55588: GO 55646
55590: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55591: LD_ADDR_VAR 0 9
55595: PUSH
55596: LD_VAR 0 53
55600: PUSH
55601: LD_VAR 0 54
55605: PUSH
55606: LD_VAR 0 55
55610: PUSH
55611: LD_VAR 0 56
55615: PUSH
55616: LD_VAR 0 57
55620: PUSH
55621: LD_VAR 0 58
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: PUSH
55634: LD_VAR 0 4
55638: PUSH
55639: LD_INT 1
55641: PLUS
55642: ARRAY
55643: ST_TO_ADDR
55644: GO 55753
55646: LD_INT 31
55648: DOUBLE
55649: EQUAL
55650: IFTRUE 55696
55652: LD_INT 32
55654: DOUBLE
55655: EQUAL
55656: IFTRUE 55696
55658: LD_INT 33
55660: DOUBLE
55661: EQUAL
55662: IFTRUE 55696
55664: LD_INT 27
55666: DOUBLE
55667: EQUAL
55668: IFTRUE 55696
55670: LD_INT 26
55672: DOUBLE
55673: EQUAL
55674: IFTRUE 55696
55676: LD_INT 28
55678: DOUBLE
55679: EQUAL
55680: IFTRUE 55696
55682: LD_INT 29
55684: DOUBLE
55685: EQUAL
55686: IFTRUE 55696
55688: LD_INT 30
55690: DOUBLE
55691: EQUAL
55692: IFTRUE 55696
55694: GO 55752
55696: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55697: LD_ADDR_VAR 0 9
55701: PUSH
55702: LD_VAR 0 59
55706: PUSH
55707: LD_VAR 0 60
55711: PUSH
55712: LD_VAR 0 61
55716: PUSH
55717: LD_VAR 0 62
55721: PUSH
55722: LD_VAR 0 63
55726: PUSH
55727: LD_VAR 0 64
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: PUSH
55740: LD_VAR 0 4
55744: PUSH
55745: LD_INT 1
55747: PLUS
55748: ARRAY
55749: ST_TO_ADDR
55750: GO 55753
55752: POP
// temp_list2 = [ ] ;
55753: LD_ADDR_VAR 0 10
55757: PUSH
55758: EMPTY
55759: ST_TO_ADDR
// for i in temp_list do
55760: LD_ADDR_VAR 0 8
55764: PUSH
55765: LD_VAR 0 9
55769: PUSH
55770: FOR_IN
55771: IFFALSE 55823
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55773: LD_ADDR_VAR 0 10
55777: PUSH
55778: LD_VAR 0 10
55782: PUSH
55783: LD_VAR 0 8
55787: PUSH
55788: LD_INT 1
55790: ARRAY
55791: PUSH
55792: LD_VAR 0 2
55796: PLUS
55797: PUSH
55798: LD_VAR 0 8
55802: PUSH
55803: LD_INT 2
55805: ARRAY
55806: PUSH
55807: LD_VAR 0 3
55811: PLUS
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: EMPTY
55818: LIST
55819: ADD
55820: ST_TO_ADDR
55821: GO 55770
55823: POP
55824: POP
// result = temp_list2 ;
55825: LD_ADDR_VAR 0 7
55829: PUSH
55830: LD_VAR 0 10
55834: ST_TO_ADDR
// end ;
55835: LD_VAR 0 7
55839: RET
// export function EnemyInRange ( unit , dist ) ; begin
55840: LD_INT 0
55842: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55843: LD_ADDR_VAR 0 3
55847: PUSH
55848: LD_VAR 0 1
55852: PPUSH
55853: CALL_OW 255
55857: PPUSH
55858: LD_VAR 0 1
55862: PPUSH
55863: CALL_OW 250
55867: PPUSH
55868: LD_VAR 0 1
55872: PPUSH
55873: CALL_OW 251
55877: PPUSH
55878: LD_VAR 0 2
55882: PPUSH
55883: CALL 29611 0 4
55887: PUSH
55888: LD_INT 4
55890: ARRAY
55891: ST_TO_ADDR
// end ;
55892: LD_VAR 0 3
55896: RET
// export function PlayerSeeMe ( unit ) ; begin
55897: LD_INT 0
55899: PPUSH
// result := See ( your_side , unit ) ;
55900: LD_ADDR_VAR 0 2
55904: PUSH
55905: LD_OWVAR 2
55909: PPUSH
55910: LD_VAR 0 1
55914: PPUSH
55915: CALL_OW 292
55919: ST_TO_ADDR
// end ;
55920: LD_VAR 0 2
55924: RET
// export function ReverseDir ( unit ) ; begin
55925: LD_INT 0
55927: PPUSH
// if not unit then
55928: LD_VAR 0 1
55932: NOT
55933: IFFALSE 55937
// exit ;
55935: GO 55960
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55937: LD_ADDR_VAR 0 2
55941: PUSH
55942: LD_VAR 0 1
55946: PPUSH
55947: CALL_OW 254
55951: PUSH
55952: LD_INT 3
55954: PLUS
55955: PUSH
55956: LD_INT 6
55958: MOD
55959: ST_TO_ADDR
// end ;
55960: LD_VAR 0 2
55964: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55965: LD_INT 0
55967: PPUSH
55968: PPUSH
55969: PPUSH
55970: PPUSH
55971: PPUSH
// if not hexes then
55972: LD_VAR 0 2
55976: NOT
55977: IFFALSE 55981
// exit ;
55979: GO 56129
// dist := 9999 ;
55981: LD_ADDR_VAR 0 5
55985: PUSH
55986: LD_INT 9999
55988: ST_TO_ADDR
// for i = 1 to hexes do
55989: LD_ADDR_VAR 0 4
55993: PUSH
55994: DOUBLE
55995: LD_INT 1
55997: DEC
55998: ST_TO_ADDR
55999: LD_VAR 0 2
56003: PUSH
56004: FOR_TO
56005: IFFALSE 56117
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56007: LD_VAR 0 1
56011: PPUSH
56012: LD_VAR 0 2
56016: PUSH
56017: LD_VAR 0 4
56021: ARRAY
56022: PUSH
56023: LD_INT 1
56025: ARRAY
56026: PPUSH
56027: LD_VAR 0 2
56031: PUSH
56032: LD_VAR 0 4
56036: ARRAY
56037: PUSH
56038: LD_INT 2
56040: ARRAY
56041: PPUSH
56042: CALL_OW 297
56046: PUSH
56047: LD_VAR 0 5
56051: LESS
56052: IFFALSE 56115
// begin hex := hexes [ i ] ;
56054: LD_ADDR_VAR 0 7
56058: PUSH
56059: LD_VAR 0 2
56063: PUSH
56064: LD_VAR 0 4
56068: ARRAY
56069: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56070: LD_ADDR_VAR 0 5
56074: PUSH
56075: LD_VAR 0 1
56079: PPUSH
56080: LD_VAR 0 2
56084: PUSH
56085: LD_VAR 0 4
56089: ARRAY
56090: PUSH
56091: LD_INT 1
56093: ARRAY
56094: PPUSH
56095: LD_VAR 0 2
56099: PUSH
56100: LD_VAR 0 4
56104: ARRAY
56105: PUSH
56106: LD_INT 2
56108: ARRAY
56109: PPUSH
56110: CALL_OW 297
56114: ST_TO_ADDR
// end ; end ;
56115: GO 56004
56117: POP
56118: POP
// result := hex ;
56119: LD_ADDR_VAR 0 3
56123: PUSH
56124: LD_VAR 0 7
56128: ST_TO_ADDR
// end ;
56129: LD_VAR 0 3
56133: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56134: LD_INT 0
56136: PPUSH
56137: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56138: LD_VAR 0 1
56142: NOT
56143: PUSH
56144: LD_VAR 0 1
56148: PUSH
56149: LD_INT 21
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 23
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PPUSH
56173: CALL_OW 69
56177: IN
56178: NOT
56179: OR
56180: IFFALSE 56184
// exit ;
56182: GO 56231
// for i = 1 to 3 do
56184: LD_ADDR_VAR 0 3
56188: PUSH
56189: DOUBLE
56190: LD_INT 1
56192: DEC
56193: ST_TO_ADDR
56194: LD_INT 3
56196: PUSH
56197: FOR_TO
56198: IFFALSE 56229
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56200: LD_VAR 0 1
56204: PPUSH
56205: CALL_OW 250
56209: PPUSH
56210: LD_VAR 0 1
56214: PPUSH
56215: CALL_OW 251
56219: PPUSH
56220: LD_INT 1
56222: PPUSH
56223: CALL_OW 453
56227: GO 56197
56229: POP
56230: POP
// end ;
56231: LD_VAR 0 2
56235: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56236: LD_INT 0
56238: PPUSH
56239: PPUSH
56240: PPUSH
56241: PPUSH
56242: PPUSH
56243: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56244: LD_VAR 0 1
56248: NOT
56249: PUSH
56250: LD_VAR 0 2
56254: NOT
56255: OR
56256: PUSH
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL_OW 314
56266: OR
56267: IFFALSE 56271
// exit ;
56269: GO 56712
// x := GetX ( enemy_unit ) ;
56271: LD_ADDR_VAR 0 7
56275: PUSH
56276: LD_VAR 0 2
56280: PPUSH
56281: CALL_OW 250
56285: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56286: LD_ADDR_VAR 0 8
56290: PUSH
56291: LD_VAR 0 2
56295: PPUSH
56296: CALL_OW 251
56300: ST_TO_ADDR
// if not x or not y then
56301: LD_VAR 0 7
56305: NOT
56306: PUSH
56307: LD_VAR 0 8
56311: NOT
56312: OR
56313: IFFALSE 56317
// exit ;
56315: GO 56712
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56317: LD_ADDR_VAR 0 6
56321: PUSH
56322: LD_VAR 0 7
56326: PPUSH
56327: LD_INT 0
56329: PPUSH
56330: LD_INT 4
56332: PPUSH
56333: CALL_OW 272
56337: PUSH
56338: LD_VAR 0 8
56342: PPUSH
56343: LD_INT 0
56345: PPUSH
56346: LD_INT 4
56348: PPUSH
56349: CALL_OW 273
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_VAR 0 7
56362: PPUSH
56363: LD_INT 1
56365: PPUSH
56366: LD_INT 4
56368: PPUSH
56369: CALL_OW 272
56373: PUSH
56374: LD_VAR 0 8
56378: PPUSH
56379: LD_INT 1
56381: PPUSH
56382: LD_INT 4
56384: PPUSH
56385: CALL_OW 273
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_VAR 0 7
56398: PPUSH
56399: LD_INT 2
56401: PPUSH
56402: LD_INT 4
56404: PPUSH
56405: CALL_OW 272
56409: PUSH
56410: LD_VAR 0 8
56414: PPUSH
56415: LD_INT 2
56417: PPUSH
56418: LD_INT 4
56420: PPUSH
56421: CALL_OW 273
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_VAR 0 7
56434: PPUSH
56435: LD_INT 3
56437: PPUSH
56438: LD_INT 4
56440: PPUSH
56441: CALL_OW 272
56445: PUSH
56446: LD_VAR 0 8
56450: PPUSH
56451: LD_INT 3
56453: PPUSH
56454: LD_INT 4
56456: PPUSH
56457: CALL_OW 273
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_VAR 0 7
56470: PPUSH
56471: LD_INT 4
56473: PPUSH
56474: LD_INT 4
56476: PPUSH
56477: CALL_OW 272
56481: PUSH
56482: LD_VAR 0 8
56486: PPUSH
56487: LD_INT 4
56489: PPUSH
56490: LD_INT 4
56492: PPUSH
56493: CALL_OW 273
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_VAR 0 7
56506: PPUSH
56507: LD_INT 5
56509: PPUSH
56510: LD_INT 4
56512: PPUSH
56513: CALL_OW 272
56517: PUSH
56518: LD_VAR 0 8
56522: PPUSH
56523: LD_INT 5
56525: PPUSH
56526: LD_INT 4
56528: PPUSH
56529: CALL_OW 273
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: ST_TO_ADDR
// for i = tmp downto 1 do
56546: LD_ADDR_VAR 0 4
56550: PUSH
56551: DOUBLE
56552: LD_VAR 0 6
56556: INC
56557: ST_TO_ADDR
56558: LD_INT 1
56560: PUSH
56561: FOR_DOWNTO
56562: IFFALSE 56663
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56564: LD_VAR 0 6
56568: PUSH
56569: LD_VAR 0 4
56573: ARRAY
56574: PUSH
56575: LD_INT 1
56577: ARRAY
56578: PPUSH
56579: LD_VAR 0 6
56583: PUSH
56584: LD_VAR 0 4
56588: ARRAY
56589: PUSH
56590: LD_INT 2
56592: ARRAY
56593: PPUSH
56594: CALL_OW 488
56598: NOT
56599: PUSH
56600: LD_VAR 0 6
56604: PUSH
56605: LD_VAR 0 4
56609: ARRAY
56610: PUSH
56611: LD_INT 1
56613: ARRAY
56614: PPUSH
56615: LD_VAR 0 6
56619: PUSH
56620: LD_VAR 0 4
56624: ARRAY
56625: PUSH
56626: LD_INT 2
56628: ARRAY
56629: PPUSH
56630: CALL_OW 428
56634: PUSH
56635: LD_INT 0
56637: NONEQUAL
56638: OR
56639: IFFALSE 56661
// tmp := Delete ( tmp , i ) ;
56641: LD_ADDR_VAR 0 6
56645: PUSH
56646: LD_VAR 0 6
56650: PPUSH
56651: LD_VAR 0 4
56655: PPUSH
56656: CALL_OW 3
56660: ST_TO_ADDR
56661: GO 56561
56663: POP
56664: POP
// j := GetClosestHex ( unit , tmp ) ;
56665: LD_ADDR_VAR 0 5
56669: PUSH
56670: LD_VAR 0 1
56674: PPUSH
56675: LD_VAR 0 6
56679: PPUSH
56680: CALL 55965 0 2
56684: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56685: LD_VAR 0 1
56689: PPUSH
56690: LD_VAR 0 5
56694: PUSH
56695: LD_INT 1
56697: ARRAY
56698: PPUSH
56699: LD_VAR 0 5
56703: PUSH
56704: LD_INT 2
56706: ARRAY
56707: PPUSH
56708: CALL_OW 111
// end ;
56712: LD_VAR 0 3
56716: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56717: LD_INT 0
56719: PPUSH
56720: PPUSH
56721: PPUSH
// uc_side = 0 ;
56722: LD_ADDR_OWVAR 20
56726: PUSH
56727: LD_INT 0
56729: ST_TO_ADDR
// uc_nation = 0 ;
56730: LD_ADDR_OWVAR 21
56734: PUSH
56735: LD_INT 0
56737: ST_TO_ADDR
// InitHc_All ( ) ;
56738: CALL_OW 584
// InitVc ;
56742: CALL_OW 20
// if mastodonts then
56746: LD_VAR 0 6
56750: IFFALSE 56817
// for i = 1 to mastodonts do
56752: LD_ADDR_VAR 0 11
56756: PUSH
56757: DOUBLE
56758: LD_INT 1
56760: DEC
56761: ST_TO_ADDR
56762: LD_VAR 0 6
56766: PUSH
56767: FOR_TO
56768: IFFALSE 56815
// begin vc_chassis := 31 ;
56770: LD_ADDR_OWVAR 37
56774: PUSH
56775: LD_INT 31
56777: ST_TO_ADDR
// vc_control := control_rider ;
56778: LD_ADDR_OWVAR 38
56782: PUSH
56783: LD_INT 4
56785: ST_TO_ADDR
// animal := CreateVehicle ;
56786: LD_ADDR_VAR 0 12
56790: PUSH
56791: CALL_OW 45
56795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56796: LD_VAR 0 12
56800: PPUSH
56801: LD_VAR 0 8
56805: PPUSH
56806: LD_INT 0
56808: PPUSH
56809: CALL 59005 0 3
// end ;
56813: GO 56767
56815: POP
56816: POP
// if horses then
56817: LD_VAR 0 5
56821: IFFALSE 56888
// for i = 1 to horses do
56823: LD_ADDR_VAR 0 11
56827: PUSH
56828: DOUBLE
56829: LD_INT 1
56831: DEC
56832: ST_TO_ADDR
56833: LD_VAR 0 5
56837: PUSH
56838: FOR_TO
56839: IFFALSE 56886
// begin hc_class := 21 ;
56841: LD_ADDR_OWVAR 28
56845: PUSH
56846: LD_INT 21
56848: ST_TO_ADDR
// hc_gallery :=  ;
56849: LD_ADDR_OWVAR 33
56853: PUSH
56854: LD_STRING 
56856: ST_TO_ADDR
// animal := CreateHuman ;
56857: LD_ADDR_VAR 0 12
56861: PUSH
56862: CALL_OW 44
56866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56867: LD_VAR 0 12
56871: PPUSH
56872: LD_VAR 0 8
56876: PPUSH
56877: LD_INT 0
56879: PPUSH
56880: CALL 59005 0 3
// end ;
56884: GO 56838
56886: POP
56887: POP
// if birds then
56888: LD_VAR 0 1
56892: IFFALSE 56959
// for i = 1 to birds do
56894: LD_ADDR_VAR 0 11
56898: PUSH
56899: DOUBLE
56900: LD_INT 1
56902: DEC
56903: ST_TO_ADDR
56904: LD_VAR 0 1
56908: PUSH
56909: FOR_TO
56910: IFFALSE 56957
// begin hc_class = 18 ;
56912: LD_ADDR_OWVAR 28
56916: PUSH
56917: LD_INT 18
56919: ST_TO_ADDR
// hc_gallery =  ;
56920: LD_ADDR_OWVAR 33
56924: PUSH
56925: LD_STRING 
56927: ST_TO_ADDR
// animal := CreateHuman ;
56928: LD_ADDR_VAR 0 12
56932: PUSH
56933: CALL_OW 44
56937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56938: LD_VAR 0 12
56942: PPUSH
56943: LD_VAR 0 8
56947: PPUSH
56948: LD_INT 0
56950: PPUSH
56951: CALL 59005 0 3
// end ;
56955: GO 56909
56957: POP
56958: POP
// if tigers then
56959: LD_VAR 0 2
56963: IFFALSE 57047
// for i = 1 to tigers do
56965: LD_ADDR_VAR 0 11
56969: PUSH
56970: DOUBLE
56971: LD_INT 1
56973: DEC
56974: ST_TO_ADDR
56975: LD_VAR 0 2
56979: PUSH
56980: FOR_TO
56981: IFFALSE 57045
// begin hc_class = class_tiger ;
56983: LD_ADDR_OWVAR 28
56987: PUSH
56988: LD_INT 14
56990: ST_TO_ADDR
// hc_gallery =  ;
56991: LD_ADDR_OWVAR 33
56995: PUSH
56996: LD_STRING 
56998: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56999: LD_ADDR_OWVAR 35
57003: PUSH
57004: LD_INT 7
57006: NEG
57007: PPUSH
57008: LD_INT 7
57010: PPUSH
57011: CALL_OW 12
57015: ST_TO_ADDR
// animal := CreateHuman ;
57016: LD_ADDR_VAR 0 12
57020: PUSH
57021: CALL_OW 44
57025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57026: LD_VAR 0 12
57030: PPUSH
57031: LD_VAR 0 8
57035: PPUSH
57036: LD_INT 0
57038: PPUSH
57039: CALL 59005 0 3
// end ;
57043: GO 56980
57045: POP
57046: POP
// if apemans then
57047: LD_VAR 0 3
57051: IFFALSE 57174
// for i = 1 to apemans do
57053: LD_ADDR_VAR 0 11
57057: PUSH
57058: DOUBLE
57059: LD_INT 1
57061: DEC
57062: ST_TO_ADDR
57063: LD_VAR 0 3
57067: PUSH
57068: FOR_TO
57069: IFFALSE 57172
// begin hc_class = class_apeman ;
57071: LD_ADDR_OWVAR 28
57075: PUSH
57076: LD_INT 12
57078: ST_TO_ADDR
// hc_gallery =  ;
57079: LD_ADDR_OWVAR 33
57083: PUSH
57084: LD_STRING 
57086: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57087: LD_ADDR_OWVAR 35
57091: PUSH
57092: LD_INT 5
57094: NEG
57095: PPUSH
57096: LD_INT 5
57098: PPUSH
57099: CALL_OW 12
57103: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57104: LD_ADDR_OWVAR 31
57108: PUSH
57109: LD_INT 1
57111: PPUSH
57112: LD_INT 3
57114: PPUSH
57115: CALL_OW 12
57119: PUSH
57120: LD_INT 1
57122: PPUSH
57123: LD_INT 3
57125: PPUSH
57126: CALL_OW 12
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: ST_TO_ADDR
// animal := CreateHuman ;
57143: LD_ADDR_VAR 0 12
57147: PUSH
57148: CALL_OW 44
57152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57153: LD_VAR 0 12
57157: PPUSH
57158: LD_VAR 0 8
57162: PPUSH
57163: LD_INT 0
57165: PPUSH
57166: CALL 59005 0 3
// end ;
57170: GO 57068
57172: POP
57173: POP
// if enchidnas then
57174: LD_VAR 0 4
57178: IFFALSE 57245
// for i = 1 to enchidnas do
57180: LD_ADDR_VAR 0 11
57184: PUSH
57185: DOUBLE
57186: LD_INT 1
57188: DEC
57189: ST_TO_ADDR
57190: LD_VAR 0 4
57194: PUSH
57195: FOR_TO
57196: IFFALSE 57243
// begin hc_class = 13 ;
57198: LD_ADDR_OWVAR 28
57202: PUSH
57203: LD_INT 13
57205: ST_TO_ADDR
// hc_gallery =  ;
57206: LD_ADDR_OWVAR 33
57210: PUSH
57211: LD_STRING 
57213: ST_TO_ADDR
// animal := CreateHuman ;
57214: LD_ADDR_VAR 0 12
57218: PUSH
57219: CALL_OW 44
57223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57224: LD_VAR 0 12
57228: PPUSH
57229: LD_VAR 0 8
57233: PPUSH
57234: LD_INT 0
57236: PPUSH
57237: CALL 59005 0 3
// end ;
57241: GO 57195
57243: POP
57244: POP
// if fishes then
57245: LD_VAR 0 7
57249: IFFALSE 57316
// for i = 1 to fishes do
57251: LD_ADDR_VAR 0 11
57255: PUSH
57256: DOUBLE
57257: LD_INT 1
57259: DEC
57260: ST_TO_ADDR
57261: LD_VAR 0 7
57265: PUSH
57266: FOR_TO
57267: IFFALSE 57314
// begin hc_class = 20 ;
57269: LD_ADDR_OWVAR 28
57273: PUSH
57274: LD_INT 20
57276: ST_TO_ADDR
// hc_gallery =  ;
57277: LD_ADDR_OWVAR 33
57281: PUSH
57282: LD_STRING 
57284: ST_TO_ADDR
// animal := CreateHuman ;
57285: LD_ADDR_VAR 0 12
57289: PUSH
57290: CALL_OW 44
57294: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57295: LD_VAR 0 12
57299: PPUSH
57300: LD_VAR 0 9
57304: PPUSH
57305: LD_INT 0
57307: PPUSH
57308: CALL 59005 0 3
// end ;
57312: GO 57266
57314: POP
57315: POP
// end ;
57316: LD_VAR 0 10
57320: RET
// export function WantHeal ( sci , unit ) ; begin
57321: LD_INT 0
57323: PPUSH
// if GetTaskList ( sci ) > 0 then
57324: LD_VAR 0 1
57328: PPUSH
57329: CALL_OW 437
57333: PUSH
57334: LD_INT 0
57336: GREATER
57337: IFFALSE 57407
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57339: LD_VAR 0 1
57343: PPUSH
57344: CALL_OW 437
57348: PUSH
57349: LD_INT 1
57351: ARRAY
57352: PUSH
57353: LD_INT 1
57355: ARRAY
57356: PUSH
57357: LD_STRING l
57359: EQUAL
57360: PUSH
57361: LD_VAR 0 1
57365: PPUSH
57366: CALL_OW 437
57370: PUSH
57371: LD_INT 1
57373: ARRAY
57374: PUSH
57375: LD_INT 4
57377: ARRAY
57378: PUSH
57379: LD_VAR 0 2
57383: EQUAL
57384: AND
57385: IFFALSE 57397
// result := true else
57387: LD_ADDR_VAR 0 3
57391: PUSH
57392: LD_INT 1
57394: ST_TO_ADDR
57395: GO 57405
// result := false ;
57397: LD_ADDR_VAR 0 3
57401: PUSH
57402: LD_INT 0
57404: ST_TO_ADDR
// end else
57405: GO 57415
// result := false ;
57407: LD_ADDR_VAR 0 3
57411: PUSH
57412: LD_INT 0
57414: ST_TO_ADDR
// end ;
57415: LD_VAR 0 3
57419: RET
// export function HealTarget ( sci ) ; begin
57420: LD_INT 0
57422: PPUSH
// if not sci then
57423: LD_VAR 0 1
57427: NOT
57428: IFFALSE 57432
// exit ;
57430: GO 57497
// result := 0 ;
57432: LD_ADDR_VAR 0 2
57436: PUSH
57437: LD_INT 0
57439: ST_TO_ADDR
// if GetTaskList ( sci ) then
57440: LD_VAR 0 1
57444: PPUSH
57445: CALL_OW 437
57449: IFFALSE 57497
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57451: LD_VAR 0 1
57455: PPUSH
57456: CALL_OW 437
57460: PUSH
57461: LD_INT 1
57463: ARRAY
57464: PUSH
57465: LD_INT 1
57467: ARRAY
57468: PUSH
57469: LD_STRING l
57471: EQUAL
57472: IFFALSE 57497
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57474: LD_ADDR_VAR 0 2
57478: PUSH
57479: LD_VAR 0 1
57483: PPUSH
57484: CALL_OW 437
57488: PUSH
57489: LD_INT 1
57491: ARRAY
57492: PUSH
57493: LD_INT 4
57495: ARRAY
57496: ST_TO_ADDR
// end ;
57497: LD_VAR 0 2
57501: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57502: LD_INT 0
57504: PPUSH
57505: PPUSH
57506: PPUSH
57507: PPUSH
// if not base_units then
57508: LD_VAR 0 1
57512: NOT
57513: IFFALSE 57517
// exit ;
57515: GO 57604
// result := false ;
57517: LD_ADDR_VAR 0 2
57521: PUSH
57522: LD_INT 0
57524: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57525: LD_ADDR_VAR 0 5
57529: PUSH
57530: LD_VAR 0 1
57534: PPUSH
57535: LD_INT 21
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PPUSH
57545: CALL_OW 72
57549: ST_TO_ADDR
// if not tmp then
57550: LD_VAR 0 5
57554: NOT
57555: IFFALSE 57559
// exit ;
57557: GO 57604
// for i in tmp do
57559: LD_ADDR_VAR 0 3
57563: PUSH
57564: LD_VAR 0 5
57568: PUSH
57569: FOR_IN
57570: IFFALSE 57602
// begin result := EnemyInRange ( i , 22 ) ;
57572: LD_ADDR_VAR 0 2
57576: PUSH
57577: LD_VAR 0 3
57581: PPUSH
57582: LD_INT 22
57584: PPUSH
57585: CALL 55840 0 2
57589: ST_TO_ADDR
// if result then
57590: LD_VAR 0 2
57594: IFFALSE 57600
// exit ;
57596: POP
57597: POP
57598: GO 57604
// end ;
57600: GO 57569
57602: POP
57603: POP
// end ;
57604: LD_VAR 0 2
57608: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57609: LD_INT 0
57611: PPUSH
57612: PPUSH
// if not units then
57613: LD_VAR 0 1
57617: NOT
57618: IFFALSE 57622
// exit ;
57620: GO 57692
// result := [ ] ;
57622: LD_ADDR_VAR 0 3
57626: PUSH
57627: EMPTY
57628: ST_TO_ADDR
// for i in units do
57629: LD_ADDR_VAR 0 4
57633: PUSH
57634: LD_VAR 0 1
57638: PUSH
57639: FOR_IN
57640: IFFALSE 57690
// if GetTag ( i ) = tag then
57642: LD_VAR 0 4
57646: PPUSH
57647: CALL_OW 110
57651: PUSH
57652: LD_VAR 0 2
57656: EQUAL
57657: IFFALSE 57688
// result := Insert ( result , result + 1 , i ) ;
57659: LD_ADDR_VAR 0 3
57663: PUSH
57664: LD_VAR 0 3
57668: PPUSH
57669: LD_VAR 0 3
57673: PUSH
57674: LD_INT 1
57676: PLUS
57677: PPUSH
57678: LD_VAR 0 4
57682: PPUSH
57683: CALL_OW 2
57687: ST_TO_ADDR
57688: GO 57639
57690: POP
57691: POP
// end ;
57692: LD_VAR 0 3
57696: RET
// export function IsDriver ( un ) ; begin
57697: LD_INT 0
57699: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57700: LD_ADDR_VAR 0 2
57704: PUSH
57705: LD_VAR 0 1
57709: PUSH
57710: LD_INT 55
57712: PUSH
57713: EMPTY
57714: LIST
57715: PPUSH
57716: CALL_OW 69
57720: IN
57721: ST_TO_ADDR
// end ;
57722: LD_VAR 0 2
57726: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57727: LD_INT 0
57729: PPUSH
57730: PPUSH
// list := [ ] ;
57731: LD_ADDR_VAR 0 5
57735: PUSH
57736: EMPTY
57737: ST_TO_ADDR
// case d of 0 :
57738: LD_VAR 0 3
57742: PUSH
57743: LD_INT 0
57745: DOUBLE
57746: EQUAL
57747: IFTRUE 57751
57749: GO 57884
57751: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57752: LD_ADDR_VAR 0 5
57756: PUSH
57757: LD_VAR 0 1
57761: PUSH
57762: LD_INT 4
57764: MINUS
57765: PUSH
57766: LD_VAR 0 2
57770: PUSH
57771: LD_INT 4
57773: MINUS
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: PUSH
57783: LD_VAR 0 1
57787: PUSH
57788: LD_INT 3
57790: MINUS
57791: PUSH
57792: LD_VAR 0 2
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: PUSH
57805: LD_VAR 0 1
57809: PUSH
57810: LD_INT 4
57812: PLUS
57813: PUSH
57814: LD_VAR 0 2
57818: PUSH
57819: LD_INT 4
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: PUSH
57827: LD_VAR 0 1
57831: PUSH
57832: LD_INT 3
57834: PLUS
57835: PUSH
57836: LD_VAR 0 2
57840: PUSH
57841: LD_INT 3
57843: PLUS
57844: PUSH
57845: LD_INT 5
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: PUSH
57853: LD_VAR 0 1
57857: PUSH
57858: LD_VAR 0 2
57862: PUSH
57863: LD_INT 4
57865: PLUS
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: ST_TO_ADDR
// end ; 1 :
57882: GO 58582
57884: LD_INT 1
57886: DOUBLE
57887: EQUAL
57888: IFTRUE 57892
57890: GO 58025
57892: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57893: LD_ADDR_VAR 0 5
57897: PUSH
57898: LD_VAR 0 1
57902: PUSH
57903: LD_VAR 0 2
57907: PUSH
57908: LD_INT 4
57910: MINUS
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: PUSH
57920: LD_VAR 0 1
57924: PUSH
57925: LD_INT 3
57927: MINUS
57928: PUSH
57929: LD_VAR 0 2
57933: PUSH
57934: LD_INT 3
57936: MINUS
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: LIST
57945: PUSH
57946: LD_VAR 0 1
57950: PUSH
57951: LD_INT 4
57953: MINUS
57954: PUSH
57955: LD_VAR 0 2
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: PUSH
57968: LD_VAR 0 1
57972: PUSH
57973: LD_VAR 0 2
57977: PUSH
57978: LD_INT 3
57980: PLUS
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: PUSH
57990: LD_VAR 0 1
57994: PUSH
57995: LD_INT 4
57997: PLUS
57998: PUSH
57999: LD_VAR 0 2
58003: PUSH
58004: LD_INT 4
58006: PLUS
58007: PUSH
58008: LD_INT 5
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: LIST
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// end ; 2 :
58023: GO 58582
58025: LD_INT 2
58027: DOUBLE
58028: EQUAL
58029: IFTRUE 58033
58031: GO 58162
58033: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58034: LD_ADDR_VAR 0 5
58038: PUSH
58039: LD_VAR 0 1
58043: PUSH
58044: LD_VAR 0 2
58048: PUSH
58049: LD_INT 3
58051: MINUS
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: PUSH
58061: LD_VAR 0 1
58065: PUSH
58066: LD_INT 4
58068: PLUS
58069: PUSH
58070: LD_VAR 0 2
58074: PUSH
58075: LD_INT 4
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: LIST
58082: PUSH
58083: LD_VAR 0 1
58087: PUSH
58088: LD_VAR 0 2
58092: PUSH
58093: LD_INT 4
58095: PLUS
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: PUSH
58105: LD_VAR 0 1
58109: PUSH
58110: LD_INT 3
58112: MINUS
58113: PUSH
58114: LD_VAR 0 2
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: LIST
58126: PUSH
58127: LD_VAR 0 1
58131: PUSH
58132: LD_INT 4
58134: MINUS
58135: PUSH
58136: LD_VAR 0 2
58140: PUSH
58141: LD_INT 4
58143: MINUS
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: LIST
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: ST_TO_ADDR
// end ; 3 :
58160: GO 58582
58162: LD_INT 3
58164: DOUBLE
58165: EQUAL
58166: IFTRUE 58170
58168: GO 58303
58170: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58171: LD_ADDR_VAR 0 5
58175: PUSH
58176: LD_VAR 0 1
58180: PUSH
58181: LD_INT 3
58183: PLUS
58184: PUSH
58185: LD_VAR 0 2
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: PUSH
58198: LD_VAR 0 1
58202: PUSH
58203: LD_INT 4
58205: PLUS
58206: PUSH
58207: LD_VAR 0 2
58211: PUSH
58212: LD_INT 4
58214: PLUS
58215: PUSH
58216: LD_INT 5
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: PUSH
58224: LD_VAR 0 1
58228: PUSH
58229: LD_INT 4
58231: MINUS
58232: PUSH
58233: LD_VAR 0 2
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: LIST
58245: PUSH
58246: LD_VAR 0 1
58250: PUSH
58251: LD_VAR 0 2
58255: PUSH
58256: LD_INT 4
58258: MINUS
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: LIST
58267: PUSH
58268: LD_VAR 0 1
58272: PUSH
58273: LD_INT 3
58275: MINUS
58276: PUSH
58277: LD_VAR 0 2
58281: PUSH
58282: LD_INT 3
58284: MINUS
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: ST_TO_ADDR
// end ; 4 :
58301: GO 58582
58303: LD_INT 4
58305: DOUBLE
58306: EQUAL
58307: IFTRUE 58311
58309: GO 58444
58311: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58312: LD_ADDR_VAR 0 5
58316: PUSH
58317: LD_VAR 0 1
58321: PUSH
58322: LD_VAR 0 2
58326: PUSH
58327: LD_INT 4
58329: PLUS
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: PUSH
58339: LD_VAR 0 1
58343: PUSH
58344: LD_INT 3
58346: PLUS
58347: PUSH
58348: LD_VAR 0 2
58352: PUSH
58353: LD_INT 3
58355: PLUS
58356: PUSH
58357: LD_INT 5
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: LIST
58364: PUSH
58365: LD_VAR 0 1
58369: PUSH
58370: LD_INT 4
58372: PLUS
58373: PUSH
58374: LD_VAR 0 2
58378: PUSH
58379: LD_INT 4
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: LIST
58386: PUSH
58387: LD_VAR 0 1
58391: PUSH
58392: LD_VAR 0 2
58396: PUSH
58397: LD_INT 3
58399: MINUS
58400: PUSH
58401: LD_INT 3
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: PUSH
58409: LD_VAR 0 1
58413: PUSH
58414: LD_INT 4
58416: MINUS
58417: PUSH
58418: LD_VAR 0 2
58422: PUSH
58423: LD_INT 4
58425: MINUS
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// end ; 5 :
58442: GO 58582
58444: LD_INT 5
58446: DOUBLE
58447: EQUAL
58448: IFTRUE 58452
58450: GO 58581
58452: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58453: LD_ADDR_VAR 0 5
58457: PUSH
58458: LD_VAR 0 1
58462: PUSH
58463: LD_INT 4
58465: MINUS
58466: PUSH
58467: LD_VAR 0 2
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: PUSH
58480: LD_VAR 0 1
58484: PUSH
58485: LD_VAR 0 2
58489: PUSH
58490: LD_INT 4
58492: MINUS
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: LIST
58501: PUSH
58502: LD_VAR 0 1
58506: PUSH
58507: LD_INT 4
58509: PLUS
58510: PUSH
58511: LD_VAR 0 2
58515: PUSH
58516: LD_INT 4
58518: PLUS
58519: PUSH
58520: LD_INT 5
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: LIST
58527: PUSH
58528: LD_VAR 0 1
58532: PUSH
58533: LD_INT 3
58535: PLUS
58536: PUSH
58537: LD_VAR 0 2
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: LIST
58549: PUSH
58550: LD_VAR 0 1
58554: PUSH
58555: LD_VAR 0 2
58559: PUSH
58560: LD_INT 3
58562: PLUS
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: ST_TO_ADDR
// end ; end ;
58579: GO 58582
58581: POP
// result := list ;
58582: LD_ADDR_VAR 0 4
58586: PUSH
58587: LD_VAR 0 5
58591: ST_TO_ADDR
// end ;
58592: LD_VAR 0 4
58596: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58597: LD_INT 0
58599: PPUSH
58600: PPUSH
58601: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58602: LD_VAR 0 1
58606: NOT
58607: PUSH
58608: LD_VAR 0 2
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: LD_INT 4
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: IN
58631: NOT
58632: OR
58633: IFFALSE 58637
// exit ;
58635: GO 58729
// tmp := [ ] ;
58637: LD_ADDR_VAR 0 5
58641: PUSH
58642: EMPTY
58643: ST_TO_ADDR
// for i in units do
58644: LD_ADDR_VAR 0 4
58648: PUSH
58649: LD_VAR 0 1
58653: PUSH
58654: FOR_IN
58655: IFFALSE 58698
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58657: LD_ADDR_VAR 0 5
58661: PUSH
58662: LD_VAR 0 5
58666: PPUSH
58667: LD_VAR 0 5
58671: PUSH
58672: LD_INT 1
58674: PLUS
58675: PPUSH
58676: LD_VAR 0 4
58680: PPUSH
58681: LD_VAR 0 2
58685: PPUSH
58686: CALL_OW 259
58690: PPUSH
58691: CALL_OW 2
58695: ST_TO_ADDR
58696: GO 58654
58698: POP
58699: POP
// if not tmp then
58700: LD_VAR 0 5
58704: NOT
58705: IFFALSE 58709
// exit ;
58707: GO 58729
// result := SortListByListDesc ( units , tmp ) ;
58709: LD_ADDR_VAR 0 3
58713: PUSH
58714: LD_VAR 0 1
58718: PPUSH
58719: LD_VAR 0 5
58723: PPUSH
58724: CALL_OW 77
58728: ST_TO_ADDR
// end ;
58729: LD_VAR 0 3
58733: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58734: LD_INT 0
58736: PPUSH
58737: PPUSH
58738: PPUSH
// result := false ;
58739: LD_ADDR_VAR 0 3
58743: PUSH
58744: LD_INT 0
58746: ST_TO_ADDR
// x := GetX ( building ) ;
58747: LD_ADDR_VAR 0 4
58751: PUSH
58752: LD_VAR 0 2
58756: PPUSH
58757: CALL_OW 250
58761: ST_TO_ADDR
// y := GetY ( building ) ;
58762: LD_ADDR_VAR 0 5
58766: PUSH
58767: LD_VAR 0 2
58771: PPUSH
58772: CALL_OW 251
58776: ST_TO_ADDR
// if not building or not x or not y then
58777: LD_VAR 0 2
58781: NOT
58782: PUSH
58783: LD_VAR 0 4
58787: NOT
58788: OR
58789: PUSH
58790: LD_VAR 0 5
58794: NOT
58795: OR
58796: IFFALSE 58800
// exit ;
58798: GO 58892
// if GetTaskList ( unit ) then
58800: LD_VAR 0 1
58804: PPUSH
58805: CALL_OW 437
58809: IFFALSE 58892
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58811: LD_STRING e
58813: PUSH
58814: LD_VAR 0 1
58818: PPUSH
58819: CALL_OW 437
58823: PUSH
58824: LD_INT 1
58826: ARRAY
58827: PUSH
58828: LD_INT 1
58830: ARRAY
58831: EQUAL
58832: PUSH
58833: LD_VAR 0 4
58837: PUSH
58838: LD_VAR 0 1
58842: PPUSH
58843: CALL_OW 437
58847: PUSH
58848: LD_INT 1
58850: ARRAY
58851: PUSH
58852: LD_INT 2
58854: ARRAY
58855: EQUAL
58856: AND
58857: PUSH
58858: LD_VAR 0 5
58862: PUSH
58863: LD_VAR 0 1
58867: PPUSH
58868: CALL_OW 437
58872: PUSH
58873: LD_INT 1
58875: ARRAY
58876: PUSH
58877: LD_INT 3
58879: ARRAY
58880: EQUAL
58881: AND
58882: IFFALSE 58892
// result := true end ;
58884: LD_ADDR_VAR 0 3
58888: PUSH
58889: LD_INT 1
58891: ST_TO_ADDR
// end ;
58892: LD_VAR 0 3
58896: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58897: LD_INT 0
58899: PPUSH
// result := false ;
58900: LD_ADDR_VAR 0 4
58904: PUSH
58905: LD_INT 0
58907: ST_TO_ADDR
// if GetTaskList ( unit ) then
58908: LD_VAR 0 1
58912: PPUSH
58913: CALL_OW 437
58917: IFFALSE 59000
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58919: LD_STRING M
58921: PUSH
58922: LD_VAR 0 1
58926: PPUSH
58927: CALL_OW 437
58931: PUSH
58932: LD_INT 1
58934: ARRAY
58935: PUSH
58936: LD_INT 1
58938: ARRAY
58939: EQUAL
58940: PUSH
58941: LD_VAR 0 2
58945: PUSH
58946: LD_VAR 0 1
58950: PPUSH
58951: CALL_OW 437
58955: PUSH
58956: LD_INT 1
58958: ARRAY
58959: PUSH
58960: LD_INT 2
58962: ARRAY
58963: EQUAL
58964: AND
58965: PUSH
58966: LD_VAR 0 3
58970: PUSH
58971: LD_VAR 0 1
58975: PPUSH
58976: CALL_OW 437
58980: PUSH
58981: LD_INT 1
58983: ARRAY
58984: PUSH
58985: LD_INT 3
58987: ARRAY
58988: EQUAL
58989: AND
58990: IFFALSE 59000
// result := true ;
58992: LD_ADDR_VAR 0 4
58996: PUSH
58997: LD_INT 1
58999: ST_TO_ADDR
// end ; end ;
59000: LD_VAR 0 4
59004: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59005: LD_INT 0
59007: PPUSH
59008: PPUSH
59009: PPUSH
59010: PPUSH
// if not unit or not area then
59011: LD_VAR 0 1
59015: NOT
59016: PUSH
59017: LD_VAR 0 2
59021: NOT
59022: OR
59023: IFFALSE 59027
// exit ;
59025: GO 59191
// tmp := AreaToList ( area , i ) ;
59027: LD_ADDR_VAR 0 6
59031: PUSH
59032: LD_VAR 0 2
59036: PPUSH
59037: LD_VAR 0 5
59041: PPUSH
59042: CALL_OW 517
59046: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59047: LD_ADDR_VAR 0 5
59051: PUSH
59052: DOUBLE
59053: LD_INT 1
59055: DEC
59056: ST_TO_ADDR
59057: LD_VAR 0 6
59061: PUSH
59062: LD_INT 1
59064: ARRAY
59065: PUSH
59066: FOR_TO
59067: IFFALSE 59189
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59069: LD_ADDR_VAR 0 7
59073: PUSH
59074: LD_VAR 0 6
59078: PUSH
59079: LD_INT 1
59081: ARRAY
59082: PUSH
59083: LD_VAR 0 5
59087: ARRAY
59088: PUSH
59089: LD_VAR 0 6
59093: PUSH
59094: LD_INT 2
59096: ARRAY
59097: PUSH
59098: LD_VAR 0 5
59102: ARRAY
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59108: LD_VAR 0 7
59112: PUSH
59113: LD_INT 1
59115: ARRAY
59116: PPUSH
59117: LD_VAR 0 7
59121: PUSH
59122: LD_INT 2
59124: ARRAY
59125: PPUSH
59126: CALL_OW 428
59130: PUSH
59131: LD_INT 0
59133: EQUAL
59134: IFFALSE 59187
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59136: LD_VAR 0 1
59140: PPUSH
59141: LD_VAR 0 7
59145: PUSH
59146: LD_INT 1
59148: ARRAY
59149: PPUSH
59150: LD_VAR 0 7
59154: PUSH
59155: LD_INT 2
59157: ARRAY
59158: PPUSH
59159: LD_VAR 0 3
59163: PPUSH
59164: CALL_OW 48
// result := IsPlaced ( unit ) ;
59168: LD_ADDR_VAR 0 4
59172: PUSH
59173: LD_VAR 0 1
59177: PPUSH
59178: CALL_OW 305
59182: ST_TO_ADDR
// exit ;
59183: POP
59184: POP
59185: GO 59191
// end ; end ;
59187: GO 59066
59189: POP
59190: POP
// end ;
59191: LD_VAR 0 4
59195: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59196: LD_INT 0
59198: PPUSH
59199: PPUSH
59200: PPUSH
// if not side or side > 8 then
59201: LD_VAR 0 1
59205: NOT
59206: PUSH
59207: LD_VAR 0 1
59211: PUSH
59212: LD_INT 8
59214: GREATER
59215: OR
59216: IFFALSE 59220
// exit ;
59218: GO 59407
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59220: LD_ADDR_VAR 0 4
59224: PUSH
59225: LD_INT 22
59227: PUSH
59228: LD_VAR 0 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 21
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PPUSH
59251: CALL_OW 69
59255: ST_TO_ADDR
// if not tmp then
59256: LD_VAR 0 4
59260: NOT
59261: IFFALSE 59265
// exit ;
59263: GO 59407
// enable_addtolog := true ;
59265: LD_ADDR_OWVAR 81
59269: PUSH
59270: LD_INT 1
59272: ST_TO_ADDR
// AddToLog ( [ ) ;
59273: LD_STRING [
59275: PPUSH
59276: CALL_OW 561
// for i in tmp do
59280: LD_ADDR_VAR 0 3
59284: PUSH
59285: LD_VAR 0 4
59289: PUSH
59290: FOR_IN
59291: IFFALSE 59398
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59293: LD_STRING [
59295: PUSH
59296: LD_VAR 0 3
59300: PPUSH
59301: CALL_OW 266
59305: STR
59306: PUSH
59307: LD_STRING , 
59309: STR
59310: PUSH
59311: LD_VAR 0 3
59315: PPUSH
59316: CALL_OW 250
59320: STR
59321: PUSH
59322: LD_STRING , 
59324: STR
59325: PUSH
59326: LD_VAR 0 3
59330: PPUSH
59331: CALL_OW 251
59335: STR
59336: PUSH
59337: LD_STRING , 
59339: STR
59340: PUSH
59341: LD_VAR 0 3
59345: PPUSH
59346: CALL_OW 254
59350: STR
59351: PUSH
59352: LD_STRING , 
59354: STR
59355: PUSH
59356: LD_VAR 0 3
59360: PPUSH
59361: LD_INT 1
59363: PPUSH
59364: CALL_OW 268
59368: STR
59369: PUSH
59370: LD_STRING , 
59372: STR
59373: PUSH
59374: LD_VAR 0 3
59378: PPUSH
59379: LD_INT 2
59381: PPUSH
59382: CALL_OW 268
59386: STR
59387: PUSH
59388: LD_STRING ],
59390: STR
59391: PPUSH
59392: CALL_OW 561
// end ;
59396: GO 59290
59398: POP
59399: POP
// AddToLog ( ]; ) ;
59400: LD_STRING ];
59402: PPUSH
59403: CALL_OW 561
// end ;
59407: LD_VAR 0 2
59411: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59412: LD_INT 0
59414: PPUSH
59415: PPUSH
59416: PPUSH
59417: PPUSH
59418: PPUSH
// if not area or not rate or not max then
59419: LD_VAR 0 1
59423: NOT
59424: PUSH
59425: LD_VAR 0 2
59429: NOT
59430: OR
59431: PUSH
59432: LD_VAR 0 4
59436: NOT
59437: OR
59438: IFFALSE 59442
// exit ;
59440: GO 59634
// while 1 do
59442: LD_INT 1
59444: IFFALSE 59634
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59446: LD_ADDR_VAR 0 9
59450: PUSH
59451: LD_VAR 0 1
59455: PPUSH
59456: LD_INT 1
59458: PPUSH
59459: CALL_OW 287
59463: PUSH
59464: LD_INT 10
59466: MUL
59467: ST_TO_ADDR
// r := rate / 10 ;
59468: LD_ADDR_VAR 0 7
59472: PUSH
59473: LD_VAR 0 2
59477: PUSH
59478: LD_INT 10
59480: DIVREAL
59481: ST_TO_ADDR
// time := 1 1$00 ;
59482: LD_ADDR_VAR 0 8
59486: PUSH
59487: LD_INT 2100
59489: ST_TO_ADDR
// if amount < min then
59490: LD_VAR 0 9
59494: PUSH
59495: LD_VAR 0 3
59499: LESS
59500: IFFALSE 59518
// r := r * 2 else
59502: LD_ADDR_VAR 0 7
59506: PUSH
59507: LD_VAR 0 7
59511: PUSH
59512: LD_INT 2
59514: MUL
59515: ST_TO_ADDR
59516: GO 59544
// if amount > max then
59518: LD_VAR 0 9
59522: PUSH
59523: LD_VAR 0 4
59527: GREATER
59528: IFFALSE 59544
// r := r / 2 ;
59530: LD_ADDR_VAR 0 7
59534: PUSH
59535: LD_VAR 0 7
59539: PUSH
59540: LD_INT 2
59542: DIVREAL
59543: ST_TO_ADDR
// time := time / r ;
59544: LD_ADDR_VAR 0 8
59548: PUSH
59549: LD_VAR 0 8
59553: PUSH
59554: LD_VAR 0 7
59558: DIVREAL
59559: ST_TO_ADDR
// if time < 0 then
59560: LD_VAR 0 8
59564: PUSH
59565: LD_INT 0
59567: LESS
59568: IFFALSE 59585
// time := time * - 1 ;
59570: LD_ADDR_VAR 0 8
59574: PUSH
59575: LD_VAR 0 8
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: MUL
59584: ST_TO_ADDR
// wait ( time ) ;
59585: LD_VAR 0 8
59589: PPUSH
59590: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59594: LD_INT 35
59596: PPUSH
59597: LD_INT 875
59599: PPUSH
59600: CALL_OW 12
59604: PPUSH
59605: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59609: LD_INT 1
59611: PPUSH
59612: LD_INT 5
59614: PPUSH
59615: CALL_OW 12
59619: PPUSH
59620: LD_VAR 0 1
59624: PPUSH
59625: LD_INT 1
59627: PPUSH
59628: CALL_OW 55
// end ;
59632: GO 59442
// end ;
59634: LD_VAR 0 5
59638: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59639: LD_INT 0
59641: PPUSH
59642: PPUSH
59643: PPUSH
59644: PPUSH
59645: PPUSH
59646: PPUSH
59647: PPUSH
59648: PPUSH
// if not turrets or not factories then
59649: LD_VAR 0 1
59653: NOT
59654: PUSH
59655: LD_VAR 0 2
59659: NOT
59660: OR
59661: IFFALSE 59665
// exit ;
59663: GO 59972
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59665: LD_ADDR_VAR 0 10
59669: PUSH
59670: LD_INT 5
59672: PUSH
59673: LD_INT 6
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 4
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 24
59707: PUSH
59708: LD_INT 25
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 23
59717: PUSH
59718: LD_INT 27
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 42
59731: PUSH
59732: LD_INT 43
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 44
59741: PUSH
59742: LD_INT 46
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 45
59751: PUSH
59752: LD_INT 47
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: LIST
59768: ST_TO_ADDR
// result := [ ] ;
59769: LD_ADDR_VAR 0 3
59773: PUSH
59774: EMPTY
59775: ST_TO_ADDR
// for i in turrets do
59776: LD_ADDR_VAR 0 4
59780: PUSH
59781: LD_VAR 0 1
59785: PUSH
59786: FOR_IN
59787: IFFALSE 59970
// begin nat := GetNation ( i ) ;
59789: LD_ADDR_VAR 0 7
59793: PUSH
59794: LD_VAR 0 4
59798: PPUSH
59799: CALL_OW 248
59803: ST_TO_ADDR
// weapon := 0 ;
59804: LD_ADDR_VAR 0 8
59808: PUSH
59809: LD_INT 0
59811: ST_TO_ADDR
// if not nat then
59812: LD_VAR 0 7
59816: NOT
59817: IFFALSE 59821
// continue ;
59819: GO 59786
// for j in list [ nat ] do
59821: LD_ADDR_VAR 0 5
59825: PUSH
59826: LD_VAR 0 10
59830: PUSH
59831: LD_VAR 0 7
59835: ARRAY
59836: PUSH
59837: FOR_IN
59838: IFFALSE 59879
// if GetBWeapon ( i ) = j [ 1 ] then
59840: LD_VAR 0 4
59844: PPUSH
59845: CALL_OW 269
59849: PUSH
59850: LD_VAR 0 5
59854: PUSH
59855: LD_INT 1
59857: ARRAY
59858: EQUAL
59859: IFFALSE 59877
// begin weapon := j [ 2 ] ;
59861: LD_ADDR_VAR 0 8
59865: PUSH
59866: LD_VAR 0 5
59870: PUSH
59871: LD_INT 2
59873: ARRAY
59874: ST_TO_ADDR
// break ;
59875: GO 59879
// end ;
59877: GO 59837
59879: POP
59880: POP
// if not weapon then
59881: LD_VAR 0 8
59885: NOT
59886: IFFALSE 59890
// continue ;
59888: GO 59786
// for k in factories do
59890: LD_ADDR_VAR 0 6
59894: PUSH
59895: LD_VAR 0 2
59899: PUSH
59900: FOR_IN
59901: IFFALSE 59966
// begin weapons := AvailableWeaponList ( k ) ;
59903: LD_ADDR_VAR 0 9
59907: PUSH
59908: LD_VAR 0 6
59912: PPUSH
59913: CALL_OW 478
59917: ST_TO_ADDR
// if not weapons then
59918: LD_VAR 0 9
59922: NOT
59923: IFFALSE 59927
// continue ;
59925: GO 59900
// if weapon in weapons then
59927: LD_VAR 0 8
59931: PUSH
59932: LD_VAR 0 9
59936: IN
59937: IFFALSE 59964
// begin result := [ i , weapon ] ;
59939: LD_ADDR_VAR 0 3
59943: PUSH
59944: LD_VAR 0 4
59948: PUSH
59949: LD_VAR 0 8
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: ST_TO_ADDR
// exit ;
59958: POP
59959: POP
59960: POP
59961: POP
59962: GO 59972
// end ; end ;
59964: GO 59900
59966: POP
59967: POP
// end ;
59968: GO 59786
59970: POP
59971: POP
// end ;
59972: LD_VAR 0 3
59976: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59977: LD_INT 0
59979: PPUSH
// if not side or side > 8 then
59980: LD_VAR 0 3
59984: NOT
59985: PUSH
59986: LD_VAR 0 3
59990: PUSH
59991: LD_INT 8
59993: GREATER
59994: OR
59995: IFFALSE 59999
// exit ;
59997: GO 60058
// if not range then
59999: LD_VAR 0 4
60003: NOT
60004: IFFALSE 60015
// range := - 12 ;
60006: LD_ADDR_VAR 0 4
60010: PUSH
60011: LD_INT 12
60013: NEG
60014: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60015: LD_VAR 0 1
60019: PPUSH
60020: LD_VAR 0 2
60024: PPUSH
60025: LD_VAR 0 3
60029: PPUSH
60030: LD_VAR 0 4
60034: PPUSH
60035: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60039: LD_VAR 0 1
60043: PPUSH
60044: LD_VAR 0 2
60048: PPUSH
60049: LD_VAR 0 3
60053: PPUSH
60054: CALL_OW 331
// end ;
60058: LD_VAR 0 5
60062: RET
// export function Video ( mode ) ; begin
60063: LD_INT 0
60065: PPUSH
// ingame_video = mode ;
60066: LD_ADDR_OWVAR 52
60070: PUSH
60071: LD_VAR 0 1
60075: ST_TO_ADDR
// interface_hidden = mode ;
60076: LD_ADDR_OWVAR 54
60080: PUSH
60081: LD_VAR 0 1
60085: ST_TO_ADDR
// end ;
60086: LD_VAR 0 2
60090: RET
// export function Join ( array , element ) ; begin
60091: LD_INT 0
60093: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60094: LD_ADDR_VAR 0 3
60098: PUSH
60099: LD_VAR 0 1
60103: PPUSH
60104: LD_VAR 0 1
60108: PUSH
60109: LD_INT 1
60111: PLUS
60112: PPUSH
60113: LD_VAR 0 2
60117: PPUSH
60118: CALL_OW 1
60122: ST_TO_ADDR
// end ;
60123: LD_VAR 0 3
60127: RET
// export function JoinUnion ( array , element ) ; begin
60128: LD_INT 0
60130: PPUSH
// result := array union element ;
60131: LD_ADDR_VAR 0 3
60135: PUSH
60136: LD_VAR 0 1
60140: PUSH
60141: LD_VAR 0 2
60145: UNION
60146: ST_TO_ADDR
// end ;
60147: LD_VAR 0 3
60151: RET
// export function GetBehemoths ( side ) ; begin
60152: LD_INT 0
60154: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60155: LD_ADDR_VAR 0 2
60159: PUSH
60160: LD_INT 22
60162: PUSH
60163: LD_VAR 0 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 31
60174: PUSH
60175: LD_INT 25
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PPUSH
60186: CALL_OW 69
60190: ST_TO_ADDR
// end ;
60191: LD_VAR 0 2
60195: RET
// export function Shuffle ( array ) ; var i , index ; begin
60196: LD_INT 0
60198: PPUSH
60199: PPUSH
60200: PPUSH
// result := [ ] ;
60201: LD_ADDR_VAR 0 2
60205: PUSH
60206: EMPTY
60207: ST_TO_ADDR
// if not array then
60208: LD_VAR 0 1
60212: NOT
60213: IFFALSE 60217
// exit ;
60215: GO 60316
// Randomize ;
60217: CALL_OW 10
// for i = array downto 1 do
60221: LD_ADDR_VAR 0 3
60225: PUSH
60226: DOUBLE
60227: LD_VAR 0 1
60231: INC
60232: ST_TO_ADDR
60233: LD_INT 1
60235: PUSH
60236: FOR_DOWNTO
60237: IFFALSE 60314
// begin index := rand ( 1 , array ) ;
60239: LD_ADDR_VAR 0 4
60243: PUSH
60244: LD_INT 1
60246: PPUSH
60247: LD_VAR 0 1
60251: PPUSH
60252: CALL_OW 12
60256: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60257: LD_ADDR_VAR 0 2
60261: PUSH
60262: LD_VAR 0 2
60266: PPUSH
60267: LD_VAR 0 2
60271: PUSH
60272: LD_INT 1
60274: PLUS
60275: PPUSH
60276: LD_VAR 0 1
60280: PUSH
60281: LD_VAR 0 4
60285: ARRAY
60286: PPUSH
60287: CALL_OW 2
60291: ST_TO_ADDR
// array := Delete ( array , index ) ;
60292: LD_ADDR_VAR 0 1
60296: PUSH
60297: LD_VAR 0 1
60301: PPUSH
60302: LD_VAR 0 4
60306: PPUSH
60307: CALL_OW 3
60311: ST_TO_ADDR
// end ;
60312: GO 60236
60314: POP
60315: POP
// end ;
60316: LD_VAR 0 2
60320: RET
// export function GetBaseMaterials ( base ) ; begin
60321: LD_INT 0
60323: PPUSH
// result := [ 0 , 0 , 0 ] ;
60324: LD_ADDR_VAR 0 2
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: ST_TO_ADDR
// if not base then
60343: LD_VAR 0 1
60347: NOT
60348: IFFALSE 60352
// exit ;
60350: GO 60401
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60352: LD_ADDR_VAR 0 2
60356: PUSH
60357: LD_VAR 0 1
60361: PPUSH
60362: LD_INT 1
60364: PPUSH
60365: CALL_OW 275
60369: PUSH
60370: LD_VAR 0 1
60374: PPUSH
60375: LD_INT 2
60377: PPUSH
60378: CALL_OW 275
60382: PUSH
60383: LD_VAR 0 1
60387: PPUSH
60388: LD_INT 3
60390: PPUSH
60391: CALL_OW 275
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: ST_TO_ADDR
// end ;
60401: LD_VAR 0 2
60405: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60406: LD_INT 0
60408: PPUSH
60409: PPUSH
// result := array ;
60410: LD_ADDR_VAR 0 3
60414: PUSH
60415: LD_VAR 0 1
60419: ST_TO_ADDR
// if size > 0 then
60420: LD_VAR 0 2
60424: PUSH
60425: LD_INT 0
60427: GREATER
60428: IFFALSE 60474
// for i := array downto size do
60430: LD_ADDR_VAR 0 4
60434: PUSH
60435: DOUBLE
60436: LD_VAR 0 1
60440: INC
60441: ST_TO_ADDR
60442: LD_VAR 0 2
60446: PUSH
60447: FOR_DOWNTO
60448: IFFALSE 60472
// result := Delete ( result , result ) ;
60450: LD_ADDR_VAR 0 3
60454: PUSH
60455: LD_VAR 0 3
60459: PPUSH
60460: LD_VAR 0 3
60464: PPUSH
60465: CALL_OW 3
60469: ST_TO_ADDR
60470: GO 60447
60472: POP
60473: POP
// end ;
60474: LD_VAR 0 3
60478: RET
// export function ComExit ( unit ) ; var tmp ; begin
60479: LD_INT 0
60481: PPUSH
60482: PPUSH
// if not IsInUnit ( unit ) then
60483: LD_VAR 0 1
60487: PPUSH
60488: CALL_OW 310
60492: NOT
60493: IFFALSE 60497
// exit ;
60495: GO 60557
// tmp := IsInUnit ( unit ) ;
60497: LD_ADDR_VAR 0 3
60501: PUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 310
60511: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60512: LD_VAR 0 3
60516: PPUSH
60517: CALL_OW 247
60521: PUSH
60522: LD_INT 2
60524: EQUAL
60525: IFFALSE 60538
// ComExitVehicle ( unit ) else
60527: LD_VAR 0 1
60531: PPUSH
60532: CALL_OW 121
60536: GO 60547
// ComExitBuilding ( unit ) ;
60538: LD_VAR 0 1
60542: PPUSH
60543: CALL_OW 122
// result := tmp ;
60547: LD_ADDR_VAR 0 2
60551: PUSH
60552: LD_VAR 0 3
60556: ST_TO_ADDR
// end ;
60557: LD_VAR 0 2
60561: RET
// export function ComExitAll ( units ) ; var i ; begin
60562: LD_INT 0
60564: PPUSH
60565: PPUSH
// if not units then
60566: LD_VAR 0 1
60570: NOT
60571: IFFALSE 60575
// exit ;
60573: GO 60601
// for i in units do
60575: LD_ADDR_VAR 0 3
60579: PUSH
60580: LD_VAR 0 1
60584: PUSH
60585: FOR_IN
60586: IFFALSE 60599
// ComExit ( i ) ;
60588: LD_VAR 0 3
60592: PPUSH
60593: CALL 60479 0 1
60597: GO 60585
60599: POP
60600: POP
// end ;
60601: LD_VAR 0 2
60605: RET
// export function ResetHc ; begin
60606: LD_INT 0
60608: PPUSH
// InitHc ;
60609: CALL_OW 19
// hc_importance := 0 ;
60613: LD_ADDR_OWVAR 32
60617: PUSH
60618: LD_INT 0
60620: ST_TO_ADDR
// end ;
60621: LD_VAR 0 1
60625: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60626: LD_INT 0
60628: PPUSH
60629: PPUSH
60630: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60631: LD_ADDR_VAR 0 6
60635: PUSH
60636: LD_VAR 0 1
60640: PUSH
60641: LD_VAR 0 3
60645: PLUS
60646: PUSH
60647: LD_INT 2
60649: DIV
60650: ST_TO_ADDR
// if _x < 0 then
60651: LD_VAR 0 6
60655: PUSH
60656: LD_INT 0
60658: LESS
60659: IFFALSE 60676
// _x := _x * - 1 ;
60661: LD_ADDR_VAR 0 6
60665: PUSH
60666: LD_VAR 0 6
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: MUL
60675: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60676: LD_ADDR_VAR 0 7
60680: PUSH
60681: LD_VAR 0 2
60685: PUSH
60686: LD_VAR 0 4
60690: PLUS
60691: PUSH
60692: LD_INT 2
60694: DIV
60695: ST_TO_ADDR
// if _y < 0 then
60696: LD_VAR 0 7
60700: PUSH
60701: LD_INT 0
60703: LESS
60704: IFFALSE 60721
// _y := _y * - 1 ;
60706: LD_ADDR_VAR 0 7
60710: PUSH
60711: LD_VAR 0 7
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: MUL
60720: ST_TO_ADDR
// result := [ _x , _y ] ;
60721: LD_ADDR_VAR 0 5
60725: PUSH
60726: LD_VAR 0 6
60730: PUSH
60731: LD_VAR 0 7
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: ST_TO_ADDR
// end ;
60740: LD_VAR 0 5
60744: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60745: LD_INT 0
60747: PPUSH
60748: PPUSH
60749: PPUSH
60750: PPUSH
// task := GetTaskList ( unit ) ;
60751: LD_ADDR_VAR 0 7
60755: PUSH
60756: LD_VAR 0 1
60760: PPUSH
60761: CALL_OW 437
60765: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60766: LD_VAR 0 7
60770: NOT
60771: PUSH
60772: LD_VAR 0 1
60776: PPUSH
60777: LD_VAR 0 2
60781: PPUSH
60782: CALL_OW 308
60786: NOT
60787: AND
60788: IFFALSE 60792
// exit ;
60790: GO 60910
// if IsInArea ( unit , area ) then
60792: LD_VAR 0 1
60796: PPUSH
60797: LD_VAR 0 2
60801: PPUSH
60802: CALL_OW 308
60806: IFFALSE 60824
// begin ComMoveToArea ( unit , goAway ) ;
60808: LD_VAR 0 1
60812: PPUSH
60813: LD_VAR 0 3
60817: PPUSH
60818: CALL_OW 113
// exit ;
60822: GO 60910
// end ; if task [ 1 ] [ 1 ] <> M then
60824: LD_VAR 0 7
60828: PUSH
60829: LD_INT 1
60831: ARRAY
60832: PUSH
60833: LD_INT 1
60835: ARRAY
60836: PUSH
60837: LD_STRING M
60839: NONEQUAL
60840: IFFALSE 60844
// exit ;
60842: GO 60910
// x := task [ 1 ] [ 2 ] ;
60844: LD_ADDR_VAR 0 5
60848: PUSH
60849: LD_VAR 0 7
60853: PUSH
60854: LD_INT 1
60856: ARRAY
60857: PUSH
60858: LD_INT 2
60860: ARRAY
60861: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60862: LD_ADDR_VAR 0 6
60866: PUSH
60867: LD_VAR 0 7
60871: PUSH
60872: LD_INT 1
60874: ARRAY
60875: PUSH
60876: LD_INT 3
60878: ARRAY
60879: ST_TO_ADDR
// if InArea ( x , y , area ) then
60880: LD_VAR 0 5
60884: PPUSH
60885: LD_VAR 0 6
60889: PPUSH
60890: LD_VAR 0 2
60894: PPUSH
60895: CALL_OW 309
60899: IFFALSE 60910
// ComStop ( unit ) ;
60901: LD_VAR 0 1
60905: PPUSH
60906: CALL_OW 141
// end ;
60910: LD_VAR 0 4
60914: RET
// export function Abs ( value ) ; begin
60915: LD_INT 0
60917: PPUSH
// result := value ;
60918: LD_ADDR_VAR 0 2
60922: PUSH
60923: LD_VAR 0 1
60927: ST_TO_ADDR
// if value < 0 then
60928: LD_VAR 0 1
60932: PUSH
60933: LD_INT 0
60935: LESS
60936: IFFALSE 60953
// result := value * - 1 ;
60938: LD_ADDR_VAR 0 2
60942: PUSH
60943: LD_VAR 0 1
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: MUL
60952: ST_TO_ADDR
// end ;
60953: LD_VAR 0 2
60957: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60958: LD_INT 0
60960: PPUSH
60961: PPUSH
60962: PPUSH
60963: PPUSH
60964: PPUSH
60965: PPUSH
60966: PPUSH
60967: PPUSH
// if not unit or not building then
60968: LD_VAR 0 1
60972: NOT
60973: PUSH
60974: LD_VAR 0 2
60978: NOT
60979: OR
60980: IFFALSE 60984
// exit ;
60982: GO 61210
// x := GetX ( building ) ;
60984: LD_ADDR_VAR 0 4
60988: PUSH
60989: LD_VAR 0 2
60993: PPUSH
60994: CALL_OW 250
60998: ST_TO_ADDR
// y := GetY ( building ) ;
60999: LD_ADDR_VAR 0 6
61003: PUSH
61004: LD_VAR 0 2
61008: PPUSH
61009: CALL_OW 251
61013: ST_TO_ADDR
// d := GetDir ( building ) ;
61014: LD_ADDR_VAR 0 8
61018: PUSH
61019: LD_VAR 0 2
61023: PPUSH
61024: CALL_OW 254
61028: ST_TO_ADDR
// r := 4 ;
61029: LD_ADDR_VAR 0 9
61033: PUSH
61034: LD_INT 4
61036: ST_TO_ADDR
// for i := 1 to 5 do
61037: LD_ADDR_VAR 0 10
61041: PUSH
61042: DOUBLE
61043: LD_INT 1
61045: DEC
61046: ST_TO_ADDR
61047: LD_INT 5
61049: PUSH
61050: FOR_TO
61051: IFFALSE 61208
// begin _x := ShiftX ( x , d , r + i ) ;
61053: LD_ADDR_VAR 0 5
61057: PUSH
61058: LD_VAR 0 4
61062: PPUSH
61063: LD_VAR 0 8
61067: PPUSH
61068: LD_VAR 0 9
61072: PUSH
61073: LD_VAR 0 10
61077: PLUS
61078: PPUSH
61079: CALL_OW 272
61083: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61084: LD_ADDR_VAR 0 7
61088: PUSH
61089: LD_VAR 0 6
61093: PPUSH
61094: LD_VAR 0 8
61098: PPUSH
61099: LD_VAR 0 9
61103: PUSH
61104: LD_VAR 0 10
61108: PLUS
61109: PPUSH
61110: CALL_OW 273
61114: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61115: LD_VAR 0 5
61119: PPUSH
61120: LD_VAR 0 7
61124: PPUSH
61125: CALL_OW 488
61129: PUSH
61130: LD_VAR 0 5
61134: PPUSH
61135: LD_VAR 0 7
61139: PPUSH
61140: CALL_OW 428
61144: PPUSH
61145: CALL_OW 247
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: IN
61160: NOT
61161: AND
61162: IFFALSE 61206
// begin ComMoveXY ( unit , _x , _y ) ;
61164: LD_VAR 0 1
61168: PPUSH
61169: LD_VAR 0 5
61173: PPUSH
61174: LD_VAR 0 7
61178: PPUSH
61179: CALL_OW 111
// result := [ _x , _y ] ;
61183: LD_ADDR_VAR 0 3
61187: PUSH
61188: LD_VAR 0 5
61192: PUSH
61193: LD_VAR 0 7
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: ST_TO_ADDR
// exit ;
61202: POP
61203: POP
61204: GO 61210
// end ; end ;
61206: GO 61050
61208: POP
61209: POP
// end ;
61210: LD_VAR 0 3
61214: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61215: LD_INT 0
61217: PPUSH
61218: PPUSH
61219: PPUSH
// result := 0 ;
61220: LD_ADDR_VAR 0 3
61224: PUSH
61225: LD_INT 0
61227: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61228: LD_VAR 0 1
61232: PUSH
61233: LD_INT 0
61235: LESS
61236: PUSH
61237: LD_VAR 0 1
61241: PUSH
61242: LD_INT 8
61244: GREATER
61245: OR
61246: PUSH
61247: LD_VAR 0 2
61251: PUSH
61252: LD_INT 0
61254: LESS
61255: OR
61256: PUSH
61257: LD_VAR 0 2
61261: PUSH
61262: LD_INT 8
61264: GREATER
61265: OR
61266: IFFALSE 61270
// exit ;
61268: GO 61345
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61270: LD_ADDR_VAR 0 4
61274: PUSH
61275: LD_INT 22
61277: PUSH
61278: LD_VAR 0 2
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PPUSH
61287: CALL_OW 69
61291: PUSH
61292: FOR_IN
61293: IFFALSE 61343
// begin un := UnitShoot ( i ) ;
61295: LD_ADDR_VAR 0 5
61299: PUSH
61300: LD_VAR 0 4
61304: PPUSH
61305: CALL_OW 504
61309: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61310: LD_VAR 0 5
61314: PPUSH
61315: CALL_OW 255
61319: PUSH
61320: LD_VAR 0 1
61324: EQUAL
61325: IFFALSE 61341
// begin result := un ;
61327: LD_ADDR_VAR 0 3
61331: PUSH
61332: LD_VAR 0 5
61336: ST_TO_ADDR
// exit ;
61337: POP
61338: POP
61339: GO 61345
// end ; end ;
61341: GO 61292
61343: POP
61344: POP
// end ;
61345: LD_VAR 0 3
61349: RET
// export function GetCargoBay ( units ) ; begin
61350: LD_INT 0
61352: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61353: LD_ADDR_VAR 0 2
61357: PUSH
61358: LD_VAR 0 1
61362: PPUSH
61363: LD_INT 2
61365: PUSH
61366: LD_INT 34
61368: PUSH
61369: LD_INT 12
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 34
61378: PUSH
61379: LD_INT 51
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 34
61388: PUSH
61389: LD_INT 32
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 34
61398: PUSH
61399: LD_EXP 95
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: PPUSH
61415: CALL_OW 72
61419: ST_TO_ADDR
// end ; end_of_file
61420: LD_VAR 0 2
61424: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61425: LD_VAR 0 1
61429: PUSH
61430: LD_INT 200
61432: DOUBLE
61433: GREATEREQUAL
61434: IFFALSE 61442
61436: LD_INT 299
61438: DOUBLE
61439: LESSEQUAL
61440: IFTRUE 61444
61442: GO 61476
61444: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61445: LD_VAR 0 1
61449: PPUSH
61450: LD_VAR 0 2
61454: PPUSH
61455: LD_VAR 0 3
61459: PPUSH
61460: LD_VAR 0 4
61464: PPUSH
61465: LD_VAR 0 5
61469: PPUSH
61470: CALL 19726 0 5
61474: GO 61553
61476: LD_INT 300
61478: DOUBLE
61479: GREATEREQUAL
61480: IFFALSE 61488
61482: LD_INT 399
61484: DOUBLE
61485: LESSEQUAL
61486: IFTRUE 61490
61488: GO 61552
61490: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61491: LD_VAR 0 1
61495: PPUSH
61496: LD_VAR 0 2
61500: PPUSH
61501: LD_VAR 0 3
61505: PPUSH
61506: LD_VAR 0 4
61510: PPUSH
61511: LD_VAR 0 5
61515: PPUSH
61516: LD_VAR 0 6
61520: PPUSH
61521: LD_VAR 0 7
61525: PPUSH
61526: LD_VAR 0 8
61530: PPUSH
61531: LD_VAR 0 9
61535: PPUSH
61536: LD_VAR 0 10
61540: PPUSH
61541: LD_VAR 0 11
61545: PPUSH
61546: CALL 17614 0 11
61550: GO 61553
61552: POP
// end ;
61553: PPOPN 11
61555: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61556: LD_VAR 0 1
61560: PPUSH
61561: LD_VAR 0 2
61565: PPUSH
61566: LD_VAR 0 3
61570: PPUSH
61571: LD_VAR 0 4
61575: PPUSH
61576: LD_VAR 0 5
61580: PPUSH
61581: CALL 19708 0 5
// end ; end_of_file
61585: PPOPN 5
61587: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61588: LD_VAR 0 1
61592: PPUSH
61593: LD_VAR 0 2
61597: PPUSH
61598: LD_VAR 0 3
61602: PPUSH
61603: LD_VAR 0 4
61607: PPUSH
61608: LD_VAR 0 5
61612: PPUSH
61613: LD_VAR 0 6
61617: PPUSH
61618: CALL 6422 0 6
// end ;
61622: PPOPN 6
61624: END
