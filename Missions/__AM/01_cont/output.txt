// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2932 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 27744 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 27744 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 27744 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 27
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 27744 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 27
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 3 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 3
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1807
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 131
1740: PUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 167
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_INT 87
1760: PUSH
1761: LD_INT 14
1763: PUSH
1764: LD_INT 95
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_VAR 0 3
1776: ARRAY
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1785: LD_ADDR_EXP 23
1789: PUSH
1790: LD_EXP 23
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 65435 0 2
1804: ST_TO_ADDR
// end ;
1805: GO 1670
1807: POP
1808: POP
// for i = 1 to 2 do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1914
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1825: LD_INT 2
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_VAR 0 3
1843: ARRAY
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1865: LD_ADDR_EXP 24
1869: PUSH
1870: LD_EXP 24
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 2
1887: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1888: LD_VAR 0 4
1892: PPUSH
1893: LD_INT 10
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// ComHold ( un ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 140
// end ;
1912: GO 1822
1914: POP
1915: POP
// if Difficulty < 3 then
1916: LD_OWVAR 67
1920: PUSH
1921: LD_INT 3
1923: LESS
1924: IFFALSE 1928
// exit ;
1926: GO 1999
// PrepareHuman ( false , 1 , skill ) ;
1928: LD_INT 0
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_VAR 0 2
1938: PPUSH
1939: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1943: LD_ADDR_EXP 25
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1953: LD_EXP 25
1957: PPUSH
1958: LD_INT 82
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
1971: LD_ADDR_EXP 26
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
1981: LD_EXP 26
1985: PPUSH
1986: LD_INT 136
1988: PPUSH
1989: LD_INT 30
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 48
// end ;
1999: LD_VAR 0 1
2003: RET
// every 0 0$01 trigger active_road_patrol do
2004: LD_EXP 8
2008: IFFALSE 2074
2010: GO 2012
2012: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2013: LD_EXP 23
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: LD_STRING road
2024: PPUSH
2025: LD_INT 70
2027: PPUSH
2028: LD_INT 131
2030: PUSH
2031: LD_INT 87
2033: PUSH
2034: LD_INT 107
2036: PUSH
2037: LD_INT 75
2039: PUSH
2040: LD_INT 107
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 114
2048: PUSH
2049: LD_INT 61
2051: PUSH
2052: LD_INT 107
2054: PUSH
2055: LD_INT 34
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL 421 0 4
2074: END
// every 0 0$01 trigger active_road_patrol do
2075: LD_EXP 8
2079: IFFALSE 2137
2081: GO 2083
2083: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2084: LD_EXP 23
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_STRING road
2095: PPUSH
2096: LD_INT 70
2098: PPUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 37
2107: PUSH
2108: LD_INT 30
2110: PUSH
2111: LD_INT 65
2113: PUSH
2114: LD_INT 62
2116: PUSH
2117: LD_INT 107
2119: PUSH
2120: LD_INT 76
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL 421 0 4
2137: END
// every 0 0$01 trigger active_road_patrol do
2138: LD_EXP 8
2142: IFFALSE 2200
2144: GO 2146
2146: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2147: LD_EXP 23
2151: PUSH
2152: LD_INT 3
2154: ARRAY
2155: PPUSH
2156: LD_STRING road
2158: PPUSH
2159: LD_INT 70
2161: PPUSH
2162: LD_INT 167
2164: PUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 147
2170: PUSH
2171: LD_INT 81
2173: PUSH
2174: LD_INT 144
2176: PUSH
2177: LD_INT 66
2179: PUSH
2180: LD_INT 149
2182: PUSH
2183: LD_INT 55
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PPUSH
2196: CALL 421 0 4
2200: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2201: LD_EXP 25
2205: PPUSH
2206: CALL_OW 302
2210: IFFALSE 2272
2212: GO 2214
2214: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2215: LD_EXP 25
2219: PPUSH
2220: LD_STRING forest
2222: PPUSH
2223: LD_INT 35
2225: PPUSH
2226: LD_INT 52
2228: PUSH
2229: LD_INT 15
2231: PUSH
2232: LD_INT 81
2234: PUSH
2235: LD_INT 9
2237: PUSH
2238: LD_INT 120
2240: PUSH
2241: LD_INT 52
2243: PUSH
2244: LD_INT 135
2246: PUSH
2247: LD_INT 80
2249: PUSH
2250: LD_INT 122
2252: PUSH
2253: LD_INT 95
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL 421 0 4
2272: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2273: LD_EXP 26
2277: PPUSH
2278: CALL_OW 302
2282: IFFALSE 2336
2284: GO 2286
2286: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2287: LD_EXP 26
2291: PPUSH
2292: LD_STRING forest
2294: PPUSH
2295: LD_INT 70
2297: PPUSH
2298: LD_INT 137
2300: PUSH
2301: LD_INT 30
2303: PUSH
2304: LD_INT 127
2306: PUSH
2307: LD_INT 23
2309: PUSH
2310: LD_INT 122
2312: PUSH
2313: LD_INT 16
2315: PUSH
2316: LD_INT 114
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PPUSH
2332: CALL 421 0 4
2336: END
// every 0 0$01 trigger macmilan_use_radio do
2337: LD_EXP 6
2341: IFFALSE 2402
2343: GO 2345
2345: DISABLE
// begin active_road_patrol := false ;
2346: LD_ADDR_EXP 8
2350: PUSH
2351: LD_INT 0
2353: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2354: LD_EXP 23
2358: PPUSH
2359: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2363: LD_EXP 23
2367: PPUSH
2368: LD_INT 72
2370: PPUSH
2371: LD_INT 41
2373: PPUSH
2374: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2378: LD_EXP 22
2382: PPUSH
2383: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2387: LD_EXP 22
2391: PPUSH
2392: LD_INT 72
2394: PPUSH
2395: LD_INT 41
2397: PPUSH
2398: CALL_OW 174
// end ;
2402: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2403: LD_INT 9
2405: PPUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: IFFALSE 2494
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 22
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 70
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2456: LD_EXP 22
2460: PPUSH
2461: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2465: LD_EXP 22
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: CALL_OW 250
2479: PPUSH
2480: LD_VAR 0 1
2484: PPUSH
2485: CALL_OW 251
2489: PPUSH
2490: CALL_OW 174
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2497: LD_EXP 23
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PPUSH
2506: CALL_OW 256
2510: PUSH
2511: LD_INT 999
2513: LESS
2514: PUSH
2515: LD_EXP 23
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: CALL_OW 256
2528: PUSH
2529: LD_INT 999
2531: LESS
2532: OR
2533: PUSH
2534: LD_INT 3
2536: PPUSH
2537: LD_EXP 16
2541: PPUSH
2542: CALL_OW 292
2546: AND
2547: IFFALSE 2574
2549: GO 2551
2551: DISABLE
// begin active_road_patrol := false ;
2552: LD_ADDR_EXP 8
2556: PUSH
2557: LD_INT 0
2559: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_EXP 16
2569: PPUSH
2570: CALL_OW 115
// end ;
2574: END
// every 0 0$01 trigger macmilan_in_trap do
2575: LD_EXP 9
2579: IFFALSE 2625
2581: GO 2583
2583: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2584: LD_EXP 22
2588: PPUSH
2589: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2593: LD_EXP 21
2597: PUSH
2598: LD_EXP 22
2602: ADD
2603: PUSH
2604: LD_EXP 27
2608: ADD
2609: PUSH
2610: LD_EXP 23
2614: ADD
2615: PPUSH
2616: LD_EXP 16
2620: PPUSH
2621: CALL_OW 115
// end ;
2625: END
// every 0 0$01 trigger meta_action do
2626: LD_EXP 10
2630: IFFALSE 2748
2632: GO 2634
2634: DISABLE
// begin active_road_patrol := false ;
2635: LD_ADDR_EXP 8
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2643: LD_INT 15
2645: PPUSH
2646: LD_INT 22
2648: PUSH
2649: LD_INT 1
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PPUSH
2656: CALL_OW 70
2660: IFFALSE 2715
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2662: LD_EXP 21
2666: PUSH
2667: LD_EXP 22
2671: ADD
2672: PPUSH
2673: LD_INT 104
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2683: LD_EXP 23
2687: PPUSH
2688: LD_INT 96
2690: PPUSH
2691: LD_INT 14
2693: PPUSH
2694: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2698: LD_EXP 27
2702: PPUSH
2703: LD_INT 85
2705: PPUSH
2706: LD_INT 4
2708: PPUSH
2709: CALL_OW 114
// end else
2713: GO 2748
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2715: LD_EXP 21
2719: PUSH
2720: LD_EXP 22
2724: ADD
2725: PUSH
2726: LD_EXP 27
2730: ADD
2731: PUSH
2732: LD_EXP 23
2736: ADD
2737: PPUSH
2738: LD_INT 93
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 114
// end ;
2748: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2749: LD_EXP 27
2753: PPUSH
2754: CALL_OW 256
2758: PUSH
2759: LD_INT 1000
2761: LESS
2762: IFFALSE 2813
2764: GO 2766
2766: DISABLE
// begin enable ;
2767: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2768: LD_INT 18
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 428
2778: PUSH
2779: LD_EXP 27
2783: EQUAL
2784: IFFALSE 2798
// begin RemoveUnit ( Pokryshkin ) ;
2786: LD_EXP 27
2790: PPUSH
2791: CALL_OW 64
// disable ;
2795: DISABLE
// end else
2796: GO 2813
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2798: LD_EXP 27
2802: PPUSH
2803: LD_INT 18
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 111
// end ;
2813: END
// every 0 0$20 trigger send_troops_to_forest do
2814: LD_EXP 14
2818: IFFALSE 2872
2820: GO 2822
2822: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2823: LD_EXP 25
2827: PPUSH
2828: CALL_OW 302
2832: NOT
2833: IFFALSE 2837
// exit ;
2835: GO 2872
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2837: LD_EXP 21
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: PPUSH
2848: LD_EXP 25
2852: PPUSH
2853: CALL_OW 252
2857: PPUSH
2858: LD_EXP 25
2862: PPUSH
2863: CALL_OW 253
2867: PPUSH
2868: CALL_OW 114
// end ;
2872: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL_OW 255
2882: PUSH
2883: LD_INT 3
2885: EQUAL
2886: IFFALSE 2929
// begin wait ( 11 ) ;
2888: LD_INT 11
2890: PPUSH
2891: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 69
2914: PPUSH
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 74
2924: PPUSH
2925: CALL_OW 120
// end ; end ; end_of_file
2929: PPOPN 4
2931: END
// export function Action ; var i ; begin
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: PUSH
2970: FOR_IN
2971: IFFALSE 2984
// ComHold ( i ) ;
2973: LD_VAR 0 2
2977: PPUSH
2978: CALL_OW 140
2982: GO 2970
2984: POP
2985: POP
// InGameOn ;
2986: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2990: LD_INT 79
2992: PPUSH
2993: LD_INT 76
2995: PPUSH
2996: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3000: LD_INT 10
3002: PPUSH
3003: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3007: LD_EXP 16
3011: PPUSH
3012: LD_INT 80
3014: PPUSH
3015: LD_INT 79
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 48
// Wait ( 0 0$03 ) ;
3025: LD_INT 105
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 80
3039: PPUSH
3040: LD_INT 76
3042: PPUSH
3043: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_STRING D1-JMM-1
3054: PPUSH
3055: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3059: LD_INT 10
3061: PPUSH
3062: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3066: LD_EXP 16
3070: PPUSH
3071: LD_INT 76
3073: PPUSH
3074: LD_INT 76
3076: PPUSH
3077: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3081: LD_EXP 16
3085: PPUSH
3086: LD_STRING D1-JMM-1a
3088: PPUSH
3089: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3093: LD_INT 10
3095: PPUSH
3096: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3100: LD_EXP 16
3104: PPUSH
3105: LD_INT 83
3107: PPUSH
3108: LD_INT 66
3110: PPUSH
3111: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3115: LD_EXP 16
3119: PPUSH
3120: LD_STRING D1-JMM-1b
3122: PPUSH
3123: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3127: LD_INT 18
3129: PPUSH
3130: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3134: LD_EXP 16
3138: PPUSH
3139: LD_STRING D1-JMM-1c
3141: PPUSH
3142: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3146: LD_INT 7
3148: PPUSH
3149: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3153: LD_EXP 19
3157: PPUSH
3158: LD_STRING D1-Pow-1
3160: PPUSH
3161: CALL 69354 0 2
// Say ( JMM , D1-JMM-2 ) ;
3165: LD_EXP 16
3169: PPUSH
3170: LD_STRING D1-JMM-2
3172: PPUSH
3173: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3177: LD_EXP 19
3181: PPUSH
3182: LD_STRING D1-Pow-2
3184: PPUSH
3185: CALL 69354 0 2
// Say ( JMM , D1-JMM-3 ) ;
3189: LD_EXP 16
3193: PPUSH
3194: LD_STRING D1-JMM-3
3196: PPUSH
3197: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3201: LD_EXP 19
3205: PPUSH
3206: LD_STRING D1-Pow-3
3208: PPUSH
3209: CALL 69354 0 2
// Say ( JMM , D1-JMM-4 ) ;
3213: LD_EXP 16
3217: PPUSH
3218: LD_STRING D1-JMM-4
3220: PPUSH
3221: CALL_OW 88
// ComFree ( JMM ) ;
3225: LD_EXP 16
3229: PPUSH
3230: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3234: LD_INT 10
3236: PPUSH
3237: CALL_OW 67
// InGameOff ;
3241: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3245: LD_STRING M1
3247: PPUSH
3248: CALL_OW 337
// SaveForQuickRestart ;
3252: CALL_OW 22
// active_russian_dialog := true ;
3256: LD_ADDR_EXP 3
3260: PUSH
3261: LD_INT 1
3263: ST_TO_ADDR
// active_road_patrol := true ;
3264: LD_ADDR_EXP 8
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// if Difficulty < 3 then
3272: LD_OWVAR 67
3276: PUSH
3277: LD_INT 3
3279: LESS
3280: IFFALSE 3311
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3282: LD_EXP 17
3286: PPUSH
3287: LD_INT 41
3289: PPUSH
3290: LD_INT 71
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 48
// ComHold ( Bobby ) ;
3300: LD_EXP 17
3304: PPUSH
3305: CALL_OW 140
// end else
3309: GO 3359
// begin SetDir ( Bobby , 5 ) ;
3311: LD_EXP 17
3315: PPUSH
3316: LD_INT 5
3318: PPUSH
3319: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3323: LD_EXP 17
3327: PPUSH
3328: LD_INT 105
3330: PPUSH
3331: LD_INT 98
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 48
// ComCrawl ( Bobby ) ;
3341: LD_EXP 17
3345: PPUSH
3346: CALL_OW 137
// AddComHold ( Bobby ) ;
3350: LD_EXP 17
3354: PPUSH
3355: CALL_OW 200
// end ; if Difficulty < 3 then
3359: LD_OWVAR 67
3363: PUSH
3364: LD_INT 3
3366: LESS
3367: IFFALSE 3404
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3369: LD_EXP 18
3373: PPUSH
3374: LD_INT 90
3376: PPUSH
3377: LD_INT 42
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3387: LD_EXP 18
3391: PPUSH
3392: LD_INT 79
3394: PPUSH
3395: LD_INT 34
3397: PPUSH
3398: CALL_OW 111
// end else
3402: GO 3452
// if Difficulty = 3 then
3404: LD_OWVAR 67
3408: PUSH
3409: LD_INT 3
3411: EQUAL
3412: IFFALSE 3434
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3414: LD_EXP 18
3418: PPUSH
3419: LD_INT 125
3421: PPUSH
3422: LD_INT 42
3424: PPUSH
3425: LD_INT 0
3427: PPUSH
3428: CALL_OW 48
3432: GO 3452
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3434: LD_EXP 18
3438: PPUSH
3439: LD_INT 154
3441: PPUSH
3442: LD_INT 97
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3452: LD_EXP 18
3456: PPUSH
3457: CALL_OW 197
// AddComHold ( Cyrus ) ;
3461: LD_EXP 18
3465: PPUSH
3466: CALL_OW 200
// end ;
3470: LD_VAR 0 1
3474: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3475: LD_EXP 3
3479: IFFALSE 4073
3481: GO 3483
3483: DISABLE
3484: LD_INT 0
3486: PPUSH
// begin wait_points := 0 ;
3487: LD_ADDR_VAR 0 1
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3495: LD_INT 70
3497: PPUSH
3498: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3502: LD_EXP 21
3506: PPUSH
3507: LD_INT 79
3509: PPUSH
3510: LD_INT 83
3512: PPUSH
3513: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3517: LD_EXP 21
3521: PUSH
3522: LD_INT 2
3524: ARRAY
3525: PPUSH
3526: LD_STRING D1R-Rus1-1
3528: PPUSH
3529: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3533: LD_EXP 21
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: LD_STRING D1R-Rus2-1
3544: PPUSH
3545: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3549: LD_EXP 22
3553: PPUSH
3554: LD_INT 91
3556: PPUSH
3557: LD_INT 80
3559: PPUSH
3560: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3564: LD_INT 35
3566: PPUSH
3567: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3571: LD_EXP 21
3575: PUSH
3576: LD_INT 1
3578: ARRAY
3579: PPUSH
3580: LD_INT 79
3582: PPUSH
3583: LD_INT 82
3585: PPUSH
3586: CALL_OW 297
3590: PUSH
3591: LD_INT 6
3593: LESS
3594: IFFALSE 3564
// if not IsInArea ( JMM , jmm_spot ) then
3596: LD_EXP 16
3600: PPUSH
3601: LD_INT 5
3603: PPUSH
3604: CALL_OW 308
3608: NOT
3609: IFFALSE 3629
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3611: LD_EXP 21
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_STRING D1Ra-Rus2-1
3622: PPUSH
3623: CALL_OW 88
3627: GO 3696
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3629: LD_EXP 21
3633: PUSH
3634: LD_INT 2
3636: ARRAY
3637: PPUSH
3638: LD_STRING D1Rb-Rus1-1
3640: PPUSH
3641: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3645: LD_EXP 21
3649: PUSH
3650: LD_INT 1
3652: ARRAY
3653: PPUSH
3654: LD_STRING D1Rb-Rus2-1
3656: PPUSH
3657: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3661: LD_EXP 21
3665: PUSH
3666: LD_EXP 22
3670: ADD
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// end ; wait_points := 10 ;
3696: LD_ADDR_VAR 0 1
3700: PUSH
3701: LD_INT 10
3703: ST_TO_ADDR
// if Difficulty > 1 then
3704: LD_OWVAR 67
3708: PUSH
3709: LD_INT 1
3711: GREATER
3712: IFFALSE 3794
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3714: LD_EXP 21
3718: PPUSH
3719: LD_INT 78
3721: PPUSH
3722: LD_INT 95
3724: PPUSH
3725: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3729: LD_EXP 21
3733: PPUSH
3734: LD_INT 175
3736: PPUSH
3737: CALL_OW 202
// wait_points := wait_points + 15 ;
3741: LD_ADDR_VAR 0 1
3745: PUSH
3746: LD_VAR 0 1
3750: PUSH
3751: LD_INT 15
3753: PLUS
3754: ST_TO_ADDR
// if Difficulty > 2 then
3755: LD_OWVAR 67
3759: PUSH
3760: LD_INT 2
3762: GREATER
3763: IFFALSE 3794
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3765: LD_EXP 21
3769: PPUSH
3770: LD_INT 65
3772: PPUSH
3773: LD_INT 79
3775: PPUSH
3776: CALL_OW 174
// wait_points := wait_points + 5 ;
3780: LD_ADDR_VAR 0 1
3784: PUSH
3785: LD_VAR 0 1
3789: PUSH
3790: LD_INT 5
3792: PLUS
3793: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3794: LD_INT 35
3796: PPUSH
3797: CALL_OW 67
// wait_points := wait_points - 1 ;
3801: LD_ADDR_VAR 0 1
3805: PUSH
3806: LD_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: MINUS
3814: ST_TO_ADDR
// if See ( 3 , JMM ) then
3815: LD_INT 3
3817: PPUSH
3818: LD_EXP 16
3822: PPUSH
3823: CALL_OW 292
3827: IFFALSE 3881
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3829: LD_EXP 21
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: PPUSH
3838: LD_STRING D1Rb-Rus1-1
3840: PPUSH
3841: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3845: LD_EXP 21
3849: PPUSH
3850: LD_EXP 16
3854: PPUSH
3855: CALL_OW 250
3859: PPUSH
3860: LD_EXP 16
3864: PPUSH
3865: CALL_OW 251
3869: PPUSH
3870: CALL_OW 114
// Wait ( 0 0$03 ) ;
3874: LD_INT 105
3876: PPUSH
3877: CALL_OW 67
// end ; until wait_points = 0 ;
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 0
3888: EQUAL
3889: IFFALSE 3794
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3891: LD_EXP 21
3895: PUSH
3896: LD_INT 2
3898: ARRAY
3899: PPUSH
3900: LD_STRING D1Rc-Rus1-1
3902: PPUSH
3903: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3907: LD_EXP 21
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PPUSH
3916: LD_STRING D1Ra-Rus2-1a
3918: PPUSH
3919: CALL_OW 88
// active_powell_dialog := true ;
3923: LD_ADDR_EXP 15
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3931: LD_EXP 21
3935: PPUSH
3936: LD_INT 45
3938: PPUSH
3939: LD_INT 5
3941: PPUSH
3942: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3946: LD_EXP 22
3950: PPUSH
3951: LD_INT 26
3953: PPUSH
3954: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3958: LD_INT 35
3960: PPUSH
3961: CALL_OW 67
// if See ( 3 , JMM ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4033
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: LD_STRING D1Rb-Rus1-1
3990: PPUSH
3991: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3995: LD_EXP 21
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 250
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 251
4019: PPUSH
4020: CALL_OW 114
// Wait ( 0 0$50 ) ;
4024: LD_INT 1750
4026: PPUSH
4027: CALL_OW 67
// end else
4031: GO 4048
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4033: LD_EXP 21
4037: PPUSH
4038: LD_INT 45
4040: PPUSH
4041: LD_INT 5
4043: PPUSH
4044: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4048: LD_EXP 21
4052: PUSH
4053: LD_INT 1
4055: ARRAY
4056: PPUSH
4057: LD_INT 45
4059: PPUSH
4060: LD_INT 5
4062: PPUSH
4063: CALL_OW 297
4067: PUSH
4068: LD_INT 10
4070: LESS
4071: IFFALSE 3958
// end ;
4073: PPOPN 1
4075: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4076: LD_INT 22
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 92
4088: PUSH
4089: LD_INT 80
4091: PUSH
4092: LD_INT 83
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4203
4124: GO 4126
4126: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4127: LD_INT 80
4129: PPUSH
4130: LD_INT 83
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 7
4138: NEG
4139: PPUSH
4140: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4144: LD_INT 35
4146: PPUSH
4147: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4151: LD_INT 22
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 92
4163: PUSH
4164: LD_INT 80
4166: PUSH
4167: LD_INT 83
4169: PUSH
4170: LD_INT 10
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL_OW 69
4187: NOT
4188: IFFALSE 4144
// RemoveSeeing ( 80 , 83 , 1 ) ;
4190: LD_INT 80
4192: PPUSH
4193: LD_INT 83
4195: PPUSH
4196: LD_INT 1
4198: PPUSH
4199: CALL_OW 331
// end ;
4203: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4204: LD_EXP 16
4208: PPUSH
4209: LD_EXP 17
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: PUSH
4223: LD_EXP 17
4227: PPUSH
4228: CALL_OW 302
4232: AND
4233: IFFALSE 4692
4235: GO 4237
4237: DISABLE
// begin ComWalk ( Bobby ) ;
4238: LD_EXP 17
4242: PPUSH
4243: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4247: LD_EXP 17
4251: PPUSH
4252: LD_EXP 16
4256: PPUSH
4257: CALL_OW 250
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: CALL_OW 251
4271: PPUSH
4272: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4276: LD_INT 35
4278: PPUSH
4279: CALL_OW 67
// until See ( 4 , JMM ) ;
4283: LD_INT 4
4285: PPUSH
4286: LD_EXP 16
4290: PPUSH
4291: CALL_OW 292
4295: IFFALSE 4276
// InGameOn ;
4297: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4301: LD_EXP 16
4305: PPUSH
4306: LD_EXP 17
4310: PPUSH
4311: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4315: LD_EXP 7
4319: PUSH
4320: LD_EXP 18
4324: PPUSH
4325: CALL_OW 302
4329: AND
4330: PUSH
4331: LD_EXP 16
4335: PPUSH
4336: LD_EXP 18
4340: PPUSH
4341: CALL_OW 296
4345: PUSH
4346: LD_INT 10
4348: LESS
4349: AND
4350: IFFALSE 4395
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4352: LD_EXP 18
4356: PPUSH
4357: LD_EXP 16
4361: PPUSH
4362: CALL_OW 250
4366: PPUSH
4367: LD_EXP 16
4371: PPUSH
4372: CALL_OW 251
4376: PPUSH
4377: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4381: LD_EXP 18
4385: PPUSH
4386: LD_EXP 17
4390: PPUSH
4391: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4395: LD_EXP 16
4399: PPUSH
4400: LD_STRING D2-JMM-1
4402: PPUSH
4403: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4407: LD_INT 10
4409: PPUSH
4410: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_EXP 16
4423: PPUSH
4424: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4428: LD_EXP 17
4432: PPUSH
4433: LD_STRING D2-Bobby-1
4435: PPUSH
4436: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4440: LD_EXP 16
4444: PPUSH
4445: LD_STRING D2-JMM-2
4447: PPUSH
4448: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4452: LD_EXP 17
4456: PPUSH
4457: LD_EXP 16
4461: PPUSH
4462: CALL_OW 250
4466: PPUSH
4467: LD_EXP 16
4471: PPUSH
4472: CALL_OW 251
4476: PPUSH
4477: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4481: LD_EXP 17
4485: PPUSH
4486: LD_STRING D2-Bobby-2
4488: PPUSH
4489: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4493: LD_EXP 16
4497: PPUSH
4498: LD_STRING D2-JMM-3
4500: PPUSH
4501: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4505: LD_EXP 17
4509: PPUSH
4510: LD_EXP 16
4514: PPUSH
4515: CALL_OW 119
// DialogueOn ;
4519: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4523: LD_EXP 17
4527: PPUSH
4528: LD_STRING D2-Bobby-3
4530: PPUSH
4531: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4535: LD_EXP 16
4539: PPUSH
4540: LD_STRING D2-JMM-4
4542: PPUSH
4543: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4547: LD_EXP 17
4551: PPUSH
4552: LD_STRING D2-Bobby-4
4554: PPUSH
4555: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4559: LD_EXP 16
4563: PPUSH
4564: LD_STRING D2-JMM-5
4566: PPUSH
4567: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4571: LD_EXP 17
4575: PPUSH
4576: LD_STRING D2-Bobby-5
4578: PPUSH
4579: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4583: LD_EXP 16
4587: PPUSH
4588: LD_STRING D2-JMM-6
4590: PPUSH
4591: CALL_OW 88
// if not powell_contact then
4595: LD_EXP 5
4599: NOT
4600: IFFALSE 4626
// begin Say ( Bobby , D2-Bobby-6 ) ;
4602: LD_EXP 17
4606: PPUSH
4607: LD_STRING D2-Bobby-6
4609: PPUSH
4610: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4614: LD_EXP 16
4618: PPUSH
4619: LD_STRING D2-JMM-7
4621: PPUSH
4622: CALL_OW 88
// end ; DialogueOff ;
4626: CALL_OW 7
// InGameOff ;
4630: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4634: LD_EXP 17
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4646: LD_EXP 16
4650: PUSH
4651: LD_EXP 17
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PPUSH
4660: CALL_OW 139
// bobby_in_squad := true ;
4664: LD_ADDR_EXP 4
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4672: LD_EXP 5
4676: PUSH
4677: LD_EXP 7
4681: NOT
4682: AND
4683: IFFALSE 4692
// ChangeMissionObjectives ( M2b ) ;
4685: LD_STRING M2b
4687: PPUSH
4688: CALL_OW 337
// end ;
4692: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4693: LD_EXP 3
4697: PUSH
4698: LD_OWVAR 67
4702: PUSH
4703: LD_INT 3
4705: LESS
4706: AND
4707: IFFALSE 4741
4709: GO 4711
4711: DISABLE
// begin wait ( 1 1$00 ) ;
4712: LD_INT 2100
4714: PPUSH
4715: CALL_OW 67
// if not bobby_in_squad then
4719: LD_EXP 4
4723: NOT
4724: IFFALSE 4741
// ComMoveXY ( Bobby , 75 , 83 ) ;
4726: LD_EXP 17
4730: PPUSH
4731: LD_INT 75
4733: PPUSH
4734: LD_INT 83
4736: PPUSH
4737: CALL_OW 111
// end ;
4741: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4742: LD_EXP 7
4746: PUSH
4747: LD_EXP 4
4751: NOT
4752: AND
4753: IFFALSE 4782
4755: GO 4757
4757: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_INT 105
4765: PPUSH
4766: LD_INT 97
4768: PPUSH
4769: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4773: LD_EXP 17
4777: PPUSH
4778: CALL_OW 197
// end ;
4782: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4783: LD_EXP 16
4787: PPUSH
4788: LD_INT 6
4790: PPUSH
4791: CALL_OW 308
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_EXP 17
4805: PPUSH
4806: CALL_OW 296
4810: PUSH
4811: LD_INT 7
4813: LESS
4814: AND
4815: PUSH
4816: LD_EXP 4
4820: AND
4821: IFFALSE 4868
4823: GO 4825
4825: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4826: LD_EXP 16
4830: PUSH
4831: LD_EXP 17
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4844: LD_EXP 16
4848: PPUSH
4849: LD_STRING D2a-JMM-1
4851: PPUSH
4852: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4856: LD_EXP 17
4860: PPUSH
4861: LD_STRING D2a-Bobby-1
4863: PPUSH
4864: CALL_OW 88
// end ;
4868: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4869: LD_EXP 15
4873: PUSH
4874: LD_INT 3
4876: PPUSH
4877: LD_EXP 16
4881: PPUSH
4882: CALL_OW 292
4886: NOT
4887: AND
4888: IFFALSE 5059
4890: GO 4892
4892: DISABLE
// begin wait ( 0 0$5 ) ;
4893: LD_INT 175
4895: PPUSH
4896: CALL_OW 67
// InGameOn ;
4900: CALL_OW 8
// DialogueOn ;
4904: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
4908: LD_EXP 19
4912: PPUSH
4913: LD_STRING D3-Pow-1
4915: PPUSH
4916: CALL 69354 0 2
// Say ( JMM , D3-JMM-1 ) ;
4920: LD_EXP 16
4924: PPUSH
4925: LD_STRING D3-JMM-1
4927: PPUSH
4928: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
4932: LD_EXP 19
4936: PPUSH
4937: LD_STRING D3-Pow-2
4939: PPUSH
4940: CALL 69354 0 2
// Say ( JMM , D3-JMM-2 ) ;
4944: LD_EXP 16
4948: PPUSH
4949: LD_STRING D3-JMM-2
4951: PPUSH
4952: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
4956: LD_EXP 19
4960: PPUSH
4961: LD_STRING D3-Pow-3
4963: PPUSH
4964: CALL 69354 0 2
// DialogueOff ;
4968: CALL_OW 7
// InGameOff ;
4972: CALL_OW 9
// powell_contact := true ;
4976: LD_ADDR_EXP 5
4980: PUSH
4981: LD_INT 1
4983: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4984: LD_INT 10
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 424
// uc_side := 4 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 4
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5010: LD_ADDR_EXP 19
5014: PUSH
5015: LD_STRING Powell
5017: PPUSH
5018: LD_INT 0
5020: PPUSH
5021: LD_STRING 
5023: PPUSH
5024: CALL 27744 0 3
5028: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5029: LD_STRING M2
5031: PPUSH
5032: CALL_OW 337
// if not bobby_in_squad then
5036: LD_EXP 4
5040: NOT
5041: IFFALSE 5052
// ChangeMissionObjectives ( M2a ) else
5043: LD_STRING M2a
5045: PPUSH
5046: CALL_OW 337
5050: GO 5059
// ChangeMissionObjectives ( M2b ) ;
5052: LD_STRING M2b
5054: PPUSH
5055: CALL_OW 337
// end ;
5059: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5060: LD_EXP 16
5064: PPUSH
5065: LD_INT 7
5067: PPUSH
5068: CALL_OW 308
5072: IFFALSE 5207
5074: GO 5076
5076: DISABLE
// begin DialogueOn ;
5077: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5081: LD_EXP 20
5085: PPUSH
5086: LD_STRING D4-Rus3-1
5088: PPUSH
5089: CALL 69354 0 2
// DialogueOff ;
5093: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5097: LD_STRING M3a
5099: PPUSH
5100: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5104: LD_INT 11
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 424
// Wait ( 0 0$02 ) ;
5114: LD_INT 70
5116: PPUSH
5117: CALL_OW 67
// DialogueOn ;
5121: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5125: LD_EXP 19
5129: PPUSH
5130: LD_STRING D4-Pow-1
5132: PPUSH
5133: CALL_OW 586
// DialogueOff ;
5137: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5141: LD_STRING M3b
5143: PPUSH
5144: CALL_OW 337
// case Query ( Q1 ) of 1 :
5148: LD_STRING Q1
5150: PPUSH
5151: CALL_OW 97
5155: PUSH
5156: LD_INT 1
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5195
5164: POP
// begin macmilan_use_radio := true ;
5165: LD_ADDR_EXP 6
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// DialogueOn ;
5173: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5177: LD_EXP 16
5181: PPUSH
5182: LD_STRING D4a-JMM-1
5184: PPUSH
5185: CALL_OW 88
// DialogueOff ;
5189: CALL_OW 7
// end ; 2 :
5193: GO 5207
5195: LD_INT 2
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5206
5203: POP
// ; end ;
5204: GO 5207
5206: POP
// end ;
5207: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5208: LD_EXP 16
5212: PPUSH
5213: LD_EXP 18
5217: PPUSH
5218: CALL_OW 296
5222: PUSH
5223: LD_INT 8
5225: LESS
5226: PUSH
5227: LD_EXP 18
5231: PPUSH
5232: CALL_OW 302
5236: AND
5237: IFFALSE 5528
5239: GO 5241
5241: DISABLE
// begin InGameOn ;
5242: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5246: LD_EXP 16
5250: PPUSH
5251: LD_EXP 18
5255: PPUSH
5256: CALL_OW 250
5260: PPUSH
5261: LD_EXP 18
5265: PPUSH
5266: CALL_OW 251
5270: PPUSH
5271: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5275: LD_EXP 17
5279: PPUSH
5280: CALL_OW 302
5284: PUSH
5285: LD_EXP 4
5289: AND
5290: IFFALSE 5321
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5292: LD_EXP 17
5296: PPUSH
5297: LD_EXP 16
5301: PPUSH
5302: CALL_OW 250
5306: PPUSH
5307: LD_EXP 16
5311: PPUSH
5312: CALL_OW 251
5316: PPUSH
5317: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5321: LD_EXP 16
5325: PPUSH
5326: LD_STRING D5-JMM-1
5328: PPUSH
5329: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5333: LD_INT 10
5335: PPUSH
5336: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5340: LD_EXP 16
5344: PPUSH
5345: LD_EXP 18
5349: PPUSH
5350: CALL_OW 119
// ComWalk ( Cyrus ) ;
5354: LD_EXP 18
5358: PPUSH
5359: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5363: LD_EXP 18
5367: PPUSH
5368: LD_EXP 16
5372: PPUSH
5373: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5377: LD_EXP 18
5381: PPUSH
5382: LD_STRING D5-Cyrus-1
5384: PPUSH
5385: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5389: LD_EXP 17
5393: PPUSH
5394: CALL_OW 302
5398: PUSH
5399: LD_EXP 4
5403: AND
5404: IFFALSE 5444
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5406: LD_EXP 17
5410: PPUSH
5411: LD_EXP 18
5415: PPUSH
5416: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5420: LD_EXP 17
5424: PPUSH
5425: LD_STRING D5-Bobby-1
5427: PPUSH
5428: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5432: LD_EXP 16
5436: PPUSH
5437: LD_STRING D5-JMM-2
5439: PPUSH
5440: CALL_OW 88
// end ; InGameOff ;
5444: CALL_OW 9
// cyrus_in_squad := true ;
5448: LD_ADDR_EXP 7
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5456: LD_EXP 18
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5468: LD_EXP 5
5472: PUSH
5473: LD_EXP 4
5477: NOT
5478: AND
5479: IFFALSE 5488
// ChangeMissionObjectives ( M2b ) ;
5481: LD_STRING M2b
5483: PPUSH
5484: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5488: LD_EXP 4
5492: NOT
5493: PUSH
5494: LD_EXP 17
5498: PPUSH
5499: CALL_OW 255
5503: PUSH
5504: LD_INT 4
5506: EQUAL
5507: AND
5508: PUSH
5509: LD_EXP 17
5513: PPUSH
5514: CALL_OW 302
5518: AND
5519: IFFALSE 5528
// SetAchievement ( ACH_CYRUS ) ;
5521: LD_STRING ACH_CYRUS
5523: PPUSH
5524: CALL_OW 543
// end ;
5528: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5529: LD_EXP 4
5533: PUSH
5534: LD_EXP 7
5538: AND
5539: IFFALSE 5551
5541: GO 5543
5543: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5544: LD_STRING M2c
5546: PPUSH
5547: CALL_OW 337
5551: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5552: LD_EXP 16
5556: PPUSH
5557: LD_INT 8
5559: PPUSH
5560: CALL_OW 308
5564: IFFALSE 5616
5566: GO 5568
5568: DISABLE
// begin macmilan_in_trap := true ;
5569: LD_ADDR_EXP 9
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// DialogueOn ;
5584: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5588: LD_EXP 27
5592: PPUSH
5593: LD_STRING D5-Pok-1
5595: PPUSH
5596: CALL_OW 88
// DialogueOff ;
5600: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D4b-JMM-1
5611: PPUSH
5612: CALL_OW 88
// end ;
5616: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5617: LD_EXP 16
5621: PPUSH
5622: LD_INT 13
5624: PPUSH
5625: CALL_OW 308
5629: PUSH
5630: LD_EXP 16
5634: PPUSH
5635: LD_EXP 24
5639: PUSH
5640: LD_EXP 24
5644: ARRAY
5645: PPUSH
5646: CALL_OW 296
5650: PUSH
5651: LD_INT 12
5653: LESS
5654: AND
5655: PUSH
5656: LD_EXP 24
5660: PPUSH
5661: LD_INT 3
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: LD_INT 990
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 72
5682: OR
5683: IFFALSE 5951
5685: GO 5687
5687: DISABLE
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5692: LD_ADDR_VAR 0 2
5696: PUSH
5697: LD_INT 300
5699: PUSH
5700: LD_INT 250
5702: PUSH
5703: LD_INT 200
5705: PUSH
5706: LD_INT 150
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: LD_OWVAR 67
5719: ARRAY
5720: ST_TO_ADDR
// for i in russian_meta_guards do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_EXP 24
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5772
// if IsOk ( i ) then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 302
5743: IFFALSE 5770
// SetLives ( i , GetLives ( i ) - hp ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL_OW 256
5759: PUSH
5760: LD_VAR 0 2
5764: MINUS
5765: PPUSH
5766: CALL_OW 234
5770: GO 5731
5772: POP
5773: POP
// DialogueOn ;
5774: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5778: LD_EXP 24
5782: PUSH
5783: LD_EXP 24
5787: ARRAY
5788: PPUSH
5789: LD_STRING D6-FRus1-1
5791: PPUSH
5792: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 1 then
5796: LD_INT 22
5798: PUSH
5799: LD_INT 1
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 50
5808: PUSH
5809: EMPTY
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_INT 1
5823: GREATER
5824: IFFALSE 5838
// Say ( JMM , D6-JMM-1 ) ;
5826: LD_EXP 16
5830: PPUSH
5831: LD_STRING D6-JMM-1
5833: PPUSH
5834: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5838: LD_EXP 18
5842: PPUSH
5843: CALL_OW 302
5847: PUSH
5848: LD_EXP 7
5852: AND
5853: IFFALSE 5867
// Say ( Cyrus , D6-Cyrus-1 ) ;
5855: LD_EXP 18
5859: PPUSH
5860: LD_STRING D6-Cyrus-1
5862: PPUSH
5863: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5867: LD_EXP 17
5871: PPUSH
5872: CALL_OW 302
5876: PUSH
5877: LD_EXP 4
5881: AND
5882: IFFALSE 5896
// Say ( Bobby , D6-Bobby-1 ) ;
5884: LD_EXP 17
5888: PPUSH
5889: LD_STRING D6-Bobby-1
5891: PPUSH
5892: CALL_OW 88
// DialogueOff ;
5896: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5900: LD_INT 140
5902: PUSH
5903: LD_INT 105
5905: PUSH
5906: LD_INT 70
5908: PUSH
5909: LD_INT 70
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: LD_OWVAR 67
5922: ARRAY
5923: PPUSH
5924: CALL_OW 67
// meta_action := true ;
5928: LD_ADDR_EXP 10
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5936: LD_EXP 24
5940: PPUSH
5941: LD_INT 94
5943: PPUSH
5944: LD_INT 8
5946: PPUSH
5947: CALL_OW 114
// end ;
5951: PPOPN 2
5953: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
5954: LD_EXP 16
5958: PPUSH
5959: LD_INT 14
5961: PPUSH
5962: CALL_OW 308
5966: IFFALSE 5978
5968: GO 5970
5970: DISABLE
// SetAchievement ( ACH_SECRET ) ;
5971: LD_STRING ACH_SECRET
5973: PPUSH
5974: CALL_OW 543
5978: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5979: LD_EXP 16
5983: PPUSH
5984: LD_INT 93
5986: PPUSH
5987: LD_INT 1
5989: PPUSH
5990: CALL_OW 297
5994: PUSH
5995: LD_INT 5
5997: LESS
5998: PUSH
5999: LD_INT 22
6001: PUSH
6002: LD_INT 1
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PPUSH
6009: CALL_OW 69
6013: PUSH
6014: LD_INT 1
6016: GREATER
6017: AND
6018: IFFALSE 6035
6020: GO 6022
6022: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
6023: LD_EXP 16
6027: PPUSH
6028: LD_STRING D6a-JMM-1
6030: PPUSH
6031: CALL_OW 88
6035: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6036: LD_EXP 17
6040: PPUSH
6041: LD_INT 10
6043: PPUSH
6044: CALL_OW 308
6048: PUSH
6049: LD_EXP 17
6053: PPUSH
6054: LD_INT 12
6056: PPUSH
6057: CALL_OW 308
6061: OR
6062: IFFALSE 6118
6064: GO 6066
6066: DISABLE
// begin bobby_saved := true ;
6067: LD_ADDR_EXP 12
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6075: LD_EXP 17
6079: PPUSH
6080: CALL_OW 256
6084: PPUSH
6085: LD_STRING 01_BobbyLifePoints_1
6087: PPUSH
6088: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6092: LD_EXP 17
6096: PPUSH
6097: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6101: LD_STRING Bobby
6103: PPUSH
6104: LD_INT 1
6106: PPUSH
6107: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6111: LD_STRING enableBioCharacter(BIO_BOBBY)
6113: PPUSH
6114: CALL_OW 559
// end ;
6118: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6119: LD_EXP 18
6123: PPUSH
6124: LD_INT 10
6126: PPUSH
6127: CALL_OW 308
6131: PUSH
6132: LD_EXP 18
6136: PPUSH
6137: LD_INT 12
6139: PPUSH
6140: CALL_OW 308
6144: OR
6145: IFFALSE 6201
6147: GO 6149
6149: DISABLE
// begin cyrus_saved := true ;
6150: LD_ADDR_EXP 13
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6158: LD_EXP 18
6162: PPUSH
6163: CALL_OW 256
6167: PPUSH
6168: LD_STRING 01_CyrusLifePoints_1
6170: PPUSH
6171: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6175: LD_EXP 18
6179: PPUSH
6180: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6184: LD_STRING Cyrus
6186: PPUSH
6187: LD_INT 1
6189: PPUSH
6190: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6194: LD_STRING enableBioCharacter(BIO_CYRUS)
6196: PPUSH
6197: CALL_OW 559
// end ;
6201: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6202: LD_EXP 16
6206: PPUSH
6207: LD_INT 10
6209: PPUSH
6210: CALL_OW 308
6214: PUSH
6215: LD_EXP 16
6219: PPUSH
6220: LD_INT 12
6222: PPUSH
6223: CALL_OW 308
6227: OR
6228: IFFALSE 6857
6230: GO 6232
6232: DISABLE
6233: LD_INT 0
6235: PPUSH
6236: PPUSH
6237: PPUSH
6238: PPUSH
6239: PPUSH
6240: PPUSH
// begin if macmilan_use_radio then
6241: LD_EXP 6
6245: IFFALSE 6254
// SetAchievement ( ACH_RADIO ) ;
6247: LD_STRING ACH_RADIO
6249: PPUSH
6250: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6254: LD_EXP 13
6258: NOT
6259: PUSH
6260: LD_EXP 7
6264: AND
6265: PUSH
6266: LD_EXP 18
6270: PPUSH
6271: CALL_OW 302
6275: AND
6276: PUSH
6277: LD_EXP 12
6281: NOT
6282: PUSH
6283: LD_EXP 4
6287: AND
6288: PUSH
6289: LD_EXP 17
6293: PPUSH
6294: CALL_OW 302
6298: AND
6299: OR
6300: IFFALSE 6341
// case Query ( Q2 ) of 1 :
6302: LD_STRING Q2
6304: PPUSH
6305: CALL_OW 97
6309: PUSH
6310: LD_INT 1
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6329
6318: POP
// wait_for_them := true ; 2 :
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
6327: GO 6341
6329: LD_INT 2
6331: DOUBLE
6332: EQUAL
6333: IFTRUE 6337
6335: GO 6340
6337: POP
// ; end ;
6338: GO 6341
6340: POP
// if wait_for_them then
6341: LD_VAR 0 3
6345: IFFALSE 6458
// repeat wait ( 0 0$01 ) ;
6347: LD_INT 35
6349: PPUSH
6350: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6354: LD_EXP 13
6358: PUSH
6359: LD_EXP 12
6363: AND
6364: PUSH
6365: LD_EXP 13
6369: PUSH
6370: LD_EXP 4
6374: NOT
6375: PUSH
6376: LD_EXP 17
6380: PPUSH
6381: CALL_OW 303
6385: OR
6386: PUSH
6387: LD_EXP 17
6391: PPUSH
6392: CALL_OW 301
6396: OR
6397: AND
6398: OR
6399: PUSH
6400: LD_EXP 12
6404: PUSH
6405: LD_EXP 7
6409: NOT
6410: PUSH
6411: LD_EXP 18
6415: PPUSH
6416: CALL_OW 303
6420: OR
6421: PUSH
6422: LD_EXP 18
6426: PPUSH
6427: CALL_OW 301
6431: OR
6432: AND
6433: OR
6434: PUSH
6435: LD_EXP 17
6439: PPUSH
6440: CALL_OW 301
6444: PUSH
6445: LD_EXP 18
6449: PPUSH
6450: CALL_OW 301
6454: AND
6455: OR
6456: IFFALSE 6347
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6458: LD_EXP 16
6462: PPUSH
6463: CALL_OW 256
6467: PPUSH
6468: LD_STRING 01_JMMLifePoints_1
6470: PPUSH
6471: CALL_OW 39
// RemoveUnit ( JMM ) ;
6475: LD_EXP 16
6479: PPUSH
6480: CALL_OW 64
// to_reward := [ JMM ] ;
6484: LD_ADDR_VAR 0 2
6488: PUSH
6489: LD_EXP 16
6493: PUSH
6494: EMPTY
6495: LIST
6496: ST_TO_ADDR
// if bobby_saved then
6497: LD_EXP 12
6501: IFFALSE 6519
// to_reward := to_reward ^ Bobby ;
6503: LD_ADDR_VAR 0 2
6507: PUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_EXP 17
6517: ADD
6518: ST_TO_ADDR
// if cyrus_saved then
6519: LD_EXP 13
6523: IFFALSE 6541
// to_reward := to_reward ^ Cyrus ;
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_VAR 0 2
6534: PUSH
6535: LD_EXP 18
6539: ADD
6540: ST_TO_ADDR
// m1 := true ;
6541: LD_ADDR_VAR 0 4
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// m2 := bobby_saved ;
6549: LD_ADDR_VAR 0 5
6553: PUSH
6554: LD_EXP 12
6558: ST_TO_ADDR
// m3 := cyrus_saved ;
6559: LD_ADDR_VAR 0 6
6563: PUSH
6564: LD_EXP 13
6568: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6569: LD_STRING JMM
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 101
// if not bobby_in_squad then
6579: LD_EXP 4
6583: NOT
6584: IFFALSE 6597
// AddMedal ( Bobby , - 1 ) ;
6586: LD_STRING Bobby
6588: PPUSH
6589: LD_INT 1
6591: NEG
6592: PPUSH
6593: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6597: LD_EXP 12
6601: NOT
6602: PUSH
6603: LD_EXP 17
6607: PPUSH
6608: CALL_OW 303
6612: PUSH
6613: LD_EXP 17
6617: PPUSH
6618: CALL_OW 301
6622: OR
6623: AND
6624: IFFALSE 6637
// AddMedal ( Bobby , - 2 ) ;
6626: LD_STRING Bobby
6628: PPUSH
6629: LD_INT 2
6631: NEG
6632: PPUSH
6633: CALL_OW 101
// if not cyrus_in_squad then
6637: LD_EXP 7
6641: NOT
6642: IFFALSE 6655
// AddMedal ( Cyrus , - 1 ) ;
6644: LD_STRING Cyrus
6646: PPUSH
6647: LD_INT 1
6649: NEG
6650: PPUSH
6651: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6655: LD_EXP 13
6659: NOT
6660: PUSH
6661: LD_EXP 18
6665: PPUSH
6666: CALL_OW 303
6670: PUSH
6671: LD_EXP 18
6675: PPUSH
6676: CALL_OW 301
6680: OR
6681: AND
6682: IFFALSE 6695
// AddMedal ( Cyrus , - 2 ) ;
6684: LD_STRING Cyrus
6686: PPUSH
6687: LD_INT 2
6689: NEG
6690: PPUSH
6691: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6695: LD_OWVAR 67
6699: PUSH
6700: LD_INT 3
6702: GREATEREQUAL
6703: PUSH
6704: LD_VAR 0 4
6708: AND
6709: PUSH
6710: LD_VAR 0 5
6714: AND
6715: PUSH
6716: LD_VAR 0 6
6720: AND
6721: IFFALSE 6733
// SetAchievementEX ( ACH_AMER , 1 ) ;
6723: LD_STRING ACH_AMER
6725: PPUSH
6726: LD_INT 1
6728: PPUSH
6729: CALL_OW 564
// GiveMedals ( MAIN ) ;
6733: LD_STRING MAIN
6735: PPUSH
6736: CALL_OW 102
// RewardPeople ( to_reward ) ;
6740: LD_VAR 0 2
6744: PPUSH
6745: CALL_OW 43
// if bobby_saved then
6749: LD_EXP 12
6753: IFFALSE 6773
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6755: LD_EXP 17
6759: PPUSH
6760: LD_EXP 2
6764: PUSH
6765: LD_STRING Bobby
6767: STR
6768: PPUSH
6769: CALL_OW 38
// if cyrus_saved then
6773: LD_EXP 13
6777: IFFALSE 6797
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6779: LD_EXP 18
6783: PPUSH
6784: LD_EXP 2
6788: PUSH
6789: LD_STRING Cyrus
6791: STR
6792: PPUSH
6793: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6797: LD_EXP 16
6801: PPUSH
6802: LD_EXP 2
6806: PUSH
6807: LD_STRING JMM
6809: STR
6810: PPUSH
6811: CALL_OW 38
// if tick <= 3 3$00 then
6815: LD_OWVAR 1
6819: PUSH
6820: LD_INT 6300
6822: LESSEQUAL
6823: IFFALSE 6832
// SetAchievement ( ACH_ASPEED_1 ) ;
6825: LD_STRING ACH_ASPEED_1
6827: PPUSH
6828: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
6832: LD_STRING enableBioCharacter(BIO_JMM)
6834: PPUSH
6835: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
6839: LD_STRING enableBioCharacter(BIO_JOAN)
6841: PPUSH
6842: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
6846: LD_STRING enableBioCharacter(BIO_BARN)
6848: PPUSH
6849: CALL_OW 559
// YouWin ;
6853: CALL_OW 103
// end ; end_of_file
6857: PPOPN 6
6859: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6860: LD_VAR 0 1
6864: PUSH
6865: LD_EXP 16
6869: EQUAL
6870: IFFALSE 6879
// YouLost ( JMM ) ;
6872: LD_STRING JMM
6874: PPUSH
6875: CALL_OW 104
// end ;
6879: PPOPN 1
6881: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_VAR 0 2
6891: PPUSH
6892: CALL 22970 0 2
// end ;
6896: PPOPN 2
6898: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
6899: LD_INT 0
6901: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
6902: LD_VAR 0 1
6906: PUSH
6907: LD_INT 22
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 23
6919: PUSH
6920: LD_INT 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: PPUSH
6942: CALL_OW 69
6946: IN
6947: PUSH
6948: LD_VAR 0 2
6952: PUSH
6953: LD_INT 1
6955: EQUAL
6956: AND
6957: IFFALSE 7014
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
6959: LD_ADDR_VAR 0 4
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 3
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PPUSH
6988: CALL_OW 69
6992: PUSH
6993: FOR_IN
6994: IFFALSE 7012
// ComAttackUnit ( i , JMM ) ;
6996: LD_VAR 0 4
7000: PPUSH
7001: LD_EXP 16
7005: PPUSH
7006: CALL_OW 115
7010: GO 6993
7012: POP
7013: POP
// end ;
7014: PPOPN 4
7016: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL 22850 0 1
// if un = JMM then
7026: LD_VAR 0 1
7030: PUSH
7031: LD_EXP 16
7035: EQUAL
7036: IFFALSE 7045
// YouLost ( JMM ) ;
7038: LD_STRING JMM
7040: PPUSH
7041: CALL_OW 104
// end ; end_of_file end_of_file
7045: PPOPN 1
7047: END
// export globalGameSaveCounter ; every 0 0$1 do
7048: GO 7050
7050: DISABLE
// begin enable ;
7051: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7052: LD_STRING updateTimer(
7054: PUSH
7055: LD_OWVAR 1
7059: STR
7060: PUSH
7061: LD_STRING );
7063: STR
7064: PPUSH
7065: CALL_OW 559
// end ;
7069: END
// every 0 0$1 do
7070: GO 7072
7072: DISABLE
// begin globalGameSaveCounter := 0 ;
7073: LD_ADDR_EXP 28
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7081: LD_STRING setGameSaveCounter(0)
7083: PPUSH
7084: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7088: LD_STRING initStreamRollete();
7090: PPUSH
7091: CALL_OW 559
// InitStreamMode ;
7095: CALL 8421 0 0
// DefineStreamItems ( false ) ;
7099: LD_INT 0
7101: PPUSH
7102: CALL 8885 0 1
// end ;
7106: END
// export function SOS_MapStart ( ) ; begin
7107: LD_INT 0
7109: PPUSH
// if streamModeActive then
7110: LD_EXP 29
7114: IFFALSE 7123
// DefineStreamItems ( true ) ;
7116: LD_INT 1
7118: PPUSH
7119: CALL 8885 0 1
// UpdateLuaVariables ( ) ;
7123: CALL 7140 0 0
// UpdateFactoryWaypoints ( ) ;
7127: CALL 21754 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7131: CALL 22011 0 0
// end ;
7135: LD_VAR 0 1
7139: RET
// function UpdateLuaVariables ( ) ; begin
7140: LD_INT 0
7142: PPUSH
// if globalGameSaveCounter then
7143: LD_EXP 28
7147: IFFALSE 7181
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7149: LD_ADDR_EXP 28
7153: PUSH
7154: LD_EXP 28
7158: PPUSH
7159: CALL 66796 0 1
7163: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7164: LD_STRING setGameSaveCounter(
7166: PUSH
7167: LD_EXP 28
7171: STR
7172: PUSH
7173: LD_STRING )
7175: STR
7176: PPUSH
7177: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7181: LD_STRING setGameDifficulty(
7183: PUSH
7184: LD_OWVAR 67
7188: STR
7189: PUSH
7190: LD_STRING )
7192: STR
7193: PPUSH
7194: CALL_OW 559
// end ;
7198: LD_VAR 0 1
7202: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7203: LD_INT 0
7205: PPUSH
// if p2 = stream_mode then
7206: LD_VAR 0 2
7210: PUSH
7211: LD_INT 100
7213: EQUAL
7214: IFFALSE 8217
// begin if not StreamModeActive then
7216: LD_EXP 29
7220: NOT
7221: IFFALSE 7231
// StreamModeActive := true ;
7223: LD_ADDR_EXP 29
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// if p3 = 0 then
7231: LD_VAR 0 3
7235: PUSH
7236: LD_INT 0
7238: EQUAL
7239: IFFALSE 7245
// InitStreamMode ;
7241: CALL 8421 0 0
// if p3 = 1 then
7245: LD_VAR 0 3
7249: PUSH
7250: LD_INT 1
7252: EQUAL
7253: IFFALSE 7263
// sRocket := true ;
7255: LD_ADDR_EXP 34
7259: PUSH
7260: LD_INT 1
7262: ST_TO_ADDR
// if p3 = 2 then
7263: LD_VAR 0 3
7267: PUSH
7268: LD_INT 2
7270: EQUAL
7271: IFFALSE 7281
// sSpeed := true ;
7273: LD_ADDR_EXP 33
7277: PUSH
7278: LD_INT 1
7280: ST_TO_ADDR
// if p3 = 3 then
7281: LD_VAR 0 3
7285: PUSH
7286: LD_INT 3
7288: EQUAL
7289: IFFALSE 7299
// sEngine := true ;
7291: LD_ADDR_EXP 35
7295: PUSH
7296: LD_INT 1
7298: ST_TO_ADDR
// if p3 = 4 then
7299: LD_VAR 0 3
7303: PUSH
7304: LD_INT 4
7306: EQUAL
7307: IFFALSE 7317
// sSpec := true ;
7309: LD_ADDR_EXP 32
7313: PUSH
7314: LD_INT 1
7316: ST_TO_ADDR
// if p3 = 5 then
7317: LD_VAR 0 3
7321: PUSH
7322: LD_INT 5
7324: EQUAL
7325: IFFALSE 7335
// sLevel := true ;
7327: LD_ADDR_EXP 36
7331: PUSH
7332: LD_INT 1
7334: ST_TO_ADDR
// if p3 = 6 then
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 6
7342: EQUAL
7343: IFFALSE 7353
// sArmoury := true ;
7345: LD_ADDR_EXP 37
7349: PUSH
7350: LD_INT 1
7352: ST_TO_ADDR
// if p3 = 7 then
7353: LD_VAR 0 3
7357: PUSH
7358: LD_INT 7
7360: EQUAL
7361: IFFALSE 7371
// sRadar := true ;
7363: LD_ADDR_EXP 38
7367: PUSH
7368: LD_INT 1
7370: ST_TO_ADDR
// if p3 = 8 then
7371: LD_VAR 0 3
7375: PUSH
7376: LD_INT 8
7378: EQUAL
7379: IFFALSE 7389
// sBunker := true ;
7381: LD_ADDR_EXP 39
7385: PUSH
7386: LD_INT 1
7388: ST_TO_ADDR
// if p3 = 9 then
7389: LD_VAR 0 3
7393: PUSH
7394: LD_INT 9
7396: EQUAL
7397: IFFALSE 7407
// sHack := true ;
7399: LD_ADDR_EXP 40
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// if p3 = 10 then
7407: LD_VAR 0 3
7411: PUSH
7412: LD_INT 10
7414: EQUAL
7415: IFFALSE 7425
// sFire := true ;
7417: LD_ADDR_EXP 41
7421: PUSH
7422: LD_INT 1
7424: ST_TO_ADDR
// if p3 = 11 then
7425: LD_VAR 0 3
7429: PUSH
7430: LD_INT 11
7432: EQUAL
7433: IFFALSE 7443
// sRefresh := true ;
7435: LD_ADDR_EXP 42
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// if p3 = 12 then
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 12
7450: EQUAL
7451: IFFALSE 7461
// sExp := true ;
7453: LD_ADDR_EXP 43
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// if p3 = 13 then
7461: LD_VAR 0 3
7465: PUSH
7466: LD_INT 13
7468: EQUAL
7469: IFFALSE 7479
// sDepot := true ;
7471: LD_ADDR_EXP 44
7475: PUSH
7476: LD_INT 1
7478: ST_TO_ADDR
// if p3 = 14 then
7479: LD_VAR 0 3
7483: PUSH
7484: LD_INT 14
7486: EQUAL
7487: IFFALSE 7497
// sFlag := true ;
7489: LD_ADDR_EXP 45
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 15 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 15
7504: EQUAL
7505: IFFALSE 7515
// sKamikadze := true ;
7507: LD_ADDR_EXP 53
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// if p3 = 16 then
7515: LD_VAR 0 3
7519: PUSH
7520: LD_INT 16
7522: EQUAL
7523: IFFALSE 7533
// sTroll := true ;
7525: LD_ADDR_EXP 54
7529: PUSH
7530: LD_INT 1
7532: ST_TO_ADDR
// if p3 = 17 then
7533: LD_VAR 0 3
7537: PUSH
7538: LD_INT 17
7540: EQUAL
7541: IFFALSE 7551
// sSlow := true ;
7543: LD_ADDR_EXP 55
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// if p3 = 18 then
7551: LD_VAR 0 3
7555: PUSH
7556: LD_INT 18
7558: EQUAL
7559: IFFALSE 7569
// sLack := true ;
7561: LD_ADDR_EXP 56
7565: PUSH
7566: LD_INT 1
7568: ST_TO_ADDR
// if p3 = 19 then
7569: LD_VAR 0 3
7573: PUSH
7574: LD_INT 19
7576: EQUAL
7577: IFFALSE 7587
// sTank := true ;
7579: LD_ADDR_EXP 58
7583: PUSH
7584: LD_INT 1
7586: ST_TO_ADDR
// if p3 = 20 then
7587: LD_VAR 0 3
7591: PUSH
7592: LD_INT 20
7594: EQUAL
7595: IFFALSE 7605
// sRemote := true ;
7597: LD_ADDR_EXP 59
7601: PUSH
7602: LD_INT 1
7604: ST_TO_ADDR
// if p3 = 21 then
7605: LD_VAR 0 3
7609: PUSH
7610: LD_INT 21
7612: EQUAL
7613: IFFALSE 7623
// sPowell := true ;
7615: LD_ADDR_EXP 60
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// if p3 = 22 then
7623: LD_VAR 0 3
7627: PUSH
7628: LD_INT 22
7630: EQUAL
7631: IFFALSE 7641
// sTeleport := true ;
7633: LD_ADDR_EXP 63
7637: PUSH
7638: LD_INT 1
7640: ST_TO_ADDR
// if p3 = 23 then
7641: LD_VAR 0 3
7645: PUSH
7646: LD_INT 23
7648: EQUAL
7649: IFFALSE 7659
// sOilTower := true ;
7651: LD_ADDR_EXP 65
7655: PUSH
7656: LD_INT 1
7658: ST_TO_ADDR
// if p3 = 24 then
7659: LD_VAR 0 3
7663: PUSH
7664: LD_INT 24
7666: EQUAL
7667: IFFALSE 7677
// sShovel := true ;
7669: LD_ADDR_EXP 66
7673: PUSH
7674: LD_INT 1
7676: ST_TO_ADDR
// if p3 = 25 then
7677: LD_VAR 0 3
7681: PUSH
7682: LD_INT 25
7684: EQUAL
7685: IFFALSE 7695
// sSheik := true ;
7687: LD_ADDR_EXP 67
7691: PUSH
7692: LD_INT 1
7694: ST_TO_ADDR
// if p3 = 26 then
7695: LD_VAR 0 3
7699: PUSH
7700: LD_INT 26
7702: EQUAL
7703: IFFALSE 7713
// sEarthquake := true ;
7705: LD_ADDR_EXP 69
7709: PUSH
7710: LD_INT 1
7712: ST_TO_ADDR
// if p3 = 27 then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_INT 27
7720: EQUAL
7721: IFFALSE 7731
// sAI := true ;
7723: LD_ADDR_EXP 70
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// if p3 = 28 then
7731: LD_VAR 0 3
7735: PUSH
7736: LD_INT 28
7738: EQUAL
7739: IFFALSE 7749
// sCargo := true ;
7741: LD_ADDR_EXP 73
7745: PUSH
7746: LD_INT 1
7748: ST_TO_ADDR
// if p3 = 29 then
7749: LD_VAR 0 3
7753: PUSH
7754: LD_INT 29
7756: EQUAL
7757: IFFALSE 7767
// sDLaser := true ;
7759: LD_ADDR_EXP 74
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// if p3 = 30 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 30
7774: EQUAL
7775: IFFALSE 7785
// sExchange := true ;
7777: LD_ADDR_EXP 75
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// if p3 = 31 then
7785: LD_VAR 0 3
7789: PUSH
7790: LD_INT 31
7792: EQUAL
7793: IFFALSE 7803
// sFac := true ;
7795: LD_ADDR_EXP 76
7799: PUSH
7800: LD_INT 1
7802: ST_TO_ADDR
// if p3 = 32 then
7803: LD_VAR 0 3
7807: PUSH
7808: LD_INT 32
7810: EQUAL
7811: IFFALSE 7821
// sPower := true ;
7813: LD_ADDR_EXP 77
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// if p3 = 33 then
7821: LD_VAR 0 3
7825: PUSH
7826: LD_INT 33
7828: EQUAL
7829: IFFALSE 7839
// sRandom := true ;
7831: LD_ADDR_EXP 78
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// if p3 = 34 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 34
7846: EQUAL
7847: IFFALSE 7857
// sShield := true ;
7849: LD_ADDR_EXP 79
7853: PUSH
7854: LD_INT 1
7856: ST_TO_ADDR
// if p3 = 35 then
7857: LD_VAR 0 3
7861: PUSH
7862: LD_INT 35
7864: EQUAL
7865: IFFALSE 7875
// sTime := true ;
7867: LD_ADDR_EXP 80
7871: PUSH
7872: LD_INT 1
7874: ST_TO_ADDR
// if p3 = 36 then
7875: LD_VAR 0 3
7879: PUSH
7880: LD_INT 36
7882: EQUAL
7883: IFFALSE 7893
// sTools := true ;
7885: LD_ADDR_EXP 81
7889: PUSH
7890: LD_INT 1
7892: ST_TO_ADDR
// if p3 = 101 then
7893: LD_VAR 0 3
7897: PUSH
7898: LD_INT 101
7900: EQUAL
7901: IFFALSE 7911
// sSold := true ;
7903: LD_ADDR_EXP 46
7907: PUSH
7908: LD_INT 1
7910: ST_TO_ADDR
// if p3 = 102 then
7911: LD_VAR 0 3
7915: PUSH
7916: LD_INT 102
7918: EQUAL
7919: IFFALSE 7929
// sDiff := true ;
7921: LD_ADDR_EXP 47
7925: PUSH
7926: LD_INT 1
7928: ST_TO_ADDR
// if p3 = 103 then
7929: LD_VAR 0 3
7933: PUSH
7934: LD_INT 103
7936: EQUAL
7937: IFFALSE 7947
// sFog := true ;
7939: LD_ADDR_EXP 50
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// if p3 = 104 then
7947: LD_VAR 0 3
7951: PUSH
7952: LD_INT 104
7954: EQUAL
7955: IFFALSE 7965
// sReset := true ;
7957: LD_ADDR_EXP 51
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// if p3 = 105 then
7965: LD_VAR 0 3
7969: PUSH
7970: LD_INT 105
7972: EQUAL
7973: IFFALSE 7983
// sSun := true ;
7975: LD_ADDR_EXP 52
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// if p3 = 106 then
7983: LD_VAR 0 3
7987: PUSH
7988: LD_INT 106
7990: EQUAL
7991: IFFALSE 8001
// sTiger := true ;
7993: LD_ADDR_EXP 48
7997: PUSH
7998: LD_INT 1
8000: ST_TO_ADDR
// if p3 = 107 then
8001: LD_VAR 0 3
8005: PUSH
8006: LD_INT 107
8008: EQUAL
8009: IFFALSE 8019
// sBomb := true ;
8011: LD_ADDR_EXP 49
8015: PUSH
8016: LD_INT 1
8018: ST_TO_ADDR
// if p3 = 108 then
8019: LD_VAR 0 3
8023: PUSH
8024: LD_INT 108
8026: EQUAL
8027: IFFALSE 8037
// sWound := true ;
8029: LD_ADDR_EXP 57
8033: PUSH
8034: LD_INT 1
8036: ST_TO_ADDR
// if p3 = 109 then
8037: LD_VAR 0 3
8041: PUSH
8042: LD_INT 109
8044: EQUAL
8045: IFFALSE 8055
// sBetray := true ;
8047: LD_ADDR_EXP 61
8051: PUSH
8052: LD_INT 1
8054: ST_TO_ADDR
// if p3 = 110 then
8055: LD_VAR 0 3
8059: PUSH
8060: LD_INT 110
8062: EQUAL
8063: IFFALSE 8073
// sContamin := true ;
8065: LD_ADDR_EXP 62
8069: PUSH
8070: LD_INT 1
8072: ST_TO_ADDR
// if p3 = 111 then
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 111
8080: EQUAL
8081: IFFALSE 8091
// sOil := true ;
8083: LD_ADDR_EXP 64
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// if p3 = 112 then
8091: LD_VAR 0 3
8095: PUSH
8096: LD_INT 112
8098: EQUAL
8099: IFFALSE 8109
// sStu := true ;
8101: LD_ADDR_EXP 68
8105: PUSH
8106: LD_INT 1
8108: ST_TO_ADDR
// if p3 = 113 then
8109: LD_VAR 0 3
8113: PUSH
8114: LD_INT 113
8116: EQUAL
8117: IFFALSE 8127
// sBazooka := true ;
8119: LD_ADDR_EXP 71
8123: PUSH
8124: LD_INT 1
8126: ST_TO_ADDR
// if p3 = 114 then
8127: LD_VAR 0 3
8131: PUSH
8132: LD_INT 114
8134: EQUAL
8135: IFFALSE 8145
// sMortar := true ;
8137: LD_ADDR_EXP 72
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// if p3 = 115 then
8145: LD_VAR 0 3
8149: PUSH
8150: LD_INT 115
8152: EQUAL
8153: IFFALSE 8163
// sRanger := true ;
8155: LD_ADDR_EXP 82
8159: PUSH
8160: LD_INT 1
8162: ST_TO_ADDR
// if p3 = 116 then
8163: LD_VAR 0 3
8167: PUSH
8168: LD_INT 116
8170: EQUAL
8171: IFFALSE 8181
// sComputer := true ;
8173: LD_ADDR_EXP 83
8177: PUSH
8178: LD_INT 1
8180: ST_TO_ADDR
// if p3 = 117 then
8181: LD_VAR 0 3
8185: PUSH
8186: LD_INT 117
8188: EQUAL
8189: IFFALSE 8199
// s30 := true ;
8191: LD_ADDR_EXP 84
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// if p3 = 118 then
8199: LD_VAR 0 3
8203: PUSH
8204: LD_INT 118
8206: EQUAL
8207: IFFALSE 8217
// s60 := true ;
8209: LD_ADDR_EXP 85
8213: PUSH
8214: LD_INT 1
8216: ST_TO_ADDR
// end ; if p2 = hack_mode then
8217: LD_VAR 0 2
8221: PUSH
8222: LD_INT 101
8224: EQUAL
8225: IFFALSE 8353
// begin case p3 of 1 :
8227: LD_VAR 0 3
8231: PUSH
8232: LD_INT 1
8234: DOUBLE
8235: EQUAL
8236: IFTRUE 8240
8238: GO 8247
8240: POP
// hHackUnlimitedResources ; 2 :
8241: CALL 20500 0 0
8245: GO 8353
8247: LD_INT 2
8249: DOUBLE
8250: EQUAL
8251: IFTRUE 8255
8253: GO 8262
8255: POP
// hHackSetLevel10 ; 3 :
8256: CALL 20633 0 0
8260: GO 8353
8262: LD_INT 3
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8277
8270: POP
// hHackSetLevel10YourUnits ; 4 :
8271: CALL 20718 0 0
8275: GO 8353
8277: LD_INT 4
8279: DOUBLE
8280: EQUAL
8281: IFTRUE 8285
8283: GO 8292
8285: POP
// hHackInvincible ; 5 :
8286: CALL 21166 0 0
8290: GO 8353
8292: LD_INT 5
8294: DOUBLE
8295: EQUAL
8296: IFTRUE 8300
8298: GO 8307
8300: POP
// hHackInvisible ; 6 :
8301: CALL 21277 0 0
8305: GO 8353
8307: LD_INT 6
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8322
8315: POP
// hHackChangeYourSide ; 7 :
8316: CALL 21334 0 0
8320: GO 8353
8322: LD_INT 7
8324: DOUBLE
8325: EQUAL
8326: IFTRUE 8330
8328: GO 8337
8330: POP
// hHackChangeUnitSide ; 8 :
8331: CALL 21376 0 0
8335: GO 8353
8337: LD_INT 8
8339: DOUBLE
8340: EQUAL
8341: IFTRUE 8345
8343: GO 8352
8345: POP
// hHackFog ; end ;
8346: CALL 21477 0 0
8350: GO 8353
8352: POP
// end ; if p2 = game_save_mode then
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 102
8360: EQUAL
8361: IFFALSE 8416
// begin if p3 = 1 then
8363: LD_VAR 0 3
8367: PUSH
8368: LD_INT 1
8370: EQUAL
8371: IFFALSE 8383
// globalGameSaveCounter := p4 ;
8373: LD_ADDR_EXP 28
8377: PUSH
8378: LD_VAR 0 4
8382: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 2
8390: EQUAL
8391: PUSH
8392: LD_EXP 28
8396: AND
8397: IFFALSE 8416
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8399: LD_STRING setGameSaveCounter(
8401: PUSH
8402: LD_EXP 28
8406: STR
8407: PUSH
8408: LD_STRING )
8410: STR
8411: PPUSH
8412: CALL_OW 559
// end ; end ;
8416: LD_VAR 0 7
8420: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8421: LD_INT 0
8423: PPUSH
// streamModeActive := false ;
8424: LD_ADDR_EXP 29
8428: PUSH
8429: LD_INT 0
8431: ST_TO_ADDR
// normalCounter := 36 ;
8432: LD_ADDR_EXP 30
8436: PUSH
8437: LD_INT 36
8439: ST_TO_ADDR
// hardcoreCounter := 18 ;
8440: LD_ADDR_EXP 31
8444: PUSH
8445: LD_INT 18
8447: ST_TO_ADDR
// sRocket := false ;
8448: LD_ADDR_EXP 34
8452: PUSH
8453: LD_INT 0
8455: ST_TO_ADDR
// sSpeed := false ;
8456: LD_ADDR_EXP 33
8460: PUSH
8461: LD_INT 0
8463: ST_TO_ADDR
// sEngine := false ;
8464: LD_ADDR_EXP 35
8468: PUSH
8469: LD_INT 0
8471: ST_TO_ADDR
// sSpec := false ;
8472: LD_ADDR_EXP 32
8476: PUSH
8477: LD_INT 0
8479: ST_TO_ADDR
// sLevel := false ;
8480: LD_ADDR_EXP 36
8484: PUSH
8485: LD_INT 0
8487: ST_TO_ADDR
// sArmoury := false ;
8488: LD_ADDR_EXP 37
8492: PUSH
8493: LD_INT 0
8495: ST_TO_ADDR
// sRadar := false ;
8496: LD_ADDR_EXP 38
8500: PUSH
8501: LD_INT 0
8503: ST_TO_ADDR
// sBunker := false ;
8504: LD_ADDR_EXP 39
8508: PUSH
8509: LD_INT 0
8511: ST_TO_ADDR
// sHack := false ;
8512: LD_ADDR_EXP 40
8516: PUSH
8517: LD_INT 0
8519: ST_TO_ADDR
// sFire := false ;
8520: LD_ADDR_EXP 41
8524: PUSH
8525: LD_INT 0
8527: ST_TO_ADDR
// sRefresh := false ;
8528: LD_ADDR_EXP 42
8532: PUSH
8533: LD_INT 0
8535: ST_TO_ADDR
// sExp := false ;
8536: LD_ADDR_EXP 43
8540: PUSH
8541: LD_INT 0
8543: ST_TO_ADDR
// sDepot := false ;
8544: LD_ADDR_EXP 44
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// sFlag := false ;
8552: LD_ADDR_EXP 45
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// sKamikadze := false ;
8560: LD_ADDR_EXP 53
8564: PUSH
8565: LD_INT 0
8567: ST_TO_ADDR
// sTroll := false ;
8568: LD_ADDR_EXP 54
8572: PUSH
8573: LD_INT 0
8575: ST_TO_ADDR
// sSlow := false ;
8576: LD_ADDR_EXP 55
8580: PUSH
8581: LD_INT 0
8583: ST_TO_ADDR
// sLack := false ;
8584: LD_ADDR_EXP 56
8588: PUSH
8589: LD_INT 0
8591: ST_TO_ADDR
// sTank := false ;
8592: LD_ADDR_EXP 58
8596: PUSH
8597: LD_INT 0
8599: ST_TO_ADDR
// sRemote := false ;
8600: LD_ADDR_EXP 59
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// sPowell := false ;
8608: LD_ADDR_EXP 60
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// sTeleport := false ;
8616: LD_ADDR_EXP 63
8620: PUSH
8621: LD_INT 0
8623: ST_TO_ADDR
// sOilTower := false ;
8624: LD_ADDR_EXP 65
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// sShovel := false ;
8632: LD_ADDR_EXP 66
8636: PUSH
8637: LD_INT 0
8639: ST_TO_ADDR
// sSheik := false ;
8640: LD_ADDR_EXP 67
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// sEarthquake := false ;
8648: LD_ADDR_EXP 69
8652: PUSH
8653: LD_INT 0
8655: ST_TO_ADDR
// sAI := false ;
8656: LD_ADDR_EXP 70
8660: PUSH
8661: LD_INT 0
8663: ST_TO_ADDR
// sCargo := false ;
8664: LD_ADDR_EXP 73
8668: PUSH
8669: LD_INT 0
8671: ST_TO_ADDR
// sDLaser := false ;
8672: LD_ADDR_EXP 74
8676: PUSH
8677: LD_INT 0
8679: ST_TO_ADDR
// sExchange := false ;
8680: LD_ADDR_EXP 75
8684: PUSH
8685: LD_INT 0
8687: ST_TO_ADDR
// sFac := false ;
8688: LD_ADDR_EXP 76
8692: PUSH
8693: LD_INT 0
8695: ST_TO_ADDR
// sPower := false ;
8696: LD_ADDR_EXP 77
8700: PUSH
8701: LD_INT 0
8703: ST_TO_ADDR
// sRandom := false ;
8704: LD_ADDR_EXP 78
8708: PUSH
8709: LD_INT 0
8711: ST_TO_ADDR
// sShield := false ;
8712: LD_ADDR_EXP 79
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// sTime := false ;
8720: LD_ADDR_EXP 80
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// sTools := false ;
8728: LD_ADDR_EXP 81
8732: PUSH
8733: LD_INT 0
8735: ST_TO_ADDR
// sSold := false ;
8736: LD_ADDR_EXP 46
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// sDiff := false ;
8744: LD_ADDR_EXP 47
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// sFog := false ;
8752: LD_ADDR_EXP 50
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// sReset := false ;
8760: LD_ADDR_EXP 51
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// sSun := false ;
8768: LD_ADDR_EXP 52
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// sTiger := false ;
8776: LD_ADDR_EXP 48
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// sBomb := false ;
8784: LD_ADDR_EXP 49
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// sWound := false ;
8792: LD_ADDR_EXP 57
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// sBetray := false ;
8800: LD_ADDR_EXP 61
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// sContamin := false ;
8808: LD_ADDR_EXP 62
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// sOil := false ;
8816: LD_ADDR_EXP 64
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// sStu := false ;
8824: LD_ADDR_EXP 68
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// sBazooka := false ;
8832: LD_ADDR_EXP 71
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// sMortar := false ;
8840: LD_ADDR_EXP 72
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// sRanger := false ;
8848: LD_ADDR_EXP 82
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// sComputer := false ;
8856: LD_ADDR_EXP 83
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// s30 := false ;
8864: LD_ADDR_EXP 84
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// s60 := false ;
8872: LD_ADDR_EXP 85
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// end ;
8880: LD_VAR 0 1
8884: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8885: LD_INT 0
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
// result := [ ] ;
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: EMPTY
8900: ST_TO_ADDR
// if campaign_id = 1 then
8901: LD_OWVAR 69
8905: PUSH
8906: LD_INT 1
8908: EQUAL
8909: IFFALSE 12075
// begin case mission_number of 1 :
8911: LD_OWVAR 70
8915: PUSH
8916: LD_INT 1
8918: DOUBLE
8919: EQUAL
8920: IFTRUE 8924
8922: GO 9000
8924: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: LD_INT 4
8935: PUSH
8936: LD_INT 11
8938: PUSH
8939: LD_INT 12
8941: PUSH
8942: LD_INT 15
8944: PUSH
8945: LD_INT 16
8947: PUSH
8948: LD_INT 22
8950: PUSH
8951: LD_INT 23
8953: PUSH
8954: LD_INT 26
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 101
8970: PUSH
8971: LD_INT 102
8973: PUSH
8974: LD_INT 106
8976: PUSH
8977: LD_INT 116
8979: PUSH
8980: LD_INT 117
8982: PUSH
8983: LD_INT 118
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: ST_TO_ADDR
8998: GO 12073
9000: LD_INT 2
9002: DOUBLE
9003: EQUAL
9004: IFTRUE 9008
9006: GO 9092
9008: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: LD_INT 4
9019: PUSH
9020: LD_INT 11
9022: PUSH
9023: LD_INT 12
9025: PUSH
9026: LD_INT 15
9028: PUSH
9029: LD_INT 16
9031: PUSH
9032: LD_INT 22
9034: PUSH
9035: LD_INT 23
9037: PUSH
9038: LD_INT 26
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 101
9054: PUSH
9055: LD_INT 102
9057: PUSH
9058: LD_INT 105
9060: PUSH
9061: LD_INT 106
9063: PUSH
9064: LD_INT 108
9066: PUSH
9067: LD_INT 116
9069: PUSH
9070: LD_INT 117
9072: PUSH
9073: LD_INT 118
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: ST_TO_ADDR
9090: GO 12073
9092: LD_INT 3
9094: DOUBLE
9095: EQUAL
9096: IFTRUE 9100
9098: GO 9188
9100: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9101: LD_ADDR_VAR 0 2
9105: PUSH
9106: LD_INT 2
9108: PUSH
9109: LD_INT 4
9111: PUSH
9112: LD_INT 5
9114: PUSH
9115: LD_INT 11
9117: PUSH
9118: LD_INT 12
9120: PUSH
9121: LD_INT 15
9123: PUSH
9124: LD_INT 16
9126: PUSH
9127: LD_INT 22
9129: PUSH
9130: LD_INT 26
9132: PUSH
9133: LD_INT 36
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 101
9150: PUSH
9151: LD_INT 102
9153: PUSH
9154: LD_INT 105
9156: PUSH
9157: LD_INT 106
9159: PUSH
9160: LD_INT 108
9162: PUSH
9163: LD_INT 116
9165: PUSH
9166: LD_INT 117
9168: PUSH
9169: LD_INT 118
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: ST_TO_ADDR
9186: GO 12073
9188: LD_INT 4
9190: DOUBLE
9191: EQUAL
9192: IFTRUE 9196
9194: GO 9292
9196: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_INT 2
9204: PUSH
9205: LD_INT 4
9207: PUSH
9208: LD_INT 5
9210: PUSH
9211: LD_INT 8
9213: PUSH
9214: LD_INT 11
9216: PUSH
9217: LD_INT 12
9219: PUSH
9220: LD_INT 15
9222: PUSH
9223: LD_INT 16
9225: PUSH
9226: LD_INT 22
9228: PUSH
9229: LD_INT 23
9231: PUSH
9232: LD_INT 26
9234: PUSH
9235: LD_INT 36
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 101
9254: PUSH
9255: LD_INT 102
9257: PUSH
9258: LD_INT 105
9260: PUSH
9261: LD_INT 106
9263: PUSH
9264: LD_INT 108
9266: PUSH
9267: LD_INT 116
9269: PUSH
9270: LD_INT 117
9272: PUSH
9273: LD_INT 118
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: ST_TO_ADDR
9290: GO 12073
9292: LD_INT 5
9294: DOUBLE
9295: EQUAL
9296: IFTRUE 9300
9298: GO 9412
9300: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9301: LD_ADDR_VAR 0 2
9305: PUSH
9306: LD_INT 2
9308: PUSH
9309: LD_INT 4
9311: PUSH
9312: LD_INT 5
9314: PUSH
9315: LD_INT 6
9317: PUSH
9318: LD_INT 8
9320: PUSH
9321: LD_INT 11
9323: PUSH
9324: LD_INT 12
9326: PUSH
9327: LD_INT 15
9329: PUSH
9330: LD_INT 16
9332: PUSH
9333: LD_INT 22
9335: PUSH
9336: LD_INT 23
9338: PUSH
9339: LD_INT 25
9341: PUSH
9342: LD_INT 26
9344: PUSH
9345: LD_INT 36
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 101
9366: PUSH
9367: LD_INT 102
9369: PUSH
9370: LD_INT 105
9372: PUSH
9373: LD_INT 106
9375: PUSH
9376: LD_INT 108
9378: PUSH
9379: LD_INT 109
9381: PUSH
9382: LD_INT 112
9384: PUSH
9385: LD_INT 116
9387: PUSH
9388: LD_INT 117
9390: PUSH
9391: LD_INT 118
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: ST_TO_ADDR
9410: GO 12073
9412: LD_INT 6
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9552
9420: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9421: LD_ADDR_VAR 0 2
9425: PUSH
9426: LD_INT 2
9428: PUSH
9429: LD_INT 4
9431: PUSH
9432: LD_INT 5
9434: PUSH
9435: LD_INT 6
9437: PUSH
9438: LD_INT 8
9440: PUSH
9441: LD_INT 11
9443: PUSH
9444: LD_INT 12
9446: PUSH
9447: LD_INT 15
9449: PUSH
9450: LD_INT 16
9452: PUSH
9453: LD_INT 20
9455: PUSH
9456: LD_INT 21
9458: PUSH
9459: LD_INT 22
9461: PUSH
9462: LD_INT 23
9464: PUSH
9465: LD_INT 25
9467: PUSH
9468: LD_INT 26
9470: PUSH
9471: LD_INT 30
9473: PUSH
9474: LD_INT 31
9476: PUSH
9477: LD_INT 32
9479: PUSH
9480: LD_INT 36
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 101
9506: PUSH
9507: LD_INT 102
9509: PUSH
9510: LD_INT 105
9512: PUSH
9513: LD_INT 106
9515: PUSH
9516: LD_INT 108
9518: PUSH
9519: LD_INT 109
9521: PUSH
9522: LD_INT 112
9524: PUSH
9525: LD_INT 116
9527: PUSH
9528: LD_INT 117
9530: PUSH
9531: LD_INT 118
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: ST_TO_ADDR
9550: GO 12073
9552: LD_INT 7
9554: DOUBLE
9555: EQUAL
9556: IFTRUE 9560
9558: GO 9672
9560: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9561: LD_ADDR_VAR 0 2
9565: PUSH
9566: LD_INT 2
9568: PUSH
9569: LD_INT 4
9571: PUSH
9572: LD_INT 5
9574: PUSH
9575: LD_INT 7
9577: PUSH
9578: LD_INT 11
9580: PUSH
9581: LD_INT 12
9583: PUSH
9584: LD_INT 15
9586: PUSH
9587: LD_INT 16
9589: PUSH
9590: LD_INT 20
9592: PUSH
9593: LD_INT 21
9595: PUSH
9596: LD_INT 22
9598: PUSH
9599: LD_INT 23
9601: PUSH
9602: LD_INT 25
9604: PUSH
9605: LD_INT 26
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 101
9626: PUSH
9627: LD_INT 102
9629: PUSH
9630: LD_INT 103
9632: PUSH
9633: LD_INT 105
9635: PUSH
9636: LD_INT 106
9638: PUSH
9639: LD_INT 108
9641: PUSH
9642: LD_INT 112
9644: PUSH
9645: LD_INT 116
9647: PUSH
9648: LD_INT 117
9650: PUSH
9651: LD_INT 118
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: ST_TO_ADDR
9670: GO 12073
9672: LD_INT 8
9674: DOUBLE
9675: EQUAL
9676: IFTRUE 9680
9678: GO 9820
9680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: LD_INT 2
9688: PUSH
9689: LD_INT 4
9691: PUSH
9692: LD_INT 5
9694: PUSH
9695: LD_INT 6
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 8
9703: PUSH
9704: LD_INT 11
9706: PUSH
9707: LD_INT 12
9709: PUSH
9710: LD_INT 15
9712: PUSH
9713: LD_INT 16
9715: PUSH
9716: LD_INT 20
9718: PUSH
9719: LD_INT 21
9721: PUSH
9722: LD_INT 22
9724: PUSH
9725: LD_INT 23
9727: PUSH
9728: LD_INT 25
9730: PUSH
9731: LD_INT 26
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 31
9739: PUSH
9740: LD_INT 32
9742: PUSH
9743: LD_INT 36
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 101
9770: PUSH
9771: LD_INT 102
9773: PUSH
9774: LD_INT 103
9776: PUSH
9777: LD_INT 105
9779: PUSH
9780: LD_INT 106
9782: PUSH
9783: LD_INT 108
9785: PUSH
9786: LD_INT 109
9788: PUSH
9789: LD_INT 112
9791: PUSH
9792: LD_INT 116
9794: PUSH
9795: LD_INT 117
9797: PUSH
9798: LD_INT 118
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: ST_TO_ADDR
9818: GO 12073
9820: LD_INT 9
9822: DOUBLE
9823: EQUAL
9824: IFTRUE 9828
9826: GO 9976
9828: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9829: LD_ADDR_VAR 0 2
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 4
9839: PUSH
9840: LD_INT 5
9842: PUSH
9843: LD_INT 6
9845: PUSH
9846: LD_INT 7
9848: PUSH
9849: LD_INT 8
9851: PUSH
9852: LD_INT 11
9854: PUSH
9855: LD_INT 12
9857: PUSH
9858: LD_INT 15
9860: PUSH
9861: LD_INT 16
9863: PUSH
9864: LD_INT 20
9866: PUSH
9867: LD_INT 21
9869: PUSH
9870: LD_INT 22
9872: PUSH
9873: LD_INT 23
9875: PUSH
9876: LD_INT 25
9878: PUSH
9879: LD_INT 26
9881: PUSH
9882: LD_INT 28
9884: PUSH
9885: LD_INT 30
9887: PUSH
9888: LD_INT 31
9890: PUSH
9891: LD_INT 32
9893: PUSH
9894: LD_INT 36
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 101
9922: PUSH
9923: LD_INT 102
9925: PUSH
9926: LD_INT 103
9928: PUSH
9929: LD_INT 105
9931: PUSH
9932: LD_INT 106
9934: PUSH
9935: LD_INT 108
9937: PUSH
9938: LD_INT 109
9940: PUSH
9941: LD_INT 112
9943: PUSH
9944: LD_INT 114
9946: PUSH
9947: LD_INT 116
9949: PUSH
9950: LD_INT 117
9952: PUSH
9953: LD_INT 118
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: ST_TO_ADDR
9974: GO 12073
9976: LD_INT 10
9978: DOUBLE
9979: EQUAL
9980: IFTRUE 9984
9982: GO 10180
9984: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9985: LD_ADDR_VAR 0 2
9989: PUSH
9990: LD_INT 2
9992: PUSH
9993: LD_INT 4
9995: PUSH
9996: LD_INT 5
9998: PUSH
9999: LD_INT 6
10001: PUSH
10002: LD_INT 7
10004: PUSH
10005: LD_INT 8
10007: PUSH
10008: LD_INT 9
10010: PUSH
10011: LD_INT 10
10013: PUSH
10014: LD_INT 11
10016: PUSH
10017: LD_INT 12
10019: PUSH
10020: LD_INT 13
10022: PUSH
10023: LD_INT 14
10025: PUSH
10026: LD_INT 15
10028: PUSH
10029: LD_INT 16
10031: PUSH
10032: LD_INT 17
10034: PUSH
10035: LD_INT 18
10037: PUSH
10038: LD_INT 19
10040: PUSH
10041: LD_INT 20
10043: PUSH
10044: LD_INT 21
10046: PUSH
10047: LD_INT 22
10049: PUSH
10050: LD_INT 23
10052: PUSH
10053: LD_INT 24
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 26
10061: PUSH
10062: LD_INT 28
10064: PUSH
10065: LD_INT 30
10067: PUSH
10068: LD_INT 31
10070: PUSH
10071: LD_INT 32
10073: PUSH
10074: LD_INT 36
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 101
10110: PUSH
10111: LD_INT 102
10113: PUSH
10114: LD_INT 103
10116: PUSH
10117: LD_INT 104
10119: PUSH
10120: LD_INT 105
10122: PUSH
10123: LD_INT 106
10125: PUSH
10126: LD_INT 107
10128: PUSH
10129: LD_INT 108
10131: PUSH
10132: LD_INT 109
10134: PUSH
10135: LD_INT 110
10137: PUSH
10138: LD_INT 111
10140: PUSH
10141: LD_INT 112
10143: PUSH
10144: LD_INT 114
10146: PUSH
10147: LD_INT 116
10149: PUSH
10150: LD_INT 117
10152: PUSH
10153: LD_INT 118
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: ST_TO_ADDR
10178: GO 12073
10180: LD_INT 11
10182: DOUBLE
10183: EQUAL
10184: IFTRUE 10188
10186: GO 10392
10188: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10189: LD_ADDR_VAR 0 2
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: LD_INT 3
10199: PUSH
10200: LD_INT 4
10202: PUSH
10203: LD_INT 5
10205: PUSH
10206: LD_INT 6
10208: PUSH
10209: LD_INT 7
10211: PUSH
10212: LD_INT 8
10214: PUSH
10215: LD_INT 9
10217: PUSH
10218: LD_INT 10
10220: PUSH
10221: LD_INT 11
10223: PUSH
10224: LD_INT 12
10226: PUSH
10227: LD_INT 13
10229: PUSH
10230: LD_INT 14
10232: PUSH
10233: LD_INT 15
10235: PUSH
10236: LD_INT 16
10238: PUSH
10239: LD_INT 17
10241: PUSH
10242: LD_INT 18
10244: PUSH
10245: LD_INT 19
10247: PUSH
10248: LD_INT 20
10250: PUSH
10251: LD_INT 21
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_INT 23
10259: PUSH
10260: LD_INT 24
10262: PUSH
10263: LD_INT 25
10265: PUSH
10266: LD_INT 26
10268: PUSH
10269: LD_INT 28
10271: PUSH
10272: LD_INT 30
10274: PUSH
10275: LD_INT 31
10277: PUSH
10278: LD_INT 32
10280: PUSH
10281: LD_INT 34
10283: PUSH
10284: LD_INT 36
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 101
10322: PUSH
10323: LD_INT 102
10325: PUSH
10326: LD_INT 103
10328: PUSH
10329: LD_INT 104
10331: PUSH
10332: LD_INT 105
10334: PUSH
10335: LD_INT 106
10337: PUSH
10338: LD_INT 107
10340: PUSH
10341: LD_INT 108
10343: PUSH
10344: LD_INT 109
10346: PUSH
10347: LD_INT 110
10349: PUSH
10350: LD_INT 111
10352: PUSH
10353: LD_INT 112
10355: PUSH
10356: LD_INT 114
10358: PUSH
10359: LD_INT 116
10361: PUSH
10362: LD_INT 117
10364: PUSH
10365: LD_INT 118
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: ST_TO_ADDR
10390: GO 12073
10392: LD_INT 12
10394: DOUBLE
10395: EQUAL
10396: IFTRUE 10400
10398: GO 10620
10400: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10401: LD_ADDR_VAR 0 2
10405: PUSH
10406: LD_INT 1
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: LD_INT 3
10414: PUSH
10415: LD_INT 4
10417: PUSH
10418: LD_INT 5
10420: PUSH
10421: LD_INT 6
10423: PUSH
10424: LD_INT 7
10426: PUSH
10427: LD_INT 8
10429: PUSH
10430: LD_INT 9
10432: PUSH
10433: LD_INT 10
10435: PUSH
10436: LD_INT 11
10438: PUSH
10439: LD_INT 12
10441: PUSH
10442: LD_INT 13
10444: PUSH
10445: LD_INT 14
10447: PUSH
10448: LD_INT 15
10450: PUSH
10451: LD_INT 16
10453: PUSH
10454: LD_INT 17
10456: PUSH
10457: LD_INT 18
10459: PUSH
10460: LD_INT 19
10462: PUSH
10463: LD_INT 20
10465: PUSH
10466: LD_INT 21
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_INT 23
10474: PUSH
10475: LD_INT 24
10477: PUSH
10478: LD_INT 25
10480: PUSH
10481: LD_INT 26
10483: PUSH
10484: LD_INT 27
10486: PUSH
10487: LD_INT 28
10489: PUSH
10490: LD_INT 30
10492: PUSH
10493: LD_INT 31
10495: PUSH
10496: LD_INT 32
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 34
10504: PUSH
10505: LD_INT 36
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 101
10546: PUSH
10547: LD_INT 102
10549: PUSH
10550: LD_INT 103
10552: PUSH
10553: LD_INT 104
10555: PUSH
10556: LD_INT 105
10558: PUSH
10559: LD_INT 106
10561: PUSH
10562: LD_INT 107
10564: PUSH
10565: LD_INT 108
10567: PUSH
10568: LD_INT 109
10570: PUSH
10571: LD_INT 110
10573: PUSH
10574: LD_INT 111
10576: PUSH
10577: LD_INT 112
10579: PUSH
10580: LD_INT 113
10582: PUSH
10583: LD_INT 114
10585: PUSH
10586: LD_INT 116
10588: PUSH
10589: LD_INT 117
10591: PUSH
10592: LD_INT 118
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: ST_TO_ADDR
10618: GO 12073
10620: LD_INT 13
10622: DOUBLE
10623: EQUAL
10624: IFTRUE 10628
10626: GO 10836
10628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 3
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: LD_INT 5
10648: PUSH
10649: LD_INT 8
10651: PUSH
10652: LD_INT 9
10654: PUSH
10655: LD_INT 10
10657: PUSH
10658: LD_INT 11
10660: PUSH
10661: LD_INT 12
10663: PUSH
10664: LD_INT 14
10666: PUSH
10667: LD_INT 15
10669: PUSH
10670: LD_INT 16
10672: PUSH
10673: LD_INT 17
10675: PUSH
10676: LD_INT 18
10678: PUSH
10679: LD_INT 19
10681: PUSH
10682: LD_INT 20
10684: PUSH
10685: LD_INT 21
10687: PUSH
10688: LD_INT 22
10690: PUSH
10691: LD_INT 23
10693: PUSH
10694: LD_INT 24
10696: PUSH
10697: LD_INT 25
10699: PUSH
10700: LD_INT 26
10702: PUSH
10703: LD_INT 27
10705: PUSH
10706: LD_INT 28
10708: PUSH
10709: LD_INT 30
10711: PUSH
10712: LD_INT 31
10714: PUSH
10715: LD_INT 32
10717: PUSH
10718: LD_INT 33
10720: PUSH
10721: LD_INT 34
10723: PUSH
10724: LD_INT 36
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 101
10762: PUSH
10763: LD_INT 102
10765: PUSH
10766: LD_INT 103
10768: PUSH
10769: LD_INT 104
10771: PUSH
10772: LD_INT 105
10774: PUSH
10775: LD_INT 106
10777: PUSH
10778: LD_INT 107
10780: PUSH
10781: LD_INT 108
10783: PUSH
10784: LD_INT 109
10786: PUSH
10787: LD_INT 110
10789: PUSH
10790: LD_INT 111
10792: PUSH
10793: LD_INT 112
10795: PUSH
10796: LD_INT 113
10798: PUSH
10799: LD_INT 114
10801: PUSH
10802: LD_INT 116
10804: PUSH
10805: LD_INT 117
10807: PUSH
10808: LD_INT 118
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: ST_TO_ADDR
10834: GO 12073
10836: LD_INT 14
10838: DOUBLE
10839: EQUAL
10840: IFTRUE 10844
10842: GO 11068
10844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10845: LD_ADDR_VAR 0 2
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: LD_INT 2
10855: PUSH
10856: LD_INT 3
10858: PUSH
10859: LD_INT 4
10861: PUSH
10862: LD_INT 5
10864: PUSH
10865: LD_INT 6
10867: PUSH
10868: LD_INT 7
10870: PUSH
10871: LD_INT 8
10873: PUSH
10874: LD_INT 9
10876: PUSH
10877: LD_INT 10
10879: PUSH
10880: LD_INT 11
10882: PUSH
10883: LD_INT 12
10885: PUSH
10886: LD_INT 13
10888: PUSH
10889: LD_INT 14
10891: PUSH
10892: LD_INT 15
10894: PUSH
10895: LD_INT 16
10897: PUSH
10898: LD_INT 17
10900: PUSH
10901: LD_INT 18
10903: PUSH
10904: LD_INT 19
10906: PUSH
10907: LD_INT 20
10909: PUSH
10910: LD_INT 21
10912: PUSH
10913: LD_INT 22
10915: PUSH
10916: LD_INT 23
10918: PUSH
10919: LD_INT 24
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 26
10927: PUSH
10928: LD_INT 27
10930: PUSH
10931: LD_INT 28
10933: PUSH
10934: LD_INT 29
10936: PUSH
10937: LD_INT 30
10939: PUSH
10940: LD_INT 31
10942: PUSH
10943: LD_INT 32
10945: PUSH
10946: LD_INT 33
10948: PUSH
10949: LD_INT 34
10951: PUSH
10952: LD_INT 36
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 101
10994: PUSH
10995: LD_INT 102
10997: PUSH
10998: LD_INT 103
11000: PUSH
11001: LD_INT 104
11003: PUSH
11004: LD_INT 105
11006: PUSH
11007: LD_INT 106
11009: PUSH
11010: LD_INT 107
11012: PUSH
11013: LD_INT 108
11015: PUSH
11016: LD_INT 109
11018: PUSH
11019: LD_INT 110
11021: PUSH
11022: LD_INT 111
11024: PUSH
11025: LD_INT 112
11027: PUSH
11028: LD_INT 113
11030: PUSH
11031: LD_INT 114
11033: PUSH
11034: LD_INT 116
11036: PUSH
11037: LD_INT 117
11039: PUSH
11040: LD_INT 118
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: ST_TO_ADDR
11066: GO 12073
11068: LD_INT 15
11070: DOUBLE
11071: EQUAL
11072: IFTRUE 11076
11074: GO 11300
11076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 1
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 3
11090: PUSH
11091: LD_INT 4
11093: PUSH
11094: LD_INT 5
11096: PUSH
11097: LD_INT 6
11099: PUSH
11100: LD_INT 7
11102: PUSH
11103: LD_INT 8
11105: PUSH
11106: LD_INT 9
11108: PUSH
11109: LD_INT 10
11111: PUSH
11112: LD_INT 11
11114: PUSH
11115: LD_INT 12
11117: PUSH
11118: LD_INT 13
11120: PUSH
11121: LD_INT 14
11123: PUSH
11124: LD_INT 15
11126: PUSH
11127: LD_INT 16
11129: PUSH
11130: LD_INT 17
11132: PUSH
11133: LD_INT 18
11135: PUSH
11136: LD_INT 19
11138: PUSH
11139: LD_INT 20
11141: PUSH
11142: LD_INT 21
11144: PUSH
11145: LD_INT 22
11147: PUSH
11148: LD_INT 23
11150: PUSH
11151: LD_INT 24
11153: PUSH
11154: LD_INT 25
11156: PUSH
11157: LD_INT 26
11159: PUSH
11160: LD_INT 27
11162: PUSH
11163: LD_INT 28
11165: PUSH
11166: LD_INT 29
11168: PUSH
11169: LD_INT 30
11171: PUSH
11172: LD_INT 31
11174: PUSH
11175: LD_INT 32
11177: PUSH
11178: LD_INT 33
11180: PUSH
11181: LD_INT 34
11183: PUSH
11184: LD_INT 36
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 101
11226: PUSH
11227: LD_INT 102
11229: PUSH
11230: LD_INT 103
11232: PUSH
11233: LD_INT 104
11235: PUSH
11236: LD_INT 105
11238: PUSH
11239: LD_INT 106
11241: PUSH
11242: LD_INT 107
11244: PUSH
11245: LD_INT 108
11247: PUSH
11248: LD_INT 109
11250: PUSH
11251: LD_INT 110
11253: PUSH
11254: LD_INT 111
11256: PUSH
11257: LD_INT 112
11259: PUSH
11260: LD_INT 113
11262: PUSH
11263: LD_INT 114
11265: PUSH
11266: LD_INT 116
11268: PUSH
11269: LD_INT 117
11271: PUSH
11272: LD_INT 118
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: ST_TO_ADDR
11298: GO 12073
11300: LD_INT 16
11302: DOUBLE
11303: EQUAL
11304: IFTRUE 11308
11306: GO 11444
11308: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11309: LD_ADDR_VAR 0 2
11313: PUSH
11314: LD_INT 2
11316: PUSH
11317: LD_INT 4
11319: PUSH
11320: LD_INT 5
11322: PUSH
11323: LD_INT 7
11325: PUSH
11326: LD_INT 11
11328: PUSH
11329: LD_INT 12
11331: PUSH
11332: LD_INT 15
11334: PUSH
11335: LD_INT 16
11337: PUSH
11338: LD_INT 20
11340: PUSH
11341: LD_INT 21
11343: PUSH
11344: LD_INT 22
11346: PUSH
11347: LD_INT 23
11349: PUSH
11350: LD_INT 25
11352: PUSH
11353: LD_INT 26
11355: PUSH
11356: LD_INT 30
11358: PUSH
11359: LD_INT 31
11361: PUSH
11362: LD_INT 32
11364: PUSH
11365: LD_INT 33
11367: PUSH
11368: LD_INT 34
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 101
11394: PUSH
11395: LD_INT 102
11397: PUSH
11398: LD_INT 103
11400: PUSH
11401: LD_INT 106
11403: PUSH
11404: LD_INT 108
11406: PUSH
11407: LD_INT 112
11409: PUSH
11410: LD_INT 113
11412: PUSH
11413: LD_INT 114
11415: PUSH
11416: LD_INT 116
11418: PUSH
11419: LD_INT 117
11421: PUSH
11422: LD_INT 118
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: ST_TO_ADDR
11442: GO 12073
11444: LD_INT 17
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11676
11452: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11453: LD_ADDR_VAR 0 2
11457: PUSH
11458: LD_INT 1
11460: PUSH
11461: LD_INT 2
11463: PUSH
11464: LD_INT 3
11466: PUSH
11467: LD_INT 4
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: LD_INT 6
11475: PUSH
11476: LD_INT 7
11478: PUSH
11479: LD_INT 8
11481: PUSH
11482: LD_INT 9
11484: PUSH
11485: LD_INT 10
11487: PUSH
11488: LD_INT 11
11490: PUSH
11491: LD_INT 12
11493: PUSH
11494: LD_INT 13
11496: PUSH
11497: LD_INT 14
11499: PUSH
11500: LD_INT 15
11502: PUSH
11503: LD_INT 16
11505: PUSH
11506: LD_INT 17
11508: PUSH
11509: LD_INT 18
11511: PUSH
11512: LD_INT 19
11514: PUSH
11515: LD_INT 20
11517: PUSH
11518: LD_INT 21
11520: PUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 23
11526: PUSH
11527: LD_INT 24
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 26
11535: PUSH
11536: LD_INT 27
11538: PUSH
11539: LD_INT 28
11541: PUSH
11542: LD_INT 29
11544: PUSH
11545: LD_INT 30
11547: PUSH
11548: LD_INT 31
11550: PUSH
11551: LD_INT 32
11553: PUSH
11554: LD_INT 33
11556: PUSH
11557: LD_INT 34
11559: PUSH
11560: LD_INT 36
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 101
11602: PUSH
11603: LD_INT 102
11605: PUSH
11606: LD_INT 103
11608: PUSH
11609: LD_INT 104
11611: PUSH
11612: LD_INT 105
11614: PUSH
11615: LD_INT 106
11617: PUSH
11618: LD_INT 107
11620: PUSH
11621: LD_INT 108
11623: PUSH
11624: LD_INT 109
11626: PUSH
11627: LD_INT 110
11629: PUSH
11630: LD_INT 111
11632: PUSH
11633: LD_INT 112
11635: PUSH
11636: LD_INT 113
11638: PUSH
11639: LD_INT 114
11641: PUSH
11642: LD_INT 116
11644: PUSH
11645: LD_INT 117
11647: PUSH
11648: LD_INT 118
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: ST_TO_ADDR
11674: GO 12073
11676: LD_INT 18
11678: DOUBLE
11679: EQUAL
11680: IFTRUE 11684
11682: GO 11832
11684: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: LD_INT 2
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: LD_INT 5
11698: PUSH
11699: LD_INT 7
11701: PUSH
11702: LD_INT 11
11704: PUSH
11705: LD_INT 12
11707: PUSH
11708: LD_INT 15
11710: PUSH
11711: LD_INT 16
11713: PUSH
11714: LD_INT 20
11716: PUSH
11717: LD_INT 21
11719: PUSH
11720: LD_INT 22
11722: PUSH
11723: LD_INT 23
11725: PUSH
11726: LD_INT 25
11728: PUSH
11729: LD_INT 26
11731: PUSH
11732: LD_INT 30
11734: PUSH
11735: LD_INT 31
11737: PUSH
11738: LD_INT 32
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 34
11746: PUSH
11747: LD_INT 35
11749: PUSH
11750: LD_INT 36
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 101
11778: PUSH
11779: LD_INT 102
11781: PUSH
11782: LD_INT 103
11784: PUSH
11785: LD_INT 106
11787: PUSH
11788: LD_INT 108
11790: PUSH
11791: LD_INT 112
11793: PUSH
11794: LD_INT 113
11796: PUSH
11797: LD_INT 114
11799: PUSH
11800: LD_INT 115
11802: PUSH
11803: LD_INT 116
11805: PUSH
11806: LD_INT 117
11808: PUSH
11809: LD_INT 118
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: ST_TO_ADDR
11830: GO 12073
11832: LD_INT 19
11834: DOUBLE
11835: EQUAL
11836: IFTRUE 11840
11838: GO 12072
11840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11841: LD_ADDR_VAR 0 2
11845: PUSH
11846: LD_INT 1
11848: PUSH
11849: LD_INT 2
11851: PUSH
11852: LD_INT 3
11854: PUSH
11855: LD_INT 4
11857: PUSH
11858: LD_INT 5
11860: PUSH
11861: LD_INT 6
11863: PUSH
11864: LD_INT 7
11866: PUSH
11867: LD_INT 8
11869: PUSH
11870: LD_INT 9
11872: PUSH
11873: LD_INT 10
11875: PUSH
11876: LD_INT 11
11878: PUSH
11879: LD_INT 12
11881: PUSH
11882: LD_INT 13
11884: PUSH
11885: LD_INT 14
11887: PUSH
11888: LD_INT 15
11890: PUSH
11891: LD_INT 16
11893: PUSH
11894: LD_INT 17
11896: PUSH
11897: LD_INT 18
11899: PUSH
11900: LD_INT 19
11902: PUSH
11903: LD_INT 20
11905: PUSH
11906: LD_INT 21
11908: PUSH
11909: LD_INT 22
11911: PUSH
11912: LD_INT 23
11914: PUSH
11915: LD_INT 24
11917: PUSH
11918: LD_INT 25
11920: PUSH
11921: LD_INT 26
11923: PUSH
11924: LD_INT 27
11926: PUSH
11927: LD_INT 28
11929: PUSH
11930: LD_INT 29
11932: PUSH
11933: LD_INT 30
11935: PUSH
11936: LD_INT 31
11938: PUSH
11939: LD_INT 32
11941: PUSH
11942: LD_INT 33
11944: PUSH
11945: LD_INT 34
11947: PUSH
11948: LD_INT 35
11950: PUSH
11951: LD_INT 36
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 101
11994: PUSH
11995: LD_INT 102
11997: PUSH
11998: LD_INT 103
12000: PUSH
12001: LD_INT 104
12003: PUSH
12004: LD_INT 105
12006: PUSH
12007: LD_INT 106
12009: PUSH
12010: LD_INT 107
12012: PUSH
12013: LD_INT 108
12015: PUSH
12016: LD_INT 109
12018: PUSH
12019: LD_INT 110
12021: PUSH
12022: LD_INT 111
12024: PUSH
12025: LD_INT 112
12027: PUSH
12028: LD_INT 113
12030: PUSH
12031: LD_INT 114
12033: PUSH
12034: LD_INT 115
12036: PUSH
12037: LD_INT 116
12039: PUSH
12040: LD_INT 117
12042: PUSH
12043: LD_INT 118
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: ST_TO_ADDR
12070: GO 12073
12072: POP
// end else
12073: GO 12304
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12075: LD_ADDR_VAR 0 2
12079: PUSH
12080: LD_INT 1
12082: PUSH
12083: LD_INT 2
12085: PUSH
12086: LD_INT 3
12088: PUSH
12089: LD_INT 4
12091: PUSH
12092: LD_INT 5
12094: PUSH
12095: LD_INT 6
12097: PUSH
12098: LD_INT 7
12100: PUSH
12101: LD_INT 8
12103: PUSH
12104: LD_INT 9
12106: PUSH
12107: LD_INT 10
12109: PUSH
12110: LD_INT 11
12112: PUSH
12113: LD_INT 12
12115: PUSH
12116: LD_INT 13
12118: PUSH
12119: LD_INT 14
12121: PUSH
12122: LD_INT 15
12124: PUSH
12125: LD_INT 16
12127: PUSH
12128: LD_INT 17
12130: PUSH
12131: LD_INT 18
12133: PUSH
12134: LD_INT 19
12136: PUSH
12137: LD_INT 20
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 22
12145: PUSH
12146: LD_INT 23
12148: PUSH
12149: LD_INT 24
12151: PUSH
12152: LD_INT 25
12154: PUSH
12155: LD_INT 26
12157: PUSH
12158: LD_INT 27
12160: PUSH
12161: LD_INT 28
12163: PUSH
12164: LD_INT 29
12166: PUSH
12167: LD_INT 30
12169: PUSH
12170: LD_INT 31
12172: PUSH
12173: LD_INT 32
12175: PUSH
12176: LD_INT 33
12178: PUSH
12179: LD_INT 34
12181: PUSH
12182: LD_INT 35
12184: PUSH
12185: LD_INT 36
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 101
12228: PUSH
12229: LD_INT 102
12231: PUSH
12232: LD_INT 103
12234: PUSH
12235: LD_INT 104
12237: PUSH
12238: LD_INT 105
12240: PUSH
12241: LD_INT 106
12243: PUSH
12244: LD_INT 107
12246: PUSH
12247: LD_INT 108
12249: PUSH
12250: LD_INT 109
12252: PUSH
12253: LD_INT 110
12255: PUSH
12256: LD_INT 111
12258: PUSH
12259: LD_INT 112
12261: PUSH
12262: LD_INT 113
12264: PUSH
12265: LD_INT 114
12267: PUSH
12268: LD_INT 115
12270: PUSH
12271: LD_INT 116
12273: PUSH
12274: LD_INT 117
12276: PUSH
12277: LD_INT 118
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: ST_TO_ADDR
// if result then
12304: LD_VAR 0 2
12308: IFFALSE 13094
// begin normal :=  ;
12310: LD_ADDR_VAR 0 5
12314: PUSH
12315: LD_STRING 
12317: ST_TO_ADDR
// hardcore :=  ;
12318: LD_ADDR_VAR 0 6
12322: PUSH
12323: LD_STRING 
12325: ST_TO_ADDR
// active :=  ;
12326: LD_ADDR_VAR 0 7
12330: PUSH
12331: LD_STRING 
12333: ST_TO_ADDR
// for i = 1 to normalCounter do
12334: LD_ADDR_VAR 0 8
12338: PUSH
12339: DOUBLE
12340: LD_INT 1
12342: DEC
12343: ST_TO_ADDR
12344: LD_EXP 30
12348: PUSH
12349: FOR_TO
12350: IFFALSE 12451
// begin tmp := 0 ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: LD_STRING 0
12359: ST_TO_ADDR
// if result [ 1 ] then
12360: LD_VAR 0 2
12364: PUSH
12365: LD_INT 1
12367: ARRAY
12368: IFFALSE 12433
// if result [ 1 ] [ 1 ] = i then
12370: LD_VAR 0 2
12374: PUSH
12375: LD_INT 1
12377: ARRAY
12378: PUSH
12379: LD_INT 1
12381: ARRAY
12382: PUSH
12383: LD_VAR 0 8
12387: EQUAL
12388: IFFALSE 12433
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12390: LD_ADDR_VAR 0 2
12394: PUSH
12395: LD_VAR 0 2
12399: PPUSH
12400: LD_INT 1
12402: PPUSH
12403: LD_VAR 0 2
12407: PUSH
12408: LD_INT 1
12410: ARRAY
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: CALL_OW 3
12419: PPUSH
12420: CALL_OW 1
12424: ST_TO_ADDR
// tmp := 1 ;
12425: LD_ADDR_VAR 0 3
12429: PUSH
12430: LD_STRING 1
12432: ST_TO_ADDR
// end ; normal := normal & tmp ;
12433: LD_ADDR_VAR 0 5
12437: PUSH
12438: LD_VAR 0 5
12442: PUSH
12443: LD_VAR 0 3
12447: STR
12448: ST_TO_ADDR
// end ;
12449: GO 12349
12451: POP
12452: POP
// for i = 1 to hardcoreCounter do
12453: LD_ADDR_VAR 0 8
12457: PUSH
12458: DOUBLE
12459: LD_INT 1
12461: DEC
12462: ST_TO_ADDR
12463: LD_EXP 31
12467: PUSH
12468: FOR_TO
12469: IFFALSE 12574
// begin tmp := 0 ;
12471: LD_ADDR_VAR 0 3
12475: PUSH
12476: LD_STRING 0
12478: ST_TO_ADDR
// if result [ 2 ] then
12479: LD_VAR 0 2
12483: PUSH
12484: LD_INT 2
12486: ARRAY
12487: IFFALSE 12556
// if result [ 2 ] [ 1 ] = 100 + i then
12489: LD_VAR 0 2
12493: PUSH
12494: LD_INT 2
12496: ARRAY
12497: PUSH
12498: LD_INT 1
12500: ARRAY
12501: PUSH
12502: LD_INT 100
12504: PUSH
12505: LD_VAR 0 8
12509: PLUS
12510: EQUAL
12511: IFFALSE 12556
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12513: LD_ADDR_VAR 0 2
12517: PUSH
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_INT 2
12525: PPUSH
12526: LD_VAR 0 2
12530: PUSH
12531: LD_INT 2
12533: ARRAY
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 3
12542: PPUSH
12543: CALL_OW 1
12547: ST_TO_ADDR
// tmp := 1 ;
12548: LD_ADDR_VAR 0 3
12552: PUSH
12553: LD_STRING 1
12555: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12556: LD_ADDR_VAR 0 6
12560: PUSH
12561: LD_VAR 0 6
12565: PUSH
12566: LD_VAR 0 3
12570: STR
12571: ST_TO_ADDR
// end ;
12572: GO 12468
12574: POP
12575: POP
// if isGameLoad then
12576: LD_VAR 0 1
12580: IFFALSE 13055
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12582: LD_ADDR_VAR 0 4
12586: PUSH
12587: LD_EXP 34
12591: PUSH
12592: LD_EXP 33
12596: PUSH
12597: LD_EXP 35
12601: PUSH
12602: LD_EXP 32
12606: PUSH
12607: LD_EXP 36
12611: PUSH
12612: LD_EXP 37
12616: PUSH
12617: LD_EXP 38
12621: PUSH
12622: LD_EXP 39
12626: PUSH
12627: LD_EXP 40
12631: PUSH
12632: LD_EXP 41
12636: PUSH
12637: LD_EXP 42
12641: PUSH
12642: LD_EXP 43
12646: PUSH
12647: LD_EXP 44
12651: PUSH
12652: LD_EXP 45
12656: PUSH
12657: LD_EXP 53
12661: PUSH
12662: LD_EXP 54
12666: PUSH
12667: LD_EXP 55
12671: PUSH
12672: LD_EXP 56
12676: PUSH
12677: LD_EXP 58
12681: PUSH
12682: LD_EXP 59
12686: PUSH
12687: LD_EXP 60
12691: PUSH
12692: LD_EXP 63
12696: PUSH
12697: LD_EXP 65
12701: PUSH
12702: LD_EXP 66
12706: PUSH
12707: LD_EXP 67
12711: PUSH
12712: LD_EXP 69
12716: PUSH
12717: LD_EXP 70
12721: PUSH
12722: LD_EXP 73
12726: PUSH
12727: LD_EXP 74
12731: PUSH
12732: LD_EXP 75
12736: PUSH
12737: LD_EXP 76
12741: PUSH
12742: LD_EXP 77
12746: PUSH
12747: LD_EXP 78
12751: PUSH
12752: LD_EXP 79
12756: PUSH
12757: LD_EXP 80
12761: PUSH
12762: LD_EXP 81
12766: PUSH
12767: LD_EXP 46
12771: PUSH
12772: LD_EXP 47
12776: PUSH
12777: LD_EXP 50
12781: PUSH
12782: LD_EXP 51
12786: PUSH
12787: LD_EXP 52
12791: PUSH
12792: LD_EXP 48
12796: PUSH
12797: LD_EXP 49
12801: PUSH
12802: LD_EXP 57
12806: PUSH
12807: LD_EXP 61
12811: PUSH
12812: LD_EXP 62
12816: PUSH
12817: LD_EXP 64
12821: PUSH
12822: LD_EXP 68
12826: PUSH
12827: LD_EXP 71
12831: PUSH
12832: LD_EXP 72
12836: PUSH
12837: LD_EXP 82
12841: PUSH
12842: LD_EXP 83
12846: PUSH
12847: LD_EXP 84
12851: PUSH
12852: LD_EXP 85
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: ST_TO_ADDR
// tmp :=  ;
12913: LD_ADDR_VAR 0 3
12917: PUSH
12918: LD_STRING 
12920: ST_TO_ADDR
// for i = 1 to normalCounter do
12921: LD_ADDR_VAR 0 8
12925: PUSH
12926: DOUBLE
12927: LD_INT 1
12929: DEC
12930: ST_TO_ADDR
12931: LD_EXP 30
12935: PUSH
12936: FOR_TO
12937: IFFALSE 12973
// begin if flags [ i ] then
12939: LD_VAR 0 4
12943: PUSH
12944: LD_VAR 0 8
12948: ARRAY
12949: IFFALSE 12971
// tmp := tmp & i & ; ;
12951: LD_ADDR_VAR 0 3
12955: PUSH
12956: LD_VAR 0 3
12960: PUSH
12961: LD_VAR 0 8
12965: STR
12966: PUSH
12967: LD_STRING ;
12969: STR
12970: ST_TO_ADDR
// end ;
12971: GO 12936
12973: POP
12974: POP
// for i = 1 to hardcoreCounter do
12975: LD_ADDR_VAR 0 8
12979: PUSH
12980: DOUBLE
12981: LD_INT 1
12983: DEC
12984: ST_TO_ADDR
12985: LD_EXP 31
12989: PUSH
12990: FOR_TO
12991: IFFALSE 13037
// begin if flags [ normalCounter + i ] then
12993: LD_VAR 0 4
12997: PUSH
12998: LD_EXP 30
13002: PUSH
13003: LD_VAR 0 8
13007: PLUS
13008: ARRAY
13009: IFFALSE 13035
// tmp := tmp & ( 100 + i ) & ; ;
13011: LD_ADDR_VAR 0 3
13015: PUSH
13016: LD_VAR 0 3
13020: PUSH
13021: LD_INT 100
13023: PUSH
13024: LD_VAR 0 8
13028: PLUS
13029: STR
13030: PUSH
13031: LD_STRING ;
13033: STR
13034: ST_TO_ADDR
// end ;
13035: GO 12990
13037: POP
13038: POP
// if tmp then
13039: LD_VAR 0 3
13043: IFFALSE 13055
// active := tmp ;
13045: LD_ADDR_VAR 0 7
13049: PUSH
13050: LD_VAR 0 3
13054: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13055: LD_STRING getStreamItemsFromMission("
13057: PUSH
13058: LD_VAR 0 5
13062: STR
13063: PUSH
13064: LD_STRING ","
13066: STR
13067: PUSH
13068: LD_VAR 0 6
13072: STR
13073: PUSH
13074: LD_STRING ","
13076: STR
13077: PUSH
13078: LD_VAR 0 7
13082: STR
13083: PUSH
13084: LD_STRING ")
13086: STR
13087: PPUSH
13088: CALL_OW 559
// end else
13092: GO 13101
// ToLua ( getStreamItemsFromMission("","","") ) ;
13094: LD_STRING getStreamItemsFromMission("","","")
13096: PPUSH
13097: CALL_OW 559
// end ;
13101: LD_VAR 0 2
13105: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13106: LD_EXP 29
13110: PUSH
13111: LD_EXP 34
13115: AND
13116: IFFALSE 13240
13118: GO 13120
13120: DISABLE
13121: LD_INT 0
13123: PPUSH
13124: PPUSH
// begin enable ;
13125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13126: LD_ADDR_VAR 0 2
13130: PUSH
13131: LD_INT 22
13133: PUSH
13134: LD_OWVAR 2
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: LD_INT 34
13148: PUSH
13149: LD_INT 7
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 34
13158: PUSH
13159: LD_INT 45
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 34
13168: PUSH
13169: LD_INT 28
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 34
13178: PUSH
13179: LD_INT 47
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: ST_TO_ADDR
// if not tmp then
13202: LD_VAR 0 2
13206: NOT
13207: IFFALSE 13211
// exit ;
13209: GO 13240
// for i in tmp do
13211: LD_ADDR_VAR 0 1
13215: PUSH
13216: LD_VAR 0 2
13220: PUSH
13221: FOR_IN
13222: IFFALSE 13238
// begin SetLives ( i , 0 ) ;
13224: LD_VAR 0 1
13228: PPUSH
13229: LD_INT 0
13231: PPUSH
13232: CALL_OW 234
// end ;
13236: GO 13221
13238: POP
13239: POP
// end ;
13240: PPOPN 2
13242: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13243: LD_EXP 29
13247: PUSH
13248: LD_EXP 35
13252: AND
13253: IFFALSE 13337
13255: GO 13257
13257: DISABLE
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
// begin enable ;
13262: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_OWVAR 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 32
13282: PUSH
13283: LD_INT 3
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: ST_TO_ADDR
// if not tmp then
13299: LD_VAR 0 2
13303: NOT
13304: IFFALSE 13308
// exit ;
13306: GO 13337
// for i in tmp do
13308: LD_ADDR_VAR 0 1
13312: PUSH
13313: LD_VAR 0 2
13317: PUSH
13318: FOR_IN
13319: IFFALSE 13335
// begin SetLives ( i , 0 ) ;
13321: LD_VAR 0 1
13325: PPUSH
13326: LD_INT 0
13328: PPUSH
13329: CALL_OW 234
// end ;
13333: GO 13318
13335: POP
13336: POP
// end ;
13337: PPOPN 2
13339: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13340: LD_EXP 29
13344: PUSH
13345: LD_EXP 32
13349: AND
13350: IFFALSE 13443
13352: GO 13354
13354: DISABLE
13355: LD_INT 0
13357: PPUSH
// begin enable ;
13358: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13359: LD_ADDR_VAR 0 1
13363: PUSH
13364: LD_INT 22
13366: PUSH
13367: LD_OWVAR 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: LD_INT 25
13381: PUSH
13382: LD_INT 5
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 25
13391: PUSH
13392: LD_INT 9
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 25
13401: PUSH
13402: LD_INT 8
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PUSH
13424: FOR_IN
13425: IFFALSE 13441
// begin SetClass ( i , 1 ) ;
13427: LD_VAR 0 1
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 336
// end ;
13439: GO 13424
13441: POP
13442: POP
// end ;
13443: PPOPN 1
13445: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13446: LD_EXP 29
13450: PUSH
13451: LD_EXP 33
13455: AND
13456: PUSH
13457: LD_OWVAR 65
13461: PUSH
13462: LD_INT 7
13464: LESS
13465: AND
13466: IFFALSE 13480
13468: GO 13470
13470: DISABLE
// begin enable ;
13471: ENABLE
// game_speed := 7 ;
13472: LD_ADDR_OWVAR 65
13476: PUSH
13477: LD_INT 7
13479: ST_TO_ADDR
// end ;
13480: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13481: LD_EXP 29
13485: PUSH
13486: LD_EXP 36
13490: AND
13491: IFFALSE 13693
13493: GO 13495
13495: DISABLE
13496: LD_INT 0
13498: PPUSH
13499: PPUSH
13500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13501: LD_ADDR_VAR 0 3
13505: PUSH
13506: LD_INT 81
13508: PUSH
13509: LD_OWVAR 2
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 21
13520: PUSH
13521: LD_INT 1
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 69
13536: ST_TO_ADDR
// if not tmp then
13537: LD_VAR 0 3
13541: NOT
13542: IFFALSE 13546
// exit ;
13544: GO 13693
// if tmp > 5 then
13546: LD_VAR 0 3
13550: PUSH
13551: LD_INT 5
13553: GREATER
13554: IFFALSE 13566
// k := 5 else
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_INT 5
13563: ST_TO_ADDR
13564: GO 13576
// k := tmp ;
13566: LD_ADDR_VAR 0 2
13570: PUSH
13571: LD_VAR 0 3
13575: ST_TO_ADDR
// for i := 1 to k do
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: DOUBLE
13582: LD_INT 1
13584: DEC
13585: ST_TO_ADDR
13586: LD_VAR 0 2
13590: PUSH
13591: FOR_TO
13592: IFFALSE 13691
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13594: LD_VAR 0 3
13598: PUSH
13599: LD_VAR 0 1
13603: ARRAY
13604: PPUSH
13605: LD_VAR 0 1
13609: PUSH
13610: LD_INT 4
13612: MOD
13613: PUSH
13614: LD_INT 1
13616: PLUS
13617: PPUSH
13618: CALL_OW 259
13622: PUSH
13623: LD_INT 10
13625: LESS
13626: IFFALSE 13689
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13628: LD_VAR 0 3
13632: PUSH
13633: LD_VAR 0 1
13637: ARRAY
13638: PPUSH
13639: LD_VAR 0 1
13643: PUSH
13644: LD_INT 4
13646: MOD
13647: PUSH
13648: LD_INT 1
13650: PLUS
13651: PPUSH
13652: LD_VAR 0 3
13656: PUSH
13657: LD_VAR 0 1
13661: ARRAY
13662: PPUSH
13663: LD_VAR 0 1
13667: PUSH
13668: LD_INT 4
13670: MOD
13671: PUSH
13672: LD_INT 1
13674: PLUS
13675: PPUSH
13676: CALL_OW 259
13680: PUSH
13681: LD_INT 1
13683: PLUS
13684: PPUSH
13685: CALL_OW 237
13689: GO 13591
13691: POP
13692: POP
// end ;
13693: PPOPN 3
13695: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13696: LD_EXP 29
13700: PUSH
13701: LD_EXP 37
13705: AND
13706: IFFALSE 13726
13708: GO 13710
13710: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13711: LD_INT 4
13713: PPUSH
13714: LD_OWVAR 2
13718: PPUSH
13719: LD_INT 0
13721: PPUSH
13722: CALL_OW 324
13726: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13727: LD_EXP 29
13731: PUSH
13732: LD_EXP 66
13736: AND
13737: IFFALSE 13757
13739: GO 13741
13741: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13742: LD_INT 19
13744: PPUSH
13745: LD_OWVAR 2
13749: PPUSH
13750: LD_INT 0
13752: PPUSH
13753: CALL_OW 324
13757: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13758: LD_EXP 29
13762: PUSH
13763: LD_EXP 38
13767: AND
13768: IFFALSE 13870
13770: GO 13772
13772: DISABLE
13773: LD_INT 0
13775: PPUSH
13776: PPUSH
// begin enable ;
13777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13778: LD_ADDR_VAR 0 2
13782: PUSH
13783: LD_INT 22
13785: PUSH
13786: LD_OWVAR 2
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 2
13797: PUSH
13798: LD_INT 34
13800: PUSH
13801: LD_INT 11
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 34
13810: PUSH
13811: LD_INT 30
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 69
13831: ST_TO_ADDR
// if not tmp then
13832: LD_VAR 0 2
13836: NOT
13837: IFFALSE 13841
// exit ;
13839: GO 13870
// for i in tmp do
13841: LD_ADDR_VAR 0 1
13845: PUSH
13846: LD_VAR 0 2
13850: PUSH
13851: FOR_IN
13852: IFFALSE 13868
// begin SetLives ( i , 0 ) ;
13854: LD_VAR 0 1
13858: PPUSH
13859: LD_INT 0
13861: PPUSH
13862: CALL_OW 234
// end ;
13866: GO 13851
13868: POP
13869: POP
// end ;
13870: PPOPN 2
13872: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13873: LD_EXP 29
13877: PUSH
13878: LD_EXP 39
13882: AND
13883: IFFALSE 13903
13885: GO 13887
13887: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13888: LD_INT 32
13890: PPUSH
13891: LD_OWVAR 2
13895: PPUSH
13896: LD_INT 0
13898: PPUSH
13899: CALL_OW 324
13903: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13904: LD_EXP 29
13908: PUSH
13909: LD_EXP 40
13913: AND
13914: IFFALSE 14095
13916: GO 13918
13918: DISABLE
13919: LD_INT 0
13921: PPUSH
13922: PPUSH
13923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13924: LD_ADDR_VAR 0 2
13928: PUSH
13929: LD_INT 22
13931: PUSH
13932: LD_OWVAR 2
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 33
13943: PUSH
13944: LD_INT 3
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PPUSH
13955: CALL_OW 69
13959: ST_TO_ADDR
// if not tmp then
13960: LD_VAR 0 2
13964: NOT
13965: IFFALSE 13969
// exit ;
13967: GO 14095
// side := 0 ;
13969: LD_ADDR_VAR 0 3
13973: PUSH
13974: LD_INT 0
13976: ST_TO_ADDR
// for i := 1 to 8 do
13977: LD_ADDR_VAR 0 1
13981: PUSH
13982: DOUBLE
13983: LD_INT 1
13985: DEC
13986: ST_TO_ADDR
13987: LD_INT 8
13989: PUSH
13990: FOR_TO
13991: IFFALSE 14039
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13993: LD_OWVAR 2
13997: PUSH
13998: LD_VAR 0 1
14002: NONEQUAL
14003: PUSH
14004: LD_OWVAR 2
14008: PPUSH
14009: LD_VAR 0 1
14013: PPUSH
14014: CALL_OW 81
14018: PUSH
14019: LD_INT 2
14021: EQUAL
14022: AND
14023: IFFALSE 14037
// begin side := i ;
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_VAR 0 1
14034: ST_TO_ADDR
// break ;
14035: GO 14039
// end ;
14037: GO 13990
14039: POP
14040: POP
// if not side then
14041: LD_VAR 0 3
14045: NOT
14046: IFFALSE 14050
// exit ;
14048: GO 14095
// for i := 1 to tmp do
14050: LD_ADDR_VAR 0 1
14054: PUSH
14055: DOUBLE
14056: LD_INT 1
14058: DEC
14059: ST_TO_ADDR
14060: LD_VAR 0 2
14064: PUSH
14065: FOR_TO
14066: IFFALSE 14093
// if Prob ( 60 ) then
14068: LD_INT 60
14070: PPUSH
14071: CALL_OW 13
14075: IFFALSE 14091
// SetSide ( i , side ) ;
14077: LD_VAR 0 1
14081: PPUSH
14082: LD_VAR 0 3
14086: PPUSH
14087: CALL_OW 235
14091: GO 14065
14093: POP
14094: POP
// end ;
14095: PPOPN 3
14097: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14098: LD_EXP 29
14102: PUSH
14103: LD_EXP 42
14107: AND
14108: IFFALSE 14227
14110: GO 14112
14112: DISABLE
14113: LD_INT 0
14115: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_OWVAR 2
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 21
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 3
14145: PUSH
14146: LD_INT 23
14148: PUSH
14149: LD_INT 0
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 69
14169: PUSH
14170: FOR_IN
14171: IFFALSE 14225
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 257
14182: PUSH
14183: LD_INT 1
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: LD_INT 4
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: IN
14201: IFFALSE 14223
// SetClass ( un , rand ( 1 , 4 ) ) ;
14203: LD_VAR 0 1
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: LD_INT 4
14213: PPUSH
14214: CALL_OW 12
14218: PPUSH
14219: CALL_OW 336
14223: GO 14170
14225: POP
14226: POP
// end ;
14227: PPOPN 1
14229: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14230: LD_EXP 29
14234: PUSH
14235: LD_EXP 41
14239: AND
14240: IFFALSE 14319
14242: GO 14244
14244: DISABLE
14245: LD_INT 0
14247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14248: LD_ADDR_VAR 0 1
14252: PUSH
14253: LD_INT 22
14255: PUSH
14256: LD_OWVAR 2
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 3
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: ST_TO_ADDR
// if not tmp then
14284: LD_VAR 0 1
14288: NOT
14289: IFFALSE 14293
// exit ;
14291: GO 14319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14293: LD_VAR 0 1
14297: PUSH
14298: LD_INT 1
14300: PPUSH
14301: LD_VAR 0 1
14305: PPUSH
14306: CALL_OW 12
14310: ARRAY
14311: PPUSH
14312: LD_INT 100
14314: PPUSH
14315: CALL_OW 234
// end ;
14319: PPOPN 1
14321: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14322: LD_EXP 29
14326: PUSH
14327: LD_EXP 43
14331: AND
14332: IFFALSE 14430
14334: GO 14336
14336: DISABLE
14337: LD_INT 0
14339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14340: LD_ADDR_VAR 0 1
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_OWVAR 2
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 21
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 69
14375: ST_TO_ADDR
// if not tmp then
14376: LD_VAR 0 1
14380: NOT
14381: IFFALSE 14385
// exit ;
14383: GO 14430
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14385: LD_VAR 0 1
14389: PUSH
14390: LD_INT 1
14392: PPUSH
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 12
14402: ARRAY
14403: PPUSH
14404: LD_INT 1
14406: PPUSH
14407: LD_INT 4
14409: PPUSH
14410: CALL_OW 12
14414: PPUSH
14415: LD_INT 3000
14417: PPUSH
14418: LD_INT 9000
14420: PPUSH
14421: CALL_OW 12
14425: PPUSH
14426: CALL_OW 492
// end ;
14430: PPOPN 1
14432: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14433: LD_EXP 29
14437: PUSH
14438: LD_EXP 44
14442: AND
14443: IFFALSE 14463
14445: GO 14447
14447: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14448: LD_INT 1
14450: PPUSH
14451: LD_OWVAR 2
14455: PPUSH
14456: LD_INT 0
14458: PPUSH
14459: CALL_OW 324
14463: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14464: LD_EXP 29
14468: PUSH
14469: LD_EXP 45
14473: AND
14474: IFFALSE 14557
14476: GO 14478
14478: DISABLE
14479: LD_INT 0
14481: PPUSH
14482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14483: LD_ADDR_VAR 0 2
14487: PUSH
14488: LD_INT 22
14490: PUSH
14491: LD_OWVAR 2
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 21
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PPUSH
14514: CALL_OW 69
14518: ST_TO_ADDR
// if not tmp then
14519: LD_VAR 0 2
14523: NOT
14524: IFFALSE 14528
// exit ;
14526: GO 14557
// for i in tmp do
14528: LD_ADDR_VAR 0 1
14532: PUSH
14533: LD_VAR 0 2
14537: PUSH
14538: FOR_IN
14539: IFFALSE 14555
// SetBLevel ( i , 10 ) ;
14541: LD_VAR 0 1
14545: PPUSH
14546: LD_INT 10
14548: PPUSH
14549: CALL_OW 241
14553: GO 14538
14555: POP
14556: POP
// end ;
14557: PPOPN 2
14559: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14560: LD_EXP 29
14564: PUSH
14565: LD_EXP 46
14569: AND
14570: IFFALSE 14681
14572: GO 14574
14574: DISABLE
14575: LD_INT 0
14577: PPUSH
14578: PPUSH
14579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14580: LD_ADDR_VAR 0 3
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_OWVAR 2
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 25
14599: PUSH
14600: LD_INT 1
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 69
14615: ST_TO_ADDR
// if not tmp then
14616: LD_VAR 0 3
14620: NOT
14621: IFFALSE 14625
// exit ;
14623: GO 14681
// un := tmp [ rand ( 1 , tmp ) ] ;
14625: LD_ADDR_VAR 0 2
14629: PUSH
14630: LD_VAR 0 3
14634: PUSH
14635: LD_INT 1
14637: PPUSH
14638: LD_VAR 0 3
14642: PPUSH
14643: CALL_OW 12
14647: ARRAY
14648: ST_TO_ADDR
// if Crawls ( un ) then
14649: LD_VAR 0 2
14653: PPUSH
14654: CALL_OW 318
14658: IFFALSE 14669
// ComWalk ( un ) ;
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14669: LD_VAR 0 2
14673: PPUSH
14674: LD_INT 5
14676: PPUSH
14677: CALL_OW 336
// end ;
14681: PPOPN 3
14683: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14684: LD_EXP 29
14688: PUSH
14689: LD_EXP 47
14693: AND
14694: PUSH
14695: LD_OWVAR 67
14699: PUSH
14700: LD_INT 4
14702: LESS
14703: AND
14704: IFFALSE 14723
14706: GO 14708
14708: DISABLE
// begin Difficulty := Difficulty + 1 ;
14709: LD_ADDR_OWVAR 67
14713: PUSH
14714: LD_OWVAR 67
14718: PUSH
14719: LD_INT 1
14721: PLUS
14722: ST_TO_ADDR
// end ;
14723: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14724: LD_EXP 29
14728: PUSH
14729: LD_EXP 48
14733: AND
14734: IFFALSE 14837
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
// begin for i := 1 to 5 do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_INT 5
14754: PUSH
14755: FOR_TO
14756: IFFALSE 14835
// begin uc_nation := nation_nature ;
14758: LD_ADDR_OWVAR 21
14762: PUSH
14763: LD_INT 0
14765: ST_TO_ADDR
// uc_side := 0 ;
14766: LD_ADDR_OWVAR 20
14770: PUSH
14771: LD_INT 0
14773: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14774: LD_ADDR_OWVAR 29
14778: PUSH
14779: LD_INT 12
14781: PUSH
14782: LD_INT 12
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: ST_TO_ADDR
// hc_agressivity := 20 ;
14789: LD_ADDR_OWVAR 35
14793: PUSH
14794: LD_INT 20
14796: ST_TO_ADDR
// hc_class := class_tiger ;
14797: LD_ADDR_OWVAR 28
14801: PUSH
14802: LD_INT 14
14804: ST_TO_ADDR
// hc_gallery :=  ;
14805: LD_ADDR_OWVAR 33
14809: PUSH
14810: LD_STRING 
14812: ST_TO_ADDR
// hc_name :=  ;
14813: LD_ADDR_OWVAR 26
14817: PUSH
14818: LD_STRING 
14820: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14821: CALL_OW 44
14825: PPUSH
14826: LD_INT 0
14828: PPUSH
14829: CALL_OW 51
// end ;
14833: GO 14755
14835: POP
14836: POP
// end ;
14837: PPOPN 1
14839: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14840: LD_EXP 29
14844: PUSH
14845: LD_EXP 49
14849: AND
14850: IFFALSE 14859
14852: GO 14854
14854: DISABLE
// StreamSibBomb ;
14855: CALL 14860 0 0
14859: END
// export function StreamSibBomb ; var i , x , y ; begin
14860: LD_INT 0
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
// result := false ;
14866: LD_ADDR_VAR 0 1
14870: PUSH
14871: LD_INT 0
14873: ST_TO_ADDR
// for i := 1 to 16 do
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: DOUBLE
14880: LD_INT 1
14882: DEC
14883: ST_TO_ADDR
14884: LD_INT 16
14886: PUSH
14887: FOR_TO
14888: IFFALSE 15087
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14890: LD_ADDR_VAR 0 3
14894: PUSH
14895: LD_INT 10
14897: PUSH
14898: LD_INT 20
14900: PUSH
14901: LD_INT 30
14903: PUSH
14904: LD_INT 40
14906: PUSH
14907: LD_INT 50
14909: PUSH
14910: LD_INT 60
14912: PUSH
14913: LD_INT 70
14915: PUSH
14916: LD_INT 80
14918: PUSH
14919: LD_INT 90
14921: PUSH
14922: LD_INT 100
14924: PUSH
14925: LD_INT 110
14927: PUSH
14928: LD_INT 120
14930: PUSH
14931: LD_INT 130
14933: PUSH
14934: LD_INT 140
14936: PUSH
14937: LD_INT 150
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 1
14959: PPUSH
14960: LD_INT 15
14962: PPUSH
14963: CALL_OW 12
14967: ARRAY
14968: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14969: LD_ADDR_VAR 0 4
14973: PUSH
14974: LD_INT 10
14976: PUSH
14977: LD_INT 20
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 40
14985: PUSH
14986: LD_INT 50
14988: PUSH
14989: LD_INT 60
14991: PUSH
14992: LD_INT 70
14994: PUSH
14995: LD_INT 80
14997: PUSH
14998: LD_INT 90
15000: PUSH
15001: LD_INT 100
15003: PUSH
15004: LD_INT 110
15006: PUSH
15007: LD_INT 120
15009: PUSH
15010: LD_INT 130
15012: PUSH
15013: LD_INT 140
15015: PUSH
15016: LD_INT 150
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 1
15038: PPUSH
15039: LD_INT 15
15041: PPUSH
15042: CALL_OW 12
15046: ARRAY
15047: ST_TO_ADDR
// if ValidHex ( x , y ) then
15048: LD_VAR 0 3
15052: PPUSH
15053: LD_VAR 0 4
15057: PPUSH
15058: CALL_OW 488
15062: IFFALSE 15085
// begin result := [ x , y ] ;
15064: LD_ADDR_VAR 0 1
15068: PUSH
15069: LD_VAR 0 3
15073: PUSH
15074: LD_VAR 0 4
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: ST_TO_ADDR
// break ;
15083: GO 15087
// end ; end ;
15085: GO 14887
15087: POP
15088: POP
// if result then
15089: LD_VAR 0 1
15093: IFFALSE 15153
// begin ToLua ( playSibBomb() ) ;
15095: LD_STRING playSibBomb()
15097: PPUSH
15098: CALL_OW 559
// wait ( 0 0$14 ) ;
15102: LD_INT 490
15104: PPUSH
15105: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15109: LD_VAR 0 1
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PPUSH
15118: LD_VAR 0 1
15122: PUSH
15123: LD_INT 2
15125: ARRAY
15126: PPUSH
15127: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15131: LD_VAR 0 1
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PPUSH
15140: LD_VAR 0 1
15144: PUSH
15145: LD_INT 2
15147: ARRAY
15148: PPUSH
15149: CALL_OW 429
// end ; end ;
15153: LD_VAR 0 1
15157: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15158: LD_EXP 29
15162: PUSH
15163: LD_EXP 51
15167: AND
15168: IFFALSE 15180
15170: GO 15172
15172: DISABLE
// YouLost (  ) ;
15173: LD_STRING 
15175: PPUSH
15176: CALL_OW 104
15180: END
// every 0 0$1 trigger StreamModeActive and sFog do
15181: LD_EXP 29
15185: PUSH
15186: LD_EXP 50
15190: AND
15191: IFFALSE 15205
15193: GO 15195
15195: DISABLE
// FogOff ( your_side ) ;
15196: LD_OWVAR 2
15200: PPUSH
15201: CALL_OW 344
15205: END
// every 0 0$1 trigger StreamModeActive and sSun do
15206: LD_EXP 29
15210: PUSH
15211: LD_EXP 52
15215: AND
15216: IFFALSE 15244
15218: GO 15220
15220: DISABLE
// begin solar_recharge_percent := 0 ;
15221: LD_ADDR_OWVAR 79
15225: PUSH
15226: LD_INT 0
15228: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15229: LD_INT 10500
15231: PPUSH
15232: CALL_OW 67
// solar_recharge_percent := 100 ;
15236: LD_ADDR_OWVAR 79
15240: PUSH
15241: LD_INT 100
15243: ST_TO_ADDR
// end ;
15244: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15245: LD_EXP 29
15249: PUSH
15250: LD_EXP 53
15254: AND
15255: IFFALSE 15494
15257: GO 15259
15259: DISABLE
15260: LD_INT 0
15262: PPUSH
15263: PPUSH
15264: PPUSH
// begin tmp := [ ] ;
15265: LD_ADDR_VAR 0 3
15269: PUSH
15270: EMPTY
15271: ST_TO_ADDR
// for i := 1 to 6 do
15272: LD_ADDR_VAR 0 1
15276: PUSH
15277: DOUBLE
15278: LD_INT 1
15280: DEC
15281: ST_TO_ADDR
15282: LD_INT 6
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15391
// begin uc_nation := nation_nature ;
15288: LD_ADDR_OWVAR 21
15292: PUSH
15293: LD_INT 0
15295: ST_TO_ADDR
// uc_side := 0 ;
15296: LD_ADDR_OWVAR 20
15300: PUSH
15301: LD_INT 0
15303: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15304: LD_ADDR_OWVAR 29
15308: PUSH
15309: LD_INT 12
15311: PUSH
15312: LD_INT 12
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: ST_TO_ADDR
// hc_agressivity := 20 ;
15319: LD_ADDR_OWVAR 35
15323: PUSH
15324: LD_INT 20
15326: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15327: LD_ADDR_OWVAR 28
15331: PUSH
15332: LD_INT 17
15334: ST_TO_ADDR
// hc_gallery :=  ;
15335: LD_ADDR_OWVAR 33
15339: PUSH
15340: LD_STRING 
15342: ST_TO_ADDR
// hc_name :=  ;
15343: LD_ADDR_OWVAR 26
15347: PUSH
15348: LD_STRING 
15350: ST_TO_ADDR
// un := CreateHuman ;
15351: LD_ADDR_VAR 0 2
15355: PUSH
15356: CALL_OW 44
15360: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15361: LD_VAR 0 2
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 51
// tmp := tmp ^ un ;
15373: LD_ADDR_VAR 0 3
15377: PUSH
15378: LD_VAR 0 3
15382: PUSH
15383: LD_VAR 0 2
15387: ADD
15388: ST_TO_ADDR
// end ;
15389: GO 15285
15391: POP
15392: POP
// repeat wait ( 0 0$1 ) ;
15393: LD_INT 35
15395: PPUSH
15396: CALL_OW 67
// for un in tmp do
15400: LD_ADDR_VAR 0 2
15404: PUSH
15405: LD_VAR 0 3
15409: PUSH
15410: FOR_IN
15411: IFFALSE 15485
// begin if IsDead ( un ) then
15413: LD_VAR 0 2
15417: PPUSH
15418: CALL_OW 301
15422: IFFALSE 15442
// begin tmp := tmp diff un ;
15424: LD_ADDR_VAR 0 3
15428: PUSH
15429: LD_VAR 0 3
15433: PUSH
15434: LD_VAR 0 2
15438: DIFF
15439: ST_TO_ADDR
// continue ;
15440: GO 15410
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15442: LD_VAR 0 2
15446: PPUSH
15447: LD_INT 3
15449: PUSH
15450: LD_INT 22
15452: PUSH
15453: LD_INT 0
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PPUSH
15464: CALL_OW 69
15468: PPUSH
15469: LD_VAR 0 2
15473: PPUSH
15474: CALL_OW 74
15478: PPUSH
15479: CALL_OW 115
// end ;
15483: GO 15410
15485: POP
15486: POP
// until not tmp ;
15487: LD_VAR 0 3
15491: NOT
15492: IFFALSE 15393
// end ;
15494: PPOPN 3
15496: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15497: LD_EXP 29
15501: PUSH
15502: LD_EXP 54
15506: AND
15507: IFFALSE 15561
15509: GO 15511
15511: DISABLE
// begin ToLua ( displayTroll(); ) ;
15512: LD_STRING displayTroll();
15514: PPUSH
15515: CALL_OW 559
// wait ( 3 3$00 ) ;
15519: LD_INT 6300
15521: PPUSH
15522: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15526: LD_STRING hideTroll();
15528: PPUSH
15529: CALL_OW 559
// wait ( 1 1$00 ) ;
15533: LD_INT 2100
15535: PPUSH
15536: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15540: LD_STRING displayTroll();
15542: PPUSH
15543: CALL_OW 559
// wait ( 1 1$00 ) ;
15547: LD_INT 2100
15549: PPUSH
15550: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15554: LD_STRING hideTroll();
15556: PPUSH
15557: CALL_OW 559
// end ;
15561: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15562: LD_EXP 29
15566: PUSH
15567: LD_EXP 55
15571: AND
15572: IFFALSE 15635
15574: GO 15576
15576: DISABLE
15577: LD_INT 0
15579: PPUSH
// begin p := 0 ;
15580: LD_ADDR_VAR 0 1
15584: PUSH
15585: LD_INT 0
15587: ST_TO_ADDR
// repeat game_speed := 1 ;
15588: LD_ADDR_OWVAR 65
15592: PUSH
15593: LD_INT 1
15595: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15596: LD_INT 35
15598: PPUSH
15599: CALL_OW 67
// p := p + 1 ;
15603: LD_ADDR_VAR 0 1
15607: PUSH
15608: LD_VAR 0 1
15612: PUSH
15613: LD_INT 1
15615: PLUS
15616: ST_TO_ADDR
// until p >= 60 ;
15617: LD_VAR 0 1
15621: PUSH
15622: LD_INT 60
15624: GREATEREQUAL
15625: IFFALSE 15588
// game_speed := 4 ;
15627: LD_ADDR_OWVAR 65
15631: PUSH
15632: LD_INT 4
15634: ST_TO_ADDR
// end ;
15635: PPOPN 1
15637: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15638: LD_EXP 29
15642: PUSH
15643: LD_EXP 56
15647: AND
15648: IFFALSE 15794
15650: GO 15652
15652: DISABLE
15653: LD_INT 0
15655: PPUSH
15656: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15657: LD_ADDR_VAR 0 1
15661: PUSH
15662: LD_INT 22
15664: PUSH
15665: LD_OWVAR 2
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: LD_INT 30
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 30
15689: PUSH
15690: LD_INT 1
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 69
15710: ST_TO_ADDR
// if not depot then
15711: LD_VAR 0 1
15715: NOT
15716: IFFALSE 15720
// exit ;
15718: GO 15794
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15720: LD_ADDR_VAR 0 2
15724: PUSH
15725: LD_VAR 0 1
15729: PUSH
15730: LD_INT 1
15732: PPUSH
15733: LD_VAR 0 1
15737: PPUSH
15738: CALL_OW 12
15742: ARRAY
15743: PPUSH
15744: CALL_OW 274
15748: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15749: LD_VAR 0 2
15753: PPUSH
15754: LD_INT 1
15756: PPUSH
15757: LD_INT 0
15759: PPUSH
15760: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15764: LD_VAR 0 2
15768: PPUSH
15769: LD_INT 2
15771: PPUSH
15772: LD_INT 0
15774: PPUSH
15775: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15779: LD_VAR 0 2
15783: PPUSH
15784: LD_INT 3
15786: PPUSH
15787: LD_INT 0
15789: PPUSH
15790: CALL_OW 277
// end ;
15794: PPOPN 2
15796: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15797: LD_EXP 29
15801: PUSH
15802: LD_EXP 57
15806: AND
15807: IFFALSE 15904
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15815: LD_ADDR_VAR 0 1
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_OWVAR 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 21
15834: PUSH
15835: LD_INT 1
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 3
15844: PUSH
15845: LD_INT 23
15847: PUSH
15848: LD_INT 0
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: ST_TO_ADDR
// if not tmp then
15869: LD_VAR 0 1
15873: NOT
15874: IFFALSE 15878
// exit ;
15876: GO 15904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15878: LD_VAR 0 1
15882: PUSH
15883: LD_INT 1
15885: PPUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 12
15895: ARRAY
15896: PPUSH
15897: LD_INT 200
15899: PPUSH
15900: CALL_OW 234
// end ;
15904: PPOPN 1
15906: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15907: LD_EXP 29
15911: PUSH
15912: LD_EXP 58
15916: AND
15917: IFFALSE 15996
15919: GO 15921
15921: DISABLE
15922: LD_INT 0
15924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_INT 22
15932: PUSH
15933: LD_OWVAR 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 2
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: ST_TO_ADDR
// if not tmp then
15961: LD_VAR 0 1
15965: NOT
15966: IFFALSE 15970
// exit ;
15968: GO 15996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15970: LD_VAR 0 1
15974: PUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 12
15987: ARRAY
15988: PPUSH
15989: LD_INT 60
15991: PPUSH
15992: CALL_OW 234
// end ;
15996: PPOPN 1
15998: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15999: LD_EXP 29
16003: PUSH
16004: LD_EXP 59
16008: AND
16009: IFFALSE 16108
16011: GO 16013
16013: DISABLE
16014: LD_INT 0
16016: PPUSH
16017: PPUSH
// begin enable ;
16018: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16019: LD_ADDR_VAR 0 1
16023: PUSH
16024: LD_INT 22
16026: PUSH
16027: LD_OWVAR 2
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 61
16038: PUSH
16039: EMPTY
16040: LIST
16041: PUSH
16042: LD_INT 33
16044: PUSH
16045: LD_INT 2
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: ST_TO_ADDR
// if not tmp then
16062: LD_VAR 0 1
16066: NOT
16067: IFFALSE 16071
// exit ;
16069: GO 16108
// for i in tmp do
16071: LD_ADDR_VAR 0 2
16075: PUSH
16076: LD_VAR 0 1
16080: PUSH
16081: FOR_IN
16082: IFFALSE 16106
// if IsControledBy ( i ) then
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL_OW 312
16093: IFFALSE 16104
// ComUnlink ( i ) ;
16095: LD_VAR 0 2
16099: PPUSH
16100: CALL_OW 136
16104: GO 16081
16106: POP
16107: POP
// end ;
16108: PPOPN 2
16110: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16111: LD_EXP 29
16115: PUSH
16116: LD_EXP 60
16120: AND
16121: IFFALSE 16261
16123: GO 16125
16125: DISABLE
16126: LD_INT 0
16128: PPUSH
16129: PPUSH
// begin ToLua ( displayPowell(); ) ;
16130: LD_STRING displayPowell();
16132: PPUSH
16133: CALL_OW 559
// uc_side := 0 ;
16137: LD_ADDR_OWVAR 20
16141: PUSH
16142: LD_INT 0
16144: ST_TO_ADDR
// uc_nation := 2 ;
16145: LD_ADDR_OWVAR 21
16149: PUSH
16150: LD_INT 2
16152: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16153: LD_ADDR_OWVAR 37
16157: PUSH
16158: LD_INT 14
16160: ST_TO_ADDR
// vc_engine := engine_siberite ;
16161: LD_ADDR_OWVAR 39
16165: PUSH
16166: LD_INT 3
16168: ST_TO_ADDR
// vc_control := control_apeman ;
16169: LD_ADDR_OWVAR 38
16173: PUSH
16174: LD_INT 5
16176: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16177: LD_ADDR_OWVAR 40
16181: PUSH
16182: LD_INT 29
16184: ST_TO_ADDR
// un := CreateVehicle ;
16185: LD_ADDR_VAR 0 2
16189: PUSH
16190: CALL_OW 45
16194: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16195: LD_VAR 0 2
16199: PPUSH
16200: LD_INT 1
16202: PPUSH
16203: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16207: LD_INT 35
16209: PPUSH
16210: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16214: LD_VAR 0 2
16218: PPUSH
16219: LD_INT 22
16221: PUSH
16222: LD_OWVAR 2
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: PPUSH
16236: LD_VAR 0 2
16240: PPUSH
16241: CALL_OW 74
16245: PPUSH
16246: CALL_OW 115
// until IsDead ( un ) ;
16250: LD_VAR 0 2
16254: PPUSH
16255: CALL_OW 301
16259: IFFALSE 16207
// end ;
16261: PPOPN 2
16263: END
// every 0 0$1 trigger StreamModeActive and sStu do
16264: LD_EXP 29
16268: PUSH
16269: LD_EXP 68
16273: AND
16274: IFFALSE 16290
16276: GO 16278
16278: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16279: LD_STRING displayStucuk();
16281: PPUSH
16282: CALL_OW 559
// ResetFog ;
16286: CALL_OW 335
// end ;
16290: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16291: LD_EXP 29
16295: PUSH
16296: LD_EXP 61
16300: AND
16301: IFFALSE 16442
16303: GO 16305
16305: DISABLE
16306: LD_INT 0
16308: PPUSH
16309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16310: LD_ADDR_VAR 0 2
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_OWVAR 2
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 21
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PPUSH
16341: CALL_OW 69
16345: ST_TO_ADDR
// if not tmp then
16346: LD_VAR 0 2
16350: NOT
16351: IFFALSE 16355
// exit ;
16353: GO 16442
// un := tmp [ rand ( 1 , tmp ) ] ;
16355: LD_ADDR_VAR 0 1
16359: PUSH
16360: LD_VAR 0 2
16364: PUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_VAR 0 2
16372: PPUSH
16373: CALL_OW 12
16377: ARRAY
16378: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16379: LD_VAR 0 1
16383: PPUSH
16384: LD_INT 0
16386: PPUSH
16387: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16391: LD_VAR 0 1
16395: PPUSH
16396: LD_OWVAR 3
16400: PUSH
16401: LD_VAR 0 1
16405: DIFF
16406: PPUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 74
16416: PPUSH
16417: CALL_OW 115
// wait ( 0 0$20 ) ;
16421: LD_INT 700
16423: PPUSH
16424: CALL_OW 67
// SetSide ( un , your_side ) ;
16428: LD_VAR 0 1
16432: PPUSH
16433: LD_OWVAR 2
16437: PPUSH
16438: CALL_OW 235
// end ;
16442: PPOPN 2
16444: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16445: LD_EXP 29
16449: PUSH
16450: LD_EXP 62
16454: AND
16455: IFFALSE 16561
16457: GO 16459
16459: DISABLE
16460: LD_INT 0
16462: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16463: LD_ADDR_VAR 0 1
16467: PUSH
16468: LD_INT 22
16470: PUSH
16471: LD_OWVAR 2
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 2
16482: PUSH
16483: LD_INT 30
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 30
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 69
16516: ST_TO_ADDR
// if not depot then
16517: LD_VAR 0 1
16521: NOT
16522: IFFALSE 16526
// exit ;
16524: GO 16561
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16526: LD_VAR 0 1
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PPUSH
16535: CALL_OW 250
16539: PPUSH
16540: LD_VAR 0 1
16544: PUSH
16545: LD_INT 1
16547: ARRAY
16548: PPUSH
16549: CALL_OW 251
16553: PPUSH
16554: LD_INT 70
16556: PPUSH
16557: CALL_OW 495
// end ;
16561: PPOPN 1
16563: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16564: LD_EXP 29
16568: PUSH
16569: LD_EXP 63
16573: AND
16574: IFFALSE 16785
16576: GO 16578
16578: DISABLE
16579: LD_INT 0
16581: PPUSH
16582: PPUSH
16583: PPUSH
16584: PPUSH
16585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16586: LD_ADDR_VAR 0 5
16590: PUSH
16591: LD_INT 22
16593: PUSH
16594: LD_OWVAR 2
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 21
16605: PUSH
16606: LD_INT 1
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PPUSH
16617: CALL_OW 69
16621: ST_TO_ADDR
// if not tmp then
16622: LD_VAR 0 5
16626: NOT
16627: IFFALSE 16631
// exit ;
16629: GO 16785
// for i in tmp do
16631: LD_ADDR_VAR 0 1
16635: PUSH
16636: LD_VAR 0 5
16640: PUSH
16641: FOR_IN
16642: IFFALSE 16783
// begin d := rand ( 0 , 5 ) ;
16644: LD_ADDR_VAR 0 4
16648: PUSH
16649: LD_INT 0
16651: PPUSH
16652: LD_INT 5
16654: PPUSH
16655: CALL_OW 12
16659: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16660: LD_ADDR_VAR 0 2
16664: PUSH
16665: LD_VAR 0 1
16669: PPUSH
16670: CALL_OW 250
16674: PPUSH
16675: LD_VAR 0 4
16679: PPUSH
16680: LD_INT 3
16682: PPUSH
16683: LD_INT 12
16685: PPUSH
16686: CALL_OW 12
16690: PPUSH
16691: CALL_OW 272
16695: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16696: LD_ADDR_VAR 0 3
16700: PUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 251
16710: PPUSH
16711: LD_VAR 0 4
16715: PPUSH
16716: LD_INT 3
16718: PPUSH
16719: LD_INT 12
16721: PPUSH
16722: CALL_OW 12
16726: PPUSH
16727: CALL_OW 273
16731: ST_TO_ADDR
// if ValidHex ( x , y ) then
16732: LD_VAR 0 2
16736: PPUSH
16737: LD_VAR 0 3
16741: PPUSH
16742: CALL_OW 488
16746: IFFALSE 16781
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_VAR 0 2
16757: PPUSH
16758: LD_VAR 0 3
16762: PPUSH
16763: LD_INT 3
16765: PPUSH
16766: LD_INT 6
16768: PPUSH
16769: CALL_OW 12
16773: PPUSH
16774: LD_INT 1
16776: PPUSH
16777: CALL_OW 483
// end ;
16781: GO 16641
16783: POP
16784: POP
// end ;
16785: PPOPN 5
16787: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16788: LD_EXP 29
16792: PUSH
16793: LD_EXP 64
16797: AND
16798: IFFALSE 16892
16800: GO 16802
16802: DISABLE
16803: LD_INT 0
16805: PPUSH
16806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16807: LD_ADDR_VAR 0 2
16811: PUSH
16812: LD_INT 22
16814: PUSH
16815: LD_OWVAR 2
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 32
16826: PUSH
16827: LD_INT 1
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 21
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 69
16853: ST_TO_ADDR
// if not tmp then
16854: LD_VAR 0 2
16858: NOT
16859: IFFALSE 16863
// exit ;
16861: GO 16892
// for i in tmp do
16863: LD_ADDR_VAR 0 1
16867: PUSH
16868: LD_VAR 0 2
16872: PUSH
16873: FOR_IN
16874: IFFALSE 16890
// SetFuel ( i , 0 ) ;
16876: LD_VAR 0 1
16880: PPUSH
16881: LD_INT 0
16883: PPUSH
16884: CALL_OW 240
16888: GO 16873
16890: POP
16891: POP
// end ;
16892: PPOPN 2
16894: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16895: LD_EXP 29
16899: PUSH
16900: LD_EXP 65
16904: AND
16905: IFFALSE 16971
16907: GO 16909
16909: DISABLE
16910: LD_INT 0
16912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16913: LD_ADDR_VAR 0 1
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_OWVAR 2
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 30
16932: PUSH
16933: LD_INT 29
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PPUSH
16944: CALL_OW 69
16948: ST_TO_ADDR
// if not tmp then
16949: LD_VAR 0 1
16953: NOT
16954: IFFALSE 16958
// exit ;
16956: GO 16971
// DestroyUnit ( tmp [ 1 ] ) ;
16958: LD_VAR 0 1
16962: PUSH
16963: LD_INT 1
16965: ARRAY
16966: PPUSH
16967: CALL_OW 65
// end ;
16971: PPOPN 1
16973: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16974: LD_EXP 29
16978: PUSH
16979: LD_EXP 67
16983: AND
16984: IFFALSE 17113
16986: GO 16988
16988: DISABLE
16989: LD_INT 0
16991: PPUSH
// begin uc_side := 0 ;
16992: LD_ADDR_OWVAR 20
16996: PUSH
16997: LD_INT 0
16999: ST_TO_ADDR
// uc_nation := nation_arabian ;
17000: LD_ADDR_OWVAR 21
17004: PUSH
17005: LD_INT 2
17007: ST_TO_ADDR
// hc_gallery :=  ;
17008: LD_ADDR_OWVAR 33
17012: PUSH
17013: LD_STRING 
17015: ST_TO_ADDR
// hc_name :=  ;
17016: LD_ADDR_OWVAR 26
17020: PUSH
17021: LD_STRING 
17023: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17024: LD_INT 1
17026: PPUSH
17027: LD_INT 11
17029: PPUSH
17030: LD_INT 10
17032: PPUSH
17033: CALL_OW 380
// un := CreateHuman ;
17037: LD_ADDR_VAR 0 1
17041: PUSH
17042: CALL_OW 44
17046: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17047: LD_VAR 0 1
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17059: LD_INT 35
17061: PPUSH
17062: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_INT 22
17073: PUSH
17074: LD_OWVAR 2
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PPUSH
17083: CALL_OW 69
17087: PPUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 74
17097: PPUSH
17098: CALL_OW 115
// until IsDead ( un ) ;
17102: LD_VAR 0 1
17106: PPUSH
17107: CALL_OW 301
17111: IFFALSE 17059
// end ;
17113: PPOPN 1
17115: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17116: LD_EXP 29
17120: PUSH
17121: LD_EXP 69
17125: AND
17126: IFFALSE 17138
17128: GO 17130
17130: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17131: LD_STRING earthquake(getX(game), 0, 32)
17133: PPUSH
17134: CALL_OW 559
17138: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17139: LD_EXP 29
17143: PUSH
17144: LD_EXP 70
17148: AND
17149: IFFALSE 17240
17151: GO 17153
17153: DISABLE
17154: LD_INT 0
17156: PPUSH
// begin enable ;
17157: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17158: LD_ADDR_VAR 0 1
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_OWVAR 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 21
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 33
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: ST_TO_ADDR
// if not tmp then
17205: LD_VAR 0 1
17209: NOT
17210: IFFALSE 17214
// exit ;
17212: GO 17240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17214: LD_VAR 0 1
17218: PUSH
17219: LD_INT 1
17221: PPUSH
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 12
17231: ARRAY
17232: PPUSH
17233: LD_INT 1
17235: PPUSH
17236: CALL_OW 234
// end ;
17240: PPOPN 1
17242: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17243: LD_EXP 29
17247: PUSH
17248: LD_EXP 71
17252: AND
17253: IFFALSE 17394
17255: GO 17257
17257: DISABLE
17258: LD_INT 0
17260: PPUSH
17261: PPUSH
17262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: LD_INT 22
17270: PUSH
17271: LD_OWVAR 2
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 25
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PPUSH
17294: CALL_OW 69
17298: ST_TO_ADDR
// if not tmp then
17299: LD_VAR 0 3
17303: NOT
17304: IFFALSE 17308
// exit ;
17306: GO 17394
// un := tmp [ rand ( 1 , tmp ) ] ;
17308: LD_ADDR_VAR 0 2
17312: PUSH
17313: LD_VAR 0 3
17317: PUSH
17318: LD_INT 1
17320: PPUSH
17321: LD_VAR 0 3
17325: PPUSH
17326: CALL_OW 12
17330: ARRAY
17331: ST_TO_ADDR
// if Crawls ( un ) then
17332: LD_VAR 0 2
17336: PPUSH
17337: CALL_OW 318
17341: IFFALSE 17352
// ComWalk ( un ) ;
17343: LD_VAR 0 2
17347: PPUSH
17348: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17352: LD_VAR 0 2
17356: PPUSH
17357: LD_INT 9
17359: PPUSH
17360: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17364: LD_INT 28
17366: PPUSH
17367: LD_OWVAR 2
17371: PPUSH
17372: LD_INT 2
17374: PPUSH
17375: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17379: LD_INT 29
17381: PPUSH
17382: LD_OWVAR 2
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 322
// end ;
17394: PPOPN 3
17396: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17397: LD_EXP 29
17401: PUSH
17402: LD_EXP 72
17406: AND
17407: IFFALSE 17518
17409: GO 17411
17411: DISABLE
17412: LD_INT 0
17414: PPUSH
17415: PPUSH
17416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17417: LD_ADDR_VAR 0 3
17421: PUSH
17422: LD_INT 22
17424: PUSH
17425: LD_OWVAR 2
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 25
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// if not tmp then
17453: LD_VAR 0 3
17457: NOT
17458: IFFALSE 17462
// exit ;
17460: GO 17518
// un := tmp [ rand ( 1 , tmp ) ] ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_VAR 0 3
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: CALL_OW 12
17484: ARRAY
17485: ST_TO_ADDR
// if Crawls ( un ) then
17486: LD_VAR 0 2
17490: PPUSH
17491: CALL_OW 318
17495: IFFALSE 17506
// ComWalk ( un ) ;
17497: LD_VAR 0 2
17501: PPUSH
17502: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17506: LD_VAR 0 2
17510: PPUSH
17511: LD_INT 8
17513: PPUSH
17514: CALL_OW 336
// end ;
17518: PPOPN 3
17520: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17521: LD_EXP 29
17525: PUSH
17526: LD_EXP 73
17530: AND
17531: IFFALSE 17675
17533: GO 17535
17535: DISABLE
17536: LD_INT 0
17538: PPUSH
17539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17540: LD_ADDR_VAR 0 2
17544: PUSH
17545: LD_INT 22
17547: PUSH
17548: LD_OWVAR 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 21
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: LD_INT 34
17572: PUSH
17573: LD_INT 12
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 34
17582: PUSH
17583: LD_INT 51
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 34
17592: PUSH
17593: LD_INT 32
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: ST_TO_ADDR
// if not tmp then
17616: LD_VAR 0 2
17620: NOT
17621: IFFALSE 17625
// exit ;
17623: GO 17675
// for i in tmp do
17625: LD_ADDR_VAR 0 1
17629: PUSH
17630: LD_VAR 0 2
17634: PUSH
17635: FOR_IN
17636: IFFALSE 17673
// if GetCargo ( i , mat_artifact ) = 0 then
17638: LD_VAR 0 1
17642: PPUSH
17643: LD_INT 4
17645: PPUSH
17646: CALL_OW 289
17650: PUSH
17651: LD_INT 0
17653: EQUAL
17654: IFFALSE 17671
// SetCargo ( i , mat_siberit , 100 ) ;
17656: LD_VAR 0 1
17660: PPUSH
17661: LD_INT 3
17663: PPUSH
17664: LD_INT 100
17666: PPUSH
17667: CALL_OW 290
17671: GO 17635
17673: POP
17674: POP
// end ;
17675: PPOPN 2
17677: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17678: LD_EXP 29
17682: PUSH
17683: LD_EXP 74
17687: AND
17688: IFFALSE 17871
17690: GO 17692
17692: DISABLE
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17697: LD_ADDR_VAR 0 2
17701: PUSH
17702: LD_INT 22
17704: PUSH
17705: LD_OWVAR 2
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PPUSH
17714: CALL_OW 69
17718: ST_TO_ADDR
// if not tmp then
17719: LD_VAR 0 2
17723: NOT
17724: IFFALSE 17728
// exit ;
17726: GO 17871
// for i := 1 to 2 do
17728: LD_ADDR_VAR 0 1
17732: PUSH
17733: DOUBLE
17734: LD_INT 1
17736: DEC
17737: ST_TO_ADDR
17738: LD_INT 2
17740: PUSH
17741: FOR_TO
17742: IFFALSE 17869
// begin uc_side := your_side ;
17744: LD_ADDR_OWVAR 20
17748: PUSH
17749: LD_OWVAR 2
17753: ST_TO_ADDR
// uc_nation := nation_american ;
17754: LD_ADDR_OWVAR 21
17758: PUSH
17759: LD_INT 1
17761: ST_TO_ADDR
// vc_chassis := us_morphling ;
17762: LD_ADDR_OWVAR 37
17766: PUSH
17767: LD_INT 5
17769: ST_TO_ADDR
// vc_engine := engine_siberite ;
17770: LD_ADDR_OWVAR 39
17774: PUSH
17775: LD_INT 3
17777: ST_TO_ADDR
// vc_control := control_computer ;
17778: LD_ADDR_OWVAR 38
17782: PUSH
17783: LD_INT 3
17785: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17786: LD_ADDR_OWVAR 40
17790: PUSH
17791: LD_INT 10
17793: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17794: LD_VAR 0 2
17798: PUSH
17799: LD_INT 1
17801: ARRAY
17802: PPUSH
17803: CALL_OW 310
17807: NOT
17808: IFFALSE 17855
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17810: CALL_OW 45
17814: PPUSH
17815: LD_VAR 0 2
17819: PUSH
17820: LD_INT 1
17822: ARRAY
17823: PPUSH
17824: CALL_OW 250
17828: PPUSH
17829: LD_VAR 0 2
17833: PUSH
17834: LD_INT 1
17836: ARRAY
17837: PPUSH
17838: CALL_OW 251
17842: PPUSH
17843: LD_INT 12
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: CALL_OW 50
17853: GO 17867
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17855: CALL_OW 45
17859: PPUSH
17860: LD_INT 1
17862: PPUSH
17863: CALL_OW 51
// end ;
17867: GO 17741
17869: POP
17870: POP
// end ;
17871: PPOPN 2
17873: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17874: LD_EXP 29
17878: PUSH
17879: LD_EXP 75
17883: AND
17884: IFFALSE 18106
17886: GO 17888
17888: DISABLE
17889: LD_INT 0
17891: PPUSH
17892: PPUSH
17893: PPUSH
17894: PPUSH
17895: PPUSH
17896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17897: LD_ADDR_VAR 0 6
17901: PUSH
17902: LD_INT 22
17904: PUSH
17905: LD_OWVAR 2
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 21
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 3
17926: PUSH
17927: LD_INT 23
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: PPUSH
17946: CALL_OW 69
17950: ST_TO_ADDR
// if not tmp then
17951: LD_VAR 0 6
17955: NOT
17956: IFFALSE 17960
// exit ;
17958: GO 18106
// s1 := rand ( 1 , 4 ) ;
17960: LD_ADDR_VAR 0 2
17964: PUSH
17965: LD_INT 1
17967: PPUSH
17968: LD_INT 4
17970: PPUSH
17971: CALL_OW 12
17975: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17976: LD_ADDR_VAR 0 4
17980: PUSH
17981: LD_VAR 0 6
17985: PUSH
17986: LD_INT 1
17988: ARRAY
17989: PPUSH
17990: LD_VAR 0 2
17994: PPUSH
17995: CALL_OW 259
17999: ST_TO_ADDR
// if s1 = 1 then
18000: LD_VAR 0 2
18004: PUSH
18005: LD_INT 1
18007: EQUAL
18008: IFFALSE 18028
// s2 := rand ( 2 , 4 ) else
18010: LD_ADDR_VAR 0 3
18014: PUSH
18015: LD_INT 2
18017: PPUSH
18018: LD_INT 4
18020: PPUSH
18021: CALL_OW 12
18025: ST_TO_ADDR
18026: GO 18036
// s2 := 1 ;
18028: LD_ADDR_VAR 0 3
18032: PUSH
18033: LD_INT 1
18035: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18036: LD_ADDR_VAR 0 5
18040: PUSH
18041: LD_VAR 0 6
18045: PUSH
18046: LD_INT 1
18048: ARRAY
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: CALL_OW 259
18059: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18060: LD_VAR 0 6
18064: PUSH
18065: LD_INT 1
18067: ARRAY
18068: PPUSH
18069: LD_VAR 0 2
18073: PPUSH
18074: LD_VAR 0 5
18078: PPUSH
18079: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18083: LD_VAR 0 6
18087: PUSH
18088: LD_INT 1
18090: ARRAY
18091: PPUSH
18092: LD_VAR 0 3
18096: PPUSH
18097: LD_VAR 0 4
18101: PPUSH
18102: CALL_OW 237
// end ;
18106: PPOPN 6
18108: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18109: LD_EXP 29
18113: PUSH
18114: LD_EXP 76
18118: AND
18119: IFFALSE 18198
18121: GO 18123
18123: DISABLE
18124: LD_INT 0
18126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18127: LD_ADDR_VAR 0 1
18131: PUSH
18132: LD_INT 22
18134: PUSH
18135: LD_OWVAR 2
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 30
18146: PUSH
18147: LD_INT 3
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PPUSH
18158: CALL_OW 69
18162: ST_TO_ADDR
// if not tmp then
18163: LD_VAR 0 1
18167: NOT
18168: IFFALSE 18172
// exit ;
18170: GO 18198
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18172: LD_VAR 0 1
18176: PUSH
18177: LD_INT 1
18179: PPUSH
18180: LD_VAR 0 1
18184: PPUSH
18185: CALL_OW 12
18189: ARRAY
18190: PPUSH
18191: LD_INT 1
18193: PPUSH
18194: CALL_OW 234
// end ;
18198: PPOPN 1
18200: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18201: LD_EXP 29
18205: PUSH
18206: LD_EXP 77
18210: AND
18211: IFFALSE 18323
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_INT 22
18227: PUSH
18228: LD_OWVAR 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: LD_INT 30
18242: PUSH
18243: LD_INT 27
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 30
18252: PUSH
18253: LD_INT 26
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 30
18262: PUSH
18263: LD_INT 28
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PPUSH
18280: CALL_OW 69
18284: ST_TO_ADDR
// if not tmp then
18285: LD_VAR 0 2
18289: NOT
18290: IFFALSE 18294
// exit ;
18292: GO 18323
// for i in tmp do
18294: LD_ADDR_VAR 0 1
18298: PUSH
18299: LD_VAR 0 2
18303: PUSH
18304: FOR_IN
18305: IFFALSE 18321
// SetLives ( i , 1 ) ;
18307: LD_VAR 0 1
18311: PPUSH
18312: LD_INT 1
18314: PPUSH
18315: CALL_OW 234
18319: GO 18304
18321: POP
18322: POP
// end ;
18323: PPOPN 2
18325: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18326: LD_EXP 29
18330: PUSH
18331: LD_EXP 78
18335: AND
18336: IFFALSE 18623
18338: GO 18340
18340: DISABLE
18341: LD_INT 0
18343: PPUSH
18344: PPUSH
18345: PPUSH
// begin i := rand ( 1 , 7 ) ;
18346: LD_ADDR_VAR 0 1
18350: PUSH
18351: LD_INT 1
18353: PPUSH
18354: LD_INT 7
18356: PPUSH
18357: CALL_OW 12
18361: ST_TO_ADDR
// case i of 1 :
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 1
18369: DOUBLE
18370: EQUAL
18371: IFTRUE 18375
18373: GO 18385
18375: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18376: LD_STRING earthquake(getX(game), 0, 32)
18378: PPUSH
18379: CALL_OW 559
18383: GO 18623
18385: LD_INT 2
18387: DOUBLE
18388: EQUAL
18389: IFTRUE 18393
18391: GO 18407
18393: POP
// begin ToLua ( displayStucuk(); ) ;
18394: LD_STRING displayStucuk();
18396: PPUSH
18397: CALL_OW 559
// ResetFog ;
18401: CALL_OW 335
// end ; 3 :
18405: GO 18623
18407: LD_INT 3
18409: DOUBLE
18410: EQUAL
18411: IFTRUE 18415
18413: GO 18519
18415: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18416: LD_ADDR_VAR 0 2
18420: PUSH
18421: LD_INT 22
18423: PUSH
18424: LD_OWVAR 2
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 25
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: ST_TO_ADDR
// if not tmp then
18452: LD_VAR 0 2
18456: NOT
18457: IFFALSE 18461
// exit ;
18459: GO 18623
// un := tmp [ rand ( 1 , tmp ) ] ;
18461: LD_ADDR_VAR 0 3
18465: PUSH
18466: LD_VAR 0 2
18470: PUSH
18471: LD_INT 1
18473: PPUSH
18474: LD_VAR 0 2
18478: PPUSH
18479: CALL_OW 12
18483: ARRAY
18484: ST_TO_ADDR
// if Crawls ( un ) then
18485: LD_VAR 0 3
18489: PPUSH
18490: CALL_OW 318
18494: IFFALSE 18505
// ComWalk ( un ) ;
18496: LD_VAR 0 3
18500: PPUSH
18501: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18505: LD_VAR 0 3
18509: PPUSH
18510: LD_INT 8
18512: PPUSH
18513: CALL_OW 336
// end ; 4 :
18517: GO 18623
18519: LD_INT 4
18521: DOUBLE
18522: EQUAL
18523: IFTRUE 18527
18525: GO 18601
18527: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18528: LD_ADDR_VAR 0 2
18532: PUSH
18533: LD_INT 22
18535: PUSH
18536: LD_OWVAR 2
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 30
18547: PUSH
18548: LD_INT 29
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 69
18563: ST_TO_ADDR
// if not tmp then
18564: LD_VAR 0 2
18568: NOT
18569: IFFALSE 18573
// exit ;
18571: GO 18623
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18573: LD_VAR 0 2
18577: PUSH
18578: LD_INT 1
18580: ARRAY
18581: PPUSH
18582: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18586: LD_VAR 0 2
18590: PUSH
18591: LD_INT 1
18593: ARRAY
18594: PPUSH
18595: CALL_OW 65
// end ; 5 .. 7 :
18599: GO 18623
18601: LD_INT 5
18603: DOUBLE
18604: GREATEREQUAL
18605: IFFALSE 18613
18607: LD_INT 7
18609: DOUBLE
18610: LESSEQUAL
18611: IFTRUE 18615
18613: GO 18622
18615: POP
// StreamSibBomb ; end ;
18616: CALL 14860 0 0
18620: GO 18623
18622: POP
// end ;
18623: PPOPN 3
18625: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18626: LD_EXP 29
18630: PUSH
18631: LD_EXP 79
18635: AND
18636: IFFALSE 18792
18638: GO 18640
18640: DISABLE
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
18645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18646: LD_ADDR_VAR 0 2
18650: PUSH
18651: LD_INT 81
18653: PUSH
18654: LD_OWVAR 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: LD_INT 21
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 21
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PPUSH
18695: CALL_OW 69
18699: ST_TO_ADDR
// if not tmp then
18700: LD_VAR 0 2
18704: NOT
18705: IFFALSE 18709
// exit ;
18707: GO 18792
// p := 0 ;
18709: LD_ADDR_VAR 0 3
18713: PUSH
18714: LD_INT 0
18716: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18717: LD_INT 35
18719: PPUSH
18720: CALL_OW 67
// p := p + 1 ;
18724: LD_ADDR_VAR 0 3
18728: PUSH
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 1
18736: PLUS
18737: ST_TO_ADDR
// for i in tmp do
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: LD_VAR 0 2
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18780
// if GetLives ( i ) < 1000 then
18751: LD_VAR 0 1
18755: PPUSH
18756: CALL_OW 256
18760: PUSH
18761: LD_INT 1000
18763: LESS
18764: IFFALSE 18778
// SetLives ( i , 1000 ) ;
18766: LD_VAR 0 1
18770: PPUSH
18771: LD_INT 1000
18773: PPUSH
18774: CALL_OW 234
18778: GO 18748
18780: POP
18781: POP
// until p > 20 ;
18782: LD_VAR 0 3
18786: PUSH
18787: LD_INT 20
18789: GREATER
18790: IFFALSE 18717
// end ;
18792: PPOPN 3
18794: END
// every 0 0$1 trigger StreamModeActive and sTime do
18795: LD_EXP 29
18799: PUSH
18800: LD_EXP 80
18804: AND
18805: IFFALSE 18840
18807: GO 18809
18809: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18810: LD_INT 28
18812: PPUSH
18813: LD_OWVAR 2
18817: PPUSH
18818: LD_INT 2
18820: PPUSH
18821: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18825: LD_INT 30
18827: PPUSH
18828: LD_OWVAR 2
18832: PPUSH
18833: LD_INT 2
18835: PPUSH
18836: CALL_OW 322
// end ;
18840: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18841: LD_EXP 29
18845: PUSH
18846: LD_EXP 81
18850: AND
18851: IFFALSE 18972
18853: GO 18855
18855: DISABLE
18856: LD_INT 0
18858: PPUSH
18859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18860: LD_ADDR_VAR 0 2
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_OWVAR 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 21
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 3
18889: PUSH
18890: LD_INT 23
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: ST_TO_ADDR
// if not tmp then
18914: LD_VAR 0 2
18918: NOT
18919: IFFALSE 18923
// exit ;
18921: GO 18972
// for i in tmp do
18923: LD_ADDR_VAR 0 1
18927: PUSH
18928: LD_VAR 0 2
18932: PUSH
18933: FOR_IN
18934: IFFALSE 18970
// begin if Crawls ( i ) then
18936: LD_VAR 0 1
18940: PPUSH
18941: CALL_OW 318
18945: IFFALSE 18956
// ComWalk ( i ) ;
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 138
// SetClass ( i , 2 ) ;
18956: LD_VAR 0 1
18960: PPUSH
18961: LD_INT 2
18963: PPUSH
18964: CALL_OW 336
// end ;
18968: GO 18933
18970: POP
18971: POP
// end ;
18972: PPOPN 2
18974: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18975: LD_EXP 29
18979: PUSH
18980: LD_EXP 82
18984: AND
18985: IFFALSE 19273
18987: GO 18989
18989: DISABLE
18990: LD_INT 0
18992: PPUSH
18993: PPUSH
18994: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18995: LD_OWVAR 2
18999: PPUSH
19000: LD_INT 9
19002: PPUSH
19003: LD_INT 1
19005: PPUSH
19006: LD_INT 1
19008: PPUSH
19009: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19013: LD_INT 9
19015: PPUSH
19016: LD_OWVAR 2
19020: PPUSH
19021: CALL_OW 343
// uc_side := 9 ;
19025: LD_ADDR_OWVAR 20
19029: PUSH
19030: LD_INT 9
19032: ST_TO_ADDR
// uc_nation := 2 ;
19033: LD_ADDR_OWVAR 21
19037: PUSH
19038: LD_INT 2
19040: ST_TO_ADDR
// hc_name := Dark Warrior ;
19041: LD_ADDR_OWVAR 26
19045: PUSH
19046: LD_STRING Dark Warrior
19048: ST_TO_ADDR
// hc_gallery :=  ;
19049: LD_ADDR_OWVAR 33
19053: PUSH
19054: LD_STRING 
19056: ST_TO_ADDR
// hc_noskilllimit := true ;
19057: LD_ADDR_OWVAR 76
19061: PUSH
19062: LD_INT 1
19064: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19065: LD_ADDR_OWVAR 31
19069: PUSH
19070: LD_INT 30
19072: PUSH
19073: LD_INT 30
19075: PUSH
19076: LD_INT 30
19078: PUSH
19079: LD_INT 30
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: ST_TO_ADDR
// un := CreateHuman ;
19088: LD_ADDR_VAR 0 3
19092: PUSH
19093: CALL_OW 44
19097: ST_TO_ADDR
// hc_noskilllimit := false ;
19098: LD_ADDR_OWVAR 76
19102: PUSH
19103: LD_INT 0
19105: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19106: LD_VAR 0 3
19110: PPUSH
19111: LD_INT 1
19113: PPUSH
19114: CALL_OW 51
// ToLua ( playRanger() ) ;
19118: LD_STRING playRanger()
19120: PPUSH
19121: CALL_OW 559
// p := 0 ;
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_INT 0
19132: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19133: LD_INT 35
19135: PPUSH
19136: CALL_OW 67
// p := p + 1 ;
19140: LD_ADDR_VAR 0 2
19144: PUSH
19145: LD_VAR 0 2
19149: PUSH
19150: LD_INT 1
19152: PLUS
19153: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19154: LD_VAR 0 3
19158: PPUSH
19159: CALL_OW 256
19163: PUSH
19164: LD_INT 1000
19166: LESS
19167: IFFALSE 19181
// SetLives ( un , 1000 ) ;
19169: LD_VAR 0 3
19173: PPUSH
19174: LD_INT 1000
19176: PPUSH
19177: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19181: LD_VAR 0 3
19185: PPUSH
19186: LD_INT 81
19188: PUSH
19189: LD_OWVAR 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 91
19200: PUSH
19201: LD_VAR 0 3
19205: PUSH
19206: LD_INT 30
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PPUSH
19218: CALL_OW 69
19222: PPUSH
19223: LD_VAR 0 3
19227: PPUSH
19228: CALL_OW 74
19232: PPUSH
19233: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19237: LD_VAR 0 2
19241: PUSH
19242: LD_INT 80
19244: GREATER
19245: PUSH
19246: LD_VAR 0 3
19250: PPUSH
19251: CALL_OW 301
19255: OR
19256: IFFALSE 19133
// if un then
19258: LD_VAR 0 3
19262: IFFALSE 19273
// RemoveUnit ( un ) ;
19264: LD_VAR 0 3
19268: PPUSH
19269: CALL_OW 64
// end ;
19273: PPOPN 3
19275: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19276: LD_EXP 83
19280: IFFALSE 19396
19282: GO 19284
19284: DISABLE
19285: LD_INT 0
19287: PPUSH
19288: PPUSH
19289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19290: LD_ADDR_VAR 0 2
19294: PUSH
19295: LD_INT 81
19297: PUSH
19298: LD_OWVAR 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 21
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PPUSH
19321: CALL_OW 69
19325: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19326: LD_STRING playComputer()
19328: PPUSH
19329: CALL_OW 559
// if not tmp then
19333: LD_VAR 0 2
19337: NOT
19338: IFFALSE 19342
// exit ;
19340: GO 19396
// for i in tmp do
19342: LD_ADDR_VAR 0 1
19346: PUSH
19347: LD_VAR 0 2
19351: PUSH
19352: FOR_IN
19353: IFFALSE 19394
// for j := 1 to 4 do
19355: LD_ADDR_VAR 0 3
19359: PUSH
19360: DOUBLE
19361: LD_INT 1
19363: DEC
19364: ST_TO_ADDR
19365: LD_INT 4
19367: PUSH
19368: FOR_TO
19369: IFFALSE 19390
// SetSkill ( i , j , 10 ) ;
19371: LD_VAR 0 1
19375: PPUSH
19376: LD_VAR 0 3
19380: PPUSH
19381: LD_INT 10
19383: PPUSH
19384: CALL_OW 237
19388: GO 19368
19390: POP
19391: POP
19392: GO 19352
19394: POP
19395: POP
// end ;
19396: PPOPN 3
19398: END
// every 0 0$1 trigger s30 do var i , tmp ;
19399: LD_EXP 84
19403: IFFALSE 19472
19405: GO 19407
19407: DISABLE
19408: LD_INT 0
19410: PPUSH
19411: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19412: LD_ADDR_VAR 0 2
19416: PUSH
19417: LD_INT 22
19419: PUSH
19420: LD_OWVAR 2
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PPUSH
19429: CALL_OW 69
19433: ST_TO_ADDR
// if not tmp then
19434: LD_VAR 0 2
19438: NOT
19439: IFFALSE 19443
// exit ;
19441: GO 19472
// for i in tmp do
19443: LD_ADDR_VAR 0 1
19447: PUSH
19448: LD_VAR 0 2
19452: PUSH
19453: FOR_IN
19454: IFFALSE 19470
// SetLives ( i , 300 ) ;
19456: LD_VAR 0 1
19460: PPUSH
19461: LD_INT 300
19463: PPUSH
19464: CALL_OW 234
19468: GO 19453
19470: POP
19471: POP
// end ;
19472: PPOPN 2
19474: END
// every 0 0$1 trigger s60 do var i , tmp ;
19475: LD_EXP 85
19479: IFFALSE 19548
19481: GO 19483
19483: DISABLE
19484: LD_INT 0
19486: PPUSH
19487: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19488: LD_ADDR_VAR 0 2
19492: PUSH
19493: LD_INT 22
19495: PUSH
19496: LD_OWVAR 2
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PPUSH
19505: CALL_OW 69
19509: ST_TO_ADDR
// if not tmp then
19510: LD_VAR 0 2
19514: NOT
19515: IFFALSE 19519
// exit ;
19517: GO 19548
// for i in tmp do
19519: LD_ADDR_VAR 0 1
19523: PUSH
19524: LD_VAR 0 2
19528: PUSH
19529: FOR_IN
19530: IFFALSE 19546
// SetLives ( i , 600 ) ;
19532: LD_VAR 0 1
19536: PPUSH
19537: LD_INT 600
19539: PPUSH
19540: CALL_OW 234
19544: GO 19529
19546: POP
19547: POP
// end ;
19548: PPOPN 2
19550: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19551: LD_INT 0
19553: PPUSH
// case cmd of 301 :
19554: LD_VAR 0 1
19558: PUSH
19559: LD_INT 301
19561: DOUBLE
19562: EQUAL
19563: IFTRUE 19567
19565: GO 19599
19567: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19568: LD_VAR 0 6
19572: PPUSH
19573: LD_VAR 0 7
19577: PPUSH
19578: LD_VAR 0 8
19582: PPUSH
19583: LD_VAR 0 4
19587: PPUSH
19588: LD_VAR 0 5
19592: PPUSH
19593: CALL 20808 0 5
19597: GO 19720
19599: LD_INT 302
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19644
19607: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19608: LD_VAR 0 6
19612: PPUSH
19613: LD_VAR 0 7
19617: PPUSH
19618: LD_VAR 0 8
19622: PPUSH
19623: LD_VAR 0 9
19627: PPUSH
19628: LD_VAR 0 4
19632: PPUSH
19633: LD_VAR 0 5
19637: PPUSH
19638: CALL 20899 0 6
19642: GO 19720
19644: LD_INT 303
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19689
19652: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19653: LD_VAR 0 6
19657: PPUSH
19658: LD_VAR 0 7
19662: PPUSH
19663: LD_VAR 0 8
19667: PPUSH
19668: LD_VAR 0 9
19672: PPUSH
19673: LD_VAR 0 4
19677: PPUSH
19678: LD_VAR 0 5
19682: PPUSH
19683: CALL 19725 0 6
19687: GO 19720
19689: LD_INT 304
19691: DOUBLE
19692: EQUAL
19693: IFTRUE 19697
19695: GO 19719
19697: POP
// hHackTeleport ( unit , x , y ) ; end ;
19698: LD_VAR 0 2
19702: PPUSH
19703: LD_VAR 0 4
19707: PPUSH
19708: LD_VAR 0 5
19712: PPUSH
19713: CALL 21492 0 3
19717: GO 19720
19719: POP
// end ;
19720: LD_VAR 0 12
19724: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19725: LD_INT 0
19727: PPUSH
19728: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19729: LD_VAR 0 1
19733: PUSH
19734: LD_INT 1
19736: LESS
19737: PUSH
19738: LD_VAR 0 1
19742: PUSH
19743: LD_INT 3
19745: GREATER
19746: OR
19747: PUSH
19748: LD_VAR 0 5
19752: PPUSH
19753: LD_VAR 0 6
19757: PPUSH
19758: CALL_OW 428
19762: OR
19763: IFFALSE 19767
// exit ;
19765: GO 20495
// uc_side := your_side ;
19767: LD_ADDR_OWVAR 20
19771: PUSH
19772: LD_OWVAR 2
19776: ST_TO_ADDR
// uc_nation := nation ;
19777: LD_ADDR_OWVAR 21
19781: PUSH
19782: LD_VAR 0 1
19786: ST_TO_ADDR
// bc_level = 1 ;
19787: LD_ADDR_OWVAR 43
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
// case btype of 1 :
19795: LD_VAR 0 2
19799: PUSH
19800: LD_INT 1
19802: DOUBLE
19803: EQUAL
19804: IFTRUE 19808
19806: GO 19819
19808: POP
// bc_type := b_depot ; 2 :
19809: LD_ADDR_OWVAR 42
19813: PUSH
19814: LD_INT 0
19816: ST_TO_ADDR
19817: GO 20439
19819: LD_INT 2
19821: DOUBLE
19822: EQUAL
19823: IFTRUE 19827
19825: GO 19838
19827: POP
// bc_type := b_warehouse ; 3 :
19828: LD_ADDR_OWVAR 42
19832: PUSH
19833: LD_INT 1
19835: ST_TO_ADDR
19836: GO 20439
19838: LD_INT 3
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19857
19846: POP
// bc_type := b_lab ; 4 .. 9 :
19847: LD_ADDR_OWVAR 42
19851: PUSH
19852: LD_INT 6
19854: ST_TO_ADDR
19855: GO 20439
19857: LD_INT 4
19859: DOUBLE
19860: GREATEREQUAL
19861: IFFALSE 19869
19863: LD_INT 9
19865: DOUBLE
19866: LESSEQUAL
19867: IFTRUE 19871
19869: GO 19931
19871: POP
// begin bc_type := b_lab_half ;
19872: LD_ADDR_OWVAR 42
19876: PUSH
19877: LD_INT 7
19879: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19880: LD_ADDR_OWVAR 44
19884: PUSH
19885: LD_INT 10
19887: PUSH
19888: LD_INT 11
19890: PUSH
19891: LD_INT 12
19893: PUSH
19894: LD_INT 15
19896: PUSH
19897: LD_INT 14
19899: PUSH
19900: LD_INT 13
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: PUSH
19911: LD_VAR 0 2
19915: PUSH
19916: LD_INT 3
19918: MINUS
19919: ARRAY
19920: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19921: LD_ADDR_OWVAR 45
19925: PUSH
19926: LD_INT 9
19928: ST_TO_ADDR
// end ; 10 .. 13 :
19929: GO 20439
19931: LD_INT 10
19933: DOUBLE
19934: GREATEREQUAL
19935: IFFALSE 19943
19937: LD_INT 13
19939: DOUBLE
19940: LESSEQUAL
19941: IFTRUE 19945
19943: GO 20022
19945: POP
// begin bc_type := b_lab_full ;
19946: LD_ADDR_OWVAR 42
19950: PUSH
19951: LD_INT 8
19953: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19954: LD_ADDR_OWVAR 44
19958: PUSH
19959: LD_INT 10
19961: PUSH
19962: LD_INT 12
19964: PUSH
19965: LD_INT 14
19967: PUSH
19968: LD_INT 13
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: PUSH
19977: LD_VAR 0 2
19981: PUSH
19982: LD_INT 9
19984: MINUS
19985: ARRAY
19986: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19987: LD_ADDR_OWVAR 45
19991: PUSH
19992: LD_INT 11
19994: PUSH
19995: LD_INT 15
19997: PUSH
19998: LD_INT 12
20000: PUSH
20001: LD_INT 15
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: LD_VAR 0 2
20014: PUSH
20015: LD_INT 9
20017: MINUS
20018: ARRAY
20019: ST_TO_ADDR
// end ; 14 :
20020: GO 20439
20022: LD_INT 14
20024: DOUBLE
20025: EQUAL
20026: IFTRUE 20030
20028: GO 20041
20030: POP
// bc_type := b_workshop ; 15 :
20031: LD_ADDR_OWVAR 42
20035: PUSH
20036: LD_INT 2
20038: ST_TO_ADDR
20039: GO 20439
20041: LD_INT 15
20043: DOUBLE
20044: EQUAL
20045: IFTRUE 20049
20047: GO 20060
20049: POP
// bc_type := b_factory ; 16 :
20050: LD_ADDR_OWVAR 42
20054: PUSH
20055: LD_INT 3
20057: ST_TO_ADDR
20058: GO 20439
20060: LD_INT 16
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20079
20068: POP
// bc_type := b_ext_gun ; 17 :
20069: LD_ADDR_OWVAR 42
20073: PUSH
20074: LD_INT 17
20076: ST_TO_ADDR
20077: GO 20439
20079: LD_INT 17
20081: DOUBLE
20082: EQUAL
20083: IFTRUE 20087
20085: GO 20115
20087: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20088: LD_ADDR_OWVAR 42
20092: PUSH
20093: LD_INT 19
20095: PUSH
20096: LD_INT 23
20098: PUSH
20099: LD_INT 19
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: PUSH
20107: LD_VAR 0 1
20111: ARRAY
20112: ST_TO_ADDR
20113: GO 20439
20115: LD_INT 18
20117: DOUBLE
20118: EQUAL
20119: IFTRUE 20123
20121: GO 20134
20123: POP
// bc_type := b_ext_radar ; 19 :
20124: LD_ADDR_OWVAR 42
20128: PUSH
20129: LD_INT 20
20131: ST_TO_ADDR
20132: GO 20439
20134: LD_INT 19
20136: DOUBLE
20137: EQUAL
20138: IFTRUE 20142
20140: GO 20153
20142: POP
// bc_type := b_ext_radio ; 20 :
20143: LD_ADDR_OWVAR 42
20147: PUSH
20148: LD_INT 22
20150: ST_TO_ADDR
20151: GO 20439
20153: LD_INT 20
20155: DOUBLE
20156: EQUAL
20157: IFTRUE 20161
20159: GO 20172
20161: POP
// bc_type := b_ext_siberium ; 21 :
20162: LD_ADDR_OWVAR 42
20166: PUSH
20167: LD_INT 21
20169: ST_TO_ADDR
20170: GO 20439
20172: LD_INT 21
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20191
20180: POP
// bc_type := b_ext_computer ; 22 :
20181: LD_ADDR_OWVAR 42
20185: PUSH
20186: LD_INT 24
20188: ST_TO_ADDR
20189: GO 20439
20191: LD_INT 22
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20210
20199: POP
// bc_type := b_ext_track ; 23 :
20200: LD_ADDR_OWVAR 42
20204: PUSH
20205: LD_INT 16
20207: ST_TO_ADDR
20208: GO 20439
20210: LD_INT 23
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20229
20218: POP
// bc_type := b_ext_laser ; 24 :
20219: LD_ADDR_OWVAR 42
20223: PUSH
20224: LD_INT 25
20226: ST_TO_ADDR
20227: GO 20439
20229: LD_INT 24
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20248
20237: POP
// bc_type := b_control_tower ; 25 :
20238: LD_ADDR_OWVAR 42
20242: PUSH
20243: LD_INT 36
20245: ST_TO_ADDR
20246: GO 20439
20248: LD_INT 25
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20267
20256: POP
// bc_type := b_breastwork ; 26 :
20257: LD_ADDR_OWVAR 42
20261: PUSH
20262: LD_INT 31
20264: ST_TO_ADDR
20265: GO 20439
20267: LD_INT 26
20269: DOUBLE
20270: EQUAL
20271: IFTRUE 20275
20273: GO 20286
20275: POP
// bc_type := b_bunker ; 27 :
20276: LD_ADDR_OWVAR 42
20280: PUSH
20281: LD_INT 32
20283: ST_TO_ADDR
20284: GO 20439
20286: LD_INT 27
20288: DOUBLE
20289: EQUAL
20290: IFTRUE 20294
20292: GO 20305
20294: POP
// bc_type := b_turret ; 28 :
20295: LD_ADDR_OWVAR 42
20299: PUSH
20300: LD_INT 33
20302: ST_TO_ADDR
20303: GO 20439
20305: LD_INT 28
20307: DOUBLE
20308: EQUAL
20309: IFTRUE 20313
20311: GO 20324
20313: POP
// bc_type := b_armoury ; 29 :
20314: LD_ADDR_OWVAR 42
20318: PUSH
20319: LD_INT 4
20321: ST_TO_ADDR
20322: GO 20439
20324: LD_INT 29
20326: DOUBLE
20327: EQUAL
20328: IFTRUE 20332
20330: GO 20343
20332: POP
// bc_type := b_barracks ; 30 :
20333: LD_ADDR_OWVAR 42
20337: PUSH
20338: LD_INT 5
20340: ST_TO_ADDR
20341: GO 20439
20343: LD_INT 30
20345: DOUBLE
20346: EQUAL
20347: IFTRUE 20351
20349: GO 20362
20351: POP
// bc_type := b_solar_power ; 31 :
20352: LD_ADDR_OWVAR 42
20356: PUSH
20357: LD_INT 27
20359: ST_TO_ADDR
20360: GO 20439
20362: LD_INT 31
20364: DOUBLE
20365: EQUAL
20366: IFTRUE 20370
20368: GO 20381
20370: POP
// bc_type := b_oil_power ; 32 :
20371: LD_ADDR_OWVAR 42
20375: PUSH
20376: LD_INT 26
20378: ST_TO_ADDR
20379: GO 20439
20381: LD_INT 32
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20400
20389: POP
// bc_type := b_siberite_power ; 33 :
20390: LD_ADDR_OWVAR 42
20394: PUSH
20395: LD_INT 28
20397: ST_TO_ADDR
20398: GO 20439
20400: LD_INT 33
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20419
20408: POP
// bc_type := b_oil_mine ; 34 :
20409: LD_ADDR_OWVAR 42
20413: PUSH
20414: LD_INT 29
20416: ST_TO_ADDR
20417: GO 20439
20419: LD_INT 34
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20438
20427: POP
// bc_type := b_siberite_mine ; end ;
20428: LD_ADDR_OWVAR 42
20432: PUSH
20433: LD_INT 30
20435: ST_TO_ADDR
20436: GO 20439
20438: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20439: LD_ADDR_VAR 0 8
20443: PUSH
20444: LD_VAR 0 5
20448: PPUSH
20449: LD_VAR 0 6
20453: PPUSH
20454: LD_VAR 0 3
20458: PPUSH
20459: CALL_OW 47
20463: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20464: LD_OWVAR 42
20468: PUSH
20469: LD_INT 32
20471: PUSH
20472: LD_INT 33
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: IN
20479: IFFALSE 20495
// PlaceWeaponTurret ( b , weapon ) ;
20481: LD_VAR 0 8
20485: PPUSH
20486: LD_VAR 0 4
20490: PPUSH
20491: CALL_OW 431
// end ;
20495: LD_VAR 0 7
20499: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20500: LD_INT 0
20502: PPUSH
20503: PPUSH
20504: PPUSH
20505: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20506: LD_ADDR_VAR 0 4
20510: PUSH
20511: LD_INT 22
20513: PUSH
20514: LD_OWVAR 2
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 30
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 30
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 69
20559: ST_TO_ADDR
// if not tmp then
20560: LD_VAR 0 4
20564: NOT
20565: IFFALSE 20569
// exit ;
20567: GO 20628
// for i in tmp do
20569: LD_ADDR_VAR 0 2
20573: PUSH
20574: LD_VAR 0 4
20578: PUSH
20579: FOR_IN
20580: IFFALSE 20626
// for j = 1 to 3 do
20582: LD_ADDR_VAR 0 3
20586: PUSH
20587: DOUBLE
20588: LD_INT 1
20590: DEC
20591: ST_TO_ADDR
20592: LD_INT 3
20594: PUSH
20595: FOR_TO
20596: IFFALSE 20622
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: CALL_OW 274
20607: PPUSH
20608: LD_VAR 0 3
20612: PPUSH
20613: LD_INT 99999
20615: PPUSH
20616: CALL_OW 277
20620: GO 20595
20622: POP
20623: POP
20624: GO 20579
20626: POP
20627: POP
// end ;
20628: LD_VAR 0 1
20632: RET
// export function hHackSetLevel10 ; var i , j ; begin
20633: LD_INT 0
20635: PPUSH
20636: PPUSH
20637: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20638: LD_ADDR_VAR 0 2
20642: PUSH
20643: LD_INT 21
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PPUSH
20653: CALL_OW 69
20657: PUSH
20658: FOR_IN
20659: IFFALSE 20711
// if IsSelected ( i ) then
20661: LD_VAR 0 2
20665: PPUSH
20666: CALL_OW 306
20670: IFFALSE 20709
// begin for j := 1 to 4 do
20672: LD_ADDR_VAR 0 3
20676: PUSH
20677: DOUBLE
20678: LD_INT 1
20680: DEC
20681: ST_TO_ADDR
20682: LD_INT 4
20684: PUSH
20685: FOR_TO
20686: IFFALSE 20707
// SetSkill ( i , j , 10 ) ;
20688: LD_VAR 0 2
20692: PPUSH
20693: LD_VAR 0 3
20697: PPUSH
20698: LD_INT 10
20700: PPUSH
20701: CALL_OW 237
20705: GO 20685
20707: POP
20708: POP
// end ;
20709: GO 20658
20711: POP
20712: POP
// end ;
20713: LD_VAR 0 1
20717: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20718: LD_INT 0
20720: PPUSH
20721: PPUSH
20722: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20723: LD_ADDR_VAR 0 2
20727: PUSH
20728: LD_INT 22
20730: PUSH
20731: LD_OWVAR 2
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 21
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: PUSH
20759: FOR_IN
20760: IFFALSE 20801
// begin for j := 1 to 4 do
20762: LD_ADDR_VAR 0 3
20766: PUSH
20767: DOUBLE
20768: LD_INT 1
20770: DEC
20771: ST_TO_ADDR
20772: LD_INT 4
20774: PUSH
20775: FOR_TO
20776: IFFALSE 20797
// SetSkill ( i , j , 10 ) ;
20778: LD_VAR 0 2
20782: PPUSH
20783: LD_VAR 0 3
20787: PPUSH
20788: LD_INT 10
20790: PPUSH
20791: CALL_OW 237
20795: GO 20775
20797: POP
20798: POP
// end ;
20799: GO 20759
20801: POP
20802: POP
// end ;
20803: LD_VAR 0 1
20807: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20808: LD_INT 0
20810: PPUSH
// uc_side := your_side ;
20811: LD_ADDR_OWVAR 20
20815: PUSH
20816: LD_OWVAR 2
20820: ST_TO_ADDR
// uc_nation := nation ;
20821: LD_ADDR_OWVAR 21
20825: PUSH
20826: LD_VAR 0 1
20830: ST_TO_ADDR
// InitHc ;
20831: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20835: LD_INT 0
20837: PPUSH
20838: LD_VAR 0 2
20842: PPUSH
20843: LD_VAR 0 3
20847: PPUSH
20848: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20852: LD_VAR 0 4
20856: PPUSH
20857: LD_VAR 0 5
20861: PPUSH
20862: CALL_OW 428
20866: PUSH
20867: LD_INT 0
20869: EQUAL
20870: IFFALSE 20894
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20872: CALL_OW 44
20876: PPUSH
20877: LD_VAR 0 4
20881: PPUSH
20882: LD_VAR 0 5
20886: PPUSH
20887: LD_INT 1
20889: PPUSH
20890: CALL_OW 48
// end ;
20894: LD_VAR 0 6
20898: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20899: LD_INT 0
20901: PPUSH
20902: PPUSH
// uc_side := your_side ;
20903: LD_ADDR_OWVAR 20
20907: PUSH
20908: LD_OWVAR 2
20912: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20913: LD_VAR 0 1
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 3
20926: PUSH
20927: LD_INT 4
20929: PUSH
20930: LD_INT 5
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: IN
20940: IFFALSE 20952
// uc_nation := nation_american else
20942: LD_ADDR_OWVAR 21
20946: PUSH
20947: LD_INT 1
20949: ST_TO_ADDR
20950: GO 20995
// if chassis in [ 11 , 12 , 13 , 14 ] then
20952: LD_VAR 0 1
20956: PUSH
20957: LD_INT 11
20959: PUSH
20960: LD_INT 12
20962: PUSH
20963: LD_INT 13
20965: PUSH
20966: LD_INT 14
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: IN
20975: IFFALSE 20987
// uc_nation := nation_arabian else
20977: LD_ADDR_OWVAR 21
20981: PUSH
20982: LD_INT 2
20984: ST_TO_ADDR
20985: GO 20995
// uc_nation := nation_russian ;
20987: LD_ADDR_OWVAR 21
20991: PUSH
20992: LD_INT 3
20994: ST_TO_ADDR
// vc_chassis := chassis ;
20995: LD_ADDR_OWVAR 37
20999: PUSH
21000: LD_VAR 0 1
21004: ST_TO_ADDR
// vc_engine := engine ;
21005: LD_ADDR_OWVAR 39
21009: PUSH
21010: LD_VAR 0 2
21014: ST_TO_ADDR
// vc_control := control ;
21015: LD_ADDR_OWVAR 38
21019: PUSH
21020: LD_VAR 0 3
21024: ST_TO_ADDR
// vc_weapon := weapon ;
21025: LD_ADDR_OWVAR 40
21029: PUSH
21030: LD_VAR 0 4
21034: ST_TO_ADDR
// un := CreateVehicle ;
21035: LD_ADDR_VAR 0 8
21039: PUSH
21040: CALL_OW 45
21044: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21045: LD_VAR 0 8
21049: PPUSH
21050: LD_INT 0
21052: PPUSH
21053: LD_INT 5
21055: PPUSH
21056: CALL_OW 12
21060: PPUSH
21061: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21065: LD_VAR 0 8
21069: PPUSH
21070: LD_VAR 0 5
21074: PPUSH
21075: LD_VAR 0 6
21079: PPUSH
21080: LD_INT 1
21082: PPUSH
21083: CALL_OW 48
// end ;
21087: LD_VAR 0 7
21091: RET
// export hInvincible ; every 1 do
21092: GO 21094
21094: DISABLE
// hInvincible := [ ] ;
21095: LD_ADDR_EXP 86
21099: PUSH
21100: EMPTY
21101: ST_TO_ADDR
21102: END
// every 10 do var i ;
21103: GO 21105
21105: DISABLE
21106: LD_INT 0
21108: PPUSH
// begin enable ;
21109: ENABLE
// if not hInvincible then
21110: LD_EXP 86
21114: NOT
21115: IFFALSE 21119
// exit ;
21117: GO 21163
// for i in hInvincible do
21119: LD_ADDR_VAR 0 1
21123: PUSH
21124: LD_EXP 86
21128: PUSH
21129: FOR_IN
21130: IFFALSE 21161
// if GetLives ( i ) < 1000 then
21132: LD_VAR 0 1
21136: PPUSH
21137: CALL_OW 256
21141: PUSH
21142: LD_INT 1000
21144: LESS
21145: IFFALSE 21159
// SetLives ( i , 1000 ) ;
21147: LD_VAR 0 1
21151: PPUSH
21152: LD_INT 1000
21154: PPUSH
21155: CALL_OW 234
21159: GO 21129
21161: POP
21162: POP
// end ;
21163: PPOPN 1
21165: END
// export function hHackInvincible ; var i ; begin
21166: LD_INT 0
21168: PPUSH
21169: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21170: LD_ADDR_VAR 0 2
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 21
21180: PUSH
21181: LD_INT 1
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 21
21190: PUSH
21191: LD_INT 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 69
21207: PUSH
21208: FOR_IN
21209: IFFALSE 21270
// if IsSelected ( i ) then
21211: LD_VAR 0 2
21215: PPUSH
21216: CALL_OW 306
21220: IFFALSE 21268
// begin if i in hInvincible then
21222: LD_VAR 0 2
21226: PUSH
21227: LD_EXP 86
21231: IN
21232: IFFALSE 21252
// hInvincible := hInvincible diff i else
21234: LD_ADDR_EXP 86
21238: PUSH
21239: LD_EXP 86
21243: PUSH
21244: LD_VAR 0 2
21248: DIFF
21249: ST_TO_ADDR
21250: GO 21268
// hInvincible := hInvincible union i ;
21252: LD_ADDR_EXP 86
21256: PUSH
21257: LD_EXP 86
21261: PUSH
21262: LD_VAR 0 2
21266: UNION
21267: ST_TO_ADDR
// end ;
21268: GO 21208
21270: POP
21271: POP
// end ;
21272: LD_VAR 0 1
21276: RET
// export function hHackInvisible ; var i , j ; begin
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
21281: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21282: LD_ADDR_VAR 0 2
21286: PUSH
21287: LD_INT 21
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PPUSH
21297: CALL_OW 69
21301: PUSH
21302: FOR_IN
21303: IFFALSE 21327
// if IsSelected ( i ) then
21305: LD_VAR 0 2
21309: PPUSH
21310: CALL_OW 306
21314: IFFALSE 21325
// ComForceInvisible ( i ) ;
21316: LD_VAR 0 2
21320: PPUSH
21321: CALL_OW 496
21325: GO 21302
21327: POP
21328: POP
// end ;
21329: LD_VAR 0 1
21333: RET
// export function hHackChangeYourSide ; begin
21334: LD_INT 0
21336: PPUSH
// if your_side = 8 then
21337: LD_OWVAR 2
21341: PUSH
21342: LD_INT 8
21344: EQUAL
21345: IFFALSE 21357
// your_side := 0 else
21347: LD_ADDR_OWVAR 2
21351: PUSH
21352: LD_INT 0
21354: ST_TO_ADDR
21355: GO 21371
// your_side := your_side + 1 ;
21357: LD_ADDR_OWVAR 2
21361: PUSH
21362: LD_OWVAR 2
21366: PUSH
21367: LD_INT 1
21369: PLUS
21370: ST_TO_ADDR
// end ;
21371: LD_VAR 0 1
21375: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21376: LD_INT 0
21378: PPUSH
21379: PPUSH
21380: PPUSH
// for i in all_units do
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_OWVAR 3
21390: PUSH
21391: FOR_IN
21392: IFFALSE 21470
// if IsSelected ( i ) then
21394: LD_VAR 0 2
21398: PPUSH
21399: CALL_OW 306
21403: IFFALSE 21468
// begin j := GetSide ( i ) ;
21405: LD_ADDR_VAR 0 3
21409: PUSH
21410: LD_VAR 0 2
21414: PPUSH
21415: CALL_OW 255
21419: ST_TO_ADDR
// if j = 8 then
21420: LD_VAR 0 3
21424: PUSH
21425: LD_INT 8
21427: EQUAL
21428: IFFALSE 21440
// j := 0 else
21430: LD_ADDR_VAR 0 3
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
21438: GO 21454
// j := j + 1 ;
21440: LD_ADDR_VAR 0 3
21444: PUSH
21445: LD_VAR 0 3
21449: PUSH
21450: LD_INT 1
21452: PLUS
21453: ST_TO_ADDR
// SetSide ( i , j ) ;
21454: LD_VAR 0 2
21458: PPUSH
21459: LD_VAR 0 3
21463: PPUSH
21464: CALL_OW 235
// end ;
21468: GO 21391
21470: POP
21471: POP
// end ;
21472: LD_VAR 0 1
21476: RET
// export function hHackFog ; begin
21477: LD_INT 0
21479: PPUSH
// FogOff ( true ) ;
21480: LD_INT 1
21482: PPUSH
21483: CALL_OW 344
// end ;
21487: LD_VAR 0 1
21491: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21492: LD_INT 0
21494: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21495: LD_VAR 0 1
21499: PPUSH
21500: LD_VAR 0 2
21504: PPUSH
21505: LD_VAR 0 3
21509: PPUSH
21510: LD_INT 1
21512: PPUSH
21513: LD_INT 1
21515: PPUSH
21516: CALL_OW 483
// CenterOnXY ( x , y ) ;
21520: LD_VAR 0 2
21524: PPUSH
21525: LD_VAR 0 3
21529: PPUSH
21530: CALL_OW 84
// end ;
21534: LD_VAR 0 4
21538: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21539: LD_INT 0
21541: PPUSH
21542: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21543: LD_VAR 0 1
21547: NOT
21548: PUSH
21549: LD_VAR 0 2
21553: PPUSH
21554: LD_VAR 0 3
21558: PPUSH
21559: CALL_OW 488
21563: NOT
21564: OR
21565: PUSH
21566: LD_VAR 0 1
21570: PPUSH
21571: CALL_OW 266
21575: PUSH
21576: LD_INT 3
21578: NONEQUAL
21579: PUSH
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL_OW 247
21589: PUSH
21590: LD_INT 1
21592: EQUAL
21593: NOT
21594: AND
21595: OR
21596: IFFALSE 21600
// exit ;
21598: GO 21749
// if GetType ( factory ) = unit_human then
21600: LD_VAR 0 1
21604: PPUSH
21605: CALL_OW 247
21609: PUSH
21610: LD_INT 1
21612: EQUAL
21613: IFFALSE 21630
// factory := IsInUnit ( factory ) ;
21615: LD_ADDR_VAR 0 1
21619: PUSH
21620: LD_VAR 0 1
21624: PPUSH
21625: CALL_OW 310
21629: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21630: LD_VAR 0 1
21634: PPUSH
21635: CALL_OW 266
21639: PUSH
21640: LD_INT 3
21642: NONEQUAL
21643: IFFALSE 21647
// exit ;
21645: GO 21749
// if HexInfo ( x , y ) = factory then
21647: LD_VAR 0 2
21651: PPUSH
21652: LD_VAR 0 3
21656: PPUSH
21657: CALL_OW 428
21661: PUSH
21662: LD_VAR 0 1
21666: EQUAL
21667: IFFALSE 21694
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21669: LD_ADDR_EXP 87
21673: PUSH
21674: LD_EXP 87
21678: PPUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: LD_INT 0
21686: PPUSH
21687: CALL_OW 1
21691: ST_TO_ADDR
21692: GO 21745
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21694: LD_ADDR_EXP 87
21698: PUSH
21699: LD_EXP 87
21703: PPUSH
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_VAR 0 1
21713: PPUSH
21714: CALL_OW 255
21718: PUSH
21719: LD_VAR 0 1
21723: PUSH
21724: LD_VAR 0 2
21728: PUSH
21729: LD_VAR 0 3
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PPUSH
21740: CALL_OW 1
21744: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21745: CALL 21754 0 0
// end ;
21749: LD_VAR 0 4
21753: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21754: LD_INT 0
21756: PPUSH
21757: PPUSH
21758: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21759: LD_STRING resetFactoryWaypoint();
21761: PPUSH
21762: CALL_OW 559
// if factoryWaypoints then
21766: LD_EXP 87
21770: IFFALSE 21896
// begin list := PrepareArray ( factoryWaypoints ) ;
21772: LD_ADDR_VAR 0 3
21776: PUSH
21777: LD_EXP 87
21781: PPUSH
21782: CALL 69193 0 1
21786: ST_TO_ADDR
// for i := 1 to list do
21787: LD_ADDR_VAR 0 2
21791: PUSH
21792: DOUBLE
21793: LD_INT 1
21795: DEC
21796: ST_TO_ADDR
21797: LD_VAR 0 3
21801: PUSH
21802: FOR_TO
21803: IFFALSE 21894
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21805: LD_STRING setFactoryWaypointXY(
21807: PUSH
21808: LD_VAR 0 3
21812: PUSH
21813: LD_VAR 0 2
21817: ARRAY
21818: PUSH
21819: LD_INT 1
21821: ARRAY
21822: STR
21823: PUSH
21824: LD_STRING ,
21826: STR
21827: PUSH
21828: LD_VAR 0 3
21832: PUSH
21833: LD_VAR 0 2
21837: ARRAY
21838: PUSH
21839: LD_INT 2
21841: ARRAY
21842: STR
21843: PUSH
21844: LD_STRING ,
21846: STR
21847: PUSH
21848: LD_VAR 0 3
21852: PUSH
21853: LD_VAR 0 2
21857: ARRAY
21858: PUSH
21859: LD_INT 3
21861: ARRAY
21862: STR
21863: PUSH
21864: LD_STRING ,
21866: STR
21867: PUSH
21868: LD_VAR 0 3
21872: PUSH
21873: LD_VAR 0 2
21877: ARRAY
21878: PUSH
21879: LD_INT 4
21881: ARRAY
21882: STR
21883: PUSH
21884: LD_STRING )
21886: STR
21887: PPUSH
21888: CALL_OW 559
21892: GO 21802
21894: POP
21895: POP
// end ; end ;
21896: LD_VAR 0 1
21900: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21901: LD_INT 0
21903: PPUSH
// if HexInfo ( x , y ) = warehouse then
21904: LD_VAR 0 2
21908: PPUSH
21909: LD_VAR 0 3
21913: PPUSH
21914: CALL_OW 428
21918: PUSH
21919: LD_VAR 0 1
21923: EQUAL
21924: IFFALSE 21951
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21926: LD_ADDR_EXP 88
21930: PUSH
21931: LD_EXP 88
21935: PPUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: LD_INT 0
21943: PPUSH
21944: CALL_OW 1
21948: ST_TO_ADDR
21949: GO 22002
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21951: LD_ADDR_EXP 88
21955: PUSH
21956: LD_EXP 88
21960: PPUSH
21961: LD_VAR 0 1
21965: PPUSH
21966: LD_VAR 0 1
21970: PPUSH
21971: CALL_OW 255
21975: PUSH
21976: LD_VAR 0 1
21980: PUSH
21981: LD_VAR 0 2
21985: PUSH
21986: LD_VAR 0 3
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: PPUSH
21997: CALL_OW 1
22001: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22002: CALL 22011 0 0
// end ;
22006: LD_VAR 0 4
22010: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22011: LD_INT 0
22013: PPUSH
22014: PPUSH
22015: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22016: LD_STRING resetWarehouseGatheringPoints();
22018: PPUSH
22019: CALL_OW 559
// if warehouseGatheringPoints then
22023: LD_EXP 88
22027: IFFALSE 22153
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22029: LD_ADDR_VAR 0 3
22033: PUSH
22034: LD_EXP 88
22038: PPUSH
22039: CALL 69193 0 1
22043: ST_TO_ADDR
// for i := 1 to list do
22044: LD_ADDR_VAR 0 2
22048: PUSH
22049: DOUBLE
22050: LD_INT 1
22052: DEC
22053: ST_TO_ADDR
22054: LD_VAR 0 3
22058: PUSH
22059: FOR_TO
22060: IFFALSE 22151
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22062: LD_STRING setWarehouseGatheringPointXY(
22064: PUSH
22065: LD_VAR 0 3
22069: PUSH
22070: LD_VAR 0 2
22074: ARRAY
22075: PUSH
22076: LD_INT 1
22078: ARRAY
22079: STR
22080: PUSH
22081: LD_STRING ,
22083: STR
22084: PUSH
22085: LD_VAR 0 3
22089: PUSH
22090: LD_VAR 0 2
22094: ARRAY
22095: PUSH
22096: LD_INT 2
22098: ARRAY
22099: STR
22100: PUSH
22101: LD_STRING ,
22103: STR
22104: PUSH
22105: LD_VAR 0 3
22109: PUSH
22110: LD_VAR 0 2
22114: ARRAY
22115: PUSH
22116: LD_INT 3
22118: ARRAY
22119: STR
22120: PUSH
22121: LD_STRING ,
22123: STR
22124: PUSH
22125: LD_VAR 0 3
22129: PUSH
22130: LD_VAR 0 2
22134: ARRAY
22135: PUSH
22136: LD_INT 4
22138: ARRAY
22139: STR
22140: PUSH
22141: LD_STRING )
22143: STR
22144: PPUSH
22145: CALL_OW 559
22149: GO 22059
22151: POP
22152: POP
// end ; end ;
22153: LD_VAR 0 1
22157: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22158: LD_EXP 88
22162: IFFALSE 22847
22164: GO 22166
22166: DISABLE
22167: LD_INT 0
22169: PPUSH
22170: PPUSH
22171: PPUSH
22172: PPUSH
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
22177: PPUSH
// begin enable ;
22178: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22179: LD_ADDR_VAR 0 3
22183: PUSH
22184: LD_EXP 88
22188: PPUSH
22189: CALL 69193 0 1
22193: ST_TO_ADDR
// if not list then
22194: LD_VAR 0 3
22198: NOT
22199: IFFALSE 22203
// exit ;
22201: GO 22847
// for i := 1 to list do
22203: LD_ADDR_VAR 0 1
22207: PUSH
22208: DOUBLE
22209: LD_INT 1
22211: DEC
22212: ST_TO_ADDR
22213: LD_VAR 0 3
22217: PUSH
22218: FOR_TO
22219: IFFALSE 22845
// begin depot := list [ i ] [ 2 ] ;
22221: LD_ADDR_VAR 0 8
22225: PUSH
22226: LD_VAR 0 3
22230: PUSH
22231: LD_VAR 0 1
22235: ARRAY
22236: PUSH
22237: LD_INT 2
22239: ARRAY
22240: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22241: LD_ADDR_VAR 0 5
22245: PUSH
22246: LD_VAR 0 3
22250: PUSH
22251: LD_VAR 0 1
22255: ARRAY
22256: PUSH
22257: LD_INT 1
22259: ARRAY
22260: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22261: LD_VAR 0 8
22265: PPUSH
22266: CALL_OW 301
22270: PUSH
22271: LD_VAR 0 5
22275: PUSH
22276: LD_VAR 0 8
22280: PPUSH
22281: CALL_OW 255
22285: NONEQUAL
22286: OR
22287: IFFALSE 22316
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22289: LD_ADDR_EXP 88
22293: PUSH
22294: LD_EXP 88
22298: PPUSH
22299: LD_VAR 0 8
22303: PPUSH
22304: LD_INT 0
22306: PPUSH
22307: CALL_OW 1
22311: ST_TO_ADDR
// exit ;
22312: POP
22313: POP
22314: GO 22847
// end ; x := list [ i ] [ 3 ] ;
22316: LD_ADDR_VAR 0 6
22320: PUSH
22321: LD_VAR 0 3
22325: PUSH
22326: LD_VAR 0 1
22330: ARRAY
22331: PUSH
22332: LD_INT 3
22334: ARRAY
22335: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22336: LD_ADDR_VAR 0 7
22340: PUSH
22341: LD_VAR 0 3
22345: PUSH
22346: LD_VAR 0 1
22350: ARRAY
22351: PUSH
22352: LD_INT 4
22354: ARRAY
22355: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22356: LD_ADDR_VAR 0 9
22360: PUSH
22361: LD_VAR 0 6
22365: PPUSH
22366: LD_VAR 0 7
22370: PPUSH
22371: LD_INT 16
22373: PPUSH
22374: CALL 67781 0 3
22378: ST_TO_ADDR
// if not cratesNearbyPoint then
22379: LD_VAR 0 9
22383: NOT
22384: IFFALSE 22390
// exit ;
22386: POP
22387: POP
22388: GO 22847
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22390: LD_ADDR_VAR 0 4
22394: PUSH
22395: LD_INT 22
22397: PUSH
22398: LD_VAR 0 5
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 3
22409: PUSH
22410: LD_INT 60
22412: PUSH
22413: EMPTY
22414: LIST
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 91
22422: PUSH
22423: LD_VAR 0 8
22427: PUSH
22428: LD_INT 6
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: LD_INT 25
22441: PUSH
22442: LD_INT 2
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 25
22451: PUSH
22452: LD_INT 16
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: LIST
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: PPUSH
22470: CALL_OW 69
22474: PUSH
22475: LD_VAR 0 8
22479: PPUSH
22480: CALL_OW 313
22484: PPUSH
22485: LD_INT 3
22487: PUSH
22488: LD_INT 60
22490: PUSH
22491: EMPTY
22492: LIST
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: LD_INT 25
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 25
22513: PUSH
22514: LD_INT 16
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PPUSH
22530: CALL_OW 72
22534: UNION
22535: ST_TO_ADDR
// if tmp then
22536: LD_VAR 0 4
22540: IFFALSE 22620
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22542: LD_ADDR_VAR 0 4
22546: PUSH
22547: LD_VAR 0 4
22551: PPUSH
22552: LD_INT 3
22554: PPUSH
22555: CALL 65750 0 2
22559: ST_TO_ADDR
// for j in tmp do
22560: LD_ADDR_VAR 0 2
22564: PUSH
22565: LD_VAR 0 4
22569: PUSH
22570: FOR_IN
22571: IFFALSE 22614
// begin if IsInUnit ( j ) then
22573: LD_VAR 0 2
22577: PPUSH
22578: CALL_OW 310
22582: IFFALSE 22593
// ComExit ( j ) ;
22584: LD_VAR 0 2
22588: PPUSH
22589: CALL 65833 0 1
// AddComCollect ( j , x , y ) ;
22593: LD_VAR 0 2
22597: PPUSH
22598: LD_VAR 0 6
22602: PPUSH
22603: LD_VAR 0 7
22607: PPUSH
22608: CALL_OW 177
// end ;
22612: GO 22570
22614: POP
22615: POP
// exit ;
22616: POP
22617: POP
22618: GO 22847
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22620: LD_ADDR_VAR 0 4
22624: PUSH
22625: LD_INT 22
22627: PUSH
22628: LD_VAR 0 5
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 91
22639: PUSH
22640: LD_VAR 0 8
22644: PUSH
22645: LD_INT 8
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 2
22655: PUSH
22656: LD_INT 34
22658: PUSH
22659: LD_INT 12
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 34
22668: PUSH
22669: LD_INT 51
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 34
22678: PUSH
22679: LD_INT 32
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 34
22688: PUSH
22689: LD_INT 89
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: LIST
22707: PPUSH
22708: CALL_OW 69
22712: ST_TO_ADDR
// if tmp then
22713: LD_VAR 0 4
22717: IFFALSE 22843
// begin for j in tmp do
22719: LD_ADDR_VAR 0 2
22723: PUSH
22724: LD_VAR 0 4
22728: PUSH
22729: FOR_IN
22730: IFFALSE 22841
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22732: LD_VAR 0 2
22736: PPUSH
22737: CALL_OW 262
22741: PUSH
22742: LD_INT 3
22744: EQUAL
22745: PUSH
22746: LD_VAR 0 2
22750: PPUSH
22751: CALL_OW 261
22755: PUSH
22756: LD_INT 20
22758: GREATER
22759: OR
22760: PUSH
22761: LD_VAR 0 2
22765: PPUSH
22766: CALL_OW 314
22770: NOT
22771: AND
22772: PUSH
22773: LD_VAR 0 2
22777: PPUSH
22778: CALL_OW 263
22782: PUSH
22783: LD_INT 1
22785: NONEQUAL
22786: PUSH
22787: LD_VAR 0 2
22791: PPUSH
22792: CALL_OW 311
22796: OR
22797: AND
22798: IFFALSE 22839
// begin ComCollect ( j , x , y ) ;
22800: LD_VAR 0 2
22804: PPUSH
22805: LD_VAR 0 6
22809: PPUSH
22810: LD_VAR 0 7
22814: PPUSH
22815: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22819: LD_VAR 0 2
22823: PPUSH
22824: LD_VAR 0 8
22828: PPUSH
22829: CALL_OW 172
// exit ;
22833: POP
22834: POP
22835: POP
22836: POP
22837: GO 22847
// end ;
22839: GO 22729
22841: POP
22842: POP
// end ; end ;
22843: GO 22218
22845: POP
22846: POP
// end ; end_of_file
22847: PPOPN 9
22849: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22850: LD_INT 0
22852: PPUSH
22853: PPUSH
22854: PPUSH
22855: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22856: LD_VAR 0 1
22860: PPUSH
22861: CALL_OW 264
22865: PUSH
22866: LD_INT 91
22868: EQUAL
22869: IFFALSE 22941
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22871: LD_INT 68
22873: PPUSH
22874: LD_VAR 0 1
22878: PPUSH
22879: CALL_OW 255
22883: PPUSH
22884: CALL_OW 321
22888: PUSH
22889: LD_INT 2
22891: EQUAL
22892: IFFALSE 22904
// eff := 70 else
22894: LD_ADDR_VAR 0 4
22898: PUSH
22899: LD_INT 70
22901: ST_TO_ADDR
22902: GO 22912
// eff := 30 ;
22904: LD_ADDR_VAR 0 4
22908: PUSH
22909: LD_INT 30
22911: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 250
22921: PPUSH
22922: LD_VAR 0 1
22926: PPUSH
22927: CALL_OW 251
22931: PPUSH
22932: LD_VAR 0 4
22936: PPUSH
22937: CALL_OW 495
// end ; end ;
22941: LD_VAR 0 2
22945: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22946: LD_INT 0
22948: PPUSH
// end ;
22949: LD_VAR 0 4
22953: RET
// export function SOS_Command ( cmd ) ; begin
22954: LD_INT 0
22956: PPUSH
// end ;
22957: LD_VAR 0 2
22961: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22962: LD_INT 0
22964: PPUSH
// end ;
22965: LD_VAR 0 6
22969: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
// if not vehicle or not factory then
22974: LD_VAR 0 1
22978: NOT
22979: PUSH
22980: LD_VAR 0 2
22984: NOT
22985: OR
22986: IFFALSE 22990
// exit ;
22988: GO 23221
// if factoryWaypoints >= factory then
22990: LD_EXP 87
22994: PUSH
22995: LD_VAR 0 2
22999: GREATEREQUAL
23000: IFFALSE 23221
// if factoryWaypoints [ factory ] then
23002: LD_EXP 87
23006: PUSH
23007: LD_VAR 0 2
23011: ARRAY
23012: IFFALSE 23221
// begin if GetControl ( vehicle ) = control_manual then
23014: LD_VAR 0 1
23018: PPUSH
23019: CALL_OW 263
23023: PUSH
23024: LD_INT 1
23026: EQUAL
23027: IFFALSE 23108
// begin driver := IsDrivenBy ( vehicle ) ;
23029: LD_ADDR_VAR 0 4
23033: PUSH
23034: LD_VAR 0 1
23038: PPUSH
23039: CALL_OW 311
23043: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23044: LD_VAR 0 4
23048: PPUSH
23049: LD_EXP 87
23053: PUSH
23054: LD_VAR 0 2
23058: ARRAY
23059: PUSH
23060: LD_INT 3
23062: ARRAY
23063: PPUSH
23064: LD_EXP 87
23068: PUSH
23069: LD_VAR 0 2
23073: ARRAY
23074: PUSH
23075: LD_INT 4
23077: ARRAY
23078: PPUSH
23079: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23083: LD_VAR 0 4
23087: PPUSH
23088: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23092: LD_VAR 0 4
23096: PPUSH
23097: LD_VAR 0 2
23101: PPUSH
23102: CALL_OW 180
// end else
23106: GO 23221
// if GetControl ( vehicle ) = control_remote then
23108: LD_VAR 0 1
23112: PPUSH
23113: CALL_OW 263
23117: PUSH
23118: LD_INT 2
23120: EQUAL
23121: IFFALSE 23182
// begin wait ( 0 0$2 ) ;
23123: LD_INT 70
23125: PPUSH
23126: CALL_OW 67
// if Connect ( vehicle ) then
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL 36052 0 1
23139: IFFALSE 23180
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23141: LD_VAR 0 1
23145: PPUSH
23146: LD_EXP 87
23150: PUSH
23151: LD_VAR 0 2
23155: ARRAY
23156: PUSH
23157: LD_INT 3
23159: ARRAY
23160: PPUSH
23161: LD_EXP 87
23165: PUSH
23166: LD_VAR 0 2
23170: ARRAY
23171: PUSH
23172: LD_INT 4
23174: ARRAY
23175: PPUSH
23176: CALL_OW 171
// end else
23180: GO 23221
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23182: LD_VAR 0 1
23186: PPUSH
23187: LD_EXP 87
23191: PUSH
23192: LD_VAR 0 2
23196: ARRAY
23197: PUSH
23198: LD_INT 3
23200: ARRAY
23201: PPUSH
23202: LD_EXP 87
23206: PUSH
23207: LD_VAR 0 2
23211: ARRAY
23212: PUSH
23213: LD_INT 4
23215: ARRAY
23216: PPUSH
23217: CALL_OW 171
// end ; end ;
23221: LD_VAR 0 3
23225: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23226: LD_INT 0
23228: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23229: LD_VAR 0 1
23233: PUSH
23234: LD_INT 250
23236: EQUAL
23237: PUSH
23238: LD_VAR 0 2
23242: PPUSH
23243: CALL_OW 264
23247: PUSH
23248: LD_INT 81
23250: EQUAL
23251: AND
23252: IFFALSE 23273
// MinerPlaceMine ( unit , x , y ) ;
23254: LD_VAR 0 2
23258: PPUSH
23259: LD_VAR 0 4
23263: PPUSH
23264: LD_VAR 0 5
23268: PPUSH
23269: CALL 26263 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23273: LD_VAR 0 1
23277: PUSH
23278: LD_INT 251
23280: EQUAL
23281: PUSH
23282: LD_VAR 0 2
23286: PPUSH
23287: CALL_OW 264
23291: PUSH
23292: LD_INT 81
23294: EQUAL
23295: AND
23296: IFFALSE 23317
// MinerDetonateMine ( unit , x , y ) ;
23298: LD_VAR 0 2
23302: PPUSH
23303: LD_VAR 0 4
23307: PPUSH
23308: LD_VAR 0 5
23312: PPUSH
23313: CALL 26538 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23317: LD_VAR 0 1
23321: PUSH
23322: LD_INT 252
23324: EQUAL
23325: PUSH
23326: LD_VAR 0 2
23330: PPUSH
23331: CALL_OW 264
23335: PUSH
23336: LD_INT 81
23338: EQUAL
23339: AND
23340: IFFALSE 23361
// MinerCreateMinefield ( unit , x , y ) ;
23342: LD_VAR 0 2
23346: PPUSH
23347: LD_VAR 0 4
23351: PPUSH
23352: LD_VAR 0 5
23356: PPUSH
23357: CALL 26955 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23361: LD_VAR 0 1
23365: PUSH
23366: LD_INT 253
23368: EQUAL
23369: PUSH
23370: LD_VAR 0 2
23374: PPUSH
23375: CALL_OW 257
23379: PUSH
23380: LD_INT 5
23382: EQUAL
23383: AND
23384: IFFALSE 23405
// ComBinocular ( unit , x , y ) ;
23386: LD_VAR 0 2
23390: PPUSH
23391: LD_VAR 0 4
23395: PPUSH
23396: LD_VAR 0 5
23400: PPUSH
23401: CALL 27324 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23405: LD_VAR 0 1
23409: PUSH
23410: LD_INT 254
23412: EQUAL
23413: PUSH
23414: LD_VAR 0 2
23418: PPUSH
23419: CALL_OW 264
23423: PUSH
23424: LD_INT 99
23426: EQUAL
23427: AND
23428: PUSH
23429: LD_VAR 0 3
23433: PPUSH
23434: CALL_OW 263
23438: PUSH
23439: LD_INT 3
23441: EQUAL
23442: AND
23443: IFFALSE 23459
// HackDestroyVehicle ( unit , selectedUnit ) ;
23445: LD_VAR 0 2
23449: PPUSH
23450: LD_VAR 0 3
23454: PPUSH
23455: CALL 25627 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23459: LD_VAR 0 1
23463: PUSH
23464: LD_INT 255
23466: EQUAL
23467: PUSH
23468: LD_VAR 0 2
23472: PPUSH
23473: CALL_OW 264
23477: PUSH
23478: LD_INT 14
23480: PUSH
23481: LD_INT 53
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: IN
23488: AND
23489: PUSH
23490: LD_VAR 0 4
23494: PPUSH
23495: LD_VAR 0 5
23499: PPUSH
23500: CALL_OW 488
23504: AND
23505: IFFALSE 23529
// CutTreeXYR ( unit , x , y , 12 ) ;
23507: LD_VAR 0 2
23511: PPUSH
23512: LD_VAR 0 4
23516: PPUSH
23517: LD_VAR 0 5
23521: PPUSH
23522: LD_INT 12
23524: PPUSH
23525: CALL 23624 0 4
// if cmd = 256 then
23529: LD_VAR 0 1
23533: PUSH
23534: LD_INT 256
23536: EQUAL
23537: IFFALSE 23558
// SetFactoryWaypoint ( unit , x , y ) ;
23539: LD_VAR 0 2
23543: PPUSH
23544: LD_VAR 0 4
23548: PPUSH
23549: LD_VAR 0 5
23553: PPUSH
23554: CALL 21539 0 3
// if cmd = 257 then
23558: LD_VAR 0 1
23562: PUSH
23563: LD_INT 257
23565: EQUAL
23566: IFFALSE 23587
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23568: LD_VAR 0 2
23572: PPUSH
23573: LD_VAR 0 4
23577: PPUSH
23578: LD_VAR 0 5
23582: PPUSH
23583: CALL 21901 0 3
// if cmd = 258 then
23587: LD_VAR 0 1
23591: PUSH
23592: LD_INT 258
23594: EQUAL
23595: IFFALSE 23619
// BurnTreeXYR ( unit , x , y , 8 ) ;
23597: LD_VAR 0 2
23601: PPUSH
23602: LD_VAR 0 4
23606: PPUSH
23607: LD_VAR 0 5
23611: PPUSH
23612: LD_INT 8
23614: PPUSH
23615: CALL 24018 0 4
// end ;
23619: LD_VAR 0 6
23623: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23624: LD_INT 0
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
23630: PPUSH
23631: PPUSH
23632: PPUSH
23633: PPUSH
23634: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23635: LD_VAR 0 1
23639: PPUSH
23640: CALL_OW 302
23644: NOT
23645: PUSH
23646: LD_VAR 0 2
23650: PPUSH
23651: LD_VAR 0 3
23655: PPUSH
23656: CALL_OW 488
23660: NOT
23661: OR
23662: PUSH
23663: LD_VAR 0 4
23667: NOT
23668: OR
23669: IFFALSE 23673
// exit ;
23671: GO 24013
// list := [ ] ;
23673: LD_ADDR_VAR 0 13
23677: PUSH
23678: EMPTY
23679: ST_TO_ADDR
// if x - r < 0 then
23680: LD_VAR 0 2
23684: PUSH
23685: LD_VAR 0 4
23689: MINUS
23690: PUSH
23691: LD_INT 0
23693: LESS
23694: IFFALSE 23706
// min_x := 0 else
23696: LD_ADDR_VAR 0 7
23700: PUSH
23701: LD_INT 0
23703: ST_TO_ADDR
23704: GO 23722
// min_x := x - r ;
23706: LD_ADDR_VAR 0 7
23710: PUSH
23711: LD_VAR 0 2
23715: PUSH
23716: LD_VAR 0 4
23720: MINUS
23721: ST_TO_ADDR
// if y - r < 0 then
23722: LD_VAR 0 3
23726: PUSH
23727: LD_VAR 0 4
23731: MINUS
23732: PUSH
23733: LD_INT 0
23735: LESS
23736: IFFALSE 23748
// min_y := 0 else
23738: LD_ADDR_VAR 0 8
23742: PUSH
23743: LD_INT 0
23745: ST_TO_ADDR
23746: GO 23764
// min_y := y - r ;
23748: LD_ADDR_VAR 0 8
23752: PUSH
23753: LD_VAR 0 3
23757: PUSH
23758: LD_VAR 0 4
23762: MINUS
23763: ST_TO_ADDR
// max_x := x + r ;
23764: LD_ADDR_VAR 0 9
23768: PUSH
23769: LD_VAR 0 2
23773: PUSH
23774: LD_VAR 0 4
23778: PLUS
23779: ST_TO_ADDR
// max_y := y + r ;
23780: LD_ADDR_VAR 0 10
23784: PUSH
23785: LD_VAR 0 3
23789: PUSH
23790: LD_VAR 0 4
23794: PLUS
23795: ST_TO_ADDR
// for _x = min_x to max_x do
23796: LD_ADDR_VAR 0 11
23800: PUSH
23801: DOUBLE
23802: LD_VAR 0 7
23806: DEC
23807: ST_TO_ADDR
23808: LD_VAR 0 9
23812: PUSH
23813: FOR_TO
23814: IFFALSE 23931
// for _y = min_y to max_y do
23816: LD_ADDR_VAR 0 12
23820: PUSH
23821: DOUBLE
23822: LD_VAR 0 8
23826: DEC
23827: ST_TO_ADDR
23828: LD_VAR 0 10
23832: PUSH
23833: FOR_TO
23834: IFFALSE 23927
// begin if not ValidHex ( _x , _y ) then
23836: LD_VAR 0 11
23840: PPUSH
23841: LD_VAR 0 12
23845: PPUSH
23846: CALL_OW 488
23850: NOT
23851: IFFALSE 23855
// continue ;
23853: GO 23833
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23855: LD_VAR 0 11
23859: PPUSH
23860: LD_VAR 0 12
23864: PPUSH
23865: CALL_OW 351
23869: PUSH
23870: LD_VAR 0 11
23874: PPUSH
23875: LD_VAR 0 12
23879: PPUSH
23880: CALL_OW 554
23884: AND
23885: IFFALSE 23925
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23887: LD_ADDR_VAR 0 13
23891: PUSH
23892: LD_VAR 0 13
23896: PPUSH
23897: LD_VAR 0 13
23901: PUSH
23902: LD_INT 1
23904: PLUS
23905: PPUSH
23906: LD_VAR 0 11
23910: PUSH
23911: LD_VAR 0 12
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PPUSH
23920: CALL_OW 2
23924: ST_TO_ADDR
// end ;
23925: GO 23833
23927: POP
23928: POP
23929: GO 23813
23931: POP
23932: POP
// if not list then
23933: LD_VAR 0 13
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 24013
// for i in list do
23942: LD_ADDR_VAR 0 6
23946: PUSH
23947: LD_VAR 0 13
23951: PUSH
23952: FOR_IN
23953: IFFALSE 24011
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23955: LD_VAR 0 1
23959: PPUSH
23960: LD_STRING M
23962: PUSH
23963: LD_VAR 0 6
23967: PUSH
23968: LD_INT 1
23970: ARRAY
23971: PUSH
23972: LD_VAR 0 6
23976: PUSH
23977: LD_INT 2
23979: ARRAY
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: PPUSH
24005: CALL_OW 447
24009: GO 23952
24011: POP
24012: POP
// end ;
24013: LD_VAR 0 5
24017: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24018: LD_INT 0
24020: PPUSH
24021: PPUSH
24022: PPUSH
24023: PPUSH
24024: PPUSH
24025: PPUSH
24026: PPUSH
24027: PPUSH
24028: PPUSH
24029: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24030: LD_VAR 0 1
24034: PPUSH
24035: CALL_OW 302
24039: NOT
24040: PUSH
24041: LD_VAR 0 2
24045: PPUSH
24046: LD_VAR 0 3
24050: PPUSH
24051: CALL_OW 488
24055: NOT
24056: OR
24057: PUSH
24058: LD_VAR 0 4
24062: NOT
24063: OR
24064: IFFALSE 24068
// exit ;
24066: GO 24581
// list := [ ] ;
24068: LD_ADDR_VAR 0 13
24072: PUSH
24073: EMPTY
24074: ST_TO_ADDR
// if x - r < 0 then
24075: LD_VAR 0 2
24079: PUSH
24080: LD_VAR 0 4
24084: MINUS
24085: PUSH
24086: LD_INT 0
24088: LESS
24089: IFFALSE 24101
// min_x := 0 else
24091: LD_ADDR_VAR 0 7
24095: PUSH
24096: LD_INT 0
24098: ST_TO_ADDR
24099: GO 24117
// min_x := x - r ;
24101: LD_ADDR_VAR 0 7
24105: PUSH
24106: LD_VAR 0 2
24110: PUSH
24111: LD_VAR 0 4
24115: MINUS
24116: ST_TO_ADDR
// if y - r < 0 then
24117: LD_VAR 0 3
24121: PUSH
24122: LD_VAR 0 4
24126: MINUS
24127: PUSH
24128: LD_INT 0
24130: LESS
24131: IFFALSE 24143
// min_y := 0 else
24133: LD_ADDR_VAR 0 8
24137: PUSH
24138: LD_INT 0
24140: ST_TO_ADDR
24141: GO 24159
// min_y := y - r ;
24143: LD_ADDR_VAR 0 8
24147: PUSH
24148: LD_VAR 0 3
24152: PUSH
24153: LD_VAR 0 4
24157: MINUS
24158: ST_TO_ADDR
// max_x := x + r ;
24159: LD_ADDR_VAR 0 9
24163: PUSH
24164: LD_VAR 0 2
24168: PUSH
24169: LD_VAR 0 4
24173: PLUS
24174: ST_TO_ADDR
// max_y := y + r ;
24175: LD_ADDR_VAR 0 10
24179: PUSH
24180: LD_VAR 0 3
24184: PUSH
24185: LD_VAR 0 4
24189: PLUS
24190: ST_TO_ADDR
// for _x = min_x to max_x do
24191: LD_ADDR_VAR 0 11
24195: PUSH
24196: DOUBLE
24197: LD_VAR 0 7
24201: DEC
24202: ST_TO_ADDR
24203: LD_VAR 0 9
24207: PUSH
24208: FOR_TO
24209: IFFALSE 24326
// for _y = min_y to max_y do
24211: LD_ADDR_VAR 0 12
24215: PUSH
24216: DOUBLE
24217: LD_VAR 0 8
24221: DEC
24222: ST_TO_ADDR
24223: LD_VAR 0 10
24227: PUSH
24228: FOR_TO
24229: IFFALSE 24322
// begin if not ValidHex ( _x , _y ) then
24231: LD_VAR 0 11
24235: PPUSH
24236: LD_VAR 0 12
24240: PPUSH
24241: CALL_OW 488
24245: NOT
24246: IFFALSE 24250
// continue ;
24248: GO 24228
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24250: LD_VAR 0 11
24254: PPUSH
24255: LD_VAR 0 12
24259: PPUSH
24260: CALL_OW 351
24264: PUSH
24265: LD_VAR 0 11
24269: PPUSH
24270: LD_VAR 0 12
24274: PPUSH
24275: CALL_OW 554
24279: AND
24280: IFFALSE 24320
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24282: LD_ADDR_VAR 0 13
24286: PUSH
24287: LD_VAR 0 13
24291: PPUSH
24292: LD_VAR 0 13
24296: PUSH
24297: LD_INT 1
24299: PLUS
24300: PPUSH
24301: LD_VAR 0 11
24305: PUSH
24306: LD_VAR 0 12
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PPUSH
24315: CALL_OW 2
24319: ST_TO_ADDR
// end ;
24320: GO 24228
24322: POP
24323: POP
24324: GO 24208
24326: POP
24327: POP
// if not list then
24328: LD_VAR 0 13
24332: NOT
24333: IFFALSE 24337
// exit ;
24335: GO 24581
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24337: LD_ADDR_VAR 0 13
24341: PUSH
24342: LD_VAR 0 1
24346: PPUSH
24347: LD_VAR 0 13
24351: PPUSH
24352: LD_INT 1
24354: PPUSH
24355: LD_INT 1
24357: PPUSH
24358: CALL 33194 0 4
24362: ST_TO_ADDR
// ComStop ( flame ) ;
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 141
// for i in list do
24372: LD_ADDR_VAR 0 6
24376: PUSH
24377: LD_VAR 0 13
24381: PUSH
24382: FOR_IN
24383: IFFALSE 24414
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24385: LD_VAR 0 1
24389: PPUSH
24390: LD_VAR 0 6
24394: PUSH
24395: LD_INT 1
24397: ARRAY
24398: PPUSH
24399: LD_VAR 0 6
24403: PUSH
24404: LD_INT 2
24406: ARRAY
24407: PPUSH
24408: CALL_OW 176
24412: GO 24382
24414: POP
24415: POP
// repeat wait ( 0 0$1 ) ;
24416: LD_INT 35
24418: PPUSH
24419: CALL_OW 67
// task := GetTaskList ( flame ) ;
24423: LD_ADDR_VAR 0 14
24427: PUSH
24428: LD_VAR 0 1
24432: PPUSH
24433: CALL_OW 437
24437: ST_TO_ADDR
// if not task then
24438: LD_VAR 0 14
24442: NOT
24443: IFFALSE 24447
// exit ;
24445: GO 24581
// if task [ 1 ] [ 1 ] <> | then
24447: LD_VAR 0 14
24451: PUSH
24452: LD_INT 1
24454: ARRAY
24455: PUSH
24456: LD_INT 1
24458: ARRAY
24459: PUSH
24460: LD_STRING |
24462: NONEQUAL
24463: IFFALSE 24467
// exit ;
24465: GO 24581
// _x := task [ 1 ] [ 2 ] ;
24467: LD_ADDR_VAR 0 11
24471: PUSH
24472: LD_VAR 0 14
24476: PUSH
24477: LD_INT 1
24479: ARRAY
24480: PUSH
24481: LD_INT 2
24483: ARRAY
24484: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24485: LD_ADDR_VAR 0 12
24489: PUSH
24490: LD_VAR 0 14
24494: PUSH
24495: LD_INT 1
24497: ARRAY
24498: PUSH
24499: LD_INT 3
24501: ARRAY
24502: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24503: LD_VAR 0 11
24507: PPUSH
24508: LD_VAR 0 12
24512: PPUSH
24513: CALL_OW 351
24517: NOT
24518: PUSH
24519: LD_VAR 0 11
24523: PPUSH
24524: LD_VAR 0 12
24528: PPUSH
24529: CALL_OW 554
24533: NOT
24534: OR
24535: IFFALSE 24569
// begin task := Delete ( task , 1 ) ;
24537: LD_ADDR_VAR 0 14
24541: PUSH
24542: LD_VAR 0 14
24546: PPUSH
24547: LD_INT 1
24549: PPUSH
24550: CALL_OW 3
24554: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24555: LD_VAR 0 1
24559: PPUSH
24560: LD_VAR 0 14
24564: PPUSH
24565: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24569: LD_VAR 0 1
24573: PPUSH
24574: CALL_OW 314
24578: NOT
24579: IFFALSE 24416
// end ;
24581: LD_VAR 0 5
24585: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24586: LD_EXP 90
24590: NOT
24591: IFFALSE 24641
24593: GO 24595
24595: DISABLE
// begin initHack := true ;
24596: LD_ADDR_EXP 90
24600: PUSH
24601: LD_INT 1
24603: ST_TO_ADDR
// hackTanks := [ ] ;
24604: LD_ADDR_EXP 91
24608: PUSH
24609: EMPTY
24610: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24611: LD_ADDR_EXP 92
24615: PUSH
24616: EMPTY
24617: ST_TO_ADDR
// hackLimit := 3 ;
24618: LD_ADDR_EXP 93
24622: PUSH
24623: LD_INT 3
24625: ST_TO_ADDR
// hackDist := 12 ;
24626: LD_ADDR_EXP 94
24630: PUSH
24631: LD_INT 12
24633: ST_TO_ADDR
// hackCounter := [ ] ;
24634: LD_ADDR_EXP 95
24638: PUSH
24639: EMPTY
24640: ST_TO_ADDR
// end ;
24641: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24642: LD_EXP 90
24646: PUSH
24647: LD_INT 34
24649: PUSH
24650: LD_INT 99
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PPUSH
24657: CALL_OW 69
24661: AND
24662: IFFALSE 24915
24664: GO 24666
24666: DISABLE
24667: LD_INT 0
24669: PPUSH
24670: PPUSH
// begin enable ;
24671: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24672: LD_ADDR_VAR 0 1
24676: PUSH
24677: LD_INT 34
24679: PUSH
24680: LD_INT 99
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PPUSH
24687: CALL_OW 69
24691: PUSH
24692: FOR_IN
24693: IFFALSE 24913
// begin if not i in hackTanks then
24695: LD_VAR 0 1
24699: PUSH
24700: LD_EXP 91
24704: IN
24705: NOT
24706: IFFALSE 24789
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24708: LD_ADDR_EXP 91
24712: PUSH
24713: LD_EXP 91
24717: PPUSH
24718: LD_EXP 91
24722: PUSH
24723: LD_INT 1
24725: PLUS
24726: PPUSH
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 1
24736: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24737: LD_ADDR_EXP 92
24741: PUSH
24742: LD_EXP 92
24746: PPUSH
24747: LD_EXP 92
24751: PUSH
24752: LD_INT 1
24754: PLUS
24755: PPUSH
24756: EMPTY
24757: PPUSH
24758: CALL_OW 1
24762: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24763: LD_ADDR_EXP 95
24767: PUSH
24768: LD_EXP 95
24772: PPUSH
24773: LD_EXP 95
24777: PUSH
24778: LD_INT 1
24780: PLUS
24781: PPUSH
24782: EMPTY
24783: PPUSH
24784: CALL_OW 1
24788: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 302
24798: NOT
24799: IFFALSE 24812
// begin HackUnlinkAll ( i ) ;
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL 24918 0 1
// continue ;
24810: GO 24692
// end ; HackCheckCapturedStatus ( i ) ;
24812: LD_VAR 0 1
24816: PPUSH
24817: CALL 25361 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24821: LD_ADDR_VAR 0 2
24825: PUSH
24826: LD_INT 81
24828: PUSH
24829: LD_VAR 0 1
24833: PPUSH
24834: CALL_OW 255
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 33
24845: PUSH
24846: LD_INT 3
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 91
24855: PUSH
24856: LD_VAR 0 1
24860: PUSH
24861: LD_EXP 94
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 50
24873: PUSH
24874: EMPTY
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: PPUSH
24883: CALL_OW 69
24887: ST_TO_ADDR
// if not tmp then
24888: LD_VAR 0 2
24892: NOT
24893: IFFALSE 24897
// continue ;
24895: GO 24692
// HackLink ( i , tmp ) ;
24897: LD_VAR 0 1
24901: PPUSH
24902: LD_VAR 0 2
24906: PPUSH
24907: CALL 25054 0 2
// end ;
24911: GO 24692
24913: POP
24914: POP
// end ;
24915: PPOPN 2
24917: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24918: LD_INT 0
24920: PPUSH
24921: PPUSH
24922: PPUSH
// if not hack in hackTanks then
24923: LD_VAR 0 1
24927: PUSH
24928: LD_EXP 91
24932: IN
24933: NOT
24934: IFFALSE 24938
// exit ;
24936: GO 25049
// index := GetElementIndex ( hackTanks , hack ) ;
24938: LD_ADDR_VAR 0 4
24942: PUSH
24943: LD_EXP 91
24947: PPUSH
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL 32491 0 2
24957: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24958: LD_EXP 92
24962: PUSH
24963: LD_VAR 0 4
24967: ARRAY
24968: IFFALSE 25049
// begin for i in hackTanksCaptured [ index ] do
24970: LD_ADDR_VAR 0 3
24974: PUSH
24975: LD_EXP 92
24979: PUSH
24980: LD_VAR 0 4
24984: ARRAY
24985: PUSH
24986: FOR_IN
24987: IFFALSE 25013
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24989: LD_VAR 0 3
24993: PUSH
24994: LD_INT 1
24996: ARRAY
24997: PPUSH
24998: LD_VAR 0 3
25002: PUSH
25003: LD_INT 2
25005: ARRAY
25006: PPUSH
25007: CALL_OW 235
25011: GO 24986
25013: POP
25014: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25015: LD_ADDR_EXP 92
25019: PUSH
25020: LD_EXP 92
25024: PPUSH
25025: LD_VAR 0 4
25029: PPUSH
25030: EMPTY
25031: PPUSH
25032: CALL_OW 1
25036: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25037: LD_VAR 0 1
25041: PPUSH
25042: LD_INT 0
25044: PPUSH
25045: CALL_OW 505
// end ; end ;
25049: LD_VAR 0 2
25053: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25054: LD_INT 0
25056: PPUSH
25057: PPUSH
25058: PPUSH
// if not hack in hackTanks or not vehicles then
25059: LD_VAR 0 1
25063: PUSH
25064: LD_EXP 91
25068: IN
25069: NOT
25070: PUSH
25071: LD_VAR 0 2
25075: NOT
25076: OR
25077: IFFALSE 25081
// exit ;
25079: GO 25356
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25081: LD_ADDR_VAR 0 2
25085: PUSH
25086: LD_VAR 0 1
25090: PPUSH
25091: LD_VAR 0 2
25095: PPUSH
25096: LD_INT 1
25098: PPUSH
25099: LD_INT 1
25101: PPUSH
25102: CALL 33141 0 4
25106: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25107: LD_ADDR_VAR 0 5
25111: PUSH
25112: LD_EXP 91
25116: PPUSH
25117: LD_VAR 0 1
25121: PPUSH
25122: CALL 32491 0 2
25126: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25127: LD_EXP 92
25131: PUSH
25132: LD_VAR 0 5
25136: ARRAY
25137: PUSH
25138: LD_EXP 93
25142: LESS
25143: IFFALSE 25332
// begin for i := 1 to vehicles do
25145: LD_ADDR_VAR 0 4
25149: PUSH
25150: DOUBLE
25151: LD_INT 1
25153: DEC
25154: ST_TO_ADDR
25155: LD_VAR 0 2
25159: PUSH
25160: FOR_TO
25161: IFFALSE 25330
// begin if hackTanksCaptured [ index ] = hackLimit then
25163: LD_EXP 92
25167: PUSH
25168: LD_VAR 0 5
25172: ARRAY
25173: PUSH
25174: LD_EXP 93
25178: EQUAL
25179: IFFALSE 25183
// break ;
25181: GO 25330
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25183: LD_ADDR_EXP 95
25187: PUSH
25188: LD_EXP 95
25192: PPUSH
25193: LD_VAR 0 5
25197: PPUSH
25198: LD_EXP 95
25202: PUSH
25203: LD_VAR 0 5
25207: ARRAY
25208: PUSH
25209: LD_INT 1
25211: PLUS
25212: PPUSH
25213: CALL_OW 1
25217: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25218: LD_ADDR_EXP 92
25222: PUSH
25223: LD_EXP 92
25227: PPUSH
25228: LD_VAR 0 5
25232: PUSH
25233: LD_EXP 92
25237: PUSH
25238: LD_VAR 0 5
25242: ARRAY
25243: PUSH
25244: LD_INT 1
25246: PLUS
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PPUSH
25252: LD_VAR 0 2
25256: PUSH
25257: LD_VAR 0 4
25261: ARRAY
25262: PUSH
25263: LD_VAR 0 2
25267: PUSH
25268: LD_VAR 0 4
25272: ARRAY
25273: PPUSH
25274: CALL_OW 255
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PPUSH
25283: CALL 32706 0 3
25287: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25288: LD_VAR 0 2
25292: PUSH
25293: LD_VAR 0 4
25297: ARRAY
25298: PPUSH
25299: LD_VAR 0 1
25303: PPUSH
25304: CALL_OW 255
25308: PPUSH
25309: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25313: LD_VAR 0 2
25317: PUSH
25318: LD_VAR 0 4
25322: ARRAY
25323: PPUSH
25324: CALL_OW 141
// end ;
25328: GO 25160
25330: POP
25331: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25332: LD_VAR 0 1
25336: PPUSH
25337: LD_EXP 92
25341: PUSH
25342: LD_VAR 0 5
25346: ARRAY
25347: PUSH
25348: LD_INT 0
25350: PLUS
25351: PPUSH
25352: CALL_OW 505
// end ;
25356: LD_VAR 0 3
25360: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25361: LD_INT 0
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
// if not hack in hackTanks then
25367: LD_VAR 0 1
25371: PUSH
25372: LD_EXP 91
25376: IN
25377: NOT
25378: IFFALSE 25382
// exit ;
25380: GO 25622
// index := GetElementIndex ( hackTanks , hack ) ;
25382: LD_ADDR_VAR 0 4
25386: PUSH
25387: LD_EXP 91
25391: PPUSH
25392: LD_VAR 0 1
25396: PPUSH
25397: CALL 32491 0 2
25401: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25402: LD_ADDR_VAR 0 3
25406: PUSH
25407: DOUBLE
25408: LD_EXP 92
25412: PUSH
25413: LD_VAR 0 4
25417: ARRAY
25418: INC
25419: ST_TO_ADDR
25420: LD_INT 1
25422: PUSH
25423: FOR_DOWNTO
25424: IFFALSE 25596
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25426: LD_ADDR_VAR 0 5
25430: PUSH
25431: LD_EXP 92
25435: PUSH
25436: LD_VAR 0 4
25440: ARRAY
25441: PUSH
25442: LD_VAR 0 3
25446: ARRAY
25447: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25448: LD_VAR 0 5
25452: PUSH
25453: LD_INT 1
25455: ARRAY
25456: PPUSH
25457: CALL_OW 302
25461: NOT
25462: PUSH
25463: LD_VAR 0 5
25467: PUSH
25468: LD_INT 1
25470: ARRAY
25471: PPUSH
25472: CALL_OW 255
25476: PUSH
25477: LD_VAR 0 1
25481: PPUSH
25482: CALL_OW 255
25486: NONEQUAL
25487: OR
25488: IFFALSE 25594
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25490: LD_VAR 0 5
25494: PUSH
25495: LD_INT 1
25497: ARRAY
25498: PPUSH
25499: CALL_OW 305
25503: PUSH
25504: LD_VAR 0 5
25508: PUSH
25509: LD_INT 1
25511: ARRAY
25512: PPUSH
25513: CALL_OW 255
25517: PUSH
25518: LD_VAR 0 1
25522: PPUSH
25523: CALL_OW 255
25527: EQUAL
25528: AND
25529: IFFALSE 25553
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25531: LD_VAR 0 5
25535: PUSH
25536: LD_INT 1
25538: ARRAY
25539: PPUSH
25540: LD_VAR 0 5
25544: PUSH
25545: LD_INT 2
25547: ARRAY
25548: PPUSH
25549: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25553: LD_ADDR_EXP 92
25557: PUSH
25558: LD_EXP 92
25562: PPUSH
25563: LD_VAR 0 4
25567: PPUSH
25568: LD_EXP 92
25572: PUSH
25573: LD_VAR 0 4
25577: ARRAY
25578: PPUSH
25579: LD_VAR 0 3
25583: PPUSH
25584: CALL_OW 3
25588: PPUSH
25589: CALL_OW 1
25593: ST_TO_ADDR
// end ; end ;
25594: GO 25423
25596: POP
25597: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25598: LD_VAR 0 1
25602: PPUSH
25603: LD_EXP 92
25607: PUSH
25608: LD_VAR 0 4
25612: ARRAY
25613: PUSH
25614: LD_INT 0
25616: PLUS
25617: PPUSH
25618: CALL_OW 505
// end ;
25622: LD_VAR 0 2
25626: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
// if not hack in hackTanks then
25633: LD_VAR 0 1
25637: PUSH
25638: LD_EXP 91
25642: IN
25643: NOT
25644: IFFALSE 25648
// exit ;
25646: GO 25733
// index := GetElementIndex ( hackTanks , hack ) ;
25648: LD_ADDR_VAR 0 5
25652: PUSH
25653: LD_EXP 91
25657: PPUSH
25658: LD_VAR 0 1
25662: PPUSH
25663: CALL 32491 0 2
25667: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25668: LD_ADDR_VAR 0 4
25672: PUSH
25673: DOUBLE
25674: LD_INT 1
25676: DEC
25677: ST_TO_ADDR
25678: LD_EXP 92
25682: PUSH
25683: LD_VAR 0 5
25687: ARRAY
25688: PUSH
25689: FOR_TO
25690: IFFALSE 25731
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25692: LD_EXP 92
25696: PUSH
25697: LD_VAR 0 5
25701: ARRAY
25702: PUSH
25703: LD_VAR 0 4
25707: ARRAY
25708: PUSH
25709: LD_INT 1
25711: ARRAY
25712: PUSH
25713: LD_VAR 0 2
25717: EQUAL
25718: IFFALSE 25729
// KillUnit ( vehicle ) ;
25720: LD_VAR 0 2
25724: PPUSH
25725: CALL_OW 66
25729: GO 25689
25731: POP
25732: POP
// end ;
25733: LD_VAR 0 3
25737: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25738: LD_EXP 96
25742: NOT
25743: IFFALSE 25778
25745: GO 25747
25747: DISABLE
// begin initMiner := true ;
25748: LD_ADDR_EXP 96
25752: PUSH
25753: LD_INT 1
25755: ST_TO_ADDR
// minersList := [ ] ;
25756: LD_ADDR_EXP 97
25760: PUSH
25761: EMPTY
25762: ST_TO_ADDR
// minerMinesList := [ ] ;
25763: LD_ADDR_EXP 98
25767: PUSH
25768: EMPTY
25769: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25770: LD_ADDR_EXP 99
25774: PUSH
25775: LD_INT 5
25777: ST_TO_ADDR
// end ;
25778: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25779: LD_EXP 96
25783: PUSH
25784: LD_INT 34
25786: PUSH
25787: LD_INT 81
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PPUSH
25794: CALL_OW 69
25798: AND
25799: IFFALSE 26260
25801: GO 25803
25803: DISABLE
25804: LD_INT 0
25806: PPUSH
25807: PPUSH
25808: PPUSH
25809: PPUSH
// begin enable ;
25810: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25811: LD_ADDR_VAR 0 1
25815: PUSH
25816: LD_INT 34
25818: PUSH
25819: LD_INT 81
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PPUSH
25826: CALL_OW 69
25830: PUSH
25831: FOR_IN
25832: IFFALSE 25904
// begin if not i in minersList then
25834: LD_VAR 0 1
25838: PUSH
25839: LD_EXP 97
25843: IN
25844: NOT
25845: IFFALSE 25902
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25847: LD_ADDR_EXP 97
25851: PUSH
25852: LD_EXP 97
25856: PPUSH
25857: LD_EXP 97
25861: PUSH
25862: LD_INT 1
25864: PLUS
25865: PPUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: CALL_OW 1
25875: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25876: LD_ADDR_EXP 98
25880: PUSH
25881: LD_EXP 98
25885: PPUSH
25886: LD_EXP 98
25890: PUSH
25891: LD_INT 1
25893: PLUS
25894: PPUSH
25895: EMPTY
25896: PPUSH
25897: CALL_OW 1
25901: ST_TO_ADDR
// end end ;
25902: GO 25831
25904: POP
25905: POP
// for i := minerMinesList downto 1 do
25906: LD_ADDR_VAR 0 1
25910: PUSH
25911: DOUBLE
25912: LD_EXP 98
25916: INC
25917: ST_TO_ADDR
25918: LD_INT 1
25920: PUSH
25921: FOR_DOWNTO
25922: IFFALSE 26258
// begin if IsLive ( minersList [ i ] ) then
25924: LD_EXP 97
25928: PUSH
25929: LD_VAR 0 1
25933: ARRAY
25934: PPUSH
25935: CALL_OW 300
25939: IFFALSE 25967
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25941: LD_EXP 97
25945: PUSH
25946: LD_VAR 0 1
25950: ARRAY
25951: PPUSH
25952: LD_EXP 98
25956: PUSH
25957: LD_VAR 0 1
25961: ARRAY
25962: PPUSH
25963: CALL_OW 505
// if not minerMinesList [ i ] then
25967: LD_EXP 98
25971: PUSH
25972: LD_VAR 0 1
25976: ARRAY
25977: NOT
25978: IFFALSE 25982
// continue ;
25980: GO 25921
// for j := minerMinesList [ i ] downto 1 do
25982: LD_ADDR_VAR 0 2
25986: PUSH
25987: DOUBLE
25988: LD_EXP 98
25992: PUSH
25993: LD_VAR 0 1
25997: ARRAY
25998: INC
25999: ST_TO_ADDR
26000: LD_INT 1
26002: PUSH
26003: FOR_DOWNTO
26004: IFFALSE 26254
// begin side := GetSide ( minersList [ i ] ) ;
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_EXP 97
26015: PUSH
26016: LD_VAR 0 1
26020: ARRAY
26021: PPUSH
26022: CALL_OW 255
26026: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26027: LD_ADDR_VAR 0 4
26031: PUSH
26032: LD_EXP 98
26036: PUSH
26037: LD_VAR 0 1
26041: ARRAY
26042: PUSH
26043: LD_VAR 0 2
26047: ARRAY
26048: PUSH
26049: LD_INT 1
26051: ARRAY
26052: PPUSH
26053: LD_EXP 98
26057: PUSH
26058: LD_VAR 0 1
26062: ARRAY
26063: PUSH
26064: LD_VAR 0 2
26068: ARRAY
26069: PUSH
26070: LD_INT 2
26072: ARRAY
26073: PPUSH
26074: CALL_OW 428
26078: ST_TO_ADDR
// if not tmp then
26079: LD_VAR 0 4
26083: NOT
26084: IFFALSE 26088
// continue ;
26086: GO 26003
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26088: LD_VAR 0 4
26092: PUSH
26093: LD_INT 81
26095: PUSH
26096: LD_VAR 0 3
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 69
26109: IN
26110: PUSH
26111: LD_EXP 98
26115: PUSH
26116: LD_VAR 0 1
26120: ARRAY
26121: PUSH
26122: LD_VAR 0 2
26126: ARRAY
26127: PUSH
26128: LD_INT 1
26130: ARRAY
26131: PPUSH
26132: LD_EXP 98
26136: PUSH
26137: LD_VAR 0 1
26141: ARRAY
26142: PUSH
26143: LD_VAR 0 2
26147: ARRAY
26148: PUSH
26149: LD_INT 2
26151: ARRAY
26152: PPUSH
26153: CALL_OW 458
26157: AND
26158: IFFALSE 26252
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26160: LD_EXP 98
26164: PUSH
26165: LD_VAR 0 1
26169: ARRAY
26170: PUSH
26171: LD_VAR 0 2
26175: ARRAY
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: LD_EXP 98
26185: PUSH
26186: LD_VAR 0 1
26190: ARRAY
26191: PUSH
26192: LD_VAR 0 2
26196: ARRAY
26197: PUSH
26198: LD_INT 2
26200: ARRAY
26201: PPUSH
26202: LD_VAR 0 3
26206: PPUSH
26207: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26211: LD_ADDR_EXP 98
26215: PUSH
26216: LD_EXP 98
26220: PPUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: LD_EXP 98
26230: PUSH
26231: LD_VAR 0 1
26235: ARRAY
26236: PPUSH
26237: LD_VAR 0 2
26241: PPUSH
26242: CALL_OW 3
26246: PPUSH
26247: CALL_OW 1
26251: ST_TO_ADDR
// end ; end ;
26252: GO 26003
26254: POP
26255: POP
// end ;
26256: GO 25921
26258: POP
26259: POP
// end ;
26260: PPOPN 4
26262: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26263: LD_INT 0
26265: PPUSH
26266: PPUSH
// result := false ;
26267: LD_ADDR_VAR 0 4
26271: PUSH
26272: LD_INT 0
26274: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26275: LD_VAR 0 1
26279: PPUSH
26280: CALL_OW 264
26284: PUSH
26285: LD_INT 81
26287: EQUAL
26288: NOT
26289: IFFALSE 26293
// exit ;
26291: GO 26533
// index := GetElementIndex ( minersList , unit ) ;
26293: LD_ADDR_VAR 0 5
26297: PUSH
26298: LD_EXP 97
26302: PPUSH
26303: LD_VAR 0 1
26307: PPUSH
26308: CALL 32491 0 2
26312: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26313: LD_EXP 98
26317: PUSH
26318: LD_VAR 0 5
26322: ARRAY
26323: PUSH
26324: LD_EXP 99
26328: GREATEREQUAL
26329: IFFALSE 26333
// exit ;
26331: GO 26533
// ComMoveXY ( unit , x , y ) ;
26333: LD_VAR 0 1
26337: PPUSH
26338: LD_VAR 0 2
26342: PPUSH
26343: LD_VAR 0 3
26347: PPUSH
26348: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26352: LD_INT 35
26354: PPUSH
26355: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26359: LD_VAR 0 1
26363: PPUSH
26364: LD_VAR 0 2
26368: PPUSH
26369: LD_VAR 0 3
26373: PPUSH
26374: CALL 64232 0 3
26378: NOT
26379: PUSH
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 314
26389: AND
26390: IFFALSE 26394
// exit ;
26392: GO 26533
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26394: LD_VAR 0 2
26398: PPUSH
26399: LD_VAR 0 3
26403: PPUSH
26404: CALL_OW 428
26408: PUSH
26409: LD_VAR 0 1
26413: EQUAL
26414: PUSH
26415: LD_VAR 0 1
26419: PPUSH
26420: CALL_OW 314
26424: NOT
26425: AND
26426: IFFALSE 26352
// PlaySoundXY ( x , y , PlantMine ) ;
26428: LD_VAR 0 2
26432: PPUSH
26433: LD_VAR 0 3
26437: PPUSH
26438: LD_STRING PlantMine
26440: PPUSH
26441: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26445: LD_VAR 0 2
26449: PPUSH
26450: LD_VAR 0 3
26454: PPUSH
26455: LD_VAR 0 1
26459: PPUSH
26460: CALL_OW 255
26464: PPUSH
26465: LD_INT 0
26467: PPUSH
26468: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26472: LD_ADDR_EXP 98
26476: PUSH
26477: LD_EXP 98
26481: PPUSH
26482: LD_VAR 0 5
26486: PUSH
26487: LD_EXP 98
26491: PUSH
26492: LD_VAR 0 5
26496: ARRAY
26497: PUSH
26498: LD_INT 1
26500: PLUS
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PPUSH
26506: LD_VAR 0 2
26510: PUSH
26511: LD_VAR 0 3
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PPUSH
26520: CALL 32706 0 3
26524: ST_TO_ADDR
// result := true ;
26525: LD_ADDR_VAR 0 4
26529: PUSH
26530: LD_INT 1
26532: ST_TO_ADDR
// end ;
26533: LD_VAR 0 4
26537: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26538: LD_INT 0
26540: PPUSH
26541: PPUSH
26542: PPUSH
// if not unit in minersList then
26543: LD_VAR 0 1
26547: PUSH
26548: LD_EXP 97
26552: IN
26553: NOT
26554: IFFALSE 26558
// exit ;
26556: GO 26950
// index := GetElementIndex ( minersList , unit ) ;
26558: LD_ADDR_VAR 0 6
26562: PUSH
26563: LD_EXP 97
26567: PPUSH
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL 32491 0 2
26577: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26578: LD_ADDR_VAR 0 5
26582: PUSH
26583: DOUBLE
26584: LD_EXP 98
26588: PUSH
26589: LD_VAR 0 6
26593: ARRAY
26594: INC
26595: ST_TO_ADDR
26596: LD_INT 1
26598: PUSH
26599: FOR_DOWNTO
26600: IFFALSE 26761
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26602: LD_EXP 98
26606: PUSH
26607: LD_VAR 0 6
26611: ARRAY
26612: PUSH
26613: LD_VAR 0 5
26617: ARRAY
26618: PUSH
26619: LD_INT 1
26621: ARRAY
26622: PUSH
26623: LD_VAR 0 2
26627: EQUAL
26628: PUSH
26629: LD_EXP 98
26633: PUSH
26634: LD_VAR 0 6
26638: ARRAY
26639: PUSH
26640: LD_VAR 0 5
26644: ARRAY
26645: PUSH
26646: LD_INT 2
26648: ARRAY
26649: PUSH
26650: LD_VAR 0 3
26654: EQUAL
26655: AND
26656: IFFALSE 26759
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26658: LD_EXP 98
26662: PUSH
26663: LD_VAR 0 6
26667: ARRAY
26668: PUSH
26669: LD_VAR 0 5
26673: ARRAY
26674: PUSH
26675: LD_INT 1
26677: ARRAY
26678: PPUSH
26679: LD_EXP 98
26683: PUSH
26684: LD_VAR 0 6
26688: ARRAY
26689: PUSH
26690: LD_VAR 0 5
26694: ARRAY
26695: PUSH
26696: LD_INT 2
26698: ARRAY
26699: PPUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: CALL_OW 255
26709: PPUSH
26710: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26714: LD_ADDR_EXP 98
26718: PUSH
26719: LD_EXP 98
26723: PPUSH
26724: LD_VAR 0 6
26728: PPUSH
26729: LD_EXP 98
26733: PUSH
26734: LD_VAR 0 6
26738: ARRAY
26739: PPUSH
26740: LD_VAR 0 5
26744: PPUSH
26745: CALL_OW 3
26749: PPUSH
26750: CALL_OW 1
26754: ST_TO_ADDR
// exit ;
26755: POP
26756: POP
26757: GO 26950
// end ; end ;
26759: GO 26599
26761: POP
26762: POP
// for i := minerMinesList [ index ] downto 1 do
26763: LD_ADDR_VAR 0 5
26767: PUSH
26768: DOUBLE
26769: LD_EXP 98
26773: PUSH
26774: LD_VAR 0 6
26778: ARRAY
26779: INC
26780: ST_TO_ADDR
26781: LD_INT 1
26783: PUSH
26784: FOR_DOWNTO
26785: IFFALSE 26948
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26787: LD_EXP 98
26791: PUSH
26792: LD_VAR 0 6
26796: ARRAY
26797: PUSH
26798: LD_VAR 0 5
26802: ARRAY
26803: PUSH
26804: LD_INT 1
26806: ARRAY
26807: PPUSH
26808: LD_EXP 98
26812: PUSH
26813: LD_VAR 0 6
26817: ARRAY
26818: PUSH
26819: LD_VAR 0 5
26823: ARRAY
26824: PUSH
26825: LD_INT 2
26827: ARRAY
26828: PPUSH
26829: LD_VAR 0 2
26833: PPUSH
26834: LD_VAR 0 3
26838: PPUSH
26839: CALL_OW 298
26843: PUSH
26844: LD_INT 6
26846: LESS
26847: IFFALSE 26946
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26849: LD_EXP 98
26853: PUSH
26854: LD_VAR 0 6
26858: ARRAY
26859: PUSH
26860: LD_VAR 0 5
26864: ARRAY
26865: PUSH
26866: LD_INT 1
26868: ARRAY
26869: PPUSH
26870: LD_EXP 98
26874: PUSH
26875: LD_VAR 0 6
26879: ARRAY
26880: PUSH
26881: LD_VAR 0 5
26885: ARRAY
26886: PUSH
26887: LD_INT 2
26889: ARRAY
26890: PPUSH
26891: LD_VAR 0 1
26895: PPUSH
26896: CALL_OW 255
26900: PPUSH
26901: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26905: LD_ADDR_EXP 98
26909: PUSH
26910: LD_EXP 98
26914: PPUSH
26915: LD_VAR 0 6
26919: PPUSH
26920: LD_EXP 98
26924: PUSH
26925: LD_VAR 0 6
26929: ARRAY
26930: PPUSH
26931: LD_VAR 0 5
26935: PPUSH
26936: CALL_OW 3
26940: PPUSH
26941: CALL_OW 1
26945: ST_TO_ADDR
// end ; end ;
26946: GO 26784
26948: POP
26949: POP
// end ;
26950: LD_VAR 0 4
26954: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26955: LD_INT 0
26957: PPUSH
26958: PPUSH
26959: PPUSH
26960: PPUSH
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
26965: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 264
26975: PUSH
26976: LD_INT 81
26978: EQUAL
26979: NOT
26980: PUSH
26981: LD_VAR 0 1
26985: PUSH
26986: LD_EXP 97
26990: IN
26991: NOT
26992: OR
26993: IFFALSE 26997
// exit ;
26995: GO 27319
// index := GetElementIndex ( minersList , unit ) ;
26997: LD_ADDR_VAR 0 6
27001: PUSH
27002: LD_EXP 97
27006: PPUSH
27007: LD_VAR 0 1
27011: PPUSH
27012: CALL 32491 0 2
27016: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27017: LD_ADDR_VAR 0 8
27021: PUSH
27022: LD_EXP 99
27026: PUSH
27027: LD_EXP 98
27031: PUSH
27032: LD_VAR 0 6
27036: ARRAY
27037: MINUS
27038: ST_TO_ADDR
// if not minesFreeAmount then
27039: LD_VAR 0 8
27043: NOT
27044: IFFALSE 27048
// exit ;
27046: GO 27319
// tmp := [ ] ;
27048: LD_ADDR_VAR 0 7
27052: PUSH
27053: EMPTY
27054: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27055: LD_ADDR_VAR 0 5
27059: PUSH
27060: DOUBLE
27061: LD_INT 1
27063: DEC
27064: ST_TO_ADDR
27065: LD_VAR 0 8
27069: PUSH
27070: FOR_TO
27071: IFFALSE 27266
// begin _d := rand ( 0 , 5 ) ;
27073: LD_ADDR_VAR 0 11
27077: PUSH
27078: LD_INT 0
27080: PPUSH
27081: LD_INT 5
27083: PPUSH
27084: CALL_OW 12
27088: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27089: LD_ADDR_VAR 0 12
27093: PUSH
27094: LD_INT 2
27096: PPUSH
27097: LD_INT 6
27099: PPUSH
27100: CALL_OW 12
27104: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27105: LD_ADDR_VAR 0 9
27109: PUSH
27110: LD_VAR 0 2
27114: PPUSH
27115: LD_VAR 0 11
27119: PPUSH
27120: LD_VAR 0 12
27124: PPUSH
27125: CALL_OW 272
27129: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27130: LD_ADDR_VAR 0 10
27134: PUSH
27135: LD_VAR 0 3
27139: PPUSH
27140: LD_VAR 0 11
27144: PPUSH
27145: LD_VAR 0 12
27149: PPUSH
27150: CALL_OW 273
27154: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27155: LD_VAR 0 9
27159: PPUSH
27160: LD_VAR 0 10
27164: PPUSH
27165: CALL_OW 488
27169: PUSH
27170: LD_VAR 0 9
27174: PUSH
27175: LD_VAR 0 10
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_VAR 0 7
27188: IN
27189: NOT
27190: AND
27191: PUSH
27192: LD_VAR 0 9
27196: PPUSH
27197: LD_VAR 0 10
27201: PPUSH
27202: CALL_OW 458
27206: NOT
27207: AND
27208: IFFALSE 27250
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27210: LD_ADDR_VAR 0 7
27214: PUSH
27215: LD_VAR 0 7
27219: PPUSH
27220: LD_VAR 0 7
27224: PUSH
27225: LD_INT 1
27227: PLUS
27228: PPUSH
27229: LD_VAR 0 9
27233: PUSH
27234: LD_VAR 0 10
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PPUSH
27243: CALL_OW 1
27247: ST_TO_ADDR
27248: GO 27264
// i := i - 1 ;
27250: LD_ADDR_VAR 0 5
27254: PUSH
27255: LD_VAR 0 5
27259: PUSH
27260: LD_INT 1
27262: MINUS
27263: ST_TO_ADDR
// end ;
27264: GO 27070
27266: POP
27267: POP
// for i in tmp do
27268: LD_ADDR_VAR 0 5
27272: PUSH
27273: LD_VAR 0 7
27277: PUSH
27278: FOR_IN
27279: IFFALSE 27317
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_VAR 0 5
27290: PUSH
27291: LD_INT 1
27293: ARRAY
27294: PPUSH
27295: LD_VAR 0 5
27299: PUSH
27300: LD_INT 2
27302: ARRAY
27303: PPUSH
27304: CALL 26263 0 3
27308: NOT
27309: IFFALSE 27315
// exit ;
27311: POP
27312: POP
27313: GO 27319
27315: GO 27278
27317: POP
27318: POP
// end ;
27319: LD_VAR 0 4
27323: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27324: LD_INT 0
27326: PPUSH
27327: PPUSH
27328: PPUSH
27329: PPUSH
27330: PPUSH
27331: PPUSH
27332: PPUSH
// if not GetClass ( unit ) = class_sniper then
27333: LD_VAR 0 1
27337: PPUSH
27338: CALL_OW 257
27342: PUSH
27343: LD_INT 5
27345: EQUAL
27346: NOT
27347: IFFALSE 27351
// exit ;
27349: GO 27739
// dist := 8 ;
27351: LD_ADDR_VAR 0 5
27355: PUSH
27356: LD_INT 8
27358: ST_TO_ADDR
// viewRange := 12 ;
27359: LD_ADDR_VAR 0 7
27363: PUSH
27364: LD_INT 12
27366: ST_TO_ADDR
// side := GetSide ( unit ) ;
27367: LD_ADDR_VAR 0 6
27371: PUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 255
27381: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27382: LD_INT 61
27384: PPUSH
27385: LD_VAR 0 6
27389: PPUSH
27390: CALL_OW 321
27394: PUSH
27395: LD_INT 2
27397: EQUAL
27398: IFFALSE 27408
// viewRange := 16 ;
27400: LD_ADDR_VAR 0 7
27404: PUSH
27405: LD_INT 16
27407: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27408: LD_VAR 0 1
27412: PPUSH
27413: LD_VAR 0 2
27417: PPUSH
27418: LD_VAR 0 3
27422: PPUSH
27423: CALL_OW 297
27427: PUSH
27428: LD_VAR 0 5
27432: GREATER
27433: IFFALSE 27512
// begin ComMoveXY ( unit , x , y ) ;
27435: LD_VAR 0 1
27439: PPUSH
27440: LD_VAR 0 2
27444: PPUSH
27445: LD_VAR 0 3
27449: PPUSH
27450: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27454: LD_INT 35
27456: PPUSH
27457: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27461: LD_VAR 0 1
27465: PPUSH
27466: LD_VAR 0 2
27470: PPUSH
27471: LD_VAR 0 3
27475: PPUSH
27476: CALL 64232 0 3
27480: NOT
27481: IFFALSE 27485
// exit ;
27483: GO 27739
// until GetDistUnitXY ( unit , x , y ) < dist ;
27485: LD_VAR 0 1
27489: PPUSH
27490: LD_VAR 0 2
27494: PPUSH
27495: LD_VAR 0 3
27499: PPUSH
27500: CALL_OW 297
27504: PUSH
27505: LD_VAR 0 5
27509: LESS
27510: IFFALSE 27454
// end ; ComTurnXY ( unit , x , y ) ;
27512: LD_VAR 0 1
27516: PPUSH
27517: LD_VAR 0 2
27521: PPUSH
27522: LD_VAR 0 3
27526: PPUSH
27527: CALL_OW 118
// wait ( 5 ) ;
27531: LD_INT 5
27533: PPUSH
27534: CALL_OW 67
// _d := GetDir ( unit ) ;
27538: LD_ADDR_VAR 0 10
27542: PUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: CALL_OW 254
27552: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27553: LD_ADDR_VAR 0 8
27557: PUSH
27558: LD_VAR 0 1
27562: PPUSH
27563: CALL_OW 250
27567: PPUSH
27568: LD_VAR 0 10
27572: PPUSH
27573: LD_VAR 0 5
27577: PPUSH
27578: CALL_OW 272
27582: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27583: LD_ADDR_VAR 0 9
27587: PUSH
27588: LD_VAR 0 1
27592: PPUSH
27593: CALL_OW 251
27597: PPUSH
27598: LD_VAR 0 10
27602: PPUSH
27603: LD_VAR 0 5
27607: PPUSH
27608: CALL_OW 273
27612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27613: LD_VAR 0 8
27617: PPUSH
27618: LD_VAR 0 9
27622: PPUSH
27623: CALL_OW 488
27627: NOT
27628: IFFALSE 27632
// exit ;
27630: GO 27739
// ComAnimCustom ( unit , 1 ) ;
27632: LD_VAR 0 1
27636: PPUSH
27637: LD_INT 1
27639: PPUSH
27640: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27644: LD_VAR 0 8
27648: PPUSH
27649: LD_VAR 0 9
27653: PPUSH
27654: LD_VAR 0 6
27658: PPUSH
27659: LD_VAR 0 7
27663: PPUSH
27664: CALL_OW 330
// repeat wait ( 1 ) ;
27668: LD_INT 1
27670: PPUSH
27671: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 316
27684: PUSH
27685: LD_VAR 0 1
27689: PPUSH
27690: CALL_OW 314
27694: OR
27695: PUSH
27696: LD_VAR 0 1
27700: PPUSH
27701: CALL_OW 302
27705: NOT
27706: OR
27707: PUSH
27708: LD_VAR 0 1
27712: PPUSH
27713: CALL_OW 301
27717: OR
27718: IFFALSE 27668
// RemoveSeeing ( _x , _y , side ) ;
27720: LD_VAR 0 8
27724: PPUSH
27725: LD_VAR 0 9
27729: PPUSH
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 331
// end ; end_of_file
27739: LD_VAR 0 4
27743: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27744: LD_INT 0
27746: PPUSH
27747: PPUSH
// if exist_mode then
27748: LD_VAR 0 2
27752: IFFALSE 27777
// unit := CreateCharacter ( prefix & ident ) else
27754: LD_ADDR_VAR 0 5
27758: PUSH
27759: LD_VAR 0 3
27763: PUSH
27764: LD_VAR 0 1
27768: STR
27769: PPUSH
27770: CALL_OW 34
27774: ST_TO_ADDR
27775: GO 27792
// unit := NewCharacter ( ident ) ;
27777: LD_ADDR_VAR 0 5
27781: PUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 25
27791: ST_TO_ADDR
// result := unit ;
27792: LD_ADDR_VAR 0 4
27796: PUSH
27797: LD_VAR 0 5
27801: ST_TO_ADDR
// end ;
27802: LD_VAR 0 4
27806: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27807: LD_INT 0
27809: PPUSH
27810: PPUSH
// if not side or not nation then
27811: LD_VAR 0 1
27815: NOT
27816: PUSH
27817: LD_VAR 0 2
27821: NOT
27822: OR
27823: IFFALSE 27827
// exit ;
27825: GO 28595
// case nation of nation_american :
27827: LD_VAR 0 2
27831: PUSH
27832: LD_INT 1
27834: DOUBLE
27835: EQUAL
27836: IFTRUE 27840
27838: GO 28054
27840: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27841: LD_ADDR_VAR 0 4
27845: PUSH
27846: LD_INT 35
27848: PUSH
27849: LD_INT 45
27851: PUSH
27852: LD_INT 46
27854: PUSH
27855: LD_INT 47
27857: PUSH
27858: LD_INT 82
27860: PUSH
27861: LD_INT 83
27863: PUSH
27864: LD_INT 84
27866: PUSH
27867: LD_INT 85
27869: PUSH
27870: LD_INT 86
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: LD_INT 6
27881: PUSH
27882: LD_INT 15
27884: PUSH
27885: LD_INT 16
27887: PUSH
27888: LD_INT 7
27890: PUSH
27891: LD_INT 12
27893: PUSH
27894: LD_INT 13
27896: PUSH
27897: LD_INT 10
27899: PUSH
27900: LD_INT 14
27902: PUSH
27903: LD_INT 20
27905: PUSH
27906: LD_INT 21
27908: PUSH
27909: LD_INT 22
27911: PUSH
27912: LD_INT 25
27914: PUSH
27915: LD_INT 32
27917: PUSH
27918: LD_INT 27
27920: PUSH
27921: LD_INT 36
27923: PUSH
27924: LD_INT 69
27926: PUSH
27927: LD_INT 39
27929: PUSH
27930: LD_INT 34
27932: PUSH
27933: LD_INT 40
27935: PUSH
27936: LD_INT 48
27938: PUSH
27939: LD_INT 49
27941: PUSH
27942: LD_INT 50
27944: PUSH
27945: LD_INT 51
27947: PUSH
27948: LD_INT 52
27950: PUSH
27951: LD_INT 53
27953: PUSH
27954: LD_INT 54
27956: PUSH
27957: LD_INT 55
27959: PUSH
27960: LD_INT 56
27962: PUSH
27963: LD_INT 57
27965: PUSH
27966: LD_INT 58
27968: PUSH
27969: LD_INT 59
27971: PUSH
27972: LD_INT 60
27974: PUSH
27975: LD_INT 61
27977: PUSH
27978: LD_INT 62
27980: PUSH
27981: LD_INT 80
27983: PUSH
27984: LD_INT 82
27986: PUSH
27987: LD_INT 83
27989: PUSH
27990: LD_INT 84
27992: PUSH
27993: LD_INT 85
27995: PUSH
27996: LD_INT 86
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: ST_TO_ADDR
28052: GO 28519
28054: LD_INT 2
28056: DOUBLE
28057: EQUAL
28058: IFTRUE 28062
28060: GO 28288
28062: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28063: LD_ADDR_VAR 0 4
28067: PUSH
28068: LD_INT 35
28070: PUSH
28071: LD_INT 45
28073: PUSH
28074: LD_INT 46
28076: PUSH
28077: LD_INT 47
28079: PUSH
28080: LD_INT 82
28082: PUSH
28083: LD_INT 83
28085: PUSH
28086: LD_INT 84
28088: PUSH
28089: LD_INT 85
28091: PUSH
28092: LD_INT 87
28094: PUSH
28095: LD_INT 70
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: LD_INT 11
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 4
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: LD_INT 6
28115: PUSH
28116: LD_INT 15
28118: PUSH
28119: LD_INT 18
28121: PUSH
28122: LD_INT 7
28124: PUSH
28125: LD_INT 17
28127: PUSH
28128: LD_INT 8
28130: PUSH
28131: LD_INT 20
28133: PUSH
28134: LD_INT 21
28136: PUSH
28137: LD_INT 22
28139: PUSH
28140: LD_INT 72
28142: PUSH
28143: LD_INT 26
28145: PUSH
28146: LD_INT 69
28148: PUSH
28149: LD_INT 39
28151: PUSH
28152: LD_INT 40
28154: PUSH
28155: LD_INT 41
28157: PUSH
28158: LD_INT 42
28160: PUSH
28161: LD_INT 43
28163: PUSH
28164: LD_INT 48
28166: PUSH
28167: LD_INT 49
28169: PUSH
28170: LD_INT 50
28172: PUSH
28173: LD_INT 51
28175: PUSH
28176: LD_INT 52
28178: PUSH
28179: LD_INT 53
28181: PUSH
28182: LD_INT 54
28184: PUSH
28185: LD_INT 55
28187: PUSH
28188: LD_INT 56
28190: PUSH
28191: LD_INT 60
28193: PUSH
28194: LD_INT 61
28196: PUSH
28197: LD_INT 62
28199: PUSH
28200: LD_INT 66
28202: PUSH
28203: LD_INT 67
28205: PUSH
28206: LD_INT 68
28208: PUSH
28209: LD_INT 81
28211: PUSH
28212: LD_INT 82
28214: PUSH
28215: LD_INT 83
28217: PUSH
28218: LD_INT 84
28220: PUSH
28221: LD_INT 85
28223: PUSH
28224: LD_INT 87
28226: PUSH
28227: LD_INT 88
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: ST_TO_ADDR
28286: GO 28519
28288: LD_INT 3
28290: DOUBLE
28291: EQUAL
28292: IFTRUE 28296
28294: GO 28518
28296: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28297: LD_ADDR_VAR 0 4
28301: PUSH
28302: LD_INT 46
28304: PUSH
28305: LD_INT 47
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 82
28316: PUSH
28317: LD_INT 83
28319: PUSH
28320: LD_INT 84
28322: PUSH
28323: LD_INT 85
28325: PUSH
28326: LD_INT 86
28328: PUSH
28329: LD_INT 11
28331: PUSH
28332: LD_INT 9
28334: PUSH
28335: LD_INT 20
28337: PUSH
28338: LD_INT 19
28340: PUSH
28341: LD_INT 21
28343: PUSH
28344: LD_INT 24
28346: PUSH
28347: LD_INT 22
28349: PUSH
28350: LD_INT 25
28352: PUSH
28353: LD_INT 28
28355: PUSH
28356: LD_INT 29
28358: PUSH
28359: LD_INT 30
28361: PUSH
28362: LD_INT 31
28364: PUSH
28365: LD_INT 37
28367: PUSH
28368: LD_INT 38
28370: PUSH
28371: LD_INT 32
28373: PUSH
28374: LD_INT 27
28376: PUSH
28377: LD_INT 33
28379: PUSH
28380: LD_INT 69
28382: PUSH
28383: LD_INT 39
28385: PUSH
28386: LD_INT 34
28388: PUSH
28389: LD_INT 40
28391: PUSH
28392: LD_INT 71
28394: PUSH
28395: LD_INT 23
28397: PUSH
28398: LD_INT 44
28400: PUSH
28401: LD_INT 48
28403: PUSH
28404: LD_INT 49
28406: PUSH
28407: LD_INT 50
28409: PUSH
28410: LD_INT 51
28412: PUSH
28413: LD_INT 52
28415: PUSH
28416: LD_INT 53
28418: PUSH
28419: LD_INT 54
28421: PUSH
28422: LD_INT 55
28424: PUSH
28425: LD_INT 56
28427: PUSH
28428: LD_INT 57
28430: PUSH
28431: LD_INT 58
28433: PUSH
28434: LD_INT 59
28436: PUSH
28437: LD_INT 63
28439: PUSH
28440: LD_INT 64
28442: PUSH
28443: LD_INT 65
28445: PUSH
28446: LD_INT 82
28448: PUSH
28449: LD_INT 83
28451: PUSH
28452: LD_INT 84
28454: PUSH
28455: LD_INT 85
28457: PUSH
28458: LD_INT 86
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
28516: GO 28519
28518: POP
// if state > - 1 and state < 3 then
28519: LD_VAR 0 3
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: GREATER
28528: PUSH
28529: LD_VAR 0 3
28533: PUSH
28534: LD_INT 3
28536: LESS
28537: AND
28538: IFFALSE 28595
// for i in result do
28540: LD_ADDR_VAR 0 5
28544: PUSH
28545: LD_VAR 0 4
28549: PUSH
28550: FOR_IN
28551: IFFALSE 28593
// if GetTech ( i , side ) <> state then
28553: LD_VAR 0 5
28557: PPUSH
28558: LD_VAR 0 1
28562: PPUSH
28563: CALL_OW 321
28567: PUSH
28568: LD_VAR 0 3
28572: NONEQUAL
28573: IFFALSE 28591
// result := result diff i ;
28575: LD_ADDR_VAR 0 4
28579: PUSH
28580: LD_VAR 0 4
28584: PUSH
28585: LD_VAR 0 5
28589: DIFF
28590: ST_TO_ADDR
28591: GO 28550
28593: POP
28594: POP
// end ;
28595: LD_VAR 0 4
28599: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28600: LD_INT 0
28602: PPUSH
28603: PPUSH
28604: PPUSH
// result := true ;
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_INT 1
28612: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28613: LD_ADDR_VAR 0 5
28617: PUSH
28618: LD_VAR 0 2
28622: PPUSH
28623: CALL_OW 480
28627: ST_TO_ADDR
// if not tmp then
28628: LD_VAR 0 5
28632: NOT
28633: IFFALSE 28637
// exit ;
28635: GO 28686
// for i in tmp do
28637: LD_ADDR_VAR 0 4
28641: PUSH
28642: LD_VAR 0 5
28646: PUSH
28647: FOR_IN
28648: IFFALSE 28684
// if GetTech ( i , side ) <> state_researched then
28650: LD_VAR 0 4
28654: PPUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 321
28664: PUSH
28665: LD_INT 2
28667: NONEQUAL
28668: IFFALSE 28682
// begin result := false ;
28670: LD_ADDR_VAR 0 3
28674: PUSH
28675: LD_INT 0
28677: ST_TO_ADDR
// exit ;
28678: POP
28679: POP
28680: GO 28686
// end ;
28682: GO 28647
28684: POP
28685: POP
// end ;
28686: LD_VAR 0 3
28690: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28691: LD_INT 0
28693: PPUSH
28694: PPUSH
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
28700: PPUSH
28701: PPUSH
28702: PPUSH
28703: PPUSH
28704: PPUSH
28705: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28706: LD_VAR 0 1
28710: NOT
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 257
28721: PUSH
28722: LD_INT 9
28724: NONEQUAL
28725: OR
28726: IFFALSE 28730
// exit ;
28728: GO 29303
// side := GetSide ( unit ) ;
28730: LD_ADDR_VAR 0 9
28734: PUSH
28735: LD_VAR 0 1
28739: PPUSH
28740: CALL_OW 255
28744: ST_TO_ADDR
// tech_space := tech_spacanom ;
28745: LD_ADDR_VAR 0 12
28749: PUSH
28750: LD_INT 29
28752: ST_TO_ADDR
// tech_time := tech_taurad ;
28753: LD_ADDR_VAR 0 13
28757: PUSH
28758: LD_INT 28
28760: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28761: LD_ADDR_VAR 0 11
28765: PUSH
28766: LD_VAR 0 1
28770: PPUSH
28771: CALL_OW 310
28775: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28776: LD_VAR 0 11
28780: PPUSH
28781: CALL_OW 247
28785: PUSH
28786: LD_INT 2
28788: EQUAL
28789: IFFALSE 28793
// exit ;
28791: GO 29303
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28793: LD_ADDR_VAR 0 8
28797: PUSH
28798: LD_INT 81
28800: PUSH
28801: LD_VAR 0 9
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 3
28812: PUSH
28813: LD_INT 21
28815: PUSH
28816: LD_INT 3
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PPUSH
28831: CALL_OW 69
28835: ST_TO_ADDR
// if not tmp then
28836: LD_VAR 0 8
28840: NOT
28841: IFFALSE 28845
// exit ;
28843: GO 29303
// if in_unit then
28845: LD_VAR 0 11
28849: IFFALSE 28873
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28851: LD_ADDR_VAR 0 10
28855: PUSH
28856: LD_VAR 0 8
28860: PPUSH
28861: LD_VAR 0 11
28865: PPUSH
28866: CALL_OW 74
28870: ST_TO_ADDR
28871: GO 28893
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28873: LD_ADDR_VAR 0 10
28877: PUSH
28878: LD_VAR 0 8
28882: PPUSH
28883: LD_VAR 0 1
28887: PPUSH
28888: CALL_OW 74
28892: ST_TO_ADDR
// if not enemy then
28893: LD_VAR 0 10
28897: NOT
28898: IFFALSE 28902
// exit ;
28900: GO 29303
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28902: LD_VAR 0 11
28906: PUSH
28907: LD_VAR 0 11
28911: PPUSH
28912: LD_VAR 0 10
28916: PPUSH
28917: CALL_OW 296
28921: PUSH
28922: LD_INT 13
28924: GREATER
28925: AND
28926: PUSH
28927: LD_VAR 0 1
28931: PPUSH
28932: LD_VAR 0 10
28936: PPUSH
28937: CALL_OW 296
28941: PUSH
28942: LD_INT 12
28944: GREATER
28945: OR
28946: IFFALSE 28950
// exit ;
28948: GO 29303
// missile := [ 1 ] ;
28950: LD_ADDR_VAR 0 14
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28961: LD_VAR 0 9
28965: PPUSH
28966: LD_VAR 0 12
28970: PPUSH
28971: CALL_OW 325
28975: IFFALSE 29004
// missile := Replace ( missile , missile + 1 , 2 ) ;
28977: LD_ADDR_VAR 0 14
28981: PUSH
28982: LD_VAR 0 14
28986: PPUSH
28987: LD_VAR 0 14
28991: PUSH
28992: LD_INT 1
28994: PLUS
28995: PPUSH
28996: LD_INT 2
28998: PPUSH
28999: CALL_OW 1
29003: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29004: LD_VAR 0 9
29008: PPUSH
29009: LD_VAR 0 13
29013: PPUSH
29014: CALL_OW 325
29018: PUSH
29019: LD_VAR 0 10
29023: PPUSH
29024: CALL_OW 255
29028: PPUSH
29029: LD_VAR 0 13
29033: PPUSH
29034: CALL_OW 325
29038: NOT
29039: AND
29040: IFFALSE 29069
// missile := Replace ( missile , missile + 1 , 3 ) ;
29042: LD_ADDR_VAR 0 14
29046: PUSH
29047: LD_VAR 0 14
29051: PPUSH
29052: LD_VAR 0 14
29056: PUSH
29057: LD_INT 1
29059: PLUS
29060: PPUSH
29061: LD_INT 3
29063: PPUSH
29064: CALL_OW 1
29068: ST_TO_ADDR
// if missile < 2 then
29069: LD_VAR 0 14
29073: PUSH
29074: LD_INT 2
29076: LESS
29077: IFFALSE 29081
// exit ;
29079: GO 29303
// x := GetX ( enemy ) ;
29081: LD_ADDR_VAR 0 4
29085: PUSH
29086: LD_VAR 0 10
29090: PPUSH
29091: CALL_OW 250
29095: ST_TO_ADDR
// y := GetY ( enemy ) ;
29096: LD_ADDR_VAR 0 5
29100: PUSH
29101: LD_VAR 0 10
29105: PPUSH
29106: CALL_OW 251
29110: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29111: LD_ADDR_VAR 0 6
29115: PUSH
29116: LD_VAR 0 4
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PPUSH
29125: LD_INT 1
29127: PPUSH
29128: CALL_OW 12
29132: PLUS
29133: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29134: LD_ADDR_VAR 0 7
29138: PUSH
29139: LD_VAR 0 5
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PPUSH
29148: LD_INT 1
29150: PPUSH
29151: CALL_OW 12
29155: PLUS
29156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29157: LD_VAR 0 6
29161: PPUSH
29162: LD_VAR 0 7
29166: PPUSH
29167: CALL_OW 488
29171: NOT
29172: IFFALSE 29194
// begin _x := x ;
29174: LD_ADDR_VAR 0 6
29178: PUSH
29179: LD_VAR 0 4
29183: ST_TO_ADDR
// _y := y ;
29184: LD_ADDR_VAR 0 7
29188: PUSH
29189: LD_VAR 0 5
29193: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29194: LD_ADDR_VAR 0 3
29198: PUSH
29199: LD_INT 1
29201: PPUSH
29202: LD_VAR 0 14
29206: PPUSH
29207: CALL_OW 12
29211: ST_TO_ADDR
// case i of 1 :
29212: LD_VAR 0 3
29216: PUSH
29217: LD_INT 1
29219: DOUBLE
29220: EQUAL
29221: IFTRUE 29225
29223: GO 29242
29225: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29226: LD_VAR 0 1
29230: PPUSH
29231: LD_VAR 0 10
29235: PPUSH
29236: CALL_OW 115
29240: GO 29303
29242: LD_INT 2
29244: DOUBLE
29245: EQUAL
29246: IFTRUE 29250
29248: GO 29272
29250: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29251: LD_VAR 0 1
29255: PPUSH
29256: LD_VAR 0 6
29260: PPUSH
29261: LD_VAR 0 7
29265: PPUSH
29266: CALL_OW 153
29270: GO 29303
29272: LD_INT 3
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29280
29278: GO 29302
29280: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29281: LD_VAR 0 1
29285: PPUSH
29286: LD_VAR 0 6
29290: PPUSH
29291: LD_VAR 0 7
29295: PPUSH
29296: CALL_OW 154
29300: GO 29303
29302: POP
// end ;
29303: LD_VAR 0 2
29307: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
29314: PPUSH
29315: PPUSH
// if not unit or not building then
29316: LD_VAR 0 1
29320: NOT
29321: PUSH
29322: LD_VAR 0 2
29326: NOT
29327: OR
29328: IFFALSE 29332
// exit ;
29330: GO 29490
// x := GetX ( building ) ;
29332: LD_ADDR_VAR 0 5
29336: PUSH
29337: LD_VAR 0 2
29341: PPUSH
29342: CALL_OW 250
29346: ST_TO_ADDR
// y := GetY ( building ) ;
29347: LD_ADDR_VAR 0 6
29351: PUSH
29352: LD_VAR 0 2
29356: PPUSH
29357: CALL_OW 251
29361: ST_TO_ADDR
// for i = 0 to 5 do
29362: LD_ADDR_VAR 0 4
29366: PUSH
29367: DOUBLE
29368: LD_INT 0
29370: DEC
29371: ST_TO_ADDR
29372: LD_INT 5
29374: PUSH
29375: FOR_TO
29376: IFFALSE 29488
// begin _x := ShiftX ( x , i , 3 ) ;
29378: LD_ADDR_VAR 0 7
29382: PUSH
29383: LD_VAR 0 5
29387: PPUSH
29388: LD_VAR 0 4
29392: PPUSH
29393: LD_INT 3
29395: PPUSH
29396: CALL_OW 272
29400: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29401: LD_ADDR_VAR 0 8
29405: PUSH
29406: LD_VAR 0 6
29410: PPUSH
29411: LD_VAR 0 4
29415: PPUSH
29416: LD_INT 3
29418: PPUSH
29419: CALL_OW 273
29423: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29424: LD_VAR 0 7
29428: PPUSH
29429: LD_VAR 0 8
29433: PPUSH
29434: CALL_OW 488
29438: NOT
29439: IFFALSE 29443
// continue ;
29441: GO 29375
// if HexInfo ( _x , _y ) = 0 then
29443: LD_VAR 0 7
29447: PPUSH
29448: LD_VAR 0 8
29452: PPUSH
29453: CALL_OW 428
29457: PUSH
29458: LD_INT 0
29460: EQUAL
29461: IFFALSE 29486
// begin ComMoveXY ( unit , _x , _y ) ;
29463: LD_VAR 0 1
29467: PPUSH
29468: LD_VAR 0 7
29472: PPUSH
29473: LD_VAR 0 8
29477: PPUSH
29478: CALL_OW 111
// exit ;
29482: POP
29483: POP
29484: GO 29490
// end ; end ;
29486: GO 29375
29488: POP
29489: POP
// end ;
29490: LD_VAR 0 3
29494: RET
// export function ScanBase ( side , base_area ) ; begin
29495: LD_INT 0
29497: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29498: LD_ADDR_VAR 0 3
29502: PUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: LD_INT 81
29510: PUSH
29511: LD_VAR 0 1
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 70
29524: ST_TO_ADDR
// end ;
29525: LD_VAR 0 3
29529: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29530: LD_INT 0
29532: PPUSH
29533: PPUSH
29534: PPUSH
29535: PPUSH
// result := false ;
29536: LD_ADDR_VAR 0 2
29540: PUSH
29541: LD_INT 0
29543: ST_TO_ADDR
// side := GetSide ( unit ) ;
29544: LD_ADDR_VAR 0 3
29548: PUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: CALL_OW 255
29558: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29559: LD_ADDR_VAR 0 4
29563: PUSH
29564: LD_VAR 0 1
29568: PPUSH
29569: CALL_OW 248
29573: ST_TO_ADDR
// case nat of 1 :
29574: LD_VAR 0 4
29578: PUSH
29579: LD_INT 1
29581: DOUBLE
29582: EQUAL
29583: IFTRUE 29587
29585: GO 29598
29587: POP
// tech := tech_lassight ; 2 :
29588: LD_ADDR_VAR 0 5
29592: PUSH
29593: LD_INT 12
29595: ST_TO_ADDR
29596: GO 29637
29598: LD_INT 2
29600: DOUBLE
29601: EQUAL
29602: IFTRUE 29606
29604: GO 29617
29606: POP
// tech := tech_mortar ; 3 :
29607: LD_ADDR_VAR 0 5
29611: PUSH
29612: LD_INT 41
29614: ST_TO_ADDR
29615: GO 29637
29617: LD_INT 3
29619: DOUBLE
29620: EQUAL
29621: IFTRUE 29625
29623: GO 29636
29625: POP
// tech := tech_bazooka ; end ;
29626: LD_ADDR_VAR 0 5
29630: PUSH
29631: LD_INT 44
29633: ST_TO_ADDR
29634: GO 29637
29636: POP
// if Researched ( side , tech ) then
29637: LD_VAR 0 3
29641: PPUSH
29642: LD_VAR 0 5
29646: PPUSH
29647: CALL_OW 325
29651: IFFALSE 29678
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29653: LD_ADDR_VAR 0 2
29657: PUSH
29658: LD_INT 5
29660: PUSH
29661: LD_INT 8
29663: PUSH
29664: LD_INT 9
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: LIST
29671: PUSH
29672: LD_VAR 0 4
29676: ARRAY
29677: ST_TO_ADDR
// end ;
29678: LD_VAR 0 2
29682: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29683: LD_INT 0
29685: PPUSH
29686: PPUSH
29687: PPUSH
// if not mines then
29688: LD_VAR 0 2
29692: NOT
29693: IFFALSE 29697
// exit ;
29695: GO 29841
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29697: LD_ADDR_VAR 0 5
29701: PUSH
29702: LD_INT 81
29704: PUSH
29705: LD_VAR 0 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 3
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: LD_INT 3
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PPUSH
29735: CALL_OW 69
29739: ST_TO_ADDR
// for i in mines do
29740: LD_ADDR_VAR 0 4
29744: PUSH
29745: LD_VAR 0 2
29749: PUSH
29750: FOR_IN
29751: IFFALSE 29839
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29753: LD_VAR 0 4
29757: PUSH
29758: LD_INT 1
29760: ARRAY
29761: PPUSH
29762: LD_VAR 0 4
29766: PUSH
29767: LD_INT 2
29769: ARRAY
29770: PPUSH
29771: CALL_OW 458
29775: NOT
29776: IFFALSE 29780
// continue ;
29778: GO 29750
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29780: LD_VAR 0 4
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: LD_VAR 0 4
29793: PUSH
29794: LD_INT 2
29796: ARRAY
29797: PPUSH
29798: CALL_OW 428
29802: PUSH
29803: LD_VAR 0 5
29807: IN
29808: IFFALSE 29837
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29810: LD_VAR 0 4
29814: PUSH
29815: LD_INT 1
29817: ARRAY
29818: PPUSH
29819: LD_VAR 0 4
29823: PUSH
29824: LD_INT 2
29826: ARRAY
29827: PPUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: CALL_OW 456
// end ;
29837: GO 29750
29839: POP
29840: POP
// end ;
29841: LD_VAR 0 3
29845: RET
// export function Count ( array ) ; begin
29846: LD_INT 0
29848: PPUSH
// result := array + 0 ;
29849: LD_ADDR_VAR 0 2
29853: PUSH
29854: LD_VAR 0 1
29858: PUSH
29859: LD_INT 0
29861: PLUS
29862: ST_TO_ADDR
// end ;
29863: LD_VAR 0 2
29867: RET
// export function IsEmpty ( building ) ; begin
29868: LD_INT 0
29870: PPUSH
// if not building then
29871: LD_VAR 0 1
29875: NOT
29876: IFFALSE 29880
// exit ;
29878: GO 29923
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29880: LD_ADDR_VAR 0 2
29884: PUSH
29885: LD_VAR 0 1
29889: PUSH
29890: LD_INT 22
29892: PUSH
29893: LD_VAR 0 1
29897: PPUSH
29898: CALL_OW 255
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 58
29909: PUSH
29910: EMPTY
29911: LIST
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PPUSH
29917: CALL_OW 69
29921: IN
29922: ST_TO_ADDR
// end ;
29923: LD_VAR 0 2
29927: RET
// export function IsNotFull ( building ) ; var places ; begin
29928: LD_INT 0
29930: PPUSH
29931: PPUSH
// if not building then
29932: LD_VAR 0 1
29936: NOT
29937: IFFALSE 29941
// exit ;
29939: GO 29969
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: LD_VAR 0 1
29950: PPUSH
29951: LD_INT 3
29953: PUSH
29954: LD_INT 62
29956: PUSH
29957: EMPTY
29958: LIST
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PPUSH
29964: CALL_OW 72
29968: ST_TO_ADDR
// end ;
29969: LD_VAR 0 2
29973: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29974: LD_INT 0
29976: PPUSH
29977: PPUSH
29978: PPUSH
29979: PPUSH
// tmp := [ ] ;
29980: LD_ADDR_VAR 0 3
29984: PUSH
29985: EMPTY
29986: ST_TO_ADDR
// list := [ ] ;
29987: LD_ADDR_VAR 0 5
29991: PUSH
29992: EMPTY
29993: ST_TO_ADDR
// for i = 16 to 25 do
29994: LD_ADDR_VAR 0 4
29998: PUSH
29999: DOUBLE
30000: LD_INT 16
30002: DEC
30003: ST_TO_ADDR
30004: LD_INT 25
30006: PUSH
30007: FOR_TO
30008: IFFALSE 30081
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30010: LD_ADDR_VAR 0 3
30014: PUSH
30015: LD_VAR 0 3
30019: PUSH
30020: LD_INT 22
30022: PUSH
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 255
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 91
30039: PUSH
30040: LD_VAR 0 1
30044: PUSH
30045: LD_INT 6
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 30
30055: PUSH
30056: LD_VAR 0 4
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: LIST
30069: PUSH
30070: EMPTY
30071: LIST
30072: PPUSH
30073: CALL_OW 69
30077: ADD
30078: ST_TO_ADDR
30079: GO 30007
30081: POP
30082: POP
// for i = 1 to tmp do
30083: LD_ADDR_VAR 0 4
30087: PUSH
30088: DOUBLE
30089: LD_INT 1
30091: DEC
30092: ST_TO_ADDR
30093: LD_VAR 0 3
30097: PUSH
30098: FOR_TO
30099: IFFALSE 30187
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30101: LD_ADDR_VAR 0 5
30105: PUSH
30106: LD_VAR 0 5
30110: PUSH
30111: LD_VAR 0 3
30115: PUSH
30116: LD_VAR 0 4
30120: ARRAY
30121: PPUSH
30122: CALL_OW 266
30126: PUSH
30127: LD_VAR 0 3
30131: PUSH
30132: LD_VAR 0 4
30136: ARRAY
30137: PPUSH
30138: CALL_OW 250
30142: PUSH
30143: LD_VAR 0 3
30147: PUSH
30148: LD_VAR 0 4
30152: ARRAY
30153: PPUSH
30154: CALL_OW 251
30158: PUSH
30159: LD_VAR 0 3
30163: PUSH
30164: LD_VAR 0 4
30168: ARRAY
30169: PPUSH
30170: CALL_OW 254
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: ADD
30184: ST_TO_ADDR
30185: GO 30098
30187: POP
30188: POP
// result := list ;
30189: LD_ADDR_VAR 0 2
30193: PUSH
30194: LD_VAR 0 5
30198: ST_TO_ADDR
// end ;
30199: LD_VAR 0 2
30203: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30204: LD_INT 0
30206: PPUSH
30207: PPUSH
30208: PPUSH
30209: PPUSH
30210: PPUSH
30211: PPUSH
30212: PPUSH
// if not factory then
30213: LD_VAR 0 1
30217: NOT
30218: IFFALSE 30222
// exit ;
30220: GO 30815
// if control = control_apeman then
30222: LD_VAR 0 4
30226: PUSH
30227: LD_INT 5
30229: EQUAL
30230: IFFALSE 30339
// begin tmp := UnitsInside ( factory ) ;
30232: LD_ADDR_VAR 0 8
30236: PUSH
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL_OW 313
30246: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30247: LD_VAR 0 8
30251: PPUSH
30252: LD_INT 25
30254: PUSH
30255: LD_INT 12
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PPUSH
30262: CALL_OW 72
30266: NOT
30267: IFFALSE 30277
// control := control_manual ;
30269: LD_ADDR_VAR 0 4
30273: PUSH
30274: LD_INT 1
30276: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30277: LD_ADDR_VAR 0 8
30281: PUSH
30282: LD_VAR 0 1
30286: PPUSH
30287: CALL 29974 0 1
30291: ST_TO_ADDR
// if tmp then
30292: LD_VAR 0 8
30296: IFFALSE 30339
// begin for i in tmp do
30298: LD_ADDR_VAR 0 7
30302: PUSH
30303: LD_VAR 0 8
30307: PUSH
30308: FOR_IN
30309: IFFALSE 30337
// if i [ 1 ] = b_ext_radio then
30311: LD_VAR 0 7
30315: PUSH
30316: LD_INT 1
30318: ARRAY
30319: PUSH
30320: LD_INT 22
30322: EQUAL
30323: IFFALSE 30335
// begin control := control_remote ;
30325: LD_ADDR_VAR 0 4
30329: PUSH
30330: LD_INT 2
30332: ST_TO_ADDR
// break ;
30333: GO 30337
// end ;
30335: GO 30308
30337: POP
30338: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30339: LD_VAR 0 1
30343: PPUSH
30344: LD_VAR 0 2
30348: PPUSH
30349: LD_VAR 0 3
30353: PPUSH
30354: LD_VAR 0 4
30358: PPUSH
30359: LD_VAR 0 5
30363: PPUSH
30364: CALL_OW 448
30368: IFFALSE 30403
// begin result := [ chassis , engine , control , weapon ] ;
30370: LD_ADDR_VAR 0 6
30374: PUSH
30375: LD_VAR 0 2
30379: PUSH
30380: LD_VAR 0 3
30384: PUSH
30385: LD_VAR 0 4
30389: PUSH
30390: LD_VAR 0 5
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
// exit ;
30401: GO 30815
// end ; _chassis := AvailableChassisList ( factory ) ;
30403: LD_ADDR_VAR 0 9
30407: PUSH
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL_OW 475
30417: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30418: LD_ADDR_VAR 0 11
30422: PUSH
30423: LD_VAR 0 1
30427: PPUSH
30428: CALL_OW 476
30432: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30433: LD_ADDR_VAR 0 12
30437: PUSH
30438: LD_VAR 0 1
30442: PPUSH
30443: CALL_OW 477
30447: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30448: LD_ADDR_VAR 0 10
30452: PUSH
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 478
30462: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30463: LD_VAR 0 9
30467: NOT
30468: PUSH
30469: LD_VAR 0 11
30473: NOT
30474: OR
30475: PUSH
30476: LD_VAR 0 12
30480: NOT
30481: OR
30482: PUSH
30483: LD_VAR 0 10
30487: NOT
30488: OR
30489: IFFALSE 30524
// begin result := [ chassis , engine , control , weapon ] ;
30491: LD_ADDR_VAR 0 6
30495: PUSH
30496: LD_VAR 0 2
30500: PUSH
30501: LD_VAR 0 3
30505: PUSH
30506: LD_VAR 0 4
30510: PUSH
30511: LD_VAR 0 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// exit ;
30522: GO 30815
// end ; if not chassis in _chassis then
30524: LD_VAR 0 2
30528: PUSH
30529: LD_VAR 0 9
30533: IN
30534: NOT
30535: IFFALSE 30561
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30537: LD_ADDR_VAR 0 2
30541: PUSH
30542: LD_VAR 0 9
30546: PUSH
30547: LD_INT 1
30549: PPUSH
30550: LD_VAR 0 9
30554: PPUSH
30555: CALL_OW 12
30559: ARRAY
30560: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30561: LD_VAR 0 2
30565: PPUSH
30566: LD_VAR 0 3
30570: PPUSH
30571: CALL 30820 0 2
30575: NOT
30576: IFFALSE 30635
// repeat engine := _engine [ 1 ] ;
30578: LD_ADDR_VAR 0 3
30582: PUSH
30583: LD_VAR 0 11
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30592: LD_ADDR_VAR 0 11
30596: PUSH
30597: LD_VAR 0 11
30601: PPUSH
30602: LD_INT 1
30604: PPUSH
30605: CALL_OW 3
30609: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30610: LD_VAR 0 2
30614: PPUSH
30615: LD_VAR 0 3
30619: PPUSH
30620: CALL 30820 0 2
30624: PUSH
30625: LD_VAR 0 11
30629: PUSH
30630: EMPTY
30631: EQUAL
30632: OR
30633: IFFALSE 30578
// if not control in _control then
30635: LD_VAR 0 4
30639: PUSH
30640: LD_VAR 0 12
30644: IN
30645: NOT
30646: IFFALSE 30672
// control := _control [ rand ( 1 , _control ) ] ;
30648: LD_ADDR_VAR 0 4
30652: PUSH
30653: LD_VAR 0 12
30657: PUSH
30658: LD_INT 1
30660: PPUSH
30661: LD_VAR 0 12
30665: PPUSH
30666: CALL_OW 12
30670: ARRAY
30671: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30672: LD_VAR 0 2
30676: PPUSH
30677: LD_VAR 0 5
30681: PPUSH
30682: CALL 31040 0 2
30686: NOT
30687: IFFALSE 30746
// repeat weapon := _weapon [ 1 ] ;
30689: LD_ADDR_VAR 0 5
30693: PUSH
30694: LD_VAR 0 10
30698: PUSH
30699: LD_INT 1
30701: ARRAY
30702: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30703: LD_ADDR_VAR 0 10
30707: PUSH
30708: LD_VAR 0 10
30712: PPUSH
30713: LD_INT 1
30715: PPUSH
30716: CALL_OW 3
30720: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30721: LD_VAR 0 2
30725: PPUSH
30726: LD_VAR 0 5
30730: PPUSH
30731: CALL 31040 0 2
30735: PUSH
30736: LD_VAR 0 10
30740: PUSH
30741: EMPTY
30742: EQUAL
30743: OR
30744: IFFALSE 30689
// result := [ ] ;
30746: LD_ADDR_VAR 0 6
30750: PUSH
30751: EMPTY
30752: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 2
30762: PPUSH
30763: LD_VAR 0 3
30767: PPUSH
30768: LD_VAR 0 4
30772: PPUSH
30773: LD_VAR 0 5
30777: PPUSH
30778: CALL_OW 448
30782: IFFALSE 30815
// result := [ chassis , engine , control , weapon ] ;
30784: LD_ADDR_VAR 0 6
30788: PUSH
30789: LD_VAR 0 2
30793: PUSH
30794: LD_VAR 0 3
30798: PUSH
30799: LD_VAR 0 4
30803: PUSH
30804: LD_VAR 0 5
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: ST_TO_ADDR
// end ;
30815: LD_VAR 0 6
30819: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30820: LD_INT 0
30822: PPUSH
// if not chassis or not engine then
30823: LD_VAR 0 1
30827: NOT
30828: PUSH
30829: LD_VAR 0 2
30833: NOT
30834: OR
30835: IFFALSE 30839
// exit ;
30837: GO 31035
// case engine of engine_solar :
30839: LD_VAR 0 2
30843: PUSH
30844: LD_INT 2
30846: DOUBLE
30847: EQUAL
30848: IFTRUE 30852
30850: GO 30890
30852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30853: LD_ADDR_VAR 0 3
30857: PUSH
30858: LD_INT 11
30860: PUSH
30861: LD_INT 12
30863: PUSH
30864: LD_INT 13
30866: PUSH
30867: LD_INT 14
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: LD_INT 3
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: ST_TO_ADDR
30888: GO 31019
30890: LD_INT 1
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30960
30898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30899: LD_ADDR_VAR 0 3
30903: PUSH
30904: LD_INT 11
30906: PUSH
30907: LD_INT 12
30909: PUSH
30910: LD_INT 13
30912: PUSH
30913: LD_INT 14
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: LD_INT 3
30924: PUSH
30925: LD_INT 4
30927: PUSH
30928: LD_INT 5
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 23
30936: PUSH
30937: LD_INT 22
30939: PUSH
30940: LD_INT 24
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: ST_TO_ADDR
30958: GO 31019
30960: LD_INT 3
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 31018
30968: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30969: LD_ADDR_VAR 0 3
30973: PUSH
30974: LD_INT 13
30976: PUSH
30977: LD_INT 14
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: LD_INT 4
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: LD_INT 21
30994: PUSH
30995: LD_INT 22
30997: PUSH
30998: LD_INT 23
31000: PUSH
31001: LD_INT 24
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: ST_TO_ADDR
31016: GO 31019
31018: POP
// result := ( chassis in result ) ;
31019: LD_ADDR_VAR 0 3
31023: PUSH
31024: LD_VAR 0 1
31028: PUSH
31029: LD_VAR 0 3
31033: IN
31034: ST_TO_ADDR
// end ;
31035: LD_VAR 0 3
31039: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31040: LD_INT 0
31042: PPUSH
// if not chassis or not weapon then
31043: LD_VAR 0 1
31047: NOT
31048: PUSH
31049: LD_VAR 0 2
31053: NOT
31054: OR
31055: IFFALSE 31059
// exit ;
31057: GO 32119
// case weapon of us_machine_gun :
31059: LD_VAR 0 2
31063: PUSH
31064: LD_INT 2
31066: DOUBLE
31067: EQUAL
31068: IFTRUE 31072
31070: GO 31102
31072: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31073: LD_ADDR_VAR 0 3
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 3
31086: PUSH
31087: LD_INT 4
31089: PUSH
31090: LD_INT 5
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: ST_TO_ADDR
31100: GO 32103
31102: LD_INT 3
31104: DOUBLE
31105: EQUAL
31106: IFTRUE 31110
31108: GO 31140
31110: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31111: LD_ADDR_VAR 0 3
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 4
31127: PUSH
31128: LD_INT 5
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: ST_TO_ADDR
31138: GO 32103
31140: LD_INT 11
31142: DOUBLE
31143: EQUAL
31144: IFTRUE 31148
31146: GO 31178
31148: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31149: LD_ADDR_VAR 0 3
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: LD_INT 4
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: ST_TO_ADDR
31176: GO 32103
31178: LD_INT 4
31180: DOUBLE
31181: EQUAL
31182: IFTRUE 31186
31184: GO 31212
31186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31187: LD_ADDR_VAR 0 3
31191: PUSH
31192: LD_INT 2
31194: PUSH
31195: LD_INT 3
31197: PUSH
31198: LD_INT 4
31200: PUSH
31201: LD_INT 5
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
31210: GO 32103
31212: LD_INT 5
31214: DOUBLE
31215: EQUAL
31216: IFTRUE 31220
31218: GO 31246
31220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: LD_INT 3
31231: PUSH
31232: LD_INT 4
31234: PUSH
31235: LD_INT 5
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: ST_TO_ADDR
31244: GO 32103
31246: LD_INT 9
31248: DOUBLE
31249: EQUAL
31250: IFTRUE 31254
31252: GO 31280
31254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31255: LD_ADDR_VAR 0 3
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: LD_INT 3
31265: PUSH
31266: LD_INT 4
31268: PUSH
31269: LD_INT 5
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: ST_TO_ADDR
31278: GO 32103
31280: LD_INT 7
31282: DOUBLE
31283: EQUAL
31284: IFTRUE 31288
31286: GO 31314
31288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31289: LD_ADDR_VAR 0 3
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: LD_INT 3
31299: PUSH
31300: LD_INT 4
31302: PUSH
31303: LD_INT 5
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: ST_TO_ADDR
31312: GO 32103
31314: LD_INT 12
31316: DOUBLE
31317: EQUAL
31318: IFTRUE 31322
31320: GO 31348
31322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31323: LD_ADDR_VAR 0 3
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 3
31333: PUSH
31334: LD_INT 4
31336: PUSH
31337: LD_INT 5
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
31346: GO 32103
31348: LD_INT 13
31350: DOUBLE
31351: EQUAL
31352: IFTRUE 31356
31354: GO 31382
31356: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31357: LD_ADDR_VAR 0 3
31361: PUSH
31362: LD_INT 2
31364: PUSH
31365: LD_INT 3
31367: PUSH
31368: LD_INT 4
31370: PUSH
31371: LD_INT 5
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: ST_TO_ADDR
31380: GO 32103
31382: LD_INT 14
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31408
31390: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31391: LD_ADDR_VAR 0 3
31395: PUSH
31396: LD_INT 4
31398: PUSH
31399: LD_INT 5
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: ST_TO_ADDR
31406: GO 32103
31408: LD_INT 6
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31434
31416: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31417: LD_ADDR_VAR 0 3
31421: PUSH
31422: LD_INT 4
31424: PUSH
31425: LD_INT 5
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: ST_TO_ADDR
31432: GO 32103
31434: LD_INT 10
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31460
31442: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31443: LD_ADDR_VAR 0 3
31447: PUSH
31448: LD_INT 4
31450: PUSH
31451: LD_INT 5
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: ST_TO_ADDR
31458: GO 32103
31460: LD_INT 22
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31468
31466: GO 31494
31468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31469: LD_ADDR_VAR 0 3
31473: PUSH
31474: LD_INT 11
31476: PUSH
31477: LD_INT 12
31479: PUSH
31480: LD_INT 13
31482: PUSH
31483: LD_INT 14
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: ST_TO_ADDR
31492: GO 32103
31494: LD_INT 23
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31528
31502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31503: LD_ADDR_VAR 0 3
31507: PUSH
31508: LD_INT 11
31510: PUSH
31511: LD_INT 12
31513: PUSH
31514: LD_INT 13
31516: PUSH
31517: LD_INT 14
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: ST_TO_ADDR
31526: GO 32103
31528: LD_INT 24
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31562
31536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_INT 11
31544: PUSH
31545: LD_INT 12
31547: PUSH
31548: LD_INT 13
31550: PUSH
31551: LD_INT 14
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: ST_TO_ADDR
31560: GO 32103
31562: LD_INT 30
31564: DOUBLE
31565: EQUAL
31566: IFTRUE 31570
31568: GO 31596
31570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31571: LD_ADDR_VAR 0 3
31575: PUSH
31576: LD_INT 11
31578: PUSH
31579: LD_INT 12
31581: PUSH
31582: LD_INT 13
31584: PUSH
31585: LD_INT 14
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
31594: GO 32103
31596: LD_INT 25
31598: DOUBLE
31599: EQUAL
31600: IFTRUE 31604
31602: GO 31622
31604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31605: LD_ADDR_VAR 0 3
31609: PUSH
31610: LD_INT 13
31612: PUSH
31613: LD_INT 14
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: ST_TO_ADDR
31620: GO 32103
31622: LD_INT 27
31624: DOUBLE
31625: EQUAL
31626: IFTRUE 31630
31628: GO 31648
31630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31631: LD_ADDR_VAR 0 3
31635: PUSH
31636: LD_INT 13
31638: PUSH
31639: LD_INT 14
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: ST_TO_ADDR
31646: GO 32103
31648: LD_INT 92
31650: DOUBLE
31651: EQUAL
31652: IFTRUE 31656
31654: GO 31682
31656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31657: LD_ADDR_VAR 0 3
31661: PUSH
31662: LD_INT 11
31664: PUSH
31665: LD_INT 12
31667: PUSH
31668: LD_INT 13
31670: PUSH
31671: LD_INT 14
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
31680: GO 32103
31682: LD_INT 28
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31708
31690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31691: LD_ADDR_VAR 0 3
31695: PUSH
31696: LD_INT 13
31698: PUSH
31699: LD_INT 14
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: ST_TO_ADDR
31706: GO 32103
31708: LD_INT 29
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31716
31714: GO 31734
31716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31717: LD_ADDR_VAR 0 3
31721: PUSH
31722: LD_INT 13
31724: PUSH
31725: LD_INT 14
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: ST_TO_ADDR
31732: GO 32103
31734: LD_INT 31
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31760
31742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31743: LD_ADDR_VAR 0 3
31747: PUSH
31748: LD_INT 13
31750: PUSH
31751: LD_INT 14
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: ST_TO_ADDR
31758: GO 32103
31760: LD_INT 26
31762: DOUBLE
31763: EQUAL
31764: IFTRUE 31768
31766: GO 31786
31768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31769: LD_ADDR_VAR 0 3
31773: PUSH
31774: LD_INT 13
31776: PUSH
31777: LD_INT 14
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: ST_TO_ADDR
31784: GO 32103
31786: LD_INT 42
31788: DOUBLE
31789: EQUAL
31790: IFTRUE 31794
31792: GO 31820
31794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31795: LD_ADDR_VAR 0 3
31799: PUSH
31800: LD_INT 21
31802: PUSH
31803: LD_INT 22
31805: PUSH
31806: LD_INT 23
31808: PUSH
31809: LD_INT 24
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: ST_TO_ADDR
31818: GO 32103
31820: LD_INT 43
31822: DOUBLE
31823: EQUAL
31824: IFTRUE 31828
31826: GO 31854
31828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31829: LD_ADDR_VAR 0 3
31833: PUSH
31834: LD_INT 21
31836: PUSH
31837: LD_INT 22
31839: PUSH
31840: LD_INT 23
31842: PUSH
31843: LD_INT 24
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: ST_TO_ADDR
31852: GO 32103
31854: LD_INT 44
31856: DOUBLE
31857: EQUAL
31858: IFTRUE 31862
31860: GO 31888
31862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31863: LD_ADDR_VAR 0 3
31867: PUSH
31868: LD_INT 21
31870: PUSH
31871: LD_INT 22
31873: PUSH
31874: LD_INT 23
31876: PUSH
31877: LD_INT 24
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
31886: GO 32103
31888: LD_INT 45
31890: DOUBLE
31891: EQUAL
31892: IFTRUE 31896
31894: GO 31922
31896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31897: LD_ADDR_VAR 0 3
31901: PUSH
31902: LD_INT 21
31904: PUSH
31905: LD_INT 22
31907: PUSH
31908: LD_INT 23
31910: PUSH
31911: LD_INT 24
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: ST_TO_ADDR
31920: GO 32103
31922: LD_INT 49
31924: DOUBLE
31925: EQUAL
31926: IFTRUE 31930
31928: GO 31956
31930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31931: LD_ADDR_VAR 0 3
31935: PUSH
31936: LD_INT 21
31938: PUSH
31939: LD_INT 22
31941: PUSH
31942: LD_INT 23
31944: PUSH
31945: LD_INT 24
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: ST_TO_ADDR
31954: GO 32103
31956: LD_INT 51
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31990
31964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31965: LD_ADDR_VAR 0 3
31969: PUSH
31970: LD_INT 21
31972: PUSH
31973: LD_INT 22
31975: PUSH
31976: LD_INT 23
31978: PUSH
31979: LD_INT 24
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: ST_TO_ADDR
31988: GO 32103
31990: LD_INT 52
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32024
31998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31999: LD_ADDR_VAR 0 3
32003: PUSH
32004: LD_INT 21
32006: PUSH
32007: LD_INT 22
32009: PUSH
32010: LD_INT 23
32012: PUSH
32013: LD_INT 24
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: ST_TO_ADDR
32022: GO 32103
32024: LD_INT 53
32026: DOUBLE
32027: EQUAL
32028: IFTRUE 32032
32030: GO 32050
32032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32033: LD_ADDR_VAR 0 3
32037: PUSH
32038: LD_INT 23
32040: PUSH
32041: LD_INT 24
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: ST_TO_ADDR
32048: GO 32103
32050: LD_INT 46
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32076
32058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32059: LD_ADDR_VAR 0 3
32063: PUSH
32064: LD_INT 23
32066: PUSH
32067: LD_INT 24
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: ST_TO_ADDR
32074: GO 32103
32076: LD_INT 47
32078: DOUBLE
32079: EQUAL
32080: IFTRUE 32084
32082: GO 32102
32084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32085: LD_ADDR_VAR 0 3
32089: PUSH
32090: LD_INT 23
32092: PUSH
32093: LD_INT 24
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: ST_TO_ADDR
32100: GO 32103
32102: POP
// result := ( chassis in result ) ;
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_VAR 0 1
32112: PUSH
32113: LD_VAR 0 3
32117: IN
32118: ST_TO_ADDR
// end ;
32119: LD_VAR 0 3
32123: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32124: LD_INT 0
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
32131: PPUSH
32132: PPUSH
// result := array ;
32133: LD_ADDR_VAR 0 5
32137: PUSH
32138: LD_VAR 0 1
32142: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32143: LD_VAR 0 1
32147: NOT
32148: PUSH
32149: LD_VAR 0 2
32153: NOT
32154: OR
32155: PUSH
32156: LD_VAR 0 3
32160: NOT
32161: OR
32162: PUSH
32163: LD_VAR 0 2
32167: PUSH
32168: LD_VAR 0 1
32172: GREATER
32173: OR
32174: PUSH
32175: LD_VAR 0 3
32179: PUSH
32180: LD_VAR 0 1
32184: GREATER
32185: OR
32186: IFFALSE 32190
// exit ;
32188: GO 32486
// if direction then
32190: LD_VAR 0 4
32194: IFFALSE 32258
// begin d := 1 ;
32196: LD_ADDR_VAR 0 9
32200: PUSH
32201: LD_INT 1
32203: ST_TO_ADDR
// if i_from > i_to then
32204: LD_VAR 0 2
32208: PUSH
32209: LD_VAR 0 3
32213: GREATER
32214: IFFALSE 32240
// length := ( array - i_from ) + i_to else
32216: LD_ADDR_VAR 0 11
32220: PUSH
32221: LD_VAR 0 1
32225: PUSH
32226: LD_VAR 0 2
32230: MINUS
32231: PUSH
32232: LD_VAR 0 3
32236: PLUS
32237: ST_TO_ADDR
32238: GO 32256
// length := i_to - i_from ;
32240: LD_ADDR_VAR 0 11
32244: PUSH
32245: LD_VAR 0 3
32249: PUSH
32250: LD_VAR 0 2
32254: MINUS
32255: ST_TO_ADDR
// end else
32256: GO 32319
// begin d := - 1 ;
32258: LD_ADDR_VAR 0 9
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: ST_TO_ADDR
// if i_from > i_to then
32267: LD_VAR 0 2
32271: PUSH
32272: LD_VAR 0 3
32276: GREATER
32277: IFFALSE 32297
// length := i_from - i_to else
32279: LD_ADDR_VAR 0 11
32283: PUSH
32284: LD_VAR 0 2
32288: PUSH
32289: LD_VAR 0 3
32293: MINUS
32294: ST_TO_ADDR
32295: GO 32319
// length := ( array - i_to ) + i_from ;
32297: LD_ADDR_VAR 0 11
32301: PUSH
32302: LD_VAR 0 1
32306: PUSH
32307: LD_VAR 0 3
32311: MINUS
32312: PUSH
32313: LD_VAR 0 2
32317: PLUS
32318: ST_TO_ADDR
// end ; if not length then
32319: LD_VAR 0 11
32323: NOT
32324: IFFALSE 32328
// exit ;
32326: GO 32486
// tmp := array ;
32328: LD_ADDR_VAR 0 10
32332: PUSH
32333: LD_VAR 0 1
32337: ST_TO_ADDR
// for i = 1 to length do
32338: LD_ADDR_VAR 0 6
32342: PUSH
32343: DOUBLE
32344: LD_INT 1
32346: DEC
32347: ST_TO_ADDR
32348: LD_VAR 0 11
32352: PUSH
32353: FOR_TO
32354: IFFALSE 32474
// begin for j = 1 to array do
32356: LD_ADDR_VAR 0 7
32360: PUSH
32361: DOUBLE
32362: LD_INT 1
32364: DEC
32365: ST_TO_ADDR
32366: LD_VAR 0 1
32370: PUSH
32371: FOR_TO
32372: IFFALSE 32460
// begin k := j + d ;
32374: LD_ADDR_VAR 0 8
32378: PUSH
32379: LD_VAR 0 7
32383: PUSH
32384: LD_VAR 0 9
32388: PLUS
32389: ST_TO_ADDR
// if k > array then
32390: LD_VAR 0 8
32394: PUSH
32395: LD_VAR 0 1
32399: GREATER
32400: IFFALSE 32410
// k := 1 ;
32402: LD_ADDR_VAR 0 8
32406: PUSH
32407: LD_INT 1
32409: ST_TO_ADDR
// if not k then
32410: LD_VAR 0 8
32414: NOT
32415: IFFALSE 32427
// k := array ;
32417: LD_ADDR_VAR 0 8
32421: PUSH
32422: LD_VAR 0 1
32426: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32427: LD_ADDR_VAR 0 10
32431: PUSH
32432: LD_VAR 0 10
32436: PPUSH
32437: LD_VAR 0 8
32441: PPUSH
32442: LD_VAR 0 1
32446: PUSH
32447: LD_VAR 0 7
32451: ARRAY
32452: PPUSH
32453: CALL_OW 1
32457: ST_TO_ADDR
// end ;
32458: GO 32371
32460: POP
32461: POP
// array := tmp ;
32462: LD_ADDR_VAR 0 1
32466: PUSH
32467: LD_VAR 0 10
32471: ST_TO_ADDR
// end ;
32472: GO 32353
32474: POP
32475: POP
// result := array ;
32476: LD_ADDR_VAR 0 5
32480: PUSH
32481: LD_VAR 0 1
32485: ST_TO_ADDR
// end ;
32486: LD_VAR 0 5
32490: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32491: LD_INT 0
32493: PPUSH
32494: PPUSH
// result := 0 ;
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_INT 0
32502: ST_TO_ADDR
// if not array or not value in array then
32503: LD_VAR 0 1
32507: NOT
32508: PUSH
32509: LD_VAR 0 2
32513: PUSH
32514: LD_VAR 0 1
32518: IN
32519: NOT
32520: OR
32521: IFFALSE 32525
// exit ;
32523: GO 32579
// for i = 1 to array do
32525: LD_ADDR_VAR 0 4
32529: PUSH
32530: DOUBLE
32531: LD_INT 1
32533: DEC
32534: ST_TO_ADDR
32535: LD_VAR 0 1
32539: PUSH
32540: FOR_TO
32541: IFFALSE 32577
// if value = array [ i ] then
32543: LD_VAR 0 2
32547: PUSH
32548: LD_VAR 0 1
32552: PUSH
32553: LD_VAR 0 4
32557: ARRAY
32558: EQUAL
32559: IFFALSE 32575
// begin result := i ;
32561: LD_ADDR_VAR 0 3
32565: PUSH
32566: LD_VAR 0 4
32570: ST_TO_ADDR
// exit ;
32571: POP
32572: POP
32573: GO 32579
// end ;
32575: GO 32540
32577: POP
32578: POP
// end ;
32579: LD_VAR 0 3
32583: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32584: LD_INT 0
32586: PPUSH
// vc_chassis := chassis ;
32587: LD_ADDR_OWVAR 37
32591: PUSH
32592: LD_VAR 0 1
32596: ST_TO_ADDR
// vc_engine := engine ;
32597: LD_ADDR_OWVAR 39
32601: PUSH
32602: LD_VAR 0 2
32606: ST_TO_ADDR
// vc_control := control ;
32607: LD_ADDR_OWVAR 38
32611: PUSH
32612: LD_VAR 0 3
32616: ST_TO_ADDR
// vc_weapon := weapon ;
32617: LD_ADDR_OWVAR 40
32621: PUSH
32622: LD_VAR 0 4
32626: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32627: LD_ADDR_OWVAR 41
32631: PUSH
32632: LD_VAR 0 5
32636: ST_TO_ADDR
// end ;
32637: LD_VAR 0 6
32641: RET
// export function WantPlant ( unit ) ; var task ; begin
32642: LD_INT 0
32644: PPUSH
32645: PPUSH
// result := false ;
32646: LD_ADDR_VAR 0 2
32650: PUSH
32651: LD_INT 0
32653: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32654: LD_ADDR_VAR 0 3
32658: PUSH
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 437
32668: ST_TO_ADDR
// if task then
32669: LD_VAR 0 3
32673: IFFALSE 32701
// if task [ 1 ] [ 1 ] = p then
32675: LD_VAR 0 3
32679: PUSH
32680: LD_INT 1
32682: ARRAY
32683: PUSH
32684: LD_INT 1
32686: ARRAY
32687: PUSH
32688: LD_STRING p
32690: EQUAL
32691: IFFALSE 32701
// result := true ;
32693: LD_ADDR_VAR 0 2
32697: PUSH
32698: LD_INT 1
32700: ST_TO_ADDR
// end ;
32701: LD_VAR 0 2
32705: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32706: LD_INT 0
32708: PPUSH
32709: PPUSH
32710: PPUSH
32711: PPUSH
// if pos < 1 then
32712: LD_VAR 0 2
32716: PUSH
32717: LD_INT 1
32719: LESS
32720: IFFALSE 32724
// exit ;
32722: GO 33027
// if pos = 1 then
32724: LD_VAR 0 2
32728: PUSH
32729: LD_INT 1
32731: EQUAL
32732: IFFALSE 32765
// result := Replace ( arr , pos [ 1 ] , value ) else
32734: LD_ADDR_VAR 0 4
32738: PUSH
32739: LD_VAR 0 1
32743: PPUSH
32744: LD_VAR 0 2
32748: PUSH
32749: LD_INT 1
32751: ARRAY
32752: PPUSH
32753: LD_VAR 0 3
32757: PPUSH
32758: CALL_OW 1
32762: ST_TO_ADDR
32763: GO 33027
// begin tmp := arr ;
32765: LD_ADDR_VAR 0 6
32769: PUSH
32770: LD_VAR 0 1
32774: ST_TO_ADDR
// s_arr := [ tmp ] ;
32775: LD_ADDR_VAR 0 7
32779: PUSH
32780: LD_VAR 0 6
32784: PUSH
32785: EMPTY
32786: LIST
32787: ST_TO_ADDR
// for i = 1 to pos - 1 do
32788: LD_ADDR_VAR 0 5
32792: PUSH
32793: DOUBLE
32794: LD_INT 1
32796: DEC
32797: ST_TO_ADDR
32798: LD_VAR 0 2
32802: PUSH
32803: LD_INT 1
32805: MINUS
32806: PUSH
32807: FOR_TO
32808: IFFALSE 32853
// begin tmp := tmp [ pos [ i ] ] ;
32810: LD_ADDR_VAR 0 6
32814: PUSH
32815: LD_VAR 0 6
32819: PUSH
32820: LD_VAR 0 2
32824: PUSH
32825: LD_VAR 0 5
32829: ARRAY
32830: ARRAY
32831: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32832: LD_ADDR_VAR 0 7
32836: PUSH
32837: LD_VAR 0 7
32841: PUSH
32842: LD_VAR 0 6
32846: PUSH
32847: EMPTY
32848: LIST
32849: ADD
32850: ST_TO_ADDR
// end ;
32851: GO 32807
32853: POP
32854: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32855: LD_ADDR_VAR 0 6
32859: PUSH
32860: LD_VAR 0 6
32864: PPUSH
32865: LD_VAR 0 2
32869: PUSH
32870: LD_VAR 0 2
32874: ARRAY
32875: PPUSH
32876: LD_VAR 0 3
32880: PPUSH
32881: CALL_OW 1
32885: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32886: LD_ADDR_VAR 0 7
32890: PUSH
32891: LD_VAR 0 7
32895: PPUSH
32896: LD_VAR 0 7
32900: PPUSH
32901: LD_VAR 0 6
32905: PPUSH
32906: CALL_OW 1
32910: ST_TO_ADDR
// for i = s_arr downto 2 do
32911: LD_ADDR_VAR 0 5
32915: PUSH
32916: DOUBLE
32917: LD_VAR 0 7
32921: INC
32922: ST_TO_ADDR
32923: LD_INT 2
32925: PUSH
32926: FOR_DOWNTO
32927: IFFALSE 33011
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32929: LD_ADDR_VAR 0 6
32933: PUSH
32934: LD_VAR 0 7
32938: PUSH
32939: LD_VAR 0 5
32943: PUSH
32944: LD_INT 1
32946: MINUS
32947: ARRAY
32948: PPUSH
32949: LD_VAR 0 2
32953: PUSH
32954: LD_VAR 0 5
32958: PUSH
32959: LD_INT 1
32961: MINUS
32962: ARRAY
32963: PPUSH
32964: LD_VAR 0 7
32968: PUSH
32969: LD_VAR 0 5
32973: ARRAY
32974: PPUSH
32975: CALL_OW 1
32979: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32980: LD_ADDR_VAR 0 7
32984: PUSH
32985: LD_VAR 0 7
32989: PPUSH
32990: LD_VAR 0 5
32994: PUSH
32995: LD_INT 1
32997: MINUS
32998: PPUSH
32999: LD_VAR 0 6
33003: PPUSH
33004: CALL_OW 1
33008: ST_TO_ADDR
// end ;
33009: GO 32926
33011: POP
33012: POP
// result := s_arr [ 1 ] ;
33013: LD_ADDR_VAR 0 4
33017: PUSH
33018: LD_VAR 0 7
33022: PUSH
33023: LD_INT 1
33025: ARRAY
33026: ST_TO_ADDR
// end ; end ;
33027: LD_VAR 0 4
33031: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33032: LD_INT 0
33034: PPUSH
33035: PPUSH
// if not list then
33036: LD_VAR 0 1
33040: NOT
33041: IFFALSE 33045
// exit ;
33043: GO 33136
// i := list [ pos1 ] ;
33045: LD_ADDR_VAR 0 5
33049: PUSH
33050: LD_VAR 0 1
33054: PUSH
33055: LD_VAR 0 2
33059: ARRAY
33060: ST_TO_ADDR
// if not i then
33061: LD_VAR 0 5
33065: NOT
33066: IFFALSE 33070
// exit ;
33068: GO 33136
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33070: LD_ADDR_VAR 0 1
33074: PUSH
33075: LD_VAR 0 1
33079: PPUSH
33080: LD_VAR 0 2
33084: PPUSH
33085: LD_VAR 0 1
33089: PUSH
33090: LD_VAR 0 3
33094: ARRAY
33095: PPUSH
33096: CALL_OW 1
33100: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33101: LD_ADDR_VAR 0 1
33105: PUSH
33106: LD_VAR 0 1
33110: PPUSH
33111: LD_VAR 0 3
33115: PPUSH
33116: LD_VAR 0 5
33120: PPUSH
33121: CALL_OW 1
33125: ST_TO_ADDR
// result := list ;
33126: LD_ADDR_VAR 0 4
33130: PUSH
33131: LD_VAR 0 1
33135: ST_TO_ADDR
// end ;
33136: LD_VAR 0 4
33140: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33141: LD_INT 0
33143: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33144: LD_ADDR_VAR 0 5
33148: PUSH
33149: LD_VAR 0 1
33153: PPUSH
33154: CALL_OW 250
33158: PPUSH
33159: LD_VAR 0 1
33163: PPUSH
33164: CALL_OW 251
33168: PPUSH
33169: LD_VAR 0 2
33173: PPUSH
33174: LD_VAR 0 3
33178: PPUSH
33179: LD_VAR 0 4
33183: PPUSH
33184: CALL 33562 0 5
33188: ST_TO_ADDR
// end ;
33189: LD_VAR 0 5
33193: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33194: LD_INT 0
33196: PPUSH
33197: PPUSH
33198: PPUSH
33199: PPUSH
// if not list or not unit then
33200: LD_VAR 0 2
33204: NOT
33205: PUSH
33206: LD_VAR 0 1
33210: NOT
33211: OR
33212: IFFALSE 33216
// exit ;
33214: GO 33557
// result := [ ] ;
33216: LD_ADDR_VAR 0 5
33220: PUSH
33221: EMPTY
33222: ST_TO_ADDR
// for i in list do
33223: LD_ADDR_VAR 0 6
33227: PUSH
33228: LD_VAR 0 2
33232: PUSH
33233: FOR_IN
33234: IFFALSE 33452
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33236: LD_ADDR_VAR 0 8
33240: PUSH
33241: LD_VAR 0 1
33245: PPUSH
33246: LD_VAR 0 6
33250: PUSH
33251: LD_INT 1
33253: ARRAY
33254: PPUSH
33255: LD_VAR 0 6
33259: PUSH
33260: LD_INT 2
33262: ARRAY
33263: PPUSH
33264: CALL_OW 297
33268: ST_TO_ADDR
// if not Count ( result ) then
33269: LD_VAR 0 5
33273: PPUSH
33274: CALL 29846 0 1
33278: NOT
33279: IFFALSE 33312
// begin result := Join ( result , [ i , tmp ] ) ;
33281: LD_ADDR_VAR 0 5
33285: PUSH
33286: LD_VAR 0 5
33290: PPUSH
33291: LD_VAR 0 6
33295: PUSH
33296: LD_VAR 0 8
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PPUSH
33305: CALL 65435 0 2
33309: ST_TO_ADDR
// continue ;
33310: GO 33233
// end ; if result [ result ] [ 2 ] <= tmp then
33312: LD_VAR 0 5
33316: PUSH
33317: LD_VAR 0 5
33321: ARRAY
33322: PUSH
33323: LD_INT 2
33325: ARRAY
33326: PUSH
33327: LD_VAR 0 8
33331: LESSEQUAL
33332: IFFALSE 33365
// result := Join ( result , [ i , tmp ] ) else
33334: LD_ADDR_VAR 0 5
33338: PUSH
33339: LD_VAR 0 5
33343: PPUSH
33344: LD_VAR 0 6
33348: PUSH
33349: LD_VAR 0 8
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PPUSH
33358: CALL 65435 0 2
33362: ST_TO_ADDR
33363: GO 33450
// begin for j := 1 to Count ( result ) do
33365: LD_ADDR_VAR 0 7
33369: PUSH
33370: DOUBLE
33371: LD_INT 1
33373: DEC
33374: ST_TO_ADDR
33375: LD_VAR 0 5
33379: PPUSH
33380: CALL 29846 0 1
33384: PUSH
33385: FOR_TO
33386: IFFALSE 33448
// begin if tmp < result [ j ] [ 2 ] then
33388: LD_VAR 0 8
33392: PUSH
33393: LD_VAR 0 5
33397: PUSH
33398: LD_VAR 0 7
33402: ARRAY
33403: PUSH
33404: LD_INT 2
33406: ARRAY
33407: LESS
33408: IFFALSE 33446
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33410: LD_ADDR_VAR 0 5
33414: PUSH
33415: LD_VAR 0 5
33419: PPUSH
33420: LD_VAR 0 7
33424: PPUSH
33425: LD_VAR 0 6
33429: PUSH
33430: LD_VAR 0 8
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 2
33443: ST_TO_ADDR
// break ;
33444: GO 33448
// end ; end ;
33446: GO 33385
33448: POP
33449: POP
// end ; end ;
33450: GO 33233
33452: POP
33453: POP
// if result and not asc then
33454: LD_VAR 0 5
33458: PUSH
33459: LD_VAR 0 3
33463: NOT
33464: AND
33465: IFFALSE 33482
// result := ReverseArray ( result ) ;
33467: LD_ADDR_VAR 0 5
33471: PUSH
33472: LD_VAR 0 5
33476: PPUSH
33477: CALL 60722 0 1
33481: ST_TO_ADDR
// tmp := [ ] ;
33482: LD_ADDR_VAR 0 8
33486: PUSH
33487: EMPTY
33488: ST_TO_ADDR
// if mode then
33489: LD_VAR 0 4
33493: IFFALSE 33557
// begin for i := 1 to result do
33495: LD_ADDR_VAR 0 6
33499: PUSH
33500: DOUBLE
33501: LD_INT 1
33503: DEC
33504: ST_TO_ADDR
33505: LD_VAR 0 5
33509: PUSH
33510: FOR_TO
33511: IFFALSE 33545
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33513: LD_ADDR_VAR 0 8
33517: PUSH
33518: LD_VAR 0 8
33522: PPUSH
33523: LD_VAR 0 5
33527: PUSH
33528: LD_VAR 0 6
33532: ARRAY
33533: PUSH
33534: LD_INT 1
33536: ARRAY
33537: PPUSH
33538: CALL 65435 0 2
33542: ST_TO_ADDR
33543: GO 33510
33545: POP
33546: POP
// result := tmp ;
33547: LD_ADDR_VAR 0 5
33551: PUSH
33552: LD_VAR 0 8
33556: ST_TO_ADDR
// end ; end ;
33557: LD_VAR 0 5
33561: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33562: LD_INT 0
33564: PPUSH
33565: PPUSH
33566: PPUSH
33567: PPUSH
// if not list then
33568: LD_VAR 0 3
33572: NOT
33573: IFFALSE 33577
// exit ;
33575: GO 33965
// result := [ ] ;
33577: LD_ADDR_VAR 0 6
33581: PUSH
33582: EMPTY
33583: ST_TO_ADDR
// for i in list do
33584: LD_ADDR_VAR 0 7
33588: PUSH
33589: LD_VAR 0 3
33593: PUSH
33594: FOR_IN
33595: IFFALSE 33797
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33597: LD_ADDR_VAR 0 9
33601: PUSH
33602: LD_VAR 0 7
33606: PPUSH
33607: LD_VAR 0 1
33611: PPUSH
33612: LD_VAR 0 2
33616: PPUSH
33617: CALL_OW 297
33621: ST_TO_ADDR
// if not result then
33622: LD_VAR 0 6
33626: NOT
33627: IFFALSE 33653
// result := [ [ i , tmp ] ] else
33629: LD_ADDR_VAR 0 6
33633: PUSH
33634: LD_VAR 0 7
33638: PUSH
33639: LD_VAR 0 9
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: ST_TO_ADDR
33651: GO 33795
// begin if result [ result ] [ 2 ] < tmp then
33653: LD_VAR 0 6
33657: PUSH
33658: LD_VAR 0 6
33662: ARRAY
33663: PUSH
33664: LD_INT 2
33666: ARRAY
33667: PUSH
33668: LD_VAR 0 9
33672: LESS
33673: IFFALSE 33715
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33675: LD_ADDR_VAR 0 6
33679: PUSH
33680: LD_VAR 0 6
33684: PPUSH
33685: LD_VAR 0 6
33689: PUSH
33690: LD_INT 1
33692: PLUS
33693: PPUSH
33694: LD_VAR 0 7
33698: PUSH
33699: LD_VAR 0 9
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PPUSH
33708: CALL_OW 2
33712: ST_TO_ADDR
33713: GO 33795
// for j = 1 to result do
33715: LD_ADDR_VAR 0 8
33719: PUSH
33720: DOUBLE
33721: LD_INT 1
33723: DEC
33724: ST_TO_ADDR
33725: LD_VAR 0 6
33729: PUSH
33730: FOR_TO
33731: IFFALSE 33793
// begin if tmp < result [ j ] [ 2 ] then
33733: LD_VAR 0 9
33737: PUSH
33738: LD_VAR 0 6
33742: PUSH
33743: LD_VAR 0 8
33747: ARRAY
33748: PUSH
33749: LD_INT 2
33751: ARRAY
33752: LESS
33753: IFFALSE 33791
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33755: LD_ADDR_VAR 0 6
33759: PUSH
33760: LD_VAR 0 6
33764: PPUSH
33765: LD_VAR 0 8
33769: PPUSH
33770: LD_VAR 0 7
33774: PUSH
33775: LD_VAR 0 9
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PPUSH
33784: CALL_OW 2
33788: ST_TO_ADDR
// break ;
33789: GO 33793
// end ; end ;
33791: GO 33730
33793: POP
33794: POP
// end ; end ;
33795: GO 33594
33797: POP
33798: POP
// if result and not asc then
33799: LD_VAR 0 6
33803: PUSH
33804: LD_VAR 0 4
33808: NOT
33809: AND
33810: IFFALSE 33885
// begin tmp := result ;
33812: LD_ADDR_VAR 0 9
33816: PUSH
33817: LD_VAR 0 6
33821: ST_TO_ADDR
// for i = tmp downto 1 do
33822: LD_ADDR_VAR 0 7
33826: PUSH
33827: DOUBLE
33828: LD_VAR 0 9
33832: INC
33833: ST_TO_ADDR
33834: LD_INT 1
33836: PUSH
33837: FOR_DOWNTO
33838: IFFALSE 33883
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33840: LD_ADDR_VAR 0 6
33844: PUSH
33845: LD_VAR 0 6
33849: PPUSH
33850: LD_VAR 0 9
33854: PUSH
33855: LD_VAR 0 7
33859: MINUS
33860: PUSH
33861: LD_INT 1
33863: PLUS
33864: PPUSH
33865: LD_VAR 0 9
33869: PUSH
33870: LD_VAR 0 7
33874: ARRAY
33875: PPUSH
33876: CALL_OW 1
33880: ST_TO_ADDR
33881: GO 33837
33883: POP
33884: POP
// end ; tmp := [ ] ;
33885: LD_ADDR_VAR 0 9
33889: PUSH
33890: EMPTY
33891: ST_TO_ADDR
// if mode then
33892: LD_VAR 0 5
33896: IFFALSE 33965
// begin for i = 1 to result do
33898: LD_ADDR_VAR 0 7
33902: PUSH
33903: DOUBLE
33904: LD_INT 1
33906: DEC
33907: ST_TO_ADDR
33908: LD_VAR 0 6
33912: PUSH
33913: FOR_TO
33914: IFFALSE 33953
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33916: LD_ADDR_VAR 0 9
33920: PUSH
33921: LD_VAR 0 9
33925: PPUSH
33926: LD_VAR 0 7
33930: PPUSH
33931: LD_VAR 0 6
33935: PUSH
33936: LD_VAR 0 7
33940: ARRAY
33941: PUSH
33942: LD_INT 1
33944: ARRAY
33945: PPUSH
33946: CALL_OW 1
33950: ST_TO_ADDR
33951: GO 33913
33953: POP
33954: POP
// result := tmp ;
33955: LD_ADDR_VAR 0 6
33959: PUSH
33960: LD_VAR 0 9
33964: ST_TO_ADDR
// end ; end ;
33965: LD_VAR 0 6
33969: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33978: LD_ADDR_VAR 0 5
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: EMPTY
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: ST_TO_ADDR
// if not x or not y then
34000: LD_VAR 0 2
34004: NOT
34005: PUSH
34006: LD_VAR 0 3
34010: NOT
34011: OR
34012: IFFALSE 34016
// exit ;
34014: GO 35666
// if not range then
34016: LD_VAR 0 4
34020: NOT
34021: IFFALSE 34031
// range := 10 ;
34023: LD_ADDR_VAR 0 4
34027: PUSH
34028: LD_INT 10
34030: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34031: LD_ADDR_VAR 0 8
34035: PUSH
34036: LD_INT 81
34038: PUSH
34039: LD_VAR 0 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 92
34050: PUSH
34051: LD_VAR 0 2
34055: PUSH
34056: LD_VAR 0 3
34060: PUSH
34061: LD_VAR 0 4
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 3
34074: PUSH
34075: LD_INT 21
34077: PUSH
34078: LD_INT 3
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: LIST
34093: PPUSH
34094: CALL_OW 69
34098: ST_TO_ADDR
// if not tmp then
34099: LD_VAR 0 8
34103: NOT
34104: IFFALSE 34108
// exit ;
34106: GO 35666
// for i in tmp do
34108: LD_ADDR_VAR 0 6
34112: PUSH
34113: LD_VAR 0 8
34117: PUSH
34118: FOR_IN
34119: IFFALSE 35641
// begin points := [ 0 , 0 , 0 ] ;
34121: LD_ADDR_VAR 0 9
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: ST_TO_ADDR
// bpoints := 1 ;
34140: LD_ADDR_VAR 0 10
34144: PUSH
34145: LD_INT 1
34147: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34148: LD_VAR 0 6
34152: PPUSH
34153: CALL_OW 247
34157: PUSH
34158: LD_INT 1
34160: DOUBLE
34161: EQUAL
34162: IFTRUE 34166
34164: GO 34744
34166: POP
// begin if GetClass ( i ) = 1 then
34167: LD_VAR 0 6
34171: PPUSH
34172: CALL_OW 257
34176: PUSH
34177: LD_INT 1
34179: EQUAL
34180: IFFALSE 34201
// points := [ 10 , 5 , 3 ] ;
34182: LD_ADDR_VAR 0 9
34186: PUSH
34187: LD_INT 10
34189: PUSH
34190: LD_INT 5
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34201: LD_VAR 0 6
34205: PPUSH
34206: CALL_OW 257
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: LD_INT 4
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: IN
34225: IFFALSE 34246
// points := [ 3 , 2 , 1 ] ;
34227: LD_ADDR_VAR 0 9
34231: PUSH
34232: LD_INT 3
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34246: LD_VAR 0 6
34250: PPUSH
34251: CALL_OW 257
34255: PUSH
34256: LD_INT 5
34258: EQUAL
34259: IFFALSE 34280
// points := [ 130 , 5 , 2 ] ;
34261: LD_ADDR_VAR 0 9
34265: PUSH
34266: LD_INT 130
34268: PUSH
34269: LD_INT 5
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34280: LD_VAR 0 6
34284: PPUSH
34285: CALL_OW 257
34289: PUSH
34290: LD_INT 8
34292: EQUAL
34293: IFFALSE 34314
// points := [ 35 , 35 , 30 ] ;
34295: LD_ADDR_VAR 0 9
34299: PUSH
34300: LD_INT 35
34302: PUSH
34303: LD_INT 35
34305: PUSH
34306: LD_INT 30
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: LIST
34313: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34314: LD_VAR 0 6
34318: PPUSH
34319: CALL_OW 257
34323: PUSH
34324: LD_INT 9
34326: EQUAL
34327: IFFALSE 34348
// points := [ 20 , 55 , 40 ] ;
34329: LD_ADDR_VAR 0 9
34333: PUSH
34334: LD_INT 20
34336: PUSH
34337: LD_INT 55
34339: PUSH
34340: LD_INT 40
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34348: LD_VAR 0 6
34352: PPUSH
34353: CALL_OW 257
34357: PUSH
34358: LD_INT 12
34360: PUSH
34361: LD_INT 16
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: IN
34368: IFFALSE 34389
// points := [ 5 , 3 , 2 ] ;
34370: LD_ADDR_VAR 0 9
34374: PUSH
34375: LD_INT 5
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34389: LD_VAR 0 6
34393: PPUSH
34394: CALL_OW 257
34398: PUSH
34399: LD_INT 17
34401: EQUAL
34402: IFFALSE 34423
// points := [ 100 , 50 , 75 ] ;
34404: LD_ADDR_VAR 0 9
34408: PUSH
34409: LD_INT 100
34411: PUSH
34412: LD_INT 50
34414: PUSH
34415: LD_INT 75
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34423: LD_VAR 0 6
34427: PPUSH
34428: CALL_OW 257
34432: PUSH
34433: LD_INT 15
34435: EQUAL
34436: IFFALSE 34457
// points := [ 10 , 5 , 3 ] ;
34438: LD_ADDR_VAR 0 9
34442: PUSH
34443: LD_INT 10
34445: PUSH
34446: LD_INT 5
34448: PUSH
34449: LD_INT 3
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34457: LD_VAR 0 6
34461: PPUSH
34462: CALL_OW 257
34466: PUSH
34467: LD_INT 14
34469: EQUAL
34470: IFFALSE 34491
// points := [ 10 , 0 , 0 ] ;
34472: LD_ADDR_VAR 0 9
34476: PUSH
34477: LD_INT 10
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34491: LD_VAR 0 6
34495: PPUSH
34496: CALL_OW 257
34500: PUSH
34501: LD_INT 11
34503: EQUAL
34504: IFFALSE 34525
// points := [ 30 , 10 , 5 ] ;
34506: LD_ADDR_VAR 0 9
34510: PUSH
34511: LD_INT 30
34513: PUSH
34514: LD_INT 10
34516: PUSH
34517: LD_INT 5
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34525: LD_VAR 0 1
34529: PPUSH
34530: LD_INT 5
34532: PPUSH
34533: CALL_OW 321
34537: PUSH
34538: LD_INT 2
34540: EQUAL
34541: IFFALSE 34558
// bpoints := bpoints * 1.8 ;
34543: LD_ADDR_VAR 0 10
34547: PUSH
34548: LD_VAR 0 10
34552: PUSH
34553: LD_REAL  1.80000000000000E+0000
34556: MUL
34557: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34558: LD_VAR 0 6
34562: PPUSH
34563: CALL_OW 257
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: LD_INT 3
34576: PUSH
34577: LD_INT 4
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: IN
34586: PUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: LD_INT 51
34594: PPUSH
34595: CALL_OW 321
34599: PUSH
34600: LD_INT 2
34602: EQUAL
34603: AND
34604: IFFALSE 34621
// bpoints := bpoints * 1.2 ;
34606: LD_ADDR_VAR 0 10
34610: PUSH
34611: LD_VAR 0 10
34615: PUSH
34616: LD_REAL  1.20000000000000E+0000
34619: MUL
34620: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34621: LD_VAR 0 6
34625: PPUSH
34626: CALL_OW 257
34630: PUSH
34631: LD_INT 5
34633: PUSH
34634: LD_INT 7
34636: PUSH
34637: LD_INT 9
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: IN
34645: PUSH
34646: LD_VAR 0 1
34650: PPUSH
34651: LD_INT 52
34653: PPUSH
34654: CALL_OW 321
34658: PUSH
34659: LD_INT 2
34661: EQUAL
34662: AND
34663: IFFALSE 34680
// bpoints := bpoints * 1.5 ;
34665: LD_ADDR_VAR 0 10
34669: PUSH
34670: LD_VAR 0 10
34674: PUSH
34675: LD_REAL  1.50000000000000E+0000
34678: MUL
34679: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34680: LD_VAR 0 1
34684: PPUSH
34685: LD_INT 66
34687: PPUSH
34688: CALL_OW 321
34692: PUSH
34693: LD_INT 2
34695: EQUAL
34696: IFFALSE 34713
// bpoints := bpoints * 1.1 ;
34698: LD_ADDR_VAR 0 10
34702: PUSH
34703: LD_VAR 0 10
34707: PUSH
34708: LD_REAL  1.10000000000000E+0000
34711: MUL
34712: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34713: LD_ADDR_VAR 0 10
34717: PUSH
34718: LD_VAR 0 10
34722: PUSH
34723: LD_VAR 0 6
34727: PPUSH
34728: LD_INT 1
34730: PPUSH
34731: CALL_OW 259
34735: PUSH
34736: LD_REAL  1.15000000000000E+0000
34739: MUL
34740: MUL
34741: ST_TO_ADDR
// end ; unit_vehicle :
34742: GO 35570
34744: LD_INT 2
34746: DOUBLE
34747: EQUAL
34748: IFTRUE 34752
34750: GO 35558
34752: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34753: LD_VAR 0 6
34757: PPUSH
34758: CALL_OW 264
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: LD_INT 42
34768: PUSH
34769: LD_INT 24
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: IN
34777: IFFALSE 34798
// points := [ 25 , 5 , 3 ] ;
34779: LD_ADDR_VAR 0 9
34783: PUSH
34784: LD_INT 25
34786: PUSH
34787: LD_INT 5
34789: PUSH
34790: LD_INT 3
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34798: LD_VAR 0 6
34802: PPUSH
34803: CALL_OW 264
34807: PUSH
34808: LD_INT 4
34810: PUSH
34811: LD_INT 43
34813: PUSH
34814: LD_INT 25
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: IN
34822: IFFALSE 34843
// points := [ 40 , 15 , 5 ] ;
34824: LD_ADDR_VAR 0 9
34828: PUSH
34829: LD_INT 40
34831: PUSH
34832: LD_INT 15
34834: PUSH
34835: LD_INT 5
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: LIST
34842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34843: LD_VAR 0 6
34847: PPUSH
34848: CALL_OW 264
34852: PUSH
34853: LD_INT 3
34855: PUSH
34856: LD_INT 23
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: IN
34863: IFFALSE 34884
// points := [ 7 , 25 , 8 ] ;
34865: LD_ADDR_VAR 0 9
34869: PUSH
34870: LD_INT 7
34872: PUSH
34873: LD_INT 25
34875: PUSH
34876: LD_INT 8
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34884: LD_VAR 0 6
34888: PPUSH
34889: CALL_OW 264
34893: PUSH
34894: LD_INT 5
34896: PUSH
34897: LD_INT 27
34899: PUSH
34900: LD_INT 44
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: IN
34908: IFFALSE 34929
// points := [ 14 , 50 , 16 ] ;
34910: LD_ADDR_VAR 0 9
34914: PUSH
34915: LD_INT 14
34917: PUSH
34918: LD_INT 50
34920: PUSH
34921: LD_INT 16
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34929: LD_VAR 0 6
34933: PPUSH
34934: CALL_OW 264
34938: PUSH
34939: LD_INT 6
34941: PUSH
34942: LD_INT 46
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: IN
34949: IFFALSE 34970
// points := [ 32 , 120 , 70 ] ;
34951: LD_ADDR_VAR 0 9
34955: PUSH
34956: LD_INT 32
34958: PUSH
34959: LD_INT 120
34961: PUSH
34962: LD_INT 70
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34970: LD_VAR 0 6
34974: PPUSH
34975: CALL_OW 264
34979: PUSH
34980: LD_INT 7
34982: PUSH
34983: LD_INT 28
34985: PUSH
34986: LD_INT 45
34988: PUSH
34989: LD_INT 92
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: IN
34998: IFFALSE 35019
// points := [ 35 , 20 , 45 ] ;
35000: LD_ADDR_VAR 0 9
35004: PUSH
35005: LD_INT 35
35007: PUSH
35008: LD_INT 20
35010: PUSH
35011: LD_INT 45
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35019: LD_VAR 0 6
35023: PPUSH
35024: CALL_OW 264
35028: PUSH
35029: LD_INT 47
35031: PUSH
35032: EMPTY
35033: LIST
35034: IN
35035: IFFALSE 35056
// points := [ 67 , 45 , 75 ] ;
35037: LD_ADDR_VAR 0 9
35041: PUSH
35042: LD_INT 67
35044: PUSH
35045: LD_INT 45
35047: PUSH
35048: LD_INT 75
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35056: LD_VAR 0 6
35060: PPUSH
35061: CALL_OW 264
35065: PUSH
35066: LD_INT 26
35068: PUSH
35069: EMPTY
35070: LIST
35071: IN
35072: IFFALSE 35093
// points := [ 120 , 30 , 80 ] ;
35074: LD_ADDR_VAR 0 9
35078: PUSH
35079: LD_INT 120
35081: PUSH
35082: LD_INT 30
35084: PUSH
35085: LD_INT 80
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35093: LD_VAR 0 6
35097: PPUSH
35098: CALL_OW 264
35102: PUSH
35103: LD_INT 22
35105: PUSH
35106: EMPTY
35107: LIST
35108: IN
35109: IFFALSE 35130
// points := [ 40 , 1 , 1 ] ;
35111: LD_ADDR_VAR 0 9
35115: PUSH
35116: LD_INT 40
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35130: LD_VAR 0 6
35134: PPUSH
35135: CALL_OW 264
35139: PUSH
35140: LD_INT 29
35142: PUSH
35143: EMPTY
35144: LIST
35145: IN
35146: IFFALSE 35167
// points := [ 70 , 200 , 400 ] ;
35148: LD_ADDR_VAR 0 9
35152: PUSH
35153: LD_INT 70
35155: PUSH
35156: LD_INT 200
35158: PUSH
35159: LD_INT 400
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35167: LD_VAR 0 6
35171: PPUSH
35172: CALL_OW 264
35176: PUSH
35177: LD_INT 14
35179: PUSH
35180: LD_INT 53
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: IN
35187: IFFALSE 35208
// points := [ 40 , 10 , 20 ] ;
35189: LD_ADDR_VAR 0 9
35193: PUSH
35194: LD_INT 40
35196: PUSH
35197: LD_INT 10
35199: PUSH
35200: LD_INT 20
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35208: LD_VAR 0 6
35212: PPUSH
35213: CALL_OW 264
35217: PUSH
35218: LD_INT 9
35220: PUSH
35221: EMPTY
35222: LIST
35223: IN
35224: IFFALSE 35245
// points := [ 5 , 70 , 20 ] ;
35226: LD_ADDR_VAR 0 9
35230: PUSH
35231: LD_INT 5
35233: PUSH
35234: LD_INT 70
35236: PUSH
35237: LD_INT 20
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35245: LD_VAR 0 6
35249: PPUSH
35250: CALL_OW 264
35254: PUSH
35255: LD_INT 10
35257: PUSH
35258: EMPTY
35259: LIST
35260: IN
35261: IFFALSE 35282
// points := [ 35 , 110 , 70 ] ;
35263: LD_ADDR_VAR 0 9
35267: PUSH
35268: LD_INT 35
35270: PUSH
35271: LD_INT 110
35273: PUSH
35274: LD_INT 70
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35282: LD_VAR 0 6
35286: PPUSH
35287: CALL_OW 265
35291: PUSH
35292: LD_INT 25
35294: EQUAL
35295: IFFALSE 35316
// points := [ 80 , 65 , 100 ] ;
35297: LD_ADDR_VAR 0 9
35301: PUSH
35302: LD_INT 80
35304: PUSH
35305: LD_INT 65
35307: PUSH
35308: LD_INT 100
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35316: LD_VAR 0 6
35320: PPUSH
35321: CALL_OW 263
35325: PUSH
35326: LD_INT 1
35328: EQUAL
35329: IFFALSE 35364
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35331: LD_ADDR_VAR 0 10
35335: PUSH
35336: LD_VAR 0 10
35340: PUSH
35341: LD_VAR 0 6
35345: PPUSH
35346: CALL_OW 311
35350: PPUSH
35351: LD_INT 3
35353: PPUSH
35354: CALL_OW 259
35358: PUSH
35359: LD_INT 4
35361: MUL
35362: MUL
35363: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35364: LD_VAR 0 6
35368: PPUSH
35369: CALL_OW 263
35373: PUSH
35374: LD_INT 2
35376: EQUAL
35377: IFFALSE 35428
// begin j := IsControledBy ( i ) ;
35379: LD_ADDR_VAR 0 7
35383: PUSH
35384: LD_VAR 0 6
35388: PPUSH
35389: CALL_OW 312
35393: ST_TO_ADDR
// if j then
35394: LD_VAR 0 7
35398: IFFALSE 35428
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35400: LD_ADDR_VAR 0 10
35404: PUSH
35405: LD_VAR 0 10
35409: PUSH
35410: LD_VAR 0 7
35414: PPUSH
35415: LD_INT 3
35417: PPUSH
35418: CALL_OW 259
35422: PUSH
35423: LD_INT 3
35425: MUL
35426: MUL
35427: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35428: LD_VAR 0 6
35432: PPUSH
35433: CALL_OW 264
35437: PUSH
35438: LD_INT 5
35440: PUSH
35441: LD_INT 6
35443: PUSH
35444: LD_INT 46
35446: PUSH
35447: LD_INT 44
35449: PUSH
35450: LD_INT 47
35452: PUSH
35453: LD_INT 45
35455: PUSH
35456: LD_INT 28
35458: PUSH
35459: LD_INT 7
35461: PUSH
35462: LD_INT 27
35464: PUSH
35465: LD_INT 29
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: IN
35480: PUSH
35481: LD_VAR 0 1
35485: PPUSH
35486: LD_INT 52
35488: PPUSH
35489: CALL_OW 321
35493: PUSH
35494: LD_INT 2
35496: EQUAL
35497: AND
35498: IFFALSE 35515
// bpoints := bpoints * 1.2 ;
35500: LD_ADDR_VAR 0 10
35504: PUSH
35505: LD_VAR 0 10
35509: PUSH
35510: LD_REAL  1.20000000000000E+0000
35513: MUL
35514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35515: LD_VAR 0 6
35519: PPUSH
35520: CALL_OW 264
35524: PUSH
35525: LD_INT 6
35527: PUSH
35528: LD_INT 46
35530: PUSH
35531: LD_INT 47
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: IN
35539: IFFALSE 35556
// bpoints := bpoints * 1.2 ;
35541: LD_ADDR_VAR 0 10
35545: PUSH
35546: LD_VAR 0 10
35550: PUSH
35551: LD_REAL  1.20000000000000E+0000
35554: MUL
35555: ST_TO_ADDR
// end ; unit_building :
35556: GO 35570
35558: LD_INT 3
35560: DOUBLE
35561: EQUAL
35562: IFTRUE 35566
35564: GO 35569
35566: POP
// ; end ;
35567: GO 35570
35569: POP
// for j = 1 to 3 do
35570: LD_ADDR_VAR 0 7
35574: PUSH
35575: DOUBLE
35576: LD_INT 1
35578: DEC
35579: ST_TO_ADDR
35580: LD_INT 3
35582: PUSH
35583: FOR_TO
35584: IFFALSE 35637
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35586: LD_ADDR_VAR 0 5
35590: PUSH
35591: LD_VAR 0 5
35595: PPUSH
35596: LD_VAR 0 7
35600: PPUSH
35601: LD_VAR 0 5
35605: PUSH
35606: LD_VAR 0 7
35610: ARRAY
35611: PUSH
35612: LD_VAR 0 9
35616: PUSH
35617: LD_VAR 0 7
35621: ARRAY
35622: PUSH
35623: LD_VAR 0 10
35627: MUL
35628: PLUS
35629: PPUSH
35630: CALL_OW 1
35634: ST_TO_ADDR
35635: GO 35583
35637: POP
35638: POP
// end ;
35639: GO 34118
35641: POP
35642: POP
// result := Replace ( result , 4 , tmp ) ;
35643: LD_ADDR_VAR 0 5
35647: PUSH
35648: LD_VAR 0 5
35652: PPUSH
35653: LD_INT 4
35655: PPUSH
35656: LD_VAR 0 8
35660: PPUSH
35661: CALL_OW 1
35665: ST_TO_ADDR
// end ;
35666: LD_VAR 0 5
35670: RET
// export function DangerAtRange ( unit , range ) ; begin
35671: LD_INT 0
35673: PPUSH
// if not unit then
35674: LD_VAR 0 1
35678: NOT
35679: IFFALSE 35683
// exit ;
35681: GO 35728
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35683: LD_ADDR_VAR 0 3
35687: PUSH
35688: LD_VAR 0 1
35692: PPUSH
35693: CALL_OW 255
35697: PPUSH
35698: LD_VAR 0 1
35702: PPUSH
35703: CALL_OW 250
35707: PPUSH
35708: LD_VAR 0 1
35712: PPUSH
35713: CALL_OW 251
35717: PPUSH
35718: LD_VAR 0 2
35722: PPUSH
35723: CALL 33970 0 4
35727: ST_TO_ADDR
// end ;
35728: LD_VAR 0 3
35732: RET
// export function DangerInArea ( side , area ) ; begin
35733: LD_INT 0
35735: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35736: LD_ADDR_VAR 0 3
35740: PUSH
35741: LD_VAR 0 2
35745: PPUSH
35746: LD_INT 81
35748: PUSH
35749: LD_VAR 0 1
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PPUSH
35758: CALL_OW 70
35762: ST_TO_ADDR
// end ;
35763: LD_VAR 0 3
35767: RET
// export function IsExtension ( b ) ; begin
35768: LD_INT 0
35770: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35771: LD_ADDR_VAR 0 2
35775: PUSH
35776: LD_VAR 0 1
35780: PUSH
35781: LD_INT 23
35783: PUSH
35784: LD_INT 20
35786: PUSH
35787: LD_INT 22
35789: PUSH
35790: LD_INT 17
35792: PUSH
35793: LD_INT 24
35795: PUSH
35796: LD_INT 21
35798: PUSH
35799: LD_INT 19
35801: PUSH
35802: LD_INT 16
35804: PUSH
35805: LD_INT 25
35807: PUSH
35808: LD_INT 18
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: IN
35823: ST_TO_ADDR
// end ;
35824: LD_VAR 0 2
35828: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35829: LD_INT 0
35831: PPUSH
35832: PPUSH
35833: PPUSH
// result := [ ] ;
35834: LD_ADDR_VAR 0 4
35838: PUSH
35839: EMPTY
35840: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35841: LD_ADDR_VAR 0 5
35845: PUSH
35846: LD_VAR 0 2
35850: PPUSH
35851: LD_INT 21
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PPUSH
35861: CALL_OW 70
35865: ST_TO_ADDR
// if not tmp then
35866: LD_VAR 0 5
35870: NOT
35871: IFFALSE 35875
// exit ;
35873: GO 35939
// if checkLink then
35875: LD_VAR 0 3
35879: IFFALSE 35929
// begin for i in tmp do
35881: LD_ADDR_VAR 0 6
35885: PUSH
35886: LD_VAR 0 5
35890: PUSH
35891: FOR_IN
35892: IFFALSE 35927
// if GetBase ( i ) <> base then
35894: LD_VAR 0 6
35898: PPUSH
35899: CALL_OW 274
35903: PUSH
35904: LD_VAR 0 1
35908: NONEQUAL
35909: IFFALSE 35925
// ComLinkToBase ( base , i ) ;
35911: LD_VAR 0 1
35915: PPUSH
35916: LD_VAR 0 6
35920: PPUSH
35921: CALL_OW 169
35925: GO 35891
35927: POP
35928: POP
// end ; result := tmp ;
35929: LD_ADDR_VAR 0 4
35933: PUSH
35934: LD_VAR 0 5
35938: ST_TO_ADDR
// end ;
35939: LD_VAR 0 4
35943: RET
// export function ComComplete ( units , b ) ; var i ; begin
35944: LD_INT 0
35946: PPUSH
35947: PPUSH
// if not units then
35948: LD_VAR 0 1
35952: NOT
35953: IFFALSE 35957
// exit ;
35955: GO 36047
// for i in units do
35957: LD_ADDR_VAR 0 4
35961: PUSH
35962: LD_VAR 0 1
35966: PUSH
35967: FOR_IN
35968: IFFALSE 36045
// if BuildingStatus ( b ) = bs_build then
35970: LD_VAR 0 2
35974: PPUSH
35975: CALL_OW 461
35979: PUSH
35980: LD_INT 1
35982: EQUAL
35983: IFFALSE 36043
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35985: LD_VAR 0 4
35989: PPUSH
35990: LD_STRING h
35992: PUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: CALL_OW 250
36002: PUSH
36003: LD_VAR 0 2
36007: PPUSH
36008: CALL_OW 251
36012: PUSH
36013: LD_VAR 0 2
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: PPUSH
36039: CALL_OW 446
36043: GO 35967
36045: POP
36046: POP
// end ;
36047: LD_VAR 0 3
36051: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36052: LD_INT 0
36054: PPUSH
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36060: LD_VAR 0 1
36064: NOT
36065: PUSH
36066: LD_VAR 0 1
36070: PPUSH
36071: CALL_OW 263
36075: PUSH
36076: LD_INT 2
36078: NONEQUAL
36079: OR
36080: IFFALSE 36084
// exit ;
36082: GO 36400
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36084: LD_ADDR_VAR 0 6
36088: PUSH
36089: LD_INT 22
36091: PUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: CALL_OW 255
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: LD_INT 30
36111: PUSH
36112: LD_INT 36
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 34
36121: PUSH
36122: LD_INT 31
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PPUSH
36138: CALL_OW 69
36142: ST_TO_ADDR
// if not tmp then
36143: LD_VAR 0 6
36147: NOT
36148: IFFALSE 36152
// exit ;
36150: GO 36400
// result := [ ] ;
36152: LD_ADDR_VAR 0 2
36156: PUSH
36157: EMPTY
36158: ST_TO_ADDR
// for i in tmp do
36159: LD_ADDR_VAR 0 3
36163: PUSH
36164: LD_VAR 0 6
36168: PUSH
36169: FOR_IN
36170: IFFALSE 36241
// begin t := UnitsInside ( i ) ;
36172: LD_ADDR_VAR 0 4
36176: PUSH
36177: LD_VAR 0 3
36181: PPUSH
36182: CALL_OW 313
36186: ST_TO_ADDR
// if t then
36187: LD_VAR 0 4
36191: IFFALSE 36239
// for j in t do
36193: LD_ADDR_VAR 0 7
36197: PUSH
36198: LD_VAR 0 4
36202: PUSH
36203: FOR_IN
36204: IFFALSE 36237
// result := Replace ( result , result + 1 , j ) ;
36206: LD_ADDR_VAR 0 2
36210: PUSH
36211: LD_VAR 0 2
36215: PPUSH
36216: LD_VAR 0 2
36220: PUSH
36221: LD_INT 1
36223: PLUS
36224: PPUSH
36225: LD_VAR 0 7
36229: PPUSH
36230: CALL_OW 1
36234: ST_TO_ADDR
36235: GO 36203
36237: POP
36238: POP
// end ;
36239: GO 36169
36241: POP
36242: POP
// if not result then
36243: LD_VAR 0 2
36247: NOT
36248: IFFALSE 36252
// exit ;
36250: GO 36400
// mech := result [ 1 ] ;
36252: LD_ADDR_VAR 0 5
36256: PUSH
36257: LD_VAR 0 2
36261: PUSH
36262: LD_INT 1
36264: ARRAY
36265: ST_TO_ADDR
// if result > 1 then
36266: LD_VAR 0 2
36270: PUSH
36271: LD_INT 1
36273: GREATER
36274: IFFALSE 36386
// begin for i = 2 to result do
36276: LD_ADDR_VAR 0 3
36280: PUSH
36281: DOUBLE
36282: LD_INT 2
36284: DEC
36285: ST_TO_ADDR
36286: LD_VAR 0 2
36290: PUSH
36291: FOR_TO
36292: IFFALSE 36384
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36294: LD_ADDR_VAR 0 4
36298: PUSH
36299: LD_VAR 0 2
36303: PUSH
36304: LD_VAR 0 3
36308: ARRAY
36309: PPUSH
36310: LD_INT 3
36312: PPUSH
36313: CALL_OW 259
36317: PUSH
36318: LD_VAR 0 2
36322: PUSH
36323: LD_VAR 0 3
36327: ARRAY
36328: PPUSH
36329: CALL_OW 432
36333: MINUS
36334: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36335: LD_VAR 0 4
36339: PUSH
36340: LD_VAR 0 5
36344: PPUSH
36345: LD_INT 3
36347: PPUSH
36348: CALL_OW 259
36352: PUSH
36353: LD_VAR 0 5
36357: PPUSH
36358: CALL_OW 432
36362: MINUS
36363: GREATEREQUAL
36364: IFFALSE 36382
// mech := result [ i ] ;
36366: LD_ADDR_VAR 0 5
36370: PUSH
36371: LD_VAR 0 2
36375: PUSH
36376: LD_VAR 0 3
36380: ARRAY
36381: ST_TO_ADDR
// end ;
36382: GO 36291
36384: POP
36385: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36386: LD_VAR 0 1
36390: PPUSH
36391: LD_VAR 0 5
36395: PPUSH
36396: CALL_OW 135
// end ;
36400: LD_VAR 0 2
36404: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36405: LD_INT 0
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
// result := [ ] ;
36420: LD_ADDR_VAR 0 7
36424: PUSH
36425: EMPTY
36426: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 266
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: IN
36447: NOT
36448: IFFALSE 36452
// exit ;
36450: GO 38086
// if name then
36452: LD_VAR 0 3
36456: IFFALSE 36472
// SetBName ( base_dep , name ) ;
36458: LD_VAR 0 1
36462: PPUSH
36463: LD_VAR 0 3
36467: PPUSH
36468: CALL_OW 500
// base := GetBase ( base_dep ) ;
36472: LD_ADDR_VAR 0 15
36476: PUSH
36477: LD_VAR 0 1
36481: PPUSH
36482: CALL_OW 274
36486: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36487: LD_ADDR_VAR 0 16
36491: PUSH
36492: LD_VAR 0 1
36496: PPUSH
36497: CALL_OW 255
36501: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36502: LD_ADDR_VAR 0 17
36506: PUSH
36507: LD_VAR 0 1
36511: PPUSH
36512: CALL_OW 248
36516: ST_TO_ADDR
// if sources then
36517: LD_VAR 0 5
36521: IFFALSE 36568
// for i = 1 to 3 do
36523: LD_ADDR_VAR 0 8
36527: PUSH
36528: DOUBLE
36529: LD_INT 1
36531: DEC
36532: ST_TO_ADDR
36533: LD_INT 3
36535: PUSH
36536: FOR_TO
36537: IFFALSE 36566
// AddResourceType ( base , i , sources [ i ] ) ;
36539: LD_VAR 0 15
36543: PPUSH
36544: LD_VAR 0 8
36548: PPUSH
36549: LD_VAR 0 5
36553: PUSH
36554: LD_VAR 0 8
36558: ARRAY
36559: PPUSH
36560: CALL_OW 276
36564: GO 36536
36566: POP
36567: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36568: LD_ADDR_VAR 0 18
36572: PUSH
36573: LD_VAR 0 15
36577: PPUSH
36578: LD_VAR 0 2
36582: PPUSH
36583: LD_INT 1
36585: PPUSH
36586: CALL 35829 0 3
36590: ST_TO_ADDR
// InitHc ;
36591: CALL_OW 19
// InitUc ;
36595: CALL_OW 18
// uc_side := side ;
36599: LD_ADDR_OWVAR 20
36603: PUSH
36604: LD_VAR 0 16
36608: ST_TO_ADDR
// uc_nation := nation ;
36609: LD_ADDR_OWVAR 21
36613: PUSH
36614: LD_VAR 0 17
36618: ST_TO_ADDR
// if buildings then
36619: LD_VAR 0 18
36623: IFFALSE 37945
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36625: LD_ADDR_VAR 0 19
36629: PUSH
36630: LD_VAR 0 18
36634: PPUSH
36635: LD_INT 2
36637: PUSH
36638: LD_INT 30
36640: PUSH
36641: LD_INT 29
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 30
36650: PUSH
36651: LD_INT 30
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: PPUSH
36663: CALL_OW 72
36667: ST_TO_ADDR
// if tmp then
36668: LD_VAR 0 19
36672: IFFALSE 36720
// for i in tmp do
36674: LD_ADDR_VAR 0 8
36678: PUSH
36679: LD_VAR 0 19
36683: PUSH
36684: FOR_IN
36685: IFFALSE 36718
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36687: LD_VAR 0 8
36691: PPUSH
36692: CALL_OW 250
36696: PPUSH
36697: LD_VAR 0 8
36701: PPUSH
36702: CALL_OW 251
36706: PPUSH
36707: LD_VAR 0 16
36711: PPUSH
36712: CALL_OW 441
36716: GO 36684
36718: POP
36719: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36720: LD_VAR 0 18
36724: PPUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 30
36730: PUSH
36731: LD_INT 32
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 30
36740: PUSH
36741: LD_INT 33
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: PPUSH
36753: CALL_OW 72
36757: IFFALSE 36845
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36759: LD_ADDR_VAR 0 8
36763: PUSH
36764: LD_VAR 0 18
36768: PPUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 30
36774: PUSH
36775: LD_INT 32
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 30
36784: PUSH
36785: LD_INT 33
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: PPUSH
36797: CALL_OW 72
36801: PUSH
36802: FOR_IN
36803: IFFALSE 36843
// begin if not GetBWeapon ( i ) then
36805: LD_VAR 0 8
36809: PPUSH
36810: CALL_OW 269
36814: NOT
36815: IFFALSE 36841
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36817: LD_VAR 0 8
36821: PPUSH
36822: LD_VAR 0 8
36826: PPUSH
36827: LD_VAR 0 2
36831: PPUSH
36832: CALL 38091 0 2
36836: PPUSH
36837: CALL_OW 431
// end ;
36841: GO 36802
36843: POP
36844: POP
// end ; for i = 1 to personel do
36845: LD_ADDR_VAR 0 8
36849: PUSH
36850: DOUBLE
36851: LD_INT 1
36853: DEC
36854: ST_TO_ADDR
36855: LD_VAR 0 6
36859: PUSH
36860: FOR_TO
36861: IFFALSE 37925
// begin if i > 4 then
36863: LD_VAR 0 8
36867: PUSH
36868: LD_INT 4
36870: GREATER
36871: IFFALSE 36875
// break ;
36873: GO 37925
// case i of 1 :
36875: LD_VAR 0 8
36879: PUSH
36880: LD_INT 1
36882: DOUBLE
36883: EQUAL
36884: IFTRUE 36888
36886: GO 36968
36888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36889: LD_ADDR_VAR 0 12
36893: PUSH
36894: LD_VAR 0 18
36898: PPUSH
36899: LD_INT 22
36901: PUSH
36902: LD_VAR 0 16
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 58
36913: PUSH
36914: EMPTY
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 30
36922: PUSH
36923: LD_INT 32
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 30
36932: PUSH
36933: LD_INT 4
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 30
36942: PUSH
36943: LD_INT 5
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: PPUSH
36961: CALL_OW 72
36965: ST_TO_ADDR
36966: GO 37190
36968: LD_INT 2
36970: DOUBLE
36971: EQUAL
36972: IFTRUE 36976
36974: GO 37038
36976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36977: LD_ADDR_VAR 0 12
36981: PUSH
36982: LD_VAR 0 18
36986: PPUSH
36987: LD_INT 22
36989: PUSH
36990: LD_VAR 0 16
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 2
37001: PUSH
37002: LD_INT 30
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 30
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PPUSH
37031: CALL_OW 72
37035: ST_TO_ADDR
37036: GO 37190
37038: LD_INT 3
37040: DOUBLE
37041: EQUAL
37042: IFTRUE 37046
37044: GO 37108
37046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37047: LD_ADDR_VAR 0 12
37051: PUSH
37052: LD_VAR 0 18
37056: PPUSH
37057: LD_INT 22
37059: PUSH
37060: LD_VAR 0 16
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 30
37074: PUSH
37075: LD_INT 2
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 30
37084: PUSH
37085: LD_INT 3
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PPUSH
37101: CALL_OW 72
37105: ST_TO_ADDR
37106: GO 37190
37108: LD_INT 4
37110: DOUBLE
37111: EQUAL
37112: IFTRUE 37116
37114: GO 37189
37116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37117: LD_ADDR_VAR 0 12
37121: PUSH
37122: LD_VAR 0 18
37126: PPUSH
37127: LD_INT 22
37129: PUSH
37130: LD_VAR 0 16
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 30
37144: PUSH
37145: LD_INT 6
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 30
37154: PUSH
37155: LD_INT 7
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 30
37164: PUSH
37165: LD_INT 8
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PPUSH
37182: CALL_OW 72
37186: ST_TO_ADDR
37187: GO 37190
37189: POP
// if i = 1 then
37190: LD_VAR 0 8
37194: PUSH
37195: LD_INT 1
37197: EQUAL
37198: IFFALSE 37309
// begin tmp := [ ] ;
37200: LD_ADDR_VAR 0 19
37204: PUSH
37205: EMPTY
37206: ST_TO_ADDR
// for j in f do
37207: LD_ADDR_VAR 0 9
37211: PUSH
37212: LD_VAR 0 12
37216: PUSH
37217: FOR_IN
37218: IFFALSE 37291
// if GetBType ( j ) = b_bunker then
37220: LD_VAR 0 9
37224: PPUSH
37225: CALL_OW 266
37229: PUSH
37230: LD_INT 32
37232: EQUAL
37233: IFFALSE 37260
// tmp := Insert ( tmp , 1 , j ) else
37235: LD_ADDR_VAR 0 19
37239: PUSH
37240: LD_VAR 0 19
37244: PPUSH
37245: LD_INT 1
37247: PPUSH
37248: LD_VAR 0 9
37252: PPUSH
37253: CALL_OW 2
37257: ST_TO_ADDR
37258: GO 37289
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37260: LD_ADDR_VAR 0 19
37264: PUSH
37265: LD_VAR 0 19
37269: PPUSH
37270: LD_VAR 0 19
37274: PUSH
37275: LD_INT 1
37277: PLUS
37278: PPUSH
37279: LD_VAR 0 9
37283: PPUSH
37284: CALL_OW 2
37288: ST_TO_ADDR
37289: GO 37217
37291: POP
37292: POP
// if tmp then
37293: LD_VAR 0 19
37297: IFFALSE 37309
// f := tmp ;
37299: LD_ADDR_VAR 0 12
37303: PUSH
37304: LD_VAR 0 19
37308: ST_TO_ADDR
// end ; x := personel [ i ] ;
37309: LD_ADDR_VAR 0 13
37313: PUSH
37314: LD_VAR 0 6
37318: PUSH
37319: LD_VAR 0 8
37323: ARRAY
37324: ST_TO_ADDR
// if x = - 1 then
37325: LD_VAR 0 13
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: EQUAL
37334: IFFALSE 37543
// begin for j in f do
37336: LD_ADDR_VAR 0 9
37340: PUSH
37341: LD_VAR 0 12
37345: PUSH
37346: FOR_IN
37347: IFFALSE 37539
// repeat InitHc ;
37349: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37353: LD_VAR 0 9
37357: PPUSH
37358: CALL_OW 266
37362: PUSH
37363: LD_INT 5
37365: EQUAL
37366: IFFALSE 37436
// begin if UnitsInside ( j ) < 3 then
37368: LD_VAR 0 9
37372: PPUSH
37373: CALL_OW 313
37377: PUSH
37378: LD_INT 3
37380: LESS
37381: IFFALSE 37417
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37383: LD_INT 0
37385: PPUSH
37386: LD_INT 5
37388: PUSH
37389: LD_INT 8
37391: PUSH
37392: LD_INT 9
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: PUSH
37400: LD_VAR 0 17
37404: ARRAY
37405: PPUSH
37406: LD_VAR 0 4
37410: PPUSH
37411: CALL_OW 380
37415: GO 37434
// PrepareHuman ( false , i , skill ) ;
37417: LD_INT 0
37419: PPUSH
37420: LD_VAR 0 8
37424: PPUSH
37425: LD_VAR 0 4
37429: PPUSH
37430: CALL_OW 380
// end else
37434: GO 37453
// PrepareHuman ( false , i , skill ) ;
37436: LD_INT 0
37438: PPUSH
37439: LD_VAR 0 8
37443: PPUSH
37444: LD_VAR 0 4
37448: PPUSH
37449: CALL_OW 380
// un := CreateHuman ;
37453: LD_ADDR_VAR 0 14
37457: PUSH
37458: CALL_OW 44
37462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37463: LD_ADDR_VAR 0 7
37467: PUSH
37468: LD_VAR 0 7
37472: PPUSH
37473: LD_INT 1
37475: PPUSH
37476: LD_VAR 0 14
37480: PPUSH
37481: CALL_OW 2
37485: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37486: LD_VAR 0 14
37490: PPUSH
37491: LD_VAR 0 9
37495: PPUSH
37496: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37500: LD_VAR 0 9
37504: PPUSH
37505: CALL_OW 313
37509: PUSH
37510: LD_INT 6
37512: EQUAL
37513: PUSH
37514: LD_VAR 0 9
37518: PPUSH
37519: CALL_OW 266
37523: PUSH
37524: LD_INT 32
37526: PUSH
37527: LD_INT 31
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: IN
37534: OR
37535: IFFALSE 37349
37537: GO 37346
37539: POP
37540: POP
// end else
37541: GO 37923
// for j = 1 to x do
37543: LD_ADDR_VAR 0 9
37547: PUSH
37548: DOUBLE
37549: LD_INT 1
37551: DEC
37552: ST_TO_ADDR
37553: LD_VAR 0 13
37557: PUSH
37558: FOR_TO
37559: IFFALSE 37921
// begin InitHc ;
37561: CALL_OW 19
// if not f then
37565: LD_VAR 0 12
37569: NOT
37570: IFFALSE 37659
// begin PrepareHuman ( false , i , skill ) ;
37572: LD_INT 0
37574: PPUSH
37575: LD_VAR 0 8
37579: PPUSH
37580: LD_VAR 0 4
37584: PPUSH
37585: CALL_OW 380
// un := CreateHuman ;
37589: LD_ADDR_VAR 0 14
37593: PUSH
37594: CALL_OW 44
37598: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37599: LD_ADDR_VAR 0 7
37603: PUSH
37604: LD_VAR 0 7
37608: PPUSH
37609: LD_INT 1
37611: PPUSH
37612: LD_VAR 0 14
37616: PPUSH
37617: CALL_OW 2
37621: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37622: LD_VAR 0 14
37626: PPUSH
37627: LD_VAR 0 1
37631: PPUSH
37632: CALL_OW 250
37636: PPUSH
37637: LD_VAR 0 1
37641: PPUSH
37642: CALL_OW 251
37646: PPUSH
37647: LD_INT 10
37649: PPUSH
37650: LD_INT 0
37652: PPUSH
37653: CALL_OW 50
// continue ;
37657: GO 37558
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37659: LD_VAR 0 12
37663: PUSH
37664: LD_INT 1
37666: ARRAY
37667: PPUSH
37668: CALL_OW 313
37672: PUSH
37673: LD_VAR 0 12
37677: PUSH
37678: LD_INT 1
37680: ARRAY
37681: PPUSH
37682: CALL_OW 266
37686: PUSH
37687: LD_INT 32
37689: PUSH
37690: LD_INT 31
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: IN
37697: AND
37698: PUSH
37699: LD_VAR 0 12
37703: PUSH
37704: LD_INT 1
37706: ARRAY
37707: PPUSH
37708: CALL_OW 313
37712: PUSH
37713: LD_INT 6
37715: EQUAL
37716: OR
37717: IFFALSE 37737
// f := Delete ( f , 1 ) ;
37719: LD_ADDR_VAR 0 12
37723: PUSH
37724: LD_VAR 0 12
37728: PPUSH
37729: LD_INT 1
37731: PPUSH
37732: CALL_OW 3
37736: ST_TO_ADDR
// if not f then
37737: LD_VAR 0 12
37741: NOT
37742: IFFALSE 37760
// begin x := x + 2 ;
37744: LD_ADDR_VAR 0 13
37748: PUSH
37749: LD_VAR 0 13
37753: PUSH
37754: LD_INT 2
37756: PLUS
37757: ST_TO_ADDR
// continue ;
37758: GO 37558
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37760: LD_VAR 0 12
37764: PUSH
37765: LD_INT 1
37767: ARRAY
37768: PPUSH
37769: CALL_OW 266
37773: PUSH
37774: LD_INT 5
37776: EQUAL
37777: IFFALSE 37851
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37779: LD_VAR 0 12
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: PPUSH
37788: CALL_OW 313
37792: PUSH
37793: LD_INT 3
37795: LESS
37796: IFFALSE 37832
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37798: LD_INT 0
37800: PPUSH
37801: LD_INT 5
37803: PUSH
37804: LD_INT 8
37806: PUSH
37807: LD_INT 9
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: PUSH
37815: LD_VAR 0 17
37819: ARRAY
37820: PPUSH
37821: LD_VAR 0 4
37825: PPUSH
37826: CALL_OW 380
37830: GO 37849
// PrepareHuman ( false , i , skill ) ;
37832: LD_INT 0
37834: PPUSH
37835: LD_VAR 0 8
37839: PPUSH
37840: LD_VAR 0 4
37844: PPUSH
37845: CALL_OW 380
// end else
37849: GO 37868
// PrepareHuman ( false , i , skill ) ;
37851: LD_INT 0
37853: PPUSH
37854: LD_VAR 0 8
37858: PPUSH
37859: LD_VAR 0 4
37863: PPUSH
37864: CALL_OW 380
// un := CreateHuman ;
37868: LD_ADDR_VAR 0 14
37872: PUSH
37873: CALL_OW 44
37877: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37878: LD_ADDR_VAR 0 7
37882: PUSH
37883: LD_VAR 0 7
37887: PPUSH
37888: LD_INT 1
37890: PPUSH
37891: LD_VAR 0 14
37895: PPUSH
37896: CALL_OW 2
37900: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37901: LD_VAR 0 14
37905: PPUSH
37906: LD_VAR 0 12
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PPUSH
37915: CALL_OW 52
// end ;
37919: GO 37558
37921: POP
37922: POP
// end ;
37923: GO 36860
37925: POP
37926: POP
// result := result ^ buildings ;
37927: LD_ADDR_VAR 0 7
37931: PUSH
37932: LD_VAR 0 7
37936: PUSH
37937: LD_VAR 0 18
37941: ADD
37942: ST_TO_ADDR
// end else
37943: GO 38086
// begin for i = 1 to personel do
37945: LD_ADDR_VAR 0 8
37949: PUSH
37950: DOUBLE
37951: LD_INT 1
37953: DEC
37954: ST_TO_ADDR
37955: LD_VAR 0 6
37959: PUSH
37960: FOR_TO
37961: IFFALSE 38084
// begin if i > 4 then
37963: LD_VAR 0 8
37967: PUSH
37968: LD_INT 4
37970: GREATER
37971: IFFALSE 37975
// break ;
37973: GO 38084
// x := personel [ i ] ;
37975: LD_ADDR_VAR 0 13
37979: PUSH
37980: LD_VAR 0 6
37984: PUSH
37985: LD_VAR 0 8
37989: ARRAY
37990: ST_TO_ADDR
// if x = - 1 then
37991: LD_VAR 0 13
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: EQUAL
38000: IFFALSE 38004
// continue ;
38002: GO 37960
// PrepareHuman ( false , i , skill ) ;
38004: LD_INT 0
38006: PPUSH
38007: LD_VAR 0 8
38011: PPUSH
38012: LD_VAR 0 4
38016: PPUSH
38017: CALL_OW 380
// un := CreateHuman ;
38021: LD_ADDR_VAR 0 14
38025: PUSH
38026: CALL_OW 44
38030: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38031: LD_VAR 0 14
38035: PPUSH
38036: LD_VAR 0 1
38040: PPUSH
38041: CALL_OW 250
38045: PPUSH
38046: LD_VAR 0 1
38050: PPUSH
38051: CALL_OW 251
38055: PPUSH
38056: LD_INT 10
38058: PPUSH
38059: LD_INT 0
38061: PPUSH
38062: CALL_OW 50
// result := result ^ un ;
38066: LD_ADDR_VAR 0 7
38070: PUSH
38071: LD_VAR 0 7
38075: PUSH
38076: LD_VAR 0 14
38080: ADD
38081: ST_TO_ADDR
// end ;
38082: GO 37960
38084: POP
38085: POP
// end ; end ;
38086: LD_VAR 0 7
38090: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38091: LD_INT 0
38093: PPUSH
38094: PPUSH
38095: PPUSH
38096: PPUSH
38097: PPUSH
38098: PPUSH
38099: PPUSH
38100: PPUSH
38101: PPUSH
38102: PPUSH
38103: PPUSH
38104: PPUSH
38105: PPUSH
38106: PPUSH
38107: PPUSH
38108: PPUSH
// result := false ;
38109: LD_ADDR_VAR 0 3
38113: PUSH
38114: LD_INT 0
38116: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38117: LD_VAR 0 1
38121: NOT
38122: PUSH
38123: LD_VAR 0 1
38127: PPUSH
38128: CALL_OW 266
38132: PUSH
38133: LD_INT 32
38135: PUSH
38136: LD_INT 33
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: IN
38143: NOT
38144: OR
38145: IFFALSE 38149
// exit ;
38147: GO 39258
// nat := GetNation ( tower ) ;
38149: LD_ADDR_VAR 0 12
38153: PUSH
38154: LD_VAR 0 1
38158: PPUSH
38159: CALL_OW 248
38163: ST_TO_ADDR
// side := GetSide ( tower ) ;
38164: LD_ADDR_VAR 0 16
38168: PUSH
38169: LD_VAR 0 1
38173: PPUSH
38174: CALL_OW 255
38178: ST_TO_ADDR
// x := GetX ( tower ) ;
38179: LD_ADDR_VAR 0 10
38183: PUSH
38184: LD_VAR 0 1
38188: PPUSH
38189: CALL_OW 250
38193: ST_TO_ADDR
// y := GetY ( tower ) ;
38194: LD_ADDR_VAR 0 11
38198: PUSH
38199: LD_VAR 0 1
38203: PPUSH
38204: CALL_OW 251
38208: ST_TO_ADDR
// if not x or not y then
38209: LD_VAR 0 10
38213: NOT
38214: PUSH
38215: LD_VAR 0 11
38219: NOT
38220: OR
38221: IFFALSE 38225
// exit ;
38223: GO 39258
// weapon := 0 ;
38225: LD_ADDR_VAR 0 18
38229: PUSH
38230: LD_INT 0
38232: ST_TO_ADDR
// fac_list := [ ] ;
38233: LD_ADDR_VAR 0 17
38237: PUSH
38238: EMPTY
38239: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38240: LD_ADDR_VAR 0 6
38244: PUSH
38245: LD_VAR 0 1
38249: PPUSH
38250: CALL_OW 274
38254: PPUSH
38255: LD_VAR 0 2
38259: PPUSH
38260: LD_INT 0
38262: PPUSH
38263: CALL 35829 0 3
38267: PPUSH
38268: LD_INT 30
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PPUSH
38278: CALL_OW 72
38282: ST_TO_ADDR
// if not factories then
38283: LD_VAR 0 6
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 39258
// for i in factories do
38292: LD_ADDR_VAR 0 8
38296: PUSH
38297: LD_VAR 0 6
38301: PUSH
38302: FOR_IN
38303: IFFALSE 38328
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38305: LD_ADDR_VAR 0 17
38309: PUSH
38310: LD_VAR 0 17
38314: PUSH
38315: LD_VAR 0 8
38319: PPUSH
38320: CALL_OW 478
38324: UNION
38325: ST_TO_ADDR
38326: GO 38302
38328: POP
38329: POP
// if not fac_list then
38330: LD_VAR 0 17
38334: NOT
38335: IFFALSE 38339
// exit ;
38337: GO 39258
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38339: LD_ADDR_VAR 0 5
38343: PUSH
38344: LD_INT 4
38346: PUSH
38347: LD_INT 5
38349: PUSH
38350: LD_INT 9
38352: PUSH
38353: LD_INT 10
38355: PUSH
38356: LD_INT 6
38358: PUSH
38359: LD_INT 7
38361: PUSH
38362: LD_INT 11
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 27
38376: PUSH
38377: LD_INT 28
38379: PUSH
38380: LD_INT 26
38382: PUSH
38383: LD_INT 30
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 43
38394: PUSH
38395: LD_INT 44
38397: PUSH
38398: LD_INT 46
38400: PUSH
38401: LD_INT 45
38403: PUSH
38404: LD_INT 47
38406: PUSH
38407: LD_INT 49
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: PUSH
38423: LD_VAR 0 12
38427: ARRAY
38428: ST_TO_ADDR
// list := list isect fac_list ;
38429: LD_ADDR_VAR 0 5
38433: PUSH
38434: LD_VAR 0 5
38438: PUSH
38439: LD_VAR 0 17
38443: ISECT
38444: ST_TO_ADDR
// if not list then
38445: LD_VAR 0 5
38449: NOT
38450: IFFALSE 38454
// exit ;
38452: GO 39258
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38454: LD_VAR 0 12
38458: PUSH
38459: LD_INT 3
38461: EQUAL
38462: PUSH
38463: LD_INT 49
38465: PUSH
38466: LD_VAR 0 5
38470: IN
38471: AND
38472: PUSH
38473: LD_INT 31
38475: PPUSH
38476: LD_VAR 0 16
38480: PPUSH
38481: CALL_OW 321
38485: PUSH
38486: LD_INT 2
38488: EQUAL
38489: AND
38490: IFFALSE 38550
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38492: LD_INT 22
38494: PUSH
38495: LD_VAR 0 16
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 35
38506: PUSH
38507: LD_INT 49
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 91
38516: PUSH
38517: LD_VAR 0 1
38521: PUSH
38522: LD_INT 10
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: PPUSH
38535: CALL_OW 69
38539: NOT
38540: IFFALSE 38550
// weapon := ru_time_lapser ;
38542: LD_ADDR_VAR 0 18
38546: PUSH
38547: LD_INT 49
38549: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38550: LD_VAR 0 12
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: IN
38565: PUSH
38566: LD_INT 11
38568: PUSH
38569: LD_VAR 0 5
38573: IN
38574: PUSH
38575: LD_INT 30
38577: PUSH
38578: LD_VAR 0 5
38582: IN
38583: OR
38584: AND
38585: PUSH
38586: LD_INT 6
38588: PPUSH
38589: LD_VAR 0 16
38593: PPUSH
38594: CALL_OW 321
38598: PUSH
38599: LD_INT 2
38601: EQUAL
38602: AND
38603: IFFALSE 38768
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38605: LD_INT 22
38607: PUSH
38608: LD_VAR 0 16
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: LD_INT 35
38622: PUSH
38623: LD_INT 11
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 35
38632: PUSH
38633: LD_INT 30
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 91
38647: PUSH
38648: LD_VAR 0 1
38652: PUSH
38653: LD_INT 18
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: PPUSH
38666: CALL_OW 69
38670: NOT
38671: PUSH
38672: LD_INT 22
38674: PUSH
38675: LD_VAR 0 16
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 30
38689: PUSH
38690: LD_INT 32
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 30
38699: PUSH
38700: LD_INT 33
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 91
38714: PUSH
38715: LD_VAR 0 1
38719: PUSH
38720: LD_INT 12
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: PUSH
38733: EMPTY
38734: LIST
38735: PPUSH
38736: CALL_OW 69
38740: PUSH
38741: LD_INT 2
38743: GREATER
38744: AND
38745: IFFALSE 38768
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38747: LD_ADDR_VAR 0 18
38751: PUSH
38752: LD_INT 11
38754: PUSH
38755: LD_INT 30
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_VAR 0 12
38766: ARRAY
38767: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38768: LD_VAR 0 18
38772: NOT
38773: PUSH
38774: LD_INT 40
38776: PPUSH
38777: LD_VAR 0 16
38781: PPUSH
38782: CALL_OW 321
38786: PUSH
38787: LD_INT 2
38789: EQUAL
38790: AND
38791: PUSH
38792: LD_INT 7
38794: PUSH
38795: LD_VAR 0 5
38799: IN
38800: PUSH
38801: LD_INT 28
38803: PUSH
38804: LD_VAR 0 5
38808: IN
38809: OR
38810: PUSH
38811: LD_INT 45
38813: PUSH
38814: LD_VAR 0 5
38818: IN
38819: OR
38820: AND
38821: IFFALSE 39075
// begin hex := GetHexInfo ( x , y ) ;
38823: LD_ADDR_VAR 0 4
38827: PUSH
38828: LD_VAR 0 10
38832: PPUSH
38833: LD_VAR 0 11
38837: PPUSH
38838: CALL_OW 546
38842: ST_TO_ADDR
// if hex [ 1 ] then
38843: LD_VAR 0 4
38847: PUSH
38848: LD_INT 1
38850: ARRAY
38851: IFFALSE 38855
// exit ;
38853: GO 39258
// height := hex [ 2 ] ;
38855: LD_ADDR_VAR 0 15
38859: PUSH
38860: LD_VAR 0 4
38864: PUSH
38865: LD_INT 2
38867: ARRAY
38868: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38869: LD_ADDR_VAR 0 14
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 3
38882: PUSH
38883: LD_INT 5
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: ST_TO_ADDR
// for i in tmp do
38892: LD_ADDR_VAR 0 8
38896: PUSH
38897: LD_VAR 0 14
38901: PUSH
38902: FOR_IN
38903: IFFALSE 39073
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38905: LD_ADDR_VAR 0 9
38909: PUSH
38910: LD_VAR 0 10
38914: PPUSH
38915: LD_VAR 0 8
38919: PPUSH
38920: LD_INT 5
38922: PPUSH
38923: CALL_OW 272
38927: PUSH
38928: LD_VAR 0 11
38932: PPUSH
38933: LD_VAR 0 8
38937: PPUSH
38938: LD_INT 5
38940: PPUSH
38941: CALL_OW 273
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38950: LD_VAR 0 9
38954: PUSH
38955: LD_INT 1
38957: ARRAY
38958: PPUSH
38959: LD_VAR 0 9
38963: PUSH
38964: LD_INT 2
38966: ARRAY
38967: PPUSH
38968: CALL_OW 488
38972: IFFALSE 39071
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38974: LD_ADDR_VAR 0 4
38978: PUSH
38979: LD_VAR 0 9
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: LD_VAR 0 9
38992: PUSH
38993: LD_INT 2
38995: ARRAY
38996: PPUSH
38997: CALL_OW 546
39001: ST_TO_ADDR
// if hex [ 1 ] then
39002: LD_VAR 0 4
39006: PUSH
39007: LD_INT 1
39009: ARRAY
39010: IFFALSE 39014
// continue ;
39012: GO 38902
// h := hex [ 2 ] ;
39014: LD_ADDR_VAR 0 13
39018: PUSH
39019: LD_VAR 0 4
39023: PUSH
39024: LD_INT 2
39026: ARRAY
39027: ST_TO_ADDR
// if h + 7 < height then
39028: LD_VAR 0 13
39032: PUSH
39033: LD_INT 7
39035: PLUS
39036: PUSH
39037: LD_VAR 0 15
39041: LESS
39042: IFFALSE 39071
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39044: LD_ADDR_VAR 0 18
39048: PUSH
39049: LD_INT 7
39051: PUSH
39052: LD_INT 28
39054: PUSH
39055: LD_INT 45
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: PUSH
39063: LD_VAR 0 12
39067: ARRAY
39068: ST_TO_ADDR
// break ;
39069: GO 39073
// end ; end ; end ;
39071: GO 38902
39073: POP
39074: POP
// end ; if not weapon then
39075: LD_VAR 0 18
39079: NOT
39080: IFFALSE 39140
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39082: LD_ADDR_VAR 0 5
39086: PUSH
39087: LD_VAR 0 5
39091: PUSH
39092: LD_INT 11
39094: PUSH
39095: LD_INT 30
39097: PUSH
39098: LD_INT 49
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: DIFF
39106: ST_TO_ADDR
// if not list then
39107: LD_VAR 0 5
39111: NOT
39112: IFFALSE 39116
// exit ;
39114: GO 39258
// weapon := list [ rand ( 1 , list ) ] ;
39116: LD_ADDR_VAR 0 18
39120: PUSH
39121: LD_VAR 0 5
39125: PUSH
39126: LD_INT 1
39128: PPUSH
39129: LD_VAR 0 5
39133: PPUSH
39134: CALL_OW 12
39138: ARRAY
39139: ST_TO_ADDR
// end ; if weapon then
39140: LD_VAR 0 18
39144: IFFALSE 39258
// begin tmp := CostOfWeapon ( weapon ) ;
39146: LD_ADDR_VAR 0 14
39150: PUSH
39151: LD_VAR 0 18
39155: PPUSH
39156: CALL_OW 451
39160: ST_TO_ADDR
// j := GetBase ( tower ) ;
39161: LD_ADDR_VAR 0 9
39165: PUSH
39166: LD_VAR 0 1
39170: PPUSH
39171: CALL_OW 274
39175: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39176: LD_VAR 0 9
39180: PPUSH
39181: LD_INT 1
39183: PPUSH
39184: CALL_OW 275
39188: PUSH
39189: LD_VAR 0 14
39193: PUSH
39194: LD_INT 1
39196: ARRAY
39197: GREATEREQUAL
39198: PUSH
39199: LD_VAR 0 9
39203: PPUSH
39204: LD_INT 2
39206: PPUSH
39207: CALL_OW 275
39211: PUSH
39212: LD_VAR 0 14
39216: PUSH
39217: LD_INT 2
39219: ARRAY
39220: GREATEREQUAL
39221: AND
39222: PUSH
39223: LD_VAR 0 9
39227: PPUSH
39228: LD_INT 3
39230: PPUSH
39231: CALL_OW 275
39235: PUSH
39236: LD_VAR 0 14
39240: PUSH
39241: LD_INT 3
39243: ARRAY
39244: GREATEREQUAL
39245: AND
39246: IFFALSE 39258
// result := weapon ;
39248: LD_ADDR_VAR 0 3
39252: PUSH
39253: LD_VAR 0 18
39257: ST_TO_ADDR
// end ; end ;
39258: LD_VAR 0 3
39262: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39263: LD_INT 0
39265: PPUSH
39266: PPUSH
// result := true ;
39267: LD_ADDR_VAR 0 3
39271: PUSH
39272: LD_INT 1
39274: ST_TO_ADDR
// if array1 = array2 then
39275: LD_VAR 0 1
39279: PUSH
39280: LD_VAR 0 2
39284: EQUAL
39285: IFFALSE 39345
// begin for i = 1 to array1 do
39287: LD_ADDR_VAR 0 4
39291: PUSH
39292: DOUBLE
39293: LD_INT 1
39295: DEC
39296: ST_TO_ADDR
39297: LD_VAR 0 1
39301: PUSH
39302: FOR_TO
39303: IFFALSE 39341
// if array1 [ i ] <> array2 [ i ] then
39305: LD_VAR 0 1
39309: PUSH
39310: LD_VAR 0 4
39314: ARRAY
39315: PUSH
39316: LD_VAR 0 2
39320: PUSH
39321: LD_VAR 0 4
39325: ARRAY
39326: NONEQUAL
39327: IFFALSE 39339
// begin result := false ;
39329: LD_ADDR_VAR 0 3
39333: PUSH
39334: LD_INT 0
39336: ST_TO_ADDR
// break ;
39337: GO 39341
// end ;
39339: GO 39302
39341: POP
39342: POP
// end else
39343: GO 39353
// result := false ;
39345: LD_ADDR_VAR 0 3
39349: PUSH
39350: LD_INT 0
39352: ST_TO_ADDR
// end ;
39353: LD_VAR 0 3
39357: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39358: LD_INT 0
39360: PPUSH
39361: PPUSH
// if not array1 or not array2 then
39362: LD_VAR 0 1
39366: NOT
39367: PUSH
39368: LD_VAR 0 2
39372: NOT
39373: OR
39374: IFFALSE 39378
// exit ;
39376: GO 39442
// result := true ;
39378: LD_ADDR_VAR 0 3
39382: PUSH
39383: LD_INT 1
39385: ST_TO_ADDR
// for i = 1 to array1 do
39386: LD_ADDR_VAR 0 4
39390: PUSH
39391: DOUBLE
39392: LD_INT 1
39394: DEC
39395: ST_TO_ADDR
39396: LD_VAR 0 1
39400: PUSH
39401: FOR_TO
39402: IFFALSE 39440
// if array1 [ i ] <> array2 [ i ] then
39404: LD_VAR 0 1
39408: PUSH
39409: LD_VAR 0 4
39413: ARRAY
39414: PUSH
39415: LD_VAR 0 2
39419: PUSH
39420: LD_VAR 0 4
39424: ARRAY
39425: NONEQUAL
39426: IFFALSE 39438
// begin result := false ;
39428: LD_ADDR_VAR 0 3
39432: PUSH
39433: LD_INT 0
39435: ST_TO_ADDR
// break ;
39436: GO 39440
// end ;
39438: GO 39401
39440: POP
39441: POP
// end ;
39442: LD_VAR 0 3
39446: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39447: LD_INT 0
39449: PPUSH
39450: PPUSH
39451: PPUSH
// pom := GetBase ( fac ) ;
39452: LD_ADDR_VAR 0 5
39456: PUSH
39457: LD_VAR 0 1
39461: PPUSH
39462: CALL_OW 274
39466: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39467: LD_ADDR_VAR 0 4
39471: PUSH
39472: LD_VAR 0 2
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: LD_VAR 0 2
39485: PUSH
39486: LD_INT 2
39488: ARRAY
39489: PPUSH
39490: LD_VAR 0 2
39494: PUSH
39495: LD_INT 3
39497: ARRAY
39498: PPUSH
39499: LD_VAR 0 2
39503: PUSH
39504: LD_INT 4
39506: ARRAY
39507: PPUSH
39508: CALL_OW 449
39512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_VAR 0 5
39522: PPUSH
39523: LD_INT 1
39525: PPUSH
39526: CALL_OW 275
39530: PUSH
39531: LD_VAR 0 4
39535: PUSH
39536: LD_INT 1
39538: ARRAY
39539: GREATEREQUAL
39540: PUSH
39541: LD_VAR 0 5
39545: PPUSH
39546: LD_INT 2
39548: PPUSH
39549: CALL_OW 275
39553: PUSH
39554: LD_VAR 0 4
39558: PUSH
39559: LD_INT 2
39561: ARRAY
39562: GREATEREQUAL
39563: AND
39564: PUSH
39565: LD_VAR 0 5
39569: PPUSH
39570: LD_INT 3
39572: PPUSH
39573: CALL_OW 275
39577: PUSH
39578: LD_VAR 0 4
39582: PUSH
39583: LD_INT 3
39585: ARRAY
39586: GREATEREQUAL
39587: AND
39588: ST_TO_ADDR
// end ;
39589: LD_VAR 0 3
39593: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39594: LD_INT 0
39596: PPUSH
39597: PPUSH
39598: PPUSH
39599: PPUSH
// pom := GetBase ( building ) ;
39600: LD_ADDR_VAR 0 3
39604: PUSH
39605: LD_VAR 0 1
39609: PPUSH
39610: CALL_OW 274
39614: ST_TO_ADDR
// if not pom then
39615: LD_VAR 0 3
39619: NOT
39620: IFFALSE 39624
// exit ;
39622: GO 39794
// btype := GetBType ( building ) ;
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 266
39638: ST_TO_ADDR
// if btype = b_armoury then
39639: LD_VAR 0 5
39643: PUSH
39644: LD_INT 4
39646: EQUAL
39647: IFFALSE 39657
// btype := b_barracks ;
39649: LD_ADDR_VAR 0 5
39653: PUSH
39654: LD_INT 5
39656: ST_TO_ADDR
// if btype = b_depot then
39657: LD_VAR 0 5
39661: PUSH
39662: LD_INT 0
39664: EQUAL
39665: IFFALSE 39675
// btype := b_warehouse ;
39667: LD_ADDR_VAR 0 5
39671: PUSH
39672: LD_INT 1
39674: ST_TO_ADDR
// if btype = b_workshop then
39675: LD_VAR 0 5
39679: PUSH
39680: LD_INT 2
39682: EQUAL
39683: IFFALSE 39693
// btype := b_factory ;
39685: LD_ADDR_VAR 0 5
39689: PUSH
39690: LD_INT 3
39692: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39693: LD_ADDR_VAR 0 4
39697: PUSH
39698: LD_VAR 0 5
39702: PPUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL_OW 248
39712: PPUSH
39713: CALL_OW 450
39717: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39718: LD_ADDR_VAR 0 2
39722: PUSH
39723: LD_VAR 0 3
39727: PPUSH
39728: LD_INT 1
39730: PPUSH
39731: CALL_OW 275
39735: PUSH
39736: LD_VAR 0 4
39740: PUSH
39741: LD_INT 1
39743: ARRAY
39744: GREATEREQUAL
39745: PUSH
39746: LD_VAR 0 3
39750: PPUSH
39751: LD_INT 2
39753: PPUSH
39754: CALL_OW 275
39758: PUSH
39759: LD_VAR 0 4
39763: PUSH
39764: LD_INT 2
39766: ARRAY
39767: GREATEREQUAL
39768: AND
39769: PUSH
39770: LD_VAR 0 3
39774: PPUSH
39775: LD_INT 3
39777: PPUSH
39778: CALL_OW 275
39782: PUSH
39783: LD_VAR 0 4
39787: PUSH
39788: LD_INT 3
39790: ARRAY
39791: GREATEREQUAL
39792: AND
39793: ST_TO_ADDR
// end ;
39794: LD_VAR 0 2
39798: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39799: LD_INT 0
39801: PPUSH
39802: PPUSH
39803: PPUSH
// pom := GetBase ( building ) ;
39804: LD_ADDR_VAR 0 4
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 274
39818: ST_TO_ADDR
// if not pom then
39819: LD_VAR 0 4
39823: NOT
39824: IFFALSE 39828
// exit ;
39826: GO 39929
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39828: LD_ADDR_VAR 0 5
39832: PUSH
39833: LD_VAR 0 2
39837: PPUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: CALL_OW 248
39847: PPUSH
39848: CALL_OW 450
39852: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39853: LD_ADDR_VAR 0 3
39857: PUSH
39858: LD_VAR 0 4
39862: PPUSH
39863: LD_INT 1
39865: PPUSH
39866: CALL_OW 275
39870: PUSH
39871: LD_VAR 0 5
39875: PUSH
39876: LD_INT 1
39878: ARRAY
39879: GREATEREQUAL
39880: PUSH
39881: LD_VAR 0 4
39885: PPUSH
39886: LD_INT 2
39888: PPUSH
39889: CALL_OW 275
39893: PUSH
39894: LD_VAR 0 5
39898: PUSH
39899: LD_INT 2
39901: ARRAY
39902: GREATEREQUAL
39903: AND
39904: PUSH
39905: LD_VAR 0 4
39909: PPUSH
39910: LD_INT 3
39912: PPUSH
39913: CALL_OW 275
39917: PUSH
39918: LD_VAR 0 5
39922: PUSH
39923: LD_INT 3
39925: ARRAY
39926: GREATEREQUAL
39927: AND
39928: ST_TO_ADDR
// end ;
39929: LD_VAR 0 3
39933: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39934: LD_INT 0
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
// result := false ;
39947: LD_ADDR_VAR 0 8
39951: PUSH
39952: LD_INT 0
39954: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39955: LD_VAR 0 5
39959: NOT
39960: PUSH
39961: LD_VAR 0 1
39965: NOT
39966: OR
39967: PUSH
39968: LD_VAR 0 2
39972: NOT
39973: OR
39974: PUSH
39975: LD_VAR 0 3
39979: NOT
39980: OR
39981: IFFALSE 39985
// exit ;
39983: GO 40799
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39985: LD_ADDR_VAR 0 14
39989: PUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: LD_VAR 0 2
39999: PPUSH
40000: LD_VAR 0 3
40004: PPUSH
40005: LD_VAR 0 4
40009: PPUSH
40010: LD_VAR 0 5
40014: PUSH
40015: LD_INT 1
40017: ARRAY
40018: PPUSH
40019: CALL_OW 248
40023: PPUSH
40024: LD_INT 0
40026: PPUSH
40027: CALL 42052 0 6
40031: ST_TO_ADDR
// if not hexes then
40032: LD_VAR 0 14
40036: NOT
40037: IFFALSE 40041
// exit ;
40039: GO 40799
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40041: LD_ADDR_VAR 0 17
40045: PUSH
40046: LD_VAR 0 5
40050: PPUSH
40051: LD_INT 22
40053: PUSH
40054: LD_VAR 0 13
40058: PPUSH
40059: CALL_OW 255
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: LD_INT 30
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 30
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: LIST
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PPUSH
40100: CALL_OW 72
40104: ST_TO_ADDR
// for i = 1 to hexes do
40105: LD_ADDR_VAR 0 9
40109: PUSH
40110: DOUBLE
40111: LD_INT 1
40113: DEC
40114: ST_TO_ADDR
40115: LD_VAR 0 14
40119: PUSH
40120: FOR_TO
40121: IFFALSE 40797
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40123: LD_ADDR_VAR 0 13
40127: PUSH
40128: LD_VAR 0 14
40132: PUSH
40133: LD_VAR 0 9
40137: ARRAY
40138: PUSH
40139: LD_INT 1
40141: ARRAY
40142: PPUSH
40143: LD_VAR 0 14
40147: PUSH
40148: LD_VAR 0 9
40152: ARRAY
40153: PUSH
40154: LD_INT 2
40156: ARRAY
40157: PPUSH
40158: CALL_OW 428
40162: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40163: LD_VAR 0 14
40167: PUSH
40168: LD_VAR 0 9
40172: ARRAY
40173: PUSH
40174: LD_INT 1
40176: ARRAY
40177: PPUSH
40178: LD_VAR 0 14
40182: PUSH
40183: LD_VAR 0 9
40187: ARRAY
40188: PUSH
40189: LD_INT 2
40191: ARRAY
40192: PPUSH
40193: CALL_OW 351
40197: PUSH
40198: LD_VAR 0 14
40202: PUSH
40203: LD_VAR 0 9
40207: ARRAY
40208: PUSH
40209: LD_INT 1
40211: ARRAY
40212: PPUSH
40213: LD_VAR 0 14
40217: PUSH
40218: LD_VAR 0 9
40222: ARRAY
40223: PUSH
40224: LD_INT 2
40226: ARRAY
40227: PPUSH
40228: CALL_OW 488
40232: NOT
40233: OR
40234: PUSH
40235: LD_VAR 0 13
40239: PPUSH
40240: CALL_OW 247
40244: PUSH
40245: LD_INT 3
40247: EQUAL
40248: OR
40249: IFFALSE 40255
// exit ;
40251: POP
40252: POP
40253: GO 40799
// if not tmp then
40255: LD_VAR 0 13
40259: NOT
40260: IFFALSE 40264
// continue ;
40262: GO 40120
// result := true ;
40264: LD_ADDR_VAR 0 8
40268: PUSH
40269: LD_INT 1
40271: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40272: LD_VAR 0 6
40276: PUSH
40277: LD_VAR 0 13
40281: PPUSH
40282: CALL_OW 247
40286: PUSH
40287: LD_INT 2
40289: EQUAL
40290: AND
40291: PUSH
40292: LD_VAR 0 13
40296: PPUSH
40297: CALL_OW 263
40301: PUSH
40302: LD_INT 1
40304: EQUAL
40305: AND
40306: IFFALSE 40470
// begin if IsDrivenBy ( tmp ) then
40308: LD_VAR 0 13
40312: PPUSH
40313: CALL_OW 311
40317: IFFALSE 40321
// continue ;
40319: GO 40120
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40321: LD_VAR 0 6
40325: PPUSH
40326: LD_INT 3
40328: PUSH
40329: LD_INT 60
40331: PUSH
40332: EMPTY
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: LD_INT 55
40344: PUSH
40345: EMPTY
40346: LIST
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PPUSH
40356: CALL_OW 72
40360: IFFALSE 40468
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40362: LD_ADDR_VAR 0 18
40366: PUSH
40367: LD_VAR 0 6
40371: PPUSH
40372: LD_INT 3
40374: PUSH
40375: LD_INT 60
40377: PUSH
40378: EMPTY
40379: LIST
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 3
40387: PUSH
40388: LD_INT 55
40390: PUSH
40391: EMPTY
40392: LIST
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PPUSH
40402: CALL_OW 72
40406: PUSH
40407: LD_INT 1
40409: ARRAY
40410: ST_TO_ADDR
// if IsInUnit ( driver ) then
40411: LD_VAR 0 18
40415: PPUSH
40416: CALL_OW 310
40420: IFFALSE 40431
// ComExit ( driver ) ;
40422: LD_VAR 0 18
40426: PPUSH
40427: CALL 65833 0 1
// AddComEnterUnit ( driver , tmp ) ;
40431: LD_VAR 0 18
40435: PPUSH
40436: LD_VAR 0 13
40440: PPUSH
40441: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40445: LD_VAR 0 18
40449: PPUSH
40450: LD_VAR 0 7
40454: PPUSH
40455: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40459: LD_VAR 0 18
40463: PPUSH
40464: CALL_OW 181
// end ; continue ;
40468: GO 40120
// end ; if not cleaners or not tmp in cleaners then
40470: LD_VAR 0 6
40474: NOT
40475: PUSH
40476: LD_VAR 0 13
40480: PUSH
40481: LD_VAR 0 6
40485: IN
40486: NOT
40487: OR
40488: IFFALSE 40795
// begin if dep then
40490: LD_VAR 0 17
40494: IFFALSE 40630
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40496: LD_ADDR_VAR 0 16
40500: PUSH
40501: LD_VAR 0 17
40505: PUSH
40506: LD_INT 1
40508: ARRAY
40509: PPUSH
40510: CALL_OW 250
40514: PPUSH
40515: LD_VAR 0 17
40519: PUSH
40520: LD_INT 1
40522: ARRAY
40523: PPUSH
40524: CALL_OW 254
40528: PPUSH
40529: LD_INT 5
40531: PPUSH
40532: CALL_OW 272
40536: PUSH
40537: LD_VAR 0 17
40541: PUSH
40542: LD_INT 1
40544: ARRAY
40545: PPUSH
40546: CALL_OW 251
40550: PPUSH
40551: LD_VAR 0 17
40555: PUSH
40556: LD_INT 1
40558: ARRAY
40559: PPUSH
40560: CALL_OW 254
40564: PPUSH
40565: LD_INT 5
40567: PPUSH
40568: CALL_OW 273
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40577: LD_VAR 0 16
40581: PUSH
40582: LD_INT 1
40584: ARRAY
40585: PPUSH
40586: LD_VAR 0 16
40590: PUSH
40591: LD_INT 2
40593: ARRAY
40594: PPUSH
40595: CALL_OW 488
40599: IFFALSE 40630
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40601: LD_VAR 0 13
40605: PPUSH
40606: LD_VAR 0 16
40610: PUSH
40611: LD_INT 1
40613: ARRAY
40614: PPUSH
40615: LD_VAR 0 16
40619: PUSH
40620: LD_INT 2
40622: ARRAY
40623: PPUSH
40624: CALL_OW 111
// continue ;
40628: GO 40120
// end ; end ; r := GetDir ( tmp ) ;
40630: LD_ADDR_VAR 0 15
40634: PUSH
40635: LD_VAR 0 13
40639: PPUSH
40640: CALL_OW 254
40644: ST_TO_ADDR
// if r = 5 then
40645: LD_VAR 0 15
40649: PUSH
40650: LD_INT 5
40652: EQUAL
40653: IFFALSE 40663
// r := 0 ;
40655: LD_ADDR_VAR 0 15
40659: PUSH
40660: LD_INT 0
40662: ST_TO_ADDR
// for j = r to 5 do
40663: LD_ADDR_VAR 0 10
40667: PUSH
40668: DOUBLE
40669: LD_VAR 0 15
40673: DEC
40674: ST_TO_ADDR
40675: LD_INT 5
40677: PUSH
40678: FOR_TO
40679: IFFALSE 40793
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40681: LD_ADDR_VAR 0 11
40685: PUSH
40686: LD_VAR 0 13
40690: PPUSH
40691: CALL_OW 250
40695: PPUSH
40696: LD_VAR 0 10
40700: PPUSH
40701: LD_INT 2
40703: PPUSH
40704: CALL_OW 272
40708: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40709: LD_ADDR_VAR 0 12
40713: PUSH
40714: LD_VAR 0 13
40718: PPUSH
40719: CALL_OW 251
40723: PPUSH
40724: LD_VAR 0 10
40728: PPUSH
40729: LD_INT 2
40731: PPUSH
40732: CALL_OW 273
40736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40737: LD_VAR 0 11
40741: PPUSH
40742: LD_VAR 0 12
40746: PPUSH
40747: CALL_OW 488
40751: PUSH
40752: LD_VAR 0 11
40756: PPUSH
40757: LD_VAR 0 12
40761: PPUSH
40762: CALL_OW 428
40766: NOT
40767: AND
40768: IFFALSE 40791
// begin ComMoveXY ( tmp , _x , _y ) ;
40770: LD_VAR 0 13
40774: PPUSH
40775: LD_VAR 0 11
40779: PPUSH
40780: LD_VAR 0 12
40784: PPUSH
40785: CALL_OW 111
// break ;
40789: GO 40793
// end ; end ;
40791: GO 40678
40793: POP
40794: POP
// end ; end ;
40795: GO 40120
40797: POP
40798: POP
// end ;
40799: LD_VAR 0 8
40803: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40804: LD_INT 0
40806: PPUSH
// result := true ;
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: LD_INT 1
40814: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40815: LD_VAR 0 2
40819: PUSH
40820: LD_INT 24
40822: DOUBLE
40823: EQUAL
40824: IFTRUE 40834
40826: LD_INT 33
40828: DOUBLE
40829: EQUAL
40830: IFTRUE 40834
40832: GO 40859
40834: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40835: LD_ADDR_VAR 0 3
40839: PUSH
40840: LD_INT 32
40842: PPUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL_OW 321
40852: PUSH
40853: LD_INT 2
40855: EQUAL
40856: ST_TO_ADDR
40857: GO 41175
40859: LD_INT 20
40861: DOUBLE
40862: EQUAL
40863: IFTRUE 40867
40865: GO 40892
40867: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40868: LD_ADDR_VAR 0 3
40872: PUSH
40873: LD_INT 6
40875: PPUSH
40876: LD_VAR 0 1
40880: PPUSH
40881: CALL_OW 321
40885: PUSH
40886: LD_INT 2
40888: EQUAL
40889: ST_TO_ADDR
40890: GO 41175
40892: LD_INT 22
40894: DOUBLE
40895: EQUAL
40896: IFTRUE 40906
40898: LD_INT 36
40900: DOUBLE
40901: EQUAL
40902: IFTRUE 40906
40904: GO 40931
40906: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: LD_INT 15
40914: PPUSH
40915: LD_VAR 0 1
40919: PPUSH
40920: CALL_OW 321
40924: PUSH
40925: LD_INT 2
40927: EQUAL
40928: ST_TO_ADDR
40929: GO 41175
40931: LD_INT 30
40933: DOUBLE
40934: EQUAL
40935: IFTRUE 40939
40937: GO 40964
40939: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40940: LD_ADDR_VAR 0 3
40944: PUSH
40945: LD_INT 20
40947: PPUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL_OW 321
40957: PUSH
40958: LD_INT 2
40960: EQUAL
40961: ST_TO_ADDR
40962: GO 41175
40964: LD_INT 28
40966: DOUBLE
40967: EQUAL
40968: IFTRUE 40978
40970: LD_INT 21
40972: DOUBLE
40973: EQUAL
40974: IFTRUE 40978
40976: GO 41003
40978: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40979: LD_ADDR_VAR 0 3
40983: PUSH
40984: LD_INT 21
40986: PPUSH
40987: LD_VAR 0 1
40991: PPUSH
40992: CALL_OW 321
40996: PUSH
40997: LD_INT 2
40999: EQUAL
41000: ST_TO_ADDR
41001: GO 41175
41003: LD_INT 16
41005: DOUBLE
41006: EQUAL
41007: IFTRUE 41011
41009: GO 41036
41011: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41012: LD_ADDR_VAR 0 3
41016: PUSH
41017: LD_INT 84
41019: PPUSH
41020: LD_VAR 0 1
41024: PPUSH
41025: CALL_OW 321
41029: PUSH
41030: LD_INT 2
41032: EQUAL
41033: ST_TO_ADDR
41034: GO 41175
41036: LD_INT 19
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41050
41042: LD_INT 23
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41050
41048: GO 41075
41050: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: LD_INT 83
41058: PPUSH
41059: LD_VAR 0 1
41063: PPUSH
41064: CALL_OW 321
41068: PUSH
41069: LD_INT 2
41071: EQUAL
41072: ST_TO_ADDR
41073: GO 41175
41075: LD_INT 17
41077: DOUBLE
41078: EQUAL
41079: IFTRUE 41083
41081: GO 41108
41083: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41084: LD_ADDR_VAR 0 3
41088: PUSH
41089: LD_INT 39
41091: PPUSH
41092: LD_VAR 0 1
41096: PPUSH
41097: CALL_OW 321
41101: PUSH
41102: LD_INT 2
41104: EQUAL
41105: ST_TO_ADDR
41106: GO 41175
41108: LD_INT 18
41110: DOUBLE
41111: EQUAL
41112: IFTRUE 41116
41114: GO 41141
41116: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41117: LD_ADDR_VAR 0 3
41121: PUSH
41122: LD_INT 40
41124: PPUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: CALL_OW 321
41134: PUSH
41135: LD_INT 2
41137: EQUAL
41138: ST_TO_ADDR
41139: GO 41175
41141: LD_INT 27
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41149
41147: GO 41174
41149: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: LD_INT 35
41157: PPUSH
41158: LD_VAR 0 1
41162: PPUSH
41163: CALL_OW 321
41167: PUSH
41168: LD_INT 2
41170: EQUAL
41171: ST_TO_ADDR
41172: GO 41175
41174: POP
// end ;
41175: LD_VAR 0 3
41179: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41180: LD_INT 0
41182: PPUSH
41183: PPUSH
41184: PPUSH
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
41190: PPUSH
41191: PPUSH
41192: PPUSH
// result := false ;
41193: LD_ADDR_VAR 0 6
41197: PUSH
41198: LD_INT 0
41200: ST_TO_ADDR
// if btype = b_depot then
41201: LD_VAR 0 2
41205: PUSH
41206: LD_INT 0
41208: EQUAL
41209: IFFALSE 41221
// begin result := true ;
41211: LD_ADDR_VAR 0 6
41215: PUSH
41216: LD_INT 1
41218: ST_TO_ADDR
// exit ;
41219: GO 42047
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41221: LD_VAR 0 1
41225: NOT
41226: PUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 266
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: IN
41247: NOT
41248: OR
41249: PUSH
41250: LD_VAR 0 2
41254: NOT
41255: OR
41256: PUSH
41257: LD_VAR 0 5
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: LD_INT 4
41276: PUSH
41277: LD_INT 5
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: IN
41288: NOT
41289: OR
41290: PUSH
41291: LD_VAR 0 3
41295: PPUSH
41296: LD_VAR 0 4
41300: PPUSH
41301: CALL_OW 488
41305: NOT
41306: OR
41307: IFFALSE 41311
// exit ;
41309: GO 42047
// side := GetSide ( depot ) ;
41311: LD_ADDR_VAR 0 9
41315: PUSH
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 255
41325: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41326: LD_VAR 0 9
41330: PPUSH
41331: LD_VAR 0 2
41335: PPUSH
41336: CALL 40804 0 2
41340: NOT
41341: IFFALSE 41345
// exit ;
41343: GO 42047
// pom := GetBase ( depot ) ;
41345: LD_ADDR_VAR 0 10
41349: PUSH
41350: LD_VAR 0 1
41354: PPUSH
41355: CALL_OW 274
41359: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41360: LD_ADDR_VAR 0 11
41364: PUSH
41365: LD_VAR 0 2
41369: PPUSH
41370: LD_VAR 0 1
41374: PPUSH
41375: CALL_OW 248
41379: PPUSH
41380: CALL_OW 450
41384: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41385: LD_VAR 0 10
41389: PPUSH
41390: LD_INT 1
41392: PPUSH
41393: CALL_OW 275
41397: PUSH
41398: LD_VAR 0 11
41402: PUSH
41403: LD_INT 1
41405: ARRAY
41406: GREATEREQUAL
41407: PUSH
41408: LD_VAR 0 10
41412: PPUSH
41413: LD_INT 2
41415: PPUSH
41416: CALL_OW 275
41420: PUSH
41421: LD_VAR 0 11
41425: PUSH
41426: LD_INT 2
41428: ARRAY
41429: GREATEREQUAL
41430: AND
41431: PUSH
41432: LD_VAR 0 10
41436: PPUSH
41437: LD_INT 3
41439: PPUSH
41440: CALL_OW 275
41444: PUSH
41445: LD_VAR 0 11
41449: PUSH
41450: LD_INT 3
41452: ARRAY
41453: GREATEREQUAL
41454: AND
41455: NOT
41456: IFFALSE 41460
// exit ;
41458: GO 42047
// if GetBType ( depot ) = b_depot then
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL_OW 266
41469: PUSH
41470: LD_INT 0
41472: EQUAL
41473: IFFALSE 41485
// dist := 28 else
41475: LD_ADDR_VAR 0 14
41479: PUSH
41480: LD_INT 28
41482: ST_TO_ADDR
41483: GO 41493
// dist := 36 ;
41485: LD_ADDR_VAR 0 14
41489: PUSH
41490: LD_INT 36
41492: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41493: LD_VAR 0 1
41497: PPUSH
41498: LD_VAR 0 3
41502: PPUSH
41503: LD_VAR 0 4
41507: PPUSH
41508: CALL_OW 297
41512: PUSH
41513: LD_VAR 0 14
41517: GREATER
41518: IFFALSE 41522
// exit ;
41520: GO 42047
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41522: LD_ADDR_VAR 0 12
41526: PUSH
41527: LD_VAR 0 2
41531: PPUSH
41532: LD_VAR 0 3
41536: PPUSH
41537: LD_VAR 0 4
41541: PPUSH
41542: LD_VAR 0 5
41546: PPUSH
41547: LD_VAR 0 1
41551: PPUSH
41552: CALL_OW 248
41556: PPUSH
41557: LD_INT 0
41559: PPUSH
41560: CALL 42052 0 6
41564: ST_TO_ADDR
// if not hexes then
41565: LD_VAR 0 12
41569: NOT
41570: IFFALSE 41574
// exit ;
41572: GO 42047
// hex := GetHexInfo ( x , y ) ;
41574: LD_ADDR_VAR 0 15
41578: PUSH
41579: LD_VAR 0 3
41583: PPUSH
41584: LD_VAR 0 4
41588: PPUSH
41589: CALL_OW 546
41593: ST_TO_ADDR
// if hex [ 1 ] then
41594: LD_VAR 0 15
41598: PUSH
41599: LD_INT 1
41601: ARRAY
41602: IFFALSE 41606
// exit ;
41604: GO 42047
// height := hex [ 2 ] ;
41606: LD_ADDR_VAR 0 13
41610: PUSH
41611: LD_VAR 0 15
41615: PUSH
41616: LD_INT 2
41618: ARRAY
41619: ST_TO_ADDR
// for i = 1 to hexes do
41620: LD_ADDR_VAR 0 7
41624: PUSH
41625: DOUBLE
41626: LD_INT 1
41628: DEC
41629: ST_TO_ADDR
41630: LD_VAR 0 12
41634: PUSH
41635: FOR_TO
41636: IFFALSE 41966
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41638: LD_VAR 0 12
41642: PUSH
41643: LD_VAR 0 7
41647: ARRAY
41648: PUSH
41649: LD_INT 1
41651: ARRAY
41652: PPUSH
41653: LD_VAR 0 12
41657: PUSH
41658: LD_VAR 0 7
41662: ARRAY
41663: PUSH
41664: LD_INT 2
41666: ARRAY
41667: PPUSH
41668: CALL_OW 488
41672: NOT
41673: PUSH
41674: LD_VAR 0 12
41678: PUSH
41679: LD_VAR 0 7
41683: ARRAY
41684: PUSH
41685: LD_INT 1
41687: ARRAY
41688: PPUSH
41689: LD_VAR 0 12
41693: PUSH
41694: LD_VAR 0 7
41698: ARRAY
41699: PUSH
41700: LD_INT 2
41702: ARRAY
41703: PPUSH
41704: CALL_OW 428
41708: PUSH
41709: LD_INT 0
41711: GREATER
41712: OR
41713: PUSH
41714: LD_VAR 0 12
41718: PUSH
41719: LD_VAR 0 7
41723: ARRAY
41724: PUSH
41725: LD_INT 1
41727: ARRAY
41728: PPUSH
41729: LD_VAR 0 12
41733: PUSH
41734: LD_VAR 0 7
41738: ARRAY
41739: PUSH
41740: LD_INT 2
41742: ARRAY
41743: PPUSH
41744: CALL_OW 351
41748: OR
41749: IFFALSE 41755
// exit ;
41751: POP
41752: POP
41753: GO 42047
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41755: LD_ADDR_VAR 0 8
41759: PUSH
41760: LD_VAR 0 12
41764: PUSH
41765: LD_VAR 0 7
41769: ARRAY
41770: PUSH
41771: LD_INT 1
41773: ARRAY
41774: PPUSH
41775: LD_VAR 0 12
41779: PUSH
41780: LD_VAR 0 7
41784: ARRAY
41785: PUSH
41786: LD_INT 2
41788: ARRAY
41789: PPUSH
41790: CALL_OW 546
41794: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41795: LD_VAR 0 8
41799: PUSH
41800: LD_INT 1
41802: ARRAY
41803: PUSH
41804: LD_VAR 0 8
41808: PUSH
41809: LD_INT 2
41811: ARRAY
41812: PUSH
41813: LD_VAR 0 13
41817: PUSH
41818: LD_INT 2
41820: PLUS
41821: GREATER
41822: OR
41823: PUSH
41824: LD_VAR 0 8
41828: PUSH
41829: LD_INT 2
41831: ARRAY
41832: PUSH
41833: LD_VAR 0 13
41837: PUSH
41838: LD_INT 2
41840: MINUS
41841: LESS
41842: OR
41843: PUSH
41844: LD_VAR 0 8
41848: PUSH
41849: LD_INT 3
41851: ARRAY
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: LD_INT 8
41858: PUSH
41859: LD_INT 9
41861: PUSH
41862: LD_INT 10
41864: PUSH
41865: LD_INT 11
41867: PUSH
41868: LD_INT 12
41870: PUSH
41871: LD_INT 13
41873: PUSH
41874: LD_INT 16
41876: PUSH
41877: LD_INT 17
41879: PUSH
41880: LD_INT 18
41882: PUSH
41883: LD_INT 19
41885: PUSH
41886: LD_INT 20
41888: PUSH
41889: LD_INT 21
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: IN
41907: NOT
41908: OR
41909: PUSH
41910: LD_VAR 0 8
41914: PUSH
41915: LD_INT 5
41917: ARRAY
41918: NOT
41919: OR
41920: PUSH
41921: LD_VAR 0 8
41925: PUSH
41926: LD_INT 6
41928: ARRAY
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 7
41938: PUSH
41939: LD_INT 9
41941: PUSH
41942: LD_INT 10
41944: PUSH
41945: LD_INT 11
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: IN
41956: NOT
41957: OR
41958: IFFALSE 41964
// exit ;
41960: POP
41961: POP
41962: GO 42047
// end ;
41964: GO 41635
41966: POP
41967: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41968: LD_VAR 0 9
41972: PPUSH
41973: LD_VAR 0 3
41977: PPUSH
41978: LD_VAR 0 4
41982: PPUSH
41983: LD_INT 20
41985: PPUSH
41986: CALL 33970 0 4
41990: PUSH
41991: LD_INT 4
41993: ARRAY
41994: IFFALSE 41998
// exit ;
41996: GO 42047
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41998: LD_VAR 0 2
42002: PUSH
42003: LD_INT 29
42005: PUSH
42006: LD_INT 30
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: IN
42013: PUSH
42014: LD_VAR 0 3
42018: PPUSH
42019: LD_VAR 0 4
42023: PPUSH
42024: LD_VAR 0 9
42028: PPUSH
42029: CALL_OW 440
42033: NOT
42034: AND
42035: IFFALSE 42039
// exit ;
42037: GO 42047
// result := true ;
42039: LD_ADDR_VAR 0 6
42043: PUSH
42044: LD_INT 1
42046: ST_TO_ADDR
// end ;
42047: LD_VAR 0 6
42051: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42052: LD_INT 0
42054: PPUSH
42055: PPUSH
42056: PPUSH
42057: PPUSH
42058: PPUSH
42059: PPUSH
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
42071: PPUSH
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
// result = [ ] ;
42112: LD_ADDR_VAR 0 7
42116: PUSH
42117: EMPTY
42118: ST_TO_ADDR
// temp_list = [ ] ;
42119: LD_ADDR_VAR 0 9
42123: PUSH
42124: EMPTY
42125: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42126: LD_VAR 0 4
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 4
42145: PUSH
42146: LD_INT 5
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: IN
42157: NOT
42158: PUSH
42159: LD_VAR 0 1
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: IN
42174: PUSH
42175: LD_VAR 0 5
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: IN
42194: NOT
42195: AND
42196: OR
42197: IFFALSE 42201
// exit ;
42199: GO 60592
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42201: LD_VAR 0 1
42205: PUSH
42206: LD_INT 6
42208: PUSH
42209: LD_INT 7
42211: PUSH
42212: LD_INT 8
42214: PUSH
42215: LD_INT 13
42217: PUSH
42218: LD_INT 12
42220: PUSH
42221: LD_INT 15
42223: PUSH
42224: LD_INT 11
42226: PUSH
42227: LD_INT 14
42229: PUSH
42230: LD_INT 10
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: IN
42244: IFFALSE 42254
// btype = b_lab ;
42246: LD_ADDR_VAR 0 1
42250: PUSH
42251: LD_INT 6
42253: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42254: LD_VAR 0 6
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: IN
42273: NOT
42274: PUSH
42275: LD_VAR 0 1
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 3
42291: PUSH
42292: LD_INT 6
42294: PUSH
42295: LD_INT 36
42297: PUSH
42298: LD_INT 4
42300: PUSH
42301: LD_INT 5
42303: PUSH
42304: LD_INT 31
42306: PUSH
42307: LD_INT 32
42309: PUSH
42310: LD_INT 33
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: IN
42326: NOT
42327: PUSH
42328: LD_VAR 0 6
42332: PUSH
42333: LD_INT 1
42335: EQUAL
42336: AND
42337: OR
42338: PUSH
42339: LD_VAR 0 1
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: LD_INT 3
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: IN
42354: NOT
42355: PUSH
42356: LD_VAR 0 6
42360: PUSH
42361: LD_INT 2
42363: EQUAL
42364: AND
42365: OR
42366: IFFALSE 42376
// mode = 0 ;
42368: LD_ADDR_VAR 0 6
42372: PUSH
42373: LD_INT 0
42375: ST_TO_ADDR
// case mode of 0 :
42376: LD_VAR 0 6
42380: PUSH
42381: LD_INT 0
42383: DOUBLE
42384: EQUAL
42385: IFTRUE 42389
42387: GO 53842
42389: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42390: LD_ADDR_VAR 0 11
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42583: LD_ADDR_VAR 0 12
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 3
42740: NEG
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42779: LD_ADDR_VAR 0 13
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: NEG
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 3
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 3
42950: NEG
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42978: LD_ADDR_VAR 0 14
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 3
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43174: LD_ADDR_VAR 0 15
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43367: LD_ADDR_VAR 0 16
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 3
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 3
43524: PUSH
43525: LD_INT 3
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 3
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43560: LD_ADDR_VAR 0 17
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43790: LD_ADDR_VAR 0 18
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 2
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44020: LD_ADDR_VAR 0 19
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44250: LD_ADDR_VAR 0 20
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 2
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44480: LD_ADDR_VAR 0 21
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: NEG
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44710: LD_ADDR_VAR 0 22
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44940: LD_ADDR_VAR 0 23
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 3
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 3
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45220: LD_ADDR_VAR 0 24
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45496: LD_ADDR_VAR 0 25
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 3
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45770: LD_ADDR_VAR 0 26
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46046: LD_ADDR_VAR 0 27
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: NEG
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46326: LD_ADDR_VAR 0 28
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 3
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 3
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 3
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 3
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46608: LD_ADDR_VAR 0 29
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 3
46852: NEG
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46887: LD_ADDR_VAR 0 30
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47165: LD_ADDR_VAR 0 31
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 3
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47443: LD_ADDR_VAR 0 32
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 3
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 3
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47721: LD_ADDR_VAR 0 33
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: LD_INT 3
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48000: LD_ADDR_VAR 0 34
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 3
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 3
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 3
48245: NEG
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48280: LD_ADDR_VAR 0 35
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48392: LD_ADDR_VAR 0 36
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48504: LD_ADDR_VAR 0 37
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48616: LD_ADDR_VAR 0 38
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48728: LD_ADDR_VAR 0 39
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48840: LD_ADDR_VAR 0 40
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48952: LD_ADDR_VAR 0 41
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 3
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 3
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 3
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 3
49249: NEG
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: LD_INT 3
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49302: LD_ADDR_VAR 0 42
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 3
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 3
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 3
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 3
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 3
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 3
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: LD_INT 3
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49652: LD_ADDR_VAR 0 43
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 3
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 3
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50000: LD_ADDR_VAR 0 44
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 3
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 3
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50350: LD_ADDR_VAR 0 45
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 3
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 3
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 3
50647: NEG
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 3
50659: NEG
50660: PUSH
50661: LD_INT 3
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50700: LD_ADDR_VAR 0 46
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51048: LD_ADDR_VAR 0 47
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51199: LD_ADDR_VAR 0 48
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51346: LD_ADDR_VAR 0 49
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51490: LD_ADDR_VAR 0 50
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51634: LD_ADDR_VAR 0 51
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51781: LD_ADDR_VAR 0 52
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51932: LD_ADDR_VAR 0 53
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52162: LD_ADDR_VAR 0 54
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52392: LD_ADDR_VAR 0 55
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52622: LD_ADDR_VAR 0 56
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52852: LD_ADDR_VAR 0 57
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53082: LD_ADDR_VAR 0 58
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53312: LD_ADDR_VAR 0 59
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53400: LD_ADDR_VAR 0 60
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53488: LD_ADDR_VAR 0 61
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53576: LD_ADDR_VAR 0 62
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53664: LD_ADDR_VAR 0 63
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53752: LD_ADDR_VAR 0 64
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: ST_TO_ADDR
// end ; 1 :
53840: GO 59737
53842: LD_INT 1
53844: DOUBLE
53845: EQUAL
53846: IFTRUE 53850
53848: GO 56473
53850: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53851: LD_ADDR_VAR 0 11
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 3
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53895: LD_ADDR_VAR 0 12
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53936: LD_ADDR_VAR 0 13
53940: PUSH
53941: LD_INT 3
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 3
53953: PUSH
53954: LD_INT 3
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53976: LD_ADDR_VAR 0 14
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: LIST
54016: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54017: LD_ADDR_VAR 0 15
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 3
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54061: LD_ADDR_VAR 0 16
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 3
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: LD_INT 3
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54107: LD_ADDR_VAR 0 17
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 3
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54151: LD_ADDR_VAR 0 18
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: LIST
54191: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54192: LD_ADDR_VAR 0 19
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54232: LD_ADDR_VAR 0 20
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54273: LD_ADDR_VAR 0 21
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54317: LD_ADDR_VAR 0 22
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 3
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: NEG
54349: PUSH
54350: LD_INT 3
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54363: LD_ADDR_VAR 0 23
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 4
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54407: LD_ADDR_VAR 0 24
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 4
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54448: LD_ADDR_VAR 0 25
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: LD_INT 3
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 4
54465: PUSH
54466: LD_INT 3
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: LD_INT 4
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: LIST
54487: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54488: LD_ADDR_VAR 0 26
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 4
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: LIST
54528: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54529: LD_ADDR_VAR 0 27
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54573: LD_ADDR_VAR 0 28
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 3
54592: NEG
54593: PUSH
54594: LD_INT 4
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 4
54604: NEG
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54619: LD_ADDR_VAR 0 29
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 3
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 4
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 3
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: LD_INT 5
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 5
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 4
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 6
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 6
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 5
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54774: LD_ADDR_VAR 0 30
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 3
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 4
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 4
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 5
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 5
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 5
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 6
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 6
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54917: LD_ADDR_VAR 0 31
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 3
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 4
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: LD_INT 4
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 5
54984: PUSH
54985: LD_INT 4
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 5
54994: PUSH
54995: LD_INT 5
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 4
55004: PUSH
55005: LD_INT 5
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 6
55014: PUSH
55015: LD_INT 5
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 6
55024: PUSH
55025: LD_INT 6
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 5
55034: PUSH
55035: LD_INT 6
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55056: LD_ADDR_VAR 0 32
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 4
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 4
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 5
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 5
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 4
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 6
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 6
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 5
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55199: LD_ADDR_VAR 0 33
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 3
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 4
55251: NEG
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 4
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 4
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 5
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 5
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 5
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 6
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 6
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55354: LD_ADDR_VAR 0 34
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 3
55373: NEG
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: LD_INT 4
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 4
55409: NEG
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 4
55421: NEG
55422: PUSH
55423: LD_INT 4
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 4
55433: NEG
55434: PUSH
55435: LD_INT 5
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 5
55445: NEG
55446: PUSH
55447: LD_INT 4
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 5
55457: NEG
55458: PUSH
55459: LD_INT 5
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 5
55469: NEG
55470: PUSH
55471: LD_INT 6
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 6
55481: NEG
55482: PUSH
55483: LD_INT 5
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 6
55493: NEG
55494: PUSH
55495: LD_INT 6
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55517: LD_ADDR_VAR 0 41
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55561: LD_ADDR_VAR 0 42
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55602: LD_ADDR_VAR 0 43
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55642: LD_ADDR_VAR 0 44
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55683: LD_ADDR_VAR 0 45
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55727: LD_ADDR_VAR 0 46
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55773: LD_ADDR_VAR 0 47
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55806: LD_ADDR_VAR 0 48
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55837: LD_ADDR_VAR 0 49
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55866: LD_ADDR_VAR 0 50
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55895: LD_ADDR_VAR 0 51
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55926: LD_ADDR_VAR 0 52
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55959: LD_ADDR_VAR 0 53
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 3
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56003: LD_ADDR_VAR 0 54
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56044: LD_ADDR_VAR 0 55
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: LIST
56083: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56084: LD_ADDR_VAR 0 56
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: LIST
56124: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56125: LD_ADDR_VAR 0 57
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: NEG
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56169: LD_ADDR_VAR 0 58
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 3
56188: NEG
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 3
56200: NEG
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56215: LD_ADDR_VAR 0 59
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56259: LD_ADDR_VAR 0 60
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56300: LD_ADDR_VAR 0 61
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56340: LD_ADDR_VAR 0 62
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56381: LD_ADDR_VAR 0 63
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56425: LD_ADDR_VAR 0 64
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// end ; 2 :
56471: GO 59737
56473: LD_INT 2
56475: DOUBLE
56476: EQUAL
56477: IFTRUE 56481
56479: GO 59736
56481: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56482: LD_ADDR_VAR 0 29
56486: PUSH
56487: LD_INT 4
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 4
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 5
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 5
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 4
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 5
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 4
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 4
56612: PUSH
56613: LD_INT 4
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: LD_INT 4
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 3
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 4
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 4
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 4
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 4
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 5
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 5
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 4
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: LD_INT 5
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 3
56776: NEG
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 4
56821: NEG
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 4
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 4
56844: NEG
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: NEG
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 4
56867: NEG
56868: PUSH
56869: LD_INT 4
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 4
56879: NEG
56880: PUSH
56881: LD_INT 5
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: LD_INT 4
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 4
56915: NEG
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 5
56927: NEG
56928: PUSH
56929: LD_INT 4
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 5
56939: NEG
56940: PUSH
56941: LD_INT 5
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: LD_INT 5
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 5
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57020: LD_ADDR_VAR 0 30
57024: PUSH
57025: LD_INT 4
57027: PUSH
57028: LD_INT 4
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 4
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 5
57047: PUSH
57048: LD_INT 4
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 5
57057: PUSH
57058: LD_INT 5
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 4
57067: PUSH
57068: LD_INT 5
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: LD_INT 4
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 5
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: LD_INT 5
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 3
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 4
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 4
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 4
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 4
57210: NEG
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 4
57221: NEG
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 4
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 5
57266: NEG
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 5
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 5
57289: NEG
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: NEG
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 3
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 4
57384: NEG
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: NEG
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 4
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 5
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 4
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 5
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 5
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57567: LD_ADDR_VAR 0 31
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 4
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 4
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: LD_INT 5
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 5
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 4
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 3
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: LD_INT 5
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 3
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 4
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 4
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 4
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 4
57769: NEG
57770: PUSH
57771: LD_INT 4
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 4
57781: NEG
57782: PUSH
57783: LD_INT 5
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: LD_INT 4
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 4
57817: NEG
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 5
57829: NEG
57830: PUSH
57831: LD_INT 4
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 5
57841: NEG
57842: PUSH
57843: LD_INT 5
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: NEG
57854: PUSH
57855: LD_INT 5
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 5
57865: NEG
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 3
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 4
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 3
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 3
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 4
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: LD_INT 4
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 5
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 5
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 4
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 5
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58117: LD_ADDR_VAR 0 32
58121: PUSH
58122: LD_INT 4
58124: NEG
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 4
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 3
58147: NEG
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 3
58158: NEG
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 4
58169: NEG
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 5
58180: NEG
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 5
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 5
58203: NEG
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: NEG
58239: PUSH
58240: LD_INT 4
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 4
58286: NEG
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 4
58298: NEG
58299: PUSH
58300: LD_INT 4
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 4
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 4
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 5
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 4
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 3
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 4
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 5
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 5
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 4
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 4
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 4
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 4
58529: PUSH
58530: LD_INT 4
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 4
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 5
58549: PUSH
58550: LD_INT 4
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 5
58559: PUSH
58560: LD_INT 5
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: LD_INT 5
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: LD_INT 4
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 3
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 5
58599: PUSH
58600: LD_INT 3
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: LD_INT 5
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58664: LD_ADDR_VAR 0 33
58668: PUSH
58669: LD_INT 4
58671: NEG
58672: PUSH
58673: LD_INT 4
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 4
58683: NEG
58684: PUSH
58685: LD_INT 5
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: NEG
58696: PUSH
58697: LD_INT 4
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 4
58719: NEG
58720: PUSH
58721: LD_INT 3
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 5
58731: NEG
58732: PUSH
58733: LD_INT 4
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 5
58743: NEG
58744: PUSH
58745: LD_INT 5
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: LD_INT 5
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 5
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 4
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 4
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 4
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 4
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 4
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 5
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 5
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 5
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: LD_INT 3
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 4
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 4
59004: PUSH
59005: LD_INT 4
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: PUSH
59015: LD_INT 4
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 4
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: LD_INT 4
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 4
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 4
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 5
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 5
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 4
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 5
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59202: LD_ADDR_VAR 0 34
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 5
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 4
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 3
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 4
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 5
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: LD_INT 3
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 5
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 4
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 3
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 4
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 4
59404: PUSH
59405: LD_INT 4
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 4
59414: PUSH
59415: LD_INT 3
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 5
59424: PUSH
59425: LD_INT 4
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 5
59434: PUSH
59435: LD_INT 5
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 4
59444: PUSH
59445: LD_INT 5
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: LD_INT 4
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 5
59474: PUSH
59475: LD_INT 3
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: LD_INT 5
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: LD_INT 4
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: LD_INT 4
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 4
59587: NEG
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 4
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 4
59632: NEG
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 5
59643: NEG
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 5
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 5
59666: NEG
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: ST_TO_ADDR
// end ; end ;
59734: GO 59737
59736: POP
// case btype of b_depot , b_warehouse :
59737: LD_VAR 0 1
59741: PUSH
59742: LD_INT 0
59744: DOUBLE
59745: EQUAL
59746: IFTRUE 59756
59748: LD_INT 1
59750: DOUBLE
59751: EQUAL
59752: IFTRUE 59756
59754: GO 59957
59756: POP
// case nation of nation_american :
59757: LD_VAR 0 5
59761: PUSH
59762: LD_INT 1
59764: DOUBLE
59765: EQUAL
59766: IFTRUE 59770
59768: GO 59826
59770: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59771: LD_ADDR_VAR 0 9
59775: PUSH
59776: LD_VAR 0 11
59780: PUSH
59781: LD_VAR 0 12
59785: PUSH
59786: LD_VAR 0 13
59790: PUSH
59791: LD_VAR 0 14
59795: PUSH
59796: LD_VAR 0 15
59800: PUSH
59801: LD_VAR 0 16
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: PUSH
59814: LD_VAR 0 4
59818: PUSH
59819: LD_INT 1
59821: PLUS
59822: ARRAY
59823: ST_TO_ADDR
59824: GO 59955
59826: LD_INT 2
59828: DOUBLE
59829: EQUAL
59830: IFTRUE 59834
59832: GO 59890
59834: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59835: LD_ADDR_VAR 0 9
59839: PUSH
59840: LD_VAR 0 17
59844: PUSH
59845: LD_VAR 0 18
59849: PUSH
59850: LD_VAR 0 19
59854: PUSH
59855: LD_VAR 0 20
59859: PUSH
59860: LD_VAR 0 21
59864: PUSH
59865: LD_VAR 0 22
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: PUSH
59878: LD_VAR 0 4
59882: PUSH
59883: LD_INT 1
59885: PLUS
59886: ARRAY
59887: ST_TO_ADDR
59888: GO 59955
59890: LD_INT 3
59892: DOUBLE
59893: EQUAL
59894: IFTRUE 59898
59896: GO 59954
59898: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59899: LD_ADDR_VAR 0 9
59903: PUSH
59904: LD_VAR 0 23
59908: PUSH
59909: LD_VAR 0 24
59913: PUSH
59914: LD_VAR 0 25
59918: PUSH
59919: LD_VAR 0 26
59923: PUSH
59924: LD_VAR 0 27
59928: PUSH
59929: LD_VAR 0 28
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: PUSH
59942: LD_VAR 0 4
59946: PUSH
59947: LD_INT 1
59949: PLUS
59950: ARRAY
59951: ST_TO_ADDR
59952: GO 59955
59954: POP
59955: GO 60510
59957: LD_INT 2
59959: DOUBLE
59960: EQUAL
59961: IFTRUE 59971
59963: LD_INT 3
59965: DOUBLE
59966: EQUAL
59967: IFTRUE 59971
59969: GO 60027
59971: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59972: LD_ADDR_VAR 0 9
59976: PUSH
59977: LD_VAR 0 29
59981: PUSH
59982: LD_VAR 0 30
59986: PUSH
59987: LD_VAR 0 31
59991: PUSH
59992: LD_VAR 0 32
59996: PUSH
59997: LD_VAR 0 33
60001: PUSH
60002: LD_VAR 0 34
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: LD_VAR 0 4
60019: PUSH
60020: LD_INT 1
60022: PLUS
60023: ARRAY
60024: ST_TO_ADDR
60025: GO 60510
60027: LD_INT 16
60029: DOUBLE
60030: EQUAL
60031: IFTRUE 60089
60033: LD_INT 17
60035: DOUBLE
60036: EQUAL
60037: IFTRUE 60089
60039: LD_INT 18
60041: DOUBLE
60042: EQUAL
60043: IFTRUE 60089
60045: LD_INT 19
60047: DOUBLE
60048: EQUAL
60049: IFTRUE 60089
60051: LD_INT 22
60053: DOUBLE
60054: EQUAL
60055: IFTRUE 60089
60057: LD_INT 20
60059: DOUBLE
60060: EQUAL
60061: IFTRUE 60089
60063: LD_INT 21
60065: DOUBLE
60066: EQUAL
60067: IFTRUE 60089
60069: LD_INT 23
60071: DOUBLE
60072: EQUAL
60073: IFTRUE 60089
60075: LD_INT 24
60077: DOUBLE
60078: EQUAL
60079: IFTRUE 60089
60081: LD_INT 25
60083: DOUBLE
60084: EQUAL
60085: IFTRUE 60089
60087: GO 60145
60089: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60090: LD_ADDR_VAR 0 9
60094: PUSH
60095: LD_VAR 0 35
60099: PUSH
60100: LD_VAR 0 36
60104: PUSH
60105: LD_VAR 0 37
60109: PUSH
60110: LD_VAR 0 38
60114: PUSH
60115: LD_VAR 0 39
60119: PUSH
60120: LD_VAR 0 40
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: PUSH
60133: LD_VAR 0 4
60137: PUSH
60138: LD_INT 1
60140: PLUS
60141: ARRAY
60142: ST_TO_ADDR
60143: GO 60510
60145: LD_INT 6
60147: DOUBLE
60148: EQUAL
60149: IFTRUE 60201
60151: LD_INT 7
60153: DOUBLE
60154: EQUAL
60155: IFTRUE 60201
60157: LD_INT 8
60159: DOUBLE
60160: EQUAL
60161: IFTRUE 60201
60163: LD_INT 13
60165: DOUBLE
60166: EQUAL
60167: IFTRUE 60201
60169: LD_INT 12
60171: DOUBLE
60172: EQUAL
60173: IFTRUE 60201
60175: LD_INT 15
60177: DOUBLE
60178: EQUAL
60179: IFTRUE 60201
60181: LD_INT 11
60183: DOUBLE
60184: EQUAL
60185: IFTRUE 60201
60187: LD_INT 14
60189: DOUBLE
60190: EQUAL
60191: IFTRUE 60201
60193: LD_INT 10
60195: DOUBLE
60196: EQUAL
60197: IFTRUE 60201
60199: GO 60257
60201: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60202: LD_ADDR_VAR 0 9
60206: PUSH
60207: LD_VAR 0 41
60211: PUSH
60212: LD_VAR 0 42
60216: PUSH
60217: LD_VAR 0 43
60221: PUSH
60222: LD_VAR 0 44
60226: PUSH
60227: LD_VAR 0 45
60231: PUSH
60232: LD_VAR 0 46
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: PUSH
60245: LD_VAR 0 4
60249: PUSH
60250: LD_INT 1
60252: PLUS
60253: ARRAY
60254: ST_TO_ADDR
60255: GO 60510
60257: LD_INT 36
60259: DOUBLE
60260: EQUAL
60261: IFTRUE 60265
60263: GO 60321
60265: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60266: LD_ADDR_VAR 0 9
60270: PUSH
60271: LD_VAR 0 47
60275: PUSH
60276: LD_VAR 0 48
60280: PUSH
60281: LD_VAR 0 49
60285: PUSH
60286: LD_VAR 0 50
60290: PUSH
60291: LD_VAR 0 51
60295: PUSH
60296: LD_VAR 0 52
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: PUSH
60309: LD_VAR 0 4
60313: PUSH
60314: LD_INT 1
60316: PLUS
60317: ARRAY
60318: ST_TO_ADDR
60319: GO 60510
60321: LD_INT 4
60323: DOUBLE
60324: EQUAL
60325: IFTRUE 60347
60327: LD_INT 5
60329: DOUBLE
60330: EQUAL
60331: IFTRUE 60347
60333: LD_INT 34
60335: DOUBLE
60336: EQUAL
60337: IFTRUE 60347
60339: LD_INT 37
60341: DOUBLE
60342: EQUAL
60343: IFTRUE 60347
60345: GO 60403
60347: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60348: LD_ADDR_VAR 0 9
60352: PUSH
60353: LD_VAR 0 53
60357: PUSH
60358: LD_VAR 0 54
60362: PUSH
60363: LD_VAR 0 55
60367: PUSH
60368: LD_VAR 0 56
60372: PUSH
60373: LD_VAR 0 57
60377: PUSH
60378: LD_VAR 0 58
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: PUSH
60391: LD_VAR 0 4
60395: PUSH
60396: LD_INT 1
60398: PLUS
60399: ARRAY
60400: ST_TO_ADDR
60401: GO 60510
60403: LD_INT 31
60405: DOUBLE
60406: EQUAL
60407: IFTRUE 60453
60409: LD_INT 32
60411: DOUBLE
60412: EQUAL
60413: IFTRUE 60453
60415: LD_INT 33
60417: DOUBLE
60418: EQUAL
60419: IFTRUE 60453
60421: LD_INT 27
60423: DOUBLE
60424: EQUAL
60425: IFTRUE 60453
60427: LD_INT 26
60429: DOUBLE
60430: EQUAL
60431: IFTRUE 60453
60433: LD_INT 28
60435: DOUBLE
60436: EQUAL
60437: IFTRUE 60453
60439: LD_INT 29
60441: DOUBLE
60442: EQUAL
60443: IFTRUE 60453
60445: LD_INT 30
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60453
60451: GO 60509
60453: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60454: LD_ADDR_VAR 0 9
60458: PUSH
60459: LD_VAR 0 59
60463: PUSH
60464: LD_VAR 0 60
60468: PUSH
60469: LD_VAR 0 61
60473: PUSH
60474: LD_VAR 0 62
60478: PUSH
60479: LD_VAR 0 63
60483: PUSH
60484: LD_VAR 0 64
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: PUSH
60497: LD_VAR 0 4
60501: PUSH
60502: LD_INT 1
60504: PLUS
60505: ARRAY
60506: ST_TO_ADDR
60507: GO 60510
60509: POP
// temp_list2 = [ ] ;
60510: LD_ADDR_VAR 0 10
60514: PUSH
60515: EMPTY
60516: ST_TO_ADDR
// for i in temp_list do
60517: LD_ADDR_VAR 0 8
60521: PUSH
60522: LD_VAR 0 9
60526: PUSH
60527: FOR_IN
60528: IFFALSE 60580
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60530: LD_ADDR_VAR 0 10
60534: PUSH
60535: LD_VAR 0 10
60539: PUSH
60540: LD_VAR 0 8
60544: PUSH
60545: LD_INT 1
60547: ARRAY
60548: PUSH
60549: LD_VAR 0 2
60553: PLUS
60554: PUSH
60555: LD_VAR 0 8
60559: PUSH
60560: LD_INT 2
60562: ARRAY
60563: PUSH
60564: LD_VAR 0 3
60568: PLUS
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: ADD
60577: ST_TO_ADDR
60578: GO 60527
60580: POP
60581: POP
// result = temp_list2 ;
60582: LD_ADDR_VAR 0 7
60586: PUSH
60587: LD_VAR 0 10
60591: ST_TO_ADDR
// end ;
60592: LD_VAR 0 7
60596: RET
// export function EnemyInRange ( unit , dist ) ; begin
60597: LD_INT 0
60599: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60600: LD_ADDR_VAR 0 3
60604: PUSH
60605: LD_VAR 0 1
60609: PPUSH
60610: CALL_OW 255
60614: PPUSH
60615: LD_VAR 0 1
60619: PPUSH
60620: CALL_OW 250
60624: PPUSH
60625: LD_VAR 0 1
60629: PPUSH
60630: CALL_OW 251
60634: PPUSH
60635: LD_VAR 0 2
60639: PPUSH
60640: CALL 33970 0 4
60644: PUSH
60645: LD_INT 4
60647: ARRAY
60648: ST_TO_ADDR
// end ;
60649: LD_VAR 0 3
60653: RET
// export function PlayerSeeMe ( unit ) ; begin
60654: LD_INT 0
60656: PPUSH
// result := See ( your_side , unit ) ;
60657: LD_ADDR_VAR 0 2
60661: PUSH
60662: LD_OWVAR 2
60666: PPUSH
60667: LD_VAR 0 1
60671: PPUSH
60672: CALL_OW 292
60676: ST_TO_ADDR
// end ;
60677: LD_VAR 0 2
60681: RET
// export function ReverseDir ( unit ) ; begin
60682: LD_INT 0
60684: PPUSH
// if not unit then
60685: LD_VAR 0 1
60689: NOT
60690: IFFALSE 60694
// exit ;
60692: GO 60717
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60694: LD_ADDR_VAR 0 2
60698: PUSH
60699: LD_VAR 0 1
60703: PPUSH
60704: CALL_OW 254
60708: PUSH
60709: LD_INT 3
60711: PLUS
60712: PUSH
60713: LD_INT 6
60715: MOD
60716: ST_TO_ADDR
// end ;
60717: LD_VAR 0 2
60721: RET
// export function ReverseArray ( array ) ; var i ; begin
60722: LD_INT 0
60724: PPUSH
60725: PPUSH
// if not array then
60726: LD_VAR 0 1
60730: NOT
60731: IFFALSE 60735
// exit ;
60733: GO 60790
// result := [ ] ;
60735: LD_ADDR_VAR 0 2
60739: PUSH
60740: EMPTY
60741: ST_TO_ADDR
// for i := array downto 1 do
60742: LD_ADDR_VAR 0 3
60746: PUSH
60747: DOUBLE
60748: LD_VAR 0 1
60752: INC
60753: ST_TO_ADDR
60754: LD_INT 1
60756: PUSH
60757: FOR_DOWNTO
60758: IFFALSE 60788
// result := Join ( result , array [ i ] ) ;
60760: LD_ADDR_VAR 0 2
60764: PUSH
60765: LD_VAR 0 2
60769: PPUSH
60770: LD_VAR 0 1
60774: PUSH
60775: LD_VAR 0 3
60779: ARRAY
60780: PPUSH
60781: CALL 65435 0 2
60785: ST_TO_ADDR
60786: GO 60757
60788: POP
60789: POP
// end ;
60790: LD_VAR 0 2
60794: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60795: LD_INT 0
60797: PPUSH
60798: PPUSH
60799: PPUSH
60800: PPUSH
60801: PPUSH
60802: PPUSH
// if not unit or not hexes then
60803: LD_VAR 0 1
60807: NOT
60808: PUSH
60809: LD_VAR 0 2
60813: NOT
60814: OR
60815: IFFALSE 60819
// exit ;
60817: GO 60942
// dist := 9999 ;
60819: LD_ADDR_VAR 0 5
60823: PUSH
60824: LD_INT 9999
60826: ST_TO_ADDR
// for i = 1 to hexes do
60827: LD_ADDR_VAR 0 4
60831: PUSH
60832: DOUBLE
60833: LD_INT 1
60835: DEC
60836: ST_TO_ADDR
60837: LD_VAR 0 2
60841: PUSH
60842: FOR_TO
60843: IFFALSE 60930
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60845: LD_ADDR_VAR 0 6
60849: PUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: LD_VAR 0 2
60859: PUSH
60860: LD_VAR 0 4
60864: ARRAY
60865: PUSH
60866: LD_INT 1
60868: ARRAY
60869: PPUSH
60870: LD_VAR 0 2
60874: PUSH
60875: LD_VAR 0 4
60879: ARRAY
60880: PUSH
60881: LD_INT 2
60883: ARRAY
60884: PPUSH
60885: CALL_OW 297
60889: ST_TO_ADDR
// if tdist < dist then
60890: LD_VAR 0 6
60894: PUSH
60895: LD_VAR 0 5
60899: LESS
60900: IFFALSE 60928
// begin hex := hexes [ i ] ;
60902: LD_ADDR_VAR 0 8
60906: PUSH
60907: LD_VAR 0 2
60911: PUSH
60912: LD_VAR 0 4
60916: ARRAY
60917: ST_TO_ADDR
// dist := tdist ;
60918: LD_ADDR_VAR 0 5
60922: PUSH
60923: LD_VAR 0 6
60927: ST_TO_ADDR
// end ; end ;
60928: GO 60842
60930: POP
60931: POP
// result := hex ;
60932: LD_ADDR_VAR 0 3
60936: PUSH
60937: LD_VAR 0 8
60941: ST_TO_ADDR
// end ;
60942: LD_VAR 0 3
60946: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60947: LD_INT 0
60949: PPUSH
60950: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60951: LD_VAR 0 1
60955: NOT
60956: PUSH
60957: LD_VAR 0 1
60961: PUSH
60962: LD_INT 21
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 23
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PPUSH
60986: CALL_OW 69
60990: IN
60991: NOT
60992: OR
60993: IFFALSE 60997
// exit ;
60995: GO 61044
// for i = 1 to 3 do
60997: LD_ADDR_VAR 0 3
61001: PUSH
61002: DOUBLE
61003: LD_INT 1
61005: DEC
61006: ST_TO_ADDR
61007: LD_INT 3
61009: PUSH
61010: FOR_TO
61011: IFFALSE 61042
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL_OW 250
61022: PPUSH
61023: LD_VAR 0 1
61027: PPUSH
61028: CALL_OW 251
61032: PPUSH
61033: LD_INT 1
61035: PPUSH
61036: CALL_OW 453
61040: GO 61010
61042: POP
61043: POP
// end ;
61044: LD_VAR 0 2
61048: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61049: LD_INT 0
61051: PPUSH
61052: PPUSH
61053: PPUSH
61054: PPUSH
61055: PPUSH
61056: PPUSH
// if not unit or not enemy_unit then
61057: LD_VAR 0 1
61061: NOT
61062: PUSH
61063: LD_VAR 0 2
61067: NOT
61068: OR
61069: IFFALSE 61073
// exit ;
61071: GO 61540
// if GetLives ( i ) < 250 then
61073: LD_VAR 0 4
61077: PPUSH
61078: CALL_OW 256
61082: PUSH
61083: LD_INT 250
61085: LESS
61086: IFFALSE 61099
// begin ComAutodestruct ( i ) ;
61088: LD_VAR 0 4
61092: PPUSH
61093: CALL 60947 0 1
// exit ;
61097: GO 61540
// end ; x := GetX ( enemy_unit ) ;
61099: LD_ADDR_VAR 0 7
61103: PUSH
61104: LD_VAR 0 2
61108: PPUSH
61109: CALL_OW 250
61113: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61114: LD_ADDR_VAR 0 8
61118: PUSH
61119: LD_VAR 0 2
61123: PPUSH
61124: CALL_OW 251
61128: ST_TO_ADDR
// if not x or not y then
61129: LD_VAR 0 7
61133: NOT
61134: PUSH
61135: LD_VAR 0 8
61139: NOT
61140: OR
61141: IFFALSE 61145
// exit ;
61143: GO 61540
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61145: LD_ADDR_VAR 0 6
61149: PUSH
61150: LD_VAR 0 7
61154: PPUSH
61155: LD_INT 0
61157: PPUSH
61158: LD_INT 4
61160: PPUSH
61161: CALL_OW 272
61165: PUSH
61166: LD_VAR 0 8
61170: PPUSH
61171: LD_INT 0
61173: PPUSH
61174: LD_INT 4
61176: PPUSH
61177: CALL_OW 273
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_VAR 0 7
61190: PPUSH
61191: LD_INT 1
61193: PPUSH
61194: LD_INT 4
61196: PPUSH
61197: CALL_OW 272
61201: PUSH
61202: LD_VAR 0 8
61206: PPUSH
61207: LD_INT 1
61209: PPUSH
61210: LD_INT 4
61212: PPUSH
61213: CALL_OW 273
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_VAR 0 7
61226: PPUSH
61227: LD_INT 2
61229: PPUSH
61230: LD_INT 4
61232: PPUSH
61233: CALL_OW 272
61237: PUSH
61238: LD_VAR 0 8
61242: PPUSH
61243: LD_INT 2
61245: PPUSH
61246: LD_INT 4
61248: PPUSH
61249: CALL_OW 273
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_VAR 0 7
61262: PPUSH
61263: LD_INT 3
61265: PPUSH
61266: LD_INT 4
61268: PPUSH
61269: CALL_OW 272
61273: PUSH
61274: LD_VAR 0 8
61278: PPUSH
61279: LD_INT 3
61281: PPUSH
61282: LD_INT 4
61284: PPUSH
61285: CALL_OW 273
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_VAR 0 7
61298: PPUSH
61299: LD_INT 4
61301: PPUSH
61302: LD_INT 4
61304: PPUSH
61305: CALL_OW 272
61309: PUSH
61310: LD_VAR 0 8
61314: PPUSH
61315: LD_INT 4
61317: PPUSH
61318: LD_INT 4
61320: PPUSH
61321: CALL_OW 273
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_VAR 0 7
61334: PPUSH
61335: LD_INT 5
61337: PPUSH
61338: LD_INT 4
61340: PPUSH
61341: CALL_OW 272
61345: PUSH
61346: LD_VAR 0 8
61350: PPUSH
61351: LD_INT 5
61353: PPUSH
61354: LD_INT 4
61356: PPUSH
61357: CALL_OW 273
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: ST_TO_ADDR
// for i = tmp downto 1 do
61374: LD_ADDR_VAR 0 4
61378: PUSH
61379: DOUBLE
61380: LD_VAR 0 6
61384: INC
61385: ST_TO_ADDR
61386: LD_INT 1
61388: PUSH
61389: FOR_DOWNTO
61390: IFFALSE 61491
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61392: LD_VAR 0 6
61396: PUSH
61397: LD_VAR 0 4
61401: ARRAY
61402: PUSH
61403: LD_INT 1
61405: ARRAY
61406: PPUSH
61407: LD_VAR 0 6
61411: PUSH
61412: LD_VAR 0 4
61416: ARRAY
61417: PUSH
61418: LD_INT 2
61420: ARRAY
61421: PPUSH
61422: CALL_OW 488
61426: NOT
61427: PUSH
61428: LD_VAR 0 6
61432: PUSH
61433: LD_VAR 0 4
61437: ARRAY
61438: PUSH
61439: LD_INT 1
61441: ARRAY
61442: PPUSH
61443: LD_VAR 0 6
61447: PUSH
61448: LD_VAR 0 4
61452: ARRAY
61453: PUSH
61454: LD_INT 2
61456: ARRAY
61457: PPUSH
61458: CALL_OW 428
61462: PUSH
61463: LD_INT 0
61465: NONEQUAL
61466: OR
61467: IFFALSE 61489
// tmp := Delete ( tmp , i ) ;
61469: LD_ADDR_VAR 0 6
61473: PUSH
61474: LD_VAR 0 6
61478: PPUSH
61479: LD_VAR 0 4
61483: PPUSH
61484: CALL_OW 3
61488: ST_TO_ADDR
61489: GO 61389
61491: POP
61492: POP
// j := GetClosestHex ( unit , tmp ) ;
61493: LD_ADDR_VAR 0 5
61497: PUSH
61498: LD_VAR 0 1
61502: PPUSH
61503: LD_VAR 0 6
61507: PPUSH
61508: CALL 60795 0 2
61512: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61513: LD_VAR 0 1
61517: PPUSH
61518: LD_VAR 0 5
61522: PUSH
61523: LD_INT 1
61525: ARRAY
61526: PPUSH
61527: LD_VAR 0 5
61531: PUSH
61532: LD_INT 2
61534: ARRAY
61535: PPUSH
61536: CALL_OW 111
// end ;
61540: LD_VAR 0 3
61544: RET
// export function PrepareApemanSoldier ( ) ; begin
61545: LD_INT 0
61547: PPUSH
// uc_nation := 0 ;
61548: LD_ADDR_OWVAR 21
61552: PUSH
61553: LD_INT 0
61555: ST_TO_ADDR
// hc_sex := sex_male ;
61556: LD_ADDR_OWVAR 27
61560: PUSH
61561: LD_INT 1
61563: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61564: LD_ADDR_OWVAR 28
61568: PUSH
61569: LD_INT 15
61571: ST_TO_ADDR
// hc_gallery :=  ;
61572: LD_ADDR_OWVAR 33
61576: PUSH
61577: LD_STRING 
61579: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61580: LD_ADDR_OWVAR 31
61584: PUSH
61585: LD_INT 0
61587: PPUSH
61588: LD_INT 3
61590: PPUSH
61591: CALL_OW 12
61595: PUSH
61596: LD_INT 0
61598: PPUSH
61599: LD_INT 3
61601: PPUSH
61602: CALL_OW 12
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: ST_TO_ADDR
// end ;
61619: LD_VAR 0 1
61623: RET
// export function PrepareApemanEngineer ( ) ; begin
61624: LD_INT 0
61626: PPUSH
// uc_nation := 0 ;
61627: LD_ADDR_OWVAR 21
61631: PUSH
61632: LD_INT 0
61634: ST_TO_ADDR
// hc_sex := sex_male ;
61635: LD_ADDR_OWVAR 27
61639: PUSH
61640: LD_INT 1
61642: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61643: LD_ADDR_OWVAR 28
61647: PUSH
61648: LD_INT 16
61650: ST_TO_ADDR
// hc_gallery :=  ;
61651: LD_ADDR_OWVAR 33
61655: PUSH
61656: LD_STRING 
61658: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61659: LD_ADDR_OWVAR 31
61663: PUSH
61664: LD_INT 0
61666: PPUSH
61667: LD_INT 3
61669: PPUSH
61670: CALL_OW 12
61674: PUSH
61675: LD_INT 0
61677: PPUSH
61678: LD_INT 3
61680: PPUSH
61681: CALL_OW 12
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// end ;
61698: LD_VAR 0 1
61702: RET
// export function PrepareApeman ( agressivity ) ; begin
61703: LD_INT 0
61705: PPUSH
// uc_side := 0 ;
61706: LD_ADDR_OWVAR 20
61710: PUSH
61711: LD_INT 0
61713: ST_TO_ADDR
// uc_nation := 0 ;
61714: LD_ADDR_OWVAR 21
61718: PUSH
61719: LD_INT 0
61721: ST_TO_ADDR
// hc_sex := sex_male ;
61722: LD_ADDR_OWVAR 27
61726: PUSH
61727: LD_INT 1
61729: ST_TO_ADDR
// hc_class := class_apeman ;
61730: LD_ADDR_OWVAR 28
61734: PUSH
61735: LD_INT 12
61737: ST_TO_ADDR
// hc_gallery :=  ;
61738: LD_ADDR_OWVAR 33
61742: PUSH
61743: LD_STRING 
61745: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61746: LD_ADDR_OWVAR 35
61750: PUSH
61751: LD_VAR 0 1
61755: NEG
61756: PPUSH
61757: LD_VAR 0 1
61761: PPUSH
61762: CALL_OW 12
61766: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61767: LD_ADDR_OWVAR 31
61771: PUSH
61772: LD_INT 0
61774: PPUSH
61775: LD_INT 3
61777: PPUSH
61778: CALL_OW 12
61782: PUSH
61783: LD_INT 0
61785: PPUSH
61786: LD_INT 3
61788: PPUSH
61789: CALL_OW 12
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: ST_TO_ADDR
// end ;
61806: LD_VAR 0 2
61810: RET
// export function PrepareTiger ( agressivity ) ; begin
61811: LD_INT 0
61813: PPUSH
// uc_side := 0 ;
61814: LD_ADDR_OWVAR 20
61818: PUSH
61819: LD_INT 0
61821: ST_TO_ADDR
// uc_nation := 0 ;
61822: LD_ADDR_OWVAR 21
61826: PUSH
61827: LD_INT 0
61829: ST_TO_ADDR
// hc_class := class_tiger ;
61830: LD_ADDR_OWVAR 28
61834: PUSH
61835: LD_INT 14
61837: ST_TO_ADDR
// hc_gallery :=  ;
61838: LD_ADDR_OWVAR 33
61842: PUSH
61843: LD_STRING 
61845: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61846: LD_ADDR_OWVAR 35
61850: PUSH
61851: LD_VAR 0 1
61855: NEG
61856: PPUSH
61857: LD_VAR 0 1
61861: PPUSH
61862: CALL_OW 12
61866: ST_TO_ADDR
// end ;
61867: LD_VAR 0 2
61871: RET
// export function PrepareEnchidna ( ) ; begin
61872: LD_INT 0
61874: PPUSH
// uc_side := 0 ;
61875: LD_ADDR_OWVAR 20
61879: PUSH
61880: LD_INT 0
61882: ST_TO_ADDR
// uc_nation := 0 ;
61883: LD_ADDR_OWVAR 21
61887: PUSH
61888: LD_INT 0
61890: ST_TO_ADDR
// hc_class := class_baggie ;
61891: LD_ADDR_OWVAR 28
61895: PUSH
61896: LD_INT 13
61898: ST_TO_ADDR
// hc_gallery :=  ;
61899: LD_ADDR_OWVAR 33
61903: PUSH
61904: LD_STRING 
61906: ST_TO_ADDR
// end ;
61907: LD_VAR 0 1
61911: RET
// export function PrepareFrog ( ) ; begin
61912: LD_INT 0
61914: PPUSH
// uc_side := 0 ;
61915: LD_ADDR_OWVAR 20
61919: PUSH
61920: LD_INT 0
61922: ST_TO_ADDR
// uc_nation := 0 ;
61923: LD_ADDR_OWVAR 21
61927: PUSH
61928: LD_INT 0
61930: ST_TO_ADDR
// hc_class := class_frog ;
61931: LD_ADDR_OWVAR 28
61935: PUSH
61936: LD_INT 19
61938: ST_TO_ADDR
// hc_gallery :=  ;
61939: LD_ADDR_OWVAR 33
61943: PUSH
61944: LD_STRING 
61946: ST_TO_ADDR
// end ;
61947: LD_VAR 0 1
61951: RET
// export function PrepareFish ( ) ; begin
61952: LD_INT 0
61954: PPUSH
// uc_side := 0 ;
61955: LD_ADDR_OWVAR 20
61959: PUSH
61960: LD_INT 0
61962: ST_TO_ADDR
// uc_nation := 0 ;
61963: LD_ADDR_OWVAR 21
61967: PUSH
61968: LD_INT 0
61970: ST_TO_ADDR
// hc_class := class_fish ;
61971: LD_ADDR_OWVAR 28
61975: PUSH
61976: LD_INT 20
61978: ST_TO_ADDR
// hc_gallery :=  ;
61979: LD_ADDR_OWVAR 33
61983: PUSH
61984: LD_STRING 
61986: ST_TO_ADDR
// end ;
61987: LD_VAR 0 1
61991: RET
// export function PrepareBird ( ) ; begin
61992: LD_INT 0
61994: PPUSH
// uc_side := 0 ;
61995: LD_ADDR_OWVAR 20
61999: PUSH
62000: LD_INT 0
62002: ST_TO_ADDR
// uc_nation := 0 ;
62003: LD_ADDR_OWVAR 21
62007: PUSH
62008: LD_INT 0
62010: ST_TO_ADDR
// hc_class := class_phororhacos ;
62011: LD_ADDR_OWVAR 28
62015: PUSH
62016: LD_INT 18
62018: ST_TO_ADDR
// hc_gallery :=  ;
62019: LD_ADDR_OWVAR 33
62023: PUSH
62024: LD_STRING 
62026: ST_TO_ADDR
// end ;
62027: LD_VAR 0 1
62031: RET
// export function PrepareHorse ( ) ; begin
62032: LD_INT 0
62034: PPUSH
// uc_side := 0 ;
62035: LD_ADDR_OWVAR 20
62039: PUSH
62040: LD_INT 0
62042: ST_TO_ADDR
// uc_nation := 0 ;
62043: LD_ADDR_OWVAR 21
62047: PUSH
62048: LD_INT 0
62050: ST_TO_ADDR
// hc_class := class_horse ;
62051: LD_ADDR_OWVAR 28
62055: PUSH
62056: LD_INT 21
62058: ST_TO_ADDR
// hc_gallery :=  ;
62059: LD_ADDR_OWVAR 33
62063: PUSH
62064: LD_STRING 
62066: ST_TO_ADDR
// end ;
62067: LD_VAR 0 1
62071: RET
// export function PrepareMastodont ( ) ; begin
62072: LD_INT 0
62074: PPUSH
// uc_side := 0 ;
62075: LD_ADDR_OWVAR 20
62079: PUSH
62080: LD_INT 0
62082: ST_TO_ADDR
// uc_nation := 0 ;
62083: LD_ADDR_OWVAR 21
62087: PUSH
62088: LD_INT 0
62090: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62091: LD_ADDR_OWVAR 37
62095: PUSH
62096: LD_INT 31
62098: ST_TO_ADDR
// vc_control := control_rider ;
62099: LD_ADDR_OWVAR 38
62103: PUSH
62104: LD_INT 4
62106: ST_TO_ADDR
// end ;
62107: LD_VAR 0 1
62111: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62112: LD_INT 0
62114: PPUSH
62115: PPUSH
62116: PPUSH
// uc_side = 0 ;
62117: LD_ADDR_OWVAR 20
62121: PUSH
62122: LD_INT 0
62124: ST_TO_ADDR
// uc_nation = 0 ;
62125: LD_ADDR_OWVAR 21
62129: PUSH
62130: LD_INT 0
62132: ST_TO_ADDR
// InitHc_All ( ) ;
62133: CALL_OW 584
// InitVc ;
62137: CALL_OW 20
// if mastodonts then
62141: LD_VAR 0 6
62145: IFFALSE 62212
// for i = 1 to mastodonts do
62147: LD_ADDR_VAR 0 11
62151: PUSH
62152: DOUBLE
62153: LD_INT 1
62155: DEC
62156: ST_TO_ADDR
62157: LD_VAR 0 6
62161: PUSH
62162: FOR_TO
62163: IFFALSE 62210
// begin vc_chassis := 31 ;
62165: LD_ADDR_OWVAR 37
62169: PUSH
62170: LD_INT 31
62172: ST_TO_ADDR
// vc_control := control_rider ;
62173: LD_ADDR_OWVAR 38
62177: PUSH
62178: LD_INT 4
62180: ST_TO_ADDR
// animal := CreateVehicle ;
62181: LD_ADDR_VAR 0 12
62185: PUSH
62186: CALL_OW 45
62190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62191: LD_VAR 0 12
62195: PPUSH
62196: LD_VAR 0 8
62200: PPUSH
62201: LD_INT 0
62203: PPUSH
62204: CALL 64340 0 3
// end ;
62208: GO 62162
62210: POP
62211: POP
// if horses then
62212: LD_VAR 0 5
62216: IFFALSE 62283
// for i = 1 to horses do
62218: LD_ADDR_VAR 0 11
62222: PUSH
62223: DOUBLE
62224: LD_INT 1
62226: DEC
62227: ST_TO_ADDR
62228: LD_VAR 0 5
62232: PUSH
62233: FOR_TO
62234: IFFALSE 62281
// begin hc_class := 21 ;
62236: LD_ADDR_OWVAR 28
62240: PUSH
62241: LD_INT 21
62243: ST_TO_ADDR
// hc_gallery :=  ;
62244: LD_ADDR_OWVAR 33
62248: PUSH
62249: LD_STRING 
62251: ST_TO_ADDR
// animal := CreateHuman ;
62252: LD_ADDR_VAR 0 12
62256: PUSH
62257: CALL_OW 44
62261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62262: LD_VAR 0 12
62266: PPUSH
62267: LD_VAR 0 8
62271: PPUSH
62272: LD_INT 0
62274: PPUSH
62275: CALL 64340 0 3
// end ;
62279: GO 62233
62281: POP
62282: POP
// if birds then
62283: LD_VAR 0 1
62287: IFFALSE 62354
// for i = 1 to birds do
62289: LD_ADDR_VAR 0 11
62293: PUSH
62294: DOUBLE
62295: LD_INT 1
62297: DEC
62298: ST_TO_ADDR
62299: LD_VAR 0 1
62303: PUSH
62304: FOR_TO
62305: IFFALSE 62352
// begin hc_class := 18 ;
62307: LD_ADDR_OWVAR 28
62311: PUSH
62312: LD_INT 18
62314: ST_TO_ADDR
// hc_gallery =  ;
62315: LD_ADDR_OWVAR 33
62319: PUSH
62320: LD_STRING 
62322: ST_TO_ADDR
// animal := CreateHuman ;
62323: LD_ADDR_VAR 0 12
62327: PUSH
62328: CALL_OW 44
62332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62333: LD_VAR 0 12
62337: PPUSH
62338: LD_VAR 0 8
62342: PPUSH
62343: LD_INT 0
62345: PPUSH
62346: CALL 64340 0 3
// end ;
62350: GO 62304
62352: POP
62353: POP
// if tigers then
62354: LD_VAR 0 2
62358: IFFALSE 62442
// for i = 1 to tigers do
62360: LD_ADDR_VAR 0 11
62364: PUSH
62365: DOUBLE
62366: LD_INT 1
62368: DEC
62369: ST_TO_ADDR
62370: LD_VAR 0 2
62374: PUSH
62375: FOR_TO
62376: IFFALSE 62440
// begin hc_class = class_tiger ;
62378: LD_ADDR_OWVAR 28
62382: PUSH
62383: LD_INT 14
62385: ST_TO_ADDR
// hc_gallery =  ;
62386: LD_ADDR_OWVAR 33
62390: PUSH
62391: LD_STRING 
62393: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62394: LD_ADDR_OWVAR 35
62398: PUSH
62399: LD_INT 7
62401: NEG
62402: PPUSH
62403: LD_INT 7
62405: PPUSH
62406: CALL_OW 12
62410: ST_TO_ADDR
// animal := CreateHuman ;
62411: LD_ADDR_VAR 0 12
62415: PUSH
62416: CALL_OW 44
62420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62421: LD_VAR 0 12
62425: PPUSH
62426: LD_VAR 0 8
62430: PPUSH
62431: LD_INT 0
62433: PPUSH
62434: CALL 64340 0 3
// end ;
62438: GO 62375
62440: POP
62441: POP
// if apemans then
62442: LD_VAR 0 3
62446: IFFALSE 62569
// for i = 1 to apemans do
62448: LD_ADDR_VAR 0 11
62452: PUSH
62453: DOUBLE
62454: LD_INT 1
62456: DEC
62457: ST_TO_ADDR
62458: LD_VAR 0 3
62462: PUSH
62463: FOR_TO
62464: IFFALSE 62567
// begin hc_class = class_apeman ;
62466: LD_ADDR_OWVAR 28
62470: PUSH
62471: LD_INT 12
62473: ST_TO_ADDR
// hc_gallery =  ;
62474: LD_ADDR_OWVAR 33
62478: PUSH
62479: LD_STRING 
62481: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62482: LD_ADDR_OWVAR 35
62486: PUSH
62487: LD_INT 2
62489: NEG
62490: PPUSH
62491: LD_INT 2
62493: PPUSH
62494: CALL_OW 12
62498: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62499: LD_ADDR_OWVAR 31
62503: PUSH
62504: LD_INT 1
62506: PPUSH
62507: LD_INT 3
62509: PPUSH
62510: CALL_OW 12
62514: PUSH
62515: LD_INT 1
62517: PPUSH
62518: LD_INT 3
62520: PPUSH
62521: CALL_OW 12
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: ST_TO_ADDR
// animal := CreateHuman ;
62538: LD_ADDR_VAR 0 12
62542: PUSH
62543: CALL_OW 44
62547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62548: LD_VAR 0 12
62552: PPUSH
62553: LD_VAR 0 8
62557: PPUSH
62558: LD_INT 0
62560: PPUSH
62561: CALL 64340 0 3
// end ;
62565: GO 62463
62567: POP
62568: POP
// if enchidnas then
62569: LD_VAR 0 4
62573: IFFALSE 62640
// for i = 1 to enchidnas do
62575: LD_ADDR_VAR 0 11
62579: PUSH
62580: DOUBLE
62581: LD_INT 1
62583: DEC
62584: ST_TO_ADDR
62585: LD_VAR 0 4
62589: PUSH
62590: FOR_TO
62591: IFFALSE 62638
// begin hc_class = 13 ;
62593: LD_ADDR_OWVAR 28
62597: PUSH
62598: LD_INT 13
62600: ST_TO_ADDR
// hc_gallery =  ;
62601: LD_ADDR_OWVAR 33
62605: PUSH
62606: LD_STRING 
62608: ST_TO_ADDR
// animal := CreateHuman ;
62609: LD_ADDR_VAR 0 12
62613: PUSH
62614: CALL_OW 44
62618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62619: LD_VAR 0 12
62623: PPUSH
62624: LD_VAR 0 8
62628: PPUSH
62629: LD_INT 0
62631: PPUSH
62632: CALL 64340 0 3
// end ;
62636: GO 62590
62638: POP
62639: POP
// if fishes then
62640: LD_VAR 0 7
62644: IFFALSE 62711
// for i = 1 to fishes do
62646: LD_ADDR_VAR 0 11
62650: PUSH
62651: DOUBLE
62652: LD_INT 1
62654: DEC
62655: ST_TO_ADDR
62656: LD_VAR 0 7
62660: PUSH
62661: FOR_TO
62662: IFFALSE 62709
// begin hc_class = 20 ;
62664: LD_ADDR_OWVAR 28
62668: PUSH
62669: LD_INT 20
62671: ST_TO_ADDR
// hc_gallery =  ;
62672: LD_ADDR_OWVAR 33
62676: PUSH
62677: LD_STRING 
62679: ST_TO_ADDR
// animal := CreateHuman ;
62680: LD_ADDR_VAR 0 12
62684: PUSH
62685: CALL_OW 44
62689: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62690: LD_VAR 0 12
62694: PPUSH
62695: LD_VAR 0 9
62699: PPUSH
62700: LD_INT 0
62702: PPUSH
62703: CALL 64340 0 3
// end ;
62707: GO 62661
62709: POP
62710: POP
// end ;
62711: LD_VAR 0 10
62715: RET
// export function WantHeal ( sci , unit ) ; begin
62716: LD_INT 0
62718: PPUSH
// if GetTaskList ( sci ) > 0 then
62719: LD_VAR 0 1
62723: PPUSH
62724: CALL_OW 437
62728: PUSH
62729: LD_INT 0
62731: GREATER
62732: IFFALSE 62802
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62734: LD_VAR 0 1
62738: PPUSH
62739: CALL_OW 437
62743: PUSH
62744: LD_INT 1
62746: ARRAY
62747: PUSH
62748: LD_INT 1
62750: ARRAY
62751: PUSH
62752: LD_STRING l
62754: EQUAL
62755: PUSH
62756: LD_VAR 0 1
62760: PPUSH
62761: CALL_OW 437
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PUSH
62770: LD_INT 4
62772: ARRAY
62773: PUSH
62774: LD_VAR 0 2
62778: EQUAL
62779: AND
62780: IFFALSE 62792
// result := true else
62782: LD_ADDR_VAR 0 3
62786: PUSH
62787: LD_INT 1
62789: ST_TO_ADDR
62790: GO 62800
// result := false ;
62792: LD_ADDR_VAR 0 3
62796: PUSH
62797: LD_INT 0
62799: ST_TO_ADDR
// end else
62800: GO 62810
// result := false ;
62802: LD_ADDR_VAR 0 3
62806: PUSH
62807: LD_INT 0
62809: ST_TO_ADDR
// end ;
62810: LD_VAR 0 3
62814: RET
// export function HealTarget ( sci ) ; begin
62815: LD_INT 0
62817: PPUSH
// if not sci then
62818: LD_VAR 0 1
62822: NOT
62823: IFFALSE 62827
// exit ;
62825: GO 62892
// result := 0 ;
62827: LD_ADDR_VAR 0 2
62831: PUSH
62832: LD_INT 0
62834: ST_TO_ADDR
// if GetTaskList ( sci ) then
62835: LD_VAR 0 1
62839: PPUSH
62840: CALL_OW 437
62844: IFFALSE 62892
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62846: LD_VAR 0 1
62850: PPUSH
62851: CALL_OW 437
62855: PUSH
62856: LD_INT 1
62858: ARRAY
62859: PUSH
62860: LD_INT 1
62862: ARRAY
62863: PUSH
62864: LD_STRING l
62866: EQUAL
62867: IFFALSE 62892
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62869: LD_ADDR_VAR 0 2
62873: PUSH
62874: LD_VAR 0 1
62878: PPUSH
62879: CALL_OW 437
62883: PUSH
62884: LD_INT 1
62886: ARRAY
62887: PUSH
62888: LD_INT 4
62890: ARRAY
62891: ST_TO_ADDR
// end ;
62892: LD_VAR 0 2
62896: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62897: LD_INT 0
62899: PPUSH
62900: PPUSH
62901: PPUSH
62902: PPUSH
// if not base_units then
62903: LD_VAR 0 1
62907: NOT
62908: IFFALSE 62912
// exit ;
62910: GO 62999
// result := false ;
62912: LD_ADDR_VAR 0 2
62916: PUSH
62917: LD_INT 0
62919: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62920: LD_ADDR_VAR 0 5
62924: PUSH
62925: LD_VAR 0 1
62929: PPUSH
62930: LD_INT 21
62932: PUSH
62933: LD_INT 3
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PPUSH
62940: CALL_OW 72
62944: ST_TO_ADDR
// if not tmp then
62945: LD_VAR 0 5
62949: NOT
62950: IFFALSE 62954
// exit ;
62952: GO 62999
// for i in tmp do
62954: LD_ADDR_VAR 0 3
62958: PUSH
62959: LD_VAR 0 5
62963: PUSH
62964: FOR_IN
62965: IFFALSE 62997
// begin result := EnemyInRange ( i , 22 ) ;
62967: LD_ADDR_VAR 0 2
62971: PUSH
62972: LD_VAR 0 3
62976: PPUSH
62977: LD_INT 22
62979: PPUSH
62980: CALL 60597 0 2
62984: ST_TO_ADDR
// if result then
62985: LD_VAR 0 2
62989: IFFALSE 62995
// exit ;
62991: POP
62992: POP
62993: GO 62999
// end ;
62995: GO 62964
62997: POP
62998: POP
// end ;
62999: LD_VAR 0 2
63003: RET
// export function FilterByTag ( units , tag ) ; begin
63004: LD_INT 0
63006: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63007: LD_ADDR_VAR 0 3
63011: PUSH
63012: LD_VAR 0 1
63016: PPUSH
63017: LD_INT 120
63019: PUSH
63020: LD_VAR 0 2
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PPUSH
63029: CALL_OW 72
63033: ST_TO_ADDR
// end ;
63034: LD_VAR 0 3
63038: RET
// export function IsDriver ( un ) ; begin
63039: LD_INT 0
63041: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63042: LD_ADDR_VAR 0 2
63046: PUSH
63047: LD_VAR 0 1
63051: PUSH
63052: LD_INT 55
63054: PUSH
63055: EMPTY
63056: LIST
63057: PPUSH
63058: CALL_OW 69
63062: IN
63063: ST_TO_ADDR
// end ;
63064: LD_VAR 0 2
63068: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63069: LD_INT 0
63071: PPUSH
63072: PPUSH
// list := [ ] ;
63073: LD_ADDR_VAR 0 5
63077: PUSH
63078: EMPTY
63079: ST_TO_ADDR
// case d of 0 :
63080: LD_VAR 0 3
63084: PUSH
63085: LD_INT 0
63087: DOUBLE
63088: EQUAL
63089: IFTRUE 63093
63091: GO 63226
63093: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63094: LD_ADDR_VAR 0 5
63098: PUSH
63099: LD_VAR 0 1
63103: PUSH
63104: LD_INT 4
63106: MINUS
63107: PUSH
63108: LD_VAR 0 2
63112: PUSH
63113: LD_INT 4
63115: MINUS
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: LIST
63124: PUSH
63125: LD_VAR 0 1
63129: PUSH
63130: LD_INT 3
63132: MINUS
63133: PUSH
63134: LD_VAR 0 2
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: PUSH
63147: LD_VAR 0 1
63151: PUSH
63152: LD_INT 4
63154: PLUS
63155: PUSH
63156: LD_VAR 0 2
63160: PUSH
63161: LD_INT 4
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: LIST
63168: PUSH
63169: LD_VAR 0 1
63173: PUSH
63174: LD_INT 3
63176: PLUS
63177: PUSH
63178: LD_VAR 0 2
63182: PUSH
63183: LD_INT 3
63185: PLUS
63186: PUSH
63187: LD_INT 5
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: PUSH
63195: LD_VAR 0 1
63199: PUSH
63200: LD_VAR 0 2
63204: PUSH
63205: LD_INT 4
63207: PLUS
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: ST_TO_ADDR
// end ; 1 :
63224: GO 63924
63226: LD_INT 1
63228: DOUBLE
63229: EQUAL
63230: IFTRUE 63234
63232: GO 63367
63234: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63235: LD_ADDR_VAR 0 5
63239: PUSH
63240: LD_VAR 0 1
63244: PUSH
63245: LD_VAR 0 2
63249: PUSH
63250: LD_INT 4
63252: MINUS
63253: PUSH
63254: LD_INT 3
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: PUSH
63262: LD_VAR 0 1
63266: PUSH
63267: LD_INT 3
63269: MINUS
63270: PUSH
63271: LD_VAR 0 2
63275: PUSH
63276: LD_INT 3
63278: MINUS
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: LIST
63287: PUSH
63288: LD_VAR 0 1
63292: PUSH
63293: LD_INT 4
63295: MINUS
63296: PUSH
63297: LD_VAR 0 2
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: PUSH
63310: LD_VAR 0 1
63314: PUSH
63315: LD_VAR 0 2
63319: PUSH
63320: LD_INT 3
63322: PLUS
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: PUSH
63332: LD_VAR 0 1
63336: PUSH
63337: LD_INT 4
63339: PLUS
63340: PUSH
63341: LD_VAR 0 2
63345: PUSH
63346: LD_INT 4
63348: PLUS
63349: PUSH
63350: LD_INT 5
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: LIST
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: ST_TO_ADDR
// end ; 2 :
63365: GO 63924
63367: LD_INT 2
63369: DOUBLE
63370: EQUAL
63371: IFTRUE 63375
63373: GO 63504
63375: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63376: LD_ADDR_VAR 0 5
63380: PUSH
63381: LD_VAR 0 1
63385: PUSH
63386: LD_VAR 0 2
63390: PUSH
63391: LD_INT 3
63393: MINUS
63394: PUSH
63395: LD_INT 3
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: PUSH
63403: LD_VAR 0 1
63407: PUSH
63408: LD_INT 4
63410: PLUS
63411: PUSH
63412: LD_VAR 0 2
63416: PUSH
63417: LD_INT 4
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: LIST
63424: PUSH
63425: LD_VAR 0 1
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_INT 4
63437: PLUS
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: PUSH
63447: LD_VAR 0 1
63451: PUSH
63452: LD_INT 3
63454: MINUS
63455: PUSH
63456: LD_VAR 0 2
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: PUSH
63469: LD_VAR 0 1
63473: PUSH
63474: LD_INT 4
63476: MINUS
63477: PUSH
63478: LD_VAR 0 2
63482: PUSH
63483: LD_INT 4
63485: MINUS
63486: PUSH
63487: LD_INT 2
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: ST_TO_ADDR
// end ; 3 :
63502: GO 63924
63504: LD_INT 3
63506: DOUBLE
63507: EQUAL
63508: IFTRUE 63512
63510: GO 63645
63512: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63513: LD_ADDR_VAR 0 5
63517: PUSH
63518: LD_VAR 0 1
63522: PUSH
63523: LD_INT 3
63525: PLUS
63526: PUSH
63527: LD_VAR 0 2
63531: PUSH
63532: LD_INT 4
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: PUSH
63540: LD_VAR 0 1
63544: PUSH
63545: LD_INT 4
63547: PLUS
63548: PUSH
63549: LD_VAR 0 2
63553: PUSH
63554: LD_INT 4
63556: PLUS
63557: PUSH
63558: LD_INT 5
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: LIST
63565: PUSH
63566: LD_VAR 0 1
63570: PUSH
63571: LD_INT 4
63573: MINUS
63574: PUSH
63575: LD_VAR 0 2
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: LIST
63587: PUSH
63588: LD_VAR 0 1
63592: PUSH
63593: LD_VAR 0 2
63597: PUSH
63598: LD_INT 4
63600: MINUS
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: PUSH
63610: LD_VAR 0 1
63614: PUSH
63615: LD_INT 3
63617: MINUS
63618: PUSH
63619: LD_VAR 0 2
63623: PUSH
63624: LD_INT 3
63626: MINUS
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: ST_TO_ADDR
// end ; 4 :
63643: GO 63924
63645: LD_INT 4
63647: DOUBLE
63648: EQUAL
63649: IFTRUE 63653
63651: GO 63786
63653: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63654: LD_ADDR_VAR 0 5
63658: PUSH
63659: LD_VAR 0 1
63663: PUSH
63664: LD_VAR 0 2
63668: PUSH
63669: LD_INT 4
63671: PLUS
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: LIST
63680: PUSH
63681: LD_VAR 0 1
63685: PUSH
63686: LD_INT 3
63688: PLUS
63689: PUSH
63690: LD_VAR 0 2
63694: PUSH
63695: LD_INT 3
63697: PLUS
63698: PUSH
63699: LD_INT 5
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: LIST
63706: PUSH
63707: LD_VAR 0 1
63711: PUSH
63712: LD_INT 4
63714: PLUS
63715: PUSH
63716: LD_VAR 0 2
63720: PUSH
63721: LD_INT 4
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: LIST
63728: PUSH
63729: LD_VAR 0 1
63733: PUSH
63734: LD_VAR 0 2
63738: PUSH
63739: LD_INT 3
63741: MINUS
63742: PUSH
63743: LD_INT 3
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: LIST
63750: PUSH
63751: LD_VAR 0 1
63755: PUSH
63756: LD_INT 4
63758: MINUS
63759: PUSH
63760: LD_VAR 0 2
63764: PUSH
63765: LD_INT 4
63767: MINUS
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: LIST
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: ST_TO_ADDR
// end ; 5 :
63784: GO 63924
63786: LD_INT 5
63788: DOUBLE
63789: EQUAL
63790: IFTRUE 63794
63792: GO 63923
63794: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63795: LD_ADDR_VAR 0 5
63799: PUSH
63800: LD_VAR 0 1
63804: PUSH
63805: LD_INT 4
63807: MINUS
63808: PUSH
63809: LD_VAR 0 2
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: PUSH
63822: LD_VAR 0 1
63826: PUSH
63827: LD_VAR 0 2
63831: PUSH
63832: LD_INT 4
63834: MINUS
63835: PUSH
63836: LD_INT 3
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: LIST
63843: PUSH
63844: LD_VAR 0 1
63848: PUSH
63849: LD_INT 4
63851: PLUS
63852: PUSH
63853: LD_VAR 0 2
63857: PUSH
63858: LD_INT 4
63860: PLUS
63861: PUSH
63862: LD_INT 5
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: LIST
63869: PUSH
63870: LD_VAR 0 1
63874: PUSH
63875: LD_INT 3
63877: PLUS
63878: PUSH
63879: LD_VAR 0 2
63883: PUSH
63884: LD_INT 4
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: PUSH
63892: LD_VAR 0 1
63896: PUSH
63897: LD_VAR 0 2
63901: PUSH
63902: LD_INT 3
63904: PLUS
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: LIST
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: ST_TO_ADDR
// end ; end ;
63921: GO 63924
63923: POP
// result := list ;
63924: LD_ADDR_VAR 0 4
63928: PUSH
63929: LD_VAR 0 5
63933: ST_TO_ADDR
// end ;
63934: LD_VAR 0 4
63938: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63939: LD_INT 0
63941: PPUSH
63942: PPUSH
63943: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63944: LD_VAR 0 1
63948: NOT
63949: PUSH
63950: LD_VAR 0 2
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: LD_INT 3
63963: PUSH
63964: LD_INT 4
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: IN
63973: NOT
63974: OR
63975: IFFALSE 63979
// exit ;
63977: GO 64062
// tmp := [ ] ;
63979: LD_ADDR_VAR 0 5
63983: PUSH
63984: EMPTY
63985: ST_TO_ADDR
// for i in units do
63986: LD_ADDR_VAR 0 4
63990: PUSH
63991: LD_VAR 0 1
63995: PUSH
63996: FOR_IN
63997: IFFALSE 64031
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63999: LD_ADDR_VAR 0 5
64003: PUSH
64004: LD_VAR 0 5
64008: PPUSH
64009: LD_VAR 0 4
64013: PPUSH
64014: LD_VAR 0 2
64018: PPUSH
64019: CALL_OW 259
64023: PPUSH
64024: CALL 65435 0 2
64028: ST_TO_ADDR
64029: GO 63996
64031: POP
64032: POP
// if not tmp then
64033: LD_VAR 0 5
64037: NOT
64038: IFFALSE 64042
// exit ;
64040: GO 64062
// result := SortListByListDesc ( units , tmp ) ;
64042: LD_ADDR_VAR 0 3
64046: PUSH
64047: LD_VAR 0 1
64051: PPUSH
64052: LD_VAR 0 5
64056: PPUSH
64057: CALL_OW 77
64061: ST_TO_ADDR
// end ;
64062: LD_VAR 0 3
64066: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64067: LD_INT 0
64069: PPUSH
64070: PPUSH
64071: PPUSH
// result := false ;
64072: LD_ADDR_VAR 0 3
64076: PUSH
64077: LD_INT 0
64079: ST_TO_ADDR
// if not building then
64080: LD_VAR 0 2
64084: NOT
64085: IFFALSE 64089
// exit ;
64087: GO 64227
// x := GetX ( building ) ;
64089: LD_ADDR_VAR 0 4
64093: PUSH
64094: LD_VAR 0 2
64098: PPUSH
64099: CALL_OW 250
64103: ST_TO_ADDR
// y := GetY ( building ) ;
64104: LD_ADDR_VAR 0 5
64108: PUSH
64109: LD_VAR 0 2
64113: PPUSH
64114: CALL_OW 251
64118: ST_TO_ADDR
// if not x or not y then
64119: LD_VAR 0 4
64123: NOT
64124: PUSH
64125: LD_VAR 0 5
64129: NOT
64130: OR
64131: IFFALSE 64135
// exit ;
64133: GO 64227
// if GetTaskList ( unit ) then
64135: LD_VAR 0 1
64139: PPUSH
64140: CALL_OW 437
64144: IFFALSE 64227
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64146: LD_STRING e
64148: PUSH
64149: LD_VAR 0 1
64153: PPUSH
64154: CALL_OW 437
64158: PUSH
64159: LD_INT 1
64161: ARRAY
64162: PUSH
64163: LD_INT 1
64165: ARRAY
64166: EQUAL
64167: PUSH
64168: LD_VAR 0 4
64172: PUSH
64173: LD_VAR 0 1
64177: PPUSH
64178: CALL_OW 437
64182: PUSH
64183: LD_INT 1
64185: ARRAY
64186: PUSH
64187: LD_INT 2
64189: ARRAY
64190: EQUAL
64191: AND
64192: PUSH
64193: LD_VAR 0 5
64197: PUSH
64198: LD_VAR 0 1
64202: PPUSH
64203: CALL_OW 437
64207: PUSH
64208: LD_INT 1
64210: ARRAY
64211: PUSH
64212: LD_INT 3
64214: ARRAY
64215: EQUAL
64216: AND
64217: IFFALSE 64227
// result := true end ;
64219: LD_ADDR_VAR 0 3
64223: PUSH
64224: LD_INT 1
64226: ST_TO_ADDR
// end ;
64227: LD_VAR 0 3
64231: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64232: LD_INT 0
64234: PPUSH
// result := false ;
64235: LD_ADDR_VAR 0 4
64239: PUSH
64240: LD_INT 0
64242: ST_TO_ADDR
// if GetTaskList ( unit ) then
64243: LD_VAR 0 1
64247: PPUSH
64248: CALL_OW 437
64252: IFFALSE 64335
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64254: LD_STRING M
64256: PUSH
64257: LD_VAR 0 1
64261: PPUSH
64262: CALL_OW 437
64266: PUSH
64267: LD_INT 1
64269: ARRAY
64270: PUSH
64271: LD_INT 1
64273: ARRAY
64274: EQUAL
64275: PUSH
64276: LD_VAR 0 2
64280: PUSH
64281: LD_VAR 0 1
64285: PPUSH
64286: CALL_OW 437
64290: PUSH
64291: LD_INT 1
64293: ARRAY
64294: PUSH
64295: LD_INT 2
64297: ARRAY
64298: EQUAL
64299: AND
64300: PUSH
64301: LD_VAR 0 3
64305: PUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: CALL_OW 437
64315: PUSH
64316: LD_INT 1
64318: ARRAY
64319: PUSH
64320: LD_INT 3
64322: ARRAY
64323: EQUAL
64324: AND
64325: IFFALSE 64335
// result := true ;
64327: LD_ADDR_VAR 0 4
64331: PUSH
64332: LD_INT 1
64334: ST_TO_ADDR
// end ; end ;
64335: LD_VAR 0 4
64339: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64340: LD_INT 0
64342: PPUSH
64343: PPUSH
64344: PPUSH
64345: PPUSH
// if not unit or not area then
64346: LD_VAR 0 1
64350: NOT
64351: PUSH
64352: LD_VAR 0 2
64356: NOT
64357: OR
64358: IFFALSE 64362
// exit ;
64360: GO 64538
// tmp := AreaToList ( area , i ) ;
64362: LD_ADDR_VAR 0 6
64366: PUSH
64367: LD_VAR 0 2
64371: PPUSH
64372: LD_VAR 0 5
64376: PPUSH
64377: CALL_OW 517
64381: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64382: LD_ADDR_VAR 0 5
64386: PUSH
64387: DOUBLE
64388: LD_INT 1
64390: DEC
64391: ST_TO_ADDR
64392: LD_VAR 0 6
64396: PUSH
64397: LD_INT 1
64399: ARRAY
64400: PUSH
64401: FOR_TO
64402: IFFALSE 64536
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64404: LD_ADDR_VAR 0 7
64408: PUSH
64409: LD_VAR 0 6
64413: PUSH
64414: LD_INT 1
64416: ARRAY
64417: PUSH
64418: LD_VAR 0 5
64422: ARRAY
64423: PUSH
64424: LD_VAR 0 6
64428: PUSH
64429: LD_INT 2
64431: ARRAY
64432: PUSH
64433: LD_VAR 0 5
64437: ARRAY
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64443: LD_INT 92
64445: PUSH
64446: LD_VAR 0 7
64450: PUSH
64451: LD_INT 1
64453: ARRAY
64454: PUSH
64455: LD_VAR 0 7
64459: PUSH
64460: LD_INT 2
64462: ARRAY
64463: PUSH
64464: LD_INT 2
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: PPUSH
64473: CALL_OW 69
64477: PUSH
64478: LD_INT 0
64480: EQUAL
64481: IFFALSE 64534
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64483: LD_VAR 0 1
64487: PPUSH
64488: LD_VAR 0 7
64492: PUSH
64493: LD_INT 1
64495: ARRAY
64496: PPUSH
64497: LD_VAR 0 7
64501: PUSH
64502: LD_INT 2
64504: ARRAY
64505: PPUSH
64506: LD_VAR 0 3
64510: PPUSH
64511: CALL_OW 48
// result := IsPlaced ( unit ) ;
64515: LD_ADDR_VAR 0 4
64519: PUSH
64520: LD_VAR 0 1
64524: PPUSH
64525: CALL_OW 305
64529: ST_TO_ADDR
// exit ;
64530: POP
64531: POP
64532: GO 64538
// end ; end ;
64534: GO 64401
64536: POP
64537: POP
// end ;
64538: LD_VAR 0 4
64542: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64543: LD_INT 0
64545: PPUSH
64546: PPUSH
64547: PPUSH
// if not side or side > 8 then
64548: LD_VAR 0 1
64552: NOT
64553: PUSH
64554: LD_VAR 0 1
64558: PUSH
64559: LD_INT 8
64561: GREATER
64562: OR
64563: IFFALSE 64567
// exit ;
64565: GO 64754
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64567: LD_ADDR_VAR 0 4
64571: PUSH
64572: LD_INT 22
64574: PUSH
64575: LD_VAR 0 1
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 21
64586: PUSH
64587: LD_INT 3
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PPUSH
64598: CALL_OW 69
64602: ST_TO_ADDR
// if not tmp then
64603: LD_VAR 0 4
64607: NOT
64608: IFFALSE 64612
// exit ;
64610: GO 64754
// enable_addtolog := true ;
64612: LD_ADDR_OWVAR 81
64616: PUSH
64617: LD_INT 1
64619: ST_TO_ADDR
// AddToLog ( [ ) ;
64620: LD_STRING [
64622: PPUSH
64623: CALL_OW 561
// for i in tmp do
64627: LD_ADDR_VAR 0 3
64631: PUSH
64632: LD_VAR 0 4
64636: PUSH
64637: FOR_IN
64638: IFFALSE 64745
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64640: LD_STRING [
64642: PUSH
64643: LD_VAR 0 3
64647: PPUSH
64648: CALL_OW 266
64652: STR
64653: PUSH
64654: LD_STRING , 
64656: STR
64657: PUSH
64658: LD_VAR 0 3
64662: PPUSH
64663: CALL_OW 250
64667: STR
64668: PUSH
64669: LD_STRING , 
64671: STR
64672: PUSH
64673: LD_VAR 0 3
64677: PPUSH
64678: CALL_OW 251
64682: STR
64683: PUSH
64684: LD_STRING , 
64686: STR
64687: PUSH
64688: LD_VAR 0 3
64692: PPUSH
64693: CALL_OW 254
64697: STR
64698: PUSH
64699: LD_STRING , 
64701: STR
64702: PUSH
64703: LD_VAR 0 3
64707: PPUSH
64708: LD_INT 1
64710: PPUSH
64711: CALL_OW 268
64715: STR
64716: PUSH
64717: LD_STRING , 
64719: STR
64720: PUSH
64721: LD_VAR 0 3
64725: PPUSH
64726: LD_INT 2
64728: PPUSH
64729: CALL_OW 268
64733: STR
64734: PUSH
64735: LD_STRING ],
64737: STR
64738: PPUSH
64739: CALL_OW 561
// end ;
64743: GO 64637
64745: POP
64746: POP
// AddToLog ( ]; ) ;
64747: LD_STRING ];
64749: PPUSH
64750: CALL_OW 561
// end ;
64754: LD_VAR 0 2
64758: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64759: LD_INT 0
64761: PPUSH
64762: PPUSH
64763: PPUSH
64764: PPUSH
64765: PPUSH
// if not area or not rate or not max then
64766: LD_VAR 0 1
64770: NOT
64771: PUSH
64772: LD_VAR 0 2
64776: NOT
64777: OR
64778: PUSH
64779: LD_VAR 0 4
64783: NOT
64784: OR
64785: IFFALSE 64789
// exit ;
64787: GO 64978
// while 1 do
64789: LD_INT 1
64791: IFFALSE 64978
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64793: LD_ADDR_VAR 0 9
64797: PUSH
64798: LD_VAR 0 1
64802: PPUSH
64803: LD_INT 1
64805: PPUSH
64806: CALL_OW 287
64810: PUSH
64811: LD_INT 10
64813: MUL
64814: ST_TO_ADDR
// r := rate / 10 ;
64815: LD_ADDR_VAR 0 7
64819: PUSH
64820: LD_VAR 0 2
64824: PUSH
64825: LD_INT 10
64827: DIVREAL
64828: ST_TO_ADDR
// time := 1 1$00 ;
64829: LD_ADDR_VAR 0 8
64833: PUSH
64834: LD_INT 2100
64836: ST_TO_ADDR
// if amount < min then
64837: LD_VAR 0 9
64841: PUSH
64842: LD_VAR 0 3
64846: LESS
64847: IFFALSE 64865
// r := r * 2 else
64849: LD_ADDR_VAR 0 7
64853: PUSH
64854: LD_VAR 0 7
64858: PUSH
64859: LD_INT 2
64861: MUL
64862: ST_TO_ADDR
64863: GO 64891
// if amount > max then
64865: LD_VAR 0 9
64869: PUSH
64870: LD_VAR 0 4
64874: GREATER
64875: IFFALSE 64891
// r := r / 2 ;
64877: LD_ADDR_VAR 0 7
64881: PUSH
64882: LD_VAR 0 7
64886: PUSH
64887: LD_INT 2
64889: DIVREAL
64890: ST_TO_ADDR
// time := time / r ;
64891: LD_ADDR_VAR 0 8
64895: PUSH
64896: LD_VAR 0 8
64900: PUSH
64901: LD_VAR 0 7
64905: DIVREAL
64906: ST_TO_ADDR
// if time < 0 then
64907: LD_VAR 0 8
64911: PUSH
64912: LD_INT 0
64914: LESS
64915: IFFALSE 64932
// time := time * - 1 ;
64917: LD_ADDR_VAR 0 8
64921: PUSH
64922: LD_VAR 0 8
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: MUL
64931: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64932: LD_VAR 0 8
64936: PUSH
64937: LD_INT 35
64939: PPUSH
64940: LD_INT 875
64942: PPUSH
64943: CALL_OW 12
64947: PLUS
64948: PPUSH
64949: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64953: LD_INT 1
64955: PPUSH
64956: LD_INT 5
64958: PPUSH
64959: CALL_OW 12
64963: PPUSH
64964: LD_VAR 0 1
64968: PPUSH
64969: LD_INT 1
64971: PPUSH
64972: CALL_OW 55
// end ;
64976: GO 64789
// end ;
64978: LD_VAR 0 5
64982: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64983: LD_INT 0
64985: PPUSH
64986: PPUSH
64987: PPUSH
64988: PPUSH
64989: PPUSH
64990: PPUSH
64991: PPUSH
64992: PPUSH
// if not turrets or not factories then
64993: LD_VAR 0 1
64997: NOT
64998: PUSH
64999: LD_VAR 0 2
65003: NOT
65004: OR
65005: IFFALSE 65009
// exit ;
65007: GO 65316
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65009: LD_ADDR_VAR 0 10
65013: PUSH
65014: LD_INT 5
65016: PUSH
65017: LD_INT 6
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: LD_INT 4
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: LD_INT 5
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 24
65051: PUSH
65052: LD_INT 25
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 23
65061: PUSH
65062: LD_INT 27
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 42
65075: PUSH
65076: LD_INT 43
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 44
65085: PUSH
65086: LD_INT 46
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 45
65095: PUSH
65096: LD_INT 47
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: LIST
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: ST_TO_ADDR
// result := [ ] ;
65113: LD_ADDR_VAR 0 3
65117: PUSH
65118: EMPTY
65119: ST_TO_ADDR
// for i in turrets do
65120: LD_ADDR_VAR 0 4
65124: PUSH
65125: LD_VAR 0 1
65129: PUSH
65130: FOR_IN
65131: IFFALSE 65314
// begin nat := GetNation ( i ) ;
65133: LD_ADDR_VAR 0 7
65137: PUSH
65138: LD_VAR 0 4
65142: PPUSH
65143: CALL_OW 248
65147: ST_TO_ADDR
// weapon := 0 ;
65148: LD_ADDR_VAR 0 8
65152: PUSH
65153: LD_INT 0
65155: ST_TO_ADDR
// if not nat then
65156: LD_VAR 0 7
65160: NOT
65161: IFFALSE 65165
// continue ;
65163: GO 65130
// for j in list [ nat ] do
65165: LD_ADDR_VAR 0 5
65169: PUSH
65170: LD_VAR 0 10
65174: PUSH
65175: LD_VAR 0 7
65179: ARRAY
65180: PUSH
65181: FOR_IN
65182: IFFALSE 65223
// if GetBWeapon ( i ) = j [ 1 ] then
65184: LD_VAR 0 4
65188: PPUSH
65189: CALL_OW 269
65193: PUSH
65194: LD_VAR 0 5
65198: PUSH
65199: LD_INT 1
65201: ARRAY
65202: EQUAL
65203: IFFALSE 65221
// begin weapon := j [ 2 ] ;
65205: LD_ADDR_VAR 0 8
65209: PUSH
65210: LD_VAR 0 5
65214: PUSH
65215: LD_INT 2
65217: ARRAY
65218: ST_TO_ADDR
// break ;
65219: GO 65223
// end ;
65221: GO 65181
65223: POP
65224: POP
// if not weapon then
65225: LD_VAR 0 8
65229: NOT
65230: IFFALSE 65234
// continue ;
65232: GO 65130
// for k in factories do
65234: LD_ADDR_VAR 0 6
65238: PUSH
65239: LD_VAR 0 2
65243: PUSH
65244: FOR_IN
65245: IFFALSE 65310
// begin weapons := AvailableWeaponList ( k ) ;
65247: LD_ADDR_VAR 0 9
65251: PUSH
65252: LD_VAR 0 6
65256: PPUSH
65257: CALL_OW 478
65261: ST_TO_ADDR
// if not weapons then
65262: LD_VAR 0 9
65266: NOT
65267: IFFALSE 65271
// continue ;
65269: GO 65244
// if weapon in weapons then
65271: LD_VAR 0 8
65275: PUSH
65276: LD_VAR 0 9
65280: IN
65281: IFFALSE 65308
// begin result := [ i , weapon ] ;
65283: LD_ADDR_VAR 0 3
65287: PUSH
65288: LD_VAR 0 4
65292: PUSH
65293: LD_VAR 0 8
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: ST_TO_ADDR
// exit ;
65302: POP
65303: POP
65304: POP
65305: POP
65306: GO 65316
// end ; end ;
65308: GO 65244
65310: POP
65311: POP
// end ;
65312: GO 65130
65314: POP
65315: POP
// end ;
65316: LD_VAR 0 3
65320: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65321: LD_INT 0
65323: PPUSH
// if not side or side > 8 then
65324: LD_VAR 0 3
65328: NOT
65329: PUSH
65330: LD_VAR 0 3
65334: PUSH
65335: LD_INT 8
65337: GREATER
65338: OR
65339: IFFALSE 65343
// exit ;
65341: GO 65402
// if not range then
65343: LD_VAR 0 4
65347: NOT
65348: IFFALSE 65359
// range := - 12 ;
65350: LD_ADDR_VAR 0 4
65354: PUSH
65355: LD_INT 12
65357: NEG
65358: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65359: LD_VAR 0 1
65363: PPUSH
65364: LD_VAR 0 2
65368: PPUSH
65369: LD_VAR 0 3
65373: PPUSH
65374: LD_VAR 0 4
65378: PPUSH
65379: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65383: LD_VAR 0 1
65387: PPUSH
65388: LD_VAR 0 2
65392: PPUSH
65393: LD_VAR 0 3
65397: PPUSH
65398: CALL_OW 331
// end ;
65402: LD_VAR 0 5
65406: RET
// export function Video ( mode ) ; begin
65407: LD_INT 0
65409: PPUSH
// ingame_video = mode ;
65410: LD_ADDR_OWVAR 52
65414: PUSH
65415: LD_VAR 0 1
65419: ST_TO_ADDR
// interface_hidden = mode ;
65420: LD_ADDR_OWVAR 54
65424: PUSH
65425: LD_VAR 0 1
65429: ST_TO_ADDR
// end ;
65430: LD_VAR 0 2
65434: RET
// export function Join ( array , element ) ; begin
65435: LD_INT 0
65437: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65438: LD_ADDR_VAR 0 3
65442: PUSH
65443: LD_VAR 0 1
65447: PPUSH
65448: LD_VAR 0 1
65452: PUSH
65453: LD_INT 1
65455: PLUS
65456: PPUSH
65457: LD_VAR 0 2
65461: PPUSH
65462: CALL_OW 1
65466: ST_TO_ADDR
// end ;
65467: LD_VAR 0 3
65471: RET
// export function JoinUnion ( array , element ) ; begin
65472: LD_INT 0
65474: PPUSH
// result := array union element ;
65475: LD_ADDR_VAR 0 3
65479: PUSH
65480: LD_VAR 0 1
65484: PUSH
65485: LD_VAR 0 2
65489: UNION
65490: ST_TO_ADDR
// end ;
65491: LD_VAR 0 3
65495: RET
// export function GetBehemoths ( side ) ; begin
65496: LD_INT 0
65498: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65499: LD_ADDR_VAR 0 2
65503: PUSH
65504: LD_INT 22
65506: PUSH
65507: LD_VAR 0 1
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 31
65518: PUSH
65519: LD_INT 25
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PPUSH
65530: CALL_OW 69
65534: ST_TO_ADDR
// end ;
65535: LD_VAR 0 2
65539: RET
// export function Shuffle ( array ) ; var i , index ; begin
65540: LD_INT 0
65542: PPUSH
65543: PPUSH
65544: PPUSH
// result := [ ] ;
65545: LD_ADDR_VAR 0 2
65549: PUSH
65550: EMPTY
65551: ST_TO_ADDR
// if not array then
65552: LD_VAR 0 1
65556: NOT
65557: IFFALSE 65561
// exit ;
65559: GO 65660
// Randomize ;
65561: CALL_OW 10
// for i = array downto 1 do
65565: LD_ADDR_VAR 0 3
65569: PUSH
65570: DOUBLE
65571: LD_VAR 0 1
65575: INC
65576: ST_TO_ADDR
65577: LD_INT 1
65579: PUSH
65580: FOR_DOWNTO
65581: IFFALSE 65658
// begin index := rand ( 1 , array ) ;
65583: LD_ADDR_VAR 0 4
65587: PUSH
65588: LD_INT 1
65590: PPUSH
65591: LD_VAR 0 1
65595: PPUSH
65596: CALL_OW 12
65600: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65601: LD_ADDR_VAR 0 2
65605: PUSH
65606: LD_VAR 0 2
65610: PPUSH
65611: LD_VAR 0 2
65615: PUSH
65616: LD_INT 1
65618: PLUS
65619: PPUSH
65620: LD_VAR 0 1
65624: PUSH
65625: LD_VAR 0 4
65629: ARRAY
65630: PPUSH
65631: CALL_OW 2
65635: ST_TO_ADDR
// array := Delete ( array , index ) ;
65636: LD_ADDR_VAR 0 1
65640: PUSH
65641: LD_VAR 0 1
65645: PPUSH
65646: LD_VAR 0 4
65650: PPUSH
65651: CALL_OW 3
65655: ST_TO_ADDR
// end ;
65656: GO 65580
65658: POP
65659: POP
// end ;
65660: LD_VAR 0 2
65664: RET
// export function GetBaseMaterials ( base ) ; begin
65665: LD_INT 0
65667: PPUSH
// result := [ 0 , 0 , 0 ] ;
65668: LD_ADDR_VAR 0 2
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// if not base then
65687: LD_VAR 0 1
65691: NOT
65692: IFFALSE 65696
// exit ;
65694: GO 65745
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65696: LD_ADDR_VAR 0 2
65700: PUSH
65701: LD_VAR 0 1
65705: PPUSH
65706: LD_INT 1
65708: PPUSH
65709: CALL_OW 275
65713: PUSH
65714: LD_VAR 0 1
65718: PPUSH
65719: LD_INT 2
65721: PPUSH
65722: CALL_OW 275
65726: PUSH
65727: LD_VAR 0 1
65731: PPUSH
65732: LD_INT 3
65734: PPUSH
65735: CALL_OW 275
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: ST_TO_ADDR
// end ;
65745: LD_VAR 0 2
65749: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65750: LD_INT 0
65752: PPUSH
65753: PPUSH
// result := array ;
65754: LD_ADDR_VAR 0 3
65758: PUSH
65759: LD_VAR 0 1
65763: ST_TO_ADDR
// if size >= result then
65764: LD_VAR 0 2
65768: PUSH
65769: LD_VAR 0 3
65773: GREATEREQUAL
65774: IFFALSE 65778
// exit ;
65776: GO 65828
// if size then
65778: LD_VAR 0 2
65782: IFFALSE 65828
// for i := array downto size do
65784: LD_ADDR_VAR 0 4
65788: PUSH
65789: DOUBLE
65790: LD_VAR 0 1
65794: INC
65795: ST_TO_ADDR
65796: LD_VAR 0 2
65800: PUSH
65801: FOR_DOWNTO
65802: IFFALSE 65826
// result := Delete ( result , result ) ;
65804: LD_ADDR_VAR 0 3
65808: PUSH
65809: LD_VAR 0 3
65813: PPUSH
65814: LD_VAR 0 3
65818: PPUSH
65819: CALL_OW 3
65823: ST_TO_ADDR
65824: GO 65801
65826: POP
65827: POP
// end ;
65828: LD_VAR 0 3
65832: RET
// export function ComExit ( unit ) ; var tmp ; begin
65833: LD_INT 0
65835: PPUSH
65836: PPUSH
// if not IsInUnit ( unit ) then
65837: LD_VAR 0 1
65841: PPUSH
65842: CALL_OW 310
65846: NOT
65847: IFFALSE 65851
// exit ;
65849: GO 65911
// tmp := IsInUnit ( unit ) ;
65851: LD_ADDR_VAR 0 3
65855: PUSH
65856: LD_VAR 0 1
65860: PPUSH
65861: CALL_OW 310
65865: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65866: LD_VAR 0 3
65870: PPUSH
65871: CALL_OW 247
65875: PUSH
65876: LD_INT 2
65878: EQUAL
65879: IFFALSE 65892
// ComExitVehicle ( unit ) else
65881: LD_VAR 0 1
65885: PPUSH
65886: CALL_OW 121
65890: GO 65901
// ComExitBuilding ( unit ) ;
65892: LD_VAR 0 1
65896: PPUSH
65897: CALL_OW 122
// result := tmp ;
65901: LD_ADDR_VAR 0 2
65905: PUSH
65906: LD_VAR 0 3
65910: ST_TO_ADDR
// end ;
65911: LD_VAR 0 2
65915: RET
// export function ComExitAll ( units ) ; var i ; begin
65916: LD_INT 0
65918: PPUSH
65919: PPUSH
// if not units then
65920: LD_VAR 0 1
65924: NOT
65925: IFFALSE 65929
// exit ;
65927: GO 65955
// for i in units do
65929: LD_ADDR_VAR 0 3
65933: PUSH
65934: LD_VAR 0 1
65938: PUSH
65939: FOR_IN
65940: IFFALSE 65953
// ComExit ( i ) ;
65942: LD_VAR 0 3
65946: PPUSH
65947: CALL 65833 0 1
65951: GO 65939
65953: POP
65954: POP
// end ;
65955: LD_VAR 0 2
65959: RET
// export function ResetHc ; begin
65960: LD_INT 0
65962: PPUSH
// InitHc ;
65963: CALL_OW 19
// hc_importance := 0 ;
65967: LD_ADDR_OWVAR 32
65971: PUSH
65972: LD_INT 0
65974: ST_TO_ADDR
// end ;
65975: LD_VAR 0 1
65979: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65980: LD_INT 0
65982: PPUSH
65983: PPUSH
65984: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65985: LD_ADDR_VAR 0 6
65989: PUSH
65990: LD_VAR 0 1
65994: PUSH
65995: LD_VAR 0 3
65999: PLUS
66000: PUSH
66001: LD_INT 2
66003: DIV
66004: ST_TO_ADDR
// if _x < 0 then
66005: LD_VAR 0 6
66009: PUSH
66010: LD_INT 0
66012: LESS
66013: IFFALSE 66030
// _x := _x * - 1 ;
66015: LD_ADDR_VAR 0 6
66019: PUSH
66020: LD_VAR 0 6
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: MUL
66029: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66030: LD_ADDR_VAR 0 7
66034: PUSH
66035: LD_VAR 0 2
66039: PUSH
66040: LD_VAR 0 4
66044: PLUS
66045: PUSH
66046: LD_INT 2
66048: DIV
66049: ST_TO_ADDR
// if _y < 0 then
66050: LD_VAR 0 7
66054: PUSH
66055: LD_INT 0
66057: LESS
66058: IFFALSE 66075
// _y := _y * - 1 ;
66060: LD_ADDR_VAR 0 7
66064: PUSH
66065: LD_VAR 0 7
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: MUL
66074: ST_TO_ADDR
// result := [ _x , _y ] ;
66075: LD_ADDR_VAR 0 5
66079: PUSH
66080: LD_VAR 0 6
66084: PUSH
66085: LD_VAR 0 7
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: ST_TO_ADDR
// end ;
66094: LD_VAR 0 5
66098: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66099: LD_INT 0
66101: PPUSH
66102: PPUSH
66103: PPUSH
66104: PPUSH
// task := GetTaskList ( unit ) ;
66105: LD_ADDR_VAR 0 7
66109: PUSH
66110: LD_VAR 0 1
66114: PPUSH
66115: CALL_OW 437
66119: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66120: LD_VAR 0 7
66124: NOT
66125: PUSH
66126: LD_VAR 0 1
66130: PPUSH
66131: LD_VAR 0 2
66135: PPUSH
66136: CALL_OW 308
66140: NOT
66141: AND
66142: IFFALSE 66146
// exit ;
66144: GO 66264
// if IsInArea ( unit , area ) then
66146: LD_VAR 0 1
66150: PPUSH
66151: LD_VAR 0 2
66155: PPUSH
66156: CALL_OW 308
66160: IFFALSE 66178
// begin ComMoveToArea ( unit , goAway ) ;
66162: LD_VAR 0 1
66166: PPUSH
66167: LD_VAR 0 3
66171: PPUSH
66172: CALL_OW 113
// exit ;
66176: GO 66264
// end ; if task [ 1 ] [ 1 ] <> M then
66178: LD_VAR 0 7
66182: PUSH
66183: LD_INT 1
66185: ARRAY
66186: PUSH
66187: LD_INT 1
66189: ARRAY
66190: PUSH
66191: LD_STRING M
66193: NONEQUAL
66194: IFFALSE 66198
// exit ;
66196: GO 66264
// x := task [ 1 ] [ 2 ] ;
66198: LD_ADDR_VAR 0 5
66202: PUSH
66203: LD_VAR 0 7
66207: PUSH
66208: LD_INT 1
66210: ARRAY
66211: PUSH
66212: LD_INT 2
66214: ARRAY
66215: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66216: LD_ADDR_VAR 0 6
66220: PUSH
66221: LD_VAR 0 7
66225: PUSH
66226: LD_INT 1
66228: ARRAY
66229: PUSH
66230: LD_INT 3
66232: ARRAY
66233: ST_TO_ADDR
// if InArea ( x , y , area ) then
66234: LD_VAR 0 5
66238: PPUSH
66239: LD_VAR 0 6
66243: PPUSH
66244: LD_VAR 0 2
66248: PPUSH
66249: CALL_OW 309
66253: IFFALSE 66264
// ComStop ( unit ) ;
66255: LD_VAR 0 1
66259: PPUSH
66260: CALL_OW 141
// end ;
66264: LD_VAR 0 4
66268: RET
// export function Abs ( value ) ; begin
66269: LD_INT 0
66271: PPUSH
// result := value ;
66272: LD_ADDR_VAR 0 2
66276: PUSH
66277: LD_VAR 0 1
66281: ST_TO_ADDR
// if value < 0 then
66282: LD_VAR 0 1
66286: PUSH
66287: LD_INT 0
66289: LESS
66290: IFFALSE 66307
// result := value * - 1 ;
66292: LD_ADDR_VAR 0 2
66296: PUSH
66297: LD_VAR 0 1
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: MUL
66306: ST_TO_ADDR
// end ;
66307: LD_VAR 0 2
66311: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66312: LD_INT 0
66314: PPUSH
66315: PPUSH
66316: PPUSH
66317: PPUSH
66318: PPUSH
66319: PPUSH
66320: PPUSH
66321: PPUSH
// if not unit or not building then
66322: LD_VAR 0 1
66326: NOT
66327: PUSH
66328: LD_VAR 0 2
66332: NOT
66333: OR
66334: IFFALSE 66338
// exit ;
66336: GO 66564
// x := GetX ( building ) ;
66338: LD_ADDR_VAR 0 4
66342: PUSH
66343: LD_VAR 0 2
66347: PPUSH
66348: CALL_OW 250
66352: ST_TO_ADDR
// y := GetY ( building ) ;
66353: LD_ADDR_VAR 0 6
66357: PUSH
66358: LD_VAR 0 2
66362: PPUSH
66363: CALL_OW 251
66367: ST_TO_ADDR
// d := GetDir ( building ) ;
66368: LD_ADDR_VAR 0 8
66372: PUSH
66373: LD_VAR 0 2
66377: PPUSH
66378: CALL_OW 254
66382: ST_TO_ADDR
// r := 4 ;
66383: LD_ADDR_VAR 0 9
66387: PUSH
66388: LD_INT 4
66390: ST_TO_ADDR
// for i := 1 to 5 do
66391: LD_ADDR_VAR 0 10
66395: PUSH
66396: DOUBLE
66397: LD_INT 1
66399: DEC
66400: ST_TO_ADDR
66401: LD_INT 5
66403: PUSH
66404: FOR_TO
66405: IFFALSE 66562
// begin _x := ShiftX ( x , d , r + i ) ;
66407: LD_ADDR_VAR 0 5
66411: PUSH
66412: LD_VAR 0 4
66416: PPUSH
66417: LD_VAR 0 8
66421: PPUSH
66422: LD_VAR 0 9
66426: PUSH
66427: LD_VAR 0 10
66431: PLUS
66432: PPUSH
66433: CALL_OW 272
66437: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66438: LD_ADDR_VAR 0 7
66442: PUSH
66443: LD_VAR 0 6
66447: PPUSH
66448: LD_VAR 0 8
66452: PPUSH
66453: LD_VAR 0 9
66457: PUSH
66458: LD_VAR 0 10
66462: PLUS
66463: PPUSH
66464: CALL_OW 273
66468: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66469: LD_VAR 0 5
66473: PPUSH
66474: LD_VAR 0 7
66478: PPUSH
66479: CALL_OW 488
66483: PUSH
66484: LD_VAR 0 5
66488: PPUSH
66489: LD_VAR 0 7
66493: PPUSH
66494: CALL_OW 428
66498: PPUSH
66499: CALL_OW 247
66503: PUSH
66504: LD_INT 3
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: IN
66514: NOT
66515: AND
66516: IFFALSE 66560
// begin ComMoveXY ( unit , _x , _y ) ;
66518: LD_VAR 0 1
66522: PPUSH
66523: LD_VAR 0 5
66527: PPUSH
66528: LD_VAR 0 7
66532: PPUSH
66533: CALL_OW 111
// result := [ _x , _y ] ;
66537: LD_ADDR_VAR 0 3
66541: PUSH
66542: LD_VAR 0 5
66546: PUSH
66547: LD_VAR 0 7
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: ST_TO_ADDR
// exit ;
66556: POP
66557: POP
66558: GO 66564
// end ; end ;
66560: GO 66404
66562: POP
66563: POP
// end ;
66564: LD_VAR 0 3
66568: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66569: LD_INT 0
66571: PPUSH
66572: PPUSH
66573: PPUSH
// result := 0 ;
66574: LD_ADDR_VAR 0 3
66578: PUSH
66579: LD_INT 0
66581: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66582: LD_VAR 0 1
66586: PUSH
66587: LD_INT 0
66589: LESS
66590: PUSH
66591: LD_VAR 0 1
66595: PUSH
66596: LD_INT 8
66598: GREATER
66599: OR
66600: PUSH
66601: LD_VAR 0 2
66605: PUSH
66606: LD_INT 0
66608: LESS
66609: OR
66610: PUSH
66611: LD_VAR 0 2
66615: PUSH
66616: LD_INT 8
66618: GREATER
66619: OR
66620: IFFALSE 66624
// exit ;
66622: GO 66699
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66624: LD_ADDR_VAR 0 4
66628: PUSH
66629: LD_INT 22
66631: PUSH
66632: LD_VAR 0 2
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PPUSH
66641: CALL_OW 69
66645: PUSH
66646: FOR_IN
66647: IFFALSE 66697
// begin un := UnitShoot ( i ) ;
66649: LD_ADDR_VAR 0 5
66653: PUSH
66654: LD_VAR 0 4
66658: PPUSH
66659: CALL_OW 504
66663: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66664: LD_VAR 0 5
66668: PPUSH
66669: CALL_OW 255
66673: PUSH
66674: LD_VAR 0 1
66678: EQUAL
66679: IFFALSE 66695
// begin result := un ;
66681: LD_ADDR_VAR 0 3
66685: PUSH
66686: LD_VAR 0 5
66690: ST_TO_ADDR
// exit ;
66691: POP
66692: POP
66693: GO 66699
// end ; end ;
66695: GO 66646
66697: POP
66698: POP
// end ;
66699: LD_VAR 0 3
66703: RET
// export function GetCargoBay ( units ) ; begin
66704: LD_INT 0
66706: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66707: LD_ADDR_VAR 0 2
66711: PUSH
66712: LD_VAR 0 1
66716: PPUSH
66717: LD_INT 2
66719: PUSH
66720: LD_INT 34
66722: PUSH
66723: LD_INT 12
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 34
66732: PUSH
66733: LD_INT 51
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 34
66742: PUSH
66743: LD_INT 32
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 34
66752: PUSH
66753: LD_INT 89
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: PPUSH
66767: CALL_OW 72
66771: ST_TO_ADDR
// end ;
66772: LD_VAR 0 2
66776: RET
// export function Negate ( value ) ; begin
66777: LD_INT 0
66779: PPUSH
// result := not value ;
66780: LD_ADDR_VAR 0 2
66784: PUSH
66785: LD_VAR 0 1
66789: NOT
66790: ST_TO_ADDR
// end ;
66791: LD_VAR 0 2
66795: RET
// export function Inc ( value ) ; begin
66796: LD_INT 0
66798: PPUSH
// result := value + 1 ;
66799: LD_ADDR_VAR 0 2
66803: PUSH
66804: LD_VAR 0 1
66808: PUSH
66809: LD_INT 1
66811: PLUS
66812: ST_TO_ADDR
// end ;
66813: LD_VAR 0 2
66817: RET
// export function Dec ( value ) ; begin
66818: LD_INT 0
66820: PPUSH
// result := value - 1 ;
66821: LD_ADDR_VAR 0 2
66825: PUSH
66826: LD_VAR 0 1
66830: PUSH
66831: LD_INT 1
66833: MINUS
66834: ST_TO_ADDR
// end ;
66835: LD_VAR 0 2
66839: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66840: LD_INT 0
66842: PPUSH
66843: PPUSH
66844: PPUSH
66845: PPUSH
66846: PPUSH
66847: PPUSH
66848: PPUSH
66849: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66850: LD_VAR 0 1
66854: PPUSH
66855: LD_VAR 0 2
66859: PPUSH
66860: CALL_OW 488
66864: NOT
66865: PUSH
66866: LD_VAR 0 3
66870: PPUSH
66871: LD_VAR 0 4
66875: PPUSH
66876: CALL_OW 488
66880: NOT
66881: OR
66882: IFFALSE 66895
// begin result := - 1 ;
66884: LD_ADDR_VAR 0 5
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: ST_TO_ADDR
// exit ;
66893: GO 67130
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66895: LD_ADDR_VAR 0 12
66899: PUSH
66900: LD_VAR 0 1
66904: PPUSH
66905: LD_VAR 0 2
66909: PPUSH
66910: LD_VAR 0 3
66914: PPUSH
66915: LD_VAR 0 4
66919: PPUSH
66920: CALL 65980 0 4
66924: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66925: LD_ADDR_VAR 0 11
66929: PUSH
66930: LD_VAR 0 1
66934: PPUSH
66935: LD_VAR 0 2
66939: PPUSH
66940: LD_VAR 0 12
66944: PUSH
66945: LD_INT 1
66947: ARRAY
66948: PPUSH
66949: LD_VAR 0 12
66953: PUSH
66954: LD_INT 2
66956: ARRAY
66957: PPUSH
66958: CALL_OW 298
66962: ST_TO_ADDR
// distance := 9999 ;
66963: LD_ADDR_VAR 0 10
66967: PUSH
66968: LD_INT 9999
66970: ST_TO_ADDR
// for i := 0 to 5 do
66971: LD_ADDR_VAR 0 6
66975: PUSH
66976: DOUBLE
66977: LD_INT 0
66979: DEC
66980: ST_TO_ADDR
66981: LD_INT 5
66983: PUSH
66984: FOR_TO
66985: IFFALSE 67128
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66987: LD_ADDR_VAR 0 7
66991: PUSH
66992: LD_VAR 0 1
66996: PPUSH
66997: LD_VAR 0 6
67001: PPUSH
67002: LD_VAR 0 11
67006: PPUSH
67007: CALL_OW 272
67011: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67012: LD_ADDR_VAR 0 8
67016: PUSH
67017: LD_VAR 0 2
67021: PPUSH
67022: LD_VAR 0 6
67026: PPUSH
67027: LD_VAR 0 11
67031: PPUSH
67032: CALL_OW 273
67036: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67037: LD_VAR 0 7
67041: PPUSH
67042: LD_VAR 0 8
67046: PPUSH
67047: CALL_OW 488
67051: NOT
67052: IFFALSE 67056
// continue ;
67054: GO 66984
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67056: LD_ADDR_VAR 0 9
67060: PUSH
67061: LD_VAR 0 12
67065: PUSH
67066: LD_INT 1
67068: ARRAY
67069: PPUSH
67070: LD_VAR 0 12
67074: PUSH
67075: LD_INT 2
67077: ARRAY
67078: PPUSH
67079: LD_VAR 0 7
67083: PPUSH
67084: LD_VAR 0 8
67088: PPUSH
67089: CALL_OW 298
67093: ST_TO_ADDR
// if tmp < distance then
67094: LD_VAR 0 9
67098: PUSH
67099: LD_VAR 0 10
67103: LESS
67104: IFFALSE 67126
// begin result := i ;
67106: LD_ADDR_VAR 0 5
67110: PUSH
67111: LD_VAR 0 6
67115: ST_TO_ADDR
// distance := tmp ;
67116: LD_ADDR_VAR 0 10
67120: PUSH
67121: LD_VAR 0 9
67125: ST_TO_ADDR
// end ; end ;
67126: GO 66984
67128: POP
67129: POP
// end ;
67130: LD_VAR 0 5
67134: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67135: LD_INT 0
67137: PPUSH
67138: PPUSH
// if not driver or not IsInUnit ( driver ) then
67139: LD_VAR 0 1
67143: NOT
67144: PUSH
67145: LD_VAR 0 1
67149: PPUSH
67150: CALL_OW 310
67154: NOT
67155: OR
67156: IFFALSE 67160
// exit ;
67158: GO 67250
// vehicle := IsInUnit ( driver ) ;
67160: LD_ADDR_VAR 0 3
67164: PUSH
67165: LD_VAR 0 1
67169: PPUSH
67170: CALL_OW 310
67174: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67175: LD_VAR 0 1
67179: PPUSH
67180: LD_STRING \
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: LD_INT 0
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: PUSH
67210: LD_STRING E
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: LD_VAR 0 3
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PPUSH
67246: CALL_OW 446
// end ;
67250: LD_VAR 0 2
67254: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
// if not driver or not IsInUnit ( driver ) then
67259: LD_VAR 0 1
67263: NOT
67264: PUSH
67265: LD_VAR 0 1
67269: PPUSH
67270: CALL_OW 310
67274: NOT
67275: OR
67276: IFFALSE 67280
// exit ;
67278: GO 67370
// vehicle := IsInUnit ( driver ) ;
67280: LD_ADDR_VAR 0 3
67284: PUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: CALL_OW 310
67294: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67295: LD_VAR 0 1
67299: PPUSH
67300: LD_STRING \
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: PUSH
67330: LD_STRING E
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_VAR 0 3
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PPUSH
67366: CALL_OW 447
// end ;
67370: LD_VAR 0 2
67374: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67375: LD_INT 0
67377: PPUSH
67378: PPUSH
67379: PPUSH
// tmp := [ ] ;
67380: LD_ADDR_VAR 0 5
67384: PUSH
67385: EMPTY
67386: ST_TO_ADDR
// for i in units do
67387: LD_ADDR_VAR 0 4
67391: PUSH
67392: LD_VAR 0 1
67396: PUSH
67397: FOR_IN
67398: IFFALSE 67436
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67400: LD_ADDR_VAR 0 5
67404: PUSH
67405: LD_VAR 0 5
67409: PPUSH
67410: LD_VAR 0 5
67414: PUSH
67415: LD_INT 1
67417: PLUS
67418: PPUSH
67419: LD_VAR 0 4
67423: PPUSH
67424: CALL_OW 256
67428: PPUSH
67429: CALL_OW 2
67433: ST_TO_ADDR
67434: GO 67397
67436: POP
67437: POP
// if not tmp then
67438: LD_VAR 0 5
67442: NOT
67443: IFFALSE 67447
// exit ;
67445: GO 67495
// if asc then
67447: LD_VAR 0 2
67451: IFFALSE 67475
// result := SortListByListAsc ( units , tmp ) else
67453: LD_ADDR_VAR 0 3
67457: PUSH
67458: LD_VAR 0 1
67462: PPUSH
67463: LD_VAR 0 5
67467: PPUSH
67468: CALL_OW 76
67472: ST_TO_ADDR
67473: GO 67495
// result := SortListByListDesc ( units , tmp ) ;
67475: LD_ADDR_VAR 0 3
67479: PUSH
67480: LD_VAR 0 1
67484: PPUSH
67485: LD_VAR 0 5
67489: PPUSH
67490: CALL_OW 77
67494: ST_TO_ADDR
// end ;
67495: LD_VAR 0 3
67499: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67500: LD_INT 0
67502: PPUSH
67503: PPUSH
// task := GetTaskList ( mech ) ;
67504: LD_ADDR_VAR 0 4
67508: PUSH
67509: LD_VAR 0 1
67513: PPUSH
67514: CALL_OW 437
67518: ST_TO_ADDR
// if not task then
67519: LD_VAR 0 4
67523: NOT
67524: IFFALSE 67528
// exit ;
67526: GO 67570
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67528: LD_ADDR_VAR 0 3
67532: PUSH
67533: LD_VAR 0 4
67537: PUSH
67538: LD_INT 1
67540: ARRAY
67541: PUSH
67542: LD_INT 1
67544: ARRAY
67545: PUSH
67546: LD_STRING r
67548: EQUAL
67549: PUSH
67550: LD_VAR 0 4
67554: PUSH
67555: LD_INT 1
67557: ARRAY
67558: PUSH
67559: LD_INT 4
67561: ARRAY
67562: PUSH
67563: LD_VAR 0 2
67567: EQUAL
67568: AND
67569: ST_TO_ADDR
// end ;
67570: LD_VAR 0 3
67574: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67575: LD_INT 0
67577: PPUSH
// SetDir ( unit , d ) ;
67578: LD_VAR 0 1
67582: PPUSH
67583: LD_VAR 0 4
67587: PPUSH
67588: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67592: LD_VAR 0 1
67596: PPUSH
67597: LD_VAR 0 2
67601: PPUSH
67602: LD_VAR 0 3
67606: PPUSH
67607: LD_VAR 0 5
67611: PPUSH
67612: CALL_OW 48
// end ;
67616: LD_VAR 0 6
67620: RET
// export function ToNaturalNumber ( number ) ; begin
67621: LD_INT 0
67623: PPUSH
// result := number div 1 ;
67624: LD_ADDR_VAR 0 2
67628: PUSH
67629: LD_VAR 0 1
67633: PUSH
67634: LD_INT 1
67636: DIV
67637: ST_TO_ADDR
// if number < 0 then
67638: LD_VAR 0 1
67642: PUSH
67643: LD_INT 0
67645: LESS
67646: IFFALSE 67656
// result := 0 ;
67648: LD_ADDR_VAR 0 2
67652: PUSH
67653: LD_INT 0
67655: ST_TO_ADDR
// end ;
67656: LD_VAR 0 2
67660: RET
// export function SortByClass ( units , class ) ; var un ; begin
67661: LD_INT 0
67663: PPUSH
67664: PPUSH
// if not units or not class then
67665: LD_VAR 0 1
67669: NOT
67670: PUSH
67671: LD_VAR 0 2
67675: NOT
67676: OR
67677: IFFALSE 67681
// exit ;
67679: GO 67776
// result := [ ] ;
67681: LD_ADDR_VAR 0 3
67685: PUSH
67686: EMPTY
67687: ST_TO_ADDR
// for un in units do
67688: LD_ADDR_VAR 0 4
67692: PUSH
67693: LD_VAR 0 1
67697: PUSH
67698: FOR_IN
67699: IFFALSE 67774
// if GetClass ( un ) = class then
67701: LD_VAR 0 4
67705: PPUSH
67706: CALL_OW 257
67710: PUSH
67711: LD_VAR 0 2
67715: EQUAL
67716: IFFALSE 67743
// result := Insert ( result , 1 , un ) else
67718: LD_ADDR_VAR 0 3
67722: PUSH
67723: LD_VAR 0 3
67727: PPUSH
67728: LD_INT 1
67730: PPUSH
67731: LD_VAR 0 4
67735: PPUSH
67736: CALL_OW 2
67740: ST_TO_ADDR
67741: GO 67772
// result := Replace ( result , result + 1 , un ) ;
67743: LD_ADDR_VAR 0 3
67747: PUSH
67748: LD_VAR 0 3
67752: PPUSH
67753: LD_VAR 0 3
67757: PUSH
67758: LD_INT 1
67760: PLUS
67761: PPUSH
67762: LD_VAR 0 4
67766: PPUSH
67767: CALL_OW 1
67771: ST_TO_ADDR
67772: GO 67698
67774: POP
67775: POP
// end ;
67776: LD_VAR 0 3
67780: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67781: LD_INT 0
67783: PPUSH
67784: PPUSH
67785: PPUSH
67786: PPUSH
67787: PPUSH
67788: PPUSH
67789: PPUSH
// result := [ ] ;
67790: LD_ADDR_VAR 0 4
67794: PUSH
67795: EMPTY
67796: ST_TO_ADDR
// if x - r < 0 then
67797: LD_VAR 0 1
67801: PUSH
67802: LD_VAR 0 3
67806: MINUS
67807: PUSH
67808: LD_INT 0
67810: LESS
67811: IFFALSE 67823
// min_x := 0 else
67813: LD_ADDR_VAR 0 8
67817: PUSH
67818: LD_INT 0
67820: ST_TO_ADDR
67821: GO 67839
// min_x := x - r ;
67823: LD_ADDR_VAR 0 8
67827: PUSH
67828: LD_VAR 0 1
67832: PUSH
67833: LD_VAR 0 3
67837: MINUS
67838: ST_TO_ADDR
// if y - r < 0 then
67839: LD_VAR 0 2
67843: PUSH
67844: LD_VAR 0 3
67848: MINUS
67849: PUSH
67850: LD_INT 0
67852: LESS
67853: IFFALSE 67865
// min_y := 0 else
67855: LD_ADDR_VAR 0 7
67859: PUSH
67860: LD_INT 0
67862: ST_TO_ADDR
67863: GO 67881
// min_y := y - r ;
67865: LD_ADDR_VAR 0 7
67869: PUSH
67870: LD_VAR 0 2
67874: PUSH
67875: LD_VAR 0 3
67879: MINUS
67880: ST_TO_ADDR
// max_x := x + r ;
67881: LD_ADDR_VAR 0 9
67885: PUSH
67886: LD_VAR 0 1
67890: PUSH
67891: LD_VAR 0 3
67895: PLUS
67896: ST_TO_ADDR
// max_y := y + r ;
67897: LD_ADDR_VAR 0 10
67901: PUSH
67902: LD_VAR 0 2
67906: PUSH
67907: LD_VAR 0 3
67911: PLUS
67912: ST_TO_ADDR
// for _x = min_x to max_x do
67913: LD_ADDR_VAR 0 5
67917: PUSH
67918: DOUBLE
67919: LD_VAR 0 8
67923: DEC
67924: ST_TO_ADDR
67925: LD_VAR 0 9
67929: PUSH
67930: FOR_TO
67931: IFFALSE 68032
// for _y = min_y to max_y do
67933: LD_ADDR_VAR 0 6
67937: PUSH
67938: DOUBLE
67939: LD_VAR 0 7
67943: DEC
67944: ST_TO_ADDR
67945: LD_VAR 0 10
67949: PUSH
67950: FOR_TO
67951: IFFALSE 68028
// begin if not ValidHex ( _x , _y ) then
67953: LD_VAR 0 5
67957: PPUSH
67958: LD_VAR 0 6
67962: PPUSH
67963: CALL_OW 488
67967: NOT
67968: IFFALSE 67972
// continue ;
67970: GO 67950
// if GetResourceTypeXY ( _x , _y ) then
67972: LD_VAR 0 5
67976: PPUSH
67977: LD_VAR 0 6
67981: PPUSH
67982: CALL_OW 283
67986: IFFALSE 68026
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67988: LD_ADDR_VAR 0 4
67992: PUSH
67993: LD_VAR 0 4
67997: PPUSH
67998: LD_VAR 0 4
68002: PUSH
68003: LD_INT 1
68005: PLUS
68006: PPUSH
68007: LD_VAR 0 5
68011: PUSH
68012: LD_VAR 0 6
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PPUSH
68021: CALL_OW 1
68025: ST_TO_ADDR
// end ;
68026: GO 67950
68028: POP
68029: POP
68030: GO 67930
68032: POP
68033: POP
// end ;
68034: LD_VAR 0 4
68038: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68039: LD_INT 0
68041: PPUSH
68042: PPUSH
68043: PPUSH
68044: PPUSH
68045: PPUSH
68046: PPUSH
68047: PPUSH
68048: PPUSH
// if not units then
68049: LD_VAR 0 1
68053: NOT
68054: IFFALSE 68058
// exit ;
68056: GO 68582
// result := UnitFilter ( units , [ f_ok ] ) ;
68058: LD_ADDR_VAR 0 3
68062: PUSH
68063: LD_VAR 0 1
68067: PPUSH
68068: LD_INT 50
68070: PUSH
68071: EMPTY
68072: LIST
68073: PPUSH
68074: CALL_OW 72
68078: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68079: LD_ADDR_VAR 0 8
68083: PUSH
68084: LD_VAR 0 1
68088: PUSH
68089: LD_INT 1
68091: ARRAY
68092: PPUSH
68093: CALL_OW 255
68097: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68098: LD_ADDR_VAR 0 10
68102: PUSH
68103: LD_INT 29
68105: PUSH
68106: LD_INT 91
68108: PUSH
68109: LD_INT 49
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: LIST
68116: ST_TO_ADDR
// if not result then
68117: LD_VAR 0 3
68121: NOT
68122: IFFALSE 68126
// exit ;
68124: GO 68582
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68126: LD_ADDR_VAR 0 5
68130: PUSH
68131: LD_INT 81
68133: PUSH
68134: LD_VAR 0 8
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PPUSH
68143: CALL_OW 69
68147: ST_TO_ADDR
// for i in result do
68148: LD_ADDR_VAR 0 4
68152: PUSH
68153: LD_VAR 0 3
68157: PUSH
68158: FOR_IN
68159: IFFALSE 68580
// begin tag := GetTag ( i ) + 1 ;
68161: LD_ADDR_VAR 0 9
68165: PUSH
68166: LD_VAR 0 4
68170: PPUSH
68171: CALL_OW 110
68175: PUSH
68176: LD_INT 1
68178: PLUS
68179: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68180: LD_ADDR_VAR 0 7
68184: PUSH
68185: LD_VAR 0 4
68189: PPUSH
68190: CALL_OW 250
68194: PPUSH
68195: LD_VAR 0 4
68199: PPUSH
68200: CALL_OW 251
68204: PPUSH
68205: LD_INT 6
68207: PPUSH
68208: CALL 67781 0 3
68212: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68213: LD_VAR 0 4
68217: PPUSH
68218: CALL_OW 247
68222: PUSH
68223: LD_INT 2
68225: EQUAL
68226: PUSH
68227: LD_VAR 0 7
68231: AND
68232: PUSH
68233: LD_VAR 0 4
68237: PPUSH
68238: CALL_OW 264
68242: PUSH
68243: LD_VAR 0 10
68247: IN
68248: NOT
68249: AND
68250: IFFALSE 68289
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68252: LD_VAR 0 4
68256: PPUSH
68257: LD_VAR 0 7
68261: PUSH
68262: LD_INT 1
68264: ARRAY
68265: PUSH
68266: LD_INT 1
68268: ARRAY
68269: PPUSH
68270: LD_VAR 0 7
68274: PUSH
68275: LD_INT 1
68277: ARRAY
68278: PUSH
68279: LD_INT 2
68281: ARRAY
68282: PPUSH
68283: CALL_OW 116
68287: GO 68578
// if path > tag then
68289: LD_VAR 0 2
68293: PUSH
68294: LD_VAR 0 9
68298: GREATER
68299: IFFALSE 68507
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68301: LD_ADDR_VAR 0 6
68305: PUSH
68306: LD_VAR 0 5
68310: PPUSH
68311: LD_INT 91
68313: PUSH
68314: LD_VAR 0 4
68318: PUSH
68319: LD_INT 8
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: LIST
68326: PPUSH
68327: CALL_OW 72
68331: ST_TO_ADDR
// if nearEnemy then
68332: LD_VAR 0 6
68336: IFFALSE 68405
// begin if GetWeapon ( i ) = ru_time_lapser then
68338: LD_VAR 0 4
68342: PPUSH
68343: CALL_OW 264
68347: PUSH
68348: LD_INT 49
68350: EQUAL
68351: IFFALSE 68379
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68353: LD_VAR 0 4
68357: PPUSH
68358: LD_VAR 0 6
68362: PPUSH
68363: LD_VAR 0 4
68367: PPUSH
68368: CALL_OW 74
68372: PPUSH
68373: CALL_OW 112
68377: GO 68403
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68379: LD_VAR 0 4
68383: PPUSH
68384: LD_VAR 0 6
68388: PPUSH
68389: LD_VAR 0 4
68393: PPUSH
68394: CALL_OW 74
68398: PPUSH
68399: CALL 69507 0 2
// end else
68403: GO 68505
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68405: LD_VAR 0 4
68409: PPUSH
68410: LD_VAR 0 2
68414: PUSH
68415: LD_VAR 0 9
68419: ARRAY
68420: PUSH
68421: LD_INT 1
68423: ARRAY
68424: PPUSH
68425: LD_VAR 0 2
68429: PUSH
68430: LD_VAR 0 9
68434: ARRAY
68435: PUSH
68436: LD_INT 2
68438: ARRAY
68439: PPUSH
68440: CALL_OW 297
68444: PUSH
68445: LD_INT 6
68447: GREATER
68448: IFFALSE 68491
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68450: LD_VAR 0 4
68454: PPUSH
68455: LD_VAR 0 2
68459: PUSH
68460: LD_VAR 0 9
68464: ARRAY
68465: PUSH
68466: LD_INT 1
68468: ARRAY
68469: PPUSH
68470: LD_VAR 0 2
68474: PUSH
68475: LD_VAR 0 9
68479: ARRAY
68480: PUSH
68481: LD_INT 2
68483: ARRAY
68484: PPUSH
68485: CALL_OW 114
68489: GO 68505
// SetTag ( i , tag ) ;
68491: LD_VAR 0 4
68495: PPUSH
68496: LD_VAR 0 9
68500: PPUSH
68501: CALL_OW 109
// end else
68505: GO 68578
// if enemy then
68507: LD_VAR 0 5
68511: IFFALSE 68578
// begin if GetWeapon ( i ) = ru_time_lapser then
68513: LD_VAR 0 4
68517: PPUSH
68518: CALL_OW 264
68522: PUSH
68523: LD_INT 49
68525: EQUAL
68526: IFFALSE 68554
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68528: LD_VAR 0 4
68532: PPUSH
68533: LD_VAR 0 5
68537: PPUSH
68538: LD_VAR 0 4
68542: PPUSH
68543: CALL_OW 74
68547: PPUSH
68548: CALL_OW 112
68552: GO 68578
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68554: LD_VAR 0 4
68558: PPUSH
68559: LD_VAR 0 5
68563: PPUSH
68564: LD_VAR 0 4
68568: PPUSH
68569: CALL_OW 74
68573: PPUSH
68574: CALL 69507 0 2
// end ; end ;
68578: GO 68158
68580: POP
68581: POP
// end ;
68582: LD_VAR 0 3
68586: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68587: LD_INT 0
68589: PPUSH
68590: PPUSH
68591: PPUSH
// if not unit or IsInUnit ( unit ) then
68592: LD_VAR 0 1
68596: NOT
68597: PUSH
68598: LD_VAR 0 1
68602: PPUSH
68603: CALL_OW 310
68607: OR
68608: IFFALSE 68612
// exit ;
68610: GO 68703
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68612: LD_ADDR_VAR 0 4
68616: PUSH
68617: LD_VAR 0 1
68621: PPUSH
68622: CALL_OW 250
68626: PPUSH
68627: LD_VAR 0 2
68631: PPUSH
68632: LD_INT 1
68634: PPUSH
68635: CALL_OW 272
68639: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68640: LD_ADDR_VAR 0 5
68644: PUSH
68645: LD_VAR 0 1
68649: PPUSH
68650: CALL_OW 251
68654: PPUSH
68655: LD_VAR 0 2
68659: PPUSH
68660: LD_INT 1
68662: PPUSH
68663: CALL_OW 273
68667: ST_TO_ADDR
// if ValidHex ( x , y ) then
68668: LD_VAR 0 4
68672: PPUSH
68673: LD_VAR 0 5
68677: PPUSH
68678: CALL_OW 488
68682: IFFALSE 68703
// ComTurnXY ( unit , x , y ) ;
68684: LD_VAR 0 1
68688: PPUSH
68689: LD_VAR 0 4
68693: PPUSH
68694: LD_VAR 0 5
68698: PPUSH
68699: CALL_OW 118
// end ;
68703: LD_VAR 0 3
68707: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68708: LD_INT 0
68710: PPUSH
68711: PPUSH
// result := false ;
68712: LD_ADDR_VAR 0 3
68716: PUSH
68717: LD_INT 0
68719: ST_TO_ADDR
// if not units then
68720: LD_VAR 0 2
68724: NOT
68725: IFFALSE 68729
// exit ;
68727: GO 68774
// for i in units do
68729: LD_ADDR_VAR 0 4
68733: PUSH
68734: LD_VAR 0 2
68738: PUSH
68739: FOR_IN
68740: IFFALSE 68772
// if See ( side , i ) then
68742: LD_VAR 0 1
68746: PPUSH
68747: LD_VAR 0 4
68751: PPUSH
68752: CALL_OW 292
68756: IFFALSE 68770
// begin result := true ;
68758: LD_ADDR_VAR 0 3
68762: PUSH
68763: LD_INT 1
68765: ST_TO_ADDR
// exit ;
68766: POP
68767: POP
68768: GO 68774
// end ;
68770: GO 68739
68772: POP
68773: POP
// end ;
68774: LD_VAR 0 3
68778: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68779: LD_INT 0
68781: PPUSH
68782: PPUSH
68783: PPUSH
68784: PPUSH
// if not unit or not points then
68785: LD_VAR 0 1
68789: NOT
68790: PUSH
68791: LD_VAR 0 2
68795: NOT
68796: OR
68797: IFFALSE 68801
// exit ;
68799: GO 68891
// dist := 99999 ;
68801: LD_ADDR_VAR 0 5
68805: PUSH
68806: LD_INT 99999
68808: ST_TO_ADDR
// for i in points do
68809: LD_ADDR_VAR 0 4
68813: PUSH
68814: LD_VAR 0 2
68818: PUSH
68819: FOR_IN
68820: IFFALSE 68889
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68822: LD_ADDR_VAR 0 6
68826: PUSH
68827: LD_VAR 0 1
68831: PPUSH
68832: LD_VAR 0 4
68836: PUSH
68837: LD_INT 1
68839: ARRAY
68840: PPUSH
68841: LD_VAR 0 4
68845: PUSH
68846: LD_INT 2
68848: ARRAY
68849: PPUSH
68850: CALL_OW 297
68854: ST_TO_ADDR
// if tmpDist < dist then
68855: LD_VAR 0 6
68859: PUSH
68860: LD_VAR 0 5
68864: LESS
68865: IFFALSE 68887
// begin result := i ;
68867: LD_ADDR_VAR 0 3
68871: PUSH
68872: LD_VAR 0 4
68876: ST_TO_ADDR
// dist := tmpDist ;
68877: LD_ADDR_VAR 0 5
68881: PUSH
68882: LD_VAR 0 6
68886: ST_TO_ADDR
// end ; end ;
68887: GO 68819
68889: POP
68890: POP
// end ;
68891: LD_VAR 0 3
68895: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68896: LD_INT 0
68898: PPUSH
// uc_side := side ;
68899: LD_ADDR_OWVAR 20
68903: PUSH
68904: LD_VAR 0 1
68908: ST_TO_ADDR
// uc_nation := 3 ;
68909: LD_ADDR_OWVAR 21
68913: PUSH
68914: LD_INT 3
68916: ST_TO_ADDR
// vc_chassis := 25 ;
68917: LD_ADDR_OWVAR 37
68921: PUSH
68922: LD_INT 25
68924: ST_TO_ADDR
// vc_engine := engine_siberite ;
68925: LD_ADDR_OWVAR 39
68929: PUSH
68930: LD_INT 3
68932: ST_TO_ADDR
// vc_control := control_computer ;
68933: LD_ADDR_OWVAR 38
68937: PUSH
68938: LD_INT 3
68940: ST_TO_ADDR
// vc_weapon := 59 ;
68941: LD_ADDR_OWVAR 40
68945: PUSH
68946: LD_INT 59
68948: ST_TO_ADDR
// result := CreateVehicle ;
68949: LD_ADDR_VAR 0 5
68953: PUSH
68954: CALL_OW 45
68958: ST_TO_ADDR
// SetDir ( result , d ) ;
68959: LD_VAR 0 5
68963: PPUSH
68964: LD_VAR 0 4
68968: PPUSH
68969: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68973: LD_VAR 0 5
68977: PPUSH
68978: LD_VAR 0 2
68982: PPUSH
68983: LD_VAR 0 3
68987: PPUSH
68988: LD_INT 0
68990: PPUSH
68991: CALL_OW 48
// end ;
68995: LD_VAR 0 5
68999: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69000: LD_INT 0
69002: PPUSH
69003: PPUSH
69004: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69005: LD_ADDR_VAR 0 2
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69028: LD_VAR 0 1
69032: NOT
69033: PUSH
69034: LD_VAR 0 1
69038: PPUSH
69039: CALL_OW 264
69043: PUSH
69044: LD_INT 12
69046: PUSH
69047: LD_INT 51
69049: PUSH
69050: LD_INT 32
69052: PUSH
69053: LD_INT 89
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: IN
69062: NOT
69063: OR
69064: IFFALSE 69068
// exit ;
69066: GO 69166
// for i := 1 to 3 do
69068: LD_ADDR_VAR 0 3
69072: PUSH
69073: DOUBLE
69074: LD_INT 1
69076: DEC
69077: ST_TO_ADDR
69078: LD_INT 3
69080: PUSH
69081: FOR_TO
69082: IFFALSE 69164
// begin tmp := GetCargo ( cargo , i ) ;
69084: LD_ADDR_VAR 0 4
69088: PUSH
69089: LD_VAR 0 1
69093: PPUSH
69094: LD_VAR 0 3
69098: PPUSH
69099: CALL_OW 289
69103: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69104: LD_ADDR_VAR 0 2
69108: PUSH
69109: LD_VAR 0 2
69113: PPUSH
69114: LD_VAR 0 3
69118: PPUSH
69119: LD_VAR 0 4
69123: PPUSH
69124: CALL_OW 1
69128: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69129: LD_ADDR_VAR 0 2
69133: PUSH
69134: LD_VAR 0 2
69138: PPUSH
69139: LD_INT 4
69141: PPUSH
69142: LD_VAR 0 2
69146: PUSH
69147: LD_INT 4
69149: ARRAY
69150: PUSH
69151: LD_VAR 0 4
69155: PLUS
69156: PPUSH
69157: CALL_OW 1
69161: ST_TO_ADDR
// end ;
69162: GO 69081
69164: POP
69165: POP
// end ;
69166: LD_VAR 0 2
69170: RET
// export function Length ( array ) ; begin
69171: LD_INT 0
69173: PPUSH
// result := array + 0 ;
69174: LD_ADDR_VAR 0 2
69178: PUSH
69179: LD_VAR 0 1
69183: PUSH
69184: LD_INT 0
69186: PLUS
69187: ST_TO_ADDR
// end ;
69188: LD_VAR 0 2
69192: RET
// export function PrepareArray ( array ) ; begin
69193: LD_INT 0
69195: PPUSH
// result := array diff 0 ;
69196: LD_ADDR_VAR 0 2
69200: PUSH
69201: LD_VAR 0 1
69205: PUSH
69206: LD_INT 0
69208: DIFF
69209: ST_TO_ADDR
// if not result [ 1 ] then
69210: LD_VAR 0 2
69214: PUSH
69215: LD_INT 1
69217: ARRAY
69218: NOT
69219: IFFALSE 69239
// result := Delete ( result , 1 ) ;
69221: LD_ADDR_VAR 0 2
69225: PUSH
69226: LD_VAR 0 2
69230: PPUSH
69231: LD_INT 1
69233: PPUSH
69234: CALL_OW 3
69238: ST_TO_ADDR
// end ;
69239: LD_VAR 0 2
69243: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69244: LD_INT 0
69246: PPUSH
69247: PPUSH
69248: PPUSH
69249: PPUSH
// sibRocketRange := 25 ;
69250: LD_ADDR_VAR 0 6
69254: PUSH
69255: LD_INT 25
69257: ST_TO_ADDR
// result := false ;
69258: LD_ADDR_VAR 0 4
69262: PUSH
69263: LD_INT 0
69265: ST_TO_ADDR
// for i := 0 to 5 do
69266: LD_ADDR_VAR 0 5
69270: PUSH
69271: DOUBLE
69272: LD_INT 0
69274: DEC
69275: ST_TO_ADDR
69276: LD_INT 5
69278: PUSH
69279: FOR_TO
69280: IFFALSE 69347
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69282: LD_VAR 0 1
69286: PPUSH
69287: LD_VAR 0 5
69291: PPUSH
69292: LD_VAR 0 6
69296: PPUSH
69297: CALL_OW 272
69301: PPUSH
69302: LD_VAR 0 2
69306: PPUSH
69307: LD_VAR 0 5
69311: PPUSH
69312: LD_VAR 0 6
69316: PPUSH
69317: CALL_OW 273
69321: PPUSH
69322: LD_VAR 0 3
69326: PPUSH
69327: CALL_OW 309
69331: IFFALSE 69345
// begin result := true ;
69333: LD_ADDR_VAR 0 4
69337: PUSH
69338: LD_INT 1
69340: ST_TO_ADDR
// exit ;
69341: POP
69342: POP
69343: GO 69349
// end ;
69345: GO 69279
69347: POP
69348: POP
// end ;
69349: LD_VAR 0 4
69353: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69354: LD_INT 0
69356: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69357: LD_VAR 0 1
69361: PPUSH
69362: LD_VAR 0 2
69366: PPUSH
69367: LD_INT 0
69369: PPUSH
69370: LD_INT 0
69372: PPUSH
69373: LD_INT 1
69375: PPUSH
69376: LD_INT 0
69378: PPUSH
69379: CALL_OW 587
// end ;
69383: LD_VAR 0 3
69387: RET
// export function CenterOnNow ( unit ) ; begin
69388: LD_INT 0
69390: PPUSH
// result := IsInUnit ( unit ) ;
69391: LD_ADDR_VAR 0 2
69395: PUSH
69396: LD_VAR 0 1
69400: PPUSH
69401: CALL_OW 310
69405: ST_TO_ADDR
// if not result then
69406: LD_VAR 0 2
69410: NOT
69411: IFFALSE 69423
// result := unit ;
69413: LD_ADDR_VAR 0 2
69417: PUSH
69418: LD_VAR 0 1
69422: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69423: LD_VAR 0 1
69427: PPUSH
69428: CALL_OW 87
// end ;
69432: LD_VAR 0 2
69436: RET
// export function ComMoveHex ( unit , hex ) ; begin
69437: LD_INT 0
69439: PPUSH
// if not hex then
69440: LD_VAR 0 2
69444: NOT
69445: IFFALSE 69449
// exit ;
69447: GO 69502
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69449: LD_VAR 0 2
69453: PUSH
69454: LD_INT 1
69456: ARRAY
69457: PPUSH
69458: LD_VAR 0 2
69462: PUSH
69463: LD_INT 2
69465: ARRAY
69466: PPUSH
69467: CALL_OW 428
69471: IFFALSE 69475
// exit ;
69473: GO 69502
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69475: LD_VAR 0 1
69479: PPUSH
69480: LD_VAR 0 2
69484: PUSH
69485: LD_INT 1
69487: ARRAY
69488: PPUSH
69489: LD_VAR 0 2
69493: PUSH
69494: LD_INT 2
69496: ARRAY
69497: PPUSH
69498: CALL_OW 111
// end ;
69502: LD_VAR 0 3
69506: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69507: LD_INT 0
69509: PPUSH
69510: PPUSH
69511: PPUSH
// if not unit or not enemy then
69512: LD_VAR 0 1
69516: NOT
69517: PUSH
69518: LD_VAR 0 2
69522: NOT
69523: OR
69524: IFFALSE 69528
// exit ;
69526: GO 69652
// x := GetX ( enemy ) ;
69528: LD_ADDR_VAR 0 4
69532: PUSH
69533: LD_VAR 0 2
69537: PPUSH
69538: CALL_OW 250
69542: ST_TO_ADDR
// y := GetY ( enemy ) ;
69543: LD_ADDR_VAR 0 5
69547: PUSH
69548: LD_VAR 0 2
69552: PPUSH
69553: CALL_OW 251
69557: ST_TO_ADDR
// if ValidHex ( x , y ) then
69558: LD_VAR 0 4
69562: PPUSH
69563: LD_VAR 0 5
69567: PPUSH
69568: CALL_OW 488
69572: IFFALSE 69652
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
69574: LD_VAR 0 2
69578: PPUSH
69579: CALL_OW 247
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: LD_INT 2
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: IN
69594: PUSH
69595: LD_VAR 0 1
69599: PPUSH
69600: CALL_OW 255
69604: PPUSH
69605: LD_VAR 0 2
69609: PPUSH
69610: CALL_OW 292
69614: AND
69615: IFFALSE 69633
// ComAttackUnit ( unit , enemy ) else
69617: LD_VAR 0 1
69621: PPUSH
69622: LD_VAR 0 2
69626: PPUSH
69627: CALL_OW 115
69631: GO 69652
// ComAgressiveMove ( unit , x , y ) ;
69633: LD_VAR 0 1
69637: PPUSH
69638: LD_VAR 0 4
69642: PPUSH
69643: LD_VAR 0 5
69647: PPUSH
69648: CALL_OW 114
// end ;
69652: LD_VAR 0 3
69656: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69657: LD_INT 0
69659: PPUSH
69660: PPUSH
69661: PPUSH
// list := AreaToList ( area , 0 ) ;
69662: LD_ADDR_VAR 0 5
69666: PUSH
69667: LD_VAR 0 1
69671: PPUSH
69672: LD_INT 0
69674: PPUSH
69675: CALL_OW 517
69679: ST_TO_ADDR
// if not list then
69680: LD_VAR 0 5
69684: NOT
69685: IFFALSE 69689
// exit ;
69687: GO 69819
// if all then
69689: LD_VAR 0 2
69693: IFFALSE 69781
// begin for i := 1 to list [ 1 ] do
69695: LD_ADDR_VAR 0 4
69699: PUSH
69700: DOUBLE
69701: LD_INT 1
69703: DEC
69704: ST_TO_ADDR
69705: LD_VAR 0 5
69709: PUSH
69710: LD_INT 1
69712: ARRAY
69713: PUSH
69714: FOR_TO
69715: IFFALSE 69777
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69717: LD_ADDR_VAR 0 3
69721: PUSH
69722: LD_VAR 0 3
69726: PPUSH
69727: LD_VAR 0 3
69731: PUSH
69732: LD_INT 1
69734: PLUS
69735: PPUSH
69736: LD_VAR 0 5
69740: PUSH
69741: LD_INT 1
69743: ARRAY
69744: PUSH
69745: LD_VAR 0 4
69749: ARRAY
69750: PUSH
69751: LD_VAR 0 5
69755: PUSH
69756: LD_INT 2
69758: ARRAY
69759: PUSH
69760: LD_VAR 0 4
69764: ARRAY
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PPUSH
69770: CALL_OW 1
69774: ST_TO_ADDR
69775: GO 69714
69777: POP
69778: POP
// exit ;
69779: GO 69819
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69781: LD_ADDR_VAR 0 3
69785: PUSH
69786: LD_VAR 0 5
69790: PUSH
69791: LD_INT 1
69793: ARRAY
69794: PUSH
69795: LD_INT 1
69797: ARRAY
69798: PUSH
69799: LD_VAR 0 5
69803: PUSH
69804: LD_INT 2
69806: ARRAY
69807: PUSH
69808: LD_INT 1
69810: ARRAY
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: EMPTY
69817: LIST
69818: ST_TO_ADDR
// end ;
69819: LD_VAR 0 3
69823: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69824: LD_INT 0
69826: PPUSH
69827: PPUSH
// list := AreaToList ( area , 0 ) ;
69828: LD_ADDR_VAR 0 4
69832: PUSH
69833: LD_VAR 0 1
69837: PPUSH
69838: LD_INT 0
69840: PPUSH
69841: CALL_OW 517
69845: ST_TO_ADDR
// if not list then
69846: LD_VAR 0 4
69850: NOT
69851: IFFALSE 69855
// exit ;
69853: GO 69896
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69855: LD_ADDR_VAR 0 3
69859: PUSH
69860: LD_VAR 0 4
69864: PUSH
69865: LD_INT 1
69867: ARRAY
69868: PUSH
69869: LD_INT 1
69871: ARRAY
69872: PUSH
69873: LD_VAR 0 4
69877: PUSH
69878: LD_INT 2
69880: ARRAY
69881: PUSH
69882: LD_INT 1
69884: ARRAY
69885: PUSH
69886: LD_VAR 0 2
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: LIST
69895: ST_TO_ADDR
// end ;
69896: LD_VAR 0 3
69900: RET
// export function First ( array ) ; begin
69901: LD_INT 0
69903: PPUSH
// if not array then
69904: LD_VAR 0 1
69908: NOT
69909: IFFALSE 69913
// exit ;
69911: GO 69927
// result := array [ 1 ] ;
69913: LD_ADDR_VAR 0 2
69917: PUSH
69918: LD_VAR 0 1
69922: PUSH
69923: LD_INT 1
69925: ARRAY
69926: ST_TO_ADDR
// end ;
69927: LD_VAR 0 2
69931: RET
// export function Last ( array ) ; begin
69932: LD_INT 0
69934: PPUSH
// if not array then
69935: LD_VAR 0 1
69939: NOT
69940: IFFALSE 69944
// exit ;
69942: GO 69960
// result := array [ array ] ;
69944: LD_ADDR_VAR 0 2
69948: PUSH
69949: LD_VAR 0 1
69953: PUSH
69954: LD_VAR 0 1
69958: ARRAY
69959: ST_TO_ADDR
// end ;
69960: LD_VAR 0 2
69964: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69965: LD_INT 0
69967: PPUSH
69968: PPUSH
// result := [ ] ;
69969: LD_ADDR_VAR 0 5
69973: PUSH
69974: EMPTY
69975: ST_TO_ADDR
// if not array then
69976: LD_VAR 0 1
69980: NOT
69981: IFFALSE 69985
// exit ;
69983: GO 70097
// for i := 1 to array do
69985: LD_ADDR_VAR 0 6
69989: PUSH
69990: DOUBLE
69991: LD_INT 1
69993: DEC
69994: ST_TO_ADDR
69995: LD_VAR 0 1
69999: PUSH
70000: FOR_TO
70001: IFFALSE 70095
// if array [ i ] [ index ] = value then
70003: LD_VAR 0 1
70007: PUSH
70008: LD_VAR 0 6
70012: ARRAY
70013: PUSH
70014: LD_VAR 0 2
70018: ARRAY
70019: PUSH
70020: LD_VAR 0 3
70024: EQUAL
70025: IFFALSE 70093
// begin if indexColumn then
70027: LD_VAR 0 4
70031: IFFALSE 70067
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70033: LD_ADDR_VAR 0 5
70037: PUSH
70038: LD_VAR 0 5
70042: PPUSH
70043: LD_VAR 0 1
70047: PUSH
70048: LD_VAR 0 6
70052: ARRAY
70053: PUSH
70054: LD_VAR 0 4
70058: ARRAY
70059: PPUSH
70060: CALL 65435 0 2
70064: ST_TO_ADDR
70065: GO 70093
// result := Join ( result , array [ i ] ) ;
70067: LD_ADDR_VAR 0 5
70071: PUSH
70072: LD_VAR 0 5
70076: PPUSH
70077: LD_VAR 0 1
70081: PUSH
70082: LD_VAR 0 6
70086: ARRAY
70087: PPUSH
70088: CALL 65435 0 2
70092: ST_TO_ADDR
// end ;
70093: GO 70000
70095: POP
70096: POP
// end ;
70097: LD_VAR 0 5
70101: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70102: LD_INT 0
70104: PPUSH
70105: PPUSH
70106: PPUSH
// if btype = b_depot then
70107: LD_VAR 0 2
70111: PUSH
70112: LD_INT 0
70114: EQUAL
70115: IFFALSE 70127
// begin result := true ;
70117: LD_ADDR_VAR 0 3
70121: PUSH
70122: LD_INT 1
70124: ST_TO_ADDR
// exit ;
70125: GO 70243
// end ; pom := GetBase ( depot ) ;
70127: LD_ADDR_VAR 0 4
70131: PUSH
70132: LD_VAR 0 1
70136: PPUSH
70137: CALL_OW 274
70141: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70142: LD_ADDR_VAR 0 5
70146: PUSH
70147: LD_VAR 0 2
70151: PPUSH
70152: LD_VAR 0 1
70156: PPUSH
70157: CALL_OW 248
70161: PPUSH
70162: CALL_OW 450
70166: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70167: LD_ADDR_VAR 0 3
70171: PUSH
70172: LD_VAR 0 4
70176: PPUSH
70177: LD_INT 1
70179: PPUSH
70180: CALL_OW 275
70184: PUSH
70185: LD_VAR 0 5
70189: PUSH
70190: LD_INT 1
70192: ARRAY
70193: GREATEREQUAL
70194: PUSH
70195: LD_VAR 0 4
70199: PPUSH
70200: LD_INT 2
70202: PPUSH
70203: CALL_OW 275
70207: PUSH
70208: LD_VAR 0 5
70212: PUSH
70213: LD_INT 2
70215: ARRAY
70216: GREATEREQUAL
70217: AND
70218: PUSH
70219: LD_VAR 0 4
70223: PPUSH
70224: LD_INT 3
70226: PPUSH
70227: CALL_OW 275
70231: PUSH
70232: LD_VAR 0 5
70236: PUSH
70237: LD_INT 3
70239: ARRAY
70240: GREATEREQUAL
70241: AND
70242: ST_TO_ADDR
// end ;
70243: LD_VAR 0 3
70247: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70248: LD_INT 0
70250: PPUSH
// if not vehicles or not parkingPoint then
70251: LD_VAR 0 1
70255: NOT
70256: PUSH
70257: LD_VAR 0 2
70261: NOT
70262: OR
70263: IFFALSE 70267
// exit ;
70265: GO 70365
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70267: LD_ADDR_VAR 0 1
70271: PUSH
70272: LD_VAR 0 1
70276: PPUSH
70277: LD_INT 50
70279: PUSH
70280: EMPTY
70281: LIST
70282: PUSH
70283: LD_INT 3
70285: PUSH
70286: LD_INT 92
70288: PUSH
70289: LD_VAR 0 2
70293: PUSH
70294: LD_INT 1
70296: ARRAY
70297: PUSH
70298: LD_VAR 0 2
70302: PUSH
70303: LD_INT 2
70305: ARRAY
70306: PUSH
70307: LD_INT 8
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PPUSH
70324: CALL_OW 72
70328: ST_TO_ADDR
// if not vehicles then
70329: LD_VAR 0 1
70333: NOT
70334: IFFALSE 70338
// exit ;
70336: GO 70365
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70338: LD_VAR 0 1
70342: PPUSH
70343: LD_VAR 0 2
70347: PUSH
70348: LD_INT 1
70350: ARRAY
70351: PPUSH
70352: LD_VAR 0 2
70356: PUSH
70357: LD_INT 2
70359: ARRAY
70360: PPUSH
70361: CALL_OW 111
// end ; end_of_file
70365: LD_VAR 0 3
70369: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70370: LD_VAR 0 1
70374: PUSH
70375: LD_INT 200
70377: DOUBLE
70378: GREATEREQUAL
70379: IFFALSE 70387
70381: LD_INT 299
70383: DOUBLE
70384: LESSEQUAL
70385: IFTRUE 70389
70387: GO 70421
70389: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70390: LD_VAR 0 1
70394: PPUSH
70395: LD_VAR 0 2
70399: PPUSH
70400: LD_VAR 0 3
70404: PPUSH
70405: LD_VAR 0 4
70409: PPUSH
70410: LD_VAR 0 5
70414: PPUSH
70415: CALL 23226 0 5
70419: GO 70498
70421: LD_INT 300
70423: DOUBLE
70424: GREATEREQUAL
70425: IFFALSE 70433
70427: LD_INT 399
70429: DOUBLE
70430: LESSEQUAL
70431: IFTRUE 70435
70433: GO 70497
70435: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70436: LD_VAR 0 1
70440: PPUSH
70441: LD_VAR 0 2
70445: PPUSH
70446: LD_VAR 0 3
70450: PPUSH
70451: LD_VAR 0 4
70455: PPUSH
70456: LD_VAR 0 5
70460: PPUSH
70461: LD_VAR 0 6
70465: PPUSH
70466: LD_VAR 0 7
70470: PPUSH
70471: LD_VAR 0 8
70475: PPUSH
70476: LD_VAR 0 9
70480: PPUSH
70481: LD_VAR 0 10
70485: PPUSH
70486: LD_VAR 0 11
70490: PPUSH
70491: CALL 19551 0 11
70495: GO 70498
70497: POP
// end ;
70498: PPOPN 11
70500: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70501: LD_VAR 0 1
70505: PPUSH
70506: LD_VAR 0 2
70510: PPUSH
70511: LD_VAR 0 3
70515: PPUSH
70516: LD_VAR 0 4
70520: PPUSH
70521: LD_VAR 0 5
70525: PPUSH
70526: CALL 22962 0 5
// end ; end_of_file
70530: PPOPN 5
70532: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70533: LD_VAR 0 1
70537: PPUSH
70538: LD_VAR 0 2
70542: PPUSH
70543: LD_VAR 0 3
70547: PPUSH
70548: LD_VAR 0 4
70552: PPUSH
70553: LD_VAR 0 5
70557: PPUSH
70558: LD_VAR 0 6
70562: PPUSH
70563: CALL 7203 0 6
// end ;
70567: PPOPN 6
70569: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70570: LD_INT 0
70572: PPUSH
// begin if not units then
70573: LD_VAR 0 1
70577: NOT
70578: IFFALSE 70582
// exit ;
70580: GO 70582
// end ;
70582: PPOPN 7
70584: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70585: CALL 7107 0 0
// end ;
70589: PPOPN 1
70591: END
