// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 915 0 0
// InitRussian ;
  19: CALL 1154 0 0
// DebugMode ;
  23: CALL 152 0 0
// Action ;
  27: CALL 2710 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// end ;
 147: LD_VAR 0 1
 151: RET
// function DebugMode ; var i ; begin
 152: LD_INT 0
 154: PPUSH
 155: PPUSH
// if not debug then
 156: LD_EXP 1
 160: NOT
 161: IFFALSE 165
// exit ;
 163: GO 184
// Difficulty := 3 ;
 165: LD_ADDR_OWVAR 67
 169: PUSH
 170: LD_INT 3
 172: ST_TO_ADDR
// TurnFogOff ( ) ;
 173: CALL_OW 537
// FogOff ( 1 ) ;
 177: LD_INT 1
 179: PPUSH
 180: CALL_OW 344
// end ; end_of_file
 184: LD_VAR 0 1
 188: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 189: LD_INT 0
 191: PPUSH
 192: PPUSH
// if exist_mode then
 193: LD_VAR 0 2
 197: IFFALSE 216
// unit := CreateCharacter ( ident ) else
 199: LD_ADDR_VAR 0 4
 203: PUSH
 204: LD_VAR 0 1
 208: PPUSH
 209: CALL_OW 34
 213: ST_TO_ADDR
 214: GO 231
// unit := NewCharacter ( ident ) ;
 216: LD_ADDR_VAR 0 4
 220: PUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: CALL_OW 25
 230: ST_TO_ADDR
// result := unit ;
 231: LD_ADDR_VAR 0 3
 235: PUSH
 236: LD_VAR 0 4
 240: ST_TO_ADDR
// end ;
 241: LD_VAR 0 3
 245: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
 250: PPUSH
// uc_side := GetSide ( b ) ;
 251: LD_ADDR_OWVAR 20
 255: PUSH
 256: LD_VAR 0 2
 260: PPUSH
 261: CALL_OW 255
 265: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PPUSH
 276: CALL_OW 248
 280: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 281: LD_INT 0
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_VAR 0 1
 291: PPUSH
 292: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 296: LD_ADDR_VAR 0 5
 300: PUSH
 301: LD_VAR 0 2
 305: PPUSH
 306: CALL_OW 254
 310: PUSH
 311: LD_INT 3
 313: MINUS
 314: ST_TO_ADDR
// if dir < 0 then
 315: LD_VAR 0 5
 319: PUSH
 320: LD_INT 0
 322: LESS
 323: IFFALSE 339
// dir := 6 + dir ;
 325: LD_ADDR_VAR 0 5
 329: PUSH
 330: LD_INT 6
 332: PUSH
 333: LD_VAR 0 5
 337: PLUS
 338: ST_TO_ADDR
// un := CreateHuman ;
 339: LD_ADDR_VAR 0 4
 343: PUSH
 344: CALL_OW 44
 348: ST_TO_ADDR
// SetDir ( un , dir ) ;
 349: LD_VAR 0 4
 353: PPUSH
 354: LD_VAR 0 5
 358: PPUSH
 359: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 363: LD_VAR 0 4
 367: PPUSH
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 52
// end ;
 377: LD_VAR 0 3
 381: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 382: LD_INT 0
 384: PPUSH
// uc_side := side ;
 385: LD_ADDR_OWVAR 20
 389: PUSH
 390: LD_VAR 0 1
 394: ST_TO_ADDR
// uc_nation := nation ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_VAR 0 2
 404: ST_TO_ADDR
// vc_chassis := chassis ;
 405: LD_ADDR_OWVAR 37
 409: PUSH
 410: LD_VAR 0 3
 414: ST_TO_ADDR
// vc_engine := engine ;
 415: LD_ADDR_OWVAR 39
 419: PUSH
 420: LD_VAR 0 4
 424: ST_TO_ADDR
// vc_control := control ;
 425: LD_ADDR_OWVAR 38
 429: PUSH
 430: LD_VAR 0 5
 434: ST_TO_ADDR
// vc_weapon := weapon ;
 435: LD_ADDR_OWVAR 40
 439: PUSH
 440: LD_VAR 0 6
 444: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 445: LD_ADDR_OWVAR 41
 449: PUSH
 450: LD_VAR 0 7
 454: ST_TO_ADDR
// result := CreateVehicle ;
 455: LD_ADDR_VAR 0 8
 459: PUSH
 460: CALL_OW 45
 464: ST_TO_ADDR
// end ;
 465: LD_VAR 0 8
 469: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 470: LD_INT 0
 472: PPUSH
 473: PPUSH
// while ( active_road_patrol ) do
 474: LD_EXP 8
 478: IFFALSE 832
// begin Wait ( 0 0$01 ) ;
 480: LD_INT 35
 482: PPUSH
 483: CALL_OW 67
// if not unit then
 487: LD_VAR 0 1
 491: NOT
 492: IFFALSE 496
// exit ;
 494: GO 832
// if mode = road then
 496: LD_VAR 0 2
 500: PUSH
 501: LD_STRING road
 503: EQUAL
 504: IFFALSE 560
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 506: LD_VAR 0 1
 510: PPUSH
 511: CALL_OW 261
 515: PUSH
 516: LD_INT 50
 518: LESS
 519: PUSH
 520: LD_INT 1
 522: PPUSH
 523: LD_VAR 0 1
 527: PPUSH
 528: CALL_OW 292
 532: NOT
 533: AND
 534: PUSH
 535: LD_VAR 0 1
 539: PPUSH
 540: CALL_OW 314
 544: NOT
 545: AND
 546: IFFALSE 560
// SetFuel ( unit , 100 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: LD_INT 100
 555: PPUSH
 556: CALL_OW 240
// if mode = forest then
 560: LD_VAR 0 2
 564: PUSH
 565: LD_STRING forest
 567: EQUAL
 568: IFFALSE 648
// if GetLives ( unit ) < 600 then
 570: LD_VAR 0 1
 574: PPUSH
 575: CALL_OW 256
 579: PUSH
 580: LD_INT 600
 582: LESS
 583: IFFALSE 648
// begin ComMoveXY ( unit , 42 , 3 ) ;
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_INT 42
 592: PPUSH
 593: LD_INT 3
 595: PPUSH
 596: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 600: LD_VAR 0 1
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: CALL_OW 250
 614: PPUSH
 615: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 619: LD_VAR 0 1
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: CALL_OW 251
 633: PPUSH
 634: CALL_OW 232
// send_troops_to_forest := true ;
 638: LD_ADDR_EXP 14
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// break ;
 646: GO 832
// end ; if not HasTask ( unit ) then
 648: LD_VAR 0 1
 652: PPUSH
 653: CALL_OW 314
 657: NOT
 658: IFFALSE 830
// begin for i = 1 to coords do
 660: LD_ADDR_VAR 0 6
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_VAR 0 4
 674: PUSH
 675: FOR_TO
 676: IFFALSE 743
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 678: LD_VAR 0 1
 682: PPUSH
 683: LD_VAR 0 4
 687: PUSH
 688: LD_VAR 0 6
 692: ARRAY
 693: PPUSH
 694: LD_VAR 0 4
 698: PUSH
 699: LD_VAR 0 6
 703: PUSH
 704: LD_INT 1
 706: PLUS
 707: ARRAY
 708: PPUSH
 709: CALL_OW 174
// AddComWait ( unit , pause ) ;
 713: LD_VAR 0 1
 717: PPUSH
 718: LD_VAR 0 3
 722: PPUSH
 723: CALL_OW 202
// i := i + 1 ;
 727: LD_ADDR_VAR 0 6
 731: PUSH
 732: LD_VAR 0 6
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: ST_TO_ADDR
// end ;
 741: GO 675
 743: POP
 744: POP
// for i = coords downto 1 do
 745: LD_ADDR_VAR 0 6
 749: PUSH
 750: DOUBLE
 751: LD_VAR 0 4
 755: INC
 756: ST_TO_ADDR
 757: LD_INT 1
 759: PUSH
 760: FOR_DOWNTO
 761: IFFALSE 828
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 763: LD_VAR 0 1
 767: PPUSH
 768: LD_VAR 0 4
 772: PUSH
 773: LD_VAR 0 6
 777: PUSH
 778: LD_INT 1
 780: MINUS
 781: ARRAY
 782: PPUSH
 783: LD_VAR 0 4
 787: PUSH
 788: LD_VAR 0 6
 792: ARRAY
 793: PPUSH
 794: CALL_OW 174
// AddComWait ( unit , pause ) ;
 798: LD_VAR 0 1
 802: PPUSH
 803: LD_VAR 0 3
 807: PPUSH
 808: CALL_OW 202
// i := i - 1 ;
 812: LD_ADDR_VAR 0 6
 816: PUSH
 817: LD_VAR 0 6
 821: PUSH
 822: LD_INT 1
 824: MINUS
 825: ST_TO_ADDR
// end ;
 826: GO 760
 828: POP
 829: POP
// end ; end ;
 830: GO 474
// end ;
 832: LD_VAR 0 5
 836: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 837: LD_INT 0
 839: PPUSH
 840: PPUSH
// uc_nation := 1 ;
 841: LD_ADDR_OWVAR 21
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// uc_side := 0 ;
 849: LD_ADDR_OWVAR 20
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 857: LD_INT 0
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL_OW 380
// hc_name := speaker ;
 870: LD_ADDR_OWVAR 26
 874: PUSH
 875: LD_STRING speaker
 877: ST_TO_ADDR
// hc_gallery :=  ;
 878: LD_ADDR_OWVAR 33
 882: PUSH
 883: LD_STRING 
 885: ST_TO_ADDR
// speaker := CreateHuman ;
 886: LD_ADDR_VAR 0 3
 890: PUSH
 891: CALL_OW 44
 895: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 896: LD_VAR 0 3
 900: PPUSH
 901: LD_VAR 0 1
 905: PPUSH
 906: CALL_OW 88
// end ; end_of_file
 910: LD_VAR 0 2
 914: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 915: LD_INT 0
 917: PPUSH
// uc_nation := 1 ;
 918: LD_ADDR_OWVAR 21
 922: PUSH
 923: LD_INT 1
 925: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 926: LD_ADDR_EXP 15
 930: PUSH
 931: LD_STRING JMM
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: CALL 189 0 2
 941: ST_TO_ADDR
// uc_side := 4 ;
 942: LD_ADDR_OWVAR 20
 946: PUSH
 947: LD_INT 4
 949: ST_TO_ADDR
// hc_gallery := us ;
 950: LD_ADDR_OWVAR 33
 954: PUSH
 955: LD_STRING us
 957: ST_TO_ADDR
// hc_face_number := 7 ;
 958: LD_ADDR_OWVAR 34
 962: PUSH
 963: LD_INT 7
 965: ST_TO_ADDR
// hc_sex := sex_male ;
 966: LD_ADDR_OWVAR 27
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// hc_name := . ;
 974: LD_ADDR_OWVAR 26
 978: PUSH
 979: LD_STRING .
 981: ST_TO_ADDR
// hc_class := 1 ;
 982: LD_ADDR_OWVAR 28
 986: PUSH
 987: LD_INT 1
 989: ST_TO_ADDR
// Powell := CreateHuman ;
 990: LD_ADDR_EXP 18
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// hc_name := . ;
1000: LD_ADDR_OWVAR 26
1004: PUSH
1005: LD_STRING .
1007: ST_TO_ADDR
// hc_gallery := ru ;
1008: LD_ADDR_OWVAR 33
1012: PUSH
1013: LD_STRING ru
1015: ST_TO_ADDR
// hc_face_number := 4 ;
1016: LD_ADDR_OWVAR 34
1020: PUSH
1021: LD_INT 4
1023: ST_TO_ADDR
// hc_sex := sex_male ;
1024: LD_ADDR_OWVAR 27
1028: PUSH
1029: LD_INT 1
1031: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1032: LD_ADDR_EXP 19
1036: PUSH
1037: CALL_OW 44
1041: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1042: LD_ADDR_EXP 16
1046: PUSH
1047: LD_STRING Bobby
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL 189 0 2
1057: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1058: LD_ADDR_EXP 17
1062: PUSH
1063: LD_STRING Cyrus
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL 189 0 2
1073: ST_TO_ADDR
// case Difficulty of 1 :
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: DOUBLE
1082: EQUAL
1083: IFTRUE 1087
1085: GO 1102
1087: POP
// SetLives ( Bobby , 500 ) ; 2 :
1088: LD_EXP 16
1092: PPUSH
1093: LD_INT 500
1095: PPUSH
1096: CALL_OW 234
1100: GO 1149
1102: LD_INT 2
1104: DOUBLE
1105: EQUAL
1106: IFTRUE 1110
1108: GO 1125
1110: POP
// SetLives ( Bobby , 460 ) ; 3 :
1111: LD_EXP 16
1115: PPUSH
1116: LD_INT 460
1118: PPUSH
1119: CALL_OW 234
1123: GO 1149
1125: LD_INT 3
1127: DOUBLE
1128: EQUAL
1129: IFTRUE 1133
1131: GO 1148
1133: POP
// SetLives ( Bobby , 420 ) ; end ;
1134: LD_EXP 16
1138: PPUSH
1139: LD_INT 420
1141: PPUSH
1142: CALL_OW 234
1146: GO 1149
1148: POP
// end ; end_of_file
1149: LD_VAR 0 1
1153: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1154: LD_INT 0
1156: PPUSH
1157: PPUSH
1158: PPUSH
1159: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_OWVAR 67
1183: ARRAY
1184: ST_TO_ADDR
// uc_side := 3 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// uc_nation := 3 ;
1193: LD_ADDR_OWVAR 21
1197: PUSH
1198: LD_INT 3
1200: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1201: LD_ADDR_EXP 25
1205: PUSH
1206: LD_STRING Pokryshkin
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL 189 0 2
1216: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1217: LD_EXP 25
1221: PPUSH
1222: LD_INT 44
1224: PPUSH
1225: LD_INT 5
1227: PPUSH
1228: LD_INT 0
1230: PPUSH
1231: CALL_OW 48
// hc_importance := 0 ;
1235: LD_ADDR_OWVAR 32
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
// hc_gallery :=  ;
1243: LD_ADDR_OWVAR 33
1247: PUSH
1248: LD_STRING 
1250: ST_TO_ADDR
// hc_name :=  ;
1251: LD_ADDR_OWVAR 26
1255: PUSH
1256: LD_STRING 
1258: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1259: LD_INT 1
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: LD_VAR 0 2
1269: PPUSH
1270: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1274: LD_ADDR_OWVAR 33
1278: PUSH
1279: LD_STRING SecondCharsGal
1281: ST_TO_ADDR
// hc_face_number := 69 ;
1282: LD_ADDR_OWVAR 34
1286: PUSH
1287: LD_INT 69
1289: ST_TO_ADDR
// hc_sex := sex_male ;
1290: LD_ADDR_OWVAR 27
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1298: LD_ADDR_OWVAR 26
1302: PUSH
1303: LD_STRING Ilja Ivanov
1305: ST_TO_ADDR
// un := CreateHuman ;
1306: LD_ADDR_VAR 0 4
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1316: LD_ADDR_EXP 20
1320: PUSH
1321: LD_EXP 20
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 2
1338: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1339: LD_VAR 0 4
1343: PPUSH
1344: LD_INT 3
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: LD_VAR 0 2
1364: PPUSH
1365: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1369: LD_ADDR_OWVAR 33
1373: PUSH
1374: LD_STRING SecondCharsGal
1376: ST_TO_ADDR
// hc_face_number := 70 ;
1377: LD_ADDR_OWVAR 34
1381: PUSH
1382: LD_INT 70
1384: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1385: LD_ADDR_OWVAR 26
1389: PUSH
1390: LD_STRING Pavel Starczy
1392: ST_TO_ADDR
// un := CreateHuman ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: CALL_OW 44
1402: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1403: LD_ADDR_EXP 20
1407: PUSH
1408: LD_EXP 20
1412: PPUSH
1413: LD_INT 2
1415: PPUSH
1416: LD_VAR 0 4
1420: PPUSH
1421: CALL_OW 2
1425: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1426: LD_VAR 0 4
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 49
// InitHc ;
1441: CALL_OW 19
// for i = 1 to 7 do
1445: LD_ADDR_VAR 0 3
1449: PUSH
1450: DOUBLE
1451: LD_INT 1
1453: DEC
1454: ST_TO_ADDR
1455: LD_INT 7
1457: PUSH
1458: FOR_TO
1459: IFFALSE 1610
// begin PrepareHuman ( false , 1 , skill ) ;
1461: LD_INT 0
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_VAR 0 2
1471: PPUSH
1472: CALL_OW 380
// un := CreateHuman ;
1476: LD_ADDR_VAR 0 4
1480: PUSH
1481: CALL_OW 44
1485: ST_TO_ADDR
// if i mod 2 = 0 then
1486: LD_VAR 0 3
1490: PUSH
1491: LD_INT 2
1493: MOD
1494: PUSH
1495: LD_INT 0
1497: EQUAL
1498: IFFALSE 1555
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1500: LD_ADDR_EXP 20
1504: PUSH
1505: LD_EXP 20
1509: PPUSH
1510: LD_EXP 20
1514: PUSH
1515: LD_INT 1
1517: PLUS
1518: PPUSH
1519: LD_VAR 0 4
1523: PPUSH
1524: CALL_OW 2
1528: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1529: LD_VAR 0 4
1533: PPUSH
1534: LD_INT 3
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// ComHold ( un ) ;
1544: LD_VAR 0 4
1548: PPUSH
1549: CALL_OW 140
// end else
1553: GO 1608
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1555: LD_ADDR_EXP 21
1559: PUSH
1560: LD_EXP 21
1564: PPUSH
1565: LD_EXP 21
1569: PUSH
1570: LD_INT 1
1572: PLUS
1573: PPUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 2
1583: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1584: LD_VAR 0 4
1588: PPUSH
1589: LD_INT 4
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 49
// ComHold ( un ) ;
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL_OW 140
// end ; end ;
1608: GO 1458
1610: POP
1611: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 3
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 30
1629: PUSH
1630: LD_INT 31
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PPUSH
1641: CALL_OW 69
1645: PUSH
1646: FOR_IN
1647: IFFALSE 1665
// PrepareSolBun ( skill , i ) ;
1649: LD_VAR 0 2
1653: PPUSH
1654: LD_VAR 0 3
1658: PPUSH
1659: CALL 246 0 2
1663: GO 1646
1665: POP
1666: POP
// for i = 1 to 2 do
1667: LD_ADDR_VAR 0 3
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 2
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1812
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1683: LD_ADDR_VAR 0 4
1687: PUSH
1688: LD_INT 3
1690: PPUSH
1691: LD_INT 3
1693: PPUSH
1694: LD_INT 22
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: LD_INT 42
1705: PPUSH
1706: LD_INT 100
1708: PPUSH
1709: CALL 382 0 7
1713: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1714: LD_INT 0
1716: PPUSH
1717: LD_INT 3
1719: PPUSH
1720: LD_VAR 0 2
1724: PPUSH
1725: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1729: CALL_OW 44
1733: PPUSH
1734: LD_VAR 0 4
1738: PPUSH
1739: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1743: LD_VAR 0 4
1747: PPUSH
1748: LD_INT 23
1750: PUSH
1751: LD_INT 131
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_VAR 0 3
1762: ARRAY
1763: PPUSH
1764: LD_INT 14
1766: PUSH
1767: LD_INT 87
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: LD_VAR 0 3
1778: ARRAY
1779: PPUSH
1780: LD_INT 0
1782: PPUSH
1783: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1787: LD_ADDR_EXP 22
1791: PUSH
1792: LD_EXP 22
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_VAR 0 4
1804: PPUSH
1805: CALL_OW 2
1809: ST_TO_ADDR
// end ;
1810: GO 1680
1812: POP
1813: POP
// for i = 1 to 2 do
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 2
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1919
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1830: LD_INT 2
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 1
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_VAR 0 3
1848: ARRAY
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: CALL_OW 380
// un := CreateHuman ;
1860: LD_ADDR_VAR 0 4
1864: PUSH
1865: CALL_OW 44
1869: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1870: LD_ADDR_EXP 23
1874: PUSH
1875: LD_EXP 23
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1893: LD_VAR 0 4
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// ComHold ( un ) ;
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL_OW 140
// end ;
1917: GO 1827
1919: POP
1920: POP
// if Difficulty < 3 then
1921: LD_OWVAR 67
1925: PUSH
1926: LD_INT 3
1928: LESS
1929: IFFALSE 1933
// exit ;
1931: GO 1976
// PrepareHuman ( false , 1 , skill ) ;
1933: LD_INT 0
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: LD_VAR 0 2
1943: PPUSH
1944: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1948: LD_ADDR_EXP 24
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1958: LD_EXP 24
1962: PPUSH
1963: LD_INT 82
1965: PPUSH
1966: LD_INT 2
1968: PPUSH
1969: LD_INT 0
1971: PPUSH
1972: CALL_OW 48
// end ;
1976: LD_VAR 0 1
1980: RET
// every 0 0$01 trigger active_road_patrol do
1981: LD_EXP 8
1985: IFFALSE 2051
1987: GO 1989
1989: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1990: LD_EXP 22
1994: PUSH
1995: LD_INT 1
1997: ARRAY
1998: PPUSH
1999: LD_STRING road
2001: PPUSH
2002: LD_INT 70
2004: PPUSH
2005: LD_INT 131
2007: PUSH
2008: LD_INT 87
2010: PUSH
2011: LD_INT 107
2013: PUSH
2014: LD_INT 75
2016: PUSH
2017: LD_INT 107
2019: PUSH
2020: LD_INT 66
2022: PUSH
2023: LD_INT 114
2025: PUSH
2026: LD_INT 61
2028: PUSH
2029: LD_INT 107
2031: PUSH
2032: LD_INT 34
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: PPUSH
2047: CALL 470 0 4
2051: END
// every 0 0$01 trigger active_road_patrol do
2052: LD_EXP 8
2056: IFFALSE 2114
2058: GO 2060
2060: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2061: LD_EXP 22
2065: PUSH
2066: LD_INT 2
2068: ARRAY
2069: PPUSH
2070: LD_STRING road
2072: PPUSH
2073: LD_INT 70
2075: PPUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 12
2081: PUSH
2082: LD_INT 37
2084: PUSH
2085: LD_INT 30
2087: PUSH
2088: LD_INT 65
2090: PUSH
2091: LD_INT 62
2093: PUSH
2094: LD_INT 107
2096: PUSH
2097: LD_INT 76
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: PPUSH
2110: CALL 470 0 4
2114: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2115: LD_EXP 24
2119: PPUSH
2120: CALL_OW 302
2124: IFFALSE 2186
2126: GO 2128
2128: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2129: LD_EXP 24
2133: PPUSH
2134: LD_STRING forest
2136: PPUSH
2137: LD_INT 35
2139: PPUSH
2140: LD_INT 52
2142: PUSH
2143: LD_INT 15
2145: PUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 9
2151: PUSH
2152: LD_INT 120
2154: PUSH
2155: LD_INT 52
2157: PUSH
2158: LD_INT 135
2160: PUSH
2161: LD_INT 80
2163: PUSH
2164: LD_INT 122
2166: PUSH
2167: LD_INT 95
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL 470 0 4
2186: END
// every 0 0$01 trigger macmilan_use_radio do
2187: LD_EXP 6
2191: IFFALSE 2252
2193: GO 2195
2195: DISABLE
// begin active_road_patrol := false ;
2196: LD_ADDR_EXP 8
2200: PUSH
2201: LD_INT 0
2203: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2204: LD_EXP 22
2208: PPUSH
2209: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2213: LD_EXP 22
2217: PPUSH
2218: LD_INT 72
2220: PPUSH
2221: LD_INT 41
2223: PPUSH
2224: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2228: LD_EXP 21
2232: PPUSH
2233: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2237: LD_EXP 21
2241: PPUSH
2242: LD_INT 72
2244: PPUSH
2245: LD_INT 41
2247: PPUSH
2248: CALL_OW 174
// end ;
2252: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2253: LD_INT 9
2255: PPUSH
2256: LD_INT 22
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 70
2270: IFFALSE 2344
2272: GO 2274
2274: DISABLE
2275: LD_INT 0
2277: PPUSH
// begin enable ;
2278: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2279: LD_ADDR_VAR 0 1
2283: PUSH
2284: LD_INT 9
2286: PPUSH
2287: LD_INT 22
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 70
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2306: LD_EXP 21
2310: PPUSH
2311: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2315: LD_EXP 21
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 250
2329: PPUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 251
2339: PPUSH
2340: CALL_OW 174
// end ;
2344: PPOPN 1
2346: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2347: LD_EXP 22
2351: PUSH
2352: LD_INT 1
2354: ARRAY
2355: PPUSH
2356: CALL_OW 256
2360: PUSH
2361: LD_INT 999
2363: LESS
2364: PUSH
2365: LD_EXP 22
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: CALL_OW 256
2378: PUSH
2379: LD_INT 999
2381: LESS
2382: OR
2383: PUSH
2384: LD_INT 3
2386: PPUSH
2387: LD_EXP 15
2391: PPUSH
2392: CALL_OW 292
2396: AND
2397: IFFALSE 2424
2399: GO 2401
2401: DISABLE
// begin active_road_patrol := false ;
2402: LD_ADDR_EXP 8
2406: PUSH
2407: LD_INT 0
2409: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2410: LD_EXP 22
2414: PPUSH
2415: LD_EXP 15
2419: PPUSH
2420: CALL_OW 115
// end ;
2424: END
// every 0 0$01 trigger macmilan_in_trap do
2425: LD_EXP 9
2429: IFFALSE 2475
2431: GO 2433
2433: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2434: LD_EXP 21
2438: PPUSH
2439: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2443: LD_EXP 20
2447: PUSH
2448: LD_EXP 21
2452: ADD
2453: PUSH
2454: LD_EXP 25
2458: ADD
2459: PUSH
2460: LD_EXP 22
2464: ADD
2465: PPUSH
2466: LD_EXP 15
2470: PPUSH
2471: CALL_OW 115
// end ;
2475: END
// every 0 0$01 trigger meta_action do
2476: LD_EXP 10
2480: IFFALSE 2526
2482: GO 2484
2484: DISABLE
// begin active_road_patrol := false ;
2485: LD_ADDR_EXP 8
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2493: LD_EXP 20
2497: PUSH
2498: LD_EXP 21
2502: ADD
2503: PUSH
2504: LD_EXP 25
2508: ADD
2509: PUSH
2510: LD_EXP 22
2514: ADD
2515: PPUSH
2516: LD_INT 93
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: CALL_OW 114
// end ;
2526: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2527: LD_EXP 25
2531: PPUSH
2532: CALL_OW 256
2536: PUSH
2537: LD_INT 1000
2539: LESS
2540: IFFALSE 2591
2542: GO 2544
2544: DISABLE
// begin enable ;
2545: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2546: LD_INT 18
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 428
2556: PUSH
2557: LD_EXP 25
2561: EQUAL
2562: IFFALSE 2576
// begin RemoveUnit ( Pokryshkin ) ;
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 64
// disable ;
2573: DISABLE
// end else
2574: GO 2591
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2576: LD_EXP 25
2580: PPUSH
2581: LD_INT 18
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 111
// end ;
2591: END
// every 0 0$20 trigger send_troops_to_forest do
2592: LD_EXP 14
2596: IFFALSE 2650
2598: GO 2600
2600: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2601: LD_EXP 24
2605: PPUSH
2606: CALL_OW 302
2610: NOT
2611: IFFALSE 2615
// exit ;
2613: GO 2650
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2615: LD_EXP 20
2619: PUSH
2620: LD_EXP 25
2624: ADD
2625: PPUSH
2626: LD_EXP 24
2630: PPUSH
2631: CALL_OW 252
2635: PPUSH
2636: LD_EXP 24
2640: PPUSH
2641: CALL_OW 253
2645: PPUSH
2646: CALL_OW 114
// end ;
2650: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2651: LD_VAR 0 1
2655: PPUSH
2656: CALL_OW 255
2660: PUSH
2661: LD_INT 3
2663: EQUAL
2664: IFFALSE 2707
// begin wait ( 11 ) ;
2666: LD_INT 11
2668: PPUSH
2669: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2673: LD_VAR 0 1
2677: PPUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 0
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: PPUSH
2693: LD_VAR 0 1
2697: PPUSH
2698: CALL_OW 74
2702: PPUSH
2703: CALL_OW 120
// end ; end ; end_of_file
2707: PPOPN 4
2709: END
// export function Action ; var i ; begin
2710: LD_INT 0
2712: PPUSH
2713: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2714: LD_ADDR_VAR 0 2
2718: PUSH
2719: LD_INT 22
2721: PUSH
2722: LD_INT 3
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 25
2731: PUSH
2732: LD_INT 1
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: PUSH
2748: FOR_IN
2749: IFFALSE 2762
// ComHold ( i ) ;
2751: LD_VAR 0 2
2755: PPUSH
2756: CALL_OW 140
2760: GO 2748
2762: POP
2763: POP
// InGameOn ;
2764: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2768: LD_INT 79
2770: PPUSH
2771: LD_INT 76
2773: PPUSH
2774: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2778: LD_INT 10
2780: PPUSH
2781: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2785: LD_EXP 15
2789: PPUSH
2790: LD_INT 80
2792: PPUSH
2793: LD_INT 79
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 48
// Wait ( 0 0$03 ) ;
2803: LD_INT 105
2805: PPUSH
2806: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2810: LD_EXP 15
2814: PPUSH
2815: LD_INT 80
2817: PPUSH
2818: LD_INT 76
2820: PPUSH
2821: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2825: LD_EXP 15
2829: PPUSH
2830: LD_STRING D1-JMM-1
2832: PPUSH
2833: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2837: LD_INT 10
2839: PPUSH
2840: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2844: LD_EXP 15
2848: PPUSH
2849: LD_INT 76
2851: PPUSH
2852: LD_INT 76
2854: PPUSH
2855: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2859: LD_EXP 15
2863: PPUSH
2864: LD_STRING D1-JMM-1a
2866: PPUSH
2867: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2871: LD_INT 10
2873: PPUSH
2874: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2878: LD_EXP 15
2882: PPUSH
2883: LD_INT 83
2885: PPUSH
2886: LD_INT 66
2888: PPUSH
2889: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2893: LD_EXP 15
2897: PPUSH
2898: LD_STRING D1-JMM-1b
2900: PPUSH
2901: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2905: LD_INT 18
2907: PPUSH
2908: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2912: LD_EXP 15
2916: PPUSH
2917: LD_STRING D1-JMM-1c
2919: PPUSH
2920: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2924: LD_INT 7
2926: PPUSH
2927: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2931: LD_EXP 18
2935: PPUSH
2936: LD_STRING D1-Pow-1
2938: PPUSH
2939: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2943: LD_EXP 15
2947: PPUSH
2948: LD_STRING D1-JMM-2
2950: PPUSH
2951: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2955: LD_EXP 18
2959: PPUSH
2960: LD_STRING D1-Pow-2
2962: PPUSH
2963: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2967: LD_EXP 15
2971: PPUSH
2972: LD_STRING D1-JMM-3
2974: PPUSH
2975: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2979: LD_EXP 18
2983: PPUSH
2984: LD_STRING D1-Pow-3
2986: PPUSH
2987: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2991: LD_EXP 15
2995: PPUSH
2996: LD_STRING D1-JMM-4
2998: PPUSH
2999: CALL_OW 88
// ComFree ( JMM ) ;
3003: LD_EXP 15
3007: PPUSH
3008: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3012: LD_INT 10
3014: PPUSH
3015: CALL_OW 67
// InGameOff ;
3019: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3023: LD_STRING M1
3025: PPUSH
3026: CALL_OW 337
// SaveForQuickRestart ;
3030: CALL_OW 22
// active_russian_dialog := true ;
3034: LD_ADDR_EXP 3
3038: PUSH
3039: LD_INT 1
3041: ST_TO_ADDR
// active_road_patrol := true ;
3042: LD_ADDR_EXP 8
3046: PUSH
3047: LD_INT 1
3049: ST_TO_ADDR
// if Difficulty < 3 then
3050: LD_OWVAR 67
3054: PUSH
3055: LD_INT 3
3057: LESS
3058: IFFALSE 3089
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3060: LD_EXP 16
3064: PPUSH
3065: LD_INT 41
3067: PPUSH
3068: LD_INT 71
3070: PPUSH
3071: LD_INT 0
3073: PPUSH
3074: CALL_OW 48
// ComHold ( Bobby ) ;
3078: LD_EXP 16
3082: PPUSH
3083: CALL_OW 140
// end else
3087: GO 3137
// begin SetDir ( Bobby , 5 ) ;
3089: LD_EXP 16
3093: PPUSH
3094: LD_INT 5
3096: PPUSH
3097: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3101: LD_EXP 16
3105: PPUSH
3106: LD_INT 105
3108: PPUSH
3109: LD_INT 98
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 48
// ComCrawl ( Bobby ) ;
3119: LD_EXP 16
3123: PPUSH
3124: CALL_OW 137
// AddComHold ( Bobby ) ;
3128: LD_EXP 16
3132: PPUSH
3133: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3137: LD_EXP 17
3141: PPUSH
3142: LD_INT 90
3144: PPUSH
3145: LD_INT 42
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3155: LD_EXP 17
3159: PPUSH
3160: LD_INT 79
3162: PPUSH
3163: LD_INT 34
3165: PPUSH
3166: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3170: LD_EXP 17
3174: PPUSH
3175: CALL_OW 197
// end ;
3179: LD_VAR 0 1
3183: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3184: LD_EXP 3
3188: IFFALSE 3811
3190: GO 3192
3192: DISABLE
3193: LD_INT 0
3195: PPUSH
// begin wait_points := 0 ;
3196: LD_ADDR_VAR 0 1
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3204: LD_INT 70
3206: PPUSH
3207: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3211: LD_EXP 20
3215: PPUSH
3216: LD_INT 79
3218: PPUSH
3219: LD_INT 83
3221: PPUSH
3222: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3226: LD_EXP 20
3230: PUSH
3231: LD_INT 2
3233: ARRAY
3234: PPUSH
3235: LD_STRING D1R-Rus1-1
3237: PPUSH
3238: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3242: LD_EXP 20
3246: PUSH
3247: LD_INT 1
3249: ARRAY
3250: PPUSH
3251: LD_STRING D1R-Rus2-1
3253: PPUSH
3254: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3258: LD_EXP 21
3262: PPUSH
3263: LD_INT 91
3265: PPUSH
3266: LD_INT 80
3268: PPUSH
3269: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3273: LD_INT 35
3275: PPUSH
3276: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3280: LD_EXP 20
3284: PUSH
3285: LD_INT 1
3287: ARRAY
3288: PPUSH
3289: LD_INT 79
3291: PPUSH
3292: LD_INT 82
3294: PPUSH
3295: CALL_OW 297
3299: PUSH
3300: LD_INT 5
3302: LESS
3303: IFFALSE 3273
// if not IsInArea ( JMM , jmm_spot ) then
3305: LD_EXP 15
3309: PPUSH
3310: LD_INT 5
3312: PPUSH
3313: CALL_OW 308
3317: NOT
3318: IFFALSE 3338
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3320: LD_EXP 20
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_STRING D1Ra-Rus2-1
3331: PPUSH
3332: CALL_OW 88
3336: GO 3474
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3338: LD_EXP 20
3342: PUSH
3343: LD_INT 2
3345: ARRAY
3346: PPUSH
3347: LD_STRING D1Rb-Rus1-1
3349: PPUSH
3350: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3354: LD_EXP 20
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_STRING D1Rb-Rus2-1
3365: PPUSH
3366: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3370: LD_EXP 20
3374: PUSH
3375: LD_EXP 21
3379: ADD
3380: PPUSH
3381: LD_EXP 15
3385: PPUSH
3386: CALL_OW 250
3390: PPUSH
3391: LD_EXP 15
3395: PPUSH
3396: CALL_OW 251
3400: PPUSH
3401: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3405: LD_INT 35
3407: PPUSH
3408: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3412: LD_EXP 15
3416: PPUSH
3417: LD_INT 5
3419: PPUSH
3420: CALL_OW 308
3424: NOT
3425: PUSH
3426: LD_INT 3
3428: PPUSH
3429: LD_EXP 15
3433: PPUSH
3434: CALL_OW 292
3438: NOT
3439: AND
3440: IFFALSE 3405
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3442: LD_EXP 20
3446: PUSH
3447: LD_INT 2
3449: ARRAY
3450: PPUSH
3451: LD_STRING D1Rc-Rus1-1
3453: PPUSH
3454: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3458: LD_EXP 20
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: LD_STRING D1Ra-Rus2-1a
3469: PPUSH
3470: CALL_OW 88
// end ; wait_points := 10 ;
3474: LD_ADDR_VAR 0 1
3478: PUSH
3479: LD_INT 10
3481: ST_TO_ADDR
// if Difficulty > 1 then
3482: LD_OWVAR 67
3486: PUSH
3487: LD_INT 1
3489: GREATER
3490: IFFALSE 3572
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3492: LD_EXP 20
3496: PPUSH
3497: LD_INT 78
3499: PPUSH
3500: LD_INT 95
3502: PPUSH
3503: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3507: LD_EXP 20
3511: PPUSH
3512: LD_INT 175
3514: PPUSH
3515: CALL_OW 202
// wait_points := wait_points + 15 ;
3519: LD_ADDR_VAR 0 1
3523: PUSH
3524: LD_VAR 0 1
3528: PUSH
3529: LD_INT 15
3531: PLUS
3532: ST_TO_ADDR
// if Difficulty > 2 then
3533: LD_OWVAR 67
3537: PUSH
3538: LD_INT 2
3540: GREATER
3541: IFFALSE 3572
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3543: LD_EXP 20
3547: PPUSH
3548: LD_INT 65
3550: PPUSH
3551: LD_INT 79
3553: PPUSH
3554: CALL_OW 174
// wait_points := wait_points + 5 ;
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: LD_VAR 0 1
3567: PUSH
3568: LD_INT 5
3570: PLUS
3571: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3572: LD_INT 35
3574: PPUSH
3575: CALL_OW 67
// wait_points := wait_points - 1 ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_VAR 0 1
3588: PUSH
3589: LD_INT 1
3591: MINUS
3592: ST_TO_ADDR
// if See ( 3 , JMM ) then
3593: LD_INT 3
3595: PPUSH
3596: LD_EXP 15
3600: PPUSH
3601: CALL_OW 292
3605: IFFALSE 3659
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3607: LD_EXP 20
3611: PUSH
3612: LD_INT 2
3614: ARRAY
3615: PPUSH
3616: LD_STRING D1Rb-Rus1-1
3618: PPUSH
3619: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3623: LD_EXP 20
3627: PPUSH
3628: LD_EXP 15
3632: PPUSH
3633: CALL_OW 250
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 251
3647: PPUSH
3648: CALL_OW 114
// Wait ( 0 0$03 ) ;
3652: LD_INT 105
3654: PPUSH
3655: CALL_OW 67
// end ; until wait_points = 0 ;
3659: LD_VAR 0 1
3663: PUSH
3664: LD_INT 0
3666: EQUAL
3667: IFFALSE 3572
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3669: LD_EXP 20
3673: PPUSH
3674: LD_INT 45
3676: PPUSH
3677: LD_INT 5
3679: PPUSH
3680: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3684: LD_EXP 21
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3696: LD_INT 35
3698: PPUSH
3699: CALL_OW 67
// if See ( 3 , JMM ) then
3703: LD_INT 3
3705: PPUSH
3706: LD_EXP 15
3710: PPUSH
3711: CALL_OW 292
3715: IFFALSE 3771
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3717: LD_EXP 20
3721: PUSH
3722: LD_INT 2
3724: ARRAY
3725: PPUSH
3726: LD_STRING D1Rb-Rus1-1
3728: PPUSH
3729: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3733: LD_EXP 20
3737: PPUSH
3738: LD_EXP 15
3742: PPUSH
3743: CALL_OW 250
3747: PPUSH
3748: LD_EXP 15
3752: PPUSH
3753: CALL_OW 251
3757: PPUSH
3758: CALL_OW 114
// Wait ( 0 0$50 ) ;
3762: LD_INT 1750
3764: PPUSH
3765: CALL_OW 67
// end else
3769: GO 3786
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3771: LD_EXP 20
3775: PPUSH
3776: LD_INT 45
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3786: LD_EXP 20
3790: PUSH
3791: LD_INT 1
3793: ARRAY
3794: PPUSH
3795: LD_INT 45
3797: PPUSH
3798: LD_INT 5
3800: PPUSH
3801: CALL_OW 297
3805: PUSH
3806: LD_INT 10
3808: LESS
3809: IFFALSE 3696
// end ;
3811: PPOPN 1
3813: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3814: LD_INT 22
3816: PUSH
3817: LD_INT 3
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 92
3826: PUSH
3827: LD_INT 80
3829: PUSH
3830: LD_INT 83
3832: PUSH
3833: LD_INT 6
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PPUSH
3846: CALL_OW 69
3850: PUSH
3851: LD_OWVAR 67
3855: PUSH
3856: LD_INT 1
3858: EQUAL
3859: AND
3860: IFFALSE 3941
3862: GO 3864
3864: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3865: LD_INT 80
3867: PPUSH
3868: LD_INT 83
3870: PPUSH
3871: LD_INT 1
3873: PPUSH
3874: LD_INT 7
3876: NEG
3877: PPUSH
3878: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3882: LD_INT 35
3884: PPUSH
3885: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3889: LD_INT 22
3891: PUSH
3892: LD_INT 3
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: LD_INT 92
3901: PUSH
3902: LD_INT 80
3904: PUSH
3905: LD_INT 83
3907: PUSH
3908: LD_INT 10
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 69
3925: NOT
3926: IFFALSE 3882
// RemoveSeeing ( 80 , 83 , 1 ) ;
3928: LD_INT 80
3930: PPUSH
3931: LD_INT 83
3933: PPUSH
3934: LD_INT 1
3936: PPUSH
3937: CALL_OW 331
// end ;
3941: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 and IsOk ( Bobby ) do
3942: LD_EXP 15
3946: PPUSH
3947: LD_EXP 16
3951: PPUSH
3952: CALL_OW 296
3956: PUSH
3957: LD_INT 9
3959: LESS
3960: PUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 302
3970: AND
3971: IFFALSE 4422
3973: GO 3975
3975: DISABLE
// begin ComWalk ( Bobby ) ;
3976: LD_EXP 16
3980: PPUSH
3981: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3985: LD_EXP 16
3989: PPUSH
3990: LD_EXP 15
3994: PPUSH
3995: CALL_OW 250
3999: PPUSH
4000: LD_EXP 15
4004: PPUSH
4005: CALL_OW 251
4009: PPUSH
4010: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4014: LD_INT 35
4016: PPUSH
4017: CALL_OW 67
// until See ( 4 , JMM ) ;
4021: LD_INT 4
4023: PPUSH
4024: LD_EXP 15
4028: PPUSH
4029: CALL_OW 292
4033: IFFALSE 4014
// InGameOn ;
4035: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4039: LD_EXP 15
4043: PPUSH
4044: LD_EXP 16
4048: PPUSH
4049: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4053: LD_EXP 7
4057: PUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 302
4067: AND
4068: PUSH
4069: LD_EXP 15
4073: PPUSH
4074: LD_EXP 17
4078: PPUSH
4079: CALL_OW 296
4083: PUSH
4084: LD_INT 10
4086: LESS
4087: AND
4088: IFFALSE 4133
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4090: LD_EXP 17
4094: PPUSH
4095: LD_EXP 15
4099: PPUSH
4100: CALL_OW 250
4104: PPUSH
4105: LD_EXP 15
4109: PPUSH
4110: CALL_OW 251
4114: PPUSH
4115: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4119: LD_EXP 17
4123: PPUSH
4124: LD_EXP 16
4128: PPUSH
4129: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4133: LD_EXP 15
4137: PPUSH
4138: LD_STRING D2-JMM-1
4140: PPUSH
4141: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4145: LD_INT 10
4147: PPUSH
4148: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4152: LD_EXP 16
4156: PPUSH
4157: LD_EXP 15
4161: PPUSH
4162: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4166: LD_EXP 16
4170: PPUSH
4171: LD_STRING D2-Bobby-1
4173: PPUSH
4174: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4178: LD_EXP 15
4182: PPUSH
4183: LD_STRING D2-JMM-2
4185: PPUSH
4186: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_EXP 15
4199: PPUSH
4200: CALL_OW 250
4204: PPUSH
4205: LD_EXP 15
4209: PPUSH
4210: CALL_OW 251
4214: PPUSH
4215: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4219: LD_EXP 16
4223: PPUSH
4224: LD_STRING D2-Bobby-2
4226: PPUSH
4227: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4231: LD_EXP 15
4235: PPUSH
4236: LD_STRING D2-JMM-3
4238: PPUSH
4239: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4243: LD_EXP 16
4247: PPUSH
4248: LD_EXP 15
4252: PPUSH
4253: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4257: LD_EXP 16
4261: PPUSH
4262: LD_STRING D2-Bobby-3
4264: PPUSH
4265: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4269: LD_EXP 15
4273: PPUSH
4274: LD_STRING D2-JMM-4
4276: PPUSH
4277: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4281: LD_EXP 16
4285: PPUSH
4286: LD_STRING D2-Bobby-4
4288: PPUSH
4289: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4293: LD_EXP 15
4297: PPUSH
4298: LD_STRING D2-JMM-5
4300: PPUSH
4301: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4305: LD_EXP 16
4309: PPUSH
4310: LD_STRING D2-Bobby-5
4312: PPUSH
4313: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4317: LD_EXP 15
4321: PPUSH
4322: LD_STRING D2-JMM-6
4324: PPUSH
4325: CALL_OW 88
// if not powell_contact then
4329: LD_EXP 5
4333: NOT
4334: IFFALSE 4360
// begin Say ( Bobby , D2-Bobby-6 ) ;
4336: LD_EXP 16
4340: PPUSH
4341: LD_STRING D2-Bobby-6
4343: PPUSH
4344: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4348: LD_EXP 15
4352: PPUSH
4353: LD_STRING D2-JMM-7
4355: PPUSH
4356: CALL_OW 88
// end ; InGameOff ;
4360: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4364: LD_EXP 16
4368: PPUSH
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4376: LD_EXP 15
4380: PUSH
4381: LD_EXP 16
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 139
// bobby_in_squad := true ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_INT 1
4401: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4402: LD_EXP 5
4406: PUSH
4407: LD_EXP 7
4411: NOT
4412: AND
4413: IFFALSE 4422
// ChangeMissionObjectives ( M2b ) ;
4415: LD_STRING M2b
4417: PPUSH
4418: CALL_OW 337
// end ;
4422: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4423: LD_EXP 3
4427: PUSH
4428: LD_EXP 4
4432: NOT
4433: AND
4434: PUSH
4435: LD_OWVAR 67
4439: PUSH
4440: LD_INT 3
4442: LESS
4443: AND
4444: IFFALSE 4464
4446: GO 4448
4448: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4449: LD_EXP 16
4453: PPUSH
4454: LD_INT 75
4456: PPUSH
4457: LD_INT 83
4459: PPUSH
4460: CALL_OW 111
4464: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4465: LD_EXP 7
4469: PUSH
4470: LD_EXP 4
4474: NOT
4475: AND
4476: IFFALSE 4505
4478: GO 4480
4480: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4481: LD_EXP 16
4485: PPUSH
4486: LD_INT 105
4488: PPUSH
4489: LD_INT 97
4491: PPUSH
4492: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4496: LD_EXP 16
4500: PPUSH
4501: CALL_OW 197
// end ;
4505: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4506: LD_EXP 15
4510: PPUSH
4511: LD_INT 6
4513: PPUSH
4514: CALL_OW 308
4518: PUSH
4519: LD_EXP 15
4523: PPUSH
4524: LD_EXP 16
4528: PPUSH
4529: CALL_OW 296
4533: PUSH
4534: LD_INT 7
4536: LESS
4537: AND
4538: PUSH
4539: LD_EXP 4
4543: AND
4544: IFFALSE 4591
4546: GO 4548
4548: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4549: LD_EXP 15
4553: PUSH
4554: LD_EXP 16
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PPUSH
4563: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4567: LD_EXP 15
4571: PPUSH
4572: LD_STRING D2a-JMM-1
4574: PPUSH
4575: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4579: LD_EXP 16
4583: PPUSH
4584: LD_STRING D2a-Bobby-1
4586: PPUSH
4587: CALL_OW 88
// end ;
4591: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4592: LD_EXP 3
4596: PUSH
4597: LD_INT 3
4599: PPUSH
4600: LD_EXP 15
4604: PPUSH
4605: CALL_OW 292
4609: NOT
4610: AND
4611: IFFALSE 4787
4613: GO 4615
4615: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4616: LD_INT 350
4618: PPUSH
4619: LD_INT 700
4621: PPUSH
4622: CALL_OW 12
4626: PPUSH
4627: CALL_OW 67
// InGameOn ;
4631: CALL_OW 8
// DialogueOn ;
4635: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4639: LD_EXP 18
4643: PPUSH
4644: LD_STRING D3-Pow-1
4646: PPUSH
4647: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4651: LD_EXP 15
4655: PPUSH
4656: LD_STRING D3-JMM-1
4658: PPUSH
4659: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4663: LD_EXP 18
4667: PPUSH
4668: LD_STRING D3-Pow-2
4670: PPUSH
4671: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4675: LD_EXP 15
4679: PPUSH
4680: LD_STRING D3-JMM-2
4682: PPUSH
4683: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4687: LD_EXP 18
4691: PPUSH
4692: LD_STRING D3-Pow-3
4694: PPUSH
4695: CALL_OW 94
// DialogueOff ;
4699: CALL_OW 7
// InGameOff ;
4703: CALL_OW 9
// powell_contact := true ;
4707: LD_ADDR_EXP 5
4711: PUSH
4712: LD_INT 1
4714: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4715: LD_INT 10
4717: PPUSH
4718: LD_INT 1
4720: PPUSH
4721: CALL_OW 424
// uc_side := 4 ;
4725: LD_ADDR_OWVAR 20
4729: PUSH
4730: LD_INT 4
4732: ST_TO_ADDR
// uc_nation := 1 ;
4733: LD_ADDR_OWVAR 21
4737: PUSH
4738: LD_INT 1
4740: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4741: LD_ADDR_EXP 18
4745: PUSH
4746: LD_STRING Powell
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL 189 0 2
4756: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4757: LD_STRING M2
4759: PPUSH
4760: CALL_OW 337
// if not bobby_in_squad then
4764: LD_EXP 4
4768: NOT
4769: IFFALSE 4780
// ChangeMissionObjectives ( M2a ) else
4771: LD_STRING M2a
4773: PPUSH
4774: CALL_OW 337
4778: GO 4787
// ChangeMissionObjectives ( M2b ) ;
4780: LD_STRING M2b
4782: PPUSH
4783: CALL_OW 337
// end ;
4787: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4788: LD_EXP 15
4792: PPUSH
4793: LD_INT 7
4795: PPUSH
4796: CALL_OW 308
4800: IFFALSE 4935
4802: GO 4804
4804: DISABLE
// begin DialogueOn ;
4805: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4809: LD_EXP 19
4813: PPUSH
4814: LD_STRING D4-Rus3-1
4816: PPUSH
4817: CALL_OW 94
// DialogueOff ;
4821: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4825: LD_STRING M3a
4827: PPUSH
4828: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4832: LD_INT 11
4834: PPUSH
4835: LD_INT 1
4837: PPUSH
4838: CALL_OW 424
// Wait ( 0 0$02 ) ;
4842: LD_INT 70
4844: PPUSH
4845: CALL_OW 67
// DialogueOn ;
4849: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4853: LD_EXP 18
4857: PPUSH
4858: LD_STRING D4-Pow-1
4860: PPUSH
4861: CALL_OW 94
// DialogueOff ;
4865: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4869: LD_STRING M3b
4871: PPUSH
4872: CALL_OW 337
// case Query ( Q1 ) of 1 :
4876: LD_STRING Q1
4878: PPUSH
4879: CALL_OW 97
4883: PUSH
4884: LD_INT 1
4886: DOUBLE
4887: EQUAL
4888: IFTRUE 4892
4890: GO 4923
4892: POP
// begin macmilan_use_radio := true ;
4893: LD_ADDR_EXP 6
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// DialogueOn ;
4901: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4905: LD_EXP 15
4909: PPUSH
4910: LD_STRING D4a-JMM-1
4912: PPUSH
4913: CALL_OW 88
// DialogueOff ;
4917: CALL_OW 7
// end ; 2 :
4921: GO 4935
4923: LD_INT 2
4925: DOUBLE
4926: EQUAL
4927: IFTRUE 4931
4929: GO 4934
4931: POP
// ; end ;
4932: GO 4935
4934: POP
// end ;
4935: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4936: LD_EXP 15
4940: PPUSH
4941: LD_EXP 17
4945: PPUSH
4946: CALL_OW 296
4950: PUSH
4951: LD_INT 8
4953: LESS
4954: PUSH
4955: LD_EXP 17
4959: PPUSH
4960: CALL_OW 302
4964: AND
4965: IFFALSE 5256
4967: GO 4969
4969: DISABLE
// begin InGameOn ;
4970: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4974: LD_EXP 15
4978: PPUSH
4979: LD_EXP 17
4983: PPUSH
4984: CALL_OW 250
4988: PPUSH
4989: LD_EXP 17
4993: PPUSH
4994: CALL_OW 251
4998: PPUSH
4999: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5003: LD_EXP 16
5007: PPUSH
5008: CALL_OW 302
5012: PUSH
5013: LD_EXP 4
5017: AND
5018: IFFALSE 5049
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_EXP 15
5029: PPUSH
5030: CALL_OW 250
5034: PPUSH
5035: LD_EXP 15
5039: PPUSH
5040: CALL_OW 251
5044: PPUSH
5045: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5049: LD_EXP 15
5053: PPUSH
5054: LD_STRING D5-JMM-1
5056: PPUSH
5057: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5061: LD_INT 10
5063: PPUSH
5064: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5068: LD_EXP 15
5072: PPUSH
5073: LD_EXP 17
5077: PPUSH
5078: CALL_OW 119
// ComWalk ( Cyrus ) ;
5082: LD_EXP 17
5086: PPUSH
5087: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5091: LD_EXP 17
5095: PPUSH
5096: LD_EXP 15
5100: PPUSH
5101: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_STRING D5-Cyrus-1
5112: PPUSH
5113: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5117: LD_EXP 16
5121: PPUSH
5122: CALL_OW 302
5126: PUSH
5127: LD_EXP 4
5131: AND
5132: IFFALSE 5172
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5134: LD_EXP 16
5138: PPUSH
5139: LD_EXP 17
5143: PPUSH
5144: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5148: LD_EXP 16
5152: PPUSH
5153: LD_STRING D5-Bobby-1
5155: PPUSH
5156: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5160: LD_EXP 15
5164: PPUSH
5165: LD_STRING D5-JMM-2
5167: PPUSH
5168: CALL_OW 88
// end ; InGameOff ;
5172: CALL_OW 9
// cyrus_in_squad := true ;
5176: LD_ADDR_EXP 7
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5184: LD_EXP 17
5188: PPUSH
5189: LD_INT 1
5191: PPUSH
5192: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5196: LD_EXP 5
5200: PUSH
5201: LD_EXP 4
5205: NOT
5206: AND
5207: IFFALSE 5216
// ChangeMissionObjectives ( M2b ) ;
5209: LD_STRING M2b
5211: PPUSH
5212: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5216: LD_EXP 4
5220: NOT
5221: PUSH
5222: LD_EXP 16
5226: PPUSH
5227: CALL_OW 255
5231: PUSH
5232: LD_INT 4
5234: EQUAL
5235: AND
5236: PUSH
5237: LD_EXP 16
5241: PPUSH
5242: CALL_OW 302
5246: AND
5247: IFFALSE 5256
// SetAchievement ( ACH_CYRUS ) ;
5249: LD_STRING ACH_CYRUS
5251: PPUSH
5252: CALL_OW 543
// end ;
5256: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5257: LD_EXP 4
5261: PUSH
5262: LD_EXP 7
5266: AND
5267: IFFALSE 5279
5269: GO 5271
5271: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5272: LD_STRING M2c
5274: PPUSH
5275: CALL_OW 337
5279: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5280: LD_EXP 15
5284: PPUSH
5285: LD_INT 8
5287: PPUSH
5288: CALL_OW 308
5292: IFFALSE 5344
5294: GO 5296
5296: DISABLE
// begin macmilan_in_trap := true ;
5297: LD_ADDR_EXP 9
5301: PUSH
5302: LD_INT 1
5304: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5305: LD_INT 35
5307: PPUSH
5308: CALL_OW 67
// DialogueOn ;
5312: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5316: LD_EXP 25
5320: PPUSH
5321: LD_STRING D5-Pok-1
5323: PPUSH
5324: CALL_OW 88
// DialogueOff ;
5328: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5332: LD_EXP 15
5336: PPUSH
5337: LD_STRING D4b-JMM-1
5339: PPUSH
5340: CALL_OW 88
// end ;
5344: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5345: LD_EXP 15
5349: PPUSH
5350: LD_EXP 23
5354: PUSH
5355: LD_EXP 23
5359: ARRAY
5360: PPUSH
5361: CALL_OW 296
5365: PUSH
5366: LD_INT 12
5368: LESS
5369: PUSH
5370: LD_EXP 23
5374: PPUSH
5375: LD_INT 3
5377: PUSH
5378: LD_INT 24
5380: PUSH
5381: LD_INT 990
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 72
5396: OR
5397: IFFALSE 5627
5399: GO 5401
5401: DISABLE
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5406: LD_ADDR_VAR 0 2
5410: PUSH
5411: LD_INT 300
5413: PUSH
5414: LD_INT 250
5416: PUSH
5417: LD_INT 200
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: LD_OWVAR 67
5429: ARRAY
5430: ST_TO_ADDR
// for i in russian_meta_guards do
5431: LD_ADDR_VAR 0 1
5435: PUSH
5436: LD_EXP 23
5440: PUSH
5441: FOR_IN
5442: IFFALSE 5482
// if IsOk ( i ) then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 302
5453: IFFALSE 5480
// SetLives ( i , GetLives ( i ) - hp ) ;
5455: LD_VAR 0 1
5459: PPUSH
5460: LD_VAR 0 1
5464: PPUSH
5465: CALL_OW 256
5469: PUSH
5470: LD_VAR 0 2
5474: MINUS
5475: PPUSH
5476: CALL_OW 234
5480: GO 5441
5482: POP
5483: POP
// DialogueOn ;
5484: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5488: LD_EXP 23
5492: PUSH
5493: LD_EXP 23
5497: ARRAY
5498: PPUSH
5499: LD_STRING D6-FRus1-1
5501: PPUSH
5502: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5506: LD_EXP 15
5510: PPUSH
5511: LD_STRING D6-JMM-1
5513: PPUSH
5514: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5518: LD_EXP 17
5522: PPUSH
5523: CALL_OW 302
5527: PUSH
5528: LD_EXP 7
5532: AND
5533: IFFALSE 5547
// Say ( Cyrus , D6-Cyrus-1 ) ;
5535: LD_EXP 17
5539: PPUSH
5540: LD_STRING D6-Cyrus-1
5542: PPUSH
5543: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5547: LD_EXP 16
5551: PPUSH
5552: CALL_OW 302
5556: PUSH
5557: LD_EXP 4
5561: AND
5562: IFFALSE 5576
// Say ( Bobby , D6-Bobby-1 ) ;
5564: LD_EXP 16
5568: PPUSH
5569: LD_STRING D6-Bobby-1
5571: PPUSH
5572: CALL_OW 88
// DialogueOff ;
5576: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5580: LD_INT 140
5582: PUSH
5583: LD_INT 105
5585: PUSH
5586: LD_INT 70
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_OWVAR 67
5598: ARRAY
5599: PPUSH
5600: CALL_OW 67
// meta_action := true ;
5604: LD_ADDR_EXP 10
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5612: LD_EXP 23
5616: PPUSH
5617: LD_INT 94
5619: PPUSH
5620: LD_INT 8
5622: PPUSH
5623: CALL_OW 114
// end ;
5627: PPOPN 2
5629: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5630: LD_EXP 15
5634: PPUSH
5635: LD_INT 93
5637: PPUSH
5638: LD_INT 1
5640: PPUSH
5641: CALL_OW 297
5645: PUSH
5646: LD_INT 5
5648: LESS
5649: PUSH
5650: LD_INT 22
5652: PUSH
5653: LD_INT 1
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: PUSH
5665: LD_INT 1
5667: GREATER
5668: AND
5669: IFFALSE 5686
5671: GO 5673
5673: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5674: LD_EXP 15
5678: PPUSH
5679: LD_STRING D6a-JMM-1
5681: PPUSH
5682: CALL_OW 88
5686: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5687: LD_VAR 0 1
5691: PUSH
5692: LD_EXP 15
5696: EQUAL
5697: IFFALSE 5706
// YouLost ( JMM ) ;
5699: LD_STRING JMM
5701: PPUSH
5702: CALL_OW 104
// end ;
5706: PPOPN 1
5708: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5709: LD_VAR 0 1
5713: PUSH
5714: LD_EXP 15
5718: EQUAL
5719: IFFALSE 5728
// YouLost ( JMM ) ;
5721: LD_STRING JMM
5723: PPUSH
5724: CALL_OW 104
// end ;
5728: PPOPN 1
5730: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5731: LD_EXP 16
5735: PPUSH
5736: LD_INT 10
5738: PPUSH
5739: CALL_OW 308
5743: IFFALSE 5792
5745: GO 5747
5747: DISABLE
// begin bobby_saved := true ;
5748: LD_ADDR_EXP 12
5752: PUSH
5753: LD_INT 1
5755: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5756: LD_EXP 16
5760: PPUSH
5761: CALL_OW 256
5765: PPUSH
5766: LD_STRING 01_BobbyLifePoints_1
5768: PPUSH
5769: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5773: LD_EXP 16
5777: PPUSH
5778: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5782: LD_STRING Bobby
5784: PPUSH
5785: LD_INT 1
5787: PPUSH
5788: CALL_OW 101
// end ;
5792: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5793: LD_EXP 17
5797: PPUSH
5798: LD_INT 10
5800: PPUSH
5801: CALL_OW 308
5805: IFFALSE 5854
5807: GO 5809
5809: DISABLE
// begin cyrus_saved := true ;
5810: LD_ADDR_EXP 13
5814: PUSH
5815: LD_INT 1
5817: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5818: LD_EXP 17
5822: PPUSH
5823: CALL_OW 256
5827: PPUSH
5828: LD_STRING 01_CyrusLifePoints_1
5830: PPUSH
5831: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5835: LD_EXP 17
5839: PPUSH
5840: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5844: LD_STRING Cyrus
5846: PPUSH
5847: LD_INT 1
5849: PPUSH
5850: CALL_OW 101
// end ;
5854: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5855: LD_EXP 15
5859: PPUSH
5860: LD_INT 10
5862: PPUSH
5863: CALL_OW 308
5867: IFFALSE 6475
5869: GO 5871
5871: DISABLE
5872: LD_INT 0
5874: PPUSH
5875: PPUSH
5876: PPUSH
5877: PPUSH
5878: PPUSH
5879: PPUSH
// begin if macmilan_use_radio then
5880: LD_EXP 6
5884: IFFALSE 5893
// SetAchievement ( ACH_RADIO ) ;
5886: LD_STRING ACH_RADIO
5888: PPUSH
5889: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5893: LD_EXP 13
5897: NOT
5898: PUSH
5899: LD_EXP 7
5903: AND
5904: PUSH
5905: LD_EXP 17
5909: PPUSH
5910: CALL_OW 302
5914: AND
5915: PUSH
5916: LD_EXP 12
5920: NOT
5921: PUSH
5922: LD_EXP 4
5926: AND
5927: PUSH
5928: LD_EXP 16
5932: PPUSH
5933: CALL_OW 302
5937: AND
5938: OR
5939: IFFALSE 5980
// case Query ( Q2 ) of 1 :
5941: LD_STRING Q2
5943: PPUSH
5944: CALL_OW 97
5948: PUSH
5949: LD_INT 1
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 5968
5957: POP
// wait_for_them := true ; 2 :
5958: LD_ADDR_VAR 0 3
5962: PUSH
5963: LD_INT 1
5965: ST_TO_ADDR
5966: GO 5980
5968: LD_INT 2
5970: DOUBLE
5971: EQUAL
5972: IFTRUE 5976
5974: GO 5979
5976: POP
// ; end ;
5977: GO 5980
5979: POP
// if wait_for_them then
5980: LD_VAR 0 3
5984: IFFALSE 6097
// repeat wait ( 0 0$01 ) ;
5986: LD_INT 35
5988: PPUSH
5989: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5993: LD_EXP 13
5997: PUSH
5998: LD_EXP 12
6002: AND
6003: PUSH
6004: LD_EXP 13
6008: PUSH
6009: LD_EXP 4
6013: NOT
6014: PUSH
6015: LD_EXP 16
6019: PPUSH
6020: CALL_OW 303
6024: OR
6025: PUSH
6026: LD_EXP 16
6030: PPUSH
6031: CALL_OW 301
6035: OR
6036: AND
6037: OR
6038: PUSH
6039: LD_EXP 12
6043: PUSH
6044: LD_EXP 7
6048: NOT
6049: PUSH
6050: LD_EXP 17
6054: PPUSH
6055: CALL_OW 303
6059: OR
6060: PUSH
6061: LD_EXP 17
6065: PPUSH
6066: CALL_OW 301
6070: OR
6071: AND
6072: OR
6073: PUSH
6074: LD_EXP 16
6078: PPUSH
6079: CALL_OW 301
6083: PUSH
6084: LD_EXP 17
6088: PPUSH
6089: CALL_OW 301
6093: AND
6094: OR
6095: IFFALSE 5986
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6097: LD_EXP 15
6101: PPUSH
6102: CALL_OW 256
6106: PPUSH
6107: LD_STRING 01_JMMLifePoints_1
6109: PPUSH
6110: CALL_OW 39
// RemoveUnit ( JMM ) ;
6114: LD_EXP 15
6118: PPUSH
6119: CALL_OW 64
// to_reward := [ JMM ] ;
6123: LD_ADDR_VAR 0 2
6127: PUSH
6128: LD_EXP 15
6132: PUSH
6133: EMPTY
6134: LIST
6135: ST_TO_ADDR
// if bobby_saved then
6136: LD_EXP 12
6140: IFFALSE 6158
// to_reward := to_reward ^ Bobby ;
6142: LD_ADDR_VAR 0 2
6146: PUSH
6147: LD_VAR 0 2
6151: PUSH
6152: LD_EXP 16
6156: ADD
6157: ST_TO_ADDR
// if cyrus_saved then
6158: LD_EXP 13
6162: IFFALSE 6180
// to_reward := to_reward ^ Cyrus ;
6164: LD_ADDR_VAR 0 2
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: LD_EXP 17
6178: ADD
6179: ST_TO_ADDR
// m1 := true ;
6180: LD_ADDR_VAR 0 4
6184: PUSH
6185: LD_INT 1
6187: ST_TO_ADDR
// m2 := bobby_saved ;
6188: LD_ADDR_VAR 0 5
6192: PUSH
6193: LD_EXP 12
6197: ST_TO_ADDR
// m3 := cyrus_saved ;
6198: LD_ADDR_VAR 0 6
6202: PUSH
6203: LD_EXP 13
6207: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6208: LD_STRING JMM
6210: PPUSH
6211: LD_INT 1
6213: PPUSH
6214: CALL_OW 101
// if not bobby_in_squad then
6218: LD_EXP 4
6222: NOT
6223: IFFALSE 6236
// AddMedal ( Bobby , - 1 ) ;
6225: LD_STRING Bobby
6227: PPUSH
6228: LD_INT 1
6230: NEG
6231: PPUSH
6232: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6236: LD_EXP 12
6240: NOT
6241: PUSH
6242: LD_EXP 16
6246: PPUSH
6247: CALL_OW 303
6251: PUSH
6252: LD_EXP 16
6256: PPUSH
6257: CALL_OW 301
6261: OR
6262: AND
6263: IFFALSE 6276
// AddMedal ( Bobby , - 2 ) ;
6265: LD_STRING Bobby
6267: PPUSH
6268: LD_INT 2
6270: NEG
6271: PPUSH
6272: CALL_OW 101
// if not cyrus_in_squad then
6276: LD_EXP 7
6280: NOT
6281: IFFALSE 6294
// AddMedal ( Cyrus , - 1 ) ;
6283: LD_STRING Cyrus
6285: PPUSH
6286: LD_INT 1
6288: NEG
6289: PPUSH
6290: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6294: LD_EXP 13
6298: NOT
6299: PUSH
6300: LD_EXP 17
6304: PPUSH
6305: CALL_OW 303
6309: PUSH
6310: LD_EXP 17
6314: PPUSH
6315: CALL_OW 301
6319: OR
6320: AND
6321: IFFALSE 6334
// AddMedal ( Cyrus , - 2 ) ;
6323: LD_STRING Cyrus
6325: PPUSH
6326: LD_INT 2
6328: NEG
6329: PPUSH
6330: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6334: LD_OWVAR 67
6338: PUSH
6339: LD_INT 3
6341: EQUAL
6342: PUSH
6343: LD_VAR 0 4
6347: AND
6348: PUSH
6349: LD_VAR 0 5
6353: AND
6354: PUSH
6355: LD_VAR 0 6
6359: AND
6360: IFFALSE 6372
// SetAchievementEX ( ACH_AMER , 1 ) ;
6362: LD_STRING ACH_AMER
6364: PPUSH
6365: LD_INT 1
6367: PPUSH
6368: CALL_OW 564
// GiveMedals ( MAIN ) ;
6372: LD_STRING MAIN
6374: PPUSH
6375: CALL_OW 102
// RewardPeople ( to_reward ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: CALL_OW 43
// if bobby_saved then
6388: LD_EXP 12
6392: IFFALSE 6412
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6394: LD_EXP 16
6398: PPUSH
6399: LD_EXP 2
6403: PUSH
6404: LD_STRING Bobby
6406: STR
6407: PPUSH
6408: CALL_OW 38
// if cyrus_saved then
6412: LD_EXP 13
6416: IFFALSE 6436
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6418: LD_EXP 17
6422: PPUSH
6423: LD_EXP 2
6427: PUSH
6428: LD_STRING Cyrus
6430: STR
6431: PPUSH
6432: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6436: LD_EXP 15
6440: PPUSH
6441: LD_EXP 2
6445: PUSH
6446: LD_STRING JMM
6448: STR
6449: PPUSH
6450: CALL_OW 38
// if tick <= 3 3$00 then
6454: LD_OWVAR 1
6458: PUSH
6459: LD_INT 6300
6461: LESSEQUAL
6462: IFFALSE 6471
// SetAchievement ( ACH_ASPEED_1 ) ;
6464: LD_STRING ACH_ASPEED_1
6466: PPUSH
6467: CALL_OW 543
// YouWin ;
6471: CALL_OW 103
// end ; end_of_file end_of_file
6475: PPOPN 6
6477: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6478: GO 6480
6480: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6481: LD_STRING initStreamRollete();
6483: PPUSH
6484: CALL_OW 559
// InitStreamMode ;
6488: CALL 6497 0 0
// DefineStreamItems ( ) ;
6492: CALL 6937 0 0
// end ;
6496: END
// function InitStreamMode ; begin
6497: LD_INT 0
6499: PPUSH
// streamModeActive := false ;
6500: LD_ADDR_EXP 26
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// normalCounter := 36 ;
6508: LD_ADDR_EXP 27
6512: PUSH
6513: LD_INT 36
6515: ST_TO_ADDR
// hardcoreCounter := 16 ;
6516: LD_ADDR_EXP 28
6520: PUSH
6521: LD_INT 16
6523: ST_TO_ADDR
// sRocket := false ;
6524: LD_ADDR_EXP 31
6528: PUSH
6529: LD_INT 0
6531: ST_TO_ADDR
// sSpeed := false ;
6532: LD_ADDR_EXP 30
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// sEngine := false ;
6540: LD_ADDR_EXP 32
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// sSpec := false ;
6548: LD_ADDR_EXP 29
6552: PUSH
6553: LD_INT 0
6555: ST_TO_ADDR
// sLevel := false ;
6556: LD_ADDR_EXP 33
6560: PUSH
6561: LD_INT 0
6563: ST_TO_ADDR
// sArmoury := false ;
6564: LD_ADDR_EXP 34
6568: PUSH
6569: LD_INT 0
6571: ST_TO_ADDR
// sRadar := false ;
6572: LD_ADDR_EXP 35
6576: PUSH
6577: LD_INT 0
6579: ST_TO_ADDR
// sBunker := false ;
6580: LD_ADDR_EXP 36
6584: PUSH
6585: LD_INT 0
6587: ST_TO_ADDR
// sHack := false ;
6588: LD_ADDR_EXP 37
6592: PUSH
6593: LD_INT 0
6595: ST_TO_ADDR
// sFire := false ;
6596: LD_ADDR_EXP 38
6600: PUSH
6601: LD_INT 0
6603: ST_TO_ADDR
// sRefresh := false ;
6604: LD_ADDR_EXP 39
6608: PUSH
6609: LD_INT 0
6611: ST_TO_ADDR
// sExp := false ;
6612: LD_ADDR_EXP 40
6616: PUSH
6617: LD_INT 0
6619: ST_TO_ADDR
// sDepot := false ;
6620: LD_ADDR_EXP 41
6624: PUSH
6625: LD_INT 0
6627: ST_TO_ADDR
// sFlag := false ;
6628: LD_ADDR_EXP 42
6632: PUSH
6633: LD_INT 0
6635: ST_TO_ADDR
// sKamikadze := false ;
6636: LD_ADDR_EXP 50
6640: PUSH
6641: LD_INT 0
6643: ST_TO_ADDR
// sTroll := false ;
6644: LD_ADDR_EXP 51
6648: PUSH
6649: LD_INT 0
6651: ST_TO_ADDR
// sSlow := false ;
6652: LD_ADDR_EXP 52
6656: PUSH
6657: LD_INT 0
6659: ST_TO_ADDR
// sLack := false ;
6660: LD_ADDR_EXP 53
6664: PUSH
6665: LD_INT 0
6667: ST_TO_ADDR
// sTank := false ;
6668: LD_ADDR_EXP 55
6672: PUSH
6673: LD_INT 0
6675: ST_TO_ADDR
// sRemote := false ;
6676: LD_ADDR_EXP 56
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// sPowell := false ;
6684: LD_ADDR_EXP 57
6688: PUSH
6689: LD_INT 0
6691: ST_TO_ADDR
// sTeleport := false ;
6692: LD_ADDR_EXP 60
6696: PUSH
6697: LD_INT 0
6699: ST_TO_ADDR
// sOilTower := false ;
6700: LD_ADDR_EXP 62
6704: PUSH
6705: LD_INT 0
6707: ST_TO_ADDR
// sShovel := false ;
6708: LD_ADDR_EXP 63
6712: PUSH
6713: LD_INT 0
6715: ST_TO_ADDR
// sSheik := false ;
6716: LD_ADDR_EXP 64
6720: PUSH
6721: LD_INT 0
6723: ST_TO_ADDR
// sEarthquake := false ;
6724: LD_ADDR_EXP 66
6728: PUSH
6729: LD_INT 0
6731: ST_TO_ADDR
// sAI := false ;
6732: LD_ADDR_EXP 67
6736: PUSH
6737: LD_INT 0
6739: ST_TO_ADDR
// sCargo := false ;
6740: LD_ADDR_EXP 70
6744: PUSH
6745: LD_INT 0
6747: ST_TO_ADDR
// sDLaser := false ;
6748: LD_ADDR_EXP 71
6752: PUSH
6753: LD_INT 0
6755: ST_TO_ADDR
// sExchange := false ;
6756: LD_ADDR_EXP 72
6760: PUSH
6761: LD_INT 0
6763: ST_TO_ADDR
// sFac := false ;
6764: LD_ADDR_EXP 73
6768: PUSH
6769: LD_INT 0
6771: ST_TO_ADDR
// sPower := false ;
6772: LD_ADDR_EXP 74
6776: PUSH
6777: LD_INT 0
6779: ST_TO_ADDR
// sRandom := false ;
6780: LD_ADDR_EXP 75
6784: PUSH
6785: LD_INT 0
6787: ST_TO_ADDR
// sShield := false ;
6788: LD_ADDR_EXP 76
6792: PUSH
6793: LD_INT 0
6795: ST_TO_ADDR
// sTime := false ;
6796: LD_ADDR_EXP 77
6800: PUSH
6801: LD_INT 0
6803: ST_TO_ADDR
// sTools := false ;
6804: LD_ADDR_EXP 78
6808: PUSH
6809: LD_INT 0
6811: ST_TO_ADDR
// sSold := false ;
6812: LD_ADDR_EXP 43
6816: PUSH
6817: LD_INT 0
6819: ST_TO_ADDR
// sDiff := false ;
6820: LD_ADDR_EXP 44
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// sFog := false ;
6828: LD_ADDR_EXP 47
6832: PUSH
6833: LD_INT 0
6835: ST_TO_ADDR
// sReset := false ;
6836: LD_ADDR_EXP 48
6840: PUSH
6841: LD_INT 0
6843: ST_TO_ADDR
// sSun := false ;
6844: LD_ADDR_EXP 49
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// sTiger := false ;
6852: LD_ADDR_EXP 45
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// sBomb := false ;
6860: LD_ADDR_EXP 46
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// sWound := false ;
6868: LD_ADDR_EXP 54
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// sBetray := false ;
6876: LD_ADDR_EXP 58
6880: PUSH
6881: LD_INT 0
6883: ST_TO_ADDR
// sContamin := false ;
6884: LD_ADDR_EXP 59
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// sOil := false ;
6892: LD_ADDR_EXP 61
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// sStu := false ;
6900: LD_ADDR_EXP 65
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// sBazooka := false ;
6908: LD_ADDR_EXP 68
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// sMortar := false ;
6916: LD_ADDR_EXP 69
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// sRanger := false ;
6924: LD_ADDR_EXP 79
6928: PUSH
6929: LD_INT 0
6931: ST_TO_ADDR
// end ;
6932: LD_VAR 0 1
6936: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6937: LD_INT 0
6939: PPUSH
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
// result := [ ] ;
6944: LD_ADDR_VAR 0 1
6948: PUSH
6949: EMPTY
6950: ST_TO_ADDR
// if campaign_id = 1 then
6951: LD_OWVAR 69
6955: PUSH
6956: LD_INT 1
6958: EQUAL
6959: IFFALSE 9897
// begin case mission_number of 1 :
6961: LD_OWVAR 70
6965: PUSH
6966: LD_INT 1
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6974
6972: GO 7038
6974: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6975: LD_ADDR_VAR 0 1
6979: PUSH
6980: LD_INT 2
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: LD_INT 11
6988: PUSH
6989: LD_INT 12
6991: PUSH
6992: LD_INT 15
6994: PUSH
6995: LD_INT 16
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_INT 23
7003: PUSH
7004: LD_INT 26
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 101
7020: PUSH
7021: LD_INT 102
7023: PUSH
7024: LD_INT 106
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: ST_TO_ADDR
7036: GO 9895
7038: LD_INT 2
7040: DOUBLE
7041: EQUAL
7042: IFTRUE 7046
7044: GO 7118
7046: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7047: LD_ADDR_VAR 0 1
7051: PUSH
7052: LD_INT 2
7054: PUSH
7055: LD_INT 4
7057: PUSH
7058: LD_INT 11
7060: PUSH
7061: LD_INT 12
7063: PUSH
7064: LD_INT 15
7066: PUSH
7067: LD_INT 16
7069: PUSH
7070: LD_INT 22
7072: PUSH
7073: LD_INT 23
7075: PUSH
7076: LD_INT 26
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 101
7092: PUSH
7093: LD_INT 102
7095: PUSH
7096: LD_INT 105
7098: PUSH
7099: LD_INT 106
7101: PUSH
7102: LD_INT 108
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 9895
7118: LD_INT 3
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7202
7126: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7127: LD_ADDR_VAR 0 1
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: LD_INT 11
7143: PUSH
7144: LD_INT 12
7146: PUSH
7147: LD_INT 15
7149: PUSH
7150: LD_INT 16
7152: PUSH
7153: LD_INT 22
7155: PUSH
7156: LD_INT 26
7158: PUSH
7159: LD_INT 36
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 101
7176: PUSH
7177: LD_INT 102
7179: PUSH
7180: LD_INT 105
7182: PUSH
7183: LD_INT 106
7185: PUSH
7186: LD_INT 108
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: ST_TO_ADDR
7200: GO 9895
7202: LD_INT 4
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7294
7210: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7211: LD_ADDR_VAR 0 1
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 4
7221: PUSH
7222: LD_INT 5
7224: PUSH
7225: LD_INT 8
7227: PUSH
7228: LD_INT 11
7230: PUSH
7231: LD_INT 12
7233: PUSH
7234: LD_INT 15
7236: PUSH
7237: LD_INT 16
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 26
7248: PUSH
7249: LD_INT 36
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 101
7268: PUSH
7269: LD_INT 102
7271: PUSH
7272: LD_INT 105
7274: PUSH
7275: LD_INT 106
7277: PUSH
7278: LD_INT 108
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: ST_TO_ADDR
7292: GO 9895
7294: LD_INT 5
7296: DOUBLE
7297: EQUAL
7298: IFTRUE 7302
7300: GO 7402
7302: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7303: LD_ADDR_VAR 0 1
7307: PUSH
7308: LD_INT 2
7310: PUSH
7311: LD_INT 4
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 8
7322: PUSH
7323: LD_INT 11
7325: PUSH
7326: LD_INT 12
7328: PUSH
7329: LD_INT 15
7331: PUSH
7332: LD_INT 16
7334: PUSH
7335: LD_INT 22
7337: PUSH
7338: LD_INT 23
7340: PUSH
7341: LD_INT 25
7343: PUSH
7344: LD_INT 26
7346: PUSH
7347: LD_INT 36
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 101
7368: PUSH
7369: LD_INT 102
7371: PUSH
7372: LD_INT 105
7374: PUSH
7375: LD_INT 106
7377: PUSH
7378: LD_INT 108
7380: PUSH
7381: LD_INT 109
7383: PUSH
7384: LD_INT 112
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: ST_TO_ADDR
7400: GO 9895
7402: LD_INT 6
7404: DOUBLE
7405: EQUAL
7406: IFTRUE 7410
7408: GO 7530
7410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7411: LD_ADDR_VAR 0 1
7415: PUSH
7416: LD_INT 2
7418: PUSH
7419: LD_INT 4
7421: PUSH
7422: LD_INT 5
7424: PUSH
7425: LD_INT 6
7427: PUSH
7428: LD_INT 8
7430: PUSH
7431: LD_INT 11
7433: PUSH
7434: LD_INT 12
7436: PUSH
7437: LD_INT 15
7439: PUSH
7440: LD_INT 16
7442: PUSH
7443: LD_INT 20
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 22
7451: PUSH
7452: LD_INT 23
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: LD_INT 26
7460: PUSH
7461: LD_INT 30
7463: PUSH
7464: LD_INT 31
7466: PUSH
7467: LD_INT 32
7469: PUSH
7470: LD_INT 36
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 101
7496: PUSH
7497: LD_INT 102
7499: PUSH
7500: LD_INT 105
7502: PUSH
7503: LD_INT 106
7505: PUSH
7506: LD_INT 108
7508: PUSH
7509: LD_INT 109
7511: PUSH
7512: LD_INT 112
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: ST_TO_ADDR
7528: GO 9895
7530: LD_INT 7
7532: DOUBLE
7533: EQUAL
7534: IFTRUE 7538
7536: GO 7638
7538: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7539: LD_ADDR_VAR 0 1
7543: PUSH
7544: LD_INT 2
7546: PUSH
7547: LD_INT 4
7549: PUSH
7550: LD_INT 5
7552: PUSH
7553: LD_INT 7
7555: PUSH
7556: LD_INT 11
7558: PUSH
7559: LD_INT 12
7561: PUSH
7562: LD_INT 15
7564: PUSH
7565: LD_INT 16
7567: PUSH
7568: LD_INT 20
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 23
7579: PUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 26
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 101
7604: PUSH
7605: LD_INT 102
7607: PUSH
7608: LD_INT 103
7610: PUSH
7611: LD_INT 105
7613: PUSH
7614: LD_INT 106
7616: PUSH
7617: LD_INT 108
7619: PUSH
7620: LD_INT 112
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ST_TO_ADDR
7636: GO 9895
7638: LD_INT 8
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7774
7646: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7647: LD_ADDR_VAR 0 1
7651: PUSH
7652: LD_INT 2
7654: PUSH
7655: LD_INT 4
7657: PUSH
7658: LD_INT 5
7660: PUSH
7661: LD_INT 6
7663: PUSH
7664: LD_INT 7
7666: PUSH
7667: LD_INT 8
7669: PUSH
7670: LD_INT 11
7672: PUSH
7673: LD_INT 12
7675: PUSH
7676: LD_INT 15
7678: PUSH
7679: LD_INT 16
7681: PUSH
7682: LD_INT 20
7684: PUSH
7685: LD_INT 21
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 23
7693: PUSH
7694: LD_INT 25
7696: PUSH
7697: LD_INT 26
7699: PUSH
7700: LD_INT 30
7702: PUSH
7703: LD_INT 31
7705: PUSH
7706: LD_INT 32
7708: PUSH
7709: LD_INT 36
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 101
7736: PUSH
7737: LD_INT 102
7739: PUSH
7740: LD_INT 103
7742: PUSH
7743: LD_INT 105
7745: PUSH
7746: LD_INT 106
7748: PUSH
7749: LD_INT 108
7751: PUSH
7752: LD_INT 109
7754: PUSH
7755: LD_INT 112
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: ST_TO_ADDR
7772: GO 9895
7774: LD_INT 9
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7918
7782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7783: LD_ADDR_VAR 0 1
7787: PUSH
7788: LD_INT 2
7790: PUSH
7791: LD_INT 4
7793: PUSH
7794: LD_INT 5
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 8
7805: PUSH
7806: LD_INT 11
7808: PUSH
7809: LD_INT 12
7811: PUSH
7812: LD_INT 15
7814: PUSH
7815: LD_INT 16
7817: PUSH
7818: LD_INT 20
7820: PUSH
7821: LD_INT 21
7823: PUSH
7824: LD_INT 22
7826: PUSH
7827: LD_INT 23
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 26
7835: PUSH
7836: LD_INT 28
7838: PUSH
7839: LD_INT 30
7841: PUSH
7842: LD_INT 31
7844: PUSH
7845: LD_INT 32
7847: PUSH
7848: LD_INT 36
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 101
7876: PUSH
7877: LD_INT 102
7879: PUSH
7880: LD_INT 103
7882: PUSH
7883: LD_INT 105
7885: PUSH
7886: LD_INT 106
7888: PUSH
7889: LD_INT 108
7891: PUSH
7892: LD_INT 109
7894: PUSH
7895: LD_INT 112
7897: PUSH
7898: LD_INT 114
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: ST_TO_ADDR
7916: GO 9895
7918: LD_INT 10
7920: DOUBLE
7921: EQUAL
7922: IFTRUE 7926
7924: GO 8110
7926: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7927: LD_ADDR_VAR 0 1
7931: PUSH
7932: LD_INT 2
7934: PUSH
7935: LD_INT 4
7937: PUSH
7938: LD_INT 5
7940: PUSH
7941: LD_INT 6
7943: PUSH
7944: LD_INT 7
7946: PUSH
7947: LD_INT 8
7949: PUSH
7950: LD_INT 9
7952: PUSH
7953: LD_INT 10
7955: PUSH
7956: LD_INT 11
7958: PUSH
7959: LD_INT 12
7961: PUSH
7962: LD_INT 13
7964: PUSH
7965: LD_INT 14
7967: PUSH
7968: LD_INT 15
7970: PUSH
7971: LD_INT 16
7973: PUSH
7974: LD_INT 17
7976: PUSH
7977: LD_INT 18
7979: PUSH
7980: LD_INT 19
7982: PUSH
7983: LD_INT 20
7985: PUSH
7986: LD_INT 21
7988: PUSH
7989: LD_INT 22
7991: PUSH
7992: LD_INT 23
7994: PUSH
7995: LD_INT 24
7997: PUSH
7998: LD_INT 25
8000: PUSH
8001: LD_INT 26
8003: PUSH
8004: LD_INT 28
8006: PUSH
8007: LD_INT 30
8009: PUSH
8010: LD_INT 31
8012: PUSH
8013: LD_INT 32
8015: PUSH
8016: LD_INT 36
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 101
8052: PUSH
8053: LD_INT 102
8055: PUSH
8056: LD_INT 103
8058: PUSH
8059: LD_INT 104
8061: PUSH
8062: LD_INT 105
8064: PUSH
8065: LD_INT 106
8067: PUSH
8068: LD_INT 107
8070: PUSH
8071: LD_INT 108
8073: PUSH
8074: LD_INT 109
8076: PUSH
8077: LD_INT 110
8079: PUSH
8080: LD_INT 111
8082: PUSH
8083: LD_INT 112
8085: PUSH
8086: LD_INT 114
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: ST_TO_ADDR
8108: GO 9895
8110: LD_INT 11
8112: DOUBLE
8113: EQUAL
8114: IFTRUE 8118
8116: GO 8310
8118: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8119: LD_ADDR_VAR 0 1
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 6
8138: PUSH
8139: LD_INT 7
8141: PUSH
8142: LD_INT 8
8144: PUSH
8145: LD_INT 9
8147: PUSH
8148: LD_INT 10
8150: PUSH
8151: LD_INT 11
8153: PUSH
8154: LD_INT 12
8156: PUSH
8157: LD_INT 13
8159: PUSH
8160: LD_INT 14
8162: PUSH
8163: LD_INT 15
8165: PUSH
8166: LD_INT 16
8168: PUSH
8169: LD_INT 17
8171: PUSH
8172: LD_INT 18
8174: PUSH
8175: LD_INT 19
8177: PUSH
8178: LD_INT 20
8180: PUSH
8181: LD_INT 21
8183: PUSH
8184: LD_INT 22
8186: PUSH
8187: LD_INT 23
8189: PUSH
8190: LD_INT 24
8192: PUSH
8193: LD_INT 25
8195: PUSH
8196: LD_INT 26
8198: PUSH
8199: LD_INT 28
8201: PUSH
8202: LD_INT 30
8204: PUSH
8205: LD_INT 31
8207: PUSH
8208: LD_INT 32
8210: PUSH
8211: LD_INT 34
8213: PUSH
8214: LD_INT 36
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 101
8252: PUSH
8253: LD_INT 102
8255: PUSH
8256: LD_INT 103
8258: PUSH
8259: LD_INT 104
8261: PUSH
8262: LD_INT 105
8264: PUSH
8265: LD_INT 106
8267: PUSH
8268: LD_INT 107
8270: PUSH
8271: LD_INT 108
8273: PUSH
8274: LD_INT 109
8276: PUSH
8277: LD_INT 110
8279: PUSH
8280: LD_INT 111
8282: PUSH
8283: LD_INT 112
8285: PUSH
8286: LD_INT 114
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: ST_TO_ADDR
8308: GO 9895
8310: LD_INT 12
8312: DOUBLE
8313: EQUAL
8314: IFTRUE 8318
8316: GO 8526
8318: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_INT 1
8326: PUSH
8327: LD_INT 2
8329: PUSH
8330: LD_INT 3
8332: PUSH
8333: LD_INT 4
8335: PUSH
8336: LD_INT 5
8338: PUSH
8339: LD_INT 6
8341: PUSH
8342: LD_INT 7
8344: PUSH
8345: LD_INT 8
8347: PUSH
8348: LD_INT 9
8350: PUSH
8351: LD_INT 10
8353: PUSH
8354: LD_INT 11
8356: PUSH
8357: LD_INT 12
8359: PUSH
8360: LD_INT 13
8362: PUSH
8363: LD_INT 14
8365: PUSH
8366: LD_INT 15
8368: PUSH
8369: LD_INT 16
8371: PUSH
8372: LD_INT 17
8374: PUSH
8375: LD_INT 18
8377: PUSH
8378: LD_INT 19
8380: PUSH
8381: LD_INT 20
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 22
8389: PUSH
8390: LD_INT 23
8392: PUSH
8393: LD_INT 24
8395: PUSH
8396: LD_INT 25
8398: PUSH
8399: LD_INT 26
8401: PUSH
8402: LD_INT 27
8404: PUSH
8405: LD_INT 28
8407: PUSH
8408: LD_INT 30
8410: PUSH
8411: LD_INT 31
8413: PUSH
8414: LD_INT 32
8416: PUSH
8417: LD_INT 33
8419: PUSH
8420: LD_INT 34
8422: PUSH
8423: LD_INT 36
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 101
8464: PUSH
8465: LD_INT 102
8467: PUSH
8468: LD_INT 103
8470: PUSH
8471: LD_INT 104
8473: PUSH
8474: LD_INT 105
8476: PUSH
8477: LD_INT 106
8479: PUSH
8480: LD_INT 107
8482: PUSH
8483: LD_INT 108
8485: PUSH
8486: LD_INT 109
8488: PUSH
8489: LD_INT 110
8491: PUSH
8492: LD_INT 111
8494: PUSH
8495: LD_INT 112
8497: PUSH
8498: LD_INT 113
8500: PUSH
8501: LD_INT 114
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
8524: GO 9895
8526: LD_INT 13
8528: DOUBLE
8529: EQUAL
8530: IFTRUE 8534
8532: GO 8730
8534: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8535: LD_ADDR_VAR 0 1
8539: PUSH
8540: LD_INT 1
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 3
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: LD_INT 5
8554: PUSH
8555: LD_INT 8
8557: PUSH
8558: LD_INT 9
8560: PUSH
8561: LD_INT 10
8563: PUSH
8564: LD_INT 11
8566: PUSH
8567: LD_INT 12
8569: PUSH
8570: LD_INT 14
8572: PUSH
8573: LD_INT 15
8575: PUSH
8576: LD_INT 16
8578: PUSH
8579: LD_INT 17
8581: PUSH
8582: LD_INT 18
8584: PUSH
8585: LD_INT 19
8587: PUSH
8588: LD_INT 20
8590: PUSH
8591: LD_INT 21
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 23
8599: PUSH
8600: LD_INT 24
8602: PUSH
8603: LD_INT 25
8605: PUSH
8606: LD_INT 26
8608: PUSH
8609: LD_INT 27
8611: PUSH
8612: LD_INT 28
8614: PUSH
8615: LD_INT 30
8617: PUSH
8618: LD_INT 31
8620: PUSH
8621: LD_INT 32
8623: PUSH
8624: LD_INT 33
8626: PUSH
8627: LD_INT 34
8629: PUSH
8630: LD_INT 36
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 101
8668: PUSH
8669: LD_INT 102
8671: PUSH
8672: LD_INT 103
8674: PUSH
8675: LD_INT 104
8677: PUSH
8678: LD_INT 105
8680: PUSH
8681: LD_INT 106
8683: PUSH
8684: LD_INT 107
8686: PUSH
8687: LD_INT 108
8689: PUSH
8690: LD_INT 109
8692: PUSH
8693: LD_INT 110
8695: PUSH
8696: LD_INT 111
8698: PUSH
8699: LD_INT 112
8701: PUSH
8702: LD_INT 113
8704: PUSH
8705: LD_INT 114
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: ST_TO_ADDR
8728: GO 9895
8730: LD_INT 14
8732: DOUBLE
8733: EQUAL
8734: IFTRUE 8738
8736: GO 8950
8738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: LD_INT 3
8752: PUSH
8753: LD_INT 4
8755: PUSH
8756: LD_INT 5
8758: PUSH
8759: LD_INT 6
8761: PUSH
8762: LD_INT 7
8764: PUSH
8765: LD_INT 8
8767: PUSH
8768: LD_INT 9
8770: PUSH
8771: LD_INT 10
8773: PUSH
8774: LD_INT 11
8776: PUSH
8777: LD_INT 12
8779: PUSH
8780: LD_INT 13
8782: PUSH
8783: LD_INT 14
8785: PUSH
8786: LD_INT 15
8788: PUSH
8789: LD_INT 16
8791: PUSH
8792: LD_INT 17
8794: PUSH
8795: LD_INT 18
8797: PUSH
8798: LD_INT 19
8800: PUSH
8801: LD_INT 20
8803: PUSH
8804: LD_INT 21
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_INT 23
8812: PUSH
8813: LD_INT 24
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 26
8821: PUSH
8822: LD_INT 27
8824: PUSH
8825: LD_INT 28
8827: PUSH
8828: LD_INT 29
8830: PUSH
8831: LD_INT 30
8833: PUSH
8834: LD_INT 31
8836: PUSH
8837: LD_INT 32
8839: PUSH
8840: LD_INT 33
8842: PUSH
8843: LD_INT 34
8845: PUSH
8846: LD_INT 36
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 101
8888: PUSH
8889: LD_INT 102
8891: PUSH
8892: LD_INT 103
8894: PUSH
8895: LD_INT 104
8897: PUSH
8898: LD_INT 105
8900: PUSH
8901: LD_INT 106
8903: PUSH
8904: LD_INT 107
8906: PUSH
8907: LD_INT 108
8909: PUSH
8910: LD_INT 109
8912: PUSH
8913: LD_INT 110
8915: PUSH
8916: LD_INT 111
8918: PUSH
8919: LD_INT 112
8921: PUSH
8922: LD_INT 113
8924: PUSH
8925: LD_INT 114
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: ST_TO_ADDR
8948: GO 9895
8950: LD_INT 15
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 9170
8958: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8959: LD_ADDR_VAR 0 1
8963: PUSH
8964: LD_INT 1
8966: PUSH
8967: LD_INT 2
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: LD_INT 4
8975: PUSH
8976: LD_INT 5
8978: PUSH
8979: LD_INT 6
8981: PUSH
8982: LD_INT 7
8984: PUSH
8985: LD_INT 8
8987: PUSH
8988: LD_INT 9
8990: PUSH
8991: LD_INT 10
8993: PUSH
8994: LD_INT 11
8996: PUSH
8997: LD_INT 12
8999: PUSH
9000: LD_INT 13
9002: PUSH
9003: LD_INT 14
9005: PUSH
9006: LD_INT 15
9008: PUSH
9009: LD_INT 16
9011: PUSH
9012: LD_INT 17
9014: PUSH
9015: LD_INT 18
9017: PUSH
9018: LD_INT 19
9020: PUSH
9021: LD_INT 20
9023: PUSH
9024: LD_INT 21
9026: PUSH
9027: LD_INT 22
9029: PUSH
9030: LD_INT 23
9032: PUSH
9033: LD_INT 24
9035: PUSH
9036: LD_INT 25
9038: PUSH
9039: LD_INT 26
9041: PUSH
9042: LD_INT 27
9044: PUSH
9045: LD_INT 28
9047: PUSH
9048: LD_INT 29
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 31
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 34
9065: PUSH
9066: LD_INT 36
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 101
9108: PUSH
9109: LD_INT 102
9111: PUSH
9112: LD_INT 103
9114: PUSH
9115: LD_INT 104
9117: PUSH
9118: LD_INT 105
9120: PUSH
9121: LD_INT 106
9123: PUSH
9124: LD_INT 107
9126: PUSH
9127: LD_INT 108
9129: PUSH
9130: LD_INT 109
9132: PUSH
9133: LD_INT 110
9135: PUSH
9136: LD_INT 111
9138: PUSH
9139: LD_INT 112
9141: PUSH
9142: LD_INT 113
9144: PUSH
9145: LD_INT 114
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: ST_TO_ADDR
9168: GO 9895
9170: LD_INT 16
9172: DOUBLE
9173: EQUAL
9174: IFTRUE 9178
9176: GO 9302
9178: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9179: LD_ADDR_VAR 0 1
9183: PUSH
9184: LD_INT 2
9186: PUSH
9187: LD_INT 4
9189: PUSH
9190: LD_INT 5
9192: PUSH
9193: LD_INT 7
9195: PUSH
9196: LD_INT 11
9198: PUSH
9199: LD_INT 12
9201: PUSH
9202: LD_INT 15
9204: PUSH
9205: LD_INT 16
9207: PUSH
9208: LD_INT 20
9210: PUSH
9211: LD_INT 21
9213: PUSH
9214: LD_INT 22
9216: PUSH
9217: LD_INT 23
9219: PUSH
9220: LD_INT 25
9222: PUSH
9223: LD_INT 26
9225: PUSH
9226: LD_INT 30
9228: PUSH
9229: LD_INT 31
9231: PUSH
9232: LD_INT 32
9234: PUSH
9235: LD_INT 33
9237: PUSH
9238: LD_INT 34
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 101
9264: PUSH
9265: LD_INT 102
9267: PUSH
9268: LD_INT 103
9270: PUSH
9271: LD_INT 106
9273: PUSH
9274: LD_INT 108
9276: PUSH
9277: LD_INT 112
9279: PUSH
9280: LD_INT 113
9282: PUSH
9283: LD_INT 114
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: ST_TO_ADDR
9300: GO 9895
9302: LD_INT 17
9304: DOUBLE
9305: EQUAL
9306: IFTRUE 9310
9308: GO 9522
9310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9311: LD_ADDR_VAR 0 1
9315: PUSH
9316: LD_INT 1
9318: PUSH
9319: LD_INT 2
9321: PUSH
9322: LD_INT 3
9324: PUSH
9325: LD_INT 4
9327: PUSH
9328: LD_INT 5
9330: PUSH
9331: LD_INT 6
9333: PUSH
9334: LD_INT 7
9336: PUSH
9337: LD_INT 8
9339: PUSH
9340: LD_INT 9
9342: PUSH
9343: LD_INT 10
9345: PUSH
9346: LD_INT 11
9348: PUSH
9349: LD_INT 12
9351: PUSH
9352: LD_INT 13
9354: PUSH
9355: LD_INT 14
9357: PUSH
9358: LD_INT 15
9360: PUSH
9361: LD_INT 16
9363: PUSH
9364: LD_INT 17
9366: PUSH
9367: LD_INT 18
9369: PUSH
9370: LD_INT 19
9372: PUSH
9373: LD_INT 20
9375: PUSH
9376: LD_INT 21
9378: PUSH
9379: LD_INT 22
9381: PUSH
9382: LD_INT 23
9384: PUSH
9385: LD_INT 24
9387: PUSH
9388: LD_INT 25
9390: PUSH
9391: LD_INT 26
9393: PUSH
9394: LD_INT 27
9396: PUSH
9397: LD_INT 28
9399: PUSH
9400: LD_INT 29
9402: PUSH
9403: LD_INT 30
9405: PUSH
9406: LD_INT 31
9408: PUSH
9409: LD_INT 32
9411: PUSH
9412: LD_INT 33
9414: PUSH
9415: LD_INT 34
9417: PUSH
9418: LD_INT 36
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 101
9460: PUSH
9461: LD_INT 102
9463: PUSH
9464: LD_INT 103
9466: PUSH
9467: LD_INT 104
9469: PUSH
9470: LD_INT 105
9472: PUSH
9473: LD_INT 106
9475: PUSH
9476: LD_INT 107
9478: PUSH
9479: LD_INT 108
9481: PUSH
9482: LD_INT 109
9484: PUSH
9485: LD_INT 110
9487: PUSH
9488: LD_INT 111
9490: PUSH
9491: LD_INT 112
9493: PUSH
9494: LD_INT 113
9496: PUSH
9497: LD_INT 114
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: ST_TO_ADDR
9520: GO 9895
9522: LD_INT 18
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9666
9530: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9531: LD_ADDR_VAR 0 1
9535: PUSH
9536: LD_INT 2
9538: PUSH
9539: LD_INT 4
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: LD_INT 7
9547: PUSH
9548: LD_INT 11
9550: PUSH
9551: LD_INT 12
9553: PUSH
9554: LD_INT 15
9556: PUSH
9557: LD_INT 16
9559: PUSH
9560: LD_INT 20
9562: PUSH
9563: LD_INT 21
9565: PUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 23
9571: PUSH
9572: LD_INT 25
9574: PUSH
9575: LD_INT 26
9577: PUSH
9578: LD_INT 30
9580: PUSH
9581: LD_INT 31
9583: PUSH
9584: LD_INT 32
9586: PUSH
9587: LD_INT 33
9589: PUSH
9590: LD_INT 34
9592: PUSH
9593: LD_INT 35
9595: PUSH
9596: LD_INT 36
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 101
9624: PUSH
9625: LD_INT 102
9627: PUSH
9628: LD_INT 103
9630: PUSH
9631: LD_INT 106
9633: PUSH
9634: LD_INT 108
9636: PUSH
9637: LD_INT 112
9639: PUSH
9640: LD_INT 113
9642: PUSH
9643: LD_INT 114
9645: PUSH
9646: LD_INT 115
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: ST_TO_ADDR
9664: GO 9895
9666: LD_INT 19
9668: DOUBLE
9669: EQUAL
9670: IFTRUE 9674
9672: GO 9894
9674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9675: LD_ADDR_VAR 0 1
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 2
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 4
9691: PUSH
9692: LD_INT 5
9694: PUSH
9695: LD_INT 6
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 8
9703: PUSH
9704: LD_INT 9
9706: PUSH
9707: LD_INT 10
9709: PUSH
9710: LD_INT 11
9712: PUSH
9713: LD_INT 12
9715: PUSH
9716: LD_INT 13
9718: PUSH
9719: LD_INT 14
9721: PUSH
9722: LD_INT 15
9724: PUSH
9725: LD_INT 16
9727: PUSH
9728: LD_INT 17
9730: PUSH
9731: LD_INT 18
9733: PUSH
9734: LD_INT 19
9736: PUSH
9737: LD_INT 20
9739: PUSH
9740: LD_INT 21
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 23
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 25
9754: PUSH
9755: LD_INT 26
9757: PUSH
9758: LD_INT 27
9760: PUSH
9761: LD_INT 28
9763: PUSH
9764: LD_INT 29
9766: PUSH
9767: LD_INT 30
9769: PUSH
9770: LD_INT 31
9772: PUSH
9773: LD_INT 32
9775: PUSH
9776: LD_INT 33
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 35
9784: PUSH
9785: LD_INT 36
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 101
9828: PUSH
9829: LD_INT 102
9831: PUSH
9832: LD_INT 103
9834: PUSH
9835: LD_INT 104
9837: PUSH
9838: LD_INT 105
9840: PUSH
9841: LD_INT 106
9843: PUSH
9844: LD_INT 107
9846: PUSH
9847: LD_INT 108
9849: PUSH
9850: LD_INT 109
9852: PUSH
9853: LD_INT 110
9855: PUSH
9856: LD_INT 111
9858: PUSH
9859: LD_INT 112
9861: PUSH
9862: LD_INT 113
9864: PUSH
9865: LD_INT 114
9867: PUSH
9868: LD_INT 115
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: ST_TO_ADDR
9892: GO 9895
9894: POP
// end else
9895: GO 10114
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9897: LD_ADDR_VAR 0 1
9901: PUSH
9902: LD_INT 1
9904: PUSH
9905: LD_INT 2
9907: PUSH
9908: LD_INT 3
9910: PUSH
9911: LD_INT 4
9913: PUSH
9914: LD_INT 5
9916: PUSH
9917: LD_INT 6
9919: PUSH
9920: LD_INT 7
9922: PUSH
9923: LD_INT 8
9925: PUSH
9926: LD_INT 9
9928: PUSH
9929: LD_INT 10
9931: PUSH
9932: LD_INT 11
9934: PUSH
9935: LD_INT 12
9937: PUSH
9938: LD_INT 13
9940: PUSH
9941: LD_INT 14
9943: PUSH
9944: LD_INT 15
9946: PUSH
9947: LD_INT 16
9949: PUSH
9950: LD_INT 17
9952: PUSH
9953: LD_INT 18
9955: PUSH
9956: LD_INT 19
9958: PUSH
9959: LD_INT 20
9961: PUSH
9962: LD_INT 21
9964: PUSH
9965: LD_INT 22
9967: PUSH
9968: LD_INT 23
9970: PUSH
9971: LD_INT 24
9973: PUSH
9974: LD_INT 25
9976: PUSH
9977: LD_INT 26
9979: PUSH
9980: LD_INT 27
9982: PUSH
9983: LD_INT 28
9985: PUSH
9986: LD_INT 29
9988: PUSH
9989: LD_INT 30
9991: PUSH
9992: LD_INT 31
9994: PUSH
9995: LD_INT 32
9997: PUSH
9998: LD_INT 33
10000: PUSH
10001: LD_INT 34
10003: PUSH
10004: LD_INT 35
10006: PUSH
10007: LD_INT 36
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 101
10050: PUSH
10051: LD_INT 102
10053: PUSH
10054: LD_INT 103
10056: PUSH
10057: LD_INT 104
10059: PUSH
10060: LD_INT 105
10062: PUSH
10063: LD_INT 106
10065: PUSH
10066: LD_INT 107
10068: PUSH
10069: LD_INT 108
10071: PUSH
10072: LD_INT 109
10074: PUSH
10075: LD_INT 110
10077: PUSH
10078: LD_INT 111
10080: PUSH
10081: LD_INT 112
10083: PUSH
10084: LD_INT 113
10086: PUSH
10087: LD_INT 114
10089: PUSH
10090: LD_INT 115
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: ST_TO_ADDR
// if result then
10114: LD_VAR 0 1
10118: IFFALSE 10407
// begin normal :=  ;
10120: LD_ADDR_VAR 0 3
10124: PUSH
10125: LD_STRING 
10127: ST_TO_ADDR
// hardcore :=  ;
10128: LD_ADDR_VAR 0 4
10132: PUSH
10133: LD_STRING 
10135: ST_TO_ADDR
// for i = 1 to normalCounter do
10136: LD_ADDR_VAR 0 5
10140: PUSH
10141: DOUBLE
10142: LD_INT 1
10144: DEC
10145: ST_TO_ADDR
10146: LD_EXP 27
10150: PUSH
10151: FOR_TO
10152: IFFALSE 10253
// begin tmp := 0 ;
10154: LD_ADDR_VAR 0 2
10158: PUSH
10159: LD_STRING 0
10161: ST_TO_ADDR
// if result [ 1 ] then
10162: LD_VAR 0 1
10166: PUSH
10167: LD_INT 1
10169: ARRAY
10170: IFFALSE 10235
// if result [ 1 ] [ 1 ] = i then
10172: LD_VAR 0 1
10176: PUSH
10177: LD_INT 1
10179: ARRAY
10180: PUSH
10181: LD_INT 1
10183: ARRAY
10184: PUSH
10185: LD_VAR 0 5
10189: EQUAL
10190: IFFALSE 10235
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10192: LD_ADDR_VAR 0 1
10196: PUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_VAR 0 1
10209: PUSH
10210: LD_INT 1
10212: ARRAY
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 3
10221: PPUSH
10222: CALL_OW 1
10226: ST_TO_ADDR
// tmp := 1 ;
10227: LD_ADDR_VAR 0 2
10231: PUSH
10232: LD_STRING 1
10234: ST_TO_ADDR
// end ; normal := normal & tmp ;
10235: LD_ADDR_VAR 0 3
10239: PUSH
10240: LD_VAR 0 3
10244: PUSH
10245: LD_VAR 0 2
10249: STR
10250: ST_TO_ADDR
// end ;
10251: GO 10151
10253: POP
10254: POP
// for i = 1 to hardcoreCounter do
10255: LD_ADDR_VAR 0 5
10259: PUSH
10260: DOUBLE
10261: LD_INT 1
10263: DEC
10264: ST_TO_ADDR
10265: LD_EXP 28
10269: PUSH
10270: FOR_TO
10271: IFFALSE 10376
// begin tmp := 0 ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_STRING 0
10280: ST_TO_ADDR
// if result [ 2 ] then
10281: LD_VAR 0 1
10285: PUSH
10286: LD_INT 2
10288: ARRAY
10289: IFFALSE 10358
// if result [ 2 ] [ 1 ] = 100 + i then
10291: LD_VAR 0 1
10295: PUSH
10296: LD_INT 2
10298: ARRAY
10299: PUSH
10300: LD_INT 1
10302: ARRAY
10303: PUSH
10304: LD_INT 100
10306: PUSH
10307: LD_VAR 0 5
10311: PLUS
10312: EQUAL
10313: IFFALSE 10358
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10315: LD_ADDR_VAR 0 1
10319: PUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: LD_INT 2
10327: PPUSH
10328: LD_VAR 0 1
10332: PUSH
10333: LD_INT 2
10335: ARRAY
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: CALL_OW 3
10344: PPUSH
10345: CALL_OW 1
10349: ST_TO_ADDR
// tmp := 1 ;
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: LD_STRING 1
10357: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10358: LD_ADDR_VAR 0 4
10362: PUSH
10363: LD_VAR 0 4
10367: PUSH
10368: LD_VAR 0 2
10372: STR
10373: ST_TO_ADDR
// end ;
10374: GO 10270
10376: POP
10377: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10378: LD_STRING getStreamItemsFromMission("
10380: PUSH
10381: LD_VAR 0 3
10385: STR
10386: PUSH
10387: LD_STRING ","
10389: STR
10390: PUSH
10391: LD_VAR 0 4
10395: STR
10396: PUSH
10397: LD_STRING ")
10399: STR
10400: PPUSH
10401: CALL_OW 559
// end else
10405: GO 10414
// ToLua ( getStreamItemsFromMission("","") ) ;
10407: LD_STRING getStreamItemsFromMission("","")
10409: PPUSH
10410: CALL_OW 559
// end ;
10414: LD_VAR 0 1
10418: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
10419: LD_VAR 0 2
10423: PUSH
10424: LD_INT 100
10426: EQUAL
10427: IFFALSE 11376
// begin if not StreamModeActive then
10429: LD_EXP 26
10433: NOT
10434: IFFALSE 10444
// StreamModeActive := true ;
10436: LD_ADDR_EXP 26
10440: PUSH
10441: LD_INT 1
10443: ST_TO_ADDR
// if p3 = 0 then
10444: LD_VAR 0 3
10448: PUSH
10449: LD_INT 0
10451: EQUAL
10452: IFFALSE 10458
// InitStreamMode ;
10454: CALL 6497 0 0
// if p3 = 1 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 1
10465: EQUAL
10466: IFFALSE 10476
// sRocket := true ;
10468: LD_ADDR_EXP 31
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 2 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 2
10483: EQUAL
10484: IFFALSE 10494
// sSpeed := true ;
10486: LD_ADDR_EXP 30
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 3 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 3
10501: EQUAL
10502: IFFALSE 10512
// sEngine := true ;
10504: LD_ADDR_EXP 32
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 4 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 4
10519: EQUAL
10520: IFFALSE 10530
// sSpec := true ;
10522: LD_ADDR_EXP 29
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 5 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 5
10537: EQUAL
10538: IFFALSE 10548
// sLevel := true ;
10540: LD_ADDR_EXP 33
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 6 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 6
10555: EQUAL
10556: IFFALSE 10566
// sArmoury := true ;
10558: LD_ADDR_EXP 34
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 7 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 7
10573: EQUAL
10574: IFFALSE 10584
// sRadar := true ;
10576: LD_ADDR_EXP 35
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 8 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 8
10591: EQUAL
10592: IFFALSE 10602
// sBunker := true ;
10594: LD_ADDR_EXP 36
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 9 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 9
10609: EQUAL
10610: IFFALSE 10620
// sHack := true ;
10612: LD_ADDR_EXP 37
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 10 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 10
10627: EQUAL
10628: IFFALSE 10638
// sFire := true ;
10630: LD_ADDR_EXP 38
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// if p3 = 11 then
10638: LD_VAR 0 3
10642: PUSH
10643: LD_INT 11
10645: EQUAL
10646: IFFALSE 10656
// sRefresh := true ;
10648: LD_ADDR_EXP 39
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// if p3 = 12 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 12
10663: EQUAL
10664: IFFALSE 10674
// sExp := true ;
10666: LD_ADDR_EXP 40
10670: PUSH
10671: LD_INT 1
10673: ST_TO_ADDR
// if p3 = 13 then
10674: LD_VAR 0 3
10678: PUSH
10679: LD_INT 13
10681: EQUAL
10682: IFFALSE 10692
// sDepot := true ;
10684: LD_ADDR_EXP 41
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// if p3 = 14 then
10692: LD_VAR 0 3
10696: PUSH
10697: LD_INT 14
10699: EQUAL
10700: IFFALSE 10710
// sFlag := true ;
10702: LD_ADDR_EXP 42
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// if p3 = 15 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 15
10717: EQUAL
10718: IFFALSE 10728
// sKamikadze := true ;
10720: LD_ADDR_EXP 50
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// if p3 = 16 then
10728: LD_VAR 0 3
10732: PUSH
10733: LD_INT 16
10735: EQUAL
10736: IFFALSE 10746
// sTroll := true ;
10738: LD_ADDR_EXP 51
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if p3 = 17 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 17
10753: EQUAL
10754: IFFALSE 10764
// sSlow := true ;
10756: LD_ADDR_EXP 52
10760: PUSH
10761: LD_INT 1
10763: ST_TO_ADDR
// if p3 = 18 then
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 18
10771: EQUAL
10772: IFFALSE 10782
// sLack := true ;
10774: LD_ADDR_EXP 53
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if p3 = 19 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 19
10789: EQUAL
10790: IFFALSE 10800
// sTank := true ;
10792: LD_ADDR_EXP 55
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// if p3 = 20 then
10800: LD_VAR 0 3
10804: PUSH
10805: LD_INT 20
10807: EQUAL
10808: IFFALSE 10818
// sRemote := true ;
10810: LD_ADDR_EXP 56
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// if p3 = 21 then
10818: LD_VAR 0 3
10822: PUSH
10823: LD_INT 21
10825: EQUAL
10826: IFFALSE 10836
// sPowell := true ;
10828: LD_ADDR_EXP 57
10832: PUSH
10833: LD_INT 1
10835: ST_TO_ADDR
// if p3 = 22 then
10836: LD_VAR 0 3
10840: PUSH
10841: LD_INT 22
10843: EQUAL
10844: IFFALSE 10854
// sTeleport := true ;
10846: LD_ADDR_EXP 60
10850: PUSH
10851: LD_INT 1
10853: ST_TO_ADDR
// if p3 = 23 then
10854: LD_VAR 0 3
10858: PUSH
10859: LD_INT 23
10861: EQUAL
10862: IFFALSE 10872
// sOilTower := true ;
10864: LD_ADDR_EXP 62
10868: PUSH
10869: LD_INT 1
10871: ST_TO_ADDR
// if p3 = 24 then
10872: LD_VAR 0 3
10876: PUSH
10877: LD_INT 24
10879: EQUAL
10880: IFFALSE 10890
// sShovel := true ;
10882: LD_ADDR_EXP 63
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if p3 = 25 then
10890: LD_VAR 0 3
10894: PUSH
10895: LD_INT 25
10897: EQUAL
10898: IFFALSE 10908
// sSheik := true ;
10900: LD_ADDR_EXP 64
10904: PUSH
10905: LD_INT 1
10907: ST_TO_ADDR
// if p3 = 26 then
10908: LD_VAR 0 3
10912: PUSH
10913: LD_INT 26
10915: EQUAL
10916: IFFALSE 10926
// sEarthquake := true ;
10918: LD_ADDR_EXP 66
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if p3 = 27 then
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 27
10933: EQUAL
10934: IFFALSE 10944
// sAI := true ;
10936: LD_ADDR_EXP 67
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// if p3 = 28 then
10944: LD_VAR 0 3
10948: PUSH
10949: LD_INT 28
10951: EQUAL
10952: IFFALSE 10962
// sCargo := true ;
10954: LD_ADDR_EXP 70
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// if p3 = 29 then
10962: LD_VAR 0 3
10966: PUSH
10967: LD_INT 29
10969: EQUAL
10970: IFFALSE 10980
// sDLaser := true ;
10972: LD_ADDR_EXP 71
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// if p3 = 30 then
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 30
10987: EQUAL
10988: IFFALSE 10998
// sExchange := true ;
10990: LD_ADDR_EXP 72
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// if p3 = 31 then
10998: LD_VAR 0 3
11002: PUSH
11003: LD_INT 31
11005: EQUAL
11006: IFFALSE 11016
// sFac := true ;
11008: LD_ADDR_EXP 73
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if p3 = 32 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 32
11023: EQUAL
11024: IFFALSE 11034
// sPower := true ;
11026: LD_ADDR_EXP 74
11030: PUSH
11031: LD_INT 1
11033: ST_TO_ADDR
// if p3 = 33 then
11034: LD_VAR 0 3
11038: PUSH
11039: LD_INT 33
11041: EQUAL
11042: IFFALSE 11052
// sRandom := true ;
11044: LD_ADDR_EXP 75
11048: PUSH
11049: LD_INT 1
11051: ST_TO_ADDR
// if p3 = 34 then
11052: LD_VAR 0 3
11056: PUSH
11057: LD_INT 34
11059: EQUAL
11060: IFFALSE 11070
// sShield := true ;
11062: LD_ADDR_EXP 76
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// if p3 = 35 then
11070: LD_VAR 0 3
11074: PUSH
11075: LD_INT 35
11077: EQUAL
11078: IFFALSE 11088
// sTime := true ;
11080: LD_ADDR_EXP 77
11084: PUSH
11085: LD_INT 1
11087: ST_TO_ADDR
// if p3 = 36 then
11088: LD_VAR 0 3
11092: PUSH
11093: LD_INT 36
11095: EQUAL
11096: IFFALSE 11106
// sTools := true ;
11098: LD_ADDR_EXP 78
11102: PUSH
11103: LD_INT 1
11105: ST_TO_ADDR
// if p3 = 101 then
11106: LD_VAR 0 3
11110: PUSH
11111: LD_INT 101
11113: EQUAL
11114: IFFALSE 11124
// sSold := true ;
11116: LD_ADDR_EXP 43
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// if p3 = 102 then
11124: LD_VAR 0 3
11128: PUSH
11129: LD_INT 102
11131: EQUAL
11132: IFFALSE 11142
// sDiff := true ;
11134: LD_ADDR_EXP 44
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// if p3 = 103 then
11142: LD_VAR 0 3
11146: PUSH
11147: LD_INT 103
11149: EQUAL
11150: IFFALSE 11160
// sFog := true ;
11152: LD_ADDR_EXP 47
11156: PUSH
11157: LD_INT 1
11159: ST_TO_ADDR
// if p3 = 104 then
11160: LD_VAR 0 3
11164: PUSH
11165: LD_INT 104
11167: EQUAL
11168: IFFALSE 11178
// sReset := true ;
11170: LD_ADDR_EXP 48
11174: PUSH
11175: LD_INT 1
11177: ST_TO_ADDR
// if p3 = 105 then
11178: LD_VAR 0 3
11182: PUSH
11183: LD_INT 105
11185: EQUAL
11186: IFFALSE 11196
// sSun := true ;
11188: LD_ADDR_EXP 49
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// if p3 = 106 then
11196: LD_VAR 0 3
11200: PUSH
11201: LD_INT 106
11203: EQUAL
11204: IFFALSE 11214
// sTiger := true ;
11206: LD_ADDR_EXP 45
11210: PUSH
11211: LD_INT 1
11213: ST_TO_ADDR
// if p3 = 107 then
11214: LD_VAR 0 3
11218: PUSH
11219: LD_INT 107
11221: EQUAL
11222: IFFALSE 11232
// sBomb := true ;
11224: LD_ADDR_EXP 46
11228: PUSH
11229: LD_INT 1
11231: ST_TO_ADDR
// if p3 = 108 then
11232: LD_VAR 0 3
11236: PUSH
11237: LD_INT 108
11239: EQUAL
11240: IFFALSE 11250
// sWound := true ;
11242: LD_ADDR_EXP 54
11246: PUSH
11247: LD_INT 1
11249: ST_TO_ADDR
// if p3 = 109 then
11250: LD_VAR 0 3
11254: PUSH
11255: LD_INT 109
11257: EQUAL
11258: IFFALSE 11268
// sBetray := true ;
11260: LD_ADDR_EXP 58
11264: PUSH
11265: LD_INT 1
11267: ST_TO_ADDR
// if p3 = 110 then
11268: LD_VAR 0 3
11272: PUSH
11273: LD_INT 110
11275: EQUAL
11276: IFFALSE 11286
// sContamin := true ;
11278: LD_ADDR_EXP 59
11282: PUSH
11283: LD_INT 1
11285: ST_TO_ADDR
// if p3 = 111 then
11286: LD_VAR 0 3
11290: PUSH
11291: LD_INT 111
11293: EQUAL
11294: IFFALSE 11304
// sOil := true ;
11296: LD_ADDR_EXP 61
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// if p3 = 112 then
11304: LD_VAR 0 3
11308: PUSH
11309: LD_INT 112
11311: EQUAL
11312: IFFALSE 11322
// sStu := true ;
11314: LD_ADDR_EXP 65
11318: PUSH
11319: LD_INT 1
11321: ST_TO_ADDR
// if p3 = 113 then
11322: LD_VAR 0 3
11326: PUSH
11327: LD_INT 113
11329: EQUAL
11330: IFFALSE 11340
// sBazooka := true ;
11332: LD_ADDR_EXP 68
11336: PUSH
11337: LD_INT 1
11339: ST_TO_ADDR
// if p3 = 114 then
11340: LD_VAR 0 3
11344: PUSH
11345: LD_INT 114
11347: EQUAL
11348: IFFALSE 11358
// sMortar := true ;
11350: LD_ADDR_EXP 69
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// if p3 = 115 then
11358: LD_VAR 0 3
11362: PUSH
11363: LD_INT 115
11365: EQUAL
11366: IFFALSE 11376
// sRanger := true ;
11368: LD_ADDR_EXP 79
11372: PUSH
11373: LD_INT 1
11375: ST_TO_ADDR
// end ; end ;
11376: PPOPN 6
11378: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11379: LD_EXP 26
11383: PUSH
11384: LD_EXP 31
11388: AND
11389: IFFALSE 11513
11391: GO 11393
11393: DISABLE
11394: LD_INT 0
11396: PPUSH
11397: PPUSH
// begin enable ;
11398: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_OWVAR 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 34
11421: PUSH
11422: LD_INT 7
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 34
11431: PUSH
11432: LD_INT 45
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 34
11441: PUSH
11442: LD_INT 28
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 34
11451: PUSH
11452: LD_INT 47
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: ST_TO_ADDR
// if not tmp then
11475: LD_VAR 0 2
11479: NOT
11480: IFFALSE 11484
// exit ;
11482: GO 11513
// for i in tmp do
11484: LD_ADDR_VAR 0 1
11488: PUSH
11489: LD_VAR 0 2
11493: PUSH
11494: FOR_IN
11495: IFFALSE 11511
// begin SetLives ( i , 0 ) ;
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_INT 0
11504: PPUSH
11505: CALL_OW 234
// end ;
11509: GO 11494
11511: POP
11512: POP
// end ;
11513: PPOPN 2
11515: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11516: LD_EXP 26
11520: PUSH
11521: LD_EXP 32
11525: AND
11526: IFFALSE 11610
11528: GO 11530
11530: DISABLE
11531: LD_INT 0
11533: PPUSH
11534: PPUSH
// begin enable ;
11535: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11536: LD_ADDR_VAR 0 2
11540: PUSH
11541: LD_INT 22
11543: PUSH
11544: LD_OWVAR 2
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 32
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PPUSH
11567: CALL_OW 69
11571: ST_TO_ADDR
// if not tmp then
11572: LD_VAR 0 2
11576: NOT
11577: IFFALSE 11581
// exit ;
11579: GO 11610
// for i in tmp do
11581: LD_ADDR_VAR 0 1
11585: PUSH
11586: LD_VAR 0 2
11590: PUSH
11591: FOR_IN
11592: IFFALSE 11608
// begin SetLives ( i , 0 ) ;
11594: LD_VAR 0 1
11598: PPUSH
11599: LD_INT 0
11601: PPUSH
11602: CALL_OW 234
// end ;
11606: GO 11591
11608: POP
11609: POP
// end ;
11610: PPOPN 2
11612: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11613: LD_EXP 26
11617: PUSH
11618: LD_EXP 29
11622: AND
11623: IFFALSE 11716
11625: GO 11627
11627: DISABLE
11628: LD_INT 0
11630: PPUSH
// begin enable ;
11631: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11632: LD_ADDR_VAR 0 1
11636: PUSH
11637: LD_INT 22
11639: PUSH
11640: LD_OWVAR 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 2
11651: PUSH
11652: LD_INT 25
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 25
11664: PUSH
11665: LD_INT 9
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 25
11674: PUSH
11675: LD_INT 8
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: CALL_OW 69
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11714
// begin SetClass ( i , 1 ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: LD_INT 1
11707: PPUSH
11708: CALL_OW 336
// end ;
11712: GO 11697
11714: POP
11715: POP
// end ;
11716: PPOPN 1
11718: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11719: LD_EXP 26
11723: PUSH
11724: LD_EXP 30
11728: AND
11729: PUSH
11730: LD_OWVAR 65
11734: PUSH
11735: LD_INT 7
11737: LESS
11738: AND
11739: IFFALSE 11753
11741: GO 11743
11743: DISABLE
// begin enable ;
11744: ENABLE
// game_speed := 7 ;
11745: LD_ADDR_OWVAR 65
11749: PUSH
11750: LD_INT 7
11752: ST_TO_ADDR
// end ;
11753: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11754: LD_EXP 26
11758: PUSH
11759: LD_EXP 33
11763: AND
11764: IFFALSE 11966
11766: GO 11768
11768: DISABLE
11769: LD_INT 0
11771: PPUSH
11772: PPUSH
11773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11774: LD_ADDR_VAR 0 3
11778: PUSH
11779: LD_INT 81
11781: PUSH
11782: LD_OWVAR 2
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 21
11793: PUSH
11794: LD_INT 1
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PPUSH
11805: CALL_OW 69
11809: ST_TO_ADDR
// if not tmp then
11810: LD_VAR 0 3
11814: NOT
11815: IFFALSE 11819
// exit ;
11817: GO 11966
// if tmp > 5 then
11819: LD_VAR 0 3
11823: PUSH
11824: LD_INT 5
11826: GREATER
11827: IFFALSE 11839
// k := 5 else
11829: LD_ADDR_VAR 0 2
11833: PUSH
11834: LD_INT 5
11836: ST_TO_ADDR
11837: GO 11849
// k := tmp ;
11839: LD_ADDR_VAR 0 2
11843: PUSH
11844: LD_VAR 0 3
11848: ST_TO_ADDR
// for i := 1 to k do
11849: LD_ADDR_VAR 0 1
11853: PUSH
11854: DOUBLE
11855: LD_INT 1
11857: DEC
11858: ST_TO_ADDR
11859: LD_VAR 0 2
11863: PUSH
11864: FOR_TO
11865: IFFALSE 11964
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_VAR 0 1
11876: ARRAY
11877: PPUSH
11878: LD_VAR 0 1
11882: PUSH
11883: LD_INT 4
11885: MOD
11886: PUSH
11887: LD_INT 1
11889: PLUS
11890: PPUSH
11891: CALL_OW 259
11895: PUSH
11896: LD_INT 10
11898: LESS
11899: IFFALSE 11962
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11901: LD_VAR 0 3
11905: PUSH
11906: LD_VAR 0 1
11910: ARRAY
11911: PPUSH
11912: LD_VAR 0 1
11916: PUSH
11917: LD_INT 4
11919: MOD
11920: PUSH
11921: LD_INT 1
11923: PLUS
11924: PPUSH
11925: LD_VAR 0 3
11929: PUSH
11930: LD_VAR 0 1
11934: ARRAY
11935: PPUSH
11936: LD_VAR 0 1
11940: PUSH
11941: LD_INT 4
11943: MOD
11944: PUSH
11945: LD_INT 1
11947: PLUS
11948: PPUSH
11949: CALL_OW 259
11953: PUSH
11954: LD_INT 1
11956: PLUS
11957: PPUSH
11958: CALL_OW 237
11962: GO 11864
11964: POP
11965: POP
// end ;
11966: PPOPN 3
11968: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11969: LD_EXP 26
11973: PUSH
11974: LD_EXP 34
11978: AND
11979: IFFALSE 11999
11981: GO 11983
11983: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11984: LD_INT 4
11986: PPUSH
11987: LD_OWVAR 2
11991: PPUSH
11992: LD_INT 0
11994: PPUSH
11995: CALL_OW 324
11999: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12000: LD_EXP 26
12004: PUSH
12005: LD_EXP 63
12009: AND
12010: IFFALSE 12030
12012: GO 12014
12014: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12015: LD_INT 19
12017: PPUSH
12018: LD_OWVAR 2
12022: PPUSH
12023: LD_INT 0
12025: PPUSH
12026: CALL_OW 324
12030: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12031: LD_EXP 26
12035: PUSH
12036: LD_EXP 35
12040: AND
12041: IFFALSE 12143
12043: GO 12045
12045: DISABLE
12046: LD_INT 0
12048: PPUSH
12049: PPUSH
// begin enable ;
12050: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12051: LD_ADDR_VAR 0 2
12055: PUSH
12056: LD_INT 22
12058: PUSH
12059: LD_OWVAR 2
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 2
12070: PUSH
12071: LD_INT 34
12073: PUSH
12074: LD_INT 11
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 34
12083: PUSH
12084: LD_INT 30
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 69
12104: ST_TO_ADDR
// if not tmp then
12105: LD_VAR 0 2
12109: NOT
12110: IFFALSE 12114
// exit ;
12112: GO 12143
// for i in tmp do
12114: LD_ADDR_VAR 0 1
12118: PUSH
12119: LD_VAR 0 2
12123: PUSH
12124: FOR_IN
12125: IFFALSE 12141
// begin SetLives ( i , 0 ) ;
12127: LD_VAR 0 1
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: CALL_OW 234
// end ;
12139: GO 12124
12141: POP
12142: POP
// end ;
12143: PPOPN 2
12145: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12146: LD_EXP 26
12150: PUSH
12151: LD_EXP 36
12155: AND
12156: IFFALSE 12176
12158: GO 12160
12160: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12161: LD_INT 32
12163: PPUSH
12164: LD_OWVAR 2
12168: PPUSH
12169: LD_INT 0
12171: PPUSH
12172: CALL_OW 324
12176: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12177: LD_EXP 26
12181: PUSH
12182: LD_EXP 37
12186: AND
12187: IFFALSE 12368
12189: GO 12191
12191: DISABLE
12192: LD_INT 0
12194: PPUSH
12195: PPUSH
12196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12197: LD_ADDR_VAR 0 2
12201: PUSH
12202: LD_INT 22
12204: PUSH
12205: LD_OWVAR 2
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 33
12216: PUSH
12217: LD_INT 3
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 69
12232: ST_TO_ADDR
// if not tmp then
12233: LD_VAR 0 2
12237: NOT
12238: IFFALSE 12242
// exit ;
12240: GO 12368
// side := 0 ;
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_INT 0
12249: ST_TO_ADDR
// for i := 1 to 8 do
12250: LD_ADDR_VAR 0 1
12254: PUSH
12255: DOUBLE
12256: LD_INT 1
12258: DEC
12259: ST_TO_ADDR
12260: LD_INT 8
12262: PUSH
12263: FOR_TO
12264: IFFALSE 12312
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12266: LD_OWVAR 2
12270: PUSH
12271: LD_VAR 0 1
12275: NONEQUAL
12276: PUSH
12277: LD_OWVAR 2
12281: PPUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 81
12291: PUSH
12292: LD_INT 2
12294: EQUAL
12295: AND
12296: IFFALSE 12310
// begin side := i ;
12298: LD_ADDR_VAR 0 3
12302: PUSH
12303: LD_VAR 0 1
12307: ST_TO_ADDR
// break ;
12308: GO 12312
// end ;
12310: GO 12263
12312: POP
12313: POP
// if not side then
12314: LD_VAR 0 3
12318: NOT
12319: IFFALSE 12323
// exit ;
12321: GO 12368
// for i := 1 to tmp do
12323: LD_ADDR_VAR 0 1
12327: PUSH
12328: DOUBLE
12329: LD_INT 1
12331: DEC
12332: ST_TO_ADDR
12333: LD_VAR 0 2
12337: PUSH
12338: FOR_TO
12339: IFFALSE 12366
// if Prob ( 60 ) then
12341: LD_INT 60
12343: PPUSH
12344: CALL_OW 13
12348: IFFALSE 12364
// SetSide ( i , side ) ;
12350: LD_VAR 0 1
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: CALL_OW 235
12364: GO 12338
12366: POP
12367: POP
// end ;
12368: PPOPN 3
12370: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12371: LD_EXP 26
12375: PUSH
12376: LD_EXP 39
12380: AND
12381: IFFALSE 12500
12383: GO 12385
12385: DISABLE
12386: LD_INT 0
12388: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12389: LD_ADDR_VAR 0 1
12393: PUSH
12394: LD_INT 22
12396: PUSH
12397: LD_OWVAR 2
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 21
12408: PUSH
12409: LD_INT 1
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 3
12418: PUSH
12419: LD_INT 23
12421: PUSH
12422: LD_INT 0
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 69
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12498
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12446: LD_VAR 0 1
12450: PPUSH
12451: CALL_OW 257
12455: PUSH
12456: LD_INT 1
12458: PUSH
12459: LD_INT 2
12461: PUSH
12462: LD_INT 3
12464: PUSH
12465: LD_INT 4
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: IN
12474: IFFALSE 12496
// SetClass ( un , rand ( 1 , 4 ) ) ;
12476: LD_VAR 0 1
12480: PPUSH
12481: LD_INT 1
12483: PPUSH
12484: LD_INT 4
12486: PPUSH
12487: CALL_OW 12
12491: PPUSH
12492: CALL_OW 336
12496: GO 12443
12498: POP
12499: POP
// end ;
12500: PPOPN 1
12502: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12503: LD_EXP 26
12507: PUSH
12508: LD_EXP 38
12512: AND
12513: IFFALSE 12592
12515: GO 12517
12517: DISABLE
12518: LD_INT 0
12520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12521: LD_ADDR_VAR 0 1
12525: PUSH
12526: LD_INT 22
12528: PUSH
12529: LD_OWVAR 2
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 21
12540: PUSH
12541: LD_INT 3
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PPUSH
12552: CALL_OW 69
12556: ST_TO_ADDR
// if not tmp then
12557: LD_VAR 0 1
12561: NOT
12562: IFFALSE 12566
// exit ;
12564: GO 12592
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12566: LD_VAR 0 1
12570: PUSH
12571: LD_INT 1
12573: PPUSH
12574: LD_VAR 0 1
12578: PPUSH
12579: CALL_OW 12
12583: ARRAY
12584: PPUSH
12585: LD_INT 100
12587: PPUSH
12588: CALL_OW 234
// end ;
12592: PPOPN 1
12594: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12595: LD_EXP 26
12599: PUSH
12600: LD_EXP 40
12604: AND
12605: IFFALSE 12703
12607: GO 12609
12609: DISABLE
12610: LD_INT 0
12612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12613: LD_ADDR_VAR 0 1
12617: PUSH
12618: LD_INT 22
12620: PUSH
12621: LD_OWVAR 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 21
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: ST_TO_ADDR
// if not tmp then
12649: LD_VAR 0 1
12653: NOT
12654: IFFALSE 12658
// exit ;
12656: GO 12703
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12658: LD_VAR 0 1
12662: PUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_VAR 0 1
12670: PPUSH
12671: CALL_OW 12
12675: ARRAY
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: LD_INT 4
12682: PPUSH
12683: CALL_OW 12
12687: PPUSH
12688: LD_INT 3000
12690: PPUSH
12691: LD_INT 9000
12693: PPUSH
12694: CALL_OW 12
12698: PPUSH
12699: CALL_OW 492
// end ;
12703: PPOPN 1
12705: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12706: LD_EXP 26
12710: PUSH
12711: LD_EXP 41
12715: AND
12716: IFFALSE 12736
12718: GO 12720
12720: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12721: LD_INT 1
12723: PPUSH
12724: LD_OWVAR 2
12728: PPUSH
12729: LD_INT 0
12731: PPUSH
12732: CALL_OW 324
12736: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12737: LD_EXP 26
12741: PUSH
12742: LD_EXP 42
12746: AND
12747: IFFALSE 12830
12749: GO 12751
12751: DISABLE
12752: LD_INT 0
12754: PPUSH
12755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: LD_INT 22
12763: PUSH
12764: LD_OWVAR 2
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 21
12775: PUSH
12776: LD_INT 3
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: ST_TO_ADDR
// if not tmp then
12792: LD_VAR 0 2
12796: NOT
12797: IFFALSE 12801
// exit ;
12799: GO 12830
// for i in tmp do
12801: LD_ADDR_VAR 0 1
12805: PUSH
12806: LD_VAR 0 2
12810: PUSH
12811: FOR_IN
12812: IFFALSE 12828
// SetBLevel ( i , 10 ) ;
12814: LD_VAR 0 1
12818: PPUSH
12819: LD_INT 10
12821: PPUSH
12822: CALL_OW 241
12826: GO 12811
12828: POP
12829: POP
// end ;
12830: PPOPN 2
12832: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12833: LD_EXP 26
12837: PUSH
12838: LD_EXP 43
12842: AND
12843: IFFALSE 12954
12845: GO 12847
12847: DISABLE
12848: LD_INT 0
12850: PPUSH
12851: PPUSH
12852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12853: LD_ADDR_VAR 0 3
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_OWVAR 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: LD_INT 25
12872: PUSH
12873: LD_INT 1
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PPUSH
12884: CALL_OW 69
12888: ST_TO_ADDR
// if not tmp then
12889: LD_VAR 0 3
12893: NOT
12894: IFFALSE 12898
// exit ;
12896: GO 12954
// un := tmp [ rand ( 1 , tmp ) ] ;
12898: LD_ADDR_VAR 0 2
12902: PUSH
12903: LD_VAR 0 3
12907: PUSH
12908: LD_INT 1
12910: PPUSH
12911: LD_VAR 0 3
12915: PPUSH
12916: CALL_OW 12
12920: ARRAY
12921: ST_TO_ADDR
// if Crawls ( un ) then
12922: LD_VAR 0 2
12926: PPUSH
12927: CALL_OW 318
12931: IFFALSE 12942
// ComWalk ( un ) ;
12933: LD_VAR 0 2
12937: PPUSH
12938: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12942: LD_VAR 0 2
12946: PPUSH
12947: LD_INT 5
12949: PPUSH
12950: CALL_OW 336
// end ;
12954: PPOPN 3
12956: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12957: LD_EXP 26
12961: PUSH
12962: LD_EXP 44
12966: AND
12967: PUSH
12968: LD_OWVAR 67
12972: PUSH
12973: LD_INT 3
12975: LESS
12976: AND
12977: IFFALSE 12996
12979: GO 12981
12981: DISABLE
// Difficulty := Difficulty + 1 ;
12982: LD_ADDR_OWVAR 67
12986: PUSH
12987: LD_OWVAR 67
12991: PUSH
12992: LD_INT 1
12994: PLUS
12995: ST_TO_ADDR
12996: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12997: LD_EXP 26
13001: PUSH
13002: LD_EXP 45
13006: AND
13007: IFFALSE 13110
13009: GO 13011
13011: DISABLE
13012: LD_INT 0
13014: PPUSH
// begin for i := 1 to 5 do
13015: LD_ADDR_VAR 0 1
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_INT 5
13027: PUSH
13028: FOR_TO
13029: IFFALSE 13108
// begin uc_nation := nation_nature ;
13031: LD_ADDR_OWVAR 21
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// uc_side := 0 ;
13039: LD_ADDR_OWVAR 20
13043: PUSH
13044: LD_INT 0
13046: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13047: LD_ADDR_OWVAR 29
13051: PUSH
13052: LD_INT 12
13054: PUSH
13055: LD_INT 12
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: ST_TO_ADDR
// hc_agressivity := 20 ;
13062: LD_ADDR_OWVAR 35
13066: PUSH
13067: LD_INT 20
13069: ST_TO_ADDR
// hc_class := class_tiger ;
13070: LD_ADDR_OWVAR 28
13074: PUSH
13075: LD_INT 14
13077: ST_TO_ADDR
// hc_gallery :=  ;
13078: LD_ADDR_OWVAR 33
13082: PUSH
13083: LD_STRING 
13085: ST_TO_ADDR
// hc_name :=  ;
13086: LD_ADDR_OWVAR 26
13090: PUSH
13091: LD_STRING 
13093: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13094: CALL_OW 44
13098: PPUSH
13099: LD_INT 0
13101: PPUSH
13102: CALL_OW 51
// end ;
13106: GO 13028
13108: POP
13109: POP
// end ;
13110: PPOPN 1
13112: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13113: LD_EXP 26
13117: PUSH
13118: LD_EXP 46
13122: AND
13123: IFFALSE 13132
13125: GO 13127
13127: DISABLE
// StreamSibBomb ;
13128: CALL 13133 0 0
13132: END
// export function StreamSibBomb ; var i , x , y ; begin
13133: LD_INT 0
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
// result := false ;
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: LD_INT 0
13146: ST_TO_ADDR
// for i := 1 to 16 do
13147: LD_ADDR_VAR 0 2
13151: PUSH
13152: DOUBLE
13153: LD_INT 1
13155: DEC
13156: ST_TO_ADDR
13157: LD_INT 16
13159: PUSH
13160: FOR_TO
13161: IFFALSE 13360
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13163: LD_ADDR_VAR 0 3
13167: PUSH
13168: LD_INT 10
13170: PUSH
13171: LD_INT 20
13173: PUSH
13174: LD_INT 30
13176: PUSH
13177: LD_INT 40
13179: PUSH
13180: LD_INT 50
13182: PUSH
13183: LD_INT 60
13185: PUSH
13186: LD_INT 70
13188: PUSH
13189: LD_INT 80
13191: PUSH
13192: LD_INT 90
13194: PUSH
13195: LD_INT 100
13197: PUSH
13198: LD_INT 110
13200: PUSH
13201: LD_INT 120
13203: PUSH
13204: LD_INT 130
13206: PUSH
13207: LD_INT 140
13209: PUSH
13210: LD_INT 150
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: PUSH
13230: LD_INT 1
13232: PPUSH
13233: LD_INT 15
13235: PPUSH
13236: CALL_OW 12
13240: ARRAY
13241: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13242: LD_ADDR_VAR 0 4
13246: PUSH
13247: LD_INT 10
13249: PUSH
13250: LD_INT 20
13252: PUSH
13253: LD_INT 30
13255: PUSH
13256: LD_INT 40
13258: PUSH
13259: LD_INT 50
13261: PUSH
13262: LD_INT 60
13264: PUSH
13265: LD_INT 70
13267: PUSH
13268: LD_INT 80
13270: PUSH
13271: LD_INT 90
13273: PUSH
13274: LD_INT 100
13276: PUSH
13277: LD_INT 110
13279: PUSH
13280: LD_INT 120
13282: PUSH
13283: LD_INT 130
13285: PUSH
13286: LD_INT 140
13288: PUSH
13289: LD_INT 150
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: PUSH
13309: LD_INT 1
13311: PPUSH
13312: LD_INT 15
13314: PPUSH
13315: CALL_OW 12
13319: ARRAY
13320: ST_TO_ADDR
// if ValidHex ( x , y ) then
13321: LD_VAR 0 3
13325: PPUSH
13326: LD_VAR 0 4
13330: PPUSH
13331: CALL_OW 488
13335: IFFALSE 13358
// begin result := [ x , y ] ;
13337: LD_ADDR_VAR 0 1
13341: PUSH
13342: LD_VAR 0 3
13346: PUSH
13347: LD_VAR 0 4
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: ST_TO_ADDR
// break ;
13356: GO 13360
// end ; end ;
13358: GO 13160
13360: POP
13361: POP
// if result then
13362: LD_VAR 0 1
13366: IFFALSE 13426
// begin ToLua ( playSibBomb() ) ;
13368: LD_STRING playSibBomb()
13370: PPUSH
13371: CALL_OW 559
// wait ( 0 0$14 ) ;
13375: LD_INT 490
13377: PPUSH
13378: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13382: LD_VAR 0 1
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: LD_VAR 0 1
13395: PUSH
13396: LD_INT 2
13398: ARRAY
13399: PPUSH
13400: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13404: LD_VAR 0 1
13408: PUSH
13409: LD_INT 1
13411: ARRAY
13412: PPUSH
13413: LD_VAR 0 1
13417: PUSH
13418: LD_INT 2
13420: ARRAY
13421: PPUSH
13422: CALL_OW 429
// end ; end ;
13426: LD_VAR 0 1
13430: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13431: LD_EXP 26
13435: PUSH
13436: LD_EXP 48
13440: AND
13441: IFFALSE 13453
13443: GO 13445
13445: DISABLE
// YouLost (  ) ;
13446: LD_STRING 
13448: PPUSH
13449: CALL_OW 104
13453: END
// every 0 0$1 trigger StreamModeActive and sFog do
13454: LD_EXP 26
13458: PUSH
13459: LD_EXP 47
13463: AND
13464: IFFALSE 13478
13466: GO 13468
13468: DISABLE
// FogOff ( your_side ) ;
13469: LD_OWVAR 2
13473: PPUSH
13474: CALL_OW 344
13478: END
// every 0 0$1 trigger StreamModeActive and sSun do
13479: LD_EXP 26
13483: PUSH
13484: LD_EXP 49
13488: AND
13489: IFFALSE 13517
13491: GO 13493
13493: DISABLE
// begin solar_recharge_percent := 0 ;
13494: LD_ADDR_OWVAR 79
13498: PUSH
13499: LD_INT 0
13501: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13502: LD_INT 10500
13504: PPUSH
13505: CALL_OW 67
// solar_recharge_percent := 100 ;
13509: LD_ADDR_OWVAR 79
13513: PUSH
13514: LD_INT 100
13516: ST_TO_ADDR
// end ;
13517: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13518: LD_EXP 26
13522: PUSH
13523: LD_EXP 50
13527: AND
13528: IFFALSE 13767
13530: GO 13532
13532: DISABLE
13533: LD_INT 0
13535: PPUSH
13536: PPUSH
13537: PPUSH
// begin tmp := [ ] ;
13538: LD_ADDR_VAR 0 3
13542: PUSH
13543: EMPTY
13544: ST_TO_ADDR
// for i := 1 to 6 do
13545: LD_ADDR_VAR 0 1
13549: PUSH
13550: DOUBLE
13551: LD_INT 1
13553: DEC
13554: ST_TO_ADDR
13555: LD_INT 6
13557: PUSH
13558: FOR_TO
13559: IFFALSE 13664
// begin uc_nation := nation_nature ;
13561: LD_ADDR_OWVAR 21
13565: PUSH
13566: LD_INT 0
13568: ST_TO_ADDR
// uc_side := 0 ;
13569: LD_ADDR_OWVAR 20
13573: PUSH
13574: LD_INT 0
13576: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13577: LD_ADDR_OWVAR 29
13581: PUSH
13582: LD_INT 12
13584: PUSH
13585: LD_INT 12
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: ST_TO_ADDR
// hc_agressivity := 20 ;
13592: LD_ADDR_OWVAR 35
13596: PUSH
13597: LD_INT 20
13599: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13600: LD_ADDR_OWVAR 28
13604: PUSH
13605: LD_INT 17
13607: ST_TO_ADDR
// hc_gallery :=  ;
13608: LD_ADDR_OWVAR 33
13612: PUSH
13613: LD_STRING 
13615: ST_TO_ADDR
// hc_name :=  ;
13616: LD_ADDR_OWVAR 26
13620: PUSH
13621: LD_STRING 
13623: ST_TO_ADDR
// un := CreateHuman ;
13624: LD_ADDR_VAR 0 2
13628: PUSH
13629: CALL_OW 44
13633: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13634: LD_VAR 0 2
13638: PPUSH
13639: LD_INT 1
13641: PPUSH
13642: CALL_OW 51
// tmp := tmp ^ un ;
13646: LD_ADDR_VAR 0 3
13650: PUSH
13651: LD_VAR 0 3
13655: PUSH
13656: LD_VAR 0 2
13660: ADD
13661: ST_TO_ADDR
// end ;
13662: GO 13558
13664: POP
13665: POP
// repeat wait ( 0 0$1 ) ;
13666: LD_INT 35
13668: PPUSH
13669: CALL_OW 67
// for un in tmp do
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_VAR 0 3
13682: PUSH
13683: FOR_IN
13684: IFFALSE 13758
// begin if IsDead ( un ) then
13686: LD_VAR 0 2
13690: PPUSH
13691: CALL_OW 301
13695: IFFALSE 13715
// begin tmp := tmp diff un ;
13697: LD_ADDR_VAR 0 3
13701: PUSH
13702: LD_VAR 0 3
13706: PUSH
13707: LD_VAR 0 2
13711: DIFF
13712: ST_TO_ADDR
// continue ;
13713: GO 13683
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13715: LD_VAR 0 2
13719: PPUSH
13720: LD_INT 3
13722: PUSH
13723: LD_INT 22
13725: PUSH
13726: LD_INT 0
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PPUSH
13737: CALL_OW 69
13741: PPUSH
13742: LD_VAR 0 2
13746: PPUSH
13747: CALL_OW 74
13751: PPUSH
13752: CALL_OW 115
// end ;
13756: GO 13683
13758: POP
13759: POP
// until not tmp ;
13760: LD_VAR 0 3
13764: NOT
13765: IFFALSE 13666
// end ;
13767: PPOPN 3
13769: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13770: LD_EXP 26
13774: PUSH
13775: LD_EXP 51
13779: AND
13780: IFFALSE 13834
13782: GO 13784
13784: DISABLE
// begin ToLua ( displayTroll(); ) ;
13785: LD_STRING displayTroll();
13787: PPUSH
13788: CALL_OW 559
// wait ( 3 3$00 ) ;
13792: LD_INT 6300
13794: PPUSH
13795: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13799: LD_STRING hideTroll();
13801: PPUSH
13802: CALL_OW 559
// wait ( 1 1$00 ) ;
13806: LD_INT 2100
13808: PPUSH
13809: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13813: LD_STRING displayTroll();
13815: PPUSH
13816: CALL_OW 559
// wait ( 1 1$00 ) ;
13820: LD_INT 2100
13822: PPUSH
13823: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13827: LD_STRING hideTroll();
13829: PPUSH
13830: CALL_OW 559
// end ;
13834: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13835: LD_EXP 26
13839: PUSH
13840: LD_EXP 52
13844: AND
13845: IFFALSE 13908
13847: GO 13849
13849: DISABLE
13850: LD_INT 0
13852: PPUSH
// begin p := 0 ;
13853: LD_ADDR_VAR 0 1
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// repeat game_speed := 1 ;
13861: LD_ADDR_OWVAR 65
13865: PUSH
13866: LD_INT 1
13868: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13869: LD_INT 35
13871: PPUSH
13872: CALL_OW 67
// p := p + 1 ;
13876: LD_ADDR_VAR 0 1
13880: PUSH
13881: LD_VAR 0 1
13885: PUSH
13886: LD_INT 1
13888: PLUS
13889: ST_TO_ADDR
// until p >= 60 ;
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 60
13897: GREATEREQUAL
13898: IFFALSE 13861
// game_speed := 4 ;
13900: LD_ADDR_OWVAR 65
13904: PUSH
13905: LD_INT 4
13907: ST_TO_ADDR
// end ;
13908: PPOPN 1
13910: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13911: LD_EXP 26
13915: PUSH
13916: LD_EXP 53
13920: AND
13921: IFFALSE 14067
13923: GO 13925
13925: DISABLE
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13930: LD_ADDR_VAR 0 1
13934: PUSH
13935: LD_INT 22
13937: PUSH
13938: LD_OWVAR 2
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 2
13949: PUSH
13950: LD_INT 30
13952: PUSH
13953: LD_INT 0
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 30
13962: PUSH
13963: LD_INT 1
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 69
13983: ST_TO_ADDR
// if not depot then
13984: LD_VAR 0 1
13988: NOT
13989: IFFALSE 13993
// exit ;
13991: GO 14067
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13993: LD_ADDR_VAR 0 2
13997: PUSH
13998: LD_VAR 0 1
14002: PUSH
14003: LD_INT 1
14005: PPUSH
14006: LD_VAR 0 1
14010: PPUSH
14011: CALL_OW 12
14015: ARRAY
14016: PPUSH
14017: CALL_OW 274
14021: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14022: LD_VAR 0 2
14026: PPUSH
14027: LD_INT 1
14029: PPUSH
14030: LD_INT 0
14032: PPUSH
14033: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14037: LD_VAR 0 2
14041: PPUSH
14042: LD_INT 2
14044: PPUSH
14045: LD_INT 0
14047: PPUSH
14048: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14052: LD_VAR 0 2
14056: PPUSH
14057: LD_INT 3
14059: PPUSH
14060: LD_INT 0
14062: PPUSH
14063: CALL_OW 277
// end ;
14067: PPOPN 2
14069: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14070: LD_EXP 26
14074: PUSH
14075: LD_EXP 54
14079: AND
14080: IFFALSE 14177
14082: GO 14084
14084: DISABLE
14085: LD_INT 0
14087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14088: LD_ADDR_VAR 0 1
14092: PUSH
14093: LD_INT 22
14095: PUSH
14096: LD_OWVAR 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 21
14107: PUSH
14108: LD_INT 1
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 3
14117: PUSH
14118: LD_INT 23
14120: PUSH
14121: LD_INT 0
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: PPUSH
14137: CALL_OW 69
14141: ST_TO_ADDR
// if not tmp then
14142: LD_VAR 0 1
14146: NOT
14147: IFFALSE 14151
// exit ;
14149: GO 14177
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14151: LD_VAR 0 1
14155: PUSH
14156: LD_INT 1
14158: PPUSH
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 12
14168: ARRAY
14169: PPUSH
14170: LD_INT 200
14172: PPUSH
14173: CALL_OW 234
// end ;
14177: PPOPN 1
14179: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14180: LD_EXP 26
14184: PUSH
14185: LD_EXP 55
14189: AND
14190: IFFALSE 14269
14192: GO 14194
14194: DISABLE
14195: LD_INT 0
14197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14198: LD_ADDR_VAR 0 1
14202: PUSH
14203: LD_INT 22
14205: PUSH
14206: LD_OWVAR 2
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 21
14217: PUSH
14218: LD_INT 2
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PPUSH
14229: CALL_OW 69
14233: ST_TO_ADDR
// if not tmp then
14234: LD_VAR 0 1
14238: NOT
14239: IFFALSE 14243
// exit ;
14241: GO 14269
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14243: LD_VAR 0 1
14247: PUSH
14248: LD_INT 1
14250: PPUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 12
14260: ARRAY
14261: PPUSH
14262: LD_INT 60
14264: PPUSH
14265: CALL_OW 234
// end ;
14269: PPOPN 1
14271: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14272: LD_EXP 26
14276: PUSH
14277: LD_EXP 56
14281: AND
14282: IFFALSE 14381
14284: GO 14286
14286: DISABLE
14287: LD_INT 0
14289: PPUSH
14290: PPUSH
// begin enable ;
14291: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14292: LD_ADDR_VAR 0 1
14296: PUSH
14297: LD_INT 22
14299: PUSH
14300: LD_OWVAR 2
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 61
14311: PUSH
14312: EMPTY
14313: LIST
14314: PUSH
14315: LD_INT 33
14317: PUSH
14318: LD_INT 2
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 69
14334: ST_TO_ADDR
// if not tmp then
14335: LD_VAR 0 1
14339: NOT
14340: IFFALSE 14344
// exit ;
14342: GO 14381
// for i in tmp do
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: LD_VAR 0 1
14353: PUSH
14354: FOR_IN
14355: IFFALSE 14379
// if IsControledBy ( i ) then
14357: LD_VAR 0 2
14361: PPUSH
14362: CALL_OW 312
14366: IFFALSE 14377
// ComUnlink ( i ) ;
14368: LD_VAR 0 2
14372: PPUSH
14373: CALL_OW 136
14377: GO 14354
14379: POP
14380: POP
// end ;
14381: PPOPN 2
14383: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14384: LD_EXP 26
14388: PUSH
14389: LD_EXP 57
14393: AND
14394: IFFALSE 14534
14396: GO 14398
14398: DISABLE
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
// begin ToLua ( displayPowell(); ) ;
14403: LD_STRING displayPowell();
14405: PPUSH
14406: CALL_OW 559
// uc_side := 0 ;
14410: LD_ADDR_OWVAR 20
14414: PUSH
14415: LD_INT 0
14417: ST_TO_ADDR
// uc_nation := 2 ;
14418: LD_ADDR_OWVAR 21
14422: PUSH
14423: LD_INT 2
14425: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14426: LD_ADDR_OWVAR 37
14430: PUSH
14431: LD_INT 14
14433: ST_TO_ADDR
// vc_engine := engine_siberite ;
14434: LD_ADDR_OWVAR 39
14438: PUSH
14439: LD_INT 3
14441: ST_TO_ADDR
// vc_control := control_apeman ;
14442: LD_ADDR_OWVAR 38
14446: PUSH
14447: LD_INT 5
14449: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14450: LD_ADDR_OWVAR 40
14454: PUSH
14455: LD_INT 29
14457: ST_TO_ADDR
// un := CreateVehicle ;
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: CALL_OW 45
14467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14468: LD_VAR 0 2
14472: PPUSH
14473: LD_INT 1
14475: PPUSH
14476: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14480: LD_INT 35
14482: PPUSH
14483: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14487: LD_VAR 0 2
14491: PPUSH
14492: LD_INT 22
14494: PUSH
14495: LD_OWVAR 2
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PPUSH
14504: CALL_OW 69
14508: PPUSH
14509: LD_VAR 0 2
14513: PPUSH
14514: CALL_OW 74
14518: PPUSH
14519: CALL_OW 115
// until IsDead ( un ) ;
14523: LD_VAR 0 2
14527: PPUSH
14528: CALL_OW 301
14532: IFFALSE 14480
// end ;
14534: PPOPN 2
14536: END
// every 0 0$1 trigger StreamModeActive and sStu do
14537: LD_EXP 26
14541: PUSH
14542: LD_EXP 65
14546: AND
14547: IFFALSE 14563
14549: GO 14551
14551: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14552: LD_STRING displayStucuk();
14554: PPUSH
14555: CALL_OW 559
// ResetFog ;
14559: CALL_OW 335
// end ;
14563: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14564: LD_EXP 26
14568: PUSH
14569: LD_EXP 58
14573: AND
14574: IFFALSE 14715
14576: GO 14578
14578: DISABLE
14579: LD_INT 0
14581: PPUSH
14582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_INT 22
14590: PUSH
14591: LD_OWVAR 2
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 21
14602: PUSH
14603: LD_INT 1
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PPUSH
14614: CALL_OW 69
14618: ST_TO_ADDR
// if not tmp then
14619: LD_VAR 0 2
14623: NOT
14624: IFFALSE 14628
// exit ;
14626: GO 14715
// un := tmp [ rand ( 1 , tmp ) ] ;
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_VAR 0 2
14637: PUSH
14638: LD_INT 1
14640: PPUSH
14641: LD_VAR 0 2
14645: PPUSH
14646: CALL_OW 12
14650: ARRAY
14651: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14652: LD_VAR 0 1
14656: PPUSH
14657: LD_INT 0
14659: PPUSH
14660: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_OWVAR 3
14673: PUSH
14674: LD_VAR 0 1
14678: DIFF
14679: PPUSH
14680: LD_VAR 0 1
14684: PPUSH
14685: CALL_OW 74
14689: PPUSH
14690: CALL_OW 115
// wait ( 0 0$20 ) ;
14694: LD_INT 700
14696: PPUSH
14697: CALL_OW 67
// SetSide ( un , your_side ) ;
14701: LD_VAR 0 1
14705: PPUSH
14706: LD_OWVAR 2
14710: PPUSH
14711: CALL_OW 235
// end ;
14715: PPOPN 2
14717: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14718: LD_EXP 26
14722: PUSH
14723: LD_EXP 59
14727: AND
14728: IFFALSE 14834
14730: GO 14732
14732: DISABLE
14733: LD_INT 0
14735: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_INT 22
14743: PUSH
14744: LD_OWVAR 2
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: LD_INT 30
14758: PUSH
14759: LD_INT 0
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 30
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PPUSH
14785: CALL_OW 69
14789: ST_TO_ADDR
// if not depot then
14790: LD_VAR 0 1
14794: NOT
14795: IFFALSE 14799
// exit ;
14797: GO 14834
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14799: LD_VAR 0 1
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: CALL_OW 250
14812: PPUSH
14813: LD_VAR 0 1
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: CALL_OW 251
14826: PPUSH
14827: LD_INT 70
14829: PPUSH
14830: CALL_OW 495
// end ;
14834: PPOPN 1
14836: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14837: LD_EXP 26
14841: PUSH
14842: LD_EXP 60
14846: AND
14847: IFFALSE 15058
14849: GO 14851
14851: DISABLE
14852: LD_INT 0
14854: PPUSH
14855: PPUSH
14856: PPUSH
14857: PPUSH
14858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14859: LD_ADDR_VAR 0 5
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_OWVAR 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 21
14878: PUSH
14879: LD_INT 1
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: ST_TO_ADDR
// if not tmp then
14895: LD_VAR 0 5
14899: NOT
14900: IFFALSE 14904
// exit ;
14902: GO 15058
// for i in tmp do
14904: LD_ADDR_VAR 0 1
14908: PUSH
14909: LD_VAR 0 5
14913: PUSH
14914: FOR_IN
14915: IFFALSE 15056
// begin d := rand ( 0 , 5 ) ;
14917: LD_ADDR_VAR 0 4
14921: PUSH
14922: LD_INT 0
14924: PPUSH
14925: LD_INT 5
14927: PPUSH
14928: CALL_OW 12
14932: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14933: LD_ADDR_VAR 0 2
14937: PUSH
14938: LD_VAR 0 1
14942: PPUSH
14943: CALL_OW 250
14947: PPUSH
14948: LD_VAR 0 4
14952: PPUSH
14953: LD_INT 3
14955: PPUSH
14956: LD_INT 12
14958: PPUSH
14959: CALL_OW 12
14963: PPUSH
14964: CALL_OW 272
14968: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14969: LD_ADDR_VAR 0 3
14973: PUSH
14974: LD_VAR 0 1
14978: PPUSH
14979: CALL_OW 251
14983: PPUSH
14984: LD_VAR 0 4
14988: PPUSH
14989: LD_INT 3
14991: PPUSH
14992: LD_INT 12
14994: PPUSH
14995: CALL_OW 12
14999: PPUSH
15000: CALL_OW 273
15004: ST_TO_ADDR
// if ValidHex ( x , y ) then
15005: LD_VAR 0 2
15009: PPUSH
15010: LD_VAR 0 3
15014: PPUSH
15015: CALL_OW 488
15019: IFFALSE 15054
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15021: LD_VAR 0 1
15025: PPUSH
15026: LD_VAR 0 2
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_INT 3
15038: PPUSH
15039: LD_INT 6
15041: PPUSH
15042: CALL_OW 12
15046: PPUSH
15047: LD_INT 1
15049: PPUSH
15050: CALL_OW 483
// end ;
15054: GO 14914
15056: POP
15057: POP
// end ;
15058: PPOPN 5
15060: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15061: LD_EXP 26
15065: PUSH
15066: LD_EXP 61
15070: AND
15071: IFFALSE 15165
15073: GO 15075
15075: DISABLE
15076: LD_INT 0
15078: PPUSH
15079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15080: LD_ADDR_VAR 0 2
15084: PUSH
15085: LD_INT 22
15087: PUSH
15088: LD_OWVAR 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 32
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 21
15109: PUSH
15110: LD_INT 2
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: ST_TO_ADDR
// if not tmp then
15127: LD_VAR 0 2
15131: NOT
15132: IFFALSE 15136
// exit ;
15134: GO 15165
// for i in tmp do
15136: LD_ADDR_VAR 0 1
15140: PUSH
15141: LD_VAR 0 2
15145: PUSH
15146: FOR_IN
15147: IFFALSE 15163
// SetFuel ( i , 0 ) ;
15149: LD_VAR 0 1
15153: PPUSH
15154: LD_INT 0
15156: PPUSH
15157: CALL_OW 240
15161: GO 15146
15163: POP
15164: POP
// end ;
15165: PPOPN 2
15167: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15168: LD_EXP 26
15172: PUSH
15173: LD_EXP 62
15177: AND
15178: IFFALSE 15244
15180: GO 15182
15182: DISABLE
15183: LD_INT 0
15185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15186: LD_ADDR_VAR 0 1
15190: PUSH
15191: LD_INT 22
15193: PUSH
15194: LD_OWVAR 2
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: LD_INT 29
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 69
15221: ST_TO_ADDR
// if not tmp then
15222: LD_VAR 0 1
15226: NOT
15227: IFFALSE 15231
// exit ;
15229: GO 15244
// DestroyUnit ( tmp [ 1 ] ) ;
15231: LD_VAR 0 1
15235: PUSH
15236: LD_INT 1
15238: ARRAY
15239: PPUSH
15240: CALL_OW 65
// end ;
15244: PPOPN 1
15246: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15247: LD_EXP 26
15251: PUSH
15252: LD_EXP 64
15256: AND
15257: IFFALSE 15386
15259: GO 15261
15261: DISABLE
15262: LD_INT 0
15264: PPUSH
// begin uc_side := 0 ;
15265: LD_ADDR_OWVAR 20
15269: PUSH
15270: LD_INT 0
15272: ST_TO_ADDR
// uc_nation := nation_arabian ;
15273: LD_ADDR_OWVAR 21
15277: PUSH
15278: LD_INT 2
15280: ST_TO_ADDR
// hc_gallery :=  ;
15281: LD_ADDR_OWVAR 33
15285: PUSH
15286: LD_STRING 
15288: ST_TO_ADDR
// hc_name :=  ;
15289: LD_ADDR_OWVAR 26
15293: PUSH
15294: LD_STRING 
15296: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15297: LD_INT 1
15299: PPUSH
15300: LD_INT 11
15302: PPUSH
15303: LD_INT 10
15305: PPUSH
15306: CALL_OW 380
// un := CreateHuman ;
15310: LD_ADDR_VAR 0 1
15314: PUSH
15315: CALL_OW 44
15319: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15320: LD_VAR 0 1
15324: PPUSH
15325: LD_INT 1
15327: PPUSH
15328: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15332: LD_INT 35
15334: PPUSH
15335: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15339: LD_VAR 0 1
15343: PPUSH
15344: LD_INT 22
15346: PUSH
15347: LD_OWVAR 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PPUSH
15356: CALL_OW 69
15360: PPUSH
15361: LD_VAR 0 1
15365: PPUSH
15366: CALL_OW 74
15370: PPUSH
15371: CALL_OW 115
// until IsDead ( un ) ;
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 301
15384: IFFALSE 15332
// end ;
15386: PPOPN 1
15388: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15389: LD_EXP 26
15393: PUSH
15394: LD_EXP 66
15398: AND
15399: IFFALSE 15411
15401: GO 15403
15403: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15404: LD_STRING earthquake(getX(game), 0, 32)
15406: PPUSH
15407: CALL_OW 559
15411: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15412: LD_EXP 26
15416: PUSH
15417: LD_EXP 67
15421: AND
15422: IFFALSE 15513
15424: GO 15426
15426: DISABLE
15427: LD_INT 0
15429: PPUSH
// begin enable ;
15430: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15431: LD_ADDR_VAR 0 1
15435: PUSH
15436: LD_INT 22
15438: PUSH
15439: LD_OWVAR 2
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 21
15450: PUSH
15451: LD_INT 2
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 33
15460: PUSH
15461: LD_INT 3
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: PPUSH
15473: CALL_OW 69
15477: ST_TO_ADDR
// if not tmp then
15478: LD_VAR 0 1
15482: NOT
15483: IFFALSE 15487
// exit ;
15485: GO 15513
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15487: LD_VAR 0 1
15491: PUSH
15492: LD_INT 1
15494: PPUSH
15495: LD_VAR 0 1
15499: PPUSH
15500: CALL_OW 12
15504: ARRAY
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 234
// end ;
15513: PPOPN 1
15515: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15516: LD_EXP 26
15520: PUSH
15521: LD_EXP 68
15525: AND
15526: IFFALSE 15667
15528: GO 15530
15530: DISABLE
15531: LD_INT 0
15533: PPUSH
15534: PPUSH
15535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15536: LD_ADDR_VAR 0 3
15540: PUSH
15541: LD_INT 22
15543: PUSH
15544: LD_OWVAR 2
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 25
15555: PUSH
15556: LD_INT 1
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PPUSH
15567: CALL_OW 69
15571: ST_TO_ADDR
// if not tmp then
15572: LD_VAR 0 3
15576: NOT
15577: IFFALSE 15581
// exit ;
15579: GO 15667
// un := tmp [ rand ( 1 , tmp ) ] ;
15581: LD_ADDR_VAR 0 2
15585: PUSH
15586: LD_VAR 0 3
15590: PUSH
15591: LD_INT 1
15593: PPUSH
15594: LD_VAR 0 3
15598: PPUSH
15599: CALL_OW 12
15603: ARRAY
15604: ST_TO_ADDR
// if Crawls ( un ) then
15605: LD_VAR 0 2
15609: PPUSH
15610: CALL_OW 318
15614: IFFALSE 15625
// ComWalk ( un ) ;
15616: LD_VAR 0 2
15620: PPUSH
15621: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15625: LD_VAR 0 2
15629: PPUSH
15630: LD_INT 9
15632: PPUSH
15633: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15637: LD_INT 28
15639: PPUSH
15640: LD_OWVAR 2
15644: PPUSH
15645: LD_INT 2
15647: PPUSH
15648: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15652: LD_INT 29
15654: PPUSH
15655: LD_OWVAR 2
15659: PPUSH
15660: LD_INT 2
15662: PPUSH
15663: CALL_OW 322
// end ;
15667: PPOPN 3
15669: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15670: LD_EXP 26
15674: PUSH
15675: LD_EXP 69
15679: AND
15680: IFFALSE 15791
15682: GO 15684
15684: DISABLE
15685: LD_INT 0
15687: PPUSH
15688: PPUSH
15689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15690: LD_ADDR_VAR 0 3
15694: PUSH
15695: LD_INT 22
15697: PUSH
15698: LD_OWVAR 2
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 25
15709: PUSH
15710: LD_INT 1
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: ST_TO_ADDR
// if not tmp then
15726: LD_VAR 0 3
15730: NOT
15731: IFFALSE 15735
// exit ;
15733: GO 15791
// un := tmp [ rand ( 1 , tmp ) ] ;
15735: LD_ADDR_VAR 0 2
15739: PUSH
15740: LD_VAR 0 3
15744: PUSH
15745: LD_INT 1
15747: PPUSH
15748: LD_VAR 0 3
15752: PPUSH
15753: CALL_OW 12
15757: ARRAY
15758: ST_TO_ADDR
// if Crawls ( un ) then
15759: LD_VAR 0 2
15763: PPUSH
15764: CALL_OW 318
15768: IFFALSE 15779
// ComWalk ( un ) ;
15770: LD_VAR 0 2
15774: PPUSH
15775: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15779: LD_VAR 0 2
15783: PPUSH
15784: LD_INT 8
15786: PPUSH
15787: CALL_OW 336
// end ;
15791: PPOPN 3
15793: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15794: LD_EXP 26
15798: PUSH
15799: LD_EXP 70
15803: AND
15804: IFFALSE 15948
15806: GO 15808
15808: DISABLE
15809: LD_INT 0
15811: PPUSH
15812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15813: LD_ADDR_VAR 0 2
15817: PUSH
15818: LD_INT 22
15820: PUSH
15821: LD_OWVAR 2
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 21
15832: PUSH
15833: LD_INT 2
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 2
15842: PUSH
15843: LD_INT 34
15845: PUSH
15846: LD_INT 12
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 34
15855: PUSH
15856: LD_INT 51
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 34
15865: PUSH
15866: LD_INT 32
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: PPUSH
15884: CALL_OW 69
15888: ST_TO_ADDR
// if not tmp then
15889: LD_VAR 0 2
15893: NOT
15894: IFFALSE 15898
// exit ;
15896: GO 15948
// for i in tmp do
15898: LD_ADDR_VAR 0 1
15902: PUSH
15903: LD_VAR 0 2
15907: PUSH
15908: FOR_IN
15909: IFFALSE 15946
// if GetCargo ( i , mat_artifact ) = 0 then
15911: LD_VAR 0 1
15915: PPUSH
15916: LD_INT 4
15918: PPUSH
15919: CALL_OW 289
15923: PUSH
15924: LD_INT 0
15926: EQUAL
15927: IFFALSE 15944
// SetCargo ( i , mat_siberit , 100 ) ;
15929: LD_VAR 0 1
15933: PPUSH
15934: LD_INT 3
15936: PPUSH
15937: LD_INT 100
15939: PPUSH
15940: CALL_OW 290
15944: GO 15908
15946: POP
15947: POP
// end ;
15948: PPOPN 2
15950: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15951: LD_EXP 26
15955: PUSH
15956: LD_EXP 71
15960: AND
15961: IFFALSE 16114
15963: GO 15965
15965: DISABLE
15966: LD_INT 0
15968: PPUSH
15969: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15970: LD_ADDR_VAR 0 2
15974: PUSH
15975: LD_INT 22
15977: PUSH
15978: LD_OWVAR 2
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PPUSH
15987: CALL_OW 69
15991: ST_TO_ADDR
// if not tmp then
15992: LD_VAR 0 2
15996: NOT
15997: IFFALSE 16001
// exit ;
15999: GO 16114
// for i := 1 to 2 do
16001: LD_ADDR_VAR 0 1
16005: PUSH
16006: DOUBLE
16007: LD_INT 1
16009: DEC
16010: ST_TO_ADDR
16011: LD_INT 2
16013: PUSH
16014: FOR_TO
16015: IFFALSE 16112
// begin uc_side := your_side ;
16017: LD_ADDR_OWVAR 20
16021: PUSH
16022: LD_OWVAR 2
16026: ST_TO_ADDR
// uc_nation := nation_american ;
16027: LD_ADDR_OWVAR 21
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// vc_chassis := us_morphling ;
16035: LD_ADDR_OWVAR 37
16039: PUSH
16040: LD_INT 5
16042: ST_TO_ADDR
// vc_engine := engine_siberite ;
16043: LD_ADDR_OWVAR 39
16047: PUSH
16048: LD_INT 3
16050: ST_TO_ADDR
// vc_control := control_computer ;
16051: LD_ADDR_OWVAR 38
16055: PUSH
16056: LD_INT 3
16058: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16059: LD_ADDR_OWVAR 40
16063: PUSH
16064: LD_INT 10
16066: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
16067: CALL_OW 45
16071: PPUSH
16072: LD_VAR 0 2
16076: PUSH
16077: LD_INT 1
16079: ARRAY
16080: PPUSH
16081: CALL_OW 250
16085: PPUSH
16086: LD_VAR 0 2
16090: PUSH
16091: LD_INT 1
16093: ARRAY
16094: PPUSH
16095: CALL_OW 251
16099: PPUSH
16100: LD_INT 12
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 50
// end ;
16110: GO 16014
16112: POP
16113: POP
// end ;
16114: PPOPN 2
16116: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16117: LD_EXP 26
16121: PUSH
16122: LD_EXP 72
16126: AND
16127: IFFALSE 16349
16129: GO 16131
16131: DISABLE
16132: LD_INT 0
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16140: LD_ADDR_VAR 0 6
16144: PUSH
16145: LD_INT 22
16147: PUSH
16148: LD_OWVAR 2
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 1
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 3
16169: PUSH
16170: LD_INT 23
16172: PUSH
16173: LD_INT 0
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: ST_TO_ADDR
// if not tmp then
16194: LD_VAR 0 6
16198: NOT
16199: IFFALSE 16203
// exit ;
16201: GO 16349
// s1 := rand ( 1 , 4 ) ;
16203: LD_ADDR_VAR 0 2
16207: PUSH
16208: LD_INT 1
16210: PPUSH
16211: LD_INT 4
16213: PPUSH
16214: CALL_OW 12
16218: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16219: LD_ADDR_VAR 0 4
16223: PUSH
16224: LD_VAR 0 6
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: LD_VAR 0 2
16237: PPUSH
16238: CALL_OW 259
16242: ST_TO_ADDR
// if s1 = 1 then
16243: LD_VAR 0 2
16247: PUSH
16248: LD_INT 1
16250: EQUAL
16251: IFFALSE 16271
// s2 := rand ( 2 , 4 ) else
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_INT 2
16260: PPUSH
16261: LD_INT 4
16263: PPUSH
16264: CALL_OW 12
16268: ST_TO_ADDR
16269: GO 16279
// s2 := 1 ;
16271: LD_ADDR_VAR 0 3
16275: PUSH
16276: LD_INT 1
16278: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16279: LD_ADDR_VAR 0 5
16283: PUSH
16284: LD_VAR 0 6
16288: PUSH
16289: LD_INT 1
16291: ARRAY
16292: PPUSH
16293: LD_VAR 0 3
16297: PPUSH
16298: CALL_OW 259
16302: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16303: LD_VAR 0 6
16307: PUSH
16308: LD_INT 1
16310: ARRAY
16311: PPUSH
16312: LD_VAR 0 2
16316: PPUSH
16317: LD_VAR 0 5
16321: PPUSH
16322: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16326: LD_VAR 0 6
16330: PUSH
16331: LD_INT 1
16333: ARRAY
16334: PPUSH
16335: LD_VAR 0 3
16339: PPUSH
16340: LD_VAR 0 4
16344: PPUSH
16345: CALL_OW 237
// end ;
16349: PPOPN 6
16351: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16352: LD_EXP 26
16356: PUSH
16357: LD_EXP 73
16361: AND
16362: IFFALSE 16441
16364: GO 16366
16366: DISABLE
16367: LD_INT 0
16369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16370: LD_ADDR_VAR 0 1
16374: PUSH
16375: LD_INT 22
16377: PUSH
16378: LD_OWVAR 2
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 30
16389: PUSH
16390: LD_INT 3
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PPUSH
16401: CALL_OW 69
16405: ST_TO_ADDR
// if not tmp then
16406: LD_VAR 0 1
16410: NOT
16411: IFFALSE 16415
// exit ;
16413: GO 16441
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16415: LD_VAR 0 1
16419: PUSH
16420: LD_INT 1
16422: PPUSH
16423: LD_VAR 0 1
16427: PPUSH
16428: CALL_OW 12
16432: ARRAY
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 234
// end ;
16441: PPOPN 1
16443: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16444: LD_EXP 26
16448: PUSH
16449: LD_EXP 74
16453: AND
16454: IFFALSE 16566
16456: GO 16458
16458: DISABLE
16459: LD_INT 0
16461: PPUSH
16462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: LD_INT 22
16470: PUSH
16471: LD_OWVAR 2
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 2
16482: PUSH
16483: LD_INT 30
16485: PUSH
16486: LD_INT 27
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 30
16495: PUSH
16496: LD_INT 26
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 30
16505: PUSH
16506: LD_INT 28
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PPUSH
16523: CALL_OW 69
16527: ST_TO_ADDR
// if not tmp then
16528: LD_VAR 0 2
16532: NOT
16533: IFFALSE 16537
// exit ;
16535: GO 16566
// for i in tmp do
16537: LD_ADDR_VAR 0 1
16541: PUSH
16542: LD_VAR 0 2
16546: PUSH
16547: FOR_IN
16548: IFFALSE 16564
// SetLives ( i , 1 ) ;
16550: LD_VAR 0 1
16554: PPUSH
16555: LD_INT 1
16557: PPUSH
16558: CALL_OW 234
16562: GO 16547
16564: POP
16565: POP
// end ;
16566: PPOPN 2
16568: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16569: LD_EXP 26
16573: PUSH
16574: LD_EXP 75
16578: AND
16579: IFFALSE 16853
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
16588: PPUSH
// begin i := rand ( 1 , 7 ) ;
16589: LD_ADDR_VAR 0 1
16593: PUSH
16594: LD_INT 1
16596: PPUSH
16597: LD_INT 7
16599: PPUSH
16600: CALL_OW 12
16604: ST_TO_ADDR
// case i of 1 :
16605: LD_VAR 0 1
16609: PUSH
16610: LD_INT 1
16612: DOUBLE
16613: EQUAL
16614: IFTRUE 16618
16616: GO 16628
16618: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16619: LD_STRING earthquake(getX(game), 0, 32)
16621: PPUSH
16622: CALL_OW 559
16626: GO 16853
16628: LD_INT 2
16630: DOUBLE
16631: EQUAL
16632: IFTRUE 16636
16634: GO 16650
16636: POP
// begin ToLua ( displayStucuk(); ) ;
16637: LD_STRING displayStucuk();
16639: PPUSH
16640: CALL_OW 559
// ResetFog ;
16644: CALL_OW 335
// end ; 3 :
16648: GO 16853
16650: LD_INT 3
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16762
16658: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_OWVAR 2
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 25
16678: PUSH
16679: LD_INT 1
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: ST_TO_ADDR
// if not tmp then
16695: LD_VAR 0 2
16699: NOT
16700: IFFALSE 16704
// exit ;
16702: GO 16853
// un := tmp [ rand ( 1 , tmp ) ] ;
16704: LD_ADDR_VAR 0 3
16708: PUSH
16709: LD_VAR 0 2
16713: PUSH
16714: LD_INT 1
16716: PPUSH
16717: LD_VAR 0 2
16721: PPUSH
16722: CALL_OW 12
16726: ARRAY
16727: ST_TO_ADDR
// if Crawls ( un ) then
16728: LD_VAR 0 3
16732: PPUSH
16733: CALL_OW 318
16737: IFFALSE 16748
// ComWalk ( un ) ;
16739: LD_VAR 0 3
16743: PPUSH
16744: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16748: LD_VAR 0 3
16752: PPUSH
16753: LD_INT 8
16755: PPUSH
16756: CALL_OW 336
// end ; 4 :
16760: GO 16853
16762: LD_INT 4
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16831
16770: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16771: LD_ADDR_VAR 0 2
16775: PUSH
16776: LD_INT 22
16778: PUSH
16779: LD_OWVAR 2
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 30
16790: PUSH
16791: LD_INT 29
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PPUSH
16802: CALL_OW 69
16806: ST_TO_ADDR
// if not tmp then
16807: LD_VAR 0 2
16811: NOT
16812: IFFALSE 16816
// exit ;
16814: GO 16853
// DestroyUnit ( tmp [ 1 ] ) ;
16816: LD_VAR 0 2
16820: PUSH
16821: LD_INT 1
16823: ARRAY
16824: PPUSH
16825: CALL_OW 65
// end ; 5 .. 7 :
16829: GO 16853
16831: LD_INT 5
16833: DOUBLE
16834: GREATEREQUAL
16835: IFFALSE 16843
16837: LD_INT 7
16839: DOUBLE
16840: LESSEQUAL
16841: IFTRUE 16845
16843: GO 16852
16845: POP
// StreamSibBomb ; end ;
16846: CALL 13133 0 0
16850: GO 16853
16852: POP
// end ;
16853: PPOPN 3
16855: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16856: LD_EXP 26
16860: PUSH
16861: LD_EXP 76
16865: AND
16866: IFFALSE 17022
16868: GO 16870
16870: DISABLE
16871: LD_INT 0
16873: PPUSH
16874: PPUSH
16875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16876: LD_ADDR_VAR 0 2
16880: PUSH
16881: LD_INT 81
16883: PUSH
16884: LD_OWVAR 2
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: LD_INT 21
16898: PUSH
16899: LD_INT 1
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 21
16908: PUSH
16909: LD_INT 2
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PPUSH
16925: CALL_OW 69
16929: ST_TO_ADDR
// if not tmp then
16930: LD_VAR 0 2
16934: NOT
16935: IFFALSE 16939
// exit ;
16937: GO 17022
// p := 0 ;
16939: LD_ADDR_VAR 0 3
16943: PUSH
16944: LD_INT 0
16946: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16947: LD_INT 35
16949: PPUSH
16950: CALL_OW 67
// p := p + 1 ;
16954: LD_ADDR_VAR 0 3
16958: PUSH
16959: LD_VAR 0 3
16963: PUSH
16964: LD_INT 1
16966: PLUS
16967: ST_TO_ADDR
// for i in tmp do
16968: LD_ADDR_VAR 0 1
16972: PUSH
16973: LD_VAR 0 2
16977: PUSH
16978: FOR_IN
16979: IFFALSE 17010
// if GetLives ( i ) < 1000 then
16981: LD_VAR 0 1
16985: PPUSH
16986: CALL_OW 256
16990: PUSH
16991: LD_INT 1000
16993: LESS
16994: IFFALSE 17008
// SetLives ( i , 1000 ) ;
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_INT 1000
17003: PPUSH
17004: CALL_OW 234
17008: GO 16978
17010: POP
17011: POP
// until p > 20 ;
17012: LD_VAR 0 3
17016: PUSH
17017: LD_INT 20
17019: GREATER
17020: IFFALSE 16947
// end ;
17022: PPOPN 3
17024: END
// every 0 0$1 trigger StreamModeActive and sTime do
17025: LD_EXP 26
17029: PUSH
17030: LD_EXP 77
17034: AND
17035: IFFALSE 17070
17037: GO 17039
17039: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17040: LD_INT 28
17042: PPUSH
17043: LD_OWVAR 2
17047: PPUSH
17048: LD_INT 2
17050: PPUSH
17051: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17055: LD_INT 30
17057: PPUSH
17058: LD_OWVAR 2
17062: PPUSH
17063: LD_INT 2
17065: PPUSH
17066: CALL_OW 322
// end ;
17070: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17071: LD_EXP 26
17075: PUSH
17076: LD_EXP 78
17080: AND
17081: IFFALSE 17202
17083: GO 17085
17085: DISABLE
17086: LD_INT 0
17088: PPUSH
17089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17090: LD_ADDR_VAR 0 2
17094: PUSH
17095: LD_INT 22
17097: PUSH
17098: LD_OWVAR 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 21
17109: PUSH
17110: LD_INT 1
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 3
17119: PUSH
17120: LD_INT 23
17122: PUSH
17123: LD_INT 0
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: LIST
17138: PPUSH
17139: CALL_OW 69
17143: ST_TO_ADDR
// if not tmp then
17144: LD_VAR 0 2
17148: NOT
17149: IFFALSE 17153
// exit ;
17151: GO 17202
// for i in tmp do
17153: LD_ADDR_VAR 0 1
17157: PUSH
17158: LD_VAR 0 2
17162: PUSH
17163: FOR_IN
17164: IFFALSE 17200
// begin if Crawls ( i ) then
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 318
17175: IFFALSE 17186
// ComWalk ( i ) ;
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 138
// SetClass ( i , 2 ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: LD_INT 2
17193: PPUSH
17194: CALL_OW 336
// end ;
17198: GO 17163
17200: POP
17201: POP
// end ;
17202: PPOPN 2
17204: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17205: LD_EXP 26
17209: PUSH
17210: LD_EXP 79
17214: AND
17215: IFFALSE 17496
17217: GO 17219
17219: DISABLE
17220: LD_INT 0
17222: PPUSH
17223: PPUSH
17224: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17225: LD_OWVAR 2
17229: PPUSH
17230: LD_INT 9
17232: PPUSH
17233: LD_INT 1
17235: PPUSH
17236: LD_INT 1
17238: PPUSH
17239: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17243: LD_INT 9
17245: PPUSH
17246: LD_OWVAR 2
17250: PPUSH
17251: CALL_OW 343
// uc_side := 9 ;
17255: LD_ADDR_OWVAR 20
17259: PUSH
17260: LD_INT 9
17262: ST_TO_ADDR
// uc_nation := 2 ;
17263: LD_ADDR_OWVAR 21
17267: PUSH
17268: LD_INT 2
17270: ST_TO_ADDR
// hc_name := Dark Warrior ;
17271: LD_ADDR_OWVAR 26
17275: PUSH
17276: LD_STRING Dark Warrior
17278: ST_TO_ADDR
// hc_gallery :=  ;
17279: LD_ADDR_OWVAR 33
17283: PUSH
17284: LD_STRING 
17286: ST_TO_ADDR
// hc_noskilllimit := true ;
17287: LD_ADDR_OWVAR 76
17291: PUSH
17292: LD_INT 1
17294: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17295: LD_ADDR_OWVAR 31
17299: PUSH
17300: LD_INT 30
17302: PUSH
17303: LD_INT 30
17305: PUSH
17306: LD_INT 30
17308: PUSH
17309: LD_INT 30
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: ST_TO_ADDR
// un := CreateHuman ;
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: CALL_OW 44
17327: ST_TO_ADDR
// hc_noskilllimit := false ;
17328: LD_ADDR_OWVAR 76
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17336: LD_VAR 0 3
17340: PPUSH
17341: LD_INT 1
17343: PPUSH
17344: CALL_OW 51
// p := 0 ;
17348: LD_ADDR_VAR 0 2
17352: PUSH
17353: LD_INT 0
17355: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17356: LD_INT 35
17358: PPUSH
17359: CALL_OW 67
// p := p + 1 ;
17363: LD_ADDR_VAR 0 2
17367: PUSH
17368: LD_VAR 0 2
17372: PUSH
17373: LD_INT 1
17375: PLUS
17376: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17377: LD_VAR 0 3
17381: PPUSH
17382: CALL_OW 256
17386: PUSH
17387: LD_INT 1000
17389: LESS
17390: IFFALSE 17404
// SetLives ( un , 1000 ) ;
17392: LD_VAR 0 3
17396: PPUSH
17397: LD_INT 1000
17399: PPUSH
17400: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17404: LD_VAR 0 3
17408: PPUSH
17409: LD_INT 81
17411: PUSH
17412: LD_OWVAR 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 91
17423: PUSH
17424: LD_VAR 0 3
17428: PUSH
17429: LD_INT 30
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PPUSH
17441: CALL_OW 69
17445: PPUSH
17446: LD_VAR 0 3
17450: PPUSH
17451: CALL_OW 74
17455: PPUSH
17456: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17460: LD_VAR 0 2
17464: PUSH
17465: LD_INT 60
17467: GREATER
17468: PUSH
17469: LD_VAR 0 3
17473: PPUSH
17474: CALL_OW 301
17478: OR
17479: IFFALSE 17356
// if un then
17481: LD_VAR 0 3
17485: IFFALSE 17496
// RemoveUnit ( un ) ;
17487: LD_VAR 0 3
17491: PPUSH
17492: CALL_OW 64
// end ; end_of_file
17496: PPOPN 3
17498: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 264
17514: PUSH
17515: LD_EXP 84
17519: EQUAL
17520: IFFALSE 17592
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17522: LD_INT 68
17524: PPUSH
17525: LD_VAR 0 1
17529: PPUSH
17530: CALL_OW 255
17534: PPUSH
17535: CALL_OW 321
17539: PUSH
17540: LD_INT 2
17542: EQUAL
17543: IFFALSE 17555
// eff := 70 else
17545: LD_ADDR_VAR 0 4
17549: PUSH
17550: LD_INT 70
17552: ST_TO_ADDR
17553: GO 17563
// eff := 30 ;
17555: LD_ADDR_VAR 0 4
17559: PUSH
17560: LD_INT 30
17562: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 250
17572: PPUSH
17573: LD_VAR 0 1
17577: PPUSH
17578: CALL_OW 251
17582: PPUSH
17583: LD_VAR 0 4
17587: PPUSH
17588: CALL_OW 495
// end ; end ;
17592: LD_VAR 0 2
17596: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17597: LD_INT 0
17599: PPUSH
// end ;
17600: LD_VAR 0 4
17604: RET
// export function SOS_Command ( cmd ) ; begin
17605: LD_INT 0
17607: PPUSH
// end ;
17608: LD_VAR 0 2
17612: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17613: LD_VAR 0 1
17617: PUSH
17618: LD_INT 255
17620: EQUAL
17621: PUSH
17622: LD_VAR 0 2
17626: PPUSH
17627: CALL_OW 264
17631: PUSH
17632: LD_INT 14
17634: PUSH
17635: LD_INT 53
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: IN
17642: AND
17643: PUSH
17644: LD_VAR 0 4
17648: PPUSH
17649: LD_VAR 0 5
17653: PPUSH
17654: CALL_OW 488
17658: AND
17659: IFFALSE 17683
// CutTreeXYR ( unit , x , y , 12 ) ;
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 4
17670: PPUSH
17671: LD_VAR 0 5
17675: PPUSH
17676: LD_INT 12
17678: PPUSH
17679: CALL 17686 0 4
// end ;
17683: PPOPN 5
17685: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17686: LD_INT 0
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17697: LD_VAR 0 1
17701: NOT
17702: PUSH
17703: LD_VAR 0 2
17707: PPUSH
17708: LD_VAR 0 3
17712: PPUSH
17713: CALL_OW 488
17717: NOT
17718: OR
17719: PUSH
17720: LD_VAR 0 4
17724: NOT
17725: OR
17726: IFFALSE 17730
// exit ;
17728: GO 18070
// list := [ ] ;
17730: LD_ADDR_VAR 0 13
17734: PUSH
17735: EMPTY
17736: ST_TO_ADDR
// if x - r < 0 then
17737: LD_VAR 0 2
17741: PUSH
17742: LD_VAR 0 4
17746: MINUS
17747: PUSH
17748: LD_INT 0
17750: LESS
17751: IFFALSE 17763
// min_x := 0 else
17753: LD_ADDR_VAR 0 7
17757: PUSH
17758: LD_INT 0
17760: ST_TO_ADDR
17761: GO 17779
// min_x := x - r ;
17763: LD_ADDR_VAR 0 7
17767: PUSH
17768: LD_VAR 0 2
17772: PUSH
17773: LD_VAR 0 4
17777: MINUS
17778: ST_TO_ADDR
// if y - r < 0 then
17779: LD_VAR 0 3
17783: PUSH
17784: LD_VAR 0 4
17788: MINUS
17789: PUSH
17790: LD_INT 0
17792: LESS
17793: IFFALSE 17805
// min_y := 0 else
17795: LD_ADDR_VAR 0 8
17799: PUSH
17800: LD_INT 0
17802: ST_TO_ADDR
17803: GO 17821
// min_y := y - r ;
17805: LD_ADDR_VAR 0 8
17809: PUSH
17810: LD_VAR 0 3
17814: PUSH
17815: LD_VAR 0 4
17819: MINUS
17820: ST_TO_ADDR
// max_x := x + r ;
17821: LD_ADDR_VAR 0 9
17825: PUSH
17826: LD_VAR 0 2
17830: PUSH
17831: LD_VAR 0 4
17835: PLUS
17836: ST_TO_ADDR
// max_y := y + r ;
17837: LD_ADDR_VAR 0 10
17841: PUSH
17842: LD_VAR 0 3
17846: PUSH
17847: LD_VAR 0 4
17851: PLUS
17852: ST_TO_ADDR
// for _x = min_x to max_x do
17853: LD_ADDR_VAR 0 11
17857: PUSH
17858: DOUBLE
17859: LD_VAR 0 7
17863: DEC
17864: ST_TO_ADDR
17865: LD_VAR 0 9
17869: PUSH
17870: FOR_TO
17871: IFFALSE 17988
// for _y = min_y to max_y do
17873: LD_ADDR_VAR 0 12
17877: PUSH
17878: DOUBLE
17879: LD_VAR 0 8
17883: DEC
17884: ST_TO_ADDR
17885: LD_VAR 0 10
17889: PUSH
17890: FOR_TO
17891: IFFALSE 17984
// begin if not ValidHex ( _x , _y ) then
17893: LD_VAR 0 11
17897: PPUSH
17898: LD_VAR 0 12
17902: PPUSH
17903: CALL_OW 488
17907: NOT
17908: IFFALSE 17912
// continue ;
17910: GO 17890
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17912: LD_VAR 0 11
17916: PPUSH
17917: LD_VAR 0 12
17921: PPUSH
17922: CALL_OW 351
17926: PUSH
17927: LD_VAR 0 11
17931: PPUSH
17932: LD_VAR 0 12
17936: PPUSH
17937: CALL_OW 554
17941: AND
17942: IFFALSE 17982
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17944: LD_ADDR_VAR 0 13
17948: PUSH
17949: LD_VAR 0 13
17953: PPUSH
17954: LD_VAR 0 13
17958: PUSH
17959: LD_INT 1
17961: PLUS
17962: PPUSH
17963: LD_VAR 0 11
17967: PUSH
17968: LD_VAR 0 12
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL_OW 2
17981: ST_TO_ADDR
// end ;
17982: GO 17890
17984: POP
17985: POP
17986: GO 17870
17988: POP
17989: POP
// if not list then
17990: LD_VAR 0 13
17994: NOT
17995: IFFALSE 17999
// exit ;
17997: GO 18070
// for i in list do
17999: LD_ADDR_VAR 0 6
18003: PUSH
18004: LD_VAR 0 13
18008: PUSH
18009: FOR_IN
18010: IFFALSE 18068
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18012: LD_VAR 0 1
18016: PPUSH
18017: LD_STRING M
18019: PUSH
18020: LD_VAR 0 6
18024: PUSH
18025: LD_INT 1
18027: ARRAY
18028: PUSH
18029: LD_VAR 0 6
18033: PUSH
18034: LD_INT 2
18036: ARRAY
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: PUSH
18059: EMPTY
18060: LIST
18061: PPUSH
18062: CALL_OW 447
18066: GO 18009
18068: POP
18069: POP
// end ; end_of_file
18070: LD_VAR 0 5
18074: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
18075: GO 18077
18077: DISABLE
// begin ru_radar := 98 ;
18078: LD_ADDR_EXP 80
18082: PUSH
18083: LD_INT 98
18085: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18086: LD_ADDR_EXP 81
18090: PUSH
18091: LD_INT 89
18093: ST_TO_ADDR
// us_hack := 99 ;
18094: LD_ADDR_EXP 82
18098: PUSH
18099: LD_INT 99
18101: ST_TO_ADDR
// us_artillery := 97 ;
18102: LD_ADDR_EXP 83
18106: PUSH
18107: LD_INT 97
18109: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18110: LD_ADDR_EXP 84
18114: PUSH
18115: LD_INT 91
18117: ST_TO_ADDR
// tech_Artillery := 80 ;
18118: LD_ADDR_EXP 85
18122: PUSH
18123: LD_INT 80
18125: ST_TO_ADDR
// tech_RadMat := 81 ;
18126: LD_ADDR_EXP 86
18130: PUSH
18131: LD_INT 81
18133: ST_TO_ADDR
// tech_BasicTools := 82 ;
18134: LD_ADDR_EXP 87
18138: PUSH
18139: LD_INT 82
18141: ST_TO_ADDR
// tech_Cargo := 83 ;
18142: LD_ADDR_EXP 88
18146: PUSH
18147: LD_INT 83
18149: ST_TO_ADDR
// tech_Track := 84 ;
18150: LD_ADDR_EXP 89
18154: PUSH
18155: LD_INT 84
18157: ST_TO_ADDR
// tech_Crane := 85 ;
18158: LD_ADDR_EXP 90
18162: PUSH
18163: LD_INT 85
18165: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18166: LD_ADDR_EXP 91
18170: PUSH
18171: LD_INT 86
18173: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18174: LD_ADDR_EXP 92
18178: PUSH
18179: LD_INT 87
18181: ST_TO_ADDR
// end ;
18182: END
