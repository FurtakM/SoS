// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1114 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2673 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 21026 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 21026 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 21026 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1109
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1109
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; end ;
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1109
1108: POP
// end ; end_of_file
1109: LD_VAR 0 1
1113: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 2
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_OWVAR 67
1143: ARRAY
1144: ST_TO_ADDR
// uc_side := 3 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// uc_nation := 3 ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1161: LD_ADDR_EXP 26
1165: PUSH
1166: LD_STRING Pokryshkin
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: LD_STRING 
1174: PPUSH
1175: CALL 21026 0 3
1179: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1180: LD_EXP 26
1184: PPUSH
1185: LD_INT 44
1187: PPUSH
1188: LD_INT 5
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 48
// hc_importance := 0 ;
1198: LD_ADDR_OWVAR 32
1202: PUSH
1203: LD_INT 0
1205: ST_TO_ADDR
// hc_gallery :=  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name :=  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1222: LD_INT 1
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_VAR 0 2
1232: PPUSH
1233: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 69 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 69
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1261: LD_ADDR_OWVAR 26
1265: PUSH
1266: LD_STRING Ilja Ivanov
1268: ST_TO_ADDR
// un := CreateHuman ;
1269: LD_ADDR_VAR 0 4
1273: PUSH
1274: CALL_OW 44
1278: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1279: LD_ADDR_EXP 21
1283: PUSH
1284: LD_EXP 21
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: CALL_OW 2
1301: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 3
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 2
1327: PPUSH
1328: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING SecondCharsGal
1339: ST_TO_ADDR
// hc_face_number := 70 ;
1340: LD_ADDR_OWVAR 34
1344: PUSH
1345: LD_INT 70
1347: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1348: LD_ADDR_OWVAR 26
1352: PUSH
1353: LD_STRING Pavel Starczy
1355: ST_TO_ADDR
// un := CreateHuman ;
1356: LD_ADDR_VAR 0 4
1360: PUSH
1361: CALL_OW 44
1365: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1366: LD_ADDR_EXP 21
1370: PUSH
1371: LD_EXP 21
1375: PPUSH
1376: LD_INT 2
1378: PPUSH
1379: LD_VAR 0 4
1383: PPUSH
1384: CALL_OW 2
1388: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1389: LD_VAR 0 4
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// InitHc ;
1404: CALL_OW 19
// for i = 1 to 7 do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_INT 7
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1573
// begin PrepareHuman ( false , 1 , skill ) ;
1424: LD_INT 0
1426: PPUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_VAR 0 2
1434: PPUSH
1435: CALL_OW 380
// un := CreateHuman ;
1439: LD_ADDR_VAR 0 4
1443: PUSH
1444: CALL_OW 44
1448: ST_TO_ADDR
// if i mod 2 = 0 then
1449: LD_VAR 0 3
1453: PUSH
1454: LD_INT 2
1456: MOD
1457: PUSH
1458: LD_INT 0
1460: EQUAL
1461: IFFALSE 1518
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1463: LD_ADDR_EXP 21
1467: PUSH
1468: LD_EXP 21
1472: PPUSH
1473: LD_EXP 21
1477: PUSH
1478: LD_INT 1
1480: PLUS
1481: PPUSH
1482: LD_VAR 0 4
1486: PPUSH
1487: CALL_OW 2
1491: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1492: LD_VAR 0 4
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL_OW 49
// ComHold ( un ) ;
1507: LD_VAR 0 4
1511: PPUSH
1512: CALL_OW 140
// end else
1516: GO 1571
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1518: LD_ADDR_EXP 22
1522: PUSH
1523: LD_EXP 22
1527: PPUSH
1528: LD_EXP 22
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 2
1546: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_INT 4
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// ComHold ( un ) ;
1562: LD_VAR 0 4
1566: PPUSH
1567: CALL_OW 140
// end ; end ;
1571: GO 1421
1573: POP
1574: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 30
1592: PUSH
1593: LD_INT 31
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 69
1608: PUSH
1609: FOR_IN
1610: IFFALSE 1628
// PrepareSolBun ( skill , i ) ;
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 3
1621: PPUSH
1622: CALL 197 0 2
1626: GO 1609
1628: POP
1629: POP
// for i = 1 to 2 do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 2
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1775
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_INT 3
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: LD_INT 22
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: LD_INT 42
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 333 0 7
1676: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1677: LD_INT 0
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_VAR 0 2
1687: PPUSH
1688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1692: CALL_OW 44
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1706: LD_VAR 0 4
1710: PPUSH
1711: LD_INT 23
1713: PUSH
1714: LD_INT 131
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_VAR 0 3
1725: ARRAY
1726: PPUSH
1727: LD_INT 14
1729: PUSH
1730: LD_INT 87
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_VAR 0 3
1741: ARRAY
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1750: LD_ADDR_EXP 23
1754: PUSH
1755: LD_EXP 23
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_VAR 0 4
1767: PPUSH
1768: CALL_OW 2
1772: ST_TO_ADDR
// end ;
1773: GO 1643
1775: POP
1776: POP
// for i = 1 to 2 do
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: DOUBLE
1783: LD_INT 1
1785: DEC
1786: ST_TO_ADDR
1787: LD_INT 2
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1882
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1793: LD_INT 2
1795: PUSH
1796: LD_INT 1
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_VAR 0 3
1811: ARRAY
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: CALL_OW 380
// un := CreateHuman ;
1823: LD_ADDR_VAR 0 4
1827: PUSH
1828: CALL_OW 44
1832: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1833: LD_ADDR_EXP 24
1837: PUSH
1838: LD_EXP 24
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_VAR 0 4
1850: PPUSH
1851: CALL_OW 2
1855: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1856: LD_VAR 0 4
1860: PPUSH
1861: LD_INT 10
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// ComHold ( un ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: CALL_OW 140
// end ;
1880: GO 1790
1882: POP
1883: POP
// if Difficulty < 3 then
1884: LD_OWVAR 67
1888: PUSH
1889: LD_INT 3
1891: LESS
1892: IFFALSE 1896
// exit ;
1894: GO 1939
// PrepareHuman ( false , 1 , skill ) ;
1896: LD_INT 0
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: LD_VAR 0 2
1906: PPUSH
1907: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1911: LD_ADDR_EXP 25
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1921: LD_EXP 25
1925: PPUSH
1926: LD_INT 82
1928: PPUSH
1929: LD_INT 2
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// end ;
1939: LD_VAR 0 1
1943: RET
// every 0 0$01 trigger active_road_patrol do
1944: LD_EXP 8
1948: IFFALSE 2014
1950: GO 1952
1952: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1953: LD_EXP 23
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: LD_STRING road
1964: PPUSH
1965: LD_INT 70
1967: PPUSH
1968: LD_INT 131
1970: PUSH
1971: LD_INT 87
1973: PUSH
1974: LD_INT 107
1976: PUSH
1977: LD_INT 75
1979: PUSH
1980: LD_INT 107
1982: PUSH
1983: LD_INT 66
1985: PUSH
1986: LD_INT 114
1988: PUSH
1989: LD_INT 61
1991: PUSH
1992: LD_INT 107
1994: PUSH
1995: LD_INT 34
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: PPUSH
2010: CALL 421 0 4
2014: END
// every 0 0$01 trigger active_road_patrol do
2015: LD_EXP 8
2019: IFFALSE 2077
2021: GO 2023
2023: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2024: LD_EXP 23
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_STRING road
2035: PPUSH
2036: LD_INT 70
2038: PPUSH
2039: LD_INT 21
2041: PUSH
2042: LD_INT 12
2044: PUSH
2045: LD_INT 37
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 65
2053: PUSH
2054: LD_INT 62
2056: PUSH
2057: LD_INT 107
2059: PUSH
2060: LD_INT 76
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL 421 0 4
2077: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2078: LD_EXP 25
2082: PPUSH
2083: CALL_OW 302
2087: IFFALSE 2149
2089: GO 2091
2091: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2092: LD_EXP 25
2096: PPUSH
2097: LD_STRING forest
2099: PPUSH
2100: LD_INT 35
2102: PPUSH
2103: LD_INT 52
2105: PUSH
2106: LD_INT 15
2108: PUSH
2109: LD_INT 81
2111: PUSH
2112: LD_INT 9
2114: PUSH
2115: LD_INT 120
2117: PUSH
2118: LD_INT 52
2120: PUSH
2121: LD_INT 135
2123: PUSH
2124: LD_INT 80
2126: PUSH
2127: LD_INT 122
2129: PUSH
2130: LD_INT 95
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL 421 0 4
2149: END
// every 0 0$01 trigger macmilan_use_radio do
2150: LD_EXP 6
2154: IFFALSE 2215
2156: GO 2158
2158: DISABLE
// begin active_road_patrol := false ;
2159: LD_ADDR_EXP 8
2163: PUSH
2164: LD_INT 0
2166: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2167: LD_EXP 23
2171: PPUSH
2172: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2176: LD_EXP 23
2180: PPUSH
2181: LD_INT 72
2183: PPUSH
2184: LD_INT 41
2186: PPUSH
2187: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2191: LD_EXP 22
2195: PPUSH
2196: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2200: LD_EXP 22
2204: PPUSH
2205: LD_INT 72
2207: PPUSH
2208: LD_INT 41
2210: PPUSH
2211: CALL_OW 174
// end ;
2215: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2216: LD_INT 9
2218: PPUSH
2219: LD_INT 22
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 70
2233: IFFALSE 2307
2235: GO 2237
2237: DISABLE
2238: LD_INT 0
2240: PPUSH
// begin enable ;
2241: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2242: LD_ADDR_VAR 0 1
2246: PUSH
2247: LD_INT 9
2249: PPUSH
2250: LD_INT 22
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 70
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2269: LD_EXP 22
2273: PPUSH
2274: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2278: LD_EXP 22
2282: PPUSH
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 250
2292: PPUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 251
2302: PPUSH
2303: CALL_OW 174
// end ;
2307: PPOPN 1
2309: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2310: LD_EXP 23
2314: PUSH
2315: LD_INT 1
2317: ARRAY
2318: PPUSH
2319: CALL_OW 256
2323: PUSH
2324: LD_INT 999
2326: LESS
2327: PUSH
2328: LD_EXP 23
2332: PUSH
2333: LD_INT 2
2335: ARRAY
2336: PPUSH
2337: CALL_OW 256
2341: PUSH
2342: LD_INT 999
2344: LESS
2345: OR
2346: PUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_EXP 16
2354: PPUSH
2355: CALL_OW 292
2359: AND
2360: IFFALSE 2387
2362: GO 2364
2364: DISABLE
// begin active_road_patrol := false ;
2365: LD_ADDR_EXP 8
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2373: LD_EXP 23
2377: PPUSH
2378: LD_EXP 16
2382: PPUSH
2383: CALL_OW 115
// end ;
2387: END
// every 0 0$01 trigger macmilan_in_trap do
2388: LD_EXP 9
2392: IFFALSE 2438
2394: GO 2396
2396: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2397: LD_EXP 22
2401: PPUSH
2402: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2406: LD_EXP 21
2410: PUSH
2411: LD_EXP 22
2415: ADD
2416: PUSH
2417: LD_EXP 26
2421: ADD
2422: PUSH
2423: LD_EXP 23
2427: ADD
2428: PPUSH
2429: LD_EXP 16
2433: PPUSH
2434: CALL_OW 115
// end ;
2438: END
// every 0 0$01 trigger meta_action do
2439: LD_EXP 10
2443: IFFALSE 2489
2445: GO 2447
2447: DISABLE
// begin active_road_patrol := false ;
2448: LD_ADDR_EXP 8
2452: PUSH
2453: LD_INT 0
2455: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2456: LD_EXP 21
2460: PUSH
2461: LD_EXP 22
2465: ADD
2466: PUSH
2467: LD_EXP 26
2471: ADD
2472: PUSH
2473: LD_EXP 23
2477: ADD
2478: PPUSH
2479: LD_INT 93
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 114
// end ;
2489: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2490: LD_EXP 26
2494: PPUSH
2495: CALL_OW 256
2499: PUSH
2500: LD_INT 1000
2502: LESS
2503: IFFALSE 2554
2505: GO 2507
2507: DISABLE
// begin enable ;
2508: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2509: LD_INT 18
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 428
2519: PUSH
2520: LD_EXP 26
2524: EQUAL
2525: IFFALSE 2539
// begin RemoveUnit ( Pokryshkin ) ;
2527: LD_EXP 26
2531: PPUSH
2532: CALL_OW 64
// disable ;
2536: DISABLE
// end else
2537: GO 2554
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2539: LD_EXP 26
2543: PPUSH
2544: LD_INT 18
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 111
// end ;
2554: END
// every 0 0$20 trigger send_troops_to_forest do
2555: LD_EXP 14
2559: IFFALSE 2613
2561: GO 2563
2563: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 302
2573: NOT
2574: IFFALSE 2578
// exit ;
2576: GO 2613
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2578: LD_EXP 21
2582: PUSH
2583: LD_EXP 26
2587: ADD
2588: PPUSH
2589: LD_EXP 25
2593: PPUSH
2594: CALL_OW 252
2598: PPUSH
2599: LD_EXP 25
2603: PPUSH
2604: CALL_OW 253
2608: PPUSH
2609: CALL_OW 114
// end ;
2613: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 255
2623: PUSH
2624: LD_INT 3
2626: EQUAL
2627: IFFALSE 2670
// begin wait ( 11 ) ;
2629: LD_INT 11
2631: PPUSH
2632: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2636: LD_VAR 0 1
2640: PPUSH
2641: LD_INT 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: PPUSH
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 74
2665: PPUSH
2666: CALL_OW 120
// end ; end ; end_of_file
2670: PPOPN 4
2672: END
// export function Action ; var i ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: LD_INT 22
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2725
// ComHold ( i ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: CALL_OW 140
2723: GO 2711
2725: POP
2726: POP
// InGameOn ;
2727: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2731: LD_INT 79
2733: PPUSH
2734: LD_INT 76
2736: PPUSH
2737: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2741: LD_INT 10
2743: PPUSH
2744: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2748: LD_EXP 16
2752: PPUSH
2753: LD_INT 80
2755: PPUSH
2756: LD_INT 79
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 48
// Wait ( 0 0$03 ) ;
2766: LD_INT 105
2768: PPUSH
2769: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_INT 80
2780: PPUSH
2781: LD_INT 76
2783: PPUSH
2784: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2788: LD_EXP 16
2792: PPUSH
2793: LD_STRING D1-JMM-1
2795: PPUSH
2796: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2800: LD_INT 10
2802: PPUSH
2803: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2807: LD_EXP 16
2811: PPUSH
2812: LD_INT 76
2814: PPUSH
2815: LD_INT 76
2817: PPUSH
2818: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2822: LD_EXP 16
2826: PPUSH
2827: LD_STRING D1-JMM-1a
2829: PPUSH
2830: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2834: LD_INT 10
2836: PPUSH
2837: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2841: LD_EXP 16
2845: PPUSH
2846: LD_INT 83
2848: PPUSH
2849: LD_INT 66
2851: PPUSH
2852: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2856: LD_EXP 16
2860: PPUSH
2861: LD_STRING D1-JMM-1b
2863: PPUSH
2864: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2868: LD_INT 18
2870: PPUSH
2871: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2875: LD_EXP 16
2879: PPUSH
2880: LD_STRING D1-JMM-1c
2882: PPUSH
2883: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2887: LD_INT 7
2889: PPUSH
2890: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2894: LD_EXP 19
2898: PPUSH
2899: LD_STRING D1-Pow-1
2901: PPUSH
2902: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2906: LD_EXP 16
2910: PPUSH
2911: LD_STRING D1-JMM-2
2913: PPUSH
2914: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2918: LD_EXP 19
2922: PPUSH
2923: LD_STRING D1-Pow-2
2925: PPUSH
2926: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2930: LD_EXP 16
2934: PPUSH
2935: LD_STRING D1-JMM-3
2937: PPUSH
2938: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2942: LD_EXP 19
2946: PPUSH
2947: LD_STRING D1-Pow-3
2949: PPUSH
2950: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2954: LD_EXP 16
2958: PPUSH
2959: LD_STRING D1-JMM-4
2961: PPUSH
2962: CALL_OW 88
// ComFree ( JMM ) ;
2966: LD_EXP 16
2970: PPUSH
2971: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2975: LD_INT 10
2977: PPUSH
2978: CALL_OW 67
// InGameOff ;
2982: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2986: LD_STRING M1
2988: PPUSH
2989: CALL_OW 337
// SaveForQuickRestart ;
2993: CALL_OW 22
// active_russian_dialog := true ;
2997: LD_ADDR_EXP 3
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// active_road_patrol := true ;
3005: LD_ADDR_EXP 8
3009: PUSH
3010: LD_INT 1
3012: ST_TO_ADDR
// if Difficulty < 3 then
3013: LD_OWVAR 67
3017: PUSH
3018: LD_INT 3
3020: LESS
3021: IFFALSE 3052
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3023: LD_EXP 17
3027: PPUSH
3028: LD_INT 41
3030: PPUSH
3031: LD_INT 71
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// ComHold ( Bobby ) ;
3041: LD_EXP 17
3045: PPUSH
3046: CALL_OW 140
// end else
3050: GO 3100
// begin SetDir ( Bobby , 5 ) ;
3052: LD_EXP 17
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3064: LD_EXP 17
3068: PPUSH
3069: LD_INT 105
3071: PPUSH
3072: LD_INT 98
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 48
// ComCrawl ( Bobby ) ;
3082: LD_EXP 17
3086: PPUSH
3087: CALL_OW 137
// AddComHold ( Bobby ) ;
3091: LD_EXP 17
3095: PPUSH
3096: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3100: LD_EXP 18
3104: PPUSH
3105: LD_INT 90
3107: PPUSH
3108: LD_INT 42
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3118: LD_EXP 18
3122: PPUSH
3123: LD_INT 79
3125: PPUSH
3126: LD_INT 34
3128: PPUSH
3129: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3133: LD_EXP 18
3137: PPUSH
3138: CALL_OW 197
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3147: LD_EXP 3
3151: IFFALSE 3745
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
// begin wait_points := 0 ;
3159: LD_ADDR_VAR 0 1
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3167: LD_INT 70
3169: PPUSH
3170: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3174: LD_EXP 21
3178: PPUSH
3179: LD_INT 79
3181: PPUSH
3182: LD_INT 83
3184: PPUSH
3185: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3189: LD_EXP 21
3193: PUSH
3194: LD_INT 2
3196: ARRAY
3197: PPUSH
3198: LD_STRING D1R-Rus1-1
3200: PPUSH
3201: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3205: LD_EXP 21
3209: PUSH
3210: LD_INT 1
3212: ARRAY
3213: PPUSH
3214: LD_STRING D1R-Rus2-1
3216: PPUSH
3217: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3221: LD_EXP 22
3225: PPUSH
3226: LD_INT 91
3228: PPUSH
3229: LD_INT 80
3231: PPUSH
3232: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3236: LD_INT 35
3238: PPUSH
3239: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3243: LD_EXP 21
3247: PUSH
3248: LD_INT 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 79
3254: PPUSH
3255: LD_INT 82
3257: PPUSH
3258: CALL_OW 297
3262: PUSH
3263: LD_INT 6
3265: LESS
3266: IFFALSE 3236
// if not IsInArea ( JMM , jmm_spot ) then
3268: LD_EXP 16
3272: PPUSH
3273: LD_INT 5
3275: PPUSH
3276: CALL_OW 308
3280: NOT
3281: IFFALSE 3301
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3283: LD_EXP 21
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: PPUSH
3292: LD_STRING D1Ra-Rus2-1
3294: PPUSH
3295: CALL_OW 88
3299: GO 3368
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3301: LD_EXP 21
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: LD_STRING D1Rb-Rus1-1
3312: PPUSH
3313: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3317: LD_EXP 21
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_STRING D1Rb-Rus2-1
3328: PPUSH
3329: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3333: LD_EXP 21
3337: PUSH
3338: LD_EXP 22
3342: ADD
3343: PPUSH
3344: LD_EXP 16
3348: PPUSH
3349: CALL_OW 250
3353: PPUSH
3354: LD_EXP 16
3358: PPUSH
3359: CALL_OW 251
3363: PPUSH
3364: CALL_OW 114
// end ; wait_points := 10 ;
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_INT 10
3375: ST_TO_ADDR
// if Difficulty > 1 then
3376: LD_OWVAR 67
3380: PUSH
3381: LD_INT 1
3383: GREATER
3384: IFFALSE 3466
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3386: LD_EXP 21
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 95
3396: PPUSH
3397: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3401: LD_EXP 21
3405: PPUSH
3406: LD_INT 175
3408: PPUSH
3409: CALL_OW 202
// wait_points := wait_points + 15 ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 15
3425: PLUS
3426: ST_TO_ADDR
// if Difficulty > 2 then
3427: LD_OWVAR 67
3431: PUSH
3432: LD_INT 2
3434: GREATER
3435: IFFALSE 3466
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3437: LD_EXP 21
3441: PPUSH
3442: LD_INT 65
3444: PPUSH
3445: LD_INT 79
3447: PPUSH
3448: CALL_OW 174
// wait_points := wait_points + 5 ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_VAR 0 1
3461: PUSH
3462: LD_INT 5
3464: PLUS
3465: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// wait_points := wait_points - 1 ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: LD_VAR 0 1
3482: PUSH
3483: LD_INT 1
3485: MINUS
3486: ST_TO_ADDR
// if See ( 3 , JMM ) then
3487: LD_INT 3
3489: PPUSH
3490: LD_EXP 16
3494: PPUSH
3495: CALL_OW 292
3499: IFFALSE 3553
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3501: LD_EXP 21
3505: PUSH
3506: LD_INT 2
3508: ARRAY
3509: PPUSH
3510: LD_STRING D1Rb-Rus1-1
3512: PPUSH
3513: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3517: LD_EXP 21
3521: PPUSH
3522: LD_EXP 16
3526: PPUSH
3527: CALL_OW 250
3531: PPUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 251
3541: PPUSH
3542: CALL_OW 114
// Wait ( 0 0$03 ) ;
3546: LD_INT 105
3548: PPUSH
3549: CALL_OW 67
// end ; until wait_points = 0 ;
3553: LD_VAR 0 1
3557: PUSH
3558: LD_INT 0
3560: EQUAL
3561: IFFALSE 3466
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3563: LD_EXP 21
3567: PUSH
3568: LD_INT 2
3570: ARRAY
3571: PPUSH
3572: LD_STRING D1Rc-Rus1-1
3574: PPUSH
3575: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING D1Ra-Rus2-1a
3590: PPUSH
3591: CALL_OW 88
// active_powell_dialog := true ;
3595: LD_ADDR_EXP 15
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3603: LD_EXP 21
3607: PPUSH
3608: LD_INT 45
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3618: LD_EXP 22
3622: PPUSH
3623: LD_INT 26
3625: PPUSH
3626: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3630: LD_INT 35
3632: PPUSH
3633: CALL_OW 67
// if See ( 3 , JMM ) then
3637: LD_INT 3
3639: PPUSH
3640: LD_EXP 16
3644: PPUSH
3645: CALL_OW 292
3649: IFFALSE 3705
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3651: LD_EXP 21
3655: PUSH
3656: LD_INT 2
3658: ARRAY
3659: PPUSH
3660: LD_STRING D1Rb-Rus1-1
3662: PPUSH
3663: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3667: LD_EXP 21
3671: PPUSH
3672: LD_EXP 16
3676: PPUSH
3677: CALL_OW 250
3681: PPUSH
3682: LD_EXP 16
3686: PPUSH
3687: CALL_OW 251
3691: PPUSH
3692: CALL_OW 114
// Wait ( 0 0$50 ) ;
3696: LD_INT 1750
3698: PPUSH
3699: CALL_OW 67
// end else
3703: GO 3720
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3705: LD_EXP 21
3709: PPUSH
3710: LD_INT 45
3712: PPUSH
3713: LD_INT 5
3715: PPUSH
3716: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_INT 45
3731: PPUSH
3732: LD_INT 5
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 10
3742: LESS
3743: IFFALSE 3630
// end ;
3745: PPOPN 1
3747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3748: LD_INT 22
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 92
3760: PUSH
3761: LD_INT 80
3763: PUSH
3764: LD_INT 83
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: PUSH
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: EQUAL
3793: AND
3794: IFFALSE 3875
3796: GO 3798
3798: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3799: LD_INT 80
3801: PPUSH
3802: LD_INT 83
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 7
3810: NEG
3811: PPUSH
3812: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3823: LD_INT 22
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 92
3835: PUSH
3836: LD_INT 80
3838: PUSH
3839: LD_INT 83
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 69
3859: NOT
3860: IFFALSE 3816
// RemoveSeeing ( 80 , 83 , 1 ) ;
3862: LD_INT 80
3864: PPUSH
3865: LD_INT 83
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 331
// end ;
3875: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 and IsOk ( Bobby ) do
3876: LD_EXP 16
3880: PPUSH
3881: LD_EXP 17
3885: PPUSH
3886: CALL_OW 296
3890: PUSH
3891: LD_INT 9
3893: LESS
3894: PUSH
3895: LD_EXP 17
3899: PPUSH
3900: CALL_OW 302
3904: AND
3905: IFFALSE 4356
3907: GO 3909
3909: DISABLE
// begin ComWalk ( Bobby ) ;
3910: LD_EXP 17
3914: PPUSH
3915: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3919: LD_EXP 17
3923: PPUSH
3924: LD_EXP 16
3928: PPUSH
3929: CALL_OW 250
3933: PPUSH
3934: LD_EXP 16
3938: PPUSH
3939: CALL_OW 251
3943: PPUSH
3944: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3948: LD_INT 35
3950: PPUSH
3951: CALL_OW 67
// until See ( 4 , JMM ) ;
3955: LD_INT 4
3957: PPUSH
3958: LD_EXP 16
3962: PPUSH
3963: CALL_OW 292
3967: IFFALSE 3948
// InGameOn ;
3969: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 17
3982: PPUSH
3983: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3987: LD_EXP 7
3991: PUSH
3992: LD_EXP 18
3996: PPUSH
3997: CALL_OW 302
4001: AND
4002: PUSH
4003: LD_EXP 16
4007: PPUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 296
4017: PUSH
4018: LD_INT 10
4020: LESS
4021: AND
4022: IFFALSE 4067
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4024: LD_EXP 18
4028: PPUSH
4029: LD_EXP 16
4033: PPUSH
4034: CALL_OW 250
4038: PPUSH
4039: LD_EXP 16
4043: PPUSH
4044: CALL_OW 251
4048: PPUSH
4049: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4053: LD_EXP 18
4057: PPUSH
4058: LD_EXP 17
4062: PPUSH
4063: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING D2-JMM-1
4074: PPUSH
4075: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4079: LD_INT 10
4081: PPUSH
4082: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4086: LD_EXP 17
4090: PPUSH
4091: LD_EXP 16
4095: PPUSH
4096: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4100: LD_EXP 17
4104: PPUSH
4105: LD_STRING D2-Bobby-1
4107: PPUSH
4108: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4112: LD_EXP 16
4116: PPUSH
4117: LD_STRING D2-JMM-2
4119: PPUSH
4120: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4124: LD_EXP 17
4128: PPUSH
4129: LD_EXP 16
4133: PPUSH
4134: CALL_OW 250
4138: PPUSH
4139: LD_EXP 16
4143: PPUSH
4144: CALL_OW 251
4148: PPUSH
4149: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4153: LD_EXP 17
4157: PPUSH
4158: LD_STRING D2-Bobby-2
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4165: LD_EXP 16
4169: PPUSH
4170: LD_STRING D2-JMM-3
4172: PPUSH
4173: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4177: LD_EXP 17
4181: PPUSH
4182: LD_EXP 16
4186: PPUSH
4187: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4191: LD_EXP 17
4195: PPUSH
4196: LD_STRING D2-Bobby-3
4198: PPUSH
4199: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4203: LD_EXP 16
4207: PPUSH
4208: LD_STRING D2-JMM-4
4210: PPUSH
4211: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4215: LD_EXP 17
4219: PPUSH
4220: LD_STRING D2-Bobby-4
4222: PPUSH
4223: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4227: LD_EXP 16
4231: PPUSH
4232: LD_STRING D2-JMM-5
4234: PPUSH
4235: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4239: LD_EXP 17
4243: PPUSH
4244: LD_STRING D2-Bobby-5
4246: PPUSH
4247: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4251: LD_EXP 16
4255: PPUSH
4256: LD_STRING D2-JMM-6
4258: PPUSH
4259: CALL_OW 88
// if not powell_contact then
4263: LD_EXP 5
4267: NOT
4268: IFFALSE 4294
// begin Say ( Bobby , D2-Bobby-6 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-6
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-7
4289: PPUSH
4290: CALL_OW 88
// end ; InGameOff ;
4294: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4298: LD_EXP 17
4302: PPUSH
4303: LD_INT 1
4305: PPUSH
4306: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4310: LD_EXP 16
4314: PUSH
4315: LD_EXP 17
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 139
// bobby_in_squad := true ;
4328: LD_ADDR_EXP 4
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4336: LD_EXP 5
4340: PUSH
4341: LD_EXP 7
4345: NOT
4346: AND
4347: IFFALSE 4356
// ChangeMissionObjectives ( M2b ) ;
4349: LD_STRING M2b
4351: PPUSH
4352: CALL_OW 337
// end ;
4356: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4357: LD_EXP 3
4361: PUSH
4362: LD_EXP 4
4366: NOT
4367: AND
4368: PUSH
4369: LD_OWVAR 67
4373: PUSH
4374: LD_INT 3
4376: LESS
4377: AND
4378: IFFALSE 4398
4380: GO 4382
4382: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4383: LD_EXP 17
4387: PPUSH
4388: LD_INT 75
4390: PPUSH
4391: LD_INT 83
4393: PPUSH
4394: CALL_OW 111
4398: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4399: LD_EXP 7
4403: PUSH
4404: LD_EXP 4
4408: NOT
4409: AND
4410: IFFALSE 4439
4412: GO 4414
4414: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4415: LD_EXP 17
4419: PPUSH
4420: LD_INT 105
4422: PPUSH
4423: LD_INT 97
4425: PPUSH
4426: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4430: LD_EXP 17
4434: PPUSH
4435: CALL_OW 197
// end ;
4439: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4440: LD_EXP 16
4444: PPUSH
4445: LD_INT 6
4447: PPUSH
4448: CALL_OW 308
4452: PUSH
4453: LD_EXP 16
4457: PPUSH
4458: LD_EXP 17
4462: PPUSH
4463: CALL_OW 296
4467: PUSH
4468: LD_INT 7
4470: LESS
4471: AND
4472: PUSH
4473: LD_EXP 4
4477: AND
4478: IFFALSE 4525
4480: GO 4482
4482: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4483: LD_EXP 16
4487: PUSH
4488: LD_EXP 17
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4501: LD_EXP 16
4505: PPUSH
4506: LD_STRING D2a-JMM-1
4508: PPUSH
4509: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4513: LD_EXP 17
4517: PPUSH
4518: LD_STRING D2a-Bobby-1
4520: PPUSH
4521: CALL_OW 88
// end ;
4525: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4526: LD_EXP 15
4530: PUSH
4531: LD_INT 3
4533: PPUSH
4534: LD_EXP 16
4538: PPUSH
4539: CALL_OW 292
4543: NOT
4544: AND
4545: IFFALSE 4716
4547: GO 4549
4549: DISABLE
// begin wait ( 0 0$5 ) ;
4550: LD_INT 175
4552: PPUSH
4553: CALL_OW 67
// InGameOn ;
4557: CALL_OW 8
// DialogueOn ;
4561: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4565: LD_EXP 19
4569: PPUSH
4570: LD_STRING D3-Pow-1
4572: PPUSH
4573: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4577: LD_EXP 16
4581: PPUSH
4582: LD_STRING D3-JMM-1
4584: PPUSH
4585: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4589: LD_EXP 19
4593: PPUSH
4594: LD_STRING D3-Pow-2
4596: PPUSH
4597: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4601: LD_EXP 16
4605: PPUSH
4606: LD_STRING D3-JMM-2
4608: PPUSH
4609: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4613: LD_EXP 19
4617: PPUSH
4618: LD_STRING D3-Pow-3
4620: PPUSH
4621: CALL_OW 586
// DialogueOff ;
4625: CALL_OW 7
// InGameOff ;
4629: CALL_OW 9
// powell_contact := true ;
4633: LD_ADDR_EXP 5
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4641: LD_INT 10
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: CALL_OW 424
// uc_side := 4 ;
4651: LD_ADDR_OWVAR 20
4655: PUSH
4656: LD_INT 4
4658: ST_TO_ADDR
// uc_nation := 1 ;
4659: LD_ADDR_OWVAR 21
4663: PUSH
4664: LD_INT 1
4666: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4667: LD_ADDR_EXP 19
4671: PUSH
4672: LD_STRING Powell
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: LD_STRING 
4680: PPUSH
4681: CALL 21026 0 3
4685: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4686: LD_STRING M2
4688: PPUSH
4689: CALL_OW 337
// if not bobby_in_squad then
4693: LD_EXP 4
4697: NOT
4698: IFFALSE 4709
// ChangeMissionObjectives ( M2a ) else
4700: LD_STRING M2a
4702: PPUSH
4703: CALL_OW 337
4707: GO 4716
// ChangeMissionObjectives ( M2b ) ;
4709: LD_STRING M2b
4711: PPUSH
4712: CALL_OW 337
// end ;
4716: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4717: LD_EXP 16
4721: PPUSH
4722: LD_INT 7
4724: PPUSH
4725: CALL_OW 308
4729: IFFALSE 4864
4731: GO 4733
4733: DISABLE
// begin DialogueOn ;
4734: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4738: LD_EXP 20
4742: PPUSH
4743: LD_STRING D4-Rus3-1
4745: PPUSH
4746: CALL_OW 586
// DialogueOff ;
4750: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4754: LD_STRING M3a
4756: PPUSH
4757: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4761: LD_INT 11
4763: PPUSH
4764: LD_INT 1
4766: PPUSH
4767: CALL_OW 424
// Wait ( 0 0$02 ) ;
4771: LD_INT 70
4773: PPUSH
4774: CALL_OW 67
// DialogueOn ;
4778: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4782: LD_EXP 19
4786: PPUSH
4787: LD_STRING D4-Pow-1
4789: PPUSH
4790: CALL_OW 586
// DialogueOff ;
4794: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4798: LD_STRING M3b
4800: PPUSH
4801: CALL_OW 337
// case Query ( Q1 ) of 1 :
4805: LD_STRING Q1
4807: PPUSH
4808: CALL_OW 97
4812: PUSH
4813: LD_INT 1
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4821
4819: GO 4852
4821: POP
// begin macmilan_use_radio := true ;
4822: LD_ADDR_EXP 6
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// DialogueOn ;
4830: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4834: LD_EXP 16
4838: PPUSH
4839: LD_STRING D4a-JMM-1
4841: PPUSH
4842: CALL_OW 88
// DialogueOff ;
4846: CALL_OW 7
// end ; 2 :
4850: GO 4864
4852: LD_INT 2
4854: DOUBLE
4855: EQUAL
4856: IFTRUE 4860
4858: GO 4863
4860: POP
// ; end ;
4861: GO 4864
4863: POP
// end ;
4864: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4865: LD_EXP 16
4869: PPUSH
4870: LD_EXP 18
4874: PPUSH
4875: CALL_OW 296
4879: PUSH
4880: LD_INT 8
4882: LESS
4883: PUSH
4884: LD_EXP 18
4888: PPUSH
4889: CALL_OW 302
4893: AND
4894: IFFALSE 5185
4896: GO 4898
4898: DISABLE
// begin InGameOn ;
4899: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4903: LD_EXP 16
4907: PPUSH
4908: LD_EXP 18
4912: PPUSH
4913: CALL_OW 250
4917: PPUSH
4918: LD_EXP 18
4922: PPUSH
4923: CALL_OW 251
4927: PPUSH
4928: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4932: LD_EXP 17
4936: PPUSH
4937: CALL_OW 302
4941: PUSH
4942: LD_EXP 4
4946: AND
4947: IFFALSE 4978
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4949: LD_EXP 17
4953: PPUSH
4954: LD_EXP 16
4958: PPUSH
4959: CALL_OW 250
4963: PPUSH
4964: LD_EXP 16
4968: PPUSH
4969: CALL_OW 251
4973: PPUSH
4974: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4978: LD_EXP 16
4982: PPUSH
4983: LD_STRING D5-JMM-1
4985: PPUSH
4986: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4990: LD_INT 10
4992: PPUSH
4993: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4997: LD_EXP 16
5001: PPUSH
5002: LD_EXP 18
5006: PPUSH
5007: CALL_OW 119
// ComWalk ( Cyrus ) ;
5011: LD_EXP 18
5015: PPUSH
5016: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5020: LD_EXP 18
5024: PPUSH
5025: LD_EXP 16
5029: PPUSH
5030: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5034: LD_EXP 18
5038: PPUSH
5039: LD_STRING D5-Cyrus-1
5041: PPUSH
5042: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5046: LD_EXP 17
5050: PPUSH
5051: CALL_OW 302
5055: PUSH
5056: LD_EXP 4
5060: AND
5061: IFFALSE 5101
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5063: LD_EXP 17
5067: PPUSH
5068: LD_EXP 18
5072: PPUSH
5073: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5077: LD_EXP 17
5081: PPUSH
5082: LD_STRING D5-Bobby-1
5084: PPUSH
5085: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5089: LD_EXP 16
5093: PPUSH
5094: LD_STRING D5-JMM-2
5096: PPUSH
5097: CALL_OW 88
// end ; InGameOff ;
5101: CALL_OW 9
// cyrus_in_squad := true ;
5105: LD_ADDR_EXP 7
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5113: LD_EXP 18
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5125: LD_EXP 5
5129: PUSH
5130: LD_EXP 4
5134: NOT
5135: AND
5136: IFFALSE 5145
// ChangeMissionObjectives ( M2b ) ;
5138: LD_STRING M2b
5140: PPUSH
5141: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5145: LD_EXP 4
5149: NOT
5150: PUSH
5151: LD_EXP 17
5155: PPUSH
5156: CALL_OW 255
5160: PUSH
5161: LD_INT 4
5163: EQUAL
5164: AND
5165: PUSH
5166: LD_EXP 17
5170: PPUSH
5171: CALL_OW 302
5175: AND
5176: IFFALSE 5185
// SetAchievement ( ACH_CYRUS ) ;
5178: LD_STRING ACH_CYRUS
5180: PPUSH
5181: CALL_OW 543
// end ;
5185: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5186: LD_EXP 4
5190: PUSH
5191: LD_EXP 7
5195: AND
5196: IFFALSE 5208
5198: GO 5200
5200: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5201: LD_STRING M2c
5203: PPUSH
5204: CALL_OW 337
5208: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5209: LD_EXP 16
5213: PPUSH
5214: LD_INT 8
5216: PPUSH
5217: CALL_OW 308
5221: IFFALSE 5273
5223: GO 5225
5225: DISABLE
// begin macmilan_in_trap := true ;
5226: LD_ADDR_EXP 9
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5234: LD_INT 35
5236: PPUSH
5237: CALL_OW 67
// DialogueOn ;
5241: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5245: LD_EXP 26
5249: PPUSH
5250: LD_STRING D5-Pok-1
5252: PPUSH
5253: CALL_OW 88
// DialogueOff ;
5257: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5261: LD_EXP 16
5265: PPUSH
5266: LD_STRING D4b-JMM-1
5268: PPUSH
5269: CALL_OW 88
// end ;
5273: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_EXP 24
5283: PUSH
5284: LD_EXP 24
5288: ARRAY
5289: PPUSH
5290: CALL_OW 296
5294: PUSH
5295: LD_INT 12
5297: LESS
5298: PUSH
5299: LD_EXP 24
5303: PPUSH
5304: LD_INT 3
5306: PUSH
5307: LD_INT 24
5309: PUSH
5310: LD_INT 990
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 72
5325: OR
5326: IFFALSE 5556
5328: GO 5330
5330: DISABLE
5331: LD_INT 0
5333: PPUSH
5334: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5335: LD_ADDR_VAR 0 2
5339: PUSH
5340: LD_INT 300
5342: PUSH
5343: LD_INT 250
5345: PUSH
5346: LD_INT 200
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: PUSH
5354: LD_OWVAR 67
5358: ARRAY
5359: ST_TO_ADDR
// for i in russian_meta_guards do
5360: LD_ADDR_VAR 0 1
5364: PUSH
5365: LD_EXP 24
5369: PUSH
5370: FOR_IN
5371: IFFALSE 5411
// if IsOk ( i ) then
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 302
5382: IFFALSE 5409
// SetLives ( i , GetLives ( i ) - hp ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 256
5398: PUSH
5399: LD_VAR 0 2
5403: MINUS
5404: PPUSH
5405: CALL_OW 234
5409: GO 5370
5411: POP
5412: POP
// DialogueOn ;
5413: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5417: LD_EXP 24
5421: PUSH
5422: LD_EXP 24
5426: ARRAY
5427: PPUSH
5428: LD_STRING D6-FRus1-1
5430: PPUSH
5431: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5435: LD_EXP 16
5439: PPUSH
5440: LD_STRING D6-JMM-1
5442: PPUSH
5443: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5447: LD_EXP 18
5451: PPUSH
5452: CALL_OW 302
5456: PUSH
5457: LD_EXP 7
5461: AND
5462: IFFALSE 5476
// Say ( Cyrus , D6-Cyrus-1 ) ;
5464: LD_EXP 18
5468: PPUSH
5469: LD_STRING D6-Cyrus-1
5471: PPUSH
5472: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5476: LD_EXP 17
5480: PPUSH
5481: CALL_OW 302
5485: PUSH
5486: LD_EXP 4
5490: AND
5491: IFFALSE 5505
// Say ( Bobby , D6-Bobby-1 ) ;
5493: LD_EXP 17
5497: PPUSH
5498: LD_STRING D6-Bobby-1
5500: PPUSH
5501: CALL_OW 88
// DialogueOff ;
5505: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5509: LD_INT 140
5511: PUSH
5512: LD_INT 105
5514: PUSH
5515: LD_INT 70
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: PUSH
5523: LD_OWVAR 67
5527: ARRAY
5528: PPUSH
5529: CALL_OW 67
// meta_action := true ;
5533: LD_ADDR_EXP 10
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5541: LD_EXP 24
5545: PPUSH
5546: LD_INT 94
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: CALL_OW 114
// end ;
5556: PPOPN 2
5558: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5559: LD_EXP 16
5563: PPUSH
5564: LD_INT 93
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 297
5574: PUSH
5575: LD_INT 5
5577: LESS
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 69
5593: PUSH
5594: LD_INT 1
5596: GREATER
5597: AND
5598: IFFALSE 5615
5600: GO 5602
5602: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5603: LD_EXP 16
5607: PPUSH
5608: LD_STRING D6a-JMM-1
5610: PPUSH
5611: CALL_OW 88
5615: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_EXP 16
5625: EQUAL
5626: IFFALSE 5635
// YouLost ( JMM ) ;
5628: LD_STRING JMM
5630: PPUSH
5631: CALL_OW 104
// end ;
5635: PPOPN 1
5637: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5638: LD_VAR 0 1
5642: PUSH
5643: LD_EXP 16
5647: EQUAL
5648: IFFALSE 5657
// YouLost ( JMM ) ;
5650: LD_STRING JMM
5652: PPUSH
5653: CALL_OW 104
// end ;
5657: PPOPN 1
5659: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5660: LD_EXP 17
5664: PPUSH
5665: LD_INT 10
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5721
5674: GO 5676
5676: DISABLE
// begin bobby_saved := true ;
5677: LD_ADDR_EXP 12
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5685: LD_EXP 17
5689: PPUSH
5690: CALL_OW 256
5694: PPUSH
5695: LD_STRING 01_BobbyLifePoints_1
5697: PPUSH
5698: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5702: LD_EXP 17
5706: PPUSH
5707: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5711: LD_STRING Bobby
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: CALL_OW 101
// end ;
5721: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5722: LD_EXP 18
5726: PPUSH
5727: LD_INT 10
5729: PPUSH
5730: CALL_OW 308
5734: IFFALSE 5783
5736: GO 5738
5738: DISABLE
// begin cyrus_saved := true ;
5739: LD_ADDR_EXP 13
5743: PUSH
5744: LD_INT 1
5746: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5747: LD_EXP 18
5751: PPUSH
5752: CALL_OW 256
5756: PPUSH
5757: LD_STRING 01_CyrusLifePoints_1
5759: PPUSH
5760: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5764: LD_EXP 18
5768: PPUSH
5769: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5773: LD_STRING Cyrus
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL_OW 101
// end ;
5783: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5784: LD_EXP 16
5788: PPUSH
5789: LD_INT 10
5791: PPUSH
5792: CALL_OW 308
5796: IFFALSE 6404
5798: GO 5800
5800: DISABLE
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
// begin if macmilan_use_radio then
5809: LD_EXP 6
5813: IFFALSE 5822
// SetAchievement ( ACH_RADIO ) ;
5815: LD_STRING ACH_RADIO
5817: PPUSH
5818: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5822: LD_EXP 13
5826: NOT
5827: PUSH
5828: LD_EXP 7
5832: AND
5833: PUSH
5834: LD_EXP 18
5838: PPUSH
5839: CALL_OW 302
5843: AND
5844: PUSH
5845: LD_EXP 12
5849: NOT
5850: PUSH
5851: LD_EXP 4
5855: AND
5856: PUSH
5857: LD_EXP 17
5861: PPUSH
5862: CALL_OW 302
5866: AND
5867: OR
5868: IFFALSE 5909
// case Query ( Q2 ) of 1 :
5870: LD_STRING Q2
5872: PPUSH
5873: CALL_OW 97
5877: PUSH
5878: LD_INT 1
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5897
5886: POP
// wait_for_them := true ; 2 :
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: LD_INT 1
5894: ST_TO_ADDR
5895: GO 5909
5897: LD_INT 2
5899: DOUBLE
5900: EQUAL
5901: IFTRUE 5905
5903: GO 5908
5905: POP
// ; end ;
5906: GO 5909
5908: POP
// if wait_for_them then
5909: LD_VAR 0 3
5913: IFFALSE 6026
// repeat wait ( 0 0$01 ) ;
5915: LD_INT 35
5917: PPUSH
5918: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5922: LD_EXP 13
5926: PUSH
5927: LD_EXP 12
5931: AND
5932: PUSH
5933: LD_EXP 13
5937: PUSH
5938: LD_EXP 4
5942: NOT
5943: PUSH
5944: LD_EXP 17
5948: PPUSH
5949: CALL_OW 303
5953: OR
5954: PUSH
5955: LD_EXP 17
5959: PPUSH
5960: CALL_OW 301
5964: OR
5965: AND
5966: OR
5967: PUSH
5968: LD_EXP 12
5972: PUSH
5973: LD_EXP 7
5977: NOT
5978: PUSH
5979: LD_EXP 18
5983: PPUSH
5984: CALL_OW 303
5988: OR
5989: PUSH
5990: LD_EXP 18
5994: PPUSH
5995: CALL_OW 301
5999: OR
6000: AND
6001: OR
6002: PUSH
6003: LD_EXP 17
6007: PPUSH
6008: CALL_OW 301
6012: PUSH
6013: LD_EXP 18
6017: PPUSH
6018: CALL_OW 301
6022: AND
6023: OR
6024: IFFALSE 5915
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6026: LD_EXP 16
6030: PPUSH
6031: CALL_OW 256
6035: PPUSH
6036: LD_STRING 01_JMMLifePoints_1
6038: PPUSH
6039: CALL_OW 39
// RemoveUnit ( JMM ) ;
6043: LD_EXP 16
6047: PPUSH
6048: CALL_OW 64
// to_reward := [ JMM ] ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_EXP 16
6061: PUSH
6062: EMPTY
6063: LIST
6064: ST_TO_ADDR
// if bobby_saved then
6065: LD_EXP 12
6069: IFFALSE 6087
// to_reward := to_reward ^ Bobby ;
6071: LD_ADDR_VAR 0 2
6075: PUSH
6076: LD_VAR 0 2
6080: PUSH
6081: LD_EXP 17
6085: ADD
6086: ST_TO_ADDR
// if cyrus_saved then
6087: LD_EXP 13
6091: IFFALSE 6109
// to_reward := to_reward ^ Cyrus ;
6093: LD_ADDR_VAR 0 2
6097: PUSH
6098: LD_VAR 0 2
6102: PUSH
6103: LD_EXP 18
6107: ADD
6108: ST_TO_ADDR
// m1 := true ;
6109: LD_ADDR_VAR 0 4
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// m2 := bobby_saved ;
6117: LD_ADDR_VAR 0 5
6121: PUSH
6122: LD_EXP 12
6126: ST_TO_ADDR
// m3 := cyrus_saved ;
6127: LD_ADDR_VAR 0 6
6131: PUSH
6132: LD_EXP 13
6136: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6137: LD_STRING JMM
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 101
// if not bobby_in_squad then
6147: LD_EXP 4
6151: NOT
6152: IFFALSE 6165
// AddMedal ( Bobby , - 1 ) ;
6154: LD_STRING Bobby
6156: PPUSH
6157: LD_INT 1
6159: NEG
6160: PPUSH
6161: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6165: LD_EXP 12
6169: NOT
6170: PUSH
6171: LD_EXP 17
6175: PPUSH
6176: CALL_OW 303
6180: PUSH
6181: LD_EXP 17
6185: PPUSH
6186: CALL_OW 301
6190: OR
6191: AND
6192: IFFALSE 6205
// AddMedal ( Bobby , - 2 ) ;
6194: LD_STRING Bobby
6196: PPUSH
6197: LD_INT 2
6199: NEG
6200: PPUSH
6201: CALL_OW 101
// if not cyrus_in_squad then
6205: LD_EXP 7
6209: NOT
6210: IFFALSE 6223
// AddMedal ( Cyrus , - 1 ) ;
6212: LD_STRING Cyrus
6214: PPUSH
6215: LD_INT 1
6217: NEG
6218: PPUSH
6219: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6223: LD_EXP 13
6227: NOT
6228: PUSH
6229: LD_EXP 18
6233: PPUSH
6234: CALL_OW 303
6238: PUSH
6239: LD_EXP 18
6243: PPUSH
6244: CALL_OW 301
6248: OR
6249: AND
6250: IFFALSE 6263
// AddMedal ( Cyrus , - 2 ) ;
6252: LD_STRING Cyrus
6254: PPUSH
6255: LD_INT 2
6257: NEG
6258: PPUSH
6259: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6263: LD_OWVAR 67
6267: PUSH
6268: LD_INT 3
6270: EQUAL
6271: PUSH
6272: LD_VAR 0 4
6276: AND
6277: PUSH
6278: LD_VAR 0 5
6282: AND
6283: PUSH
6284: LD_VAR 0 6
6288: AND
6289: IFFALSE 6301
// SetAchievementEX ( ACH_AMER , 1 ) ;
6291: LD_STRING ACH_AMER
6293: PPUSH
6294: LD_INT 1
6296: PPUSH
6297: CALL_OW 564
// GiveMedals ( MAIN ) ;
6301: LD_STRING MAIN
6303: PPUSH
6304: CALL_OW 102
// RewardPeople ( to_reward ) ;
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 43
// if bobby_saved then
6317: LD_EXP 12
6321: IFFALSE 6341
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6323: LD_EXP 17
6327: PPUSH
6328: LD_EXP 2
6332: PUSH
6333: LD_STRING Bobby
6335: STR
6336: PPUSH
6337: CALL_OW 38
// if cyrus_saved then
6341: LD_EXP 13
6345: IFFALSE 6365
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6347: LD_EXP 18
6351: PPUSH
6352: LD_EXP 2
6356: PUSH
6357: LD_STRING Cyrus
6359: STR
6360: PPUSH
6361: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6365: LD_EXP 16
6369: PPUSH
6370: LD_EXP 2
6374: PUSH
6375: LD_STRING JMM
6377: STR
6378: PPUSH
6379: CALL_OW 38
// if tick <= 3 3$00 then
6383: LD_OWVAR 1
6387: PUSH
6388: LD_INT 6300
6390: LESSEQUAL
6391: IFFALSE 6400
// SetAchievement ( ACH_ASPEED_1 ) ;
6393: LD_STRING ACH_ASPEED_1
6395: PPUSH
6396: CALL_OW 543
// YouWin ;
6400: CALL_OW 103
// end ; end_of_file end_of_file
6404: PPOPN 6
6406: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
6407: LD_VAR 0 1
6411: PPUSH
6412: LD_VAR 0 2
6416: PPUSH
6417: LD_VAR 0 3
6421: PPUSH
6422: LD_VAR 0 4
6426: PPUSH
6427: LD_VAR 0 5
6431: PPUSH
6432: CALL 19211 0 5
// end ;
6436: PPOPN 5
6438: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6439: LD_VAR 0 2
6443: PUSH
6444: LD_INT 100
6446: EQUAL
6447: IFFALSE 7396
// begin if not StreamModeActive then
6449: LD_EXP 27
6453: NOT
6454: IFFALSE 6464
// StreamModeActive := true ;
6456: LD_ADDR_EXP 27
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// if p3 = 0 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 0
6471: EQUAL
6472: IFFALSE 6478
// InitStreamMode ;
6474: CALL 7629 0 0
// if p3 = 1 then
6478: LD_VAR 0 3
6482: PUSH
6483: LD_INT 1
6485: EQUAL
6486: IFFALSE 6496
// sRocket := true ;
6488: LD_ADDR_EXP 32
6492: PUSH
6493: LD_INT 1
6495: ST_TO_ADDR
// if p3 = 2 then
6496: LD_VAR 0 3
6500: PUSH
6501: LD_INT 2
6503: EQUAL
6504: IFFALSE 6514
// sSpeed := true ;
6506: LD_ADDR_EXP 31
6510: PUSH
6511: LD_INT 1
6513: ST_TO_ADDR
// if p3 = 3 then
6514: LD_VAR 0 3
6518: PUSH
6519: LD_INT 3
6521: EQUAL
6522: IFFALSE 6532
// sEngine := true ;
6524: LD_ADDR_EXP 33
6528: PUSH
6529: LD_INT 1
6531: ST_TO_ADDR
// if p3 = 4 then
6532: LD_VAR 0 3
6536: PUSH
6537: LD_INT 4
6539: EQUAL
6540: IFFALSE 6550
// sSpec := true ;
6542: LD_ADDR_EXP 30
6546: PUSH
6547: LD_INT 1
6549: ST_TO_ADDR
// if p3 = 5 then
6550: LD_VAR 0 3
6554: PUSH
6555: LD_INT 5
6557: EQUAL
6558: IFFALSE 6568
// sLevel := true ;
6560: LD_ADDR_EXP 34
6564: PUSH
6565: LD_INT 1
6567: ST_TO_ADDR
// if p3 = 6 then
6568: LD_VAR 0 3
6572: PUSH
6573: LD_INT 6
6575: EQUAL
6576: IFFALSE 6586
// sArmoury := true ;
6578: LD_ADDR_EXP 35
6582: PUSH
6583: LD_INT 1
6585: ST_TO_ADDR
// if p3 = 7 then
6586: LD_VAR 0 3
6590: PUSH
6591: LD_INT 7
6593: EQUAL
6594: IFFALSE 6604
// sRadar := true ;
6596: LD_ADDR_EXP 36
6600: PUSH
6601: LD_INT 1
6603: ST_TO_ADDR
// if p3 = 8 then
6604: LD_VAR 0 3
6608: PUSH
6609: LD_INT 8
6611: EQUAL
6612: IFFALSE 6622
// sBunker := true ;
6614: LD_ADDR_EXP 37
6618: PUSH
6619: LD_INT 1
6621: ST_TO_ADDR
// if p3 = 9 then
6622: LD_VAR 0 3
6626: PUSH
6627: LD_INT 9
6629: EQUAL
6630: IFFALSE 6640
// sHack := true ;
6632: LD_ADDR_EXP 38
6636: PUSH
6637: LD_INT 1
6639: ST_TO_ADDR
// if p3 = 10 then
6640: LD_VAR 0 3
6644: PUSH
6645: LD_INT 10
6647: EQUAL
6648: IFFALSE 6658
// sFire := true ;
6650: LD_ADDR_EXP 39
6654: PUSH
6655: LD_INT 1
6657: ST_TO_ADDR
// if p3 = 11 then
6658: LD_VAR 0 3
6662: PUSH
6663: LD_INT 11
6665: EQUAL
6666: IFFALSE 6676
// sRefresh := true ;
6668: LD_ADDR_EXP 40
6672: PUSH
6673: LD_INT 1
6675: ST_TO_ADDR
// if p3 = 12 then
6676: LD_VAR 0 3
6680: PUSH
6681: LD_INT 12
6683: EQUAL
6684: IFFALSE 6694
// sExp := true ;
6686: LD_ADDR_EXP 41
6690: PUSH
6691: LD_INT 1
6693: ST_TO_ADDR
// if p3 = 13 then
6694: LD_VAR 0 3
6698: PUSH
6699: LD_INT 13
6701: EQUAL
6702: IFFALSE 6712
// sDepot := true ;
6704: LD_ADDR_EXP 42
6708: PUSH
6709: LD_INT 1
6711: ST_TO_ADDR
// if p3 = 14 then
6712: LD_VAR 0 3
6716: PUSH
6717: LD_INT 14
6719: EQUAL
6720: IFFALSE 6730
// sFlag := true ;
6722: LD_ADDR_EXP 43
6726: PUSH
6727: LD_INT 1
6729: ST_TO_ADDR
// if p3 = 15 then
6730: LD_VAR 0 3
6734: PUSH
6735: LD_INT 15
6737: EQUAL
6738: IFFALSE 6748
// sKamikadze := true ;
6740: LD_ADDR_EXP 51
6744: PUSH
6745: LD_INT 1
6747: ST_TO_ADDR
// if p3 = 16 then
6748: LD_VAR 0 3
6752: PUSH
6753: LD_INT 16
6755: EQUAL
6756: IFFALSE 6766
// sTroll := true ;
6758: LD_ADDR_EXP 52
6762: PUSH
6763: LD_INT 1
6765: ST_TO_ADDR
// if p3 = 17 then
6766: LD_VAR 0 3
6770: PUSH
6771: LD_INT 17
6773: EQUAL
6774: IFFALSE 6784
// sSlow := true ;
6776: LD_ADDR_EXP 53
6780: PUSH
6781: LD_INT 1
6783: ST_TO_ADDR
// if p3 = 18 then
6784: LD_VAR 0 3
6788: PUSH
6789: LD_INT 18
6791: EQUAL
6792: IFFALSE 6802
// sLack := true ;
6794: LD_ADDR_EXP 54
6798: PUSH
6799: LD_INT 1
6801: ST_TO_ADDR
// if p3 = 19 then
6802: LD_VAR 0 3
6806: PUSH
6807: LD_INT 19
6809: EQUAL
6810: IFFALSE 6820
// sTank := true ;
6812: LD_ADDR_EXP 56
6816: PUSH
6817: LD_INT 1
6819: ST_TO_ADDR
// if p3 = 20 then
6820: LD_VAR 0 3
6824: PUSH
6825: LD_INT 20
6827: EQUAL
6828: IFFALSE 6838
// sRemote := true ;
6830: LD_ADDR_EXP 57
6834: PUSH
6835: LD_INT 1
6837: ST_TO_ADDR
// if p3 = 21 then
6838: LD_VAR 0 3
6842: PUSH
6843: LD_INT 21
6845: EQUAL
6846: IFFALSE 6856
// sPowell := true ;
6848: LD_ADDR_EXP 58
6852: PUSH
6853: LD_INT 1
6855: ST_TO_ADDR
// if p3 = 22 then
6856: LD_VAR 0 3
6860: PUSH
6861: LD_INT 22
6863: EQUAL
6864: IFFALSE 6874
// sTeleport := true ;
6866: LD_ADDR_EXP 61
6870: PUSH
6871: LD_INT 1
6873: ST_TO_ADDR
// if p3 = 23 then
6874: LD_VAR 0 3
6878: PUSH
6879: LD_INT 23
6881: EQUAL
6882: IFFALSE 6892
// sOilTower := true ;
6884: LD_ADDR_EXP 63
6888: PUSH
6889: LD_INT 1
6891: ST_TO_ADDR
// if p3 = 24 then
6892: LD_VAR 0 3
6896: PUSH
6897: LD_INT 24
6899: EQUAL
6900: IFFALSE 6910
// sShovel := true ;
6902: LD_ADDR_EXP 64
6906: PUSH
6907: LD_INT 1
6909: ST_TO_ADDR
// if p3 = 25 then
6910: LD_VAR 0 3
6914: PUSH
6915: LD_INT 25
6917: EQUAL
6918: IFFALSE 6928
// sSheik := true ;
6920: LD_ADDR_EXP 65
6924: PUSH
6925: LD_INT 1
6927: ST_TO_ADDR
// if p3 = 26 then
6928: LD_VAR 0 3
6932: PUSH
6933: LD_INT 26
6935: EQUAL
6936: IFFALSE 6946
// sEarthquake := true ;
6938: LD_ADDR_EXP 67
6942: PUSH
6943: LD_INT 1
6945: ST_TO_ADDR
// if p3 = 27 then
6946: LD_VAR 0 3
6950: PUSH
6951: LD_INT 27
6953: EQUAL
6954: IFFALSE 6964
// sAI := true ;
6956: LD_ADDR_EXP 68
6960: PUSH
6961: LD_INT 1
6963: ST_TO_ADDR
// if p3 = 28 then
6964: LD_VAR 0 3
6968: PUSH
6969: LD_INT 28
6971: EQUAL
6972: IFFALSE 6982
// sCargo := true ;
6974: LD_ADDR_EXP 71
6978: PUSH
6979: LD_INT 1
6981: ST_TO_ADDR
// if p3 = 29 then
6982: LD_VAR 0 3
6986: PUSH
6987: LD_INT 29
6989: EQUAL
6990: IFFALSE 7000
// sDLaser := true ;
6992: LD_ADDR_EXP 72
6996: PUSH
6997: LD_INT 1
6999: ST_TO_ADDR
// if p3 = 30 then
7000: LD_VAR 0 3
7004: PUSH
7005: LD_INT 30
7007: EQUAL
7008: IFFALSE 7018
// sExchange := true ;
7010: LD_ADDR_EXP 73
7014: PUSH
7015: LD_INT 1
7017: ST_TO_ADDR
// if p3 = 31 then
7018: LD_VAR 0 3
7022: PUSH
7023: LD_INT 31
7025: EQUAL
7026: IFFALSE 7036
// sFac := true ;
7028: LD_ADDR_EXP 74
7032: PUSH
7033: LD_INT 1
7035: ST_TO_ADDR
// if p3 = 32 then
7036: LD_VAR 0 3
7040: PUSH
7041: LD_INT 32
7043: EQUAL
7044: IFFALSE 7054
// sPower := true ;
7046: LD_ADDR_EXP 75
7050: PUSH
7051: LD_INT 1
7053: ST_TO_ADDR
// if p3 = 33 then
7054: LD_VAR 0 3
7058: PUSH
7059: LD_INT 33
7061: EQUAL
7062: IFFALSE 7072
// sRandom := true ;
7064: LD_ADDR_EXP 76
7068: PUSH
7069: LD_INT 1
7071: ST_TO_ADDR
// if p3 = 34 then
7072: LD_VAR 0 3
7076: PUSH
7077: LD_INT 34
7079: EQUAL
7080: IFFALSE 7090
// sShield := true ;
7082: LD_ADDR_EXP 77
7086: PUSH
7087: LD_INT 1
7089: ST_TO_ADDR
// if p3 = 35 then
7090: LD_VAR 0 3
7094: PUSH
7095: LD_INT 35
7097: EQUAL
7098: IFFALSE 7108
// sTime := true ;
7100: LD_ADDR_EXP 78
7104: PUSH
7105: LD_INT 1
7107: ST_TO_ADDR
// if p3 = 36 then
7108: LD_VAR 0 3
7112: PUSH
7113: LD_INT 36
7115: EQUAL
7116: IFFALSE 7126
// sTools := true ;
7118: LD_ADDR_EXP 79
7122: PUSH
7123: LD_INT 1
7125: ST_TO_ADDR
// if p3 = 101 then
7126: LD_VAR 0 3
7130: PUSH
7131: LD_INT 101
7133: EQUAL
7134: IFFALSE 7144
// sSold := true ;
7136: LD_ADDR_EXP 44
7140: PUSH
7141: LD_INT 1
7143: ST_TO_ADDR
// if p3 = 102 then
7144: LD_VAR 0 3
7148: PUSH
7149: LD_INT 102
7151: EQUAL
7152: IFFALSE 7162
// sDiff := true ;
7154: LD_ADDR_EXP 45
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// if p3 = 103 then
7162: LD_VAR 0 3
7166: PUSH
7167: LD_INT 103
7169: EQUAL
7170: IFFALSE 7180
// sFog := true ;
7172: LD_ADDR_EXP 48
7176: PUSH
7177: LD_INT 1
7179: ST_TO_ADDR
// if p3 = 104 then
7180: LD_VAR 0 3
7184: PUSH
7185: LD_INT 104
7187: EQUAL
7188: IFFALSE 7198
// sReset := true ;
7190: LD_ADDR_EXP 49
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// if p3 = 105 then
7198: LD_VAR 0 3
7202: PUSH
7203: LD_INT 105
7205: EQUAL
7206: IFFALSE 7216
// sSun := true ;
7208: LD_ADDR_EXP 50
7212: PUSH
7213: LD_INT 1
7215: ST_TO_ADDR
// if p3 = 106 then
7216: LD_VAR 0 3
7220: PUSH
7221: LD_INT 106
7223: EQUAL
7224: IFFALSE 7234
// sTiger := true ;
7226: LD_ADDR_EXP 46
7230: PUSH
7231: LD_INT 1
7233: ST_TO_ADDR
// if p3 = 107 then
7234: LD_VAR 0 3
7238: PUSH
7239: LD_INT 107
7241: EQUAL
7242: IFFALSE 7252
// sBomb := true ;
7244: LD_ADDR_EXP 47
7248: PUSH
7249: LD_INT 1
7251: ST_TO_ADDR
// if p3 = 108 then
7252: LD_VAR 0 3
7256: PUSH
7257: LD_INT 108
7259: EQUAL
7260: IFFALSE 7270
// sWound := true ;
7262: LD_ADDR_EXP 55
7266: PUSH
7267: LD_INT 1
7269: ST_TO_ADDR
// if p3 = 109 then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 109
7277: EQUAL
7278: IFFALSE 7288
// sBetray := true ;
7280: LD_ADDR_EXP 59
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// if p3 = 110 then
7288: LD_VAR 0 3
7292: PUSH
7293: LD_INT 110
7295: EQUAL
7296: IFFALSE 7306
// sContamin := true ;
7298: LD_ADDR_EXP 60
7302: PUSH
7303: LD_INT 1
7305: ST_TO_ADDR
// if p3 = 111 then
7306: LD_VAR 0 3
7310: PUSH
7311: LD_INT 111
7313: EQUAL
7314: IFFALSE 7324
// sOil := true ;
7316: LD_ADDR_EXP 62
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// if p3 = 112 then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 112
7331: EQUAL
7332: IFFALSE 7342
// sStu := true ;
7334: LD_ADDR_EXP 66
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// if p3 = 113 then
7342: LD_VAR 0 3
7346: PUSH
7347: LD_INT 113
7349: EQUAL
7350: IFFALSE 7360
// sBazooka := true ;
7352: LD_ADDR_EXP 69
7356: PUSH
7357: LD_INT 1
7359: ST_TO_ADDR
// if p3 = 114 then
7360: LD_VAR 0 3
7364: PUSH
7365: LD_INT 114
7367: EQUAL
7368: IFFALSE 7378
// sMortar := true ;
7370: LD_ADDR_EXP 70
7374: PUSH
7375: LD_INT 1
7377: ST_TO_ADDR
// if p3 = 115 then
7378: LD_VAR 0 3
7382: PUSH
7383: LD_INT 115
7385: EQUAL
7386: IFFALSE 7396
// sRanger := true ;
7388: LD_ADDR_EXP 80
7392: PUSH
7393: LD_INT 1
7395: ST_TO_ADDR
// end ; if p2 = 101 then
7396: LD_VAR 0 2
7400: PUSH
7401: LD_INT 101
7403: EQUAL
7404: IFFALSE 7607
// begin case p3 of 1 :
7406: LD_VAR 0 3
7410: PUSH
7411: LD_INT 1
7413: DOUBLE
7414: EQUAL
7415: IFTRUE 7419
7417: GO 7426
7419: POP
// hHackUnlimitedResources ; 2 :
7420: CALL 17701 0 0
7424: GO 7607
7426: LD_INT 2
7428: DOUBLE
7429: EQUAL
7430: IFTRUE 7434
7432: GO 7441
7434: POP
// hHackSetLevel10 ; 3 :
7435: CALL 17834 0 0
7439: GO 7607
7441: LD_INT 3
7443: DOUBLE
7444: EQUAL
7445: IFTRUE 7449
7447: GO 7456
7449: POP
// hHackSetLevel10YourUnits ; 4 :
7450: CALL 17919 0 0
7454: GO 7607
7456: LD_INT 4
7458: DOUBLE
7459: EQUAL
7460: IFTRUE 7464
7462: GO 7486
7464: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
7465: LD_VAR 0 4
7469: PPUSH
7470: LD_VAR 0 5
7474: PPUSH
7475: LD_VAR 0 6
7479: PPUSH
7480: CALL 18009 0 3
7484: GO 7607
7486: LD_INT 5
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7501
7494: POP
// hHackSpawnVehicle ; 6 :
7495: CALL 18070 0 0
7499: GO 7607
7501: LD_INT 6
7503: DOUBLE
7504: EQUAL
7505: IFTRUE 7509
7507: GO 7516
7509: POP
// hHackInvincible ; 7 :
7510: CALL 18616 0 0
7514: GO 7607
7516: LD_INT 7
7518: DOUBLE
7519: EQUAL
7520: IFTRUE 7524
7522: GO 7531
7524: POP
// hHackInvisible ; 8 :
7525: CALL 18727 0 0
7529: GO 7607
7531: LD_INT 8
7533: DOUBLE
7534: EQUAL
7535: IFTRUE 7539
7537: GO 7546
7539: POP
// hHackChangeYourSide ; 9 :
7540: CALL 18784 0 0
7544: GO 7607
7546: LD_INT 9
7548: DOUBLE
7549: EQUAL
7550: IFTRUE 7554
7552: GO 7561
7554: POP
// hHackChangeUnitSide ; 10 :
7555: CALL 18826 0 0
7559: GO 7607
7561: LD_INT 10
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7576
7569: POP
// hHackFog ; 11 :
7570: CALL 18927 0 0
7574: GO 7607
7576: LD_INT 11
7578: DOUBLE
7579: EQUAL
7580: IFTRUE 7584
7582: GO 7591
7584: POP
// hHackApeman ; 12 :
7585: CALL 18942 0 0
7589: GO 7607
7591: LD_INT 12
7593: DOUBLE
7594: EQUAL
7595: IFTRUE 7599
7597: GO 7606
7599: POP
// hHackBoom ; end ;
7600: CALL 19027 0 0
7604: GO 7607
7606: POP
// end ; end ;
7607: PPOPN 6
7609: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7610: GO 7612
7612: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7613: LD_STRING initStreamRollete();
7615: PPUSH
7616: CALL_OW 559
// InitStreamMode ;
7620: CALL 7629 0 0
// DefineStreamItems ( ) ;
7624: CALL 8069 0 0
// end ;
7628: END
// function InitStreamMode ; begin
7629: LD_INT 0
7631: PPUSH
// streamModeActive := false ;
7632: LD_ADDR_EXP 27
7636: PUSH
7637: LD_INT 0
7639: ST_TO_ADDR
// normalCounter := 36 ;
7640: LD_ADDR_EXP 28
7644: PUSH
7645: LD_INT 36
7647: ST_TO_ADDR
// hardcoreCounter := 16 ;
7648: LD_ADDR_EXP 29
7652: PUSH
7653: LD_INT 16
7655: ST_TO_ADDR
// sRocket := false ;
7656: LD_ADDR_EXP 32
7660: PUSH
7661: LD_INT 0
7663: ST_TO_ADDR
// sSpeed := false ;
7664: LD_ADDR_EXP 31
7668: PUSH
7669: LD_INT 0
7671: ST_TO_ADDR
// sEngine := false ;
7672: LD_ADDR_EXP 33
7676: PUSH
7677: LD_INT 0
7679: ST_TO_ADDR
// sSpec := false ;
7680: LD_ADDR_EXP 30
7684: PUSH
7685: LD_INT 0
7687: ST_TO_ADDR
// sLevel := false ;
7688: LD_ADDR_EXP 34
7692: PUSH
7693: LD_INT 0
7695: ST_TO_ADDR
// sArmoury := false ;
7696: LD_ADDR_EXP 35
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// sRadar := false ;
7704: LD_ADDR_EXP 36
7708: PUSH
7709: LD_INT 0
7711: ST_TO_ADDR
// sBunker := false ;
7712: LD_ADDR_EXP 37
7716: PUSH
7717: LD_INT 0
7719: ST_TO_ADDR
// sHack := false ;
7720: LD_ADDR_EXP 38
7724: PUSH
7725: LD_INT 0
7727: ST_TO_ADDR
// sFire := false ;
7728: LD_ADDR_EXP 39
7732: PUSH
7733: LD_INT 0
7735: ST_TO_ADDR
// sRefresh := false ;
7736: LD_ADDR_EXP 40
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// sExp := false ;
7744: LD_ADDR_EXP 41
7748: PUSH
7749: LD_INT 0
7751: ST_TO_ADDR
// sDepot := false ;
7752: LD_ADDR_EXP 42
7756: PUSH
7757: LD_INT 0
7759: ST_TO_ADDR
// sFlag := false ;
7760: LD_ADDR_EXP 43
7764: PUSH
7765: LD_INT 0
7767: ST_TO_ADDR
// sKamikadze := false ;
7768: LD_ADDR_EXP 51
7772: PUSH
7773: LD_INT 0
7775: ST_TO_ADDR
// sTroll := false ;
7776: LD_ADDR_EXP 52
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// sSlow := false ;
7784: LD_ADDR_EXP 53
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// sLack := false ;
7792: LD_ADDR_EXP 54
7796: PUSH
7797: LD_INT 0
7799: ST_TO_ADDR
// sTank := false ;
7800: LD_ADDR_EXP 56
7804: PUSH
7805: LD_INT 0
7807: ST_TO_ADDR
// sRemote := false ;
7808: LD_ADDR_EXP 57
7812: PUSH
7813: LD_INT 0
7815: ST_TO_ADDR
// sPowell := false ;
7816: LD_ADDR_EXP 58
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// sTeleport := false ;
7824: LD_ADDR_EXP 61
7828: PUSH
7829: LD_INT 0
7831: ST_TO_ADDR
// sOilTower := false ;
7832: LD_ADDR_EXP 63
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// sShovel := false ;
7840: LD_ADDR_EXP 64
7844: PUSH
7845: LD_INT 0
7847: ST_TO_ADDR
// sSheik := false ;
7848: LD_ADDR_EXP 65
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// sEarthquake := false ;
7856: LD_ADDR_EXP 67
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// sAI := false ;
7864: LD_ADDR_EXP 68
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// sCargo := false ;
7872: LD_ADDR_EXP 71
7876: PUSH
7877: LD_INT 0
7879: ST_TO_ADDR
// sDLaser := false ;
7880: LD_ADDR_EXP 72
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// sExchange := false ;
7888: LD_ADDR_EXP 73
7892: PUSH
7893: LD_INT 0
7895: ST_TO_ADDR
// sFac := false ;
7896: LD_ADDR_EXP 74
7900: PUSH
7901: LD_INT 0
7903: ST_TO_ADDR
// sPower := false ;
7904: LD_ADDR_EXP 75
7908: PUSH
7909: LD_INT 0
7911: ST_TO_ADDR
// sRandom := false ;
7912: LD_ADDR_EXP 76
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// sShield := false ;
7920: LD_ADDR_EXP 77
7924: PUSH
7925: LD_INT 0
7927: ST_TO_ADDR
// sTime := false ;
7928: LD_ADDR_EXP 78
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// sTools := false ;
7936: LD_ADDR_EXP 79
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// sSold := false ;
7944: LD_ADDR_EXP 44
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// sDiff := false ;
7952: LD_ADDR_EXP 45
7956: PUSH
7957: LD_INT 0
7959: ST_TO_ADDR
// sFog := false ;
7960: LD_ADDR_EXP 48
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// sReset := false ;
7968: LD_ADDR_EXP 49
7972: PUSH
7973: LD_INT 0
7975: ST_TO_ADDR
// sSun := false ;
7976: LD_ADDR_EXP 50
7980: PUSH
7981: LD_INT 0
7983: ST_TO_ADDR
// sTiger := false ;
7984: LD_ADDR_EXP 46
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// sBomb := false ;
7992: LD_ADDR_EXP 47
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// sWound := false ;
8000: LD_ADDR_EXP 55
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// sBetray := false ;
8008: LD_ADDR_EXP 59
8012: PUSH
8013: LD_INT 0
8015: ST_TO_ADDR
// sContamin := false ;
8016: LD_ADDR_EXP 60
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// sOil := false ;
8024: LD_ADDR_EXP 62
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// sStu := false ;
8032: LD_ADDR_EXP 66
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// sBazooka := false ;
8040: LD_ADDR_EXP 69
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// sMortar := false ;
8048: LD_ADDR_EXP 70
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// sRanger := false ;
8056: LD_ADDR_EXP 80
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// end ;
8064: LD_VAR 0 1
8068: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8069: LD_INT 0
8071: PPUSH
8072: PPUSH
8073: PPUSH
8074: PPUSH
8075: PPUSH
// result := [ ] ;
8076: LD_ADDR_VAR 0 1
8080: PUSH
8081: EMPTY
8082: ST_TO_ADDR
// if campaign_id = 1 then
8083: LD_OWVAR 69
8087: PUSH
8088: LD_INT 1
8090: EQUAL
8091: IFFALSE 11029
// begin case mission_number of 1 :
8093: LD_OWVAR 70
8097: PUSH
8098: LD_INT 1
8100: DOUBLE
8101: EQUAL
8102: IFTRUE 8106
8104: GO 8170
8106: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8107: LD_ADDR_VAR 0 1
8111: PUSH
8112: LD_INT 2
8114: PUSH
8115: LD_INT 4
8117: PUSH
8118: LD_INT 11
8120: PUSH
8121: LD_INT 12
8123: PUSH
8124: LD_INT 15
8126: PUSH
8127: LD_INT 16
8129: PUSH
8130: LD_INT 22
8132: PUSH
8133: LD_INT 23
8135: PUSH
8136: LD_INT 26
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: PUSH
8150: LD_INT 101
8152: PUSH
8153: LD_INT 102
8155: PUSH
8156: LD_INT 106
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: ST_TO_ADDR
8168: GO 11027
8170: LD_INT 2
8172: DOUBLE
8173: EQUAL
8174: IFTRUE 8178
8176: GO 8250
8178: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8179: LD_ADDR_VAR 0 1
8183: PUSH
8184: LD_INT 2
8186: PUSH
8187: LD_INT 4
8189: PUSH
8190: LD_INT 11
8192: PUSH
8193: LD_INT 12
8195: PUSH
8196: LD_INT 15
8198: PUSH
8199: LD_INT 16
8201: PUSH
8202: LD_INT 22
8204: PUSH
8205: LD_INT 23
8207: PUSH
8208: LD_INT 26
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 101
8224: PUSH
8225: LD_INT 102
8227: PUSH
8228: LD_INT 105
8230: PUSH
8231: LD_INT 106
8233: PUSH
8234: LD_INT 108
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: ST_TO_ADDR
8248: GO 11027
8250: LD_INT 3
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8258
8256: GO 8334
8258: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8259: LD_ADDR_VAR 0 1
8263: PUSH
8264: LD_INT 2
8266: PUSH
8267: LD_INT 4
8269: PUSH
8270: LD_INT 5
8272: PUSH
8273: LD_INT 11
8275: PUSH
8276: LD_INT 12
8278: PUSH
8279: LD_INT 15
8281: PUSH
8282: LD_INT 16
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_INT 26
8290: PUSH
8291: LD_INT 36
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 101
8308: PUSH
8309: LD_INT 102
8311: PUSH
8312: LD_INT 105
8314: PUSH
8315: LD_INT 106
8317: PUSH
8318: LD_INT 108
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
8332: GO 11027
8334: LD_INT 4
8336: DOUBLE
8337: EQUAL
8338: IFTRUE 8342
8340: GO 8426
8342: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: LD_INT 4
8353: PUSH
8354: LD_INT 5
8356: PUSH
8357: LD_INT 8
8359: PUSH
8360: LD_INT 11
8362: PUSH
8363: LD_INT 12
8365: PUSH
8366: LD_INT 15
8368: PUSH
8369: LD_INT 16
8371: PUSH
8372: LD_INT 22
8374: PUSH
8375: LD_INT 23
8377: PUSH
8378: LD_INT 26
8380: PUSH
8381: LD_INT 36
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 101
8400: PUSH
8401: LD_INT 102
8403: PUSH
8404: LD_INT 105
8406: PUSH
8407: LD_INT 106
8409: PUSH
8410: LD_INT 108
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: ST_TO_ADDR
8424: GO 11027
8426: LD_INT 5
8428: DOUBLE
8429: EQUAL
8430: IFTRUE 8434
8432: GO 8534
8434: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8435: LD_ADDR_VAR 0 1
8439: PUSH
8440: LD_INT 2
8442: PUSH
8443: LD_INT 4
8445: PUSH
8446: LD_INT 5
8448: PUSH
8449: LD_INT 6
8451: PUSH
8452: LD_INT 8
8454: PUSH
8455: LD_INT 11
8457: PUSH
8458: LD_INT 12
8460: PUSH
8461: LD_INT 15
8463: PUSH
8464: LD_INT 16
8466: PUSH
8467: LD_INT 22
8469: PUSH
8470: LD_INT 23
8472: PUSH
8473: LD_INT 25
8475: PUSH
8476: LD_INT 26
8478: PUSH
8479: LD_INT 36
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 101
8500: PUSH
8501: LD_INT 102
8503: PUSH
8504: LD_INT 105
8506: PUSH
8507: LD_INT 106
8509: PUSH
8510: LD_INT 108
8512: PUSH
8513: LD_INT 109
8515: PUSH
8516: LD_INT 112
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: ST_TO_ADDR
8532: GO 11027
8534: LD_INT 6
8536: DOUBLE
8537: EQUAL
8538: IFTRUE 8542
8540: GO 8662
8542: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8543: LD_ADDR_VAR 0 1
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: LD_INT 5
8556: PUSH
8557: LD_INT 6
8559: PUSH
8560: LD_INT 8
8562: PUSH
8563: LD_INT 11
8565: PUSH
8566: LD_INT 12
8568: PUSH
8569: LD_INT 15
8571: PUSH
8572: LD_INT 16
8574: PUSH
8575: LD_INT 20
8577: PUSH
8578: LD_INT 21
8580: PUSH
8581: LD_INT 22
8583: PUSH
8584: LD_INT 23
8586: PUSH
8587: LD_INT 25
8589: PUSH
8590: LD_INT 26
8592: PUSH
8593: LD_INT 30
8595: PUSH
8596: LD_INT 31
8598: PUSH
8599: LD_INT 32
8601: PUSH
8602: LD_INT 36
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 101
8628: PUSH
8629: LD_INT 102
8631: PUSH
8632: LD_INT 105
8634: PUSH
8635: LD_INT 106
8637: PUSH
8638: LD_INT 108
8640: PUSH
8641: LD_INT 109
8643: PUSH
8644: LD_INT 112
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: ST_TO_ADDR
8660: GO 11027
8662: LD_INT 7
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8670
8668: GO 8770
8670: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8671: LD_ADDR_VAR 0 1
8675: PUSH
8676: LD_INT 2
8678: PUSH
8679: LD_INT 4
8681: PUSH
8682: LD_INT 5
8684: PUSH
8685: LD_INT 7
8687: PUSH
8688: LD_INT 11
8690: PUSH
8691: LD_INT 12
8693: PUSH
8694: LD_INT 15
8696: PUSH
8697: LD_INT 16
8699: PUSH
8700: LD_INT 20
8702: PUSH
8703: LD_INT 21
8705: PUSH
8706: LD_INT 22
8708: PUSH
8709: LD_INT 23
8711: PUSH
8712: LD_INT 25
8714: PUSH
8715: LD_INT 26
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 101
8736: PUSH
8737: LD_INT 102
8739: PUSH
8740: LD_INT 103
8742: PUSH
8743: LD_INT 105
8745: PUSH
8746: LD_INT 106
8748: PUSH
8749: LD_INT 108
8751: PUSH
8752: LD_INT 112
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: ST_TO_ADDR
8768: GO 11027
8770: LD_INT 8
8772: DOUBLE
8773: EQUAL
8774: IFTRUE 8778
8776: GO 8906
8778: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8779: LD_ADDR_VAR 0 1
8783: PUSH
8784: LD_INT 2
8786: PUSH
8787: LD_INT 4
8789: PUSH
8790: LD_INT 5
8792: PUSH
8793: LD_INT 6
8795: PUSH
8796: LD_INT 7
8798: PUSH
8799: LD_INT 8
8801: PUSH
8802: LD_INT 11
8804: PUSH
8805: LD_INT 12
8807: PUSH
8808: LD_INT 15
8810: PUSH
8811: LD_INT 16
8813: PUSH
8814: LD_INT 20
8816: PUSH
8817: LD_INT 21
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_INT 23
8825: PUSH
8826: LD_INT 25
8828: PUSH
8829: LD_INT 26
8831: PUSH
8832: LD_INT 30
8834: PUSH
8835: LD_INT 31
8837: PUSH
8838: LD_INT 32
8840: PUSH
8841: LD_INT 36
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 101
8868: PUSH
8869: LD_INT 102
8871: PUSH
8872: LD_INT 103
8874: PUSH
8875: LD_INT 105
8877: PUSH
8878: LD_INT 106
8880: PUSH
8881: LD_INT 108
8883: PUSH
8884: LD_INT 109
8886: PUSH
8887: LD_INT 112
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: ST_TO_ADDR
8904: GO 11027
8906: LD_INT 9
8908: DOUBLE
8909: EQUAL
8910: IFTRUE 8914
8912: GO 9050
8914: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8915: LD_ADDR_VAR 0 1
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: LD_INT 4
8925: PUSH
8926: LD_INT 5
8928: PUSH
8929: LD_INT 6
8931: PUSH
8932: LD_INT 7
8934: PUSH
8935: LD_INT 8
8937: PUSH
8938: LD_INT 11
8940: PUSH
8941: LD_INT 12
8943: PUSH
8944: LD_INT 15
8946: PUSH
8947: LD_INT 16
8949: PUSH
8950: LD_INT 20
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 22
8958: PUSH
8959: LD_INT 23
8961: PUSH
8962: LD_INT 25
8964: PUSH
8965: LD_INT 26
8967: PUSH
8968: LD_INT 28
8970: PUSH
8971: LD_INT 30
8973: PUSH
8974: LD_INT 31
8976: PUSH
8977: LD_INT 32
8979: PUSH
8980: LD_INT 36
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 101
9008: PUSH
9009: LD_INT 102
9011: PUSH
9012: LD_INT 103
9014: PUSH
9015: LD_INT 105
9017: PUSH
9018: LD_INT 106
9020: PUSH
9021: LD_INT 108
9023: PUSH
9024: LD_INT 109
9026: PUSH
9027: LD_INT 112
9029: PUSH
9030: LD_INT 114
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: ST_TO_ADDR
9048: GO 11027
9050: LD_INT 10
9052: DOUBLE
9053: EQUAL
9054: IFTRUE 9058
9056: GO 9242
9058: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9059: LD_ADDR_VAR 0 1
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: LD_INT 4
9069: PUSH
9070: LD_INT 5
9072: PUSH
9073: LD_INT 6
9075: PUSH
9076: LD_INT 7
9078: PUSH
9079: LD_INT 8
9081: PUSH
9082: LD_INT 9
9084: PUSH
9085: LD_INT 10
9087: PUSH
9088: LD_INT 11
9090: PUSH
9091: LD_INT 12
9093: PUSH
9094: LD_INT 13
9096: PUSH
9097: LD_INT 14
9099: PUSH
9100: LD_INT 15
9102: PUSH
9103: LD_INT 16
9105: PUSH
9106: LD_INT 17
9108: PUSH
9109: LD_INT 18
9111: PUSH
9112: LD_INT 19
9114: PUSH
9115: LD_INT 20
9117: PUSH
9118: LD_INT 21
9120: PUSH
9121: LD_INT 22
9123: PUSH
9124: LD_INT 23
9126: PUSH
9127: LD_INT 24
9129: PUSH
9130: LD_INT 25
9132: PUSH
9133: LD_INT 26
9135: PUSH
9136: LD_INT 28
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 31
9144: PUSH
9145: LD_INT 32
9147: PUSH
9148: LD_INT 36
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 101
9184: PUSH
9185: LD_INT 102
9187: PUSH
9188: LD_INT 103
9190: PUSH
9191: LD_INT 104
9193: PUSH
9194: LD_INT 105
9196: PUSH
9197: LD_INT 106
9199: PUSH
9200: LD_INT 107
9202: PUSH
9203: LD_INT 108
9205: PUSH
9206: LD_INT 109
9208: PUSH
9209: LD_INT 110
9211: PUSH
9212: LD_INT 111
9214: PUSH
9215: LD_INT 112
9217: PUSH
9218: LD_INT 114
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: ST_TO_ADDR
9240: GO 11027
9242: LD_INT 11
9244: DOUBLE
9245: EQUAL
9246: IFTRUE 9250
9248: GO 9442
9250: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9251: LD_ADDR_VAR 0 1
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 3
9261: PUSH
9262: LD_INT 4
9264: PUSH
9265: LD_INT 5
9267: PUSH
9268: LD_INT 6
9270: PUSH
9271: LD_INT 7
9273: PUSH
9274: LD_INT 8
9276: PUSH
9277: LD_INT 9
9279: PUSH
9280: LD_INT 10
9282: PUSH
9283: LD_INT 11
9285: PUSH
9286: LD_INT 12
9288: PUSH
9289: LD_INT 13
9291: PUSH
9292: LD_INT 14
9294: PUSH
9295: LD_INT 15
9297: PUSH
9298: LD_INT 16
9300: PUSH
9301: LD_INT 17
9303: PUSH
9304: LD_INT 18
9306: PUSH
9307: LD_INT 19
9309: PUSH
9310: LD_INT 20
9312: PUSH
9313: LD_INT 21
9315: PUSH
9316: LD_INT 22
9318: PUSH
9319: LD_INT 23
9321: PUSH
9322: LD_INT 24
9324: PUSH
9325: LD_INT 25
9327: PUSH
9328: LD_INT 26
9330: PUSH
9331: LD_INT 28
9333: PUSH
9334: LD_INT 30
9336: PUSH
9337: LD_INT 31
9339: PUSH
9340: LD_INT 32
9342: PUSH
9343: LD_INT 34
9345: PUSH
9346: LD_INT 36
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 101
9384: PUSH
9385: LD_INT 102
9387: PUSH
9388: LD_INT 103
9390: PUSH
9391: LD_INT 104
9393: PUSH
9394: LD_INT 105
9396: PUSH
9397: LD_INT 106
9399: PUSH
9400: LD_INT 107
9402: PUSH
9403: LD_INT 108
9405: PUSH
9406: LD_INT 109
9408: PUSH
9409: LD_INT 110
9411: PUSH
9412: LD_INT 111
9414: PUSH
9415: LD_INT 112
9417: PUSH
9418: LD_INT 114
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
9440: GO 11027
9442: LD_INT 12
9444: DOUBLE
9445: EQUAL
9446: IFTRUE 9450
9448: GO 9658
9450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9451: LD_ADDR_VAR 0 1
9455: PUSH
9456: LD_INT 1
9458: PUSH
9459: LD_INT 2
9461: PUSH
9462: LD_INT 3
9464: PUSH
9465: LD_INT 4
9467: PUSH
9468: LD_INT 5
9470: PUSH
9471: LD_INT 6
9473: PUSH
9474: LD_INT 7
9476: PUSH
9477: LD_INT 8
9479: PUSH
9480: LD_INT 9
9482: PUSH
9483: LD_INT 10
9485: PUSH
9486: LD_INT 11
9488: PUSH
9489: LD_INT 12
9491: PUSH
9492: LD_INT 13
9494: PUSH
9495: LD_INT 14
9497: PUSH
9498: LD_INT 15
9500: PUSH
9501: LD_INT 16
9503: PUSH
9504: LD_INT 17
9506: PUSH
9507: LD_INT 18
9509: PUSH
9510: LD_INT 19
9512: PUSH
9513: LD_INT 20
9515: PUSH
9516: LD_INT 21
9518: PUSH
9519: LD_INT 22
9521: PUSH
9522: LD_INT 23
9524: PUSH
9525: LD_INT 24
9527: PUSH
9528: LD_INT 25
9530: PUSH
9531: LD_INT 26
9533: PUSH
9534: LD_INT 27
9536: PUSH
9537: LD_INT 28
9539: PUSH
9540: LD_INT 30
9542: PUSH
9543: LD_INT 31
9545: PUSH
9546: LD_INT 32
9548: PUSH
9549: LD_INT 33
9551: PUSH
9552: LD_INT 34
9554: PUSH
9555: LD_INT 36
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 101
9596: PUSH
9597: LD_INT 102
9599: PUSH
9600: LD_INT 103
9602: PUSH
9603: LD_INT 104
9605: PUSH
9606: LD_INT 105
9608: PUSH
9609: LD_INT 106
9611: PUSH
9612: LD_INT 107
9614: PUSH
9615: LD_INT 108
9617: PUSH
9618: LD_INT 109
9620: PUSH
9621: LD_INT 110
9623: PUSH
9624: LD_INT 111
9626: PUSH
9627: LD_INT 112
9629: PUSH
9630: LD_INT 113
9632: PUSH
9633: LD_INT 114
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: ST_TO_ADDR
9656: GO 11027
9658: LD_INT 13
9660: DOUBLE
9661: EQUAL
9662: IFTRUE 9666
9664: GO 9862
9666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9667: LD_ADDR_VAR 0 1
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 2
9677: PUSH
9678: LD_INT 3
9680: PUSH
9681: LD_INT 4
9683: PUSH
9684: LD_INT 5
9686: PUSH
9687: LD_INT 8
9689: PUSH
9690: LD_INT 9
9692: PUSH
9693: LD_INT 10
9695: PUSH
9696: LD_INT 11
9698: PUSH
9699: LD_INT 12
9701: PUSH
9702: LD_INT 14
9704: PUSH
9705: LD_INT 15
9707: PUSH
9708: LD_INT 16
9710: PUSH
9711: LD_INT 17
9713: PUSH
9714: LD_INT 18
9716: PUSH
9717: LD_INT 19
9719: PUSH
9720: LD_INT 20
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 23
9731: PUSH
9732: LD_INT 24
9734: PUSH
9735: LD_INT 25
9737: PUSH
9738: LD_INT 26
9740: PUSH
9741: LD_INT 27
9743: PUSH
9744: LD_INT 28
9746: PUSH
9747: LD_INT 30
9749: PUSH
9750: LD_INT 31
9752: PUSH
9753: LD_INT 32
9755: PUSH
9756: LD_INT 33
9758: PUSH
9759: LD_INT 34
9761: PUSH
9762: LD_INT 36
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 101
9800: PUSH
9801: LD_INT 102
9803: PUSH
9804: LD_INT 103
9806: PUSH
9807: LD_INT 104
9809: PUSH
9810: LD_INT 105
9812: PUSH
9813: LD_INT 106
9815: PUSH
9816: LD_INT 107
9818: PUSH
9819: LD_INT 108
9821: PUSH
9822: LD_INT 109
9824: PUSH
9825: LD_INT 110
9827: PUSH
9828: LD_INT 111
9830: PUSH
9831: LD_INT 112
9833: PUSH
9834: LD_INT 113
9836: PUSH
9837: LD_INT 114
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: ST_TO_ADDR
9860: GO 11027
9862: LD_INT 14
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 10082
9870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9871: LD_ADDR_VAR 0 1
9875: PUSH
9876: LD_INT 1
9878: PUSH
9879: LD_INT 2
9881: PUSH
9882: LD_INT 3
9884: PUSH
9885: LD_INT 4
9887: PUSH
9888: LD_INT 5
9890: PUSH
9891: LD_INT 6
9893: PUSH
9894: LD_INT 7
9896: PUSH
9897: LD_INT 8
9899: PUSH
9900: LD_INT 9
9902: PUSH
9903: LD_INT 10
9905: PUSH
9906: LD_INT 11
9908: PUSH
9909: LD_INT 12
9911: PUSH
9912: LD_INT 13
9914: PUSH
9915: LD_INT 14
9917: PUSH
9918: LD_INT 15
9920: PUSH
9921: LD_INT 16
9923: PUSH
9924: LD_INT 17
9926: PUSH
9927: LD_INT 18
9929: PUSH
9930: LD_INT 19
9932: PUSH
9933: LD_INT 20
9935: PUSH
9936: LD_INT 21
9938: PUSH
9939: LD_INT 22
9941: PUSH
9942: LD_INT 23
9944: PUSH
9945: LD_INT 24
9947: PUSH
9948: LD_INT 25
9950: PUSH
9951: LD_INT 26
9953: PUSH
9954: LD_INT 27
9956: PUSH
9957: LD_INT 28
9959: PUSH
9960: LD_INT 29
9962: PUSH
9963: LD_INT 30
9965: PUSH
9966: LD_INT 31
9968: PUSH
9969: LD_INT 32
9971: PUSH
9972: LD_INT 33
9974: PUSH
9975: LD_INT 34
9977: PUSH
9978: LD_INT 36
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 101
10020: PUSH
10021: LD_INT 102
10023: PUSH
10024: LD_INT 103
10026: PUSH
10027: LD_INT 104
10029: PUSH
10030: LD_INT 105
10032: PUSH
10033: LD_INT 106
10035: PUSH
10036: LD_INT 107
10038: PUSH
10039: LD_INT 108
10041: PUSH
10042: LD_INT 109
10044: PUSH
10045: LD_INT 110
10047: PUSH
10048: LD_INT 111
10050: PUSH
10051: LD_INT 112
10053: PUSH
10054: LD_INT 113
10056: PUSH
10057: LD_INT 114
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: ST_TO_ADDR
10080: GO 11027
10082: LD_INT 15
10084: DOUBLE
10085: EQUAL
10086: IFTRUE 10090
10088: GO 10302
10090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10091: LD_ADDR_VAR 0 1
10095: PUSH
10096: LD_INT 1
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: LD_INT 3
10104: PUSH
10105: LD_INT 4
10107: PUSH
10108: LD_INT 5
10110: PUSH
10111: LD_INT 6
10113: PUSH
10114: LD_INT 7
10116: PUSH
10117: LD_INT 8
10119: PUSH
10120: LD_INT 9
10122: PUSH
10123: LD_INT 10
10125: PUSH
10126: LD_INT 11
10128: PUSH
10129: LD_INT 12
10131: PUSH
10132: LD_INT 13
10134: PUSH
10135: LD_INT 14
10137: PUSH
10138: LD_INT 15
10140: PUSH
10141: LD_INT 16
10143: PUSH
10144: LD_INT 17
10146: PUSH
10147: LD_INT 18
10149: PUSH
10150: LD_INT 19
10152: PUSH
10153: LD_INT 20
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 22
10161: PUSH
10162: LD_INT 23
10164: PUSH
10165: LD_INT 24
10167: PUSH
10168: LD_INT 25
10170: PUSH
10171: LD_INT 26
10173: PUSH
10174: LD_INT 27
10176: PUSH
10177: LD_INT 28
10179: PUSH
10180: LD_INT 29
10182: PUSH
10183: LD_INT 30
10185: PUSH
10186: LD_INT 31
10188: PUSH
10189: LD_INT 32
10191: PUSH
10192: LD_INT 33
10194: PUSH
10195: LD_INT 34
10197: PUSH
10198: LD_INT 36
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 101
10240: PUSH
10241: LD_INT 102
10243: PUSH
10244: LD_INT 103
10246: PUSH
10247: LD_INT 104
10249: PUSH
10250: LD_INT 105
10252: PUSH
10253: LD_INT 106
10255: PUSH
10256: LD_INT 107
10258: PUSH
10259: LD_INT 108
10261: PUSH
10262: LD_INT 109
10264: PUSH
10265: LD_INT 110
10267: PUSH
10268: LD_INT 111
10270: PUSH
10271: LD_INT 112
10273: PUSH
10274: LD_INT 113
10276: PUSH
10277: LD_INT 114
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: ST_TO_ADDR
10300: GO 11027
10302: LD_INT 16
10304: DOUBLE
10305: EQUAL
10306: IFTRUE 10310
10308: GO 10434
10310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10311: LD_ADDR_VAR 0 1
10315: PUSH
10316: LD_INT 2
10318: PUSH
10319: LD_INT 4
10321: PUSH
10322: LD_INT 5
10324: PUSH
10325: LD_INT 7
10327: PUSH
10328: LD_INT 11
10330: PUSH
10331: LD_INT 12
10333: PUSH
10334: LD_INT 15
10336: PUSH
10337: LD_INT 16
10339: PUSH
10340: LD_INT 20
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 22
10348: PUSH
10349: LD_INT 23
10351: PUSH
10352: LD_INT 25
10354: PUSH
10355: LD_INT 26
10357: PUSH
10358: LD_INT 30
10360: PUSH
10361: LD_INT 31
10363: PUSH
10364: LD_INT 32
10366: PUSH
10367: LD_INT 33
10369: PUSH
10370: LD_INT 34
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 101
10396: PUSH
10397: LD_INT 102
10399: PUSH
10400: LD_INT 103
10402: PUSH
10403: LD_INT 106
10405: PUSH
10406: LD_INT 108
10408: PUSH
10409: LD_INT 112
10411: PUSH
10412: LD_INT 113
10414: PUSH
10415: LD_INT 114
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: ST_TO_ADDR
10432: GO 11027
10434: LD_INT 17
10436: DOUBLE
10437: EQUAL
10438: IFTRUE 10442
10440: GO 10654
10442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10443: LD_ADDR_VAR 0 1
10447: PUSH
10448: LD_INT 1
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: LD_INT 3
10456: PUSH
10457: LD_INT 4
10459: PUSH
10460: LD_INT 5
10462: PUSH
10463: LD_INT 6
10465: PUSH
10466: LD_INT 7
10468: PUSH
10469: LD_INT 8
10471: PUSH
10472: LD_INT 9
10474: PUSH
10475: LD_INT 10
10477: PUSH
10478: LD_INT 11
10480: PUSH
10481: LD_INT 12
10483: PUSH
10484: LD_INT 13
10486: PUSH
10487: LD_INT 14
10489: PUSH
10490: LD_INT 15
10492: PUSH
10493: LD_INT 16
10495: PUSH
10496: LD_INT 17
10498: PUSH
10499: LD_INT 18
10501: PUSH
10502: LD_INT 19
10504: PUSH
10505: LD_INT 20
10507: PUSH
10508: LD_INT 21
10510: PUSH
10511: LD_INT 22
10513: PUSH
10514: LD_INT 23
10516: PUSH
10517: LD_INT 24
10519: PUSH
10520: LD_INT 25
10522: PUSH
10523: LD_INT 26
10525: PUSH
10526: LD_INT 27
10528: PUSH
10529: LD_INT 28
10531: PUSH
10532: LD_INT 29
10534: PUSH
10535: LD_INT 30
10537: PUSH
10538: LD_INT 31
10540: PUSH
10541: LD_INT 32
10543: PUSH
10544: LD_INT 33
10546: PUSH
10547: LD_INT 34
10549: PUSH
10550: LD_INT 36
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 101
10592: PUSH
10593: LD_INT 102
10595: PUSH
10596: LD_INT 103
10598: PUSH
10599: LD_INT 104
10601: PUSH
10602: LD_INT 105
10604: PUSH
10605: LD_INT 106
10607: PUSH
10608: LD_INT 107
10610: PUSH
10611: LD_INT 108
10613: PUSH
10614: LD_INT 109
10616: PUSH
10617: LD_INT 110
10619: PUSH
10620: LD_INT 111
10622: PUSH
10623: LD_INT 112
10625: PUSH
10626: LD_INT 113
10628: PUSH
10629: LD_INT 114
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: ST_TO_ADDR
10652: GO 11027
10654: LD_INT 18
10656: DOUBLE
10657: EQUAL
10658: IFTRUE 10662
10660: GO 10798
10662: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10663: LD_ADDR_VAR 0 1
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: LD_INT 4
10673: PUSH
10674: LD_INT 5
10676: PUSH
10677: LD_INT 7
10679: PUSH
10680: LD_INT 11
10682: PUSH
10683: LD_INT 12
10685: PUSH
10686: LD_INT 15
10688: PUSH
10689: LD_INT 16
10691: PUSH
10692: LD_INT 20
10694: PUSH
10695: LD_INT 21
10697: PUSH
10698: LD_INT 22
10700: PUSH
10701: LD_INT 23
10703: PUSH
10704: LD_INT 25
10706: PUSH
10707: LD_INT 26
10709: PUSH
10710: LD_INT 30
10712: PUSH
10713: LD_INT 31
10715: PUSH
10716: LD_INT 32
10718: PUSH
10719: LD_INT 33
10721: PUSH
10722: LD_INT 34
10724: PUSH
10725: LD_INT 35
10727: PUSH
10728: LD_INT 36
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 101
10756: PUSH
10757: LD_INT 102
10759: PUSH
10760: LD_INT 103
10762: PUSH
10763: LD_INT 106
10765: PUSH
10766: LD_INT 108
10768: PUSH
10769: LD_INT 112
10771: PUSH
10772: LD_INT 113
10774: PUSH
10775: LD_INT 114
10777: PUSH
10778: LD_INT 115
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: ST_TO_ADDR
10796: GO 11027
10798: LD_INT 19
10800: DOUBLE
10801: EQUAL
10802: IFTRUE 10806
10804: GO 11026
10806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10807: LD_ADDR_VAR 0 1
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: LD_INT 2
10817: PUSH
10818: LD_INT 3
10820: PUSH
10821: LD_INT 4
10823: PUSH
10824: LD_INT 5
10826: PUSH
10827: LD_INT 6
10829: PUSH
10830: LD_INT 7
10832: PUSH
10833: LD_INT 8
10835: PUSH
10836: LD_INT 9
10838: PUSH
10839: LD_INT 10
10841: PUSH
10842: LD_INT 11
10844: PUSH
10845: LD_INT 12
10847: PUSH
10848: LD_INT 13
10850: PUSH
10851: LD_INT 14
10853: PUSH
10854: LD_INT 15
10856: PUSH
10857: LD_INT 16
10859: PUSH
10860: LD_INT 17
10862: PUSH
10863: LD_INT 18
10865: PUSH
10866: LD_INT 19
10868: PUSH
10869: LD_INT 20
10871: PUSH
10872: LD_INT 21
10874: PUSH
10875: LD_INT 22
10877: PUSH
10878: LD_INT 23
10880: PUSH
10881: LD_INT 24
10883: PUSH
10884: LD_INT 25
10886: PUSH
10887: LD_INT 26
10889: PUSH
10890: LD_INT 27
10892: PUSH
10893: LD_INT 28
10895: PUSH
10896: LD_INT 29
10898: PUSH
10899: LD_INT 30
10901: PUSH
10902: LD_INT 31
10904: PUSH
10905: LD_INT 32
10907: PUSH
10908: LD_INT 33
10910: PUSH
10911: LD_INT 34
10913: PUSH
10914: LD_INT 35
10916: PUSH
10917: LD_INT 36
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 101
10960: PUSH
10961: LD_INT 102
10963: PUSH
10964: LD_INT 103
10966: PUSH
10967: LD_INT 104
10969: PUSH
10970: LD_INT 105
10972: PUSH
10973: LD_INT 106
10975: PUSH
10976: LD_INT 107
10978: PUSH
10979: LD_INT 108
10981: PUSH
10982: LD_INT 109
10984: PUSH
10985: LD_INT 110
10987: PUSH
10988: LD_INT 111
10990: PUSH
10991: LD_INT 112
10993: PUSH
10994: LD_INT 113
10996: PUSH
10997: LD_INT 114
10999: PUSH
11000: LD_INT 115
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: ST_TO_ADDR
11024: GO 11027
11026: POP
// end else
11027: GO 11246
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11029: LD_ADDR_VAR 0 1
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: LD_INT 2
11039: PUSH
11040: LD_INT 3
11042: PUSH
11043: LD_INT 4
11045: PUSH
11046: LD_INT 5
11048: PUSH
11049: LD_INT 6
11051: PUSH
11052: LD_INT 7
11054: PUSH
11055: LD_INT 8
11057: PUSH
11058: LD_INT 9
11060: PUSH
11061: LD_INT 10
11063: PUSH
11064: LD_INT 11
11066: PUSH
11067: LD_INT 12
11069: PUSH
11070: LD_INT 13
11072: PUSH
11073: LD_INT 14
11075: PUSH
11076: LD_INT 15
11078: PUSH
11079: LD_INT 16
11081: PUSH
11082: LD_INT 17
11084: PUSH
11085: LD_INT 18
11087: PUSH
11088: LD_INT 19
11090: PUSH
11091: LD_INT 20
11093: PUSH
11094: LD_INT 21
11096: PUSH
11097: LD_INT 22
11099: PUSH
11100: LD_INT 23
11102: PUSH
11103: LD_INT 24
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 26
11111: PUSH
11112: LD_INT 27
11114: PUSH
11115: LD_INT 28
11117: PUSH
11118: LD_INT 29
11120: PUSH
11121: LD_INT 30
11123: PUSH
11124: LD_INT 31
11126: PUSH
11127: LD_INT 32
11129: PUSH
11130: LD_INT 33
11132: PUSH
11133: LD_INT 34
11135: PUSH
11136: LD_INT 35
11138: PUSH
11139: LD_INT 36
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 101
11182: PUSH
11183: LD_INT 102
11185: PUSH
11186: LD_INT 103
11188: PUSH
11189: LD_INT 104
11191: PUSH
11192: LD_INT 105
11194: PUSH
11195: LD_INT 106
11197: PUSH
11198: LD_INT 107
11200: PUSH
11201: LD_INT 108
11203: PUSH
11204: LD_INT 109
11206: PUSH
11207: LD_INT 110
11209: PUSH
11210: LD_INT 111
11212: PUSH
11213: LD_INT 112
11215: PUSH
11216: LD_INT 113
11218: PUSH
11219: LD_INT 114
11221: PUSH
11222: LD_INT 115
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: ST_TO_ADDR
// if result then
11246: LD_VAR 0 1
11250: IFFALSE 11539
// begin normal :=  ;
11252: LD_ADDR_VAR 0 3
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hardcore :=  ;
11260: LD_ADDR_VAR 0 4
11264: PUSH
11265: LD_STRING 
11267: ST_TO_ADDR
// for i = 1 to normalCounter do
11268: LD_ADDR_VAR 0 5
11272: PUSH
11273: DOUBLE
11274: LD_INT 1
11276: DEC
11277: ST_TO_ADDR
11278: LD_EXP 28
11282: PUSH
11283: FOR_TO
11284: IFFALSE 11385
// begin tmp := 0 ;
11286: LD_ADDR_VAR 0 2
11290: PUSH
11291: LD_STRING 0
11293: ST_TO_ADDR
// if result [ 1 ] then
11294: LD_VAR 0 1
11298: PUSH
11299: LD_INT 1
11301: ARRAY
11302: IFFALSE 11367
// if result [ 1 ] [ 1 ] = i then
11304: LD_VAR 0 1
11308: PUSH
11309: LD_INT 1
11311: ARRAY
11312: PUSH
11313: LD_INT 1
11315: ARRAY
11316: PUSH
11317: LD_VAR 0 5
11321: EQUAL
11322: IFFALSE 11367
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11324: LD_ADDR_VAR 0 1
11328: PUSH
11329: LD_VAR 0 1
11333: PPUSH
11334: LD_INT 1
11336: PPUSH
11337: LD_VAR 0 1
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 3
11353: PPUSH
11354: CALL_OW 1
11358: ST_TO_ADDR
// tmp := 1 ;
11359: LD_ADDR_VAR 0 2
11363: PUSH
11364: LD_STRING 1
11366: ST_TO_ADDR
// end ; normal := normal & tmp ;
11367: LD_ADDR_VAR 0 3
11371: PUSH
11372: LD_VAR 0 3
11376: PUSH
11377: LD_VAR 0 2
11381: STR
11382: ST_TO_ADDR
// end ;
11383: GO 11283
11385: POP
11386: POP
// for i = 1 to hardcoreCounter do
11387: LD_ADDR_VAR 0 5
11391: PUSH
11392: DOUBLE
11393: LD_INT 1
11395: DEC
11396: ST_TO_ADDR
11397: LD_EXP 29
11401: PUSH
11402: FOR_TO
11403: IFFALSE 11508
// begin tmp := 0 ;
11405: LD_ADDR_VAR 0 2
11409: PUSH
11410: LD_STRING 0
11412: ST_TO_ADDR
// if result [ 2 ] then
11413: LD_VAR 0 1
11417: PUSH
11418: LD_INT 2
11420: ARRAY
11421: IFFALSE 11490
// if result [ 2 ] [ 1 ] = 100 + i then
11423: LD_VAR 0 1
11427: PUSH
11428: LD_INT 2
11430: ARRAY
11431: PUSH
11432: LD_INT 1
11434: ARRAY
11435: PUSH
11436: LD_INT 100
11438: PUSH
11439: LD_VAR 0 5
11443: PLUS
11444: EQUAL
11445: IFFALSE 11490
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11447: LD_ADDR_VAR 0 1
11451: PUSH
11452: LD_VAR 0 1
11456: PPUSH
11457: LD_INT 2
11459: PPUSH
11460: LD_VAR 0 1
11464: PUSH
11465: LD_INT 2
11467: ARRAY
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: CALL_OW 3
11476: PPUSH
11477: CALL_OW 1
11481: ST_TO_ADDR
// tmp := 1 ;
11482: LD_ADDR_VAR 0 2
11486: PUSH
11487: LD_STRING 1
11489: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11490: LD_ADDR_VAR 0 4
11494: PUSH
11495: LD_VAR 0 4
11499: PUSH
11500: LD_VAR 0 2
11504: STR
11505: ST_TO_ADDR
// end ;
11506: GO 11402
11508: POP
11509: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11510: LD_STRING getStreamItemsFromMission("
11512: PUSH
11513: LD_VAR 0 3
11517: STR
11518: PUSH
11519: LD_STRING ","
11521: STR
11522: PUSH
11523: LD_VAR 0 4
11527: STR
11528: PUSH
11529: LD_STRING ")
11531: STR
11532: PPUSH
11533: CALL_OW 559
// end else
11537: GO 11546
// ToLua ( getStreamItemsFromMission("","") ) ;
11539: LD_STRING getStreamItemsFromMission("","")
11541: PPUSH
11542: CALL_OW 559
// end ;
11546: LD_VAR 0 1
11550: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11551: LD_EXP 27
11555: PUSH
11556: LD_EXP 32
11560: AND
11561: IFFALSE 11685
11563: GO 11565
11565: DISABLE
11566: LD_INT 0
11568: PPUSH
11569: PPUSH
// begin enable ;
11570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11571: LD_ADDR_VAR 0 2
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_OWVAR 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 34
11593: PUSH
11594: LD_INT 7
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 34
11603: PUSH
11604: LD_INT 45
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 34
11613: PUSH
11614: LD_INT 28
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 34
11623: PUSH
11624: LD_INT 47
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: ST_TO_ADDR
// if not tmp then
11647: LD_VAR 0 2
11651: NOT
11652: IFFALSE 11656
// exit ;
11654: GO 11685
// for i in tmp do
11656: LD_ADDR_VAR 0 1
11660: PUSH
11661: LD_VAR 0 2
11665: PUSH
11666: FOR_IN
11667: IFFALSE 11683
// begin SetLives ( i , 0 ) ;
11669: LD_VAR 0 1
11673: PPUSH
11674: LD_INT 0
11676: PPUSH
11677: CALL_OW 234
// end ;
11681: GO 11666
11683: POP
11684: POP
// end ;
11685: PPOPN 2
11687: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11688: LD_EXP 27
11692: PUSH
11693: LD_EXP 33
11697: AND
11698: IFFALSE 11782
11700: GO 11702
11702: DISABLE
11703: LD_INT 0
11705: PPUSH
11706: PPUSH
// begin enable ;
11707: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11708: LD_ADDR_VAR 0 2
11712: PUSH
11713: LD_INT 22
11715: PUSH
11716: LD_OWVAR 2
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 32
11727: PUSH
11728: LD_INT 3
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PPUSH
11739: CALL_OW 69
11743: ST_TO_ADDR
// if not tmp then
11744: LD_VAR 0 2
11748: NOT
11749: IFFALSE 11753
// exit ;
11751: GO 11782
// for i in tmp do
11753: LD_ADDR_VAR 0 1
11757: PUSH
11758: LD_VAR 0 2
11762: PUSH
11763: FOR_IN
11764: IFFALSE 11780
// begin SetLives ( i , 0 ) ;
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 234
// end ;
11778: GO 11763
11780: POP
11781: POP
// end ;
11782: PPOPN 2
11784: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11785: LD_EXP 27
11789: PUSH
11790: LD_EXP 30
11794: AND
11795: IFFALSE 11888
11797: GO 11799
11799: DISABLE
11800: LD_INT 0
11802: PPUSH
// begin enable ;
11803: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11804: LD_ADDR_VAR 0 1
11808: PUSH
11809: LD_INT 22
11811: PUSH
11812: LD_OWVAR 2
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 2
11823: PUSH
11824: LD_INT 25
11826: PUSH
11827: LD_INT 5
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 25
11836: PUSH
11837: LD_INT 9
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 25
11846: PUSH
11847: LD_INT 8
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PPUSH
11864: CALL_OW 69
11868: PUSH
11869: FOR_IN
11870: IFFALSE 11886
// begin SetClass ( i , 1 ) ;
11872: LD_VAR 0 1
11876: PPUSH
11877: LD_INT 1
11879: PPUSH
11880: CALL_OW 336
// end ;
11884: GO 11869
11886: POP
11887: POP
// end ;
11888: PPOPN 1
11890: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11891: LD_EXP 27
11895: PUSH
11896: LD_EXP 31
11900: AND
11901: PUSH
11902: LD_OWVAR 65
11906: PUSH
11907: LD_INT 7
11909: LESS
11910: AND
11911: IFFALSE 11925
11913: GO 11915
11915: DISABLE
// begin enable ;
11916: ENABLE
// game_speed := 7 ;
11917: LD_ADDR_OWVAR 65
11921: PUSH
11922: LD_INT 7
11924: ST_TO_ADDR
// end ;
11925: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11926: LD_EXP 27
11930: PUSH
11931: LD_EXP 34
11935: AND
11936: IFFALSE 12138
11938: GO 11940
11940: DISABLE
11941: LD_INT 0
11943: PPUSH
11944: PPUSH
11945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11946: LD_ADDR_VAR 0 3
11950: PUSH
11951: LD_INT 81
11953: PUSH
11954: LD_OWVAR 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 21
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 69
11981: ST_TO_ADDR
// if not tmp then
11982: LD_VAR 0 3
11986: NOT
11987: IFFALSE 11991
// exit ;
11989: GO 12138
// if tmp > 5 then
11991: LD_VAR 0 3
11995: PUSH
11996: LD_INT 5
11998: GREATER
11999: IFFALSE 12011
// k := 5 else
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: LD_INT 5
12008: ST_TO_ADDR
12009: GO 12021
// k := tmp ;
12011: LD_ADDR_VAR 0 2
12015: PUSH
12016: LD_VAR 0 3
12020: ST_TO_ADDR
// for i := 1 to k do
12021: LD_ADDR_VAR 0 1
12025: PUSH
12026: DOUBLE
12027: LD_INT 1
12029: DEC
12030: ST_TO_ADDR
12031: LD_VAR 0 2
12035: PUSH
12036: FOR_TO
12037: IFFALSE 12136
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12039: LD_VAR 0 3
12043: PUSH
12044: LD_VAR 0 1
12048: ARRAY
12049: PPUSH
12050: LD_VAR 0 1
12054: PUSH
12055: LD_INT 4
12057: MOD
12058: PUSH
12059: LD_INT 1
12061: PLUS
12062: PPUSH
12063: CALL_OW 259
12067: PUSH
12068: LD_INT 10
12070: LESS
12071: IFFALSE 12134
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12073: LD_VAR 0 3
12077: PUSH
12078: LD_VAR 0 1
12082: ARRAY
12083: PPUSH
12084: LD_VAR 0 1
12088: PUSH
12089: LD_INT 4
12091: MOD
12092: PUSH
12093: LD_INT 1
12095: PLUS
12096: PPUSH
12097: LD_VAR 0 3
12101: PUSH
12102: LD_VAR 0 1
12106: ARRAY
12107: PPUSH
12108: LD_VAR 0 1
12112: PUSH
12113: LD_INT 4
12115: MOD
12116: PUSH
12117: LD_INT 1
12119: PLUS
12120: PPUSH
12121: CALL_OW 259
12125: PUSH
12126: LD_INT 1
12128: PLUS
12129: PPUSH
12130: CALL_OW 237
12134: GO 12036
12136: POP
12137: POP
// end ;
12138: PPOPN 3
12140: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12141: LD_EXP 27
12145: PUSH
12146: LD_EXP 35
12150: AND
12151: IFFALSE 12171
12153: GO 12155
12155: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12156: LD_INT 4
12158: PPUSH
12159: LD_OWVAR 2
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 324
12171: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12172: LD_EXP 27
12176: PUSH
12177: LD_EXP 64
12181: AND
12182: IFFALSE 12202
12184: GO 12186
12186: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12187: LD_INT 19
12189: PPUSH
12190: LD_OWVAR 2
12194: PPUSH
12195: LD_INT 0
12197: PPUSH
12198: CALL_OW 324
12202: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12203: LD_EXP 27
12207: PUSH
12208: LD_EXP 36
12212: AND
12213: IFFALSE 12315
12215: GO 12217
12217: DISABLE
12218: LD_INT 0
12220: PPUSH
12221: PPUSH
// begin enable ;
12222: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_INT 22
12230: PUSH
12231: LD_OWVAR 2
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 2
12242: PUSH
12243: LD_INT 34
12245: PUSH
12246: LD_INT 11
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 34
12255: PUSH
12256: LD_INT 30
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 69
12276: ST_TO_ADDR
// if not tmp then
12277: LD_VAR 0 2
12281: NOT
12282: IFFALSE 12286
// exit ;
12284: GO 12315
// for i in tmp do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_VAR 0 2
12295: PUSH
12296: FOR_IN
12297: IFFALSE 12313
// begin SetLives ( i , 0 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 0
12306: PPUSH
12307: CALL_OW 234
// end ;
12311: GO 12296
12313: POP
12314: POP
// end ;
12315: PPOPN 2
12317: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12318: LD_EXP 27
12322: PUSH
12323: LD_EXP 37
12327: AND
12328: IFFALSE 12348
12330: GO 12332
12332: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12333: LD_INT 32
12335: PPUSH
12336: LD_OWVAR 2
12340: PPUSH
12341: LD_INT 0
12343: PPUSH
12344: CALL_OW 324
12348: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12349: LD_EXP 27
12353: PUSH
12354: LD_EXP 38
12358: AND
12359: IFFALSE 12540
12361: GO 12363
12363: DISABLE
12364: LD_INT 0
12366: PPUSH
12367: PPUSH
12368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_INT 22
12376: PUSH
12377: LD_OWVAR 2
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 33
12388: PUSH
12389: LD_INT 3
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PPUSH
12400: CALL_OW 69
12404: ST_TO_ADDR
// if not tmp then
12405: LD_VAR 0 2
12409: NOT
12410: IFFALSE 12414
// exit ;
12412: GO 12540
// side := 0 ;
12414: LD_ADDR_VAR 0 3
12418: PUSH
12419: LD_INT 0
12421: ST_TO_ADDR
// for i := 1 to 8 do
12422: LD_ADDR_VAR 0 1
12426: PUSH
12427: DOUBLE
12428: LD_INT 1
12430: DEC
12431: ST_TO_ADDR
12432: LD_INT 8
12434: PUSH
12435: FOR_TO
12436: IFFALSE 12484
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12438: LD_OWVAR 2
12442: PUSH
12443: LD_VAR 0 1
12447: NONEQUAL
12448: PUSH
12449: LD_OWVAR 2
12453: PPUSH
12454: LD_VAR 0 1
12458: PPUSH
12459: CALL_OW 81
12463: PUSH
12464: LD_INT 2
12466: EQUAL
12467: AND
12468: IFFALSE 12482
// begin side := i ;
12470: LD_ADDR_VAR 0 3
12474: PUSH
12475: LD_VAR 0 1
12479: ST_TO_ADDR
// break ;
12480: GO 12484
// end ;
12482: GO 12435
12484: POP
12485: POP
// if not side then
12486: LD_VAR 0 3
12490: NOT
12491: IFFALSE 12495
// exit ;
12493: GO 12540
// for i := 1 to tmp do
12495: LD_ADDR_VAR 0 1
12499: PUSH
12500: DOUBLE
12501: LD_INT 1
12503: DEC
12504: ST_TO_ADDR
12505: LD_VAR 0 2
12509: PUSH
12510: FOR_TO
12511: IFFALSE 12538
// if Prob ( 60 ) then
12513: LD_INT 60
12515: PPUSH
12516: CALL_OW 13
12520: IFFALSE 12536
// SetSide ( i , side ) ;
12522: LD_VAR 0 1
12526: PPUSH
12527: LD_VAR 0 3
12531: PPUSH
12532: CALL_OW 235
12536: GO 12510
12538: POP
12539: POP
// end ;
12540: PPOPN 3
12542: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12543: LD_EXP 27
12547: PUSH
12548: LD_EXP 40
12552: AND
12553: IFFALSE 12672
12555: GO 12557
12557: DISABLE
12558: LD_INT 0
12560: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12561: LD_ADDR_VAR 0 1
12565: PUSH
12566: LD_INT 22
12568: PUSH
12569: LD_OWVAR 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 1
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: LD_INT 23
12593: PUSH
12594: LD_INT 0
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 69
12614: PUSH
12615: FOR_IN
12616: IFFALSE 12670
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 257
12627: PUSH
12628: LD_INT 1
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: LD_INT 3
12636: PUSH
12637: LD_INT 4
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: IN
12646: IFFALSE 12668
// SetClass ( un , rand ( 1 , 4 ) ) ;
12648: LD_VAR 0 1
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: LD_INT 4
12658: PPUSH
12659: CALL_OW 12
12663: PPUSH
12664: CALL_OW 336
12668: GO 12615
12670: POP
12671: POP
// end ;
12672: PPOPN 1
12674: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12675: LD_EXP 27
12679: PUSH
12680: LD_EXP 39
12684: AND
12685: IFFALSE 12764
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12693: LD_ADDR_VAR 0 1
12697: PUSH
12698: LD_INT 22
12700: PUSH
12701: LD_OWVAR 2
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 3
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: ST_TO_ADDR
// if not tmp then
12729: LD_VAR 0 1
12733: NOT
12734: IFFALSE 12738
// exit ;
12736: GO 12764
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12738: LD_VAR 0 1
12742: PUSH
12743: LD_INT 1
12745: PPUSH
12746: LD_VAR 0 1
12750: PPUSH
12751: CALL_OW 12
12755: ARRAY
12756: PPUSH
12757: LD_INT 100
12759: PPUSH
12760: CALL_OW 234
// end ;
12764: PPOPN 1
12766: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12767: LD_EXP 27
12771: PUSH
12772: LD_EXP 41
12776: AND
12777: IFFALSE 12875
12779: GO 12781
12781: DISABLE
12782: LD_INT 0
12784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12785: LD_ADDR_VAR 0 1
12789: PUSH
12790: LD_INT 22
12792: PUSH
12793: LD_OWVAR 2
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 21
12804: PUSH
12805: LD_INT 1
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: ST_TO_ADDR
// if not tmp then
12821: LD_VAR 0 1
12825: NOT
12826: IFFALSE 12830
// exit ;
12828: GO 12875
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12830: LD_VAR 0 1
12834: PUSH
12835: LD_INT 1
12837: PPUSH
12838: LD_VAR 0 1
12842: PPUSH
12843: CALL_OW 12
12847: ARRAY
12848: PPUSH
12849: LD_INT 1
12851: PPUSH
12852: LD_INT 4
12854: PPUSH
12855: CALL_OW 12
12859: PPUSH
12860: LD_INT 3000
12862: PPUSH
12863: LD_INT 9000
12865: PPUSH
12866: CALL_OW 12
12870: PPUSH
12871: CALL_OW 492
// end ;
12875: PPOPN 1
12877: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12878: LD_EXP 27
12882: PUSH
12883: LD_EXP 42
12887: AND
12888: IFFALSE 12908
12890: GO 12892
12892: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12893: LD_INT 1
12895: PPUSH
12896: LD_OWVAR 2
12900: PPUSH
12901: LD_INT 0
12903: PPUSH
12904: CALL_OW 324
12908: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12909: LD_EXP 27
12913: PUSH
12914: LD_EXP 43
12918: AND
12919: IFFALSE 13002
12921: GO 12923
12923: DISABLE
12924: LD_INT 0
12926: PPUSH
12927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12928: LD_ADDR_VAR 0 2
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_OWVAR 2
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 21
12947: PUSH
12948: LD_INT 3
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PPUSH
12959: CALL_OW 69
12963: ST_TO_ADDR
// if not tmp then
12964: LD_VAR 0 2
12968: NOT
12969: IFFALSE 12973
// exit ;
12971: GO 13002
// for i in tmp do
12973: LD_ADDR_VAR 0 1
12977: PUSH
12978: LD_VAR 0 2
12982: PUSH
12983: FOR_IN
12984: IFFALSE 13000
// SetBLevel ( i , 10 ) ;
12986: LD_VAR 0 1
12990: PPUSH
12991: LD_INT 10
12993: PPUSH
12994: CALL_OW 241
12998: GO 12983
13000: POP
13001: POP
// end ;
13002: PPOPN 2
13004: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13005: LD_EXP 27
13009: PUSH
13010: LD_EXP 44
13014: AND
13015: IFFALSE 13126
13017: GO 13019
13019: DISABLE
13020: LD_INT 0
13022: PPUSH
13023: PPUSH
13024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13025: LD_ADDR_VAR 0 3
13029: PUSH
13030: LD_INT 22
13032: PUSH
13033: LD_OWVAR 2
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 25
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PPUSH
13056: CALL_OW 69
13060: ST_TO_ADDR
// if not tmp then
13061: LD_VAR 0 3
13065: NOT
13066: IFFALSE 13070
// exit ;
13068: GO 13126
// un := tmp [ rand ( 1 , tmp ) ] ;
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: LD_VAR 0 3
13079: PUSH
13080: LD_INT 1
13082: PPUSH
13083: LD_VAR 0 3
13087: PPUSH
13088: CALL_OW 12
13092: ARRAY
13093: ST_TO_ADDR
// if Crawls ( un ) then
13094: LD_VAR 0 2
13098: PPUSH
13099: CALL_OW 318
13103: IFFALSE 13114
// ComWalk ( un ) ;
13105: LD_VAR 0 2
13109: PPUSH
13110: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13114: LD_VAR 0 2
13118: PPUSH
13119: LD_INT 5
13121: PPUSH
13122: CALL_OW 336
// end ;
13126: PPOPN 3
13128: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13129: LD_EXP 27
13133: PUSH
13134: LD_EXP 45
13138: AND
13139: PUSH
13140: LD_OWVAR 67
13144: PUSH
13145: LD_INT 3
13147: LESS
13148: AND
13149: IFFALSE 13168
13151: GO 13153
13153: DISABLE
// Difficulty := Difficulty + 1 ;
13154: LD_ADDR_OWVAR 67
13158: PUSH
13159: LD_OWVAR 67
13163: PUSH
13164: LD_INT 1
13166: PLUS
13167: ST_TO_ADDR
13168: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13169: LD_EXP 27
13173: PUSH
13174: LD_EXP 46
13178: AND
13179: IFFALSE 13282
13181: GO 13183
13183: DISABLE
13184: LD_INT 0
13186: PPUSH
// begin for i := 1 to 5 do
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: DOUBLE
13193: LD_INT 1
13195: DEC
13196: ST_TO_ADDR
13197: LD_INT 5
13199: PUSH
13200: FOR_TO
13201: IFFALSE 13280
// begin uc_nation := nation_nature ;
13203: LD_ADDR_OWVAR 21
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// uc_side := 0 ;
13211: LD_ADDR_OWVAR 20
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13219: LD_ADDR_OWVAR 29
13223: PUSH
13224: LD_INT 12
13226: PUSH
13227: LD_INT 12
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: ST_TO_ADDR
// hc_agressivity := 20 ;
13234: LD_ADDR_OWVAR 35
13238: PUSH
13239: LD_INT 20
13241: ST_TO_ADDR
// hc_class := class_tiger ;
13242: LD_ADDR_OWVAR 28
13246: PUSH
13247: LD_INT 14
13249: ST_TO_ADDR
// hc_gallery :=  ;
13250: LD_ADDR_OWVAR 33
13254: PUSH
13255: LD_STRING 
13257: ST_TO_ADDR
// hc_name :=  ;
13258: LD_ADDR_OWVAR 26
13262: PUSH
13263: LD_STRING 
13265: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13266: CALL_OW 44
13270: PPUSH
13271: LD_INT 0
13273: PPUSH
13274: CALL_OW 51
// end ;
13278: GO 13200
13280: POP
13281: POP
// end ;
13282: PPOPN 1
13284: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13285: LD_EXP 27
13289: PUSH
13290: LD_EXP 47
13294: AND
13295: IFFALSE 13304
13297: GO 13299
13299: DISABLE
// StreamSibBomb ;
13300: CALL 13305 0 0
13304: END
// export function StreamSibBomb ; var i , x , y ; begin
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
13309: PPUSH
13310: PPUSH
// result := false ;
13311: LD_ADDR_VAR 0 1
13315: PUSH
13316: LD_INT 0
13318: ST_TO_ADDR
// for i := 1 to 16 do
13319: LD_ADDR_VAR 0 2
13323: PUSH
13324: DOUBLE
13325: LD_INT 1
13327: DEC
13328: ST_TO_ADDR
13329: LD_INT 16
13331: PUSH
13332: FOR_TO
13333: IFFALSE 13532
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13335: LD_ADDR_VAR 0 3
13339: PUSH
13340: LD_INT 10
13342: PUSH
13343: LD_INT 20
13345: PUSH
13346: LD_INT 30
13348: PUSH
13349: LD_INT 40
13351: PUSH
13352: LD_INT 50
13354: PUSH
13355: LD_INT 60
13357: PUSH
13358: LD_INT 70
13360: PUSH
13361: LD_INT 80
13363: PUSH
13364: LD_INT 90
13366: PUSH
13367: LD_INT 100
13369: PUSH
13370: LD_INT 110
13372: PUSH
13373: LD_INT 120
13375: PUSH
13376: LD_INT 130
13378: PUSH
13379: LD_INT 140
13381: PUSH
13382: LD_INT 150
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 1
13404: PPUSH
13405: LD_INT 15
13407: PPUSH
13408: CALL_OW 12
13412: ARRAY
13413: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13414: LD_ADDR_VAR 0 4
13418: PUSH
13419: LD_INT 10
13421: PUSH
13422: LD_INT 20
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 40
13430: PUSH
13431: LD_INT 50
13433: PUSH
13434: LD_INT 60
13436: PUSH
13437: LD_INT 70
13439: PUSH
13440: LD_INT 80
13442: PUSH
13443: LD_INT 90
13445: PUSH
13446: LD_INT 100
13448: PUSH
13449: LD_INT 110
13451: PUSH
13452: LD_INT 120
13454: PUSH
13455: LD_INT 130
13457: PUSH
13458: LD_INT 140
13460: PUSH
13461: LD_INT 150
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 1
13483: PPUSH
13484: LD_INT 15
13486: PPUSH
13487: CALL_OW 12
13491: ARRAY
13492: ST_TO_ADDR
// if ValidHex ( x , y ) then
13493: LD_VAR 0 3
13497: PPUSH
13498: LD_VAR 0 4
13502: PPUSH
13503: CALL_OW 488
13507: IFFALSE 13530
// begin result := [ x , y ] ;
13509: LD_ADDR_VAR 0 1
13513: PUSH
13514: LD_VAR 0 3
13518: PUSH
13519: LD_VAR 0 4
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: ST_TO_ADDR
// break ;
13528: GO 13532
// end ; end ;
13530: GO 13332
13532: POP
13533: POP
// if result then
13534: LD_VAR 0 1
13538: IFFALSE 13598
// begin ToLua ( playSibBomb() ) ;
13540: LD_STRING playSibBomb()
13542: PPUSH
13543: CALL_OW 559
// wait ( 0 0$14 ) ;
13547: LD_INT 490
13549: PPUSH
13550: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13554: LD_VAR 0 1
13558: PUSH
13559: LD_INT 1
13561: ARRAY
13562: PPUSH
13563: LD_VAR 0 1
13567: PUSH
13568: LD_INT 2
13570: ARRAY
13571: PPUSH
13572: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 1
13583: ARRAY
13584: PPUSH
13585: LD_VAR 0 1
13589: PUSH
13590: LD_INT 2
13592: ARRAY
13593: PPUSH
13594: CALL_OW 429
// end ; end ;
13598: LD_VAR 0 1
13602: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13603: LD_EXP 27
13607: PUSH
13608: LD_EXP 49
13612: AND
13613: IFFALSE 13625
13615: GO 13617
13617: DISABLE
// YouLost (  ) ;
13618: LD_STRING 
13620: PPUSH
13621: CALL_OW 104
13625: END
// every 0 0$1 trigger StreamModeActive and sFog do
13626: LD_EXP 27
13630: PUSH
13631: LD_EXP 48
13635: AND
13636: IFFALSE 13650
13638: GO 13640
13640: DISABLE
// FogOff ( your_side ) ;
13641: LD_OWVAR 2
13645: PPUSH
13646: CALL_OW 344
13650: END
// every 0 0$1 trigger StreamModeActive and sSun do
13651: LD_EXP 27
13655: PUSH
13656: LD_EXP 50
13660: AND
13661: IFFALSE 13689
13663: GO 13665
13665: DISABLE
// begin solar_recharge_percent := 0 ;
13666: LD_ADDR_OWVAR 79
13670: PUSH
13671: LD_INT 0
13673: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13674: LD_INT 10500
13676: PPUSH
13677: CALL_OW 67
// solar_recharge_percent := 100 ;
13681: LD_ADDR_OWVAR 79
13685: PUSH
13686: LD_INT 100
13688: ST_TO_ADDR
// end ;
13689: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13690: LD_EXP 27
13694: PUSH
13695: LD_EXP 51
13699: AND
13700: IFFALSE 13939
13702: GO 13704
13704: DISABLE
13705: LD_INT 0
13707: PPUSH
13708: PPUSH
13709: PPUSH
// begin tmp := [ ] ;
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: EMPTY
13716: ST_TO_ADDR
// for i := 1 to 6 do
13717: LD_ADDR_VAR 0 1
13721: PUSH
13722: DOUBLE
13723: LD_INT 1
13725: DEC
13726: ST_TO_ADDR
13727: LD_INT 6
13729: PUSH
13730: FOR_TO
13731: IFFALSE 13836
// begin uc_nation := nation_nature ;
13733: LD_ADDR_OWVAR 21
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// uc_side := 0 ;
13741: LD_ADDR_OWVAR 20
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13749: LD_ADDR_OWVAR 29
13753: PUSH
13754: LD_INT 12
13756: PUSH
13757: LD_INT 12
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: ST_TO_ADDR
// hc_agressivity := 20 ;
13764: LD_ADDR_OWVAR 35
13768: PUSH
13769: LD_INT 20
13771: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13772: LD_ADDR_OWVAR 28
13776: PUSH
13777: LD_INT 17
13779: ST_TO_ADDR
// hc_gallery :=  ;
13780: LD_ADDR_OWVAR 33
13784: PUSH
13785: LD_STRING 
13787: ST_TO_ADDR
// hc_name :=  ;
13788: LD_ADDR_OWVAR 26
13792: PUSH
13793: LD_STRING 
13795: ST_TO_ADDR
// un := CreateHuman ;
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: CALL_OW 44
13805: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 51
// tmp := tmp ^ un ;
13818: LD_ADDR_VAR 0 3
13822: PUSH
13823: LD_VAR 0 3
13827: PUSH
13828: LD_VAR 0 2
13832: ADD
13833: ST_TO_ADDR
// end ;
13834: GO 13730
13836: POP
13837: POP
// repeat wait ( 0 0$1 ) ;
13838: LD_INT 35
13840: PPUSH
13841: CALL_OW 67
// for un in tmp do
13845: LD_ADDR_VAR 0 2
13849: PUSH
13850: LD_VAR 0 3
13854: PUSH
13855: FOR_IN
13856: IFFALSE 13930
// begin if IsDead ( un ) then
13858: LD_VAR 0 2
13862: PPUSH
13863: CALL_OW 301
13867: IFFALSE 13887
// begin tmp := tmp diff un ;
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: LD_VAR 0 3
13878: PUSH
13879: LD_VAR 0 2
13883: DIFF
13884: ST_TO_ADDR
// continue ;
13885: GO 13855
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13887: LD_VAR 0 2
13891: PPUSH
13892: LD_INT 3
13894: PUSH
13895: LD_INT 22
13897: PUSH
13898: LD_INT 0
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: LD_VAR 0 2
13918: PPUSH
13919: CALL_OW 74
13923: PPUSH
13924: CALL_OW 115
// end ;
13928: GO 13855
13930: POP
13931: POP
// until not tmp ;
13932: LD_VAR 0 3
13936: NOT
13937: IFFALSE 13838
// end ;
13939: PPOPN 3
13941: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13942: LD_EXP 27
13946: PUSH
13947: LD_EXP 52
13951: AND
13952: IFFALSE 14006
13954: GO 13956
13956: DISABLE
// begin ToLua ( displayTroll(); ) ;
13957: LD_STRING displayTroll();
13959: PPUSH
13960: CALL_OW 559
// wait ( 3 3$00 ) ;
13964: LD_INT 6300
13966: PPUSH
13967: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13971: LD_STRING hideTroll();
13973: PPUSH
13974: CALL_OW 559
// wait ( 1 1$00 ) ;
13978: LD_INT 2100
13980: PPUSH
13981: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13985: LD_STRING displayTroll();
13987: PPUSH
13988: CALL_OW 559
// wait ( 1 1$00 ) ;
13992: LD_INT 2100
13994: PPUSH
13995: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13999: LD_STRING hideTroll();
14001: PPUSH
14002: CALL_OW 559
// end ;
14006: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14007: LD_EXP 27
14011: PUSH
14012: LD_EXP 53
14016: AND
14017: IFFALSE 14080
14019: GO 14021
14021: DISABLE
14022: LD_INT 0
14024: PPUSH
// begin p := 0 ;
14025: LD_ADDR_VAR 0 1
14029: PUSH
14030: LD_INT 0
14032: ST_TO_ADDR
// repeat game_speed := 1 ;
14033: LD_ADDR_OWVAR 65
14037: PUSH
14038: LD_INT 1
14040: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14041: LD_INT 35
14043: PPUSH
14044: CALL_OW 67
// p := p + 1 ;
14048: LD_ADDR_VAR 0 1
14052: PUSH
14053: LD_VAR 0 1
14057: PUSH
14058: LD_INT 1
14060: PLUS
14061: ST_TO_ADDR
// until p >= 60 ;
14062: LD_VAR 0 1
14066: PUSH
14067: LD_INT 60
14069: GREATEREQUAL
14070: IFFALSE 14033
// game_speed := 4 ;
14072: LD_ADDR_OWVAR 65
14076: PUSH
14077: LD_INT 4
14079: ST_TO_ADDR
// end ;
14080: PPOPN 1
14082: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14083: LD_EXP 27
14087: PUSH
14088: LD_EXP 54
14092: AND
14093: IFFALSE 14239
14095: GO 14097
14097: DISABLE
14098: LD_INT 0
14100: PPUSH
14101: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14102: LD_ADDR_VAR 0 1
14106: PUSH
14107: LD_INT 22
14109: PUSH
14110: LD_OWVAR 2
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 2
14121: PUSH
14122: LD_INT 30
14124: PUSH
14125: LD_INT 0
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 30
14134: PUSH
14135: LD_INT 1
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: ST_TO_ADDR
// if not depot then
14156: LD_VAR 0 1
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14239
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14165: LD_ADDR_VAR 0 2
14169: PUSH
14170: LD_VAR 0 1
14174: PUSH
14175: LD_INT 1
14177: PPUSH
14178: LD_VAR 0 1
14182: PPUSH
14183: CALL_OW 12
14187: ARRAY
14188: PPUSH
14189: CALL_OW 274
14193: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: LD_INT 0
14204: PPUSH
14205: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14209: LD_VAR 0 2
14213: PPUSH
14214: LD_INT 2
14216: PPUSH
14217: LD_INT 0
14219: PPUSH
14220: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14224: LD_VAR 0 2
14228: PPUSH
14229: LD_INT 3
14231: PPUSH
14232: LD_INT 0
14234: PPUSH
14235: CALL_OW 277
// end ;
14239: PPOPN 2
14241: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14242: LD_EXP 27
14246: PUSH
14247: LD_EXP 55
14251: AND
14252: IFFALSE 14349
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14260: LD_ADDR_VAR 0 1
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_OWVAR 2
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 3
14289: PUSH
14290: LD_INT 23
14292: PUSH
14293: LD_INT 0
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: ST_TO_ADDR
// if not tmp then
14314: LD_VAR 0 1
14318: NOT
14319: IFFALSE 14323
// exit ;
14321: GO 14349
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14323: LD_VAR 0 1
14327: PUSH
14328: LD_INT 1
14330: PPUSH
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 12
14340: ARRAY
14341: PPUSH
14342: LD_INT 200
14344: PPUSH
14345: CALL_OW 234
// end ;
14349: PPOPN 1
14351: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14352: LD_EXP 27
14356: PUSH
14357: LD_EXP 56
14361: AND
14362: IFFALSE 14441
14364: GO 14366
14366: DISABLE
14367: LD_INT 0
14369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14370: LD_ADDR_VAR 0 1
14374: PUSH
14375: LD_INT 22
14377: PUSH
14378: LD_OWVAR 2
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 21
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PPUSH
14401: CALL_OW 69
14405: ST_TO_ADDR
// if not tmp then
14406: LD_VAR 0 1
14410: NOT
14411: IFFALSE 14415
// exit ;
14413: GO 14441
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14415: LD_VAR 0 1
14419: PUSH
14420: LD_INT 1
14422: PPUSH
14423: LD_VAR 0 1
14427: PPUSH
14428: CALL_OW 12
14432: ARRAY
14433: PPUSH
14434: LD_INT 60
14436: PPUSH
14437: CALL_OW 234
// end ;
14441: PPOPN 1
14443: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14444: LD_EXP 27
14448: PUSH
14449: LD_EXP 57
14453: AND
14454: IFFALSE 14553
14456: GO 14458
14458: DISABLE
14459: LD_INT 0
14461: PPUSH
14462: PPUSH
// begin enable ;
14463: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14464: LD_ADDR_VAR 0 1
14468: PUSH
14469: LD_INT 22
14471: PUSH
14472: LD_OWVAR 2
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 61
14483: PUSH
14484: EMPTY
14485: LIST
14486: PUSH
14487: LD_INT 33
14489: PUSH
14490: LD_INT 2
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL_OW 69
14506: ST_TO_ADDR
// if not tmp then
14507: LD_VAR 0 1
14511: NOT
14512: IFFALSE 14516
// exit ;
14514: GO 14553
// for i in tmp do
14516: LD_ADDR_VAR 0 2
14520: PUSH
14521: LD_VAR 0 1
14525: PUSH
14526: FOR_IN
14527: IFFALSE 14551
// if IsControledBy ( i ) then
14529: LD_VAR 0 2
14533: PPUSH
14534: CALL_OW 312
14538: IFFALSE 14549
// ComUnlink ( i ) ;
14540: LD_VAR 0 2
14544: PPUSH
14545: CALL_OW 136
14549: GO 14526
14551: POP
14552: POP
// end ;
14553: PPOPN 2
14555: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14556: LD_EXP 27
14560: PUSH
14561: LD_EXP 58
14565: AND
14566: IFFALSE 14706
14568: GO 14570
14570: DISABLE
14571: LD_INT 0
14573: PPUSH
14574: PPUSH
// begin ToLua ( displayPowell(); ) ;
14575: LD_STRING displayPowell();
14577: PPUSH
14578: CALL_OW 559
// uc_side := 0 ;
14582: LD_ADDR_OWVAR 20
14586: PUSH
14587: LD_INT 0
14589: ST_TO_ADDR
// uc_nation := 2 ;
14590: LD_ADDR_OWVAR 21
14594: PUSH
14595: LD_INT 2
14597: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14598: LD_ADDR_OWVAR 37
14602: PUSH
14603: LD_INT 14
14605: ST_TO_ADDR
// vc_engine := engine_siberite ;
14606: LD_ADDR_OWVAR 39
14610: PUSH
14611: LD_INT 3
14613: ST_TO_ADDR
// vc_control := control_apeman ;
14614: LD_ADDR_OWVAR 38
14618: PUSH
14619: LD_INT 5
14621: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14622: LD_ADDR_OWVAR 40
14626: PUSH
14627: LD_INT 29
14629: ST_TO_ADDR
// un := CreateVehicle ;
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: CALL_OW 45
14639: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14640: LD_VAR 0 2
14644: PPUSH
14645: LD_INT 1
14647: PPUSH
14648: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14652: LD_INT 35
14654: PPUSH
14655: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14659: LD_VAR 0 2
14663: PPUSH
14664: LD_INT 22
14666: PUSH
14667: LD_OWVAR 2
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PPUSH
14676: CALL_OW 69
14680: PPUSH
14681: LD_VAR 0 2
14685: PPUSH
14686: CALL_OW 74
14690: PPUSH
14691: CALL_OW 115
// until IsDead ( un ) ;
14695: LD_VAR 0 2
14699: PPUSH
14700: CALL_OW 301
14704: IFFALSE 14652
// end ;
14706: PPOPN 2
14708: END
// every 0 0$1 trigger StreamModeActive and sStu do
14709: LD_EXP 27
14713: PUSH
14714: LD_EXP 66
14718: AND
14719: IFFALSE 14735
14721: GO 14723
14723: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14724: LD_STRING displayStucuk();
14726: PPUSH
14727: CALL_OW 559
// ResetFog ;
14731: CALL_OW 335
// end ;
14735: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14736: LD_EXP 27
14740: PUSH
14741: LD_EXP 59
14745: AND
14746: IFFALSE 14887
14748: GO 14750
14750: DISABLE
14751: LD_INT 0
14753: PPUSH
14754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14755: LD_ADDR_VAR 0 2
14759: PUSH
14760: LD_INT 22
14762: PUSH
14763: LD_OWVAR 2
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 21
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: ST_TO_ADDR
// if not tmp then
14791: LD_VAR 0 2
14795: NOT
14796: IFFALSE 14800
// exit ;
14798: GO 14887
// un := tmp [ rand ( 1 , tmp ) ] ;
14800: LD_ADDR_VAR 0 1
14804: PUSH
14805: LD_VAR 0 2
14809: PUSH
14810: LD_INT 1
14812: PPUSH
14813: LD_VAR 0 2
14817: PPUSH
14818: CALL_OW 12
14822: ARRAY
14823: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14824: LD_VAR 0 1
14828: PPUSH
14829: LD_INT 0
14831: PPUSH
14832: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: LD_OWVAR 3
14845: PUSH
14846: LD_VAR 0 1
14850: DIFF
14851: PPUSH
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 74
14861: PPUSH
14862: CALL_OW 115
// wait ( 0 0$20 ) ;
14866: LD_INT 700
14868: PPUSH
14869: CALL_OW 67
// SetSide ( un , your_side ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_OWVAR 2
14882: PPUSH
14883: CALL_OW 235
// end ;
14887: PPOPN 2
14889: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14890: LD_EXP 27
14894: PUSH
14895: LD_EXP 60
14899: AND
14900: IFFALSE 15006
14902: GO 14904
14904: DISABLE
14905: LD_INT 0
14907: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14908: LD_ADDR_VAR 0 1
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_OWVAR 2
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: LD_INT 30
14930: PUSH
14931: LD_INT 0
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 30
14940: PUSH
14941: LD_INT 1
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PPUSH
14957: CALL_OW 69
14961: ST_TO_ADDR
// if not depot then
14962: LD_VAR 0 1
14966: NOT
14967: IFFALSE 14971
// exit ;
14969: GO 15006
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14971: LD_VAR 0 1
14975: PUSH
14976: LD_INT 1
14978: ARRAY
14979: PPUSH
14980: CALL_OW 250
14984: PPUSH
14985: LD_VAR 0 1
14989: PUSH
14990: LD_INT 1
14992: ARRAY
14993: PPUSH
14994: CALL_OW 251
14998: PPUSH
14999: LD_INT 70
15001: PPUSH
15002: CALL_OW 495
// end ;
15006: PPOPN 1
15008: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15009: LD_EXP 27
15013: PUSH
15014: LD_EXP 61
15018: AND
15019: IFFALSE 15230
15021: GO 15023
15023: DISABLE
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
15030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15031: LD_ADDR_VAR 0 5
15035: PUSH
15036: LD_INT 22
15038: PUSH
15039: LD_OWVAR 2
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 21
15050: PUSH
15051: LD_INT 1
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PPUSH
15062: CALL_OW 69
15066: ST_TO_ADDR
// if not tmp then
15067: LD_VAR 0 5
15071: NOT
15072: IFFALSE 15076
// exit ;
15074: GO 15230
// for i in tmp do
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_VAR 0 5
15085: PUSH
15086: FOR_IN
15087: IFFALSE 15228
// begin d := rand ( 0 , 5 ) ;
15089: LD_ADDR_VAR 0 4
15093: PUSH
15094: LD_INT 0
15096: PPUSH
15097: LD_INT 5
15099: PPUSH
15100: CALL_OW 12
15104: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15105: LD_ADDR_VAR 0 2
15109: PUSH
15110: LD_VAR 0 1
15114: PPUSH
15115: CALL_OW 250
15119: PPUSH
15120: LD_VAR 0 4
15124: PPUSH
15125: LD_INT 3
15127: PPUSH
15128: LD_INT 12
15130: PPUSH
15131: CALL_OW 12
15135: PPUSH
15136: CALL_OW 272
15140: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15141: LD_ADDR_VAR 0 3
15145: PUSH
15146: LD_VAR 0 1
15150: PPUSH
15151: CALL_OW 251
15155: PPUSH
15156: LD_VAR 0 4
15160: PPUSH
15161: LD_INT 3
15163: PPUSH
15164: LD_INT 12
15166: PPUSH
15167: CALL_OW 12
15171: PPUSH
15172: CALL_OW 273
15176: ST_TO_ADDR
// if ValidHex ( x , y ) then
15177: LD_VAR 0 2
15181: PPUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: CALL_OW 488
15191: IFFALSE 15226
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15193: LD_VAR 0 1
15197: PPUSH
15198: LD_VAR 0 2
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_INT 3
15210: PPUSH
15211: LD_INT 6
15213: PPUSH
15214: CALL_OW 12
15218: PPUSH
15219: LD_INT 1
15221: PPUSH
15222: CALL_OW 483
// end ;
15226: GO 15086
15228: POP
15229: POP
// end ;
15230: PPOPN 5
15232: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15233: LD_EXP 27
15237: PUSH
15238: LD_EXP 62
15242: AND
15243: IFFALSE 15337
15245: GO 15247
15247: DISABLE
15248: LD_INT 0
15250: PPUSH
15251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15252: LD_ADDR_VAR 0 2
15256: PUSH
15257: LD_INT 22
15259: PUSH
15260: LD_OWVAR 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 32
15271: PUSH
15272: LD_INT 1
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 21
15281: PUSH
15282: LD_INT 2
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: ST_TO_ADDR
// if not tmp then
15299: LD_VAR 0 2
15303: NOT
15304: IFFALSE 15308
// exit ;
15306: GO 15337
// for i in tmp do
15308: LD_ADDR_VAR 0 1
15312: PUSH
15313: LD_VAR 0 2
15317: PUSH
15318: FOR_IN
15319: IFFALSE 15335
// SetFuel ( i , 0 ) ;
15321: LD_VAR 0 1
15325: PPUSH
15326: LD_INT 0
15328: PPUSH
15329: CALL_OW 240
15333: GO 15318
15335: POP
15336: POP
// end ;
15337: PPOPN 2
15339: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15340: LD_EXP 27
15344: PUSH
15345: LD_EXP 63
15349: AND
15350: IFFALSE 15416
15352: GO 15354
15354: DISABLE
15355: LD_INT 0
15357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15358: LD_ADDR_VAR 0 1
15362: PUSH
15363: LD_INT 22
15365: PUSH
15366: LD_OWVAR 2
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 30
15377: PUSH
15378: LD_INT 29
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PPUSH
15389: CALL_OW 69
15393: ST_TO_ADDR
// if not tmp then
15394: LD_VAR 0 1
15398: NOT
15399: IFFALSE 15403
// exit ;
15401: GO 15416
// DestroyUnit ( tmp [ 1 ] ) ;
15403: LD_VAR 0 1
15407: PUSH
15408: LD_INT 1
15410: ARRAY
15411: PPUSH
15412: CALL_OW 65
// end ;
15416: PPOPN 1
15418: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15419: LD_EXP 27
15423: PUSH
15424: LD_EXP 65
15428: AND
15429: IFFALSE 15558
15431: GO 15433
15433: DISABLE
15434: LD_INT 0
15436: PPUSH
// begin uc_side := 0 ;
15437: LD_ADDR_OWVAR 20
15441: PUSH
15442: LD_INT 0
15444: ST_TO_ADDR
// uc_nation := nation_arabian ;
15445: LD_ADDR_OWVAR 21
15449: PUSH
15450: LD_INT 2
15452: ST_TO_ADDR
// hc_gallery :=  ;
15453: LD_ADDR_OWVAR 33
15457: PUSH
15458: LD_STRING 
15460: ST_TO_ADDR
// hc_name :=  ;
15461: LD_ADDR_OWVAR 26
15465: PUSH
15466: LD_STRING 
15468: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15469: LD_INT 1
15471: PPUSH
15472: LD_INT 11
15474: PPUSH
15475: LD_INT 10
15477: PPUSH
15478: CALL_OW 380
// un := CreateHuman ;
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: CALL_OW 44
15491: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15492: LD_VAR 0 1
15496: PPUSH
15497: LD_INT 1
15499: PPUSH
15500: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15504: LD_INT 35
15506: PPUSH
15507: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15511: LD_VAR 0 1
15515: PPUSH
15516: LD_INT 22
15518: PUSH
15519: LD_OWVAR 2
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 69
15532: PPUSH
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 74
15542: PPUSH
15543: CALL_OW 115
// until IsDead ( un ) ;
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 301
15556: IFFALSE 15504
// end ;
15558: PPOPN 1
15560: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15561: LD_EXP 27
15565: PUSH
15566: LD_EXP 67
15570: AND
15571: IFFALSE 15583
15573: GO 15575
15575: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15576: LD_STRING earthquake(getX(game), 0, 32)
15578: PPUSH
15579: CALL_OW 559
15583: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15584: LD_EXP 27
15588: PUSH
15589: LD_EXP 68
15593: AND
15594: IFFALSE 15685
15596: GO 15598
15598: DISABLE
15599: LD_INT 0
15601: PPUSH
// begin enable ;
15602: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15603: LD_ADDR_VAR 0 1
15607: PUSH
15608: LD_INT 22
15610: PUSH
15611: LD_OWVAR 2
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 21
15622: PUSH
15623: LD_INT 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 33
15632: PUSH
15633: LD_INT 3
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 69
15649: ST_TO_ADDR
// if not tmp then
15650: LD_VAR 0 1
15654: NOT
15655: IFFALSE 15659
// exit ;
15657: GO 15685
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15659: LD_VAR 0 1
15663: PUSH
15664: LD_INT 1
15666: PPUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 12
15676: ARRAY
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: CALL_OW 234
// end ;
15685: PPOPN 1
15687: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15688: LD_EXP 27
15692: PUSH
15693: LD_EXP 69
15697: AND
15698: IFFALSE 15839
15700: GO 15702
15702: DISABLE
15703: LD_INT 0
15705: PPUSH
15706: PPUSH
15707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15708: LD_ADDR_VAR 0 3
15712: PUSH
15713: LD_INT 22
15715: PUSH
15716: LD_OWVAR 2
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 25
15727: PUSH
15728: LD_INT 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PPUSH
15739: CALL_OW 69
15743: ST_TO_ADDR
// if not tmp then
15744: LD_VAR 0 3
15748: NOT
15749: IFFALSE 15753
// exit ;
15751: GO 15839
// un := tmp [ rand ( 1 , tmp ) ] ;
15753: LD_ADDR_VAR 0 2
15757: PUSH
15758: LD_VAR 0 3
15762: PUSH
15763: LD_INT 1
15765: PPUSH
15766: LD_VAR 0 3
15770: PPUSH
15771: CALL_OW 12
15775: ARRAY
15776: ST_TO_ADDR
// if Crawls ( un ) then
15777: LD_VAR 0 2
15781: PPUSH
15782: CALL_OW 318
15786: IFFALSE 15797
// ComWalk ( un ) ;
15788: LD_VAR 0 2
15792: PPUSH
15793: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15797: LD_VAR 0 2
15801: PPUSH
15802: LD_INT 9
15804: PPUSH
15805: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15809: LD_INT 28
15811: PPUSH
15812: LD_OWVAR 2
15816: PPUSH
15817: LD_INT 2
15819: PPUSH
15820: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15824: LD_INT 29
15826: PPUSH
15827: LD_OWVAR 2
15831: PPUSH
15832: LD_INT 2
15834: PPUSH
15835: CALL_OW 322
// end ;
15839: PPOPN 3
15841: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15842: LD_EXP 27
15846: PUSH
15847: LD_EXP 70
15851: AND
15852: IFFALSE 15963
15854: GO 15856
15856: DISABLE
15857: LD_INT 0
15859: PPUSH
15860: PPUSH
15861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15862: LD_ADDR_VAR 0 3
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_OWVAR 2
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 25
15881: PUSH
15882: LD_INT 1
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PPUSH
15893: CALL_OW 69
15897: ST_TO_ADDR
// if not tmp then
15898: LD_VAR 0 3
15902: NOT
15903: IFFALSE 15907
// exit ;
15905: GO 15963
// un := tmp [ rand ( 1 , tmp ) ] ;
15907: LD_ADDR_VAR 0 2
15911: PUSH
15912: LD_VAR 0 3
15916: PUSH
15917: LD_INT 1
15919: PPUSH
15920: LD_VAR 0 3
15924: PPUSH
15925: CALL_OW 12
15929: ARRAY
15930: ST_TO_ADDR
// if Crawls ( un ) then
15931: LD_VAR 0 2
15935: PPUSH
15936: CALL_OW 318
15940: IFFALSE 15951
// ComWalk ( un ) ;
15942: LD_VAR 0 2
15946: PPUSH
15947: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15951: LD_VAR 0 2
15955: PPUSH
15956: LD_INT 8
15958: PPUSH
15959: CALL_OW 336
// end ;
15963: PPOPN 3
15965: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15966: LD_EXP 27
15970: PUSH
15971: LD_EXP 71
15975: AND
15976: IFFALSE 16120
15978: GO 15980
15980: DISABLE
15981: LD_INT 0
15983: PPUSH
15984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15985: LD_ADDR_VAR 0 2
15989: PUSH
15990: LD_INT 22
15992: PUSH
15993: LD_OWVAR 2
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 21
16004: PUSH
16005: LD_INT 2
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 2
16014: PUSH
16015: LD_INT 34
16017: PUSH
16018: LD_INT 12
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 34
16027: PUSH
16028: LD_INT 51
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 34
16037: PUSH
16038: LD_INT 32
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: PPUSH
16056: CALL_OW 69
16060: ST_TO_ADDR
// if not tmp then
16061: LD_VAR 0 2
16065: NOT
16066: IFFALSE 16070
// exit ;
16068: GO 16120
// for i in tmp do
16070: LD_ADDR_VAR 0 1
16074: PUSH
16075: LD_VAR 0 2
16079: PUSH
16080: FOR_IN
16081: IFFALSE 16118
// if GetCargo ( i , mat_artifact ) = 0 then
16083: LD_VAR 0 1
16087: PPUSH
16088: LD_INT 4
16090: PPUSH
16091: CALL_OW 289
16095: PUSH
16096: LD_INT 0
16098: EQUAL
16099: IFFALSE 16116
// SetCargo ( i , mat_siberit , 100 ) ;
16101: LD_VAR 0 1
16105: PPUSH
16106: LD_INT 3
16108: PPUSH
16109: LD_INT 100
16111: PPUSH
16112: CALL_OW 290
16116: GO 16080
16118: POP
16119: POP
// end ;
16120: PPOPN 2
16122: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16123: LD_EXP 27
16127: PUSH
16128: LD_EXP 72
16132: AND
16133: IFFALSE 16316
16135: GO 16137
16137: DISABLE
16138: LD_INT 0
16140: PPUSH
16141: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_OWVAR 2
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 69
16163: ST_TO_ADDR
// if not tmp then
16164: LD_VAR 0 2
16168: NOT
16169: IFFALSE 16173
// exit ;
16171: GO 16316
// for i := 1 to 2 do
16173: LD_ADDR_VAR 0 1
16177: PUSH
16178: DOUBLE
16179: LD_INT 1
16181: DEC
16182: ST_TO_ADDR
16183: LD_INT 2
16185: PUSH
16186: FOR_TO
16187: IFFALSE 16314
// begin uc_side := your_side ;
16189: LD_ADDR_OWVAR 20
16193: PUSH
16194: LD_OWVAR 2
16198: ST_TO_ADDR
// uc_nation := nation_american ;
16199: LD_ADDR_OWVAR 21
16203: PUSH
16204: LD_INT 1
16206: ST_TO_ADDR
// vc_chassis := us_morphling ;
16207: LD_ADDR_OWVAR 37
16211: PUSH
16212: LD_INT 5
16214: ST_TO_ADDR
// vc_engine := engine_siberite ;
16215: LD_ADDR_OWVAR 39
16219: PUSH
16220: LD_INT 3
16222: ST_TO_ADDR
// vc_control := control_computer ;
16223: LD_ADDR_OWVAR 38
16227: PUSH
16228: LD_INT 3
16230: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16231: LD_ADDR_OWVAR 40
16235: PUSH
16236: LD_INT 10
16238: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16239: LD_VAR 0 2
16243: PUSH
16244: LD_INT 1
16246: ARRAY
16247: PPUSH
16248: CALL_OW 310
16252: NOT
16253: IFFALSE 16300
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16255: CALL_OW 45
16259: PPUSH
16260: LD_VAR 0 2
16264: PUSH
16265: LD_INT 1
16267: ARRAY
16268: PPUSH
16269: CALL_OW 250
16273: PPUSH
16274: LD_VAR 0 2
16278: PUSH
16279: LD_INT 1
16281: ARRAY
16282: PPUSH
16283: CALL_OW 251
16287: PPUSH
16288: LD_INT 12
16290: PPUSH
16291: LD_INT 1
16293: PPUSH
16294: CALL_OW 50
16298: GO 16312
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16300: CALL_OW 45
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: CALL_OW 51
// end ;
16312: GO 16186
16314: POP
16315: POP
// end ;
16316: PPOPN 2
16318: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16319: LD_EXP 27
16323: PUSH
16324: LD_EXP 73
16328: AND
16329: IFFALSE 16551
16331: GO 16333
16333: DISABLE
16334: LD_INT 0
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16342: LD_ADDR_VAR 0 6
16346: PUSH
16347: LD_INT 22
16349: PUSH
16350: LD_OWVAR 2
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 21
16361: PUSH
16362: LD_INT 1
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 3
16371: PUSH
16372: LD_INT 23
16374: PUSH
16375: LD_INT 0
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL_OW 69
16395: ST_TO_ADDR
// if not tmp then
16396: LD_VAR 0 6
16400: NOT
16401: IFFALSE 16405
// exit ;
16403: GO 16551
// s1 := rand ( 1 , 4 ) ;
16405: LD_ADDR_VAR 0 2
16409: PUSH
16410: LD_INT 1
16412: PPUSH
16413: LD_INT 4
16415: PPUSH
16416: CALL_OW 12
16420: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16421: LD_ADDR_VAR 0 4
16425: PUSH
16426: LD_VAR 0 6
16430: PUSH
16431: LD_INT 1
16433: ARRAY
16434: PPUSH
16435: LD_VAR 0 2
16439: PPUSH
16440: CALL_OW 259
16444: ST_TO_ADDR
// if s1 = 1 then
16445: LD_VAR 0 2
16449: PUSH
16450: LD_INT 1
16452: EQUAL
16453: IFFALSE 16473
// s2 := rand ( 2 , 4 ) else
16455: LD_ADDR_VAR 0 3
16459: PUSH
16460: LD_INT 2
16462: PPUSH
16463: LD_INT 4
16465: PPUSH
16466: CALL_OW 12
16470: ST_TO_ADDR
16471: GO 16481
// s2 := 1 ;
16473: LD_ADDR_VAR 0 3
16477: PUSH
16478: LD_INT 1
16480: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16481: LD_ADDR_VAR 0 5
16485: PUSH
16486: LD_VAR 0 6
16490: PUSH
16491: LD_INT 1
16493: ARRAY
16494: PPUSH
16495: LD_VAR 0 3
16499: PPUSH
16500: CALL_OW 259
16504: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16505: LD_VAR 0 6
16509: PUSH
16510: LD_INT 1
16512: ARRAY
16513: PPUSH
16514: LD_VAR 0 2
16518: PPUSH
16519: LD_VAR 0 5
16523: PPUSH
16524: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16528: LD_VAR 0 6
16532: PUSH
16533: LD_INT 1
16535: ARRAY
16536: PPUSH
16537: LD_VAR 0 3
16541: PPUSH
16542: LD_VAR 0 4
16546: PPUSH
16547: CALL_OW 237
// end ;
16551: PPOPN 6
16553: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16554: LD_EXP 27
16558: PUSH
16559: LD_EXP 74
16563: AND
16564: IFFALSE 16643
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16572: LD_ADDR_VAR 0 1
16576: PUSH
16577: LD_INT 22
16579: PUSH
16580: LD_OWVAR 2
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 30
16591: PUSH
16592: LD_INT 3
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 69
16607: ST_TO_ADDR
// if not tmp then
16608: LD_VAR 0 1
16612: NOT
16613: IFFALSE 16617
// exit ;
16615: GO 16643
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16617: LD_VAR 0 1
16621: PUSH
16622: LD_INT 1
16624: PPUSH
16625: LD_VAR 0 1
16629: PPUSH
16630: CALL_OW 12
16634: ARRAY
16635: PPUSH
16636: LD_INT 1
16638: PPUSH
16639: CALL_OW 234
// end ;
16643: PPOPN 1
16645: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16646: LD_EXP 27
16650: PUSH
16651: LD_EXP 75
16655: AND
16656: IFFALSE 16768
16658: GO 16660
16660: DISABLE
16661: LD_INT 0
16663: PPUSH
16664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16665: LD_ADDR_VAR 0 2
16669: PUSH
16670: LD_INT 22
16672: PUSH
16673: LD_OWVAR 2
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 2
16684: PUSH
16685: LD_INT 30
16687: PUSH
16688: LD_INT 27
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 30
16697: PUSH
16698: LD_INT 26
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 30
16707: PUSH
16708: LD_INT 28
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 69
16729: ST_TO_ADDR
// if not tmp then
16730: LD_VAR 0 2
16734: NOT
16735: IFFALSE 16739
// exit ;
16737: GO 16768
// for i in tmp do
16739: LD_ADDR_VAR 0 1
16743: PUSH
16744: LD_VAR 0 2
16748: PUSH
16749: FOR_IN
16750: IFFALSE 16766
// SetLives ( i , 1 ) ;
16752: LD_VAR 0 1
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: CALL_OW 234
16764: GO 16749
16766: POP
16767: POP
// end ;
16768: PPOPN 2
16770: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16771: LD_EXP 27
16775: PUSH
16776: LD_EXP 76
16780: AND
16781: IFFALSE 17055
16783: GO 16785
16785: DISABLE
16786: LD_INT 0
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin i := rand ( 1 , 7 ) ;
16791: LD_ADDR_VAR 0 1
16795: PUSH
16796: LD_INT 1
16798: PPUSH
16799: LD_INT 7
16801: PPUSH
16802: CALL_OW 12
16806: ST_TO_ADDR
// case i of 1 :
16807: LD_VAR 0 1
16811: PUSH
16812: LD_INT 1
16814: DOUBLE
16815: EQUAL
16816: IFTRUE 16820
16818: GO 16830
16820: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16821: LD_STRING earthquake(getX(game), 0, 32)
16823: PPUSH
16824: CALL_OW 559
16828: GO 17055
16830: LD_INT 2
16832: DOUBLE
16833: EQUAL
16834: IFTRUE 16838
16836: GO 16852
16838: POP
// begin ToLua ( displayStucuk(); ) ;
16839: LD_STRING displayStucuk();
16841: PPUSH
16842: CALL_OW 559
// ResetFog ;
16846: CALL_OW 335
// end ; 3 :
16850: GO 17055
16852: LD_INT 3
16854: DOUBLE
16855: EQUAL
16856: IFTRUE 16860
16858: GO 16964
16860: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: LD_INT 22
16868: PUSH
16869: LD_OWVAR 2
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 25
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PPUSH
16892: CALL_OW 69
16896: ST_TO_ADDR
// if not tmp then
16897: LD_VAR 0 2
16901: NOT
16902: IFFALSE 16906
// exit ;
16904: GO 17055
// un := tmp [ rand ( 1 , tmp ) ] ;
16906: LD_ADDR_VAR 0 3
16910: PUSH
16911: LD_VAR 0 2
16915: PUSH
16916: LD_INT 1
16918: PPUSH
16919: LD_VAR 0 2
16923: PPUSH
16924: CALL_OW 12
16928: ARRAY
16929: ST_TO_ADDR
// if Crawls ( un ) then
16930: LD_VAR 0 3
16934: PPUSH
16935: CALL_OW 318
16939: IFFALSE 16950
// ComWalk ( un ) ;
16941: LD_VAR 0 3
16945: PPUSH
16946: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16950: LD_VAR 0 3
16954: PPUSH
16955: LD_INT 8
16957: PPUSH
16958: CALL_OW 336
// end ; 4 :
16962: GO 17055
16964: LD_INT 4
16966: DOUBLE
16967: EQUAL
16968: IFTRUE 16972
16970: GO 17033
16972: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16973: LD_ADDR_VAR 0 2
16977: PUSH
16978: LD_INT 22
16980: PUSH
16981: LD_OWVAR 2
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 30
16992: PUSH
16993: LD_INT 29
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL_OW 69
17008: ST_TO_ADDR
// if not tmp then
17009: LD_VAR 0 2
17013: NOT
17014: IFFALSE 17018
// exit ;
17016: GO 17055
// DestroyUnit ( tmp [ 1 ] ) ;
17018: LD_VAR 0 2
17022: PUSH
17023: LD_INT 1
17025: ARRAY
17026: PPUSH
17027: CALL_OW 65
// end ; 5 .. 7 :
17031: GO 17055
17033: LD_INT 5
17035: DOUBLE
17036: GREATEREQUAL
17037: IFFALSE 17045
17039: LD_INT 7
17041: DOUBLE
17042: LESSEQUAL
17043: IFTRUE 17047
17045: GO 17054
17047: POP
// StreamSibBomb ; end ;
17048: CALL 13305 0 0
17052: GO 17055
17054: POP
// end ;
17055: PPOPN 3
17057: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17058: LD_EXP 27
17062: PUSH
17063: LD_EXP 77
17067: AND
17068: IFFALSE 17224
17070: GO 17072
17072: DISABLE
17073: LD_INT 0
17075: PPUSH
17076: PPUSH
17077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17078: LD_ADDR_VAR 0 2
17082: PUSH
17083: LD_INT 81
17085: PUSH
17086: LD_OWVAR 2
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: LD_INT 21
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 21
17110: PUSH
17111: LD_INT 2
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PPUSH
17127: CALL_OW 69
17131: ST_TO_ADDR
// if not tmp then
17132: LD_VAR 0 2
17136: NOT
17137: IFFALSE 17141
// exit ;
17139: GO 17224
// p := 0 ;
17141: LD_ADDR_VAR 0 3
17145: PUSH
17146: LD_INT 0
17148: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17149: LD_INT 35
17151: PPUSH
17152: CALL_OW 67
// p := p + 1 ;
17156: LD_ADDR_VAR 0 3
17160: PUSH
17161: LD_VAR 0 3
17165: PUSH
17166: LD_INT 1
17168: PLUS
17169: ST_TO_ADDR
// for i in tmp do
17170: LD_ADDR_VAR 0 1
17174: PUSH
17175: LD_VAR 0 2
17179: PUSH
17180: FOR_IN
17181: IFFALSE 17212
// if GetLives ( i ) < 1000 then
17183: LD_VAR 0 1
17187: PPUSH
17188: CALL_OW 256
17192: PUSH
17193: LD_INT 1000
17195: LESS
17196: IFFALSE 17210
// SetLives ( i , 1000 ) ;
17198: LD_VAR 0 1
17202: PPUSH
17203: LD_INT 1000
17205: PPUSH
17206: CALL_OW 234
17210: GO 17180
17212: POP
17213: POP
// until p > 20 ;
17214: LD_VAR 0 3
17218: PUSH
17219: LD_INT 20
17221: GREATER
17222: IFFALSE 17149
// end ;
17224: PPOPN 3
17226: END
// every 0 0$1 trigger StreamModeActive and sTime do
17227: LD_EXP 27
17231: PUSH
17232: LD_EXP 78
17236: AND
17237: IFFALSE 17272
17239: GO 17241
17241: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17242: LD_INT 28
17244: PPUSH
17245: LD_OWVAR 2
17249: PPUSH
17250: LD_INT 2
17252: PPUSH
17253: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17257: LD_INT 30
17259: PPUSH
17260: LD_OWVAR 2
17264: PPUSH
17265: LD_INT 2
17267: PPUSH
17268: CALL_OW 322
// end ;
17272: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17273: LD_EXP 27
17277: PUSH
17278: LD_EXP 79
17282: AND
17283: IFFALSE 17404
17285: GO 17287
17287: DISABLE
17288: LD_INT 0
17290: PPUSH
17291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17292: LD_ADDR_VAR 0 2
17296: PUSH
17297: LD_INT 22
17299: PUSH
17300: LD_OWVAR 2
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 21
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 3
17321: PUSH
17322: LD_INT 23
17324: PUSH
17325: LD_INT 0
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 69
17345: ST_TO_ADDR
// if not tmp then
17346: LD_VAR 0 2
17350: NOT
17351: IFFALSE 17355
// exit ;
17353: GO 17404
// for i in tmp do
17355: LD_ADDR_VAR 0 1
17359: PUSH
17360: LD_VAR 0 2
17364: PUSH
17365: FOR_IN
17366: IFFALSE 17402
// begin if Crawls ( i ) then
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 318
17377: IFFALSE 17388
// ComWalk ( i ) ;
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 138
// SetClass ( i , 2 ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 2
17395: PPUSH
17396: CALL_OW 336
// end ;
17400: GO 17365
17402: POP
17403: POP
// end ;
17404: PPOPN 2
17406: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17407: LD_EXP 27
17411: PUSH
17412: LD_EXP 80
17416: AND
17417: IFFALSE 17698
17419: GO 17421
17421: DISABLE
17422: LD_INT 0
17424: PPUSH
17425: PPUSH
17426: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17427: LD_OWVAR 2
17431: PPUSH
17432: LD_INT 9
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17445: LD_INT 9
17447: PPUSH
17448: LD_OWVAR 2
17452: PPUSH
17453: CALL_OW 343
// uc_side := 9 ;
17457: LD_ADDR_OWVAR 20
17461: PUSH
17462: LD_INT 9
17464: ST_TO_ADDR
// uc_nation := 2 ;
17465: LD_ADDR_OWVAR 21
17469: PUSH
17470: LD_INT 2
17472: ST_TO_ADDR
// hc_name := Dark Warrior ;
17473: LD_ADDR_OWVAR 26
17477: PUSH
17478: LD_STRING Dark Warrior
17480: ST_TO_ADDR
// hc_gallery :=  ;
17481: LD_ADDR_OWVAR 33
17485: PUSH
17486: LD_STRING 
17488: ST_TO_ADDR
// hc_noskilllimit := true ;
17489: LD_ADDR_OWVAR 76
17493: PUSH
17494: LD_INT 1
17496: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17497: LD_ADDR_OWVAR 31
17501: PUSH
17502: LD_INT 30
17504: PUSH
17505: LD_INT 30
17507: PUSH
17508: LD_INT 30
17510: PUSH
17511: LD_INT 30
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: ST_TO_ADDR
// un := CreateHuman ;
17520: LD_ADDR_VAR 0 3
17524: PUSH
17525: CALL_OW 44
17529: ST_TO_ADDR
// hc_noskilllimit := false ;
17530: LD_ADDR_OWVAR 76
17534: PUSH
17535: LD_INT 0
17537: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17538: LD_VAR 0 3
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: CALL_OW 51
// p := 0 ;
17550: LD_ADDR_VAR 0 2
17554: PUSH
17555: LD_INT 0
17557: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17558: LD_INT 35
17560: PPUSH
17561: CALL_OW 67
// p := p + 1 ;
17565: LD_ADDR_VAR 0 2
17569: PUSH
17570: LD_VAR 0 2
17574: PUSH
17575: LD_INT 1
17577: PLUS
17578: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17579: LD_VAR 0 3
17583: PPUSH
17584: CALL_OW 256
17588: PUSH
17589: LD_INT 1000
17591: LESS
17592: IFFALSE 17606
// SetLives ( un , 1000 ) ;
17594: LD_VAR 0 3
17598: PPUSH
17599: LD_INT 1000
17601: PPUSH
17602: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17606: LD_VAR 0 3
17610: PPUSH
17611: LD_INT 81
17613: PUSH
17614: LD_OWVAR 2
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 91
17625: PUSH
17626: LD_VAR 0 3
17630: PUSH
17631: LD_INT 30
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PPUSH
17643: CALL_OW 69
17647: PPUSH
17648: LD_VAR 0 3
17652: PPUSH
17653: CALL_OW 74
17657: PPUSH
17658: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17662: LD_VAR 0 2
17666: PUSH
17667: LD_INT 60
17669: GREATER
17670: PUSH
17671: LD_VAR 0 3
17675: PPUSH
17676: CALL_OW 301
17680: OR
17681: IFFALSE 17558
// if un then
17683: LD_VAR 0 3
17687: IFFALSE 17698
// RemoveUnit ( un ) ;
17689: LD_VAR 0 3
17693: PPUSH
17694: CALL_OW 64
// end ;
17698: PPOPN 3
17700: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17701: LD_INT 0
17703: PPUSH
17704: PPUSH
17705: PPUSH
17706: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17707: LD_ADDR_VAR 0 4
17711: PUSH
17712: LD_INT 22
17714: PUSH
17715: LD_OWVAR 2
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 2
17726: PUSH
17727: LD_INT 30
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 30
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PPUSH
17756: CALL_OW 69
17760: ST_TO_ADDR
// if not tmp then
17761: LD_VAR 0 4
17765: NOT
17766: IFFALSE 17770
// exit ;
17768: GO 17829
// for i in tmp do
17770: LD_ADDR_VAR 0 2
17774: PUSH
17775: LD_VAR 0 4
17779: PUSH
17780: FOR_IN
17781: IFFALSE 17827
// for j = 1 to 3 do
17783: LD_ADDR_VAR 0 3
17787: PUSH
17788: DOUBLE
17789: LD_INT 1
17791: DEC
17792: ST_TO_ADDR
17793: LD_INT 3
17795: PUSH
17796: FOR_TO
17797: IFFALSE 17823
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17799: LD_VAR 0 2
17803: PPUSH
17804: CALL_OW 274
17808: PPUSH
17809: LD_VAR 0 3
17813: PPUSH
17814: LD_INT 99999
17816: PPUSH
17817: CALL_OW 277
17821: GO 17796
17823: POP
17824: POP
17825: GO 17780
17827: POP
17828: POP
// end ;
17829: LD_VAR 0 1
17833: RET
// export function hHackSetLevel10 ; var i , j ; begin
17834: LD_INT 0
17836: PPUSH
17837: PPUSH
17838: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17839: LD_ADDR_VAR 0 2
17843: PUSH
17844: LD_INT 21
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PPUSH
17854: CALL_OW 69
17858: PUSH
17859: FOR_IN
17860: IFFALSE 17912
// if IsSelected ( i ) then
17862: LD_VAR 0 2
17866: PPUSH
17867: CALL_OW 306
17871: IFFALSE 17910
// begin for j := 1 to 4 do
17873: LD_ADDR_VAR 0 3
17877: PUSH
17878: DOUBLE
17879: LD_INT 1
17881: DEC
17882: ST_TO_ADDR
17883: LD_INT 4
17885: PUSH
17886: FOR_TO
17887: IFFALSE 17908
// SetSkill ( i , j , 10 ) ;
17889: LD_VAR 0 2
17893: PPUSH
17894: LD_VAR 0 3
17898: PPUSH
17899: LD_INT 10
17901: PPUSH
17902: CALL_OW 237
17906: GO 17886
17908: POP
17909: POP
// end ;
17910: GO 17859
17912: POP
17913: POP
// end ;
17914: LD_VAR 0 1
17918: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17919: LD_INT 0
17921: PPUSH
17922: PPUSH
17923: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17924: LD_ADDR_VAR 0 2
17928: PUSH
17929: LD_INT 22
17931: PUSH
17932: LD_OWVAR 2
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 21
17943: PUSH
17944: LD_INT 1
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PPUSH
17955: CALL_OW 69
17959: PUSH
17960: FOR_IN
17961: IFFALSE 18002
// begin for j := 1 to 4 do
17963: LD_ADDR_VAR 0 3
17967: PUSH
17968: DOUBLE
17969: LD_INT 1
17971: DEC
17972: ST_TO_ADDR
17973: LD_INT 4
17975: PUSH
17976: FOR_TO
17977: IFFALSE 17998
// SetSkill ( i , j , 10 ) ;
17979: LD_VAR 0 2
17983: PPUSH
17984: LD_VAR 0 3
17988: PPUSH
17989: LD_INT 10
17991: PPUSH
17992: CALL_OW 237
17996: GO 17976
17998: POP
17999: POP
// end ;
18000: GO 17960
18002: POP
18003: POP
// end ;
18004: LD_VAR 0 1
18008: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
18009: LD_INT 0
18011: PPUSH
// uc_side := your_side ;
18012: LD_ADDR_OWVAR 20
18016: PUSH
18017: LD_OWVAR 2
18021: ST_TO_ADDR
// uc_nation := nation ;
18022: LD_ADDR_OWVAR 21
18026: PUSH
18027: LD_VAR 0 1
18031: ST_TO_ADDR
// InitHc ;
18032: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18036: LD_INT 0
18038: PPUSH
18039: LD_VAR 0 2
18043: PPUSH
18044: LD_VAR 0 3
18048: PPUSH
18049: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18053: CALL_OW 44
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: CALL_OW 51
// end ;
18065: LD_VAR 0 4
18069: RET
// export function hHackSpawnVehicle ; begin
18070: LD_INT 0
18072: PPUSH
// uc_side := your_side ;
18073: LD_ADDR_OWVAR 20
18077: PUSH
18078: LD_OWVAR 2
18082: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
18083: LD_ADDR_OWVAR 21
18087: PUSH
18088: LD_INT 1
18090: PPUSH
18091: LD_INT 3
18093: PPUSH
18094: CALL_OW 12
18098: ST_TO_ADDR
// InitVc ;
18099: CALL_OW 20
// case uc_nation of 1 :
18103: LD_OWVAR 21
18107: PUSH
18108: LD_INT 1
18110: DOUBLE
18111: EQUAL
18112: IFTRUE 18116
18114: GO 18260
18116: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
18117: LD_ADDR_OWVAR 37
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 3
18130: PUSH
18131: LD_INT 4
18133: PUSH
18134: LD_INT 5
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PPUSH
18147: LD_INT 5
18149: PPUSH
18150: CALL_OW 12
18154: ARRAY
18155: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18156: LD_ADDR_OWVAR 39
18160: PUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_INT 3
18166: PPUSH
18167: CALL_OW 12
18171: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
18172: LD_ADDR_OWVAR 38
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: LD_INT 3
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 1
18193: PPUSH
18194: LD_INT 3
18196: PPUSH
18197: CALL_OW 12
18201: ARRAY
18202: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
18203: LD_ADDR_OWVAR 40
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: LD_INT 4
18213: PUSH
18214: LD_INT 5
18216: PUSH
18217: LD_INT 3
18219: PUSH
18220: LD_INT 7
18222: PUSH
18223: LD_INT 8
18225: PUSH
18226: LD_INT 9
18228: PUSH
18229: LD_INT 10
18231: PUSH
18232: LD_INT 6
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 1
18248: PPUSH
18249: LD_INT 9
18251: PPUSH
18252: CALL_OW 12
18256: ARRAY
18257: ST_TO_ADDR
// end ; 2 :
18258: GO 18525
18260: LD_INT 2
18262: DOUBLE
18263: EQUAL
18264: IFTRUE 18268
18266: GO 18392
18268: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
18269: LD_ADDR_OWVAR 37
18273: PUSH
18274: LD_INT 11
18276: PUSH
18277: LD_INT 12
18279: PUSH
18280: LD_INT 13
18282: PUSH
18283: LD_INT 14
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 1
18294: PPUSH
18295: LD_INT 4
18297: PPUSH
18298: CALL_OW 12
18302: ARRAY
18303: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18304: LD_ADDR_OWVAR 39
18308: PUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_INT 3
18314: PPUSH
18315: CALL_OW 12
18319: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
18320: LD_ADDR_OWVAR 38
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: LD_INT 5
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 1
18341: PPUSH
18342: LD_INT 3
18344: PPUSH
18345: CALL_OW 12
18349: ARRAY
18350: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
18351: LD_ADDR_OWVAR 40
18355: PUSH
18356: LD_INT 24
18358: PUSH
18359: LD_INT 26
18361: PUSH
18362: LD_INT 27
18364: PUSH
18365: LD_INT 28
18367: PUSH
18368: LD_INT 29
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 1
18380: PPUSH
18381: LD_INT 5
18383: PPUSH
18384: CALL_OW 12
18388: ARRAY
18389: ST_TO_ADDR
// end ; 3 :
18390: GO 18525
18392: LD_INT 3
18394: DOUBLE
18395: EQUAL
18396: IFTRUE 18400
18398: GO 18524
18400: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
18401: LD_ADDR_OWVAR 37
18405: PUSH
18406: LD_INT 21
18408: PUSH
18409: LD_INT 23
18411: PUSH
18412: LD_INT 22
18414: PUSH
18415: LD_INT 24
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: PPUSH
18427: LD_INT 4
18429: PPUSH
18430: CALL_OW 12
18434: ARRAY
18435: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
18436: LD_ADDR_OWVAR 39
18440: PUSH
18441: LD_INT 1
18443: PPUSH
18444: LD_INT 3
18446: PPUSH
18447: CALL_OW 12
18451: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
18452: LD_ADDR_OWVAR 38
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 3
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: PPUSH
18470: LD_INT 2
18472: PPUSH
18473: CALL_OW 12
18477: ARRAY
18478: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
18479: LD_ADDR_OWVAR 40
18483: PUSH
18484: LD_INT 42
18486: PUSH
18487: LD_INT 43
18489: PUSH
18490: LD_INT 44
18492: PUSH
18493: LD_INT 46
18495: PUSH
18496: LD_INT 48
18498: PUSH
18499: LD_INT 47
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: PPUSH
18513: LD_INT 6
18515: PPUSH
18516: CALL_OW 12
18520: ARRAY
18521: ST_TO_ADDR
// end ; end ;
18522: GO 18525
18524: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18525: CALL_OW 45
18529: PPUSH
18530: LD_INT 1
18532: PPUSH
18533: CALL_OW 51
// end ;
18537: LD_VAR 0 1
18541: RET
// export hInvincible ; every 1 do
18542: GO 18544
18544: DISABLE
// hInvincible := [ ] ;
18545: LD_ADDR_EXP 81
18549: PUSH
18550: EMPTY
18551: ST_TO_ADDR
18552: END
// every 10 do var i ;
18553: GO 18555
18555: DISABLE
18556: LD_INT 0
18558: PPUSH
// begin enable ;
18559: ENABLE
// if not hInvincible then
18560: LD_EXP 81
18564: NOT
18565: IFFALSE 18569
// exit ;
18567: GO 18613
// for i in hInvincible do
18569: LD_ADDR_VAR 0 1
18573: PUSH
18574: LD_EXP 81
18578: PUSH
18579: FOR_IN
18580: IFFALSE 18611
// if GetLives ( i ) < 1000 then
18582: LD_VAR 0 1
18586: PPUSH
18587: CALL_OW 256
18591: PUSH
18592: LD_INT 1000
18594: LESS
18595: IFFALSE 18609
// SetLives ( i , 1000 ) ;
18597: LD_VAR 0 1
18601: PPUSH
18602: LD_INT 1000
18604: PPUSH
18605: CALL_OW 234
18609: GO 18579
18611: POP
18612: POP
// end ;
18613: PPOPN 1
18615: END
// export function hHackInvincible ; var i ; begin
18616: LD_INT 0
18618: PPUSH
18619: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18620: LD_ADDR_VAR 0 2
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: LD_INT 21
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 21
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: LIST
18652: PPUSH
18653: CALL_OW 69
18657: PUSH
18658: FOR_IN
18659: IFFALSE 18720
// if IsSelected ( i ) then
18661: LD_VAR 0 2
18665: PPUSH
18666: CALL_OW 306
18670: IFFALSE 18718
// begin if i in hInvincible then
18672: LD_VAR 0 2
18676: PUSH
18677: LD_EXP 81
18681: IN
18682: IFFALSE 18702
// hInvincible := hInvincible diff i else
18684: LD_ADDR_EXP 81
18688: PUSH
18689: LD_EXP 81
18693: PUSH
18694: LD_VAR 0 2
18698: DIFF
18699: ST_TO_ADDR
18700: GO 18718
// hInvincible := hInvincible union i ;
18702: LD_ADDR_EXP 81
18706: PUSH
18707: LD_EXP 81
18711: PUSH
18712: LD_VAR 0 2
18716: UNION
18717: ST_TO_ADDR
// end ;
18718: GO 18658
18720: POP
18721: POP
// end ;
18722: LD_VAR 0 1
18726: RET
// export function hHackInvisible ; var i , j ; begin
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
18731: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18732: LD_ADDR_VAR 0 2
18736: PUSH
18737: LD_INT 21
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PPUSH
18747: CALL_OW 69
18751: PUSH
18752: FOR_IN
18753: IFFALSE 18777
// if IsSelected ( i ) then
18755: LD_VAR 0 2
18759: PPUSH
18760: CALL_OW 306
18764: IFFALSE 18775
// ComForceInvisible ( i ) ;
18766: LD_VAR 0 2
18770: PPUSH
18771: CALL_OW 496
18775: GO 18752
18777: POP
18778: POP
// end ;
18779: LD_VAR 0 1
18783: RET
// export function hHackChangeYourSide ; begin
18784: LD_INT 0
18786: PPUSH
// if your_side = 8 then
18787: LD_OWVAR 2
18791: PUSH
18792: LD_INT 8
18794: EQUAL
18795: IFFALSE 18807
// your_side := 0 else
18797: LD_ADDR_OWVAR 2
18801: PUSH
18802: LD_INT 0
18804: ST_TO_ADDR
18805: GO 18821
// your_side := your_side + 1 ;
18807: LD_ADDR_OWVAR 2
18811: PUSH
18812: LD_OWVAR 2
18816: PUSH
18817: LD_INT 1
18819: PLUS
18820: ST_TO_ADDR
// end ;
18821: LD_VAR 0 1
18825: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18826: LD_INT 0
18828: PPUSH
18829: PPUSH
18830: PPUSH
// for i in all_units do
18831: LD_ADDR_VAR 0 2
18835: PUSH
18836: LD_OWVAR 3
18840: PUSH
18841: FOR_IN
18842: IFFALSE 18920
// if IsSelected ( i ) then
18844: LD_VAR 0 2
18848: PPUSH
18849: CALL_OW 306
18853: IFFALSE 18918
// begin j := GetSide ( i ) ;
18855: LD_ADDR_VAR 0 3
18859: PUSH
18860: LD_VAR 0 2
18864: PPUSH
18865: CALL_OW 255
18869: ST_TO_ADDR
// if j = 8 then
18870: LD_VAR 0 3
18874: PUSH
18875: LD_INT 8
18877: EQUAL
18878: IFFALSE 18890
// j := 0 else
18880: LD_ADDR_VAR 0 3
18884: PUSH
18885: LD_INT 0
18887: ST_TO_ADDR
18888: GO 18904
// j := j + 1 ;
18890: LD_ADDR_VAR 0 3
18894: PUSH
18895: LD_VAR 0 3
18899: PUSH
18900: LD_INT 1
18902: PLUS
18903: ST_TO_ADDR
// SetSide ( i , j ) ;
18904: LD_VAR 0 2
18908: PPUSH
18909: LD_VAR 0 3
18913: PPUSH
18914: CALL_OW 235
// end ;
18918: GO 18841
18920: POP
18921: POP
// end ;
18922: LD_VAR 0 1
18926: RET
// export function hHackFog ; begin
18927: LD_INT 0
18929: PPUSH
// FogOff ( true ) ;
18930: LD_INT 1
18932: PPUSH
18933: CALL_OW 344
// end ;
18937: LD_VAR 0 1
18941: RET
// export function hHackApeman ; begin
18942: LD_INT 0
18944: PPUSH
// uc_side := your_side ;
18945: LD_ADDR_OWVAR 20
18949: PUSH
18950: LD_OWVAR 2
18954: ST_TO_ADDR
// uc_nation := 0 ;
18955: LD_ADDR_OWVAR 21
18959: PUSH
18960: LD_INT 0
18962: ST_TO_ADDR
// hc_name :=  ;
18963: LD_ADDR_OWVAR 26
18967: PUSH
18968: LD_STRING 
18970: ST_TO_ADDR
// hc_gallery :=  ;
18971: LD_ADDR_OWVAR 33
18975: PUSH
18976: LD_STRING 
18978: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
18979: LD_ADDR_OWVAR 31
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: ST_TO_ADDR
// hc_class := class_apeman ;
19002: LD_ADDR_OWVAR 28
19006: PUSH
19007: LD_INT 12
19009: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
19010: CALL_OW 44
19014: PPUSH
19015: LD_INT 1
19017: PPUSH
19018: CALL_OW 51
// end ;
19022: LD_VAR 0 1
19026: RET
// export function hHackBoom ; begin
19027: LD_INT 0
19029: PPUSH
// uc_side := your_side ;
19030: LD_ADDR_OWVAR 20
19034: PUSH
19035: LD_OWVAR 2
19039: ST_TO_ADDR
// uc_nation := 1 ;
19040: LD_ADDR_OWVAR 21
19044: PUSH
19045: LD_INT 1
19047: ST_TO_ADDR
// vc_chassis := us_morphling ;
19048: LD_ADDR_OWVAR 37
19052: PUSH
19053: LD_INT 5
19055: ST_TO_ADDR
// vc_engine := engine_siberite ;
19056: LD_ADDR_OWVAR 39
19060: PUSH
19061: LD_INT 3
19063: ST_TO_ADDR
// vc_control := control_computer ;
19064: LD_ADDR_OWVAR 38
19068: PUSH
19069: LD_INT 3
19071: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
19072: LD_ADDR_OWVAR 40
19076: PUSH
19077: LD_INT 8
19079: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19080: CALL_OW 45
19084: PPUSH
19085: LD_INT 1
19087: PPUSH
19088: CALL_OW 51
// end ; end_of_file
19092: LD_VAR 0 1
19096: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
19101: PPUSH
19102: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19103: LD_VAR 0 1
19107: PPUSH
19108: CALL_OW 264
19112: PUSH
19113: LD_EXP 92
19117: EQUAL
19118: IFFALSE 19190
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19120: LD_INT 68
19122: PPUSH
19123: LD_VAR 0 1
19127: PPUSH
19128: CALL_OW 255
19132: PPUSH
19133: CALL_OW 321
19137: PUSH
19138: LD_INT 2
19140: EQUAL
19141: IFFALSE 19153
// eff := 70 else
19143: LD_ADDR_VAR 0 4
19147: PUSH
19148: LD_INT 70
19150: ST_TO_ADDR
19151: GO 19161
// eff := 30 ;
19153: LD_ADDR_VAR 0 4
19157: PUSH
19158: LD_INT 30
19160: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19161: LD_VAR 0 1
19165: PPUSH
19166: CALL_OW 250
19170: PPUSH
19171: LD_VAR 0 1
19175: PPUSH
19176: CALL_OW 251
19180: PPUSH
19181: LD_VAR 0 4
19185: PPUSH
19186: CALL_OW 495
// end ; end ;
19190: LD_VAR 0 2
19194: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19195: LD_INT 0
19197: PPUSH
// end ;
19198: LD_VAR 0 4
19202: RET
// export function SOS_Command ( cmd ) ; begin
19203: LD_INT 0
19205: PPUSH
// end ;
19206: LD_VAR 0 2
19210: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19211: LD_INT 0
19213: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19214: LD_VAR 0 1
19218: PUSH
19219: LD_INT 254
19221: EQUAL
19222: PUSH
19223: LD_VAR 0 2
19227: PPUSH
19228: CALL_OW 264
19232: PUSH
19233: LD_EXP 90
19237: EQUAL
19238: AND
19239: PUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: CALL_OW 263
19249: PUSH
19250: LD_INT 3
19252: EQUAL
19253: AND
19254: IFFALSE 19270
// HackDestroyVehicle ( unit , selectedUnit ) ;
19256: LD_VAR 0 2
19260: PPUSH
19261: LD_VAR 0 3
19265: PPUSH
19266: CALL 20779 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 255
19277: EQUAL
19278: PUSH
19279: LD_VAR 0 2
19283: PPUSH
19284: CALL_OW 264
19288: PUSH
19289: LD_INT 14
19291: PUSH
19292: LD_INT 53
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: IN
19299: AND
19300: PUSH
19301: LD_VAR 0 4
19305: PPUSH
19306: LD_VAR 0 5
19310: PPUSH
19311: CALL_OW 488
19315: AND
19316: IFFALSE 19340
// CutTreeXYR ( unit , x , y , 12 ) ;
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_VAR 0 4
19327: PPUSH
19328: LD_VAR 0 5
19332: PPUSH
19333: LD_INT 12
19335: PPUSH
19336: CALL 19345 0 4
// end ;
19340: LD_VAR 0 6
19344: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19345: LD_INT 0
19347: PPUSH
19348: PPUSH
19349: PPUSH
19350: PPUSH
19351: PPUSH
19352: PPUSH
19353: PPUSH
19354: PPUSH
19355: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19356: LD_VAR 0 1
19360: NOT
19361: PUSH
19362: LD_VAR 0 2
19366: PPUSH
19367: LD_VAR 0 3
19371: PPUSH
19372: CALL_OW 488
19376: NOT
19377: OR
19378: PUSH
19379: LD_VAR 0 4
19383: NOT
19384: OR
19385: IFFALSE 19389
// exit ;
19387: GO 19729
// list := [ ] ;
19389: LD_ADDR_VAR 0 13
19393: PUSH
19394: EMPTY
19395: ST_TO_ADDR
// if x - r < 0 then
19396: LD_VAR 0 2
19400: PUSH
19401: LD_VAR 0 4
19405: MINUS
19406: PUSH
19407: LD_INT 0
19409: LESS
19410: IFFALSE 19422
// min_x := 0 else
19412: LD_ADDR_VAR 0 7
19416: PUSH
19417: LD_INT 0
19419: ST_TO_ADDR
19420: GO 19438
// min_x := x - r ;
19422: LD_ADDR_VAR 0 7
19426: PUSH
19427: LD_VAR 0 2
19431: PUSH
19432: LD_VAR 0 4
19436: MINUS
19437: ST_TO_ADDR
// if y - r < 0 then
19438: LD_VAR 0 3
19442: PUSH
19443: LD_VAR 0 4
19447: MINUS
19448: PUSH
19449: LD_INT 0
19451: LESS
19452: IFFALSE 19464
// min_y := 0 else
19454: LD_ADDR_VAR 0 8
19458: PUSH
19459: LD_INT 0
19461: ST_TO_ADDR
19462: GO 19480
// min_y := y - r ;
19464: LD_ADDR_VAR 0 8
19468: PUSH
19469: LD_VAR 0 3
19473: PUSH
19474: LD_VAR 0 4
19478: MINUS
19479: ST_TO_ADDR
// max_x := x + r ;
19480: LD_ADDR_VAR 0 9
19484: PUSH
19485: LD_VAR 0 2
19489: PUSH
19490: LD_VAR 0 4
19494: PLUS
19495: ST_TO_ADDR
// max_y := y + r ;
19496: LD_ADDR_VAR 0 10
19500: PUSH
19501: LD_VAR 0 3
19505: PUSH
19506: LD_VAR 0 4
19510: PLUS
19511: ST_TO_ADDR
// for _x = min_x to max_x do
19512: LD_ADDR_VAR 0 11
19516: PUSH
19517: DOUBLE
19518: LD_VAR 0 7
19522: DEC
19523: ST_TO_ADDR
19524: LD_VAR 0 9
19528: PUSH
19529: FOR_TO
19530: IFFALSE 19647
// for _y = min_y to max_y do
19532: LD_ADDR_VAR 0 12
19536: PUSH
19537: DOUBLE
19538: LD_VAR 0 8
19542: DEC
19543: ST_TO_ADDR
19544: LD_VAR 0 10
19548: PUSH
19549: FOR_TO
19550: IFFALSE 19643
// begin if not ValidHex ( _x , _y ) then
19552: LD_VAR 0 11
19556: PPUSH
19557: LD_VAR 0 12
19561: PPUSH
19562: CALL_OW 488
19566: NOT
19567: IFFALSE 19571
// continue ;
19569: GO 19549
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19571: LD_VAR 0 11
19575: PPUSH
19576: LD_VAR 0 12
19580: PPUSH
19581: CALL_OW 351
19585: PUSH
19586: LD_VAR 0 11
19590: PPUSH
19591: LD_VAR 0 12
19595: PPUSH
19596: CALL_OW 554
19600: AND
19601: IFFALSE 19641
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19603: LD_ADDR_VAR 0 13
19607: PUSH
19608: LD_VAR 0 13
19612: PPUSH
19613: LD_VAR 0 13
19617: PUSH
19618: LD_INT 1
19620: PLUS
19621: PPUSH
19622: LD_VAR 0 11
19626: PUSH
19627: LD_VAR 0 12
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PPUSH
19636: CALL_OW 2
19640: ST_TO_ADDR
// end ;
19641: GO 19549
19643: POP
19644: POP
19645: GO 19529
19647: POP
19648: POP
// if not list then
19649: LD_VAR 0 13
19653: NOT
19654: IFFALSE 19658
// exit ;
19656: GO 19729
// for i in list do
19658: LD_ADDR_VAR 0 6
19662: PUSH
19663: LD_VAR 0 13
19667: PUSH
19668: FOR_IN
19669: IFFALSE 19727
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19671: LD_VAR 0 1
19675: PPUSH
19676: LD_STRING M
19678: PUSH
19679: LD_VAR 0 6
19683: PUSH
19684: LD_INT 1
19686: ARRAY
19687: PUSH
19688: LD_VAR 0 6
19692: PUSH
19693: LD_INT 2
19695: ARRAY
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: LD_INT 0
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: PPUSH
19721: CALL_OW 447
19725: GO 19668
19727: POP
19728: POP
// end ;
19729: LD_VAR 0 5
19733: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19734: LD_EXP 82
19738: NOT
19739: IFFALSE 19789
19741: GO 19743
19743: DISABLE
// begin initHack := true ;
19744: LD_ADDR_EXP 82
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// hackTanks := [ ] ;
19752: LD_ADDR_EXP 83
19756: PUSH
19757: EMPTY
19758: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19759: LD_ADDR_EXP 84
19763: PUSH
19764: EMPTY
19765: ST_TO_ADDR
// hackLimit := 3 ;
19766: LD_ADDR_EXP 85
19770: PUSH
19771: LD_INT 3
19773: ST_TO_ADDR
// hackDist := 12 ;
19774: LD_ADDR_EXP 86
19778: PUSH
19779: LD_INT 12
19781: ST_TO_ADDR
// hackCounter := [ ] ;
19782: LD_ADDR_EXP 87
19786: PUSH
19787: EMPTY
19788: ST_TO_ADDR
// end ;
19789: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19790: LD_EXP 82
19794: PUSH
19795: LD_INT 34
19797: PUSH
19798: LD_EXP 90
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PPUSH
19807: CALL_OW 69
19811: AND
19812: IFFALSE 20067
19814: GO 19816
19816: DISABLE
19817: LD_INT 0
19819: PPUSH
19820: PPUSH
// begin enable ;
19821: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19822: LD_ADDR_VAR 0 1
19826: PUSH
19827: LD_INT 34
19829: PUSH
19830: LD_EXP 90
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PPUSH
19839: CALL_OW 69
19843: PUSH
19844: FOR_IN
19845: IFFALSE 20065
// begin if not i in hackTanks then
19847: LD_VAR 0 1
19851: PUSH
19852: LD_EXP 83
19856: IN
19857: NOT
19858: IFFALSE 19941
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19860: LD_ADDR_EXP 83
19864: PUSH
19865: LD_EXP 83
19869: PPUSH
19870: LD_EXP 83
19874: PUSH
19875: LD_INT 1
19877: PLUS
19878: PPUSH
19879: LD_VAR 0 1
19883: PPUSH
19884: CALL_OW 1
19888: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19889: LD_ADDR_EXP 84
19893: PUSH
19894: LD_EXP 84
19898: PPUSH
19899: LD_EXP 84
19903: PUSH
19904: LD_INT 1
19906: PLUS
19907: PPUSH
19908: EMPTY
19909: PPUSH
19910: CALL_OW 1
19914: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19915: LD_ADDR_EXP 87
19919: PUSH
19920: LD_EXP 87
19924: PPUSH
19925: LD_EXP 87
19929: PUSH
19930: LD_INT 1
19932: PLUS
19933: PPUSH
19934: EMPTY
19935: PPUSH
19936: CALL_OW 1
19940: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 302
19950: NOT
19951: IFFALSE 19964
// begin HackUnlinkAll ( i ) ;
19953: LD_VAR 0 1
19957: PPUSH
19958: CALL 20070 0 1
// continue ;
19962: GO 19844
// end ; HackCheckCapturedStatus ( i ) ;
19964: LD_VAR 0 1
19968: PPUSH
19969: CALL 20513 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19973: LD_ADDR_VAR 0 2
19977: PUSH
19978: LD_INT 81
19980: PUSH
19981: LD_VAR 0 1
19985: PPUSH
19986: CALL_OW 255
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 33
19997: PUSH
19998: LD_INT 3
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 91
20007: PUSH
20008: LD_VAR 0 1
20012: PUSH
20013: LD_EXP 86
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 50
20025: PUSH
20026: EMPTY
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: PPUSH
20035: CALL_OW 69
20039: ST_TO_ADDR
// if not tmp then
20040: LD_VAR 0 2
20044: NOT
20045: IFFALSE 20049
// continue ;
20047: GO 19844
// HackLink ( i , tmp ) ;
20049: LD_VAR 0 1
20053: PPUSH
20054: LD_VAR 0 2
20058: PPUSH
20059: CALL 20206 0 2
// end ;
20063: GO 19844
20065: POP
20066: POP
// end ;
20067: PPOPN 2
20069: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20070: LD_INT 0
20072: PPUSH
20073: PPUSH
20074: PPUSH
// if not hack in hackTanks then
20075: LD_VAR 0 1
20079: PUSH
20080: LD_EXP 83
20084: IN
20085: NOT
20086: IFFALSE 20090
// exit ;
20088: GO 20201
// index := GetElementIndex ( hackTanks , hack ) ;
20090: LD_ADDR_VAR 0 4
20094: PUSH
20095: LD_EXP 83
20099: PPUSH
20100: LD_VAR 0 1
20104: PPUSH
20105: CALL 25757 0 2
20109: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20110: LD_EXP 84
20114: PUSH
20115: LD_VAR 0 4
20119: ARRAY
20120: IFFALSE 20201
// begin for i in hackTanksCaptured [ index ] do
20122: LD_ADDR_VAR 0 3
20126: PUSH
20127: LD_EXP 84
20131: PUSH
20132: LD_VAR 0 4
20136: ARRAY
20137: PUSH
20138: FOR_IN
20139: IFFALSE 20165
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20141: LD_VAR 0 3
20145: PUSH
20146: LD_INT 1
20148: ARRAY
20149: PPUSH
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 2
20157: ARRAY
20158: PPUSH
20159: CALL_OW 235
20163: GO 20138
20165: POP
20166: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20167: LD_ADDR_EXP 84
20171: PUSH
20172: LD_EXP 84
20176: PPUSH
20177: LD_VAR 0 4
20181: PPUSH
20182: EMPTY
20183: PPUSH
20184: CALL_OW 1
20188: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20189: LD_VAR 0 1
20193: PPUSH
20194: LD_INT 0
20196: PPUSH
20197: CALL_OW 505
// end ; end ;
20201: LD_VAR 0 2
20205: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20206: LD_INT 0
20208: PPUSH
20209: PPUSH
20210: PPUSH
// if not hack in hackTanks or not vehicles then
20211: LD_VAR 0 1
20215: PUSH
20216: LD_EXP 83
20220: IN
20221: NOT
20222: PUSH
20223: LD_VAR 0 2
20227: NOT
20228: OR
20229: IFFALSE 20233
// exit ;
20231: GO 20508
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20233: LD_ADDR_VAR 0 2
20237: PUSH
20238: LD_VAR 0 1
20242: PPUSH
20243: LD_VAR 0 2
20247: PPUSH
20248: LD_INT 1
20250: PPUSH
20251: LD_INT 1
20253: PPUSH
20254: CALL 26407 0 4
20258: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20259: LD_ADDR_VAR 0 5
20263: PUSH
20264: LD_EXP 83
20268: PPUSH
20269: LD_VAR 0 1
20273: PPUSH
20274: CALL 25757 0 2
20278: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20279: LD_EXP 84
20283: PUSH
20284: LD_VAR 0 5
20288: ARRAY
20289: PUSH
20290: LD_EXP 85
20294: LESS
20295: IFFALSE 20484
// begin for i := 1 to vehicles do
20297: LD_ADDR_VAR 0 4
20301: PUSH
20302: DOUBLE
20303: LD_INT 1
20305: DEC
20306: ST_TO_ADDR
20307: LD_VAR 0 2
20311: PUSH
20312: FOR_TO
20313: IFFALSE 20482
// begin if hackTanksCaptured [ index ] = hackLimit then
20315: LD_EXP 84
20319: PUSH
20320: LD_VAR 0 5
20324: ARRAY
20325: PUSH
20326: LD_EXP 85
20330: EQUAL
20331: IFFALSE 20335
// break ;
20333: GO 20482
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20335: LD_ADDR_EXP 87
20339: PUSH
20340: LD_EXP 87
20344: PPUSH
20345: LD_VAR 0 5
20349: PPUSH
20350: LD_EXP 87
20354: PUSH
20355: LD_VAR 0 5
20359: ARRAY
20360: PUSH
20361: LD_INT 1
20363: PLUS
20364: PPUSH
20365: CALL_OW 1
20369: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20370: LD_ADDR_EXP 84
20374: PUSH
20375: LD_EXP 84
20379: PPUSH
20380: LD_VAR 0 5
20384: PUSH
20385: LD_EXP 84
20389: PUSH
20390: LD_VAR 0 5
20394: ARRAY
20395: PUSH
20396: LD_INT 1
20398: PLUS
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PPUSH
20404: LD_VAR 0 2
20408: PUSH
20409: LD_VAR 0 4
20413: ARRAY
20414: PUSH
20415: LD_VAR 0 2
20419: PUSH
20420: LD_VAR 0 4
20424: ARRAY
20425: PPUSH
20426: CALL_OW 255
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PPUSH
20435: CALL 25972 0 3
20439: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20440: LD_VAR 0 2
20444: PUSH
20445: LD_VAR 0 4
20449: ARRAY
20450: PPUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: CALL_OW 255
20460: PPUSH
20461: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20465: LD_VAR 0 2
20469: PUSH
20470: LD_VAR 0 4
20474: ARRAY
20475: PPUSH
20476: CALL_OW 141
// end ;
20480: GO 20312
20482: POP
20483: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20484: LD_VAR 0 1
20488: PPUSH
20489: LD_EXP 84
20493: PUSH
20494: LD_VAR 0 5
20498: ARRAY
20499: PUSH
20500: LD_INT 0
20502: PLUS
20503: PPUSH
20504: CALL_OW 505
// end ;
20508: LD_VAR 0 3
20512: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20513: LD_INT 0
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
// if not hack in hackTanks then
20519: LD_VAR 0 1
20523: PUSH
20524: LD_EXP 83
20528: IN
20529: NOT
20530: IFFALSE 20534
// exit ;
20532: GO 20774
// index := GetElementIndex ( hackTanks , hack ) ;
20534: LD_ADDR_VAR 0 4
20538: PUSH
20539: LD_EXP 83
20543: PPUSH
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL 25757 0 2
20553: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20554: LD_ADDR_VAR 0 3
20558: PUSH
20559: DOUBLE
20560: LD_EXP 84
20564: PUSH
20565: LD_VAR 0 4
20569: ARRAY
20570: INC
20571: ST_TO_ADDR
20572: LD_INT 1
20574: PUSH
20575: FOR_DOWNTO
20576: IFFALSE 20748
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20578: LD_ADDR_VAR 0 5
20582: PUSH
20583: LD_EXP 84
20587: PUSH
20588: LD_VAR 0 4
20592: ARRAY
20593: PUSH
20594: LD_VAR 0 3
20598: ARRAY
20599: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20600: LD_VAR 0 5
20604: PUSH
20605: LD_INT 1
20607: ARRAY
20608: PPUSH
20609: CALL_OW 302
20613: NOT
20614: PUSH
20615: LD_VAR 0 5
20619: PUSH
20620: LD_INT 1
20622: ARRAY
20623: PPUSH
20624: CALL_OW 255
20628: PUSH
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 255
20638: NONEQUAL
20639: OR
20640: IFFALSE 20746
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20642: LD_VAR 0 5
20646: PUSH
20647: LD_INT 1
20649: ARRAY
20650: PPUSH
20651: CALL_OW 305
20655: PUSH
20656: LD_VAR 0 5
20660: PUSH
20661: LD_INT 1
20663: ARRAY
20664: PPUSH
20665: CALL_OW 255
20669: PUSH
20670: LD_VAR 0 1
20674: PPUSH
20675: CALL_OW 255
20679: EQUAL
20680: AND
20681: IFFALSE 20705
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20683: LD_VAR 0 5
20687: PUSH
20688: LD_INT 1
20690: ARRAY
20691: PPUSH
20692: LD_VAR 0 5
20696: PUSH
20697: LD_INT 2
20699: ARRAY
20700: PPUSH
20701: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20705: LD_ADDR_EXP 84
20709: PUSH
20710: LD_EXP 84
20714: PPUSH
20715: LD_VAR 0 4
20719: PPUSH
20720: LD_EXP 84
20724: PUSH
20725: LD_VAR 0 4
20729: ARRAY
20730: PPUSH
20731: LD_VAR 0 3
20735: PPUSH
20736: CALL_OW 3
20740: PPUSH
20741: CALL_OW 1
20745: ST_TO_ADDR
// end ; end ;
20746: GO 20575
20748: POP
20749: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_EXP 84
20759: PUSH
20760: LD_VAR 0 4
20764: ARRAY
20765: PUSH
20766: LD_INT 0
20768: PLUS
20769: PPUSH
20770: CALL_OW 505
// end ;
20774: LD_VAR 0 2
20778: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20779: LD_INT 0
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
// if not hack in hackTanks then
20785: LD_VAR 0 1
20789: PUSH
20790: LD_EXP 83
20794: IN
20795: NOT
20796: IFFALSE 20800
// exit ;
20798: GO 20885
// index := GetElementIndex ( hackTanks , hack ) ;
20800: LD_ADDR_VAR 0 5
20804: PUSH
20805: LD_EXP 83
20809: PPUSH
20810: LD_VAR 0 1
20814: PPUSH
20815: CALL 25757 0 2
20819: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20820: LD_ADDR_VAR 0 4
20824: PUSH
20825: DOUBLE
20826: LD_INT 1
20828: DEC
20829: ST_TO_ADDR
20830: LD_EXP 84
20834: PUSH
20835: LD_VAR 0 5
20839: ARRAY
20840: PUSH
20841: FOR_TO
20842: IFFALSE 20883
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20844: LD_EXP 84
20848: PUSH
20849: LD_VAR 0 5
20853: ARRAY
20854: PUSH
20855: LD_VAR 0 4
20859: ARRAY
20860: PUSH
20861: LD_INT 1
20863: ARRAY
20864: PUSH
20865: LD_VAR 0 2
20869: EQUAL
20870: IFFALSE 20881
// KillUnit ( vehicle ) ;
20872: LD_VAR 0 2
20876: PPUSH
20877: CALL_OW 66
20881: GO 20841
20883: POP
20884: POP
// end ; end_of_file
20885: LD_VAR 0 3
20889: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20890: LD_INT 0
20892: PPUSH
// ar_crane := 88 ;
20893: LD_ADDR_EXP 94
20897: PUSH
20898: LD_INT 88
20900: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20901: LD_ADDR_EXP 89
20905: PUSH
20906: LD_INT 89
20908: ST_TO_ADDR
// us_hack := 99 ;
20909: LD_ADDR_EXP 90
20913: PUSH
20914: LD_INT 99
20916: ST_TO_ADDR
// us_artillery := 97 ;
20917: LD_ADDR_EXP 91
20921: PUSH
20922: LD_INT 97
20924: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20925: LD_ADDR_EXP 92
20929: PUSH
20930: LD_INT 91
20932: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20933: LD_ADDR_EXP 93
20937: PUSH
20938: LD_INT 92
20940: ST_TO_ADDR
// ru_radar := 98 ;
20941: LD_ADDR_EXP 88
20945: PUSH
20946: LD_INT 98
20948: ST_TO_ADDR
// tech_Artillery := 80 ;
20949: LD_ADDR_EXP 95
20953: PUSH
20954: LD_INT 80
20956: ST_TO_ADDR
// tech_RadMat := 81 ;
20957: LD_ADDR_EXP 96
20961: PUSH
20962: LD_INT 81
20964: ST_TO_ADDR
// tech_BasicTools := 82 ;
20965: LD_ADDR_EXP 97
20969: PUSH
20970: LD_INT 82
20972: ST_TO_ADDR
// tech_Cargo := 83 ;
20973: LD_ADDR_EXP 98
20977: PUSH
20978: LD_INT 83
20980: ST_TO_ADDR
// tech_Track := 84 ;
20981: LD_ADDR_EXP 99
20985: PUSH
20986: LD_INT 84
20988: ST_TO_ADDR
// tech_Crane := 85 ;
20989: LD_ADDR_EXP 100
20993: PUSH
20994: LD_INT 85
20996: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20997: LD_ADDR_EXP 101
21001: PUSH
21002: LD_INT 86
21004: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21005: LD_ADDR_EXP 102
21009: PUSH
21010: LD_INT 87
21012: ST_TO_ADDR
// end ;
21013: LD_VAR 0 1
21017: RET
// every 1 do
21018: GO 21020
21020: DISABLE
// InitGlobalVariables ; end_of_file
21021: CALL 20890 0 0
21025: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21026: LD_INT 0
21028: PPUSH
21029: PPUSH
// if exist_mode then
21030: LD_VAR 0 2
21034: IFFALSE 21059
// unit := CreateCharacter ( prefix & ident ) else
21036: LD_ADDR_VAR 0 5
21040: PUSH
21041: LD_VAR 0 3
21045: PUSH
21046: LD_VAR 0 1
21050: STR
21051: PPUSH
21052: CALL_OW 34
21056: ST_TO_ADDR
21057: GO 21074
// unit := NewCharacter ( ident ) ;
21059: LD_ADDR_VAR 0 5
21063: PUSH
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL_OW 25
21073: ST_TO_ADDR
// result := unit ;
21074: LD_ADDR_VAR 0 4
21078: PUSH
21079: LD_VAR 0 5
21083: ST_TO_ADDR
// end ;
21084: LD_VAR 0 4
21088: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21089: LD_INT 0
21091: PPUSH
21092: PPUSH
// if not side or not nation then
21093: LD_VAR 0 1
21097: NOT
21098: PUSH
21099: LD_VAR 0 2
21103: NOT
21104: OR
21105: IFFALSE 21109
// exit ;
21107: GO 21873
// case nation of nation_american :
21109: LD_VAR 0 2
21113: PUSH
21114: LD_INT 1
21116: DOUBLE
21117: EQUAL
21118: IFTRUE 21122
21120: GO 21336
21122: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21123: LD_ADDR_VAR 0 4
21127: PUSH
21128: LD_INT 35
21130: PUSH
21131: LD_INT 45
21133: PUSH
21134: LD_INT 46
21136: PUSH
21137: LD_INT 47
21139: PUSH
21140: LD_INT 82
21142: PUSH
21143: LD_INT 83
21145: PUSH
21146: LD_INT 84
21148: PUSH
21149: LD_INT 85
21151: PUSH
21152: LD_INT 86
21154: PUSH
21155: LD_INT 1
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: LD_INT 6
21163: PUSH
21164: LD_INT 15
21166: PUSH
21167: LD_INT 16
21169: PUSH
21170: LD_INT 7
21172: PUSH
21173: LD_INT 12
21175: PUSH
21176: LD_INT 13
21178: PUSH
21179: LD_INT 10
21181: PUSH
21182: LD_INT 14
21184: PUSH
21185: LD_INT 20
21187: PUSH
21188: LD_INT 21
21190: PUSH
21191: LD_INT 22
21193: PUSH
21194: LD_INT 25
21196: PUSH
21197: LD_INT 32
21199: PUSH
21200: LD_INT 27
21202: PUSH
21203: LD_INT 36
21205: PUSH
21206: LD_INT 69
21208: PUSH
21209: LD_INT 39
21211: PUSH
21212: LD_INT 34
21214: PUSH
21215: LD_INT 40
21217: PUSH
21218: LD_INT 48
21220: PUSH
21221: LD_INT 49
21223: PUSH
21224: LD_INT 50
21226: PUSH
21227: LD_INT 51
21229: PUSH
21230: LD_INT 52
21232: PUSH
21233: LD_INT 53
21235: PUSH
21236: LD_INT 54
21238: PUSH
21239: LD_INT 55
21241: PUSH
21242: LD_INT 56
21244: PUSH
21245: LD_INT 57
21247: PUSH
21248: LD_INT 58
21250: PUSH
21251: LD_INT 59
21253: PUSH
21254: LD_INT 60
21256: PUSH
21257: LD_INT 61
21259: PUSH
21260: LD_INT 62
21262: PUSH
21263: LD_INT 80
21265: PUSH
21266: LD_INT 82
21268: PUSH
21269: LD_INT 83
21271: PUSH
21272: LD_INT 84
21274: PUSH
21275: LD_INT 85
21277: PUSH
21278: LD_INT 86
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: ST_TO_ADDR
21334: GO 21797
21336: LD_INT 2
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21566
21344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21345: LD_ADDR_VAR 0 4
21349: PUSH
21350: LD_INT 35
21352: PUSH
21353: LD_INT 45
21355: PUSH
21356: LD_INT 46
21358: PUSH
21359: LD_INT 47
21361: PUSH
21362: LD_INT 82
21364: PUSH
21365: LD_INT 83
21367: PUSH
21368: LD_INT 84
21370: PUSH
21371: LD_INT 85
21373: PUSH
21374: LD_INT 87
21376: PUSH
21377: LD_INT 70
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: LD_INT 11
21385: PUSH
21386: LD_INT 3
21388: PUSH
21389: LD_INT 4
21391: PUSH
21392: LD_INT 5
21394: PUSH
21395: LD_INT 6
21397: PUSH
21398: LD_INT 15
21400: PUSH
21401: LD_INT 18
21403: PUSH
21404: LD_INT 7
21406: PUSH
21407: LD_INT 17
21409: PUSH
21410: LD_INT 8
21412: PUSH
21413: LD_INT 20
21415: PUSH
21416: LD_INT 21
21418: PUSH
21419: LD_INT 22
21421: PUSH
21422: LD_INT 72
21424: PUSH
21425: LD_INT 26
21427: PUSH
21428: LD_INT 69
21430: PUSH
21431: LD_INT 39
21433: PUSH
21434: LD_INT 40
21436: PUSH
21437: LD_INT 41
21439: PUSH
21440: LD_INT 42
21442: PUSH
21443: LD_INT 43
21445: PUSH
21446: LD_INT 48
21448: PUSH
21449: LD_INT 49
21451: PUSH
21452: LD_INT 50
21454: PUSH
21455: LD_INT 51
21457: PUSH
21458: LD_INT 52
21460: PUSH
21461: LD_INT 53
21463: PUSH
21464: LD_INT 54
21466: PUSH
21467: LD_INT 55
21469: PUSH
21470: LD_INT 56
21472: PUSH
21473: LD_INT 60
21475: PUSH
21476: LD_INT 61
21478: PUSH
21479: LD_INT 62
21481: PUSH
21482: LD_INT 66
21484: PUSH
21485: LD_INT 67
21487: PUSH
21488: LD_INT 68
21490: PUSH
21491: LD_INT 81
21493: PUSH
21494: LD_INT 82
21496: PUSH
21497: LD_INT 83
21499: PUSH
21500: LD_INT 84
21502: PUSH
21503: LD_INT 85
21505: PUSH
21506: LD_INT 87
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: ST_TO_ADDR
21564: GO 21797
21566: LD_INT 3
21568: DOUBLE
21569: EQUAL
21570: IFTRUE 21574
21572: GO 21796
21574: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21575: LD_ADDR_VAR 0 4
21579: PUSH
21580: LD_INT 46
21582: PUSH
21583: LD_INT 47
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: LD_INT 2
21591: PUSH
21592: LD_INT 82
21594: PUSH
21595: LD_INT 83
21597: PUSH
21598: LD_INT 84
21600: PUSH
21601: LD_INT 85
21603: PUSH
21604: LD_INT 86
21606: PUSH
21607: LD_INT 11
21609: PUSH
21610: LD_INT 9
21612: PUSH
21613: LD_INT 20
21615: PUSH
21616: LD_INT 19
21618: PUSH
21619: LD_INT 21
21621: PUSH
21622: LD_INT 24
21624: PUSH
21625: LD_INT 22
21627: PUSH
21628: LD_INT 25
21630: PUSH
21631: LD_INT 28
21633: PUSH
21634: LD_INT 29
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 31
21642: PUSH
21643: LD_INT 37
21645: PUSH
21646: LD_INT 38
21648: PUSH
21649: LD_INT 32
21651: PUSH
21652: LD_INT 27
21654: PUSH
21655: LD_INT 33
21657: PUSH
21658: LD_INT 69
21660: PUSH
21661: LD_INT 39
21663: PUSH
21664: LD_INT 34
21666: PUSH
21667: LD_INT 40
21669: PUSH
21670: LD_INT 71
21672: PUSH
21673: LD_INT 23
21675: PUSH
21676: LD_INT 44
21678: PUSH
21679: LD_INT 48
21681: PUSH
21682: LD_INT 49
21684: PUSH
21685: LD_INT 50
21687: PUSH
21688: LD_INT 51
21690: PUSH
21691: LD_INT 52
21693: PUSH
21694: LD_INT 53
21696: PUSH
21697: LD_INT 54
21699: PUSH
21700: LD_INT 55
21702: PUSH
21703: LD_INT 56
21705: PUSH
21706: LD_INT 57
21708: PUSH
21709: LD_INT 58
21711: PUSH
21712: LD_INT 59
21714: PUSH
21715: LD_INT 63
21717: PUSH
21718: LD_INT 64
21720: PUSH
21721: LD_INT 65
21723: PUSH
21724: LD_INT 82
21726: PUSH
21727: LD_INT 83
21729: PUSH
21730: LD_INT 84
21732: PUSH
21733: LD_INT 85
21735: PUSH
21736: LD_INT 86
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: ST_TO_ADDR
21794: GO 21797
21796: POP
// if state > - 1 and state < 3 then
21797: LD_VAR 0 3
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: GREATER
21806: PUSH
21807: LD_VAR 0 3
21811: PUSH
21812: LD_INT 3
21814: LESS
21815: AND
21816: IFFALSE 21873
// for i in result do
21818: LD_ADDR_VAR 0 5
21822: PUSH
21823: LD_VAR 0 4
21827: PUSH
21828: FOR_IN
21829: IFFALSE 21871
// if GetTech ( i , side ) <> state then
21831: LD_VAR 0 5
21835: PPUSH
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 321
21845: PUSH
21846: LD_VAR 0 3
21850: NONEQUAL
21851: IFFALSE 21869
// result := result diff i ;
21853: LD_ADDR_VAR 0 4
21857: PUSH
21858: LD_VAR 0 4
21862: PUSH
21863: LD_VAR 0 5
21867: DIFF
21868: ST_TO_ADDR
21869: GO 21828
21871: POP
21872: POP
// end ;
21873: LD_VAR 0 4
21877: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21878: LD_INT 0
21880: PPUSH
21881: PPUSH
21882: PPUSH
// result := true ;
21883: LD_ADDR_VAR 0 3
21887: PUSH
21888: LD_INT 1
21890: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21891: LD_ADDR_VAR 0 5
21895: PUSH
21896: LD_VAR 0 2
21900: PPUSH
21901: CALL_OW 480
21905: ST_TO_ADDR
// if not tmp then
21906: LD_VAR 0 5
21910: NOT
21911: IFFALSE 21915
// exit ;
21913: GO 21964
// for i in tmp do
21915: LD_ADDR_VAR 0 4
21919: PUSH
21920: LD_VAR 0 5
21924: PUSH
21925: FOR_IN
21926: IFFALSE 21962
// if GetTech ( i , side ) <> state_researched then
21928: LD_VAR 0 4
21932: PPUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 321
21942: PUSH
21943: LD_INT 2
21945: NONEQUAL
21946: IFFALSE 21960
// begin result := false ;
21948: LD_ADDR_VAR 0 3
21952: PUSH
21953: LD_INT 0
21955: ST_TO_ADDR
// exit ;
21956: POP
21957: POP
21958: GO 21964
// end ;
21960: GO 21925
21962: POP
21963: POP
// end ;
21964: LD_VAR 0 3
21968: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21969: LD_INT 0
21971: PPUSH
21972: PPUSH
21973: PPUSH
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
21980: PPUSH
21981: PPUSH
21982: PPUSH
21983: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21984: LD_VAR 0 1
21988: NOT
21989: PUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 257
21999: PUSH
22000: LD_INT 9
22002: NONEQUAL
22003: OR
22004: IFFALSE 22008
// exit ;
22006: GO 22581
// side := GetSide ( unit ) ;
22008: LD_ADDR_VAR 0 9
22012: PUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL_OW 255
22022: ST_TO_ADDR
// tech_space := tech_spacanom ;
22023: LD_ADDR_VAR 0 12
22027: PUSH
22028: LD_INT 29
22030: ST_TO_ADDR
// tech_time := tech_taurad ;
22031: LD_ADDR_VAR 0 13
22035: PUSH
22036: LD_INT 28
22038: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22039: LD_ADDR_VAR 0 11
22043: PUSH
22044: LD_VAR 0 1
22048: PPUSH
22049: CALL_OW 310
22053: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22054: LD_VAR 0 11
22058: PPUSH
22059: CALL_OW 247
22063: PUSH
22064: LD_INT 2
22066: EQUAL
22067: IFFALSE 22071
// exit ;
22069: GO 22581
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22071: LD_ADDR_VAR 0 8
22075: PUSH
22076: LD_INT 81
22078: PUSH
22079: LD_VAR 0 9
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 3
22090: PUSH
22091: LD_INT 21
22093: PUSH
22094: LD_INT 3
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 69
22113: ST_TO_ADDR
// if not tmp then
22114: LD_VAR 0 8
22118: NOT
22119: IFFALSE 22123
// exit ;
22121: GO 22581
// if in_unit then
22123: LD_VAR 0 11
22127: IFFALSE 22151
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22129: LD_ADDR_VAR 0 10
22133: PUSH
22134: LD_VAR 0 8
22138: PPUSH
22139: LD_VAR 0 11
22143: PPUSH
22144: CALL_OW 74
22148: ST_TO_ADDR
22149: GO 22171
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22151: LD_ADDR_VAR 0 10
22155: PUSH
22156: LD_VAR 0 8
22160: PPUSH
22161: LD_VAR 0 1
22165: PPUSH
22166: CALL_OW 74
22170: ST_TO_ADDR
// if not enemy then
22171: LD_VAR 0 10
22175: NOT
22176: IFFALSE 22180
// exit ;
22178: GO 22581
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22180: LD_VAR 0 11
22184: PUSH
22185: LD_VAR 0 11
22189: PPUSH
22190: LD_VAR 0 10
22194: PPUSH
22195: CALL_OW 296
22199: PUSH
22200: LD_INT 13
22202: GREATER
22203: AND
22204: PUSH
22205: LD_VAR 0 1
22209: PPUSH
22210: LD_VAR 0 10
22214: PPUSH
22215: CALL_OW 296
22219: PUSH
22220: LD_INT 12
22222: GREATER
22223: OR
22224: IFFALSE 22228
// exit ;
22226: GO 22581
// missile := [ 1 ] ;
22228: LD_ADDR_VAR 0 14
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22239: LD_VAR 0 9
22243: PPUSH
22244: LD_VAR 0 12
22248: PPUSH
22249: CALL_OW 325
22253: IFFALSE 22282
// missile := Insert ( missile , missile + 1 , 2 ) ;
22255: LD_ADDR_VAR 0 14
22259: PUSH
22260: LD_VAR 0 14
22264: PPUSH
22265: LD_VAR 0 14
22269: PUSH
22270: LD_INT 1
22272: PLUS
22273: PPUSH
22274: LD_INT 2
22276: PPUSH
22277: CALL_OW 2
22281: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22282: LD_VAR 0 9
22286: PPUSH
22287: LD_VAR 0 13
22291: PPUSH
22292: CALL_OW 325
22296: PUSH
22297: LD_VAR 0 10
22301: PPUSH
22302: CALL_OW 255
22306: PPUSH
22307: LD_VAR 0 13
22311: PPUSH
22312: CALL_OW 325
22316: NOT
22317: AND
22318: IFFALSE 22347
// missile := Insert ( missile , missile + 1 , 3 ) ;
22320: LD_ADDR_VAR 0 14
22324: PUSH
22325: LD_VAR 0 14
22329: PPUSH
22330: LD_VAR 0 14
22334: PUSH
22335: LD_INT 1
22337: PLUS
22338: PPUSH
22339: LD_INT 3
22341: PPUSH
22342: CALL_OW 2
22346: ST_TO_ADDR
// if missile < 2 then
22347: LD_VAR 0 14
22351: PUSH
22352: LD_INT 2
22354: LESS
22355: IFFALSE 22359
// exit ;
22357: GO 22581
// x := GetX ( enemy ) ;
22359: LD_ADDR_VAR 0 4
22363: PUSH
22364: LD_VAR 0 10
22368: PPUSH
22369: CALL_OW 250
22373: ST_TO_ADDR
// y := GetY ( enemy ) ;
22374: LD_ADDR_VAR 0 5
22378: PUSH
22379: LD_VAR 0 10
22383: PPUSH
22384: CALL_OW 251
22388: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22389: LD_ADDR_VAR 0 6
22393: PUSH
22394: LD_VAR 0 4
22398: PUSH
22399: LD_INT 1
22401: NEG
22402: PPUSH
22403: LD_INT 1
22405: PPUSH
22406: CALL_OW 12
22410: PLUS
22411: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22412: LD_ADDR_VAR 0 7
22416: PUSH
22417: LD_VAR 0 5
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PPUSH
22426: LD_INT 1
22428: PPUSH
22429: CALL_OW 12
22433: PLUS
22434: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22435: LD_VAR 0 6
22439: PPUSH
22440: LD_VAR 0 7
22444: PPUSH
22445: CALL_OW 488
22449: NOT
22450: IFFALSE 22472
// begin _x := x ;
22452: LD_ADDR_VAR 0 6
22456: PUSH
22457: LD_VAR 0 4
22461: ST_TO_ADDR
// _y := y ;
22462: LD_ADDR_VAR 0 7
22466: PUSH
22467: LD_VAR 0 5
22471: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22472: LD_ADDR_VAR 0 3
22476: PUSH
22477: LD_INT 1
22479: PPUSH
22480: LD_VAR 0 14
22484: PPUSH
22485: CALL_OW 12
22489: ST_TO_ADDR
// case i of 1 :
22490: LD_VAR 0 3
22494: PUSH
22495: LD_INT 1
22497: DOUBLE
22498: EQUAL
22499: IFTRUE 22503
22501: GO 22520
22503: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22504: LD_VAR 0 1
22508: PPUSH
22509: LD_VAR 0 10
22513: PPUSH
22514: CALL_OW 115
22518: GO 22581
22520: LD_INT 2
22522: DOUBLE
22523: EQUAL
22524: IFTRUE 22528
22526: GO 22550
22528: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22529: LD_VAR 0 1
22533: PPUSH
22534: LD_VAR 0 6
22538: PPUSH
22539: LD_VAR 0 7
22543: PPUSH
22544: CALL_OW 153
22548: GO 22581
22550: LD_INT 3
22552: DOUBLE
22553: EQUAL
22554: IFTRUE 22558
22556: GO 22580
22558: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22559: LD_VAR 0 1
22563: PPUSH
22564: LD_VAR 0 6
22568: PPUSH
22569: LD_VAR 0 7
22573: PPUSH
22574: CALL_OW 154
22578: GO 22581
22580: POP
// end ;
22581: LD_VAR 0 2
22585: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22586: LD_INT 0
22588: PPUSH
22589: PPUSH
22590: PPUSH
22591: PPUSH
22592: PPUSH
22593: PPUSH
// if not unit or not building then
22594: LD_VAR 0 1
22598: NOT
22599: PUSH
22600: LD_VAR 0 2
22604: NOT
22605: OR
22606: IFFALSE 22610
// exit ;
22608: GO 22768
// x := GetX ( building ) ;
22610: LD_ADDR_VAR 0 5
22614: PUSH
22615: LD_VAR 0 2
22619: PPUSH
22620: CALL_OW 250
22624: ST_TO_ADDR
// y := GetY ( building ) ;
22625: LD_ADDR_VAR 0 6
22629: PUSH
22630: LD_VAR 0 2
22634: PPUSH
22635: CALL_OW 251
22639: ST_TO_ADDR
// for i = 0 to 5 do
22640: LD_ADDR_VAR 0 4
22644: PUSH
22645: DOUBLE
22646: LD_INT 0
22648: DEC
22649: ST_TO_ADDR
22650: LD_INT 5
22652: PUSH
22653: FOR_TO
22654: IFFALSE 22766
// begin _x := ShiftX ( x , i , 3 ) ;
22656: LD_ADDR_VAR 0 7
22660: PUSH
22661: LD_VAR 0 5
22665: PPUSH
22666: LD_VAR 0 4
22670: PPUSH
22671: LD_INT 3
22673: PPUSH
22674: CALL_OW 272
22678: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22679: LD_ADDR_VAR 0 8
22683: PUSH
22684: LD_VAR 0 6
22688: PPUSH
22689: LD_VAR 0 4
22693: PPUSH
22694: LD_INT 3
22696: PPUSH
22697: CALL_OW 273
22701: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22702: LD_VAR 0 7
22706: PPUSH
22707: LD_VAR 0 8
22711: PPUSH
22712: CALL_OW 488
22716: NOT
22717: IFFALSE 22721
// continue ;
22719: GO 22653
// if HexInfo ( _x , _y ) = 0 then
22721: LD_VAR 0 7
22725: PPUSH
22726: LD_VAR 0 8
22730: PPUSH
22731: CALL_OW 428
22735: PUSH
22736: LD_INT 0
22738: EQUAL
22739: IFFALSE 22764
// begin ComMoveXY ( unit , _x , _y ) ;
22741: LD_VAR 0 1
22745: PPUSH
22746: LD_VAR 0 7
22750: PPUSH
22751: LD_VAR 0 8
22755: PPUSH
22756: CALL_OW 111
// exit ;
22760: POP
22761: POP
22762: GO 22768
// end ; end ;
22764: GO 22653
22766: POP
22767: POP
// end ;
22768: LD_VAR 0 3
22772: RET
// export function ScanBase ( side , base_area ) ; begin
22773: LD_INT 0
22775: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22776: LD_ADDR_VAR 0 3
22780: PUSH
22781: LD_VAR 0 2
22785: PPUSH
22786: LD_INT 81
22788: PUSH
22789: LD_VAR 0 1
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PPUSH
22798: CALL_OW 70
22802: ST_TO_ADDR
// end ;
22803: LD_VAR 0 3
22807: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
22812: PPUSH
22813: PPUSH
// result := false ;
22814: LD_ADDR_VAR 0 2
22818: PUSH
22819: LD_INT 0
22821: ST_TO_ADDR
// side := GetSide ( unit ) ;
22822: LD_ADDR_VAR 0 3
22826: PUSH
22827: LD_VAR 0 1
22831: PPUSH
22832: CALL_OW 255
22836: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22837: LD_ADDR_VAR 0 4
22841: PUSH
22842: LD_VAR 0 1
22846: PPUSH
22847: CALL_OW 248
22851: ST_TO_ADDR
// case nat of 1 :
22852: LD_VAR 0 4
22856: PUSH
22857: LD_INT 1
22859: DOUBLE
22860: EQUAL
22861: IFTRUE 22865
22863: GO 22876
22865: POP
// tech := tech_lassight ; 2 :
22866: LD_ADDR_VAR 0 5
22870: PUSH
22871: LD_INT 12
22873: ST_TO_ADDR
22874: GO 22915
22876: LD_INT 2
22878: DOUBLE
22879: EQUAL
22880: IFTRUE 22884
22882: GO 22895
22884: POP
// tech := tech_mortar ; 3 :
22885: LD_ADDR_VAR 0 5
22889: PUSH
22890: LD_INT 41
22892: ST_TO_ADDR
22893: GO 22915
22895: LD_INT 3
22897: DOUBLE
22898: EQUAL
22899: IFTRUE 22903
22901: GO 22914
22903: POP
// tech := tech_bazooka ; end ;
22904: LD_ADDR_VAR 0 5
22908: PUSH
22909: LD_INT 44
22911: ST_TO_ADDR
22912: GO 22915
22914: POP
// if Researched ( side , tech ) then
22915: LD_VAR 0 3
22919: PPUSH
22920: LD_VAR 0 5
22924: PPUSH
22925: CALL_OW 325
22929: IFFALSE 22956
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22931: LD_ADDR_VAR 0 2
22935: PUSH
22936: LD_INT 5
22938: PUSH
22939: LD_INT 8
22941: PUSH
22942: LD_INT 9
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: LD_VAR 0 4
22954: ARRAY
22955: ST_TO_ADDR
// end ;
22956: LD_VAR 0 2
22960: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22961: LD_INT 0
22963: PPUSH
22964: PPUSH
22965: PPUSH
// if not mines then
22966: LD_VAR 0 2
22970: NOT
22971: IFFALSE 22975
// exit ;
22973: GO 23119
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22975: LD_ADDR_VAR 0 5
22979: PUSH
22980: LD_INT 81
22982: PUSH
22983: LD_VAR 0 1
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 3
22994: PUSH
22995: LD_INT 21
22997: PUSH
22998: LD_INT 3
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PPUSH
23013: CALL_OW 69
23017: ST_TO_ADDR
// for i in mines do
23018: LD_ADDR_VAR 0 4
23022: PUSH
23023: LD_VAR 0 2
23027: PUSH
23028: FOR_IN
23029: IFFALSE 23117
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23031: LD_VAR 0 4
23035: PUSH
23036: LD_INT 1
23038: ARRAY
23039: PPUSH
23040: LD_VAR 0 4
23044: PUSH
23045: LD_INT 2
23047: ARRAY
23048: PPUSH
23049: CALL_OW 458
23053: NOT
23054: IFFALSE 23058
// continue ;
23056: GO 23028
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23058: LD_VAR 0 4
23062: PUSH
23063: LD_INT 1
23065: ARRAY
23066: PPUSH
23067: LD_VAR 0 4
23071: PUSH
23072: LD_INT 2
23074: ARRAY
23075: PPUSH
23076: CALL_OW 428
23080: PUSH
23081: LD_VAR 0 5
23085: IN
23086: IFFALSE 23115
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23088: LD_VAR 0 4
23092: PUSH
23093: LD_INT 1
23095: ARRAY
23096: PPUSH
23097: LD_VAR 0 4
23101: PUSH
23102: LD_INT 2
23104: ARRAY
23105: PPUSH
23106: LD_VAR 0 1
23110: PPUSH
23111: CALL_OW 456
// end ;
23115: GO 23028
23117: POP
23118: POP
// end ;
23119: LD_VAR 0 3
23123: RET
// export function Count ( array ) ; var i ; begin
23124: LD_INT 0
23126: PPUSH
23127: PPUSH
// result := 0 ;
23128: LD_ADDR_VAR 0 2
23132: PUSH
23133: LD_INT 0
23135: ST_TO_ADDR
// for i in array do
23136: LD_ADDR_VAR 0 3
23140: PUSH
23141: LD_VAR 0 1
23145: PUSH
23146: FOR_IN
23147: IFFALSE 23171
// if i then
23149: LD_VAR 0 3
23153: IFFALSE 23169
// result := result + 1 ;
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_VAR 0 2
23164: PUSH
23165: LD_INT 1
23167: PLUS
23168: ST_TO_ADDR
23169: GO 23146
23171: POP
23172: POP
// end ;
23173: LD_VAR 0 2
23177: RET
// export function IsEmpty ( building ) ; begin
23178: LD_INT 0
23180: PPUSH
// if not building then
23181: LD_VAR 0 1
23185: NOT
23186: IFFALSE 23190
// exit ;
23188: GO 23233
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23190: LD_ADDR_VAR 0 2
23194: PUSH
23195: LD_VAR 0 1
23199: PUSH
23200: LD_INT 22
23202: PUSH
23203: LD_VAR 0 1
23207: PPUSH
23208: CALL_OW 255
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 58
23219: PUSH
23220: EMPTY
23221: LIST
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PPUSH
23227: CALL_OW 69
23231: IN
23232: ST_TO_ADDR
// end ;
23233: LD_VAR 0 2
23237: RET
// export function IsNotFull ( building ) ; begin
23238: LD_INT 0
23240: PPUSH
// if not building then
23241: LD_VAR 0 1
23245: NOT
23246: IFFALSE 23250
// exit ;
23248: GO 23269
// result := UnitsInside ( building ) < 6 ;
23250: LD_ADDR_VAR 0 2
23254: PUSH
23255: LD_VAR 0 1
23259: PPUSH
23260: CALL_OW 313
23264: PUSH
23265: LD_INT 6
23267: LESS
23268: ST_TO_ADDR
// end ;
23269: LD_VAR 0 2
23273: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23274: LD_INT 0
23276: PPUSH
23277: PPUSH
23278: PPUSH
23279: PPUSH
// tmp := [ ] ;
23280: LD_ADDR_VAR 0 3
23284: PUSH
23285: EMPTY
23286: ST_TO_ADDR
// list := [ ] ;
23287: LD_ADDR_VAR 0 5
23291: PUSH
23292: EMPTY
23293: ST_TO_ADDR
// for i = 16 to 25 do
23294: LD_ADDR_VAR 0 4
23298: PUSH
23299: DOUBLE
23300: LD_INT 16
23302: DEC
23303: ST_TO_ADDR
23304: LD_INT 25
23306: PUSH
23307: FOR_TO
23308: IFFALSE 23381
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23310: LD_ADDR_VAR 0 3
23314: PUSH
23315: LD_VAR 0 3
23319: PUSH
23320: LD_INT 22
23322: PUSH
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 255
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 91
23339: PUSH
23340: LD_VAR 0 1
23344: PUSH
23345: LD_INT 6
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 30
23355: PUSH
23356: LD_VAR 0 4
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: PPUSH
23373: CALL_OW 69
23377: ADD
23378: ST_TO_ADDR
23379: GO 23307
23381: POP
23382: POP
// for i = 1 to tmp do
23383: LD_ADDR_VAR 0 4
23387: PUSH
23388: DOUBLE
23389: LD_INT 1
23391: DEC
23392: ST_TO_ADDR
23393: LD_VAR 0 3
23397: PUSH
23398: FOR_TO
23399: IFFALSE 23487
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23401: LD_ADDR_VAR 0 5
23405: PUSH
23406: LD_VAR 0 5
23410: PUSH
23411: LD_VAR 0 3
23415: PUSH
23416: LD_VAR 0 4
23420: ARRAY
23421: PPUSH
23422: CALL_OW 266
23426: PUSH
23427: LD_VAR 0 3
23431: PUSH
23432: LD_VAR 0 4
23436: ARRAY
23437: PPUSH
23438: CALL_OW 250
23442: PUSH
23443: LD_VAR 0 3
23447: PUSH
23448: LD_VAR 0 4
23452: ARRAY
23453: PPUSH
23454: CALL_OW 251
23458: PUSH
23459: LD_VAR 0 3
23463: PUSH
23464: LD_VAR 0 4
23468: ARRAY
23469: PPUSH
23470: CALL_OW 254
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: PUSH
23481: EMPTY
23482: LIST
23483: ADD
23484: ST_TO_ADDR
23485: GO 23398
23487: POP
23488: POP
// result := list ;
23489: LD_ADDR_VAR 0 2
23493: PUSH
23494: LD_VAR 0 5
23498: ST_TO_ADDR
// end ;
23499: LD_VAR 0 2
23503: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23504: LD_INT 0
23506: PPUSH
23507: PPUSH
23508: PPUSH
23509: PPUSH
23510: PPUSH
23511: PPUSH
23512: PPUSH
// if not factory then
23513: LD_VAR 0 1
23517: NOT
23518: IFFALSE 23522
// exit ;
23520: GO 24115
// if control = control_apeman then
23522: LD_VAR 0 4
23526: PUSH
23527: LD_INT 5
23529: EQUAL
23530: IFFALSE 23639
// begin tmp := UnitsInside ( factory ) ;
23532: LD_ADDR_VAR 0 8
23536: PUSH
23537: LD_VAR 0 1
23541: PPUSH
23542: CALL_OW 313
23546: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23547: LD_VAR 0 8
23551: PPUSH
23552: LD_INT 25
23554: PUSH
23555: LD_INT 12
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 72
23566: NOT
23567: IFFALSE 23577
// control := control_manual ;
23569: LD_ADDR_VAR 0 4
23573: PUSH
23574: LD_INT 1
23576: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23577: LD_ADDR_VAR 0 8
23581: PUSH
23582: LD_VAR 0 1
23586: PPUSH
23587: CALL 23274 0 1
23591: ST_TO_ADDR
// if tmp then
23592: LD_VAR 0 8
23596: IFFALSE 23639
// begin for i in tmp do
23598: LD_ADDR_VAR 0 7
23602: PUSH
23603: LD_VAR 0 8
23607: PUSH
23608: FOR_IN
23609: IFFALSE 23637
// if i [ 1 ] = b_ext_radio then
23611: LD_VAR 0 7
23615: PUSH
23616: LD_INT 1
23618: ARRAY
23619: PUSH
23620: LD_INT 22
23622: EQUAL
23623: IFFALSE 23635
// begin control := control_remote ;
23625: LD_ADDR_VAR 0 4
23629: PUSH
23630: LD_INT 2
23632: ST_TO_ADDR
// break ;
23633: GO 23637
// end ;
23635: GO 23608
23637: POP
23638: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23639: LD_VAR 0 1
23643: PPUSH
23644: LD_VAR 0 2
23648: PPUSH
23649: LD_VAR 0 3
23653: PPUSH
23654: LD_VAR 0 4
23658: PPUSH
23659: LD_VAR 0 5
23663: PPUSH
23664: CALL_OW 448
23668: IFFALSE 23703
// begin result := [ chassis , engine , control , weapon ] ;
23670: LD_ADDR_VAR 0 6
23674: PUSH
23675: LD_VAR 0 2
23679: PUSH
23680: LD_VAR 0 3
23684: PUSH
23685: LD_VAR 0 4
23689: PUSH
23690: LD_VAR 0 5
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: ST_TO_ADDR
// exit ;
23701: GO 24115
// end ; _chassis := AvailableChassisList ( factory ) ;
23703: LD_ADDR_VAR 0 9
23707: PUSH
23708: LD_VAR 0 1
23712: PPUSH
23713: CALL_OW 475
23717: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23718: LD_ADDR_VAR 0 11
23722: PUSH
23723: LD_VAR 0 1
23727: PPUSH
23728: CALL_OW 476
23732: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23733: LD_ADDR_VAR 0 12
23737: PUSH
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 477
23747: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23748: LD_ADDR_VAR 0 10
23752: PUSH
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL_OW 478
23762: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23763: LD_VAR 0 9
23767: NOT
23768: PUSH
23769: LD_VAR 0 11
23773: NOT
23774: OR
23775: PUSH
23776: LD_VAR 0 12
23780: NOT
23781: OR
23782: PUSH
23783: LD_VAR 0 10
23787: NOT
23788: OR
23789: IFFALSE 23824
// begin result := [ chassis , engine , control , weapon ] ;
23791: LD_ADDR_VAR 0 6
23795: PUSH
23796: LD_VAR 0 2
23800: PUSH
23801: LD_VAR 0 3
23805: PUSH
23806: LD_VAR 0 4
23810: PUSH
23811: LD_VAR 0 5
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
// exit ;
23822: GO 24115
// end ; if not chassis in _chassis then
23824: LD_VAR 0 2
23828: PUSH
23829: LD_VAR 0 9
23833: IN
23834: NOT
23835: IFFALSE 23861
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23837: LD_ADDR_VAR 0 2
23841: PUSH
23842: LD_VAR 0 9
23846: PUSH
23847: LD_INT 1
23849: PPUSH
23850: LD_VAR 0 9
23854: PPUSH
23855: CALL_OW 12
23859: ARRAY
23860: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23861: LD_VAR 0 2
23865: PPUSH
23866: LD_VAR 0 3
23870: PPUSH
23871: CALL 24120 0 2
23875: NOT
23876: IFFALSE 23935
// repeat engine := _engine [ 1 ] ;
23878: LD_ADDR_VAR 0 3
23882: PUSH
23883: LD_VAR 0 11
23887: PUSH
23888: LD_INT 1
23890: ARRAY
23891: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23892: LD_ADDR_VAR 0 11
23896: PUSH
23897: LD_VAR 0 11
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: CALL_OW 3
23909: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23910: LD_VAR 0 2
23914: PPUSH
23915: LD_VAR 0 3
23919: PPUSH
23920: CALL 24120 0 2
23924: PUSH
23925: LD_VAR 0 11
23929: PUSH
23930: EMPTY
23931: EQUAL
23932: OR
23933: IFFALSE 23878
// if not control in _control then
23935: LD_VAR 0 4
23939: PUSH
23940: LD_VAR 0 12
23944: IN
23945: NOT
23946: IFFALSE 23972
// control := _control [ rand ( 1 , _control ) ] ;
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: LD_VAR 0 12
23957: PUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_VAR 0 12
23965: PPUSH
23966: CALL_OW 12
23970: ARRAY
23971: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23972: LD_VAR 0 2
23976: PPUSH
23977: LD_VAR 0 5
23981: PPUSH
23982: CALL 24340 0 2
23986: NOT
23987: IFFALSE 24046
// repeat weapon := _weapon [ 1 ] ;
23989: LD_ADDR_VAR 0 5
23993: PUSH
23994: LD_VAR 0 10
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24003: LD_ADDR_VAR 0 10
24007: PUSH
24008: LD_VAR 0 10
24012: PPUSH
24013: LD_INT 1
24015: PPUSH
24016: CALL_OW 3
24020: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24021: LD_VAR 0 2
24025: PPUSH
24026: LD_VAR 0 5
24030: PPUSH
24031: CALL 24340 0 2
24035: PUSH
24036: LD_VAR 0 10
24040: PUSH
24041: EMPTY
24042: EQUAL
24043: OR
24044: IFFALSE 23989
// result := [ ] ;
24046: LD_ADDR_VAR 0 6
24050: PUSH
24051: EMPTY
24052: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24053: LD_VAR 0 1
24057: PPUSH
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_VAR 0 3
24067: PPUSH
24068: LD_VAR 0 4
24072: PPUSH
24073: LD_VAR 0 5
24077: PPUSH
24078: CALL_OW 448
24082: IFFALSE 24115
// result := [ chassis , engine , control , weapon ] ;
24084: LD_ADDR_VAR 0 6
24088: PUSH
24089: LD_VAR 0 2
24093: PUSH
24094: LD_VAR 0 3
24098: PUSH
24099: LD_VAR 0 4
24103: PUSH
24104: LD_VAR 0 5
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: ST_TO_ADDR
// end ;
24115: LD_VAR 0 6
24119: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24120: LD_INT 0
24122: PPUSH
// if not chassis or not engine then
24123: LD_VAR 0 1
24127: NOT
24128: PUSH
24129: LD_VAR 0 2
24133: NOT
24134: OR
24135: IFFALSE 24139
// exit ;
24137: GO 24335
// case engine of engine_solar :
24139: LD_VAR 0 2
24143: PUSH
24144: LD_INT 2
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24190
24152: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24153: LD_ADDR_VAR 0 3
24157: PUSH
24158: LD_INT 11
24160: PUSH
24161: LD_INT 12
24163: PUSH
24164: LD_INT 13
24166: PUSH
24167: LD_INT 14
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: LD_INT 2
24175: PUSH
24176: LD_INT 3
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: ST_TO_ADDR
24188: GO 24319
24190: LD_INT 1
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24260
24198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24199: LD_ADDR_VAR 0 3
24203: PUSH
24204: LD_INT 11
24206: PUSH
24207: LD_INT 12
24209: PUSH
24210: LD_INT 13
24212: PUSH
24213: LD_INT 14
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 3
24224: PUSH
24225: LD_INT 4
24227: PUSH
24228: LD_INT 5
24230: PUSH
24231: LD_INT 21
24233: PUSH
24234: LD_INT 23
24236: PUSH
24237: LD_INT 22
24239: PUSH
24240: LD_INT 24
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: ST_TO_ADDR
24258: GO 24319
24260: LD_INT 3
24262: DOUBLE
24263: EQUAL
24264: IFTRUE 24268
24266: GO 24318
24268: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24269: LD_ADDR_VAR 0 3
24273: PUSH
24274: LD_INT 13
24276: PUSH
24277: LD_INT 14
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 3
24285: PUSH
24286: LD_INT 4
24288: PUSH
24289: LD_INT 5
24291: PUSH
24292: LD_INT 21
24294: PUSH
24295: LD_INT 22
24297: PUSH
24298: LD_INT 23
24300: PUSH
24301: LD_INT 24
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: ST_TO_ADDR
24316: GO 24319
24318: POP
// result := ( chassis in result ) ;
24319: LD_ADDR_VAR 0 3
24323: PUSH
24324: LD_VAR 0 1
24328: PUSH
24329: LD_VAR 0 3
24333: IN
24334: ST_TO_ADDR
// end ;
24335: LD_VAR 0 3
24339: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24340: LD_INT 0
24342: PPUSH
// if not chassis or not weapon then
24343: LD_VAR 0 1
24347: NOT
24348: PUSH
24349: LD_VAR 0 2
24353: NOT
24354: OR
24355: IFFALSE 24359
// exit ;
24357: GO 25385
// case weapon of us_machine_gun :
24359: LD_VAR 0 2
24363: PUSH
24364: LD_INT 2
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24402
24372: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24373: LD_ADDR_VAR 0 3
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: LD_INT 2
24383: PUSH
24384: LD_INT 3
24386: PUSH
24387: LD_INT 4
24389: PUSH
24390: LD_INT 5
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: ST_TO_ADDR
24400: GO 25369
24402: LD_INT 3
24404: DOUBLE
24405: EQUAL
24406: IFTRUE 24410
24408: GO 24440
24410: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24411: LD_ADDR_VAR 0 3
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: LD_INT 3
24424: PUSH
24425: LD_INT 4
24427: PUSH
24428: LD_INT 5
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: ST_TO_ADDR
24438: GO 25369
24440: LD_INT 11
24442: DOUBLE
24443: EQUAL
24444: IFTRUE 24448
24446: GO 24478
24448: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24449: LD_ADDR_VAR 0 3
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: LD_INT 3
24462: PUSH
24463: LD_INT 4
24465: PUSH
24466: LD_INT 5
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: ST_TO_ADDR
24476: GO 25369
24478: LD_INT 4
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24512
24486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24487: LD_ADDR_VAR 0 3
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: LD_INT 4
24500: PUSH
24501: LD_INT 5
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: ST_TO_ADDR
24510: GO 25369
24512: LD_INT 5
24514: DOUBLE
24515: EQUAL
24516: IFTRUE 24520
24518: GO 24546
24520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24521: LD_ADDR_VAR 0 3
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: LD_INT 3
24531: PUSH
24532: LD_INT 4
24534: PUSH
24535: LD_INT 5
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: ST_TO_ADDR
24544: GO 25369
24546: LD_INT 9
24548: DOUBLE
24549: EQUAL
24550: IFTRUE 24554
24552: GO 24580
24554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24555: LD_ADDR_VAR 0 3
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 3
24565: PUSH
24566: LD_INT 4
24568: PUSH
24569: LD_INT 5
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: ST_TO_ADDR
24578: GO 25369
24580: LD_INT 7
24582: DOUBLE
24583: EQUAL
24584: IFTRUE 24588
24586: GO 24614
24588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24589: LD_ADDR_VAR 0 3
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 3
24599: PUSH
24600: LD_INT 4
24602: PUSH
24603: LD_INT 5
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: ST_TO_ADDR
24612: GO 25369
24614: LD_INT 12
24616: DOUBLE
24617: EQUAL
24618: IFTRUE 24622
24620: GO 24648
24622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24623: LD_ADDR_VAR 0 3
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: LD_INT 3
24633: PUSH
24634: LD_INT 4
24636: PUSH
24637: LD_INT 5
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: ST_TO_ADDR
24646: GO 25369
24648: LD_INT 13
24650: DOUBLE
24651: EQUAL
24652: IFTRUE 24656
24654: GO 24682
24656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: LD_INT 2
24664: PUSH
24665: LD_INT 3
24667: PUSH
24668: LD_INT 4
24670: PUSH
24671: LD_INT 5
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: ST_TO_ADDR
24680: GO 25369
24682: LD_INT 14
24684: DOUBLE
24685: EQUAL
24686: IFTRUE 24690
24688: GO 24708
24690: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_INT 4
24698: PUSH
24699: LD_INT 5
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: ST_TO_ADDR
24706: GO 25369
24708: LD_INT 6
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24716
24714: GO 24734
24716: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24717: LD_ADDR_VAR 0 3
24721: PUSH
24722: LD_INT 4
24724: PUSH
24725: LD_INT 5
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: ST_TO_ADDR
24732: GO 25369
24734: LD_INT 10
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24760
24742: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24743: LD_ADDR_VAR 0 3
24747: PUSH
24748: LD_INT 4
24750: PUSH
24751: LD_INT 5
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: ST_TO_ADDR
24758: GO 25369
24760: LD_INT 22
24762: DOUBLE
24763: EQUAL
24764: IFTRUE 24768
24766: GO 24794
24768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24769: LD_ADDR_VAR 0 3
24773: PUSH
24774: LD_INT 11
24776: PUSH
24777: LD_INT 12
24779: PUSH
24780: LD_INT 13
24782: PUSH
24783: LD_INT 14
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: ST_TO_ADDR
24792: GO 25369
24794: LD_INT 23
24796: DOUBLE
24797: EQUAL
24798: IFTRUE 24802
24800: GO 24828
24802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24803: LD_ADDR_VAR 0 3
24807: PUSH
24808: LD_INT 11
24810: PUSH
24811: LD_INT 12
24813: PUSH
24814: LD_INT 13
24816: PUSH
24817: LD_INT 14
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: ST_TO_ADDR
24826: GO 25369
24828: LD_INT 24
24830: DOUBLE
24831: EQUAL
24832: IFTRUE 24836
24834: GO 24862
24836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: LD_INT 11
24844: PUSH
24845: LD_INT 12
24847: PUSH
24848: LD_INT 13
24850: PUSH
24851: LD_INT 14
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: ST_TO_ADDR
24860: GO 25369
24862: LD_INT 30
24864: DOUBLE
24865: EQUAL
24866: IFTRUE 24870
24868: GO 24896
24870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24871: LD_ADDR_VAR 0 3
24875: PUSH
24876: LD_INT 11
24878: PUSH
24879: LD_INT 12
24881: PUSH
24882: LD_INT 13
24884: PUSH
24885: LD_INT 14
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: ST_TO_ADDR
24894: GO 25369
24896: LD_INT 25
24898: DOUBLE
24899: EQUAL
24900: IFTRUE 24904
24902: GO 24922
24904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24905: LD_ADDR_VAR 0 3
24909: PUSH
24910: LD_INT 13
24912: PUSH
24913: LD_INT 14
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: ST_TO_ADDR
24920: GO 25369
24922: LD_INT 27
24924: DOUBLE
24925: EQUAL
24926: IFTRUE 24930
24928: GO 24948
24930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24931: LD_ADDR_VAR 0 3
24935: PUSH
24936: LD_INT 13
24938: PUSH
24939: LD_INT 14
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: ST_TO_ADDR
24946: GO 25369
24948: LD_INT 28
24950: DOUBLE
24951: EQUAL
24952: IFTRUE 24956
24954: GO 24974
24956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24957: LD_ADDR_VAR 0 3
24961: PUSH
24962: LD_INT 13
24964: PUSH
24965: LD_INT 14
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: ST_TO_ADDR
24972: GO 25369
24974: LD_INT 29
24976: DOUBLE
24977: EQUAL
24978: IFTRUE 24982
24980: GO 25000
24982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24983: LD_ADDR_VAR 0 3
24987: PUSH
24988: LD_INT 13
24990: PUSH
24991: LD_INT 14
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: ST_TO_ADDR
24998: GO 25369
25000: LD_INT 31
25002: DOUBLE
25003: EQUAL
25004: IFTRUE 25008
25006: GO 25026
25008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_INT 13
25016: PUSH
25017: LD_INT 14
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: ST_TO_ADDR
25024: GO 25369
25026: LD_INT 26
25028: DOUBLE
25029: EQUAL
25030: IFTRUE 25034
25032: GO 25052
25034: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25035: LD_ADDR_VAR 0 3
25039: PUSH
25040: LD_INT 13
25042: PUSH
25043: LD_INT 14
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: ST_TO_ADDR
25050: GO 25369
25052: LD_INT 42
25054: DOUBLE
25055: EQUAL
25056: IFTRUE 25060
25058: GO 25086
25060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25061: LD_ADDR_VAR 0 3
25065: PUSH
25066: LD_INT 21
25068: PUSH
25069: LD_INT 22
25071: PUSH
25072: LD_INT 23
25074: PUSH
25075: LD_INT 24
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: ST_TO_ADDR
25084: GO 25369
25086: LD_INT 43
25088: DOUBLE
25089: EQUAL
25090: IFTRUE 25094
25092: GO 25120
25094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25095: LD_ADDR_VAR 0 3
25099: PUSH
25100: LD_INT 21
25102: PUSH
25103: LD_INT 22
25105: PUSH
25106: LD_INT 23
25108: PUSH
25109: LD_INT 24
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: ST_TO_ADDR
25118: GO 25369
25120: LD_INT 44
25122: DOUBLE
25123: EQUAL
25124: IFTRUE 25128
25126: GO 25154
25128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_INT 21
25136: PUSH
25137: LD_INT 22
25139: PUSH
25140: LD_INT 23
25142: PUSH
25143: LD_INT 24
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: ST_TO_ADDR
25152: GO 25369
25154: LD_INT 45
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25188
25162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25163: LD_ADDR_VAR 0 3
25167: PUSH
25168: LD_INT 21
25170: PUSH
25171: LD_INT 22
25173: PUSH
25174: LD_INT 23
25176: PUSH
25177: LD_INT 24
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: ST_TO_ADDR
25186: GO 25369
25188: LD_INT 49
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25222
25196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25197: LD_ADDR_VAR 0 3
25201: PUSH
25202: LD_INT 21
25204: PUSH
25205: LD_INT 22
25207: PUSH
25208: LD_INT 23
25210: PUSH
25211: LD_INT 24
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: ST_TO_ADDR
25220: GO 25369
25222: LD_INT 51
25224: DOUBLE
25225: EQUAL
25226: IFTRUE 25230
25228: GO 25256
25230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25231: LD_ADDR_VAR 0 3
25235: PUSH
25236: LD_INT 21
25238: PUSH
25239: LD_INT 22
25241: PUSH
25242: LD_INT 23
25244: PUSH
25245: LD_INT 24
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: ST_TO_ADDR
25254: GO 25369
25256: LD_INT 52
25258: DOUBLE
25259: EQUAL
25260: IFTRUE 25264
25262: GO 25290
25264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25265: LD_ADDR_VAR 0 3
25269: PUSH
25270: LD_INT 21
25272: PUSH
25273: LD_INT 22
25275: PUSH
25276: LD_INT 23
25278: PUSH
25279: LD_INT 24
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: ST_TO_ADDR
25288: GO 25369
25290: LD_INT 53
25292: DOUBLE
25293: EQUAL
25294: IFTRUE 25298
25296: GO 25316
25298: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25299: LD_ADDR_VAR 0 3
25303: PUSH
25304: LD_INT 23
25306: PUSH
25307: LD_INT 24
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: ST_TO_ADDR
25314: GO 25369
25316: LD_INT 46
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25342
25324: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 23
25332: PUSH
25333: LD_INT 24
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: ST_TO_ADDR
25340: GO 25369
25342: LD_INT 47
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25368
25350: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_INT 23
25358: PUSH
25359: LD_INT 24
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: ST_TO_ADDR
25366: GO 25369
25368: POP
// result := ( chassis in result ) ;
25369: LD_ADDR_VAR 0 3
25373: PUSH
25374: LD_VAR 0 1
25378: PUSH
25379: LD_VAR 0 3
25383: IN
25384: ST_TO_ADDR
// end ;
25385: LD_VAR 0 3
25389: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25390: LD_INT 0
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
25398: PPUSH
// result := array ;
25399: LD_ADDR_VAR 0 5
25403: PUSH
25404: LD_VAR 0 1
25408: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25409: LD_VAR 0 1
25413: NOT
25414: PUSH
25415: LD_VAR 0 2
25419: NOT
25420: OR
25421: PUSH
25422: LD_VAR 0 3
25426: NOT
25427: OR
25428: PUSH
25429: LD_VAR 0 2
25433: PUSH
25434: LD_VAR 0 1
25438: GREATER
25439: OR
25440: PUSH
25441: LD_VAR 0 3
25445: PUSH
25446: LD_VAR 0 1
25450: GREATER
25451: OR
25452: IFFALSE 25456
// exit ;
25454: GO 25752
// if direction then
25456: LD_VAR 0 4
25460: IFFALSE 25524
// begin d := 1 ;
25462: LD_ADDR_VAR 0 9
25466: PUSH
25467: LD_INT 1
25469: ST_TO_ADDR
// if i_from > i_to then
25470: LD_VAR 0 2
25474: PUSH
25475: LD_VAR 0 3
25479: GREATER
25480: IFFALSE 25506
// length := ( array - i_from ) + i_to else
25482: LD_ADDR_VAR 0 11
25486: PUSH
25487: LD_VAR 0 1
25491: PUSH
25492: LD_VAR 0 2
25496: MINUS
25497: PUSH
25498: LD_VAR 0 3
25502: PLUS
25503: ST_TO_ADDR
25504: GO 25522
// length := i_to - i_from ;
25506: LD_ADDR_VAR 0 11
25510: PUSH
25511: LD_VAR 0 3
25515: PUSH
25516: LD_VAR 0 2
25520: MINUS
25521: ST_TO_ADDR
// end else
25522: GO 25585
// begin d := - 1 ;
25524: LD_ADDR_VAR 0 9
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: ST_TO_ADDR
// if i_from > i_to then
25533: LD_VAR 0 2
25537: PUSH
25538: LD_VAR 0 3
25542: GREATER
25543: IFFALSE 25563
// length := i_from - i_to else
25545: LD_ADDR_VAR 0 11
25549: PUSH
25550: LD_VAR 0 2
25554: PUSH
25555: LD_VAR 0 3
25559: MINUS
25560: ST_TO_ADDR
25561: GO 25585
// length := ( array - i_to ) + i_from ;
25563: LD_ADDR_VAR 0 11
25567: PUSH
25568: LD_VAR 0 1
25572: PUSH
25573: LD_VAR 0 3
25577: MINUS
25578: PUSH
25579: LD_VAR 0 2
25583: PLUS
25584: ST_TO_ADDR
// end ; if not length then
25585: LD_VAR 0 11
25589: NOT
25590: IFFALSE 25594
// exit ;
25592: GO 25752
// tmp := array ;
25594: LD_ADDR_VAR 0 10
25598: PUSH
25599: LD_VAR 0 1
25603: ST_TO_ADDR
// for i = 1 to length do
25604: LD_ADDR_VAR 0 6
25608: PUSH
25609: DOUBLE
25610: LD_INT 1
25612: DEC
25613: ST_TO_ADDR
25614: LD_VAR 0 11
25618: PUSH
25619: FOR_TO
25620: IFFALSE 25740
// begin for j = 1 to array do
25622: LD_ADDR_VAR 0 7
25626: PUSH
25627: DOUBLE
25628: LD_INT 1
25630: DEC
25631: ST_TO_ADDR
25632: LD_VAR 0 1
25636: PUSH
25637: FOR_TO
25638: IFFALSE 25726
// begin k := j + d ;
25640: LD_ADDR_VAR 0 8
25644: PUSH
25645: LD_VAR 0 7
25649: PUSH
25650: LD_VAR 0 9
25654: PLUS
25655: ST_TO_ADDR
// if k > array then
25656: LD_VAR 0 8
25660: PUSH
25661: LD_VAR 0 1
25665: GREATER
25666: IFFALSE 25676
// k := 1 ;
25668: LD_ADDR_VAR 0 8
25672: PUSH
25673: LD_INT 1
25675: ST_TO_ADDR
// if not k then
25676: LD_VAR 0 8
25680: NOT
25681: IFFALSE 25693
// k := array ;
25683: LD_ADDR_VAR 0 8
25687: PUSH
25688: LD_VAR 0 1
25692: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25693: LD_ADDR_VAR 0 10
25697: PUSH
25698: LD_VAR 0 10
25702: PPUSH
25703: LD_VAR 0 8
25707: PPUSH
25708: LD_VAR 0 1
25712: PUSH
25713: LD_VAR 0 7
25717: ARRAY
25718: PPUSH
25719: CALL_OW 1
25723: ST_TO_ADDR
// end ;
25724: GO 25637
25726: POP
25727: POP
// array := tmp ;
25728: LD_ADDR_VAR 0 1
25732: PUSH
25733: LD_VAR 0 10
25737: ST_TO_ADDR
// end ;
25738: GO 25619
25740: POP
25741: POP
// result := array ;
25742: LD_ADDR_VAR 0 5
25746: PUSH
25747: LD_VAR 0 1
25751: ST_TO_ADDR
// end ;
25752: LD_VAR 0 5
25756: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25757: LD_INT 0
25759: PPUSH
25760: PPUSH
// result := 0 ;
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: LD_INT 0
25768: ST_TO_ADDR
// if not array or not value in array then
25769: LD_VAR 0 1
25773: NOT
25774: PUSH
25775: LD_VAR 0 2
25779: PUSH
25780: LD_VAR 0 1
25784: IN
25785: NOT
25786: OR
25787: IFFALSE 25791
// exit ;
25789: GO 25845
// for i = 1 to array do
25791: LD_ADDR_VAR 0 4
25795: PUSH
25796: DOUBLE
25797: LD_INT 1
25799: DEC
25800: ST_TO_ADDR
25801: LD_VAR 0 1
25805: PUSH
25806: FOR_TO
25807: IFFALSE 25843
// if value = array [ i ] then
25809: LD_VAR 0 2
25813: PUSH
25814: LD_VAR 0 1
25818: PUSH
25819: LD_VAR 0 4
25823: ARRAY
25824: EQUAL
25825: IFFALSE 25841
// begin result := i ;
25827: LD_ADDR_VAR 0 3
25831: PUSH
25832: LD_VAR 0 4
25836: ST_TO_ADDR
// exit ;
25837: POP
25838: POP
25839: GO 25845
// end ;
25841: GO 25806
25843: POP
25844: POP
// end ;
25845: LD_VAR 0 3
25849: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25850: LD_INT 0
25852: PPUSH
// vc_chassis := chassis ;
25853: LD_ADDR_OWVAR 37
25857: PUSH
25858: LD_VAR 0 1
25862: ST_TO_ADDR
// vc_engine := engine ;
25863: LD_ADDR_OWVAR 39
25867: PUSH
25868: LD_VAR 0 2
25872: ST_TO_ADDR
// vc_control := control ;
25873: LD_ADDR_OWVAR 38
25877: PUSH
25878: LD_VAR 0 3
25882: ST_TO_ADDR
// vc_weapon := weapon ;
25883: LD_ADDR_OWVAR 40
25887: PUSH
25888: LD_VAR 0 4
25892: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25893: LD_ADDR_OWVAR 41
25897: PUSH
25898: LD_VAR 0 5
25902: ST_TO_ADDR
// end ;
25903: LD_VAR 0 6
25907: RET
// export function WantPlant ( unit ) ; var task ; begin
25908: LD_INT 0
25910: PPUSH
25911: PPUSH
// result := false ;
25912: LD_ADDR_VAR 0 2
25916: PUSH
25917: LD_INT 0
25919: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25920: LD_ADDR_VAR 0 3
25924: PUSH
25925: LD_VAR 0 1
25929: PPUSH
25930: CALL_OW 437
25934: ST_TO_ADDR
// if task then
25935: LD_VAR 0 3
25939: IFFALSE 25967
// if task [ 1 ] [ 1 ] = p then
25941: LD_VAR 0 3
25945: PUSH
25946: LD_INT 1
25948: ARRAY
25949: PUSH
25950: LD_INT 1
25952: ARRAY
25953: PUSH
25954: LD_STRING p
25956: EQUAL
25957: IFFALSE 25967
// result := true ;
25959: LD_ADDR_VAR 0 2
25963: PUSH
25964: LD_INT 1
25966: ST_TO_ADDR
// end ;
25967: LD_VAR 0 2
25971: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25972: LD_INT 0
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
// if pos < 1 then
25978: LD_VAR 0 2
25982: PUSH
25983: LD_INT 1
25985: LESS
25986: IFFALSE 25990
// exit ;
25988: GO 26293
// if pos = 1 then
25990: LD_VAR 0 2
25994: PUSH
25995: LD_INT 1
25997: EQUAL
25998: IFFALSE 26031
// result := Replace ( arr , pos [ 1 ] , value ) else
26000: LD_ADDR_VAR 0 4
26004: PUSH
26005: LD_VAR 0 1
26009: PPUSH
26010: LD_VAR 0 2
26014: PUSH
26015: LD_INT 1
26017: ARRAY
26018: PPUSH
26019: LD_VAR 0 3
26023: PPUSH
26024: CALL_OW 1
26028: ST_TO_ADDR
26029: GO 26293
// begin tmp := arr ;
26031: LD_ADDR_VAR 0 6
26035: PUSH
26036: LD_VAR 0 1
26040: ST_TO_ADDR
// s_arr := [ tmp ] ;
26041: LD_ADDR_VAR 0 7
26045: PUSH
26046: LD_VAR 0 6
26050: PUSH
26051: EMPTY
26052: LIST
26053: ST_TO_ADDR
// for i = 1 to pos - 1 do
26054: LD_ADDR_VAR 0 5
26058: PUSH
26059: DOUBLE
26060: LD_INT 1
26062: DEC
26063: ST_TO_ADDR
26064: LD_VAR 0 2
26068: PUSH
26069: LD_INT 1
26071: MINUS
26072: PUSH
26073: FOR_TO
26074: IFFALSE 26119
// begin tmp := tmp [ pos [ i ] ] ;
26076: LD_ADDR_VAR 0 6
26080: PUSH
26081: LD_VAR 0 6
26085: PUSH
26086: LD_VAR 0 2
26090: PUSH
26091: LD_VAR 0 5
26095: ARRAY
26096: ARRAY
26097: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26098: LD_ADDR_VAR 0 7
26102: PUSH
26103: LD_VAR 0 7
26107: PUSH
26108: LD_VAR 0 6
26112: PUSH
26113: EMPTY
26114: LIST
26115: ADD
26116: ST_TO_ADDR
// end ;
26117: GO 26073
26119: POP
26120: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26121: LD_ADDR_VAR 0 6
26125: PUSH
26126: LD_VAR 0 6
26130: PPUSH
26131: LD_VAR 0 2
26135: PUSH
26136: LD_VAR 0 2
26140: ARRAY
26141: PPUSH
26142: LD_VAR 0 3
26146: PPUSH
26147: CALL_OW 1
26151: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26152: LD_ADDR_VAR 0 7
26156: PUSH
26157: LD_VAR 0 7
26161: PPUSH
26162: LD_VAR 0 7
26166: PPUSH
26167: LD_VAR 0 6
26171: PPUSH
26172: CALL_OW 1
26176: ST_TO_ADDR
// for i = s_arr downto 2 do
26177: LD_ADDR_VAR 0 5
26181: PUSH
26182: DOUBLE
26183: LD_VAR 0 7
26187: INC
26188: ST_TO_ADDR
26189: LD_INT 2
26191: PUSH
26192: FOR_DOWNTO
26193: IFFALSE 26277
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26195: LD_ADDR_VAR 0 6
26199: PUSH
26200: LD_VAR 0 7
26204: PUSH
26205: LD_VAR 0 5
26209: PUSH
26210: LD_INT 1
26212: MINUS
26213: ARRAY
26214: PPUSH
26215: LD_VAR 0 2
26219: PUSH
26220: LD_VAR 0 5
26224: PUSH
26225: LD_INT 1
26227: MINUS
26228: ARRAY
26229: PPUSH
26230: LD_VAR 0 7
26234: PUSH
26235: LD_VAR 0 5
26239: ARRAY
26240: PPUSH
26241: CALL_OW 1
26245: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26246: LD_ADDR_VAR 0 7
26250: PUSH
26251: LD_VAR 0 7
26255: PPUSH
26256: LD_VAR 0 5
26260: PUSH
26261: LD_INT 1
26263: MINUS
26264: PPUSH
26265: LD_VAR 0 6
26269: PPUSH
26270: CALL_OW 1
26274: ST_TO_ADDR
// end ;
26275: GO 26192
26277: POP
26278: POP
// result := s_arr [ 1 ] ;
26279: LD_ADDR_VAR 0 4
26283: PUSH
26284: LD_VAR 0 7
26288: PUSH
26289: LD_INT 1
26291: ARRAY
26292: ST_TO_ADDR
// end ; end ;
26293: LD_VAR 0 4
26297: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26298: LD_INT 0
26300: PPUSH
26301: PPUSH
// if not list then
26302: LD_VAR 0 1
26306: NOT
26307: IFFALSE 26311
// exit ;
26309: GO 26402
// i := list [ pos1 ] ;
26311: LD_ADDR_VAR 0 5
26315: PUSH
26316: LD_VAR 0 1
26320: PUSH
26321: LD_VAR 0 2
26325: ARRAY
26326: ST_TO_ADDR
// if not i then
26327: LD_VAR 0 5
26331: NOT
26332: IFFALSE 26336
// exit ;
26334: GO 26402
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26336: LD_ADDR_VAR 0 1
26340: PUSH
26341: LD_VAR 0 1
26345: PPUSH
26346: LD_VAR 0 2
26350: PPUSH
26351: LD_VAR 0 1
26355: PUSH
26356: LD_VAR 0 3
26360: ARRAY
26361: PPUSH
26362: CALL_OW 1
26366: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26367: LD_ADDR_VAR 0 1
26371: PUSH
26372: LD_VAR 0 1
26376: PPUSH
26377: LD_VAR 0 3
26381: PPUSH
26382: LD_VAR 0 5
26386: PPUSH
26387: CALL_OW 1
26391: ST_TO_ADDR
// result := list ;
26392: LD_ADDR_VAR 0 4
26396: PUSH
26397: LD_VAR 0 1
26401: ST_TO_ADDR
// end ;
26402: LD_VAR 0 4
26406: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26407: LD_INT 0
26409: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26410: LD_ADDR_VAR 0 5
26414: PUSH
26415: LD_VAR 0 1
26419: PPUSH
26420: CALL_OW 250
26424: PPUSH
26425: LD_VAR 0 1
26429: PPUSH
26430: CALL_OW 251
26434: PPUSH
26435: LD_VAR 0 2
26439: PPUSH
26440: LD_VAR 0 3
26444: PPUSH
26445: LD_VAR 0 4
26449: PPUSH
26450: CALL 26460 0 5
26454: ST_TO_ADDR
// end ;
26455: LD_VAR 0 5
26459: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26460: LD_INT 0
26462: PPUSH
26463: PPUSH
26464: PPUSH
26465: PPUSH
// if not list then
26466: LD_VAR 0 3
26470: NOT
26471: IFFALSE 26475
// exit ;
26473: GO 26863
// result := [ ] ;
26475: LD_ADDR_VAR 0 6
26479: PUSH
26480: EMPTY
26481: ST_TO_ADDR
// for i in list do
26482: LD_ADDR_VAR 0 7
26486: PUSH
26487: LD_VAR 0 3
26491: PUSH
26492: FOR_IN
26493: IFFALSE 26695
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26495: LD_ADDR_VAR 0 9
26499: PUSH
26500: LD_VAR 0 7
26504: PPUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: LD_VAR 0 2
26514: PPUSH
26515: CALL_OW 297
26519: ST_TO_ADDR
// if not result then
26520: LD_VAR 0 6
26524: NOT
26525: IFFALSE 26551
// result := [ [ i , tmp ] ] else
26527: LD_ADDR_VAR 0 6
26531: PUSH
26532: LD_VAR 0 7
26536: PUSH
26537: LD_VAR 0 9
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: EMPTY
26547: LIST
26548: ST_TO_ADDR
26549: GO 26693
// begin if result [ result ] [ 2 ] < tmp then
26551: LD_VAR 0 6
26555: PUSH
26556: LD_VAR 0 6
26560: ARRAY
26561: PUSH
26562: LD_INT 2
26564: ARRAY
26565: PUSH
26566: LD_VAR 0 9
26570: LESS
26571: IFFALSE 26613
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26573: LD_ADDR_VAR 0 6
26577: PUSH
26578: LD_VAR 0 6
26582: PPUSH
26583: LD_VAR 0 6
26587: PUSH
26588: LD_INT 1
26590: PLUS
26591: PPUSH
26592: LD_VAR 0 7
26596: PUSH
26597: LD_VAR 0 9
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PPUSH
26606: CALL_OW 2
26610: ST_TO_ADDR
26611: GO 26693
// for j = 1 to result do
26613: LD_ADDR_VAR 0 8
26617: PUSH
26618: DOUBLE
26619: LD_INT 1
26621: DEC
26622: ST_TO_ADDR
26623: LD_VAR 0 6
26627: PUSH
26628: FOR_TO
26629: IFFALSE 26691
// begin if tmp < result [ j ] [ 2 ] then
26631: LD_VAR 0 9
26635: PUSH
26636: LD_VAR 0 6
26640: PUSH
26641: LD_VAR 0 8
26645: ARRAY
26646: PUSH
26647: LD_INT 2
26649: ARRAY
26650: LESS
26651: IFFALSE 26689
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26653: LD_ADDR_VAR 0 6
26657: PUSH
26658: LD_VAR 0 6
26662: PPUSH
26663: LD_VAR 0 8
26667: PPUSH
26668: LD_VAR 0 7
26672: PUSH
26673: LD_VAR 0 9
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 2
26686: ST_TO_ADDR
// break ;
26687: GO 26691
// end ; end ;
26689: GO 26628
26691: POP
26692: POP
// end ; end ;
26693: GO 26492
26695: POP
26696: POP
// if result and not asc then
26697: LD_VAR 0 6
26701: PUSH
26702: LD_VAR 0 4
26706: NOT
26707: AND
26708: IFFALSE 26783
// begin tmp := result ;
26710: LD_ADDR_VAR 0 9
26714: PUSH
26715: LD_VAR 0 6
26719: ST_TO_ADDR
// for i = tmp downto 1 do
26720: LD_ADDR_VAR 0 7
26724: PUSH
26725: DOUBLE
26726: LD_VAR 0 9
26730: INC
26731: ST_TO_ADDR
26732: LD_INT 1
26734: PUSH
26735: FOR_DOWNTO
26736: IFFALSE 26781
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26738: LD_ADDR_VAR 0 6
26742: PUSH
26743: LD_VAR 0 6
26747: PPUSH
26748: LD_VAR 0 9
26752: PUSH
26753: LD_VAR 0 7
26757: MINUS
26758: PUSH
26759: LD_INT 1
26761: PLUS
26762: PPUSH
26763: LD_VAR 0 9
26767: PUSH
26768: LD_VAR 0 7
26772: ARRAY
26773: PPUSH
26774: CALL_OW 1
26778: ST_TO_ADDR
26779: GO 26735
26781: POP
26782: POP
// end ; tmp := [ ] ;
26783: LD_ADDR_VAR 0 9
26787: PUSH
26788: EMPTY
26789: ST_TO_ADDR
// if mode then
26790: LD_VAR 0 5
26794: IFFALSE 26863
// begin for i = 1 to result do
26796: LD_ADDR_VAR 0 7
26800: PUSH
26801: DOUBLE
26802: LD_INT 1
26804: DEC
26805: ST_TO_ADDR
26806: LD_VAR 0 6
26810: PUSH
26811: FOR_TO
26812: IFFALSE 26851
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26814: LD_ADDR_VAR 0 9
26818: PUSH
26819: LD_VAR 0 9
26823: PPUSH
26824: LD_VAR 0 7
26828: PPUSH
26829: LD_VAR 0 6
26833: PUSH
26834: LD_VAR 0 7
26838: ARRAY
26839: PUSH
26840: LD_INT 1
26842: ARRAY
26843: PPUSH
26844: CALL_OW 1
26848: ST_TO_ADDR
26849: GO 26811
26851: POP
26852: POP
// result := tmp ;
26853: LD_ADDR_VAR 0 6
26857: PUSH
26858: LD_VAR 0 9
26862: ST_TO_ADDR
// end ; end ;
26863: LD_VAR 0 6
26867: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26868: LD_INT 0
26870: PPUSH
26871: PPUSH
26872: PPUSH
26873: PPUSH
26874: PPUSH
26875: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26876: LD_ADDR_VAR 0 5
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: EMPTY
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: ST_TO_ADDR
// if not x or not y then
26898: LD_VAR 0 2
26902: NOT
26903: PUSH
26904: LD_VAR 0 3
26908: NOT
26909: OR
26910: IFFALSE 26914
// exit ;
26912: GO 28560
// if not range then
26914: LD_VAR 0 4
26918: NOT
26919: IFFALSE 26929
// range := 10 ;
26921: LD_ADDR_VAR 0 4
26925: PUSH
26926: LD_INT 10
26928: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26929: LD_ADDR_VAR 0 8
26933: PUSH
26934: LD_INT 81
26936: PUSH
26937: LD_VAR 0 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 92
26948: PUSH
26949: LD_VAR 0 2
26953: PUSH
26954: LD_VAR 0 3
26958: PUSH
26959: LD_VAR 0 4
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 3
26972: PUSH
26973: LD_INT 21
26975: PUSH
26976: LD_INT 3
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: PPUSH
26992: CALL_OW 69
26996: ST_TO_ADDR
// if not tmp then
26997: LD_VAR 0 8
27001: NOT
27002: IFFALSE 27006
// exit ;
27004: GO 28560
// for i in tmp do
27006: LD_ADDR_VAR 0 6
27010: PUSH
27011: LD_VAR 0 8
27015: PUSH
27016: FOR_IN
27017: IFFALSE 28535
// begin points := [ 0 , 0 , 0 ] ;
27019: LD_ADDR_VAR 0 9
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// bpoints := 1 ;
27038: LD_ADDR_VAR 0 10
27042: PUSH
27043: LD_INT 1
27045: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27046: LD_VAR 0 6
27050: PPUSH
27051: CALL_OW 247
27055: PUSH
27056: LD_INT 1
27058: DOUBLE
27059: EQUAL
27060: IFTRUE 27064
27062: GO 27642
27064: POP
// begin if GetClass ( i ) = 1 then
27065: LD_VAR 0 6
27069: PPUSH
27070: CALL_OW 257
27074: PUSH
27075: LD_INT 1
27077: EQUAL
27078: IFFALSE 27099
// points := [ 10 , 5 , 3 ] ;
27080: LD_ADDR_VAR 0 9
27084: PUSH
27085: LD_INT 10
27087: PUSH
27088: LD_INT 5
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27099: LD_VAR 0 6
27103: PPUSH
27104: CALL_OW 257
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 3
27114: PUSH
27115: LD_INT 4
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: IN
27123: IFFALSE 27144
// points := [ 3 , 2 , 1 ] ;
27125: LD_ADDR_VAR 0 9
27129: PUSH
27130: LD_INT 3
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27144: LD_VAR 0 6
27148: PPUSH
27149: CALL_OW 257
27153: PUSH
27154: LD_INT 5
27156: EQUAL
27157: IFFALSE 27178
// points := [ 130 , 5 , 2 ] ;
27159: LD_ADDR_VAR 0 9
27163: PUSH
27164: LD_INT 130
27166: PUSH
27167: LD_INT 5
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27178: LD_VAR 0 6
27182: PPUSH
27183: CALL_OW 257
27187: PUSH
27188: LD_INT 8
27190: EQUAL
27191: IFFALSE 27212
// points := [ 35 , 35 , 30 ] ;
27193: LD_ADDR_VAR 0 9
27197: PUSH
27198: LD_INT 35
27200: PUSH
27201: LD_INT 35
27203: PUSH
27204: LD_INT 30
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27212: LD_VAR 0 6
27216: PPUSH
27217: CALL_OW 257
27221: PUSH
27222: LD_INT 9
27224: EQUAL
27225: IFFALSE 27246
// points := [ 20 , 55 , 40 ] ;
27227: LD_ADDR_VAR 0 9
27231: PUSH
27232: LD_INT 20
27234: PUSH
27235: LD_INT 55
27237: PUSH
27238: LD_INT 40
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27246: LD_VAR 0 6
27250: PPUSH
27251: CALL_OW 257
27255: PUSH
27256: LD_INT 12
27258: PUSH
27259: LD_INT 16
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: IN
27266: IFFALSE 27287
// points := [ 5 , 3 , 2 ] ;
27268: LD_ADDR_VAR 0 9
27272: PUSH
27273: LD_INT 5
27275: PUSH
27276: LD_INT 3
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27287: LD_VAR 0 6
27291: PPUSH
27292: CALL_OW 257
27296: PUSH
27297: LD_INT 17
27299: EQUAL
27300: IFFALSE 27321
// points := [ 100 , 50 , 75 ] ;
27302: LD_ADDR_VAR 0 9
27306: PUSH
27307: LD_INT 100
27309: PUSH
27310: LD_INT 50
27312: PUSH
27313: LD_INT 75
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27321: LD_VAR 0 6
27325: PPUSH
27326: CALL_OW 257
27330: PUSH
27331: LD_INT 15
27333: EQUAL
27334: IFFALSE 27355
// points := [ 10 , 5 , 3 ] ;
27336: LD_ADDR_VAR 0 9
27340: PUSH
27341: LD_INT 10
27343: PUSH
27344: LD_INT 5
27346: PUSH
27347: LD_INT 3
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27355: LD_VAR 0 6
27359: PPUSH
27360: CALL_OW 257
27364: PUSH
27365: LD_INT 14
27367: EQUAL
27368: IFFALSE 27389
// points := [ 10 , 0 , 0 ] ;
27370: LD_ADDR_VAR 0 9
27374: PUSH
27375: LD_INT 10
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27389: LD_VAR 0 6
27393: PPUSH
27394: CALL_OW 257
27398: PUSH
27399: LD_INT 11
27401: EQUAL
27402: IFFALSE 27423
// points := [ 30 , 10 , 5 ] ;
27404: LD_ADDR_VAR 0 9
27408: PUSH
27409: LD_INT 30
27411: PUSH
27412: LD_INT 10
27414: PUSH
27415: LD_INT 5
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27423: LD_VAR 0 1
27427: PPUSH
27428: LD_INT 5
27430: PPUSH
27431: CALL_OW 321
27435: PUSH
27436: LD_INT 2
27438: EQUAL
27439: IFFALSE 27456
// bpoints := bpoints * 1.8 ;
27441: LD_ADDR_VAR 0 10
27445: PUSH
27446: LD_VAR 0 10
27450: PUSH
27451: LD_REAL  1.80000000000000E+0000
27454: MUL
27455: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27456: LD_VAR 0 6
27460: PPUSH
27461: CALL_OW 257
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: LD_INT 3
27474: PUSH
27475: LD_INT 4
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: IN
27484: PUSH
27485: LD_VAR 0 1
27489: PPUSH
27490: LD_INT 51
27492: PPUSH
27493: CALL_OW 321
27497: PUSH
27498: LD_INT 2
27500: EQUAL
27501: AND
27502: IFFALSE 27519
// bpoints := bpoints * 1.2 ;
27504: LD_ADDR_VAR 0 10
27508: PUSH
27509: LD_VAR 0 10
27513: PUSH
27514: LD_REAL  1.20000000000000E+0000
27517: MUL
27518: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27519: LD_VAR 0 6
27523: PPUSH
27524: CALL_OW 257
27528: PUSH
27529: LD_INT 5
27531: PUSH
27532: LD_INT 7
27534: PUSH
27535: LD_INT 9
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: IN
27543: PUSH
27544: LD_VAR 0 1
27548: PPUSH
27549: LD_INT 52
27551: PPUSH
27552: CALL_OW 321
27556: PUSH
27557: LD_INT 2
27559: EQUAL
27560: AND
27561: IFFALSE 27578
// bpoints := bpoints * 1.5 ;
27563: LD_ADDR_VAR 0 10
27567: PUSH
27568: LD_VAR 0 10
27572: PUSH
27573: LD_REAL  1.50000000000000E+0000
27576: MUL
27577: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27578: LD_VAR 0 1
27582: PPUSH
27583: LD_INT 66
27585: PPUSH
27586: CALL_OW 321
27590: PUSH
27591: LD_INT 2
27593: EQUAL
27594: IFFALSE 27611
// bpoints := bpoints * 1.1 ;
27596: LD_ADDR_VAR 0 10
27600: PUSH
27601: LD_VAR 0 10
27605: PUSH
27606: LD_REAL  1.10000000000000E+0000
27609: MUL
27610: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27611: LD_ADDR_VAR 0 10
27615: PUSH
27616: LD_VAR 0 10
27620: PUSH
27621: LD_VAR 0 6
27625: PPUSH
27626: LD_INT 1
27628: PPUSH
27629: CALL_OW 259
27633: PUSH
27634: LD_REAL  1.15000000000000E+0000
27637: MUL
27638: MUL
27639: ST_TO_ADDR
// end ; unit_vehicle :
27640: GO 28464
27642: LD_INT 2
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 28452
27650: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27651: LD_VAR 0 6
27655: PPUSH
27656: CALL_OW 264
27660: PUSH
27661: LD_INT 2
27663: PUSH
27664: LD_INT 42
27666: PUSH
27667: LD_INT 24
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: IN
27675: IFFALSE 27696
// points := [ 25 , 5 , 3 ] ;
27677: LD_ADDR_VAR 0 9
27681: PUSH
27682: LD_INT 25
27684: PUSH
27685: LD_INT 5
27687: PUSH
27688: LD_INT 3
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27696: LD_VAR 0 6
27700: PPUSH
27701: CALL_OW 264
27705: PUSH
27706: LD_INT 4
27708: PUSH
27709: LD_INT 43
27711: PUSH
27712: LD_INT 25
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: IN
27720: IFFALSE 27741
// points := [ 40 , 15 , 5 ] ;
27722: LD_ADDR_VAR 0 9
27726: PUSH
27727: LD_INT 40
27729: PUSH
27730: LD_INT 15
27732: PUSH
27733: LD_INT 5
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27741: LD_VAR 0 6
27745: PPUSH
27746: CALL_OW 264
27750: PUSH
27751: LD_INT 3
27753: PUSH
27754: LD_INT 23
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: IN
27761: IFFALSE 27782
// points := [ 7 , 25 , 8 ] ;
27763: LD_ADDR_VAR 0 9
27767: PUSH
27768: LD_INT 7
27770: PUSH
27771: LD_INT 25
27773: PUSH
27774: LD_INT 8
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: LIST
27781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27782: LD_VAR 0 6
27786: PPUSH
27787: CALL_OW 264
27791: PUSH
27792: LD_INT 5
27794: PUSH
27795: LD_INT 27
27797: PUSH
27798: LD_INT 44
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: LIST
27805: IN
27806: IFFALSE 27827
// points := [ 14 , 50 , 16 ] ;
27808: LD_ADDR_VAR 0 9
27812: PUSH
27813: LD_INT 14
27815: PUSH
27816: LD_INT 50
27818: PUSH
27819: LD_INT 16
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: LIST
27826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27827: LD_VAR 0 6
27831: PPUSH
27832: CALL_OW 264
27836: PUSH
27837: LD_INT 6
27839: PUSH
27840: LD_INT 46
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: IN
27847: IFFALSE 27868
// points := [ 32 , 120 , 70 ] ;
27849: LD_ADDR_VAR 0 9
27853: PUSH
27854: LD_INT 32
27856: PUSH
27857: LD_INT 120
27859: PUSH
27860: LD_INT 70
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27868: LD_VAR 0 6
27872: PPUSH
27873: CALL_OW 264
27877: PUSH
27878: LD_INT 7
27880: PUSH
27881: LD_INT 28
27883: PUSH
27884: LD_INT 45
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: IN
27892: IFFALSE 27913
// points := [ 35 , 20 , 45 ] ;
27894: LD_ADDR_VAR 0 9
27898: PUSH
27899: LD_INT 35
27901: PUSH
27902: LD_INT 20
27904: PUSH
27905: LD_INT 45
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27913: LD_VAR 0 6
27917: PPUSH
27918: CALL_OW 264
27922: PUSH
27923: LD_INT 47
27925: PUSH
27926: EMPTY
27927: LIST
27928: IN
27929: IFFALSE 27950
// points := [ 67 , 45 , 75 ] ;
27931: LD_ADDR_VAR 0 9
27935: PUSH
27936: LD_INT 67
27938: PUSH
27939: LD_INT 45
27941: PUSH
27942: LD_INT 75
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27950: LD_VAR 0 6
27954: PPUSH
27955: CALL_OW 264
27959: PUSH
27960: LD_INT 26
27962: PUSH
27963: EMPTY
27964: LIST
27965: IN
27966: IFFALSE 27987
// points := [ 120 , 30 , 80 ] ;
27968: LD_ADDR_VAR 0 9
27972: PUSH
27973: LD_INT 120
27975: PUSH
27976: LD_INT 30
27978: PUSH
27979: LD_INT 80
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: LIST
27986: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27987: LD_VAR 0 6
27991: PPUSH
27992: CALL_OW 264
27996: PUSH
27997: LD_INT 22
27999: PUSH
28000: EMPTY
28001: LIST
28002: IN
28003: IFFALSE 28024
// points := [ 40 , 1 , 1 ] ;
28005: LD_ADDR_VAR 0 9
28009: PUSH
28010: LD_INT 40
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28024: LD_VAR 0 6
28028: PPUSH
28029: CALL_OW 264
28033: PUSH
28034: LD_INT 29
28036: PUSH
28037: EMPTY
28038: LIST
28039: IN
28040: IFFALSE 28061
// points := [ 70 , 200 , 400 ] ;
28042: LD_ADDR_VAR 0 9
28046: PUSH
28047: LD_INT 70
28049: PUSH
28050: LD_INT 200
28052: PUSH
28053: LD_INT 400
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: LIST
28060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28061: LD_VAR 0 6
28065: PPUSH
28066: CALL_OW 264
28070: PUSH
28071: LD_INT 14
28073: PUSH
28074: LD_INT 53
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: IN
28081: IFFALSE 28102
// points := [ 40 , 10 , 20 ] ;
28083: LD_ADDR_VAR 0 9
28087: PUSH
28088: LD_INT 40
28090: PUSH
28091: LD_INT 10
28093: PUSH
28094: LD_INT 20
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28102: LD_VAR 0 6
28106: PPUSH
28107: CALL_OW 264
28111: PUSH
28112: LD_INT 9
28114: PUSH
28115: EMPTY
28116: LIST
28117: IN
28118: IFFALSE 28139
// points := [ 5 , 70 , 20 ] ;
28120: LD_ADDR_VAR 0 9
28124: PUSH
28125: LD_INT 5
28127: PUSH
28128: LD_INT 70
28130: PUSH
28131: LD_INT 20
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28139: LD_VAR 0 6
28143: PPUSH
28144: CALL_OW 264
28148: PUSH
28149: LD_INT 10
28151: PUSH
28152: EMPTY
28153: LIST
28154: IN
28155: IFFALSE 28176
// points := [ 35 , 110 , 70 ] ;
28157: LD_ADDR_VAR 0 9
28161: PUSH
28162: LD_INT 35
28164: PUSH
28165: LD_INT 110
28167: PUSH
28168: LD_INT 70
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: LIST
28175: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28176: LD_VAR 0 6
28180: PPUSH
28181: CALL_OW 265
28185: PUSH
28186: LD_INT 25
28188: EQUAL
28189: IFFALSE 28210
// points := [ 80 , 65 , 100 ] ;
28191: LD_ADDR_VAR 0 9
28195: PUSH
28196: LD_INT 80
28198: PUSH
28199: LD_INT 65
28201: PUSH
28202: LD_INT 100
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28210: LD_VAR 0 6
28214: PPUSH
28215: CALL_OW 263
28219: PUSH
28220: LD_INT 1
28222: EQUAL
28223: IFFALSE 28258
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28225: LD_ADDR_VAR 0 10
28229: PUSH
28230: LD_VAR 0 10
28234: PUSH
28235: LD_VAR 0 6
28239: PPUSH
28240: CALL_OW 311
28244: PPUSH
28245: LD_INT 3
28247: PPUSH
28248: CALL_OW 259
28252: PUSH
28253: LD_INT 4
28255: MUL
28256: MUL
28257: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28258: LD_VAR 0 6
28262: PPUSH
28263: CALL_OW 263
28267: PUSH
28268: LD_INT 2
28270: EQUAL
28271: IFFALSE 28322
// begin j := IsControledBy ( i ) ;
28273: LD_ADDR_VAR 0 7
28277: PUSH
28278: LD_VAR 0 6
28282: PPUSH
28283: CALL_OW 312
28287: ST_TO_ADDR
// if j then
28288: LD_VAR 0 7
28292: IFFALSE 28322
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28294: LD_ADDR_VAR 0 10
28298: PUSH
28299: LD_VAR 0 10
28303: PUSH
28304: LD_VAR 0 7
28308: PPUSH
28309: LD_INT 3
28311: PPUSH
28312: CALL_OW 259
28316: PUSH
28317: LD_INT 3
28319: MUL
28320: MUL
28321: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28322: LD_VAR 0 6
28326: PPUSH
28327: CALL_OW 264
28331: PUSH
28332: LD_INT 5
28334: PUSH
28335: LD_INT 6
28337: PUSH
28338: LD_INT 46
28340: PUSH
28341: LD_INT 44
28343: PUSH
28344: LD_INT 47
28346: PUSH
28347: LD_INT 45
28349: PUSH
28350: LD_INT 28
28352: PUSH
28353: LD_INT 7
28355: PUSH
28356: LD_INT 27
28358: PUSH
28359: LD_INT 29
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: IN
28374: PUSH
28375: LD_VAR 0 1
28379: PPUSH
28380: LD_INT 52
28382: PPUSH
28383: CALL_OW 321
28387: PUSH
28388: LD_INT 2
28390: EQUAL
28391: AND
28392: IFFALSE 28409
// bpoints := bpoints * 1.2 ;
28394: LD_ADDR_VAR 0 10
28398: PUSH
28399: LD_VAR 0 10
28403: PUSH
28404: LD_REAL  1.20000000000000E+0000
28407: MUL
28408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28409: LD_VAR 0 6
28413: PPUSH
28414: CALL_OW 264
28418: PUSH
28419: LD_INT 6
28421: PUSH
28422: LD_INT 46
28424: PUSH
28425: LD_INT 47
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: IN
28433: IFFALSE 28450
// bpoints := bpoints * 1.2 ;
28435: LD_ADDR_VAR 0 10
28439: PUSH
28440: LD_VAR 0 10
28444: PUSH
28445: LD_REAL  1.20000000000000E+0000
28448: MUL
28449: ST_TO_ADDR
// end ; unit_building :
28450: GO 28464
28452: LD_INT 3
28454: DOUBLE
28455: EQUAL
28456: IFTRUE 28460
28458: GO 28463
28460: POP
// ; end ;
28461: GO 28464
28463: POP
// for j = 1 to 3 do
28464: LD_ADDR_VAR 0 7
28468: PUSH
28469: DOUBLE
28470: LD_INT 1
28472: DEC
28473: ST_TO_ADDR
28474: LD_INT 3
28476: PUSH
28477: FOR_TO
28478: IFFALSE 28531
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28480: LD_ADDR_VAR 0 5
28484: PUSH
28485: LD_VAR 0 5
28489: PPUSH
28490: LD_VAR 0 7
28494: PPUSH
28495: LD_VAR 0 5
28499: PUSH
28500: LD_VAR 0 7
28504: ARRAY
28505: PUSH
28506: LD_VAR 0 9
28510: PUSH
28511: LD_VAR 0 7
28515: ARRAY
28516: PUSH
28517: LD_VAR 0 10
28521: MUL
28522: PLUS
28523: PPUSH
28524: CALL_OW 1
28528: ST_TO_ADDR
28529: GO 28477
28531: POP
28532: POP
// end ;
28533: GO 27016
28535: POP
28536: POP
// result := Replace ( result , 4 , tmp ) ;
28537: LD_ADDR_VAR 0 5
28541: PUSH
28542: LD_VAR 0 5
28546: PPUSH
28547: LD_INT 4
28549: PPUSH
28550: LD_VAR 0 8
28554: PPUSH
28555: CALL_OW 1
28559: ST_TO_ADDR
// end ;
28560: LD_VAR 0 5
28564: RET
// export function DangerAtRange ( unit , range ) ; begin
28565: LD_INT 0
28567: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28568: LD_ADDR_VAR 0 3
28572: PUSH
28573: LD_VAR 0 1
28577: PPUSH
28578: CALL_OW 255
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 250
28592: PPUSH
28593: LD_VAR 0 1
28597: PPUSH
28598: CALL_OW 251
28602: PPUSH
28603: LD_VAR 0 2
28607: PPUSH
28608: CALL 26868 0 4
28612: ST_TO_ADDR
// end ;
28613: LD_VAR 0 3
28617: RET
// export function DangerInArea ( side , area ) ; begin
28618: LD_INT 0
28620: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28621: LD_ADDR_VAR 0 3
28625: PUSH
28626: LD_VAR 0 2
28630: PPUSH
28631: LD_INT 81
28633: PUSH
28634: LD_VAR 0 1
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PPUSH
28643: CALL_OW 70
28647: ST_TO_ADDR
// end ;
28648: LD_VAR 0 3
28652: RET
// export function IsExtension ( b ) ; begin
28653: LD_INT 0
28655: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28656: LD_ADDR_VAR 0 2
28660: PUSH
28661: LD_VAR 0 1
28665: PUSH
28666: LD_INT 23
28668: PUSH
28669: LD_INT 20
28671: PUSH
28672: LD_INT 22
28674: PUSH
28675: LD_INT 17
28677: PUSH
28678: LD_INT 24
28680: PUSH
28681: LD_INT 21
28683: PUSH
28684: LD_INT 19
28686: PUSH
28687: LD_INT 16
28689: PUSH
28690: LD_INT 25
28692: PUSH
28693: LD_INT 18
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: IN
28708: ST_TO_ADDR
// end ;
28709: LD_VAR 0 2
28713: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28714: LD_INT 0
28716: PPUSH
28717: PPUSH
28718: PPUSH
// result := [ ] ;
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: EMPTY
28725: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28726: LD_ADDR_VAR 0 4
28730: PUSH
28731: LD_VAR 0 2
28735: PPUSH
28736: LD_INT 21
28738: PUSH
28739: LD_INT 3
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PPUSH
28746: CALL_OW 70
28750: ST_TO_ADDR
// if not tmp then
28751: LD_VAR 0 4
28755: NOT
28756: IFFALSE 28760
// exit ;
28758: GO 28818
// for i in tmp do
28760: LD_ADDR_VAR 0 5
28764: PUSH
28765: LD_VAR 0 4
28769: PUSH
28770: FOR_IN
28771: IFFALSE 28806
// if GetBase ( i ) <> base then
28773: LD_VAR 0 5
28777: PPUSH
28778: CALL_OW 274
28782: PUSH
28783: LD_VAR 0 1
28787: NONEQUAL
28788: IFFALSE 28804
// ComLinkToBase ( base , i ) ;
28790: LD_VAR 0 1
28794: PPUSH
28795: LD_VAR 0 5
28799: PPUSH
28800: CALL_OW 169
28804: GO 28770
28806: POP
28807: POP
// result := tmp ;
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_VAR 0 4
28817: ST_TO_ADDR
// end ;
28818: LD_VAR 0 3
28822: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28823: LD_INT 0
28825: PPUSH
28826: PPUSH
// if BuildingStatus ( b ) = bs_build then
28827: LD_VAR 0 2
28831: PPUSH
28832: CALL_OW 461
28836: PUSH
28837: LD_INT 1
28839: EQUAL
28840: IFFALSE 28900
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28842: LD_VAR 0 1
28846: PPUSH
28847: LD_STRING h
28849: PUSH
28850: LD_VAR 0 2
28854: PPUSH
28855: CALL_OW 250
28859: PUSH
28860: LD_VAR 0 2
28864: PPUSH
28865: CALL_OW 251
28869: PUSH
28870: LD_VAR 0 2
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: PPUSH
28896: CALL_OW 446
// end ;
28900: LD_VAR 0 3
28904: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28905: LD_INT 0
28907: PPUSH
28908: PPUSH
28909: PPUSH
28910: PPUSH
28911: PPUSH
28912: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28913: LD_VAR 0 1
28917: NOT
28918: PUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL_OW 263
28928: PUSH
28929: LD_INT 2
28931: EQUAL
28932: NOT
28933: OR
28934: IFFALSE 28938
// exit ;
28936: GO 29254
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28938: LD_ADDR_VAR 0 6
28942: PUSH
28943: LD_INT 22
28945: PUSH
28946: LD_VAR 0 1
28950: PPUSH
28951: CALL_OW 255
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 2
28962: PUSH
28963: LD_INT 30
28965: PUSH
28966: LD_INT 36
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 34
28975: PUSH
28976: LD_INT 31
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PPUSH
28992: CALL_OW 69
28996: ST_TO_ADDR
// if not tmp then
28997: LD_VAR 0 6
29001: NOT
29002: IFFALSE 29006
// exit ;
29004: GO 29254
// result := [ ] ;
29006: LD_ADDR_VAR 0 2
29010: PUSH
29011: EMPTY
29012: ST_TO_ADDR
// for i in tmp do
29013: LD_ADDR_VAR 0 3
29017: PUSH
29018: LD_VAR 0 6
29022: PUSH
29023: FOR_IN
29024: IFFALSE 29095
// begin t := UnitsInside ( i ) ;
29026: LD_ADDR_VAR 0 4
29030: PUSH
29031: LD_VAR 0 3
29035: PPUSH
29036: CALL_OW 313
29040: ST_TO_ADDR
// if t then
29041: LD_VAR 0 4
29045: IFFALSE 29093
// for j in t do
29047: LD_ADDR_VAR 0 7
29051: PUSH
29052: LD_VAR 0 4
29056: PUSH
29057: FOR_IN
29058: IFFALSE 29091
// result := Insert ( result , result + 1 , j ) ;
29060: LD_ADDR_VAR 0 2
29064: PUSH
29065: LD_VAR 0 2
29069: PPUSH
29070: LD_VAR 0 2
29074: PUSH
29075: LD_INT 1
29077: PLUS
29078: PPUSH
29079: LD_VAR 0 7
29083: PPUSH
29084: CALL_OW 2
29088: ST_TO_ADDR
29089: GO 29057
29091: POP
29092: POP
// end ;
29093: GO 29023
29095: POP
29096: POP
// if not result then
29097: LD_VAR 0 2
29101: NOT
29102: IFFALSE 29106
// exit ;
29104: GO 29254
// mech := result [ 1 ] ;
29106: LD_ADDR_VAR 0 5
29110: PUSH
29111: LD_VAR 0 2
29115: PUSH
29116: LD_INT 1
29118: ARRAY
29119: ST_TO_ADDR
// if result > 1 then
29120: LD_VAR 0 2
29124: PUSH
29125: LD_INT 1
29127: GREATER
29128: IFFALSE 29240
// for i = 2 to result do
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: DOUBLE
29136: LD_INT 2
29138: DEC
29139: ST_TO_ADDR
29140: LD_VAR 0 2
29144: PUSH
29145: FOR_TO
29146: IFFALSE 29238
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29148: LD_ADDR_VAR 0 4
29152: PUSH
29153: LD_VAR 0 2
29157: PUSH
29158: LD_VAR 0 3
29162: ARRAY
29163: PPUSH
29164: LD_INT 3
29166: PPUSH
29167: CALL_OW 259
29171: PUSH
29172: LD_VAR 0 2
29176: PUSH
29177: LD_VAR 0 3
29181: ARRAY
29182: PPUSH
29183: CALL_OW 432
29187: MINUS
29188: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29189: LD_VAR 0 4
29193: PUSH
29194: LD_VAR 0 5
29198: PPUSH
29199: LD_INT 3
29201: PPUSH
29202: CALL_OW 259
29206: PUSH
29207: LD_VAR 0 5
29211: PPUSH
29212: CALL_OW 432
29216: MINUS
29217: GREATEREQUAL
29218: IFFALSE 29236
// mech := result [ i ] ;
29220: LD_ADDR_VAR 0 5
29224: PUSH
29225: LD_VAR 0 2
29229: PUSH
29230: LD_VAR 0 3
29234: ARRAY
29235: ST_TO_ADDR
// end ;
29236: GO 29145
29238: POP
29239: POP
// ComLinkTo ( vehicle , mech ) ;
29240: LD_VAR 0 1
29244: PPUSH
29245: LD_VAR 0 5
29249: PPUSH
29250: CALL_OW 135
// end ;
29254: LD_VAR 0 2
29258: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29259: LD_INT 0
29261: PPUSH
29262: PPUSH
29263: PPUSH
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
// result := [ ] ;
29274: LD_ADDR_VAR 0 7
29278: PUSH
29279: EMPTY
29280: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29281: LD_VAR 0 1
29285: PPUSH
29286: CALL_OW 266
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: IN
29301: NOT
29302: IFFALSE 29306
// exit ;
29304: GO 30937
// if name then
29306: LD_VAR 0 3
29310: IFFALSE 29326
// SetBName ( base_dep , name ) ;
29312: LD_VAR 0 1
29316: PPUSH
29317: LD_VAR 0 3
29321: PPUSH
29322: CALL_OW 500
// base := GetBase ( base_dep ) ;
29326: LD_ADDR_VAR 0 15
29330: PUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: CALL_OW 274
29340: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29341: LD_ADDR_VAR 0 16
29345: PUSH
29346: LD_VAR 0 1
29350: PPUSH
29351: CALL_OW 255
29355: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29356: LD_ADDR_VAR 0 17
29360: PUSH
29361: LD_VAR 0 1
29365: PPUSH
29366: CALL_OW 248
29370: ST_TO_ADDR
// if sources then
29371: LD_VAR 0 5
29375: IFFALSE 29422
// for i = 1 to 3 do
29377: LD_ADDR_VAR 0 8
29381: PUSH
29382: DOUBLE
29383: LD_INT 1
29385: DEC
29386: ST_TO_ADDR
29387: LD_INT 3
29389: PUSH
29390: FOR_TO
29391: IFFALSE 29420
// AddResourceType ( base , i , sources [ i ] ) ;
29393: LD_VAR 0 15
29397: PPUSH
29398: LD_VAR 0 8
29402: PPUSH
29403: LD_VAR 0 5
29407: PUSH
29408: LD_VAR 0 8
29412: ARRAY
29413: PPUSH
29414: CALL_OW 276
29418: GO 29390
29420: POP
29421: POP
// buildings := GetBaseBuildings ( base , area ) ;
29422: LD_ADDR_VAR 0 18
29426: PUSH
29427: LD_VAR 0 15
29431: PPUSH
29432: LD_VAR 0 2
29436: PPUSH
29437: CALL 28714 0 2
29441: ST_TO_ADDR
// InitHc ;
29442: CALL_OW 19
// InitUc ;
29446: CALL_OW 18
// uc_side := side ;
29450: LD_ADDR_OWVAR 20
29454: PUSH
29455: LD_VAR 0 16
29459: ST_TO_ADDR
// uc_nation := nation ;
29460: LD_ADDR_OWVAR 21
29464: PUSH
29465: LD_VAR 0 17
29469: ST_TO_ADDR
// if buildings then
29470: LD_VAR 0 18
29474: IFFALSE 30796
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29476: LD_ADDR_VAR 0 19
29480: PUSH
29481: LD_VAR 0 18
29485: PPUSH
29486: LD_INT 2
29488: PUSH
29489: LD_INT 30
29491: PUSH
29492: LD_INT 29
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 30
29501: PUSH
29502: LD_INT 30
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: PPUSH
29514: CALL_OW 72
29518: ST_TO_ADDR
// if tmp then
29519: LD_VAR 0 19
29523: IFFALSE 29571
// for i in tmp do
29525: LD_ADDR_VAR 0 8
29529: PUSH
29530: LD_VAR 0 19
29534: PUSH
29535: FOR_IN
29536: IFFALSE 29569
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29538: LD_VAR 0 8
29542: PPUSH
29543: CALL_OW 250
29547: PPUSH
29548: LD_VAR 0 8
29552: PPUSH
29553: CALL_OW 251
29557: PPUSH
29558: LD_VAR 0 16
29562: PPUSH
29563: CALL_OW 441
29567: GO 29535
29569: POP
29570: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29571: LD_VAR 0 18
29575: PPUSH
29576: LD_INT 2
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: LD_INT 32
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 30
29591: PUSH
29592: LD_INT 33
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: PPUSH
29604: CALL_OW 72
29608: IFFALSE 29696
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29610: LD_ADDR_VAR 0 8
29614: PUSH
29615: LD_VAR 0 18
29619: PPUSH
29620: LD_INT 2
29622: PUSH
29623: LD_INT 30
29625: PUSH
29626: LD_INT 32
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 30
29635: PUSH
29636: LD_INT 33
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 72
29652: PUSH
29653: FOR_IN
29654: IFFALSE 29694
// begin if not GetBWeapon ( i ) then
29656: LD_VAR 0 8
29660: PPUSH
29661: CALL_OW 269
29665: NOT
29666: IFFALSE 29692
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29668: LD_VAR 0 8
29672: PPUSH
29673: LD_VAR 0 8
29677: PPUSH
29678: LD_VAR 0 2
29682: PPUSH
29683: CALL 30942 0 2
29687: PPUSH
29688: CALL_OW 431
// end ;
29692: GO 29653
29694: POP
29695: POP
// end ; for i = 1 to personel do
29696: LD_ADDR_VAR 0 8
29700: PUSH
29701: DOUBLE
29702: LD_INT 1
29704: DEC
29705: ST_TO_ADDR
29706: LD_VAR 0 6
29710: PUSH
29711: FOR_TO
29712: IFFALSE 30776
// begin if i > 4 then
29714: LD_VAR 0 8
29718: PUSH
29719: LD_INT 4
29721: GREATER
29722: IFFALSE 29726
// break ;
29724: GO 30776
// case i of 1 :
29726: LD_VAR 0 8
29730: PUSH
29731: LD_INT 1
29733: DOUBLE
29734: EQUAL
29735: IFTRUE 29739
29737: GO 29819
29739: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29740: LD_ADDR_VAR 0 12
29744: PUSH
29745: LD_VAR 0 18
29749: PPUSH
29750: LD_INT 22
29752: PUSH
29753: LD_VAR 0 16
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 58
29764: PUSH
29765: EMPTY
29766: LIST
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: LD_INT 30
29773: PUSH
29774: LD_INT 32
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 30
29783: PUSH
29784: LD_INT 4
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 30
29793: PUSH
29794: LD_INT 5
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: PPUSH
29812: CALL_OW 72
29816: ST_TO_ADDR
29817: GO 30041
29819: LD_INT 2
29821: DOUBLE
29822: EQUAL
29823: IFTRUE 29827
29825: GO 29889
29827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29828: LD_ADDR_VAR 0 12
29832: PUSH
29833: LD_VAR 0 18
29837: PPUSH
29838: LD_INT 22
29840: PUSH
29841: LD_VAR 0 16
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 30
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 30
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PPUSH
29882: CALL_OW 72
29886: ST_TO_ADDR
29887: GO 30041
29889: LD_INT 3
29891: DOUBLE
29892: EQUAL
29893: IFTRUE 29897
29895: GO 29959
29897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29898: LD_ADDR_VAR 0 12
29902: PUSH
29903: LD_VAR 0 18
29907: PPUSH
29908: LD_INT 22
29910: PUSH
29911: LD_VAR 0 16
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: LD_INT 30
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 30
29935: PUSH
29936: LD_INT 3
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PPUSH
29952: CALL_OW 72
29956: ST_TO_ADDR
29957: GO 30041
29959: LD_INT 4
29961: DOUBLE
29962: EQUAL
29963: IFTRUE 29967
29965: GO 30040
29967: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29968: LD_ADDR_VAR 0 12
29972: PUSH
29973: LD_VAR 0 18
29977: PPUSH
29978: LD_INT 22
29980: PUSH
29981: LD_VAR 0 16
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 2
29992: PUSH
29993: LD_INT 30
29995: PUSH
29996: LD_INT 6
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 30
30005: PUSH
30006: LD_INT 7
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 30
30015: PUSH
30016: LD_INT 8
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PPUSH
30033: CALL_OW 72
30037: ST_TO_ADDR
30038: GO 30041
30040: POP
// if i = 1 then
30041: LD_VAR 0 8
30045: PUSH
30046: LD_INT 1
30048: EQUAL
30049: IFFALSE 30160
// begin tmp := [ ] ;
30051: LD_ADDR_VAR 0 19
30055: PUSH
30056: EMPTY
30057: ST_TO_ADDR
// for j in f do
30058: LD_ADDR_VAR 0 9
30062: PUSH
30063: LD_VAR 0 12
30067: PUSH
30068: FOR_IN
30069: IFFALSE 30142
// if GetBType ( j ) = b_bunker then
30071: LD_VAR 0 9
30075: PPUSH
30076: CALL_OW 266
30080: PUSH
30081: LD_INT 32
30083: EQUAL
30084: IFFALSE 30111
// tmp := Insert ( tmp , 1 , j ) else
30086: LD_ADDR_VAR 0 19
30090: PUSH
30091: LD_VAR 0 19
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: LD_VAR 0 9
30103: PPUSH
30104: CALL_OW 2
30108: ST_TO_ADDR
30109: GO 30140
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30111: LD_ADDR_VAR 0 19
30115: PUSH
30116: LD_VAR 0 19
30120: PPUSH
30121: LD_VAR 0 19
30125: PUSH
30126: LD_INT 1
30128: PLUS
30129: PPUSH
30130: LD_VAR 0 9
30134: PPUSH
30135: CALL_OW 2
30139: ST_TO_ADDR
30140: GO 30068
30142: POP
30143: POP
// if tmp then
30144: LD_VAR 0 19
30148: IFFALSE 30160
// f := tmp ;
30150: LD_ADDR_VAR 0 12
30154: PUSH
30155: LD_VAR 0 19
30159: ST_TO_ADDR
// end ; x := personel [ i ] ;
30160: LD_ADDR_VAR 0 13
30164: PUSH
30165: LD_VAR 0 6
30169: PUSH
30170: LD_VAR 0 8
30174: ARRAY
30175: ST_TO_ADDR
// if x = - 1 then
30176: LD_VAR 0 13
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: EQUAL
30185: IFFALSE 30394
// begin for j in f do
30187: LD_ADDR_VAR 0 9
30191: PUSH
30192: LD_VAR 0 12
30196: PUSH
30197: FOR_IN
30198: IFFALSE 30390
// repeat InitHc ;
30200: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30204: LD_VAR 0 9
30208: PPUSH
30209: CALL_OW 266
30213: PUSH
30214: LD_INT 5
30216: EQUAL
30217: IFFALSE 30287
// begin if UnitsInside ( j ) < 3 then
30219: LD_VAR 0 9
30223: PPUSH
30224: CALL_OW 313
30228: PUSH
30229: LD_INT 3
30231: LESS
30232: IFFALSE 30268
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30234: LD_INT 0
30236: PPUSH
30237: LD_INT 5
30239: PUSH
30240: LD_INT 8
30242: PUSH
30243: LD_INT 9
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: LIST
30250: PUSH
30251: LD_VAR 0 17
30255: ARRAY
30256: PPUSH
30257: LD_VAR 0 4
30261: PPUSH
30262: CALL_OW 380
30266: GO 30285
// PrepareHuman ( false , i , skill ) ;
30268: LD_INT 0
30270: PPUSH
30271: LD_VAR 0 8
30275: PPUSH
30276: LD_VAR 0 4
30280: PPUSH
30281: CALL_OW 380
// end else
30285: GO 30304
// PrepareHuman ( false , i , skill ) ;
30287: LD_INT 0
30289: PPUSH
30290: LD_VAR 0 8
30294: PPUSH
30295: LD_VAR 0 4
30299: PPUSH
30300: CALL_OW 380
// un := CreateHuman ;
30304: LD_ADDR_VAR 0 14
30308: PUSH
30309: CALL_OW 44
30313: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30314: LD_ADDR_VAR 0 7
30318: PUSH
30319: LD_VAR 0 7
30323: PPUSH
30324: LD_INT 1
30326: PPUSH
30327: LD_VAR 0 14
30331: PPUSH
30332: CALL_OW 2
30336: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30337: LD_VAR 0 14
30341: PPUSH
30342: LD_VAR 0 9
30346: PPUSH
30347: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30351: LD_VAR 0 9
30355: PPUSH
30356: CALL_OW 313
30360: PUSH
30361: LD_INT 6
30363: EQUAL
30364: PUSH
30365: LD_VAR 0 9
30369: PPUSH
30370: CALL_OW 266
30374: PUSH
30375: LD_INT 32
30377: PUSH
30378: LD_INT 31
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: IN
30385: OR
30386: IFFALSE 30200
30388: GO 30197
30390: POP
30391: POP
// end else
30392: GO 30774
// for j = 1 to x do
30394: LD_ADDR_VAR 0 9
30398: PUSH
30399: DOUBLE
30400: LD_INT 1
30402: DEC
30403: ST_TO_ADDR
30404: LD_VAR 0 13
30408: PUSH
30409: FOR_TO
30410: IFFALSE 30772
// begin InitHc ;
30412: CALL_OW 19
// if not f then
30416: LD_VAR 0 12
30420: NOT
30421: IFFALSE 30510
// begin PrepareHuman ( false , i , skill ) ;
30423: LD_INT 0
30425: PPUSH
30426: LD_VAR 0 8
30430: PPUSH
30431: LD_VAR 0 4
30435: PPUSH
30436: CALL_OW 380
// un := CreateHuman ;
30440: LD_ADDR_VAR 0 14
30444: PUSH
30445: CALL_OW 44
30449: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30450: LD_ADDR_VAR 0 7
30454: PUSH
30455: LD_VAR 0 7
30459: PPUSH
30460: LD_INT 1
30462: PPUSH
30463: LD_VAR 0 14
30467: PPUSH
30468: CALL_OW 2
30472: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30473: LD_VAR 0 14
30477: PPUSH
30478: LD_VAR 0 1
30482: PPUSH
30483: CALL_OW 250
30487: PPUSH
30488: LD_VAR 0 1
30492: PPUSH
30493: CALL_OW 251
30497: PPUSH
30498: LD_INT 10
30500: PPUSH
30501: LD_INT 0
30503: PPUSH
30504: CALL_OW 50
// continue ;
30508: GO 30409
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30510: LD_VAR 0 12
30514: PUSH
30515: LD_INT 1
30517: ARRAY
30518: PPUSH
30519: CALL_OW 313
30523: PUSH
30524: LD_VAR 0 12
30528: PUSH
30529: LD_INT 1
30531: ARRAY
30532: PPUSH
30533: CALL_OW 266
30537: PUSH
30538: LD_INT 32
30540: PUSH
30541: LD_INT 31
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: IN
30548: AND
30549: PUSH
30550: LD_VAR 0 12
30554: PUSH
30555: LD_INT 1
30557: ARRAY
30558: PPUSH
30559: CALL_OW 313
30563: PUSH
30564: LD_INT 6
30566: EQUAL
30567: OR
30568: IFFALSE 30588
// f := Delete ( f , 1 ) ;
30570: LD_ADDR_VAR 0 12
30574: PUSH
30575: LD_VAR 0 12
30579: PPUSH
30580: LD_INT 1
30582: PPUSH
30583: CALL_OW 3
30587: ST_TO_ADDR
// if not f then
30588: LD_VAR 0 12
30592: NOT
30593: IFFALSE 30611
// begin x := x + 2 ;
30595: LD_ADDR_VAR 0 13
30599: PUSH
30600: LD_VAR 0 13
30604: PUSH
30605: LD_INT 2
30607: PLUS
30608: ST_TO_ADDR
// continue ;
30609: GO 30409
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30611: LD_VAR 0 12
30615: PUSH
30616: LD_INT 1
30618: ARRAY
30619: PPUSH
30620: CALL_OW 266
30624: PUSH
30625: LD_INT 5
30627: EQUAL
30628: IFFALSE 30702
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30630: LD_VAR 0 12
30634: PUSH
30635: LD_INT 1
30637: ARRAY
30638: PPUSH
30639: CALL_OW 313
30643: PUSH
30644: LD_INT 3
30646: LESS
30647: IFFALSE 30683
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30649: LD_INT 0
30651: PPUSH
30652: LD_INT 5
30654: PUSH
30655: LD_INT 8
30657: PUSH
30658: LD_INT 9
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: PUSH
30666: LD_VAR 0 17
30670: ARRAY
30671: PPUSH
30672: LD_VAR 0 4
30676: PPUSH
30677: CALL_OW 380
30681: GO 30700
// PrepareHuman ( false , i , skill ) ;
30683: LD_INT 0
30685: PPUSH
30686: LD_VAR 0 8
30690: PPUSH
30691: LD_VAR 0 4
30695: PPUSH
30696: CALL_OW 380
// end else
30700: GO 30719
// PrepareHuman ( false , i , skill ) ;
30702: LD_INT 0
30704: PPUSH
30705: LD_VAR 0 8
30709: PPUSH
30710: LD_VAR 0 4
30714: PPUSH
30715: CALL_OW 380
// un := CreateHuman ;
30719: LD_ADDR_VAR 0 14
30723: PUSH
30724: CALL_OW 44
30728: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30729: LD_ADDR_VAR 0 7
30733: PUSH
30734: LD_VAR 0 7
30738: PPUSH
30739: LD_INT 1
30741: PPUSH
30742: LD_VAR 0 14
30746: PPUSH
30747: CALL_OW 2
30751: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30752: LD_VAR 0 14
30756: PPUSH
30757: LD_VAR 0 12
30761: PUSH
30762: LD_INT 1
30764: ARRAY
30765: PPUSH
30766: CALL_OW 52
// end ;
30770: GO 30409
30772: POP
30773: POP
// end ;
30774: GO 29711
30776: POP
30777: POP
// result := result ^ buildings ;
30778: LD_ADDR_VAR 0 7
30782: PUSH
30783: LD_VAR 0 7
30787: PUSH
30788: LD_VAR 0 18
30792: ADD
30793: ST_TO_ADDR
// end else
30794: GO 30937
// begin for i = 1 to personel do
30796: LD_ADDR_VAR 0 8
30800: PUSH
30801: DOUBLE
30802: LD_INT 1
30804: DEC
30805: ST_TO_ADDR
30806: LD_VAR 0 6
30810: PUSH
30811: FOR_TO
30812: IFFALSE 30935
// begin if i > 4 then
30814: LD_VAR 0 8
30818: PUSH
30819: LD_INT 4
30821: GREATER
30822: IFFALSE 30826
// break ;
30824: GO 30935
// x := personel [ i ] ;
30826: LD_ADDR_VAR 0 13
30830: PUSH
30831: LD_VAR 0 6
30835: PUSH
30836: LD_VAR 0 8
30840: ARRAY
30841: ST_TO_ADDR
// if x = - 1 then
30842: LD_VAR 0 13
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: EQUAL
30851: IFFALSE 30855
// continue ;
30853: GO 30811
// PrepareHuman ( false , i , skill ) ;
30855: LD_INT 0
30857: PPUSH
30858: LD_VAR 0 8
30862: PPUSH
30863: LD_VAR 0 4
30867: PPUSH
30868: CALL_OW 380
// un := CreateHuman ;
30872: LD_ADDR_VAR 0 14
30876: PUSH
30877: CALL_OW 44
30881: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30882: LD_VAR 0 14
30886: PPUSH
30887: LD_VAR 0 1
30891: PPUSH
30892: CALL_OW 250
30896: PPUSH
30897: LD_VAR 0 1
30901: PPUSH
30902: CALL_OW 251
30906: PPUSH
30907: LD_INT 10
30909: PPUSH
30910: LD_INT 0
30912: PPUSH
30913: CALL_OW 50
// result := result ^ un ;
30917: LD_ADDR_VAR 0 7
30921: PUSH
30922: LD_VAR 0 7
30926: PUSH
30927: LD_VAR 0 14
30931: ADD
30932: ST_TO_ADDR
// end ;
30933: GO 30811
30935: POP
30936: POP
// end ; end ;
30937: LD_VAR 0 7
30941: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30942: LD_INT 0
30944: PPUSH
30945: PPUSH
30946: PPUSH
30947: PPUSH
30948: PPUSH
30949: PPUSH
30950: PPUSH
30951: PPUSH
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
30958: PPUSH
30959: PPUSH
// result := false ;
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_INT 0
30967: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30968: LD_VAR 0 1
30972: NOT
30973: PUSH
30974: LD_VAR 0 1
30978: PPUSH
30979: CALL_OW 266
30983: PUSH
30984: LD_INT 32
30986: PUSH
30987: LD_INT 33
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: IN
30994: NOT
30995: OR
30996: IFFALSE 31000
// exit ;
30998: GO 32136
// nat := GetNation ( tower ) ;
31000: LD_ADDR_VAR 0 12
31004: PUSH
31005: LD_VAR 0 1
31009: PPUSH
31010: CALL_OW 248
31014: ST_TO_ADDR
// side := GetSide ( tower ) ;
31015: LD_ADDR_VAR 0 16
31019: PUSH
31020: LD_VAR 0 1
31024: PPUSH
31025: CALL_OW 255
31029: ST_TO_ADDR
// x := GetX ( tower ) ;
31030: LD_ADDR_VAR 0 10
31034: PUSH
31035: LD_VAR 0 1
31039: PPUSH
31040: CALL_OW 250
31044: ST_TO_ADDR
// y := GetY ( tower ) ;
31045: LD_ADDR_VAR 0 11
31049: PUSH
31050: LD_VAR 0 1
31054: PPUSH
31055: CALL_OW 251
31059: ST_TO_ADDR
// if not x or not y then
31060: LD_VAR 0 10
31064: NOT
31065: PUSH
31066: LD_VAR 0 11
31070: NOT
31071: OR
31072: IFFALSE 31076
// exit ;
31074: GO 32136
// weapon := 0 ;
31076: LD_ADDR_VAR 0 18
31080: PUSH
31081: LD_INT 0
31083: ST_TO_ADDR
// fac_list := [ ] ;
31084: LD_ADDR_VAR 0 17
31088: PUSH
31089: EMPTY
31090: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31091: LD_ADDR_VAR 0 6
31095: PUSH
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 274
31105: PPUSH
31106: LD_VAR 0 2
31110: PPUSH
31111: CALL 28714 0 2
31115: PPUSH
31116: LD_INT 30
31118: PUSH
31119: LD_INT 3
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 72
31130: ST_TO_ADDR
// if not factories then
31131: LD_VAR 0 6
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 32136
// for i in factories do
31140: LD_ADDR_VAR 0 8
31144: PUSH
31145: LD_VAR 0 6
31149: PUSH
31150: FOR_IN
31151: IFFALSE 31176
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31153: LD_ADDR_VAR 0 17
31157: PUSH
31158: LD_VAR 0 17
31162: PUSH
31163: LD_VAR 0 8
31167: PPUSH
31168: CALL_OW 478
31172: UNION
31173: ST_TO_ADDR
31174: GO 31150
31176: POP
31177: POP
// if not fac_list then
31178: LD_VAR 0 17
31182: NOT
31183: IFFALSE 31187
// exit ;
31185: GO 32136
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31187: LD_ADDR_VAR 0 5
31191: PUSH
31192: LD_INT 4
31194: PUSH
31195: LD_INT 5
31197: PUSH
31198: LD_INT 9
31200: PUSH
31201: LD_INT 10
31203: PUSH
31204: LD_INT 6
31206: PUSH
31207: LD_INT 7
31209: PUSH
31210: LD_INT 11
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 27
31224: PUSH
31225: LD_INT 28
31227: PUSH
31228: LD_INT 26
31230: PUSH
31231: LD_INT 30
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 43
31242: PUSH
31243: LD_INT 44
31245: PUSH
31246: LD_INT 46
31248: PUSH
31249: LD_INT 45
31251: PUSH
31252: LD_INT 47
31254: PUSH
31255: LD_INT 49
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: PUSH
31271: LD_VAR 0 12
31275: ARRAY
31276: ST_TO_ADDR
// for i in list do
31277: LD_ADDR_VAR 0 8
31281: PUSH
31282: LD_VAR 0 5
31286: PUSH
31287: FOR_IN
31288: IFFALSE 31321
// if not i in fac_list then
31290: LD_VAR 0 8
31294: PUSH
31295: LD_VAR 0 17
31299: IN
31300: NOT
31301: IFFALSE 31319
// list := list diff i ;
31303: LD_ADDR_VAR 0 5
31307: PUSH
31308: LD_VAR 0 5
31312: PUSH
31313: LD_VAR 0 8
31317: DIFF
31318: ST_TO_ADDR
31319: GO 31287
31321: POP
31322: POP
// if not list then
31323: LD_VAR 0 5
31327: NOT
31328: IFFALSE 31332
// exit ;
31330: GO 32136
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31332: LD_VAR 0 12
31336: PUSH
31337: LD_INT 3
31339: EQUAL
31340: PUSH
31341: LD_INT 49
31343: PUSH
31344: LD_VAR 0 5
31348: IN
31349: AND
31350: PUSH
31351: LD_INT 31
31353: PPUSH
31354: LD_VAR 0 16
31358: PPUSH
31359: CALL_OW 321
31363: PUSH
31364: LD_INT 2
31366: EQUAL
31367: AND
31368: IFFALSE 31428
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31370: LD_INT 22
31372: PUSH
31373: LD_VAR 0 16
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 35
31384: PUSH
31385: LD_INT 49
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 91
31394: PUSH
31395: LD_VAR 0 1
31399: PUSH
31400: LD_INT 10
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: PPUSH
31413: CALL_OW 69
31417: NOT
31418: IFFALSE 31428
// weapon := ru_time_lapser ;
31420: LD_ADDR_VAR 0 18
31424: PUSH
31425: LD_INT 49
31427: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31428: LD_VAR 0 12
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: LD_INT 2
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: IN
31443: PUSH
31444: LD_INT 11
31446: PUSH
31447: LD_VAR 0 5
31451: IN
31452: PUSH
31453: LD_INT 30
31455: PUSH
31456: LD_VAR 0 5
31460: IN
31461: OR
31462: AND
31463: PUSH
31464: LD_INT 6
31466: PPUSH
31467: LD_VAR 0 16
31471: PPUSH
31472: CALL_OW 321
31476: PUSH
31477: LD_INT 2
31479: EQUAL
31480: AND
31481: IFFALSE 31646
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31483: LD_INT 22
31485: PUSH
31486: LD_VAR 0 16
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 35
31500: PUSH
31501: LD_INT 11
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 35
31510: PUSH
31511: LD_INT 30
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 91
31525: PUSH
31526: LD_VAR 0 1
31530: PUSH
31531: LD_INT 18
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: PPUSH
31544: CALL_OW 69
31548: NOT
31549: PUSH
31550: LD_INT 22
31552: PUSH
31553: LD_VAR 0 16
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: LD_INT 30
31567: PUSH
31568: LD_INT 32
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 30
31577: PUSH
31578: LD_INT 33
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 91
31592: PUSH
31593: LD_VAR 0 1
31597: PUSH
31598: LD_INT 12
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: PPUSH
31614: CALL_OW 69
31618: PUSH
31619: LD_INT 2
31621: GREATER
31622: AND
31623: IFFALSE 31646
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31625: LD_ADDR_VAR 0 18
31629: PUSH
31630: LD_INT 11
31632: PUSH
31633: LD_INT 30
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_VAR 0 12
31644: ARRAY
31645: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31646: LD_VAR 0 18
31650: NOT
31651: PUSH
31652: LD_INT 40
31654: PPUSH
31655: LD_VAR 0 16
31659: PPUSH
31660: CALL_OW 321
31664: PUSH
31665: LD_INT 2
31667: EQUAL
31668: AND
31669: PUSH
31670: LD_INT 7
31672: PUSH
31673: LD_VAR 0 5
31677: IN
31678: PUSH
31679: LD_INT 28
31681: PUSH
31682: LD_VAR 0 5
31686: IN
31687: OR
31688: PUSH
31689: LD_INT 45
31691: PUSH
31692: LD_VAR 0 5
31696: IN
31697: OR
31698: AND
31699: IFFALSE 31953
// begin hex := GetHexInfo ( x , y ) ;
31701: LD_ADDR_VAR 0 4
31705: PUSH
31706: LD_VAR 0 10
31710: PPUSH
31711: LD_VAR 0 11
31715: PPUSH
31716: CALL_OW 546
31720: ST_TO_ADDR
// if hex [ 1 ] then
31721: LD_VAR 0 4
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: IFFALSE 31733
// exit ;
31731: GO 32136
// height := hex [ 2 ] ;
31733: LD_ADDR_VAR 0 15
31737: PUSH
31738: LD_VAR 0 4
31742: PUSH
31743: LD_INT 2
31745: ARRAY
31746: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31747: LD_ADDR_VAR 0 14
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: LD_INT 5
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
// for i in tmp do
31770: LD_ADDR_VAR 0 8
31774: PUSH
31775: LD_VAR 0 14
31779: PUSH
31780: FOR_IN
31781: IFFALSE 31951
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31783: LD_ADDR_VAR 0 9
31787: PUSH
31788: LD_VAR 0 10
31792: PPUSH
31793: LD_VAR 0 8
31797: PPUSH
31798: LD_INT 5
31800: PPUSH
31801: CALL_OW 272
31805: PUSH
31806: LD_VAR 0 11
31810: PPUSH
31811: LD_VAR 0 8
31815: PPUSH
31816: LD_INT 5
31818: PPUSH
31819: CALL_OW 273
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31828: LD_VAR 0 9
31832: PUSH
31833: LD_INT 1
31835: ARRAY
31836: PPUSH
31837: LD_VAR 0 9
31841: PUSH
31842: LD_INT 2
31844: ARRAY
31845: PPUSH
31846: CALL_OW 488
31850: IFFALSE 31949
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31852: LD_ADDR_VAR 0 4
31856: PUSH
31857: LD_VAR 0 9
31861: PUSH
31862: LD_INT 1
31864: ARRAY
31865: PPUSH
31866: LD_VAR 0 9
31870: PUSH
31871: LD_INT 2
31873: ARRAY
31874: PPUSH
31875: CALL_OW 546
31879: ST_TO_ADDR
// if hex [ 1 ] then
31880: LD_VAR 0 4
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: IFFALSE 31892
// continue ;
31890: GO 31780
// h := hex [ 2 ] ;
31892: LD_ADDR_VAR 0 13
31896: PUSH
31897: LD_VAR 0 4
31901: PUSH
31902: LD_INT 2
31904: ARRAY
31905: ST_TO_ADDR
// if h + 7 < height then
31906: LD_VAR 0 13
31910: PUSH
31911: LD_INT 7
31913: PLUS
31914: PUSH
31915: LD_VAR 0 15
31919: LESS
31920: IFFALSE 31949
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31922: LD_ADDR_VAR 0 18
31926: PUSH
31927: LD_INT 7
31929: PUSH
31930: LD_INT 28
31932: PUSH
31933: LD_INT 45
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: PUSH
31941: LD_VAR 0 12
31945: ARRAY
31946: ST_TO_ADDR
// break ;
31947: GO 31951
// end ; end ; end ;
31949: GO 31780
31951: POP
31952: POP
// end ; if not weapon then
31953: LD_VAR 0 18
31957: NOT
31958: IFFALSE 32018
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31960: LD_ADDR_VAR 0 5
31964: PUSH
31965: LD_VAR 0 5
31969: PUSH
31970: LD_INT 11
31972: PUSH
31973: LD_INT 30
31975: PUSH
31976: LD_INT 49
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: DIFF
31984: ST_TO_ADDR
// if not list then
31985: LD_VAR 0 5
31989: NOT
31990: IFFALSE 31994
// exit ;
31992: GO 32136
// weapon := list [ rand ( 1 , list ) ] ;
31994: LD_ADDR_VAR 0 18
31998: PUSH
31999: LD_VAR 0 5
32003: PUSH
32004: LD_INT 1
32006: PPUSH
32007: LD_VAR 0 5
32011: PPUSH
32012: CALL_OW 12
32016: ARRAY
32017: ST_TO_ADDR
// end ; if weapon then
32018: LD_VAR 0 18
32022: IFFALSE 32136
// begin tmp := CostOfWeapon ( weapon ) ;
32024: LD_ADDR_VAR 0 14
32028: PUSH
32029: LD_VAR 0 18
32033: PPUSH
32034: CALL_OW 451
32038: ST_TO_ADDR
// j := GetBase ( tower ) ;
32039: LD_ADDR_VAR 0 9
32043: PUSH
32044: LD_VAR 0 1
32048: PPUSH
32049: CALL_OW 274
32053: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32054: LD_VAR 0 9
32058: PPUSH
32059: LD_INT 1
32061: PPUSH
32062: CALL_OW 275
32066: PUSH
32067: LD_VAR 0 14
32071: PUSH
32072: LD_INT 1
32074: ARRAY
32075: GREATEREQUAL
32076: PUSH
32077: LD_VAR 0 9
32081: PPUSH
32082: LD_INT 2
32084: PPUSH
32085: CALL_OW 275
32089: PUSH
32090: LD_VAR 0 14
32094: PUSH
32095: LD_INT 2
32097: ARRAY
32098: GREATEREQUAL
32099: AND
32100: PUSH
32101: LD_VAR 0 9
32105: PPUSH
32106: LD_INT 3
32108: PPUSH
32109: CALL_OW 275
32113: PUSH
32114: LD_VAR 0 14
32118: PUSH
32119: LD_INT 3
32121: ARRAY
32122: GREATEREQUAL
32123: AND
32124: IFFALSE 32136
// result := weapon ;
32126: LD_ADDR_VAR 0 3
32130: PUSH
32131: LD_VAR 0 18
32135: ST_TO_ADDR
// end ; end ;
32136: LD_VAR 0 3
32140: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32141: LD_INT 0
32143: PPUSH
32144: PPUSH
// result := true ;
32145: LD_ADDR_VAR 0 3
32149: PUSH
32150: LD_INT 1
32152: ST_TO_ADDR
// if array1 = array2 then
32153: LD_VAR 0 1
32157: PUSH
32158: LD_VAR 0 2
32162: EQUAL
32163: IFFALSE 32223
// begin for i = 1 to array1 do
32165: LD_ADDR_VAR 0 4
32169: PUSH
32170: DOUBLE
32171: LD_INT 1
32173: DEC
32174: ST_TO_ADDR
32175: LD_VAR 0 1
32179: PUSH
32180: FOR_TO
32181: IFFALSE 32219
// if array1 [ i ] <> array2 [ i ] then
32183: LD_VAR 0 1
32187: PUSH
32188: LD_VAR 0 4
32192: ARRAY
32193: PUSH
32194: LD_VAR 0 2
32198: PUSH
32199: LD_VAR 0 4
32203: ARRAY
32204: NONEQUAL
32205: IFFALSE 32217
// begin result := false ;
32207: LD_ADDR_VAR 0 3
32211: PUSH
32212: LD_INT 0
32214: ST_TO_ADDR
// break ;
32215: GO 32219
// end ;
32217: GO 32180
32219: POP
32220: POP
// end else
32221: GO 32231
// result := false ;
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: LD_INT 0
32230: ST_TO_ADDR
// end ;
32231: LD_VAR 0 3
32235: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32236: LD_INT 0
32238: PPUSH
32239: PPUSH
32240: PPUSH
// pom := GetBase ( fac ) ;
32241: LD_ADDR_VAR 0 5
32245: PUSH
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 274
32255: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32256: LD_ADDR_VAR 0 4
32260: PUSH
32261: LD_VAR 0 2
32265: PUSH
32266: LD_INT 1
32268: ARRAY
32269: PPUSH
32270: LD_VAR 0 2
32274: PUSH
32275: LD_INT 2
32277: ARRAY
32278: PPUSH
32279: LD_VAR 0 2
32283: PUSH
32284: LD_INT 3
32286: ARRAY
32287: PPUSH
32288: LD_VAR 0 2
32292: PUSH
32293: LD_INT 4
32295: ARRAY
32296: PPUSH
32297: CALL_OW 449
32301: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32302: LD_ADDR_VAR 0 3
32306: PUSH
32307: LD_VAR 0 5
32311: PPUSH
32312: LD_INT 1
32314: PPUSH
32315: CALL_OW 275
32319: PUSH
32320: LD_VAR 0 4
32324: PUSH
32325: LD_INT 1
32327: ARRAY
32328: GREATEREQUAL
32329: PUSH
32330: LD_VAR 0 5
32334: PPUSH
32335: LD_INT 2
32337: PPUSH
32338: CALL_OW 275
32342: PUSH
32343: LD_VAR 0 4
32347: PUSH
32348: LD_INT 2
32350: ARRAY
32351: GREATEREQUAL
32352: AND
32353: PUSH
32354: LD_VAR 0 5
32358: PPUSH
32359: LD_INT 3
32361: PPUSH
32362: CALL_OW 275
32366: PUSH
32367: LD_VAR 0 4
32371: PUSH
32372: LD_INT 3
32374: ARRAY
32375: GREATEREQUAL
32376: AND
32377: ST_TO_ADDR
// end ;
32378: LD_VAR 0 3
32382: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32383: LD_INT 0
32385: PPUSH
32386: PPUSH
32387: PPUSH
32388: PPUSH
// pom := GetBase ( building ) ;
32389: LD_ADDR_VAR 0 3
32393: PUSH
32394: LD_VAR 0 1
32398: PPUSH
32399: CALL_OW 274
32403: ST_TO_ADDR
// if not pom then
32404: LD_VAR 0 3
32408: NOT
32409: IFFALSE 32413
// exit ;
32411: GO 32583
// btype := GetBType ( building ) ;
32413: LD_ADDR_VAR 0 5
32417: PUSH
32418: LD_VAR 0 1
32422: PPUSH
32423: CALL_OW 266
32427: ST_TO_ADDR
// if btype = b_armoury then
32428: LD_VAR 0 5
32432: PUSH
32433: LD_INT 4
32435: EQUAL
32436: IFFALSE 32446
// btype := b_barracks ;
32438: LD_ADDR_VAR 0 5
32442: PUSH
32443: LD_INT 5
32445: ST_TO_ADDR
// if btype = b_depot then
32446: LD_VAR 0 5
32450: PUSH
32451: LD_INT 0
32453: EQUAL
32454: IFFALSE 32464
// btype := b_warehouse ;
32456: LD_ADDR_VAR 0 5
32460: PUSH
32461: LD_INT 1
32463: ST_TO_ADDR
// if btype = b_workshop then
32464: LD_VAR 0 5
32468: PUSH
32469: LD_INT 2
32471: EQUAL
32472: IFFALSE 32482
// btype := b_factory ;
32474: LD_ADDR_VAR 0 5
32478: PUSH
32479: LD_INT 3
32481: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32482: LD_ADDR_VAR 0 4
32486: PUSH
32487: LD_VAR 0 5
32491: PPUSH
32492: LD_VAR 0 1
32496: PPUSH
32497: CALL_OW 248
32501: PPUSH
32502: CALL_OW 450
32506: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32507: LD_ADDR_VAR 0 2
32511: PUSH
32512: LD_VAR 0 3
32516: PPUSH
32517: LD_INT 1
32519: PPUSH
32520: CALL_OW 275
32524: PUSH
32525: LD_VAR 0 4
32529: PUSH
32530: LD_INT 1
32532: ARRAY
32533: GREATEREQUAL
32534: PUSH
32535: LD_VAR 0 3
32539: PPUSH
32540: LD_INT 2
32542: PPUSH
32543: CALL_OW 275
32547: PUSH
32548: LD_VAR 0 4
32552: PUSH
32553: LD_INT 2
32555: ARRAY
32556: GREATEREQUAL
32557: AND
32558: PUSH
32559: LD_VAR 0 3
32563: PPUSH
32564: LD_INT 3
32566: PPUSH
32567: CALL_OW 275
32571: PUSH
32572: LD_VAR 0 4
32576: PUSH
32577: LD_INT 3
32579: ARRAY
32580: GREATEREQUAL
32581: AND
32582: ST_TO_ADDR
// end ;
32583: LD_VAR 0 2
32587: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
32592: PPUSH
// pom := GetBase ( building ) ;
32593: LD_ADDR_VAR 0 4
32597: PUSH
32598: LD_VAR 0 1
32602: PPUSH
32603: CALL_OW 274
32607: ST_TO_ADDR
// if not pom then
32608: LD_VAR 0 4
32612: NOT
32613: IFFALSE 32617
// exit ;
32615: GO 32718
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32617: LD_ADDR_VAR 0 5
32621: PUSH
32622: LD_VAR 0 2
32626: PPUSH
32627: LD_VAR 0 1
32631: PPUSH
32632: CALL_OW 248
32636: PPUSH
32637: CALL_OW 450
32641: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32642: LD_ADDR_VAR 0 3
32646: PUSH
32647: LD_VAR 0 4
32651: PPUSH
32652: LD_INT 1
32654: PPUSH
32655: CALL_OW 275
32659: PUSH
32660: LD_VAR 0 5
32664: PUSH
32665: LD_INT 1
32667: ARRAY
32668: GREATEREQUAL
32669: PUSH
32670: LD_VAR 0 4
32674: PPUSH
32675: LD_INT 2
32677: PPUSH
32678: CALL_OW 275
32682: PUSH
32683: LD_VAR 0 5
32687: PUSH
32688: LD_INT 2
32690: ARRAY
32691: GREATEREQUAL
32692: AND
32693: PUSH
32694: LD_VAR 0 4
32698: PPUSH
32699: LD_INT 3
32701: PPUSH
32702: CALL_OW 275
32706: PUSH
32707: LD_VAR 0 5
32711: PUSH
32712: LD_INT 3
32714: ARRAY
32715: GREATEREQUAL
32716: AND
32717: ST_TO_ADDR
// end ;
32718: LD_VAR 0 3
32722: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32723: LD_INT 0
32725: PPUSH
32726: PPUSH
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
32732: PPUSH
32733: PPUSH
32734: PPUSH
// result := false ;
32735: LD_ADDR_VAR 0 6
32739: PUSH
32740: LD_INT 0
32742: ST_TO_ADDR
// if not base or not btype or not x or not y then
32743: LD_VAR 0 1
32747: NOT
32748: PUSH
32749: LD_VAR 0 2
32753: NOT
32754: OR
32755: PUSH
32756: LD_VAR 0 3
32760: NOT
32761: OR
32762: PUSH
32763: LD_VAR 0 4
32767: NOT
32768: OR
32769: IFFALSE 32773
// exit ;
32771: GO 33382
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32773: LD_ADDR_VAR 0 12
32777: PUSH
32778: LD_VAR 0 2
32782: PPUSH
32783: LD_VAR 0 3
32787: PPUSH
32788: LD_VAR 0 4
32792: PPUSH
32793: LD_VAR 0 5
32797: PPUSH
32798: LD_VAR 0 1
32802: PUSH
32803: LD_INT 1
32805: ARRAY
32806: PPUSH
32807: CALL_OW 248
32811: PPUSH
32812: LD_INT 0
32814: PPUSH
32815: CALL 34219 0 6
32819: ST_TO_ADDR
// if not hexes then
32820: LD_VAR 0 12
32824: NOT
32825: IFFALSE 32829
// exit ;
32827: GO 33382
// for i = 1 to hexes do
32829: LD_ADDR_VAR 0 7
32833: PUSH
32834: DOUBLE
32835: LD_INT 1
32837: DEC
32838: ST_TO_ADDR
32839: LD_VAR 0 12
32843: PUSH
32844: FOR_TO
32845: IFFALSE 33380
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32847: LD_ADDR_VAR 0 11
32851: PUSH
32852: LD_VAR 0 12
32856: PUSH
32857: LD_VAR 0 7
32861: ARRAY
32862: PUSH
32863: LD_INT 1
32865: ARRAY
32866: PPUSH
32867: LD_VAR 0 12
32871: PUSH
32872: LD_VAR 0 7
32876: ARRAY
32877: PUSH
32878: LD_INT 2
32880: ARRAY
32881: PPUSH
32882: CALL_OW 428
32886: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32887: LD_VAR 0 12
32891: PUSH
32892: LD_VAR 0 7
32896: ARRAY
32897: PUSH
32898: LD_INT 1
32900: ARRAY
32901: PPUSH
32902: LD_VAR 0 12
32906: PUSH
32907: LD_VAR 0 7
32911: ARRAY
32912: PUSH
32913: LD_INT 2
32915: ARRAY
32916: PPUSH
32917: CALL_OW 351
32921: PUSH
32922: LD_VAR 0 12
32926: PUSH
32927: LD_VAR 0 7
32931: ARRAY
32932: PUSH
32933: LD_INT 1
32935: ARRAY
32936: PPUSH
32937: LD_VAR 0 12
32941: PUSH
32942: LD_VAR 0 7
32946: ARRAY
32947: PUSH
32948: LD_INT 2
32950: ARRAY
32951: PPUSH
32952: CALL_OW 488
32956: NOT
32957: OR
32958: PUSH
32959: LD_VAR 0 11
32963: PPUSH
32964: CALL_OW 247
32968: PUSH
32969: LD_INT 3
32971: EQUAL
32972: OR
32973: IFFALSE 32979
// exit ;
32975: POP
32976: POP
32977: GO 33382
// if not tmp or not tmp in base then
32979: LD_VAR 0 11
32983: NOT
32984: PUSH
32985: LD_VAR 0 11
32989: PUSH
32990: LD_VAR 0 1
32994: IN
32995: NOT
32996: OR
32997: IFFALSE 33001
// continue ;
32999: GO 32844
// result := true ;
33001: LD_ADDR_VAR 0 6
33005: PUSH
33006: LD_INT 1
33008: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33009: LD_ADDR_VAR 0 15
33013: PUSH
33014: LD_VAR 0 1
33018: PPUSH
33019: LD_INT 22
33021: PUSH
33022: LD_VAR 0 11
33026: PPUSH
33027: CALL_OW 255
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: LD_INT 30
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 30
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PPUSH
33068: CALL_OW 72
33072: ST_TO_ADDR
// if dep then
33073: LD_VAR 0 15
33077: IFFALSE 33213
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33079: LD_ADDR_VAR 0 14
33083: PUSH
33084: LD_VAR 0 15
33088: PUSH
33089: LD_INT 1
33091: ARRAY
33092: PPUSH
33093: CALL_OW 250
33097: PPUSH
33098: LD_VAR 0 15
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: CALL_OW 254
33111: PPUSH
33112: LD_INT 5
33114: PPUSH
33115: CALL_OW 272
33119: PUSH
33120: LD_VAR 0 15
33124: PUSH
33125: LD_INT 1
33127: ARRAY
33128: PPUSH
33129: CALL_OW 251
33133: PPUSH
33134: LD_VAR 0 15
33138: PUSH
33139: LD_INT 1
33141: ARRAY
33142: PPUSH
33143: CALL_OW 254
33147: PPUSH
33148: LD_INT 5
33150: PPUSH
33151: CALL_OW 273
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33160: LD_VAR 0 14
33164: PUSH
33165: LD_INT 1
33167: ARRAY
33168: PPUSH
33169: LD_VAR 0 14
33173: PUSH
33174: LD_INT 2
33176: ARRAY
33177: PPUSH
33178: CALL_OW 488
33182: IFFALSE 33213
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33184: LD_VAR 0 11
33188: PPUSH
33189: LD_VAR 0 14
33193: PUSH
33194: LD_INT 1
33196: ARRAY
33197: PPUSH
33198: LD_VAR 0 14
33202: PUSH
33203: LD_INT 2
33205: ARRAY
33206: PPUSH
33207: CALL_OW 111
// continue ;
33211: GO 32844
// end ; end ; r := GetDir ( tmp ) ;
33213: LD_ADDR_VAR 0 13
33217: PUSH
33218: LD_VAR 0 11
33222: PPUSH
33223: CALL_OW 254
33227: ST_TO_ADDR
// if r = 5 then
33228: LD_VAR 0 13
33232: PUSH
33233: LD_INT 5
33235: EQUAL
33236: IFFALSE 33246
// r := 0 ;
33238: LD_ADDR_VAR 0 13
33242: PUSH
33243: LD_INT 0
33245: ST_TO_ADDR
// for j = r to 5 do
33246: LD_ADDR_VAR 0 8
33250: PUSH
33251: DOUBLE
33252: LD_VAR 0 13
33256: DEC
33257: ST_TO_ADDR
33258: LD_INT 5
33260: PUSH
33261: FOR_TO
33262: IFFALSE 33376
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33264: LD_ADDR_VAR 0 9
33268: PUSH
33269: LD_VAR 0 11
33273: PPUSH
33274: CALL_OW 250
33278: PPUSH
33279: LD_VAR 0 8
33283: PPUSH
33284: LD_INT 2
33286: PPUSH
33287: CALL_OW 272
33291: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33292: LD_ADDR_VAR 0 10
33296: PUSH
33297: LD_VAR 0 11
33301: PPUSH
33302: CALL_OW 251
33306: PPUSH
33307: LD_VAR 0 8
33311: PPUSH
33312: LD_INT 2
33314: PPUSH
33315: CALL_OW 273
33319: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33320: LD_VAR 0 9
33324: PPUSH
33325: LD_VAR 0 10
33329: PPUSH
33330: CALL_OW 488
33334: PUSH
33335: LD_VAR 0 9
33339: PPUSH
33340: LD_VAR 0 10
33344: PPUSH
33345: CALL_OW 428
33349: NOT
33350: AND
33351: IFFALSE 33374
// begin ComMoveXY ( tmp , _x , _y ) ;
33353: LD_VAR 0 11
33357: PPUSH
33358: LD_VAR 0 9
33362: PPUSH
33363: LD_VAR 0 10
33367: PPUSH
33368: CALL_OW 111
// break ;
33372: GO 33376
// end ; end ;
33374: GO 33261
33376: POP
33377: POP
// end ;
33378: GO 32844
33380: POP
33381: POP
// end ;
33382: LD_VAR 0 6
33386: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33387: LD_INT 0
33389: PPUSH
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
33398: PPUSH
// result := false ;
33399: LD_ADDR_VAR 0 6
33403: PUSH
33404: LD_INT 0
33406: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33407: LD_VAR 0 1
33411: NOT
33412: PUSH
33413: LD_VAR 0 1
33417: PPUSH
33418: CALL_OW 266
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: IN
33433: NOT
33434: OR
33435: PUSH
33436: LD_VAR 0 2
33440: NOT
33441: OR
33442: PUSH
33443: LD_VAR 0 5
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: LD_INT 4
33462: PUSH
33463: LD_INT 5
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: IN
33474: NOT
33475: OR
33476: PUSH
33477: LD_VAR 0 3
33481: PPUSH
33482: LD_VAR 0 4
33486: PPUSH
33487: CALL_OW 488
33491: NOT
33492: OR
33493: IFFALSE 33497
// exit ;
33495: GO 34214
// pom := GetBase ( depot ) ;
33497: LD_ADDR_VAR 0 10
33501: PUSH
33502: LD_VAR 0 1
33506: PPUSH
33507: CALL_OW 274
33511: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33512: LD_ADDR_VAR 0 11
33516: PUSH
33517: LD_VAR 0 2
33521: PPUSH
33522: LD_VAR 0 1
33526: PPUSH
33527: CALL_OW 248
33531: PPUSH
33532: CALL_OW 450
33536: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33537: LD_VAR 0 10
33541: PPUSH
33542: LD_INT 1
33544: PPUSH
33545: CALL_OW 275
33549: PUSH
33550: LD_VAR 0 11
33554: PUSH
33555: LD_INT 1
33557: ARRAY
33558: GREATEREQUAL
33559: PUSH
33560: LD_VAR 0 10
33564: PPUSH
33565: LD_INT 2
33567: PPUSH
33568: CALL_OW 275
33572: PUSH
33573: LD_VAR 0 11
33577: PUSH
33578: LD_INT 2
33580: ARRAY
33581: GREATEREQUAL
33582: AND
33583: PUSH
33584: LD_VAR 0 10
33588: PPUSH
33589: LD_INT 3
33591: PPUSH
33592: CALL_OW 275
33596: PUSH
33597: LD_VAR 0 11
33601: PUSH
33602: LD_INT 3
33604: ARRAY
33605: GREATEREQUAL
33606: AND
33607: NOT
33608: IFFALSE 33612
// exit ;
33610: GO 34214
// if GetBType ( depot ) = b_depot then
33612: LD_VAR 0 1
33616: PPUSH
33617: CALL_OW 266
33621: PUSH
33622: LD_INT 0
33624: EQUAL
33625: IFFALSE 33637
// dist := 28 else
33627: LD_ADDR_VAR 0 14
33631: PUSH
33632: LD_INT 28
33634: ST_TO_ADDR
33635: GO 33645
// dist := 36 ;
33637: LD_ADDR_VAR 0 14
33641: PUSH
33642: LD_INT 36
33644: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33645: LD_VAR 0 1
33649: PPUSH
33650: LD_VAR 0 3
33654: PPUSH
33655: LD_VAR 0 4
33659: PPUSH
33660: CALL_OW 297
33664: PUSH
33665: LD_VAR 0 14
33669: GREATER
33670: IFFALSE 33674
// exit ;
33672: GO 34214
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33674: LD_ADDR_VAR 0 12
33678: PUSH
33679: LD_VAR 0 2
33683: PPUSH
33684: LD_VAR 0 3
33688: PPUSH
33689: LD_VAR 0 4
33693: PPUSH
33694: LD_VAR 0 5
33698: PPUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: CALL_OW 248
33708: PPUSH
33709: LD_INT 0
33711: PPUSH
33712: CALL 34219 0 6
33716: ST_TO_ADDR
// if not hexes then
33717: LD_VAR 0 12
33721: NOT
33722: IFFALSE 33726
// exit ;
33724: GO 34214
// hex := GetHexInfo ( x , y ) ;
33726: LD_ADDR_VAR 0 15
33730: PUSH
33731: LD_VAR 0 3
33735: PPUSH
33736: LD_VAR 0 4
33740: PPUSH
33741: CALL_OW 546
33745: ST_TO_ADDR
// if hex [ 1 ] then
33746: LD_VAR 0 15
33750: PUSH
33751: LD_INT 1
33753: ARRAY
33754: IFFALSE 33758
// exit ;
33756: GO 34214
// height := hex [ 2 ] ;
33758: LD_ADDR_VAR 0 13
33762: PUSH
33763: LD_VAR 0 15
33767: PUSH
33768: LD_INT 2
33770: ARRAY
33771: ST_TO_ADDR
// for i = 1 to hexes do
33772: LD_ADDR_VAR 0 7
33776: PUSH
33777: DOUBLE
33778: LD_INT 1
33780: DEC
33781: ST_TO_ADDR
33782: LD_VAR 0 12
33786: PUSH
33787: FOR_TO
33788: IFFALSE 34118
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33790: LD_VAR 0 12
33794: PUSH
33795: LD_VAR 0 7
33799: ARRAY
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: PPUSH
33805: LD_VAR 0 12
33809: PUSH
33810: LD_VAR 0 7
33814: ARRAY
33815: PUSH
33816: LD_INT 2
33818: ARRAY
33819: PPUSH
33820: CALL_OW 488
33824: NOT
33825: PUSH
33826: LD_VAR 0 12
33830: PUSH
33831: LD_VAR 0 7
33835: ARRAY
33836: PUSH
33837: LD_INT 1
33839: ARRAY
33840: PPUSH
33841: LD_VAR 0 12
33845: PUSH
33846: LD_VAR 0 7
33850: ARRAY
33851: PUSH
33852: LD_INT 2
33854: ARRAY
33855: PPUSH
33856: CALL_OW 428
33860: PUSH
33861: LD_INT 0
33863: GREATER
33864: OR
33865: PUSH
33866: LD_VAR 0 12
33870: PUSH
33871: LD_VAR 0 7
33875: ARRAY
33876: PUSH
33877: LD_INT 1
33879: ARRAY
33880: PPUSH
33881: LD_VAR 0 12
33885: PUSH
33886: LD_VAR 0 7
33890: ARRAY
33891: PUSH
33892: LD_INT 2
33894: ARRAY
33895: PPUSH
33896: CALL_OW 351
33900: OR
33901: IFFALSE 33907
// exit ;
33903: POP
33904: POP
33905: GO 34214
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33907: LD_ADDR_VAR 0 8
33911: PUSH
33912: LD_VAR 0 12
33916: PUSH
33917: LD_VAR 0 7
33921: ARRAY
33922: PUSH
33923: LD_INT 1
33925: ARRAY
33926: PPUSH
33927: LD_VAR 0 12
33931: PUSH
33932: LD_VAR 0 7
33936: ARRAY
33937: PUSH
33938: LD_INT 2
33940: ARRAY
33941: PPUSH
33942: CALL_OW 546
33946: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33947: LD_VAR 0 8
33951: PUSH
33952: LD_INT 1
33954: ARRAY
33955: PUSH
33956: LD_VAR 0 8
33960: PUSH
33961: LD_INT 2
33963: ARRAY
33964: PUSH
33965: LD_VAR 0 13
33969: PUSH
33970: LD_INT 2
33972: PLUS
33973: GREATER
33974: OR
33975: PUSH
33976: LD_VAR 0 8
33980: PUSH
33981: LD_INT 2
33983: ARRAY
33984: PUSH
33985: LD_VAR 0 13
33989: PUSH
33990: LD_INT 2
33992: MINUS
33993: LESS
33994: OR
33995: PUSH
33996: LD_VAR 0 8
34000: PUSH
34001: LD_INT 3
34003: ARRAY
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 8
34010: PUSH
34011: LD_INT 9
34013: PUSH
34014: LD_INT 10
34016: PUSH
34017: LD_INT 11
34019: PUSH
34020: LD_INT 12
34022: PUSH
34023: LD_INT 13
34025: PUSH
34026: LD_INT 16
34028: PUSH
34029: LD_INT 17
34031: PUSH
34032: LD_INT 18
34034: PUSH
34035: LD_INT 19
34037: PUSH
34038: LD_INT 20
34040: PUSH
34041: LD_INT 21
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: IN
34059: NOT
34060: OR
34061: PUSH
34062: LD_VAR 0 8
34066: PUSH
34067: LD_INT 5
34069: ARRAY
34070: NOT
34071: OR
34072: PUSH
34073: LD_VAR 0 8
34077: PUSH
34078: LD_INT 6
34080: ARRAY
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: LD_INT 7
34090: PUSH
34091: LD_INT 9
34093: PUSH
34094: LD_INT 10
34096: PUSH
34097: LD_INT 11
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: IN
34108: NOT
34109: OR
34110: IFFALSE 34116
// exit ;
34112: POP
34113: POP
34114: GO 34214
// end ;
34116: GO 33787
34118: POP
34119: POP
// side := GetSide ( depot ) ;
34120: LD_ADDR_VAR 0 9
34124: PUSH
34125: LD_VAR 0 1
34129: PPUSH
34130: CALL_OW 255
34134: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34135: LD_VAR 0 9
34139: PPUSH
34140: LD_VAR 0 3
34144: PPUSH
34145: LD_VAR 0 4
34149: PPUSH
34150: LD_INT 20
34152: PPUSH
34153: CALL 26868 0 4
34157: PUSH
34158: LD_INT 4
34160: ARRAY
34161: IFFALSE 34165
// exit ;
34163: GO 34214
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34165: LD_VAR 0 2
34169: PUSH
34170: LD_INT 29
34172: PUSH
34173: LD_INT 30
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: IN
34180: PUSH
34181: LD_VAR 0 3
34185: PPUSH
34186: LD_VAR 0 4
34190: PPUSH
34191: LD_VAR 0 9
34195: PPUSH
34196: CALL_OW 440
34200: NOT
34201: AND
34202: IFFALSE 34206
// exit ;
34204: GO 34214
// result := true ;
34206: LD_ADDR_VAR 0 6
34210: PUSH
34211: LD_INT 1
34213: ST_TO_ADDR
// end ;
34214: LD_VAR 0 6
34218: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34219: LD_INT 0
34221: PPUSH
34222: PPUSH
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
34249: PPUSH
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
34277: PPUSH
34278: PPUSH
// result = [ ] ;
34279: LD_ADDR_VAR 0 7
34283: PUSH
34284: EMPTY
34285: ST_TO_ADDR
// temp_list = [ ] ;
34286: LD_ADDR_VAR 0 9
34290: PUSH
34291: EMPTY
34292: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34293: LD_VAR 0 4
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: LD_INT 4
34312: PUSH
34313: LD_INT 5
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: IN
34324: NOT
34325: PUSH
34326: LD_VAR 0 1
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: IN
34341: PUSH
34342: LD_VAR 0 5
34346: PUSH
34347: LD_INT 1
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 3
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: IN
34361: NOT
34362: AND
34363: OR
34364: IFFALSE 34368
// exit ;
34366: GO 52759
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34368: LD_VAR 0 1
34372: PUSH
34373: LD_INT 6
34375: PUSH
34376: LD_INT 7
34378: PUSH
34379: LD_INT 8
34381: PUSH
34382: LD_INT 13
34384: PUSH
34385: LD_INT 12
34387: PUSH
34388: LD_INT 15
34390: PUSH
34391: LD_INT 11
34393: PUSH
34394: LD_INT 14
34396: PUSH
34397: LD_INT 10
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: IN
34411: IFFALSE 34421
// btype = b_lab ;
34413: LD_ADDR_VAR 0 1
34417: PUSH
34418: LD_INT 6
34420: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34421: LD_VAR 0 6
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: IN
34440: NOT
34441: PUSH
34442: LD_VAR 0 1
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: LD_INT 3
34458: PUSH
34459: LD_INT 6
34461: PUSH
34462: LD_INT 36
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: LD_INT 5
34470: PUSH
34471: LD_INT 31
34473: PUSH
34474: LD_INT 32
34476: PUSH
34477: LD_INT 33
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: IN
34493: NOT
34494: PUSH
34495: LD_VAR 0 6
34499: PUSH
34500: LD_INT 1
34502: EQUAL
34503: AND
34504: OR
34505: PUSH
34506: LD_VAR 0 1
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: IN
34521: NOT
34522: PUSH
34523: LD_VAR 0 6
34527: PUSH
34528: LD_INT 2
34530: EQUAL
34531: AND
34532: OR
34533: IFFALSE 34543
// mode = 0 ;
34535: LD_ADDR_VAR 0 6
34539: PUSH
34540: LD_INT 0
34542: ST_TO_ADDR
// case mode of 0 :
34543: LD_VAR 0 6
34547: PUSH
34548: LD_INT 0
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34556
34554: GO 46009
34556: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34557: LD_ADDR_VAR 0 11
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: NEG
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: LD_INT 2
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 2
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: LD_INT 3
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 3
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34750: LD_ADDR_VAR 0 12
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 3
34907: NEG
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 3
34918: NEG
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34946: LD_ADDR_VAR 0 13
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 2
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: LD_INT 2
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: NEG
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: NEG
35094: PUSH
35095: LD_INT 3
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 3
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 3
35117: NEG
35118: PUSH
35119: LD_INT 3
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35145: LD_ADDR_VAR 0 14
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: LD_INT 3
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 3
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: LD_INT 2
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35341: LD_ADDR_VAR 0 15
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 2
35464: NEG
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: NEG
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 3
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35534: LD_ADDR_VAR 0 16
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 2
35657: NEG
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: PUSH
35702: LD_INT 3
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35727: LD_ADDR_VAR 0 17
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 2
35914: NEG
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35957: LD_ADDR_VAR 0 18
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: LD_INT 2
36042: NEG
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 2
36053: NEG
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 2
36133: NEG
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 2
36144: NEG
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 2
36156: NEG
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36187: LD_ADDR_VAR 0 19
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 2
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 2
36363: NEG
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: NEG
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: NEG
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36417: LD_ADDR_VAR 0 20
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PUSH
36500: LD_INT 2
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: LD_INT 2
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 2
36604: NEG
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36647: LD_ADDR_VAR 0 21
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: NEG
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 2
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 2
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 0
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 2
36823: NEG
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36877: LD_ADDR_VAR 0 22
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 2
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 2
37053: NEG
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 2
37064: NEG
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: LD_INT 2
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37107: LD_ADDR_VAR 0 23
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 2
37283: NEG
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: NEG
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 3
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37387: LD_ADDR_VAR 0 24
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: LD_INT 2
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 3
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 3
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37663: LD_ADDR_VAR 0 25
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: NEG
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 3
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 3
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: LD_INT 3
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37937: LD_ADDR_VAR 0 26
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 2
38124: NEG
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: LD_INT 2
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: LD_INT 3
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38213: LD_ADDR_VAR 0 27
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: NEG
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 2
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: LD_INT 2
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 0
38368: PUSH
38369: LD_INT 2
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 3
38446: NEG
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 3
38458: NEG
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38493: LD_ADDR_VAR 0 28
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 2
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: LD_INT 3
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 3
38728: NEG
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 3
38740: NEG
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38775: LD_ADDR_VAR 0 29
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: LD_INT 2
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: NEG
38966: PUSH
38967: LD_INT 3
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 3
39019: NEG
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39054: LD_ADDR_VAR 0 30
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: LD_INT 3
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 2
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39332: LD_ADDR_VAR 0 31
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 2
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 3
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 3
39575: NEG
39576: PUSH
39577: LD_INT 2
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39610: LD_ADDR_VAR 0 32
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 2
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: LD_INT 3
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: LD_INT 2
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 3
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 3
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 3
39853: NEG
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39888: LD_ADDR_VAR 0 33
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: LD_INT 3
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 3
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 3
40132: NEG
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40167: LD_ADDR_VAR 0 34
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: LD_INT 2
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 3
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 3
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40447: LD_ADDR_VAR 0 35
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 2
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40559: LD_ADDR_VAR 0 36
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40671: LD_ADDR_VAR 0 37
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40783: LD_ADDR_VAR 0 38
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40895: LD_ADDR_VAR 0 39
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41007: LD_ADDR_VAR 0 40
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41119: LD_ADDR_VAR 0 41
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 3
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 3
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 3
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 3
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 3
41393: NEG
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: LD_INT 3
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41469: LD_ADDR_VAR 0 42
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: LD_INT 3
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 3
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 3
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 3
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: LD_INT 3
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 3
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 3
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 3
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: NEG
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41819: LD_ADDR_VAR 0 43
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: NEG
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: LD_INT 3
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 3
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 3
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 3
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 3
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 2
42104: NEG
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: NEG
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: NEG
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42167: LD_ADDR_VAR 0 44
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: LD_INT 3
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 3
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 3
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 3
42441: NEG
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 3
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: NEG
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42517: LD_ADDR_VAR 0 45
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: LD_INT 2
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 3
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 3
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 3
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 3
42826: NEG
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42867: LD_ADDR_VAR 0 46
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 3
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 3
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 3
43163: NEG
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 3
43174: NEG
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43215: LD_ADDR_VAR 0 47
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43366: LD_ADDR_VAR 0 48
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43513: LD_ADDR_VAR 0 49
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43657: LD_ADDR_VAR 0 50
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43801: LD_ADDR_VAR 0 51
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43948: LD_ADDR_VAR 0 52
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44099: LD_ADDR_VAR 0 53
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44329: LD_ADDR_VAR 0 54
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44559: LD_ADDR_VAR 0 55
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44789: LD_ADDR_VAR 0 56
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45019: LD_ADDR_VAR 0 57
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45249: LD_ADDR_VAR 0 58
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45479: LD_ADDR_VAR 0 59
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45567: LD_ADDR_VAR 0 60
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45655: LD_ADDR_VAR 0 61
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45743: LD_ADDR_VAR 0 62
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45831: LD_ADDR_VAR 0 63
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45919: LD_ADDR_VAR 0 64
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// end ; 1 :
46007: GO 51904
46009: LD_INT 1
46011: DOUBLE
46012: EQUAL
46013: IFTRUE 46017
46015: GO 48640
46017: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46018: LD_ADDR_VAR 0 11
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 3
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46062: LD_ADDR_VAR 0 12
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46103: LD_ADDR_VAR 0 13
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: LD_INT 3
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46143: LD_ADDR_VAR 0 14
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 3
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46184: LD_ADDR_VAR 0 15
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46228: LD_ADDR_VAR 0 16
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 3
46259: NEG
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46274: LD_ADDR_VAR 0 17
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 3
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46318: LD_ADDR_VAR 0 18
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 3
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46359: LD_ADDR_VAR 0 19
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46399: LD_ADDR_VAR 0 20
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 3
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 3
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46440: LD_ADDR_VAR 0 21
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 3
46458: NEG
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46484: LD_ADDR_VAR 0 22
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 3
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 3
46515: NEG
46516: PUSH
46517: LD_INT 3
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46530: LD_ADDR_VAR 0 23
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 3
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 4
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 3
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: LIST
46573: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46574: LD_ADDR_VAR 0 24
46578: PUSH
46579: LD_INT 3
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 3
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 4
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46615: LD_ADDR_VAR 0 25
46619: PUSH
46620: LD_INT 3
46622: PUSH
46623: LD_INT 3
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 4
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: LD_INT 4
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46655: LD_ADDR_VAR 0 26
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 4
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: LIST
46695: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46696: LD_ADDR_VAR 0 27
46700: PUSH
46701: LD_INT 3
46703: NEG
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 4
46725: NEG
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46740: LD_ADDR_VAR 0 28
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: LD_INT 4
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 4
46771: NEG
46772: PUSH
46773: LD_INT 3
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46786: LD_ADDR_VAR 0 29
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 3
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 3
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 4
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 4
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 3
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 5
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 5
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: LD_INT 4
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 6
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 6
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 5
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46941: LD_ADDR_VAR 0 30
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 4
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 4
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 4
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 5
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 5
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 5
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 6
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 6
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47084: LD_ADDR_VAR 0 31
47088: PUSH
47089: LD_INT 3
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: LD_INT 3
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: LD_INT 3
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 4
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 4
47131: PUSH
47132: LD_INT 4
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 3
47141: PUSH
47142: LD_INT 4
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 5
47151: PUSH
47152: LD_INT 4
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 5
47161: PUSH
47162: LD_INT 5
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: LD_INT 5
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 6
47181: PUSH
47182: LD_INT 5
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 6
47191: PUSH
47192: LD_INT 6
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 5
47201: PUSH
47202: LD_INT 6
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47223: LD_ADDR_VAR 0 32
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 3
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 4
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 4
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 5
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 5
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 4
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 6
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 6
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 5
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47366: LD_ADDR_VAR 0 33
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 3
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 4
47418: NEG
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 4
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 4
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 5
47452: NEG
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 5
47463: NEG
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 5
47475: NEG
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 6
47486: NEG
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 6
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47521: LD_ADDR_VAR 0 34
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: NEG
47553: PUSH
47554: LD_INT 3
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: LD_INT 4
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 4
47576: NEG
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 4
47588: NEG
47589: PUSH
47590: LD_INT 4
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 4
47600: NEG
47601: PUSH
47602: LD_INT 5
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 5
47612: NEG
47613: PUSH
47614: LD_INT 4
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 5
47624: NEG
47625: PUSH
47626: LD_INT 5
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 5
47636: NEG
47637: PUSH
47638: LD_INT 6
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 6
47648: NEG
47649: PUSH
47650: LD_INT 5
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 6
47660: NEG
47661: PUSH
47662: LD_INT 6
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47684: LD_ADDR_VAR 0 41
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47728: LD_ADDR_VAR 0 42
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 3
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47769: LD_ADDR_VAR 0 43
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: LD_INT 3
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47809: LD_ADDR_VAR 0 44
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47850: LD_ADDR_VAR 0 45
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47894: LD_ADDR_VAR 0 46
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: LD_INT 3
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 3
47925: NEG
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47940: LD_ADDR_VAR 0 47
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 3
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47973: LD_ADDR_VAR 0 48
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48004: LD_ADDR_VAR 0 49
48008: PUSH
48009: LD_INT 3
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48033: LD_ADDR_VAR 0 50
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48062: LD_ADDR_VAR 0 51
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48093: LD_ADDR_VAR 0 52
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 3
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48126: LD_ADDR_VAR 0 53
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 3
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 3
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48170: LD_ADDR_VAR 0 54
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 3
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48211: LD_ADDR_VAR 0 55
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48251: LD_ADDR_VAR 0 56
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 3
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48292: LD_ADDR_VAR 0 57
48296: PUSH
48297: LD_INT 2
48299: NEG
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 3
48321: NEG
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48336: LD_ADDR_VAR 0 58
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: NEG
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: NEG
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48382: LD_ADDR_VAR 0 59
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: LIST
48425: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48426: LD_ADDR_VAR 0 60
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48467: LD_ADDR_VAR 0 61
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48507: LD_ADDR_VAR 0 62
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48548: LD_ADDR_VAR 0 63
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48592: LD_ADDR_VAR 0 64
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// end ; 2 :
48638: GO 51904
48640: LD_INT 2
48642: DOUBLE
48643: EQUAL
48644: IFTRUE 48648
48646: GO 51903
48648: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48649: LD_ADDR_VAR 0 29
48653: PUSH
48654: LD_INT 4
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 4
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 5
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 5
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 4
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 5
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 4
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 4
48779: PUSH
48780: LD_INT 4
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: LD_INT 4
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 4
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 4
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 4
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 4
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 5
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 4
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 5
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 3
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 4
48988: NEG
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 4
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 4
49011: NEG
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 4
49034: NEG
49035: PUSH
49036: LD_INT 4
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 4
49046: NEG
49047: PUSH
49048: LD_INT 5
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: NEG
49059: PUSH
49060: LD_INT 4
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 3
49070: NEG
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 4
49082: NEG
49083: PUSH
49084: LD_INT 3
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 5
49094: NEG
49095: PUSH
49096: LD_INT 4
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 5
49106: NEG
49107: PUSH
49108: LD_INT 5
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 3
49118: NEG
49119: PUSH
49120: LD_INT 5
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 5
49130: NEG
49131: PUSH
49132: LD_INT 3
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49187: LD_ADDR_VAR 0 30
49191: PUSH
49192: LD_INT 4
49194: PUSH
49195: LD_INT 4
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 4
49204: PUSH
49205: LD_INT 3
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 5
49214: PUSH
49215: LD_INT 4
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 5
49224: PUSH
49225: LD_INT 5
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 4
49234: PUSH
49235: LD_INT 5
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 3
49244: PUSH
49245: LD_INT 4
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: PUSH
49255: LD_INT 3
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 5
49264: PUSH
49265: LD_INT 3
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 3
49274: PUSH
49275: LD_INT 5
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 3
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 4
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 4
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: LD_INT 4
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 4
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 4
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: NEG
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 3
49411: NEG
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 4
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 5
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 5
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 5
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: LD_INT 3
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 3
49491: NEG
49492: PUSH
49493: LD_INT 4
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 4
49539: NEG
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 4
49551: NEG
49552: PUSH
49553: LD_INT 4
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 4
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 4
49575: NEG
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 4
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 5
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 4
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 4
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 5
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 5
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49734: LD_ADDR_VAR 0 31
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 4
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 4
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 5
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 5
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: LD_INT 5
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 3
49834: NEG
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 3
49879: NEG
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 4
49890: NEG
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 4
49901: NEG
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 4
49913: NEG
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 4
49936: NEG
49937: PUSH
49938: LD_INT 4
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 4
49948: NEG
49949: PUSH
49950: LD_INT 5
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: LD_INT 4
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: NEG
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 4
49984: NEG
49985: PUSH
49986: LD_INT 3
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 5
49996: NEG
49997: PUSH
49998: LD_INT 4
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 5
50008: NEG
50009: PUSH
50010: LD_INT 5
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 5
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 5
50032: NEG
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 4
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 3
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 4
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 4
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 4
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 4
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 5
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 5
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 4
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 5
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50284: LD_ADDR_VAR 0 32
50288: PUSH
50289: LD_INT 4
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 4
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 4
50336: NEG
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 5
50347: NEG
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 5
50358: NEG
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 5
50370: NEG
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 3
50405: NEG
50406: PUSH
50407: LD_INT 4
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 3
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 4
50453: NEG
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 4
50465: NEG
50466: PUSH
50467: LD_INT 4
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 4
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 4
50489: NEG
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 4
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 5
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 4
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 3
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 3
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 4
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 5
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 5
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 4
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 4
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 4
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 4
50696: PUSH
50697: LD_INT 4
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 4
50706: PUSH
50707: LD_INT 3
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 5
50716: PUSH
50717: LD_INT 4
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 5
50726: PUSH
50727: LD_INT 5
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 4
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: LD_INT 4
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 5
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: LD_INT 5
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50831: LD_ADDR_VAR 0 33
50835: PUSH
50836: LD_INT 4
50838: NEG
50839: PUSH
50840: LD_INT 4
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 4
50850: NEG
50851: PUSH
50852: LD_INT 5
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: LD_INT 4
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 4
50886: NEG
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 5
50898: NEG
50899: PUSH
50900: LD_INT 4
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 5
50910: NEG
50911: PUSH
50912: LD_INT 5
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: LD_INT 5
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 5
50934: NEG
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 4
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 4
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 4
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 4
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 5
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 5
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 4
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 3
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 5
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 4
51161: PUSH
51162: LD_INT 3
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 4
51171: PUSH
51172: LD_INT 4
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: LD_INT 4
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 4
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 4
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 4
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 4
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 5
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 5
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 4
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: LD_INT 5
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51369: LD_ADDR_VAR 0 34
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 4
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 5
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 4
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 4
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 5
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 5
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 4
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 4
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 4
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 4
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 5
51591: PUSH
51592: LD_INT 4
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 5
51601: PUSH
51602: LD_INT 5
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 4
51611: PUSH
51612: LD_INT 5
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: LD_INT 4
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 5
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: LD_INT 5
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 3
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 4
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 4
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 4
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 4
51754: NEG
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 4
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 4
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 5
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 5
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 5
51833: NEG
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// end ; end ;
51901: GO 51904
51903: POP
// case btype of b_depot , b_warehouse :
51904: LD_VAR 0 1
51908: PUSH
51909: LD_INT 0
51911: DOUBLE
51912: EQUAL
51913: IFTRUE 51923
51915: LD_INT 1
51917: DOUBLE
51918: EQUAL
51919: IFTRUE 51923
51921: GO 52124
51923: POP
// case nation of nation_american :
51924: LD_VAR 0 5
51928: PUSH
51929: LD_INT 1
51931: DOUBLE
51932: EQUAL
51933: IFTRUE 51937
51935: GO 51993
51937: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51938: LD_ADDR_VAR 0 9
51942: PUSH
51943: LD_VAR 0 11
51947: PUSH
51948: LD_VAR 0 12
51952: PUSH
51953: LD_VAR 0 13
51957: PUSH
51958: LD_VAR 0 14
51962: PUSH
51963: LD_VAR 0 15
51967: PUSH
51968: LD_VAR 0 16
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: PUSH
51981: LD_VAR 0 4
51985: PUSH
51986: LD_INT 1
51988: PLUS
51989: ARRAY
51990: ST_TO_ADDR
51991: GO 52122
51993: LD_INT 2
51995: DOUBLE
51996: EQUAL
51997: IFTRUE 52001
51999: GO 52057
52001: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52002: LD_ADDR_VAR 0 9
52006: PUSH
52007: LD_VAR 0 17
52011: PUSH
52012: LD_VAR 0 18
52016: PUSH
52017: LD_VAR 0 19
52021: PUSH
52022: LD_VAR 0 20
52026: PUSH
52027: LD_VAR 0 21
52031: PUSH
52032: LD_VAR 0 22
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: PUSH
52045: LD_VAR 0 4
52049: PUSH
52050: LD_INT 1
52052: PLUS
52053: ARRAY
52054: ST_TO_ADDR
52055: GO 52122
52057: LD_INT 3
52059: DOUBLE
52060: EQUAL
52061: IFTRUE 52065
52063: GO 52121
52065: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52066: LD_ADDR_VAR 0 9
52070: PUSH
52071: LD_VAR 0 23
52075: PUSH
52076: LD_VAR 0 24
52080: PUSH
52081: LD_VAR 0 25
52085: PUSH
52086: LD_VAR 0 26
52090: PUSH
52091: LD_VAR 0 27
52095: PUSH
52096: LD_VAR 0 28
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: PUSH
52109: LD_VAR 0 4
52113: PUSH
52114: LD_INT 1
52116: PLUS
52117: ARRAY
52118: ST_TO_ADDR
52119: GO 52122
52121: POP
52122: GO 52677
52124: LD_INT 2
52126: DOUBLE
52127: EQUAL
52128: IFTRUE 52138
52130: LD_INT 3
52132: DOUBLE
52133: EQUAL
52134: IFTRUE 52138
52136: GO 52194
52138: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52139: LD_ADDR_VAR 0 9
52143: PUSH
52144: LD_VAR 0 29
52148: PUSH
52149: LD_VAR 0 30
52153: PUSH
52154: LD_VAR 0 31
52158: PUSH
52159: LD_VAR 0 32
52163: PUSH
52164: LD_VAR 0 33
52168: PUSH
52169: LD_VAR 0 34
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: PUSH
52182: LD_VAR 0 4
52186: PUSH
52187: LD_INT 1
52189: PLUS
52190: ARRAY
52191: ST_TO_ADDR
52192: GO 52677
52194: LD_INT 16
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52256
52200: LD_INT 17
52202: DOUBLE
52203: EQUAL
52204: IFTRUE 52256
52206: LD_INT 18
52208: DOUBLE
52209: EQUAL
52210: IFTRUE 52256
52212: LD_INT 19
52214: DOUBLE
52215: EQUAL
52216: IFTRUE 52256
52218: LD_INT 22
52220: DOUBLE
52221: EQUAL
52222: IFTRUE 52256
52224: LD_INT 20
52226: DOUBLE
52227: EQUAL
52228: IFTRUE 52256
52230: LD_INT 21
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52256
52236: LD_INT 23
52238: DOUBLE
52239: EQUAL
52240: IFTRUE 52256
52242: LD_INT 24
52244: DOUBLE
52245: EQUAL
52246: IFTRUE 52256
52248: LD_INT 25
52250: DOUBLE
52251: EQUAL
52252: IFTRUE 52256
52254: GO 52312
52256: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52257: LD_ADDR_VAR 0 9
52261: PUSH
52262: LD_VAR 0 35
52266: PUSH
52267: LD_VAR 0 36
52271: PUSH
52272: LD_VAR 0 37
52276: PUSH
52277: LD_VAR 0 38
52281: PUSH
52282: LD_VAR 0 39
52286: PUSH
52287: LD_VAR 0 40
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: PUSH
52300: LD_VAR 0 4
52304: PUSH
52305: LD_INT 1
52307: PLUS
52308: ARRAY
52309: ST_TO_ADDR
52310: GO 52677
52312: LD_INT 6
52314: DOUBLE
52315: EQUAL
52316: IFTRUE 52368
52318: LD_INT 7
52320: DOUBLE
52321: EQUAL
52322: IFTRUE 52368
52324: LD_INT 8
52326: DOUBLE
52327: EQUAL
52328: IFTRUE 52368
52330: LD_INT 13
52332: DOUBLE
52333: EQUAL
52334: IFTRUE 52368
52336: LD_INT 12
52338: DOUBLE
52339: EQUAL
52340: IFTRUE 52368
52342: LD_INT 15
52344: DOUBLE
52345: EQUAL
52346: IFTRUE 52368
52348: LD_INT 11
52350: DOUBLE
52351: EQUAL
52352: IFTRUE 52368
52354: LD_INT 14
52356: DOUBLE
52357: EQUAL
52358: IFTRUE 52368
52360: LD_INT 10
52362: DOUBLE
52363: EQUAL
52364: IFTRUE 52368
52366: GO 52424
52368: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52369: LD_ADDR_VAR 0 9
52373: PUSH
52374: LD_VAR 0 41
52378: PUSH
52379: LD_VAR 0 42
52383: PUSH
52384: LD_VAR 0 43
52388: PUSH
52389: LD_VAR 0 44
52393: PUSH
52394: LD_VAR 0 45
52398: PUSH
52399: LD_VAR 0 46
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: PUSH
52412: LD_VAR 0 4
52416: PUSH
52417: LD_INT 1
52419: PLUS
52420: ARRAY
52421: ST_TO_ADDR
52422: GO 52677
52424: LD_INT 36
52426: DOUBLE
52427: EQUAL
52428: IFTRUE 52432
52430: GO 52488
52432: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52433: LD_ADDR_VAR 0 9
52437: PUSH
52438: LD_VAR 0 47
52442: PUSH
52443: LD_VAR 0 48
52447: PUSH
52448: LD_VAR 0 49
52452: PUSH
52453: LD_VAR 0 50
52457: PUSH
52458: LD_VAR 0 51
52462: PUSH
52463: LD_VAR 0 52
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: PUSH
52476: LD_VAR 0 4
52480: PUSH
52481: LD_INT 1
52483: PLUS
52484: ARRAY
52485: ST_TO_ADDR
52486: GO 52677
52488: LD_INT 4
52490: DOUBLE
52491: EQUAL
52492: IFTRUE 52514
52494: LD_INT 5
52496: DOUBLE
52497: EQUAL
52498: IFTRUE 52514
52500: LD_INT 34
52502: DOUBLE
52503: EQUAL
52504: IFTRUE 52514
52506: LD_INT 37
52508: DOUBLE
52509: EQUAL
52510: IFTRUE 52514
52512: GO 52570
52514: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52515: LD_ADDR_VAR 0 9
52519: PUSH
52520: LD_VAR 0 53
52524: PUSH
52525: LD_VAR 0 54
52529: PUSH
52530: LD_VAR 0 55
52534: PUSH
52535: LD_VAR 0 56
52539: PUSH
52540: LD_VAR 0 57
52544: PUSH
52545: LD_VAR 0 58
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: PUSH
52558: LD_VAR 0 4
52562: PUSH
52563: LD_INT 1
52565: PLUS
52566: ARRAY
52567: ST_TO_ADDR
52568: GO 52677
52570: LD_INT 31
52572: DOUBLE
52573: EQUAL
52574: IFTRUE 52620
52576: LD_INT 32
52578: DOUBLE
52579: EQUAL
52580: IFTRUE 52620
52582: LD_INT 33
52584: DOUBLE
52585: EQUAL
52586: IFTRUE 52620
52588: LD_INT 27
52590: DOUBLE
52591: EQUAL
52592: IFTRUE 52620
52594: LD_INT 26
52596: DOUBLE
52597: EQUAL
52598: IFTRUE 52620
52600: LD_INT 28
52602: DOUBLE
52603: EQUAL
52604: IFTRUE 52620
52606: LD_INT 29
52608: DOUBLE
52609: EQUAL
52610: IFTRUE 52620
52612: LD_INT 30
52614: DOUBLE
52615: EQUAL
52616: IFTRUE 52620
52618: GO 52676
52620: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52621: LD_ADDR_VAR 0 9
52625: PUSH
52626: LD_VAR 0 59
52630: PUSH
52631: LD_VAR 0 60
52635: PUSH
52636: LD_VAR 0 61
52640: PUSH
52641: LD_VAR 0 62
52645: PUSH
52646: LD_VAR 0 63
52650: PUSH
52651: LD_VAR 0 64
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: PUSH
52664: LD_VAR 0 4
52668: PUSH
52669: LD_INT 1
52671: PLUS
52672: ARRAY
52673: ST_TO_ADDR
52674: GO 52677
52676: POP
// temp_list2 = [ ] ;
52677: LD_ADDR_VAR 0 10
52681: PUSH
52682: EMPTY
52683: ST_TO_ADDR
// for i in temp_list do
52684: LD_ADDR_VAR 0 8
52688: PUSH
52689: LD_VAR 0 9
52693: PUSH
52694: FOR_IN
52695: IFFALSE 52747
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52697: LD_ADDR_VAR 0 10
52701: PUSH
52702: LD_VAR 0 10
52706: PUSH
52707: LD_VAR 0 8
52711: PUSH
52712: LD_INT 1
52714: ARRAY
52715: PUSH
52716: LD_VAR 0 2
52720: PLUS
52721: PUSH
52722: LD_VAR 0 8
52726: PUSH
52727: LD_INT 2
52729: ARRAY
52730: PUSH
52731: LD_VAR 0 3
52735: PLUS
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: ADD
52744: ST_TO_ADDR
52745: GO 52694
52747: POP
52748: POP
// result = temp_list2 ;
52749: LD_ADDR_VAR 0 7
52753: PUSH
52754: LD_VAR 0 10
52758: ST_TO_ADDR
// end ;
52759: LD_VAR 0 7
52763: RET
// export function EnemyInRange ( unit , dist ) ; begin
52764: LD_INT 0
52766: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52767: LD_ADDR_VAR 0 3
52771: PUSH
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 255
52781: PPUSH
52782: LD_VAR 0 1
52786: PPUSH
52787: CALL_OW 250
52791: PPUSH
52792: LD_VAR 0 1
52796: PPUSH
52797: CALL_OW 251
52801: PPUSH
52802: LD_VAR 0 2
52806: PPUSH
52807: CALL 26868 0 4
52811: PUSH
52812: LD_INT 4
52814: ARRAY
52815: ST_TO_ADDR
// end ;
52816: LD_VAR 0 3
52820: RET
// export function PlayerSeeMe ( unit ) ; begin
52821: LD_INT 0
52823: PPUSH
// result := See ( your_side , unit ) ;
52824: LD_ADDR_VAR 0 2
52828: PUSH
52829: LD_OWVAR 2
52833: PPUSH
52834: LD_VAR 0 1
52838: PPUSH
52839: CALL_OW 292
52843: ST_TO_ADDR
// end ;
52844: LD_VAR 0 2
52848: RET
// export function ReverseDir ( unit ) ; begin
52849: LD_INT 0
52851: PPUSH
// if not unit then
52852: LD_VAR 0 1
52856: NOT
52857: IFFALSE 52861
// exit ;
52859: GO 52884
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52861: LD_ADDR_VAR 0 2
52865: PUSH
52866: LD_VAR 0 1
52870: PPUSH
52871: CALL_OW 254
52875: PUSH
52876: LD_INT 3
52878: PLUS
52879: PUSH
52880: LD_INT 6
52882: MOD
52883: ST_TO_ADDR
// end ;
52884: LD_VAR 0 2
52888: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52889: LD_INT 0
52891: PPUSH
52892: PPUSH
52893: PPUSH
52894: PPUSH
52895: PPUSH
// if not hexes then
52896: LD_VAR 0 2
52900: NOT
52901: IFFALSE 52905
// exit ;
52903: GO 53053
// dist := 9999 ;
52905: LD_ADDR_VAR 0 5
52909: PUSH
52910: LD_INT 9999
52912: ST_TO_ADDR
// for i = 1 to hexes do
52913: LD_ADDR_VAR 0 4
52917: PUSH
52918: DOUBLE
52919: LD_INT 1
52921: DEC
52922: ST_TO_ADDR
52923: LD_VAR 0 2
52927: PUSH
52928: FOR_TO
52929: IFFALSE 53041
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52931: LD_VAR 0 1
52935: PPUSH
52936: LD_VAR 0 2
52940: PUSH
52941: LD_VAR 0 4
52945: ARRAY
52946: PUSH
52947: LD_INT 1
52949: ARRAY
52950: PPUSH
52951: LD_VAR 0 2
52955: PUSH
52956: LD_VAR 0 4
52960: ARRAY
52961: PUSH
52962: LD_INT 2
52964: ARRAY
52965: PPUSH
52966: CALL_OW 297
52970: PUSH
52971: LD_VAR 0 5
52975: LESS
52976: IFFALSE 53039
// begin hex := hexes [ i ] ;
52978: LD_ADDR_VAR 0 7
52982: PUSH
52983: LD_VAR 0 2
52987: PUSH
52988: LD_VAR 0 4
52992: ARRAY
52993: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52994: LD_ADDR_VAR 0 5
52998: PUSH
52999: LD_VAR 0 1
53003: PPUSH
53004: LD_VAR 0 2
53008: PUSH
53009: LD_VAR 0 4
53013: ARRAY
53014: PUSH
53015: LD_INT 1
53017: ARRAY
53018: PPUSH
53019: LD_VAR 0 2
53023: PUSH
53024: LD_VAR 0 4
53028: ARRAY
53029: PUSH
53030: LD_INT 2
53032: ARRAY
53033: PPUSH
53034: CALL_OW 297
53038: ST_TO_ADDR
// end ; end ;
53039: GO 52928
53041: POP
53042: POP
// result := hex ;
53043: LD_ADDR_VAR 0 3
53047: PUSH
53048: LD_VAR 0 7
53052: ST_TO_ADDR
// end ;
53053: LD_VAR 0 3
53057: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53058: LD_INT 0
53060: PPUSH
53061: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53062: LD_VAR 0 1
53066: NOT
53067: PUSH
53068: LD_VAR 0 1
53072: PUSH
53073: LD_INT 21
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 23
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PPUSH
53097: CALL_OW 69
53101: IN
53102: NOT
53103: OR
53104: IFFALSE 53108
// exit ;
53106: GO 53155
// for i = 1 to 3 do
53108: LD_ADDR_VAR 0 3
53112: PUSH
53113: DOUBLE
53114: LD_INT 1
53116: DEC
53117: ST_TO_ADDR
53118: LD_INT 3
53120: PUSH
53121: FOR_TO
53122: IFFALSE 53153
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53124: LD_VAR 0 1
53128: PPUSH
53129: CALL_OW 250
53133: PPUSH
53134: LD_VAR 0 1
53138: PPUSH
53139: CALL_OW 251
53143: PPUSH
53144: LD_INT 1
53146: PPUSH
53147: CALL_OW 453
53151: GO 53121
53153: POP
53154: POP
// end ;
53155: LD_VAR 0 2
53159: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53160: LD_INT 0
53162: PPUSH
53163: PPUSH
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53168: LD_VAR 0 1
53172: NOT
53173: PUSH
53174: LD_VAR 0 2
53178: NOT
53179: OR
53180: PUSH
53181: LD_VAR 0 1
53185: PPUSH
53186: CALL_OW 314
53190: OR
53191: IFFALSE 53195
// exit ;
53193: GO 53636
// x := GetX ( enemy_unit ) ;
53195: LD_ADDR_VAR 0 7
53199: PUSH
53200: LD_VAR 0 2
53204: PPUSH
53205: CALL_OW 250
53209: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53210: LD_ADDR_VAR 0 8
53214: PUSH
53215: LD_VAR 0 2
53219: PPUSH
53220: CALL_OW 251
53224: ST_TO_ADDR
// if not x or not y then
53225: LD_VAR 0 7
53229: NOT
53230: PUSH
53231: LD_VAR 0 8
53235: NOT
53236: OR
53237: IFFALSE 53241
// exit ;
53239: GO 53636
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53241: LD_ADDR_VAR 0 6
53245: PUSH
53246: LD_VAR 0 7
53250: PPUSH
53251: LD_INT 0
53253: PPUSH
53254: LD_INT 4
53256: PPUSH
53257: CALL_OW 272
53261: PUSH
53262: LD_VAR 0 8
53266: PPUSH
53267: LD_INT 0
53269: PPUSH
53270: LD_INT 4
53272: PPUSH
53273: CALL_OW 273
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_VAR 0 7
53286: PPUSH
53287: LD_INT 1
53289: PPUSH
53290: LD_INT 4
53292: PPUSH
53293: CALL_OW 272
53297: PUSH
53298: LD_VAR 0 8
53302: PPUSH
53303: LD_INT 1
53305: PPUSH
53306: LD_INT 4
53308: PPUSH
53309: CALL_OW 273
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_VAR 0 7
53322: PPUSH
53323: LD_INT 2
53325: PPUSH
53326: LD_INT 4
53328: PPUSH
53329: CALL_OW 272
53333: PUSH
53334: LD_VAR 0 8
53338: PPUSH
53339: LD_INT 2
53341: PPUSH
53342: LD_INT 4
53344: PPUSH
53345: CALL_OW 273
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_VAR 0 7
53358: PPUSH
53359: LD_INT 3
53361: PPUSH
53362: LD_INT 4
53364: PPUSH
53365: CALL_OW 272
53369: PUSH
53370: LD_VAR 0 8
53374: PPUSH
53375: LD_INT 3
53377: PPUSH
53378: LD_INT 4
53380: PPUSH
53381: CALL_OW 273
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_VAR 0 7
53394: PPUSH
53395: LD_INT 4
53397: PPUSH
53398: LD_INT 4
53400: PPUSH
53401: CALL_OW 272
53405: PUSH
53406: LD_VAR 0 8
53410: PPUSH
53411: LD_INT 4
53413: PPUSH
53414: LD_INT 4
53416: PPUSH
53417: CALL_OW 273
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_VAR 0 7
53430: PPUSH
53431: LD_INT 5
53433: PPUSH
53434: LD_INT 4
53436: PPUSH
53437: CALL_OW 272
53441: PUSH
53442: LD_VAR 0 8
53446: PPUSH
53447: LD_INT 5
53449: PPUSH
53450: LD_INT 4
53452: PPUSH
53453: CALL_OW 273
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// for i = tmp downto 1 do
53470: LD_ADDR_VAR 0 4
53474: PUSH
53475: DOUBLE
53476: LD_VAR 0 6
53480: INC
53481: ST_TO_ADDR
53482: LD_INT 1
53484: PUSH
53485: FOR_DOWNTO
53486: IFFALSE 53587
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53488: LD_VAR 0 6
53492: PUSH
53493: LD_VAR 0 4
53497: ARRAY
53498: PUSH
53499: LD_INT 1
53501: ARRAY
53502: PPUSH
53503: LD_VAR 0 6
53507: PUSH
53508: LD_VAR 0 4
53512: ARRAY
53513: PUSH
53514: LD_INT 2
53516: ARRAY
53517: PPUSH
53518: CALL_OW 488
53522: NOT
53523: PUSH
53524: LD_VAR 0 6
53528: PUSH
53529: LD_VAR 0 4
53533: ARRAY
53534: PUSH
53535: LD_INT 1
53537: ARRAY
53538: PPUSH
53539: LD_VAR 0 6
53543: PUSH
53544: LD_VAR 0 4
53548: ARRAY
53549: PUSH
53550: LD_INT 2
53552: ARRAY
53553: PPUSH
53554: CALL_OW 428
53558: PUSH
53559: LD_INT 0
53561: NONEQUAL
53562: OR
53563: IFFALSE 53585
// tmp := Delete ( tmp , i ) ;
53565: LD_ADDR_VAR 0 6
53569: PUSH
53570: LD_VAR 0 6
53574: PPUSH
53575: LD_VAR 0 4
53579: PPUSH
53580: CALL_OW 3
53584: ST_TO_ADDR
53585: GO 53485
53587: POP
53588: POP
// j := GetClosestHex ( unit , tmp ) ;
53589: LD_ADDR_VAR 0 5
53593: PUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: LD_VAR 0 6
53603: PPUSH
53604: CALL 52889 0 2
53608: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53609: LD_VAR 0 1
53613: PPUSH
53614: LD_VAR 0 5
53618: PUSH
53619: LD_INT 1
53621: ARRAY
53622: PPUSH
53623: LD_VAR 0 5
53627: PUSH
53628: LD_INT 2
53630: ARRAY
53631: PPUSH
53632: CALL_OW 111
// end ;
53636: LD_VAR 0 3
53640: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53641: LD_INT 0
53643: PPUSH
53644: PPUSH
53645: PPUSH
// uc_side = 0 ;
53646: LD_ADDR_OWVAR 20
53650: PUSH
53651: LD_INT 0
53653: ST_TO_ADDR
// uc_nation = 0 ;
53654: LD_ADDR_OWVAR 21
53658: PUSH
53659: LD_INT 0
53661: ST_TO_ADDR
// InitHc ;
53662: CALL_OW 19
// InitVc ;
53666: CALL_OW 20
// if mastodonts then
53670: LD_VAR 0 6
53674: IFFALSE 53741
// for i = 1 to mastodonts do
53676: LD_ADDR_VAR 0 11
53680: PUSH
53681: DOUBLE
53682: LD_INT 1
53684: DEC
53685: ST_TO_ADDR
53686: LD_VAR 0 6
53690: PUSH
53691: FOR_TO
53692: IFFALSE 53739
// begin vc_chassis := 31 ;
53694: LD_ADDR_OWVAR 37
53698: PUSH
53699: LD_INT 31
53701: ST_TO_ADDR
// vc_control := control_rider ;
53702: LD_ADDR_OWVAR 38
53706: PUSH
53707: LD_INT 4
53709: ST_TO_ADDR
// animal := CreateVehicle ;
53710: LD_ADDR_VAR 0 12
53714: PUSH
53715: CALL_OW 45
53719: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53720: LD_VAR 0 12
53724: PPUSH
53725: LD_VAR 0 8
53729: PPUSH
53730: LD_INT 0
53732: PPUSH
53733: CALL 55810 0 3
// end ;
53737: GO 53691
53739: POP
53740: POP
// if horses then
53741: LD_VAR 0 5
53745: IFFALSE 53812
// for i = 1 to horses do
53747: LD_ADDR_VAR 0 11
53751: PUSH
53752: DOUBLE
53753: LD_INT 1
53755: DEC
53756: ST_TO_ADDR
53757: LD_VAR 0 5
53761: PUSH
53762: FOR_TO
53763: IFFALSE 53810
// begin hc_class := 21 ;
53765: LD_ADDR_OWVAR 28
53769: PUSH
53770: LD_INT 21
53772: ST_TO_ADDR
// hc_gallery :=  ;
53773: LD_ADDR_OWVAR 33
53777: PUSH
53778: LD_STRING 
53780: ST_TO_ADDR
// animal := CreateHuman ;
53781: LD_ADDR_VAR 0 12
53785: PUSH
53786: CALL_OW 44
53790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53791: LD_VAR 0 12
53795: PPUSH
53796: LD_VAR 0 8
53800: PPUSH
53801: LD_INT 0
53803: PPUSH
53804: CALL 55810 0 3
// end ;
53808: GO 53762
53810: POP
53811: POP
// if birds then
53812: LD_VAR 0 1
53816: IFFALSE 53883
// for i = 1 to birds do
53818: LD_ADDR_VAR 0 11
53822: PUSH
53823: DOUBLE
53824: LD_INT 1
53826: DEC
53827: ST_TO_ADDR
53828: LD_VAR 0 1
53832: PUSH
53833: FOR_TO
53834: IFFALSE 53881
// begin hc_class = 18 ;
53836: LD_ADDR_OWVAR 28
53840: PUSH
53841: LD_INT 18
53843: ST_TO_ADDR
// hc_gallery =  ;
53844: LD_ADDR_OWVAR 33
53848: PUSH
53849: LD_STRING 
53851: ST_TO_ADDR
// animal := CreateHuman ;
53852: LD_ADDR_VAR 0 12
53856: PUSH
53857: CALL_OW 44
53861: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53862: LD_VAR 0 12
53866: PPUSH
53867: LD_VAR 0 8
53871: PPUSH
53872: LD_INT 0
53874: PPUSH
53875: CALL 55810 0 3
// end ;
53879: GO 53833
53881: POP
53882: POP
// if tigers then
53883: LD_VAR 0 2
53887: IFFALSE 53971
// for i = 1 to tigers do
53889: LD_ADDR_VAR 0 11
53893: PUSH
53894: DOUBLE
53895: LD_INT 1
53897: DEC
53898: ST_TO_ADDR
53899: LD_VAR 0 2
53903: PUSH
53904: FOR_TO
53905: IFFALSE 53969
// begin hc_class = class_tiger ;
53907: LD_ADDR_OWVAR 28
53911: PUSH
53912: LD_INT 14
53914: ST_TO_ADDR
// hc_gallery =  ;
53915: LD_ADDR_OWVAR 33
53919: PUSH
53920: LD_STRING 
53922: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53923: LD_ADDR_OWVAR 35
53927: PUSH
53928: LD_INT 7
53930: NEG
53931: PPUSH
53932: LD_INT 7
53934: PPUSH
53935: CALL_OW 12
53939: ST_TO_ADDR
// animal := CreateHuman ;
53940: LD_ADDR_VAR 0 12
53944: PUSH
53945: CALL_OW 44
53949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53950: LD_VAR 0 12
53954: PPUSH
53955: LD_VAR 0 8
53959: PPUSH
53960: LD_INT 0
53962: PPUSH
53963: CALL 55810 0 3
// end ;
53967: GO 53904
53969: POP
53970: POP
// if apemans then
53971: LD_VAR 0 3
53975: IFFALSE 54098
// for i = 1 to apemans do
53977: LD_ADDR_VAR 0 11
53981: PUSH
53982: DOUBLE
53983: LD_INT 1
53985: DEC
53986: ST_TO_ADDR
53987: LD_VAR 0 3
53991: PUSH
53992: FOR_TO
53993: IFFALSE 54096
// begin hc_class = class_apeman ;
53995: LD_ADDR_OWVAR 28
53999: PUSH
54000: LD_INT 12
54002: ST_TO_ADDR
// hc_gallery =  ;
54003: LD_ADDR_OWVAR 33
54007: PUSH
54008: LD_STRING 
54010: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54011: LD_ADDR_OWVAR 35
54015: PUSH
54016: LD_INT 5
54018: NEG
54019: PPUSH
54020: LD_INT 5
54022: PPUSH
54023: CALL_OW 12
54027: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54028: LD_ADDR_OWVAR 31
54032: PUSH
54033: LD_INT 1
54035: PPUSH
54036: LD_INT 3
54038: PPUSH
54039: CALL_OW 12
54043: PUSH
54044: LD_INT 1
54046: PPUSH
54047: LD_INT 3
54049: PPUSH
54050: CALL_OW 12
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: ST_TO_ADDR
// animal := CreateHuman ;
54067: LD_ADDR_VAR 0 12
54071: PUSH
54072: CALL_OW 44
54076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54077: LD_VAR 0 12
54081: PPUSH
54082: LD_VAR 0 8
54086: PPUSH
54087: LD_INT 0
54089: PPUSH
54090: CALL 55810 0 3
// end ;
54094: GO 53992
54096: POP
54097: POP
// if enchidnas then
54098: LD_VAR 0 4
54102: IFFALSE 54169
// for i = 1 to enchidnas do
54104: LD_ADDR_VAR 0 11
54108: PUSH
54109: DOUBLE
54110: LD_INT 1
54112: DEC
54113: ST_TO_ADDR
54114: LD_VAR 0 4
54118: PUSH
54119: FOR_TO
54120: IFFALSE 54167
// begin hc_class = 13 ;
54122: LD_ADDR_OWVAR 28
54126: PUSH
54127: LD_INT 13
54129: ST_TO_ADDR
// hc_gallery =  ;
54130: LD_ADDR_OWVAR 33
54134: PUSH
54135: LD_STRING 
54137: ST_TO_ADDR
// animal := CreateHuman ;
54138: LD_ADDR_VAR 0 12
54142: PUSH
54143: CALL_OW 44
54147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54148: LD_VAR 0 12
54152: PPUSH
54153: LD_VAR 0 8
54157: PPUSH
54158: LD_INT 0
54160: PPUSH
54161: CALL 55810 0 3
// end ;
54165: GO 54119
54167: POP
54168: POP
// if fishes then
54169: LD_VAR 0 7
54173: IFFALSE 54240
// for i = 1 to fishes do
54175: LD_ADDR_VAR 0 11
54179: PUSH
54180: DOUBLE
54181: LD_INT 1
54183: DEC
54184: ST_TO_ADDR
54185: LD_VAR 0 7
54189: PUSH
54190: FOR_TO
54191: IFFALSE 54238
// begin hc_class = 20 ;
54193: LD_ADDR_OWVAR 28
54197: PUSH
54198: LD_INT 20
54200: ST_TO_ADDR
// hc_gallery =  ;
54201: LD_ADDR_OWVAR 33
54205: PUSH
54206: LD_STRING 
54208: ST_TO_ADDR
// animal := CreateHuman ;
54209: LD_ADDR_VAR 0 12
54213: PUSH
54214: CALL_OW 44
54218: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54219: LD_VAR 0 12
54223: PPUSH
54224: LD_VAR 0 9
54228: PPUSH
54229: LD_INT 0
54231: PPUSH
54232: CALL 55810 0 3
// end ;
54236: GO 54190
54238: POP
54239: POP
// end ;
54240: LD_VAR 0 10
54244: RET
// export function WantHeal ( sci , unit ) ; begin
54245: LD_INT 0
54247: PPUSH
// if GetTaskList ( sci ) > 0 then
54248: LD_VAR 0 1
54252: PPUSH
54253: CALL_OW 437
54257: PUSH
54258: LD_INT 0
54260: GREATER
54261: IFFALSE 54331
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54263: LD_VAR 0 1
54267: PPUSH
54268: CALL_OW 437
54272: PUSH
54273: LD_INT 1
54275: ARRAY
54276: PUSH
54277: LD_INT 1
54279: ARRAY
54280: PUSH
54281: LD_STRING l
54283: EQUAL
54284: PUSH
54285: LD_VAR 0 1
54289: PPUSH
54290: CALL_OW 437
54294: PUSH
54295: LD_INT 1
54297: ARRAY
54298: PUSH
54299: LD_INT 4
54301: ARRAY
54302: PUSH
54303: LD_VAR 0 2
54307: EQUAL
54308: AND
54309: IFFALSE 54321
// result := true else
54311: LD_ADDR_VAR 0 3
54315: PUSH
54316: LD_INT 1
54318: ST_TO_ADDR
54319: GO 54329
// result := false ;
54321: LD_ADDR_VAR 0 3
54325: PUSH
54326: LD_INT 0
54328: ST_TO_ADDR
// end else
54329: GO 54339
// result := false ;
54331: LD_ADDR_VAR 0 3
54335: PUSH
54336: LD_INT 0
54338: ST_TO_ADDR
// end ;
54339: LD_VAR 0 3
54343: RET
// export function HealTarget ( sci ) ; begin
54344: LD_INT 0
54346: PPUSH
// if not sci then
54347: LD_VAR 0 1
54351: NOT
54352: IFFALSE 54356
// exit ;
54354: GO 54421
// result := 0 ;
54356: LD_ADDR_VAR 0 2
54360: PUSH
54361: LD_INT 0
54363: ST_TO_ADDR
// if GetTaskList ( sci ) then
54364: LD_VAR 0 1
54368: PPUSH
54369: CALL_OW 437
54373: IFFALSE 54421
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54375: LD_VAR 0 1
54379: PPUSH
54380: CALL_OW 437
54384: PUSH
54385: LD_INT 1
54387: ARRAY
54388: PUSH
54389: LD_INT 1
54391: ARRAY
54392: PUSH
54393: LD_STRING l
54395: EQUAL
54396: IFFALSE 54421
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54398: LD_ADDR_VAR 0 2
54402: PUSH
54403: LD_VAR 0 1
54407: PPUSH
54408: CALL_OW 437
54412: PUSH
54413: LD_INT 1
54415: ARRAY
54416: PUSH
54417: LD_INT 4
54419: ARRAY
54420: ST_TO_ADDR
// end ;
54421: LD_VAR 0 2
54425: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54426: LD_INT 0
54428: PPUSH
54429: PPUSH
54430: PPUSH
54431: PPUSH
// if not base_units then
54432: LD_VAR 0 1
54436: NOT
54437: IFFALSE 54441
// exit ;
54439: GO 54528
// result := false ;
54441: LD_ADDR_VAR 0 2
54445: PUSH
54446: LD_INT 0
54448: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54449: LD_ADDR_VAR 0 5
54453: PUSH
54454: LD_VAR 0 1
54458: PPUSH
54459: LD_INT 21
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PPUSH
54469: CALL_OW 72
54473: ST_TO_ADDR
// if not tmp then
54474: LD_VAR 0 5
54478: NOT
54479: IFFALSE 54483
// exit ;
54481: GO 54528
// for i in tmp do
54483: LD_ADDR_VAR 0 3
54487: PUSH
54488: LD_VAR 0 5
54492: PUSH
54493: FOR_IN
54494: IFFALSE 54526
// begin result := EnemyInRange ( i , 22 ) ;
54496: LD_ADDR_VAR 0 2
54500: PUSH
54501: LD_VAR 0 3
54505: PPUSH
54506: LD_INT 22
54508: PPUSH
54509: CALL 52764 0 2
54513: ST_TO_ADDR
// if result then
54514: LD_VAR 0 2
54518: IFFALSE 54524
// exit ;
54520: POP
54521: POP
54522: GO 54528
// end ;
54524: GO 54493
54526: POP
54527: POP
// end ;
54528: LD_VAR 0 2
54532: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54533: LD_INT 0
54535: PPUSH
54536: PPUSH
// if not units then
54537: LD_VAR 0 1
54541: NOT
54542: IFFALSE 54546
// exit ;
54544: GO 54616
// result := [ ] ;
54546: LD_ADDR_VAR 0 3
54550: PUSH
54551: EMPTY
54552: ST_TO_ADDR
// for i in units do
54553: LD_ADDR_VAR 0 4
54557: PUSH
54558: LD_VAR 0 1
54562: PUSH
54563: FOR_IN
54564: IFFALSE 54614
// if GetTag ( i ) = tag then
54566: LD_VAR 0 4
54570: PPUSH
54571: CALL_OW 110
54575: PUSH
54576: LD_VAR 0 2
54580: EQUAL
54581: IFFALSE 54612
// result := Insert ( result , result + 1 , i ) ;
54583: LD_ADDR_VAR 0 3
54587: PUSH
54588: LD_VAR 0 3
54592: PPUSH
54593: LD_VAR 0 3
54597: PUSH
54598: LD_INT 1
54600: PLUS
54601: PPUSH
54602: LD_VAR 0 4
54606: PPUSH
54607: CALL_OW 2
54611: ST_TO_ADDR
54612: GO 54563
54614: POP
54615: POP
// end ;
54616: LD_VAR 0 3
54620: RET
// export function IsDriver ( un ) ; begin
54621: LD_INT 0
54623: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54624: LD_ADDR_VAR 0 2
54628: PUSH
54629: LD_VAR 0 1
54633: PUSH
54634: LD_INT 55
54636: PUSH
54637: EMPTY
54638: LIST
54639: PPUSH
54640: CALL_OW 69
54644: IN
54645: ST_TO_ADDR
// end ;
54646: LD_VAR 0 2
54650: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54651: LD_INT 0
54653: PPUSH
54654: PPUSH
// list := [ ] ;
54655: LD_ADDR_VAR 0 5
54659: PUSH
54660: EMPTY
54661: ST_TO_ADDR
// case d of 0 :
54662: LD_VAR 0 3
54666: PUSH
54667: LD_INT 0
54669: DOUBLE
54670: EQUAL
54671: IFTRUE 54675
54673: GO 54808
54675: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54676: LD_ADDR_VAR 0 5
54680: PUSH
54681: LD_VAR 0 1
54685: PUSH
54686: LD_INT 4
54688: MINUS
54689: PUSH
54690: LD_VAR 0 2
54694: PUSH
54695: LD_INT 4
54697: MINUS
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: PUSH
54707: LD_VAR 0 1
54711: PUSH
54712: LD_INT 3
54714: MINUS
54715: PUSH
54716: LD_VAR 0 2
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: PUSH
54729: LD_VAR 0 1
54733: PUSH
54734: LD_INT 4
54736: PLUS
54737: PUSH
54738: LD_VAR 0 2
54742: PUSH
54743: LD_INT 4
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: LIST
54750: PUSH
54751: LD_VAR 0 1
54755: PUSH
54756: LD_INT 3
54758: PLUS
54759: PUSH
54760: LD_VAR 0 2
54764: PUSH
54765: LD_INT 3
54767: PLUS
54768: PUSH
54769: LD_INT 5
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: PUSH
54777: LD_VAR 0 1
54781: PUSH
54782: LD_VAR 0 2
54786: PUSH
54787: LD_INT 4
54789: PLUS
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: ST_TO_ADDR
// end ; 1 :
54806: GO 55506
54808: LD_INT 1
54810: DOUBLE
54811: EQUAL
54812: IFTRUE 54816
54814: GO 54949
54816: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54817: LD_ADDR_VAR 0 5
54821: PUSH
54822: LD_VAR 0 1
54826: PUSH
54827: LD_VAR 0 2
54831: PUSH
54832: LD_INT 4
54834: MINUS
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: PUSH
54844: LD_VAR 0 1
54848: PUSH
54849: LD_INT 3
54851: MINUS
54852: PUSH
54853: LD_VAR 0 2
54857: PUSH
54858: LD_INT 3
54860: MINUS
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: PUSH
54870: LD_VAR 0 1
54874: PUSH
54875: LD_INT 4
54877: MINUS
54878: PUSH
54879: LD_VAR 0 2
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: LIST
54891: PUSH
54892: LD_VAR 0 1
54896: PUSH
54897: LD_VAR 0 2
54901: PUSH
54902: LD_INT 3
54904: PLUS
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: PUSH
54914: LD_VAR 0 1
54918: PUSH
54919: LD_INT 4
54921: PLUS
54922: PUSH
54923: LD_VAR 0 2
54927: PUSH
54928: LD_INT 4
54930: PLUS
54931: PUSH
54932: LD_INT 5
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: LIST
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// end ; 2 :
54947: GO 55506
54949: LD_INT 2
54951: DOUBLE
54952: EQUAL
54953: IFTRUE 54957
54955: GO 55086
54957: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54958: LD_ADDR_VAR 0 5
54962: PUSH
54963: LD_VAR 0 1
54967: PUSH
54968: LD_VAR 0 2
54972: PUSH
54973: LD_INT 3
54975: MINUS
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: PUSH
54985: LD_VAR 0 1
54989: PUSH
54990: LD_INT 4
54992: PLUS
54993: PUSH
54994: LD_VAR 0 2
54998: PUSH
54999: LD_INT 4
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: LIST
55006: PUSH
55007: LD_VAR 0 1
55011: PUSH
55012: LD_VAR 0 2
55016: PUSH
55017: LD_INT 4
55019: PLUS
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: PUSH
55029: LD_VAR 0 1
55033: PUSH
55034: LD_INT 3
55036: MINUS
55037: PUSH
55038: LD_VAR 0 2
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: PUSH
55051: LD_VAR 0 1
55055: PUSH
55056: LD_INT 4
55058: MINUS
55059: PUSH
55060: LD_VAR 0 2
55064: PUSH
55065: LD_INT 4
55067: MINUS
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: ST_TO_ADDR
// end ; 3 :
55084: GO 55506
55086: LD_INT 3
55088: DOUBLE
55089: EQUAL
55090: IFTRUE 55094
55092: GO 55227
55094: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55095: LD_ADDR_VAR 0 5
55099: PUSH
55100: LD_VAR 0 1
55104: PUSH
55105: LD_INT 3
55107: PLUS
55108: PUSH
55109: LD_VAR 0 2
55113: PUSH
55114: LD_INT 4
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: PUSH
55122: LD_VAR 0 1
55126: PUSH
55127: LD_INT 4
55129: PLUS
55130: PUSH
55131: LD_VAR 0 2
55135: PUSH
55136: LD_INT 4
55138: PLUS
55139: PUSH
55140: LD_INT 5
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: PUSH
55148: LD_VAR 0 1
55152: PUSH
55153: LD_INT 4
55155: MINUS
55156: PUSH
55157: LD_VAR 0 2
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: LIST
55169: PUSH
55170: LD_VAR 0 1
55174: PUSH
55175: LD_VAR 0 2
55179: PUSH
55180: LD_INT 4
55182: MINUS
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: PUSH
55192: LD_VAR 0 1
55196: PUSH
55197: LD_INT 3
55199: MINUS
55200: PUSH
55201: LD_VAR 0 2
55205: PUSH
55206: LD_INT 3
55208: MINUS
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// end ; 4 :
55225: GO 55506
55227: LD_INT 4
55229: DOUBLE
55230: EQUAL
55231: IFTRUE 55235
55233: GO 55368
55235: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55236: LD_ADDR_VAR 0 5
55240: PUSH
55241: LD_VAR 0 1
55245: PUSH
55246: LD_VAR 0 2
55250: PUSH
55251: LD_INT 4
55253: PLUS
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: LIST
55262: PUSH
55263: LD_VAR 0 1
55267: PUSH
55268: LD_INT 3
55270: PLUS
55271: PUSH
55272: LD_VAR 0 2
55276: PUSH
55277: LD_INT 3
55279: PLUS
55280: PUSH
55281: LD_INT 5
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: PUSH
55289: LD_VAR 0 1
55293: PUSH
55294: LD_INT 4
55296: PLUS
55297: PUSH
55298: LD_VAR 0 2
55302: PUSH
55303: LD_INT 4
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: LIST
55310: PUSH
55311: LD_VAR 0 1
55315: PUSH
55316: LD_VAR 0 2
55320: PUSH
55321: LD_INT 3
55323: MINUS
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: PUSH
55333: LD_VAR 0 1
55337: PUSH
55338: LD_INT 4
55340: MINUS
55341: PUSH
55342: LD_VAR 0 2
55346: PUSH
55347: LD_INT 4
55349: MINUS
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: ST_TO_ADDR
// end ; 5 :
55366: GO 55506
55368: LD_INT 5
55370: DOUBLE
55371: EQUAL
55372: IFTRUE 55376
55374: GO 55505
55376: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55377: LD_ADDR_VAR 0 5
55381: PUSH
55382: LD_VAR 0 1
55386: PUSH
55387: LD_INT 4
55389: MINUS
55390: PUSH
55391: LD_VAR 0 2
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: PUSH
55404: LD_VAR 0 1
55408: PUSH
55409: LD_VAR 0 2
55413: PUSH
55414: LD_INT 4
55416: MINUS
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: PUSH
55426: LD_VAR 0 1
55430: PUSH
55431: LD_INT 4
55433: PLUS
55434: PUSH
55435: LD_VAR 0 2
55439: PUSH
55440: LD_INT 4
55442: PLUS
55443: PUSH
55444: LD_INT 5
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: PUSH
55452: LD_VAR 0 1
55456: PUSH
55457: LD_INT 3
55459: PLUS
55460: PUSH
55461: LD_VAR 0 2
55465: PUSH
55466: LD_INT 4
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: PUSH
55474: LD_VAR 0 1
55478: PUSH
55479: LD_VAR 0 2
55483: PUSH
55484: LD_INT 3
55486: PLUS
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// end ; end ;
55503: GO 55506
55505: POP
// result := list ;
55506: LD_ADDR_VAR 0 4
55510: PUSH
55511: LD_VAR 0 5
55515: ST_TO_ADDR
// end ;
55516: LD_VAR 0 4
55520: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55521: LD_INT 0
55523: PPUSH
55524: PPUSH
55525: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55526: LD_VAR 0 1
55530: NOT
55531: PUSH
55532: LD_VAR 0 2
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: LD_INT 4
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: IN
55555: NOT
55556: OR
55557: IFFALSE 55561
// exit ;
55559: GO 55653
// tmp := [ ] ;
55561: LD_ADDR_VAR 0 5
55565: PUSH
55566: EMPTY
55567: ST_TO_ADDR
// for i in units do
55568: LD_ADDR_VAR 0 4
55572: PUSH
55573: LD_VAR 0 1
55577: PUSH
55578: FOR_IN
55579: IFFALSE 55622
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55581: LD_ADDR_VAR 0 5
55585: PUSH
55586: LD_VAR 0 5
55590: PPUSH
55591: LD_VAR 0 5
55595: PUSH
55596: LD_INT 1
55598: PLUS
55599: PPUSH
55600: LD_VAR 0 4
55604: PPUSH
55605: LD_VAR 0 2
55609: PPUSH
55610: CALL_OW 259
55614: PPUSH
55615: CALL_OW 2
55619: ST_TO_ADDR
55620: GO 55578
55622: POP
55623: POP
// if not tmp then
55624: LD_VAR 0 5
55628: NOT
55629: IFFALSE 55633
// exit ;
55631: GO 55653
// result := SortListByListDesc ( units , tmp ) ;
55633: LD_ADDR_VAR 0 3
55637: PUSH
55638: LD_VAR 0 1
55642: PPUSH
55643: LD_VAR 0 5
55647: PPUSH
55648: CALL_OW 77
55652: ST_TO_ADDR
// end ;
55653: LD_VAR 0 3
55657: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55658: LD_INT 0
55660: PPUSH
55661: PPUSH
55662: PPUSH
// x := GetX ( building ) ;
55663: LD_ADDR_VAR 0 4
55667: PUSH
55668: LD_VAR 0 2
55672: PPUSH
55673: CALL_OW 250
55677: ST_TO_ADDR
// y := GetY ( building ) ;
55678: LD_ADDR_VAR 0 5
55682: PUSH
55683: LD_VAR 0 2
55687: PPUSH
55688: CALL_OW 251
55692: ST_TO_ADDR
// if GetTaskList ( unit ) then
55693: LD_VAR 0 1
55697: PPUSH
55698: CALL_OW 437
55702: IFFALSE 55797
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55704: LD_STRING e
55706: PUSH
55707: LD_VAR 0 1
55711: PPUSH
55712: CALL_OW 437
55716: PUSH
55717: LD_INT 1
55719: ARRAY
55720: PUSH
55721: LD_INT 1
55723: ARRAY
55724: EQUAL
55725: PUSH
55726: LD_VAR 0 4
55730: PUSH
55731: LD_VAR 0 1
55735: PPUSH
55736: CALL_OW 437
55740: PUSH
55741: LD_INT 1
55743: ARRAY
55744: PUSH
55745: LD_INT 2
55747: ARRAY
55748: EQUAL
55749: AND
55750: PUSH
55751: LD_VAR 0 5
55755: PUSH
55756: LD_VAR 0 1
55760: PPUSH
55761: CALL_OW 437
55765: PUSH
55766: LD_INT 1
55768: ARRAY
55769: PUSH
55770: LD_INT 3
55772: ARRAY
55773: EQUAL
55774: AND
55775: IFFALSE 55787
// result := true else
55777: LD_ADDR_VAR 0 3
55781: PUSH
55782: LD_INT 1
55784: ST_TO_ADDR
55785: GO 55795
// result := false ;
55787: LD_ADDR_VAR 0 3
55791: PUSH
55792: LD_INT 0
55794: ST_TO_ADDR
// end else
55795: GO 55805
// result := false ;
55797: LD_ADDR_VAR 0 3
55801: PUSH
55802: LD_INT 0
55804: ST_TO_ADDR
// end ;
55805: LD_VAR 0 3
55809: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55810: LD_INT 0
55812: PPUSH
55813: PPUSH
55814: PPUSH
55815: PPUSH
// if not unit or not area then
55816: LD_VAR 0 1
55820: NOT
55821: PUSH
55822: LD_VAR 0 2
55826: NOT
55827: OR
55828: IFFALSE 55832
// exit ;
55830: GO 55996
// tmp := AreaToList ( area , i ) ;
55832: LD_ADDR_VAR 0 6
55836: PUSH
55837: LD_VAR 0 2
55841: PPUSH
55842: LD_VAR 0 5
55846: PPUSH
55847: CALL_OW 517
55851: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55852: LD_ADDR_VAR 0 5
55856: PUSH
55857: DOUBLE
55858: LD_INT 1
55860: DEC
55861: ST_TO_ADDR
55862: LD_VAR 0 6
55866: PUSH
55867: LD_INT 1
55869: ARRAY
55870: PUSH
55871: FOR_TO
55872: IFFALSE 55994
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55874: LD_ADDR_VAR 0 7
55878: PUSH
55879: LD_VAR 0 6
55883: PUSH
55884: LD_INT 1
55886: ARRAY
55887: PUSH
55888: LD_VAR 0 5
55892: ARRAY
55893: PUSH
55894: LD_VAR 0 6
55898: PUSH
55899: LD_INT 2
55901: ARRAY
55902: PUSH
55903: LD_VAR 0 5
55907: ARRAY
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55913: LD_VAR 0 7
55917: PUSH
55918: LD_INT 1
55920: ARRAY
55921: PPUSH
55922: LD_VAR 0 7
55926: PUSH
55927: LD_INT 2
55929: ARRAY
55930: PPUSH
55931: CALL_OW 428
55935: PUSH
55936: LD_INT 0
55938: EQUAL
55939: IFFALSE 55992
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55941: LD_VAR 0 1
55945: PPUSH
55946: LD_VAR 0 7
55950: PUSH
55951: LD_INT 1
55953: ARRAY
55954: PPUSH
55955: LD_VAR 0 7
55959: PUSH
55960: LD_INT 2
55962: ARRAY
55963: PPUSH
55964: LD_VAR 0 3
55968: PPUSH
55969: CALL_OW 48
// result := IsPlaced ( unit ) ;
55973: LD_ADDR_VAR 0 4
55977: PUSH
55978: LD_VAR 0 1
55982: PPUSH
55983: CALL_OW 305
55987: ST_TO_ADDR
// exit ;
55988: POP
55989: POP
55990: GO 55996
// end ; end ;
55992: GO 55871
55994: POP
55995: POP
// end ;
55996: LD_VAR 0 4
56000: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56001: LD_INT 0
56003: PPUSH
56004: PPUSH
56005: PPUSH
// if not side or side > 8 then
56006: LD_VAR 0 1
56010: NOT
56011: PUSH
56012: LD_VAR 0 1
56016: PUSH
56017: LD_INT 8
56019: GREATER
56020: OR
56021: IFFALSE 56025
// exit ;
56023: GO 56212
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56025: LD_ADDR_VAR 0 4
56029: PUSH
56030: LD_INT 22
56032: PUSH
56033: LD_VAR 0 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 21
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PPUSH
56056: CALL_OW 69
56060: ST_TO_ADDR
// if not tmp then
56061: LD_VAR 0 4
56065: NOT
56066: IFFALSE 56070
// exit ;
56068: GO 56212
// enable_addtolog := true ;
56070: LD_ADDR_OWVAR 81
56074: PUSH
56075: LD_INT 1
56077: ST_TO_ADDR
// AddToLog ( [ ) ;
56078: LD_STRING [
56080: PPUSH
56081: CALL_OW 561
// for i in tmp do
56085: LD_ADDR_VAR 0 3
56089: PUSH
56090: LD_VAR 0 4
56094: PUSH
56095: FOR_IN
56096: IFFALSE 56203
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56098: LD_STRING [
56100: PUSH
56101: LD_VAR 0 3
56105: PPUSH
56106: CALL_OW 266
56110: STR
56111: PUSH
56112: LD_STRING , 
56114: STR
56115: PUSH
56116: LD_VAR 0 3
56120: PPUSH
56121: CALL_OW 250
56125: STR
56126: PUSH
56127: LD_STRING , 
56129: STR
56130: PUSH
56131: LD_VAR 0 3
56135: PPUSH
56136: CALL_OW 251
56140: STR
56141: PUSH
56142: LD_STRING , 
56144: STR
56145: PUSH
56146: LD_VAR 0 3
56150: PPUSH
56151: CALL_OW 254
56155: STR
56156: PUSH
56157: LD_STRING , 
56159: STR
56160: PUSH
56161: LD_VAR 0 3
56165: PPUSH
56166: LD_INT 1
56168: PPUSH
56169: CALL_OW 268
56173: STR
56174: PUSH
56175: LD_STRING , 
56177: STR
56178: PUSH
56179: LD_VAR 0 3
56183: PPUSH
56184: LD_INT 2
56186: PPUSH
56187: CALL_OW 268
56191: STR
56192: PUSH
56193: LD_STRING ],
56195: STR
56196: PPUSH
56197: CALL_OW 561
// end ;
56201: GO 56095
56203: POP
56204: POP
// AddToLog ( ]; ) ;
56205: LD_STRING ];
56207: PPUSH
56208: CALL_OW 561
// end ;
56212: LD_VAR 0 2
56216: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56217: LD_INT 0
56219: PPUSH
56220: PPUSH
56221: PPUSH
56222: PPUSH
56223: PPUSH
// if not area or not rate or not max then
56224: LD_VAR 0 1
56228: NOT
56229: PUSH
56230: LD_VAR 0 2
56234: NOT
56235: OR
56236: PUSH
56237: LD_VAR 0 4
56241: NOT
56242: OR
56243: IFFALSE 56247
// exit ;
56245: GO 56439
// while 1 do
56247: LD_INT 1
56249: IFFALSE 56439
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56251: LD_ADDR_VAR 0 9
56255: PUSH
56256: LD_VAR 0 1
56260: PPUSH
56261: LD_INT 1
56263: PPUSH
56264: CALL_OW 287
56268: PUSH
56269: LD_INT 10
56271: MUL
56272: ST_TO_ADDR
// r := rate / 10 ;
56273: LD_ADDR_VAR 0 7
56277: PUSH
56278: LD_VAR 0 2
56282: PUSH
56283: LD_INT 10
56285: DIVREAL
56286: ST_TO_ADDR
// time := 1 1$00 ;
56287: LD_ADDR_VAR 0 8
56291: PUSH
56292: LD_INT 2100
56294: ST_TO_ADDR
// if amount < min then
56295: LD_VAR 0 9
56299: PUSH
56300: LD_VAR 0 3
56304: LESS
56305: IFFALSE 56323
// r := r * 2 else
56307: LD_ADDR_VAR 0 7
56311: PUSH
56312: LD_VAR 0 7
56316: PUSH
56317: LD_INT 2
56319: MUL
56320: ST_TO_ADDR
56321: GO 56349
// if amount > max then
56323: LD_VAR 0 9
56327: PUSH
56328: LD_VAR 0 4
56332: GREATER
56333: IFFALSE 56349
// r := r / 2 ;
56335: LD_ADDR_VAR 0 7
56339: PUSH
56340: LD_VAR 0 7
56344: PUSH
56345: LD_INT 2
56347: DIVREAL
56348: ST_TO_ADDR
// time := time / r ;
56349: LD_ADDR_VAR 0 8
56353: PUSH
56354: LD_VAR 0 8
56358: PUSH
56359: LD_VAR 0 7
56363: DIVREAL
56364: ST_TO_ADDR
// if time < 0 then
56365: LD_VAR 0 8
56369: PUSH
56370: LD_INT 0
56372: LESS
56373: IFFALSE 56390
// time := time * - 1 ;
56375: LD_ADDR_VAR 0 8
56379: PUSH
56380: LD_VAR 0 8
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: MUL
56389: ST_TO_ADDR
// wait ( time ) ;
56390: LD_VAR 0 8
56394: PPUSH
56395: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56399: LD_INT 35
56401: PPUSH
56402: LD_INT 875
56404: PPUSH
56405: CALL_OW 12
56409: PPUSH
56410: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56414: LD_INT 1
56416: PPUSH
56417: LD_INT 5
56419: PPUSH
56420: CALL_OW 12
56424: PPUSH
56425: LD_VAR 0 1
56429: PPUSH
56430: LD_INT 1
56432: PPUSH
56433: CALL_OW 55
// end ;
56437: GO 56247
// end ;
56439: LD_VAR 0 5
56443: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56444: LD_INT 0
56446: PPUSH
56447: PPUSH
56448: PPUSH
56449: PPUSH
56450: PPUSH
56451: PPUSH
56452: PPUSH
56453: PPUSH
// if not turrets or not factories then
56454: LD_VAR 0 1
56458: NOT
56459: PUSH
56460: LD_VAR 0 2
56464: NOT
56465: OR
56466: IFFALSE 56470
// exit ;
56468: GO 56777
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56470: LD_ADDR_VAR 0 10
56474: PUSH
56475: LD_INT 5
56477: PUSH
56478: LD_INT 6
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 4
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: LD_INT 5
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 24
56512: PUSH
56513: LD_INT 25
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 23
56522: PUSH
56523: LD_INT 27
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 42
56536: PUSH
56537: LD_INT 43
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 44
56546: PUSH
56547: LD_INT 46
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 45
56556: PUSH
56557: LD_INT 47
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: ST_TO_ADDR
// result := [ ] ;
56574: LD_ADDR_VAR 0 3
56578: PUSH
56579: EMPTY
56580: ST_TO_ADDR
// for i in turrets do
56581: LD_ADDR_VAR 0 4
56585: PUSH
56586: LD_VAR 0 1
56590: PUSH
56591: FOR_IN
56592: IFFALSE 56775
// begin nat := GetNation ( i ) ;
56594: LD_ADDR_VAR 0 7
56598: PUSH
56599: LD_VAR 0 4
56603: PPUSH
56604: CALL_OW 248
56608: ST_TO_ADDR
// weapon := 0 ;
56609: LD_ADDR_VAR 0 8
56613: PUSH
56614: LD_INT 0
56616: ST_TO_ADDR
// if not nat then
56617: LD_VAR 0 7
56621: NOT
56622: IFFALSE 56626
// continue ;
56624: GO 56591
// for j in list [ nat ] do
56626: LD_ADDR_VAR 0 5
56630: PUSH
56631: LD_VAR 0 10
56635: PUSH
56636: LD_VAR 0 7
56640: ARRAY
56641: PUSH
56642: FOR_IN
56643: IFFALSE 56684
// if GetBWeapon ( i ) = j [ 1 ] then
56645: LD_VAR 0 4
56649: PPUSH
56650: CALL_OW 269
56654: PUSH
56655: LD_VAR 0 5
56659: PUSH
56660: LD_INT 1
56662: ARRAY
56663: EQUAL
56664: IFFALSE 56682
// begin weapon := j [ 2 ] ;
56666: LD_ADDR_VAR 0 8
56670: PUSH
56671: LD_VAR 0 5
56675: PUSH
56676: LD_INT 2
56678: ARRAY
56679: ST_TO_ADDR
// break ;
56680: GO 56684
// end ;
56682: GO 56642
56684: POP
56685: POP
// if not weapon then
56686: LD_VAR 0 8
56690: NOT
56691: IFFALSE 56695
// continue ;
56693: GO 56591
// for k in factories do
56695: LD_ADDR_VAR 0 6
56699: PUSH
56700: LD_VAR 0 2
56704: PUSH
56705: FOR_IN
56706: IFFALSE 56771
// begin weapons := AvailableWeaponList ( k ) ;
56708: LD_ADDR_VAR 0 9
56712: PUSH
56713: LD_VAR 0 6
56717: PPUSH
56718: CALL_OW 478
56722: ST_TO_ADDR
// if not weapons then
56723: LD_VAR 0 9
56727: NOT
56728: IFFALSE 56732
// continue ;
56730: GO 56705
// if weapon in weapons then
56732: LD_VAR 0 8
56736: PUSH
56737: LD_VAR 0 9
56741: IN
56742: IFFALSE 56769
// begin result := [ i , weapon ] ;
56744: LD_ADDR_VAR 0 3
56748: PUSH
56749: LD_VAR 0 4
56753: PUSH
56754: LD_VAR 0 8
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// exit ;
56763: POP
56764: POP
56765: POP
56766: POP
56767: GO 56777
// end ; end ;
56769: GO 56705
56771: POP
56772: POP
// end ;
56773: GO 56591
56775: POP
56776: POP
// end ;
56777: LD_VAR 0 3
56781: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56782: LD_INT 0
56784: PPUSH
// if not side or side > 8 then
56785: LD_VAR 0 3
56789: NOT
56790: PUSH
56791: LD_VAR 0 3
56795: PUSH
56796: LD_INT 8
56798: GREATER
56799: OR
56800: IFFALSE 56804
// exit ;
56802: GO 56863
// if not range then
56804: LD_VAR 0 4
56808: NOT
56809: IFFALSE 56820
// range := - 12 ;
56811: LD_ADDR_VAR 0 4
56815: PUSH
56816: LD_INT 12
56818: NEG
56819: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56820: LD_VAR 0 1
56824: PPUSH
56825: LD_VAR 0 2
56829: PPUSH
56830: LD_VAR 0 3
56834: PPUSH
56835: LD_VAR 0 4
56839: PPUSH
56840: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56844: LD_VAR 0 1
56848: PPUSH
56849: LD_VAR 0 2
56853: PPUSH
56854: LD_VAR 0 3
56858: PPUSH
56859: CALL_OW 331
// end ;
56863: LD_VAR 0 5
56867: RET
// export function Video ( mode ) ; begin
56868: LD_INT 0
56870: PPUSH
// ingame_video = mode ;
56871: LD_ADDR_OWVAR 52
56875: PUSH
56876: LD_VAR 0 1
56880: ST_TO_ADDR
// interface_hidden = mode ;
56881: LD_ADDR_OWVAR 54
56885: PUSH
56886: LD_VAR 0 1
56890: ST_TO_ADDR
// end ;
56891: LD_VAR 0 2
56895: RET
// export function Join ( array , element ) ; begin
56896: LD_INT 0
56898: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56899: LD_ADDR_VAR 0 3
56903: PUSH
56904: LD_VAR 0 1
56908: PPUSH
56909: LD_VAR 0 1
56913: PUSH
56914: LD_INT 1
56916: PLUS
56917: PPUSH
56918: LD_VAR 0 2
56922: PPUSH
56923: CALL_OW 1
56927: ST_TO_ADDR
// end ;
56928: LD_VAR 0 3
56932: RET
// export function JoinUnion ( array , element ) ; begin
56933: LD_INT 0
56935: PPUSH
// result := array union element ;
56936: LD_ADDR_VAR 0 3
56940: PUSH
56941: LD_VAR 0 1
56945: PUSH
56946: LD_VAR 0 2
56950: UNION
56951: ST_TO_ADDR
// end ;
56952: LD_VAR 0 3
56956: RET
// export function GetBehemoths ( side ) ; begin
56957: LD_INT 0
56959: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56960: LD_ADDR_VAR 0 2
56964: PUSH
56965: LD_INT 22
56967: PUSH
56968: LD_VAR 0 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 31
56979: PUSH
56980: LD_INT 25
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PPUSH
56991: CALL_OW 69
56995: ST_TO_ADDR
// end ;
56996: LD_VAR 0 2
57000: RET
// export function Shuffle ( array ) ; var i , index ; begin
57001: LD_INT 0
57003: PPUSH
57004: PPUSH
57005: PPUSH
// result := [ ] ;
57006: LD_ADDR_VAR 0 2
57010: PUSH
57011: EMPTY
57012: ST_TO_ADDR
// if not array then
57013: LD_VAR 0 1
57017: NOT
57018: IFFALSE 57022
// exit ;
57020: GO 57121
// Randomize ;
57022: CALL_OW 10
// for i = array downto 1 do
57026: LD_ADDR_VAR 0 3
57030: PUSH
57031: DOUBLE
57032: LD_VAR 0 1
57036: INC
57037: ST_TO_ADDR
57038: LD_INT 1
57040: PUSH
57041: FOR_DOWNTO
57042: IFFALSE 57119
// begin index := rand ( 1 , array ) ;
57044: LD_ADDR_VAR 0 4
57048: PUSH
57049: LD_INT 1
57051: PPUSH
57052: LD_VAR 0 1
57056: PPUSH
57057: CALL_OW 12
57061: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57062: LD_ADDR_VAR 0 2
57066: PUSH
57067: LD_VAR 0 2
57071: PPUSH
57072: LD_VAR 0 2
57076: PUSH
57077: LD_INT 1
57079: PLUS
57080: PPUSH
57081: LD_VAR 0 1
57085: PUSH
57086: LD_VAR 0 4
57090: ARRAY
57091: PPUSH
57092: CALL_OW 2
57096: ST_TO_ADDR
// array := Delete ( array , index ) ;
57097: LD_ADDR_VAR 0 1
57101: PUSH
57102: LD_VAR 0 1
57106: PPUSH
57107: LD_VAR 0 4
57111: PPUSH
57112: CALL_OW 3
57116: ST_TO_ADDR
// end ;
57117: GO 57041
57119: POP
57120: POP
// end ;
57121: LD_VAR 0 2
57125: RET
// export function GetBaseMaterials ( base ) ; begin
57126: LD_INT 0
57128: PPUSH
// result := [ 0 , 0 , 0 ] ;
57129: LD_ADDR_VAR 0 2
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: ST_TO_ADDR
// if not base then
57148: LD_VAR 0 1
57152: NOT
57153: IFFALSE 57157
// exit ;
57155: GO 57206
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57157: LD_ADDR_VAR 0 2
57161: PUSH
57162: LD_VAR 0 1
57166: PPUSH
57167: LD_INT 1
57169: PPUSH
57170: CALL_OW 275
57174: PUSH
57175: LD_VAR 0 1
57179: PPUSH
57180: LD_INT 2
57182: PPUSH
57183: CALL_OW 275
57187: PUSH
57188: LD_VAR 0 1
57192: PPUSH
57193: LD_INT 3
57195: PPUSH
57196: CALL_OW 275
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: ST_TO_ADDR
// end ;
57206: LD_VAR 0 2
57210: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57211: LD_INT 0
57213: PPUSH
57214: PPUSH
// result := array ;
57215: LD_ADDR_VAR 0 3
57219: PUSH
57220: LD_VAR 0 1
57224: ST_TO_ADDR
// if size > 0 then
57225: LD_VAR 0 2
57229: PUSH
57230: LD_INT 0
57232: GREATER
57233: IFFALSE 57279
// for i := array downto size do
57235: LD_ADDR_VAR 0 4
57239: PUSH
57240: DOUBLE
57241: LD_VAR 0 1
57245: INC
57246: ST_TO_ADDR
57247: LD_VAR 0 2
57251: PUSH
57252: FOR_DOWNTO
57253: IFFALSE 57277
// result := Delete ( result , result ) ;
57255: LD_ADDR_VAR 0 3
57259: PUSH
57260: LD_VAR 0 3
57264: PPUSH
57265: LD_VAR 0 3
57269: PPUSH
57270: CALL_OW 3
57274: ST_TO_ADDR
57275: GO 57252
57277: POP
57278: POP
// end ;
57279: LD_VAR 0 3
57283: RET
// export function ComExit ( unit ) ; var tmp ; begin
57284: LD_INT 0
57286: PPUSH
57287: PPUSH
// if not IsInUnit ( unit ) then
57288: LD_VAR 0 1
57292: PPUSH
57293: CALL_OW 310
57297: NOT
57298: IFFALSE 57302
// exit ;
57300: GO 57362
// tmp := IsInUnit ( unit ) ;
57302: LD_ADDR_VAR 0 3
57306: PUSH
57307: LD_VAR 0 1
57311: PPUSH
57312: CALL_OW 310
57316: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57317: LD_VAR 0 3
57321: PPUSH
57322: CALL_OW 247
57326: PUSH
57327: LD_INT 2
57329: EQUAL
57330: IFFALSE 57343
// ComExitVehicle ( unit ) else
57332: LD_VAR 0 1
57336: PPUSH
57337: CALL_OW 121
57341: GO 57352
// ComExitBuilding ( unit ) ;
57343: LD_VAR 0 1
57347: PPUSH
57348: CALL_OW 122
// result := tmp ;
57352: LD_ADDR_VAR 0 2
57356: PUSH
57357: LD_VAR 0 3
57361: ST_TO_ADDR
// end ;
57362: LD_VAR 0 2
57366: RET
// export function ResetHc ; begin
57367: LD_INT 0
57369: PPUSH
// InitHc ;
57370: CALL_OW 19
// hc_importance := 0 ;
57374: LD_ADDR_OWVAR 32
57378: PUSH
57379: LD_INT 0
57381: ST_TO_ADDR
// end ;
57382: LD_VAR 0 1
57386: RET
