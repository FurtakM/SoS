// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1137 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2700 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 25633 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 25633 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 25633 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1132
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1132
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; 4 :
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1132
1108: LD_INT 4
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1131
1116: POP
// SetLives ( Bobby , 400 ) ; end ;
1117: LD_EXP 17
1121: PPUSH
1122: LD_INT 400
1124: PPUSH
1125: CALL_OW 234
1129: GO 1132
1131: POP
// end ; end_of_file
1132: LD_VAR 0 1
1136: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_OWVAR 67
1170: ARRAY
1171: ST_TO_ADDR
// uc_side := 3 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 3
1179: ST_TO_ADDR
// uc_nation := 3 ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1188: LD_ADDR_EXP 26
1192: PUSH
1193: LD_STRING Pokryshkin
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_STRING 
1201: PPUSH
1202: CALL 25633 0 3
1206: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1207: LD_EXP 26
1211: PPUSH
1212: LD_INT 44
1214: PPUSH
1215: LD_INT 5
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 48
// hc_importance := 0 ;
1225: LD_ADDR_OWVAR 32
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// hc_gallery :=  ;
1233: LD_ADDR_OWVAR 33
1237: PUSH
1238: LD_STRING 
1240: ST_TO_ADDR
// hc_name :=  ;
1241: LD_ADDR_OWVAR 26
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING SecondCharsGal
1271: ST_TO_ADDR
// hc_face_number := 69 ;
1272: LD_ADDR_OWVAR 34
1276: PUSH
1277: LD_INT 69
1279: ST_TO_ADDR
// hc_sex := sex_male ;
1280: LD_ADDR_OWVAR 27
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Ilja Ivanov
1295: ST_TO_ADDR
// un := CreateHuman ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 44
1305: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1306: LD_ADDR_EXP 21
1310: PUSH
1311: LD_EXP 21
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1359: LD_ADDR_OWVAR 33
1363: PUSH
1364: LD_STRING SecondCharsGal
1366: ST_TO_ADDR
// hc_face_number := 70 ;
1367: LD_ADDR_OWVAR 34
1371: PUSH
1372: LD_INT 70
1374: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1375: LD_ADDR_OWVAR 26
1379: PUSH
1380: LD_STRING Pavel Starczy
1382: ST_TO_ADDR
// un := CreateHuman ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 44
1392: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_EXP 21
1402: PPUSH
1403: LD_INT 2
1405: PPUSH
1406: LD_VAR 0 4
1410: PPUSH
1411: CALL_OW 2
1415: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1416: LD_VAR 0 4
1420: PPUSH
1421: LD_INT 3
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL_OW 49
// InitHc ;
1431: CALL_OW 19
// for i = 1 to 7 do
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: DOUBLE
1441: LD_INT 1
1443: DEC
1444: ST_TO_ADDR
1445: LD_INT 7
1447: PUSH
1448: FOR_TO
1449: IFFALSE 1600
// begin PrepareHuman ( false , 1 , skill ) ;
1451: LD_INT 0
1453: PPUSH
1454: LD_INT 1
1456: PPUSH
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 380
// un := CreateHuman ;
1466: LD_ADDR_VAR 0 4
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// if i mod 2 = 0 then
1476: LD_VAR 0 3
1480: PUSH
1481: LD_INT 2
1483: MOD
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: IFFALSE 1545
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1490: LD_ADDR_EXP 21
1494: PUSH
1495: LD_EXP 21
1499: PPUSH
1500: LD_EXP 21
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 4
1513: PPUSH
1514: CALL_OW 2
1518: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1519: LD_VAR 0 4
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// ComHold ( un ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 140
// end else
1543: GO 1598
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1545: LD_ADDR_EXP 22
1549: PUSH
1550: LD_EXP 22
1554: PPUSH
1555: LD_EXP 22
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: PPUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 2
1573: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1574: LD_VAR 0 4
1578: PPUSH
1579: LD_INT 4
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// ComHold ( un ) ;
1589: LD_VAR 0 4
1593: PPUSH
1594: CALL_OW 140
// end ; end ;
1598: GO 1448
1600: POP
1601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_INT 22
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PPUSH
1631: CALL_OW 69
1635: PUSH
1636: FOR_IN
1637: IFFALSE 1655
// PrepareSolBun ( skill , i ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 3
1648: PPUSH
1649: CALL 197 0 2
1653: GO 1636
1655: POP
1656: POP
// for i = 1 to 2 do
1657: LD_ADDR_VAR 0 3
1661: PUSH
1662: DOUBLE
1663: LD_INT 1
1665: DEC
1666: ST_TO_ADDR
1667: LD_INT 2
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1802
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_INT 3
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 22
1686: PPUSH
1687: LD_INT 1
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 42
1695: PPUSH
1696: LD_INT 100
1698: PPUSH
1699: CALL 333 0 7
1703: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1704: LD_INT 0
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 131
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_VAR 0 3
1752: ARRAY
1753: PPUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 87
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_VAR 0 3
1768: ARRAY
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1777: LD_ADDR_EXP 23
1781: PUSH
1782: LD_EXP 23
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_VAR 0 4
1794: PPUSH
1795: CALL_OW 2
1799: ST_TO_ADDR
// end ;
1800: GO 1670
1802: POP
1803: POP
// for i = 1 to 2 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 2
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1909
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1820: LD_INT 2
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_VAR 0 3
1838: ARRAY
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 380
// un := CreateHuman ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: CALL_OW 44
1859: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1860: LD_ADDR_EXP 24
1864: PUSH
1865: LD_EXP 24
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL_OW 2
1882: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// ComHold ( un ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: CALL_OW 140
// end ;
1907: GO 1817
1909: POP
1910: POP
// if Difficulty < 3 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 3
1918: LESS
1919: IFFALSE 1923
// exit ;
1921: GO 1966
// PrepareHuman ( false , 1 , skill ) ;
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1938: LD_ADDR_EXP 25
1942: PUSH
1943: CALL_OW 44
1947: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1948: LD_EXP 25
1952: PPUSH
1953: LD_INT 82
1955: PPUSH
1956: LD_INT 2
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 48
// end ;
1966: LD_VAR 0 1
1970: RET
// every 0 0$01 trigger active_road_patrol do
1971: LD_EXP 8
1975: IFFALSE 2041
1977: GO 1979
1979: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1980: LD_EXP 23
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: LD_STRING road
1991: PPUSH
1992: LD_INT 70
1994: PPUSH
1995: LD_INT 131
1997: PUSH
1998: LD_INT 87
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 75
2006: PUSH
2007: LD_INT 107
2009: PUSH
2010: LD_INT 66
2012: PUSH
2013: LD_INT 114
2015: PUSH
2016: LD_INT 61
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 34
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PPUSH
2037: CALL 421 0 4
2041: END
// every 0 0$01 trigger active_road_patrol do
2042: LD_EXP 8
2046: IFFALSE 2104
2048: GO 2050
2050: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 2
2058: ARRAY
2059: PPUSH
2060: LD_STRING road
2062: PPUSH
2063: LD_INT 70
2065: PPUSH
2066: LD_INT 21
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 37
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 65
2080: PUSH
2081: LD_INT 62
2083: PUSH
2084: LD_INT 107
2086: PUSH
2087: LD_INT 76
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 421 0 4
2104: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2105: LD_EXP 25
2109: PPUSH
2110: CALL_OW 302
2114: IFFALSE 2176
2116: GO 2118
2118: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2119: LD_EXP 25
2123: PPUSH
2124: LD_STRING forest
2126: PPUSH
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 52
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 9
2141: PUSH
2142: LD_INT 120
2144: PUSH
2145: LD_INT 52
2147: PUSH
2148: LD_INT 135
2150: PUSH
2151: LD_INT 80
2153: PUSH
2154: LD_INT 122
2156: PUSH
2157: LD_INT 95
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL 421 0 4
2176: END
// every 0 0$01 trigger macmilan_use_radio do
2177: LD_EXP 6
2181: IFFALSE 2242
2183: GO 2185
2185: DISABLE
// begin active_road_patrol := false ;
2186: LD_ADDR_EXP 8
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2194: LD_EXP 23
2198: PPUSH
2199: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2203: LD_EXP 23
2207: PPUSH
2208: LD_INT 72
2210: PPUSH
2211: LD_INT 41
2213: PPUSH
2214: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2218: LD_EXP 22
2222: PPUSH
2223: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 72
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 174
// end ;
2242: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2243: LD_INT 9
2245: PPUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2334
2262: GO 2264
2264: DISABLE
2265: LD_INT 0
2267: PPUSH
// begin enable ;
2268: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 9
2276: PPUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 70
2291: PUSH
2292: LD_INT 1
2294: ARRAY
2295: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2296: LD_EXP 22
2300: PPUSH
2301: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2305: LD_EXP 22
2309: PPUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 250
2319: PPUSH
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL_OW 251
2329: PPUSH
2330: CALL_OW 174
// end ;
2334: PPOPN 1
2336: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2337: LD_EXP 23
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: CALL_OW 256
2350: PUSH
2351: LD_INT 999
2353: LESS
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: OR
2373: PUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_EXP 16
2381: PPUSH
2382: CALL_OW 292
2386: AND
2387: IFFALSE 2414
2389: GO 2391
2391: DISABLE
// begin active_road_patrol := false ;
2392: LD_ADDR_EXP 8
2396: PUSH
2397: LD_INT 0
2399: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2400: LD_EXP 23
2404: PPUSH
2405: LD_EXP 16
2409: PPUSH
2410: CALL_OW 115
// end ;
2414: END
// every 0 0$01 trigger macmilan_in_trap do
2415: LD_EXP 9
2419: IFFALSE 2465
2421: GO 2423
2423: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2424: LD_EXP 22
2428: PPUSH
2429: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2433: LD_EXP 21
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PUSH
2444: LD_EXP 26
2448: ADD
2449: PUSH
2450: LD_EXP 23
2454: ADD
2455: PPUSH
2456: LD_EXP 16
2460: PPUSH
2461: CALL_OW 115
// end ;
2465: END
// every 0 0$01 trigger meta_action do
2466: LD_EXP 10
2470: IFFALSE 2516
2472: GO 2474
2474: DISABLE
// begin active_road_patrol := false ;
2475: LD_ADDR_EXP 8
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2483: LD_EXP 21
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PUSH
2494: LD_EXP 26
2498: ADD
2499: PUSH
2500: LD_EXP 23
2504: ADD
2505: PPUSH
2506: LD_INT 93
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: CALL_OW 114
// end ;
2516: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2517: LD_EXP 26
2521: PPUSH
2522: CALL_OW 256
2526: PUSH
2527: LD_INT 1000
2529: LESS
2530: IFFALSE 2581
2532: GO 2534
2534: DISABLE
// begin enable ;
2535: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2536: LD_INT 18
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: CALL_OW 428
2546: PUSH
2547: LD_EXP 26
2551: EQUAL
2552: IFFALSE 2566
// begin RemoveUnit ( Pokryshkin ) ;
2554: LD_EXP 26
2558: PPUSH
2559: CALL_OW 64
// disable ;
2563: DISABLE
// end else
2564: GO 2581
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2566: LD_EXP 26
2570: PPUSH
2571: LD_INT 18
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 111
// end ;
2581: END
// every 0 0$20 trigger send_troops_to_forest do
2582: LD_EXP 14
2586: IFFALSE 2640
2588: GO 2590
2590: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2591: LD_EXP 25
2595: PPUSH
2596: CALL_OW 302
2600: NOT
2601: IFFALSE 2605
// exit ;
2603: GO 2640
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2605: LD_EXP 21
2609: PUSH
2610: LD_EXP 26
2614: ADD
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 252
2625: PPUSH
2626: LD_EXP 25
2630: PPUSH
2631: CALL_OW 253
2635: PPUSH
2636: CALL_OW 114
// end ;
2640: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2697
// begin wait ( 11 ) ;
2656: LD_INT 11
2658: PPUSH
2659: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: PPUSH
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 74
2692: PPUSH
2693: CALL_OW 120
// end ; end ; end_of_file
2697: PPOPN 4
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2752
// ComHold ( i ) ;
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 140
2750: GO 2738
2752: POP
2753: POP
// InGameOn ;
2754: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2758: LD_INT 79
2760: PPUSH
2761: LD_INT 76
2763: PPUSH
2764: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2775: LD_EXP 16
2779: PPUSH
2780: LD_INT 80
2782: PPUSH
2783: LD_INT 79
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 48
// Wait ( 0 0$03 ) ;
2793: LD_INT 105
2795: PPUSH
2796: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2800: LD_EXP 16
2804: PPUSH
2805: LD_INT 80
2807: PPUSH
2808: LD_INT 76
2810: PPUSH
2811: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2815: LD_EXP 16
2819: PPUSH
2820: LD_STRING D1-JMM-1
2822: PPUSH
2823: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2827: LD_INT 10
2829: PPUSH
2830: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2834: LD_EXP 16
2838: PPUSH
2839: LD_INT 76
2841: PPUSH
2842: LD_INT 76
2844: PPUSH
2845: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_STRING D1-JMM-1a
2856: PPUSH
2857: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2861: LD_INT 10
2863: PPUSH
2864: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 83
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2883: LD_EXP 16
2887: PPUSH
2888: LD_STRING D1-JMM-1b
2890: PPUSH
2891: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2895: LD_INT 18
2897: PPUSH
2898: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2902: LD_EXP 16
2906: PPUSH
2907: LD_STRING D1-JMM-1c
2909: PPUSH
2910: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2914: LD_INT 7
2916: PPUSH
2917: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2921: LD_EXP 19
2925: PPUSH
2926: LD_STRING D1-Pow-1
2928: PPUSH
2929: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2933: LD_EXP 16
2937: PPUSH
2938: LD_STRING D1-JMM-2
2940: PPUSH
2941: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2945: LD_EXP 19
2949: PPUSH
2950: LD_STRING D1-Pow-2
2952: PPUSH
2953: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2957: LD_EXP 16
2961: PPUSH
2962: LD_STRING D1-JMM-3
2964: PPUSH
2965: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D1-Pow-3
2976: PPUSH
2977: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2981: LD_EXP 16
2985: PPUSH
2986: LD_STRING D1-JMM-4
2988: PPUSH
2989: CALL_OW 88
// ComFree ( JMM ) ;
2993: LD_EXP 16
2997: PPUSH
2998: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3002: LD_INT 10
3004: PPUSH
3005: CALL_OW 67
// InGameOff ;
3009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3013: LD_STRING M1
3015: PPUSH
3016: CALL_OW 337
// SaveForQuickRestart ;
3020: CALL_OW 22
// active_russian_dialog := true ;
3024: LD_ADDR_EXP 3
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// active_road_patrol := true ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// if Difficulty < 3 then
3040: LD_OWVAR 67
3044: PUSH
3045: LD_INT 3
3047: LESS
3048: IFFALSE 3079
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3050: LD_EXP 17
3054: PPUSH
3055: LD_INT 41
3057: PPUSH
3058: LD_INT 71
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL_OW 48
// ComHold ( Bobby ) ;
3068: LD_EXP 17
3072: PPUSH
3073: CALL_OW 140
// end else
3077: GO 3127
// begin SetDir ( Bobby , 5 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_INT 5
3086: PPUSH
3087: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 105
3098: PPUSH
3099: LD_INT 98
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 48
// ComCrawl ( Bobby ) ;
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 137
// AddComHold ( Bobby ) ;
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3127: LD_EXP 18
3131: PPUSH
3132: LD_INT 90
3134: PPUSH
3135: LD_INT 42
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 79
3152: PPUSH
3153: LD_INT 34
3155: PPUSH
3156: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3160: LD_EXP 18
3164: PPUSH
3165: CALL_OW 197
// end ;
3169: LD_VAR 0 1
3173: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3174: LD_EXP 3
3178: IFFALSE 3772
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin wait_points := 0 ;
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3194: LD_INT 70
3196: PPUSH
3197: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3201: LD_EXP 21
3205: PPUSH
3206: LD_INT 79
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3216: LD_EXP 21
3220: PUSH
3221: LD_INT 2
3223: ARRAY
3224: PPUSH
3225: LD_STRING D1R-Rus1-1
3227: PPUSH
3228: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3232: LD_EXP 21
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_STRING D1R-Rus2-1
3243: PPUSH
3244: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3248: LD_EXP 22
3252: PPUSH
3253: LD_INT 91
3255: PPUSH
3256: LD_INT 80
3258: PPUSH
3259: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3263: LD_INT 35
3265: PPUSH
3266: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3270: LD_EXP 21
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 79
3281: PPUSH
3282: LD_INT 82
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 6
3292: LESS
3293: IFFALSE 3263
// if not IsInArea ( JMM , jmm_spot ) then
3295: LD_EXP 16
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: CALL_OW 308
3307: NOT
3308: IFFALSE 3328
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3310: LD_EXP 21
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_STRING D1Ra-Rus2-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3395
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Rb-Rus1-1
3339: PPUSH
3340: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3344: LD_EXP 21
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_STRING D1Rb-Rus2-1
3355: PPUSH
3356: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3360: LD_EXP 21
3364: PUSH
3365: LD_EXP 22
3369: ADD
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: CALL_OW 250
3380: PPUSH
3381: LD_EXP 16
3385: PPUSH
3386: CALL_OW 251
3390: PPUSH
3391: CALL_OW 114
// end ; wait_points := 10 ;
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: LD_INT 10
3402: ST_TO_ADDR
// if Difficulty > 1 then
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: IFFALSE 3493
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3413: LD_EXP 21
3417: PPUSH
3418: LD_INT 78
3420: PPUSH
3421: LD_INT 95
3423: PPUSH
3424: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3428: LD_EXP 21
3432: PPUSH
3433: LD_INT 175
3435: PPUSH
3436: CALL_OW 202
// wait_points := wait_points + 15 ;
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_VAR 0 1
3449: PUSH
3450: LD_INT 15
3452: PLUS
3453: ST_TO_ADDR
// if Difficulty > 2 then
3454: LD_OWVAR 67
3458: PUSH
3459: LD_INT 2
3461: GREATER
3462: IFFALSE 3493
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3464: LD_EXP 21
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 79
3474: PPUSH
3475: CALL_OW 174
// wait_points := wait_points + 5 ;
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: PLUS
3492: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3493: LD_INT 35
3495: PPUSH
3496: CALL_OW 67
// wait_points := wait_points - 1 ;
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// if See ( 3 , JMM ) then
3514: LD_INT 3
3516: PPUSH
3517: LD_EXP 16
3521: PPUSH
3522: CALL_OW 292
3526: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3528: LD_EXP 21
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_STRING D1Rb-Rus1-1
3539: PPUSH
3540: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3544: LD_EXP 21
3548: PPUSH
3549: LD_EXP 16
3553: PPUSH
3554: CALL_OW 250
3558: PPUSH
3559: LD_EXP 16
3563: PPUSH
3564: CALL_OW 251
3568: PPUSH
3569: CALL_OW 114
// Wait ( 0 0$03 ) ;
3573: LD_INT 105
3575: PPUSH
3576: CALL_OW 67
// end ; until wait_points = 0 ;
3580: LD_VAR 0 1
3584: PUSH
3585: LD_INT 0
3587: EQUAL
3588: IFFALSE 3493
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3590: LD_EXP 21
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_STRING D1Rc-Rus1-1
3601: PPUSH
3602: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1Ra-Rus2-1a
3617: PPUSH
3618: CALL_OW 88
// active_powell_dialog := true ;
3622: LD_ADDR_EXP 15
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3630: LD_EXP 21
3634: PPUSH
3635: LD_INT 45
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3645: LD_EXP 22
3649: PPUSH
3650: LD_INT 26
3652: PPUSH
3653: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if See ( 3 , JMM ) then
3664: LD_INT 3
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: CALL_OW 292
3676: IFFALSE 3732
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3678: LD_EXP 21
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: PPUSH
3687: LD_STRING D1Rb-Rus1-1
3689: PPUSH
3690: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3694: LD_EXP 21
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 250
3708: PPUSH
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 251
3718: PPUSH
3719: CALL_OW 114
// Wait ( 0 0$50 ) ;
3723: LD_INT 1750
3725: PPUSH
3726: CALL_OW 67
// end else
3730: GO 3747
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3732: LD_EXP 21
3736: PPUSH
3737: LD_INT 45
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3747: LD_EXP 21
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: PPUSH
3756: LD_INT 45
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: CALL_OW 297
3766: PUSH
3767: LD_INT 10
3769: LESS
3770: IFFALSE 3657
// end ;
3772: PPOPN 1
3774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3775: LD_INT 22
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 92
3787: PUSH
3788: LD_INT 80
3790: PUSH
3791: LD_INT 83
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 69
3811: PUSH
3812: LD_OWVAR 67
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3902
3823: GO 3825
3825: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 83
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: NEG
3838: PPUSH
3839: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3850: LD_INT 22
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 92
3862: PUSH
3863: LD_INT 80
3865: PUSH
3866: LD_INT 83
3868: PUSH
3869: LD_INT 10
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: NOT
3887: IFFALSE 3843
// RemoveSeeing ( 80 , 83 , 1 ) ;
3889: LD_INT 80
3891: PPUSH
3892: LD_INT 83
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: CALL_OW 331
// end ;
3902: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3903: LD_EXP 16
3907: PPUSH
3908: LD_EXP 17
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 6
3920: LESS
3921: PUSH
3922: LD_EXP 17
3926: PPUSH
3927: CALL_OW 302
3931: AND
3932: IFFALSE 4391
3934: GO 3936
3936: DISABLE
// begin ComWalk ( Bobby ) ;
3937: LD_EXP 17
3941: PPUSH
3942: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3946: LD_EXP 17
3950: PPUSH
3951: LD_EXP 16
3955: PPUSH
3956: CALL_OW 250
3960: PPUSH
3961: LD_EXP 16
3965: PPUSH
3966: CALL_OW 251
3970: PPUSH
3971: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3975: LD_INT 35
3977: PPUSH
3978: CALL_OW 67
// until See ( 4 , JMM ) ;
3982: LD_INT 4
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 292
3994: IFFALSE 3975
// InGameOn ;
3996: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4000: LD_EXP 16
4004: PPUSH
4005: LD_EXP 17
4009: PPUSH
4010: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4014: LD_EXP 7
4018: PUSH
4019: LD_EXP 18
4023: PPUSH
4024: CALL_OW 302
4028: AND
4029: PUSH
4030: LD_EXP 16
4034: PPUSH
4035: LD_EXP 18
4039: PPUSH
4040: CALL_OW 296
4044: PUSH
4045: LD_INT 10
4047: LESS
4048: AND
4049: IFFALSE 4094
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4051: LD_EXP 18
4055: PPUSH
4056: LD_EXP 16
4060: PPUSH
4061: CALL_OW 250
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 251
4075: PPUSH
4076: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_EXP 17
4089: PPUSH
4090: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_STRING D2-JMM-1
4101: PPUSH
4102: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4106: LD_INT 10
4108: PPUSH
4109: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4113: LD_EXP 17
4117: PPUSH
4118: LD_EXP 16
4122: PPUSH
4123: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4127: LD_EXP 17
4131: PPUSH
4132: LD_STRING D2-Bobby-1
4134: PPUSH
4135: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4139: LD_EXP 16
4143: PPUSH
4144: LD_STRING D2-JMM-2
4146: PPUSH
4147: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4151: LD_EXP 17
4155: PPUSH
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 250
4165: PPUSH
4166: LD_EXP 16
4170: PPUSH
4171: CALL_OW 251
4175: PPUSH
4176: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4180: LD_EXP 17
4184: PPUSH
4185: LD_STRING D2-Bobby-2
4187: PPUSH
4188: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4192: LD_EXP 16
4196: PPUSH
4197: LD_STRING D2-JMM-3
4199: PPUSH
4200: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4204: LD_EXP 17
4208: PPUSH
4209: LD_EXP 16
4213: PPUSH
4214: CALL_OW 119
// DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D2-Bobby-3
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4234: LD_EXP 16
4238: PPUSH
4239: LD_STRING D2-JMM-4
4241: PPUSH
4242: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4246: LD_EXP 17
4250: PPUSH
4251: LD_STRING D2-Bobby-4
4253: PPUSH
4254: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4258: LD_EXP 16
4262: PPUSH
4263: LD_STRING D2-JMM-5
4265: PPUSH
4266: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4270: LD_EXP 17
4274: PPUSH
4275: LD_STRING D2-Bobby-5
4277: PPUSH
4278: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4282: LD_EXP 16
4286: PPUSH
4287: LD_STRING D2-JMM-6
4289: PPUSH
4290: CALL_OW 88
// if not powell_contact then
4294: LD_EXP 5
4298: NOT
4299: IFFALSE 4325
// begin Say ( Bobby , D2-Bobby-6 ) ;
4301: LD_EXP 17
4305: PPUSH
4306: LD_STRING D2-Bobby-6
4308: PPUSH
4309: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4313: LD_EXP 16
4317: PPUSH
4318: LD_STRING D2-JMM-7
4320: PPUSH
4321: CALL_OW 88
// end ; DialogueOff ;
4325: CALL_OW 7
// InGameOff ;
4329: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4333: LD_EXP 17
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4345: LD_EXP 16
4349: PUSH
4350: LD_EXP 17
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PPUSH
4359: CALL_OW 139
// bobby_in_squad := true ;
4363: LD_ADDR_EXP 4
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4371: LD_EXP 5
4375: PUSH
4376: LD_EXP 7
4380: NOT
4381: AND
4382: IFFALSE 4391
// ChangeMissionObjectives ( M2b ) ;
4384: LD_STRING M2b
4386: PPUSH
4387: CALL_OW 337
// end ;
4391: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4392: LD_EXP 3
4396: PUSH
4397: LD_OWVAR 67
4401: PUSH
4402: LD_INT 3
4404: LESS
4405: AND
4406: IFFALSE 4440
4408: GO 4410
4410: DISABLE
// begin wait ( 1 1$00 ) ;
4411: LD_INT 2100
4413: PPUSH
4414: CALL_OW 67
// if not bobby_in_squad then
4418: LD_EXP 4
4422: NOT
4423: IFFALSE 4440
// ComMoveXY ( Bobby , 75 , 83 ) ;
4425: LD_EXP 17
4429: PPUSH
4430: LD_INT 75
4432: PPUSH
4433: LD_INT 83
4435: PPUSH
4436: CALL_OW 111
// end ;
4440: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4441: LD_EXP 7
4445: PUSH
4446: LD_EXP 4
4450: NOT
4451: AND
4452: IFFALSE 4481
4454: GO 4456
4456: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4457: LD_EXP 17
4461: PPUSH
4462: LD_INT 105
4464: PPUSH
4465: LD_INT 97
4467: PPUSH
4468: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4472: LD_EXP 17
4476: PPUSH
4477: CALL_OW 197
// end ;
4481: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4482: LD_EXP 16
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: CALL_OW 308
4494: PUSH
4495: LD_EXP 16
4499: PPUSH
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 296
4509: PUSH
4510: LD_INT 7
4512: LESS
4513: AND
4514: PUSH
4515: LD_EXP 4
4519: AND
4520: IFFALSE 4567
4522: GO 4524
4524: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4525: LD_EXP 16
4529: PUSH
4530: LD_EXP 17
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4543: LD_EXP 16
4547: PPUSH
4548: LD_STRING D2a-JMM-1
4550: PPUSH
4551: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4555: LD_EXP 17
4559: PPUSH
4560: LD_STRING D2a-Bobby-1
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4568: LD_EXP 15
4572: PUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_EXP 16
4580: PPUSH
4581: CALL_OW 292
4585: NOT
4586: AND
4587: IFFALSE 4758
4589: GO 4591
4591: DISABLE
// begin wait ( 0 0$5 ) ;
4592: LD_INT 175
4594: PPUSH
4595: CALL_OW 67
// InGameOn ;
4599: CALL_OW 8
// DialogueOn ;
4603: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4607: LD_EXP 19
4611: PPUSH
4612: LD_STRING D3-Pow-1
4614: PPUSH
4615: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4619: LD_EXP 16
4623: PPUSH
4624: LD_STRING D3-JMM-1
4626: PPUSH
4627: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4631: LD_EXP 19
4635: PPUSH
4636: LD_STRING D3-Pow-2
4638: PPUSH
4639: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4643: LD_EXP 16
4647: PPUSH
4648: LD_STRING D3-JMM-2
4650: PPUSH
4651: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4655: LD_EXP 19
4659: PPUSH
4660: LD_STRING D3-Pow-3
4662: PPUSH
4663: CALL_OW 586
// DialogueOff ;
4667: CALL_OW 7
// InGameOff ;
4671: CALL_OW 9
// powell_contact := true ;
4675: LD_ADDR_EXP 5
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4683: LD_INT 10
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 424
// uc_side := 4 ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_INT 4
4700: ST_TO_ADDR
// uc_nation := 1 ;
4701: LD_ADDR_OWVAR 21
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4709: LD_ADDR_EXP 19
4713: PUSH
4714: LD_STRING Powell
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_STRING 
4722: PPUSH
4723: CALL 25633 0 3
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 586
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 586
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5606
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: LD_INT 150
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_OWVAR 67
5404: ARRAY
5405: ST_TO_ADDR
// for i in russian_meta_guards do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 24
5415: PUSH
5416: FOR_IN
5417: IFFALSE 5457
// if IsOk ( i ) then
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5455
// SetLives ( i , GetLives ( i ) - hp ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 256
5444: PUSH
5445: LD_VAR 0 2
5449: MINUS
5450: PPUSH
5451: CALL_OW 234
5455: GO 5416
5457: POP
5458: POP
// DialogueOn ;
5459: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5463: LD_EXP 24
5467: PUSH
5468: LD_EXP 24
5472: ARRAY
5473: PPUSH
5474: LD_STRING D6-FRus1-1
5476: PPUSH
5477: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5481: LD_EXP 16
5485: PPUSH
5486: LD_STRING D6-JMM-1
5488: PPUSH
5489: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 302
5502: PUSH
5503: LD_EXP 7
5507: AND
5508: IFFALSE 5522
// Say ( Cyrus , D6-Cyrus-1 ) ;
5510: LD_EXP 18
5514: PPUSH
5515: LD_STRING D6-Cyrus-1
5517: PPUSH
5518: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5522: LD_EXP 17
5526: PPUSH
5527: CALL_OW 302
5531: PUSH
5532: LD_EXP 4
5536: AND
5537: IFFALSE 5551
// Say ( Bobby , D6-Bobby-1 ) ;
5539: LD_EXP 17
5543: PPUSH
5544: LD_STRING D6-Bobby-1
5546: PPUSH
5547: CALL_OW 88
// DialogueOff ;
5551: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5555: LD_INT 140
5557: PUSH
5558: LD_INT 105
5560: PUSH
5561: LD_INT 70
5563: PUSH
5564: LD_INT 70
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PPUSH
5579: CALL_OW 67
// meta_action := true ;
5583: LD_ADDR_EXP 10
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5591: LD_EXP 24
5595: PPUSH
5596: LD_INT 94
5598: PPUSH
5599: LD_INT 8
5601: PPUSH
5602: CALL_OW 114
// end ;
5606: PPOPN 2
5608: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5609: LD_EXP 16
5613: PPUSH
5614: LD_INT 93
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 297
5624: PUSH
5625: LD_INT 5
5627: LESS
5628: PUSH
5629: LD_INT 22
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: LD_INT 1
5646: GREATER
5647: AND
5648: IFFALSE 5665
5650: GO 5652
5652: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5653: LD_EXP 16
5657: PPUSH
5658: LD_STRING D6a-JMM-1
5660: PPUSH
5661: CALL_OW 88
5665: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5666: LD_EXP 17
5670: PPUSH
5671: LD_INT 10
5673: PPUSH
5674: CALL_OW 308
5678: IFFALSE 5727
5680: GO 5682
5682: DISABLE
// begin bobby_saved := true ;
5683: LD_ADDR_EXP 12
5687: PUSH
5688: LD_INT 1
5690: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5691: LD_EXP 17
5695: PPUSH
5696: CALL_OW 256
5700: PPUSH
5701: LD_STRING 01_BobbyLifePoints_1
5703: PPUSH
5704: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5708: LD_EXP 17
5712: PPUSH
5713: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5717: LD_STRING Bobby
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: CALL_OW 101
// end ;
5727: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5728: LD_EXP 18
5732: PPUSH
5733: LD_INT 10
5735: PPUSH
5736: CALL_OW 308
5740: IFFALSE 5789
5742: GO 5744
5744: DISABLE
// begin cyrus_saved := true ;
5745: LD_ADDR_EXP 13
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5753: LD_EXP 18
5757: PPUSH
5758: CALL_OW 256
5762: PPUSH
5763: LD_STRING 01_CyrusLifePoints_1
5765: PPUSH
5766: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5770: LD_EXP 18
5774: PPUSH
5775: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5779: LD_STRING Cyrus
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL_OW 101
// end ;
5789: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5790: LD_EXP 16
5794: PPUSH
5795: LD_INT 10
5797: PPUSH
5798: CALL_OW 308
5802: IFFALSE 6410
5804: GO 5806
5806: DISABLE
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
// begin if macmilan_use_radio then
5815: LD_EXP 6
5819: IFFALSE 5828
// SetAchievement ( ACH_RADIO ) ;
5821: LD_STRING ACH_RADIO
5823: PPUSH
5824: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5828: LD_EXP 13
5832: NOT
5833: PUSH
5834: LD_EXP 7
5838: AND
5839: PUSH
5840: LD_EXP 18
5844: PPUSH
5845: CALL_OW 302
5849: AND
5850: PUSH
5851: LD_EXP 12
5855: NOT
5856: PUSH
5857: LD_EXP 4
5861: AND
5862: PUSH
5863: LD_EXP 17
5867: PPUSH
5868: CALL_OW 302
5872: AND
5873: OR
5874: IFFALSE 5915
// case Query ( Q2 ) of 1 :
5876: LD_STRING Q2
5878: PPUSH
5879: CALL_OW 97
5883: PUSH
5884: LD_INT 1
5886: DOUBLE
5887: EQUAL
5888: IFTRUE 5892
5890: GO 5903
5892: POP
// wait_for_them := true ; 2 :
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
5901: GO 5915
5903: LD_INT 2
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5914
5911: POP
// ; end ;
5912: GO 5915
5914: POP
// if wait_for_them then
5915: LD_VAR 0 3
5919: IFFALSE 6032
// repeat wait ( 0 0$01 ) ;
5921: LD_INT 35
5923: PPUSH
5924: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5928: LD_EXP 13
5932: PUSH
5933: LD_EXP 12
5937: AND
5938: PUSH
5939: LD_EXP 13
5943: PUSH
5944: LD_EXP 4
5948: NOT
5949: PUSH
5950: LD_EXP 17
5954: PPUSH
5955: CALL_OW 303
5959: OR
5960: PUSH
5961: LD_EXP 17
5965: PPUSH
5966: CALL_OW 301
5970: OR
5971: AND
5972: OR
5973: PUSH
5974: LD_EXP 12
5978: PUSH
5979: LD_EXP 7
5983: NOT
5984: PUSH
5985: LD_EXP 18
5989: PPUSH
5990: CALL_OW 303
5994: OR
5995: PUSH
5996: LD_EXP 18
6000: PPUSH
6001: CALL_OW 301
6005: OR
6006: AND
6007: OR
6008: PUSH
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 301
6018: PUSH
6019: LD_EXP 18
6023: PPUSH
6024: CALL_OW 301
6028: AND
6029: OR
6030: IFFALSE 5921
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6032: LD_EXP 16
6036: PPUSH
6037: CALL_OW 256
6041: PPUSH
6042: LD_STRING 01_JMMLifePoints_1
6044: PPUSH
6045: CALL_OW 39
// RemoveUnit ( JMM ) ;
6049: LD_EXP 16
6053: PPUSH
6054: CALL_OW 64
// to_reward := [ JMM ] ;
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: LD_EXP 16
6067: PUSH
6068: EMPTY
6069: LIST
6070: ST_TO_ADDR
// if bobby_saved then
6071: LD_EXP 12
6075: IFFALSE 6093
// to_reward := to_reward ^ Bobby ;
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_VAR 0 2
6086: PUSH
6087: LD_EXP 17
6091: ADD
6092: ST_TO_ADDR
// if cyrus_saved then
6093: LD_EXP 13
6097: IFFALSE 6115
// to_reward := to_reward ^ Cyrus ;
6099: LD_ADDR_VAR 0 2
6103: PUSH
6104: LD_VAR 0 2
6108: PUSH
6109: LD_EXP 18
6113: ADD
6114: ST_TO_ADDR
// m1 := true ;
6115: LD_ADDR_VAR 0 4
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// m2 := bobby_saved ;
6123: LD_ADDR_VAR 0 5
6127: PUSH
6128: LD_EXP 12
6132: ST_TO_ADDR
// m3 := cyrus_saved ;
6133: LD_ADDR_VAR 0 6
6137: PUSH
6138: LD_EXP 13
6142: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6143: LD_STRING JMM
6145: PPUSH
6146: LD_INT 1
6148: PPUSH
6149: CALL_OW 101
// if not bobby_in_squad then
6153: LD_EXP 4
6157: NOT
6158: IFFALSE 6171
// AddMedal ( Bobby , - 1 ) ;
6160: LD_STRING Bobby
6162: PPUSH
6163: LD_INT 1
6165: NEG
6166: PPUSH
6167: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6171: LD_EXP 12
6175: NOT
6176: PUSH
6177: LD_EXP 17
6181: PPUSH
6182: CALL_OW 303
6186: PUSH
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 301
6196: OR
6197: AND
6198: IFFALSE 6211
// AddMedal ( Bobby , - 2 ) ;
6200: LD_STRING Bobby
6202: PPUSH
6203: LD_INT 2
6205: NEG
6206: PPUSH
6207: CALL_OW 101
// if not cyrus_in_squad then
6211: LD_EXP 7
6215: NOT
6216: IFFALSE 6229
// AddMedal ( Cyrus , - 1 ) ;
6218: LD_STRING Cyrus
6220: PPUSH
6221: LD_INT 1
6223: NEG
6224: PPUSH
6225: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6229: LD_EXP 13
6233: NOT
6234: PUSH
6235: LD_EXP 18
6239: PPUSH
6240: CALL_OW 303
6244: PUSH
6245: LD_EXP 18
6249: PPUSH
6250: CALL_OW 301
6254: OR
6255: AND
6256: IFFALSE 6269
// AddMedal ( Cyrus , - 2 ) ;
6258: LD_STRING Cyrus
6260: PPUSH
6261: LD_INT 2
6263: NEG
6264: PPUSH
6265: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6269: LD_OWVAR 67
6273: PUSH
6274: LD_INT 3
6276: GREATEREQUAL
6277: PUSH
6278: LD_VAR 0 4
6282: AND
6283: PUSH
6284: LD_VAR 0 5
6288: AND
6289: PUSH
6290: LD_VAR 0 6
6294: AND
6295: IFFALSE 6307
// SetAchievementEX ( ACH_AMER , 1 ) ;
6297: LD_STRING ACH_AMER
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 564
// GiveMedals ( MAIN ) ;
6307: LD_STRING MAIN
6309: PPUSH
6310: CALL_OW 102
// RewardPeople ( to_reward ) ;
6314: LD_VAR 0 2
6318: PPUSH
6319: CALL_OW 43
// if bobby_saved then
6323: LD_EXP 12
6327: IFFALSE 6347
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_EXP 2
6338: PUSH
6339: LD_STRING Bobby
6341: STR
6342: PPUSH
6343: CALL_OW 38
// if cyrus_saved then
6347: LD_EXP 13
6351: IFFALSE 6371
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6353: LD_EXP 18
6357: PPUSH
6358: LD_EXP 2
6362: PUSH
6363: LD_STRING Cyrus
6365: STR
6366: PPUSH
6367: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6371: LD_EXP 16
6375: PPUSH
6376: LD_EXP 2
6380: PUSH
6381: LD_STRING JMM
6383: STR
6384: PPUSH
6385: CALL_OW 38
// if tick <= 3 3$00 then
6389: LD_OWVAR 1
6393: PUSH
6394: LD_INT 6300
6396: LESSEQUAL
6397: IFFALSE 6406
// SetAchievement ( ACH_ASPEED_1 ) ;
6399: LD_STRING ACH_ASPEED_1
6401: PPUSH
6402: CALL_OW 543
// YouWin ;
6406: CALL_OW 103
// end ; end_of_file
6410: PPOPN 6
6412: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
6413: LD_VAR 0 1
6417: PUSH
6418: LD_EXP 16
6422: EQUAL
6423: IFFALSE 6432
// YouLost ( JMM ) ;
6425: LD_STRING JMM
6427: PPUSH
6428: CALL_OW 104
// end ;
6432: PPOPN 1
6434: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6435: LD_VAR 0 1
6439: PPUSH
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL 20939 0 2
// end ;
6449: PPOPN 2
6451: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: CALL 20817 0 1
// if un = JMM then
6461: LD_VAR 0 1
6465: PUSH
6466: LD_EXP 16
6470: EQUAL
6471: IFFALSE 6480
// YouLost ( JMM ) ;
6473: LD_STRING JMM
6475: PPUSH
6476: CALL_OW 104
// end ; end_of_file end_of_file
6480: PPOPN 1
6482: END
// every 0 0$1 do
6483: GO 6485
6485: DISABLE
// begin enable ;
6486: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
6487: LD_STRING updateTimer(
6489: PUSH
6490: LD_OWVAR 1
6494: STR
6495: PUSH
6496: LD_STRING );
6498: STR
6499: PPUSH
6500: CALL_OW 559
// end ;
6504: END
// export function SOS_MapStart ( ) ; begin
6505: LD_INT 0
6507: PPUSH
// if streamModeActive then
6508: LD_EXP 27
6512: IFFALSE 6521
// DefineStreamItems ( true ) ;
6514: LD_INT 1
6516: PPUSH
6517: CALL 8171 0 1
// UpdateFactoryWaypoints ( ) ;
6521: CALL 21755 0 0
// end ;
6525: LD_VAR 0 1
6529: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6530: LD_INT 0
6532: PPUSH
// if p2 = 100 then
6533: LD_VAR 0 2
6537: PUSH
6538: LD_INT 100
6540: EQUAL
6541: IFFALSE 7544
// begin if not StreamModeActive then
6543: LD_EXP 27
6547: NOT
6548: IFFALSE 6558
// StreamModeActive := true ;
6550: LD_ADDR_EXP 27
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// if p3 = 0 then
6558: LD_VAR 0 3
6562: PUSH
6563: LD_INT 0
6565: EQUAL
6566: IFFALSE 6572
// InitStreamMode ;
6568: CALL 7707 0 0
// if p3 = 1 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 1
6579: EQUAL
6580: IFFALSE 6590
// sRocket := true ;
6582: LD_ADDR_EXP 32
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 2 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 2
6597: EQUAL
6598: IFFALSE 6608
// sSpeed := true ;
6600: LD_ADDR_EXP 31
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 3 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 3
6615: EQUAL
6616: IFFALSE 6626
// sEngine := true ;
6618: LD_ADDR_EXP 33
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 4 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 4
6633: EQUAL
6634: IFFALSE 6644
// sSpec := true ;
6636: LD_ADDR_EXP 30
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 5 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 5
6651: EQUAL
6652: IFFALSE 6662
// sLevel := true ;
6654: LD_ADDR_EXP 34
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 6 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 6
6669: EQUAL
6670: IFFALSE 6680
// sArmoury := true ;
6672: LD_ADDR_EXP 35
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 7 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 7
6687: EQUAL
6688: IFFALSE 6698
// sRadar := true ;
6690: LD_ADDR_EXP 36
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 8 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 8
6705: EQUAL
6706: IFFALSE 6716
// sBunker := true ;
6708: LD_ADDR_EXP 37
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 9 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 9
6723: EQUAL
6724: IFFALSE 6734
// sHack := true ;
6726: LD_ADDR_EXP 38
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 10 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 10
6741: EQUAL
6742: IFFALSE 6752
// sFire := true ;
6744: LD_ADDR_EXP 39
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 11 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 11
6759: EQUAL
6760: IFFALSE 6770
// sRefresh := true ;
6762: LD_ADDR_EXP 40
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 12 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 12
6777: EQUAL
6778: IFFALSE 6788
// sExp := true ;
6780: LD_ADDR_EXP 41
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 13 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 13
6795: EQUAL
6796: IFFALSE 6806
// sDepot := true ;
6798: LD_ADDR_EXP 42
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 14 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 14
6813: EQUAL
6814: IFFALSE 6824
// sFlag := true ;
6816: LD_ADDR_EXP 43
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 15 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 15
6831: EQUAL
6832: IFFALSE 6842
// sKamikadze := true ;
6834: LD_ADDR_EXP 51
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 16 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 16
6849: EQUAL
6850: IFFALSE 6860
// sTroll := true ;
6852: LD_ADDR_EXP 52
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 17 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 17
6867: EQUAL
6868: IFFALSE 6878
// sSlow := true ;
6870: LD_ADDR_EXP 53
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 18 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 18
6885: EQUAL
6886: IFFALSE 6896
// sLack := true ;
6888: LD_ADDR_EXP 54
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 19 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 19
6903: EQUAL
6904: IFFALSE 6914
// sTank := true ;
6906: LD_ADDR_EXP 56
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 20 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 20
6921: EQUAL
6922: IFFALSE 6932
// sRemote := true ;
6924: LD_ADDR_EXP 57
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 21 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 21
6939: EQUAL
6940: IFFALSE 6950
// sPowell := true ;
6942: LD_ADDR_EXP 58
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 22 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 22
6957: EQUAL
6958: IFFALSE 6968
// sTeleport := true ;
6960: LD_ADDR_EXP 61
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 23 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 23
6975: EQUAL
6976: IFFALSE 6986
// sOilTower := true ;
6978: LD_ADDR_EXP 63
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 24 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 24
6993: EQUAL
6994: IFFALSE 7004
// sShovel := true ;
6996: LD_ADDR_EXP 64
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 25 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 25
7011: EQUAL
7012: IFFALSE 7022
// sSheik := true ;
7014: LD_ADDR_EXP 65
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 26 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 26
7029: EQUAL
7030: IFFALSE 7040
// sEarthquake := true ;
7032: LD_ADDR_EXP 67
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// if p3 = 27 then
7040: LD_VAR 0 3
7044: PUSH
7045: LD_INT 27
7047: EQUAL
7048: IFFALSE 7058
// sAI := true ;
7050: LD_ADDR_EXP 68
7054: PUSH
7055: LD_INT 1
7057: ST_TO_ADDR
// if p3 = 28 then
7058: LD_VAR 0 3
7062: PUSH
7063: LD_INT 28
7065: EQUAL
7066: IFFALSE 7076
// sCargo := true ;
7068: LD_ADDR_EXP 71
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
// if p3 = 29 then
7076: LD_VAR 0 3
7080: PUSH
7081: LD_INT 29
7083: EQUAL
7084: IFFALSE 7094
// sDLaser := true ;
7086: LD_ADDR_EXP 72
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// if p3 = 30 then
7094: LD_VAR 0 3
7098: PUSH
7099: LD_INT 30
7101: EQUAL
7102: IFFALSE 7112
// sExchange := true ;
7104: LD_ADDR_EXP 73
7108: PUSH
7109: LD_INT 1
7111: ST_TO_ADDR
// if p3 = 31 then
7112: LD_VAR 0 3
7116: PUSH
7117: LD_INT 31
7119: EQUAL
7120: IFFALSE 7130
// sFac := true ;
7122: LD_ADDR_EXP 74
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
// if p3 = 32 then
7130: LD_VAR 0 3
7134: PUSH
7135: LD_INT 32
7137: EQUAL
7138: IFFALSE 7148
// sPower := true ;
7140: LD_ADDR_EXP 75
7144: PUSH
7145: LD_INT 1
7147: ST_TO_ADDR
// if p3 = 33 then
7148: LD_VAR 0 3
7152: PUSH
7153: LD_INT 33
7155: EQUAL
7156: IFFALSE 7166
// sRandom := true ;
7158: LD_ADDR_EXP 76
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// if p3 = 34 then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 34
7173: EQUAL
7174: IFFALSE 7184
// sShield := true ;
7176: LD_ADDR_EXP 77
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// if p3 = 35 then
7184: LD_VAR 0 3
7188: PUSH
7189: LD_INT 35
7191: EQUAL
7192: IFFALSE 7202
// sTime := true ;
7194: LD_ADDR_EXP 78
7198: PUSH
7199: LD_INT 1
7201: ST_TO_ADDR
// if p3 = 36 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 36
7209: EQUAL
7210: IFFALSE 7220
// sTools := true ;
7212: LD_ADDR_EXP 79
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// if p3 = 101 then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 101
7227: EQUAL
7228: IFFALSE 7238
// sSold := true ;
7230: LD_ADDR_EXP 44
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 102 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 102
7245: EQUAL
7246: IFFALSE 7256
// sDiff := true ;
7248: LD_ADDR_EXP 45
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// if p3 = 103 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 103
7263: EQUAL
7264: IFFALSE 7274
// sFog := true ;
7266: LD_ADDR_EXP 48
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// if p3 = 104 then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 104
7281: EQUAL
7282: IFFALSE 7292
// sReset := true ;
7284: LD_ADDR_EXP 49
7288: PUSH
7289: LD_INT 1
7291: ST_TO_ADDR
// if p3 = 105 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 105
7299: EQUAL
7300: IFFALSE 7310
// sSun := true ;
7302: LD_ADDR_EXP 50
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// if p3 = 106 then
7310: LD_VAR 0 3
7314: PUSH
7315: LD_INT 106
7317: EQUAL
7318: IFFALSE 7328
// sTiger := true ;
7320: LD_ADDR_EXP 46
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// if p3 = 107 then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 107
7335: EQUAL
7336: IFFALSE 7346
// sBomb := true ;
7338: LD_ADDR_EXP 47
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// if p3 = 108 then
7346: LD_VAR 0 3
7350: PUSH
7351: LD_INT 108
7353: EQUAL
7354: IFFALSE 7364
// sWound := true ;
7356: LD_ADDR_EXP 55
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// if p3 = 109 then
7364: LD_VAR 0 3
7368: PUSH
7369: LD_INT 109
7371: EQUAL
7372: IFFALSE 7382
// sBetray := true ;
7374: LD_ADDR_EXP 59
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// if p3 = 110 then
7382: LD_VAR 0 3
7386: PUSH
7387: LD_INT 110
7389: EQUAL
7390: IFFALSE 7400
// sContamin := true ;
7392: LD_ADDR_EXP 60
7396: PUSH
7397: LD_INT 1
7399: ST_TO_ADDR
// if p3 = 111 then
7400: LD_VAR 0 3
7404: PUSH
7405: LD_INT 111
7407: EQUAL
7408: IFFALSE 7418
// sOil := true ;
7410: LD_ADDR_EXP 62
7414: PUSH
7415: LD_INT 1
7417: ST_TO_ADDR
// if p3 = 112 then
7418: LD_VAR 0 3
7422: PUSH
7423: LD_INT 112
7425: EQUAL
7426: IFFALSE 7436
// sStu := true ;
7428: LD_ADDR_EXP 66
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if p3 = 113 then
7436: LD_VAR 0 3
7440: PUSH
7441: LD_INT 113
7443: EQUAL
7444: IFFALSE 7454
// sBazooka := true ;
7446: LD_ADDR_EXP 69
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// if p3 = 114 then
7454: LD_VAR 0 3
7458: PUSH
7459: LD_INT 114
7461: EQUAL
7462: IFFALSE 7472
// sMortar := true ;
7464: LD_ADDR_EXP 70
7468: PUSH
7469: LD_INT 1
7471: ST_TO_ADDR
// if p3 = 115 then
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 115
7479: EQUAL
7480: IFFALSE 7490
// sRanger := true ;
7482: LD_ADDR_EXP 80
7486: PUSH
7487: LD_INT 1
7489: ST_TO_ADDR
// if p3 = 116 then
7490: LD_VAR 0 3
7494: PUSH
7495: LD_INT 116
7497: EQUAL
7498: IFFALSE 7508
// sComputer := true ;
7500: LD_ADDR_EXP 81
7504: PUSH
7505: LD_INT 1
7507: ST_TO_ADDR
// if p3 = 117 then
7508: LD_VAR 0 3
7512: PUSH
7513: LD_INT 117
7515: EQUAL
7516: IFFALSE 7526
// s30 := true ;
7518: LD_ADDR_EXP 82
7522: PUSH
7523: LD_INT 1
7525: ST_TO_ADDR
// if p3 = 118 then
7526: LD_VAR 0 3
7530: PUSH
7531: LD_INT 118
7533: EQUAL
7534: IFFALSE 7544
// s60 := true ;
7536: LD_ADDR_EXP 83
7540: PUSH
7541: LD_INT 1
7543: ST_TO_ADDR
// end ; if p2 = 101 then
7544: LD_VAR 0 2
7548: PUSH
7549: LD_INT 101
7551: EQUAL
7552: IFFALSE 7680
// begin case p3 of 1 :
7554: LD_VAR 0 3
7558: PUSH
7559: LD_INT 1
7561: DOUBLE
7562: EQUAL
7563: IFTRUE 7567
7565: GO 7574
7567: POP
// hHackUnlimitedResources ; 2 :
7568: CALL 19778 0 0
7572: GO 7680
7574: LD_INT 2
7576: DOUBLE
7577: EQUAL
7578: IFTRUE 7582
7580: GO 7589
7582: POP
// hHackSetLevel10 ; 3 :
7583: CALL 19911 0 0
7587: GO 7680
7589: LD_INT 3
7591: DOUBLE
7592: EQUAL
7593: IFTRUE 7597
7595: GO 7604
7597: POP
// hHackSetLevel10YourUnits ; 4 :
7598: CALL 19996 0 0
7602: GO 7680
7604: LD_INT 4
7606: DOUBLE
7607: EQUAL
7608: IFTRUE 7612
7610: GO 7619
7612: POP
// hHackInvincible ; 5 :
7613: CALL 20444 0 0
7617: GO 7680
7619: LD_INT 5
7621: DOUBLE
7622: EQUAL
7623: IFTRUE 7627
7625: GO 7634
7627: POP
// hHackInvisible ; 6 :
7628: CALL 20555 0 0
7632: GO 7680
7634: LD_INT 6
7636: DOUBLE
7637: EQUAL
7638: IFTRUE 7642
7640: GO 7649
7642: POP
// hHackChangeYourSide ; 7 :
7643: CALL 20612 0 0
7647: GO 7680
7649: LD_INT 7
7651: DOUBLE
7652: EQUAL
7653: IFTRUE 7657
7655: GO 7664
7657: POP
// hHackChangeUnitSide ; 8 :
7658: CALL 20654 0 0
7662: GO 7680
7664: LD_INT 8
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7679
7672: POP
// hHackFog ; end ;
7673: CALL 20755 0 0
7677: GO 7680
7679: POP
// end ; end ;
7680: LD_VAR 0 7
7684: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7685: GO 7687
7687: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7688: LD_STRING initStreamRollete();
7690: PPUSH
7691: CALL_OW 559
// InitStreamMode ;
7695: CALL 7707 0 0
// DefineStreamItems ( false ) ;
7699: LD_INT 0
7701: PPUSH
7702: CALL 8171 0 1
// end ;
7706: END
// function InitStreamMode ; begin
7707: LD_INT 0
7709: PPUSH
// streamModeActive := false ;
7710: LD_ADDR_EXP 27
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// normalCounter := 36 ;
7718: LD_ADDR_EXP 28
7722: PUSH
7723: LD_INT 36
7725: ST_TO_ADDR
// hardcoreCounter := 18 ;
7726: LD_ADDR_EXP 29
7730: PUSH
7731: LD_INT 18
7733: ST_TO_ADDR
// sRocket := false ;
7734: LD_ADDR_EXP 32
7738: PUSH
7739: LD_INT 0
7741: ST_TO_ADDR
// sSpeed := false ;
7742: LD_ADDR_EXP 31
7746: PUSH
7747: LD_INT 0
7749: ST_TO_ADDR
// sEngine := false ;
7750: LD_ADDR_EXP 33
7754: PUSH
7755: LD_INT 0
7757: ST_TO_ADDR
// sSpec := false ;
7758: LD_ADDR_EXP 30
7762: PUSH
7763: LD_INT 0
7765: ST_TO_ADDR
// sLevel := false ;
7766: LD_ADDR_EXP 34
7770: PUSH
7771: LD_INT 0
7773: ST_TO_ADDR
// sArmoury := false ;
7774: LD_ADDR_EXP 35
7778: PUSH
7779: LD_INT 0
7781: ST_TO_ADDR
// sRadar := false ;
7782: LD_ADDR_EXP 36
7786: PUSH
7787: LD_INT 0
7789: ST_TO_ADDR
// sBunker := false ;
7790: LD_ADDR_EXP 37
7794: PUSH
7795: LD_INT 0
7797: ST_TO_ADDR
// sHack := false ;
7798: LD_ADDR_EXP 38
7802: PUSH
7803: LD_INT 0
7805: ST_TO_ADDR
// sFire := false ;
7806: LD_ADDR_EXP 39
7810: PUSH
7811: LD_INT 0
7813: ST_TO_ADDR
// sRefresh := false ;
7814: LD_ADDR_EXP 40
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// sExp := false ;
7822: LD_ADDR_EXP 41
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// sDepot := false ;
7830: LD_ADDR_EXP 42
7834: PUSH
7835: LD_INT 0
7837: ST_TO_ADDR
// sFlag := false ;
7838: LD_ADDR_EXP 43
7842: PUSH
7843: LD_INT 0
7845: ST_TO_ADDR
// sKamikadze := false ;
7846: LD_ADDR_EXP 51
7850: PUSH
7851: LD_INT 0
7853: ST_TO_ADDR
// sTroll := false ;
7854: LD_ADDR_EXP 52
7858: PUSH
7859: LD_INT 0
7861: ST_TO_ADDR
// sSlow := false ;
7862: LD_ADDR_EXP 53
7866: PUSH
7867: LD_INT 0
7869: ST_TO_ADDR
// sLack := false ;
7870: LD_ADDR_EXP 54
7874: PUSH
7875: LD_INT 0
7877: ST_TO_ADDR
// sTank := false ;
7878: LD_ADDR_EXP 56
7882: PUSH
7883: LD_INT 0
7885: ST_TO_ADDR
// sRemote := false ;
7886: LD_ADDR_EXP 57
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// sPowell := false ;
7894: LD_ADDR_EXP 58
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// sTeleport := false ;
7902: LD_ADDR_EXP 61
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// sOilTower := false ;
7910: LD_ADDR_EXP 63
7914: PUSH
7915: LD_INT 0
7917: ST_TO_ADDR
// sShovel := false ;
7918: LD_ADDR_EXP 64
7922: PUSH
7923: LD_INT 0
7925: ST_TO_ADDR
// sSheik := false ;
7926: LD_ADDR_EXP 65
7930: PUSH
7931: LD_INT 0
7933: ST_TO_ADDR
// sEarthquake := false ;
7934: LD_ADDR_EXP 67
7938: PUSH
7939: LD_INT 0
7941: ST_TO_ADDR
// sAI := false ;
7942: LD_ADDR_EXP 68
7946: PUSH
7947: LD_INT 0
7949: ST_TO_ADDR
// sCargo := false ;
7950: LD_ADDR_EXP 71
7954: PUSH
7955: LD_INT 0
7957: ST_TO_ADDR
// sDLaser := false ;
7958: LD_ADDR_EXP 72
7962: PUSH
7963: LD_INT 0
7965: ST_TO_ADDR
// sExchange := false ;
7966: LD_ADDR_EXP 73
7970: PUSH
7971: LD_INT 0
7973: ST_TO_ADDR
// sFac := false ;
7974: LD_ADDR_EXP 74
7978: PUSH
7979: LD_INT 0
7981: ST_TO_ADDR
// sPower := false ;
7982: LD_ADDR_EXP 75
7986: PUSH
7987: LD_INT 0
7989: ST_TO_ADDR
// sRandom := false ;
7990: LD_ADDR_EXP 76
7994: PUSH
7995: LD_INT 0
7997: ST_TO_ADDR
// sShield := false ;
7998: LD_ADDR_EXP 77
8002: PUSH
8003: LD_INT 0
8005: ST_TO_ADDR
// sTime := false ;
8006: LD_ADDR_EXP 78
8010: PUSH
8011: LD_INT 0
8013: ST_TO_ADDR
// sTools := false ;
8014: LD_ADDR_EXP 79
8018: PUSH
8019: LD_INT 0
8021: ST_TO_ADDR
// sSold := false ;
8022: LD_ADDR_EXP 44
8026: PUSH
8027: LD_INT 0
8029: ST_TO_ADDR
// sDiff := false ;
8030: LD_ADDR_EXP 45
8034: PUSH
8035: LD_INT 0
8037: ST_TO_ADDR
// sFog := false ;
8038: LD_ADDR_EXP 48
8042: PUSH
8043: LD_INT 0
8045: ST_TO_ADDR
// sReset := false ;
8046: LD_ADDR_EXP 49
8050: PUSH
8051: LD_INT 0
8053: ST_TO_ADDR
// sSun := false ;
8054: LD_ADDR_EXP 50
8058: PUSH
8059: LD_INT 0
8061: ST_TO_ADDR
// sTiger := false ;
8062: LD_ADDR_EXP 46
8066: PUSH
8067: LD_INT 0
8069: ST_TO_ADDR
// sBomb := false ;
8070: LD_ADDR_EXP 47
8074: PUSH
8075: LD_INT 0
8077: ST_TO_ADDR
// sWound := false ;
8078: LD_ADDR_EXP 55
8082: PUSH
8083: LD_INT 0
8085: ST_TO_ADDR
// sBetray := false ;
8086: LD_ADDR_EXP 59
8090: PUSH
8091: LD_INT 0
8093: ST_TO_ADDR
// sContamin := false ;
8094: LD_ADDR_EXP 60
8098: PUSH
8099: LD_INT 0
8101: ST_TO_ADDR
// sOil := false ;
8102: LD_ADDR_EXP 62
8106: PUSH
8107: LD_INT 0
8109: ST_TO_ADDR
// sStu := false ;
8110: LD_ADDR_EXP 66
8114: PUSH
8115: LD_INT 0
8117: ST_TO_ADDR
// sBazooka := false ;
8118: LD_ADDR_EXP 69
8122: PUSH
8123: LD_INT 0
8125: ST_TO_ADDR
// sMortar := false ;
8126: LD_ADDR_EXP 70
8130: PUSH
8131: LD_INT 0
8133: ST_TO_ADDR
// sRanger := false ;
8134: LD_ADDR_EXP 80
8138: PUSH
8139: LD_INT 0
8141: ST_TO_ADDR
// sComputer := false ;
8142: LD_ADDR_EXP 81
8146: PUSH
8147: LD_INT 0
8149: ST_TO_ADDR
// s30 := false ;
8150: LD_ADDR_EXP 82
8154: PUSH
8155: LD_INT 0
8157: ST_TO_ADDR
// s60 := false ;
8158: LD_ADDR_EXP 83
8162: PUSH
8163: LD_INT 0
8165: ST_TO_ADDR
// end ;
8166: LD_VAR 0 1
8170: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8171: LD_INT 0
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
// result := [ ] ;
8180: LD_ADDR_VAR 0 2
8184: PUSH
8185: EMPTY
8186: ST_TO_ADDR
// if campaign_id = 1 then
8187: LD_OWVAR 69
8191: PUSH
8192: LD_INT 1
8194: EQUAL
8195: IFFALSE 11361
// begin case mission_number of 1 :
8197: LD_OWVAR 70
8201: PUSH
8202: LD_INT 1
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8286
8210: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: LD_INT 2
8218: PUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 11
8224: PUSH
8225: LD_INT 12
8227: PUSH
8228: LD_INT 15
8230: PUSH
8231: LD_INT 16
8233: PUSH
8234: LD_INT 22
8236: PUSH
8237: LD_INT 23
8239: PUSH
8240: LD_INT 26
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_INT 101
8256: PUSH
8257: LD_INT 102
8259: PUSH
8260: LD_INT 106
8262: PUSH
8263: LD_INT 116
8265: PUSH
8266: LD_INT 117
8268: PUSH
8269: LD_INT 118
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: ST_TO_ADDR
8284: GO 11359
8286: LD_INT 2
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8294
8292: GO 8378
8294: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8295: LD_ADDR_VAR 0 2
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 11
8308: PUSH
8309: LD_INT 12
8311: PUSH
8312: LD_INT 15
8314: PUSH
8315: LD_INT 16
8317: PUSH
8318: LD_INT 22
8320: PUSH
8321: LD_INT 23
8323: PUSH
8324: LD_INT 26
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 101
8340: PUSH
8341: LD_INT 102
8343: PUSH
8344: LD_INT 105
8346: PUSH
8347: LD_INT 106
8349: PUSH
8350: LD_INT 108
8352: PUSH
8353: LD_INT 116
8355: PUSH
8356: LD_INT 117
8358: PUSH
8359: LD_INT 118
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: ST_TO_ADDR
8376: GO 11359
8378: LD_INT 3
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8474
8386: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8387: LD_ADDR_VAR 0 2
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: LD_INT 4
8397: PUSH
8398: LD_INT 5
8400: PUSH
8401: LD_INT 11
8403: PUSH
8404: LD_INT 12
8406: PUSH
8407: LD_INT 15
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: LD_INT 22
8415: PUSH
8416: LD_INT 26
8418: PUSH
8419: LD_INT 36
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 101
8436: PUSH
8437: LD_INT 102
8439: PUSH
8440: LD_INT 105
8442: PUSH
8443: LD_INT 106
8445: PUSH
8446: LD_INT 108
8448: PUSH
8449: LD_INT 116
8451: PUSH
8452: LD_INT 117
8454: PUSH
8455: LD_INT 118
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: ST_TO_ADDR
8472: GO 11359
8474: LD_INT 4
8476: DOUBLE
8477: EQUAL
8478: IFTRUE 8482
8480: GO 8578
8482: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8483: LD_ADDR_VAR 0 2
8487: PUSH
8488: LD_INT 2
8490: PUSH
8491: LD_INT 4
8493: PUSH
8494: LD_INT 5
8496: PUSH
8497: LD_INT 8
8499: PUSH
8500: LD_INT 11
8502: PUSH
8503: LD_INT 12
8505: PUSH
8506: LD_INT 15
8508: PUSH
8509: LD_INT 16
8511: PUSH
8512: LD_INT 22
8514: PUSH
8515: LD_INT 23
8517: PUSH
8518: LD_INT 26
8520: PUSH
8521: LD_INT 36
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 101
8540: PUSH
8541: LD_INT 102
8543: PUSH
8544: LD_INT 105
8546: PUSH
8547: LD_INT 106
8549: PUSH
8550: LD_INT 108
8552: PUSH
8553: LD_INT 116
8555: PUSH
8556: LD_INT 117
8558: PUSH
8559: LD_INT 118
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: ST_TO_ADDR
8576: GO 11359
8578: LD_INT 5
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8698
8586: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8587: LD_ADDR_VAR 0 2
8591: PUSH
8592: LD_INT 2
8594: PUSH
8595: LD_INT 4
8597: PUSH
8598: LD_INT 5
8600: PUSH
8601: LD_INT 6
8603: PUSH
8604: LD_INT 8
8606: PUSH
8607: LD_INT 11
8609: PUSH
8610: LD_INT 12
8612: PUSH
8613: LD_INT 15
8615: PUSH
8616: LD_INT 16
8618: PUSH
8619: LD_INT 22
8621: PUSH
8622: LD_INT 23
8624: PUSH
8625: LD_INT 25
8627: PUSH
8628: LD_INT 26
8630: PUSH
8631: LD_INT 36
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 101
8652: PUSH
8653: LD_INT 102
8655: PUSH
8656: LD_INT 105
8658: PUSH
8659: LD_INT 106
8661: PUSH
8662: LD_INT 108
8664: PUSH
8665: LD_INT 109
8667: PUSH
8668: LD_INT 112
8670: PUSH
8671: LD_INT 116
8673: PUSH
8674: LD_INT 117
8676: PUSH
8677: LD_INT 118
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: ST_TO_ADDR
8696: GO 11359
8698: LD_INT 6
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8838
8706: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8707: LD_ADDR_VAR 0 2
8711: PUSH
8712: LD_INT 2
8714: PUSH
8715: LD_INT 4
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 6
8723: PUSH
8724: LD_INT 8
8726: PUSH
8727: LD_INT 11
8729: PUSH
8730: LD_INT 12
8732: PUSH
8733: LD_INT 15
8735: PUSH
8736: LD_INT 16
8738: PUSH
8739: LD_INT 20
8741: PUSH
8742: LD_INT 21
8744: PUSH
8745: LD_INT 22
8747: PUSH
8748: LD_INT 23
8750: PUSH
8751: LD_INT 25
8753: PUSH
8754: LD_INT 26
8756: PUSH
8757: LD_INT 30
8759: PUSH
8760: LD_INT 31
8762: PUSH
8763: LD_INT 32
8765: PUSH
8766: LD_INT 36
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: LD_INT 101
8792: PUSH
8793: LD_INT 102
8795: PUSH
8796: LD_INT 105
8798: PUSH
8799: LD_INT 106
8801: PUSH
8802: LD_INT 108
8804: PUSH
8805: LD_INT 109
8807: PUSH
8808: LD_INT 112
8810: PUSH
8811: LD_INT 116
8813: PUSH
8814: LD_INT 117
8816: PUSH
8817: LD_INT 118
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 11359
8838: LD_INT 7
8840: DOUBLE
8841: EQUAL
8842: IFTRUE 8846
8844: GO 8958
8846: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: LD_INT 4
8857: PUSH
8858: LD_INT 5
8860: PUSH
8861: LD_INT 7
8863: PUSH
8864: LD_INT 11
8866: PUSH
8867: LD_INT 12
8869: PUSH
8870: LD_INT 15
8872: PUSH
8873: LD_INT 16
8875: PUSH
8876: LD_INT 20
8878: PUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_INT 23
8887: PUSH
8888: LD_INT 25
8890: PUSH
8891: LD_INT 26
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 101
8912: PUSH
8913: LD_INT 102
8915: PUSH
8916: LD_INT 103
8918: PUSH
8919: LD_INT 105
8921: PUSH
8922: LD_INT 106
8924: PUSH
8925: LD_INT 108
8927: PUSH
8928: LD_INT 112
8930: PUSH
8931: LD_INT 116
8933: PUSH
8934: LD_INT 117
8936: PUSH
8937: LD_INT 118
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: ST_TO_ADDR
8956: GO 11359
8958: LD_INT 8
8960: DOUBLE
8961: EQUAL
8962: IFTRUE 8966
8964: GO 9106
8966: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8967: LD_ADDR_VAR 0 2
8971: PUSH
8972: LD_INT 2
8974: PUSH
8975: LD_INT 4
8977: PUSH
8978: LD_INT 5
8980: PUSH
8981: LD_INT 6
8983: PUSH
8984: LD_INT 7
8986: PUSH
8987: LD_INT 8
8989: PUSH
8990: LD_INT 11
8992: PUSH
8993: LD_INT 12
8995: PUSH
8996: LD_INT 15
8998: PUSH
8999: LD_INT 16
9001: PUSH
9002: LD_INT 20
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 22
9010: PUSH
9011: LD_INT 23
9013: PUSH
9014: LD_INT 25
9016: PUSH
9017: LD_INT 26
9019: PUSH
9020: LD_INT 30
9022: PUSH
9023: LD_INT 31
9025: PUSH
9026: LD_INT 32
9028: PUSH
9029: LD_INT 36
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 101
9056: PUSH
9057: LD_INT 102
9059: PUSH
9060: LD_INT 103
9062: PUSH
9063: LD_INT 105
9065: PUSH
9066: LD_INT 106
9068: PUSH
9069: LD_INT 108
9071: PUSH
9072: LD_INT 109
9074: PUSH
9075: LD_INT 112
9077: PUSH
9078: LD_INT 116
9080: PUSH
9081: LD_INT 117
9083: PUSH
9084: LD_INT 118
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: ST_TO_ADDR
9104: GO 11359
9106: LD_INT 9
9108: DOUBLE
9109: EQUAL
9110: IFTRUE 9114
9112: GO 9262
9114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9115: LD_ADDR_VAR 0 2
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 4
9125: PUSH
9126: LD_INT 5
9128: PUSH
9129: LD_INT 6
9131: PUSH
9132: LD_INT 7
9134: PUSH
9135: LD_INT 8
9137: PUSH
9138: LD_INT 11
9140: PUSH
9141: LD_INT 12
9143: PUSH
9144: LD_INT 15
9146: PUSH
9147: LD_INT 16
9149: PUSH
9150: LD_INT 20
9152: PUSH
9153: LD_INT 21
9155: PUSH
9156: LD_INT 22
9158: PUSH
9159: LD_INT 23
9161: PUSH
9162: LD_INT 25
9164: PUSH
9165: LD_INT 26
9167: PUSH
9168: LD_INT 28
9170: PUSH
9171: LD_INT 30
9173: PUSH
9174: LD_INT 31
9176: PUSH
9177: LD_INT 32
9179: PUSH
9180: LD_INT 36
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 101
9208: PUSH
9209: LD_INT 102
9211: PUSH
9212: LD_INT 103
9214: PUSH
9215: LD_INT 105
9217: PUSH
9218: LD_INT 106
9220: PUSH
9221: LD_INT 108
9223: PUSH
9224: LD_INT 109
9226: PUSH
9227: LD_INT 112
9229: PUSH
9230: LD_INT 114
9232: PUSH
9233: LD_INT 116
9235: PUSH
9236: LD_INT 117
9238: PUSH
9239: LD_INT 118
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: ST_TO_ADDR
9260: GO 11359
9262: LD_INT 10
9264: DOUBLE
9265: EQUAL
9266: IFTRUE 9270
9268: GO 9466
9270: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9271: LD_ADDR_VAR 0 2
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 4
9281: PUSH
9282: LD_INT 5
9284: PUSH
9285: LD_INT 6
9287: PUSH
9288: LD_INT 7
9290: PUSH
9291: LD_INT 8
9293: PUSH
9294: LD_INT 9
9296: PUSH
9297: LD_INT 10
9299: PUSH
9300: LD_INT 11
9302: PUSH
9303: LD_INT 12
9305: PUSH
9306: LD_INT 13
9308: PUSH
9309: LD_INT 14
9311: PUSH
9312: LD_INT 15
9314: PUSH
9315: LD_INT 16
9317: PUSH
9318: LD_INT 17
9320: PUSH
9321: LD_INT 18
9323: PUSH
9324: LD_INT 19
9326: PUSH
9327: LD_INT 20
9329: PUSH
9330: LD_INT 21
9332: PUSH
9333: LD_INT 22
9335: PUSH
9336: LD_INT 23
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 25
9344: PUSH
9345: LD_INT 26
9347: PUSH
9348: LD_INT 28
9350: PUSH
9351: LD_INT 30
9353: PUSH
9354: LD_INT 31
9356: PUSH
9357: LD_INT 32
9359: PUSH
9360: LD_INT 36
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 101
9396: PUSH
9397: LD_INT 102
9399: PUSH
9400: LD_INT 103
9402: PUSH
9403: LD_INT 104
9405: PUSH
9406: LD_INT 105
9408: PUSH
9409: LD_INT 106
9411: PUSH
9412: LD_INT 107
9414: PUSH
9415: LD_INT 108
9417: PUSH
9418: LD_INT 109
9420: PUSH
9421: LD_INT 110
9423: PUSH
9424: LD_INT 111
9426: PUSH
9427: LD_INT 112
9429: PUSH
9430: LD_INT 114
9432: PUSH
9433: LD_INT 116
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: LD_INT 118
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: ST_TO_ADDR
9464: GO 11359
9466: LD_INT 11
9468: DOUBLE
9469: EQUAL
9470: IFTRUE 9474
9472: GO 9678
9474: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9475: LD_ADDR_VAR 0 2
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 3
9485: PUSH
9486: LD_INT 4
9488: PUSH
9489: LD_INT 5
9491: PUSH
9492: LD_INT 6
9494: PUSH
9495: LD_INT 7
9497: PUSH
9498: LD_INT 8
9500: PUSH
9501: LD_INT 9
9503: PUSH
9504: LD_INT 10
9506: PUSH
9507: LD_INT 11
9509: PUSH
9510: LD_INT 12
9512: PUSH
9513: LD_INT 13
9515: PUSH
9516: LD_INT 14
9518: PUSH
9519: LD_INT 15
9521: PUSH
9522: LD_INT 16
9524: PUSH
9525: LD_INT 17
9527: PUSH
9528: LD_INT 18
9530: PUSH
9531: LD_INT 19
9533: PUSH
9534: LD_INT 20
9536: PUSH
9537: LD_INT 21
9539: PUSH
9540: LD_INT 22
9542: PUSH
9543: LD_INT 23
9545: PUSH
9546: LD_INT 24
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 26
9554: PUSH
9555: LD_INT 28
9557: PUSH
9558: LD_INT 30
9560: PUSH
9561: LD_INT 31
9563: PUSH
9564: LD_INT 32
9566: PUSH
9567: LD_INT 34
9569: PUSH
9570: LD_INT 36
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 101
9608: PUSH
9609: LD_INT 102
9611: PUSH
9612: LD_INT 103
9614: PUSH
9615: LD_INT 104
9617: PUSH
9618: LD_INT 105
9620: PUSH
9621: LD_INT 106
9623: PUSH
9624: LD_INT 107
9626: PUSH
9627: LD_INT 108
9629: PUSH
9630: LD_INT 109
9632: PUSH
9633: LD_INT 110
9635: PUSH
9636: LD_INT 111
9638: PUSH
9639: LD_INT 112
9641: PUSH
9642: LD_INT 114
9644: PUSH
9645: LD_INT 116
9647: PUSH
9648: LD_INT 117
9650: PUSH
9651: LD_INT 118
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: ST_TO_ADDR
9676: GO 11359
9678: LD_INT 12
9680: DOUBLE
9681: EQUAL
9682: IFTRUE 9686
9684: GO 9906
9686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 1
9694: PUSH
9695: LD_INT 2
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: LD_INT 5
9706: PUSH
9707: LD_INT 6
9709: PUSH
9710: LD_INT 7
9712: PUSH
9713: LD_INT 8
9715: PUSH
9716: LD_INT 9
9718: PUSH
9719: LD_INT 10
9721: PUSH
9722: LD_INT 11
9724: PUSH
9725: LD_INT 12
9727: PUSH
9728: LD_INT 13
9730: PUSH
9731: LD_INT 14
9733: PUSH
9734: LD_INT 15
9736: PUSH
9737: LD_INT 16
9739: PUSH
9740: LD_INT 17
9742: PUSH
9743: LD_INT 18
9745: PUSH
9746: LD_INT 19
9748: PUSH
9749: LD_INT 20
9751: PUSH
9752: LD_INT 21
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 23
9760: PUSH
9761: LD_INT 24
9763: PUSH
9764: LD_INT 25
9766: PUSH
9767: LD_INT 26
9769: PUSH
9770: LD_INT 27
9772: PUSH
9773: LD_INT 28
9775: PUSH
9776: LD_INT 30
9778: PUSH
9779: LD_INT 31
9781: PUSH
9782: LD_INT 32
9784: PUSH
9785: LD_INT 33
9787: PUSH
9788: LD_INT 34
9790: PUSH
9791: LD_INT 36
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 101
9832: PUSH
9833: LD_INT 102
9835: PUSH
9836: LD_INT 103
9838: PUSH
9839: LD_INT 104
9841: PUSH
9842: LD_INT 105
9844: PUSH
9845: LD_INT 106
9847: PUSH
9848: LD_INT 107
9850: PUSH
9851: LD_INT 108
9853: PUSH
9854: LD_INT 109
9856: PUSH
9857: LD_INT 110
9859: PUSH
9860: LD_INT 111
9862: PUSH
9863: LD_INT 112
9865: PUSH
9866: LD_INT 113
9868: PUSH
9869: LD_INT 114
9871: PUSH
9872: LD_INT 116
9874: PUSH
9875: LD_INT 117
9877: PUSH
9878: LD_INT 118
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: ST_TO_ADDR
9904: GO 11359
9906: LD_INT 13
9908: DOUBLE
9909: EQUAL
9910: IFTRUE 9914
9912: GO 10122
9914: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 1
9922: PUSH
9923: LD_INT 2
9925: PUSH
9926: LD_INT 3
9928: PUSH
9929: LD_INT 4
9931: PUSH
9932: LD_INT 5
9934: PUSH
9935: LD_INT 8
9937: PUSH
9938: LD_INT 9
9940: PUSH
9941: LD_INT 10
9943: PUSH
9944: LD_INT 11
9946: PUSH
9947: LD_INT 12
9949: PUSH
9950: LD_INT 14
9952: PUSH
9953: LD_INT 15
9955: PUSH
9956: LD_INT 16
9958: PUSH
9959: LD_INT 17
9961: PUSH
9962: LD_INT 18
9964: PUSH
9965: LD_INT 19
9967: PUSH
9968: LD_INT 20
9970: PUSH
9971: LD_INT 21
9973: PUSH
9974: LD_INT 22
9976: PUSH
9977: LD_INT 23
9979: PUSH
9980: LD_INT 24
9982: PUSH
9983: LD_INT 25
9985: PUSH
9986: LD_INT 26
9988: PUSH
9989: LD_INT 27
9991: PUSH
9992: LD_INT 28
9994: PUSH
9995: LD_INT 30
9997: PUSH
9998: LD_INT 31
10000: PUSH
10001: LD_INT 32
10003: PUSH
10004: LD_INT 33
10006: PUSH
10007: LD_INT 34
10009: PUSH
10010: LD_INT 36
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 101
10048: PUSH
10049: LD_INT 102
10051: PUSH
10052: LD_INT 103
10054: PUSH
10055: LD_INT 104
10057: PUSH
10058: LD_INT 105
10060: PUSH
10061: LD_INT 106
10063: PUSH
10064: LD_INT 107
10066: PUSH
10067: LD_INT 108
10069: PUSH
10070: LD_INT 109
10072: PUSH
10073: LD_INT 110
10075: PUSH
10076: LD_INT 111
10078: PUSH
10079: LD_INT 112
10081: PUSH
10082: LD_INT 113
10084: PUSH
10085: LD_INT 114
10087: PUSH
10088: LD_INT 116
10090: PUSH
10091: LD_INT 117
10093: PUSH
10094: LD_INT 118
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: ST_TO_ADDR
10120: GO 11359
10122: LD_INT 14
10124: DOUBLE
10125: EQUAL
10126: IFTRUE 10130
10128: GO 10354
10130: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: LD_INT 2
10141: PUSH
10142: LD_INT 3
10144: PUSH
10145: LD_INT 4
10147: PUSH
10148: LD_INT 5
10150: PUSH
10151: LD_INT 6
10153: PUSH
10154: LD_INT 7
10156: PUSH
10157: LD_INT 8
10159: PUSH
10160: LD_INT 9
10162: PUSH
10163: LD_INT 10
10165: PUSH
10166: LD_INT 11
10168: PUSH
10169: LD_INT 12
10171: PUSH
10172: LD_INT 13
10174: PUSH
10175: LD_INT 14
10177: PUSH
10178: LD_INT 15
10180: PUSH
10181: LD_INT 16
10183: PUSH
10184: LD_INT 17
10186: PUSH
10187: LD_INT 18
10189: PUSH
10190: LD_INT 19
10192: PUSH
10193: LD_INT 20
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 22
10201: PUSH
10202: LD_INT 23
10204: PUSH
10205: LD_INT 24
10207: PUSH
10208: LD_INT 25
10210: PUSH
10211: LD_INT 26
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: LD_INT 29
10222: PUSH
10223: LD_INT 30
10225: PUSH
10226: LD_INT 31
10228: PUSH
10229: LD_INT 32
10231: PUSH
10232: LD_INT 33
10234: PUSH
10235: LD_INT 34
10237: PUSH
10238: LD_INT 36
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 101
10280: PUSH
10281: LD_INT 102
10283: PUSH
10284: LD_INT 103
10286: PUSH
10287: LD_INT 104
10289: PUSH
10290: LD_INT 105
10292: PUSH
10293: LD_INT 106
10295: PUSH
10296: LD_INT 107
10298: PUSH
10299: LD_INT 108
10301: PUSH
10302: LD_INT 109
10304: PUSH
10305: LD_INT 110
10307: PUSH
10308: LD_INT 111
10310: PUSH
10311: LD_INT 112
10313: PUSH
10314: LD_INT 113
10316: PUSH
10317: LD_INT 114
10319: PUSH
10320: LD_INT 116
10322: PUSH
10323: LD_INT 117
10325: PUSH
10326: LD_INT 118
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: ST_TO_ADDR
10352: GO 11359
10354: LD_INT 15
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10586
10362: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10363: LD_ADDR_VAR 0 2
10367: PUSH
10368: LD_INT 1
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 4
10379: PUSH
10380: LD_INT 5
10382: PUSH
10383: LD_INT 6
10385: PUSH
10386: LD_INT 7
10388: PUSH
10389: LD_INT 8
10391: PUSH
10392: LD_INT 9
10394: PUSH
10395: LD_INT 10
10397: PUSH
10398: LD_INT 11
10400: PUSH
10401: LD_INT 12
10403: PUSH
10404: LD_INT 13
10406: PUSH
10407: LD_INT 14
10409: PUSH
10410: LD_INT 15
10412: PUSH
10413: LD_INT 16
10415: PUSH
10416: LD_INT 17
10418: PUSH
10419: LD_INT 18
10421: PUSH
10422: LD_INT 19
10424: PUSH
10425: LD_INT 20
10427: PUSH
10428: LD_INT 21
10430: PUSH
10431: LD_INT 22
10433: PUSH
10434: LD_INT 23
10436: PUSH
10437: LD_INT 24
10439: PUSH
10440: LD_INT 25
10442: PUSH
10443: LD_INT 26
10445: PUSH
10446: LD_INT 27
10448: PUSH
10449: LD_INT 28
10451: PUSH
10452: LD_INT 29
10454: PUSH
10455: LD_INT 30
10457: PUSH
10458: LD_INT 31
10460: PUSH
10461: LD_INT 32
10463: PUSH
10464: LD_INT 33
10466: PUSH
10467: LD_INT 34
10469: PUSH
10470: LD_INT 36
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 101
10512: PUSH
10513: LD_INT 102
10515: PUSH
10516: LD_INT 103
10518: PUSH
10519: LD_INT 104
10521: PUSH
10522: LD_INT 105
10524: PUSH
10525: LD_INT 106
10527: PUSH
10528: LD_INT 107
10530: PUSH
10531: LD_INT 108
10533: PUSH
10534: LD_INT 109
10536: PUSH
10537: LD_INT 110
10539: PUSH
10540: LD_INT 111
10542: PUSH
10543: LD_INT 112
10545: PUSH
10546: LD_INT 113
10548: PUSH
10549: LD_INT 114
10551: PUSH
10552: LD_INT 116
10554: PUSH
10555: LD_INT 117
10557: PUSH
10558: LD_INT 118
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: ST_TO_ADDR
10584: GO 11359
10586: LD_INT 16
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10730
10594: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: LD_INT 4
10605: PUSH
10606: LD_INT 5
10608: PUSH
10609: LD_INT 7
10611: PUSH
10612: LD_INT 11
10614: PUSH
10615: LD_INT 12
10617: PUSH
10618: LD_INT 15
10620: PUSH
10621: LD_INT 16
10623: PUSH
10624: LD_INT 20
10626: PUSH
10627: LD_INT 21
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_INT 23
10635: PUSH
10636: LD_INT 25
10638: PUSH
10639: LD_INT 26
10641: PUSH
10642: LD_INT 30
10644: PUSH
10645: LD_INT 31
10647: PUSH
10648: LD_INT 32
10650: PUSH
10651: LD_INT 33
10653: PUSH
10654: LD_INT 34
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 101
10680: PUSH
10681: LD_INT 102
10683: PUSH
10684: LD_INT 103
10686: PUSH
10687: LD_INT 106
10689: PUSH
10690: LD_INT 108
10692: PUSH
10693: LD_INT 112
10695: PUSH
10696: LD_INT 113
10698: PUSH
10699: LD_INT 114
10701: PUSH
10702: LD_INT 116
10704: PUSH
10705: LD_INT 117
10707: PUSH
10708: LD_INT 118
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: ST_TO_ADDR
10728: GO 11359
10730: LD_INT 17
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10962
10738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10739: LD_ADDR_VAR 0 2
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: LD_INT 2
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: LD_INT 4
10755: PUSH
10756: LD_INT 5
10758: PUSH
10759: LD_INT 6
10761: PUSH
10762: LD_INT 7
10764: PUSH
10765: LD_INT 8
10767: PUSH
10768: LD_INT 9
10770: PUSH
10771: LD_INT 10
10773: PUSH
10774: LD_INT 11
10776: PUSH
10777: LD_INT 12
10779: PUSH
10780: LD_INT 13
10782: PUSH
10783: LD_INT 14
10785: PUSH
10786: LD_INT 15
10788: PUSH
10789: LD_INT 16
10791: PUSH
10792: LD_INT 17
10794: PUSH
10795: LD_INT 18
10797: PUSH
10798: LD_INT 19
10800: PUSH
10801: LD_INT 20
10803: PUSH
10804: LD_INT 21
10806: PUSH
10807: LD_INT 22
10809: PUSH
10810: LD_INT 23
10812: PUSH
10813: LD_INT 24
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 26
10821: PUSH
10822: LD_INT 27
10824: PUSH
10825: LD_INT 28
10827: PUSH
10828: LD_INT 29
10830: PUSH
10831: LD_INT 30
10833: PUSH
10834: LD_INT 31
10836: PUSH
10837: LD_INT 32
10839: PUSH
10840: LD_INT 33
10842: PUSH
10843: LD_INT 34
10845: PUSH
10846: LD_INT 36
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 101
10888: PUSH
10889: LD_INT 102
10891: PUSH
10892: LD_INT 103
10894: PUSH
10895: LD_INT 104
10897: PUSH
10898: LD_INT 105
10900: PUSH
10901: LD_INT 106
10903: PUSH
10904: LD_INT 107
10906: PUSH
10907: LD_INT 108
10909: PUSH
10910: LD_INT 109
10912: PUSH
10913: LD_INT 110
10915: PUSH
10916: LD_INT 111
10918: PUSH
10919: LD_INT 112
10921: PUSH
10922: LD_INT 113
10924: PUSH
10925: LD_INT 114
10927: PUSH
10928: LD_INT 116
10930: PUSH
10931: LD_INT 117
10933: PUSH
10934: LD_INT 118
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: ST_TO_ADDR
10960: GO 11359
10962: LD_INT 18
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 11118
10970: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10971: LD_ADDR_VAR 0 2
10975: PUSH
10976: LD_INT 2
10978: PUSH
10979: LD_INT 4
10981: PUSH
10982: LD_INT 5
10984: PUSH
10985: LD_INT 7
10987: PUSH
10988: LD_INT 11
10990: PUSH
10991: LD_INT 12
10993: PUSH
10994: LD_INT 15
10996: PUSH
10997: LD_INT 16
10999: PUSH
11000: LD_INT 20
11002: PUSH
11003: LD_INT 21
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_INT 23
11011: PUSH
11012: LD_INT 25
11014: PUSH
11015: LD_INT 26
11017: PUSH
11018: LD_INT 30
11020: PUSH
11021: LD_INT 31
11023: PUSH
11024: LD_INT 32
11026: PUSH
11027: LD_INT 33
11029: PUSH
11030: LD_INT 34
11032: PUSH
11033: LD_INT 35
11035: PUSH
11036: LD_INT 36
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 101
11064: PUSH
11065: LD_INT 102
11067: PUSH
11068: LD_INT 103
11070: PUSH
11071: LD_INT 106
11073: PUSH
11074: LD_INT 108
11076: PUSH
11077: LD_INT 112
11079: PUSH
11080: LD_INT 113
11082: PUSH
11083: LD_INT 114
11085: PUSH
11086: LD_INT 115
11088: PUSH
11089: LD_INT 116
11091: PUSH
11092: LD_INT 117
11094: PUSH
11095: LD_INT 118
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: ST_TO_ADDR
11116: GO 11359
11118: LD_INT 19
11120: DOUBLE
11121: EQUAL
11122: IFTRUE 11126
11124: GO 11358
11126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11127: LD_ADDR_VAR 0 2
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: LD_INT 2
11137: PUSH
11138: LD_INT 3
11140: PUSH
11141: LD_INT 4
11143: PUSH
11144: LD_INT 5
11146: PUSH
11147: LD_INT 6
11149: PUSH
11150: LD_INT 7
11152: PUSH
11153: LD_INT 8
11155: PUSH
11156: LD_INT 9
11158: PUSH
11159: LD_INT 10
11161: PUSH
11162: LD_INT 11
11164: PUSH
11165: LD_INT 12
11167: PUSH
11168: LD_INT 13
11170: PUSH
11171: LD_INT 14
11173: PUSH
11174: LD_INT 15
11176: PUSH
11177: LD_INT 16
11179: PUSH
11180: LD_INT 17
11182: PUSH
11183: LD_INT 18
11185: PUSH
11186: LD_INT 19
11188: PUSH
11189: LD_INT 20
11191: PUSH
11192: LD_INT 21
11194: PUSH
11195: LD_INT 22
11197: PUSH
11198: LD_INT 23
11200: PUSH
11201: LD_INT 24
11203: PUSH
11204: LD_INT 25
11206: PUSH
11207: LD_INT 26
11209: PUSH
11210: LD_INT 27
11212: PUSH
11213: LD_INT 28
11215: PUSH
11216: LD_INT 29
11218: PUSH
11219: LD_INT 30
11221: PUSH
11222: LD_INT 31
11224: PUSH
11225: LD_INT 32
11227: PUSH
11228: LD_INT 33
11230: PUSH
11231: LD_INT 34
11233: PUSH
11234: LD_INT 35
11236: PUSH
11237: LD_INT 36
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 101
11280: PUSH
11281: LD_INT 102
11283: PUSH
11284: LD_INT 103
11286: PUSH
11287: LD_INT 104
11289: PUSH
11290: LD_INT 105
11292: PUSH
11293: LD_INT 106
11295: PUSH
11296: LD_INT 107
11298: PUSH
11299: LD_INT 108
11301: PUSH
11302: LD_INT 109
11304: PUSH
11305: LD_INT 110
11307: PUSH
11308: LD_INT 111
11310: PUSH
11311: LD_INT 112
11313: PUSH
11314: LD_INT 113
11316: PUSH
11317: LD_INT 114
11319: PUSH
11320: LD_INT 115
11322: PUSH
11323: LD_INT 116
11325: PUSH
11326: LD_INT 117
11328: PUSH
11329: LD_INT 118
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: ST_TO_ADDR
11356: GO 11359
11358: POP
// end else
11359: GO 11590
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11361: LD_ADDR_VAR 0 2
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: LD_INT 4
11377: PUSH
11378: LD_INT 5
11380: PUSH
11381: LD_INT 6
11383: PUSH
11384: LD_INT 7
11386: PUSH
11387: LD_INT 8
11389: PUSH
11390: LD_INT 9
11392: PUSH
11393: LD_INT 10
11395: PUSH
11396: LD_INT 11
11398: PUSH
11399: LD_INT 12
11401: PUSH
11402: LD_INT 13
11404: PUSH
11405: LD_INT 14
11407: PUSH
11408: LD_INT 15
11410: PUSH
11411: LD_INT 16
11413: PUSH
11414: LD_INT 17
11416: PUSH
11417: LD_INT 18
11419: PUSH
11420: LD_INT 19
11422: PUSH
11423: LD_INT 20
11425: PUSH
11426: LD_INT 21
11428: PUSH
11429: LD_INT 22
11431: PUSH
11432: LD_INT 23
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 25
11440: PUSH
11441: LD_INT 26
11443: PUSH
11444: LD_INT 27
11446: PUSH
11447: LD_INT 28
11449: PUSH
11450: LD_INT 29
11452: PUSH
11453: LD_INT 30
11455: PUSH
11456: LD_INT 31
11458: PUSH
11459: LD_INT 32
11461: PUSH
11462: LD_INT 33
11464: PUSH
11465: LD_INT 34
11467: PUSH
11468: LD_INT 35
11470: PUSH
11471: LD_INT 36
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 101
11514: PUSH
11515: LD_INT 102
11517: PUSH
11518: LD_INT 103
11520: PUSH
11521: LD_INT 104
11523: PUSH
11524: LD_INT 105
11526: PUSH
11527: LD_INT 106
11529: PUSH
11530: LD_INT 107
11532: PUSH
11533: LD_INT 108
11535: PUSH
11536: LD_INT 109
11538: PUSH
11539: LD_INT 110
11541: PUSH
11542: LD_INT 111
11544: PUSH
11545: LD_INT 112
11547: PUSH
11548: LD_INT 113
11550: PUSH
11551: LD_INT 114
11553: PUSH
11554: LD_INT 115
11556: PUSH
11557: LD_INT 116
11559: PUSH
11560: LD_INT 117
11562: PUSH
11563: LD_INT 118
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: ST_TO_ADDR
// if result then
11590: LD_VAR 0 2
11594: IFFALSE 12380
// begin normal :=  ;
11596: LD_ADDR_VAR 0 5
11600: PUSH
11601: LD_STRING 
11603: ST_TO_ADDR
// hardcore :=  ;
11604: LD_ADDR_VAR 0 6
11608: PUSH
11609: LD_STRING 
11611: ST_TO_ADDR
// active :=  ;
11612: LD_ADDR_VAR 0 7
11616: PUSH
11617: LD_STRING 
11619: ST_TO_ADDR
// for i = 1 to normalCounter do
11620: LD_ADDR_VAR 0 8
11624: PUSH
11625: DOUBLE
11626: LD_INT 1
11628: DEC
11629: ST_TO_ADDR
11630: LD_EXP 28
11634: PUSH
11635: FOR_TO
11636: IFFALSE 11737
// begin tmp := 0 ;
11638: LD_ADDR_VAR 0 3
11642: PUSH
11643: LD_STRING 0
11645: ST_TO_ADDR
// if result [ 1 ] then
11646: LD_VAR 0 2
11650: PUSH
11651: LD_INT 1
11653: ARRAY
11654: IFFALSE 11719
// if result [ 1 ] [ 1 ] = i then
11656: LD_VAR 0 2
11660: PUSH
11661: LD_INT 1
11663: ARRAY
11664: PUSH
11665: LD_INT 1
11667: ARRAY
11668: PUSH
11669: LD_VAR 0 8
11673: EQUAL
11674: IFFALSE 11719
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11676: LD_ADDR_VAR 0 2
11680: PUSH
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: LD_VAR 0 2
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 3
11705: PPUSH
11706: CALL_OW 1
11710: ST_TO_ADDR
// tmp := 1 ;
11711: LD_ADDR_VAR 0 3
11715: PUSH
11716: LD_STRING 1
11718: ST_TO_ADDR
// end ; normal := normal & tmp ;
11719: LD_ADDR_VAR 0 5
11723: PUSH
11724: LD_VAR 0 5
11728: PUSH
11729: LD_VAR 0 3
11733: STR
11734: ST_TO_ADDR
// end ;
11735: GO 11635
11737: POP
11738: POP
// for i = 1 to hardcoreCounter do
11739: LD_ADDR_VAR 0 8
11743: PUSH
11744: DOUBLE
11745: LD_INT 1
11747: DEC
11748: ST_TO_ADDR
11749: LD_EXP 29
11753: PUSH
11754: FOR_TO
11755: IFFALSE 11860
// begin tmp := 0 ;
11757: LD_ADDR_VAR 0 3
11761: PUSH
11762: LD_STRING 0
11764: ST_TO_ADDR
// if result [ 2 ] then
11765: LD_VAR 0 2
11769: PUSH
11770: LD_INT 2
11772: ARRAY
11773: IFFALSE 11842
// if result [ 2 ] [ 1 ] = 100 + i then
11775: LD_VAR 0 2
11779: PUSH
11780: LD_INT 2
11782: ARRAY
11783: PUSH
11784: LD_INT 1
11786: ARRAY
11787: PUSH
11788: LD_INT 100
11790: PUSH
11791: LD_VAR 0 8
11795: PLUS
11796: EQUAL
11797: IFFALSE 11842
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11799: LD_ADDR_VAR 0 2
11803: PUSH
11804: LD_VAR 0 2
11808: PPUSH
11809: LD_INT 2
11811: PPUSH
11812: LD_VAR 0 2
11816: PUSH
11817: LD_INT 2
11819: ARRAY
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 3
11828: PPUSH
11829: CALL_OW 1
11833: ST_TO_ADDR
// tmp := 1 ;
11834: LD_ADDR_VAR 0 3
11838: PUSH
11839: LD_STRING 1
11841: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11842: LD_ADDR_VAR 0 6
11846: PUSH
11847: LD_VAR 0 6
11851: PUSH
11852: LD_VAR 0 3
11856: STR
11857: ST_TO_ADDR
// end ;
11858: GO 11754
11860: POP
11861: POP
// if isGameLoad then
11862: LD_VAR 0 1
11866: IFFALSE 12341
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11868: LD_ADDR_VAR 0 4
11872: PUSH
11873: LD_EXP 32
11877: PUSH
11878: LD_EXP 31
11882: PUSH
11883: LD_EXP 33
11887: PUSH
11888: LD_EXP 30
11892: PUSH
11893: LD_EXP 34
11897: PUSH
11898: LD_EXP 35
11902: PUSH
11903: LD_EXP 36
11907: PUSH
11908: LD_EXP 37
11912: PUSH
11913: LD_EXP 38
11917: PUSH
11918: LD_EXP 39
11922: PUSH
11923: LD_EXP 40
11927: PUSH
11928: LD_EXP 41
11932: PUSH
11933: LD_EXP 42
11937: PUSH
11938: LD_EXP 43
11942: PUSH
11943: LD_EXP 51
11947: PUSH
11948: LD_EXP 52
11952: PUSH
11953: LD_EXP 53
11957: PUSH
11958: LD_EXP 54
11962: PUSH
11963: LD_EXP 56
11967: PUSH
11968: LD_EXP 57
11972: PUSH
11973: LD_EXP 58
11977: PUSH
11978: LD_EXP 61
11982: PUSH
11983: LD_EXP 63
11987: PUSH
11988: LD_EXP 64
11992: PUSH
11993: LD_EXP 65
11997: PUSH
11998: LD_EXP 67
12002: PUSH
12003: LD_EXP 68
12007: PUSH
12008: LD_EXP 71
12012: PUSH
12013: LD_EXP 72
12017: PUSH
12018: LD_EXP 73
12022: PUSH
12023: LD_EXP 74
12027: PUSH
12028: LD_EXP 75
12032: PUSH
12033: LD_EXP 76
12037: PUSH
12038: LD_EXP 77
12042: PUSH
12043: LD_EXP 78
12047: PUSH
12048: LD_EXP 79
12052: PUSH
12053: LD_EXP 44
12057: PUSH
12058: LD_EXP 45
12062: PUSH
12063: LD_EXP 48
12067: PUSH
12068: LD_EXP 49
12072: PUSH
12073: LD_EXP 50
12077: PUSH
12078: LD_EXP 46
12082: PUSH
12083: LD_EXP 47
12087: PUSH
12088: LD_EXP 55
12092: PUSH
12093: LD_EXP 59
12097: PUSH
12098: LD_EXP 60
12102: PUSH
12103: LD_EXP 62
12107: PUSH
12108: LD_EXP 66
12112: PUSH
12113: LD_EXP 69
12117: PUSH
12118: LD_EXP 70
12122: PUSH
12123: LD_EXP 80
12127: PUSH
12128: LD_EXP 81
12132: PUSH
12133: LD_EXP 82
12137: PUSH
12138: LD_EXP 83
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: ST_TO_ADDR
// tmp :=  ;
12199: LD_ADDR_VAR 0 3
12203: PUSH
12204: LD_STRING 
12206: ST_TO_ADDR
// for i = 1 to normalCounter do
12207: LD_ADDR_VAR 0 8
12211: PUSH
12212: DOUBLE
12213: LD_INT 1
12215: DEC
12216: ST_TO_ADDR
12217: LD_EXP 28
12221: PUSH
12222: FOR_TO
12223: IFFALSE 12259
// begin if flags [ i ] then
12225: LD_VAR 0 4
12229: PUSH
12230: LD_VAR 0 8
12234: ARRAY
12235: IFFALSE 12257
// tmp := tmp & i & ; ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_VAR 0 3
12246: PUSH
12247: LD_VAR 0 8
12251: STR
12252: PUSH
12253: LD_STRING ;
12255: STR
12256: ST_TO_ADDR
// end ;
12257: GO 12222
12259: POP
12260: POP
// for i = 1 to hardcoreCounter do
12261: LD_ADDR_VAR 0 8
12265: PUSH
12266: DOUBLE
12267: LD_INT 1
12269: DEC
12270: ST_TO_ADDR
12271: LD_EXP 29
12275: PUSH
12276: FOR_TO
12277: IFFALSE 12323
// begin if flags [ normalCounter + i ] then
12279: LD_VAR 0 4
12283: PUSH
12284: LD_EXP 28
12288: PUSH
12289: LD_VAR 0 8
12293: PLUS
12294: ARRAY
12295: IFFALSE 12321
// tmp := tmp & ( 100 + i ) & ; ;
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: LD_VAR 0 3
12306: PUSH
12307: LD_INT 100
12309: PUSH
12310: LD_VAR 0 8
12314: PLUS
12315: STR
12316: PUSH
12317: LD_STRING ;
12319: STR
12320: ST_TO_ADDR
// end ;
12321: GO 12276
12323: POP
12324: POP
// if tmp then
12325: LD_VAR 0 3
12329: IFFALSE 12341
// active := tmp ;
12331: LD_ADDR_VAR 0 7
12335: PUSH
12336: LD_VAR 0 3
12340: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12341: LD_STRING getStreamItemsFromMission("
12343: PUSH
12344: LD_VAR 0 5
12348: STR
12349: PUSH
12350: LD_STRING ","
12352: STR
12353: PUSH
12354: LD_VAR 0 6
12358: STR
12359: PUSH
12360: LD_STRING ","
12362: STR
12363: PUSH
12364: LD_VAR 0 7
12368: STR
12369: PUSH
12370: LD_STRING ")
12372: STR
12373: PPUSH
12374: CALL_OW 559
// end else
12378: GO 12387
// ToLua ( getStreamItemsFromMission("","","") ) ;
12380: LD_STRING getStreamItemsFromMission("","","")
12382: PPUSH
12383: CALL_OW 559
// end ;
12387: LD_VAR 0 2
12391: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12392: LD_EXP 27
12396: PUSH
12397: LD_EXP 32
12401: AND
12402: IFFALSE 12526
12404: GO 12406
12406: DISABLE
12407: LD_INT 0
12409: PPUSH
12410: PPUSH
// begin enable ;
12411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12412: LD_ADDR_VAR 0 2
12416: PUSH
12417: LD_INT 22
12419: PUSH
12420: LD_OWVAR 2
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 2
12431: PUSH
12432: LD_INT 34
12434: PUSH
12435: LD_INT 7
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 34
12444: PUSH
12445: LD_INT 45
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 34
12454: PUSH
12455: LD_INT 28
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 34
12464: PUSH
12465: LD_INT 47
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 69
12487: ST_TO_ADDR
// if not tmp then
12488: LD_VAR 0 2
12492: NOT
12493: IFFALSE 12497
// exit ;
12495: GO 12526
// for i in tmp do
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_VAR 0 2
12506: PUSH
12507: FOR_IN
12508: IFFALSE 12524
// begin SetLives ( i , 0 ) ;
12510: LD_VAR 0 1
12514: PPUSH
12515: LD_INT 0
12517: PPUSH
12518: CALL_OW 234
// end ;
12522: GO 12507
12524: POP
12525: POP
// end ;
12526: PPOPN 2
12528: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12529: LD_EXP 27
12533: PUSH
12534: LD_EXP 33
12538: AND
12539: IFFALSE 12623
12541: GO 12543
12543: DISABLE
12544: LD_INT 0
12546: PPUSH
12547: PPUSH
// begin enable ;
12548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12549: LD_ADDR_VAR 0 2
12553: PUSH
12554: LD_INT 22
12556: PUSH
12557: LD_OWVAR 2
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 32
12568: PUSH
12569: LD_INT 3
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 69
12584: ST_TO_ADDR
// if not tmp then
12585: LD_VAR 0 2
12589: NOT
12590: IFFALSE 12594
// exit ;
12592: GO 12623
// for i in tmp do
12594: LD_ADDR_VAR 0 1
12598: PUSH
12599: LD_VAR 0 2
12603: PUSH
12604: FOR_IN
12605: IFFALSE 12621
// begin SetLives ( i , 0 ) ;
12607: LD_VAR 0 1
12611: PPUSH
12612: LD_INT 0
12614: PPUSH
12615: CALL_OW 234
// end ;
12619: GO 12604
12621: POP
12622: POP
// end ;
12623: PPOPN 2
12625: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12626: LD_EXP 27
12630: PUSH
12631: LD_EXP 30
12635: AND
12636: IFFALSE 12729
12638: GO 12640
12640: DISABLE
12641: LD_INT 0
12643: PPUSH
// begin enable ;
12644: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12645: LD_ADDR_VAR 0 1
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_OWVAR 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: LD_INT 25
12667: PUSH
12668: LD_INT 5
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 9
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 8
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PPUSH
12705: CALL_OW 69
12709: PUSH
12710: FOR_IN
12711: IFFALSE 12727
// begin SetClass ( i , 1 ) ;
12713: LD_VAR 0 1
12717: PPUSH
12718: LD_INT 1
12720: PPUSH
12721: CALL_OW 336
// end ;
12725: GO 12710
12727: POP
12728: POP
// end ;
12729: PPOPN 1
12731: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12732: LD_EXP 27
12736: PUSH
12737: LD_EXP 31
12741: AND
12742: PUSH
12743: LD_OWVAR 65
12747: PUSH
12748: LD_INT 7
12750: LESS
12751: AND
12752: IFFALSE 12766
12754: GO 12756
12756: DISABLE
// begin enable ;
12757: ENABLE
// game_speed := 7 ;
12758: LD_ADDR_OWVAR 65
12762: PUSH
12763: LD_INT 7
12765: ST_TO_ADDR
// end ;
12766: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12767: LD_EXP 27
12771: PUSH
12772: LD_EXP 34
12776: AND
12777: IFFALSE 12979
12779: GO 12781
12781: DISABLE
12782: LD_INT 0
12784: PPUSH
12785: PPUSH
12786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12787: LD_ADDR_VAR 0 3
12791: PUSH
12792: LD_INT 81
12794: PUSH
12795: LD_OWVAR 2
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 21
12806: PUSH
12807: LD_INT 1
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 69
12822: ST_TO_ADDR
// if not tmp then
12823: LD_VAR 0 3
12827: NOT
12828: IFFALSE 12832
// exit ;
12830: GO 12979
// if tmp > 5 then
12832: LD_VAR 0 3
12836: PUSH
12837: LD_INT 5
12839: GREATER
12840: IFFALSE 12852
// k := 5 else
12842: LD_ADDR_VAR 0 2
12846: PUSH
12847: LD_INT 5
12849: ST_TO_ADDR
12850: GO 12862
// k := tmp ;
12852: LD_ADDR_VAR 0 2
12856: PUSH
12857: LD_VAR 0 3
12861: ST_TO_ADDR
// for i := 1 to k do
12862: LD_ADDR_VAR 0 1
12866: PUSH
12867: DOUBLE
12868: LD_INT 1
12870: DEC
12871: ST_TO_ADDR
12872: LD_VAR 0 2
12876: PUSH
12877: FOR_TO
12878: IFFALSE 12977
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12880: LD_VAR 0 3
12884: PUSH
12885: LD_VAR 0 1
12889: ARRAY
12890: PPUSH
12891: LD_VAR 0 1
12895: PUSH
12896: LD_INT 4
12898: MOD
12899: PUSH
12900: LD_INT 1
12902: PLUS
12903: PPUSH
12904: CALL_OW 259
12908: PUSH
12909: LD_INT 10
12911: LESS
12912: IFFALSE 12975
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12914: LD_VAR 0 3
12918: PUSH
12919: LD_VAR 0 1
12923: ARRAY
12924: PPUSH
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 4
12932: MOD
12933: PUSH
12934: LD_INT 1
12936: PLUS
12937: PPUSH
12938: LD_VAR 0 3
12942: PUSH
12943: LD_VAR 0 1
12947: ARRAY
12948: PPUSH
12949: LD_VAR 0 1
12953: PUSH
12954: LD_INT 4
12956: MOD
12957: PUSH
12958: LD_INT 1
12960: PLUS
12961: PPUSH
12962: CALL_OW 259
12966: PUSH
12967: LD_INT 1
12969: PLUS
12970: PPUSH
12971: CALL_OW 237
12975: GO 12877
12977: POP
12978: POP
// end ;
12979: PPOPN 3
12981: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12982: LD_EXP 27
12986: PUSH
12987: LD_EXP 35
12991: AND
12992: IFFALSE 13012
12994: GO 12996
12996: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12997: LD_INT 4
12999: PPUSH
13000: LD_OWVAR 2
13004: PPUSH
13005: LD_INT 0
13007: PPUSH
13008: CALL_OW 324
13012: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13013: LD_EXP 27
13017: PUSH
13018: LD_EXP 64
13022: AND
13023: IFFALSE 13043
13025: GO 13027
13027: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13028: LD_INT 19
13030: PPUSH
13031: LD_OWVAR 2
13035: PPUSH
13036: LD_INT 0
13038: PPUSH
13039: CALL_OW 324
13043: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13044: LD_EXP 27
13048: PUSH
13049: LD_EXP 36
13053: AND
13054: IFFALSE 13156
13056: GO 13058
13058: DISABLE
13059: LD_INT 0
13061: PPUSH
13062: PPUSH
// begin enable ;
13063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13064: LD_ADDR_VAR 0 2
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_OWVAR 2
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: LD_INT 34
13086: PUSH
13087: LD_INT 11
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 34
13096: PUSH
13097: LD_INT 30
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PPUSH
13113: CALL_OW 69
13117: ST_TO_ADDR
// if not tmp then
13118: LD_VAR 0 2
13122: NOT
13123: IFFALSE 13127
// exit ;
13125: GO 13156
// for i in tmp do
13127: LD_ADDR_VAR 0 1
13131: PUSH
13132: LD_VAR 0 2
13136: PUSH
13137: FOR_IN
13138: IFFALSE 13154
// begin SetLives ( i , 0 ) ;
13140: LD_VAR 0 1
13144: PPUSH
13145: LD_INT 0
13147: PPUSH
13148: CALL_OW 234
// end ;
13152: GO 13137
13154: POP
13155: POP
// end ;
13156: PPOPN 2
13158: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13159: LD_EXP 27
13163: PUSH
13164: LD_EXP 37
13168: AND
13169: IFFALSE 13189
13171: GO 13173
13173: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13174: LD_INT 32
13176: PPUSH
13177: LD_OWVAR 2
13181: PPUSH
13182: LD_INT 0
13184: PPUSH
13185: CALL_OW 324
13189: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13190: LD_EXP 27
13194: PUSH
13195: LD_EXP 38
13199: AND
13200: IFFALSE 13381
13202: GO 13204
13204: DISABLE
13205: LD_INT 0
13207: PPUSH
13208: PPUSH
13209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13210: LD_ADDR_VAR 0 2
13214: PUSH
13215: LD_INT 22
13217: PUSH
13218: LD_OWVAR 2
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 33
13229: PUSH
13230: LD_INT 3
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PPUSH
13241: CALL_OW 69
13245: ST_TO_ADDR
// if not tmp then
13246: LD_VAR 0 2
13250: NOT
13251: IFFALSE 13255
// exit ;
13253: GO 13381
// side := 0 ;
13255: LD_ADDR_VAR 0 3
13259: PUSH
13260: LD_INT 0
13262: ST_TO_ADDR
// for i := 1 to 8 do
13263: LD_ADDR_VAR 0 1
13267: PUSH
13268: DOUBLE
13269: LD_INT 1
13271: DEC
13272: ST_TO_ADDR
13273: LD_INT 8
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13325
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13279: LD_OWVAR 2
13283: PUSH
13284: LD_VAR 0 1
13288: NONEQUAL
13289: PUSH
13290: LD_OWVAR 2
13294: PPUSH
13295: LD_VAR 0 1
13299: PPUSH
13300: CALL_OW 81
13304: PUSH
13305: LD_INT 2
13307: EQUAL
13308: AND
13309: IFFALSE 13323
// begin side := i ;
13311: LD_ADDR_VAR 0 3
13315: PUSH
13316: LD_VAR 0 1
13320: ST_TO_ADDR
// break ;
13321: GO 13325
// end ;
13323: GO 13276
13325: POP
13326: POP
// if not side then
13327: LD_VAR 0 3
13331: NOT
13332: IFFALSE 13336
// exit ;
13334: GO 13381
// for i := 1 to tmp do
13336: LD_ADDR_VAR 0 1
13340: PUSH
13341: DOUBLE
13342: LD_INT 1
13344: DEC
13345: ST_TO_ADDR
13346: LD_VAR 0 2
13350: PUSH
13351: FOR_TO
13352: IFFALSE 13379
// if Prob ( 60 ) then
13354: LD_INT 60
13356: PPUSH
13357: CALL_OW 13
13361: IFFALSE 13377
// SetSide ( i , side ) ;
13363: LD_VAR 0 1
13367: PPUSH
13368: LD_VAR 0 3
13372: PPUSH
13373: CALL_OW 235
13377: GO 13351
13379: POP
13380: POP
// end ;
13381: PPOPN 3
13383: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13384: LD_EXP 27
13388: PUSH
13389: LD_EXP 40
13393: AND
13394: IFFALSE 13513
13396: GO 13398
13398: DISABLE
13399: LD_INT 0
13401: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13402: LD_ADDR_VAR 0 1
13406: PUSH
13407: LD_INT 22
13409: PUSH
13410: LD_OWVAR 2
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 21
13421: PUSH
13422: LD_INT 1
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 3
13431: PUSH
13432: LD_INT 23
13434: PUSH
13435: LD_INT 0
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: FOR_IN
13457: IFFALSE 13511
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13459: LD_VAR 0 1
13463: PPUSH
13464: CALL_OW 257
13468: PUSH
13469: LD_INT 1
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 3
13477: PUSH
13478: LD_INT 4
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: IN
13487: IFFALSE 13509
// SetClass ( un , rand ( 1 , 4 ) ) ;
13489: LD_VAR 0 1
13493: PPUSH
13494: LD_INT 1
13496: PPUSH
13497: LD_INT 4
13499: PPUSH
13500: CALL_OW 12
13504: PPUSH
13505: CALL_OW 336
13509: GO 13456
13511: POP
13512: POP
// end ;
13513: PPOPN 1
13515: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13516: LD_EXP 27
13520: PUSH
13521: LD_EXP 39
13525: AND
13526: IFFALSE 13605
13528: GO 13530
13530: DISABLE
13531: LD_INT 0
13533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13534: LD_ADDR_VAR 0 1
13538: PUSH
13539: LD_INT 22
13541: PUSH
13542: LD_OWVAR 2
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 21
13553: PUSH
13554: LD_INT 3
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 69
13569: ST_TO_ADDR
// if not tmp then
13570: LD_VAR 0 1
13574: NOT
13575: IFFALSE 13579
// exit ;
13577: GO 13605
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13579: LD_VAR 0 1
13583: PUSH
13584: LD_INT 1
13586: PPUSH
13587: LD_VAR 0 1
13591: PPUSH
13592: CALL_OW 12
13596: ARRAY
13597: PPUSH
13598: LD_INT 100
13600: PPUSH
13601: CALL_OW 234
// end ;
13605: PPOPN 1
13607: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13608: LD_EXP 27
13612: PUSH
13613: LD_EXP 41
13617: AND
13618: IFFALSE 13716
13620: GO 13622
13622: DISABLE
13623: LD_INT 0
13625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13626: LD_ADDR_VAR 0 1
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_OWVAR 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// if not tmp then
13662: LD_VAR 0 1
13666: NOT
13667: IFFALSE 13671
// exit ;
13669: GO 13716
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13671: LD_VAR 0 1
13675: PUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 12
13688: ARRAY
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: LD_INT 4
13695: PPUSH
13696: CALL_OW 12
13700: PPUSH
13701: LD_INT 3000
13703: PPUSH
13704: LD_INT 9000
13706: PPUSH
13707: CALL_OW 12
13711: PPUSH
13712: CALL_OW 492
// end ;
13716: PPOPN 1
13718: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13719: LD_EXP 27
13723: PUSH
13724: LD_EXP 42
13728: AND
13729: IFFALSE 13749
13731: GO 13733
13733: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13734: LD_INT 1
13736: PPUSH
13737: LD_OWVAR 2
13741: PPUSH
13742: LD_INT 0
13744: PPUSH
13745: CALL_OW 324
13749: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13750: LD_EXP 27
13754: PUSH
13755: LD_EXP 43
13759: AND
13760: IFFALSE 13843
13762: GO 13764
13764: DISABLE
13765: LD_INT 0
13767: PPUSH
13768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13769: LD_ADDR_VAR 0 2
13773: PUSH
13774: LD_INT 22
13776: PUSH
13777: LD_OWVAR 2
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 21
13788: PUSH
13789: LD_INT 3
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: ST_TO_ADDR
// if not tmp then
13805: LD_VAR 0 2
13809: NOT
13810: IFFALSE 13814
// exit ;
13812: GO 13843
// for i in tmp do
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_VAR 0 2
13823: PUSH
13824: FOR_IN
13825: IFFALSE 13841
// SetBLevel ( i , 10 ) ;
13827: LD_VAR 0 1
13831: PPUSH
13832: LD_INT 10
13834: PPUSH
13835: CALL_OW 241
13839: GO 13824
13841: POP
13842: POP
// end ;
13843: PPOPN 2
13845: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13846: LD_EXP 27
13850: PUSH
13851: LD_EXP 44
13855: AND
13856: IFFALSE 13967
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
13865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13866: LD_ADDR_VAR 0 3
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_OWVAR 2
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 25
13885: PUSH
13886: LD_INT 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PPUSH
13897: CALL_OW 69
13901: ST_TO_ADDR
// if not tmp then
13902: LD_VAR 0 3
13906: NOT
13907: IFFALSE 13911
// exit ;
13909: GO 13967
// un := tmp [ rand ( 1 , tmp ) ] ;
13911: LD_ADDR_VAR 0 2
13915: PUSH
13916: LD_VAR 0 3
13920: PUSH
13921: LD_INT 1
13923: PPUSH
13924: LD_VAR 0 3
13928: PPUSH
13929: CALL_OW 12
13933: ARRAY
13934: ST_TO_ADDR
// if Crawls ( un ) then
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 318
13944: IFFALSE 13955
// ComWalk ( un ) ;
13946: LD_VAR 0 2
13950: PPUSH
13951: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13955: LD_VAR 0 2
13959: PPUSH
13960: LD_INT 5
13962: PPUSH
13963: CALL_OW 336
// end ;
13967: PPOPN 3
13969: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13970: LD_EXP 27
13974: PUSH
13975: LD_EXP 45
13979: AND
13980: PUSH
13981: LD_OWVAR 67
13985: PUSH
13986: LD_INT 4
13988: LESS
13989: AND
13990: IFFALSE 14009
13992: GO 13994
13994: DISABLE
// begin Difficulty := Difficulty + 1 ;
13995: LD_ADDR_OWVAR 67
13999: PUSH
14000: LD_OWVAR 67
14004: PUSH
14005: LD_INT 1
14007: PLUS
14008: ST_TO_ADDR
// end ;
14009: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14010: LD_EXP 27
14014: PUSH
14015: LD_EXP 46
14019: AND
14020: IFFALSE 14123
14022: GO 14024
14024: DISABLE
14025: LD_INT 0
14027: PPUSH
// begin for i := 1 to 5 do
14028: LD_ADDR_VAR 0 1
14032: PUSH
14033: DOUBLE
14034: LD_INT 1
14036: DEC
14037: ST_TO_ADDR
14038: LD_INT 5
14040: PUSH
14041: FOR_TO
14042: IFFALSE 14121
// begin uc_nation := nation_nature ;
14044: LD_ADDR_OWVAR 21
14048: PUSH
14049: LD_INT 0
14051: ST_TO_ADDR
// uc_side := 0 ;
14052: LD_ADDR_OWVAR 20
14056: PUSH
14057: LD_INT 0
14059: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14060: LD_ADDR_OWVAR 29
14064: PUSH
14065: LD_INT 12
14067: PUSH
14068: LD_INT 12
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: ST_TO_ADDR
// hc_agressivity := 20 ;
14075: LD_ADDR_OWVAR 35
14079: PUSH
14080: LD_INT 20
14082: ST_TO_ADDR
// hc_class := class_tiger ;
14083: LD_ADDR_OWVAR 28
14087: PUSH
14088: LD_INT 14
14090: ST_TO_ADDR
// hc_gallery :=  ;
14091: LD_ADDR_OWVAR 33
14095: PUSH
14096: LD_STRING 
14098: ST_TO_ADDR
// hc_name :=  ;
14099: LD_ADDR_OWVAR 26
14103: PUSH
14104: LD_STRING 
14106: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14107: CALL_OW 44
14111: PPUSH
14112: LD_INT 0
14114: PPUSH
14115: CALL_OW 51
// end ;
14119: GO 14041
14121: POP
14122: POP
// end ;
14123: PPOPN 1
14125: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14126: LD_EXP 27
14130: PUSH
14131: LD_EXP 47
14135: AND
14136: IFFALSE 14145
14138: GO 14140
14140: DISABLE
// StreamSibBomb ;
14141: CALL 14146 0 0
14145: END
// export function StreamSibBomb ; var i , x , y ; begin
14146: LD_INT 0
14148: PPUSH
14149: PPUSH
14150: PPUSH
14151: PPUSH
// result := false ;
14152: LD_ADDR_VAR 0 1
14156: PUSH
14157: LD_INT 0
14159: ST_TO_ADDR
// for i := 1 to 16 do
14160: LD_ADDR_VAR 0 2
14164: PUSH
14165: DOUBLE
14166: LD_INT 1
14168: DEC
14169: ST_TO_ADDR
14170: LD_INT 16
14172: PUSH
14173: FOR_TO
14174: IFFALSE 14373
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_INT 10
14183: PUSH
14184: LD_INT 20
14186: PUSH
14187: LD_INT 30
14189: PUSH
14190: LD_INT 40
14192: PUSH
14193: LD_INT 50
14195: PUSH
14196: LD_INT 60
14198: PUSH
14199: LD_INT 70
14201: PUSH
14202: LD_INT 80
14204: PUSH
14205: LD_INT 90
14207: PUSH
14208: LD_INT 100
14210: PUSH
14211: LD_INT 110
14213: PUSH
14214: LD_INT 120
14216: PUSH
14217: LD_INT 130
14219: PUSH
14220: LD_INT 140
14222: PUSH
14223: LD_INT 150
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 1
14245: PPUSH
14246: LD_INT 15
14248: PPUSH
14249: CALL_OW 12
14253: ARRAY
14254: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14255: LD_ADDR_VAR 0 4
14259: PUSH
14260: LD_INT 10
14262: PUSH
14263: LD_INT 20
14265: PUSH
14266: LD_INT 30
14268: PUSH
14269: LD_INT 40
14271: PUSH
14272: LD_INT 50
14274: PUSH
14275: LD_INT 60
14277: PUSH
14278: LD_INT 70
14280: PUSH
14281: LD_INT 80
14283: PUSH
14284: LD_INT 90
14286: PUSH
14287: LD_INT 100
14289: PUSH
14290: LD_INT 110
14292: PUSH
14293: LD_INT 120
14295: PUSH
14296: LD_INT 130
14298: PUSH
14299: LD_INT 140
14301: PUSH
14302: LD_INT 150
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 1
14324: PPUSH
14325: LD_INT 15
14327: PPUSH
14328: CALL_OW 12
14332: ARRAY
14333: ST_TO_ADDR
// if ValidHex ( x , y ) then
14334: LD_VAR 0 3
14338: PPUSH
14339: LD_VAR 0 4
14343: PPUSH
14344: CALL_OW 488
14348: IFFALSE 14371
// begin result := [ x , y ] ;
14350: LD_ADDR_VAR 0 1
14354: PUSH
14355: LD_VAR 0 3
14359: PUSH
14360: LD_VAR 0 4
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: ST_TO_ADDR
// break ;
14369: GO 14373
// end ; end ;
14371: GO 14173
14373: POP
14374: POP
// if result then
14375: LD_VAR 0 1
14379: IFFALSE 14439
// begin ToLua ( playSibBomb() ) ;
14381: LD_STRING playSibBomb()
14383: PPUSH
14384: CALL_OW 559
// wait ( 0 0$14 ) ;
14388: LD_INT 490
14390: PPUSH
14391: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14395: LD_VAR 0 1
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_VAR 0 1
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PPUSH
14413: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14417: LD_VAR 0 1
14421: PUSH
14422: LD_INT 1
14424: ARRAY
14425: PPUSH
14426: LD_VAR 0 1
14430: PUSH
14431: LD_INT 2
14433: ARRAY
14434: PPUSH
14435: CALL_OW 429
// end ; end ;
14439: LD_VAR 0 1
14443: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14444: LD_EXP 27
14448: PUSH
14449: LD_EXP 49
14453: AND
14454: IFFALSE 14466
14456: GO 14458
14458: DISABLE
// YouLost (  ) ;
14459: LD_STRING 
14461: PPUSH
14462: CALL_OW 104
14466: END
// every 0 0$1 trigger StreamModeActive and sFog do
14467: LD_EXP 27
14471: PUSH
14472: LD_EXP 48
14476: AND
14477: IFFALSE 14491
14479: GO 14481
14481: DISABLE
// FogOff ( your_side ) ;
14482: LD_OWVAR 2
14486: PPUSH
14487: CALL_OW 344
14491: END
// every 0 0$1 trigger StreamModeActive and sSun do
14492: LD_EXP 27
14496: PUSH
14497: LD_EXP 50
14501: AND
14502: IFFALSE 14530
14504: GO 14506
14506: DISABLE
// begin solar_recharge_percent := 0 ;
14507: LD_ADDR_OWVAR 79
14511: PUSH
14512: LD_INT 0
14514: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14515: LD_INT 10500
14517: PPUSH
14518: CALL_OW 67
// solar_recharge_percent := 100 ;
14522: LD_ADDR_OWVAR 79
14526: PUSH
14527: LD_INT 100
14529: ST_TO_ADDR
// end ;
14530: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14531: LD_EXP 27
14535: PUSH
14536: LD_EXP 51
14540: AND
14541: IFFALSE 14780
14543: GO 14545
14545: DISABLE
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
14550: PPUSH
// begin tmp := [ ] ;
14551: LD_ADDR_VAR 0 3
14555: PUSH
14556: EMPTY
14557: ST_TO_ADDR
// for i := 1 to 6 do
14558: LD_ADDR_VAR 0 1
14562: PUSH
14563: DOUBLE
14564: LD_INT 1
14566: DEC
14567: ST_TO_ADDR
14568: LD_INT 6
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14677
// begin uc_nation := nation_nature ;
14574: LD_ADDR_OWVAR 21
14578: PUSH
14579: LD_INT 0
14581: ST_TO_ADDR
// uc_side := 0 ;
14582: LD_ADDR_OWVAR 20
14586: PUSH
14587: LD_INT 0
14589: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14590: LD_ADDR_OWVAR 29
14594: PUSH
14595: LD_INT 12
14597: PUSH
14598: LD_INT 12
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: ST_TO_ADDR
// hc_agressivity := 20 ;
14605: LD_ADDR_OWVAR 35
14609: PUSH
14610: LD_INT 20
14612: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14613: LD_ADDR_OWVAR 28
14617: PUSH
14618: LD_INT 17
14620: ST_TO_ADDR
// hc_gallery :=  ;
14621: LD_ADDR_OWVAR 33
14625: PUSH
14626: LD_STRING 
14628: ST_TO_ADDR
// hc_name :=  ;
14629: LD_ADDR_OWVAR 26
14633: PUSH
14634: LD_STRING 
14636: ST_TO_ADDR
// un := CreateHuman ;
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: CALL_OW 44
14646: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14647: LD_VAR 0 2
14651: PPUSH
14652: LD_INT 1
14654: PPUSH
14655: CALL_OW 51
// tmp := tmp ^ un ;
14659: LD_ADDR_VAR 0 3
14663: PUSH
14664: LD_VAR 0 3
14668: PUSH
14669: LD_VAR 0 2
14673: ADD
14674: ST_TO_ADDR
// end ;
14675: GO 14571
14677: POP
14678: POP
// repeat wait ( 0 0$1 ) ;
14679: LD_INT 35
14681: PPUSH
14682: CALL_OW 67
// for un in tmp do
14686: LD_ADDR_VAR 0 2
14690: PUSH
14691: LD_VAR 0 3
14695: PUSH
14696: FOR_IN
14697: IFFALSE 14771
// begin if IsDead ( un ) then
14699: LD_VAR 0 2
14703: PPUSH
14704: CALL_OW 301
14708: IFFALSE 14728
// begin tmp := tmp diff un ;
14710: LD_ADDR_VAR 0 3
14714: PUSH
14715: LD_VAR 0 3
14719: PUSH
14720: LD_VAR 0 2
14724: DIFF
14725: ST_TO_ADDR
// continue ;
14726: GO 14696
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14728: LD_VAR 0 2
14732: PPUSH
14733: LD_INT 3
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_INT 0
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PPUSH
14750: CALL_OW 69
14754: PPUSH
14755: LD_VAR 0 2
14759: PPUSH
14760: CALL_OW 74
14764: PPUSH
14765: CALL_OW 115
// end ;
14769: GO 14696
14771: POP
14772: POP
// until not tmp ;
14773: LD_VAR 0 3
14777: NOT
14778: IFFALSE 14679
// end ;
14780: PPOPN 3
14782: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14783: LD_EXP 27
14787: PUSH
14788: LD_EXP 52
14792: AND
14793: IFFALSE 14847
14795: GO 14797
14797: DISABLE
// begin ToLua ( displayTroll(); ) ;
14798: LD_STRING displayTroll();
14800: PPUSH
14801: CALL_OW 559
// wait ( 3 3$00 ) ;
14805: LD_INT 6300
14807: PPUSH
14808: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14812: LD_STRING hideTroll();
14814: PPUSH
14815: CALL_OW 559
// wait ( 1 1$00 ) ;
14819: LD_INT 2100
14821: PPUSH
14822: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14826: LD_STRING displayTroll();
14828: PPUSH
14829: CALL_OW 559
// wait ( 1 1$00 ) ;
14833: LD_INT 2100
14835: PPUSH
14836: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14840: LD_STRING hideTroll();
14842: PPUSH
14843: CALL_OW 559
// end ;
14847: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14848: LD_EXP 27
14852: PUSH
14853: LD_EXP 53
14857: AND
14858: IFFALSE 14921
14860: GO 14862
14862: DISABLE
14863: LD_INT 0
14865: PPUSH
// begin p := 0 ;
14866: LD_ADDR_VAR 0 1
14870: PUSH
14871: LD_INT 0
14873: ST_TO_ADDR
// repeat game_speed := 1 ;
14874: LD_ADDR_OWVAR 65
14878: PUSH
14879: LD_INT 1
14881: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14882: LD_INT 35
14884: PPUSH
14885: CALL_OW 67
// p := p + 1 ;
14889: LD_ADDR_VAR 0 1
14893: PUSH
14894: LD_VAR 0 1
14898: PUSH
14899: LD_INT 1
14901: PLUS
14902: ST_TO_ADDR
// until p >= 60 ;
14903: LD_VAR 0 1
14907: PUSH
14908: LD_INT 60
14910: GREATEREQUAL
14911: IFFALSE 14874
// game_speed := 4 ;
14913: LD_ADDR_OWVAR 65
14917: PUSH
14918: LD_INT 4
14920: ST_TO_ADDR
// end ;
14921: PPOPN 1
14923: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14924: LD_EXP 27
14928: PUSH
14929: LD_EXP 54
14933: AND
14934: IFFALSE 15080
14936: GO 14938
14938: DISABLE
14939: LD_INT 0
14941: PPUSH
14942: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14943: LD_ADDR_VAR 0 1
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_OWVAR 2
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 2
14962: PUSH
14963: LD_INT 30
14965: PUSH
14966: LD_INT 0
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 30
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PPUSH
14992: CALL_OW 69
14996: ST_TO_ADDR
// if not depot then
14997: LD_VAR 0 1
15001: NOT
15002: IFFALSE 15006
// exit ;
15004: GO 15080
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15006: LD_ADDR_VAR 0 2
15010: PUSH
15011: LD_VAR 0 1
15015: PUSH
15016: LD_INT 1
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: CALL_OW 12
15028: ARRAY
15029: PPUSH
15030: CALL_OW 274
15034: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15035: LD_VAR 0 2
15039: PPUSH
15040: LD_INT 1
15042: PPUSH
15043: LD_INT 0
15045: PPUSH
15046: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_INT 2
15057: PPUSH
15058: LD_INT 0
15060: PPUSH
15061: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15065: LD_VAR 0 2
15069: PPUSH
15070: LD_INT 3
15072: PPUSH
15073: LD_INT 0
15075: PPUSH
15076: CALL_OW 277
// end ;
15080: PPOPN 2
15082: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15083: LD_EXP 27
15087: PUSH
15088: LD_EXP 55
15092: AND
15093: IFFALSE 15190
15095: GO 15097
15097: DISABLE
15098: LD_INT 0
15100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15101: LD_ADDR_VAR 0 1
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_OWVAR 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 21
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 3
15130: PUSH
15131: LD_INT 23
15133: PUSH
15134: LD_INT 0
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: PPUSH
15150: CALL_OW 69
15154: ST_TO_ADDR
// if not tmp then
15155: LD_VAR 0 1
15159: NOT
15160: IFFALSE 15164
// exit ;
15162: GO 15190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15164: LD_VAR 0 1
15168: PUSH
15169: LD_INT 1
15171: PPUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 12
15181: ARRAY
15182: PPUSH
15183: LD_INT 200
15185: PPUSH
15186: CALL_OW 234
// end ;
15190: PPOPN 1
15192: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15193: LD_EXP 27
15197: PUSH
15198: LD_EXP 56
15202: AND
15203: IFFALSE 15282
15205: GO 15207
15207: DISABLE
15208: LD_INT 0
15210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15211: LD_ADDR_VAR 0 1
15215: PUSH
15216: LD_INT 22
15218: PUSH
15219: LD_OWVAR 2
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 21
15230: PUSH
15231: LD_INT 2
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 69
15246: ST_TO_ADDR
// if not tmp then
15247: LD_VAR 0 1
15251: NOT
15252: IFFALSE 15256
// exit ;
15254: GO 15282
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 1
15263: PPUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 12
15273: ARRAY
15274: PPUSH
15275: LD_INT 60
15277: PPUSH
15278: CALL_OW 234
// end ;
15282: PPOPN 1
15284: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15285: LD_EXP 27
15289: PUSH
15290: LD_EXP 57
15294: AND
15295: IFFALSE 15394
15297: GO 15299
15299: DISABLE
15300: LD_INT 0
15302: PPUSH
15303: PPUSH
// begin enable ;
15304: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15305: LD_ADDR_VAR 0 1
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_OWVAR 2
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 61
15324: PUSH
15325: EMPTY
15326: LIST
15327: PUSH
15328: LD_INT 33
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PPUSH
15343: CALL_OW 69
15347: ST_TO_ADDR
// if not tmp then
15348: LD_VAR 0 1
15352: NOT
15353: IFFALSE 15357
// exit ;
15355: GO 15394
// for i in tmp do
15357: LD_ADDR_VAR 0 2
15361: PUSH
15362: LD_VAR 0 1
15366: PUSH
15367: FOR_IN
15368: IFFALSE 15392
// if IsControledBy ( i ) then
15370: LD_VAR 0 2
15374: PPUSH
15375: CALL_OW 312
15379: IFFALSE 15390
// ComUnlink ( i ) ;
15381: LD_VAR 0 2
15385: PPUSH
15386: CALL_OW 136
15390: GO 15367
15392: POP
15393: POP
// end ;
15394: PPOPN 2
15396: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15397: LD_EXP 27
15401: PUSH
15402: LD_EXP 58
15406: AND
15407: IFFALSE 15547
15409: GO 15411
15411: DISABLE
15412: LD_INT 0
15414: PPUSH
15415: PPUSH
// begin ToLua ( displayPowell(); ) ;
15416: LD_STRING displayPowell();
15418: PPUSH
15419: CALL_OW 559
// uc_side := 0 ;
15423: LD_ADDR_OWVAR 20
15427: PUSH
15428: LD_INT 0
15430: ST_TO_ADDR
// uc_nation := 2 ;
15431: LD_ADDR_OWVAR 21
15435: PUSH
15436: LD_INT 2
15438: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15439: LD_ADDR_OWVAR 37
15443: PUSH
15444: LD_INT 14
15446: ST_TO_ADDR
// vc_engine := engine_siberite ;
15447: LD_ADDR_OWVAR 39
15451: PUSH
15452: LD_INT 3
15454: ST_TO_ADDR
// vc_control := control_apeman ;
15455: LD_ADDR_OWVAR 38
15459: PUSH
15460: LD_INT 5
15462: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15463: LD_ADDR_OWVAR 40
15467: PUSH
15468: LD_INT 29
15470: ST_TO_ADDR
// un := CreateVehicle ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: CALL_OW 45
15480: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15481: LD_VAR 0 2
15485: PPUSH
15486: LD_INT 1
15488: PPUSH
15489: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15493: LD_INT 35
15495: PPUSH
15496: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15500: LD_VAR 0 2
15504: PPUSH
15505: LD_INT 22
15507: PUSH
15508: LD_OWVAR 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: PPUSH
15522: LD_VAR 0 2
15526: PPUSH
15527: CALL_OW 74
15531: PPUSH
15532: CALL_OW 115
// until IsDead ( un ) ;
15536: LD_VAR 0 2
15540: PPUSH
15541: CALL_OW 301
15545: IFFALSE 15493
// end ;
15547: PPOPN 2
15549: END
// every 0 0$1 trigger StreamModeActive and sStu do
15550: LD_EXP 27
15554: PUSH
15555: LD_EXP 66
15559: AND
15560: IFFALSE 15576
15562: GO 15564
15564: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15565: LD_STRING displayStucuk();
15567: PPUSH
15568: CALL_OW 559
// ResetFog ;
15572: CALL_OW 335
// end ;
15576: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15577: LD_EXP 27
15581: PUSH
15582: LD_EXP 59
15586: AND
15587: IFFALSE 15728
15589: GO 15591
15591: DISABLE
15592: LD_INT 0
15594: PPUSH
15595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15596: LD_ADDR_VAR 0 2
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_OWVAR 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 21
15615: PUSH
15616: LD_INT 1
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 69
15631: ST_TO_ADDR
// if not tmp then
15632: LD_VAR 0 2
15636: NOT
15637: IFFALSE 15641
// exit ;
15639: GO 15728
// un := tmp [ rand ( 1 , tmp ) ] ;
15641: LD_ADDR_VAR 0 1
15645: PUSH
15646: LD_VAR 0 2
15650: PUSH
15651: LD_INT 1
15653: PPUSH
15654: LD_VAR 0 2
15658: PPUSH
15659: CALL_OW 12
15663: ARRAY
15664: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15665: LD_VAR 0 1
15669: PPUSH
15670: LD_INT 0
15672: PPUSH
15673: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15677: LD_VAR 0 1
15681: PPUSH
15682: LD_OWVAR 3
15686: PUSH
15687: LD_VAR 0 1
15691: DIFF
15692: PPUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 74
15702: PPUSH
15703: CALL_OW 115
// wait ( 0 0$20 ) ;
15707: LD_INT 700
15709: PPUSH
15710: CALL_OW 67
// SetSide ( un , your_side ) ;
15714: LD_VAR 0 1
15718: PPUSH
15719: LD_OWVAR 2
15723: PPUSH
15724: CALL_OW 235
// end ;
15728: PPOPN 2
15730: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15731: LD_EXP 27
15735: PUSH
15736: LD_EXP 60
15740: AND
15741: IFFALSE 15847
15743: GO 15745
15745: DISABLE
15746: LD_INT 0
15748: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15749: LD_ADDR_VAR 0 1
15753: PUSH
15754: LD_INT 22
15756: PUSH
15757: LD_OWVAR 2
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 2
15768: PUSH
15769: LD_INT 30
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 30
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PPUSH
15798: CALL_OW 69
15802: ST_TO_ADDR
// if not depot then
15803: LD_VAR 0 1
15807: NOT
15808: IFFALSE 15812
// exit ;
15810: GO 15847
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15812: LD_VAR 0 1
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: CALL_OW 250
15825: PPUSH
15826: LD_VAR 0 1
15830: PUSH
15831: LD_INT 1
15833: ARRAY
15834: PPUSH
15835: CALL_OW 251
15839: PPUSH
15840: LD_INT 70
15842: PPUSH
15843: CALL_OW 495
// end ;
15847: PPOPN 1
15849: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15850: LD_EXP 27
15854: PUSH
15855: LD_EXP 61
15859: AND
15860: IFFALSE 16071
15862: GO 15864
15864: DISABLE
15865: LD_INT 0
15867: PPUSH
15868: PPUSH
15869: PPUSH
15870: PPUSH
15871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15872: LD_ADDR_VAR 0 5
15876: PUSH
15877: LD_INT 22
15879: PUSH
15880: LD_OWVAR 2
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 21
15891: PUSH
15892: LD_INT 1
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PPUSH
15903: CALL_OW 69
15907: ST_TO_ADDR
// if not tmp then
15908: LD_VAR 0 5
15912: NOT
15913: IFFALSE 15917
// exit ;
15915: GO 16071
// for i in tmp do
15917: LD_ADDR_VAR 0 1
15921: PUSH
15922: LD_VAR 0 5
15926: PUSH
15927: FOR_IN
15928: IFFALSE 16069
// begin d := rand ( 0 , 5 ) ;
15930: LD_ADDR_VAR 0 4
15934: PUSH
15935: LD_INT 0
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 12
15945: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15946: LD_ADDR_VAR 0 2
15950: PUSH
15951: LD_VAR 0 1
15955: PPUSH
15956: CALL_OW 250
15960: PPUSH
15961: LD_VAR 0 4
15965: PPUSH
15966: LD_INT 3
15968: PPUSH
15969: LD_INT 12
15971: PPUSH
15972: CALL_OW 12
15976: PPUSH
15977: CALL_OW 272
15981: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15982: LD_ADDR_VAR 0 3
15986: PUSH
15987: LD_VAR 0 1
15991: PPUSH
15992: CALL_OW 251
15996: PPUSH
15997: LD_VAR 0 4
16001: PPUSH
16002: LD_INT 3
16004: PPUSH
16005: LD_INT 12
16007: PPUSH
16008: CALL_OW 12
16012: PPUSH
16013: CALL_OW 273
16017: ST_TO_ADDR
// if ValidHex ( x , y ) then
16018: LD_VAR 0 2
16022: PPUSH
16023: LD_VAR 0 3
16027: PPUSH
16028: CALL_OW 488
16032: IFFALSE 16067
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_VAR 0 2
16043: PPUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_INT 3
16051: PPUSH
16052: LD_INT 6
16054: PPUSH
16055: CALL_OW 12
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: CALL_OW 483
// end ;
16067: GO 15927
16069: POP
16070: POP
// end ;
16071: PPOPN 5
16073: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16074: LD_EXP 27
16078: PUSH
16079: LD_EXP 62
16083: AND
16084: IFFALSE 16178
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16093: LD_ADDR_VAR 0 2
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_OWVAR 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 32
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 2
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL_OW 69
16139: ST_TO_ADDR
// if not tmp then
16140: LD_VAR 0 2
16144: NOT
16145: IFFALSE 16149
// exit ;
16147: GO 16178
// for i in tmp do
16149: LD_ADDR_VAR 0 1
16153: PUSH
16154: LD_VAR 0 2
16158: PUSH
16159: FOR_IN
16160: IFFALSE 16176
// SetFuel ( i , 0 ) ;
16162: LD_VAR 0 1
16166: PPUSH
16167: LD_INT 0
16169: PPUSH
16170: CALL_OW 240
16174: GO 16159
16176: POP
16177: POP
// end ;
16178: PPOPN 2
16180: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16181: LD_EXP 27
16185: PUSH
16186: LD_EXP 63
16190: AND
16191: IFFALSE 16257
16193: GO 16195
16195: DISABLE
16196: LD_INT 0
16198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16199: LD_ADDR_VAR 0 1
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 29
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PPUSH
16230: CALL_OW 69
16234: ST_TO_ADDR
// if not tmp then
16235: LD_VAR 0 1
16239: NOT
16240: IFFALSE 16244
// exit ;
16242: GO 16257
// DestroyUnit ( tmp [ 1 ] ) ;
16244: LD_VAR 0 1
16248: PUSH
16249: LD_INT 1
16251: ARRAY
16252: PPUSH
16253: CALL_OW 65
// end ;
16257: PPOPN 1
16259: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16260: LD_EXP 27
16264: PUSH
16265: LD_EXP 65
16269: AND
16270: IFFALSE 16399
16272: GO 16274
16274: DISABLE
16275: LD_INT 0
16277: PPUSH
// begin uc_side := 0 ;
16278: LD_ADDR_OWVAR 20
16282: PUSH
16283: LD_INT 0
16285: ST_TO_ADDR
// uc_nation := nation_arabian ;
16286: LD_ADDR_OWVAR 21
16290: PUSH
16291: LD_INT 2
16293: ST_TO_ADDR
// hc_gallery :=  ;
16294: LD_ADDR_OWVAR 33
16298: PUSH
16299: LD_STRING 
16301: ST_TO_ADDR
// hc_name :=  ;
16302: LD_ADDR_OWVAR 26
16306: PUSH
16307: LD_STRING 
16309: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16310: LD_INT 1
16312: PPUSH
16313: LD_INT 11
16315: PPUSH
16316: LD_INT 10
16318: PPUSH
16319: CALL_OW 380
// un := CreateHuman ;
16323: LD_ADDR_VAR 0 1
16327: PUSH
16328: CALL_OW 44
16332: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16333: LD_VAR 0 1
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16345: LD_INT 35
16347: PPUSH
16348: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16352: LD_VAR 0 1
16356: PPUSH
16357: LD_INT 22
16359: PUSH
16360: LD_OWVAR 2
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: CALL_OW 69
16373: PPUSH
16374: LD_VAR 0 1
16378: PPUSH
16379: CALL_OW 74
16383: PPUSH
16384: CALL_OW 115
// until IsDead ( un ) ;
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 301
16397: IFFALSE 16345
// end ;
16399: PPOPN 1
16401: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16402: LD_EXP 27
16406: PUSH
16407: LD_EXP 67
16411: AND
16412: IFFALSE 16424
16414: GO 16416
16416: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16417: LD_STRING earthquake(getX(game), 0, 32)
16419: PPUSH
16420: CALL_OW 559
16424: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16425: LD_EXP 27
16429: PUSH
16430: LD_EXP 68
16434: AND
16435: IFFALSE 16526
16437: GO 16439
16439: DISABLE
16440: LD_INT 0
16442: PPUSH
// begin enable ;
16443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16444: LD_ADDR_VAR 0 1
16448: PUSH
16449: LD_INT 22
16451: PUSH
16452: LD_OWVAR 2
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 21
16463: PUSH
16464: LD_INT 2
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 33
16473: PUSH
16474: LD_INT 3
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 69
16490: ST_TO_ADDR
// if not tmp then
16491: LD_VAR 0 1
16495: NOT
16496: IFFALSE 16500
// exit ;
16498: GO 16526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16500: LD_VAR 0 1
16504: PUSH
16505: LD_INT 1
16507: PPUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 12
16517: ARRAY
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL_OW 234
// end ;
16526: PPOPN 1
16528: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16529: LD_EXP 27
16533: PUSH
16534: LD_EXP 69
16538: AND
16539: IFFALSE 16680
16541: GO 16543
16543: DISABLE
16544: LD_INT 0
16546: PPUSH
16547: PPUSH
16548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16549: LD_ADDR_VAR 0 3
16553: PUSH
16554: LD_INT 22
16556: PUSH
16557: LD_OWVAR 2
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 25
16568: PUSH
16569: LD_INT 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: ST_TO_ADDR
// if not tmp then
16585: LD_VAR 0 3
16589: NOT
16590: IFFALSE 16594
// exit ;
16592: GO 16680
// un := tmp [ rand ( 1 , tmp ) ] ;
16594: LD_ADDR_VAR 0 2
16598: PUSH
16599: LD_VAR 0 3
16603: PUSH
16604: LD_INT 1
16606: PPUSH
16607: LD_VAR 0 3
16611: PPUSH
16612: CALL_OW 12
16616: ARRAY
16617: ST_TO_ADDR
// if Crawls ( un ) then
16618: LD_VAR 0 2
16622: PPUSH
16623: CALL_OW 318
16627: IFFALSE 16638
// ComWalk ( un ) ;
16629: LD_VAR 0 2
16633: PPUSH
16634: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16638: LD_VAR 0 2
16642: PPUSH
16643: LD_INT 9
16645: PPUSH
16646: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16650: LD_INT 28
16652: PPUSH
16653: LD_OWVAR 2
16657: PPUSH
16658: LD_INT 2
16660: PPUSH
16661: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16665: LD_INT 29
16667: PPUSH
16668: LD_OWVAR 2
16672: PPUSH
16673: LD_INT 2
16675: PPUSH
16676: CALL_OW 322
// end ;
16680: PPOPN 3
16682: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16683: LD_EXP 27
16687: PUSH
16688: LD_EXP 70
16692: AND
16693: IFFALSE 16804
16695: GO 16697
16697: DISABLE
16698: LD_INT 0
16700: PPUSH
16701: PPUSH
16702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16703: LD_ADDR_VAR 0 3
16707: PUSH
16708: LD_INT 22
16710: PUSH
16711: LD_OWVAR 2
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 25
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 69
16738: ST_TO_ADDR
// if not tmp then
16739: LD_VAR 0 3
16743: NOT
16744: IFFALSE 16748
// exit ;
16746: GO 16804
// un := tmp [ rand ( 1 , tmp ) ] ;
16748: LD_ADDR_VAR 0 2
16752: PUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_INT 1
16760: PPUSH
16761: LD_VAR 0 3
16765: PPUSH
16766: CALL_OW 12
16770: ARRAY
16771: ST_TO_ADDR
// if Crawls ( un ) then
16772: LD_VAR 0 2
16776: PPUSH
16777: CALL_OW 318
16781: IFFALSE 16792
// ComWalk ( un ) ;
16783: LD_VAR 0 2
16787: PPUSH
16788: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16792: LD_VAR 0 2
16796: PPUSH
16797: LD_INT 8
16799: PPUSH
16800: CALL_OW 336
// end ;
16804: PPOPN 3
16806: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16807: LD_EXP 27
16811: PUSH
16812: LD_EXP 71
16816: AND
16817: IFFALSE 16961
16819: GO 16821
16821: DISABLE
16822: LD_INT 0
16824: PPUSH
16825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16826: LD_ADDR_VAR 0 2
16830: PUSH
16831: LD_INT 22
16833: PUSH
16834: LD_OWVAR 2
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 21
16845: PUSH
16846: LD_INT 2
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: LD_INT 34
16858: PUSH
16859: LD_INT 12
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 34
16868: PUSH
16869: LD_INT 51
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 34
16878: PUSH
16879: LD_INT 32
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: PPUSH
16897: CALL_OW 69
16901: ST_TO_ADDR
// if not tmp then
16902: LD_VAR 0 2
16906: NOT
16907: IFFALSE 16911
// exit ;
16909: GO 16961
// for i in tmp do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_VAR 0 2
16920: PUSH
16921: FOR_IN
16922: IFFALSE 16959
// if GetCargo ( i , mat_artifact ) = 0 then
16924: LD_VAR 0 1
16928: PPUSH
16929: LD_INT 4
16931: PPUSH
16932: CALL_OW 289
16936: PUSH
16937: LD_INT 0
16939: EQUAL
16940: IFFALSE 16957
// SetCargo ( i , mat_siberit , 100 ) ;
16942: LD_VAR 0 1
16946: PPUSH
16947: LD_INT 3
16949: PPUSH
16950: LD_INT 100
16952: PPUSH
16953: CALL_OW 290
16957: GO 16921
16959: POP
16960: POP
// end ;
16961: PPOPN 2
16963: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16964: LD_EXP 27
16968: PUSH
16969: LD_EXP 72
16973: AND
16974: IFFALSE 17157
16976: GO 16978
16978: DISABLE
16979: LD_INT 0
16981: PPUSH
16982: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16983: LD_ADDR_VAR 0 2
16987: PUSH
16988: LD_INT 22
16990: PUSH
16991: LD_OWVAR 2
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 69
17004: ST_TO_ADDR
// if not tmp then
17005: LD_VAR 0 2
17009: NOT
17010: IFFALSE 17014
// exit ;
17012: GO 17157
// for i := 1 to 2 do
17014: LD_ADDR_VAR 0 1
17018: PUSH
17019: DOUBLE
17020: LD_INT 1
17022: DEC
17023: ST_TO_ADDR
17024: LD_INT 2
17026: PUSH
17027: FOR_TO
17028: IFFALSE 17155
// begin uc_side := your_side ;
17030: LD_ADDR_OWVAR 20
17034: PUSH
17035: LD_OWVAR 2
17039: ST_TO_ADDR
// uc_nation := nation_american ;
17040: LD_ADDR_OWVAR 21
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// vc_chassis := us_morphling ;
17048: LD_ADDR_OWVAR 37
17052: PUSH
17053: LD_INT 5
17055: ST_TO_ADDR
// vc_engine := engine_siberite ;
17056: LD_ADDR_OWVAR 39
17060: PUSH
17061: LD_INT 3
17063: ST_TO_ADDR
// vc_control := control_computer ;
17064: LD_ADDR_OWVAR 38
17068: PUSH
17069: LD_INT 3
17071: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17072: LD_ADDR_OWVAR 40
17076: PUSH
17077: LD_INT 10
17079: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17080: LD_VAR 0 2
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PPUSH
17089: CALL_OW 310
17093: NOT
17094: IFFALSE 17141
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17096: CALL_OW 45
17100: PPUSH
17101: LD_VAR 0 2
17105: PUSH
17106: LD_INT 1
17108: ARRAY
17109: PPUSH
17110: CALL_OW 250
17114: PPUSH
17115: LD_VAR 0 2
17119: PUSH
17120: LD_INT 1
17122: ARRAY
17123: PPUSH
17124: CALL_OW 251
17128: PPUSH
17129: LD_INT 12
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: CALL_OW 50
17139: GO 17153
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17141: CALL_OW 45
17145: PPUSH
17146: LD_INT 1
17148: PPUSH
17149: CALL_OW 51
// end ;
17153: GO 17027
17155: POP
17156: POP
// end ;
17157: PPOPN 2
17159: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17160: LD_EXP 27
17164: PUSH
17165: LD_EXP 73
17169: AND
17170: IFFALSE 17392
17172: GO 17174
17174: DISABLE
17175: LD_INT 0
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17183: LD_ADDR_VAR 0 6
17187: PUSH
17188: LD_INT 22
17190: PUSH
17191: LD_OWVAR 2
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 21
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 3
17212: PUSH
17213: LD_INT 23
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// if not tmp then
17237: LD_VAR 0 6
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17392
// s1 := rand ( 1 , 4 ) ;
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: LD_INT 1
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: CALL_OW 12
17261: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17262: LD_ADDR_VAR 0 4
17266: PUSH
17267: LD_VAR 0 6
17271: PUSH
17272: LD_INT 1
17274: ARRAY
17275: PPUSH
17276: LD_VAR 0 2
17280: PPUSH
17281: CALL_OW 259
17285: ST_TO_ADDR
// if s1 = 1 then
17286: LD_VAR 0 2
17290: PUSH
17291: LD_INT 1
17293: EQUAL
17294: IFFALSE 17314
// s2 := rand ( 2 , 4 ) else
17296: LD_ADDR_VAR 0 3
17300: PUSH
17301: LD_INT 2
17303: PPUSH
17304: LD_INT 4
17306: PPUSH
17307: CALL_OW 12
17311: ST_TO_ADDR
17312: GO 17322
// s2 := 1 ;
17314: LD_ADDR_VAR 0 3
17318: PUSH
17319: LD_INT 1
17321: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17322: LD_ADDR_VAR 0 5
17326: PUSH
17327: LD_VAR 0 6
17331: PUSH
17332: LD_INT 1
17334: ARRAY
17335: PPUSH
17336: LD_VAR 0 3
17340: PPUSH
17341: CALL_OW 259
17345: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17346: LD_VAR 0 6
17350: PUSH
17351: LD_INT 1
17353: ARRAY
17354: PPUSH
17355: LD_VAR 0 2
17359: PPUSH
17360: LD_VAR 0 5
17364: PPUSH
17365: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17369: LD_VAR 0 6
17373: PUSH
17374: LD_INT 1
17376: ARRAY
17377: PPUSH
17378: LD_VAR 0 3
17382: PPUSH
17383: LD_VAR 0 4
17387: PPUSH
17388: CALL_OW 237
// end ;
17392: PPOPN 6
17394: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17395: LD_EXP 27
17399: PUSH
17400: LD_EXP 74
17404: AND
17405: IFFALSE 17484
17407: GO 17409
17409: DISABLE
17410: LD_INT 0
17412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_OWVAR 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 30
17432: PUSH
17433: LD_INT 3
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PPUSH
17444: CALL_OW 69
17448: ST_TO_ADDR
// if not tmp then
17449: LD_VAR 0 1
17453: NOT
17454: IFFALSE 17458
// exit ;
17456: GO 17484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17458: LD_VAR 0 1
17462: PUSH
17463: LD_INT 1
17465: PPUSH
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 12
17475: ARRAY
17476: PPUSH
17477: LD_INT 1
17479: PPUSH
17480: CALL_OW 234
// end ;
17484: PPOPN 1
17486: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17487: LD_EXP 27
17491: PUSH
17492: LD_EXP 75
17496: AND
17497: IFFALSE 17609
17499: GO 17501
17501: DISABLE
17502: LD_INT 0
17504: PPUSH
17505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17506: LD_ADDR_VAR 0 2
17510: PUSH
17511: LD_INT 22
17513: PUSH
17514: LD_OWVAR 2
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 2
17525: PUSH
17526: LD_INT 30
17528: PUSH
17529: LD_INT 27
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 30
17538: PUSH
17539: LD_INT 26
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 30
17548: PUSH
17549: LD_INT 28
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PPUSH
17566: CALL_OW 69
17570: ST_TO_ADDR
// if not tmp then
17571: LD_VAR 0 2
17575: NOT
17576: IFFALSE 17580
// exit ;
17578: GO 17609
// for i in tmp do
17580: LD_ADDR_VAR 0 1
17584: PUSH
17585: LD_VAR 0 2
17589: PUSH
17590: FOR_IN
17591: IFFALSE 17607
// SetLives ( i , 1 ) ;
17593: LD_VAR 0 1
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 234
17605: GO 17590
17607: POP
17608: POP
// end ;
17609: PPOPN 2
17611: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17612: LD_EXP 27
17616: PUSH
17617: LD_EXP 76
17621: AND
17622: IFFALSE 17909
17624: GO 17626
17626: DISABLE
17627: LD_INT 0
17629: PPUSH
17630: PPUSH
17631: PPUSH
// begin i := rand ( 1 , 7 ) ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 1
17639: PPUSH
17640: LD_INT 7
17642: PPUSH
17643: CALL_OW 12
17647: ST_TO_ADDR
// case i of 1 :
17648: LD_VAR 0 1
17652: PUSH
17653: LD_INT 1
17655: DOUBLE
17656: EQUAL
17657: IFTRUE 17661
17659: GO 17671
17661: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17662: LD_STRING earthquake(getX(game), 0, 32)
17664: PPUSH
17665: CALL_OW 559
17669: GO 17909
17671: LD_INT 2
17673: DOUBLE
17674: EQUAL
17675: IFTRUE 17679
17677: GO 17693
17679: POP
// begin ToLua ( displayStucuk(); ) ;
17680: LD_STRING displayStucuk();
17682: PPUSH
17683: CALL_OW 559
// ResetFog ;
17687: CALL_OW 335
// end ; 3 :
17691: GO 17909
17693: LD_INT 3
17695: DOUBLE
17696: EQUAL
17697: IFTRUE 17701
17699: GO 17805
17701: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17702: LD_ADDR_VAR 0 2
17706: PUSH
17707: LD_INT 22
17709: PUSH
17710: LD_OWVAR 2
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 25
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL_OW 69
17737: ST_TO_ADDR
// if not tmp then
17738: LD_VAR 0 2
17742: NOT
17743: IFFALSE 17747
// exit ;
17745: GO 17909
// un := tmp [ rand ( 1 , tmp ) ] ;
17747: LD_ADDR_VAR 0 3
17751: PUSH
17752: LD_VAR 0 2
17756: PUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_VAR 0 2
17764: PPUSH
17765: CALL_OW 12
17769: ARRAY
17770: ST_TO_ADDR
// if Crawls ( un ) then
17771: LD_VAR 0 3
17775: PPUSH
17776: CALL_OW 318
17780: IFFALSE 17791
// ComWalk ( un ) ;
17782: LD_VAR 0 3
17786: PPUSH
17787: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17791: LD_VAR 0 3
17795: PPUSH
17796: LD_INT 8
17798: PPUSH
17799: CALL_OW 336
// end ; 4 :
17803: GO 17909
17805: LD_INT 4
17807: DOUBLE
17808: EQUAL
17809: IFTRUE 17813
17811: GO 17887
17813: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17814: LD_ADDR_VAR 0 2
17818: PUSH
17819: LD_INT 22
17821: PUSH
17822: LD_OWVAR 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 30
17833: PUSH
17834: LD_INT 29
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PPUSH
17845: CALL_OW 69
17849: ST_TO_ADDR
// if not tmp then
17850: LD_VAR 0 2
17854: NOT
17855: IFFALSE 17859
// exit ;
17857: GO 17909
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17859: LD_VAR 0 2
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17872: LD_VAR 0 2
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: CALL_OW 65
// end ; 5 .. 7 :
17885: GO 17909
17887: LD_INT 5
17889: DOUBLE
17890: GREATEREQUAL
17891: IFFALSE 17899
17893: LD_INT 7
17895: DOUBLE
17896: LESSEQUAL
17897: IFTRUE 17901
17899: GO 17908
17901: POP
// StreamSibBomb ; end ;
17902: CALL 14146 0 0
17906: GO 17909
17908: POP
// end ;
17909: PPOPN 3
17911: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17912: LD_EXP 27
17916: PUSH
17917: LD_EXP 77
17921: AND
17922: IFFALSE 18078
17924: GO 17926
17926: DISABLE
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
17931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17932: LD_ADDR_VAR 0 2
17936: PUSH
17937: LD_INT 81
17939: PUSH
17940: LD_OWVAR 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: LD_INT 21
17954: PUSH
17955: LD_INT 1
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 21
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: ST_TO_ADDR
// if not tmp then
17986: LD_VAR 0 2
17990: NOT
17991: IFFALSE 17995
// exit ;
17993: GO 18078
// p := 0 ;
17995: LD_ADDR_VAR 0 3
17999: PUSH
18000: LD_INT 0
18002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18003: LD_INT 35
18005: PPUSH
18006: CALL_OW 67
// p := p + 1 ;
18010: LD_ADDR_VAR 0 3
18014: PUSH
18015: LD_VAR 0 3
18019: PUSH
18020: LD_INT 1
18022: PLUS
18023: ST_TO_ADDR
// for i in tmp do
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: LD_VAR 0 2
18033: PUSH
18034: FOR_IN
18035: IFFALSE 18066
// if GetLives ( i ) < 1000 then
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL_OW 256
18046: PUSH
18047: LD_INT 1000
18049: LESS
18050: IFFALSE 18064
// SetLives ( i , 1000 ) ;
18052: LD_VAR 0 1
18056: PPUSH
18057: LD_INT 1000
18059: PPUSH
18060: CALL_OW 234
18064: GO 18034
18066: POP
18067: POP
// until p > 20 ;
18068: LD_VAR 0 3
18072: PUSH
18073: LD_INT 20
18075: GREATER
18076: IFFALSE 18003
// end ;
18078: PPOPN 3
18080: END
// every 0 0$1 trigger StreamModeActive and sTime do
18081: LD_EXP 27
18085: PUSH
18086: LD_EXP 78
18090: AND
18091: IFFALSE 18126
18093: GO 18095
18095: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18096: LD_INT 28
18098: PPUSH
18099: LD_OWVAR 2
18103: PPUSH
18104: LD_INT 2
18106: PPUSH
18107: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18111: LD_INT 30
18113: PPUSH
18114: LD_OWVAR 2
18118: PPUSH
18119: LD_INT 2
18121: PPUSH
18122: CALL_OW 322
// end ;
18126: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18127: LD_EXP 27
18131: PUSH
18132: LD_EXP 79
18136: AND
18137: IFFALSE 18258
18139: GO 18141
18141: DISABLE
18142: LD_INT 0
18144: PPUSH
18145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18146: LD_ADDR_VAR 0 2
18150: PUSH
18151: LD_INT 22
18153: PUSH
18154: LD_OWVAR 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 21
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 3
18175: PUSH
18176: LD_INT 23
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: PPUSH
18195: CALL_OW 69
18199: ST_TO_ADDR
// if not tmp then
18200: LD_VAR 0 2
18204: NOT
18205: IFFALSE 18209
// exit ;
18207: GO 18258
// for i in tmp do
18209: LD_ADDR_VAR 0 1
18213: PUSH
18214: LD_VAR 0 2
18218: PUSH
18219: FOR_IN
18220: IFFALSE 18256
// begin if Crawls ( i ) then
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 318
18231: IFFALSE 18242
// ComWalk ( i ) ;
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 138
// SetClass ( i , 2 ) ;
18242: LD_VAR 0 1
18246: PPUSH
18247: LD_INT 2
18249: PPUSH
18250: CALL_OW 336
// end ;
18254: GO 18219
18256: POP
18257: POP
// end ;
18258: PPOPN 2
18260: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18261: LD_EXP 27
18265: PUSH
18266: LD_EXP 80
18270: AND
18271: IFFALSE 18559
18273: GO 18275
18275: DISABLE
18276: LD_INT 0
18278: PPUSH
18279: PPUSH
18280: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18281: LD_OWVAR 2
18285: PPUSH
18286: LD_INT 9
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: LD_INT 1
18294: PPUSH
18295: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18299: LD_INT 9
18301: PPUSH
18302: LD_OWVAR 2
18306: PPUSH
18307: CALL_OW 343
// uc_side := 9 ;
18311: LD_ADDR_OWVAR 20
18315: PUSH
18316: LD_INT 9
18318: ST_TO_ADDR
// uc_nation := 2 ;
18319: LD_ADDR_OWVAR 21
18323: PUSH
18324: LD_INT 2
18326: ST_TO_ADDR
// hc_name := Dark Warrior ;
18327: LD_ADDR_OWVAR 26
18331: PUSH
18332: LD_STRING Dark Warrior
18334: ST_TO_ADDR
// hc_gallery :=  ;
18335: LD_ADDR_OWVAR 33
18339: PUSH
18340: LD_STRING 
18342: ST_TO_ADDR
// hc_noskilllimit := true ;
18343: LD_ADDR_OWVAR 76
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18351: LD_ADDR_OWVAR 31
18355: PUSH
18356: LD_INT 30
18358: PUSH
18359: LD_INT 30
18361: PUSH
18362: LD_INT 30
18364: PUSH
18365: LD_INT 30
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: ST_TO_ADDR
// un := CreateHuman ;
18374: LD_ADDR_VAR 0 3
18378: PUSH
18379: CALL_OW 44
18383: ST_TO_ADDR
// hc_noskilllimit := false ;
18384: LD_ADDR_OWVAR 76
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18392: LD_VAR 0 3
18396: PPUSH
18397: LD_INT 1
18399: PPUSH
18400: CALL_OW 51
// ToLua ( playRanger() ) ;
18404: LD_STRING playRanger()
18406: PPUSH
18407: CALL_OW 559
// p := 0 ;
18411: LD_ADDR_VAR 0 2
18415: PUSH
18416: LD_INT 0
18418: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18419: LD_INT 35
18421: PPUSH
18422: CALL_OW 67
// p := p + 1 ;
18426: LD_ADDR_VAR 0 2
18430: PUSH
18431: LD_VAR 0 2
18435: PUSH
18436: LD_INT 1
18438: PLUS
18439: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18440: LD_VAR 0 3
18444: PPUSH
18445: CALL_OW 256
18449: PUSH
18450: LD_INT 1000
18452: LESS
18453: IFFALSE 18467
// SetLives ( un , 1000 ) ;
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_INT 1000
18462: PPUSH
18463: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18467: LD_VAR 0 3
18471: PPUSH
18472: LD_INT 81
18474: PUSH
18475: LD_OWVAR 2
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 91
18486: PUSH
18487: LD_VAR 0 3
18491: PUSH
18492: LD_INT 30
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: LIST
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PPUSH
18504: CALL_OW 69
18508: PPUSH
18509: LD_VAR 0 3
18513: PPUSH
18514: CALL_OW 74
18518: PPUSH
18519: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18523: LD_VAR 0 2
18527: PUSH
18528: LD_INT 80
18530: GREATER
18531: PUSH
18532: LD_VAR 0 3
18536: PPUSH
18537: CALL_OW 301
18541: OR
18542: IFFALSE 18419
// if un then
18544: LD_VAR 0 3
18548: IFFALSE 18559
// RemoveUnit ( un ) ;
18550: LD_VAR 0 3
18554: PPUSH
18555: CALL_OW 64
// end ;
18559: PPOPN 3
18561: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18562: LD_EXP 81
18566: IFFALSE 18682
18568: GO 18570
18570: DISABLE
18571: LD_INT 0
18573: PPUSH
18574: PPUSH
18575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18576: LD_ADDR_VAR 0 2
18580: PUSH
18581: LD_INT 81
18583: PUSH
18584: LD_OWVAR 2
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 21
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PPUSH
18607: CALL_OW 69
18611: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18612: LD_STRING playComputer()
18614: PPUSH
18615: CALL_OW 559
// if not tmp then
18619: LD_VAR 0 2
18623: NOT
18624: IFFALSE 18628
// exit ;
18626: GO 18682
// for i in tmp do
18628: LD_ADDR_VAR 0 1
18632: PUSH
18633: LD_VAR 0 2
18637: PUSH
18638: FOR_IN
18639: IFFALSE 18680
// for j := 1 to 4 do
18641: LD_ADDR_VAR 0 3
18645: PUSH
18646: DOUBLE
18647: LD_INT 1
18649: DEC
18650: ST_TO_ADDR
18651: LD_INT 4
18653: PUSH
18654: FOR_TO
18655: IFFALSE 18676
// SetSkill ( i , j , 10 ) ;
18657: LD_VAR 0 1
18661: PPUSH
18662: LD_VAR 0 3
18666: PPUSH
18667: LD_INT 10
18669: PPUSH
18670: CALL_OW 237
18674: GO 18654
18676: POP
18677: POP
18678: GO 18638
18680: POP
18681: POP
// end ;
18682: PPOPN 3
18684: END
// every 0 0$1 trigger s30 do var i , tmp ;
18685: LD_EXP 82
18689: IFFALSE 18758
18691: GO 18693
18693: DISABLE
18694: LD_INT 0
18696: PPUSH
18697: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18698: LD_ADDR_VAR 0 2
18702: PUSH
18703: LD_INT 22
18705: PUSH
18706: LD_OWVAR 2
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 69
18719: ST_TO_ADDR
// if not tmp then
18720: LD_VAR 0 2
18724: NOT
18725: IFFALSE 18729
// exit ;
18727: GO 18758
// for i in tmp do
18729: LD_ADDR_VAR 0 1
18733: PUSH
18734: LD_VAR 0 2
18738: PUSH
18739: FOR_IN
18740: IFFALSE 18756
// SetLives ( i , 300 ) ;
18742: LD_VAR 0 1
18746: PPUSH
18747: LD_INT 300
18749: PPUSH
18750: CALL_OW 234
18754: GO 18739
18756: POP
18757: POP
// end ;
18758: PPOPN 2
18760: END
// every 0 0$1 trigger s60 do var i , tmp ;
18761: LD_EXP 83
18765: IFFALSE 18834
18767: GO 18769
18769: DISABLE
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18774: LD_ADDR_VAR 0 2
18778: PUSH
18779: LD_INT 22
18781: PUSH
18782: LD_OWVAR 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PPUSH
18791: CALL_OW 69
18795: ST_TO_ADDR
// if not tmp then
18796: LD_VAR 0 2
18800: NOT
18801: IFFALSE 18805
// exit ;
18803: GO 18834
// for i in tmp do
18805: LD_ADDR_VAR 0 1
18809: PUSH
18810: LD_VAR 0 2
18814: PUSH
18815: FOR_IN
18816: IFFALSE 18832
// SetLives ( i , 600 ) ;
18818: LD_VAR 0 1
18822: PPUSH
18823: LD_INT 600
18825: PPUSH
18826: CALL_OW 234
18830: GO 18815
18832: POP
18833: POP
// end ;
18834: PPOPN 2
18836: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18837: LD_INT 0
18839: PPUSH
// case cmd of 301 :
18840: LD_VAR 0 1
18844: PUSH
18845: LD_INT 301
18847: DOUBLE
18848: EQUAL
18849: IFTRUE 18853
18851: GO 18885
18853: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18854: LD_VAR 0 6
18858: PPUSH
18859: LD_VAR 0 7
18863: PPUSH
18864: LD_VAR 0 8
18868: PPUSH
18869: LD_VAR 0 4
18873: PPUSH
18874: LD_VAR 0 5
18878: PPUSH
18879: CALL 20086 0 5
18883: GO 19006
18885: LD_INT 302
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 18930
18893: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18894: LD_VAR 0 6
18898: PPUSH
18899: LD_VAR 0 7
18903: PPUSH
18904: LD_VAR 0 8
18908: PPUSH
18909: LD_VAR 0 9
18913: PPUSH
18914: LD_VAR 0 4
18918: PPUSH
18919: LD_VAR 0 5
18923: PPUSH
18924: CALL 20177 0 6
18928: GO 19006
18930: LD_INT 303
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18975
18938: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18939: LD_VAR 0 6
18943: PPUSH
18944: LD_VAR 0 7
18948: PPUSH
18949: LD_VAR 0 8
18953: PPUSH
18954: LD_VAR 0 9
18958: PPUSH
18959: LD_VAR 0 4
18963: PPUSH
18964: LD_VAR 0 5
18968: PPUSH
18969: CALL 19011 0 6
18973: GO 19006
18975: LD_INT 304
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 19005
18983: POP
// hHackTeleport ( unit , x , y ) ; end ;
18984: LD_VAR 0 2
18988: PPUSH
18989: LD_VAR 0 4
18993: PPUSH
18994: LD_VAR 0 5
18998: PPUSH
18999: CALL 20770 0 3
19003: GO 19006
19005: POP
// end ;
19006: LD_VAR 0 12
19010: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19011: LD_INT 0
19013: PPUSH
19014: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 1
19022: LESS
19023: PUSH
19024: LD_VAR 0 1
19028: PUSH
19029: LD_INT 3
19031: GREATER
19032: OR
19033: PUSH
19034: LD_VAR 0 5
19038: PPUSH
19039: LD_VAR 0 6
19043: PPUSH
19044: CALL_OW 428
19048: OR
19049: IFFALSE 19053
// exit ;
19051: GO 19773
// uc_side := your_side ;
19053: LD_ADDR_OWVAR 20
19057: PUSH
19058: LD_OWVAR 2
19062: ST_TO_ADDR
// uc_nation := nation ;
19063: LD_ADDR_OWVAR 21
19067: PUSH
19068: LD_VAR 0 1
19072: ST_TO_ADDR
// bc_level = 1 ;
19073: LD_ADDR_OWVAR 43
19077: PUSH
19078: LD_INT 1
19080: ST_TO_ADDR
// case btype of 1 :
19081: LD_VAR 0 2
19085: PUSH
19086: LD_INT 1
19088: DOUBLE
19089: EQUAL
19090: IFTRUE 19094
19092: GO 19105
19094: POP
// bc_type := b_depot ; 2 :
19095: LD_ADDR_OWVAR 42
19099: PUSH
19100: LD_INT 0
19102: ST_TO_ADDR
19103: GO 19717
19105: LD_INT 2
19107: DOUBLE
19108: EQUAL
19109: IFTRUE 19113
19111: GO 19124
19113: POP
// bc_type := b_warehouse ; 3 :
19114: LD_ADDR_OWVAR 42
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
19122: GO 19717
19124: LD_INT 3
19126: DOUBLE
19127: EQUAL
19128: IFTRUE 19132
19130: GO 19143
19132: POP
// bc_type := b_lab ; 4 .. 9 :
19133: LD_ADDR_OWVAR 42
19137: PUSH
19138: LD_INT 6
19140: ST_TO_ADDR
19141: GO 19717
19143: LD_INT 4
19145: DOUBLE
19146: GREATEREQUAL
19147: IFFALSE 19155
19149: LD_INT 9
19151: DOUBLE
19152: LESSEQUAL
19153: IFTRUE 19157
19155: GO 19209
19157: POP
// begin bc_type := b_lab_half ;
19158: LD_ADDR_OWVAR 42
19162: PUSH
19163: LD_INT 7
19165: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19166: LD_ADDR_OWVAR 44
19170: PUSH
19171: LD_INT 10
19173: PUSH
19174: LD_INT 11
19176: PUSH
19177: LD_INT 12
19179: PUSH
19180: LD_INT 15
19182: PUSH
19183: LD_INT 14
19185: PUSH
19186: LD_INT 13
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: PUSH
19197: LD_VAR 0 2
19201: PUSH
19202: LD_INT 3
19204: MINUS
19205: ARRAY
19206: ST_TO_ADDR
// end ; 10 .. 13 :
19207: GO 19717
19209: LD_INT 10
19211: DOUBLE
19212: GREATEREQUAL
19213: IFFALSE 19221
19215: LD_INT 13
19217: DOUBLE
19218: LESSEQUAL
19219: IFTRUE 19223
19221: GO 19300
19223: POP
// begin bc_type := b_lab_full ;
19224: LD_ADDR_OWVAR 42
19228: PUSH
19229: LD_INT 8
19231: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19232: LD_ADDR_OWVAR 44
19236: PUSH
19237: LD_INT 10
19239: PUSH
19240: LD_INT 12
19242: PUSH
19243: LD_INT 14
19245: PUSH
19246: LD_INT 13
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_VAR 0 2
19259: PUSH
19260: LD_INT 9
19262: MINUS
19263: ARRAY
19264: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19265: LD_ADDR_OWVAR 45
19269: PUSH
19270: LD_INT 11
19272: PUSH
19273: LD_INT 15
19275: PUSH
19276: LD_INT 12
19278: PUSH
19279: LD_INT 15
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: PUSH
19288: LD_VAR 0 2
19292: PUSH
19293: LD_INT 9
19295: MINUS
19296: ARRAY
19297: ST_TO_ADDR
// end ; 14 :
19298: GO 19717
19300: LD_INT 14
19302: DOUBLE
19303: EQUAL
19304: IFTRUE 19308
19306: GO 19319
19308: POP
// bc_type := b_workshop ; 15 :
19309: LD_ADDR_OWVAR 42
19313: PUSH
19314: LD_INT 2
19316: ST_TO_ADDR
19317: GO 19717
19319: LD_INT 15
19321: DOUBLE
19322: EQUAL
19323: IFTRUE 19327
19325: GO 19338
19327: POP
// bc_type := b_factory ; 16 :
19328: LD_ADDR_OWVAR 42
19332: PUSH
19333: LD_INT 3
19335: ST_TO_ADDR
19336: GO 19717
19338: LD_INT 16
19340: DOUBLE
19341: EQUAL
19342: IFTRUE 19346
19344: GO 19357
19346: POP
// bc_type := b_ext_gun ; 17 :
19347: LD_ADDR_OWVAR 42
19351: PUSH
19352: LD_INT 17
19354: ST_TO_ADDR
19355: GO 19717
19357: LD_INT 17
19359: DOUBLE
19360: EQUAL
19361: IFTRUE 19365
19363: GO 19393
19365: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19366: LD_ADDR_OWVAR 42
19370: PUSH
19371: LD_INT 19
19373: PUSH
19374: LD_INT 23
19376: PUSH
19377: LD_INT 19
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: PUSH
19385: LD_VAR 0 1
19389: ARRAY
19390: ST_TO_ADDR
19391: GO 19717
19393: LD_INT 18
19395: DOUBLE
19396: EQUAL
19397: IFTRUE 19401
19399: GO 19412
19401: POP
// bc_type := b_ext_radar ; 19 :
19402: LD_ADDR_OWVAR 42
19406: PUSH
19407: LD_INT 20
19409: ST_TO_ADDR
19410: GO 19717
19412: LD_INT 19
19414: DOUBLE
19415: EQUAL
19416: IFTRUE 19420
19418: GO 19431
19420: POP
// bc_type := b_ext_radio ; 20 :
19421: LD_ADDR_OWVAR 42
19425: PUSH
19426: LD_INT 22
19428: ST_TO_ADDR
19429: GO 19717
19431: LD_INT 20
19433: DOUBLE
19434: EQUAL
19435: IFTRUE 19439
19437: GO 19450
19439: POP
// bc_type := b_ext_siberium ; 21 :
19440: LD_ADDR_OWVAR 42
19444: PUSH
19445: LD_INT 21
19447: ST_TO_ADDR
19448: GO 19717
19450: LD_INT 21
19452: DOUBLE
19453: EQUAL
19454: IFTRUE 19458
19456: GO 19469
19458: POP
// bc_type := b_ext_computer ; 22 :
19459: LD_ADDR_OWVAR 42
19463: PUSH
19464: LD_INT 24
19466: ST_TO_ADDR
19467: GO 19717
19469: LD_INT 22
19471: DOUBLE
19472: EQUAL
19473: IFTRUE 19477
19475: GO 19488
19477: POP
// bc_type := b_ext_track ; 23 :
19478: LD_ADDR_OWVAR 42
19482: PUSH
19483: LD_INT 16
19485: ST_TO_ADDR
19486: GO 19717
19488: LD_INT 23
19490: DOUBLE
19491: EQUAL
19492: IFTRUE 19496
19494: GO 19507
19496: POP
// bc_type := b_ext_laser ; 24 :
19497: LD_ADDR_OWVAR 42
19501: PUSH
19502: LD_INT 25
19504: ST_TO_ADDR
19505: GO 19717
19507: LD_INT 24
19509: DOUBLE
19510: EQUAL
19511: IFTRUE 19515
19513: GO 19526
19515: POP
// bc_type := b_control_tower ; 25 :
19516: LD_ADDR_OWVAR 42
19520: PUSH
19521: LD_INT 36
19523: ST_TO_ADDR
19524: GO 19717
19526: LD_INT 25
19528: DOUBLE
19529: EQUAL
19530: IFTRUE 19534
19532: GO 19545
19534: POP
// bc_type := b_breastwork ; 26 :
19535: LD_ADDR_OWVAR 42
19539: PUSH
19540: LD_INT 31
19542: ST_TO_ADDR
19543: GO 19717
19545: LD_INT 26
19547: DOUBLE
19548: EQUAL
19549: IFTRUE 19553
19551: GO 19564
19553: POP
// bc_type := b_bunker ; 27 :
19554: LD_ADDR_OWVAR 42
19558: PUSH
19559: LD_INT 32
19561: ST_TO_ADDR
19562: GO 19717
19564: LD_INT 27
19566: DOUBLE
19567: EQUAL
19568: IFTRUE 19572
19570: GO 19583
19572: POP
// bc_type := b_turret ; 28 :
19573: LD_ADDR_OWVAR 42
19577: PUSH
19578: LD_INT 33
19580: ST_TO_ADDR
19581: GO 19717
19583: LD_INT 28
19585: DOUBLE
19586: EQUAL
19587: IFTRUE 19591
19589: GO 19602
19591: POP
// bc_type := b_armoury ; 29 :
19592: LD_ADDR_OWVAR 42
19596: PUSH
19597: LD_INT 4
19599: ST_TO_ADDR
19600: GO 19717
19602: LD_INT 29
19604: DOUBLE
19605: EQUAL
19606: IFTRUE 19610
19608: GO 19621
19610: POP
// bc_type := b_barracks ; 30 :
19611: LD_ADDR_OWVAR 42
19615: PUSH
19616: LD_INT 5
19618: ST_TO_ADDR
19619: GO 19717
19621: LD_INT 30
19623: DOUBLE
19624: EQUAL
19625: IFTRUE 19629
19627: GO 19640
19629: POP
// bc_type := b_solar_power ; 31 :
19630: LD_ADDR_OWVAR 42
19634: PUSH
19635: LD_INT 27
19637: ST_TO_ADDR
19638: GO 19717
19640: LD_INT 31
19642: DOUBLE
19643: EQUAL
19644: IFTRUE 19648
19646: GO 19659
19648: POP
// bc_type := b_oil_power ; 32 :
19649: LD_ADDR_OWVAR 42
19653: PUSH
19654: LD_INT 26
19656: ST_TO_ADDR
19657: GO 19717
19659: LD_INT 32
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19678
19667: POP
// bc_type := b_siberite_power ; 33 :
19668: LD_ADDR_OWVAR 42
19672: PUSH
19673: LD_INT 28
19675: ST_TO_ADDR
19676: GO 19717
19678: LD_INT 33
19680: DOUBLE
19681: EQUAL
19682: IFTRUE 19686
19684: GO 19697
19686: POP
// bc_type := b_oil_mine ; 34 :
19687: LD_ADDR_OWVAR 42
19691: PUSH
19692: LD_INT 29
19694: ST_TO_ADDR
19695: GO 19717
19697: LD_INT 34
19699: DOUBLE
19700: EQUAL
19701: IFTRUE 19705
19703: GO 19716
19705: POP
// bc_type := b_siberite_mine ; end ;
19706: LD_ADDR_OWVAR 42
19710: PUSH
19711: LD_INT 30
19713: ST_TO_ADDR
19714: GO 19717
19716: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19717: LD_ADDR_VAR 0 8
19721: PUSH
19722: LD_VAR 0 5
19726: PPUSH
19727: LD_VAR 0 6
19731: PPUSH
19732: LD_VAR 0 3
19736: PPUSH
19737: CALL_OW 47
19741: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19742: LD_OWVAR 42
19746: PUSH
19747: LD_INT 32
19749: PUSH
19750: LD_INT 33
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: IN
19757: IFFALSE 19773
// PlaceWeaponTurret ( b , weapon ) ;
19759: LD_VAR 0 8
19763: PPUSH
19764: LD_VAR 0 4
19768: PPUSH
19769: CALL_OW 431
// end ;
19773: LD_VAR 0 7
19777: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19778: LD_INT 0
19780: PPUSH
19781: PPUSH
19782: PPUSH
19783: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19784: LD_ADDR_VAR 0 4
19788: PUSH
19789: LD_INT 22
19791: PUSH
19792: LD_OWVAR 2
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 30
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 30
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PPUSH
19833: CALL_OW 69
19837: ST_TO_ADDR
// if not tmp then
19838: LD_VAR 0 4
19842: NOT
19843: IFFALSE 19847
// exit ;
19845: GO 19906
// for i in tmp do
19847: LD_ADDR_VAR 0 2
19851: PUSH
19852: LD_VAR 0 4
19856: PUSH
19857: FOR_IN
19858: IFFALSE 19904
// for j = 1 to 3 do
19860: LD_ADDR_VAR 0 3
19864: PUSH
19865: DOUBLE
19866: LD_INT 1
19868: DEC
19869: ST_TO_ADDR
19870: LD_INT 3
19872: PUSH
19873: FOR_TO
19874: IFFALSE 19900
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19876: LD_VAR 0 2
19880: PPUSH
19881: CALL_OW 274
19885: PPUSH
19886: LD_VAR 0 3
19890: PPUSH
19891: LD_INT 99999
19893: PPUSH
19894: CALL_OW 277
19898: GO 19873
19900: POP
19901: POP
19902: GO 19857
19904: POP
19905: POP
// end ;
19906: LD_VAR 0 1
19910: RET
// export function hHackSetLevel10 ; var i , j ; begin
19911: LD_INT 0
19913: PPUSH
19914: PPUSH
19915: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19916: LD_ADDR_VAR 0 2
19920: PUSH
19921: LD_INT 21
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PPUSH
19931: CALL_OW 69
19935: PUSH
19936: FOR_IN
19937: IFFALSE 19989
// if IsSelected ( i ) then
19939: LD_VAR 0 2
19943: PPUSH
19944: CALL_OW 306
19948: IFFALSE 19987
// begin for j := 1 to 4 do
19950: LD_ADDR_VAR 0 3
19954: PUSH
19955: DOUBLE
19956: LD_INT 1
19958: DEC
19959: ST_TO_ADDR
19960: LD_INT 4
19962: PUSH
19963: FOR_TO
19964: IFFALSE 19985
// SetSkill ( i , j , 10 ) ;
19966: LD_VAR 0 2
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: LD_INT 10
19978: PPUSH
19979: CALL_OW 237
19983: GO 19963
19985: POP
19986: POP
// end ;
19987: GO 19936
19989: POP
19990: POP
// end ;
19991: LD_VAR 0 1
19995: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19996: LD_INT 0
19998: PPUSH
19999: PPUSH
20000: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20001: LD_ADDR_VAR 0 2
20005: PUSH
20006: LD_INT 22
20008: PUSH
20009: LD_OWVAR 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 21
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: PUSH
20037: FOR_IN
20038: IFFALSE 20079
// begin for j := 1 to 4 do
20040: LD_ADDR_VAR 0 3
20044: PUSH
20045: DOUBLE
20046: LD_INT 1
20048: DEC
20049: ST_TO_ADDR
20050: LD_INT 4
20052: PUSH
20053: FOR_TO
20054: IFFALSE 20075
// SetSkill ( i , j , 10 ) ;
20056: LD_VAR 0 2
20060: PPUSH
20061: LD_VAR 0 3
20065: PPUSH
20066: LD_INT 10
20068: PPUSH
20069: CALL_OW 237
20073: GO 20053
20075: POP
20076: POP
// end ;
20077: GO 20037
20079: POP
20080: POP
// end ;
20081: LD_VAR 0 1
20085: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20086: LD_INT 0
20088: PPUSH
// uc_side := your_side ;
20089: LD_ADDR_OWVAR 20
20093: PUSH
20094: LD_OWVAR 2
20098: ST_TO_ADDR
// uc_nation := nation ;
20099: LD_ADDR_OWVAR 21
20103: PUSH
20104: LD_VAR 0 1
20108: ST_TO_ADDR
// InitHc ;
20109: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20113: LD_INT 0
20115: PPUSH
20116: LD_VAR 0 2
20120: PPUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20130: LD_VAR 0 4
20134: PPUSH
20135: LD_VAR 0 5
20139: PPUSH
20140: CALL_OW 428
20144: PUSH
20145: LD_INT 0
20147: EQUAL
20148: IFFALSE 20172
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20150: CALL_OW 44
20154: PPUSH
20155: LD_VAR 0 4
20159: PPUSH
20160: LD_VAR 0 5
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 48
// end ;
20172: LD_VAR 0 6
20176: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20177: LD_INT 0
20179: PPUSH
20180: PPUSH
// uc_side := your_side ;
20181: LD_ADDR_OWVAR 20
20185: PUSH
20186: LD_OWVAR 2
20190: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20191: LD_VAR 0 1
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 3
20204: PUSH
20205: LD_INT 4
20207: PUSH
20208: LD_INT 5
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: IN
20218: IFFALSE 20230
// uc_nation := nation_american else
20220: LD_ADDR_OWVAR 21
20224: PUSH
20225: LD_INT 1
20227: ST_TO_ADDR
20228: GO 20273
// if chassis in [ 11 , 12 , 13 , 14 ] then
20230: LD_VAR 0 1
20234: PUSH
20235: LD_INT 11
20237: PUSH
20238: LD_INT 12
20240: PUSH
20241: LD_INT 13
20243: PUSH
20244: LD_INT 14
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: IN
20253: IFFALSE 20265
// uc_nation := nation_arabian else
20255: LD_ADDR_OWVAR 21
20259: PUSH
20260: LD_INT 2
20262: ST_TO_ADDR
20263: GO 20273
// uc_nation := nation_russian ;
20265: LD_ADDR_OWVAR 21
20269: PUSH
20270: LD_INT 3
20272: ST_TO_ADDR
// vc_chassis := chassis ;
20273: LD_ADDR_OWVAR 37
20277: PUSH
20278: LD_VAR 0 1
20282: ST_TO_ADDR
// vc_engine := engine ;
20283: LD_ADDR_OWVAR 39
20287: PUSH
20288: LD_VAR 0 2
20292: ST_TO_ADDR
// vc_control := control ;
20293: LD_ADDR_OWVAR 38
20297: PUSH
20298: LD_VAR 0 3
20302: ST_TO_ADDR
// vc_weapon := weapon ;
20303: LD_ADDR_OWVAR 40
20307: PUSH
20308: LD_VAR 0 4
20312: ST_TO_ADDR
// un := CreateVehicle ;
20313: LD_ADDR_VAR 0 8
20317: PUSH
20318: CALL_OW 45
20322: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20323: LD_VAR 0 8
20327: PPUSH
20328: LD_INT 0
20330: PPUSH
20331: LD_INT 5
20333: PPUSH
20334: CALL_OW 12
20338: PPUSH
20339: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20343: LD_VAR 0 8
20347: PPUSH
20348: LD_VAR 0 5
20352: PPUSH
20353: LD_VAR 0 6
20357: PPUSH
20358: LD_INT 1
20360: PPUSH
20361: CALL_OW 48
// end ;
20365: LD_VAR 0 7
20369: RET
// export hInvincible ; every 1 do
20370: GO 20372
20372: DISABLE
// hInvincible := [ ] ;
20373: LD_ADDR_EXP 84
20377: PUSH
20378: EMPTY
20379: ST_TO_ADDR
20380: END
// every 10 do var i ;
20381: GO 20383
20383: DISABLE
20384: LD_INT 0
20386: PPUSH
// begin enable ;
20387: ENABLE
// if not hInvincible then
20388: LD_EXP 84
20392: NOT
20393: IFFALSE 20397
// exit ;
20395: GO 20441
// for i in hInvincible do
20397: LD_ADDR_VAR 0 1
20401: PUSH
20402: LD_EXP 84
20406: PUSH
20407: FOR_IN
20408: IFFALSE 20439
// if GetLives ( i ) < 1000 then
20410: LD_VAR 0 1
20414: PPUSH
20415: CALL_OW 256
20419: PUSH
20420: LD_INT 1000
20422: LESS
20423: IFFALSE 20437
// SetLives ( i , 1000 ) ;
20425: LD_VAR 0 1
20429: PPUSH
20430: LD_INT 1000
20432: PPUSH
20433: CALL_OW 234
20437: GO 20407
20439: POP
20440: POP
// end ;
20441: PPOPN 1
20443: END
// export function hHackInvincible ; var i ; begin
20444: LD_INT 0
20446: PPUSH
20447: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20448: LD_ADDR_VAR 0 2
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 21
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 21
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 69
20485: PUSH
20486: FOR_IN
20487: IFFALSE 20548
// if IsSelected ( i ) then
20489: LD_VAR 0 2
20493: PPUSH
20494: CALL_OW 306
20498: IFFALSE 20546
// begin if i in hInvincible then
20500: LD_VAR 0 2
20504: PUSH
20505: LD_EXP 84
20509: IN
20510: IFFALSE 20530
// hInvincible := hInvincible diff i else
20512: LD_ADDR_EXP 84
20516: PUSH
20517: LD_EXP 84
20521: PUSH
20522: LD_VAR 0 2
20526: DIFF
20527: ST_TO_ADDR
20528: GO 20546
// hInvincible := hInvincible union i ;
20530: LD_ADDR_EXP 84
20534: PUSH
20535: LD_EXP 84
20539: PUSH
20540: LD_VAR 0 2
20544: UNION
20545: ST_TO_ADDR
// end ;
20546: GO 20486
20548: POP
20549: POP
// end ;
20550: LD_VAR 0 1
20554: RET
// export function hHackInvisible ; var i , j ; begin
20555: LD_INT 0
20557: PPUSH
20558: PPUSH
20559: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20560: LD_ADDR_VAR 0 2
20564: PUSH
20565: LD_INT 21
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PPUSH
20575: CALL_OW 69
20579: PUSH
20580: FOR_IN
20581: IFFALSE 20605
// if IsSelected ( i ) then
20583: LD_VAR 0 2
20587: PPUSH
20588: CALL_OW 306
20592: IFFALSE 20603
// ComForceInvisible ( i ) ;
20594: LD_VAR 0 2
20598: PPUSH
20599: CALL_OW 496
20603: GO 20580
20605: POP
20606: POP
// end ;
20607: LD_VAR 0 1
20611: RET
// export function hHackChangeYourSide ; begin
20612: LD_INT 0
20614: PPUSH
// if your_side = 8 then
20615: LD_OWVAR 2
20619: PUSH
20620: LD_INT 8
20622: EQUAL
20623: IFFALSE 20635
// your_side := 0 else
20625: LD_ADDR_OWVAR 2
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
20633: GO 20649
// your_side := your_side + 1 ;
20635: LD_ADDR_OWVAR 2
20639: PUSH
20640: LD_OWVAR 2
20644: PUSH
20645: LD_INT 1
20647: PLUS
20648: ST_TO_ADDR
// end ;
20649: LD_VAR 0 1
20653: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20654: LD_INT 0
20656: PPUSH
20657: PPUSH
20658: PPUSH
// for i in all_units do
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: LD_OWVAR 3
20668: PUSH
20669: FOR_IN
20670: IFFALSE 20748
// if IsSelected ( i ) then
20672: LD_VAR 0 2
20676: PPUSH
20677: CALL_OW 306
20681: IFFALSE 20746
// begin j := GetSide ( i ) ;
20683: LD_ADDR_VAR 0 3
20687: PUSH
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 255
20697: ST_TO_ADDR
// if j = 8 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_INT 8
20705: EQUAL
20706: IFFALSE 20718
// j := 0 else
20708: LD_ADDR_VAR 0 3
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
20716: GO 20732
// j := j + 1 ;
20718: LD_ADDR_VAR 0 3
20722: PUSH
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 1
20730: PLUS
20731: ST_TO_ADDR
// SetSide ( i , j ) ;
20732: LD_VAR 0 2
20736: PPUSH
20737: LD_VAR 0 3
20741: PPUSH
20742: CALL_OW 235
// end ;
20746: GO 20669
20748: POP
20749: POP
// end ;
20750: LD_VAR 0 1
20754: RET
// export function hHackFog ; begin
20755: LD_INT 0
20757: PPUSH
// FogOff ( true ) ;
20758: LD_INT 1
20760: PPUSH
20761: CALL_OW 344
// end ;
20765: LD_VAR 0 1
20769: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20770: LD_INT 0
20772: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20773: LD_VAR 0 1
20777: PPUSH
20778: LD_VAR 0 2
20782: PPUSH
20783: LD_VAR 0 3
20787: PPUSH
20788: LD_INT 1
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: CALL_OW 483
// CenterOnXY ( x , y ) ;
20798: LD_VAR 0 2
20802: PPUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: CALL_OW 84
// end ; end_of_file
20812: LD_VAR 0 4
20816: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20817: LD_INT 0
20819: PPUSH
20820: PPUSH
20821: PPUSH
20822: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20823: LD_VAR 0 1
20827: PPUSH
20828: CALL_OW 264
20832: PUSH
20833: LD_EXP 100
20837: EQUAL
20838: IFFALSE 20910
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20840: LD_INT 68
20842: PPUSH
20843: LD_VAR 0 1
20847: PPUSH
20848: CALL_OW 255
20852: PPUSH
20853: CALL_OW 321
20857: PUSH
20858: LD_INT 2
20860: EQUAL
20861: IFFALSE 20873
// eff := 70 else
20863: LD_ADDR_VAR 0 4
20867: PUSH
20868: LD_INT 70
20870: ST_TO_ADDR
20871: GO 20881
// eff := 30 ;
20873: LD_ADDR_VAR 0 4
20877: PUSH
20878: LD_INT 30
20880: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20881: LD_VAR 0 1
20885: PPUSH
20886: CALL_OW 250
20890: PPUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 251
20900: PPUSH
20901: LD_VAR 0 4
20905: PPUSH
20906: CALL_OW 495
// end ; end ;
20910: LD_VAR 0 2
20914: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20915: LD_INT 0
20917: PPUSH
// end ;
20918: LD_VAR 0 4
20922: RET
// export function SOS_Command ( cmd ) ; begin
20923: LD_INT 0
20925: PPUSH
// end ;
20926: LD_VAR 0 2
20930: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20931: LD_INT 0
20933: PPUSH
// end ;
20934: LD_VAR 0 6
20938: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20939: LD_INT 0
20941: PPUSH
20942: PPUSH
// if not vehicle or not factory then
20943: LD_VAR 0 1
20947: NOT
20948: PUSH
20949: LD_VAR 0 2
20953: NOT
20954: OR
20955: IFFALSE 20959
// exit ;
20957: GO 21190
// if factoryWaypoints >= factory then
20959: LD_EXP 85
20963: PUSH
20964: LD_VAR 0 2
20968: GREATEREQUAL
20969: IFFALSE 21190
// if factoryWaypoints [ factory ] then
20971: LD_EXP 85
20975: PUSH
20976: LD_VAR 0 2
20980: ARRAY
20981: IFFALSE 21190
// begin if GetControl ( vehicle ) = control_manual then
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 263
20992: PUSH
20993: LD_INT 1
20995: EQUAL
20996: IFFALSE 21077
// begin driver := IsDrivenBy ( vehicle ) ;
20998: LD_ADDR_VAR 0 4
21002: PUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 311
21012: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21013: LD_VAR 0 4
21017: PPUSH
21018: LD_EXP 85
21022: PUSH
21023: LD_VAR 0 2
21027: ARRAY
21028: PUSH
21029: LD_INT 3
21031: ARRAY
21032: PPUSH
21033: LD_EXP 85
21037: PUSH
21038: LD_VAR 0 2
21042: ARRAY
21043: PUSH
21044: LD_INT 4
21046: ARRAY
21047: PPUSH
21048: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21052: LD_VAR 0 4
21056: PPUSH
21057: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21061: LD_VAR 0 4
21065: PPUSH
21066: LD_VAR 0 2
21070: PPUSH
21071: CALL_OW 180
// end else
21075: GO 21190
// if GetControl ( vehicle ) = control_remote then
21077: LD_VAR 0 1
21081: PPUSH
21082: CALL_OW 263
21086: PUSH
21087: LD_INT 2
21089: EQUAL
21090: IFFALSE 21151
// begin wait ( 0 0$2 ) ;
21092: LD_INT 70
21094: PPUSH
21095: CALL_OW 67
// if Connect ( vehicle ) then
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL 33590 0 1
21108: IFFALSE 21149
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21110: LD_VAR 0 1
21114: PPUSH
21115: LD_EXP 85
21119: PUSH
21120: LD_VAR 0 2
21124: ARRAY
21125: PUSH
21126: LD_INT 3
21128: ARRAY
21129: PPUSH
21130: LD_EXP 85
21134: PUSH
21135: LD_VAR 0 2
21139: ARRAY
21140: PUSH
21141: LD_INT 4
21143: ARRAY
21144: PPUSH
21145: CALL_OW 171
// end else
21149: GO 21190
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21151: LD_VAR 0 1
21155: PPUSH
21156: LD_EXP 85
21160: PUSH
21161: LD_VAR 0 2
21165: ARRAY
21166: PUSH
21167: LD_INT 3
21169: ARRAY
21170: PPUSH
21171: LD_EXP 85
21175: PUSH
21176: LD_VAR 0 2
21180: ARRAY
21181: PUSH
21182: LD_INT 4
21184: ARRAY
21185: PPUSH
21186: CALL_OW 171
// end ; end ;
21190: LD_VAR 0 3
21194: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21195: LD_INT 0
21197: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21198: LD_VAR 0 1
21202: PUSH
21203: LD_INT 250
21205: EQUAL
21206: PUSH
21207: LD_VAR 0 2
21211: PPUSH
21212: CALL_OW 264
21216: PUSH
21217: LD_EXP 103
21221: EQUAL
21222: AND
21223: IFFALSE 21244
// MinerPlaceMine ( unit , x , y ) ;
21225: LD_VAR 0 2
21229: PPUSH
21230: LD_VAR 0 4
21234: PPUSH
21235: LD_VAR 0 5
21239: PPUSH
21240: CALL 23972 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21244: LD_VAR 0 1
21248: PUSH
21249: LD_INT 251
21251: EQUAL
21252: PUSH
21253: LD_VAR 0 2
21257: PPUSH
21258: CALL_OW 264
21262: PUSH
21263: LD_EXP 103
21267: EQUAL
21268: AND
21269: IFFALSE 21290
// MinerDetonateMine ( unit , x , y ) ;
21271: LD_VAR 0 2
21275: PPUSH
21276: LD_VAR 0 4
21280: PPUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: CALL 24249 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21290: LD_VAR 0 1
21294: PUSH
21295: LD_INT 252
21297: EQUAL
21298: PUSH
21299: LD_VAR 0 2
21303: PPUSH
21304: CALL_OW 264
21308: PUSH
21309: LD_EXP 103
21313: EQUAL
21314: AND
21315: IFFALSE 21336
// MinerCreateMinefield ( unit , x , y ) ;
21317: LD_VAR 0 2
21321: PPUSH
21322: LD_VAR 0 4
21326: PPUSH
21327: LD_VAR 0 5
21331: PPUSH
21332: CALL 24666 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21336: LD_VAR 0 1
21340: PUSH
21341: LD_INT 253
21343: EQUAL
21344: PUSH
21345: LD_VAR 0 2
21349: PPUSH
21350: CALL_OW 257
21354: PUSH
21355: LD_INT 5
21357: EQUAL
21358: AND
21359: IFFALSE 21380
// ComBinocular ( unit , x , y ) ;
21361: LD_VAR 0 2
21365: PPUSH
21366: LD_VAR 0 4
21370: PPUSH
21371: LD_VAR 0 5
21375: PPUSH
21376: CALL 25037 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21380: LD_VAR 0 1
21384: PUSH
21385: LD_INT 254
21387: EQUAL
21388: PUSH
21389: LD_VAR 0 2
21393: PPUSH
21394: CALL_OW 264
21398: PUSH
21399: LD_EXP 98
21403: EQUAL
21404: AND
21405: PUSH
21406: LD_VAR 0 3
21410: PPUSH
21411: CALL_OW 263
21415: PUSH
21416: LD_INT 3
21418: EQUAL
21419: AND
21420: IFFALSE 21436
// HackDestroyVehicle ( unit , selectedUnit ) ;
21422: LD_VAR 0 2
21426: PPUSH
21427: LD_VAR 0 3
21431: PPUSH
21432: CALL 23332 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21436: LD_VAR 0 1
21440: PUSH
21441: LD_INT 255
21443: EQUAL
21444: PUSH
21445: LD_VAR 0 2
21449: PPUSH
21450: CALL_OW 264
21454: PUSH
21455: LD_INT 14
21457: PUSH
21458: LD_INT 53
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: IN
21465: AND
21466: PUSH
21467: LD_VAR 0 4
21471: PPUSH
21472: LD_VAR 0 5
21476: PPUSH
21477: CALL_OW 488
21481: AND
21482: IFFALSE 21506
// CutTreeXYR ( unit , x , y , 12 ) ;
21484: LD_VAR 0 2
21488: PPUSH
21489: LD_VAR 0 4
21493: PPUSH
21494: LD_VAR 0 5
21498: PPUSH
21499: LD_INT 12
21501: PPUSH
21502: CALL 21898 0 4
// if cmd = 256 then
21506: LD_VAR 0 1
21510: PUSH
21511: LD_INT 256
21513: EQUAL
21514: IFFALSE 21535
// SetFactoryWaypoint ( unit , x , y ) ;
21516: LD_VAR 0 2
21520: PPUSH
21521: LD_VAR 0 4
21525: PPUSH
21526: LD_VAR 0 5
21530: PPUSH
21531: CALL 21540 0 3
// end ;
21535: LD_VAR 0 6
21539: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21540: LD_INT 0
21542: PPUSH
21543: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21544: LD_VAR 0 1
21548: NOT
21549: PUSH
21550: LD_VAR 0 2
21554: PPUSH
21555: LD_VAR 0 3
21559: PPUSH
21560: CALL_OW 488
21564: NOT
21565: OR
21566: PUSH
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 266
21576: PUSH
21577: LD_INT 3
21579: NONEQUAL
21580: PUSH
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 247
21590: PUSH
21591: LD_INT 1
21593: EQUAL
21594: NOT
21595: AND
21596: OR
21597: IFFALSE 21601
// exit ;
21599: GO 21750
// if GetType ( factory ) = unit_human then
21601: LD_VAR 0 1
21605: PPUSH
21606: CALL_OW 247
21610: PUSH
21611: LD_INT 1
21613: EQUAL
21614: IFFALSE 21631
// factory := IsInUnit ( factory ) ;
21616: LD_ADDR_VAR 0 1
21620: PUSH
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL_OW 310
21630: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21631: LD_VAR 0 1
21635: PPUSH
21636: CALL_OW 266
21640: PUSH
21641: LD_INT 3
21643: NONEQUAL
21644: IFFALSE 21648
// exit ;
21646: GO 21750
// if HexInfo ( x , y ) = factory then
21648: LD_VAR 0 2
21652: PPUSH
21653: LD_VAR 0 3
21657: PPUSH
21658: CALL_OW 428
21662: PUSH
21663: LD_VAR 0 1
21667: EQUAL
21668: IFFALSE 21695
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21670: LD_ADDR_EXP 85
21674: PUSH
21675: LD_EXP 85
21679: PPUSH
21680: LD_VAR 0 1
21684: PPUSH
21685: LD_INT 0
21687: PPUSH
21688: CALL_OW 1
21692: ST_TO_ADDR
21693: GO 21746
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21695: LD_ADDR_EXP 85
21699: PUSH
21700: LD_EXP 85
21704: PPUSH
21705: LD_VAR 0 1
21709: PPUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 255
21719: PUSH
21720: LD_VAR 0 1
21724: PUSH
21725: LD_VAR 0 2
21729: PUSH
21730: LD_VAR 0 3
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: PPUSH
21741: CALL_OW 1
21745: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21746: CALL 21755 0 0
// end ;
21750: LD_VAR 0 4
21754: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
21755: LD_INT 0
21757: PPUSH
21758: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21759: LD_STRING resetFactoryWaypoint();
21761: PPUSH
21762: CALL_OW 559
// if factoryWaypoints then
21766: LD_EXP 85
21770: IFFALSE 21893
// begin for i := 1 to factoryWaypoints do
21772: LD_ADDR_VAR 0 2
21776: PUSH
21777: DOUBLE
21778: LD_INT 1
21780: DEC
21781: ST_TO_ADDR
21782: LD_EXP 85
21786: PUSH
21787: FOR_TO
21788: IFFALSE 21891
// if factoryWaypoints [ i ] then
21790: LD_EXP 85
21794: PUSH
21795: LD_VAR 0 2
21799: ARRAY
21800: IFFALSE 21889
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
21802: LD_STRING setFactoryWaypointXY(
21804: PUSH
21805: LD_EXP 85
21809: PUSH
21810: LD_VAR 0 2
21814: ARRAY
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: STR
21820: PUSH
21821: LD_STRING ,
21823: STR
21824: PUSH
21825: LD_EXP 85
21829: PUSH
21830: LD_VAR 0 2
21834: ARRAY
21835: PUSH
21836: LD_INT 2
21838: ARRAY
21839: STR
21840: PUSH
21841: LD_STRING ,
21843: STR
21844: PUSH
21845: LD_EXP 85
21849: PUSH
21850: LD_VAR 0 2
21854: ARRAY
21855: PUSH
21856: LD_INT 3
21858: ARRAY
21859: STR
21860: PUSH
21861: LD_STRING ,
21863: STR
21864: PUSH
21865: LD_EXP 85
21869: PUSH
21870: LD_VAR 0 2
21874: ARRAY
21875: PUSH
21876: LD_INT 4
21878: ARRAY
21879: STR
21880: PUSH
21881: LD_STRING )
21883: STR
21884: PPUSH
21885: CALL_OW 559
21889: GO 21787
21891: POP
21892: POP
// end ; end ;
21893: LD_VAR 0 1
21897: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21898: LD_INT 0
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21909: LD_VAR 0 1
21913: NOT
21914: PUSH
21915: LD_VAR 0 2
21919: PPUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: CALL_OW 488
21929: NOT
21930: OR
21931: PUSH
21932: LD_VAR 0 4
21936: NOT
21937: OR
21938: IFFALSE 21942
// exit ;
21940: GO 22282
// list := [ ] ;
21942: LD_ADDR_VAR 0 13
21946: PUSH
21947: EMPTY
21948: ST_TO_ADDR
// if x - r < 0 then
21949: LD_VAR 0 2
21953: PUSH
21954: LD_VAR 0 4
21958: MINUS
21959: PUSH
21960: LD_INT 0
21962: LESS
21963: IFFALSE 21975
// min_x := 0 else
21965: LD_ADDR_VAR 0 7
21969: PUSH
21970: LD_INT 0
21972: ST_TO_ADDR
21973: GO 21991
// min_x := x - r ;
21975: LD_ADDR_VAR 0 7
21979: PUSH
21980: LD_VAR 0 2
21984: PUSH
21985: LD_VAR 0 4
21989: MINUS
21990: ST_TO_ADDR
// if y - r < 0 then
21991: LD_VAR 0 3
21995: PUSH
21996: LD_VAR 0 4
22000: MINUS
22001: PUSH
22002: LD_INT 0
22004: LESS
22005: IFFALSE 22017
// min_y := 0 else
22007: LD_ADDR_VAR 0 8
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
22015: GO 22033
// min_y := y - r ;
22017: LD_ADDR_VAR 0 8
22021: PUSH
22022: LD_VAR 0 3
22026: PUSH
22027: LD_VAR 0 4
22031: MINUS
22032: ST_TO_ADDR
// max_x := x + r ;
22033: LD_ADDR_VAR 0 9
22037: PUSH
22038: LD_VAR 0 2
22042: PUSH
22043: LD_VAR 0 4
22047: PLUS
22048: ST_TO_ADDR
// max_y := y + r ;
22049: LD_ADDR_VAR 0 10
22053: PUSH
22054: LD_VAR 0 3
22058: PUSH
22059: LD_VAR 0 4
22063: PLUS
22064: ST_TO_ADDR
// for _x = min_x to max_x do
22065: LD_ADDR_VAR 0 11
22069: PUSH
22070: DOUBLE
22071: LD_VAR 0 7
22075: DEC
22076: ST_TO_ADDR
22077: LD_VAR 0 9
22081: PUSH
22082: FOR_TO
22083: IFFALSE 22200
// for _y = min_y to max_y do
22085: LD_ADDR_VAR 0 12
22089: PUSH
22090: DOUBLE
22091: LD_VAR 0 8
22095: DEC
22096: ST_TO_ADDR
22097: LD_VAR 0 10
22101: PUSH
22102: FOR_TO
22103: IFFALSE 22196
// begin if not ValidHex ( _x , _y ) then
22105: LD_VAR 0 11
22109: PPUSH
22110: LD_VAR 0 12
22114: PPUSH
22115: CALL_OW 488
22119: NOT
22120: IFFALSE 22124
// continue ;
22122: GO 22102
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22124: LD_VAR 0 11
22128: PPUSH
22129: LD_VAR 0 12
22133: PPUSH
22134: CALL_OW 351
22138: PUSH
22139: LD_VAR 0 11
22143: PPUSH
22144: LD_VAR 0 12
22148: PPUSH
22149: CALL_OW 554
22153: AND
22154: IFFALSE 22194
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22156: LD_ADDR_VAR 0 13
22160: PUSH
22161: LD_VAR 0 13
22165: PPUSH
22166: LD_VAR 0 13
22170: PUSH
22171: LD_INT 1
22173: PLUS
22174: PPUSH
22175: LD_VAR 0 11
22179: PUSH
22180: LD_VAR 0 12
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 2
22193: ST_TO_ADDR
// end ;
22194: GO 22102
22196: POP
22197: POP
22198: GO 22082
22200: POP
22201: POP
// if not list then
22202: LD_VAR 0 13
22206: NOT
22207: IFFALSE 22211
// exit ;
22209: GO 22282
// for i in list do
22211: LD_ADDR_VAR 0 6
22215: PUSH
22216: LD_VAR 0 13
22220: PUSH
22221: FOR_IN
22222: IFFALSE 22280
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_STRING M
22231: PUSH
22232: LD_VAR 0 6
22236: PUSH
22237: LD_INT 1
22239: ARRAY
22240: PUSH
22241: LD_VAR 0 6
22245: PUSH
22246: LD_INT 2
22248: ARRAY
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: PPUSH
22274: CALL_OW 447
22278: GO 22221
22280: POP
22281: POP
// end ;
22282: LD_VAR 0 5
22286: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22287: LD_EXP 86
22291: NOT
22292: IFFALSE 22342
22294: GO 22296
22296: DISABLE
// begin initHack := true ;
22297: LD_ADDR_EXP 86
22301: PUSH
22302: LD_INT 1
22304: ST_TO_ADDR
// hackTanks := [ ] ;
22305: LD_ADDR_EXP 87
22309: PUSH
22310: EMPTY
22311: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22312: LD_ADDR_EXP 88
22316: PUSH
22317: EMPTY
22318: ST_TO_ADDR
// hackLimit := 3 ;
22319: LD_ADDR_EXP 89
22323: PUSH
22324: LD_INT 3
22326: ST_TO_ADDR
// hackDist := 12 ;
22327: LD_ADDR_EXP 90
22331: PUSH
22332: LD_INT 12
22334: ST_TO_ADDR
// hackCounter := [ ] ;
22335: LD_ADDR_EXP 91
22339: PUSH
22340: EMPTY
22341: ST_TO_ADDR
// end ;
22342: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22343: LD_EXP 86
22347: PUSH
22348: LD_INT 34
22350: PUSH
22351: LD_EXP 98
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PPUSH
22360: CALL_OW 69
22364: AND
22365: IFFALSE 22620
22367: GO 22369
22369: DISABLE
22370: LD_INT 0
22372: PPUSH
22373: PPUSH
// begin enable ;
22374: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22375: LD_ADDR_VAR 0 1
22379: PUSH
22380: LD_INT 34
22382: PUSH
22383: LD_EXP 98
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: CALL_OW 69
22396: PUSH
22397: FOR_IN
22398: IFFALSE 22618
// begin if not i in hackTanks then
22400: LD_VAR 0 1
22404: PUSH
22405: LD_EXP 87
22409: IN
22410: NOT
22411: IFFALSE 22494
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22413: LD_ADDR_EXP 87
22417: PUSH
22418: LD_EXP 87
22422: PPUSH
22423: LD_EXP 87
22427: PUSH
22428: LD_INT 1
22430: PLUS
22431: PPUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 1
22441: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22442: LD_ADDR_EXP 88
22446: PUSH
22447: LD_EXP 88
22451: PPUSH
22452: LD_EXP 88
22456: PUSH
22457: LD_INT 1
22459: PLUS
22460: PPUSH
22461: EMPTY
22462: PPUSH
22463: CALL_OW 1
22467: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22468: LD_ADDR_EXP 91
22472: PUSH
22473: LD_EXP 91
22477: PPUSH
22478: LD_EXP 91
22482: PUSH
22483: LD_INT 1
22485: PLUS
22486: PPUSH
22487: EMPTY
22488: PPUSH
22489: CALL_OW 1
22493: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22494: LD_VAR 0 1
22498: PPUSH
22499: CALL_OW 302
22503: NOT
22504: IFFALSE 22517
// begin HackUnlinkAll ( i ) ;
22506: LD_VAR 0 1
22510: PPUSH
22511: CALL 22623 0 1
// continue ;
22515: GO 22397
// end ; HackCheckCapturedStatus ( i ) ;
22517: LD_VAR 0 1
22521: PPUSH
22522: CALL 23066 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22526: LD_ADDR_VAR 0 2
22530: PUSH
22531: LD_INT 81
22533: PUSH
22534: LD_VAR 0 1
22538: PPUSH
22539: CALL_OW 255
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 33
22550: PUSH
22551: LD_INT 3
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 91
22560: PUSH
22561: LD_VAR 0 1
22565: PUSH
22566: LD_EXP 90
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 50
22578: PUSH
22579: EMPTY
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: PPUSH
22588: CALL_OW 69
22592: ST_TO_ADDR
// if not tmp then
22593: LD_VAR 0 2
22597: NOT
22598: IFFALSE 22602
// continue ;
22600: GO 22397
// HackLink ( i , tmp ) ;
22602: LD_VAR 0 1
22606: PPUSH
22607: LD_VAR 0 2
22611: PPUSH
22612: CALL 22759 0 2
// end ;
22616: GO 22397
22618: POP
22619: POP
// end ;
22620: PPOPN 2
22622: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22623: LD_INT 0
22625: PPUSH
22626: PPUSH
22627: PPUSH
// if not hack in hackTanks then
22628: LD_VAR 0 1
22632: PUSH
22633: LD_EXP 87
22637: IN
22638: NOT
22639: IFFALSE 22643
// exit ;
22641: GO 22754
// index := GetElementIndex ( hackTanks , hack ) ;
22643: LD_ADDR_VAR 0 4
22647: PUSH
22648: LD_EXP 87
22652: PPUSH
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL 30404 0 2
22662: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22663: LD_EXP 88
22667: PUSH
22668: LD_VAR 0 4
22672: ARRAY
22673: IFFALSE 22754
// begin for i in hackTanksCaptured [ index ] do
22675: LD_ADDR_VAR 0 3
22679: PUSH
22680: LD_EXP 88
22684: PUSH
22685: LD_VAR 0 4
22689: ARRAY
22690: PUSH
22691: FOR_IN
22692: IFFALSE 22718
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22694: LD_VAR 0 3
22698: PUSH
22699: LD_INT 1
22701: ARRAY
22702: PPUSH
22703: LD_VAR 0 3
22707: PUSH
22708: LD_INT 2
22710: ARRAY
22711: PPUSH
22712: CALL_OW 235
22716: GO 22691
22718: POP
22719: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22720: LD_ADDR_EXP 88
22724: PUSH
22725: LD_EXP 88
22729: PPUSH
22730: LD_VAR 0 4
22734: PPUSH
22735: EMPTY
22736: PPUSH
22737: CALL_OW 1
22741: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_INT 0
22749: PPUSH
22750: CALL_OW 505
// end ; end ;
22754: LD_VAR 0 2
22758: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22759: LD_INT 0
22761: PPUSH
22762: PPUSH
22763: PPUSH
// if not hack in hackTanks or not vehicles then
22764: LD_VAR 0 1
22768: PUSH
22769: LD_EXP 87
22773: IN
22774: NOT
22775: PUSH
22776: LD_VAR 0 2
22780: NOT
22781: OR
22782: IFFALSE 22786
// exit ;
22784: GO 23061
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22786: LD_ADDR_VAR 0 2
22790: PUSH
22791: LD_VAR 0 1
22795: PPUSH
22796: LD_VAR 0 2
22800: PPUSH
22801: LD_INT 1
22803: PPUSH
22804: LD_INT 1
22806: PPUSH
22807: CALL 31054 0 4
22811: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22812: LD_ADDR_VAR 0 5
22816: PUSH
22817: LD_EXP 87
22821: PPUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL 30404 0 2
22831: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22832: LD_EXP 88
22836: PUSH
22837: LD_VAR 0 5
22841: ARRAY
22842: PUSH
22843: LD_EXP 89
22847: LESS
22848: IFFALSE 23037
// begin for i := 1 to vehicles do
22850: LD_ADDR_VAR 0 4
22854: PUSH
22855: DOUBLE
22856: LD_INT 1
22858: DEC
22859: ST_TO_ADDR
22860: LD_VAR 0 2
22864: PUSH
22865: FOR_TO
22866: IFFALSE 23035
// begin if hackTanksCaptured [ index ] = hackLimit then
22868: LD_EXP 88
22872: PUSH
22873: LD_VAR 0 5
22877: ARRAY
22878: PUSH
22879: LD_EXP 89
22883: EQUAL
22884: IFFALSE 22888
// break ;
22886: GO 23035
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22888: LD_ADDR_EXP 91
22892: PUSH
22893: LD_EXP 91
22897: PPUSH
22898: LD_VAR 0 5
22902: PPUSH
22903: LD_EXP 91
22907: PUSH
22908: LD_VAR 0 5
22912: ARRAY
22913: PUSH
22914: LD_INT 1
22916: PLUS
22917: PPUSH
22918: CALL_OW 1
22922: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22923: LD_ADDR_EXP 88
22927: PUSH
22928: LD_EXP 88
22932: PPUSH
22933: LD_VAR 0 5
22937: PUSH
22938: LD_EXP 88
22942: PUSH
22943: LD_VAR 0 5
22947: ARRAY
22948: PUSH
22949: LD_INT 1
22951: PLUS
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PPUSH
22957: LD_VAR 0 2
22961: PUSH
22962: LD_VAR 0 4
22966: ARRAY
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: LD_VAR 0 4
22977: ARRAY
22978: PPUSH
22979: CALL_OW 255
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PPUSH
22988: CALL 30619 0 3
22992: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22993: LD_VAR 0 2
22997: PUSH
22998: LD_VAR 0 4
23002: ARRAY
23003: PPUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 255
23013: PPUSH
23014: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23018: LD_VAR 0 2
23022: PUSH
23023: LD_VAR 0 4
23027: ARRAY
23028: PPUSH
23029: CALL_OW 141
// end ;
23033: GO 22865
23035: POP
23036: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23037: LD_VAR 0 1
23041: PPUSH
23042: LD_EXP 88
23046: PUSH
23047: LD_VAR 0 5
23051: ARRAY
23052: PUSH
23053: LD_INT 0
23055: PLUS
23056: PPUSH
23057: CALL_OW 505
// end ;
23061: LD_VAR 0 3
23065: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23066: LD_INT 0
23068: PPUSH
23069: PPUSH
23070: PPUSH
23071: PPUSH
// if not hack in hackTanks then
23072: LD_VAR 0 1
23076: PUSH
23077: LD_EXP 87
23081: IN
23082: NOT
23083: IFFALSE 23087
// exit ;
23085: GO 23327
// index := GetElementIndex ( hackTanks , hack ) ;
23087: LD_ADDR_VAR 0 4
23091: PUSH
23092: LD_EXP 87
23096: PPUSH
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL 30404 0 2
23106: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23107: LD_ADDR_VAR 0 3
23111: PUSH
23112: DOUBLE
23113: LD_EXP 88
23117: PUSH
23118: LD_VAR 0 4
23122: ARRAY
23123: INC
23124: ST_TO_ADDR
23125: LD_INT 1
23127: PUSH
23128: FOR_DOWNTO
23129: IFFALSE 23301
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23131: LD_ADDR_VAR 0 5
23135: PUSH
23136: LD_EXP 88
23140: PUSH
23141: LD_VAR 0 4
23145: ARRAY
23146: PUSH
23147: LD_VAR 0 3
23151: ARRAY
23152: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23153: LD_VAR 0 5
23157: PUSH
23158: LD_INT 1
23160: ARRAY
23161: PPUSH
23162: CALL_OW 302
23166: NOT
23167: PUSH
23168: LD_VAR 0 5
23172: PUSH
23173: LD_INT 1
23175: ARRAY
23176: PPUSH
23177: CALL_OW 255
23181: PUSH
23182: LD_VAR 0 1
23186: PPUSH
23187: CALL_OW 255
23191: NONEQUAL
23192: OR
23193: IFFALSE 23299
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23195: LD_VAR 0 5
23199: PUSH
23200: LD_INT 1
23202: ARRAY
23203: PPUSH
23204: CALL_OW 305
23208: PUSH
23209: LD_VAR 0 5
23213: PUSH
23214: LD_INT 1
23216: ARRAY
23217: PPUSH
23218: CALL_OW 255
23222: PUSH
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 255
23232: EQUAL
23233: AND
23234: IFFALSE 23258
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23236: LD_VAR 0 5
23240: PUSH
23241: LD_INT 1
23243: ARRAY
23244: PPUSH
23245: LD_VAR 0 5
23249: PUSH
23250: LD_INT 2
23252: ARRAY
23253: PPUSH
23254: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23258: LD_ADDR_EXP 88
23262: PUSH
23263: LD_EXP 88
23267: PPUSH
23268: LD_VAR 0 4
23272: PPUSH
23273: LD_EXP 88
23277: PUSH
23278: LD_VAR 0 4
23282: ARRAY
23283: PPUSH
23284: LD_VAR 0 3
23288: PPUSH
23289: CALL_OW 3
23293: PPUSH
23294: CALL_OW 1
23298: ST_TO_ADDR
// end ; end ;
23299: GO 23128
23301: POP
23302: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23303: LD_VAR 0 1
23307: PPUSH
23308: LD_EXP 88
23312: PUSH
23313: LD_VAR 0 4
23317: ARRAY
23318: PUSH
23319: LD_INT 0
23321: PLUS
23322: PPUSH
23323: CALL_OW 505
// end ;
23327: LD_VAR 0 2
23331: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
// if not hack in hackTanks then
23338: LD_VAR 0 1
23342: PUSH
23343: LD_EXP 87
23347: IN
23348: NOT
23349: IFFALSE 23353
// exit ;
23351: GO 23438
// index := GetElementIndex ( hackTanks , hack ) ;
23353: LD_ADDR_VAR 0 5
23357: PUSH
23358: LD_EXP 87
23362: PPUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL 30404 0 2
23372: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23373: LD_ADDR_VAR 0 4
23377: PUSH
23378: DOUBLE
23379: LD_INT 1
23381: DEC
23382: ST_TO_ADDR
23383: LD_EXP 88
23387: PUSH
23388: LD_VAR 0 5
23392: ARRAY
23393: PUSH
23394: FOR_TO
23395: IFFALSE 23436
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23397: LD_EXP 88
23401: PUSH
23402: LD_VAR 0 5
23406: ARRAY
23407: PUSH
23408: LD_VAR 0 4
23412: ARRAY
23413: PUSH
23414: LD_INT 1
23416: ARRAY
23417: PUSH
23418: LD_VAR 0 2
23422: EQUAL
23423: IFFALSE 23434
// KillUnit ( vehicle ) ;
23425: LD_VAR 0 2
23429: PPUSH
23430: CALL_OW 66
23434: GO 23394
23436: POP
23437: POP
// end ;
23438: LD_VAR 0 3
23442: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23443: LD_EXP 92
23447: NOT
23448: IFFALSE 23483
23450: GO 23452
23452: DISABLE
// begin initMiner := true ;
23453: LD_ADDR_EXP 92
23457: PUSH
23458: LD_INT 1
23460: ST_TO_ADDR
// minersList := [ ] ;
23461: LD_ADDR_EXP 93
23465: PUSH
23466: EMPTY
23467: ST_TO_ADDR
// minerMinesList := [ ] ;
23468: LD_ADDR_EXP 94
23472: PUSH
23473: EMPTY
23474: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23475: LD_ADDR_EXP 95
23479: PUSH
23480: LD_INT 5
23482: ST_TO_ADDR
// end ;
23483: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23484: LD_EXP 92
23488: PUSH
23489: LD_INT 34
23491: PUSH
23492: LD_EXP 103
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PPUSH
23501: CALL_OW 69
23505: AND
23506: IFFALSE 23969
23508: GO 23510
23510: DISABLE
23511: LD_INT 0
23513: PPUSH
23514: PPUSH
23515: PPUSH
23516: PPUSH
// begin enable ;
23517: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23518: LD_ADDR_VAR 0 1
23522: PUSH
23523: LD_INT 34
23525: PUSH
23526: LD_EXP 103
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PPUSH
23535: CALL_OW 69
23539: PUSH
23540: FOR_IN
23541: IFFALSE 23613
// begin if not i in minersList then
23543: LD_VAR 0 1
23547: PUSH
23548: LD_EXP 93
23552: IN
23553: NOT
23554: IFFALSE 23611
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23556: LD_ADDR_EXP 93
23560: PUSH
23561: LD_EXP 93
23565: PPUSH
23566: LD_EXP 93
23570: PUSH
23571: LD_INT 1
23573: PLUS
23574: PPUSH
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL_OW 1
23584: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23585: LD_ADDR_EXP 94
23589: PUSH
23590: LD_EXP 94
23594: PPUSH
23595: LD_EXP 94
23599: PUSH
23600: LD_INT 1
23602: PLUS
23603: PPUSH
23604: EMPTY
23605: PPUSH
23606: CALL_OW 1
23610: ST_TO_ADDR
// end end ;
23611: GO 23540
23613: POP
23614: POP
// for i := minerMinesList downto 1 do
23615: LD_ADDR_VAR 0 1
23619: PUSH
23620: DOUBLE
23621: LD_EXP 94
23625: INC
23626: ST_TO_ADDR
23627: LD_INT 1
23629: PUSH
23630: FOR_DOWNTO
23631: IFFALSE 23967
// begin if IsLive ( minersList [ i ] ) then
23633: LD_EXP 93
23637: PUSH
23638: LD_VAR 0 1
23642: ARRAY
23643: PPUSH
23644: CALL_OW 300
23648: IFFALSE 23676
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23650: LD_EXP 93
23654: PUSH
23655: LD_VAR 0 1
23659: ARRAY
23660: PPUSH
23661: LD_EXP 94
23665: PUSH
23666: LD_VAR 0 1
23670: ARRAY
23671: PPUSH
23672: CALL_OW 505
// if not minerMinesList [ i ] then
23676: LD_EXP 94
23680: PUSH
23681: LD_VAR 0 1
23685: ARRAY
23686: NOT
23687: IFFALSE 23691
// continue ;
23689: GO 23630
// for j := minerMinesList [ i ] downto 1 do
23691: LD_ADDR_VAR 0 2
23695: PUSH
23696: DOUBLE
23697: LD_EXP 94
23701: PUSH
23702: LD_VAR 0 1
23706: ARRAY
23707: INC
23708: ST_TO_ADDR
23709: LD_INT 1
23711: PUSH
23712: FOR_DOWNTO
23713: IFFALSE 23963
// begin side := GetSide ( minersList [ i ] ) ;
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: LD_EXP 93
23724: PUSH
23725: LD_VAR 0 1
23729: ARRAY
23730: PPUSH
23731: CALL_OW 255
23735: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23736: LD_ADDR_VAR 0 4
23740: PUSH
23741: LD_EXP 94
23745: PUSH
23746: LD_VAR 0 1
23750: ARRAY
23751: PUSH
23752: LD_VAR 0 2
23756: ARRAY
23757: PUSH
23758: LD_INT 1
23760: ARRAY
23761: PPUSH
23762: LD_EXP 94
23766: PUSH
23767: LD_VAR 0 1
23771: ARRAY
23772: PUSH
23773: LD_VAR 0 2
23777: ARRAY
23778: PUSH
23779: LD_INT 2
23781: ARRAY
23782: PPUSH
23783: CALL_OW 428
23787: ST_TO_ADDR
// if not tmp then
23788: LD_VAR 0 4
23792: NOT
23793: IFFALSE 23797
// continue ;
23795: GO 23712
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23797: LD_VAR 0 4
23801: PUSH
23802: LD_INT 81
23804: PUSH
23805: LD_VAR 0 3
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PPUSH
23814: CALL_OW 69
23818: IN
23819: PUSH
23820: LD_EXP 94
23824: PUSH
23825: LD_VAR 0 1
23829: ARRAY
23830: PUSH
23831: LD_VAR 0 2
23835: ARRAY
23836: PUSH
23837: LD_INT 1
23839: ARRAY
23840: PPUSH
23841: LD_EXP 94
23845: PUSH
23846: LD_VAR 0 1
23850: ARRAY
23851: PUSH
23852: LD_VAR 0 2
23856: ARRAY
23857: PUSH
23858: LD_INT 2
23860: ARRAY
23861: PPUSH
23862: CALL_OW 458
23866: AND
23867: IFFALSE 23961
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23869: LD_EXP 94
23873: PUSH
23874: LD_VAR 0 1
23878: ARRAY
23879: PUSH
23880: LD_VAR 0 2
23884: ARRAY
23885: PUSH
23886: LD_INT 1
23888: ARRAY
23889: PPUSH
23890: LD_EXP 94
23894: PUSH
23895: LD_VAR 0 1
23899: ARRAY
23900: PUSH
23901: LD_VAR 0 2
23905: ARRAY
23906: PUSH
23907: LD_INT 2
23909: ARRAY
23910: PPUSH
23911: LD_VAR 0 3
23915: PPUSH
23916: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23920: LD_ADDR_EXP 94
23924: PUSH
23925: LD_EXP 94
23929: PPUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: LD_EXP 94
23939: PUSH
23940: LD_VAR 0 1
23944: ARRAY
23945: PPUSH
23946: LD_VAR 0 2
23950: PPUSH
23951: CALL_OW 3
23955: PPUSH
23956: CALL_OW 1
23960: ST_TO_ADDR
// end ; end ;
23961: GO 23712
23963: POP
23964: POP
// end ;
23965: GO 23630
23967: POP
23968: POP
// end ;
23969: PPOPN 4
23971: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23972: LD_INT 0
23974: PPUSH
23975: PPUSH
// result := false ;
23976: LD_ADDR_VAR 0 4
23980: PUSH
23981: LD_INT 0
23983: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 264
23993: PUSH
23994: LD_EXP 103
23998: EQUAL
23999: NOT
24000: IFFALSE 24004
// exit ;
24002: GO 24244
// index := GetElementIndex ( minersList , unit ) ;
24004: LD_ADDR_VAR 0 5
24008: PUSH
24009: LD_EXP 93
24013: PPUSH
24014: LD_VAR 0 1
24018: PPUSH
24019: CALL 30404 0 2
24023: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24024: LD_EXP 94
24028: PUSH
24029: LD_VAR 0 5
24033: ARRAY
24034: PUSH
24035: LD_EXP 95
24039: GREATEREQUAL
24040: IFFALSE 24044
// exit ;
24042: GO 24244
// ComMoveXY ( unit , x , y ) ;
24044: LD_VAR 0 1
24048: PPUSH
24049: LD_VAR 0 2
24053: PPUSH
24054: LD_VAR 0 3
24058: PPUSH
24059: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24063: LD_INT 35
24065: PPUSH
24066: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24070: LD_VAR 0 1
24074: PPUSH
24075: LD_VAR 0 2
24079: PPUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: CALL 61123 0 3
24089: NOT
24090: PUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 314
24100: AND
24101: IFFALSE 24105
// exit ;
24103: GO 24244
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24105: LD_VAR 0 2
24109: PPUSH
24110: LD_VAR 0 3
24114: PPUSH
24115: CALL_OW 428
24119: PUSH
24120: LD_VAR 0 1
24124: EQUAL
24125: PUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 314
24135: NOT
24136: AND
24137: IFFALSE 24063
// PlaySoundXY ( x , y , PlantMine ) ;
24139: LD_VAR 0 2
24143: PPUSH
24144: LD_VAR 0 3
24148: PPUSH
24149: LD_STRING PlantMine
24151: PPUSH
24152: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24156: LD_VAR 0 2
24160: PPUSH
24161: LD_VAR 0 3
24165: PPUSH
24166: LD_VAR 0 1
24170: PPUSH
24171: CALL_OW 255
24175: PPUSH
24176: LD_INT 0
24178: PPUSH
24179: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24183: LD_ADDR_EXP 94
24187: PUSH
24188: LD_EXP 94
24192: PPUSH
24193: LD_VAR 0 5
24197: PUSH
24198: LD_EXP 94
24202: PUSH
24203: LD_VAR 0 5
24207: ARRAY
24208: PUSH
24209: LD_INT 1
24211: PLUS
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PPUSH
24217: LD_VAR 0 2
24221: PUSH
24222: LD_VAR 0 3
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PPUSH
24231: CALL 30619 0 3
24235: ST_TO_ADDR
// result := true ;
24236: LD_ADDR_VAR 0 4
24240: PUSH
24241: LD_INT 1
24243: ST_TO_ADDR
// end ;
24244: LD_VAR 0 4
24248: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24249: LD_INT 0
24251: PPUSH
24252: PPUSH
24253: PPUSH
// if not unit in minersList then
24254: LD_VAR 0 1
24258: PUSH
24259: LD_EXP 93
24263: IN
24264: NOT
24265: IFFALSE 24269
// exit ;
24267: GO 24661
// index := GetElementIndex ( minersList , unit ) ;
24269: LD_ADDR_VAR 0 6
24273: PUSH
24274: LD_EXP 93
24278: PPUSH
24279: LD_VAR 0 1
24283: PPUSH
24284: CALL 30404 0 2
24288: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24289: LD_ADDR_VAR 0 5
24293: PUSH
24294: DOUBLE
24295: LD_EXP 94
24299: PUSH
24300: LD_VAR 0 6
24304: ARRAY
24305: INC
24306: ST_TO_ADDR
24307: LD_INT 1
24309: PUSH
24310: FOR_DOWNTO
24311: IFFALSE 24472
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24313: LD_EXP 94
24317: PUSH
24318: LD_VAR 0 6
24322: ARRAY
24323: PUSH
24324: LD_VAR 0 5
24328: ARRAY
24329: PUSH
24330: LD_INT 1
24332: ARRAY
24333: PUSH
24334: LD_VAR 0 2
24338: EQUAL
24339: PUSH
24340: LD_EXP 94
24344: PUSH
24345: LD_VAR 0 6
24349: ARRAY
24350: PUSH
24351: LD_VAR 0 5
24355: ARRAY
24356: PUSH
24357: LD_INT 2
24359: ARRAY
24360: PUSH
24361: LD_VAR 0 3
24365: EQUAL
24366: AND
24367: IFFALSE 24470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24369: LD_EXP 94
24373: PUSH
24374: LD_VAR 0 6
24378: ARRAY
24379: PUSH
24380: LD_VAR 0 5
24384: ARRAY
24385: PUSH
24386: LD_INT 1
24388: ARRAY
24389: PPUSH
24390: LD_EXP 94
24394: PUSH
24395: LD_VAR 0 6
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 5
24405: ARRAY
24406: PUSH
24407: LD_INT 2
24409: ARRAY
24410: PPUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 255
24420: PPUSH
24421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24425: LD_ADDR_EXP 94
24429: PUSH
24430: LD_EXP 94
24434: PPUSH
24435: LD_VAR 0 6
24439: PPUSH
24440: LD_EXP 94
24444: PUSH
24445: LD_VAR 0 6
24449: ARRAY
24450: PPUSH
24451: LD_VAR 0 5
24455: PPUSH
24456: CALL_OW 3
24460: PPUSH
24461: CALL_OW 1
24465: ST_TO_ADDR
// exit ;
24466: POP
24467: POP
24468: GO 24661
// end ; end ;
24470: GO 24310
24472: POP
24473: POP
// for i := minerMinesList [ index ] downto 1 do
24474: LD_ADDR_VAR 0 5
24478: PUSH
24479: DOUBLE
24480: LD_EXP 94
24484: PUSH
24485: LD_VAR 0 6
24489: ARRAY
24490: INC
24491: ST_TO_ADDR
24492: LD_INT 1
24494: PUSH
24495: FOR_DOWNTO
24496: IFFALSE 24659
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24498: LD_EXP 94
24502: PUSH
24503: LD_VAR 0 6
24507: ARRAY
24508: PUSH
24509: LD_VAR 0 5
24513: ARRAY
24514: PUSH
24515: LD_INT 1
24517: ARRAY
24518: PPUSH
24519: LD_EXP 94
24523: PUSH
24524: LD_VAR 0 6
24528: ARRAY
24529: PUSH
24530: LD_VAR 0 5
24534: ARRAY
24535: PUSH
24536: LD_INT 2
24538: ARRAY
24539: PPUSH
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_VAR 0 3
24549: PPUSH
24550: CALL_OW 298
24554: PUSH
24555: LD_INT 6
24557: LESS
24558: IFFALSE 24657
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24560: LD_EXP 94
24564: PUSH
24565: LD_VAR 0 6
24569: ARRAY
24570: PUSH
24571: LD_VAR 0 5
24575: ARRAY
24576: PUSH
24577: LD_INT 1
24579: ARRAY
24580: PPUSH
24581: LD_EXP 94
24585: PUSH
24586: LD_VAR 0 6
24590: ARRAY
24591: PUSH
24592: LD_VAR 0 5
24596: ARRAY
24597: PUSH
24598: LD_INT 2
24600: ARRAY
24601: PPUSH
24602: LD_VAR 0 1
24606: PPUSH
24607: CALL_OW 255
24611: PPUSH
24612: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24616: LD_ADDR_EXP 94
24620: PUSH
24621: LD_EXP 94
24625: PPUSH
24626: LD_VAR 0 6
24630: PPUSH
24631: LD_EXP 94
24635: PUSH
24636: LD_VAR 0 6
24640: ARRAY
24641: PPUSH
24642: LD_VAR 0 5
24646: PPUSH
24647: CALL_OW 3
24651: PPUSH
24652: CALL_OW 1
24656: ST_TO_ADDR
// end ; end ;
24657: GO 24495
24659: POP
24660: POP
// end ;
24661: LD_VAR 0 4
24665: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24666: LD_INT 0
24668: PPUSH
24669: PPUSH
24670: PPUSH
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
24676: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 264
24686: PUSH
24687: LD_EXP 103
24691: EQUAL
24692: NOT
24693: PUSH
24694: LD_VAR 0 1
24698: PUSH
24699: LD_EXP 93
24703: IN
24704: NOT
24705: OR
24706: IFFALSE 24710
// exit ;
24708: GO 25032
// index := GetElementIndex ( minersList , unit ) ;
24710: LD_ADDR_VAR 0 6
24714: PUSH
24715: LD_EXP 93
24719: PPUSH
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL 30404 0 2
24729: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24730: LD_ADDR_VAR 0 8
24734: PUSH
24735: LD_EXP 95
24739: PUSH
24740: LD_EXP 94
24744: PUSH
24745: LD_VAR 0 6
24749: ARRAY
24750: MINUS
24751: ST_TO_ADDR
// if not minesFreeAmount then
24752: LD_VAR 0 8
24756: NOT
24757: IFFALSE 24761
// exit ;
24759: GO 25032
// tmp := [ ] ;
24761: LD_ADDR_VAR 0 7
24765: PUSH
24766: EMPTY
24767: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24768: LD_ADDR_VAR 0 5
24772: PUSH
24773: DOUBLE
24774: LD_INT 1
24776: DEC
24777: ST_TO_ADDR
24778: LD_VAR 0 8
24782: PUSH
24783: FOR_TO
24784: IFFALSE 24979
// begin _d := rand ( 0 , 5 ) ;
24786: LD_ADDR_VAR 0 11
24790: PUSH
24791: LD_INT 0
24793: PPUSH
24794: LD_INT 5
24796: PPUSH
24797: CALL_OW 12
24801: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24802: LD_ADDR_VAR 0 12
24806: PUSH
24807: LD_INT 2
24809: PPUSH
24810: LD_INT 6
24812: PPUSH
24813: CALL_OW 12
24817: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24818: LD_ADDR_VAR 0 9
24822: PUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: LD_VAR 0 11
24832: PPUSH
24833: LD_VAR 0 12
24837: PPUSH
24838: CALL_OW 272
24842: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24843: LD_ADDR_VAR 0 10
24847: PUSH
24848: LD_VAR 0 3
24852: PPUSH
24853: LD_VAR 0 11
24857: PPUSH
24858: LD_VAR 0 12
24862: PPUSH
24863: CALL_OW 273
24867: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24868: LD_VAR 0 9
24872: PPUSH
24873: LD_VAR 0 10
24877: PPUSH
24878: CALL_OW 488
24882: PUSH
24883: LD_VAR 0 9
24887: PUSH
24888: LD_VAR 0 10
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_VAR 0 7
24901: IN
24902: NOT
24903: AND
24904: PUSH
24905: LD_VAR 0 9
24909: PPUSH
24910: LD_VAR 0 10
24914: PPUSH
24915: CALL_OW 458
24919: NOT
24920: AND
24921: IFFALSE 24963
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24923: LD_ADDR_VAR 0 7
24927: PUSH
24928: LD_VAR 0 7
24932: PPUSH
24933: LD_VAR 0 7
24937: PUSH
24938: LD_INT 1
24940: PLUS
24941: PPUSH
24942: LD_VAR 0 9
24946: PUSH
24947: LD_VAR 0 10
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PPUSH
24956: CALL_OW 1
24960: ST_TO_ADDR
24961: GO 24977
// i := i - 1 ;
24963: LD_ADDR_VAR 0 5
24967: PUSH
24968: LD_VAR 0 5
24972: PUSH
24973: LD_INT 1
24975: MINUS
24976: ST_TO_ADDR
// end ;
24977: GO 24783
24979: POP
24980: POP
// for i in tmp do
24981: LD_ADDR_VAR 0 5
24985: PUSH
24986: LD_VAR 0 7
24990: PUSH
24991: FOR_IN
24992: IFFALSE 25030
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24994: LD_VAR 0 1
24998: PPUSH
24999: LD_VAR 0 5
25003: PUSH
25004: LD_INT 1
25006: ARRAY
25007: PPUSH
25008: LD_VAR 0 5
25012: PUSH
25013: LD_INT 2
25015: ARRAY
25016: PPUSH
25017: CALL 23972 0 3
25021: NOT
25022: IFFALSE 25028
// exit ;
25024: POP
25025: POP
25026: GO 25032
25028: GO 24991
25030: POP
25031: POP
// end ;
25032: LD_VAR 0 4
25036: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25037: LD_INT 0
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
25044: PPUSH
25045: PPUSH
// if not GetClass ( unit ) = class_sniper then
25046: LD_VAR 0 1
25050: PPUSH
25051: CALL_OW 257
25055: PUSH
25056: LD_INT 5
25058: EQUAL
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25452
// dist := 8 ;
25064: LD_ADDR_VAR 0 5
25068: PUSH
25069: LD_INT 8
25071: ST_TO_ADDR
// viewRange := 12 ;
25072: LD_ADDR_VAR 0 7
25076: PUSH
25077: LD_INT 12
25079: ST_TO_ADDR
// side := GetSide ( unit ) ;
25080: LD_ADDR_VAR 0 6
25084: PUSH
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 255
25094: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25095: LD_INT 61
25097: PPUSH
25098: LD_VAR 0 6
25102: PPUSH
25103: CALL_OW 321
25107: PUSH
25108: LD_INT 2
25110: EQUAL
25111: IFFALSE 25121
// viewRange := 16 ;
25113: LD_ADDR_VAR 0 7
25117: PUSH
25118: LD_INT 16
25120: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25121: LD_VAR 0 1
25125: PPUSH
25126: LD_VAR 0 2
25130: PPUSH
25131: LD_VAR 0 3
25135: PPUSH
25136: CALL_OW 297
25140: PUSH
25141: LD_VAR 0 5
25145: GREATER
25146: IFFALSE 25225
// begin ComMoveXY ( unit , x , y ) ;
25148: LD_VAR 0 1
25152: PPUSH
25153: LD_VAR 0 2
25157: PPUSH
25158: LD_VAR 0 3
25162: PPUSH
25163: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25167: LD_INT 35
25169: PPUSH
25170: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25174: LD_VAR 0 1
25178: PPUSH
25179: LD_VAR 0 2
25183: PPUSH
25184: LD_VAR 0 3
25188: PPUSH
25189: CALL 61123 0 3
25193: NOT
25194: IFFALSE 25198
// exit ;
25196: GO 25452
// until GetDistUnitXY ( unit , x , y ) < dist ;
25198: LD_VAR 0 1
25202: PPUSH
25203: LD_VAR 0 2
25207: PPUSH
25208: LD_VAR 0 3
25212: PPUSH
25213: CALL_OW 297
25217: PUSH
25218: LD_VAR 0 5
25222: LESS
25223: IFFALSE 25167
// end ; ComTurnXY ( unit , x , y ) ;
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_VAR 0 2
25234: PPUSH
25235: LD_VAR 0 3
25239: PPUSH
25240: CALL_OW 118
// wait ( 5 ) ;
25244: LD_INT 5
25246: PPUSH
25247: CALL_OW 67
// _d := GetDir ( unit ) ;
25251: LD_ADDR_VAR 0 10
25255: PUSH
25256: LD_VAR 0 1
25260: PPUSH
25261: CALL_OW 254
25265: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25266: LD_ADDR_VAR 0 8
25270: PUSH
25271: LD_VAR 0 1
25275: PPUSH
25276: CALL_OW 250
25280: PPUSH
25281: LD_VAR 0 10
25285: PPUSH
25286: LD_VAR 0 5
25290: PPUSH
25291: CALL_OW 272
25295: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25296: LD_ADDR_VAR 0 9
25300: PUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 251
25310: PPUSH
25311: LD_VAR 0 10
25315: PPUSH
25316: LD_VAR 0 5
25320: PPUSH
25321: CALL_OW 273
25325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25326: LD_VAR 0 8
25330: PPUSH
25331: LD_VAR 0 9
25335: PPUSH
25336: CALL_OW 488
25340: NOT
25341: IFFALSE 25345
// exit ;
25343: GO 25452
// ComAnimCustom ( unit , 1 ) ;
25345: LD_VAR 0 1
25349: PPUSH
25350: LD_INT 1
25352: PPUSH
25353: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25357: LD_VAR 0 8
25361: PPUSH
25362: LD_VAR 0 9
25366: PPUSH
25367: LD_VAR 0 6
25371: PPUSH
25372: LD_VAR 0 7
25376: PPUSH
25377: CALL_OW 330
// repeat wait ( 1 ) ;
25381: LD_INT 1
25383: PPUSH
25384: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 316
25397: PUSH
25398: LD_VAR 0 1
25402: PPUSH
25403: CALL_OW 314
25407: OR
25408: PUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: CALL_OW 302
25418: NOT
25419: OR
25420: PUSH
25421: LD_VAR 0 1
25425: PPUSH
25426: CALL_OW 301
25430: OR
25431: IFFALSE 25381
// RemoveSeeing ( _x , _y , side ) ;
25433: LD_VAR 0 8
25437: PPUSH
25438: LD_VAR 0 9
25442: PPUSH
25443: LD_VAR 0 6
25447: PPUSH
25448: CALL_OW 331
// end ; end_of_file
25452: LD_VAR 0 4
25456: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
25457: LD_INT 0
25459: PPUSH
// ar_miner := 81 ;
25460: LD_ADDR_EXP 103
25464: PUSH
25465: LD_INT 81
25467: ST_TO_ADDR
// ar_crane := 88 ;
25468: LD_ADDR_EXP 102
25472: PUSH
25473: LD_INT 88
25475: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
25476: LD_ADDR_EXP 97
25480: PUSH
25481: LD_INT 89
25483: ST_TO_ADDR
// us_hack := 99 ;
25484: LD_ADDR_EXP 98
25488: PUSH
25489: LD_INT 99
25491: ST_TO_ADDR
// us_artillery := 97 ;
25492: LD_ADDR_EXP 99
25496: PUSH
25497: LD_INT 97
25499: ST_TO_ADDR
// ar_bio_bomb := 91 ;
25500: LD_ADDR_EXP 100
25504: PUSH
25505: LD_INT 91
25507: ST_TO_ADDR
// ar_mortar := 92 ;
25508: LD_ADDR_EXP 101
25512: PUSH
25513: LD_INT 92
25515: ST_TO_ADDR
// ru_flamethrower := 93 ;
25516: LD_ADDR_EXP 104
25520: PUSH
25521: LD_INT 93
25523: ST_TO_ADDR
// ru_radar := 98 ;
25524: LD_ADDR_EXP 96
25528: PUSH
25529: LD_INT 98
25531: ST_TO_ADDR
// tech_Artillery := 80 ;
25532: LD_ADDR_EXP 105
25536: PUSH
25537: LD_INT 80
25539: ST_TO_ADDR
// tech_RadMat := 81 ;
25540: LD_ADDR_EXP 106
25544: PUSH
25545: LD_INT 81
25547: ST_TO_ADDR
// tech_BasicTools := 82 ;
25548: LD_ADDR_EXP 107
25552: PUSH
25553: LD_INT 82
25555: ST_TO_ADDR
// tech_Cargo := 83 ;
25556: LD_ADDR_EXP 108
25560: PUSH
25561: LD_INT 83
25563: ST_TO_ADDR
// tech_Track := 84 ;
25564: LD_ADDR_EXP 109
25568: PUSH
25569: LD_INT 84
25571: ST_TO_ADDR
// tech_Crane := 85 ;
25572: LD_ADDR_EXP 110
25576: PUSH
25577: LD_INT 85
25579: ST_TO_ADDR
// tech_Bulldozer := 86 ;
25580: LD_ADDR_EXP 111
25584: PUSH
25585: LD_INT 86
25587: ST_TO_ADDR
// tech_Hovercraft := 87 ;
25588: LD_ADDR_EXP 112
25592: PUSH
25593: LD_INT 87
25595: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
25596: LD_ADDR_EXP 113
25600: PUSH
25601: LD_INT 88
25603: ST_TO_ADDR
// class_mastodont := 31 ;
25604: LD_ADDR_EXP 114
25608: PUSH
25609: LD_INT 31
25611: ST_TO_ADDR
// class_horse := 21 ;
25612: LD_ADDR_EXP 115
25616: PUSH
25617: LD_INT 21
25619: ST_TO_ADDR
// end ;
25620: LD_VAR 0 1
25624: RET
// every 1 do
25625: GO 25627
25627: DISABLE
// InitGlobalVariables ; end_of_file
25628: CALL 25457 0 0
25632: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25633: LD_INT 0
25635: PPUSH
25636: PPUSH
// if exist_mode then
25637: LD_VAR 0 2
25641: IFFALSE 25666
// unit := CreateCharacter ( prefix & ident ) else
25643: LD_ADDR_VAR 0 5
25647: PUSH
25648: LD_VAR 0 3
25652: PUSH
25653: LD_VAR 0 1
25657: STR
25658: PPUSH
25659: CALL_OW 34
25663: ST_TO_ADDR
25664: GO 25681
// unit := NewCharacter ( ident ) ;
25666: LD_ADDR_VAR 0 5
25670: PUSH
25671: LD_VAR 0 1
25675: PPUSH
25676: CALL_OW 25
25680: ST_TO_ADDR
// result := unit ;
25681: LD_ADDR_VAR 0 4
25685: PUSH
25686: LD_VAR 0 5
25690: ST_TO_ADDR
// end ;
25691: LD_VAR 0 4
25695: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25696: LD_INT 0
25698: PPUSH
25699: PPUSH
// if not side or not nation then
25700: LD_VAR 0 1
25704: NOT
25705: PUSH
25706: LD_VAR 0 2
25710: NOT
25711: OR
25712: IFFALSE 25716
// exit ;
25714: GO 26484
// case nation of nation_american :
25716: LD_VAR 0 2
25720: PUSH
25721: LD_INT 1
25723: DOUBLE
25724: EQUAL
25725: IFTRUE 25729
25727: GO 25943
25729: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25730: LD_ADDR_VAR 0 4
25734: PUSH
25735: LD_INT 35
25737: PUSH
25738: LD_INT 45
25740: PUSH
25741: LD_INT 46
25743: PUSH
25744: LD_INT 47
25746: PUSH
25747: LD_INT 82
25749: PUSH
25750: LD_INT 83
25752: PUSH
25753: LD_INT 84
25755: PUSH
25756: LD_INT 85
25758: PUSH
25759: LD_INT 86
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: LD_INT 6
25770: PUSH
25771: LD_INT 15
25773: PUSH
25774: LD_INT 16
25776: PUSH
25777: LD_INT 7
25779: PUSH
25780: LD_INT 12
25782: PUSH
25783: LD_INT 13
25785: PUSH
25786: LD_INT 10
25788: PUSH
25789: LD_INT 14
25791: PUSH
25792: LD_INT 20
25794: PUSH
25795: LD_INT 21
25797: PUSH
25798: LD_INT 22
25800: PUSH
25801: LD_INT 25
25803: PUSH
25804: LD_INT 32
25806: PUSH
25807: LD_INT 27
25809: PUSH
25810: LD_INT 36
25812: PUSH
25813: LD_INT 69
25815: PUSH
25816: LD_INT 39
25818: PUSH
25819: LD_INT 34
25821: PUSH
25822: LD_INT 40
25824: PUSH
25825: LD_INT 48
25827: PUSH
25828: LD_INT 49
25830: PUSH
25831: LD_INT 50
25833: PUSH
25834: LD_INT 51
25836: PUSH
25837: LD_INT 52
25839: PUSH
25840: LD_INT 53
25842: PUSH
25843: LD_INT 54
25845: PUSH
25846: LD_INT 55
25848: PUSH
25849: LD_INT 56
25851: PUSH
25852: LD_INT 57
25854: PUSH
25855: LD_INT 58
25857: PUSH
25858: LD_INT 59
25860: PUSH
25861: LD_INT 60
25863: PUSH
25864: LD_INT 61
25866: PUSH
25867: LD_INT 62
25869: PUSH
25870: LD_INT 80
25872: PUSH
25873: LD_INT 82
25875: PUSH
25876: LD_INT 83
25878: PUSH
25879: LD_INT 84
25881: PUSH
25882: LD_INT 85
25884: PUSH
25885: LD_INT 86
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: ST_TO_ADDR
25941: GO 26408
25943: LD_INT 2
25945: DOUBLE
25946: EQUAL
25947: IFTRUE 25951
25949: GO 26177
25951: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25952: LD_ADDR_VAR 0 4
25956: PUSH
25957: LD_INT 35
25959: PUSH
25960: LD_INT 45
25962: PUSH
25963: LD_INT 46
25965: PUSH
25966: LD_INT 47
25968: PUSH
25969: LD_INT 82
25971: PUSH
25972: LD_INT 83
25974: PUSH
25975: LD_INT 84
25977: PUSH
25978: LD_INT 85
25980: PUSH
25981: LD_INT 87
25983: PUSH
25984: LD_INT 70
25986: PUSH
25987: LD_INT 1
25989: PUSH
25990: LD_INT 11
25992: PUSH
25993: LD_INT 3
25995: PUSH
25996: LD_INT 4
25998: PUSH
25999: LD_INT 5
26001: PUSH
26002: LD_INT 6
26004: PUSH
26005: LD_INT 15
26007: PUSH
26008: LD_INT 18
26010: PUSH
26011: LD_INT 7
26013: PUSH
26014: LD_INT 17
26016: PUSH
26017: LD_INT 8
26019: PUSH
26020: LD_INT 20
26022: PUSH
26023: LD_INT 21
26025: PUSH
26026: LD_INT 22
26028: PUSH
26029: LD_INT 72
26031: PUSH
26032: LD_INT 26
26034: PUSH
26035: LD_INT 69
26037: PUSH
26038: LD_INT 39
26040: PUSH
26041: LD_INT 40
26043: PUSH
26044: LD_INT 41
26046: PUSH
26047: LD_INT 42
26049: PUSH
26050: LD_INT 43
26052: PUSH
26053: LD_INT 48
26055: PUSH
26056: LD_INT 49
26058: PUSH
26059: LD_INT 50
26061: PUSH
26062: LD_INT 51
26064: PUSH
26065: LD_INT 52
26067: PUSH
26068: LD_INT 53
26070: PUSH
26071: LD_INT 54
26073: PUSH
26074: LD_INT 55
26076: PUSH
26077: LD_INT 56
26079: PUSH
26080: LD_INT 60
26082: PUSH
26083: LD_INT 61
26085: PUSH
26086: LD_INT 62
26088: PUSH
26089: LD_INT 66
26091: PUSH
26092: LD_INT 67
26094: PUSH
26095: LD_INT 68
26097: PUSH
26098: LD_INT 81
26100: PUSH
26101: LD_INT 82
26103: PUSH
26104: LD_INT 83
26106: PUSH
26107: LD_INT 84
26109: PUSH
26110: LD_INT 85
26112: PUSH
26113: LD_INT 87
26115: PUSH
26116: LD_INT 88
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: ST_TO_ADDR
26175: GO 26408
26177: LD_INT 3
26179: DOUBLE
26180: EQUAL
26181: IFTRUE 26185
26183: GO 26407
26185: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26186: LD_ADDR_VAR 0 4
26190: PUSH
26191: LD_INT 46
26193: PUSH
26194: LD_INT 47
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: LD_INT 2
26202: PUSH
26203: LD_INT 82
26205: PUSH
26206: LD_INT 83
26208: PUSH
26209: LD_INT 84
26211: PUSH
26212: LD_INT 85
26214: PUSH
26215: LD_INT 86
26217: PUSH
26218: LD_INT 11
26220: PUSH
26221: LD_INT 9
26223: PUSH
26224: LD_INT 20
26226: PUSH
26227: LD_INT 19
26229: PUSH
26230: LD_INT 21
26232: PUSH
26233: LD_INT 24
26235: PUSH
26236: LD_INT 22
26238: PUSH
26239: LD_INT 25
26241: PUSH
26242: LD_INT 28
26244: PUSH
26245: LD_INT 29
26247: PUSH
26248: LD_INT 30
26250: PUSH
26251: LD_INT 31
26253: PUSH
26254: LD_INT 37
26256: PUSH
26257: LD_INT 38
26259: PUSH
26260: LD_INT 32
26262: PUSH
26263: LD_INT 27
26265: PUSH
26266: LD_INT 33
26268: PUSH
26269: LD_INT 69
26271: PUSH
26272: LD_INT 39
26274: PUSH
26275: LD_INT 34
26277: PUSH
26278: LD_INT 40
26280: PUSH
26281: LD_INT 71
26283: PUSH
26284: LD_INT 23
26286: PUSH
26287: LD_INT 44
26289: PUSH
26290: LD_INT 48
26292: PUSH
26293: LD_INT 49
26295: PUSH
26296: LD_INT 50
26298: PUSH
26299: LD_INT 51
26301: PUSH
26302: LD_INT 52
26304: PUSH
26305: LD_INT 53
26307: PUSH
26308: LD_INT 54
26310: PUSH
26311: LD_INT 55
26313: PUSH
26314: LD_INT 56
26316: PUSH
26317: LD_INT 57
26319: PUSH
26320: LD_INT 58
26322: PUSH
26323: LD_INT 59
26325: PUSH
26326: LD_INT 63
26328: PUSH
26329: LD_INT 64
26331: PUSH
26332: LD_INT 65
26334: PUSH
26335: LD_INT 82
26337: PUSH
26338: LD_INT 83
26340: PUSH
26341: LD_INT 84
26343: PUSH
26344: LD_INT 85
26346: PUSH
26347: LD_INT 86
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: ST_TO_ADDR
26405: GO 26408
26407: POP
// if state > - 1 and state < 3 then
26408: LD_VAR 0 3
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: GREATER
26417: PUSH
26418: LD_VAR 0 3
26422: PUSH
26423: LD_INT 3
26425: LESS
26426: AND
26427: IFFALSE 26484
// for i in result do
26429: LD_ADDR_VAR 0 5
26433: PUSH
26434: LD_VAR 0 4
26438: PUSH
26439: FOR_IN
26440: IFFALSE 26482
// if GetTech ( i , side ) <> state then
26442: LD_VAR 0 5
26446: PPUSH
26447: LD_VAR 0 1
26451: PPUSH
26452: CALL_OW 321
26456: PUSH
26457: LD_VAR 0 3
26461: NONEQUAL
26462: IFFALSE 26480
// result := result diff i ;
26464: LD_ADDR_VAR 0 4
26468: PUSH
26469: LD_VAR 0 4
26473: PUSH
26474: LD_VAR 0 5
26478: DIFF
26479: ST_TO_ADDR
26480: GO 26439
26482: POP
26483: POP
// end ;
26484: LD_VAR 0 4
26488: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
26493: PPUSH
// result := true ;
26494: LD_ADDR_VAR 0 3
26498: PUSH
26499: LD_INT 1
26501: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26502: LD_ADDR_VAR 0 5
26506: PUSH
26507: LD_VAR 0 2
26511: PPUSH
26512: CALL_OW 480
26516: ST_TO_ADDR
// if not tmp then
26517: LD_VAR 0 5
26521: NOT
26522: IFFALSE 26526
// exit ;
26524: GO 26575
// for i in tmp do
26526: LD_ADDR_VAR 0 4
26530: PUSH
26531: LD_VAR 0 5
26535: PUSH
26536: FOR_IN
26537: IFFALSE 26573
// if GetTech ( i , side ) <> state_researched then
26539: LD_VAR 0 4
26543: PPUSH
26544: LD_VAR 0 1
26548: PPUSH
26549: CALL_OW 321
26553: PUSH
26554: LD_INT 2
26556: NONEQUAL
26557: IFFALSE 26571
// begin result := false ;
26559: LD_ADDR_VAR 0 3
26563: PUSH
26564: LD_INT 0
26566: ST_TO_ADDR
// exit ;
26567: POP
26568: POP
26569: GO 26575
// end ;
26571: GO 26536
26573: POP
26574: POP
// end ;
26575: LD_VAR 0 3
26579: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26580: LD_INT 0
26582: PPUSH
26583: PPUSH
26584: PPUSH
26585: PPUSH
26586: PPUSH
26587: PPUSH
26588: PPUSH
26589: PPUSH
26590: PPUSH
26591: PPUSH
26592: PPUSH
26593: PPUSH
26594: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26595: LD_VAR 0 1
26599: NOT
26600: PUSH
26601: LD_VAR 0 1
26605: PPUSH
26606: CALL_OW 257
26610: PUSH
26611: LD_INT 9
26613: NONEQUAL
26614: OR
26615: IFFALSE 26619
// exit ;
26617: GO 27192
// side := GetSide ( unit ) ;
26619: LD_ADDR_VAR 0 9
26623: PUSH
26624: LD_VAR 0 1
26628: PPUSH
26629: CALL_OW 255
26633: ST_TO_ADDR
// tech_space := tech_spacanom ;
26634: LD_ADDR_VAR 0 12
26638: PUSH
26639: LD_INT 29
26641: ST_TO_ADDR
// tech_time := tech_taurad ;
26642: LD_ADDR_VAR 0 13
26646: PUSH
26647: LD_INT 28
26649: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26650: LD_ADDR_VAR 0 11
26654: PUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 310
26664: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26665: LD_VAR 0 11
26669: PPUSH
26670: CALL_OW 247
26674: PUSH
26675: LD_INT 2
26677: EQUAL
26678: IFFALSE 26682
// exit ;
26680: GO 27192
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26682: LD_ADDR_VAR 0 8
26686: PUSH
26687: LD_INT 81
26689: PUSH
26690: LD_VAR 0 9
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 3
26701: PUSH
26702: LD_INT 21
26704: PUSH
26705: LD_INT 3
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PPUSH
26720: CALL_OW 69
26724: ST_TO_ADDR
// if not tmp then
26725: LD_VAR 0 8
26729: NOT
26730: IFFALSE 26734
// exit ;
26732: GO 27192
// if in_unit then
26734: LD_VAR 0 11
26738: IFFALSE 26762
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26740: LD_ADDR_VAR 0 10
26744: PUSH
26745: LD_VAR 0 8
26749: PPUSH
26750: LD_VAR 0 11
26754: PPUSH
26755: CALL_OW 74
26759: ST_TO_ADDR
26760: GO 26782
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26762: LD_ADDR_VAR 0 10
26766: PUSH
26767: LD_VAR 0 8
26771: PPUSH
26772: LD_VAR 0 1
26776: PPUSH
26777: CALL_OW 74
26781: ST_TO_ADDR
// if not enemy then
26782: LD_VAR 0 10
26786: NOT
26787: IFFALSE 26791
// exit ;
26789: GO 27192
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26791: LD_VAR 0 11
26795: PUSH
26796: LD_VAR 0 11
26800: PPUSH
26801: LD_VAR 0 10
26805: PPUSH
26806: CALL_OW 296
26810: PUSH
26811: LD_INT 13
26813: GREATER
26814: AND
26815: PUSH
26816: LD_VAR 0 1
26820: PPUSH
26821: LD_VAR 0 10
26825: PPUSH
26826: CALL_OW 296
26830: PUSH
26831: LD_INT 12
26833: GREATER
26834: OR
26835: IFFALSE 26839
// exit ;
26837: GO 27192
// missile := [ 1 ] ;
26839: LD_ADDR_VAR 0 14
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: EMPTY
26848: LIST
26849: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26850: LD_VAR 0 9
26854: PPUSH
26855: LD_VAR 0 12
26859: PPUSH
26860: CALL_OW 325
26864: IFFALSE 26893
// missile := Replace ( missile , missile + 1 , 2 ) ;
26866: LD_ADDR_VAR 0 14
26870: PUSH
26871: LD_VAR 0 14
26875: PPUSH
26876: LD_VAR 0 14
26880: PUSH
26881: LD_INT 1
26883: PLUS
26884: PPUSH
26885: LD_INT 2
26887: PPUSH
26888: CALL_OW 1
26892: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26893: LD_VAR 0 9
26897: PPUSH
26898: LD_VAR 0 13
26902: PPUSH
26903: CALL_OW 325
26907: PUSH
26908: LD_VAR 0 10
26912: PPUSH
26913: CALL_OW 255
26917: PPUSH
26918: LD_VAR 0 13
26922: PPUSH
26923: CALL_OW 325
26927: NOT
26928: AND
26929: IFFALSE 26958
// missile := Replace ( missile , missile + 1 , 3 ) ;
26931: LD_ADDR_VAR 0 14
26935: PUSH
26936: LD_VAR 0 14
26940: PPUSH
26941: LD_VAR 0 14
26945: PUSH
26946: LD_INT 1
26948: PLUS
26949: PPUSH
26950: LD_INT 3
26952: PPUSH
26953: CALL_OW 1
26957: ST_TO_ADDR
// if missile < 2 then
26958: LD_VAR 0 14
26962: PUSH
26963: LD_INT 2
26965: LESS
26966: IFFALSE 26970
// exit ;
26968: GO 27192
// x := GetX ( enemy ) ;
26970: LD_ADDR_VAR 0 4
26974: PUSH
26975: LD_VAR 0 10
26979: PPUSH
26980: CALL_OW 250
26984: ST_TO_ADDR
// y := GetY ( enemy ) ;
26985: LD_ADDR_VAR 0 5
26989: PUSH
26990: LD_VAR 0 10
26994: PPUSH
26995: CALL_OW 251
26999: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27000: LD_ADDR_VAR 0 6
27004: PUSH
27005: LD_VAR 0 4
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PPUSH
27014: LD_INT 1
27016: PPUSH
27017: CALL_OW 12
27021: PLUS
27022: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27023: LD_ADDR_VAR 0 7
27027: PUSH
27028: LD_VAR 0 5
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PPUSH
27037: LD_INT 1
27039: PPUSH
27040: CALL_OW 12
27044: PLUS
27045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27046: LD_VAR 0 6
27050: PPUSH
27051: LD_VAR 0 7
27055: PPUSH
27056: CALL_OW 488
27060: NOT
27061: IFFALSE 27083
// begin _x := x ;
27063: LD_ADDR_VAR 0 6
27067: PUSH
27068: LD_VAR 0 4
27072: ST_TO_ADDR
// _y := y ;
27073: LD_ADDR_VAR 0 7
27077: PUSH
27078: LD_VAR 0 5
27082: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27083: LD_ADDR_VAR 0 3
27087: PUSH
27088: LD_INT 1
27090: PPUSH
27091: LD_VAR 0 14
27095: PPUSH
27096: CALL_OW 12
27100: ST_TO_ADDR
// case i of 1 :
27101: LD_VAR 0 3
27105: PUSH
27106: LD_INT 1
27108: DOUBLE
27109: EQUAL
27110: IFTRUE 27114
27112: GO 27131
27114: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27115: LD_VAR 0 1
27119: PPUSH
27120: LD_VAR 0 10
27124: PPUSH
27125: CALL_OW 115
27129: GO 27192
27131: LD_INT 2
27133: DOUBLE
27134: EQUAL
27135: IFTRUE 27139
27137: GO 27161
27139: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27140: LD_VAR 0 1
27144: PPUSH
27145: LD_VAR 0 6
27149: PPUSH
27150: LD_VAR 0 7
27154: PPUSH
27155: CALL_OW 153
27159: GO 27192
27161: LD_INT 3
27163: DOUBLE
27164: EQUAL
27165: IFTRUE 27169
27167: GO 27191
27169: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27170: LD_VAR 0 1
27174: PPUSH
27175: LD_VAR 0 6
27179: PPUSH
27180: LD_VAR 0 7
27184: PPUSH
27185: CALL_OW 154
27189: GO 27192
27191: POP
// end ;
27192: LD_VAR 0 2
27196: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27197: LD_INT 0
27199: PPUSH
27200: PPUSH
27201: PPUSH
27202: PPUSH
27203: PPUSH
27204: PPUSH
// if not unit or not building then
27205: LD_VAR 0 1
27209: NOT
27210: PUSH
27211: LD_VAR 0 2
27215: NOT
27216: OR
27217: IFFALSE 27221
// exit ;
27219: GO 27379
// x := GetX ( building ) ;
27221: LD_ADDR_VAR 0 5
27225: PUSH
27226: LD_VAR 0 2
27230: PPUSH
27231: CALL_OW 250
27235: ST_TO_ADDR
// y := GetY ( building ) ;
27236: LD_ADDR_VAR 0 6
27240: PUSH
27241: LD_VAR 0 2
27245: PPUSH
27246: CALL_OW 251
27250: ST_TO_ADDR
// for i = 0 to 5 do
27251: LD_ADDR_VAR 0 4
27255: PUSH
27256: DOUBLE
27257: LD_INT 0
27259: DEC
27260: ST_TO_ADDR
27261: LD_INT 5
27263: PUSH
27264: FOR_TO
27265: IFFALSE 27377
// begin _x := ShiftX ( x , i , 3 ) ;
27267: LD_ADDR_VAR 0 7
27271: PUSH
27272: LD_VAR 0 5
27276: PPUSH
27277: LD_VAR 0 4
27281: PPUSH
27282: LD_INT 3
27284: PPUSH
27285: CALL_OW 272
27289: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27290: LD_ADDR_VAR 0 8
27294: PUSH
27295: LD_VAR 0 6
27299: PPUSH
27300: LD_VAR 0 4
27304: PPUSH
27305: LD_INT 3
27307: PPUSH
27308: CALL_OW 273
27312: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27313: LD_VAR 0 7
27317: PPUSH
27318: LD_VAR 0 8
27322: PPUSH
27323: CALL_OW 488
27327: NOT
27328: IFFALSE 27332
// continue ;
27330: GO 27264
// if HexInfo ( _x , _y ) = 0 then
27332: LD_VAR 0 7
27336: PPUSH
27337: LD_VAR 0 8
27341: PPUSH
27342: CALL_OW 428
27346: PUSH
27347: LD_INT 0
27349: EQUAL
27350: IFFALSE 27375
// begin ComMoveXY ( unit , _x , _y ) ;
27352: LD_VAR 0 1
27356: PPUSH
27357: LD_VAR 0 7
27361: PPUSH
27362: LD_VAR 0 8
27366: PPUSH
27367: CALL_OW 111
// exit ;
27371: POP
27372: POP
27373: GO 27379
// end ; end ;
27375: GO 27264
27377: POP
27378: POP
// end ;
27379: LD_VAR 0 3
27383: RET
// export function ScanBase ( side , base_area ) ; begin
27384: LD_INT 0
27386: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27387: LD_ADDR_VAR 0 3
27391: PUSH
27392: LD_VAR 0 2
27396: PPUSH
27397: LD_INT 81
27399: PUSH
27400: LD_VAR 0 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PPUSH
27409: CALL_OW 70
27413: ST_TO_ADDR
// end ;
27414: LD_VAR 0 3
27418: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
27423: PPUSH
27424: PPUSH
// result := false ;
27425: LD_ADDR_VAR 0 2
27429: PUSH
27430: LD_INT 0
27432: ST_TO_ADDR
// side := GetSide ( unit ) ;
27433: LD_ADDR_VAR 0 3
27437: PUSH
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 255
27447: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27448: LD_ADDR_VAR 0 4
27452: PUSH
27453: LD_VAR 0 1
27457: PPUSH
27458: CALL_OW 248
27462: ST_TO_ADDR
// case nat of 1 :
27463: LD_VAR 0 4
27467: PUSH
27468: LD_INT 1
27470: DOUBLE
27471: EQUAL
27472: IFTRUE 27476
27474: GO 27487
27476: POP
// tech := tech_lassight ; 2 :
27477: LD_ADDR_VAR 0 5
27481: PUSH
27482: LD_INT 12
27484: ST_TO_ADDR
27485: GO 27526
27487: LD_INT 2
27489: DOUBLE
27490: EQUAL
27491: IFTRUE 27495
27493: GO 27506
27495: POP
// tech := tech_mortar ; 3 :
27496: LD_ADDR_VAR 0 5
27500: PUSH
27501: LD_INT 41
27503: ST_TO_ADDR
27504: GO 27526
27506: LD_INT 3
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27525
27514: POP
// tech := tech_bazooka ; end ;
27515: LD_ADDR_VAR 0 5
27519: PUSH
27520: LD_INT 44
27522: ST_TO_ADDR
27523: GO 27526
27525: POP
// if Researched ( side , tech ) then
27526: LD_VAR 0 3
27530: PPUSH
27531: LD_VAR 0 5
27535: PPUSH
27536: CALL_OW 325
27540: IFFALSE 27567
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27542: LD_ADDR_VAR 0 2
27546: PUSH
27547: LD_INT 5
27549: PUSH
27550: LD_INT 8
27552: PUSH
27553: LD_INT 9
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: PUSH
27561: LD_VAR 0 4
27565: ARRAY
27566: ST_TO_ADDR
// end ;
27567: LD_VAR 0 2
27571: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27572: LD_INT 0
27574: PPUSH
27575: PPUSH
27576: PPUSH
// if not mines then
27577: LD_VAR 0 2
27581: NOT
27582: IFFALSE 27586
// exit ;
27584: GO 27730
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27586: LD_ADDR_VAR 0 5
27590: PUSH
27591: LD_INT 81
27593: PUSH
27594: LD_VAR 0 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: LD_INT 21
27608: PUSH
27609: LD_INT 3
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PPUSH
27624: CALL_OW 69
27628: ST_TO_ADDR
// for i in mines do
27629: LD_ADDR_VAR 0 4
27633: PUSH
27634: LD_VAR 0 2
27638: PUSH
27639: FOR_IN
27640: IFFALSE 27728
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27642: LD_VAR 0 4
27646: PUSH
27647: LD_INT 1
27649: ARRAY
27650: PPUSH
27651: LD_VAR 0 4
27655: PUSH
27656: LD_INT 2
27658: ARRAY
27659: PPUSH
27660: CALL_OW 458
27664: NOT
27665: IFFALSE 27669
// continue ;
27667: GO 27639
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27669: LD_VAR 0 4
27673: PUSH
27674: LD_INT 1
27676: ARRAY
27677: PPUSH
27678: LD_VAR 0 4
27682: PUSH
27683: LD_INT 2
27685: ARRAY
27686: PPUSH
27687: CALL_OW 428
27691: PUSH
27692: LD_VAR 0 5
27696: IN
27697: IFFALSE 27726
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27699: LD_VAR 0 4
27703: PUSH
27704: LD_INT 1
27706: ARRAY
27707: PPUSH
27708: LD_VAR 0 4
27712: PUSH
27713: LD_INT 2
27715: ARRAY
27716: PPUSH
27717: LD_VAR 0 1
27721: PPUSH
27722: CALL_OW 456
// end ;
27726: GO 27639
27728: POP
27729: POP
// end ;
27730: LD_VAR 0 3
27734: RET
// export function Count ( array ) ; var i ; begin
27735: LD_INT 0
27737: PPUSH
27738: PPUSH
// result := 0 ;
27739: LD_ADDR_VAR 0 2
27743: PUSH
27744: LD_INT 0
27746: ST_TO_ADDR
// for i in array do
27747: LD_ADDR_VAR 0 3
27751: PUSH
27752: LD_VAR 0 1
27756: PUSH
27757: FOR_IN
27758: IFFALSE 27782
// if i then
27760: LD_VAR 0 3
27764: IFFALSE 27780
// result := result + 1 ;
27766: LD_ADDR_VAR 0 2
27770: PUSH
27771: LD_VAR 0 2
27775: PUSH
27776: LD_INT 1
27778: PLUS
27779: ST_TO_ADDR
27780: GO 27757
27782: POP
27783: POP
// end ;
27784: LD_VAR 0 2
27788: RET
// export function IsEmpty ( building ) ; begin
27789: LD_INT 0
27791: PPUSH
// if not building then
27792: LD_VAR 0 1
27796: NOT
27797: IFFALSE 27801
// exit ;
27799: GO 27844
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27801: LD_ADDR_VAR 0 2
27805: PUSH
27806: LD_VAR 0 1
27810: PUSH
27811: LD_INT 22
27813: PUSH
27814: LD_VAR 0 1
27818: PPUSH
27819: CALL_OW 255
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 58
27830: PUSH
27831: EMPTY
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PPUSH
27838: CALL_OW 69
27842: IN
27843: ST_TO_ADDR
// end ;
27844: LD_VAR 0 2
27848: RET
// export function IsNotFull ( building ) ; begin
27849: LD_INT 0
27851: PPUSH
// if not building then
27852: LD_VAR 0 1
27856: NOT
27857: IFFALSE 27861
// exit ;
27859: GO 27880
// result := UnitsInside ( building ) < 6 ;
27861: LD_ADDR_VAR 0 2
27865: PUSH
27866: LD_VAR 0 1
27870: PPUSH
27871: CALL_OW 313
27875: PUSH
27876: LD_INT 6
27878: LESS
27879: ST_TO_ADDR
// end ;
27880: LD_VAR 0 2
27884: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27885: LD_INT 0
27887: PPUSH
27888: PPUSH
27889: PPUSH
27890: PPUSH
// tmp := [ ] ;
27891: LD_ADDR_VAR 0 3
27895: PUSH
27896: EMPTY
27897: ST_TO_ADDR
// list := [ ] ;
27898: LD_ADDR_VAR 0 5
27902: PUSH
27903: EMPTY
27904: ST_TO_ADDR
// for i = 16 to 25 do
27905: LD_ADDR_VAR 0 4
27909: PUSH
27910: DOUBLE
27911: LD_INT 16
27913: DEC
27914: ST_TO_ADDR
27915: LD_INT 25
27917: PUSH
27918: FOR_TO
27919: IFFALSE 27992
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: LD_VAR 0 3
27930: PUSH
27931: LD_INT 22
27933: PUSH
27934: LD_VAR 0 1
27938: PPUSH
27939: CALL_OW 255
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 91
27950: PUSH
27951: LD_VAR 0 1
27955: PUSH
27956: LD_INT 6
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 30
27966: PUSH
27967: LD_VAR 0 4
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: PPUSH
27984: CALL_OW 69
27988: ADD
27989: ST_TO_ADDR
27990: GO 27918
27992: POP
27993: POP
// for i = 1 to tmp do
27994: LD_ADDR_VAR 0 4
27998: PUSH
27999: DOUBLE
28000: LD_INT 1
28002: DEC
28003: ST_TO_ADDR
28004: LD_VAR 0 3
28008: PUSH
28009: FOR_TO
28010: IFFALSE 28098
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28012: LD_ADDR_VAR 0 5
28016: PUSH
28017: LD_VAR 0 5
28021: PUSH
28022: LD_VAR 0 3
28026: PUSH
28027: LD_VAR 0 4
28031: ARRAY
28032: PPUSH
28033: CALL_OW 266
28037: PUSH
28038: LD_VAR 0 3
28042: PUSH
28043: LD_VAR 0 4
28047: ARRAY
28048: PPUSH
28049: CALL_OW 250
28053: PUSH
28054: LD_VAR 0 3
28058: PUSH
28059: LD_VAR 0 4
28063: ARRAY
28064: PPUSH
28065: CALL_OW 251
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: LD_VAR 0 4
28079: ARRAY
28080: PPUSH
28081: CALL_OW 254
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: ADD
28095: ST_TO_ADDR
28096: GO 28009
28098: POP
28099: POP
// result := list ;
28100: LD_ADDR_VAR 0 2
28104: PUSH
28105: LD_VAR 0 5
28109: ST_TO_ADDR
// end ;
28110: LD_VAR 0 2
28114: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28115: LD_INT 0
28117: PPUSH
28118: PPUSH
28119: PPUSH
28120: PPUSH
28121: PPUSH
28122: PPUSH
28123: PPUSH
// if not factory then
28124: LD_VAR 0 1
28128: NOT
28129: IFFALSE 28133
// exit ;
28131: GO 28726
// if control = control_apeman then
28133: LD_VAR 0 4
28137: PUSH
28138: LD_INT 5
28140: EQUAL
28141: IFFALSE 28250
// begin tmp := UnitsInside ( factory ) ;
28143: LD_ADDR_VAR 0 8
28147: PUSH
28148: LD_VAR 0 1
28152: PPUSH
28153: CALL_OW 313
28157: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28158: LD_VAR 0 8
28162: PPUSH
28163: LD_INT 25
28165: PUSH
28166: LD_INT 12
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PPUSH
28173: CALL_OW 72
28177: NOT
28178: IFFALSE 28188
// control := control_manual ;
28180: LD_ADDR_VAR 0 4
28184: PUSH
28185: LD_INT 1
28187: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28188: LD_ADDR_VAR 0 8
28192: PUSH
28193: LD_VAR 0 1
28197: PPUSH
28198: CALL 27885 0 1
28202: ST_TO_ADDR
// if tmp then
28203: LD_VAR 0 8
28207: IFFALSE 28250
// begin for i in tmp do
28209: LD_ADDR_VAR 0 7
28213: PUSH
28214: LD_VAR 0 8
28218: PUSH
28219: FOR_IN
28220: IFFALSE 28248
// if i [ 1 ] = b_ext_radio then
28222: LD_VAR 0 7
28226: PUSH
28227: LD_INT 1
28229: ARRAY
28230: PUSH
28231: LD_INT 22
28233: EQUAL
28234: IFFALSE 28246
// begin control := control_remote ;
28236: LD_ADDR_VAR 0 4
28240: PUSH
28241: LD_INT 2
28243: ST_TO_ADDR
// break ;
28244: GO 28248
// end ;
28246: GO 28219
28248: POP
28249: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28250: LD_VAR 0 1
28254: PPUSH
28255: LD_VAR 0 2
28259: PPUSH
28260: LD_VAR 0 3
28264: PPUSH
28265: LD_VAR 0 4
28269: PPUSH
28270: LD_VAR 0 5
28274: PPUSH
28275: CALL_OW 448
28279: IFFALSE 28314
// begin result := [ chassis , engine , control , weapon ] ;
28281: LD_ADDR_VAR 0 6
28285: PUSH
28286: LD_VAR 0 2
28290: PUSH
28291: LD_VAR 0 3
28295: PUSH
28296: LD_VAR 0 4
28300: PUSH
28301: LD_VAR 0 5
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: ST_TO_ADDR
// exit ;
28312: GO 28726
// end ; _chassis := AvailableChassisList ( factory ) ;
28314: LD_ADDR_VAR 0 9
28318: PUSH
28319: LD_VAR 0 1
28323: PPUSH
28324: CALL_OW 475
28328: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28329: LD_ADDR_VAR 0 11
28333: PUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 476
28343: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28344: LD_ADDR_VAR 0 12
28348: PUSH
28349: LD_VAR 0 1
28353: PPUSH
28354: CALL_OW 477
28358: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28359: LD_ADDR_VAR 0 10
28363: PUSH
28364: LD_VAR 0 1
28368: PPUSH
28369: CALL_OW 478
28373: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28374: LD_VAR 0 9
28378: NOT
28379: PUSH
28380: LD_VAR 0 11
28384: NOT
28385: OR
28386: PUSH
28387: LD_VAR 0 12
28391: NOT
28392: OR
28393: PUSH
28394: LD_VAR 0 10
28398: NOT
28399: OR
28400: IFFALSE 28435
// begin result := [ chassis , engine , control , weapon ] ;
28402: LD_ADDR_VAR 0 6
28406: PUSH
28407: LD_VAR 0 2
28411: PUSH
28412: LD_VAR 0 3
28416: PUSH
28417: LD_VAR 0 4
28421: PUSH
28422: LD_VAR 0 5
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
// exit ;
28433: GO 28726
// end ; if not chassis in _chassis then
28435: LD_VAR 0 2
28439: PUSH
28440: LD_VAR 0 9
28444: IN
28445: NOT
28446: IFFALSE 28472
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28448: LD_ADDR_VAR 0 2
28452: PUSH
28453: LD_VAR 0 9
28457: PUSH
28458: LD_INT 1
28460: PPUSH
28461: LD_VAR 0 9
28465: PPUSH
28466: CALL_OW 12
28470: ARRAY
28471: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28472: LD_VAR 0 2
28476: PPUSH
28477: LD_VAR 0 3
28481: PPUSH
28482: CALL 28731 0 2
28486: NOT
28487: IFFALSE 28546
// repeat engine := _engine [ 1 ] ;
28489: LD_ADDR_VAR 0 3
28493: PUSH
28494: LD_VAR 0 11
28498: PUSH
28499: LD_INT 1
28501: ARRAY
28502: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28503: LD_ADDR_VAR 0 11
28507: PUSH
28508: LD_VAR 0 11
28512: PPUSH
28513: LD_INT 1
28515: PPUSH
28516: CALL_OW 3
28520: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28521: LD_VAR 0 2
28525: PPUSH
28526: LD_VAR 0 3
28530: PPUSH
28531: CALL 28731 0 2
28535: PUSH
28536: LD_VAR 0 11
28540: PUSH
28541: EMPTY
28542: EQUAL
28543: OR
28544: IFFALSE 28489
// if not control in _control then
28546: LD_VAR 0 4
28550: PUSH
28551: LD_VAR 0 12
28555: IN
28556: NOT
28557: IFFALSE 28583
// control := _control [ rand ( 1 , _control ) ] ;
28559: LD_ADDR_VAR 0 4
28563: PUSH
28564: LD_VAR 0 12
28568: PUSH
28569: LD_INT 1
28571: PPUSH
28572: LD_VAR 0 12
28576: PPUSH
28577: CALL_OW 12
28581: ARRAY
28582: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28583: LD_VAR 0 2
28587: PPUSH
28588: LD_VAR 0 5
28592: PPUSH
28593: CALL 28951 0 2
28597: NOT
28598: IFFALSE 28657
// repeat weapon := _weapon [ 1 ] ;
28600: LD_ADDR_VAR 0 5
28604: PUSH
28605: LD_VAR 0 10
28609: PUSH
28610: LD_INT 1
28612: ARRAY
28613: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28614: LD_ADDR_VAR 0 10
28618: PUSH
28619: LD_VAR 0 10
28623: PPUSH
28624: LD_INT 1
28626: PPUSH
28627: CALL_OW 3
28631: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28632: LD_VAR 0 2
28636: PPUSH
28637: LD_VAR 0 5
28641: PPUSH
28642: CALL 28951 0 2
28646: PUSH
28647: LD_VAR 0 10
28651: PUSH
28652: EMPTY
28653: EQUAL
28654: OR
28655: IFFALSE 28600
// result := [ ] ;
28657: LD_ADDR_VAR 0 6
28661: PUSH
28662: EMPTY
28663: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_VAR 0 2
28673: PPUSH
28674: LD_VAR 0 3
28678: PPUSH
28679: LD_VAR 0 4
28683: PPUSH
28684: LD_VAR 0 5
28688: PPUSH
28689: CALL_OW 448
28693: IFFALSE 28726
// result := [ chassis , engine , control , weapon ] ;
28695: LD_ADDR_VAR 0 6
28699: PUSH
28700: LD_VAR 0 2
28704: PUSH
28705: LD_VAR 0 3
28709: PUSH
28710: LD_VAR 0 4
28714: PUSH
28715: LD_VAR 0 5
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
// end ;
28726: LD_VAR 0 6
28730: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28731: LD_INT 0
28733: PPUSH
// if not chassis or not engine then
28734: LD_VAR 0 1
28738: NOT
28739: PUSH
28740: LD_VAR 0 2
28744: NOT
28745: OR
28746: IFFALSE 28750
// exit ;
28748: GO 28946
// case engine of engine_solar :
28750: LD_VAR 0 2
28754: PUSH
28755: LD_INT 2
28757: DOUBLE
28758: EQUAL
28759: IFTRUE 28763
28761: GO 28801
28763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: LD_INT 11
28771: PUSH
28772: LD_INT 12
28774: PUSH
28775: LD_INT 13
28777: PUSH
28778: LD_INT 14
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 2
28786: PUSH
28787: LD_INT 3
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: ST_TO_ADDR
28799: GO 28930
28801: LD_INT 1
28803: DOUBLE
28804: EQUAL
28805: IFTRUE 28809
28807: GO 28871
28809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28810: LD_ADDR_VAR 0 3
28814: PUSH
28815: LD_INT 11
28817: PUSH
28818: LD_INT 12
28820: PUSH
28821: LD_INT 13
28823: PUSH
28824: LD_INT 14
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: LD_INT 2
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: LD_INT 4
28838: PUSH
28839: LD_INT 5
28841: PUSH
28842: LD_INT 21
28844: PUSH
28845: LD_INT 23
28847: PUSH
28848: LD_INT 22
28850: PUSH
28851: LD_INT 24
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: ST_TO_ADDR
28869: GO 28930
28871: LD_INT 3
28873: DOUBLE
28874: EQUAL
28875: IFTRUE 28879
28877: GO 28929
28879: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28880: LD_ADDR_VAR 0 3
28884: PUSH
28885: LD_INT 13
28887: PUSH
28888: LD_INT 14
28890: PUSH
28891: LD_INT 2
28893: PUSH
28894: LD_INT 3
28896: PUSH
28897: LD_INT 4
28899: PUSH
28900: LD_INT 5
28902: PUSH
28903: LD_INT 21
28905: PUSH
28906: LD_INT 22
28908: PUSH
28909: LD_INT 23
28911: PUSH
28912: LD_INT 24
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: ST_TO_ADDR
28927: GO 28930
28929: POP
// result := ( chassis in result ) ;
28930: LD_ADDR_VAR 0 3
28934: PUSH
28935: LD_VAR 0 1
28939: PUSH
28940: LD_VAR 0 3
28944: IN
28945: ST_TO_ADDR
// end ;
28946: LD_VAR 0 3
28950: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28951: LD_INT 0
28953: PPUSH
// if not chassis or not weapon then
28954: LD_VAR 0 1
28958: NOT
28959: PUSH
28960: LD_VAR 0 2
28964: NOT
28965: OR
28966: IFFALSE 28970
// exit ;
28968: GO 30032
// case weapon of us_machine_gun :
28970: LD_VAR 0 2
28974: PUSH
28975: LD_INT 2
28977: DOUBLE
28978: EQUAL
28979: IFTRUE 28983
28981: GO 29013
28983: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28984: LD_ADDR_VAR 0 3
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: LD_INT 3
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: LD_INT 5
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: ST_TO_ADDR
29011: GO 30016
29013: LD_INT 3
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29051
29021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: LD_INT 3
29035: PUSH
29036: LD_INT 4
29038: PUSH
29039: LD_INT 5
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: ST_TO_ADDR
29049: GO 30016
29051: LD_INT 11
29053: DOUBLE
29054: EQUAL
29055: IFTRUE 29059
29057: GO 29089
29059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29060: LD_ADDR_VAR 0 3
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: LD_INT 4
29076: PUSH
29077: LD_INT 5
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
29087: GO 30016
29089: LD_INT 4
29091: DOUBLE
29092: EQUAL
29093: IFTRUE 29097
29095: GO 29123
29097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29098: LD_ADDR_VAR 0 3
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 3
29108: PUSH
29109: LD_INT 4
29111: PUSH
29112: LD_INT 5
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: ST_TO_ADDR
29121: GO 30016
29123: LD_INT 5
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29157
29131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29132: LD_ADDR_VAR 0 3
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: LD_INT 3
29142: PUSH
29143: LD_INT 4
29145: PUSH
29146: LD_INT 5
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
29155: GO 30016
29157: LD_INT 9
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 29191
29165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29166: LD_ADDR_VAR 0 3
29170: PUSH
29171: LD_INT 2
29173: PUSH
29174: LD_INT 3
29176: PUSH
29177: LD_INT 4
29179: PUSH
29180: LD_INT 5
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: ST_TO_ADDR
29189: GO 30016
29191: LD_INT 7
29193: DOUBLE
29194: EQUAL
29195: IFTRUE 29199
29197: GO 29225
29199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29200: LD_ADDR_VAR 0 3
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: LD_INT 4
29213: PUSH
29214: LD_INT 5
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
29223: GO 30016
29225: LD_INT 12
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29259
29233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29234: LD_ADDR_VAR 0 3
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: LD_INT 3
29244: PUSH
29245: LD_INT 4
29247: PUSH
29248: LD_INT 5
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
29257: GO 30016
29259: LD_INT 13
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29293
29267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: LD_INT 4
29281: PUSH
29282: LD_INT 5
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 30016
29293: LD_INT 14
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29319
29301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 4
29309: PUSH
29310: LD_INT 5
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: ST_TO_ADDR
29317: GO 30016
29319: LD_INT 6
29321: DOUBLE
29322: EQUAL
29323: IFTRUE 29327
29325: GO 29345
29327: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29328: LD_ADDR_VAR 0 3
29332: PUSH
29333: LD_INT 4
29335: PUSH
29336: LD_INT 5
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: ST_TO_ADDR
29343: GO 30016
29345: LD_INT 10
29347: DOUBLE
29348: EQUAL
29349: IFTRUE 29353
29351: GO 29371
29353: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29354: LD_ADDR_VAR 0 3
29358: PUSH
29359: LD_INT 4
29361: PUSH
29362: LD_INT 5
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: ST_TO_ADDR
29369: GO 30016
29371: LD_INT 22
29373: DOUBLE
29374: EQUAL
29375: IFTRUE 29379
29377: GO 29405
29379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_INT 11
29387: PUSH
29388: LD_INT 12
29390: PUSH
29391: LD_INT 13
29393: PUSH
29394: LD_INT 14
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: ST_TO_ADDR
29403: GO 30016
29405: LD_INT 23
29407: DOUBLE
29408: EQUAL
29409: IFTRUE 29413
29411: GO 29439
29413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29414: LD_ADDR_VAR 0 3
29418: PUSH
29419: LD_INT 11
29421: PUSH
29422: LD_INT 12
29424: PUSH
29425: LD_INT 13
29427: PUSH
29428: LD_INT 14
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: ST_TO_ADDR
29437: GO 30016
29439: LD_INT 24
29441: DOUBLE
29442: EQUAL
29443: IFTRUE 29447
29445: GO 29473
29447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29448: LD_ADDR_VAR 0 3
29452: PUSH
29453: LD_INT 11
29455: PUSH
29456: LD_INT 12
29458: PUSH
29459: LD_INT 13
29461: PUSH
29462: LD_INT 14
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
29471: GO 30016
29473: LD_INT 30
29475: DOUBLE
29476: EQUAL
29477: IFTRUE 29481
29479: GO 29507
29481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29482: LD_ADDR_VAR 0 3
29486: PUSH
29487: LD_INT 11
29489: PUSH
29490: LD_INT 12
29492: PUSH
29493: LD_INT 13
29495: PUSH
29496: LD_INT 14
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
29505: GO 30016
29507: LD_INT 25
29509: DOUBLE
29510: EQUAL
29511: IFTRUE 29515
29513: GO 29533
29515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29516: LD_ADDR_VAR 0 3
29520: PUSH
29521: LD_INT 13
29523: PUSH
29524: LD_INT 14
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: ST_TO_ADDR
29531: GO 30016
29533: LD_INT 27
29535: DOUBLE
29536: EQUAL
29537: IFTRUE 29541
29539: GO 29559
29541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29542: LD_ADDR_VAR 0 3
29546: PUSH
29547: LD_INT 13
29549: PUSH
29550: LD_INT 14
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: ST_TO_ADDR
29557: GO 30016
29559: LD_EXP 101
29563: DOUBLE
29564: EQUAL
29565: IFTRUE 29569
29567: GO 29595
29569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29570: LD_ADDR_VAR 0 3
29574: PUSH
29575: LD_INT 11
29577: PUSH
29578: LD_INT 12
29580: PUSH
29581: LD_INT 13
29583: PUSH
29584: LD_INT 14
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
29593: GO 30016
29595: LD_INT 28
29597: DOUBLE
29598: EQUAL
29599: IFTRUE 29603
29601: GO 29621
29603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29604: LD_ADDR_VAR 0 3
29608: PUSH
29609: LD_INT 13
29611: PUSH
29612: LD_INT 14
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: ST_TO_ADDR
29619: GO 30016
29621: LD_INT 29
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29647
29629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29630: LD_ADDR_VAR 0 3
29634: PUSH
29635: LD_INT 13
29637: PUSH
29638: LD_INT 14
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: ST_TO_ADDR
29645: GO 30016
29647: LD_INT 31
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 29673
29655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29656: LD_ADDR_VAR 0 3
29660: PUSH
29661: LD_INT 13
29663: PUSH
29664: LD_INT 14
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: ST_TO_ADDR
29671: GO 30016
29673: LD_INT 26
29675: DOUBLE
29676: EQUAL
29677: IFTRUE 29681
29679: GO 29699
29681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29682: LD_ADDR_VAR 0 3
29686: PUSH
29687: LD_INT 13
29689: PUSH
29690: LD_INT 14
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: ST_TO_ADDR
29697: GO 30016
29699: LD_INT 42
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29707
29705: GO 29733
29707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: LD_INT 21
29715: PUSH
29716: LD_INT 22
29718: PUSH
29719: LD_INT 23
29721: PUSH
29722: LD_INT 24
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: ST_TO_ADDR
29731: GO 30016
29733: LD_INT 43
29735: DOUBLE
29736: EQUAL
29737: IFTRUE 29741
29739: GO 29767
29741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29742: LD_ADDR_VAR 0 3
29746: PUSH
29747: LD_INT 21
29749: PUSH
29750: LD_INT 22
29752: PUSH
29753: LD_INT 23
29755: PUSH
29756: LD_INT 24
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
29765: GO 30016
29767: LD_INT 44
29769: DOUBLE
29770: EQUAL
29771: IFTRUE 29775
29773: GO 29801
29775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29776: LD_ADDR_VAR 0 3
29780: PUSH
29781: LD_INT 21
29783: PUSH
29784: LD_INT 22
29786: PUSH
29787: LD_INT 23
29789: PUSH
29790: LD_INT 24
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
29799: GO 30016
29801: LD_INT 45
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29835
29809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: LD_INT 21
29817: PUSH
29818: LD_INT 22
29820: PUSH
29821: LD_INT 23
29823: PUSH
29824: LD_INT 24
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
29833: GO 30016
29835: LD_INT 49
29837: DOUBLE
29838: EQUAL
29839: IFTRUE 29843
29841: GO 29869
29843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29844: LD_ADDR_VAR 0 3
29848: PUSH
29849: LD_INT 21
29851: PUSH
29852: LD_INT 22
29854: PUSH
29855: LD_INT 23
29857: PUSH
29858: LD_INT 24
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
29867: GO 30016
29869: LD_INT 51
29871: DOUBLE
29872: EQUAL
29873: IFTRUE 29877
29875: GO 29903
29877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: LD_INT 21
29885: PUSH
29886: LD_INT 22
29888: PUSH
29889: LD_INT 23
29891: PUSH
29892: LD_INT 24
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
29901: GO 30016
29903: LD_INT 52
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29937
29911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: LD_INT 21
29919: PUSH
29920: LD_INT 22
29922: PUSH
29923: LD_INT 23
29925: PUSH
29926: LD_INT 24
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: ST_TO_ADDR
29935: GO 30016
29937: LD_INT 53
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29963
29945: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29946: LD_ADDR_VAR 0 3
29950: PUSH
29951: LD_INT 23
29953: PUSH
29954: LD_INT 24
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: ST_TO_ADDR
29961: GO 30016
29963: LD_INT 46
29965: DOUBLE
29966: EQUAL
29967: IFTRUE 29971
29969: GO 29989
29971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29972: LD_ADDR_VAR 0 3
29976: PUSH
29977: LD_INT 23
29979: PUSH
29980: LD_INT 24
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: ST_TO_ADDR
29987: GO 30016
29989: LD_INT 47
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 30015
29997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29998: LD_ADDR_VAR 0 3
30002: PUSH
30003: LD_INT 23
30005: PUSH
30006: LD_INT 24
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: ST_TO_ADDR
30013: GO 30016
30015: POP
// result := ( chassis in result ) ;
30016: LD_ADDR_VAR 0 3
30020: PUSH
30021: LD_VAR 0 1
30025: PUSH
30026: LD_VAR 0 3
30030: IN
30031: ST_TO_ADDR
// end ;
30032: LD_VAR 0 3
30036: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30037: LD_INT 0
30039: PPUSH
30040: PPUSH
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
30045: PPUSH
// result := array ;
30046: LD_ADDR_VAR 0 5
30050: PUSH
30051: LD_VAR 0 1
30055: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30056: LD_VAR 0 1
30060: NOT
30061: PUSH
30062: LD_VAR 0 2
30066: NOT
30067: OR
30068: PUSH
30069: LD_VAR 0 3
30073: NOT
30074: OR
30075: PUSH
30076: LD_VAR 0 2
30080: PUSH
30081: LD_VAR 0 1
30085: GREATER
30086: OR
30087: PUSH
30088: LD_VAR 0 3
30092: PUSH
30093: LD_VAR 0 1
30097: GREATER
30098: OR
30099: IFFALSE 30103
// exit ;
30101: GO 30399
// if direction then
30103: LD_VAR 0 4
30107: IFFALSE 30171
// begin d := 1 ;
30109: LD_ADDR_VAR 0 9
30113: PUSH
30114: LD_INT 1
30116: ST_TO_ADDR
// if i_from > i_to then
30117: LD_VAR 0 2
30121: PUSH
30122: LD_VAR 0 3
30126: GREATER
30127: IFFALSE 30153
// length := ( array - i_from ) + i_to else
30129: LD_ADDR_VAR 0 11
30133: PUSH
30134: LD_VAR 0 1
30138: PUSH
30139: LD_VAR 0 2
30143: MINUS
30144: PUSH
30145: LD_VAR 0 3
30149: PLUS
30150: ST_TO_ADDR
30151: GO 30169
// length := i_to - i_from ;
30153: LD_ADDR_VAR 0 11
30157: PUSH
30158: LD_VAR 0 3
30162: PUSH
30163: LD_VAR 0 2
30167: MINUS
30168: ST_TO_ADDR
// end else
30169: GO 30232
// begin d := - 1 ;
30171: LD_ADDR_VAR 0 9
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: ST_TO_ADDR
// if i_from > i_to then
30180: LD_VAR 0 2
30184: PUSH
30185: LD_VAR 0 3
30189: GREATER
30190: IFFALSE 30210
// length := i_from - i_to else
30192: LD_ADDR_VAR 0 11
30196: PUSH
30197: LD_VAR 0 2
30201: PUSH
30202: LD_VAR 0 3
30206: MINUS
30207: ST_TO_ADDR
30208: GO 30232
// length := ( array - i_to ) + i_from ;
30210: LD_ADDR_VAR 0 11
30214: PUSH
30215: LD_VAR 0 1
30219: PUSH
30220: LD_VAR 0 3
30224: MINUS
30225: PUSH
30226: LD_VAR 0 2
30230: PLUS
30231: ST_TO_ADDR
// end ; if not length then
30232: LD_VAR 0 11
30236: NOT
30237: IFFALSE 30241
// exit ;
30239: GO 30399
// tmp := array ;
30241: LD_ADDR_VAR 0 10
30245: PUSH
30246: LD_VAR 0 1
30250: ST_TO_ADDR
// for i = 1 to length do
30251: LD_ADDR_VAR 0 6
30255: PUSH
30256: DOUBLE
30257: LD_INT 1
30259: DEC
30260: ST_TO_ADDR
30261: LD_VAR 0 11
30265: PUSH
30266: FOR_TO
30267: IFFALSE 30387
// begin for j = 1 to array do
30269: LD_ADDR_VAR 0 7
30273: PUSH
30274: DOUBLE
30275: LD_INT 1
30277: DEC
30278: ST_TO_ADDR
30279: LD_VAR 0 1
30283: PUSH
30284: FOR_TO
30285: IFFALSE 30373
// begin k := j + d ;
30287: LD_ADDR_VAR 0 8
30291: PUSH
30292: LD_VAR 0 7
30296: PUSH
30297: LD_VAR 0 9
30301: PLUS
30302: ST_TO_ADDR
// if k > array then
30303: LD_VAR 0 8
30307: PUSH
30308: LD_VAR 0 1
30312: GREATER
30313: IFFALSE 30323
// k := 1 ;
30315: LD_ADDR_VAR 0 8
30319: PUSH
30320: LD_INT 1
30322: ST_TO_ADDR
// if not k then
30323: LD_VAR 0 8
30327: NOT
30328: IFFALSE 30340
// k := array ;
30330: LD_ADDR_VAR 0 8
30334: PUSH
30335: LD_VAR 0 1
30339: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30340: LD_ADDR_VAR 0 10
30344: PUSH
30345: LD_VAR 0 10
30349: PPUSH
30350: LD_VAR 0 8
30354: PPUSH
30355: LD_VAR 0 1
30359: PUSH
30360: LD_VAR 0 7
30364: ARRAY
30365: PPUSH
30366: CALL_OW 1
30370: ST_TO_ADDR
// end ;
30371: GO 30284
30373: POP
30374: POP
// array := tmp ;
30375: LD_ADDR_VAR 0 1
30379: PUSH
30380: LD_VAR 0 10
30384: ST_TO_ADDR
// end ;
30385: GO 30266
30387: POP
30388: POP
// result := array ;
30389: LD_ADDR_VAR 0 5
30393: PUSH
30394: LD_VAR 0 1
30398: ST_TO_ADDR
// end ;
30399: LD_VAR 0 5
30403: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
// result := 0 ;
30408: LD_ADDR_VAR 0 3
30412: PUSH
30413: LD_INT 0
30415: ST_TO_ADDR
// if not array or not value in array then
30416: LD_VAR 0 1
30420: NOT
30421: PUSH
30422: LD_VAR 0 2
30426: PUSH
30427: LD_VAR 0 1
30431: IN
30432: NOT
30433: OR
30434: IFFALSE 30438
// exit ;
30436: GO 30492
// for i = 1 to array do
30438: LD_ADDR_VAR 0 4
30442: PUSH
30443: DOUBLE
30444: LD_INT 1
30446: DEC
30447: ST_TO_ADDR
30448: LD_VAR 0 1
30452: PUSH
30453: FOR_TO
30454: IFFALSE 30490
// if value = array [ i ] then
30456: LD_VAR 0 2
30460: PUSH
30461: LD_VAR 0 1
30465: PUSH
30466: LD_VAR 0 4
30470: ARRAY
30471: EQUAL
30472: IFFALSE 30488
// begin result := i ;
30474: LD_ADDR_VAR 0 3
30478: PUSH
30479: LD_VAR 0 4
30483: ST_TO_ADDR
// exit ;
30484: POP
30485: POP
30486: GO 30492
// end ;
30488: GO 30453
30490: POP
30491: POP
// end ;
30492: LD_VAR 0 3
30496: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30497: LD_INT 0
30499: PPUSH
// vc_chassis := chassis ;
30500: LD_ADDR_OWVAR 37
30504: PUSH
30505: LD_VAR 0 1
30509: ST_TO_ADDR
// vc_engine := engine ;
30510: LD_ADDR_OWVAR 39
30514: PUSH
30515: LD_VAR 0 2
30519: ST_TO_ADDR
// vc_control := control ;
30520: LD_ADDR_OWVAR 38
30524: PUSH
30525: LD_VAR 0 3
30529: ST_TO_ADDR
// vc_weapon := weapon ;
30530: LD_ADDR_OWVAR 40
30534: PUSH
30535: LD_VAR 0 4
30539: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30540: LD_ADDR_OWVAR 41
30544: PUSH
30545: LD_VAR 0 5
30549: ST_TO_ADDR
// end ;
30550: LD_VAR 0 6
30554: RET
// export function WantPlant ( unit ) ; var task ; begin
30555: LD_INT 0
30557: PPUSH
30558: PPUSH
// result := false ;
30559: LD_ADDR_VAR 0 2
30563: PUSH
30564: LD_INT 0
30566: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_VAR 0 1
30576: PPUSH
30577: CALL_OW 437
30581: ST_TO_ADDR
// if task then
30582: LD_VAR 0 3
30586: IFFALSE 30614
// if task [ 1 ] [ 1 ] = p then
30588: LD_VAR 0 3
30592: PUSH
30593: LD_INT 1
30595: ARRAY
30596: PUSH
30597: LD_INT 1
30599: ARRAY
30600: PUSH
30601: LD_STRING p
30603: EQUAL
30604: IFFALSE 30614
// result := true ;
30606: LD_ADDR_VAR 0 2
30610: PUSH
30611: LD_INT 1
30613: ST_TO_ADDR
// end ;
30614: LD_VAR 0 2
30618: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30619: LD_INT 0
30621: PPUSH
30622: PPUSH
30623: PPUSH
30624: PPUSH
// if pos < 1 then
30625: LD_VAR 0 2
30629: PUSH
30630: LD_INT 1
30632: LESS
30633: IFFALSE 30637
// exit ;
30635: GO 30940
// if pos = 1 then
30637: LD_VAR 0 2
30641: PUSH
30642: LD_INT 1
30644: EQUAL
30645: IFFALSE 30678
// result := Replace ( arr , pos [ 1 ] , value ) else
30647: LD_ADDR_VAR 0 4
30651: PUSH
30652: LD_VAR 0 1
30656: PPUSH
30657: LD_VAR 0 2
30661: PUSH
30662: LD_INT 1
30664: ARRAY
30665: PPUSH
30666: LD_VAR 0 3
30670: PPUSH
30671: CALL_OW 1
30675: ST_TO_ADDR
30676: GO 30940
// begin tmp := arr ;
30678: LD_ADDR_VAR 0 6
30682: PUSH
30683: LD_VAR 0 1
30687: ST_TO_ADDR
// s_arr := [ tmp ] ;
30688: LD_ADDR_VAR 0 7
30692: PUSH
30693: LD_VAR 0 6
30697: PUSH
30698: EMPTY
30699: LIST
30700: ST_TO_ADDR
// for i = 1 to pos - 1 do
30701: LD_ADDR_VAR 0 5
30705: PUSH
30706: DOUBLE
30707: LD_INT 1
30709: DEC
30710: ST_TO_ADDR
30711: LD_VAR 0 2
30715: PUSH
30716: LD_INT 1
30718: MINUS
30719: PUSH
30720: FOR_TO
30721: IFFALSE 30766
// begin tmp := tmp [ pos [ i ] ] ;
30723: LD_ADDR_VAR 0 6
30727: PUSH
30728: LD_VAR 0 6
30732: PUSH
30733: LD_VAR 0 2
30737: PUSH
30738: LD_VAR 0 5
30742: ARRAY
30743: ARRAY
30744: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30745: LD_ADDR_VAR 0 7
30749: PUSH
30750: LD_VAR 0 7
30754: PUSH
30755: LD_VAR 0 6
30759: PUSH
30760: EMPTY
30761: LIST
30762: ADD
30763: ST_TO_ADDR
// end ;
30764: GO 30720
30766: POP
30767: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30768: LD_ADDR_VAR 0 6
30772: PUSH
30773: LD_VAR 0 6
30777: PPUSH
30778: LD_VAR 0 2
30782: PUSH
30783: LD_VAR 0 2
30787: ARRAY
30788: PPUSH
30789: LD_VAR 0 3
30793: PPUSH
30794: CALL_OW 1
30798: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30799: LD_ADDR_VAR 0 7
30803: PUSH
30804: LD_VAR 0 7
30808: PPUSH
30809: LD_VAR 0 7
30813: PPUSH
30814: LD_VAR 0 6
30818: PPUSH
30819: CALL_OW 1
30823: ST_TO_ADDR
// for i = s_arr downto 2 do
30824: LD_ADDR_VAR 0 5
30828: PUSH
30829: DOUBLE
30830: LD_VAR 0 7
30834: INC
30835: ST_TO_ADDR
30836: LD_INT 2
30838: PUSH
30839: FOR_DOWNTO
30840: IFFALSE 30924
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30842: LD_ADDR_VAR 0 6
30846: PUSH
30847: LD_VAR 0 7
30851: PUSH
30852: LD_VAR 0 5
30856: PUSH
30857: LD_INT 1
30859: MINUS
30860: ARRAY
30861: PPUSH
30862: LD_VAR 0 2
30866: PUSH
30867: LD_VAR 0 5
30871: PUSH
30872: LD_INT 1
30874: MINUS
30875: ARRAY
30876: PPUSH
30877: LD_VAR 0 7
30881: PUSH
30882: LD_VAR 0 5
30886: ARRAY
30887: PPUSH
30888: CALL_OW 1
30892: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30893: LD_ADDR_VAR 0 7
30897: PUSH
30898: LD_VAR 0 7
30902: PPUSH
30903: LD_VAR 0 5
30907: PUSH
30908: LD_INT 1
30910: MINUS
30911: PPUSH
30912: LD_VAR 0 6
30916: PPUSH
30917: CALL_OW 1
30921: ST_TO_ADDR
// end ;
30922: GO 30839
30924: POP
30925: POP
// result := s_arr [ 1 ] ;
30926: LD_ADDR_VAR 0 4
30930: PUSH
30931: LD_VAR 0 7
30935: PUSH
30936: LD_INT 1
30938: ARRAY
30939: ST_TO_ADDR
// end ; end ;
30940: LD_VAR 0 4
30944: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30945: LD_INT 0
30947: PPUSH
30948: PPUSH
// if not list then
30949: LD_VAR 0 1
30953: NOT
30954: IFFALSE 30958
// exit ;
30956: GO 31049
// i := list [ pos1 ] ;
30958: LD_ADDR_VAR 0 5
30962: PUSH
30963: LD_VAR 0 1
30967: PUSH
30968: LD_VAR 0 2
30972: ARRAY
30973: ST_TO_ADDR
// if not i then
30974: LD_VAR 0 5
30978: NOT
30979: IFFALSE 30983
// exit ;
30981: GO 31049
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30983: LD_ADDR_VAR 0 1
30987: PUSH
30988: LD_VAR 0 1
30992: PPUSH
30993: LD_VAR 0 2
30997: PPUSH
30998: LD_VAR 0 1
31002: PUSH
31003: LD_VAR 0 3
31007: ARRAY
31008: PPUSH
31009: CALL_OW 1
31013: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31014: LD_ADDR_VAR 0 1
31018: PUSH
31019: LD_VAR 0 1
31023: PPUSH
31024: LD_VAR 0 3
31028: PPUSH
31029: LD_VAR 0 5
31033: PPUSH
31034: CALL_OW 1
31038: ST_TO_ADDR
// result := list ;
31039: LD_ADDR_VAR 0 4
31043: PUSH
31044: LD_VAR 0 1
31048: ST_TO_ADDR
// end ;
31049: LD_VAR 0 4
31053: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31054: LD_INT 0
31056: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31057: LD_ADDR_VAR 0 5
31061: PUSH
31062: LD_VAR 0 1
31066: PPUSH
31067: CALL_OW 250
31071: PPUSH
31072: LD_VAR 0 1
31076: PPUSH
31077: CALL_OW 251
31081: PPUSH
31082: LD_VAR 0 2
31086: PPUSH
31087: LD_VAR 0 3
31091: PPUSH
31092: LD_VAR 0 4
31096: PPUSH
31097: CALL 31107 0 5
31101: ST_TO_ADDR
// end ;
31102: LD_VAR 0 5
31106: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31107: LD_INT 0
31109: PPUSH
31110: PPUSH
31111: PPUSH
31112: PPUSH
// if not list then
31113: LD_VAR 0 3
31117: NOT
31118: IFFALSE 31122
// exit ;
31120: GO 31510
// result := [ ] ;
31122: LD_ADDR_VAR 0 6
31126: PUSH
31127: EMPTY
31128: ST_TO_ADDR
// for i in list do
31129: LD_ADDR_VAR 0 7
31133: PUSH
31134: LD_VAR 0 3
31138: PUSH
31139: FOR_IN
31140: IFFALSE 31342
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31142: LD_ADDR_VAR 0 9
31146: PUSH
31147: LD_VAR 0 7
31151: PPUSH
31152: LD_VAR 0 1
31156: PPUSH
31157: LD_VAR 0 2
31161: PPUSH
31162: CALL_OW 297
31166: ST_TO_ADDR
// if not result then
31167: LD_VAR 0 6
31171: NOT
31172: IFFALSE 31198
// result := [ [ i , tmp ] ] else
31174: LD_ADDR_VAR 0 6
31178: PUSH
31179: LD_VAR 0 7
31183: PUSH
31184: LD_VAR 0 9
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: EMPTY
31194: LIST
31195: ST_TO_ADDR
31196: GO 31340
// begin if result [ result ] [ 2 ] < tmp then
31198: LD_VAR 0 6
31202: PUSH
31203: LD_VAR 0 6
31207: ARRAY
31208: PUSH
31209: LD_INT 2
31211: ARRAY
31212: PUSH
31213: LD_VAR 0 9
31217: LESS
31218: IFFALSE 31260
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31220: LD_ADDR_VAR 0 6
31224: PUSH
31225: LD_VAR 0 6
31229: PPUSH
31230: LD_VAR 0 6
31234: PUSH
31235: LD_INT 1
31237: PLUS
31238: PPUSH
31239: LD_VAR 0 7
31243: PUSH
31244: LD_VAR 0 9
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PPUSH
31253: CALL_OW 2
31257: ST_TO_ADDR
31258: GO 31340
// for j = 1 to result do
31260: LD_ADDR_VAR 0 8
31264: PUSH
31265: DOUBLE
31266: LD_INT 1
31268: DEC
31269: ST_TO_ADDR
31270: LD_VAR 0 6
31274: PUSH
31275: FOR_TO
31276: IFFALSE 31338
// begin if tmp < result [ j ] [ 2 ] then
31278: LD_VAR 0 9
31282: PUSH
31283: LD_VAR 0 6
31287: PUSH
31288: LD_VAR 0 8
31292: ARRAY
31293: PUSH
31294: LD_INT 2
31296: ARRAY
31297: LESS
31298: IFFALSE 31336
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31300: LD_ADDR_VAR 0 6
31304: PUSH
31305: LD_VAR 0 6
31309: PPUSH
31310: LD_VAR 0 8
31314: PPUSH
31315: LD_VAR 0 7
31319: PUSH
31320: LD_VAR 0 9
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PPUSH
31329: CALL_OW 2
31333: ST_TO_ADDR
// break ;
31334: GO 31338
// end ; end ;
31336: GO 31275
31338: POP
31339: POP
// end ; end ;
31340: GO 31139
31342: POP
31343: POP
// if result and not asc then
31344: LD_VAR 0 6
31348: PUSH
31349: LD_VAR 0 4
31353: NOT
31354: AND
31355: IFFALSE 31430
// begin tmp := result ;
31357: LD_ADDR_VAR 0 9
31361: PUSH
31362: LD_VAR 0 6
31366: ST_TO_ADDR
// for i = tmp downto 1 do
31367: LD_ADDR_VAR 0 7
31371: PUSH
31372: DOUBLE
31373: LD_VAR 0 9
31377: INC
31378: ST_TO_ADDR
31379: LD_INT 1
31381: PUSH
31382: FOR_DOWNTO
31383: IFFALSE 31428
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31385: LD_ADDR_VAR 0 6
31389: PUSH
31390: LD_VAR 0 6
31394: PPUSH
31395: LD_VAR 0 9
31399: PUSH
31400: LD_VAR 0 7
31404: MINUS
31405: PUSH
31406: LD_INT 1
31408: PLUS
31409: PPUSH
31410: LD_VAR 0 9
31414: PUSH
31415: LD_VAR 0 7
31419: ARRAY
31420: PPUSH
31421: CALL_OW 1
31425: ST_TO_ADDR
31426: GO 31382
31428: POP
31429: POP
// end ; tmp := [ ] ;
31430: LD_ADDR_VAR 0 9
31434: PUSH
31435: EMPTY
31436: ST_TO_ADDR
// if mode then
31437: LD_VAR 0 5
31441: IFFALSE 31510
// begin for i = 1 to result do
31443: LD_ADDR_VAR 0 7
31447: PUSH
31448: DOUBLE
31449: LD_INT 1
31451: DEC
31452: ST_TO_ADDR
31453: LD_VAR 0 6
31457: PUSH
31458: FOR_TO
31459: IFFALSE 31498
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31461: LD_ADDR_VAR 0 9
31465: PUSH
31466: LD_VAR 0 9
31470: PPUSH
31471: LD_VAR 0 7
31475: PPUSH
31476: LD_VAR 0 6
31480: PUSH
31481: LD_VAR 0 7
31485: ARRAY
31486: PUSH
31487: LD_INT 1
31489: ARRAY
31490: PPUSH
31491: CALL_OW 1
31495: ST_TO_ADDR
31496: GO 31458
31498: POP
31499: POP
// result := tmp ;
31500: LD_ADDR_VAR 0 6
31504: PUSH
31505: LD_VAR 0 9
31509: ST_TO_ADDR
// end ; end ;
31510: LD_VAR 0 6
31514: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31515: LD_INT 0
31517: PPUSH
31518: PPUSH
31519: PPUSH
31520: PPUSH
31521: PPUSH
31522: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31523: LD_ADDR_VAR 0 5
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: EMPTY
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: ST_TO_ADDR
// if not x or not y then
31545: LD_VAR 0 2
31549: NOT
31550: PUSH
31551: LD_VAR 0 3
31555: NOT
31556: OR
31557: IFFALSE 31561
// exit ;
31559: GO 33213
// if not range then
31561: LD_VAR 0 4
31565: NOT
31566: IFFALSE 31576
// range := 10 ;
31568: LD_ADDR_VAR 0 4
31572: PUSH
31573: LD_INT 10
31575: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31576: LD_ADDR_VAR 0 8
31580: PUSH
31581: LD_INT 81
31583: PUSH
31584: LD_VAR 0 1
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 92
31595: PUSH
31596: LD_VAR 0 2
31600: PUSH
31601: LD_VAR 0 3
31605: PUSH
31606: LD_VAR 0 4
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 3
31619: PUSH
31620: LD_INT 21
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: LIST
31638: PPUSH
31639: CALL_OW 69
31643: ST_TO_ADDR
// if not tmp then
31644: LD_VAR 0 8
31648: NOT
31649: IFFALSE 31653
// exit ;
31651: GO 33213
// for i in tmp do
31653: LD_ADDR_VAR 0 6
31657: PUSH
31658: LD_VAR 0 8
31662: PUSH
31663: FOR_IN
31664: IFFALSE 33188
// begin points := [ 0 , 0 , 0 ] ;
31666: LD_ADDR_VAR 0 9
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// bpoints := 1 ;
31685: LD_ADDR_VAR 0 10
31689: PUSH
31690: LD_INT 1
31692: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31693: LD_VAR 0 6
31697: PPUSH
31698: CALL_OW 247
31702: PUSH
31703: LD_INT 1
31705: DOUBLE
31706: EQUAL
31707: IFTRUE 31711
31709: GO 32289
31711: POP
// begin if GetClass ( i ) = 1 then
31712: LD_VAR 0 6
31716: PPUSH
31717: CALL_OW 257
31721: PUSH
31722: LD_INT 1
31724: EQUAL
31725: IFFALSE 31746
// points := [ 10 , 5 , 3 ] ;
31727: LD_ADDR_VAR 0 9
31731: PUSH
31732: LD_INT 10
31734: PUSH
31735: LD_INT 5
31737: PUSH
31738: LD_INT 3
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31746: LD_VAR 0 6
31750: PPUSH
31751: CALL_OW 257
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: LD_INT 3
31761: PUSH
31762: LD_INT 4
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: IN
31770: IFFALSE 31791
// points := [ 3 , 2 , 1 ] ;
31772: LD_ADDR_VAR 0 9
31776: PUSH
31777: LD_INT 3
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31791: LD_VAR 0 6
31795: PPUSH
31796: CALL_OW 257
31800: PUSH
31801: LD_INT 5
31803: EQUAL
31804: IFFALSE 31825
// points := [ 130 , 5 , 2 ] ;
31806: LD_ADDR_VAR 0 9
31810: PUSH
31811: LD_INT 130
31813: PUSH
31814: LD_INT 5
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31825: LD_VAR 0 6
31829: PPUSH
31830: CALL_OW 257
31834: PUSH
31835: LD_INT 8
31837: EQUAL
31838: IFFALSE 31859
// points := [ 35 , 35 , 30 ] ;
31840: LD_ADDR_VAR 0 9
31844: PUSH
31845: LD_INT 35
31847: PUSH
31848: LD_INT 35
31850: PUSH
31851: LD_INT 30
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31859: LD_VAR 0 6
31863: PPUSH
31864: CALL_OW 257
31868: PUSH
31869: LD_INT 9
31871: EQUAL
31872: IFFALSE 31893
// points := [ 20 , 55 , 40 ] ;
31874: LD_ADDR_VAR 0 9
31878: PUSH
31879: LD_INT 20
31881: PUSH
31882: LD_INT 55
31884: PUSH
31885: LD_INT 40
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31893: LD_VAR 0 6
31897: PPUSH
31898: CALL_OW 257
31902: PUSH
31903: LD_INT 12
31905: PUSH
31906: LD_INT 16
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: IN
31913: IFFALSE 31934
// points := [ 5 , 3 , 2 ] ;
31915: LD_ADDR_VAR 0 9
31919: PUSH
31920: LD_INT 5
31922: PUSH
31923: LD_INT 3
31925: PUSH
31926: LD_INT 2
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31934: LD_VAR 0 6
31938: PPUSH
31939: CALL_OW 257
31943: PUSH
31944: LD_INT 17
31946: EQUAL
31947: IFFALSE 31968
// points := [ 100 , 50 , 75 ] ;
31949: LD_ADDR_VAR 0 9
31953: PUSH
31954: LD_INT 100
31956: PUSH
31957: LD_INT 50
31959: PUSH
31960: LD_INT 75
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31968: LD_VAR 0 6
31972: PPUSH
31973: CALL_OW 257
31977: PUSH
31978: LD_INT 15
31980: EQUAL
31981: IFFALSE 32002
// points := [ 10 , 5 , 3 ] ;
31983: LD_ADDR_VAR 0 9
31987: PUSH
31988: LD_INT 10
31990: PUSH
31991: LD_INT 5
31993: PUSH
31994: LD_INT 3
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32002: LD_VAR 0 6
32006: PPUSH
32007: CALL_OW 257
32011: PUSH
32012: LD_INT 14
32014: EQUAL
32015: IFFALSE 32036
// points := [ 10 , 0 , 0 ] ;
32017: LD_ADDR_VAR 0 9
32021: PUSH
32022: LD_INT 10
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32036: LD_VAR 0 6
32040: PPUSH
32041: CALL_OW 257
32045: PUSH
32046: LD_INT 11
32048: EQUAL
32049: IFFALSE 32070
// points := [ 30 , 10 , 5 ] ;
32051: LD_ADDR_VAR 0 9
32055: PUSH
32056: LD_INT 30
32058: PUSH
32059: LD_INT 10
32061: PUSH
32062: LD_INT 5
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32070: LD_VAR 0 1
32074: PPUSH
32075: LD_INT 5
32077: PPUSH
32078: CALL_OW 321
32082: PUSH
32083: LD_INT 2
32085: EQUAL
32086: IFFALSE 32103
// bpoints := bpoints * 1.8 ;
32088: LD_ADDR_VAR 0 10
32092: PUSH
32093: LD_VAR 0 10
32097: PUSH
32098: LD_REAL  1.80000000000000E+0000
32101: MUL
32102: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32103: LD_VAR 0 6
32107: PPUSH
32108: CALL_OW 257
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: LD_INT 4
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: IN
32131: PUSH
32132: LD_VAR 0 1
32136: PPUSH
32137: LD_INT 51
32139: PPUSH
32140: CALL_OW 321
32144: PUSH
32145: LD_INT 2
32147: EQUAL
32148: AND
32149: IFFALSE 32166
// bpoints := bpoints * 1.2 ;
32151: LD_ADDR_VAR 0 10
32155: PUSH
32156: LD_VAR 0 10
32160: PUSH
32161: LD_REAL  1.20000000000000E+0000
32164: MUL
32165: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32166: LD_VAR 0 6
32170: PPUSH
32171: CALL_OW 257
32175: PUSH
32176: LD_INT 5
32178: PUSH
32179: LD_INT 7
32181: PUSH
32182: LD_INT 9
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: IN
32190: PUSH
32191: LD_VAR 0 1
32195: PPUSH
32196: LD_INT 52
32198: PPUSH
32199: CALL_OW 321
32203: PUSH
32204: LD_INT 2
32206: EQUAL
32207: AND
32208: IFFALSE 32225
// bpoints := bpoints * 1.5 ;
32210: LD_ADDR_VAR 0 10
32214: PUSH
32215: LD_VAR 0 10
32219: PUSH
32220: LD_REAL  1.50000000000000E+0000
32223: MUL
32224: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32225: LD_VAR 0 1
32229: PPUSH
32230: LD_INT 66
32232: PPUSH
32233: CALL_OW 321
32237: PUSH
32238: LD_INT 2
32240: EQUAL
32241: IFFALSE 32258
// bpoints := bpoints * 1.1 ;
32243: LD_ADDR_VAR 0 10
32247: PUSH
32248: LD_VAR 0 10
32252: PUSH
32253: LD_REAL  1.10000000000000E+0000
32256: MUL
32257: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32258: LD_ADDR_VAR 0 10
32262: PUSH
32263: LD_VAR 0 10
32267: PUSH
32268: LD_VAR 0 6
32272: PPUSH
32273: LD_INT 1
32275: PPUSH
32276: CALL_OW 259
32280: PUSH
32281: LD_REAL  1.15000000000000E+0000
32284: MUL
32285: MUL
32286: ST_TO_ADDR
// end ; unit_vehicle :
32287: GO 33117
32289: LD_INT 2
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32297
32295: GO 33105
32297: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32298: LD_VAR 0 6
32302: PPUSH
32303: CALL_OW 264
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 42
32313: PUSH
32314: LD_INT 24
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: IN
32322: IFFALSE 32343
// points := [ 25 , 5 , 3 ] ;
32324: LD_ADDR_VAR 0 9
32328: PUSH
32329: LD_INT 25
32331: PUSH
32332: LD_INT 5
32334: PUSH
32335: LD_INT 3
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32343: LD_VAR 0 6
32347: PPUSH
32348: CALL_OW 264
32352: PUSH
32353: LD_INT 4
32355: PUSH
32356: LD_INT 43
32358: PUSH
32359: LD_INT 25
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: IN
32367: IFFALSE 32388
// points := [ 40 , 15 , 5 ] ;
32369: LD_ADDR_VAR 0 9
32373: PUSH
32374: LD_INT 40
32376: PUSH
32377: LD_INT 15
32379: PUSH
32380: LD_INT 5
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32388: LD_VAR 0 6
32392: PPUSH
32393: CALL_OW 264
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 23
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: IN
32408: IFFALSE 32429
// points := [ 7 , 25 , 8 ] ;
32410: LD_ADDR_VAR 0 9
32414: PUSH
32415: LD_INT 7
32417: PUSH
32418: LD_INT 25
32420: PUSH
32421: LD_INT 8
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32429: LD_VAR 0 6
32433: PPUSH
32434: CALL_OW 264
32438: PUSH
32439: LD_INT 5
32441: PUSH
32442: LD_INT 27
32444: PUSH
32445: LD_INT 44
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: LIST
32452: IN
32453: IFFALSE 32474
// points := [ 14 , 50 , 16 ] ;
32455: LD_ADDR_VAR 0 9
32459: PUSH
32460: LD_INT 14
32462: PUSH
32463: LD_INT 50
32465: PUSH
32466: LD_INT 16
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: LIST
32473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32474: LD_VAR 0 6
32478: PPUSH
32479: CALL_OW 264
32483: PUSH
32484: LD_INT 6
32486: PUSH
32487: LD_INT 46
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: IN
32494: IFFALSE 32515
// points := [ 32 , 120 , 70 ] ;
32496: LD_ADDR_VAR 0 9
32500: PUSH
32501: LD_INT 32
32503: PUSH
32504: LD_INT 120
32506: PUSH
32507: LD_INT 70
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32515: LD_VAR 0 6
32519: PPUSH
32520: CALL_OW 264
32524: PUSH
32525: LD_INT 7
32527: PUSH
32528: LD_INT 28
32530: PUSH
32531: LD_INT 45
32533: PUSH
32534: LD_EXP 101
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: IN
32545: IFFALSE 32566
// points := [ 35 , 20 , 45 ] ;
32547: LD_ADDR_VAR 0 9
32551: PUSH
32552: LD_INT 35
32554: PUSH
32555: LD_INT 20
32557: PUSH
32558: LD_INT 45
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32566: LD_VAR 0 6
32570: PPUSH
32571: CALL_OW 264
32575: PUSH
32576: LD_INT 47
32578: PUSH
32579: EMPTY
32580: LIST
32581: IN
32582: IFFALSE 32603
// points := [ 67 , 45 , 75 ] ;
32584: LD_ADDR_VAR 0 9
32588: PUSH
32589: LD_INT 67
32591: PUSH
32592: LD_INT 45
32594: PUSH
32595: LD_INT 75
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32603: LD_VAR 0 6
32607: PPUSH
32608: CALL_OW 264
32612: PUSH
32613: LD_INT 26
32615: PUSH
32616: EMPTY
32617: LIST
32618: IN
32619: IFFALSE 32640
// points := [ 120 , 30 , 80 ] ;
32621: LD_ADDR_VAR 0 9
32625: PUSH
32626: LD_INT 120
32628: PUSH
32629: LD_INT 30
32631: PUSH
32632: LD_INT 80
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32640: LD_VAR 0 6
32644: PPUSH
32645: CALL_OW 264
32649: PUSH
32650: LD_INT 22
32652: PUSH
32653: EMPTY
32654: LIST
32655: IN
32656: IFFALSE 32677
// points := [ 40 , 1 , 1 ] ;
32658: LD_ADDR_VAR 0 9
32662: PUSH
32663: LD_INT 40
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32677: LD_VAR 0 6
32681: PPUSH
32682: CALL_OW 264
32686: PUSH
32687: LD_INT 29
32689: PUSH
32690: EMPTY
32691: LIST
32692: IN
32693: IFFALSE 32714
// points := [ 70 , 200 , 400 ] ;
32695: LD_ADDR_VAR 0 9
32699: PUSH
32700: LD_INT 70
32702: PUSH
32703: LD_INT 200
32705: PUSH
32706: LD_INT 400
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32714: LD_VAR 0 6
32718: PPUSH
32719: CALL_OW 264
32723: PUSH
32724: LD_INT 14
32726: PUSH
32727: LD_INT 53
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: IN
32734: IFFALSE 32755
// points := [ 40 , 10 , 20 ] ;
32736: LD_ADDR_VAR 0 9
32740: PUSH
32741: LD_INT 40
32743: PUSH
32744: LD_INT 10
32746: PUSH
32747: LD_INT 20
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32755: LD_VAR 0 6
32759: PPUSH
32760: CALL_OW 264
32764: PUSH
32765: LD_INT 9
32767: PUSH
32768: EMPTY
32769: LIST
32770: IN
32771: IFFALSE 32792
// points := [ 5 , 70 , 20 ] ;
32773: LD_ADDR_VAR 0 9
32777: PUSH
32778: LD_INT 5
32780: PUSH
32781: LD_INT 70
32783: PUSH
32784: LD_INT 20
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32792: LD_VAR 0 6
32796: PPUSH
32797: CALL_OW 264
32801: PUSH
32802: LD_INT 10
32804: PUSH
32805: EMPTY
32806: LIST
32807: IN
32808: IFFALSE 32829
// points := [ 35 , 110 , 70 ] ;
32810: LD_ADDR_VAR 0 9
32814: PUSH
32815: LD_INT 35
32817: PUSH
32818: LD_INT 110
32820: PUSH
32821: LD_INT 70
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32829: LD_VAR 0 6
32833: PPUSH
32834: CALL_OW 265
32838: PUSH
32839: LD_INT 25
32841: EQUAL
32842: IFFALSE 32863
// points := [ 80 , 65 , 100 ] ;
32844: LD_ADDR_VAR 0 9
32848: PUSH
32849: LD_INT 80
32851: PUSH
32852: LD_INT 65
32854: PUSH
32855: LD_INT 100
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32863: LD_VAR 0 6
32867: PPUSH
32868: CALL_OW 263
32872: PUSH
32873: LD_INT 1
32875: EQUAL
32876: IFFALSE 32911
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32878: LD_ADDR_VAR 0 10
32882: PUSH
32883: LD_VAR 0 10
32887: PUSH
32888: LD_VAR 0 6
32892: PPUSH
32893: CALL_OW 311
32897: PPUSH
32898: LD_INT 3
32900: PPUSH
32901: CALL_OW 259
32905: PUSH
32906: LD_INT 4
32908: MUL
32909: MUL
32910: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32911: LD_VAR 0 6
32915: PPUSH
32916: CALL_OW 263
32920: PUSH
32921: LD_INT 2
32923: EQUAL
32924: IFFALSE 32975
// begin j := IsControledBy ( i ) ;
32926: LD_ADDR_VAR 0 7
32930: PUSH
32931: LD_VAR 0 6
32935: PPUSH
32936: CALL_OW 312
32940: ST_TO_ADDR
// if j then
32941: LD_VAR 0 7
32945: IFFALSE 32975
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32947: LD_ADDR_VAR 0 10
32951: PUSH
32952: LD_VAR 0 10
32956: PUSH
32957: LD_VAR 0 7
32961: PPUSH
32962: LD_INT 3
32964: PPUSH
32965: CALL_OW 259
32969: PUSH
32970: LD_INT 3
32972: MUL
32973: MUL
32974: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32975: LD_VAR 0 6
32979: PPUSH
32980: CALL_OW 264
32984: PUSH
32985: LD_INT 5
32987: PUSH
32988: LD_INT 6
32990: PUSH
32991: LD_INT 46
32993: PUSH
32994: LD_INT 44
32996: PUSH
32997: LD_INT 47
32999: PUSH
33000: LD_INT 45
33002: PUSH
33003: LD_INT 28
33005: PUSH
33006: LD_INT 7
33008: PUSH
33009: LD_INT 27
33011: PUSH
33012: LD_INT 29
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: IN
33027: PUSH
33028: LD_VAR 0 1
33032: PPUSH
33033: LD_INT 52
33035: PPUSH
33036: CALL_OW 321
33040: PUSH
33041: LD_INT 2
33043: EQUAL
33044: AND
33045: IFFALSE 33062
// bpoints := bpoints * 1.2 ;
33047: LD_ADDR_VAR 0 10
33051: PUSH
33052: LD_VAR 0 10
33056: PUSH
33057: LD_REAL  1.20000000000000E+0000
33060: MUL
33061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33062: LD_VAR 0 6
33066: PPUSH
33067: CALL_OW 264
33071: PUSH
33072: LD_INT 6
33074: PUSH
33075: LD_INT 46
33077: PUSH
33078: LD_INT 47
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: IN
33086: IFFALSE 33103
// bpoints := bpoints * 1.2 ;
33088: LD_ADDR_VAR 0 10
33092: PUSH
33093: LD_VAR 0 10
33097: PUSH
33098: LD_REAL  1.20000000000000E+0000
33101: MUL
33102: ST_TO_ADDR
// end ; unit_building :
33103: GO 33117
33105: LD_INT 3
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33116
33113: POP
// ; end ;
33114: GO 33117
33116: POP
// for j = 1 to 3 do
33117: LD_ADDR_VAR 0 7
33121: PUSH
33122: DOUBLE
33123: LD_INT 1
33125: DEC
33126: ST_TO_ADDR
33127: LD_INT 3
33129: PUSH
33130: FOR_TO
33131: IFFALSE 33184
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33133: LD_ADDR_VAR 0 5
33137: PUSH
33138: LD_VAR 0 5
33142: PPUSH
33143: LD_VAR 0 7
33147: PPUSH
33148: LD_VAR 0 5
33152: PUSH
33153: LD_VAR 0 7
33157: ARRAY
33158: PUSH
33159: LD_VAR 0 9
33163: PUSH
33164: LD_VAR 0 7
33168: ARRAY
33169: PUSH
33170: LD_VAR 0 10
33174: MUL
33175: PLUS
33176: PPUSH
33177: CALL_OW 1
33181: ST_TO_ADDR
33182: GO 33130
33184: POP
33185: POP
// end ;
33186: GO 31663
33188: POP
33189: POP
// result := Replace ( result , 4 , tmp ) ;
33190: LD_ADDR_VAR 0 5
33194: PUSH
33195: LD_VAR 0 5
33199: PPUSH
33200: LD_INT 4
33202: PPUSH
33203: LD_VAR 0 8
33207: PPUSH
33208: CALL_OW 1
33212: ST_TO_ADDR
// end ;
33213: LD_VAR 0 5
33217: RET
// export function DangerAtRange ( unit , range ) ; begin
33218: LD_INT 0
33220: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_VAR 0 1
33230: PPUSH
33231: CALL_OW 255
33235: PPUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: CALL_OW 250
33245: PPUSH
33246: LD_VAR 0 1
33250: PPUSH
33251: CALL_OW 251
33255: PPUSH
33256: LD_VAR 0 2
33260: PPUSH
33261: CALL 31515 0 4
33265: ST_TO_ADDR
// end ;
33266: LD_VAR 0 3
33270: RET
// export function DangerInArea ( side , area ) ; begin
33271: LD_INT 0
33273: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33274: LD_ADDR_VAR 0 3
33278: PUSH
33279: LD_VAR 0 2
33283: PPUSH
33284: LD_INT 81
33286: PUSH
33287: LD_VAR 0 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PPUSH
33296: CALL_OW 70
33300: ST_TO_ADDR
// end ;
33301: LD_VAR 0 3
33305: RET
// export function IsExtension ( b ) ; begin
33306: LD_INT 0
33308: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33309: LD_ADDR_VAR 0 2
33313: PUSH
33314: LD_VAR 0 1
33318: PUSH
33319: LD_INT 23
33321: PUSH
33322: LD_INT 20
33324: PUSH
33325: LD_INT 22
33327: PUSH
33328: LD_INT 17
33330: PUSH
33331: LD_INT 24
33333: PUSH
33334: LD_INT 21
33336: PUSH
33337: LD_INT 19
33339: PUSH
33340: LD_INT 16
33342: PUSH
33343: LD_INT 25
33345: PUSH
33346: LD_INT 18
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: IN
33361: ST_TO_ADDR
// end ;
33362: LD_VAR 0 2
33366: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33367: LD_INT 0
33369: PPUSH
33370: PPUSH
33371: PPUSH
// result := [ ] ;
33372: LD_ADDR_VAR 0 4
33376: PUSH
33377: EMPTY
33378: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33379: LD_ADDR_VAR 0 5
33383: PUSH
33384: LD_VAR 0 2
33388: PPUSH
33389: LD_INT 21
33391: PUSH
33392: LD_INT 3
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PPUSH
33399: CALL_OW 70
33403: ST_TO_ADDR
// if not tmp then
33404: LD_VAR 0 5
33408: NOT
33409: IFFALSE 33413
// exit ;
33411: GO 33477
// if checkLink then
33413: LD_VAR 0 3
33417: IFFALSE 33467
// begin for i in tmp do
33419: LD_ADDR_VAR 0 6
33423: PUSH
33424: LD_VAR 0 5
33428: PUSH
33429: FOR_IN
33430: IFFALSE 33465
// if GetBase ( i ) <> base then
33432: LD_VAR 0 6
33436: PPUSH
33437: CALL_OW 274
33441: PUSH
33442: LD_VAR 0 1
33446: NONEQUAL
33447: IFFALSE 33463
// ComLinkToBase ( base , i ) ;
33449: LD_VAR 0 1
33453: PPUSH
33454: LD_VAR 0 6
33458: PPUSH
33459: CALL_OW 169
33463: GO 33429
33465: POP
33466: POP
// end ; result := tmp ;
33467: LD_ADDR_VAR 0 4
33471: PUSH
33472: LD_VAR 0 5
33476: ST_TO_ADDR
// end ;
33477: LD_VAR 0 4
33481: RET
// export function ComComplete ( units , b ) ; var i ; begin
33482: LD_INT 0
33484: PPUSH
33485: PPUSH
// if not units then
33486: LD_VAR 0 1
33490: NOT
33491: IFFALSE 33495
// exit ;
33493: GO 33585
// for i in units do
33495: LD_ADDR_VAR 0 4
33499: PUSH
33500: LD_VAR 0 1
33504: PUSH
33505: FOR_IN
33506: IFFALSE 33583
// if BuildingStatus ( b ) = bs_build then
33508: LD_VAR 0 2
33512: PPUSH
33513: CALL_OW 461
33517: PUSH
33518: LD_INT 1
33520: EQUAL
33521: IFFALSE 33581
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33523: LD_VAR 0 4
33527: PPUSH
33528: LD_STRING h
33530: PUSH
33531: LD_VAR 0 2
33535: PPUSH
33536: CALL_OW 250
33540: PUSH
33541: LD_VAR 0 2
33545: PPUSH
33546: CALL_OW 251
33550: PUSH
33551: LD_VAR 0 2
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: PUSH
33574: EMPTY
33575: LIST
33576: PPUSH
33577: CALL_OW 446
33581: GO 33505
33583: POP
33584: POP
// end ;
33585: LD_VAR 0 3
33589: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33590: LD_INT 0
33592: PPUSH
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33598: LD_VAR 0 1
33602: NOT
33603: PUSH
33604: LD_VAR 0 1
33608: PPUSH
33609: CALL_OW 263
33613: PUSH
33614: LD_INT 2
33616: NONEQUAL
33617: OR
33618: IFFALSE 33622
// exit ;
33620: GO 33938
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33622: LD_ADDR_VAR 0 6
33626: PUSH
33627: LD_INT 22
33629: PUSH
33630: LD_VAR 0 1
33634: PPUSH
33635: CALL_OW 255
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: LD_INT 30
33649: PUSH
33650: LD_INT 36
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 34
33659: PUSH
33660: LD_INT 31
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PPUSH
33676: CALL_OW 69
33680: ST_TO_ADDR
// if not tmp then
33681: LD_VAR 0 6
33685: NOT
33686: IFFALSE 33690
// exit ;
33688: GO 33938
// result := [ ] ;
33690: LD_ADDR_VAR 0 2
33694: PUSH
33695: EMPTY
33696: ST_TO_ADDR
// for i in tmp do
33697: LD_ADDR_VAR 0 3
33701: PUSH
33702: LD_VAR 0 6
33706: PUSH
33707: FOR_IN
33708: IFFALSE 33779
// begin t := UnitsInside ( i ) ;
33710: LD_ADDR_VAR 0 4
33714: PUSH
33715: LD_VAR 0 3
33719: PPUSH
33720: CALL_OW 313
33724: ST_TO_ADDR
// if t then
33725: LD_VAR 0 4
33729: IFFALSE 33777
// for j in t do
33731: LD_ADDR_VAR 0 7
33735: PUSH
33736: LD_VAR 0 4
33740: PUSH
33741: FOR_IN
33742: IFFALSE 33775
// result := Replace ( result , result + 1 , j ) ;
33744: LD_ADDR_VAR 0 2
33748: PUSH
33749: LD_VAR 0 2
33753: PPUSH
33754: LD_VAR 0 2
33758: PUSH
33759: LD_INT 1
33761: PLUS
33762: PPUSH
33763: LD_VAR 0 7
33767: PPUSH
33768: CALL_OW 1
33772: ST_TO_ADDR
33773: GO 33741
33775: POP
33776: POP
// end ;
33777: GO 33707
33779: POP
33780: POP
// if not result then
33781: LD_VAR 0 2
33785: NOT
33786: IFFALSE 33790
// exit ;
33788: GO 33938
// mech := result [ 1 ] ;
33790: LD_ADDR_VAR 0 5
33794: PUSH
33795: LD_VAR 0 2
33799: PUSH
33800: LD_INT 1
33802: ARRAY
33803: ST_TO_ADDR
// if result > 1 then
33804: LD_VAR 0 2
33808: PUSH
33809: LD_INT 1
33811: GREATER
33812: IFFALSE 33924
// begin for i = 2 to result do
33814: LD_ADDR_VAR 0 3
33818: PUSH
33819: DOUBLE
33820: LD_INT 2
33822: DEC
33823: ST_TO_ADDR
33824: LD_VAR 0 2
33828: PUSH
33829: FOR_TO
33830: IFFALSE 33922
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33832: LD_ADDR_VAR 0 4
33836: PUSH
33837: LD_VAR 0 2
33841: PUSH
33842: LD_VAR 0 3
33846: ARRAY
33847: PPUSH
33848: LD_INT 3
33850: PPUSH
33851: CALL_OW 259
33855: PUSH
33856: LD_VAR 0 2
33860: PUSH
33861: LD_VAR 0 3
33865: ARRAY
33866: PPUSH
33867: CALL_OW 432
33871: MINUS
33872: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33873: LD_VAR 0 4
33877: PUSH
33878: LD_VAR 0 5
33882: PPUSH
33883: LD_INT 3
33885: PPUSH
33886: CALL_OW 259
33890: PUSH
33891: LD_VAR 0 5
33895: PPUSH
33896: CALL_OW 432
33900: MINUS
33901: GREATEREQUAL
33902: IFFALSE 33920
// mech := result [ i ] ;
33904: LD_ADDR_VAR 0 5
33908: PUSH
33909: LD_VAR 0 2
33913: PUSH
33914: LD_VAR 0 3
33918: ARRAY
33919: ST_TO_ADDR
// end ;
33920: GO 33829
33922: POP
33923: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33924: LD_VAR 0 1
33928: PPUSH
33929: LD_VAR 0 5
33933: PPUSH
33934: CALL_OW 135
// end ;
33938: LD_VAR 0 2
33942: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33943: LD_INT 0
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
33954: PPUSH
33955: PPUSH
33956: PPUSH
33957: PPUSH
// result := [ ] ;
33958: LD_ADDR_VAR 0 7
33962: PUSH
33963: EMPTY
33964: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33965: LD_VAR 0 1
33969: PPUSH
33970: CALL_OW 266
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: IN
33985: NOT
33986: IFFALSE 33990
// exit ;
33988: GO 35624
// if name then
33990: LD_VAR 0 3
33994: IFFALSE 34010
// SetBName ( base_dep , name ) ;
33996: LD_VAR 0 1
34000: PPUSH
34001: LD_VAR 0 3
34005: PPUSH
34006: CALL_OW 500
// base := GetBase ( base_dep ) ;
34010: LD_ADDR_VAR 0 15
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 274
34024: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34025: LD_ADDR_VAR 0 16
34029: PUSH
34030: LD_VAR 0 1
34034: PPUSH
34035: CALL_OW 255
34039: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34040: LD_ADDR_VAR 0 17
34044: PUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL_OW 248
34054: ST_TO_ADDR
// if sources then
34055: LD_VAR 0 5
34059: IFFALSE 34106
// for i = 1 to 3 do
34061: LD_ADDR_VAR 0 8
34065: PUSH
34066: DOUBLE
34067: LD_INT 1
34069: DEC
34070: ST_TO_ADDR
34071: LD_INT 3
34073: PUSH
34074: FOR_TO
34075: IFFALSE 34104
// AddResourceType ( base , i , sources [ i ] ) ;
34077: LD_VAR 0 15
34081: PPUSH
34082: LD_VAR 0 8
34086: PPUSH
34087: LD_VAR 0 5
34091: PUSH
34092: LD_VAR 0 8
34096: ARRAY
34097: PPUSH
34098: CALL_OW 276
34102: GO 34074
34104: POP
34105: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34106: LD_ADDR_VAR 0 18
34110: PUSH
34111: LD_VAR 0 15
34115: PPUSH
34116: LD_VAR 0 2
34120: PPUSH
34121: LD_INT 1
34123: PPUSH
34124: CALL 33367 0 3
34128: ST_TO_ADDR
// InitHc ;
34129: CALL_OW 19
// InitUc ;
34133: CALL_OW 18
// uc_side := side ;
34137: LD_ADDR_OWVAR 20
34141: PUSH
34142: LD_VAR 0 16
34146: ST_TO_ADDR
// uc_nation := nation ;
34147: LD_ADDR_OWVAR 21
34151: PUSH
34152: LD_VAR 0 17
34156: ST_TO_ADDR
// if buildings then
34157: LD_VAR 0 18
34161: IFFALSE 35483
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34163: LD_ADDR_VAR 0 19
34167: PUSH
34168: LD_VAR 0 18
34172: PPUSH
34173: LD_INT 2
34175: PUSH
34176: LD_INT 30
34178: PUSH
34179: LD_INT 29
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 30
34188: PUSH
34189: LD_INT 30
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: PPUSH
34201: CALL_OW 72
34205: ST_TO_ADDR
// if tmp then
34206: LD_VAR 0 19
34210: IFFALSE 34258
// for i in tmp do
34212: LD_ADDR_VAR 0 8
34216: PUSH
34217: LD_VAR 0 19
34221: PUSH
34222: FOR_IN
34223: IFFALSE 34256
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34225: LD_VAR 0 8
34229: PPUSH
34230: CALL_OW 250
34234: PPUSH
34235: LD_VAR 0 8
34239: PPUSH
34240: CALL_OW 251
34244: PPUSH
34245: LD_VAR 0 16
34249: PPUSH
34250: CALL_OW 441
34254: GO 34222
34256: POP
34257: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34258: LD_VAR 0 18
34262: PPUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 30
34268: PUSH
34269: LD_INT 32
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 30
34278: PUSH
34279: LD_INT 33
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: LIST
34290: PPUSH
34291: CALL_OW 72
34295: IFFALSE 34383
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34297: LD_ADDR_VAR 0 8
34301: PUSH
34302: LD_VAR 0 18
34306: PPUSH
34307: LD_INT 2
34309: PUSH
34310: LD_INT 30
34312: PUSH
34313: LD_INT 32
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 30
34322: PUSH
34323: LD_INT 33
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: LIST
34334: PPUSH
34335: CALL_OW 72
34339: PUSH
34340: FOR_IN
34341: IFFALSE 34381
// begin if not GetBWeapon ( i ) then
34343: LD_VAR 0 8
34347: PPUSH
34348: CALL_OW 269
34352: NOT
34353: IFFALSE 34379
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34355: LD_VAR 0 8
34359: PPUSH
34360: LD_VAR 0 8
34364: PPUSH
34365: LD_VAR 0 2
34369: PPUSH
34370: CALL 35629 0 2
34374: PPUSH
34375: CALL_OW 431
// end ;
34379: GO 34340
34381: POP
34382: POP
// end ; for i = 1 to personel do
34383: LD_ADDR_VAR 0 8
34387: PUSH
34388: DOUBLE
34389: LD_INT 1
34391: DEC
34392: ST_TO_ADDR
34393: LD_VAR 0 6
34397: PUSH
34398: FOR_TO
34399: IFFALSE 35463
// begin if i > 4 then
34401: LD_VAR 0 8
34405: PUSH
34406: LD_INT 4
34408: GREATER
34409: IFFALSE 34413
// break ;
34411: GO 35463
// case i of 1 :
34413: LD_VAR 0 8
34417: PUSH
34418: LD_INT 1
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34506
34426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34427: LD_ADDR_VAR 0 12
34431: PUSH
34432: LD_VAR 0 18
34436: PPUSH
34437: LD_INT 22
34439: PUSH
34440: LD_VAR 0 16
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 58
34451: PUSH
34452: EMPTY
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 30
34460: PUSH
34461: LD_INT 32
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 30
34470: PUSH
34471: LD_INT 4
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 30
34480: PUSH
34481: LD_INT 5
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: PPUSH
34499: CALL_OW 72
34503: ST_TO_ADDR
34504: GO 34728
34506: LD_INT 2
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34576
34514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34515: LD_ADDR_VAR 0 12
34519: PUSH
34520: LD_VAR 0 18
34524: PPUSH
34525: LD_INT 22
34527: PUSH
34528: LD_VAR 0 16
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: LD_INT 30
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 30
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PPUSH
34569: CALL_OW 72
34573: ST_TO_ADDR
34574: GO 34728
34576: LD_INT 3
34578: DOUBLE
34579: EQUAL
34580: IFTRUE 34584
34582: GO 34646
34584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34585: LD_ADDR_VAR 0 12
34589: PUSH
34590: LD_VAR 0 18
34594: PPUSH
34595: LD_INT 22
34597: PUSH
34598: LD_VAR 0 16
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: LD_INT 30
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 30
34622: PUSH
34623: LD_INT 3
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: LIST
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PPUSH
34639: CALL_OW 72
34643: ST_TO_ADDR
34644: GO 34728
34646: LD_INT 4
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34654
34652: GO 34727
34654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34655: LD_ADDR_VAR 0 12
34659: PUSH
34660: LD_VAR 0 18
34664: PPUSH
34665: LD_INT 22
34667: PUSH
34668: LD_VAR 0 16
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: LD_INT 30
34682: PUSH
34683: LD_INT 6
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 30
34692: PUSH
34693: LD_INT 7
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 30
34702: PUSH
34703: LD_INT 8
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PPUSH
34720: CALL_OW 72
34724: ST_TO_ADDR
34725: GO 34728
34727: POP
// if i = 1 then
34728: LD_VAR 0 8
34732: PUSH
34733: LD_INT 1
34735: EQUAL
34736: IFFALSE 34847
// begin tmp := [ ] ;
34738: LD_ADDR_VAR 0 19
34742: PUSH
34743: EMPTY
34744: ST_TO_ADDR
// for j in f do
34745: LD_ADDR_VAR 0 9
34749: PUSH
34750: LD_VAR 0 12
34754: PUSH
34755: FOR_IN
34756: IFFALSE 34829
// if GetBType ( j ) = b_bunker then
34758: LD_VAR 0 9
34762: PPUSH
34763: CALL_OW 266
34767: PUSH
34768: LD_INT 32
34770: EQUAL
34771: IFFALSE 34798
// tmp := Insert ( tmp , 1 , j ) else
34773: LD_ADDR_VAR 0 19
34777: PUSH
34778: LD_VAR 0 19
34782: PPUSH
34783: LD_INT 1
34785: PPUSH
34786: LD_VAR 0 9
34790: PPUSH
34791: CALL_OW 2
34795: ST_TO_ADDR
34796: GO 34827
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34798: LD_ADDR_VAR 0 19
34802: PUSH
34803: LD_VAR 0 19
34807: PPUSH
34808: LD_VAR 0 19
34812: PUSH
34813: LD_INT 1
34815: PLUS
34816: PPUSH
34817: LD_VAR 0 9
34821: PPUSH
34822: CALL_OW 2
34826: ST_TO_ADDR
34827: GO 34755
34829: POP
34830: POP
// if tmp then
34831: LD_VAR 0 19
34835: IFFALSE 34847
// f := tmp ;
34837: LD_ADDR_VAR 0 12
34841: PUSH
34842: LD_VAR 0 19
34846: ST_TO_ADDR
// end ; x := personel [ i ] ;
34847: LD_ADDR_VAR 0 13
34851: PUSH
34852: LD_VAR 0 6
34856: PUSH
34857: LD_VAR 0 8
34861: ARRAY
34862: ST_TO_ADDR
// if x = - 1 then
34863: LD_VAR 0 13
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: EQUAL
34872: IFFALSE 35081
// begin for j in f do
34874: LD_ADDR_VAR 0 9
34878: PUSH
34879: LD_VAR 0 12
34883: PUSH
34884: FOR_IN
34885: IFFALSE 35077
// repeat InitHc ;
34887: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34891: LD_VAR 0 9
34895: PPUSH
34896: CALL_OW 266
34900: PUSH
34901: LD_INT 5
34903: EQUAL
34904: IFFALSE 34974
// begin if UnitsInside ( j ) < 3 then
34906: LD_VAR 0 9
34910: PPUSH
34911: CALL_OW 313
34915: PUSH
34916: LD_INT 3
34918: LESS
34919: IFFALSE 34955
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34921: LD_INT 0
34923: PPUSH
34924: LD_INT 5
34926: PUSH
34927: LD_INT 8
34929: PUSH
34930: LD_INT 9
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: PUSH
34938: LD_VAR 0 17
34942: ARRAY
34943: PPUSH
34944: LD_VAR 0 4
34948: PPUSH
34949: CALL_OW 380
34953: GO 34972
// PrepareHuman ( false , i , skill ) ;
34955: LD_INT 0
34957: PPUSH
34958: LD_VAR 0 8
34962: PPUSH
34963: LD_VAR 0 4
34967: PPUSH
34968: CALL_OW 380
// end else
34972: GO 34991
// PrepareHuman ( false , i , skill ) ;
34974: LD_INT 0
34976: PPUSH
34977: LD_VAR 0 8
34981: PPUSH
34982: LD_VAR 0 4
34986: PPUSH
34987: CALL_OW 380
// un := CreateHuman ;
34991: LD_ADDR_VAR 0 14
34995: PUSH
34996: CALL_OW 44
35000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35001: LD_ADDR_VAR 0 7
35005: PUSH
35006: LD_VAR 0 7
35010: PPUSH
35011: LD_INT 1
35013: PPUSH
35014: LD_VAR 0 14
35018: PPUSH
35019: CALL_OW 2
35023: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35024: LD_VAR 0 14
35028: PPUSH
35029: LD_VAR 0 9
35033: PPUSH
35034: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35038: LD_VAR 0 9
35042: PPUSH
35043: CALL_OW 313
35047: PUSH
35048: LD_INT 6
35050: EQUAL
35051: PUSH
35052: LD_VAR 0 9
35056: PPUSH
35057: CALL_OW 266
35061: PUSH
35062: LD_INT 32
35064: PUSH
35065: LD_INT 31
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: IN
35072: OR
35073: IFFALSE 34887
35075: GO 34884
35077: POP
35078: POP
// end else
35079: GO 35461
// for j = 1 to x do
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: DOUBLE
35087: LD_INT 1
35089: DEC
35090: ST_TO_ADDR
35091: LD_VAR 0 13
35095: PUSH
35096: FOR_TO
35097: IFFALSE 35459
// begin InitHc ;
35099: CALL_OW 19
// if not f then
35103: LD_VAR 0 12
35107: NOT
35108: IFFALSE 35197
// begin PrepareHuman ( false , i , skill ) ;
35110: LD_INT 0
35112: PPUSH
35113: LD_VAR 0 8
35117: PPUSH
35118: LD_VAR 0 4
35122: PPUSH
35123: CALL_OW 380
// un := CreateHuman ;
35127: LD_ADDR_VAR 0 14
35131: PUSH
35132: CALL_OW 44
35136: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35137: LD_ADDR_VAR 0 7
35141: PUSH
35142: LD_VAR 0 7
35146: PPUSH
35147: LD_INT 1
35149: PPUSH
35150: LD_VAR 0 14
35154: PPUSH
35155: CALL_OW 2
35159: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35160: LD_VAR 0 14
35164: PPUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: CALL_OW 250
35174: PPUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 251
35184: PPUSH
35185: LD_INT 10
35187: PPUSH
35188: LD_INT 0
35190: PPUSH
35191: CALL_OW 50
// continue ;
35195: GO 35096
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35197: LD_VAR 0 12
35201: PUSH
35202: LD_INT 1
35204: ARRAY
35205: PPUSH
35206: CALL_OW 313
35210: PUSH
35211: LD_VAR 0 12
35215: PUSH
35216: LD_INT 1
35218: ARRAY
35219: PPUSH
35220: CALL_OW 266
35224: PUSH
35225: LD_INT 32
35227: PUSH
35228: LD_INT 31
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: IN
35235: AND
35236: PUSH
35237: LD_VAR 0 12
35241: PUSH
35242: LD_INT 1
35244: ARRAY
35245: PPUSH
35246: CALL_OW 313
35250: PUSH
35251: LD_INT 6
35253: EQUAL
35254: OR
35255: IFFALSE 35275
// f := Delete ( f , 1 ) ;
35257: LD_ADDR_VAR 0 12
35261: PUSH
35262: LD_VAR 0 12
35266: PPUSH
35267: LD_INT 1
35269: PPUSH
35270: CALL_OW 3
35274: ST_TO_ADDR
// if not f then
35275: LD_VAR 0 12
35279: NOT
35280: IFFALSE 35298
// begin x := x + 2 ;
35282: LD_ADDR_VAR 0 13
35286: PUSH
35287: LD_VAR 0 13
35291: PUSH
35292: LD_INT 2
35294: PLUS
35295: ST_TO_ADDR
// continue ;
35296: GO 35096
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35298: LD_VAR 0 12
35302: PUSH
35303: LD_INT 1
35305: ARRAY
35306: PPUSH
35307: CALL_OW 266
35311: PUSH
35312: LD_INT 5
35314: EQUAL
35315: IFFALSE 35389
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35317: LD_VAR 0 12
35321: PUSH
35322: LD_INT 1
35324: ARRAY
35325: PPUSH
35326: CALL_OW 313
35330: PUSH
35331: LD_INT 3
35333: LESS
35334: IFFALSE 35370
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35336: LD_INT 0
35338: PPUSH
35339: LD_INT 5
35341: PUSH
35342: LD_INT 8
35344: PUSH
35345: LD_INT 9
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: PUSH
35353: LD_VAR 0 17
35357: ARRAY
35358: PPUSH
35359: LD_VAR 0 4
35363: PPUSH
35364: CALL_OW 380
35368: GO 35387
// PrepareHuman ( false , i , skill ) ;
35370: LD_INT 0
35372: PPUSH
35373: LD_VAR 0 8
35377: PPUSH
35378: LD_VAR 0 4
35382: PPUSH
35383: CALL_OW 380
// end else
35387: GO 35406
// PrepareHuman ( false , i , skill ) ;
35389: LD_INT 0
35391: PPUSH
35392: LD_VAR 0 8
35396: PPUSH
35397: LD_VAR 0 4
35401: PPUSH
35402: CALL_OW 380
// un := CreateHuman ;
35406: LD_ADDR_VAR 0 14
35410: PUSH
35411: CALL_OW 44
35415: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35416: LD_ADDR_VAR 0 7
35420: PUSH
35421: LD_VAR 0 7
35425: PPUSH
35426: LD_INT 1
35428: PPUSH
35429: LD_VAR 0 14
35433: PPUSH
35434: CALL_OW 2
35438: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35439: LD_VAR 0 14
35443: PPUSH
35444: LD_VAR 0 12
35448: PUSH
35449: LD_INT 1
35451: ARRAY
35452: PPUSH
35453: CALL_OW 52
// end ;
35457: GO 35096
35459: POP
35460: POP
// end ;
35461: GO 34398
35463: POP
35464: POP
// result := result ^ buildings ;
35465: LD_ADDR_VAR 0 7
35469: PUSH
35470: LD_VAR 0 7
35474: PUSH
35475: LD_VAR 0 18
35479: ADD
35480: ST_TO_ADDR
// end else
35481: GO 35624
// begin for i = 1 to personel do
35483: LD_ADDR_VAR 0 8
35487: PUSH
35488: DOUBLE
35489: LD_INT 1
35491: DEC
35492: ST_TO_ADDR
35493: LD_VAR 0 6
35497: PUSH
35498: FOR_TO
35499: IFFALSE 35622
// begin if i > 4 then
35501: LD_VAR 0 8
35505: PUSH
35506: LD_INT 4
35508: GREATER
35509: IFFALSE 35513
// break ;
35511: GO 35622
// x := personel [ i ] ;
35513: LD_ADDR_VAR 0 13
35517: PUSH
35518: LD_VAR 0 6
35522: PUSH
35523: LD_VAR 0 8
35527: ARRAY
35528: ST_TO_ADDR
// if x = - 1 then
35529: LD_VAR 0 13
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: EQUAL
35538: IFFALSE 35542
// continue ;
35540: GO 35498
// PrepareHuman ( false , i , skill ) ;
35542: LD_INT 0
35544: PPUSH
35545: LD_VAR 0 8
35549: PPUSH
35550: LD_VAR 0 4
35554: PPUSH
35555: CALL_OW 380
// un := CreateHuman ;
35559: LD_ADDR_VAR 0 14
35563: PUSH
35564: CALL_OW 44
35568: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35569: LD_VAR 0 14
35573: PPUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: CALL_OW 250
35583: PPUSH
35584: LD_VAR 0 1
35588: PPUSH
35589: CALL_OW 251
35593: PPUSH
35594: LD_INT 10
35596: PPUSH
35597: LD_INT 0
35599: PPUSH
35600: CALL_OW 50
// result := result ^ un ;
35604: LD_ADDR_VAR 0 7
35608: PUSH
35609: LD_VAR 0 7
35613: PUSH
35614: LD_VAR 0 14
35618: ADD
35619: ST_TO_ADDR
// end ;
35620: GO 35498
35622: POP
35623: POP
// end ; end ;
35624: LD_VAR 0 7
35628: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35629: LD_INT 0
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
35640: PPUSH
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
// result := false ;
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_INT 0
35654: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35655: LD_VAR 0 1
35659: NOT
35660: PUSH
35661: LD_VAR 0 1
35665: PPUSH
35666: CALL_OW 266
35670: PUSH
35671: LD_INT 32
35673: PUSH
35674: LD_INT 33
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: IN
35681: NOT
35682: OR
35683: IFFALSE 35687
// exit ;
35685: GO 36796
// nat := GetNation ( tower ) ;
35687: LD_ADDR_VAR 0 12
35691: PUSH
35692: LD_VAR 0 1
35696: PPUSH
35697: CALL_OW 248
35701: ST_TO_ADDR
// side := GetSide ( tower ) ;
35702: LD_ADDR_VAR 0 16
35706: PUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 255
35716: ST_TO_ADDR
// x := GetX ( tower ) ;
35717: LD_ADDR_VAR 0 10
35721: PUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 250
35731: ST_TO_ADDR
// y := GetY ( tower ) ;
35732: LD_ADDR_VAR 0 11
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: CALL_OW 251
35746: ST_TO_ADDR
// if not x or not y then
35747: LD_VAR 0 10
35751: NOT
35752: PUSH
35753: LD_VAR 0 11
35757: NOT
35758: OR
35759: IFFALSE 35763
// exit ;
35761: GO 36796
// weapon := 0 ;
35763: LD_ADDR_VAR 0 18
35767: PUSH
35768: LD_INT 0
35770: ST_TO_ADDR
// fac_list := [ ] ;
35771: LD_ADDR_VAR 0 17
35775: PUSH
35776: EMPTY
35777: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35778: LD_ADDR_VAR 0 6
35782: PUSH
35783: LD_VAR 0 1
35787: PPUSH
35788: CALL_OW 274
35792: PPUSH
35793: LD_VAR 0 2
35797: PPUSH
35798: LD_INT 0
35800: PPUSH
35801: CALL 33367 0 3
35805: PPUSH
35806: LD_INT 30
35808: PUSH
35809: LD_INT 3
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PPUSH
35816: CALL_OW 72
35820: ST_TO_ADDR
// if not factories then
35821: LD_VAR 0 6
35825: NOT
35826: IFFALSE 35830
// exit ;
35828: GO 36796
// for i in factories do
35830: LD_ADDR_VAR 0 8
35834: PUSH
35835: LD_VAR 0 6
35839: PUSH
35840: FOR_IN
35841: IFFALSE 35866
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35843: LD_ADDR_VAR 0 17
35847: PUSH
35848: LD_VAR 0 17
35852: PUSH
35853: LD_VAR 0 8
35857: PPUSH
35858: CALL_OW 478
35862: UNION
35863: ST_TO_ADDR
35864: GO 35840
35866: POP
35867: POP
// if not fac_list then
35868: LD_VAR 0 17
35872: NOT
35873: IFFALSE 35877
// exit ;
35875: GO 36796
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35877: LD_ADDR_VAR 0 5
35881: PUSH
35882: LD_INT 4
35884: PUSH
35885: LD_INT 5
35887: PUSH
35888: LD_INT 9
35890: PUSH
35891: LD_INT 10
35893: PUSH
35894: LD_INT 6
35896: PUSH
35897: LD_INT 7
35899: PUSH
35900: LD_INT 11
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 27
35914: PUSH
35915: LD_INT 28
35917: PUSH
35918: LD_INT 26
35920: PUSH
35921: LD_INT 30
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 43
35932: PUSH
35933: LD_INT 44
35935: PUSH
35936: LD_INT 46
35938: PUSH
35939: LD_INT 45
35941: PUSH
35942: LD_INT 47
35944: PUSH
35945: LD_INT 49
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: PUSH
35961: LD_VAR 0 12
35965: ARRAY
35966: ST_TO_ADDR
// list := list isect fac_list ;
35967: LD_ADDR_VAR 0 5
35971: PUSH
35972: LD_VAR 0 5
35976: PUSH
35977: LD_VAR 0 17
35981: ISECT
35982: ST_TO_ADDR
// if not list then
35983: LD_VAR 0 5
35987: NOT
35988: IFFALSE 35992
// exit ;
35990: GO 36796
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35992: LD_VAR 0 12
35996: PUSH
35997: LD_INT 3
35999: EQUAL
36000: PUSH
36001: LD_INT 49
36003: PUSH
36004: LD_VAR 0 5
36008: IN
36009: AND
36010: PUSH
36011: LD_INT 31
36013: PPUSH
36014: LD_VAR 0 16
36018: PPUSH
36019: CALL_OW 321
36023: PUSH
36024: LD_INT 2
36026: EQUAL
36027: AND
36028: IFFALSE 36088
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36030: LD_INT 22
36032: PUSH
36033: LD_VAR 0 16
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 35
36044: PUSH
36045: LD_INT 49
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 91
36054: PUSH
36055: LD_VAR 0 1
36059: PUSH
36060: LD_INT 10
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: PPUSH
36073: CALL_OW 69
36077: NOT
36078: IFFALSE 36088
// weapon := ru_time_lapser ;
36080: LD_ADDR_VAR 0 18
36084: PUSH
36085: LD_INT 49
36087: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36088: LD_VAR 0 12
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: IN
36103: PUSH
36104: LD_INT 11
36106: PUSH
36107: LD_VAR 0 5
36111: IN
36112: PUSH
36113: LD_INT 30
36115: PUSH
36116: LD_VAR 0 5
36120: IN
36121: OR
36122: AND
36123: PUSH
36124: LD_INT 6
36126: PPUSH
36127: LD_VAR 0 16
36131: PPUSH
36132: CALL_OW 321
36136: PUSH
36137: LD_INT 2
36139: EQUAL
36140: AND
36141: IFFALSE 36306
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36143: LD_INT 22
36145: PUSH
36146: LD_VAR 0 16
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 35
36160: PUSH
36161: LD_INT 11
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 35
36170: PUSH
36171: LD_INT 30
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 91
36185: PUSH
36186: LD_VAR 0 1
36190: PUSH
36191: LD_INT 18
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: LIST
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: PPUSH
36204: CALL_OW 69
36208: NOT
36209: PUSH
36210: LD_INT 22
36212: PUSH
36213: LD_VAR 0 16
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: LD_INT 30
36227: PUSH
36228: LD_INT 32
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 30
36237: PUSH
36238: LD_INT 33
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 91
36252: PUSH
36253: LD_VAR 0 1
36257: PUSH
36258: LD_INT 12
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: PUSH
36271: EMPTY
36272: LIST
36273: PPUSH
36274: CALL_OW 69
36278: PUSH
36279: LD_INT 2
36281: GREATER
36282: AND
36283: IFFALSE 36306
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36285: LD_ADDR_VAR 0 18
36289: PUSH
36290: LD_INT 11
36292: PUSH
36293: LD_INT 30
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_VAR 0 12
36304: ARRAY
36305: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36306: LD_VAR 0 18
36310: NOT
36311: PUSH
36312: LD_INT 40
36314: PPUSH
36315: LD_VAR 0 16
36319: PPUSH
36320: CALL_OW 321
36324: PUSH
36325: LD_INT 2
36327: EQUAL
36328: AND
36329: PUSH
36330: LD_INT 7
36332: PUSH
36333: LD_VAR 0 5
36337: IN
36338: PUSH
36339: LD_INT 28
36341: PUSH
36342: LD_VAR 0 5
36346: IN
36347: OR
36348: PUSH
36349: LD_INT 45
36351: PUSH
36352: LD_VAR 0 5
36356: IN
36357: OR
36358: AND
36359: IFFALSE 36613
// begin hex := GetHexInfo ( x , y ) ;
36361: LD_ADDR_VAR 0 4
36365: PUSH
36366: LD_VAR 0 10
36370: PPUSH
36371: LD_VAR 0 11
36375: PPUSH
36376: CALL_OW 546
36380: ST_TO_ADDR
// if hex [ 1 ] then
36381: LD_VAR 0 4
36385: PUSH
36386: LD_INT 1
36388: ARRAY
36389: IFFALSE 36393
// exit ;
36391: GO 36796
// height := hex [ 2 ] ;
36393: LD_ADDR_VAR 0 15
36397: PUSH
36398: LD_VAR 0 4
36402: PUSH
36403: LD_INT 2
36405: ARRAY
36406: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36407: LD_ADDR_VAR 0 14
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: LD_INT 3
36420: PUSH
36421: LD_INT 5
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// for i in tmp do
36430: LD_ADDR_VAR 0 8
36434: PUSH
36435: LD_VAR 0 14
36439: PUSH
36440: FOR_IN
36441: IFFALSE 36611
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36443: LD_ADDR_VAR 0 9
36447: PUSH
36448: LD_VAR 0 10
36452: PPUSH
36453: LD_VAR 0 8
36457: PPUSH
36458: LD_INT 5
36460: PPUSH
36461: CALL_OW 272
36465: PUSH
36466: LD_VAR 0 11
36470: PPUSH
36471: LD_VAR 0 8
36475: PPUSH
36476: LD_INT 5
36478: PPUSH
36479: CALL_OW 273
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36488: LD_VAR 0 9
36492: PUSH
36493: LD_INT 1
36495: ARRAY
36496: PPUSH
36497: LD_VAR 0 9
36501: PUSH
36502: LD_INT 2
36504: ARRAY
36505: PPUSH
36506: CALL_OW 488
36510: IFFALSE 36609
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36512: LD_ADDR_VAR 0 4
36516: PUSH
36517: LD_VAR 0 9
36521: PUSH
36522: LD_INT 1
36524: ARRAY
36525: PPUSH
36526: LD_VAR 0 9
36530: PUSH
36531: LD_INT 2
36533: ARRAY
36534: PPUSH
36535: CALL_OW 546
36539: ST_TO_ADDR
// if hex [ 1 ] then
36540: LD_VAR 0 4
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: IFFALSE 36552
// continue ;
36550: GO 36440
// h := hex [ 2 ] ;
36552: LD_ADDR_VAR 0 13
36556: PUSH
36557: LD_VAR 0 4
36561: PUSH
36562: LD_INT 2
36564: ARRAY
36565: ST_TO_ADDR
// if h + 7 < height then
36566: LD_VAR 0 13
36570: PUSH
36571: LD_INT 7
36573: PLUS
36574: PUSH
36575: LD_VAR 0 15
36579: LESS
36580: IFFALSE 36609
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36582: LD_ADDR_VAR 0 18
36586: PUSH
36587: LD_INT 7
36589: PUSH
36590: LD_INT 28
36592: PUSH
36593: LD_INT 45
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: PUSH
36601: LD_VAR 0 12
36605: ARRAY
36606: ST_TO_ADDR
// break ;
36607: GO 36611
// end ; end ; end ;
36609: GO 36440
36611: POP
36612: POP
// end ; if not weapon then
36613: LD_VAR 0 18
36617: NOT
36618: IFFALSE 36678
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36620: LD_ADDR_VAR 0 5
36624: PUSH
36625: LD_VAR 0 5
36629: PUSH
36630: LD_INT 11
36632: PUSH
36633: LD_INT 30
36635: PUSH
36636: LD_INT 49
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: DIFF
36644: ST_TO_ADDR
// if not list then
36645: LD_VAR 0 5
36649: NOT
36650: IFFALSE 36654
// exit ;
36652: GO 36796
// weapon := list [ rand ( 1 , list ) ] ;
36654: LD_ADDR_VAR 0 18
36658: PUSH
36659: LD_VAR 0 5
36663: PUSH
36664: LD_INT 1
36666: PPUSH
36667: LD_VAR 0 5
36671: PPUSH
36672: CALL_OW 12
36676: ARRAY
36677: ST_TO_ADDR
// end ; if weapon then
36678: LD_VAR 0 18
36682: IFFALSE 36796
// begin tmp := CostOfWeapon ( weapon ) ;
36684: LD_ADDR_VAR 0 14
36688: PUSH
36689: LD_VAR 0 18
36693: PPUSH
36694: CALL_OW 451
36698: ST_TO_ADDR
// j := GetBase ( tower ) ;
36699: LD_ADDR_VAR 0 9
36703: PUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 274
36713: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36714: LD_VAR 0 9
36718: PPUSH
36719: LD_INT 1
36721: PPUSH
36722: CALL_OW 275
36726: PUSH
36727: LD_VAR 0 14
36731: PUSH
36732: LD_INT 1
36734: ARRAY
36735: GREATEREQUAL
36736: PUSH
36737: LD_VAR 0 9
36741: PPUSH
36742: LD_INT 2
36744: PPUSH
36745: CALL_OW 275
36749: PUSH
36750: LD_VAR 0 14
36754: PUSH
36755: LD_INT 2
36757: ARRAY
36758: GREATEREQUAL
36759: AND
36760: PUSH
36761: LD_VAR 0 9
36765: PPUSH
36766: LD_INT 3
36768: PPUSH
36769: CALL_OW 275
36773: PUSH
36774: LD_VAR 0 14
36778: PUSH
36779: LD_INT 3
36781: ARRAY
36782: GREATEREQUAL
36783: AND
36784: IFFALSE 36796
// result := weapon ;
36786: LD_ADDR_VAR 0 3
36790: PUSH
36791: LD_VAR 0 18
36795: ST_TO_ADDR
// end ; end ;
36796: LD_VAR 0 3
36800: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36801: LD_INT 0
36803: PPUSH
36804: PPUSH
// result := true ;
36805: LD_ADDR_VAR 0 3
36809: PUSH
36810: LD_INT 1
36812: ST_TO_ADDR
// if array1 = array2 then
36813: LD_VAR 0 1
36817: PUSH
36818: LD_VAR 0 2
36822: EQUAL
36823: IFFALSE 36883
// begin for i = 1 to array1 do
36825: LD_ADDR_VAR 0 4
36829: PUSH
36830: DOUBLE
36831: LD_INT 1
36833: DEC
36834: ST_TO_ADDR
36835: LD_VAR 0 1
36839: PUSH
36840: FOR_TO
36841: IFFALSE 36879
// if array1 [ i ] <> array2 [ i ] then
36843: LD_VAR 0 1
36847: PUSH
36848: LD_VAR 0 4
36852: ARRAY
36853: PUSH
36854: LD_VAR 0 2
36858: PUSH
36859: LD_VAR 0 4
36863: ARRAY
36864: NONEQUAL
36865: IFFALSE 36877
// begin result := false ;
36867: LD_ADDR_VAR 0 3
36871: PUSH
36872: LD_INT 0
36874: ST_TO_ADDR
// break ;
36875: GO 36879
// end ;
36877: GO 36840
36879: POP
36880: POP
// end else
36881: GO 36891
// result := false ;
36883: LD_ADDR_VAR 0 3
36887: PUSH
36888: LD_INT 0
36890: ST_TO_ADDR
// end ;
36891: LD_VAR 0 3
36895: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36896: LD_INT 0
36898: PPUSH
36899: PPUSH
// if not array1 or not array2 then
36900: LD_VAR 0 1
36904: NOT
36905: PUSH
36906: LD_VAR 0 2
36910: NOT
36911: OR
36912: IFFALSE 36916
// exit ;
36914: GO 36980
// result := true ;
36916: LD_ADDR_VAR 0 3
36920: PUSH
36921: LD_INT 1
36923: ST_TO_ADDR
// for i = 1 to array1 do
36924: LD_ADDR_VAR 0 4
36928: PUSH
36929: DOUBLE
36930: LD_INT 1
36932: DEC
36933: ST_TO_ADDR
36934: LD_VAR 0 1
36938: PUSH
36939: FOR_TO
36940: IFFALSE 36978
// if array1 [ i ] <> array2 [ i ] then
36942: LD_VAR 0 1
36946: PUSH
36947: LD_VAR 0 4
36951: ARRAY
36952: PUSH
36953: LD_VAR 0 2
36957: PUSH
36958: LD_VAR 0 4
36962: ARRAY
36963: NONEQUAL
36964: IFFALSE 36976
// begin result := false ;
36966: LD_ADDR_VAR 0 3
36970: PUSH
36971: LD_INT 0
36973: ST_TO_ADDR
// break ;
36974: GO 36978
// end ;
36976: GO 36939
36978: POP
36979: POP
// end ;
36980: LD_VAR 0 3
36984: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36985: LD_INT 0
36987: PPUSH
36988: PPUSH
36989: PPUSH
// pom := GetBase ( fac ) ;
36990: LD_ADDR_VAR 0 5
36994: PUSH
36995: LD_VAR 0 1
36999: PPUSH
37000: CALL_OW 274
37004: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37005: LD_ADDR_VAR 0 4
37009: PUSH
37010: LD_VAR 0 2
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: PPUSH
37019: LD_VAR 0 2
37023: PUSH
37024: LD_INT 2
37026: ARRAY
37027: PPUSH
37028: LD_VAR 0 2
37032: PUSH
37033: LD_INT 3
37035: ARRAY
37036: PPUSH
37037: LD_VAR 0 2
37041: PUSH
37042: LD_INT 4
37044: ARRAY
37045: PPUSH
37046: CALL_OW 449
37050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37051: LD_ADDR_VAR 0 3
37055: PUSH
37056: LD_VAR 0 5
37060: PPUSH
37061: LD_INT 1
37063: PPUSH
37064: CALL_OW 275
37068: PUSH
37069: LD_VAR 0 4
37073: PUSH
37074: LD_INT 1
37076: ARRAY
37077: GREATEREQUAL
37078: PUSH
37079: LD_VAR 0 5
37083: PPUSH
37084: LD_INT 2
37086: PPUSH
37087: CALL_OW 275
37091: PUSH
37092: LD_VAR 0 4
37096: PUSH
37097: LD_INT 2
37099: ARRAY
37100: GREATEREQUAL
37101: AND
37102: PUSH
37103: LD_VAR 0 5
37107: PPUSH
37108: LD_INT 3
37110: PPUSH
37111: CALL_OW 275
37115: PUSH
37116: LD_VAR 0 4
37120: PUSH
37121: LD_INT 3
37123: ARRAY
37124: GREATEREQUAL
37125: AND
37126: ST_TO_ADDR
// end ;
37127: LD_VAR 0 3
37131: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37132: LD_INT 0
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
// pom := GetBase ( building ) ;
37138: LD_ADDR_VAR 0 3
37142: PUSH
37143: LD_VAR 0 1
37147: PPUSH
37148: CALL_OW 274
37152: ST_TO_ADDR
// if not pom then
37153: LD_VAR 0 3
37157: NOT
37158: IFFALSE 37162
// exit ;
37160: GO 37332
// btype := GetBType ( building ) ;
37162: LD_ADDR_VAR 0 5
37166: PUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL_OW 266
37176: ST_TO_ADDR
// if btype = b_armoury then
37177: LD_VAR 0 5
37181: PUSH
37182: LD_INT 4
37184: EQUAL
37185: IFFALSE 37195
// btype := b_barracks ;
37187: LD_ADDR_VAR 0 5
37191: PUSH
37192: LD_INT 5
37194: ST_TO_ADDR
// if btype = b_depot then
37195: LD_VAR 0 5
37199: PUSH
37200: LD_INT 0
37202: EQUAL
37203: IFFALSE 37213
// btype := b_warehouse ;
37205: LD_ADDR_VAR 0 5
37209: PUSH
37210: LD_INT 1
37212: ST_TO_ADDR
// if btype = b_workshop then
37213: LD_VAR 0 5
37217: PUSH
37218: LD_INT 2
37220: EQUAL
37221: IFFALSE 37231
// btype := b_factory ;
37223: LD_ADDR_VAR 0 5
37227: PUSH
37228: LD_INT 3
37230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: LD_VAR 0 5
37240: PPUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: CALL_OW 248
37250: PPUSH
37251: CALL_OW 450
37255: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37256: LD_ADDR_VAR 0 2
37260: PUSH
37261: LD_VAR 0 3
37265: PPUSH
37266: LD_INT 1
37268: PPUSH
37269: CALL_OW 275
37273: PUSH
37274: LD_VAR 0 4
37278: PUSH
37279: LD_INT 1
37281: ARRAY
37282: GREATEREQUAL
37283: PUSH
37284: LD_VAR 0 3
37288: PPUSH
37289: LD_INT 2
37291: PPUSH
37292: CALL_OW 275
37296: PUSH
37297: LD_VAR 0 4
37301: PUSH
37302: LD_INT 2
37304: ARRAY
37305: GREATEREQUAL
37306: AND
37307: PUSH
37308: LD_VAR 0 3
37312: PPUSH
37313: LD_INT 3
37315: PPUSH
37316: CALL_OW 275
37320: PUSH
37321: LD_VAR 0 4
37325: PUSH
37326: LD_INT 3
37328: ARRAY
37329: GREATEREQUAL
37330: AND
37331: ST_TO_ADDR
// end ;
37332: LD_VAR 0 2
37336: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37337: LD_INT 0
37339: PPUSH
37340: PPUSH
37341: PPUSH
// pom := GetBase ( building ) ;
37342: LD_ADDR_VAR 0 4
37346: PUSH
37347: LD_VAR 0 1
37351: PPUSH
37352: CALL_OW 274
37356: ST_TO_ADDR
// if not pom then
37357: LD_VAR 0 4
37361: NOT
37362: IFFALSE 37366
// exit ;
37364: GO 37467
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37366: LD_ADDR_VAR 0 5
37370: PUSH
37371: LD_VAR 0 2
37375: PPUSH
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 248
37385: PPUSH
37386: CALL_OW 450
37390: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37391: LD_ADDR_VAR 0 3
37395: PUSH
37396: LD_VAR 0 4
37400: PPUSH
37401: LD_INT 1
37403: PPUSH
37404: CALL_OW 275
37408: PUSH
37409: LD_VAR 0 5
37413: PUSH
37414: LD_INT 1
37416: ARRAY
37417: GREATEREQUAL
37418: PUSH
37419: LD_VAR 0 4
37423: PPUSH
37424: LD_INT 2
37426: PPUSH
37427: CALL_OW 275
37431: PUSH
37432: LD_VAR 0 5
37436: PUSH
37437: LD_INT 2
37439: ARRAY
37440: GREATEREQUAL
37441: AND
37442: PUSH
37443: LD_VAR 0 4
37447: PPUSH
37448: LD_INT 3
37450: PPUSH
37451: CALL_OW 275
37455: PUSH
37456: LD_VAR 0 5
37460: PUSH
37461: LD_INT 3
37463: ARRAY
37464: GREATEREQUAL
37465: AND
37466: ST_TO_ADDR
// end ;
37467: LD_VAR 0 3
37471: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37472: LD_INT 0
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
// result := false ;
37485: LD_ADDR_VAR 0 8
37489: PUSH
37490: LD_INT 0
37492: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37493: LD_VAR 0 5
37497: NOT
37498: PUSH
37499: LD_VAR 0 1
37503: NOT
37504: OR
37505: PUSH
37506: LD_VAR 0 2
37510: NOT
37511: OR
37512: PUSH
37513: LD_VAR 0 3
37517: NOT
37518: OR
37519: IFFALSE 37523
// exit ;
37521: GO 38337
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37523: LD_ADDR_VAR 0 14
37527: PUSH
37528: LD_VAR 0 1
37532: PPUSH
37533: LD_VAR 0 2
37537: PPUSH
37538: LD_VAR 0 3
37542: PPUSH
37543: LD_VAR 0 4
37547: PPUSH
37548: LD_VAR 0 5
37552: PUSH
37553: LD_INT 1
37555: ARRAY
37556: PPUSH
37557: CALL_OW 248
37561: PPUSH
37562: LD_INT 0
37564: PPUSH
37565: CALL 39574 0 6
37569: ST_TO_ADDR
// if not hexes then
37570: LD_VAR 0 14
37574: NOT
37575: IFFALSE 37579
// exit ;
37577: GO 38337
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37579: LD_ADDR_VAR 0 17
37583: PUSH
37584: LD_VAR 0 5
37588: PPUSH
37589: LD_INT 22
37591: PUSH
37592: LD_VAR 0 13
37596: PPUSH
37597: CALL_OW 255
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: LD_INT 30
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 30
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PPUSH
37638: CALL_OW 72
37642: ST_TO_ADDR
// for i = 1 to hexes do
37643: LD_ADDR_VAR 0 9
37647: PUSH
37648: DOUBLE
37649: LD_INT 1
37651: DEC
37652: ST_TO_ADDR
37653: LD_VAR 0 14
37657: PUSH
37658: FOR_TO
37659: IFFALSE 38335
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37661: LD_ADDR_VAR 0 13
37665: PUSH
37666: LD_VAR 0 14
37670: PUSH
37671: LD_VAR 0 9
37675: ARRAY
37676: PUSH
37677: LD_INT 1
37679: ARRAY
37680: PPUSH
37681: LD_VAR 0 14
37685: PUSH
37686: LD_VAR 0 9
37690: ARRAY
37691: PUSH
37692: LD_INT 2
37694: ARRAY
37695: PPUSH
37696: CALL_OW 428
37700: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37701: LD_VAR 0 14
37705: PUSH
37706: LD_VAR 0 9
37710: ARRAY
37711: PUSH
37712: LD_INT 1
37714: ARRAY
37715: PPUSH
37716: LD_VAR 0 14
37720: PUSH
37721: LD_VAR 0 9
37725: ARRAY
37726: PUSH
37727: LD_INT 2
37729: ARRAY
37730: PPUSH
37731: CALL_OW 351
37735: PUSH
37736: LD_VAR 0 14
37740: PUSH
37741: LD_VAR 0 9
37745: ARRAY
37746: PUSH
37747: LD_INT 1
37749: ARRAY
37750: PPUSH
37751: LD_VAR 0 14
37755: PUSH
37756: LD_VAR 0 9
37760: ARRAY
37761: PUSH
37762: LD_INT 2
37764: ARRAY
37765: PPUSH
37766: CALL_OW 488
37770: NOT
37771: OR
37772: PUSH
37773: LD_VAR 0 13
37777: PPUSH
37778: CALL_OW 247
37782: PUSH
37783: LD_INT 3
37785: EQUAL
37786: OR
37787: IFFALSE 37793
// exit ;
37789: POP
37790: POP
37791: GO 38337
// if not tmp then
37793: LD_VAR 0 13
37797: NOT
37798: IFFALSE 37802
// continue ;
37800: GO 37658
// result := true ;
37802: LD_ADDR_VAR 0 8
37806: PUSH
37807: LD_INT 1
37809: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37810: LD_VAR 0 6
37814: PUSH
37815: LD_VAR 0 13
37819: PPUSH
37820: CALL_OW 247
37824: PUSH
37825: LD_INT 2
37827: EQUAL
37828: AND
37829: PUSH
37830: LD_VAR 0 13
37834: PPUSH
37835: CALL_OW 263
37839: PUSH
37840: LD_INT 1
37842: EQUAL
37843: AND
37844: IFFALSE 38008
// begin if IsDrivenBy ( tmp ) then
37846: LD_VAR 0 13
37850: PPUSH
37851: CALL_OW 311
37855: IFFALSE 37859
// continue ;
37857: GO 37658
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37859: LD_VAR 0 6
37863: PPUSH
37864: LD_INT 3
37866: PUSH
37867: LD_INT 60
37869: PUSH
37870: EMPTY
37871: LIST
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: LD_INT 55
37882: PUSH
37883: EMPTY
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PPUSH
37894: CALL_OW 72
37898: IFFALSE 38006
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37900: LD_ADDR_VAR 0 18
37904: PUSH
37905: LD_VAR 0 6
37909: PPUSH
37910: LD_INT 3
37912: PUSH
37913: LD_INT 60
37915: PUSH
37916: EMPTY
37917: LIST
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: LD_INT 55
37928: PUSH
37929: EMPTY
37930: LIST
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PPUSH
37940: CALL_OW 72
37944: PUSH
37945: LD_INT 1
37947: ARRAY
37948: ST_TO_ADDR
// if IsInUnit ( driver ) then
37949: LD_VAR 0 18
37953: PPUSH
37954: CALL_OW 310
37958: IFFALSE 37969
// ComExit ( driver ) ;
37960: LD_VAR 0 18
37964: PPUSH
37965: CALL 62702 0 1
// AddComEnterUnit ( driver , tmp ) ;
37969: LD_VAR 0 18
37973: PPUSH
37974: LD_VAR 0 13
37978: PPUSH
37979: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37983: LD_VAR 0 18
37987: PPUSH
37988: LD_VAR 0 7
37992: PPUSH
37993: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37997: LD_VAR 0 18
38001: PPUSH
38002: CALL_OW 181
// end ; continue ;
38006: GO 37658
// end ; if not cleaners or not tmp in cleaners then
38008: LD_VAR 0 6
38012: NOT
38013: PUSH
38014: LD_VAR 0 13
38018: PUSH
38019: LD_VAR 0 6
38023: IN
38024: NOT
38025: OR
38026: IFFALSE 38333
// begin if dep then
38028: LD_VAR 0 17
38032: IFFALSE 38168
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38034: LD_ADDR_VAR 0 16
38038: PUSH
38039: LD_VAR 0 17
38043: PUSH
38044: LD_INT 1
38046: ARRAY
38047: PPUSH
38048: CALL_OW 250
38052: PPUSH
38053: LD_VAR 0 17
38057: PUSH
38058: LD_INT 1
38060: ARRAY
38061: PPUSH
38062: CALL_OW 254
38066: PPUSH
38067: LD_INT 5
38069: PPUSH
38070: CALL_OW 272
38074: PUSH
38075: LD_VAR 0 17
38079: PUSH
38080: LD_INT 1
38082: ARRAY
38083: PPUSH
38084: CALL_OW 251
38088: PPUSH
38089: LD_VAR 0 17
38093: PUSH
38094: LD_INT 1
38096: ARRAY
38097: PPUSH
38098: CALL_OW 254
38102: PPUSH
38103: LD_INT 5
38105: PPUSH
38106: CALL_OW 273
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38115: LD_VAR 0 16
38119: PUSH
38120: LD_INT 1
38122: ARRAY
38123: PPUSH
38124: LD_VAR 0 16
38128: PUSH
38129: LD_INT 2
38131: ARRAY
38132: PPUSH
38133: CALL_OW 488
38137: IFFALSE 38168
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38139: LD_VAR 0 13
38143: PPUSH
38144: LD_VAR 0 16
38148: PUSH
38149: LD_INT 1
38151: ARRAY
38152: PPUSH
38153: LD_VAR 0 16
38157: PUSH
38158: LD_INT 2
38160: ARRAY
38161: PPUSH
38162: CALL_OW 111
// continue ;
38166: GO 37658
// end ; end ; r := GetDir ( tmp ) ;
38168: LD_ADDR_VAR 0 15
38172: PUSH
38173: LD_VAR 0 13
38177: PPUSH
38178: CALL_OW 254
38182: ST_TO_ADDR
// if r = 5 then
38183: LD_VAR 0 15
38187: PUSH
38188: LD_INT 5
38190: EQUAL
38191: IFFALSE 38201
// r := 0 ;
38193: LD_ADDR_VAR 0 15
38197: PUSH
38198: LD_INT 0
38200: ST_TO_ADDR
// for j = r to 5 do
38201: LD_ADDR_VAR 0 10
38205: PUSH
38206: DOUBLE
38207: LD_VAR 0 15
38211: DEC
38212: ST_TO_ADDR
38213: LD_INT 5
38215: PUSH
38216: FOR_TO
38217: IFFALSE 38331
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38219: LD_ADDR_VAR 0 11
38223: PUSH
38224: LD_VAR 0 13
38228: PPUSH
38229: CALL_OW 250
38233: PPUSH
38234: LD_VAR 0 10
38238: PPUSH
38239: LD_INT 2
38241: PPUSH
38242: CALL_OW 272
38246: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38247: LD_ADDR_VAR 0 12
38251: PUSH
38252: LD_VAR 0 13
38256: PPUSH
38257: CALL_OW 251
38261: PPUSH
38262: LD_VAR 0 10
38266: PPUSH
38267: LD_INT 2
38269: PPUSH
38270: CALL_OW 273
38274: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38275: LD_VAR 0 11
38279: PPUSH
38280: LD_VAR 0 12
38284: PPUSH
38285: CALL_OW 488
38289: PUSH
38290: LD_VAR 0 11
38294: PPUSH
38295: LD_VAR 0 12
38299: PPUSH
38300: CALL_OW 428
38304: NOT
38305: AND
38306: IFFALSE 38329
// begin ComMoveXY ( tmp , _x , _y ) ;
38308: LD_VAR 0 13
38312: PPUSH
38313: LD_VAR 0 11
38317: PPUSH
38318: LD_VAR 0 12
38322: PPUSH
38323: CALL_OW 111
// break ;
38327: GO 38331
// end ; end ;
38329: GO 38216
38331: POP
38332: POP
// end ; end ;
38333: GO 37658
38335: POP
38336: POP
// end ;
38337: LD_VAR 0 8
38341: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38342: LD_INT 0
38344: PPUSH
// result := true ;
38345: LD_ADDR_VAR 0 3
38349: PUSH
38350: LD_INT 1
38352: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38353: LD_VAR 0 2
38357: PUSH
38358: LD_INT 24
38360: DOUBLE
38361: EQUAL
38362: IFTRUE 38372
38364: LD_INT 33
38366: DOUBLE
38367: EQUAL
38368: IFTRUE 38372
38370: GO 38397
38372: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38373: LD_ADDR_VAR 0 3
38377: PUSH
38378: LD_INT 32
38380: PPUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL_OW 321
38390: PUSH
38391: LD_INT 2
38393: EQUAL
38394: ST_TO_ADDR
38395: GO 38717
38397: LD_INT 20
38399: DOUBLE
38400: EQUAL
38401: IFTRUE 38405
38403: GO 38430
38405: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_INT 6
38413: PPUSH
38414: LD_VAR 0 1
38418: PPUSH
38419: CALL_OW 321
38423: PUSH
38424: LD_INT 2
38426: EQUAL
38427: ST_TO_ADDR
38428: GO 38717
38430: LD_INT 22
38432: DOUBLE
38433: EQUAL
38434: IFTRUE 38444
38436: LD_INT 36
38438: DOUBLE
38439: EQUAL
38440: IFTRUE 38444
38442: GO 38469
38444: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38445: LD_ADDR_VAR 0 3
38449: PUSH
38450: LD_INT 15
38452: PPUSH
38453: LD_VAR 0 1
38457: PPUSH
38458: CALL_OW 321
38462: PUSH
38463: LD_INT 2
38465: EQUAL
38466: ST_TO_ADDR
38467: GO 38717
38469: LD_INT 30
38471: DOUBLE
38472: EQUAL
38473: IFTRUE 38477
38475: GO 38502
38477: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38478: LD_ADDR_VAR 0 3
38482: PUSH
38483: LD_INT 20
38485: PPUSH
38486: LD_VAR 0 1
38490: PPUSH
38491: CALL_OW 321
38495: PUSH
38496: LD_INT 2
38498: EQUAL
38499: ST_TO_ADDR
38500: GO 38717
38502: LD_INT 28
38504: DOUBLE
38505: EQUAL
38506: IFTRUE 38516
38508: LD_INT 21
38510: DOUBLE
38511: EQUAL
38512: IFTRUE 38516
38514: GO 38541
38516: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38517: LD_ADDR_VAR 0 3
38521: PUSH
38522: LD_INT 21
38524: PPUSH
38525: LD_VAR 0 1
38529: PPUSH
38530: CALL_OW 321
38534: PUSH
38535: LD_INT 2
38537: EQUAL
38538: ST_TO_ADDR
38539: GO 38717
38541: LD_INT 16
38543: DOUBLE
38544: EQUAL
38545: IFTRUE 38549
38547: GO 38576
38549: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38550: LD_ADDR_VAR 0 3
38554: PUSH
38555: LD_EXP 109
38559: PPUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL_OW 321
38569: PUSH
38570: LD_INT 2
38572: EQUAL
38573: ST_TO_ADDR
38574: GO 38717
38576: LD_INT 19
38578: DOUBLE
38579: EQUAL
38580: IFTRUE 38590
38582: LD_INT 23
38584: DOUBLE
38585: EQUAL
38586: IFTRUE 38590
38588: GO 38617
38590: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38591: LD_ADDR_VAR 0 3
38595: PUSH
38596: LD_EXP 108
38600: PPUSH
38601: LD_VAR 0 1
38605: PPUSH
38606: CALL_OW 321
38610: PUSH
38611: LD_INT 2
38613: EQUAL
38614: ST_TO_ADDR
38615: GO 38717
38617: LD_INT 17
38619: DOUBLE
38620: EQUAL
38621: IFTRUE 38625
38623: GO 38650
38625: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38626: LD_ADDR_VAR 0 3
38630: PUSH
38631: LD_INT 39
38633: PPUSH
38634: LD_VAR 0 1
38638: PPUSH
38639: CALL_OW 321
38643: PUSH
38644: LD_INT 2
38646: EQUAL
38647: ST_TO_ADDR
38648: GO 38717
38650: LD_INT 18
38652: DOUBLE
38653: EQUAL
38654: IFTRUE 38658
38656: GO 38683
38658: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38659: LD_ADDR_VAR 0 3
38663: PUSH
38664: LD_INT 40
38666: PPUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 321
38676: PUSH
38677: LD_INT 2
38679: EQUAL
38680: ST_TO_ADDR
38681: GO 38717
38683: LD_INT 27
38685: DOUBLE
38686: EQUAL
38687: IFTRUE 38691
38689: GO 38716
38691: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38692: LD_ADDR_VAR 0 3
38696: PUSH
38697: LD_INT 35
38699: PPUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: CALL_OW 321
38709: PUSH
38710: LD_INT 2
38712: EQUAL
38713: ST_TO_ADDR
38714: GO 38717
38716: POP
// end ;
38717: LD_VAR 0 3
38721: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38722: LD_INT 0
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
38732: PPUSH
38733: PPUSH
38734: PPUSH
// result := false ;
38735: LD_ADDR_VAR 0 6
38739: PUSH
38740: LD_INT 0
38742: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38743: LD_VAR 0 1
38747: NOT
38748: PUSH
38749: LD_VAR 0 1
38753: PPUSH
38754: CALL_OW 266
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: IN
38769: NOT
38770: OR
38771: PUSH
38772: LD_VAR 0 2
38776: NOT
38777: OR
38778: PUSH
38779: LD_VAR 0 5
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: LD_INT 4
38798: PUSH
38799: LD_INT 5
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: IN
38810: NOT
38811: OR
38812: PUSH
38813: LD_VAR 0 3
38817: PPUSH
38818: LD_VAR 0 4
38822: PPUSH
38823: CALL_OW 488
38827: NOT
38828: OR
38829: IFFALSE 38833
// exit ;
38831: GO 39569
// side := GetSide ( depot ) ;
38833: LD_ADDR_VAR 0 9
38837: PUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 255
38847: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38848: LD_VAR 0 9
38852: PPUSH
38853: LD_VAR 0 2
38857: PPUSH
38858: CALL 38342 0 2
38862: NOT
38863: IFFALSE 38867
// exit ;
38865: GO 39569
// pom := GetBase ( depot ) ;
38867: LD_ADDR_VAR 0 10
38871: PUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: CALL_OW 274
38881: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38882: LD_ADDR_VAR 0 11
38886: PUSH
38887: LD_VAR 0 2
38891: PPUSH
38892: LD_VAR 0 1
38896: PPUSH
38897: CALL_OW 248
38901: PPUSH
38902: CALL_OW 450
38906: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38907: LD_VAR 0 10
38911: PPUSH
38912: LD_INT 1
38914: PPUSH
38915: CALL_OW 275
38919: PUSH
38920: LD_VAR 0 11
38924: PUSH
38925: LD_INT 1
38927: ARRAY
38928: GREATEREQUAL
38929: PUSH
38930: LD_VAR 0 10
38934: PPUSH
38935: LD_INT 2
38937: PPUSH
38938: CALL_OW 275
38942: PUSH
38943: LD_VAR 0 11
38947: PUSH
38948: LD_INT 2
38950: ARRAY
38951: GREATEREQUAL
38952: AND
38953: PUSH
38954: LD_VAR 0 10
38958: PPUSH
38959: LD_INT 3
38961: PPUSH
38962: CALL_OW 275
38966: PUSH
38967: LD_VAR 0 11
38971: PUSH
38972: LD_INT 3
38974: ARRAY
38975: GREATEREQUAL
38976: AND
38977: NOT
38978: IFFALSE 38982
// exit ;
38980: GO 39569
// if GetBType ( depot ) = b_depot then
38982: LD_VAR 0 1
38986: PPUSH
38987: CALL_OW 266
38991: PUSH
38992: LD_INT 0
38994: EQUAL
38995: IFFALSE 39007
// dist := 28 else
38997: LD_ADDR_VAR 0 14
39001: PUSH
39002: LD_INT 28
39004: ST_TO_ADDR
39005: GO 39015
// dist := 36 ;
39007: LD_ADDR_VAR 0 14
39011: PUSH
39012: LD_INT 36
39014: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39015: LD_VAR 0 1
39019: PPUSH
39020: LD_VAR 0 3
39024: PPUSH
39025: LD_VAR 0 4
39029: PPUSH
39030: CALL_OW 297
39034: PUSH
39035: LD_VAR 0 14
39039: GREATER
39040: IFFALSE 39044
// exit ;
39042: GO 39569
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39044: LD_ADDR_VAR 0 12
39048: PUSH
39049: LD_VAR 0 2
39053: PPUSH
39054: LD_VAR 0 3
39058: PPUSH
39059: LD_VAR 0 4
39063: PPUSH
39064: LD_VAR 0 5
39068: PPUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: CALL_OW 248
39078: PPUSH
39079: LD_INT 0
39081: PPUSH
39082: CALL 39574 0 6
39086: ST_TO_ADDR
// if not hexes then
39087: LD_VAR 0 12
39091: NOT
39092: IFFALSE 39096
// exit ;
39094: GO 39569
// hex := GetHexInfo ( x , y ) ;
39096: LD_ADDR_VAR 0 15
39100: PUSH
39101: LD_VAR 0 3
39105: PPUSH
39106: LD_VAR 0 4
39110: PPUSH
39111: CALL_OW 546
39115: ST_TO_ADDR
// if hex [ 1 ] then
39116: LD_VAR 0 15
39120: PUSH
39121: LD_INT 1
39123: ARRAY
39124: IFFALSE 39128
// exit ;
39126: GO 39569
// height := hex [ 2 ] ;
39128: LD_ADDR_VAR 0 13
39132: PUSH
39133: LD_VAR 0 15
39137: PUSH
39138: LD_INT 2
39140: ARRAY
39141: ST_TO_ADDR
// for i = 1 to hexes do
39142: LD_ADDR_VAR 0 7
39146: PUSH
39147: DOUBLE
39148: LD_INT 1
39150: DEC
39151: ST_TO_ADDR
39152: LD_VAR 0 12
39156: PUSH
39157: FOR_TO
39158: IFFALSE 39488
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39160: LD_VAR 0 12
39164: PUSH
39165: LD_VAR 0 7
39169: ARRAY
39170: PUSH
39171: LD_INT 1
39173: ARRAY
39174: PPUSH
39175: LD_VAR 0 12
39179: PUSH
39180: LD_VAR 0 7
39184: ARRAY
39185: PUSH
39186: LD_INT 2
39188: ARRAY
39189: PPUSH
39190: CALL_OW 488
39194: NOT
39195: PUSH
39196: LD_VAR 0 12
39200: PUSH
39201: LD_VAR 0 7
39205: ARRAY
39206: PUSH
39207: LD_INT 1
39209: ARRAY
39210: PPUSH
39211: LD_VAR 0 12
39215: PUSH
39216: LD_VAR 0 7
39220: ARRAY
39221: PUSH
39222: LD_INT 2
39224: ARRAY
39225: PPUSH
39226: CALL_OW 428
39230: PUSH
39231: LD_INT 0
39233: GREATER
39234: OR
39235: PUSH
39236: LD_VAR 0 12
39240: PUSH
39241: LD_VAR 0 7
39245: ARRAY
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: PPUSH
39251: LD_VAR 0 12
39255: PUSH
39256: LD_VAR 0 7
39260: ARRAY
39261: PUSH
39262: LD_INT 2
39264: ARRAY
39265: PPUSH
39266: CALL_OW 351
39270: OR
39271: IFFALSE 39277
// exit ;
39273: POP
39274: POP
39275: GO 39569
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39277: LD_ADDR_VAR 0 8
39281: PUSH
39282: LD_VAR 0 12
39286: PUSH
39287: LD_VAR 0 7
39291: ARRAY
39292: PUSH
39293: LD_INT 1
39295: ARRAY
39296: PPUSH
39297: LD_VAR 0 12
39301: PUSH
39302: LD_VAR 0 7
39306: ARRAY
39307: PUSH
39308: LD_INT 2
39310: ARRAY
39311: PPUSH
39312: CALL_OW 546
39316: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39317: LD_VAR 0 8
39321: PUSH
39322: LD_INT 1
39324: ARRAY
39325: PUSH
39326: LD_VAR 0 8
39330: PUSH
39331: LD_INT 2
39333: ARRAY
39334: PUSH
39335: LD_VAR 0 13
39339: PUSH
39340: LD_INT 2
39342: PLUS
39343: GREATER
39344: OR
39345: PUSH
39346: LD_VAR 0 8
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PUSH
39355: LD_VAR 0 13
39359: PUSH
39360: LD_INT 2
39362: MINUS
39363: LESS
39364: OR
39365: PUSH
39366: LD_VAR 0 8
39370: PUSH
39371: LD_INT 3
39373: ARRAY
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 8
39380: PUSH
39381: LD_INT 9
39383: PUSH
39384: LD_INT 10
39386: PUSH
39387: LD_INT 11
39389: PUSH
39390: LD_INT 12
39392: PUSH
39393: LD_INT 13
39395: PUSH
39396: LD_INT 16
39398: PUSH
39399: LD_INT 17
39401: PUSH
39402: LD_INT 18
39404: PUSH
39405: LD_INT 19
39407: PUSH
39408: LD_INT 20
39410: PUSH
39411: LD_INT 21
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: IN
39429: NOT
39430: OR
39431: PUSH
39432: LD_VAR 0 8
39436: PUSH
39437: LD_INT 5
39439: ARRAY
39440: NOT
39441: OR
39442: PUSH
39443: LD_VAR 0 8
39447: PUSH
39448: LD_INT 6
39450: ARRAY
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: LD_INT 7
39460: PUSH
39461: LD_INT 9
39463: PUSH
39464: LD_INT 10
39466: PUSH
39467: LD_INT 11
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: IN
39478: NOT
39479: OR
39480: IFFALSE 39486
// exit ;
39482: POP
39483: POP
39484: GO 39569
// end ;
39486: GO 39157
39488: POP
39489: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39490: LD_VAR 0 9
39494: PPUSH
39495: LD_VAR 0 3
39499: PPUSH
39500: LD_VAR 0 4
39504: PPUSH
39505: LD_INT 20
39507: PPUSH
39508: CALL 31515 0 4
39512: PUSH
39513: LD_INT 4
39515: ARRAY
39516: IFFALSE 39520
// exit ;
39518: GO 39569
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39520: LD_VAR 0 2
39524: PUSH
39525: LD_INT 29
39527: PUSH
39528: LD_INT 30
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: IN
39535: PUSH
39536: LD_VAR 0 3
39540: PPUSH
39541: LD_VAR 0 4
39545: PPUSH
39546: LD_VAR 0 9
39550: PPUSH
39551: CALL_OW 440
39555: NOT
39556: AND
39557: IFFALSE 39561
// exit ;
39559: GO 39569
// result := true ;
39561: LD_ADDR_VAR 0 6
39565: PUSH
39566: LD_INT 1
39568: ST_TO_ADDR
// end ;
39569: LD_VAR 0 6
39573: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39574: LD_INT 0
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
39588: PPUSH
39589: PPUSH
39590: PPUSH
39591: PPUSH
39592: PPUSH
39593: PPUSH
39594: PPUSH
39595: PPUSH
39596: PPUSH
39597: PPUSH
39598: PPUSH
39599: PPUSH
39600: PPUSH
39601: PPUSH
39602: PPUSH
39603: PPUSH
39604: PPUSH
39605: PPUSH
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
39616: PPUSH
39617: PPUSH
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
// result = [ ] ;
39634: LD_ADDR_VAR 0 7
39638: PUSH
39639: EMPTY
39640: ST_TO_ADDR
// temp_list = [ ] ;
39641: LD_ADDR_VAR 0 9
39645: PUSH
39646: EMPTY
39647: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39648: LD_VAR 0 4
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 4
39667: PUSH
39668: LD_INT 5
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: IN
39679: NOT
39680: PUSH
39681: LD_VAR 0 1
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: IN
39696: PUSH
39697: LD_VAR 0 5
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 3
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: IN
39716: NOT
39717: AND
39718: OR
39719: IFFALSE 39723
// exit ;
39721: GO 58114
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39723: LD_VAR 0 1
39727: PUSH
39728: LD_INT 6
39730: PUSH
39731: LD_INT 7
39733: PUSH
39734: LD_INT 8
39736: PUSH
39737: LD_INT 13
39739: PUSH
39740: LD_INT 12
39742: PUSH
39743: LD_INT 15
39745: PUSH
39746: LD_INT 11
39748: PUSH
39749: LD_INT 14
39751: PUSH
39752: LD_INT 10
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: IN
39766: IFFALSE 39776
// btype = b_lab ;
39768: LD_ADDR_VAR 0 1
39772: PUSH
39773: LD_INT 6
39775: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39776: LD_VAR 0 6
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: IN
39795: NOT
39796: PUSH
39797: LD_VAR 0 1
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: LD_INT 6
39816: PUSH
39817: LD_INT 36
39819: PUSH
39820: LD_INT 4
39822: PUSH
39823: LD_INT 5
39825: PUSH
39826: LD_INT 31
39828: PUSH
39829: LD_INT 32
39831: PUSH
39832: LD_INT 33
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: IN
39848: NOT
39849: PUSH
39850: LD_VAR 0 6
39854: PUSH
39855: LD_INT 1
39857: EQUAL
39858: AND
39859: OR
39860: PUSH
39861: LD_VAR 0 1
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 3
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: IN
39876: NOT
39877: PUSH
39878: LD_VAR 0 6
39882: PUSH
39883: LD_INT 2
39885: EQUAL
39886: AND
39887: OR
39888: IFFALSE 39898
// mode = 0 ;
39890: LD_ADDR_VAR 0 6
39894: PUSH
39895: LD_INT 0
39897: ST_TO_ADDR
// case mode of 0 :
39898: LD_VAR 0 6
39902: PUSH
39903: LD_INT 0
39905: DOUBLE
39906: EQUAL
39907: IFTRUE 39911
39909: GO 51364
39911: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39912: LD_ADDR_VAR 0 11
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 2
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 3
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40105: LD_ADDR_VAR 0 12
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 3
40262: NEG
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 3
40273: NEG
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40301: LD_ADDR_VAR 0 13
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: LD_INT 3
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: NEG
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 3
40472: NEG
40473: PUSH
40474: LD_INT 3
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40500: LD_ADDR_VAR 0 14
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 2
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 2
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 3
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40696: LD_ADDR_VAR 0 15
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 3
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40889: LD_ADDR_VAR 0 16
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 3
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 3
41046: PUSH
41047: LD_INT 3
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 3
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41082: LD_ADDR_VAR 0 17
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: NEG
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41312: LD_ADDR_VAR 0 18
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: LD_INT 2
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41542: LD_ADDR_VAR 0 19
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41772: LD_ADDR_VAR 0 20
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42002: LD_ADDR_VAR 0 21
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42232: LD_ADDR_VAR 0 22
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42462: LD_ADDR_VAR 0 23
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 3
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 3
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42742: LD_ADDR_VAR 0 24
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 1
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 3
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43018: LD_ADDR_VAR 0 25
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 2
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: NEG
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: LD_INT 3
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 3
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43292: LD_ADDR_VAR 0 26
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43568: LD_ADDR_VAR 0 27
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43848: LD_ADDR_VAR 0 28
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: LD_INT 3
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 3
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 3
44083: NEG
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44130: LD_ADDR_VAR 0 29
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 3
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 3
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44409: LD_ADDR_VAR 0 30
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 3
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 3
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44687: LD_ADDR_VAR 0 31
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 3
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 3
44930: NEG
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44965: LD_ADDR_VAR 0 32
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 3
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 3
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 3
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45243: LD_ADDR_VAR 0 33
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 3
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45522: LD_ADDR_VAR 0 34
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 3
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45802: LD_ADDR_VAR 0 35
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45914: LD_ADDR_VAR 0 36
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46026: LD_ADDR_VAR 0 37
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46138: LD_ADDR_VAR 0 38
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46250: LD_ADDR_VAR 0 39
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46362: LD_ADDR_VAR 0 40
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46474: LD_ADDR_VAR 0 41
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 3
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 3
46717: PUSH
46718: LD_INT 3
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 3
46748: NEG
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 3
46771: NEG
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 3
46783: NEG
46784: PUSH
46785: LD_INT 3
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46824: LD_ADDR_VAR 0 42
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: LD_INT 3
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 3
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 3
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 3
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 3
47121: NEG
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 3
47133: NEG
47134: PUSH
47135: LD_INT 3
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47174: LD_ADDR_VAR 0 43
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 3
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 3
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: NEG
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47522: LD_ADDR_VAR 0 44
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 3
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 3
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: NEG
47832: PUSH
47833: LD_INT 3
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47872: LD_ADDR_VAR 0 45
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: LD_INT 3
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: LD_INT 3
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 3
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 3
48169: NEG
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: LD_INT 3
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48222: LD_ADDR_VAR 0 46
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 3
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 3
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 3
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 3
48518: NEG
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48570: LD_ADDR_VAR 0 47
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48721: LD_ADDR_VAR 0 48
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48868: LD_ADDR_VAR 0 49
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49012: LD_ADDR_VAR 0 50
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49156: LD_ADDR_VAR 0 51
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49303: LD_ADDR_VAR 0 52
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49454: LD_ADDR_VAR 0 53
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49684: LD_ADDR_VAR 0 54
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49914: LD_ADDR_VAR 0 55
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50144: LD_ADDR_VAR 0 56
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50374: LD_ADDR_VAR 0 57
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50604: LD_ADDR_VAR 0 58
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50834: LD_ADDR_VAR 0 59
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50922: LD_ADDR_VAR 0 60
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51010: LD_ADDR_VAR 0 61
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51098: LD_ADDR_VAR 0 62
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51186: LD_ADDR_VAR 0 63
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51274: LD_ADDR_VAR 0 64
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: ST_TO_ADDR
// end ; 1 :
51362: GO 57259
51364: LD_INT 1
51366: DOUBLE
51367: EQUAL
51368: IFTRUE 51372
51370: GO 53995
51372: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51373: LD_ADDR_VAR 0 11
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 3
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51417: LD_ADDR_VAR 0 12
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51458: LD_ADDR_VAR 0 13
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 3
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 3
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51498: LD_ADDR_VAR 0 14
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51539: LD_ADDR_VAR 0 15
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: LIST
51582: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51583: LD_ADDR_VAR 0 16
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51629: LD_ADDR_VAR 0 17
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51673: LD_ADDR_VAR 0 18
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51714: LD_ADDR_VAR 0 19
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: LD_INT 3
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51754: LD_ADDR_VAR 0 20
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51795: LD_ADDR_VAR 0 21
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51839: LD_ADDR_VAR 0 22
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51885: LD_ADDR_VAR 0 23
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 4
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51929: LD_ADDR_VAR 0 24
51933: PUSH
51934: LD_INT 3
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 3
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 4
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51970: LD_ADDR_VAR 0 25
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 4
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: LD_INT 4
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52010: LD_ADDR_VAR 0 26
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 4
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52051: LD_ADDR_VAR 0 27
52055: PUSH
52056: LD_INT 3
52058: NEG
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 4
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: LIST
52094: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52095: LD_ADDR_VAR 0 28
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: LD_INT 3
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: LD_INT 4
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 4
52126: NEG
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52141: LD_ADDR_VAR 0 29
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 4
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 4
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 3
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 5
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 5
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 4
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 6
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 6
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 5
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52296: LD_ADDR_VAR 0 30
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 4
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 4
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 4
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 5
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 5
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 5
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 6
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 6
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52439: LD_ADDR_VAR 0 31
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: LD_INT 3
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: LD_INT 3
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 4
52476: PUSH
52477: LD_INT 3
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 4
52486: PUSH
52487: LD_INT 4
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: LD_INT 4
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 5
52506: PUSH
52507: LD_INT 4
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 5
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 4
52526: PUSH
52527: LD_INT 5
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 6
52536: PUSH
52537: LD_INT 5
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 6
52546: PUSH
52547: LD_INT 6
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 5
52556: PUSH
52557: LD_INT 6
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52578: LD_ADDR_VAR 0 32
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 4
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 4
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 3
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 5
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 5
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 4
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 6
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 6
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 5
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52721: LD_ADDR_VAR 0 33
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 3
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 4
52773: NEG
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 4
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 4
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 5
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 5
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 5
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 6
52841: NEG
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 6
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52876: LD_ADDR_VAR 0 34
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 3
52907: NEG
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 3
52919: NEG
52920: PUSH
52921: LD_INT 4
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 4
52931: NEG
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 4
52943: NEG
52944: PUSH
52945: LD_INT 4
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 4
52955: NEG
52956: PUSH
52957: LD_INT 5
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 5
52967: NEG
52968: PUSH
52969: LD_INT 4
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 5
52979: NEG
52980: PUSH
52981: LD_INT 5
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 5
52991: NEG
52992: PUSH
52993: LD_INT 6
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 6
53003: NEG
53004: PUSH
53005: LD_INT 5
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 6
53015: NEG
53016: PUSH
53017: LD_INT 6
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53039: LD_ADDR_VAR 0 41
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53083: LD_ADDR_VAR 0 42
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 3
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53124: LD_ADDR_VAR 0 43
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53164: LD_ADDR_VAR 0 44
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: LIST
53204: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53205: LD_ADDR_VAR 0 45
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: LIST
53248: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53249: LD_ADDR_VAR 0 46
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53295: LD_ADDR_VAR 0 47
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53328: LD_ADDR_VAR 0 48
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53359: LD_ADDR_VAR 0 49
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53388: LD_ADDR_VAR 0 50
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53417: LD_ADDR_VAR 0 51
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53448: LD_ADDR_VAR 0 52
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: NEG
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53481: LD_ADDR_VAR 0 53
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53525: LD_ADDR_VAR 0 54
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53566: LD_ADDR_VAR 0 55
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 3
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53606: LD_ADDR_VAR 0 56
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 3
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 3
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: LIST
53646: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53647: LD_ADDR_VAR 0 57
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53691: LD_ADDR_VAR 0 58
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53737: LD_ADDR_VAR 0 59
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53781: LD_ADDR_VAR 0 60
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53822: LD_ADDR_VAR 0 61
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53862: LD_ADDR_VAR 0 62
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53903: LD_ADDR_VAR 0 63
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53947: LD_ADDR_VAR 0 64
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: ST_TO_ADDR
// end ; 2 :
53993: GO 57259
53995: LD_INT 2
53997: DOUBLE
53998: EQUAL
53999: IFTRUE 54003
54001: GO 57258
54003: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54004: LD_ADDR_VAR 0 29
54008: PUSH
54009: LD_INT 4
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 4
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 5
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 4
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 5
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: LD_INT 3
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 4
54124: PUSH
54125: LD_INT 3
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 4
54134: PUSH
54135: LD_INT 4
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 3
54144: PUSH
54145: LD_INT 4
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 3
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 4
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 4
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 4
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 4
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 5
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 5
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 4
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: LD_INT 5
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 3
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: NEG
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 4
54343: NEG
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 4
54354: NEG
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 4
54366: NEG
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 4
54389: NEG
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 4
54401: NEG
54402: PUSH
54403: LD_INT 5
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: LD_INT 4
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: LD_INT 3
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 4
54437: NEG
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 5
54449: NEG
54450: PUSH
54451: LD_INT 4
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 5
54461: NEG
54462: PUSH
54463: LD_INT 5
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: LD_INT 5
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 5
54485: NEG
54486: PUSH
54487: LD_INT 3
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54542: LD_ADDR_VAR 0 30
54546: PUSH
54547: LD_INT 4
54549: PUSH
54550: LD_INT 4
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 4
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 5
54569: PUSH
54570: LD_INT 4
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 5
54579: PUSH
54580: LD_INT 5
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 4
54589: PUSH
54590: LD_INT 5
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 3
54599: PUSH
54600: LD_INT 4
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: PUSH
54610: LD_INT 3
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 5
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: PUSH
54630: LD_INT 5
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 4
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 3
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 4
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 4
54732: NEG
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 4
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 4
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 5
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 5
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 5
54811: NEG
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: NEG
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: LD_INT 3
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 3
54846: NEG
54847: PUSH
54848: LD_INT 4
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 3
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 4
54894: NEG
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 4
54906: NEG
54907: PUSH
54908: LD_INT 4
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: LD_INT 4
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 4
54930: NEG
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 4
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 5
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 4
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 3
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 3
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 4
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 5
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 5
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55089: LD_ADDR_VAR 0 31
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 4
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 5
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 5
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 4
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: LD_INT 5
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 3
55200: NEG
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 4
55245: NEG
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 4
55256: NEG
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 4
55268: NEG
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 4
55291: NEG
55292: PUSH
55293: LD_INT 4
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 4
55303: NEG
55304: PUSH
55305: LD_INT 5
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: LD_INT 4
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: NEG
55328: PUSH
55329: LD_INT 3
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 4
55339: NEG
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 5
55351: NEG
55352: PUSH
55353: LD_INT 4
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 5
55363: NEG
55364: PUSH
55365: LD_INT 5
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: LD_INT 5
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 5
55387: NEG
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 4
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 3
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 4
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 4
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 4
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 4
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 5
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 5
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 4
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 5
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55639: LD_ADDR_VAR 0 32
55643: PUSH
55644: LD_INT 4
55646: NEG
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 4
55657: NEG
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 3
55669: NEG
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 4
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 5
55702: NEG
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 5
55713: NEG
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 5
55725: NEG
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: NEG
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: NEG
55761: PUSH
55762: LD_INT 4
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 2
55784: NEG
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 4
55808: NEG
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 4
55820: NEG
55821: PUSH
55822: LD_INT 4
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: LD_INT 4
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 4
55844: NEG
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 4
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 5
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 4
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 4
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 5
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: LD_INT 5
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 4
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 4
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 3
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 4
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 4
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 4
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 5
56071: PUSH
56072: LD_INT 4
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 5
56081: PUSH
56082: LD_INT 5
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 4
56091: PUSH
56092: LD_INT 5
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 3
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 5
56121: PUSH
56122: LD_INT 3
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 3
56131: PUSH
56132: LD_INT 5
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56186: LD_ADDR_VAR 0 33
56190: PUSH
56191: LD_INT 4
56193: NEG
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 4
56205: NEG
56206: PUSH
56207: LD_INT 5
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: NEG
56218: PUSH
56219: LD_INT 4
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 4
56241: NEG
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 5
56253: NEG
56254: PUSH
56255: LD_INT 4
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 5
56265: NEG
56266: PUSH
56267: LD_INT 5
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: LD_INT 5
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 5
56289: NEG
56290: PUSH
56291: LD_INT 3
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 4
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 3
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 4
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 4
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 4
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 5
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 5
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 4
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 5
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 4
56526: PUSH
56527: LD_INT 4
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: LD_INT 4
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 4
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 4
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 4
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 4
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 5
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 5
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 4
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 5
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56724: LD_ADDR_VAR 0 34
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 4
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 5
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 4
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 4
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 5
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 3
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: LD_INT 5
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 4
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 4
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 3
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 4
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 4
56926: PUSH
56927: LD_INT 4
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 4
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 5
56946: PUSH
56947: LD_INT 4
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 5
56956: PUSH
56957: LD_INT 5
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 4
56966: PUSH
56967: LD_INT 5
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: LD_INT 4
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 5
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: LD_INT 5
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 4
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 4
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 4
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 4
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 4
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 3
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 4
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 5
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 5
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 5
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// end ; end ;
57256: GO 57259
57258: POP
// case btype of b_depot , b_warehouse :
57259: LD_VAR 0 1
57263: PUSH
57264: LD_INT 0
57266: DOUBLE
57267: EQUAL
57268: IFTRUE 57278
57270: LD_INT 1
57272: DOUBLE
57273: EQUAL
57274: IFTRUE 57278
57276: GO 57479
57278: POP
// case nation of nation_american :
57279: LD_VAR 0 5
57283: PUSH
57284: LD_INT 1
57286: DOUBLE
57287: EQUAL
57288: IFTRUE 57292
57290: GO 57348
57292: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57293: LD_ADDR_VAR 0 9
57297: PUSH
57298: LD_VAR 0 11
57302: PUSH
57303: LD_VAR 0 12
57307: PUSH
57308: LD_VAR 0 13
57312: PUSH
57313: LD_VAR 0 14
57317: PUSH
57318: LD_VAR 0 15
57322: PUSH
57323: LD_VAR 0 16
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: PUSH
57336: LD_VAR 0 4
57340: PUSH
57341: LD_INT 1
57343: PLUS
57344: ARRAY
57345: ST_TO_ADDR
57346: GO 57477
57348: LD_INT 2
57350: DOUBLE
57351: EQUAL
57352: IFTRUE 57356
57354: GO 57412
57356: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57357: LD_ADDR_VAR 0 9
57361: PUSH
57362: LD_VAR 0 17
57366: PUSH
57367: LD_VAR 0 18
57371: PUSH
57372: LD_VAR 0 19
57376: PUSH
57377: LD_VAR 0 20
57381: PUSH
57382: LD_VAR 0 21
57386: PUSH
57387: LD_VAR 0 22
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: PUSH
57400: LD_VAR 0 4
57404: PUSH
57405: LD_INT 1
57407: PLUS
57408: ARRAY
57409: ST_TO_ADDR
57410: GO 57477
57412: LD_INT 3
57414: DOUBLE
57415: EQUAL
57416: IFTRUE 57420
57418: GO 57476
57420: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57421: LD_ADDR_VAR 0 9
57425: PUSH
57426: LD_VAR 0 23
57430: PUSH
57431: LD_VAR 0 24
57435: PUSH
57436: LD_VAR 0 25
57440: PUSH
57441: LD_VAR 0 26
57445: PUSH
57446: LD_VAR 0 27
57450: PUSH
57451: LD_VAR 0 28
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: PUSH
57464: LD_VAR 0 4
57468: PUSH
57469: LD_INT 1
57471: PLUS
57472: ARRAY
57473: ST_TO_ADDR
57474: GO 57477
57476: POP
57477: GO 58032
57479: LD_INT 2
57481: DOUBLE
57482: EQUAL
57483: IFTRUE 57493
57485: LD_INT 3
57487: DOUBLE
57488: EQUAL
57489: IFTRUE 57493
57491: GO 57549
57493: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57494: LD_ADDR_VAR 0 9
57498: PUSH
57499: LD_VAR 0 29
57503: PUSH
57504: LD_VAR 0 30
57508: PUSH
57509: LD_VAR 0 31
57513: PUSH
57514: LD_VAR 0 32
57518: PUSH
57519: LD_VAR 0 33
57523: PUSH
57524: LD_VAR 0 34
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: PUSH
57537: LD_VAR 0 4
57541: PUSH
57542: LD_INT 1
57544: PLUS
57545: ARRAY
57546: ST_TO_ADDR
57547: GO 58032
57549: LD_INT 16
57551: DOUBLE
57552: EQUAL
57553: IFTRUE 57611
57555: LD_INT 17
57557: DOUBLE
57558: EQUAL
57559: IFTRUE 57611
57561: LD_INT 18
57563: DOUBLE
57564: EQUAL
57565: IFTRUE 57611
57567: LD_INT 19
57569: DOUBLE
57570: EQUAL
57571: IFTRUE 57611
57573: LD_INT 22
57575: DOUBLE
57576: EQUAL
57577: IFTRUE 57611
57579: LD_INT 20
57581: DOUBLE
57582: EQUAL
57583: IFTRUE 57611
57585: LD_INT 21
57587: DOUBLE
57588: EQUAL
57589: IFTRUE 57611
57591: LD_INT 23
57593: DOUBLE
57594: EQUAL
57595: IFTRUE 57611
57597: LD_INT 24
57599: DOUBLE
57600: EQUAL
57601: IFTRUE 57611
57603: LD_INT 25
57605: DOUBLE
57606: EQUAL
57607: IFTRUE 57611
57609: GO 57667
57611: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57612: LD_ADDR_VAR 0 9
57616: PUSH
57617: LD_VAR 0 35
57621: PUSH
57622: LD_VAR 0 36
57626: PUSH
57627: LD_VAR 0 37
57631: PUSH
57632: LD_VAR 0 38
57636: PUSH
57637: LD_VAR 0 39
57641: PUSH
57642: LD_VAR 0 40
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: PUSH
57655: LD_VAR 0 4
57659: PUSH
57660: LD_INT 1
57662: PLUS
57663: ARRAY
57664: ST_TO_ADDR
57665: GO 58032
57667: LD_INT 6
57669: DOUBLE
57670: EQUAL
57671: IFTRUE 57723
57673: LD_INT 7
57675: DOUBLE
57676: EQUAL
57677: IFTRUE 57723
57679: LD_INT 8
57681: DOUBLE
57682: EQUAL
57683: IFTRUE 57723
57685: LD_INT 13
57687: DOUBLE
57688: EQUAL
57689: IFTRUE 57723
57691: LD_INT 12
57693: DOUBLE
57694: EQUAL
57695: IFTRUE 57723
57697: LD_INT 15
57699: DOUBLE
57700: EQUAL
57701: IFTRUE 57723
57703: LD_INT 11
57705: DOUBLE
57706: EQUAL
57707: IFTRUE 57723
57709: LD_INT 14
57711: DOUBLE
57712: EQUAL
57713: IFTRUE 57723
57715: LD_INT 10
57717: DOUBLE
57718: EQUAL
57719: IFTRUE 57723
57721: GO 57779
57723: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57724: LD_ADDR_VAR 0 9
57728: PUSH
57729: LD_VAR 0 41
57733: PUSH
57734: LD_VAR 0 42
57738: PUSH
57739: LD_VAR 0 43
57743: PUSH
57744: LD_VAR 0 44
57748: PUSH
57749: LD_VAR 0 45
57753: PUSH
57754: LD_VAR 0 46
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: PUSH
57767: LD_VAR 0 4
57771: PUSH
57772: LD_INT 1
57774: PLUS
57775: ARRAY
57776: ST_TO_ADDR
57777: GO 58032
57779: LD_INT 36
57781: DOUBLE
57782: EQUAL
57783: IFTRUE 57787
57785: GO 57843
57787: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57788: LD_ADDR_VAR 0 9
57792: PUSH
57793: LD_VAR 0 47
57797: PUSH
57798: LD_VAR 0 48
57802: PUSH
57803: LD_VAR 0 49
57807: PUSH
57808: LD_VAR 0 50
57812: PUSH
57813: LD_VAR 0 51
57817: PUSH
57818: LD_VAR 0 52
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: PUSH
57831: LD_VAR 0 4
57835: PUSH
57836: LD_INT 1
57838: PLUS
57839: ARRAY
57840: ST_TO_ADDR
57841: GO 58032
57843: LD_INT 4
57845: DOUBLE
57846: EQUAL
57847: IFTRUE 57869
57849: LD_INT 5
57851: DOUBLE
57852: EQUAL
57853: IFTRUE 57869
57855: LD_INT 34
57857: DOUBLE
57858: EQUAL
57859: IFTRUE 57869
57861: LD_INT 37
57863: DOUBLE
57864: EQUAL
57865: IFTRUE 57869
57867: GO 57925
57869: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57870: LD_ADDR_VAR 0 9
57874: PUSH
57875: LD_VAR 0 53
57879: PUSH
57880: LD_VAR 0 54
57884: PUSH
57885: LD_VAR 0 55
57889: PUSH
57890: LD_VAR 0 56
57894: PUSH
57895: LD_VAR 0 57
57899: PUSH
57900: LD_VAR 0 58
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: PUSH
57913: LD_VAR 0 4
57917: PUSH
57918: LD_INT 1
57920: PLUS
57921: ARRAY
57922: ST_TO_ADDR
57923: GO 58032
57925: LD_INT 31
57927: DOUBLE
57928: EQUAL
57929: IFTRUE 57975
57931: LD_INT 32
57933: DOUBLE
57934: EQUAL
57935: IFTRUE 57975
57937: LD_INT 33
57939: DOUBLE
57940: EQUAL
57941: IFTRUE 57975
57943: LD_INT 27
57945: DOUBLE
57946: EQUAL
57947: IFTRUE 57975
57949: LD_INT 26
57951: DOUBLE
57952: EQUAL
57953: IFTRUE 57975
57955: LD_INT 28
57957: DOUBLE
57958: EQUAL
57959: IFTRUE 57975
57961: LD_INT 29
57963: DOUBLE
57964: EQUAL
57965: IFTRUE 57975
57967: LD_INT 30
57969: DOUBLE
57970: EQUAL
57971: IFTRUE 57975
57973: GO 58031
57975: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57976: LD_ADDR_VAR 0 9
57980: PUSH
57981: LD_VAR 0 59
57985: PUSH
57986: LD_VAR 0 60
57990: PUSH
57991: LD_VAR 0 61
57995: PUSH
57996: LD_VAR 0 62
58000: PUSH
58001: LD_VAR 0 63
58005: PUSH
58006: LD_VAR 0 64
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: PUSH
58019: LD_VAR 0 4
58023: PUSH
58024: LD_INT 1
58026: PLUS
58027: ARRAY
58028: ST_TO_ADDR
58029: GO 58032
58031: POP
// temp_list2 = [ ] ;
58032: LD_ADDR_VAR 0 10
58036: PUSH
58037: EMPTY
58038: ST_TO_ADDR
// for i in temp_list do
58039: LD_ADDR_VAR 0 8
58043: PUSH
58044: LD_VAR 0 9
58048: PUSH
58049: FOR_IN
58050: IFFALSE 58102
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58052: LD_ADDR_VAR 0 10
58056: PUSH
58057: LD_VAR 0 10
58061: PUSH
58062: LD_VAR 0 8
58066: PUSH
58067: LD_INT 1
58069: ARRAY
58070: PUSH
58071: LD_VAR 0 2
58075: PLUS
58076: PUSH
58077: LD_VAR 0 8
58081: PUSH
58082: LD_INT 2
58084: ARRAY
58085: PUSH
58086: LD_VAR 0 3
58090: PLUS
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: ADD
58099: ST_TO_ADDR
58100: GO 58049
58102: POP
58103: POP
// result = temp_list2 ;
58104: LD_ADDR_VAR 0 7
58108: PUSH
58109: LD_VAR 0 10
58113: ST_TO_ADDR
// end ;
58114: LD_VAR 0 7
58118: RET
// export function EnemyInRange ( unit , dist ) ; begin
58119: LD_INT 0
58121: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58122: LD_ADDR_VAR 0 3
58126: PUSH
58127: LD_VAR 0 1
58131: PPUSH
58132: CALL_OW 255
58136: PPUSH
58137: LD_VAR 0 1
58141: PPUSH
58142: CALL_OW 250
58146: PPUSH
58147: LD_VAR 0 1
58151: PPUSH
58152: CALL_OW 251
58156: PPUSH
58157: LD_VAR 0 2
58161: PPUSH
58162: CALL 31515 0 4
58166: PUSH
58167: LD_INT 4
58169: ARRAY
58170: ST_TO_ADDR
// end ;
58171: LD_VAR 0 3
58175: RET
// export function PlayerSeeMe ( unit ) ; begin
58176: LD_INT 0
58178: PPUSH
// result := See ( your_side , unit ) ;
58179: LD_ADDR_VAR 0 2
58183: PUSH
58184: LD_OWVAR 2
58188: PPUSH
58189: LD_VAR 0 1
58193: PPUSH
58194: CALL_OW 292
58198: ST_TO_ADDR
// end ;
58199: LD_VAR 0 2
58203: RET
// export function ReverseDir ( unit ) ; begin
58204: LD_INT 0
58206: PPUSH
// if not unit then
58207: LD_VAR 0 1
58211: NOT
58212: IFFALSE 58216
// exit ;
58214: GO 58239
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58216: LD_ADDR_VAR 0 2
58220: PUSH
58221: LD_VAR 0 1
58225: PPUSH
58226: CALL_OW 254
58230: PUSH
58231: LD_INT 3
58233: PLUS
58234: PUSH
58235: LD_INT 6
58237: MOD
58238: ST_TO_ADDR
// end ;
58239: LD_VAR 0 2
58243: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58244: LD_INT 0
58246: PPUSH
58247: PPUSH
58248: PPUSH
58249: PPUSH
58250: PPUSH
// if not hexes then
58251: LD_VAR 0 2
58255: NOT
58256: IFFALSE 58260
// exit ;
58258: GO 58408
// dist := 9999 ;
58260: LD_ADDR_VAR 0 5
58264: PUSH
58265: LD_INT 9999
58267: ST_TO_ADDR
// for i = 1 to hexes do
58268: LD_ADDR_VAR 0 4
58272: PUSH
58273: DOUBLE
58274: LD_INT 1
58276: DEC
58277: ST_TO_ADDR
58278: LD_VAR 0 2
58282: PUSH
58283: FOR_TO
58284: IFFALSE 58396
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58286: LD_VAR 0 1
58290: PPUSH
58291: LD_VAR 0 2
58295: PUSH
58296: LD_VAR 0 4
58300: ARRAY
58301: PUSH
58302: LD_INT 1
58304: ARRAY
58305: PPUSH
58306: LD_VAR 0 2
58310: PUSH
58311: LD_VAR 0 4
58315: ARRAY
58316: PUSH
58317: LD_INT 2
58319: ARRAY
58320: PPUSH
58321: CALL_OW 297
58325: PUSH
58326: LD_VAR 0 5
58330: LESS
58331: IFFALSE 58394
// begin hex := hexes [ i ] ;
58333: LD_ADDR_VAR 0 7
58337: PUSH
58338: LD_VAR 0 2
58342: PUSH
58343: LD_VAR 0 4
58347: ARRAY
58348: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58349: LD_ADDR_VAR 0 5
58353: PUSH
58354: LD_VAR 0 1
58358: PPUSH
58359: LD_VAR 0 2
58363: PUSH
58364: LD_VAR 0 4
58368: ARRAY
58369: PUSH
58370: LD_INT 1
58372: ARRAY
58373: PPUSH
58374: LD_VAR 0 2
58378: PUSH
58379: LD_VAR 0 4
58383: ARRAY
58384: PUSH
58385: LD_INT 2
58387: ARRAY
58388: PPUSH
58389: CALL_OW 297
58393: ST_TO_ADDR
// end ; end ;
58394: GO 58283
58396: POP
58397: POP
// result := hex ;
58398: LD_ADDR_VAR 0 3
58402: PUSH
58403: LD_VAR 0 7
58407: ST_TO_ADDR
// end ;
58408: LD_VAR 0 3
58412: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58413: LD_INT 0
58415: PPUSH
58416: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58417: LD_VAR 0 1
58421: NOT
58422: PUSH
58423: LD_VAR 0 1
58427: PUSH
58428: LD_INT 21
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 23
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PPUSH
58452: CALL_OW 69
58456: IN
58457: NOT
58458: OR
58459: IFFALSE 58463
// exit ;
58461: GO 58510
// for i = 1 to 3 do
58463: LD_ADDR_VAR 0 3
58467: PUSH
58468: DOUBLE
58469: LD_INT 1
58471: DEC
58472: ST_TO_ADDR
58473: LD_INT 3
58475: PUSH
58476: FOR_TO
58477: IFFALSE 58508
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58479: LD_VAR 0 1
58483: PPUSH
58484: CALL_OW 250
58488: PPUSH
58489: LD_VAR 0 1
58493: PPUSH
58494: CALL_OW 251
58498: PPUSH
58499: LD_INT 1
58501: PPUSH
58502: CALL_OW 453
58506: GO 58476
58508: POP
58509: POP
// end ;
58510: LD_VAR 0 2
58514: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58515: LD_INT 0
58517: PPUSH
58518: PPUSH
58519: PPUSH
58520: PPUSH
58521: PPUSH
58522: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58523: LD_VAR 0 1
58527: NOT
58528: PUSH
58529: LD_VAR 0 2
58533: NOT
58534: OR
58535: PUSH
58536: LD_VAR 0 1
58540: PPUSH
58541: CALL_OW 314
58545: OR
58546: IFFALSE 58550
// exit ;
58548: GO 58991
// x := GetX ( enemy_unit ) ;
58550: LD_ADDR_VAR 0 7
58554: PUSH
58555: LD_VAR 0 2
58559: PPUSH
58560: CALL_OW 250
58564: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58565: LD_ADDR_VAR 0 8
58569: PUSH
58570: LD_VAR 0 2
58574: PPUSH
58575: CALL_OW 251
58579: ST_TO_ADDR
// if not x or not y then
58580: LD_VAR 0 7
58584: NOT
58585: PUSH
58586: LD_VAR 0 8
58590: NOT
58591: OR
58592: IFFALSE 58596
// exit ;
58594: GO 58991
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58596: LD_ADDR_VAR 0 6
58600: PUSH
58601: LD_VAR 0 7
58605: PPUSH
58606: LD_INT 0
58608: PPUSH
58609: LD_INT 4
58611: PPUSH
58612: CALL_OW 272
58616: PUSH
58617: LD_VAR 0 8
58621: PPUSH
58622: LD_INT 0
58624: PPUSH
58625: LD_INT 4
58627: PPUSH
58628: CALL_OW 273
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_VAR 0 7
58641: PPUSH
58642: LD_INT 1
58644: PPUSH
58645: LD_INT 4
58647: PPUSH
58648: CALL_OW 272
58652: PUSH
58653: LD_VAR 0 8
58657: PPUSH
58658: LD_INT 1
58660: PPUSH
58661: LD_INT 4
58663: PPUSH
58664: CALL_OW 273
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_VAR 0 7
58677: PPUSH
58678: LD_INT 2
58680: PPUSH
58681: LD_INT 4
58683: PPUSH
58684: CALL_OW 272
58688: PUSH
58689: LD_VAR 0 8
58693: PPUSH
58694: LD_INT 2
58696: PPUSH
58697: LD_INT 4
58699: PPUSH
58700: CALL_OW 273
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_VAR 0 7
58713: PPUSH
58714: LD_INT 3
58716: PPUSH
58717: LD_INT 4
58719: PPUSH
58720: CALL_OW 272
58724: PUSH
58725: LD_VAR 0 8
58729: PPUSH
58730: LD_INT 3
58732: PPUSH
58733: LD_INT 4
58735: PPUSH
58736: CALL_OW 273
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_VAR 0 7
58749: PPUSH
58750: LD_INT 4
58752: PPUSH
58753: LD_INT 4
58755: PPUSH
58756: CALL_OW 272
58760: PUSH
58761: LD_VAR 0 8
58765: PPUSH
58766: LD_INT 4
58768: PPUSH
58769: LD_INT 4
58771: PPUSH
58772: CALL_OW 273
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_VAR 0 7
58785: PPUSH
58786: LD_INT 5
58788: PPUSH
58789: LD_INT 4
58791: PPUSH
58792: CALL_OW 272
58796: PUSH
58797: LD_VAR 0 8
58801: PPUSH
58802: LD_INT 5
58804: PPUSH
58805: LD_INT 4
58807: PPUSH
58808: CALL_OW 273
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: ST_TO_ADDR
// for i = tmp downto 1 do
58825: LD_ADDR_VAR 0 4
58829: PUSH
58830: DOUBLE
58831: LD_VAR 0 6
58835: INC
58836: ST_TO_ADDR
58837: LD_INT 1
58839: PUSH
58840: FOR_DOWNTO
58841: IFFALSE 58942
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58843: LD_VAR 0 6
58847: PUSH
58848: LD_VAR 0 4
58852: ARRAY
58853: PUSH
58854: LD_INT 1
58856: ARRAY
58857: PPUSH
58858: LD_VAR 0 6
58862: PUSH
58863: LD_VAR 0 4
58867: ARRAY
58868: PUSH
58869: LD_INT 2
58871: ARRAY
58872: PPUSH
58873: CALL_OW 488
58877: NOT
58878: PUSH
58879: LD_VAR 0 6
58883: PUSH
58884: LD_VAR 0 4
58888: ARRAY
58889: PUSH
58890: LD_INT 1
58892: ARRAY
58893: PPUSH
58894: LD_VAR 0 6
58898: PUSH
58899: LD_VAR 0 4
58903: ARRAY
58904: PUSH
58905: LD_INT 2
58907: ARRAY
58908: PPUSH
58909: CALL_OW 428
58913: PUSH
58914: LD_INT 0
58916: NONEQUAL
58917: OR
58918: IFFALSE 58940
// tmp := Delete ( tmp , i ) ;
58920: LD_ADDR_VAR 0 6
58924: PUSH
58925: LD_VAR 0 6
58929: PPUSH
58930: LD_VAR 0 4
58934: PPUSH
58935: CALL_OW 3
58939: ST_TO_ADDR
58940: GO 58840
58942: POP
58943: POP
// j := GetClosestHex ( unit , tmp ) ;
58944: LD_ADDR_VAR 0 5
58948: PUSH
58949: LD_VAR 0 1
58953: PPUSH
58954: LD_VAR 0 6
58958: PPUSH
58959: CALL 58244 0 2
58963: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58964: LD_VAR 0 1
58968: PPUSH
58969: LD_VAR 0 5
58973: PUSH
58974: LD_INT 1
58976: ARRAY
58977: PPUSH
58978: LD_VAR 0 5
58982: PUSH
58983: LD_INT 2
58985: ARRAY
58986: PPUSH
58987: CALL_OW 111
// end ;
58991: LD_VAR 0 3
58995: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58996: LD_INT 0
58998: PPUSH
58999: PPUSH
59000: PPUSH
// uc_side = 0 ;
59001: LD_ADDR_OWVAR 20
59005: PUSH
59006: LD_INT 0
59008: ST_TO_ADDR
// uc_nation = 0 ;
59009: LD_ADDR_OWVAR 21
59013: PUSH
59014: LD_INT 0
59016: ST_TO_ADDR
// InitHc_All ( ) ;
59017: CALL_OW 584
// InitVc ;
59021: CALL_OW 20
// if mastodonts then
59025: LD_VAR 0 6
59029: IFFALSE 59096
// for i = 1 to mastodonts do
59031: LD_ADDR_VAR 0 11
59035: PUSH
59036: DOUBLE
59037: LD_INT 1
59039: DEC
59040: ST_TO_ADDR
59041: LD_VAR 0 6
59045: PUSH
59046: FOR_TO
59047: IFFALSE 59094
// begin vc_chassis := 31 ;
59049: LD_ADDR_OWVAR 37
59053: PUSH
59054: LD_INT 31
59056: ST_TO_ADDR
// vc_control := control_rider ;
59057: LD_ADDR_OWVAR 38
59061: PUSH
59062: LD_INT 4
59064: ST_TO_ADDR
// animal := CreateVehicle ;
59065: LD_ADDR_VAR 0 12
59069: PUSH
59070: CALL_OW 45
59074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59075: LD_VAR 0 12
59079: PPUSH
59080: LD_VAR 0 8
59084: PPUSH
59085: LD_INT 0
59087: PPUSH
59088: CALL 61231 0 3
// end ;
59092: GO 59046
59094: POP
59095: POP
// if horses then
59096: LD_VAR 0 5
59100: IFFALSE 59167
// for i = 1 to horses do
59102: LD_ADDR_VAR 0 11
59106: PUSH
59107: DOUBLE
59108: LD_INT 1
59110: DEC
59111: ST_TO_ADDR
59112: LD_VAR 0 5
59116: PUSH
59117: FOR_TO
59118: IFFALSE 59165
// begin hc_class := 21 ;
59120: LD_ADDR_OWVAR 28
59124: PUSH
59125: LD_INT 21
59127: ST_TO_ADDR
// hc_gallery :=  ;
59128: LD_ADDR_OWVAR 33
59132: PUSH
59133: LD_STRING 
59135: ST_TO_ADDR
// animal := CreateHuman ;
59136: LD_ADDR_VAR 0 12
59140: PUSH
59141: CALL_OW 44
59145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59146: LD_VAR 0 12
59150: PPUSH
59151: LD_VAR 0 8
59155: PPUSH
59156: LD_INT 0
59158: PPUSH
59159: CALL 61231 0 3
// end ;
59163: GO 59117
59165: POP
59166: POP
// if birds then
59167: LD_VAR 0 1
59171: IFFALSE 59238
// for i = 1 to birds do
59173: LD_ADDR_VAR 0 11
59177: PUSH
59178: DOUBLE
59179: LD_INT 1
59181: DEC
59182: ST_TO_ADDR
59183: LD_VAR 0 1
59187: PUSH
59188: FOR_TO
59189: IFFALSE 59236
// begin hc_class = 18 ;
59191: LD_ADDR_OWVAR 28
59195: PUSH
59196: LD_INT 18
59198: ST_TO_ADDR
// hc_gallery =  ;
59199: LD_ADDR_OWVAR 33
59203: PUSH
59204: LD_STRING 
59206: ST_TO_ADDR
// animal := CreateHuman ;
59207: LD_ADDR_VAR 0 12
59211: PUSH
59212: CALL_OW 44
59216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59217: LD_VAR 0 12
59221: PPUSH
59222: LD_VAR 0 8
59226: PPUSH
59227: LD_INT 0
59229: PPUSH
59230: CALL 61231 0 3
// end ;
59234: GO 59188
59236: POP
59237: POP
// if tigers then
59238: LD_VAR 0 2
59242: IFFALSE 59326
// for i = 1 to tigers do
59244: LD_ADDR_VAR 0 11
59248: PUSH
59249: DOUBLE
59250: LD_INT 1
59252: DEC
59253: ST_TO_ADDR
59254: LD_VAR 0 2
59258: PUSH
59259: FOR_TO
59260: IFFALSE 59324
// begin hc_class = class_tiger ;
59262: LD_ADDR_OWVAR 28
59266: PUSH
59267: LD_INT 14
59269: ST_TO_ADDR
// hc_gallery =  ;
59270: LD_ADDR_OWVAR 33
59274: PUSH
59275: LD_STRING 
59277: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59278: LD_ADDR_OWVAR 35
59282: PUSH
59283: LD_INT 7
59285: NEG
59286: PPUSH
59287: LD_INT 7
59289: PPUSH
59290: CALL_OW 12
59294: ST_TO_ADDR
// animal := CreateHuman ;
59295: LD_ADDR_VAR 0 12
59299: PUSH
59300: CALL_OW 44
59304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59305: LD_VAR 0 12
59309: PPUSH
59310: LD_VAR 0 8
59314: PPUSH
59315: LD_INT 0
59317: PPUSH
59318: CALL 61231 0 3
// end ;
59322: GO 59259
59324: POP
59325: POP
// if apemans then
59326: LD_VAR 0 3
59330: IFFALSE 59453
// for i = 1 to apemans do
59332: LD_ADDR_VAR 0 11
59336: PUSH
59337: DOUBLE
59338: LD_INT 1
59340: DEC
59341: ST_TO_ADDR
59342: LD_VAR 0 3
59346: PUSH
59347: FOR_TO
59348: IFFALSE 59451
// begin hc_class = class_apeman ;
59350: LD_ADDR_OWVAR 28
59354: PUSH
59355: LD_INT 12
59357: ST_TO_ADDR
// hc_gallery =  ;
59358: LD_ADDR_OWVAR 33
59362: PUSH
59363: LD_STRING 
59365: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59366: LD_ADDR_OWVAR 35
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PPUSH
59375: LD_INT 2
59377: PPUSH
59378: CALL_OW 12
59382: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59383: LD_ADDR_OWVAR 31
59387: PUSH
59388: LD_INT 1
59390: PPUSH
59391: LD_INT 3
59393: PPUSH
59394: CALL_OW 12
59398: PUSH
59399: LD_INT 1
59401: PPUSH
59402: LD_INT 3
59404: PPUSH
59405: CALL_OW 12
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// animal := CreateHuman ;
59422: LD_ADDR_VAR 0 12
59426: PUSH
59427: CALL_OW 44
59431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59432: LD_VAR 0 12
59436: PPUSH
59437: LD_VAR 0 8
59441: PPUSH
59442: LD_INT 0
59444: PPUSH
59445: CALL 61231 0 3
// end ;
59449: GO 59347
59451: POP
59452: POP
// if enchidnas then
59453: LD_VAR 0 4
59457: IFFALSE 59524
// for i = 1 to enchidnas do
59459: LD_ADDR_VAR 0 11
59463: PUSH
59464: DOUBLE
59465: LD_INT 1
59467: DEC
59468: ST_TO_ADDR
59469: LD_VAR 0 4
59473: PUSH
59474: FOR_TO
59475: IFFALSE 59522
// begin hc_class = 13 ;
59477: LD_ADDR_OWVAR 28
59481: PUSH
59482: LD_INT 13
59484: ST_TO_ADDR
// hc_gallery =  ;
59485: LD_ADDR_OWVAR 33
59489: PUSH
59490: LD_STRING 
59492: ST_TO_ADDR
// animal := CreateHuman ;
59493: LD_ADDR_VAR 0 12
59497: PUSH
59498: CALL_OW 44
59502: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59503: LD_VAR 0 12
59507: PPUSH
59508: LD_VAR 0 8
59512: PPUSH
59513: LD_INT 0
59515: PPUSH
59516: CALL 61231 0 3
// end ;
59520: GO 59474
59522: POP
59523: POP
// if fishes then
59524: LD_VAR 0 7
59528: IFFALSE 59595
// for i = 1 to fishes do
59530: LD_ADDR_VAR 0 11
59534: PUSH
59535: DOUBLE
59536: LD_INT 1
59538: DEC
59539: ST_TO_ADDR
59540: LD_VAR 0 7
59544: PUSH
59545: FOR_TO
59546: IFFALSE 59593
// begin hc_class = 20 ;
59548: LD_ADDR_OWVAR 28
59552: PUSH
59553: LD_INT 20
59555: ST_TO_ADDR
// hc_gallery =  ;
59556: LD_ADDR_OWVAR 33
59560: PUSH
59561: LD_STRING 
59563: ST_TO_ADDR
// animal := CreateHuman ;
59564: LD_ADDR_VAR 0 12
59568: PUSH
59569: CALL_OW 44
59573: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59574: LD_VAR 0 12
59578: PPUSH
59579: LD_VAR 0 9
59583: PPUSH
59584: LD_INT 0
59586: PPUSH
59587: CALL 61231 0 3
// end ;
59591: GO 59545
59593: POP
59594: POP
// end ;
59595: LD_VAR 0 10
59599: RET
// export function WantHeal ( sci , unit ) ; begin
59600: LD_INT 0
59602: PPUSH
// if GetTaskList ( sci ) > 0 then
59603: LD_VAR 0 1
59607: PPUSH
59608: CALL_OW 437
59612: PUSH
59613: LD_INT 0
59615: GREATER
59616: IFFALSE 59686
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59618: LD_VAR 0 1
59622: PPUSH
59623: CALL_OW 437
59627: PUSH
59628: LD_INT 1
59630: ARRAY
59631: PUSH
59632: LD_INT 1
59634: ARRAY
59635: PUSH
59636: LD_STRING l
59638: EQUAL
59639: PUSH
59640: LD_VAR 0 1
59644: PPUSH
59645: CALL_OW 437
59649: PUSH
59650: LD_INT 1
59652: ARRAY
59653: PUSH
59654: LD_INT 4
59656: ARRAY
59657: PUSH
59658: LD_VAR 0 2
59662: EQUAL
59663: AND
59664: IFFALSE 59676
// result := true else
59666: LD_ADDR_VAR 0 3
59670: PUSH
59671: LD_INT 1
59673: ST_TO_ADDR
59674: GO 59684
// result := false ;
59676: LD_ADDR_VAR 0 3
59680: PUSH
59681: LD_INT 0
59683: ST_TO_ADDR
// end else
59684: GO 59694
// result := false ;
59686: LD_ADDR_VAR 0 3
59690: PUSH
59691: LD_INT 0
59693: ST_TO_ADDR
// end ;
59694: LD_VAR 0 3
59698: RET
// export function HealTarget ( sci ) ; begin
59699: LD_INT 0
59701: PPUSH
// if not sci then
59702: LD_VAR 0 1
59706: NOT
59707: IFFALSE 59711
// exit ;
59709: GO 59776
// result := 0 ;
59711: LD_ADDR_VAR 0 2
59715: PUSH
59716: LD_INT 0
59718: ST_TO_ADDR
// if GetTaskList ( sci ) then
59719: LD_VAR 0 1
59723: PPUSH
59724: CALL_OW 437
59728: IFFALSE 59776
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59730: LD_VAR 0 1
59734: PPUSH
59735: CALL_OW 437
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PUSH
59744: LD_INT 1
59746: ARRAY
59747: PUSH
59748: LD_STRING l
59750: EQUAL
59751: IFFALSE 59776
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59753: LD_ADDR_VAR 0 2
59757: PUSH
59758: LD_VAR 0 1
59762: PPUSH
59763: CALL_OW 437
59767: PUSH
59768: LD_INT 1
59770: ARRAY
59771: PUSH
59772: LD_INT 4
59774: ARRAY
59775: ST_TO_ADDR
// end ;
59776: LD_VAR 0 2
59780: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59781: LD_INT 0
59783: PPUSH
59784: PPUSH
59785: PPUSH
59786: PPUSH
// if not base_units then
59787: LD_VAR 0 1
59791: NOT
59792: IFFALSE 59796
// exit ;
59794: GO 59883
// result := false ;
59796: LD_ADDR_VAR 0 2
59800: PUSH
59801: LD_INT 0
59803: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59804: LD_ADDR_VAR 0 5
59808: PUSH
59809: LD_VAR 0 1
59813: PPUSH
59814: LD_INT 21
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PPUSH
59824: CALL_OW 72
59828: ST_TO_ADDR
// if not tmp then
59829: LD_VAR 0 5
59833: NOT
59834: IFFALSE 59838
// exit ;
59836: GO 59883
// for i in tmp do
59838: LD_ADDR_VAR 0 3
59842: PUSH
59843: LD_VAR 0 5
59847: PUSH
59848: FOR_IN
59849: IFFALSE 59881
// begin result := EnemyInRange ( i , 22 ) ;
59851: LD_ADDR_VAR 0 2
59855: PUSH
59856: LD_VAR 0 3
59860: PPUSH
59861: LD_INT 22
59863: PPUSH
59864: CALL 58119 0 2
59868: ST_TO_ADDR
// if result then
59869: LD_VAR 0 2
59873: IFFALSE 59879
// exit ;
59875: POP
59876: POP
59877: GO 59883
// end ;
59879: GO 59848
59881: POP
59882: POP
// end ;
59883: LD_VAR 0 2
59887: RET
// export function FilterByTag ( units , tag ) ; begin
59888: LD_INT 0
59890: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59891: LD_ADDR_VAR 0 3
59895: PUSH
59896: LD_VAR 0 1
59900: PPUSH
59901: LD_INT 120
59903: PUSH
59904: LD_VAR 0 2
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PPUSH
59913: CALL_OW 72
59917: ST_TO_ADDR
// end ;
59918: LD_VAR 0 3
59922: RET
// export function IsDriver ( un ) ; begin
59923: LD_INT 0
59925: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59926: LD_ADDR_VAR 0 2
59930: PUSH
59931: LD_VAR 0 1
59935: PUSH
59936: LD_INT 55
59938: PUSH
59939: EMPTY
59940: LIST
59941: PPUSH
59942: CALL_OW 69
59946: IN
59947: ST_TO_ADDR
// end ;
59948: LD_VAR 0 2
59952: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59953: LD_INT 0
59955: PPUSH
59956: PPUSH
// list := [ ] ;
59957: LD_ADDR_VAR 0 5
59961: PUSH
59962: EMPTY
59963: ST_TO_ADDR
// case d of 0 :
59964: LD_VAR 0 3
59968: PUSH
59969: LD_INT 0
59971: DOUBLE
59972: EQUAL
59973: IFTRUE 59977
59975: GO 60110
59977: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59978: LD_ADDR_VAR 0 5
59982: PUSH
59983: LD_VAR 0 1
59987: PUSH
59988: LD_INT 4
59990: MINUS
59991: PUSH
59992: LD_VAR 0 2
59996: PUSH
59997: LD_INT 4
59999: MINUS
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: PUSH
60009: LD_VAR 0 1
60013: PUSH
60014: LD_INT 3
60016: MINUS
60017: PUSH
60018: LD_VAR 0 2
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: LIST
60030: PUSH
60031: LD_VAR 0 1
60035: PUSH
60036: LD_INT 4
60038: PLUS
60039: PUSH
60040: LD_VAR 0 2
60044: PUSH
60045: LD_INT 4
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: LIST
60052: PUSH
60053: LD_VAR 0 1
60057: PUSH
60058: LD_INT 3
60060: PLUS
60061: PUSH
60062: LD_VAR 0 2
60066: PUSH
60067: LD_INT 3
60069: PLUS
60070: PUSH
60071: LD_INT 5
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: LIST
60078: PUSH
60079: LD_VAR 0 1
60083: PUSH
60084: LD_VAR 0 2
60088: PUSH
60089: LD_INT 4
60091: PLUS
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: LIST
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: ST_TO_ADDR
// end ; 1 :
60108: GO 60808
60110: LD_INT 1
60112: DOUBLE
60113: EQUAL
60114: IFTRUE 60118
60116: GO 60251
60118: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60119: LD_ADDR_VAR 0 5
60123: PUSH
60124: LD_VAR 0 1
60128: PUSH
60129: LD_VAR 0 2
60133: PUSH
60134: LD_INT 4
60136: MINUS
60137: PUSH
60138: LD_INT 3
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: PUSH
60146: LD_VAR 0 1
60150: PUSH
60151: LD_INT 3
60153: MINUS
60154: PUSH
60155: LD_VAR 0 2
60159: PUSH
60160: LD_INT 3
60162: MINUS
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: LIST
60171: PUSH
60172: LD_VAR 0 1
60176: PUSH
60177: LD_INT 4
60179: MINUS
60180: PUSH
60181: LD_VAR 0 2
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: PUSH
60194: LD_VAR 0 1
60198: PUSH
60199: LD_VAR 0 2
60203: PUSH
60204: LD_INT 3
60206: PLUS
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: PUSH
60216: LD_VAR 0 1
60220: PUSH
60221: LD_INT 4
60223: PLUS
60224: PUSH
60225: LD_VAR 0 2
60229: PUSH
60230: LD_INT 4
60232: PLUS
60233: PUSH
60234: LD_INT 5
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: ST_TO_ADDR
// end ; 2 :
60249: GO 60808
60251: LD_INT 2
60253: DOUBLE
60254: EQUAL
60255: IFTRUE 60259
60257: GO 60388
60259: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60260: LD_ADDR_VAR 0 5
60264: PUSH
60265: LD_VAR 0 1
60269: PUSH
60270: LD_VAR 0 2
60274: PUSH
60275: LD_INT 3
60277: MINUS
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: LIST
60286: PUSH
60287: LD_VAR 0 1
60291: PUSH
60292: LD_INT 4
60294: PLUS
60295: PUSH
60296: LD_VAR 0 2
60300: PUSH
60301: LD_INT 4
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: LIST
60308: PUSH
60309: LD_VAR 0 1
60313: PUSH
60314: LD_VAR 0 2
60318: PUSH
60319: LD_INT 4
60321: PLUS
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: LIST
60330: PUSH
60331: LD_VAR 0 1
60335: PUSH
60336: LD_INT 3
60338: MINUS
60339: PUSH
60340: LD_VAR 0 2
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: PUSH
60353: LD_VAR 0 1
60357: PUSH
60358: LD_INT 4
60360: MINUS
60361: PUSH
60362: LD_VAR 0 2
60366: PUSH
60367: LD_INT 4
60369: MINUS
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: ST_TO_ADDR
// end ; 3 :
60386: GO 60808
60388: LD_INT 3
60390: DOUBLE
60391: EQUAL
60392: IFTRUE 60396
60394: GO 60529
60396: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60397: LD_ADDR_VAR 0 5
60401: PUSH
60402: LD_VAR 0 1
60406: PUSH
60407: LD_INT 3
60409: PLUS
60410: PUSH
60411: LD_VAR 0 2
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: PUSH
60424: LD_VAR 0 1
60428: PUSH
60429: LD_INT 4
60431: PLUS
60432: PUSH
60433: LD_VAR 0 2
60437: PUSH
60438: LD_INT 4
60440: PLUS
60441: PUSH
60442: LD_INT 5
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: PUSH
60450: LD_VAR 0 1
60454: PUSH
60455: LD_INT 4
60457: MINUS
60458: PUSH
60459: LD_VAR 0 2
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: LIST
60471: PUSH
60472: LD_VAR 0 1
60476: PUSH
60477: LD_VAR 0 2
60481: PUSH
60482: LD_INT 4
60484: MINUS
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: PUSH
60494: LD_VAR 0 1
60498: PUSH
60499: LD_INT 3
60501: MINUS
60502: PUSH
60503: LD_VAR 0 2
60507: PUSH
60508: LD_INT 3
60510: MINUS
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// end ; 4 :
60527: GO 60808
60529: LD_INT 4
60531: DOUBLE
60532: EQUAL
60533: IFTRUE 60537
60535: GO 60670
60537: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60538: LD_ADDR_VAR 0 5
60542: PUSH
60543: LD_VAR 0 1
60547: PUSH
60548: LD_VAR 0 2
60552: PUSH
60553: LD_INT 4
60555: PLUS
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: LIST
60564: PUSH
60565: LD_VAR 0 1
60569: PUSH
60570: LD_INT 3
60572: PLUS
60573: PUSH
60574: LD_VAR 0 2
60578: PUSH
60579: LD_INT 3
60581: PLUS
60582: PUSH
60583: LD_INT 5
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: PUSH
60591: LD_VAR 0 1
60595: PUSH
60596: LD_INT 4
60598: PLUS
60599: PUSH
60600: LD_VAR 0 2
60604: PUSH
60605: LD_INT 4
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: PUSH
60613: LD_VAR 0 1
60617: PUSH
60618: LD_VAR 0 2
60622: PUSH
60623: LD_INT 3
60625: MINUS
60626: PUSH
60627: LD_INT 3
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: PUSH
60635: LD_VAR 0 1
60639: PUSH
60640: LD_INT 4
60642: MINUS
60643: PUSH
60644: LD_VAR 0 2
60648: PUSH
60649: LD_INT 4
60651: MINUS
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: ST_TO_ADDR
// end ; 5 :
60668: GO 60808
60670: LD_INT 5
60672: DOUBLE
60673: EQUAL
60674: IFTRUE 60678
60676: GO 60807
60678: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60679: LD_ADDR_VAR 0 5
60683: PUSH
60684: LD_VAR 0 1
60688: PUSH
60689: LD_INT 4
60691: MINUS
60692: PUSH
60693: LD_VAR 0 2
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: PUSH
60706: LD_VAR 0 1
60710: PUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_INT 4
60718: MINUS
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: PUSH
60728: LD_VAR 0 1
60732: PUSH
60733: LD_INT 4
60735: PLUS
60736: PUSH
60737: LD_VAR 0 2
60741: PUSH
60742: LD_INT 4
60744: PLUS
60745: PUSH
60746: LD_INT 5
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: LIST
60753: PUSH
60754: LD_VAR 0 1
60758: PUSH
60759: LD_INT 3
60761: PLUS
60762: PUSH
60763: LD_VAR 0 2
60767: PUSH
60768: LD_INT 4
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: LIST
60775: PUSH
60776: LD_VAR 0 1
60780: PUSH
60781: LD_VAR 0 2
60785: PUSH
60786: LD_INT 3
60788: PLUS
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: ST_TO_ADDR
// end ; end ;
60805: GO 60808
60807: POP
// result := list ;
60808: LD_ADDR_VAR 0 4
60812: PUSH
60813: LD_VAR 0 5
60817: ST_TO_ADDR
// end ;
60818: LD_VAR 0 4
60822: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60823: LD_INT 0
60825: PPUSH
60826: PPUSH
60827: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60828: LD_VAR 0 1
60832: NOT
60833: PUSH
60834: LD_VAR 0 2
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: LD_INT 3
60847: PUSH
60848: LD_INT 4
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: IN
60857: NOT
60858: OR
60859: IFFALSE 60863
// exit ;
60861: GO 60955
// tmp := [ ] ;
60863: LD_ADDR_VAR 0 5
60867: PUSH
60868: EMPTY
60869: ST_TO_ADDR
// for i in units do
60870: LD_ADDR_VAR 0 4
60874: PUSH
60875: LD_VAR 0 1
60879: PUSH
60880: FOR_IN
60881: IFFALSE 60924
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60883: LD_ADDR_VAR 0 5
60887: PUSH
60888: LD_VAR 0 5
60892: PPUSH
60893: LD_VAR 0 5
60897: PUSH
60898: LD_INT 1
60900: PLUS
60901: PPUSH
60902: LD_VAR 0 4
60906: PPUSH
60907: LD_VAR 0 2
60911: PPUSH
60912: CALL_OW 259
60916: PPUSH
60917: CALL_OW 2
60921: ST_TO_ADDR
60922: GO 60880
60924: POP
60925: POP
// if not tmp then
60926: LD_VAR 0 5
60930: NOT
60931: IFFALSE 60935
// exit ;
60933: GO 60955
// result := SortListByListDesc ( units , tmp ) ;
60935: LD_ADDR_VAR 0 3
60939: PUSH
60940: LD_VAR 0 1
60944: PPUSH
60945: LD_VAR 0 5
60949: PPUSH
60950: CALL_OW 77
60954: ST_TO_ADDR
// end ;
60955: LD_VAR 0 3
60959: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60960: LD_INT 0
60962: PPUSH
60963: PPUSH
60964: PPUSH
// result := false ;
60965: LD_ADDR_VAR 0 3
60969: PUSH
60970: LD_INT 0
60972: ST_TO_ADDR
// x := GetX ( building ) ;
60973: LD_ADDR_VAR 0 4
60977: PUSH
60978: LD_VAR 0 2
60982: PPUSH
60983: CALL_OW 250
60987: ST_TO_ADDR
// y := GetY ( building ) ;
60988: LD_ADDR_VAR 0 5
60992: PUSH
60993: LD_VAR 0 2
60997: PPUSH
60998: CALL_OW 251
61002: ST_TO_ADDR
// if not building or not x or not y then
61003: LD_VAR 0 2
61007: NOT
61008: PUSH
61009: LD_VAR 0 4
61013: NOT
61014: OR
61015: PUSH
61016: LD_VAR 0 5
61020: NOT
61021: OR
61022: IFFALSE 61026
// exit ;
61024: GO 61118
// if GetTaskList ( unit ) then
61026: LD_VAR 0 1
61030: PPUSH
61031: CALL_OW 437
61035: IFFALSE 61118
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61037: LD_STRING e
61039: PUSH
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 437
61049: PUSH
61050: LD_INT 1
61052: ARRAY
61053: PUSH
61054: LD_INT 1
61056: ARRAY
61057: EQUAL
61058: PUSH
61059: LD_VAR 0 4
61063: PUSH
61064: LD_VAR 0 1
61068: PPUSH
61069: CALL_OW 437
61073: PUSH
61074: LD_INT 1
61076: ARRAY
61077: PUSH
61078: LD_INT 2
61080: ARRAY
61081: EQUAL
61082: AND
61083: PUSH
61084: LD_VAR 0 5
61088: PUSH
61089: LD_VAR 0 1
61093: PPUSH
61094: CALL_OW 437
61098: PUSH
61099: LD_INT 1
61101: ARRAY
61102: PUSH
61103: LD_INT 3
61105: ARRAY
61106: EQUAL
61107: AND
61108: IFFALSE 61118
// result := true end ;
61110: LD_ADDR_VAR 0 3
61114: PUSH
61115: LD_INT 1
61117: ST_TO_ADDR
// end ;
61118: LD_VAR 0 3
61122: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61123: LD_INT 0
61125: PPUSH
// result := false ;
61126: LD_ADDR_VAR 0 4
61130: PUSH
61131: LD_INT 0
61133: ST_TO_ADDR
// if GetTaskList ( unit ) then
61134: LD_VAR 0 1
61138: PPUSH
61139: CALL_OW 437
61143: IFFALSE 61226
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61145: LD_STRING M
61147: PUSH
61148: LD_VAR 0 1
61152: PPUSH
61153: CALL_OW 437
61157: PUSH
61158: LD_INT 1
61160: ARRAY
61161: PUSH
61162: LD_INT 1
61164: ARRAY
61165: EQUAL
61166: PUSH
61167: LD_VAR 0 2
61171: PUSH
61172: LD_VAR 0 1
61176: PPUSH
61177: CALL_OW 437
61181: PUSH
61182: LD_INT 1
61184: ARRAY
61185: PUSH
61186: LD_INT 2
61188: ARRAY
61189: EQUAL
61190: AND
61191: PUSH
61192: LD_VAR 0 3
61196: PUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: CALL_OW 437
61206: PUSH
61207: LD_INT 1
61209: ARRAY
61210: PUSH
61211: LD_INT 3
61213: ARRAY
61214: EQUAL
61215: AND
61216: IFFALSE 61226
// result := true ;
61218: LD_ADDR_VAR 0 4
61222: PUSH
61223: LD_INT 1
61225: ST_TO_ADDR
// end ; end ;
61226: LD_VAR 0 4
61230: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61231: LD_INT 0
61233: PPUSH
61234: PPUSH
61235: PPUSH
61236: PPUSH
// if not unit or not area then
61237: LD_VAR 0 1
61241: NOT
61242: PUSH
61243: LD_VAR 0 2
61247: NOT
61248: OR
61249: IFFALSE 61253
// exit ;
61251: GO 61417
// tmp := AreaToList ( area , i ) ;
61253: LD_ADDR_VAR 0 6
61257: PUSH
61258: LD_VAR 0 2
61262: PPUSH
61263: LD_VAR 0 5
61267: PPUSH
61268: CALL_OW 517
61272: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61273: LD_ADDR_VAR 0 5
61277: PUSH
61278: DOUBLE
61279: LD_INT 1
61281: DEC
61282: ST_TO_ADDR
61283: LD_VAR 0 6
61287: PUSH
61288: LD_INT 1
61290: ARRAY
61291: PUSH
61292: FOR_TO
61293: IFFALSE 61415
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61295: LD_ADDR_VAR 0 7
61299: PUSH
61300: LD_VAR 0 6
61304: PUSH
61305: LD_INT 1
61307: ARRAY
61308: PUSH
61309: LD_VAR 0 5
61313: ARRAY
61314: PUSH
61315: LD_VAR 0 6
61319: PUSH
61320: LD_INT 2
61322: ARRAY
61323: PUSH
61324: LD_VAR 0 5
61328: ARRAY
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61334: LD_VAR 0 7
61338: PUSH
61339: LD_INT 1
61341: ARRAY
61342: PPUSH
61343: LD_VAR 0 7
61347: PUSH
61348: LD_INT 2
61350: ARRAY
61351: PPUSH
61352: CALL_OW 428
61356: PUSH
61357: LD_INT 0
61359: EQUAL
61360: IFFALSE 61413
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61362: LD_VAR 0 1
61366: PPUSH
61367: LD_VAR 0 7
61371: PUSH
61372: LD_INT 1
61374: ARRAY
61375: PPUSH
61376: LD_VAR 0 7
61380: PUSH
61381: LD_INT 2
61383: ARRAY
61384: PPUSH
61385: LD_VAR 0 3
61389: PPUSH
61390: CALL_OW 48
// result := IsPlaced ( unit ) ;
61394: LD_ADDR_VAR 0 4
61398: PUSH
61399: LD_VAR 0 1
61403: PPUSH
61404: CALL_OW 305
61408: ST_TO_ADDR
// exit ;
61409: POP
61410: POP
61411: GO 61417
// end ; end ;
61413: GO 61292
61415: POP
61416: POP
// end ;
61417: LD_VAR 0 4
61421: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61422: LD_INT 0
61424: PPUSH
61425: PPUSH
61426: PPUSH
// if not side or side > 8 then
61427: LD_VAR 0 1
61431: NOT
61432: PUSH
61433: LD_VAR 0 1
61437: PUSH
61438: LD_INT 8
61440: GREATER
61441: OR
61442: IFFALSE 61446
// exit ;
61444: GO 61633
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61446: LD_ADDR_VAR 0 4
61450: PUSH
61451: LD_INT 22
61453: PUSH
61454: LD_VAR 0 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 21
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PPUSH
61477: CALL_OW 69
61481: ST_TO_ADDR
// if not tmp then
61482: LD_VAR 0 4
61486: NOT
61487: IFFALSE 61491
// exit ;
61489: GO 61633
// enable_addtolog := true ;
61491: LD_ADDR_OWVAR 81
61495: PUSH
61496: LD_INT 1
61498: ST_TO_ADDR
// AddToLog ( [ ) ;
61499: LD_STRING [
61501: PPUSH
61502: CALL_OW 561
// for i in tmp do
61506: LD_ADDR_VAR 0 3
61510: PUSH
61511: LD_VAR 0 4
61515: PUSH
61516: FOR_IN
61517: IFFALSE 61624
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61519: LD_STRING [
61521: PUSH
61522: LD_VAR 0 3
61526: PPUSH
61527: CALL_OW 266
61531: STR
61532: PUSH
61533: LD_STRING , 
61535: STR
61536: PUSH
61537: LD_VAR 0 3
61541: PPUSH
61542: CALL_OW 250
61546: STR
61547: PUSH
61548: LD_STRING , 
61550: STR
61551: PUSH
61552: LD_VAR 0 3
61556: PPUSH
61557: CALL_OW 251
61561: STR
61562: PUSH
61563: LD_STRING , 
61565: STR
61566: PUSH
61567: LD_VAR 0 3
61571: PPUSH
61572: CALL_OW 254
61576: STR
61577: PUSH
61578: LD_STRING , 
61580: STR
61581: PUSH
61582: LD_VAR 0 3
61586: PPUSH
61587: LD_INT 1
61589: PPUSH
61590: CALL_OW 268
61594: STR
61595: PUSH
61596: LD_STRING , 
61598: STR
61599: PUSH
61600: LD_VAR 0 3
61604: PPUSH
61605: LD_INT 2
61607: PPUSH
61608: CALL_OW 268
61612: STR
61613: PUSH
61614: LD_STRING ],
61616: STR
61617: PPUSH
61618: CALL_OW 561
// end ;
61622: GO 61516
61624: POP
61625: POP
// AddToLog ( ]; ) ;
61626: LD_STRING ];
61628: PPUSH
61629: CALL_OW 561
// end ;
61633: LD_VAR 0 2
61637: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61638: LD_INT 0
61640: PPUSH
61641: PPUSH
61642: PPUSH
61643: PPUSH
61644: PPUSH
// if not area or not rate or not max then
61645: LD_VAR 0 1
61649: NOT
61650: PUSH
61651: LD_VAR 0 2
61655: NOT
61656: OR
61657: PUSH
61658: LD_VAR 0 4
61662: NOT
61663: OR
61664: IFFALSE 61668
// exit ;
61666: GO 61857
// while 1 do
61668: LD_INT 1
61670: IFFALSE 61857
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61672: LD_ADDR_VAR 0 9
61676: PUSH
61677: LD_VAR 0 1
61681: PPUSH
61682: LD_INT 1
61684: PPUSH
61685: CALL_OW 287
61689: PUSH
61690: LD_INT 10
61692: MUL
61693: ST_TO_ADDR
// r := rate / 10 ;
61694: LD_ADDR_VAR 0 7
61698: PUSH
61699: LD_VAR 0 2
61703: PUSH
61704: LD_INT 10
61706: DIVREAL
61707: ST_TO_ADDR
// time := 1 1$00 ;
61708: LD_ADDR_VAR 0 8
61712: PUSH
61713: LD_INT 2100
61715: ST_TO_ADDR
// if amount < min then
61716: LD_VAR 0 9
61720: PUSH
61721: LD_VAR 0 3
61725: LESS
61726: IFFALSE 61744
// r := r * 2 else
61728: LD_ADDR_VAR 0 7
61732: PUSH
61733: LD_VAR 0 7
61737: PUSH
61738: LD_INT 2
61740: MUL
61741: ST_TO_ADDR
61742: GO 61770
// if amount > max then
61744: LD_VAR 0 9
61748: PUSH
61749: LD_VAR 0 4
61753: GREATER
61754: IFFALSE 61770
// r := r / 2 ;
61756: LD_ADDR_VAR 0 7
61760: PUSH
61761: LD_VAR 0 7
61765: PUSH
61766: LD_INT 2
61768: DIVREAL
61769: ST_TO_ADDR
// time := time / r ;
61770: LD_ADDR_VAR 0 8
61774: PUSH
61775: LD_VAR 0 8
61779: PUSH
61780: LD_VAR 0 7
61784: DIVREAL
61785: ST_TO_ADDR
// if time < 0 then
61786: LD_VAR 0 8
61790: PUSH
61791: LD_INT 0
61793: LESS
61794: IFFALSE 61811
// time := time * - 1 ;
61796: LD_ADDR_VAR 0 8
61800: PUSH
61801: LD_VAR 0 8
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: MUL
61810: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61811: LD_VAR 0 8
61815: PUSH
61816: LD_INT 35
61818: PPUSH
61819: LD_INT 875
61821: PPUSH
61822: CALL_OW 12
61826: PLUS
61827: PPUSH
61828: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61832: LD_INT 1
61834: PPUSH
61835: LD_INT 5
61837: PPUSH
61838: CALL_OW 12
61842: PPUSH
61843: LD_VAR 0 1
61847: PPUSH
61848: LD_INT 1
61850: PPUSH
61851: CALL_OW 55
// end ;
61855: GO 61668
// end ;
61857: LD_VAR 0 5
61861: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61862: LD_INT 0
61864: PPUSH
61865: PPUSH
61866: PPUSH
61867: PPUSH
61868: PPUSH
61869: PPUSH
61870: PPUSH
61871: PPUSH
// if not turrets or not factories then
61872: LD_VAR 0 1
61876: NOT
61877: PUSH
61878: LD_VAR 0 2
61882: NOT
61883: OR
61884: IFFALSE 61888
// exit ;
61886: GO 62195
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61888: LD_ADDR_VAR 0 10
61892: PUSH
61893: LD_INT 5
61895: PUSH
61896: LD_INT 6
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: PUSH
61906: LD_INT 4
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 3
61915: PUSH
61916: LD_INT 5
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 24
61930: PUSH
61931: LD_INT 25
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 23
61940: PUSH
61941: LD_INT 27
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 42
61954: PUSH
61955: LD_INT 43
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 44
61964: PUSH
61965: LD_INT 46
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 45
61974: PUSH
61975: LD_INT 47
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: LIST
61991: ST_TO_ADDR
// result := [ ] ;
61992: LD_ADDR_VAR 0 3
61996: PUSH
61997: EMPTY
61998: ST_TO_ADDR
// for i in turrets do
61999: LD_ADDR_VAR 0 4
62003: PUSH
62004: LD_VAR 0 1
62008: PUSH
62009: FOR_IN
62010: IFFALSE 62193
// begin nat := GetNation ( i ) ;
62012: LD_ADDR_VAR 0 7
62016: PUSH
62017: LD_VAR 0 4
62021: PPUSH
62022: CALL_OW 248
62026: ST_TO_ADDR
// weapon := 0 ;
62027: LD_ADDR_VAR 0 8
62031: PUSH
62032: LD_INT 0
62034: ST_TO_ADDR
// if not nat then
62035: LD_VAR 0 7
62039: NOT
62040: IFFALSE 62044
// continue ;
62042: GO 62009
// for j in list [ nat ] do
62044: LD_ADDR_VAR 0 5
62048: PUSH
62049: LD_VAR 0 10
62053: PUSH
62054: LD_VAR 0 7
62058: ARRAY
62059: PUSH
62060: FOR_IN
62061: IFFALSE 62102
// if GetBWeapon ( i ) = j [ 1 ] then
62063: LD_VAR 0 4
62067: PPUSH
62068: CALL_OW 269
62072: PUSH
62073: LD_VAR 0 5
62077: PUSH
62078: LD_INT 1
62080: ARRAY
62081: EQUAL
62082: IFFALSE 62100
// begin weapon := j [ 2 ] ;
62084: LD_ADDR_VAR 0 8
62088: PUSH
62089: LD_VAR 0 5
62093: PUSH
62094: LD_INT 2
62096: ARRAY
62097: ST_TO_ADDR
// break ;
62098: GO 62102
// end ;
62100: GO 62060
62102: POP
62103: POP
// if not weapon then
62104: LD_VAR 0 8
62108: NOT
62109: IFFALSE 62113
// continue ;
62111: GO 62009
// for k in factories do
62113: LD_ADDR_VAR 0 6
62117: PUSH
62118: LD_VAR 0 2
62122: PUSH
62123: FOR_IN
62124: IFFALSE 62189
// begin weapons := AvailableWeaponList ( k ) ;
62126: LD_ADDR_VAR 0 9
62130: PUSH
62131: LD_VAR 0 6
62135: PPUSH
62136: CALL_OW 478
62140: ST_TO_ADDR
// if not weapons then
62141: LD_VAR 0 9
62145: NOT
62146: IFFALSE 62150
// continue ;
62148: GO 62123
// if weapon in weapons then
62150: LD_VAR 0 8
62154: PUSH
62155: LD_VAR 0 9
62159: IN
62160: IFFALSE 62187
// begin result := [ i , weapon ] ;
62162: LD_ADDR_VAR 0 3
62166: PUSH
62167: LD_VAR 0 4
62171: PUSH
62172: LD_VAR 0 8
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: ST_TO_ADDR
// exit ;
62181: POP
62182: POP
62183: POP
62184: POP
62185: GO 62195
// end ; end ;
62187: GO 62123
62189: POP
62190: POP
// end ;
62191: GO 62009
62193: POP
62194: POP
// end ;
62195: LD_VAR 0 3
62199: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62200: LD_INT 0
62202: PPUSH
// if not side or side > 8 then
62203: LD_VAR 0 3
62207: NOT
62208: PUSH
62209: LD_VAR 0 3
62213: PUSH
62214: LD_INT 8
62216: GREATER
62217: OR
62218: IFFALSE 62222
// exit ;
62220: GO 62281
// if not range then
62222: LD_VAR 0 4
62226: NOT
62227: IFFALSE 62238
// range := - 12 ;
62229: LD_ADDR_VAR 0 4
62233: PUSH
62234: LD_INT 12
62236: NEG
62237: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62238: LD_VAR 0 1
62242: PPUSH
62243: LD_VAR 0 2
62247: PPUSH
62248: LD_VAR 0 3
62252: PPUSH
62253: LD_VAR 0 4
62257: PPUSH
62258: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62262: LD_VAR 0 1
62266: PPUSH
62267: LD_VAR 0 2
62271: PPUSH
62272: LD_VAR 0 3
62276: PPUSH
62277: CALL_OW 331
// end ;
62281: LD_VAR 0 5
62285: RET
// export function Video ( mode ) ; begin
62286: LD_INT 0
62288: PPUSH
// ingame_video = mode ;
62289: LD_ADDR_OWVAR 52
62293: PUSH
62294: LD_VAR 0 1
62298: ST_TO_ADDR
// interface_hidden = mode ;
62299: LD_ADDR_OWVAR 54
62303: PUSH
62304: LD_VAR 0 1
62308: ST_TO_ADDR
// end ;
62309: LD_VAR 0 2
62313: RET
// export function Join ( array , element ) ; begin
62314: LD_INT 0
62316: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62317: LD_ADDR_VAR 0 3
62321: PUSH
62322: LD_VAR 0 1
62326: PPUSH
62327: LD_VAR 0 1
62331: PUSH
62332: LD_INT 1
62334: PLUS
62335: PPUSH
62336: LD_VAR 0 2
62340: PPUSH
62341: CALL_OW 1
62345: ST_TO_ADDR
// end ;
62346: LD_VAR 0 3
62350: RET
// export function JoinUnion ( array , element ) ; begin
62351: LD_INT 0
62353: PPUSH
// result := array union element ;
62354: LD_ADDR_VAR 0 3
62358: PUSH
62359: LD_VAR 0 1
62363: PUSH
62364: LD_VAR 0 2
62368: UNION
62369: ST_TO_ADDR
// end ;
62370: LD_VAR 0 3
62374: RET
// export function GetBehemoths ( side ) ; begin
62375: LD_INT 0
62377: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62378: LD_ADDR_VAR 0 2
62382: PUSH
62383: LD_INT 22
62385: PUSH
62386: LD_VAR 0 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 31
62397: PUSH
62398: LD_INT 25
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PPUSH
62409: CALL_OW 69
62413: ST_TO_ADDR
// end ;
62414: LD_VAR 0 2
62418: RET
// export function Shuffle ( array ) ; var i , index ; begin
62419: LD_INT 0
62421: PPUSH
62422: PPUSH
62423: PPUSH
// result := [ ] ;
62424: LD_ADDR_VAR 0 2
62428: PUSH
62429: EMPTY
62430: ST_TO_ADDR
// if not array then
62431: LD_VAR 0 1
62435: NOT
62436: IFFALSE 62440
// exit ;
62438: GO 62539
// Randomize ;
62440: CALL_OW 10
// for i = array downto 1 do
62444: LD_ADDR_VAR 0 3
62448: PUSH
62449: DOUBLE
62450: LD_VAR 0 1
62454: INC
62455: ST_TO_ADDR
62456: LD_INT 1
62458: PUSH
62459: FOR_DOWNTO
62460: IFFALSE 62537
// begin index := rand ( 1 , array ) ;
62462: LD_ADDR_VAR 0 4
62466: PUSH
62467: LD_INT 1
62469: PPUSH
62470: LD_VAR 0 1
62474: PPUSH
62475: CALL_OW 12
62479: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62480: LD_ADDR_VAR 0 2
62484: PUSH
62485: LD_VAR 0 2
62489: PPUSH
62490: LD_VAR 0 2
62494: PUSH
62495: LD_INT 1
62497: PLUS
62498: PPUSH
62499: LD_VAR 0 1
62503: PUSH
62504: LD_VAR 0 4
62508: ARRAY
62509: PPUSH
62510: CALL_OW 2
62514: ST_TO_ADDR
// array := Delete ( array , index ) ;
62515: LD_ADDR_VAR 0 1
62519: PUSH
62520: LD_VAR 0 1
62524: PPUSH
62525: LD_VAR 0 4
62529: PPUSH
62530: CALL_OW 3
62534: ST_TO_ADDR
// end ;
62535: GO 62459
62537: POP
62538: POP
// end ;
62539: LD_VAR 0 2
62543: RET
// export function GetBaseMaterials ( base ) ; begin
62544: LD_INT 0
62546: PPUSH
// result := [ 0 , 0 , 0 ] ;
62547: LD_ADDR_VAR 0 2
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: ST_TO_ADDR
// if not base then
62566: LD_VAR 0 1
62570: NOT
62571: IFFALSE 62575
// exit ;
62573: GO 62624
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62575: LD_ADDR_VAR 0 2
62579: PUSH
62580: LD_VAR 0 1
62584: PPUSH
62585: LD_INT 1
62587: PPUSH
62588: CALL_OW 275
62592: PUSH
62593: LD_VAR 0 1
62597: PPUSH
62598: LD_INT 2
62600: PPUSH
62601: CALL_OW 275
62605: PUSH
62606: LD_VAR 0 1
62610: PPUSH
62611: LD_INT 3
62613: PPUSH
62614: CALL_OW 275
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: LIST
62623: ST_TO_ADDR
// end ;
62624: LD_VAR 0 2
62628: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62629: LD_INT 0
62631: PPUSH
62632: PPUSH
// result := array ;
62633: LD_ADDR_VAR 0 3
62637: PUSH
62638: LD_VAR 0 1
62642: ST_TO_ADDR
// if size > 0 then
62643: LD_VAR 0 2
62647: PUSH
62648: LD_INT 0
62650: GREATER
62651: IFFALSE 62697
// for i := array downto size do
62653: LD_ADDR_VAR 0 4
62657: PUSH
62658: DOUBLE
62659: LD_VAR 0 1
62663: INC
62664: ST_TO_ADDR
62665: LD_VAR 0 2
62669: PUSH
62670: FOR_DOWNTO
62671: IFFALSE 62695
// result := Delete ( result , result ) ;
62673: LD_ADDR_VAR 0 3
62677: PUSH
62678: LD_VAR 0 3
62682: PPUSH
62683: LD_VAR 0 3
62687: PPUSH
62688: CALL_OW 3
62692: ST_TO_ADDR
62693: GO 62670
62695: POP
62696: POP
// end ;
62697: LD_VAR 0 3
62701: RET
// export function ComExit ( unit ) ; var tmp ; begin
62702: LD_INT 0
62704: PPUSH
62705: PPUSH
// if not IsInUnit ( unit ) then
62706: LD_VAR 0 1
62710: PPUSH
62711: CALL_OW 310
62715: NOT
62716: IFFALSE 62720
// exit ;
62718: GO 62780
// tmp := IsInUnit ( unit ) ;
62720: LD_ADDR_VAR 0 3
62724: PUSH
62725: LD_VAR 0 1
62729: PPUSH
62730: CALL_OW 310
62734: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62735: LD_VAR 0 3
62739: PPUSH
62740: CALL_OW 247
62744: PUSH
62745: LD_INT 2
62747: EQUAL
62748: IFFALSE 62761
// ComExitVehicle ( unit ) else
62750: LD_VAR 0 1
62754: PPUSH
62755: CALL_OW 121
62759: GO 62770
// ComExitBuilding ( unit ) ;
62761: LD_VAR 0 1
62765: PPUSH
62766: CALL_OW 122
// result := tmp ;
62770: LD_ADDR_VAR 0 2
62774: PUSH
62775: LD_VAR 0 3
62779: ST_TO_ADDR
// end ;
62780: LD_VAR 0 2
62784: RET
// export function ComExitAll ( units ) ; var i ; begin
62785: LD_INT 0
62787: PPUSH
62788: PPUSH
// if not units then
62789: LD_VAR 0 1
62793: NOT
62794: IFFALSE 62798
// exit ;
62796: GO 62824
// for i in units do
62798: LD_ADDR_VAR 0 3
62802: PUSH
62803: LD_VAR 0 1
62807: PUSH
62808: FOR_IN
62809: IFFALSE 62822
// ComExit ( i ) ;
62811: LD_VAR 0 3
62815: PPUSH
62816: CALL 62702 0 1
62820: GO 62808
62822: POP
62823: POP
// end ;
62824: LD_VAR 0 2
62828: RET
// export function ResetHc ; begin
62829: LD_INT 0
62831: PPUSH
// InitHc ;
62832: CALL_OW 19
// hc_importance := 0 ;
62836: LD_ADDR_OWVAR 32
62840: PUSH
62841: LD_INT 0
62843: ST_TO_ADDR
// end ;
62844: LD_VAR 0 1
62848: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62849: LD_INT 0
62851: PPUSH
62852: PPUSH
62853: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62854: LD_ADDR_VAR 0 6
62858: PUSH
62859: LD_VAR 0 1
62863: PUSH
62864: LD_VAR 0 3
62868: PLUS
62869: PUSH
62870: LD_INT 2
62872: DIV
62873: ST_TO_ADDR
// if _x < 0 then
62874: LD_VAR 0 6
62878: PUSH
62879: LD_INT 0
62881: LESS
62882: IFFALSE 62899
// _x := _x * - 1 ;
62884: LD_ADDR_VAR 0 6
62888: PUSH
62889: LD_VAR 0 6
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: MUL
62898: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62899: LD_ADDR_VAR 0 7
62903: PUSH
62904: LD_VAR 0 2
62908: PUSH
62909: LD_VAR 0 4
62913: PLUS
62914: PUSH
62915: LD_INT 2
62917: DIV
62918: ST_TO_ADDR
// if _y < 0 then
62919: LD_VAR 0 7
62923: PUSH
62924: LD_INT 0
62926: LESS
62927: IFFALSE 62944
// _y := _y * - 1 ;
62929: LD_ADDR_VAR 0 7
62933: PUSH
62934: LD_VAR 0 7
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: MUL
62943: ST_TO_ADDR
// result := [ _x , _y ] ;
62944: LD_ADDR_VAR 0 5
62948: PUSH
62949: LD_VAR 0 6
62953: PUSH
62954: LD_VAR 0 7
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: ST_TO_ADDR
// end ;
62963: LD_VAR 0 5
62967: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62968: LD_INT 0
62970: PPUSH
62971: PPUSH
62972: PPUSH
62973: PPUSH
// task := GetTaskList ( unit ) ;
62974: LD_ADDR_VAR 0 7
62978: PUSH
62979: LD_VAR 0 1
62983: PPUSH
62984: CALL_OW 437
62988: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62989: LD_VAR 0 7
62993: NOT
62994: PUSH
62995: LD_VAR 0 1
62999: PPUSH
63000: LD_VAR 0 2
63004: PPUSH
63005: CALL_OW 308
63009: NOT
63010: AND
63011: IFFALSE 63015
// exit ;
63013: GO 63133
// if IsInArea ( unit , area ) then
63015: LD_VAR 0 1
63019: PPUSH
63020: LD_VAR 0 2
63024: PPUSH
63025: CALL_OW 308
63029: IFFALSE 63047
// begin ComMoveToArea ( unit , goAway ) ;
63031: LD_VAR 0 1
63035: PPUSH
63036: LD_VAR 0 3
63040: PPUSH
63041: CALL_OW 113
// exit ;
63045: GO 63133
// end ; if task [ 1 ] [ 1 ] <> M then
63047: LD_VAR 0 7
63051: PUSH
63052: LD_INT 1
63054: ARRAY
63055: PUSH
63056: LD_INT 1
63058: ARRAY
63059: PUSH
63060: LD_STRING M
63062: NONEQUAL
63063: IFFALSE 63067
// exit ;
63065: GO 63133
// x := task [ 1 ] [ 2 ] ;
63067: LD_ADDR_VAR 0 5
63071: PUSH
63072: LD_VAR 0 7
63076: PUSH
63077: LD_INT 1
63079: ARRAY
63080: PUSH
63081: LD_INT 2
63083: ARRAY
63084: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63085: LD_ADDR_VAR 0 6
63089: PUSH
63090: LD_VAR 0 7
63094: PUSH
63095: LD_INT 1
63097: ARRAY
63098: PUSH
63099: LD_INT 3
63101: ARRAY
63102: ST_TO_ADDR
// if InArea ( x , y , area ) then
63103: LD_VAR 0 5
63107: PPUSH
63108: LD_VAR 0 6
63112: PPUSH
63113: LD_VAR 0 2
63117: PPUSH
63118: CALL_OW 309
63122: IFFALSE 63133
// ComStop ( unit ) ;
63124: LD_VAR 0 1
63128: PPUSH
63129: CALL_OW 141
// end ;
63133: LD_VAR 0 4
63137: RET
// export function Abs ( value ) ; begin
63138: LD_INT 0
63140: PPUSH
// result := value ;
63141: LD_ADDR_VAR 0 2
63145: PUSH
63146: LD_VAR 0 1
63150: ST_TO_ADDR
// if value < 0 then
63151: LD_VAR 0 1
63155: PUSH
63156: LD_INT 0
63158: LESS
63159: IFFALSE 63176
// result := value * - 1 ;
63161: LD_ADDR_VAR 0 2
63165: PUSH
63166: LD_VAR 0 1
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: MUL
63175: ST_TO_ADDR
// end ;
63176: LD_VAR 0 2
63180: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63181: LD_INT 0
63183: PPUSH
63184: PPUSH
63185: PPUSH
63186: PPUSH
63187: PPUSH
63188: PPUSH
63189: PPUSH
63190: PPUSH
// if not unit or not building then
63191: LD_VAR 0 1
63195: NOT
63196: PUSH
63197: LD_VAR 0 2
63201: NOT
63202: OR
63203: IFFALSE 63207
// exit ;
63205: GO 63433
// x := GetX ( building ) ;
63207: LD_ADDR_VAR 0 4
63211: PUSH
63212: LD_VAR 0 2
63216: PPUSH
63217: CALL_OW 250
63221: ST_TO_ADDR
// y := GetY ( building ) ;
63222: LD_ADDR_VAR 0 6
63226: PUSH
63227: LD_VAR 0 2
63231: PPUSH
63232: CALL_OW 251
63236: ST_TO_ADDR
// d := GetDir ( building ) ;
63237: LD_ADDR_VAR 0 8
63241: PUSH
63242: LD_VAR 0 2
63246: PPUSH
63247: CALL_OW 254
63251: ST_TO_ADDR
// r := 4 ;
63252: LD_ADDR_VAR 0 9
63256: PUSH
63257: LD_INT 4
63259: ST_TO_ADDR
// for i := 1 to 5 do
63260: LD_ADDR_VAR 0 10
63264: PUSH
63265: DOUBLE
63266: LD_INT 1
63268: DEC
63269: ST_TO_ADDR
63270: LD_INT 5
63272: PUSH
63273: FOR_TO
63274: IFFALSE 63431
// begin _x := ShiftX ( x , d , r + i ) ;
63276: LD_ADDR_VAR 0 5
63280: PUSH
63281: LD_VAR 0 4
63285: PPUSH
63286: LD_VAR 0 8
63290: PPUSH
63291: LD_VAR 0 9
63295: PUSH
63296: LD_VAR 0 10
63300: PLUS
63301: PPUSH
63302: CALL_OW 272
63306: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63307: LD_ADDR_VAR 0 7
63311: PUSH
63312: LD_VAR 0 6
63316: PPUSH
63317: LD_VAR 0 8
63321: PPUSH
63322: LD_VAR 0 9
63326: PUSH
63327: LD_VAR 0 10
63331: PLUS
63332: PPUSH
63333: CALL_OW 273
63337: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63338: LD_VAR 0 5
63342: PPUSH
63343: LD_VAR 0 7
63347: PPUSH
63348: CALL_OW 488
63352: PUSH
63353: LD_VAR 0 5
63357: PPUSH
63358: LD_VAR 0 7
63362: PPUSH
63363: CALL_OW 428
63367: PPUSH
63368: CALL_OW 247
63372: PUSH
63373: LD_INT 3
63375: PUSH
63376: LD_INT 2
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: IN
63383: NOT
63384: AND
63385: IFFALSE 63429
// begin ComMoveXY ( unit , _x , _y ) ;
63387: LD_VAR 0 1
63391: PPUSH
63392: LD_VAR 0 5
63396: PPUSH
63397: LD_VAR 0 7
63401: PPUSH
63402: CALL_OW 111
// result := [ _x , _y ] ;
63406: LD_ADDR_VAR 0 3
63410: PUSH
63411: LD_VAR 0 5
63415: PUSH
63416: LD_VAR 0 7
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: ST_TO_ADDR
// exit ;
63425: POP
63426: POP
63427: GO 63433
// end ; end ;
63429: GO 63273
63431: POP
63432: POP
// end ;
63433: LD_VAR 0 3
63437: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63438: LD_INT 0
63440: PPUSH
63441: PPUSH
63442: PPUSH
// result := 0 ;
63443: LD_ADDR_VAR 0 3
63447: PUSH
63448: LD_INT 0
63450: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63451: LD_VAR 0 1
63455: PUSH
63456: LD_INT 0
63458: LESS
63459: PUSH
63460: LD_VAR 0 1
63464: PUSH
63465: LD_INT 8
63467: GREATER
63468: OR
63469: PUSH
63470: LD_VAR 0 2
63474: PUSH
63475: LD_INT 0
63477: LESS
63478: OR
63479: PUSH
63480: LD_VAR 0 2
63484: PUSH
63485: LD_INT 8
63487: GREATER
63488: OR
63489: IFFALSE 63493
// exit ;
63491: GO 63568
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63493: LD_ADDR_VAR 0 4
63497: PUSH
63498: LD_INT 22
63500: PUSH
63501: LD_VAR 0 2
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PPUSH
63510: CALL_OW 69
63514: PUSH
63515: FOR_IN
63516: IFFALSE 63566
// begin un := UnitShoot ( i ) ;
63518: LD_ADDR_VAR 0 5
63522: PUSH
63523: LD_VAR 0 4
63527: PPUSH
63528: CALL_OW 504
63532: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63533: LD_VAR 0 5
63537: PPUSH
63538: CALL_OW 255
63542: PUSH
63543: LD_VAR 0 1
63547: EQUAL
63548: IFFALSE 63564
// begin result := un ;
63550: LD_ADDR_VAR 0 3
63554: PUSH
63555: LD_VAR 0 5
63559: ST_TO_ADDR
// exit ;
63560: POP
63561: POP
63562: GO 63568
// end ; end ;
63564: GO 63515
63566: POP
63567: POP
// end ;
63568: LD_VAR 0 3
63572: RET
// export function GetCargoBay ( units ) ; begin
63573: LD_INT 0
63575: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63576: LD_ADDR_VAR 0 2
63580: PUSH
63581: LD_VAR 0 1
63585: PPUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 34
63591: PUSH
63592: LD_INT 12
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 34
63601: PUSH
63602: LD_INT 51
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 34
63611: PUSH
63612: LD_INT 32
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 34
63621: PUSH
63622: LD_EXP 97
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: PPUSH
63638: CALL_OW 72
63642: ST_TO_ADDR
// end ;
63643: LD_VAR 0 2
63647: RET
// export function Negate ( value ) ; begin
63648: LD_INT 0
63650: PPUSH
// result := not value ;
63651: LD_ADDR_VAR 0 2
63655: PUSH
63656: LD_VAR 0 1
63660: NOT
63661: ST_TO_ADDR
// end ;
63662: LD_VAR 0 2
63666: RET
// export function Inc ( value ) ; begin
63667: LD_INT 0
63669: PPUSH
// result := value + 1 ;
63670: LD_ADDR_VAR 0 2
63674: PUSH
63675: LD_VAR 0 1
63679: PUSH
63680: LD_INT 1
63682: PLUS
63683: ST_TO_ADDR
// end ;
63684: LD_VAR 0 2
63688: RET
// export function Dec ( value ) ; begin
63689: LD_INT 0
63691: PPUSH
// result := value - 1 ;
63692: LD_ADDR_VAR 0 2
63696: PUSH
63697: LD_VAR 0 1
63701: PUSH
63702: LD_INT 1
63704: MINUS
63705: ST_TO_ADDR
// end ;
63706: LD_VAR 0 2
63710: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63711: LD_INT 0
63713: PPUSH
63714: PPUSH
63715: PPUSH
63716: PPUSH
63717: PPUSH
63718: PPUSH
63719: PPUSH
63720: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63721: LD_VAR 0 1
63725: PPUSH
63726: LD_VAR 0 2
63730: PPUSH
63731: CALL_OW 488
63735: NOT
63736: PUSH
63737: LD_VAR 0 3
63741: PPUSH
63742: LD_VAR 0 4
63746: PPUSH
63747: CALL_OW 488
63751: NOT
63752: OR
63753: IFFALSE 63766
// begin result := - 1 ;
63755: LD_ADDR_VAR 0 5
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: ST_TO_ADDR
// exit ;
63764: GO 64001
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63766: LD_ADDR_VAR 0 12
63770: PUSH
63771: LD_VAR 0 1
63775: PPUSH
63776: LD_VAR 0 2
63780: PPUSH
63781: LD_VAR 0 3
63785: PPUSH
63786: LD_VAR 0 4
63790: PPUSH
63791: CALL 62849 0 4
63795: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63796: LD_ADDR_VAR 0 11
63800: PUSH
63801: LD_VAR 0 1
63805: PPUSH
63806: LD_VAR 0 2
63810: PPUSH
63811: LD_VAR 0 12
63815: PUSH
63816: LD_INT 1
63818: ARRAY
63819: PPUSH
63820: LD_VAR 0 12
63824: PUSH
63825: LD_INT 2
63827: ARRAY
63828: PPUSH
63829: CALL_OW 298
63833: ST_TO_ADDR
// distance := 9999 ;
63834: LD_ADDR_VAR 0 10
63838: PUSH
63839: LD_INT 9999
63841: ST_TO_ADDR
// for i := 0 to 5 do
63842: LD_ADDR_VAR 0 6
63846: PUSH
63847: DOUBLE
63848: LD_INT 0
63850: DEC
63851: ST_TO_ADDR
63852: LD_INT 5
63854: PUSH
63855: FOR_TO
63856: IFFALSE 63999
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63858: LD_ADDR_VAR 0 7
63862: PUSH
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_VAR 0 6
63872: PPUSH
63873: LD_VAR 0 11
63877: PPUSH
63878: CALL_OW 272
63882: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63883: LD_ADDR_VAR 0 8
63887: PUSH
63888: LD_VAR 0 2
63892: PPUSH
63893: LD_VAR 0 6
63897: PPUSH
63898: LD_VAR 0 11
63902: PPUSH
63903: CALL_OW 273
63907: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63908: LD_VAR 0 7
63912: PPUSH
63913: LD_VAR 0 8
63917: PPUSH
63918: CALL_OW 488
63922: NOT
63923: IFFALSE 63927
// continue ;
63925: GO 63855
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63927: LD_ADDR_VAR 0 9
63931: PUSH
63932: LD_VAR 0 12
63936: PUSH
63937: LD_INT 1
63939: ARRAY
63940: PPUSH
63941: LD_VAR 0 12
63945: PUSH
63946: LD_INT 2
63948: ARRAY
63949: PPUSH
63950: LD_VAR 0 7
63954: PPUSH
63955: LD_VAR 0 8
63959: PPUSH
63960: CALL_OW 298
63964: ST_TO_ADDR
// if tmp < distance then
63965: LD_VAR 0 9
63969: PUSH
63970: LD_VAR 0 10
63974: LESS
63975: IFFALSE 63997
// begin result := i ;
63977: LD_ADDR_VAR 0 5
63981: PUSH
63982: LD_VAR 0 6
63986: ST_TO_ADDR
// distance := tmp ;
63987: LD_ADDR_VAR 0 10
63991: PUSH
63992: LD_VAR 0 9
63996: ST_TO_ADDR
// end ; end ;
63997: GO 63855
63999: POP
64000: POP
// end ;
64001: LD_VAR 0 5
64005: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64006: LD_INT 0
64008: PPUSH
64009: PPUSH
// if not driver or not IsInUnit ( driver ) then
64010: LD_VAR 0 1
64014: NOT
64015: PUSH
64016: LD_VAR 0 1
64020: PPUSH
64021: CALL_OW 310
64025: NOT
64026: OR
64027: IFFALSE 64031
// exit ;
64029: GO 64121
// vehicle := IsInUnit ( driver ) ;
64031: LD_ADDR_VAR 0 3
64035: PUSH
64036: LD_VAR 0 1
64040: PPUSH
64041: CALL_OW 310
64045: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64046: LD_VAR 0 1
64050: PPUSH
64051: LD_STRING \
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: LD_STRING E
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_VAR 0 3
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PPUSH
64117: CALL_OW 446
// end ;
64121: LD_VAR 0 2
64125: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64126: LD_INT 0
64128: PPUSH
64129: PPUSH
// if not driver or not IsInUnit ( driver ) then
64130: LD_VAR 0 1
64134: NOT
64135: PUSH
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL_OW 310
64145: NOT
64146: OR
64147: IFFALSE 64151
// exit ;
64149: GO 64241
// vehicle := IsInUnit ( driver ) ;
64151: LD_ADDR_VAR 0 3
64155: PUSH
64156: LD_VAR 0 1
64160: PPUSH
64161: CALL_OW 310
64165: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64166: LD_VAR 0 1
64170: PPUSH
64171: LD_STRING \
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: PUSH
64201: LD_STRING E
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_VAR 0 3
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PPUSH
64237: CALL_OW 447
// end ;
64241: LD_VAR 0 2
64245: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64246: LD_INT 0
64248: PPUSH
64249: PPUSH
64250: PPUSH
// tmp := [ ] ;
64251: LD_ADDR_VAR 0 5
64255: PUSH
64256: EMPTY
64257: ST_TO_ADDR
// for i in units do
64258: LD_ADDR_VAR 0 4
64262: PUSH
64263: LD_VAR 0 1
64267: PUSH
64268: FOR_IN
64269: IFFALSE 64307
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64271: LD_ADDR_VAR 0 5
64275: PUSH
64276: LD_VAR 0 5
64280: PPUSH
64281: LD_VAR 0 5
64285: PUSH
64286: LD_INT 1
64288: PLUS
64289: PPUSH
64290: LD_VAR 0 4
64294: PPUSH
64295: CALL_OW 256
64299: PPUSH
64300: CALL_OW 2
64304: ST_TO_ADDR
64305: GO 64268
64307: POP
64308: POP
// if not tmp then
64309: LD_VAR 0 5
64313: NOT
64314: IFFALSE 64318
// exit ;
64316: GO 64366
// if asc then
64318: LD_VAR 0 2
64322: IFFALSE 64346
// result := SortListByListAsc ( units , tmp ) else
64324: LD_ADDR_VAR 0 3
64328: PUSH
64329: LD_VAR 0 1
64333: PPUSH
64334: LD_VAR 0 5
64338: PPUSH
64339: CALL_OW 76
64343: ST_TO_ADDR
64344: GO 64366
// result := SortListByListDesc ( units , tmp ) ;
64346: LD_ADDR_VAR 0 3
64350: PUSH
64351: LD_VAR 0 1
64355: PPUSH
64356: LD_VAR 0 5
64360: PPUSH
64361: CALL_OW 77
64365: ST_TO_ADDR
// end ;
64366: LD_VAR 0 3
64370: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64371: LD_INT 0
64373: PPUSH
64374: PPUSH
// task := GetTaskList ( mech ) ;
64375: LD_ADDR_VAR 0 4
64379: PUSH
64380: LD_VAR 0 1
64384: PPUSH
64385: CALL_OW 437
64389: ST_TO_ADDR
// if not task then
64390: LD_VAR 0 4
64394: NOT
64395: IFFALSE 64399
// exit ;
64397: GO 64441
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64399: LD_ADDR_VAR 0 3
64403: PUSH
64404: LD_VAR 0 4
64408: PUSH
64409: LD_INT 1
64411: ARRAY
64412: PUSH
64413: LD_INT 1
64415: ARRAY
64416: PUSH
64417: LD_STRING r
64419: EQUAL
64420: PUSH
64421: LD_VAR 0 4
64425: PUSH
64426: LD_INT 1
64428: ARRAY
64429: PUSH
64430: LD_INT 4
64432: ARRAY
64433: PUSH
64434: LD_VAR 0 2
64438: EQUAL
64439: AND
64440: ST_TO_ADDR
// end ;
64441: LD_VAR 0 3
64445: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64446: LD_INT 0
64448: PPUSH
// SetDir ( unit , d ) ;
64449: LD_VAR 0 1
64453: PPUSH
64454: LD_VAR 0 4
64458: PPUSH
64459: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64463: LD_VAR 0 1
64467: PPUSH
64468: LD_VAR 0 2
64472: PPUSH
64473: LD_VAR 0 3
64477: PPUSH
64478: LD_VAR 0 5
64482: PPUSH
64483: CALL_OW 48
// end ;
64487: LD_VAR 0 6
64491: RET
// export function ToNaturalNumber ( number ) ; begin
64492: LD_INT 0
64494: PPUSH
// result := number div 1 ;
64495: LD_ADDR_VAR 0 2
64499: PUSH
64500: LD_VAR 0 1
64504: PUSH
64505: LD_INT 1
64507: DIV
64508: ST_TO_ADDR
// if number < 0 then
64509: LD_VAR 0 1
64513: PUSH
64514: LD_INT 0
64516: LESS
64517: IFFALSE 64527
// result := 0 ;
64519: LD_ADDR_VAR 0 2
64523: PUSH
64524: LD_INT 0
64526: ST_TO_ADDR
// end ;
64527: LD_VAR 0 2
64531: RET
// export function SortByClass ( units , class ) ; var un ; begin
64532: LD_INT 0
64534: PPUSH
64535: PPUSH
// if not units or not class then
64536: LD_VAR 0 1
64540: NOT
64541: PUSH
64542: LD_VAR 0 2
64546: NOT
64547: OR
64548: IFFALSE 64552
// exit ;
64550: GO 64647
// result := [ ] ;
64552: LD_ADDR_VAR 0 3
64556: PUSH
64557: EMPTY
64558: ST_TO_ADDR
// for un in units do
64559: LD_ADDR_VAR 0 4
64563: PUSH
64564: LD_VAR 0 1
64568: PUSH
64569: FOR_IN
64570: IFFALSE 64645
// if GetClass ( un ) = class then
64572: LD_VAR 0 4
64576: PPUSH
64577: CALL_OW 257
64581: PUSH
64582: LD_VAR 0 2
64586: EQUAL
64587: IFFALSE 64614
// result := Insert ( result , 1 , un ) else
64589: LD_ADDR_VAR 0 3
64593: PUSH
64594: LD_VAR 0 3
64598: PPUSH
64599: LD_INT 1
64601: PPUSH
64602: LD_VAR 0 4
64606: PPUSH
64607: CALL_OW 2
64611: ST_TO_ADDR
64612: GO 64643
// result := Replace ( result , result + 1 , un ) ;
64614: LD_ADDR_VAR 0 3
64618: PUSH
64619: LD_VAR 0 3
64623: PPUSH
64624: LD_VAR 0 3
64628: PUSH
64629: LD_INT 1
64631: PLUS
64632: PPUSH
64633: LD_VAR 0 4
64637: PPUSH
64638: CALL_OW 1
64642: ST_TO_ADDR
64643: GO 64569
64645: POP
64646: POP
// end ;
64647: LD_VAR 0 3
64651: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64652: LD_INT 0
64654: PPUSH
64655: PPUSH
64656: PPUSH
64657: PPUSH
64658: PPUSH
64659: PPUSH
64660: PPUSH
// result := [ ] ;
64661: LD_ADDR_VAR 0 4
64665: PUSH
64666: EMPTY
64667: ST_TO_ADDR
// if x - r < 0 then
64668: LD_VAR 0 1
64672: PUSH
64673: LD_VAR 0 3
64677: MINUS
64678: PUSH
64679: LD_INT 0
64681: LESS
64682: IFFALSE 64694
// min_x := 0 else
64684: LD_ADDR_VAR 0 8
64688: PUSH
64689: LD_INT 0
64691: ST_TO_ADDR
64692: GO 64710
// min_x := x - r ;
64694: LD_ADDR_VAR 0 8
64698: PUSH
64699: LD_VAR 0 1
64703: PUSH
64704: LD_VAR 0 3
64708: MINUS
64709: ST_TO_ADDR
// if y - r < 0 then
64710: LD_VAR 0 2
64714: PUSH
64715: LD_VAR 0 3
64719: MINUS
64720: PUSH
64721: LD_INT 0
64723: LESS
64724: IFFALSE 64736
// min_y := 0 else
64726: LD_ADDR_VAR 0 7
64730: PUSH
64731: LD_INT 0
64733: ST_TO_ADDR
64734: GO 64752
// min_y := y - r ;
64736: LD_ADDR_VAR 0 7
64740: PUSH
64741: LD_VAR 0 2
64745: PUSH
64746: LD_VAR 0 3
64750: MINUS
64751: ST_TO_ADDR
// max_x := x + r ;
64752: LD_ADDR_VAR 0 9
64756: PUSH
64757: LD_VAR 0 1
64761: PUSH
64762: LD_VAR 0 3
64766: PLUS
64767: ST_TO_ADDR
// max_y := y + r ;
64768: LD_ADDR_VAR 0 10
64772: PUSH
64773: LD_VAR 0 2
64777: PUSH
64778: LD_VAR 0 3
64782: PLUS
64783: ST_TO_ADDR
// for _x = min_x to max_x do
64784: LD_ADDR_VAR 0 5
64788: PUSH
64789: DOUBLE
64790: LD_VAR 0 8
64794: DEC
64795: ST_TO_ADDR
64796: LD_VAR 0 9
64800: PUSH
64801: FOR_TO
64802: IFFALSE 64903
// for _y = min_y to max_y do
64804: LD_ADDR_VAR 0 6
64808: PUSH
64809: DOUBLE
64810: LD_VAR 0 7
64814: DEC
64815: ST_TO_ADDR
64816: LD_VAR 0 10
64820: PUSH
64821: FOR_TO
64822: IFFALSE 64899
// begin if not ValidHex ( _x , _y ) then
64824: LD_VAR 0 5
64828: PPUSH
64829: LD_VAR 0 6
64833: PPUSH
64834: CALL_OW 488
64838: NOT
64839: IFFALSE 64843
// continue ;
64841: GO 64821
// if GetResourceTypeXY ( _x , _y ) then
64843: LD_VAR 0 5
64847: PPUSH
64848: LD_VAR 0 6
64852: PPUSH
64853: CALL_OW 283
64857: IFFALSE 64897
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64859: LD_ADDR_VAR 0 4
64863: PUSH
64864: LD_VAR 0 4
64868: PPUSH
64869: LD_VAR 0 4
64873: PUSH
64874: LD_INT 1
64876: PLUS
64877: PPUSH
64878: LD_VAR 0 5
64882: PUSH
64883: LD_VAR 0 6
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PPUSH
64892: CALL_OW 1
64896: ST_TO_ADDR
// end ;
64897: GO 64821
64899: POP
64900: POP
64901: GO 64801
64903: POP
64904: POP
// end ;
64905: LD_VAR 0 4
64909: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64910: LD_INT 0
64912: PPUSH
64913: PPUSH
64914: PPUSH
64915: PPUSH
64916: PPUSH
64917: PPUSH
64918: PPUSH
64919: PPUSH
// if not units then
64920: LD_VAR 0 1
64924: NOT
64925: IFFALSE 64929
// exit ;
64927: GO 65440
// result := UnitFilter ( units , [ f_ok ] ) ;
64929: LD_ADDR_VAR 0 3
64933: PUSH
64934: LD_VAR 0 1
64938: PPUSH
64939: LD_INT 50
64941: PUSH
64942: EMPTY
64943: LIST
64944: PPUSH
64945: CALL_OW 72
64949: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64950: LD_ADDR_VAR 0 8
64954: PUSH
64955: LD_VAR 0 1
64959: PUSH
64960: LD_INT 1
64962: ARRAY
64963: PPUSH
64964: CALL_OW 255
64968: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64969: LD_ADDR_VAR 0 10
64973: PUSH
64974: LD_INT 29
64976: PUSH
64977: LD_EXP 100
64981: PUSH
64982: LD_INT 49
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: ST_TO_ADDR
// if not result then
64990: LD_VAR 0 3
64994: NOT
64995: IFFALSE 64999
// exit ;
64997: GO 65440
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64999: LD_ADDR_VAR 0 5
65003: PUSH
65004: LD_INT 81
65006: PUSH
65007: LD_VAR 0 8
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PPUSH
65016: CALL_OW 69
65020: ST_TO_ADDR
// for i in result do
65021: LD_ADDR_VAR 0 4
65025: PUSH
65026: LD_VAR 0 3
65030: PUSH
65031: FOR_IN
65032: IFFALSE 65438
// begin tag := GetTag ( i ) + 1 ;
65034: LD_ADDR_VAR 0 9
65038: PUSH
65039: LD_VAR 0 4
65043: PPUSH
65044: CALL_OW 110
65048: PUSH
65049: LD_INT 1
65051: PLUS
65052: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65053: LD_ADDR_VAR 0 7
65057: PUSH
65058: LD_VAR 0 4
65062: PPUSH
65063: CALL_OW 250
65067: PPUSH
65068: LD_VAR 0 4
65072: PPUSH
65073: CALL_OW 251
65077: PPUSH
65078: LD_INT 6
65080: PPUSH
65081: CALL 64652 0 3
65085: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65086: LD_VAR 0 7
65090: PUSH
65091: LD_VAR 0 4
65095: PPUSH
65096: CALL_OW 264
65100: PUSH
65101: LD_VAR 0 10
65105: IN
65106: NOT
65107: AND
65108: IFFALSE 65147
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65110: LD_VAR 0 4
65114: PPUSH
65115: LD_VAR 0 7
65119: PUSH
65120: LD_INT 1
65122: ARRAY
65123: PUSH
65124: LD_INT 1
65126: ARRAY
65127: PPUSH
65128: LD_VAR 0 7
65132: PUSH
65133: LD_INT 1
65135: ARRAY
65136: PUSH
65137: LD_INT 2
65139: ARRAY
65140: PPUSH
65141: CALL_OW 116
65145: GO 65436
// if path > tag then
65147: LD_VAR 0 2
65151: PUSH
65152: LD_VAR 0 9
65156: GREATER
65157: IFFALSE 65365
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65159: LD_ADDR_VAR 0 6
65163: PUSH
65164: LD_VAR 0 5
65168: PPUSH
65169: LD_INT 91
65171: PUSH
65172: LD_VAR 0 4
65176: PUSH
65177: LD_INT 12
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: LIST
65184: PPUSH
65185: CALL_OW 72
65189: ST_TO_ADDR
// if nearEnemy then
65190: LD_VAR 0 6
65194: IFFALSE 65263
// begin if GetWeapon ( i ) = ru_time_lapser then
65196: LD_VAR 0 4
65200: PPUSH
65201: CALL_OW 264
65205: PUSH
65206: LD_INT 49
65208: EQUAL
65209: IFFALSE 65237
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65211: LD_VAR 0 4
65215: PPUSH
65216: LD_VAR 0 6
65220: PPUSH
65221: LD_VAR 0 4
65225: PPUSH
65226: CALL_OW 74
65230: PPUSH
65231: CALL_OW 112
65235: GO 65261
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65237: LD_VAR 0 4
65241: PPUSH
65242: LD_VAR 0 6
65246: PPUSH
65247: LD_VAR 0 4
65251: PPUSH
65252: CALL_OW 74
65256: PPUSH
65257: CALL_OW 115
// end else
65261: GO 65363
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65263: LD_VAR 0 4
65267: PPUSH
65268: LD_VAR 0 2
65272: PUSH
65273: LD_VAR 0 9
65277: ARRAY
65278: PUSH
65279: LD_INT 1
65281: ARRAY
65282: PPUSH
65283: LD_VAR 0 2
65287: PUSH
65288: LD_VAR 0 9
65292: ARRAY
65293: PUSH
65294: LD_INT 2
65296: ARRAY
65297: PPUSH
65298: CALL_OW 297
65302: PUSH
65303: LD_INT 6
65305: GREATER
65306: IFFALSE 65349
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65308: LD_VAR 0 4
65312: PPUSH
65313: LD_VAR 0 2
65317: PUSH
65318: LD_VAR 0 9
65322: ARRAY
65323: PUSH
65324: LD_INT 1
65326: ARRAY
65327: PPUSH
65328: LD_VAR 0 2
65332: PUSH
65333: LD_VAR 0 9
65337: ARRAY
65338: PUSH
65339: LD_INT 2
65341: ARRAY
65342: PPUSH
65343: CALL_OW 114
65347: GO 65363
// SetTag ( i , tag ) ;
65349: LD_VAR 0 4
65353: PPUSH
65354: LD_VAR 0 9
65358: PPUSH
65359: CALL_OW 109
// end else
65363: GO 65436
// if enemy then
65365: LD_VAR 0 5
65369: IFFALSE 65436
// begin if GetWeapon ( i ) = ru_time_lapser then
65371: LD_VAR 0 4
65375: PPUSH
65376: CALL_OW 264
65380: PUSH
65381: LD_INT 49
65383: EQUAL
65384: IFFALSE 65412
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65386: LD_VAR 0 4
65390: PPUSH
65391: LD_VAR 0 5
65395: PPUSH
65396: LD_VAR 0 4
65400: PPUSH
65401: CALL_OW 74
65405: PPUSH
65406: CALL_OW 112
65410: GO 65436
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65412: LD_VAR 0 4
65416: PPUSH
65417: LD_VAR 0 5
65421: PPUSH
65422: LD_VAR 0 4
65426: PPUSH
65427: CALL_OW 74
65431: PPUSH
65432: CALL_OW 115
// end ; end ;
65436: GO 65031
65438: POP
65439: POP
// end ;
65440: LD_VAR 0 3
65444: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65445: LD_INT 0
65447: PPUSH
65448: PPUSH
65449: PPUSH
// if not unit or IsInUnit ( unit ) then
65450: LD_VAR 0 1
65454: NOT
65455: PUSH
65456: LD_VAR 0 1
65460: PPUSH
65461: CALL_OW 310
65465: OR
65466: IFFALSE 65470
// exit ;
65468: GO 65561
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65470: LD_ADDR_VAR 0 4
65474: PUSH
65475: LD_VAR 0 1
65479: PPUSH
65480: CALL_OW 250
65484: PPUSH
65485: LD_VAR 0 2
65489: PPUSH
65490: LD_INT 1
65492: PPUSH
65493: CALL_OW 272
65497: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65498: LD_ADDR_VAR 0 5
65502: PUSH
65503: LD_VAR 0 1
65507: PPUSH
65508: CALL_OW 251
65512: PPUSH
65513: LD_VAR 0 2
65517: PPUSH
65518: LD_INT 1
65520: PPUSH
65521: CALL_OW 273
65525: ST_TO_ADDR
// if ValidHex ( x , y ) then
65526: LD_VAR 0 4
65530: PPUSH
65531: LD_VAR 0 5
65535: PPUSH
65536: CALL_OW 488
65540: IFFALSE 65561
// ComTurnXY ( unit , x , y ) ;
65542: LD_VAR 0 1
65546: PPUSH
65547: LD_VAR 0 4
65551: PPUSH
65552: LD_VAR 0 5
65556: PPUSH
65557: CALL_OW 118
// end ;
65561: LD_VAR 0 3
65565: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65566: LD_INT 0
65568: PPUSH
65569: PPUSH
// result := false ;
65570: LD_ADDR_VAR 0 3
65574: PUSH
65575: LD_INT 0
65577: ST_TO_ADDR
// if not units then
65578: LD_VAR 0 2
65582: NOT
65583: IFFALSE 65587
// exit ;
65585: GO 65632
// for i in units do
65587: LD_ADDR_VAR 0 4
65591: PUSH
65592: LD_VAR 0 2
65596: PUSH
65597: FOR_IN
65598: IFFALSE 65630
// if See ( side , i ) then
65600: LD_VAR 0 1
65604: PPUSH
65605: LD_VAR 0 4
65609: PPUSH
65610: CALL_OW 292
65614: IFFALSE 65628
// begin result := true ;
65616: LD_ADDR_VAR 0 3
65620: PUSH
65621: LD_INT 1
65623: ST_TO_ADDR
// exit ;
65624: POP
65625: POP
65626: GO 65632
// end ;
65628: GO 65597
65630: POP
65631: POP
// end ;
65632: LD_VAR 0 3
65636: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65637: LD_INT 0
65639: PPUSH
65640: PPUSH
65641: PPUSH
65642: PPUSH
// if not unit or not points then
65643: LD_VAR 0 1
65647: NOT
65648: PUSH
65649: LD_VAR 0 2
65653: NOT
65654: OR
65655: IFFALSE 65659
// exit ;
65657: GO 65749
// dist := 99999 ;
65659: LD_ADDR_VAR 0 5
65663: PUSH
65664: LD_INT 99999
65666: ST_TO_ADDR
// for i in points do
65667: LD_ADDR_VAR 0 4
65671: PUSH
65672: LD_VAR 0 2
65676: PUSH
65677: FOR_IN
65678: IFFALSE 65747
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65680: LD_ADDR_VAR 0 6
65684: PUSH
65685: LD_VAR 0 1
65689: PPUSH
65690: LD_VAR 0 4
65694: PUSH
65695: LD_INT 1
65697: ARRAY
65698: PPUSH
65699: LD_VAR 0 4
65703: PUSH
65704: LD_INT 2
65706: ARRAY
65707: PPUSH
65708: CALL_OW 297
65712: ST_TO_ADDR
// if tmpDist < dist then
65713: LD_VAR 0 6
65717: PUSH
65718: LD_VAR 0 5
65722: LESS
65723: IFFALSE 65745
// begin result := i ;
65725: LD_ADDR_VAR 0 3
65729: PUSH
65730: LD_VAR 0 4
65734: ST_TO_ADDR
// dist := tmpDist ;
65735: LD_ADDR_VAR 0 5
65739: PUSH
65740: LD_VAR 0 6
65744: ST_TO_ADDR
// end ; end ;
65745: GO 65677
65747: POP
65748: POP
// end ;
65749: LD_VAR 0 3
65753: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65754: LD_INT 0
65756: PPUSH
// uc_side := side ;
65757: LD_ADDR_OWVAR 20
65761: PUSH
65762: LD_VAR 0 1
65766: ST_TO_ADDR
// uc_nation := 3 ;
65767: LD_ADDR_OWVAR 21
65771: PUSH
65772: LD_INT 3
65774: ST_TO_ADDR
// vc_chassis := 25 ;
65775: LD_ADDR_OWVAR 37
65779: PUSH
65780: LD_INT 25
65782: ST_TO_ADDR
// vc_engine := engine_siberite ;
65783: LD_ADDR_OWVAR 39
65787: PUSH
65788: LD_INT 3
65790: ST_TO_ADDR
// vc_control := control_computer ;
65791: LD_ADDR_OWVAR 38
65795: PUSH
65796: LD_INT 3
65798: ST_TO_ADDR
// vc_weapon := 59 ;
65799: LD_ADDR_OWVAR 40
65803: PUSH
65804: LD_INT 59
65806: ST_TO_ADDR
// result := CreateVehicle ;
65807: LD_ADDR_VAR 0 5
65811: PUSH
65812: CALL_OW 45
65816: ST_TO_ADDR
// SetDir ( result , d ) ;
65817: LD_VAR 0 5
65821: PPUSH
65822: LD_VAR 0 4
65826: PPUSH
65827: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65831: LD_VAR 0 5
65835: PPUSH
65836: LD_VAR 0 2
65840: PPUSH
65841: LD_VAR 0 3
65845: PPUSH
65846: LD_INT 0
65848: PPUSH
65849: CALL_OW 48
// end ;
65853: LD_VAR 0 5
65857: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65858: LD_INT 0
65860: PPUSH
65861: PPUSH
65862: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65863: LD_ADDR_VAR 0 2
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65886: LD_VAR 0 1
65890: NOT
65891: PUSH
65892: LD_VAR 0 1
65896: PPUSH
65897: CALL_OW 264
65901: PUSH
65902: LD_INT 12
65904: PUSH
65905: LD_INT 51
65907: PUSH
65908: LD_INT 32
65910: PUSH
65911: LD_EXP 97
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: IN
65922: NOT
65923: OR
65924: IFFALSE 65928
// exit ;
65926: GO 66026
// for i := 1 to 3 do
65928: LD_ADDR_VAR 0 3
65932: PUSH
65933: DOUBLE
65934: LD_INT 1
65936: DEC
65937: ST_TO_ADDR
65938: LD_INT 3
65940: PUSH
65941: FOR_TO
65942: IFFALSE 66024
// begin tmp := GetCargo ( cargo , i ) ;
65944: LD_ADDR_VAR 0 4
65948: PUSH
65949: LD_VAR 0 1
65953: PPUSH
65954: LD_VAR 0 3
65958: PPUSH
65959: CALL_OW 289
65963: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65964: LD_ADDR_VAR 0 2
65968: PUSH
65969: LD_VAR 0 2
65973: PPUSH
65974: LD_VAR 0 3
65978: PPUSH
65979: LD_VAR 0 4
65983: PPUSH
65984: CALL_OW 1
65988: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65989: LD_ADDR_VAR 0 2
65993: PUSH
65994: LD_VAR 0 2
65998: PPUSH
65999: LD_INT 4
66001: PPUSH
66002: LD_VAR 0 2
66006: PUSH
66007: LD_INT 4
66009: ARRAY
66010: PUSH
66011: LD_VAR 0 4
66015: PLUS
66016: PPUSH
66017: CALL_OW 1
66021: ST_TO_ADDR
// end ;
66022: GO 65941
66024: POP
66025: POP
// end ; end_of_file
66026: LD_VAR 0 2
66030: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66031: LD_VAR 0 1
66035: PUSH
66036: LD_INT 200
66038: DOUBLE
66039: GREATEREQUAL
66040: IFFALSE 66048
66042: LD_INT 299
66044: DOUBLE
66045: LESSEQUAL
66046: IFTRUE 66050
66048: GO 66082
66050: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66051: LD_VAR 0 1
66055: PPUSH
66056: LD_VAR 0 2
66060: PPUSH
66061: LD_VAR 0 3
66065: PPUSH
66066: LD_VAR 0 4
66070: PPUSH
66071: LD_VAR 0 5
66075: PPUSH
66076: CALL 21195 0 5
66080: GO 66159
66082: LD_INT 300
66084: DOUBLE
66085: GREATEREQUAL
66086: IFFALSE 66094
66088: LD_INT 399
66090: DOUBLE
66091: LESSEQUAL
66092: IFTRUE 66096
66094: GO 66158
66096: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66097: LD_VAR 0 1
66101: PPUSH
66102: LD_VAR 0 2
66106: PPUSH
66107: LD_VAR 0 3
66111: PPUSH
66112: LD_VAR 0 4
66116: PPUSH
66117: LD_VAR 0 5
66121: PPUSH
66122: LD_VAR 0 6
66126: PPUSH
66127: LD_VAR 0 7
66131: PPUSH
66132: LD_VAR 0 8
66136: PPUSH
66137: LD_VAR 0 9
66141: PPUSH
66142: LD_VAR 0 10
66146: PPUSH
66147: LD_VAR 0 11
66151: PPUSH
66152: CALL 18837 0 11
66156: GO 66159
66158: POP
// end ;
66159: PPOPN 11
66161: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66162: LD_VAR 0 1
66166: PPUSH
66167: LD_VAR 0 2
66171: PPUSH
66172: LD_VAR 0 3
66176: PPUSH
66177: LD_VAR 0 4
66181: PPUSH
66182: LD_VAR 0 5
66186: PPUSH
66187: CALL 20931 0 5
// end ; end_of_file
66191: PPOPN 5
66193: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66194: LD_VAR 0 1
66198: PPUSH
66199: LD_VAR 0 2
66203: PPUSH
66204: LD_VAR 0 3
66208: PPUSH
66209: LD_VAR 0 4
66213: PPUSH
66214: LD_VAR 0 5
66218: PPUSH
66219: LD_VAR 0 6
66223: PPUSH
66224: CALL 6530 0 6
// end ;
66228: PPOPN 6
66230: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66231: CALL 6505 0 0
// end ;
66235: PPOPN 1
66237: END
