// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 870 0 0
// InitRussian ;
  19: CALL 1141 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 3079 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 2 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 2
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 787
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 787
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 515
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: IFFALSE 487
 472: PUSH
 473: LD_INT 1
 475: PPUSH
 476: LD_VAR 0 1
 480: PPUSH
 481: CALL_OW 292
 485: NOT
 486: AND
 487: IFFALSE 501
 489: PUSH
 490: LD_VAR 0 1
 494: PPUSH
 495: CALL_OW 314
 499: NOT
 500: AND
 501: IFFALSE 515
// SetFuel ( unit , 100 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: LD_INT 100
 510: PPUSH
 511: CALL_OW 240
// if mode = forest then
 515: LD_VAR 0 2
 519: PUSH
 520: LD_STRING forest
 522: EQUAL
 523: IFFALSE 603
// if GetLives ( unit ) < 600 then
 525: LD_VAR 0 1
 529: PPUSH
 530: CALL_OW 256
 534: PUSH
 535: LD_INT 600
 537: LESS
 538: IFFALSE 603
// begin ComMoveXY ( unit , 42 , 3 ) ;
 540: LD_VAR 0 1
 544: PPUSH
 545: LD_INT 42
 547: PPUSH
 548: LD_INT 3
 550: PPUSH
 551: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 250
 569: PPUSH
 570: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 574: LD_VAR 0 1
 578: PPUSH
 579: LD_VAR 0 1
 583: PPUSH
 584: CALL_OW 251
 588: PPUSH
 589: CALL_OW 232
// send_troops_to_forest := true ;
 593: LD_ADDR_EXP 14
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// break ;
 601: GO 787
// end ; if not HasTask ( unit ) then
 603: LD_VAR 0 1
 607: PPUSH
 608: CALL_OW 314
 612: NOT
 613: IFFALSE 785
// begin for i = 1 to coords do
 615: LD_ADDR_VAR 0 6
 619: PUSH
 620: DOUBLE
 621: LD_INT 1
 623: DEC
 624: ST_TO_ADDR
 625: LD_VAR 0 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 698
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 633: LD_VAR 0 1
 637: PPUSH
 638: LD_VAR 0 4
 642: PUSH
 643: LD_VAR 0 6
 647: ARRAY
 648: PPUSH
 649: LD_VAR 0 4
 653: PUSH
 654: LD_VAR 0 6
 658: PUSH
 659: LD_INT 1
 661: PLUS
 662: ARRAY
 663: PPUSH
 664: CALL_OW 174
// AddComWait ( unit , pause ) ;
 668: LD_VAR 0 1
 672: PPUSH
 673: LD_VAR 0 3
 677: PPUSH
 678: CALL_OW 202
// i := i + 1 ;
 682: LD_ADDR_VAR 0 6
 686: PUSH
 687: LD_VAR 0 6
 691: PUSH
 692: LD_INT 1
 694: PLUS
 695: ST_TO_ADDR
// end ;
 696: GO 630
 698: POP
 699: POP
// for i = coords downto 1 do
 700: LD_ADDR_VAR 0 6
 704: PUSH
 705: DOUBLE
 706: LD_VAR 0 4
 710: INC
 711: ST_TO_ADDR
 712: LD_INT 1
 714: PUSH
 715: FOR_DOWNTO
 716: IFFALSE 783
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 718: LD_VAR 0 1
 722: PPUSH
 723: LD_VAR 0 4
 727: PUSH
 728: LD_VAR 0 6
 732: PUSH
 733: LD_INT 1
 735: MINUS
 736: ARRAY
 737: PPUSH
 738: LD_VAR 0 4
 742: PUSH
 743: LD_VAR 0 6
 747: ARRAY
 748: PPUSH
 749: CALL_OW 174
// AddComWait ( unit , pause ) ;
 753: LD_VAR 0 1
 757: PPUSH
 758: LD_VAR 0 3
 762: PPUSH
 763: CALL_OW 202
// i := i - 1 ;
 767: LD_ADDR_VAR 0 6
 771: PUSH
 772: LD_VAR 0 6
 776: PUSH
 777: LD_INT 1
 779: MINUS
 780: ST_TO_ADDR
// end ;
 781: GO 715
 783: POP
 784: POP
// end ; end ;
 785: GO 425
// end ;
 787: LD_VAR 0 5
 791: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
// uc_nation := 1 ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: ST_TO_ADDR
// uc_side := 0 ;
 804: LD_ADDR_OWVAR 20
 808: PUSH
 809: LD_INT 0
 811: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 380
// hc_name := speaker ;
 825: LD_ADDR_OWVAR 26
 829: PUSH
 830: LD_STRING speaker
 832: ST_TO_ADDR
// hc_gallery :=  ;
 833: LD_ADDR_OWVAR 33
 837: PUSH
 838: LD_STRING 
 840: ST_TO_ADDR
// speaker := CreateHuman ;
 841: LD_ADDR_VAR 0 3
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 851: LD_VAR 0 3
 855: PPUSH
 856: LD_VAR 0 1
 860: PPUSH
 861: CALL_OW 88
// end ; end_of_file
 865: LD_VAR 0 2
 869: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 870: LD_INT 0
 872: PPUSH
// uc_nation := 1 ;
 873: LD_ADDR_OWVAR 21
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 881: LD_ADDR_EXP 16
 885: PUSH
 886: LD_STRING JMM
 888: PPUSH
 889: LD_INT 0
 891: PPUSH
 892: LD_STRING 
 894: PPUSH
 895: CALL 30201 0 3
 899: ST_TO_ADDR
// uc_side := 4 ;
 900: LD_ADDR_OWVAR 20
 904: PUSH
 905: LD_INT 4
 907: ST_TO_ADDR
// hc_gallery := us ;
 908: LD_ADDR_OWVAR 33
 912: PUSH
 913: LD_STRING us
 915: ST_TO_ADDR
// hc_face_number := 7 ;
 916: LD_ADDR_OWVAR 34
 920: PUSH
 921: LD_INT 7
 923: ST_TO_ADDR
// hc_sex := sex_male ;
 924: LD_ADDR_OWVAR 27
 928: PUSH
 929: LD_INT 1
 931: ST_TO_ADDR
// hc_name := . ;
 932: LD_ADDR_OWVAR 26
 936: PUSH
 937: LD_STRING .
 939: ST_TO_ADDR
// hc_class := 1 ;
 940: LD_ADDR_OWVAR 28
 944: PUSH
 945: LD_INT 1
 947: ST_TO_ADDR
// Powell := CreateHuman ;
 948: LD_ADDR_EXP 19
 952: PUSH
 953: CALL_OW 44
 957: ST_TO_ADDR
// hc_name := . ;
 958: LD_ADDR_OWVAR 26
 962: PUSH
 963: LD_STRING .
 965: ST_TO_ADDR
// hc_gallery := ru ;
 966: LD_ADDR_OWVAR 33
 970: PUSH
 971: LD_STRING ru
 973: ST_TO_ADDR
// hc_face_number := 4 ;
 974: LD_ADDR_OWVAR 34
 978: PUSH
 979: LD_INT 4
 981: ST_TO_ADDR
// hc_sex := sex_male ;
 982: LD_ADDR_OWVAR 27
 986: PUSH
 987: LD_INT 1
 989: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 990: LD_ADDR_EXP 20
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
1000: LD_ADDR_EXP 17
1004: PUSH
1005: LD_STRING Bobby
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: LD_STRING 
1013: PPUSH
1014: CALL 30201 0 3
1018: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1019: LD_ADDR_EXP 18
1023: PUSH
1024: LD_STRING Cyrus
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: LD_STRING 
1032: PPUSH
1033: CALL 30201 0 3
1037: ST_TO_ADDR
// case Difficulty of 1 :
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 1
1045: DOUBLE
1046: EQUAL
1047: IFTRUE 1051
1049: GO 1066
1051: POP
// SetLives ( Bobby , 500 ) ; 2 :
1052: LD_EXP 17
1056: PPUSH
1057: LD_INT 500
1059: PPUSH
1060: CALL_OW 234
1064: GO 1136
1066: LD_INT 2
1068: DOUBLE
1069: EQUAL
1070: IFTRUE 1074
1072: GO 1089
1074: POP
// SetLives ( Bobby , 460 ) ; 3 :
1075: LD_EXP 17
1079: PPUSH
1080: LD_INT 460
1082: PPUSH
1083: CALL_OW 234
1087: GO 1136
1089: LD_INT 3
1091: DOUBLE
1092: EQUAL
1093: IFTRUE 1097
1095: GO 1112
1097: POP
// SetLives ( Bobby , 420 ) ; 4 :
1098: LD_EXP 17
1102: PPUSH
1103: LD_INT 420
1105: PPUSH
1106: CALL_OW 234
1110: GO 1136
1112: LD_INT 4
1114: DOUBLE
1115: EQUAL
1116: IFTRUE 1120
1118: GO 1135
1120: POP
// SetLives ( Bobby , 400 ) ; end ;
1121: LD_EXP 17
1125: PPUSH
1126: LD_INT 400
1128: PPUSH
1129: CALL_OW 234
1133: GO 1136
1135: POP
// end ; end_of_file
1136: LD_VAR 0 1
1140: RET
// export russian_troops_1 , russian_troops_2 , russian_troops_3 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_VAR 0 2
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// uc_side := 3 ;
1176: LD_ADDR_OWVAR 20
1180: PUSH
1181: LD_INT 3
1183: ST_TO_ADDR
// uc_nation := 3 ;
1184: LD_ADDR_OWVAR 21
1188: PUSH
1189: LD_INT 3
1191: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1192: LD_ADDR_EXP 28
1196: PUSH
1197: LD_STRING Pokryshkin
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: LD_STRING 
1205: PPUSH
1206: CALL 30201 0 3
1210: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1211: LD_EXP 28
1215: PPUSH
1216: LD_INT 44
1218: PPUSH
1219: LD_INT 5
1221: PPUSH
1222: LD_INT 0
1224: PPUSH
1225: CALL_OW 48
// hc_importance := 0 ;
1229: LD_ADDR_OWVAR 32
1233: PUSH
1234: LD_INT 0
1236: ST_TO_ADDR
// hc_gallery :=  ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING 
1244: ST_TO_ADDR
// hc_name :=  ;
1245: LD_ADDR_OWVAR 26
1249: PUSH
1250: LD_STRING 
1252: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 1
1258: PPUSH
1259: LD_VAR 0 2
1263: PPUSH
1264: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1268: LD_ADDR_OWVAR 33
1272: PUSH
1273: LD_STRING SecondCharsGal
1275: ST_TO_ADDR
// hc_face_number := 69 ;
1276: LD_ADDR_OWVAR 34
1280: PUSH
1281: LD_INT 69
1283: ST_TO_ADDR
// hc_sex := sex_male ;
1284: LD_ADDR_OWVAR 27
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1292: LD_ADDR_OWVAR 26
1296: PUSH
1297: LD_STRING Ilja Ivanov
1299: ST_TO_ADDR
// un := CreateHuman ;
1300: LD_ADDR_VAR 0 4
1304: PUSH
1305: CALL_OW 44
1309: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1310: LD_ADDR_EXP 21
1314: PUSH
1315: LD_EXP 21
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 4
1327: PPUSH
1328: CALL_OW 2
1332: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1348: LD_INT 1
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1363: LD_ADDR_OWVAR 33
1367: PUSH
1368: LD_STRING SecondCharsGal
1370: ST_TO_ADDR
// hc_face_number := 68 ;
1371: LD_ADDR_OWVAR 34
1375: PUSH
1376: LD_INT 68
1378: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1379: LD_ADDR_OWVAR 26
1383: PUSH
1384: LD_STRING Pavel Starczy
1386: ST_TO_ADDR
// un := CreateHuman ;
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: CALL_OW 44
1396: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1397: LD_ADDR_EXP 21
1401: PUSH
1402: LD_EXP 21
1406: PPUSH
1407: LD_INT 2
1409: PPUSH
1410: LD_VAR 0 4
1414: PPUSH
1415: CALL_OW 2
1419: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1420: LD_VAR 0 4
1424: PPUSH
1425: LD_INT 3
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL_OW 49
// InitHc ;
1435: CALL_OW 19
// for i = 1 to 7 do
1439: LD_ADDR_VAR 0 3
1443: PUSH
1444: DOUBLE
1445: LD_INT 1
1447: DEC
1448: ST_TO_ADDR
1449: LD_INT 7
1451: PUSH
1452: FOR_TO
1453: IFFALSE 1604
// begin PrepareHuman ( false , 1 , skill ) ;
1455: LD_INT 0
1457: PPUSH
1458: LD_INT 1
1460: PPUSH
1461: LD_VAR 0 2
1465: PPUSH
1466: CALL_OW 380
// un := CreateHuman ;
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: CALL_OW 44
1479: ST_TO_ADDR
// if i mod 2 = 0 then
1480: LD_VAR 0 3
1484: PUSH
1485: LD_INT 2
1487: MOD
1488: PUSH
1489: LD_INT 0
1491: EQUAL
1492: IFFALSE 1549
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1494: LD_ADDR_EXP 21
1498: PUSH
1499: LD_EXP 21
1503: PPUSH
1504: LD_EXP 21
1508: PUSH
1509: LD_INT 1
1511: PLUS
1512: PPUSH
1513: LD_VAR 0 4
1517: PPUSH
1518: CALL_OW 2
1522: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_INT 3
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 49
// ComHold ( un ) ;
1538: LD_VAR 0 4
1542: PPUSH
1543: CALL_OW 140
// end else
1547: GO 1602
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1549: LD_ADDR_EXP 22
1553: PUSH
1554: LD_EXP 22
1558: PPUSH
1559: LD_EXP 22
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL_OW 2
1577: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1578: LD_VAR 0 4
1582: PPUSH
1583: LD_INT 4
1585: PPUSH
1586: LD_INT 0
1588: PPUSH
1589: CALL_OW 49
// ComHold ( un ) ;
1593: LD_VAR 0 4
1597: PPUSH
1598: CALL_OW 140
// end ; end ;
1602: GO 1452
1604: POP
1605: POP
// for i := 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1685
// begin PrepareSoldier ( false , 3 ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// russian_troops_3 := Join ( russian_troops_3 , un ) ;
1642: LD_ADDR_EXP 23
1646: PUSH
1647: LD_EXP 23
1651: PPUSH
1652: LD_VAR 0 4
1656: PPUSH
1657: CALL 68401 0 2
1661: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 5 , 3 , false ) ;
1662: LD_VAR 0 4
1666: PPUSH
1667: LD_INT 9
1669: PPUSH
1670: LD_INT 5
1672: PPUSH
1673: LD_INT 3
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL_OW 50
// end ;
1683: GO 1619
1685: POP
1686: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1687: LD_ADDR_VAR 0 3
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 3
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 30
1704: PUSH
1705: LD_INT 31
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL_OW 69
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1740
// PrepareSolBun ( skill , i ) ;
1724: LD_VAR 0 2
1728: PPUSH
1729: LD_VAR 0 3
1733: PPUSH
1734: CALL 197 0 2
1738: GO 1721
1740: POP
1741: POP
// for i = 1 to 3 do
1742: LD_ADDR_VAR 0 3
1746: PUSH
1747: DOUBLE
1748: LD_INT 1
1750: DEC
1751: ST_TO_ADDR
1752: LD_INT 3
1754: PUSH
1755: FOR_TO
1756: IFFALSE 1892
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1758: LD_ADDR_VAR 0 4
1762: PUSH
1763: LD_INT 3
1765: PPUSH
1766: LD_INT 3
1768: PPUSH
1769: LD_INT 22
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_INT 42
1780: PPUSH
1781: LD_INT 100
1783: PPUSH
1784: CALL 333 0 7
1788: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1789: LD_INT 0
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_VAR 0 2
1799: PPUSH
1800: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1804: CALL_OW 44
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1818: LD_VAR 0 4
1822: PPUSH
1823: LD_INT 131
1825: PUSH
1826: LD_INT 23
1828: PUSH
1829: LD_INT 167
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_VAR 0 3
1841: ARRAY
1842: PPUSH
1843: LD_INT 87
1845: PUSH
1846: LD_INT 14
1848: PUSH
1849: LD_INT 95
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_VAR 0 3
1861: ARRAY
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1870: LD_ADDR_EXP 24
1874: PUSH
1875: LD_EXP 24
1879: PPUSH
1880: LD_VAR 0 4
1884: PPUSH
1885: CALL 68401 0 2
1889: ST_TO_ADDR
// end ;
1890: GO 1755
1892: POP
1893: POP
// for i = 1 to 2 do
1894: LD_ADDR_VAR 0 3
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_INT 2
1906: PUSH
1907: FOR_TO
1908: IFFALSE 1999
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1910: LD_INT 2
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 380
// un := CreateHuman ;
1940: LD_ADDR_VAR 0 4
1944: PUSH
1945: CALL_OW 44
1949: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1950: LD_ADDR_EXP 25
1954: PUSH
1955: LD_EXP 25
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: LD_VAR 0 4
1967: PPUSH
1968: CALL_OW 2
1972: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1973: LD_VAR 0 4
1977: PPUSH
1978: LD_INT 10
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 49
// ComHold ( un ) ;
1988: LD_VAR 0 4
1992: PPUSH
1993: CALL_OW 140
// end ;
1997: GO 1907
1999: POP
2000: POP
// if Difficulty < 3 then
2001: LD_OWVAR 67
2005: PUSH
2006: LD_INT 3
2008: LESS
2009: IFFALSE 2013
// exit ;
2011: GO 2084
// PrepareHuman ( false , 1 , skill ) ;
2013: LD_INT 0
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_VAR 0 2
2023: PPUSH
2024: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
2028: LD_ADDR_EXP 26
2032: PUSH
2033: CALL_OW 44
2037: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
2038: LD_EXP 26
2042: PPUSH
2043: LD_INT 82
2045: PPUSH
2046: LD_INT 2
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
2056: LD_ADDR_EXP 27
2060: PUSH
2061: CALL_OW 44
2065: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
2066: LD_EXP 27
2070: PPUSH
2071: LD_INT 136
2073: PPUSH
2074: LD_INT 30
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 48
// end ;
2084: LD_VAR 0 1
2088: RET
// every 0 0$01 trigger active_road_patrol do
2089: LD_EXP 8
2093: IFFALSE 2159
2095: GO 2097
2097: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2098: LD_EXP 24
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_STRING road
2109: PPUSH
2110: LD_INT 70
2112: PPUSH
2113: LD_INT 131
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 107
2121: PUSH
2122: LD_INT 75
2124: PUSH
2125: LD_INT 107
2127: PUSH
2128: LD_INT 66
2130: PUSH
2131: LD_INT 114
2133: PUSH
2134: LD_INT 61
2136: PUSH
2137: LD_INT 107
2139: PUSH
2140: LD_INT 34
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PPUSH
2155: CALL 421 0 4
2159: END
// every 0 0$01 trigger active_road_patrol do
2160: LD_EXP 8
2164: IFFALSE 2222
2166: GO 2168
2168: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2169: LD_EXP 24
2173: PUSH
2174: LD_INT 2
2176: ARRAY
2177: PPUSH
2178: LD_STRING road
2180: PPUSH
2181: LD_INT 70
2183: PPUSH
2184: LD_INT 21
2186: PUSH
2187: LD_INT 12
2189: PUSH
2190: LD_INT 37
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 65
2198: PUSH
2199: LD_INT 62
2201: PUSH
2202: LD_INT 107
2204: PUSH
2205: LD_INT 76
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL 421 0 4
2222: END
// every 0 0$01 trigger active_road_patrol do
2223: LD_EXP 8
2227: IFFALSE 2285
2229: GO 2231
2231: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2232: LD_EXP 24
2236: PUSH
2237: LD_INT 3
2239: ARRAY
2240: PPUSH
2241: LD_STRING road
2243: PPUSH
2244: LD_INT 70
2246: PPUSH
2247: LD_INT 167
2249: PUSH
2250: LD_INT 95
2252: PUSH
2253: LD_INT 147
2255: PUSH
2256: LD_INT 81
2258: PUSH
2259: LD_INT 144
2261: PUSH
2262: LD_INT 66
2264: PUSH
2265: LD_INT 149
2267: PUSH
2268: LD_INT 55
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: PPUSH
2281: CALL 421 0 4
2285: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2286: LD_EXP 26
2290: PPUSH
2291: CALL_OW 302
2295: IFFALSE 2357
2297: GO 2299
2299: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2300: LD_EXP 26
2304: PPUSH
2305: LD_STRING forest
2307: PPUSH
2308: LD_INT 35
2310: PPUSH
2311: LD_INT 52
2313: PUSH
2314: LD_INT 15
2316: PUSH
2317: LD_INT 81
2319: PUSH
2320: LD_INT 9
2322: PUSH
2323: LD_INT 120
2325: PUSH
2326: LD_INT 52
2328: PUSH
2329: LD_INT 135
2331: PUSH
2332: LD_INT 80
2334: PUSH
2335: LD_INT 122
2337: PUSH
2338: LD_INT 95
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: PPUSH
2353: CALL 421 0 4
2357: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2358: LD_EXP 27
2362: PPUSH
2363: CALL_OW 302
2367: IFFALSE 2421
2369: GO 2371
2371: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2372: LD_EXP 27
2376: PPUSH
2377: LD_STRING forest
2379: PPUSH
2380: LD_INT 70
2382: PPUSH
2383: LD_INT 137
2385: PUSH
2386: LD_INT 30
2388: PUSH
2389: LD_INT 127
2391: PUSH
2392: LD_INT 23
2394: PUSH
2395: LD_INT 122
2397: PUSH
2398: LD_INT 16
2400: PUSH
2401: LD_INT 114
2403: PUSH
2404: LD_INT 3
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL 421 0 4
2421: END
// every 0 0$01 trigger macmilan_use_radio do
2422: LD_EXP 6
2426: IFFALSE 2487
2428: GO 2430
2430: DISABLE
// begin active_road_patrol := false ;
2431: LD_ADDR_EXP 8
2435: PUSH
2436: LD_INT 0
2438: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2439: LD_EXP 24
2443: PPUSH
2444: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2448: LD_EXP 24
2452: PPUSH
2453: LD_INT 72
2455: PPUSH
2456: LD_INT 41
2458: PPUSH
2459: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2463: LD_EXP 22
2467: PPUSH
2468: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2472: LD_EXP 22
2476: PPUSH
2477: LD_INT 72
2479: PPUSH
2480: LD_INT 41
2482: PPUSH
2483: CALL_OW 174
// end ;
2487: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2488: LD_INT 9
2490: PPUSH
2491: LD_INT 22
2493: PUSH
2494: LD_INT 1
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 70
2505: IFFALSE 2579
2507: GO 2509
2509: DISABLE
2510: LD_INT 0
2512: PPUSH
// begin enable ;
2513: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2514: LD_ADDR_VAR 0 1
2518: PUSH
2519: LD_INT 9
2521: PPUSH
2522: LD_INT 22
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PPUSH
2532: CALL_OW 70
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2541: LD_EXP 22
2545: PPUSH
2546: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2550: LD_EXP 22
2554: PPUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 250
2564: PPUSH
2565: LD_VAR 0 1
2569: PPUSH
2570: CALL_OW 251
2574: PPUSH
2575: CALL_OW 174
// end ;
2579: PPOPN 1
2581: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 990 or GetLives ( russian_patrol_tanks [ 2 ] ) < 990 ) and See ( 3 , JMM ) do var i ;
2582: LD_EXP 24
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: CALL_OW 256
2595: PUSH
2596: LD_INT 990
2598: LESS
2599: IFTRUE 2620
2601: PUSH
2602: LD_EXP 24
2606: PUSH
2607: LD_INT 2
2609: ARRAY
2610: PPUSH
2611: CALL_OW 256
2615: PUSH
2616: LD_INT 990
2618: LESS
2619: OR
2620: IFFALSE 2636
2622: PUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_EXP 16
2630: PPUSH
2631: CALL_OW 292
2635: AND
2636: IFFALSE 2711
2638: GO 2640
2640: DISABLE
2641: LD_INT 0
2643: PPUSH
// begin active_road_patrol := false ;
2644: LD_ADDR_EXP 8
2648: PUSH
2649: LD_INT 0
2651: ST_TO_ADDR
// for i in russian_patrol_tanks do
2652: LD_ADDR_VAR 0 1
2656: PUSH
2657: LD_EXP 24
2661: PUSH
2662: FOR_IN
2663: IFFALSE 2701
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: LD_INT 22
2672: PUSH
2673: LD_INT 1
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: PPUSH
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 74
2694: PPUSH
2695: CALL_OW 115
2699: GO 2662
2701: POP
2702: POP
// wait ( 0 0$2 ) ;
2703: LD_INT 70
2705: PPUSH
2706: CALL_OW 67
// enable ;
2710: ENABLE
// end ;
2711: PPOPN 1
2713: END
// every 0 0$01 trigger macmilan_in_trap do
2714: LD_EXP 9
2718: IFFALSE 2764
2720: GO 2722
2722: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2723: LD_EXP 22
2727: PPUSH
2728: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2732: LD_EXP 21
2736: PUSH
2737: LD_EXP 22
2741: ADD
2742: PUSH
2743: LD_EXP 28
2747: ADD
2748: PUSH
2749: LD_EXP 24
2753: ADD
2754: PPUSH
2755: LD_EXP 16
2759: PPUSH
2760: CALL_OW 115
// end ;
2764: END
// every 0 0$01 trigger meta_action do
2765: LD_EXP 10
2769: IFFALSE 2887
2771: GO 2773
2773: DISABLE
// begin active_road_patrol := false ;
2774: LD_ADDR_EXP 8
2778: PUSH
2779: LD_INT 0
2781: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2782: LD_INT 15
2784: PPUSH
2785: LD_INT 22
2787: PUSH
2788: LD_INT 1
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PPUSH
2795: CALL_OW 70
2799: IFFALSE 2854
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2801: LD_EXP 21
2805: PUSH
2806: LD_EXP 22
2810: ADD
2811: PPUSH
2812: LD_INT 104
2814: PPUSH
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2822: LD_EXP 24
2826: PPUSH
2827: LD_INT 96
2829: PPUSH
2830: LD_INT 14
2832: PPUSH
2833: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2837: LD_EXP 28
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: LD_INT 4
2847: PPUSH
2848: CALL_OW 114
// end else
2852: GO 2887
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2854: LD_EXP 21
2858: PUSH
2859: LD_EXP 22
2863: ADD
2864: PUSH
2865: LD_EXP 28
2869: ADD
2870: PUSH
2871: LD_EXP 24
2875: ADD
2876: PPUSH
2877: LD_INT 93
2879: PPUSH
2880: LD_INT 1
2882: PPUSH
2883: CALL_OW 114
// end ;
2887: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2888: LD_EXP 28
2892: PPUSH
2893: CALL_OW 256
2897: PUSH
2898: LD_INT 1000
2900: LESS
2901: IFFALSE 2952
2903: GO 2905
2905: DISABLE
// begin enable ;
2906: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2907: LD_INT 18
2909: PPUSH
2910: LD_INT 1
2912: PPUSH
2913: CALL_OW 428
2917: PUSH
2918: LD_EXP 28
2922: EQUAL
2923: IFFALSE 2937
// begin RemoveUnit ( Pokryshkin ) ;
2925: LD_EXP 28
2929: PPUSH
2930: CALL_OW 64
// disable ;
2934: DISABLE
// end else
2935: GO 2952
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2937: LD_EXP 28
2941: PPUSH
2942: LD_INT 18
2944: PPUSH
2945: LD_INT 1
2947: PPUSH
2948: CALL_OW 111
// end ;
2952: END
// every 0 0$20 trigger send_troops_to_forest do
2953: LD_EXP 14
2957: IFFALSE 3011
2959: GO 2961
2961: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2962: LD_EXP 26
2966: PPUSH
2967: CALL_OW 302
2971: NOT
2972: IFFALSE 2976
// exit ;
2974: GO 3011
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2976: LD_EXP 21
2980: PUSH
2981: LD_EXP 28
2985: ADD
2986: PPUSH
2987: LD_EXP 26
2991: PPUSH
2992: CALL_OW 252
2996: PPUSH
2997: LD_EXP 26
3001: PPUSH
3002: CALL_OW 253
3006: PPUSH
3007: CALL_OW 114
// end ;
3011: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
3012: LD_VAR 0 1
3016: PPUSH
3017: CALL_OW 255
3021: PUSH
3022: LD_INT 3
3024: EQUAL
3025: IFFALSE 3076
// begin ComMoveXY ( driver , 24 , 14 ) ;
3027: LD_VAR 0 1
3031: PPUSH
3032: LD_INT 24
3034: PPUSH
3035: LD_INT 14
3037: PPUSH
3038: CALL_OW 111
// AddComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 30
3049: PUSH
3050: LD_INT 0
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PPUSH
3057: CALL_OW 69
3061: PPUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: CALL_OW 74
3071: PPUSH
3072: CALL_OW 180
// end ; end ; end_of_file
3076: PPOPN 4
3078: END
// export function Action ; var i ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3083: LD_ADDR_VAR 0 2
3087: PUSH
3088: LD_INT 22
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 1
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: FOR_IN
3118: IFFALSE 3131
// ComHold ( i ) ;
3120: LD_VAR 0 2
3124: PPUSH
3125: CALL_OW 140
3129: GO 3117
3131: POP
3132: POP
// InGameOn ;
3133: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
3137: LD_INT 79
3139: PPUSH
3140: LD_INT 76
3142: PPUSH
3143: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3147: LD_INT 10
3149: PPUSH
3150: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3154: LD_EXP 16
3158: PPUSH
3159: LD_INT 80
3161: PPUSH
3162: LD_INT 79
3164: PPUSH
3165: LD_INT 1
3167: PPUSH
3168: CALL_OW 48
// wait ( 0 0$03 ) ;
3172: LD_INT 105
3174: PPUSH
3175: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3179: LD_EXP 16
3183: PPUSH
3184: LD_INT 80
3186: PPUSH
3187: LD_INT 76
3189: PPUSH
3190: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3194: LD_EXP 16
3198: PPUSH
3199: LD_STRING D1-JMM-1
3201: PPUSH
3202: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3206: LD_INT 10
3208: PPUSH
3209: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3213: LD_EXP 16
3217: PPUSH
3218: LD_INT 76
3220: PPUSH
3221: LD_INT 76
3223: PPUSH
3224: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3228: LD_EXP 16
3232: PPUSH
3233: LD_STRING D1-JMM-1a
3235: PPUSH
3236: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3240: LD_INT 10
3242: PPUSH
3243: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3247: LD_EXP 16
3251: PPUSH
3252: LD_INT 83
3254: PPUSH
3255: LD_INT 66
3257: PPUSH
3258: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3262: LD_EXP 16
3266: PPUSH
3267: LD_STRING D1-JMM-1b
3269: PPUSH
3270: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3274: LD_INT 18
3276: PPUSH
3277: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3281: LD_EXP 16
3285: PPUSH
3286: LD_STRING D1-JMM-1c
3288: PPUSH
3289: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3293: LD_INT 7
3295: PPUSH
3296: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3300: LD_EXP 19
3304: PPUSH
3305: LD_STRING D1-Pow-1
3307: PPUSH
3308: CALL 72646 0 2
// Say ( JMM , D1-JMM-2 ) ;
3312: LD_EXP 16
3316: PPUSH
3317: LD_STRING D1-JMM-2
3319: PPUSH
3320: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3324: LD_EXP 19
3328: PPUSH
3329: LD_STRING D1-Pow-2
3331: PPUSH
3332: CALL 72646 0 2
// Say ( JMM , D1-JMM-3 ) ;
3336: LD_EXP 16
3340: PPUSH
3341: LD_STRING D1-JMM-3
3343: PPUSH
3344: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3348: LD_EXP 19
3352: PPUSH
3353: LD_STRING D1-Pow-3
3355: PPUSH
3356: CALL 72646 0 2
// Say ( JMM , D1-JMM-4 ) ;
3360: LD_EXP 16
3364: PPUSH
3365: LD_STRING D1-JMM-4
3367: PPUSH
3368: CALL_OW 88
// ComFree ( JMM ) ;
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3381: LD_INT 10
3383: PPUSH
3384: CALL_OW 67
// InGameOff ;
3388: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3392: LD_STRING M1
3394: PPUSH
3395: CALL_OW 337
// SaveForQuickRestart ;
3399: CALL_OW 22
// active_russian_dialog := true ;
3403: LD_ADDR_EXP 3
3407: PUSH
3408: LD_INT 1
3410: ST_TO_ADDR
// active_road_patrol := true ;
3411: LD_ADDR_EXP 8
3415: PUSH
3416: LD_INT 1
3418: ST_TO_ADDR
// if Difficulty < 3 then
3419: LD_OWVAR 67
3423: PUSH
3424: LD_INT 3
3426: LESS
3427: IFFALSE 3458
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3429: LD_EXP 17
3433: PPUSH
3434: LD_INT 41
3436: PPUSH
3437: LD_INT 71
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 48
// ComHold ( Bobby ) ;
3447: LD_EXP 17
3451: PPUSH
3452: CALL_OW 140
// end else
3456: GO 3506
// begin SetDir ( Bobby , 5 ) ;
3458: LD_EXP 17
3462: PPUSH
3463: LD_INT 5
3465: PPUSH
3466: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3470: LD_EXP 17
3474: PPUSH
3475: LD_INT 105
3477: PPUSH
3478: LD_INT 98
3480: PPUSH
3481: LD_INT 0
3483: PPUSH
3484: CALL_OW 48
// ComCrawl ( Bobby ) ;
3488: LD_EXP 17
3492: PPUSH
3493: CALL_OW 137
// AddComHold ( Bobby ) ;
3497: LD_EXP 17
3501: PPUSH
3502: CALL_OW 200
// end ; if Difficulty < 3 then
3506: LD_OWVAR 67
3510: PUSH
3511: LD_INT 3
3513: LESS
3514: IFFALSE 3551
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3516: LD_EXP 18
3520: PPUSH
3521: LD_INT 90
3523: PPUSH
3524: LD_INT 42
3526: PPUSH
3527: LD_INT 0
3529: PPUSH
3530: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3534: LD_EXP 18
3538: PPUSH
3539: LD_INT 79
3541: PPUSH
3542: LD_INT 34
3544: PPUSH
3545: CALL_OW 111
// end else
3549: GO 3599
// if Difficulty = 3 then
3551: LD_OWVAR 67
3555: PUSH
3556: LD_INT 3
3558: EQUAL
3559: IFFALSE 3581
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3561: LD_EXP 18
3565: PPUSH
3566: LD_INT 125
3568: PPUSH
3569: LD_INT 42
3571: PPUSH
3572: LD_INT 0
3574: PPUSH
3575: CALL_OW 48
3579: GO 3599
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3581: LD_EXP 18
3585: PPUSH
3586: LD_INT 154
3588: PPUSH
3589: LD_INT 97
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3599: LD_EXP 18
3603: PPUSH
3604: CALL_OW 197
// AddComHold ( Cyrus ) ;
3608: LD_EXP 18
3612: PPUSH
3613: CALL_OW 200
// end ;
3617: LD_VAR 0 1
3621: RET
// every 0 0$01 trigger active_russian_dialog do var i , wait_points , tmp ;
3622: LD_EXP 3
3626: IFFALSE 4372
3628: GO 3630
3630: DISABLE
3631: LD_INT 0
3633: PPUSH
3634: PPUSH
3635: PPUSH
// begin wait_points := 0 ;
3636: LD_ADDR_VAR 0 2
3640: PUSH
3641: LD_INT 0
3643: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3644: LD_INT 70
3646: PPUSH
3647: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3651: LD_EXP 21
3655: PPUSH
3656: LD_INT 79
3658: PPUSH
3659: LD_INT 83
3661: PPUSH
3662: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3666: LD_EXP 21
3670: PUSH
3671: LD_INT 2
3673: ARRAY
3674: PPUSH
3675: LD_STRING D1R-Rus1-1
3677: PPUSH
3678: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3682: LD_EXP 21
3686: PUSH
3687: LD_INT 1
3689: ARRAY
3690: PPUSH
3691: LD_STRING D1R-Rus2-1
3693: PPUSH
3694: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3698: LD_EXP 22
3702: PPUSH
3703: LD_INT 91
3705: PPUSH
3706: LD_INT 80
3708: PPUSH
3709: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3713: LD_INT 35
3715: PPUSH
3716: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3720: LD_EXP 21
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_INT 79
3731: PPUSH
3732: LD_INT 82
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 6
3742: LESS
3743: IFFALSE 3713
// if not IsInArea ( JMM , jmm_spot ) then
3745: LD_EXP 16
3749: PPUSH
3750: LD_INT 5
3752: PPUSH
3753: CALL_OW 308
3757: NOT
3758: IFFALSE 3778
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3760: LD_EXP 21
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PPUSH
3769: LD_STRING D1Ra-Rus2-1
3771: PPUSH
3772: CALL_OW 88
3776: GO 3845
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3778: LD_EXP 21
3782: PUSH
3783: LD_INT 2
3785: ARRAY
3786: PPUSH
3787: LD_STRING D1Rb-Rus1-1
3789: PPUSH
3790: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3794: LD_EXP 21
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: LD_STRING D1Rb-Rus2-1
3805: PPUSH
3806: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3810: LD_EXP 21
3814: PUSH
3815: LD_EXP 22
3819: ADD
3820: PPUSH
3821: LD_EXP 16
3825: PPUSH
3826: CALL_OW 250
3830: PPUSH
3831: LD_EXP 16
3835: PPUSH
3836: CALL_OW 251
3840: PPUSH
3841: CALL_OW 114
// end ; wait_points := 10 ;
3845: LD_ADDR_VAR 0 2
3849: PUSH
3850: LD_INT 10
3852: ST_TO_ADDR
// if Difficulty > 1 then
3853: LD_OWVAR 67
3857: PUSH
3858: LD_INT 1
3860: GREATER
3861: IFFALSE 4020
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3863: LD_EXP 21
3867: PPUSH
3868: LD_INT 78
3870: PPUSH
3871: LD_INT 95
3873: PPUSH
3874: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3878: LD_EXP 21
3882: PPUSH
3883: LD_INT 175
3885: PPUSH
3886: CALL_OW 202
// wait_points := wait_points + 15 ;
3890: LD_ADDR_VAR 0 2
3894: PUSH
3895: LD_VAR 0 2
3899: PUSH
3900: LD_INT 15
3902: PLUS
3903: ST_TO_ADDR
// if Difficulty > 2 then
3904: LD_OWVAR 67
3908: PUSH
3909: LD_INT 2
3911: GREATER
3912: IFFALSE 3943
// begin AddComAgressiveMove ( russian_troops_1 , 63 , 81 ) ;
3914: LD_EXP 21
3918: PPUSH
3919: LD_INT 63
3921: PPUSH
3922: LD_INT 81
3924: PPUSH
3925: CALL_OW 174
// wait_points := wait_points + 7 ;
3929: LD_ADDR_VAR 0 2
3933: PUSH
3934: LD_VAR 0 2
3938: PUSH
3939: LD_INT 7
3941: PLUS
3942: ST_TO_ADDR
// end ; if Difficulty > 3 then
3943: LD_OWVAR 67
3947: PUSH
3948: LD_INT 3
3950: GREATER
3951: IFFALSE 4020
// begin AddComAgressiveMove ( russian_troops_1 [ 1 ] , 56 , 73 ) ;
3953: LD_EXP 21
3957: PUSH
3958: LD_INT 1
3960: ARRAY
3961: PPUSH
3962: LD_INT 56
3964: PPUSH
3965: LD_INT 73
3967: PPUSH
3968: CALL_OW 174
// AddComAgressiveMove ( russian_troops_1 [ 2 ] , 89 , 96 ) ;
3972: LD_EXP 21
3976: PUSH
3977: LD_INT 2
3979: ARRAY
3980: PPUSH
3981: LD_INT 89
3983: PPUSH
3984: LD_INT 96
3986: PPUSH
3987: CALL_OW 174
// AddComAgressiveMove ( russian_troops_1 , 67 , 95 ) ;
3991: LD_EXP 21
3995: PPUSH
3996: LD_INT 67
3998: PPUSH
3999: LD_INT 95
4001: PPUSH
4002: CALL_OW 174
// wait_points := wait_points + 12 ;
4006: LD_ADDR_VAR 0 2
4010: PUSH
4011: LD_VAR 0 2
4015: PUSH
4016: LD_INT 12
4018: PLUS
4019: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
4020: LD_INT 35
4022: PPUSH
4023: CALL_OW 67
// wait_points := wait_points - 1 ;
4027: LD_ADDR_VAR 0 2
4031: PUSH
4032: LD_VAR 0 2
4036: PUSH
4037: LD_INT 1
4039: MINUS
4040: ST_TO_ADDR
// if See ( 3 , JMM ) then
4041: LD_INT 3
4043: PPUSH
4044: LD_EXP 16
4048: PPUSH
4049: CALL_OW 292
4053: IFFALSE 4107
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
4055: LD_EXP 21
4059: PUSH
4060: LD_INT 2
4062: ARRAY
4063: PPUSH
4064: LD_STRING D1Rb-Rus1-1
4066: PPUSH
4067: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
4071: LD_EXP 21
4075: PPUSH
4076: LD_EXP 16
4080: PPUSH
4081: CALL_OW 250
4085: PPUSH
4086: LD_EXP 16
4090: PPUSH
4091: CALL_OW 251
4095: PPUSH
4096: CALL_OW 114
// wait ( 0 0$03 ) ;
4100: LD_INT 105
4102: PPUSH
4103: CALL_OW 67
// end ; until wait_points = 0 ;
4107: LD_VAR 0 2
4111: PUSH
4112: LD_INT 0
4114: EQUAL
4115: IFFALSE 4020
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
4117: LD_EXP 21
4121: PUSH
4122: LD_INT 2
4124: ARRAY
4125: PPUSH
4126: LD_STRING D1Rc-Rus1-1
4128: PPUSH
4129: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
4133: LD_EXP 21
4137: PUSH
4138: LD_INT 1
4140: ARRAY
4141: PPUSH
4142: LD_STRING D1Ra-Rus2-1a
4144: PPUSH
4145: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_distxy , 70 , 89 , 9 ] ] ) ;
4149: LD_ADDR_VAR 0 3
4153: PUSH
4154: LD_INT 22
4156: PUSH
4157: LD_INT 0
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 92
4166: PUSH
4167: LD_INT 70
4169: PUSH
4170: LD_INT 89
4172: PUSH
4173: LD_INT 9
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 69
4190: ST_TO_ADDR
// if tmp then
4191: LD_VAR 0 3
4195: IFFALSE 4222
// begin ComAttackUnit ( russian_troops_1 , tmp [ 1 ] ) ;
4197: LD_EXP 21
4201: PPUSH
4202: LD_VAR 0 3
4206: PUSH
4207: LD_INT 1
4209: ARRAY
4210: PPUSH
4211: CALL_OW 115
// wait ( 0 0$4 ) ;
4215: LD_INT 140
4217: PPUSH
4218: CALL_OW 67
// end ; active_powell_dialog := true ;
4222: LD_ADDR_EXP 15
4226: PUSH
4227: LD_INT 1
4229: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4230: LD_EXP 21
4234: PPUSH
4235: LD_INT 45
4237: PPUSH
4238: LD_INT 5
4240: PPUSH
4241: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
4245: LD_EXP 22
4249: PPUSH
4250: LD_INT 26
4252: PPUSH
4253: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
4257: LD_INT 35
4259: PPUSH
4260: CALL_OW 67
// if See ( 3 , JMM ) then
4264: LD_INT 3
4266: PPUSH
4267: LD_EXP 16
4271: PPUSH
4272: CALL_OW 292
4276: IFFALSE 4332
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
4278: LD_EXP 21
4282: PUSH
4283: LD_INT 2
4285: ARRAY
4286: PPUSH
4287: LD_STRING D1Rb-Rus1-1
4289: PPUSH
4290: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
4294: LD_EXP 21
4298: PPUSH
4299: LD_EXP 16
4303: PPUSH
4304: CALL_OW 250
4308: PPUSH
4309: LD_EXP 16
4313: PPUSH
4314: CALL_OW 251
4318: PPUSH
4319: CALL_OW 114
// Wait ( 0 0$50 ) ;
4323: LD_INT 1750
4325: PPUSH
4326: CALL_OW 67
// end else
4330: GO 4347
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4332: LD_EXP 21
4336: PPUSH
4337: LD_INT 45
4339: PPUSH
4340: LD_INT 5
4342: PPUSH
4343: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4347: LD_EXP 21
4351: PUSH
4352: LD_INT 1
4354: ARRAY
4355: PPUSH
4356: LD_INT 45
4358: PPUSH
4359: LD_INT 5
4361: PPUSH
4362: CALL_OW 297
4366: PUSH
4367: LD_INT 10
4369: LESS
4370: IFFALSE 4257
// end ;
4372: PPOPN 3
4374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4375: LD_INT 22
4377: PUSH
4378: LD_INT 3
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 92
4387: PUSH
4388: LD_INT 80
4390: PUSH
4391: LD_INT 83
4393: PUSH
4394: LD_INT 6
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: IFFALSE 4423
4413: PUSH
4414: LD_OWVAR 67
4418: PUSH
4419: LD_INT 1
4421: EQUAL
4422: AND
4423: IFFALSE 4504
4425: GO 4427
4427: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4428: LD_INT 80
4430: PPUSH
4431: LD_INT 83
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_INT 7
4439: NEG
4440: PPUSH
4441: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4445: LD_INT 35
4447: PPUSH
4448: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4452: LD_INT 22
4454: PUSH
4455: LD_INT 3
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 92
4464: PUSH
4465: LD_INT 80
4467: PUSH
4468: LD_INT 83
4470: PUSH
4471: LD_INT 10
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PPUSH
4484: CALL_OW 69
4488: NOT
4489: IFFALSE 4445
// RemoveSeeing ( 80 , 83 , 1 ) ;
4491: LD_INT 80
4493: PPUSH
4494: LD_INT 83
4496: PPUSH
4497: LD_INT 1
4499: PPUSH
4500: CALL_OW 331
// end ;
4504: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4505: LD_EXP 16
4509: PPUSH
4510: LD_EXP 17
4514: PPUSH
4515: CALL_OW 296
4519: PUSH
4520: LD_INT 6
4522: LESS
4523: IFFALSE 4536
4525: PUSH
4526: LD_EXP 17
4530: PPUSH
4531: CALL_OW 302
4535: AND
4536: IFFALSE 5034
4538: GO 4540
4540: DISABLE
// begin ComWalk ( Bobby ) ;
4541: LD_EXP 17
4545: PPUSH
4546: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4550: LD_EXP 17
4554: PPUSH
4555: LD_EXP 16
4559: PPUSH
4560: CALL_OW 250
4564: PPUSH
4565: LD_EXP 16
4569: PPUSH
4570: CALL_OW 251
4574: PPUSH
4575: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4579: LD_INT 35
4581: PPUSH
4582: CALL_OW 67
// until See ( 4 , JMM ) ;
4586: LD_INT 4
4588: PPUSH
4589: LD_EXP 16
4593: PPUSH
4594: CALL_OW 292
4598: IFFALSE 4579
// InGameOn ;
4600: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4604: LD_EXP 16
4608: PPUSH
4609: LD_EXP 17
4613: PPUSH
4614: CALL_OW 119
// if not cyrus_in_squad then
4618: LD_EXP 7
4622: NOT
4623: IFFALSE 4651
// begin AddComAnim ( JMM , 6 ) ;
4625: LD_EXP 16
4629: PPUSH
4630: LD_INT 6
4632: PPUSH
4633: CALL_OW 209
// AddComTurnUnit ( JMM , Bobby ) ;
4637: LD_EXP 16
4641: PPUSH
4642: LD_EXP 17
4646: PPUSH
4647: CALL_OW 179
// end ; if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4651: LD_EXP 7
4655: IFFALSE 4668
4657: PUSH
4658: LD_EXP 18
4662: PPUSH
4663: CALL_OW 302
4667: AND
4668: IFFALSE 4690
4670: PUSH
4671: LD_EXP 16
4675: PPUSH
4676: LD_EXP 18
4680: PPUSH
4681: CALL_OW 296
4685: PUSH
4686: LD_INT 10
4688: LESS
4689: AND
4690: IFFALSE 4735
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4692: LD_EXP 18
4696: PPUSH
4697: LD_EXP 16
4701: PPUSH
4702: CALL_OW 250
4706: PPUSH
4707: LD_EXP 16
4711: PPUSH
4712: CALL_OW 251
4716: PPUSH
4717: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4721: LD_EXP 18
4725: PPUSH
4726: LD_EXP 17
4730: PPUSH
4731: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4735: LD_EXP 16
4739: PPUSH
4740: LD_STRING D2-JMM-1
4742: PPUSH
4743: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4747: LD_EXP 17
4751: PPUSH
4752: LD_EXP 16
4756: PPUSH
4757: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4761: LD_INT 10
4763: PPUSH
4764: CALL_OW 67
// Say ( Bobby , D2-Bobby-1 ) ;
4768: LD_EXP 17
4772: PPUSH
4773: LD_STRING D2-Bobby-1
4775: PPUSH
4776: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4780: LD_EXP 16
4784: PPUSH
4785: LD_STRING D2-JMM-2
4787: PPUSH
4788: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4792: LD_EXP 17
4796: PPUSH
4797: LD_EXP 16
4801: PPUSH
4802: CALL_OW 250
4806: PPUSH
4807: LD_EXP 16
4811: PPUSH
4812: CALL_OW 251
4816: PPUSH
4817: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4821: LD_EXP 17
4825: PPUSH
4826: LD_STRING D2-Bobby-2
4828: PPUSH
4829: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4833: LD_EXP 16
4837: PPUSH
4838: LD_STRING D2-JMM-3
4840: PPUSH
4841: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4845: LD_EXP 17
4849: PPUSH
4850: LD_EXP 16
4854: PPUSH
4855: CALL_OW 119
// DialogueOn ;
4859: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4863: LD_EXP 17
4867: PPUSH
4868: LD_STRING D2-Bobby-3
4870: PPUSH
4871: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4875: LD_EXP 16
4879: PPUSH
4880: LD_STRING D2-JMM-4
4882: PPUSH
4883: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4887: LD_EXP 17
4891: PPUSH
4892: LD_STRING D2-Bobby-4
4894: PPUSH
4895: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4899: LD_EXP 16
4903: PPUSH
4904: LD_STRING D2-JMM-5
4906: PPUSH
4907: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4911: LD_EXP 17
4915: PPUSH
4916: LD_STRING D2-Bobby-5
4918: PPUSH
4919: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4923: LD_EXP 16
4927: PPUSH
4928: LD_STRING D2-JMM-6
4930: PPUSH
4931: CALL_OW 88
// if not powell_contact then
4935: LD_EXP 5
4939: NOT
4940: IFFALSE 4966
// begin Say ( Bobby , D2-Bobby-6 ) ;
4942: LD_EXP 17
4946: PPUSH
4947: LD_STRING D2-Bobby-6
4949: PPUSH
4950: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4954: LD_EXP 16
4958: PPUSH
4959: LD_STRING D2-JMM-7
4961: PPUSH
4962: CALL_OW 88
// end ; DialogueOff ;
4966: CALL_OW 7
// InGameOff ;
4970: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4974: LD_EXP 17
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4986: LD_EXP 16
4990: PUSH
4991: LD_EXP 17
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 139
// bobby_in_squad := true ;
5004: LD_ADDR_EXP 4
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
5012: LD_EXP 5
5016: IFFALSE 5025
5018: PUSH
5019: LD_EXP 7
5023: NOT
5024: AND
5025: IFFALSE 5034
// ChangeMissionObjectives ( M2b ) ;
5027: LD_STRING M2b
5029: PPUSH
5030: CALL_OW 337
// end ;
5034: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
5035: LD_EXP 3
5039: IFFALSE 5051
5041: PUSH
5042: LD_OWVAR 67
5046: PUSH
5047: LD_INT 3
5049: LESS
5050: AND
5051: IFFALSE 5085
5053: GO 5055
5055: DISABLE
// begin wait ( 1 1$00 ) ;
5056: LD_INT 2100
5058: PPUSH
5059: CALL_OW 67
// if not bobby_in_squad then
5063: LD_EXP 4
5067: NOT
5068: IFFALSE 5085
// ComMoveXY ( Bobby , 75 , 83 ) ;
5070: LD_EXP 17
5074: PPUSH
5075: LD_INT 75
5077: PPUSH
5078: LD_INT 83
5080: PPUSH
5081: CALL_OW 111
// end ;
5085: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
5086: LD_EXP 7
5090: IFFALSE 5099
5092: PUSH
5093: LD_EXP 4
5097: NOT
5098: AND
5099: IFFALSE 5128
5101: GO 5103
5103: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
5104: LD_EXP 17
5108: PPUSH
5109: LD_INT 105
5111: PPUSH
5112: LD_INT 97
5114: PPUSH
5115: CALL_OW 111
// AddComCrawl ( Bobby ) ;
5119: LD_EXP 17
5123: PPUSH
5124: CALL_OW 197
// end ;
5128: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
5129: LD_EXP 16
5133: PPUSH
5134: LD_INT 6
5136: PPUSH
5137: CALL_OW 308
5141: IFFALSE 5163
5143: PUSH
5144: LD_EXP 16
5148: PPUSH
5149: LD_EXP 17
5153: PPUSH
5154: CALL_OW 296
5158: PUSH
5159: LD_INT 7
5161: LESS
5162: AND
5163: IFFALSE 5171
5165: PUSH
5166: LD_EXP 4
5170: AND
5171: IFFALSE 5218
5173: GO 5175
5175: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
5176: LD_EXP 16
5180: PUSH
5181: LD_EXP 17
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
5194: LD_EXP 16
5198: PPUSH
5199: LD_STRING D2a-JMM-1
5201: PPUSH
5202: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
5206: LD_EXP 17
5210: PPUSH
5211: LD_STRING D2a-Bobby-1
5213: PPUSH
5214: CALL_OW 88
// end ;
5218: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
5219: LD_EXP 15
5223: IFFALSE 5240
5225: PUSH
5226: LD_INT 3
5228: PPUSH
5229: LD_EXP 16
5233: PPUSH
5234: CALL_OW 292
5238: NOT
5239: AND
5240: IFFALSE 5411
5242: GO 5244
5244: DISABLE
// begin wait ( 0 0$5 ) ;
5245: LD_INT 175
5247: PPUSH
5248: CALL_OW 67
// InGameOn ;
5252: CALL_OW 8
// DialogueOn ;
5256: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
5260: LD_EXP 19
5264: PPUSH
5265: LD_STRING D3-Pow-1
5267: PPUSH
5268: CALL 72646 0 2
// Say ( JMM , D3-JMM-1 ) ;
5272: LD_EXP 16
5276: PPUSH
5277: LD_STRING D3-JMM-1
5279: PPUSH
5280: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
5284: LD_EXP 19
5288: PPUSH
5289: LD_STRING D3-Pow-2
5291: PPUSH
5292: CALL 72646 0 2
// Say ( JMM , D3-JMM-2 ) ;
5296: LD_EXP 16
5300: PPUSH
5301: LD_STRING D3-JMM-2
5303: PPUSH
5304: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
5308: LD_EXP 19
5312: PPUSH
5313: LD_STRING D3-Pow-3
5315: PPUSH
5316: CALL 72646 0 2
// DialogueOff ;
5320: CALL_OW 7
// InGameOff ;
5324: CALL_OW 9
// powell_contact := true ;
5328: LD_ADDR_EXP 5
5332: PUSH
5333: LD_INT 1
5335: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
5336: LD_INT 10
5338: PPUSH
5339: LD_INT 1
5341: PPUSH
5342: CALL_OW 424
// uc_side := 4 ;
5346: LD_ADDR_OWVAR 20
5350: PUSH
5351: LD_INT 4
5353: ST_TO_ADDR
// uc_nation := 1 ;
5354: LD_ADDR_OWVAR 21
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5362: LD_ADDR_EXP 19
5366: PUSH
5367: LD_STRING Powell
5369: PPUSH
5370: LD_INT 0
5372: PPUSH
5373: LD_STRING 
5375: PPUSH
5376: CALL 30201 0 3
5380: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5381: LD_STRING M2
5383: PPUSH
5384: CALL_OW 337
// if not bobby_in_squad then
5388: LD_EXP 4
5392: NOT
5393: IFFALSE 5404
// ChangeMissionObjectives ( M2a ) else
5395: LD_STRING M2a
5397: PPUSH
5398: CALL_OW 337
5402: GO 5411
// ChangeMissionObjectives ( M2b ) ;
5404: LD_STRING M2b
5406: PPUSH
5407: CALL_OW 337
// end ;
5411: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5412: LD_EXP 16
5416: PPUSH
5417: LD_INT 7
5419: PPUSH
5420: CALL_OW 308
5424: IFFALSE 5559
5426: GO 5428
5428: DISABLE
// begin DialogueOn ;
5429: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5433: LD_EXP 20
5437: PPUSH
5438: LD_STRING D4-Rus3-1
5440: PPUSH
5441: CALL 72646 0 2
// DialogueOff ;
5445: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5449: LD_STRING M3a
5451: PPUSH
5452: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5456: LD_INT 11
5458: PPUSH
5459: LD_INT 1
5461: PPUSH
5462: CALL_OW 424
// Wait ( 0 0$02 ) ;
5466: LD_INT 70
5468: PPUSH
5469: CALL_OW 67
// DialogueOn ;
5473: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5477: LD_EXP 19
5481: PPUSH
5482: LD_STRING D4-Pow-1
5484: PPUSH
5485: CALL_OW 586
// DialogueOff ;
5489: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5493: LD_STRING M3b
5495: PPUSH
5496: CALL_OW 337
// case Query ( Q1 ) of 1 :
5500: LD_STRING Q1
5502: PPUSH
5503: CALL_OW 97
5507: PUSH
5508: LD_INT 1
5510: DOUBLE
5511: EQUAL
5512: IFTRUE 5516
5514: GO 5547
5516: POP
// begin macmilan_use_radio := true ;
5517: LD_ADDR_EXP 6
5521: PUSH
5522: LD_INT 1
5524: ST_TO_ADDR
// DialogueOn ;
5525: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5529: LD_EXP 16
5533: PPUSH
5534: LD_STRING D4a-JMM-1
5536: PPUSH
5537: CALL_OW 88
// DialogueOff ;
5541: CALL_OW 7
// end ; 2 :
5545: GO 5559
5547: LD_INT 2
5549: DOUBLE
5550: EQUAL
5551: IFTRUE 5555
5553: GO 5558
5555: POP
// ; end ;
5556: GO 5559
5558: POP
// end ;
5559: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5560: LD_EXP 16
5564: PPUSH
5565: LD_EXP 18
5569: PPUSH
5570: CALL_OW 296
5574: PUSH
5575: LD_INT 8
5577: LESS
5578: IFFALSE 5591
5580: PUSH
5581: LD_EXP 18
5585: PPUSH
5586: CALL_OW 302
5590: AND
5591: IFFALSE 5892
5593: GO 5595
5595: DISABLE
// begin InGameOn ;
5596: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5600: LD_EXP 16
5604: PPUSH
5605: LD_EXP 18
5609: PPUSH
5610: CALL_OW 250
5614: PPUSH
5615: LD_EXP 18
5619: PPUSH
5620: CALL_OW 251
5624: PPUSH
5625: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5629: LD_EXP 17
5633: PPUSH
5634: CALL_OW 302
5638: IFFALSE 5646
5640: PUSH
5641: LD_EXP 4
5645: AND
5646: IFFALSE 5677
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5648: LD_EXP 17
5652: PPUSH
5653: LD_EXP 16
5657: PPUSH
5658: CALL_OW 250
5662: PPUSH
5663: LD_EXP 16
5667: PPUSH
5668: CALL_OW 251
5672: PPUSH
5673: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5677: LD_EXP 16
5681: PPUSH
5682: LD_STRING D5-JMM-1
5684: PPUSH
5685: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5689: LD_INT 10
5691: PPUSH
5692: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5696: LD_EXP 16
5700: PPUSH
5701: LD_EXP 18
5705: PPUSH
5706: CALL_OW 119
// ComWalk ( Cyrus ) ;
5710: LD_EXP 18
5714: PPUSH
5715: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5719: LD_EXP 18
5723: PPUSH
5724: LD_EXP 16
5728: PPUSH
5729: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5733: LD_EXP 18
5737: PPUSH
5738: LD_STRING D5-Cyrus-1
5740: PPUSH
5741: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5745: LD_EXP 17
5749: PPUSH
5750: CALL_OW 302
5754: IFFALSE 5762
5756: PUSH
5757: LD_EXP 4
5761: AND
5762: IFFALSE 5802
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5764: LD_EXP 17
5768: PPUSH
5769: LD_EXP 18
5773: PPUSH
5774: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5778: LD_EXP 17
5782: PPUSH
5783: LD_STRING D5-Bobby-1
5785: PPUSH
5786: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5790: LD_EXP 16
5794: PPUSH
5795: LD_STRING D5-JMM-2
5797: PPUSH
5798: CALL_OW 88
// end ; InGameOff ;
5802: CALL_OW 9
// cyrus_in_squad := true ;
5806: LD_ADDR_EXP 7
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5814: LD_EXP 18
5818: PPUSH
5819: LD_INT 1
5821: PPUSH
5822: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5826: LD_EXP 5
5830: IFFALSE 5839
5832: PUSH
5833: LD_EXP 4
5837: NOT
5838: AND
5839: IFFALSE 5848
// ChangeMissionObjectives ( M2b ) ;
5841: LD_STRING M2b
5843: PPUSH
5844: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5848: LD_EXP 4
5852: NOT
5853: IFFALSE 5870
5855: PUSH
5856: LD_EXP 17
5860: PPUSH
5861: CALL_OW 255
5865: PUSH
5866: LD_INT 4
5868: EQUAL
5869: AND
5870: IFFALSE 5883
5872: PUSH
5873: LD_EXP 17
5877: PPUSH
5878: CALL_OW 302
5882: AND
5883: IFFALSE 5892
// SetAchievement ( ACH_CYRUS ) ;
5885: LD_STRING ACH_CYRUS
5887: PPUSH
5888: CALL_OW 543
// end ;
5892: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5893: LD_EXP 4
5897: IFFALSE 5905
5899: PUSH
5900: LD_EXP 7
5904: AND
5905: IFFALSE 5917
5907: GO 5909
5909: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5910: LD_STRING M2c
5912: PPUSH
5913: CALL_OW 337
5917: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5918: LD_EXP 16
5922: PPUSH
5923: LD_INT 8
5925: PPUSH
5926: CALL_OW 308
5930: IFFALSE 5982
5932: GO 5934
5934: DISABLE
// begin macmilan_in_trap := true ;
5935: LD_ADDR_EXP 9
5939: PUSH
5940: LD_INT 1
5942: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5943: LD_INT 35
5945: PPUSH
5946: CALL_OW 67
// DialogueOn ;
5950: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5954: LD_EXP 28
5958: PPUSH
5959: LD_STRING D5-Pok-1
5961: PPUSH
5962: CALL_OW 88
// DialogueOff ;
5966: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5970: LD_EXP 16
5974: PPUSH
5975: LD_STRING D4b-JMM-1
5977: PPUSH
5978: CALL_OW 88
// end ;
5982: END
// every 0 0$1 trigger IsInArea ( JMM , ruBaseArea ) do
5983: LD_EXP 16
5987: PPUSH
5988: LD_INT 16
5990: PPUSH
5991: CALL_OW 308
5995: IFFALSE 6072
5997: GO 5999
5999: DISABLE
// begin macmilan_in_trap := true ;
6000: LD_ADDR_EXP 9
6004: PUSH
6005: LD_INT 1
6007: ST_TO_ADDR
// ComAttackUnit ( russian_troops_3 , JMM ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_EXP 16
6017: PPUSH
6018: CALL_OW 115
// repeat wait ( 0 0$0.3 ) ;
6022: LD_INT 10
6024: PPUSH
6025: CALL_OW 67
// until GetLives ( JMM ) < 1000 and See ( 3 , JMM ) ;
6029: LD_EXP 16
6033: PPUSH
6034: CALL_OW 256
6038: PUSH
6039: LD_INT 1000
6041: LESS
6042: IFFALSE 6058
6044: PUSH
6045: LD_INT 3
6047: PPUSH
6048: LD_EXP 16
6052: PPUSH
6053: CALL_OW 292
6057: AND
6058: IFFALSE 6022
// Say ( JMM , D4b-JMM-1 ) ;
6060: LD_EXP 16
6064: PPUSH
6065: LD_STRING D4b-JMM-1
6067: PPUSH
6068: CALL_OW 88
// end ;
6072: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
6073: LD_EXP 16
6077: PPUSH
6078: LD_INT 13
6080: PPUSH
6081: CALL_OW 308
6085: IFFALSE 6113
6087: PUSH
6088: LD_EXP 16
6092: PPUSH
6093: LD_EXP 25
6097: PUSH
6098: LD_EXP 25
6102: ARRAY
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 12
6111: LESS
6112: AND
6113: IFTRUE 6143
6115: PUSH
6116: LD_EXP 25
6120: PPUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 24
6126: PUSH
6127: LD_INT 990
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 72
6142: OR
6143: IFFALSE 6415
6145: GO 6147
6147: DISABLE
6148: LD_INT 0
6150: PPUSH
6151: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
6152: LD_ADDR_VAR 0 2
6156: PUSH
6157: LD_INT 300
6159: PUSH
6160: LD_INT 250
6162: PUSH
6163: LD_INT 200
6165: PUSH
6166: LD_INT 150
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PUSH
6175: LD_OWVAR 67
6179: ARRAY
6180: ST_TO_ADDR
// for i in russian_meta_guards do
6181: LD_ADDR_VAR 0 1
6185: PUSH
6186: LD_EXP 25
6190: PUSH
6191: FOR_IN
6192: IFFALSE 6232
// if IsOk ( i ) then
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 302
6203: IFFALSE 6230
// SetLives ( i , GetLives ( i ) - hp ) ;
6205: LD_VAR 0 1
6209: PPUSH
6210: LD_VAR 0 1
6214: PPUSH
6215: CALL_OW 256
6219: PUSH
6220: LD_VAR 0 2
6224: MINUS
6225: PPUSH
6226: CALL_OW 234
6230: GO 6191
6232: POP
6233: POP
// DialogueOn ;
6234: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
6238: LD_EXP 25
6242: PUSH
6243: LD_EXP 25
6247: ARRAY
6248: PPUSH
6249: LD_STRING D6-FRus1-1
6251: PPUSH
6252: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 1 then
6256: LD_INT 22
6258: PUSH
6259: LD_INT 1
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 50
6268: PUSH
6269: EMPTY
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PPUSH
6276: CALL_OW 69
6280: PUSH
6281: LD_INT 1
6283: GREATER
6284: IFFALSE 6298
// Say ( JMM , D6-JMM-1 ) ;
6286: LD_EXP 16
6290: PPUSH
6291: LD_STRING D6-JMM-1
6293: PPUSH
6294: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
6298: LD_EXP 18
6302: PPUSH
6303: CALL_OW 302
6307: IFFALSE 6315
6309: PUSH
6310: LD_EXP 7
6314: AND
6315: IFFALSE 6329
// Say ( Cyrus , D6-Cyrus-1 ) ;
6317: LD_EXP 18
6321: PPUSH
6322: LD_STRING D6-Cyrus-1
6324: PPUSH
6325: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
6329: LD_EXP 17
6333: PPUSH
6334: CALL_OW 302
6338: IFFALSE 6346
6340: PUSH
6341: LD_EXP 4
6345: AND
6346: IFFALSE 6360
// Say ( Bobby , D6-Bobby-1 ) ;
6348: LD_EXP 17
6352: PPUSH
6353: LD_STRING D6-Bobby-1
6355: PPUSH
6356: CALL_OW 88
// DialogueOff ;
6360: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
6364: LD_INT 140
6366: PUSH
6367: LD_INT 105
6369: PUSH
6370: LD_INT 70
6372: PUSH
6373: LD_INT 70
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: PUSH
6382: LD_OWVAR 67
6386: ARRAY
6387: PPUSH
6388: CALL_OW 67
// meta_action := true ;
6392: LD_ADDR_EXP 10
6396: PUSH
6397: LD_INT 1
6399: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
6400: LD_EXP 25
6404: PPUSH
6405: LD_INT 94
6407: PPUSH
6408: LD_INT 8
6410: PPUSH
6411: CALL_OW 114
// end ;
6415: PPOPN 2
6417: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
6418: LD_EXP 16
6422: PPUSH
6423: LD_INT 14
6425: PPUSH
6426: CALL_OW 308
6430: IFFALSE 6442
6432: GO 6434
6434: DISABLE
// SetAchievement ( ACH_SECRET ) ;
6435: LD_STRING ACH_SECRET
6437: PPUSH
6438: CALL_OW 543
6442: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
6443: LD_EXP 16
6447: PPUSH
6448: LD_INT 93
6450: PPUSH
6451: LD_INT 1
6453: PPUSH
6454: CALL_OW 297
6458: PUSH
6459: LD_INT 5
6461: LESS
6462: IFFALSE 6484
6464: PUSH
6465: LD_INT 22
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PPUSH
6475: CALL_OW 69
6479: PUSH
6480: LD_INT 1
6482: GREATER
6483: AND
6484: IFFALSE 6501
6486: GO 6488
6488: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
6489: LD_EXP 16
6493: PPUSH
6494: LD_STRING D6a-JMM-1
6496: PPUSH
6497: CALL_OW 88
6501: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6502: LD_EXP 17
6506: PPUSH
6507: LD_INT 10
6509: PPUSH
6510: CALL_OW 308
6514: IFTRUE 6530
6516: PUSH
6517: LD_EXP 17
6521: PPUSH
6522: LD_INT 12
6524: PPUSH
6525: CALL_OW 308
6529: OR
6530: IFFALSE 6586
6532: GO 6534
6534: DISABLE
// begin bobby_saved := true ;
6535: LD_ADDR_EXP 12
6539: PUSH
6540: LD_INT 1
6542: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: CALL_OW 256
6552: PPUSH
6553: LD_STRING 01_BobbyLifePoints_1
6555: PPUSH
6556: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6560: LD_EXP 17
6564: PPUSH
6565: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6569: LD_STRING Bobby
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6579: LD_STRING enableBioCharacter(BIO_BOBBY)
6581: PPUSH
6582: CALL_OW 559
// end ;
6586: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6587: LD_EXP 18
6591: PPUSH
6592: LD_INT 10
6594: PPUSH
6595: CALL_OW 308
6599: IFTRUE 6615
6601: PUSH
6602: LD_EXP 18
6606: PPUSH
6607: LD_INT 12
6609: PPUSH
6610: CALL_OW 308
6614: OR
6615: IFFALSE 6671
6617: GO 6619
6619: DISABLE
// begin cyrus_saved := true ;
6620: LD_ADDR_EXP 13
6624: PUSH
6625: LD_INT 1
6627: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6628: LD_EXP 18
6632: PPUSH
6633: CALL_OW 256
6637: PPUSH
6638: LD_STRING 01_CyrusLifePoints_1
6640: PPUSH
6641: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6645: LD_EXP 18
6649: PPUSH
6650: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6654: LD_STRING Cyrus
6656: PPUSH
6657: LD_INT 1
6659: PPUSH
6660: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6664: LD_STRING enableBioCharacter(BIO_CYRUS)
6666: PPUSH
6667: CALL_OW 559
// end ;
6671: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6672: LD_EXP 16
6676: PPUSH
6677: LD_INT 10
6679: PPUSH
6680: CALL_OW 308
6684: IFTRUE 6700
6686: PUSH
6687: LD_EXP 16
6691: PPUSH
6692: LD_INT 12
6694: PPUSH
6695: CALL_OW 308
6699: OR
6700: IFFALSE 7375
6702: GO 6704
6704: DISABLE
6705: LD_INT 0
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
6711: PPUSH
6712: PPUSH
// begin if macmilan_use_radio then
6713: LD_EXP 6
6717: IFFALSE 6726
// SetAchievement ( ACH_RADIO ) ;
6719: LD_STRING ACH_RADIO
6721: PPUSH
6722: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6726: LD_EXP 13
6730: NOT
6731: IFFALSE 6739
6733: PUSH
6734: LD_EXP 7
6738: AND
6739: IFFALSE 6752
6741: PUSH
6742: LD_EXP 18
6746: PPUSH
6747: CALL_OW 302
6751: AND
6752: IFTRUE 6782
6754: PUSH
6755: LD_EXP 12
6759: NOT
6760: IFFALSE 6768
6762: PUSH
6763: LD_EXP 4
6767: AND
6768: IFFALSE 6781
6770: PUSH
6771: LD_EXP 17
6775: PPUSH
6776: CALL_OW 302
6780: AND
6781: OR
6782: IFFALSE 6823
// case Query ( Q2 ) of 1 :
6784: LD_STRING Q2
6786: PPUSH
6787: CALL_OW 97
6791: PUSH
6792: LD_INT 1
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 6811
6800: POP
// wait_for_them := true ; 2 :
6801: LD_ADDR_VAR 0 3
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
6809: GO 6823
6811: LD_INT 2
6813: DOUBLE
6814: EQUAL
6815: IFTRUE 6819
6817: GO 6822
6819: POP
// ; end ;
6820: GO 6823
6822: POP
// if wait_for_them then
6823: LD_VAR 0 3
6827: IFFALSE 6962
// repeat wait ( 0 0$01 ) ;
6829: LD_INT 35
6831: PPUSH
6832: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6836: LD_EXP 13
6840: IFFALSE 6848
6842: PUSH
6843: LD_EXP 12
6847: AND
6848: IFTRUE 6891
6850: PUSH
6851: LD_EXP 13
6855: IFFALSE 6890
6857: PUSH
6858: LD_EXP 4
6862: NOT
6863: IFTRUE 6876
6865: PUSH
6866: LD_EXP 17
6870: PPUSH
6871: CALL_OW 303
6875: OR
6876: IFTRUE 6889
6878: PUSH
6879: LD_EXP 17
6883: PPUSH
6884: CALL_OW 301
6888: OR
6889: AND
6890: OR
6891: IFTRUE 6934
6893: PUSH
6894: LD_EXP 12
6898: IFFALSE 6933
6900: PUSH
6901: LD_EXP 7
6905: NOT
6906: IFTRUE 6919
6908: PUSH
6909: LD_EXP 18
6913: PPUSH
6914: CALL_OW 303
6918: OR
6919: IFTRUE 6932
6921: PUSH
6922: LD_EXP 18
6926: PPUSH
6927: CALL_OW 301
6931: OR
6932: AND
6933: OR
6934: IFTRUE 6960
6936: PUSH
6937: LD_EXP 17
6941: PPUSH
6942: CALL_OW 301
6946: IFFALSE 6959
6948: PUSH
6949: LD_EXP 18
6953: PPUSH
6954: CALL_OW 301
6958: AND
6959: OR
6960: IFFALSE 6829
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6962: LD_EXP 16
6966: PPUSH
6967: CALL_OW 256
6971: PPUSH
6972: LD_STRING 01_JMMLifePoints_1
6974: PPUSH
6975: CALL_OW 39
// RemoveUnit ( JMM ) ;
6979: LD_EXP 16
6983: PPUSH
6984: CALL_OW 64
// to_reward := [ JMM ] ;
6988: LD_ADDR_VAR 0 2
6992: PUSH
6993: LD_EXP 16
6997: PUSH
6998: EMPTY
6999: LIST
7000: ST_TO_ADDR
// if bobby_saved then
7001: LD_EXP 12
7005: IFFALSE 7023
// to_reward := to_reward ^ Bobby ;
7007: LD_ADDR_VAR 0 2
7011: PUSH
7012: LD_VAR 0 2
7016: PUSH
7017: LD_EXP 17
7021: ADD
7022: ST_TO_ADDR
// if cyrus_saved then
7023: LD_EXP 13
7027: IFFALSE 7045
// to_reward := to_reward ^ Cyrus ;
7029: LD_ADDR_VAR 0 2
7033: PUSH
7034: LD_VAR 0 2
7038: PUSH
7039: LD_EXP 18
7043: ADD
7044: ST_TO_ADDR
// m1 := true ;
7045: LD_ADDR_VAR 0 4
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// m2 := bobby_saved ;
7053: LD_ADDR_VAR 0 5
7057: PUSH
7058: LD_EXP 12
7062: ST_TO_ADDR
// m3 := cyrus_saved ;
7063: LD_ADDR_VAR 0 6
7067: PUSH
7068: LD_EXP 13
7072: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
7073: LD_STRING JMM
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: CALL_OW 101
// if not bobby_in_squad then
7083: LD_EXP 4
7087: NOT
7088: IFFALSE 7101
// AddMedal ( Bobby , - 1 ) ;
7090: LD_STRING Bobby
7092: PPUSH
7093: LD_INT 1
7095: NEG
7096: PPUSH
7097: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
7101: LD_EXP 12
7105: NOT
7106: IFFALSE 7132
7108: PUSH
7109: LD_EXP 17
7113: PPUSH
7114: CALL_OW 303
7118: IFTRUE 7131
7120: PUSH
7121: LD_EXP 17
7125: PPUSH
7126: CALL_OW 301
7130: OR
7131: AND
7132: IFFALSE 7145
// AddMedal ( Bobby , - 2 ) ;
7134: LD_STRING Bobby
7136: PPUSH
7137: LD_INT 2
7139: NEG
7140: PPUSH
7141: CALL_OW 101
// if not cyrus_in_squad then
7145: LD_EXP 7
7149: NOT
7150: IFFALSE 7163
// AddMedal ( Cyrus , - 1 ) ;
7152: LD_STRING Cyrus
7154: PPUSH
7155: LD_INT 1
7157: NEG
7158: PPUSH
7159: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
7163: LD_EXP 13
7167: NOT
7168: IFFALSE 7194
7170: PUSH
7171: LD_EXP 18
7175: PPUSH
7176: CALL_OW 303
7180: IFTRUE 7193
7182: PUSH
7183: LD_EXP 18
7187: PPUSH
7188: CALL_OW 301
7192: OR
7193: AND
7194: IFFALSE 7207
// AddMedal ( Cyrus , - 2 ) ;
7196: LD_STRING Cyrus
7198: PPUSH
7199: LD_INT 2
7201: NEG
7202: PPUSH
7203: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
7207: LD_OWVAR 67
7211: PUSH
7212: LD_INT 3
7214: GREATEREQUAL
7215: IFFALSE 7223
7217: PUSH
7218: LD_VAR 0 4
7222: AND
7223: IFFALSE 7231
7225: PUSH
7226: LD_VAR 0 5
7230: AND
7231: IFFALSE 7239
7233: PUSH
7234: LD_VAR 0 6
7238: AND
7239: IFFALSE 7251
// SetAchievementEX ( ACH_AMER , 1 ) ;
7241: LD_STRING ACH_AMER
7243: PPUSH
7244: LD_INT 1
7246: PPUSH
7247: CALL_OW 564
// GiveMedals ( MAIN ) ;
7251: LD_STRING MAIN
7253: PPUSH
7254: CALL_OW 102
// RewardPeople ( to_reward ) ;
7258: LD_VAR 0 2
7262: PPUSH
7263: CALL_OW 43
// if bobby_saved then
7267: LD_EXP 12
7271: IFFALSE 7291
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
7273: LD_EXP 17
7277: PPUSH
7278: LD_EXP 2
7282: PUSH
7283: LD_STRING Bobby
7285: STR
7286: PPUSH
7287: CALL_OW 38
// if cyrus_saved then
7291: LD_EXP 13
7295: IFFALSE 7315
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
7297: LD_EXP 18
7301: PPUSH
7302: LD_EXP 2
7306: PUSH
7307: LD_STRING Cyrus
7309: STR
7310: PPUSH
7311: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
7315: LD_EXP 16
7319: PPUSH
7320: LD_EXP 2
7324: PUSH
7325: LD_STRING JMM
7327: STR
7328: PPUSH
7329: CALL_OW 38
// if tick <= 3 3$00 then
7333: LD_OWVAR 1
7337: PUSH
7338: LD_INT 6300
7340: LESSEQUAL
7341: IFFALSE 7350
// SetAchievement ( ACH_ASPEED_1 ) ;
7343: LD_STRING ACH_ASPEED_1
7345: PPUSH
7346: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
7350: LD_STRING enableBioCharacter(BIO_JMM)
7352: PPUSH
7353: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
7357: LD_STRING enableBioCharacter(BIO_JOAN)
7359: PPUSH
7360: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
7364: LD_STRING enableBioCharacter(BIO_BARN)
7366: PPUSH
7367: CALL_OW 559
// YouWin ;
7371: CALL_OW 103
// end ; end_of_file
7375: PPOPN 6
7377: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
7378: LD_VAR 0 1
7382: PUSH
7383: LD_EXP 16
7387: EQUAL
7388: IFFALSE 7397
// YouLost ( JMM ) ;
7390: LD_STRING JMM
7392: PPUSH
7393: CALL_OW 104
// end ;
7397: PPOPN 1
7399: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7400: LD_VAR 0 1
7404: PPUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: CALL 23785 0 2
// end ;
7414: PPOPN 2
7416: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
7417: LD_INT 0
7419: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
7420: LD_VAR 0 1
7424: PUSH
7425: LD_INT 22
7427: PUSH
7428: LD_INT 1
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 23
7437: PUSH
7438: LD_INT 1
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 21
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PPUSH
7460: CALL_OW 69
7464: IN
7465: IFFALSE 7477
7467: PUSH
7468: LD_VAR 0 2
7472: PUSH
7473: LD_INT 1
7475: EQUAL
7476: AND
7477: IFFALSE 7534
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
7479: LD_ADDR_VAR 0 4
7483: PUSH
7484: LD_INT 22
7486: PUSH
7487: LD_INT 3
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 25
7496: PUSH
7497: LD_INT 1
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PPUSH
7508: CALL_OW 69
7512: PUSH
7513: FOR_IN
7514: IFFALSE 7532
// ComAttackUnit ( i , JMM ) ;
7516: LD_VAR 0 4
7520: PPUSH
7521: LD_EXP 16
7525: PPUSH
7526: CALL_OW 115
7530: GO 7513
7532: POP
7533: POP
// end ;
7534: PPOPN 4
7536: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7537: LD_VAR 0 1
7541: PPUSH
7542: CALL 23727 0 1
// if GetSide ( un ) = 3 and GetType ( un ) = unit_building then
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 255
7555: PUSH
7556: LD_INT 3
7558: EQUAL
7559: IFFALSE 7576
7561: PUSH
7562: LD_VAR 0 1
7566: PPUSH
7567: CALL_OW 247
7571: PUSH
7572: LD_INT 3
7574: EQUAL
7575: AND
7576: IFFALSE 7619
// begin ComExitBuilding ( russian_troops_2 ) ;
7578: LD_EXP 22
7582: PPUSH
7583: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
7587: LD_EXP 21
7591: PUSH
7592: LD_EXP 22
7596: ADD
7597: PUSH
7598: LD_EXP 28
7602: ADD
7603: PUSH
7604: LD_EXP 24
7608: ADD
7609: PPUSH
7610: LD_EXP 16
7614: PPUSH
7615: CALL_OW 115
// end ; if un = JMM then
7619: LD_VAR 0 1
7623: PUSH
7624: LD_EXP 16
7628: EQUAL
7629: IFFALSE 7638
// YouLost ( JMM ) ;
7631: LD_STRING JMM
7633: PPUSH
7634: CALL_OW 104
// end ; end_of_file end_of_file
7638: PPOPN 1
7640: END
// export globalGameSaveCounter ; every 0 0$1 do
7641: GO 7643
7643: DISABLE
// begin enable ;
7644: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7645: LD_STRING updateTimer(
7647: PUSH
7648: LD_OWVAR 1
7652: STR
7653: PUSH
7654: LD_STRING );
7656: STR
7657: PPUSH
7658: CALL_OW 559
// end ;
7662: END
// every 0 0$1 do
7663: GO 7665
7665: DISABLE
// begin globalGameSaveCounter := 0 ;
7666: LD_ADDR_EXP 29
7670: PUSH
7671: LD_INT 0
7673: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7674: LD_STRING setGameSaveCounter(0)
7676: PPUSH
7677: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7681: LD_STRING initStreamRollete();
7683: PPUSH
7684: CALL_OW 559
// InitStreamMode ;
7688: CALL 9040 0 0
// DefineStreamItems ( false ) ;
7692: LD_INT 0
7694: PPUSH
7695: CALL 9504 0 1
// end ;
7699: END
// export function SOS_MapStart ( ) ; begin
7700: LD_INT 0
7702: PPUSH
// if streamModeActive then
7703: LD_EXP 30
7707: IFFALSE 7716
// DefineStreamItems ( true ) ;
7709: LD_INT 1
7711: PPUSH
7712: CALL 9504 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
7716: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
7718: PPUSH
7719: CALL_OW 559
// UpdateLuaVariables ( ) ;
7723: CALL 7740 0 0
// UpdateFactoryWaypoints ( ) ;
7727: CALL 22626 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7731: CALL 22878 0 0
// end ;
7735: LD_VAR 0 1
7739: RET
// function UpdateLuaVariables ( ) ; begin
7740: LD_INT 0
7742: PPUSH
// if globalGameSaveCounter then
7743: LD_EXP 29
7747: IFFALSE 7781
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7749: LD_ADDR_EXP 29
7753: PUSH
7754: LD_EXP 29
7758: PPUSH
7759: CALL 69774 0 1
7763: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7764: LD_STRING setGameSaveCounter(
7766: PUSH
7767: LD_EXP 29
7771: STR
7772: PUSH
7773: LD_STRING )
7775: STR
7776: PPUSH
7777: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7781: LD_STRING setGameDifficulty(
7783: PUSH
7784: LD_OWVAR 67
7788: STR
7789: PUSH
7790: LD_STRING )
7792: STR
7793: PPUSH
7794: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7798: LD_STRING displayDifficulty(
7800: PUSH
7801: LD_OWVAR 67
7805: STR
7806: PUSH
7807: LD_STRING )
7809: STR
7810: PPUSH
7811: CALL_OW 559
// end ;
7815: LD_VAR 0 1
7819: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7820: LD_INT 0
7822: PPUSH
// if p2 = stream_mode then
7823: LD_VAR 0 2
7827: PUSH
7828: LD_INT 100
7830: EQUAL
7831: IFFALSE 8834
// begin if not StreamModeActive then
7833: LD_EXP 30
7837: NOT
7838: IFFALSE 7848
// StreamModeActive := true ;
7840: LD_ADDR_EXP 30
7844: PUSH
7845: LD_INT 1
7847: ST_TO_ADDR
// if p3 = 0 then
7848: LD_VAR 0 3
7852: PUSH
7853: LD_INT 0
7855: EQUAL
7856: IFFALSE 7862
// InitStreamMode ;
7858: CALL 9040 0 0
// if p3 = 1 then
7862: LD_VAR 0 3
7866: PUSH
7867: LD_INT 1
7869: EQUAL
7870: IFFALSE 7880
// sRocket := true ;
7872: LD_ADDR_EXP 35
7876: PUSH
7877: LD_INT 1
7879: ST_TO_ADDR
// if p3 = 2 then
7880: LD_VAR 0 3
7884: PUSH
7885: LD_INT 2
7887: EQUAL
7888: IFFALSE 7898
// sSpeed := true ;
7890: LD_ADDR_EXP 34
7894: PUSH
7895: LD_INT 1
7897: ST_TO_ADDR
// if p3 = 3 then
7898: LD_VAR 0 3
7902: PUSH
7903: LD_INT 3
7905: EQUAL
7906: IFFALSE 7916
// sEngine := true ;
7908: LD_ADDR_EXP 36
7912: PUSH
7913: LD_INT 1
7915: ST_TO_ADDR
// if p3 = 4 then
7916: LD_VAR 0 3
7920: PUSH
7921: LD_INT 4
7923: EQUAL
7924: IFFALSE 7934
// sSpec := true ;
7926: LD_ADDR_EXP 33
7930: PUSH
7931: LD_INT 1
7933: ST_TO_ADDR
// if p3 = 5 then
7934: LD_VAR 0 3
7938: PUSH
7939: LD_INT 5
7941: EQUAL
7942: IFFALSE 7952
// sLevel := true ;
7944: LD_ADDR_EXP 37
7948: PUSH
7949: LD_INT 1
7951: ST_TO_ADDR
// if p3 = 6 then
7952: LD_VAR 0 3
7956: PUSH
7957: LD_INT 6
7959: EQUAL
7960: IFFALSE 7970
// sArmoury := true ;
7962: LD_ADDR_EXP 38
7966: PUSH
7967: LD_INT 1
7969: ST_TO_ADDR
// if p3 = 7 then
7970: LD_VAR 0 3
7974: PUSH
7975: LD_INT 7
7977: EQUAL
7978: IFFALSE 7988
// sRadar := true ;
7980: LD_ADDR_EXP 39
7984: PUSH
7985: LD_INT 1
7987: ST_TO_ADDR
// if p3 = 8 then
7988: LD_VAR 0 3
7992: PUSH
7993: LD_INT 8
7995: EQUAL
7996: IFFALSE 8006
// sBunker := true ;
7998: LD_ADDR_EXP 40
8002: PUSH
8003: LD_INT 1
8005: ST_TO_ADDR
// if p3 = 9 then
8006: LD_VAR 0 3
8010: PUSH
8011: LD_INT 9
8013: EQUAL
8014: IFFALSE 8024
// sHack := true ;
8016: LD_ADDR_EXP 41
8020: PUSH
8021: LD_INT 1
8023: ST_TO_ADDR
// if p3 = 10 then
8024: LD_VAR 0 3
8028: PUSH
8029: LD_INT 10
8031: EQUAL
8032: IFFALSE 8042
// sFire := true ;
8034: LD_ADDR_EXP 42
8038: PUSH
8039: LD_INT 1
8041: ST_TO_ADDR
// if p3 = 11 then
8042: LD_VAR 0 3
8046: PUSH
8047: LD_INT 11
8049: EQUAL
8050: IFFALSE 8060
// sRefresh := true ;
8052: LD_ADDR_EXP 43
8056: PUSH
8057: LD_INT 1
8059: ST_TO_ADDR
// if p3 = 12 then
8060: LD_VAR 0 3
8064: PUSH
8065: LD_INT 12
8067: EQUAL
8068: IFFALSE 8078
// sExp := true ;
8070: LD_ADDR_EXP 44
8074: PUSH
8075: LD_INT 1
8077: ST_TO_ADDR
// if p3 = 13 then
8078: LD_VAR 0 3
8082: PUSH
8083: LD_INT 13
8085: EQUAL
8086: IFFALSE 8096
// sDepot := true ;
8088: LD_ADDR_EXP 45
8092: PUSH
8093: LD_INT 1
8095: ST_TO_ADDR
// if p3 = 14 then
8096: LD_VAR 0 3
8100: PUSH
8101: LD_INT 14
8103: EQUAL
8104: IFFALSE 8114
// sFlag := true ;
8106: LD_ADDR_EXP 46
8110: PUSH
8111: LD_INT 1
8113: ST_TO_ADDR
// if p3 = 15 then
8114: LD_VAR 0 3
8118: PUSH
8119: LD_INT 15
8121: EQUAL
8122: IFFALSE 8132
// sKamikadze := true ;
8124: LD_ADDR_EXP 54
8128: PUSH
8129: LD_INT 1
8131: ST_TO_ADDR
// if p3 = 16 then
8132: LD_VAR 0 3
8136: PUSH
8137: LD_INT 16
8139: EQUAL
8140: IFFALSE 8150
// sTroll := true ;
8142: LD_ADDR_EXP 55
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// if p3 = 17 then
8150: LD_VAR 0 3
8154: PUSH
8155: LD_INT 17
8157: EQUAL
8158: IFFALSE 8168
// sSlow := true ;
8160: LD_ADDR_EXP 56
8164: PUSH
8165: LD_INT 1
8167: ST_TO_ADDR
// if p3 = 18 then
8168: LD_VAR 0 3
8172: PUSH
8173: LD_INT 18
8175: EQUAL
8176: IFFALSE 8186
// sLack := true ;
8178: LD_ADDR_EXP 57
8182: PUSH
8183: LD_INT 1
8185: ST_TO_ADDR
// if p3 = 19 then
8186: LD_VAR 0 3
8190: PUSH
8191: LD_INT 19
8193: EQUAL
8194: IFFALSE 8204
// sTank := true ;
8196: LD_ADDR_EXP 59
8200: PUSH
8201: LD_INT 1
8203: ST_TO_ADDR
// if p3 = 20 then
8204: LD_VAR 0 3
8208: PUSH
8209: LD_INT 20
8211: EQUAL
8212: IFFALSE 8222
// sRemote := true ;
8214: LD_ADDR_EXP 60
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// if p3 = 21 then
8222: LD_VAR 0 3
8226: PUSH
8227: LD_INT 21
8229: EQUAL
8230: IFFALSE 8240
// sPowell := true ;
8232: LD_ADDR_EXP 61
8236: PUSH
8237: LD_INT 1
8239: ST_TO_ADDR
// if p3 = 22 then
8240: LD_VAR 0 3
8244: PUSH
8245: LD_INT 22
8247: EQUAL
8248: IFFALSE 8258
// sTeleport := true ;
8250: LD_ADDR_EXP 64
8254: PUSH
8255: LD_INT 1
8257: ST_TO_ADDR
// if p3 = 23 then
8258: LD_VAR 0 3
8262: PUSH
8263: LD_INT 23
8265: EQUAL
8266: IFFALSE 8276
// sOilTower := true ;
8268: LD_ADDR_EXP 66
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// if p3 = 24 then
8276: LD_VAR 0 3
8280: PUSH
8281: LD_INT 24
8283: EQUAL
8284: IFFALSE 8294
// sShovel := true ;
8286: LD_ADDR_EXP 67
8290: PUSH
8291: LD_INT 1
8293: ST_TO_ADDR
// if p3 = 25 then
8294: LD_VAR 0 3
8298: PUSH
8299: LD_INT 25
8301: EQUAL
8302: IFFALSE 8312
// sSheik := true ;
8304: LD_ADDR_EXP 68
8308: PUSH
8309: LD_INT 1
8311: ST_TO_ADDR
// if p3 = 26 then
8312: LD_VAR 0 3
8316: PUSH
8317: LD_INT 26
8319: EQUAL
8320: IFFALSE 8330
// sEarthquake := true ;
8322: LD_ADDR_EXP 70
8326: PUSH
8327: LD_INT 1
8329: ST_TO_ADDR
// if p3 = 27 then
8330: LD_VAR 0 3
8334: PUSH
8335: LD_INT 27
8337: EQUAL
8338: IFFALSE 8348
// sAI := true ;
8340: LD_ADDR_EXP 71
8344: PUSH
8345: LD_INT 1
8347: ST_TO_ADDR
// if p3 = 28 then
8348: LD_VAR 0 3
8352: PUSH
8353: LD_INT 28
8355: EQUAL
8356: IFFALSE 8366
// sCargo := true ;
8358: LD_ADDR_EXP 74
8362: PUSH
8363: LD_INT 1
8365: ST_TO_ADDR
// if p3 = 29 then
8366: LD_VAR 0 3
8370: PUSH
8371: LD_INT 29
8373: EQUAL
8374: IFFALSE 8384
// sDLaser := true ;
8376: LD_ADDR_EXP 75
8380: PUSH
8381: LD_INT 1
8383: ST_TO_ADDR
// if p3 = 30 then
8384: LD_VAR 0 3
8388: PUSH
8389: LD_INT 30
8391: EQUAL
8392: IFFALSE 8402
// sExchange := true ;
8394: LD_ADDR_EXP 76
8398: PUSH
8399: LD_INT 1
8401: ST_TO_ADDR
// if p3 = 31 then
8402: LD_VAR 0 3
8406: PUSH
8407: LD_INT 31
8409: EQUAL
8410: IFFALSE 8420
// sFac := true ;
8412: LD_ADDR_EXP 77
8416: PUSH
8417: LD_INT 1
8419: ST_TO_ADDR
// if p3 = 32 then
8420: LD_VAR 0 3
8424: PUSH
8425: LD_INT 32
8427: EQUAL
8428: IFFALSE 8438
// sPower := true ;
8430: LD_ADDR_EXP 78
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// if p3 = 33 then
8438: LD_VAR 0 3
8442: PUSH
8443: LD_INT 33
8445: EQUAL
8446: IFFALSE 8456
// sRandom := true ;
8448: LD_ADDR_EXP 79
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// if p3 = 34 then
8456: LD_VAR 0 3
8460: PUSH
8461: LD_INT 34
8463: EQUAL
8464: IFFALSE 8474
// sShield := true ;
8466: LD_ADDR_EXP 80
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// if p3 = 35 then
8474: LD_VAR 0 3
8478: PUSH
8479: LD_INT 35
8481: EQUAL
8482: IFFALSE 8492
// sTime := true ;
8484: LD_ADDR_EXP 81
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// if p3 = 36 then
8492: LD_VAR 0 3
8496: PUSH
8497: LD_INT 36
8499: EQUAL
8500: IFFALSE 8510
// sTools := true ;
8502: LD_ADDR_EXP 82
8506: PUSH
8507: LD_INT 1
8509: ST_TO_ADDR
// if p3 = 101 then
8510: LD_VAR 0 3
8514: PUSH
8515: LD_INT 101
8517: EQUAL
8518: IFFALSE 8528
// sSold := true ;
8520: LD_ADDR_EXP 47
8524: PUSH
8525: LD_INT 1
8527: ST_TO_ADDR
// if p3 = 102 then
8528: LD_VAR 0 3
8532: PUSH
8533: LD_INT 102
8535: EQUAL
8536: IFFALSE 8546
// sDiff := true ;
8538: LD_ADDR_EXP 48
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if p3 = 103 then
8546: LD_VAR 0 3
8550: PUSH
8551: LD_INT 103
8553: EQUAL
8554: IFFALSE 8564
// sFog := true ;
8556: LD_ADDR_EXP 51
8560: PUSH
8561: LD_INT 1
8563: ST_TO_ADDR
// if p3 = 104 then
8564: LD_VAR 0 3
8568: PUSH
8569: LD_INT 104
8571: EQUAL
8572: IFFALSE 8582
// sReset := true ;
8574: LD_ADDR_EXP 52
8578: PUSH
8579: LD_INT 1
8581: ST_TO_ADDR
// if p3 = 105 then
8582: LD_VAR 0 3
8586: PUSH
8587: LD_INT 105
8589: EQUAL
8590: IFFALSE 8600
// sSun := true ;
8592: LD_ADDR_EXP 53
8596: PUSH
8597: LD_INT 1
8599: ST_TO_ADDR
// if p3 = 106 then
8600: LD_VAR 0 3
8604: PUSH
8605: LD_INT 106
8607: EQUAL
8608: IFFALSE 8618
// sTiger := true ;
8610: LD_ADDR_EXP 49
8614: PUSH
8615: LD_INT 1
8617: ST_TO_ADDR
// if p3 = 107 then
8618: LD_VAR 0 3
8622: PUSH
8623: LD_INT 107
8625: EQUAL
8626: IFFALSE 8636
// sBomb := true ;
8628: LD_ADDR_EXP 50
8632: PUSH
8633: LD_INT 1
8635: ST_TO_ADDR
// if p3 = 108 then
8636: LD_VAR 0 3
8640: PUSH
8641: LD_INT 108
8643: EQUAL
8644: IFFALSE 8654
// sWound := true ;
8646: LD_ADDR_EXP 58
8650: PUSH
8651: LD_INT 1
8653: ST_TO_ADDR
// if p3 = 109 then
8654: LD_VAR 0 3
8658: PUSH
8659: LD_INT 109
8661: EQUAL
8662: IFFALSE 8672
// sBetray := true ;
8664: LD_ADDR_EXP 62
8668: PUSH
8669: LD_INT 1
8671: ST_TO_ADDR
// if p3 = 110 then
8672: LD_VAR 0 3
8676: PUSH
8677: LD_INT 110
8679: EQUAL
8680: IFFALSE 8690
// sContamin := true ;
8682: LD_ADDR_EXP 63
8686: PUSH
8687: LD_INT 1
8689: ST_TO_ADDR
// if p3 = 111 then
8690: LD_VAR 0 3
8694: PUSH
8695: LD_INT 111
8697: EQUAL
8698: IFFALSE 8708
// sOil := true ;
8700: LD_ADDR_EXP 65
8704: PUSH
8705: LD_INT 1
8707: ST_TO_ADDR
// if p3 = 112 then
8708: LD_VAR 0 3
8712: PUSH
8713: LD_INT 112
8715: EQUAL
8716: IFFALSE 8726
// sStu := true ;
8718: LD_ADDR_EXP 69
8722: PUSH
8723: LD_INT 1
8725: ST_TO_ADDR
// if p3 = 113 then
8726: LD_VAR 0 3
8730: PUSH
8731: LD_INT 113
8733: EQUAL
8734: IFFALSE 8744
// sBazooka := true ;
8736: LD_ADDR_EXP 72
8740: PUSH
8741: LD_INT 1
8743: ST_TO_ADDR
// if p3 = 114 then
8744: LD_VAR 0 3
8748: PUSH
8749: LD_INT 114
8751: EQUAL
8752: IFFALSE 8762
// sMortar := true ;
8754: LD_ADDR_EXP 73
8758: PUSH
8759: LD_INT 1
8761: ST_TO_ADDR
// if p3 = 115 then
8762: LD_VAR 0 3
8766: PUSH
8767: LD_INT 115
8769: EQUAL
8770: IFFALSE 8780
// sRanger := true ;
8772: LD_ADDR_EXP 83
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// if p3 = 116 then
8780: LD_VAR 0 3
8784: PUSH
8785: LD_INT 116
8787: EQUAL
8788: IFFALSE 8798
// sComputer := true ;
8790: LD_ADDR_EXP 84
8794: PUSH
8795: LD_INT 1
8797: ST_TO_ADDR
// if p3 = 117 then
8798: LD_VAR 0 3
8802: PUSH
8803: LD_INT 117
8805: EQUAL
8806: IFFALSE 8816
// s30 := true ;
8808: LD_ADDR_EXP 85
8812: PUSH
8813: LD_INT 1
8815: ST_TO_ADDR
// if p3 = 118 then
8816: LD_VAR 0 3
8820: PUSH
8821: LD_INT 118
8823: EQUAL
8824: IFFALSE 8834
// s60 := true ;
8826: LD_ADDR_EXP 86
8830: PUSH
8831: LD_INT 1
8833: ST_TO_ADDR
// end ; if p2 = hack_mode then
8834: LD_VAR 0 2
8838: PUSH
8839: LD_INT 101
8841: EQUAL
8842: IFFALSE 8970
// begin case p3 of 1 :
8844: LD_VAR 0 3
8848: PUSH
8849: LD_INT 1
8851: DOUBLE
8852: EQUAL
8853: IFTRUE 8857
8855: GO 8864
8857: POP
// hHackUnlimitedResources ; 2 :
8858: CALL 21233 0 0
8862: GO 8970
8864: LD_INT 2
8866: DOUBLE
8867: EQUAL
8868: IFTRUE 8872
8870: GO 8879
8872: POP
// hHackSetLevel10 ; 3 :
8873: CALL 21366 0 0
8877: GO 8970
8879: LD_INT 3
8881: DOUBLE
8882: EQUAL
8883: IFTRUE 8887
8885: GO 8894
8887: POP
// hHackSetLevel10YourUnits ; 4 :
8888: CALL 21451 0 0
8892: GO 8970
8894: LD_INT 4
8896: DOUBLE
8897: EQUAL
8898: IFTRUE 8902
8900: GO 8909
8902: POP
// hHackInvincible ; 5 :
8903: CALL 21899 0 0
8907: GO 8970
8909: LD_INT 5
8911: DOUBLE
8912: EQUAL
8913: IFTRUE 8917
8915: GO 8924
8917: POP
// hHackInvisible ; 6 :
8918: CALL 22010 0 0
8922: GO 8970
8924: LD_INT 6
8926: DOUBLE
8927: EQUAL
8928: IFTRUE 8932
8930: GO 8939
8932: POP
// hHackChangeYourSide ; 7 :
8933: CALL 22067 0 0
8937: GO 8970
8939: LD_INT 7
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 8954
8947: POP
// hHackChangeUnitSide ; 8 :
8948: CALL 22109 0 0
8952: GO 8970
8954: LD_INT 8
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 8969
8962: POP
// hHackFog ; end ;
8963: CALL 22210 0 0
8967: GO 8970
8969: POP
// end ; if p2 = game_save_mode then
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 102
8977: EQUAL
8978: IFFALSE 9035
// begin if p3 = 1 then
8980: LD_VAR 0 3
8984: PUSH
8985: LD_INT 1
8987: EQUAL
8988: IFFALSE 9000
// globalGameSaveCounter := p4 ;
8990: LD_ADDR_EXP 29
8994: PUSH
8995: LD_VAR 0 4
8999: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9000: LD_VAR 0 3
9004: PUSH
9005: LD_INT 2
9007: EQUAL
9008: IFFALSE 9016
9010: PUSH
9011: LD_EXP 29
9015: AND
9016: IFFALSE 9035
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9018: LD_STRING setGameSaveCounter(
9020: PUSH
9021: LD_EXP 29
9025: STR
9026: PUSH
9027: LD_STRING )
9029: STR
9030: PPUSH
9031: CALL_OW 559
// end ; end ;
9035: LD_VAR 0 7
9039: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9040: LD_INT 0
9042: PPUSH
// streamModeActive := false ;
9043: LD_ADDR_EXP 30
9047: PUSH
9048: LD_INT 0
9050: ST_TO_ADDR
// normalCounter := 36 ;
9051: LD_ADDR_EXP 31
9055: PUSH
9056: LD_INT 36
9058: ST_TO_ADDR
// hardcoreCounter := 18 ;
9059: LD_ADDR_EXP 32
9063: PUSH
9064: LD_INT 18
9066: ST_TO_ADDR
// sRocket := false ;
9067: LD_ADDR_EXP 35
9071: PUSH
9072: LD_INT 0
9074: ST_TO_ADDR
// sSpeed := false ;
9075: LD_ADDR_EXP 34
9079: PUSH
9080: LD_INT 0
9082: ST_TO_ADDR
// sEngine := false ;
9083: LD_ADDR_EXP 36
9087: PUSH
9088: LD_INT 0
9090: ST_TO_ADDR
// sSpec := false ;
9091: LD_ADDR_EXP 33
9095: PUSH
9096: LD_INT 0
9098: ST_TO_ADDR
// sLevel := false ;
9099: LD_ADDR_EXP 37
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// sArmoury := false ;
9107: LD_ADDR_EXP 38
9111: PUSH
9112: LD_INT 0
9114: ST_TO_ADDR
// sRadar := false ;
9115: LD_ADDR_EXP 39
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// sBunker := false ;
9123: LD_ADDR_EXP 40
9127: PUSH
9128: LD_INT 0
9130: ST_TO_ADDR
// sHack := false ;
9131: LD_ADDR_EXP 41
9135: PUSH
9136: LD_INT 0
9138: ST_TO_ADDR
// sFire := false ;
9139: LD_ADDR_EXP 42
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
// sRefresh := false ;
9147: LD_ADDR_EXP 43
9151: PUSH
9152: LD_INT 0
9154: ST_TO_ADDR
// sExp := false ;
9155: LD_ADDR_EXP 44
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// sDepot := false ;
9163: LD_ADDR_EXP 45
9167: PUSH
9168: LD_INT 0
9170: ST_TO_ADDR
// sFlag := false ;
9171: LD_ADDR_EXP 46
9175: PUSH
9176: LD_INT 0
9178: ST_TO_ADDR
// sKamikadze := false ;
9179: LD_ADDR_EXP 54
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// sTroll := false ;
9187: LD_ADDR_EXP 55
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// sSlow := false ;
9195: LD_ADDR_EXP 56
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// sLack := false ;
9203: LD_ADDR_EXP 57
9207: PUSH
9208: LD_INT 0
9210: ST_TO_ADDR
// sTank := false ;
9211: LD_ADDR_EXP 59
9215: PUSH
9216: LD_INT 0
9218: ST_TO_ADDR
// sRemote := false ;
9219: LD_ADDR_EXP 60
9223: PUSH
9224: LD_INT 0
9226: ST_TO_ADDR
// sPowell := false ;
9227: LD_ADDR_EXP 61
9231: PUSH
9232: LD_INT 0
9234: ST_TO_ADDR
// sTeleport := false ;
9235: LD_ADDR_EXP 64
9239: PUSH
9240: LD_INT 0
9242: ST_TO_ADDR
// sOilTower := false ;
9243: LD_ADDR_EXP 66
9247: PUSH
9248: LD_INT 0
9250: ST_TO_ADDR
// sShovel := false ;
9251: LD_ADDR_EXP 67
9255: PUSH
9256: LD_INT 0
9258: ST_TO_ADDR
// sSheik := false ;
9259: LD_ADDR_EXP 68
9263: PUSH
9264: LD_INT 0
9266: ST_TO_ADDR
// sEarthquake := false ;
9267: LD_ADDR_EXP 70
9271: PUSH
9272: LD_INT 0
9274: ST_TO_ADDR
// sAI := false ;
9275: LD_ADDR_EXP 71
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// sCargo := false ;
9283: LD_ADDR_EXP 74
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// sDLaser := false ;
9291: LD_ADDR_EXP 75
9295: PUSH
9296: LD_INT 0
9298: ST_TO_ADDR
// sExchange := false ;
9299: LD_ADDR_EXP 76
9303: PUSH
9304: LD_INT 0
9306: ST_TO_ADDR
// sFac := false ;
9307: LD_ADDR_EXP 77
9311: PUSH
9312: LD_INT 0
9314: ST_TO_ADDR
// sPower := false ;
9315: LD_ADDR_EXP 78
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// sRandom := false ;
9323: LD_ADDR_EXP 79
9327: PUSH
9328: LD_INT 0
9330: ST_TO_ADDR
// sShield := false ;
9331: LD_ADDR_EXP 80
9335: PUSH
9336: LD_INT 0
9338: ST_TO_ADDR
// sTime := false ;
9339: LD_ADDR_EXP 81
9343: PUSH
9344: LD_INT 0
9346: ST_TO_ADDR
// sTools := false ;
9347: LD_ADDR_EXP 82
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// sSold := false ;
9355: LD_ADDR_EXP 47
9359: PUSH
9360: LD_INT 0
9362: ST_TO_ADDR
// sDiff := false ;
9363: LD_ADDR_EXP 48
9367: PUSH
9368: LD_INT 0
9370: ST_TO_ADDR
// sFog := false ;
9371: LD_ADDR_EXP 51
9375: PUSH
9376: LD_INT 0
9378: ST_TO_ADDR
// sReset := false ;
9379: LD_ADDR_EXP 52
9383: PUSH
9384: LD_INT 0
9386: ST_TO_ADDR
// sSun := false ;
9387: LD_ADDR_EXP 53
9391: PUSH
9392: LD_INT 0
9394: ST_TO_ADDR
// sTiger := false ;
9395: LD_ADDR_EXP 49
9399: PUSH
9400: LD_INT 0
9402: ST_TO_ADDR
// sBomb := false ;
9403: LD_ADDR_EXP 50
9407: PUSH
9408: LD_INT 0
9410: ST_TO_ADDR
// sWound := false ;
9411: LD_ADDR_EXP 58
9415: PUSH
9416: LD_INT 0
9418: ST_TO_ADDR
// sBetray := false ;
9419: LD_ADDR_EXP 62
9423: PUSH
9424: LD_INT 0
9426: ST_TO_ADDR
// sContamin := false ;
9427: LD_ADDR_EXP 63
9431: PUSH
9432: LD_INT 0
9434: ST_TO_ADDR
// sOil := false ;
9435: LD_ADDR_EXP 65
9439: PUSH
9440: LD_INT 0
9442: ST_TO_ADDR
// sStu := false ;
9443: LD_ADDR_EXP 69
9447: PUSH
9448: LD_INT 0
9450: ST_TO_ADDR
// sBazooka := false ;
9451: LD_ADDR_EXP 72
9455: PUSH
9456: LD_INT 0
9458: ST_TO_ADDR
// sMortar := false ;
9459: LD_ADDR_EXP 73
9463: PUSH
9464: LD_INT 0
9466: ST_TO_ADDR
// sRanger := false ;
9467: LD_ADDR_EXP 83
9471: PUSH
9472: LD_INT 0
9474: ST_TO_ADDR
// sComputer := false ;
9475: LD_ADDR_EXP 84
9479: PUSH
9480: LD_INT 0
9482: ST_TO_ADDR
// s30 := false ;
9483: LD_ADDR_EXP 85
9487: PUSH
9488: LD_INT 0
9490: ST_TO_ADDR
// s60 := false ;
9491: LD_ADDR_EXP 86
9495: PUSH
9496: LD_INT 0
9498: ST_TO_ADDR
// end ;
9499: LD_VAR 0 1
9503: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
// result := [ ] ;
9513: LD_ADDR_VAR 0 2
9517: PUSH
9518: EMPTY
9519: ST_TO_ADDR
// if campaign_id = 1 then
9520: LD_OWVAR 69
9524: PUSH
9525: LD_INT 1
9527: EQUAL
9528: IFFALSE 12694
// begin case mission_number of 1 :
9530: LD_OWVAR 70
9534: PUSH
9535: LD_INT 1
9537: DOUBLE
9538: EQUAL
9539: IFTRUE 9543
9541: GO 9619
9543: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9544: LD_ADDR_VAR 0 2
9548: PUSH
9549: LD_INT 2
9551: PUSH
9552: LD_INT 4
9554: PUSH
9555: LD_INT 11
9557: PUSH
9558: LD_INT 12
9560: PUSH
9561: LD_INT 15
9563: PUSH
9564: LD_INT 16
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_INT 23
9572: PUSH
9573: LD_INT 26
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 101
9589: PUSH
9590: LD_INT 102
9592: PUSH
9593: LD_INT 106
9595: PUSH
9596: LD_INT 116
9598: PUSH
9599: LD_INT 117
9601: PUSH
9602: LD_INT 118
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: ST_TO_ADDR
9617: GO 12692
9619: LD_INT 2
9621: DOUBLE
9622: EQUAL
9623: IFTRUE 9627
9625: GO 9711
9627: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9628: LD_ADDR_VAR 0 2
9632: PUSH
9633: LD_INT 2
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: LD_INT 11
9641: PUSH
9642: LD_INT 12
9644: PUSH
9645: LD_INT 15
9647: PUSH
9648: LD_INT 16
9650: PUSH
9651: LD_INT 22
9653: PUSH
9654: LD_INT 23
9656: PUSH
9657: LD_INT 26
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 101
9673: PUSH
9674: LD_INT 102
9676: PUSH
9677: LD_INT 105
9679: PUSH
9680: LD_INT 106
9682: PUSH
9683: LD_INT 108
9685: PUSH
9686: LD_INT 116
9688: PUSH
9689: LD_INT 117
9691: PUSH
9692: LD_INT 118
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: ST_TO_ADDR
9709: GO 12692
9711: LD_INT 3
9713: DOUBLE
9714: EQUAL
9715: IFTRUE 9719
9717: GO 9807
9719: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9720: LD_ADDR_VAR 0 2
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: LD_INT 4
9730: PUSH
9731: LD_INT 5
9733: PUSH
9734: LD_INT 11
9736: PUSH
9737: LD_INT 12
9739: PUSH
9740: LD_INT 15
9742: PUSH
9743: LD_INT 16
9745: PUSH
9746: LD_INT 22
9748: PUSH
9749: LD_INT 26
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 101
9769: PUSH
9770: LD_INT 102
9772: PUSH
9773: LD_INT 105
9775: PUSH
9776: LD_INT 106
9778: PUSH
9779: LD_INT 108
9781: PUSH
9782: LD_INT 116
9784: PUSH
9785: LD_INT 117
9787: PUSH
9788: LD_INT 118
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: ST_TO_ADDR
9805: GO 12692
9807: LD_INT 4
9809: DOUBLE
9810: EQUAL
9811: IFTRUE 9815
9813: GO 9911
9815: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9816: LD_ADDR_VAR 0 2
9820: PUSH
9821: LD_INT 2
9823: PUSH
9824: LD_INT 4
9826: PUSH
9827: LD_INT 5
9829: PUSH
9830: LD_INT 8
9832: PUSH
9833: LD_INT 11
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 15
9841: PUSH
9842: LD_INT 16
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_INT 23
9850: PUSH
9851: LD_INT 26
9853: PUSH
9854: LD_INT 36
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 101
9873: PUSH
9874: LD_INT 102
9876: PUSH
9877: LD_INT 105
9879: PUSH
9880: LD_INT 106
9882: PUSH
9883: LD_INT 108
9885: PUSH
9886: LD_INT 116
9888: PUSH
9889: LD_INT 117
9891: PUSH
9892: LD_INT 118
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: ST_TO_ADDR
9909: GO 12692
9911: LD_INT 5
9913: DOUBLE
9914: EQUAL
9915: IFTRUE 9919
9917: GO 10031
9919: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9920: LD_ADDR_VAR 0 2
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: LD_INT 4
9930: PUSH
9931: LD_INT 5
9933: PUSH
9934: LD_INT 6
9936: PUSH
9937: LD_INT 8
9939: PUSH
9940: LD_INT 11
9942: PUSH
9943: LD_INT 12
9945: PUSH
9946: LD_INT 15
9948: PUSH
9949: LD_INT 16
9951: PUSH
9952: LD_INT 22
9954: PUSH
9955: LD_INT 23
9957: PUSH
9958: LD_INT 25
9960: PUSH
9961: LD_INT 26
9963: PUSH
9964: LD_INT 36
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 101
9985: PUSH
9986: LD_INT 102
9988: PUSH
9989: LD_INT 105
9991: PUSH
9992: LD_INT 106
9994: PUSH
9995: LD_INT 108
9997: PUSH
9998: LD_INT 109
10000: PUSH
10001: LD_INT 112
10003: PUSH
10004: LD_INT 116
10006: PUSH
10007: LD_INT 117
10009: PUSH
10010: LD_INT 118
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: ST_TO_ADDR
10029: GO 12692
10031: LD_INT 6
10033: DOUBLE
10034: EQUAL
10035: IFTRUE 10039
10037: GO 10171
10039: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10040: LD_ADDR_VAR 0 2
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 4
10050: PUSH
10051: LD_INT 5
10053: PUSH
10054: LD_INT 6
10056: PUSH
10057: LD_INT 8
10059: PUSH
10060: LD_INT 11
10062: PUSH
10063: LD_INT 12
10065: PUSH
10066: LD_INT 15
10068: PUSH
10069: LD_INT 16
10071: PUSH
10072: LD_INT 20
10074: PUSH
10075: LD_INT 21
10077: PUSH
10078: LD_INT 22
10080: PUSH
10081: LD_INT 23
10083: PUSH
10084: LD_INT 25
10086: PUSH
10087: LD_INT 26
10089: PUSH
10090: LD_INT 30
10092: PUSH
10093: LD_INT 31
10095: PUSH
10096: LD_INT 32
10098: PUSH
10099: LD_INT 36
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 101
10125: PUSH
10126: LD_INT 102
10128: PUSH
10129: LD_INT 105
10131: PUSH
10132: LD_INT 106
10134: PUSH
10135: LD_INT 108
10137: PUSH
10138: LD_INT 109
10140: PUSH
10141: LD_INT 112
10143: PUSH
10144: LD_INT 116
10146: PUSH
10147: LD_INT 117
10149: PUSH
10150: LD_INT 118
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: ST_TO_ADDR
10169: GO 12692
10171: LD_INT 7
10173: DOUBLE
10174: EQUAL
10175: IFTRUE 10179
10177: GO 10291
10179: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: LD_INT 4
10190: PUSH
10191: LD_INT 5
10193: PUSH
10194: LD_INT 7
10196: PUSH
10197: LD_INT 11
10199: PUSH
10200: LD_INT 12
10202: PUSH
10203: LD_INT 15
10205: PUSH
10206: LD_INT 16
10208: PUSH
10209: LD_INT 20
10211: PUSH
10212: LD_INT 21
10214: PUSH
10215: LD_INT 22
10217: PUSH
10218: LD_INT 23
10220: PUSH
10221: LD_INT 25
10223: PUSH
10224: LD_INT 26
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 101
10245: PUSH
10246: LD_INT 102
10248: PUSH
10249: LD_INT 103
10251: PUSH
10252: LD_INT 105
10254: PUSH
10255: LD_INT 106
10257: PUSH
10258: LD_INT 108
10260: PUSH
10261: LD_INT 112
10263: PUSH
10264: LD_INT 116
10266: PUSH
10267: LD_INT 117
10269: PUSH
10270: LD_INT 118
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: ST_TO_ADDR
10289: GO 12692
10291: LD_INT 8
10293: DOUBLE
10294: EQUAL
10295: IFTRUE 10299
10297: GO 10439
10299: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10300: LD_ADDR_VAR 0 2
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: LD_INT 4
10310: PUSH
10311: LD_INT 5
10313: PUSH
10314: LD_INT 6
10316: PUSH
10317: LD_INT 7
10319: PUSH
10320: LD_INT 8
10322: PUSH
10323: LD_INT 11
10325: PUSH
10326: LD_INT 12
10328: PUSH
10329: LD_INT 15
10331: PUSH
10332: LD_INT 16
10334: PUSH
10335: LD_INT 20
10337: PUSH
10338: LD_INT 21
10340: PUSH
10341: LD_INT 22
10343: PUSH
10344: LD_INT 23
10346: PUSH
10347: LD_INT 25
10349: PUSH
10350: LD_INT 26
10352: PUSH
10353: LD_INT 30
10355: PUSH
10356: LD_INT 31
10358: PUSH
10359: LD_INT 32
10361: PUSH
10362: LD_INT 36
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 101
10389: PUSH
10390: LD_INT 102
10392: PUSH
10393: LD_INT 103
10395: PUSH
10396: LD_INT 105
10398: PUSH
10399: LD_INT 106
10401: PUSH
10402: LD_INT 108
10404: PUSH
10405: LD_INT 109
10407: PUSH
10408: LD_INT 112
10410: PUSH
10411: LD_INT 116
10413: PUSH
10414: LD_INT 117
10416: PUSH
10417: LD_INT 118
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: ST_TO_ADDR
10437: GO 12692
10439: LD_INT 9
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10595
10447: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10448: LD_ADDR_VAR 0 2
10452: PUSH
10453: LD_INT 2
10455: PUSH
10456: LD_INT 4
10458: PUSH
10459: LD_INT 5
10461: PUSH
10462: LD_INT 6
10464: PUSH
10465: LD_INT 7
10467: PUSH
10468: LD_INT 8
10470: PUSH
10471: LD_INT 11
10473: PUSH
10474: LD_INT 12
10476: PUSH
10477: LD_INT 15
10479: PUSH
10480: LD_INT 16
10482: PUSH
10483: LD_INT 20
10485: PUSH
10486: LD_INT 21
10488: PUSH
10489: LD_INT 22
10491: PUSH
10492: LD_INT 23
10494: PUSH
10495: LD_INT 25
10497: PUSH
10498: LD_INT 26
10500: PUSH
10501: LD_INT 28
10503: PUSH
10504: LD_INT 30
10506: PUSH
10507: LD_INT 31
10509: PUSH
10510: LD_INT 32
10512: PUSH
10513: LD_INT 36
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 101
10541: PUSH
10542: LD_INT 102
10544: PUSH
10545: LD_INT 103
10547: PUSH
10548: LD_INT 105
10550: PUSH
10551: LD_INT 106
10553: PUSH
10554: LD_INT 108
10556: PUSH
10557: LD_INT 109
10559: PUSH
10560: LD_INT 112
10562: PUSH
10563: LD_INT 114
10565: PUSH
10566: LD_INT 116
10568: PUSH
10569: LD_INT 117
10571: PUSH
10572: LD_INT 118
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: ST_TO_ADDR
10593: GO 12692
10595: LD_INT 10
10597: DOUBLE
10598: EQUAL
10599: IFTRUE 10603
10601: GO 10799
10603: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10604: LD_ADDR_VAR 0 2
10608: PUSH
10609: LD_INT 2
10611: PUSH
10612: LD_INT 4
10614: PUSH
10615: LD_INT 5
10617: PUSH
10618: LD_INT 6
10620: PUSH
10621: LD_INT 7
10623: PUSH
10624: LD_INT 8
10626: PUSH
10627: LD_INT 9
10629: PUSH
10630: LD_INT 10
10632: PUSH
10633: LD_INT 11
10635: PUSH
10636: LD_INT 12
10638: PUSH
10639: LD_INT 13
10641: PUSH
10642: LD_INT 14
10644: PUSH
10645: LD_INT 15
10647: PUSH
10648: LD_INT 16
10650: PUSH
10651: LD_INT 17
10653: PUSH
10654: LD_INT 18
10656: PUSH
10657: LD_INT 19
10659: PUSH
10660: LD_INT 20
10662: PUSH
10663: LD_INT 21
10665: PUSH
10666: LD_INT 22
10668: PUSH
10669: LD_INT 23
10671: PUSH
10672: LD_INT 24
10674: PUSH
10675: LD_INT 25
10677: PUSH
10678: LD_INT 26
10680: PUSH
10681: LD_INT 28
10683: PUSH
10684: LD_INT 30
10686: PUSH
10687: LD_INT 31
10689: PUSH
10690: LD_INT 32
10692: PUSH
10693: LD_INT 36
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 101
10729: PUSH
10730: LD_INT 102
10732: PUSH
10733: LD_INT 103
10735: PUSH
10736: LD_INT 104
10738: PUSH
10739: LD_INT 105
10741: PUSH
10742: LD_INT 106
10744: PUSH
10745: LD_INT 107
10747: PUSH
10748: LD_INT 108
10750: PUSH
10751: LD_INT 109
10753: PUSH
10754: LD_INT 110
10756: PUSH
10757: LD_INT 111
10759: PUSH
10760: LD_INT 112
10762: PUSH
10763: LD_INT 114
10765: PUSH
10766: LD_INT 116
10768: PUSH
10769: LD_INT 117
10771: PUSH
10772: LD_INT 118
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: ST_TO_ADDR
10797: GO 12692
10799: LD_INT 11
10801: DOUBLE
10802: EQUAL
10803: IFTRUE 10807
10805: GO 11011
10807: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10808: LD_ADDR_VAR 0 2
10812: PUSH
10813: LD_INT 2
10815: PUSH
10816: LD_INT 3
10818: PUSH
10819: LD_INT 4
10821: PUSH
10822: LD_INT 5
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: LD_INT 7
10830: PUSH
10831: LD_INT 8
10833: PUSH
10834: LD_INT 9
10836: PUSH
10837: LD_INT 10
10839: PUSH
10840: LD_INT 11
10842: PUSH
10843: LD_INT 12
10845: PUSH
10846: LD_INT 13
10848: PUSH
10849: LD_INT 14
10851: PUSH
10852: LD_INT 15
10854: PUSH
10855: LD_INT 16
10857: PUSH
10858: LD_INT 17
10860: PUSH
10861: LD_INT 18
10863: PUSH
10864: LD_INT 19
10866: PUSH
10867: LD_INT 20
10869: PUSH
10870: LD_INT 21
10872: PUSH
10873: LD_INT 22
10875: PUSH
10876: LD_INT 23
10878: PUSH
10879: LD_INT 24
10881: PUSH
10882: LD_INT 25
10884: PUSH
10885: LD_INT 26
10887: PUSH
10888: LD_INT 28
10890: PUSH
10891: LD_INT 30
10893: PUSH
10894: LD_INT 31
10896: PUSH
10897: LD_INT 32
10899: PUSH
10900: LD_INT 34
10902: PUSH
10903: LD_INT 36
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 101
10941: PUSH
10942: LD_INT 102
10944: PUSH
10945: LD_INT 103
10947: PUSH
10948: LD_INT 104
10950: PUSH
10951: LD_INT 105
10953: PUSH
10954: LD_INT 106
10956: PUSH
10957: LD_INT 107
10959: PUSH
10960: LD_INT 108
10962: PUSH
10963: LD_INT 109
10965: PUSH
10966: LD_INT 110
10968: PUSH
10969: LD_INT 111
10971: PUSH
10972: LD_INT 112
10974: PUSH
10975: LD_INT 114
10977: PUSH
10978: LD_INT 116
10980: PUSH
10981: LD_INT 117
10983: PUSH
10984: LD_INT 118
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: ST_TO_ADDR
11009: GO 12692
11011: LD_INT 12
11013: DOUBLE
11014: EQUAL
11015: IFTRUE 11019
11017: GO 11239
11019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: LD_INT 5
11039: PUSH
11040: LD_INT 6
11042: PUSH
11043: LD_INT 7
11045: PUSH
11046: LD_INT 8
11048: PUSH
11049: LD_INT 9
11051: PUSH
11052: LD_INT 10
11054: PUSH
11055: LD_INT 11
11057: PUSH
11058: LD_INT 12
11060: PUSH
11061: LD_INT 13
11063: PUSH
11064: LD_INT 14
11066: PUSH
11067: LD_INT 15
11069: PUSH
11070: LD_INT 16
11072: PUSH
11073: LD_INT 17
11075: PUSH
11076: LD_INT 18
11078: PUSH
11079: LD_INT 19
11081: PUSH
11082: LD_INT 20
11084: PUSH
11085: LD_INT 21
11087: PUSH
11088: LD_INT 22
11090: PUSH
11091: LD_INT 23
11093: PUSH
11094: LD_INT 24
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 26
11102: PUSH
11103: LD_INT 27
11105: PUSH
11106: LD_INT 28
11108: PUSH
11109: LD_INT 30
11111: PUSH
11112: LD_INT 31
11114: PUSH
11115: LD_INT 32
11117: PUSH
11118: LD_INT 33
11120: PUSH
11121: LD_INT 34
11123: PUSH
11124: LD_INT 36
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 101
11165: PUSH
11166: LD_INT 102
11168: PUSH
11169: LD_INT 103
11171: PUSH
11172: LD_INT 104
11174: PUSH
11175: LD_INT 105
11177: PUSH
11178: LD_INT 106
11180: PUSH
11181: LD_INT 107
11183: PUSH
11184: LD_INT 108
11186: PUSH
11187: LD_INT 109
11189: PUSH
11190: LD_INT 110
11192: PUSH
11193: LD_INT 111
11195: PUSH
11196: LD_INT 112
11198: PUSH
11199: LD_INT 113
11201: PUSH
11202: LD_INT 114
11204: PUSH
11205: LD_INT 116
11207: PUSH
11208: LD_INT 117
11210: PUSH
11211: LD_INT 118
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: ST_TO_ADDR
11237: GO 12692
11239: LD_INT 13
11241: DOUBLE
11242: EQUAL
11243: IFTRUE 11247
11245: GO 11455
11247: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11248: LD_ADDR_VAR 0 2
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: LD_INT 2
11258: PUSH
11259: LD_INT 3
11261: PUSH
11262: LD_INT 4
11264: PUSH
11265: LD_INT 5
11267: PUSH
11268: LD_INT 8
11270: PUSH
11271: LD_INT 9
11273: PUSH
11274: LD_INT 10
11276: PUSH
11277: LD_INT 11
11279: PUSH
11280: LD_INT 12
11282: PUSH
11283: LD_INT 14
11285: PUSH
11286: LD_INT 15
11288: PUSH
11289: LD_INT 16
11291: PUSH
11292: LD_INT 17
11294: PUSH
11295: LD_INT 18
11297: PUSH
11298: LD_INT 19
11300: PUSH
11301: LD_INT 20
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 22
11309: PUSH
11310: LD_INT 23
11312: PUSH
11313: LD_INT 24
11315: PUSH
11316: LD_INT 25
11318: PUSH
11319: LD_INT 26
11321: PUSH
11322: LD_INT 27
11324: PUSH
11325: LD_INT 28
11327: PUSH
11328: LD_INT 30
11330: PUSH
11331: LD_INT 31
11333: PUSH
11334: LD_INT 32
11336: PUSH
11337: LD_INT 33
11339: PUSH
11340: LD_INT 34
11342: PUSH
11343: LD_INT 36
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 101
11381: PUSH
11382: LD_INT 102
11384: PUSH
11385: LD_INT 103
11387: PUSH
11388: LD_INT 104
11390: PUSH
11391: LD_INT 105
11393: PUSH
11394: LD_INT 106
11396: PUSH
11397: LD_INT 107
11399: PUSH
11400: LD_INT 108
11402: PUSH
11403: LD_INT 109
11405: PUSH
11406: LD_INT 110
11408: PUSH
11409: LD_INT 111
11411: PUSH
11412: LD_INT 112
11414: PUSH
11415: LD_INT 113
11417: PUSH
11418: LD_INT 114
11420: PUSH
11421: LD_INT 116
11423: PUSH
11424: LD_INT 117
11426: PUSH
11427: LD_INT 118
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: ST_TO_ADDR
11453: GO 12692
11455: LD_INT 14
11457: DOUBLE
11458: EQUAL
11459: IFTRUE 11463
11461: GO 11687
11463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11464: LD_ADDR_VAR 0 2
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: LD_INT 2
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: LD_INT 4
11480: PUSH
11481: LD_INT 5
11483: PUSH
11484: LD_INT 6
11486: PUSH
11487: LD_INT 7
11489: PUSH
11490: LD_INT 8
11492: PUSH
11493: LD_INT 9
11495: PUSH
11496: LD_INT 10
11498: PUSH
11499: LD_INT 11
11501: PUSH
11502: LD_INT 12
11504: PUSH
11505: LD_INT 13
11507: PUSH
11508: LD_INT 14
11510: PUSH
11511: LD_INT 15
11513: PUSH
11514: LD_INT 16
11516: PUSH
11517: LD_INT 17
11519: PUSH
11520: LD_INT 18
11522: PUSH
11523: LD_INT 19
11525: PUSH
11526: LD_INT 20
11528: PUSH
11529: LD_INT 21
11531: PUSH
11532: LD_INT 22
11534: PUSH
11535: LD_INT 23
11537: PUSH
11538: LD_INT 24
11540: PUSH
11541: LD_INT 25
11543: PUSH
11544: LD_INT 26
11546: PUSH
11547: LD_INT 27
11549: PUSH
11550: LD_INT 28
11552: PUSH
11553: LD_INT 29
11555: PUSH
11556: LD_INT 30
11558: PUSH
11559: LD_INT 31
11561: PUSH
11562: LD_INT 32
11564: PUSH
11565: LD_INT 33
11567: PUSH
11568: LD_INT 34
11570: PUSH
11571: LD_INT 36
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 101
11613: PUSH
11614: LD_INT 102
11616: PUSH
11617: LD_INT 103
11619: PUSH
11620: LD_INT 104
11622: PUSH
11623: LD_INT 105
11625: PUSH
11626: LD_INT 106
11628: PUSH
11629: LD_INT 107
11631: PUSH
11632: LD_INT 108
11634: PUSH
11635: LD_INT 109
11637: PUSH
11638: LD_INT 110
11640: PUSH
11641: LD_INT 111
11643: PUSH
11644: LD_INT 112
11646: PUSH
11647: LD_INT 113
11649: PUSH
11650: LD_INT 114
11652: PUSH
11653: LD_INT 116
11655: PUSH
11656: LD_INT 117
11658: PUSH
11659: LD_INT 118
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: ST_TO_ADDR
11685: GO 12692
11687: LD_INT 15
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11919
11695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11696: LD_ADDR_VAR 0 2
11700: PUSH
11701: LD_INT 1
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: LD_INT 5
11715: PUSH
11716: LD_INT 6
11718: PUSH
11719: LD_INT 7
11721: PUSH
11722: LD_INT 8
11724: PUSH
11725: LD_INT 9
11727: PUSH
11728: LD_INT 10
11730: PUSH
11731: LD_INT 11
11733: PUSH
11734: LD_INT 12
11736: PUSH
11737: LD_INT 13
11739: PUSH
11740: LD_INT 14
11742: PUSH
11743: LD_INT 15
11745: PUSH
11746: LD_INT 16
11748: PUSH
11749: LD_INT 17
11751: PUSH
11752: LD_INT 18
11754: PUSH
11755: LD_INT 19
11757: PUSH
11758: LD_INT 20
11760: PUSH
11761: LD_INT 21
11763: PUSH
11764: LD_INT 22
11766: PUSH
11767: LD_INT 23
11769: PUSH
11770: LD_INT 24
11772: PUSH
11773: LD_INT 25
11775: PUSH
11776: LD_INT 26
11778: PUSH
11779: LD_INT 27
11781: PUSH
11782: LD_INT 28
11784: PUSH
11785: LD_INT 29
11787: PUSH
11788: LD_INT 30
11790: PUSH
11791: LD_INT 31
11793: PUSH
11794: LD_INT 32
11796: PUSH
11797: LD_INT 33
11799: PUSH
11800: LD_INT 34
11802: PUSH
11803: LD_INT 36
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 101
11845: PUSH
11846: LD_INT 102
11848: PUSH
11849: LD_INT 103
11851: PUSH
11852: LD_INT 104
11854: PUSH
11855: LD_INT 105
11857: PUSH
11858: LD_INT 106
11860: PUSH
11861: LD_INT 107
11863: PUSH
11864: LD_INT 108
11866: PUSH
11867: LD_INT 109
11869: PUSH
11870: LD_INT 110
11872: PUSH
11873: LD_INT 111
11875: PUSH
11876: LD_INT 112
11878: PUSH
11879: LD_INT 113
11881: PUSH
11882: LD_INT 114
11884: PUSH
11885: LD_INT 116
11887: PUSH
11888: LD_INT 117
11890: PUSH
11891: LD_INT 118
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: ST_TO_ADDR
11917: GO 12692
11919: LD_INT 16
11921: DOUBLE
11922: EQUAL
11923: IFTRUE 11927
11925: GO 12063
11927: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11928: LD_ADDR_VAR 0 2
11932: PUSH
11933: LD_INT 2
11935: PUSH
11936: LD_INT 4
11938: PUSH
11939: LD_INT 5
11941: PUSH
11942: LD_INT 7
11944: PUSH
11945: LD_INT 11
11947: PUSH
11948: LD_INT 12
11950: PUSH
11951: LD_INT 15
11953: PUSH
11954: LD_INT 16
11956: PUSH
11957: LD_INT 20
11959: PUSH
11960: LD_INT 21
11962: PUSH
11963: LD_INT 22
11965: PUSH
11966: LD_INT 23
11968: PUSH
11969: LD_INT 25
11971: PUSH
11972: LD_INT 26
11974: PUSH
11975: LD_INT 30
11977: PUSH
11978: LD_INT 31
11980: PUSH
11981: LD_INT 32
11983: PUSH
11984: LD_INT 33
11986: PUSH
11987: LD_INT 34
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 101
12013: PUSH
12014: LD_INT 102
12016: PUSH
12017: LD_INT 103
12019: PUSH
12020: LD_INT 106
12022: PUSH
12023: LD_INT 108
12025: PUSH
12026: LD_INT 112
12028: PUSH
12029: LD_INT 113
12031: PUSH
12032: LD_INT 114
12034: PUSH
12035: LD_INT 116
12037: PUSH
12038: LD_INT 117
12040: PUSH
12041: LD_INT 118
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 12692
12063: LD_INT 17
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12295
12071: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12072: LD_ADDR_VAR 0 2
12076: PUSH
12077: LD_INT 1
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: LD_INT 3
12085: PUSH
12086: LD_INT 4
12088: PUSH
12089: LD_INT 5
12091: PUSH
12092: LD_INT 6
12094: PUSH
12095: LD_INT 7
12097: PUSH
12098: LD_INT 8
12100: PUSH
12101: LD_INT 9
12103: PUSH
12104: LD_INT 10
12106: PUSH
12107: LD_INT 11
12109: PUSH
12110: LD_INT 12
12112: PUSH
12113: LD_INT 13
12115: PUSH
12116: LD_INT 14
12118: PUSH
12119: LD_INT 15
12121: PUSH
12122: LD_INT 16
12124: PUSH
12125: LD_INT 17
12127: PUSH
12128: LD_INT 18
12130: PUSH
12131: LD_INT 19
12133: PUSH
12134: LD_INT 20
12136: PUSH
12137: LD_INT 21
12139: PUSH
12140: LD_INT 22
12142: PUSH
12143: LD_INT 23
12145: PUSH
12146: LD_INT 24
12148: PUSH
12149: LD_INT 25
12151: PUSH
12152: LD_INT 26
12154: PUSH
12155: LD_INT 27
12157: PUSH
12158: LD_INT 28
12160: PUSH
12161: LD_INT 29
12163: PUSH
12164: LD_INT 30
12166: PUSH
12167: LD_INT 31
12169: PUSH
12170: LD_INT 32
12172: PUSH
12173: LD_INT 33
12175: PUSH
12176: LD_INT 34
12178: PUSH
12179: LD_INT 36
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 101
12221: PUSH
12222: LD_INT 102
12224: PUSH
12225: LD_INT 103
12227: PUSH
12228: LD_INT 104
12230: PUSH
12231: LD_INT 105
12233: PUSH
12234: LD_INT 106
12236: PUSH
12237: LD_INT 107
12239: PUSH
12240: LD_INT 108
12242: PUSH
12243: LD_INT 109
12245: PUSH
12246: LD_INT 110
12248: PUSH
12249: LD_INT 111
12251: PUSH
12252: LD_INT 112
12254: PUSH
12255: LD_INT 113
12257: PUSH
12258: LD_INT 114
12260: PUSH
12261: LD_INT 116
12263: PUSH
12264: LD_INT 117
12266: PUSH
12267: LD_INT 118
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: ST_TO_ADDR
12293: GO 12692
12295: LD_INT 18
12297: DOUBLE
12298: EQUAL
12299: IFTRUE 12303
12301: GO 12451
12303: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12304: LD_ADDR_VAR 0 2
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: LD_INT 4
12314: PUSH
12315: LD_INT 5
12317: PUSH
12318: LD_INT 7
12320: PUSH
12321: LD_INT 11
12323: PUSH
12324: LD_INT 12
12326: PUSH
12327: LD_INT 15
12329: PUSH
12330: LD_INT 16
12332: PUSH
12333: LD_INT 20
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 22
12341: PUSH
12342: LD_INT 23
12344: PUSH
12345: LD_INT 25
12347: PUSH
12348: LD_INT 26
12350: PUSH
12351: LD_INT 30
12353: PUSH
12354: LD_INT 31
12356: PUSH
12357: LD_INT 32
12359: PUSH
12360: LD_INT 33
12362: PUSH
12363: LD_INT 34
12365: PUSH
12366: LD_INT 35
12368: PUSH
12369: LD_INT 36
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 101
12397: PUSH
12398: LD_INT 102
12400: PUSH
12401: LD_INT 103
12403: PUSH
12404: LD_INT 106
12406: PUSH
12407: LD_INT 108
12409: PUSH
12410: LD_INT 112
12412: PUSH
12413: LD_INT 113
12415: PUSH
12416: LD_INT 114
12418: PUSH
12419: LD_INT 115
12421: PUSH
12422: LD_INT 116
12424: PUSH
12425: LD_INT 117
12427: PUSH
12428: LD_INT 118
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: ST_TO_ADDR
12449: GO 12692
12451: LD_INT 19
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12691
12459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12460: LD_ADDR_VAR 0 2
12464: PUSH
12465: LD_INT 1
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: LD_INT 4
12476: PUSH
12477: LD_INT 5
12479: PUSH
12480: LD_INT 6
12482: PUSH
12483: LD_INT 7
12485: PUSH
12486: LD_INT 8
12488: PUSH
12489: LD_INT 9
12491: PUSH
12492: LD_INT 10
12494: PUSH
12495: LD_INT 11
12497: PUSH
12498: LD_INT 12
12500: PUSH
12501: LD_INT 13
12503: PUSH
12504: LD_INT 14
12506: PUSH
12507: LD_INT 15
12509: PUSH
12510: LD_INT 16
12512: PUSH
12513: LD_INT 17
12515: PUSH
12516: LD_INT 18
12518: PUSH
12519: LD_INT 19
12521: PUSH
12522: LD_INT 20
12524: PUSH
12525: LD_INT 21
12527: PUSH
12528: LD_INT 22
12530: PUSH
12531: LD_INT 23
12533: PUSH
12534: LD_INT 24
12536: PUSH
12537: LD_INT 25
12539: PUSH
12540: LD_INT 26
12542: PUSH
12543: LD_INT 27
12545: PUSH
12546: LD_INT 28
12548: PUSH
12549: LD_INT 29
12551: PUSH
12552: LD_INT 30
12554: PUSH
12555: LD_INT 31
12557: PUSH
12558: LD_INT 32
12560: PUSH
12561: LD_INT 33
12563: PUSH
12564: LD_INT 34
12566: PUSH
12567: LD_INT 35
12569: PUSH
12570: LD_INT 36
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 101
12613: PUSH
12614: LD_INT 102
12616: PUSH
12617: LD_INT 103
12619: PUSH
12620: LD_INT 104
12622: PUSH
12623: LD_INT 105
12625: PUSH
12626: LD_INT 106
12628: PUSH
12629: LD_INT 107
12631: PUSH
12632: LD_INT 108
12634: PUSH
12635: LD_INT 109
12637: PUSH
12638: LD_INT 110
12640: PUSH
12641: LD_INT 111
12643: PUSH
12644: LD_INT 112
12646: PUSH
12647: LD_INT 113
12649: PUSH
12650: LD_INT 114
12652: PUSH
12653: LD_INT 115
12655: PUSH
12656: LD_INT 116
12658: PUSH
12659: LD_INT 117
12661: PUSH
12662: LD_INT 118
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: ST_TO_ADDR
12689: GO 12692
12691: POP
// end else
12692: GO 12923
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 1
12701: PUSH
12702: LD_INT 2
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: LD_INT 4
12710: PUSH
12711: LD_INT 5
12713: PUSH
12714: LD_INT 6
12716: PUSH
12717: LD_INT 7
12719: PUSH
12720: LD_INT 8
12722: PUSH
12723: LD_INT 9
12725: PUSH
12726: LD_INT 10
12728: PUSH
12729: LD_INT 11
12731: PUSH
12732: LD_INT 12
12734: PUSH
12735: LD_INT 13
12737: PUSH
12738: LD_INT 14
12740: PUSH
12741: LD_INT 15
12743: PUSH
12744: LD_INT 16
12746: PUSH
12747: LD_INT 17
12749: PUSH
12750: LD_INT 18
12752: PUSH
12753: LD_INT 19
12755: PUSH
12756: LD_INT 20
12758: PUSH
12759: LD_INT 21
12761: PUSH
12762: LD_INT 22
12764: PUSH
12765: LD_INT 23
12767: PUSH
12768: LD_INT 24
12770: PUSH
12771: LD_INT 25
12773: PUSH
12774: LD_INT 26
12776: PUSH
12777: LD_INT 27
12779: PUSH
12780: LD_INT 28
12782: PUSH
12783: LD_INT 29
12785: PUSH
12786: LD_INT 30
12788: PUSH
12789: LD_INT 31
12791: PUSH
12792: LD_INT 32
12794: PUSH
12795: LD_INT 33
12797: PUSH
12798: LD_INT 34
12800: PUSH
12801: LD_INT 35
12803: PUSH
12804: LD_INT 36
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 101
12847: PUSH
12848: LD_INT 102
12850: PUSH
12851: LD_INT 103
12853: PUSH
12854: LD_INT 104
12856: PUSH
12857: LD_INT 105
12859: PUSH
12860: LD_INT 106
12862: PUSH
12863: LD_INT 107
12865: PUSH
12866: LD_INT 108
12868: PUSH
12869: LD_INT 109
12871: PUSH
12872: LD_INT 110
12874: PUSH
12875: LD_INT 111
12877: PUSH
12878: LD_INT 112
12880: PUSH
12881: LD_INT 113
12883: PUSH
12884: LD_INT 114
12886: PUSH
12887: LD_INT 115
12889: PUSH
12890: LD_INT 116
12892: PUSH
12893: LD_INT 117
12895: PUSH
12896: LD_INT 118
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: ST_TO_ADDR
// if result then
12923: LD_VAR 0 2
12927: IFFALSE 13713
// begin normal :=  ;
12929: LD_ADDR_VAR 0 5
12933: PUSH
12934: LD_STRING 
12936: ST_TO_ADDR
// hardcore :=  ;
12937: LD_ADDR_VAR 0 6
12941: PUSH
12942: LD_STRING 
12944: ST_TO_ADDR
// active :=  ;
12945: LD_ADDR_VAR 0 7
12949: PUSH
12950: LD_STRING 
12952: ST_TO_ADDR
// for i = 1 to normalCounter do
12953: LD_ADDR_VAR 0 8
12957: PUSH
12958: DOUBLE
12959: LD_INT 1
12961: DEC
12962: ST_TO_ADDR
12963: LD_EXP 31
12967: PUSH
12968: FOR_TO
12969: IFFALSE 13070
// begin tmp := 0 ;
12971: LD_ADDR_VAR 0 3
12975: PUSH
12976: LD_STRING 0
12978: ST_TO_ADDR
// if result [ 1 ] then
12979: LD_VAR 0 2
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: IFFALSE 13052
// if result [ 1 ] [ 1 ] = i then
12989: LD_VAR 0 2
12993: PUSH
12994: LD_INT 1
12996: ARRAY
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: PUSH
13002: LD_VAR 0 8
13006: EQUAL
13007: IFFALSE 13052
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13009: LD_ADDR_VAR 0 2
13013: PUSH
13014: LD_VAR 0 2
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: LD_VAR 0 2
13026: PUSH
13027: LD_INT 1
13029: ARRAY
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 3
13038: PPUSH
13039: CALL_OW 1
13043: ST_TO_ADDR
// tmp := 1 ;
13044: LD_ADDR_VAR 0 3
13048: PUSH
13049: LD_STRING 1
13051: ST_TO_ADDR
// end ; normal := normal & tmp ;
13052: LD_ADDR_VAR 0 5
13056: PUSH
13057: LD_VAR 0 5
13061: PUSH
13062: LD_VAR 0 3
13066: STR
13067: ST_TO_ADDR
// end ;
13068: GO 12968
13070: POP
13071: POP
// for i = 1 to hardcoreCounter do
13072: LD_ADDR_VAR 0 8
13076: PUSH
13077: DOUBLE
13078: LD_INT 1
13080: DEC
13081: ST_TO_ADDR
13082: LD_EXP 32
13086: PUSH
13087: FOR_TO
13088: IFFALSE 13193
// begin tmp := 0 ;
13090: LD_ADDR_VAR 0 3
13094: PUSH
13095: LD_STRING 0
13097: ST_TO_ADDR
// if result [ 2 ] then
13098: LD_VAR 0 2
13102: PUSH
13103: LD_INT 2
13105: ARRAY
13106: IFFALSE 13175
// if result [ 2 ] [ 1 ] = 100 + i then
13108: LD_VAR 0 2
13112: PUSH
13113: LD_INT 2
13115: ARRAY
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: PUSH
13121: LD_INT 100
13123: PUSH
13124: LD_VAR 0 8
13128: PLUS
13129: EQUAL
13130: IFFALSE 13175
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: LD_VAR 0 2
13141: PPUSH
13142: LD_INT 2
13144: PPUSH
13145: LD_VAR 0 2
13149: PUSH
13150: LD_INT 2
13152: ARRAY
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: CALL_OW 3
13161: PPUSH
13162: CALL_OW 1
13166: ST_TO_ADDR
// tmp := 1 ;
13167: LD_ADDR_VAR 0 3
13171: PUSH
13172: LD_STRING 1
13174: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13175: LD_ADDR_VAR 0 6
13179: PUSH
13180: LD_VAR 0 6
13184: PUSH
13185: LD_VAR 0 3
13189: STR
13190: ST_TO_ADDR
// end ;
13191: GO 13087
13193: POP
13194: POP
// if isGameLoad then
13195: LD_VAR 0 1
13199: IFFALSE 13674
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13201: LD_ADDR_VAR 0 4
13205: PUSH
13206: LD_EXP 35
13210: PUSH
13211: LD_EXP 34
13215: PUSH
13216: LD_EXP 36
13220: PUSH
13221: LD_EXP 33
13225: PUSH
13226: LD_EXP 37
13230: PUSH
13231: LD_EXP 38
13235: PUSH
13236: LD_EXP 39
13240: PUSH
13241: LD_EXP 40
13245: PUSH
13246: LD_EXP 41
13250: PUSH
13251: LD_EXP 42
13255: PUSH
13256: LD_EXP 43
13260: PUSH
13261: LD_EXP 44
13265: PUSH
13266: LD_EXP 45
13270: PUSH
13271: LD_EXP 46
13275: PUSH
13276: LD_EXP 54
13280: PUSH
13281: LD_EXP 55
13285: PUSH
13286: LD_EXP 56
13290: PUSH
13291: LD_EXP 57
13295: PUSH
13296: LD_EXP 59
13300: PUSH
13301: LD_EXP 60
13305: PUSH
13306: LD_EXP 61
13310: PUSH
13311: LD_EXP 64
13315: PUSH
13316: LD_EXP 66
13320: PUSH
13321: LD_EXP 67
13325: PUSH
13326: LD_EXP 68
13330: PUSH
13331: LD_EXP 70
13335: PUSH
13336: LD_EXP 71
13340: PUSH
13341: LD_EXP 74
13345: PUSH
13346: LD_EXP 75
13350: PUSH
13351: LD_EXP 76
13355: PUSH
13356: LD_EXP 77
13360: PUSH
13361: LD_EXP 78
13365: PUSH
13366: LD_EXP 79
13370: PUSH
13371: LD_EXP 80
13375: PUSH
13376: LD_EXP 81
13380: PUSH
13381: LD_EXP 82
13385: PUSH
13386: LD_EXP 47
13390: PUSH
13391: LD_EXP 48
13395: PUSH
13396: LD_EXP 51
13400: PUSH
13401: LD_EXP 52
13405: PUSH
13406: LD_EXP 53
13410: PUSH
13411: LD_EXP 49
13415: PUSH
13416: LD_EXP 50
13420: PUSH
13421: LD_EXP 58
13425: PUSH
13426: LD_EXP 62
13430: PUSH
13431: LD_EXP 63
13435: PUSH
13436: LD_EXP 65
13440: PUSH
13441: LD_EXP 69
13445: PUSH
13446: LD_EXP 72
13450: PUSH
13451: LD_EXP 73
13455: PUSH
13456: LD_EXP 83
13460: PUSH
13461: LD_EXP 84
13465: PUSH
13466: LD_EXP 85
13470: PUSH
13471: LD_EXP 86
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: ST_TO_ADDR
// tmp :=  ;
13532: LD_ADDR_VAR 0 3
13536: PUSH
13537: LD_STRING 
13539: ST_TO_ADDR
// for i = 1 to normalCounter do
13540: LD_ADDR_VAR 0 8
13544: PUSH
13545: DOUBLE
13546: LD_INT 1
13548: DEC
13549: ST_TO_ADDR
13550: LD_EXP 31
13554: PUSH
13555: FOR_TO
13556: IFFALSE 13592
// begin if flags [ i ] then
13558: LD_VAR 0 4
13562: PUSH
13563: LD_VAR 0 8
13567: ARRAY
13568: IFFALSE 13590
// tmp := tmp & i & ; ;
13570: LD_ADDR_VAR 0 3
13574: PUSH
13575: LD_VAR 0 3
13579: PUSH
13580: LD_VAR 0 8
13584: STR
13585: PUSH
13586: LD_STRING ;
13588: STR
13589: ST_TO_ADDR
// end ;
13590: GO 13555
13592: POP
13593: POP
// for i = 1 to hardcoreCounter do
13594: LD_ADDR_VAR 0 8
13598: PUSH
13599: DOUBLE
13600: LD_INT 1
13602: DEC
13603: ST_TO_ADDR
13604: LD_EXP 32
13608: PUSH
13609: FOR_TO
13610: IFFALSE 13656
// begin if flags [ normalCounter + i ] then
13612: LD_VAR 0 4
13616: PUSH
13617: LD_EXP 31
13621: PUSH
13622: LD_VAR 0 8
13626: PLUS
13627: ARRAY
13628: IFFALSE 13654
// tmp := tmp & ( 100 + i ) & ; ;
13630: LD_ADDR_VAR 0 3
13634: PUSH
13635: LD_VAR 0 3
13639: PUSH
13640: LD_INT 100
13642: PUSH
13643: LD_VAR 0 8
13647: PLUS
13648: STR
13649: PUSH
13650: LD_STRING ;
13652: STR
13653: ST_TO_ADDR
// end ;
13654: GO 13609
13656: POP
13657: POP
// if tmp then
13658: LD_VAR 0 3
13662: IFFALSE 13674
// active := tmp ;
13664: LD_ADDR_VAR 0 7
13668: PUSH
13669: LD_VAR 0 3
13673: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13674: LD_STRING getStreamItemsFromMission("
13676: PUSH
13677: LD_VAR 0 5
13681: STR
13682: PUSH
13683: LD_STRING ","
13685: STR
13686: PUSH
13687: LD_VAR 0 6
13691: STR
13692: PUSH
13693: LD_STRING ","
13695: STR
13696: PUSH
13697: LD_VAR 0 7
13701: STR
13702: PUSH
13703: LD_STRING ")
13705: STR
13706: PPUSH
13707: CALL_OW 559
// end else
13711: GO 13720
// ToLua ( getStreamItemsFromMission("","","") ) ;
13713: LD_STRING getStreamItemsFromMission("","","")
13715: PPUSH
13716: CALL_OW 559
// end ;
13720: LD_VAR 0 2
13724: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13725: LD_EXP 30
13729: IFFALSE 13737
13731: PUSH
13732: LD_EXP 35
13736: AND
13737: IFFALSE 13861
13739: GO 13741
13741: DISABLE
13742: LD_INT 0
13744: PPUSH
13745: PPUSH
// begin enable ;
13746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_INT 22
13754: PUSH
13755: LD_OWVAR 2
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 2
13766: PUSH
13767: LD_INT 34
13769: PUSH
13770: LD_INT 7
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 34
13779: PUSH
13780: LD_INT 45
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 34
13789: PUSH
13790: LD_INT 28
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 34
13799: PUSH
13800: LD_INT 47
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PPUSH
13818: CALL_OW 69
13822: ST_TO_ADDR
// if not tmp then
13823: LD_VAR 0 2
13827: NOT
13828: IFFALSE 13832
// exit ;
13830: GO 13861
// for i in tmp do
13832: LD_ADDR_VAR 0 1
13836: PUSH
13837: LD_VAR 0 2
13841: PUSH
13842: FOR_IN
13843: IFFALSE 13859
// begin SetLives ( i , 0 ) ;
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_INT 0
13852: PPUSH
13853: CALL_OW 234
// end ;
13857: GO 13842
13859: POP
13860: POP
// end ;
13861: PPOPN 2
13863: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13864: LD_EXP 30
13868: IFFALSE 13876
13870: PUSH
13871: LD_EXP 36
13875: AND
13876: IFFALSE 13960
13878: GO 13880
13880: DISABLE
13881: LD_INT 0
13883: PPUSH
13884: PPUSH
// begin enable ;
13885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_INT 22
13893: PUSH
13894: LD_OWVAR 2
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 32
13905: PUSH
13906: LD_INT 3
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: ST_TO_ADDR
// if not tmp then
13922: LD_VAR 0 2
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13960
// for i in tmp do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_VAR 0 2
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13958
// begin SetLives ( i , 0 ) ;
13944: LD_VAR 0 1
13948: PPUSH
13949: LD_INT 0
13951: PPUSH
13952: CALL_OW 234
// end ;
13956: GO 13941
13958: POP
13959: POP
// end ;
13960: PPOPN 2
13962: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13963: LD_EXP 30
13967: IFFALSE 13975
13969: PUSH
13970: LD_EXP 33
13974: AND
13975: IFFALSE 14068
13977: GO 13979
13979: DISABLE
13980: LD_INT 0
13982: PPUSH
// begin enable ;
13983: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13984: LD_ADDR_VAR 0 1
13988: PUSH
13989: LD_INT 22
13991: PUSH
13992: LD_OWVAR 2
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 2
14003: PUSH
14004: LD_INT 25
14006: PUSH
14007: LD_INT 5
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 25
14016: PUSH
14017: LD_INT 9
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: LD_INT 25
14026: PUSH
14027: LD_INT 8
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: PUSH
14049: FOR_IN
14050: IFFALSE 14066
// begin SetClass ( i , 1 ) ;
14052: LD_VAR 0 1
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 336
// end ;
14064: GO 14049
14066: POP
14067: POP
// end ;
14068: PPOPN 1
14070: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14071: LD_EXP 30
14075: IFFALSE 14083
14077: PUSH
14078: LD_EXP 34
14082: AND
14083: IFFALSE 14095
14085: PUSH
14086: LD_OWVAR 65
14090: PUSH
14091: LD_INT 7
14093: LESS
14094: AND
14095: IFFALSE 14109
14097: GO 14099
14099: DISABLE
// begin enable ;
14100: ENABLE
// game_speed := 7 ;
14101: LD_ADDR_OWVAR 65
14105: PUSH
14106: LD_INT 7
14108: ST_TO_ADDR
// end ;
14109: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14110: LD_EXP 30
14114: IFFALSE 14122
14116: PUSH
14117: LD_EXP 37
14121: AND
14122: IFFALSE 14324
14124: GO 14126
14126: DISABLE
14127: LD_INT 0
14129: PPUSH
14130: PPUSH
14131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14132: LD_ADDR_VAR 0 3
14136: PUSH
14137: LD_INT 81
14139: PUSH
14140: LD_OWVAR 2
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 21
14151: PUSH
14152: LD_INT 1
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: ST_TO_ADDR
// if not tmp then
14168: LD_VAR 0 3
14172: NOT
14173: IFFALSE 14177
// exit ;
14175: GO 14324
// if tmp > 5 then
14177: LD_VAR 0 3
14181: PUSH
14182: LD_INT 5
14184: GREATER
14185: IFFALSE 14197
// k := 5 else
14187: LD_ADDR_VAR 0 2
14191: PUSH
14192: LD_INT 5
14194: ST_TO_ADDR
14195: GO 14207
// k := tmp ;
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: LD_VAR 0 3
14206: ST_TO_ADDR
// for i := 1 to k do
14207: LD_ADDR_VAR 0 1
14211: PUSH
14212: DOUBLE
14213: LD_INT 1
14215: DEC
14216: ST_TO_ADDR
14217: LD_VAR 0 2
14221: PUSH
14222: FOR_TO
14223: IFFALSE 14322
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14225: LD_VAR 0 3
14229: PUSH
14230: LD_VAR 0 1
14234: ARRAY
14235: PPUSH
14236: LD_VAR 0 1
14240: PUSH
14241: LD_INT 4
14243: MOD
14244: PUSH
14245: LD_INT 1
14247: PLUS
14248: PPUSH
14249: CALL_OW 259
14253: PUSH
14254: LD_INT 10
14256: LESS
14257: IFFALSE 14320
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14259: LD_VAR 0 3
14263: PUSH
14264: LD_VAR 0 1
14268: ARRAY
14269: PPUSH
14270: LD_VAR 0 1
14274: PUSH
14275: LD_INT 4
14277: MOD
14278: PUSH
14279: LD_INT 1
14281: PLUS
14282: PPUSH
14283: LD_VAR 0 3
14287: PUSH
14288: LD_VAR 0 1
14292: ARRAY
14293: PPUSH
14294: LD_VAR 0 1
14298: PUSH
14299: LD_INT 4
14301: MOD
14302: PUSH
14303: LD_INT 1
14305: PLUS
14306: PPUSH
14307: CALL_OW 259
14311: PUSH
14312: LD_INT 1
14314: PLUS
14315: PPUSH
14316: CALL_OW 237
14320: GO 14222
14322: POP
14323: POP
// end ;
14324: PPOPN 3
14326: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14327: LD_EXP 30
14331: IFFALSE 14339
14333: PUSH
14334: LD_EXP 38
14338: AND
14339: IFFALSE 14359
14341: GO 14343
14343: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14344: LD_INT 4
14346: PPUSH
14347: LD_OWVAR 2
14351: PPUSH
14352: LD_INT 0
14354: PPUSH
14355: CALL_OW 324
14359: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14360: LD_EXP 30
14364: IFFALSE 14372
14366: PUSH
14367: LD_EXP 67
14371: AND
14372: IFFALSE 14392
14374: GO 14376
14376: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14377: LD_INT 19
14379: PPUSH
14380: LD_OWVAR 2
14384: PPUSH
14385: LD_INT 0
14387: PPUSH
14388: CALL_OW 324
14392: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14393: LD_EXP 30
14397: IFFALSE 14405
14399: PUSH
14400: LD_EXP 39
14404: AND
14405: IFFALSE 14507
14407: GO 14409
14409: DISABLE
14410: LD_INT 0
14412: PPUSH
14413: PPUSH
// begin enable ;
14414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14415: LD_ADDR_VAR 0 2
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_OWVAR 2
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 2
14434: PUSH
14435: LD_INT 34
14437: PUSH
14438: LD_INT 11
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 34
14447: PUSH
14448: LD_INT 30
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PPUSH
14464: CALL_OW 69
14468: ST_TO_ADDR
// if not tmp then
14469: LD_VAR 0 2
14473: NOT
14474: IFFALSE 14478
// exit ;
14476: GO 14507
// for i in tmp do
14478: LD_ADDR_VAR 0 1
14482: PUSH
14483: LD_VAR 0 2
14487: PUSH
14488: FOR_IN
14489: IFFALSE 14505
// begin SetLives ( i , 0 ) ;
14491: LD_VAR 0 1
14495: PPUSH
14496: LD_INT 0
14498: PPUSH
14499: CALL_OW 234
// end ;
14503: GO 14488
14505: POP
14506: POP
// end ;
14507: PPOPN 2
14509: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14510: LD_EXP 30
14514: IFFALSE 14522
14516: PUSH
14517: LD_EXP 40
14521: AND
14522: IFFALSE 14542
14524: GO 14526
14526: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14527: LD_INT 32
14529: PPUSH
14530: LD_OWVAR 2
14534: PPUSH
14535: LD_INT 0
14537: PPUSH
14538: CALL_OW 324
14542: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14543: LD_EXP 30
14547: IFFALSE 14555
14549: PUSH
14550: LD_EXP 41
14554: AND
14555: IFFALSE 14738
14557: GO 14559
14559: DISABLE
14560: LD_INT 0
14562: PPUSH
14563: PPUSH
14564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14565: LD_ADDR_VAR 0 2
14569: PUSH
14570: LD_INT 22
14572: PUSH
14573: LD_OWVAR 2
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 33
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: ST_TO_ADDR
// if not tmp then
14601: LD_VAR 0 2
14605: NOT
14606: IFFALSE 14610
// exit ;
14608: GO 14738
// side := 0 ;
14610: LD_ADDR_VAR 0 3
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// for i := 1 to 8 do
14618: LD_ADDR_VAR 0 1
14622: PUSH
14623: DOUBLE
14624: LD_INT 1
14626: DEC
14627: ST_TO_ADDR
14628: LD_INT 8
14630: PUSH
14631: FOR_TO
14632: IFFALSE 14682
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14634: LD_OWVAR 2
14638: PUSH
14639: LD_VAR 0 1
14643: NONEQUAL
14644: IFFALSE 14666
14646: PUSH
14647: LD_OWVAR 2
14651: PPUSH
14652: LD_VAR 0 1
14656: PPUSH
14657: CALL_OW 81
14661: PUSH
14662: LD_INT 2
14664: EQUAL
14665: AND
14666: IFFALSE 14680
// begin side := i ;
14668: LD_ADDR_VAR 0 3
14672: PUSH
14673: LD_VAR 0 1
14677: ST_TO_ADDR
// break ;
14678: GO 14682
// end ;
14680: GO 14631
14682: POP
14683: POP
// if not side then
14684: LD_VAR 0 3
14688: NOT
14689: IFFALSE 14693
// exit ;
14691: GO 14738
// for i := 1 to tmp do
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: DOUBLE
14699: LD_INT 1
14701: DEC
14702: ST_TO_ADDR
14703: LD_VAR 0 2
14707: PUSH
14708: FOR_TO
14709: IFFALSE 14736
// if Prob ( 60 ) then
14711: LD_INT 60
14713: PPUSH
14714: CALL_OW 13
14718: IFFALSE 14734
// SetSide ( i , side ) ;
14720: LD_VAR 0 1
14724: PPUSH
14725: LD_VAR 0 3
14729: PPUSH
14730: CALL_OW 235
14734: GO 14708
14736: POP
14737: POP
// end ;
14738: PPOPN 3
14740: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14741: LD_EXP 30
14745: IFFALSE 14753
14747: PUSH
14748: LD_EXP 43
14752: AND
14753: IFFALSE 14872
14755: GO 14757
14757: DISABLE
14758: LD_INT 0
14760: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14761: LD_ADDR_VAR 0 1
14765: PUSH
14766: LD_INT 22
14768: PUSH
14769: LD_OWVAR 2
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 21
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 23
14793: PUSH
14794: LD_INT 0
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: PPUSH
14810: CALL_OW 69
14814: PUSH
14815: FOR_IN
14816: IFFALSE 14870
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14818: LD_VAR 0 1
14822: PPUSH
14823: CALL_OW 257
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: LD_INT 2
14833: PUSH
14834: LD_INT 3
14836: PUSH
14837: LD_INT 4
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: IN
14846: IFFALSE 14868
// SetClass ( un , rand ( 1 , 4 ) ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: LD_INT 4
14858: PPUSH
14859: CALL_OW 12
14863: PPUSH
14864: CALL_OW 336
14868: GO 14815
14870: POP
14871: POP
// end ;
14872: PPOPN 1
14874: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14875: LD_EXP 30
14879: IFFALSE 14887
14881: PUSH
14882: LD_EXP 42
14886: AND
14887: IFFALSE 14966
14889: GO 14891
14891: DISABLE
14892: LD_INT 0
14894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14895: LD_ADDR_VAR 0 1
14899: PUSH
14900: LD_INT 22
14902: PUSH
14903: LD_OWVAR 2
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 21
14914: PUSH
14915: LD_INT 3
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 69
14930: ST_TO_ADDR
// if not tmp then
14931: LD_VAR 0 1
14935: NOT
14936: IFFALSE 14940
// exit ;
14938: GO 14966
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14940: LD_VAR 0 1
14944: PUSH
14945: LD_INT 1
14947: PPUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 12
14957: ARRAY
14958: PPUSH
14959: LD_INT 100
14961: PPUSH
14962: CALL_OW 234
// end ;
14966: PPOPN 1
14968: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14969: LD_EXP 30
14973: IFFALSE 14981
14975: PUSH
14976: LD_EXP 44
14980: AND
14981: IFFALSE 15079
14983: GO 14985
14985: DISABLE
14986: LD_INT 0
14988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14989: LD_ADDR_VAR 0 1
14993: PUSH
14994: LD_INT 22
14996: PUSH
14997: LD_OWVAR 2
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 21
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: ST_TO_ADDR
// if not tmp then
15025: LD_VAR 0 1
15029: NOT
15030: IFFALSE 15034
// exit ;
15032: GO 15079
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15034: LD_VAR 0 1
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: LD_INT 4
15058: PPUSH
15059: CALL_OW 12
15063: PPUSH
15064: LD_INT 3000
15066: PPUSH
15067: LD_INT 9000
15069: PPUSH
15070: CALL_OW 12
15074: PPUSH
15075: CALL_OW 492
// end ;
15079: PPOPN 1
15081: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15082: LD_EXP 30
15086: IFFALSE 15094
15088: PUSH
15089: LD_EXP 45
15093: AND
15094: IFFALSE 15114
15096: GO 15098
15098: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15099: LD_INT 1
15101: PPUSH
15102: LD_OWVAR 2
15106: PPUSH
15107: LD_INT 0
15109: PPUSH
15110: CALL_OW 324
15114: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15115: LD_EXP 30
15119: IFFALSE 15127
15121: PUSH
15122: LD_EXP 46
15126: AND
15127: IFFALSE 15210
15129: GO 15131
15131: DISABLE
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15136: LD_ADDR_VAR 0 2
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_OWVAR 2
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 21
15155: PUSH
15156: LD_INT 3
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PPUSH
15167: CALL_OW 69
15171: ST_TO_ADDR
// if not tmp then
15172: LD_VAR 0 2
15176: NOT
15177: IFFALSE 15181
// exit ;
15179: GO 15210
// for i in tmp do
15181: LD_ADDR_VAR 0 1
15185: PUSH
15186: LD_VAR 0 2
15190: PUSH
15191: FOR_IN
15192: IFFALSE 15208
// SetBLevel ( i , 10 ) ;
15194: LD_VAR 0 1
15198: PPUSH
15199: LD_INT 10
15201: PPUSH
15202: CALL_OW 241
15206: GO 15191
15208: POP
15209: POP
// end ;
15210: PPOPN 2
15212: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15213: LD_EXP 30
15217: IFFALSE 15225
15219: PUSH
15220: LD_EXP 47
15224: AND
15225: IFFALSE 15336
15227: GO 15229
15229: DISABLE
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15235: LD_ADDR_VAR 0 3
15239: PUSH
15240: LD_INT 22
15242: PUSH
15243: LD_OWVAR 2
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 25
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 69
15270: ST_TO_ADDR
// if not tmp then
15271: LD_VAR 0 3
15275: NOT
15276: IFFALSE 15280
// exit ;
15278: GO 15336
// un := tmp [ rand ( 1 , tmp ) ] ;
15280: LD_ADDR_VAR 0 2
15284: PUSH
15285: LD_VAR 0 3
15289: PUSH
15290: LD_INT 1
15292: PPUSH
15293: LD_VAR 0 3
15297: PPUSH
15298: CALL_OW 12
15302: ARRAY
15303: ST_TO_ADDR
// if Crawls ( un ) then
15304: LD_VAR 0 2
15308: PPUSH
15309: CALL_OW 318
15313: IFFALSE 15324
// ComWalk ( un ) ;
15315: LD_VAR 0 2
15319: PPUSH
15320: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15324: LD_VAR 0 2
15328: PPUSH
15329: LD_INT 5
15331: PPUSH
15332: CALL_OW 336
// end ;
15336: PPOPN 3
15338: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15339: LD_EXP 30
15343: IFFALSE 15351
15345: PUSH
15346: LD_EXP 48
15350: AND
15351: IFFALSE 15363
15353: PUSH
15354: LD_OWVAR 67
15358: PUSH
15359: LD_INT 4
15361: LESS
15362: AND
15363: IFFALSE 15382
15365: GO 15367
15367: DISABLE
// begin Difficulty := Difficulty + 1 ;
15368: LD_ADDR_OWVAR 67
15372: PUSH
15373: LD_OWVAR 67
15377: PUSH
15378: LD_INT 1
15380: PLUS
15381: ST_TO_ADDR
// end ;
15382: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15383: LD_EXP 30
15387: IFFALSE 15395
15389: PUSH
15390: LD_EXP 49
15394: AND
15395: IFFALSE 15498
15397: GO 15399
15399: DISABLE
15400: LD_INT 0
15402: PPUSH
// begin for i := 1 to 5 do
15403: LD_ADDR_VAR 0 1
15407: PUSH
15408: DOUBLE
15409: LD_INT 1
15411: DEC
15412: ST_TO_ADDR
15413: LD_INT 5
15415: PUSH
15416: FOR_TO
15417: IFFALSE 15496
// begin uc_nation := nation_nature ;
15419: LD_ADDR_OWVAR 21
15423: PUSH
15424: LD_INT 0
15426: ST_TO_ADDR
// uc_side := 0 ;
15427: LD_ADDR_OWVAR 20
15431: PUSH
15432: LD_INT 0
15434: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15435: LD_ADDR_OWVAR 29
15439: PUSH
15440: LD_INT 12
15442: PUSH
15443: LD_INT 12
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: ST_TO_ADDR
// hc_agressivity := 20 ;
15450: LD_ADDR_OWVAR 35
15454: PUSH
15455: LD_INT 20
15457: ST_TO_ADDR
// hc_class := class_tiger ;
15458: LD_ADDR_OWVAR 28
15462: PUSH
15463: LD_INT 14
15465: ST_TO_ADDR
// hc_gallery :=  ;
15466: LD_ADDR_OWVAR 33
15470: PUSH
15471: LD_STRING 
15473: ST_TO_ADDR
// hc_name :=  ;
15474: LD_ADDR_OWVAR 26
15478: PUSH
15479: LD_STRING 
15481: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15482: CALL_OW 44
15486: PPUSH
15487: LD_INT 0
15489: PPUSH
15490: CALL_OW 51
// end ;
15494: GO 15416
15496: POP
15497: POP
// end ;
15498: PPOPN 1
15500: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15501: LD_EXP 30
15505: IFFALSE 15513
15507: PUSH
15508: LD_EXP 50
15512: AND
15513: IFFALSE 15522
15515: GO 15517
15517: DISABLE
// StreamSibBomb ;
15518: CALL 15523 0 0
15522: END
// export function StreamSibBomb ; var i , x , y ; begin
15523: LD_INT 0
15525: PPUSH
15526: PPUSH
15527: PPUSH
15528: PPUSH
// result := false ;
15529: LD_ADDR_VAR 0 1
15533: PUSH
15534: LD_INT 0
15536: ST_TO_ADDR
// for i := 1 to 16 do
15537: LD_ADDR_VAR 0 2
15541: PUSH
15542: DOUBLE
15543: LD_INT 1
15545: DEC
15546: ST_TO_ADDR
15547: LD_INT 16
15549: PUSH
15550: FOR_TO
15551: IFFALSE 15750
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15553: LD_ADDR_VAR 0 3
15557: PUSH
15558: LD_INT 10
15560: PUSH
15561: LD_INT 20
15563: PUSH
15564: LD_INT 30
15566: PUSH
15567: LD_INT 40
15569: PUSH
15570: LD_INT 50
15572: PUSH
15573: LD_INT 60
15575: PUSH
15576: LD_INT 70
15578: PUSH
15579: LD_INT 80
15581: PUSH
15582: LD_INT 90
15584: PUSH
15585: LD_INT 100
15587: PUSH
15588: LD_INT 110
15590: PUSH
15591: LD_INT 120
15593: PUSH
15594: LD_INT 130
15596: PUSH
15597: LD_INT 140
15599: PUSH
15600: LD_INT 150
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_INT 15
15625: PPUSH
15626: CALL_OW 12
15630: ARRAY
15631: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15632: LD_ADDR_VAR 0 4
15636: PUSH
15637: LD_INT 10
15639: PUSH
15640: LD_INT 20
15642: PUSH
15643: LD_INT 30
15645: PUSH
15646: LD_INT 40
15648: PUSH
15649: LD_INT 50
15651: PUSH
15652: LD_INT 60
15654: PUSH
15655: LD_INT 70
15657: PUSH
15658: LD_INT 80
15660: PUSH
15661: LD_INT 90
15663: PUSH
15664: LD_INT 100
15666: PUSH
15667: LD_INT 110
15669: PUSH
15670: LD_INT 120
15672: PUSH
15673: LD_INT 130
15675: PUSH
15676: LD_INT 140
15678: PUSH
15679: LD_INT 150
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 1
15701: PPUSH
15702: LD_INT 15
15704: PPUSH
15705: CALL_OW 12
15709: ARRAY
15710: ST_TO_ADDR
// if ValidHex ( x , y ) then
15711: LD_VAR 0 3
15715: PPUSH
15716: LD_VAR 0 4
15720: PPUSH
15721: CALL_OW 488
15725: IFFALSE 15748
// begin result := [ x , y ] ;
15727: LD_ADDR_VAR 0 1
15731: PUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_VAR 0 4
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: ST_TO_ADDR
// break ;
15746: GO 15750
// end ; end ;
15748: GO 15550
15750: POP
15751: POP
// if result then
15752: LD_VAR 0 1
15756: IFFALSE 15816
// begin ToLua ( playSibBomb() ) ;
15758: LD_STRING playSibBomb()
15760: PPUSH
15761: CALL_OW 559
// wait ( 0 0$14 ) ;
15765: LD_INT 490
15767: PPUSH
15768: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15772: LD_VAR 0 1
15776: PUSH
15777: LD_INT 1
15779: ARRAY
15780: PPUSH
15781: LD_VAR 0 1
15785: PUSH
15786: LD_INT 2
15788: ARRAY
15789: PPUSH
15790: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15794: LD_VAR 0 1
15798: PUSH
15799: LD_INT 1
15801: ARRAY
15802: PPUSH
15803: LD_VAR 0 1
15807: PUSH
15808: LD_INT 2
15810: ARRAY
15811: PPUSH
15812: CALL_OW 429
// end ; end ;
15816: LD_VAR 0 1
15820: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15821: LD_EXP 30
15825: IFFALSE 15833
15827: PUSH
15828: LD_EXP 52
15832: AND
15833: IFFALSE 15845
15835: GO 15837
15837: DISABLE
// YouLost (  ) ;
15838: LD_STRING 
15840: PPUSH
15841: CALL_OW 104
15845: END
// every 0 0$1 trigger StreamModeActive and sFog do
15846: LD_EXP 30
15850: IFFALSE 15858
15852: PUSH
15853: LD_EXP 51
15857: AND
15858: IFFALSE 15872
15860: GO 15862
15862: DISABLE
// FogOff ( your_side ) ;
15863: LD_OWVAR 2
15867: PPUSH
15868: CALL_OW 344
15872: END
// every 0 0$1 trigger StreamModeActive and sSun do
15873: LD_EXP 30
15877: IFFALSE 15885
15879: PUSH
15880: LD_EXP 53
15884: AND
15885: IFFALSE 15913
15887: GO 15889
15889: DISABLE
// begin solar_recharge_percent := 0 ;
15890: LD_ADDR_OWVAR 79
15894: PUSH
15895: LD_INT 0
15897: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15898: LD_INT 10500
15900: PPUSH
15901: CALL_OW 67
// solar_recharge_percent := 100 ;
15905: LD_ADDR_OWVAR 79
15909: PUSH
15910: LD_INT 100
15912: ST_TO_ADDR
// end ;
15913: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15914: LD_EXP 30
15918: IFFALSE 15926
15920: PUSH
15921: LD_EXP 54
15925: AND
15926: IFFALSE 16165
15928: GO 15930
15930: DISABLE
15931: LD_INT 0
15933: PPUSH
15934: PPUSH
15935: PPUSH
// begin tmp := [ ] ;
15936: LD_ADDR_VAR 0 3
15940: PUSH
15941: EMPTY
15942: ST_TO_ADDR
// for i := 1 to 6 do
15943: LD_ADDR_VAR 0 1
15947: PUSH
15948: DOUBLE
15949: LD_INT 1
15951: DEC
15952: ST_TO_ADDR
15953: LD_INT 6
15955: PUSH
15956: FOR_TO
15957: IFFALSE 16062
// begin uc_nation := nation_nature ;
15959: LD_ADDR_OWVAR 21
15963: PUSH
15964: LD_INT 0
15966: ST_TO_ADDR
// uc_side := 0 ;
15967: LD_ADDR_OWVAR 20
15971: PUSH
15972: LD_INT 0
15974: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15975: LD_ADDR_OWVAR 29
15979: PUSH
15980: LD_INT 12
15982: PUSH
15983: LD_INT 12
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: ST_TO_ADDR
// hc_agressivity := 20 ;
15990: LD_ADDR_OWVAR 35
15994: PUSH
15995: LD_INT 20
15997: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15998: LD_ADDR_OWVAR 28
16002: PUSH
16003: LD_INT 17
16005: ST_TO_ADDR
// hc_gallery :=  ;
16006: LD_ADDR_OWVAR 33
16010: PUSH
16011: LD_STRING 
16013: ST_TO_ADDR
// hc_name :=  ;
16014: LD_ADDR_OWVAR 26
16018: PUSH
16019: LD_STRING 
16021: ST_TO_ADDR
// un := CreateHuman ;
16022: LD_ADDR_VAR 0 2
16026: PUSH
16027: CALL_OW 44
16031: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16032: LD_VAR 0 2
16036: PPUSH
16037: LD_INT 1
16039: PPUSH
16040: CALL_OW 51
// tmp := tmp ^ un ;
16044: LD_ADDR_VAR 0 3
16048: PUSH
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 2
16058: ADD
16059: ST_TO_ADDR
// end ;
16060: GO 15956
16062: POP
16063: POP
// repeat wait ( 0 0$1 ) ;
16064: LD_INT 35
16066: PPUSH
16067: CALL_OW 67
// for un in tmp do
16071: LD_ADDR_VAR 0 2
16075: PUSH
16076: LD_VAR 0 3
16080: PUSH
16081: FOR_IN
16082: IFFALSE 16156
// begin if IsDead ( un ) then
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL_OW 301
16093: IFFALSE 16113
// begin tmp := tmp diff un ;
16095: LD_ADDR_VAR 0 3
16099: PUSH
16100: LD_VAR 0 3
16104: PUSH
16105: LD_VAR 0 2
16109: DIFF
16110: ST_TO_ADDR
// continue ;
16111: GO 16081
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16113: LD_VAR 0 2
16117: PPUSH
16118: LD_INT 3
16120: PUSH
16121: LD_INT 22
16123: PUSH
16124: LD_INT 0
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL_OW 69
16139: PPUSH
16140: LD_VAR 0 2
16144: PPUSH
16145: CALL_OW 74
16149: PPUSH
16150: CALL_OW 115
// end ;
16154: GO 16081
16156: POP
16157: POP
// until not tmp ;
16158: LD_VAR 0 3
16162: NOT
16163: IFFALSE 16064
// end ;
16165: PPOPN 3
16167: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16168: LD_EXP 30
16172: IFFALSE 16180
16174: PUSH
16175: LD_EXP 55
16179: AND
16180: IFFALSE 16234
16182: GO 16184
16184: DISABLE
// begin ToLua ( displayTroll(); ) ;
16185: LD_STRING displayTroll();
16187: PPUSH
16188: CALL_OW 559
// wait ( 3 3$00 ) ;
16192: LD_INT 6300
16194: PPUSH
16195: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16199: LD_STRING hideTroll();
16201: PPUSH
16202: CALL_OW 559
// wait ( 1 1$00 ) ;
16206: LD_INT 2100
16208: PPUSH
16209: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16213: LD_STRING displayTroll();
16215: PPUSH
16216: CALL_OW 559
// wait ( 1 1$00 ) ;
16220: LD_INT 2100
16222: PPUSH
16223: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16227: LD_STRING hideTroll();
16229: PPUSH
16230: CALL_OW 559
// end ;
16234: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16235: LD_EXP 30
16239: IFFALSE 16247
16241: PUSH
16242: LD_EXP 56
16246: AND
16247: IFFALSE 16310
16249: GO 16251
16251: DISABLE
16252: LD_INT 0
16254: PPUSH
// begin p := 0 ;
16255: LD_ADDR_VAR 0 1
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// repeat game_speed := 1 ;
16263: LD_ADDR_OWVAR 65
16267: PUSH
16268: LD_INT 1
16270: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16271: LD_INT 35
16273: PPUSH
16274: CALL_OW 67
// p := p + 1 ;
16278: LD_ADDR_VAR 0 1
16282: PUSH
16283: LD_VAR 0 1
16287: PUSH
16288: LD_INT 1
16290: PLUS
16291: ST_TO_ADDR
// until p >= 60 ;
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 60
16299: GREATEREQUAL
16300: IFFALSE 16263
// game_speed := 4 ;
16302: LD_ADDR_OWVAR 65
16306: PUSH
16307: LD_INT 4
16309: ST_TO_ADDR
// end ;
16310: PPOPN 1
16312: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16313: LD_EXP 30
16317: IFFALSE 16325
16319: PUSH
16320: LD_EXP 57
16324: AND
16325: IFFALSE 16471
16327: GO 16329
16329: DISABLE
16330: LD_INT 0
16332: PPUSH
16333: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16334: LD_ADDR_VAR 0 1
16338: PUSH
16339: LD_INT 22
16341: PUSH
16342: LD_OWVAR 2
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 2
16353: PUSH
16354: LD_INT 30
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 30
16366: PUSH
16367: LD_INT 1
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: LIST
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PPUSH
16383: CALL_OW 69
16387: ST_TO_ADDR
// if not depot then
16388: LD_VAR 0 1
16392: NOT
16393: IFFALSE 16397
// exit ;
16395: GO 16471
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16397: LD_ADDR_VAR 0 2
16401: PUSH
16402: LD_VAR 0 1
16406: PUSH
16407: LD_INT 1
16409: PPUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 12
16419: ARRAY
16420: PPUSH
16421: CALL_OW 274
16425: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16426: LD_VAR 0 2
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: LD_INT 0
16436: PPUSH
16437: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16441: LD_VAR 0 2
16445: PPUSH
16446: LD_INT 2
16448: PPUSH
16449: LD_INT 0
16451: PPUSH
16452: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16456: LD_VAR 0 2
16460: PPUSH
16461: LD_INT 3
16463: PPUSH
16464: LD_INT 0
16466: PPUSH
16467: CALL_OW 277
// end ;
16471: PPOPN 2
16473: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16474: LD_EXP 30
16478: IFFALSE 16486
16480: PUSH
16481: LD_EXP 58
16485: AND
16486: IFFALSE 16583
16488: GO 16490
16490: DISABLE
16491: LD_INT 0
16493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16494: LD_ADDR_VAR 0 1
16498: PUSH
16499: LD_INT 22
16501: PUSH
16502: LD_OWVAR 2
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 21
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: LD_INT 23
16526: PUSH
16527: LD_INT 0
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: LIST
16542: PPUSH
16543: CALL_OW 69
16547: ST_TO_ADDR
// if not tmp then
16548: LD_VAR 0 1
16552: NOT
16553: IFFALSE 16557
// exit ;
16555: GO 16583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16557: LD_VAR 0 1
16561: PUSH
16562: LD_INT 1
16564: PPUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PPUSH
16576: LD_INT 200
16578: PPUSH
16579: CALL_OW 234
// end ;
16583: PPOPN 1
16585: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16586: LD_EXP 30
16590: IFFALSE 16598
16592: PUSH
16593: LD_EXP 59
16597: AND
16598: IFFALSE 16677
16600: GO 16602
16602: DISABLE
16603: LD_INT 0
16605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16606: LD_ADDR_VAR 0 1
16610: PUSH
16611: LD_INT 22
16613: PUSH
16614: LD_OWVAR 2
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 21
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PPUSH
16637: CALL_OW 69
16641: ST_TO_ADDR
// if not tmp then
16642: LD_VAR 0 1
16646: NOT
16647: IFFALSE 16651
// exit ;
16649: GO 16677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16651: LD_VAR 0 1
16655: PUSH
16656: LD_INT 1
16658: PPUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 12
16668: ARRAY
16669: PPUSH
16670: LD_INT 60
16672: PPUSH
16673: CALL_OW 234
// end ;
16677: PPOPN 1
16679: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16680: LD_EXP 30
16684: IFFALSE 16692
16686: PUSH
16687: LD_EXP 60
16691: AND
16692: IFFALSE 16791
16694: GO 16696
16696: DISABLE
16697: LD_INT 0
16699: PPUSH
16700: PPUSH
// begin enable ;
16701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16702: LD_ADDR_VAR 0 1
16706: PUSH
16707: LD_INT 22
16709: PUSH
16710: LD_OWVAR 2
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 61
16721: PUSH
16722: EMPTY
16723: LIST
16724: PUSH
16725: LD_INT 33
16727: PUSH
16728: LD_INT 2
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: PPUSH
16740: CALL_OW 69
16744: ST_TO_ADDR
// if not tmp then
16745: LD_VAR 0 1
16749: NOT
16750: IFFALSE 16754
// exit ;
16752: GO 16791
// for i in tmp do
16754: LD_ADDR_VAR 0 2
16758: PUSH
16759: LD_VAR 0 1
16763: PUSH
16764: FOR_IN
16765: IFFALSE 16789
// if IsControledBy ( i ) then
16767: LD_VAR 0 2
16771: PPUSH
16772: CALL_OW 312
16776: IFFALSE 16787
// ComUnlink ( i ) ;
16778: LD_VAR 0 2
16782: PPUSH
16783: CALL_OW 136
16787: GO 16764
16789: POP
16790: POP
// end ;
16791: PPOPN 2
16793: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16794: LD_EXP 30
16798: IFFALSE 16806
16800: PUSH
16801: LD_EXP 61
16805: AND
16806: IFFALSE 16946
16808: GO 16810
16810: DISABLE
16811: LD_INT 0
16813: PPUSH
16814: PPUSH
// begin ToLua ( displayPowell(); ) ;
16815: LD_STRING displayPowell();
16817: PPUSH
16818: CALL_OW 559
// uc_side := 0 ;
16822: LD_ADDR_OWVAR 20
16826: PUSH
16827: LD_INT 0
16829: ST_TO_ADDR
// uc_nation := 2 ;
16830: LD_ADDR_OWVAR 21
16834: PUSH
16835: LD_INT 2
16837: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16838: LD_ADDR_OWVAR 37
16842: PUSH
16843: LD_INT 14
16845: ST_TO_ADDR
// vc_engine := engine_siberite ;
16846: LD_ADDR_OWVAR 39
16850: PUSH
16851: LD_INT 3
16853: ST_TO_ADDR
// vc_control := control_apeman ;
16854: LD_ADDR_OWVAR 38
16858: PUSH
16859: LD_INT 5
16861: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16862: LD_ADDR_OWVAR 40
16866: PUSH
16867: LD_INT 29
16869: ST_TO_ADDR
// un := CreateVehicle ;
16870: LD_ADDR_VAR 0 2
16874: PUSH
16875: CALL_OW 45
16879: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16880: LD_VAR 0 2
16884: PPUSH
16885: LD_INT 1
16887: PPUSH
16888: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16892: LD_INT 35
16894: PPUSH
16895: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16899: LD_VAR 0 2
16903: PPUSH
16904: LD_INT 22
16906: PUSH
16907: LD_OWVAR 2
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PPUSH
16916: CALL_OW 69
16920: PPUSH
16921: LD_VAR 0 2
16925: PPUSH
16926: CALL_OW 74
16930: PPUSH
16931: CALL_OW 115
// until IsDead ( un ) ;
16935: LD_VAR 0 2
16939: PPUSH
16940: CALL_OW 301
16944: IFFALSE 16892
// end ;
16946: PPOPN 2
16948: END
// every 0 0$1 trigger StreamModeActive and sStu do
16949: LD_EXP 30
16953: IFFALSE 16961
16955: PUSH
16956: LD_EXP 69
16960: AND
16961: IFFALSE 16977
16963: GO 16965
16965: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16966: LD_STRING displayStucuk();
16968: PPUSH
16969: CALL_OW 559
// ResetFog ;
16973: CALL_OW 335
// end ;
16977: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16978: LD_EXP 30
16982: IFFALSE 16990
16984: PUSH
16985: LD_EXP 62
16989: AND
16990: IFFALSE 17131
16992: GO 16994
16994: DISABLE
16995: LD_INT 0
16997: PPUSH
16998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16999: LD_ADDR_VAR 0 2
17003: PUSH
17004: LD_INT 22
17006: PUSH
17007: LD_OWVAR 2
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 21
17018: PUSH
17019: LD_INT 1
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PPUSH
17030: CALL_OW 69
17034: ST_TO_ADDR
// if not tmp then
17035: LD_VAR 0 2
17039: NOT
17040: IFFALSE 17044
// exit ;
17042: GO 17131
// un := tmp [ rand ( 1 , tmp ) ] ;
17044: LD_ADDR_VAR 0 1
17048: PUSH
17049: LD_VAR 0 2
17053: PUSH
17054: LD_INT 1
17056: PPUSH
17057: LD_VAR 0 2
17061: PPUSH
17062: CALL_OW 12
17066: ARRAY
17067: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17068: LD_VAR 0 1
17072: PPUSH
17073: LD_INT 0
17075: PPUSH
17076: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17080: LD_VAR 0 1
17084: PPUSH
17085: LD_OWVAR 3
17089: PUSH
17090: LD_VAR 0 1
17094: DIFF
17095: PPUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 74
17105: PPUSH
17106: CALL_OW 115
// wait ( 0 0$20 ) ;
17110: LD_INT 700
17112: PPUSH
17113: CALL_OW 67
// SetSide ( un , your_side ) ;
17117: LD_VAR 0 1
17121: PPUSH
17122: LD_OWVAR 2
17126: PPUSH
17127: CALL_OW 235
// end ;
17131: PPOPN 2
17133: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17134: LD_EXP 30
17138: IFFALSE 17146
17140: PUSH
17141: LD_EXP 63
17145: AND
17146: IFFALSE 17252
17148: GO 17150
17150: DISABLE
17151: LD_INT 0
17153: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17154: LD_ADDR_VAR 0 1
17158: PUSH
17159: LD_INT 22
17161: PUSH
17162: LD_OWVAR 2
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 2
17173: PUSH
17174: LD_INT 30
17176: PUSH
17177: LD_INT 0
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 30
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: ST_TO_ADDR
// if not depot then
17208: LD_VAR 0 1
17212: NOT
17213: IFFALSE 17217
// exit ;
17215: GO 17252
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17217: LD_VAR 0 1
17221: PUSH
17222: LD_INT 1
17224: ARRAY
17225: PPUSH
17226: CALL_OW 250
17230: PPUSH
17231: LD_VAR 0 1
17235: PUSH
17236: LD_INT 1
17238: ARRAY
17239: PPUSH
17240: CALL_OW 251
17244: PPUSH
17245: LD_INT 70
17247: PPUSH
17248: CALL_OW 495
// end ;
17252: PPOPN 1
17254: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17255: LD_EXP 30
17259: IFFALSE 17267
17261: PUSH
17262: LD_EXP 64
17266: AND
17267: IFFALSE 17478
17269: GO 17271
17271: DISABLE
17272: LD_INT 0
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
17278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17279: LD_ADDR_VAR 0 5
17283: PUSH
17284: LD_INT 22
17286: PUSH
17287: LD_OWVAR 2
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 21
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 69
17314: ST_TO_ADDR
// if not tmp then
17315: LD_VAR 0 5
17319: NOT
17320: IFFALSE 17324
// exit ;
17322: GO 17478
// for i in tmp do
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: LD_VAR 0 5
17333: PUSH
17334: FOR_IN
17335: IFFALSE 17476
// begin d := rand ( 0 , 5 ) ;
17337: LD_ADDR_VAR 0 4
17341: PUSH
17342: LD_INT 0
17344: PPUSH
17345: LD_INT 5
17347: PPUSH
17348: CALL_OW 12
17352: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: LD_VAR 0 1
17362: PPUSH
17363: CALL_OW 250
17367: PPUSH
17368: LD_VAR 0 4
17372: PPUSH
17373: LD_INT 3
17375: PPUSH
17376: LD_INT 12
17378: PPUSH
17379: CALL_OW 12
17383: PPUSH
17384: CALL_OW 272
17388: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17389: LD_ADDR_VAR 0 3
17393: PUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 251
17403: PPUSH
17404: LD_VAR 0 4
17408: PPUSH
17409: LD_INT 3
17411: PPUSH
17412: LD_INT 12
17414: PPUSH
17415: CALL_OW 12
17419: PPUSH
17420: CALL_OW 273
17424: ST_TO_ADDR
// if ValidHex ( x , y ) then
17425: LD_VAR 0 2
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: CALL_OW 488
17439: IFFALSE 17474
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17441: LD_VAR 0 1
17445: PPUSH
17446: LD_VAR 0 2
17450: PPUSH
17451: LD_VAR 0 3
17455: PPUSH
17456: LD_INT 3
17458: PPUSH
17459: LD_INT 6
17461: PPUSH
17462: CALL_OW 12
17466: PPUSH
17467: LD_INT 1
17469: PPUSH
17470: CALL_OW 483
// end ;
17474: GO 17334
17476: POP
17477: POP
// end ;
17478: PPOPN 5
17480: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17481: LD_EXP 30
17485: IFFALSE 17493
17487: PUSH
17488: LD_EXP 65
17492: AND
17493: IFFALSE 17587
17495: GO 17497
17497: DISABLE
17498: LD_INT 0
17500: PPUSH
17501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17502: LD_ADDR_VAR 0 2
17506: PUSH
17507: LD_INT 22
17509: PUSH
17510: LD_OWVAR 2
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 32
17521: PUSH
17522: LD_INT 1
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 21
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 69
17548: ST_TO_ADDR
// if not tmp then
17549: LD_VAR 0 2
17553: NOT
17554: IFFALSE 17558
// exit ;
17556: GO 17587
// for i in tmp do
17558: LD_ADDR_VAR 0 1
17562: PUSH
17563: LD_VAR 0 2
17567: PUSH
17568: FOR_IN
17569: IFFALSE 17585
// SetFuel ( i , 0 ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_INT 0
17578: PPUSH
17579: CALL_OW 240
17583: GO 17568
17585: POP
17586: POP
// end ;
17587: PPOPN 2
17589: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17590: LD_EXP 30
17594: IFFALSE 17602
17596: PUSH
17597: LD_EXP 66
17601: AND
17602: IFFALSE 17668
17604: GO 17606
17606: DISABLE
17607: LD_INT 0
17609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: LD_INT 22
17617: PUSH
17618: LD_OWVAR 2
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 30
17629: PUSH
17630: LD_INT 29
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: ST_TO_ADDR
// if not tmp then
17646: LD_VAR 0 1
17650: NOT
17651: IFFALSE 17655
// exit ;
17653: GO 17668
// DestroyUnit ( tmp [ 1 ] ) ;
17655: LD_VAR 0 1
17659: PUSH
17660: LD_INT 1
17662: ARRAY
17663: PPUSH
17664: CALL_OW 65
// end ;
17668: PPOPN 1
17670: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17671: LD_EXP 30
17675: IFFALSE 17683
17677: PUSH
17678: LD_EXP 68
17682: AND
17683: IFFALSE 17812
17685: GO 17687
17687: DISABLE
17688: LD_INT 0
17690: PPUSH
// begin uc_side := 0 ;
17691: LD_ADDR_OWVAR 20
17695: PUSH
17696: LD_INT 0
17698: ST_TO_ADDR
// uc_nation := nation_arabian ;
17699: LD_ADDR_OWVAR 21
17703: PUSH
17704: LD_INT 2
17706: ST_TO_ADDR
// hc_gallery :=  ;
17707: LD_ADDR_OWVAR 33
17711: PUSH
17712: LD_STRING 
17714: ST_TO_ADDR
// hc_name :=  ;
17715: LD_ADDR_OWVAR 26
17719: PUSH
17720: LD_STRING 
17722: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17723: LD_INT 1
17725: PPUSH
17726: LD_INT 11
17728: PPUSH
17729: LD_INT 10
17731: PPUSH
17732: CALL_OW 380
// un := CreateHuman ;
17736: LD_ADDR_VAR 0 1
17740: PUSH
17741: CALL_OW 44
17745: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17746: LD_VAR 0 1
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17758: LD_INT 35
17760: PPUSH
17761: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17765: LD_VAR 0 1
17769: PPUSH
17770: LD_INT 22
17772: PUSH
17773: LD_OWVAR 2
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PPUSH
17782: CALL_OW 69
17786: PPUSH
17787: LD_VAR 0 1
17791: PPUSH
17792: CALL_OW 74
17796: PPUSH
17797: CALL_OW 115
// until IsDead ( un ) ;
17801: LD_VAR 0 1
17805: PPUSH
17806: CALL_OW 301
17810: IFFALSE 17758
// end ;
17812: PPOPN 1
17814: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17815: LD_EXP 30
17819: IFFALSE 17827
17821: PUSH
17822: LD_EXP 70
17826: AND
17827: IFFALSE 17839
17829: GO 17831
17831: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17832: LD_STRING earthquake(getX(game), 0, 32)
17834: PPUSH
17835: CALL_OW 559
17839: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17840: LD_EXP 30
17844: IFFALSE 17852
17846: PUSH
17847: LD_EXP 71
17851: AND
17852: IFFALSE 17943
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
// begin enable ;
17860: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17861: LD_ADDR_VAR 0 1
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_OWVAR 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 33
17890: PUSH
17891: LD_INT 3
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: ST_TO_ADDR
// if not tmp then
17908: LD_VAR 0 1
17912: NOT
17913: IFFALSE 17917
// exit ;
17915: GO 17943
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17917: LD_VAR 0 1
17921: PUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_VAR 0 1
17929: PPUSH
17930: CALL_OW 12
17934: ARRAY
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: CALL_OW 234
// end ;
17943: PPOPN 1
17945: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17946: LD_EXP 30
17950: IFFALSE 17958
17952: PUSH
17953: LD_EXP 72
17957: AND
17958: IFFALSE 18099
17960: GO 17962
17962: DISABLE
17963: LD_INT 0
17965: PPUSH
17966: PPUSH
17967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17968: LD_ADDR_VAR 0 3
17972: PUSH
17973: LD_INT 22
17975: PUSH
17976: LD_OWVAR 2
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 25
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 69
18003: ST_TO_ADDR
// if not tmp then
18004: LD_VAR 0 3
18008: NOT
18009: IFFALSE 18013
// exit ;
18011: GO 18099
// un := tmp [ rand ( 1 , tmp ) ] ;
18013: LD_ADDR_VAR 0 2
18017: PUSH
18018: LD_VAR 0 3
18022: PUSH
18023: LD_INT 1
18025: PPUSH
18026: LD_VAR 0 3
18030: PPUSH
18031: CALL_OW 12
18035: ARRAY
18036: ST_TO_ADDR
// if Crawls ( un ) then
18037: LD_VAR 0 2
18041: PPUSH
18042: CALL_OW 318
18046: IFFALSE 18057
// ComWalk ( un ) ;
18048: LD_VAR 0 2
18052: PPUSH
18053: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18057: LD_VAR 0 2
18061: PPUSH
18062: LD_INT 9
18064: PPUSH
18065: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18069: LD_INT 28
18071: PPUSH
18072: LD_OWVAR 2
18076: PPUSH
18077: LD_INT 2
18079: PPUSH
18080: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18084: LD_INT 29
18086: PPUSH
18087: LD_OWVAR 2
18091: PPUSH
18092: LD_INT 2
18094: PPUSH
18095: CALL_OW 322
// end ;
18099: PPOPN 3
18101: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18102: LD_EXP 30
18106: IFFALSE 18114
18108: PUSH
18109: LD_EXP 73
18113: AND
18114: IFFALSE 18225
18116: GO 18118
18118: DISABLE
18119: LD_INT 0
18121: PPUSH
18122: PPUSH
18123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18124: LD_ADDR_VAR 0 3
18128: PUSH
18129: LD_INT 22
18131: PUSH
18132: LD_OWVAR 2
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 25
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PPUSH
18155: CALL_OW 69
18159: ST_TO_ADDR
// if not tmp then
18160: LD_VAR 0 3
18164: NOT
18165: IFFALSE 18169
// exit ;
18167: GO 18225
// un := tmp [ rand ( 1 , tmp ) ] ;
18169: LD_ADDR_VAR 0 2
18173: PUSH
18174: LD_VAR 0 3
18178: PUSH
18179: LD_INT 1
18181: PPUSH
18182: LD_VAR 0 3
18186: PPUSH
18187: CALL_OW 12
18191: ARRAY
18192: ST_TO_ADDR
// if Crawls ( un ) then
18193: LD_VAR 0 2
18197: PPUSH
18198: CALL_OW 318
18202: IFFALSE 18213
// ComWalk ( un ) ;
18204: LD_VAR 0 2
18208: PPUSH
18209: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18213: LD_VAR 0 2
18217: PPUSH
18218: LD_INT 8
18220: PPUSH
18221: CALL_OW 336
// end ;
18225: PPOPN 3
18227: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18228: LD_EXP 30
18232: IFFALSE 18240
18234: PUSH
18235: LD_EXP 74
18239: AND
18240: IFFALSE 18384
18242: GO 18244
18244: DISABLE
18245: LD_INT 0
18247: PPUSH
18248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18249: LD_ADDR_VAR 0 2
18253: PUSH
18254: LD_INT 22
18256: PUSH
18257: LD_OWVAR 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 21
18268: PUSH
18269: LD_INT 2
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: LD_INT 34
18281: PUSH
18282: LD_INT 12
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 34
18291: PUSH
18292: LD_INT 51
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 34
18301: PUSH
18302: LD_INT 32
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 69
18324: ST_TO_ADDR
// if not tmp then
18325: LD_VAR 0 2
18329: NOT
18330: IFFALSE 18334
// exit ;
18332: GO 18384
// for i in tmp do
18334: LD_ADDR_VAR 0 1
18338: PUSH
18339: LD_VAR 0 2
18343: PUSH
18344: FOR_IN
18345: IFFALSE 18382
// if GetCargo ( i , mat_artifact ) = 0 then
18347: LD_VAR 0 1
18351: PPUSH
18352: LD_INT 4
18354: PPUSH
18355: CALL_OW 289
18359: PUSH
18360: LD_INT 0
18362: EQUAL
18363: IFFALSE 18380
// SetCargo ( i , mat_siberit , 100 ) ;
18365: LD_VAR 0 1
18369: PPUSH
18370: LD_INT 3
18372: PPUSH
18373: LD_INT 100
18375: PPUSH
18376: CALL_OW 290
18380: GO 18344
18382: POP
18383: POP
// end ;
18384: PPOPN 2
18386: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18387: LD_EXP 30
18391: IFFALSE 18399
18393: PUSH
18394: LD_EXP 75
18398: AND
18399: IFFALSE 18582
18401: GO 18403
18403: DISABLE
18404: LD_INT 0
18406: PPUSH
18407: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18408: LD_ADDR_VAR 0 2
18412: PUSH
18413: LD_INT 22
18415: PUSH
18416: LD_OWVAR 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PPUSH
18425: CALL_OW 69
18429: ST_TO_ADDR
// if not tmp then
18430: LD_VAR 0 2
18434: NOT
18435: IFFALSE 18439
// exit ;
18437: GO 18582
// for i := 1 to 2 do
18439: LD_ADDR_VAR 0 1
18443: PUSH
18444: DOUBLE
18445: LD_INT 1
18447: DEC
18448: ST_TO_ADDR
18449: LD_INT 2
18451: PUSH
18452: FOR_TO
18453: IFFALSE 18580
// begin uc_side := your_side ;
18455: LD_ADDR_OWVAR 20
18459: PUSH
18460: LD_OWVAR 2
18464: ST_TO_ADDR
// uc_nation := nation_american ;
18465: LD_ADDR_OWVAR 21
18469: PUSH
18470: LD_INT 1
18472: ST_TO_ADDR
// vc_chassis := us_morphling ;
18473: LD_ADDR_OWVAR 37
18477: PUSH
18478: LD_INT 5
18480: ST_TO_ADDR
// vc_engine := engine_siberite ;
18481: LD_ADDR_OWVAR 39
18485: PUSH
18486: LD_INT 3
18488: ST_TO_ADDR
// vc_control := control_computer ;
18489: LD_ADDR_OWVAR 38
18493: PUSH
18494: LD_INT 3
18496: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18497: LD_ADDR_OWVAR 40
18501: PUSH
18502: LD_INT 10
18504: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18505: LD_VAR 0 2
18509: PUSH
18510: LD_INT 1
18512: ARRAY
18513: PPUSH
18514: CALL_OW 310
18518: NOT
18519: IFFALSE 18566
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18521: CALL_OW 45
18525: PPUSH
18526: LD_VAR 0 2
18530: PUSH
18531: LD_INT 1
18533: ARRAY
18534: PPUSH
18535: CALL_OW 250
18539: PPUSH
18540: LD_VAR 0 2
18544: PUSH
18545: LD_INT 1
18547: ARRAY
18548: PPUSH
18549: CALL_OW 251
18553: PPUSH
18554: LD_INT 12
18556: PPUSH
18557: LD_INT 1
18559: PPUSH
18560: CALL_OW 50
18564: GO 18578
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18566: CALL_OW 45
18570: PPUSH
18571: LD_INT 1
18573: PPUSH
18574: CALL_OW 51
// end ;
18578: GO 18452
18580: POP
18581: POP
// end ;
18582: PPOPN 2
18584: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18585: LD_EXP 30
18589: IFFALSE 18597
18591: PUSH
18592: LD_EXP 76
18596: AND
18597: IFFALSE 18819
18599: GO 18601
18601: DISABLE
18602: LD_INT 0
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18610: LD_ADDR_VAR 0 6
18614: PUSH
18615: LD_INT 22
18617: PUSH
18618: LD_OWVAR 2
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 21
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 3
18639: PUSH
18640: LD_INT 23
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: LIST
18658: PPUSH
18659: CALL_OW 69
18663: ST_TO_ADDR
// if not tmp then
18664: LD_VAR 0 6
18668: NOT
18669: IFFALSE 18673
// exit ;
18671: GO 18819
// s1 := rand ( 1 , 4 ) ;
18673: LD_ADDR_VAR 0 2
18677: PUSH
18678: LD_INT 1
18680: PPUSH
18681: LD_INT 4
18683: PPUSH
18684: CALL_OW 12
18688: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18689: LD_ADDR_VAR 0 4
18693: PUSH
18694: LD_VAR 0 6
18698: PUSH
18699: LD_INT 1
18701: ARRAY
18702: PPUSH
18703: LD_VAR 0 2
18707: PPUSH
18708: CALL_OW 259
18712: ST_TO_ADDR
// if s1 = 1 then
18713: LD_VAR 0 2
18717: PUSH
18718: LD_INT 1
18720: EQUAL
18721: IFFALSE 18741
// s2 := rand ( 2 , 4 ) else
18723: LD_ADDR_VAR 0 3
18727: PUSH
18728: LD_INT 2
18730: PPUSH
18731: LD_INT 4
18733: PPUSH
18734: CALL_OW 12
18738: ST_TO_ADDR
18739: GO 18749
// s2 := 1 ;
18741: LD_ADDR_VAR 0 3
18745: PUSH
18746: LD_INT 1
18748: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18749: LD_ADDR_VAR 0 5
18753: PUSH
18754: LD_VAR 0 6
18758: PUSH
18759: LD_INT 1
18761: ARRAY
18762: PPUSH
18763: LD_VAR 0 3
18767: PPUSH
18768: CALL_OW 259
18772: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18773: LD_VAR 0 6
18777: PUSH
18778: LD_INT 1
18780: ARRAY
18781: PPUSH
18782: LD_VAR 0 2
18786: PPUSH
18787: LD_VAR 0 5
18791: PPUSH
18792: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18796: LD_VAR 0 6
18800: PUSH
18801: LD_INT 1
18803: ARRAY
18804: PPUSH
18805: LD_VAR 0 3
18809: PPUSH
18810: LD_VAR 0 4
18814: PPUSH
18815: CALL_OW 237
// end ;
18819: PPOPN 6
18821: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18822: LD_EXP 30
18826: IFFALSE 18834
18828: PUSH
18829: LD_EXP 77
18833: AND
18834: IFFALSE 18913
18836: GO 18838
18838: DISABLE
18839: LD_INT 0
18841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18842: LD_ADDR_VAR 0 1
18846: PUSH
18847: LD_INT 22
18849: PUSH
18850: LD_OWVAR 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: LD_INT 3
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 69
18877: ST_TO_ADDR
// if not tmp then
18878: LD_VAR 0 1
18882: NOT
18883: IFFALSE 18887
// exit ;
18885: GO 18913
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18887: LD_VAR 0 1
18891: PUSH
18892: LD_INT 1
18894: PPUSH
18895: LD_VAR 0 1
18899: PPUSH
18900: CALL_OW 12
18904: ARRAY
18905: PPUSH
18906: LD_INT 1
18908: PPUSH
18909: CALL_OW 234
// end ;
18913: PPOPN 1
18915: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18916: LD_EXP 30
18920: IFFALSE 18928
18922: PUSH
18923: LD_EXP 78
18927: AND
18928: IFFALSE 19040
18930: GO 18932
18932: DISABLE
18933: LD_INT 0
18935: PPUSH
18936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 22
18944: PUSH
18945: LD_OWVAR 2
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: LD_INT 30
18959: PUSH
18960: LD_INT 27
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 30
18969: PUSH
18970: LD_INT 26
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 30
18979: PUSH
18980: LD_INT 28
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PPUSH
18997: CALL_OW 69
19001: ST_TO_ADDR
// if not tmp then
19002: LD_VAR 0 2
19006: NOT
19007: IFFALSE 19011
// exit ;
19009: GO 19040
// for i in tmp do
19011: LD_ADDR_VAR 0 1
19015: PUSH
19016: LD_VAR 0 2
19020: PUSH
19021: FOR_IN
19022: IFFALSE 19038
// SetLives ( i , 1 ) ;
19024: LD_VAR 0 1
19028: PPUSH
19029: LD_INT 1
19031: PPUSH
19032: CALL_OW 234
19036: GO 19021
19038: POP
19039: POP
// end ;
19040: PPOPN 2
19042: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19043: LD_EXP 30
19047: IFFALSE 19055
19049: PUSH
19050: LD_EXP 79
19054: AND
19055: IFFALSE 19342
19057: GO 19059
19059: DISABLE
19060: LD_INT 0
19062: PPUSH
19063: PPUSH
19064: PPUSH
// begin i := rand ( 1 , 7 ) ;
19065: LD_ADDR_VAR 0 1
19069: PUSH
19070: LD_INT 1
19072: PPUSH
19073: LD_INT 7
19075: PPUSH
19076: CALL_OW 12
19080: ST_TO_ADDR
// case i of 1 :
19081: LD_VAR 0 1
19085: PUSH
19086: LD_INT 1
19088: DOUBLE
19089: EQUAL
19090: IFTRUE 19094
19092: GO 19104
19094: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19095: LD_STRING earthquake(getX(game), 0, 32)
19097: PPUSH
19098: CALL_OW 559
19102: GO 19342
19104: LD_INT 2
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19126
19112: POP
// begin ToLua ( displayStucuk(); ) ;
19113: LD_STRING displayStucuk();
19115: PPUSH
19116: CALL_OW 559
// ResetFog ;
19120: CALL_OW 335
// end ; 3 :
19124: GO 19342
19126: LD_INT 3
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19238
19134: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19135: LD_ADDR_VAR 0 2
19139: PUSH
19140: LD_INT 22
19142: PUSH
19143: LD_OWVAR 2
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 25
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PPUSH
19166: CALL_OW 69
19170: ST_TO_ADDR
// if not tmp then
19171: LD_VAR 0 2
19175: NOT
19176: IFFALSE 19180
// exit ;
19178: GO 19342
// un := tmp [ rand ( 1 , tmp ) ] ;
19180: LD_ADDR_VAR 0 3
19184: PUSH
19185: LD_VAR 0 2
19189: PUSH
19190: LD_INT 1
19192: PPUSH
19193: LD_VAR 0 2
19197: PPUSH
19198: CALL_OW 12
19202: ARRAY
19203: ST_TO_ADDR
// if Crawls ( un ) then
19204: LD_VAR 0 3
19208: PPUSH
19209: CALL_OW 318
19213: IFFALSE 19224
// ComWalk ( un ) ;
19215: LD_VAR 0 3
19219: PPUSH
19220: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19224: LD_VAR 0 3
19228: PPUSH
19229: LD_INT 8
19231: PPUSH
19232: CALL_OW 336
// end ; 4 :
19236: GO 19342
19238: LD_INT 4
19240: DOUBLE
19241: EQUAL
19242: IFTRUE 19246
19244: GO 19320
19246: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19247: LD_ADDR_VAR 0 2
19251: PUSH
19252: LD_INT 22
19254: PUSH
19255: LD_OWVAR 2
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 30
19266: PUSH
19267: LD_INT 29
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PPUSH
19278: CALL_OW 69
19282: ST_TO_ADDR
// if not tmp then
19283: LD_VAR 0 2
19287: NOT
19288: IFFALSE 19292
// exit ;
19290: GO 19342
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19292: LD_VAR 0 2
19296: PUSH
19297: LD_INT 1
19299: ARRAY
19300: PPUSH
19301: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19305: LD_VAR 0 2
19309: PUSH
19310: LD_INT 1
19312: ARRAY
19313: PPUSH
19314: CALL_OW 65
// end ; 5 .. 7 :
19318: GO 19342
19320: LD_INT 5
19322: DOUBLE
19323: GREATEREQUAL
19324: IFFALSE 19332
19326: LD_INT 7
19328: DOUBLE
19329: LESSEQUAL
19330: IFTRUE 19334
19332: GO 19341
19334: POP
// StreamSibBomb ; end ;
19335: CALL 15523 0 0
19339: GO 19342
19341: POP
// end ;
19342: PPOPN 3
19344: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19345: LD_EXP 30
19349: IFFALSE 19357
19351: PUSH
19352: LD_EXP 80
19356: AND
19357: IFFALSE 19513
19359: GO 19361
19361: DISABLE
19362: LD_INT 0
19364: PPUSH
19365: PPUSH
19366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: LD_INT 81
19374: PUSH
19375: LD_OWVAR 2
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: LD_INT 21
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 21
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: LIST
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PPUSH
19416: CALL_OW 69
19420: ST_TO_ADDR
// if not tmp then
19421: LD_VAR 0 2
19425: NOT
19426: IFFALSE 19430
// exit ;
19428: GO 19513
// p := 0 ;
19430: LD_ADDR_VAR 0 3
19434: PUSH
19435: LD_INT 0
19437: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19438: LD_INT 35
19440: PPUSH
19441: CALL_OW 67
// p := p + 1 ;
19445: LD_ADDR_VAR 0 3
19449: PUSH
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 1
19457: PLUS
19458: ST_TO_ADDR
// for i in tmp do
19459: LD_ADDR_VAR 0 1
19463: PUSH
19464: LD_VAR 0 2
19468: PUSH
19469: FOR_IN
19470: IFFALSE 19501
// if GetLives ( i ) < 1000 then
19472: LD_VAR 0 1
19476: PPUSH
19477: CALL_OW 256
19481: PUSH
19482: LD_INT 1000
19484: LESS
19485: IFFALSE 19499
// SetLives ( i , 1000 ) ;
19487: LD_VAR 0 1
19491: PPUSH
19492: LD_INT 1000
19494: PPUSH
19495: CALL_OW 234
19499: GO 19469
19501: POP
19502: POP
// until p > 20 ;
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 20
19510: GREATER
19511: IFFALSE 19438
// end ;
19513: PPOPN 3
19515: END
// every 0 0$1 trigger StreamModeActive and sTime do
19516: LD_EXP 30
19520: IFFALSE 19528
19522: PUSH
19523: LD_EXP 81
19527: AND
19528: IFFALSE 19563
19530: GO 19532
19532: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19533: LD_INT 28
19535: PPUSH
19536: LD_OWVAR 2
19540: PPUSH
19541: LD_INT 2
19543: PPUSH
19544: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19548: LD_INT 30
19550: PPUSH
19551: LD_OWVAR 2
19555: PPUSH
19556: LD_INT 2
19558: PPUSH
19559: CALL_OW 322
// end ;
19563: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19564: LD_EXP 30
19568: IFFALSE 19576
19570: PUSH
19571: LD_EXP 82
19575: AND
19576: IFFALSE 19697
19578: GO 19580
19580: DISABLE
19581: LD_INT 0
19583: PPUSH
19584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: LD_INT 22
19592: PUSH
19593: LD_OWVAR 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 3
19614: PUSH
19615: LD_INT 23
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if not tmp then
19639: LD_VAR 0 2
19643: NOT
19644: IFFALSE 19648
// exit ;
19646: GO 19697
// for i in tmp do
19648: LD_ADDR_VAR 0 1
19652: PUSH
19653: LD_VAR 0 2
19657: PUSH
19658: FOR_IN
19659: IFFALSE 19695
// begin if Crawls ( i ) then
19661: LD_VAR 0 1
19665: PPUSH
19666: CALL_OW 318
19670: IFFALSE 19681
// ComWalk ( i ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: CALL_OW 138
// SetClass ( i , 2 ) ;
19681: LD_VAR 0 1
19685: PPUSH
19686: LD_INT 2
19688: PPUSH
19689: CALL_OW 336
// end ;
19693: GO 19658
19695: POP
19696: POP
// end ;
19697: PPOPN 2
19699: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19700: LD_EXP 30
19704: IFFALSE 19712
19706: PUSH
19707: LD_EXP 83
19711: AND
19712: IFFALSE 20002
19714: GO 19716
19716: DISABLE
19717: LD_INT 0
19719: PPUSH
19720: PPUSH
19721: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19722: LD_OWVAR 2
19726: PPUSH
19727: LD_INT 9
19729: PPUSH
19730: LD_INT 1
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19740: LD_INT 9
19742: PPUSH
19743: LD_OWVAR 2
19747: PPUSH
19748: CALL_OW 343
// uc_side := 9 ;
19752: LD_ADDR_OWVAR 20
19756: PUSH
19757: LD_INT 9
19759: ST_TO_ADDR
// uc_nation := 2 ;
19760: LD_ADDR_OWVAR 21
19764: PUSH
19765: LD_INT 2
19767: ST_TO_ADDR
// hc_name := Dark Warrior ;
19768: LD_ADDR_OWVAR 26
19772: PUSH
19773: LD_STRING Dark Warrior
19775: ST_TO_ADDR
// hc_gallery :=  ;
19776: LD_ADDR_OWVAR 33
19780: PUSH
19781: LD_STRING 
19783: ST_TO_ADDR
// hc_noskilllimit := true ;
19784: LD_ADDR_OWVAR 76
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19792: LD_ADDR_OWVAR 31
19796: PUSH
19797: LD_INT 30
19799: PUSH
19800: LD_INT 30
19802: PUSH
19803: LD_INT 30
19805: PUSH
19806: LD_INT 30
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: ST_TO_ADDR
// un := CreateHuman ;
19815: LD_ADDR_VAR 0 3
19819: PUSH
19820: CALL_OW 44
19824: ST_TO_ADDR
// hc_noskilllimit := false ;
19825: LD_ADDR_OWVAR 76
19829: PUSH
19830: LD_INT 0
19832: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19833: LD_VAR 0 3
19837: PPUSH
19838: LD_INT 1
19840: PPUSH
19841: CALL_OW 51
// ToLua ( playRanger() ) ;
19845: LD_STRING playRanger()
19847: PPUSH
19848: CALL_OW 559
// p := 0 ;
19852: LD_ADDR_VAR 0 2
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19860: LD_INT 35
19862: PPUSH
19863: CALL_OW 67
// p := p + 1 ;
19867: LD_ADDR_VAR 0 2
19871: PUSH
19872: LD_VAR 0 2
19876: PUSH
19877: LD_INT 1
19879: PLUS
19880: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19881: LD_VAR 0 3
19885: PPUSH
19886: CALL_OW 256
19890: PUSH
19891: LD_INT 1000
19893: LESS
19894: IFFALSE 19908
// SetLives ( un , 1000 ) ;
19896: LD_VAR 0 3
19900: PPUSH
19901: LD_INT 1000
19903: PPUSH
19904: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19908: LD_VAR 0 3
19912: PPUSH
19913: LD_INT 81
19915: PUSH
19916: LD_OWVAR 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 91
19927: PUSH
19928: LD_VAR 0 3
19932: PUSH
19933: LD_INT 30
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PPUSH
19945: CALL_OW 69
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: CALL_OW 74
19959: PPUSH
19960: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19964: LD_VAR 0 2
19968: PUSH
19969: LD_INT 80
19971: GREATER
19972: IFTRUE 19985
19974: PUSH
19975: LD_VAR 0 3
19979: PPUSH
19980: CALL_OW 301
19984: OR
19985: IFFALSE 19860
// if un then
19987: LD_VAR 0 3
19991: IFFALSE 20002
// RemoveUnit ( un ) ;
19993: LD_VAR 0 3
19997: PPUSH
19998: CALL_OW 64
// end ;
20002: PPOPN 3
20004: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20005: LD_EXP 84
20009: IFFALSE 20125
20011: GO 20013
20013: DISABLE
20014: LD_INT 0
20016: PPUSH
20017: PPUSH
20018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20019: LD_ADDR_VAR 0 2
20023: PUSH
20024: LD_INT 81
20026: PUSH
20027: LD_OWVAR 2
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 21
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PPUSH
20050: CALL_OW 69
20054: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20055: LD_STRING playComputer()
20057: PPUSH
20058: CALL_OW 559
// if not tmp then
20062: LD_VAR 0 2
20066: NOT
20067: IFFALSE 20071
// exit ;
20069: GO 20125
// for i in tmp do
20071: LD_ADDR_VAR 0 1
20075: PUSH
20076: LD_VAR 0 2
20080: PUSH
20081: FOR_IN
20082: IFFALSE 20123
// for j := 1 to 4 do
20084: LD_ADDR_VAR 0 3
20088: PUSH
20089: DOUBLE
20090: LD_INT 1
20092: DEC
20093: ST_TO_ADDR
20094: LD_INT 4
20096: PUSH
20097: FOR_TO
20098: IFFALSE 20119
// SetSkill ( i , j , 10 ) ;
20100: LD_VAR 0 1
20104: PPUSH
20105: LD_VAR 0 3
20109: PPUSH
20110: LD_INT 10
20112: PPUSH
20113: CALL_OW 237
20117: GO 20097
20119: POP
20120: POP
20121: GO 20081
20123: POP
20124: POP
// end ;
20125: PPOPN 3
20127: END
// every 0 0$1 trigger s30 do var i , tmp ;
20128: LD_EXP 85
20132: IFFALSE 20201
20134: GO 20136
20136: DISABLE
20137: LD_INT 0
20139: PPUSH
20140: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: LD_INT 22
20148: PUSH
20149: LD_OWVAR 2
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: ST_TO_ADDR
// if not tmp then
20163: LD_VAR 0 2
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 20201
// for i in tmp do
20172: LD_ADDR_VAR 0 1
20176: PUSH
20177: LD_VAR 0 2
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20199
// SetLives ( i , 300 ) ;
20185: LD_VAR 0 1
20189: PPUSH
20190: LD_INT 300
20192: PPUSH
20193: CALL_OW 234
20197: GO 20182
20199: POP
20200: POP
// end ;
20201: PPOPN 2
20203: END
// every 0 0$1 trigger s60 do var i , tmp ;
20204: LD_EXP 86
20208: IFFALSE 20277
20210: GO 20212
20212: DISABLE
20213: LD_INT 0
20215: PPUSH
20216: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20217: LD_ADDR_VAR 0 2
20221: PUSH
20222: LD_INT 22
20224: PUSH
20225: LD_OWVAR 2
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PPUSH
20234: CALL_OW 69
20238: ST_TO_ADDR
// if not tmp then
20239: LD_VAR 0 2
20243: NOT
20244: IFFALSE 20248
// exit ;
20246: GO 20277
// for i in tmp do
20248: LD_ADDR_VAR 0 1
20252: PUSH
20253: LD_VAR 0 2
20257: PUSH
20258: FOR_IN
20259: IFFALSE 20275
// SetLives ( i , 600 ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_INT 600
20268: PPUSH
20269: CALL_OW 234
20273: GO 20258
20275: POP
20276: POP
// end ;
20277: PPOPN 2
20279: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20280: LD_INT 0
20282: PPUSH
// case cmd of 301 :
20283: LD_VAR 0 1
20287: PUSH
20288: LD_INT 301
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20328
20296: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20297: LD_VAR 0 6
20301: PPUSH
20302: LD_VAR 0 7
20306: PPUSH
20307: LD_VAR 0 8
20311: PPUSH
20312: LD_VAR 0 4
20316: PPUSH
20317: LD_VAR 0 5
20321: PPUSH
20322: CALL 21541 0 5
20326: GO 20449
20328: LD_INT 302
20330: DOUBLE
20331: EQUAL
20332: IFTRUE 20336
20334: GO 20373
20336: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20337: LD_VAR 0 6
20341: PPUSH
20342: LD_VAR 0 7
20346: PPUSH
20347: LD_VAR 0 8
20351: PPUSH
20352: LD_VAR 0 9
20356: PPUSH
20357: LD_VAR 0 4
20361: PPUSH
20362: LD_VAR 0 5
20366: PPUSH
20367: CALL 21632 0 6
20371: GO 20449
20373: LD_INT 303
20375: DOUBLE
20376: EQUAL
20377: IFTRUE 20381
20379: GO 20418
20381: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20382: LD_VAR 0 6
20386: PPUSH
20387: LD_VAR 0 7
20391: PPUSH
20392: LD_VAR 0 8
20396: PPUSH
20397: LD_VAR 0 9
20401: PPUSH
20402: LD_VAR 0 4
20406: PPUSH
20407: LD_VAR 0 5
20411: PPUSH
20412: CALL 20454 0 6
20416: GO 20449
20418: LD_INT 304
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20448
20426: POP
// hHackTeleport ( unit , x , y ) ; end ;
20427: LD_VAR 0 2
20431: PPUSH
20432: LD_VAR 0 4
20436: PPUSH
20437: LD_VAR 0 5
20441: PPUSH
20442: CALL 22225 0 3
20446: GO 20449
20448: POP
// end ;
20449: LD_VAR 0 12
20453: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20454: LD_INT 0
20456: PPUSH
20457: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20458: LD_VAR 0 1
20462: PUSH
20463: LD_INT 1
20465: LESS
20466: IFTRUE 20478
20468: PUSH
20469: LD_VAR 0 1
20473: PUSH
20474: LD_INT 3
20476: GREATER
20477: OR
20478: IFTRUE 20496
20480: PUSH
20481: LD_VAR 0 5
20485: PPUSH
20486: LD_VAR 0 6
20490: PPUSH
20491: CALL_OW 428
20495: OR
20496: IFFALSE 20500
// exit ;
20498: GO 21228
// uc_side := your_side ;
20500: LD_ADDR_OWVAR 20
20504: PUSH
20505: LD_OWVAR 2
20509: ST_TO_ADDR
// uc_nation := nation ;
20510: LD_ADDR_OWVAR 21
20514: PUSH
20515: LD_VAR 0 1
20519: ST_TO_ADDR
// bc_level = 1 ;
20520: LD_ADDR_OWVAR 43
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// case btype of 1 :
20528: LD_VAR 0 2
20532: PUSH
20533: LD_INT 1
20535: DOUBLE
20536: EQUAL
20537: IFTRUE 20541
20539: GO 20552
20541: POP
// bc_type := b_depot ; 2 :
20542: LD_ADDR_OWVAR 42
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
20550: GO 21172
20552: LD_INT 2
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20571
20560: POP
// bc_type := b_warehouse ; 3 :
20561: LD_ADDR_OWVAR 42
20565: PUSH
20566: LD_INT 1
20568: ST_TO_ADDR
20569: GO 21172
20571: LD_INT 3
20573: DOUBLE
20574: EQUAL
20575: IFTRUE 20579
20577: GO 20590
20579: POP
// bc_type := b_lab ; 4 .. 9 :
20580: LD_ADDR_OWVAR 42
20584: PUSH
20585: LD_INT 6
20587: ST_TO_ADDR
20588: GO 21172
20590: LD_INT 4
20592: DOUBLE
20593: GREATEREQUAL
20594: IFFALSE 20602
20596: LD_INT 9
20598: DOUBLE
20599: LESSEQUAL
20600: IFTRUE 20604
20602: GO 20664
20604: POP
// begin bc_type := b_lab_half ;
20605: LD_ADDR_OWVAR 42
20609: PUSH
20610: LD_INT 7
20612: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20613: LD_ADDR_OWVAR 44
20617: PUSH
20618: LD_INT 10
20620: PUSH
20621: LD_INT 11
20623: PUSH
20624: LD_INT 12
20626: PUSH
20627: LD_INT 15
20629: PUSH
20630: LD_INT 14
20632: PUSH
20633: LD_INT 13
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: LD_VAR 0 2
20648: PUSH
20649: LD_INT 3
20651: MINUS
20652: ARRAY
20653: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20654: LD_ADDR_OWVAR 45
20658: PUSH
20659: LD_INT 9
20661: ST_TO_ADDR
// end ; 10 .. 13 :
20662: GO 21172
20664: LD_INT 10
20666: DOUBLE
20667: GREATEREQUAL
20668: IFFALSE 20676
20670: LD_INT 13
20672: DOUBLE
20673: LESSEQUAL
20674: IFTRUE 20678
20676: GO 20755
20678: POP
// begin bc_type := b_lab_full ;
20679: LD_ADDR_OWVAR 42
20683: PUSH
20684: LD_INT 8
20686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20687: LD_ADDR_OWVAR 44
20691: PUSH
20692: LD_INT 10
20694: PUSH
20695: LD_INT 12
20697: PUSH
20698: LD_INT 14
20700: PUSH
20701: LD_INT 13
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: PUSH
20710: LD_VAR 0 2
20714: PUSH
20715: LD_INT 9
20717: MINUS
20718: ARRAY
20719: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20720: LD_ADDR_OWVAR 45
20724: PUSH
20725: LD_INT 11
20727: PUSH
20728: LD_INT 15
20730: PUSH
20731: LD_INT 12
20733: PUSH
20734: LD_INT 15
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: LD_VAR 0 2
20747: PUSH
20748: LD_INT 9
20750: MINUS
20751: ARRAY
20752: ST_TO_ADDR
// end ; 14 :
20753: GO 21172
20755: LD_INT 14
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20774
20763: POP
// bc_type := b_workshop ; 15 :
20764: LD_ADDR_OWVAR 42
20768: PUSH
20769: LD_INT 2
20771: ST_TO_ADDR
20772: GO 21172
20774: LD_INT 15
20776: DOUBLE
20777: EQUAL
20778: IFTRUE 20782
20780: GO 20793
20782: POP
// bc_type := b_factory ; 16 :
20783: LD_ADDR_OWVAR 42
20787: PUSH
20788: LD_INT 3
20790: ST_TO_ADDR
20791: GO 21172
20793: LD_INT 16
20795: DOUBLE
20796: EQUAL
20797: IFTRUE 20801
20799: GO 20812
20801: POP
// bc_type := b_ext_gun ; 17 :
20802: LD_ADDR_OWVAR 42
20806: PUSH
20807: LD_INT 17
20809: ST_TO_ADDR
20810: GO 21172
20812: LD_INT 17
20814: DOUBLE
20815: EQUAL
20816: IFTRUE 20820
20818: GO 20848
20820: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20821: LD_ADDR_OWVAR 42
20825: PUSH
20826: LD_INT 19
20828: PUSH
20829: LD_INT 23
20831: PUSH
20832: LD_INT 19
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: PUSH
20840: LD_VAR 0 1
20844: ARRAY
20845: ST_TO_ADDR
20846: GO 21172
20848: LD_INT 18
20850: DOUBLE
20851: EQUAL
20852: IFTRUE 20856
20854: GO 20867
20856: POP
// bc_type := b_ext_radar ; 19 :
20857: LD_ADDR_OWVAR 42
20861: PUSH
20862: LD_INT 20
20864: ST_TO_ADDR
20865: GO 21172
20867: LD_INT 19
20869: DOUBLE
20870: EQUAL
20871: IFTRUE 20875
20873: GO 20886
20875: POP
// bc_type := b_ext_radio ; 20 :
20876: LD_ADDR_OWVAR 42
20880: PUSH
20881: LD_INT 22
20883: ST_TO_ADDR
20884: GO 21172
20886: LD_INT 20
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 20905
20894: POP
// bc_type := b_ext_siberium ; 21 :
20895: LD_ADDR_OWVAR 42
20899: PUSH
20900: LD_INT 21
20902: ST_TO_ADDR
20903: GO 21172
20905: LD_INT 21
20907: DOUBLE
20908: EQUAL
20909: IFTRUE 20913
20911: GO 20924
20913: POP
// bc_type := b_ext_computer ; 22 :
20914: LD_ADDR_OWVAR 42
20918: PUSH
20919: LD_INT 24
20921: ST_TO_ADDR
20922: GO 21172
20924: LD_INT 22
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 20943
20932: POP
// bc_type := b_ext_track ; 23 :
20933: LD_ADDR_OWVAR 42
20937: PUSH
20938: LD_INT 16
20940: ST_TO_ADDR
20941: GO 21172
20943: LD_INT 23
20945: DOUBLE
20946: EQUAL
20947: IFTRUE 20951
20949: GO 20962
20951: POP
// bc_type := b_ext_laser ; 24 :
20952: LD_ADDR_OWVAR 42
20956: PUSH
20957: LD_INT 25
20959: ST_TO_ADDR
20960: GO 21172
20962: LD_INT 24
20964: DOUBLE
20965: EQUAL
20966: IFTRUE 20970
20968: GO 20981
20970: POP
// bc_type := b_control_tower ; 25 :
20971: LD_ADDR_OWVAR 42
20975: PUSH
20976: LD_INT 36
20978: ST_TO_ADDR
20979: GO 21172
20981: LD_INT 25
20983: DOUBLE
20984: EQUAL
20985: IFTRUE 20989
20987: GO 21000
20989: POP
// bc_type := b_breastwork ; 26 :
20990: LD_ADDR_OWVAR 42
20994: PUSH
20995: LD_INT 31
20997: ST_TO_ADDR
20998: GO 21172
21000: LD_INT 26
21002: DOUBLE
21003: EQUAL
21004: IFTRUE 21008
21006: GO 21019
21008: POP
// bc_type := b_bunker ; 27 :
21009: LD_ADDR_OWVAR 42
21013: PUSH
21014: LD_INT 32
21016: ST_TO_ADDR
21017: GO 21172
21019: LD_INT 27
21021: DOUBLE
21022: EQUAL
21023: IFTRUE 21027
21025: GO 21038
21027: POP
// bc_type := b_turret ; 28 :
21028: LD_ADDR_OWVAR 42
21032: PUSH
21033: LD_INT 33
21035: ST_TO_ADDR
21036: GO 21172
21038: LD_INT 28
21040: DOUBLE
21041: EQUAL
21042: IFTRUE 21046
21044: GO 21057
21046: POP
// bc_type := b_armoury ; 29 :
21047: LD_ADDR_OWVAR 42
21051: PUSH
21052: LD_INT 4
21054: ST_TO_ADDR
21055: GO 21172
21057: LD_INT 29
21059: DOUBLE
21060: EQUAL
21061: IFTRUE 21065
21063: GO 21076
21065: POP
// bc_type := b_barracks ; 30 :
21066: LD_ADDR_OWVAR 42
21070: PUSH
21071: LD_INT 5
21073: ST_TO_ADDR
21074: GO 21172
21076: LD_INT 30
21078: DOUBLE
21079: EQUAL
21080: IFTRUE 21084
21082: GO 21095
21084: POP
// bc_type := b_solar_power ; 31 :
21085: LD_ADDR_OWVAR 42
21089: PUSH
21090: LD_INT 27
21092: ST_TO_ADDR
21093: GO 21172
21095: LD_INT 31
21097: DOUBLE
21098: EQUAL
21099: IFTRUE 21103
21101: GO 21114
21103: POP
// bc_type := b_oil_power ; 32 :
21104: LD_ADDR_OWVAR 42
21108: PUSH
21109: LD_INT 26
21111: ST_TO_ADDR
21112: GO 21172
21114: LD_INT 32
21116: DOUBLE
21117: EQUAL
21118: IFTRUE 21122
21120: GO 21133
21122: POP
// bc_type := b_siberite_power ; 33 :
21123: LD_ADDR_OWVAR 42
21127: PUSH
21128: LD_INT 28
21130: ST_TO_ADDR
21131: GO 21172
21133: LD_INT 33
21135: DOUBLE
21136: EQUAL
21137: IFTRUE 21141
21139: GO 21152
21141: POP
// bc_type := b_oil_mine ; 34 :
21142: LD_ADDR_OWVAR 42
21146: PUSH
21147: LD_INT 29
21149: ST_TO_ADDR
21150: GO 21172
21152: LD_INT 34
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21171
21160: POP
// bc_type := b_siberite_mine ; end ;
21161: LD_ADDR_OWVAR 42
21165: PUSH
21166: LD_INT 30
21168: ST_TO_ADDR
21169: GO 21172
21171: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21172: LD_ADDR_VAR 0 8
21176: PUSH
21177: LD_VAR 0 5
21181: PPUSH
21182: LD_VAR 0 6
21186: PPUSH
21187: LD_VAR 0 3
21191: PPUSH
21192: CALL_OW 47
21196: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21197: LD_OWVAR 42
21201: PUSH
21202: LD_INT 32
21204: PUSH
21205: LD_INT 33
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: IN
21212: IFFALSE 21228
// PlaceWeaponTurret ( b , weapon ) ;
21214: LD_VAR 0 8
21218: PPUSH
21219: LD_VAR 0 4
21223: PPUSH
21224: CALL_OW 431
// end ;
21228: LD_VAR 0 7
21232: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21233: LD_INT 0
21235: PPUSH
21236: PPUSH
21237: PPUSH
21238: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21239: LD_ADDR_VAR 0 4
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: LD_INT 30
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 30
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PPUSH
21288: CALL_OW 69
21292: ST_TO_ADDR
// if not tmp then
21293: LD_VAR 0 4
21297: NOT
21298: IFFALSE 21302
// exit ;
21300: GO 21361
// for i in tmp do
21302: LD_ADDR_VAR 0 2
21306: PUSH
21307: LD_VAR 0 4
21311: PUSH
21312: FOR_IN
21313: IFFALSE 21359
// for j = 1 to 3 do
21315: LD_ADDR_VAR 0 3
21319: PUSH
21320: DOUBLE
21321: LD_INT 1
21323: DEC
21324: ST_TO_ADDR
21325: LD_INT 3
21327: PUSH
21328: FOR_TO
21329: IFFALSE 21355
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21331: LD_VAR 0 2
21335: PPUSH
21336: CALL_OW 274
21340: PPUSH
21341: LD_VAR 0 3
21345: PPUSH
21346: LD_INT 99999
21348: PPUSH
21349: CALL_OW 277
21353: GO 21328
21355: POP
21356: POP
21357: GO 21312
21359: POP
21360: POP
// end ;
21361: LD_VAR 0 1
21365: RET
// export function hHackSetLevel10 ; var i , j ; begin
21366: LD_INT 0
21368: PPUSH
21369: PPUSH
21370: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21371: LD_ADDR_VAR 0 2
21375: PUSH
21376: LD_INT 21
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PPUSH
21386: CALL_OW 69
21390: PUSH
21391: FOR_IN
21392: IFFALSE 21444
// if IsSelected ( i ) then
21394: LD_VAR 0 2
21398: PPUSH
21399: CALL_OW 306
21403: IFFALSE 21442
// begin for j := 1 to 4 do
21405: LD_ADDR_VAR 0 3
21409: PUSH
21410: DOUBLE
21411: LD_INT 1
21413: DEC
21414: ST_TO_ADDR
21415: LD_INT 4
21417: PUSH
21418: FOR_TO
21419: IFFALSE 21440
// SetSkill ( i , j , 10 ) ;
21421: LD_VAR 0 2
21425: PPUSH
21426: LD_VAR 0 3
21430: PPUSH
21431: LD_INT 10
21433: PPUSH
21434: CALL_OW 237
21438: GO 21418
21440: POP
21441: POP
// end ;
21442: GO 21391
21444: POP
21445: POP
// end ;
21446: LD_VAR 0 1
21450: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21451: LD_INT 0
21453: PPUSH
21454: PPUSH
21455: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21456: LD_ADDR_VAR 0 2
21460: PUSH
21461: LD_INT 22
21463: PUSH
21464: LD_OWVAR 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 21
21475: PUSH
21476: LD_INT 1
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PPUSH
21487: CALL_OW 69
21491: PUSH
21492: FOR_IN
21493: IFFALSE 21534
// begin for j := 1 to 4 do
21495: LD_ADDR_VAR 0 3
21499: PUSH
21500: DOUBLE
21501: LD_INT 1
21503: DEC
21504: ST_TO_ADDR
21505: LD_INT 4
21507: PUSH
21508: FOR_TO
21509: IFFALSE 21530
// SetSkill ( i , j , 10 ) ;
21511: LD_VAR 0 2
21515: PPUSH
21516: LD_VAR 0 3
21520: PPUSH
21521: LD_INT 10
21523: PPUSH
21524: CALL_OW 237
21528: GO 21508
21530: POP
21531: POP
// end ;
21532: GO 21492
21534: POP
21535: POP
// end ;
21536: LD_VAR 0 1
21540: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21541: LD_INT 0
21543: PPUSH
// uc_side := your_side ;
21544: LD_ADDR_OWVAR 20
21548: PUSH
21549: LD_OWVAR 2
21553: ST_TO_ADDR
// uc_nation := nation ;
21554: LD_ADDR_OWVAR 21
21558: PUSH
21559: LD_VAR 0 1
21563: ST_TO_ADDR
// InitHc ;
21564: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21568: LD_INT 0
21570: PPUSH
21571: LD_VAR 0 2
21575: PPUSH
21576: LD_VAR 0 3
21580: PPUSH
21581: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21585: LD_VAR 0 4
21589: PPUSH
21590: LD_VAR 0 5
21594: PPUSH
21595: CALL_OW 428
21599: PUSH
21600: LD_INT 0
21602: EQUAL
21603: IFFALSE 21627
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21605: CALL_OW 44
21609: PPUSH
21610: LD_VAR 0 4
21614: PPUSH
21615: LD_VAR 0 5
21619: PPUSH
21620: LD_INT 1
21622: PPUSH
21623: CALL_OW 48
// end ;
21627: LD_VAR 0 6
21631: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21632: LD_INT 0
21634: PPUSH
21635: PPUSH
// uc_side := your_side ;
21636: LD_ADDR_OWVAR 20
21640: PUSH
21641: LD_OWVAR 2
21645: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21646: LD_VAR 0 1
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: LD_INT 3
21659: PUSH
21660: LD_INT 4
21662: PUSH
21663: LD_INT 5
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: IN
21673: IFFALSE 21685
// uc_nation := nation_american else
21675: LD_ADDR_OWVAR 21
21679: PUSH
21680: LD_INT 1
21682: ST_TO_ADDR
21683: GO 21728
// if chassis in [ 11 , 12 , 13 , 14 ] then
21685: LD_VAR 0 1
21689: PUSH
21690: LD_INT 11
21692: PUSH
21693: LD_INT 12
21695: PUSH
21696: LD_INT 13
21698: PUSH
21699: LD_INT 14
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: IN
21708: IFFALSE 21720
// uc_nation := nation_arabian else
21710: LD_ADDR_OWVAR 21
21714: PUSH
21715: LD_INT 2
21717: ST_TO_ADDR
21718: GO 21728
// uc_nation := nation_russian ;
21720: LD_ADDR_OWVAR 21
21724: PUSH
21725: LD_INT 3
21727: ST_TO_ADDR
// vc_chassis := chassis ;
21728: LD_ADDR_OWVAR 37
21732: PUSH
21733: LD_VAR 0 1
21737: ST_TO_ADDR
// vc_engine := engine ;
21738: LD_ADDR_OWVAR 39
21742: PUSH
21743: LD_VAR 0 2
21747: ST_TO_ADDR
// vc_control := control ;
21748: LD_ADDR_OWVAR 38
21752: PUSH
21753: LD_VAR 0 3
21757: ST_TO_ADDR
// vc_weapon := weapon ;
21758: LD_ADDR_OWVAR 40
21762: PUSH
21763: LD_VAR 0 4
21767: ST_TO_ADDR
// un := CreateVehicle ;
21768: LD_ADDR_VAR 0 8
21772: PUSH
21773: CALL_OW 45
21777: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21778: LD_VAR 0 8
21782: PPUSH
21783: LD_INT 0
21785: PPUSH
21786: LD_INT 5
21788: PPUSH
21789: CALL_OW 12
21793: PPUSH
21794: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21798: LD_VAR 0 8
21802: PPUSH
21803: LD_VAR 0 5
21807: PPUSH
21808: LD_VAR 0 6
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 48
// end ;
21820: LD_VAR 0 7
21824: RET
// export hInvincible ; every 1 do
21825: GO 21827
21827: DISABLE
// hInvincible := [ ] ;
21828: LD_ADDR_EXP 87
21832: PUSH
21833: EMPTY
21834: ST_TO_ADDR
21835: END
// every 10 do var i ;
21836: GO 21838
21838: DISABLE
21839: LD_INT 0
21841: PPUSH
// begin enable ;
21842: ENABLE
// if not hInvincible then
21843: LD_EXP 87
21847: NOT
21848: IFFALSE 21852
// exit ;
21850: GO 21896
// for i in hInvincible do
21852: LD_ADDR_VAR 0 1
21856: PUSH
21857: LD_EXP 87
21861: PUSH
21862: FOR_IN
21863: IFFALSE 21894
// if GetLives ( i ) < 1000 then
21865: LD_VAR 0 1
21869: PPUSH
21870: CALL_OW 256
21874: PUSH
21875: LD_INT 1000
21877: LESS
21878: IFFALSE 21892
// SetLives ( i , 1000 ) ;
21880: LD_VAR 0 1
21884: PPUSH
21885: LD_INT 1000
21887: PPUSH
21888: CALL_OW 234
21892: GO 21862
21894: POP
21895: POP
// end ;
21896: PPOPN 1
21898: END
// export function hHackInvincible ; var i ; begin
21899: LD_INT 0
21901: PPUSH
21902: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21903: LD_ADDR_VAR 0 2
21907: PUSH
21908: LD_INT 2
21910: PUSH
21911: LD_INT 21
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 21
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: PPUSH
21936: CALL_OW 69
21940: PUSH
21941: FOR_IN
21942: IFFALSE 22003
// if IsSelected ( i ) then
21944: LD_VAR 0 2
21948: PPUSH
21949: CALL_OW 306
21953: IFFALSE 22001
// begin if i in hInvincible then
21955: LD_VAR 0 2
21959: PUSH
21960: LD_EXP 87
21964: IN
21965: IFFALSE 21985
// hInvincible := hInvincible diff i else
21967: LD_ADDR_EXP 87
21971: PUSH
21972: LD_EXP 87
21976: PUSH
21977: LD_VAR 0 2
21981: DIFF
21982: ST_TO_ADDR
21983: GO 22001
// hInvincible := hInvincible union i ;
21985: LD_ADDR_EXP 87
21989: PUSH
21990: LD_EXP 87
21994: PUSH
21995: LD_VAR 0 2
21999: UNION
22000: ST_TO_ADDR
// end ;
22001: GO 21941
22003: POP
22004: POP
// end ;
22005: LD_VAR 0 1
22009: RET
// export function hHackInvisible ; var i , j ; begin
22010: LD_INT 0
22012: PPUSH
22013: PPUSH
22014: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22015: LD_ADDR_VAR 0 2
22019: PUSH
22020: LD_INT 21
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 69
22034: PUSH
22035: FOR_IN
22036: IFFALSE 22060
// if IsSelected ( i ) then
22038: LD_VAR 0 2
22042: PPUSH
22043: CALL_OW 306
22047: IFFALSE 22058
// ComForceInvisible ( i ) ;
22049: LD_VAR 0 2
22053: PPUSH
22054: CALL_OW 496
22058: GO 22035
22060: POP
22061: POP
// end ;
22062: LD_VAR 0 1
22066: RET
// export function hHackChangeYourSide ; begin
22067: LD_INT 0
22069: PPUSH
// if your_side = 8 then
22070: LD_OWVAR 2
22074: PUSH
22075: LD_INT 8
22077: EQUAL
22078: IFFALSE 22090
// your_side := 0 else
22080: LD_ADDR_OWVAR 2
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
22088: GO 22104
// your_side := your_side + 1 ;
22090: LD_ADDR_OWVAR 2
22094: PUSH
22095: LD_OWVAR 2
22099: PUSH
22100: LD_INT 1
22102: PLUS
22103: ST_TO_ADDR
// end ;
22104: LD_VAR 0 1
22108: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
22113: PPUSH
// for i in all_units do
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: LD_OWVAR 3
22123: PUSH
22124: FOR_IN
22125: IFFALSE 22203
// if IsSelected ( i ) then
22127: LD_VAR 0 2
22131: PPUSH
22132: CALL_OW 306
22136: IFFALSE 22201
// begin j := GetSide ( i ) ;
22138: LD_ADDR_VAR 0 3
22142: PUSH
22143: LD_VAR 0 2
22147: PPUSH
22148: CALL_OW 255
22152: ST_TO_ADDR
// if j = 8 then
22153: LD_VAR 0 3
22157: PUSH
22158: LD_INT 8
22160: EQUAL
22161: IFFALSE 22173
// j := 0 else
22163: LD_ADDR_VAR 0 3
22167: PUSH
22168: LD_INT 0
22170: ST_TO_ADDR
22171: GO 22187
// j := j + 1 ;
22173: LD_ADDR_VAR 0 3
22177: PUSH
22178: LD_VAR 0 3
22182: PUSH
22183: LD_INT 1
22185: PLUS
22186: ST_TO_ADDR
// SetSide ( i , j ) ;
22187: LD_VAR 0 2
22191: PPUSH
22192: LD_VAR 0 3
22196: PPUSH
22197: CALL_OW 235
// end ;
22201: GO 22124
22203: POP
22204: POP
// end ;
22205: LD_VAR 0 1
22209: RET
// export function hHackFog ; begin
22210: LD_INT 0
22212: PPUSH
// FogOff ( true ) ;
22213: LD_INT 1
22215: PPUSH
22216: CALL_OW 344
// end ;
22220: LD_VAR 0 1
22224: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22225: LD_INT 0
22227: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22228: LD_VAR 0 1
22232: PPUSH
22233: LD_VAR 0 2
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: LD_INT 1
22245: PPUSH
22246: LD_INT 1
22248: PPUSH
22249: CALL_OW 483
// CenterOnXY ( x , y ) ;
22253: LD_VAR 0 2
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: CALL_OW 84
// end ;
22267: LD_VAR 0 4
22271: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22272: LD_INT 0
22274: PPUSH
22275: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22276: LD_VAR 0 1
22280: NOT
22281: IFTRUE 22300
22283: PUSH
22284: LD_VAR 0 2
22288: PPUSH
22289: LD_VAR 0 3
22293: PPUSH
22294: CALL_OW 488
22298: NOT
22299: OR
22300: IFTRUE 22335
22302: PUSH
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 266
22312: PUSH
22313: LD_INT 3
22315: NONEQUAL
22316: IFFALSE 22334
22318: PUSH
22319: LD_VAR 0 1
22323: PPUSH
22324: CALL_OW 247
22328: PUSH
22329: LD_INT 1
22331: EQUAL
22332: NOT
22333: AND
22334: OR
22335: IFFALSE 22339
// exit ;
22337: GO 22621
// if GetType ( factory ) = unit_human then
22339: LD_VAR 0 1
22343: PPUSH
22344: CALL_OW 247
22348: PUSH
22349: LD_INT 1
22351: EQUAL
22352: IFFALSE 22369
// factory := IsInUnit ( factory ) ;
22354: LD_ADDR_VAR 0 1
22358: PUSH
22359: LD_VAR 0 1
22363: PPUSH
22364: CALL_OW 310
22368: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22369: LD_VAR 0 1
22373: PPUSH
22374: CALL_OW 266
22378: PUSH
22379: LD_INT 3
22381: NONEQUAL
22382: IFFALSE 22386
// exit ;
22384: GO 22621
// for i := 1 to Count ( factoryWaypoints ) do
22386: LD_ADDR_VAR 0 5
22390: PUSH
22391: DOUBLE
22392: LD_INT 1
22394: DEC
22395: ST_TO_ADDR
22396: LD_EXP 88
22400: PPUSH
22401: CALL 32425 0 1
22405: PUSH
22406: FOR_TO
22407: IFFALSE 22569
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22409: LD_VAR 0 2
22413: PPUSH
22414: LD_VAR 0 3
22418: PPUSH
22419: CALL_OW 428
22423: PUSH
22424: LD_EXP 88
22428: PUSH
22429: LD_VAR 0 5
22433: ARRAY
22434: PUSH
22435: LD_INT 2
22437: ARRAY
22438: EQUAL
22439: IFFALSE 22471
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22441: LD_ADDR_EXP 88
22445: PUSH
22446: LD_EXP 88
22450: PPUSH
22451: LD_VAR 0 5
22455: PPUSH
22456: CALL_OW 3
22460: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22461: CALL 22626 0 0
// exit ;
22465: POP
22466: POP
22467: GO 22621
// end else
22469: GO 22567
// if factory = factoryWaypoints [ i ] [ 2 ] then
22471: LD_VAR 0 1
22475: PUSH
22476: LD_EXP 88
22480: PUSH
22481: LD_VAR 0 5
22485: ARRAY
22486: PUSH
22487: LD_INT 2
22489: ARRAY
22490: EQUAL
22491: IFFALSE 22567
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22493: LD_ADDR_EXP 88
22497: PUSH
22498: LD_EXP 88
22502: PPUSH
22503: LD_VAR 0 5
22507: PPUSH
22508: CALL_OW 3
22512: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22513: LD_ADDR_EXP 88
22517: PUSH
22518: LD_EXP 88
22522: PPUSH
22523: LD_VAR 0 1
22527: PPUSH
22528: CALL_OW 255
22532: PUSH
22533: LD_VAR 0 1
22537: PUSH
22538: LD_VAR 0 2
22542: PUSH
22543: LD_VAR 0 3
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: PPUSH
22554: CALL 68401 0 2
22558: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22559: CALL 22626 0 0
// exit ;
22563: POP
22564: POP
22565: GO 22621
// end ; end ;
22567: GO 22406
22569: POP
22570: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22571: LD_ADDR_EXP 88
22575: PUSH
22576: LD_EXP 88
22580: PPUSH
22581: LD_VAR 0 1
22585: PPUSH
22586: CALL_OW 255
22590: PUSH
22591: LD_VAR 0 1
22595: PUSH
22596: LD_VAR 0 2
22600: PUSH
22601: LD_VAR 0 3
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PPUSH
22612: CALL 68401 0 2
22616: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22617: CALL 22626 0 0
// end ;
22621: LD_VAR 0 4
22625: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22626: LD_INT 0
22628: PPUSH
22629: PPUSH
22630: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22631: LD_STRING resetFactoryWaypoint();
22633: PPUSH
22634: CALL_OW 559
// if factoryWaypoints then
22638: LD_EXP 88
22642: IFFALSE 22763
// begin list := factoryWaypoints ;
22644: LD_ADDR_VAR 0 3
22648: PUSH
22649: LD_EXP 88
22653: ST_TO_ADDR
// for i := 1 to list do
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: DOUBLE
22660: LD_INT 1
22662: DEC
22663: ST_TO_ADDR
22664: LD_VAR 0 3
22668: PUSH
22669: FOR_TO
22670: IFFALSE 22761
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22672: LD_STRING setFactoryWaypointXY(
22674: PUSH
22675: LD_VAR 0 3
22679: PUSH
22680: LD_VAR 0 2
22684: ARRAY
22685: PUSH
22686: LD_INT 1
22688: ARRAY
22689: STR
22690: PUSH
22691: LD_STRING ,
22693: STR
22694: PUSH
22695: LD_VAR 0 3
22699: PUSH
22700: LD_VAR 0 2
22704: ARRAY
22705: PUSH
22706: LD_INT 2
22708: ARRAY
22709: STR
22710: PUSH
22711: LD_STRING ,
22713: STR
22714: PUSH
22715: LD_VAR 0 3
22719: PUSH
22720: LD_VAR 0 2
22724: ARRAY
22725: PUSH
22726: LD_INT 3
22728: ARRAY
22729: STR
22730: PUSH
22731: LD_STRING ,
22733: STR
22734: PUSH
22735: LD_VAR 0 3
22739: PUSH
22740: LD_VAR 0 2
22744: ARRAY
22745: PUSH
22746: LD_INT 4
22748: ARRAY
22749: STR
22750: PUSH
22751: LD_STRING )
22753: STR
22754: PPUSH
22755: CALL_OW 559
22759: GO 22669
22761: POP
22762: POP
// end ; end ;
22763: LD_VAR 0 1
22767: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22768: LD_INT 0
22770: PPUSH
// if HexInfo ( x , y ) = warehouse then
22771: LD_VAR 0 2
22775: PPUSH
22776: LD_VAR 0 3
22780: PPUSH
22781: CALL_OW 428
22785: PUSH
22786: LD_VAR 0 1
22790: EQUAL
22791: IFFALSE 22818
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22793: LD_ADDR_EXP 90
22797: PUSH
22798: LD_EXP 90
22802: PPUSH
22803: LD_VAR 0 1
22807: PPUSH
22808: LD_INT 0
22810: PPUSH
22811: CALL_OW 1
22815: ST_TO_ADDR
22816: GO 22869
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22818: LD_ADDR_EXP 90
22822: PUSH
22823: LD_EXP 90
22827: PPUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: LD_VAR 0 1
22837: PPUSH
22838: CALL_OW 255
22842: PUSH
22843: LD_VAR 0 1
22847: PUSH
22848: LD_VAR 0 2
22852: PUSH
22853: LD_VAR 0 3
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL_OW 1
22868: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22869: CALL 22878 0 0
// end ;
22873: LD_VAR 0 4
22877: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22878: LD_INT 0
22880: PPUSH
22881: PPUSH
22882: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22883: LD_STRING resetWarehouseGatheringPoints();
22885: PPUSH
22886: CALL_OW 559
// if warehouseGatheringPoints then
22890: LD_EXP 90
22894: IFFALSE 23020
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22896: LD_ADDR_VAR 0 3
22900: PUSH
22901: LD_EXP 90
22905: PPUSH
22906: CALL 72335 0 1
22910: ST_TO_ADDR
// for i := 1 to list do
22911: LD_ADDR_VAR 0 2
22915: PUSH
22916: DOUBLE
22917: LD_INT 1
22919: DEC
22920: ST_TO_ADDR
22921: LD_VAR 0 3
22925: PUSH
22926: FOR_TO
22927: IFFALSE 23018
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22929: LD_STRING setWarehouseGatheringPointXY(
22931: PUSH
22932: LD_VAR 0 3
22936: PUSH
22937: LD_VAR 0 2
22941: ARRAY
22942: PUSH
22943: LD_INT 1
22945: ARRAY
22946: STR
22947: PUSH
22948: LD_STRING ,
22950: STR
22951: PUSH
22952: LD_VAR 0 3
22956: PUSH
22957: LD_VAR 0 2
22961: ARRAY
22962: PUSH
22963: LD_INT 2
22965: ARRAY
22966: STR
22967: PUSH
22968: LD_STRING ,
22970: STR
22971: PUSH
22972: LD_VAR 0 3
22976: PUSH
22977: LD_VAR 0 2
22981: ARRAY
22982: PUSH
22983: LD_INT 3
22985: ARRAY
22986: STR
22987: PUSH
22988: LD_STRING ,
22990: STR
22991: PUSH
22992: LD_VAR 0 3
22996: PUSH
22997: LD_VAR 0 2
23001: ARRAY
23002: PUSH
23003: LD_INT 4
23005: ARRAY
23006: STR
23007: PUSH
23008: LD_STRING )
23010: STR
23011: PPUSH
23012: CALL_OW 559
23016: GO 22926
23018: POP
23019: POP
// end ; end ;
23020: LD_VAR 0 1
23024: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23025: LD_EXP 90
23029: IFFALSE 23724
23031: GO 23033
23033: DISABLE
23034: LD_INT 0
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
23040: PPUSH
23041: PPUSH
23042: PPUSH
23043: PPUSH
23044: PPUSH
// begin enable ;
23045: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_EXP 90
23055: PPUSH
23056: CALL 72335 0 1
23060: ST_TO_ADDR
// if not list then
23061: LD_VAR 0 3
23065: NOT
23066: IFFALSE 23070
// exit ;
23068: GO 23724
// for i := 1 to list do
23070: LD_ADDR_VAR 0 1
23074: PUSH
23075: DOUBLE
23076: LD_INT 1
23078: DEC
23079: ST_TO_ADDR
23080: LD_VAR 0 3
23084: PUSH
23085: FOR_TO
23086: IFFALSE 23722
// begin depot := list [ i ] [ 2 ] ;
23088: LD_ADDR_VAR 0 8
23092: PUSH
23093: LD_VAR 0 3
23097: PUSH
23098: LD_VAR 0 1
23102: ARRAY
23103: PUSH
23104: LD_INT 2
23106: ARRAY
23107: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23108: LD_ADDR_VAR 0 5
23112: PUSH
23113: LD_VAR 0 3
23117: PUSH
23118: LD_VAR 0 1
23122: ARRAY
23123: PUSH
23124: LD_INT 1
23126: ARRAY
23127: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23128: LD_VAR 0 8
23132: PPUSH
23133: CALL_OW 301
23137: IFTRUE 23156
23139: PUSH
23140: LD_VAR 0 5
23144: PUSH
23145: LD_VAR 0 8
23149: PPUSH
23150: CALL_OW 255
23154: NONEQUAL
23155: OR
23156: IFFALSE 23185
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23158: LD_ADDR_EXP 90
23162: PUSH
23163: LD_EXP 90
23167: PPUSH
23168: LD_VAR 0 8
23172: PPUSH
23173: LD_INT 0
23175: PPUSH
23176: CALL_OW 1
23180: ST_TO_ADDR
// exit ;
23181: POP
23182: POP
23183: GO 23724
// end ; x := list [ i ] [ 3 ] ;
23185: LD_ADDR_VAR 0 6
23189: PUSH
23190: LD_VAR 0 3
23194: PUSH
23195: LD_VAR 0 1
23199: ARRAY
23200: PUSH
23201: LD_INT 3
23203: ARRAY
23204: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23205: LD_ADDR_VAR 0 7
23209: PUSH
23210: LD_VAR 0 3
23214: PUSH
23215: LD_VAR 0 1
23219: ARRAY
23220: PUSH
23221: LD_INT 4
23223: ARRAY
23224: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23225: LD_ADDR_VAR 0 9
23229: PUSH
23230: LD_VAR 0 6
23234: PPUSH
23235: LD_VAR 0 7
23239: PPUSH
23240: LD_INT 16
23242: PPUSH
23243: CALL 70909 0 3
23247: ST_TO_ADDR
// if not cratesNearbyPoint then
23248: LD_VAR 0 9
23252: NOT
23253: IFFALSE 23259
// exit ;
23255: POP
23256: POP
23257: GO 23724
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23259: LD_ADDR_VAR 0 4
23263: PUSH
23264: LD_INT 22
23266: PUSH
23267: LD_VAR 0 5
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: LD_INT 60
23281: PUSH
23282: EMPTY
23283: LIST
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 91
23291: PUSH
23292: LD_VAR 0 8
23296: PUSH
23297: LD_INT 6
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: LD_INT 25
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 25
23320: PUSH
23321: LD_INT 16
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PPUSH
23339: CALL_OW 69
23343: PUSH
23344: LD_VAR 0 8
23348: PPUSH
23349: CALL_OW 313
23353: PPUSH
23354: LD_INT 3
23356: PUSH
23357: LD_INT 60
23359: PUSH
23360: EMPTY
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: LD_INT 25
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 25
23382: PUSH
23383: LD_INT 16
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PPUSH
23399: CALL_OW 72
23403: UNION
23404: ST_TO_ADDR
// if tmp then
23405: LD_VAR 0 4
23409: IFFALSE 23489
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23411: LD_ADDR_VAR 0 4
23415: PUSH
23416: LD_VAR 0 4
23420: PPUSH
23421: LD_INT 3
23423: PPUSH
23424: CALL 68716 0 2
23428: ST_TO_ADDR
// for j in tmp do
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_VAR 0 4
23438: PUSH
23439: FOR_IN
23440: IFFALSE 23483
// begin if IsInUnit ( j ) then
23442: LD_VAR 0 2
23446: PPUSH
23447: CALL_OW 310
23451: IFFALSE 23462
// ComExit ( j ) ;
23453: LD_VAR 0 2
23457: PPUSH
23458: CALL 68799 0 1
// AddComCollect ( j , x , y ) ;
23462: LD_VAR 0 2
23466: PPUSH
23467: LD_VAR 0 6
23471: PPUSH
23472: LD_VAR 0 7
23476: PPUSH
23477: CALL_OW 177
// end ;
23481: GO 23439
23483: POP
23484: POP
// exit ;
23485: POP
23486: POP
23487: GO 23724
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23489: LD_ADDR_VAR 0 4
23493: PUSH
23494: LD_INT 22
23496: PUSH
23497: LD_VAR 0 5
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 91
23508: PUSH
23509: LD_VAR 0 8
23513: PUSH
23514: LD_INT 8
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 34
23527: PUSH
23528: LD_INT 12
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 34
23537: PUSH
23538: LD_INT 51
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 34
23547: PUSH
23548: LD_INT 32
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 34
23557: PUSH
23558: LD_INT 89
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: PPUSH
23577: CALL_OW 69
23581: ST_TO_ADDR
// if tmp then
23582: LD_VAR 0 4
23586: IFFALSE 23720
// begin for j in tmp do
23588: LD_ADDR_VAR 0 2
23592: PUSH
23593: LD_VAR 0 4
23597: PUSH
23598: FOR_IN
23599: IFFALSE 23718
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23601: LD_VAR 0 2
23605: PPUSH
23606: CALL_OW 262
23610: PUSH
23611: LD_INT 3
23613: EQUAL
23614: IFTRUE 23631
23616: PUSH
23617: LD_VAR 0 2
23621: PPUSH
23622: CALL_OW 261
23626: PUSH
23627: LD_INT 20
23629: GREATER
23630: OR
23631: IFFALSE 23645
23633: PUSH
23634: LD_VAR 0 2
23638: PPUSH
23639: CALL_OW 314
23643: NOT
23644: AND
23645: IFFALSE 23675
23647: PUSH
23648: LD_VAR 0 2
23652: PPUSH
23653: CALL_OW 263
23657: PUSH
23658: LD_INT 1
23660: NONEQUAL
23661: IFTRUE 23674
23663: PUSH
23664: LD_VAR 0 2
23668: PPUSH
23669: CALL_OW 311
23673: OR
23674: AND
23675: IFFALSE 23716
// begin ComCollect ( j , x , y ) ;
23677: LD_VAR 0 2
23681: PPUSH
23682: LD_VAR 0 6
23686: PPUSH
23687: LD_VAR 0 7
23691: PPUSH
23692: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 8
23705: PPUSH
23706: CALL_OW 172
// exit ;
23710: POP
23711: POP
23712: POP
23713: POP
23714: GO 23724
// end ;
23716: GO 23598
23718: POP
23719: POP
// end ; end ;
23720: GO 23085
23722: POP
23723: POP
// end ; end_of_file
23724: PPOPN 9
23726: END
// export function SOS_UnitDestroyed ( un ) ; begin
23727: LD_INT 0
23729: PPUSH
// ComRadiation ( un ) ;
23730: LD_VAR 0 1
23734: PPUSH
23735: CALL 24897 0 1
// end ;
23739: LD_VAR 0 2
23743: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23744: LD_INT 0
23746: PPUSH
// ComRadiation ( un ) ;
23747: LD_VAR 0 1
23751: PPUSH
23752: CALL 24897 0 1
// end ;
23756: LD_VAR 0 2
23760: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23761: LD_INT 0
23763: PPUSH
// end ;
23764: LD_VAR 0 4
23768: RET
// export function SOS_Command ( cmd ) ; begin
23769: LD_INT 0
23771: PPUSH
// end ;
23772: LD_VAR 0 2
23776: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23777: LD_INT 0
23779: PPUSH
// end ;
23780: LD_VAR 0 6
23784: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
23785: LD_INT 0
23787: PPUSH
23788: PPUSH
23789: PPUSH
23790: PPUSH
23791: PPUSH
// if not vehicle or not factory then
23792: LD_VAR 0 1
23796: NOT
23797: IFTRUE 23806
23799: PUSH
23800: LD_VAR 0 2
23804: NOT
23805: OR
23806: IFFALSE 23810
// exit ;
23808: GO 24472
// weapon := GetWeapon ( vehicle ) ;
23810: LD_ADDR_VAR 0 7
23814: PUSH
23815: LD_VAR 0 1
23819: PPUSH
23820: CALL_OW 264
23824: ST_TO_ADDR
// if weapon = ar_miner then
23825: LD_VAR 0 7
23829: PUSH
23830: LD_INT 81
23832: EQUAL
23833: IFFALSE 23890
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
23835: LD_ADDR_EXP 99
23839: PUSH
23840: LD_EXP 99
23844: PPUSH
23845: LD_EXP 99
23849: PUSH
23850: LD_INT 1
23852: PLUS
23853: PPUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: CALL_OW 1
23863: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23864: LD_ADDR_EXP 100
23868: PUSH
23869: LD_EXP 100
23873: PPUSH
23874: LD_EXP 100
23878: PUSH
23879: LD_INT 1
23881: PLUS
23882: PPUSH
23883: EMPTY
23884: PPUSH
23885: CALL_OW 1
23889: ST_TO_ADDR
// end ; if not factoryWaypoints then
23890: LD_EXP 88
23894: NOT
23895: IFFALSE 23899
// exit ;
23897: GO 24472
// for i := 1 to Count ( factoryWaypoints ) do
23899: LD_ADDR_VAR 0 4
23903: PUSH
23904: DOUBLE
23905: LD_INT 1
23907: DEC
23908: ST_TO_ADDR
23909: LD_EXP 88
23913: PPUSH
23914: CALL 32425 0 1
23918: PUSH
23919: FOR_TO
23920: IFFALSE 24470
// if factoryWaypoints [ i ] [ 2 ] = factory then
23922: LD_EXP 88
23926: PUSH
23927: LD_VAR 0 4
23931: ARRAY
23932: PUSH
23933: LD_INT 2
23935: ARRAY
23936: PUSH
23937: LD_VAR 0 2
23941: EQUAL
23942: IFFALSE 24468
// begin if GetControl ( vehicle ) = control_manual then
23944: LD_VAR 0 1
23948: PPUSH
23949: CALL_OW 263
23953: PUSH
23954: LD_INT 1
23956: EQUAL
23957: IFFALSE 24321
// begin driver := IsDrivenBy ( vehicle ) ;
23959: LD_ADDR_VAR 0 5
23963: PUSH
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 311
23973: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23974: LD_VAR 0 5
23978: PUSH
23979: LD_EXP 89
23983: IN
23984: IFTRUE 23998
23986: PUSH
23987: LD_VAR 0 1
23991: PUSH
23992: LD_EXP 89
23996: IN
23997: OR
23998: IFFALSE 24004
// exit ;
24000: POP
24001: POP
24002: GO 24472
// if not HasTask ( driver ) then
24004: LD_VAR 0 5
24008: PPUSH
24009: CALL_OW 314
24013: NOT
24014: IFFALSE 24319
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
24016: LD_ADDR_EXP 89
24020: PUSH
24021: LD_EXP 89
24025: PPUSH
24026: LD_VAR 0 5
24030: PPUSH
24031: CALL 68401 0 2
24035: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
24036: LD_ADDR_EXP 89
24040: PUSH
24041: LD_EXP 89
24045: PPUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL 68401 0 2
24055: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24056: LD_ADDR_VAR 0 6
24060: PUSH
24061: LD_EXP 88
24065: PUSH
24066: LD_VAR 0 4
24070: ARRAY
24071: PUSH
24072: LD_INT 3
24074: ARRAY
24075: PPUSH
24076: LD_EXP 88
24080: PUSH
24081: LD_VAR 0 4
24085: ARRAY
24086: PUSH
24087: LD_INT 4
24089: ARRAY
24090: PPUSH
24091: CALL_OW 428
24095: ST_TO_ADDR
// if hex then
24096: LD_VAR 0 6
24100: IFFALSE 24118
// ComMoveUnit ( driver , hex ) else
24102: LD_VAR 0 5
24106: PPUSH
24107: LD_VAR 0 6
24111: PPUSH
24112: CALL_OW 112
24116: GO 24202
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
24118: LD_VAR 0 1
24122: PPUSH
24123: LD_EXP 88
24127: PUSH
24128: LD_VAR 0 4
24132: ARRAY
24133: PUSH
24134: LD_INT 3
24136: ARRAY
24137: PPUSH
24138: LD_EXP 88
24142: PUSH
24143: LD_VAR 0 4
24147: ARRAY
24148: PUSH
24149: LD_INT 4
24151: ARRAY
24152: PPUSH
24153: CALL_OW 297
24157: PUSH
24158: LD_INT 0
24160: GREATER
24161: IFFALSE 24202
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24163: LD_VAR 0 5
24167: PPUSH
24168: LD_EXP 88
24172: PUSH
24173: LD_VAR 0 4
24177: ARRAY
24178: PUSH
24179: LD_INT 3
24181: ARRAY
24182: PPUSH
24183: LD_EXP 88
24187: PUSH
24188: LD_VAR 0 4
24192: ARRAY
24193: PUSH
24194: LD_INT 4
24196: ARRAY
24197: PPUSH
24198: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24202: LD_VAR 0 5
24206: PPUSH
24207: CALL_OW 181
// if Multiplayer then
24211: LD_OWVAR 4
24215: IFFALSE 24264
// begin repeat wait ( 10 ) ;
24217: LD_INT 10
24219: PPUSH
24220: CALL_OW 67
// until not IsInUnit ( driver ) ;
24224: LD_VAR 0 5
24228: PPUSH
24229: CALL_OW 310
24233: NOT
24234: IFFALSE 24217
// if not HasTask ( driver ) then
24236: LD_VAR 0 5
24240: PPUSH
24241: CALL_OW 314
24245: NOT
24246: IFFALSE 24262
// ComEnterUnit ( driver , factory ) ;
24248: LD_VAR 0 5
24252: PPUSH
24253: LD_VAR 0 2
24257: PPUSH
24258: CALL_OW 120
// end else
24262: GO 24278
// AddComEnterUnit ( driver , factory ) ;
24264: LD_VAR 0 5
24268: PPUSH
24269: LD_VAR 0 2
24273: PPUSH
24274: CALL_OW 180
// wait ( 0 0$1 ) ;
24278: LD_INT 35
24280: PPUSH
24281: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
24285: LD_ADDR_EXP 89
24289: PUSH
24290: LD_EXP 89
24294: PUSH
24295: LD_VAR 0 5
24299: DIFF
24300: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
24301: LD_ADDR_EXP 89
24305: PUSH
24306: LD_EXP 89
24310: PUSH
24311: LD_VAR 0 1
24315: DIFF
24316: ST_TO_ADDR
// break ;
24317: GO 24470
// end ; end else
24319: GO 24468
// if GetControl ( vehicle ) = control_remote then
24321: LD_VAR 0 1
24325: PPUSH
24326: CALL_OW 263
24330: PUSH
24331: LD_INT 2
24333: EQUAL
24334: IFFALSE 24420
// begin wait ( 0 0$2 ) ;
24336: LD_INT 70
24338: PPUSH
24339: CALL_OW 67
// repeat wait ( 10 ) ;
24343: LD_INT 10
24345: PPUSH
24346: CALL_OW 67
// Connect ( vehicle ) ;
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL 38703 0 1
// until IsControledBy ( vehicle ) ;
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 312
24368: IFFALSE 24343
// wait ( 10 ) ;
24370: LD_INT 10
24372: PPUSH
24373: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24377: LD_VAR 0 1
24381: PPUSH
24382: LD_EXP 88
24386: PUSH
24387: LD_VAR 0 4
24391: ARRAY
24392: PUSH
24393: LD_INT 3
24395: ARRAY
24396: PPUSH
24397: LD_EXP 88
24401: PUSH
24402: LD_VAR 0 4
24406: ARRAY
24407: PUSH
24408: LD_INT 4
24410: ARRAY
24411: PPUSH
24412: CALL_OW 111
// break ;
24416: GO 24470
// end else
24418: GO 24468
// begin wait ( 0 0$3 ) ;
24420: LD_INT 105
24422: PPUSH
24423: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24427: LD_VAR 0 1
24431: PPUSH
24432: LD_EXP 88
24436: PUSH
24437: LD_VAR 0 4
24441: ARRAY
24442: PUSH
24443: LD_INT 3
24445: ARRAY
24446: PPUSH
24447: LD_EXP 88
24451: PUSH
24452: LD_VAR 0 4
24456: ARRAY
24457: PUSH
24458: LD_INT 4
24460: ARRAY
24461: PPUSH
24462: CALL_OW 111
// break ;
24466: GO 24470
// end ; end ;
24468: GO 23919
24470: POP
24471: POP
// end ;
24472: LD_VAR 0 3
24476: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24477: LD_INT 0
24479: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24480: LD_VAR 0 1
24484: PUSH
24485: LD_INT 250
24487: EQUAL
24488: IFFALSE 24505
24490: PUSH
24491: LD_VAR 0 2
24495: PPUSH
24496: CALL_OW 264
24500: PUSH
24501: LD_INT 81
24503: EQUAL
24504: AND
24505: IFFALSE 24526
// MinerPlaceMine ( unit , x , y ) ;
24507: LD_VAR 0 2
24511: PPUSH
24512: LD_VAR 0 4
24516: PPUSH
24517: LD_VAR 0 5
24521: PPUSH
24522: CALL 27872 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24526: LD_VAR 0 1
24530: PUSH
24531: LD_INT 251
24533: EQUAL
24534: IFFALSE 24551
24536: PUSH
24537: LD_VAR 0 2
24541: PPUSH
24542: CALL_OW 264
24546: PUSH
24547: LD_INT 81
24549: EQUAL
24550: AND
24551: IFFALSE 24572
// MinerDetonateMine ( unit , x , y ) ;
24553: LD_VAR 0 2
24557: PPUSH
24558: LD_VAR 0 4
24562: PPUSH
24563: LD_VAR 0 5
24567: PPUSH
24568: CALL 28279 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24572: LD_VAR 0 1
24576: PUSH
24577: LD_INT 252
24579: EQUAL
24580: IFFALSE 24597
24582: PUSH
24583: LD_VAR 0 2
24587: PPUSH
24588: CALL_OW 264
24592: PUSH
24593: LD_INT 81
24595: EQUAL
24596: AND
24597: IFFALSE 24618
// MinerCreateMinefield ( unit , x , y ) ;
24599: LD_VAR 0 2
24603: PPUSH
24604: LD_VAR 0 4
24608: PPUSH
24609: LD_VAR 0 5
24613: PPUSH
24614: CALL 28511 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24618: LD_VAR 0 1
24622: PUSH
24623: LD_INT 253
24625: EQUAL
24626: IFFALSE 24643
24628: PUSH
24629: LD_VAR 0 2
24633: PPUSH
24634: CALL_OW 257
24638: PUSH
24639: LD_INT 5
24641: EQUAL
24642: AND
24643: IFFALSE 24664
// ComBinocular ( unit , x , y ) ;
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_VAR 0 4
24654: PPUSH
24655: LD_VAR 0 5
24659: PPUSH
24660: CALL 28886 0 3
// if selectedUnit then
24664: LD_VAR 0 3
24668: IFFALSE 24728
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24670: LD_VAR 0 1
24674: PUSH
24675: LD_INT 254
24677: EQUAL
24678: IFFALSE 24695
24680: PUSH
24681: LD_VAR 0 2
24685: PPUSH
24686: CALL_OW 264
24690: PUSH
24691: LD_INT 99
24693: EQUAL
24694: AND
24695: IFFALSE 24712
24697: PUSH
24698: LD_VAR 0 3
24702: PPUSH
24703: CALL_OW 263
24707: PUSH
24708: LD_INT 3
24710: EQUAL
24711: AND
24712: IFFALSE 24728
// HackDestroyVehicle ( unit , selectedUnit ) ;
24714: LD_VAR 0 2
24718: PPUSH
24719: LD_VAR 0 3
24723: PPUSH
24724: CALL 27062 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24728: LD_VAR 0 1
24732: PUSH
24733: LD_INT 255
24735: EQUAL
24736: IFFALSE 24760
24738: PUSH
24739: LD_VAR 0 2
24743: PPUSH
24744: CALL_OW 264
24748: PUSH
24749: LD_INT 14
24751: PUSH
24752: LD_INT 53
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: IN
24759: AND
24760: IFFALSE 24778
24762: PUSH
24763: LD_VAR 0 4
24767: PPUSH
24768: LD_VAR 0 5
24772: PPUSH
24773: CALL_OW 488
24777: AND
24778: IFFALSE 24802
// CutTreeXYR ( unit , x , y , 12 ) ;
24780: LD_VAR 0 2
24784: PPUSH
24785: LD_VAR 0 4
24789: PPUSH
24790: LD_VAR 0 5
24794: PPUSH
24795: LD_INT 12
24797: PPUSH
24798: CALL 24993 0 4
// if cmd = 256 then
24802: LD_VAR 0 1
24806: PUSH
24807: LD_INT 256
24809: EQUAL
24810: IFFALSE 24831
// SetFactoryWaypoint ( unit , x , y ) ;
24812: LD_VAR 0 2
24816: PPUSH
24817: LD_VAR 0 4
24821: PPUSH
24822: LD_VAR 0 5
24826: PPUSH
24827: CALL 22272 0 3
// if cmd = 257 then
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 257
24838: EQUAL
24839: IFFALSE 24860
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24841: LD_VAR 0 2
24845: PPUSH
24846: LD_VAR 0 4
24850: PPUSH
24851: LD_VAR 0 5
24855: PPUSH
24856: CALL 22768 0 3
// if cmd = 258 then
24860: LD_VAR 0 1
24864: PUSH
24865: LD_INT 258
24867: EQUAL
24868: IFFALSE 24892
// BurnTreeXYR ( unit , x , y , 8 ) ;
24870: LD_VAR 0 2
24874: PPUSH
24875: LD_VAR 0 4
24879: PPUSH
24880: LD_VAR 0 5
24884: PPUSH
24885: LD_INT 8
24887: PPUSH
24888: CALL 25415 0 4
// end ;
24892: LD_VAR 0 6
24896: RET
// export function ComRadiation ( un ) ; var eff ; begin
24897: LD_INT 0
24899: PPUSH
24900: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL_OW 264
24910: PUSH
24911: LD_INT 91
24913: NONEQUAL
24914: IFFALSE 24918
// exit ;
24916: GO 24988
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24918: LD_INT 68
24920: PPUSH
24921: LD_VAR 0 1
24925: PPUSH
24926: CALL_OW 255
24930: PPUSH
24931: CALL_OW 321
24935: PUSH
24936: LD_INT 2
24938: EQUAL
24939: IFFALSE 24951
// eff := 50 else
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_INT 50
24948: ST_TO_ADDR
24949: GO 24959
// eff := 25 ;
24951: LD_ADDR_VAR 0 3
24955: PUSH
24956: LD_INT 25
24958: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24959: LD_VAR 0 1
24963: PPUSH
24964: CALL_OW 250
24968: PPUSH
24969: LD_VAR 0 1
24973: PPUSH
24974: CALL_OW 251
24978: PPUSH
24979: LD_VAR 0 3
24983: PPUSH
24984: CALL_OW 495
// end ;
24988: LD_VAR 0 2
24992: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24993: LD_INT 0
24995: PPUSH
24996: PPUSH
24997: PPUSH
24998: PPUSH
24999: PPUSH
25000: PPUSH
25001: PPUSH
25002: PPUSH
25003: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25004: LD_VAR 0 1
25008: PPUSH
25009: CALL_OW 302
25013: NOT
25014: IFTRUE 25033
25016: PUSH
25017: LD_VAR 0 2
25021: PPUSH
25022: LD_VAR 0 3
25026: PPUSH
25027: CALL_OW 488
25031: NOT
25032: OR
25033: IFTRUE 25042
25035: PUSH
25036: LD_VAR 0 4
25040: NOT
25041: OR
25042: IFFALSE 25046
// exit ;
25044: GO 25410
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
25046: LD_VAR 0 1
25050: PPUSH
25051: CALL_OW 437
25055: PPUSH
25056: CALL 32425 0 1
25060: PUSH
25061: LD_INT 10
25063: GREATER
25064: IFFALSE 25068
// exit ;
25066: GO 25410
// list := [ ] ;
25068: LD_ADDR_VAR 0 13
25072: PUSH
25073: EMPTY
25074: ST_TO_ADDR
// if x - r < 0 then
25075: LD_VAR 0 2
25079: PUSH
25080: LD_VAR 0 4
25084: MINUS
25085: PUSH
25086: LD_INT 0
25088: LESS
25089: IFFALSE 25101
// min_x := 0 else
25091: LD_ADDR_VAR 0 7
25095: PUSH
25096: LD_INT 0
25098: ST_TO_ADDR
25099: GO 25117
// min_x := x - r ;
25101: LD_ADDR_VAR 0 7
25105: PUSH
25106: LD_VAR 0 2
25110: PUSH
25111: LD_VAR 0 4
25115: MINUS
25116: ST_TO_ADDR
// if y - r < 0 then
25117: LD_VAR 0 3
25121: PUSH
25122: LD_VAR 0 4
25126: MINUS
25127: PUSH
25128: LD_INT 0
25130: LESS
25131: IFFALSE 25143
// min_y := 0 else
25133: LD_ADDR_VAR 0 8
25137: PUSH
25138: LD_INT 0
25140: ST_TO_ADDR
25141: GO 25159
// min_y := y - r ;
25143: LD_ADDR_VAR 0 8
25147: PUSH
25148: LD_VAR 0 3
25152: PUSH
25153: LD_VAR 0 4
25157: MINUS
25158: ST_TO_ADDR
// max_x := x + r ;
25159: LD_ADDR_VAR 0 9
25163: PUSH
25164: LD_VAR 0 2
25168: PUSH
25169: LD_VAR 0 4
25173: PLUS
25174: ST_TO_ADDR
// max_y := y + r ;
25175: LD_ADDR_VAR 0 10
25179: PUSH
25180: LD_VAR 0 3
25184: PUSH
25185: LD_VAR 0 4
25189: PLUS
25190: ST_TO_ADDR
// for _x = min_x to max_x do
25191: LD_ADDR_VAR 0 11
25195: PUSH
25196: DOUBLE
25197: LD_VAR 0 7
25201: DEC
25202: ST_TO_ADDR
25203: LD_VAR 0 9
25207: PUSH
25208: FOR_TO
25209: IFFALSE 25328
// for _y = min_y to max_y do
25211: LD_ADDR_VAR 0 12
25215: PUSH
25216: DOUBLE
25217: LD_VAR 0 8
25221: DEC
25222: ST_TO_ADDR
25223: LD_VAR 0 10
25227: PUSH
25228: FOR_TO
25229: IFFALSE 25324
// begin if not ValidHex ( _x , _y ) then
25231: LD_VAR 0 11
25235: PPUSH
25236: LD_VAR 0 12
25240: PPUSH
25241: CALL_OW 488
25245: NOT
25246: IFFALSE 25250
// continue ;
25248: GO 25228
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25250: LD_VAR 0 11
25254: PPUSH
25255: LD_VAR 0 12
25259: PPUSH
25260: CALL_OW 351
25264: IFFALSE 25282
25266: PUSH
25267: LD_VAR 0 11
25271: PPUSH
25272: LD_VAR 0 12
25276: PPUSH
25277: CALL_OW 554
25281: AND
25282: IFFALSE 25322
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25284: LD_ADDR_VAR 0 13
25288: PUSH
25289: LD_VAR 0 13
25293: PPUSH
25294: LD_VAR 0 13
25298: PUSH
25299: LD_INT 1
25301: PLUS
25302: PPUSH
25303: LD_VAR 0 11
25307: PUSH
25308: LD_VAR 0 12
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 2
25321: ST_TO_ADDR
// end ;
25322: GO 25228
25324: POP
25325: POP
25326: GO 25208
25328: POP
25329: POP
// if not list then
25330: LD_VAR 0 13
25334: NOT
25335: IFFALSE 25339
// exit ;
25337: GO 25410
// for i in list do
25339: LD_ADDR_VAR 0 6
25343: PUSH
25344: LD_VAR 0 13
25348: PUSH
25349: FOR_IN
25350: IFFALSE 25408
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25352: LD_VAR 0 1
25356: PPUSH
25357: LD_STRING M
25359: PUSH
25360: LD_VAR 0 6
25364: PUSH
25365: LD_INT 1
25367: ARRAY
25368: PUSH
25369: LD_VAR 0 6
25373: PUSH
25374: LD_INT 2
25376: ARRAY
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: PPUSH
25402: CALL_OW 447
25406: GO 25349
25408: POP
25409: POP
// end ;
25410: LD_VAR 0 5
25414: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25415: LD_INT 0
25417: PPUSH
25418: PPUSH
25419: PPUSH
25420: PPUSH
25421: PPUSH
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
25426: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25427: LD_VAR 0 1
25431: PPUSH
25432: CALL_OW 302
25436: NOT
25437: IFTRUE 25456
25439: PUSH
25440: LD_VAR 0 2
25444: PPUSH
25445: LD_VAR 0 3
25449: PPUSH
25450: CALL_OW 488
25454: NOT
25455: OR
25456: IFTRUE 25465
25458: PUSH
25459: LD_VAR 0 4
25463: NOT
25464: OR
25465: IFFALSE 25469
// exit ;
25467: GO 26008
// if Count ( GetTaskList ( flame ) ) > 10 then
25469: LD_VAR 0 1
25473: PPUSH
25474: CALL_OW 437
25478: PPUSH
25479: CALL 32425 0 1
25483: PUSH
25484: LD_INT 10
25486: GREATER
25487: IFFALSE 25491
// exit ;
25489: GO 26008
// list := [ ] ;
25491: LD_ADDR_VAR 0 13
25495: PUSH
25496: EMPTY
25497: ST_TO_ADDR
// if x - r < 0 then
25498: LD_VAR 0 2
25502: PUSH
25503: LD_VAR 0 4
25507: MINUS
25508: PUSH
25509: LD_INT 0
25511: LESS
25512: IFFALSE 25524
// min_x := 0 else
25514: LD_ADDR_VAR 0 7
25518: PUSH
25519: LD_INT 0
25521: ST_TO_ADDR
25522: GO 25540
// min_x := x - r ;
25524: LD_ADDR_VAR 0 7
25528: PUSH
25529: LD_VAR 0 2
25533: PUSH
25534: LD_VAR 0 4
25538: MINUS
25539: ST_TO_ADDR
// if y - r < 0 then
25540: LD_VAR 0 3
25544: PUSH
25545: LD_VAR 0 4
25549: MINUS
25550: PUSH
25551: LD_INT 0
25553: LESS
25554: IFFALSE 25566
// min_y := 0 else
25556: LD_ADDR_VAR 0 8
25560: PUSH
25561: LD_INT 0
25563: ST_TO_ADDR
25564: GO 25582
// min_y := y - r ;
25566: LD_ADDR_VAR 0 8
25570: PUSH
25571: LD_VAR 0 3
25575: PUSH
25576: LD_VAR 0 4
25580: MINUS
25581: ST_TO_ADDR
// max_x := x + r ;
25582: LD_ADDR_VAR 0 9
25586: PUSH
25587: LD_VAR 0 2
25591: PUSH
25592: LD_VAR 0 4
25596: PLUS
25597: ST_TO_ADDR
// max_y := y + r ;
25598: LD_ADDR_VAR 0 10
25602: PUSH
25603: LD_VAR 0 3
25607: PUSH
25608: LD_VAR 0 4
25612: PLUS
25613: ST_TO_ADDR
// for _x = min_x to max_x do
25614: LD_ADDR_VAR 0 11
25618: PUSH
25619: DOUBLE
25620: LD_VAR 0 7
25624: DEC
25625: ST_TO_ADDR
25626: LD_VAR 0 9
25630: PUSH
25631: FOR_TO
25632: IFFALSE 25751
// for _y = min_y to max_y do
25634: LD_ADDR_VAR 0 12
25638: PUSH
25639: DOUBLE
25640: LD_VAR 0 8
25644: DEC
25645: ST_TO_ADDR
25646: LD_VAR 0 10
25650: PUSH
25651: FOR_TO
25652: IFFALSE 25747
// begin if not ValidHex ( _x , _y ) then
25654: LD_VAR 0 11
25658: PPUSH
25659: LD_VAR 0 12
25663: PPUSH
25664: CALL_OW 488
25668: NOT
25669: IFFALSE 25673
// continue ;
25671: GO 25651
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25673: LD_VAR 0 11
25677: PPUSH
25678: LD_VAR 0 12
25682: PPUSH
25683: CALL_OW 351
25687: IFFALSE 25705
25689: PUSH
25690: LD_VAR 0 11
25694: PPUSH
25695: LD_VAR 0 12
25699: PPUSH
25700: CALL_OW 554
25704: AND
25705: IFFALSE 25745
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25707: LD_ADDR_VAR 0 13
25711: PUSH
25712: LD_VAR 0 13
25716: PPUSH
25717: LD_VAR 0 13
25721: PUSH
25722: LD_INT 1
25724: PLUS
25725: PPUSH
25726: LD_VAR 0 11
25730: PUSH
25731: LD_VAR 0 12
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PPUSH
25740: CALL_OW 2
25744: ST_TO_ADDR
// end ;
25745: GO 25651
25747: POP
25748: POP
25749: GO 25631
25751: POP
25752: POP
// if not list then
25753: LD_VAR 0 13
25757: NOT
25758: IFFALSE 25762
// exit ;
25760: GO 26008
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25762: LD_ADDR_VAR 0 13
25766: PUSH
25767: LD_VAR 0 1
25771: PPUSH
25772: LD_VAR 0 13
25776: PPUSH
25777: LD_INT 1
25779: PPUSH
25780: LD_INT 1
25782: PPUSH
25783: CALL 35831 0 4
25787: ST_TO_ADDR
// ComStop ( flame ) ;
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL_OW 141
// for i in list do
25797: LD_ADDR_VAR 0 6
25801: PUSH
25802: LD_VAR 0 13
25806: PUSH
25807: FOR_IN
25808: IFFALSE 25839
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25810: LD_VAR 0 1
25814: PPUSH
25815: LD_VAR 0 6
25819: PUSH
25820: LD_INT 1
25822: ARRAY
25823: PPUSH
25824: LD_VAR 0 6
25828: PUSH
25829: LD_INT 2
25831: ARRAY
25832: PPUSH
25833: CALL_OW 176
25837: GO 25807
25839: POP
25840: POP
// repeat wait ( 0 0$1 ) ;
25841: LD_INT 35
25843: PPUSH
25844: CALL_OW 67
// task := GetTaskList ( flame ) ;
25848: LD_ADDR_VAR 0 14
25852: PUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 437
25862: ST_TO_ADDR
// if not task then
25863: LD_VAR 0 14
25867: NOT
25868: IFFALSE 25872
// exit ;
25870: GO 26008
// if task [ 1 ] [ 1 ] <> | then
25872: LD_VAR 0 14
25876: PUSH
25877: LD_INT 1
25879: ARRAY
25880: PUSH
25881: LD_INT 1
25883: ARRAY
25884: PUSH
25885: LD_STRING |
25887: NONEQUAL
25888: IFFALSE 25892
// exit ;
25890: GO 26008
// _x := task [ 1 ] [ 2 ] ;
25892: LD_ADDR_VAR 0 11
25896: PUSH
25897: LD_VAR 0 14
25901: PUSH
25902: LD_INT 1
25904: ARRAY
25905: PUSH
25906: LD_INT 2
25908: ARRAY
25909: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25910: LD_ADDR_VAR 0 12
25914: PUSH
25915: LD_VAR 0 14
25919: PUSH
25920: LD_INT 1
25922: ARRAY
25923: PUSH
25924: LD_INT 3
25926: ARRAY
25927: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25928: LD_VAR 0 11
25932: PPUSH
25933: LD_VAR 0 12
25937: PPUSH
25938: CALL_OW 351
25942: NOT
25943: IFTRUE 25962
25945: PUSH
25946: LD_VAR 0 11
25950: PPUSH
25951: LD_VAR 0 12
25955: PPUSH
25956: CALL_OW 554
25960: NOT
25961: OR
25962: IFFALSE 25996
// begin task := Delete ( task , 1 ) ;
25964: LD_ADDR_VAR 0 14
25968: PUSH
25969: LD_VAR 0 14
25973: PPUSH
25974: LD_INT 1
25976: PPUSH
25977: CALL_OW 3
25981: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25982: LD_VAR 0 1
25986: PPUSH
25987: LD_VAR 0 14
25991: PPUSH
25992: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 314
26005: NOT
26006: IFFALSE 25841
// end ;
26008: LD_VAR 0 5
26012: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26013: LD_EXP 92
26017: NOT
26018: IFFALSE 26068
26020: GO 26022
26022: DISABLE
// begin initHack := true ;
26023: LD_ADDR_EXP 92
26027: PUSH
26028: LD_INT 1
26030: ST_TO_ADDR
// hackTanks := [ ] ;
26031: LD_ADDR_EXP 93
26035: PUSH
26036: EMPTY
26037: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26038: LD_ADDR_EXP 94
26042: PUSH
26043: EMPTY
26044: ST_TO_ADDR
// hackLimit := 3 ;
26045: LD_ADDR_EXP 95
26049: PUSH
26050: LD_INT 3
26052: ST_TO_ADDR
// hackDist := 12 ;
26053: LD_ADDR_EXP 96
26057: PUSH
26058: LD_INT 12
26060: ST_TO_ADDR
// hackCounter := [ ] ;
26061: LD_ADDR_EXP 97
26065: PUSH
26066: EMPTY
26067: ST_TO_ADDR
// end ;
26068: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26069: LD_EXP 92
26073: IFFALSE 26091
26075: PUSH
26076: LD_INT 34
26078: PUSH
26079: LD_INT 99
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 69
26090: AND
26091: IFFALSE 26344
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
26099: PPUSH
// begin enable ;
26100: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26101: LD_ADDR_VAR 0 1
26105: PUSH
26106: LD_INT 34
26108: PUSH
26109: LD_INT 99
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PPUSH
26116: CALL_OW 69
26120: PUSH
26121: FOR_IN
26122: IFFALSE 26342
// begin if not i in hackTanks then
26124: LD_VAR 0 1
26128: PUSH
26129: LD_EXP 93
26133: IN
26134: NOT
26135: IFFALSE 26218
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26137: LD_ADDR_EXP 93
26141: PUSH
26142: LD_EXP 93
26146: PPUSH
26147: LD_EXP 93
26151: PUSH
26152: LD_INT 1
26154: PLUS
26155: PPUSH
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 1
26165: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26166: LD_ADDR_EXP 94
26170: PUSH
26171: LD_EXP 94
26175: PPUSH
26176: LD_EXP 94
26180: PUSH
26181: LD_INT 1
26183: PLUS
26184: PPUSH
26185: EMPTY
26186: PPUSH
26187: CALL_OW 1
26191: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26192: LD_ADDR_EXP 97
26196: PUSH
26197: LD_EXP 97
26201: PPUSH
26202: LD_EXP 97
26206: PUSH
26207: LD_INT 1
26209: PLUS
26210: PPUSH
26211: EMPTY
26212: PPUSH
26213: CALL_OW 1
26217: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26218: LD_VAR 0 1
26222: PPUSH
26223: CALL_OW 302
26227: NOT
26228: IFFALSE 26241
// begin HackUnlinkAll ( i ) ;
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL 26347 0 1
// continue ;
26239: GO 26121
// end ; HackCheckCapturedStatus ( i ) ;
26241: LD_VAR 0 1
26245: PPUSH
26246: CALL 26792 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26250: LD_ADDR_VAR 0 2
26254: PUSH
26255: LD_INT 81
26257: PUSH
26258: LD_VAR 0 1
26262: PPUSH
26263: CALL_OW 255
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 33
26274: PUSH
26275: LD_INT 3
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 91
26284: PUSH
26285: LD_VAR 0 1
26289: PUSH
26290: LD_EXP 96
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 50
26302: PUSH
26303: EMPTY
26304: LIST
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: PPUSH
26312: CALL_OW 69
26316: ST_TO_ADDR
// if not tmp then
26317: LD_VAR 0 2
26321: NOT
26322: IFFALSE 26326
// continue ;
26324: GO 26121
// HackLink ( i , tmp ) ;
26326: LD_VAR 0 1
26330: PPUSH
26331: LD_VAR 0 2
26335: PPUSH
26336: CALL 26483 0 2
// end ;
26340: GO 26121
26342: POP
26343: POP
// end ;
26344: PPOPN 2
26346: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
26351: PPUSH
// if not hack in hackTanks then
26352: LD_VAR 0 1
26356: PUSH
26357: LD_EXP 93
26361: IN
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 26478
// index := GetElementIndex ( hackTanks , hack ) ;
26367: LD_ADDR_VAR 0 4
26371: PUSH
26372: LD_EXP 93
26376: PPUSH
26377: LD_VAR 0 1
26381: PPUSH
26382: CALL 35126 0 2
26386: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26387: LD_EXP 94
26391: PUSH
26392: LD_VAR 0 4
26396: ARRAY
26397: IFFALSE 26478
// begin for i in hackTanksCaptured [ index ] do
26399: LD_ADDR_VAR 0 3
26403: PUSH
26404: LD_EXP 94
26408: PUSH
26409: LD_VAR 0 4
26413: ARRAY
26414: PUSH
26415: FOR_IN
26416: IFFALSE 26442
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26418: LD_VAR 0 3
26422: PUSH
26423: LD_INT 1
26425: ARRAY
26426: PPUSH
26427: LD_VAR 0 3
26431: PUSH
26432: LD_INT 2
26434: ARRAY
26435: PPUSH
26436: CALL_OW 235
26440: GO 26415
26442: POP
26443: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26444: LD_ADDR_EXP 94
26448: PUSH
26449: LD_EXP 94
26453: PPUSH
26454: LD_VAR 0 4
26458: PPUSH
26459: EMPTY
26460: PPUSH
26461: CALL_OW 1
26465: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26466: LD_VAR 0 1
26470: PPUSH
26471: LD_INT 0
26473: PPUSH
26474: CALL_OW 505
// end ; end ;
26478: LD_VAR 0 2
26482: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
// if not hack in hackTanks or not vehicles then
26488: LD_VAR 0 1
26492: PUSH
26493: LD_EXP 93
26497: IN
26498: NOT
26499: IFTRUE 26508
26501: PUSH
26502: LD_VAR 0 2
26506: NOT
26507: OR
26508: IFFALSE 26512
// exit ;
26510: GO 26787
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26512: LD_ADDR_VAR 0 2
26516: PUSH
26517: LD_VAR 0 1
26521: PPUSH
26522: LD_VAR 0 2
26526: PPUSH
26527: LD_INT 1
26529: PPUSH
26530: LD_INT 1
26532: PPUSH
26533: CALL 35778 0 4
26537: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26538: LD_ADDR_VAR 0 5
26542: PUSH
26543: LD_EXP 93
26547: PPUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL 35126 0 2
26557: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26558: LD_EXP 94
26562: PUSH
26563: LD_VAR 0 5
26567: ARRAY
26568: PUSH
26569: LD_EXP 95
26573: LESS
26574: IFFALSE 26763
// begin for i := 1 to vehicles do
26576: LD_ADDR_VAR 0 4
26580: PUSH
26581: DOUBLE
26582: LD_INT 1
26584: DEC
26585: ST_TO_ADDR
26586: LD_VAR 0 2
26590: PUSH
26591: FOR_TO
26592: IFFALSE 26761
// begin if hackTanksCaptured [ index ] = hackLimit then
26594: LD_EXP 94
26598: PUSH
26599: LD_VAR 0 5
26603: ARRAY
26604: PUSH
26605: LD_EXP 95
26609: EQUAL
26610: IFFALSE 26614
// break ;
26612: GO 26761
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26614: LD_ADDR_EXP 97
26618: PUSH
26619: LD_EXP 97
26623: PPUSH
26624: LD_VAR 0 5
26628: PPUSH
26629: LD_EXP 97
26633: PUSH
26634: LD_VAR 0 5
26638: ARRAY
26639: PUSH
26640: LD_INT 1
26642: PLUS
26643: PPUSH
26644: CALL_OW 1
26648: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26649: LD_ADDR_EXP 94
26653: PUSH
26654: LD_EXP 94
26658: PPUSH
26659: LD_VAR 0 5
26663: PUSH
26664: LD_EXP 94
26668: PUSH
26669: LD_VAR 0 5
26673: ARRAY
26674: PUSH
26675: LD_INT 1
26677: PLUS
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PPUSH
26683: LD_VAR 0 2
26687: PUSH
26688: LD_VAR 0 4
26692: ARRAY
26693: PUSH
26694: LD_VAR 0 2
26698: PUSH
26699: LD_VAR 0 4
26703: ARRAY
26704: PPUSH
26705: CALL_OW 255
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL 35343 0 3
26718: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26719: LD_VAR 0 2
26723: PUSH
26724: LD_VAR 0 4
26728: ARRAY
26729: PPUSH
26730: LD_VAR 0 1
26734: PPUSH
26735: CALL_OW 255
26739: PPUSH
26740: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26744: LD_VAR 0 2
26748: PUSH
26749: LD_VAR 0 4
26753: ARRAY
26754: PPUSH
26755: CALL_OW 141
// end ;
26759: GO 26591
26761: POP
26762: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26763: LD_VAR 0 1
26767: PPUSH
26768: LD_EXP 94
26772: PUSH
26773: LD_VAR 0 5
26777: ARRAY
26778: PUSH
26779: LD_INT 0
26781: PLUS
26782: PPUSH
26783: CALL_OW 505
// end ;
26787: LD_VAR 0 3
26791: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26792: LD_INT 0
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
// if not hack in hackTanks then
26798: LD_VAR 0 1
26802: PUSH
26803: LD_EXP 93
26807: IN
26808: NOT
26809: IFFALSE 26813
// exit ;
26811: GO 27057
// index := GetElementIndex ( hackTanks , hack ) ;
26813: LD_ADDR_VAR 0 4
26817: PUSH
26818: LD_EXP 93
26822: PPUSH
26823: LD_VAR 0 1
26827: PPUSH
26828: CALL 35126 0 2
26832: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26833: LD_ADDR_VAR 0 3
26837: PUSH
26838: DOUBLE
26839: LD_EXP 94
26843: PUSH
26844: LD_VAR 0 4
26848: ARRAY
26849: INC
26850: ST_TO_ADDR
26851: LD_INT 1
26853: PUSH
26854: FOR_DOWNTO
26855: IFFALSE 27031
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26857: LD_ADDR_VAR 0 5
26861: PUSH
26862: LD_EXP 94
26866: PUSH
26867: LD_VAR 0 4
26871: ARRAY
26872: PUSH
26873: LD_VAR 0 3
26877: ARRAY
26878: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26879: LD_VAR 0 5
26883: PUSH
26884: LD_INT 1
26886: ARRAY
26887: PPUSH
26888: CALL_OW 302
26892: NOT
26893: IFTRUE 26921
26895: PUSH
26896: LD_VAR 0 5
26900: PUSH
26901: LD_INT 1
26903: ARRAY
26904: PPUSH
26905: CALL_OW 255
26909: PUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: CALL_OW 255
26919: NONEQUAL
26920: OR
26921: IFFALSE 27029
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26923: LD_VAR 0 5
26927: PUSH
26928: LD_INT 1
26930: ARRAY
26931: PPUSH
26932: CALL_OW 305
26936: IFFALSE 26964
26938: PUSH
26939: LD_VAR 0 5
26943: PUSH
26944: LD_INT 1
26946: ARRAY
26947: PPUSH
26948: CALL_OW 255
26952: PUSH
26953: LD_VAR 0 1
26957: PPUSH
26958: CALL_OW 255
26962: EQUAL
26963: AND
26964: IFFALSE 26988
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26966: LD_VAR 0 5
26970: PUSH
26971: LD_INT 1
26973: ARRAY
26974: PPUSH
26975: LD_VAR 0 5
26979: PUSH
26980: LD_INT 2
26982: ARRAY
26983: PPUSH
26984: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26988: LD_ADDR_EXP 94
26992: PUSH
26993: LD_EXP 94
26997: PPUSH
26998: LD_VAR 0 4
27002: PPUSH
27003: LD_EXP 94
27007: PUSH
27008: LD_VAR 0 4
27012: ARRAY
27013: PPUSH
27014: LD_VAR 0 3
27018: PPUSH
27019: CALL_OW 3
27023: PPUSH
27024: CALL_OW 1
27028: ST_TO_ADDR
// end ; end ;
27029: GO 26854
27031: POP
27032: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27033: LD_VAR 0 1
27037: PPUSH
27038: LD_EXP 94
27042: PUSH
27043: LD_VAR 0 4
27047: ARRAY
27048: PUSH
27049: LD_INT 0
27051: PLUS
27052: PPUSH
27053: CALL_OW 505
// end ;
27057: LD_VAR 0 2
27061: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27062: LD_INT 0
27064: PPUSH
27065: PPUSH
27066: PPUSH
27067: PPUSH
// if not hack in hackTanks then
27068: LD_VAR 0 1
27072: PUSH
27073: LD_EXP 93
27077: IN
27078: NOT
27079: IFFALSE 27083
// exit ;
27081: GO 27168
// index := GetElementIndex ( hackTanks , hack ) ;
27083: LD_ADDR_VAR 0 5
27087: PUSH
27088: LD_EXP 93
27092: PPUSH
27093: LD_VAR 0 1
27097: PPUSH
27098: CALL 35126 0 2
27102: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27103: LD_ADDR_VAR 0 4
27107: PUSH
27108: DOUBLE
27109: LD_INT 1
27111: DEC
27112: ST_TO_ADDR
27113: LD_EXP 94
27117: PUSH
27118: LD_VAR 0 5
27122: ARRAY
27123: PUSH
27124: FOR_TO
27125: IFFALSE 27166
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27127: LD_EXP 94
27131: PUSH
27132: LD_VAR 0 5
27136: ARRAY
27137: PUSH
27138: LD_VAR 0 4
27142: ARRAY
27143: PUSH
27144: LD_INT 1
27146: ARRAY
27147: PUSH
27148: LD_VAR 0 2
27152: EQUAL
27153: IFFALSE 27164
// KillUnit ( vehicle ) ;
27155: LD_VAR 0 2
27159: PPUSH
27160: CALL_OW 66
27164: GO 27124
27166: POP
27167: POP
// end ;
27168: LD_VAR 0 3
27172: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
27173: LD_EXP 98
27177: NOT
27178: IFFALSE 27311
27180: GO 27182
27182: DISABLE
27183: LD_INT 0
27185: PPUSH
// begin initMiner := true ;
27186: LD_ADDR_EXP 98
27190: PUSH
27191: LD_INT 1
27193: ST_TO_ADDR
// minersList := [ ] ;
27194: LD_ADDR_EXP 99
27198: PUSH
27199: EMPTY
27200: ST_TO_ADDR
// minerMinesList := [ ] ;
27201: LD_ADDR_EXP 100
27205: PUSH
27206: EMPTY
27207: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
27208: LD_ADDR_EXP 101
27212: PUSH
27213: LD_INT 10
27215: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27216: LD_ADDR_VAR 0 1
27220: PUSH
27221: LD_INT 34
27223: PUSH
27224: LD_INT 81
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PPUSH
27231: CALL_OW 69
27235: PUSH
27236: FOR_IN
27237: IFFALSE 27309
// begin if not i in minersList then
27239: LD_VAR 0 1
27243: PUSH
27244: LD_EXP 99
27248: IN
27249: NOT
27250: IFFALSE 27307
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27252: LD_ADDR_EXP 99
27256: PUSH
27257: LD_EXP 99
27261: PPUSH
27262: LD_EXP 99
27266: PUSH
27267: LD_INT 1
27269: PLUS
27270: PPUSH
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL_OW 1
27280: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27281: LD_ADDR_EXP 100
27285: PUSH
27286: LD_EXP 100
27290: PPUSH
27291: LD_EXP 100
27295: PUSH
27296: LD_INT 1
27298: PLUS
27299: PPUSH
27300: EMPTY
27301: PPUSH
27302: CALL_OW 1
27306: ST_TO_ADDR
// end end ;
27307: GO 27236
27309: POP
27310: POP
// end ;
27311: PPOPN 1
27313: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
27314: LD_EXP 98
27318: IFFALSE 27349
27320: PUSH
27321: LD_EXP 100
27325: PPUSH
27326: CALL 32425 0 1
27330: IFTRUE 27348
27332: PUSH
27333: LD_INT 34
27335: PUSH
27336: LD_INT 81
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PPUSH
27343: CALL_OW 69
27347: OR
27348: AND
27349: IFFALSE 27869
27351: GO 27353
27353: DISABLE
27354: LD_INT 0
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
// begin enable ;
27360: ENABLE
// for i := minerMinesList downto 1 do
27361: LD_ADDR_VAR 0 1
27365: PUSH
27366: DOUBLE
27367: LD_EXP 100
27371: INC
27372: ST_TO_ADDR
27373: LD_INT 1
27375: PUSH
27376: FOR_DOWNTO
27377: IFFALSE 27867
// begin side := GetSide ( minersList [ i ] ) ;
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: LD_EXP 99
27388: PUSH
27389: LD_VAR 0 1
27393: ARRAY
27394: PPUSH
27395: CALL_OW 255
27399: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
27400: LD_EXP 99
27404: PUSH
27405: LD_VAR 0 1
27409: ARRAY
27410: PPUSH
27411: CALL_OW 300
27415: IFFALSE 27436
27417: PUSH
27418: LD_VAR 0 3
27422: PUSH
27423: LD_OWVAR 2
27427: PUSH
27428: LD_INT 9
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: IN
27435: AND
27436: IFFALSE 27469
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
27438: LD_EXP 99
27442: PUSH
27443: LD_VAR 0 1
27447: ARRAY
27448: PPUSH
27449: LD_EXP 100
27453: PUSH
27454: LD_VAR 0 1
27458: ARRAY
27459: PPUSH
27460: CALL 32425 0 1
27464: PPUSH
27465: CALL_OW 505
// if not minerMinesList [ i ] then
27469: LD_EXP 100
27473: PUSH
27474: LD_VAR 0 1
27478: ARRAY
27479: NOT
27480: IFFALSE 27484
// continue ;
27482: GO 27376
// for j := minerMinesList [ i ] downto 1 do
27484: LD_ADDR_VAR 0 2
27488: PUSH
27489: DOUBLE
27490: LD_EXP 100
27494: PUSH
27495: LD_VAR 0 1
27499: ARRAY
27500: INC
27501: ST_TO_ADDR
27502: LD_INT 1
27504: PUSH
27505: FOR_DOWNTO
27506: IFFALSE 27863
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
27508: LD_EXP 99
27512: PUSH
27513: LD_VAR 0 1
27517: ARRAY
27518: PPUSH
27519: CALL_OW 301
27523: IFTRUE 27543
27525: PUSH
27526: LD_EXP 99
27530: PUSH
27531: LD_VAR 0 1
27535: ARRAY
27536: PPUSH
27537: CALL_OW 305
27541: NOT
27542: OR
27543: IFFALSE 27634
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27545: LD_EXP 100
27549: PUSH
27550: LD_VAR 0 1
27554: ARRAY
27555: PUSH
27556: LD_VAR 0 2
27560: ARRAY
27561: PUSH
27562: LD_INT 1
27564: ARRAY
27565: PPUSH
27566: LD_EXP 100
27570: PUSH
27571: LD_VAR 0 1
27575: ARRAY
27576: PUSH
27577: LD_VAR 0 2
27581: ARRAY
27582: PUSH
27583: LD_INT 2
27585: ARRAY
27586: PPUSH
27587: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27591: LD_ADDR_EXP 100
27595: PUSH
27596: LD_EXP 100
27600: PPUSH
27601: LD_VAR 0 1
27605: PPUSH
27606: LD_EXP 100
27610: PUSH
27611: LD_VAR 0 1
27615: ARRAY
27616: PPUSH
27617: LD_VAR 0 2
27621: PPUSH
27622: CALL_OW 3
27626: PPUSH
27627: CALL_OW 1
27631: ST_TO_ADDR
// continue ;
27632: GO 27505
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27634: LD_ADDR_VAR 0 4
27638: PUSH
27639: LD_EXP 100
27643: PUSH
27644: LD_VAR 0 1
27648: ARRAY
27649: PUSH
27650: LD_VAR 0 2
27654: ARRAY
27655: PUSH
27656: LD_INT 1
27658: ARRAY
27659: PPUSH
27660: LD_EXP 100
27664: PUSH
27665: LD_VAR 0 1
27669: ARRAY
27670: PUSH
27671: LD_VAR 0 2
27675: ARRAY
27676: PUSH
27677: LD_INT 2
27679: ARRAY
27680: PPUSH
27681: CALL_OW 428
27685: ST_TO_ADDR
// if not tmp then
27686: LD_VAR 0 4
27690: NOT
27691: IFFALSE 27695
// continue ;
27693: GO 27505
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27695: LD_VAR 0 4
27699: PUSH
27700: LD_INT 81
27702: PUSH
27703: LD_VAR 0 3
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PPUSH
27712: CALL_OW 69
27716: IN
27717: IFFALSE 27767
27719: PUSH
27720: LD_EXP 100
27724: PUSH
27725: LD_VAR 0 1
27729: ARRAY
27730: PUSH
27731: LD_VAR 0 2
27735: ARRAY
27736: PUSH
27737: LD_INT 1
27739: ARRAY
27740: PPUSH
27741: LD_EXP 100
27745: PUSH
27746: LD_VAR 0 1
27750: ARRAY
27751: PUSH
27752: LD_VAR 0 2
27756: ARRAY
27757: PUSH
27758: LD_INT 2
27760: ARRAY
27761: PPUSH
27762: CALL_OW 458
27766: AND
27767: IFFALSE 27861
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27769: LD_EXP 100
27773: PUSH
27774: LD_VAR 0 1
27778: ARRAY
27779: PUSH
27780: LD_VAR 0 2
27784: ARRAY
27785: PUSH
27786: LD_INT 1
27788: ARRAY
27789: PPUSH
27790: LD_EXP 100
27794: PUSH
27795: LD_VAR 0 1
27799: ARRAY
27800: PUSH
27801: LD_VAR 0 2
27805: ARRAY
27806: PUSH
27807: LD_INT 2
27809: ARRAY
27810: PPUSH
27811: LD_VAR 0 3
27815: PPUSH
27816: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27820: LD_ADDR_EXP 100
27824: PUSH
27825: LD_EXP 100
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: LD_EXP 100
27839: PUSH
27840: LD_VAR 0 1
27844: ARRAY
27845: PPUSH
27846: LD_VAR 0 2
27850: PPUSH
27851: CALL_OW 3
27855: PPUSH
27856: CALL_OW 1
27860: ST_TO_ADDR
// end ; end ;
27861: GO 27505
27863: POP
27864: POP
// end ;
27865: GO 27376
27867: POP
27868: POP
// end ;
27869: PPOPN 4
27871: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
27872: LD_INT 0
27874: PPUSH
27875: PPUSH
27876: PPUSH
27877: PPUSH
// result := false ;
27878: LD_ADDR_VAR 0 4
27882: PUSH
27883: LD_INT 0
27885: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27886: LD_VAR 0 1
27890: PPUSH
27891: CALL_OW 264
27895: PUSH
27896: LD_INT 81
27898: EQUAL
27899: NOT
27900: IFFALSE 27904
// exit ;
27902: GO 28274
// side := GetSide ( unit ) ;
27904: LD_ADDR_VAR 0 6
27908: PUSH
27909: LD_VAR 0 1
27913: PPUSH
27914: CALL_OW 255
27918: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
27919: LD_ADDR_VAR 0 5
27923: PUSH
27924: LD_EXP 99
27928: PPUSH
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL 35126 0 2
27938: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27939: LD_EXP 100
27943: PUSH
27944: LD_VAR 0 5
27948: ARRAY
27949: PUSH
27950: LD_EXP 101
27954: GREATEREQUAL
27955: IFFALSE 27959
// exit ;
27957: GO 28274
// ComMoveXY ( unit , x , y ) ;
27959: LD_VAR 0 1
27963: PPUSH
27964: LD_VAR 0 2
27968: PPUSH
27969: LD_VAR 0 3
27973: PPUSH
27974: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27978: LD_INT 35
27980: PPUSH
27981: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27985: LD_VAR 0 1
27989: PPUSH
27990: LD_VAR 0 2
27994: PPUSH
27995: LD_VAR 0 3
27999: PPUSH
28000: CALL 67182 0 3
28004: NOT
28005: IFFALSE 28018
28007: PUSH
28008: LD_VAR 0 1
28012: PPUSH
28013: CALL_OW 314
28017: AND
28018: IFFALSE 28022
// exit ;
28020: GO 28274
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28022: LD_VAR 0 2
28026: PPUSH
28027: LD_VAR 0 3
28031: PPUSH
28032: CALL_OW 428
28036: PUSH
28037: LD_VAR 0 1
28041: EQUAL
28042: IFFALSE 28056
28044: PUSH
28045: LD_VAR 0 1
28049: PPUSH
28050: CALL_OW 314
28054: NOT
28055: AND
28056: IFFALSE 27978
// if MineAtPos ( x , y ) then
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_VAR 0 3
28067: PPUSH
28068: CALL_OW 458
28072: IFFALSE 28076
// exit ;
28074: GO 28274
// if your_side = side then
28076: LD_OWVAR 2
28080: PUSH
28081: LD_VAR 0 6
28085: EQUAL
28086: IFFALSE 28105
// PlaySoundXY ( x , y , PlantMine ) ;
28088: LD_VAR 0 2
28092: PPUSH
28093: LD_VAR 0 3
28097: PPUSH
28098: LD_STRING PlantMine
28100: PPUSH
28101: CALL_OW 366
// repeat wait ( 1 ) ;
28105: LD_INT 1
28107: PPUSH
28108: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
28112: LD_VAR 0 2
28116: PPUSH
28117: LD_VAR 0 3
28121: PPUSH
28122: LD_VAR 0 6
28126: PPUSH
28127: LD_INT 0
28129: PPUSH
28130: CALL_OW 454
28134: IFFALSE 28105
// if MineAtPos ( x , y ) then
28136: LD_VAR 0 2
28140: PPUSH
28141: LD_VAR 0 3
28145: PPUSH
28146: CALL_OW 458
28150: IFFALSE 28266
// begin for i in minerMinesList [ index ] do
28152: LD_ADDR_VAR 0 7
28156: PUSH
28157: LD_EXP 100
28161: PUSH
28162: LD_VAR 0 5
28166: ARRAY
28167: PUSH
28168: FOR_IN
28169: IFFALSE 28211
// if i [ 1 ] = x and i [ 2 ] = y then
28171: LD_VAR 0 7
28175: PUSH
28176: LD_INT 1
28178: ARRAY
28179: PUSH
28180: LD_VAR 0 2
28184: EQUAL
28185: IFFALSE 28203
28187: PUSH
28188: LD_VAR 0 7
28192: PUSH
28193: LD_INT 2
28195: ARRAY
28196: PUSH
28197: LD_VAR 0 3
28201: EQUAL
28202: AND
28203: IFFALSE 28209
// exit ;
28205: POP
28206: POP
28207: GO 28274
28209: GO 28168
28211: POP
28212: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28213: LD_ADDR_EXP 100
28217: PUSH
28218: LD_EXP 100
28222: PPUSH
28223: LD_VAR 0 5
28227: PUSH
28228: LD_EXP 100
28232: PUSH
28233: LD_VAR 0 5
28237: ARRAY
28238: PUSH
28239: LD_INT 1
28241: PLUS
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PPUSH
28247: LD_VAR 0 2
28251: PUSH
28252: LD_VAR 0 3
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PPUSH
28261: CALL 35343 0 3
28265: ST_TO_ADDR
// end ; result := true ;
28266: LD_ADDR_VAR 0 4
28270: PUSH
28271: LD_INT 1
28273: ST_TO_ADDR
// end ;
28274: LD_VAR 0 4
28278: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28279: LD_INT 0
28281: PPUSH
28282: PPUSH
28283: PPUSH
// if not unit in minersList then
28284: LD_VAR 0 1
28288: PUSH
28289: LD_EXP 99
28293: IN
28294: NOT
28295: IFFALSE 28299
// exit ;
28297: GO 28506
// index := GetElementIndex ( minersList , unit ) ;
28299: LD_ADDR_VAR 0 6
28303: PUSH
28304: LD_EXP 99
28308: PPUSH
28309: LD_VAR 0 1
28313: PPUSH
28314: CALL 35126 0 2
28318: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28319: LD_ADDR_VAR 0 5
28323: PUSH
28324: DOUBLE
28325: LD_EXP 100
28329: PUSH
28330: LD_VAR 0 6
28334: ARRAY
28335: INC
28336: ST_TO_ADDR
28337: LD_INT 1
28339: PUSH
28340: FOR_DOWNTO
28341: IFFALSE 28504
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28343: LD_EXP 100
28347: PUSH
28348: LD_VAR 0 6
28352: ARRAY
28353: PUSH
28354: LD_VAR 0 5
28358: ARRAY
28359: PUSH
28360: LD_INT 1
28362: ARRAY
28363: PPUSH
28364: LD_EXP 100
28368: PUSH
28369: LD_VAR 0 6
28373: ARRAY
28374: PUSH
28375: LD_VAR 0 5
28379: ARRAY
28380: PUSH
28381: LD_INT 2
28383: ARRAY
28384: PPUSH
28385: LD_VAR 0 2
28389: PPUSH
28390: LD_VAR 0 3
28394: PPUSH
28395: CALL_OW 298
28399: PUSH
28400: LD_INT 6
28402: LESS
28403: IFFALSE 28502
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28405: LD_EXP 100
28409: PUSH
28410: LD_VAR 0 6
28414: ARRAY
28415: PUSH
28416: LD_VAR 0 5
28420: ARRAY
28421: PUSH
28422: LD_INT 1
28424: ARRAY
28425: PPUSH
28426: LD_EXP 100
28430: PUSH
28431: LD_VAR 0 6
28435: ARRAY
28436: PUSH
28437: LD_VAR 0 5
28441: ARRAY
28442: PUSH
28443: LD_INT 2
28445: ARRAY
28446: PPUSH
28447: LD_VAR 0 1
28451: PPUSH
28452: CALL_OW 255
28456: PPUSH
28457: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28461: LD_ADDR_EXP 100
28465: PUSH
28466: LD_EXP 100
28470: PPUSH
28471: LD_VAR 0 6
28475: PPUSH
28476: LD_EXP 100
28480: PUSH
28481: LD_VAR 0 6
28485: ARRAY
28486: PPUSH
28487: LD_VAR 0 5
28491: PPUSH
28492: CALL_OW 3
28496: PPUSH
28497: CALL_OW 1
28501: ST_TO_ADDR
// end ; end ;
28502: GO 28340
28504: POP
28505: POP
// end ;
28506: LD_VAR 0 4
28510: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28511: LD_INT 0
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
28517: PPUSH
28518: PPUSH
28519: PPUSH
28520: PPUSH
28521: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28522: LD_VAR 0 1
28526: PPUSH
28527: CALL_OW 264
28531: PUSH
28532: LD_INT 81
28534: EQUAL
28535: NOT
28536: IFTRUE 28551
28538: PUSH
28539: LD_VAR 0 1
28543: PUSH
28544: LD_EXP 99
28548: IN
28549: NOT
28550: OR
28551: IFFALSE 28555
// exit ;
28553: GO 28881
// index := GetElementIndex ( minersList , unit ) ;
28555: LD_ADDR_VAR 0 6
28559: PUSH
28560: LD_EXP 99
28564: PPUSH
28565: LD_VAR 0 1
28569: PPUSH
28570: CALL 35126 0 2
28574: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28575: LD_ADDR_VAR 0 8
28579: PUSH
28580: LD_EXP 101
28584: PUSH
28585: LD_EXP 100
28589: PUSH
28590: LD_VAR 0 6
28594: ARRAY
28595: MINUS
28596: ST_TO_ADDR
// if not minesFreeAmount then
28597: LD_VAR 0 8
28601: NOT
28602: IFFALSE 28606
// exit ;
28604: GO 28881
// tmp := [ ] ;
28606: LD_ADDR_VAR 0 7
28610: PUSH
28611: EMPTY
28612: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28613: LD_ADDR_VAR 0 5
28617: PUSH
28618: DOUBLE
28619: LD_INT 1
28621: DEC
28622: ST_TO_ADDR
28623: LD_VAR 0 8
28627: PUSH
28628: FOR_TO
28629: IFFALSE 28828
// begin _d := rand ( 0 , 5 ) ;
28631: LD_ADDR_VAR 0 11
28635: PUSH
28636: LD_INT 0
28638: PPUSH
28639: LD_INT 5
28641: PPUSH
28642: CALL_OW 12
28646: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28647: LD_ADDR_VAR 0 12
28651: PUSH
28652: LD_INT 2
28654: PPUSH
28655: LD_INT 6
28657: PPUSH
28658: CALL_OW 12
28662: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28663: LD_ADDR_VAR 0 9
28667: PUSH
28668: LD_VAR 0 2
28672: PPUSH
28673: LD_VAR 0 11
28677: PPUSH
28678: LD_VAR 0 12
28682: PPUSH
28683: CALL_OW 272
28687: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28688: LD_ADDR_VAR 0 10
28692: PUSH
28693: LD_VAR 0 3
28697: PPUSH
28698: LD_VAR 0 11
28702: PPUSH
28703: LD_VAR 0 12
28707: PPUSH
28708: CALL_OW 273
28712: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28713: LD_VAR 0 9
28717: PPUSH
28718: LD_VAR 0 10
28722: PPUSH
28723: CALL_OW 488
28727: IFFALSE 28751
28729: PUSH
28730: LD_VAR 0 9
28734: PUSH
28735: LD_VAR 0 10
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_VAR 0 7
28748: IN
28749: NOT
28750: AND
28751: IFFALSE 28770
28753: PUSH
28754: LD_VAR 0 9
28758: PPUSH
28759: LD_VAR 0 10
28763: PPUSH
28764: CALL_OW 458
28768: NOT
28769: AND
28770: IFFALSE 28812
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28772: LD_ADDR_VAR 0 7
28776: PUSH
28777: LD_VAR 0 7
28781: PPUSH
28782: LD_VAR 0 7
28786: PUSH
28787: LD_INT 1
28789: PLUS
28790: PPUSH
28791: LD_VAR 0 9
28795: PUSH
28796: LD_VAR 0 10
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 1
28809: ST_TO_ADDR
28810: GO 28826
// i := i - 1 ;
28812: LD_ADDR_VAR 0 5
28816: PUSH
28817: LD_VAR 0 5
28821: PUSH
28822: LD_INT 1
28824: MINUS
28825: ST_TO_ADDR
// end ;
28826: GO 28628
28828: POP
28829: POP
// for i in tmp do
28830: LD_ADDR_VAR 0 5
28834: PUSH
28835: LD_VAR 0 7
28839: PUSH
28840: FOR_IN
28841: IFFALSE 28879
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28843: LD_VAR 0 1
28847: PPUSH
28848: LD_VAR 0 5
28852: PUSH
28853: LD_INT 1
28855: ARRAY
28856: PPUSH
28857: LD_VAR 0 5
28861: PUSH
28862: LD_INT 2
28864: ARRAY
28865: PPUSH
28866: CALL 27872 0 3
28870: NOT
28871: IFFALSE 28877
// exit ;
28873: POP
28874: POP
28875: GO 28881
28877: GO 28840
28879: POP
28880: POP
// end ;
28881: LD_VAR 0 4
28885: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28886: LD_INT 0
28888: PPUSH
28889: PPUSH
28890: PPUSH
28891: PPUSH
28892: PPUSH
28893: PPUSH
28894: PPUSH
28895: PPUSH
28896: PPUSH
// if GetClass ( unit ) <> class_sniper then
28897: LD_VAR 0 1
28901: PPUSH
28902: CALL_OW 257
28906: PUSH
28907: LD_INT 5
28909: NONEQUAL
28910: IFFALSE 28914
// exit ;
28912: GO 29384
// dist := 8 ;
28914: LD_ADDR_VAR 0 5
28918: PUSH
28919: LD_INT 8
28921: ST_TO_ADDR
// viewRange := 12 ;
28922: LD_ADDR_VAR 0 8
28926: PUSH
28927: LD_INT 12
28929: ST_TO_ADDR
// side := GetSide ( unit ) ;
28930: LD_ADDR_VAR 0 6
28934: PUSH
28935: LD_VAR 0 1
28939: PPUSH
28940: CALL_OW 255
28944: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28945: LD_INT 61
28947: PPUSH
28948: LD_VAR 0 6
28952: PPUSH
28953: CALL_OW 321
28957: PUSH
28958: LD_INT 2
28960: EQUAL
28961: IFFALSE 28971
// viewRange := 16 ;
28963: LD_ADDR_VAR 0 8
28967: PUSH
28968: LD_INT 16
28970: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28971: LD_VAR 0 1
28975: PPUSH
28976: LD_VAR 0 2
28980: PPUSH
28981: LD_VAR 0 3
28985: PPUSH
28986: CALL_OW 297
28990: PUSH
28991: LD_VAR 0 5
28995: GREATER
28996: IFFALSE 29075
// begin ComMoveXY ( unit , x , y ) ;
28998: LD_VAR 0 1
29002: PPUSH
29003: LD_VAR 0 2
29007: PPUSH
29008: LD_VAR 0 3
29012: PPUSH
29013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29017: LD_INT 35
29019: PPUSH
29020: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29024: LD_VAR 0 1
29028: PPUSH
29029: LD_VAR 0 2
29033: PPUSH
29034: LD_VAR 0 3
29038: PPUSH
29039: CALL 67182 0 3
29043: NOT
29044: IFFALSE 29048
// exit ;
29046: GO 29384
// until GetDistUnitXY ( unit , x , y ) < dist ;
29048: LD_VAR 0 1
29052: PPUSH
29053: LD_VAR 0 2
29057: PPUSH
29058: LD_VAR 0 3
29062: PPUSH
29063: CALL_OW 297
29067: PUSH
29068: LD_VAR 0 5
29072: LESS
29073: IFFALSE 29017
// end ; ComTurnXY ( unit , x , y ) ;
29075: LD_VAR 0 1
29079: PPUSH
29080: LD_VAR 0 2
29084: PPUSH
29085: LD_VAR 0 3
29089: PPUSH
29090: CALL_OW 118
// repeat if Multiplayer then
29094: LD_OWVAR 4
29098: IFFALSE 29109
// wait ( 35 ) else
29100: LD_INT 35
29102: PPUSH
29103: CALL_OW 67
29107: GO 29116
// wait ( 5 ) ;
29109: LD_INT 5
29111: PPUSH
29112: CALL_OW 67
// _d := GetDir ( unit ) ;
29116: LD_ADDR_VAR 0 11
29120: PUSH
29121: LD_VAR 0 1
29125: PPUSH
29126: CALL_OW 254
29130: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
29131: LD_ADDR_VAR 0 7
29135: PUSH
29136: LD_VAR 0 1
29140: PPUSH
29141: CALL_OW 250
29145: PPUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 251
29155: PPUSH
29156: LD_VAR 0 2
29160: PPUSH
29161: LD_VAR 0 3
29165: PPUSH
29166: CALL 69818 0 4
29170: ST_TO_ADDR
// until dir = _d ;
29171: LD_VAR 0 7
29175: PUSH
29176: LD_VAR 0 11
29180: EQUAL
29181: IFFALSE 29094
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
29183: LD_ADDR_VAR 0 9
29187: PUSH
29188: LD_VAR 0 1
29192: PPUSH
29193: CALL_OW 250
29197: PPUSH
29198: LD_VAR 0 7
29202: PPUSH
29203: LD_VAR 0 5
29207: PPUSH
29208: CALL_OW 272
29212: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
29213: LD_ADDR_VAR 0 10
29217: PUSH
29218: LD_VAR 0 1
29222: PPUSH
29223: CALL_OW 251
29227: PPUSH
29228: LD_VAR 0 7
29232: PPUSH
29233: LD_VAR 0 5
29237: PPUSH
29238: CALL_OW 273
29242: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29243: LD_VAR 0 9
29247: PPUSH
29248: LD_VAR 0 10
29252: PPUSH
29253: CALL_OW 488
29257: NOT
29258: IFFALSE 29262
// exit ;
29260: GO 29384
// ComAnimCustom ( unit , 1 ) ;
29262: LD_VAR 0 1
29266: PPUSH
29267: LD_INT 1
29269: PPUSH
29270: CALL_OW 592
// p := 0 ;
29274: LD_ADDR_VAR 0 12
29278: PUSH
29279: LD_INT 0
29281: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29282: LD_VAR 0 9
29286: PPUSH
29287: LD_VAR 0 10
29291: PPUSH
29292: LD_VAR 0 6
29296: PPUSH
29297: LD_VAR 0 8
29301: PPUSH
29302: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
29306: LD_INT 35
29308: PPUSH
29309: CALL_OW 67
// p := Inc ( p ) ;
29313: LD_ADDR_VAR 0 12
29317: PUSH
29318: LD_VAR 0 12
29322: PPUSH
29323: CALL 69774 0 1
29327: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
29328: LD_VAR 0 12
29332: PUSH
29333: LD_INT 3
29335: EQUAL
29336: IFTRUE 29350
29338: PUSH
29339: LD_VAR 0 1
29343: PPUSH
29344: CALL_OW 302
29348: NOT
29349: OR
29350: IFTRUE 29363
29352: PUSH
29353: LD_VAR 0 1
29357: PPUSH
29358: CALL_OW 301
29362: OR
29363: IFFALSE 29306
// RemoveSeeing ( _x , _y , side ) ;
29365: LD_VAR 0 9
29369: PPUSH
29370: LD_VAR 0 10
29374: PPUSH
29375: LD_VAR 0 6
29379: PPUSH
29380: CALL_OW 331
// end ;
29384: LD_VAR 0 4
29388: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
29389: LD_INT 0
29391: PPUSH
29392: PPUSH
29393: PPUSH
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
// if not unit then
29402: LD_VAR 0 1
29406: NOT
29407: IFFALSE 29411
// exit ;
29409: GO 29682
// side := GetSide ( unit ) ;
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_VAR 0 1
29420: PPUSH
29421: CALL_OW 255
29425: ST_TO_ADDR
// x := GetX ( unit ) ;
29426: LD_ADDR_VAR 0 5
29430: PUSH
29431: LD_VAR 0 1
29435: PPUSH
29436: CALL_OW 250
29440: ST_TO_ADDR
// y := GetY ( unit ) ;
29441: LD_ADDR_VAR 0 6
29445: PUSH
29446: LD_VAR 0 1
29450: PPUSH
29451: CALL_OW 251
29455: ST_TO_ADDR
// r := 8 ;
29456: LD_ADDR_VAR 0 4
29460: PUSH
29461: LD_INT 8
29463: ST_TO_ADDR
// if x - r < 0 then
29464: LD_VAR 0 5
29468: PUSH
29469: LD_VAR 0 4
29473: MINUS
29474: PUSH
29475: LD_INT 0
29477: LESS
29478: IFFALSE 29490
// min_x := 0 else
29480: LD_ADDR_VAR 0 7
29484: PUSH
29485: LD_INT 0
29487: ST_TO_ADDR
29488: GO 29506
// min_x := x - r ;
29490: LD_ADDR_VAR 0 7
29494: PUSH
29495: LD_VAR 0 5
29499: PUSH
29500: LD_VAR 0 4
29504: MINUS
29505: ST_TO_ADDR
// if y - r < 0 then
29506: LD_VAR 0 6
29510: PUSH
29511: LD_VAR 0 4
29515: MINUS
29516: PUSH
29517: LD_INT 0
29519: LESS
29520: IFFALSE 29532
// min_y := 0 else
29522: LD_ADDR_VAR 0 8
29526: PUSH
29527: LD_INT 0
29529: ST_TO_ADDR
29530: GO 29548
// min_y := y - r ;
29532: LD_ADDR_VAR 0 8
29536: PUSH
29537: LD_VAR 0 6
29541: PUSH
29542: LD_VAR 0 4
29546: MINUS
29547: ST_TO_ADDR
// max_x := x + r ;
29548: LD_ADDR_VAR 0 9
29552: PUSH
29553: LD_VAR 0 5
29557: PUSH
29558: LD_VAR 0 4
29562: PLUS
29563: ST_TO_ADDR
// max_y := y + r ;
29564: LD_ADDR_VAR 0 10
29568: PUSH
29569: LD_VAR 0 6
29573: PUSH
29574: LD_VAR 0 4
29578: PLUS
29579: ST_TO_ADDR
// for _x = min_x to max_x do
29580: LD_ADDR_VAR 0 11
29584: PUSH
29585: DOUBLE
29586: LD_VAR 0 7
29590: DEC
29591: ST_TO_ADDR
29592: LD_VAR 0 9
29596: PUSH
29597: FOR_TO
29598: IFFALSE 29680
// for _y = min_y to max_y do
29600: LD_ADDR_VAR 0 12
29604: PUSH
29605: DOUBLE
29606: LD_VAR 0 8
29610: DEC
29611: ST_TO_ADDR
29612: LD_VAR 0 10
29616: PUSH
29617: FOR_TO
29618: IFFALSE 29676
// begin if not ValidHex ( _x , _y ) then
29620: LD_VAR 0 11
29624: PPUSH
29625: LD_VAR 0 12
29629: PPUSH
29630: CALL_OW 488
29634: NOT
29635: IFFALSE 29639
// continue ;
29637: GO 29617
// if MineAtPos ( _x , _y ) then
29639: LD_VAR 0 11
29643: PPUSH
29644: LD_VAR 0 12
29648: PPUSH
29649: CALL_OW 458
29653: IFFALSE 29674
// ViewMineAtPos ( _x , _y , side ) ;
29655: LD_VAR 0 11
29659: PPUSH
29660: LD_VAR 0 12
29664: PPUSH
29665: LD_VAR 0 3
29669: PPUSH
29670: CALL_OW 457
// end ;
29674: GO 29617
29676: POP
29677: POP
29678: GO 29597
29680: POP
29681: POP
// end ;
29682: LD_VAR 0 2
29686: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
29687: LD_INT 0
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
29694: PPUSH
29695: PPUSH
// if not units then
29696: LD_VAR 0 1
29700: NOT
29701: IFFALSE 29705
// exit ;
29703: GO 30169
// scaners := [ ] ;
29705: LD_ADDR_VAR 0 6
29709: PUSH
29710: EMPTY
29711: ST_TO_ADDR
// for i in units do
29712: LD_ADDR_VAR 0 3
29716: PUSH
29717: LD_VAR 0 1
29721: PUSH
29722: FOR_IN
29723: IFFALSE 29880
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
29725: LD_VAR 0 3
29729: PPUSH
29730: CALL_OW 264
29734: PUSH
29735: LD_INT 11
29737: NONEQUAL
29738: IFTRUE 29752
29740: PUSH
29741: LD_VAR 0 3
29745: PPUSH
29746: CALL_OW 302
29750: NOT
29751: OR
29752: IFTRUE 29769
29754: PUSH
29755: LD_VAR 0 3
29759: PPUSH
29760: CALL_OW 110
29764: PUSH
29765: LD_INT 502
29767: EQUAL
29768: OR
29769: IFFALSE 29773
// continue ;
29771: GO 29722
// ComStop ( i ) ;
29773: LD_VAR 0 3
29777: PPUSH
29778: CALL_OW 141
// x := GetX ( i ) ;
29782: LD_ADDR_VAR 0 4
29786: PUSH
29787: LD_VAR 0 3
29791: PPUSH
29792: CALL_OW 250
29796: ST_TO_ADDR
// y := GetY ( i ) ;
29797: LD_ADDR_VAR 0 5
29801: PUSH
29802: LD_VAR 0 3
29806: PPUSH
29807: CALL_OW 251
29811: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29812: LD_VAR 0 3
29816: PPUSH
29817: CALL_OW 255
29821: PUSH
29822: LD_OWVAR 2
29826: EQUAL
29827: IFFALSE 29846
// PlaySoundXY ( x , y , mineDetector ) ;
29829: LD_VAR 0 4
29833: PPUSH
29834: LD_VAR 0 5
29838: PPUSH
29839: LD_STRING mineDetector
29841: PPUSH
29842: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29846: LD_ADDR_VAR 0 6
29850: PUSH
29851: LD_VAR 0 6
29855: PPUSH
29856: LD_VAR 0 3
29860: PPUSH
29861: CALL 68401 0 2
29865: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29866: LD_VAR 0 3
29870: PPUSH
29871: LD_INT 502
29873: PPUSH
29874: CALL_OW 109
// end ;
29878: GO 29722
29880: POP
29881: POP
// if not scaners then
29882: LD_VAR 0 6
29886: NOT
29887: IFFALSE 29891
// exit ;
29889: GO 30169
// wait ( 3 ) ;
29891: LD_INT 3
29893: PPUSH
29894: CALL_OW 67
// timer := 6 ;
29898: LD_ADDR_VAR 0 7
29902: PUSH
29903: LD_INT 6
29905: ST_TO_ADDR
// repeat for i in scaners do
29906: LD_ADDR_VAR 0 3
29910: PUSH
29911: LD_VAR 0 6
29915: PUSH
29916: FOR_IN
29917: IFFALSE 30067
// begin side := GetSide ( i ) ;
29919: LD_ADDR_VAR 0 8
29923: PUSH
29924: LD_VAR 0 3
29928: PPUSH
29929: CALL_OW 255
29933: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29934: LD_VAR 0 3
29938: PPUSH
29939: CALL_OW 302
29943: NOT
29944: IFTRUE 29957
29946: PUSH
29947: LD_VAR 0 3
29951: PPUSH
29952: CALL_OW 314
29956: OR
29957: IFTRUE 29988
29959: PUSH
29960: LD_VAR 0 3
29964: PPUSH
29965: CALL_OW 263
29969: PUSH
29970: LD_INT 1
29972: EQUAL
29973: IFFALSE 29987
29975: PUSH
29976: LD_VAR 0 3
29980: PPUSH
29981: CALL_OW 311
29985: NOT
29986: AND
29987: OR
29988: IFFALSE 30032
// begin SetUnitDisplayNumber ( i , 0 ) ;
29990: LD_VAR 0 3
29994: PPUSH
29995: LD_INT 0
29997: PPUSH
29998: CALL_OW 505
// SetTag ( i , 0 ) ;
30002: LD_VAR 0 3
30006: PPUSH
30007: LD_INT 0
30009: PPUSH
30010: CALL_OW 109
// scaners := scaners diff i ;
30014: LD_ADDR_VAR 0 6
30018: PUSH
30019: LD_VAR 0 6
30023: PUSH
30024: LD_VAR 0 3
30028: DIFF
30029: ST_TO_ADDR
// continue ;
30030: GO 29916
// end ; if side in [ your_side , 9 ] then
30032: LD_VAR 0 8
30036: PUSH
30037: LD_OWVAR 2
30041: PUSH
30042: LD_INT 9
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: IN
30049: IFFALSE 30065
// SetUnitDisplayNumber ( i , timer ) ;
30051: LD_VAR 0 3
30055: PPUSH
30056: LD_VAR 0 7
30060: PPUSH
30061: CALL_OW 505
// end ;
30065: GO 29916
30067: POP
30068: POP
// if not scaners then
30069: LD_VAR 0 6
30073: NOT
30074: IFFALSE 30078
// exit ;
30076: GO 30169
// timer := Dec ( timer ) ;
30078: LD_ADDR_VAR 0 7
30082: PUSH
30083: LD_VAR 0 7
30087: PPUSH
30088: CALL 69796 0 1
30092: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30093: LD_INT 35
30095: PPUSH
30096: CALL_OW 67
// until timer = 0 ;
30100: LD_VAR 0 7
30104: PUSH
30105: LD_INT 0
30107: EQUAL
30108: IFFALSE 29906
// if not scaners then
30110: LD_VAR 0 6
30114: NOT
30115: IFFALSE 30119
// exit ;
30117: GO 30169
// for i in scaners do
30119: LD_ADDR_VAR 0 3
30123: PUSH
30124: LD_VAR 0 6
30128: PUSH
30129: FOR_IN
30130: IFFALSE 30167
// begin SetUnitDisplayNumber ( i , 0 ) ;
30132: LD_VAR 0 3
30136: PPUSH
30137: LD_INT 0
30139: PPUSH
30140: CALL_OW 505
// SetTag ( i , 0 ) ;
30144: LD_VAR 0 3
30148: PPUSH
30149: LD_INT 0
30151: PPUSH
30152: CALL_OW 109
// RevealDetectorMine ( i ) ;
30156: LD_VAR 0 3
30160: PPUSH
30161: CALL 29389 0 1
// end ;
30165: GO 30129
30167: POP
30168: POP
// end ;
30169: LD_VAR 0 2
30173: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
30174: LD_INT 0
30176: PPUSH
// if p1 = mine_detector_mode then
30177: LD_VAR 0 2
30181: PUSH
30182: LD_INT 103
30184: EQUAL
30185: IFFALSE 30196
// DetectMine ( units ) ;
30187: LD_VAR 0 1
30191: PPUSH
30192: CALL 29687 0 1
// end ; end_of_file
30196: LD_VAR 0 7
30200: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
// if exist_mode then
30205: LD_VAR 0 2
30209: IFFALSE 30255
// begin unit := CreateCharacter ( prefix & ident ) ;
30211: LD_ADDR_VAR 0 5
30215: PUSH
30216: LD_VAR 0 3
30220: PUSH
30221: LD_VAR 0 1
30225: STR
30226: PPUSH
30227: CALL_OW 34
30231: ST_TO_ADDR
// if unit then
30232: LD_VAR 0 5
30236: IFFALSE 30253
// DeleteCharacters ( prefix & ident ) ;
30238: LD_VAR 0 3
30242: PUSH
30243: LD_VAR 0 1
30247: STR
30248: PPUSH
30249: CALL_OW 40
// end else
30253: GO 30270
// unit := NewCharacter ( ident ) ;
30255: LD_ADDR_VAR 0 5
30259: PUSH
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 25
30269: ST_TO_ADDR
// result := unit ;
30270: LD_ADDR_VAR 0 4
30274: PUSH
30275: LD_VAR 0 5
30279: ST_TO_ADDR
// end ;
30280: LD_VAR 0 4
30284: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30285: LD_INT 0
30287: PPUSH
30288: PPUSH
// if exist_mode then
30289: LD_VAR 0 2
30293: IFFALSE 30318
// unit := CreateCharacter ( prefix & ident ) else
30295: LD_ADDR_VAR 0 5
30299: PUSH
30300: LD_VAR 0 3
30304: PUSH
30305: LD_VAR 0 1
30309: STR
30310: PPUSH
30311: CALL_OW 34
30315: ST_TO_ADDR
30316: GO 30333
// unit := NewCharacter ( ident ) ;
30318: LD_ADDR_VAR 0 5
30322: PUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL_OW 25
30332: ST_TO_ADDR
// result := unit ;
30333: LD_ADDR_VAR 0 4
30337: PUSH
30338: LD_VAR 0 5
30342: ST_TO_ADDR
// end ;
30343: LD_VAR 0 4
30347: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30348: LD_INT 0
30350: PPUSH
30351: PPUSH
// if not side or not nation then
30352: LD_VAR 0 1
30356: NOT
30357: IFTRUE 30366
30359: PUSH
30360: LD_VAR 0 2
30364: NOT
30365: OR
30366: IFFALSE 30370
// exit ;
30368: GO 31164
// case nation of nation_american :
30370: LD_VAR 0 2
30374: PUSH
30375: LD_INT 1
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30383
30381: GO 30605
30383: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30384: LD_ADDR_VAR 0 4
30388: PUSH
30389: LD_INT 35
30391: PUSH
30392: LD_INT 45
30394: PUSH
30395: LD_INT 46
30397: PUSH
30398: LD_INT 47
30400: PUSH
30401: LD_INT 82
30403: PUSH
30404: LD_INT 83
30406: PUSH
30407: LD_INT 84
30409: PUSH
30410: LD_INT 85
30412: PUSH
30413: LD_INT 86
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: LD_INT 6
30424: PUSH
30425: LD_INT 15
30427: PUSH
30428: LD_INT 16
30430: PUSH
30431: LD_INT 7
30433: PUSH
30434: LD_INT 12
30436: PUSH
30437: LD_INT 13
30439: PUSH
30440: LD_INT 10
30442: PUSH
30443: LD_INT 14
30445: PUSH
30446: LD_INT 20
30448: PUSH
30449: LD_INT 21
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_INT 25
30457: PUSH
30458: LD_INT 32
30460: PUSH
30461: LD_INT 27
30463: PUSH
30464: LD_INT 36
30466: PUSH
30467: LD_INT 69
30469: PUSH
30470: LD_INT 39
30472: PUSH
30473: LD_INT 34
30475: PUSH
30476: LD_INT 40
30478: PUSH
30479: LD_INT 48
30481: PUSH
30482: LD_INT 49
30484: PUSH
30485: LD_INT 50
30487: PUSH
30488: LD_INT 51
30490: PUSH
30491: LD_INT 52
30493: PUSH
30494: LD_INT 53
30496: PUSH
30497: LD_INT 54
30499: PUSH
30500: LD_INT 55
30502: PUSH
30503: LD_INT 56
30505: PUSH
30506: LD_INT 57
30508: PUSH
30509: LD_INT 58
30511: PUSH
30512: LD_INT 59
30514: PUSH
30515: LD_INT 60
30517: PUSH
30518: LD_INT 61
30520: PUSH
30521: LD_INT 62
30523: PUSH
30524: LD_INT 80
30526: PUSH
30527: LD_INT 82
30529: PUSH
30530: LD_INT 83
30532: PUSH
30533: LD_INT 84
30535: PUSH
30536: LD_INT 85
30538: PUSH
30539: LD_INT 86
30541: PUSH
30542: LD_INT 90
30544: PUSH
30545: LD_INT 93
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: ST_TO_ADDR
30603: GO 31086
30605: LD_INT 2
30607: DOUBLE
30608: EQUAL
30609: IFTRUE 30613
30611: GO 30847
30613: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30614: LD_ADDR_VAR 0 4
30618: PUSH
30619: LD_INT 35
30621: PUSH
30622: LD_INT 45
30624: PUSH
30625: LD_INT 46
30627: PUSH
30628: LD_INT 47
30630: PUSH
30631: LD_INT 82
30633: PUSH
30634: LD_INT 83
30636: PUSH
30637: LD_INT 84
30639: PUSH
30640: LD_INT 85
30642: PUSH
30643: LD_INT 87
30645: PUSH
30646: LD_INT 70
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 11
30654: PUSH
30655: LD_INT 3
30657: PUSH
30658: LD_INT 4
30660: PUSH
30661: LD_INT 5
30663: PUSH
30664: LD_INT 6
30666: PUSH
30667: LD_INT 15
30669: PUSH
30670: LD_INT 18
30672: PUSH
30673: LD_INT 7
30675: PUSH
30676: LD_INT 17
30678: PUSH
30679: LD_INT 8
30681: PUSH
30682: LD_INT 20
30684: PUSH
30685: LD_INT 21
30687: PUSH
30688: LD_INT 22
30690: PUSH
30691: LD_INT 72
30693: PUSH
30694: LD_INT 26
30696: PUSH
30697: LD_INT 69
30699: PUSH
30700: LD_INT 39
30702: PUSH
30703: LD_INT 40
30705: PUSH
30706: LD_INT 41
30708: PUSH
30709: LD_INT 42
30711: PUSH
30712: LD_INT 43
30714: PUSH
30715: LD_INT 48
30717: PUSH
30718: LD_INT 49
30720: PUSH
30721: LD_INT 50
30723: PUSH
30724: LD_INT 51
30726: PUSH
30727: LD_INT 52
30729: PUSH
30730: LD_INT 53
30732: PUSH
30733: LD_INT 54
30735: PUSH
30736: LD_INT 55
30738: PUSH
30739: LD_INT 56
30741: PUSH
30742: LD_INT 60
30744: PUSH
30745: LD_INT 61
30747: PUSH
30748: LD_INT 62
30750: PUSH
30751: LD_INT 66
30753: PUSH
30754: LD_INT 67
30756: PUSH
30757: LD_INT 68
30759: PUSH
30760: LD_INT 81
30762: PUSH
30763: LD_INT 82
30765: PUSH
30766: LD_INT 83
30768: PUSH
30769: LD_INT 84
30771: PUSH
30772: LD_INT 85
30774: PUSH
30775: LD_INT 87
30777: PUSH
30778: LD_INT 88
30780: PUSH
30781: LD_INT 92
30783: PUSH
30784: LD_INT 94
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: ST_TO_ADDR
30845: GO 31086
30847: LD_INT 3
30849: DOUBLE
30850: EQUAL
30851: IFTRUE 30855
30853: GO 31085
30855: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30856: LD_ADDR_VAR 0 4
30860: PUSH
30861: LD_INT 46
30863: PUSH
30864: LD_INT 47
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: LD_INT 82
30875: PUSH
30876: LD_INT 83
30878: PUSH
30879: LD_INT 84
30881: PUSH
30882: LD_INT 85
30884: PUSH
30885: LD_INT 86
30887: PUSH
30888: LD_INT 11
30890: PUSH
30891: LD_INT 9
30893: PUSH
30894: LD_INT 20
30896: PUSH
30897: LD_INT 19
30899: PUSH
30900: LD_INT 21
30902: PUSH
30903: LD_INT 24
30905: PUSH
30906: LD_INT 22
30908: PUSH
30909: LD_INT 25
30911: PUSH
30912: LD_INT 28
30914: PUSH
30915: LD_INT 29
30917: PUSH
30918: LD_INT 30
30920: PUSH
30921: LD_INT 31
30923: PUSH
30924: LD_INT 37
30926: PUSH
30927: LD_INT 38
30929: PUSH
30930: LD_INT 32
30932: PUSH
30933: LD_INT 27
30935: PUSH
30936: LD_INT 33
30938: PUSH
30939: LD_INT 69
30941: PUSH
30942: LD_INT 39
30944: PUSH
30945: LD_INT 34
30947: PUSH
30948: LD_INT 40
30950: PUSH
30951: LD_INT 71
30953: PUSH
30954: LD_INT 23
30956: PUSH
30957: LD_INT 44
30959: PUSH
30960: LD_INT 48
30962: PUSH
30963: LD_INT 49
30965: PUSH
30966: LD_INT 50
30968: PUSH
30969: LD_INT 51
30971: PUSH
30972: LD_INT 52
30974: PUSH
30975: LD_INT 53
30977: PUSH
30978: LD_INT 54
30980: PUSH
30981: LD_INT 55
30983: PUSH
30984: LD_INT 56
30986: PUSH
30987: LD_INT 57
30989: PUSH
30990: LD_INT 58
30992: PUSH
30993: LD_INT 59
30995: PUSH
30996: LD_INT 63
30998: PUSH
30999: LD_INT 64
31001: PUSH
31002: LD_INT 65
31004: PUSH
31005: LD_INT 82
31007: PUSH
31008: LD_INT 83
31010: PUSH
31011: LD_INT 84
31013: PUSH
31014: LD_INT 85
31016: PUSH
31017: LD_INT 86
31019: PUSH
31020: LD_INT 89
31022: PUSH
31023: LD_INT 91
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: ST_TO_ADDR
31083: GO 31086
31085: POP
// if state > - 1 and state < 3 then
31086: LD_VAR 0 3
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: GREATER
31095: IFFALSE 31107
31097: PUSH
31098: LD_VAR 0 3
31102: PUSH
31103: LD_INT 3
31105: LESS
31106: AND
31107: IFFALSE 31164
// for i in result do
31109: LD_ADDR_VAR 0 5
31113: PUSH
31114: LD_VAR 0 4
31118: PUSH
31119: FOR_IN
31120: IFFALSE 31162
// if GetTech ( i , side ) <> state then
31122: LD_VAR 0 5
31126: PPUSH
31127: LD_VAR 0 1
31131: PPUSH
31132: CALL_OW 321
31136: PUSH
31137: LD_VAR 0 3
31141: NONEQUAL
31142: IFFALSE 31160
// result := result diff i ;
31144: LD_ADDR_VAR 0 4
31148: PUSH
31149: LD_VAR 0 4
31153: PUSH
31154: LD_VAR 0 5
31158: DIFF
31159: ST_TO_ADDR
31160: GO 31119
31162: POP
31163: POP
// end ;
31164: LD_VAR 0 4
31168: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31169: LD_INT 0
31171: PPUSH
31172: PPUSH
31173: PPUSH
// result := true ;
31174: LD_ADDR_VAR 0 3
31178: PUSH
31179: LD_INT 1
31181: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31182: LD_ADDR_VAR 0 5
31186: PUSH
31187: LD_VAR 0 2
31191: PPUSH
31192: CALL_OW 480
31196: ST_TO_ADDR
// if not tmp then
31197: LD_VAR 0 5
31201: NOT
31202: IFFALSE 31206
// exit ;
31204: GO 31255
// for i in tmp do
31206: LD_ADDR_VAR 0 4
31210: PUSH
31211: LD_VAR 0 5
31215: PUSH
31216: FOR_IN
31217: IFFALSE 31253
// if GetTech ( i , side ) <> state_researched then
31219: LD_VAR 0 4
31223: PPUSH
31224: LD_VAR 0 1
31228: PPUSH
31229: CALL_OW 321
31233: PUSH
31234: LD_INT 2
31236: NONEQUAL
31237: IFFALSE 31251
// begin result := false ;
31239: LD_ADDR_VAR 0 3
31243: PUSH
31244: LD_INT 0
31246: ST_TO_ADDR
// exit ;
31247: POP
31248: POP
31249: GO 31255
// end ;
31251: GO 31216
31253: POP
31254: POP
// end ;
31255: LD_VAR 0 3
31259: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31260: LD_INT 0
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
31274: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31275: LD_VAR 0 1
31279: NOT
31280: IFTRUE 31297
31282: PUSH
31283: LD_VAR 0 1
31287: PPUSH
31288: CALL_OW 257
31292: PUSH
31293: LD_INT 9
31295: NONEQUAL
31296: OR
31297: IFFALSE 31301
// exit ;
31299: GO 31880
// side := GetSide ( unit ) ;
31301: LD_ADDR_VAR 0 9
31305: PUSH
31306: LD_VAR 0 1
31310: PPUSH
31311: CALL_OW 255
31315: ST_TO_ADDR
// tech_space := tech_spacanom ;
31316: LD_ADDR_VAR 0 12
31320: PUSH
31321: LD_INT 29
31323: ST_TO_ADDR
// tech_time := tech_taurad ;
31324: LD_ADDR_VAR 0 13
31328: PUSH
31329: LD_INT 28
31331: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31332: LD_ADDR_VAR 0 11
31336: PUSH
31337: LD_VAR 0 1
31341: PPUSH
31342: CALL_OW 310
31346: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31347: LD_VAR 0 11
31351: PPUSH
31352: CALL_OW 247
31356: PUSH
31357: LD_INT 2
31359: EQUAL
31360: IFFALSE 31364
// exit ;
31362: GO 31880
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31364: LD_ADDR_VAR 0 8
31368: PUSH
31369: LD_INT 81
31371: PUSH
31372: LD_VAR 0 9
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 3
31383: PUSH
31384: LD_INT 21
31386: PUSH
31387: LD_INT 3
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PPUSH
31402: CALL_OW 69
31406: ST_TO_ADDR
// if not tmp then
31407: LD_VAR 0 8
31411: NOT
31412: IFFALSE 31416
// exit ;
31414: GO 31880
// if in_unit then
31416: LD_VAR 0 11
31420: IFFALSE 31444
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31422: LD_ADDR_VAR 0 10
31426: PUSH
31427: LD_VAR 0 8
31431: PPUSH
31432: LD_VAR 0 11
31436: PPUSH
31437: CALL_OW 74
31441: ST_TO_ADDR
31442: GO 31464
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31444: LD_ADDR_VAR 0 10
31448: PUSH
31449: LD_VAR 0 8
31453: PPUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL_OW 74
31463: ST_TO_ADDR
// if not enemy then
31464: LD_VAR 0 10
31468: NOT
31469: IFFALSE 31473
// exit ;
31471: GO 31880
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31473: LD_VAR 0 11
31477: IFFALSE 31499
31479: PUSH
31480: LD_VAR 0 11
31484: PPUSH
31485: LD_VAR 0 10
31489: PPUSH
31490: CALL_OW 296
31494: PUSH
31495: LD_INT 13
31497: GREATER
31498: AND
31499: IFTRUE 31521
31501: PUSH
31502: LD_VAR 0 1
31506: PPUSH
31507: LD_VAR 0 10
31511: PPUSH
31512: CALL_OW 296
31516: PUSH
31517: LD_INT 12
31519: GREATER
31520: OR
31521: IFFALSE 31525
// exit ;
31523: GO 31880
// missile := [ 1 ] ;
31525: LD_ADDR_VAR 0 14
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: EMPTY
31534: LIST
31535: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31536: LD_VAR 0 9
31540: PPUSH
31541: LD_VAR 0 12
31545: PPUSH
31546: CALL_OW 325
31550: IFFALSE 31579
// missile := Replace ( missile , missile + 1 , 2 ) ;
31552: LD_ADDR_VAR 0 14
31556: PUSH
31557: LD_VAR 0 14
31561: PPUSH
31562: LD_VAR 0 14
31566: PUSH
31567: LD_INT 1
31569: PLUS
31570: PPUSH
31571: LD_INT 2
31573: PPUSH
31574: CALL_OW 1
31578: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31579: LD_VAR 0 9
31583: PPUSH
31584: LD_VAR 0 13
31588: PPUSH
31589: CALL_OW 325
31593: IFFALSE 31617
31595: PUSH
31596: LD_VAR 0 10
31600: PPUSH
31601: CALL_OW 255
31605: PPUSH
31606: LD_VAR 0 13
31610: PPUSH
31611: CALL_OW 325
31615: NOT
31616: AND
31617: IFFALSE 31646
// missile := Replace ( missile , missile + 1 , 3 ) ;
31619: LD_ADDR_VAR 0 14
31623: PUSH
31624: LD_VAR 0 14
31628: PPUSH
31629: LD_VAR 0 14
31633: PUSH
31634: LD_INT 1
31636: PLUS
31637: PPUSH
31638: LD_INT 3
31640: PPUSH
31641: CALL_OW 1
31645: ST_TO_ADDR
// if missile < 2 then
31646: LD_VAR 0 14
31650: PUSH
31651: LD_INT 2
31653: LESS
31654: IFFALSE 31658
// exit ;
31656: GO 31880
// x := GetX ( enemy ) ;
31658: LD_ADDR_VAR 0 4
31662: PUSH
31663: LD_VAR 0 10
31667: PPUSH
31668: CALL_OW 250
31672: ST_TO_ADDR
// y := GetY ( enemy ) ;
31673: LD_ADDR_VAR 0 5
31677: PUSH
31678: LD_VAR 0 10
31682: PPUSH
31683: CALL_OW 251
31687: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31688: LD_ADDR_VAR 0 6
31692: PUSH
31693: LD_VAR 0 4
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PPUSH
31702: LD_INT 1
31704: PPUSH
31705: CALL_OW 12
31709: PLUS
31710: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31711: LD_ADDR_VAR 0 7
31715: PUSH
31716: LD_VAR 0 5
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PPUSH
31725: LD_INT 1
31727: PPUSH
31728: CALL_OW 12
31732: PLUS
31733: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31734: LD_VAR 0 6
31738: PPUSH
31739: LD_VAR 0 7
31743: PPUSH
31744: CALL_OW 488
31748: NOT
31749: IFFALSE 31771
// begin _x := x ;
31751: LD_ADDR_VAR 0 6
31755: PUSH
31756: LD_VAR 0 4
31760: ST_TO_ADDR
// _y := y ;
31761: LD_ADDR_VAR 0 7
31765: PUSH
31766: LD_VAR 0 5
31770: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31771: LD_ADDR_VAR 0 3
31775: PUSH
31776: LD_INT 1
31778: PPUSH
31779: LD_VAR 0 14
31783: PPUSH
31784: CALL_OW 12
31788: ST_TO_ADDR
// case i of 1 :
31789: LD_VAR 0 3
31793: PUSH
31794: LD_INT 1
31796: DOUBLE
31797: EQUAL
31798: IFTRUE 31802
31800: GO 31819
31802: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31803: LD_VAR 0 1
31807: PPUSH
31808: LD_VAR 0 10
31812: PPUSH
31813: CALL_OW 115
31817: GO 31880
31819: LD_INT 2
31821: DOUBLE
31822: EQUAL
31823: IFTRUE 31827
31825: GO 31849
31827: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31828: LD_VAR 0 1
31832: PPUSH
31833: LD_VAR 0 6
31837: PPUSH
31838: LD_VAR 0 7
31842: PPUSH
31843: CALL_OW 153
31847: GO 31880
31849: LD_INT 3
31851: DOUBLE
31852: EQUAL
31853: IFTRUE 31857
31855: GO 31879
31857: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31858: LD_VAR 0 1
31862: PPUSH
31863: LD_VAR 0 6
31867: PPUSH
31868: LD_VAR 0 7
31872: PPUSH
31873: CALL_OW 154
31877: GO 31880
31879: POP
// end ;
31880: LD_VAR 0 2
31884: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31885: LD_INT 0
31887: PPUSH
31888: PPUSH
31889: PPUSH
31890: PPUSH
31891: PPUSH
31892: PPUSH
// if not unit or not building then
31893: LD_VAR 0 1
31897: NOT
31898: IFTRUE 31907
31900: PUSH
31901: LD_VAR 0 2
31905: NOT
31906: OR
31907: IFFALSE 31911
// exit ;
31909: GO 32069
// x := GetX ( building ) ;
31911: LD_ADDR_VAR 0 5
31915: PUSH
31916: LD_VAR 0 2
31920: PPUSH
31921: CALL_OW 250
31925: ST_TO_ADDR
// y := GetY ( building ) ;
31926: LD_ADDR_VAR 0 6
31930: PUSH
31931: LD_VAR 0 2
31935: PPUSH
31936: CALL_OW 251
31940: ST_TO_ADDR
// for i := 0 to 5 do
31941: LD_ADDR_VAR 0 4
31945: PUSH
31946: DOUBLE
31947: LD_INT 0
31949: DEC
31950: ST_TO_ADDR
31951: LD_INT 5
31953: PUSH
31954: FOR_TO
31955: IFFALSE 32067
// begin _x := ShiftX ( x , i , 3 ) ;
31957: LD_ADDR_VAR 0 7
31961: PUSH
31962: LD_VAR 0 5
31966: PPUSH
31967: LD_VAR 0 4
31971: PPUSH
31972: LD_INT 3
31974: PPUSH
31975: CALL_OW 272
31979: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31980: LD_ADDR_VAR 0 8
31984: PUSH
31985: LD_VAR 0 6
31989: PPUSH
31990: LD_VAR 0 4
31994: PPUSH
31995: LD_INT 3
31997: PPUSH
31998: CALL_OW 273
32002: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32003: LD_VAR 0 7
32007: PPUSH
32008: LD_VAR 0 8
32012: PPUSH
32013: CALL_OW 488
32017: NOT
32018: IFFALSE 32022
// continue ;
32020: GO 31954
// if HexInfo ( _x , _y ) = 0 then
32022: LD_VAR 0 7
32026: PPUSH
32027: LD_VAR 0 8
32031: PPUSH
32032: CALL_OW 428
32036: PUSH
32037: LD_INT 0
32039: EQUAL
32040: IFFALSE 32065
// begin ComMoveXY ( unit , _x , _y ) ;
32042: LD_VAR 0 1
32046: PPUSH
32047: LD_VAR 0 7
32051: PPUSH
32052: LD_VAR 0 8
32056: PPUSH
32057: CALL_OW 111
// exit ;
32061: POP
32062: POP
32063: GO 32069
// end ; end ;
32065: GO 31954
32067: POP
32068: POP
// end ;
32069: LD_VAR 0 3
32073: RET
// export function ScanBase ( side , base_area ) ; begin
32074: LD_INT 0
32076: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_VAR 0 2
32086: PPUSH
32087: LD_INT 81
32089: PUSH
32090: LD_VAR 0 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PPUSH
32099: CALL_OW 70
32103: ST_TO_ADDR
// end ;
32104: LD_VAR 0 3
32108: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32109: LD_INT 0
32111: PPUSH
32112: PPUSH
32113: PPUSH
32114: PPUSH
// result := false ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_INT 0
32122: ST_TO_ADDR
// side := GetSide ( unit ) ;
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_VAR 0 1
32132: PPUSH
32133: CALL_OW 255
32137: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32138: LD_ADDR_VAR 0 4
32142: PUSH
32143: LD_VAR 0 1
32147: PPUSH
32148: CALL_OW 248
32152: ST_TO_ADDR
// case nat of 1 :
32153: LD_VAR 0 4
32157: PUSH
32158: LD_INT 1
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32166
32164: GO 32177
32166: POP
// tech := tech_lassight ; 2 :
32167: LD_ADDR_VAR 0 5
32171: PUSH
32172: LD_INT 12
32174: ST_TO_ADDR
32175: GO 32216
32177: LD_INT 2
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32196
32185: POP
// tech := tech_mortar ; 3 :
32186: LD_ADDR_VAR 0 5
32190: PUSH
32191: LD_INT 41
32193: ST_TO_ADDR
32194: GO 32216
32196: LD_INT 3
32198: DOUBLE
32199: EQUAL
32200: IFTRUE 32204
32202: GO 32215
32204: POP
// tech := tech_bazooka ; end ;
32205: LD_ADDR_VAR 0 5
32209: PUSH
32210: LD_INT 44
32212: ST_TO_ADDR
32213: GO 32216
32215: POP
// if Researched ( side , tech ) then
32216: LD_VAR 0 3
32220: PPUSH
32221: LD_VAR 0 5
32225: PPUSH
32226: CALL_OW 325
32230: IFFALSE 32257
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32232: LD_ADDR_VAR 0 2
32236: PUSH
32237: LD_INT 5
32239: PUSH
32240: LD_INT 8
32242: PUSH
32243: LD_INT 9
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: PUSH
32251: LD_VAR 0 4
32255: ARRAY
32256: ST_TO_ADDR
// end ;
32257: LD_VAR 0 2
32261: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32262: LD_INT 0
32264: PPUSH
32265: PPUSH
32266: PPUSH
// if not mines then
32267: LD_VAR 0 2
32271: NOT
32272: IFFALSE 32276
// exit ;
32274: GO 32420
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32276: LD_ADDR_VAR 0 5
32280: PUSH
32281: LD_INT 81
32283: PUSH
32284: LD_VAR 0 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 3
32295: PUSH
32296: LD_INT 21
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PPUSH
32314: CALL_OW 69
32318: ST_TO_ADDR
// for i in mines do
32319: LD_ADDR_VAR 0 4
32323: PUSH
32324: LD_VAR 0 2
32328: PUSH
32329: FOR_IN
32330: IFFALSE 32418
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32332: LD_VAR 0 4
32336: PUSH
32337: LD_INT 1
32339: ARRAY
32340: PPUSH
32341: LD_VAR 0 4
32345: PUSH
32346: LD_INT 2
32348: ARRAY
32349: PPUSH
32350: CALL_OW 458
32354: NOT
32355: IFFALSE 32359
// continue ;
32357: GO 32329
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32359: LD_VAR 0 4
32363: PUSH
32364: LD_INT 1
32366: ARRAY
32367: PPUSH
32368: LD_VAR 0 4
32372: PUSH
32373: LD_INT 2
32375: ARRAY
32376: PPUSH
32377: CALL_OW 428
32381: PUSH
32382: LD_VAR 0 5
32386: IN
32387: IFFALSE 32416
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32389: LD_VAR 0 4
32393: PUSH
32394: LD_INT 1
32396: ARRAY
32397: PPUSH
32398: LD_VAR 0 4
32402: PUSH
32403: LD_INT 2
32405: ARRAY
32406: PPUSH
32407: LD_VAR 0 1
32411: PPUSH
32412: CALL_OW 456
// end ;
32416: GO 32329
32418: POP
32419: POP
// end ;
32420: LD_VAR 0 3
32424: RET
// export function Count ( array ) ; begin
32425: LD_INT 0
32427: PPUSH
// result := array + 0 ;
32428: LD_ADDR_VAR 0 2
32432: PUSH
32433: LD_VAR 0 1
32437: PUSH
32438: LD_INT 0
32440: PLUS
32441: ST_TO_ADDR
// end ;
32442: LD_VAR 0 2
32446: RET
// export function IsEmpty ( building ) ; begin
32447: LD_INT 0
32449: PPUSH
// if not building then
32450: LD_VAR 0 1
32454: NOT
32455: IFFALSE 32459
// exit ;
32457: GO 32502
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32459: LD_ADDR_VAR 0 2
32463: PUSH
32464: LD_VAR 0 1
32468: PUSH
32469: LD_INT 22
32471: PUSH
32472: LD_VAR 0 1
32476: PPUSH
32477: CALL_OW 255
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 58
32488: PUSH
32489: EMPTY
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PPUSH
32496: CALL_OW 69
32500: IN
32501: ST_TO_ADDR
// end ;
32502: LD_VAR 0 2
32506: RET
// export function IsNotFull ( building ) ; var places ; begin
32507: LD_INT 0
32509: PPUSH
32510: PPUSH
// if not building then
32511: LD_VAR 0 1
32515: NOT
32516: IFFALSE 32520
// exit ;
32518: GO 32548
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32520: LD_ADDR_VAR 0 2
32524: PUSH
32525: LD_VAR 0 1
32529: PPUSH
32530: LD_INT 3
32532: PUSH
32533: LD_INT 62
32535: PUSH
32536: EMPTY
32537: LIST
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PPUSH
32543: CALL_OW 72
32547: ST_TO_ADDR
// end ;
32548: LD_VAR 0 2
32552: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32553: LD_INT 0
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
// tmp := [ ] ;
32559: LD_ADDR_VAR 0 3
32563: PUSH
32564: EMPTY
32565: ST_TO_ADDR
// list := [ ] ;
32566: LD_ADDR_VAR 0 5
32570: PUSH
32571: EMPTY
32572: ST_TO_ADDR
// for i = 16 to 25 do
32573: LD_ADDR_VAR 0 4
32577: PUSH
32578: DOUBLE
32579: LD_INT 16
32581: DEC
32582: ST_TO_ADDR
32583: LD_INT 25
32585: PUSH
32586: FOR_TO
32587: IFFALSE 32660
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_VAR 0 3
32598: PUSH
32599: LD_INT 22
32601: PUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 255
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 91
32618: PUSH
32619: LD_VAR 0 1
32623: PUSH
32624: LD_INT 6
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 30
32634: PUSH
32635: LD_VAR 0 4
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: PUSH
32649: EMPTY
32650: LIST
32651: PPUSH
32652: CALL_OW 69
32656: ADD
32657: ST_TO_ADDR
32658: GO 32586
32660: POP
32661: POP
// for i = 1 to tmp do
32662: LD_ADDR_VAR 0 4
32666: PUSH
32667: DOUBLE
32668: LD_INT 1
32670: DEC
32671: ST_TO_ADDR
32672: LD_VAR 0 3
32676: PUSH
32677: FOR_TO
32678: IFFALSE 32766
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32680: LD_ADDR_VAR 0 5
32684: PUSH
32685: LD_VAR 0 5
32689: PUSH
32690: LD_VAR 0 3
32694: PUSH
32695: LD_VAR 0 4
32699: ARRAY
32700: PPUSH
32701: CALL_OW 266
32705: PUSH
32706: LD_VAR 0 3
32710: PUSH
32711: LD_VAR 0 4
32715: ARRAY
32716: PPUSH
32717: CALL_OW 250
32721: PUSH
32722: LD_VAR 0 3
32726: PUSH
32727: LD_VAR 0 4
32731: ARRAY
32732: PPUSH
32733: CALL_OW 251
32737: PUSH
32738: LD_VAR 0 3
32742: PUSH
32743: LD_VAR 0 4
32747: ARRAY
32748: PPUSH
32749: CALL_OW 254
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: PUSH
32760: EMPTY
32761: LIST
32762: ADD
32763: ST_TO_ADDR
32764: GO 32677
32766: POP
32767: POP
// result := list ;
32768: LD_ADDR_VAR 0 2
32772: PUSH
32773: LD_VAR 0 5
32777: ST_TO_ADDR
// end ;
32778: LD_VAR 0 2
32782: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32783: LD_INT 0
32785: PPUSH
32786: PPUSH
32787: PPUSH
32788: PPUSH
32789: PPUSH
32790: PPUSH
32791: PPUSH
// if not factory then
32792: LD_VAR 0 1
32796: NOT
32797: IFFALSE 32801
// exit ;
32799: GO 33404
// if control = control_apeman then
32801: LD_VAR 0 4
32805: PUSH
32806: LD_INT 5
32808: EQUAL
32809: IFFALSE 32918
// begin tmp := UnitsInside ( factory ) ;
32811: LD_ADDR_VAR 0 8
32815: PUSH
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 313
32825: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32826: LD_VAR 0 8
32830: PPUSH
32831: LD_INT 25
32833: PUSH
32834: LD_INT 12
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PPUSH
32841: CALL_OW 72
32845: NOT
32846: IFFALSE 32856
// control := control_manual ;
32848: LD_ADDR_VAR 0 4
32852: PUSH
32853: LD_INT 1
32855: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32856: LD_ADDR_VAR 0 8
32860: PUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL 32553 0 1
32870: ST_TO_ADDR
// if tmp then
32871: LD_VAR 0 8
32875: IFFALSE 32918
// begin for i in tmp do
32877: LD_ADDR_VAR 0 7
32881: PUSH
32882: LD_VAR 0 8
32886: PUSH
32887: FOR_IN
32888: IFFALSE 32916
// if i [ 1 ] = b_ext_radio then
32890: LD_VAR 0 7
32894: PUSH
32895: LD_INT 1
32897: ARRAY
32898: PUSH
32899: LD_INT 22
32901: EQUAL
32902: IFFALSE 32914
// begin control := control_remote ;
32904: LD_ADDR_VAR 0 4
32908: PUSH
32909: LD_INT 2
32911: ST_TO_ADDR
// break ;
32912: GO 32916
// end ;
32914: GO 32887
32916: POP
32917: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32918: LD_VAR 0 1
32922: PPUSH
32923: LD_VAR 0 2
32927: PPUSH
32928: LD_VAR 0 3
32932: PPUSH
32933: LD_VAR 0 4
32937: PPUSH
32938: LD_VAR 0 5
32942: PPUSH
32943: CALL_OW 448
32947: IFFALSE 32982
// begin result := [ chassis , engine , control , weapon ] ;
32949: LD_ADDR_VAR 0 6
32953: PUSH
32954: LD_VAR 0 2
32958: PUSH
32959: LD_VAR 0 3
32963: PUSH
32964: LD_VAR 0 4
32968: PUSH
32969: LD_VAR 0 5
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: ST_TO_ADDR
// exit ;
32980: GO 33404
// end ; _chassis := AvailableChassisList ( factory ) ;
32982: LD_ADDR_VAR 0 9
32986: PUSH
32987: LD_VAR 0 1
32991: PPUSH
32992: CALL_OW 475
32996: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32997: LD_ADDR_VAR 0 11
33001: PUSH
33002: LD_VAR 0 1
33006: PPUSH
33007: CALL_OW 476
33011: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33012: LD_ADDR_VAR 0 12
33016: PUSH
33017: LD_VAR 0 1
33021: PPUSH
33022: CALL_OW 477
33026: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33027: LD_ADDR_VAR 0 10
33031: PUSH
33032: LD_VAR 0 1
33036: PPUSH
33037: CALL_OW 478
33041: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33042: LD_VAR 0 9
33046: NOT
33047: IFTRUE 33056
33049: PUSH
33050: LD_VAR 0 11
33054: NOT
33055: OR
33056: IFTRUE 33065
33058: PUSH
33059: LD_VAR 0 12
33063: NOT
33064: OR
33065: IFTRUE 33074
33067: PUSH
33068: LD_VAR 0 10
33072: NOT
33073: OR
33074: IFFALSE 33109
// begin result := [ chassis , engine , control , weapon ] ;
33076: LD_ADDR_VAR 0 6
33080: PUSH
33081: LD_VAR 0 2
33085: PUSH
33086: LD_VAR 0 3
33090: PUSH
33091: LD_VAR 0 4
33095: PUSH
33096: LD_VAR 0 5
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
// exit ;
33107: GO 33404
// end ; if not chassis in _chassis then
33109: LD_VAR 0 2
33113: PUSH
33114: LD_VAR 0 9
33118: IN
33119: NOT
33120: IFFALSE 33146
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33122: LD_ADDR_VAR 0 2
33126: PUSH
33127: LD_VAR 0 9
33131: PUSH
33132: LD_INT 1
33134: PPUSH
33135: LD_VAR 0 9
33139: PPUSH
33140: CALL_OW 12
33144: ARRAY
33145: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33146: LD_VAR 0 2
33150: PPUSH
33151: LD_VAR 0 3
33155: PPUSH
33156: CALL 33409 0 2
33160: NOT
33161: IFFALSE 33222
// repeat engine := _engine [ 1 ] ;
33163: LD_ADDR_VAR 0 3
33167: PUSH
33168: LD_VAR 0 11
33172: PUSH
33173: LD_INT 1
33175: ARRAY
33176: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33177: LD_ADDR_VAR 0 11
33181: PUSH
33182: LD_VAR 0 11
33186: PPUSH
33187: LD_INT 1
33189: PPUSH
33190: CALL_OW 3
33194: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33195: LD_VAR 0 2
33199: PPUSH
33200: LD_VAR 0 3
33204: PPUSH
33205: CALL 33409 0 2
33209: IFTRUE 33220
33211: PUSH
33212: LD_VAR 0 11
33216: PUSH
33217: EMPTY
33218: EQUAL
33219: OR
33220: IFFALSE 33163
// if not control in _control then
33222: LD_VAR 0 4
33226: PUSH
33227: LD_VAR 0 12
33231: IN
33232: NOT
33233: IFFALSE 33259
// control := _control [ rand ( 1 , _control ) ] ;
33235: LD_ADDR_VAR 0 4
33239: PUSH
33240: LD_VAR 0 12
33244: PUSH
33245: LD_INT 1
33247: PPUSH
33248: LD_VAR 0 12
33252: PPUSH
33253: CALL_OW 12
33257: ARRAY
33258: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33259: LD_VAR 0 2
33263: PPUSH
33264: LD_VAR 0 5
33268: PPUSH
33269: CALL 33631 0 2
33273: NOT
33274: IFFALSE 33335
// repeat weapon := _weapon [ 1 ] ;
33276: LD_ADDR_VAR 0 5
33280: PUSH
33281: LD_VAR 0 10
33285: PUSH
33286: LD_INT 1
33288: ARRAY
33289: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33290: LD_ADDR_VAR 0 10
33294: PUSH
33295: LD_VAR 0 10
33299: PPUSH
33300: LD_INT 1
33302: PPUSH
33303: CALL_OW 3
33307: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33308: LD_VAR 0 2
33312: PPUSH
33313: LD_VAR 0 5
33317: PPUSH
33318: CALL 33631 0 2
33322: IFTRUE 33333
33324: PUSH
33325: LD_VAR 0 10
33329: PUSH
33330: EMPTY
33331: EQUAL
33332: OR
33333: IFFALSE 33276
// result := [ ] ;
33335: LD_ADDR_VAR 0 6
33339: PUSH
33340: EMPTY
33341: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33342: LD_VAR 0 1
33346: PPUSH
33347: LD_VAR 0 2
33351: PPUSH
33352: LD_VAR 0 3
33356: PPUSH
33357: LD_VAR 0 4
33361: PPUSH
33362: LD_VAR 0 5
33366: PPUSH
33367: CALL_OW 448
33371: IFFALSE 33404
// result := [ chassis , engine , control , weapon ] ;
33373: LD_ADDR_VAR 0 6
33377: PUSH
33378: LD_VAR 0 2
33382: PUSH
33383: LD_VAR 0 3
33387: PUSH
33388: LD_VAR 0 4
33392: PUSH
33393: LD_VAR 0 5
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: ST_TO_ADDR
// end ;
33404: LD_VAR 0 6
33408: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33409: LD_INT 0
33411: PPUSH
// if not chassis or not engine then
33412: LD_VAR 0 1
33416: NOT
33417: IFTRUE 33426
33419: PUSH
33420: LD_VAR 0 2
33424: NOT
33425: OR
33426: IFFALSE 33430
// exit ;
33428: GO 33626
// case engine of engine_solar :
33430: LD_VAR 0 2
33434: PUSH
33435: LD_INT 2
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33481
33443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33444: LD_ADDR_VAR 0 3
33448: PUSH
33449: LD_INT 11
33451: PUSH
33452: LD_INT 12
33454: PUSH
33455: LD_INT 13
33457: PUSH
33458: LD_INT 14
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: ST_TO_ADDR
33479: GO 33610
33481: LD_INT 1
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33551
33489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: LD_INT 11
33497: PUSH
33498: LD_INT 12
33500: PUSH
33501: LD_INT 13
33503: PUSH
33504: LD_INT 14
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: LD_INT 4
33518: PUSH
33519: LD_INT 5
33521: PUSH
33522: LD_INT 21
33524: PUSH
33525: LD_INT 23
33527: PUSH
33528: LD_INT 22
33530: PUSH
33531: LD_INT 24
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
33549: GO 33610
33551: LD_INT 3
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33559
33557: GO 33609
33559: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_INT 13
33567: PUSH
33568: LD_INT 14
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 3
33576: PUSH
33577: LD_INT 4
33579: PUSH
33580: LD_INT 5
33582: PUSH
33583: LD_INT 21
33585: PUSH
33586: LD_INT 22
33588: PUSH
33589: LD_INT 23
33591: PUSH
33592: LD_INT 24
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
33607: GO 33610
33609: POP
// result := ( chassis in result ) ;
33610: LD_ADDR_VAR 0 3
33614: PUSH
33615: LD_VAR 0 1
33619: PUSH
33620: LD_VAR 0 3
33624: IN
33625: ST_TO_ADDR
// end ;
33626: LD_VAR 0 3
33630: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33631: LD_INT 0
33633: PPUSH
// if not chassis or not weapon then
33634: LD_VAR 0 1
33638: NOT
33639: IFTRUE 33648
33641: PUSH
33642: LD_VAR 0 2
33646: NOT
33647: OR
33648: IFFALSE 33652
// exit ;
33650: GO 34746
// case weapon of us_machine_gun :
33652: LD_VAR 0 2
33656: PUSH
33657: LD_INT 2
33659: DOUBLE
33660: EQUAL
33661: IFTRUE 33665
33663: GO 33695
33665: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: LD_INT 2
33676: PUSH
33677: LD_INT 3
33679: PUSH
33680: LD_INT 4
33682: PUSH
33683: LD_INT 5
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: ST_TO_ADDR
33693: GO 34730
33695: LD_INT 3
33697: DOUBLE
33698: EQUAL
33699: IFTRUE 33703
33701: GO 33733
33703: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33704: LD_ADDR_VAR 0 3
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 4
33720: PUSH
33721: LD_INT 5
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: ST_TO_ADDR
33731: GO 34730
33733: LD_INT 11
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33741
33739: GO 33771
33741: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33742: LD_ADDR_VAR 0 3
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: LD_INT 3
33755: PUSH
33756: LD_INT 4
33758: PUSH
33759: LD_INT 5
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: ST_TO_ADDR
33769: GO 34730
33771: LD_INT 4
33773: DOUBLE
33774: EQUAL
33775: IFTRUE 33779
33777: GO 33805
33779: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33780: LD_ADDR_VAR 0 3
33784: PUSH
33785: LD_INT 2
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: LD_INT 4
33793: PUSH
33794: LD_INT 5
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: ST_TO_ADDR
33803: GO 34730
33805: LD_INT 5
33807: DOUBLE
33808: EQUAL
33809: IFTRUE 33813
33811: GO 33839
33813: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33814: LD_ADDR_VAR 0 3
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: LD_INT 4
33827: PUSH
33828: LD_INT 5
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: ST_TO_ADDR
33837: GO 34730
33839: LD_INT 9
33841: DOUBLE
33842: EQUAL
33843: IFTRUE 33847
33845: GO 33873
33847: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33848: LD_ADDR_VAR 0 3
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: LD_INT 4
33861: PUSH
33862: LD_INT 5
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: ST_TO_ADDR
33871: GO 34730
33873: LD_INT 7
33875: DOUBLE
33876: EQUAL
33877: IFTRUE 33881
33879: GO 33907
33881: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33882: LD_ADDR_VAR 0 3
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: LD_INT 3
33892: PUSH
33893: LD_INT 4
33895: PUSH
33896: LD_INT 5
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: ST_TO_ADDR
33905: GO 34730
33907: LD_INT 12
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33941
33915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 3
33926: PUSH
33927: LD_INT 4
33929: PUSH
33930: LD_INT 5
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: ST_TO_ADDR
33939: GO 34730
33941: LD_INT 13
33943: DOUBLE
33944: EQUAL
33945: IFTRUE 33949
33947: GO 33975
33949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33950: LD_ADDR_VAR 0 3
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: LD_INT 3
33960: PUSH
33961: LD_INT 4
33963: PUSH
33964: LD_INT 5
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: ST_TO_ADDR
33973: GO 34730
33975: LD_INT 14
33977: DOUBLE
33978: EQUAL
33979: IFTRUE 33983
33981: GO 34001
33983: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33984: LD_ADDR_VAR 0 3
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: LD_INT 5
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: ST_TO_ADDR
33999: GO 34730
34001: LD_INT 6
34003: DOUBLE
34004: EQUAL
34005: IFTRUE 34009
34007: GO 34027
34009: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34010: LD_ADDR_VAR 0 3
34014: PUSH
34015: LD_INT 4
34017: PUSH
34018: LD_INT 5
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: ST_TO_ADDR
34025: GO 34730
34027: LD_INT 10
34029: DOUBLE
34030: EQUAL
34031: IFTRUE 34035
34033: GO 34053
34035: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34036: LD_ADDR_VAR 0 3
34040: PUSH
34041: LD_INT 4
34043: PUSH
34044: LD_INT 5
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: ST_TO_ADDR
34051: GO 34730
34053: LD_INT 22
34055: DOUBLE
34056: EQUAL
34057: IFTRUE 34061
34059: GO 34087
34061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: LD_INT 11
34069: PUSH
34070: LD_INT 12
34072: PUSH
34073: LD_INT 13
34075: PUSH
34076: LD_INT 14
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: ST_TO_ADDR
34085: GO 34730
34087: LD_INT 23
34089: DOUBLE
34090: EQUAL
34091: IFTRUE 34095
34093: GO 34121
34095: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34096: LD_ADDR_VAR 0 3
34100: PUSH
34101: LD_INT 11
34103: PUSH
34104: LD_INT 12
34106: PUSH
34107: LD_INT 13
34109: PUSH
34110: LD_INT 14
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: ST_TO_ADDR
34119: GO 34730
34121: LD_INT 24
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34129
34127: GO 34155
34129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: LD_INT 11
34137: PUSH
34138: LD_INT 12
34140: PUSH
34141: LD_INT 13
34143: PUSH
34144: LD_INT 14
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: ST_TO_ADDR
34153: GO 34730
34155: LD_INT 30
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34189
34163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34164: LD_ADDR_VAR 0 3
34168: PUSH
34169: LD_INT 11
34171: PUSH
34172: LD_INT 12
34174: PUSH
34175: LD_INT 13
34177: PUSH
34178: LD_INT 14
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: ST_TO_ADDR
34187: GO 34730
34189: LD_INT 25
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34197
34195: GO 34215
34197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34198: LD_ADDR_VAR 0 3
34202: PUSH
34203: LD_INT 13
34205: PUSH
34206: LD_INT 14
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: ST_TO_ADDR
34213: GO 34730
34215: LD_INT 27
34217: DOUBLE
34218: EQUAL
34219: IFTRUE 34223
34221: GO 34241
34223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34224: LD_ADDR_VAR 0 3
34228: PUSH
34229: LD_INT 13
34231: PUSH
34232: LD_INT 14
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: ST_TO_ADDR
34239: GO 34730
34241: LD_INT 92
34243: DOUBLE
34244: EQUAL
34245: IFTRUE 34249
34247: GO 34275
34249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34250: LD_ADDR_VAR 0 3
34254: PUSH
34255: LD_INT 11
34257: PUSH
34258: LD_INT 12
34260: PUSH
34261: LD_INT 13
34263: PUSH
34264: LD_INT 14
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: ST_TO_ADDR
34273: GO 34730
34275: LD_INT 28
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34301
34283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 13
34291: PUSH
34292: LD_INT 14
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: ST_TO_ADDR
34299: GO 34730
34301: LD_INT 29
34303: DOUBLE
34304: EQUAL
34305: IFTRUE 34309
34307: GO 34327
34309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34310: LD_ADDR_VAR 0 3
34314: PUSH
34315: LD_INT 13
34317: PUSH
34318: LD_INT 14
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: ST_TO_ADDR
34325: GO 34730
34327: LD_INT 31
34329: DOUBLE
34330: EQUAL
34331: IFTRUE 34335
34333: GO 34353
34335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34336: LD_ADDR_VAR 0 3
34340: PUSH
34341: LD_INT 13
34343: PUSH
34344: LD_INT 14
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: ST_TO_ADDR
34351: GO 34730
34353: LD_INT 26
34355: DOUBLE
34356: EQUAL
34357: IFTRUE 34361
34359: GO 34379
34361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34362: LD_ADDR_VAR 0 3
34366: PUSH
34367: LD_INT 13
34369: PUSH
34370: LD_INT 14
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: ST_TO_ADDR
34377: GO 34730
34379: LD_INT 42
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34387
34385: GO 34413
34387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_INT 21
34395: PUSH
34396: LD_INT 22
34398: PUSH
34399: LD_INT 23
34401: PUSH
34402: LD_INT 24
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: ST_TO_ADDR
34411: GO 34730
34413: LD_INT 43
34415: DOUBLE
34416: EQUAL
34417: IFTRUE 34421
34419: GO 34447
34421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34422: LD_ADDR_VAR 0 3
34426: PUSH
34427: LD_INT 21
34429: PUSH
34430: LD_INT 22
34432: PUSH
34433: LD_INT 23
34435: PUSH
34436: LD_INT 24
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: ST_TO_ADDR
34445: GO 34730
34447: LD_INT 44
34449: DOUBLE
34450: EQUAL
34451: IFTRUE 34455
34453: GO 34481
34455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34456: LD_ADDR_VAR 0 3
34460: PUSH
34461: LD_INT 21
34463: PUSH
34464: LD_INT 22
34466: PUSH
34467: LD_INT 23
34469: PUSH
34470: LD_INT 24
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: ST_TO_ADDR
34479: GO 34730
34481: LD_INT 45
34483: DOUBLE
34484: EQUAL
34485: IFTRUE 34489
34487: GO 34515
34489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34490: LD_ADDR_VAR 0 3
34494: PUSH
34495: LD_INT 21
34497: PUSH
34498: LD_INT 22
34500: PUSH
34501: LD_INT 23
34503: PUSH
34504: LD_INT 24
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: ST_TO_ADDR
34513: GO 34730
34515: LD_INT 49
34517: DOUBLE
34518: EQUAL
34519: IFTRUE 34523
34521: GO 34549
34523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34524: LD_ADDR_VAR 0 3
34528: PUSH
34529: LD_INT 21
34531: PUSH
34532: LD_INT 22
34534: PUSH
34535: LD_INT 23
34537: PUSH
34538: LD_INT 24
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: ST_TO_ADDR
34547: GO 34730
34549: LD_INT 51
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34583
34557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: LD_INT 21
34565: PUSH
34566: LD_INT 22
34568: PUSH
34569: LD_INT 23
34571: PUSH
34572: LD_INT 24
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
34581: GO 34730
34583: LD_INT 52
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34591
34589: GO 34617
34591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34592: LD_ADDR_VAR 0 3
34596: PUSH
34597: LD_INT 21
34599: PUSH
34600: LD_INT 22
34602: PUSH
34603: LD_INT 23
34605: PUSH
34606: LD_INT 24
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
34615: GO 34730
34617: LD_INT 53
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34643
34625: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34626: LD_ADDR_VAR 0 3
34630: PUSH
34631: LD_INT 23
34633: PUSH
34634: LD_INT 24
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: ST_TO_ADDR
34641: GO 34730
34643: LD_INT 46
34645: DOUBLE
34646: EQUAL
34647: IFTRUE 34651
34649: GO 34669
34651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34652: LD_ADDR_VAR 0 3
34656: PUSH
34657: LD_INT 23
34659: PUSH
34660: LD_INT 24
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: ST_TO_ADDR
34667: GO 34730
34669: LD_INT 47
34671: DOUBLE
34672: EQUAL
34673: IFTRUE 34677
34675: GO 34695
34677: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34678: LD_ADDR_VAR 0 3
34682: PUSH
34683: LD_INT 23
34685: PUSH
34686: LD_INT 24
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: ST_TO_ADDR
34693: GO 34730
34695: LD_INT 98
34697: DOUBLE
34698: EQUAL
34699: IFTRUE 34703
34701: GO 34729
34703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34704: LD_ADDR_VAR 0 3
34708: PUSH
34709: LD_INT 21
34711: PUSH
34712: LD_INT 22
34714: PUSH
34715: LD_INT 23
34717: PUSH
34718: LD_INT 24
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: ST_TO_ADDR
34727: GO 34730
34729: POP
// result := ( chassis in result ) ;
34730: LD_ADDR_VAR 0 3
34734: PUSH
34735: LD_VAR 0 1
34739: PUSH
34740: LD_VAR 0 3
34744: IN
34745: ST_TO_ADDR
// end ;
34746: LD_VAR 0 3
34750: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34751: LD_INT 0
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
// result := array ;
34760: LD_ADDR_VAR 0 5
34764: PUSH
34765: LD_VAR 0 1
34769: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34770: LD_VAR 0 1
34774: NOT
34775: IFTRUE 34784
34777: PUSH
34778: LD_VAR 0 2
34782: NOT
34783: OR
34784: IFTRUE 34793
34786: PUSH
34787: LD_VAR 0 3
34791: NOT
34792: OR
34793: IFTRUE 34807
34795: PUSH
34796: LD_VAR 0 2
34800: PUSH
34801: LD_VAR 0 1
34805: GREATER
34806: OR
34807: IFTRUE 34821
34809: PUSH
34810: LD_VAR 0 3
34814: PUSH
34815: LD_VAR 0 1
34819: GREATER
34820: OR
34821: IFFALSE 34825
// exit ;
34823: GO 35121
// if direction then
34825: LD_VAR 0 4
34829: IFFALSE 34893
// begin d := 1 ;
34831: LD_ADDR_VAR 0 9
34835: PUSH
34836: LD_INT 1
34838: ST_TO_ADDR
// if i_from > i_to then
34839: LD_VAR 0 2
34843: PUSH
34844: LD_VAR 0 3
34848: GREATER
34849: IFFALSE 34875
// length := ( array - i_from ) + i_to else
34851: LD_ADDR_VAR 0 11
34855: PUSH
34856: LD_VAR 0 1
34860: PUSH
34861: LD_VAR 0 2
34865: MINUS
34866: PUSH
34867: LD_VAR 0 3
34871: PLUS
34872: ST_TO_ADDR
34873: GO 34891
// length := i_to - i_from ;
34875: LD_ADDR_VAR 0 11
34879: PUSH
34880: LD_VAR 0 3
34884: PUSH
34885: LD_VAR 0 2
34889: MINUS
34890: ST_TO_ADDR
// end else
34891: GO 34954
// begin d := - 1 ;
34893: LD_ADDR_VAR 0 9
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: ST_TO_ADDR
// if i_from > i_to then
34902: LD_VAR 0 2
34906: PUSH
34907: LD_VAR 0 3
34911: GREATER
34912: IFFALSE 34932
// length := i_from - i_to else
34914: LD_ADDR_VAR 0 11
34918: PUSH
34919: LD_VAR 0 2
34923: PUSH
34924: LD_VAR 0 3
34928: MINUS
34929: ST_TO_ADDR
34930: GO 34954
// length := ( array - i_to ) + i_from ;
34932: LD_ADDR_VAR 0 11
34936: PUSH
34937: LD_VAR 0 1
34941: PUSH
34942: LD_VAR 0 3
34946: MINUS
34947: PUSH
34948: LD_VAR 0 2
34952: PLUS
34953: ST_TO_ADDR
// end ; if not length then
34954: LD_VAR 0 11
34958: NOT
34959: IFFALSE 34963
// exit ;
34961: GO 35121
// tmp := array ;
34963: LD_ADDR_VAR 0 10
34967: PUSH
34968: LD_VAR 0 1
34972: ST_TO_ADDR
// for i = 1 to length do
34973: LD_ADDR_VAR 0 6
34977: PUSH
34978: DOUBLE
34979: LD_INT 1
34981: DEC
34982: ST_TO_ADDR
34983: LD_VAR 0 11
34987: PUSH
34988: FOR_TO
34989: IFFALSE 35109
// begin for j = 1 to array do
34991: LD_ADDR_VAR 0 7
34995: PUSH
34996: DOUBLE
34997: LD_INT 1
34999: DEC
35000: ST_TO_ADDR
35001: LD_VAR 0 1
35005: PUSH
35006: FOR_TO
35007: IFFALSE 35095
// begin k := j + d ;
35009: LD_ADDR_VAR 0 8
35013: PUSH
35014: LD_VAR 0 7
35018: PUSH
35019: LD_VAR 0 9
35023: PLUS
35024: ST_TO_ADDR
// if k > array then
35025: LD_VAR 0 8
35029: PUSH
35030: LD_VAR 0 1
35034: GREATER
35035: IFFALSE 35045
// k := 1 ;
35037: LD_ADDR_VAR 0 8
35041: PUSH
35042: LD_INT 1
35044: ST_TO_ADDR
// if not k then
35045: LD_VAR 0 8
35049: NOT
35050: IFFALSE 35062
// k := array ;
35052: LD_ADDR_VAR 0 8
35056: PUSH
35057: LD_VAR 0 1
35061: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35062: LD_ADDR_VAR 0 10
35066: PUSH
35067: LD_VAR 0 10
35071: PPUSH
35072: LD_VAR 0 8
35076: PPUSH
35077: LD_VAR 0 1
35081: PUSH
35082: LD_VAR 0 7
35086: ARRAY
35087: PPUSH
35088: CALL_OW 1
35092: ST_TO_ADDR
// end ;
35093: GO 35006
35095: POP
35096: POP
// array := tmp ;
35097: LD_ADDR_VAR 0 1
35101: PUSH
35102: LD_VAR 0 10
35106: ST_TO_ADDR
// end ;
35107: GO 34988
35109: POP
35110: POP
// result := array ;
35111: LD_ADDR_VAR 0 5
35115: PUSH
35116: LD_VAR 0 1
35120: ST_TO_ADDR
// end ;
35121: LD_VAR 0 5
35125: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35126: LD_INT 0
35128: PPUSH
35129: PPUSH
// result := 0 ;
35130: LD_ADDR_VAR 0 3
35134: PUSH
35135: LD_INT 0
35137: ST_TO_ADDR
// if not array or not value in array then
35138: LD_VAR 0 1
35142: NOT
35143: IFTRUE 35158
35145: PUSH
35146: LD_VAR 0 2
35150: PUSH
35151: LD_VAR 0 1
35155: IN
35156: NOT
35157: OR
35158: IFFALSE 35162
// exit ;
35160: GO 35216
// for i = 1 to array do
35162: LD_ADDR_VAR 0 4
35166: PUSH
35167: DOUBLE
35168: LD_INT 1
35170: DEC
35171: ST_TO_ADDR
35172: LD_VAR 0 1
35176: PUSH
35177: FOR_TO
35178: IFFALSE 35214
// if value = array [ i ] then
35180: LD_VAR 0 2
35184: PUSH
35185: LD_VAR 0 1
35189: PUSH
35190: LD_VAR 0 4
35194: ARRAY
35195: EQUAL
35196: IFFALSE 35212
// begin result := i ;
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: LD_VAR 0 4
35207: ST_TO_ADDR
// exit ;
35208: POP
35209: POP
35210: GO 35216
// end ;
35212: GO 35177
35214: POP
35215: POP
// end ;
35216: LD_VAR 0 3
35220: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35221: LD_INT 0
35223: PPUSH
// vc_chassis := chassis ;
35224: LD_ADDR_OWVAR 37
35228: PUSH
35229: LD_VAR 0 1
35233: ST_TO_ADDR
// vc_engine := engine ;
35234: LD_ADDR_OWVAR 39
35238: PUSH
35239: LD_VAR 0 2
35243: ST_TO_ADDR
// vc_control := control ;
35244: LD_ADDR_OWVAR 38
35248: PUSH
35249: LD_VAR 0 3
35253: ST_TO_ADDR
// vc_weapon := weapon ;
35254: LD_ADDR_OWVAR 40
35258: PUSH
35259: LD_VAR 0 4
35263: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35264: LD_ADDR_OWVAR 41
35268: PUSH
35269: LD_VAR 0 5
35273: ST_TO_ADDR
// end ;
35274: LD_VAR 0 6
35278: RET
// export function WantPlant ( unit ) ; var task ; begin
35279: LD_INT 0
35281: PPUSH
35282: PPUSH
// result := false ;
35283: LD_ADDR_VAR 0 2
35287: PUSH
35288: LD_INT 0
35290: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35291: LD_ADDR_VAR 0 3
35295: PUSH
35296: LD_VAR 0 1
35300: PPUSH
35301: CALL_OW 437
35305: ST_TO_ADDR
// if task then
35306: LD_VAR 0 3
35310: IFFALSE 35338
// if task [ 1 ] [ 1 ] = p then
35312: LD_VAR 0 3
35316: PUSH
35317: LD_INT 1
35319: ARRAY
35320: PUSH
35321: LD_INT 1
35323: ARRAY
35324: PUSH
35325: LD_STRING p
35327: EQUAL
35328: IFFALSE 35338
// result := true ;
35330: LD_ADDR_VAR 0 2
35334: PUSH
35335: LD_INT 1
35337: ST_TO_ADDR
// end ;
35338: LD_VAR 0 2
35342: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35343: LD_INT 0
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
// if pos < 1 then
35349: LD_VAR 0 2
35353: PUSH
35354: LD_INT 1
35356: LESS
35357: IFFALSE 35361
// exit ;
35359: GO 35664
// if pos = 1 then
35361: LD_VAR 0 2
35365: PUSH
35366: LD_INT 1
35368: EQUAL
35369: IFFALSE 35402
// result := Replace ( arr , pos [ 1 ] , value ) else
35371: LD_ADDR_VAR 0 4
35375: PUSH
35376: LD_VAR 0 1
35380: PPUSH
35381: LD_VAR 0 2
35385: PUSH
35386: LD_INT 1
35388: ARRAY
35389: PPUSH
35390: LD_VAR 0 3
35394: PPUSH
35395: CALL_OW 1
35399: ST_TO_ADDR
35400: GO 35664
// begin tmp := arr ;
35402: LD_ADDR_VAR 0 6
35406: PUSH
35407: LD_VAR 0 1
35411: ST_TO_ADDR
// s_arr := [ tmp ] ;
35412: LD_ADDR_VAR 0 7
35416: PUSH
35417: LD_VAR 0 6
35421: PUSH
35422: EMPTY
35423: LIST
35424: ST_TO_ADDR
// for i = 1 to pos - 1 do
35425: LD_ADDR_VAR 0 5
35429: PUSH
35430: DOUBLE
35431: LD_INT 1
35433: DEC
35434: ST_TO_ADDR
35435: LD_VAR 0 2
35439: PUSH
35440: LD_INT 1
35442: MINUS
35443: PUSH
35444: FOR_TO
35445: IFFALSE 35490
// begin tmp := tmp [ pos [ i ] ] ;
35447: LD_ADDR_VAR 0 6
35451: PUSH
35452: LD_VAR 0 6
35456: PUSH
35457: LD_VAR 0 2
35461: PUSH
35462: LD_VAR 0 5
35466: ARRAY
35467: ARRAY
35468: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35469: LD_ADDR_VAR 0 7
35473: PUSH
35474: LD_VAR 0 7
35478: PUSH
35479: LD_VAR 0 6
35483: PUSH
35484: EMPTY
35485: LIST
35486: ADD
35487: ST_TO_ADDR
// end ;
35488: GO 35444
35490: POP
35491: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35492: LD_ADDR_VAR 0 6
35496: PUSH
35497: LD_VAR 0 6
35501: PPUSH
35502: LD_VAR 0 2
35506: PUSH
35507: LD_VAR 0 2
35511: ARRAY
35512: PPUSH
35513: LD_VAR 0 3
35517: PPUSH
35518: CALL_OW 1
35522: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35523: LD_ADDR_VAR 0 7
35527: PUSH
35528: LD_VAR 0 7
35532: PPUSH
35533: LD_VAR 0 7
35537: PPUSH
35538: LD_VAR 0 6
35542: PPUSH
35543: CALL_OW 1
35547: ST_TO_ADDR
// for i = s_arr downto 2 do
35548: LD_ADDR_VAR 0 5
35552: PUSH
35553: DOUBLE
35554: LD_VAR 0 7
35558: INC
35559: ST_TO_ADDR
35560: LD_INT 2
35562: PUSH
35563: FOR_DOWNTO
35564: IFFALSE 35648
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35566: LD_ADDR_VAR 0 6
35570: PUSH
35571: LD_VAR 0 7
35575: PUSH
35576: LD_VAR 0 5
35580: PUSH
35581: LD_INT 1
35583: MINUS
35584: ARRAY
35585: PPUSH
35586: LD_VAR 0 2
35590: PUSH
35591: LD_VAR 0 5
35595: PUSH
35596: LD_INT 1
35598: MINUS
35599: ARRAY
35600: PPUSH
35601: LD_VAR 0 7
35605: PUSH
35606: LD_VAR 0 5
35610: ARRAY
35611: PPUSH
35612: CALL_OW 1
35616: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35617: LD_ADDR_VAR 0 7
35621: PUSH
35622: LD_VAR 0 7
35626: PPUSH
35627: LD_VAR 0 5
35631: PUSH
35632: LD_INT 1
35634: MINUS
35635: PPUSH
35636: LD_VAR 0 6
35640: PPUSH
35641: CALL_OW 1
35645: ST_TO_ADDR
// end ;
35646: GO 35563
35648: POP
35649: POP
// result := s_arr [ 1 ] ;
35650: LD_ADDR_VAR 0 4
35654: PUSH
35655: LD_VAR 0 7
35659: PUSH
35660: LD_INT 1
35662: ARRAY
35663: ST_TO_ADDR
// end ; end ;
35664: LD_VAR 0 4
35668: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35669: LD_INT 0
35671: PPUSH
35672: PPUSH
// if not list then
35673: LD_VAR 0 1
35677: NOT
35678: IFFALSE 35682
// exit ;
35680: GO 35773
// i := list [ pos1 ] ;
35682: LD_ADDR_VAR 0 5
35686: PUSH
35687: LD_VAR 0 1
35691: PUSH
35692: LD_VAR 0 2
35696: ARRAY
35697: ST_TO_ADDR
// if not i then
35698: LD_VAR 0 5
35702: NOT
35703: IFFALSE 35707
// exit ;
35705: GO 35773
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35707: LD_ADDR_VAR 0 1
35711: PUSH
35712: LD_VAR 0 1
35716: PPUSH
35717: LD_VAR 0 2
35721: PPUSH
35722: LD_VAR 0 1
35726: PUSH
35727: LD_VAR 0 3
35731: ARRAY
35732: PPUSH
35733: CALL_OW 1
35737: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35738: LD_ADDR_VAR 0 1
35742: PUSH
35743: LD_VAR 0 1
35747: PPUSH
35748: LD_VAR 0 3
35752: PPUSH
35753: LD_VAR 0 5
35757: PPUSH
35758: CALL_OW 1
35762: ST_TO_ADDR
// result := list ;
35763: LD_ADDR_VAR 0 4
35767: PUSH
35768: LD_VAR 0 1
35772: ST_TO_ADDR
// end ;
35773: LD_VAR 0 4
35777: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35778: LD_INT 0
35780: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35781: LD_ADDR_VAR 0 5
35785: PUSH
35786: LD_VAR 0 1
35790: PPUSH
35791: CALL_OW 250
35795: PPUSH
35796: LD_VAR 0 1
35800: PPUSH
35801: CALL_OW 251
35805: PPUSH
35806: LD_VAR 0 2
35810: PPUSH
35811: LD_VAR 0 3
35815: PPUSH
35816: LD_VAR 0 4
35820: PPUSH
35821: CALL 36203 0 5
35825: ST_TO_ADDR
// end ;
35826: LD_VAR 0 5
35830: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35831: LD_INT 0
35833: PPUSH
35834: PPUSH
35835: PPUSH
35836: PPUSH
// if not list or not unit then
35837: LD_VAR 0 2
35841: NOT
35842: IFTRUE 35851
35844: PUSH
35845: LD_VAR 0 1
35849: NOT
35850: OR
35851: IFFALSE 35855
// exit ;
35853: GO 36198
// result := [ ] ;
35855: LD_ADDR_VAR 0 5
35859: PUSH
35860: EMPTY
35861: ST_TO_ADDR
// for i in list do
35862: LD_ADDR_VAR 0 6
35866: PUSH
35867: LD_VAR 0 2
35871: PUSH
35872: FOR_IN
35873: IFFALSE 36091
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35875: LD_ADDR_VAR 0 8
35879: PUSH
35880: LD_VAR 0 1
35884: PPUSH
35885: LD_VAR 0 6
35889: PUSH
35890: LD_INT 1
35892: ARRAY
35893: PPUSH
35894: LD_VAR 0 6
35898: PUSH
35899: LD_INT 2
35901: ARRAY
35902: PPUSH
35903: CALL_OW 297
35907: ST_TO_ADDR
// if not Count ( result ) then
35908: LD_VAR 0 5
35912: PPUSH
35913: CALL 32425 0 1
35917: NOT
35918: IFFALSE 35951
// begin result := Join ( result , [ i , tmp ] ) ;
35920: LD_ADDR_VAR 0 5
35924: PUSH
35925: LD_VAR 0 5
35929: PPUSH
35930: LD_VAR 0 6
35934: PUSH
35935: LD_VAR 0 8
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PPUSH
35944: CALL 68401 0 2
35948: ST_TO_ADDR
// continue ;
35949: GO 35872
// end ; if result [ result ] [ 2 ] <= tmp then
35951: LD_VAR 0 5
35955: PUSH
35956: LD_VAR 0 5
35960: ARRAY
35961: PUSH
35962: LD_INT 2
35964: ARRAY
35965: PUSH
35966: LD_VAR 0 8
35970: LESSEQUAL
35971: IFFALSE 36004
// result := Join ( result , [ i , tmp ] ) else
35973: LD_ADDR_VAR 0 5
35977: PUSH
35978: LD_VAR 0 5
35982: PPUSH
35983: LD_VAR 0 6
35987: PUSH
35988: LD_VAR 0 8
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PPUSH
35997: CALL 68401 0 2
36001: ST_TO_ADDR
36002: GO 36089
// begin for j := 1 to Count ( result ) do
36004: LD_ADDR_VAR 0 7
36008: PUSH
36009: DOUBLE
36010: LD_INT 1
36012: DEC
36013: ST_TO_ADDR
36014: LD_VAR 0 5
36018: PPUSH
36019: CALL 32425 0 1
36023: PUSH
36024: FOR_TO
36025: IFFALSE 36087
// begin if tmp < result [ j ] [ 2 ] then
36027: LD_VAR 0 8
36031: PUSH
36032: LD_VAR 0 5
36036: PUSH
36037: LD_VAR 0 7
36041: ARRAY
36042: PUSH
36043: LD_INT 2
36045: ARRAY
36046: LESS
36047: IFFALSE 36085
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36049: LD_ADDR_VAR 0 5
36053: PUSH
36054: LD_VAR 0 5
36058: PPUSH
36059: LD_VAR 0 7
36063: PPUSH
36064: LD_VAR 0 6
36068: PUSH
36069: LD_VAR 0 8
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PPUSH
36078: CALL_OW 2
36082: ST_TO_ADDR
// break ;
36083: GO 36087
// end ; end ;
36085: GO 36024
36087: POP
36088: POP
// end ; end ;
36089: GO 35872
36091: POP
36092: POP
// if result and not asc then
36093: LD_VAR 0 5
36097: IFFALSE 36106
36099: PUSH
36100: LD_VAR 0 3
36104: NOT
36105: AND
36106: IFFALSE 36123
// result := ReverseArray ( result ) ;
36108: LD_ADDR_VAR 0 5
36112: PUSH
36113: LD_VAR 0 5
36117: PPUSH
36118: CALL 63481 0 1
36122: ST_TO_ADDR
// tmp := [ ] ;
36123: LD_ADDR_VAR 0 8
36127: PUSH
36128: EMPTY
36129: ST_TO_ADDR
// if mode then
36130: LD_VAR 0 4
36134: IFFALSE 36198
// begin for i := 1 to result do
36136: LD_ADDR_VAR 0 6
36140: PUSH
36141: DOUBLE
36142: LD_INT 1
36144: DEC
36145: ST_TO_ADDR
36146: LD_VAR 0 5
36150: PUSH
36151: FOR_TO
36152: IFFALSE 36186
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36154: LD_ADDR_VAR 0 8
36158: PUSH
36159: LD_VAR 0 8
36163: PPUSH
36164: LD_VAR 0 5
36168: PUSH
36169: LD_VAR 0 6
36173: ARRAY
36174: PUSH
36175: LD_INT 1
36177: ARRAY
36178: PPUSH
36179: CALL 68401 0 2
36183: ST_TO_ADDR
36184: GO 36151
36186: POP
36187: POP
// result := tmp ;
36188: LD_ADDR_VAR 0 5
36192: PUSH
36193: LD_VAR 0 8
36197: ST_TO_ADDR
// end ; end ;
36198: LD_VAR 0 5
36202: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36203: LD_INT 0
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
// if not list then
36209: LD_VAR 0 3
36213: NOT
36214: IFFALSE 36218
// exit ;
36216: GO 36608
// result := [ ] ;
36218: LD_ADDR_VAR 0 6
36222: PUSH
36223: EMPTY
36224: ST_TO_ADDR
// for i in list do
36225: LD_ADDR_VAR 0 7
36229: PUSH
36230: LD_VAR 0 3
36234: PUSH
36235: FOR_IN
36236: IFFALSE 36438
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36238: LD_ADDR_VAR 0 9
36242: PUSH
36243: LD_VAR 0 7
36247: PPUSH
36248: LD_VAR 0 1
36252: PPUSH
36253: LD_VAR 0 2
36257: PPUSH
36258: CALL_OW 297
36262: ST_TO_ADDR
// if not result then
36263: LD_VAR 0 6
36267: NOT
36268: IFFALSE 36294
// result := [ [ i , tmp ] ] else
36270: LD_ADDR_VAR 0 6
36274: PUSH
36275: LD_VAR 0 7
36279: PUSH
36280: LD_VAR 0 9
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: ST_TO_ADDR
36292: GO 36436
// begin if result [ result ] [ 2 ] <= tmp then
36294: LD_VAR 0 6
36298: PUSH
36299: LD_VAR 0 6
36303: ARRAY
36304: PUSH
36305: LD_INT 2
36307: ARRAY
36308: PUSH
36309: LD_VAR 0 9
36313: LESSEQUAL
36314: IFFALSE 36356
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36316: LD_ADDR_VAR 0 6
36320: PUSH
36321: LD_VAR 0 6
36325: PPUSH
36326: LD_VAR 0 6
36330: PUSH
36331: LD_INT 1
36333: PLUS
36334: PPUSH
36335: LD_VAR 0 7
36339: PUSH
36340: LD_VAR 0 9
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PPUSH
36349: CALL_OW 2
36353: ST_TO_ADDR
36354: GO 36436
// for j := 1 to result do
36356: LD_ADDR_VAR 0 8
36360: PUSH
36361: DOUBLE
36362: LD_INT 1
36364: DEC
36365: ST_TO_ADDR
36366: LD_VAR 0 6
36370: PUSH
36371: FOR_TO
36372: IFFALSE 36434
// begin if tmp < result [ j ] [ 2 ] then
36374: LD_VAR 0 9
36378: PUSH
36379: LD_VAR 0 6
36383: PUSH
36384: LD_VAR 0 8
36388: ARRAY
36389: PUSH
36390: LD_INT 2
36392: ARRAY
36393: LESS
36394: IFFALSE 36432
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36396: LD_ADDR_VAR 0 6
36400: PUSH
36401: LD_VAR 0 6
36405: PPUSH
36406: LD_VAR 0 8
36410: PPUSH
36411: LD_VAR 0 7
36415: PUSH
36416: LD_VAR 0 9
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PPUSH
36425: CALL_OW 2
36429: ST_TO_ADDR
// break ;
36430: GO 36434
// end ; end ;
36432: GO 36371
36434: POP
36435: POP
// end ; end ;
36436: GO 36235
36438: POP
36439: POP
// if result and not asc then
36440: LD_VAR 0 6
36444: IFFALSE 36453
36446: PUSH
36447: LD_VAR 0 4
36451: NOT
36452: AND
36453: IFFALSE 36528
// begin tmp := result ;
36455: LD_ADDR_VAR 0 9
36459: PUSH
36460: LD_VAR 0 6
36464: ST_TO_ADDR
// for i = tmp downto 1 do
36465: LD_ADDR_VAR 0 7
36469: PUSH
36470: DOUBLE
36471: LD_VAR 0 9
36475: INC
36476: ST_TO_ADDR
36477: LD_INT 1
36479: PUSH
36480: FOR_DOWNTO
36481: IFFALSE 36526
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36483: LD_ADDR_VAR 0 6
36487: PUSH
36488: LD_VAR 0 6
36492: PPUSH
36493: LD_VAR 0 9
36497: PUSH
36498: LD_VAR 0 7
36502: MINUS
36503: PUSH
36504: LD_INT 1
36506: PLUS
36507: PPUSH
36508: LD_VAR 0 9
36512: PUSH
36513: LD_VAR 0 7
36517: ARRAY
36518: PPUSH
36519: CALL_OW 1
36523: ST_TO_ADDR
36524: GO 36480
36526: POP
36527: POP
// end ; tmp := [ ] ;
36528: LD_ADDR_VAR 0 9
36532: PUSH
36533: EMPTY
36534: ST_TO_ADDR
// if mode then
36535: LD_VAR 0 5
36539: IFFALSE 36608
// begin for i = 1 to result do
36541: LD_ADDR_VAR 0 7
36545: PUSH
36546: DOUBLE
36547: LD_INT 1
36549: DEC
36550: ST_TO_ADDR
36551: LD_VAR 0 6
36555: PUSH
36556: FOR_TO
36557: IFFALSE 36596
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36559: LD_ADDR_VAR 0 9
36563: PUSH
36564: LD_VAR 0 9
36568: PPUSH
36569: LD_VAR 0 7
36573: PPUSH
36574: LD_VAR 0 6
36578: PUSH
36579: LD_VAR 0 7
36583: ARRAY
36584: PUSH
36585: LD_INT 1
36587: ARRAY
36588: PPUSH
36589: CALL_OW 1
36593: ST_TO_ADDR
36594: GO 36556
36596: POP
36597: POP
// result := tmp ;
36598: LD_ADDR_VAR 0 6
36602: PUSH
36603: LD_VAR 0 9
36607: ST_TO_ADDR
// end ; end ;
36608: LD_VAR 0 6
36612: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36613: LD_INT 0
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36621: LD_ADDR_VAR 0 5
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: EMPTY
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: ST_TO_ADDR
// if not x or not y then
36643: LD_VAR 0 2
36647: NOT
36648: IFTRUE 36657
36650: PUSH
36651: LD_VAR 0 3
36655: NOT
36656: OR
36657: IFFALSE 36661
// exit ;
36659: GO 38317
// if not range then
36661: LD_VAR 0 4
36665: NOT
36666: IFFALSE 36676
// range := 10 ;
36668: LD_ADDR_VAR 0 4
36672: PUSH
36673: LD_INT 10
36675: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36676: LD_ADDR_VAR 0 8
36680: PUSH
36681: LD_INT 81
36683: PUSH
36684: LD_VAR 0 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 92
36695: PUSH
36696: LD_VAR 0 2
36700: PUSH
36701: LD_VAR 0 3
36705: PUSH
36706: LD_VAR 0 4
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 3
36719: PUSH
36720: LD_INT 21
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: PPUSH
36739: CALL_OW 69
36743: ST_TO_ADDR
// if not tmp then
36744: LD_VAR 0 8
36748: NOT
36749: IFFALSE 36753
// exit ;
36751: GO 38317
// for i in tmp do
36753: LD_ADDR_VAR 0 6
36757: PUSH
36758: LD_VAR 0 8
36762: PUSH
36763: FOR_IN
36764: IFFALSE 38292
// begin points := [ 0 , 0 , 0 ] ;
36766: LD_ADDR_VAR 0 9
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: ST_TO_ADDR
// bpoints := 1 ;
36785: LD_ADDR_VAR 0 10
36789: PUSH
36790: LD_INT 1
36792: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36793: LD_VAR 0 6
36797: PPUSH
36798: CALL_OW 247
36802: PUSH
36803: LD_INT 1
36805: DOUBLE
36806: EQUAL
36807: IFTRUE 36811
36809: GO 37393
36811: POP
// begin if GetClass ( i ) = 1 then
36812: LD_VAR 0 6
36816: PPUSH
36817: CALL_OW 257
36821: PUSH
36822: LD_INT 1
36824: EQUAL
36825: IFFALSE 36846
// points := [ 10 , 5 , 3 ] ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_INT 10
36834: PUSH
36835: LD_INT 5
36837: PUSH
36838: LD_INT 3
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36846: LD_VAR 0 6
36850: PPUSH
36851: CALL_OW 257
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 3
36861: PUSH
36862: LD_INT 4
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: IN
36870: IFFALSE 36891
// points := [ 3 , 2 , 1 ] ;
36872: LD_ADDR_VAR 0 9
36876: PUSH
36877: LD_INT 3
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 257
36900: PUSH
36901: LD_INT 5
36903: EQUAL
36904: IFFALSE 36925
// points := [ 130 , 5 , 2 ] ;
36906: LD_ADDR_VAR 0 9
36910: PUSH
36911: LD_INT 130
36913: PUSH
36914: LD_INT 5
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36925: LD_VAR 0 6
36929: PPUSH
36930: CALL_OW 257
36934: PUSH
36935: LD_INT 8
36937: EQUAL
36938: IFFALSE 36959
// points := [ 35 , 35 , 30 ] ;
36940: LD_ADDR_VAR 0 9
36944: PUSH
36945: LD_INT 35
36947: PUSH
36948: LD_INT 35
36950: PUSH
36951: LD_INT 30
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36959: LD_VAR 0 6
36963: PPUSH
36964: CALL_OW 257
36968: PUSH
36969: LD_INT 9
36971: EQUAL
36972: IFFALSE 36993
// points := [ 20 , 55 , 40 ] ;
36974: LD_ADDR_VAR 0 9
36978: PUSH
36979: LD_INT 20
36981: PUSH
36982: LD_INT 55
36984: PUSH
36985: LD_INT 40
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36993: LD_VAR 0 6
36997: PPUSH
36998: CALL_OW 257
37002: PUSH
37003: LD_INT 12
37005: PUSH
37006: LD_INT 16
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: IN
37013: IFFALSE 37034
// points := [ 5 , 3 , 2 ] ;
37015: LD_ADDR_VAR 0 9
37019: PUSH
37020: LD_INT 5
37022: PUSH
37023: LD_INT 3
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37034: LD_VAR 0 6
37038: PPUSH
37039: CALL_OW 257
37043: PUSH
37044: LD_INT 17
37046: EQUAL
37047: IFFALSE 37068
// points := [ 100 , 50 , 75 ] ;
37049: LD_ADDR_VAR 0 9
37053: PUSH
37054: LD_INT 100
37056: PUSH
37057: LD_INT 50
37059: PUSH
37060: LD_INT 75
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: LIST
37067: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37068: LD_VAR 0 6
37072: PPUSH
37073: CALL_OW 257
37077: PUSH
37078: LD_INT 15
37080: EQUAL
37081: IFFALSE 37102
// points := [ 10 , 5 , 3 ] ;
37083: LD_ADDR_VAR 0 9
37087: PUSH
37088: LD_INT 10
37090: PUSH
37091: LD_INT 5
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37102: LD_VAR 0 6
37106: PPUSH
37107: CALL_OW 257
37111: PUSH
37112: LD_INT 14
37114: EQUAL
37115: IFFALSE 37136
// points := [ 10 , 0 , 0 ] ;
37117: LD_ADDR_VAR 0 9
37121: PUSH
37122: LD_INT 10
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37136: LD_VAR 0 6
37140: PPUSH
37141: CALL_OW 257
37145: PUSH
37146: LD_INT 11
37148: EQUAL
37149: IFFALSE 37170
// points := [ 30 , 10 , 5 ] ;
37151: LD_ADDR_VAR 0 9
37155: PUSH
37156: LD_INT 30
37158: PUSH
37159: LD_INT 10
37161: PUSH
37162: LD_INT 5
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37170: LD_VAR 0 1
37174: PPUSH
37175: LD_INT 5
37177: PPUSH
37178: CALL_OW 321
37182: PUSH
37183: LD_INT 2
37185: EQUAL
37186: IFFALSE 37203
// bpoints := bpoints * 1.8 ;
37188: LD_ADDR_VAR 0 10
37192: PUSH
37193: LD_VAR 0 10
37197: PUSH
37198: LD_REAL  1.80000000000000E+0000
37201: MUL
37202: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37203: LD_VAR 0 6
37207: PPUSH
37208: CALL_OW 257
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 3
37221: PUSH
37222: LD_INT 4
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: IN
37231: IFFALSE 37251
37233: PUSH
37234: LD_VAR 0 1
37238: PPUSH
37239: LD_INT 51
37241: PPUSH
37242: CALL_OW 321
37246: PUSH
37247: LD_INT 2
37249: EQUAL
37250: AND
37251: IFFALSE 37268
// bpoints := bpoints * 1.2 ;
37253: LD_ADDR_VAR 0 10
37257: PUSH
37258: LD_VAR 0 10
37262: PUSH
37263: LD_REAL  1.20000000000000E+0000
37266: MUL
37267: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37268: LD_VAR 0 6
37272: PPUSH
37273: CALL_OW 257
37277: PUSH
37278: LD_INT 5
37280: PUSH
37281: LD_INT 7
37283: PUSH
37284: LD_INT 9
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: IN
37292: IFFALSE 37312
37294: PUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: LD_INT 52
37302: PPUSH
37303: CALL_OW 321
37307: PUSH
37308: LD_INT 2
37310: EQUAL
37311: AND
37312: IFFALSE 37329
// bpoints := bpoints * 1.5 ;
37314: LD_ADDR_VAR 0 10
37318: PUSH
37319: LD_VAR 0 10
37323: PUSH
37324: LD_REAL  1.50000000000000E+0000
37327: MUL
37328: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37329: LD_VAR 0 1
37333: PPUSH
37334: LD_INT 66
37336: PPUSH
37337: CALL_OW 321
37341: PUSH
37342: LD_INT 2
37344: EQUAL
37345: IFFALSE 37362
// bpoints := bpoints * 1.1 ;
37347: LD_ADDR_VAR 0 10
37351: PUSH
37352: LD_VAR 0 10
37356: PUSH
37357: LD_REAL  1.10000000000000E+0000
37360: MUL
37361: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37362: LD_ADDR_VAR 0 10
37366: PUSH
37367: LD_VAR 0 10
37371: PUSH
37372: LD_VAR 0 6
37376: PPUSH
37377: LD_INT 1
37379: PPUSH
37380: CALL_OW 259
37384: PUSH
37385: LD_REAL  1.15000000000000E+0000
37388: MUL
37389: MUL
37390: ST_TO_ADDR
// end ; unit_vehicle :
37391: GO 38221
37393: LD_INT 2
37395: DOUBLE
37396: EQUAL
37397: IFTRUE 37401
37399: GO 38209
37401: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37402: LD_VAR 0 6
37406: PPUSH
37407: CALL_OW 264
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 42
37417: PUSH
37418: LD_INT 24
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: IN
37426: IFFALSE 37447
// points := [ 25 , 5 , 3 ] ;
37428: LD_ADDR_VAR 0 9
37432: PUSH
37433: LD_INT 25
37435: PUSH
37436: LD_INT 5
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37447: LD_VAR 0 6
37451: PPUSH
37452: CALL_OW 264
37456: PUSH
37457: LD_INT 4
37459: PUSH
37460: LD_INT 43
37462: PUSH
37463: LD_INT 25
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: IN
37471: IFFALSE 37492
// points := [ 40 , 15 , 5 ] ;
37473: LD_ADDR_VAR 0 9
37477: PUSH
37478: LD_INT 40
37480: PUSH
37481: LD_INT 15
37483: PUSH
37484: LD_INT 5
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37492: LD_VAR 0 6
37496: PPUSH
37497: CALL_OW 264
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: LD_INT 23
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: IN
37512: IFFALSE 37533
// points := [ 7 , 25 , 8 ] ;
37514: LD_ADDR_VAR 0 9
37518: PUSH
37519: LD_INT 7
37521: PUSH
37522: LD_INT 25
37524: PUSH
37525: LD_INT 8
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: LIST
37532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37533: LD_VAR 0 6
37537: PPUSH
37538: CALL_OW 264
37542: PUSH
37543: LD_INT 5
37545: PUSH
37546: LD_INT 27
37548: PUSH
37549: LD_INT 44
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: IN
37557: IFFALSE 37578
// points := [ 14 , 50 , 16 ] ;
37559: LD_ADDR_VAR 0 9
37563: PUSH
37564: LD_INT 14
37566: PUSH
37567: LD_INT 50
37569: PUSH
37570: LD_INT 16
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37578: LD_VAR 0 6
37582: PPUSH
37583: CALL_OW 264
37587: PUSH
37588: LD_INT 6
37590: PUSH
37591: LD_INT 46
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: IN
37598: IFFALSE 37619
// points := [ 32 , 120 , 70 ] ;
37600: LD_ADDR_VAR 0 9
37604: PUSH
37605: LD_INT 32
37607: PUSH
37608: LD_INT 120
37610: PUSH
37611: LD_INT 70
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37619: LD_VAR 0 6
37623: PPUSH
37624: CALL_OW 264
37628: PUSH
37629: LD_INT 7
37631: PUSH
37632: LD_INT 28
37634: PUSH
37635: LD_INT 45
37637: PUSH
37638: LD_INT 92
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: IN
37647: IFFALSE 37668
// points := [ 35 , 20 , 45 ] ;
37649: LD_ADDR_VAR 0 9
37653: PUSH
37654: LD_INT 35
37656: PUSH
37657: LD_INT 20
37659: PUSH
37660: LD_INT 45
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37668: LD_VAR 0 6
37672: PPUSH
37673: CALL_OW 264
37677: PUSH
37678: LD_INT 47
37680: PUSH
37681: EMPTY
37682: LIST
37683: IN
37684: IFFALSE 37705
// points := [ 67 , 45 , 75 ] ;
37686: LD_ADDR_VAR 0 9
37690: PUSH
37691: LD_INT 67
37693: PUSH
37694: LD_INT 45
37696: PUSH
37697: LD_INT 75
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37705: LD_VAR 0 6
37709: PPUSH
37710: CALL_OW 264
37714: PUSH
37715: LD_INT 26
37717: PUSH
37718: EMPTY
37719: LIST
37720: IN
37721: IFFALSE 37742
// points := [ 120 , 30 , 80 ] ;
37723: LD_ADDR_VAR 0 9
37727: PUSH
37728: LD_INT 120
37730: PUSH
37731: LD_INT 30
37733: PUSH
37734: LD_INT 80
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37742: LD_VAR 0 6
37746: PPUSH
37747: CALL_OW 264
37751: PUSH
37752: LD_INT 22
37754: PUSH
37755: EMPTY
37756: LIST
37757: IN
37758: IFFALSE 37779
// points := [ 40 , 1 , 1 ] ;
37760: LD_ADDR_VAR 0 9
37764: PUSH
37765: LD_INT 40
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37779: LD_VAR 0 6
37783: PPUSH
37784: CALL_OW 264
37788: PUSH
37789: LD_INT 29
37791: PUSH
37792: EMPTY
37793: LIST
37794: IN
37795: IFFALSE 37816
// points := [ 70 , 200 , 400 ] ;
37797: LD_ADDR_VAR 0 9
37801: PUSH
37802: LD_INT 70
37804: PUSH
37805: LD_INT 200
37807: PUSH
37808: LD_INT 400
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37816: LD_VAR 0 6
37820: PPUSH
37821: CALL_OW 264
37825: PUSH
37826: LD_INT 14
37828: PUSH
37829: LD_INT 53
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: IN
37836: IFFALSE 37857
// points := [ 40 , 10 , 20 ] ;
37838: LD_ADDR_VAR 0 9
37842: PUSH
37843: LD_INT 40
37845: PUSH
37846: LD_INT 10
37848: PUSH
37849: LD_INT 20
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37857: LD_VAR 0 6
37861: PPUSH
37862: CALL_OW 264
37866: PUSH
37867: LD_INT 9
37869: PUSH
37870: EMPTY
37871: LIST
37872: IN
37873: IFFALSE 37894
// points := [ 5 , 70 , 20 ] ;
37875: LD_ADDR_VAR 0 9
37879: PUSH
37880: LD_INT 5
37882: PUSH
37883: LD_INT 70
37885: PUSH
37886: LD_INT 20
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37894: LD_VAR 0 6
37898: PPUSH
37899: CALL_OW 264
37903: PUSH
37904: LD_INT 10
37906: PUSH
37907: EMPTY
37908: LIST
37909: IN
37910: IFFALSE 37931
// points := [ 35 , 110 , 70 ] ;
37912: LD_ADDR_VAR 0 9
37916: PUSH
37917: LD_INT 35
37919: PUSH
37920: LD_INT 110
37922: PUSH
37923: LD_INT 70
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37931: LD_VAR 0 6
37935: PPUSH
37936: CALL_OW 265
37940: PUSH
37941: LD_INT 25
37943: EQUAL
37944: IFFALSE 37965
// points := [ 80 , 65 , 100 ] ;
37946: LD_ADDR_VAR 0 9
37950: PUSH
37951: LD_INT 80
37953: PUSH
37954: LD_INT 65
37956: PUSH
37957: LD_INT 100
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37965: LD_VAR 0 6
37969: PPUSH
37970: CALL_OW 263
37974: PUSH
37975: LD_INT 1
37977: EQUAL
37978: IFFALSE 38013
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37980: LD_ADDR_VAR 0 10
37984: PUSH
37985: LD_VAR 0 10
37989: PUSH
37990: LD_VAR 0 6
37994: PPUSH
37995: CALL_OW 311
37999: PPUSH
38000: LD_INT 3
38002: PPUSH
38003: CALL_OW 259
38007: PUSH
38008: LD_INT 4
38010: MUL
38011: MUL
38012: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38013: LD_VAR 0 6
38017: PPUSH
38018: CALL_OW 263
38022: PUSH
38023: LD_INT 2
38025: EQUAL
38026: IFFALSE 38077
// begin j := IsControledBy ( i ) ;
38028: LD_ADDR_VAR 0 7
38032: PUSH
38033: LD_VAR 0 6
38037: PPUSH
38038: CALL_OW 312
38042: ST_TO_ADDR
// if j then
38043: LD_VAR 0 7
38047: IFFALSE 38077
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38049: LD_ADDR_VAR 0 10
38053: PUSH
38054: LD_VAR 0 10
38058: PUSH
38059: LD_VAR 0 7
38063: PPUSH
38064: LD_INT 3
38066: PPUSH
38067: CALL_OW 259
38071: PUSH
38072: LD_INT 3
38074: MUL
38075: MUL
38076: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38077: LD_VAR 0 6
38081: PPUSH
38082: CALL_OW 264
38086: PUSH
38087: LD_INT 5
38089: PUSH
38090: LD_INT 6
38092: PUSH
38093: LD_INT 46
38095: PUSH
38096: LD_INT 44
38098: PUSH
38099: LD_INT 47
38101: PUSH
38102: LD_INT 45
38104: PUSH
38105: LD_INT 28
38107: PUSH
38108: LD_INT 7
38110: PUSH
38111: LD_INT 27
38113: PUSH
38114: LD_INT 29
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: IN
38129: IFFALSE 38149
38131: PUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: LD_INT 52
38139: PPUSH
38140: CALL_OW 321
38144: PUSH
38145: LD_INT 2
38147: EQUAL
38148: AND
38149: IFFALSE 38166
// bpoints := bpoints * 1.2 ;
38151: LD_ADDR_VAR 0 10
38155: PUSH
38156: LD_VAR 0 10
38160: PUSH
38161: LD_REAL  1.20000000000000E+0000
38164: MUL
38165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38166: LD_VAR 0 6
38170: PPUSH
38171: CALL_OW 264
38175: PUSH
38176: LD_INT 6
38178: PUSH
38179: LD_INT 46
38181: PUSH
38182: LD_INT 47
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: IN
38190: IFFALSE 38207
// bpoints := bpoints * 1.2 ;
38192: LD_ADDR_VAR 0 10
38196: PUSH
38197: LD_VAR 0 10
38201: PUSH
38202: LD_REAL  1.20000000000000E+0000
38205: MUL
38206: ST_TO_ADDR
// end ; unit_building :
38207: GO 38221
38209: LD_INT 3
38211: DOUBLE
38212: EQUAL
38213: IFTRUE 38217
38215: GO 38220
38217: POP
// ; end ;
38218: GO 38221
38220: POP
// for j = 1 to 3 do
38221: LD_ADDR_VAR 0 7
38225: PUSH
38226: DOUBLE
38227: LD_INT 1
38229: DEC
38230: ST_TO_ADDR
38231: LD_INT 3
38233: PUSH
38234: FOR_TO
38235: IFFALSE 38288
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38237: LD_ADDR_VAR 0 5
38241: PUSH
38242: LD_VAR 0 5
38246: PPUSH
38247: LD_VAR 0 7
38251: PPUSH
38252: LD_VAR 0 5
38256: PUSH
38257: LD_VAR 0 7
38261: ARRAY
38262: PUSH
38263: LD_VAR 0 9
38267: PUSH
38268: LD_VAR 0 7
38272: ARRAY
38273: PUSH
38274: LD_VAR 0 10
38278: MUL
38279: PLUS
38280: PPUSH
38281: CALL_OW 1
38285: ST_TO_ADDR
38286: GO 38234
38288: POP
38289: POP
// end ;
38290: GO 36763
38292: POP
38293: POP
// result := Replace ( result , 4 , tmp ) ;
38294: LD_ADDR_VAR 0 5
38298: PUSH
38299: LD_VAR 0 5
38303: PPUSH
38304: LD_INT 4
38306: PPUSH
38307: LD_VAR 0 8
38311: PPUSH
38312: CALL_OW 1
38316: ST_TO_ADDR
// end ;
38317: LD_VAR 0 5
38321: RET
// export function DangerAtRange ( unit , range ) ; begin
38322: LD_INT 0
38324: PPUSH
// if not unit then
38325: LD_VAR 0 1
38329: NOT
38330: IFFALSE 38334
// exit ;
38332: GO 38379
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38334: LD_ADDR_VAR 0 3
38338: PUSH
38339: LD_VAR 0 1
38343: PPUSH
38344: CALL_OW 255
38348: PPUSH
38349: LD_VAR 0 1
38353: PPUSH
38354: CALL_OW 250
38358: PPUSH
38359: LD_VAR 0 1
38363: PPUSH
38364: CALL_OW 251
38368: PPUSH
38369: LD_VAR 0 2
38373: PPUSH
38374: CALL 36613 0 4
38378: ST_TO_ADDR
// end ;
38379: LD_VAR 0 3
38383: RET
// export function DangerInArea ( side , area ) ; begin
38384: LD_INT 0
38386: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38387: LD_ADDR_VAR 0 3
38391: PUSH
38392: LD_VAR 0 2
38396: PPUSH
38397: LD_INT 81
38399: PUSH
38400: LD_VAR 0 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PPUSH
38409: CALL_OW 70
38413: ST_TO_ADDR
// end ;
38414: LD_VAR 0 3
38418: RET
// export function IsExtension ( b ) ; begin
38419: LD_INT 0
38421: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38422: LD_ADDR_VAR 0 2
38426: PUSH
38427: LD_VAR 0 1
38431: PUSH
38432: LD_INT 23
38434: PUSH
38435: LD_INT 20
38437: PUSH
38438: LD_INT 22
38440: PUSH
38441: LD_INT 17
38443: PUSH
38444: LD_INT 24
38446: PUSH
38447: LD_INT 21
38449: PUSH
38450: LD_INT 19
38452: PUSH
38453: LD_INT 16
38455: PUSH
38456: LD_INT 25
38458: PUSH
38459: LD_INT 18
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: IN
38474: ST_TO_ADDR
// end ;
38475: LD_VAR 0 2
38479: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38480: LD_INT 0
38482: PPUSH
38483: PPUSH
38484: PPUSH
// result := [ ] ;
38485: LD_ADDR_VAR 0 4
38489: PUSH
38490: EMPTY
38491: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38492: LD_ADDR_VAR 0 5
38496: PUSH
38497: LD_VAR 0 2
38501: PPUSH
38502: LD_INT 21
38504: PUSH
38505: LD_INT 3
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PPUSH
38512: CALL_OW 70
38516: ST_TO_ADDR
// if not tmp then
38517: LD_VAR 0 5
38521: NOT
38522: IFFALSE 38526
// exit ;
38524: GO 38590
// if checkLink then
38526: LD_VAR 0 3
38530: IFFALSE 38580
// begin for i in tmp do
38532: LD_ADDR_VAR 0 6
38536: PUSH
38537: LD_VAR 0 5
38541: PUSH
38542: FOR_IN
38543: IFFALSE 38578
// if GetBase ( i ) <> base then
38545: LD_VAR 0 6
38549: PPUSH
38550: CALL_OW 274
38554: PUSH
38555: LD_VAR 0 1
38559: NONEQUAL
38560: IFFALSE 38576
// ComLinkToBase ( base , i ) ;
38562: LD_VAR 0 1
38566: PPUSH
38567: LD_VAR 0 6
38571: PPUSH
38572: CALL_OW 169
38576: GO 38542
38578: POP
38579: POP
// end ; result := tmp ;
38580: LD_ADDR_VAR 0 4
38584: PUSH
38585: LD_VAR 0 5
38589: ST_TO_ADDR
// end ;
38590: LD_VAR 0 4
38594: RET
// export function ComComplete ( units , b ) ; var i ; begin
38595: LD_INT 0
38597: PPUSH
38598: PPUSH
// if not units then
38599: LD_VAR 0 1
38603: NOT
38604: IFFALSE 38608
// exit ;
38606: GO 38698
// for i in units do
38608: LD_ADDR_VAR 0 4
38612: PUSH
38613: LD_VAR 0 1
38617: PUSH
38618: FOR_IN
38619: IFFALSE 38696
// if BuildingStatus ( b ) = bs_build then
38621: LD_VAR 0 2
38625: PPUSH
38626: CALL_OW 461
38630: PUSH
38631: LD_INT 1
38633: EQUAL
38634: IFFALSE 38694
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38636: LD_VAR 0 4
38640: PPUSH
38641: LD_STRING h
38643: PUSH
38644: LD_VAR 0 2
38648: PPUSH
38649: CALL_OW 250
38653: PUSH
38654: LD_VAR 0 2
38658: PPUSH
38659: CALL_OW 251
38663: PUSH
38664: LD_VAR 0 2
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: PUSH
38687: EMPTY
38688: LIST
38689: PPUSH
38690: CALL_OW 446
38694: GO 38618
38696: POP
38697: POP
// end ;
38698: LD_VAR 0 3
38702: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38703: LD_INT 0
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38711: LD_VAR 0 1
38715: NOT
38716: IFTRUE 38733
38718: PUSH
38719: LD_VAR 0 1
38723: PPUSH
38724: CALL_OW 263
38728: PUSH
38729: LD_INT 2
38731: NONEQUAL
38732: OR
38733: IFFALSE 38737
// exit ;
38735: GO 39053
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38737: LD_ADDR_VAR 0 6
38741: PUSH
38742: LD_INT 22
38744: PUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: CALL_OW 255
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: LD_INT 30
38764: PUSH
38765: LD_INT 36
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 34
38774: PUSH
38775: LD_INT 31
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PPUSH
38791: CALL_OW 69
38795: ST_TO_ADDR
// if not tmp then
38796: LD_VAR 0 6
38800: NOT
38801: IFFALSE 38805
// exit ;
38803: GO 39053
// result := [ ] ;
38805: LD_ADDR_VAR 0 2
38809: PUSH
38810: EMPTY
38811: ST_TO_ADDR
// for i in tmp do
38812: LD_ADDR_VAR 0 3
38816: PUSH
38817: LD_VAR 0 6
38821: PUSH
38822: FOR_IN
38823: IFFALSE 38894
// begin t := UnitsInside ( i ) ;
38825: LD_ADDR_VAR 0 4
38829: PUSH
38830: LD_VAR 0 3
38834: PPUSH
38835: CALL_OW 313
38839: ST_TO_ADDR
// if t then
38840: LD_VAR 0 4
38844: IFFALSE 38892
// for j in t do
38846: LD_ADDR_VAR 0 7
38850: PUSH
38851: LD_VAR 0 4
38855: PUSH
38856: FOR_IN
38857: IFFALSE 38890
// result := Replace ( result , result + 1 , j ) ;
38859: LD_ADDR_VAR 0 2
38863: PUSH
38864: LD_VAR 0 2
38868: PPUSH
38869: LD_VAR 0 2
38873: PUSH
38874: LD_INT 1
38876: PLUS
38877: PPUSH
38878: LD_VAR 0 7
38882: PPUSH
38883: CALL_OW 1
38887: ST_TO_ADDR
38888: GO 38856
38890: POP
38891: POP
// end ;
38892: GO 38822
38894: POP
38895: POP
// if not result then
38896: LD_VAR 0 2
38900: NOT
38901: IFFALSE 38905
// exit ;
38903: GO 39053
// mech := result [ 1 ] ;
38905: LD_ADDR_VAR 0 5
38909: PUSH
38910: LD_VAR 0 2
38914: PUSH
38915: LD_INT 1
38917: ARRAY
38918: ST_TO_ADDR
// if result > 1 then
38919: LD_VAR 0 2
38923: PUSH
38924: LD_INT 1
38926: GREATER
38927: IFFALSE 39039
// begin for i = 2 to result do
38929: LD_ADDR_VAR 0 3
38933: PUSH
38934: DOUBLE
38935: LD_INT 2
38937: DEC
38938: ST_TO_ADDR
38939: LD_VAR 0 2
38943: PUSH
38944: FOR_TO
38945: IFFALSE 39037
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38947: LD_ADDR_VAR 0 4
38951: PUSH
38952: LD_VAR 0 2
38956: PUSH
38957: LD_VAR 0 3
38961: ARRAY
38962: PPUSH
38963: LD_INT 3
38965: PPUSH
38966: CALL_OW 259
38970: PUSH
38971: LD_VAR 0 2
38975: PUSH
38976: LD_VAR 0 3
38980: ARRAY
38981: PPUSH
38982: CALL_OW 432
38986: MINUS
38987: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38988: LD_VAR 0 4
38992: PUSH
38993: LD_VAR 0 5
38997: PPUSH
38998: LD_INT 3
39000: PPUSH
39001: CALL_OW 259
39005: PUSH
39006: LD_VAR 0 5
39010: PPUSH
39011: CALL_OW 432
39015: MINUS
39016: GREATEREQUAL
39017: IFFALSE 39035
// mech := result [ i ] ;
39019: LD_ADDR_VAR 0 5
39023: PUSH
39024: LD_VAR 0 2
39028: PUSH
39029: LD_VAR 0 3
39033: ARRAY
39034: ST_TO_ADDR
// end ;
39035: GO 38944
39037: POP
39038: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39039: LD_VAR 0 1
39043: PPUSH
39044: LD_VAR 0 5
39048: PPUSH
39049: CALL_OW 135
// end ;
39053: LD_VAR 0 2
39057: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39058: LD_INT 0
39060: PPUSH
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
39065: PPUSH
39066: PPUSH
39067: PPUSH
39068: PPUSH
39069: PPUSH
39070: PPUSH
39071: PPUSH
39072: PPUSH
// result := [ ] ;
39073: LD_ADDR_VAR 0 7
39077: PUSH
39078: EMPTY
39079: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39080: LD_VAR 0 1
39084: PPUSH
39085: CALL_OW 266
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: IN
39100: NOT
39101: IFFALSE 39105
// exit ;
39103: GO 40745
// if name then
39105: LD_VAR 0 3
39109: IFFALSE 39125
// SetBName ( base_dep , name ) ;
39111: LD_VAR 0 1
39115: PPUSH
39116: LD_VAR 0 3
39120: PPUSH
39121: CALL_OW 500
// base := GetBase ( base_dep ) ;
39125: LD_ADDR_VAR 0 15
39129: PUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 274
39139: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39140: LD_ADDR_VAR 0 16
39144: PUSH
39145: LD_VAR 0 1
39149: PPUSH
39150: CALL_OW 255
39154: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39155: LD_ADDR_VAR 0 17
39159: PUSH
39160: LD_VAR 0 1
39164: PPUSH
39165: CALL_OW 248
39169: ST_TO_ADDR
// if sources then
39170: LD_VAR 0 5
39174: IFFALSE 39221
// for i = 1 to 3 do
39176: LD_ADDR_VAR 0 8
39180: PUSH
39181: DOUBLE
39182: LD_INT 1
39184: DEC
39185: ST_TO_ADDR
39186: LD_INT 3
39188: PUSH
39189: FOR_TO
39190: IFFALSE 39219
// AddResourceType ( base , i , sources [ i ] ) ;
39192: LD_VAR 0 15
39196: PPUSH
39197: LD_VAR 0 8
39201: PPUSH
39202: LD_VAR 0 5
39206: PUSH
39207: LD_VAR 0 8
39211: ARRAY
39212: PPUSH
39213: CALL_OW 276
39217: GO 39189
39219: POP
39220: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39221: LD_ADDR_VAR 0 18
39225: PUSH
39226: LD_VAR 0 15
39230: PPUSH
39231: LD_VAR 0 2
39235: PPUSH
39236: LD_INT 1
39238: PPUSH
39239: CALL 38480 0 3
39243: ST_TO_ADDR
// InitHc ;
39244: CALL_OW 19
// InitUc ;
39248: CALL_OW 18
// uc_side := side ;
39252: LD_ADDR_OWVAR 20
39256: PUSH
39257: LD_VAR 0 16
39261: ST_TO_ADDR
// uc_nation := nation ;
39262: LD_ADDR_OWVAR 21
39266: PUSH
39267: LD_VAR 0 17
39271: ST_TO_ADDR
// if buildings then
39272: LD_VAR 0 18
39276: IFFALSE 40604
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39278: LD_ADDR_VAR 0 19
39282: PUSH
39283: LD_VAR 0 18
39287: PPUSH
39288: LD_INT 2
39290: PUSH
39291: LD_INT 30
39293: PUSH
39294: LD_INT 29
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 30
39303: PUSH
39304: LD_INT 30
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: PPUSH
39316: CALL_OW 72
39320: ST_TO_ADDR
// if tmp then
39321: LD_VAR 0 19
39325: IFFALSE 39373
// for i in tmp do
39327: LD_ADDR_VAR 0 8
39331: PUSH
39332: LD_VAR 0 19
39336: PUSH
39337: FOR_IN
39338: IFFALSE 39371
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39340: LD_VAR 0 8
39344: PPUSH
39345: CALL_OW 250
39349: PPUSH
39350: LD_VAR 0 8
39354: PPUSH
39355: CALL_OW 251
39359: PPUSH
39360: LD_VAR 0 16
39364: PPUSH
39365: CALL_OW 441
39369: GO 39337
39371: POP
39372: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39373: LD_VAR 0 18
39377: PPUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 30
39383: PUSH
39384: LD_INT 32
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 30
39393: PUSH
39394: LD_INT 33
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: PPUSH
39406: CALL_OW 72
39410: IFFALSE 39498
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39412: LD_ADDR_VAR 0 8
39416: PUSH
39417: LD_VAR 0 18
39421: PPUSH
39422: LD_INT 2
39424: PUSH
39425: LD_INT 30
39427: PUSH
39428: LD_INT 32
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 30
39437: PUSH
39438: LD_INT 33
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: PPUSH
39450: CALL_OW 72
39454: PUSH
39455: FOR_IN
39456: IFFALSE 39496
// begin if not GetBWeapon ( i ) then
39458: LD_VAR 0 8
39462: PPUSH
39463: CALL_OW 269
39467: NOT
39468: IFFALSE 39494
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39470: LD_VAR 0 8
39474: PPUSH
39475: LD_VAR 0 8
39479: PPUSH
39480: LD_VAR 0 2
39484: PPUSH
39485: CALL 40750 0 2
39489: PPUSH
39490: CALL_OW 431
// end ;
39494: GO 39455
39496: POP
39497: POP
// end ; for i = 1 to personel do
39498: LD_ADDR_VAR 0 8
39502: PUSH
39503: DOUBLE
39504: LD_INT 1
39506: DEC
39507: ST_TO_ADDR
39508: LD_VAR 0 6
39512: PUSH
39513: FOR_TO
39514: IFFALSE 40584
// begin if i > 4 then
39516: LD_VAR 0 8
39520: PUSH
39521: LD_INT 4
39523: GREATER
39524: IFFALSE 39528
// break ;
39526: GO 40584
// case i of 1 :
39528: LD_VAR 0 8
39532: PUSH
39533: LD_INT 1
39535: DOUBLE
39536: EQUAL
39537: IFTRUE 39541
39539: GO 39621
39541: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39542: LD_ADDR_VAR 0 12
39546: PUSH
39547: LD_VAR 0 18
39551: PPUSH
39552: LD_INT 22
39554: PUSH
39555: LD_VAR 0 16
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 58
39566: PUSH
39567: EMPTY
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 30
39575: PUSH
39576: LD_INT 32
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 30
39585: PUSH
39586: LD_INT 4
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 30
39595: PUSH
39596: LD_INT 5
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: PPUSH
39614: CALL_OW 72
39618: ST_TO_ADDR
39619: GO 39843
39621: LD_INT 2
39623: DOUBLE
39624: EQUAL
39625: IFTRUE 39629
39627: GO 39691
39629: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39630: LD_ADDR_VAR 0 12
39634: PUSH
39635: LD_VAR 0 18
39639: PPUSH
39640: LD_INT 22
39642: PUSH
39643: LD_VAR 0 16
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: LD_INT 30
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 30
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: LIST
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PPUSH
39684: CALL_OW 72
39688: ST_TO_ADDR
39689: GO 39843
39691: LD_INT 3
39693: DOUBLE
39694: EQUAL
39695: IFTRUE 39699
39697: GO 39761
39699: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39700: LD_ADDR_VAR 0 12
39704: PUSH
39705: LD_VAR 0 18
39709: PPUSH
39710: LD_INT 22
39712: PUSH
39713: LD_VAR 0 16
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: LD_INT 30
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 30
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PPUSH
39754: CALL_OW 72
39758: ST_TO_ADDR
39759: GO 39843
39761: LD_INT 4
39763: DOUBLE
39764: EQUAL
39765: IFTRUE 39769
39767: GO 39842
39769: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39770: LD_ADDR_VAR 0 12
39774: PUSH
39775: LD_VAR 0 18
39779: PPUSH
39780: LD_INT 22
39782: PUSH
39783: LD_VAR 0 16
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 30
39797: PUSH
39798: LD_INT 6
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 30
39807: PUSH
39808: LD_INT 7
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 30
39817: PUSH
39818: LD_INT 8
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PPUSH
39835: CALL_OW 72
39839: ST_TO_ADDR
39840: GO 39843
39842: POP
// if i = 1 then
39843: LD_VAR 0 8
39847: PUSH
39848: LD_INT 1
39850: EQUAL
39851: IFFALSE 39962
// begin tmp := [ ] ;
39853: LD_ADDR_VAR 0 19
39857: PUSH
39858: EMPTY
39859: ST_TO_ADDR
// for j in f do
39860: LD_ADDR_VAR 0 9
39864: PUSH
39865: LD_VAR 0 12
39869: PUSH
39870: FOR_IN
39871: IFFALSE 39944
// if GetBType ( j ) = b_bunker then
39873: LD_VAR 0 9
39877: PPUSH
39878: CALL_OW 266
39882: PUSH
39883: LD_INT 32
39885: EQUAL
39886: IFFALSE 39913
// tmp := Insert ( tmp , 1 , j ) else
39888: LD_ADDR_VAR 0 19
39892: PUSH
39893: LD_VAR 0 19
39897: PPUSH
39898: LD_INT 1
39900: PPUSH
39901: LD_VAR 0 9
39905: PPUSH
39906: CALL_OW 2
39910: ST_TO_ADDR
39911: GO 39942
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39913: LD_ADDR_VAR 0 19
39917: PUSH
39918: LD_VAR 0 19
39922: PPUSH
39923: LD_VAR 0 19
39927: PUSH
39928: LD_INT 1
39930: PLUS
39931: PPUSH
39932: LD_VAR 0 9
39936: PPUSH
39937: CALL_OW 2
39941: ST_TO_ADDR
39942: GO 39870
39944: POP
39945: POP
// if tmp then
39946: LD_VAR 0 19
39950: IFFALSE 39962
// f := tmp ;
39952: LD_ADDR_VAR 0 12
39956: PUSH
39957: LD_VAR 0 19
39961: ST_TO_ADDR
// end ; x := personel [ i ] ;
39962: LD_ADDR_VAR 0 13
39966: PUSH
39967: LD_VAR 0 6
39971: PUSH
39972: LD_VAR 0 8
39976: ARRAY
39977: ST_TO_ADDR
// if x = - 1 then
39978: LD_VAR 0 13
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: EQUAL
39987: IFFALSE 40198
// begin for j in f do
39989: LD_ADDR_VAR 0 9
39993: PUSH
39994: LD_VAR 0 12
39998: PUSH
39999: FOR_IN
40000: IFFALSE 40194
// repeat InitHc ;
40002: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40006: LD_VAR 0 9
40010: PPUSH
40011: CALL_OW 266
40015: PUSH
40016: LD_INT 5
40018: EQUAL
40019: IFFALSE 40089
// begin if UnitsInside ( j ) < 3 then
40021: LD_VAR 0 9
40025: PPUSH
40026: CALL_OW 313
40030: PUSH
40031: LD_INT 3
40033: LESS
40034: IFFALSE 40070
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40036: LD_INT 0
40038: PPUSH
40039: LD_INT 5
40041: PUSH
40042: LD_INT 8
40044: PUSH
40045: LD_INT 9
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: PUSH
40053: LD_VAR 0 17
40057: ARRAY
40058: PPUSH
40059: LD_VAR 0 4
40063: PPUSH
40064: CALL_OW 380
40068: GO 40087
// PrepareHuman ( false , i , skill ) ;
40070: LD_INT 0
40072: PPUSH
40073: LD_VAR 0 8
40077: PPUSH
40078: LD_VAR 0 4
40082: PPUSH
40083: CALL_OW 380
// end else
40087: GO 40106
// PrepareHuman ( false , i , skill ) ;
40089: LD_INT 0
40091: PPUSH
40092: LD_VAR 0 8
40096: PPUSH
40097: LD_VAR 0 4
40101: PPUSH
40102: CALL_OW 380
// un := CreateHuman ;
40106: LD_ADDR_VAR 0 14
40110: PUSH
40111: CALL_OW 44
40115: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40116: LD_ADDR_VAR 0 7
40120: PUSH
40121: LD_VAR 0 7
40125: PPUSH
40126: LD_INT 1
40128: PPUSH
40129: LD_VAR 0 14
40133: PPUSH
40134: CALL_OW 2
40138: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40139: LD_VAR 0 14
40143: PPUSH
40144: LD_VAR 0 9
40148: PPUSH
40149: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40153: LD_VAR 0 9
40157: PPUSH
40158: CALL_OW 313
40162: PUSH
40163: LD_INT 6
40165: EQUAL
40166: IFTRUE 40190
40168: PUSH
40169: LD_VAR 0 9
40173: PPUSH
40174: CALL_OW 266
40178: PUSH
40179: LD_INT 32
40181: PUSH
40182: LD_INT 31
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: IN
40189: OR
40190: IFFALSE 40002
40192: GO 39999
40194: POP
40195: POP
// end else
40196: GO 40582
// for j = 1 to x do
40198: LD_ADDR_VAR 0 9
40202: PUSH
40203: DOUBLE
40204: LD_INT 1
40206: DEC
40207: ST_TO_ADDR
40208: LD_VAR 0 13
40212: PUSH
40213: FOR_TO
40214: IFFALSE 40580
// begin InitHc ;
40216: CALL_OW 19
// if not f then
40220: LD_VAR 0 12
40224: NOT
40225: IFFALSE 40314
// begin PrepareHuman ( false , i , skill ) ;
40227: LD_INT 0
40229: PPUSH
40230: LD_VAR 0 8
40234: PPUSH
40235: LD_VAR 0 4
40239: PPUSH
40240: CALL_OW 380
// un := CreateHuman ;
40244: LD_ADDR_VAR 0 14
40248: PUSH
40249: CALL_OW 44
40253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40254: LD_ADDR_VAR 0 7
40258: PUSH
40259: LD_VAR 0 7
40263: PPUSH
40264: LD_INT 1
40266: PPUSH
40267: LD_VAR 0 14
40271: PPUSH
40272: CALL_OW 2
40276: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40277: LD_VAR 0 14
40281: PPUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: CALL_OW 250
40291: PPUSH
40292: LD_VAR 0 1
40296: PPUSH
40297: CALL_OW 251
40301: PPUSH
40302: LD_INT 10
40304: PPUSH
40305: LD_INT 0
40307: PPUSH
40308: CALL_OW 50
// continue ;
40312: GO 40213
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40314: LD_VAR 0 12
40318: PUSH
40319: LD_INT 1
40321: ARRAY
40322: PPUSH
40323: CALL_OW 313
40327: IFFALSE 40355
40329: PUSH
40330: LD_VAR 0 12
40334: PUSH
40335: LD_INT 1
40337: ARRAY
40338: PPUSH
40339: CALL_OW 266
40343: PUSH
40344: LD_INT 32
40346: PUSH
40347: LD_INT 31
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: IN
40354: AND
40355: IFTRUE 40376
40357: PUSH
40358: LD_VAR 0 12
40362: PUSH
40363: LD_INT 1
40365: ARRAY
40366: PPUSH
40367: CALL_OW 313
40371: PUSH
40372: LD_INT 6
40374: EQUAL
40375: OR
40376: IFFALSE 40396
// f := Delete ( f , 1 ) ;
40378: LD_ADDR_VAR 0 12
40382: PUSH
40383: LD_VAR 0 12
40387: PPUSH
40388: LD_INT 1
40390: PPUSH
40391: CALL_OW 3
40395: ST_TO_ADDR
// if not f then
40396: LD_VAR 0 12
40400: NOT
40401: IFFALSE 40419
// begin x := x + 2 ;
40403: LD_ADDR_VAR 0 13
40407: PUSH
40408: LD_VAR 0 13
40412: PUSH
40413: LD_INT 2
40415: PLUS
40416: ST_TO_ADDR
// continue ;
40417: GO 40213
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40419: LD_VAR 0 12
40423: PUSH
40424: LD_INT 1
40426: ARRAY
40427: PPUSH
40428: CALL_OW 266
40432: PUSH
40433: LD_INT 5
40435: EQUAL
40436: IFFALSE 40510
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40438: LD_VAR 0 12
40442: PUSH
40443: LD_INT 1
40445: ARRAY
40446: PPUSH
40447: CALL_OW 313
40451: PUSH
40452: LD_INT 3
40454: LESS
40455: IFFALSE 40491
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40457: LD_INT 0
40459: PPUSH
40460: LD_INT 5
40462: PUSH
40463: LD_INT 8
40465: PUSH
40466: LD_INT 9
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: PUSH
40474: LD_VAR 0 17
40478: ARRAY
40479: PPUSH
40480: LD_VAR 0 4
40484: PPUSH
40485: CALL_OW 380
40489: GO 40508
// PrepareHuman ( false , i , skill ) ;
40491: LD_INT 0
40493: PPUSH
40494: LD_VAR 0 8
40498: PPUSH
40499: LD_VAR 0 4
40503: PPUSH
40504: CALL_OW 380
// end else
40508: GO 40527
// PrepareHuman ( false , i , skill ) ;
40510: LD_INT 0
40512: PPUSH
40513: LD_VAR 0 8
40517: PPUSH
40518: LD_VAR 0 4
40522: PPUSH
40523: CALL_OW 380
// un := CreateHuman ;
40527: LD_ADDR_VAR 0 14
40531: PUSH
40532: CALL_OW 44
40536: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40537: LD_ADDR_VAR 0 7
40541: PUSH
40542: LD_VAR 0 7
40546: PPUSH
40547: LD_INT 1
40549: PPUSH
40550: LD_VAR 0 14
40554: PPUSH
40555: CALL_OW 2
40559: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40560: LD_VAR 0 14
40564: PPUSH
40565: LD_VAR 0 12
40569: PUSH
40570: LD_INT 1
40572: ARRAY
40573: PPUSH
40574: CALL_OW 52
// end ;
40578: GO 40213
40580: POP
40581: POP
// end ;
40582: GO 39513
40584: POP
40585: POP
// result := result ^ buildings ;
40586: LD_ADDR_VAR 0 7
40590: PUSH
40591: LD_VAR 0 7
40595: PUSH
40596: LD_VAR 0 18
40600: ADD
40601: ST_TO_ADDR
// end else
40602: GO 40745
// begin for i = 1 to personel do
40604: LD_ADDR_VAR 0 8
40608: PUSH
40609: DOUBLE
40610: LD_INT 1
40612: DEC
40613: ST_TO_ADDR
40614: LD_VAR 0 6
40618: PUSH
40619: FOR_TO
40620: IFFALSE 40743
// begin if i > 4 then
40622: LD_VAR 0 8
40626: PUSH
40627: LD_INT 4
40629: GREATER
40630: IFFALSE 40634
// break ;
40632: GO 40743
// x := personel [ i ] ;
40634: LD_ADDR_VAR 0 13
40638: PUSH
40639: LD_VAR 0 6
40643: PUSH
40644: LD_VAR 0 8
40648: ARRAY
40649: ST_TO_ADDR
// if x = - 1 then
40650: LD_VAR 0 13
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: EQUAL
40659: IFFALSE 40663
// continue ;
40661: GO 40619
// PrepareHuman ( false , i , skill ) ;
40663: LD_INT 0
40665: PPUSH
40666: LD_VAR 0 8
40670: PPUSH
40671: LD_VAR 0 4
40675: PPUSH
40676: CALL_OW 380
// un := CreateHuman ;
40680: LD_ADDR_VAR 0 14
40684: PUSH
40685: CALL_OW 44
40689: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40690: LD_VAR 0 14
40694: PPUSH
40695: LD_VAR 0 1
40699: PPUSH
40700: CALL_OW 250
40704: PPUSH
40705: LD_VAR 0 1
40709: PPUSH
40710: CALL_OW 251
40714: PPUSH
40715: LD_INT 10
40717: PPUSH
40718: LD_INT 0
40720: PPUSH
40721: CALL_OW 50
// result := result ^ un ;
40725: LD_ADDR_VAR 0 7
40729: PUSH
40730: LD_VAR 0 7
40734: PUSH
40735: LD_VAR 0 14
40739: ADD
40740: ST_TO_ADDR
// end ;
40741: GO 40619
40743: POP
40744: POP
// end ; end ;
40745: LD_VAR 0 7
40749: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40750: LD_INT 0
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
// result := false ;
40768: LD_ADDR_VAR 0 3
40772: PUSH
40773: LD_INT 0
40775: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40776: LD_VAR 0 1
40780: NOT
40781: IFTRUE 40806
40783: PUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: CALL_OW 266
40793: PUSH
40794: LD_INT 32
40796: PUSH
40797: LD_INT 33
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: IN
40804: NOT
40805: OR
40806: IFFALSE 40810
// exit ;
40808: GO 41945
// nat := GetNation ( tower ) ;
40810: LD_ADDR_VAR 0 12
40814: PUSH
40815: LD_VAR 0 1
40819: PPUSH
40820: CALL_OW 248
40824: ST_TO_ADDR
// side := GetSide ( tower ) ;
40825: LD_ADDR_VAR 0 16
40829: PUSH
40830: LD_VAR 0 1
40834: PPUSH
40835: CALL_OW 255
40839: ST_TO_ADDR
// x := GetX ( tower ) ;
40840: LD_ADDR_VAR 0 10
40844: PUSH
40845: LD_VAR 0 1
40849: PPUSH
40850: CALL_OW 250
40854: ST_TO_ADDR
// y := GetY ( tower ) ;
40855: LD_ADDR_VAR 0 11
40859: PUSH
40860: LD_VAR 0 1
40864: PPUSH
40865: CALL_OW 251
40869: ST_TO_ADDR
// if not x or not y then
40870: LD_VAR 0 10
40874: NOT
40875: IFTRUE 40884
40877: PUSH
40878: LD_VAR 0 11
40882: NOT
40883: OR
40884: IFFALSE 40888
// exit ;
40886: GO 41945
// weapon := 0 ;
40888: LD_ADDR_VAR 0 18
40892: PUSH
40893: LD_INT 0
40895: ST_TO_ADDR
// fac_list := [ ] ;
40896: LD_ADDR_VAR 0 17
40900: PUSH
40901: EMPTY
40902: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40903: LD_ADDR_VAR 0 6
40907: PUSH
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL_OW 274
40917: PPUSH
40918: LD_VAR 0 2
40922: PPUSH
40923: LD_INT 0
40925: PPUSH
40926: CALL 38480 0 3
40930: PPUSH
40931: LD_INT 30
40933: PUSH
40934: LD_INT 3
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PPUSH
40941: CALL_OW 72
40945: ST_TO_ADDR
// if not factories then
40946: LD_VAR 0 6
40950: NOT
40951: IFFALSE 40955
// exit ;
40953: GO 41945
// for i in factories do
40955: LD_ADDR_VAR 0 8
40959: PUSH
40960: LD_VAR 0 6
40964: PUSH
40965: FOR_IN
40966: IFFALSE 40991
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40968: LD_ADDR_VAR 0 17
40972: PUSH
40973: LD_VAR 0 17
40977: PUSH
40978: LD_VAR 0 8
40982: PPUSH
40983: CALL_OW 478
40987: UNION
40988: ST_TO_ADDR
40989: GO 40965
40991: POP
40992: POP
// if not fac_list then
40993: LD_VAR 0 17
40997: NOT
40998: IFFALSE 41002
// exit ;
41000: GO 41945
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41002: LD_ADDR_VAR 0 5
41006: PUSH
41007: LD_INT 4
41009: PUSH
41010: LD_INT 5
41012: PUSH
41013: LD_INT 9
41015: PUSH
41016: LD_INT 10
41018: PUSH
41019: LD_INT 6
41021: PUSH
41022: LD_INT 7
41024: PUSH
41025: LD_INT 11
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 27
41039: PUSH
41040: LD_INT 28
41042: PUSH
41043: LD_INT 26
41045: PUSH
41046: LD_INT 30
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 43
41057: PUSH
41058: LD_INT 44
41060: PUSH
41061: LD_INT 46
41063: PUSH
41064: LD_INT 45
41066: PUSH
41067: LD_INT 47
41069: PUSH
41070: LD_INT 49
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: LIST
41085: PUSH
41086: LD_VAR 0 12
41090: ARRAY
41091: ST_TO_ADDR
// list := list isect fac_list ;
41092: LD_ADDR_VAR 0 5
41096: PUSH
41097: LD_VAR 0 5
41101: PUSH
41102: LD_VAR 0 17
41106: ISECT
41107: ST_TO_ADDR
// if not list then
41108: LD_VAR 0 5
41112: NOT
41113: IFFALSE 41117
// exit ;
41115: GO 41945
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41117: LD_VAR 0 12
41121: PUSH
41122: LD_INT 3
41124: EQUAL
41125: IFFALSE 41137
41127: PUSH
41128: LD_INT 49
41130: PUSH
41131: LD_VAR 0 5
41135: IN
41136: AND
41137: IFFALSE 41157
41139: PUSH
41140: LD_INT 31
41142: PPUSH
41143: LD_VAR 0 16
41147: PPUSH
41148: CALL_OW 321
41152: PUSH
41153: LD_INT 2
41155: EQUAL
41156: AND
41157: IFFALSE 41217
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41159: LD_INT 22
41161: PUSH
41162: LD_VAR 0 16
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 35
41173: PUSH
41174: LD_INT 49
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 91
41183: PUSH
41184: LD_VAR 0 1
41188: PUSH
41189: LD_INT 10
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: PPUSH
41202: CALL_OW 69
41206: NOT
41207: IFFALSE 41217
// weapon := ru_time_lapser ;
41209: LD_ADDR_VAR 0 18
41213: PUSH
41214: LD_INT 49
41216: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41217: LD_VAR 0 12
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 2
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: IN
41232: IFFALSE 41256
41234: PUSH
41235: LD_INT 11
41237: PUSH
41238: LD_VAR 0 5
41242: IN
41243: IFTRUE 41255
41245: PUSH
41246: LD_INT 30
41248: PUSH
41249: LD_VAR 0 5
41253: IN
41254: OR
41255: AND
41256: IFFALSE 41276
41258: PUSH
41259: LD_INT 6
41261: PPUSH
41262: LD_VAR 0 16
41266: PPUSH
41267: CALL_OW 321
41271: PUSH
41272: LD_INT 2
41274: EQUAL
41275: AND
41276: IFFALSE 41443
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41278: LD_INT 22
41280: PUSH
41281: LD_VAR 0 16
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: LD_INT 35
41295: PUSH
41296: LD_INT 11
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 35
41305: PUSH
41306: LD_INT 30
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 91
41320: PUSH
41321: LD_VAR 0 1
41325: PUSH
41326: LD_INT 18
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: PPUSH
41339: CALL_OW 69
41343: NOT
41344: IFFALSE 41420
41346: PUSH
41347: LD_INT 22
41349: PUSH
41350: LD_VAR 0 16
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: LD_INT 30
41364: PUSH
41365: LD_INT 32
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 30
41374: PUSH
41375: LD_INT 33
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 91
41389: PUSH
41390: LD_VAR 0 1
41394: PUSH
41395: LD_INT 12
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: PUSH
41408: EMPTY
41409: LIST
41410: PPUSH
41411: CALL_OW 69
41415: PUSH
41416: LD_INT 2
41418: GREATER
41419: AND
41420: IFFALSE 41443
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41422: LD_ADDR_VAR 0 18
41426: PUSH
41427: LD_INT 11
41429: PUSH
41430: LD_INT 30
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_VAR 0 12
41441: ARRAY
41442: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41443: LD_VAR 0 18
41447: NOT
41448: IFFALSE 41468
41450: PUSH
41451: LD_INT 40
41453: PPUSH
41454: LD_VAR 0 16
41458: PPUSH
41459: CALL_OW 321
41463: PUSH
41464: LD_INT 2
41466: EQUAL
41467: AND
41468: IFFALSE 41504
41470: PUSH
41471: LD_INT 7
41473: PUSH
41474: LD_VAR 0 5
41478: IN
41479: IFTRUE 41491
41481: PUSH
41482: LD_INT 28
41484: PUSH
41485: LD_VAR 0 5
41489: IN
41490: OR
41491: IFTRUE 41503
41493: PUSH
41494: LD_INT 45
41496: PUSH
41497: LD_VAR 0 5
41501: IN
41502: OR
41503: AND
41504: IFFALSE 41758
// begin hex := GetHexInfo ( x , y ) ;
41506: LD_ADDR_VAR 0 4
41510: PUSH
41511: LD_VAR 0 10
41515: PPUSH
41516: LD_VAR 0 11
41520: PPUSH
41521: CALL_OW 546
41525: ST_TO_ADDR
// if hex [ 1 ] then
41526: LD_VAR 0 4
41530: PUSH
41531: LD_INT 1
41533: ARRAY
41534: IFFALSE 41538
// exit ;
41536: GO 41945
// height := hex [ 2 ] ;
41538: LD_ADDR_VAR 0 15
41542: PUSH
41543: LD_VAR 0 4
41547: PUSH
41548: LD_INT 2
41550: ARRAY
41551: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41552: LD_ADDR_VAR 0 14
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 5
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: ST_TO_ADDR
// for i in tmp do
41575: LD_ADDR_VAR 0 8
41579: PUSH
41580: LD_VAR 0 14
41584: PUSH
41585: FOR_IN
41586: IFFALSE 41756
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41588: LD_ADDR_VAR 0 9
41592: PUSH
41593: LD_VAR 0 10
41597: PPUSH
41598: LD_VAR 0 8
41602: PPUSH
41603: LD_INT 5
41605: PPUSH
41606: CALL_OW 272
41610: PUSH
41611: LD_VAR 0 11
41615: PPUSH
41616: LD_VAR 0 8
41620: PPUSH
41621: LD_INT 5
41623: PPUSH
41624: CALL_OW 273
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41633: LD_VAR 0 9
41637: PUSH
41638: LD_INT 1
41640: ARRAY
41641: PPUSH
41642: LD_VAR 0 9
41646: PUSH
41647: LD_INT 2
41649: ARRAY
41650: PPUSH
41651: CALL_OW 488
41655: IFFALSE 41754
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41657: LD_ADDR_VAR 0 4
41661: PUSH
41662: LD_VAR 0 9
41666: PUSH
41667: LD_INT 1
41669: ARRAY
41670: PPUSH
41671: LD_VAR 0 9
41675: PUSH
41676: LD_INT 2
41678: ARRAY
41679: PPUSH
41680: CALL_OW 546
41684: ST_TO_ADDR
// if hex [ 1 ] then
41685: LD_VAR 0 4
41689: PUSH
41690: LD_INT 1
41692: ARRAY
41693: IFFALSE 41697
// continue ;
41695: GO 41585
// h := hex [ 2 ] ;
41697: LD_ADDR_VAR 0 13
41701: PUSH
41702: LD_VAR 0 4
41706: PUSH
41707: LD_INT 2
41709: ARRAY
41710: ST_TO_ADDR
// if h + 7 < height then
41711: LD_VAR 0 13
41715: PUSH
41716: LD_INT 7
41718: PLUS
41719: PUSH
41720: LD_VAR 0 15
41724: LESS
41725: IFFALSE 41754
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41727: LD_ADDR_VAR 0 18
41731: PUSH
41732: LD_INT 7
41734: PUSH
41735: LD_INT 28
41737: PUSH
41738: LD_INT 45
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: PUSH
41746: LD_VAR 0 12
41750: ARRAY
41751: ST_TO_ADDR
// break ;
41752: GO 41756
// end ; end ; end ;
41754: GO 41585
41756: POP
41757: POP
// end ; if not weapon then
41758: LD_VAR 0 18
41762: NOT
41763: IFFALSE 41823
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41765: LD_ADDR_VAR 0 5
41769: PUSH
41770: LD_VAR 0 5
41774: PUSH
41775: LD_INT 11
41777: PUSH
41778: LD_INT 30
41780: PUSH
41781: LD_INT 49
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: DIFF
41789: ST_TO_ADDR
// if not list then
41790: LD_VAR 0 5
41794: NOT
41795: IFFALSE 41799
// exit ;
41797: GO 41945
// weapon := list [ rand ( 1 , list ) ] ;
41799: LD_ADDR_VAR 0 18
41803: PUSH
41804: LD_VAR 0 5
41808: PUSH
41809: LD_INT 1
41811: PPUSH
41812: LD_VAR 0 5
41816: PPUSH
41817: CALL_OW 12
41821: ARRAY
41822: ST_TO_ADDR
// end ; if weapon then
41823: LD_VAR 0 18
41827: IFFALSE 41945
// begin tmp := CostOfWeapon ( weapon ) ;
41829: LD_ADDR_VAR 0 14
41833: PUSH
41834: LD_VAR 0 18
41838: PPUSH
41839: CALL_OW 451
41843: ST_TO_ADDR
// j := GetBase ( tower ) ;
41844: LD_ADDR_VAR 0 9
41848: PUSH
41849: LD_VAR 0 1
41853: PPUSH
41854: CALL_OW 274
41858: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41859: LD_VAR 0 9
41863: PPUSH
41864: LD_INT 1
41866: PPUSH
41867: CALL_OW 275
41871: PUSH
41872: LD_VAR 0 14
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: GREATEREQUAL
41881: IFFALSE 41907
41883: PUSH
41884: LD_VAR 0 9
41888: PPUSH
41889: LD_INT 2
41891: PPUSH
41892: CALL_OW 275
41896: PUSH
41897: LD_VAR 0 14
41901: PUSH
41902: LD_INT 2
41904: ARRAY
41905: GREATEREQUAL
41906: AND
41907: IFFALSE 41933
41909: PUSH
41910: LD_VAR 0 9
41914: PPUSH
41915: LD_INT 3
41917: PPUSH
41918: CALL_OW 275
41922: PUSH
41923: LD_VAR 0 14
41927: PUSH
41928: LD_INT 3
41930: ARRAY
41931: GREATEREQUAL
41932: AND
41933: IFFALSE 41945
// result := weapon ;
41935: LD_ADDR_VAR 0 3
41939: PUSH
41940: LD_VAR 0 18
41944: ST_TO_ADDR
// end ; end ;
41945: LD_VAR 0 3
41949: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41950: LD_INT 0
41952: PPUSH
41953: PPUSH
// result := true ;
41954: LD_ADDR_VAR 0 3
41958: PUSH
41959: LD_INT 1
41961: ST_TO_ADDR
// if array1 = array2 then
41962: LD_VAR 0 1
41966: PUSH
41967: LD_VAR 0 2
41971: EQUAL
41972: IFFALSE 42032
// begin for i = 1 to array1 do
41974: LD_ADDR_VAR 0 4
41978: PUSH
41979: DOUBLE
41980: LD_INT 1
41982: DEC
41983: ST_TO_ADDR
41984: LD_VAR 0 1
41988: PUSH
41989: FOR_TO
41990: IFFALSE 42028
// if array1 [ i ] <> array2 [ i ] then
41992: LD_VAR 0 1
41996: PUSH
41997: LD_VAR 0 4
42001: ARRAY
42002: PUSH
42003: LD_VAR 0 2
42007: PUSH
42008: LD_VAR 0 4
42012: ARRAY
42013: NONEQUAL
42014: IFFALSE 42026
// begin result := false ;
42016: LD_ADDR_VAR 0 3
42020: PUSH
42021: LD_INT 0
42023: ST_TO_ADDR
// break ;
42024: GO 42028
// end ;
42026: GO 41989
42028: POP
42029: POP
// end else
42030: GO 42040
// result := false ;
42032: LD_ADDR_VAR 0 3
42036: PUSH
42037: LD_INT 0
42039: ST_TO_ADDR
// end ;
42040: LD_VAR 0 3
42044: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42045: LD_INT 0
42047: PPUSH
42048: PPUSH
// if not array1 or not array2 then
42049: LD_VAR 0 1
42053: NOT
42054: IFTRUE 42063
42056: PUSH
42057: LD_VAR 0 2
42061: NOT
42062: OR
42063: IFFALSE 42067
// exit ;
42065: GO 42131
// result := true ;
42067: LD_ADDR_VAR 0 3
42071: PUSH
42072: LD_INT 1
42074: ST_TO_ADDR
// for i = 1 to array1 do
42075: LD_ADDR_VAR 0 4
42079: PUSH
42080: DOUBLE
42081: LD_INT 1
42083: DEC
42084: ST_TO_ADDR
42085: LD_VAR 0 1
42089: PUSH
42090: FOR_TO
42091: IFFALSE 42129
// if array1 [ i ] <> array2 [ i ] then
42093: LD_VAR 0 1
42097: PUSH
42098: LD_VAR 0 4
42102: ARRAY
42103: PUSH
42104: LD_VAR 0 2
42108: PUSH
42109: LD_VAR 0 4
42113: ARRAY
42114: NONEQUAL
42115: IFFALSE 42127
// begin result := false ;
42117: LD_ADDR_VAR 0 3
42121: PUSH
42122: LD_INT 0
42124: ST_TO_ADDR
// break ;
42125: GO 42129
// end ;
42127: GO 42090
42129: POP
42130: POP
// end ;
42131: LD_VAR 0 3
42135: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42136: LD_INT 0
42138: PPUSH
42139: PPUSH
42140: PPUSH
// pom := GetBase ( fac ) ;
42141: LD_ADDR_VAR 0 5
42145: PUSH
42146: LD_VAR 0 1
42150: PPUSH
42151: CALL_OW 274
42155: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42156: LD_ADDR_VAR 0 4
42160: PUSH
42161: LD_VAR 0 2
42165: PUSH
42166: LD_INT 1
42168: ARRAY
42169: PPUSH
42170: LD_VAR 0 2
42174: PUSH
42175: LD_INT 2
42177: ARRAY
42178: PPUSH
42179: LD_VAR 0 2
42183: PUSH
42184: LD_INT 3
42186: ARRAY
42187: PPUSH
42188: LD_VAR 0 2
42192: PUSH
42193: LD_INT 4
42195: ARRAY
42196: PPUSH
42197: CALL_OW 449
42201: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42202: LD_ADDR_VAR 0 3
42206: PUSH
42207: LD_VAR 0 5
42211: PPUSH
42212: LD_INT 1
42214: PPUSH
42215: CALL_OW 275
42219: PUSH
42220: LD_VAR 0 4
42224: PUSH
42225: LD_INT 1
42227: ARRAY
42228: GREATEREQUAL
42229: IFFALSE 42255
42231: PUSH
42232: LD_VAR 0 5
42236: PPUSH
42237: LD_INT 2
42239: PPUSH
42240: CALL_OW 275
42244: PUSH
42245: LD_VAR 0 4
42249: PUSH
42250: LD_INT 2
42252: ARRAY
42253: GREATEREQUAL
42254: AND
42255: IFFALSE 42281
42257: PUSH
42258: LD_VAR 0 5
42262: PPUSH
42263: LD_INT 3
42265: PPUSH
42266: CALL_OW 275
42270: PUSH
42271: LD_VAR 0 4
42275: PUSH
42276: LD_INT 3
42278: ARRAY
42279: GREATEREQUAL
42280: AND
42281: ST_TO_ADDR
// end ;
42282: LD_VAR 0 3
42286: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42287: LD_INT 0
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
// pom := GetBase ( building ) ;
42293: LD_ADDR_VAR 0 3
42297: PUSH
42298: LD_VAR 0 1
42302: PPUSH
42303: CALL_OW 274
42307: ST_TO_ADDR
// if not pom then
42308: LD_VAR 0 3
42312: NOT
42313: IFFALSE 42317
// exit ;
42315: GO 42491
// btype := GetBType ( building ) ;
42317: LD_ADDR_VAR 0 5
42321: PUSH
42322: LD_VAR 0 1
42326: PPUSH
42327: CALL_OW 266
42331: ST_TO_ADDR
// if btype = b_armoury then
42332: LD_VAR 0 5
42336: PUSH
42337: LD_INT 4
42339: EQUAL
42340: IFFALSE 42350
// btype := b_barracks ;
42342: LD_ADDR_VAR 0 5
42346: PUSH
42347: LD_INT 5
42349: ST_TO_ADDR
// if btype = b_depot then
42350: LD_VAR 0 5
42354: PUSH
42355: LD_INT 0
42357: EQUAL
42358: IFFALSE 42368
// btype := b_warehouse ;
42360: LD_ADDR_VAR 0 5
42364: PUSH
42365: LD_INT 1
42367: ST_TO_ADDR
// if btype = b_workshop then
42368: LD_VAR 0 5
42372: PUSH
42373: LD_INT 2
42375: EQUAL
42376: IFFALSE 42386
// btype := b_factory ;
42378: LD_ADDR_VAR 0 5
42382: PUSH
42383: LD_INT 3
42385: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42386: LD_ADDR_VAR 0 4
42390: PUSH
42391: LD_VAR 0 5
42395: PPUSH
42396: LD_VAR 0 1
42400: PPUSH
42401: CALL_OW 248
42405: PPUSH
42406: CALL_OW 450
42410: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42411: LD_ADDR_VAR 0 2
42415: PUSH
42416: LD_VAR 0 3
42420: PPUSH
42421: LD_INT 1
42423: PPUSH
42424: CALL_OW 275
42428: PUSH
42429: LD_VAR 0 4
42433: PUSH
42434: LD_INT 1
42436: ARRAY
42437: GREATEREQUAL
42438: IFFALSE 42464
42440: PUSH
42441: LD_VAR 0 3
42445: PPUSH
42446: LD_INT 2
42448: PPUSH
42449: CALL_OW 275
42453: PUSH
42454: LD_VAR 0 4
42458: PUSH
42459: LD_INT 2
42461: ARRAY
42462: GREATEREQUAL
42463: AND
42464: IFFALSE 42490
42466: PUSH
42467: LD_VAR 0 3
42471: PPUSH
42472: LD_INT 3
42474: PPUSH
42475: CALL_OW 275
42479: PUSH
42480: LD_VAR 0 4
42484: PUSH
42485: LD_INT 3
42487: ARRAY
42488: GREATEREQUAL
42489: AND
42490: ST_TO_ADDR
// end ;
42491: LD_VAR 0 2
42495: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42496: LD_INT 0
42498: PPUSH
42499: PPUSH
42500: PPUSH
// pom := GetBase ( building ) ;
42501: LD_ADDR_VAR 0 4
42505: PUSH
42506: LD_VAR 0 1
42510: PPUSH
42511: CALL_OW 274
42515: ST_TO_ADDR
// if not pom then
42516: LD_VAR 0 4
42520: NOT
42521: IFFALSE 42525
// exit ;
42523: GO 42630
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42525: LD_ADDR_VAR 0 5
42529: PUSH
42530: LD_VAR 0 2
42534: PPUSH
42535: LD_VAR 0 1
42539: PPUSH
42540: CALL_OW 248
42544: PPUSH
42545: CALL_OW 450
42549: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42550: LD_ADDR_VAR 0 3
42554: PUSH
42555: LD_VAR 0 4
42559: PPUSH
42560: LD_INT 1
42562: PPUSH
42563: CALL_OW 275
42567: PUSH
42568: LD_VAR 0 5
42572: PUSH
42573: LD_INT 1
42575: ARRAY
42576: GREATEREQUAL
42577: IFFALSE 42603
42579: PUSH
42580: LD_VAR 0 4
42584: PPUSH
42585: LD_INT 2
42587: PPUSH
42588: CALL_OW 275
42592: PUSH
42593: LD_VAR 0 5
42597: PUSH
42598: LD_INT 2
42600: ARRAY
42601: GREATEREQUAL
42602: AND
42603: IFFALSE 42629
42605: PUSH
42606: LD_VAR 0 4
42610: PPUSH
42611: LD_INT 3
42613: PPUSH
42614: CALL_OW 275
42618: PUSH
42619: LD_VAR 0 5
42623: PUSH
42624: LD_INT 3
42626: ARRAY
42627: GREATEREQUAL
42628: AND
42629: ST_TO_ADDR
// end ;
42630: LD_VAR 0 3
42634: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42635: LD_INT 0
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
// result := false ;
42648: LD_ADDR_VAR 0 8
42652: PUSH
42653: LD_INT 0
42655: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42656: LD_VAR 0 5
42660: NOT
42661: IFTRUE 42670
42663: PUSH
42664: LD_VAR 0 1
42668: NOT
42669: OR
42670: IFTRUE 42679
42672: PUSH
42673: LD_VAR 0 2
42677: NOT
42678: OR
42679: IFTRUE 42688
42681: PUSH
42682: LD_VAR 0 3
42686: NOT
42687: OR
42688: IFFALSE 42692
// exit ;
42690: GO 43518
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42692: LD_ADDR_VAR 0 14
42696: PUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: LD_VAR 0 2
42706: PPUSH
42707: LD_VAR 0 3
42711: PPUSH
42712: LD_VAR 0 4
42716: PPUSH
42717: LD_VAR 0 5
42721: PUSH
42722: LD_INT 1
42724: ARRAY
42725: PPUSH
42726: CALL_OW 248
42730: PPUSH
42731: LD_INT 0
42733: PPUSH
42734: CALL 44799 0 6
42738: ST_TO_ADDR
// if not hexes then
42739: LD_VAR 0 14
42743: NOT
42744: IFFALSE 42748
// exit ;
42746: GO 43518
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42748: LD_ADDR_VAR 0 17
42752: PUSH
42753: LD_VAR 0 5
42757: PPUSH
42758: LD_INT 22
42760: PUSH
42761: LD_VAR 0 13
42765: PPUSH
42766: CALL_OW 255
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 30
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 30
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PPUSH
42807: CALL_OW 72
42811: ST_TO_ADDR
// for i = 1 to hexes do
42812: LD_ADDR_VAR 0 9
42816: PUSH
42817: DOUBLE
42818: LD_INT 1
42820: DEC
42821: ST_TO_ADDR
42822: LD_VAR 0 14
42826: PUSH
42827: FOR_TO
42828: IFFALSE 43516
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42830: LD_ADDR_VAR 0 13
42834: PUSH
42835: LD_VAR 0 14
42839: PUSH
42840: LD_VAR 0 9
42844: ARRAY
42845: PUSH
42846: LD_INT 1
42848: ARRAY
42849: PPUSH
42850: LD_VAR 0 14
42854: PUSH
42855: LD_VAR 0 9
42859: ARRAY
42860: PUSH
42861: LD_INT 2
42863: ARRAY
42864: PPUSH
42865: CALL_OW 428
42869: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42870: LD_VAR 0 14
42874: PUSH
42875: LD_VAR 0 9
42879: ARRAY
42880: PUSH
42881: LD_INT 1
42883: ARRAY
42884: PPUSH
42885: LD_VAR 0 14
42889: PUSH
42890: LD_VAR 0 9
42894: ARRAY
42895: PUSH
42896: LD_INT 2
42898: ARRAY
42899: PPUSH
42900: CALL_OW 351
42904: IFTRUE 42943
42906: PUSH
42907: LD_VAR 0 14
42911: PUSH
42912: LD_VAR 0 9
42916: ARRAY
42917: PUSH
42918: LD_INT 1
42920: ARRAY
42921: PPUSH
42922: LD_VAR 0 14
42926: PUSH
42927: LD_VAR 0 9
42931: ARRAY
42932: PUSH
42933: LD_INT 2
42935: ARRAY
42936: PPUSH
42937: CALL_OW 488
42941: NOT
42942: OR
42943: IFTRUE 42960
42945: PUSH
42946: LD_VAR 0 13
42950: PPUSH
42951: CALL_OW 247
42955: PUSH
42956: LD_INT 3
42958: EQUAL
42959: OR
42960: IFFALSE 42966
// exit ;
42962: POP
42963: POP
42964: GO 43518
// if not tmp then
42966: LD_VAR 0 13
42970: NOT
42971: IFFALSE 42975
// continue ;
42973: GO 42827
// result := true ;
42975: LD_ADDR_VAR 0 8
42979: PUSH
42980: LD_INT 1
42982: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42983: LD_VAR 0 6
42987: IFFALSE 43004
42989: PUSH
42990: LD_VAR 0 13
42994: PPUSH
42995: CALL_OW 247
42999: PUSH
43000: LD_INT 2
43002: EQUAL
43003: AND
43004: IFFALSE 43021
43006: PUSH
43007: LD_VAR 0 13
43011: PPUSH
43012: CALL_OW 263
43016: PUSH
43017: LD_INT 1
43019: EQUAL
43020: AND
43021: IFFALSE 43185
// begin if IsDrivenBy ( tmp ) then
43023: LD_VAR 0 13
43027: PPUSH
43028: CALL_OW 311
43032: IFFALSE 43036
// continue ;
43034: GO 42827
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43036: LD_VAR 0 6
43040: PPUSH
43041: LD_INT 3
43043: PUSH
43044: LD_INT 60
43046: PUSH
43047: EMPTY
43048: LIST
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: LD_INT 55
43059: PUSH
43060: EMPTY
43061: LIST
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PPUSH
43071: CALL_OW 72
43075: IFFALSE 43183
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43077: LD_ADDR_VAR 0 18
43081: PUSH
43082: LD_VAR 0 6
43086: PPUSH
43087: LD_INT 3
43089: PUSH
43090: LD_INT 60
43092: PUSH
43093: EMPTY
43094: LIST
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: LD_INT 55
43105: PUSH
43106: EMPTY
43107: LIST
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PPUSH
43117: CALL_OW 72
43121: PUSH
43122: LD_INT 1
43124: ARRAY
43125: ST_TO_ADDR
// if IsInUnit ( driver ) then
43126: LD_VAR 0 18
43130: PPUSH
43131: CALL_OW 310
43135: IFFALSE 43146
// ComExit ( driver ) ;
43137: LD_VAR 0 18
43141: PPUSH
43142: CALL 68799 0 1
// AddComEnterUnit ( driver , tmp ) ;
43146: LD_VAR 0 18
43150: PPUSH
43151: LD_VAR 0 13
43155: PPUSH
43156: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43160: LD_VAR 0 18
43164: PPUSH
43165: LD_VAR 0 7
43169: PPUSH
43170: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43174: LD_VAR 0 18
43178: PPUSH
43179: CALL_OW 181
// end ; continue ;
43183: GO 42827
// end ; if not cleaners or not tmp in cleaners then
43185: LD_VAR 0 6
43189: NOT
43190: IFTRUE 43205
43192: PUSH
43193: LD_VAR 0 13
43197: PUSH
43198: LD_VAR 0 6
43202: IN
43203: NOT
43204: OR
43205: IFFALSE 43514
// begin if dep then
43207: LD_VAR 0 17
43211: IFFALSE 43347
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43213: LD_ADDR_VAR 0 16
43217: PUSH
43218: LD_VAR 0 17
43222: PUSH
43223: LD_INT 1
43225: ARRAY
43226: PPUSH
43227: CALL_OW 250
43231: PPUSH
43232: LD_VAR 0 17
43236: PUSH
43237: LD_INT 1
43239: ARRAY
43240: PPUSH
43241: CALL_OW 254
43245: PPUSH
43246: LD_INT 5
43248: PPUSH
43249: CALL_OW 272
43253: PUSH
43254: LD_VAR 0 17
43258: PUSH
43259: LD_INT 1
43261: ARRAY
43262: PPUSH
43263: CALL_OW 251
43267: PPUSH
43268: LD_VAR 0 17
43272: PUSH
43273: LD_INT 1
43275: ARRAY
43276: PPUSH
43277: CALL_OW 254
43281: PPUSH
43282: LD_INT 5
43284: PPUSH
43285: CALL_OW 273
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43294: LD_VAR 0 16
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PPUSH
43303: LD_VAR 0 16
43307: PUSH
43308: LD_INT 2
43310: ARRAY
43311: PPUSH
43312: CALL_OW 488
43316: IFFALSE 43347
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43318: LD_VAR 0 13
43322: PPUSH
43323: LD_VAR 0 16
43327: PUSH
43328: LD_INT 1
43330: ARRAY
43331: PPUSH
43332: LD_VAR 0 16
43336: PUSH
43337: LD_INT 2
43339: ARRAY
43340: PPUSH
43341: CALL_OW 111
// continue ;
43345: GO 42827
// end ; end ; r := GetDir ( tmp ) ;
43347: LD_ADDR_VAR 0 15
43351: PUSH
43352: LD_VAR 0 13
43356: PPUSH
43357: CALL_OW 254
43361: ST_TO_ADDR
// if r = 5 then
43362: LD_VAR 0 15
43366: PUSH
43367: LD_INT 5
43369: EQUAL
43370: IFFALSE 43380
// r := 0 ;
43372: LD_ADDR_VAR 0 15
43376: PUSH
43377: LD_INT 0
43379: ST_TO_ADDR
// for j = r to 5 do
43380: LD_ADDR_VAR 0 10
43384: PUSH
43385: DOUBLE
43386: LD_VAR 0 15
43390: DEC
43391: ST_TO_ADDR
43392: LD_INT 5
43394: PUSH
43395: FOR_TO
43396: IFFALSE 43512
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43398: LD_ADDR_VAR 0 11
43402: PUSH
43403: LD_VAR 0 13
43407: PPUSH
43408: CALL_OW 250
43412: PPUSH
43413: LD_VAR 0 10
43417: PPUSH
43418: LD_INT 2
43420: PPUSH
43421: CALL_OW 272
43425: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43426: LD_ADDR_VAR 0 12
43430: PUSH
43431: LD_VAR 0 13
43435: PPUSH
43436: CALL_OW 251
43440: PPUSH
43441: LD_VAR 0 10
43445: PPUSH
43446: LD_INT 2
43448: PPUSH
43449: CALL_OW 273
43453: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43454: LD_VAR 0 11
43458: PPUSH
43459: LD_VAR 0 12
43463: PPUSH
43464: CALL_OW 488
43468: IFFALSE 43487
43470: PUSH
43471: LD_VAR 0 11
43475: PPUSH
43476: LD_VAR 0 12
43480: PPUSH
43481: CALL_OW 428
43485: NOT
43486: AND
43487: IFFALSE 43510
// begin ComMoveXY ( tmp , _x , _y ) ;
43489: LD_VAR 0 13
43493: PPUSH
43494: LD_VAR 0 11
43498: PPUSH
43499: LD_VAR 0 12
43503: PPUSH
43504: CALL_OW 111
// break ;
43508: GO 43512
// end ; end ;
43510: GO 43395
43512: POP
43513: POP
// end ; end ;
43514: GO 42827
43516: POP
43517: POP
// end ;
43518: LD_VAR 0 8
43522: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43523: LD_INT 0
43525: PPUSH
// result := true ;
43526: LD_ADDR_VAR 0 3
43530: PUSH
43531: LD_INT 1
43533: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43534: LD_VAR 0 2
43538: PUSH
43539: LD_INT 24
43541: DOUBLE
43542: EQUAL
43543: IFTRUE 43553
43545: LD_INT 33
43547: DOUBLE
43548: EQUAL
43549: IFTRUE 43553
43551: GO 43578
43553: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: LD_INT 32
43561: PPUSH
43562: LD_VAR 0 1
43566: PPUSH
43567: CALL_OW 321
43571: PUSH
43572: LD_INT 2
43574: EQUAL
43575: ST_TO_ADDR
43576: GO 43894
43578: LD_INT 20
43580: DOUBLE
43581: EQUAL
43582: IFTRUE 43586
43584: GO 43611
43586: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43587: LD_ADDR_VAR 0 3
43591: PUSH
43592: LD_INT 6
43594: PPUSH
43595: LD_VAR 0 1
43599: PPUSH
43600: CALL_OW 321
43604: PUSH
43605: LD_INT 2
43607: EQUAL
43608: ST_TO_ADDR
43609: GO 43894
43611: LD_INT 22
43613: DOUBLE
43614: EQUAL
43615: IFTRUE 43625
43617: LD_INT 36
43619: DOUBLE
43620: EQUAL
43621: IFTRUE 43625
43623: GO 43650
43625: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43626: LD_ADDR_VAR 0 3
43630: PUSH
43631: LD_INT 15
43633: PPUSH
43634: LD_VAR 0 1
43638: PPUSH
43639: CALL_OW 321
43643: PUSH
43644: LD_INT 2
43646: EQUAL
43647: ST_TO_ADDR
43648: GO 43894
43650: LD_INT 30
43652: DOUBLE
43653: EQUAL
43654: IFTRUE 43658
43656: GO 43683
43658: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43659: LD_ADDR_VAR 0 3
43663: PUSH
43664: LD_INT 20
43666: PPUSH
43667: LD_VAR 0 1
43671: PPUSH
43672: CALL_OW 321
43676: PUSH
43677: LD_INT 2
43679: EQUAL
43680: ST_TO_ADDR
43681: GO 43894
43683: LD_INT 28
43685: DOUBLE
43686: EQUAL
43687: IFTRUE 43697
43689: LD_INT 21
43691: DOUBLE
43692: EQUAL
43693: IFTRUE 43697
43695: GO 43722
43697: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43698: LD_ADDR_VAR 0 3
43702: PUSH
43703: LD_INT 21
43705: PPUSH
43706: LD_VAR 0 1
43710: PPUSH
43711: CALL_OW 321
43715: PUSH
43716: LD_INT 2
43718: EQUAL
43719: ST_TO_ADDR
43720: GO 43894
43722: LD_INT 16
43724: DOUBLE
43725: EQUAL
43726: IFTRUE 43730
43728: GO 43755
43730: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43731: LD_ADDR_VAR 0 3
43735: PUSH
43736: LD_INT 84
43738: PPUSH
43739: LD_VAR 0 1
43743: PPUSH
43744: CALL_OW 321
43748: PUSH
43749: LD_INT 2
43751: EQUAL
43752: ST_TO_ADDR
43753: GO 43894
43755: LD_INT 19
43757: DOUBLE
43758: EQUAL
43759: IFTRUE 43769
43761: LD_INT 23
43763: DOUBLE
43764: EQUAL
43765: IFTRUE 43769
43767: GO 43794
43769: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_INT 83
43777: PPUSH
43778: LD_VAR 0 1
43782: PPUSH
43783: CALL_OW 321
43787: PUSH
43788: LD_INT 2
43790: EQUAL
43791: ST_TO_ADDR
43792: GO 43894
43794: LD_INT 17
43796: DOUBLE
43797: EQUAL
43798: IFTRUE 43802
43800: GO 43827
43802: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43803: LD_ADDR_VAR 0 3
43807: PUSH
43808: LD_INT 39
43810: PPUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 321
43820: PUSH
43821: LD_INT 2
43823: EQUAL
43824: ST_TO_ADDR
43825: GO 43894
43827: LD_INT 18
43829: DOUBLE
43830: EQUAL
43831: IFTRUE 43835
43833: GO 43860
43835: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43836: LD_ADDR_VAR 0 3
43840: PUSH
43841: LD_INT 40
43843: PPUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL_OW 321
43853: PUSH
43854: LD_INT 2
43856: EQUAL
43857: ST_TO_ADDR
43858: GO 43894
43860: LD_INT 27
43862: DOUBLE
43863: EQUAL
43864: IFTRUE 43868
43866: GO 43893
43868: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_INT 35
43876: PPUSH
43877: LD_VAR 0 1
43881: PPUSH
43882: CALL_OW 321
43886: PUSH
43887: LD_INT 2
43889: EQUAL
43890: ST_TO_ADDR
43891: GO 43894
43893: POP
// end ;
43894: LD_VAR 0 3
43898: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43899: LD_INT 0
43901: PPUSH
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
// result := false ;
43912: LD_ADDR_VAR 0 6
43916: PUSH
43917: LD_INT 0
43919: ST_TO_ADDR
// if btype = b_depot then
43920: LD_VAR 0 2
43924: PUSH
43925: LD_INT 0
43927: EQUAL
43928: IFFALSE 43940
// begin result := true ;
43930: LD_ADDR_VAR 0 6
43934: PUSH
43935: LD_INT 1
43937: ST_TO_ADDR
// exit ;
43938: GO 44794
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43940: LD_VAR 0 1
43944: NOT
43945: IFTRUE 43970
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: CALL_OW 266
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: IN
43968: NOT
43969: OR
43970: IFTRUE 43979
43972: PUSH
43973: LD_VAR 0 2
43977: NOT
43978: OR
43979: IFTRUE 44015
43981: PUSH
43982: LD_VAR 0 5
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 3
43998: PUSH
43999: LD_INT 4
44001: PUSH
44002: LD_INT 5
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: IN
44013: NOT
44014: OR
44015: IFTRUE 44034
44017: PUSH
44018: LD_VAR 0 3
44022: PPUSH
44023: LD_VAR 0 4
44027: PPUSH
44028: CALL_OW 488
44032: NOT
44033: OR
44034: IFFALSE 44038
// exit ;
44036: GO 44794
// side := GetSide ( depot ) ;
44038: LD_ADDR_VAR 0 9
44042: PUSH
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 255
44052: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44053: LD_VAR 0 9
44057: PPUSH
44058: LD_VAR 0 2
44062: PPUSH
44063: CALL 43523 0 2
44067: NOT
44068: IFFALSE 44072
// exit ;
44070: GO 44794
// pom := GetBase ( depot ) ;
44072: LD_ADDR_VAR 0 10
44076: PUSH
44077: LD_VAR 0 1
44081: PPUSH
44082: CALL_OW 274
44086: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44087: LD_ADDR_VAR 0 11
44091: PUSH
44092: LD_VAR 0 2
44096: PPUSH
44097: LD_VAR 0 1
44101: PPUSH
44102: CALL_OW 248
44106: PPUSH
44107: CALL_OW 450
44111: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44112: LD_VAR 0 10
44116: PPUSH
44117: LD_INT 1
44119: PPUSH
44120: CALL_OW 275
44124: PUSH
44125: LD_VAR 0 11
44129: PUSH
44130: LD_INT 1
44132: ARRAY
44133: GREATEREQUAL
44134: IFFALSE 44160
44136: PUSH
44137: LD_VAR 0 10
44141: PPUSH
44142: LD_INT 2
44144: PPUSH
44145: CALL_OW 275
44149: PUSH
44150: LD_VAR 0 11
44154: PUSH
44155: LD_INT 2
44157: ARRAY
44158: GREATEREQUAL
44159: AND
44160: IFFALSE 44186
44162: PUSH
44163: LD_VAR 0 10
44167: PPUSH
44168: LD_INT 3
44170: PPUSH
44171: CALL_OW 275
44175: PUSH
44176: LD_VAR 0 11
44180: PUSH
44181: LD_INT 3
44183: ARRAY
44184: GREATEREQUAL
44185: AND
44186: NOT
44187: IFFALSE 44191
// exit ;
44189: GO 44794
// if GetBType ( depot ) = b_depot then
44191: LD_VAR 0 1
44195: PPUSH
44196: CALL_OW 266
44200: PUSH
44201: LD_INT 0
44203: EQUAL
44204: IFFALSE 44216
// dist := 28 else
44206: LD_ADDR_VAR 0 14
44210: PUSH
44211: LD_INT 28
44213: ST_TO_ADDR
44214: GO 44224
// dist := 36 ;
44216: LD_ADDR_VAR 0 14
44220: PUSH
44221: LD_INT 36
44223: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44224: LD_VAR 0 1
44228: PPUSH
44229: LD_VAR 0 3
44233: PPUSH
44234: LD_VAR 0 4
44238: PPUSH
44239: CALL_OW 297
44243: PUSH
44244: LD_VAR 0 14
44248: GREATER
44249: IFFALSE 44253
// exit ;
44251: GO 44794
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44253: LD_ADDR_VAR 0 12
44257: PUSH
44258: LD_VAR 0 2
44262: PPUSH
44263: LD_VAR 0 3
44267: PPUSH
44268: LD_VAR 0 4
44272: PPUSH
44273: LD_VAR 0 5
44277: PPUSH
44278: LD_VAR 0 1
44282: PPUSH
44283: CALL_OW 248
44287: PPUSH
44288: LD_INT 0
44290: PPUSH
44291: CALL 44799 0 6
44295: ST_TO_ADDR
// if not hexes then
44296: LD_VAR 0 12
44300: NOT
44301: IFFALSE 44305
// exit ;
44303: GO 44794
// hex := GetHexInfo ( x , y ) ;
44305: LD_ADDR_VAR 0 15
44309: PUSH
44310: LD_VAR 0 3
44314: PPUSH
44315: LD_VAR 0 4
44319: PPUSH
44320: CALL_OW 546
44324: ST_TO_ADDR
// if hex [ 1 ] then
44325: LD_VAR 0 15
44329: PUSH
44330: LD_INT 1
44332: ARRAY
44333: IFFALSE 44337
// exit ;
44335: GO 44794
// height := hex [ 2 ] ;
44337: LD_ADDR_VAR 0 13
44341: PUSH
44342: LD_VAR 0 15
44346: PUSH
44347: LD_INT 2
44349: ARRAY
44350: ST_TO_ADDR
// for i = 1 to hexes do
44351: LD_ADDR_VAR 0 7
44355: PUSH
44356: DOUBLE
44357: LD_INT 1
44359: DEC
44360: ST_TO_ADDR
44361: LD_VAR 0 12
44365: PUSH
44366: FOR_TO
44367: IFFALSE 44711
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44369: LD_VAR 0 12
44373: PUSH
44374: LD_VAR 0 7
44378: ARRAY
44379: PUSH
44380: LD_INT 1
44382: ARRAY
44383: PPUSH
44384: LD_VAR 0 12
44388: PUSH
44389: LD_VAR 0 7
44393: ARRAY
44394: PUSH
44395: LD_INT 2
44397: ARRAY
44398: PPUSH
44399: CALL_OW 488
44403: NOT
44404: IFTRUE 44446
44406: PUSH
44407: LD_VAR 0 12
44411: PUSH
44412: LD_VAR 0 7
44416: ARRAY
44417: PUSH
44418: LD_INT 1
44420: ARRAY
44421: PPUSH
44422: LD_VAR 0 12
44426: PUSH
44427: LD_VAR 0 7
44431: ARRAY
44432: PUSH
44433: LD_INT 2
44435: ARRAY
44436: PPUSH
44437: CALL_OW 428
44441: PUSH
44442: LD_INT 0
44444: GREATER
44445: OR
44446: IFTRUE 44484
44448: PUSH
44449: LD_VAR 0 12
44453: PUSH
44454: LD_VAR 0 7
44458: ARRAY
44459: PUSH
44460: LD_INT 1
44462: ARRAY
44463: PPUSH
44464: LD_VAR 0 12
44468: PUSH
44469: LD_VAR 0 7
44473: ARRAY
44474: PUSH
44475: LD_INT 2
44477: ARRAY
44478: PPUSH
44479: CALL_OW 351
44483: OR
44484: IFFALSE 44490
// exit ;
44486: POP
44487: POP
44488: GO 44794
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44490: LD_ADDR_VAR 0 8
44494: PUSH
44495: LD_VAR 0 12
44499: PUSH
44500: LD_VAR 0 7
44504: ARRAY
44505: PUSH
44506: LD_INT 1
44508: ARRAY
44509: PPUSH
44510: LD_VAR 0 12
44514: PUSH
44515: LD_VAR 0 7
44519: ARRAY
44520: PUSH
44521: LD_INT 2
44523: ARRAY
44524: PPUSH
44525: CALL_OW 546
44529: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44530: LD_VAR 0 8
44534: PUSH
44535: LD_INT 1
44537: ARRAY
44538: IFTRUE 44560
44540: PUSH
44541: LD_VAR 0 8
44545: PUSH
44546: LD_INT 2
44548: ARRAY
44549: PUSH
44550: LD_VAR 0 13
44554: PUSH
44555: LD_INT 2
44557: PLUS
44558: GREATER
44559: OR
44560: IFTRUE 44582
44562: PUSH
44563: LD_VAR 0 8
44567: PUSH
44568: LD_INT 2
44570: ARRAY
44571: PUSH
44572: LD_VAR 0 13
44576: PUSH
44577: LD_INT 2
44579: MINUS
44580: LESS
44581: OR
44582: IFTRUE 44650
44584: PUSH
44585: LD_VAR 0 8
44589: PUSH
44590: LD_INT 3
44592: ARRAY
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 8
44599: PUSH
44600: LD_INT 9
44602: PUSH
44603: LD_INT 10
44605: PUSH
44606: LD_INT 11
44608: PUSH
44609: LD_INT 12
44611: PUSH
44612: LD_INT 13
44614: PUSH
44615: LD_INT 16
44617: PUSH
44618: LD_INT 17
44620: PUSH
44621: LD_INT 18
44623: PUSH
44624: LD_INT 19
44626: PUSH
44627: LD_INT 20
44629: PUSH
44630: LD_INT 21
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: IN
44648: NOT
44649: OR
44650: IFTRUE 44663
44652: PUSH
44653: LD_VAR 0 8
44657: PUSH
44658: LD_INT 5
44660: ARRAY
44661: NOT
44662: OR
44663: IFTRUE 44703
44665: PUSH
44666: LD_VAR 0 8
44670: PUSH
44671: LD_INT 6
44673: ARRAY
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 7
44683: PUSH
44684: LD_INT 9
44686: PUSH
44687: LD_INT 10
44689: PUSH
44690: LD_INT 11
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: IN
44701: NOT
44702: OR
44703: IFFALSE 44709
// exit ;
44705: POP
44706: POP
44707: GO 44794
// end ;
44709: GO 44366
44711: POP
44712: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44713: LD_VAR 0 9
44717: PPUSH
44718: LD_VAR 0 3
44722: PPUSH
44723: LD_VAR 0 4
44727: PPUSH
44728: LD_INT 20
44730: PPUSH
44731: CALL 36613 0 4
44735: PUSH
44736: LD_INT 4
44738: ARRAY
44739: IFFALSE 44743
// exit ;
44741: GO 44794
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44743: LD_VAR 0 2
44747: PUSH
44748: LD_INT 29
44750: PUSH
44751: LD_INT 30
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: IN
44758: IFFALSE 44782
44760: PUSH
44761: LD_VAR 0 3
44765: PPUSH
44766: LD_VAR 0 4
44770: PPUSH
44771: LD_VAR 0 9
44775: PPUSH
44776: CALL_OW 440
44780: NOT
44781: AND
44782: IFFALSE 44786
// exit ;
44784: GO 44794
// result := true ;
44786: LD_ADDR_VAR 0 6
44790: PUSH
44791: LD_INT 1
44793: ST_TO_ADDR
// end ;
44794: LD_VAR 0 6
44798: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44799: LD_INT 0
44801: PPUSH
44802: PPUSH
44803: PPUSH
44804: PPUSH
44805: PPUSH
44806: PPUSH
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
44829: PPUSH
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
44846: PPUSH
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
44853: PPUSH
44854: PPUSH
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
// result = [ ] ;
44859: LD_ADDR_VAR 0 7
44863: PUSH
44864: EMPTY
44865: ST_TO_ADDR
// temp_list = [ ] ;
44866: LD_ADDR_VAR 0 9
44870: PUSH
44871: EMPTY
44872: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44873: LD_VAR 0 4
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: LD_INT 4
44892: PUSH
44893: LD_INT 5
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: IN
44904: NOT
44905: IFTRUE 44948
44907: PUSH
44908: LD_VAR 0 1
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: IN
44923: IFFALSE 44947
44925: PUSH
44926: LD_VAR 0 5
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: IN
44945: NOT
44946: AND
44947: OR
44948: IFFALSE 44952
// exit ;
44950: GO 63351
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44952: LD_VAR 0 1
44956: PUSH
44957: LD_INT 6
44959: PUSH
44960: LD_INT 7
44962: PUSH
44963: LD_INT 8
44965: PUSH
44966: LD_INT 13
44968: PUSH
44969: LD_INT 12
44971: PUSH
44972: LD_INT 15
44974: PUSH
44975: LD_INT 11
44977: PUSH
44978: LD_INT 14
44980: PUSH
44981: LD_INT 10
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: IN
44995: IFFALSE 45005
// btype = b_lab ;
44997: LD_ADDR_VAR 0 1
45001: PUSH
45002: LD_INT 6
45004: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45005: LD_VAR 0 6
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: IN
45024: NOT
45025: IFTRUE 45093
45027: PUSH
45028: LD_VAR 0 1
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: LD_INT 6
45047: PUSH
45048: LD_INT 36
45050: PUSH
45051: LD_INT 4
45053: PUSH
45054: LD_INT 5
45056: PUSH
45057: LD_INT 31
45059: PUSH
45060: LD_INT 32
45062: PUSH
45063: LD_INT 33
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: IN
45079: NOT
45080: IFFALSE 45092
45082: PUSH
45083: LD_VAR 0 6
45087: PUSH
45088: LD_INT 1
45090: EQUAL
45091: AND
45092: OR
45093: IFTRUE 45125
45095: PUSH
45096: LD_VAR 0 1
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: IN
45111: NOT
45112: IFFALSE 45124
45114: PUSH
45115: LD_VAR 0 6
45119: PUSH
45120: LD_INT 2
45122: EQUAL
45123: AND
45124: OR
45125: IFFALSE 45135
// mode = 0 ;
45127: LD_ADDR_VAR 0 6
45131: PUSH
45132: LD_INT 0
45134: ST_TO_ADDR
// case mode of 0 :
45135: LD_VAR 0 6
45139: PUSH
45140: LD_INT 0
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 56601
45148: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45149: LD_ADDR_VAR 0 11
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45342: LD_ADDR_VAR 0 12
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: NEG
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45538: LD_ADDR_VAR 0 13
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 3
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 3
45697: NEG
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45737: LD_ADDR_VAR 0 14
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 3
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45933: LD_ADDR_VAR 0 15
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46126: LD_ADDR_VAR 0 16
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46319: LD_ADDR_VAR 0 17
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46549: LD_ADDR_VAR 0 18
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46779: LD_ADDR_VAR 0 19
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47009: LD_ADDR_VAR 0 20
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47239: LD_ADDR_VAR 0 21
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47469: LD_ADDR_VAR 0 22
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47699: LD_ADDR_VAR 0 23
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 3
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 3
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47979: LD_ADDR_VAR 0 24
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48255: LD_ADDR_VAR 0 25
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 3
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48529: LD_ADDR_VAR 0 26
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48805: LD_ADDR_VAR 0 27
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49085: LD_ADDR_VAR 0 28
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 3
49332: NEG
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49367: LD_ADDR_VAR 0 29
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49646: LD_ADDR_VAR 0 30
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 2
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 3
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 3
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 3
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49924: LD_ADDR_VAR 0 31
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50202: LD_ADDR_VAR 0 32
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 3
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 3
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50480: LD_ADDR_VAR 0 33
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 3
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50759: LD_ADDR_VAR 0 34
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 3
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51039: LD_ADDR_VAR 0 35
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51151: LD_ADDR_VAR 0 36
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51263: LD_ADDR_VAR 0 37
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51375: LD_ADDR_VAR 0 38
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51487: LD_ADDR_VAR 0 39
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51599: LD_ADDR_VAR 0 40
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51711: LD_ADDR_VAR 0 41
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52061: LD_ADDR_VAR 0 42
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 3
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: LD_INT 3
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 3
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52411: LD_ADDR_VAR 0 43
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 3
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: NEG
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52759: LD_ADDR_VAR 0 44
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: LD_INT 3
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: PUSH
53003: LD_INT 3
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 3
53033: NEG
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 3
53056: NEG
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53109: LD_ADDR_VAR 0 45
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 3
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: LD_INT 3
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53459: LD_ADDR_VAR 0 46
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 3
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53807: LD_ADDR_VAR 0 47
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53958: LD_ADDR_VAR 0 48
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54105: LD_ADDR_VAR 0 49
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54249: LD_ADDR_VAR 0 50
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54393: LD_ADDR_VAR 0 51
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54540: LD_ADDR_VAR 0 52
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54691: LD_ADDR_VAR 0 53
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54921: LD_ADDR_VAR 0 54
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55151: LD_ADDR_VAR 0 55
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55381: LD_ADDR_VAR 0 56
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55611: LD_ADDR_VAR 0 57
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55841: LD_ADDR_VAR 0 58
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56071: LD_ADDR_VAR 0 59
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56159: LD_ADDR_VAR 0 60
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56247: LD_ADDR_VAR 0 61
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56335: LD_ADDR_VAR 0 62
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56423: LD_ADDR_VAR 0 63
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56511: LD_ADDR_VAR 0 64
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// end ; 1 :
56599: GO 62496
56601: LD_INT 1
56603: DOUBLE
56604: EQUAL
56605: IFTRUE 56609
56607: GO 59232
56609: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56610: LD_ADDR_VAR 0 11
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 3
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56654: LD_ADDR_VAR 0 12
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56695: LD_ADDR_VAR 0 13
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56735: LD_ADDR_VAR 0 14
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56776: LD_ADDR_VAR 0 15
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56820: LD_ADDR_VAR 0 16
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 3
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 3
56851: NEG
56852: PUSH
56853: LD_INT 3
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56866: LD_ADDR_VAR 0 17
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 3
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56910: LD_ADDR_VAR 0 18
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56951: LD_ADDR_VAR 0 19
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56991: LD_ADDR_VAR 0 20
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57032: LD_ADDR_VAR 0 21
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57076: LD_ADDR_VAR 0 22
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57122: LD_ADDR_VAR 0 23
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 4
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57166: LD_ADDR_VAR 0 24
57170: PUSH
57171: LD_INT 3
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 4
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57207: LD_ADDR_VAR 0 25
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 4
57224: PUSH
57225: LD_INT 3
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: LD_INT 4
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57247: LD_ADDR_VAR 0 26
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 3
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 4
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 3
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57288: LD_ADDR_VAR 0 27
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 4
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57332: LD_ADDR_VAR 0 28
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: LD_INT 4
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 4
57363: NEG
57364: PUSH
57365: LD_INT 3
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57378: LD_ADDR_VAR 0 29
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 4
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 4
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 5
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 5
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 4
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 6
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 6
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 5
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57533: LD_ADDR_VAR 0 30
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 3
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 4
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 4
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 5
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 5
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 6
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 6
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57676: LD_ADDR_VAR 0 31
57680: PUSH
57681: LD_INT 3
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 4
57713: PUSH
57714: LD_INT 3
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 4
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 5
57743: PUSH
57744: LD_INT 4
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 5
57753: PUSH
57754: LD_INT 5
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 4
57763: PUSH
57764: LD_INT 5
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 6
57773: PUSH
57774: LD_INT 5
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 6
57783: PUSH
57784: LD_INT 6
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 5
57793: PUSH
57794: LD_INT 6
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57815: LD_ADDR_VAR 0 32
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: LD_INT 4
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 3
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 5
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 5
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 6
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 6
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57958: LD_ADDR_VAR 0 33
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 4
58010: NEG
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 4
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 4
58033: NEG
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 5
58044: NEG
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 5
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 5
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 6
58078: NEG
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 6
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58113: LD_ADDR_VAR 0 34
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: NEG
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 4
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 4
58168: NEG
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 4
58180: NEG
58181: PUSH
58182: LD_INT 4
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 4
58192: NEG
58193: PUSH
58194: LD_INT 5
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 5
58204: NEG
58205: PUSH
58206: LD_INT 4
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 5
58216: NEG
58217: PUSH
58218: LD_INT 5
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 5
58228: NEG
58229: PUSH
58230: LD_INT 6
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 6
58240: NEG
58241: PUSH
58242: LD_INT 5
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 6
58252: NEG
58253: PUSH
58254: LD_INT 6
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58276: LD_ADDR_VAR 0 41
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58320: LD_ADDR_VAR 0 42
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: LIST
58360: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58361: LD_ADDR_VAR 0 43
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 3
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58401: LD_ADDR_VAR 0 44
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58442: LD_ADDR_VAR 0 45
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58486: LD_ADDR_VAR 0 46
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58532: LD_ADDR_VAR 0 47
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: LD_INT 3
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58565: LD_ADDR_VAR 0 48
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58596: LD_ADDR_VAR 0 49
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 3
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58625: LD_ADDR_VAR 0 50
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58654: LD_ADDR_VAR 0 51
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58685: LD_ADDR_VAR 0 52
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: NEG
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58718: LD_ADDR_VAR 0 53
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58762: LD_ADDR_VAR 0 54
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58803: LD_ADDR_VAR 0 55
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: LIST
58842: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58843: LD_ADDR_VAR 0 56
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58884: LD_ADDR_VAR 0 57
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58928: LD_ADDR_VAR 0 58
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58974: LD_ADDR_VAR 0 59
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59018: LD_ADDR_VAR 0 60
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59059: LD_ADDR_VAR 0 61
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59099: LD_ADDR_VAR 0 62
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59140: LD_ADDR_VAR 0 63
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59184: LD_ADDR_VAR 0 64
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// end ; 2 :
59230: GO 62496
59232: LD_INT 2
59234: DOUBLE
59235: EQUAL
59236: IFTRUE 59240
59238: GO 62495
59240: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59241: LD_ADDR_VAR 0 29
59245: PUSH
59246: LD_INT 4
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 4
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 5
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 5
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 5
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 3
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 4
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 4
59371: PUSH
59372: LD_INT 4
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: LD_INT 4
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: LD_INT 3
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 4
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: LD_INT 4
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 4
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 4
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 5
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 5
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 4
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 3
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: LD_INT 5
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 4
59580: NEG
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 4
59603: NEG
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 4
59626: NEG
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 4
59638: NEG
59639: PUSH
59640: LD_INT 5
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: LD_INT 4
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: LD_INT 3
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 4
59674: NEG
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 5
59686: NEG
59687: PUSH
59688: LD_INT 4
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 5
59698: NEG
59699: PUSH
59700: LD_INT 5
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 3
59710: NEG
59711: PUSH
59712: LD_INT 5
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 5
59722: NEG
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59779: LD_ADDR_VAR 0 30
59783: PUSH
59784: LD_INT 4
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 4
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 5
59806: PUSH
59807: LD_INT 4
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 5
59816: PUSH
59817: LD_INT 5
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 4
59826: PUSH
59827: LD_INT 5
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 3
59836: PUSH
59837: LD_INT 4
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 5
59856: PUSH
59857: LD_INT 3
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: LD_INT 5
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 4
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 4
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 4
60014: NEG
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 5
60025: NEG
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 5
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 5
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 3
60071: NEG
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 3
60083: NEG
60084: PUSH
60085: LD_INT 4
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: NEG
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: NEG
60144: PUSH
60145: LD_INT 4
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 4
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 4
60167: NEG
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 4
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 5
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: LD_INT 4
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: LD_INT 4
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: LD_INT 5
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 5
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60326: LD_ADDR_VAR 0 31
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 4
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 4
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 5
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 5
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: LD_INT 4
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 3
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: LD_INT 5
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 4
60482: NEG
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 4
60505: NEG
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 4
60528: NEG
60529: PUSH
60530: LD_INT 4
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 4
60540: NEG
60541: PUSH
60542: LD_INT 5
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 3
60552: NEG
60553: PUSH
60554: LD_INT 4
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: NEG
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 4
60576: NEG
60577: PUSH
60578: LD_INT 3
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 5
60588: NEG
60589: PUSH
60590: LD_INT 4
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 5
60600: NEG
60601: PUSH
60602: LD_INT 5
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 3
60612: NEG
60613: PUSH
60614: LD_INT 5
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 5
60624: NEG
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 3
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 4
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 4
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: LD_INT 4
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 4
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 5
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 5
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 4
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 5
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60876: LD_ADDR_VAR 0 32
60880: PUSH
60881: LD_INT 4
60883: NEG
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 4
60894: NEG
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 4
60928: NEG
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 5
60939: NEG
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 5
60950: NEG
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 5
60962: NEG
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: NEG
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 3
60997: NEG
60998: PUSH
60999: LD_INT 4
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: LD_INT 3
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 4
61045: NEG
61046: PUSH
61047: LD_INT 3
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 4
61057: NEG
61058: PUSH
61059: LD_INT 4
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 4
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: NEG
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 4
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 5
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 4
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: LD_INT 3
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: LD_INT 4
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 5
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 5
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 4
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 4
61288: PUSH
61289: LD_INT 4
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 4
61298: PUSH
61299: LD_INT 3
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 5
61308: PUSH
61309: LD_INT 4
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 5
61318: PUSH
61319: LD_INT 5
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 4
61328: PUSH
61329: LD_INT 5
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 3
61338: PUSH
61339: LD_INT 4
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: PUSH
61349: LD_INT 3
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 5
61358: PUSH
61359: LD_INT 3
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 3
61368: PUSH
61369: LD_INT 5
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61423: LD_ADDR_VAR 0 33
61427: PUSH
61428: LD_INT 4
61430: NEG
61431: PUSH
61432: LD_INT 4
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 4
61442: NEG
61443: PUSH
61444: LD_INT 5
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 3
61454: NEG
61455: PUSH
61456: LD_INT 4
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 4
61478: NEG
61479: PUSH
61480: LD_INT 3
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 5
61490: NEG
61491: PUSH
61492: LD_INT 4
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 5
61502: NEG
61503: PUSH
61504: LD_INT 5
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: LD_INT 5
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 5
61526: NEG
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 4
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 3
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: LD_INT 4
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: LD_INT 2
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: LD_INT 4
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 4
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 4
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 5
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 5
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 4
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 5
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: LD_INT 3
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 4
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 4
61763: PUSH
61764: LD_INT 4
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: LD_INT 4
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: LD_INT 3
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 4
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: LD_INT 4
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 4
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: LD_INT 3
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 4
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 5
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 4
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 3
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: PUSH
61896: LD_INT 5
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61961: LD_ADDR_VAR 0 34
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 4
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 5
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 4
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 4
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: LD_INT 5
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: LD_INT 3
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: LD_INT 5
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 4
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 4
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 4
62153: PUSH
62154: LD_INT 2
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 4
62163: PUSH
62164: LD_INT 4
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 4
62173: PUSH
62174: LD_INT 3
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 5
62183: PUSH
62184: LD_INT 4
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 5
62193: PUSH
62194: LD_INT 5
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 4
62203: PUSH
62204: LD_INT 5
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: LD_INT 4
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 3
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 5
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: PUSH
62244: LD_INT 5
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 4
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 4
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: LD_INT 3
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: LD_INT 4
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 4
62346: NEG
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 4
62357: NEG
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 3
62369: NEG
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 4
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 5
62402: NEG
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 5
62413: NEG
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 5
62425: NEG
62426: PUSH
62427: LD_INT 2
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 3
62437: NEG
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: ST_TO_ADDR
// end ; end ;
62493: GO 62496
62495: POP
// case btype of b_depot , b_warehouse :
62496: LD_VAR 0 1
62500: PUSH
62501: LD_INT 0
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62515
62507: LD_INT 1
62509: DOUBLE
62510: EQUAL
62511: IFTRUE 62515
62513: GO 62716
62515: POP
// case nation of nation_american :
62516: LD_VAR 0 5
62520: PUSH
62521: LD_INT 1
62523: DOUBLE
62524: EQUAL
62525: IFTRUE 62529
62527: GO 62585
62529: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62530: LD_ADDR_VAR 0 9
62534: PUSH
62535: LD_VAR 0 11
62539: PUSH
62540: LD_VAR 0 12
62544: PUSH
62545: LD_VAR 0 13
62549: PUSH
62550: LD_VAR 0 14
62554: PUSH
62555: LD_VAR 0 15
62559: PUSH
62560: LD_VAR 0 16
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: PUSH
62573: LD_VAR 0 4
62577: PUSH
62578: LD_INT 1
62580: PLUS
62581: ARRAY
62582: ST_TO_ADDR
62583: GO 62714
62585: LD_INT 2
62587: DOUBLE
62588: EQUAL
62589: IFTRUE 62593
62591: GO 62649
62593: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62594: LD_ADDR_VAR 0 9
62598: PUSH
62599: LD_VAR 0 17
62603: PUSH
62604: LD_VAR 0 18
62608: PUSH
62609: LD_VAR 0 19
62613: PUSH
62614: LD_VAR 0 20
62618: PUSH
62619: LD_VAR 0 21
62623: PUSH
62624: LD_VAR 0 22
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: PUSH
62637: LD_VAR 0 4
62641: PUSH
62642: LD_INT 1
62644: PLUS
62645: ARRAY
62646: ST_TO_ADDR
62647: GO 62714
62649: LD_INT 3
62651: DOUBLE
62652: EQUAL
62653: IFTRUE 62657
62655: GO 62713
62657: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62658: LD_ADDR_VAR 0 9
62662: PUSH
62663: LD_VAR 0 23
62667: PUSH
62668: LD_VAR 0 24
62672: PUSH
62673: LD_VAR 0 25
62677: PUSH
62678: LD_VAR 0 26
62682: PUSH
62683: LD_VAR 0 27
62687: PUSH
62688: LD_VAR 0 28
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: PUSH
62701: LD_VAR 0 4
62705: PUSH
62706: LD_INT 1
62708: PLUS
62709: ARRAY
62710: ST_TO_ADDR
62711: GO 62714
62713: POP
62714: GO 63269
62716: LD_INT 2
62718: DOUBLE
62719: EQUAL
62720: IFTRUE 62730
62722: LD_INT 3
62724: DOUBLE
62725: EQUAL
62726: IFTRUE 62730
62728: GO 62786
62730: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62731: LD_ADDR_VAR 0 9
62735: PUSH
62736: LD_VAR 0 29
62740: PUSH
62741: LD_VAR 0 30
62745: PUSH
62746: LD_VAR 0 31
62750: PUSH
62751: LD_VAR 0 32
62755: PUSH
62756: LD_VAR 0 33
62760: PUSH
62761: LD_VAR 0 34
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: PUSH
62774: LD_VAR 0 4
62778: PUSH
62779: LD_INT 1
62781: PLUS
62782: ARRAY
62783: ST_TO_ADDR
62784: GO 63269
62786: LD_INT 16
62788: DOUBLE
62789: EQUAL
62790: IFTRUE 62848
62792: LD_INT 17
62794: DOUBLE
62795: EQUAL
62796: IFTRUE 62848
62798: LD_INT 18
62800: DOUBLE
62801: EQUAL
62802: IFTRUE 62848
62804: LD_INT 19
62806: DOUBLE
62807: EQUAL
62808: IFTRUE 62848
62810: LD_INT 22
62812: DOUBLE
62813: EQUAL
62814: IFTRUE 62848
62816: LD_INT 20
62818: DOUBLE
62819: EQUAL
62820: IFTRUE 62848
62822: LD_INT 21
62824: DOUBLE
62825: EQUAL
62826: IFTRUE 62848
62828: LD_INT 23
62830: DOUBLE
62831: EQUAL
62832: IFTRUE 62848
62834: LD_INT 24
62836: DOUBLE
62837: EQUAL
62838: IFTRUE 62848
62840: LD_INT 25
62842: DOUBLE
62843: EQUAL
62844: IFTRUE 62848
62846: GO 62904
62848: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62849: LD_ADDR_VAR 0 9
62853: PUSH
62854: LD_VAR 0 35
62858: PUSH
62859: LD_VAR 0 36
62863: PUSH
62864: LD_VAR 0 37
62868: PUSH
62869: LD_VAR 0 38
62873: PUSH
62874: LD_VAR 0 39
62878: PUSH
62879: LD_VAR 0 40
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: PUSH
62892: LD_VAR 0 4
62896: PUSH
62897: LD_INT 1
62899: PLUS
62900: ARRAY
62901: ST_TO_ADDR
62902: GO 63269
62904: LD_INT 6
62906: DOUBLE
62907: EQUAL
62908: IFTRUE 62960
62910: LD_INT 7
62912: DOUBLE
62913: EQUAL
62914: IFTRUE 62960
62916: LD_INT 8
62918: DOUBLE
62919: EQUAL
62920: IFTRUE 62960
62922: LD_INT 13
62924: DOUBLE
62925: EQUAL
62926: IFTRUE 62960
62928: LD_INT 12
62930: DOUBLE
62931: EQUAL
62932: IFTRUE 62960
62934: LD_INT 15
62936: DOUBLE
62937: EQUAL
62938: IFTRUE 62960
62940: LD_INT 11
62942: DOUBLE
62943: EQUAL
62944: IFTRUE 62960
62946: LD_INT 14
62948: DOUBLE
62949: EQUAL
62950: IFTRUE 62960
62952: LD_INT 10
62954: DOUBLE
62955: EQUAL
62956: IFTRUE 62960
62958: GO 63016
62960: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62961: LD_ADDR_VAR 0 9
62965: PUSH
62966: LD_VAR 0 41
62970: PUSH
62971: LD_VAR 0 42
62975: PUSH
62976: LD_VAR 0 43
62980: PUSH
62981: LD_VAR 0 44
62985: PUSH
62986: LD_VAR 0 45
62990: PUSH
62991: LD_VAR 0 46
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: PUSH
63004: LD_VAR 0 4
63008: PUSH
63009: LD_INT 1
63011: PLUS
63012: ARRAY
63013: ST_TO_ADDR
63014: GO 63269
63016: LD_INT 36
63018: DOUBLE
63019: EQUAL
63020: IFTRUE 63024
63022: GO 63080
63024: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63025: LD_ADDR_VAR 0 9
63029: PUSH
63030: LD_VAR 0 47
63034: PUSH
63035: LD_VAR 0 48
63039: PUSH
63040: LD_VAR 0 49
63044: PUSH
63045: LD_VAR 0 50
63049: PUSH
63050: LD_VAR 0 51
63054: PUSH
63055: LD_VAR 0 52
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: PUSH
63068: LD_VAR 0 4
63072: PUSH
63073: LD_INT 1
63075: PLUS
63076: ARRAY
63077: ST_TO_ADDR
63078: GO 63269
63080: LD_INT 4
63082: DOUBLE
63083: EQUAL
63084: IFTRUE 63106
63086: LD_INT 5
63088: DOUBLE
63089: EQUAL
63090: IFTRUE 63106
63092: LD_INT 34
63094: DOUBLE
63095: EQUAL
63096: IFTRUE 63106
63098: LD_INT 37
63100: DOUBLE
63101: EQUAL
63102: IFTRUE 63106
63104: GO 63162
63106: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63107: LD_ADDR_VAR 0 9
63111: PUSH
63112: LD_VAR 0 53
63116: PUSH
63117: LD_VAR 0 54
63121: PUSH
63122: LD_VAR 0 55
63126: PUSH
63127: LD_VAR 0 56
63131: PUSH
63132: LD_VAR 0 57
63136: PUSH
63137: LD_VAR 0 58
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: PUSH
63150: LD_VAR 0 4
63154: PUSH
63155: LD_INT 1
63157: PLUS
63158: ARRAY
63159: ST_TO_ADDR
63160: GO 63269
63162: LD_INT 31
63164: DOUBLE
63165: EQUAL
63166: IFTRUE 63212
63168: LD_INT 32
63170: DOUBLE
63171: EQUAL
63172: IFTRUE 63212
63174: LD_INT 33
63176: DOUBLE
63177: EQUAL
63178: IFTRUE 63212
63180: LD_INT 27
63182: DOUBLE
63183: EQUAL
63184: IFTRUE 63212
63186: LD_INT 26
63188: DOUBLE
63189: EQUAL
63190: IFTRUE 63212
63192: LD_INT 28
63194: DOUBLE
63195: EQUAL
63196: IFTRUE 63212
63198: LD_INT 29
63200: DOUBLE
63201: EQUAL
63202: IFTRUE 63212
63204: LD_INT 30
63206: DOUBLE
63207: EQUAL
63208: IFTRUE 63212
63210: GO 63268
63212: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63213: LD_ADDR_VAR 0 9
63217: PUSH
63218: LD_VAR 0 59
63222: PUSH
63223: LD_VAR 0 60
63227: PUSH
63228: LD_VAR 0 61
63232: PUSH
63233: LD_VAR 0 62
63237: PUSH
63238: LD_VAR 0 63
63242: PUSH
63243: LD_VAR 0 64
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: PUSH
63256: LD_VAR 0 4
63260: PUSH
63261: LD_INT 1
63263: PLUS
63264: ARRAY
63265: ST_TO_ADDR
63266: GO 63269
63268: POP
// temp_list2 = [ ] ;
63269: LD_ADDR_VAR 0 10
63273: PUSH
63274: EMPTY
63275: ST_TO_ADDR
// for i in temp_list do
63276: LD_ADDR_VAR 0 8
63280: PUSH
63281: LD_VAR 0 9
63285: PUSH
63286: FOR_IN
63287: IFFALSE 63339
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63289: LD_ADDR_VAR 0 10
63293: PUSH
63294: LD_VAR 0 10
63298: PUSH
63299: LD_VAR 0 8
63303: PUSH
63304: LD_INT 1
63306: ARRAY
63307: PUSH
63308: LD_VAR 0 2
63312: PLUS
63313: PUSH
63314: LD_VAR 0 8
63318: PUSH
63319: LD_INT 2
63321: ARRAY
63322: PUSH
63323: LD_VAR 0 3
63327: PLUS
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: EMPTY
63334: LIST
63335: ADD
63336: ST_TO_ADDR
63337: GO 63286
63339: POP
63340: POP
// result = temp_list2 ;
63341: LD_ADDR_VAR 0 7
63345: PUSH
63346: LD_VAR 0 10
63350: ST_TO_ADDR
// end ;
63351: LD_VAR 0 7
63355: RET
// export function EnemyInRange ( unit , dist ) ; begin
63356: LD_INT 0
63358: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63359: LD_ADDR_VAR 0 3
63363: PUSH
63364: LD_VAR 0 1
63368: PPUSH
63369: CALL_OW 255
63373: PPUSH
63374: LD_VAR 0 1
63378: PPUSH
63379: CALL_OW 250
63383: PPUSH
63384: LD_VAR 0 1
63388: PPUSH
63389: CALL_OW 251
63393: PPUSH
63394: LD_VAR 0 2
63398: PPUSH
63399: CALL 36613 0 4
63403: PUSH
63404: LD_INT 4
63406: ARRAY
63407: ST_TO_ADDR
// end ;
63408: LD_VAR 0 3
63412: RET
// export function PlayerSeeMe ( unit ) ; begin
63413: LD_INT 0
63415: PPUSH
// result := See ( your_side , unit ) ;
63416: LD_ADDR_VAR 0 2
63420: PUSH
63421: LD_OWVAR 2
63425: PPUSH
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 292
63435: ST_TO_ADDR
// end ;
63436: LD_VAR 0 2
63440: RET
// export function ReverseDir ( unit ) ; begin
63441: LD_INT 0
63443: PPUSH
// if not unit then
63444: LD_VAR 0 1
63448: NOT
63449: IFFALSE 63453
// exit ;
63451: GO 63476
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63453: LD_ADDR_VAR 0 2
63457: PUSH
63458: LD_VAR 0 1
63462: PPUSH
63463: CALL_OW 254
63467: PUSH
63468: LD_INT 3
63470: PLUS
63471: PUSH
63472: LD_INT 6
63474: MOD
63475: ST_TO_ADDR
// end ;
63476: LD_VAR 0 2
63480: RET
// export function ReverseArray ( array ) ; var i ; begin
63481: LD_INT 0
63483: PPUSH
63484: PPUSH
// if not array then
63485: LD_VAR 0 1
63489: NOT
63490: IFFALSE 63494
// exit ;
63492: GO 63549
// result := [ ] ;
63494: LD_ADDR_VAR 0 2
63498: PUSH
63499: EMPTY
63500: ST_TO_ADDR
// for i := array downto 1 do
63501: LD_ADDR_VAR 0 3
63505: PUSH
63506: DOUBLE
63507: LD_VAR 0 1
63511: INC
63512: ST_TO_ADDR
63513: LD_INT 1
63515: PUSH
63516: FOR_DOWNTO
63517: IFFALSE 63547
// result := Join ( result , array [ i ] ) ;
63519: LD_ADDR_VAR 0 2
63523: PUSH
63524: LD_VAR 0 2
63528: PPUSH
63529: LD_VAR 0 1
63533: PUSH
63534: LD_VAR 0 3
63538: ARRAY
63539: PPUSH
63540: CALL 68401 0 2
63544: ST_TO_ADDR
63545: GO 63516
63547: POP
63548: POP
// end ;
63549: LD_VAR 0 2
63553: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63554: LD_INT 0
63556: PPUSH
63557: PPUSH
63558: PPUSH
63559: PPUSH
63560: PPUSH
63561: PPUSH
// if not unit or not hexes then
63562: LD_VAR 0 1
63566: NOT
63567: IFTRUE 63576
63569: PUSH
63570: LD_VAR 0 2
63574: NOT
63575: OR
63576: IFFALSE 63580
// exit ;
63578: GO 63703
// dist := 9999 ;
63580: LD_ADDR_VAR 0 5
63584: PUSH
63585: LD_INT 9999
63587: ST_TO_ADDR
// for i = 1 to hexes do
63588: LD_ADDR_VAR 0 4
63592: PUSH
63593: DOUBLE
63594: LD_INT 1
63596: DEC
63597: ST_TO_ADDR
63598: LD_VAR 0 2
63602: PUSH
63603: FOR_TO
63604: IFFALSE 63691
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63606: LD_ADDR_VAR 0 6
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: LD_VAR 0 2
63620: PUSH
63621: LD_VAR 0 4
63625: ARRAY
63626: PUSH
63627: LD_INT 1
63629: ARRAY
63630: PPUSH
63631: LD_VAR 0 2
63635: PUSH
63636: LD_VAR 0 4
63640: ARRAY
63641: PUSH
63642: LD_INT 2
63644: ARRAY
63645: PPUSH
63646: CALL_OW 297
63650: ST_TO_ADDR
// if tdist < dist then
63651: LD_VAR 0 6
63655: PUSH
63656: LD_VAR 0 5
63660: LESS
63661: IFFALSE 63689
// begin hex := hexes [ i ] ;
63663: LD_ADDR_VAR 0 8
63667: PUSH
63668: LD_VAR 0 2
63672: PUSH
63673: LD_VAR 0 4
63677: ARRAY
63678: ST_TO_ADDR
// dist := tdist ;
63679: LD_ADDR_VAR 0 5
63683: PUSH
63684: LD_VAR 0 6
63688: ST_TO_ADDR
// end ; end ;
63689: GO 63603
63691: POP
63692: POP
// result := hex ;
63693: LD_ADDR_VAR 0 3
63697: PUSH
63698: LD_VAR 0 8
63702: ST_TO_ADDR
// end ;
63703: LD_VAR 0 3
63707: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63708: LD_INT 0
63710: PPUSH
63711: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63712: LD_VAR 0 1
63716: NOT
63717: IFTRUE 63756
63719: PUSH
63720: LD_VAR 0 1
63724: PUSH
63725: LD_INT 21
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 23
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PPUSH
63749: CALL_OW 69
63753: IN
63754: NOT
63755: OR
63756: IFFALSE 63760
// exit ;
63758: GO 63807
// for i = 1 to 3 do
63760: LD_ADDR_VAR 0 3
63764: PUSH
63765: DOUBLE
63766: LD_INT 1
63768: DEC
63769: ST_TO_ADDR
63770: LD_INT 3
63772: PUSH
63773: FOR_TO
63774: IFFALSE 63805
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63776: LD_VAR 0 1
63780: PPUSH
63781: CALL_OW 250
63785: PPUSH
63786: LD_VAR 0 1
63790: PPUSH
63791: CALL_OW 251
63795: PPUSH
63796: LD_INT 1
63798: PPUSH
63799: CALL_OW 453
63803: GO 63773
63805: POP
63806: POP
// end ;
63807: LD_VAR 0 2
63811: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63812: LD_INT 0
63814: PPUSH
63815: PPUSH
63816: PPUSH
63817: PPUSH
63818: PPUSH
63819: PPUSH
// if not unit or not enemy_unit then
63820: LD_VAR 0 1
63824: NOT
63825: IFTRUE 63834
63827: PUSH
63828: LD_VAR 0 2
63832: NOT
63833: OR
63834: IFFALSE 63838
// exit ;
63836: GO 64319
// if GetLives ( i ) < 250 then
63838: LD_VAR 0 4
63842: PPUSH
63843: CALL_OW 256
63847: PUSH
63848: LD_INT 250
63850: LESS
63851: IFFALSE 63864
// begin ComAutodestruct ( i ) ;
63853: LD_VAR 0 4
63857: PPUSH
63858: CALL 63708 0 1
// exit ;
63862: GO 64319
// end ; x := GetX ( enemy_unit ) ;
63864: LD_ADDR_VAR 0 7
63868: PUSH
63869: LD_VAR 0 2
63873: PPUSH
63874: CALL_OW 250
63878: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63879: LD_ADDR_VAR 0 8
63883: PUSH
63884: LD_VAR 0 2
63888: PPUSH
63889: CALL_OW 251
63893: ST_TO_ADDR
// if not x or not y then
63894: LD_VAR 0 7
63898: NOT
63899: IFTRUE 63908
63901: PUSH
63902: LD_VAR 0 8
63906: NOT
63907: OR
63908: IFFALSE 63912
// exit ;
63910: GO 64319
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63912: LD_ADDR_VAR 0 6
63916: PUSH
63917: LD_VAR 0 7
63921: PPUSH
63922: LD_INT 0
63924: PPUSH
63925: LD_INT 4
63927: PPUSH
63928: CALL_OW 272
63932: PUSH
63933: LD_VAR 0 8
63937: PPUSH
63938: LD_INT 0
63940: PPUSH
63941: LD_INT 4
63943: PPUSH
63944: CALL_OW 273
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_VAR 0 7
63957: PPUSH
63958: LD_INT 1
63960: PPUSH
63961: LD_INT 4
63963: PPUSH
63964: CALL_OW 272
63968: PUSH
63969: LD_VAR 0 8
63973: PPUSH
63974: LD_INT 1
63976: PPUSH
63977: LD_INT 4
63979: PPUSH
63980: CALL_OW 273
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_VAR 0 7
63993: PPUSH
63994: LD_INT 2
63996: PPUSH
63997: LD_INT 4
63999: PPUSH
64000: CALL_OW 272
64004: PUSH
64005: LD_VAR 0 8
64009: PPUSH
64010: LD_INT 2
64012: PPUSH
64013: LD_INT 4
64015: PPUSH
64016: CALL_OW 273
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_VAR 0 7
64029: PPUSH
64030: LD_INT 3
64032: PPUSH
64033: LD_INT 4
64035: PPUSH
64036: CALL_OW 272
64040: PUSH
64041: LD_VAR 0 8
64045: PPUSH
64046: LD_INT 3
64048: PPUSH
64049: LD_INT 4
64051: PPUSH
64052: CALL_OW 273
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_VAR 0 7
64065: PPUSH
64066: LD_INT 4
64068: PPUSH
64069: LD_INT 4
64071: PPUSH
64072: CALL_OW 272
64076: PUSH
64077: LD_VAR 0 8
64081: PPUSH
64082: LD_INT 4
64084: PPUSH
64085: LD_INT 4
64087: PPUSH
64088: CALL_OW 273
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_VAR 0 7
64101: PPUSH
64102: LD_INT 5
64104: PPUSH
64105: LD_INT 4
64107: PPUSH
64108: CALL_OW 272
64112: PUSH
64113: LD_VAR 0 8
64117: PPUSH
64118: LD_INT 5
64120: PPUSH
64121: LD_INT 4
64123: PPUSH
64124: CALL_OW 273
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: ST_TO_ADDR
// for i = tmp downto 1 do
64141: LD_ADDR_VAR 0 4
64145: PUSH
64146: DOUBLE
64147: LD_VAR 0 6
64151: INC
64152: ST_TO_ADDR
64153: LD_INT 1
64155: PUSH
64156: FOR_DOWNTO
64157: IFFALSE 64260
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64159: LD_VAR 0 6
64163: PUSH
64164: LD_VAR 0 4
64168: ARRAY
64169: PUSH
64170: LD_INT 1
64172: ARRAY
64173: PPUSH
64174: LD_VAR 0 6
64178: PUSH
64179: LD_VAR 0 4
64183: ARRAY
64184: PUSH
64185: LD_INT 2
64187: ARRAY
64188: PPUSH
64189: CALL_OW 488
64193: NOT
64194: IFTRUE 64236
64196: PUSH
64197: LD_VAR 0 6
64201: PUSH
64202: LD_VAR 0 4
64206: ARRAY
64207: PUSH
64208: LD_INT 1
64210: ARRAY
64211: PPUSH
64212: LD_VAR 0 6
64216: PUSH
64217: LD_VAR 0 4
64221: ARRAY
64222: PUSH
64223: LD_INT 2
64225: ARRAY
64226: PPUSH
64227: CALL_OW 428
64231: PUSH
64232: LD_INT 0
64234: NONEQUAL
64235: OR
64236: IFFALSE 64258
// tmp := Delete ( tmp , i ) ;
64238: LD_ADDR_VAR 0 6
64242: PUSH
64243: LD_VAR 0 6
64247: PPUSH
64248: LD_VAR 0 4
64252: PPUSH
64253: CALL_OW 3
64257: ST_TO_ADDR
64258: GO 64156
64260: POP
64261: POP
// j := GetClosestHex ( unit , tmp ) ;
64262: LD_ADDR_VAR 0 5
64266: PUSH
64267: LD_VAR 0 1
64271: PPUSH
64272: LD_VAR 0 6
64276: PPUSH
64277: CALL 63554 0 2
64281: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64282: LD_VAR 0 1
64286: PPUSH
64287: LD_VAR 0 5
64291: PUSH
64292: LD_INT 1
64294: ARRAY
64295: PPUSH
64296: LD_VAR 0 5
64300: PUSH
64301: LD_INT 2
64303: ARRAY
64304: PPUSH
64305: CALL_OW 111
// result := j ;
64309: LD_ADDR_VAR 0 3
64313: PUSH
64314: LD_VAR 0 5
64318: ST_TO_ADDR
// end ;
64319: LD_VAR 0 3
64323: RET
// export function PrepareApemanSoldier ( ) ; begin
64324: LD_INT 0
64326: PPUSH
// uc_nation := 0 ;
64327: LD_ADDR_OWVAR 21
64331: PUSH
64332: LD_INT 0
64334: ST_TO_ADDR
// hc_sex := sex_male ;
64335: LD_ADDR_OWVAR 27
64339: PUSH
64340: LD_INT 1
64342: ST_TO_ADDR
// hc_name :=  ;
64343: LD_ADDR_OWVAR 26
64347: PUSH
64348: LD_STRING 
64350: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64351: LD_ADDR_OWVAR 28
64355: PUSH
64356: LD_INT 15
64358: ST_TO_ADDR
// hc_gallery :=  ;
64359: LD_ADDR_OWVAR 33
64363: PUSH
64364: LD_STRING 
64366: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64367: LD_ADDR_OWVAR 31
64371: PUSH
64372: LD_INT 0
64374: PPUSH
64375: LD_INT 3
64377: PPUSH
64378: CALL_OW 12
64382: PUSH
64383: LD_INT 0
64385: PPUSH
64386: LD_INT 3
64388: PPUSH
64389: CALL_OW 12
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64406: LD_ADDR_OWVAR 29
64410: PUSH
64411: LD_INT 10
64413: PUSH
64414: LD_INT 12
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: ST_TO_ADDR
// end ;
64421: LD_VAR 0 1
64425: RET
// export function PrepareApemanEngineer ( ) ; begin
64426: LD_INT 0
64428: PPUSH
// uc_nation := 0 ;
64429: LD_ADDR_OWVAR 21
64433: PUSH
64434: LD_INT 0
64436: ST_TO_ADDR
// hc_sex := sex_male ;
64437: LD_ADDR_OWVAR 27
64441: PUSH
64442: LD_INT 1
64444: ST_TO_ADDR
// hc_name :=  ;
64445: LD_ADDR_OWVAR 26
64449: PUSH
64450: LD_STRING 
64452: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64453: LD_ADDR_OWVAR 28
64457: PUSH
64458: LD_INT 16
64460: ST_TO_ADDR
// hc_gallery :=  ;
64461: LD_ADDR_OWVAR 33
64465: PUSH
64466: LD_STRING 
64468: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64469: LD_ADDR_OWVAR 31
64473: PUSH
64474: LD_INT 0
64476: PPUSH
64477: LD_INT 3
64479: PPUSH
64480: CALL_OW 12
64484: PUSH
64485: LD_INT 0
64487: PPUSH
64488: LD_INT 3
64490: PPUSH
64491: CALL_OW 12
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64508: LD_ADDR_OWVAR 29
64512: PUSH
64513: LD_INT 10
64515: PUSH
64516: LD_INT 12
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// end ;
64523: LD_VAR 0 1
64527: RET
// export function PrepareApeman ( agressivity ) ; begin
64528: LD_INT 0
64530: PPUSH
// uc_side := 0 ;
64531: LD_ADDR_OWVAR 20
64535: PUSH
64536: LD_INT 0
64538: ST_TO_ADDR
// uc_nation := 0 ;
64539: LD_ADDR_OWVAR 21
64543: PUSH
64544: LD_INT 0
64546: ST_TO_ADDR
// hc_sex := sex_male ;
64547: LD_ADDR_OWVAR 27
64551: PUSH
64552: LD_INT 1
64554: ST_TO_ADDR
// hc_class := class_apeman ;
64555: LD_ADDR_OWVAR 28
64559: PUSH
64560: LD_INT 12
64562: ST_TO_ADDR
// hc_gallery :=  ;
64563: LD_ADDR_OWVAR 33
64567: PUSH
64568: LD_STRING 
64570: ST_TO_ADDR
// hc_name :=  ;
64571: LD_ADDR_OWVAR 26
64575: PUSH
64576: LD_STRING 
64578: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64579: LD_ADDR_OWVAR 29
64583: PUSH
64584: LD_INT 10
64586: PUSH
64587: LD_INT 12
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: ST_TO_ADDR
// if agressivity = 0 then
64594: LD_VAR 0 1
64598: PUSH
64599: LD_INT 0
64601: EQUAL
64602: IFFALSE 64614
// hc_agressivity := 0 else
64604: LD_ADDR_OWVAR 35
64608: PUSH
64609: LD_INT 0
64611: ST_TO_ADDR
64612: GO 64635
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64614: LD_ADDR_OWVAR 35
64618: PUSH
64619: LD_VAR 0 1
64623: NEG
64624: PPUSH
64625: LD_VAR 0 1
64629: PPUSH
64630: CALL_OW 12
64634: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64635: LD_ADDR_OWVAR 31
64639: PUSH
64640: LD_INT 0
64642: PPUSH
64643: LD_INT 3
64645: PPUSH
64646: CALL_OW 12
64650: PUSH
64651: LD_INT 0
64653: PPUSH
64654: LD_INT 3
64656: PPUSH
64657: CALL_OW 12
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: ST_TO_ADDR
// end ;
64674: LD_VAR 0 2
64678: RET
// export function PrepareTiger ( agressivity ) ; begin
64679: LD_INT 0
64681: PPUSH
// uc_side := 0 ;
64682: LD_ADDR_OWVAR 20
64686: PUSH
64687: LD_INT 0
64689: ST_TO_ADDR
// uc_nation := 0 ;
64690: LD_ADDR_OWVAR 21
64694: PUSH
64695: LD_INT 0
64697: ST_TO_ADDR
// InitHc ;
64698: CALL_OW 19
// hc_class := class_tiger ;
64702: LD_ADDR_OWVAR 28
64706: PUSH
64707: LD_INT 14
64709: ST_TO_ADDR
// hc_gallery :=  ;
64710: LD_ADDR_OWVAR 33
64714: PUSH
64715: LD_STRING 
64717: ST_TO_ADDR
// hc_name :=  ;
64718: LD_ADDR_OWVAR 26
64722: PUSH
64723: LD_STRING 
64725: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64726: LD_ADDR_OWVAR 35
64730: PUSH
64731: LD_VAR 0 1
64735: NEG
64736: PPUSH
64737: LD_VAR 0 1
64741: PPUSH
64742: CALL_OW 12
64746: ST_TO_ADDR
// end ;
64747: LD_VAR 0 2
64751: RET
// export function PrepareEnchidna ( ) ; begin
64752: LD_INT 0
64754: PPUSH
// uc_side := 0 ;
64755: LD_ADDR_OWVAR 20
64759: PUSH
64760: LD_INT 0
64762: ST_TO_ADDR
// uc_nation := 0 ;
64763: LD_ADDR_OWVAR 21
64767: PUSH
64768: LD_INT 0
64770: ST_TO_ADDR
// InitHc ;
64771: CALL_OW 19
// hc_class := class_baggie ;
64775: LD_ADDR_OWVAR 28
64779: PUSH
64780: LD_INT 13
64782: ST_TO_ADDR
// hc_gallery :=  ;
64783: LD_ADDR_OWVAR 33
64787: PUSH
64788: LD_STRING 
64790: ST_TO_ADDR
// hc_name :=  ;
64791: LD_ADDR_OWVAR 26
64795: PUSH
64796: LD_STRING 
64798: ST_TO_ADDR
// end ;
64799: LD_VAR 0 1
64803: RET
// export function PrepareFrog ( ) ; begin
64804: LD_INT 0
64806: PPUSH
// uc_side := 0 ;
64807: LD_ADDR_OWVAR 20
64811: PUSH
64812: LD_INT 0
64814: ST_TO_ADDR
// uc_nation := 0 ;
64815: LD_ADDR_OWVAR 21
64819: PUSH
64820: LD_INT 0
64822: ST_TO_ADDR
// InitHc ;
64823: CALL_OW 19
// hc_class := class_frog ;
64827: LD_ADDR_OWVAR 28
64831: PUSH
64832: LD_INT 19
64834: ST_TO_ADDR
// hc_gallery :=  ;
64835: LD_ADDR_OWVAR 33
64839: PUSH
64840: LD_STRING 
64842: ST_TO_ADDR
// hc_name :=  ;
64843: LD_ADDR_OWVAR 26
64847: PUSH
64848: LD_STRING 
64850: ST_TO_ADDR
// end ;
64851: LD_VAR 0 1
64855: RET
// export function PrepareFish ( ) ; begin
64856: LD_INT 0
64858: PPUSH
// uc_side := 0 ;
64859: LD_ADDR_OWVAR 20
64863: PUSH
64864: LD_INT 0
64866: ST_TO_ADDR
// uc_nation := 0 ;
64867: LD_ADDR_OWVAR 21
64871: PUSH
64872: LD_INT 0
64874: ST_TO_ADDR
// InitHc ;
64875: CALL_OW 19
// hc_class := class_fish ;
64879: LD_ADDR_OWVAR 28
64883: PUSH
64884: LD_INT 20
64886: ST_TO_ADDR
// hc_gallery :=  ;
64887: LD_ADDR_OWVAR 33
64891: PUSH
64892: LD_STRING 
64894: ST_TO_ADDR
// hc_name :=  ;
64895: LD_ADDR_OWVAR 26
64899: PUSH
64900: LD_STRING 
64902: ST_TO_ADDR
// end ;
64903: LD_VAR 0 1
64907: RET
// export function PrepareBird ( ) ; begin
64908: LD_INT 0
64910: PPUSH
// uc_side := 0 ;
64911: LD_ADDR_OWVAR 20
64915: PUSH
64916: LD_INT 0
64918: ST_TO_ADDR
// uc_nation := 0 ;
64919: LD_ADDR_OWVAR 21
64923: PUSH
64924: LD_INT 0
64926: ST_TO_ADDR
// InitHc ;
64927: CALL_OW 19
// hc_class := class_phororhacos ;
64931: LD_ADDR_OWVAR 28
64935: PUSH
64936: LD_INT 18
64938: ST_TO_ADDR
// hc_gallery :=  ;
64939: LD_ADDR_OWVAR 33
64943: PUSH
64944: LD_STRING 
64946: ST_TO_ADDR
// hc_name :=  ;
64947: LD_ADDR_OWVAR 26
64951: PUSH
64952: LD_STRING 
64954: ST_TO_ADDR
// end ;
64955: LD_VAR 0 1
64959: RET
// export function PrepareHorse ( ) ; begin
64960: LD_INT 0
64962: PPUSH
// uc_side := 0 ;
64963: LD_ADDR_OWVAR 20
64967: PUSH
64968: LD_INT 0
64970: ST_TO_ADDR
// uc_nation := 0 ;
64971: LD_ADDR_OWVAR 21
64975: PUSH
64976: LD_INT 0
64978: ST_TO_ADDR
// InitHc ;
64979: CALL_OW 19
// hc_class := class_horse ;
64983: LD_ADDR_OWVAR 28
64987: PUSH
64988: LD_INT 21
64990: ST_TO_ADDR
// hc_gallery :=  ;
64991: LD_ADDR_OWVAR 33
64995: PUSH
64996: LD_STRING 
64998: ST_TO_ADDR
// hc_name :=  ;
64999: LD_ADDR_OWVAR 26
65003: PUSH
65004: LD_STRING 
65006: ST_TO_ADDR
// end ;
65007: LD_VAR 0 1
65011: RET
// export function PrepareMastodont ( ) ; begin
65012: LD_INT 0
65014: PPUSH
// uc_side := 0 ;
65015: LD_ADDR_OWVAR 20
65019: PUSH
65020: LD_INT 0
65022: ST_TO_ADDR
// uc_nation := 0 ;
65023: LD_ADDR_OWVAR 21
65027: PUSH
65028: LD_INT 0
65030: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65031: LD_ADDR_OWVAR 37
65035: PUSH
65036: LD_INT 31
65038: ST_TO_ADDR
// vc_control := control_rider ;
65039: LD_ADDR_OWVAR 38
65043: PUSH
65044: LD_INT 4
65046: ST_TO_ADDR
// end ;
65047: LD_VAR 0 1
65051: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65052: LD_INT 0
65054: PPUSH
65055: PPUSH
65056: PPUSH
// uc_side = 0 ;
65057: LD_ADDR_OWVAR 20
65061: PUSH
65062: LD_INT 0
65064: ST_TO_ADDR
// uc_nation = 0 ;
65065: LD_ADDR_OWVAR 21
65069: PUSH
65070: LD_INT 0
65072: ST_TO_ADDR
// InitHc_All ( ) ;
65073: CALL_OW 584
// InitVc ;
65077: CALL_OW 20
// if mastodonts then
65081: LD_VAR 0 6
65085: IFFALSE 65152
// for i = 1 to mastodonts do
65087: LD_ADDR_VAR 0 11
65091: PUSH
65092: DOUBLE
65093: LD_INT 1
65095: DEC
65096: ST_TO_ADDR
65097: LD_VAR 0 6
65101: PUSH
65102: FOR_TO
65103: IFFALSE 65150
// begin vc_chassis := 31 ;
65105: LD_ADDR_OWVAR 37
65109: PUSH
65110: LD_INT 31
65112: ST_TO_ADDR
// vc_control := control_rider ;
65113: LD_ADDR_OWVAR 38
65117: PUSH
65118: LD_INT 4
65120: ST_TO_ADDR
// animal := CreateVehicle ;
65121: LD_ADDR_VAR 0 12
65125: PUSH
65126: CALL_OW 45
65130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65131: LD_VAR 0 12
65135: PPUSH
65136: LD_VAR 0 8
65140: PPUSH
65141: LD_INT 0
65143: PPUSH
65144: CALL 67294 0 3
// end ;
65148: GO 65102
65150: POP
65151: POP
// if horses then
65152: LD_VAR 0 5
65156: IFFALSE 65223
// for i = 1 to horses do
65158: LD_ADDR_VAR 0 11
65162: PUSH
65163: DOUBLE
65164: LD_INT 1
65166: DEC
65167: ST_TO_ADDR
65168: LD_VAR 0 5
65172: PUSH
65173: FOR_TO
65174: IFFALSE 65221
// begin hc_class := 21 ;
65176: LD_ADDR_OWVAR 28
65180: PUSH
65181: LD_INT 21
65183: ST_TO_ADDR
// hc_gallery :=  ;
65184: LD_ADDR_OWVAR 33
65188: PUSH
65189: LD_STRING 
65191: ST_TO_ADDR
// animal := CreateHuman ;
65192: LD_ADDR_VAR 0 12
65196: PUSH
65197: CALL_OW 44
65201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65202: LD_VAR 0 12
65206: PPUSH
65207: LD_VAR 0 8
65211: PPUSH
65212: LD_INT 0
65214: PPUSH
65215: CALL 67294 0 3
// end ;
65219: GO 65173
65221: POP
65222: POP
// if birds then
65223: LD_VAR 0 1
65227: IFFALSE 65294
// for i = 1 to birds do
65229: LD_ADDR_VAR 0 11
65233: PUSH
65234: DOUBLE
65235: LD_INT 1
65237: DEC
65238: ST_TO_ADDR
65239: LD_VAR 0 1
65243: PUSH
65244: FOR_TO
65245: IFFALSE 65292
// begin hc_class := 18 ;
65247: LD_ADDR_OWVAR 28
65251: PUSH
65252: LD_INT 18
65254: ST_TO_ADDR
// hc_gallery =  ;
65255: LD_ADDR_OWVAR 33
65259: PUSH
65260: LD_STRING 
65262: ST_TO_ADDR
// animal := CreateHuman ;
65263: LD_ADDR_VAR 0 12
65267: PUSH
65268: CALL_OW 44
65272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65273: LD_VAR 0 12
65277: PPUSH
65278: LD_VAR 0 8
65282: PPUSH
65283: LD_INT 0
65285: PPUSH
65286: CALL 67294 0 3
// end ;
65290: GO 65244
65292: POP
65293: POP
// if tigers then
65294: LD_VAR 0 2
65298: IFFALSE 65382
// for i = 1 to tigers do
65300: LD_ADDR_VAR 0 11
65304: PUSH
65305: DOUBLE
65306: LD_INT 1
65308: DEC
65309: ST_TO_ADDR
65310: LD_VAR 0 2
65314: PUSH
65315: FOR_TO
65316: IFFALSE 65380
// begin hc_class = class_tiger ;
65318: LD_ADDR_OWVAR 28
65322: PUSH
65323: LD_INT 14
65325: ST_TO_ADDR
// hc_gallery =  ;
65326: LD_ADDR_OWVAR 33
65330: PUSH
65331: LD_STRING 
65333: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65334: LD_ADDR_OWVAR 35
65338: PUSH
65339: LD_INT 7
65341: NEG
65342: PPUSH
65343: LD_INT 7
65345: PPUSH
65346: CALL_OW 12
65350: ST_TO_ADDR
// animal := CreateHuman ;
65351: LD_ADDR_VAR 0 12
65355: PUSH
65356: CALL_OW 44
65360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65361: LD_VAR 0 12
65365: PPUSH
65366: LD_VAR 0 8
65370: PPUSH
65371: LD_INT 0
65373: PPUSH
65374: CALL 67294 0 3
// end ;
65378: GO 65315
65380: POP
65381: POP
// if apemans then
65382: LD_VAR 0 3
65386: IFFALSE 65509
// for i = 1 to apemans do
65388: LD_ADDR_VAR 0 11
65392: PUSH
65393: DOUBLE
65394: LD_INT 1
65396: DEC
65397: ST_TO_ADDR
65398: LD_VAR 0 3
65402: PUSH
65403: FOR_TO
65404: IFFALSE 65507
// begin hc_class = class_apeman ;
65406: LD_ADDR_OWVAR 28
65410: PUSH
65411: LD_INT 12
65413: ST_TO_ADDR
// hc_gallery =  ;
65414: LD_ADDR_OWVAR 33
65418: PUSH
65419: LD_STRING 
65421: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65422: LD_ADDR_OWVAR 35
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PPUSH
65431: LD_INT 2
65433: PPUSH
65434: CALL_OW 12
65438: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65439: LD_ADDR_OWVAR 31
65443: PUSH
65444: LD_INT 1
65446: PPUSH
65447: LD_INT 3
65449: PPUSH
65450: CALL_OW 12
65454: PUSH
65455: LD_INT 1
65457: PPUSH
65458: LD_INT 3
65460: PPUSH
65461: CALL_OW 12
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: ST_TO_ADDR
// animal := CreateHuman ;
65478: LD_ADDR_VAR 0 12
65482: PUSH
65483: CALL_OW 44
65487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65488: LD_VAR 0 12
65492: PPUSH
65493: LD_VAR 0 8
65497: PPUSH
65498: LD_INT 0
65500: PPUSH
65501: CALL 67294 0 3
// end ;
65505: GO 65403
65507: POP
65508: POP
// if enchidnas then
65509: LD_VAR 0 4
65513: IFFALSE 65580
// for i = 1 to enchidnas do
65515: LD_ADDR_VAR 0 11
65519: PUSH
65520: DOUBLE
65521: LD_INT 1
65523: DEC
65524: ST_TO_ADDR
65525: LD_VAR 0 4
65529: PUSH
65530: FOR_TO
65531: IFFALSE 65578
// begin hc_class = 13 ;
65533: LD_ADDR_OWVAR 28
65537: PUSH
65538: LD_INT 13
65540: ST_TO_ADDR
// hc_gallery =  ;
65541: LD_ADDR_OWVAR 33
65545: PUSH
65546: LD_STRING 
65548: ST_TO_ADDR
// animal := CreateHuman ;
65549: LD_ADDR_VAR 0 12
65553: PUSH
65554: CALL_OW 44
65558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65559: LD_VAR 0 12
65563: PPUSH
65564: LD_VAR 0 8
65568: PPUSH
65569: LD_INT 0
65571: PPUSH
65572: CALL 67294 0 3
// end ;
65576: GO 65530
65578: POP
65579: POP
// if fishes then
65580: LD_VAR 0 7
65584: IFFALSE 65651
// for i = 1 to fishes do
65586: LD_ADDR_VAR 0 11
65590: PUSH
65591: DOUBLE
65592: LD_INT 1
65594: DEC
65595: ST_TO_ADDR
65596: LD_VAR 0 7
65600: PUSH
65601: FOR_TO
65602: IFFALSE 65649
// begin hc_class = 20 ;
65604: LD_ADDR_OWVAR 28
65608: PUSH
65609: LD_INT 20
65611: ST_TO_ADDR
// hc_gallery =  ;
65612: LD_ADDR_OWVAR 33
65616: PUSH
65617: LD_STRING 
65619: ST_TO_ADDR
// animal := CreateHuman ;
65620: LD_ADDR_VAR 0 12
65624: PUSH
65625: CALL_OW 44
65629: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65630: LD_VAR 0 12
65634: PPUSH
65635: LD_VAR 0 9
65639: PPUSH
65640: LD_INT 0
65642: PPUSH
65643: CALL 67294 0 3
// end ;
65647: GO 65601
65649: POP
65650: POP
// end ;
65651: LD_VAR 0 10
65655: RET
// export function WantHeal ( sci , unit ) ; begin
65656: LD_INT 0
65658: PPUSH
// if GetTaskList ( sci ) > 0 then
65659: LD_VAR 0 1
65663: PPUSH
65664: CALL_OW 437
65668: PUSH
65669: LD_INT 0
65671: GREATER
65672: IFFALSE 65744
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65674: LD_VAR 0 1
65678: PPUSH
65679: CALL_OW 437
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: PUSH
65688: LD_INT 1
65690: ARRAY
65691: PUSH
65692: LD_STRING l
65694: EQUAL
65695: IFFALSE 65722
65697: PUSH
65698: LD_VAR 0 1
65702: PPUSH
65703: CALL_OW 437
65707: PUSH
65708: LD_INT 1
65710: ARRAY
65711: PUSH
65712: LD_INT 4
65714: ARRAY
65715: PUSH
65716: LD_VAR 0 2
65720: EQUAL
65721: AND
65722: IFFALSE 65734
// result := true else
65724: LD_ADDR_VAR 0 3
65728: PUSH
65729: LD_INT 1
65731: ST_TO_ADDR
65732: GO 65742
// result := false ;
65734: LD_ADDR_VAR 0 3
65738: PUSH
65739: LD_INT 0
65741: ST_TO_ADDR
// end else
65742: GO 65752
// result := false ;
65744: LD_ADDR_VAR 0 3
65748: PUSH
65749: LD_INT 0
65751: ST_TO_ADDR
// end ;
65752: LD_VAR 0 3
65756: RET
// export function HealTarget ( sci ) ; begin
65757: LD_INT 0
65759: PPUSH
// if not sci then
65760: LD_VAR 0 1
65764: NOT
65765: IFFALSE 65769
// exit ;
65767: GO 65834
// result := 0 ;
65769: LD_ADDR_VAR 0 2
65773: PUSH
65774: LD_INT 0
65776: ST_TO_ADDR
// if GetTaskList ( sci ) then
65777: LD_VAR 0 1
65781: PPUSH
65782: CALL_OW 437
65786: IFFALSE 65834
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65788: LD_VAR 0 1
65792: PPUSH
65793: CALL_OW 437
65797: PUSH
65798: LD_INT 1
65800: ARRAY
65801: PUSH
65802: LD_INT 1
65804: ARRAY
65805: PUSH
65806: LD_STRING l
65808: EQUAL
65809: IFFALSE 65834
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65811: LD_ADDR_VAR 0 2
65815: PUSH
65816: LD_VAR 0 1
65820: PPUSH
65821: CALL_OW 437
65825: PUSH
65826: LD_INT 1
65828: ARRAY
65829: PUSH
65830: LD_INT 4
65832: ARRAY
65833: ST_TO_ADDR
// end ;
65834: LD_VAR 0 2
65838: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65839: LD_INT 0
65841: PPUSH
65842: PPUSH
65843: PPUSH
65844: PPUSH
// if not base_units then
65845: LD_VAR 0 1
65849: NOT
65850: IFFALSE 65854
// exit ;
65852: GO 65941
// result := false ;
65854: LD_ADDR_VAR 0 2
65858: PUSH
65859: LD_INT 0
65861: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65862: LD_ADDR_VAR 0 5
65866: PUSH
65867: LD_VAR 0 1
65871: PPUSH
65872: LD_INT 21
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PPUSH
65882: CALL_OW 72
65886: ST_TO_ADDR
// if not tmp then
65887: LD_VAR 0 5
65891: NOT
65892: IFFALSE 65896
// exit ;
65894: GO 65941
// for i in tmp do
65896: LD_ADDR_VAR 0 3
65900: PUSH
65901: LD_VAR 0 5
65905: PUSH
65906: FOR_IN
65907: IFFALSE 65939
// begin result := EnemyInRange ( i , 22 ) ;
65909: LD_ADDR_VAR 0 2
65913: PUSH
65914: LD_VAR 0 3
65918: PPUSH
65919: LD_INT 22
65921: PPUSH
65922: CALL 63356 0 2
65926: ST_TO_ADDR
// if result then
65927: LD_VAR 0 2
65931: IFFALSE 65937
// exit ;
65933: POP
65934: POP
65935: GO 65941
// end ;
65937: GO 65906
65939: POP
65940: POP
// end ;
65941: LD_VAR 0 2
65945: RET
// export function FilterByTag ( units , tag ) ; begin
65946: LD_INT 0
65948: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65949: LD_ADDR_VAR 0 3
65953: PUSH
65954: LD_VAR 0 1
65958: PPUSH
65959: LD_INT 120
65961: PUSH
65962: LD_VAR 0 2
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PPUSH
65971: CALL_OW 72
65975: ST_TO_ADDR
// end ;
65976: LD_VAR 0 3
65980: RET
// export function IsDriver ( un ) ; begin
65981: LD_INT 0
65983: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65984: LD_ADDR_VAR 0 2
65988: PUSH
65989: LD_VAR 0 1
65993: PUSH
65994: LD_INT 55
65996: PUSH
65997: EMPTY
65998: LIST
65999: PPUSH
66000: CALL_OW 69
66004: IN
66005: ST_TO_ADDR
// end ;
66006: LD_VAR 0 2
66010: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66011: LD_INT 0
66013: PPUSH
66014: PPUSH
// list := [ ] ;
66015: LD_ADDR_VAR 0 5
66019: PUSH
66020: EMPTY
66021: ST_TO_ADDR
// case d of 0 :
66022: LD_VAR 0 3
66026: PUSH
66027: LD_INT 0
66029: DOUBLE
66030: EQUAL
66031: IFTRUE 66035
66033: GO 66168
66035: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66036: LD_ADDR_VAR 0 5
66040: PUSH
66041: LD_VAR 0 1
66045: PUSH
66046: LD_INT 4
66048: MINUS
66049: PUSH
66050: LD_VAR 0 2
66054: PUSH
66055: LD_INT 4
66057: MINUS
66058: PUSH
66059: LD_INT 2
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: LIST
66066: PUSH
66067: LD_VAR 0 1
66071: PUSH
66072: LD_INT 3
66074: MINUS
66075: PUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_INT 1
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: PUSH
66089: LD_VAR 0 1
66093: PUSH
66094: LD_INT 4
66096: PLUS
66097: PUSH
66098: LD_VAR 0 2
66102: PUSH
66103: LD_INT 4
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: PUSH
66111: LD_VAR 0 1
66115: PUSH
66116: LD_INT 3
66118: PLUS
66119: PUSH
66120: LD_VAR 0 2
66124: PUSH
66125: LD_INT 3
66127: PLUS
66128: PUSH
66129: LD_INT 5
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: PUSH
66137: LD_VAR 0 1
66141: PUSH
66142: LD_VAR 0 2
66146: PUSH
66147: LD_INT 4
66149: PLUS
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: LIST
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: ST_TO_ADDR
// end ; 1 :
66166: GO 66866
66168: LD_INT 1
66170: DOUBLE
66171: EQUAL
66172: IFTRUE 66176
66174: GO 66309
66176: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66177: LD_ADDR_VAR 0 5
66181: PUSH
66182: LD_VAR 0 1
66186: PUSH
66187: LD_VAR 0 2
66191: PUSH
66192: LD_INT 4
66194: MINUS
66195: PUSH
66196: LD_INT 3
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: PUSH
66204: LD_VAR 0 1
66208: PUSH
66209: LD_INT 3
66211: MINUS
66212: PUSH
66213: LD_VAR 0 2
66217: PUSH
66218: LD_INT 3
66220: MINUS
66221: PUSH
66222: LD_INT 2
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: LIST
66229: PUSH
66230: LD_VAR 0 1
66234: PUSH
66235: LD_INT 4
66237: MINUS
66238: PUSH
66239: LD_VAR 0 2
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: PUSH
66252: LD_VAR 0 1
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 3
66264: PLUS
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: PUSH
66274: LD_VAR 0 1
66278: PUSH
66279: LD_INT 4
66281: PLUS
66282: PUSH
66283: LD_VAR 0 2
66287: PUSH
66288: LD_INT 4
66290: PLUS
66291: PUSH
66292: LD_INT 5
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: LIST
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: ST_TO_ADDR
// end ; 2 :
66307: GO 66866
66309: LD_INT 2
66311: DOUBLE
66312: EQUAL
66313: IFTRUE 66317
66315: GO 66446
66317: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66318: LD_ADDR_VAR 0 5
66322: PUSH
66323: LD_VAR 0 1
66327: PUSH
66328: LD_VAR 0 2
66332: PUSH
66333: LD_INT 3
66335: MINUS
66336: PUSH
66337: LD_INT 3
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: PUSH
66345: LD_VAR 0 1
66349: PUSH
66350: LD_INT 4
66352: PLUS
66353: PUSH
66354: LD_VAR 0 2
66358: PUSH
66359: LD_INT 4
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: LD_VAR 0 1
66371: PUSH
66372: LD_VAR 0 2
66376: PUSH
66377: LD_INT 4
66379: PLUS
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: PUSH
66389: LD_VAR 0 1
66393: PUSH
66394: LD_INT 3
66396: MINUS
66397: PUSH
66398: LD_VAR 0 2
66402: PUSH
66403: LD_INT 1
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_INT 4
66418: MINUS
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: LD_INT 4
66427: MINUS
66428: PUSH
66429: LD_INT 2
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// end ; 3 :
66444: GO 66866
66446: LD_INT 3
66448: DOUBLE
66449: EQUAL
66450: IFTRUE 66454
66452: GO 66587
66454: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66455: LD_ADDR_VAR 0 5
66459: PUSH
66460: LD_VAR 0 1
66464: PUSH
66465: LD_INT 3
66467: PLUS
66468: PUSH
66469: LD_VAR 0 2
66473: PUSH
66474: LD_INT 4
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: PUSH
66482: LD_VAR 0 1
66486: PUSH
66487: LD_INT 4
66489: PLUS
66490: PUSH
66491: LD_VAR 0 2
66495: PUSH
66496: LD_INT 4
66498: PLUS
66499: PUSH
66500: LD_INT 5
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: PUSH
66508: LD_VAR 0 1
66512: PUSH
66513: LD_INT 4
66515: MINUS
66516: PUSH
66517: LD_VAR 0 2
66521: PUSH
66522: LD_INT 1
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: LIST
66529: PUSH
66530: LD_VAR 0 1
66534: PUSH
66535: LD_VAR 0 2
66539: PUSH
66540: LD_INT 4
66542: MINUS
66543: PUSH
66544: LD_INT 3
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: PUSH
66552: LD_VAR 0 1
66556: PUSH
66557: LD_INT 3
66559: MINUS
66560: PUSH
66561: LD_VAR 0 2
66565: PUSH
66566: LD_INT 3
66568: MINUS
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: ST_TO_ADDR
// end ; 4 :
66585: GO 66866
66587: LD_INT 4
66589: DOUBLE
66590: EQUAL
66591: IFTRUE 66595
66593: GO 66728
66595: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66596: LD_ADDR_VAR 0 5
66600: PUSH
66601: LD_VAR 0 1
66605: PUSH
66606: LD_VAR 0 2
66610: PUSH
66611: LD_INT 4
66613: PLUS
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: LIST
66622: PUSH
66623: LD_VAR 0 1
66627: PUSH
66628: LD_INT 3
66630: PLUS
66631: PUSH
66632: LD_VAR 0 2
66636: PUSH
66637: LD_INT 3
66639: PLUS
66640: PUSH
66641: LD_INT 5
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: PUSH
66649: LD_VAR 0 1
66653: PUSH
66654: LD_INT 4
66656: PLUS
66657: PUSH
66658: LD_VAR 0 2
66662: PUSH
66663: LD_INT 4
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: LIST
66670: PUSH
66671: LD_VAR 0 1
66675: PUSH
66676: LD_VAR 0 2
66680: PUSH
66681: LD_INT 3
66683: MINUS
66684: PUSH
66685: LD_INT 3
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: PUSH
66693: LD_VAR 0 1
66697: PUSH
66698: LD_INT 4
66700: MINUS
66701: PUSH
66702: LD_VAR 0 2
66706: PUSH
66707: LD_INT 4
66709: MINUS
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: ST_TO_ADDR
// end ; 5 :
66726: GO 66866
66728: LD_INT 5
66730: DOUBLE
66731: EQUAL
66732: IFTRUE 66736
66734: GO 66865
66736: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66737: LD_ADDR_VAR 0 5
66741: PUSH
66742: LD_VAR 0 1
66746: PUSH
66747: LD_INT 4
66749: MINUS
66750: PUSH
66751: LD_VAR 0 2
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: PUSH
66764: LD_VAR 0 1
66768: PUSH
66769: LD_VAR 0 2
66773: PUSH
66774: LD_INT 4
66776: MINUS
66777: PUSH
66778: LD_INT 3
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: LIST
66785: PUSH
66786: LD_VAR 0 1
66790: PUSH
66791: LD_INT 4
66793: PLUS
66794: PUSH
66795: LD_VAR 0 2
66799: PUSH
66800: LD_INT 4
66802: PLUS
66803: PUSH
66804: LD_INT 5
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: PUSH
66812: LD_VAR 0 1
66816: PUSH
66817: LD_INT 3
66819: PLUS
66820: PUSH
66821: LD_VAR 0 2
66825: PUSH
66826: LD_INT 4
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: PUSH
66834: LD_VAR 0 1
66838: PUSH
66839: LD_VAR 0 2
66843: PUSH
66844: LD_INT 3
66846: PLUS
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: ST_TO_ADDR
// end ; end ;
66863: GO 66866
66865: POP
// result := list ;
66866: LD_ADDR_VAR 0 4
66870: PUSH
66871: LD_VAR 0 5
66875: ST_TO_ADDR
// end ;
66876: LD_VAR 0 4
66880: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66881: LD_INT 0
66883: PPUSH
66884: PPUSH
66885: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66886: LD_VAR 0 1
66890: NOT
66891: IFTRUE 66919
66893: PUSH
66894: LD_VAR 0 2
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: LD_INT 2
66904: PUSH
66905: LD_INT 3
66907: PUSH
66908: LD_INT 4
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: IN
66917: NOT
66918: OR
66919: IFFALSE 66923
// exit ;
66921: GO 67006
// tmp := [ ] ;
66923: LD_ADDR_VAR 0 5
66927: PUSH
66928: EMPTY
66929: ST_TO_ADDR
// for i in units do
66930: LD_ADDR_VAR 0 4
66934: PUSH
66935: LD_VAR 0 1
66939: PUSH
66940: FOR_IN
66941: IFFALSE 66975
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66943: LD_ADDR_VAR 0 5
66947: PUSH
66948: LD_VAR 0 5
66952: PPUSH
66953: LD_VAR 0 4
66957: PPUSH
66958: LD_VAR 0 2
66962: PPUSH
66963: CALL_OW 259
66967: PPUSH
66968: CALL 68401 0 2
66972: ST_TO_ADDR
66973: GO 66940
66975: POP
66976: POP
// if not tmp then
66977: LD_VAR 0 5
66981: NOT
66982: IFFALSE 66986
// exit ;
66984: GO 67006
// result := SortListByListDesc ( units , tmp ) ;
66986: LD_ADDR_VAR 0 3
66990: PUSH
66991: LD_VAR 0 1
66995: PPUSH
66996: LD_VAR 0 5
67000: PPUSH
67001: CALL_OW 77
67005: ST_TO_ADDR
// end ;
67006: LD_VAR 0 3
67010: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67011: LD_INT 0
67013: PPUSH
67014: PPUSH
67015: PPUSH
// result := false ;
67016: LD_ADDR_VAR 0 3
67020: PUSH
67021: LD_INT 0
67023: ST_TO_ADDR
// if not building then
67024: LD_VAR 0 2
67028: NOT
67029: IFFALSE 67033
// exit ;
67031: GO 67177
// x := GetX ( building ) ;
67033: LD_ADDR_VAR 0 4
67037: PUSH
67038: LD_VAR 0 2
67042: PPUSH
67043: CALL_OW 250
67047: ST_TO_ADDR
// y := GetY ( building ) ;
67048: LD_ADDR_VAR 0 5
67052: PUSH
67053: LD_VAR 0 2
67057: PPUSH
67058: CALL_OW 251
67062: ST_TO_ADDR
// if not x or not y then
67063: LD_VAR 0 4
67067: NOT
67068: IFTRUE 67077
67070: PUSH
67071: LD_VAR 0 5
67075: NOT
67076: OR
67077: IFFALSE 67081
// exit ;
67079: GO 67177
// if GetTaskList ( unit ) then
67081: LD_VAR 0 1
67085: PPUSH
67086: CALL_OW 437
67090: IFFALSE 67177
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67092: LD_STRING e
67094: PUSH
67095: LD_VAR 0 1
67099: PPUSH
67100: CALL_OW 437
67104: PUSH
67105: LD_INT 1
67107: ARRAY
67108: PUSH
67109: LD_INT 1
67111: ARRAY
67112: EQUAL
67113: IFFALSE 67140
67115: PUSH
67116: LD_VAR 0 4
67120: PUSH
67121: LD_VAR 0 1
67125: PPUSH
67126: CALL_OW 437
67130: PUSH
67131: LD_INT 1
67133: ARRAY
67134: PUSH
67135: LD_INT 2
67137: ARRAY
67138: EQUAL
67139: AND
67140: IFFALSE 67167
67142: PUSH
67143: LD_VAR 0 5
67147: PUSH
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL_OW 437
67157: PUSH
67158: LD_INT 1
67160: ARRAY
67161: PUSH
67162: LD_INT 3
67164: ARRAY
67165: EQUAL
67166: AND
67167: IFFALSE 67177
// result := true end ;
67169: LD_ADDR_VAR 0 3
67173: PUSH
67174: LD_INT 1
67176: ST_TO_ADDR
// end ;
67177: LD_VAR 0 3
67181: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67182: LD_INT 0
67184: PPUSH
// result := false ;
67185: LD_ADDR_VAR 0 4
67189: PUSH
67190: LD_INT 0
67192: ST_TO_ADDR
// if GetTaskList ( unit ) then
67193: LD_VAR 0 1
67197: PPUSH
67198: CALL_OW 437
67202: IFFALSE 67289
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67204: LD_STRING M
67206: PUSH
67207: LD_VAR 0 1
67211: PPUSH
67212: CALL_OW 437
67216: PUSH
67217: LD_INT 1
67219: ARRAY
67220: PUSH
67221: LD_INT 1
67223: ARRAY
67224: EQUAL
67225: IFFALSE 67252
67227: PUSH
67228: LD_VAR 0 2
67232: PUSH
67233: LD_VAR 0 1
67237: PPUSH
67238: CALL_OW 437
67242: PUSH
67243: LD_INT 1
67245: ARRAY
67246: PUSH
67247: LD_INT 2
67249: ARRAY
67250: EQUAL
67251: AND
67252: IFFALSE 67279
67254: PUSH
67255: LD_VAR 0 3
67259: PUSH
67260: LD_VAR 0 1
67264: PPUSH
67265: CALL_OW 437
67269: PUSH
67270: LD_INT 1
67272: ARRAY
67273: PUSH
67274: LD_INT 3
67276: ARRAY
67277: EQUAL
67278: AND
67279: IFFALSE 67289
// result := true ;
67281: LD_ADDR_VAR 0 4
67285: PUSH
67286: LD_INT 1
67288: ST_TO_ADDR
// end ; end ;
67289: LD_VAR 0 4
67293: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67294: LD_INT 0
67296: PPUSH
67297: PPUSH
67298: PPUSH
67299: PPUSH
// if not unit or not area then
67300: LD_VAR 0 1
67304: NOT
67305: IFTRUE 67314
67307: PUSH
67308: LD_VAR 0 2
67312: NOT
67313: OR
67314: IFFALSE 67318
// exit ;
67316: GO 67494
// tmp := AreaToList ( area , i ) ;
67318: LD_ADDR_VAR 0 6
67322: PUSH
67323: LD_VAR 0 2
67327: PPUSH
67328: LD_VAR 0 5
67332: PPUSH
67333: CALL_OW 517
67337: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67338: LD_ADDR_VAR 0 5
67342: PUSH
67343: DOUBLE
67344: LD_INT 1
67346: DEC
67347: ST_TO_ADDR
67348: LD_VAR 0 6
67352: PUSH
67353: LD_INT 1
67355: ARRAY
67356: PUSH
67357: FOR_TO
67358: IFFALSE 67492
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67360: LD_ADDR_VAR 0 7
67364: PUSH
67365: LD_VAR 0 6
67369: PUSH
67370: LD_INT 1
67372: ARRAY
67373: PUSH
67374: LD_VAR 0 5
67378: ARRAY
67379: PUSH
67380: LD_VAR 0 6
67384: PUSH
67385: LD_INT 2
67387: ARRAY
67388: PUSH
67389: LD_VAR 0 5
67393: ARRAY
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67399: LD_INT 92
67401: PUSH
67402: LD_VAR 0 7
67406: PUSH
67407: LD_INT 1
67409: ARRAY
67410: PUSH
67411: LD_VAR 0 7
67415: PUSH
67416: LD_INT 2
67418: ARRAY
67419: PUSH
67420: LD_INT 2
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: PPUSH
67429: CALL_OW 69
67433: PUSH
67434: LD_INT 0
67436: EQUAL
67437: IFFALSE 67490
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67439: LD_VAR 0 1
67443: PPUSH
67444: LD_VAR 0 7
67448: PUSH
67449: LD_INT 1
67451: ARRAY
67452: PPUSH
67453: LD_VAR 0 7
67457: PUSH
67458: LD_INT 2
67460: ARRAY
67461: PPUSH
67462: LD_VAR 0 3
67466: PPUSH
67467: CALL_OW 48
// result := IsPlaced ( unit ) ;
67471: LD_ADDR_VAR 0 4
67475: PUSH
67476: LD_VAR 0 1
67480: PPUSH
67481: CALL_OW 305
67485: ST_TO_ADDR
// exit ;
67486: POP
67487: POP
67488: GO 67494
// end ; end ;
67490: GO 67357
67492: POP
67493: POP
// end ;
67494: LD_VAR 0 4
67498: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67499: LD_INT 0
67501: PPUSH
67502: PPUSH
67503: PPUSH
// if not side or side > 8 then
67504: LD_VAR 0 1
67508: NOT
67509: IFTRUE 67521
67511: PUSH
67512: LD_VAR 0 1
67516: PUSH
67517: LD_INT 8
67519: GREATER
67520: OR
67521: IFFALSE 67525
// exit ;
67523: GO 67712
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67525: LD_ADDR_VAR 0 4
67529: PUSH
67530: LD_INT 22
67532: PUSH
67533: LD_VAR 0 1
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 21
67544: PUSH
67545: LD_INT 3
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PPUSH
67556: CALL_OW 69
67560: ST_TO_ADDR
// if not tmp then
67561: LD_VAR 0 4
67565: NOT
67566: IFFALSE 67570
// exit ;
67568: GO 67712
// enable_addtolog := true ;
67570: LD_ADDR_OWVAR 81
67574: PUSH
67575: LD_INT 1
67577: ST_TO_ADDR
// AddToLog ( [ ) ;
67578: LD_STRING [
67580: PPUSH
67581: CALL_OW 561
// for i in tmp do
67585: LD_ADDR_VAR 0 3
67589: PUSH
67590: LD_VAR 0 4
67594: PUSH
67595: FOR_IN
67596: IFFALSE 67703
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67598: LD_STRING [
67600: PUSH
67601: LD_VAR 0 3
67605: PPUSH
67606: CALL_OW 266
67610: STR
67611: PUSH
67612: LD_STRING , 
67614: STR
67615: PUSH
67616: LD_VAR 0 3
67620: PPUSH
67621: CALL_OW 250
67625: STR
67626: PUSH
67627: LD_STRING , 
67629: STR
67630: PUSH
67631: LD_VAR 0 3
67635: PPUSH
67636: CALL_OW 251
67640: STR
67641: PUSH
67642: LD_STRING , 
67644: STR
67645: PUSH
67646: LD_VAR 0 3
67650: PPUSH
67651: CALL_OW 254
67655: STR
67656: PUSH
67657: LD_STRING , 
67659: STR
67660: PUSH
67661: LD_VAR 0 3
67665: PPUSH
67666: LD_INT 1
67668: PPUSH
67669: CALL_OW 268
67673: STR
67674: PUSH
67675: LD_STRING , 
67677: STR
67678: PUSH
67679: LD_VAR 0 3
67683: PPUSH
67684: LD_INT 2
67686: PPUSH
67687: CALL_OW 268
67691: STR
67692: PUSH
67693: LD_STRING ],
67695: STR
67696: PPUSH
67697: CALL_OW 561
// end ;
67701: GO 67595
67703: POP
67704: POP
// AddToLog ( ]; ) ;
67705: LD_STRING ];
67707: PPUSH
67708: CALL_OW 561
// end ;
67712: LD_VAR 0 2
67716: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67717: LD_INT 0
67719: PPUSH
67720: PPUSH
67721: PPUSH
67722: PPUSH
67723: PPUSH
// if not area or not rate or not max then
67724: LD_VAR 0 1
67728: NOT
67729: IFTRUE 67738
67731: PUSH
67732: LD_VAR 0 2
67736: NOT
67737: OR
67738: IFTRUE 67747
67740: PUSH
67741: LD_VAR 0 4
67745: NOT
67746: OR
67747: IFFALSE 67751
// exit ;
67749: GO 67940
// while 1 do
67751: LD_INT 1
67753: IFFALSE 67940
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67755: LD_ADDR_VAR 0 9
67759: PUSH
67760: LD_VAR 0 1
67764: PPUSH
67765: LD_INT 1
67767: PPUSH
67768: CALL_OW 287
67772: PUSH
67773: LD_INT 10
67775: MUL
67776: ST_TO_ADDR
// r := rate / 10 ;
67777: LD_ADDR_VAR 0 7
67781: PUSH
67782: LD_VAR 0 2
67786: PUSH
67787: LD_INT 10
67789: DIVREAL
67790: ST_TO_ADDR
// time := 1 1$00 ;
67791: LD_ADDR_VAR 0 8
67795: PUSH
67796: LD_INT 2100
67798: ST_TO_ADDR
// if amount < min then
67799: LD_VAR 0 9
67803: PUSH
67804: LD_VAR 0 3
67808: LESS
67809: IFFALSE 67827
// r := r * 2 else
67811: LD_ADDR_VAR 0 7
67815: PUSH
67816: LD_VAR 0 7
67820: PUSH
67821: LD_INT 2
67823: MUL
67824: ST_TO_ADDR
67825: GO 67853
// if amount > max then
67827: LD_VAR 0 9
67831: PUSH
67832: LD_VAR 0 4
67836: GREATER
67837: IFFALSE 67853
// r := r / 2 ;
67839: LD_ADDR_VAR 0 7
67843: PUSH
67844: LD_VAR 0 7
67848: PUSH
67849: LD_INT 2
67851: DIVREAL
67852: ST_TO_ADDR
// time := time / r ;
67853: LD_ADDR_VAR 0 8
67857: PUSH
67858: LD_VAR 0 8
67862: PUSH
67863: LD_VAR 0 7
67867: DIVREAL
67868: ST_TO_ADDR
// if time < 0 then
67869: LD_VAR 0 8
67873: PUSH
67874: LD_INT 0
67876: LESS
67877: IFFALSE 67894
// time := time * - 1 ;
67879: LD_ADDR_VAR 0 8
67883: PUSH
67884: LD_VAR 0 8
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: MUL
67893: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67894: LD_VAR 0 8
67898: PUSH
67899: LD_INT 35
67901: PPUSH
67902: LD_INT 875
67904: PPUSH
67905: CALL_OW 12
67909: PLUS
67910: PPUSH
67911: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67915: LD_INT 1
67917: PPUSH
67918: LD_INT 5
67920: PPUSH
67921: CALL_OW 12
67925: PPUSH
67926: LD_VAR 0 1
67930: PPUSH
67931: LD_INT 1
67933: PPUSH
67934: CALL_OW 55
// end ;
67938: GO 67751
// end ;
67940: LD_VAR 0 5
67944: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67945: LD_INT 0
67947: PPUSH
67948: PPUSH
67949: PPUSH
67950: PPUSH
67951: PPUSH
67952: PPUSH
67953: PPUSH
67954: PPUSH
// if not turrets or not factories then
67955: LD_VAR 0 1
67959: NOT
67960: IFTRUE 67969
67962: PUSH
67963: LD_VAR 0 2
67967: NOT
67968: OR
67969: IFFALSE 67973
// exit ;
67971: GO 68280
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67973: LD_ADDR_VAR 0 10
67977: PUSH
67978: LD_INT 5
67980: PUSH
67981: LD_INT 6
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 2
67990: PUSH
67991: LD_INT 4
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 3
68000: PUSH
68001: LD_INT 5
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 24
68015: PUSH
68016: LD_INT 25
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 23
68025: PUSH
68026: LD_INT 27
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 42
68039: PUSH
68040: LD_INT 43
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 44
68049: PUSH
68050: LD_INT 46
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 45
68059: PUSH
68060: LD_INT 47
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: LIST
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: LIST
68076: ST_TO_ADDR
// result := [ ] ;
68077: LD_ADDR_VAR 0 3
68081: PUSH
68082: EMPTY
68083: ST_TO_ADDR
// for i in turrets do
68084: LD_ADDR_VAR 0 4
68088: PUSH
68089: LD_VAR 0 1
68093: PUSH
68094: FOR_IN
68095: IFFALSE 68278
// begin nat := GetNation ( i ) ;
68097: LD_ADDR_VAR 0 7
68101: PUSH
68102: LD_VAR 0 4
68106: PPUSH
68107: CALL_OW 248
68111: ST_TO_ADDR
// weapon := 0 ;
68112: LD_ADDR_VAR 0 8
68116: PUSH
68117: LD_INT 0
68119: ST_TO_ADDR
// if not nat then
68120: LD_VAR 0 7
68124: NOT
68125: IFFALSE 68129
// continue ;
68127: GO 68094
// for j in list [ nat ] do
68129: LD_ADDR_VAR 0 5
68133: PUSH
68134: LD_VAR 0 10
68138: PUSH
68139: LD_VAR 0 7
68143: ARRAY
68144: PUSH
68145: FOR_IN
68146: IFFALSE 68187
// if GetBWeapon ( i ) = j [ 1 ] then
68148: LD_VAR 0 4
68152: PPUSH
68153: CALL_OW 269
68157: PUSH
68158: LD_VAR 0 5
68162: PUSH
68163: LD_INT 1
68165: ARRAY
68166: EQUAL
68167: IFFALSE 68185
// begin weapon := j [ 2 ] ;
68169: LD_ADDR_VAR 0 8
68173: PUSH
68174: LD_VAR 0 5
68178: PUSH
68179: LD_INT 2
68181: ARRAY
68182: ST_TO_ADDR
// break ;
68183: GO 68187
// end ;
68185: GO 68145
68187: POP
68188: POP
// if not weapon then
68189: LD_VAR 0 8
68193: NOT
68194: IFFALSE 68198
// continue ;
68196: GO 68094
// for k in factories do
68198: LD_ADDR_VAR 0 6
68202: PUSH
68203: LD_VAR 0 2
68207: PUSH
68208: FOR_IN
68209: IFFALSE 68274
// begin weapons := AvailableWeaponList ( k ) ;
68211: LD_ADDR_VAR 0 9
68215: PUSH
68216: LD_VAR 0 6
68220: PPUSH
68221: CALL_OW 478
68225: ST_TO_ADDR
// if not weapons then
68226: LD_VAR 0 9
68230: NOT
68231: IFFALSE 68235
// continue ;
68233: GO 68208
// if weapon in weapons then
68235: LD_VAR 0 8
68239: PUSH
68240: LD_VAR 0 9
68244: IN
68245: IFFALSE 68272
// begin result := [ i , weapon ] ;
68247: LD_ADDR_VAR 0 3
68251: PUSH
68252: LD_VAR 0 4
68256: PUSH
68257: LD_VAR 0 8
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: ST_TO_ADDR
// exit ;
68266: POP
68267: POP
68268: POP
68269: POP
68270: GO 68280
// end ; end ;
68272: GO 68208
68274: POP
68275: POP
// end ;
68276: GO 68094
68278: POP
68279: POP
// end ;
68280: LD_VAR 0 3
68284: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68285: LD_INT 0
68287: PPUSH
// if not side or side > 8 then
68288: LD_VAR 0 3
68292: NOT
68293: IFTRUE 68305
68295: PUSH
68296: LD_VAR 0 3
68300: PUSH
68301: LD_INT 8
68303: GREATER
68304: OR
68305: IFFALSE 68309
// exit ;
68307: GO 68368
// if not range then
68309: LD_VAR 0 4
68313: NOT
68314: IFFALSE 68325
// range := - 12 ;
68316: LD_ADDR_VAR 0 4
68320: PUSH
68321: LD_INT 12
68323: NEG
68324: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68325: LD_VAR 0 1
68329: PPUSH
68330: LD_VAR 0 2
68334: PPUSH
68335: LD_VAR 0 3
68339: PPUSH
68340: LD_VAR 0 4
68344: PPUSH
68345: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68349: LD_VAR 0 1
68353: PPUSH
68354: LD_VAR 0 2
68358: PPUSH
68359: LD_VAR 0 3
68363: PPUSH
68364: CALL_OW 331
// end ;
68368: LD_VAR 0 5
68372: RET
// export function Video ( mode ) ; begin
68373: LD_INT 0
68375: PPUSH
// ingame_video = mode ;
68376: LD_ADDR_OWVAR 52
68380: PUSH
68381: LD_VAR 0 1
68385: ST_TO_ADDR
// interface_hidden = mode ;
68386: LD_ADDR_OWVAR 54
68390: PUSH
68391: LD_VAR 0 1
68395: ST_TO_ADDR
// end ;
68396: LD_VAR 0 2
68400: RET
// export function Join ( array , element ) ; begin
68401: LD_INT 0
68403: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68404: LD_ADDR_VAR 0 3
68408: PUSH
68409: LD_VAR 0 1
68413: PPUSH
68414: LD_VAR 0 1
68418: PUSH
68419: LD_INT 1
68421: PLUS
68422: PPUSH
68423: LD_VAR 0 2
68427: PPUSH
68428: CALL_OW 1
68432: ST_TO_ADDR
// end ;
68433: LD_VAR 0 3
68437: RET
// export function JoinUnion ( array , element ) ; begin
68438: LD_INT 0
68440: PPUSH
// result := array union element ;
68441: LD_ADDR_VAR 0 3
68445: PUSH
68446: LD_VAR 0 1
68450: PUSH
68451: LD_VAR 0 2
68455: UNION
68456: ST_TO_ADDR
// end ;
68457: LD_VAR 0 3
68461: RET
// export function GetBehemoths ( side ) ; begin
68462: LD_INT 0
68464: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68465: LD_ADDR_VAR 0 2
68469: PUSH
68470: LD_INT 22
68472: PUSH
68473: LD_VAR 0 1
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 31
68484: PUSH
68485: LD_INT 25
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PPUSH
68496: CALL_OW 69
68500: ST_TO_ADDR
// end ;
68501: LD_VAR 0 2
68505: RET
// export function Shuffle ( array ) ; var i , index ; begin
68506: LD_INT 0
68508: PPUSH
68509: PPUSH
68510: PPUSH
// result := [ ] ;
68511: LD_ADDR_VAR 0 2
68515: PUSH
68516: EMPTY
68517: ST_TO_ADDR
// if not array then
68518: LD_VAR 0 1
68522: NOT
68523: IFFALSE 68527
// exit ;
68525: GO 68626
// Randomize ;
68527: CALL_OW 10
// for i = array downto 1 do
68531: LD_ADDR_VAR 0 3
68535: PUSH
68536: DOUBLE
68537: LD_VAR 0 1
68541: INC
68542: ST_TO_ADDR
68543: LD_INT 1
68545: PUSH
68546: FOR_DOWNTO
68547: IFFALSE 68624
// begin index := rand ( 1 , array ) ;
68549: LD_ADDR_VAR 0 4
68553: PUSH
68554: LD_INT 1
68556: PPUSH
68557: LD_VAR 0 1
68561: PPUSH
68562: CALL_OW 12
68566: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68567: LD_ADDR_VAR 0 2
68571: PUSH
68572: LD_VAR 0 2
68576: PPUSH
68577: LD_VAR 0 2
68581: PUSH
68582: LD_INT 1
68584: PLUS
68585: PPUSH
68586: LD_VAR 0 1
68590: PUSH
68591: LD_VAR 0 4
68595: ARRAY
68596: PPUSH
68597: CALL_OW 2
68601: ST_TO_ADDR
// array := Delete ( array , index ) ;
68602: LD_ADDR_VAR 0 1
68606: PUSH
68607: LD_VAR 0 1
68611: PPUSH
68612: LD_VAR 0 4
68616: PPUSH
68617: CALL_OW 3
68621: ST_TO_ADDR
// end ;
68622: GO 68546
68624: POP
68625: POP
// end ;
68626: LD_VAR 0 2
68630: RET
// export function GetBaseMaterials ( base ) ; begin
68631: LD_INT 0
68633: PPUSH
// result := [ 0 , 0 , 0 ] ;
68634: LD_ADDR_VAR 0 2
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: LD_INT 0
68644: PUSH
68645: LD_INT 0
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: LIST
68652: ST_TO_ADDR
// if not base then
68653: LD_VAR 0 1
68657: NOT
68658: IFFALSE 68662
// exit ;
68660: GO 68711
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68662: LD_ADDR_VAR 0 2
68666: PUSH
68667: LD_VAR 0 1
68671: PPUSH
68672: LD_INT 1
68674: PPUSH
68675: CALL_OW 275
68679: PUSH
68680: LD_VAR 0 1
68684: PPUSH
68685: LD_INT 2
68687: PPUSH
68688: CALL_OW 275
68692: PUSH
68693: LD_VAR 0 1
68697: PPUSH
68698: LD_INT 3
68700: PPUSH
68701: CALL_OW 275
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: LIST
68710: ST_TO_ADDR
// end ;
68711: LD_VAR 0 2
68715: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68716: LD_INT 0
68718: PPUSH
68719: PPUSH
// result := array ;
68720: LD_ADDR_VAR 0 3
68724: PUSH
68725: LD_VAR 0 1
68729: ST_TO_ADDR
// if size >= result then
68730: LD_VAR 0 2
68734: PUSH
68735: LD_VAR 0 3
68739: GREATEREQUAL
68740: IFFALSE 68744
// exit ;
68742: GO 68794
// if size then
68744: LD_VAR 0 2
68748: IFFALSE 68794
// for i := array downto size do
68750: LD_ADDR_VAR 0 4
68754: PUSH
68755: DOUBLE
68756: LD_VAR 0 1
68760: INC
68761: ST_TO_ADDR
68762: LD_VAR 0 2
68766: PUSH
68767: FOR_DOWNTO
68768: IFFALSE 68792
// result := Delete ( result , result ) ;
68770: LD_ADDR_VAR 0 3
68774: PUSH
68775: LD_VAR 0 3
68779: PPUSH
68780: LD_VAR 0 3
68784: PPUSH
68785: CALL_OW 3
68789: ST_TO_ADDR
68790: GO 68767
68792: POP
68793: POP
// end ;
68794: LD_VAR 0 3
68798: RET
// export function ComExit ( unit ) ; var tmp ; begin
68799: LD_INT 0
68801: PPUSH
68802: PPUSH
// if not IsInUnit ( unit ) then
68803: LD_VAR 0 1
68807: PPUSH
68808: CALL_OW 310
68812: NOT
68813: IFFALSE 68817
// exit ;
68815: GO 68877
// tmp := IsInUnit ( unit ) ;
68817: LD_ADDR_VAR 0 3
68821: PUSH
68822: LD_VAR 0 1
68826: PPUSH
68827: CALL_OW 310
68831: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68832: LD_VAR 0 3
68836: PPUSH
68837: CALL_OW 247
68841: PUSH
68842: LD_INT 2
68844: EQUAL
68845: IFFALSE 68858
// ComExitVehicle ( unit ) else
68847: LD_VAR 0 1
68851: PPUSH
68852: CALL_OW 121
68856: GO 68867
// ComExitBuilding ( unit ) ;
68858: LD_VAR 0 1
68862: PPUSH
68863: CALL_OW 122
// result := tmp ;
68867: LD_ADDR_VAR 0 2
68871: PUSH
68872: LD_VAR 0 3
68876: ST_TO_ADDR
// end ;
68877: LD_VAR 0 2
68881: RET
// export function ComExitAll ( units ) ; var i ; begin
68882: LD_INT 0
68884: PPUSH
68885: PPUSH
// if not units then
68886: LD_VAR 0 1
68890: NOT
68891: IFFALSE 68895
// exit ;
68893: GO 68921
// for i in units do
68895: LD_ADDR_VAR 0 3
68899: PUSH
68900: LD_VAR 0 1
68904: PUSH
68905: FOR_IN
68906: IFFALSE 68919
// ComExit ( i ) ;
68908: LD_VAR 0 3
68912: PPUSH
68913: CALL 68799 0 1
68917: GO 68905
68919: POP
68920: POP
// end ;
68921: LD_VAR 0 2
68925: RET
// export function ResetHc ; begin
68926: LD_INT 0
68928: PPUSH
// InitHc ;
68929: CALL_OW 19
// hc_importance := 0 ;
68933: LD_ADDR_OWVAR 32
68937: PUSH
68938: LD_INT 0
68940: ST_TO_ADDR
// end ;
68941: LD_VAR 0 1
68945: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68946: LD_INT 0
68948: PPUSH
68949: PPUSH
68950: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68951: LD_ADDR_VAR 0 6
68955: PUSH
68956: LD_VAR 0 1
68960: PUSH
68961: LD_VAR 0 3
68965: PLUS
68966: PUSH
68967: LD_INT 2
68969: DIV
68970: ST_TO_ADDR
// if _x < 0 then
68971: LD_VAR 0 6
68975: PUSH
68976: LD_INT 0
68978: LESS
68979: IFFALSE 68996
// _x := _x * - 1 ;
68981: LD_ADDR_VAR 0 6
68985: PUSH
68986: LD_VAR 0 6
68990: PUSH
68991: LD_INT 1
68993: NEG
68994: MUL
68995: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68996: LD_ADDR_VAR 0 7
69000: PUSH
69001: LD_VAR 0 2
69005: PUSH
69006: LD_VAR 0 4
69010: PLUS
69011: PUSH
69012: LD_INT 2
69014: DIV
69015: ST_TO_ADDR
// if _y < 0 then
69016: LD_VAR 0 7
69020: PUSH
69021: LD_INT 0
69023: LESS
69024: IFFALSE 69041
// _y := _y * - 1 ;
69026: LD_ADDR_VAR 0 7
69030: PUSH
69031: LD_VAR 0 7
69035: PUSH
69036: LD_INT 1
69038: NEG
69039: MUL
69040: ST_TO_ADDR
// result := [ _x , _y ] ;
69041: LD_ADDR_VAR 0 5
69045: PUSH
69046: LD_VAR 0 6
69050: PUSH
69051: LD_VAR 0 7
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: ST_TO_ADDR
// end ;
69060: LD_VAR 0 5
69064: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69065: LD_INT 0
69067: PPUSH
69068: PPUSH
69069: PPUSH
69070: PPUSH
// task := GetTaskList ( unit ) ;
69071: LD_ADDR_VAR 0 7
69075: PUSH
69076: LD_VAR 0 1
69080: PPUSH
69081: CALL_OW 437
69085: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69086: LD_VAR 0 7
69090: NOT
69091: IFFALSE 69110
69093: PUSH
69094: LD_VAR 0 1
69098: PPUSH
69099: LD_VAR 0 2
69103: PPUSH
69104: CALL_OW 308
69108: NOT
69109: AND
69110: IFFALSE 69114
// exit ;
69112: GO 69232
// if IsInArea ( unit , area ) then
69114: LD_VAR 0 1
69118: PPUSH
69119: LD_VAR 0 2
69123: PPUSH
69124: CALL_OW 308
69128: IFFALSE 69146
// begin ComMoveToArea ( unit , goAway ) ;
69130: LD_VAR 0 1
69134: PPUSH
69135: LD_VAR 0 3
69139: PPUSH
69140: CALL_OW 113
// exit ;
69144: GO 69232
// end ; if task [ 1 ] [ 1 ] <> M then
69146: LD_VAR 0 7
69150: PUSH
69151: LD_INT 1
69153: ARRAY
69154: PUSH
69155: LD_INT 1
69157: ARRAY
69158: PUSH
69159: LD_STRING M
69161: NONEQUAL
69162: IFFALSE 69166
// exit ;
69164: GO 69232
// x := task [ 1 ] [ 2 ] ;
69166: LD_ADDR_VAR 0 5
69170: PUSH
69171: LD_VAR 0 7
69175: PUSH
69176: LD_INT 1
69178: ARRAY
69179: PUSH
69180: LD_INT 2
69182: ARRAY
69183: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69184: LD_ADDR_VAR 0 6
69188: PUSH
69189: LD_VAR 0 7
69193: PUSH
69194: LD_INT 1
69196: ARRAY
69197: PUSH
69198: LD_INT 3
69200: ARRAY
69201: ST_TO_ADDR
// if InArea ( x , y , area ) then
69202: LD_VAR 0 5
69206: PPUSH
69207: LD_VAR 0 6
69211: PPUSH
69212: LD_VAR 0 2
69216: PPUSH
69217: CALL_OW 309
69221: IFFALSE 69232
// ComStop ( unit ) ;
69223: LD_VAR 0 1
69227: PPUSH
69228: CALL_OW 141
// end ;
69232: LD_VAR 0 4
69236: RET
// export function Abs ( value ) ; begin
69237: LD_INT 0
69239: PPUSH
// result := value ;
69240: LD_ADDR_VAR 0 2
69244: PUSH
69245: LD_VAR 0 1
69249: ST_TO_ADDR
// if value < 0 then
69250: LD_VAR 0 1
69254: PUSH
69255: LD_INT 0
69257: LESS
69258: IFFALSE 69275
// result := value * - 1 ;
69260: LD_ADDR_VAR 0 2
69264: PUSH
69265: LD_VAR 0 1
69269: PUSH
69270: LD_INT 1
69272: NEG
69273: MUL
69274: ST_TO_ADDR
// end ;
69275: LD_VAR 0 2
69279: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69280: LD_INT 0
69282: PPUSH
69283: PPUSH
69284: PPUSH
69285: PPUSH
69286: PPUSH
69287: PPUSH
69288: PPUSH
69289: PPUSH
// if not unit or not building then
69290: LD_VAR 0 1
69294: NOT
69295: IFTRUE 69304
69297: PUSH
69298: LD_VAR 0 2
69302: NOT
69303: OR
69304: IFFALSE 69308
// exit ;
69306: GO 69536
// x := GetX ( building ) ;
69308: LD_ADDR_VAR 0 4
69312: PUSH
69313: LD_VAR 0 2
69317: PPUSH
69318: CALL_OW 250
69322: ST_TO_ADDR
// y := GetY ( building ) ;
69323: LD_ADDR_VAR 0 6
69327: PUSH
69328: LD_VAR 0 2
69332: PPUSH
69333: CALL_OW 251
69337: ST_TO_ADDR
// d := GetDir ( building ) ;
69338: LD_ADDR_VAR 0 8
69342: PUSH
69343: LD_VAR 0 2
69347: PPUSH
69348: CALL_OW 254
69352: ST_TO_ADDR
// r := 4 ;
69353: LD_ADDR_VAR 0 9
69357: PUSH
69358: LD_INT 4
69360: ST_TO_ADDR
// for i := 1 to 5 do
69361: LD_ADDR_VAR 0 10
69365: PUSH
69366: DOUBLE
69367: LD_INT 1
69369: DEC
69370: ST_TO_ADDR
69371: LD_INT 5
69373: PUSH
69374: FOR_TO
69375: IFFALSE 69534
// begin _x := ShiftX ( x , d , r + i ) ;
69377: LD_ADDR_VAR 0 5
69381: PUSH
69382: LD_VAR 0 4
69386: PPUSH
69387: LD_VAR 0 8
69391: PPUSH
69392: LD_VAR 0 9
69396: PUSH
69397: LD_VAR 0 10
69401: PLUS
69402: PPUSH
69403: CALL_OW 272
69407: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69408: LD_ADDR_VAR 0 7
69412: PUSH
69413: LD_VAR 0 6
69417: PPUSH
69418: LD_VAR 0 8
69422: PPUSH
69423: LD_VAR 0 9
69427: PUSH
69428: LD_VAR 0 10
69432: PLUS
69433: PPUSH
69434: CALL_OW 273
69438: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69439: LD_VAR 0 5
69443: PPUSH
69444: LD_VAR 0 7
69448: PPUSH
69449: CALL_OW 488
69453: IFFALSE 69488
69455: PUSH
69456: LD_VAR 0 5
69460: PPUSH
69461: LD_VAR 0 7
69465: PPUSH
69466: CALL_OW 428
69470: PPUSH
69471: CALL_OW 247
69475: PUSH
69476: LD_INT 3
69478: PUSH
69479: LD_INT 2
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: IN
69486: NOT
69487: AND
69488: IFFALSE 69532
// begin ComMoveXY ( unit , _x , _y ) ;
69490: LD_VAR 0 1
69494: PPUSH
69495: LD_VAR 0 5
69499: PPUSH
69500: LD_VAR 0 7
69504: PPUSH
69505: CALL_OW 111
// result := [ _x , _y ] ;
69509: LD_ADDR_VAR 0 3
69513: PUSH
69514: LD_VAR 0 5
69518: PUSH
69519: LD_VAR 0 7
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: ST_TO_ADDR
// exit ;
69528: POP
69529: POP
69530: GO 69536
// end ; end ;
69532: GO 69374
69534: POP
69535: POP
// end ;
69536: LD_VAR 0 3
69540: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69541: LD_INT 0
69543: PPUSH
69544: PPUSH
69545: PPUSH
// result := 0 ;
69546: LD_ADDR_VAR 0 3
69550: PUSH
69551: LD_INT 0
69553: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69554: LD_VAR 0 1
69558: PUSH
69559: LD_INT 0
69561: LESS
69562: IFTRUE 69574
69564: PUSH
69565: LD_VAR 0 1
69569: PUSH
69570: LD_INT 8
69572: GREATER
69573: OR
69574: IFTRUE 69586
69576: PUSH
69577: LD_VAR 0 2
69581: PUSH
69582: LD_INT 0
69584: LESS
69585: OR
69586: IFTRUE 69598
69588: PUSH
69589: LD_VAR 0 2
69593: PUSH
69594: LD_INT 8
69596: GREATER
69597: OR
69598: IFFALSE 69602
// exit ;
69600: GO 69677
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69602: LD_ADDR_VAR 0 4
69606: PUSH
69607: LD_INT 22
69609: PUSH
69610: LD_VAR 0 2
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PPUSH
69619: CALL_OW 69
69623: PUSH
69624: FOR_IN
69625: IFFALSE 69675
// begin un := UnitShoot ( i ) ;
69627: LD_ADDR_VAR 0 5
69631: PUSH
69632: LD_VAR 0 4
69636: PPUSH
69637: CALL_OW 504
69641: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69642: LD_VAR 0 5
69646: PPUSH
69647: CALL_OW 255
69651: PUSH
69652: LD_VAR 0 1
69656: EQUAL
69657: IFFALSE 69673
// begin result := un ;
69659: LD_ADDR_VAR 0 3
69663: PUSH
69664: LD_VAR 0 5
69668: ST_TO_ADDR
// exit ;
69669: POP
69670: POP
69671: GO 69677
// end ; end ;
69673: GO 69624
69675: POP
69676: POP
// end ;
69677: LD_VAR 0 3
69681: RET
// export function GetCargoBay ( units ) ; begin
69682: LD_INT 0
69684: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69685: LD_ADDR_VAR 0 2
69689: PUSH
69690: LD_VAR 0 1
69694: PPUSH
69695: LD_INT 2
69697: PUSH
69698: LD_INT 34
69700: PUSH
69701: LD_INT 12
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 34
69710: PUSH
69711: LD_INT 51
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 34
69720: PUSH
69721: LD_INT 32
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 34
69730: PUSH
69731: LD_INT 89
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: PPUSH
69745: CALL_OW 72
69749: ST_TO_ADDR
// end ;
69750: LD_VAR 0 2
69754: RET
// export function Negate ( value ) ; begin
69755: LD_INT 0
69757: PPUSH
// result := not value ;
69758: LD_ADDR_VAR 0 2
69762: PUSH
69763: LD_VAR 0 1
69767: NOT
69768: ST_TO_ADDR
// end ;
69769: LD_VAR 0 2
69773: RET
// export function Inc ( value ) ; begin
69774: LD_INT 0
69776: PPUSH
// result := value + 1 ;
69777: LD_ADDR_VAR 0 2
69781: PUSH
69782: LD_VAR 0 1
69786: PUSH
69787: LD_INT 1
69789: PLUS
69790: ST_TO_ADDR
// end ;
69791: LD_VAR 0 2
69795: RET
// export function Dec ( value ) ; begin
69796: LD_INT 0
69798: PPUSH
// result := value - 1 ;
69799: LD_ADDR_VAR 0 2
69803: PUSH
69804: LD_VAR 0 1
69808: PUSH
69809: LD_INT 1
69811: MINUS
69812: ST_TO_ADDR
// end ;
69813: LD_VAR 0 2
69817: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69818: LD_INT 0
69820: PPUSH
69821: PPUSH
69822: PPUSH
69823: PPUSH
69824: PPUSH
69825: PPUSH
69826: PPUSH
69827: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69828: LD_VAR 0 1
69832: PPUSH
69833: LD_VAR 0 2
69837: PPUSH
69838: CALL_OW 488
69842: NOT
69843: IFTRUE 69862
69845: PUSH
69846: LD_VAR 0 3
69850: PPUSH
69851: LD_VAR 0 4
69855: PPUSH
69856: CALL_OW 488
69860: NOT
69861: OR
69862: IFFALSE 69875
// begin result := - 1 ;
69864: LD_ADDR_VAR 0 5
69868: PUSH
69869: LD_INT 1
69871: NEG
69872: ST_TO_ADDR
// exit ;
69873: GO 70110
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69875: LD_ADDR_VAR 0 12
69879: PUSH
69880: LD_VAR 0 1
69884: PPUSH
69885: LD_VAR 0 2
69889: PPUSH
69890: LD_VAR 0 3
69894: PPUSH
69895: LD_VAR 0 4
69899: PPUSH
69900: CALL 68946 0 4
69904: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69905: LD_ADDR_VAR 0 11
69909: PUSH
69910: LD_VAR 0 1
69914: PPUSH
69915: LD_VAR 0 2
69919: PPUSH
69920: LD_VAR 0 12
69924: PUSH
69925: LD_INT 1
69927: ARRAY
69928: PPUSH
69929: LD_VAR 0 12
69933: PUSH
69934: LD_INT 2
69936: ARRAY
69937: PPUSH
69938: CALL_OW 298
69942: ST_TO_ADDR
// distance := 9999 ;
69943: LD_ADDR_VAR 0 10
69947: PUSH
69948: LD_INT 9999
69950: ST_TO_ADDR
// for i := 0 to 5 do
69951: LD_ADDR_VAR 0 6
69955: PUSH
69956: DOUBLE
69957: LD_INT 0
69959: DEC
69960: ST_TO_ADDR
69961: LD_INT 5
69963: PUSH
69964: FOR_TO
69965: IFFALSE 70108
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69967: LD_ADDR_VAR 0 7
69971: PUSH
69972: LD_VAR 0 1
69976: PPUSH
69977: LD_VAR 0 6
69981: PPUSH
69982: LD_VAR 0 11
69986: PPUSH
69987: CALL_OW 272
69991: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69992: LD_ADDR_VAR 0 8
69996: PUSH
69997: LD_VAR 0 2
70001: PPUSH
70002: LD_VAR 0 6
70006: PPUSH
70007: LD_VAR 0 11
70011: PPUSH
70012: CALL_OW 273
70016: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70017: LD_VAR 0 7
70021: PPUSH
70022: LD_VAR 0 8
70026: PPUSH
70027: CALL_OW 488
70031: NOT
70032: IFFALSE 70036
// continue ;
70034: GO 69964
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70036: LD_ADDR_VAR 0 9
70040: PUSH
70041: LD_VAR 0 12
70045: PUSH
70046: LD_INT 1
70048: ARRAY
70049: PPUSH
70050: LD_VAR 0 12
70054: PUSH
70055: LD_INT 2
70057: ARRAY
70058: PPUSH
70059: LD_VAR 0 7
70063: PPUSH
70064: LD_VAR 0 8
70068: PPUSH
70069: CALL_OW 298
70073: ST_TO_ADDR
// if tmp < distance then
70074: LD_VAR 0 9
70078: PUSH
70079: LD_VAR 0 10
70083: LESS
70084: IFFALSE 70106
// begin result := i ;
70086: LD_ADDR_VAR 0 5
70090: PUSH
70091: LD_VAR 0 6
70095: ST_TO_ADDR
// distance := tmp ;
70096: LD_ADDR_VAR 0 10
70100: PUSH
70101: LD_VAR 0 9
70105: ST_TO_ADDR
// end ; end ;
70106: GO 69964
70108: POP
70109: POP
// end ;
70110: LD_VAR 0 5
70114: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70115: LD_INT 0
70117: PPUSH
70118: PPUSH
// if not driver or not IsInUnit ( driver ) then
70119: LD_VAR 0 1
70123: NOT
70124: IFTRUE 70138
70126: PUSH
70127: LD_VAR 0 1
70131: PPUSH
70132: CALL_OW 310
70136: NOT
70137: OR
70138: IFFALSE 70142
// exit ;
70140: GO 70232
// vehicle := IsInUnit ( driver ) ;
70142: LD_ADDR_VAR 0 3
70146: PUSH
70147: LD_VAR 0 1
70151: PPUSH
70152: CALL_OW 310
70156: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70157: LD_VAR 0 1
70161: PPUSH
70162: LD_STRING \
70164: PUSH
70165: LD_INT 0
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: LD_INT 0
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: PUSH
70192: LD_STRING E
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: LD_VAR 0 3
70205: PUSH
70206: LD_INT 0
70208: PUSH
70209: LD_INT 0
70211: PUSH
70212: LD_INT 0
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PPUSH
70228: CALL_OW 446
// end ;
70232: LD_VAR 0 2
70236: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70237: LD_INT 0
70239: PPUSH
70240: PPUSH
// if not driver or not IsInUnit ( driver ) then
70241: LD_VAR 0 1
70245: NOT
70246: IFTRUE 70260
70248: PUSH
70249: LD_VAR 0 1
70253: PPUSH
70254: CALL_OW 310
70258: NOT
70259: OR
70260: IFFALSE 70264
// exit ;
70262: GO 70354
// vehicle := IsInUnit ( driver ) ;
70264: LD_ADDR_VAR 0 3
70268: PUSH
70269: LD_VAR 0 1
70273: PPUSH
70274: CALL_OW 310
70278: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70279: LD_VAR 0 1
70283: PPUSH
70284: LD_STRING \
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: PUSH
70314: LD_STRING E
70316: PUSH
70317: LD_INT 0
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: LD_VAR 0 3
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PPUSH
70350: CALL_OW 447
// end ;
70354: LD_VAR 0 2
70358: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70359: LD_INT 0
70361: PPUSH
70362: PPUSH
70363: PPUSH
// tmp := [ ] ;
70364: LD_ADDR_VAR 0 5
70368: PUSH
70369: EMPTY
70370: ST_TO_ADDR
// for i in units do
70371: LD_ADDR_VAR 0 4
70375: PUSH
70376: LD_VAR 0 1
70380: PUSH
70381: FOR_IN
70382: IFFALSE 70420
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70384: LD_ADDR_VAR 0 5
70388: PUSH
70389: LD_VAR 0 5
70393: PPUSH
70394: LD_VAR 0 5
70398: PUSH
70399: LD_INT 1
70401: PLUS
70402: PPUSH
70403: LD_VAR 0 4
70407: PPUSH
70408: CALL_OW 256
70412: PPUSH
70413: CALL_OW 2
70417: ST_TO_ADDR
70418: GO 70381
70420: POP
70421: POP
// if not tmp then
70422: LD_VAR 0 5
70426: NOT
70427: IFFALSE 70431
// exit ;
70429: GO 70479
// if asc then
70431: LD_VAR 0 2
70435: IFFALSE 70459
// result := SortListByListAsc ( units , tmp ) else
70437: LD_ADDR_VAR 0 3
70441: PUSH
70442: LD_VAR 0 1
70446: PPUSH
70447: LD_VAR 0 5
70451: PPUSH
70452: CALL_OW 76
70456: ST_TO_ADDR
70457: GO 70479
// result := SortListByListDesc ( units , tmp ) ;
70459: LD_ADDR_VAR 0 3
70463: PUSH
70464: LD_VAR 0 1
70468: PPUSH
70469: LD_VAR 0 5
70473: PPUSH
70474: CALL_OW 77
70478: ST_TO_ADDR
// end ;
70479: LD_VAR 0 3
70483: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70484: LD_INT 0
70486: PPUSH
70487: PPUSH
// task := GetTaskList ( mech ) ;
70488: LD_ADDR_VAR 0 4
70492: PUSH
70493: LD_VAR 0 1
70497: PPUSH
70498: CALL_OW 437
70502: ST_TO_ADDR
// if not task then
70503: LD_VAR 0 4
70507: NOT
70508: IFFALSE 70512
// exit ;
70510: GO 70556
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70512: LD_ADDR_VAR 0 3
70516: PUSH
70517: LD_VAR 0 4
70521: PUSH
70522: LD_INT 1
70524: ARRAY
70525: PUSH
70526: LD_INT 1
70528: ARRAY
70529: PUSH
70530: LD_STRING r
70532: EQUAL
70533: IFFALSE 70555
70535: PUSH
70536: LD_VAR 0 4
70540: PUSH
70541: LD_INT 1
70543: ARRAY
70544: PUSH
70545: LD_INT 4
70547: ARRAY
70548: PUSH
70549: LD_VAR 0 2
70553: EQUAL
70554: AND
70555: ST_TO_ADDR
// end ;
70556: LD_VAR 0 3
70560: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70561: LD_INT 0
70563: PPUSH
// SetDir ( unit , d ) ;
70564: LD_VAR 0 1
70568: PPUSH
70569: LD_VAR 0 4
70573: PPUSH
70574: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70578: LD_ADDR_VAR 0 6
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: LD_VAR 0 2
70592: PPUSH
70593: LD_VAR 0 3
70597: PPUSH
70598: LD_VAR 0 5
70602: PPUSH
70603: CALL_OW 48
70607: ST_TO_ADDR
// end ;
70608: LD_VAR 0 6
70612: RET
// export function ToNaturalNumber ( number ) ; begin
70613: LD_INT 0
70615: PPUSH
// result := number div 1 ;
70616: LD_ADDR_VAR 0 2
70620: PUSH
70621: LD_VAR 0 1
70625: PUSH
70626: LD_INT 1
70628: DIV
70629: ST_TO_ADDR
// if number < 0 then
70630: LD_VAR 0 1
70634: PUSH
70635: LD_INT 0
70637: LESS
70638: IFFALSE 70648
// result := 0 ;
70640: LD_ADDR_VAR 0 2
70644: PUSH
70645: LD_INT 0
70647: ST_TO_ADDR
// end ;
70648: LD_VAR 0 2
70652: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70653: LD_INT 0
70655: PPUSH
70656: PPUSH
70657: PPUSH
// if not buildings then
70658: LD_VAR 0 1
70662: NOT
70663: IFFALSE 70667
// exit ;
70665: GO 70782
// tmp := [ ] ;
70667: LD_ADDR_VAR 0 5
70671: PUSH
70672: EMPTY
70673: ST_TO_ADDR
// for b in buildings do
70674: LD_ADDR_VAR 0 4
70678: PUSH
70679: LD_VAR 0 1
70683: PUSH
70684: FOR_IN
70685: IFFALSE 70723
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70687: LD_ADDR_VAR 0 5
70691: PUSH
70692: LD_VAR 0 5
70696: PPUSH
70697: LD_VAR 0 5
70701: PUSH
70702: LD_INT 1
70704: PLUS
70705: PPUSH
70706: LD_VAR 0 4
70710: PPUSH
70711: CALL_OW 266
70715: PPUSH
70716: CALL_OW 1
70720: ST_TO_ADDR
70721: GO 70684
70723: POP
70724: POP
// if not tmp then
70725: LD_VAR 0 5
70729: NOT
70730: IFFALSE 70734
// exit ;
70732: GO 70782
// if asc then
70734: LD_VAR 0 2
70738: IFFALSE 70762
// result := SortListByListAsc ( buildings , tmp ) else
70740: LD_ADDR_VAR 0 3
70744: PUSH
70745: LD_VAR 0 1
70749: PPUSH
70750: LD_VAR 0 5
70754: PPUSH
70755: CALL_OW 76
70759: ST_TO_ADDR
70760: GO 70782
// result := SortListByListDesc ( buildings , tmp ) ;
70762: LD_ADDR_VAR 0 3
70766: PUSH
70767: LD_VAR 0 1
70771: PPUSH
70772: LD_VAR 0 5
70776: PPUSH
70777: CALL_OW 77
70781: ST_TO_ADDR
// end ;
70782: LD_VAR 0 3
70786: RET
// export function SortByClass ( units , class ) ; var un ; begin
70787: LD_INT 0
70789: PPUSH
70790: PPUSH
// if not units or not class then
70791: LD_VAR 0 1
70795: NOT
70796: IFTRUE 70805
70798: PUSH
70799: LD_VAR 0 2
70803: NOT
70804: OR
70805: IFFALSE 70809
// exit ;
70807: GO 70904
// result := [ ] ;
70809: LD_ADDR_VAR 0 3
70813: PUSH
70814: EMPTY
70815: ST_TO_ADDR
// for un in units do
70816: LD_ADDR_VAR 0 4
70820: PUSH
70821: LD_VAR 0 1
70825: PUSH
70826: FOR_IN
70827: IFFALSE 70902
// if GetClass ( un ) = class then
70829: LD_VAR 0 4
70833: PPUSH
70834: CALL_OW 257
70838: PUSH
70839: LD_VAR 0 2
70843: EQUAL
70844: IFFALSE 70871
// result := Insert ( result , 1 , un ) else
70846: LD_ADDR_VAR 0 3
70850: PUSH
70851: LD_VAR 0 3
70855: PPUSH
70856: LD_INT 1
70858: PPUSH
70859: LD_VAR 0 4
70863: PPUSH
70864: CALL_OW 2
70868: ST_TO_ADDR
70869: GO 70900
// result := Replace ( result , result + 1 , un ) ;
70871: LD_ADDR_VAR 0 3
70875: PUSH
70876: LD_VAR 0 3
70880: PPUSH
70881: LD_VAR 0 3
70885: PUSH
70886: LD_INT 1
70888: PLUS
70889: PPUSH
70890: LD_VAR 0 4
70894: PPUSH
70895: CALL_OW 1
70899: ST_TO_ADDR
70900: GO 70826
70902: POP
70903: POP
// end ;
70904: LD_VAR 0 3
70908: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70909: LD_INT 0
70911: PPUSH
70912: PPUSH
70913: PPUSH
70914: PPUSH
70915: PPUSH
70916: PPUSH
70917: PPUSH
// result := [ ] ;
70918: LD_ADDR_VAR 0 4
70922: PUSH
70923: EMPTY
70924: ST_TO_ADDR
// if x - r < 0 then
70925: LD_VAR 0 1
70929: PUSH
70930: LD_VAR 0 3
70934: MINUS
70935: PUSH
70936: LD_INT 0
70938: LESS
70939: IFFALSE 70951
// min_x := 0 else
70941: LD_ADDR_VAR 0 8
70945: PUSH
70946: LD_INT 0
70948: ST_TO_ADDR
70949: GO 70967
// min_x := x - r ;
70951: LD_ADDR_VAR 0 8
70955: PUSH
70956: LD_VAR 0 1
70960: PUSH
70961: LD_VAR 0 3
70965: MINUS
70966: ST_TO_ADDR
// if y - r < 0 then
70967: LD_VAR 0 2
70971: PUSH
70972: LD_VAR 0 3
70976: MINUS
70977: PUSH
70978: LD_INT 0
70980: LESS
70981: IFFALSE 70993
// min_y := 0 else
70983: LD_ADDR_VAR 0 7
70987: PUSH
70988: LD_INT 0
70990: ST_TO_ADDR
70991: GO 71009
// min_y := y - r ;
70993: LD_ADDR_VAR 0 7
70997: PUSH
70998: LD_VAR 0 2
71002: PUSH
71003: LD_VAR 0 3
71007: MINUS
71008: ST_TO_ADDR
// max_x := x + r ;
71009: LD_ADDR_VAR 0 9
71013: PUSH
71014: LD_VAR 0 1
71018: PUSH
71019: LD_VAR 0 3
71023: PLUS
71024: ST_TO_ADDR
// max_y := y + r ;
71025: LD_ADDR_VAR 0 10
71029: PUSH
71030: LD_VAR 0 2
71034: PUSH
71035: LD_VAR 0 3
71039: PLUS
71040: ST_TO_ADDR
// for _x = min_x to max_x do
71041: LD_ADDR_VAR 0 5
71045: PUSH
71046: DOUBLE
71047: LD_VAR 0 8
71051: DEC
71052: ST_TO_ADDR
71053: LD_VAR 0 9
71057: PUSH
71058: FOR_TO
71059: IFFALSE 71160
// for _y = min_y to max_y do
71061: LD_ADDR_VAR 0 6
71065: PUSH
71066: DOUBLE
71067: LD_VAR 0 7
71071: DEC
71072: ST_TO_ADDR
71073: LD_VAR 0 10
71077: PUSH
71078: FOR_TO
71079: IFFALSE 71156
// begin if not ValidHex ( _x , _y ) then
71081: LD_VAR 0 5
71085: PPUSH
71086: LD_VAR 0 6
71090: PPUSH
71091: CALL_OW 488
71095: NOT
71096: IFFALSE 71100
// continue ;
71098: GO 71078
// if GetResourceTypeXY ( _x , _y ) then
71100: LD_VAR 0 5
71104: PPUSH
71105: LD_VAR 0 6
71109: PPUSH
71110: CALL_OW 283
71114: IFFALSE 71154
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71116: LD_ADDR_VAR 0 4
71120: PUSH
71121: LD_VAR 0 4
71125: PPUSH
71126: LD_VAR 0 4
71130: PUSH
71131: LD_INT 1
71133: PLUS
71134: PPUSH
71135: LD_VAR 0 5
71139: PUSH
71140: LD_VAR 0 6
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PPUSH
71149: CALL_OW 1
71153: ST_TO_ADDR
// end ;
71154: GO 71078
71156: POP
71157: POP
71158: GO 71058
71160: POP
71161: POP
// end ;
71162: LD_VAR 0 4
71166: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71167: LD_INT 0
71169: PPUSH
71170: PPUSH
71171: PPUSH
71172: PPUSH
71173: PPUSH
71174: PPUSH
71175: PPUSH
71176: PPUSH
// if not units then
71177: LD_VAR 0 1
71181: NOT
71182: IFFALSE 71186
// exit ;
71184: GO 71718
// result := UnitFilter ( units , [ f_ok ] ) ;
71186: LD_ADDR_VAR 0 3
71190: PUSH
71191: LD_VAR 0 1
71195: PPUSH
71196: LD_INT 50
71198: PUSH
71199: EMPTY
71200: LIST
71201: PPUSH
71202: CALL_OW 72
71206: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71207: LD_ADDR_VAR 0 8
71211: PUSH
71212: LD_VAR 0 1
71216: PUSH
71217: LD_INT 1
71219: ARRAY
71220: PPUSH
71221: CALL_OW 255
71225: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71226: LD_ADDR_VAR 0 10
71230: PUSH
71231: LD_INT 29
71233: PUSH
71234: LD_INT 91
71236: PUSH
71237: LD_INT 49
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: LIST
71244: ST_TO_ADDR
// if not result then
71245: LD_VAR 0 3
71249: NOT
71250: IFFALSE 71254
// exit ;
71252: GO 71718
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71254: LD_ADDR_VAR 0 5
71258: PUSH
71259: LD_INT 81
71261: PUSH
71262: LD_VAR 0 8
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PPUSH
71271: CALL_OW 69
71275: ST_TO_ADDR
// for i in result do
71276: LD_ADDR_VAR 0 4
71280: PUSH
71281: LD_VAR 0 3
71285: PUSH
71286: FOR_IN
71287: IFFALSE 71716
// begin tag := GetTag ( i ) + 1 ;
71289: LD_ADDR_VAR 0 9
71293: PUSH
71294: LD_VAR 0 4
71298: PPUSH
71299: CALL_OW 110
71303: PUSH
71304: LD_INT 1
71306: PLUS
71307: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71308: LD_ADDR_VAR 0 7
71312: PUSH
71313: LD_VAR 0 4
71317: PPUSH
71318: CALL_OW 250
71322: PPUSH
71323: LD_VAR 0 4
71327: PPUSH
71328: CALL_OW 251
71332: PPUSH
71333: LD_INT 4
71335: PPUSH
71336: CALL 70909 0 3
71340: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71341: LD_VAR 0 4
71345: PPUSH
71346: CALL_OW 247
71350: PUSH
71351: LD_INT 2
71353: EQUAL
71354: IFFALSE 71366
71356: PUSH
71357: LD_VAR 0 7
71361: PUSH
71362: LD_INT 2
71364: GREATER
71365: AND
71366: IFFALSE 71386
71368: PUSH
71369: LD_VAR 0 4
71373: PPUSH
71374: CALL_OW 264
71378: PUSH
71379: LD_VAR 0 10
71383: IN
71384: NOT
71385: AND
71386: IFFALSE 71425
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71388: LD_VAR 0 4
71392: PPUSH
71393: LD_VAR 0 7
71397: PUSH
71398: LD_INT 1
71400: ARRAY
71401: PUSH
71402: LD_INT 1
71404: ARRAY
71405: PPUSH
71406: LD_VAR 0 7
71410: PUSH
71411: LD_INT 1
71413: ARRAY
71414: PUSH
71415: LD_INT 2
71417: ARRAY
71418: PPUSH
71419: CALL_OW 116
71423: GO 71714
// if path > tag then
71425: LD_VAR 0 2
71429: PUSH
71430: LD_VAR 0 9
71434: GREATER
71435: IFFALSE 71643
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71437: LD_ADDR_VAR 0 6
71441: PUSH
71442: LD_VAR 0 5
71446: PPUSH
71447: LD_INT 91
71449: PUSH
71450: LD_VAR 0 4
71454: PUSH
71455: LD_INT 8
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: LIST
71462: PPUSH
71463: CALL_OW 72
71467: ST_TO_ADDR
// if nearEnemy then
71468: LD_VAR 0 6
71472: IFFALSE 71541
// begin if GetWeapon ( i ) = ru_time_lapser then
71474: LD_VAR 0 4
71478: PPUSH
71479: CALL_OW 264
71483: PUSH
71484: LD_INT 49
71486: EQUAL
71487: IFFALSE 71515
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71489: LD_VAR 0 4
71493: PPUSH
71494: LD_VAR 0 6
71498: PPUSH
71499: LD_VAR 0 4
71503: PPUSH
71504: CALL_OW 74
71508: PPUSH
71509: CALL_OW 112
71513: GO 71539
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71515: LD_VAR 0 4
71519: PPUSH
71520: LD_VAR 0 6
71524: PPUSH
71525: LD_VAR 0 4
71529: PPUSH
71530: CALL_OW 74
71534: PPUSH
71535: CALL 72799 0 2
// end else
71539: GO 71641
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71541: LD_VAR 0 4
71545: PPUSH
71546: LD_VAR 0 2
71550: PUSH
71551: LD_VAR 0 9
71555: ARRAY
71556: PUSH
71557: LD_INT 1
71559: ARRAY
71560: PPUSH
71561: LD_VAR 0 2
71565: PUSH
71566: LD_VAR 0 9
71570: ARRAY
71571: PUSH
71572: LD_INT 2
71574: ARRAY
71575: PPUSH
71576: CALL_OW 297
71580: PUSH
71581: LD_INT 6
71583: GREATER
71584: IFFALSE 71627
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71586: LD_VAR 0 4
71590: PPUSH
71591: LD_VAR 0 2
71595: PUSH
71596: LD_VAR 0 9
71600: ARRAY
71601: PUSH
71602: LD_INT 1
71604: ARRAY
71605: PPUSH
71606: LD_VAR 0 2
71610: PUSH
71611: LD_VAR 0 9
71615: ARRAY
71616: PUSH
71617: LD_INT 2
71619: ARRAY
71620: PPUSH
71621: CALL_OW 114
71625: GO 71641
// SetTag ( i , tag ) ;
71627: LD_VAR 0 4
71631: PPUSH
71632: LD_VAR 0 9
71636: PPUSH
71637: CALL_OW 109
// end else
71641: GO 71714
// if enemy then
71643: LD_VAR 0 5
71647: IFFALSE 71714
// begin if GetWeapon ( i ) = ru_time_lapser then
71649: LD_VAR 0 4
71653: PPUSH
71654: CALL_OW 264
71658: PUSH
71659: LD_INT 49
71661: EQUAL
71662: IFFALSE 71690
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71664: LD_VAR 0 4
71668: PPUSH
71669: LD_VAR 0 5
71673: PPUSH
71674: LD_VAR 0 4
71678: PPUSH
71679: CALL_OW 74
71683: PPUSH
71684: CALL_OW 112
71688: GO 71714
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71690: LD_VAR 0 4
71694: PPUSH
71695: LD_VAR 0 5
71699: PPUSH
71700: LD_VAR 0 4
71704: PPUSH
71705: CALL_OW 74
71709: PPUSH
71710: CALL 72799 0 2
// end ; end ;
71714: GO 71286
71716: POP
71717: POP
// end ;
71718: LD_VAR 0 3
71722: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71723: LD_INT 0
71725: PPUSH
71726: PPUSH
71727: PPUSH
// if not unit or IsInUnit ( unit ) then
71728: LD_VAR 0 1
71732: NOT
71733: IFTRUE 71746
71735: PUSH
71736: LD_VAR 0 1
71740: PPUSH
71741: CALL_OW 310
71745: OR
71746: IFFALSE 71750
// exit ;
71748: GO 71841
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71750: LD_ADDR_VAR 0 4
71754: PUSH
71755: LD_VAR 0 1
71759: PPUSH
71760: CALL_OW 250
71764: PPUSH
71765: LD_VAR 0 2
71769: PPUSH
71770: LD_INT 1
71772: PPUSH
71773: CALL_OW 272
71777: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71778: LD_ADDR_VAR 0 5
71782: PUSH
71783: LD_VAR 0 1
71787: PPUSH
71788: CALL_OW 251
71792: PPUSH
71793: LD_VAR 0 2
71797: PPUSH
71798: LD_INT 1
71800: PPUSH
71801: CALL_OW 273
71805: ST_TO_ADDR
// if ValidHex ( x , y ) then
71806: LD_VAR 0 4
71810: PPUSH
71811: LD_VAR 0 5
71815: PPUSH
71816: CALL_OW 488
71820: IFFALSE 71841
// ComTurnXY ( unit , x , y ) ;
71822: LD_VAR 0 1
71826: PPUSH
71827: LD_VAR 0 4
71831: PPUSH
71832: LD_VAR 0 5
71836: PPUSH
71837: CALL_OW 118
// end ;
71841: LD_VAR 0 3
71845: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71846: LD_INT 0
71848: PPUSH
71849: PPUSH
// result := false ;
71850: LD_ADDR_VAR 0 3
71854: PUSH
71855: LD_INT 0
71857: ST_TO_ADDR
// if not units then
71858: LD_VAR 0 2
71862: NOT
71863: IFFALSE 71867
// exit ;
71865: GO 71912
// for i in units do
71867: LD_ADDR_VAR 0 4
71871: PUSH
71872: LD_VAR 0 2
71876: PUSH
71877: FOR_IN
71878: IFFALSE 71910
// if See ( side , i ) then
71880: LD_VAR 0 1
71884: PPUSH
71885: LD_VAR 0 4
71889: PPUSH
71890: CALL_OW 292
71894: IFFALSE 71908
// begin result := true ;
71896: LD_ADDR_VAR 0 3
71900: PUSH
71901: LD_INT 1
71903: ST_TO_ADDR
// exit ;
71904: POP
71905: POP
71906: GO 71912
// end ;
71908: GO 71877
71910: POP
71911: POP
// end ;
71912: LD_VAR 0 3
71916: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71917: LD_INT 0
71919: PPUSH
71920: PPUSH
71921: PPUSH
71922: PPUSH
// if not unit or not points then
71923: LD_VAR 0 1
71927: NOT
71928: IFTRUE 71937
71930: PUSH
71931: LD_VAR 0 2
71935: NOT
71936: OR
71937: IFFALSE 71941
// exit ;
71939: GO 72031
// dist := 99999 ;
71941: LD_ADDR_VAR 0 5
71945: PUSH
71946: LD_INT 99999
71948: ST_TO_ADDR
// for i in points do
71949: LD_ADDR_VAR 0 4
71953: PUSH
71954: LD_VAR 0 2
71958: PUSH
71959: FOR_IN
71960: IFFALSE 72029
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71962: LD_ADDR_VAR 0 6
71966: PUSH
71967: LD_VAR 0 1
71971: PPUSH
71972: LD_VAR 0 4
71976: PUSH
71977: LD_INT 1
71979: ARRAY
71980: PPUSH
71981: LD_VAR 0 4
71985: PUSH
71986: LD_INT 2
71988: ARRAY
71989: PPUSH
71990: CALL_OW 297
71994: ST_TO_ADDR
// if tmpDist < dist then
71995: LD_VAR 0 6
71999: PUSH
72000: LD_VAR 0 5
72004: LESS
72005: IFFALSE 72027
// begin result := i ;
72007: LD_ADDR_VAR 0 3
72011: PUSH
72012: LD_VAR 0 4
72016: ST_TO_ADDR
// dist := tmpDist ;
72017: LD_ADDR_VAR 0 5
72021: PUSH
72022: LD_VAR 0 6
72026: ST_TO_ADDR
// end ; end ;
72027: GO 71959
72029: POP
72030: POP
// end ;
72031: LD_VAR 0 3
72035: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72036: LD_INT 0
72038: PPUSH
// uc_side := side ;
72039: LD_ADDR_OWVAR 20
72043: PUSH
72044: LD_VAR 0 1
72048: ST_TO_ADDR
// uc_nation := 3 ;
72049: LD_ADDR_OWVAR 21
72053: PUSH
72054: LD_INT 3
72056: ST_TO_ADDR
// vc_chassis := 25 ;
72057: LD_ADDR_OWVAR 37
72061: PUSH
72062: LD_INT 25
72064: ST_TO_ADDR
// vc_engine := engine_siberite ;
72065: LD_ADDR_OWVAR 39
72069: PUSH
72070: LD_INT 3
72072: ST_TO_ADDR
// vc_control := control_computer ;
72073: LD_ADDR_OWVAR 38
72077: PUSH
72078: LD_INT 3
72080: ST_TO_ADDR
// vc_weapon := 59 ;
72081: LD_ADDR_OWVAR 40
72085: PUSH
72086: LD_INT 59
72088: ST_TO_ADDR
// result := CreateVehicle ;
72089: LD_ADDR_VAR 0 5
72093: PUSH
72094: CALL_OW 45
72098: ST_TO_ADDR
// SetDir ( result , d ) ;
72099: LD_VAR 0 5
72103: PPUSH
72104: LD_VAR 0 4
72108: PPUSH
72109: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72113: LD_VAR 0 5
72117: PPUSH
72118: LD_VAR 0 2
72122: PPUSH
72123: LD_VAR 0 3
72127: PPUSH
72128: LD_INT 0
72130: PPUSH
72131: CALL_OW 48
// end ;
72135: LD_VAR 0 5
72139: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72140: LD_INT 0
72142: PPUSH
72143: PPUSH
72144: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72145: LD_ADDR_VAR 0 2
72149: PUSH
72150: LD_INT 0
72152: PUSH
72153: LD_INT 0
72155: PUSH
72156: LD_INT 0
72158: PUSH
72159: LD_INT 0
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72168: LD_VAR 0 1
72172: NOT
72173: IFTRUE 72206
72175: PUSH
72176: LD_VAR 0 1
72180: PPUSH
72181: CALL_OW 264
72185: PUSH
72186: LD_INT 12
72188: PUSH
72189: LD_INT 51
72191: PUSH
72192: LD_INT 32
72194: PUSH
72195: LD_INT 89
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: IN
72204: NOT
72205: OR
72206: IFFALSE 72210
// exit ;
72208: GO 72308
// for i := 1 to 3 do
72210: LD_ADDR_VAR 0 3
72214: PUSH
72215: DOUBLE
72216: LD_INT 1
72218: DEC
72219: ST_TO_ADDR
72220: LD_INT 3
72222: PUSH
72223: FOR_TO
72224: IFFALSE 72306
// begin tmp := GetCargo ( cargo , i ) ;
72226: LD_ADDR_VAR 0 4
72230: PUSH
72231: LD_VAR 0 1
72235: PPUSH
72236: LD_VAR 0 3
72240: PPUSH
72241: CALL_OW 289
72245: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72246: LD_ADDR_VAR 0 2
72250: PUSH
72251: LD_VAR 0 2
72255: PPUSH
72256: LD_VAR 0 3
72260: PPUSH
72261: LD_VAR 0 4
72265: PPUSH
72266: CALL_OW 1
72270: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72271: LD_ADDR_VAR 0 2
72275: PUSH
72276: LD_VAR 0 2
72280: PPUSH
72281: LD_INT 4
72283: PPUSH
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 4
72291: ARRAY
72292: PUSH
72293: LD_VAR 0 4
72297: PLUS
72298: PPUSH
72299: CALL_OW 1
72303: ST_TO_ADDR
// end ;
72304: GO 72223
72306: POP
72307: POP
// end ;
72308: LD_VAR 0 2
72312: RET
// export function Length ( array ) ; begin
72313: LD_INT 0
72315: PPUSH
// result := array + 0 ;
72316: LD_ADDR_VAR 0 2
72320: PUSH
72321: LD_VAR 0 1
72325: PUSH
72326: LD_INT 0
72328: PLUS
72329: ST_TO_ADDR
// end ;
72330: LD_VAR 0 2
72334: RET
// export function PrepareArray ( array ) ; begin
72335: LD_INT 0
72337: PPUSH
// result := array diff 0 ;
72338: LD_ADDR_VAR 0 2
72342: PUSH
72343: LD_VAR 0 1
72347: PUSH
72348: LD_INT 0
72350: DIFF
72351: ST_TO_ADDR
// if not result [ 1 ] then
72352: LD_VAR 0 2
72356: PUSH
72357: LD_INT 1
72359: ARRAY
72360: NOT
72361: IFFALSE 72381
// result := Delete ( result , 1 ) ;
72363: LD_ADDR_VAR 0 2
72367: PUSH
72368: LD_VAR 0 2
72372: PPUSH
72373: LD_INT 1
72375: PPUSH
72376: CALL_OW 3
72380: ST_TO_ADDR
// end ;
72381: LD_VAR 0 2
72385: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72386: LD_INT 0
72388: PPUSH
72389: PPUSH
72390: PPUSH
72391: PPUSH
// sibRocketRange := 25 ;
72392: LD_ADDR_VAR 0 6
72396: PUSH
72397: LD_INT 25
72399: ST_TO_ADDR
// result := false ;
72400: LD_ADDR_VAR 0 4
72404: PUSH
72405: LD_INT 0
72407: ST_TO_ADDR
// for i := 0 to 5 do
72408: LD_ADDR_VAR 0 5
72412: PUSH
72413: DOUBLE
72414: LD_INT 0
72416: DEC
72417: ST_TO_ADDR
72418: LD_INT 5
72420: PUSH
72421: FOR_TO
72422: IFFALSE 72489
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72424: LD_VAR 0 1
72428: PPUSH
72429: LD_VAR 0 5
72433: PPUSH
72434: LD_VAR 0 6
72438: PPUSH
72439: CALL_OW 272
72443: PPUSH
72444: LD_VAR 0 2
72448: PPUSH
72449: LD_VAR 0 5
72453: PPUSH
72454: LD_VAR 0 6
72458: PPUSH
72459: CALL_OW 273
72463: PPUSH
72464: LD_VAR 0 3
72468: PPUSH
72469: CALL_OW 309
72473: IFFALSE 72487
// begin result := true ;
72475: LD_ADDR_VAR 0 4
72479: PUSH
72480: LD_INT 1
72482: ST_TO_ADDR
// exit ;
72483: POP
72484: POP
72485: GO 72491
// end ;
72487: GO 72421
72489: POP
72490: POP
// end ;
72491: LD_VAR 0 4
72495: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72496: LD_INT 0
72498: PPUSH
72499: PPUSH
72500: PPUSH
// if btype = b_depot then
72501: LD_VAR 0 2
72505: PUSH
72506: LD_INT 0
72508: EQUAL
72509: IFFALSE 72521
// begin result := true ;
72511: LD_ADDR_VAR 0 3
72515: PUSH
72516: LD_INT 1
72518: ST_TO_ADDR
// exit ;
72519: GO 72641
// end ; pom := GetBase ( depot ) ;
72521: LD_ADDR_VAR 0 4
72525: PUSH
72526: LD_VAR 0 1
72530: PPUSH
72531: CALL_OW 274
72535: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72536: LD_ADDR_VAR 0 5
72540: PUSH
72541: LD_VAR 0 2
72545: PPUSH
72546: LD_VAR 0 1
72550: PPUSH
72551: CALL_OW 248
72555: PPUSH
72556: CALL_OW 450
72560: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72561: LD_ADDR_VAR 0 3
72565: PUSH
72566: LD_VAR 0 4
72570: PPUSH
72571: LD_INT 1
72573: PPUSH
72574: CALL_OW 275
72578: PUSH
72579: LD_VAR 0 5
72583: PUSH
72584: LD_INT 1
72586: ARRAY
72587: GREATEREQUAL
72588: IFFALSE 72614
72590: PUSH
72591: LD_VAR 0 4
72595: PPUSH
72596: LD_INT 2
72598: PPUSH
72599: CALL_OW 275
72603: PUSH
72604: LD_VAR 0 5
72608: PUSH
72609: LD_INT 2
72611: ARRAY
72612: GREATEREQUAL
72613: AND
72614: IFFALSE 72640
72616: PUSH
72617: LD_VAR 0 4
72621: PPUSH
72622: LD_INT 3
72624: PPUSH
72625: CALL_OW 275
72629: PUSH
72630: LD_VAR 0 5
72634: PUSH
72635: LD_INT 3
72637: ARRAY
72638: GREATEREQUAL
72639: AND
72640: ST_TO_ADDR
// end ;
72641: LD_VAR 0 3
72645: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72646: LD_INT 0
72648: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72649: LD_VAR 0 1
72653: PPUSH
72654: LD_VAR 0 2
72658: PPUSH
72659: LD_INT 0
72661: PPUSH
72662: LD_INT 0
72664: PPUSH
72665: LD_INT 1
72667: PPUSH
72668: LD_INT 0
72670: PPUSH
72671: CALL_OW 587
// end ;
72675: LD_VAR 0 3
72679: RET
// export function CenterOnNow ( unit ) ; begin
72680: LD_INT 0
72682: PPUSH
// result := IsInUnit ( unit ) ;
72683: LD_ADDR_VAR 0 2
72687: PUSH
72688: LD_VAR 0 1
72692: PPUSH
72693: CALL_OW 310
72697: ST_TO_ADDR
// if not result then
72698: LD_VAR 0 2
72702: NOT
72703: IFFALSE 72715
// result := unit ;
72705: LD_ADDR_VAR 0 2
72709: PUSH
72710: LD_VAR 0 1
72714: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72715: LD_VAR 0 1
72719: PPUSH
72720: CALL_OW 87
// end ;
72724: LD_VAR 0 2
72728: RET
// export function ComMoveHex ( unit , hex ) ; begin
72729: LD_INT 0
72731: PPUSH
// if not hex then
72732: LD_VAR 0 2
72736: NOT
72737: IFFALSE 72741
// exit ;
72739: GO 72794
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72741: LD_VAR 0 2
72745: PUSH
72746: LD_INT 1
72748: ARRAY
72749: PPUSH
72750: LD_VAR 0 2
72754: PUSH
72755: LD_INT 2
72757: ARRAY
72758: PPUSH
72759: CALL_OW 428
72763: IFFALSE 72767
// exit ;
72765: GO 72794
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72767: LD_VAR 0 1
72771: PPUSH
72772: LD_VAR 0 2
72776: PUSH
72777: LD_INT 1
72779: ARRAY
72780: PPUSH
72781: LD_VAR 0 2
72785: PUSH
72786: LD_INT 2
72788: ARRAY
72789: PPUSH
72790: CALL_OW 111
// end ;
72794: LD_VAR 0 3
72798: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72799: LD_INT 0
72801: PPUSH
72802: PPUSH
72803: PPUSH
// if not unit or not enemy then
72804: LD_VAR 0 1
72808: NOT
72809: IFTRUE 72818
72811: PUSH
72812: LD_VAR 0 2
72816: NOT
72817: OR
72818: IFFALSE 72822
// exit ;
72820: GO 72948
// x := GetX ( enemy ) ;
72822: LD_ADDR_VAR 0 4
72826: PUSH
72827: LD_VAR 0 2
72831: PPUSH
72832: CALL_OW 250
72836: ST_TO_ADDR
// y := GetY ( enemy ) ;
72837: LD_ADDR_VAR 0 5
72841: PUSH
72842: LD_VAR 0 2
72846: PPUSH
72847: CALL_OW 251
72851: ST_TO_ADDR
// if ValidHex ( x , y ) then
72852: LD_VAR 0 4
72856: PPUSH
72857: LD_VAR 0 5
72861: PPUSH
72862: CALL_OW 488
72866: IFFALSE 72948
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72868: LD_VAR 0 2
72872: PPUSH
72873: CALL_OW 247
72877: PUSH
72878: LD_INT 3
72880: PUSH
72881: LD_INT 2
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: IN
72888: IFTRUE 72911
72890: PUSH
72891: LD_VAR 0 1
72895: PPUSH
72896: CALL_OW 255
72900: PPUSH
72901: LD_VAR 0 2
72905: PPUSH
72906: CALL_OW 292
72910: OR
72911: IFFALSE 72929
// ComAttackUnit ( unit , enemy ) else
72913: LD_VAR 0 1
72917: PPUSH
72918: LD_VAR 0 2
72922: PPUSH
72923: CALL_OW 115
72927: GO 72948
// ComAgressiveMove ( unit , x , y ) ;
72929: LD_VAR 0 1
72933: PPUSH
72934: LD_VAR 0 4
72938: PPUSH
72939: LD_VAR 0 5
72943: PPUSH
72944: CALL_OW 114
// end ;
72948: LD_VAR 0 3
72952: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72953: LD_INT 0
72955: PPUSH
72956: PPUSH
72957: PPUSH
// list := AreaToList ( area , 0 ) ;
72958: LD_ADDR_VAR 0 5
72962: PUSH
72963: LD_VAR 0 1
72967: PPUSH
72968: LD_INT 0
72970: PPUSH
72971: CALL_OW 517
72975: ST_TO_ADDR
// if not list then
72976: LD_VAR 0 5
72980: NOT
72981: IFFALSE 72985
// exit ;
72983: GO 73115
// if all then
72985: LD_VAR 0 2
72989: IFFALSE 73077
// begin for i := 1 to list [ 1 ] do
72991: LD_ADDR_VAR 0 4
72995: PUSH
72996: DOUBLE
72997: LD_INT 1
72999: DEC
73000: ST_TO_ADDR
73001: LD_VAR 0 5
73005: PUSH
73006: LD_INT 1
73008: ARRAY
73009: PUSH
73010: FOR_TO
73011: IFFALSE 73073
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73013: LD_ADDR_VAR 0 3
73017: PUSH
73018: LD_VAR 0 3
73022: PPUSH
73023: LD_VAR 0 3
73027: PUSH
73028: LD_INT 1
73030: PLUS
73031: PPUSH
73032: LD_VAR 0 5
73036: PUSH
73037: LD_INT 1
73039: ARRAY
73040: PUSH
73041: LD_VAR 0 4
73045: ARRAY
73046: PUSH
73047: LD_VAR 0 5
73051: PUSH
73052: LD_INT 2
73054: ARRAY
73055: PUSH
73056: LD_VAR 0 4
73060: ARRAY
73061: PUSH
73062: EMPTY
73063: LIST
73064: LIST
73065: PPUSH
73066: CALL_OW 1
73070: ST_TO_ADDR
73071: GO 73010
73073: POP
73074: POP
// exit ;
73075: GO 73115
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73077: LD_ADDR_VAR 0 3
73081: PUSH
73082: LD_VAR 0 5
73086: PUSH
73087: LD_INT 1
73089: ARRAY
73090: PUSH
73091: LD_INT 1
73093: ARRAY
73094: PUSH
73095: LD_VAR 0 5
73099: PUSH
73100: LD_INT 2
73102: ARRAY
73103: PUSH
73104: LD_INT 1
73106: ARRAY
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: EMPTY
73113: LIST
73114: ST_TO_ADDR
// end ;
73115: LD_VAR 0 3
73119: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73120: LD_INT 0
73122: PPUSH
73123: PPUSH
// list := AreaToList ( area , 0 ) ;
73124: LD_ADDR_VAR 0 4
73128: PUSH
73129: LD_VAR 0 1
73133: PPUSH
73134: LD_INT 0
73136: PPUSH
73137: CALL_OW 517
73141: ST_TO_ADDR
// if not list then
73142: LD_VAR 0 4
73146: NOT
73147: IFFALSE 73151
// exit ;
73149: GO 73192
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73151: LD_ADDR_VAR 0 3
73155: PUSH
73156: LD_VAR 0 4
73160: PUSH
73161: LD_INT 1
73163: ARRAY
73164: PUSH
73165: LD_INT 1
73167: ARRAY
73168: PUSH
73169: LD_VAR 0 4
73173: PUSH
73174: LD_INT 2
73176: ARRAY
73177: PUSH
73178: LD_INT 1
73180: ARRAY
73181: PUSH
73182: LD_VAR 0 2
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: LIST
73191: ST_TO_ADDR
// end ;
73192: LD_VAR 0 3
73196: RET
// export function First ( array ) ; begin
73197: LD_INT 0
73199: PPUSH
// if not array then
73200: LD_VAR 0 1
73204: NOT
73205: IFFALSE 73209
// exit ;
73207: GO 73223
// result := array [ 1 ] ;
73209: LD_ADDR_VAR 0 2
73213: PUSH
73214: LD_VAR 0 1
73218: PUSH
73219: LD_INT 1
73221: ARRAY
73222: ST_TO_ADDR
// end ;
73223: LD_VAR 0 2
73227: RET
// export function Last ( array ) ; begin
73228: LD_INT 0
73230: PPUSH
// if not array then
73231: LD_VAR 0 1
73235: NOT
73236: IFFALSE 73240
// exit ;
73238: GO 73256
// result := array [ array ] ;
73240: LD_ADDR_VAR 0 2
73244: PUSH
73245: LD_VAR 0 1
73249: PUSH
73250: LD_VAR 0 1
73254: ARRAY
73255: ST_TO_ADDR
// end ;
73256: LD_VAR 0 2
73260: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73261: LD_INT 0
73263: PPUSH
73264: PPUSH
// result := [ ] ;
73265: LD_ADDR_VAR 0 5
73269: PUSH
73270: EMPTY
73271: ST_TO_ADDR
// if not array then
73272: LD_VAR 0 1
73276: NOT
73277: IFFALSE 73281
// exit ;
73279: GO 73393
// for i := 1 to array do
73281: LD_ADDR_VAR 0 6
73285: PUSH
73286: DOUBLE
73287: LD_INT 1
73289: DEC
73290: ST_TO_ADDR
73291: LD_VAR 0 1
73295: PUSH
73296: FOR_TO
73297: IFFALSE 73391
// if array [ i ] [ index ] = value then
73299: LD_VAR 0 1
73303: PUSH
73304: LD_VAR 0 6
73308: ARRAY
73309: PUSH
73310: LD_VAR 0 2
73314: ARRAY
73315: PUSH
73316: LD_VAR 0 3
73320: EQUAL
73321: IFFALSE 73389
// begin if indexColumn then
73323: LD_VAR 0 4
73327: IFFALSE 73363
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73329: LD_ADDR_VAR 0 5
73333: PUSH
73334: LD_VAR 0 5
73338: PPUSH
73339: LD_VAR 0 1
73343: PUSH
73344: LD_VAR 0 6
73348: ARRAY
73349: PUSH
73350: LD_VAR 0 4
73354: ARRAY
73355: PPUSH
73356: CALL 68401 0 2
73360: ST_TO_ADDR
73361: GO 73389
// result := Join ( result , array [ i ] ) ;
73363: LD_ADDR_VAR 0 5
73367: PUSH
73368: LD_VAR 0 5
73372: PPUSH
73373: LD_VAR 0 1
73377: PUSH
73378: LD_VAR 0 6
73382: ARRAY
73383: PPUSH
73384: CALL 68401 0 2
73388: ST_TO_ADDR
// end ;
73389: GO 73296
73391: POP
73392: POP
// end ;
73393: LD_VAR 0 5
73397: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73398: LD_INT 0
73400: PPUSH
// if not vehicles or not parkingPoint then
73401: LD_VAR 0 1
73405: NOT
73406: IFTRUE 73415
73408: PUSH
73409: LD_VAR 0 2
73413: NOT
73414: OR
73415: IFFALSE 73419
// exit ;
73417: GO 73517
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73419: LD_ADDR_VAR 0 1
73423: PUSH
73424: LD_VAR 0 1
73428: PPUSH
73429: LD_INT 50
73431: PUSH
73432: EMPTY
73433: LIST
73434: PUSH
73435: LD_INT 3
73437: PUSH
73438: LD_INT 92
73440: PUSH
73441: LD_VAR 0 2
73445: PUSH
73446: LD_INT 1
73448: ARRAY
73449: PUSH
73450: LD_VAR 0 2
73454: PUSH
73455: LD_INT 2
73457: ARRAY
73458: PUSH
73459: LD_INT 8
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PPUSH
73476: CALL_OW 72
73480: ST_TO_ADDR
// if not vehicles then
73481: LD_VAR 0 1
73485: NOT
73486: IFFALSE 73490
// exit ;
73488: GO 73517
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73490: LD_VAR 0 1
73494: PPUSH
73495: LD_VAR 0 2
73499: PUSH
73500: LD_INT 1
73502: ARRAY
73503: PPUSH
73504: LD_VAR 0 2
73508: PUSH
73509: LD_INT 2
73511: ARRAY
73512: PPUSH
73513: CALL_OW 111
// end ;
73517: LD_VAR 0 3
73521: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73522: LD_INT 0
73524: PPUSH
73525: PPUSH
73526: PPUSH
// if not side or not area then
73527: LD_VAR 0 1
73531: NOT
73532: IFTRUE 73541
73534: PUSH
73535: LD_VAR 0 2
73539: NOT
73540: OR
73541: IFFALSE 73545
// exit ;
73543: GO 73664
// tmp := AreaToList ( area , 0 ) ;
73545: LD_ADDR_VAR 0 5
73549: PUSH
73550: LD_VAR 0 2
73554: PPUSH
73555: LD_INT 0
73557: PPUSH
73558: CALL_OW 517
73562: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73563: LD_ADDR_VAR 0 4
73567: PUSH
73568: DOUBLE
73569: LD_INT 1
73571: DEC
73572: ST_TO_ADDR
73573: LD_VAR 0 5
73577: PUSH
73578: LD_INT 1
73580: ARRAY
73581: PUSH
73582: FOR_TO
73583: IFFALSE 73662
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73585: LD_VAR 0 5
73589: PUSH
73590: LD_INT 1
73592: ARRAY
73593: PUSH
73594: LD_VAR 0 4
73598: ARRAY
73599: PPUSH
73600: LD_VAR 0 5
73604: PUSH
73605: LD_INT 2
73607: ARRAY
73608: PUSH
73609: LD_VAR 0 4
73613: ARRAY
73614: PPUSH
73615: CALL_OW 351
73619: IFFALSE 73660
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73621: LD_VAR 0 5
73625: PUSH
73626: LD_INT 1
73628: ARRAY
73629: PUSH
73630: LD_VAR 0 4
73634: ARRAY
73635: PPUSH
73636: LD_VAR 0 5
73640: PUSH
73641: LD_INT 2
73643: ARRAY
73644: PUSH
73645: LD_VAR 0 4
73649: ARRAY
73650: PPUSH
73651: LD_VAR 0 1
73655: PPUSH
73656: CALL_OW 244
// end ;
73660: GO 73582
73662: POP
73663: POP
// end ;
73664: LD_VAR 0 3
73668: RET
// export function UniqueArray ( array ) ; var i ; begin
73669: LD_INT 0
73671: PPUSH
73672: PPUSH
// result := [ ] ;
73673: LD_ADDR_VAR 0 2
73677: PUSH
73678: EMPTY
73679: ST_TO_ADDR
// if not array then
73680: LD_VAR 0 1
73684: NOT
73685: IFFALSE 73689
// exit ;
73687: GO 73750
// for i := 1 to array do
73689: LD_ADDR_VAR 0 3
73693: PUSH
73694: DOUBLE
73695: LD_INT 1
73697: DEC
73698: ST_TO_ADDR
73699: LD_VAR 0 1
73703: PUSH
73704: FOR_TO
73705: IFFALSE 73748
// if not array [ i ] in result then
73707: LD_VAR 0 1
73711: PUSH
73712: LD_VAR 0 3
73716: ARRAY
73717: PUSH
73718: LD_VAR 0 2
73722: IN
73723: NOT
73724: IFFALSE 73746
// result := Join ( result , i ) ;
73726: LD_ADDR_VAR 0 2
73730: PUSH
73731: LD_VAR 0 2
73735: PPUSH
73736: LD_VAR 0 3
73740: PPUSH
73741: CALL 68401 0 2
73745: ST_TO_ADDR
73746: GO 73704
73748: POP
73749: POP
// end ; end_of_file
73750: LD_VAR 0 2
73754: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73755: LD_VAR 0 1
73759: PUSH
73760: LD_INT 200
73762: DOUBLE
73763: GREATEREQUAL
73764: IFFALSE 73772
73766: LD_INT 299
73768: DOUBLE
73769: LESSEQUAL
73770: IFTRUE 73774
73772: GO 73806
73774: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73775: LD_VAR 0 1
73779: PPUSH
73780: LD_VAR 0 2
73784: PPUSH
73785: LD_VAR 0 3
73789: PPUSH
73790: LD_VAR 0 4
73794: PPUSH
73795: LD_VAR 0 5
73799: PPUSH
73800: CALL 24477 0 5
73804: GO 73883
73806: LD_INT 300
73808: DOUBLE
73809: GREATEREQUAL
73810: IFFALSE 73818
73812: LD_INT 399
73814: DOUBLE
73815: LESSEQUAL
73816: IFTRUE 73820
73818: GO 73882
73820: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73821: LD_VAR 0 1
73825: PPUSH
73826: LD_VAR 0 2
73830: PPUSH
73831: LD_VAR 0 3
73835: PPUSH
73836: LD_VAR 0 4
73840: PPUSH
73841: LD_VAR 0 5
73845: PPUSH
73846: LD_VAR 0 6
73850: PPUSH
73851: LD_VAR 0 7
73855: PPUSH
73856: LD_VAR 0 8
73860: PPUSH
73861: LD_VAR 0 9
73865: PPUSH
73866: LD_VAR 0 10
73870: PPUSH
73871: LD_VAR 0 11
73875: PPUSH
73876: CALL 20280 0 11
73880: GO 73883
73882: POP
// end ;
73883: PPOPN 11
73885: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73886: LD_VAR 0 1
73890: PPUSH
73891: LD_VAR 0 2
73895: PPUSH
73896: LD_VAR 0 3
73900: PPUSH
73901: LD_VAR 0 4
73905: PPUSH
73906: LD_VAR 0 5
73910: PPUSH
73911: CALL 23777 0 5
// end ; end_of_file
73915: PPOPN 5
73917: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73918: LD_VAR 0 1
73922: PPUSH
73923: LD_VAR 0 2
73927: PPUSH
73928: LD_VAR 0 3
73932: PPUSH
73933: LD_VAR 0 4
73937: PPUSH
73938: LD_VAR 0 5
73942: PPUSH
73943: LD_VAR 0 6
73947: PPUSH
73948: CALL 7820 0 6
// end ;
73952: PPOPN 6
73954: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73955: LD_INT 0
73957: PPUSH
// begin if not units then
73958: LD_VAR 0 1
73962: NOT
73963: IFFALSE 73967
// exit ;
73965: GO 74001
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73967: LD_VAR 0 1
73971: PPUSH
73972: LD_VAR 0 2
73976: PPUSH
73977: LD_VAR 0 3
73981: PPUSH
73982: LD_VAR 0 4
73986: PPUSH
73987: LD_VAR 0 5
73991: PPUSH
73992: LD_VAR 0 6
73996: PPUSH
73997: CALL 30174 0 6
// end ;
74001: PPOPN 7
74003: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74004: CALL 7700 0 0
// end ;
74008: PPOPN 1
74010: END
