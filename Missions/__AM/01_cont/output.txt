// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 866 0 0
// InitRussian ;
  19: CALL 1114 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2677 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 783
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 783
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 511
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: PUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 292
 483: NOT
 484: AND
 485: PUSH
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 314
 495: NOT
 496: AND
 497: IFFALSE 511
// SetFuel ( unit , 100 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: LD_INT 100
 506: PPUSH
 507: CALL_OW 240
// if mode = forest then
 511: LD_VAR 0 2
 515: PUSH
 516: LD_STRING forest
 518: EQUAL
 519: IFFALSE 599
// if GetLives ( unit ) < 600 then
 521: LD_VAR 0 1
 525: PPUSH
 526: CALL_OW 256
 530: PUSH
 531: LD_INT 600
 533: LESS
 534: IFFALSE 599
// begin ComMoveXY ( unit , 42 , 3 ) ;
 536: LD_VAR 0 1
 540: PPUSH
 541: LD_INT 42
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 551: LD_VAR 0 1
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL_OW 250
 565: PPUSH
 566: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: CALL_OW 232
// send_troops_to_forest := true ;
 589: LD_ADDR_EXP 14
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// break ;
 597: GO 783
// end ; if not HasTask ( unit ) then
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 314
 608: NOT
 609: IFFALSE 781
// begin for i = 1 to coords do
 611: LD_ADDR_VAR 0 6
 615: PUSH
 616: DOUBLE
 617: LD_INT 1
 619: DEC
 620: ST_TO_ADDR
 621: LD_VAR 0 4
 625: PUSH
 626: FOR_TO
 627: IFFALSE 694
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 4
 638: PUSH
 639: LD_VAR 0 6
 643: ARRAY
 644: PPUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 6
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: ARRAY
 659: PPUSH
 660: CALL_OW 174
// AddComWait ( unit , pause ) ;
 664: LD_VAR 0 1
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: CALL_OW 202
// i := i + 1 ;
 678: LD_ADDR_VAR 0 6
 682: PUSH
 683: LD_VAR 0 6
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
// end ;
 692: GO 626
 694: POP
 695: POP
// for i = coords downto 1 do
 696: LD_ADDR_VAR 0 6
 700: PUSH
 701: DOUBLE
 702: LD_VAR 0 4
 706: INC
 707: ST_TO_ADDR
 708: LD_INT 1
 710: PUSH
 711: FOR_DOWNTO
 712: IFFALSE 779
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_VAR 0 4
 723: PUSH
 724: LD_VAR 0 6
 728: PUSH
 729: LD_INT 1
 731: MINUS
 732: ARRAY
 733: PPUSH
 734: LD_VAR 0 4
 738: PUSH
 739: LD_VAR 0 6
 743: ARRAY
 744: PPUSH
 745: CALL_OW 174
// AddComWait ( unit , pause ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 202
// i := i - 1 ;
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: LD_VAR 0 6
 772: PUSH
 773: LD_INT 1
 775: MINUS
 776: ST_TO_ADDR
// end ;
 777: GO 711
 779: POP
 780: POP
// end ; end ;
 781: GO 425
// end ;
 783: LD_VAR 0 5
 787: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
// uc_nation := 1 ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// uc_side := 0 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 380
// hc_name := speaker ;
 821: LD_ADDR_OWVAR 26
 825: PUSH
 826: LD_STRING speaker
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// speaker := CreateHuman ;
 837: LD_ADDR_VAR 0 3
 841: PUSH
 842: CALL_OW 44
 846: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 847: LD_VAR 0 3
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 88
// end ; end_of_file
 861: LD_VAR 0 2
 865: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 866: LD_INT 0
 868: PPUSH
// uc_nation := 1 ;
 869: LD_ADDR_OWVAR 21
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 877: LD_ADDR_EXP 16
 881: PUSH
 882: LD_STRING JMM
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 23789 0 3
 895: ST_TO_ADDR
// uc_side := 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// hc_gallery := us ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING us
 911: ST_TO_ADDR
// hc_face_number := 7 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 7
 919: ST_TO_ADDR
// hc_sex := sex_male ;
 920: LD_ADDR_OWVAR 27
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// hc_name := . ;
 928: LD_ADDR_OWVAR 26
 932: PUSH
 933: LD_STRING .
 935: ST_TO_ADDR
// hc_class := 1 ;
 936: LD_ADDR_OWVAR 28
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Powell := CreateHuman ;
 944: LD_ADDR_EXP 19
 948: PUSH
 949: CALL_OW 44
 953: ST_TO_ADDR
// hc_name := . ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING .
 961: ST_TO_ADDR
// hc_gallery := ru ;
 962: LD_ADDR_OWVAR 33
 966: PUSH
 967: LD_STRING ru
 969: ST_TO_ADDR
// hc_face_number := 4 ;
 970: LD_ADDR_OWVAR 34
 974: PUSH
 975: LD_INT 4
 977: ST_TO_ADDR
// hc_sex := sex_male ;
 978: LD_ADDR_OWVAR 27
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 986: LD_ADDR_EXP 20
 990: PUSH
 991: CALL_OW 44
 995: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
 996: LD_ADDR_EXP 17
1000: PUSH
1001: LD_STRING Bobby
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_STRING 
1009: PPUSH
1010: CALL 23789 0 3
1014: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1015: LD_ADDR_EXP 18
1019: PUSH
1020: LD_STRING Cyrus
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_STRING 
1028: PPUSH
1029: CALL 23789 0 3
1033: ST_TO_ADDR
// case Difficulty of 1 :
1034: LD_OWVAR 67
1038: PUSH
1039: LD_INT 1
1041: DOUBLE
1042: EQUAL
1043: IFTRUE 1047
1045: GO 1062
1047: POP
// SetLives ( Bobby , 500 ) ; 2 :
1048: LD_EXP 17
1052: PPUSH
1053: LD_INT 500
1055: PPUSH
1056: CALL_OW 234
1060: GO 1109
1062: LD_INT 2
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1085
1070: POP
// SetLives ( Bobby , 460 ) ; 3 :
1071: LD_EXP 17
1075: PPUSH
1076: LD_INT 460
1078: PPUSH
1079: CALL_OW 234
1083: GO 1109
1085: LD_INT 3
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1108
1093: POP
// SetLives ( Bobby , 420 ) ; end ;
1094: LD_EXP 17
1098: PPUSH
1099: LD_INT 420
1101: PPUSH
1102: CALL_OW 234
1106: GO 1109
1108: POP
// end ; end_of_file
1109: LD_VAR 0 1
1113: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
// skill := [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 2
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_OWVAR 67
1147: ARRAY
1148: ST_TO_ADDR
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := 3 ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1165: LD_ADDR_EXP 26
1169: PUSH
1170: LD_STRING Pokryshkin
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 23789 0 3
1183: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1184: LD_EXP 26
1188: PPUSH
1189: LD_INT 44
1191: PPUSH
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 48
// hc_importance := 0 ;
1202: LD_ADDR_OWVAR 32
1206: PUSH
1207: LD_INT 0
1209: ST_TO_ADDR
// hc_gallery :=  ;
1210: LD_ADDR_OWVAR 33
1214: PUSH
1215: LD_STRING 
1217: ST_TO_ADDR
// hc_name :=  ;
1218: LD_ADDR_OWVAR 26
1222: PUSH
1223: LD_STRING 
1225: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1226: LD_INT 1
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_VAR 0 2
1236: PPUSH
1237: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1241: LD_ADDR_OWVAR 33
1245: PUSH
1246: LD_STRING SecondCharsGal
1248: ST_TO_ADDR
// hc_face_number := 69 ;
1249: LD_ADDR_OWVAR 34
1253: PUSH
1254: LD_INT 69
1256: ST_TO_ADDR
// hc_sex := sex_male ;
1257: LD_ADDR_OWVAR 27
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1265: LD_ADDR_OWVAR 26
1269: PUSH
1270: LD_STRING Ilja Ivanov
1272: ST_TO_ADDR
// un := CreateHuman ;
1273: LD_ADDR_VAR 0 4
1277: PUSH
1278: CALL_OW 44
1282: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1283: LD_ADDR_EXP 21
1287: PUSH
1288: LD_EXP 21
1292: PPUSH
1293: LD_INT 1
1295: PPUSH
1296: LD_VAR 0 4
1300: PPUSH
1301: CALL_OW 2
1305: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1306: LD_VAR 0 4
1310: PPUSH
1311: LD_INT 3
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1321: LD_INT 1
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: LD_VAR 0 2
1331: PPUSH
1332: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1336: LD_ADDR_OWVAR 33
1340: PUSH
1341: LD_STRING SecondCharsGal
1343: ST_TO_ADDR
// hc_face_number := 70 ;
1344: LD_ADDR_OWVAR 34
1348: PUSH
1349: LD_INT 70
1351: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1352: LD_ADDR_OWVAR 26
1356: PUSH
1357: LD_STRING Pavel Starczy
1359: ST_TO_ADDR
// un := CreateHuman ;
1360: LD_ADDR_VAR 0 4
1364: PUSH
1365: CALL_OW 44
1369: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1370: LD_ADDR_EXP 21
1374: PUSH
1375: LD_EXP 21
1379: PPUSH
1380: LD_INT 2
1382: PPUSH
1383: LD_VAR 0 4
1387: PPUSH
1388: CALL_OW 2
1392: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1393: LD_VAR 0 4
1397: PPUSH
1398: LD_INT 3
1400: PPUSH
1401: LD_INT 0
1403: PPUSH
1404: CALL_OW 49
// InitHc ;
1408: CALL_OW 19
// for i = 1 to 7 do
1412: LD_ADDR_VAR 0 3
1416: PUSH
1417: DOUBLE
1418: LD_INT 1
1420: DEC
1421: ST_TO_ADDR
1422: LD_INT 7
1424: PUSH
1425: FOR_TO
1426: IFFALSE 1577
// begin PrepareHuman ( false , 1 , skill ) ;
1428: LD_INT 0
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: LD_VAR 0 2
1438: PPUSH
1439: CALL_OW 380
// un := CreateHuman ;
1443: LD_ADDR_VAR 0 4
1447: PUSH
1448: CALL_OW 44
1452: ST_TO_ADDR
// if i mod 2 = 0 then
1453: LD_VAR 0 3
1457: PUSH
1458: LD_INT 2
1460: MOD
1461: PUSH
1462: LD_INT 0
1464: EQUAL
1465: IFFALSE 1522
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1467: LD_ADDR_EXP 21
1471: PUSH
1472: LD_EXP 21
1476: PPUSH
1477: LD_EXP 21
1481: PUSH
1482: LD_INT 1
1484: PLUS
1485: PPUSH
1486: LD_VAR 0 4
1490: PPUSH
1491: CALL_OW 2
1495: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1496: LD_VAR 0 4
1500: PPUSH
1501: LD_INT 3
1503: PPUSH
1504: LD_INT 0
1506: PPUSH
1507: CALL_OW 49
// ComHold ( un ) ;
1511: LD_VAR 0 4
1515: PPUSH
1516: CALL_OW 140
// end else
1520: GO 1575
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1522: LD_ADDR_EXP 22
1526: PUSH
1527: LD_EXP 22
1531: PPUSH
1532: LD_EXP 22
1536: PUSH
1537: LD_INT 1
1539: PLUS
1540: PPUSH
1541: LD_VAR 0 4
1545: PPUSH
1546: CALL_OW 2
1550: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1551: LD_VAR 0 4
1555: PPUSH
1556: LD_INT 4
1558: PPUSH
1559: LD_INT 0
1561: PPUSH
1562: CALL_OW 49
// ComHold ( un ) ;
1566: LD_VAR 0 4
1570: PPUSH
1571: CALL_OW 140
// end ; end ;
1575: GO 1425
1577: POP
1578: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1579: LD_ADDR_VAR 0 3
1583: PUSH
1584: LD_INT 22
1586: PUSH
1587: LD_INT 3
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 30
1596: PUSH
1597: LD_INT 31
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PPUSH
1608: CALL_OW 69
1612: PUSH
1613: FOR_IN
1614: IFFALSE 1632
// PrepareSolBun ( skill , i ) ;
1616: LD_VAR 0 2
1620: PPUSH
1621: LD_VAR 0 3
1625: PPUSH
1626: CALL 197 0 2
1630: GO 1613
1632: POP
1633: POP
// for i = 1 to 2 do
1634: LD_ADDR_VAR 0 3
1638: PUSH
1639: DOUBLE
1640: LD_INT 1
1642: DEC
1643: ST_TO_ADDR
1644: LD_INT 2
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1779
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1650: LD_ADDR_VAR 0 4
1654: PUSH
1655: LD_INT 3
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: LD_INT 22
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 42
1672: PPUSH
1673: LD_INT 100
1675: PPUSH
1676: CALL 333 0 7
1680: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1681: LD_INT 0
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_VAR 0 2
1691: PPUSH
1692: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1696: CALL_OW 44
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 23
1717: PUSH
1718: LD_INT 131
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_VAR 0 3
1729: ARRAY
1730: PPUSH
1731: LD_INT 14
1733: PUSH
1734: LD_INT 87
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_VAR 0 3
1745: ARRAY
1746: PPUSH
1747: LD_INT 0
1749: PPUSH
1750: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1754: LD_ADDR_EXP 23
1758: PUSH
1759: LD_EXP 23
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: LD_VAR 0 4
1771: PPUSH
1772: CALL_OW 2
1776: ST_TO_ADDR
// end ;
1777: GO 1647
1779: POP
1780: POP
// for i = 1 to 2 do
1781: LD_ADDR_VAR 0 3
1785: PUSH
1786: DOUBLE
1787: LD_INT 1
1789: DEC
1790: ST_TO_ADDR
1791: LD_INT 2
1793: PUSH
1794: FOR_TO
1795: IFFALSE 1886
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1797: LD_INT 2
1799: PUSH
1800: LD_INT 1
1802: PUSH
1803: LD_INT 1
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: LD_VAR 0 3
1815: ARRAY
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: LD_INT 1
1822: PPUSH
1823: CALL_OW 380
// un := CreateHuman ;
1827: LD_ADDR_VAR 0 4
1831: PUSH
1832: CALL_OW 44
1836: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1837: LD_ADDR_EXP 24
1841: PUSH
1842: LD_EXP 24
1846: PPUSH
1847: LD_INT 1
1849: PPUSH
1850: LD_VAR 0 4
1854: PPUSH
1855: CALL_OW 2
1859: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1860: LD_VAR 0 4
1864: PPUSH
1865: LD_INT 10
1867: PPUSH
1868: LD_INT 0
1870: PPUSH
1871: CALL_OW 49
// ComHold ( un ) ;
1875: LD_VAR 0 4
1879: PPUSH
1880: CALL_OW 140
// end ;
1884: GO 1794
1886: POP
1887: POP
// if Difficulty < 3 then
1888: LD_OWVAR 67
1892: PUSH
1893: LD_INT 3
1895: LESS
1896: IFFALSE 1900
// exit ;
1898: GO 1943
// PrepareHuman ( false , 1 , skill ) ;
1900: LD_INT 0
1902: PPUSH
1903: LD_INT 1
1905: PPUSH
1906: LD_VAR 0 2
1910: PPUSH
1911: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1915: LD_ADDR_EXP 25
1919: PUSH
1920: CALL_OW 44
1924: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1925: LD_EXP 25
1929: PPUSH
1930: LD_INT 82
1932: PPUSH
1933: LD_INT 2
1935: PPUSH
1936: LD_INT 0
1938: PPUSH
1939: CALL_OW 48
// end ;
1943: LD_VAR 0 1
1947: RET
// every 0 0$01 trigger active_road_patrol do
1948: LD_EXP 8
1952: IFFALSE 2018
1954: GO 1956
1956: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1957: LD_EXP 23
1961: PUSH
1962: LD_INT 1
1964: ARRAY
1965: PPUSH
1966: LD_STRING road
1968: PPUSH
1969: LD_INT 70
1971: PPUSH
1972: LD_INT 131
1974: PUSH
1975: LD_INT 87
1977: PUSH
1978: LD_INT 107
1980: PUSH
1981: LD_INT 75
1983: PUSH
1984: LD_INT 107
1986: PUSH
1987: LD_INT 66
1989: PUSH
1990: LD_INT 114
1992: PUSH
1993: LD_INT 61
1995: PUSH
1996: LD_INT 107
1998: PUSH
1999: LD_INT 34
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PPUSH
2014: CALL 421 0 4
2018: END
// every 0 0$01 trigger active_road_patrol do
2019: LD_EXP 8
2023: IFFALSE 2081
2025: GO 2027
2027: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2028: LD_EXP 23
2032: PUSH
2033: LD_INT 2
2035: ARRAY
2036: PPUSH
2037: LD_STRING road
2039: PPUSH
2040: LD_INT 70
2042: PPUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 12
2048: PUSH
2049: LD_INT 37
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 65
2057: PUSH
2058: LD_INT 62
2060: PUSH
2061: LD_INT 107
2063: PUSH
2064: LD_INT 76
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PPUSH
2077: CALL 421 0 4
2081: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2082: LD_EXP 25
2086: PPUSH
2087: CALL_OW 302
2091: IFFALSE 2153
2093: GO 2095
2095: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2096: LD_EXP 25
2100: PPUSH
2101: LD_STRING forest
2103: PPUSH
2104: LD_INT 35
2106: PPUSH
2107: LD_INT 52
2109: PUSH
2110: LD_INT 15
2112: PUSH
2113: LD_INT 81
2115: PUSH
2116: LD_INT 9
2118: PUSH
2119: LD_INT 120
2121: PUSH
2122: LD_INT 52
2124: PUSH
2125: LD_INT 135
2127: PUSH
2128: LD_INT 80
2130: PUSH
2131: LD_INT 122
2133: PUSH
2134: LD_INT 95
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL 421 0 4
2153: END
// every 0 0$01 trigger macmilan_use_radio do
2154: LD_EXP 6
2158: IFFALSE 2219
2160: GO 2162
2162: DISABLE
// begin active_road_patrol := false ;
2163: LD_ADDR_EXP 8
2167: PUSH
2168: LD_INT 0
2170: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2171: LD_EXP 23
2175: PPUSH
2176: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2180: LD_EXP 23
2184: PPUSH
2185: LD_INT 72
2187: PPUSH
2188: LD_INT 41
2190: PPUSH
2191: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2195: LD_EXP 22
2199: PPUSH
2200: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2204: LD_EXP 22
2208: PPUSH
2209: LD_INT 72
2211: PPUSH
2212: LD_INT 41
2214: PPUSH
2215: CALL_OW 174
// end ;
2219: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2220: LD_INT 9
2222: PPUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PPUSH
2233: CALL_OW 70
2237: IFFALSE 2311
2239: GO 2241
2241: DISABLE
2242: LD_INT 0
2244: PPUSH
// begin enable ;
2245: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2246: LD_ADDR_VAR 0 1
2250: PUSH
2251: LD_INT 9
2253: PPUSH
2254: LD_INT 22
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 70
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2273: LD_EXP 22
2277: PPUSH
2278: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2282: LD_EXP 22
2286: PPUSH
2287: LD_VAR 0 1
2291: PPUSH
2292: CALL_OW 250
2296: PPUSH
2297: LD_VAR 0 1
2301: PPUSH
2302: CALL_OW 251
2306: PPUSH
2307: CALL_OW 174
// end ;
2311: PPOPN 1
2313: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2314: LD_EXP 23
2318: PUSH
2319: LD_INT 1
2321: ARRAY
2322: PPUSH
2323: CALL_OW 256
2327: PUSH
2328: LD_INT 999
2330: LESS
2331: PUSH
2332: LD_EXP 23
2336: PUSH
2337: LD_INT 2
2339: ARRAY
2340: PPUSH
2341: CALL_OW 256
2345: PUSH
2346: LD_INT 999
2348: LESS
2349: OR
2350: PUSH
2351: LD_INT 3
2353: PPUSH
2354: LD_EXP 16
2358: PPUSH
2359: CALL_OW 292
2363: AND
2364: IFFALSE 2391
2366: GO 2368
2368: DISABLE
// begin active_road_patrol := false ;
2369: LD_ADDR_EXP 8
2373: PUSH
2374: LD_INT 0
2376: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2377: LD_EXP 23
2381: PPUSH
2382: LD_EXP 16
2386: PPUSH
2387: CALL_OW 115
// end ;
2391: END
// every 0 0$01 trigger macmilan_in_trap do
2392: LD_EXP 9
2396: IFFALSE 2442
2398: GO 2400
2400: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2401: LD_EXP 22
2405: PPUSH
2406: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2410: LD_EXP 21
2414: PUSH
2415: LD_EXP 22
2419: ADD
2420: PUSH
2421: LD_EXP 26
2425: ADD
2426: PUSH
2427: LD_EXP 23
2431: ADD
2432: PPUSH
2433: LD_EXP 16
2437: PPUSH
2438: CALL_OW 115
// end ;
2442: END
// every 0 0$01 trigger meta_action do
2443: LD_EXP 10
2447: IFFALSE 2493
2449: GO 2451
2451: DISABLE
// begin active_road_patrol := false ;
2452: LD_ADDR_EXP 8
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2460: LD_EXP 21
2464: PUSH
2465: LD_EXP 22
2469: ADD
2470: PUSH
2471: LD_EXP 26
2475: ADD
2476: PUSH
2477: LD_EXP 23
2481: ADD
2482: PPUSH
2483: LD_INT 93
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 114
// end ;
2493: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2494: LD_EXP 26
2498: PPUSH
2499: CALL_OW 256
2503: PUSH
2504: LD_INT 1000
2506: LESS
2507: IFFALSE 2558
2509: GO 2511
2511: DISABLE
// begin enable ;
2512: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2513: LD_INT 18
2515: PPUSH
2516: LD_INT 1
2518: PPUSH
2519: CALL_OW 428
2523: PUSH
2524: LD_EXP 26
2528: EQUAL
2529: IFFALSE 2543
// begin RemoveUnit ( Pokryshkin ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 64
// disable ;
2540: DISABLE
// end else
2541: GO 2558
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2543: LD_EXP 26
2547: PPUSH
2548: LD_INT 18
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: CALL_OW 111
// end ;
2558: END
// every 0 0$20 trigger send_troops_to_forest do
2559: LD_EXP 14
2563: IFFALSE 2617
2565: GO 2567
2567: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2568: LD_EXP 25
2572: PPUSH
2573: CALL_OW 302
2577: NOT
2578: IFFALSE 2582
// exit ;
2580: GO 2617
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2582: LD_EXP 21
2586: PUSH
2587: LD_EXP 26
2591: ADD
2592: PPUSH
2593: LD_EXP 25
2597: PPUSH
2598: CALL_OW 252
2602: PPUSH
2603: LD_EXP 25
2607: PPUSH
2608: CALL_OW 253
2612: PPUSH
2613: CALL_OW 114
// end ;
2617: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2618: LD_VAR 0 1
2622: PPUSH
2623: CALL_OW 255
2627: PUSH
2628: LD_INT 3
2630: EQUAL
2631: IFFALSE 2674
// begin wait ( 11 ) ;
2633: LD_INT 11
2635: PPUSH
2636: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_INT 30
2647: PUSH
2648: LD_INT 0
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 69
2659: PPUSH
2660: LD_VAR 0 1
2664: PPUSH
2665: CALL_OW 74
2669: PPUSH
2670: CALL_OW 120
// end ; end ; end_of_file
2674: PPOPN 4
2676: END
// export function Action ; var i ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2681: LD_ADDR_VAR 0 2
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 3
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 25
2698: PUSH
2699: LD_INT 1
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 69
2714: PUSH
2715: FOR_IN
2716: IFFALSE 2729
// ComHold ( i ) ;
2718: LD_VAR 0 2
2722: PPUSH
2723: CALL_OW 140
2727: GO 2715
2729: POP
2730: POP
// InGameOn ;
2731: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2735: LD_INT 79
2737: PPUSH
2738: LD_INT 76
2740: PPUSH
2741: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2745: LD_INT 10
2747: PPUSH
2748: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2752: LD_EXP 16
2756: PPUSH
2757: LD_INT 80
2759: PPUSH
2760: LD_INT 79
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 48
// Wait ( 0 0$03 ) ;
2770: LD_INT 105
2772: PPUSH
2773: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2777: LD_EXP 16
2781: PPUSH
2782: LD_INT 80
2784: PPUSH
2785: LD_INT 76
2787: PPUSH
2788: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2792: LD_EXP 16
2796: PPUSH
2797: LD_STRING D1-JMM-1
2799: PPUSH
2800: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2804: LD_INT 10
2806: PPUSH
2807: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2811: LD_EXP 16
2815: PPUSH
2816: LD_INT 76
2818: PPUSH
2819: LD_INT 76
2821: PPUSH
2822: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2826: LD_EXP 16
2830: PPUSH
2831: LD_STRING D1-JMM-1a
2833: PPUSH
2834: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2838: LD_INT 10
2840: PPUSH
2841: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2845: LD_EXP 16
2849: PPUSH
2850: LD_INT 83
2852: PPUSH
2853: LD_INT 66
2855: PPUSH
2856: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2860: LD_EXP 16
2864: PPUSH
2865: LD_STRING D1-JMM-1b
2867: PPUSH
2868: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2872: LD_INT 18
2874: PPUSH
2875: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2879: LD_EXP 16
2883: PPUSH
2884: LD_STRING D1-JMM-1c
2886: PPUSH
2887: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2891: LD_INT 7
2893: PPUSH
2894: CALL_OW 67
// SayRadioNoFace ( Powell , D1-Pow-1 ) ;
2898: LD_EXP 19
2902: PPUSH
2903: LD_STRING D1-Pow-1
2905: PPUSH
2906: CALL_OW 586
// Say ( JMM , D1-JMM-2 ) ;
2910: LD_EXP 16
2914: PPUSH
2915: LD_STRING D1-JMM-2
2917: PPUSH
2918: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
2922: LD_EXP 19
2926: PPUSH
2927: LD_STRING D1-Pow-2
2929: PPUSH
2930: CALL_OW 586
// Say ( JMM , D1-JMM-3 ) ;
2934: LD_EXP 16
2938: PPUSH
2939: LD_STRING D1-JMM-3
2941: PPUSH
2942: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-3 ) ;
2946: LD_EXP 19
2950: PPUSH
2951: LD_STRING D1-Pow-3
2953: PPUSH
2954: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
2958: LD_EXP 16
2962: PPUSH
2963: LD_STRING D1-JMM-4
2965: PPUSH
2966: CALL_OW 88
// ComFree ( JMM ) ;
2970: LD_EXP 16
2974: PPUSH
2975: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2979: LD_INT 10
2981: PPUSH
2982: CALL_OW 67
// InGameOff ;
2986: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2990: LD_STRING M1
2992: PPUSH
2993: CALL_OW 337
// SaveForQuickRestart ;
2997: CALL_OW 22
// active_russian_dialog := true ;
3001: LD_ADDR_EXP 3
3005: PUSH
3006: LD_INT 1
3008: ST_TO_ADDR
// active_road_patrol := true ;
3009: LD_ADDR_EXP 8
3013: PUSH
3014: LD_INT 1
3016: ST_TO_ADDR
// if Difficulty < 3 then
3017: LD_OWVAR 67
3021: PUSH
3022: LD_INT 3
3024: LESS
3025: IFFALSE 3056
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3027: LD_EXP 17
3031: PPUSH
3032: LD_INT 41
3034: PPUSH
3035: LD_INT 71
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 48
// ComHold ( Bobby ) ;
3045: LD_EXP 17
3049: PPUSH
3050: CALL_OW 140
// end else
3054: GO 3104
// begin SetDir ( Bobby , 5 ) ;
3056: LD_EXP 17
3060: PPUSH
3061: LD_INT 5
3063: PPUSH
3064: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3068: LD_EXP 17
3072: PPUSH
3073: LD_INT 105
3075: PPUSH
3076: LD_INT 98
3078: PPUSH
3079: LD_INT 0
3081: PPUSH
3082: CALL_OW 48
// ComCrawl ( Bobby ) ;
3086: LD_EXP 17
3090: PPUSH
3091: CALL_OW 137
// AddComHold ( Bobby ) ;
3095: LD_EXP 17
3099: PPUSH
3100: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3104: LD_EXP 18
3108: PPUSH
3109: LD_INT 90
3111: PPUSH
3112: LD_INT 42
3114: PPUSH
3115: LD_INT 0
3117: PPUSH
3118: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3122: LD_EXP 18
3126: PPUSH
3127: LD_INT 79
3129: PPUSH
3130: LD_INT 34
3132: PPUSH
3133: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3137: LD_EXP 18
3141: PPUSH
3142: CALL_OW 197
// end ;
3146: LD_VAR 0 1
3150: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3151: LD_EXP 3
3155: IFFALSE 3749
3157: GO 3159
3159: DISABLE
3160: LD_INT 0
3162: PPUSH
// begin wait_points := 0 ;
3163: LD_ADDR_VAR 0 1
3167: PUSH
3168: LD_INT 0
3170: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3171: LD_INT 70
3173: PPUSH
3174: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3178: LD_EXP 21
3182: PPUSH
3183: LD_INT 79
3185: PPUSH
3186: LD_INT 83
3188: PPUSH
3189: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3193: LD_EXP 21
3197: PUSH
3198: LD_INT 2
3200: ARRAY
3201: PPUSH
3202: LD_STRING D1R-Rus1-1
3204: PPUSH
3205: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3209: LD_EXP 21
3213: PUSH
3214: LD_INT 1
3216: ARRAY
3217: PPUSH
3218: LD_STRING D1R-Rus2-1
3220: PPUSH
3221: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3225: LD_EXP 22
3229: PPUSH
3230: LD_INT 91
3232: PPUSH
3233: LD_INT 80
3235: PPUSH
3236: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3247: LD_EXP 21
3251: PUSH
3252: LD_INT 1
3254: ARRAY
3255: PPUSH
3256: LD_INT 79
3258: PPUSH
3259: LD_INT 82
3261: PPUSH
3262: CALL_OW 297
3266: PUSH
3267: LD_INT 6
3269: LESS
3270: IFFALSE 3240
// if not IsInArea ( JMM , jmm_spot ) then
3272: LD_EXP 16
3276: PPUSH
3277: LD_INT 5
3279: PPUSH
3280: CALL_OW 308
3284: NOT
3285: IFFALSE 3305
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3287: LD_EXP 21
3291: PUSH
3292: LD_INT 1
3294: ARRAY
3295: PPUSH
3296: LD_STRING D1Ra-Rus2-1
3298: PPUSH
3299: CALL_OW 88
3303: GO 3372
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3305: LD_EXP 21
3309: PUSH
3310: LD_INT 2
3312: ARRAY
3313: PPUSH
3314: LD_STRING D1Rb-Rus1-1
3316: PPUSH
3317: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3321: LD_EXP 21
3325: PUSH
3326: LD_INT 1
3328: ARRAY
3329: PPUSH
3330: LD_STRING D1Rb-Rus2-1
3332: PPUSH
3333: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3337: LD_EXP 21
3341: PUSH
3342: LD_EXP 22
3346: ADD
3347: PPUSH
3348: LD_EXP 16
3352: PPUSH
3353: CALL_OW 250
3357: PPUSH
3358: LD_EXP 16
3362: PPUSH
3363: CALL_OW 251
3367: PPUSH
3368: CALL_OW 114
// end ; wait_points := 10 ;
3372: LD_ADDR_VAR 0 1
3376: PUSH
3377: LD_INT 10
3379: ST_TO_ADDR
// if Difficulty > 1 then
3380: LD_OWVAR 67
3384: PUSH
3385: LD_INT 1
3387: GREATER
3388: IFFALSE 3470
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3390: LD_EXP 21
3394: PPUSH
3395: LD_INT 78
3397: PPUSH
3398: LD_INT 95
3400: PPUSH
3401: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3405: LD_EXP 21
3409: PPUSH
3410: LD_INT 175
3412: PPUSH
3413: CALL_OW 202
// wait_points := wait_points + 15 ;
3417: LD_ADDR_VAR 0 1
3421: PUSH
3422: LD_VAR 0 1
3426: PUSH
3427: LD_INT 15
3429: PLUS
3430: ST_TO_ADDR
// if Difficulty > 2 then
3431: LD_OWVAR 67
3435: PUSH
3436: LD_INT 2
3438: GREATER
3439: IFFALSE 3470
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3441: LD_EXP 21
3445: PPUSH
3446: LD_INT 65
3448: PPUSH
3449: LD_INT 79
3451: PPUSH
3452: CALL_OW 174
// wait_points := wait_points + 5 ;
3456: LD_ADDR_VAR 0 1
3460: PUSH
3461: LD_VAR 0 1
3465: PUSH
3466: LD_INT 5
3468: PLUS
3469: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3470: LD_INT 35
3472: PPUSH
3473: CALL_OW 67
// wait_points := wait_points - 1 ;
3477: LD_ADDR_VAR 0 1
3481: PUSH
3482: LD_VAR 0 1
3486: PUSH
3487: LD_INT 1
3489: MINUS
3490: ST_TO_ADDR
// if See ( 3 , JMM ) then
3491: LD_INT 3
3493: PPUSH
3494: LD_EXP 16
3498: PPUSH
3499: CALL_OW 292
3503: IFFALSE 3557
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3505: LD_EXP 21
3509: PUSH
3510: LD_INT 2
3512: ARRAY
3513: PPUSH
3514: LD_STRING D1Rb-Rus1-1
3516: PPUSH
3517: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3521: LD_EXP 21
3525: PPUSH
3526: LD_EXP 16
3530: PPUSH
3531: CALL_OW 250
3535: PPUSH
3536: LD_EXP 16
3540: PPUSH
3541: CALL_OW 251
3545: PPUSH
3546: CALL_OW 114
// Wait ( 0 0$03 ) ;
3550: LD_INT 105
3552: PPUSH
3553: CALL_OW 67
// end ; until wait_points = 0 ;
3557: LD_VAR 0 1
3561: PUSH
3562: LD_INT 0
3564: EQUAL
3565: IFFALSE 3470
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3567: LD_EXP 21
3571: PUSH
3572: LD_INT 2
3574: ARRAY
3575: PPUSH
3576: LD_STRING D1Rc-Rus1-1
3578: PPUSH
3579: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3583: LD_EXP 21
3587: PUSH
3588: LD_INT 1
3590: ARRAY
3591: PPUSH
3592: LD_STRING D1Ra-Rus2-1a
3594: PPUSH
3595: CALL_OW 88
// active_powell_dialog := true ;
3599: LD_ADDR_EXP 15
3603: PUSH
3604: LD_INT 1
3606: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3607: LD_EXP 21
3611: PPUSH
3612: LD_INT 45
3614: PPUSH
3615: LD_INT 5
3617: PPUSH
3618: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3622: LD_EXP 22
3626: PPUSH
3627: LD_INT 26
3629: PPUSH
3630: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3634: LD_INT 35
3636: PPUSH
3637: CALL_OW 67
// if See ( 3 , JMM ) then
3641: LD_INT 3
3643: PPUSH
3644: LD_EXP 16
3648: PPUSH
3649: CALL_OW 292
3653: IFFALSE 3709
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3655: LD_EXP 21
3659: PUSH
3660: LD_INT 2
3662: ARRAY
3663: PPUSH
3664: LD_STRING D1Rb-Rus1-1
3666: PPUSH
3667: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3671: LD_EXP 21
3675: PPUSH
3676: LD_EXP 16
3680: PPUSH
3681: CALL_OW 250
3685: PPUSH
3686: LD_EXP 16
3690: PPUSH
3691: CALL_OW 251
3695: PPUSH
3696: CALL_OW 114
// Wait ( 0 0$50 ) ;
3700: LD_INT 1750
3702: PPUSH
3703: CALL_OW 67
// end else
3707: GO 3724
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3709: LD_EXP 21
3713: PPUSH
3714: LD_INT 45
3716: PPUSH
3717: LD_INT 5
3719: PPUSH
3720: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3724: LD_EXP 21
3728: PUSH
3729: LD_INT 1
3731: ARRAY
3732: PPUSH
3733: LD_INT 45
3735: PPUSH
3736: LD_INT 5
3738: PPUSH
3739: CALL_OW 297
3743: PUSH
3744: LD_INT 10
3746: LESS
3747: IFFALSE 3634
// end ;
3749: PPOPN 1
3751: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3752: LD_INT 22
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 92
3764: PUSH
3765: LD_INT 80
3767: PUSH
3768: LD_INT 83
3770: PUSH
3771: LD_INT 6
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: CALL_OW 69
3788: PUSH
3789: LD_OWVAR 67
3793: PUSH
3794: LD_INT 1
3796: EQUAL
3797: AND
3798: IFFALSE 3879
3800: GO 3802
3802: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3803: LD_INT 80
3805: PPUSH
3806: LD_INT 83
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 7
3814: NEG
3815: PPUSH
3816: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3820: LD_INT 35
3822: PPUSH
3823: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3827: LD_INT 22
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 92
3839: PUSH
3840: LD_INT 80
3842: PUSH
3843: LD_INT 83
3845: PUSH
3846: LD_INT 10
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: PPUSH
3859: CALL_OW 69
3863: NOT
3864: IFFALSE 3820
// RemoveSeeing ( 80 , 83 , 1 ) ;
3866: LD_INT 80
3868: PPUSH
3869: LD_INT 83
3871: PPUSH
3872: LD_INT 1
3874: PPUSH
3875: CALL_OW 331
// end ;
3879: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
3880: LD_EXP 16
3884: PPUSH
3885: LD_EXP 17
3889: PPUSH
3890: CALL_OW 296
3894: PUSH
3895: LD_INT 6
3897: LESS
3898: PUSH
3899: LD_EXP 17
3903: PPUSH
3904: CALL_OW 302
3908: AND
3909: IFFALSE 4368
3911: GO 3913
3913: DISABLE
// begin ComWalk ( Bobby ) ;
3914: LD_EXP 17
3918: PPUSH
3919: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3923: LD_EXP 17
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: CALL_OW 250
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 251
3947: PPUSH
3948: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3952: LD_INT 35
3954: PPUSH
3955: CALL_OW 67
// until See ( 4 , JMM ) ;
3959: LD_INT 4
3961: PPUSH
3962: LD_EXP 16
3966: PPUSH
3967: CALL_OW 292
3971: IFFALSE 3952
// InGameOn ;
3973: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_EXP 17
3986: PPUSH
3987: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3991: LD_EXP 7
3995: PUSH
3996: LD_EXP 18
4000: PPUSH
4001: CALL_OW 302
4005: AND
4006: PUSH
4007: LD_EXP 16
4011: PPUSH
4012: LD_EXP 18
4016: PPUSH
4017: CALL_OW 296
4021: PUSH
4022: LD_INT 10
4024: LESS
4025: AND
4026: IFFALSE 4071
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4028: LD_EXP 18
4032: PPUSH
4033: LD_EXP 16
4037: PPUSH
4038: CALL_OW 250
4042: PPUSH
4043: LD_EXP 16
4047: PPUSH
4048: CALL_OW 251
4052: PPUSH
4053: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4057: LD_EXP 18
4061: PPUSH
4062: LD_EXP 17
4066: PPUSH
4067: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4071: LD_EXP 16
4075: PPUSH
4076: LD_STRING D2-JMM-1
4078: PPUSH
4079: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4083: LD_INT 10
4085: PPUSH
4086: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4090: LD_EXP 17
4094: PPUSH
4095: LD_EXP 16
4099: PPUSH
4100: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4104: LD_EXP 17
4108: PPUSH
4109: LD_STRING D2-Bobby-1
4111: PPUSH
4112: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4116: LD_EXP 16
4120: PPUSH
4121: LD_STRING D2-JMM-2
4123: PPUSH
4124: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4128: LD_EXP 17
4132: PPUSH
4133: LD_EXP 16
4137: PPUSH
4138: CALL_OW 250
4142: PPUSH
4143: LD_EXP 16
4147: PPUSH
4148: CALL_OW 251
4152: PPUSH
4153: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4157: LD_EXP 17
4161: PPUSH
4162: LD_STRING D2-Bobby-2
4164: PPUSH
4165: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4169: LD_EXP 16
4173: PPUSH
4174: LD_STRING D2-JMM-3
4176: PPUSH
4177: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4181: LD_EXP 17
4185: PPUSH
4186: LD_EXP 16
4190: PPUSH
4191: CALL_OW 119
// DialogueOn ;
4195: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_STRING D2-Bobby-3
4206: PPUSH
4207: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4211: LD_EXP 16
4215: PPUSH
4216: LD_STRING D2-JMM-4
4218: PPUSH
4219: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4223: LD_EXP 17
4227: PPUSH
4228: LD_STRING D2-Bobby-4
4230: PPUSH
4231: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4235: LD_EXP 16
4239: PPUSH
4240: LD_STRING D2-JMM-5
4242: PPUSH
4243: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4247: LD_EXP 17
4251: PPUSH
4252: LD_STRING D2-Bobby-5
4254: PPUSH
4255: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4259: LD_EXP 16
4263: PPUSH
4264: LD_STRING D2-JMM-6
4266: PPUSH
4267: CALL_OW 88
// if not powell_contact then
4271: LD_EXP 5
4275: NOT
4276: IFFALSE 4302
// begin Say ( Bobby , D2-Bobby-6 ) ;
4278: LD_EXP 17
4282: PPUSH
4283: LD_STRING D2-Bobby-6
4285: PPUSH
4286: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4290: LD_EXP 16
4294: PPUSH
4295: LD_STRING D2-JMM-7
4297: PPUSH
4298: CALL_OW 88
// end ; DialogueOff ;
4302: CALL_OW 7
// InGameOff ;
4306: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4310: LD_EXP 17
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4322: LD_EXP 16
4326: PUSH
4327: LD_EXP 17
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PPUSH
4336: CALL_OW 139
// bobby_in_squad := true ;
4340: LD_ADDR_EXP 4
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4348: LD_EXP 5
4352: PUSH
4353: LD_EXP 7
4357: NOT
4358: AND
4359: IFFALSE 4368
// ChangeMissionObjectives ( M2b ) ;
4361: LD_STRING M2b
4363: PPUSH
4364: CALL_OW 337
// end ;
4368: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4369: LD_EXP 3
4373: PUSH
4374: LD_OWVAR 67
4378: PUSH
4379: LD_INT 3
4381: LESS
4382: AND
4383: IFFALSE 4417
4385: GO 4387
4387: DISABLE
// begin wait ( 1 1$00 ) ;
4388: LD_INT 2100
4390: PPUSH
4391: CALL_OW 67
// if not bobby_in_squad then
4395: LD_EXP 4
4399: NOT
4400: IFFALSE 4417
// ComMoveXY ( Bobby , 75 , 83 ) ;
4402: LD_EXP 17
4406: PPUSH
4407: LD_INT 75
4409: PPUSH
4410: LD_INT 83
4412: PPUSH
4413: CALL_OW 111
// end ;
4417: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4418: LD_EXP 7
4422: PUSH
4423: LD_EXP 4
4427: NOT
4428: AND
4429: IFFALSE 4458
4431: GO 4433
4433: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4434: LD_EXP 17
4438: PPUSH
4439: LD_INT 105
4441: PPUSH
4442: LD_INT 97
4444: PPUSH
4445: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4449: LD_EXP 17
4453: PPUSH
4454: CALL_OW 197
// end ;
4458: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4459: LD_EXP 16
4463: PPUSH
4464: LD_INT 6
4466: PPUSH
4467: CALL_OW 308
4471: PUSH
4472: LD_EXP 16
4476: PPUSH
4477: LD_EXP 17
4481: PPUSH
4482: CALL_OW 296
4486: PUSH
4487: LD_INT 7
4489: LESS
4490: AND
4491: PUSH
4492: LD_EXP 4
4496: AND
4497: IFFALSE 4544
4499: GO 4501
4501: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4502: LD_EXP 16
4506: PUSH
4507: LD_EXP 17
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4520: LD_EXP 16
4524: PPUSH
4525: LD_STRING D2a-JMM-1
4527: PPUSH
4528: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4532: LD_EXP 17
4536: PPUSH
4537: LD_STRING D2a-Bobby-1
4539: PPUSH
4540: CALL_OW 88
// end ;
4544: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4545: LD_EXP 15
4549: PUSH
4550: LD_INT 3
4552: PPUSH
4553: LD_EXP 16
4557: PPUSH
4558: CALL_OW 292
4562: NOT
4563: AND
4564: IFFALSE 4735
4566: GO 4568
4568: DISABLE
// begin wait ( 0 0$5 ) ;
4569: LD_INT 175
4571: PPUSH
4572: CALL_OW 67
// InGameOn ;
4576: CALL_OW 8
// DialogueOn ;
4580: CALL_OW 6
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4584: LD_EXP 19
4588: PPUSH
4589: LD_STRING D3-Pow-1
4591: PPUSH
4592: CALL_OW 586
// Say ( JMM , D3-JMM-1 ) ;
4596: LD_EXP 16
4600: PPUSH
4601: LD_STRING D3-JMM-1
4603: PPUSH
4604: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-2 ) ;
4608: LD_EXP 19
4612: PPUSH
4613: LD_STRING D3-Pow-2
4615: PPUSH
4616: CALL_OW 586
// Say ( JMM , D3-JMM-2 ) ;
4620: LD_EXP 16
4624: PPUSH
4625: LD_STRING D3-JMM-2
4627: PPUSH
4628: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-3 ) ;
4632: LD_EXP 19
4636: PPUSH
4637: LD_STRING D3-Pow-3
4639: PPUSH
4640: CALL_OW 586
// DialogueOff ;
4644: CALL_OW 7
// InGameOff ;
4648: CALL_OW 9
// powell_contact := true ;
4652: LD_ADDR_EXP 5
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4660: LD_INT 10
4662: PPUSH
4663: LD_INT 1
4665: PPUSH
4666: CALL_OW 424
// uc_side := 4 ;
4670: LD_ADDR_OWVAR 20
4674: PUSH
4675: LD_INT 4
4677: ST_TO_ADDR
// uc_nation := 1 ;
4678: LD_ADDR_OWVAR 21
4682: PUSH
4683: LD_INT 1
4685: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
4686: LD_ADDR_EXP 19
4690: PUSH
4691: LD_STRING Powell
4693: PPUSH
4694: LD_INT 0
4696: PPUSH
4697: LD_STRING 
4699: PPUSH
4700: CALL 23789 0 3
4704: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4705: LD_STRING M2
4707: PPUSH
4708: CALL_OW 337
// if not bobby_in_squad then
4712: LD_EXP 4
4716: NOT
4717: IFFALSE 4728
// ChangeMissionObjectives ( M2a ) else
4719: LD_STRING M2a
4721: PPUSH
4722: CALL_OW 337
4726: GO 4735
// ChangeMissionObjectives ( M2b ) ;
4728: LD_STRING M2b
4730: PPUSH
4731: CALL_OW 337
// end ;
4735: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4736: LD_EXP 16
4740: PPUSH
4741: LD_INT 7
4743: PPUSH
4744: CALL_OW 308
4748: IFFALSE 4883
4750: GO 4752
4752: DISABLE
// begin DialogueOn ;
4753: CALL_OW 6
// SayRadioNoFace ( fakePokryshkin , D4-Rus3-1 ) ;
4757: LD_EXP 20
4761: PPUSH
4762: LD_STRING D4-Rus3-1
4764: PPUSH
4765: CALL_OW 586
// DialogueOff ;
4769: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4773: LD_STRING M3a
4775: PPUSH
4776: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4780: LD_INT 11
4782: PPUSH
4783: LD_INT 1
4785: PPUSH
4786: CALL_OW 424
// Wait ( 0 0$02 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// DialogueOn ;
4797: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
4801: LD_EXP 19
4805: PPUSH
4806: LD_STRING D4-Pow-1
4808: PPUSH
4809: CALL_OW 586
// DialogueOff ;
4813: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4817: LD_STRING M3b
4819: PPUSH
4820: CALL_OW 337
// case Query ( Q1 ) of 1 :
4824: LD_STRING Q1
4826: PPUSH
4827: CALL_OW 97
4831: PUSH
4832: LD_INT 1
4834: DOUBLE
4835: EQUAL
4836: IFTRUE 4840
4838: GO 4871
4840: POP
// begin macmilan_use_radio := true ;
4841: LD_ADDR_EXP 6
4845: PUSH
4846: LD_INT 1
4848: ST_TO_ADDR
// DialogueOn ;
4849: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4853: LD_EXP 16
4857: PPUSH
4858: LD_STRING D4a-JMM-1
4860: PPUSH
4861: CALL_OW 88
// DialogueOff ;
4865: CALL_OW 7
// end ; 2 :
4869: GO 4883
4871: LD_INT 2
4873: DOUBLE
4874: EQUAL
4875: IFTRUE 4879
4877: GO 4882
4879: POP
// ; end ;
4880: GO 4883
4882: POP
// end ;
4883: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4884: LD_EXP 16
4888: PPUSH
4889: LD_EXP 18
4893: PPUSH
4894: CALL_OW 296
4898: PUSH
4899: LD_INT 8
4901: LESS
4902: PUSH
4903: LD_EXP 18
4907: PPUSH
4908: CALL_OW 302
4912: AND
4913: IFFALSE 5204
4915: GO 4917
4917: DISABLE
// begin InGameOn ;
4918: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4922: LD_EXP 16
4926: PPUSH
4927: LD_EXP 18
4931: PPUSH
4932: CALL_OW 250
4936: PPUSH
4937: LD_EXP 18
4941: PPUSH
4942: CALL_OW 251
4946: PPUSH
4947: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4951: LD_EXP 17
4955: PPUSH
4956: CALL_OW 302
4960: PUSH
4961: LD_EXP 4
4965: AND
4966: IFFALSE 4997
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4968: LD_EXP 17
4972: PPUSH
4973: LD_EXP 16
4977: PPUSH
4978: CALL_OW 250
4982: PPUSH
4983: LD_EXP 16
4987: PPUSH
4988: CALL_OW 251
4992: PPUSH
4993: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4997: LD_EXP 16
5001: PPUSH
5002: LD_STRING D5-JMM-1
5004: PPUSH
5005: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5009: LD_INT 10
5011: PPUSH
5012: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5016: LD_EXP 16
5020: PPUSH
5021: LD_EXP 18
5025: PPUSH
5026: CALL_OW 119
// ComWalk ( Cyrus ) ;
5030: LD_EXP 18
5034: PPUSH
5035: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5039: LD_EXP 18
5043: PPUSH
5044: LD_EXP 16
5048: PPUSH
5049: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5053: LD_EXP 18
5057: PPUSH
5058: LD_STRING D5-Cyrus-1
5060: PPUSH
5061: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5065: LD_EXP 17
5069: PPUSH
5070: CALL_OW 302
5074: PUSH
5075: LD_EXP 4
5079: AND
5080: IFFALSE 5120
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5082: LD_EXP 17
5086: PPUSH
5087: LD_EXP 18
5091: PPUSH
5092: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5096: LD_EXP 17
5100: PPUSH
5101: LD_STRING D5-Bobby-1
5103: PPUSH
5104: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5108: LD_EXP 16
5112: PPUSH
5113: LD_STRING D5-JMM-2
5115: PPUSH
5116: CALL_OW 88
// end ; InGameOff ;
5120: CALL_OW 9
// cyrus_in_squad := true ;
5124: LD_ADDR_EXP 7
5128: PUSH
5129: LD_INT 1
5131: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5132: LD_EXP 18
5136: PPUSH
5137: LD_INT 1
5139: PPUSH
5140: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5144: LD_EXP 5
5148: PUSH
5149: LD_EXP 4
5153: NOT
5154: AND
5155: IFFALSE 5164
// ChangeMissionObjectives ( M2b ) ;
5157: LD_STRING M2b
5159: PPUSH
5160: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5164: LD_EXP 4
5168: NOT
5169: PUSH
5170: LD_EXP 17
5174: PPUSH
5175: CALL_OW 255
5179: PUSH
5180: LD_INT 4
5182: EQUAL
5183: AND
5184: PUSH
5185: LD_EXP 17
5189: PPUSH
5190: CALL_OW 302
5194: AND
5195: IFFALSE 5204
// SetAchievement ( ACH_CYRUS ) ;
5197: LD_STRING ACH_CYRUS
5199: PPUSH
5200: CALL_OW 543
// end ;
5204: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5205: LD_EXP 4
5209: PUSH
5210: LD_EXP 7
5214: AND
5215: IFFALSE 5227
5217: GO 5219
5219: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5220: LD_STRING M2c
5222: PPUSH
5223: CALL_OW 337
5227: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5228: LD_EXP 16
5232: PPUSH
5233: LD_INT 8
5235: PPUSH
5236: CALL_OW 308
5240: IFFALSE 5292
5242: GO 5244
5244: DISABLE
// begin macmilan_in_trap := true ;
5245: LD_ADDR_EXP 9
5249: PUSH
5250: LD_INT 1
5252: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5253: LD_INT 35
5255: PPUSH
5256: CALL_OW 67
// DialogueOn ;
5260: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5264: LD_EXP 26
5268: PPUSH
5269: LD_STRING D5-Pok-1
5271: PPUSH
5272: CALL_OW 88
// DialogueOff ;
5276: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5280: LD_EXP 16
5284: PPUSH
5285: LD_STRING D4b-JMM-1
5287: PPUSH
5288: CALL_OW 88
// end ;
5292: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5293: LD_EXP 16
5297: PPUSH
5298: LD_EXP 24
5302: PUSH
5303: LD_EXP 24
5307: ARRAY
5308: PPUSH
5309: CALL_OW 296
5313: PUSH
5314: LD_INT 12
5316: LESS
5317: PUSH
5318: LD_EXP 24
5322: PPUSH
5323: LD_INT 3
5325: PUSH
5326: LD_INT 24
5328: PUSH
5329: LD_INT 990
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PPUSH
5340: CALL_OW 72
5344: OR
5345: IFFALSE 5583
5347: GO 5349
5349: DISABLE
5350: LD_INT 0
5352: PPUSH
5353: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5354: LD_ADDR_VAR 0 2
5358: PUSH
5359: LD_INT 300
5361: PUSH
5362: LD_INT 250
5364: PUSH
5365: LD_INT 200
5367: PUSH
5368: LD_INT 150
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: LD_OWVAR 67
5381: ARRAY
5382: ST_TO_ADDR
// for i in russian_meta_guards do
5383: LD_ADDR_VAR 0 1
5387: PUSH
5388: LD_EXP 24
5392: PUSH
5393: FOR_IN
5394: IFFALSE 5434
// if IsOk ( i ) then
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL_OW 302
5405: IFFALSE 5432
// SetLives ( i , GetLives ( i ) - hp ) ;
5407: LD_VAR 0 1
5411: PPUSH
5412: LD_VAR 0 1
5416: PPUSH
5417: CALL_OW 256
5421: PUSH
5422: LD_VAR 0 2
5426: MINUS
5427: PPUSH
5428: CALL_OW 234
5432: GO 5393
5434: POP
5435: POP
// DialogueOn ;
5436: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5440: LD_EXP 24
5444: PUSH
5445: LD_EXP 24
5449: ARRAY
5450: PPUSH
5451: LD_STRING D6-FRus1-1
5453: PPUSH
5454: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5458: LD_EXP 16
5462: PPUSH
5463: LD_STRING D6-JMM-1
5465: PPUSH
5466: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5470: LD_EXP 18
5474: PPUSH
5475: CALL_OW 302
5479: PUSH
5480: LD_EXP 7
5484: AND
5485: IFFALSE 5499
// Say ( Cyrus , D6-Cyrus-1 ) ;
5487: LD_EXP 18
5491: PPUSH
5492: LD_STRING D6-Cyrus-1
5494: PPUSH
5495: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5499: LD_EXP 17
5503: PPUSH
5504: CALL_OW 302
5508: PUSH
5509: LD_EXP 4
5513: AND
5514: IFFALSE 5528
// Say ( Bobby , D6-Bobby-1 ) ;
5516: LD_EXP 17
5520: PPUSH
5521: LD_STRING D6-Bobby-1
5523: PPUSH
5524: CALL_OW 88
// DialogueOff ;
5528: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
5532: LD_INT 140
5534: PUSH
5535: LD_INT 105
5537: PUSH
5538: LD_INT 70
5540: PUSH
5541: LD_INT 70
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: PUSH
5550: LD_OWVAR 67
5554: ARRAY
5555: PPUSH
5556: CALL_OW 67
// meta_action := true ;
5560: LD_ADDR_EXP 10
5564: PUSH
5565: LD_INT 1
5567: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5568: LD_EXP 24
5572: PPUSH
5573: LD_INT 94
5575: PPUSH
5576: LD_INT 8
5578: PPUSH
5579: CALL_OW 114
// end ;
5583: PPOPN 2
5585: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5586: LD_EXP 16
5590: PPUSH
5591: LD_INT 93
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: CALL_OW 297
5601: PUSH
5602: LD_INT 5
5604: LESS
5605: PUSH
5606: LD_INT 22
5608: PUSH
5609: LD_INT 1
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PPUSH
5616: CALL_OW 69
5620: PUSH
5621: LD_INT 1
5623: GREATER
5624: AND
5625: IFFALSE 5642
5627: GO 5629
5629: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5630: LD_EXP 16
5634: PPUSH
5635: LD_STRING D6a-JMM-1
5637: PPUSH
5638: CALL_OW 88
5642: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5643: LD_VAR 0 1
5647: PUSH
5648: LD_EXP 16
5652: EQUAL
5653: IFFALSE 5662
// YouLost ( JMM ) ;
5655: LD_STRING JMM
5657: PPUSH
5658: CALL_OW 104
// end ;
5662: PPOPN 1
5664: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5665: LD_VAR 0 1
5669: PUSH
5670: LD_EXP 16
5674: EQUAL
5675: IFFALSE 5684
// YouLost ( JMM ) ;
5677: LD_STRING JMM
5679: PPUSH
5680: CALL_OW 104
// end ;
5684: PPOPN 1
5686: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5687: LD_EXP 17
5691: PPUSH
5692: LD_INT 10
5694: PPUSH
5695: CALL_OW 308
5699: IFFALSE 5748
5701: GO 5703
5703: DISABLE
// begin bobby_saved := true ;
5704: LD_ADDR_EXP 12
5708: PUSH
5709: LD_INT 1
5711: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5712: LD_EXP 17
5716: PPUSH
5717: CALL_OW 256
5721: PPUSH
5722: LD_STRING 01_BobbyLifePoints_1
5724: PPUSH
5725: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5729: LD_EXP 17
5733: PPUSH
5734: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5738: LD_STRING Bobby
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: CALL_OW 101
// end ;
5748: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5749: LD_EXP 18
5753: PPUSH
5754: LD_INT 10
5756: PPUSH
5757: CALL_OW 308
5761: IFFALSE 5810
5763: GO 5765
5765: DISABLE
// begin cyrus_saved := true ;
5766: LD_ADDR_EXP 13
5770: PUSH
5771: LD_INT 1
5773: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5774: LD_EXP 18
5778: PPUSH
5779: CALL_OW 256
5783: PPUSH
5784: LD_STRING 01_CyrusLifePoints_1
5786: PPUSH
5787: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5791: LD_EXP 18
5795: PPUSH
5796: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5800: LD_STRING Cyrus
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 101
// end ;
5810: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5811: LD_EXP 16
5815: PPUSH
5816: LD_INT 10
5818: PPUSH
5819: CALL_OW 308
5823: IFFALSE 6431
5825: GO 5827
5827: DISABLE
5828: LD_INT 0
5830: PPUSH
5831: PPUSH
5832: PPUSH
5833: PPUSH
5834: PPUSH
5835: PPUSH
// begin if macmilan_use_radio then
5836: LD_EXP 6
5840: IFFALSE 5849
// SetAchievement ( ACH_RADIO ) ;
5842: LD_STRING ACH_RADIO
5844: PPUSH
5845: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5849: LD_EXP 13
5853: NOT
5854: PUSH
5855: LD_EXP 7
5859: AND
5860: PUSH
5861: LD_EXP 18
5865: PPUSH
5866: CALL_OW 302
5870: AND
5871: PUSH
5872: LD_EXP 12
5876: NOT
5877: PUSH
5878: LD_EXP 4
5882: AND
5883: PUSH
5884: LD_EXP 17
5888: PPUSH
5889: CALL_OW 302
5893: AND
5894: OR
5895: IFFALSE 5936
// case Query ( Q2 ) of 1 :
5897: LD_STRING Q2
5899: PPUSH
5900: CALL_OW 97
5904: PUSH
5905: LD_INT 1
5907: DOUBLE
5908: EQUAL
5909: IFTRUE 5913
5911: GO 5924
5913: POP
// wait_for_them := true ; 2 :
5914: LD_ADDR_VAR 0 3
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
5922: GO 5936
5924: LD_INT 2
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 5935
5932: POP
// ; end ;
5933: GO 5936
5935: POP
// if wait_for_them then
5936: LD_VAR 0 3
5940: IFFALSE 6053
// repeat wait ( 0 0$01 ) ;
5942: LD_INT 35
5944: PPUSH
5945: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5949: LD_EXP 13
5953: PUSH
5954: LD_EXP 12
5958: AND
5959: PUSH
5960: LD_EXP 13
5964: PUSH
5965: LD_EXP 4
5969: NOT
5970: PUSH
5971: LD_EXP 17
5975: PPUSH
5976: CALL_OW 303
5980: OR
5981: PUSH
5982: LD_EXP 17
5986: PPUSH
5987: CALL_OW 301
5991: OR
5992: AND
5993: OR
5994: PUSH
5995: LD_EXP 12
5999: PUSH
6000: LD_EXP 7
6004: NOT
6005: PUSH
6006: LD_EXP 18
6010: PPUSH
6011: CALL_OW 303
6015: OR
6016: PUSH
6017: LD_EXP 18
6021: PPUSH
6022: CALL_OW 301
6026: OR
6027: AND
6028: OR
6029: PUSH
6030: LD_EXP 17
6034: PPUSH
6035: CALL_OW 301
6039: PUSH
6040: LD_EXP 18
6044: PPUSH
6045: CALL_OW 301
6049: AND
6050: OR
6051: IFFALSE 5942
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6053: LD_EXP 16
6057: PPUSH
6058: CALL_OW 256
6062: PPUSH
6063: LD_STRING 01_JMMLifePoints_1
6065: PPUSH
6066: CALL_OW 39
// RemoveUnit ( JMM ) ;
6070: LD_EXP 16
6074: PPUSH
6075: CALL_OW 64
// to_reward := [ JMM ] ;
6079: LD_ADDR_VAR 0 2
6083: PUSH
6084: LD_EXP 16
6088: PUSH
6089: EMPTY
6090: LIST
6091: ST_TO_ADDR
// if bobby_saved then
6092: LD_EXP 12
6096: IFFALSE 6114
// to_reward := to_reward ^ Bobby ;
6098: LD_ADDR_VAR 0 2
6102: PUSH
6103: LD_VAR 0 2
6107: PUSH
6108: LD_EXP 17
6112: ADD
6113: ST_TO_ADDR
// if cyrus_saved then
6114: LD_EXP 13
6118: IFFALSE 6136
// to_reward := to_reward ^ Cyrus ;
6120: LD_ADDR_VAR 0 2
6124: PUSH
6125: LD_VAR 0 2
6129: PUSH
6130: LD_EXP 18
6134: ADD
6135: ST_TO_ADDR
// m1 := true ;
6136: LD_ADDR_VAR 0 4
6140: PUSH
6141: LD_INT 1
6143: ST_TO_ADDR
// m2 := bobby_saved ;
6144: LD_ADDR_VAR 0 5
6148: PUSH
6149: LD_EXP 12
6153: ST_TO_ADDR
// m3 := cyrus_saved ;
6154: LD_ADDR_VAR 0 6
6158: PUSH
6159: LD_EXP 13
6163: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6164: LD_STRING JMM
6166: PPUSH
6167: LD_INT 1
6169: PPUSH
6170: CALL_OW 101
// if not bobby_in_squad then
6174: LD_EXP 4
6178: NOT
6179: IFFALSE 6192
// AddMedal ( Bobby , - 1 ) ;
6181: LD_STRING Bobby
6183: PPUSH
6184: LD_INT 1
6186: NEG
6187: PPUSH
6188: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6192: LD_EXP 12
6196: NOT
6197: PUSH
6198: LD_EXP 17
6202: PPUSH
6203: CALL_OW 303
6207: PUSH
6208: LD_EXP 17
6212: PPUSH
6213: CALL_OW 301
6217: OR
6218: AND
6219: IFFALSE 6232
// AddMedal ( Bobby , - 2 ) ;
6221: LD_STRING Bobby
6223: PPUSH
6224: LD_INT 2
6226: NEG
6227: PPUSH
6228: CALL_OW 101
// if not cyrus_in_squad then
6232: LD_EXP 7
6236: NOT
6237: IFFALSE 6250
// AddMedal ( Cyrus , - 1 ) ;
6239: LD_STRING Cyrus
6241: PPUSH
6242: LD_INT 1
6244: NEG
6245: PPUSH
6246: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6250: LD_EXP 13
6254: NOT
6255: PUSH
6256: LD_EXP 18
6260: PPUSH
6261: CALL_OW 303
6265: PUSH
6266: LD_EXP 18
6270: PPUSH
6271: CALL_OW 301
6275: OR
6276: AND
6277: IFFALSE 6290
// AddMedal ( Cyrus , - 2 ) ;
6279: LD_STRING Cyrus
6281: PPUSH
6282: LD_INT 2
6284: NEG
6285: PPUSH
6286: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6290: LD_OWVAR 67
6294: PUSH
6295: LD_INT 3
6297: GREATEREQUAL
6298: PUSH
6299: LD_VAR 0 4
6303: AND
6304: PUSH
6305: LD_VAR 0 5
6309: AND
6310: PUSH
6311: LD_VAR 0 6
6315: AND
6316: IFFALSE 6328
// SetAchievementEX ( ACH_AMER , 1 ) ;
6318: LD_STRING ACH_AMER
6320: PPUSH
6321: LD_INT 1
6323: PPUSH
6324: CALL_OW 564
// GiveMedals ( MAIN ) ;
6328: LD_STRING MAIN
6330: PPUSH
6331: CALL_OW 102
// RewardPeople ( to_reward ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 43
// if bobby_saved then
6344: LD_EXP 12
6348: IFFALSE 6368
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6350: LD_EXP 17
6354: PPUSH
6355: LD_EXP 2
6359: PUSH
6360: LD_STRING Bobby
6362: STR
6363: PPUSH
6364: CALL_OW 38
// if cyrus_saved then
6368: LD_EXP 13
6372: IFFALSE 6392
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6374: LD_EXP 18
6378: PPUSH
6379: LD_EXP 2
6383: PUSH
6384: LD_STRING Cyrus
6386: STR
6387: PPUSH
6388: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6392: LD_EXP 16
6396: PPUSH
6397: LD_EXP 2
6401: PUSH
6402: LD_STRING JMM
6404: STR
6405: PPUSH
6406: CALL_OW 38
// if tick <= 3 3$00 then
6410: LD_OWVAR 1
6414: PUSH
6415: LD_INT 6300
6417: LESSEQUAL
6418: IFFALSE 6427
// SetAchievement ( ACH_ASPEED_1 ) ;
6420: LD_STRING ACH_ASPEED_1
6422: PPUSH
6423: CALL_OW 543
// YouWin ;
6427: CALL_OW 103
// end ; end_of_file end_of_file
6431: PPOPN 6
6433: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6434: LD_INT 0
6436: PPUSH
// if p2 = 100 then
6437: LD_VAR 0 2
6441: PUSH
6442: LD_INT 100
6444: EQUAL
6445: IFFALSE 7394
// begin if not StreamModeActive then
6447: LD_EXP 27
6451: NOT
6452: IFFALSE 6462
// StreamModeActive := true ;
6454: LD_ADDR_EXP 27
6458: PUSH
6459: LD_INT 1
6461: ST_TO_ADDR
// if p3 = 0 then
6462: LD_VAR 0 3
6466: PUSH
6467: LD_INT 0
6469: EQUAL
6470: IFFALSE 6476
// InitStreamMode ;
6472: CALL 7554 0 0
// if p3 = 1 then
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 1
6483: EQUAL
6484: IFFALSE 6494
// sRocket := true ;
6486: LD_ADDR_EXP 32
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// if p3 = 2 then
6494: LD_VAR 0 3
6498: PUSH
6499: LD_INT 2
6501: EQUAL
6502: IFFALSE 6512
// sSpeed := true ;
6504: LD_ADDR_EXP 31
6508: PUSH
6509: LD_INT 1
6511: ST_TO_ADDR
// if p3 = 3 then
6512: LD_VAR 0 3
6516: PUSH
6517: LD_INT 3
6519: EQUAL
6520: IFFALSE 6530
// sEngine := true ;
6522: LD_ADDR_EXP 33
6526: PUSH
6527: LD_INT 1
6529: ST_TO_ADDR
// if p3 = 4 then
6530: LD_VAR 0 3
6534: PUSH
6535: LD_INT 4
6537: EQUAL
6538: IFFALSE 6548
// sSpec := true ;
6540: LD_ADDR_EXP 30
6544: PUSH
6545: LD_INT 1
6547: ST_TO_ADDR
// if p3 = 5 then
6548: LD_VAR 0 3
6552: PUSH
6553: LD_INT 5
6555: EQUAL
6556: IFFALSE 6566
// sLevel := true ;
6558: LD_ADDR_EXP 34
6562: PUSH
6563: LD_INT 1
6565: ST_TO_ADDR
// if p3 = 6 then
6566: LD_VAR 0 3
6570: PUSH
6571: LD_INT 6
6573: EQUAL
6574: IFFALSE 6584
// sArmoury := true ;
6576: LD_ADDR_EXP 35
6580: PUSH
6581: LD_INT 1
6583: ST_TO_ADDR
// if p3 = 7 then
6584: LD_VAR 0 3
6588: PUSH
6589: LD_INT 7
6591: EQUAL
6592: IFFALSE 6602
// sRadar := true ;
6594: LD_ADDR_EXP 36
6598: PUSH
6599: LD_INT 1
6601: ST_TO_ADDR
// if p3 = 8 then
6602: LD_VAR 0 3
6606: PUSH
6607: LD_INT 8
6609: EQUAL
6610: IFFALSE 6620
// sBunker := true ;
6612: LD_ADDR_EXP 37
6616: PUSH
6617: LD_INT 1
6619: ST_TO_ADDR
// if p3 = 9 then
6620: LD_VAR 0 3
6624: PUSH
6625: LD_INT 9
6627: EQUAL
6628: IFFALSE 6638
// sHack := true ;
6630: LD_ADDR_EXP 38
6634: PUSH
6635: LD_INT 1
6637: ST_TO_ADDR
// if p3 = 10 then
6638: LD_VAR 0 3
6642: PUSH
6643: LD_INT 10
6645: EQUAL
6646: IFFALSE 6656
// sFire := true ;
6648: LD_ADDR_EXP 39
6652: PUSH
6653: LD_INT 1
6655: ST_TO_ADDR
// if p3 = 11 then
6656: LD_VAR 0 3
6660: PUSH
6661: LD_INT 11
6663: EQUAL
6664: IFFALSE 6674
// sRefresh := true ;
6666: LD_ADDR_EXP 40
6670: PUSH
6671: LD_INT 1
6673: ST_TO_ADDR
// if p3 = 12 then
6674: LD_VAR 0 3
6678: PUSH
6679: LD_INT 12
6681: EQUAL
6682: IFFALSE 6692
// sExp := true ;
6684: LD_ADDR_EXP 41
6688: PUSH
6689: LD_INT 1
6691: ST_TO_ADDR
// if p3 = 13 then
6692: LD_VAR 0 3
6696: PUSH
6697: LD_INT 13
6699: EQUAL
6700: IFFALSE 6710
// sDepot := true ;
6702: LD_ADDR_EXP 42
6706: PUSH
6707: LD_INT 1
6709: ST_TO_ADDR
// if p3 = 14 then
6710: LD_VAR 0 3
6714: PUSH
6715: LD_INT 14
6717: EQUAL
6718: IFFALSE 6728
// sFlag := true ;
6720: LD_ADDR_EXP 43
6724: PUSH
6725: LD_INT 1
6727: ST_TO_ADDR
// if p3 = 15 then
6728: LD_VAR 0 3
6732: PUSH
6733: LD_INT 15
6735: EQUAL
6736: IFFALSE 6746
// sKamikadze := true ;
6738: LD_ADDR_EXP 51
6742: PUSH
6743: LD_INT 1
6745: ST_TO_ADDR
// if p3 = 16 then
6746: LD_VAR 0 3
6750: PUSH
6751: LD_INT 16
6753: EQUAL
6754: IFFALSE 6764
// sTroll := true ;
6756: LD_ADDR_EXP 52
6760: PUSH
6761: LD_INT 1
6763: ST_TO_ADDR
// if p3 = 17 then
6764: LD_VAR 0 3
6768: PUSH
6769: LD_INT 17
6771: EQUAL
6772: IFFALSE 6782
// sSlow := true ;
6774: LD_ADDR_EXP 53
6778: PUSH
6779: LD_INT 1
6781: ST_TO_ADDR
// if p3 = 18 then
6782: LD_VAR 0 3
6786: PUSH
6787: LD_INT 18
6789: EQUAL
6790: IFFALSE 6800
// sLack := true ;
6792: LD_ADDR_EXP 54
6796: PUSH
6797: LD_INT 1
6799: ST_TO_ADDR
// if p3 = 19 then
6800: LD_VAR 0 3
6804: PUSH
6805: LD_INT 19
6807: EQUAL
6808: IFFALSE 6818
// sTank := true ;
6810: LD_ADDR_EXP 56
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// if p3 = 20 then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 20
6825: EQUAL
6826: IFFALSE 6836
// sRemote := true ;
6828: LD_ADDR_EXP 57
6832: PUSH
6833: LD_INT 1
6835: ST_TO_ADDR
// if p3 = 21 then
6836: LD_VAR 0 3
6840: PUSH
6841: LD_INT 21
6843: EQUAL
6844: IFFALSE 6854
// sPowell := true ;
6846: LD_ADDR_EXP 58
6850: PUSH
6851: LD_INT 1
6853: ST_TO_ADDR
// if p3 = 22 then
6854: LD_VAR 0 3
6858: PUSH
6859: LD_INT 22
6861: EQUAL
6862: IFFALSE 6872
// sTeleport := true ;
6864: LD_ADDR_EXP 61
6868: PUSH
6869: LD_INT 1
6871: ST_TO_ADDR
// if p3 = 23 then
6872: LD_VAR 0 3
6876: PUSH
6877: LD_INT 23
6879: EQUAL
6880: IFFALSE 6890
// sOilTower := true ;
6882: LD_ADDR_EXP 63
6886: PUSH
6887: LD_INT 1
6889: ST_TO_ADDR
// if p3 = 24 then
6890: LD_VAR 0 3
6894: PUSH
6895: LD_INT 24
6897: EQUAL
6898: IFFALSE 6908
// sShovel := true ;
6900: LD_ADDR_EXP 64
6904: PUSH
6905: LD_INT 1
6907: ST_TO_ADDR
// if p3 = 25 then
6908: LD_VAR 0 3
6912: PUSH
6913: LD_INT 25
6915: EQUAL
6916: IFFALSE 6926
// sSheik := true ;
6918: LD_ADDR_EXP 65
6922: PUSH
6923: LD_INT 1
6925: ST_TO_ADDR
// if p3 = 26 then
6926: LD_VAR 0 3
6930: PUSH
6931: LD_INT 26
6933: EQUAL
6934: IFFALSE 6944
// sEarthquake := true ;
6936: LD_ADDR_EXP 67
6940: PUSH
6941: LD_INT 1
6943: ST_TO_ADDR
// if p3 = 27 then
6944: LD_VAR 0 3
6948: PUSH
6949: LD_INT 27
6951: EQUAL
6952: IFFALSE 6962
// sAI := true ;
6954: LD_ADDR_EXP 68
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// if p3 = 28 then
6962: LD_VAR 0 3
6966: PUSH
6967: LD_INT 28
6969: EQUAL
6970: IFFALSE 6980
// sCargo := true ;
6972: LD_ADDR_EXP 71
6976: PUSH
6977: LD_INT 1
6979: ST_TO_ADDR
// if p3 = 29 then
6980: LD_VAR 0 3
6984: PUSH
6985: LD_INT 29
6987: EQUAL
6988: IFFALSE 6998
// sDLaser := true ;
6990: LD_ADDR_EXP 72
6994: PUSH
6995: LD_INT 1
6997: ST_TO_ADDR
// if p3 = 30 then
6998: LD_VAR 0 3
7002: PUSH
7003: LD_INT 30
7005: EQUAL
7006: IFFALSE 7016
// sExchange := true ;
7008: LD_ADDR_EXP 73
7012: PUSH
7013: LD_INT 1
7015: ST_TO_ADDR
// if p3 = 31 then
7016: LD_VAR 0 3
7020: PUSH
7021: LD_INT 31
7023: EQUAL
7024: IFFALSE 7034
// sFac := true ;
7026: LD_ADDR_EXP 74
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// if p3 = 32 then
7034: LD_VAR 0 3
7038: PUSH
7039: LD_INT 32
7041: EQUAL
7042: IFFALSE 7052
// sPower := true ;
7044: LD_ADDR_EXP 75
7048: PUSH
7049: LD_INT 1
7051: ST_TO_ADDR
// if p3 = 33 then
7052: LD_VAR 0 3
7056: PUSH
7057: LD_INT 33
7059: EQUAL
7060: IFFALSE 7070
// sRandom := true ;
7062: LD_ADDR_EXP 76
7066: PUSH
7067: LD_INT 1
7069: ST_TO_ADDR
// if p3 = 34 then
7070: LD_VAR 0 3
7074: PUSH
7075: LD_INT 34
7077: EQUAL
7078: IFFALSE 7088
// sShield := true ;
7080: LD_ADDR_EXP 77
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// if p3 = 35 then
7088: LD_VAR 0 3
7092: PUSH
7093: LD_INT 35
7095: EQUAL
7096: IFFALSE 7106
// sTime := true ;
7098: LD_ADDR_EXP 78
7102: PUSH
7103: LD_INT 1
7105: ST_TO_ADDR
// if p3 = 36 then
7106: LD_VAR 0 3
7110: PUSH
7111: LD_INT 36
7113: EQUAL
7114: IFFALSE 7124
// sTools := true ;
7116: LD_ADDR_EXP 79
7120: PUSH
7121: LD_INT 1
7123: ST_TO_ADDR
// if p3 = 101 then
7124: LD_VAR 0 3
7128: PUSH
7129: LD_INT 101
7131: EQUAL
7132: IFFALSE 7142
// sSold := true ;
7134: LD_ADDR_EXP 44
7138: PUSH
7139: LD_INT 1
7141: ST_TO_ADDR
// if p3 = 102 then
7142: LD_VAR 0 3
7146: PUSH
7147: LD_INT 102
7149: EQUAL
7150: IFFALSE 7160
// sDiff := true ;
7152: LD_ADDR_EXP 45
7156: PUSH
7157: LD_INT 1
7159: ST_TO_ADDR
// if p3 = 103 then
7160: LD_VAR 0 3
7164: PUSH
7165: LD_INT 103
7167: EQUAL
7168: IFFALSE 7178
// sFog := true ;
7170: LD_ADDR_EXP 48
7174: PUSH
7175: LD_INT 1
7177: ST_TO_ADDR
// if p3 = 104 then
7178: LD_VAR 0 3
7182: PUSH
7183: LD_INT 104
7185: EQUAL
7186: IFFALSE 7196
// sReset := true ;
7188: LD_ADDR_EXP 49
7192: PUSH
7193: LD_INT 1
7195: ST_TO_ADDR
// if p3 = 105 then
7196: LD_VAR 0 3
7200: PUSH
7201: LD_INT 105
7203: EQUAL
7204: IFFALSE 7214
// sSun := true ;
7206: LD_ADDR_EXP 50
7210: PUSH
7211: LD_INT 1
7213: ST_TO_ADDR
// if p3 = 106 then
7214: LD_VAR 0 3
7218: PUSH
7219: LD_INT 106
7221: EQUAL
7222: IFFALSE 7232
// sTiger := true ;
7224: LD_ADDR_EXP 46
7228: PUSH
7229: LD_INT 1
7231: ST_TO_ADDR
// if p3 = 107 then
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 107
7239: EQUAL
7240: IFFALSE 7250
// sBomb := true ;
7242: LD_ADDR_EXP 47
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// if p3 = 108 then
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 108
7257: EQUAL
7258: IFFALSE 7268
// sWound := true ;
7260: LD_ADDR_EXP 55
7264: PUSH
7265: LD_INT 1
7267: ST_TO_ADDR
// if p3 = 109 then
7268: LD_VAR 0 3
7272: PUSH
7273: LD_INT 109
7275: EQUAL
7276: IFFALSE 7286
// sBetray := true ;
7278: LD_ADDR_EXP 59
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// if p3 = 110 then
7286: LD_VAR 0 3
7290: PUSH
7291: LD_INT 110
7293: EQUAL
7294: IFFALSE 7304
// sContamin := true ;
7296: LD_ADDR_EXP 60
7300: PUSH
7301: LD_INT 1
7303: ST_TO_ADDR
// if p3 = 111 then
7304: LD_VAR 0 3
7308: PUSH
7309: LD_INT 111
7311: EQUAL
7312: IFFALSE 7322
// sOil := true ;
7314: LD_ADDR_EXP 62
7318: PUSH
7319: LD_INT 1
7321: ST_TO_ADDR
// if p3 = 112 then
7322: LD_VAR 0 3
7326: PUSH
7327: LD_INT 112
7329: EQUAL
7330: IFFALSE 7340
// sStu := true ;
7332: LD_ADDR_EXP 66
7336: PUSH
7337: LD_INT 1
7339: ST_TO_ADDR
// if p3 = 113 then
7340: LD_VAR 0 3
7344: PUSH
7345: LD_INT 113
7347: EQUAL
7348: IFFALSE 7358
// sBazooka := true ;
7350: LD_ADDR_EXP 69
7354: PUSH
7355: LD_INT 1
7357: ST_TO_ADDR
// if p3 = 114 then
7358: LD_VAR 0 3
7362: PUSH
7363: LD_INT 114
7365: EQUAL
7366: IFFALSE 7376
// sMortar := true ;
7368: LD_ADDR_EXP 70
7372: PUSH
7373: LD_INT 1
7375: ST_TO_ADDR
// if p3 = 115 then
7376: LD_VAR 0 3
7380: PUSH
7381: LD_INT 115
7383: EQUAL
7384: IFFALSE 7394
// sRanger := true ;
7386: LD_ADDR_EXP 80
7390: PUSH
7391: LD_INT 1
7393: ST_TO_ADDR
// end ; if p2 = 101 then
7394: LD_VAR 0 2
7398: PUSH
7399: LD_INT 101
7401: EQUAL
7402: IFFALSE 7530
// begin case p3 of 1 :
7404: LD_VAR 0 3
7408: PUSH
7409: LD_INT 1
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7424
7417: POP
// hHackUnlimitedResources ; 2 :
7418: CALL 18567 0 0
7422: GO 7530
7424: LD_INT 2
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7439
7432: POP
// hHackSetLevel10 ; 3 :
7433: CALL 18700 0 0
7437: GO 7530
7439: LD_INT 3
7441: DOUBLE
7442: EQUAL
7443: IFTRUE 7447
7445: GO 7454
7447: POP
// hHackSetLevel10YourUnits ; 4 :
7448: CALL 18785 0 0
7452: GO 7530
7454: LD_INT 4
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7469
7462: POP
// hHackInvincible ; 5 :
7463: CALL 19233 0 0
7467: GO 7530
7469: LD_INT 5
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7484
7477: POP
// hHackInvisible ; 6 :
7478: CALL 19344 0 0
7482: GO 7530
7484: LD_INT 6
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7499
7492: POP
// hHackChangeYourSide ; 7 :
7493: CALL 19401 0 0
7497: GO 7530
7499: LD_INT 7
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7514
7507: POP
// hHackChangeUnitSide ; 8 :
7508: CALL 19443 0 0
7512: GO 7530
7514: LD_INT 8
7516: DOUBLE
7517: EQUAL
7518: IFTRUE 7522
7520: GO 7529
7522: POP
// hHackFog ; end ;
7523: CALL 19544 0 0
7527: GO 7530
7529: POP
// end ; end ;
7530: LD_VAR 0 7
7534: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7535: GO 7537
7537: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7538: LD_STRING initStreamRollete();
7540: PPUSH
7541: CALL_OW 559
// InitStreamMode ;
7545: CALL 7554 0 0
// DefineStreamItems ( ) ;
7549: CALL 7994 0 0
// end ;
7553: END
// function InitStreamMode ; begin
7554: LD_INT 0
7556: PPUSH
// streamModeActive := false ;
7557: LD_ADDR_EXP 27
7561: PUSH
7562: LD_INT 0
7564: ST_TO_ADDR
// normalCounter := 36 ;
7565: LD_ADDR_EXP 28
7569: PUSH
7570: LD_INT 36
7572: ST_TO_ADDR
// hardcoreCounter := 16 ;
7573: LD_ADDR_EXP 29
7577: PUSH
7578: LD_INT 16
7580: ST_TO_ADDR
// sRocket := false ;
7581: LD_ADDR_EXP 32
7585: PUSH
7586: LD_INT 0
7588: ST_TO_ADDR
// sSpeed := false ;
7589: LD_ADDR_EXP 31
7593: PUSH
7594: LD_INT 0
7596: ST_TO_ADDR
// sEngine := false ;
7597: LD_ADDR_EXP 33
7601: PUSH
7602: LD_INT 0
7604: ST_TO_ADDR
// sSpec := false ;
7605: LD_ADDR_EXP 30
7609: PUSH
7610: LD_INT 0
7612: ST_TO_ADDR
// sLevel := false ;
7613: LD_ADDR_EXP 34
7617: PUSH
7618: LD_INT 0
7620: ST_TO_ADDR
// sArmoury := false ;
7621: LD_ADDR_EXP 35
7625: PUSH
7626: LD_INT 0
7628: ST_TO_ADDR
// sRadar := false ;
7629: LD_ADDR_EXP 36
7633: PUSH
7634: LD_INT 0
7636: ST_TO_ADDR
// sBunker := false ;
7637: LD_ADDR_EXP 37
7641: PUSH
7642: LD_INT 0
7644: ST_TO_ADDR
// sHack := false ;
7645: LD_ADDR_EXP 38
7649: PUSH
7650: LD_INT 0
7652: ST_TO_ADDR
// sFire := false ;
7653: LD_ADDR_EXP 39
7657: PUSH
7658: LD_INT 0
7660: ST_TO_ADDR
// sRefresh := false ;
7661: LD_ADDR_EXP 40
7665: PUSH
7666: LD_INT 0
7668: ST_TO_ADDR
// sExp := false ;
7669: LD_ADDR_EXP 41
7673: PUSH
7674: LD_INT 0
7676: ST_TO_ADDR
// sDepot := false ;
7677: LD_ADDR_EXP 42
7681: PUSH
7682: LD_INT 0
7684: ST_TO_ADDR
// sFlag := false ;
7685: LD_ADDR_EXP 43
7689: PUSH
7690: LD_INT 0
7692: ST_TO_ADDR
// sKamikadze := false ;
7693: LD_ADDR_EXP 51
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// sTroll := false ;
7701: LD_ADDR_EXP 52
7705: PUSH
7706: LD_INT 0
7708: ST_TO_ADDR
// sSlow := false ;
7709: LD_ADDR_EXP 53
7713: PUSH
7714: LD_INT 0
7716: ST_TO_ADDR
// sLack := false ;
7717: LD_ADDR_EXP 54
7721: PUSH
7722: LD_INT 0
7724: ST_TO_ADDR
// sTank := false ;
7725: LD_ADDR_EXP 56
7729: PUSH
7730: LD_INT 0
7732: ST_TO_ADDR
// sRemote := false ;
7733: LD_ADDR_EXP 57
7737: PUSH
7738: LD_INT 0
7740: ST_TO_ADDR
// sPowell := false ;
7741: LD_ADDR_EXP 58
7745: PUSH
7746: LD_INT 0
7748: ST_TO_ADDR
// sTeleport := false ;
7749: LD_ADDR_EXP 61
7753: PUSH
7754: LD_INT 0
7756: ST_TO_ADDR
// sOilTower := false ;
7757: LD_ADDR_EXP 63
7761: PUSH
7762: LD_INT 0
7764: ST_TO_ADDR
// sShovel := false ;
7765: LD_ADDR_EXP 64
7769: PUSH
7770: LD_INT 0
7772: ST_TO_ADDR
// sSheik := false ;
7773: LD_ADDR_EXP 65
7777: PUSH
7778: LD_INT 0
7780: ST_TO_ADDR
// sEarthquake := false ;
7781: LD_ADDR_EXP 67
7785: PUSH
7786: LD_INT 0
7788: ST_TO_ADDR
// sAI := false ;
7789: LD_ADDR_EXP 68
7793: PUSH
7794: LD_INT 0
7796: ST_TO_ADDR
// sCargo := false ;
7797: LD_ADDR_EXP 71
7801: PUSH
7802: LD_INT 0
7804: ST_TO_ADDR
// sDLaser := false ;
7805: LD_ADDR_EXP 72
7809: PUSH
7810: LD_INT 0
7812: ST_TO_ADDR
// sExchange := false ;
7813: LD_ADDR_EXP 73
7817: PUSH
7818: LD_INT 0
7820: ST_TO_ADDR
// sFac := false ;
7821: LD_ADDR_EXP 74
7825: PUSH
7826: LD_INT 0
7828: ST_TO_ADDR
// sPower := false ;
7829: LD_ADDR_EXP 75
7833: PUSH
7834: LD_INT 0
7836: ST_TO_ADDR
// sRandom := false ;
7837: LD_ADDR_EXP 76
7841: PUSH
7842: LD_INT 0
7844: ST_TO_ADDR
// sShield := false ;
7845: LD_ADDR_EXP 77
7849: PUSH
7850: LD_INT 0
7852: ST_TO_ADDR
// sTime := false ;
7853: LD_ADDR_EXP 78
7857: PUSH
7858: LD_INT 0
7860: ST_TO_ADDR
// sTools := false ;
7861: LD_ADDR_EXP 79
7865: PUSH
7866: LD_INT 0
7868: ST_TO_ADDR
// sSold := false ;
7869: LD_ADDR_EXP 44
7873: PUSH
7874: LD_INT 0
7876: ST_TO_ADDR
// sDiff := false ;
7877: LD_ADDR_EXP 45
7881: PUSH
7882: LD_INT 0
7884: ST_TO_ADDR
// sFog := false ;
7885: LD_ADDR_EXP 48
7889: PUSH
7890: LD_INT 0
7892: ST_TO_ADDR
// sReset := false ;
7893: LD_ADDR_EXP 49
7897: PUSH
7898: LD_INT 0
7900: ST_TO_ADDR
// sSun := false ;
7901: LD_ADDR_EXP 50
7905: PUSH
7906: LD_INT 0
7908: ST_TO_ADDR
// sTiger := false ;
7909: LD_ADDR_EXP 46
7913: PUSH
7914: LD_INT 0
7916: ST_TO_ADDR
// sBomb := false ;
7917: LD_ADDR_EXP 47
7921: PUSH
7922: LD_INT 0
7924: ST_TO_ADDR
// sWound := false ;
7925: LD_ADDR_EXP 55
7929: PUSH
7930: LD_INT 0
7932: ST_TO_ADDR
// sBetray := false ;
7933: LD_ADDR_EXP 59
7937: PUSH
7938: LD_INT 0
7940: ST_TO_ADDR
// sContamin := false ;
7941: LD_ADDR_EXP 60
7945: PUSH
7946: LD_INT 0
7948: ST_TO_ADDR
// sOil := false ;
7949: LD_ADDR_EXP 62
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// sStu := false ;
7957: LD_ADDR_EXP 66
7961: PUSH
7962: LD_INT 0
7964: ST_TO_ADDR
// sBazooka := false ;
7965: LD_ADDR_EXP 69
7969: PUSH
7970: LD_INT 0
7972: ST_TO_ADDR
// sMortar := false ;
7973: LD_ADDR_EXP 70
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// sRanger := false ;
7981: LD_ADDR_EXP 80
7985: PUSH
7986: LD_INT 0
7988: ST_TO_ADDR
// end ;
7989: LD_VAR 0 1
7993: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7994: LD_INT 0
7996: PPUSH
7997: PPUSH
7998: PPUSH
7999: PPUSH
8000: PPUSH
// result := [ ] ;
8001: LD_ADDR_VAR 0 1
8005: PUSH
8006: EMPTY
8007: ST_TO_ADDR
// if campaign_id = 1 then
8008: LD_OWVAR 69
8012: PUSH
8013: LD_INT 1
8015: EQUAL
8016: IFFALSE 10954
// begin case mission_number of 1 :
8018: LD_OWVAR 70
8022: PUSH
8023: LD_INT 1
8025: DOUBLE
8026: EQUAL
8027: IFTRUE 8031
8029: GO 8095
8031: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8032: LD_ADDR_VAR 0 1
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 4
8042: PUSH
8043: LD_INT 11
8045: PUSH
8046: LD_INT 12
8048: PUSH
8049: LD_INT 15
8051: PUSH
8052: LD_INT 16
8054: PUSH
8055: LD_INT 22
8057: PUSH
8058: LD_INT 23
8060: PUSH
8061: LD_INT 26
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 101
8077: PUSH
8078: LD_INT 102
8080: PUSH
8081: LD_INT 106
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: ST_TO_ADDR
8093: GO 10952
8095: LD_INT 2
8097: DOUBLE
8098: EQUAL
8099: IFTRUE 8103
8101: GO 8175
8103: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8104: LD_ADDR_VAR 0 1
8108: PUSH
8109: LD_INT 2
8111: PUSH
8112: LD_INT 4
8114: PUSH
8115: LD_INT 11
8117: PUSH
8118: LD_INT 12
8120: PUSH
8121: LD_INT 15
8123: PUSH
8124: LD_INT 16
8126: PUSH
8127: LD_INT 22
8129: PUSH
8130: LD_INT 23
8132: PUSH
8133: LD_INT 26
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 101
8149: PUSH
8150: LD_INT 102
8152: PUSH
8153: LD_INT 105
8155: PUSH
8156: LD_INT 106
8158: PUSH
8159: LD_INT 108
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: ST_TO_ADDR
8173: GO 10952
8175: LD_INT 3
8177: DOUBLE
8178: EQUAL
8179: IFTRUE 8183
8181: GO 8259
8183: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8184: LD_ADDR_VAR 0 1
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: LD_INT 4
8194: PUSH
8195: LD_INT 5
8197: PUSH
8198: LD_INT 11
8200: PUSH
8201: LD_INT 12
8203: PUSH
8204: LD_INT 15
8206: PUSH
8207: LD_INT 16
8209: PUSH
8210: LD_INT 22
8212: PUSH
8213: LD_INT 26
8215: PUSH
8216: LD_INT 36
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 101
8233: PUSH
8234: LD_INT 102
8236: PUSH
8237: LD_INT 105
8239: PUSH
8240: LD_INT 106
8242: PUSH
8243: LD_INT 108
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: ST_TO_ADDR
8257: GO 10952
8259: LD_INT 4
8261: DOUBLE
8262: EQUAL
8263: IFTRUE 8267
8265: GO 8351
8267: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8268: LD_ADDR_VAR 0 1
8272: PUSH
8273: LD_INT 2
8275: PUSH
8276: LD_INT 4
8278: PUSH
8279: LD_INT 5
8281: PUSH
8282: LD_INT 8
8284: PUSH
8285: LD_INT 11
8287: PUSH
8288: LD_INT 12
8290: PUSH
8291: LD_INT 15
8293: PUSH
8294: LD_INT 16
8296: PUSH
8297: LD_INT 22
8299: PUSH
8300: LD_INT 23
8302: PUSH
8303: LD_INT 26
8305: PUSH
8306: LD_INT 36
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 101
8325: PUSH
8326: LD_INT 102
8328: PUSH
8329: LD_INT 105
8331: PUSH
8332: LD_INT 106
8334: PUSH
8335: LD_INT 108
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: ST_TO_ADDR
8349: GO 10952
8351: LD_INT 5
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8459
8359: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8360: LD_ADDR_VAR 0 1
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 4
8370: PUSH
8371: LD_INT 5
8373: PUSH
8374: LD_INT 6
8376: PUSH
8377: LD_INT 8
8379: PUSH
8380: LD_INT 11
8382: PUSH
8383: LD_INT 12
8385: PUSH
8386: LD_INT 15
8388: PUSH
8389: LD_INT 16
8391: PUSH
8392: LD_INT 22
8394: PUSH
8395: LD_INT 23
8397: PUSH
8398: LD_INT 25
8400: PUSH
8401: LD_INT 26
8403: PUSH
8404: LD_INT 36
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: PUSH
8423: LD_INT 101
8425: PUSH
8426: LD_INT 102
8428: PUSH
8429: LD_INT 105
8431: PUSH
8432: LD_INT 106
8434: PUSH
8435: LD_INT 108
8437: PUSH
8438: LD_INT 109
8440: PUSH
8441: LD_INT 112
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: ST_TO_ADDR
8457: GO 10952
8459: LD_INT 6
8461: DOUBLE
8462: EQUAL
8463: IFTRUE 8467
8465: GO 8587
8467: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8468: LD_ADDR_VAR 0 1
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: LD_INT 4
8478: PUSH
8479: LD_INT 5
8481: PUSH
8482: LD_INT 6
8484: PUSH
8485: LD_INT 8
8487: PUSH
8488: LD_INT 11
8490: PUSH
8491: LD_INT 12
8493: PUSH
8494: LD_INT 15
8496: PUSH
8497: LD_INT 16
8499: PUSH
8500: LD_INT 20
8502: PUSH
8503: LD_INT 21
8505: PUSH
8506: LD_INT 22
8508: PUSH
8509: LD_INT 23
8511: PUSH
8512: LD_INT 25
8514: PUSH
8515: LD_INT 26
8517: PUSH
8518: LD_INT 30
8520: PUSH
8521: LD_INT 31
8523: PUSH
8524: LD_INT 32
8526: PUSH
8527: LD_INT 36
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 101
8553: PUSH
8554: LD_INT 102
8556: PUSH
8557: LD_INT 105
8559: PUSH
8560: LD_INT 106
8562: PUSH
8563: LD_INT 108
8565: PUSH
8566: LD_INT 109
8568: PUSH
8569: LD_INT 112
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: ST_TO_ADDR
8585: GO 10952
8587: LD_INT 7
8589: DOUBLE
8590: EQUAL
8591: IFTRUE 8595
8593: GO 8695
8595: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8596: LD_ADDR_VAR 0 1
8600: PUSH
8601: LD_INT 2
8603: PUSH
8604: LD_INT 4
8606: PUSH
8607: LD_INT 5
8609: PUSH
8610: LD_INT 7
8612: PUSH
8613: LD_INT 11
8615: PUSH
8616: LD_INT 12
8618: PUSH
8619: LD_INT 15
8621: PUSH
8622: LD_INT 16
8624: PUSH
8625: LD_INT 20
8627: PUSH
8628: LD_INT 21
8630: PUSH
8631: LD_INT 22
8633: PUSH
8634: LD_INT 23
8636: PUSH
8637: LD_INT 25
8639: PUSH
8640: LD_INT 26
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 101
8661: PUSH
8662: LD_INT 102
8664: PUSH
8665: LD_INT 103
8667: PUSH
8668: LD_INT 105
8670: PUSH
8671: LD_INT 106
8673: PUSH
8674: LD_INT 108
8676: PUSH
8677: LD_INT 112
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: ST_TO_ADDR
8693: GO 10952
8695: LD_INT 8
8697: DOUBLE
8698: EQUAL
8699: IFTRUE 8703
8701: GO 8831
8703: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8704: LD_ADDR_VAR 0 1
8708: PUSH
8709: LD_INT 2
8711: PUSH
8712: LD_INT 4
8714: PUSH
8715: LD_INT 5
8717: PUSH
8718: LD_INT 6
8720: PUSH
8721: LD_INT 7
8723: PUSH
8724: LD_INT 8
8726: PUSH
8727: LD_INT 11
8729: PUSH
8730: LD_INT 12
8732: PUSH
8733: LD_INT 15
8735: PUSH
8736: LD_INT 16
8738: PUSH
8739: LD_INT 20
8741: PUSH
8742: LD_INT 21
8744: PUSH
8745: LD_INT 22
8747: PUSH
8748: LD_INT 23
8750: PUSH
8751: LD_INT 25
8753: PUSH
8754: LD_INT 26
8756: PUSH
8757: LD_INT 30
8759: PUSH
8760: LD_INT 31
8762: PUSH
8763: LD_INT 32
8765: PUSH
8766: LD_INT 36
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 101
8793: PUSH
8794: LD_INT 102
8796: PUSH
8797: LD_INT 103
8799: PUSH
8800: LD_INT 105
8802: PUSH
8803: LD_INT 106
8805: PUSH
8806: LD_INT 108
8808: PUSH
8809: LD_INT 109
8811: PUSH
8812: LD_INT 112
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: ST_TO_ADDR
8829: GO 10952
8831: LD_INT 9
8833: DOUBLE
8834: EQUAL
8835: IFTRUE 8839
8837: GO 8975
8839: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8840: LD_ADDR_VAR 0 1
8844: PUSH
8845: LD_INT 2
8847: PUSH
8848: LD_INT 4
8850: PUSH
8851: LD_INT 5
8853: PUSH
8854: LD_INT 6
8856: PUSH
8857: LD_INT 7
8859: PUSH
8860: LD_INT 8
8862: PUSH
8863: LD_INT 11
8865: PUSH
8866: LD_INT 12
8868: PUSH
8869: LD_INT 15
8871: PUSH
8872: LD_INT 16
8874: PUSH
8875: LD_INT 20
8877: PUSH
8878: LD_INT 21
8880: PUSH
8881: LD_INT 22
8883: PUSH
8884: LD_INT 23
8886: PUSH
8887: LD_INT 25
8889: PUSH
8890: LD_INT 26
8892: PUSH
8893: LD_INT 28
8895: PUSH
8896: LD_INT 30
8898: PUSH
8899: LD_INT 31
8901: PUSH
8902: LD_INT 32
8904: PUSH
8905: LD_INT 36
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 101
8933: PUSH
8934: LD_INT 102
8936: PUSH
8937: LD_INT 103
8939: PUSH
8940: LD_INT 105
8942: PUSH
8943: LD_INT 106
8945: PUSH
8946: LD_INT 108
8948: PUSH
8949: LD_INT 109
8951: PUSH
8952: LD_INT 112
8954: PUSH
8955: LD_INT 114
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: ST_TO_ADDR
8973: GO 10952
8975: LD_INT 10
8977: DOUBLE
8978: EQUAL
8979: IFTRUE 8983
8981: GO 9167
8983: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8984: LD_ADDR_VAR 0 1
8988: PUSH
8989: LD_INT 2
8991: PUSH
8992: LD_INT 4
8994: PUSH
8995: LD_INT 5
8997: PUSH
8998: LD_INT 6
9000: PUSH
9001: LD_INT 7
9003: PUSH
9004: LD_INT 8
9006: PUSH
9007: LD_INT 9
9009: PUSH
9010: LD_INT 10
9012: PUSH
9013: LD_INT 11
9015: PUSH
9016: LD_INT 12
9018: PUSH
9019: LD_INT 13
9021: PUSH
9022: LD_INT 14
9024: PUSH
9025: LD_INT 15
9027: PUSH
9028: LD_INT 16
9030: PUSH
9031: LD_INT 17
9033: PUSH
9034: LD_INT 18
9036: PUSH
9037: LD_INT 19
9039: PUSH
9040: LD_INT 20
9042: PUSH
9043: LD_INT 21
9045: PUSH
9046: LD_INT 22
9048: PUSH
9049: LD_INT 23
9051: PUSH
9052: LD_INT 24
9054: PUSH
9055: LD_INT 25
9057: PUSH
9058: LD_INT 26
9060: PUSH
9061: LD_INT 28
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_INT 31
9069: PUSH
9070: LD_INT 32
9072: PUSH
9073: LD_INT 36
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 101
9109: PUSH
9110: LD_INT 102
9112: PUSH
9113: LD_INT 103
9115: PUSH
9116: LD_INT 104
9118: PUSH
9119: LD_INT 105
9121: PUSH
9122: LD_INT 106
9124: PUSH
9125: LD_INT 107
9127: PUSH
9128: LD_INT 108
9130: PUSH
9131: LD_INT 109
9133: PUSH
9134: LD_INT 110
9136: PUSH
9137: LD_INT 111
9139: PUSH
9140: LD_INT 112
9142: PUSH
9143: LD_INT 114
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: ST_TO_ADDR
9165: GO 10952
9167: LD_INT 11
9169: DOUBLE
9170: EQUAL
9171: IFTRUE 9175
9173: GO 9367
9175: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9176: LD_ADDR_VAR 0 1
9180: PUSH
9181: LD_INT 2
9183: PUSH
9184: LD_INT 3
9186: PUSH
9187: LD_INT 4
9189: PUSH
9190: LD_INT 5
9192: PUSH
9193: LD_INT 6
9195: PUSH
9196: LD_INT 7
9198: PUSH
9199: LD_INT 8
9201: PUSH
9202: LD_INT 9
9204: PUSH
9205: LD_INT 10
9207: PUSH
9208: LD_INT 11
9210: PUSH
9211: LD_INT 12
9213: PUSH
9214: LD_INT 13
9216: PUSH
9217: LD_INT 14
9219: PUSH
9220: LD_INT 15
9222: PUSH
9223: LD_INT 16
9225: PUSH
9226: LD_INT 17
9228: PUSH
9229: LD_INT 18
9231: PUSH
9232: LD_INT 19
9234: PUSH
9235: LD_INT 20
9237: PUSH
9238: LD_INT 21
9240: PUSH
9241: LD_INT 22
9243: PUSH
9244: LD_INT 23
9246: PUSH
9247: LD_INT 24
9249: PUSH
9250: LD_INT 25
9252: PUSH
9253: LD_INT 26
9255: PUSH
9256: LD_INT 28
9258: PUSH
9259: LD_INT 30
9261: PUSH
9262: LD_INT 31
9264: PUSH
9265: LD_INT 32
9267: PUSH
9268: LD_INT 34
9270: PUSH
9271: LD_INT 36
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 101
9309: PUSH
9310: LD_INT 102
9312: PUSH
9313: LD_INT 103
9315: PUSH
9316: LD_INT 104
9318: PUSH
9319: LD_INT 105
9321: PUSH
9322: LD_INT 106
9324: PUSH
9325: LD_INT 107
9327: PUSH
9328: LD_INT 108
9330: PUSH
9331: LD_INT 109
9333: PUSH
9334: LD_INT 110
9336: PUSH
9337: LD_INT 111
9339: PUSH
9340: LD_INT 112
9342: PUSH
9343: LD_INT 114
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: ST_TO_ADDR
9365: GO 10952
9367: LD_INT 12
9369: DOUBLE
9370: EQUAL
9371: IFTRUE 9375
9373: GO 9583
9375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9376: LD_ADDR_VAR 0 1
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: LD_INT 2
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 4
9392: PUSH
9393: LD_INT 5
9395: PUSH
9396: LD_INT 6
9398: PUSH
9399: LD_INT 7
9401: PUSH
9402: LD_INT 8
9404: PUSH
9405: LD_INT 9
9407: PUSH
9408: LD_INT 10
9410: PUSH
9411: LD_INT 11
9413: PUSH
9414: LD_INT 12
9416: PUSH
9417: LD_INT 13
9419: PUSH
9420: LD_INT 14
9422: PUSH
9423: LD_INT 15
9425: PUSH
9426: LD_INT 16
9428: PUSH
9429: LD_INT 17
9431: PUSH
9432: LD_INT 18
9434: PUSH
9435: LD_INT 19
9437: PUSH
9438: LD_INT 20
9440: PUSH
9441: LD_INT 21
9443: PUSH
9444: LD_INT 22
9446: PUSH
9447: LD_INT 23
9449: PUSH
9450: LD_INT 24
9452: PUSH
9453: LD_INT 25
9455: PUSH
9456: LD_INT 26
9458: PUSH
9459: LD_INT 27
9461: PUSH
9462: LD_INT 28
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: LD_INT 31
9470: PUSH
9471: LD_INT 32
9473: PUSH
9474: LD_INT 33
9476: PUSH
9477: LD_INT 34
9479: PUSH
9480: LD_INT 36
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 101
9521: PUSH
9522: LD_INT 102
9524: PUSH
9525: LD_INT 103
9527: PUSH
9528: LD_INT 104
9530: PUSH
9531: LD_INT 105
9533: PUSH
9534: LD_INT 106
9536: PUSH
9537: LD_INT 107
9539: PUSH
9540: LD_INT 108
9542: PUSH
9543: LD_INT 109
9545: PUSH
9546: LD_INT 110
9548: PUSH
9549: LD_INT 111
9551: PUSH
9552: LD_INT 112
9554: PUSH
9555: LD_INT 113
9557: PUSH
9558: LD_INT 114
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: ST_TO_ADDR
9581: GO 10952
9583: LD_INT 13
9585: DOUBLE
9586: EQUAL
9587: IFTRUE 9591
9589: GO 9787
9591: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9592: LD_ADDR_VAR 0 1
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: LD_INT 3
9605: PUSH
9606: LD_INT 4
9608: PUSH
9609: LD_INT 5
9611: PUSH
9612: LD_INT 8
9614: PUSH
9615: LD_INT 9
9617: PUSH
9618: LD_INT 10
9620: PUSH
9621: LD_INT 11
9623: PUSH
9624: LD_INT 12
9626: PUSH
9627: LD_INT 14
9629: PUSH
9630: LD_INT 15
9632: PUSH
9633: LD_INT 16
9635: PUSH
9636: LD_INT 17
9638: PUSH
9639: LD_INT 18
9641: PUSH
9642: LD_INT 19
9644: PUSH
9645: LD_INT 20
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 22
9653: PUSH
9654: LD_INT 23
9656: PUSH
9657: LD_INT 24
9659: PUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 26
9665: PUSH
9666: LD_INT 27
9668: PUSH
9669: LD_INT 28
9671: PUSH
9672: LD_INT 30
9674: PUSH
9675: LD_INT 31
9677: PUSH
9678: LD_INT 32
9680: PUSH
9681: LD_INT 33
9683: PUSH
9684: LD_INT 34
9686: PUSH
9687: LD_INT 36
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 101
9725: PUSH
9726: LD_INT 102
9728: PUSH
9729: LD_INT 103
9731: PUSH
9732: LD_INT 104
9734: PUSH
9735: LD_INT 105
9737: PUSH
9738: LD_INT 106
9740: PUSH
9741: LD_INT 107
9743: PUSH
9744: LD_INT 108
9746: PUSH
9747: LD_INT 109
9749: PUSH
9750: LD_INT 110
9752: PUSH
9753: LD_INT 111
9755: PUSH
9756: LD_INT 112
9758: PUSH
9759: LD_INT 113
9761: PUSH
9762: LD_INT 114
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: ST_TO_ADDR
9785: GO 10952
9787: LD_INT 14
9789: DOUBLE
9790: EQUAL
9791: IFTRUE 9795
9793: GO 10007
9795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9796: LD_ADDR_VAR 0 1
9800: PUSH
9801: LD_INT 1
9803: PUSH
9804: LD_INT 2
9806: PUSH
9807: LD_INT 3
9809: PUSH
9810: LD_INT 4
9812: PUSH
9813: LD_INT 5
9815: PUSH
9816: LD_INT 6
9818: PUSH
9819: LD_INT 7
9821: PUSH
9822: LD_INT 8
9824: PUSH
9825: LD_INT 9
9827: PUSH
9828: LD_INT 10
9830: PUSH
9831: LD_INT 11
9833: PUSH
9834: LD_INT 12
9836: PUSH
9837: LD_INT 13
9839: PUSH
9840: LD_INT 14
9842: PUSH
9843: LD_INT 15
9845: PUSH
9846: LD_INT 16
9848: PUSH
9849: LD_INT 17
9851: PUSH
9852: LD_INT 18
9854: PUSH
9855: LD_INT 19
9857: PUSH
9858: LD_INT 20
9860: PUSH
9861: LD_INT 21
9863: PUSH
9864: LD_INT 22
9866: PUSH
9867: LD_INT 23
9869: PUSH
9870: LD_INT 24
9872: PUSH
9873: LD_INT 25
9875: PUSH
9876: LD_INT 26
9878: PUSH
9879: LD_INT 27
9881: PUSH
9882: LD_INT 28
9884: PUSH
9885: LD_INT 29
9887: PUSH
9888: LD_INT 30
9890: PUSH
9891: LD_INT 31
9893: PUSH
9894: LD_INT 32
9896: PUSH
9897: LD_INT 33
9899: PUSH
9900: LD_INT 34
9902: PUSH
9903: LD_INT 36
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 101
9945: PUSH
9946: LD_INT 102
9948: PUSH
9949: LD_INT 103
9951: PUSH
9952: LD_INT 104
9954: PUSH
9955: LD_INT 105
9957: PUSH
9958: LD_INT 106
9960: PUSH
9961: LD_INT 107
9963: PUSH
9964: LD_INT 108
9966: PUSH
9967: LD_INT 109
9969: PUSH
9970: LD_INT 110
9972: PUSH
9973: LD_INT 111
9975: PUSH
9976: LD_INT 112
9978: PUSH
9979: LD_INT 113
9981: PUSH
9982: LD_INT 114
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: ST_TO_ADDR
10005: GO 10952
10007: LD_INT 15
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10227
10015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10016: LD_ADDR_VAR 0 1
10020: PUSH
10021: LD_INT 1
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: LD_INT 4
10032: PUSH
10033: LD_INT 5
10035: PUSH
10036: LD_INT 6
10038: PUSH
10039: LD_INT 7
10041: PUSH
10042: LD_INT 8
10044: PUSH
10045: LD_INT 9
10047: PUSH
10048: LD_INT 10
10050: PUSH
10051: LD_INT 11
10053: PUSH
10054: LD_INT 12
10056: PUSH
10057: LD_INT 13
10059: PUSH
10060: LD_INT 14
10062: PUSH
10063: LD_INT 15
10065: PUSH
10066: LD_INT 16
10068: PUSH
10069: LD_INT 17
10071: PUSH
10072: LD_INT 18
10074: PUSH
10075: LD_INT 19
10077: PUSH
10078: LD_INT 20
10080: PUSH
10081: LD_INT 21
10083: PUSH
10084: LD_INT 22
10086: PUSH
10087: LD_INT 23
10089: PUSH
10090: LD_INT 24
10092: PUSH
10093: LD_INT 25
10095: PUSH
10096: LD_INT 26
10098: PUSH
10099: LD_INT 27
10101: PUSH
10102: LD_INT 28
10104: PUSH
10105: LD_INT 29
10107: PUSH
10108: LD_INT 30
10110: PUSH
10111: LD_INT 31
10113: PUSH
10114: LD_INT 32
10116: PUSH
10117: LD_INT 33
10119: PUSH
10120: LD_INT 34
10122: PUSH
10123: LD_INT 36
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 101
10165: PUSH
10166: LD_INT 102
10168: PUSH
10169: LD_INT 103
10171: PUSH
10172: LD_INT 104
10174: PUSH
10175: LD_INT 105
10177: PUSH
10178: LD_INT 106
10180: PUSH
10181: LD_INT 107
10183: PUSH
10184: LD_INT 108
10186: PUSH
10187: LD_INT 109
10189: PUSH
10190: LD_INT 110
10192: PUSH
10193: LD_INT 111
10195: PUSH
10196: LD_INT 112
10198: PUSH
10199: LD_INT 113
10201: PUSH
10202: LD_INT 114
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: ST_TO_ADDR
10225: GO 10952
10227: LD_INT 16
10229: DOUBLE
10230: EQUAL
10231: IFTRUE 10235
10233: GO 10359
10235: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10236: LD_ADDR_VAR 0 1
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: LD_INT 4
10246: PUSH
10247: LD_INT 5
10249: PUSH
10250: LD_INT 7
10252: PUSH
10253: LD_INT 11
10255: PUSH
10256: LD_INT 12
10258: PUSH
10259: LD_INT 15
10261: PUSH
10262: LD_INT 16
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 25
10279: PUSH
10280: LD_INT 26
10282: PUSH
10283: LD_INT 30
10285: PUSH
10286: LD_INT 31
10288: PUSH
10289: LD_INT 32
10291: PUSH
10292: LD_INT 33
10294: PUSH
10295: LD_INT 34
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: PUSH
10319: LD_INT 101
10321: PUSH
10322: LD_INT 102
10324: PUSH
10325: LD_INT 103
10327: PUSH
10328: LD_INT 106
10330: PUSH
10331: LD_INT 108
10333: PUSH
10334: LD_INT 112
10336: PUSH
10337: LD_INT 113
10339: PUSH
10340: LD_INT 114
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: ST_TO_ADDR
10357: GO 10952
10359: LD_INT 17
10361: DOUBLE
10362: EQUAL
10363: IFTRUE 10367
10365: GO 10579
10367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10368: LD_ADDR_VAR 0 1
10372: PUSH
10373: LD_INT 1
10375: PUSH
10376: LD_INT 2
10378: PUSH
10379: LD_INT 3
10381: PUSH
10382: LD_INT 4
10384: PUSH
10385: LD_INT 5
10387: PUSH
10388: LD_INT 6
10390: PUSH
10391: LD_INT 7
10393: PUSH
10394: LD_INT 8
10396: PUSH
10397: LD_INT 9
10399: PUSH
10400: LD_INT 10
10402: PUSH
10403: LD_INT 11
10405: PUSH
10406: LD_INT 12
10408: PUSH
10409: LD_INT 13
10411: PUSH
10412: LD_INT 14
10414: PUSH
10415: LD_INT 15
10417: PUSH
10418: LD_INT 16
10420: PUSH
10421: LD_INT 17
10423: PUSH
10424: LD_INT 18
10426: PUSH
10427: LD_INT 19
10429: PUSH
10430: LD_INT 20
10432: PUSH
10433: LD_INT 21
10435: PUSH
10436: LD_INT 22
10438: PUSH
10439: LD_INT 23
10441: PUSH
10442: LD_INT 24
10444: PUSH
10445: LD_INT 25
10447: PUSH
10448: LD_INT 26
10450: PUSH
10451: LD_INT 27
10453: PUSH
10454: LD_INT 28
10456: PUSH
10457: LD_INT 29
10459: PUSH
10460: LD_INT 30
10462: PUSH
10463: LD_INT 31
10465: PUSH
10466: LD_INT 32
10468: PUSH
10469: LD_INT 33
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 36
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 101
10517: PUSH
10518: LD_INT 102
10520: PUSH
10521: LD_INT 103
10523: PUSH
10524: LD_INT 104
10526: PUSH
10527: LD_INT 105
10529: PUSH
10530: LD_INT 106
10532: PUSH
10533: LD_INT 107
10535: PUSH
10536: LD_INT 108
10538: PUSH
10539: LD_INT 109
10541: PUSH
10542: LD_INT 110
10544: PUSH
10545: LD_INT 111
10547: PUSH
10548: LD_INT 112
10550: PUSH
10551: LD_INT 113
10553: PUSH
10554: LD_INT 114
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: ST_TO_ADDR
10577: GO 10952
10579: LD_INT 18
10581: DOUBLE
10582: EQUAL
10583: IFTRUE 10587
10585: GO 10723
10587: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10588: LD_ADDR_VAR 0 1
10592: PUSH
10593: LD_INT 2
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: LD_INT 5
10601: PUSH
10602: LD_INT 7
10604: PUSH
10605: LD_INT 11
10607: PUSH
10608: LD_INT 12
10610: PUSH
10611: LD_INT 15
10613: PUSH
10614: LD_INT 16
10616: PUSH
10617: LD_INT 20
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 22
10625: PUSH
10626: LD_INT 23
10628: PUSH
10629: LD_INT 25
10631: PUSH
10632: LD_INT 26
10634: PUSH
10635: LD_INT 30
10637: PUSH
10638: LD_INT 31
10640: PUSH
10641: LD_INT 32
10643: PUSH
10644: LD_INT 33
10646: PUSH
10647: LD_INT 34
10649: PUSH
10650: LD_INT 35
10652: PUSH
10653: LD_INT 36
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 101
10681: PUSH
10682: LD_INT 102
10684: PUSH
10685: LD_INT 103
10687: PUSH
10688: LD_INT 106
10690: PUSH
10691: LD_INT 108
10693: PUSH
10694: LD_INT 112
10696: PUSH
10697: LD_INT 113
10699: PUSH
10700: LD_INT 114
10702: PUSH
10703: LD_INT 115
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: ST_TO_ADDR
10721: GO 10952
10723: LD_INT 19
10725: DOUBLE
10726: EQUAL
10727: IFTRUE 10731
10729: GO 10951
10731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: LD_INT 3
10745: PUSH
10746: LD_INT 4
10748: PUSH
10749: LD_INT 5
10751: PUSH
10752: LD_INT 6
10754: PUSH
10755: LD_INT 7
10757: PUSH
10758: LD_INT 8
10760: PUSH
10761: LD_INT 9
10763: PUSH
10764: LD_INT 10
10766: PUSH
10767: LD_INT 11
10769: PUSH
10770: LD_INT 12
10772: PUSH
10773: LD_INT 13
10775: PUSH
10776: LD_INT 14
10778: PUSH
10779: LD_INT 15
10781: PUSH
10782: LD_INT 16
10784: PUSH
10785: LD_INT 17
10787: PUSH
10788: LD_INT 18
10790: PUSH
10791: LD_INT 19
10793: PUSH
10794: LD_INT 20
10796: PUSH
10797: LD_INT 21
10799: PUSH
10800: LD_INT 22
10802: PUSH
10803: LD_INT 23
10805: PUSH
10806: LD_INT 24
10808: PUSH
10809: LD_INT 25
10811: PUSH
10812: LD_INT 26
10814: PUSH
10815: LD_INT 27
10817: PUSH
10818: LD_INT 28
10820: PUSH
10821: LD_INT 29
10823: PUSH
10824: LD_INT 30
10826: PUSH
10827: LD_INT 31
10829: PUSH
10830: LD_INT 32
10832: PUSH
10833: LD_INT 33
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 35
10841: PUSH
10842: LD_INT 36
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 101
10885: PUSH
10886: LD_INT 102
10888: PUSH
10889: LD_INT 103
10891: PUSH
10892: LD_INT 104
10894: PUSH
10895: LD_INT 105
10897: PUSH
10898: LD_INT 106
10900: PUSH
10901: LD_INT 107
10903: PUSH
10904: LD_INT 108
10906: PUSH
10907: LD_INT 109
10909: PUSH
10910: LD_INT 110
10912: PUSH
10913: LD_INT 111
10915: PUSH
10916: LD_INT 112
10918: PUSH
10919: LD_INT 113
10921: PUSH
10922: LD_INT 114
10924: PUSH
10925: LD_INT 115
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: ST_TO_ADDR
10949: GO 10952
10951: POP
// end else
10952: GO 11171
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10954: LD_ADDR_VAR 0 1
10958: PUSH
10959: LD_INT 1
10961: PUSH
10962: LD_INT 2
10964: PUSH
10965: LD_INT 3
10967: PUSH
10968: LD_INT 4
10970: PUSH
10971: LD_INT 5
10973: PUSH
10974: LD_INT 6
10976: PUSH
10977: LD_INT 7
10979: PUSH
10980: LD_INT 8
10982: PUSH
10983: LD_INT 9
10985: PUSH
10986: LD_INT 10
10988: PUSH
10989: LD_INT 11
10991: PUSH
10992: LD_INT 12
10994: PUSH
10995: LD_INT 13
10997: PUSH
10998: LD_INT 14
11000: PUSH
11001: LD_INT 15
11003: PUSH
11004: LD_INT 16
11006: PUSH
11007: LD_INT 17
11009: PUSH
11010: LD_INT 18
11012: PUSH
11013: LD_INT 19
11015: PUSH
11016: LD_INT 20
11018: PUSH
11019: LD_INT 21
11021: PUSH
11022: LD_INT 22
11024: PUSH
11025: LD_INT 23
11027: PUSH
11028: LD_INT 24
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 26
11036: PUSH
11037: LD_INT 27
11039: PUSH
11040: LD_INT 28
11042: PUSH
11043: LD_INT 29
11045: PUSH
11046: LD_INT 30
11048: PUSH
11049: LD_INT 31
11051: PUSH
11052: LD_INT 32
11054: PUSH
11055: LD_INT 33
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 35
11063: PUSH
11064: LD_INT 36
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 101
11107: PUSH
11108: LD_INT 102
11110: PUSH
11111: LD_INT 103
11113: PUSH
11114: LD_INT 104
11116: PUSH
11117: LD_INT 105
11119: PUSH
11120: LD_INT 106
11122: PUSH
11123: LD_INT 107
11125: PUSH
11126: LD_INT 108
11128: PUSH
11129: LD_INT 109
11131: PUSH
11132: LD_INT 110
11134: PUSH
11135: LD_INT 111
11137: PUSH
11138: LD_INT 112
11140: PUSH
11141: LD_INT 113
11143: PUSH
11144: LD_INT 114
11146: PUSH
11147: LD_INT 115
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: ST_TO_ADDR
// if result then
11171: LD_VAR 0 1
11175: IFFALSE 11464
// begin normal :=  ;
11177: LD_ADDR_VAR 0 3
11181: PUSH
11182: LD_STRING 
11184: ST_TO_ADDR
// hardcore :=  ;
11185: LD_ADDR_VAR 0 4
11189: PUSH
11190: LD_STRING 
11192: ST_TO_ADDR
// for i = 1 to normalCounter do
11193: LD_ADDR_VAR 0 5
11197: PUSH
11198: DOUBLE
11199: LD_INT 1
11201: DEC
11202: ST_TO_ADDR
11203: LD_EXP 28
11207: PUSH
11208: FOR_TO
11209: IFFALSE 11310
// begin tmp := 0 ;
11211: LD_ADDR_VAR 0 2
11215: PUSH
11216: LD_STRING 0
11218: ST_TO_ADDR
// if result [ 1 ] then
11219: LD_VAR 0 1
11223: PUSH
11224: LD_INT 1
11226: ARRAY
11227: IFFALSE 11292
// if result [ 1 ] [ 1 ] = i then
11229: LD_VAR 0 1
11233: PUSH
11234: LD_INT 1
11236: ARRAY
11237: PUSH
11238: LD_INT 1
11240: ARRAY
11241: PUSH
11242: LD_VAR 0 5
11246: EQUAL
11247: IFFALSE 11292
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11249: LD_ADDR_VAR 0 1
11253: PUSH
11254: LD_VAR 0 1
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: LD_VAR 0 1
11266: PUSH
11267: LD_INT 1
11269: ARRAY
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 3
11278: PPUSH
11279: CALL_OW 1
11283: ST_TO_ADDR
// tmp := 1 ;
11284: LD_ADDR_VAR 0 2
11288: PUSH
11289: LD_STRING 1
11291: ST_TO_ADDR
// end ; normal := normal & tmp ;
11292: LD_ADDR_VAR 0 3
11296: PUSH
11297: LD_VAR 0 3
11301: PUSH
11302: LD_VAR 0 2
11306: STR
11307: ST_TO_ADDR
// end ;
11308: GO 11208
11310: POP
11311: POP
// for i = 1 to hardcoreCounter do
11312: LD_ADDR_VAR 0 5
11316: PUSH
11317: DOUBLE
11318: LD_INT 1
11320: DEC
11321: ST_TO_ADDR
11322: LD_EXP 29
11326: PUSH
11327: FOR_TO
11328: IFFALSE 11433
// begin tmp := 0 ;
11330: LD_ADDR_VAR 0 2
11334: PUSH
11335: LD_STRING 0
11337: ST_TO_ADDR
// if result [ 2 ] then
11338: LD_VAR 0 1
11342: PUSH
11343: LD_INT 2
11345: ARRAY
11346: IFFALSE 11415
// if result [ 2 ] [ 1 ] = 100 + i then
11348: LD_VAR 0 1
11352: PUSH
11353: LD_INT 2
11355: ARRAY
11356: PUSH
11357: LD_INT 1
11359: ARRAY
11360: PUSH
11361: LD_INT 100
11363: PUSH
11364: LD_VAR 0 5
11368: PLUS
11369: EQUAL
11370: IFFALSE 11415
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11372: LD_ADDR_VAR 0 1
11376: PUSH
11377: LD_VAR 0 1
11381: PPUSH
11382: LD_INT 2
11384: PPUSH
11385: LD_VAR 0 1
11389: PUSH
11390: LD_INT 2
11392: ARRAY
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 3
11401: PPUSH
11402: CALL_OW 1
11406: ST_TO_ADDR
// tmp := 1 ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_STRING 1
11414: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11415: LD_ADDR_VAR 0 4
11419: PUSH
11420: LD_VAR 0 4
11424: PUSH
11425: LD_VAR 0 2
11429: STR
11430: ST_TO_ADDR
// end ;
11431: GO 11327
11433: POP
11434: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11435: LD_STRING getStreamItemsFromMission("
11437: PUSH
11438: LD_VAR 0 3
11442: STR
11443: PUSH
11444: LD_STRING ","
11446: STR
11447: PUSH
11448: LD_VAR 0 4
11452: STR
11453: PUSH
11454: LD_STRING ")
11456: STR
11457: PPUSH
11458: CALL_OW 559
// end else
11462: GO 11471
// ToLua ( getStreamItemsFromMission("","") ) ;
11464: LD_STRING getStreamItemsFromMission("","")
11466: PPUSH
11467: CALL_OW 559
// end ;
11471: LD_VAR 0 1
11475: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11476: LD_EXP 27
11480: PUSH
11481: LD_EXP 32
11485: AND
11486: IFFALSE 11610
11488: GO 11490
11490: DISABLE
11491: LD_INT 0
11493: PPUSH
11494: PPUSH
// begin enable ;
11495: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11496: LD_ADDR_VAR 0 2
11500: PUSH
11501: LD_INT 22
11503: PUSH
11504: LD_OWVAR 2
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: LD_INT 34
11518: PUSH
11519: LD_INT 7
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 34
11528: PUSH
11529: LD_INT 45
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 34
11538: PUSH
11539: LD_INT 28
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 34
11548: PUSH
11549: LD_INT 47
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PPUSH
11567: CALL_OW 69
11571: ST_TO_ADDR
// if not tmp then
11572: LD_VAR 0 2
11576: NOT
11577: IFFALSE 11581
// exit ;
11579: GO 11610
// for i in tmp do
11581: LD_ADDR_VAR 0 1
11585: PUSH
11586: LD_VAR 0 2
11590: PUSH
11591: FOR_IN
11592: IFFALSE 11608
// begin SetLives ( i , 0 ) ;
11594: LD_VAR 0 1
11598: PPUSH
11599: LD_INT 0
11601: PPUSH
11602: CALL_OW 234
// end ;
11606: GO 11591
11608: POP
11609: POP
// end ;
11610: PPOPN 2
11612: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11613: LD_EXP 27
11617: PUSH
11618: LD_EXP 33
11622: AND
11623: IFFALSE 11707
11625: GO 11627
11627: DISABLE
11628: LD_INT 0
11630: PPUSH
11631: PPUSH
// begin enable ;
11632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11633: LD_ADDR_VAR 0 2
11637: PUSH
11638: LD_INT 22
11640: PUSH
11641: LD_OWVAR 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 32
11652: PUSH
11653: LD_INT 3
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 69
11668: ST_TO_ADDR
// if not tmp then
11669: LD_VAR 0 2
11673: NOT
11674: IFFALSE 11678
// exit ;
11676: GO 11707
// for i in tmp do
11678: LD_ADDR_VAR 0 1
11682: PUSH
11683: LD_VAR 0 2
11687: PUSH
11688: FOR_IN
11689: IFFALSE 11705
// begin SetLives ( i , 0 ) ;
11691: LD_VAR 0 1
11695: PPUSH
11696: LD_INT 0
11698: PPUSH
11699: CALL_OW 234
// end ;
11703: GO 11688
11705: POP
11706: POP
// end ;
11707: PPOPN 2
11709: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11710: LD_EXP 27
11714: PUSH
11715: LD_EXP 30
11719: AND
11720: IFFALSE 11813
11722: GO 11724
11724: DISABLE
11725: LD_INT 0
11727: PPUSH
// begin enable ;
11728: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11729: LD_ADDR_VAR 0 1
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_OWVAR 2
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 2
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 5
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 25
11761: PUSH
11762: LD_INT 9
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 8
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11811
// begin SetClass ( i , 1 ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_INT 1
11804: PPUSH
11805: CALL_OW 336
// end ;
11809: GO 11794
11811: POP
11812: POP
// end ;
11813: PPOPN 1
11815: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11816: LD_EXP 27
11820: PUSH
11821: LD_EXP 31
11825: AND
11826: PUSH
11827: LD_OWVAR 65
11831: PUSH
11832: LD_INT 7
11834: LESS
11835: AND
11836: IFFALSE 11850
11838: GO 11840
11840: DISABLE
// begin enable ;
11841: ENABLE
// game_speed := 7 ;
11842: LD_ADDR_OWVAR 65
11846: PUSH
11847: LD_INT 7
11849: ST_TO_ADDR
// end ;
11850: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11851: LD_EXP 27
11855: PUSH
11856: LD_EXP 34
11860: AND
11861: IFFALSE 12063
11863: GO 11865
11865: DISABLE
11866: LD_INT 0
11868: PPUSH
11869: PPUSH
11870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11871: LD_ADDR_VAR 0 3
11875: PUSH
11876: LD_INT 81
11878: PUSH
11879: LD_OWVAR 2
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 21
11890: PUSH
11891: LD_INT 1
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PPUSH
11902: CALL_OW 69
11906: ST_TO_ADDR
// if not tmp then
11907: LD_VAR 0 3
11911: NOT
11912: IFFALSE 11916
// exit ;
11914: GO 12063
// if tmp > 5 then
11916: LD_VAR 0 3
11920: PUSH
11921: LD_INT 5
11923: GREATER
11924: IFFALSE 11936
// k := 5 else
11926: LD_ADDR_VAR 0 2
11930: PUSH
11931: LD_INT 5
11933: ST_TO_ADDR
11934: GO 11946
// k := tmp ;
11936: LD_ADDR_VAR 0 2
11940: PUSH
11941: LD_VAR 0 3
11945: ST_TO_ADDR
// for i := 1 to k do
11946: LD_ADDR_VAR 0 1
11950: PUSH
11951: DOUBLE
11952: LD_INT 1
11954: DEC
11955: ST_TO_ADDR
11956: LD_VAR 0 2
11960: PUSH
11961: FOR_TO
11962: IFFALSE 12061
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_VAR 0 1
11973: ARRAY
11974: PPUSH
11975: LD_VAR 0 1
11979: PUSH
11980: LD_INT 4
11982: MOD
11983: PUSH
11984: LD_INT 1
11986: PLUS
11987: PPUSH
11988: CALL_OW 259
11992: PUSH
11993: LD_INT 10
11995: LESS
11996: IFFALSE 12059
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11998: LD_VAR 0 3
12002: PUSH
12003: LD_VAR 0 1
12007: ARRAY
12008: PPUSH
12009: LD_VAR 0 1
12013: PUSH
12014: LD_INT 4
12016: MOD
12017: PUSH
12018: LD_INT 1
12020: PLUS
12021: PPUSH
12022: LD_VAR 0 3
12026: PUSH
12027: LD_VAR 0 1
12031: ARRAY
12032: PPUSH
12033: LD_VAR 0 1
12037: PUSH
12038: LD_INT 4
12040: MOD
12041: PUSH
12042: LD_INT 1
12044: PLUS
12045: PPUSH
12046: CALL_OW 259
12050: PUSH
12051: LD_INT 1
12053: PLUS
12054: PPUSH
12055: CALL_OW 237
12059: GO 11961
12061: POP
12062: POP
// end ;
12063: PPOPN 3
12065: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12066: LD_EXP 27
12070: PUSH
12071: LD_EXP 35
12075: AND
12076: IFFALSE 12096
12078: GO 12080
12080: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12081: LD_INT 4
12083: PPUSH
12084: LD_OWVAR 2
12088: PPUSH
12089: LD_INT 0
12091: PPUSH
12092: CALL_OW 324
12096: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12097: LD_EXP 27
12101: PUSH
12102: LD_EXP 64
12106: AND
12107: IFFALSE 12127
12109: GO 12111
12111: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12112: LD_INT 19
12114: PPUSH
12115: LD_OWVAR 2
12119: PPUSH
12120: LD_INT 0
12122: PPUSH
12123: CALL_OW 324
12127: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12128: LD_EXP 27
12132: PUSH
12133: LD_EXP 36
12137: AND
12138: IFFALSE 12240
12140: GO 12142
12142: DISABLE
12143: LD_INT 0
12145: PPUSH
12146: PPUSH
// begin enable ;
12147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12148: LD_ADDR_VAR 0 2
12152: PUSH
12153: LD_INT 22
12155: PUSH
12156: LD_OWVAR 2
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 2
12167: PUSH
12168: LD_INT 34
12170: PUSH
12171: LD_INT 11
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 34
12180: PUSH
12181: LD_INT 30
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: ST_TO_ADDR
// if not tmp then
12202: LD_VAR 0 2
12206: NOT
12207: IFFALSE 12211
// exit ;
12209: GO 12240
// for i in tmp do
12211: LD_ADDR_VAR 0 1
12215: PUSH
12216: LD_VAR 0 2
12220: PUSH
12221: FOR_IN
12222: IFFALSE 12238
// begin SetLives ( i , 0 ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: LD_INT 0
12231: PPUSH
12232: CALL_OW 234
// end ;
12236: GO 12221
12238: POP
12239: POP
// end ;
12240: PPOPN 2
12242: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12243: LD_EXP 27
12247: PUSH
12248: LD_EXP 37
12252: AND
12253: IFFALSE 12273
12255: GO 12257
12257: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12258: LD_INT 32
12260: PPUSH
12261: LD_OWVAR 2
12265: PPUSH
12266: LD_INT 0
12268: PPUSH
12269: CALL_OW 324
12273: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12274: LD_EXP 27
12278: PUSH
12279: LD_EXP 38
12283: AND
12284: IFFALSE 12465
12286: GO 12288
12288: DISABLE
12289: LD_INT 0
12291: PPUSH
12292: PPUSH
12293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_INT 22
12301: PUSH
12302: LD_OWVAR 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 33
12313: PUSH
12314: LD_INT 3
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: ST_TO_ADDR
// if not tmp then
12330: LD_VAR 0 2
12334: NOT
12335: IFFALSE 12339
// exit ;
12337: GO 12465
// side := 0 ;
12339: LD_ADDR_VAR 0 3
12343: PUSH
12344: LD_INT 0
12346: ST_TO_ADDR
// for i := 1 to 8 do
12347: LD_ADDR_VAR 0 1
12351: PUSH
12352: DOUBLE
12353: LD_INT 1
12355: DEC
12356: ST_TO_ADDR
12357: LD_INT 8
12359: PUSH
12360: FOR_TO
12361: IFFALSE 12409
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12363: LD_OWVAR 2
12367: PUSH
12368: LD_VAR 0 1
12372: NONEQUAL
12373: PUSH
12374: LD_OWVAR 2
12378: PPUSH
12379: LD_VAR 0 1
12383: PPUSH
12384: CALL_OW 81
12388: PUSH
12389: LD_INT 2
12391: EQUAL
12392: AND
12393: IFFALSE 12407
// begin side := i ;
12395: LD_ADDR_VAR 0 3
12399: PUSH
12400: LD_VAR 0 1
12404: ST_TO_ADDR
// break ;
12405: GO 12409
// end ;
12407: GO 12360
12409: POP
12410: POP
// if not side then
12411: LD_VAR 0 3
12415: NOT
12416: IFFALSE 12420
// exit ;
12418: GO 12465
// for i := 1 to tmp do
12420: LD_ADDR_VAR 0 1
12424: PUSH
12425: DOUBLE
12426: LD_INT 1
12428: DEC
12429: ST_TO_ADDR
12430: LD_VAR 0 2
12434: PUSH
12435: FOR_TO
12436: IFFALSE 12463
// if Prob ( 60 ) then
12438: LD_INT 60
12440: PPUSH
12441: CALL_OW 13
12445: IFFALSE 12461
// SetSide ( i , side ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: CALL_OW 235
12461: GO 12435
12463: POP
12464: POP
// end ;
12465: PPOPN 3
12467: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12468: LD_EXP 27
12472: PUSH
12473: LD_EXP 40
12477: AND
12478: IFFALSE 12597
12480: GO 12482
12482: DISABLE
12483: LD_INT 0
12485: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12486: LD_ADDR_VAR 0 1
12490: PUSH
12491: LD_INT 22
12493: PUSH
12494: LD_OWVAR 2
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 21
12505: PUSH
12506: LD_INT 1
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 3
12515: PUSH
12516: LD_INT 23
12518: PUSH
12519: LD_INT 0
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: PUSH
12540: FOR_IN
12541: IFFALSE 12595
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12543: LD_VAR 0 1
12547: PPUSH
12548: CALL_OW 257
12552: PUSH
12553: LD_INT 1
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: LD_INT 3
12561: PUSH
12562: LD_INT 4
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: IN
12571: IFFALSE 12593
// SetClass ( un , rand ( 1 , 4 ) ) ;
12573: LD_VAR 0 1
12577: PPUSH
12578: LD_INT 1
12580: PPUSH
12581: LD_INT 4
12583: PPUSH
12584: CALL_OW 12
12588: PPUSH
12589: CALL_OW 336
12593: GO 12540
12595: POP
12596: POP
// end ;
12597: PPOPN 1
12599: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12600: LD_EXP 27
12604: PUSH
12605: LD_EXP 39
12609: AND
12610: IFFALSE 12689
12612: GO 12614
12614: DISABLE
12615: LD_INT 0
12617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12618: LD_ADDR_VAR 0 1
12622: PUSH
12623: LD_INT 22
12625: PUSH
12626: LD_OWVAR 2
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 21
12637: PUSH
12638: LD_INT 3
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PPUSH
12649: CALL_OW 69
12653: ST_TO_ADDR
// if not tmp then
12654: LD_VAR 0 1
12658: NOT
12659: IFFALSE 12663
// exit ;
12661: GO 12689
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12663: LD_VAR 0 1
12667: PUSH
12668: LD_INT 1
12670: PPUSH
12671: LD_VAR 0 1
12675: PPUSH
12676: CALL_OW 12
12680: ARRAY
12681: PPUSH
12682: LD_INT 100
12684: PPUSH
12685: CALL_OW 234
// end ;
12689: PPOPN 1
12691: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12692: LD_EXP 27
12696: PUSH
12697: LD_EXP 41
12701: AND
12702: IFFALSE 12800
12704: GO 12706
12706: DISABLE
12707: LD_INT 0
12709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12710: LD_ADDR_VAR 0 1
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_OWVAR 2
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 1
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 69
12745: ST_TO_ADDR
// if not tmp then
12746: LD_VAR 0 1
12750: NOT
12751: IFFALSE 12755
// exit ;
12753: GO 12800
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12755: LD_VAR 0 1
12759: PUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_VAR 0 1
12767: PPUSH
12768: CALL_OW 12
12772: ARRAY
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: LD_INT 4
12779: PPUSH
12780: CALL_OW 12
12784: PPUSH
12785: LD_INT 3000
12787: PPUSH
12788: LD_INT 9000
12790: PPUSH
12791: CALL_OW 12
12795: PPUSH
12796: CALL_OW 492
// end ;
12800: PPOPN 1
12802: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12803: LD_EXP 27
12807: PUSH
12808: LD_EXP 42
12812: AND
12813: IFFALSE 12833
12815: GO 12817
12817: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12818: LD_INT 1
12820: PPUSH
12821: LD_OWVAR 2
12825: PPUSH
12826: LD_INT 0
12828: PPUSH
12829: CALL_OW 324
12833: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12834: LD_EXP 27
12838: PUSH
12839: LD_EXP 43
12843: AND
12844: IFFALSE 12927
12846: GO 12848
12848: DISABLE
12849: LD_INT 0
12851: PPUSH
12852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12853: LD_ADDR_VAR 0 2
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_OWVAR 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: LD_INT 21
12872: PUSH
12873: LD_INT 3
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PPUSH
12884: CALL_OW 69
12888: ST_TO_ADDR
// if not tmp then
12889: LD_VAR 0 2
12893: NOT
12894: IFFALSE 12898
// exit ;
12896: GO 12927
// for i in tmp do
12898: LD_ADDR_VAR 0 1
12902: PUSH
12903: LD_VAR 0 2
12907: PUSH
12908: FOR_IN
12909: IFFALSE 12925
// SetBLevel ( i , 10 ) ;
12911: LD_VAR 0 1
12915: PPUSH
12916: LD_INT 10
12918: PPUSH
12919: CALL_OW 241
12923: GO 12908
12925: POP
12926: POP
// end ;
12927: PPOPN 2
12929: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12930: LD_EXP 27
12934: PUSH
12935: LD_EXP 44
12939: AND
12940: IFFALSE 13051
12942: GO 12944
12944: DISABLE
12945: LD_INT 0
12947: PPUSH
12948: PPUSH
12949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12950: LD_ADDR_VAR 0 3
12954: PUSH
12955: LD_INT 22
12957: PUSH
12958: LD_OWVAR 2
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 25
12969: PUSH
12970: LD_INT 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PPUSH
12981: CALL_OW 69
12985: ST_TO_ADDR
// if not tmp then
12986: LD_VAR 0 3
12990: NOT
12991: IFFALSE 12995
// exit ;
12993: GO 13051
// un := tmp [ rand ( 1 , tmp ) ] ;
12995: LD_ADDR_VAR 0 2
12999: PUSH
13000: LD_VAR 0 3
13004: PUSH
13005: LD_INT 1
13007: PPUSH
13008: LD_VAR 0 3
13012: PPUSH
13013: CALL_OW 12
13017: ARRAY
13018: ST_TO_ADDR
// if Crawls ( un ) then
13019: LD_VAR 0 2
13023: PPUSH
13024: CALL_OW 318
13028: IFFALSE 13039
// ComWalk ( un ) ;
13030: LD_VAR 0 2
13034: PPUSH
13035: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13039: LD_VAR 0 2
13043: PPUSH
13044: LD_INT 5
13046: PPUSH
13047: CALL_OW 336
// end ;
13051: PPOPN 3
13053: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13054: LD_EXP 27
13058: PUSH
13059: LD_EXP 45
13063: AND
13064: PUSH
13065: LD_OWVAR 67
13069: PUSH
13070: LD_INT 3
13072: LESS
13073: AND
13074: IFFALSE 13093
13076: GO 13078
13078: DISABLE
// Difficulty := Difficulty + 1 ;
13079: LD_ADDR_OWVAR 67
13083: PUSH
13084: LD_OWVAR 67
13088: PUSH
13089: LD_INT 1
13091: PLUS
13092: ST_TO_ADDR
13093: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13094: LD_EXP 27
13098: PUSH
13099: LD_EXP 46
13103: AND
13104: IFFALSE 13207
13106: GO 13108
13108: DISABLE
13109: LD_INT 0
13111: PPUSH
// begin for i := 1 to 5 do
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: DOUBLE
13118: LD_INT 1
13120: DEC
13121: ST_TO_ADDR
13122: LD_INT 5
13124: PUSH
13125: FOR_TO
13126: IFFALSE 13205
// begin uc_nation := nation_nature ;
13128: LD_ADDR_OWVAR 21
13132: PUSH
13133: LD_INT 0
13135: ST_TO_ADDR
// uc_side := 0 ;
13136: LD_ADDR_OWVAR 20
13140: PUSH
13141: LD_INT 0
13143: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13144: LD_ADDR_OWVAR 29
13148: PUSH
13149: LD_INT 12
13151: PUSH
13152: LD_INT 12
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: ST_TO_ADDR
// hc_agressivity := 20 ;
13159: LD_ADDR_OWVAR 35
13163: PUSH
13164: LD_INT 20
13166: ST_TO_ADDR
// hc_class := class_tiger ;
13167: LD_ADDR_OWVAR 28
13171: PUSH
13172: LD_INT 14
13174: ST_TO_ADDR
// hc_gallery :=  ;
13175: LD_ADDR_OWVAR 33
13179: PUSH
13180: LD_STRING 
13182: ST_TO_ADDR
// hc_name :=  ;
13183: LD_ADDR_OWVAR 26
13187: PUSH
13188: LD_STRING 
13190: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13191: CALL_OW 44
13195: PPUSH
13196: LD_INT 0
13198: PPUSH
13199: CALL_OW 51
// end ;
13203: GO 13125
13205: POP
13206: POP
// end ;
13207: PPOPN 1
13209: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13210: LD_EXP 27
13214: PUSH
13215: LD_EXP 47
13219: AND
13220: IFFALSE 13229
13222: GO 13224
13224: DISABLE
// StreamSibBomb ;
13225: CALL 13230 0 0
13229: END
// export function StreamSibBomb ; var i , x , y ; begin
13230: LD_INT 0
13232: PPUSH
13233: PPUSH
13234: PPUSH
13235: PPUSH
// result := false ;
13236: LD_ADDR_VAR 0 1
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// for i := 1 to 16 do
13244: LD_ADDR_VAR 0 2
13248: PUSH
13249: DOUBLE
13250: LD_INT 1
13252: DEC
13253: ST_TO_ADDR
13254: LD_INT 16
13256: PUSH
13257: FOR_TO
13258: IFFALSE 13457
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13260: LD_ADDR_VAR 0 3
13264: PUSH
13265: LD_INT 10
13267: PUSH
13268: LD_INT 20
13270: PUSH
13271: LD_INT 30
13273: PUSH
13274: LD_INT 40
13276: PUSH
13277: LD_INT 50
13279: PUSH
13280: LD_INT 60
13282: PUSH
13283: LD_INT 70
13285: PUSH
13286: LD_INT 80
13288: PUSH
13289: LD_INT 90
13291: PUSH
13292: LD_INT 100
13294: PUSH
13295: LD_INT 110
13297: PUSH
13298: LD_INT 120
13300: PUSH
13301: LD_INT 130
13303: PUSH
13304: LD_INT 140
13306: PUSH
13307: LD_INT 150
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 1
13329: PPUSH
13330: LD_INT 15
13332: PPUSH
13333: CALL_OW 12
13337: ARRAY
13338: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13339: LD_ADDR_VAR 0 4
13343: PUSH
13344: LD_INT 10
13346: PUSH
13347: LD_INT 20
13349: PUSH
13350: LD_INT 30
13352: PUSH
13353: LD_INT 40
13355: PUSH
13356: LD_INT 50
13358: PUSH
13359: LD_INT 60
13361: PUSH
13362: LD_INT 70
13364: PUSH
13365: LD_INT 80
13367: PUSH
13368: LD_INT 90
13370: PUSH
13371: LD_INT 100
13373: PUSH
13374: LD_INT 110
13376: PUSH
13377: LD_INT 120
13379: PUSH
13380: LD_INT 130
13382: PUSH
13383: LD_INT 140
13385: PUSH
13386: LD_INT 150
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 1
13408: PPUSH
13409: LD_INT 15
13411: PPUSH
13412: CALL_OW 12
13416: ARRAY
13417: ST_TO_ADDR
// if ValidHex ( x , y ) then
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_VAR 0 4
13427: PPUSH
13428: CALL_OW 488
13432: IFFALSE 13455
// begin result := [ x , y ] ;
13434: LD_ADDR_VAR 0 1
13438: PUSH
13439: LD_VAR 0 3
13443: PUSH
13444: LD_VAR 0 4
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: ST_TO_ADDR
// break ;
13453: GO 13457
// end ; end ;
13455: GO 13257
13457: POP
13458: POP
// if result then
13459: LD_VAR 0 1
13463: IFFALSE 13523
// begin ToLua ( playSibBomb() ) ;
13465: LD_STRING playSibBomb()
13467: PPUSH
13468: CALL_OW 559
// wait ( 0 0$14 ) ;
13472: LD_INT 490
13474: PPUSH
13475: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13479: LD_VAR 0 1
13483: PUSH
13484: LD_INT 1
13486: ARRAY
13487: PPUSH
13488: LD_VAR 0 1
13492: PUSH
13493: LD_INT 2
13495: ARRAY
13496: PPUSH
13497: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13501: LD_VAR 0 1
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_VAR 0 1
13514: PUSH
13515: LD_INT 2
13517: ARRAY
13518: PPUSH
13519: CALL_OW 429
// end ; end ;
13523: LD_VAR 0 1
13527: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13528: LD_EXP 27
13532: PUSH
13533: LD_EXP 49
13537: AND
13538: IFFALSE 13550
13540: GO 13542
13542: DISABLE
// YouLost (  ) ;
13543: LD_STRING 
13545: PPUSH
13546: CALL_OW 104
13550: END
// every 0 0$1 trigger StreamModeActive and sFog do
13551: LD_EXP 27
13555: PUSH
13556: LD_EXP 48
13560: AND
13561: IFFALSE 13575
13563: GO 13565
13565: DISABLE
// FogOff ( your_side ) ;
13566: LD_OWVAR 2
13570: PPUSH
13571: CALL_OW 344
13575: END
// every 0 0$1 trigger StreamModeActive and sSun do
13576: LD_EXP 27
13580: PUSH
13581: LD_EXP 50
13585: AND
13586: IFFALSE 13614
13588: GO 13590
13590: DISABLE
// begin solar_recharge_percent := 0 ;
13591: LD_ADDR_OWVAR 79
13595: PUSH
13596: LD_INT 0
13598: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13599: LD_INT 10500
13601: PPUSH
13602: CALL_OW 67
// solar_recharge_percent := 100 ;
13606: LD_ADDR_OWVAR 79
13610: PUSH
13611: LD_INT 100
13613: ST_TO_ADDR
// end ;
13614: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13615: LD_EXP 27
13619: PUSH
13620: LD_EXP 51
13624: AND
13625: IFFALSE 13864
13627: GO 13629
13629: DISABLE
13630: LD_INT 0
13632: PPUSH
13633: PPUSH
13634: PPUSH
// begin tmp := [ ] ;
13635: LD_ADDR_VAR 0 3
13639: PUSH
13640: EMPTY
13641: ST_TO_ADDR
// for i := 1 to 6 do
13642: LD_ADDR_VAR 0 1
13646: PUSH
13647: DOUBLE
13648: LD_INT 1
13650: DEC
13651: ST_TO_ADDR
13652: LD_INT 6
13654: PUSH
13655: FOR_TO
13656: IFFALSE 13761
// begin uc_nation := nation_nature ;
13658: LD_ADDR_OWVAR 21
13662: PUSH
13663: LD_INT 0
13665: ST_TO_ADDR
// uc_side := 0 ;
13666: LD_ADDR_OWVAR 20
13670: PUSH
13671: LD_INT 0
13673: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13674: LD_ADDR_OWVAR 29
13678: PUSH
13679: LD_INT 12
13681: PUSH
13682: LD_INT 12
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: ST_TO_ADDR
// hc_agressivity := 20 ;
13689: LD_ADDR_OWVAR 35
13693: PUSH
13694: LD_INT 20
13696: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13697: LD_ADDR_OWVAR 28
13701: PUSH
13702: LD_INT 17
13704: ST_TO_ADDR
// hc_gallery :=  ;
13705: LD_ADDR_OWVAR 33
13709: PUSH
13710: LD_STRING 
13712: ST_TO_ADDR
// hc_name :=  ;
13713: LD_ADDR_OWVAR 26
13717: PUSH
13718: LD_STRING 
13720: ST_TO_ADDR
// un := CreateHuman ;
13721: LD_ADDR_VAR 0 2
13725: PUSH
13726: CALL_OW 44
13730: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13731: LD_VAR 0 2
13735: PPUSH
13736: LD_INT 1
13738: PPUSH
13739: CALL_OW 51
// tmp := tmp ^ un ;
13743: LD_ADDR_VAR 0 3
13747: PUSH
13748: LD_VAR 0 3
13752: PUSH
13753: LD_VAR 0 2
13757: ADD
13758: ST_TO_ADDR
// end ;
13759: GO 13655
13761: POP
13762: POP
// repeat wait ( 0 0$1 ) ;
13763: LD_INT 35
13765: PPUSH
13766: CALL_OW 67
// for un in tmp do
13770: LD_ADDR_VAR 0 2
13774: PUSH
13775: LD_VAR 0 3
13779: PUSH
13780: FOR_IN
13781: IFFALSE 13855
// begin if IsDead ( un ) then
13783: LD_VAR 0 2
13787: PPUSH
13788: CALL_OW 301
13792: IFFALSE 13812
// begin tmp := tmp diff un ;
13794: LD_ADDR_VAR 0 3
13798: PUSH
13799: LD_VAR 0 3
13803: PUSH
13804: LD_VAR 0 2
13808: DIFF
13809: ST_TO_ADDR
// continue ;
13810: GO 13780
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13812: LD_VAR 0 2
13816: PPUSH
13817: LD_INT 3
13819: PUSH
13820: LD_INT 22
13822: PUSH
13823: LD_INT 0
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: PPUSH
13839: LD_VAR 0 2
13843: PPUSH
13844: CALL_OW 74
13848: PPUSH
13849: CALL_OW 115
// end ;
13853: GO 13780
13855: POP
13856: POP
// until not tmp ;
13857: LD_VAR 0 3
13861: NOT
13862: IFFALSE 13763
// end ;
13864: PPOPN 3
13866: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13867: LD_EXP 27
13871: PUSH
13872: LD_EXP 52
13876: AND
13877: IFFALSE 13931
13879: GO 13881
13881: DISABLE
// begin ToLua ( displayTroll(); ) ;
13882: LD_STRING displayTroll();
13884: PPUSH
13885: CALL_OW 559
// wait ( 3 3$00 ) ;
13889: LD_INT 6300
13891: PPUSH
13892: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13896: LD_STRING hideTroll();
13898: PPUSH
13899: CALL_OW 559
// wait ( 1 1$00 ) ;
13903: LD_INT 2100
13905: PPUSH
13906: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13910: LD_STRING displayTroll();
13912: PPUSH
13913: CALL_OW 559
// wait ( 1 1$00 ) ;
13917: LD_INT 2100
13919: PPUSH
13920: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13924: LD_STRING hideTroll();
13926: PPUSH
13927: CALL_OW 559
// end ;
13931: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13932: LD_EXP 27
13936: PUSH
13937: LD_EXP 53
13941: AND
13942: IFFALSE 14005
13944: GO 13946
13946: DISABLE
13947: LD_INT 0
13949: PPUSH
// begin p := 0 ;
13950: LD_ADDR_VAR 0 1
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// repeat game_speed := 1 ;
13958: LD_ADDR_OWVAR 65
13962: PUSH
13963: LD_INT 1
13965: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13966: LD_INT 35
13968: PPUSH
13969: CALL_OW 67
// p := p + 1 ;
13973: LD_ADDR_VAR 0 1
13977: PUSH
13978: LD_VAR 0 1
13982: PUSH
13983: LD_INT 1
13985: PLUS
13986: ST_TO_ADDR
// until p >= 60 ;
13987: LD_VAR 0 1
13991: PUSH
13992: LD_INT 60
13994: GREATEREQUAL
13995: IFFALSE 13958
// game_speed := 4 ;
13997: LD_ADDR_OWVAR 65
14001: PUSH
14002: LD_INT 4
14004: ST_TO_ADDR
// end ;
14005: PPOPN 1
14007: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14008: LD_EXP 27
14012: PUSH
14013: LD_EXP 54
14017: AND
14018: IFFALSE 14164
14020: GO 14022
14022: DISABLE
14023: LD_INT 0
14025: PPUSH
14026: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14027: LD_ADDR_VAR 0 1
14031: PUSH
14032: LD_INT 22
14034: PUSH
14035: LD_OWVAR 2
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: LD_INT 30
14049: PUSH
14050: LD_INT 0
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 30
14059: PUSH
14060: LD_INT 1
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PPUSH
14076: CALL_OW 69
14080: ST_TO_ADDR
// if not depot then
14081: LD_VAR 0 1
14085: NOT
14086: IFFALSE 14090
// exit ;
14088: GO 14164
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14090: LD_ADDR_VAR 0 2
14094: PUSH
14095: LD_VAR 0 1
14099: PUSH
14100: LD_INT 1
14102: PPUSH
14103: LD_VAR 0 1
14107: PPUSH
14108: CALL_OW 12
14112: ARRAY
14113: PPUSH
14114: CALL_OW 274
14118: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14119: LD_VAR 0 2
14123: PPUSH
14124: LD_INT 1
14126: PPUSH
14127: LD_INT 0
14129: PPUSH
14130: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14134: LD_VAR 0 2
14138: PPUSH
14139: LD_INT 2
14141: PPUSH
14142: LD_INT 0
14144: PPUSH
14145: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_INT 3
14156: PPUSH
14157: LD_INT 0
14159: PPUSH
14160: CALL_OW 277
// end ;
14164: PPOPN 2
14166: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14167: LD_EXP 27
14171: PUSH
14172: LD_EXP 55
14176: AND
14177: IFFALSE 14274
14179: GO 14181
14181: DISABLE
14182: LD_INT 0
14184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14185: LD_ADDR_VAR 0 1
14189: PUSH
14190: LD_INT 22
14192: PUSH
14193: LD_OWVAR 2
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 21
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 3
14214: PUSH
14215: LD_INT 23
14217: PUSH
14218: LD_INT 0
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: LIST
14233: PPUSH
14234: CALL_OW 69
14238: ST_TO_ADDR
// if not tmp then
14239: LD_VAR 0 1
14243: NOT
14244: IFFALSE 14248
// exit ;
14246: GO 14274
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14248: LD_VAR 0 1
14252: PUSH
14253: LD_INT 1
14255: PPUSH
14256: LD_VAR 0 1
14260: PPUSH
14261: CALL_OW 12
14265: ARRAY
14266: PPUSH
14267: LD_INT 200
14269: PPUSH
14270: CALL_OW 234
// end ;
14274: PPOPN 1
14276: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14277: LD_EXP 27
14281: PUSH
14282: LD_EXP 56
14286: AND
14287: IFFALSE 14366
14289: GO 14291
14291: DISABLE
14292: LD_INT 0
14294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14295: LD_ADDR_VAR 0 1
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_OWVAR 2
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: ST_TO_ADDR
// if not tmp then
14331: LD_VAR 0 1
14335: NOT
14336: IFFALSE 14340
// exit ;
14338: GO 14366
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14340: LD_VAR 0 1
14344: PUSH
14345: LD_INT 1
14347: PPUSH
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 12
14357: ARRAY
14358: PPUSH
14359: LD_INT 60
14361: PPUSH
14362: CALL_OW 234
// end ;
14366: PPOPN 1
14368: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14369: LD_EXP 27
14373: PUSH
14374: LD_EXP 57
14378: AND
14379: IFFALSE 14478
14381: GO 14383
14383: DISABLE
14384: LD_INT 0
14386: PPUSH
14387: PPUSH
// begin enable ;
14388: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14389: LD_ADDR_VAR 0 1
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_OWVAR 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 61
14408: PUSH
14409: EMPTY
14410: LIST
14411: PUSH
14412: LD_INT 33
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: LIST
14426: PPUSH
14427: CALL_OW 69
14431: ST_TO_ADDR
// if not tmp then
14432: LD_VAR 0 1
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14478
// for i in tmp do
14441: LD_ADDR_VAR 0 2
14445: PUSH
14446: LD_VAR 0 1
14450: PUSH
14451: FOR_IN
14452: IFFALSE 14476
// if IsControledBy ( i ) then
14454: LD_VAR 0 2
14458: PPUSH
14459: CALL_OW 312
14463: IFFALSE 14474
// ComUnlink ( i ) ;
14465: LD_VAR 0 2
14469: PPUSH
14470: CALL_OW 136
14474: GO 14451
14476: POP
14477: POP
// end ;
14478: PPOPN 2
14480: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14481: LD_EXP 27
14485: PUSH
14486: LD_EXP 58
14490: AND
14491: IFFALSE 14631
14493: GO 14495
14495: DISABLE
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
// begin ToLua ( displayPowell(); ) ;
14500: LD_STRING displayPowell();
14502: PPUSH
14503: CALL_OW 559
// uc_side := 0 ;
14507: LD_ADDR_OWVAR 20
14511: PUSH
14512: LD_INT 0
14514: ST_TO_ADDR
// uc_nation := 2 ;
14515: LD_ADDR_OWVAR 21
14519: PUSH
14520: LD_INT 2
14522: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14523: LD_ADDR_OWVAR 37
14527: PUSH
14528: LD_INT 14
14530: ST_TO_ADDR
// vc_engine := engine_siberite ;
14531: LD_ADDR_OWVAR 39
14535: PUSH
14536: LD_INT 3
14538: ST_TO_ADDR
// vc_control := control_apeman ;
14539: LD_ADDR_OWVAR 38
14543: PUSH
14544: LD_INT 5
14546: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14547: LD_ADDR_OWVAR 40
14551: PUSH
14552: LD_INT 29
14554: ST_TO_ADDR
// un := CreateVehicle ;
14555: LD_ADDR_VAR 0 2
14559: PUSH
14560: CALL_OW 45
14564: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14565: LD_VAR 0 2
14569: PPUSH
14570: LD_INT 1
14572: PPUSH
14573: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14577: LD_INT 35
14579: PPUSH
14580: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14584: LD_VAR 0 2
14588: PPUSH
14589: LD_INT 22
14591: PUSH
14592: LD_OWVAR 2
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 69
14605: PPUSH
14606: LD_VAR 0 2
14610: PPUSH
14611: CALL_OW 74
14615: PPUSH
14616: CALL_OW 115
// until IsDead ( un ) ;
14620: LD_VAR 0 2
14624: PPUSH
14625: CALL_OW 301
14629: IFFALSE 14577
// end ;
14631: PPOPN 2
14633: END
// every 0 0$1 trigger StreamModeActive and sStu do
14634: LD_EXP 27
14638: PUSH
14639: LD_EXP 66
14643: AND
14644: IFFALSE 14660
14646: GO 14648
14648: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14649: LD_STRING displayStucuk();
14651: PPUSH
14652: CALL_OW 559
// ResetFog ;
14656: CALL_OW 335
// end ;
14660: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14661: LD_EXP 27
14665: PUSH
14666: LD_EXP 59
14670: AND
14671: IFFALSE 14812
14673: GO 14675
14675: DISABLE
14676: LD_INT 0
14678: PPUSH
14679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14680: LD_ADDR_VAR 0 2
14684: PUSH
14685: LD_INT 22
14687: PUSH
14688: LD_OWVAR 2
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 21
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 69
14715: ST_TO_ADDR
// if not tmp then
14716: LD_VAR 0 2
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14812
// un := tmp [ rand ( 1 , tmp ) ] ;
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_VAR 0 2
14734: PUSH
14735: LD_INT 1
14737: PPUSH
14738: LD_VAR 0 2
14742: PPUSH
14743: CALL_OW 12
14747: ARRAY
14748: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14749: LD_VAR 0 1
14753: PPUSH
14754: LD_INT 0
14756: PPUSH
14757: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14761: LD_VAR 0 1
14765: PPUSH
14766: LD_OWVAR 3
14770: PUSH
14771: LD_VAR 0 1
14775: DIFF
14776: PPUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 74
14786: PPUSH
14787: CALL_OW 115
// wait ( 0 0$20 ) ;
14791: LD_INT 700
14793: PPUSH
14794: CALL_OW 67
// SetSide ( un , your_side ) ;
14798: LD_VAR 0 1
14802: PPUSH
14803: LD_OWVAR 2
14807: PPUSH
14808: CALL_OW 235
// end ;
14812: PPOPN 2
14814: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14815: LD_EXP 27
14819: PUSH
14820: LD_EXP 60
14824: AND
14825: IFFALSE 14931
14827: GO 14829
14829: DISABLE
14830: LD_INT 0
14832: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14833: LD_ADDR_VAR 0 1
14837: PUSH
14838: LD_INT 22
14840: PUSH
14841: LD_OWVAR 2
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 2
14852: PUSH
14853: LD_INT 30
14855: PUSH
14856: LD_INT 0
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 30
14865: PUSH
14866: LD_INT 1
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 69
14886: ST_TO_ADDR
// if not depot then
14887: LD_VAR 0 1
14891: NOT
14892: IFFALSE 14896
// exit ;
14894: GO 14931
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14896: LD_VAR 0 1
14900: PUSH
14901: LD_INT 1
14903: ARRAY
14904: PPUSH
14905: CALL_OW 250
14909: PPUSH
14910: LD_VAR 0 1
14914: PUSH
14915: LD_INT 1
14917: ARRAY
14918: PPUSH
14919: CALL_OW 251
14923: PPUSH
14924: LD_INT 70
14926: PPUSH
14927: CALL_OW 495
// end ;
14931: PPOPN 1
14933: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14934: LD_EXP 27
14938: PUSH
14939: LD_EXP 61
14943: AND
14944: IFFALSE 15155
14946: GO 14948
14948: DISABLE
14949: LD_INT 0
14951: PPUSH
14952: PPUSH
14953: PPUSH
14954: PPUSH
14955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14956: LD_ADDR_VAR 0 5
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_OWVAR 2
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: ST_TO_ADDR
// if not tmp then
14992: LD_VAR 0 5
14996: NOT
14997: IFFALSE 15001
// exit ;
14999: GO 15155
// for i in tmp do
15001: LD_ADDR_VAR 0 1
15005: PUSH
15006: LD_VAR 0 5
15010: PUSH
15011: FOR_IN
15012: IFFALSE 15153
// begin d := rand ( 0 , 5 ) ;
15014: LD_ADDR_VAR 0 4
15018: PUSH
15019: LD_INT 0
15021: PPUSH
15022: LD_INT 5
15024: PPUSH
15025: CALL_OW 12
15029: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 250
15044: PPUSH
15045: LD_VAR 0 4
15049: PPUSH
15050: LD_INT 3
15052: PPUSH
15053: LD_INT 12
15055: PPUSH
15056: CALL_OW 12
15060: PPUSH
15061: CALL_OW 272
15065: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15066: LD_ADDR_VAR 0 3
15070: PUSH
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL_OW 251
15080: PPUSH
15081: LD_VAR 0 4
15085: PPUSH
15086: LD_INT 3
15088: PPUSH
15089: LD_INT 12
15091: PPUSH
15092: CALL_OW 12
15096: PPUSH
15097: CALL_OW 273
15101: ST_TO_ADDR
// if ValidHex ( x , y ) then
15102: LD_VAR 0 2
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: CALL_OW 488
15116: IFFALSE 15151
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15118: LD_VAR 0 1
15122: PPUSH
15123: LD_VAR 0 2
15127: PPUSH
15128: LD_VAR 0 3
15132: PPUSH
15133: LD_INT 3
15135: PPUSH
15136: LD_INT 6
15138: PPUSH
15139: CALL_OW 12
15143: PPUSH
15144: LD_INT 1
15146: PPUSH
15147: CALL_OW 483
// end ;
15151: GO 15011
15153: POP
15154: POP
// end ;
15155: PPOPN 5
15157: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15158: LD_EXP 27
15162: PUSH
15163: LD_EXP 62
15167: AND
15168: IFFALSE 15262
15170: GO 15172
15172: DISABLE
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15177: LD_ADDR_VAR 0 2
15181: PUSH
15182: LD_INT 22
15184: PUSH
15185: LD_OWVAR 2
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 32
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 21
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: ST_TO_ADDR
// if not tmp then
15224: LD_VAR 0 2
15228: NOT
15229: IFFALSE 15233
// exit ;
15231: GO 15262
// for i in tmp do
15233: LD_ADDR_VAR 0 1
15237: PUSH
15238: LD_VAR 0 2
15242: PUSH
15243: FOR_IN
15244: IFFALSE 15260
// SetFuel ( i , 0 ) ;
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_INT 0
15253: PPUSH
15254: CALL_OW 240
15258: GO 15243
15260: POP
15261: POP
// end ;
15262: PPOPN 2
15264: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15265: LD_EXP 27
15269: PUSH
15270: LD_EXP 63
15274: AND
15275: IFFALSE 15341
15277: GO 15279
15279: DISABLE
15280: LD_INT 0
15282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15283: LD_ADDR_VAR 0 1
15287: PUSH
15288: LD_INT 22
15290: PUSH
15291: LD_OWVAR 2
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 30
15302: PUSH
15303: LD_INT 29
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 69
15318: ST_TO_ADDR
// if not tmp then
15319: LD_VAR 0 1
15323: NOT
15324: IFFALSE 15328
// exit ;
15326: GO 15341
// DestroyUnit ( tmp [ 1 ] ) ;
15328: LD_VAR 0 1
15332: PUSH
15333: LD_INT 1
15335: ARRAY
15336: PPUSH
15337: CALL_OW 65
// end ;
15341: PPOPN 1
15343: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15344: LD_EXP 27
15348: PUSH
15349: LD_EXP 65
15353: AND
15354: IFFALSE 15483
15356: GO 15358
15358: DISABLE
15359: LD_INT 0
15361: PPUSH
// begin uc_side := 0 ;
15362: LD_ADDR_OWVAR 20
15366: PUSH
15367: LD_INT 0
15369: ST_TO_ADDR
// uc_nation := nation_arabian ;
15370: LD_ADDR_OWVAR 21
15374: PUSH
15375: LD_INT 2
15377: ST_TO_ADDR
// hc_gallery :=  ;
15378: LD_ADDR_OWVAR 33
15382: PUSH
15383: LD_STRING 
15385: ST_TO_ADDR
// hc_name :=  ;
15386: LD_ADDR_OWVAR 26
15390: PUSH
15391: LD_STRING 
15393: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 11
15399: PPUSH
15400: LD_INT 10
15402: PPUSH
15403: CALL_OW 380
// un := CreateHuman ;
15407: LD_ADDR_VAR 0 1
15411: PUSH
15412: CALL_OW 44
15416: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 1
15424: PPUSH
15425: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15429: LD_INT 35
15431: PPUSH
15432: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15436: LD_VAR 0 1
15440: PPUSH
15441: LD_INT 22
15443: PUSH
15444: LD_OWVAR 2
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: PPUSH
15458: LD_VAR 0 1
15462: PPUSH
15463: CALL_OW 74
15467: PPUSH
15468: CALL_OW 115
// until IsDead ( un ) ;
15472: LD_VAR 0 1
15476: PPUSH
15477: CALL_OW 301
15481: IFFALSE 15429
// end ;
15483: PPOPN 1
15485: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15486: LD_EXP 27
15490: PUSH
15491: LD_EXP 67
15495: AND
15496: IFFALSE 15508
15498: GO 15500
15500: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15501: LD_STRING earthquake(getX(game), 0, 32)
15503: PPUSH
15504: CALL_OW 559
15508: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15509: LD_EXP 27
15513: PUSH
15514: LD_EXP 68
15518: AND
15519: IFFALSE 15610
15521: GO 15523
15523: DISABLE
15524: LD_INT 0
15526: PPUSH
// begin enable ;
15527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15528: LD_ADDR_VAR 0 1
15532: PUSH
15533: LD_INT 22
15535: PUSH
15536: LD_OWVAR 2
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 21
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 33
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: LIST
15569: PPUSH
15570: CALL_OW 69
15574: ST_TO_ADDR
// if not tmp then
15575: LD_VAR 0 1
15579: NOT
15580: IFFALSE 15584
// exit ;
15582: GO 15610
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15584: LD_VAR 0 1
15588: PUSH
15589: LD_INT 1
15591: PPUSH
15592: LD_VAR 0 1
15596: PPUSH
15597: CALL_OW 12
15601: ARRAY
15602: PPUSH
15603: LD_INT 1
15605: PPUSH
15606: CALL_OW 234
// end ;
15610: PPOPN 1
15612: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15613: LD_EXP 27
15617: PUSH
15618: LD_EXP 69
15622: AND
15623: IFFALSE 15764
15625: GO 15627
15627: DISABLE
15628: LD_INT 0
15630: PPUSH
15631: PPUSH
15632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15633: LD_ADDR_VAR 0 3
15637: PUSH
15638: LD_INT 22
15640: PUSH
15641: LD_OWVAR 2
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 25
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PPUSH
15664: CALL_OW 69
15668: ST_TO_ADDR
// if not tmp then
15669: LD_VAR 0 3
15673: NOT
15674: IFFALSE 15678
// exit ;
15676: GO 15764
// un := tmp [ rand ( 1 , tmp ) ] ;
15678: LD_ADDR_VAR 0 2
15682: PUSH
15683: LD_VAR 0 3
15687: PUSH
15688: LD_INT 1
15690: PPUSH
15691: LD_VAR 0 3
15695: PPUSH
15696: CALL_OW 12
15700: ARRAY
15701: ST_TO_ADDR
// if Crawls ( un ) then
15702: LD_VAR 0 2
15706: PPUSH
15707: CALL_OW 318
15711: IFFALSE 15722
// ComWalk ( un ) ;
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15722: LD_VAR 0 2
15726: PPUSH
15727: LD_INT 9
15729: PPUSH
15730: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15734: LD_INT 28
15736: PPUSH
15737: LD_OWVAR 2
15741: PPUSH
15742: LD_INT 2
15744: PPUSH
15745: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15749: LD_INT 29
15751: PPUSH
15752: LD_OWVAR 2
15756: PPUSH
15757: LD_INT 2
15759: PPUSH
15760: CALL_OW 322
// end ;
15764: PPOPN 3
15766: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15767: LD_EXP 27
15771: PUSH
15772: LD_EXP 70
15776: AND
15777: IFFALSE 15888
15779: GO 15781
15781: DISABLE
15782: LD_INT 0
15784: PPUSH
15785: PPUSH
15786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15787: LD_ADDR_VAR 0 3
15791: PUSH
15792: LD_INT 22
15794: PUSH
15795: LD_OWVAR 2
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 25
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 69
15822: ST_TO_ADDR
// if not tmp then
15823: LD_VAR 0 3
15827: NOT
15828: IFFALSE 15832
// exit ;
15830: GO 15888
// un := tmp [ rand ( 1 , tmp ) ] ;
15832: LD_ADDR_VAR 0 2
15836: PUSH
15837: LD_VAR 0 3
15841: PUSH
15842: LD_INT 1
15844: PPUSH
15845: LD_VAR 0 3
15849: PPUSH
15850: CALL_OW 12
15854: ARRAY
15855: ST_TO_ADDR
// if Crawls ( un ) then
15856: LD_VAR 0 2
15860: PPUSH
15861: CALL_OW 318
15865: IFFALSE 15876
// ComWalk ( un ) ;
15867: LD_VAR 0 2
15871: PPUSH
15872: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15876: LD_VAR 0 2
15880: PPUSH
15881: LD_INT 8
15883: PPUSH
15884: CALL_OW 336
// end ;
15888: PPOPN 3
15890: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15891: LD_EXP 27
15895: PUSH
15896: LD_EXP 71
15900: AND
15901: IFFALSE 16045
15903: GO 15905
15905: DISABLE
15906: LD_INT 0
15908: PPUSH
15909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15910: LD_ADDR_VAR 0 2
15914: PUSH
15915: LD_INT 22
15917: PUSH
15918: LD_OWVAR 2
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 21
15929: PUSH
15930: LD_INT 2
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 2
15939: PUSH
15940: LD_INT 34
15942: PUSH
15943: LD_INT 12
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 34
15952: PUSH
15953: LD_INT 51
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 34
15962: PUSH
15963: LD_INT 32
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 69
15985: ST_TO_ADDR
// if not tmp then
15986: LD_VAR 0 2
15990: NOT
15991: IFFALSE 15995
// exit ;
15993: GO 16045
// for i in tmp do
15995: LD_ADDR_VAR 0 1
15999: PUSH
16000: LD_VAR 0 2
16004: PUSH
16005: FOR_IN
16006: IFFALSE 16043
// if GetCargo ( i , mat_artifact ) = 0 then
16008: LD_VAR 0 1
16012: PPUSH
16013: LD_INT 4
16015: PPUSH
16016: CALL_OW 289
16020: PUSH
16021: LD_INT 0
16023: EQUAL
16024: IFFALSE 16041
// SetCargo ( i , mat_siberit , 100 ) ;
16026: LD_VAR 0 1
16030: PPUSH
16031: LD_INT 3
16033: PPUSH
16034: LD_INT 100
16036: PPUSH
16037: CALL_OW 290
16041: GO 16005
16043: POP
16044: POP
// end ;
16045: PPOPN 2
16047: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16048: LD_EXP 27
16052: PUSH
16053: LD_EXP 72
16057: AND
16058: IFFALSE 16241
16060: GO 16062
16062: DISABLE
16063: LD_INT 0
16065: PPUSH
16066: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16067: LD_ADDR_VAR 0 2
16071: PUSH
16072: LD_INT 22
16074: PUSH
16075: LD_OWVAR 2
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PPUSH
16084: CALL_OW 69
16088: ST_TO_ADDR
// if not tmp then
16089: LD_VAR 0 2
16093: NOT
16094: IFFALSE 16098
// exit ;
16096: GO 16241
// for i := 1 to 2 do
16098: LD_ADDR_VAR 0 1
16102: PUSH
16103: DOUBLE
16104: LD_INT 1
16106: DEC
16107: ST_TO_ADDR
16108: LD_INT 2
16110: PUSH
16111: FOR_TO
16112: IFFALSE 16239
// begin uc_side := your_side ;
16114: LD_ADDR_OWVAR 20
16118: PUSH
16119: LD_OWVAR 2
16123: ST_TO_ADDR
// uc_nation := nation_american ;
16124: LD_ADDR_OWVAR 21
16128: PUSH
16129: LD_INT 1
16131: ST_TO_ADDR
// vc_chassis := us_morphling ;
16132: LD_ADDR_OWVAR 37
16136: PUSH
16137: LD_INT 5
16139: ST_TO_ADDR
// vc_engine := engine_siberite ;
16140: LD_ADDR_OWVAR 39
16144: PUSH
16145: LD_INT 3
16147: ST_TO_ADDR
// vc_control := control_computer ;
16148: LD_ADDR_OWVAR 38
16152: PUSH
16153: LD_INT 3
16155: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16156: LD_ADDR_OWVAR 40
16160: PUSH
16161: LD_INT 10
16163: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16164: LD_VAR 0 2
16168: PUSH
16169: LD_INT 1
16171: ARRAY
16172: PPUSH
16173: CALL_OW 310
16177: NOT
16178: IFFALSE 16225
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16180: CALL_OW 45
16184: PPUSH
16185: LD_VAR 0 2
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: PPUSH
16194: CALL_OW 250
16198: PPUSH
16199: LD_VAR 0 2
16203: PUSH
16204: LD_INT 1
16206: ARRAY
16207: PPUSH
16208: CALL_OW 251
16212: PPUSH
16213: LD_INT 12
16215: PPUSH
16216: LD_INT 1
16218: PPUSH
16219: CALL_OW 50
16223: GO 16237
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16225: CALL_OW 45
16229: PPUSH
16230: LD_INT 1
16232: PPUSH
16233: CALL_OW 51
// end ;
16237: GO 16111
16239: POP
16240: POP
// end ;
16241: PPOPN 2
16243: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16244: LD_EXP 27
16248: PUSH
16249: LD_EXP 73
16253: AND
16254: IFFALSE 16476
16256: GO 16258
16258: DISABLE
16259: LD_INT 0
16261: PPUSH
16262: PPUSH
16263: PPUSH
16264: PPUSH
16265: PPUSH
16266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16267: LD_ADDR_VAR 0 6
16271: PUSH
16272: LD_INT 22
16274: PUSH
16275: LD_OWVAR 2
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 21
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 23
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: ST_TO_ADDR
// if not tmp then
16321: LD_VAR 0 6
16325: NOT
16326: IFFALSE 16330
// exit ;
16328: GO 16476
// s1 := rand ( 1 , 4 ) ;
16330: LD_ADDR_VAR 0 2
16334: PUSH
16335: LD_INT 1
16337: PPUSH
16338: LD_INT 4
16340: PPUSH
16341: CALL_OW 12
16345: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16346: LD_ADDR_VAR 0 4
16350: PUSH
16351: LD_VAR 0 6
16355: PUSH
16356: LD_INT 1
16358: ARRAY
16359: PPUSH
16360: LD_VAR 0 2
16364: PPUSH
16365: CALL_OW 259
16369: ST_TO_ADDR
// if s1 = 1 then
16370: LD_VAR 0 2
16374: PUSH
16375: LD_INT 1
16377: EQUAL
16378: IFFALSE 16398
// s2 := rand ( 2 , 4 ) else
16380: LD_ADDR_VAR 0 3
16384: PUSH
16385: LD_INT 2
16387: PPUSH
16388: LD_INT 4
16390: PPUSH
16391: CALL_OW 12
16395: ST_TO_ADDR
16396: GO 16406
// s2 := 1 ;
16398: LD_ADDR_VAR 0 3
16402: PUSH
16403: LD_INT 1
16405: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16406: LD_ADDR_VAR 0 5
16410: PUSH
16411: LD_VAR 0 6
16415: PUSH
16416: LD_INT 1
16418: ARRAY
16419: PPUSH
16420: LD_VAR 0 3
16424: PPUSH
16425: CALL_OW 259
16429: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16430: LD_VAR 0 6
16434: PUSH
16435: LD_INT 1
16437: ARRAY
16438: PPUSH
16439: LD_VAR 0 2
16443: PPUSH
16444: LD_VAR 0 5
16448: PPUSH
16449: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16453: LD_VAR 0 6
16457: PUSH
16458: LD_INT 1
16460: ARRAY
16461: PPUSH
16462: LD_VAR 0 3
16466: PPUSH
16467: LD_VAR 0 4
16471: PPUSH
16472: CALL_OW 237
// end ;
16476: PPOPN 6
16478: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16479: LD_EXP 27
16483: PUSH
16484: LD_EXP 74
16488: AND
16489: IFFALSE 16568
16491: GO 16493
16493: DISABLE
16494: LD_INT 0
16496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16497: LD_ADDR_VAR 0 1
16501: PUSH
16502: LD_INT 22
16504: PUSH
16505: LD_OWVAR 2
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 30
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: ST_TO_ADDR
// if not tmp then
16533: LD_VAR 0 1
16537: NOT
16538: IFFALSE 16542
// exit ;
16540: GO 16568
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16542: LD_VAR 0 1
16546: PUSH
16547: LD_INT 1
16549: PPUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 12
16559: ARRAY
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: CALL_OW 234
// end ;
16568: PPOPN 1
16570: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16571: LD_EXP 27
16575: PUSH
16576: LD_EXP 75
16580: AND
16581: IFFALSE 16693
16583: GO 16585
16585: DISABLE
16586: LD_INT 0
16588: PPUSH
16589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16590: LD_ADDR_VAR 0 2
16594: PUSH
16595: LD_INT 22
16597: PUSH
16598: LD_OWVAR 2
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 30
16612: PUSH
16613: LD_INT 27
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 30
16622: PUSH
16623: LD_INT 26
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 30
16632: PUSH
16633: LD_INT 28
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PPUSH
16650: CALL_OW 69
16654: ST_TO_ADDR
// if not tmp then
16655: LD_VAR 0 2
16659: NOT
16660: IFFALSE 16664
// exit ;
16662: GO 16693
// for i in tmp do
16664: LD_ADDR_VAR 0 1
16668: PUSH
16669: LD_VAR 0 2
16673: PUSH
16674: FOR_IN
16675: IFFALSE 16691
// SetLives ( i , 1 ) ;
16677: LD_VAR 0 1
16681: PPUSH
16682: LD_INT 1
16684: PPUSH
16685: CALL_OW 234
16689: GO 16674
16691: POP
16692: POP
// end ;
16693: PPOPN 2
16695: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16696: LD_EXP 27
16700: PUSH
16701: LD_EXP 76
16705: AND
16706: IFFALSE 16980
16708: GO 16710
16710: DISABLE
16711: LD_INT 0
16713: PPUSH
16714: PPUSH
16715: PPUSH
// begin i := rand ( 1 , 7 ) ;
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_INT 1
16723: PPUSH
16724: LD_INT 7
16726: PPUSH
16727: CALL_OW 12
16731: ST_TO_ADDR
// case i of 1 :
16732: LD_VAR 0 1
16736: PUSH
16737: LD_INT 1
16739: DOUBLE
16740: EQUAL
16741: IFTRUE 16745
16743: GO 16755
16745: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16746: LD_STRING earthquake(getX(game), 0, 32)
16748: PPUSH
16749: CALL_OW 559
16753: GO 16980
16755: LD_INT 2
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16777
16763: POP
// begin ToLua ( displayStucuk(); ) ;
16764: LD_STRING displayStucuk();
16766: PPUSH
16767: CALL_OW 559
// ResetFog ;
16771: CALL_OW 335
// end ; 3 :
16775: GO 16980
16777: LD_INT 3
16779: DOUBLE
16780: EQUAL
16781: IFTRUE 16785
16783: GO 16889
16785: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_INT 22
16793: PUSH
16794: LD_OWVAR 2
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 25
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PPUSH
16817: CALL_OW 69
16821: ST_TO_ADDR
// if not tmp then
16822: LD_VAR 0 2
16826: NOT
16827: IFFALSE 16831
// exit ;
16829: GO 16980
// un := tmp [ rand ( 1 , tmp ) ] ;
16831: LD_ADDR_VAR 0 3
16835: PUSH
16836: LD_VAR 0 2
16840: PUSH
16841: LD_INT 1
16843: PPUSH
16844: LD_VAR 0 2
16848: PPUSH
16849: CALL_OW 12
16853: ARRAY
16854: ST_TO_ADDR
// if Crawls ( un ) then
16855: LD_VAR 0 3
16859: PPUSH
16860: CALL_OW 318
16864: IFFALSE 16875
// ComWalk ( un ) ;
16866: LD_VAR 0 3
16870: PPUSH
16871: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16875: LD_VAR 0 3
16879: PPUSH
16880: LD_INT 8
16882: PPUSH
16883: CALL_OW 336
// end ; 4 :
16887: GO 16980
16889: LD_INT 4
16891: DOUBLE
16892: EQUAL
16893: IFTRUE 16897
16895: GO 16958
16897: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16898: LD_ADDR_VAR 0 2
16902: PUSH
16903: LD_INT 22
16905: PUSH
16906: LD_OWVAR 2
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 30
16917: PUSH
16918: LD_INT 29
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PPUSH
16929: CALL_OW 69
16933: ST_TO_ADDR
// if not tmp then
16934: LD_VAR 0 2
16938: NOT
16939: IFFALSE 16943
// exit ;
16941: GO 16980
// DestroyUnit ( tmp [ 1 ] ) ;
16943: LD_VAR 0 2
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: PPUSH
16952: CALL_OW 65
// end ; 5 .. 7 :
16956: GO 16980
16958: LD_INT 5
16960: DOUBLE
16961: GREATEREQUAL
16962: IFFALSE 16970
16964: LD_INT 7
16966: DOUBLE
16967: LESSEQUAL
16968: IFTRUE 16972
16970: GO 16979
16972: POP
// StreamSibBomb ; end ;
16973: CALL 13230 0 0
16977: GO 16980
16979: POP
// end ;
16980: PPOPN 3
16982: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16983: LD_EXP 27
16987: PUSH
16988: LD_EXP 77
16992: AND
16993: IFFALSE 17149
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
17002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 81
17010: PUSH
17011: LD_OWVAR 2
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: LD_INT 21
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 21
17035: PUSH
17036: LD_INT 2
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PPUSH
17052: CALL_OW 69
17056: ST_TO_ADDR
// if not tmp then
17057: LD_VAR 0 2
17061: NOT
17062: IFFALSE 17066
// exit ;
17064: GO 17149
// p := 0 ;
17066: LD_ADDR_VAR 0 3
17070: PUSH
17071: LD_INT 0
17073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17074: LD_INT 35
17076: PPUSH
17077: CALL_OW 67
// p := p + 1 ;
17081: LD_ADDR_VAR 0 3
17085: PUSH
17086: LD_VAR 0 3
17090: PUSH
17091: LD_INT 1
17093: PLUS
17094: ST_TO_ADDR
// for i in tmp do
17095: LD_ADDR_VAR 0 1
17099: PUSH
17100: LD_VAR 0 2
17104: PUSH
17105: FOR_IN
17106: IFFALSE 17137
// if GetLives ( i ) < 1000 then
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 256
17117: PUSH
17118: LD_INT 1000
17120: LESS
17121: IFFALSE 17135
// SetLives ( i , 1000 ) ;
17123: LD_VAR 0 1
17127: PPUSH
17128: LD_INT 1000
17130: PPUSH
17131: CALL_OW 234
17135: GO 17105
17137: POP
17138: POP
// until p > 20 ;
17139: LD_VAR 0 3
17143: PUSH
17144: LD_INT 20
17146: GREATER
17147: IFFALSE 17074
// end ;
17149: PPOPN 3
17151: END
// every 0 0$1 trigger StreamModeActive and sTime do
17152: LD_EXP 27
17156: PUSH
17157: LD_EXP 78
17161: AND
17162: IFFALSE 17197
17164: GO 17166
17166: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17167: LD_INT 28
17169: PPUSH
17170: LD_OWVAR 2
17174: PPUSH
17175: LD_INT 2
17177: PPUSH
17178: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17182: LD_INT 30
17184: PPUSH
17185: LD_OWVAR 2
17189: PPUSH
17190: LD_INT 2
17192: PPUSH
17193: CALL_OW 322
// end ;
17197: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17198: LD_EXP 27
17202: PUSH
17203: LD_EXP 79
17207: AND
17208: IFFALSE 17329
17210: GO 17212
17212: DISABLE
17213: LD_INT 0
17215: PPUSH
17216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: LD_INT 23
17249: PUSH
17250: LD_INT 0
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// if not tmp then
17271: LD_VAR 0 2
17275: NOT
17276: IFFALSE 17280
// exit ;
17278: GO 17329
// for i in tmp do
17280: LD_ADDR_VAR 0 1
17284: PUSH
17285: LD_VAR 0 2
17289: PUSH
17290: FOR_IN
17291: IFFALSE 17327
// begin if Crawls ( i ) then
17293: LD_VAR 0 1
17297: PPUSH
17298: CALL_OW 318
17302: IFFALSE 17313
// ComWalk ( i ) ;
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 138
// SetClass ( i , 2 ) ;
17313: LD_VAR 0 1
17317: PPUSH
17318: LD_INT 2
17320: PPUSH
17321: CALL_OW 336
// end ;
17325: GO 17290
17327: POP
17328: POP
// end ;
17329: PPOPN 2
17331: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17332: LD_EXP 27
17336: PUSH
17337: LD_EXP 80
17341: AND
17342: IFFALSE 17623
17344: GO 17346
17346: DISABLE
17347: LD_INT 0
17349: PPUSH
17350: PPUSH
17351: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17352: LD_OWVAR 2
17356: PPUSH
17357: LD_INT 9
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: LD_INT 1
17365: PPUSH
17366: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17370: LD_INT 9
17372: PPUSH
17373: LD_OWVAR 2
17377: PPUSH
17378: CALL_OW 343
// uc_side := 9 ;
17382: LD_ADDR_OWVAR 20
17386: PUSH
17387: LD_INT 9
17389: ST_TO_ADDR
// uc_nation := 2 ;
17390: LD_ADDR_OWVAR 21
17394: PUSH
17395: LD_INT 2
17397: ST_TO_ADDR
// hc_name := Dark Warrior ;
17398: LD_ADDR_OWVAR 26
17402: PUSH
17403: LD_STRING Dark Warrior
17405: ST_TO_ADDR
// hc_gallery :=  ;
17406: LD_ADDR_OWVAR 33
17410: PUSH
17411: LD_STRING 
17413: ST_TO_ADDR
// hc_noskilllimit := true ;
17414: LD_ADDR_OWVAR 76
17418: PUSH
17419: LD_INT 1
17421: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17422: LD_ADDR_OWVAR 31
17426: PUSH
17427: LD_INT 30
17429: PUSH
17430: LD_INT 30
17432: PUSH
17433: LD_INT 30
17435: PUSH
17436: LD_INT 30
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: ST_TO_ADDR
// un := CreateHuman ;
17445: LD_ADDR_VAR 0 3
17449: PUSH
17450: CALL_OW 44
17454: ST_TO_ADDR
// hc_noskilllimit := false ;
17455: LD_ADDR_OWVAR 76
17459: PUSH
17460: LD_INT 0
17462: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17463: LD_VAR 0 3
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL_OW 51
// p := 0 ;
17475: LD_ADDR_VAR 0 2
17479: PUSH
17480: LD_INT 0
17482: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17483: LD_INT 35
17485: PPUSH
17486: CALL_OW 67
// p := p + 1 ;
17490: LD_ADDR_VAR 0 2
17494: PUSH
17495: LD_VAR 0 2
17499: PUSH
17500: LD_INT 1
17502: PLUS
17503: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17504: LD_VAR 0 3
17508: PPUSH
17509: CALL_OW 256
17513: PUSH
17514: LD_INT 1000
17516: LESS
17517: IFFALSE 17531
// SetLives ( un , 1000 ) ;
17519: LD_VAR 0 3
17523: PPUSH
17524: LD_INT 1000
17526: PPUSH
17527: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17531: LD_VAR 0 3
17535: PPUSH
17536: LD_INT 81
17538: PUSH
17539: LD_OWVAR 2
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 91
17550: PUSH
17551: LD_VAR 0 3
17555: PUSH
17556: LD_INT 30
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 69
17572: PPUSH
17573: LD_VAR 0 3
17577: PPUSH
17578: CALL_OW 74
17582: PPUSH
17583: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17587: LD_VAR 0 2
17591: PUSH
17592: LD_INT 60
17594: GREATER
17595: PUSH
17596: LD_VAR 0 3
17600: PPUSH
17601: CALL_OW 301
17605: OR
17606: IFFALSE 17483
// if un then
17608: LD_VAR 0 3
17612: IFFALSE 17623
// RemoveUnit ( un ) ;
17614: LD_VAR 0 3
17618: PPUSH
17619: CALL_OW 64
// end ;
17623: PPOPN 3
17625: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17626: LD_INT 0
17628: PPUSH
// case cmd of 301 :
17629: LD_VAR 0 1
17633: PUSH
17634: LD_INT 301
17636: DOUBLE
17637: EQUAL
17638: IFTRUE 17642
17640: GO 17674
17642: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17643: LD_VAR 0 6
17647: PPUSH
17648: LD_VAR 0 7
17652: PPUSH
17653: LD_VAR 0 8
17657: PPUSH
17658: LD_VAR 0 4
17662: PPUSH
17663: LD_VAR 0 5
17667: PPUSH
17668: CALL 18875 0 5
17672: GO 17795
17674: LD_INT 302
17676: DOUBLE
17677: EQUAL
17678: IFTRUE 17682
17680: GO 17719
17682: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17683: LD_VAR 0 6
17687: PPUSH
17688: LD_VAR 0 7
17692: PPUSH
17693: LD_VAR 0 8
17697: PPUSH
17698: LD_VAR 0 9
17702: PPUSH
17703: LD_VAR 0 4
17707: PPUSH
17708: LD_VAR 0 5
17712: PPUSH
17713: CALL 18966 0 6
17717: GO 17795
17719: LD_INT 303
17721: DOUBLE
17722: EQUAL
17723: IFTRUE 17727
17725: GO 17764
17727: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17728: LD_VAR 0 6
17732: PPUSH
17733: LD_VAR 0 7
17737: PPUSH
17738: LD_VAR 0 8
17742: PPUSH
17743: LD_VAR 0 9
17747: PPUSH
17748: LD_VAR 0 4
17752: PPUSH
17753: LD_VAR 0 5
17757: PPUSH
17758: CALL 17800 0 6
17762: GO 17795
17764: LD_INT 304
17766: DOUBLE
17767: EQUAL
17768: IFTRUE 17772
17770: GO 17794
17772: POP
// hHackTeleport ( unit , x , y ) ; end ;
17773: LD_VAR 0 2
17777: PPUSH
17778: LD_VAR 0 4
17782: PPUSH
17783: LD_VAR 0 5
17787: PPUSH
17788: CALL 19559 0 3
17792: GO 17795
17794: POP
// end ;
17795: LD_VAR 0 12
17799: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17800: LD_INT 0
17802: PPUSH
17803: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17804: LD_VAR 0 1
17808: PUSH
17809: LD_INT 1
17811: LESS
17812: PUSH
17813: LD_VAR 0 1
17817: PUSH
17818: LD_INT 3
17820: GREATER
17821: OR
17822: PUSH
17823: LD_VAR 0 5
17827: PPUSH
17828: LD_VAR 0 6
17832: PPUSH
17833: CALL_OW 428
17837: OR
17838: IFFALSE 17842
// exit ;
17840: GO 18562
// uc_side := your_side ;
17842: LD_ADDR_OWVAR 20
17846: PUSH
17847: LD_OWVAR 2
17851: ST_TO_ADDR
// uc_nation := nation ;
17852: LD_ADDR_OWVAR 21
17856: PUSH
17857: LD_VAR 0 1
17861: ST_TO_ADDR
// bc_level = 1 ;
17862: LD_ADDR_OWVAR 43
17866: PUSH
17867: LD_INT 1
17869: ST_TO_ADDR
// case btype of 1 :
17870: LD_VAR 0 2
17874: PUSH
17875: LD_INT 1
17877: DOUBLE
17878: EQUAL
17879: IFTRUE 17883
17881: GO 17894
17883: POP
// bc_type := b_depot ; 2 :
17884: LD_ADDR_OWVAR 42
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
17892: GO 18506
17894: LD_INT 2
17896: DOUBLE
17897: EQUAL
17898: IFTRUE 17902
17900: GO 17913
17902: POP
// bc_type := b_warehouse ; 3 :
17903: LD_ADDR_OWVAR 42
17907: PUSH
17908: LD_INT 1
17910: ST_TO_ADDR
17911: GO 18506
17913: LD_INT 3
17915: DOUBLE
17916: EQUAL
17917: IFTRUE 17921
17919: GO 17932
17921: POP
// bc_type := b_lab ; 4 .. 9 :
17922: LD_ADDR_OWVAR 42
17926: PUSH
17927: LD_INT 6
17929: ST_TO_ADDR
17930: GO 18506
17932: LD_INT 4
17934: DOUBLE
17935: GREATEREQUAL
17936: IFFALSE 17944
17938: LD_INT 9
17940: DOUBLE
17941: LESSEQUAL
17942: IFTRUE 17946
17944: GO 17998
17946: POP
// begin bc_type := b_lab_half ;
17947: LD_ADDR_OWVAR 42
17951: PUSH
17952: LD_INT 7
17954: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17955: LD_ADDR_OWVAR 44
17959: PUSH
17960: LD_INT 10
17962: PUSH
17963: LD_INT 11
17965: PUSH
17966: LD_INT 12
17968: PUSH
17969: LD_INT 15
17971: PUSH
17972: LD_INT 14
17974: PUSH
17975: LD_INT 13
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: PUSH
17986: LD_VAR 0 2
17990: PUSH
17991: LD_INT 3
17993: MINUS
17994: ARRAY
17995: ST_TO_ADDR
// end ; 10 .. 13 :
17996: GO 18506
17998: LD_INT 10
18000: DOUBLE
18001: GREATEREQUAL
18002: IFFALSE 18010
18004: LD_INT 13
18006: DOUBLE
18007: LESSEQUAL
18008: IFTRUE 18012
18010: GO 18089
18012: POP
// begin bc_type := b_lab_full ;
18013: LD_ADDR_OWVAR 42
18017: PUSH
18018: LD_INT 8
18020: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18021: LD_ADDR_OWVAR 44
18025: PUSH
18026: LD_INT 10
18028: PUSH
18029: LD_INT 12
18031: PUSH
18032: LD_INT 14
18034: PUSH
18035: LD_INT 13
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: PUSH
18044: LD_VAR 0 2
18048: PUSH
18049: LD_INT 9
18051: MINUS
18052: ARRAY
18053: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18054: LD_ADDR_OWVAR 45
18058: PUSH
18059: LD_INT 11
18061: PUSH
18062: LD_INT 15
18064: PUSH
18065: LD_INT 12
18067: PUSH
18068: LD_INT 15
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: LD_VAR 0 2
18081: PUSH
18082: LD_INT 9
18084: MINUS
18085: ARRAY
18086: ST_TO_ADDR
// end ; 14 :
18087: GO 18506
18089: LD_INT 14
18091: DOUBLE
18092: EQUAL
18093: IFTRUE 18097
18095: GO 18108
18097: POP
// bc_type := b_workshop ; 15 :
18098: LD_ADDR_OWVAR 42
18102: PUSH
18103: LD_INT 2
18105: ST_TO_ADDR
18106: GO 18506
18108: LD_INT 15
18110: DOUBLE
18111: EQUAL
18112: IFTRUE 18116
18114: GO 18127
18116: POP
// bc_type := b_factory ; 16 :
18117: LD_ADDR_OWVAR 42
18121: PUSH
18122: LD_INT 3
18124: ST_TO_ADDR
18125: GO 18506
18127: LD_INT 16
18129: DOUBLE
18130: EQUAL
18131: IFTRUE 18135
18133: GO 18146
18135: POP
// bc_type := b_ext_gun ; 17 :
18136: LD_ADDR_OWVAR 42
18140: PUSH
18141: LD_INT 17
18143: ST_TO_ADDR
18144: GO 18506
18146: LD_INT 17
18148: DOUBLE
18149: EQUAL
18150: IFTRUE 18154
18152: GO 18182
18154: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18155: LD_ADDR_OWVAR 42
18159: PUSH
18160: LD_INT 19
18162: PUSH
18163: LD_INT 23
18165: PUSH
18166: LD_INT 19
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PUSH
18174: LD_VAR 0 1
18178: ARRAY
18179: ST_TO_ADDR
18180: GO 18506
18182: LD_INT 18
18184: DOUBLE
18185: EQUAL
18186: IFTRUE 18190
18188: GO 18201
18190: POP
// bc_type := b_ext_radar ; 19 :
18191: LD_ADDR_OWVAR 42
18195: PUSH
18196: LD_INT 20
18198: ST_TO_ADDR
18199: GO 18506
18201: LD_INT 19
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18220
18209: POP
// bc_type := b_ext_radio ; 20 :
18210: LD_ADDR_OWVAR 42
18214: PUSH
18215: LD_INT 22
18217: ST_TO_ADDR
18218: GO 18506
18220: LD_INT 20
18222: DOUBLE
18223: EQUAL
18224: IFTRUE 18228
18226: GO 18239
18228: POP
// bc_type := b_ext_siberium ; 21 :
18229: LD_ADDR_OWVAR 42
18233: PUSH
18234: LD_INT 21
18236: ST_TO_ADDR
18237: GO 18506
18239: LD_INT 21
18241: DOUBLE
18242: EQUAL
18243: IFTRUE 18247
18245: GO 18258
18247: POP
// bc_type := b_ext_computer ; 22 :
18248: LD_ADDR_OWVAR 42
18252: PUSH
18253: LD_INT 24
18255: ST_TO_ADDR
18256: GO 18506
18258: LD_INT 22
18260: DOUBLE
18261: EQUAL
18262: IFTRUE 18266
18264: GO 18277
18266: POP
// bc_type := b_ext_track ; 23 :
18267: LD_ADDR_OWVAR 42
18271: PUSH
18272: LD_INT 16
18274: ST_TO_ADDR
18275: GO 18506
18277: LD_INT 23
18279: DOUBLE
18280: EQUAL
18281: IFTRUE 18285
18283: GO 18296
18285: POP
// bc_type := b_ext_laser ; 24 :
18286: LD_ADDR_OWVAR 42
18290: PUSH
18291: LD_INT 25
18293: ST_TO_ADDR
18294: GO 18506
18296: LD_INT 24
18298: DOUBLE
18299: EQUAL
18300: IFTRUE 18304
18302: GO 18315
18304: POP
// bc_type := b_control_tower ; 25 :
18305: LD_ADDR_OWVAR 42
18309: PUSH
18310: LD_INT 36
18312: ST_TO_ADDR
18313: GO 18506
18315: LD_INT 25
18317: DOUBLE
18318: EQUAL
18319: IFTRUE 18323
18321: GO 18334
18323: POP
// bc_type := b_breastwork ; 26 :
18324: LD_ADDR_OWVAR 42
18328: PUSH
18329: LD_INT 31
18331: ST_TO_ADDR
18332: GO 18506
18334: LD_INT 26
18336: DOUBLE
18337: EQUAL
18338: IFTRUE 18342
18340: GO 18353
18342: POP
// bc_type := b_bunker ; 27 :
18343: LD_ADDR_OWVAR 42
18347: PUSH
18348: LD_INT 32
18350: ST_TO_ADDR
18351: GO 18506
18353: LD_INT 27
18355: DOUBLE
18356: EQUAL
18357: IFTRUE 18361
18359: GO 18372
18361: POP
// bc_type := b_turret ; 28 :
18362: LD_ADDR_OWVAR 42
18366: PUSH
18367: LD_INT 33
18369: ST_TO_ADDR
18370: GO 18506
18372: LD_INT 28
18374: DOUBLE
18375: EQUAL
18376: IFTRUE 18380
18378: GO 18391
18380: POP
// bc_type := b_armoury ; 29 :
18381: LD_ADDR_OWVAR 42
18385: PUSH
18386: LD_INT 4
18388: ST_TO_ADDR
18389: GO 18506
18391: LD_INT 29
18393: DOUBLE
18394: EQUAL
18395: IFTRUE 18399
18397: GO 18410
18399: POP
// bc_type := b_barracks ; 30 :
18400: LD_ADDR_OWVAR 42
18404: PUSH
18405: LD_INT 5
18407: ST_TO_ADDR
18408: GO 18506
18410: LD_INT 30
18412: DOUBLE
18413: EQUAL
18414: IFTRUE 18418
18416: GO 18429
18418: POP
// bc_type := b_solar_power ; 31 :
18419: LD_ADDR_OWVAR 42
18423: PUSH
18424: LD_INT 27
18426: ST_TO_ADDR
18427: GO 18506
18429: LD_INT 31
18431: DOUBLE
18432: EQUAL
18433: IFTRUE 18437
18435: GO 18448
18437: POP
// bc_type := b_oil_power ; 32 :
18438: LD_ADDR_OWVAR 42
18442: PUSH
18443: LD_INT 26
18445: ST_TO_ADDR
18446: GO 18506
18448: LD_INT 32
18450: DOUBLE
18451: EQUAL
18452: IFTRUE 18456
18454: GO 18467
18456: POP
// bc_type := b_siberite_power ; 33 :
18457: LD_ADDR_OWVAR 42
18461: PUSH
18462: LD_INT 28
18464: ST_TO_ADDR
18465: GO 18506
18467: LD_INT 33
18469: DOUBLE
18470: EQUAL
18471: IFTRUE 18475
18473: GO 18486
18475: POP
// bc_type := b_oil_mine ; 34 :
18476: LD_ADDR_OWVAR 42
18480: PUSH
18481: LD_INT 29
18483: ST_TO_ADDR
18484: GO 18506
18486: LD_INT 34
18488: DOUBLE
18489: EQUAL
18490: IFTRUE 18494
18492: GO 18505
18494: POP
// bc_type := b_siberite_mine ; end ;
18495: LD_ADDR_OWVAR 42
18499: PUSH
18500: LD_INT 30
18502: ST_TO_ADDR
18503: GO 18506
18505: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18506: LD_ADDR_VAR 0 8
18510: PUSH
18511: LD_VAR 0 5
18515: PPUSH
18516: LD_VAR 0 6
18520: PPUSH
18521: LD_VAR 0 3
18525: PPUSH
18526: CALL_OW 47
18530: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18531: LD_OWVAR 42
18535: PUSH
18536: LD_INT 32
18538: PUSH
18539: LD_INT 33
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: IN
18546: IFFALSE 18562
// PlaceWeaponTurret ( b , weapon ) ;
18548: LD_VAR 0 8
18552: PPUSH
18553: LD_VAR 0 4
18557: PPUSH
18558: CALL_OW 431
// end ;
18562: LD_VAR 0 7
18566: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18567: LD_INT 0
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18573: LD_ADDR_VAR 0 4
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_OWVAR 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: LD_INT 30
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 30
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PPUSH
18622: CALL_OW 69
18626: ST_TO_ADDR
// if not tmp then
18627: LD_VAR 0 4
18631: NOT
18632: IFFALSE 18636
// exit ;
18634: GO 18695
// for i in tmp do
18636: LD_ADDR_VAR 0 2
18640: PUSH
18641: LD_VAR 0 4
18645: PUSH
18646: FOR_IN
18647: IFFALSE 18693
// for j = 1 to 3 do
18649: LD_ADDR_VAR 0 3
18653: PUSH
18654: DOUBLE
18655: LD_INT 1
18657: DEC
18658: ST_TO_ADDR
18659: LD_INT 3
18661: PUSH
18662: FOR_TO
18663: IFFALSE 18689
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18665: LD_VAR 0 2
18669: PPUSH
18670: CALL_OW 274
18674: PPUSH
18675: LD_VAR 0 3
18679: PPUSH
18680: LD_INT 99999
18682: PPUSH
18683: CALL_OW 277
18687: GO 18662
18689: POP
18690: POP
18691: GO 18646
18693: POP
18694: POP
// end ;
18695: LD_VAR 0 1
18699: RET
// export function hHackSetLevel10 ; var i , j ; begin
18700: LD_INT 0
18702: PPUSH
18703: PPUSH
18704: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18705: LD_ADDR_VAR 0 2
18709: PUSH
18710: LD_INT 21
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PPUSH
18720: CALL_OW 69
18724: PUSH
18725: FOR_IN
18726: IFFALSE 18778
// if IsSelected ( i ) then
18728: LD_VAR 0 2
18732: PPUSH
18733: CALL_OW 306
18737: IFFALSE 18776
// begin for j := 1 to 4 do
18739: LD_ADDR_VAR 0 3
18743: PUSH
18744: DOUBLE
18745: LD_INT 1
18747: DEC
18748: ST_TO_ADDR
18749: LD_INT 4
18751: PUSH
18752: FOR_TO
18753: IFFALSE 18774
// SetSkill ( i , j , 10 ) ;
18755: LD_VAR 0 2
18759: PPUSH
18760: LD_VAR 0 3
18764: PPUSH
18765: LD_INT 10
18767: PPUSH
18768: CALL_OW 237
18772: GO 18752
18774: POP
18775: POP
// end ;
18776: GO 18725
18778: POP
18779: POP
// end ;
18780: LD_VAR 0 1
18784: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18785: LD_INT 0
18787: PPUSH
18788: PPUSH
18789: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18790: LD_ADDR_VAR 0 2
18794: PUSH
18795: LD_INT 22
18797: PUSH
18798: LD_OWVAR 2
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 21
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: PUSH
18826: FOR_IN
18827: IFFALSE 18868
// begin for j := 1 to 4 do
18829: LD_ADDR_VAR 0 3
18833: PUSH
18834: DOUBLE
18835: LD_INT 1
18837: DEC
18838: ST_TO_ADDR
18839: LD_INT 4
18841: PUSH
18842: FOR_TO
18843: IFFALSE 18864
// SetSkill ( i , j , 10 ) ;
18845: LD_VAR 0 2
18849: PPUSH
18850: LD_VAR 0 3
18854: PPUSH
18855: LD_INT 10
18857: PPUSH
18858: CALL_OW 237
18862: GO 18842
18864: POP
18865: POP
// end ;
18866: GO 18826
18868: POP
18869: POP
// end ;
18870: LD_VAR 0 1
18874: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18875: LD_INT 0
18877: PPUSH
// uc_side := your_side ;
18878: LD_ADDR_OWVAR 20
18882: PUSH
18883: LD_OWVAR 2
18887: ST_TO_ADDR
// uc_nation := nation ;
18888: LD_ADDR_OWVAR 21
18892: PUSH
18893: LD_VAR 0 1
18897: ST_TO_ADDR
// InitHc ;
18898: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18902: LD_INT 0
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: LD_VAR 0 3
18914: PPUSH
18915: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18919: LD_VAR 0 4
18923: PPUSH
18924: LD_VAR 0 5
18928: PPUSH
18929: CALL_OW 428
18933: PUSH
18934: LD_INT 0
18936: EQUAL
18937: IFFALSE 18961
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18939: CALL_OW 44
18943: PPUSH
18944: LD_VAR 0 4
18948: PPUSH
18949: LD_VAR 0 5
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: CALL_OW 48
// end ;
18961: LD_VAR 0 6
18965: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18966: LD_INT 0
18968: PPUSH
18969: PPUSH
// uc_side := your_side ;
18970: LD_ADDR_OWVAR 20
18974: PUSH
18975: LD_OWVAR 2
18979: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18980: LD_VAR 0 1
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: LD_INT 4
18996: PUSH
18997: LD_INT 5
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: IN
19007: IFFALSE 19019
// uc_nation := nation_american else
19009: LD_ADDR_OWVAR 21
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
19017: GO 19062
// if chassis in [ 11 , 12 , 13 , 14 ] then
19019: LD_VAR 0 1
19023: PUSH
19024: LD_INT 11
19026: PUSH
19027: LD_INT 12
19029: PUSH
19030: LD_INT 13
19032: PUSH
19033: LD_INT 14
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: IN
19042: IFFALSE 19054
// uc_nation := nation_arabian else
19044: LD_ADDR_OWVAR 21
19048: PUSH
19049: LD_INT 2
19051: ST_TO_ADDR
19052: GO 19062
// uc_nation := nation_russian ;
19054: LD_ADDR_OWVAR 21
19058: PUSH
19059: LD_INT 3
19061: ST_TO_ADDR
// vc_chassis := chassis ;
19062: LD_ADDR_OWVAR 37
19066: PUSH
19067: LD_VAR 0 1
19071: ST_TO_ADDR
// vc_engine := engine ;
19072: LD_ADDR_OWVAR 39
19076: PUSH
19077: LD_VAR 0 2
19081: ST_TO_ADDR
// vc_control := control ;
19082: LD_ADDR_OWVAR 38
19086: PUSH
19087: LD_VAR 0 3
19091: ST_TO_ADDR
// vc_weapon := weapon ;
19092: LD_ADDR_OWVAR 40
19096: PUSH
19097: LD_VAR 0 4
19101: ST_TO_ADDR
// un := CreateVehicle ;
19102: LD_ADDR_VAR 0 8
19106: PUSH
19107: CALL_OW 45
19111: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19112: LD_VAR 0 8
19116: PPUSH
19117: LD_INT 0
19119: PPUSH
19120: LD_INT 5
19122: PPUSH
19123: CALL_OW 12
19127: PPUSH
19128: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19132: LD_VAR 0 8
19136: PPUSH
19137: LD_VAR 0 5
19141: PPUSH
19142: LD_VAR 0 6
19146: PPUSH
19147: LD_INT 1
19149: PPUSH
19150: CALL_OW 48
// end ;
19154: LD_VAR 0 7
19158: RET
// export hInvincible ; every 1 do
19159: GO 19161
19161: DISABLE
// hInvincible := [ ] ;
19162: LD_ADDR_EXP 81
19166: PUSH
19167: EMPTY
19168: ST_TO_ADDR
19169: END
// every 10 do var i ;
19170: GO 19172
19172: DISABLE
19173: LD_INT 0
19175: PPUSH
// begin enable ;
19176: ENABLE
// if not hInvincible then
19177: LD_EXP 81
19181: NOT
19182: IFFALSE 19186
// exit ;
19184: GO 19230
// for i in hInvincible do
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_EXP 81
19195: PUSH
19196: FOR_IN
19197: IFFALSE 19228
// if GetLives ( i ) < 1000 then
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL_OW 256
19208: PUSH
19209: LD_INT 1000
19211: LESS
19212: IFFALSE 19226
// SetLives ( i , 1000 ) ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_INT 1000
19221: PPUSH
19222: CALL_OW 234
19226: GO 19196
19228: POP
19229: POP
// end ;
19230: PPOPN 1
19232: END
// export function hHackInvincible ; var i ; begin
19233: LD_INT 0
19235: PPUSH
19236: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19237: LD_ADDR_VAR 0 2
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 21
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: PUSH
19275: FOR_IN
19276: IFFALSE 19337
// if IsSelected ( i ) then
19278: LD_VAR 0 2
19282: PPUSH
19283: CALL_OW 306
19287: IFFALSE 19335
// begin if i in hInvincible then
19289: LD_VAR 0 2
19293: PUSH
19294: LD_EXP 81
19298: IN
19299: IFFALSE 19319
// hInvincible := hInvincible diff i else
19301: LD_ADDR_EXP 81
19305: PUSH
19306: LD_EXP 81
19310: PUSH
19311: LD_VAR 0 2
19315: DIFF
19316: ST_TO_ADDR
19317: GO 19335
// hInvincible := hInvincible union i ;
19319: LD_ADDR_EXP 81
19323: PUSH
19324: LD_EXP 81
19328: PUSH
19329: LD_VAR 0 2
19333: UNION
19334: ST_TO_ADDR
// end ;
19335: GO 19275
19337: POP
19338: POP
// end ;
19339: LD_VAR 0 1
19343: RET
// export function hHackInvisible ; var i , j ; begin
19344: LD_INT 0
19346: PPUSH
19347: PPUSH
19348: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19349: LD_ADDR_VAR 0 2
19353: PUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PPUSH
19364: CALL_OW 69
19368: PUSH
19369: FOR_IN
19370: IFFALSE 19394
// if IsSelected ( i ) then
19372: LD_VAR 0 2
19376: PPUSH
19377: CALL_OW 306
19381: IFFALSE 19392
// ComForceInvisible ( i ) ;
19383: LD_VAR 0 2
19387: PPUSH
19388: CALL_OW 496
19392: GO 19369
19394: POP
19395: POP
// end ;
19396: LD_VAR 0 1
19400: RET
// export function hHackChangeYourSide ; begin
19401: LD_INT 0
19403: PPUSH
// if your_side = 8 then
19404: LD_OWVAR 2
19408: PUSH
19409: LD_INT 8
19411: EQUAL
19412: IFFALSE 19424
// your_side := 0 else
19414: LD_ADDR_OWVAR 2
19418: PUSH
19419: LD_INT 0
19421: ST_TO_ADDR
19422: GO 19438
// your_side := your_side + 1 ;
19424: LD_ADDR_OWVAR 2
19428: PUSH
19429: LD_OWVAR 2
19433: PUSH
19434: LD_INT 1
19436: PLUS
19437: ST_TO_ADDR
// end ;
19438: LD_VAR 0 1
19442: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
19447: PPUSH
// for i in all_units do
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_OWVAR 3
19457: PUSH
19458: FOR_IN
19459: IFFALSE 19537
// if IsSelected ( i ) then
19461: LD_VAR 0 2
19465: PPUSH
19466: CALL_OW 306
19470: IFFALSE 19535
// begin j := GetSide ( i ) ;
19472: LD_ADDR_VAR 0 3
19476: PUSH
19477: LD_VAR 0 2
19481: PPUSH
19482: CALL_OW 255
19486: ST_TO_ADDR
// if j = 8 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 8
19494: EQUAL
19495: IFFALSE 19507
// j := 0 else
19497: LD_ADDR_VAR 0 3
19501: PUSH
19502: LD_INT 0
19504: ST_TO_ADDR
19505: GO 19521
// j := j + 1 ;
19507: LD_ADDR_VAR 0 3
19511: PUSH
19512: LD_VAR 0 3
19516: PUSH
19517: LD_INT 1
19519: PLUS
19520: ST_TO_ADDR
// SetSide ( i , j ) ;
19521: LD_VAR 0 2
19525: PPUSH
19526: LD_VAR 0 3
19530: PPUSH
19531: CALL_OW 235
// end ;
19535: GO 19458
19537: POP
19538: POP
// end ;
19539: LD_VAR 0 1
19543: RET
// export function hHackFog ; begin
19544: LD_INT 0
19546: PPUSH
// FogOff ( true ) ;
19547: LD_INT 1
19549: PPUSH
19550: CALL_OW 344
// end ;
19554: LD_VAR 0 1
19558: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19559: LD_INT 0
19561: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19562: LD_VAR 0 1
19566: PPUSH
19567: LD_VAR 0 2
19571: PPUSH
19572: LD_VAR 0 3
19576: PPUSH
19577: LD_INT 1
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 483
// CenterOnXY ( x , y ) ;
19587: LD_VAR 0 2
19591: PPUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: CALL_OW 84
// end ; end_of_file
19601: LD_VAR 0 4
19605: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
19610: PPUSH
19611: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19612: LD_VAR 0 1
19616: PPUSH
19617: CALL_OW 264
19621: PUSH
19622: LD_EXP 98
19626: EQUAL
19627: IFFALSE 19699
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19629: LD_INT 68
19631: PPUSH
19632: LD_VAR 0 1
19636: PPUSH
19637: CALL_OW 255
19641: PPUSH
19642: CALL_OW 321
19646: PUSH
19647: LD_INT 2
19649: EQUAL
19650: IFFALSE 19662
// eff := 70 else
19652: LD_ADDR_VAR 0 4
19656: PUSH
19657: LD_INT 70
19659: ST_TO_ADDR
19660: GO 19670
// eff := 30 ;
19662: LD_ADDR_VAR 0 4
19666: PUSH
19667: LD_INT 30
19669: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 250
19679: PPUSH
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 251
19689: PPUSH
19690: LD_VAR 0 4
19694: PPUSH
19695: CALL_OW 495
// end ; end ;
19699: LD_VAR 0 2
19703: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19704: LD_INT 0
19706: PPUSH
// end ;
19707: LD_VAR 0 4
19711: RET
// export function SOS_Command ( cmd ) ; begin
19712: LD_INT 0
19714: PPUSH
// end ;
19715: LD_VAR 0 2
19719: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19720: LD_INT 0
19722: PPUSH
// if cmd = 121 then
19723: LD_VAR 0 1
19727: PUSH
19728: LD_INT 121
19730: EQUAL
19731: IFFALSE 19733
// end ;
19733: LD_VAR 0 6
19737: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19738: LD_INT 0
19740: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19741: LD_VAR 0 1
19745: PUSH
19746: LD_INT 250
19748: EQUAL
19749: PUSH
19750: LD_VAR 0 2
19754: PPUSH
19755: CALL_OW 264
19759: PUSH
19760: LD_EXP 101
19764: EQUAL
19765: AND
19766: IFFALSE 19787
// MinerPlaceMine ( unit , x , y ) ;
19768: LD_VAR 0 2
19772: PPUSH
19773: LD_VAR 0 4
19777: PPUSH
19778: LD_VAR 0 5
19782: PPUSH
19783: CALL 22136 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19787: LD_VAR 0 1
19791: PUSH
19792: LD_INT 251
19794: EQUAL
19795: PUSH
19796: LD_VAR 0 2
19800: PPUSH
19801: CALL_OW 264
19805: PUSH
19806: LD_EXP 101
19810: EQUAL
19811: AND
19812: IFFALSE 19833
// MinerDetonateMine ( unit , x , y ) ;
19814: LD_VAR 0 2
19818: PPUSH
19819: LD_VAR 0 4
19823: PPUSH
19824: LD_VAR 0 5
19828: PPUSH
19829: CALL 22413 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19833: LD_VAR 0 1
19837: PUSH
19838: LD_INT 252
19840: EQUAL
19841: PUSH
19842: LD_VAR 0 2
19846: PPUSH
19847: CALL_OW 264
19851: PUSH
19852: LD_EXP 101
19856: EQUAL
19857: AND
19858: IFFALSE 19879
// MinerCreateMinefield ( unit , x , y ) ;
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 4
19869: PPUSH
19870: LD_VAR 0 5
19874: PPUSH
19875: CALL 22830 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19879: LD_VAR 0 1
19883: PUSH
19884: LD_INT 253
19886: EQUAL
19887: PUSH
19888: LD_VAR 0 2
19892: PPUSH
19893: CALL_OW 257
19897: PUSH
19898: LD_INT 5
19900: EQUAL
19901: AND
19902: IFFALSE 19923
// ComBinocular ( unit , x , y ) ;
19904: LD_VAR 0 2
19908: PPUSH
19909: LD_VAR 0 4
19913: PPUSH
19914: LD_VAR 0 5
19918: PPUSH
19919: CALL 23201 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19923: LD_VAR 0 1
19927: PUSH
19928: LD_INT 254
19930: EQUAL
19931: PUSH
19932: LD_VAR 0 2
19936: PPUSH
19937: CALL_OW 264
19941: PUSH
19942: LD_EXP 96
19946: EQUAL
19947: AND
19948: PUSH
19949: LD_VAR 0 3
19953: PPUSH
19954: CALL_OW 263
19958: PUSH
19959: LD_INT 3
19961: EQUAL
19962: AND
19963: IFFALSE 19979
// HackDestroyVehicle ( unit , selectedUnit ) ;
19965: LD_VAR 0 2
19969: PPUSH
19970: LD_VAR 0 3
19974: PPUSH
19975: CALL 21496 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19979: LD_VAR 0 1
19983: PUSH
19984: LD_INT 255
19986: EQUAL
19987: PUSH
19988: LD_VAR 0 2
19992: PPUSH
19993: CALL_OW 264
19997: PUSH
19998: LD_INT 14
20000: PUSH
20001: LD_INT 53
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: IN
20008: AND
20009: PUSH
20010: LD_VAR 0 4
20014: PPUSH
20015: LD_VAR 0 5
20019: PPUSH
20020: CALL_OW 488
20024: AND
20025: IFFALSE 20049
// CutTreeXYR ( unit , x , y , 12 ) ;
20027: LD_VAR 0 2
20031: PPUSH
20032: LD_VAR 0 4
20036: PPUSH
20037: LD_VAR 0 5
20041: PPUSH
20042: LD_INT 12
20044: PPUSH
20045: CALL 20062 0 4
// end ;
20049: LD_VAR 0 6
20053: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20054: LD_INT 0
20056: PPUSH
// end ;
20057: LD_VAR 0 4
20061: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20062: LD_INT 0
20064: PPUSH
20065: PPUSH
20066: PPUSH
20067: PPUSH
20068: PPUSH
20069: PPUSH
20070: PPUSH
20071: PPUSH
20072: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20073: LD_VAR 0 1
20077: NOT
20078: PUSH
20079: LD_VAR 0 2
20083: PPUSH
20084: LD_VAR 0 3
20088: PPUSH
20089: CALL_OW 488
20093: NOT
20094: OR
20095: PUSH
20096: LD_VAR 0 4
20100: NOT
20101: OR
20102: IFFALSE 20106
// exit ;
20104: GO 20446
// list := [ ] ;
20106: LD_ADDR_VAR 0 13
20110: PUSH
20111: EMPTY
20112: ST_TO_ADDR
// if x - r < 0 then
20113: LD_VAR 0 2
20117: PUSH
20118: LD_VAR 0 4
20122: MINUS
20123: PUSH
20124: LD_INT 0
20126: LESS
20127: IFFALSE 20139
// min_x := 0 else
20129: LD_ADDR_VAR 0 7
20133: PUSH
20134: LD_INT 0
20136: ST_TO_ADDR
20137: GO 20155
// min_x := x - r ;
20139: LD_ADDR_VAR 0 7
20143: PUSH
20144: LD_VAR 0 2
20148: PUSH
20149: LD_VAR 0 4
20153: MINUS
20154: ST_TO_ADDR
// if y - r < 0 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_VAR 0 4
20164: MINUS
20165: PUSH
20166: LD_INT 0
20168: LESS
20169: IFFALSE 20181
// min_y := 0 else
20171: LD_ADDR_VAR 0 8
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
20179: GO 20197
// min_y := y - r ;
20181: LD_ADDR_VAR 0 8
20185: PUSH
20186: LD_VAR 0 3
20190: PUSH
20191: LD_VAR 0 4
20195: MINUS
20196: ST_TO_ADDR
// max_x := x + r ;
20197: LD_ADDR_VAR 0 9
20201: PUSH
20202: LD_VAR 0 2
20206: PUSH
20207: LD_VAR 0 4
20211: PLUS
20212: ST_TO_ADDR
// max_y := y + r ;
20213: LD_ADDR_VAR 0 10
20217: PUSH
20218: LD_VAR 0 3
20222: PUSH
20223: LD_VAR 0 4
20227: PLUS
20228: ST_TO_ADDR
// for _x = min_x to max_x do
20229: LD_ADDR_VAR 0 11
20233: PUSH
20234: DOUBLE
20235: LD_VAR 0 7
20239: DEC
20240: ST_TO_ADDR
20241: LD_VAR 0 9
20245: PUSH
20246: FOR_TO
20247: IFFALSE 20364
// for _y = min_y to max_y do
20249: LD_ADDR_VAR 0 12
20253: PUSH
20254: DOUBLE
20255: LD_VAR 0 8
20259: DEC
20260: ST_TO_ADDR
20261: LD_VAR 0 10
20265: PUSH
20266: FOR_TO
20267: IFFALSE 20360
// begin if not ValidHex ( _x , _y ) then
20269: LD_VAR 0 11
20273: PPUSH
20274: LD_VAR 0 12
20278: PPUSH
20279: CALL_OW 488
20283: NOT
20284: IFFALSE 20288
// continue ;
20286: GO 20266
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20288: LD_VAR 0 11
20292: PPUSH
20293: LD_VAR 0 12
20297: PPUSH
20298: CALL_OW 351
20302: PUSH
20303: LD_VAR 0 11
20307: PPUSH
20308: LD_VAR 0 12
20312: PPUSH
20313: CALL_OW 554
20317: AND
20318: IFFALSE 20358
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20320: LD_ADDR_VAR 0 13
20324: PUSH
20325: LD_VAR 0 13
20329: PPUSH
20330: LD_VAR 0 13
20334: PUSH
20335: LD_INT 1
20337: PLUS
20338: PPUSH
20339: LD_VAR 0 11
20343: PUSH
20344: LD_VAR 0 12
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PPUSH
20353: CALL_OW 2
20357: ST_TO_ADDR
// end ;
20358: GO 20266
20360: POP
20361: POP
20362: GO 20246
20364: POP
20365: POP
// if not list then
20366: LD_VAR 0 13
20370: NOT
20371: IFFALSE 20375
// exit ;
20373: GO 20446
// for i in list do
20375: LD_ADDR_VAR 0 6
20379: PUSH
20380: LD_VAR 0 13
20384: PUSH
20385: FOR_IN
20386: IFFALSE 20444
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20388: LD_VAR 0 1
20392: PPUSH
20393: LD_STRING M
20395: PUSH
20396: LD_VAR 0 6
20400: PUSH
20401: LD_INT 1
20403: ARRAY
20404: PUSH
20405: LD_VAR 0 6
20409: PUSH
20410: LD_INT 2
20412: ARRAY
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: LD_INT 0
20422: PUSH
20423: LD_INT 0
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: PUSH
20435: EMPTY
20436: LIST
20437: PPUSH
20438: CALL_OW 447
20442: GO 20385
20444: POP
20445: POP
// end ;
20446: LD_VAR 0 5
20450: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20451: LD_EXP 84
20455: NOT
20456: IFFALSE 20506
20458: GO 20460
20460: DISABLE
// begin initHack := true ;
20461: LD_ADDR_EXP 84
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// hackTanks := [ ] ;
20469: LD_ADDR_EXP 85
20473: PUSH
20474: EMPTY
20475: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20476: LD_ADDR_EXP 86
20480: PUSH
20481: EMPTY
20482: ST_TO_ADDR
// hackLimit := 3 ;
20483: LD_ADDR_EXP 87
20487: PUSH
20488: LD_INT 3
20490: ST_TO_ADDR
// hackDist := 12 ;
20491: LD_ADDR_EXP 88
20495: PUSH
20496: LD_INT 12
20498: ST_TO_ADDR
// hackCounter := [ ] ;
20499: LD_ADDR_EXP 89
20503: PUSH
20504: EMPTY
20505: ST_TO_ADDR
// end ;
20506: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20507: LD_EXP 84
20511: PUSH
20512: LD_INT 34
20514: PUSH
20515: LD_EXP 96
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PPUSH
20524: CALL_OW 69
20528: AND
20529: IFFALSE 20784
20531: GO 20533
20533: DISABLE
20534: LD_INT 0
20536: PPUSH
20537: PPUSH
// begin enable ;
20538: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20539: LD_ADDR_VAR 0 1
20543: PUSH
20544: LD_INT 34
20546: PUSH
20547: LD_EXP 96
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PPUSH
20556: CALL_OW 69
20560: PUSH
20561: FOR_IN
20562: IFFALSE 20782
// begin if not i in hackTanks then
20564: LD_VAR 0 1
20568: PUSH
20569: LD_EXP 85
20573: IN
20574: NOT
20575: IFFALSE 20658
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20577: LD_ADDR_EXP 85
20581: PUSH
20582: LD_EXP 85
20586: PPUSH
20587: LD_EXP 85
20591: PUSH
20592: LD_INT 1
20594: PLUS
20595: PPUSH
20596: LD_VAR 0 1
20600: PPUSH
20601: CALL_OW 1
20605: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20606: LD_ADDR_EXP 86
20610: PUSH
20611: LD_EXP 86
20615: PPUSH
20616: LD_EXP 86
20620: PUSH
20621: LD_INT 1
20623: PLUS
20624: PPUSH
20625: EMPTY
20626: PPUSH
20627: CALL_OW 1
20631: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20632: LD_ADDR_EXP 89
20636: PUSH
20637: LD_EXP 89
20641: PPUSH
20642: LD_EXP 89
20646: PUSH
20647: LD_INT 1
20649: PLUS
20650: PPUSH
20651: EMPTY
20652: PPUSH
20653: CALL_OW 1
20657: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20658: LD_VAR 0 1
20662: PPUSH
20663: CALL_OW 302
20667: NOT
20668: IFFALSE 20681
// begin HackUnlinkAll ( i ) ;
20670: LD_VAR 0 1
20674: PPUSH
20675: CALL 20787 0 1
// continue ;
20679: GO 20561
// end ; HackCheckCapturedStatus ( i ) ;
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL 21230 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20690: LD_ADDR_VAR 0 2
20694: PUSH
20695: LD_INT 81
20697: PUSH
20698: LD_VAR 0 1
20702: PPUSH
20703: CALL_OW 255
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 33
20714: PUSH
20715: LD_INT 3
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 91
20724: PUSH
20725: LD_VAR 0 1
20729: PUSH
20730: LD_EXP 88
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 50
20742: PUSH
20743: EMPTY
20744: LIST
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: PPUSH
20752: CALL_OW 69
20756: ST_TO_ADDR
// if not tmp then
20757: LD_VAR 0 2
20761: NOT
20762: IFFALSE 20766
// continue ;
20764: GO 20561
// HackLink ( i , tmp ) ;
20766: LD_VAR 0 1
20770: PPUSH
20771: LD_VAR 0 2
20775: PPUSH
20776: CALL 20923 0 2
// end ;
20780: GO 20561
20782: POP
20783: POP
// end ;
20784: PPOPN 2
20786: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20787: LD_INT 0
20789: PPUSH
20790: PPUSH
20791: PPUSH
// if not hack in hackTanks then
20792: LD_VAR 0 1
20796: PUSH
20797: LD_EXP 85
20801: IN
20802: NOT
20803: IFFALSE 20807
// exit ;
20805: GO 20918
// index := GetElementIndex ( hackTanks , hack ) ;
20807: LD_ADDR_VAR 0 4
20811: PUSH
20812: LD_EXP 85
20816: PPUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL 28560 0 2
20826: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20827: LD_EXP 86
20831: PUSH
20832: LD_VAR 0 4
20836: ARRAY
20837: IFFALSE 20918
// begin for i in hackTanksCaptured [ index ] do
20839: LD_ADDR_VAR 0 3
20843: PUSH
20844: LD_EXP 86
20848: PUSH
20849: LD_VAR 0 4
20853: ARRAY
20854: PUSH
20855: FOR_IN
20856: IFFALSE 20882
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20858: LD_VAR 0 3
20862: PUSH
20863: LD_INT 1
20865: ARRAY
20866: PPUSH
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 2
20874: ARRAY
20875: PPUSH
20876: CALL_OW 235
20880: GO 20855
20882: POP
20883: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20884: LD_ADDR_EXP 86
20888: PUSH
20889: LD_EXP 86
20893: PPUSH
20894: LD_VAR 0 4
20898: PPUSH
20899: EMPTY
20900: PPUSH
20901: CALL_OW 1
20905: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20906: LD_VAR 0 1
20910: PPUSH
20911: LD_INT 0
20913: PPUSH
20914: CALL_OW 505
// end ; end ;
20918: LD_VAR 0 2
20922: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20923: LD_INT 0
20925: PPUSH
20926: PPUSH
20927: PPUSH
// if not hack in hackTanks or not vehicles then
20928: LD_VAR 0 1
20932: PUSH
20933: LD_EXP 85
20937: IN
20938: NOT
20939: PUSH
20940: LD_VAR 0 2
20944: NOT
20945: OR
20946: IFFALSE 20950
// exit ;
20948: GO 21225
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20950: LD_ADDR_VAR 0 2
20954: PUSH
20955: LD_VAR 0 1
20959: PPUSH
20960: LD_VAR 0 2
20964: PPUSH
20965: LD_INT 1
20967: PPUSH
20968: LD_INT 1
20970: PPUSH
20971: CALL 29210 0 4
20975: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20976: LD_ADDR_VAR 0 5
20980: PUSH
20981: LD_EXP 85
20985: PPUSH
20986: LD_VAR 0 1
20990: PPUSH
20991: CALL 28560 0 2
20995: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20996: LD_EXP 86
21000: PUSH
21001: LD_VAR 0 5
21005: ARRAY
21006: PUSH
21007: LD_EXP 87
21011: LESS
21012: IFFALSE 21201
// begin for i := 1 to vehicles do
21014: LD_ADDR_VAR 0 4
21018: PUSH
21019: DOUBLE
21020: LD_INT 1
21022: DEC
21023: ST_TO_ADDR
21024: LD_VAR 0 2
21028: PUSH
21029: FOR_TO
21030: IFFALSE 21199
// begin if hackTanksCaptured [ index ] = hackLimit then
21032: LD_EXP 86
21036: PUSH
21037: LD_VAR 0 5
21041: ARRAY
21042: PUSH
21043: LD_EXP 87
21047: EQUAL
21048: IFFALSE 21052
// break ;
21050: GO 21199
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21052: LD_ADDR_EXP 89
21056: PUSH
21057: LD_EXP 89
21061: PPUSH
21062: LD_VAR 0 5
21066: PPUSH
21067: LD_EXP 89
21071: PUSH
21072: LD_VAR 0 5
21076: ARRAY
21077: PUSH
21078: LD_INT 1
21080: PLUS
21081: PPUSH
21082: CALL_OW 1
21086: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21087: LD_ADDR_EXP 86
21091: PUSH
21092: LD_EXP 86
21096: PPUSH
21097: LD_VAR 0 5
21101: PUSH
21102: LD_EXP 86
21106: PUSH
21107: LD_VAR 0 5
21111: ARRAY
21112: PUSH
21113: LD_INT 1
21115: PLUS
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PPUSH
21121: LD_VAR 0 2
21125: PUSH
21126: LD_VAR 0 4
21130: ARRAY
21131: PUSH
21132: LD_VAR 0 2
21136: PUSH
21137: LD_VAR 0 4
21141: ARRAY
21142: PPUSH
21143: CALL_OW 255
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PPUSH
21152: CALL 28775 0 3
21156: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21157: LD_VAR 0 2
21161: PUSH
21162: LD_VAR 0 4
21166: ARRAY
21167: PPUSH
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL_OW 255
21177: PPUSH
21178: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21182: LD_VAR 0 2
21186: PUSH
21187: LD_VAR 0 4
21191: ARRAY
21192: PPUSH
21193: CALL_OW 141
// end ;
21197: GO 21029
21199: POP
21200: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21201: LD_VAR 0 1
21205: PPUSH
21206: LD_EXP 86
21210: PUSH
21211: LD_VAR 0 5
21215: ARRAY
21216: PUSH
21217: LD_INT 0
21219: PLUS
21220: PPUSH
21221: CALL_OW 505
// end ;
21225: LD_VAR 0 3
21229: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21230: LD_INT 0
21232: PPUSH
21233: PPUSH
21234: PPUSH
21235: PPUSH
// if not hack in hackTanks then
21236: LD_VAR 0 1
21240: PUSH
21241: LD_EXP 85
21245: IN
21246: NOT
21247: IFFALSE 21251
// exit ;
21249: GO 21491
// index := GetElementIndex ( hackTanks , hack ) ;
21251: LD_ADDR_VAR 0 4
21255: PUSH
21256: LD_EXP 85
21260: PPUSH
21261: LD_VAR 0 1
21265: PPUSH
21266: CALL 28560 0 2
21270: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21271: LD_ADDR_VAR 0 3
21275: PUSH
21276: DOUBLE
21277: LD_EXP 86
21281: PUSH
21282: LD_VAR 0 4
21286: ARRAY
21287: INC
21288: ST_TO_ADDR
21289: LD_INT 1
21291: PUSH
21292: FOR_DOWNTO
21293: IFFALSE 21465
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21295: LD_ADDR_VAR 0 5
21299: PUSH
21300: LD_EXP 86
21304: PUSH
21305: LD_VAR 0 4
21309: ARRAY
21310: PUSH
21311: LD_VAR 0 3
21315: ARRAY
21316: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21317: LD_VAR 0 5
21321: PUSH
21322: LD_INT 1
21324: ARRAY
21325: PPUSH
21326: CALL_OW 302
21330: NOT
21331: PUSH
21332: LD_VAR 0 5
21336: PUSH
21337: LD_INT 1
21339: ARRAY
21340: PPUSH
21341: CALL_OW 255
21345: PUSH
21346: LD_VAR 0 1
21350: PPUSH
21351: CALL_OW 255
21355: NONEQUAL
21356: OR
21357: IFFALSE 21463
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21359: LD_VAR 0 5
21363: PUSH
21364: LD_INT 1
21366: ARRAY
21367: PPUSH
21368: CALL_OW 305
21372: PUSH
21373: LD_VAR 0 5
21377: PUSH
21378: LD_INT 1
21380: ARRAY
21381: PPUSH
21382: CALL_OW 255
21386: PUSH
21387: LD_VAR 0 1
21391: PPUSH
21392: CALL_OW 255
21396: EQUAL
21397: AND
21398: IFFALSE 21422
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21400: LD_VAR 0 5
21404: PUSH
21405: LD_INT 1
21407: ARRAY
21408: PPUSH
21409: LD_VAR 0 5
21413: PUSH
21414: LD_INT 2
21416: ARRAY
21417: PPUSH
21418: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21422: LD_ADDR_EXP 86
21426: PUSH
21427: LD_EXP 86
21431: PPUSH
21432: LD_VAR 0 4
21436: PPUSH
21437: LD_EXP 86
21441: PUSH
21442: LD_VAR 0 4
21446: ARRAY
21447: PPUSH
21448: LD_VAR 0 3
21452: PPUSH
21453: CALL_OW 3
21457: PPUSH
21458: CALL_OW 1
21462: ST_TO_ADDR
// end ; end ;
21463: GO 21292
21465: POP
21466: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21467: LD_VAR 0 1
21471: PPUSH
21472: LD_EXP 86
21476: PUSH
21477: LD_VAR 0 4
21481: ARRAY
21482: PUSH
21483: LD_INT 0
21485: PLUS
21486: PPUSH
21487: CALL_OW 505
// end ;
21491: LD_VAR 0 2
21495: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21496: LD_INT 0
21498: PPUSH
21499: PPUSH
21500: PPUSH
21501: PPUSH
// if not hack in hackTanks then
21502: LD_VAR 0 1
21506: PUSH
21507: LD_EXP 85
21511: IN
21512: NOT
21513: IFFALSE 21517
// exit ;
21515: GO 21602
// index := GetElementIndex ( hackTanks , hack ) ;
21517: LD_ADDR_VAR 0 5
21521: PUSH
21522: LD_EXP 85
21526: PPUSH
21527: LD_VAR 0 1
21531: PPUSH
21532: CALL 28560 0 2
21536: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21537: LD_ADDR_VAR 0 4
21541: PUSH
21542: DOUBLE
21543: LD_INT 1
21545: DEC
21546: ST_TO_ADDR
21547: LD_EXP 86
21551: PUSH
21552: LD_VAR 0 5
21556: ARRAY
21557: PUSH
21558: FOR_TO
21559: IFFALSE 21600
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21561: LD_EXP 86
21565: PUSH
21566: LD_VAR 0 5
21570: ARRAY
21571: PUSH
21572: LD_VAR 0 4
21576: ARRAY
21577: PUSH
21578: LD_INT 1
21580: ARRAY
21581: PUSH
21582: LD_VAR 0 2
21586: EQUAL
21587: IFFALSE 21598
// KillUnit ( vehicle ) ;
21589: LD_VAR 0 2
21593: PPUSH
21594: CALL_OW 66
21598: GO 21558
21600: POP
21601: POP
// end ;
21602: LD_VAR 0 3
21606: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21607: LD_EXP 90
21611: NOT
21612: IFFALSE 21647
21614: GO 21616
21616: DISABLE
// begin initMiner := true ;
21617: LD_ADDR_EXP 90
21621: PUSH
21622: LD_INT 1
21624: ST_TO_ADDR
// minersList := [ ] ;
21625: LD_ADDR_EXP 91
21629: PUSH
21630: EMPTY
21631: ST_TO_ADDR
// minerMinesList := [ ] ;
21632: LD_ADDR_EXP 92
21636: PUSH
21637: EMPTY
21638: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21639: LD_ADDR_EXP 93
21643: PUSH
21644: LD_INT 5
21646: ST_TO_ADDR
// end ;
21647: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21648: LD_EXP 90
21652: PUSH
21653: LD_INT 34
21655: PUSH
21656: LD_EXP 101
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: AND
21670: IFFALSE 22133
21672: GO 21674
21674: DISABLE
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
21679: PPUSH
21680: PPUSH
// begin enable ;
21681: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21682: LD_ADDR_VAR 0 1
21686: PUSH
21687: LD_INT 34
21689: PUSH
21690: LD_EXP 101
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PPUSH
21699: CALL_OW 69
21703: PUSH
21704: FOR_IN
21705: IFFALSE 21777
// begin if not i in minersList then
21707: LD_VAR 0 1
21711: PUSH
21712: LD_EXP 91
21716: IN
21717: NOT
21718: IFFALSE 21775
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21720: LD_ADDR_EXP 91
21724: PUSH
21725: LD_EXP 91
21729: PPUSH
21730: LD_EXP 91
21734: PUSH
21735: LD_INT 1
21737: PLUS
21738: PPUSH
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 1
21748: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21749: LD_ADDR_EXP 92
21753: PUSH
21754: LD_EXP 92
21758: PPUSH
21759: LD_EXP 92
21763: PUSH
21764: LD_INT 1
21766: PLUS
21767: PPUSH
21768: EMPTY
21769: PPUSH
21770: CALL_OW 1
21774: ST_TO_ADDR
// end end ;
21775: GO 21704
21777: POP
21778: POP
// for i := minerMinesList downto 1 do
21779: LD_ADDR_VAR 0 1
21783: PUSH
21784: DOUBLE
21785: LD_EXP 92
21789: INC
21790: ST_TO_ADDR
21791: LD_INT 1
21793: PUSH
21794: FOR_DOWNTO
21795: IFFALSE 22131
// begin if IsLive ( minersList [ i ] ) then
21797: LD_EXP 91
21801: PUSH
21802: LD_VAR 0 1
21806: ARRAY
21807: PPUSH
21808: CALL_OW 300
21812: IFFALSE 21840
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21814: LD_EXP 91
21818: PUSH
21819: LD_VAR 0 1
21823: ARRAY
21824: PPUSH
21825: LD_EXP 92
21829: PUSH
21830: LD_VAR 0 1
21834: ARRAY
21835: PPUSH
21836: CALL_OW 505
// if not minerMinesList [ i ] then
21840: LD_EXP 92
21844: PUSH
21845: LD_VAR 0 1
21849: ARRAY
21850: NOT
21851: IFFALSE 21855
// continue ;
21853: GO 21794
// for j := minerMinesList [ i ] downto 1 do
21855: LD_ADDR_VAR 0 2
21859: PUSH
21860: DOUBLE
21861: LD_EXP 92
21865: PUSH
21866: LD_VAR 0 1
21870: ARRAY
21871: INC
21872: ST_TO_ADDR
21873: LD_INT 1
21875: PUSH
21876: FOR_DOWNTO
21877: IFFALSE 22127
// begin side := GetSide ( minersList [ i ] ) ;
21879: LD_ADDR_VAR 0 3
21883: PUSH
21884: LD_EXP 91
21888: PUSH
21889: LD_VAR 0 1
21893: ARRAY
21894: PPUSH
21895: CALL_OW 255
21899: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21900: LD_ADDR_VAR 0 4
21904: PUSH
21905: LD_EXP 92
21909: PUSH
21910: LD_VAR 0 1
21914: ARRAY
21915: PUSH
21916: LD_VAR 0 2
21920: ARRAY
21921: PUSH
21922: LD_INT 1
21924: ARRAY
21925: PPUSH
21926: LD_EXP 92
21930: PUSH
21931: LD_VAR 0 1
21935: ARRAY
21936: PUSH
21937: LD_VAR 0 2
21941: ARRAY
21942: PUSH
21943: LD_INT 2
21945: ARRAY
21946: PPUSH
21947: CALL_OW 428
21951: ST_TO_ADDR
// if not tmp then
21952: LD_VAR 0 4
21956: NOT
21957: IFFALSE 21961
// continue ;
21959: GO 21876
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21961: LD_VAR 0 4
21965: PUSH
21966: LD_INT 81
21968: PUSH
21969: LD_VAR 0 3
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PPUSH
21978: CALL_OW 69
21982: IN
21983: PUSH
21984: LD_EXP 92
21988: PUSH
21989: LD_VAR 0 1
21993: ARRAY
21994: PUSH
21995: LD_VAR 0 2
21999: ARRAY
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: PPUSH
22005: LD_EXP 92
22009: PUSH
22010: LD_VAR 0 1
22014: ARRAY
22015: PUSH
22016: LD_VAR 0 2
22020: ARRAY
22021: PUSH
22022: LD_INT 2
22024: ARRAY
22025: PPUSH
22026: CALL_OW 458
22030: AND
22031: IFFALSE 22125
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22033: LD_EXP 92
22037: PUSH
22038: LD_VAR 0 1
22042: ARRAY
22043: PUSH
22044: LD_VAR 0 2
22048: ARRAY
22049: PUSH
22050: LD_INT 1
22052: ARRAY
22053: PPUSH
22054: LD_EXP 92
22058: PUSH
22059: LD_VAR 0 1
22063: ARRAY
22064: PUSH
22065: LD_VAR 0 2
22069: ARRAY
22070: PUSH
22071: LD_INT 2
22073: ARRAY
22074: PPUSH
22075: LD_VAR 0 3
22079: PPUSH
22080: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22084: LD_ADDR_EXP 92
22088: PUSH
22089: LD_EXP 92
22093: PPUSH
22094: LD_VAR 0 1
22098: PPUSH
22099: LD_EXP 92
22103: PUSH
22104: LD_VAR 0 1
22108: ARRAY
22109: PPUSH
22110: LD_VAR 0 2
22114: PPUSH
22115: CALL_OW 3
22119: PPUSH
22120: CALL_OW 1
22124: ST_TO_ADDR
// end ; end ;
22125: GO 21876
22127: POP
22128: POP
// end ;
22129: GO 21794
22131: POP
22132: POP
// end ;
22133: PPOPN 4
22135: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22136: LD_INT 0
22138: PPUSH
22139: PPUSH
// result := false ;
22140: LD_ADDR_VAR 0 4
22144: PUSH
22145: LD_INT 0
22147: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL_OW 264
22157: PUSH
22158: LD_EXP 101
22162: EQUAL
22163: NOT
22164: IFFALSE 22168
// exit ;
22166: GO 22408
// index := GetElementIndex ( minersList , unit ) ;
22168: LD_ADDR_VAR 0 5
22172: PUSH
22173: LD_EXP 91
22177: PPUSH
22178: LD_VAR 0 1
22182: PPUSH
22183: CALL 28560 0 2
22187: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22188: LD_EXP 92
22192: PUSH
22193: LD_VAR 0 5
22197: ARRAY
22198: PUSH
22199: LD_EXP 93
22203: GREATEREQUAL
22204: IFFALSE 22208
// exit ;
22206: GO 22408
// ComMoveXY ( unit , x , y ) ;
22208: LD_VAR 0 1
22212: PPUSH
22213: LD_VAR 0 2
22217: PPUSH
22218: LD_VAR 0 3
22222: PPUSH
22223: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22227: LD_INT 35
22229: PPUSH
22230: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22234: LD_VAR 0 1
22238: PPUSH
22239: LD_VAR 0 2
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: CALL 59332 0 3
22253: NOT
22254: PUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 314
22264: AND
22265: IFFALSE 22269
// exit ;
22267: GO 22408
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22269: LD_VAR 0 2
22273: PPUSH
22274: LD_VAR 0 3
22278: PPUSH
22279: CALL_OW 428
22283: PUSH
22284: LD_VAR 0 1
22288: EQUAL
22289: PUSH
22290: LD_VAR 0 1
22294: PPUSH
22295: CALL_OW 314
22299: NOT
22300: AND
22301: IFFALSE 22227
// PlaySoundXY ( x , y , PlantMine ) ;
22303: LD_VAR 0 2
22307: PPUSH
22308: LD_VAR 0 3
22312: PPUSH
22313: LD_STRING PlantMine
22315: PPUSH
22316: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22320: LD_VAR 0 2
22324: PPUSH
22325: LD_VAR 0 3
22329: PPUSH
22330: LD_VAR 0 1
22334: PPUSH
22335: CALL_OW 255
22339: PPUSH
22340: LD_INT 0
22342: PPUSH
22343: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22347: LD_ADDR_EXP 92
22351: PUSH
22352: LD_EXP 92
22356: PPUSH
22357: LD_VAR 0 5
22361: PUSH
22362: LD_EXP 92
22366: PUSH
22367: LD_VAR 0 5
22371: ARRAY
22372: PUSH
22373: LD_INT 1
22375: PLUS
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PPUSH
22381: LD_VAR 0 2
22385: PUSH
22386: LD_VAR 0 3
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PPUSH
22395: CALL 28775 0 3
22399: ST_TO_ADDR
// result := true ;
22400: LD_ADDR_VAR 0 4
22404: PUSH
22405: LD_INT 1
22407: ST_TO_ADDR
// end ;
22408: LD_VAR 0 4
22412: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22413: LD_INT 0
22415: PPUSH
22416: PPUSH
22417: PPUSH
// if not unit in minersList then
22418: LD_VAR 0 1
22422: PUSH
22423: LD_EXP 91
22427: IN
22428: NOT
22429: IFFALSE 22433
// exit ;
22431: GO 22825
// index := GetElementIndex ( minersList , unit ) ;
22433: LD_ADDR_VAR 0 6
22437: PUSH
22438: LD_EXP 91
22442: PPUSH
22443: LD_VAR 0 1
22447: PPUSH
22448: CALL 28560 0 2
22452: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22453: LD_ADDR_VAR 0 5
22457: PUSH
22458: DOUBLE
22459: LD_EXP 92
22463: PUSH
22464: LD_VAR 0 6
22468: ARRAY
22469: INC
22470: ST_TO_ADDR
22471: LD_INT 1
22473: PUSH
22474: FOR_DOWNTO
22475: IFFALSE 22636
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22477: LD_EXP 92
22481: PUSH
22482: LD_VAR 0 6
22486: ARRAY
22487: PUSH
22488: LD_VAR 0 5
22492: ARRAY
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: PUSH
22498: LD_VAR 0 2
22502: EQUAL
22503: PUSH
22504: LD_EXP 92
22508: PUSH
22509: LD_VAR 0 6
22513: ARRAY
22514: PUSH
22515: LD_VAR 0 5
22519: ARRAY
22520: PUSH
22521: LD_INT 2
22523: ARRAY
22524: PUSH
22525: LD_VAR 0 3
22529: EQUAL
22530: AND
22531: IFFALSE 22634
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22533: LD_EXP 92
22537: PUSH
22538: LD_VAR 0 6
22542: ARRAY
22543: PUSH
22544: LD_VAR 0 5
22548: ARRAY
22549: PUSH
22550: LD_INT 1
22552: ARRAY
22553: PPUSH
22554: LD_EXP 92
22558: PUSH
22559: LD_VAR 0 6
22563: ARRAY
22564: PUSH
22565: LD_VAR 0 5
22569: ARRAY
22570: PUSH
22571: LD_INT 2
22573: ARRAY
22574: PPUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL_OW 255
22584: PPUSH
22585: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22589: LD_ADDR_EXP 92
22593: PUSH
22594: LD_EXP 92
22598: PPUSH
22599: LD_VAR 0 6
22603: PPUSH
22604: LD_EXP 92
22608: PUSH
22609: LD_VAR 0 6
22613: ARRAY
22614: PPUSH
22615: LD_VAR 0 5
22619: PPUSH
22620: CALL_OW 3
22624: PPUSH
22625: CALL_OW 1
22629: ST_TO_ADDR
// exit ;
22630: POP
22631: POP
22632: GO 22825
// end ; end ;
22634: GO 22474
22636: POP
22637: POP
// for i := minerMinesList [ index ] downto 1 do
22638: LD_ADDR_VAR 0 5
22642: PUSH
22643: DOUBLE
22644: LD_EXP 92
22648: PUSH
22649: LD_VAR 0 6
22653: ARRAY
22654: INC
22655: ST_TO_ADDR
22656: LD_INT 1
22658: PUSH
22659: FOR_DOWNTO
22660: IFFALSE 22823
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22662: LD_EXP 92
22666: PUSH
22667: LD_VAR 0 6
22671: ARRAY
22672: PUSH
22673: LD_VAR 0 5
22677: ARRAY
22678: PUSH
22679: LD_INT 1
22681: ARRAY
22682: PPUSH
22683: LD_EXP 92
22687: PUSH
22688: LD_VAR 0 6
22692: ARRAY
22693: PUSH
22694: LD_VAR 0 5
22698: ARRAY
22699: PUSH
22700: LD_INT 2
22702: ARRAY
22703: PPUSH
22704: LD_VAR 0 2
22708: PPUSH
22709: LD_VAR 0 3
22713: PPUSH
22714: CALL_OW 298
22718: PUSH
22719: LD_INT 6
22721: LESS
22722: IFFALSE 22821
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22724: LD_EXP 92
22728: PUSH
22729: LD_VAR 0 6
22733: ARRAY
22734: PUSH
22735: LD_VAR 0 5
22739: ARRAY
22740: PUSH
22741: LD_INT 1
22743: ARRAY
22744: PPUSH
22745: LD_EXP 92
22749: PUSH
22750: LD_VAR 0 6
22754: ARRAY
22755: PUSH
22756: LD_VAR 0 5
22760: ARRAY
22761: PUSH
22762: LD_INT 2
22764: ARRAY
22765: PPUSH
22766: LD_VAR 0 1
22770: PPUSH
22771: CALL_OW 255
22775: PPUSH
22776: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22780: LD_ADDR_EXP 92
22784: PUSH
22785: LD_EXP 92
22789: PPUSH
22790: LD_VAR 0 6
22794: PPUSH
22795: LD_EXP 92
22799: PUSH
22800: LD_VAR 0 6
22804: ARRAY
22805: PPUSH
22806: LD_VAR 0 5
22810: PPUSH
22811: CALL_OW 3
22815: PPUSH
22816: CALL_OW 1
22820: ST_TO_ADDR
// end ; end ;
22821: GO 22659
22823: POP
22824: POP
// end ;
22825: LD_VAR 0 4
22829: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22830: LD_INT 0
22832: PPUSH
22833: PPUSH
22834: PPUSH
22835: PPUSH
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
22840: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22841: LD_VAR 0 1
22845: PPUSH
22846: CALL_OW 264
22850: PUSH
22851: LD_EXP 101
22855: EQUAL
22856: NOT
22857: PUSH
22858: LD_VAR 0 1
22862: PUSH
22863: LD_EXP 91
22867: IN
22868: NOT
22869: OR
22870: IFFALSE 22874
// exit ;
22872: GO 23196
// index := GetElementIndex ( minersList , unit ) ;
22874: LD_ADDR_VAR 0 6
22878: PUSH
22879: LD_EXP 91
22883: PPUSH
22884: LD_VAR 0 1
22888: PPUSH
22889: CALL 28560 0 2
22893: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22894: LD_ADDR_VAR 0 8
22898: PUSH
22899: LD_EXP 93
22903: PUSH
22904: LD_EXP 92
22908: PUSH
22909: LD_VAR 0 6
22913: ARRAY
22914: MINUS
22915: ST_TO_ADDR
// if not minesFreeAmount then
22916: LD_VAR 0 8
22920: NOT
22921: IFFALSE 22925
// exit ;
22923: GO 23196
// tmp := [ ] ;
22925: LD_ADDR_VAR 0 7
22929: PUSH
22930: EMPTY
22931: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22932: LD_ADDR_VAR 0 5
22936: PUSH
22937: DOUBLE
22938: LD_INT 1
22940: DEC
22941: ST_TO_ADDR
22942: LD_VAR 0 8
22946: PUSH
22947: FOR_TO
22948: IFFALSE 23143
// begin _d := rand ( 0 , 5 ) ;
22950: LD_ADDR_VAR 0 11
22954: PUSH
22955: LD_INT 0
22957: PPUSH
22958: LD_INT 5
22960: PPUSH
22961: CALL_OW 12
22965: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22966: LD_ADDR_VAR 0 12
22970: PUSH
22971: LD_INT 2
22973: PPUSH
22974: LD_INT 6
22976: PPUSH
22977: CALL_OW 12
22981: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22982: LD_ADDR_VAR 0 9
22986: PUSH
22987: LD_VAR 0 2
22991: PPUSH
22992: LD_VAR 0 11
22996: PPUSH
22997: LD_VAR 0 12
23001: PPUSH
23002: CALL_OW 272
23006: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23007: LD_ADDR_VAR 0 10
23011: PUSH
23012: LD_VAR 0 3
23016: PPUSH
23017: LD_VAR 0 11
23021: PPUSH
23022: LD_VAR 0 12
23026: PPUSH
23027: CALL_OW 273
23031: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23032: LD_VAR 0 9
23036: PPUSH
23037: LD_VAR 0 10
23041: PPUSH
23042: CALL_OW 488
23046: PUSH
23047: LD_VAR 0 9
23051: PUSH
23052: LD_VAR 0 10
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_VAR 0 7
23065: IN
23066: NOT
23067: AND
23068: PUSH
23069: LD_VAR 0 9
23073: PPUSH
23074: LD_VAR 0 10
23078: PPUSH
23079: CALL_OW 458
23083: NOT
23084: AND
23085: IFFALSE 23127
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23087: LD_ADDR_VAR 0 7
23091: PUSH
23092: LD_VAR 0 7
23096: PPUSH
23097: LD_VAR 0 7
23101: PUSH
23102: LD_INT 1
23104: PLUS
23105: PPUSH
23106: LD_VAR 0 9
23110: PUSH
23111: LD_VAR 0 10
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PPUSH
23120: CALL_OW 1
23124: ST_TO_ADDR
23125: GO 23141
// i := i - 1 ;
23127: LD_ADDR_VAR 0 5
23131: PUSH
23132: LD_VAR 0 5
23136: PUSH
23137: LD_INT 1
23139: MINUS
23140: ST_TO_ADDR
// end ;
23141: GO 22947
23143: POP
23144: POP
// for i in tmp do
23145: LD_ADDR_VAR 0 5
23149: PUSH
23150: LD_VAR 0 7
23154: PUSH
23155: FOR_IN
23156: IFFALSE 23194
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23158: LD_VAR 0 1
23162: PPUSH
23163: LD_VAR 0 5
23167: PUSH
23168: LD_INT 1
23170: ARRAY
23171: PPUSH
23172: LD_VAR 0 5
23176: PUSH
23177: LD_INT 2
23179: ARRAY
23180: PPUSH
23181: CALL 22136 0 3
23185: NOT
23186: IFFALSE 23192
// exit ;
23188: POP
23189: POP
23190: GO 23196
23192: GO 23155
23194: POP
23195: POP
// end ;
23196: LD_VAR 0 4
23200: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23201: LD_INT 0
23203: PPUSH
23204: PPUSH
23205: PPUSH
23206: PPUSH
23207: PPUSH
23208: PPUSH
23209: PPUSH
// if not GetClass ( unit ) = class_sniper then
23210: LD_VAR 0 1
23214: PPUSH
23215: CALL_OW 257
23219: PUSH
23220: LD_INT 5
23222: EQUAL
23223: NOT
23224: IFFALSE 23228
// exit ;
23226: GO 23616
// dist := 8 ;
23228: LD_ADDR_VAR 0 5
23232: PUSH
23233: LD_INT 8
23235: ST_TO_ADDR
// viewRange := 12 ;
23236: LD_ADDR_VAR 0 7
23240: PUSH
23241: LD_INT 12
23243: ST_TO_ADDR
// side := GetSide ( unit ) ;
23244: LD_ADDR_VAR 0 6
23248: PUSH
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 255
23258: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23259: LD_INT 61
23261: PPUSH
23262: LD_VAR 0 6
23266: PPUSH
23267: CALL_OW 321
23271: PUSH
23272: LD_INT 2
23274: EQUAL
23275: IFFALSE 23285
// viewRange := 16 ;
23277: LD_ADDR_VAR 0 7
23281: PUSH
23282: LD_INT 16
23284: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23285: LD_VAR 0 1
23289: PPUSH
23290: LD_VAR 0 2
23294: PPUSH
23295: LD_VAR 0 3
23299: PPUSH
23300: CALL_OW 297
23304: PUSH
23305: LD_VAR 0 5
23309: GREATER
23310: IFFALSE 23389
// begin ComMoveXY ( unit , x , y ) ;
23312: LD_VAR 0 1
23316: PPUSH
23317: LD_VAR 0 2
23321: PPUSH
23322: LD_VAR 0 3
23326: PPUSH
23327: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23331: LD_INT 35
23333: PPUSH
23334: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23338: LD_VAR 0 1
23342: PPUSH
23343: LD_VAR 0 2
23347: PPUSH
23348: LD_VAR 0 3
23352: PPUSH
23353: CALL 59332 0 3
23357: NOT
23358: IFFALSE 23362
// exit ;
23360: GO 23616
// until GetDistUnitXY ( unit , x , y ) < dist ;
23362: LD_VAR 0 1
23366: PPUSH
23367: LD_VAR 0 2
23371: PPUSH
23372: LD_VAR 0 3
23376: PPUSH
23377: CALL_OW 297
23381: PUSH
23382: LD_VAR 0 5
23386: LESS
23387: IFFALSE 23331
// end ; ComTurnXY ( unit , x , y ) ;
23389: LD_VAR 0 1
23393: PPUSH
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_VAR 0 3
23403: PPUSH
23404: CALL_OW 118
// wait ( 5 ) ;
23408: LD_INT 5
23410: PPUSH
23411: CALL_OW 67
// _d := GetDir ( unit ) ;
23415: LD_ADDR_VAR 0 10
23419: PUSH
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 254
23429: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23430: LD_ADDR_VAR 0 8
23434: PUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL_OW 250
23444: PPUSH
23445: LD_VAR 0 10
23449: PPUSH
23450: LD_VAR 0 5
23454: PPUSH
23455: CALL_OW 272
23459: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23460: LD_ADDR_VAR 0 9
23464: PUSH
23465: LD_VAR 0 1
23469: PPUSH
23470: CALL_OW 251
23474: PPUSH
23475: LD_VAR 0 10
23479: PPUSH
23480: LD_VAR 0 5
23484: PPUSH
23485: CALL_OW 273
23489: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23490: LD_VAR 0 8
23494: PPUSH
23495: LD_VAR 0 9
23499: PPUSH
23500: CALL_OW 488
23504: NOT
23505: IFFALSE 23509
// exit ;
23507: GO 23616
// ComAnimCustom ( unit , 1 ) ;
23509: LD_VAR 0 1
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23521: LD_VAR 0 8
23525: PPUSH
23526: LD_VAR 0 9
23530: PPUSH
23531: LD_VAR 0 6
23535: PPUSH
23536: LD_VAR 0 7
23540: PPUSH
23541: CALL_OW 330
// repeat wait ( 1 ) ;
23545: LD_INT 1
23547: PPUSH
23548: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23552: LD_VAR 0 1
23556: PPUSH
23557: CALL_OW 316
23561: PUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: CALL_OW 314
23571: OR
23572: PUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 302
23582: NOT
23583: OR
23584: PUSH
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 301
23594: OR
23595: IFFALSE 23545
// RemoveSeeing ( _x , _y , side ) ;
23597: LD_VAR 0 8
23601: PPUSH
23602: LD_VAR 0 9
23606: PPUSH
23607: LD_VAR 0 6
23611: PPUSH
23612: CALL_OW 331
// end ; end_of_file
23616: LD_VAR 0 4
23620: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23621: LD_INT 0
23623: PPUSH
// ar_miner := 81 ;
23624: LD_ADDR_EXP 101
23628: PUSH
23629: LD_INT 81
23631: ST_TO_ADDR
// ar_crane := 88 ;
23632: LD_ADDR_EXP 100
23636: PUSH
23637: LD_INT 88
23639: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23640: LD_ADDR_EXP 95
23644: PUSH
23645: LD_INT 89
23647: ST_TO_ADDR
// us_hack := 99 ;
23648: LD_ADDR_EXP 96
23652: PUSH
23653: LD_INT 99
23655: ST_TO_ADDR
// us_artillery := 97 ;
23656: LD_ADDR_EXP 97
23660: PUSH
23661: LD_INT 97
23663: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23664: LD_ADDR_EXP 98
23668: PUSH
23669: LD_INT 91
23671: ST_TO_ADDR
// ar_mortar := 92 ;
23672: LD_ADDR_EXP 99
23676: PUSH
23677: LD_INT 92
23679: ST_TO_ADDR
// ru_radar := 98 ;
23680: LD_ADDR_EXP 94
23684: PUSH
23685: LD_INT 98
23687: ST_TO_ADDR
// tech_Artillery := 80 ;
23688: LD_ADDR_EXP 102
23692: PUSH
23693: LD_INT 80
23695: ST_TO_ADDR
// tech_RadMat := 81 ;
23696: LD_ADDR_EXP 103
23700: PUSH
23701: LD_INT 81
23703: ST_TO_ADDR
// tech_BasicTools := 82 ;
23704: LD_ADDR_EXP 104
23708: PUSH
23709: LD_INT 82
23711: ST_TO_ADDR
// tech_Cargo := 83 ;
23712: LD_ADDR_EXP 105
23716: PUSH
23717: LD_INT 83
23719: ST_TO_ADDR
// tech_Track := 84 ;
23720: LD_ADDR_EXP 106
23724: PUSH
23725: LD_INT 84
23727: ST_TO_ADDR
// tech_Crane := 85 ;
23728: LD_ADDR_EXP 107
23732: PUSH
23733: LD_INT 85
23735: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23736: LD_ADDR_EXP 108
23740: PUSH
23741: LD_INT 86
23743: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23744: LD_ADDR_EXP 109
23748: PUSH
23749: LD_INT 87
23751: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
23752: LD_ADDR_EXP 110
23756: PUSH
23757: LD_INT 88
23759: ST_TO_ADDR
// class_mastodont := 31 ;
23760: LD_ADDR_EXP 111
23764: PUSH
23765: LD_INT 31
23767: ST_TO_ADDR
// class_horse := 21 ;
23768: LD_ADDR_EXP 112
23772: PUSH
23773: LD_INT 21
23775: ST_TO_ADDR
// end ;
23776: LD_VAR 0 1
23780: RET
// every 1 do
23781: GO 23783
23783: DISABLE
// InitGlobalVariables ; end_of_file
23784: CALL 23621 0 0
23788: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23789: LD_INT 0
23791: PPUSH
23792: PPUSH
// if exist_mode then
23793: LD_VAR 0 2
23797: IFFALSE 23822
// unit := CreateCharacter ( prefix & ident ) else
23799: LD_ADDR_VAR 0 5
23803: PUSH
23804: LD_VAR 0 3
23808: PUSH
23809: LD_VAR 0 1
23813: STR
23814: PPUSH
23815: CALL_OW 34
23819: ST_TO_ADDR
23820: GO 23837
// unit := NewCharacter ( ident ) ;
23822: LD_ADDR_VAR 0 5
23826: PUSH
23827: LD_VAR 0 1
23831: PPUSH
23832: CALL_OW 25
23836: ST_TO_ADDR
// result := unit ;
23837: LD_ADDR_VAR 0 4
23841: PUSH
23842: LD_VAR 0 5
23846: ST_TO_ADDR
// end ;
23847: LD_VAR 0 4
23851: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23852: LD_INT 0
23854: PPUSH
23855: PPUSH
// if not side or not nation then
23856: LD_VAR 0 1
23860: NOT
23861: PUSH
23862: LD_VAR 0 2
23866: NOT
23867: OR
23868: IFFALSE 23872
// exit ;
23870: GO 24640
// case nation of nation_american :
23872: LD_VAR 0 2
23876: PUSH
23877: LD_INT 1
23879: DOUBLE
23880: EQUAL
23881: IFTRUE 23885
23883: GO 24099
23885: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23886: LD_ADDR_VAR 0 4
23890: PUSH
23891: LD_INT 35
23893: PUSH
23894: LD_INT 45
23896: PUSH
23897: LD_INT 46
23899: PUSH
23900: LD_INT 47
23902: PUSH
23903: LD_INT 82
23905: PUSH
23906: LD_INT 83
23908: PUSH
23909: LD_INT 84
23911: PUSH
23912: LD_INT 85
23914: PUSH
23915: LD_INT 86
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: LD_INT 2
23923: PUSH
23924: LD_INT 6
23926: PUSH
23927: LD_INT 15
23929: PUSH
23930: LD_INT 16
23932: PUSH
23933: LD_INT 7
23935: PUSH
23936: LD_INT 12
23938: PUSH
23939: LD_INT 13
23941: PUSH
23942: LD_INT 10
23944: PUSH
23945: LD_INT 14
23947: PUSH
23948: LD_INT 20
23950: PUSH
23951: LD_INT 21
23953: PUSH
23954: LD_INT 22
23956: PUSH
23957: LD_INT 25
23959: PUSH
23960: LD_INT 32
23962: PUSH
23963: LD_INT 27
23965: PUSH
23966: LD_INT 36
23968: PUSH
23969: LD_INT 69
23971: PUSH
23972: LD_INT 39
23974: PUSH
23975: LD_INT 34
23977: PUSH
23978: LD_INT 40
23980: PUSH
23981: LD_INT 48
23983: PUSH
23984: LD_INT 49
23986: PUSH
23987: LD_INT 50
23989: PUSH
23990: LD_INT 51
23992: PUSH
23993: LD_INT 52
23995: PUSH
23996: LD_INT 53
23998: PUSH
23999: LD_INT 54
24001: PUSH
24002: LD_INT 55
24004: PUSH
24005: LD_INT 56
24007: PUSH
24008: LD_INT 57
24010: PUSH
24011: LD_INT 58
24013: PUSH
24014: LD_INT 59
24016: PUSH
24017: LD_INT 60
24019: PUSH
24020: LD_INT 61
24022: PUSH
24023: LD_INT 62
24025: PUSH
24026: LD_INT 80
24028: PUSH
24029: LD_INT 82
24031: PUSH
24032: LD_INT 83
24034: PUSH
24035: LD_INT 84
24037: PUSH
24038: LD_INT 85
24040: PUSH
24041: LD_INT 86
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: ST_TO_ADDR
24097: GO 24564
24099: LD_INT 2
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24333
24107: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24108: LD_ADDR_VAR 0 4
24112: PUSH
24113: LD_INT 35
24115: PUSH
24116: LD_INT 45
24118: PUSH
24119: LD_INT 46
24121: PUSH
24122: LD_INT 47
24124: PUSH
24125: LD_INT 82
24127: PUSH
24128: LD_INT 83
24130: PUSH
24131: LD_INT 84
24133: PUSH
24134: LD_INT 85
24136: PUSH
24137: LD_INT 87
24139: PUSH
24140: LD_INT 70
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 11
24148: PUSH
24149: LD_INT 3
24151: PUSH
24152: LD_INT 4
24154: PUSH
24155: LD_INT 5
24157: PUSH
24158: LD_INT 6
24160: PUSH
24161: LD_INT 15
24163: PUSH
24164: LD_INT 18
24166: PUSH
24167: LD_INT 7
24169: PUSH
24170: LD_INT 17
24172: PUSH
24173: LD_INT 8
24175: PUSH
24176: LD_INT 20
24178: PUSH
24179: LD_INT 21
24181: PUSH
24182: LD_INT 22
24184: PUSH
24185: LD_INT 72
24187: PUSH
24188: LD_INT 26
24190: PUSH
24191: LD_INT 69
24193: PUSH
24194: LD_INT 39
24196: PUSH
24197: LD_INT 40
24199: PUSH
24200: LD_INT 41
24202: PUSH
24203: LD_INT 42
24205: PUSH
24206: LD_INT 43
24208: PUSH
24209: LD_INT 48
24211: PUSH
24212: LD_INT 49
24214: PUSH
24215: LD_INT 50
24217: PUSH
24218: LD_INT 51
24220: PUSH
24221: LD_INT 52
24223: PUSH
24224: LD_INT 53
24226: PUSH
24227: LD_INT 54
24229: PUSH
24230: LD_INT 55
24232: PUSH
24233: LD_INT 56
24235: PUSH
24236: LD_INT 60
24238: PUSH
24239: LD_INT 61
24241: PUSH
24242: LD_INT 62
24244: PUSH
24245: LD_INT 66
24247: PUSH
24248: LD_INT 67
24250: PUSH
24251: LD_INT 68
24253: PUSH
24254: LD_INT 81
24256: PUSH
24257: LD_INT 82
24259: PUSH
24260: LD_INT 83
24262: PUSH
24263: LD_INT 84
24265: PUSH
24266: LD_INT 85
24268: PUSH
24269: LD_INT 87
24271: PUSH
24272: LD_INT 88
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: ST_TO_ADDR
24331: GO 24564
24333: LD_INT 3
24335: DOUBLE
24336: EQUAL
24337: IFTRUE 24341
24339: GO 24563
24341: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24342: LD_ADDR_VAR 0 4
24346: PUSH
24347: LD_INT 46
24349: PUSH
24350: LD_INT 47
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: LD_INT 82
24361: PUSH
24362: LD_INT 83
24364: PUSH
24365: LD_INT 84
24367: PUSH
24368: LD_INT 85
24370: PUSH
24371: LD_INT 86
24373: PUSH
24374: LD_INT 11
24376: PUSH
24377: LD_INT 9
24379: PUSH
24380: LD_INT 20
24382: PUSH
24383: LD_INT 19
24385: PUSH
24386: LD_INT 21
24388: PUSH
24389: LD_INT 24
24391: PUSH
24392: LD_INT 22
24394: PUSH
24395: LD_INT 25
24397: PUSH
24398: LD_INT 28
24400: PUSH
24401: LD_INT 29
24403: PUSH
24404: LD_INT 30
24406: PUSH
24407: LD_INT 31
24409: PUSH
24410: LD_INT 37
24412: PUSH
24413: LD_INT 38
24415: PUSH
24416: LD_INT 32
24418: PUSH
24419: LD_INT 27
24421: PUSH
24422: LD_INT 33
24424: PUSH
24425: LD_INT 69
24427: PUSH
24428: LD_INT 39
24430: PUSH
24431: LD_INT 34
24433: PUSH
24434: LD_INT 40
24436: PUSH
24437: LD_INT 71
24439: PUSH
24440: LD_INT 23
24442: PUSH
24443: LD_INT 44
24445: PUSH
24446: LD_INT 48
24448: PUSH
24449: LD_INT 49
24451: PUSH
24452: LD_INT 50
24454: PUSH
24455: LD_INT 51
24457: PUSH
24458: LD_INT 52
24460: PUSH
24461: LD_INT 53
24463: PUSH
24464: LD_INT 54
24466: PUSH
24467: LD_INT 55
24469: PUSH
24470: LD_INT 56
24472: PUSH
24473: LD_INT 57
24475: PUSH
24476: LD_INT 58
24478: PUSH
24479: LD_INT 59
24481: PUSH
24482: LD_INT 63
24484: PUSH
24485: LD_INT 64
24487: PUSH
24488: LD_INT 65
24490: PUSH
24491: LD_INT 82
24493: PUSH
24494: LD_INT 83
24496: PUSH
24497: LD_INT 84
24499: PUSH
24500: LD_INT 85
24502: PUSH
24503: LD_INT 86
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: ST_TO_ADDR
24561: GO 24564
24563: POP
// if state > - 1 and state < 3 then
24564: LD_VAR 0 3
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: GREATER
24573: PUSH
24574: LD_VAR 0 3
24578: PUSH
24579: LD_INT 3
24581: LESS
24582: AND
24583: IFFALSE 24640
// for i in result do
24585: LD_ADDR_VAR 0 5
24589: PUSH
24590: LD_VAR 0 4
24594: PUSH
24595: FOR_IN
24596: IFFALSE 24638
// if GetTech ( i , side ) <> state then
24598: LD_VAR 0 5
24602: PPUSH
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL_OW 321
24612: PUSH
24613: LD_VAR 0 3
24617: NONEQUAL
24618: IFFALSE 24636
// result := result diff i ;
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_VAR 0 4
24629: PUSH
24630: LD_VAR 0 5
24634: DIFF
24635: ST_TO_ADDR
24636: GO 24595
24638: POP
24639: POP
// end ;
24640: LD_VAR 0 4
24644: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24645: LD_INT 0
24647: PPUSH
24648: PPUSH
24649: PPUSH
// result := true ;
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: LD_INT 1
24657: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24658: LD_ADDR_VAR 0 5
24662: PUSH
24663: LD_VAR 0 2
24667: PPUSH
24668: CALL_OW 480
24672: ST_TO_ADDR
// if not tmp then
24673: LD_VAR 0 5
24677: NOT
24678: IFFALSE 24682
// exit ;
24680: GO 24731
// for i in tmp do
24682: LD_ADDR_VAR 0 4
24686: PUSH
24687: LD_VAR 0 5
24691: PUSH
24692: FOR_IN
24693: IFFALSE 24729
// if GetTech ( i , side ) <> state_researched then
24695: LD_VAR 0 4
24699: PPUSH
24700: LD_VAR 0 1
24704: PPUSH
24705: CALL_OW 321
24709: PUSH
24710: LD_INT 2
24712: NONEQUAL
24713: IFFALSE 24727
// begin result := false ;
24715: LD_ADDR_VAR 0 3
24719: PUSH
24720: LD_INT 0
24722: ST_TO_ADDR
// exit ;
24723: POP
24724: POP
24725: GO 24731
// end ;
24727: GO 24692
24729: POP
24730: POP
// end ;
24731: LD_VAR 0 3
24735: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24736: LD_INT 0
24738: PPUSH
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
24750: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24751: LD_VAR 0 1
24755: NOT
24756: PUSH
24757: LD_VAR 0 1
24761: PPUSH
24762: CALL_OW 257
24766: PUSH
24767: LD_INT 9
24769: NONEQUAL
24770: OR
24771: IFFALSE 24775
// exit ;
24773: GO 25348
// side := GetSide ( unit ) ;
24775: LD_ADDR_VAR 0 9
24779: PUSH
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 255
24789: ST_TO_ADDR
// tech_space := tech_spacanom ;
24790: LD_ADDR_VAR 0 12
24794: PUSH
24795: LD_INT 29
24797: ST_TO_ADDR
// tech_time := tech_taurad ;
24798: LD_ADDR_VAR 0 13
24802: PUSH
24803: LD_INT 28
24805: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24806: LD_ADDR_VAR 0 11
24810: PUSH
24811: LD_VAR 0 1
24815: PPUSH
24816: CALL_OW 310
24820: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24821: LD_VAR 0 11
24825: PPUSH
24826: CALL_OW 247
24830: PUSH
24831: LD_INT 2
24833: EQUAL
24834: IFFALSE 24838
// exit ;
24836: GO 25348
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24838: LD_ADDR_VAR 0 8
24842: PUSH
24843: LD_INT 81
24845: PUSH
24846: LD_VAR 0 9
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 3
24857: PUSH
24858: LD_INT 21
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PPUSH
24876: CALL_OW 69
24880: ST_TO_ADDR
// if not tmp then
24881: LD_VAR 0 8
24885: NOT
24886: IFFALSE 24890
// exit ;
24888: GO 25348
// if in_unit then
24890: LD_VAR 0 11
24894: IFFALSE 24918
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24896: LD_ADDR_VAR 0 10
24900: PUSH
24901: LD_VAR 0 8
24905: PPUSH
24906: LD_VAR 0 11
24910: PPUSH
24911: CALL_OW 74
24915: ST_TO_ADDR
24916: GO 24938
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24918: LD_ADDR_VAR 0 10
24922: PUSH
24923: LD_VAR 0 8
24927: PPUSH
24928: LD_VAR 0 1
24932: PPUSH
24933: CALL_OW 74
24937: ST_TO_ADDR
// if not enemy then
24938: LD_VAR 0 10
24942: NOT
24943: IFFALSE 24947
// exit ;
24945: GO 25348
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24947: LD_VAR 0 11
24951: PUSH
24952: LD_VAR 0 11
24956: PPUSH
24957: LD_VAR 0 10
24961: PPUSH
24962: CALL_OW 296
24966: PUSH
24967: LD_INT 13
24969: GREATER
24970: AND
24971: PUSH
24972: LD_VAR 0 1
24976: PPUSH
24977: LD_VAR 0 10
24981: PPUSH
24982: CALL_OW 296
24986: PUSH
24987: LD_INT 12
24989: GREATER
24990: OR
24991: IFFALSE 24995
// exit ;
24993: GO 25348
// missile := [ 1 ] ;
24995: LD_ADDR_VAR 0 14
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25006: LD_VAR 0 9
25010: PPUSH
25011: LD_VAR 0 12
25015: PPUSH
25016: CALL_OW 325
25020: IFFALSE 25049
// missile := Insert ( missile , missile + 1 , 2 ) ;
25022: LD_ADDR_VAR 0 14
25026: PUSH
25027: LD_VAR 0 14
25031: PPUSH
25032: LD_VAR 0 14
25036: PUSH
25037: LD_INT 1
25039: PLUS
25040: PPUSH
25041: LD_INT 2
25043: PPUSH
25044: CALL_OW 2
25048: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25049: LD_VAR 0 9
25053: PPUSH
25054: LD_VAR 0 13
25058: PPUSH
25059: CALL_OW 325
25063: PUSH
25064: LD_VAR 0 10
25068: PPUSH
25069: CALL_OW 255
25073: PPUSH
25074: LD_VAR 0 13
25078: PPUSH
25079: CALL_OW 325
25083: NOT
25084: AND
25085: IFFALSE 25114
// missile := Insert ( missile , missile + 1 , 3 ) ;
25087: LD_ADDR_VAR 0 14
25091: PUSH
25092: LD_VAR 0 14
25096: PPUSH
25097: LD_VAR 0 14
25101: PUSH
25102: LD_INT 1
25104: PLUS
25105: PPUSH
25106: LD_INT 3
25108: PPUSH
25109: CALL_OW 2
25113: ST_TO_ADDR
// if missile < 2 then
25114: LD_VAR 0 14
25118: PUSH
25119: LD_INT 2
25121: LESS
25122: IFFALSE 25126
// exit ;
25124: GO 25348
// x := GetX ( enemy ) ;
25126: LD_ADDR_VAR 0 4
25130: PUSH
25131: LD_VAR 0 10
25135: PPUSH
25136: CALL_OW 250
25140: ST_TO_ADDR
// y := GetY ( enemy ) ;
25141: LD_ADDR_VAR 0 5
25145: PUSH
25146: LD_VAR 0 10
25150: PPUSH
25151: CALL_OW 251
25155: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25156: LD_ADDR_VAR 0 6
25160: PUSH
25161: LD_VAR 0 4
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PPUSH
25170: LD_INT 1
25172: PPUSH
25173: CALL_OW 12
25177: PLUS
25178: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25179: LD_ADDR_VAR 0 7
25183: PUSH
25184: LD_VAR 0 5
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PPUSH
25193: LD_INT 1
25195: PPUSH
25196: CALL_OW 12
25200: PLUS
25201: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25202: LD_VAR 0 6
25206: PPUSH
25207: LD_VAR 0 7
25211: PPUSH
25212: CALL_OW 488
25216: NOT
25217: IFFALSE 25239
// begin _x := x ;
25219: LD_ADDR_VAR 0 6
25223: PUSH
25224: LD_VAR 0 4
25228: ST_TO_ADDR
// _y := y ;
25229: LD_ADDR_VAR 0 7
25233: PUSH
25234: LD_VAR 0 5
25238: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25239: LD_ADDR_VAR 0 3
25243: PUSH
25244: LD_INT 1
25246: PPUSH
25247: LD_VAR 0 14
25251: PPUSH
25252: CALL_OW 12
25256: ST_TO_ADDR
// case i of 1 :
25257: LD_VAR 0 3
25261: PUSH
25262: LD_INT 1
25264: DOUBLE
25265: EQUAL
25266: IFTRUE 25270
25268: GO 25287
25270: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25271: LD_VAR 0 1
25275: PPUSH
25276: LD_VAR 0 10
25280: PPUSH
25281: CALL_OW 115
25285: GO 25348
25287: LD_INT 2
25289: DOUBLE
25290: EQUAL
25291: IFTRUE 25295
25293: GO 25317
25295: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25296: LD_VAR 0 1
25300: PPUSH
25301: LD_VAR 0 6
25305: PPUSH
25306: LD_VAR 0 7
25310: PPUSH
25311: CALL_OW 153
25315: GO 25348
25317: LD_INT 3
25319: DOUBLE
25320: EQUAL
25321: IFTRUE 25325
25323: GO 25347
25325: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25326: LD_VAR 0 1
25330: PPUSH
25331: LD_VAR 0 6
25335: PPUSH
25336: LD_VAR 0 7
25340: PPUSH
25341: CALL_OW 154
25345: GO 25348
25347: POP
// end ;
25348: LD_VAR 0 2
25352: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25353: LD_INT 0
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
// if not unit or not building then
25361: LD_VAR 0 1
25365: NOT
25366: PUSH
25367: LD_VAR 0 2
25371: NOT
25372: OR
25373: IFFALSE 25377
// exit ;
25375: GO 25535
// x := GetX ( building ) ;
25377: LD_ADDR_VAR 0 5
25381: PUSH
25382: LD_VAR 0 2
25386: PPUSH
25387: CALL_OW 250
25391: ST_TO_ADDR
// y := GetY ( building ) ;
25392: LD_ADDR_VAR 0 6
25396: PUSH
25397: LD_VAR 0 2
25401: PPUSH
25402: CALL_OW 251
25406: ST_TO_ADDR
// for i = 0 to 5 do
25407: LD_ADDR_VAR 0 4
25411: PUSH
25412: DOUBLE
25413: LD_INT 0
25415: DEC
25416: ST_TO_ADDR
25417: LD_INT 5
25419: PUSH
25420: FOR_TO
25421: IFFALSE 25533
// begin _x := ShiftX ( x , i , 3 ) ;
25423: LD_ADDR_VAR 0 7
25427: PUSH
25428: LD_VAR 0 5
25432: PPUSH
25433: LD_VAR 0 4
25437: PPUSH
25438: LD_INT 3
25440: PPUSH
25441: CALL_OW 272
25445: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25446: LD_ADDR_VAR 0 8
25450: PUSH
25451: LD_VAR 0 6
25455: PPUSH
25456: LD_VAR 0 4
25460: PPUSH
25461: LD_INT 3
25463: PPUSH
25464: CALL_OW 273
25468: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25469: LD_VAR 0 7
25473: PPUSH
25474: LD_VAR 0 8
25478: PPUSH
25479: CALL_OW 488
25483: NOT
25484: IFFALSE 25488
// continue ;
25486: GO 25420
// if HexInfo ( _x , _y ) = 0 then
25488: LD_VAR 0 7
25492: PPUSH
25493: LD_VAR 0 8
25497: PPUSH
25498: CALL_OW 428
25502: PUSH
25503: LD_INT 0
25505: EQUAL
25506: IFFALSE 25531
// begin ComMoveXY ( unit , _x , _y ) ;
25508: LD_VAR 0 1
25512: PPUSH
25513: LD_VAR 0 7
25517: PPUSH
25518: LD_VAR 0 8
25522: PPUSH
25523: CALL_OW 111
// exit ;
25527: POP
25528: POP
25529: GO 25535
// end ; end ;
25531: GO 25420
25533: POP
25534: POP
// end ;
25535: LD_VAR 0 3
25539: RET
// export function ScanBase ( side , base_area ) ; begin
25540: LD_INT 0
25542: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_VAR 0 2
25552: PPUSH
25553: LD_INT 81
25555: PUSH
25556: LD_VAR 0 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PPUSH
25565: CALL_OW 70
25569: ST_TO_ADDR
// end ;
25570: LD_VAR 0 3
25574: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25575: LD_INT 0
25577: PPUSH
25578: PPUSH
25579: PPUSH
25580: PPUSH
// result := false ;
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: LD_INT 0
25588: ST_TO_ADDR
// side := GetSide ( unit ) ;
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_VAR 0 1
25598: PPUSH
25599: CALL_OW 255
25603: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25604: LD_ADDR_VAR 0 4
25608: PUSH
25609: LD_VAR 0 1
25613: PPUSH
25614: CALL_OW 248
25618: ST_TO_ADDR
// case nat of 1 :
25619: LD_VAR 0 4
25623: PUSH
25624: LD_INT 1
25626: DOUBLE
25627: EQUAL
25628: IFTRUE 25632
25630: GO 25643
25632: POP
// tech := tech_lassight ; 2 :
25633: LD_ADDR_VAR 0 5
25637: PUSH
25638: LD_INT 12
25640: ST_TO_ADDR
25641: GO 25682
25643: LD_INT 2
25645: DOUBLE
25646: EQUAL
25647: IFTRUE 25651
25649: GO 25662
25651: POP
// tech := tech_mortar ; 3 :
25652: LD_ADDR_VAR 0 5
25656: PUSH
25657: LD_INT 41
25659: ST_TO_ADDR
25660: GO 25682
25662: LD_INT 3
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25670
25668: GO 25681
25670: POP
// tech := tech_bazooka ; end ;
25671: LD_ADDR_VAR 0 5
25675: PUSH
25676: LD_INT 44
25678: ST_TO_ADDR
25679: GO 25682
25681: POP
// if Researched ( side , tech ) then
25682: LD_VAR 0 3
25686: PPUSH
25687: LD_VAR 0 5
25691: PPUSH
25692: CALL_OW 325
25696: IFFALSE 25723
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25698: LD_ADDR_VAR 0 2
25702: PUSH
25703: LD_INT 5
25705: PUSH
25706: LD_INT 8
25708: PUSH
25709: LD_INT 9
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: PUSH
25717: LD_VAR 0 4
25721: ARRAY
25722: ST_TO_ADDR
// end ;
25723: LD_VAR 0 2
25727: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25728: LD_INT 0
25730: PPUSH
25731: PPUSH
25732: PPUSH
// if not mines then
25733: LD_VAR 0 2
25737: NOT
25738: IFFALSE 25742
// exit ;
25740: GO 25886
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25742: LD_ADDR_VAR 0 5
25746: PUSH
25747: LD_INT 81
25749: PUSH
25750: LD_VAR 0 1
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: LD_INT 21
25764: PUSH
25765: LD_INT 3
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PPUSH
25780: CALL_OW 69
25784: ST_TO_ADDR
// for i in mines do
25785: LD_ADDR_VAR 0 4
25789: PUSH
25790: LD_VAR 0 2
25794: PUSH
25795: FOR_IN
25796: IFFALSE 25884
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25798: LD_VAR 0 4
25802: PUSH
25803: LD_INT 1
25805: ARRAY
25806: PPUSH
25807: LD_VAR 0 4
25811: PUSH
25812: LD_INT 2
25814: ARRAY
25815: PPUSH
25816: CALL_OW 458
25820: NOT
25821: IFFALSE 25825
// continue ;
25823: GO 25795
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25825: LD_VAR 0 4
25829: PUSH
25830: LD_INT 1
25832: ARRAY
25833: PPUSH
25834: LD_VAR 0 4
25838: PUSH
25839: LD_INT 2
25841: ARRAY
25842: PPUSH
25843: CALL_OW 428
25847: PUSH
25848: LD_VAR 0 5
25852: IN
25853: IFFALSE 25882
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25855: LD_VAR 0 4
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PPUSH
25864: LD_VAR 0 4
25868: PUSH
25869: LD_INT 2
25871: ARRAY
25872: PPUSH
25873: LD_VAR 0 1
25877: PPUSH
25878: CALL_OW 456
// end ;
25882: GO 25795
25884: POP
25885: POP
// end ;
25886: LD_VAR 0 3
25890: RET
// export function Count ( array ) ; var i ; begin
25891: LD_INT 0
25893: PPUSH
25894: PPUSH
// result := 0 ;
25895: LD_ADDR_VAR 0 2
25899: PUSH
25900: LD_INT 0
25902: ST_TO_ADDR
// for i in array do
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_VAR 0 1
25912: PUSH
25913: FOR_IN
25914: IFFALSE 25938
// if i then
25916: LD_VAR 0 3
25920: IFFALSE 25936
// result := result + 1 ;
25922: LD_ADDR_VAR 0 2
25926: PUSH
25927: LD_VAR 0 2
25931: PUSH
25932: LD_INT 1
25934: PLUS
25935: ST_TO_ADDR
25936: GO 25913
25938: POP
25939: POP
// end ;
25940: LD_VAR 0 2
25944: RET
// export function IsEmpty ( building ) ; begin
25945: LD_INT 0
25947: PPUSH
// if not building then
25948: LD_VAR 0 1
25952: NOT
25953: IFFALSE 25957
// exit ;
25955: GO 26000
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25957: LD_ADDR_VAR 0 2
25961: PUSH
25962: LD_VAR 0 1
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 255
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 58
25986: PUSH
25987: EMPTY
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PPUSH
25994: CALL_OW 69
25998: IN
25999: ST_TO_ADDR
// end ;
26000: LD_VAR 0 2
26004: RET
// export function IsNotFull ( building ) ; begin
26005: LD_INT 0
26007: PPUSH
// if not building then
26008: LD_VAR 0 1
26012: NOT
26013: IFFALSE 26017
// exit ;
26015: GO 26036
// result := UnitsInside ( building ) < 6 ;
26017: LD_ADDR_VAR 0 2
26021: PUSH
26022: LD_VAR 0 1
26026: PPUSH
26027: CALL_OW 313
26031: PUSH
26032: LD_INT 6
26034: LESS
26035: ST_TO_ADDR
// end ;
26036: LD_VAR 0 2
26040: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26041: LD_INT 0
26043: PPUSH
26044: PPUSH
26045: PPUSH
26046: PPUSH
// tmp := [ ] ;
26047: LD_ADDR_VAR 0 3
26051: PUSH
26052: EMPTY
26053: ST_TO_ADDR
// list := [ ] ;
26054: LD_ADDR_VAR 0 5
26058: PUSH
26059: EMPTY
26060: ST_TO_ADDR
// for i = 16 to 25 do
26061: LD_ADDR_VAR 0 4
26065: PUSH
26066: DOUBLE
26067: LD_INT 16
26069: DEC
26070: ST_TO_ADDR
26071: LD_INT 25
26073: PUSH
26074: FOR_TO
26075: IFFALSE 26148
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26077: LD_ADDR_VAR 0 3
26081: PUSH
26082: LD_VAR 0 3
26086: PUSH
26087: LD_INT 22
26089: PUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 255
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 91
26106: PUSH
26107: LD_VAR 0 1
26111: PUSH
26112: LD_INT 6
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 30
26122: PUSH
26123: LD_VAR 0 4
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: PPUSH
26140: CALL_OW 69
26144: ADD
26145: ST_TO_ADDR
26146: GO 26074
26148: POP
26149: POP
// for i = 1 to tmp do
26150: LD_ADDR_VAR 0 4
26154: PUSH
26155: DOUBLE
26156: LD_INT 1
26158: DEC
26159: ST_TO_ADDR
26160: LD_VAR 0 3
26164: PUSH
26165: FOR_TO
26166: IFFALSE 26254
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26168: LD_ADDR_VAR 0 5
26172: PUSH
26173: LD_VAR 0 5
26177: PUSH
26178: LD_VAR 0 3
26182: PUSH
26183: LD_VAR 0 4
26187: ARRAY
26188: PPUSH
26189: CALL_OW 266
26193: PUSH
26194: LD_VAR 0 3
26198: PUSH
26199: LD_VAR 0 4
26203: ARRAY
26204: PPUSH
26205: CALL_OW 250
26209: PUSH
26210: LD_VAR 0 3
26214: PUSH
26215: LD_VAR 0 4
26219: ARRAY
26220: PPUSH
26221: CALL_OW 251
26225: PUSH
26226: LD_VAR 0 3
26230: PUSH
26231: LD_VAR 0 4
26235: ARRAY
26236: PPUSH
26237: CALL_OW 254
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: PUSH
26248: EMPTY
26249: LIST
26250: ADD
26251: ST_TO_ADDR
26252: GO 26165
26254: POP
26255: POP
// result := list ;
26256: LD_ADDR_VAR 0 2
26260: PUSH
26261: LD_VAR 0 5
26265: ST_TO_ADDR
// end ;
26266: LD_VAR 0 2
26270: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26271: LD_INT 0
26273: PPUSH
26274: PPUSH
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
26279: PPUSH
// if not factory then
26280: LD_VAR 0 1
26284: NOT
26285: IFFALSE 26289
// exit ;
26287: GO 26882
// if control = control_apeman then
26289: LD_VAR 0 4
26293: PUSH
26294: LD_INT 5
26296: EQUAL
26297: IFFALSE 26406
// begin tmp := UnitsInside ( factory ) ;
26299: LD_ADDR_VAR 0 8
26303: PUSH
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL_OW 313
26313: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26314: LD_VAR 0 8
26318: PPUSH
26319: LD_INT 25
26321: PUSH
26322: LD_INT 12
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PPUSH
26329: CALL_OW 72
26333: NOT
26334: IFFALSE 26344
// control := control_manual ;
26336: LD_ADDR_VAR 0 4
26340: PUSH
26341: LD_INT 1
26343: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26344: LD_ADDR_VAR 0 8
26348: PUSH
26349: LD_VAR 0 1
26353: PPUSH
26354: CALL 26041 0 1
26358: ST_TO_ADDR
// if tmp then
26359: LD_VAR 0 8
26363: IFFALSE 26406
// begin for i in tmp do
26365: LD_ADDR_VAR 0 7
26369: PUSH
26370: LD_VAR 0 8
26374: PUSH
26375: FOR_IN
26376: IFFALSE 26404
// if i [ 1 ] = b_ext_radio then
26378: LD_VAR 0 7
26382: PUSH
26383: LD_INT 1
26385: ARRAY
26386: PUSH
26387: LD_INT 22
26389: EQUAL
26390: IFFALSE 26402
// begin control := control_remote ;
26392: LD_ADDR_VAR 0 4
26396: PUSH
26397: LD_INT 2
26399: ST_TO_ADDR
// break ;
26400: GO 26404
// end ;
26402: GO 26375
26404: POP
26405: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26406: LD_VAR 0 1
26410: PPUSH
26411: LD_VAR 0 2
26415: PPUSH
26416: LD_VAR 0 3
26420: PPUSH
26421: LD_VAR 0 4
26425: PPUSH
26426: LD_VAR 0 5
26430: PPUSH
26431: CALL_OW 448
26435: IFFALSE 26470
// begin result := [ chassis , engine , control , weapon ] ;
26437: LD_ADDR_VAR 0 6
26441: PUSH
26442: LD_VAR 0 2
26446: PUSH
26447: LD_VAR 0 3
26451: PUSH
26452: LD_VAR 0 4
26456: PUSH
26457: LD_VAR 0 5
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: ST_TO_ADDR
// exit ;
26468: GO 26882
// end ; _chassis := AvailableChassisList ( factory ) ;
26470: LD_ADDR_VAR 0 9
26474: PUSH
26475: LD_VAR 0 1
26479: PPUSH
26480: CALL_OW 475
26484: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26485: LD_ADDR_VAR 0 11
26489: PUSH
26490: LD_VAR 0 1
26494: PPUSH
26495: CALL_OW 476
26499: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26500: LD_ADDR_VAR 0 12
26504: PUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 477
26514: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26515: LD_ADDR_VAR 0 10
26519: PUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 478
26529: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26530: LD_VAR 0 9
26534: NOT
26535: PUSH
26536: LD_VAR 0 11
26540: NOT
26541: OR
26542: PUSH
26543: LD_VAR 0 12
26547: NOT
26548: OR
26549: PUSH
26550: LD_VAR 0 10
26554: NOT
26555: OR
26556: IFFALSE 26591
// begin result := [ chassis , engine , control , weapon ] ;
26558: LD_ADDR_VAR 0 6
26562: PUSH
26563: LD_VAR 0 2
26567: PUSH
26568: LD_VAR 0 3
26572: PUSH
26573: LD_VAR 0 4
26577: PUSH
26578: LD_VAR 0 5
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: ST_TO_ADDR
// exit ;
26589: GO 26882
// end ; if not chassis in _chassis then
26591: LD_VAR 0 2
26595: PUSH
26596: LD_VAR 0 9
26600: IN
26601: NOT
26602: IFFALSE 26628
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26604: LD_ADDR_VAR 0 2
26608: PUSH
26609: LD_VAR 0 9
26613: PUSH
26614: LD_INT 1
26616: PPUSH
26617: LD_VAR 0 9
26621: PPUSH
26622: CALL_OW 12
26626: ARRAY
26627: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26628: LD_VAR 0 2
26632: PPUSH
26633: LD_VAR 0 3
26637: PPUSH
26638: CALL 26887 0 2
26642: NOT
26643: IFFALSE 26702
// repeat engine := _engine [ 1 ] ;
26645: LD_ADDR_VAR 0 3
26649: PUSH
26650: LD_VAR 0 11
26654: PUSH
26655: LD_INT 1
26657: ARRAY
26658: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26659: LD_ADDR_VAR 0 11
26663: PUSH
26664: LD_VAR 0 11
26668: PPUSH
26669: LD_INT 1
26671: PPUSH
26672: CALL_OW 3
26676: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26677: LD_VAR 0 2
26681: PPUSH
26682: LD_VAR 0 3
26686: PPUSH
26687: CALL 26887 0 2
26691: PUSH
26692: LD_VAR 0 11
26696: PUSH
26697: EMPTY
26698: EQUAL
26699: OR
26700: IFFALSE 26645
// if not control in _control then
26702: LD_VAR 0 4
26706: PUSH
26707: LD_VAR 0 12
26711: IN
26712: NOT
26713: IFFALSE 26739
// control := _control [ rand ( 1 , _control ) ] ;
26715: LD_ADDR_VAR 0 4
26719: PUSH
26720: LD_VAR 0 12
26724: PUSH
26725: LD_INT 1
26727: PPUSH
26728: LD_VAR 0 12
26732: PPUSH
26733: CALL_OW 12
26737: ARRAY
26738: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26739: LD_VAR 0 2
26743: PPUSH
26744: LD_VAR 0 5
26748: PPUSH
26749: CALL 27107 0 2
26753: NOT
26754: IFFALSE 26813
// repeat weapon := _weapon [ 1 ] ;
26756: LD_ADDR_VAR 0 5
26760: PUSH
26761: LD_VAR 0 10
26765: PUSH
26766: LD_INT 1
26768: ARRAY
26769: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26770: LD_ADDR_VAR 0 10
26774: PUSH
26775: LD_VAR 0 10
26779: PPUSH
26780: LD_INT 1
26782: PPUSH
26783: CALL_OW 3
26787: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26788: LD_VAR 0 2
26792: PPUSH
26793: LD_VAR 0 5
26797: PPUSH
26798: CALL 27107 0 2
26802: PUSH
26803: LD_VAR 0 10
26807: PUSH
26808: EMPTY
26809: EQUAL
26810: OR
26811: IFFALSE 26756
// result := [ ] ;
26813: LD_ADDR_VAR 0 6
26817: PUSH
26818: EMPTY
26819: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26820: LD_VAR 0 1
26824: PPUSH
26825: LD_VAR 0 2
26829: PPUSH
26830: LD_VAR 0 3
26834: PPUSH
26835: LD_VAR 0 4
26839: PPUSH
26840: LD_VAR 0 5
26844: PPUSH
26845: CALL_OW 448
26849: IFFALSE 26882
// result := [ chassis , engine , control , weapon ] ;
26851: LD_ADDR_VAR 0 6
26855: PUSH
26856: LD_VAR 0 2
26860: PUSH
26861: LD_VAR 0 3
26865: PUSH
26866: LD_VAR 0 4
26870: PUSH
26871: LD_VAR 0 5
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: ST_TO_ADDR
// end ;
26882: LD_VAR 0 6
26886: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26887: LD_INT 0
26889: PPUSH
// if not chassis or not engine then
26890: LD_VAR 0 1
26894: NOT
26895: PUSH
26896: LD_VAR 0 2
26900: NOT
26901: OR
26902: IFFALSE 26906
// exit ;
26904: GO 27102
// case engine of engine_solar :
26906: LD_VAR 0 2
26910: PUSH
26911: LD_INT 2
26913: DOUBLE
26914: EQUAL
26915: IFTRUE 26919
26917: GO 26957
26919: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26920: LD_ADDR_VAR 0 3
26924: PUSH
26925: LD_INT 11
26927: PUSH
26928: LD_INT 12
26930: PUSH
26931: LD_INT 13
26933: PUSH
26934: LD_INT 14
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: LD_INT 3
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: ST_TO_ADDR
26955: GO 27086
26957: LD_INT 1
26959: DOUBLE
26960: EQUAL
26961: IFTRUE 26965
26963: GO 27027
26965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26966: LD_ADDR_VAR 0 3
26970: PUSH
26971: LD_INT 11
26973: PUSH
26974: LD_INT 12
26976: PUSH
26977: LD_INT 13
26979: PUSH
26980: LD_INT 14
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: LD_INT 3
26991: PUSH
26992: LD_INT 4
26994: PUSH
26995: LD_INT 5
26997: PUSH
26998: LD_INT 21
27000: PUSH
27001: LD_INT 23
27003: PUSH
27004: LD_INT 22
27006: PUSH
27007: LD_INT 24
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: ST_TO_ADDR
27025: GO 27086
27027: LD_INT 3
27029: DOUBLE
27030: EQUAL
27031: IFTRUE 27035
27033: GO 27085
27035: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27036: LD_ADDR_VAR 0 3
27040: PUSH
27041: LD_INT 13
27043: PUSH
27044: LD_INT 14
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: LD_INT 3
27052: PUSH
27053: LD_INT 4
27055: PUSH
27056: LD_INT 5
27058: PUSH
27059: LD_INT 21
27061: PUSH
27062: LD_INT 22
27064: PUSH
27065: LD_INT 23
27067: PUSH
27068: LD_INT 24
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: ST_TO_ADDR
27083: GO 27086
27085: POP
// result := ( chassis in result ) ;
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: LD_VAR 0 1
27095: PUSH
27096: LD_VAR 0 3
27100: IN
27101: ST_TO_ADDR
// end ;
27102: LD_VAR 0 3
27106: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27107: LD_INT 0
27109: PPUSH
// if not chassis or not weapon then
27110: LD_VAR 0 1
27114: NOT
27115: PUSH
27116: LD_VAR 0 2
27120: NOT
27121: OR
27122: IFFALSE 27126
// exit ;
27124: GO 28188
// case weapon of us_machine_gun :
27126: LD_VAR 0 2
27130: PUSH
27131: LD_INT 2
27133: DOUBLE
27134: EQUAL
27135: IFTRUE 27139
27137: GO 27169
27139: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27140: LD_ADDR_VAR 0 3
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 3
27153: PUSH
27154: LD_INT 4
27156: PUSH
27157: LD_INT 5
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: ST_TO_ADDR
27167: GO 28172
27169: LD_INT 3
27171: DOUBLE
27172: EQUAL
27173: IFTRUE 27177
27175: GO 27207
27177: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27178: LD_ADDR_VAR 0 3
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: LD_INT 3
27191: PUSH
27192: LD_INT 4
27194: PUSH
27195: LD_INT 5
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
27205: GO 28172
27207: LD_INT 11
27209: DOUBLE
27210: EQUAL
27211: IFTRUE 27215
27213: GO 27245
27215: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27216: LD_ADDR_VAR 0 3
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: LD_INT 3
27229: PUSH
27230: LD_INT 4
27232: PUSH
27233: LD_INT 5
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: ST_TO_ADDR
27243: GO 28172
27245: LD_INT 4
27247: DOUBLE
27248: EQUAL
27249: IFTRUE 27253
27251: GO 27279
27253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27254: LD_ADDR_VAR 0 3
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: LD_INT 3
27264: PUSH
27265: LD_INT 4
27267: PUSH
27268: LD_INT 5
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: ST_TO_ADDR
27277: GO 28172
27279: LD_INT 5
27281: DOUBLE
27282: EQUAL
27283: IFTRUE 27287
27285: GO 27313
27287: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27288: LD_ADDR_VAR 0 3
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: LD_INT 3
27298: PUSH
27299: LD_INT 4
27301: PUSH
27302: LD_INT 5
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
27311: GO 28172
27313: LD_INT 9
27315: DOUBLE
27316: EQUAL
27317: IFTRUE 27321
27319: GO 27347
27321: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27322: LD_ADDR_VAR 0 3
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: LD_INT 3
27332: PUSH
27333: LD_INT 4
27335: PUSH
27336: LD_INT 5
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: ST_TO_ADDR
27345: GO 28172
27347: LD_INT 7
27349: DOUBLE
27350: EQUAL
27351: IFTRUE 27355
27353: GO 27381
27355: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27356: LD_ADDR_VAR 0 3
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: LD_INT 3
27366: PUSH
27367: LD_INT 4
27369: PUSH
27370: LD_INT 5
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: ST_TO_ADDR
27379: GO 28172
27381: LD_INT 12
27383: DOUBLE
27384: EQUAL
27385: IFTRUE 27389
27387: GO 27415
27389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27390: LD_ADDR_VAR 0 3
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: LD_INT 3
27400: PUSH
27401: LD_INT 4
27403: PUSH
27404: LD_INT 5
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
27413: GO 28172
27415: LD_INT 13
27417: DOUBLE
27418: EQUAL
27419: IFTRUE 27423
27421: GO 27449
27423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27424: LD_ADDR_VAR 0 3
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: LD_INT 3
27434: PUSH
27435: LD_INT 4
27437: PUSH
27438: LD_INT 5
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: ST_TO_ADDR
27447: GO 28172
27449: LD_INT 14
27451: DOUBLE
27452: EQUAL
27453: IFTRUE 27457
27455: GO 27475
27457: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27458: LD_ADDR_VAR 0 3
27462: PUSH
27463: LD_INT 4
27465: PUSH
27466: LD_INT 5
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: ST_TO_ADDR
27473: GO 28172
27475: LD_INT 6
27477: DOUBLE
27478: EQUAL
27479: IFTRUE 27483
27481: GO 27501
27483: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27484: LD_ADDR_VAR 0 3
27488: PUSH
27489: LD_INT 4
27491: PUSH
27492: LD_INT 5
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: ST_TO_ADDR
27499: GO 28172
27501: LD_INT 10
27503: DOUBLE
27504: EQUAL
27505: IFTRUE 27509
27507: GO 27527
27509: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27510: LD_ADDR_VAR 0 3
27514: PUSH
27515: LD_INT 4
27517: PUSH
27518: LD_INT 5
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: ST_TO_ADDR
27525: GO 28172
27527: LD_INT 22
27529: DOUBLE
27530: EQUAL
27531: IFTRUE 27535
27533: GO 27561
27535: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27536: LD_ADDR_VAR 0 3
27540: PUSH
27541: LD_INT 11
27543: PUSH
27544: LD_INT 12
27546: PUSH
27547: LD_INT 13
27549: PUSH
27550: LD_INT 14
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: ST_TO_ADDR
27559: GO 28172
27561: LD_INT 23
27563: DOUBLE
27564: EQUAL
27565: IFTRUE 27569
27567: GO 27595
27569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27570: LD_ADDR_VAR 0 3
27574: PUSH
27575: LD_INT 11
27577: PUSH
27578: LD_INT 12
27580: PUSH
27581: LD_INT 13
27583: PUSH
27584: LD_INT 14
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: ST_TO_ADDR
27593: GO 28172
27595: LD_INT 24
27597: DOUBLE
27598: EQUAL
27599: IFTRUE 27603
27601: GO 27629
27603: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27604: LD_ADDR_VAR 0 3
27608: PUSH
27609: LD_INT 11
27611: PUSH
27612: LD_INT 12
27614: PUSH
27615: LD_INT 13
27617: PUSH
27618: LD_INT 14
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: ST_TO_ADDR
27627: GO 28172
27629: LD_INT 30
27631: DOUBLE
27632: EQUAL
27633: IFTRUE 27637
27635: GO 27663
27637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27638: LD_ADDR_VAR 0 3
27642: PUSH
27643: LD_INT 11
27645: PUSH
27646: LD_INT 12
27648: PUSH
27649: LD_INT 13
27651: PUSH
27652: LD_INT 14
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: ST_TO_ADDR
27661: GO 28172
27663: LD_INT 25
27665: DOUBLE
27666: EQUAL
27667: IFTRUE 27671
27669: GO 27689
27671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27672: LD_ADDR_VAR 0 3
27676: PUSH
27677: LD_INT 13
27679: PUSH
27680: LD_INT 14
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: ST_TO_ADDR
27687: GO 28172
27689: LD_INT 27
27691: DOUBLE
27692: EQUAL
27693: IFTRUE 27697
27695: GO 27715
27697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27698: LD_ADDR_VAR 0 3
27702: PUSH
27703: LD_INT 13
27705: PUSH
27706: LD_INT 14
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: ST_TO_ADDR
27713: GO 28172
27715: LD_EXP 99
27719: DOUBLE
27720: EQUAL
27721: IFTRUE 27725
27723: GO 27751
27725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27726: LD_ADDR_VAR 0 3
27730: PUSH
27731: LD_INT 11
27733: PUSH
27734: LD_INT 12
27736: PUSH
27737: LD_INT 13
27739: PUSH
27740: LD_INT 14
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: ST_TO_ADDR
27749: GO 28172
27751: LD_INT 28
27753: DOUBLE
27754: EQUAL
27755: IFTRUE 27759
27757: GO 27777
27759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27760: LD_ADDR_VAR 0 3
27764: PUSH
27765: LD_INT 13
27767: PUSH
27768: LD_INT 14
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: ST_TO_ADDR
27775: GO 28172
27777: LD_INT 29
27779: DOUBLE
27780: EQUAL
27781: IFTRUE 27785
27783: GO 27803
27785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27786: LD_ADDR_VAR 0 3
27790: PUSH
27791: LD_INT 13
27793: PUSH
27794: LD_INT 14
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: ST_TO_ADDR
27801: GO 28172
27803: LD_INT 31
27805: DOUBLE
27806: EQUAL
27807: IFTRUE 27811
27809: GO 27829
27811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_INT 13
27819: PUSH
27820: LD_INT 14
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: ST_TO_ADDR
27827: GO 28172
27829: LD_INT 26
27831: DOUBLE
27832: EQUAL
27833: IFTRUE 27837
27835: GO 27855
27837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27838: LD_ADDR_VAR 0 3
27842: PUSH
27843: LD_INT 13
27845: PUSH
27846: LD_INT 14
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: ST_TO_ADDR
27853: GO 28172
27855: LD_INT 42
27857: DOUBLE
27858: EQUAL
27859: IFTRUE 27863
27861: GO 27889
27863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27864: LD_ADDR_VAR 0 3
27868: PUSH
27869: LD_INT 21
27871: PUSH
27872: LD_INT 22
27874: PUSH
27875: LD_INT 23
27877: PUSH
27878: LD_INT 24
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: ST_TO_ADDR
27887: GO 28172
27889: LD_INT 43
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27897
27895: GO 27923
27897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27898: LD_ADDR_VAR 0 3
27902: PUSH
27903: LD_INT 21
27905: PUSH
27906: LD_INT 22
27908: PUSH
27909: LD_INT 23
27911: PUSH
27912: LD_INT 24
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: ST_TO_ADDR
27921: GO 28172
27923: LD_INT 44
27925: DOUBLE
27926: EQUAL
27927: IFTRUE 27931
27929: GO 27957
27931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 21
27939: PUSH
27940: LD_INT 22
27942: PUSH
27943: LD_INT 23
27945: PUSH
27946: LD_INT 24
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
27955: GO 28172
27957: LD_INT 45
27959: DOUBLE
27960: EQUAL
27961: IFTRUE 27965
27963: GO 27991
27965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27966: LD_ADDR_VAR 0 3
27970: PUSH
27971: LD_INT 21
27973: PUSH
27974: LD_INT 22
27976: PUSH
27977: LD_INT 23
27979: PUSH
27980: LD_INT 24
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: ST_TO_ADDR
27989: GO 28172
27991: LD_INT 49
27993: DOUBLE
27994: EQUAL
27995: IFTRUE 27999
27997: GO 28025
27999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28000: LD_ADDR_VAR 0 3
28004: PUSH
28005: LD_INT 21
28007: PUSH
28008: LD_INT 22
28010: PUSH
28011: LD_INT 23
28013: PUSH
28014: LD_INT 24
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
28023: GO 28172
28025: LD_INT 51
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28033
28031: GO 28059
28033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_INT 21
28041: PUSH
28042: LD_INT 22
28044: PUSH
28045: LD_INT 23
28047: PUSH
28048: LD_INT 24
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
28057: GO 28172
28059: LD_INT 52
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28093
28067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_INT 21
28075: PUSH
28076: LD_INT 22
28078: PUSH
28079: LD_INT 23
28081: PUSH
28082: LD_INT 24
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: ST_TO_ADDR
28091: GO 28172
28093: LD_INT 53
28095: DOUBLE
28096: EQUAL
28097: IFTRUE 28101
28099: GO 28119
28101: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28102: LD_ADDR_VAR 0 3
28106: PUSH
28107: LD_INT 23
28109: PUSH
28110: LD_INT 24
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: ST_TO_ADDR
28117: GO 28172
28119: LD_INT 46
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28127
28125: GO 28145
28127: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28128: LD_ADDR_VAR 0 3
28132: PUSH
28133: LD_INT 23
28135: PUSH
28136: LD_INT 24
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: ST_TO_ADDR
28143: GO 28172
28145: LD_INT 47
28147: DOUBLE
28148: EQUAL
28149: IFTRUE 28153
28151: GO 28171
28153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28154: LD_ADDR_VAR 0 3
28158: PUSH
28159: LD_INT 23
28161: PUSH
28162: LD_INT 24
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: ST_TO_ADDR
28169: GO 28172
28171: POP
// result := ( chassis in result ) ;
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: LD_VAR 0 1
28181: PUSH
28182: LD_VAR 0 3
28186: IN
28187: ST_TO_ADDR
// end ;
28188: LD_VAR 0 3
28192: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28193: LD_INT 0
28195: PPUSH
28196: PPUSH
28197: PPUSH
28198: PPUSH
28199: PPUSH
28200: PPUSH
28201: PPUSH
// result := array ;
28202: LD_ADDR_VAR 0 5
28206: PUSH
28207: LD_VAR 0 1
28211: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28212: LD_VAR 0 1
28216: NOT
28217: PUSH
28218: LD_VAR 0 2
28222: NOT
28223: OR
28224: PUSH
28225: LD_VAR 0 3
28229: NOT
28230: OR
28231: PUSH
28232: LD_VAR 0 2
28236: PUSH
28237: LD_VAR 0 1
28241: GREATER
28242: OR
28243: PUSH
28244: LD_VAR 0 3
28248: PUSH
28249: LD_VAR 0 1
28253: GREATER
28254: OR
28255: IFFALSE 28259
// exit ;
28257: GO 28555
// if direction then
28259: LD_VAR 0 4
28263: IFFALSE 28327
// begin d := 1 ;
28265: LD_ADDR_VAR 0 9
28269: PUSH
28270: LD_INT 1
28272: ST_TO_ADDR
// if i_from > i_to then
28273: LD_VAR 0 2
28277: PUSH
28278: LD_VAR 0 3
28282: GREATER
28283: IFFALSE 28309
// length := ( array - i_from ) + i_to else
28285: LD_ADDR_VAR 0 11
28289: PUSH
28290: LD_VAR 0 1
28294: PUSH
28295: LD_VAR 0 2
28299: MINUS
28300: PUSH
28301: LD_VAR 0 3
28305: PLUS
28306: ST_TO_ADDR
28307: GO 28325
// length := i_to - i_from ;
28309: LD_ADDR_VAR 0 11
28313: PUSH
28314: LD_VAR 0 3
28318: PUSH
28319: LD_VAR 0 2
28323: MINUS
28324: ST_TO_ADDR
// end else
28325: GO 28388
// begin d := - 1 ;
28327: LD_ADDR_VAR 0 9
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: ST_TO_ADDR
// if i_from > i_to then
28336: LD_VAR 0 2
28340: PUSH
28341: LD_VAR 0 3
28345: GREATER
28346: IFFALSE 28366
// length := i_from - i_to else
28348: LD_ADDR_VAR 0 11
28352: PUSH
28353: LD_VAR 0 2
28357: PUSH
28358: LD_VAR 0 3
28362: MINUS
28363: ST_TO_ADDR
28364: GO 28388
// length := ( array - i_to ) + i_from ;
28366: LD_ADDR_VAR 0 11
28370: PUSH
28371: LD_VAR 0 1
28375: PUSH
28376: LD_VAR 0 3
28380: MINUS
28381: PUSH
28382: LD_VAR 0 2
28386: PLUS
28387: ST_TO_ADDR
// end ; if not length then
28388: LD_VAR 0 11
28392: NOT
28393: IFFALSE 28397
// exit ;
28395: GO 28555
// tmp := array ;
28397: LD_ADDR_VAR 0 10
28401: PUSH
28402: LD_VAR 0 1
28406: ST_TO_ADDR
// for i = 1 to length do
28407: LD_ADDR_VAR 0 6
28411: PUSH
28412: DOUBLE
28413: LD_INT 1
28415: DEC
28416: ST_TO_ADDR
28417: LD_VAR 0 11
28421: PUSH
28422: FOR_TO
28423: IFFALSE 28543
// begin for j = 1 to array do
28425: LD_ADDR_VAR 0 7
28429: PUSH
28430: DOUBLE
28431: LD_INT 1
28433: DEC
28434: ST_TO_ADDR
28435: LD_VAR 0 1
28439: PUSH
28440: FOR_TO
28441: IFFALSE 28529
// begin k := j + d ;
28443: LD_ADDR_VAR 0 8
28447: PUSH
28448: LD_VAR 0 7
28452: PUSH
28453: LD_VAR 0 9
28457: PLUS
28458: ST_TO_ADDR
// if k > array then
28459: LD_VAR 0 8
28463: PUSH
28464: LD_VAR 0 1
28468: GREATER
28469: IFFALSE 28479
// k := 1 ;
28471: LD_ADDR_VAR 0 8
28475: PUSH
28476: LD_INT 1
28478: ST_TO_ADDR
// if not k then
28479: LD_VAR 0 8
28483: NOT
28484: IFFALSE 28496
// k := array ;
28486: LD_ADDR_VAR 0 8
28490: PUSH
28491: LD_VAR 0 1
28495: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28496: LD_ADDR_VAR 0 10
28500: PUSH
28501: LD_VAR 0 10
28505: PPUSH
28506: LD_VAR 0 8
28510: PPUSH
28511: LD_VAR 0 1
28515: PUSH
28516: LD_VAR 0 7
28520: ARRAY
28521: PPUSH
28522: CALL_OW 1
28526: ST_TO_ADDR
// end ;
28527: GO 28440
28529: POP
28530: POP
// array := tmp ;
28531: LD_ADDR_VAR 0 1
28535: PUSH
28536: LD_VAR 0 10
28540: ST_TO_ADDR
// end ;
28541: GO 28422
28543: POP
28544: POP
// result := array ;
28545: LD_ADDR_VAR 0 5
28549: PUSH
28550: LD_VAR 0 1
28554: ST_TO_ADDR
// end ;
28555: LD_VAR 0 5
28559: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28560: LD_INT 0
28562: PPUSH
28563: PPUSH
// result := 0 ;
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_INT 0
28571: ST_TO_ADDR
// if not array or not value in array then
28572: LD_VAR 0 1
28576: NOT
28577: PUSH
28578: LD_VAR 0 2
28582: PUSH
28583: LD_VAR 0 1
28587: IN
28588: NOT
28589: OR
28590: IFFALSE 28594
// exit ;
28592: GO 28648
// for i = 1 to array do
28594: LD_ADDR_VAR 0 4
28598: PUSH
28599: DOUBLE
28600: LD_INT 1
28602: DEC
28603: ST_TO_ADDR
28604: LD_VAR 0 1
28608: PUSH
28609: FOR_TO
28610: IFFALSE 28646
// if value = array [ i ] then
28612: LD_VAR 0 2
28616: PUSH
28617: LD_VAR 0 1
28621: PUSH
28622: LD_VAR 0 4
28626: ARRAY
28627: EQUAL
28628: IFFALSE 28644
// begin result := i ;
28630: LD_ADDR_VAR 0 3
28634: PUSH
28635: LD_VAR 0 4
28639: ST_TO_ADDR
// exit ;
28640: POP
28641: POP
28642: GO 28648
// end ;
28644: GO 28609
28646: POP
28647: POP
// end ;
28648: LD_VAR 0 3
28652: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28653: LD_INT 0
28655: PPUSH
// vc_chassis := chassis ;
28656: LD_ADDR_OWVAR 37
28660: PUSH
28661: LD_VAR 0 1
28665: ST_TO_ADDR
// vc_engine := engine ;
28666: LD_ADDR_OWVAR 39
28670: PUSH
28671: LD_VAR 0 2
28675: ST_TO_ADDR
// vc_control := control ;
28676: LD_ADDR_OWVAR 38
28680: PUSH
28681: LD_VAR 0 3
28685: ST_TO_ADDR
// vc_weapon := weapon ;
28686: LD_ADDR_OWVAR 40
28690: PUSH
28691: LD_VAR 0 4
28695: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28696: LD_ADDR_OWVAR 41
28700: PUSH
28701: LD_VAR 0 5
28705: ST_TO_ADDR
// end ;
28706: LD_VAR 0 6
28710: RET
// export function WantPlant ( unit ) ; var task ; begin
28711: LD_INT 0
28713: PPUSH
28714: PPUSH
// result := false ;
28715: LD_ADDR_VAR 0 2
28719: PUSH
28720: LD_INT 0
28722: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28723: LD_ADDR_VAR 0 3
28727: PUSH
28728: LD_VAR 0 1
28732: PPUSH
28733: CALL_OW 437
28737: ST_TO_ADDR
// if task then
28738: LD_VAR 0 3
28742: IFFALSE 28770
// if task [ 1 ] [ 1 ] = p then
28744: LD_VAR 0 3
28748: PUSH
28749: LD_INT 1
28751: ARRAY
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: PUSH
28757: LD_STRING p
28759: EQUAL
28760: IFFALSE 28770
// result := true ;
28762: LD_ADDR_VAR 0 2
28766: PUSH
28767: LD_INT 1
28769: ST_TO_ADDR
// end ;
28770: LD_VAR 0 2
28774: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28775: LD_INT 0
28777: PPUSH
28778: PPUSH
28779: PPUSH
28780: PPUSH
// if pos < 1 then
28781: LD_VAR 0 2
28785: PUSH
28786: LD_INT 1
28788: LESS
28789: IFFALSE 28793
// exit ;
28791: GO 29096
// if pos = 1 then
28793: LD_VAR 0 2
28797: PUSH
28798: LD_INT 1
28800: EQUAL
28801: IFFALSE 28834
// result := Replace ( arr , pos [ 1 ] , value ) else
28803: LD_ADDR_VAR 0 4
28807: PUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: LD_VAR 0 2
28817: PUSH
28818: LD_INT 1
28820: ARRAY
28821: PPUSH
28822: LD_VAR 0 3
28826: PPUSH
28827: CALL_OW 1
28831: ST_TO_ADDR
28832: GO 29096
// begin tmp := arr ;
28834: LD_ADDR_VAR 0 6
28838: PUSH
28839: LD_VAR 0 1
28843: ST_TO_ADDR
// s_arr := [ tmp ] ;
28844: LD_ADDR_VAR 0 7
28848: PUSH
28849: LD_VAR 0 6
28853: PUSH
28854: EMPTY
28855: LIST
28856: ST_TO_ADDR
// for i = 1 to pos - 1 do
28857: LD_ADDR_VAR 0 5
28861: PUSH
28862: DOUBLE
28863: LD_INT 1
28865: DEC
28866: ST_TO_ADDR
28867: LD_VAR 0 2
28871: PUSH
28872: LD_INT 1
28874: MINUS
28875: PUSH
28876: FOR_TO
28877: IFFALSE 28922
// begin tmp := tmp [ pos [ i ] ] ;
28879: LD_ADDR_VAR 0 6
28883: PUSH
28884: LD_VAR 0 6
28888: PUSH
28889: LD_VAR 0 2
28893: PUSH
28894: LD_VAR 0 5
28898: ARRAY
28899: ARRAY
28900: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28901: LD_ADDR_VAR 0 7
28905: PUSH
28906: LD_VAR 0 7
28910: PUSH
28911: LD_VAR 0 6
28915: PUSH
28916: EMPTY
28917: LIST
28918: ADD
28919: ST_TO_ADDR
// end ;
28920: GO 28876
28922: POP
28923: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28924: LD_ADDR_VAR 0 6
28928: PUSH
28929: LD_VAR 0 6
28933: PPUSH
28934: LD_VAR 0 2
28938: PUSH
28939: LD_VAR 0 2
28943: ARRAY
28944: PPUSH
28945: LD_VAR 0 3
28949: PPUSH
28950: CALL_OW 1
28954: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28955: LD_ADDR_VAR 0 7
28959: PUSH
28960: LD_VAR 0 7
28964: PPUSH
28965: LD_VAR 0 7
28969: PPUSH
28970: LD_VAR 0 6
28974: PPUSH
28975: CALL_OW 1
28979: ST_TO_ADDR
// for i = s_arr downto 2 do
28980: LD_ADDR_VAR 0 5
28984: PUSH
28985: DOUBLE
28986: LD_VAR 0 7
28990: INC
28991: ST_TO_ADDR
28992: LD_INT 2
28994: PUSH
28995: FOR_DOWNTO
28996: IFFALSE 29080
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28998: LD_ADDR_VAR 0 6
29002: PUSH
29003: LD_VAR 0 7
29007: PUSH
29008: LD_VAR 0 5
29012: PUSH
29013: LD_INT 1
29015: MINUS
29016: ARRAY
29017: PPUSH
29018: LD_VAR 0 2
29022: PUSH
29023: LD_VAR 0 5
29027: PUSH
29028: LD_INT 1
29030: MINUS
29031: ARRAY
29032: PPUSH
29033: LD_VAR 0 7
29037: PUSH
29038: LD_VAR 0 5
29042: ARRAY
29043: PPUSH
29044: CALL_OW 1
29048: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29049: LD_ADDR_VAR 0 7
29053: PUSH
29054: LD_VAR 0 7
29058: PPUSH
29059: LD_VAR 0 5
29063: PUSH
29064: LD_INT 1
29066: MINUS
29067: PPUSH
29068: LD_VAR 0 6
29072: PPUSH
29073: CALL_OW 1
29077: ST_TO_ADDR
// end ;
29078: GO 28995
29080: POP
29081: POP
// result := s_arr [ 1 ] ;
29082: LD_ADDR_VAR 0 4
29086: PUSH
29087: LD_VAR 0 7
29091: PUSH
29092: LD_INT 1
29094: ARRAY
29095: ST_TO_ADDR
// end ; end ;
29096: LD_VAR 0 4
29100: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
// if not list then
29105: LD_VAR 0 1
29109: NOT
29110: IFFALSE 29114
// exit ;
29112: GO 29205
// i := list [ pos1 ] ;
29114: LD_ADDR_VAR 0 5
29118: PUSH
29119: LD_VAR 0 1
29123: PUSH
29124: LD_VAR 0 2
29128: ARRAY
29129: ST_TO_ADDR
// if not i then
29130: LD_VAR 0 5
29134: NOT
29135: IFFALSE 29139
// exit ;
29137: GO 29205
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29139: LD_ADDR_VAR 0 1
29143: PUSH
29144: LD_VAR 0 1
29148: PPUSH
29149: LD_VAR 0 2
29153: PPUSH
29154: LD_VAR 0 1
29158: PUSH
29159: LD_VAR 0 3
29163: ARRAY
29164: PPUSH
29165: CALL_OW 1
29169: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29170: LD_ADDR_VAR 0 1
29174: PUSH
29175: LD_VAR 0 1
29179: PPUSH
29180: LD_VAR 0 3
29184: PPUSH
29185: LD_VAR 0 5
29189: PPUSH
29190: CALL_OW 1
29194: ST_TO_ADDR
// result := list ;
29195: LD_ADDR_VAR 0 4
29199: PUSH
29200: LD_VAR 0 1
29204: ST_TO_ADDR
// end ;
29205: LD_VAR 0 4
29209: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29210: LD_INT 0
29212: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29213: LD_ADDR_VAR 0 5
29217: PUSH
29218: LD_VAR 0 1
29222: PPUSH
29223: CALL_OW 250
29227: PPUSH
29228: LD_VAR 0 1
29232: PPUSH
29233: CALL_OW 251
29237: PPUSH
29238: LD_VAR 0 2
29242: PPUSH
29243: LD_VAR 0 3
29247: PPUSH
29248: LD_VAR 0 4
29252: PPUSH
29253: CALL 29263 0 5
29257: ST_TO_ADDR
// end ;
29258: LD_VAR 0 5
29262: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29263: LD_INT 0
29265: PPUSH
29266: PPUSH
29267: PPUSH
29268: PPUSH
// if not list then
29269: LD_VAR 0 3
29273: NOT
29274: IFFALSE 29278
// exit ;
29276: GO 29666
// result := [ ] ;
29278: LD_ADDR_VAR 0 6
29282: PUSH
29283: EMPTY
29284: ST_TO_ADDR
// for i in list do
29285: LD_ADDR_VAR 0 7
29289: PUSH
29290: LD_VAR 0 3
29294: PUSH
29295: FOR_IN
29296: IFFALSE 29498
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29298: LD_ADDR_VAR 0 9
29302: PUSH
29303: LD_VAR 0 7
29307: PPUSH
29308: LD_VAR 0 1
29312: PPUSH
29313: LD_VAR 0 2
29317: PPUSH
29318: CALL_OW 297
29322: ST_TO_ADDR
// if not result then
29323: LD_VAR 0 6
29327: NOT
29328: IFFALSE 29354
// result := [ [ i , tmp ] ] else
29330: LD_ADDR_VAR 0 6
29334: PUSH
29335: LD_VAR 0 7
29339: PUSH
29340: LD_VAR 0 9
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: ST_TO_ADDR
29352: GO 29496
// begin if result [ result ] [ 2 ] < tmp then
29354: LD_VAR 0 6
29358: PUSH
29359: LD_VAR 0 6
29363: ARRAY
29364: PUSH
29365: LD_INT 2
29367: ARRAY
29368: PUSH
29369: LD_VAR 0 9
29373: LESS
29374: IFFALSE 29416
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29376: LD_ADDR_VAR 0 6
29380: PUSH
29381: LD_VAR 0 6
29385: PPUSH
29386: LD_VAR 0 6
29390: PUSH
29391: LD_INT 1
29393: PLUS
29394: PPUSH
29395: LD_VAR 0 7
29399: PUSH
29400: LD_VAR 0 9
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 2
29413: ST_TO_ADDR
29414: GO 29496
// for j = 1 to result do
29416: LD_ADDR_VAR 0 8
29420: PUSH
29421: DOUBLE
29422: LD_INT 1
29424: DEC
29425: ST_TO_ADDR
29426: LD_VAR 0 6
29430: PUSH
29431: FOR_TO
29432: IFFALSE 29494
// begin if tmp < result [ j ] [ 2 ] then
29434: LD_VAR 0 9
29438: PUSH
29439: LD_VAR 0 6
29443: PUSH
29444: LD_VAR 0 8
29448: ARRAY
29449: PUSH
29450: LD_INT 2
29452: ARRAY
29453: LESS
29454: IFFALSE 29492
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29456: LD_ADDR_VAR 0 6
29460: PUSH
29461: LD_VAR 0 6
29465: PPUSH
29466: LD_VAR 0 8
29470: PPUSH
29471: LD_VAR 0 7
29475: PUSH
29476: LD_VAR 0 9
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PPUSH
29485: CALL_OW 2
29489: ST_TO_ADDR
// break ;
29490: GO 29494
// end ; end ;
29492: GO 29431
29494: POP
29495: POP
// end ; end ;
29496: GO 29295
29498: POP
29499: POP
// if result and not asc then
29500: LD_VAR 0 6
29504: PUSH
29505: LD_VAR 0 4
29509: NOT
29510: AND
29511: IFFALSE 29586
// begin tmp := result ;
29513: LD_ADDR_VAR 0 9
29517: PUSH
29518: LD_VAR 0 6
29522: ST_TO_ADDR
// for i = tmp downto 1 do
29523: LD_ADDR_VAR 0 7
29527: PUSH
29528: DOUBLE
29529: LD_VAR 0 9
29533: INC
29534: ST_TO_ADDR
29535: LD_INT 1
29537: PUSH
29538: FOR_DOWNTO
29539: IFFALSE 29584
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29541: LD_ADDR_VAR 0 6
29545: PUSH
29546: LD_VAR 0 6
29550: PPUSH
29551: LD_VAR 0 9
29555: PUSH
29556: LD_VAR 0 7
29560: MINUS
29561: PUSH
29562: LD_INT 1
29564: PLUS
29565: PPUSH
29566: LD_VAR 0 9
29570: PUSH
29571: LD_VAR 0 7
29575: ARRAY
29576: PPUSH
29577: CALL_OW 1
29581: ST_TO_ADDR
29582: GO 29538
29584: POP
29585: POP
// end ; tmp := [ ] ;
29586: LD_ADDR_VAR 0 9
29590: PUSH
29591: EMPTY
29592: ST_TO_ADDR
// if mode then
29593: LD_VAR 0 5
29597: IFFALSE 29666
// begin for i = 1 to result do
29599: LD_ADDR_VAR 0 7
29603: PUSH
29604: DOUBLE
29605: LD_INT 1
29607: DEC
29608: ST_TO_ADDR
29609: LD_VAR 0 6
29613: PUSH
29614: FOR_TO
29615: IFFALSE 29654
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29617: LD_ADDR_VAR 0 9
29621: PUSH
29622: LD_VAR 0 9
29626: PPUSH
29627: LD_VAR 0 7
29631: PPUSH
29632: LD_VAR 0 6
29636: PUSH
29637: LD_VAR 0 7
29641: ARRAY
29642: PUSH
29643: LD_INT 1
29645: ARRAY
29646: PPUSH
29647: CALL_OW 1
29651: ST_TO_ADDR
29652: GO 29614
29654: POP
29655: POP
// result := tmp ;
29656: LD_ADDR_VAR 0 6
29660: PUSH
29661: LD_VAR 0 9
29665: ST_TO_ADDR
// end ; end ;
29666: LD_VAR 0 6
29670: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29671: LD_INT 0
29673: PPUSH
29674: PPUSH
29675: PPUSH
29676: PPUSH
29677: PPUSH
29678: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29679: LD_ADDR_VAR 0 5
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: ST_TO_ADDR
// if not x or not y then
29701: LD_VAR 0 2
29705: NOT
29706: PUSH
29707: LD_VAR 0 3
29711: NOT
29712: OR
29713: IFFALSE 29717
// exit ;
29715: GO 31369
// if not range then
29717: LD_VAR 0 4
29721: NOT
29722: IFFALSE 29732
// range := 10 ;
29724: LD_ADDR_VAR 0 4
29728: PUSH
29729: LD_INT 10
29731: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29732: LD_ADDR_VAR 0 8
29736: PUSH
29737: LD_INT 81
29739: PUSH
29740: LD_VAR 0 1
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 92
29751: PUSH
29752: LD_VAR 0 2
29756: PUSH
29757: LD_VAR 0 3
29761: PUSH
29762: LD_VAR 0 4
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 3
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: PPUSH
29795: CALL_OW 69
29799: ST_TO_ADDR
// if not tmp then
29800: LD_VAR 0 8
29804: NOT
29805: IFFALSE 29809
// exit ;
29807: GO 31369
// for i in tmp do
29809: LD_ADDR_VAR 0 6
29813: PUSH
29814: LD_VAR 0 8
29818: PUSH
29819: FOR_IN
29820: IFFALSE 31344
// begin points := [ 0 , 0 , 0 ] ;
29822: LD_ADDR_VAR 0 9
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: ST_TO_ADDR
// bpoints := 1 ;
29841: LD_ADDR_VAR 0 10
29845: PUSH
29846: LD_INT 1
29848: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29849: LD_VAR 0 6
29853: PPUSH
29854: CALL_OW 247
29858: PUSH
29859: LD_INT 1
29861: DOUBLE
29862: EQUAL
29863: IFTRUE 29867
29865: GO 30445
29867: POP
// begin if GetClass ( i ) = 1 then
29868: LD_VAR 0 6
29872: PPUSH
29873: CALL_OW 257
29877: PUSH
29878: LD_INT 1
29880: EQUAL
29881: IFFALSE 29902
// points := [ 10 , 5 , 3 ] ;
29883: LD_ADDR_VAR 0 9
29887: PUSH
29888: LD_INT 10
29890: PUSH
29891: LD_INT 5
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29902: LD_VAR 0 6
29906: PPUSH
29907: CALL_OW 257
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: LD_INT 4
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: IN
29926: IFFALSE 29947
// points := [ 3 , 2 , 1 ] ;
29928: LD_ADDR_VAR 0 9
29932: PUSH
29933: LD_INT 3
29935: PUSH
29936: LD_INT 2
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: LIST
29946: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29947: LD_VAR 0 6
29951: PPUSH
29952: CALL_OW 257
29956: PUSH
29957: LD_INT 5
29959: EQUAL
29960: IFFALSE 29981
// points := [ 130 , 5 , 2 ] ;
29962: LD_ADDR_VAR 0 9
29966: PUSH
29967: LD_INT 130
29969: PUSH
29970: LD_INT 5
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29981: LD_VAR 0 6
29985: PPUSH
29986: CALL_OW 257
29990: PUSH
29991: LD_INT 8
29993: EQUAL
29994: IFFALSE 30015
// points := [ 35 , 35 , 30 ] ;
29996: LD_ADDR_VAR 0 9
30000: PUSH
30001: LD_INT 35
30003: PUSH
30004: LD_INT 35
30006: PUSH
30007: LD_INT 30
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30015: LD_VAR 0 6
30019: PPUSH
30020: CALL_OW 257
30024: PUSH
30025: LD_INT 9
30027: EQUAL
30028: IFFALSE 30049
// points := [ 20 , 55 , 40 ] ;
30030: LD_ADDR_VAR 0 9
30034: PUSH
30035: LD_INT 20
30037: PUSH
30038: LD_INT 55
30040: PUSH
30041: LD_INT 40
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: LIST
30048: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30049: LD_VAR 0 6
30053: PPUSH
30054: CALL_OW 257
30058: PUSH
30059: LD_INT 12
30061: PUSH
30062: LD_INT 16
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: IN
30069: IFFALSE 30090
// points := [ 5 , 3 , 2 ] ;
30071: LD_ADDR_VAR 0 9
30075: PUSH
30076: LD_INT 5
30078: PUSH
30079: LD_INT 3
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30090: LD_VAR 0 6
30094: PPUSH
30095: CALL_OW 257
30099: PUSH
30100: LD_INT 17
30102: EQUAL
30103: IFFALSE 30124
// points := [ 100 , 50 , 75 ] ;
30105: LD_ADDR_VAR 0 9
30109: PUSH
30110: LD_INT 100
30112: PUSH
30113: LD_INT 50
30115: PUSH
30116: LD_INT 75
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30124: LD_VAR 0 6
30128: PPUSH
30129: CALL_OW 257
30133: PUSH
30134: LD_INT 15
30136: EQUAL
30137: IFFALSE 30158
// points := [ 10 , 5 , 3 ] ;
30139: LD_ADDR_VAR 0 9
30143: PUSH
30144: LD_INT 10
30146: PUSH
30147: LD_INT 5
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: LIST
30157: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30158: LD_VAR 0 6
30162: PPUSH
30163: CALL_OW 257
30167: PUSH
30168: LD_INT 14
30170: EQUAL
30171: IFFALSE 30192
// points := [ 10 , 0 , 0 ] ;
30173: LD_ADDR_VAR 0 9
30177: PUSH
30178: LD_INT 10
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30192: LD_VAR 0 6
30196: PPUSH
30197: CALL_OW 257
30201: PUSH
30202: LD_INT 11
30204: EQUAL
30205: IFFALSE 30226
// points := [ 30 , 10 , 5 ] ;
30207: LD_ADDR_VAR 0 9
30211: PUSH
30212: LD_INT 30
30214: PUSH
30215: LD_INT 10
30217: PUSH
30218: LD_INT 5
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30226: LD_VAR 0 1
30230: PPUSH
30231: LD_INT 5
30233: PPUSH
30234: CALL_OW 321
30238: PUSH
30239: LD_INT 2
30241: EQUAL
30242: IFFALSE 30259
// bpoints := bpoints * 1.8 ;
30244: LD_ADDR_VAR 0 10
30248: PUSH
30249: LD_VAR 0 10
30253: PUSH
30254: LD_REAL  1.80000000000000E+0000
30257: MUL
30258: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30259: LD_VAR 0 6
30263: PPUSH
30264: CALL_OW 257
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: LD_INT 2
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: LD_INT 4
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: IN
30287: PUSH
30288: LD_VAR 0 1
30292: PPUSH
30293: LD_INT 51
30295: PPUSH
30296: CALL_OW 321
30300: PUSH
30301: LD_INT 2
30303: EQUAL
30304: AND
30305: IFFALSE 30322
// bpoints := bpoints * 1.2 ;
30307: LD_ADDR_VAR 0 10
30311: PUSH
30312: LD_VAR 0 10
30316: PUSH
30317: LD_REAL  1.20000000000000E+0000
30320: MUL
30321: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30322: LD_VAR 0 6
30326: PPUSH
30327: CALL_OW 257
30331: PUSH
30332: LD_INT 5
30334: PUSH
30335: LD_INT 7
30337: PUSH
30338: LD_INT 9
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: LIST
30345: IN
30346: PUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: LD_INT 52
30354: PPUSH
30355: CALL_OW 321
30359: PUSH
30360: LD_INT 2
30362: EQUAL
30363: AND
30364: IFFALSE 30381
// bpoints := bpoints * 1.5 ;
30366: LD_ADDR_VAR 0 10
30370: PUSH
30371: LD_VAR 0 10
30375: PUSH
30376: LD_REAL  1.50000000000000E+0000
30379: MUL
30380: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30381: LD_VAR 0 1
30385: PPUSH
30386: LD_INT 66
30388: PPUSH
30389: CALL_OW 321
30393: PUSH
30394: LD_INT 2
30396: EQUAL
30397: IFFALSE 30414
// bpoints := bpoints * 1.1 ;
30399: LD_ADDR_VAR 0 10
30403: PUSH
30404: LD_VAR 0 10
30408: PUSH
30409: LD_REAL  1.10000000000000E+0000
30412: MUL
30413: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30414: LD_ADDR_VAR 0 10
30418: PUSH
30419: LD_VAR 0 10
30423: PUSH
30424: LD_VAR 0 6
30428: PPUSH
30429: LD_INT 1
30431: PPUSH
30432: CALL_OW 259
30436: PUSH
30437: LD_REAL  1.15000000000000E+0000
30440: MUL
30441: MUL
30442: ST_TO_ADDR
// end ; unit_vehicle :
30443: GO 31273
30445: LD_INT 2
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 31261
30453: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30454: LD_VAR 0 6
30458: PPUSH
30459: CALL_OW 264
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: LD_INT 42
30469: PUSH
30470: LD_INT 24
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: IN
30478: IFFALSE 30499
// points := [ 25 , 5 , 3 ] ;
30480: LD_ADDR_VAR 0 9
30484: PUSH
30485: LD_INT 25
30487: PUSH
30488: LD_INT 5
30490: PUSH
30491: LD_INT 3
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: LIST
30498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30499: LD_VAR 0 6
30503: PPUSH
30504: CALL_OW 264
30508: PUSH
30509: LD_INT 4
30511: PUSH
30512: LD_INT 43
30514: PUSH
30515: LD_INT 25
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: IN
30523: IFFALSE 30544
// points := [ 40 , 15 , 5 ] ;
30525: LD_ADDR_VAR 0 9
30529: PUSH
30530: LD_INT 40
30532: PUSH
30533: LD_INT 15
30535: PUSH
30536: LD_INT 5
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30544: LD_VAR 0 6
30548: PPUSH
30549: CALL_OW 264
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: LD_INT 23
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: IN
30564: IFFALSE 30585
// points := [ 7 , 25 , 8 ] ;
30566: LD_ADDR_VAR 0 9
30570: PUSH
30571: LD_INT 7
30573: PUSH
30574: LD_INT 25
30576: PUSH
30577: LD_INT 8
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30585: LD_VAR 0 6
30589: PPUSH
30590: CALL_OW 264
30594: PUSH
30595: LD_INT 5
30597: PUSH
30598: LD_INT 27
30600: PUSH
30601: LD_INT 44
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: IN
30609: IFFALSE 30630
// points := [ 14 , 50 , 16 ] ;
30611: LD_ADDR_VAR 0 9
30615: PUSH
30616: LD_INT 14
30618: PUSH
30619: LD_INT 50
30621: PUSH
30622: LD_INT 16
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: LIST
30629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30630: LD_VAR 0 6
30634: PPUSH
30635: CALL_OW 264
30639: PUSH
30640: LD_INT 6
30642: PUSH
30643: LD_INT 46
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: IN
30650: IFFALSE 30671
// points := [ 32 , 120 , 70 ] ;
30652: LD_ADDR_VAR 0 9
30656: PUSH
30657: LD_INT 32
30659: PUSH
30660: LD_INT 120
30662: PUSH
30663: LD_INT 70
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30671: LD_VAR 0 6
30675: PPUSH
30676: CALL_OW 264
30680: PUSH
30681: LD_INT 7
30683: PUSH
30684: LD_INT 28
30686: PUSH
30687: LD_INT 45
30689: PUSH
30690: LD_EXP 99
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: IN
30701: IFFALSE 30722
// points := [ 35 , 20 , 45 ] ;
30703: LD_ADDR_VAR 0 9
30707: PUSH
30708: LD_INT 35
30710: PUSH
30711: LD_INT 20
30713: PUSH
30714: LD_INT 45
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30722: LD_VAR 0 6
30726: PPUSH
30727: CALL_OW 264
30731: PUSH
30732: LD_INT 47
30734: PUSH
30735: EMPTY
30736: LIST
30737: IN
30738: IFFALSE 30759
// points := [ 67 , 45 , 75 ] ;
30740: LD_ADDR_VAR 0 9
30744: PUSH
30745: LD_INT 67
30747: PUSH
30748: LD_INT 45
30750: PUSH
30751: LD_INT 75
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30759: LD_VAR 0 6
30763: PPUSH
30764: CALL_OW 264
30768: PUSH
30769: LD_INT 26
30771: PUSH
30772: EMPTY
30773: LIST
30774: IN
30775: IFFALSE 30796
// points := [ 120 , 30 , 80 ] ;
30777: LD_ADDR_VAR 0 9
30781: PUSH
30782: LD_INT 120
30784: PUSH
30785: LD_INT 30
30787: PUSH
30788: LD_INT 80
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30796: LD_VAR 0 6
30800: PPUSH
30801: CALL_OW 264
30805: PUSH
30806: LD_INT 22
30808: PUSH
30809: EMPTY
30810: LIST
30811: IN
30812: IFFALSE 30833
// points := [ 40 , 1 , 1 ] ;
30814: LD_ADDR_VAR 0 9
30818: PUSH
30819: LD_INT 40
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: LIST
30832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30833: LD_VAR 0 6
30837: PPUSH
30838: CALL_OW 264
30842: PUSH
30843: LD_INT 29
30845: PUSH
30846: EMPTY
30847: LIST
30848: IN
30849: IFFALSE 30870
// points := [ 70 , 200 , 400 ] ;
30851: LD_ADDR_VAR 0 9
30855: PUSH
30856: LD_INT 70
30858: PUSH
30859: LD_INT 200
30861: PUSH
30862: LD_INT 400
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30870: LD_VAR 0 6
30874: PPUSH
30875: CALL_OW 264
30879: PUSH
30880: LD_INT 14
30882: PUSH
30883: LD_INT 53
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: IN
30890: IFFALSE 30911
// points := [ 40 , 10 , 20 ] ;
30892: LD_ADDR_VAR 0 9
30896: PUSH
30897: LD_INT 40
30899: PUSH
30900: LD_INT 10
30902: PUSH
30903: LD_INT 20
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30911: LD_VAR 0 6
30915: PPUSH
30916: CALL_OW 264
30920: PUSH
30921: LD_INT 9
30923: PUSH
30924: EMPTY
30925: LIST
30926: IN
30927: IFFALSE 30948
// points := [ 5 , 70 , 20 ] ;
30929: LD_ADDR_VAR 0 9
30933: PUSH
30934: LD_INT 5
30936: PUSH
30937: LD_INT 70
30939: PUSH
30940: LD_INT 20
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: LIST
30947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30948: LD_VAR 0 6
30952: PPUSH
30953: CALL_OW 264
30957: PUSH
30958: LD_INT 10
30960: PUSH
30961: EMPTY
30962: LIST
30963: IN
30964: IFFALSE 30985
// points := [ 35 , 110 , 70 ] ;
30966: LD_ADDR_VAR 0 9
30970: PUSH
30971: LD_INT 35
30973: PUSH
30974: LD_INT 110
30976: PUSH
30977: LD_INT 70
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30985: LD_VAR 0 6
30989: PPUSH
30990: CALL_OW 265
30994: PUSH
30995: LD_INT 25
30997: EQUAL
30998: IFFALSE 31019
// points := [ 80 , 65 , 100 ] ;
31000: LD_ADDR_VAR 0 9
31004: PUSH
31005: LD_INT 80
31007: PUSH
31008: LD_INT 65
31010: PUSH
31011: LD_INT 100
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31019: LD_VAR 0 6
31023: PPUSH
31024: CALL_OW 263
31028: PUSH
31029: LD_INT 1
31031: EQUAL
31032: IFFALSE 31067
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31034: LD_ADDR_VAR 0 10
31038: PUSH
31039: LD_VAR 0 10
31043: PUSH
31044: LD_VAR 0 6
31048: PPUSH
31049: CALL_OW 311
31053: PPUSH
31054: LD_INT 3
31056: PPUSH
31057: CALL_OW 259
31061: PUSH
31062: LD_INT 4
31064: MUL
31065: MUL
31066: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31067: LD_VAR 0 6
31071: PPUSH
31072: CALL_OW 263
31076: PUSH
31077: LD_INT 2
31079: EQUAL
31080: IFFALSE 31131
// begin j := IsControledBy ( i ) ;
31082: LD_ADDR_VAR 0 7
31086: PUSH
31087: LD_VAR 0 6
31091: PPUSH
31092: CALL_OW 312
31096: ST_TO_ADDR
// if j then
31097: LD_VAR 0 7
31101: IFFALSE 31131
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31103: LD_ADDR_VAR 0 10
31107: PUSH
31108: LD_VAR 0 10
31112: PUSH
31113: LD_VAR 0 7
31117: PPUSH
31118: LD_INT 3
31120: PPUSH
31121: CALL_OW 259
31125: PUSH
31126: LD_INT 3
31128: MUL
31129: MUL
31130: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31131: LD_VAR 0 6
31135: PPUSH
31136: CALL_OW 264
31140: PUSH
31141: LD_INT 5
31143: PUSH
31144: LD_INT 6
31146: PUSH
31147: LD_INT 46
31149: PUSH
31150: LD_INT 44
31152: PUSH
31153: LD_INT 47
31155: PUSH
31156: LD_INT 45
31158: PUSH
31159: LD_INT 28
31161: PUSH
31162: LD_INT 7
31164: PUSH
31165: LD_INT 27
31167: PUSH
31168: LD_INT 29
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: IN
31183: PUSH
31184: LD_VAR 0 1
31188: PPUSH
31189: LD_INT 52
31191: PPUSH
31192: CALL_OW 321
31196: PUSH
31197: LD_INT 2
31199: EQUAL
31200: AND
31201: IFFALSE 31218
// bpoints := bpoints * 1.2 ;
31203: LD_ADDR_VAR 0 10
31207: PUSH
31208: LD_VAR 0 10
31212: PUSH
31213: LD_REAL  1.20000000000000E+0000
31216: MUL
31217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31218: LD_VAR 0 6
31222: PPUSH
31223: CALL_OW 264
31227: PUSH
31228: LD_INT 6
31230: PUSH
31231: LD_INT 46
31233: PUSH
31234: LD_INT 47
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: IN
31242: IFFALSE 31259
// bpoints := bpoints * 1.2 ;
31244: LD_ADDR_VAR 0 10
31248: PUSH
31249: LD_VAR 0 10
31253: PUSH
31254: LD_REAL  1.20000000000000E+0000
31257: MUL
31258: ST_TO_ADDR
// end ; unit_building :
31259: GO 31273
31261: LD_INT 3
31263: DOUBLE
31264: EQUAL
31265: IFTRUE 31269
31267: GO 31272
31269: POP
// ; end ;
31270: GO 31273
31272: POP
// for j = 1 to 3 do
31273: LD_ADDR_VAR 0 7
31277: PUSH
31278: DOUBLE
31279: LD_INT 1
31281: DEC
31282: ST_TO_ADDR
31283: LD_INT 3
31285: PUSH
31286: FOR_TO
31287: IFFALSE 31340
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31289: LD_ADDR_VAR 0 5
31293: PUSH
31294: LD_VAR 0 5
31298: PPUSH
31299: LD_VAR 0 7
31303: PPUSH
31304: LD_VAR 0 5
31308: PUSH
31309: LD_VAR 0 7
31313: ARRAY
31314: PUSH
31315: LD_VAR 0 9
31319: PUSH
31320: LD_VAR 0 7
31324: ARRAY
31325: PUSH
31326: LD_VAR 0 10
31330: MUL
31331: PLUS
31332: PPUSH
31333: CALL_OW 1
31337: ST_TO_ADDR
31338: GO 31286
31340: POP
31341: POP
// end ;
31342: GO 29819
31344: POP
31345: POP
// result := Replace ( result , 4 , tmp ) ;
31346: LD_ADDR_VAR 0 5
31350: PUSH
31351: LD_VAR 0 5
31355: PPUSH
31356: LD_INT 4
31358: PPUSH
31359: LD_VAR 0 8
31363: PPUSH
31364: CALL_OW 1
31368: ST_TO_ADDR
// end ;
31369: LD_VAR 0 5
31373: RET
// export function DangerAtRange ( unit , range ) ; begin
31374: LD_INT 0
31376: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_VAR 0 1
31386: PPUSH
31387: CALL_OW 255
31391: PPUSH
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 250
31401: PPUSH
31402: LD_VAR 0 1
31406: PPUSH
31407: CALL_OW 251
31411: PPUSH
31412: LD_VAR 0 2
31416: PPUSH
31417: CALL 29671 0 4
31421: ST_TO_ADDR
// end ;
31422: LD_VAR 0 3
31426: RET
// export function DangerInArea ( side , area ) ; begin
31427: LD_INT 0
31429: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31430: LD_ADDR_VAR 0 3
31434: PUSH
31435: LD_VAR 0 2
31439: PPUSH
31440: LD_INT 81
31442: PUSH
31443: LD_VAR 0 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PPUSH
31452: CALL_OW 70
31456: ST_TO_ADDR
// end ;
31457: LD_VAR 0 3
31461: RET
// export function IsExtension ( b ) ; begin
31462: LD_INT 0
31464: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31465: LD_ADDR_VAR 0 2
31469: PUSH
31470: LD_VAR 0 1
31474: PUSH
31475: LD_INT 23
31477: PUSH
31478: LD_INT 20
31480: PUSH
31481: LD_INT 22
31483: PUSH
31484: LD_INT 17
31486: PUSH
31487: LD_INT 24
31489: PUSH
31490: LD_INT 21
31492: PUSH
31493: LD_INT 19
31495: PUSH
31496: LD_INT 16
31498: PUSH
31499: LD_INT 25
31501: PUSH
31502: LD_INT 18
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: IN
31517: ST_TO_ADDR
// end ;
31518: LD_VAR 0 2
31522: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31523: LD_INT 0
31525: PPUSH
31526: PPUSH
31527: PPUSH
// result := [ ] ;
31528: LD_ADDR_VAR 0 4
31532: PUSH
31533: EMPTY
31534: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31535: LD_ADDR_VAR 0 5
31539: PUSH
31540: LD_VAR 0 2
31544: PPUSH
31545: LD_INT 21
31547: PUSH
31548: LD_INT 3
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PPUSH
31555: CALL_OW 70
31559: ST_TO_ADDR
// if not tmp then
31560: LD_VAR 0 5
31564: NOT
31565: IFFALSE 31569
// exit ;
31567: GO 31633
// if checkLink then
31569: LD_VAR 0 3
31573: IFFALSE 31623
// begin for i in tmp do
31575: LD_ADDR_VAR 0 6
31579: PUSH
31580: LD_VAR 0 5
31584: PUSH
31585: FOR_IN
31586: IFFALSE 31621
// if GetBase ( i ) <> base then
31588: LD_VAR 0 6
31592: PPUSH
31593: CALL_OW 274
31597: PUSH
31598: LD_VAR 0 1
31602: NONEQUAL
31603: IFFALSE 31619
// ComLinkToBase ( base , i ) ;
31605: LD_VAR 0 1
31609: PPUSH
31610: LD_VAR 0 6
31614: PPUSH
31615: CALL_OW 169
31619: GO 31585
31621: POP
31622: POP
// end ; result := tmp ;
31623: LD_ADDR_VAR 0 4
31627: PUSH
31628: LD_VAR 0 5
31632: ST_TO_ADDR
// end ;
31633: LD_VAR 0 4
31637: RET
// export function ComComplete ( units , b ) ; var i ; begin
31638: LD_INT 0
31640: PPUSH
31641: PPUSH
// if not units then
31642: LD_VAR 0 1
31646: NOT
31647: IFFALSE 31651
// exit ;
31649: GO 31741
// for i in units do
31651: LD_ADDR_VAR 0 4
31655: PUSH
31656: LD_VAR 0 1
31660: PUSH
31661: FOR_IN
31662: IFFALSE 31739
// if BuildingStatus ( b ) = bs_build then
31664: LD_VAR 0 2
31668: PPUSH
31669: CALL_OW 461
31673: PUSH
31674: LD_INT 1
31676: EQUAL
31677: IFFALSE 31737
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31679: LD_VAR 0 4
31683: PPUSH
31684: LD_STRING h
31686: PUSH
31687: LD_VAR 0 2
31691: PPUSH
31692: CALL_OW 250
31696: PUSH
31697: LD_VAR 0 2
31701: PPUSH
31702: CALL_OW 251
31706: PUSH
31707: LD_VAR 0 2
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: PPUSH
31733: CALL_OW 446
31737: GO 31661
31739: POP
31740: POP
// end ;
31741: LD_VAR 0 3
31745: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31746: LD_INT 0
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31754: LD_VAR 0 1
31758: NOT
31759: PUSH
31760: LD_VAR 0 1
31764: PPUSH
31765: CALL_OW 263
31769: PUSH
31770: LD_INT 2
31772: NONEQUAL
31773: OR
31774: IFFALSE 31778
// exit ;
31776: GO 32094
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31778: LD_ADDR_VAR 0 6
31782: PUSH
31783: LD_INT 22
31785: PUSH
31786: LD_VAR 0 1
31790: PPUSH
31791: CALL_OW 255
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 2
31802: PUSH
31803: LD_INT 30
31805: PUSH
31806: LD_INT 36
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 34
31815: PUSH
31816: LD_INT 31
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: LIST
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PPUSH
31832: CALL_OW 69
31836: ST_TO_ADDR
// if not tmp then
31837: LD_VAR 0 6
31841: NOT
31842: IFFALSE 31846
// exit ;
31844: GO 32094
// result := [ ] ;
31846: LD_ADDR_VAR 0 2
31850: PUSH
31851: EMPTY
31852: ST_TO_ADDR
// for i in tmp do
31853: LD_ADDR_VAR 0 3
31857: PUSH
31858: LD_VAR 0 6
31862: PUSH
31863: FOR_IN
31864: IFFALSE 31935
// begin t := UnitsInside ( i ) ;
31866: LD_ADDR_VAR 0 4
31870: PUSH
31871: LD_VAR 0 3
31875: PPUSH
31876: CALL_OW 313
31880: ST_TO_ADDR
// if t then
31881: LD_VAR 0 4
31885: IFFALSE 31933
// for j in t do
31887: LD_ADDR_VAR 0 7
31891: PUSH
31892: LD_VAR 0 4
31896: PUSH
31897: FOR_IN
31898: IFFALSE 31931
// result := Replace ( result , result + 1 , j ) ;
31900: LD_ADDR_VAR 0 2
31904: PUSH
31905: LD_VAR 0 2
31909: PPUSH
31910: LD_VAR 0 2
31914: PUSH
31915: LD_INT 1
31917: PLUS
31918: PPUSH
31919: LD_VAR 0 7
31923: PPUSH
31924: CALL_OW 1
31928: ST_TO_ADDR
31929: GO 31897
31931: POP
31932: POP
// end ;
31933: GO 31863
31935: POP
31936: POP
// if not result then
31937: LD_VAR 0 2
31941: NOT
31942: IFFALSE 31946
// exit ;
31944: GO 32094
// mech := result [ 1 ] ;
31946: LD_ADDR_VAR 0 5
31950: PUSH
31951: LD_VAR 0 2
31955: PUSH
31956: LD_INT 1
31958: ARRAY
31959: ST_TO_ADDR
// if result > 1 then
31960: LD_VAR 0 2
31964: PUSH
31965: LD_INT 1
31967: GREATER
31968: IFFALSE 32080
// begin for i = 2 to result do
31970: LD_ADDR_VAR 0 3
31974: PUSH
31975: DOUBLE
31976: LD_INT 2
31978: DEC
31979: ST_TO_ADDR
31980: LD_VAR 0 2
31984: PUSH
31985: FOR_TO
31986: IFFALSE 32078
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31988: LD_ADDR_VAR 0 4
31992: PUSH
31993: LD_VAR 0 2
31997: PUSH
31998: LD_VAR 0 3
32002: ARRAY
32003: PPUSH
32004: LD_INT 3
32006: PPUSH
32007: CALL_OW 259
32011: PUSH
32012: LD_VAR 0 2
32016: PUSH
32017: LD_VAR 0 3
32021: ARRAY
32022: PPUSH
32023: CALL_OW 432
32027: MINUS
32028: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32029: LD_VAR 0 4
32033: PUSH
32034: LD_VAR 0 5
32038: PPUSH
32039: LD_INT 3
32041: PPUSH
32042: CALL_OW 259
32046: PUSH
32047: LD_VAR 0 5
32051: PPUSH
32052: CALL_OW 432
32056: MINUS
32057: GREATEREQUAL
32058: IFFALSE 32076
// mech := result [ i ] ;
32060: LD_ADDR_VAR 0 5
32064: PUSH
32065: LD_VAR 0 2
32069: PUSH
32070: LD_VAR 0 3
32074: ARRAY
32075: ST_TO_ADDR
// end ;
32076: GO 31985
32078: POP
32079: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32080: LD_VAR 0 1
32084: PPUSH
32085: LD_VAR 0 5
32089: PPUSH
32090: CALL_OW 135
// end ;
32094: LD_VAR 0 2
32098: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32099: LD_INT 0
32101: PPUSH
32102: PPUSH
32103: PPUSH
32104: PPUSH
32105: PPUSH
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
// result := [ ] ;
32114: LD_ADDR_VAR 0 7
32118: PUSH
32119: EMPTY
32120: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32121: LD_VAR 0 1
32125: PPUSH
32126: CALL_OW 266
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: IN
32141: NOT
32142: IFFALSE 32146
// exit ;
32144: GO 33780
// if name then
32146: LD_VAR 0 3
32150: IFFALSE 32166
// SetBName ( base_dep , name ) ;
32152: LD_VAR 0 1
32156: PPUSH
32157: LD_VAR 0 3
32161: PPUSH
32162: CALL_OW 500
// base := GetBase ( base_dep ) ;
32166: LD_ADDR_VAR 0 15
32170: PUSH
32171: LD_VAR 0 1
32175: PPUSH
32176: CALL_OW 274
32180: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32181: LD_ADDR_VAR 0 16
32185: PUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: CALL_OW 255
32195: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32196: LD_ADDR_VAR 0 17
32200: PUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: CALL_OW 248
32210: ST_TO_ADDR
// if sources then
32211: LD_VAR 0 5
32215: IFFALSE 32262
// for i = 1 to 3 do
32217: LD_ADDR_VAR 0 8
32221: PUSH
32222: DOUBLE
32223: LD_INT 1
32225: DEC
32226: ST_TO_ADDR
32227: LD_INT 3
32229: PUSH
32230: FOR_TO
32231: IFFALSE 32260
// AddResourceType ( base , i , sources [ i ] ) ;
32233: LD_VAR 0 15
32237: PPUSH
32238: LD_VAR 0 8
32242: PPUSH
32243: LD_VAR 0 5
32247: PUSH
32248: LD_VAR 0 8
32252: ARRAY
32253: PPUSH
32254: CALL_OW 276
32258: GO 32230
32260: POP
32261: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32262: LD_ADDR_VAR 0 18
32266: PUSH
32267: LD_VAR 0 15
32271: PPUSH
32272: LD_VAR 0 2
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: CALL 31523 0 3
32284: ST_TO_ADDR
// InitHc ;
32285: CALL_OW 19
// InitUc ;
32289: CALL_OW 18
// uc_side := side ;
32293: LD_ADDR_OWVAR 20
32297: PUSH
32298: LD_VAR 0 16
32302: ST_TO_ADDR
// uc_nation := nation ;
32303: LD_ADDR_OWVAR 21
32307: PUSH
32308: LD_VAR 0 17
32312: ST_TO_ADDR
// if buildings then
32313: LD_VAR 0 18
32317: IFFALSE 33639
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32319: LD_ADDR_VAR 0 19
32323: PUSH
32324: LD_VAR 0 18
32328: PPUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 30
32334: PUSH
32335: LD_INT 29
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 30
32344: PUSH
32345: LD_INT 30
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: PPUSH
32357: CALL_OW 72
32361: ST_TO_ADDR
// if tmp then
32362: LD_VAR 0 19
32366: IFFALSE 32414
// for i in tmp do
32368: LD_ADDR_VAR 0 8
32372: PUSH
32373: LD_VAR 0 19
32377: PUSH
32378: FOR_IN
32379: IFFALSE 32412
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32381: LD_VAR 0 8
32385: PPUSH
32386: CALL_OW 250
32390: PPUSH
32391: LD_VAR 0 8
32395: PPUSH
32396: CALL_OW 251
32400: PPUSH
32401: LD_VAR 0 16
32405: PPUSH
32406: CALL_OW 441
32410: GO 32378
32412: POP
32413: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32414: LD_VAR 0 18
32418: PPUSH
32419: LD_INT 2
32421: PUSH
32422: LD_INT 30
32424: PUSH
32425: LD_INT 32
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 30
32434: PUSH
32435: LD_INT 33
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: PPUSH
32447: CALL_OW 72
32451: IFFALSE 32539
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32453: LD_ADDR_VAR 0 8
32457: PUSH
32458: LD_VAR 0 18
32462: PPUSH
32463: LD_INT 2
32465: PUSH
32466: LD_INT 30
32468: PUSH
32469: LD_INT 32
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 30
32478: PUSH
32479: LD_INT 33
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: LIST
32490: PPUSH
32491: CALL_OW 72
32495: PUSH
32496: FOR_IN
32497: IFFALSE 32537
// begin if not GetBWeapon ( i ) then
32499: LD_VAR 0 8
32503: PPUSH
32504: CALL_OW 269
32508: NOT
32509: IFFALSE 32535
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32511: LD_VAR 0 8
32515: PPUSH
32516: LD_VAR 0 8
32520: PPUSH
32521: LD_VAR 0 2
32525: PPUSH
32526: CALL 33785 0 2
32530: PPUSH
32531: CALL_OW 431
// end ;
32535: GO 32496
32537: POP
32538: POP
// end ; for i = 1 to personel do
32539: LD_ADDR_VAR 0 8
32543: PUSH
32544: DOUBLE
32545: LD_INT 1
32547: DEC
32548: ST_TO_ADDR
32549: LD_VAR 0 6
32553: PUSH
32554: FOR_TO
32555: IFFALSE 33619
// begin if i > 4 then
32557: LD_VAR 0 8
32561: PUSH
32562: LD_INT 4
32564: GREATER
32565: IFFALSE 32569
// break ;
32567: GO 33619
// case i of 1 :
32569: LD_VAR 0 8
32573: PUSH
32574: LD_INT 1
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32662
32582: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32583: LD_ADDR_VAR 0 12
32587: PUSH
32588: LD_VAR 0 18
32592: PPUSH
32593: LD_INT 22
32595: PUSH
32596: LD_VAR 0 16
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 58
32607: PUSH
32608: EMPTY
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: LD_INT 30
32616: PUSH
32617: LD_INT 32
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 30
32626: PUSH
32627: LD_INT 4
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 30
32636: PUSH
32637: LD_INT 5
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: PPUSH
32655: CALL_OW 72
32659: ST_TO_ADDR
32660: GO 32884
32662: LD_INT 2
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32732
32670: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32671: LD_ADDR_VAR 0 12
32675: PUSH
32676: LD_VAR 0 18
32680: PPUSH
32681: LD_INT 22
32683: PUSH
32684: LD_VAR 0 16
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: LD_INT 30
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 30
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: LIST
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PPUSH
32725: CALL_OW 72
32729: ST_TO_ADDR
32730: GO 32884
32732: LD_INT 3
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32802
32740: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32741: LD_ADDR_VAR 0 12
32745: PUSH
32746: LD_VAR 0 18
32750: PPUSH
32751: LD_INT 22
32753: PUSH
32754: LD_VAR 0 16
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: LD_INT 30
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 30
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PPUSH
32795: CALL_OW 72
32799: ST_TO_ADDR
32800: GO 32884
32802: LD_INT 4
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 32883
32810: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32811: LD_ADDR_VAR 0 12
32815: PUSH
32816: LD_VAR 0 18
32820: PPUSH
32821: LD_INT 22
32823: PUSH
32824: LD_VAR 0 16
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 30
32838: PUSH
32839: LD_INT 6
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 30
32848: PUSH
32849: LD_INT 7
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 30
32858: PUSH
32859: LD_INT 8
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PPUSH
32876: CALL_OW 72
32880: ST_TO_ADDR
32881: GO 32884
32883: POP
// if i = 1 then
32884: LD_VAR 0 8
32888: PUSH
32889: LD_INT 1
32891: EQUAL
32892: IFFALSE 33003
// begin tmp := [ ] ;
32894: LD_ADDR_VAR 0 19
32898: PUSH
32899: EMPTY
32900: ST_TO_ADDR
// for j in f do
32901: LD_ADDR_VAR 0 9
32905: PUSH
32906: LD_VAR 0 12
32910: PUSH
32911: FOR_IN
32912: IFFALSE 32985
// if GetBType ( j ) = b_bunker then
32914: LD_VAR 0 9
32918: PPUSH
32919: CALL_OW 266
32923: PUSH
32924: LD_INT 32
32926: EQUAL
32927: IFFALSE 32954
// tmp := Insert ( tmp , 1 , j ) else
32929: LD_ADDR_VAR 0 19
32933: PUSH
32934: LD_VAR 0 19
32938: PPUSH
32939: LD_INT 1
32941: PPUSH
32942: LD_VAR 0 9
32946: PPUSH
32947: CALL_OW 2
32951: ST_TO_ADDR
32952: GO 32983
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32954: LD_ADDR_VAR 0 19
32958: PUSH
32959: LD_VAR 0 19
32963: PPUSH
32964: LD_VAR 0 19
32968: PUSH
32969: LD_INT 1
32971: PLUS
32972: PPUSH
32973: LD_VAR 0 9
32977: PPUSH
32978: CALL_OW 2
32982: ST_TO_ADDR
32983: GO 32911
32985: POP
32986: POP
// if tmp then
32987: LD_VAR 0 19
32991: IFFALSE 33003
// f := tmp ;
32993: LD_ADDR_VAR 0 12
32997: PUSH
32998: LD_VAR 0 19
33002: ST_TO_ADDR
// end ; x := personel [ i ] ;
33003: LD_ADDR_VAR 0 13
33007: PUSH
33008: LD_VAR 0 6
33012: PUSH
33013: LD_VAR 0 8
33017: ARRAY
33018: ST_TO_ADDR
// if x = - 1 then
33019: LD_VAR 0 13
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: EQUAL
33028: IFFALSE 33237
// begin for j in f do
33030: LD_ADDR_VAR 0 9
33034: PUSH
33035: LD_VAR 0 12
33039: PUSH
33040: FOR_IN
33041: IFFALSE 33233
// repeat InitHc ;
33043: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33047: LD_VAR 0 9
33051: PPUSH
33052: CALL_OW 266
33056: PUSH
33057: LD_INT 5
33059: EQUAL
33060: IFFALSE 33130
// begin if UnitsInside ( j ) < 3 then
33062: LD_VAR 0 9
33066: PPUSH
33067: CALL_OW 313
33071: PUSH
33072: LD_INT 3
33074: LESS
33075: IFFALSE 33111
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33077: LD_INT 0
33079: PPUSH
33080: LD_INT 5
33082: PUSH
33083: LD_INT 8
33085: PUSH
33086: LD_INT 9
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: LIST
33093: PUSH
33094: LD_VAR 0 17
33098: ARRAY
33099: PPUSH
33100: LD_VAR 0 4
33104: PPUSH
33105: CALL_OW 380
33109: GO 33128
// PrepareHuman ( false , i , skill ) ;
33111: LD_INT 0
33113: PPUSH
33114: LD_VAR 0 8
33118: PPUSH
33119: LD_VAR 0 4
33123: PPUSH
33124: CALL_OW 380
// end else
33128: GO 33147
// PrepareHuman ( false , i , skill ) ;
33130: LD_INT 0
33132: PPUSH
33133: LD_VAR 0 8
33137: PPUSH
33138: LD_VAR 0 4
33142: PPUSH
33143: CALL_OW 380
// un := CreateHuman ;
33147: LD_ADDR_VAR 0 14
33151: PUSH
33152: CALL_OW 44
33156: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33157: LD_ADDR_VAR 0 7
33161: PUSH
33162: LD_VAR 0 7
33166: PPUSH
33167: LD_INT 1
33169: PPUSH
33170: LD_VAR 0 14
33174: PPUSH
33175: CALL_OW 2
33179: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33180: LD_VAR 0 14
33184: PPUSH
33185: LD_VAR 0 9
33189: PPUSH
33190: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33194: LD_VAR 0 9
33198: PPUSH
33199: CALL_OW 313
33203: PUSH
33204: LD_INT 6
33206: EQUAL
33207: PUSH
33208: LD_VAR 0 9
33212: PPUSH
33213: CALL_OW 266
33217: PUSH
33218: LD_INT 32
33220: PUSH
33221: LD_INT 31
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: IN
33228: OR
33229: IFFALSE 33043
33231: GO 33040
33233: POP
33234: POP
// end else
33235: GO 33617
// for j = 1 to x do
33237: LD_ADDR_VAR 0 9
33241: PUSH
33242: DOUBLE
33243: LD_INT 1
33245: DEC
33246: ST_TO_ADDR
33247: LD_VAR 0 13
33251: PUSH
33252: FOR_TO
33253: IFFALSE 33615
// begin InitHc ;
33255: CALL_OW 19
// if not f then
33259: LD_VAR 0 12
33263: NOT
33264: IFFALSE 33353
// begin PrepareHuman ( false , i , skill ) ;
33266: LD_INT 0
33268: PPUSH
33269: LD_VAR 0 8
33273: PPUSH
33274: LD_VAR 0 4
33278: PPUSH
33279: CALL_OW 380
// un := CreateHuman ;
33283: LD_ADDR_VAR 0 14
33287: PUSH
33288: CALL_OW 44
33292: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33293: LD_ADDR_VAR 0 7
33297: PUSH
33298: LD_VAR 0 7
33302: PPUSH
33303: LD_INT 1
33305: PPUSH
33306: LD_VAR 0 14
33310: PPUSH
33311: CALL_OW 2
33315: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33316: LD_VAR 0 14
33320: PPUSH
33321: LD_VAR 0 1
33325: PPUSH
33326: CALL_OW 250
33330: PPUSH
33331: LD_VAR 0 1
33335: PPUSH
33336: CALL_OW 251
33340: PPUSH
33341: LD_INT 10
33343: PPUSH
33344: LD_INT 0
33346: PPUSH
33347: CALL_OW 50
// continue ;
33351: GO 33252
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33353: LD_VAR 0 12
33357: PUSH
33358: LD_INT 1
33360: ARRAY
33361: PPUSH
33362: CALL_OW 313
33366: PUSH
33367: LD_VAR 0 12
33371: PUSH
33372: LD_INT 1
33374: ARRAY
33375: PPUSH
33376: CALL_OW 266
33380: PUSH
33381: LD_INT 32
33383: PUSH
33384: LD_INT 31
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: IN
33391: AND
33392: PUSH
33393: LD_VAR 0 12
33397: PUSH
33398: LD_INT 1
33400: ARRAY
33401: PPUSH
33402: CALL_OW 313
33406: PUSH
33407: LD_INT 6
33409: EQUAL
33410: OR
33411: IFFALSE 33431
// f := Delete ( f , 1 ) ;
33413: LD_ADDR_VAR 0 12
33417: PUSH
33418: LD_VAR 0 12
33422: PPUSH
33423: LD_INT 1
33425: PPUSH
33426: CALL_OW 3
33430: ST_TO_ADDR
// if not f then
33431: LD_VAR 0 12
33435: NOT
33436: IFFALSE 33454
// begin x := x + 2 ;
33438: LD_ADDR_VAR 0 13
33442: PUSH
33443: LD_VAR 0 13
33447: PUSH
33448: LD_INT 2
33450: PLUS
33451: ST_TO_ADDR
// continue ;
33452: GO 33252
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33454: LD_VAR 0 12
33458: PUSH
33459: LD_INT 1
33461: ARRAY
33462: PPUSH
33463: CALL_OW 266
33467: PUSH
33468: LD_INT 5
33470: EQUAL
33471: IFFALSE 33545
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33473: LD_VAR 0 12
33477: PUSH
33478: LD_INT 1
33480: ARRAY
33481: PPUSH
33482: CALL_OW 313
33486: PUSH
33487: LD_INT 3
33489: LESS
33490: IFFALSE 33526
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33492: LD_INT 0
33494: PPUSH
33495: LD_INT 5
33497: PUSH
33498: LD_INT 8
33500: PUSH
33501: LD_INT 9
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: LIST
33508: PUSH
33509: LD_VAR 0 17
33513: ARRAY
33514: PPUSH
33515: LD_VAR 0 4
33519: PPUSH
33520: CALL_OW 380
33524: GO 33543
// PrepareHuman ( false , i , skill ) ;
33526: LD_INT 0
33528: PPUSH
33529: LD_VAR 0 8
33533: PPUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: CALL_OW 380
// end else
33543: GO 33562
// PrepareHuman ( false , i , skill ) ;
33545: LD_INT 0
33547: PPUSH
33548: LD_VAR 0 8
33552: PPUSH
33553: LD_VAR 0 4
33557: PPUSH
33558: CALL_OW 380
// un := CreateHuman ;
33562: LD_ADDR_VAR 0 14
33566: PUSH
33567: CALL_OW 44
33571: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33572: LD_ADDR_VAR 0 7
33576: PUSH
33577: LD_VAR 0 7
33581: PPUSH
33582: LD_INT 1
33584: PPUSH
33585: LD_VAR 0 14
33589: PPUSH
33590: CALL_OW 2
33594: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33595: LD_VAR 0 14
33599: PPUSH
33600: LD_VAR 0 12
33604: PUSH
33605: LD_INT 1
33607: ARRAY
33608: PPUSH
33609: CALL_OW 52
// end ;
33613: GO 33252
33615: POP
33616: POP
// end ;
33617: GO 32554
33619: POP
33620: POP
// result := result ^ buildings ;
33621: LD_ADDR_VAR 0 7
33625: PUSH
33626: LD_VAR 0 7
33630: PUSH
33631: LD_VAR 0 18
33635: ADD
33636: ST_TO_ADDR
// end else
33637: GO 33780
// begin for i = 1 to personel do
33639: LD_ADDR_VAR 0 8
33643: PUSH
33644: DOUBLE
33645: LD_INT 1
33647: DEC
33648: ST_TO_ADDR
33649: LD_VAR 0 6
33653: PUSH
33654: FOR_TO
33655: IFFALSE 33778
// begin if i > 4 then
33657: LD_VAR 0 8
33661: PUSH
33662: LD_INT 4
33664: GREATER
33665: IFFALSE 33669
// break ;
33667: GO 33778
// x := personel [ i ] ;
33669: LD_ADDR_VAR 0 13
33673: PUSH
33674: LD_VAR 0 6
33678: PUSH
33679: LD_VAR 0 8
33683: ARRAY
33684: ST_TO_ADDR
// if x = - 1 then
33685: LD_VAR 0 13
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: EQUAL
33694: IFFALSE 33698
// continue ;
33696: GO 33654
// PrepareHuman ( false , i , skill ) ;
33698: LD_INT 0
33700: PPUSH
33701: LD_VAR 0 8
33705: PPUSH
33706: LD_VAR 0 4
33710: PPUSH
33711: CALL_OW 380
// un := CreateHuman ;
33715: LD_ADDR_VAR 0 14
33719: PUSH
33720: CALL_OW 44
33724: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33725: LD_VAR 0 14
33729: PPUSH
33730: LD_VAR 0 1
33734: PPUSH
33735: CALL_OW 250
33739: PPUSH
33740: LD_VAR 0 1
33744: PPUSH
33745: CALL_OW 251
33749: PPUSH
33750: LD_INT 10
33752: PPUSH
33753: LD_INT 0
33755: PPUSH
33756: CALL_OW 50
// result := result ^ un ;
33760: LD_ADDR_VAR 0 7
33764: PUSH
33765: LD_VAR 0 7
33769: PUSH
33770: LD_VAR 0 14
33774: ADD
33775: ST_TO_ADDR
// end ;
33776: GO 33654
33778: POP
33779: POP
// end ; end ;
33780: LD_VAR 0 7
33784: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33785: LD_INT 0
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
33794: PPUSH
33795: PPUSH
33796: PPUSH
33797: PPUSH
33798: PPUSH
33799: PPUSH
33800: PPUSH
33801: PPUSH
33802: PPUSH
// result := false ;
33803: LD_ADDR_VAR 0 3
33807: PUSH
33808: LD_INT 0
33810: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33811: LD_VAR 0 1
33815: NOT
33816: PUSH
33817: LD_VAR 0 1
33821: PPUSH
33822: CALL_OW 266
33826: PUSH
33827: LD_INT 32
33829: PUSH
33830: LD_INT 33
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: IN
33837: NOT
33838: OR
33839: IFFALSE 33843
// exit ;
33841: GO 34952
// nat := GetNation ( tower ) ;
33843: LD_ADDR_VAR 0 12
33847: PUSH
33848: LD_VAR 0 1
33852: PPUSH
33853: CALL_OW 248
33857: ST_TO_ADDR
// side := GetSide ( tower ) ;
33858: LD_ADDR_VAR 0 16
33862: PUSH
33863: LD_VAR 0 1
33867: PPUSH
33868: CALL_OW 255
33872: ST_TO_ADDR
// x := GetX ( tower ) ;
33873: LD_ADDR_VAR 0 10
33877: PUSH
33878: LD_VAR 0 1
33882: PPUSH
33883: CALL_OW 250
33887: ST_TO_ADDR
// y := GetY ( tower ) ;
33888: LD_ADDR_VAR 0 11
33892: PUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL_OW 251
33902: ST_TO_ADDR
// if not x or not y then
33903: LD_VAR 0 10
33907: NOT
33908: PUSH
33909: LD_VAR 0 11
33913: NOT
33914: OR
33915: IFFALSE 33919
// exit ;
33917: GO 34952
// weapon := 0 ;
33919: LD_ADDR_VAR 0 18
33923: PUSH
33924: LD_INT 0
33926: ST_TO_ADDR
// fac_list := [ ] ;
33927: LD_ADDR_VAR 0 17
33931: PUSH
33932: EMPTY
33933: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33934: LD_ADDR_VAR 0 6
33938: PUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: CALL_OW 274
33948: PPUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: LD_INT 0
33956: PPUSH
33957: CALL 31523 0 3
33961: PPUSH
33962: LD_INT 30
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PPUSH
33972: CALL_OW 72
33976: ST_TO_ADDR
// if not factories then
33977: LD_VAR 0 6
33981: NOT
33982: IFFALSE 33986
// exit ;
33984: GO 34952
// for i in factories do
33986: LD_ADDR_VAR 0 8
33990: PUSH
33991: LD_VAR 0 6
33995: PUSH
33996: FOR_IN
33997: IFFALSE 34022
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33999: LD_ADDR_VAR 0 17
34003: PUSH
34004: LD_VAR 0 17
34008: PUSH
34009: LD_VAR 0 8
34013: PPUSH
34014: CALL_OW 478
34018: UNION
34019: ST_TO_ADDR
34020: GO 33996
34022: POP
34023: POP
// if not fac_list then
34024: LD_VAR 0 17
34028: NOT
34029: IFFALSE 34033
// exit ;
34031: GO 34952
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34033: LD_ADDR_VAR 0 5
34037: PUSH
34038: LD_INT 4
34040: PUSH
34041: LD_INT 5
34043: PUSH
34044: LD_INT 9
34046: PUSH
34047: LD_INT 10
34049: PUSH
34050: LD_INT 6
34052: PUSH
34053: LD_INT 7
34055: PUSH
34056: LD_INT 11
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 27
34070: PUSH
34071: LD_INT 28
34073: PUSH
34074: LD_INT 26
34076: PUSH
34077: LD_INT 30
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 43
34088: PUSH
34089: LD_INT 44
34091: PUSH
34092: LD_INT 46
34094: PUSH
34095: LD_INT 45
34097: PUSH
34098: LD_INT 47
34100: PUSH
34101: LD_INT 49
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: LIST
34116: PUSH
34117: LD_VAR 0 12
34121: ARRAY
34122: ST_TO_ADDR
// list := list isect fac_list ;
34123: LD_ADDR_VAR 0 5
34127: PUSH
34128: LD_VAR 0 5
34132: PUSH
34133: LD_VAR 0 17
34137: ISECT
34138: ST_TO_ADDR
// if not list then
34139: LD_VAR 0 5
34143: NOT
34144: IFFALSE 34148
// exit ;
34146: GO 34952
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34148: LD_VAR 0 12
34152: PUSH
34153: LD_INT 3
34155: EQUAL
34156: PUSH
34157: LD_INT 49
34159: PUSH
34160: LD_VAR 0 5
34164: IN
34165: AND
34166: PUSH
34167: LD_INT 31
34169: PPUSH
34170: LD_VAR 0 16
34174: PPUSH
34175: CALL_OW 321
34179: PUSH
34180: LD_INT 2
34182: EQUAL
34183: AND
34184: IFFALSE 34244
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34186: LD_INT 22
34188: PUSH
34189: LD_VAR 0 16
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 35
34200: PUSH
34201: LD_INT 49
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 91
34210: PUSH
34211: LD_VAR 0 1
34215: PUSH
34216: LD_INT 10
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: PPUSH
34229: CALL_OW 69
34233: NOT
34234: IFFALSE 34244
// weapon := ru_time_lapser ;
34236: LD_ADDR_VAR 0 18
34240: PUSH
34241: LD_INT 49
34243: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34244: LD_VAR 0 12
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: IN
34259: PUSH
34260: LD_INT 11
34262: PUSH
34263: LD_VAR 0 5
34267: IN
34268: PUSH
34269: LD_INT 30
34271: PUSH
34272: LD_VAR 0 5
34276: IN
34277: OR
34278: AND
34279: PUSH
34280: LD_INT 6
34282: PPUSH
34283: LD_VAR 0 16
34287: PPUSH
34288: CALL_OW 321
34292: PUSH
34293: LD_INT 2
34295: EQUAL
34296: AND
34297: IFFALSE 34462
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34299: LD_INT 22
34301: PUSH
34302: LD_VAR 0 16
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 35
34316: PUSH
34317: LD_INT 11
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 35
34326: PUSH
34327: LD_INT 30
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 91
34341: PUSH
34342: LD_VAR 0 1
34346: PUSH
34347: LD_INT 18
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: PPUSH
34360: CALL_OW 69
34364: NOT
34365: PUSH
34366: LD_INT 22
34368: PUSH
34369: LD_VAR 0 16
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 30
34383: PUSH
34384: LD_INT 32
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 30
34393: PUSH
34394: LD_INT 33
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 91
34408: PUSH
34409: LD_VAR 0 1
34413: PUSH
34414: LD_INT 12
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: PUSH
34427: EMPTY
34428: LIST
34429: PPUSH
34430: CALL_OW 69
34434: PUSH
34435: LD_INT 2
34437: GREATER
34438: AND
34439: IFFALSE 34462
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34441: LD_ADDR_VAR 0 18
34445: PUSH
34446: LD_INT 11
34448: PUSH
34449: LD_INT 30
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_VAR 0 12
34460: ARRAY
34461: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34462: LD_VAR 0 18
34466: NOT
34467: PUSH
34468: LD_INT 40
34470: PPUSH
34471: LD_VAR 0 16
34475: PPUSH
34476: CALL_OW 321
34480: PUSH
34481: LD_INT 2
34483: EQUAL
34484: AND
34485: PUSH
34486: LD_INT 7
34488: PUSH
34489: LD_VAR 0 5
34493: IN
34494: PUSH
34495: LD_INT 28
34497: PUSH
34498: LD_VAR 0 5
34502: IN
34503: OR
34504: PUSH
34505: LD_INT 45
34507: PUSH
34508: LD_VAR 0 5
34512: IN
34513: OR
34514: AND
34515: IFFALSE 34769
// begin hex := GetHexInfo ( x , y ) ;
34517: LD_ADDR_VAR 0 4
34521: PUSH
34522: LD_VAR 0 10
34526: PPUSH
34527: LD_VAR 0 11
34531: PPUSH
34532: CALL_OW 546
34536: ST_TO_ADDR
// if hex [ 1 ] then
34537: LD_VAR 0 4
34541: PUSH
34542: LD_INT 1
34544: ARRAY
34545: IFFALSE 34549
// exit ;
34547: GO 34952
// height := hex [ 2 ] ;
34549: LD_ADDR_VAR 0 15
34553: PUSH
34554: LD_VAR 0 4
34558: PUSH
34559: LD_INT 2
34561: ARRAY
34562: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34563: LD_ADDR_VAR 0 14
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: LD_INT 3
34576: PUSH
34577: LD_INT 5
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
// for i in tmp do
34586: LD_ADDR_VAR 0 8
34590: PUSH
34591: LD_VAR 0 14
34595: PUSH
34596: FOR_IN
34597: IFFALSE 34767
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34599: LD_ADDR_VAR 0 9
34603: PUSH
34604: LD_VAR 0 10
34608: PPUSH
34609: LD_VAR 0 8
34613: PPUSH
34614: LD_INT 5
34616: PPUSH
34617: CALL_OW 272
34621: PUSH
34622: LD_VAR 0 11
34626: PPUSH
34627: LD_VAR 0 8
34631: PPUSH
34632: LD_INT 5
34634: PPUSH
34635: CALL_OW 273
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34644: LD_VAR 0 9
34648: PUSH
34649: LD_INT 1
34651: ARRAY
34652: PPUSH
34653: LD_VAR 0 9
34657: PUSH
34658: LD_INT 2
34660: ARRAY
34661: PPUSH
34662: CALL_OW 488
34666: IFFALSE 34765
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34668: LD_ADDR_VAR 0 4
34672: PUSH
34673: LD_VAR 0 9
34677: PUSH
34678: LD_INT 1
34680: ARRAY
34681: PPUSH
34682: LD_VAR 0 9
34686: PUSH
34687: LD_INT 2
34689: ARRAY
34690: PPUSH
34691: CALL_OW 546
34695: ST_TO_ADDR
// if hex [ 1 ] then
34696: LD_VAR 0 4
34700: PUSH
34701: LD_INT 1
34703: ARRAY
34704: IFFALSE 34708
// continue ;
34706: GO 34596
// h := hex [ 2 ] ;
34708: LD_ADDR_VAR 0 13
34712: PUSH
34713: LD_VAR 0 4
34717: PUSH
34718: LD_INT 2
34720: ARRAY
34721: ST_TO_ADDR
// if h + 7 < height then
34722: LD_VAR 0 13
34726: PUSH
34727: LD_INT 7
34729: PLUS
34730: PUSH
34731: LD_VAR 0 15
34735: LESS
34736: IFFALSE 34765
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34738: LD_ADDR_VAR 0 18
34742: PUSH
34743: LD_INT 7
34745: PUSH
34746: LD_INT 28
34748: PUSH
34749: LD_INT 45
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: PUSH
34757: LD_VAR 0 12
34761: ARRAY
34762: ST_TO_ADDR
// break ;
34763: GO 34767
// end ; end ; end ;
34765: GO 34596
34767: POP
34768: POP
// end ; if not weapon then
34769: LD_VAR 0 18
34773: NOT
34774: IFFALSE 34834
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34776: LD_ADDR_VAR 0 5
34780: PUSH
34781: LD_VAR 0 5
34785: PUSH
34786: LD_INT 11
34788: PUSH
34789: LD_INT 30
34791: PUSH
34792: LD_INT 49
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: DIFF
34800: ST_TO_ADDR
// if not list then
34801: LD_VAR 0 5
34805: NOT
34806: IFFALSE 34810
// exit ;
34808: GO 34952
// weapon := list [ rand ( 1 , list ) ] ;
34810: LD_ADDR_VAR 0 18
34814: PUSH
34815: LD_VAR 0 5
34819: PUSH
34820: LD_INT 1
34822: PPUSH
34823: LD_VAR 0 5
34827: PPUSH
34828: CALL_OW 12
34832: ARRAY
34833: ST_TO_ADDR
// end ; if weapon then
34834: LD_VAR 0 18
34838: IFFALSE 34952
// begin tmp := CostOfWeapon ( weapon ) ;
34840: LD_ADDR_VAR 0 14
34844: PUSH
34845: LD_VAR 0 18
34849: PPUSH
34850: CALL_OW 451
34854: ST_TO_ADDR
// j := GetBase ( tower ) ;
34855: LD_ADDR_VAR 0 9
34859: PUSH
34860: LD_VAR 0 1
34864: PPUSH
34865: CALL_OW 274
34869: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34870: LD_VAR 0 9
34874: PPUSH
34875: LD_INT 1
34877: PPUSH
34878: CALL_OW 275
34882: PUSH
34883: LD_VAR 0 14
34887: PUSH
34888: LD_INT 1
34890: ARRAY
34891: GREATEREQUAL
34892: PUSH
34893: LD_VAR 0 9
34897: PPUSH
34898: LD_INT 2
34900: PPUSH
34901: CALL_OW 275
34905: PUSH
34906: LD_VAR 0 14
34910: PUSH
34911: LD_INT 2
34913: ARRAY
34914: GREATEREQUAL
34915: AND
34916: PUSH
34917: LD_VAR 0 9
34921: PPUSH
34922: LD_INT 3
34924: PPUSH
34925: CALL_OW 275
34929: PUSH
34930: LD_VAR 0 14
34934: PUSH
34935: LD_INT 3
34937: ARRAY
34938: GREATEREQUAL
34939: AND
34940: IFFALSE 34952
// result := weapon ;
34942: LD_ADDR_VAR 0 3
34946: PUSH
34947: LD_VAR 0 18
34951: ST_TO_ADDR
// end ; end ;
34952: LD_VAR 0 3
34956: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34957: LD_INT 0
34959: PPUSH
34960: PPUSH
// result := true ;
34961: LD_ADDR_VAR 0 3
34965: PUSH
34966: LD_INT 1
34968: ST_TO_ADDR
// if array1 = array2 then
34969: LD_VAR 0 1
34973: PUSH
34974: LD_VAR 0 2
34978: EQUAL
34979: IFFALSE 35039
// begin for i = 1 to array1 do
34981: LD_ADDR_VAR 0 4
34985: PUSH
34986: DOUBLE
34987: LD_INT 1
34989: DEC
34990: ST_TO_ADDR
34991: LD_VAR 0 1
34995: PUSH
34996: FOR_TO
34997: IFFALSE 35035
// if array1 [ i ] <> array2 [ i ] then
34999: LD_VAR 0 1
35003: PUSH
35004: LD_VAR 0 4
35008: ARRAY
35009: PUSH
35010: LD_VAR 0 2
35014: PUSH
35015: LD_VAR 0 4
35019: ARRAY
35020: NONEQUAL
35021: IFFALSE 35033
// begin result := false ;
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_INT 0
35030: ST_TO_ADDR
// break ;
35031: GO 35035
// end ;
35033: GO 34996
35035: POP
35036: POP
// end else
35037: GO 35047
// result := false ;
35039: LD_ADDR_VAR 0 3
35043: PUSH
35044: LD_INT 0
35046: ST_TO_ADDR
// end ;
35047: LD_VAR 0 3
35051: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35052: LD_INT 0
35054: PPUSH
35055: PPUSH
// if not array1 or not array2 then
35056: LD_VAR 0 1
35060: NOT
35061: PUSH
35062: LD_VAR 0 2
35066: NOT
35067: OR
35068: IFFALSE 35072
// exit ;
35070: GO 35136
// result := true ;
35072: LD_ADDR_VAR 0 3
35076: PUSH
35077: LD_INT 1
35079: ST_TO_ADDR
// for i = 1 to array1 do
35080: LD_ADDR_VAR 0 4
35084: PUSH
35085: DOUBLE
35086: LD_INT 1
35088: DEC
35089: ST_TO_ADDR
35090: LD_VAR 0 1
35094: PUSH
35095: FOR_TO
35096: IFFALSE 35134
// if array1 [ i ] <> array2 [ i ] then
35098: LD_VAR 0 1
35102: PUSH
35103: LD_VAR 0 4
35107: ARRAY
35108: PUSH
35109: LD_VAR 0 2
35113: PUSH
35114: LD_VAR 0 4
35118: ARRAY
35119: NONEQUAL
35120: IFFALSE 35132
// begin result := false ;
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_INT 0
35129: ST_TO_ADDR
// break ;
35130: GO 35134
// end ;
35132: GO 35095
35134: POP
35135: POP
// end ;
35136: LD_VAR 0 3
35140: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35141: LD_INT 0
35143: PPUSH
35144: PPUSH
35145: PPUSH
// pom := GetBase ( fac ) ;
35146: LD_ADDR_VAR 0 5
35150: PUSH
35151: LD_VAR 0 1
35155: PPUSH
35156: CALL_OW 274
35160: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35161: LD_ADDR_VAR 0 4
35165: PUSH
35166: LD_VAR 0 2
35170: PUSH
35171: LD_INT 1
35173: ARRAY
35174: PPUSH
35175: LD_VAR 0 2
35179: PUSH
35180: LD_INT 2
35182: ARRAY
35183: PPUSH
35184: LD_VAR 0 2
35188: PUSH
35189: LD_INT 3
35191: ARRAY
35192: PPUSH
35193: LD_VAR 0 2
35197: PUSH
35198: LD_INT 4
35200: ARRAY
35201: PPUSH
35202: CALL_OW 449
35206: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35207: LD_ADDR_VAR 0 3
35211: PUSH
35212: LD_VAR 0 5
35216: PPUSH
35217: LD_INT 1
35219: PPUSH
35220: CALL_OW 275
35224: PUSH
35225: LD_VAR 0 4
35229: PUSH
35230: LD_INT 1
35232: ARRAY
35233: GREATEREQUAL
35234: PUSH
35235: LD_VAR 0 5
35239: PPUSH
35240: LD_INT 2
35242: PPUSH
35243: CALL_OW 275
35247: PUSH
35248: LD_VAR 0 4
35252: PUSH
35253: LD_INT 2
35255: ARRAY
35256: GREATEREQUAL
35257: AND
35258: PUSH
35259: LD_VAR 0 5
35263: PPUSH
35264: LD_INT 3
35266: PPUSH
35267: CALL_OW 275
35271: PUSH
35272: LD_VAR 0 4
35276: PUSH
35277: LD_INT 3
35279: ARRAY
35280: GREATEREQUAL
35281: AND
35282: ST_TO_ADDR
// end ;
35283: LD_VAR 0 3
35287: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35288: LD_INT 0
35290: PPUSH
35291: PPUSH
35292: PPUSH
35293: PPUSH
// pom := GetBase ( building ) ;
35294: LD_ADDR_VAR 0 3
35298: PUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL_OW 274
35308: ST_TO_ADDR
// if not pom then
35309: LD_VAR 0 3
35313: NOT
35314: IFFALSE 35318
// exit ;
35316: GO 35488
// btype := GetBType ( building ) ;
35318: LD_ADDR_VAR 0 5
35322: PUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 266
35332: ST_TO_ADDR
// if btype = b_armoury then
35333: LD_VAR 0 5
35337: PUSH
35338: LD_INT 4
35340: EQUAL
35341: IFFALSE 35351
// btype := b_barracks ;
35343: LD_ADDR_VAR 0 5
35347: PUSH
35348: LD_INT 5
35350: ST_TO_ADDR
// if btype = b_depot then
35351: LD_VAR 0 5
35355: PUSH
35356: LD_INT 0
35358: EQUAL
35359: IFFALSE 35369
// btype := b_warehouse ;
35361: LD_ADDR_VAR 0 5
35365: PUSH
35366: LD_INT 1
35368: ST_TO_ADDR
// if btype = b_workshop then
35369: LD_VAR 0 5
35373: PUSH
35374: LD_INT 2
35376: EQUAL
35377: IFFALSE 35387
// btype := b_factory ;
35379: LD_ADDR_VAR 0 5
35383: PUSH
35384: LD_INT 3
35386: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35387: LD_ADDR_VAR 0 4
35391: PUSH
35392: LD_VAR 0 5
35396: PPUSH
35397: LD_VAR 0 1
35401: PPUSH
35402: CALL_OW 248
35406: PPUSH
35407: CALL_OW 450
35411: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35412: LD_ADDR_VAR 0 2
35416: PUSH
35417: LD_VAR 0 3
35421: PPUSH
35422: LD_INT 1
35424: PPUSH
35425: CALL_OW 275
35429: PUSH
35430: LD_VAR 0 4
35434: PUSH
35435: LD_INT 1
35437: ARRAY
35438: GREATEREQUAL
35439: PUSH
35440: LD_VAR 0 3
35444: PPUSH
35445: LD_INT 2
35447: PPUSH
35448: CALL_OW 275
35452: PUSH
35453: LD_VAR 0 4
35457: PUSH
35458: LD_INT 2
35460: ARRAY
35461: GREATEREQUAL
35462: AND
35463: PUSH
35464: LD_VAR 0 3
35468: PPUSH
35469: LD_INT 3
35471: PPUSH
35472: CALL_OW 275
35476: PUSH
35477: LD_VAR 0 4
35481: PUSH
35482: LD_INT 3
35484: ARRAY
35485: GREATEREQUAL
35486: AND
35487: ST_TO_ADDR
// end ;
35488: LD_VAR 0 2
35492: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35493: LD_INT 0
35495: PPUSH
35496: PPUSH
35497: PPUSH
// pom := GetBase ( building ) ;
35498: LD_ADDR_VAR 0 4
35502: PUSH
35503: LD_VAR 0 1
35507: PPUSH
35508: CALL_OW 274
35512: ST_TO_ADDR
// if not pom then
35513: LD_VAR 0 4
35517: NOT
35518: IFFALSE 35522
// exit ;
35520: GO 35623
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35522: LD_ADDR_VAR 0 5
35526: PUSH
35527: LD_VAR 0 2
35531: PPUSH
35532: LD_VAR 0 1
35536: PPUSH
35537: CALL_OW 248
35541: PPUSH
35542: CALL_OW 450
35546: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35547: LD_ADDR_VAR 0 3
35551: PUSH
35552: LD_VAR 0 4
35556: PPUSH
35557: LD_INT 1
35559: PPUSH
35560: CALL_OW 275
35564: PUSH
35565: LD_VAR 0 5
35569: PUSH
35570: LD_INT 1
35572: ARRAY
35573: GREATEREQUAL
35574: PUSH
35575: LD_VAR 0 4
35579: PPUSH
35580: LD_INT 2
35582: PPUSH
35583: CALL_OW 275
35587: PUSH
35588: LD_VAR 0 5
35592: PUSH
35593: LD_INT 2
35595: ARRAY
35596: GREATEREQUAL
35597: AND
35598: PUSH
35599: LD_VAR 0 4
35603: PPUSH
35604: LD_INT 3
35606: PPUSH
35607: CALL_OW 275
35611: PUSH
35612: LD_VAR 0 5
35616: PUSH
35617: LD_INT 3
35619: ARRAY
35620: GREATEREQUAL
35621: AND
35622: ST_TO_ADDR
// end ;
35623: LD_VAR 0 3
35627: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35628: LD_INT 0
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
35640: PPUSH
// result := false ;
35641: LD_ADDR_VAR 0 8
35645: PUSH
35646: LD_INT 0
35648: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35649: LD_VAR 0 5
35653: NOT
35654: PUSH
35655: LD_VAR 0 1
35659: NOT
35660: OR
35661: PUSH
35662: LD_VAR 0 2
35666: NOT
35667: OR
35668: PUSH
35669: LD_VAR 0 3
35673: NOT
35674: OR
35675: IFFALSE 35679
// exit ;
35677: GO 36493
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35679: LD_ADDR_VAR 0 14
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: LD_VAR 0 2
35693: PPUSH
35694: LD_VAR 0 3
35698: PPUSH
35699: LD_VAR 0 4
35703: PPUSH
35704: LD_VAR 0 5
35708: PUSH
35709: LD_INT 1
35711: ARRAY
35712: PPUSH
35713: CALL_OW 248
35717: PPUSH
35718: LD_INT 0
35720: PPUSH
35721: CALL 37730 0 6
35725: ST_TO_ADDR
// if not hexes then
35726: LD_VAR 0 14
35730: NOT
35731: IFFALSE 35735
// exit ;
35733: GO 36493
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35735: LD_ADDR_VAR 0 17
35739: PUSH
35740: LD_VAR 0 5
35744: PPUSH
35745: LD_INT 22
35747: PUSH
35748: LD_VAR 0 13
35752: PPUSH
35753: CALL_OW 255
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: LD_INT 30
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 30
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: LIST
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PPUSH
35794: CALL_OW 72
35798: ST_TO_ADDR
// for i = 1 to hexes do
35799: LD_ADDR_VAR 0 9
35803: PUSH
35804: DOUBLE
35805: LD_INT 1
35807: DEC
35808: ST_TO_ADDR
35809: LD_VAR 0 14
35813: PUSH
35814: FOR_TO
35815: IFFALSE 36491
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35817: LD_ADDR_VAR 0 13
35821: PUSH
35822: LD_VAR 0 14
35826: PUSH
35827: LD_VAR 0 9
35831: ARRAY
35832: PUSH
35833: LD_INT 1
35835: ARRAY
35836: PPUSH
35837: LD_VAR 0 14
35841: PUSH
35842: LD_VAR 0 9
35846: ARRAY
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: PPUSH
35852: CALL_OW 428
35856: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35857: LD_VAR 0 14
35861: PUSH
35862: LD_VAR 0 9
35866: ARRAY
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: PPUSH
35872: LD_VAR 0 14
35876: PUSH
35877: LD_VAR 0 9
35881: ARRAY
35882: PUSH
35883: LD_INT 2
35885: ARRAY
35886: PPUSH
35887: CALL_OW 351
35891: PUSH
35892: LD_VAR 0 14
35896: PUSH
35897: LD_VAR 0 9
35901: ARRAY
35902: PUSH
35903: LD_INT 1
35905: ARRAY
35906: PPUSH
35907: LD_VAR 0 14
35911: PUSH
35912: LD_VAR 0 9
35916: ARRAY
35917: PUSH
35918: LD_INT 2
35920: ARRAY
35921: PPUSH
35922: CALL_OW 488
35926: NOT
35927: OR
35928: PUSH
35929: LD_VAR 0 13
35933: PPUSH
35934: CALL_OW 247
35938: PUSH
35939: LD_INT 3
35941: EQUAL
35942: OR
35943: IFFALSE 35949
// exit ;
35945: POP
35946: POP
35947: GO 36493
// if not tmp then
35949: LD_VAR 0 13
35953: NOT
35954: IFFALSE 35958
// continue ;
35956: GO 35814
// result := true ;
35958: LD_ADDR_VAR 0 8
35962: PUSH
35963: LD_INT 1
35965: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35966: LD_VAR 0 6
35970: PUSH
35971: LD_VAR 0 13
35975: PPUSH
35976: CALL_OW 247
35980: PUSH
35981: LD_INT 2
35983: EQUAL
35984: AND
35985: PUSH
35986: LD_VAR 0 13
35990: PPUSH
35991: CALL_OW 263
35995: PUSH
35996: LD_INT 1
35998: EQUAL
35999: AND
36000: IFFALSE 36164
// begin if IsDrivenBy ( tmp ) then
36002: LD_VAR 0 13
36006: PPUSH
36007: CALL_OW 311
36011: IFFALSE 36015
// continue ;
36013: GO 35814
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36015: LD_VAR 0 6
36019: PPUSH
36020: LD_INT 3
36022: PUSH
36023: LD_INT 60
36025: PUSH
36026: EMPTY
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 3
36035: PUSH
36036: LD_INT 55
36038: PUSH
36039: EMPTY
36040: LIST
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PPUSH
36050: CALL_OW 72
36054: IFFALSE 36162
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36056: LD_ADDR_VAR 0 18
36060: PUSH
36061: LD_VAR 0 6
36065: PPUSH
36066: LD_INT 3
36068: PUSH
36069: LD_INT 60
36071: PUSH
36072: EMPTY
36073: LIST
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: LD_INT 55
36084: PUSH
36085: EMPTY
36086: LIST
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PPUSH
36096: CALL_OW 72
36100: PUSH
36101: LD_INT 1
36103: ARRAY
36104: ST_TO_ADDR
// if IsInUnit ( driver ) then
36105: LD_VAR 0 18
36109: PPUSH
36110: CALL_OW 310
36114: IFFALSE 36125
// ComExit ( driver ) ;
36116: LD_VAR 0 18
36120: PPUSH
36121: CALL 60914 0 1
// AddComEnterUnit ( driver , tmp ) ;
36125: LD_VAR 0 18
36129: PPUSH
36130: LD_VAR 0 13
36134: PPUSH
36135: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36139: LD_VAR 0 18
36143: PPUSH
36144: LD_VAR 0 7
36148: PPUSH
36149: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36153: LD_VAR 0 18
36157: PPUSH
36158: CALL_OW 181
// end ; continue ;
36162: GO 35814
// end ; if not cleaners or not tmp in cleaners then
36164: LD_VAR 0 6
36168: NOT
36169: PUSH
36170: LD_VAR 0 13
36174: PUSH
36175: LD_VAR 0 6
36179: IN
36180: NOT
36181: OR
36182: IFFALSE 36489
// begin if dep then
36184: LD_VAR 0 17
36188: IFFALSE 36324
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36190: LD_ADDR_VAR 0 16
36194: PUSH
36195: LD_VAR 0 17
36199: PUSH
36200: LD_INT 1
36202: ARRAY
36203: PPUSH
36204: CALL_OW 250
36208: PPUSH
36209: LD_VAR 0 17
36213: PUSH
36214: LD_INT 1
36216: ARRAY
36217: PPUSH
36218: CALL_OW 254
36222: PPUSH
36223: LD_INT 5
36225: PPUSH
36226: CALL_OW 272
36230: PUSH
36231: LD_VAR 0 17
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PPUSH
36240: CALL_OW 251
36244: PPUSH
36245: LD_VAR 0 17
36249: PUSH
36250: LD_INT 1
36252: ARRAY
36253: PPUSH
36254: CALL_OW 254
36258: PPUSH
36259: LD_INT 5
36261: PPUSH
36262: CALL_OW 273
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36271: LD_VAR 0 16
36275: PUSH
36276: LD_INT 1
36278: ARRAY
36279: PPUSH
36280: LD_VAR 0 16
36284: PUSH
36285: LD_INT 2
36287: ARRAY
36288: PPUSH
36289: CALL_OW 488
36293: IFFALSE 36324
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36295: LD_VAR 0 13
36299: PPUSH
36300: LD_VAR 0 16
36304: PUSH
36305: LD_INT 1
36307: ARRAY
36308: PPUSH
36309: LD_VAR 0 16
36313: PUSH
36314: LD_INT 2
36316: ARRAY
36317: PPUSH
36318: CALL_OW 111
// continue ;
36322: GO 35814
// end ; end ; r := GetDir ( tmp ) ;
36324: LD_ADDR_VAR 0 15
36328: PUSH
36329: LD_VAR 0 13
36333: PPUSH
36334: CALL_OW 254
36338: ST_TO_ADDR
// if r = 5 then
36339: LD_VAR 0 15
36343: PUSH
36344: LD_INT 5
36346: EQUAL
36347: IFFALSE 36357
// r := 0 ;
36349: LD_ADDR_VAR 0 15
36353: PUSH
36354: LD_INT 0
36356: ST_TO_ADDR
// for j = r to 5 do
36357: LD_ADDR_VAR 0 10
36361: PUSH
36362: DOUBLE
36363: LD_VAR 0 15
36367: DEC
36368: ST_TO_ADDR
36369: LD_INT 5
36371: PUSH
36372: FOR_TO
36373: IFFALSE 36487
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36375: LD_ADDR_VAR 0 11
36379: PUSH
36380: LD_VAR 0 13
36384: PPUSH
36385: CALL_OW 250
36389: PPUSH
36390: LD_VAR 0 10
36394: PPUSH
36395: LD_INT 2
36397: PPUSH
36398: CALL_OW 272
36402: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36403: LD_ADDR_VAR 0 12
36407: PUSH
36408: LD_VAR 0 13
36412: PPUSH
36413: CALL_OW 251
36417: PPUSH
36418: LD_VAR 0 10
36422: PPUSH
36423: LD_INT 2
36425: PPUSH
36426: CALL_OW 273
36430: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36431: LD_VAR 0 11
36435: PPUSH
36436: LD_VAR 0 12
36440: PPUSH
36441: CALL_OW 488
36445: PUSH
36446: LD_VAR 0 11
36450: PPUSH
36451: LD_VAR 0 12
36455: PPUSH
36456: CALL_OW 428
36460: NOT
36461: AND
36462: IFFALSE 36485
// begin ComMoveXY ( tmp , _x , _y ) ;
36464: LD_VAR 0 13
36468: PPUSH
36469: LD_VAR 0 11
36473: PPUSH
36474: LD_VAR 0 12
36478: PPUSH
36479: CALL_OW 111
// break ;
36483: GO 36487
// end ; end ;
36485: GO 36372
36487: POP
36488: POP
// end ; end ;
36489: GO 35814
36491: POP
36492: POP
// end ;
36493: LD_VAR 0 8
36497: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36498: LD_INT 0
36500: PPUSH
// result := true ;
36501: LD_ADDR_VAR 0 3
36505: PUSH
36506: LD_INT 1
36508: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36509: LD_VAR 0 2
36513: PUSH
36514: LD_INT 24
36516: DOUBLE
36517: EQUAL
36518: IFTRUE 36528
36520: LD_INT 33
36522: DOUBLE
36523: EQUAL
36524: IFTRUE 36528
36526: GO 36553
36528: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36529: LD_ADDR_VAR 0 3
36533: PUSH
36534: LD_INT 32
36536: PPUSH
36537: LD_VAR 0 1
36541: PPUSH
36542: CALL_OW 321
36546: PUSH
36547: LD_INT 2
36549: EQUAL
36550: ST_TO_ADDR
36551: GO 36873
36553: LD_INT 20
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36561
36559: GO 36586
36561: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36562: LD_ADDR_VAR 0 3
36566: PUSH
36567: LD_INT 6
36569: PPUSH
36570: LD_VAR 0 1
36574: PPUSH
36575: CALL_OW 321
36579: PUSH
36580: LD_INT 2
36582: EQUAL
36583: ST_TO_ADDR
36584: GO 36873
36586: LD_INT 22
36588: DOUBLE
36589: EQUAL
36590: IFTRUE 36600
36592: LD_INT 36
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36600
36598: GO 36625
36600: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36601: LD_ADDR_VAR 0 3
36605: PUSH
36606: LD_INT 15
36608: PPUSH
36609: LD_VAR 0 1
36613: PPUSH
36614: CALL_OW 321
36618: PUSH
36619: LD_INT 2
36621: EQUAL
36622: ST_TO_ADDR
36623: GO 36873
36625: LD_INT 30
36627: DOUBLE
36628: EQUAL
36629: IFTRUE 36633
36631: GO 36658
36633: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36634: LD_ADDR_VAR 0 3
36638: PUSH
36639: LD_INT 20
36641: PPUSH
36642: LD_VAR 0 1
36646: PPUSH
36647: CALL_OW 321
36651: PUSH
36652: LD_INT 2
36654: EQUAL
36655: ST_TO_ADDR
36656: GO 36873
36658: LD_INT 28
36660: DOUBLE
36661: EQUAL
36662: IFTRUE 36672
36664: LD_INT 21
36666: DOUBLE
36667: EQUAL
36668: IFTRUE 36672
36670: GO 36697
36672: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36673: LD_ADDR_VAR 0 3
36677: PUSH
36678: LD_INT 21
36680: PPUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 321
36690: PUSH
36691: LD_INT 2
36693: EQUAL
36694: ST_TO_ADDR
36695: GO 36873
36697: LD_INT 16
36699: DOUBLE
36700: EQUAL
36701: IFTRUE 36705
36703: GO 36732
36705: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36706: LD_ADDR_VAR 0 3
36710: PUSH
36711: LD_EXP 106
36715: PPUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 321
36725: PUSH
36726: LD_INT 2
36728: EQUAL
36729: ST_TO_ADDR
36730: GO 36873
36732: LD_INT 19
36734: DOUBLE
36735: EQUAL
36736: IFTRUE 36746
36738: LD_INT 23
36740: DOUBLE
36741: EQUAL
36742: IFTRUE 36746
36744: GO 36773
36746: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36747: LD_ADDR_VAR 0 3
36751: PUSH
36752: LD_EXP 105
36756: PPUSH
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL_OW 321
36766: PUSH
36767: LD_INT 2
36769: EQUAL
36770: ST_TO_ADDR
36771: GO 36873
36773: LD_INT 17
36775: DOUBLE
36776: EQUAL
36777: IFTRUE 36781
36779: GO 36806
36781: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36782: LD_ADDR_VAR 0 3
36786: PUSH
36787: LD_INT 39
36789: PPUSH
36790: LD_VAR 0 1
36794: PPUSH
36795: CALL_OW 321
36799: PUSH
36800: LD_INT 2
36802: EQUAL
36803: ST_TO_ADDR
36804: GO 36873
36806: LD_INT 18
36808: DOUBLE
36809: EQUAL
36810: IFTRUE 36814
36812: GO 36839
36814: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36815: LD_ADDR_VAR 0 3
36819: PUSH
36820: LD_INT 40
36822: PPUSH
36823: LD_VAR 0 1
36827: PPUSH
36828: CALL_OW 321
36832: PUSH
36833: LD_INT 2
36835: EQUAL
36836: ST_TO_ADDR
36837: GO 36873
36839: LD_INT 27
36841: DOUBLE
36842: EQUAL
36843: IFTRUE 36847
36845: GO 36872
36847: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36848: LD_ADDR_VAR 0 3
36852: PUSH
36853: LD_INT 35
36855: PPUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 321
36865: PUSH
36866: LD_INT 2
36868: EQUAL
36869: ST_TO_ADDR
36870: GO 36873
36872: POP
// end ;
36873: LD_VAR 0 3
36877: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36878: LD_INT 0
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
// result := false ;
36891: LD_ADDR_VAR 0 6
36895: PUSH
36896: LD_INT 0
36898: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36899: LD_VAR 0 1
36903: NOT
36904: PUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 266
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: IN
36925: NOT
36926: OR
36927: PUSH
36928: LD_VAR 0 2
36932: NOT
36933: OR
36934: PUSH
36935: LD_VAR 0 5
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: LD_INT 2
36948: PUSH
36949: LD_INT 3
36951: PUSH
36952: LD_INT 4
36954: PUSH
36955: LD_INT 5
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: IN
36966: NOT
36967: OR
36968: PUSH
36969: LD_VAR 0 3
36973: PPUSH
36974: LD_VAR 0 4
36978: PPUSH
36979: CALL_OW 488
36983: NOT
36984: OR
36985: IFFALSE 36989
// exit ;
36987: GO 37725
// side := GetSide ( depot ) ;
36989: LD_ADDR_VAR 0 9
36993: PUSH
36994: LD_VAR 0 1
36998: PPUSH
36999: CALL_OW 255
37003: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37004: LD_VAR 0 9
37008: PPUSH
37009: LD_VAR 0 2
37013: PPUSH
37014: CALL 36498 0 2
37018: NOT
37019: IFFALSE 37023
// exit ;
37021: GO 37725
// pom := GetBase ( depot ) ;
37023: LD_ADDR_VAR 0 10
37027: PUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: CALL_OW 274
37037: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37038: LD_ADDR_VAR 0 11
37042: PUSH
37043: LD_VAR 0 2
37047: PPUSH
37048: LD_VAR 0 1
37052: PPUSH
37053: CALL_OW 248
37057: PPUSH
37058: CALL_OW 450
37062: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37063: LD_VAR 0 10
37067: PPUSH
37068: LD_INT 1
37070: PPUSH
37071: CALL_OW 275
37075: PUSH
37076: LD_VAR 0 11
37080: PUSH
37081: LD_INT 1
37083: ARRAY
37084: GREATEREQUAL
37085: PUSH
37086: LD_VAR 0 10
37090: PPUSH
37091: LD_INT 2
37093: PPUSH
37094: CALL_OW 275
37098: PUSH
37099: LD_VAR 0 11
37103: PUSH
37104: LD_INT 2
37106: ARRAY
37107: GREATEREQUAL
37108: AND
37109: PUSH
37110: LD_VAR 0 10
37114: PPUSH
37115: LD_INT 3
37117: PPUSH
37118: CALL_OW 275
37122: PUSH
37123: LD_VAR 0 11
37127: PUSH
37128: LD_INT 3
37130: ARRAY
37131: GREATEREQUAL
37132: AND
37133: NOT
37134: IFFALSE 37138
// exit ;
37136: GO 37725
// if GetBType ( depot ) = b_depot then
37138: LD_VAR 0 1
37142: PPUSH
37143: CALL_OW 266
37147: PUSH
37148: LD_INT 0
37150: EQUAL
37151: IFFALSE 37163
// dist := 28 else
37153: LD_ADDR_VAR 0 14
37157: PUSH
37158: LD_INT 28
37160: ST_TO_ADDR
37161: GO 37171
// dist := 36 ;
37163: LD_ADDR_VAR 0 14
37167: PUSH
37168: LD_INT 36
37170: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37171: LD_VAR 0 1
37175: PPUSH
37176: LD_VAR 0 3
37180: PPUSH
37181: LD_VAR 0 4
37185: PPUSH
37186: CALL_OW 297
37190: PUSH
37191: LD_VAR 0 14
37195: GREATER
37196: IFFALSE 37200
// exit ;
37198: GO 37725
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37200: LD_ADDR_VAR 0 12
37204: PUSH
37205: LD_VAR 0 2
37209: PPUSH
37210: LD_VAR 0 3
37214: PPUSH
37215: LD_VAR 0 4
37219: PPUSH
37220: LD_VAR 0 5
37224: PPUSH
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 248
37234: PPUSH
37235: LD_INT 0
37237: PPUSH
37238: CALL 37730 0 6
37242: ST_TO_ADDR
// if not hexes then
37243: LD_VAR 0 12
37247: NOT
37248: IFFALSE 37252
// exit ;
37250: GO 37725
// hex := GetHexInfo ( x , y ) ;
37252: LD_ADDR_VAR 0 15
37256: PUSH
37257: LD_VAR 0 3
37261: PPUSH
37262: LD_VAR 0 4
37266: PPUSH
37267: CALL_OW 546
37271: ST_TO_ADDR
// if hex [ 1 ] then
37272: LD_VAR 0 15
37276: PUSH
37277: LD_INT 1
37279: ARRAY
37280: IFFALSE 37284
// exit ;
37282: GO 37725
// height := hex [ 2 ] ;
37284: LD_ADDR_VAR 0 13
37288: PUSH
37289: LD_VAR 0 15
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: ST_TO_ADDR
// for i = 1 to hexes do
37298: LD_ADDR_VAR 0 7
37302: PUSH
37303: DOUBLE
37304: LD_INT 1
37306: DEC
37307: ST_TO_ADDR
37308: LD_VAR 0 12
37312: PUSH
37313: FOR_TO
37314: IFFALSE 37644
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37316: LD_VAR 0 12
37320: PUSH
37321: LD_VAR 0 7
37325: ARRAY
37326: PUSH
37327: LD_INT 1
37329: ARRAY
37330: PPUSH
37331: LD_VAR 0 12
37335: PUSH
37336: LD_VAR 0 7
37340: ARRAY
37341: PUSH
37342: LD_INT 2
37344: ARRAY
37345: PPUSH
37346: CALL_OW 488
37350: NOT
37351: PUSH
37352: LD_VAR 0 12
37356: PUSH
37357: LD_VAR 0 7
37361: ARRAY
37362: PUSH
37363: LD_INT 1
37365: ARRAY
37366: PPUSH
37367: LD_VAR 0 12
37371: PUSH
37372: LD_VAR 0 7
37376: ARRAY
37377: PUSH
37378: LD_INT 2
37380: ARRAY
37381: PPUSH
37382: CALL_OW 428
37386: PUSH
37387: LD_INT 0
37389: GREATER
37390: OR
37391: PUSH
37392: LD_VAR 0 12
37396: PUSH
37397: LD_VAR 0 7
37401: ARRAY
37402: PUSH
37403: LD_INT 1
37405: ARRAY
37406: PPUSH
37407: LD_VAR 0 12
37411: PUSH
37412: LD_VAR 0 7
37416: ARRAY
37417: PUSH
37418: LD_INT 2
37420: ARRAY
37421: PPUSH
37422: CALL_OW 351
37426: OR
37427: IFFALSE 37433
// exit ;
37429: POP
37430: POP
37431: GO 37725
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37433: LD_ADDR_VAR 0 8
37437: PUSH
37438: LD_VAR 0 12
37442: PUSH
37443: LD_VAR 0 7
37447: ARRAY
37448: PUSH
37449: LD_INT 1
37451: ARRAY
37452: PPUSH
37453: LD_VAR 0 12
37457: PUSH
37458: LD_VAR 0 7
37462: ARRAY
37463: PUSH
37464: LD_INT 2
37466: ARRAY
37467: PPUSH
37468: CALL_OW 546
37472: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37473: LD_VAR 0 8
37477: PUSH
37478: LD_INT 1
37480: ARRAY
37481: PUSH
37482: LD_VAR 0 8
37486: PUSH
37487: LD_INT 2
37489: ARRAY
37490: PUSH
37491: LD_VAR 0 13
37495: PUSH
37496: LD_INT 2
37498: PLUS
37499: GREATER
37500: OR
37501: PUSH
37502: LD_VAR 0 8
37506: PUSH
37507: LD_INT 2
37509: ARRAY
37510: PUSH
37511: LD_VAR 0 13
37515: PUSH
37516: LD_INT 2
37518: MINUS
37519: LESS
37520: OR
37521: PUSH
37522: LD_VAR 0 8
37526: PUSH
37527: LD_INT 3
37529: ARRAY
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: LD_INT 8
37536: PUSH
37537: LD_INT 9
37539: PUSH
37540: LD_INT 10
37542: PUSH
37543: LD_INT 11
37545: PUSH
37546: LD_INT 12
37548: PUSH
37549: LD_INT 13
37551: PUSH
37552: LD_INT 16
37554: PUSH
37555: LD_INT 17
37557: PUSH
37558: LD_INT 18
37560: PUSH
37561: LD_INT 19
37563: PUSH
37564: LD_INT 20
37566: PUSH
37567: LD_INT 21
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: IN
37585: NOT
37586: OR
37587: PUSH
37588: LD_VAR 0 8
37592: PUSH
37593: LD_INT 5
37595: ARRAY
37596: NOT
37597: OR
37598: PUSH
37599: LD_VAR 0 8
37603: PUSH
37604: LD_INT 6
37606: ARRAY
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: LD_INT 7
37616: PUSH
37617: LD_INT 9
37619: PUSH
37620: LD_INT 10
37622: PUSH
37623: LD_INT 11
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: IN
37634: NOT
37635: OR
37636: IFFALSE 37642
// exit ;
37638: POP
37639: POP
37640: GO 37725
// end ;
37642: GO 37313
37644: POP
37645: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37646: LD_VAR 0 9
37650: PPUSH
37651: LD_VAR 0 3
37655: PPUSH
37656: LD_VAR 0 4
37660: PPUSH
37661: LD_INT 20
37663: PPUSH
37664: CALL 29671 0 4
37668: PUSH
37669: LD_INT 4
37671: ARRAY
37672: IFFALSE 37676
// exit ;
37674: GO 37725
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37676: LD_VAR 0 2
37680: PUSH
37681: LD_INT 29
37683: PUSH
37684: LD_INT 30
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: IN
37691: PUSH
37692: LD_VAR 0 3
37696: PPUSH
37697: LD_VAR 0 4
37701: PPUSH
37702: LD_VAR 0 9
37706: PPUSH
37707: CALL_OW 440
37711: NOT
37712: AND
37713: IFFALSE 37717
// exit ;
37715: GO 37725
// result := true ;
37717: LD_ADDR_VAR 0 6
37721: PUSH
37722: LD_INT 1
37724: ST_TO_ADDR
// end ;
37725: LD_VAR 0 6
37729: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37730: LD_INT 0
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
37739: PPUSH
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
37744: PPUSH
37745: PPUSH
37746: PPUSH
37747: PPUSH
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
// result = [ ] ;
37790: LD_ADDR_VAR 0 7
37794: PUSH
37795: EMPTY
37796: ST_TO_ADDR
// temp_list = [ ] ;
37797: LD_ADDR_VAR 0 9
37801: PUSH
37802: EMPTY
37803: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37804: LD_VAR 0 4
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: LD_INT 4
37823: PUSH
37824: LD_INT 5
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: IN
37835: NOT
37836: PUSH
37837: LD_VAR 0 1
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: IN
37852: PUSH
37853: LD_VAR 0 5
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: IN
37872: NOT
37873: AND
37874: OR
37875: IFFALSE 37879
// exit ;
37877: GO 56270
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37879: LD_VAR 0 1
37883: PUSH
37884: LD_INT 6
37886: PUSH
37887: LD_INT 7
37889: PUSH
37890: LD_INT 8
37892: PUSH
37893: LD_INT 13
37895: PUSH
37896: LD_INT 12
37898: PUSH
37899: LD_INT 15
37901: PUSH
37902: LD_INT 11
37904: PUSH
37905: LD_INT 14
37907: PUSH
37908: LD_INT 10
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: IN
37922: IFFALSE 37932
// btype = b_lab ;
37924: LD_ADDR_VAR 0 1
37928: PUSH
37929: LD_INT 6
37931: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37932: LD_VAR 0 6
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: IN
37951: NOT
37952: PUSH
37953: LD_VAR 0 1
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 3
37969: PUSH
37970: LD_INT 6
37972: PUSH
37973: LD_INT 36
37975: PUSH
37976: LD_INT 4
37978: PUSH
37979: LD_INT 5
37981: PUSH
37982: LD_INT 31
37984: PUSH
37985: LD_INT 32
37987: PUSH
37988: LD_INT 33
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: IN
38004: NOT
38005: PUSH
38006: LD_VAR 0 6
38010: PUSH
38011: LD_INT 1
38013: EQUAL
38014: AND
38015: OR
38016: PUSH
38017: LD_VAR 0 1
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: IN
38032: NOT
38033: PUSH
38034: LD_VAR 0 6
38038: PUSH
38039: LD_INT 2
38041: EQUAL
38042: AND
38043: OR
38044: IFFALSE 38054
// mode = 0 ;
38046: LD_ADDR_VAR 0 6
38050: PUSH
38051: LD_INT 0
38053: ST_TO_ADDR
// case mode of 0 :
38054: LD_VAR 0 6
38058: PUSH
38059: LD_INT 0
38061: DOUBLE
38062: EQUAL
38063: IFTRUE 38067
38065: GO 49520
38067: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38068: LD_ADDR_VAR 0 11
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 3
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 3
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38261: LD_ADDR_VAR 0 12
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 3
38418: NEG
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 3
38429: NEG
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38457: LD_ADDR_VAR 0 13
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 2
38604: NEG
38605: PUSH
38606: LD_INT 3
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 3
38616: NEG
38617: PUSH
38618: LD_INT 2
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 3
38628: NEG
38629: PUSH
38630: LD_INT 3
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38656: LD_ADDR_VAR 0 14
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 2
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 2
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 3
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38852: LD_ADDR_VAR 0 15
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: NEG
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39045: LD_ADDR_VAR 0 16
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: NEG
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 3
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39238: LD_ADDR_VAR 0 17
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 2
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: LD_INT 2
39441: NEG
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39468: LD_ADDR_VAR 0 18
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 2
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 2
39667: NEG
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39698: LD_ADDR_VAR 0 19
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39928: LD_ADDR_VAR 0 20
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 0
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: LD_INT 2
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40158: LD_ADDR_VAR 0 21
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40388: LD_ADDR_VAR 0 22
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40618: LD_ADDR_VAR 0 23
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 3
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 3
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40898: LD_ADDR_VAR 0 24
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41174: LD_ADDR_VAR 0 25
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: LD_INT 2
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 3
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 3
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: LD_INT 3
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41448: LD_ADDR_VAR 0 26
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 3
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41724: LD_ADDR_VAR 0 27
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 3
41957: NEG
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 3
41969: NEG
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42004: LD_ADDR_VAR 0 28
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: LD_INT 3
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 3
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 3
42239: NEG
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 3
42251: NEG
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42286: LD_ADDR_VAR 0 29
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: LD_INT 3
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 2
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 3
42530: NEG
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42565: LD_ADDR_VAR 0 30
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 3
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42843: LD_ADDR_VAR 0 31
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: LD_INT 3
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 3
43086: NEG
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43121: LD_ADDR_VAR 0 32
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 3
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 3
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 3
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 3
43364: NEG
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43399: LD_ADDR_VAR 0 33
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: LD_INT 3
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 3
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 3
43643: NEG
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43678: LD_ADDR_VAR 0 34
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: LD_INT 3
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 3
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 3
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 3
43923: NEG
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43958: LD_ADDR_VAR 0 35
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44070: LD_ADDR_VAR 0 36
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44182: LD_ADDR_VAR 0 37
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44294: LD_ADDR_VAR 0 38
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44406: LD_ADDR_VAR 0 39
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44518: LD_ADDR_VAR 0 40
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44630: LD_ADDR_VAR 0 41
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 3
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: LD_INT 3
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 3
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 3
44904: NEG
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 3
44915: NEG
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 3
44927: NEG
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44980: LD_ADDR_VAR 0 42
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: LD_INT 3
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 3
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 3
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 3
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 3
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 3
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: NEG
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45330: LD_ADDR_VAR 0 43
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 3
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 3
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 3
45626: NEG
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 3
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45678: LD_ADDR_VAR 0 44
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: LD_INT 3
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 3
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: LD_INT 3
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: NEG
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46028: LD_ADDR_VAR 0 45
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: LD_INT 3
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 3
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 3
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: LD_INT 3
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 3
46325: NEG
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 3
46337: NEG
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46378: LD_ADDR_VAR 0 46
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: NEG
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46726: LD_ADDR_VAR 0 47
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46877: LD_ADDR_VAR 0 48
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47024: LD_ADDR_VAR 0 49
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47168: LD_ADDR_VAR 0 50
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47312: LD_ADDR_VAR 0 51
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47459: LD_ADDR_VAR 0 52
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47610: LD_ADDR_VAR 0 53
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47840: LD_ADDR_VAR 0 54
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48070: LD_ADDR_VAR 0 55
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48300: LD_ADDR_VAR 0 56
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48530: LD_ADDR_VAR 0 57
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48760: LD_ADDR_VAR 0 58
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48990: LD_ADDR_VAR 0 59
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49078: LD_ADDR_VAR 0 60
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49166: LD_ADDR_VAR 0 61
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49254: LD_ADDR_VAR 0 62
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49342: LD_ADDR_VAR 0 63
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49430: LD_ADDR_VAR 0 64
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: ST_TO_ADDR
// end ; 1 :
49518: GO 55415
49520: LD_INT 1
49522: DOUBLE
49523: EQUAL
49524: IFTRUE 49528
49526: GO 52151
49528: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49529: LD_ADDR_VAR 0 11
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 3
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: LIST
49572: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49573: LD_ADDR_VAR 0 12
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 3
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49614: LD_ADDR_VAR 0 13
49618: PUSH
49619: LD_INT 3
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49654: LD_ADDR_VAR 0 14
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49695: LD_ADDR_VAR 0 15
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49739: LD_ADDR_VAR 0 16
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 3
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 3
49770: NEG
49771: PUSH
49772: LD_INT 3
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: LIST
49784: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49785: LD_ADDR_VAR 0 17
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 3
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 3
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49829: LD_ADDR_VAR 0 18
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49870: LD_ADDR_VAR 0 19
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: LD_INT 3
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 3
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49910: LD_ADDR_VAR 0 20
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49951: LD_ADDR_VAR 0 21
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: NEG
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49995: LD_ADDR_VAR 0 22
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 3
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50041: LD_ADDR_VAR 0 23
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50085: LD_ADDR_VAR 0 24
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 4
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50126: LD_ADDR_VAR 0 25
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 4
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: LD_INT 4
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50166: LD_ADDR_VAR 0 26
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 4
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50207: LD_ADDR_VAR 0 27
50211: PUSH
50212: LD_INT 3
50214: NEG
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 4
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50251: LD_ADDR_VAR 0 28
50255: PUSH
50256: LD_INT 3
50258: NEG
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: LD_INT 4
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 4
50282: NEG
50283: PUSH
50284: LD_INT 3
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: LIST
50296: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50297: LD_ADDR_VAR 0 29
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 4
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 4
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 5
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 5
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 4
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 6
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 6
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 5
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50452: LD_ADDR_VAR 0 30
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 3
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 4
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 4
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 4
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 5
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 5
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 5
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 6
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 6
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50595: LD_ADDR_VAR 0 31
50599: PUSH
50600: LD_INT 3
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 4
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: LD_INT 4
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: LD_INT 4
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 5
50662: PUSH
50663: LD_INT 4
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 5
50672: PUSH
50673: LD_INT 5
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 4
50682: PUSH
50683: LD_INT 5
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 6
50692: PUSH
50693: LD_INT 5
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 6
50702: PUSH
50703: LD_INT 6
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 5
50712: PUSH
50713: LD_INT 6
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50734: LD_ADDR_VAR 0 32
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 3
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 5
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 5
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 4
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 6
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 6
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50877: LD_ADDR_VAR 0 33
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 3
50895: NEG
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 4
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 4
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 4
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 5
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 5
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 5
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 6
50997: NEG
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 6
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51032: LD_ADDR_VAR 0 34
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 3
51051: NEG
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: LD_INT 4
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 4
51087: NEG
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 4
51099: NEG
51100: PUSH
51101: LD_INT 4
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 4
51111: NEG
51112: PUSH
51113: LD_INT 5
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 5
51123: NEG
51124: PUSH
51125: LD_INT 4
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 5
51135: NEG
51136: PUSH
51137: LD_INT 5
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 5
51147: NEG
51148: PUSH
51149: LD_INT 6
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 6
51159: NEG
51160: PUSH
51161: LD_INT 5
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 6
51171: NEG
51172: PUSH
51173: LD_INT 6
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51195: LD_ADDR_VAR 0 41
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51239: LD_ADDR_VAR 0 42
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51280: LD_ADDR_VAR 0 43
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51320: LD_ADDR_VAR 0 44
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51361: LD_ADDR_VAR 0 45
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 3
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: LIST
51404: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51405: LD_ADDR_VAR 0 46
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: LD_INT 3
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51451: LD_ADDR_VAR 0 47
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: LD_INT 3
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 3
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51484: LD_ADDR_VAR 0 48
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51515: LD_ADDR_VAR 0 49
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 3
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51544: LD_ADDR_VAR 0 50
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51573: LD_ADDR_VAR 0 51
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51604: LD_ADDR_VAR 0 52
51608: PUSH
51609: LD_INT 3
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 3
51623: NEG
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51637: LD_ADDR_VAR 0 53
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51681: LD_ADDR_VAR 0 54
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51722: LD_ADDR_VAR 0 55
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51762: LD_ADDR_VAR 0 56
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51803: LD_ADDR_VAR 0 57
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51847: LD_ADDR_VAR 0 58
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 3
51878: NEG
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51893: LD_ADDR_VAR 0 59
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51937: LD_ADDR_VAR 0 60
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51978: LD_ADDR_VAR 0 61
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52018: LD_ADDR_VAR 0 62
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: LIST
52058: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52059: LD_ADDR_VAR 0 63
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: LIST
52102: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52103: LD_ADDR_VAR 0 64
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: ST_TO_ADDR
// end ; 2 :
52149: GO 55415
52151: LD_INT 2
52153: DOUBLE
52154: EQUAL
52155: IFTRUE 52159
52157: GO 55414
52159: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52160: LD_ADDR_VAR 0 29
52164: PUSH
52165: LD_INT 4
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 4
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 5
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 5
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 4
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 5
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 4
52290: PUSH
52291: LD_INT 4
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: LD_INT 4
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 4
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 4
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 4
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 4
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 5
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 5
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 4
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 5
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 4
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 4
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 4
52522: NEG
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 4
52545: NEG
52546: PUSH
52547: LD_INT 4
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 4
52557: NEG
52558: PUSH
52559: LD_INT 5
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: NEG
52570: PUSH
52571: LD_INT 4
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 4
52593: NEG
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 5
52605: NEG
52606: PUSH
52607: LD_INT 4
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 5
52617: NEG
52618: PUSH
52619: LD_INT 5
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: LD_INT 5
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 5
52641: NEG
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52698: LD_ADDR_VAR 0 30
52702: PUSH
52703: LD_INT 4
52705: PUSH
52706: LD_INT 4
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 5
52725: PUSH
52726: LD_INT 4
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 5
52735: PUSH
52736: LD_INT 5
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 4
52745: PUSH
52746: LD_INT 5
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 3
52755: PUSH
52756: LD_INT 4
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 5
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: PUSH
52786: LD_INT 5
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 4
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 4
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: LD_INT 4
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: NEG
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 4
52888: NEG
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 4
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 3
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 4
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 5
52944: NEG
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 5
52955: NEG
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 5
52967: NEG
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 4
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 3
53038: NEG
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 4
53050: NEG
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 4
53062: NEG
53063: PUSH
53064: LD_INT 4
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: LD_INT 4
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 4
53086: NEG
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 4
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 5
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 4
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 4
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 5
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 5
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53245: LD_ADDR_VAR 0 31
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 4
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 3
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 4
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 5
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 5
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 4
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 3
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 5
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 3
53390: NEG
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 4
53401: NEG
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 4
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 4
53424: NEG
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 4
53447: NEG
53448: PUSH
53449: LD_INT 4
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 4
53459: NEG
53460: PUSH
53461: LD_INT 5
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: LD_INT 4
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: NEG
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 4
53495: NEG
53496: PUSH
53497: LD_INT 3
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 5
53507: NEG
53508: PUSH
53509: LD_INT 4
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 5
53519: NEG
53520: PUSH
53521: LD_INT 5
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: LD_INT 5
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 5
53543: NEG
53544: PUSH
53545: LD_INT 3
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: LD_INT 3
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 4
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 4
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 4
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 4
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 4
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 5
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 5
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 4
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 3
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 5
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53795: LD_ADDR_VAR 0 32
53799: PUSH
53800: LD_INT 4
53802: NEG
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 4
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 4
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 5
53858: NEG
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 5
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 5
53881: NEG
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 4
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 4
53964: NEG
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 4
53976: NEG
53977: PUSH
53978: LD_INT 4
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 4
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 4
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 4
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: LD_INT 5
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 4
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: LD_INT 4
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 5
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: LD_INT 5
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 4
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 4
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 4
54207: PUSH
54208: LD_INT 4
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 4
54217: PUSH
54218: LD_INT 3
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 5
54227: PUSH
54228: LD_INT 4
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 5
54237: PUSH
54238: LD_INT 5
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 4
54247: PUSH
54248: LD_INT 5
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: LD_INT 4
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 5
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: LD_INT 5
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54342: LD_ADDR_VAR 0 33
54346: PUSH
54347: LD_INT 4
54349: NEG
54350: PUSH
54351: LD_INT 4
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 4
54361: NEG
54362: PUSH
54363: LD_INT 5
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: LD_INT 4
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 4
54397: NEG
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 5
54409: NEG
54410: PUSH
54411: LD_INT 4
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 5
54421: NEG
54422: PUSH
54423: LD_INT 5
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: LD_INT 5
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 5
54445: NEG
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 3
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 4
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 4
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 4
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 4
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 4
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 5
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 5
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 4
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 5
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: PUSH
54683: LD_INT 4
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 3
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 4
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 4
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 4
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 4
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 5
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 5
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 4
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 5
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54880: LD_ADDR_VAR 0 34
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 4
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 5
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 4
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 3
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 4
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 5
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: LD_INT 3
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 5
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 4
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 4
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 4
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 4
55082: PUSH
55083: LD_INT 4
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 4
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 5
55102: PUSH
55103: LD_INT 4
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 5
55112: PUSH
55113: LD_INT 5
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 4
55122: PUSH
55123: LD_INT 5
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: PUSH
55133: LD_INT 4
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 3
55142: PUSH
55143: LD_INT 3
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 5
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: LD_INT 5
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 4
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 4
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 4
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 4
55265: NEG
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 4
55276: NEG
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 4
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 5
55321: NEG
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 5
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 5
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: ST_TO_ADDR
// end ; end ;
55412: GO 55415
55414: POP
// case btype of b_depot , b_warehouse :
55415: LD_VAR 0 1
55419: PUSH
55420: LD_INT 0
55422: DOUBLE
55423: EQUAL
55424: IFTRUE 55434
55426: LD_INT 1
55428: DOUBLE
55429: EQUAL
55430: IFTRUE 55434
55432: GO 55635
55434: POP
// case nation of nation_american :
55435: LD_VAR 0 5
55439: PUSH
55440: LD_INT 1
55442: DOUBLE
55443: EQUAL
55444: IFTRUE 55448
55446: GO 55504
55448: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55449: LD_ADDR_VAR 0 9
55453: PUSH
55454: LD_VAR 0 11
55458: PUSH
55459: LD_VAR 0 12
55463: PUSH
55464: LD_VAR 0 13
55468: PUSH
55469: LD_VAR 0 14
55473: PUSH
55474: LD_VAR 0 15
55478: PUSH
55479: LD_VAR 0 16
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: PUSH
55492: LD_VAR 0 4
55496: PUSH
55497: LD_INT 1
55499: PLUS
55500: ARRAY
55501: ST_TO_ADDR
55502: GO 55633
55504: LD_INT 2
55506: DOUBLE
55507: EQUAL
55508: IFTRUE 55512
55510: GO 55568
55512: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55513: LD_ADDR_VAR 0 9
55517: PUSH
55518: LD_VAR 0 17
55522: PUSH
55523: LD_VAR 0 18
55527: PUSH
55528: LD_VAR 0 19
55532: PUSH
55533: LD_VAR 0 20
55537: PUSH
55538: LD_VAR 0 21
55542: PUSH
55543: LD_VAR 0 22
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: PUSH
55556: LD_VAR 0 4
55560: PUSH
55561: LD_INT 1
55563: PLUS
55564: ARRAY
55565: ST_TO_ADDR
55566: GO 55633
55568: LD_INT 3
55570: DOUBLE
55571: EQUAL
55572: IFTRUE 55576
55574: GO 55632
55576: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55577: LD_ADDR_VAR 0 9
55581: PUSH
55582: LD_VAR 0 23
55586: PUSH
55587: LD_VAR 0 24
55591: PUSH
55592: LD_VAR 0 25
55596: PUSH
55597: LD_VAR 0 26
55601: PUSH
55602: LD_VAR 0 27
55606: PUSH
55607: LD_VAR 0 28
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: PUSH
55620: LD_VAR 0 4
55624: PUSH
55625: LD_INT 1
55627: PLUS
55628: ARRAY
55629: ST_TO_ADDR
55630: GO 55633
55632: POP
55633: GO 56188
55635: LD_INT 2
55637: DOUBLE
55638: EQUAL
55639: IFTRUE 55649
55641: LD_INT 3
55643: DOUBLE
55644: EQUAL
55645: IFTRUE 55649
55647: GO 55705
55649: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55650: LD_ADDR_VAR 0 9
55654: PUSH
55655: LD_VAR 0 29
55659: PUSH
55660: LD_VAR 0 30
55664: PUSH
55665: LD_VAR 0 31
55669: PUSH
55670: LD_VAR 0 32
55674: PUSH
55675: LD_VAR 0 33
55679: PUSH
55680: LD_VAR 0 34
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: PUSH
55693: LD_VAR 0 4
55697: PUSH
55698: LD_INT 1
55700: PLUS
55701: ARRAY
55702: ST_TO_ADDR
55703: GO 56188
55705: LD_INT 16
55707: DOUBLE
55708: EQUAL
55709: IFTRUE 55767
55711: LD_INT 17
55713: DOUBLE
55714: EQUAL
55715: IFTRUE 55767
55717: LD_INT 18
55719: DOUBLE
55720: EQUAL
55721: IFTRUE 55767
55723: LD_INT 19
55725: DOUBLE
55726: EQUAL
55727: IFTRUE 55767
55729: LD_INT 22
55731: DOUBLE
55732: EQUAL
55733: IFTRUE 55767
55735: LD_INT 20
55737: DOUBLE
55738: EQUAL
55739: IFTRUE 55767
55741: LD_INT 21
55743: DOUBLE
55744: EQUAL
55745: IFTRUE 55767
55747: LD_INT 23
55749: DOUBLE
55750: EQUAL
55751: IFTRUE 55767
55753: LD_INT 24
55755: DOUBLE
55756: EQUAL
55757: IFTRUE 55767
55759: LD_INT 25
55761: DOUBLE
55762: EQUAL
55763: IFTRUE 55767
55765: GO 55823
55767: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55768: LD_ADDR_VAR 0 9
55772: PUSH
55773: LD_VAR 0 35
55777: PUSH
55778: LD_VAR 0 36
55782: PUSH
55783: LD_VAR 0 37
55787: PUSH
55788: LD_VAR 0 38
55792: PUSH
55793: LD_VAR 0 39
55797: PUSH
55798: LD_VAR 0 40
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: PUSH
55811: LD_VAR 0 4
55815: PUSH
55816: LD_INT 1
55818: PLUS
55819: ARRAY
55820: ST_TO_ADDR
55821: GO 56188
55823: LD_INT 6
55825: DOUBLE
55826: EQUAL
55827: IFTRUE 55879
55829: LD_INT 7
55831: DOUBLE
55832: EQUAL
55833: IFTRUE 55879
55835: LD_INT 8
55837: DOUBLE
55838: EQUAL
55839: IFTRUE 55879
55841: LD_INT 13
55843: DOUBLE
55844: EQUAL
55845: IFTRUE 55879
55847: LD_INT 12
55849: DOUBLE
55850: EQUAL
55851: IFTRUE 55879
55853: LD_INT 15
55855: DOUBLE
55856: EQUAL
55857: IFTRUE 55879
55859: LD_INT 11
55861: DOUBLE
55862: EQUAL
55863: IFTRUE 55879
55865: LD_INT 14
55867: DOUBLE
55868: EQUAL
55869: IFTRUE 55879
55871: LD_INT 10
55873: DOUBLE
55874: EQUAL
55875: IFTRUE 55879
55877: GO 55935
55879: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55880: LD_ADDR_VAR 0 9
55884: PUSH
55885: LD_VAR 0 41
55889: PUSH
55890: LD_VAR 0 42
55894: PUSH
55895: LD_VAR 0 43
55899: PUSH
55900: LD_VAR 0 44
55904: PUSH
55905: LD_VAR 0 45
55909: PUSH
55910: LD_VAR 0 46
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: PUSH
55923: LD_VAR 0 4
55927: PUSH
55928: LD_INT 1
55930: PLUS
55931: ARRAY
55932: ST_TO_ADDR
55933: GO 56188
55935: LD_INT 36
55937: DOUBLE
55938: EQUAL
55939: IFTRUE 55943
55941: GO 55999
55943: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55944: LD_ADDR_VAR 0 9
55948: PUSH
55949: LD_VAR 0 47
55953: PUSH
55954: LD_VAR 0 48
55958: PUSH
55959: LD_VAR 0 49
55963: PUSH
55964: LD_VAR 0 50
55968: PUSH
55969: LD_VAR 0 51
55973: PUSH
55974: LD_VAR 0 52
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: PUSH
55987: LD_VAR 0 4
55991: PUSH
55992: LD_INT 1
55994: PLUS
55995: ARRAY
55996: ST_TO_ADDR
55997: GO 56188
55999: LD_INT 4
56001: DOUBLE
56002: EQUAL
56003: IFTRUE 56025
56005: LD_INT 5
56007: DOUBLE
56008: EQUAL
56009: IFTRUE 56025
56011: LD_INT 34
56013: DOUBLE
56014: EQUAL
56015: IFTRUE 56025
56017: LD_INT 37
56019: DOUBLE
56020: EQUAL
56021: IFTRUE 56025
56023: GO 56081
56025: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56026: LD_ADDR_VAR 0 9
56030: PUSH
56031: LD_VAR 0 53
56035: PUSH
56036: LD_VAR 0 54
56040: PUSH
56041: LD_VAR 0 55
56045: PUSH
56046: LD_VAR 0 56
56050: PUSH
56051: LD_VAR 0 57
56055: PUSH
56056: LD_VAR 0 58
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: PUSH
56069: LD_VAR 0 4
56073: PUSH
56074: LD_INT 1
56076: PLUS
56077: ARRAY
56078: ST_TO_ADDR
56079: GO 56188
56081: LD_INT 31
56083: DOUBLE
56084: EQUAL
56085: IFTRUE 56131
56087: LD_INT 32
56089: DOUBLE
56090: EQUAL
56091: IFTRUE 56131
56093: LD_INT 33
56095: DOUBLE
56096: EQUAL
56097: IFTRUE 56131
56099: LD_INT 27
56101: DOUBLE
56102: EQUAL
56103: IFTRUE 56131
56105: LD_INT 26
56107: DOUBLE
56108: EQUAL
56109: IFTRUE 56131
56111: LD_INT 28
56113: DOUBLE
56114: EQUAL
56115: IFTRUE 56131
56117: LD_INT 29
56119: DOUBLE
56120: EQUAL
56121: IFTRUE 56131
56123: LD_INT 30
56125: DOUBLE
56126: EQUAL
56127: IFTRUE 56131
56129: GO 56187
56131: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56132: LD_ADDR_VAR 0 9
56136: PUSH
56137: LD_VAR 0 59
56141: PUSH
56142: LD_VAR 0 60
56146: PUSH
56147: LD_VAR 0 61
56151: PUSH
56152: LD_VAR 0 62
56156: PUSH
56157: LD_VAR 0 63
56161: PUSH
56162: LD_VAR 0 64
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: PUSH
56175: LD_VAR 0 4
56179: PUSH
56180: LD_INT 1
56182: PLUS
56183: ARRAY
56184: ST_TO_ADDR
56185: GO 56188
56187: POP
// temp_list2 = [ ] ;
56188: LD_ADDR_VAR 0 10
56192: PUSH
56193: EMPTY
56194: ST_TO_ADDR
// for i in temp_list do
56195: LD_ADDR_VAR 0 8
56199: PUSH
56200: LD_VAR 0 9
56204: PUSH
56205: FOR_IN
56206: IFFALSE 56258
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56208: LD_ADDR_VAR 0 10
56212: PUSH
56213: LD_VAR 0 10
56217: PUSH
56218: LD_VAR 0 8
56222: PUSH
56223: LD_INT 1
56225: ARRAY
56226: PUSH
56227: LD_VAR 0 2
56231: PLUS
56232: PUSH
56233: LD_VAR 0 8
56237: PUSH
56238: LD_INT 2
56240: ARRAY
56241: PUSH
56242: LD_VAR 0 3
56246: PLUS
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: ADD
56255: ST_TO_ADDR
56256: GO 56205
56258: POP
56259: POP
// result = temp_list2 ;
56260: LD_ADDR_VAR 0 7
56264: PUSH
56265: LD_VAR 0 10
56269: ST_TO_ADDR
// end ;
56270: LD_VAR 0 7
56274: RET
// export function EnemyInRange ( unit , dist ) ; begin
56275: LD_INT 0
56277: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56278: LD_ADDR_VAR 0 3
56282: PUSH
56283: LD_VAR 0 1
56287: PPUSH
56288: CALL_OW 255
56292: PPUSH
56293: LD_VAR 0 1
56297: PPUSH
56298: CALL_OW 250
56302: PPUSH
56303: LD_VAR 0 1
56307: PPUSH
56308: CALL_OW 251
56312: PPUSH
56313: LD_VAR 0 2
56317: PPUSH
56318: CALL 29671 0 4
56322: PUSH
56323: LD_INT 4
56325: ARRAY
56326: ST_TO_ADDR
// end ;
56327: LD_VAR 0 3
56331: RET
// export function PlayerSeeMe ( unit ) ; begin
56332: LD_INT 0
56334: PPUSH
// result := See ( your_side , unit ) ;
56335: LD_ADDR_VAR 0 2
56339: PUSH
56340: LD_OWVAR 2
56344: PPUSH
56345: LD_VAR 0 1
56349: PPUSH
56350: CALL_OW 292
56354: ST_TO_ADDR
// end ;
56355: LD_VAR 0 2
56359: RET
// export function ReverseDir ( unit ) ; begin
56360: LD_INT 0
56362: PPUSH
// if not unit then
56363: LD_VAR 0 1
56367: NOT
56368: IFFALSE 56372
// exit ;
56370: GO 56395
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56372: LD_ADDR_VAR 0 2
56376: PUSH
56377: LD_VAR 0 1
56381: PPUSH
56382: CALL_OW 254
56386: PUSH
56387: LD_INT 3
56389: PLUS
56390: PUSH
56391: LD_INT 6
56393: MOD
56394: ST_TO_ADDR
// end ;
56395: LD_VAR 0 2
56399: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56400: LD_INT 0
56402: PPUSH
56403: PPUSH
56404: PPUSH
56405: PPUSH
56406: PPUSH
// if not hexes then
56407: LD_VAR 0 2
56411: NOT
56412: IFFALSE 56416
// exit ;
56414: GO 56564
// dist := 9999 ;
56416: LD_ADDR_VAR 0 5
56420: PUSH
56421: LD_INT 9999
56423: ST_TO_ADDR
// for i = 1 to hexes do
56424: LD_ADDR_VAR 0 4
56428: PUSH
56429: DOUBLE
56430: LD_INT 1
56432: DEC
56433: ST_TO_ADDR
56434: LD_VAR 0 2
56438: PUSH
56439: FOR_TO
56440: IFFALSE 56552
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56442: LD_VAR 0 1
56446: PPUSH
56447: LD_VAR 0 2
56451: PUSH
56452: LD_VAR 0 4
56456: ARRAY
56457: PUSH
56458: LD_INT 1
56460: ARRAY
56461: PPUSH
56462: LD_VAR 0 2
56466: PUSH
56467: LD_VAR 0 4
56471: ARRAY
56472: PUSH
56473: LD_INT 2
56475: ARRAY
56476: PPUSH
56477: CALL_OW 297
56481: PUSH
56482: LD_VAR 0 5
56486: LESS
56487: IFFALSE 56550
// begin hex := hexes [ i ] ;
56489: LD_ADDR_VAR 0 7
56493: PUSH
56494: LD_VAR 0 2
56498: PUSH
56499: LD_VAR 0 4
56503: ARRAY
56504: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56505: LD_ADDR_VAR 0 5
56509: PUSH
56510: LD_VAR 0 1
56514: PPUSH
56515: LD_VAR 0 2
56519: PUSH
56520: LD_VAR 0 4
56524: ARRAY
56525: PUSH
56526: LD_INT 1
56528: ARRAY
56529: PPUSH
56530: LD_VAR 0 2
56534: PUSH
56535: LD_VAR 0 4
56539: ARRAY
56540: PUSH
56541: LD_INT 2
56543: ARRAY
56544: PPUSH
56545: CALL_OW 297
56549: ST_TO_ADDR
// end ; end ;
56550: GO 56439
56552: POP
56553: POP
// result := hex ;
56554: LD_ADDR_VAR 0 3
56558: PUSH
56559: LD_VAR 0 7
56563: ST_TO_ADDR
// end ;
56564: LD_VAR 0 3
56568: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56569: LD_INT 0
56571: PPUSH
56572: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56573: LD_VAR 0 1
56577: NOT
56578: PUSH
56579: LD_VAR 0 1
56583: PUSH
56584: LD_INT 21
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 23
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PPUSH
56608: CALL_OW 69
56612: IN
56613: NOT
56614: OR
56615: IFFALSE 56619
// exit ;
56617: GO 56666
// for i = 1 to 3 do
56619: LD_ADDR_VAR 0 3
56623: PUSH
56624: DOUBLE
56625: LD_INT 1
56627: DEC
56628: ST_TO_ADDR
56629: LD_INT 3
56631: PUSH
56632: FOR_TO
56633: IFFALSE 56664
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56635: LD_VAR 0 1
56639: PPUSH
56640: CALL_OW 250
56644: PPUSH
56645: LD_VAR 0 1
56649: PPUSH
56650: CALL_OW 251
56654: PPUSH
56655: LD_INT 1
56657: PPUSH
56658: CALL_OW 453
56662: GO 56632
56664: POP
56665: POP
// end ;
56666: LD_VAR 0 2
56670: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56671: LD_INT 0
56673: PPUSH
56674: PPUSH
56675: PPUSH
56676: PPUSH
56677: PPUSH
56678: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56679: LD_VAR 0 1
56683: NOT
56684: PUSH
56685: LD_VAR 0 2
56689: NOT
56690: OR
56691: PUSH
56692: LD_VAR 0 1
56696: PPUSH
56697: CALL_OW 314
56701: OR
56702: IFFALSE 56706
// exit ;
56704: GO 57147
// x := GetX ( enemy_unit ) ;
56706: LD_ADDR_VAR 0 7
56710: PUSH
56711: LD_VAR 0 2
56715: PPUSH
56716: CALL_OW 250
56720: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56721: LD_ADDR_VAR 0 8
56725: PUSH
56726: LD_VAR 0 2
56730: PPUSH
56731: CALL_OW 251
56735: ST_TO_ADDR
// if not x or not y then
56736: LD_VAR 0 7
56740: NOT
56741: PUSH
56742: LD_VAR 0 8
56746: NOT
56747: OR
56748: IFFALSE 56752
// exit ;
56750: GO 57147
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56752: LD_ADDR_VAR 0 6
56756: PUSH
56757: LD_VAR 0 7
56761: PPUSH
56762: LD_INT 0
56764: PPUSH
56765: LD_INT 4
56767: PPUSH
56768: CALL_OW 272
56772: PUSH
56773: LD_VAR 0 8
56777: PPUSH
56778: LD_INT 0
56780: PPUSH
56781: LD_INT 4
56783: PPUSH
56784: CALL_OW 273
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_VAR 0 7
56797: PPUSH
56798: LD_INT 1
56800: PPUSH
56801: LD_INT 4
56803: PPUSH
56804: CALL_OW 272
56808: PUSH
56809: LD_VAR 0 8
56813: PPUSH
56814: LD_INT 1
56816: PPUSH
56817: LD_INT 4
56819: PPUSH
56820: CALL_OW 273
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_VAR 0 7
56833: PPUSH
56834: LD_INT 2
56836: PPUSH
56837: LD_INT 4
56839: PPUSH
56840: CALL_OW 272
56844: PUSH
56845: LD_VAR 0 8
56849: PPUSH
56850: LD_INT 2
56852: PPUSH
56853: LD_INT 4
56855: PPUSH
56856: CALL_OW 273
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_VAR 0 7
56869: PPUSH
56870: LD_INT 3
56872: PPUSH
56873: LD_INT 4
56875: PPUSH
56876: CALL_OW 272
56880: PUSH
56881: LD_VAR 0 8
56885: PPUSH
56886: LD_INT 3
56888: PPUSH
56889: LD_INT 4
56891: PPUSH
56892: CALL_OW 273
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_VAR 0 7
56905: PPUSH
56906: LD_INT 4
56908: PPUSH
56909: LD_INT 4
56911: PPUSH
56912: CALL_OW 272
56916: PUSH
56917: LD_VAR 0 8
56921: PPUSH
56922: LD_INT 4
56924: PPUSH
56925: LD_INT 4
56927: PPUSH
56928: CALL_OW 273
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_VAR 0 7
56941: PPUSH
56942: LD_INT 5
56944: PPUSH
56945: LD_INT 4
56947: PPUSH
56948: CALL_OW 272
56952: PUSH
56953: LD_VAR 0 8
56957: PPUSH
56958: LD_INT 5
56960: PPUSH
56961: LD_INT 4
56963: PPUSH
56964: CALL_OW 273
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: ST_TO_ADDR
// for i = tmp downto 1 do
56981: LD_ADDR_VAR 0 4
56985: PUSH
56986: DOUBLE
56987: LD_VAR 0 6
56991: INC
56992: ST_TO_ADDR
56993: LD_INT 1
56995: PUSH
56996: FOR_DOWNTO
56997: IFFALSE 57098
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56999: LD_VAR 0 6
57003: PUSH
57004: LD_VAR 0 4
57008: ARRAY
57009: PUSH
57010: LD_INT 1
57012: ARRAY
57013: PPUSH
57014: LD_VAR 0 6
57018: PUSH
57019: LD_VAR 0 4
57023: ARRAY
57024: PUSH
57025: LD_INT 2
57027: ARRAY
57028: PPUSH
57029: CALL_OW 488
57033: NOT
57034: PUSH
57035: LD_VAR 0 6
57039: PUSH
57040: LD_VAR 0 4
57044: ARRAY
57045: PUSH
57046: LD_INT 1
57048: ARRAY
57049: PPUSH
57050: LD_VAR 0 6
57054: PUSH
57055: LD_VAR 0 4
57059: ARRAY
57060: PUSH
57061: LD_INT 2
57063: ARRAY
57064: PPUSH
57065: CALL_OW 428
57069: PUSH
57070: LD_INT 0
57072: NONEQUAL
57073: OR
57074: IFFALSE 57096
// tmp := Delete ( tmp , i ) ;
57076: LD_ADDR_VAR 0 6
57080: PUSH
57081: LD_VAR 0 6
57085: PPUSH
57086: LD_VAR 0 4
57090: PPUSH
57091: CALL_OW 3
57095: ST_TO_ADDR
57096: GO 56996
57098: POP
57099: POP
// j := GetClosestHex ( unit , tmp ) ;
57100: LD_ADDR_VAR 0 5
57104: PUSH
57105: LD_VAR 0 1
57109: PPUSH
57110: LD_VAR 0 6
57114: PPUSH
57115: CALL 56400 0 2
57119: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57120: LD_VAR 0 1
57124: PPUSH
57125: LD_VAR 0 5
57129: PUSH
57130: LD_INT 1
57132: ARRAY
57133: PPUSH
57134: LD_VAR 0 5
57138: PUSH
57139: LD_INT 2
57141: ARRAY
57142: PPUSH
57143: CALL_OW 111
// end ;
57147: LD_VAR 0 3
57151: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57152: LD_INT 0
57154: PPUSH
57155: PPUSH
57156: PPUSH
// uc_side = 0 ;
57157: LD_ADDR_OWVAR 20
57161: PUSH
57162: LD_INT 0
57164: ST_TO_ADDR
// uc_nation = 0 ;
57165: LD_ADDR_OWVAR 21
57169: PUSH
57170: LD_INT 0
57172: ST_TO_ADDR
// InitHc_All ( ) ;
57173: CALL_OW 584
// InitVc ;
57177: CALL_OW 20
// if mastodonts then
57181: LD_VAR 0 6
57185: IFFALSE 57252
// for i = 1 to mastodonts do
57187: LD_ADDR_VAR 0 11
57191: PUSH
57192: DOUBLE
57193: LD_INT 1
57195: DEC
57196: ST_TO_ADDR
57197: LD_VAR 0 6
57201: PUSH
57202: FOR_TO
57203: IFFALSE 57250
// begin vc_chassis := 31 ;
57205: LD_ADDR_OWVAR 37
57209: PUSH
57210: LD_INT 31
57212: ST_TO_ADDR
// vc_control := control_rider ;
57213: LD_ADDR_OWVAR 38
57217: PUSH
57218: LD_INT 4
57220: ST_TO_ADDR
// animal := CreateVehicle ;
57221: LD_ADDR_VAR 0 12
57225: PUSH
57226: CALL_OW 45
57230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57231: LD_VAR 0 12
57235: PPUSH
57236: LD_VAR 0 8
57240: PPUSH
57241: LD_INT 0
57243: PPUSH
57244: CALL 59440 0 3
// end ;
57248: GO 57202
57250: POP
57251: POP
// if horses then
57252: LD_VAR 0 5
57256: IFFALSE 57323
// for i = 1 to horses do
57258: LD_ADDR_VAR 0 11
57262: PUSH
57263: DOUBLE
57264: LD_INT 1
57266: DEC
57267: ST_TO_ADDR
57268: LD_VAR 0 5
57272: PUSH
57273: FOR_TO
57274: IFFALSE 57321
// begin hc_class := 21 ;
57276: LD_ADDR_OWVAR 28
57280: PUSH
57281: LD_INT 21
57283: ST_TO_ADDR
// hc_gallery :=  ;
57284: LD_ADDR_OWVAR 33
57288: PUSH
57289: LD_STRING 
57291: ST_TO_ADDR
// animal := CreateHuman ;
57292: LD_ADDR_VAR 0 12
57296: PUSH
57297: CALL_OW 44
57301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57302: LD_VAR 0 12
57306: PPUSH
57307: LD_VAR 0 8
57311: PPUSH
57312: LD_INT 0
57314: PPUSH
57315: CALL 59440 0 3
// end ;
57319: GO 57273
57321: POP
57322: POP
// if birds then
57323: LD_VAR 0 1
57327: IFFALSE 57394
// for i = 1 to birds do
57329: LD_ADDR_VAR 0 11
57333: PUSH
57334: DOUBLE
57335: LD_INT 1
57337: DEC
57338: ST_TO_ADDR
57339: LD_VAR 0 1
57343: PUSH
57344: FOR_TO
57345: IFFALSE 57392
// begin hc_class = 18 ;
57347: LD_ADDR_OWVAR 28
57351: PUSH
57352: LD_INT 18
57354: ST_TO_ADDR
// hc_gallery =  ;
57355: LD_ADDR_OWVAR 33
57359: PUSH
57360: LD_STRING 
57362: ST_TO_ADDR
// animal := CreateHuman ;
57363: LD_ADDR_VAR 0 12
57367: PUSH
57368: CALL_OW 44
57372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57373: LD_VAR 0 12
57377: PPUSH
57378: LD_VAR 0 8
57382: PPUSH
57383: LD_INT 0
57385: PPUSH
57386: CALL 59440 0 3
// end ;
57390: GO 57344
57392: POP
57393: POP
// if tigers then
57394: LD_VAR 0 2
57398: IFFALSE 57482
// for i = 1 to tigers do
57400: LD_ADDR_VAR 0 11
57404: PUSH
57405: DOUBLE
57406: LD_INT 1
57408: DEC
57409: ST_TO_ADDR
57410: LD_VAR 0 2
57414: PUSH
57415: FOR_TO
57416: IFFALSE 57480
// begin hc_class = class_tiger ;
57418: LD_ADDR_OWVAR 28
57422: PUSH
57423: LD_INT 14
57425: ST_TO_ADDR
// hc_gallery =  ;
57426: LD_ADDR_OWVAR 33
57430: PUSH
57431: LD_STRING 
57433: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57434: LD_ADDR_OWVAR 35
57438: PUSH
57439: LD_INT 7
57441: NEG
57442: PPUSH
57443: LD_INT 7
57445: PPUSH
57446: CALL_OW 12
57450: ST_TO_ADDR
// animal := CreateHuman ;
57451: LD_ADDR_VAR 0 12
57455: PUSH
57456: CALL_OW 44
57460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57461: LD_VAR 0 12
57465: PPUSH
57466: LD_VAR 0 8
57470: PPUSH
57471: LD_INT 0
57473: PPUSH
57474: CALL 59440 0 3
// end ;
57478: GO 57415
57480: POP
57481: POP
// if apemans then
57482: LD_VAR 0 3
57486: IFFALSE 57609
// for i = 1 to apemans do
57488: LD_ADDR_VAR 0 11
57492: PUSH
57493: DOUBLE
57494: LD_INT 1
57496: DEC
57497: ST_TO_ADDR
57498: LD_VAR 0 3
57502: PUSH
57503: FOR_TO
57504: IFFALSE 57607
// begin hc_class = class_apeman ;
57506: LD_ADDR_OWVAR 28
57510: PUSH
57511: LD_INT 12
57513: ST_TO_ADDR
// hc_gallery =  ;
57514: LD_ADDR_OWVAR 33
57518: PUSH
57519: LD_STRING 
57521: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57522: LD_ADDR_OWVAR 35
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PPUSH
57531: LD_INT 2
57533: PPUSH
57534: CALL_OW 12
57538: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57539: LD_ADDR_OWVAR 31
57543: PUSH
57544: LD_INT 1
57546: PPUSH
57547: LD_INT 3
57549: PPUSH
57550: CALL_OW 12
57554: PUSH
57555: LD_INT 1
57557: PPUSH
57558: LD_INT 3
57560: PPUSH
57561: CALL_OW 12
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: ST_TO_ADDR
// animal := CreateHuman ;
57578: LD_ADDR_VAR 0 12
57582: PUSH
57583: CALL_OW 44
57587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57588: LD_VAR 0 12
57592: PPUSH
57593: LD_VAR 0 8
57597: PPUSH
57598: LD_INT 0
57600: PPUSH
57601: CALL 59440 0 3
// end ;
57605: GO 57503
57607: POP
57608: POP
// if enchidnas then
57609: LD_VAR 0 4
57613: IFFALSE 57680
// for i = 1 to enchidnas do
57615: LD_ADDR_VAR 0 11
57619: PUSH
57620: DOUBLE
57621: LD_INT 1
57623: DEC
57624: ST_TO_ADDR
57625: LD_VAR 0 4
57629: PUSH
57630: FOR_TO
57631: IFFALSE 57678
// begin hc_class = 13 ;
57633: LD_ADDR_OWVAR 28
57637: PUSH
57638: LD_INT 13
57640: ST_TO_ADDR
// hc_gallery =  ;
57641: LD_ADDR_OWVAR 33
57645: PUSH
57646: LD_STRING 
57648: ST_TO_ADDR
// animal := CreateHuman ;
57649: LD_ADDR_VAR 0 12
57653: PUSH
57654: CALL_OW 44
57658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57659: LD_VAR 0 12
57663: PPUSH
57664: LD_VAR 0 8
57668: PPUSH
57669: LD_INT 0
57671: PPUSH
57672: CALL 59440 0 3
// end ;
57676: GO 57630
57678: POP
57679: POP
// if fishes then
57680: LD_VAR 0 7
57684: IFFALSE 57751
// for i = 1 to fishes do
57686: LD_ADDR_VAR 0 11
57690: PUSH
57691: DOUBLE
57692: LD_INT 1
57694: DEC
57695: ST_TO_ADDR
57696: LD_VAR 0 7
57700: PUSH
57701: FOR_TO
57702: IFFALSE 57749
// begin hc_class = 20 ;
57704: LD_ADDR_OWVAR 28
57708: PUSH
57709: LD_INT 20
57711: ST_TO_ADDR
// hc_gallery =  ;
57712: LD_ADDR_OWVAR 33
57716: PUSH
57717: LD_STRING 
57719: ST_TO_ADDR
// animal := CreateHuman ;
57720: LD_ADDR_VAR 0 12
57724: PUSH
57725: CALL_OW 44
57729: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57730: LD_VAR 0 12
57734: PPUSH
57735: LD_VAR 0 9
57739: PPUSH
57740: LD_INT 0
57742: PPUSH
57743: CALL 59440 0 3
// end ;
57747: GO 57701
57749: POP
57750: POP
// end ;
57751: LD_VAR 0 10
57755: RET
// export function WantHeal ( sci , unit ) ; begin
57756: LD_INT 0
57758: PPUSH
// if GetTaskList ( sci ) > 0 then
57759: LD_VAR 0 1
57763: PPUSH
57764: CALL_OW 437
57768: PUSH
57769: LD_INT 0
57771: GREATER
57772: IFFALSE 57842
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57774: LD_VAR 0 1
57778: PPUSH
57779: CALL_OW 437
57783: PUSH
57784: LD_INT 1
57786: ARRAY
57787: PUSH
57788: LD_INT 1
57790: ARRAY
57791: PUSH
57792: LD_STRING l
57794: EQUAL
57795: PUSH
57796: LD_VAR 0 1
57800: PPUSH
57801: CALL_OW 437
57805: PUSH
57806: LD_INT 1
57808: ARRAY
57809: PUSH
57810: LD_INT 4
57812: ARRAY
57813: PUSH
57814: LD_VAR 0 2
57818: EQUAL
57819: AND
57820: IFFALSE 57832
// result := true else
57822: LD_ADDR_VAR 0 3
57826: PUSH
57827: LD_INT 1
57829: ST_TO_ADDR
57830: GO 57840
// result := false ;
57832: LD_ADDR_VAR 0 3
57836: PUSH
57837: LD_INT 0
57839: ST_TO_ADDR
// end else
57840: GO 57850
// result := false ;
57842: LD_ADDR_VAR 0 3
57846: PUSH
57847: LD_INT 0
57849: ST_TO_ADDR
// end ;
57850: LD_VAR 0 3
57854: RET
// export function HealTarget ( sci ) ; begin
57855: LD_INT 0
57857: PPUSH
// if not sci then
57858: LD_VAR 0 1
57862: NOT
57863: IFFALSE 57867
// exit ;
57865: GO 57932
// result := 0 ;
57867: LD_ADDR_VAR 0 2
57871: PUSH
57872: LD_INT 0
57874: ST_TO_ADDR
// if GetTaskList ( sci ) then
57875: LD_VAR 0 1
57879: PPUSH
57880: CALL_OW 437
57884: IFFALSE 57932
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57886: LD_VAR 0 1
57890: PPUSH
57891: CALL_OW 437
57895: PUSH
57896: LD_INT 1
57898: ARRAY
57899: PUSH
57900: LD_INT 1
57902: ARRAY
57903: PUSH
57904: LD_STRING l
57906: EQUAL
57907: IFFALSE 57932
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57909: LD_ADDR_VAR 0 2
57913: PUSH
57914: LD_VAR 0 1
57918: PPUSH
57919: CALL_OW 437
57923: PUSH
57924: LD_INT 1
57926: ARRAY
57927: PUSH
57928: LD_INT 4
57930: ARRAY
57931: ST_TO_ADDR
// end ;
57932: LD_VAR 0 2
57936: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57937: LD_INT 0
57939: PPUSH
57940: PPUSH
57941: PPUSH
57942: PPUSH
// if not base_units then
57943: LD_VAR 0 1
57947: NOT
57948: IFFALSE 57952
// exit ;
57950: GO 58039
// result := false ;
57952: LD_ADDR_VAR 0 2
57956: PUSH
57957: LD_INT 0
57959: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57960: LD_ADDR_VAR 0 5
57964: PUSH
57965: LD_VAR 0 1
57969: PPUSH
57970: LD_INT 21
57972: PUSH
57973: LD_INT 3
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PPUSH
57980: CALL_OW 72
57984: ST_TO_ADDR
// if not tmp then
57985: LD_VAR 0 5
57989: NOT
57990: IFFALSE 57994
// exit ;
57992: GO 58039
// for i in tmp do
57994: LD_ADDR_VAR 0 3
57998: PUSH
57999: LD_VAR 0 5
58003: PUSH
58004: FOR_IN
58005: IFFALSE 58037
// begin result := EnemyInRange ( i , 22 ) ;
58007: LD_ADDR_VAR 0 2
58011: PUSH
58012: LD_VAR 0 3
58016: PPUSH
58017: LD_INT 22
58019: PPUSH
58020: CALL 56275 0 2
58024: ST_TO_ADDR
// if result then
58025: LD_VAR 0 2
58029: IFFALSE 58035
// exit ;
58031: POP
58032: POP
58033: GO 58039
// end ;
58035: GO 58004
58037: POP
58038: POP
// end ;
58039: LD_VAR 0 2
58043: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58044: LD_INT 0
58046: PPUSH
58047: PPUSH
// if not units then
58048: LD_VAR 0 1
58052: NOT
58053: IFFALSE 58057
// exit ;
58055: GO 58127
// result := [ ] ;
58057: LD_ADDR_VAR 0 3
58061: PUSH
58062: EMPTY
58063: ST_TO_ADDR
// for i in units do
58064: LD_ADDR_VAR 0 4
58068: PUSH
58069: LD_VAR 0 1
58073: PUSH
58074: FOR_IN
58075: IFFALSE 58125
// if GetTag ( i ) = tag then
58077: LD_VAR 0 4
58081: PPUSH
58082: CALL_OW 110
58086: PUSH
58087: LD_VAR 0 2
58091: EQUAL
58092: IFFALSE 58123
// result := Insert ( result , result + 1 , i ) ;
58094: LD_ADDR_VAR 0 3
58098: PUSH
58099: LD_VAR 0 3
58103: PPUSH
58104: LD_VAR 0 3
58108: PUSH
58109: LD_INT 1
58111: PLUS
58112: PPUSH
58113: LD_VAR 0 4
58117: PPUSH
58118: CALL_OW 2
58122: ST_TO_ADDR
58123: GO 58074
58125: POP
58126: POP
// end ;
58127: LD_VAR 0 3
58131: RET
// export function IsDriver ( un ) ; begin
58132: LD_INT 0
58134: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58135: LD_ADDR_VAR 0 2
58139: PUSH
58140: LD_VAR 0 1
58144: PUSH
58145: LD_INT 55
58147: PUSH
58148: EMPTY
58149: LIST
58150: PPUSH
58151: CALL_OW 69
58155: IN
58156: ST_TO_ADDR
// end ;
58157: LD_VAR 0 2
58161: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58162: LD_INT 0
58164: PPUSH
58165: PPUSH
// list := [ ] ;
58166: LD_ADDR_VAR 0 5
58170: PUSH
58171: EMPTY
58172: ST_TO_ADDR
// case d of 0 :
58173: LD_VAR 0 3
58177: PUSH
58178: LD_INT 0
58180: DOUBLE
58181: EQUAL
58182: IFTRUE 58186
58184: GO 58319
58186: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58187: LD_ADDR_VAR 0 5
58191: PUSH
58192: LD_VAR 0 1
58196: PUSH
58197: LD_INT 4
58199: MINUS
58200: PUSH
58201: LD_VAR 0 2
58205: PUSH
58206: LD_INT 4
58208: MINUS
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: PUSH
58218: LD_VAR 0 1
58222: PUSH
58223: LD_INT 3
58225: MINUS
58226: PUSH
58227: LD_VAR 0 2
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: PUSH
58240: LD_VAR 0 1
58244: PUSH
58245: LD_INT 4
58247: PLUS
58248: PUSH
58249: LD_VAR 0 2
58253: PUSH
58254: LD_INT 4
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: PUSH
58262: LD_VAR 0 1
58266: PUSH
58267: LD_INT 3
58269: PLUS
58270: PUSH
58271: LD_VAR 0 2
58275: PUSH
58276: LD_INT 3
58278: PLUS
58279: PUSH
58280: LD_INT 5
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: PUSH
58288: LD_VAR 0 1
58292: PUSH
58293: LD_VAR 0 2
58297: PUSH
58298: LD_INT 4
58300: PLUS
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// end ; 1 :
58317: GO 59017
58319: LD_INT 1
58321: DOUBLE
58322: EQUAL
58323: IFTRUE 58327
58325: GO 58460
58327: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58328: LD_ADDR_VAR 0 5
58332: PUSH
58333: LD_VAR 0 1
58337: PUSH
58338: LD_VAR 0 2
58342: PUSH
58343: LD_INT 4
58345: MINUS
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: PUSH
58355: LD_VAR 0 1
58359: PUSH
58360: LD_INT 3
58362: MINUS
58363: PUSH
58364: LD_VAR 0 2
58368: PUSH
58369: LD_INT 3
58371: MINUS
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: LIST
58380: PUSH
58381: LD_VAR 0 1
58385: PUSH
58386: LD_INT 4
58388: MINUS
58389: PUSH
58390: LD_VAR 0 2
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: PUSH
58403: LD_VAR 0 1
58407: PUSH
58408: LD_VAR 0 2
58412: PUSH
58413: LD_INT 3
58415: PLUS
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: PUSH
58425: LD_VAR 0 1
58429: PUSH
58430: LD_INT 4
58432: PLUS
58433: PUSH
58434: LD_VAR 0 2
58438: PUSH
58439: LD_INT 4
58441: PLUS
58442: PUSH
58443: LD_INT 5
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: ST_TO_ADDR
// end ; 2 :
58458: GO 59017
58460: LD_INT 2
58462: DOUBLE
58463: EQUAL
58464: IFTRUE 58468
58466: GO 58597
58468: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58469: LD_ADDR_VAR 0 5
58473: PUSH
58474: LD_VAR 0 1
58478: PUSH
58479: LD_VAR 0 2
58483: PUSH
58484: LD_INT 3
58486: MINUS
58487: PUSH
58488: LD_INT 3
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: PUSH
58496: LD_VAR 0 1
58500: PUSH
58501: LD_INT 4
58503: PLUS
58504: PUSH
58505: LD_VAR 0 2
58509: PUSH
58510: LD_INT 4
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: PUSH
58518: LD_VAR 0 1
58522: PUSH
58523: LD_VAR 0 2
58527: PUSH
58528: LD_INT 4
58530: PLUS
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: PUSH
58540: LD_VAR 0 1
58544: PUSH
58545: LD_INT 3
58547: MINUS
58548: PUSH
58549: LD_VAR 0 2
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: LIST
58561: PUSH
58562: LD_VAR 0 1
58566: PUSH
58567: LD_INT 4
58569: MINUS
58570: PUSH
58571: LD_VAR 0 2
58575: PUSH
58576: LD_INT 4
58578: MINUS
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// end ; 3 :
58595: GO 59017
58597: LD_INT 3
58599: DOUBLE
58600: EQUAL
58601: IFTRUE 58605
58603: GO 58738
58605: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58606: LD_ADDR_VAR 0 5
58610: PUSH
58611: LD_VAR 0 1
58615: PUSH
58616: LD_INT 3
58618: PLUS
58619: PUSH
58620: LD_VAR 0 2
58624: PUSH
58625: LD_INT 4
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: PUSH
58633: LD_VAR 0 1
58637: PUSH
58638: LD_INT 4
58640: PLUS
58641: PUSH
58642: LD_VAR 0 2
58646: PUSH
58647: LD_INT 4
58649: PLUS
58650: PUSH
58651: LD_INT 5
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: PUSH
58659: LD_VAR 0 1
58663: PUSH
58664: LD_INT 4
58666: MINUS
58667: PUSH
58668: LD_VAR 0 2
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: LIST
58680: PUSH
58681: LD_VAR 0 1
58685: PUSH
58686: LD_VAR 0 2
58690: PUSH
58691: LD_INT 4
58693: MINUS
58694: PUSH
58695: LD_INT 3
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: LIST
58702: PUSH
58703: LD_VAR 0 1
58707: PUSH
58708: LD_INT 3
58710: MINUS
58711: PUSH
58712: LD_VAR 0 2
58716: PUSH
58717: LD_INT 3
58719: MINUS
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// end ; 4 :
58736: GO 59017
58738: LD_INT 4
58740: DOUBLE
58741: EQUAL
58742: IFTRUE 58746
58744: GO 58879
58746: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58747: LD_ADDR_VAR 0 5
58751: PUSH
58752: LD_VAR 0 1
58756: PUSH
58757: LD_VAR 0 2
58761: PUSH
58762: LD_INT 4
58764: PLUS
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: PUSH
58774: LD_VAR 0 1
58778: PUSH
58779: LD_INT 3
58781: PLUS
58782: PUSH
58783: LD_VAR 0 2
58787: PUSH
58788: LD_INT 3
58790: PLUS
58791: PUSH
58792: LD_INT 5
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: LIST
58799: PUSH
58800: LD_VAR 0 1
58804: PUSH
58805: LD_INT 4
58807: PLUS
58808: PUSH
58809: LD_VAR 0 2
58813: PUSH
58814: LD_INT 4
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: PUSH
58822: LD_VAR 0 1
58826: PUSH
58827: LD_VAR 0 2
58831: PUSH
58832: LD_INT 3
58834: MINUS
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: PUSH
58844: LD_VAR 0 1
58848: PUSH
58849: LD_INT 4
58851: MINUS
58852: PUSH
58853: LD_VAR 0 2
58857: PUSH
58858: LD_INT 4
58860: MINUS
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: ST_TO_ADDR
// end ; 5 :
58877: GO 59017
58879: LD_INT 5
58881: DOUBLE
58882: EQUAL
58883: IFTRUE 58887
58885: GO 59016
58887: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58888: LD_ADDR_VAR 0 5
58892: PUSH
58893: LD_VAR 0 1
58897: PUSH
58898: LD_INT 4
58900: MINUS
58901: PUSH
58902: LD_VAR 0 2
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: LIST
58914: PUSH
58915: LD_VAR 0 1
58919: PUSH
58920: LD_VAR 0 2
58924: PUSH
58925: LD_INT 4
58927: MINUS
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: PUSH
58937: LD_VAR 0 1
58941: PUSH
58942: LD_INT 4
58944: PLUS
58945: PUSH
58946: LD_VAR 0 2
58950: PUSH
58951: LD_INT 4
58953: PLUS
58954: PUSH
58955: LD_INT 5
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: LIST
58962: PUSH
58963: LD_VAR 0 1
58967: PUSH
58968: LD_INT 3
58970: PLUS
58971: PUSH
58972: LD_VAR 0 2
58976: PUSH
58977: LD_INT 4
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: LIST
58984: PUSH
58985: LD_VAR 0 1
58989: PUSH
58990: LD_VAR 0 2
58994: PUSH
58995: LD_INT 3
58997: PLUS
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: ST_TO_ADDR
// end ; end ;
59014: GO 59017
59016: POP
// result := list ;
59017: LD_ADDR_VAR 0 4
59021: PUSH
59022: LD_VAR 0 5
59026: ST_TO_ADDR
// end ;
59027: LD_VAR 0 4
59031: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59032: LD_INT 0
59034: PPUSH
59035: PPUSH
59036: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59037: LD_VAR 0 1
59041: NOT
59042: PUSH
59043: LD_VAR 0 2
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 3
59056: PUSH
59057: LD_INT 4
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: IN
59066: NOT
59067: OR
59068: IFFALSE 59072
// exit ;
59070: GO 59164
// tmp := [ ] ;
59072: LD_ADDR_VAR 0 5
59076: PUSH
59077: EMPTY
59078: ST_TO_ADDR
// for i in units do
59079: LD_ADDR_VAR 0 4
59083: PUSH
59084: LD_VAR 0 1
59088: PUSH
59089: FOR_IN
59090: IFFALSE 59133
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59092: LD_ADDR_VAR 0 5
59096: PUSH
59097: LD_VAR 0 5
59101: PPUSH
59102: LD_VAR 0 5
59106: PUSH
59107: LD_INT 1
59109: PLUS
59110: PPUSH
59111: LD_VAR 0 4
59115: PPUSH
59116: LD_VAR 0 2
59120: PPUSH
59121: CALL_OW 259
59125: PPUSH
59126: CALL_OW 2
59130: ST_TO_ADDR
59131: GO 59089
59133: POP
59134: POP
// if not tmp then
59135: LD_VAR 0 5
59139: NOT
59140: IFFALSE 59144
// exit ;
59142: GO 59164
// result := SortListByListDesc ( units , tmp ) ;
59144: LD_ADDR_VAR 0 3
59148: PUSH
59149: LD_VAR 0 1
59153: PPUSH
59154: LD_VAR 0 5
59158: PPUSH
59159: CALL_OW 77
59163: ST_TO_ADDR
// end ;
59164: LD_VAR 0 3
59168: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59169: LD_INT 0
59171: PPUSH
59172: PPUSH
59173: PPUSH
// result := false ;
59174: LD_ADDR_VAR 0 3
59178: PUSH
59179: LD_INT 0
59181: ST_TO_ADDR
// x := GetX ( building ) ;
59182: LD_ADDR_VAR 0 4
59186: PUSH
59187: LD_VAR 0 2
59191: PPUSH
59192: CALL_OW 250
59196: ST_TO_ADDR
// y := GetY ( building ) ;
59197: LD_ADDR_VAR 0 5
59201: PUSH
59202: LD_VAR 0 2
59206: PPUSH
59207: CALL_OW 251
59211: ST_TO_ADDR
// if not building or not x or not y then
59212: LD_VAR 0 2
59216: NOT
59217: PUSH
59218: LD_VAR 0 4
59222: NOT
59223: OR
59224: PUSH
59225: LD_VAR 0 5
59229: NOT
59230: OR
59231: IFFALSE 59235
// exit ;
59233: GO 59327
// if GetTaskList ( unit ) then
59235: LD_VAR 0 1
59239: PPUSH
59240: CALL_OW 437
59244: IFFALSE 59327
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59246: LD_STRING e
59248: PUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 437
59258: PUSH
59259: LD_INT 1
59261: ARRAY
59262: PUSH
59263: LD_INT 1
59265: ARRAY
59266: EQUAL
59267: PUSH
59268: LD_VAR 0 4
59272: PUSH
59273: LD_VAR 0 1
59277: PPUSH
59278: CALL_OW 437
59282: PUSH
59283: LD_INT 1
59285: ARRAY
59286: PUSH
59287: LD_INT 2
59289: ARRAY
59290: EQUAL
59291: AND
59292: PUSH
59293: LD_VAR 0 5
59297: PUSH
59298: LD_VAR 0 1
59302: PPUSH
59303: CALL_OW 437
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PUSH
59312: LD_INT 3
59314: ARRAY
59315: EQUAL
59316: AND
59317: IFFALSE 59327
// result := true end ;
59319: LD_ADDR_VAR 0 3
59323: PUSH
59324: LD_INT 1
59326: ST_TO_ADDR
// end ;
59327: LD_VAR 0 3
59331: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59332: LD_INT 0
59334: PPUSH
// result := false ;
59335: LD_ADDR_VAR 0 4
59339: PUSH
59340: LD_INT 0
59342: ST_TO_ADDR
// if GetTaskList ( unit ) then
59343: LD_VAR 0 1
59347: PPUSH
59348: CALL_OW 437
59352: IFFALSE 59435
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59354: LD_STRING M
59356: PUSH
59357: LD_VAR 0 1
59361: PPUSH
59362: CALL_OW 437
59366: PUSH
59367: LD_INT 1
59369: ARRAY
59370: PUSH
59371: LD_INT 1
59373: ARRAY
59374: EQUAL
59375: PUSH
59376: LD_VAR 0 2
59380: PUSH
59381: LD_VAR 0 1
59385: PPUSH
59386: CALL_OW 437
59390: PUSH
59391: LD_INT 1
59393: ARRAY
59394: PUSH
59395: LD_INT 2
59397: ARRAY
59398: EQUAL
59399: AND
59400: PUSH
59401: LD_VAR 0 3
59405: PUSH
59406: LD_VAR 0 1
59410: PPUSH
59411: CALL_OW 437
59415: PUSH
59416: LD_INT 1
59418: ARRAY
59419: PUSH
59420: LD_INT 3
59422: ARRAY
59423: EQUAL
59424: AND
59425: IFFALSE 59435
// result := true ;
59427: LD_ADDR_VAR 0 4
59431: PUSH
59432: LD_INT 1
59434: ST_TO_ADDR
// end ; end ;
59435: LD_VAR 0 4
59439: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59440: LD_INT 0
59442: PPUSH
59443: PPUSH
59444: PPUSH
59445: PPUSH
// if not unit or not area then
59446: LD_VAR 0 1
59450: NOT
59451: PUSH
59452: LD_VAR 0 2
59456: NOT
59457: OR
59458: IFFALSE 59462
// exit ;
59460: GO 59626
// tmp := AreaToList ( area , i ) ;
59462: LD_ADDR_VAR 0 6
59466: PUSH
59467: LD_VAR 0 2
59471: PPUSH
59472: LD_VAR 0 5
59476: PPUSH
59477: CALL_OW 517
59481: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59482: LD_ADDR_VAR 0 5
59486: PUSH
59487: DOUBLE
59488: LD_INT 1
59490: DEC
59491: ST_TO_ADDR
59492: LD_VAR 0 6
59496: PUSH
59497: LD_INT 1
59499: ARRAY
59500: PUSH
59501: FOR_TO
59502: IFFALSE 59624
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59504: LD_ADDR_VAR 0 7
59508: PUSH
59509: LD_VAR 0 6
59513: PUSH
59514: LD_INT 1
59516: ARRAY
59517: PUSH
59518: LD_VAR 0 5
59522: ARRAY
59523: PUSH
59524: LD_VAR 0 6
59528: PUSH
59529: LD_INT 2
59531: ARRAY
59532: PUSH
59533: LD_VAR 0 5
59537: ARRAY
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59543: LD_VAR 0 7
59547: PUSH
59548: LD_INT 1
59550: ARRAY
59551: PPUSH
59552: LD_VAR 0 7
59556: PUSH
59557: LD_INT 2
59559: ARRAY
59560: PPUSH
59561: CALL_OW 428
59565: PUSH
59566: LD_INT 0
59568: EQUAL
59569: IFFALSE 59622
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59571: LD_VAR 0 1
59575: PPUSH
59576: LD_VAR 0 7
59580: PUSH
59581: LD_INT 1
59583: ARRAY
59584: PPUSH
59585: LD_VAR 0 7
59589: PUSH
59590: LD_INT 2
59592: ARRAY
59593: PPUSH
59594: LD_VAR 0 3
59598: PPUSH
59599: CALL_OW 48
// result := IsPlaced ( unit ) ;
59603: LD_ADDR_VAR 0 4
59607: PUSH
59608: LD_VAR 0 1
59612: PPUSH
59613: CALL_OW 305
59617: ST_TO_ADDR
// exit ;
59618: POP
59619: POP
59620: GO 59626
// end ; end ;
59622: GO 59501
59624: POP
59625: POP
// end ;
59626: LD_VAR 0 4
59630: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59631: LD_INT 0
59633: PPUSH
59634: PPUSH
59635: PPUSH
// if not side or side > 8 then
59636: LD_VAR 0 1
59640: NOT
59641: PUSH
59642: LD_VAR 0 1
59646: PUSH
59647: LD_INT 8
59649: GREATER
59650: OR
59651: IFFALSE 59655
// exit ;
59653: GO 59842
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59655: LD_ADDR_VAR 0 4
59659: PUSH
59660: LD_INT 22
59662: PUSH
59663: LD_VAR 0 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 21
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PPUSH
59686: CALL_OW 69
59690: ST_TO_ADDR
// if not tmp then
59691: LD_VAR 0 4
59695: NOT
59696: IFFALSE 59700
// exit ;
59698: GO 59842
// enable_addtolog := true ;
59700: LD_ADDR_OWVAR 81
59704: PUSH
59705: LD_INT 1
59707: ST_TO_ADDR
// AddToLog ( [ ) ;
59708: LD_STRING [
59710: PPUSH
59711: CALL_OW 561
// for i in tmp do
59715: LD_ADDR_VAR 0 3
59719: PUSH
59720: LD_VAR 0 4
59724: PUSH
59725: FOR_IN
59726: IFFALSE 59833
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59728: LD_STRING [
59730: PUSH
59731: LD_VAR 0 3
59735: PPUSH
59736: CALL_OW 266
59740: STR
59741: PUSH
59742: LD_STRING , 
59744: STR
59745: PUSH
59746: LD_VAR 0 3
59750: PPUSH
59751: CALL_OW 250
59755: STR
59756: PUSH
59757: LD_STRING , 
59759: STR
59760: PUSH
59761: LD_VAR 0 3
59765: PPUSH
59766: CALL_OW 251
59770: STR
59771: PUSH
59772: LD_STRING , 
59774: STR
59775: PUSH
59776: LD_VAR 0 3
59780: PPUSH
59781: CALL_OW 254
59785: STR
59786: PUSH
59787: LD_STRING , 
59789: STR
59790: PUSH
59791: LD_VAR 0 3
59795: PPUSH
59796: LD_INT 1
59798: PPUSH
59799: CALL_OW 268
59803: STR
59804: PUSH
59805: LD_STRING , 
59807: STR
59808: PUSH
59809: LD_VAR 0 3
59813: PPUSH
59814: LD_INT 2
59816: PPUSH
59817: CALL_OW 268
59821: STR
59822: PUSH
59823: LD_STRING ],
59825: STR
59826: PPUSH
59827: CALL_OW 561
// end ;
59831: GO 59725
59833: POP
59834: POP
// AddToLog ( ]; ) ;
59835: LD_STRING ];
59837: PPUSH
59838: CALL_OW 561
// end ;
59842: LD_VAR 0 2
59846: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59847: LD_INT 0
59849: PPUSH
59850: PPUSH
59851: PPUSH
59852: PPUSH
59853: PPUSH
// if not area or not rate or not max then
59854: LD_VAR 0 1
59858: NOT
59859: PUSH
59860: LD_VAR 0 2
59864: NOT
59865: OR
59866: PUSH
59867: LD_VAR 0 4
59871: NOT
59872: OR
59873: IFFALSE 59877
// exit ;
59875: GO 60069
// while 1 do
59877: LD_INT 1
59879: IFFALSE 60069
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59881: LD_ADDR_VAR 0 9
59885: PUSH
59886: LD_VAR 0 1
59890: PPUSH
59891: LD_INT 1
59893: PPUSH
59894: CALL_OW 287
59898: PUSH
59899: LD_INT 10
59901: MUL
59902: ST_TO_ADDR
// r := rate / 10 ;
59903: LD_ADDR_VAR 0 7
59907: PUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_INT 10
59915: DIVREAL
59916: ST_TO_ADDR
// time := 1 1$00 ;
59917: LD_ADDR_VAR 0 8
59921: PUSH
59922: LD_INT 2100
59924: ST_TO_ADDR
// if amount < min then
59925: LD_VAR 0 9
59929: PUSH
59930: LD_VAR 0 3
59934: LESS
59935: IFFALSE 59953
// r := r * 2 else
59937: LD_ADDR_VAR 0 7
59941: PUSH
59942: LD_VAR 0 7
59946: PUSH
59947: LD_INT 2
59949: MUL
59950: ST_TO_ADDR
59951: GO 59979
// if amount > max then
59953: LD_VAR 0 9
59957: PUSH
59958: LD_VAR 0 4
59962: GREATER
59963: IFFALSE 59979
// r := r / 2 ;
59965: LD_ADDR_VAR 0 7
59969: PUSH
59970: LD_VAR 0 7
59974: PUSH
59975: LD_INT 2
59977: DIVREAL
59978: ST_TO_ADDR
// time := time / r ;
59979: LD_ADDR_VAR 0 8
59983: PUSH
59984: LD_VAR 0 8
59988: PUSH
59989: LD_VAR 0 7
59993: DIVREAL
59994: ST_TO_ADDR
// if time < 0 then
59995: LD_VAR 0 8
59999: PUSH
60000: LD_INT 0
60002: LESS
60003: IFFALSE 60020
// time := time * - 1 ;
60005: LD_ADDR_VAR 0 8
60009: PUSH
60010: LD_VAR 0 8
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: MUL
60019: ST_TO_ADDR
// wait ( time ) ;
60020: LD_VAR 0 8
60024: PPUSH
60025: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60029: LD_INT 35
60031: PPUSH
60032: LD_INT 875
60034: PPUSH
60035: CALL_OW 12
60039: PPUSH
60040: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60044: LD_INT 1
60046: PPUSH
60047: LD_INT 5
60049: PPUSH
60050: CALL_OW 12
60054: PPUSH
60055: LD_VAR 0 1
60059: PPUSH
60060: LD_INT 1
60062: PPUSH
60063: CALL_OW 55
// end ;
60067: GO 59877
// end ;
60069: LD_VAR 0 5
60073: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60074: LD_INT 0
60076: PPUSH
60077: PPUSH
60078: PPUSH
60079: PPUSH
60080: PPUSH
60081: PPUSH
60082: PPUSH
60083: PPUSH
// if not turrets or not factories then
60084: LD_VAR 0 1
60088: NOT
60089: PUSH
60090: LD_VAR 0 2
60094: NOT
60095: OR
60096: IFFALSE 60100
// exit ;
60098: GO 60407
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60100: LD_ADDR_VAR 0 10
60104: PUSH
60105: LD_INT 5
60107: PUSH
60108: LD_INT 6
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 4
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: LD_INT 5
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 24
60142: PUSH
60143: LD_INT 25
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 23
60152: PUSH
60153: LD_INT 27
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 42
60166: PUSH
60167: LD_INT 43
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 44
60176: PUSH
60177: LD_INT 46
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 45
60186: PUSH
60187: LD_INT 47
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: ST_TO_ADDR
// result := [ ] ;
60204: LD_ADDR_VAR 0 3
60208: PUSH
60209: EMPTY
60210: ST_TO_ADDR
// for i in turrets do
60211: LD_ADDR_VAR 0 4
60215: PUSH
60216: LD_VAR 0 1
60220: PUSH
60221: FOR_IN
60222: IFFALSE 60405
// begin nat := GetNation ( i ) ;
60224: LD_ADDR_VAR 0 7
60228: PUSH
60229: LD_VAR 0 4
60233: PPUSH
60234: CALL_OW 248
60238: ST_TO_ADDR
// weapon := 0 ;
60239: LD_ADDR_VAR 0 8
60243: PUSH
60244: LD_INT 0
60246: ST_TO_ADDR
// if not nat then
60247: LD_VAR 0 7
60251: NOT
60252: IFFALSE 60256
// continue ;
60254: GO 60221
// for j in list [ nat ] do
60256: LD_ADDR_VAR 0 5
60260: PUSH
60261: LD_VAR 0 10
60265: PUSH
60266: LD_VAR 0 7
60270: ARRAY
60271: PUSH
60272: FOR_IN
60273: IFFALSE 60314
// if GetBWeapon ( i ) = j [ 1 ] then
60275: LD_VAR 0 4
60279: PPUSH
60280: CALL_OW 269
60284: PUSH
60285: LD_VAR 0 5
60289: PUSH
60290: LD_INT 1
60292: ARRAY
60293: EQUAL
60294: IFFALSE 60312
// begin weapon := j [ 2 ] ;
60296: LD_ADDR_VAR 0 8
60300: PUSH
60301: LD_VAR 0 5
60305: PUSH
60306: LD_INT 2
60308: ARRAY
60309: ST_TO_ADDR
// break ;
60310: GO 60314
// end ;
60312: GO 60272
60314: POP
60315: POP
// if not weapon then
60316: LD_VAR 0 8
60320: NOT
60321: IFFALSE 60325
// continue ;
60323: GO 60221
// for k in factories do
60325: LD_ADDR_VAR 0 6
60329: PUSH
60330: LD_VAR 0 2
60334: PUSH
60335: FOR_IN
60336: IFFALSE 60401
// begin weapons := AvailableWeaponList ( k ) ;
60338: LD_ADDR_VAR 0 9
60342: PUSH
60343: LD_VAR 0 6
60347: PPUSH
60348: CALL_OW 478
60352: ST_TO_ADDR
// if not weapons then
60353: LD_VAR 0 9
60357: NOT
60358: IFFALSE 60362
// continue ;
60360: GO 60335
// if weapon in weapons then
60362: LD_VAR 0 8
60366: PUSH
60367: LD_VAR 0 9
60371: IN
60372: IFFALSE 60399
// begin result := [ i , weapon ] ;
60374: LD_ADDR_VAR 0 3
60378: PUSH
60379: LD_VAR 0 4
60383: PUSH
60384: LD_VAR 0 8
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: ST_TO_ADDR
// exit ;
60393: POP
60394: POP
60395: POP
60396: POP
60397: GO 60407
// end ; end ;
60399: GO 60335
60401: POP
60402: POP
// end ;
60403: GO 60221
60405: POP
60406: POP
// end ;
60407: LD_VAR 0 3
60411: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60412: LD_INT 0
60414: PPUSH
// if not side or side > 8 then
60415: LD_VAR 0 3
60419: NOT
60420: PUSH
60421: LD_VAR 0 3
60425: PUSH
60426: LD_INT 8
60428: GREATER
60429: OR
60430: IFFALSE 60434
// exit ;
60432: GO 60493
// if not range then
60434: LD_VAR 0 4
60438: NOT
60439: IFFALSE 60450
// range := - 12 ;
60441: LD_ADDR_VAR 0 4
60445: PUSH
60446: LD_INT 12
60448: NEG
60449: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60450: LD_VAR 0 1
60454: PPUSH
60455: LD_VAR 0 2
60459: PPUSH
60460: LD_VAR 0 3
60464: PPUSH
60465: LD_VAR 0 4
60469: PPUSH
60470: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60474: LD_VAR 0 1
60478: PPUSH
60479: LD_VAR 0 2
60483: PPUSH
60484: LD_VAR 0 3
60488: PPUSH
60489: CALL_OW 331
// end ;
60493: LD_VAR 0 5
60497: RET
// export function Video ( mode ) ; begin
60498: LD_INT 0
60500: PPUSH
// ingame_video = mode ;
60501: LD_ADDR_OWVAR 52
60505: PUSH
60506: LD_VAR 0 1
60510: ST_TO_ADDR
// interface_hidden = mode ;
60511: LD_ADDR_OWVAR 54
60515: PUSH
60516: LD_VAR 0 1
60520: ST_TO_ADDR
// end ;
60521: LD_VAR 0 2
60525: RET
// export function Join ( array , element ) ; begin
60526: LD_INT 0
60528: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60529: LD_ADDR_VAR 0 3
60533: PUSH
60534: LD_VAR 0 1
60538: PPUSH
60539: LD_VAR 0 1
60543: PUSH
60544: LD_INT 1
60546: PLUS
60547: PPUSH
60548: LD_VAR 0 2
60552: PPUSH
60553: CALL_OW 1
60557: ST_TO_ADDR
// end ;
60558: LD_VAR 0 3
60562: RET
// export function JoinUnion ( array , element ) ; begin
60563: LD_INT 0
60565: PPUSH
// result := array union element ;
60566: LD_ADDR_VAR 0 3
60570: PUSH
60571: LD_VAR 0 1
60575: PUSH
60576: LD_VAR 0 2
60580: UNION
60581: ST_TO_ADDR
// end ;
60582: LD_VAR 0 3
60586: RET
// export function GetBehemoths ( side ) ; begin
60587: LD_INT 0
60589: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60590: LD_ADDR_VAR 0 2
60594: PUSH
60595: LD_INT 22
60597: PUSH
60598: LD_VAR 0 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 31
60609: PUSH
60610: LD_INT 25
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PPUSH
60621: CALL_OW 69
60625: ST_TO_ADDR
// end ;
60626: LD_VAR 0 2
60630: RET
// export function Shuffle ( array ) ; var i , index ; begin
60631: LD_INT 0
60633: PPUSH
60634: PPUSH
60635: PPUSH
// result := [ ] ;
60636: LD_ADDR_VAR 0 2
60640: PUSH
60641: EMPTY
60642: ST_TO_ADDR
// if not array then
60643: LD_VAR 0 1
60647: NOT
60648: IFFALSE 60652
// exit ;
60650: GO 60751
// Randomize ;
60652: CALL_OW 10
// for i = array downto 1 do
60656: LD_ADDR_VAR 0 3
60660: PUSH
60661: DOUBLE
60662: LD_VAR 0 1
60666: INC
60667: ST_TO_ADDR
60668: LD_INT 1
60670: PUSH
60671: FOR_DOWNTO
60672: IFFALSE 60749
// begin index := rand ( 1 , array ) ;
60674: LD_ADDR_VAR 0 4
60678: PUSH
60679: LD_INT 1
60681: PPUSH
60682: LD_VAR 0 1
60686: PPUSH
60687: CALL_OW 12
60691: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60692: LD_ADDR_VAR 0 2
60696: PUSH
60697: LD_VAR 0 2
60701: PPUSH
60702: LD_VAR 0 2
60706: PUSH
60707: LD_INT 1
60709: PLUS
60710: PPUSH
60711: LD_VAR 0 1
60715: PUSH
60716: LD_VAR 0 4
60720: ARRAY
60721: PPUSH
60722: CALL_OW 2
60726: ST_TO_ADDR
// array := Delete ( array , index ) ;
60727: LD_ADDR_VAR 0 1
60731: PUSH
60732: LD_VAR 0 1
60736: PPUSH
60737: LD_VAR 0 4
60741: PPUSH
60742: CALL_OW 3
60746: ST_TO_ADDR
// end ;
60747: GO 60671
60749: POP
60750: POP
// end ;
60751: LD_VAR 0 2
60755: RET
// export function GetBaseMaterials ( base ) ; begin
60756: LD_INT 0
60758: PPUSH
// result := [ 0 , 0 , 0 ] ;
60759: LD_ADDR_VAR 0 2
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: ST_TO_ADDR
// if not base then
60778: LD_VAR 0 1
60782: NOT
60783: IFFALSE 60787
// exit ;
60785: GO 60836
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60787: LD_ADDR_VAR 0 2
60791: PUSH
60792: LD_VAR 0 1
60796: PPUSH
60797: LD_INT 1
60799: PPUSH
60800: CALL_OW 275
60804: PUSH
60805: LD_VAR 0 1
60809: PPUSH
60810: LD_INT 2
60812: PPUSH
60813: CALL_OW 275
60817: PUSH
60818: LD_VAR 0 1
60822: PPUSH
60823: LD_INT 3
60825: PPUSH
60826: CALL_OW 275
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: ST_TO_ADDR
// end ;
60836: LD_VAR 0 2
60840: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60841: LD_INT 0
60843: PPUSH
60844: PPUSH
// result := array ;
60845: LD_ADDR_VAR 0 3
60849: PUSH
60850: LD_VAR 0 1
60854: ST_TO_ADDR
// if size > 0 then
60855: LD_VAR 0 2
60859: PUSH
60860: LD_INT 0
60862: GREATER
60863: IFFALSE 60909
// for i := array downto size do
60865: LD_ADDR_VAR 0 4
60869: PUSH
60870: DOUBLE
60871: LD_VAR 0 1
60875: INC
60876: ST_TO_ADDR
60877: LD_VAR 0 2
60881: PUSH
60882: FOR_DOWNTO
60883: IFFALSE 60907
// result := Delete ( result , result ) ;
60885: LD_ADDR_VAR 0 3
60889: PUSH
60890: LD_VAR 0 3
60894: PPUSH
60895: LD_VAR 0 3
60899: PPUSH
60900: CALL_OW 3
60904: ST_TO_ADDR
60905: GO 60882
60907: POP
60908: POP
// end ;
60909: LD_VAR 0 3
60913: RET
// export function ComExit ( unit ) ; var tmp ; begin
60914: LD_INT 0
60916: PPUSH
60917: PPUSH
// if not IsInUnit ( unit ) then
60918: LD_VAR 0 1
60922: PPUSH
60923: CALL_OW 310
60927: NOT
60928: IFFALSE 60932
// exit ;
60930: GO 60992
// tmp := IsInUnit ( unit ) ;
60932: LD_ADDR_VAR 0 3
60936: PUSH
60937: LD_VAR 0 1
60941: PPUSH
60942: CALL_OW 310
60946: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60947: LD_VAR 0 3
60951: PPUSH
60952: CALL_OW 247
60956: PUSH
60957: LD_INT 2
60959: EQUAL
60960: IFFALSE 60973
// ComExitVehicle ( unit ) else
60962: LD_VAR 0 1
60966: PPUSH
60967: CALL_OW 121
60971: GO 60982
// ComExitBuilding ( unit ) ;
60973: LD_VAR 0 1
60977: PPUSH
60978: CALL_OW 122
// result := tmp ;
60982: LD_ADDR_VAR 0 2
60986: PUSH
60987: LD_VAR 0 3
60991: ST_TO_ADDR
// end ;
60992: LD_VAR 0 2
60996: RET
// export function ComExitAll ( units ) ; var i ; begin
60997: LD_INT 0
60999: PPUSH
61000: PPUSH
// if not units then
61001: LD_VAR 0 1
61005: NOT
61006: IFFALSE 61010
// exit ;
61008: GO 61036
// for i in units do
61010: LD_ADDR_VAR 0 3
61014: PUSH
61015: LD_VAR 0 1
61019: PUSH
61020: FOR_IN
61021: IFFALSE 61034
// ComExit ( i ) ;
61023: LD_VAR 0 3
61027: PPUSH
61028: CALL 60914 0 1
61032: GO 61020
61034: POP
61035: POP
// end ;
61036: LD_VAR 0 2
61040: RET
// export function ResetHc ; begin
61041: LD_INT 0
61043: PPUSH
// InitHc ;
61044: CALL_OW 19
// hc_importance := 0 ;
61048: LD_ADDR_OWVAR 32
61052: PUSH
61053: LD_INT 0
61055: ST_TO_ADDR
// end ;
61056: LD_VAR 0 1
61060: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61061: LD_INT 0
61063: PPUSH
61064: PPUSH
61065: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61066: LD_ADDR_VAR 0 6
61070: PUSH
61071: LD_VAR 0 1
61075: PUSH
61076: LD_VAR 0 3
61080: PLUS
61081: PUSH
61082: LD_INT 2
61084: DIV
61085: ST_TO_ADDR
// if _x < 0 then
61086: LD_VAR 0 6
61090: PUSH
61091: LD_INT 0
61093: LESS
61094: IFFALSE 61111
// _x := _x * - 1 ;
61096: LD_ADDR_VAR 0 6
61100: PUSH
61101: LD_VAR 0 6
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: MUL
61110: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61111: LD_ADDR_VAR 0 7
61115: PUSH
61116: LD_VAR 0 2
61120: PUSH
61121: LD_VAR 0 4
61125: PLUS
61126: PUSH
61127: LD_INT 2
61129: DIV
61130: ST_TO_ADDR
// if _y < 0 then
61131: LD_VAR 0 7
61135: PUSH
61136: LD_INT 0
61138: LESS
61139: IFFALSE 61156
// _y := _y * - 1 ;
61141: LD_ADDR_VAR 0 7
61145: PUSH
61146: LD_VAR 0 7
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: MUL
61155: ST_TO_ADDR
// result := [ _x , _y ] ;
61156: LD_ADDR_VAR 0 5
61160: PUSH
61161: LD_VAR 0 6
61165: PUSH
61166: LD_VAR 0 7
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: ST_TO_ADDR
// end ;
61175: LD_VAR 0 5
61179: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61180: LD_INT 0
61182: PPUSH
61183: PPUSH
61184: PPUSH
61185: PPUSH
// task := GetTaskList ( unit ) ;
61186: LD_ADDR_VAR 0 7
61190: PUSH
61191: LD_VAR 0 1
61195: PPUSH
61196: CALL_OW 437
61200: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61201: LD_VAR 0 7
61205: NOT
61206: PUSH
61207: LD_VAR 0 1
61211: PPUSH
61212: LD_VAR 0 2
61216: PPUSH
61217: CALL_OW 308
61221: NOT
61222: AND
61223: IFFALSE 61227
// exit ;
61225: GO 61345
// if IsInArea ( unit , area ) then
61227: LD_VAR 0 1
61231: PPUSH
61232: LD_VAR 0 2
61236: PPUSH
61237: CALL_OW 308
61241: IFFALSE 61259
// begin ComMoveToArea ( unit , goAway ) ;
61243: LD_VAR 0 1
61247: PPUSH
61248: LD_VAR 0 3
61252: PPUSH
61253: CALL_OW 113
// exit ;
61257: GO 61345
// end ; if task [ 1 ] [ 1 ] <> M then
61259: LD_VAR 0 7
61263: PUSH
61264: LD_INT 1
61266: ARRAY
61267: PUSH
61268: LD_INT 1
61270: ARRAY
61271: PUSH
61272: LD_STRING M
61274: NONEQUAL
61275: IFFALSE 61279
// exit ;
61277: GO 61345
// x := task [ 1 ] [ 2 ] ;
61279: LD_ADDR_VAR 0 5
61283: PUSH
61284: LD_VAR 0 7
61288: PUSH
61289: LD_INT 1
61291: ARRAY
61292: PUSH
61293: LD_INT 2
61295: ARRAY
61296: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61297: LD_ADDR_VAR 0 6
61301: PUSH
61302: LD_VAR 0 7
61306: PUSH
61307: LD_INT 1
61309: ARRAY
61310: PUSH
61311: LD_INT 3
61313: ARRAY
61314: ST_TO_ADDR
// if InArea ( x , y , area ) then
61315: LD_VAR 0 5
61319: PPUSH
61320: LD_VAR 0 6
61324: PPUSH
61325: LD_VAR 0 2
61329: PPUSH
61330: CALL_OW 309
61334: IFFALSE 61345
// ComStop ( unit ) ;
61336: LD_VAR 0 1
61340: PPUSH
61341: CALL_OW 141
// end ;
61345: LD_VAR 0 4
61349: RET
// export function Abs ( value ) ; begin
61350: LD_INT 0
61352: PPUSH
// result := value ;
61353: LD_ADDR_VAR 0 2
61357: PUSH
61358: LD_VAR 0 1
61362: ST_TO_ADDR
// if value < 0 then
61363: LD_VAR 0 1
61367: PUSH
61368: LD_INT 0
61370: LESS
61371: IFFALSE 61388
// result := value * - 1 ;
61373: LD_ADDR_VAR 0 2
61377: PUSH
61378: LD_VAR 0 1
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: MUL
61387: ST_TO_ADDR
// end ;
61388: LD_VAR 0 2
61392: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61393: LD_INT 0
61395: PPUSH
61396: PPUSH
61397: PPUSH
61398: PPUSH
61399: PPUSH
61400: PPUSH
61401: PPUSH
61402: PPUSH
// if not unit or not building then
61403: LD_VAR 0 1
61407: NOT
61408: PUSH
61409: LD_VAR 0 2
61413: NOT
61414: OR
61415: IFFALSE 61419
// exit ;
61417: GO 61645
// x := GetX ( building ) ;
61419: LD_ADDR_VAR 0 4
61423: PUSH
61424: LD_VAR 0 2
61428: PPUSH
61429: CALL_OW 250
61433: ST_TO_ADDR
// y := GetY ( building ) ;
61434: LD_ADDR_VAR 0 6
61438: PUSH
61439: LD_VAR 0 2
61443: PPUSH
61444: CALL_OW 251
61448: ST_TO_ADDR
// d := GetDir ( building ) ;
61449: LD_ADDR_VAR 0 8
61453: PUSH
61454: LD_VAR 0 2
61458: PPUSH
61459: CALL_OW 254
61463: ST_TO_ADDR
// r := 4 ;
61464: LD_ADDR_VAR 0 9
61468: PUSH
61469: LD_INT 4
61471: ST_TO_ADDR
// for i := 1 to 5 do
61472: LD_ADDR_VAR 0 10
61476: PUSH
61477: DOUBLE
61478: LD_INT 1
61480: DEC
61481: ST_TO_ADDR
61482: LD_INT 5
61484: PUSH
61485: FOR_TO
61486: IFFALSE 61643
// begin _x := ShiftX ( x , d , r + i ) ;
61488: LD_ADDR_VAR 0 5
61492: PUSH
61493: LD_VAR 0 4
61497: PPUSH
61498: LD_VAR 0 8
61502: PPUSH
61503: LD_VAR 0 9
61507: PUSH
61508: LD_VAR 0 10
61512: PLUS
61513: PPUSH
61514: CALL_OW 272
61518: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61519: LD_ADDR_VAR 0 7
61523: PUSH
61524: LD_VAR 0 6
61528: PPUSH
61529: LD_VAR 0 8
61533: PPUSH
61534: LD_VAR 0 9
61538: PUSH
61539: LD_VAR 0 10
61543: PLUS
61544: PPUSH
61545: CALL_OW 273
61549: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61550: LD_VAR 0 5
61554: PPUSH
61555: LD_VAR 0 7
61559: PPUSH
61560: CALL_OW 488
61564: PUSH
61565: LD_VAR 0 5
61569: PPUSH
61570: LD_VAR 0 7
61574: PPUSH
61575: CALL_OW 428
61579: PPUSH
61580: CALL_OW 247
61584: PUSH
61585: LD_INT 3
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: IN
61595: NOT
61596: AND
61597: IFFALSE 61641
// begin ComMoveXY ( unit , _x , _y ) ;
61599: LD_VAR 0 1
61603: PPUSH
61604: LD_VAR 0 5
61608: PPUSH
61609: LD_VAR 0 7
61613: PPUSH
61614: CALL_OW 111
// result := [ _x , _y ] ;
61618: LD_ADDR_VAR 0 3
61622: PUSH
61623: LD_VAR 0 5
61627: PUSH
61628: LD_VAR 0 7
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: ST_TO_ADDR
// exit ;
61637: POP
61638: POP
61639: GO 61645
// end ; end ;
61641: GO 61485
61643: POP
61644: POP
// end ;
61645: LD_VAR 0 3
61649: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61650: LD_INT 0
61652: PPUSH
61653: PPUSH
61654: PPUSH
// result := 0 ;
61655: LD_ADDR_VAR 0 3
61659: PUSH
61660: LD_INT 0
61662: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61663: LD_VAR 0 1
61667: PUSH
61668: LD_INT 0
61670: LESS
61671: PUSH
61672: LD_VAR 0 1
61676: PUSH
61677: LD_INT 8
61679: GREATER
61680: OR
61681: PUSH
61682: LD_VAR 0 2
61686: PUSH
61687: LD_INT 0
61689: LESS
61690: OR
61691: PUSH
61692: LD_VAR 0 2
61696: PUSH
61697: LD_INT 8
61699: GREATER
61700: OR
61701: IFFALSE 61705
// exit ;
61703: GO 61780
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61705: LD_ADDR_VAR 0 4
61709: PUSH
61710: LD_INT 22
61712: PUSH
61713: LD_VAR 0 2
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PPUSH
61722: CALL_OW 69
61726: PUSH
61727: FOR_IN
61728: IFFALSE 61778
// begin un := UnitShoot ( i ) ;
61730: LD_ADDR_VAR 0 5
61734: PUSH
61735: LD_VAR 0 4
61739: PPUSH
61740: CALL_OW 504
61744: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61745: LD_VAR 0 5
61749: PPUSH
61750: CALL_OW 255
61754: PUSH
61755: LD_VAR 0 1
61759: EQUAL
61760: IFFALSE 61776
// begin result := un ;
61762: LD_ADDR_VAR 0 3
61766: PUSH
61767: LD_VAR 0 5
61771: ST_TO_ADDR
// exit ;
61772: POP
61773: POP
61774: GO 61780
// end ; end ;
61776: GO 61727
61778: POP
61779: POP
// end ;
61780: LD_VAR 0 3
61784: RET
// export function GetCargoBay ( units ) ; begin
61785: LD_INT 0
61787: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61788: LD_ADDR_VAR 0 2
61792: PUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: LD_INT 2
61800: PUSH
61801: LD_INT 34
61803: PUSH
61804: LD_INT 12
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 34
61813: PUSH
61814: LD_INT 51
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 34
61823: PUSH
61824: LD_INT 32
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 34
61833: PUSH
61834: LD_EXP 95
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: PPUSH
61850: CALL_OW 72
61854: ST_TO_ADDR
// end ;
61855: LD_VAR 0 2
61859: RET
// export function Negate ( value ) ; begin
61860: LD_INT 0
61862: PPUSH
// result := not value ;
61863: LD_ADDR_VAR 0 2
61867: PUSH
61868: LD_VAR 0 1
61872: NOT
61873: ST_TO_ADDR
// end ;
61874: LD_VAR 0 2
61878: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
61879: LD_INT 0
61881: PPUSH
// if x1 = x2 then
61882: LD_VAR 0 1
61886: PUSH
61887: LD_VAR 0 3
61891: EQUAL
61892: IFFALSE 61926
// begin if y1 > y2 then
61894: LD_VAR 0 2
61898: PUSH
61899: LD_VAR 0 4
61903: GREATER
61904: IFFALSE 61916
// result := 0 else
61906: LD_ADDR_VAR 0 5
61910: PUSH
61911: LD_INT 0
61913: ST_TO_ADDR
61914: GO 61924
// result := 3 ;
61916: LD_ADDR_VAR 0 5
61920: PUSH
61921: LD_INT 3
61923: ST_TO_ADDR
// exit ;
61924: GO 62012
// end ; if y1 = y2 then
61926: LD_VAR 0 2
61930: PUSH
61931: LD_VAR 0 4
61935: EQUAL
61936: IFFALSE 61970
// begin if x1 > x2 then
61938: LD_VAR 0 1
61942: PUSH
61943: LD_VAR 0 3
61947: GREATER
61948: IFFALSE 61960
// result := 1 else
61950: LD_ADDR_VAR 0 5
61954: PUSH
61955: LD_INT 1
61957: ST_TO_ADDR
61958: GO 61968
// result := 4 ;
61960: LD_ADDR_VAR 0 5
61964: PUSH
61965: LD_INT 4
61967: ST_TO_ADDR
// exit ;
61968: GO 62012
// end ; if x1 > x2 and y1 > y2 then
61970: LD_VAR 0 1
61974: PUSH
61975: LD_VAR 0 3
61979: GREATER
61980: PUSH
61981: LD_VAR 0 2
61985: PUSH
61986: LD_VAR 0 4
61990: GREATER
61991: AND
61992: IFFALSE 62004
// result := 2 else
61994: LD_ADDR_VAR 0 5
61998: PUSH
61999: LD_INT 2
62001: ST_TO_ADDR
62002: GO 62012
// result := 5 ;
62004: LD_ADDR_VAR 0 5
62008: PUSH
62009: LD_INT 5
62011: ST_TO_ADDR
// end ;
62012: LD_VAR 0 5
62016: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62017: LD_INT 0
62019: PPUSH
62020: PPUSH
// if not driver or not IsInUnit ( driver ) then
62021: LD_VAR 0 1
62025: NOT
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 310
62036: NOT
62037: OR
62038: IFFALSE 62042
// exit ;
62040: GO 62132
// vehicle := IsInUnit ( driver ) ;
62042: LD_ADDR_VAR 0 3
62046: PUSH
62047: LD_VAR 0 1
62051: PPUSH
62052: CALL_OW 310
62056: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_STRING \
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: PUSH
62092: LD_STRING E
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_VAR 0 3
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PPUSH
62128: CALL_OW 446
// end ;
62132: LD_VAR 0 2
62136: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62137: LD_INT 0
62139: PPUSH
62140: PPUSH
// if not driver or not IsInUnit ( driver ) then
62141: LD_VAR 0 1
62145: NOT
62146: PUSH
62147: LD_VAR 0 1
62151: PPUSH
62152: CALL_OW 310
62156: NOT
62157: OR
62158: IFFALSE 62162
// exit ;
62160: GO 62252
// vehicle := IsInUnit ( driver ) ;
62162: LD_ADDR_VAR 0 3
62166: PUSH
62167: LD_VAR 0 1
62171: PPUSH
62172: CALL_OW 310
62176: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62177: LD_VAR 0 1
62181: PPUSH
62182: LD_STRING \
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: PUSH
62212: LD_STRING E
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_VAR 0 3
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PPUSH
62248: CALL_OW 447
// end ;
62252: LD_VAR 0 2
62256: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62257: LD_INT 0
62259: PPUSH
62260: PPUSH
62261: PPUSH
// tmp := [ ] ;
62262: LD_ADDR_VAR 0 5
62266: PUSH
62267: EMPTY
62268: ST_TO_ADDR
// for i in units do
62269: LD_ADDR_VAR 0 4
62273: PUSH
62274: LD_VAR 0 1
62278: PUSH
62279: FOR_IN
62280: IFFALSE 62318
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62282: LD_ADDR_VAR 0 5
62286: PUSH
62287: LD_VAR 0 5
62291: PPUSH
62292: LD_VAR 0 5
62296: PUSH
62297: LD_INT 1
62299: PLUS
62300: PPUSH
62301: LD_VAR 0 4
62305: PPUSH
62306: CALL_OW 256
62310: PPUSH
62311: CALL_OW 2
62315: ST_TO_ADDR
62316: GO 62279
62318: POP
62319: POP
// if not tmp then
62320: LD_VAR 0 5
62324: NOT
62325: IFFALSE 62329
// exit ;
62327: GO 62377
// if asc then
62329: LD_VAR 0 2
62333: IFFALSE 62357
// result := SortListByListAsc ( units , tmp ) else
62335: LD_ADDR_VAR 0 3
62339: PUSH
62340: LD_VAR 0 1
62344: PPUSH
62345: LD_VAR 0 5
62349: PPUSH
62350: CALL_OW 76
62354: ST_TO_ADDR
62355: GO 62377
// result := SortListByListDesc ( units , tmp ) ;
62357: LD_ADDR_VAR 0 3
62361: PUSH
62362: LD_VAR 0 1
62366: PPUSH
62367: LD_VAR 0 5
62371: PPUSH
62372: CALL_OW 77
62376: ST_TO_ADDR
// end ;
62377: LD_VAR 0 3
62381: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62382: LD_INT 0
62384: PPUSH
62385: PPUSH
// task := GetTaskList ( mech ) ;
62386: LD_ADDR_VAR 0 4
62390: PUSH
62391: LD_VAR 0 1
62395: PPUSH
62396: CALL_OW 437
62400: ST_TO_ADDR
// if not task then
62401: LD_VAR 0 4
62405: NOT
62406: IFFALSE 62410
// exit ;
62408: GO 62452
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62410: LD_ADDR_VAR 0 3
62414: PUSH
62415: LD_VAR 0 4
62419: PUSH
62420: LD_INT 1
62422: ARRAY
62423: PUSH
62424: LD_INT 1
62426: ARRAY
62427: PUSH
62428: LD_STRING r
62430: EQUAL
62431: PUSH
62432: LD_VAR 0 4
62436: PUSH
62437: LD_INT 1
62439: ARRAY
62440: PUSH
62441: LD_INT 4
62443: ARRAY
62444: PUSH
62445: LD_VAR 0 2
62449: EQUAL
62450: AND
62451: ST_TO_ADDR
// end ;
62452: LD_VAR 0 3
62456: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62457: LD_INT 0
62459: PPUSH
// SetDir ( unit , d ) ;
62460: LD_VAR 0 1
62464: PPUSH
62465: LD_VAR 0 4
62469: PPUSH
62470: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62474: LD_VAR 0 1
62478: PPUSH
62479: LD_VAR 0 2
62483: PPUSH
62484: LD_VAR 0 3
62488: PPUSH
62489: LD_VAR 0 5
62493: PPUSH
62494: CALL_OW 48
// end ;
62498: LD_VAR 0 6
62502: RET
// export function ToNaturalNumber ( number ) ; begin
62503: LD_INT 0
62505: PPUSH
// result := number div 1 ;
62506: LD_ADDR_VAR 0 2
62510: PUSH
62511: LD_VAR 0 1
62515: PUSH
62516: LD_INT 1
62518: DIV
62519: ST_TO_ADDR
// if number < 0 then
62520: LD_VAR 0 1
62524: PUSH
62525: LD_INT 0
62527: LESS
62528: IFFALSE 62538
// result := 0 ;
62530: LD_ADDR_VAR 0 2
62534: PUSH
62535: LD_INT 0
62537: ST_TO_ADDR
// end ;
62538: LD_VAR 0 2
62542: RET
// export function SortByClass ( units , class ) ; var un ; begin
62543: LD_INT 0
62545: PPUSH
62546: PPUSH
// if not units or not class then
62547: LD_VAR 0 1
62551: NOT
62552: PUSH
62553: LD_VAR 0 2
62557: NOT
62558: OR
62559: IFFALSE 62563
// exit ;
62561: GO 62658
// result := [ ] ;
62563: LD_ADDR_VAR 0 3
62567: PUSH
62568: EMPTY
62569: ST_TO_ADDR
// for un in units do
62570: LD_ADDR_VAR 0 4
62574: PUSH
62575: LD_VAR 0 1
62579: PUSH
62580: FOR_IN
62581: IFFALSE 62656
// if GetClass ( un ) = class then
62583: LD_VAR 0 4
62587: PPUSH
62588: CALL_OW 257
62592: PUSH
62593: LD_VAR 0 2
62597: EQUAL
62598: IFFALSE 62625
// result := Insert ( result , 1 , un ) else
62600: LD_ADDR_VAR 0 3
62604: PUSH
62605: LD_VAR 0 3
62609: PPUSH
62610: LD_INT 1
62612: PPUSH
62613: LD_VAR 0 4
62617: PPUSH
62618: CALL_OW 2
62622: ST_TO_ADDR
62623: GO 62654
// result := Replace ( result , result + 1 , un ) ;
62625: LD_ADDR_VAR 0 3
62629: PUSH
62630: LD_VAR 0 3
62634: PPUSH
62635: LD_VAR 0 3
62639: PUSH
62640: LD_INT 1
62642: PLUS
62643: PPUSH
62644: LD_VAR 0 4
62648: PPUSH
62649: CALL_OW 1
62653: ST_TO_ADDR
62654: GO 62580
62656: POP
62657: POP
// end ; end_of_file
62658: LD_VAR 0 3
62662: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62663: LD_VAR 0 1
62667: PUSH
62668: LD_INT 200
62670: DOUBLE
62671: GREATEREQUAL
62672: IFFALSE 62680
62674: LD_INT 299
62676: DOUBLE
62677: LESSEQUAL
62678: IFTRUE 62682
62680: GO 62714
62682: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62683: LD_VAR 0 1
62687: PPUSH
62688: LD_VAR 0 2
62692: PPUSH
62693: LD_VAR 0 3
62697: PPUSH
62698: LD_VAR 0 4
62702: PPUSH
62703: LD_VAR 0 5
62707: PPUSH
62708: CALL 19738 0 5
62712: GO 62791
62714: LD_INT 300
62716: DOUBLE
62717: GREATEREQUAL
62718: IFFALSE 62726
62720: LD_INT 399
62722: DOUBLE
62723: LESSEQUAL
62724: IFTRUE 62728
62726: GO 62790
62728: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62729: LD_VAR 0 1
62733: PPUSH
62734: LD_VAR 0 2
62738: PPUSH
62739: LD_VAR 0 3
62743: PPUSH
62744: LD_VAR 0 4
62748: PPUSH
62749: LD_VAR 0 5
62753: PPUSH
62754: LD_VAR 0 6
62758: PPUSH
62759: LD_VAR 0 7
62763: PPUSH
62764: LD_VAR 0 8
62768: PPUSH
62769: LD_VAR 0 9
62773: PPUSH
62774: LD_VAR 0 10
62778: PPUSH
62779: LD_VAR 0 11
62783: PPUSH
62784: CALL 17626 0 11
62788: GO 62791
62790: POP
// end ;
62791: PPOPN 11
62793: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62794: LD_VAR 0 1
62798: PPUSH
62799: LD_VAR 0 2
62803: PPUSH
62804: LD_VAR 0 3
62808: PPUSH
62809: LD_VAR 0 4
62813: PPUSH
62814: LD_VAR 0 5
62818: PPUSH
62819: CALL 19720 0 5
// end ; end_of_file
62823: PPOPN 5
62825: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62826: LD_VAR 0 1
62830: PPUSH
62831: LD_VAR 0 2
62835: PPUSH
62836: LD_VAR 0 3
62840: PPUSH
62841: LD_VAR 0 4
62845: PPUSH
62846: LD_VAR 0 5
62850: PPUSH
62851: LD_VAR 0 6
62855: PPUSH
62856: CALL 6434 0 6
// end ;
62860: PPOPN 6
62862: END
