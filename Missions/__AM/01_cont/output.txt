// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 923 0 0
// InitRussian ;
  19: CALL 1162 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 2718 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := 0 ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 3 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 3
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
// if exist_mode then
 201: LD_VAR 0 2
 205: IFFALSE 224
// unit := CreateCharacter ( ident ) else
 207: LD_ADDR_VAR 0 4
 211: PUSH
 212: LD_VAR 0 1
 216: PPUSH
 217: CALL_OW 34
 221: ST_TO_ADDR
 222: GO 239
// unit := NewCharacter ( ident ) ;
 224: LD_ADDR_VAR 0 4
 228: PUSH
 229: LD_VAR 0 1
 233: PPUSH
 234: CALL_OW 25
 238: ST_TO_ADDR
// result := unit ;
 239: LD_ADDR_VAR 0 3
 243: PUSH
 244: LD_VAR 0 4
 248: ST_TO_ADDR
// end ;
 249: LD_VAR 0 3
 253: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 254: LD_INT 0
 256: PPUSH
 257: PPUSH
 258: PPUSH
// uc_side := GetSide ( b ) ;
 259: LD_ADDR_OWVAR 20
 263: PUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 255
 273: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_VAR 0 2
 283: PPUSH
 284: CALL_OW 248
 288: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 289: LD_INT 0
 291: PPUSH
 292: LD_INT 1
 294: PPUSH
 295: LD_VAR 0 1
 299: PPUSH
 300: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 304: LD_ADDR_VAR 0 5
 308: PUSH
 309: LD_VAR 0 2
 313: PPUSH
 314: CALL_OW 254
 318: PUSH
 319: LD_INT 3
 321: MINUS
 322: ST_TO_ADDR
// if dir < 0 then
 323: LD_VAR 0 5
 327: PUSH
 328: LD_INT 0
 330: LESS
 331: IFFALSE 347
// dir := 6 + dir ;
 333: LD_ADDR_VAR 0 5
 337: PUSH
 338: LD_INT 6
 340: PUSH
 341: LD_VAR 0 5
 345: PLUS
 346: ST_TO_ADDR
// un := CreateHuman ;
 347: LD_ADDR_VAR 0 4
 351: PUSH
 352: CALL_OW 44
 356: ST_TO_ADDR
// SetDir ( un , dir ) ;
 357: LD_VAR 0 4
 361: PPUSH
 362: LD_VAR 0 5
 366: PPUSH
 367: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 371: LD_VAR 0 4
 375: PPUSH
 376: LD_VAR 0 2
 380: PPUSH
 381: CALL_OW 52
// end ;
 385: LD_VAR 0 3
 389: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 390: LD_INT 0
 392: PPUSH
// uc_side := side ;
 393: LD_ADDR_OWVAR 20
 397: PUSH
 398: LD_VAR 0 1
 402: ST_TO_ADDR
// uc_nation := nation ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_VAR 0 2
 412: ST_TO_ADDR
// vc_chassis := chassis ;
 413: LD_ADDR_OWVAR 37
 417: PUSH
 418: LD_VAR 0 3
 422: ST_TO_ADDR
// vc_engine := engine ;
 423: LD_ADDR_OWVAR 39
 427: PUSH
 428: LD_VAR 0 4
 432: ST_TO_ADDR
// vc_control := control ;
 433: LD_ADDR_OWVAR 38
 437: PUSH
 438: LD_VAR 0 5
 442: ST_TO_ADDR
// vc_weapon := weapon ;
 443: LD_ADDR_OWVAR 40
 447: PUSH
 448: LD_VAR 0 6
 452: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 453: LD_ADDR_OWVAR 41
 457: PUSH
 458: LD_VAR 0 7
 462: ST_TO_ADDR
// result := CreateVehicle ;
 463: LD_ADDR_VAR 0 8
 467: PUSH
 468: CALL_OW 45
 472: ST_TO_ADDR
// end ;
 473: LD_VAR 0 8
 477: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 478: LD_INT 0
 480: PPUSH
 481: PPUSH
// while ( active_road_patrol ) do
 482: LD_EXP 8
 486: IFFALSE 840
// begin Wait ( 0 0$01 ) ;
 488: LD_INT 35
 490: PPUSH
 491: CALL_OW 67
// if not unit then
 495: LD_VAR 0 1
 499: NOT
 500: IFFALSE 504
// exit ;
 502: GO 840
// if mode = road then
 504: LD_VAR 0 2
 508: PUSH
 509: LD_STRING road
 511: EQUAL
 512: IFFALSE 568
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 514: LD_VAR 0 1
 518: PPUSH
 519: CALL_OW 261
 523: PUSH
 524: LD_INT 50
 526: LESS
 527: PUSH
 528: LD_INT 1
 530: PPUSH
 531: LD_VAR 0 1
 535: PPUSH
 536: CALL_OW 292
 540: NOT
 541: AND
 542: PUSH
 543: LD_VAR 0 1
 547: PPUSH
 548: CALL_OW 314
 552: NOT
 553: AND
 554: IFFALSE 568
// SetFuel ( unit , 100 ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL_OW 240
// if mode = forest then
 568: LD_VAR 0 2
 572: PUSH
 573: LD_STRING forest
 575: EQUAL
 576: IFFALSE 656
// if GetLives ( unit ) < 600 then
 578: LD_VAR 0 1
 582: PPUSH
 583: CALL_OW 256
 587: PUSH
 588: LD_INT 600
 590: LESS
 591: IFFALSE 656
// begin ComMoveXY ( unit , 42 , 3 ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 42
 600: PPUSH
 601: LD_INT 3
 603: PPUSH
 604: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 608: LD_VAR 0 1
 612: PPUSH
 613: LD_VAR 0 1
 617: PPUSH
 618: CALL_OW 250
 622: PPUSH
 623: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 627: LD_VAR 0 1
 631: PPUSH
 632: LD_VAR 0 1
 636: PPUSH
 637: CALL_OW 251
 641: PPUSH
 642: CALL_OW 232
// send_troops_to_forest := true ;
 646: LD_ADDR_EXP 14
 650: PUSH
 651: LD_INT 1
 653: ST_TO_ADDR
// break ;
 654: GO 840
// end ; if not HasTask ( unit ) then
 656: LD_VAR 0 1
 660: PPUSH
 661: CALL_OW 314
 665: NOT
 666: IFFALSE 838
// begin for i = 1 to coords do
 668: LD_ADDR_VAR 0 6
 672: PUSH
 673: DOUBLE
 674: LD_INT 1
 676: DEC
 677: ST_TO_ADDR
 678: LD_VAR 0 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 751
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 686: LD_VAR 0 1
 690: PPUSH
 691: LD_VAR 0 4
 695: PUSH
 696: LD_VAR 0 6
 700: ARRAY
 701: PPUSH
 702: LD_VAR 0 4
 706: PUSH
 707: LD_VAR 0 6
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: PPUSH
 717: CALL_OW 174
// AddComWait ( unit , pause ) ;
 721: LD_VAR 0 1
 725: PPUSH
 726: LD_VAR 0 3
 730: PPUSH
 731: CALL_OW 202
// i := i + 1 ;
 735: LD_ADDR_VAR 0 6
 739: PUSH
 740: LD_VAR 0 6
 744: PUSH
 745: LD_INT 1
 747: PLUS
 748: ST_TO_ADDR
// end ;
 749: GO 683
 751: POP
 752: POP
// for i = coords downto 1 do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_VAR 0 4
 763: INC
 764: ST_TO_ADDR
 765: LD_INT 1
 767: PUSH
 768: FOR_DOWNTO
 769: IFFALSE 836
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 771: LD_VAR 0 1
 775: PPUSH
 776: LD_VAR 0 4
 780: PUSH
 781: LD_VAR 0 6
 785: PUSH
 786: LD_INT 1
 788: MINUS
 789: ARRAY
 790: PPUSH
 791: LD_VAR 0 4
 795: PUSH
 796: LD_VAR 0 6
 800: ARRAY
 801: PPUSH
 802: CALL_OW 174
// AddComWait ( unit , pause ) ;
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 3
 815: PPUSH
 816: CALL_OW 202
// i := i - 1 ;
 820: LD_ADDR_VAR 0 6
 824: PUSH
 825: LD_VAR 0 6
 829: PUSH
 830: LD_INT 1
 832: MINUS
 833: ST_TO_ADDR
// end ;
 834: GO 768
 836: POP
 837: POP
// end ; end ;
 838: GO 482
// end ;
 840: LD_VAR 0 5
 844: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 845: LD_INT 0
 847: PPUSH
 848: PPUSH
// uc_nation := 1 ;
 849: LD_ADDR_OWVAR 21
 853: PUSH
 854: LD_INT 1
 856: ST_TO_ADDR
// uc_side := 0 ;
 857: LD_ADDR_OWVAR 20
 861: PUSH
 862: LD_INT 0
 864: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 0
 873: PPUSH
 874: CALL_OW 380
// hc_name := speaker ;
 878: LD_ADDR_OWVAR 26
 882: PUSH
 883: LD_STRING speaker
 885: ST_TO_ADDR
// hc_gallery :=  ;
 886: LD_ADDR_OWVAR 33
 890: PUSH
 891: LD_STRING 
 893: ST_TO_ADDR
// speaker := CreateHuman ;
 894: LD_ADDR_VAR 0 3
 898: PUSH
 899: CALL_OW 44
 903: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 904: LD_VAR 0 3
 908: PPUSH
 909: LD_VAR 0 1
 913: PPUSH
 914: CALL_OW 88
// end ; end_of_file
 918: LD_VAR 0 2
 922: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 923: LD_INT 0
 925: PPUSH
// uc_nation := 1 ;
 926: LD_ADDR_OWVAR 21
 930: PUSH
 931: LD_INT 1
 933: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 934: LD_ADDR_EXP 16
 938: PUSH
 939: LD_STRING JMM
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL 197 0 2
 949: ST_TO_ADDR
// uc_side := 4 ;
 950: LD_ADDR_OWVAR 20
 954: PUSH
 955: LD_INT 4
 957: ST_TO_ADDR
// hc_gallery := us ;
 958: LD_ADDR_OWVAR 33
 962: PUSH
 963: LD_STRING us
 965: ST_TO_ADDR
// hc_face_number := 7 ;
 966: LD_ADDR_OWVAR 34
 970: PUSH
 971: LD_INT 7
 973: ST_TO_ADDR
// hc_sex := sex_male ;
 974: LD_ADDR_OWVAR 27
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// hc_name := . ;
 982: LD_ADDR_OWVAR 26
 986: PUSH
 987: LD_STRING .
 989: ST_TO_ADDR
// hc_class := 1 ;
 990: LD_ADDR_OWVAR 28
 994: PUSH
 995: LD_INT 1
 997: ST_TO_ADDR
// Powell := CreateHuman ;
 998: LD_ADDR_EXP 19
1002: PUSH
1003: CALL_OW 44
1007: ST_TO_ADDR
// hc_name := . ;
1008: LD_ADDR_OWVAR 26
1012: PUSH
1013: LD_STRING .
1015: ST_TO_ADDR
// hc_gallery := ru ;
1016: LD_ADDR_OWVAR 33
1020: PUSH
1021: LD_STRING ru
1023: ST_TO_ADDR
// hc_face_number := 4 ;
1024: LD_ADDR_OWVAR 34
1028: PUSH
1029: LD_INT 4
1031: ST_TO_ADDR
// hc_sex := sex_male ;
1032: LD_ADDR_OWVAR 27
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: CALL_OW 44
1049: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1050: LD_ADDR_EXP 17
1054: PUSH
1055: LD_STRING Bobby
1057: PPUSH
1058: LD_INT 0
1060: PPUSH
1061: CALL 197 0 2
1065: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1066: LD_ADDR_EXP 18
1070: PUSH
1071: LD_STRING Cyrus
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL 197 0 2
1081: ST_TO_ADDR
// case Difficulty of 1 :
1082: LD_OWVAR 67
1086: PUSH
1087: LD_INT 1
1089: DOUBLE
1090: EQUAL
1091: IFTRUE 1095
1093: GO 1110
1095: POP
// SetLives ( Bobby , 500 ) ; 2 :
1096: LD_EXP 17
1100: PPUSH
1101: LD_INT 500
1103: PPUSH
1104: CALL_OW 234
1108: GO 1157
1110: LD_INT 2
1112: DOUBLE
1113: EQUAL
1114: IFTRUE 1118
1116: GO 1133
1118: POP
// SetLives ( Bobby , 460 ) ; 3 :
1119: LD_EXP 17
1123: PPUSH
1124: LD_INT 460
1126: PPUSH
1127: CALL_OW 234
1131: GO 1157
1133: LD_INT 3
1135: DOUBLE
1136: EQUAL
1137: IFTRUE 1141
1139: GO 1156
1141: POP
// SetLives ( Bobby , 420 ) ; end ;
1142: LD_EXP 17
1146: PPUSH
1147: LD_INT 420
1149: PPUSH
1150: CALL_OW 234
1154: GO 1157
1156: POP
// end ; end_of_file
1157: LD_VAR 0 1
1161: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1162: LD_INT 0
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1168: LD_ADDR_VAR 0 2
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 2
1178: PUSH
1179: LD_INT 3
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_OWVAR 67
1191: ARRAY
1192: ST_TO_ADDR
// uc_side := 3 ;
1193: LD_ADDR_OWVAR 20
1197: PUSH
1198: LD_INT 3
1200: ST_TO_ADDR
// uc_nation := 3 ;
1201: LD_ADDR_OWVAR 21
1205: PUSH
1206: LD_INT 3
1208: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1209: LD_ADDR_EXP 26
1213: PUSH
1214: LD_STRING Pokryshkin
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL 197 0 2
1224: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1225: LD_EXP 26
1229: PPUSH
1230: LD_INT 44
1232: PPUSH
1233: LD_INT 5
1235: PPUSH
1236: LD_INT 0
1238: PPUSH
1239: CALL_OW 48
// hc_importance := 0 ;
1243: LD_ADDR_OWVAR 32
1247: PUSH
1248: LD_INT 0
1250: ST_TO_ADDR
// hc_gallery :=  ;
1251: LD_ADDR_OWVAR 33
1255: PUSH
1256: LD_STRING 
1258: ST_TO_ADDR
// hc_name :=  ;
1259: LD_ADDR_OWVAR 26
1263: PUSH
1264: LD_STRING 
1266: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1267: LD_INT 1
1269: PPUSH
1270: LD_INT 1
1272: PPUSH
1273: LD_VAR 0 2
1277: PPUSH
1278: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1282: LD_ADDR_OWVAR 33
1286: PUSH
1287: LD_STRING SecondCharsGal
1289: ST_TO_ADDR
// hc_face_number := 69 ;
1290: LD_ADDR_OWVAR 34
1294: PUSH
1295: LD_INT 69
1297: ST_TO_ADDR
// hc_sex := sex_male ;
1298: LD_ADDR_OWVAR 27
1302: PUSH
1303: LD_INT 1
1305: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1306: LD_ADDR_OWVAR 26
1310: PUSH
1311: LD_STRING Ilja Ivanov
1313: ST_TO_ADDR
// un := CreateHuman ;
1314: LD_ADDR_VAR 0 4
1318: PUSH
1319: CALL_OW 44
1323: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1324: LD_ADDR_EXP 21
1328: PUSH
1329: LD_EXP 21
1333: PPUSH
1334: LD_INT 1
1336: PPUSH
1337: LD_VAR 0 4
1341: PPUSH
1342: CALL_OW 2
1346: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1347: LD_VAR 0 4
1351: PPUSH
1352: LD_INT 3
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: LD_VAR 0 2
1372: PPUSH
1373: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1377: LD_ADDR_OWVAR 33
1381: PUSH
1382: LD_STRING SecondCharsGal
1384: ST_TO_ADDR
// hc_face_number := 70 ;
1385: LD_ADDR_OWVAR 34
1389: PUSH
1390: LD_INT 70
1392: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1393: LD_ADDR_OWVAR 26
1397: PUSH
1398: LD_STRING Pavel Starczy
1400: ST_TO_ADDR
// un := CreateHuman ;
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: CALL_OW 44
1410: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1411: LD_ADDR_EXP 21
1415: PUSH
1416: LD_EXP 21
1420: PPUSH
1421: LD_INT 2
1423: PPUSH
1424: LD_VAR 0 4
1428: PPUSH
1429: CALL_OW 2
1433: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1434: LD_VAR 0 4
1438: PPUSH
1439: LD_INT 3
1441: PPUSH
1442: LD_INT 0
1444: PPUSH
1445: CALL_OW 49
// InitHc ;
1449: CALL_OW 19
// for i = 1 to 7 do
1453: LD_ADDR_VAR 0 3
1457: PUSH
1458: DOUBLE
1459: LD_INT 1
1461: DEC
1462: ST_TO_ADDR
1463: LD_INT 7
1465: PUSH
1466: FOR_TO
1467: IFFALSE 1618
// begin PrepareHuman ( false , 1 , skill ) ;
1469: LD_INT 0
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: LD_VAR 0 2
1479: PPUSH
1480: CALL_OW 380
// un := CreateHuman ;
1484: LD_ADDR_VAR 0 4
1488: PUSH
1489: CALL_OW 44
1493: ST_TO_ADDR
// if i mod 2 = 0 then
1494: LD_VAR 0 3
1498: PUSH
1499: LD_INT 2
1501: MOD
1502: PUSH
1503: LD_INT 0
1505: EQUAL
1506: IFFALSE 1563
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1508: LD_ADDR_EXP 21
1512: PUSH
1513: LD_EXP 21
1517: PPUSH
1518: LD_EXP 21
1522: PUSH
1523: LD_INT 1
1525: PLUS
1526: PPUSH
1527: LD_VAR 0 4
1531: PPUSH
1532: CALL_OW 2
1536: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1537: LD_VAR 0 4
1541: PPUSH
1542: LD_INT 3
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 49
// ComHold ( un ) ;
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL_OW 140
// end else
1561: GO 1616
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1563: LD_ADDR_EXP 22
1567: PUSH
1568: LD_EXP 22
1572: PPUSH
1573: LD_EXP 22
1577: PUSH
1578: LD_INT 1
1580: PLUS
1581: PPUSH
1582: LD_VAR 0 4
1586: PPUSH
1587: CALL_OW 2
1591: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 4
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// ComHold ( un ) ;
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL_OW 140
// end ; end ;
1616: GO 1466
1618: POP
1619: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1620: LD_ADDR_VAR 0 3
1624: PUSH
1625: LD_INT 22
1627: PUSH
1628: LD_INT 3
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 30
1637: PUSH
1638: LD_INT 31
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 69
1653: PUSH
1654: FOR_IN
1655: IFFALSE 1673
// PrepareSolBun ( skill , i ) ;
1657: LD_VAR 0 2
1661: PPUSH
1662: LD_VAR 0 3
1666: PPUSH
1667: CALL 254 0 2
1671: GO 1654
1673: POP
1674: POP
// for i = 1 to 2 do
1675: LD_ADDR_VAR 0 3
1679: PUSH
1680: DOUBLE
1681: LD_INT 1
1683: DEC
1684: ST_TO_ADDR
1685: LD_INT 2
1687: PUSH
1688: FOR_TO
1689: IFFALSE 1820
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1691: LD_ADDR_VAR 0 4
1695: PUSH
1696: LD_INT 3
1698: PPUSH
1699: LD_INT 3
1701: PPUSH
1702: LD_INT 22
1704: PPUSH
1705: LD_INT 1
1707: PPUSH
1708: LD_INT 1
1710: PPUSH
1711: LD_INT 42
1713: PPUSH
1714: LD_INT 100
1716: PPUSH
1717: CALL 390 0 7
1721: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1722: LD_INT 0
1724: PPUSH
1725: LD_INT 3
1727: PPUSH
1728: LD_VAR 0 2
1732: PPUSH
1733: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1737: CALL_OW 44
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1751: LD_VAR 0 4
1755: PPUSH
1756: LD_INT 23
1758: PUSH
1759: LD_INT 131
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_VAR 0 3
1770: ARRAY
1771: PPUSH
1772: LD_INT 14
1774: PUSH
1775: LD_INT 87
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: LD_VAR 0 3
1786: ARRAY
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1795: LD_ADDR_EXP 23
1799: PUSH
1800: LD_EXP 23
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PPUSH
1813: CALL_OW 2
1817: ST_TO_ADDR
// end ;
1818: GO 1688
1820: POP
1821: POP
// for i = 1 to 2 do
1822: LD_ADDR_VAR 0 3
1826: PUSH
1827: DOUBLE
1828: LD_INT 1
1830: DEC
1831: ST_TO_ADDR
1832: LD_INT 2
1834: PUSH
1835: FOR_TO
1836: IFFALSE 1927
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1838: LD_INT 2
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: LD_VAR 0 3
1856: ARRAY
1857: PPUSH
1858: LD_INT 1
1860: PPUSH
1861: LD_INT 1
1863: PPUSH
1864: CALL_OW 380
// un := CreateHuman ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: CALL_OW 44
1877: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1878: LD_ADDR_EXP 24
1882: PUSH
1883: LD_EXP 24
1887: PPUSH
1888: LD_INT 1
1890: PPUSH
1891: LD_VAR 0 4
1895: PPUSH
1896: CALL_OW 2
1900: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1901: LD_VAR 0 4
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 49
// ComHold ( un ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: CALL_OW 140
// end ;
1925: GO 1835
1927: POP
1928: POP
// if Difficulty < 3 then
1929: LD_OWVAR 67
1933: PUSH
1934: LD_INT 3
1936: LESS
1937: IFFALSE 1941
// exit ;
1939: GO 1984
// PrepareHuman ( false , 1 , skill ) ;
1941: LD_INT 0
1943: PPUSH
1944: LD_INT 1
1946: PPUSH
1947: LD_VAR 0 2
1951: PPUSH
1952: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1956: LD_ADDR_EXP 25
1960: PUSH
1961: CALL_OW 44
1965: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1966: LD_EXP 25
1970: PPUSH
1971: LD_INT 82
1973: PPUSH
1974: LD_INT 2
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 48
// end ;
1984: LD_VAR 0 1
1988: RET
// every 0 0$01 trigger active_road_patrol do
1989: LD_EXP 8
1993: IFFALSE 2059
1995: GO 1997
1997: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1998: LD_EXP 23
2002: PUSH
2003: LD_INT 1
2005: ARRAY
2006: PPUSH
2007: LD_STRING road
2009: PPUSH
2010: LD_INT 70
2012: PPUSH
2013: LD_INT 131
2015: PUSH
2016: LD_INT 87
2018: PUSH
2019: LD_INT 107
2021: PUSH
2022: LD_INT 75
2024: PUSH
2025: LD_INT 107
2027: PUSH
2028: LD_INT 66
2030: PUSH
2031: LD_INT 114
2033: PUSH
2034: LD_INT 61
2036: PUSH
2037: LD_INT 107
2039: PUSH
2040: LD_INT 34
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: PPUSH
2055: CALL 478 0 4
2059: END
// every 0 0$01 trigger active_road_patrol do
2060: LD_EXP 8
2064: IFFALSE 2122
2066: GO 2068
2068: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2069: LD_EXP 23
2073: PUSH
2074: LD_INT 2
2076: ARRAY
2077: PPUSH
2078: LD_STRING road
2080: PPUSH
2081: LD_INT 70
2083: PPUSH
2084: LD_INT 21
2086: PUSH
2087: LD_INT 12
2089: PUSH
2090: LD_INT 37
2092: PUSH
2093: LD_INT 30
2095: PUSH
2096: LD_INT 65
2098: PUSH
2099: LD_INT 62
2101: PUSH
2102: LD_INT 107
2104: PUSH
2105: LD_INT 76
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: PPUSH
2118: CALL 478 0 4
2122: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2123: LD_EXP 25
2127: PPUSH
2128: CALL_OW 302
2132: IFFALSE 2194
2134: GO 2136
2136: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2137: LD_EXP 25
2141: PPUSH
2142: LD_STRING forest
2144: PPUSH
2145: LD_INT 35
2147: PPUSH
2148: LD_INT 52
2150: PUSH
2151: LD_INT 15
2153: PUSH
2154: LD_INT 81
2156: PUSH
2157: LD_INT 9
2159: PUSH
2160: LD_INT 120
2162: PUSH
2163: LD_INT 52
2165: PUSH
2166: LD_INT 135
2168: PUSH
2169: LD_INT 80
2171: PUSH
2172: LD_INT 122
2174: PUSH
2175: LD_INT 95
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: PPUSH
2190: CALL 478 0 4
2194: END
// every 0 0$01 trigger macmilan_use_radio do
2195: LD_EXP 6
2199: IFFALSE 2260
2201: GO 2203
2203: DISABLE
// begin active_road_patrol := false ;
2204: LD_ADDR_EXP 8
2208: PUSH
2209: LD_INT 0
2211: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2212: LD_EXP 23
2216: PPUSH
2217: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2221: LD_EXP 23
2225: PPUSH
2226: LD_INT 72
2228: PPUSH
2229: LD_INT 41
2231: PPUSH
2232: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2236: LD_EXP 22
2240: PPUSH
2241: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2245: LD_EXP 22
2249: PPUSH
2250: LD_INT 72
2252: PPUSH
2253: LD_INT 41
2255: PPUSH
2256: CALL_OW 174
// end ;
2260: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2261: LD_INT 9
2263: PPUSH
2264: LD_INT 22
2266: PUSH
2267: LD_INT 1
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PPUSH
2274: CALL_OW 70
2278: IFFALSE 2352
2280: GO 2282
2282: DISABLE
2283: LD_INT 0
2285: PPUSH
// begin enable ;
2286: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2287: LD_ADDR_VAR 0 1
2291: PUSH
2292: LD_INT 9
2294: PPUSH
2295: LD_INT 22
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PPUSH
2305: CALL_OW 70
2309: PUSH
2310: LD_INT 1
2312: ARRAY
2313: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2314: LD_EXP 22
2318: PPUSH
2319: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2323: LD_EXP 22
2327: PPUSH
2328: LD_VAR 0 1
2332: PPUSH
2333: CALL_OW 250
2337: PPUSH
2338: LD_VAR 0 1
2342: PPUSH
2343: CALL_OW 251
2347: PPUSH
2348: CALL_OW 174
// end ;
2352: PPOPN 1
2354: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2355: LD_EXP 23
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: CALL_OW 256
2368: PUSH
2369: LD_INT 999
2371: LESS
2372: PUSH
2373: LD_EXP 23
2377: PUSH
2378: LD_INT 2
2380: ARRAY
2381: PPUSH
2382: CALL_OW 256
2386: PUSH
2387: LD_INT 999
2389: LESS
2390: OR
2391: PUSH
2392: LD_INT 3
2394: PPUSH
2395: LD_EXP 16
2399: PPUSH
2400: CALL_OW 292
2404: AND
2405: IFFALSE 2432
2407: GO 2409
2409: DISABLE
// begin active_road_patrol := false ;
2410: LD_ADDR_EXP 8
2414: PUSH
2415: LD_INT 0
2417: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2418: LD_EXP 23
2422: PPUSH
2423: LD_EXP 16
2427: PPUSH
2428: CALL_OW 115
// end ;
2432: END
// every 0 0$01 trigger macmilan_in_trap do
2433: LD_EXP 9
2437: IFFALSE 2483
2439: GO 2441
2441: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2442: LD_EXP 22
2446: PPUSH
2447: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2451: LD_EXP 21
2455: PUSH
2456: LD_EXP 22
2460: ADD
2461: PUSH
2462: LD_EXP 26
2466: ADD
2467: PUSH
2468: LD_EXP 23
2472: ADD
2473: PPUSH
2474: LD_EXP 16
2478: PPUSH
2479: CALL_OW 115
// end ;
2483: END
// every 0 0$01 trigger meta_action do
2484: LD_EXP 10
2488: IFFALSE 2534
2490: GO 2492
2492: DISABLE
// begin active_road_patrol := false ;
2493: LD_ADDR_EXP 8
2497: PUSH
2498: LD_INT 0
2500: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2501: LD_EXP 21
2505: PUSH
2506: LD_EXP 22
2510: ADD
2511: PUSH
2512: LD_EXP 26
2516: ADD
2517: PUSH
2518: LD_EXP 23
2522: ADD
2523: PPUSH
2524: LD_INT 93
2526: PPUSH
2527: LD_INT 1
2529: PPUSH
2530: CALL_OW 114
// end ;
2534: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2535: LD_EXP 26
2539: PPUSH
2540: CALL_OW 256
2544: PUSH
2545: LD_INT 1000
2547: LESS
2548: IFFALSE 2599
2550: GO 2552
2552: DISABLE
// begin enable ;
2553: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2554: LD_INT 18
2556: PPUSH
2557: LD_INT 1
2559: PPUSH
2560: CALL_OW 428
2564: PUSH
2565: LD_EXP 26
2569: EQUAL
2570: IFFALSE 2584
// begin RemoveUnit ( Pokryshkin ) ;
2572: LD_EXP 26
2576: PPUSH
2577: CALL_OW 64
// disable ;
2581: DISABLE
// end else
2582: GO 2599
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2584: LD_EXP 26
2588: PPUSH
2589: LD_INT 18
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 111
// end ;
2599: END
// every 0 0$20 trigger send_troops_to_forest do
2600: LD_EXP 14
2604: IFFALSE 2658
2606: GO 2608
2608: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2609: LD_EXP 25
2613: PPUSH
2614: CALL_OW 302
2618: NOT
2619: IFFALSE 2623
// exit ;
2621: GO 2658
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2623: LD_EXP 21
2627: PUSH
2628: LD_EXP 26
2632: ADD
2633: PPUSH
2634: LD_EXP 25
2638: PPUSH
2639: CALL_OW 252
2643: PPUSH
2644: LD_EXP 25
2648: PPUSH
2649: CALL_OW 253
2653: PPUSH
2654: CALL_OW 114
// end ;
2658: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 255
2668: PUSH
2669: LD_INT 3
2671: EQUAL
2672: IFFALSE 2715
// begin wait ( 11 ) ;
2674: LD_INT 11
2676: PPUSH
2677: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2681: LD_VAR 0 1
2685: PPUSH
2686: LD_INT 30
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PPUSH
2696: CALL_OW 69
2700: PPUSH
2701: LD_VAR 0 1
2705: PPUSH
2706: CALL_OW 74
2710: PPUSH
2711: CALL_OW 120
// end ; end ; end_of_file
2715: PPOPN 4
2717: END
// export function Action ; var i ; begin
2718: LD_INT 0
2720: PPUSH
2721: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2722: LD_ADDR_VAR 0 2
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 25
2739: PUSH
2740: LD_INT 1
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: FOR_IN
2757: IFFALSE 2770
// ComHold ( i ) ;
2759: LD_VAR 0 2
2763: PPUSH
2764: CALL_OW 140
2768: GO 2756
2770: POP
2771: POP
// InGameOn ;
2772: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2776: LD_INT 79
2778: PPUSH
2779: LD_INT 76
2781: PPUSH
2782: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2786: LD_INT 10
2788: PPUSH
2789: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2793: LD_EXP 16
2797: PPUSH
2798: LD_INT 80
2800: PPUSH
2801: LD_INT 79
2803: PPUSH
2804: LD_INT 1
2806: PPUSH
2807: CALL_OW 48
// Wait ( 0 0$03 ) ;
2811: LD_INT 105
2813: PPUSH
2814: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2818: LD_EXP 16
2822: PPUSH
2823: LD_INT 80
2825: PPUSH
2826: LD_INT 76
2828: PPUSH
2829: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2833: LD_EXP 16
2837: PPUSH
2838: LD_STRING D1-JMM-1
2840: PPUSH
2841: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2845: LD_INT 10
2847: PPUSH
2848: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2852: LD_EXP 16
2856: PPUSH
2857: LD_INT 76
2859: PPUSH
2860: LD_INT 76
2862: PPUSH
2863: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2867: LD_EXP 16
2871: PPUSH
2872: LD_STRING D1-JMM-1a
2874: PPUSH
2875: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2879: LD_INT 10
2881: PPUSH
2882: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2886: LD_EXP 16
2890: PPUSH
2891: LD_INT 83
2893: PPUSH
2894: LD_INT 66
2896: PPUSH
2897: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2901: LD_EXP 16
2905: PPUSH
2906: LD_STRING D1-JMM-1b
2908: PPUSH
2909: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2913: LD_INT 18
2915: PPUSH
2916: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2920: LD_EXP 16
2924: PPUSH
2925: LD_STRING D1-JMM-1c
2927: PPUSH
2928: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2932: LD_INT 7
2934: PPUSH
2935: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2939: LD_EXP 19
2943: PPUSH
2944: LD_STRING D1-Pow-1
2946: PPUSH
2947: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2951: LD_EXP 16
2955: PPUSH
2956: LD_STRING D1-JMM-2
2958: PPUSH
2959: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2963: LD_EXP 19
2967: PPUSH
2968: LD_STRING D1-Pow-2
2970: PPUSH
2971: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_STRING D1-JMM-3
2982: PPUSH
2983: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2987: LD_EXP 19
2991: PPUSH
2992: LD_STRING D1-Pow-3
2994: PPUSH
2995: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2999: LD_EXP 16
3003: PPUSH
3004: LD_STRING D1-JMM-4
3006: PPUSH
3007: CALL_OW 88
// ComFree ( JMM ) ;
3011: LD_EXP 16
3015: PPUSH
3016: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3020: LD_INT 10
3022: PPUSH
3023: CALL_OW 67
// InGameOff ;
3027: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3031: LD_STRING M1
3033: PPUSH
3034: CALL_OW 337
// SaveForQuickRestart ;
3038: CALL_OW 22
// active_russian_dialog := true ;
3042: LD_ADDR_EXP 3
3046: PUSH
3047: LD_INT 1
3049: ST_TO_ADDR
// active_road_patrol := true ;
3050: LD_ADDR_EXP 8
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// if Difficulty < 3 then
3058: LD_OWVAR 67
3062: PUSH
3063: LD_INT 3
3065: LESS
3066: IFFALSE 3097
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3068: LD_EXP 17
3072: PPUSH
3073: LD_INT 41
3075: PPUSH
3076: LD_INT 71
3078: PPUSH
3079: LD_INT 0
3081: PPUSH
3082: CALL_OW 48
// ComHold ( Bobby ) ;
3086: LD_EXP 17
3090: PPUSH
3091: CALL_OW 140
// end else
3095: GO 3145
// begin SetDir ( Bobby , 5 ) ;
3097: LD_EXP 17
3101: PPUSH
3102: LD_INT 5
3104: PPUSH
3105: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3109: LD_EXP 17
3113: PPUSH
3114: LD_INT 105
3116: PPUSH
3117: LD_INT 98
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL_OW 48
// ComCrawl ( Bobby ) ;
3127: LD_EXP 17
3131: PPUSH
3132: CALL_OW 137
// AddComHold ( Bobby ) ;
3136: LD_EXP 17
3140: PPUSH
3141: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3145: LD_EXP 18
3149: PPUSH
3150: LD_INT 90
3152: PPUSH
3153: LD_INT 42
3155: PPUSH
3156: LD_INT 0
3158: PPUSH
3159: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3163: LD_EXP 18
3167: PPUSH
3168: LD_INT 79
3170: PPUSH
3171: LD_INT 34
3173: PPUSH
3174: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3178: LD_EXP 18
3182: PPUSH
3183: CALL_OW 197
// end ;
3187: LD_VAR 0 1
3191: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3192: LD_EXP 3
3196: IFFALSE 3790
3198: GO 3200
3200: DISABLE
3201: LD_INT 0
3203: PPUSH
// begin wait_points := 0 ;
3204: LD_ADDR_VAR 0 1
3208: PUSH
3209: LD_INT 0
3211: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3212: LD_INT 70
3214: PPUSH
3215: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3219: LD_EXP 21
3223: PPUSH
3224: LD_INT 79
3226: PPUSH
3227: LD_INT 83
3229: PPUSH
3230: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3234: LD_EXP 21
3238: PUSH
3239: LD_INT 2
3241: ARRAY
3242: PPUSH
3243: LD_STRING D1R-Rus1-1
3245: PPUSH
3246: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3250: LD_EXP 21
3254: PUSH
3255: LD_INT 1
3257: ARRAY
3258: PPUSH
3259: LD_STRING D1R-Rus2-1
3261: PPUSH
3262: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3266: LD_EXP 22
3270: PPUSH
3271: LD_INT 91
3273: PPUSH
3274: LD_INT 80
3276: PPUSH
3277: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3281: LD_INT 35
3283: PPUSH
3284: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3288: LD_EXP 21
3292: PUSH
3293: LD_INT 1
3295: ARRAY
3296: PPUSH
3297: LD_INT 79
3299: PPUSH
3300: LD_INT 82
3302: PPUSH
3303: CALL_OW 297
3307: PUSH
3308: LD_INT 6
3310: LESS
3311: IFFALSE 3281
// if not IsInArea ( JMM , jmm_spot ) then
3313: LD_EXP 16
3317: PPUSH
3318: LD_INT 5
3320: PPUSH
3321: CALL_OW 308
3325: NOT
3326: IFFALSE 3346
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3328: LD_EXP 21
3332: PUSH
3333: LD_INT 1
3335: ARRAY
3336: PPUSH
3337: LD_STRING D1Ra-Rus2-1
3339: PPUSH
3340: CALL_OW 88
3344: GO 3413
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3346: LD_EXP 21
3350: PUSH
3351: LD_INT 2
3353: ARRAY
3354: PPUSH
3355: LD_STRING D1Rb-Rus1-1
3357: PPUSH
3358: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3362: LD_EXP 21
3366: PUSH
3367: LD_INT 1
3369: ARRAY
3370: PPUSH
3371: LD_STRING D1Rb-Rus2-1
3373: PPUSH
3374: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3378: LD_EXP 21
3382: PUSH
3383: LD_EXP 22
3387: ADD
3388: PPUSH
3389: LD_EXP 16
3393: PPUSH
3394: CALL_OW 250
3398: PPUSH
3399: LD_EXP 16
3403: PPUSH
3404: CALL_OW 251
3408: PPUSH
3409: CALL_OW 114
// end ; wait_points := 10 ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_INT 10
3420: ST_TO_ADDR
// if Difficulty > 1 then
3421: LD_OWVAR 67
3425: PUSH
3426: LD_INT 1
3428: GREATER
3429: IFFALSE 3511
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3431: LD_EXP 21
3435: PPUSH
3436: LD_INT 78
3438: PPUSH
3439: LD_INT 95
3441: PPUSH
3442: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3446: LD_EXP 21
3450: PPUSH
3451: LD_INT 175
3453: PPUSH
3454: CALL_OW 202
// wait_points := wait_points + 15 ;
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: LD_VAR 0 1
3467: PUSH
3468: LD_INT 15
3470: PLUS
3471: ST_TO_ADDR
// if Difficulty > 2 then
3472: LD_OWVAR 67
3476: PUSH
3477: LD_INT 2
3479: GREATER
3480: IFFALSE 3511
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3482: LD_EXP 21
3486: PPUSH
3487: LD_INT 65
3489: PPUSH
3490: LD_INT 79
3492: PPUSH
3493: CALL_OW 174
// wait_points := wait_points + 5 ;
3497: LD_ADDR_VAR 0 1
3501: PUSH
3502: LD_VAR 0 1
3506: PUSH
3507: LD_INT 5
3509: PLUS
3510: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3511: LD_INT 35
3513: PPUSH
3514: CALL_OW 67
// wait_points := wait_points - 1 ;
3518: LD_ADDR_VAR 0 1
3522: PUSH
3523: LD_VAR 0 1
3527: PUSH
3528: LD_INT 1
3530: MINUS
3531: ST_TO_ADDR
// if See ( 3 , JMM ) then
3532: LD_INT 3
3534: PPUSH
3535: LD_EXP 16
3539: PPUSH
3540: CALL_OW 292
3544: IFFALSE 3598
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3546: LD_EXP 21
3550: PUSH
3551: LD_INT 2
3553: ARRAY
3554: PPUSH
3555: LD_STRING D1Rb-Rus1-1
3557: PPUSH
3558: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3562: LD_EXP 21
3566: PPUSH
3567: LD_EXP 16
3571: PPUSH
3572: CALL_OW 250
3576: PPUSH
3577: LD_EXP 16
3581: PPUSH
3582: CALL_OW 251
3586: PPUSH
3587: CALL_OW 114
// Wait ( 0 0$03 ) ;
3591: LD_INT 105
3593: PPUSH
3594: CALL_OW 67
// end ; until wait_points = 0 ;
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 0
3605: EQUAL
3606: IFFALSE 3511
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3608: LD_EXP 21
3612: PUSH
3613: LD_INT 2
3615: ARRAY
3616: PPUSH
3617: LD_STRING D1Rc-Rus1-1
3619: PPUSH
3620: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3624: LD_EXP 21
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PPUSH
3633: LD_STRING D1Ra-Rus2-1a
3635: PPUSH
3636: CALL_OW 88
// active_powell_dialog := true ;
3640: LD_ADDR_EXP 15
3644: PUSH
3645: LD_INT 1
3647: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3648: LD_EXP 21
3652: PPUSH
3653: LD_INT 45
3655: PPUSH
3656: LD_INT 5
3658: PPUSH
3659: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3663: LD_EXP 22
3667: PPUSH
3668: LD_INT 26
3670: PPUSH
3671: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3675: LD_INT 35
3677: PPUSH
3678: CALL_OW 67
// if See ( 3 , JMM ) then
3682: LD_INT 3
3684: PPUSH
3685: LD_EXP 16
3689: PPUSH
3690: CALL_OW 292
3694: IFFALSE 3750
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3696: LD_EXP 21
3700: PUSH
3701: LD_INT 2
3703: ARRAY
3704: PPUSH
3705: LD_STRING D1Rb-Rus1-1
3707: PPUSH
3708: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3712: LD_EXP 21
3716: PPUSH
3717: LD_EXP 16
3721: PPUSH
3722: CALL_OW 250
3726: PPUSH
3727: LD_EXP 16
3731: PPUSH
3732: CALL_OW 251
3736: PPUSH
3737: CALL_OW 114
// Wait ( 0 0$50 ) ;
3741: LD_INT 1750
3743: PPUSH
3744: CALL_OW 67
// end else
3748: GO 3765
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3750: LD_EXP 21
3754: PPUSH
3755: LD_INT 45
3757: PPUSH
3758: LD_INT 5
3760: PPUSH
3761: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3765: LD_EXP 21
3769: PUSH
3770: LD_INT 1
3772: ARRAY
3773: PPUSH
3774: LD_INT 45
3776: PPUSH
3777: LD_INT 5
3779: PPUSH
3780: CALL_OW 297
3784: PUSH
3785: LD_INT 10
3787: LESS
3788: IFFALSE 3675
// end ;
3790: PPOPN 1
3792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
3793: LD_INT 22
3795: PUSH
3796: LD_INT 3
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 92
3805: PUSH
3806: LD_INT 80
3808: PUSH
3809: LD_INT 83
3811: PUSH
3812: LD_INT 6
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: PUSH
3830: LD_OWVAR 67
3834: PUSH
3835: LD_INT 1
3837: EQUAL
3838: AND
3839: IFFALSE 3920
3841: GO 3843
3843: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
3844: LD_INT 80
3846: PPUSH
3847: LD_INT 83
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: LD_INT 7
3855: NEG
3856: PPUSH
3857: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
3868: LD_INT 22
3870: PUSH
3871: LD_INT 3
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 92
3880: PUSH
3881: LD_INT 80
3883: PUSH
3884: LD_INT 83
3886: PUSH
3887: LD_INT 10
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PPUSH
3900: CALL_OW 69
3904: NOT
3905: IFFALSE 3861
// RemoveSeeing ( 80 , 83 , 1 ) ;
3907: LD_INT 80
3909: PPUSH
3910: LD_INT 83
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: CALL_OW 331
// end ;
3920: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 and IsOk ( Bobby ) do
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 17
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 9
3938: LESS
3939: PUSH
3940: LD_EXP 17
3944: PPUSH
3945: CALL_OW 302
3949: AND
3950: IFFALSE 4401
3952: GO 3954
3954: DISABLE
// begin ComWalk ( Bobby ) ;
3955: LD_EXP 17
3959: PPUSH
3960: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3964: LD_EXP 17
3968: PPUSH
3969: LD_EXP 16
3973: PPUSH
3974: CALL_OW 250
3978: PPUSH
3979: LD_EXP 16
3983: PPUSH
3984: CALL_OW 251
3988: PPUSH
3989: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3993: LD_INT 35
3995: PPUSH
3996: CALL_OW 67
// until See ( 4 , JMM ) ;
4000: LD_INT 4
4002: PPUSH
4003: LD_EXP 16
4007: PPUSH
4008: CALL_OW 292
4012: IFFALSE 3993
// InGameOn ;
4014: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4018: LD_EXP 16
4022: PPUSH
4023: LD_EXP 17
4027: PPUSH
4028: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4032: LD_EXP 7
4036: PUSH
4037: LD_EXP 18
4041: PPUSH
4042: CALL_OW 302
4046: AND
4047: PUSH
4048: LD_EXP 16
4052: PPUSH
4053: LD_EXP 18
4057: PPUSH
4058: CALL_OW 296
4062: PUSH
4063: LD_INT 10
4065: LESS
4066: AND
4067: IFFALSE 4112
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4069: LD_EXP 18
4073: PPUSH
4074: LD_EXP 16
4078: PPUSH
4079: CALL_OW 250
4083: PPUSH
4084: LD_EXP 16
4088: PPUSH
4089: CALL_OW 251
4093: PPUSH
4094: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4098: LD_EXP 18
4102: PPUSH
4103: LD_EXP 17
4107: PPUSH
4108: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4112: LD_EXP 16
4116: PPUSH
4117: LD_STRING D2-JMM-1
4119: PPUSH
4120: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4124: LD_INT 10
4126: PPUSH
4127: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4131: LD_EXP 17
4135: PPUSH
4136: LD_EXP 16
4140: PPUSH
4141: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4145: LD_EXP 17
4149: PPUSH
4150: LD_STRING D2-Bobby-1
4152: PPUSH
4153: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4157: LD_EXP 16
4161: PPUSH
4162: LD_STRING D2-JMM-2
4164: PPUSH
4165: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4169: LD_EXP 17
4173: PPUSH
4174: LD_EXP 16
4178: PPUSH
4179: CALL_OW 250
4183: PPUSH
4184: LD_EXP 16
4188: PPUSH
4189: CALL_OW 251
4193: PPUSH
4194: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4198: LD_EXP 17
4202: PPUSH
4203: LD_STRING D2-Bobby-2
4205: PPUSH
4206: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4210: LD_EXP 16
4214: PPUSH
4215: LD_STRING D2-JMM-3
4217: PPUSH
4218: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_EXP 16
4231: PPUSH
4232: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
4236: LD_EXP 17
4240: PPUSH
4241: LD_STRING D2-Bobby-3
4243: PPUSH
4244: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4248: LD_EXP 16
4252: PPUSH
4253: LD_STRING D2-JMM-4
4255: PPUSH
4256: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4260: LD_EXP 17
4264: PPUSH
4265: LD_STRING D2-Bobby-4
4267: PPUSH
4268: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4272: LD_EXP 16
4276: PPUSH
4277: LD_STRING D2-JMM-5
4279: PPUSH
4280: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4284: LD_EXP 17
4288: PPUSH
4289: LD_STRING D2-Bobby-5
4291: PPUSH
4292: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4296: LD_EXP 16
4300: PPUSH
4301: LD_STRING D2-JMM-6
4303: PPUSH
4304: CALL_OW 88
// if not powell_contact then
4308: LD_EXP 5
4312: NOT
4313: IFFALSE 4339
// begin Say ( Bobby , D2-Bobby-6 ) ;
4315: LD_EXP 17
4319: PPUSH
4320: LD_STRING D2-Bobby-6
4322: PPUSH
4323: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4327: LD_EXP 16
4331: PPUSH
4332: LD_STRING D2-JMM-7
4334: PPUSH
4335: CALL_OW 88
// end ; InGameOff ;
4339: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4343: LD_EXP 17
4347: PPUSH
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4355: LD_EXP 16
4359: PUSH
4360: LD_EXP 17
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PPUSH
4369: CALL_OW 139
// bobby_in_squad := true ;
4373: LD_ADDR_EXP 4
4377: PUSH
4378: LD_INT 1
4380: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4381: LD_EXP 5
4385: PUSH
4386: LD_EXP 7
4390: NOT
4391: AND
4392: IFFALSE 4401
// ChangeMissionObjectives ( M2b ) ;
4394: LD_STRING M2b
4396: PPUSH
4397: CALL_OW 337
// end ;
4401: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4402: LD_EXP 3
4406: PUSH
4407: LD_EXP 4
4411: NOT
4412: AND
4413: PUSH
4414: LD_OWVAR 67
4418: PUSH
4419: LD_INT 3
4421: LESS
4422: AND
4423: IFFALSE 4443
4425: GO 4427
4427: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4428: LD_EXP 17
4432: PPUSH
4433: LD_INT 75
4435: PPUSH
4436: LD_INT 83
4438: PPUSH
4439: CALL_OW 111
4443: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4444: LD_EXP 7
4448: PUSH
4449: LD_EXP 4
4453: NOT
4454: AND
4455: IFFALSE 4484
4457: GO 4459
4459: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4460: LD_EXP 17
4464: PPUSH
4465: LD_INT 105
4467: PPUSH
4468: LD_INT 97
4470: PPUSH
4471: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4475: LD_EXP 17
4479: PPUSH
4480: CALL_OW 197
// end ;
4484: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4485: LD_EXP 16
4489: PPUSH
4490: LD_INT 6
4492: PPUSH
4493: CALL_OW 308
4497: PUSH
4498: LD_EXP 16
4502: PPUSH
4503: LD_EXP 17
4507: PPUSH
4508: CALL_OW 296
4512: PUSH
4513: LD_INT 7
4515: LESS
4516: AND
4517: PUSH
4518: LD_EXP 4
4522: AND
4523: IFFALSE 4570
4525: GO 4527
4527: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4528: LD_EXP 16
4532: PUSH
4533: LD_EXP 17
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4546: LD_EXP 16
4550: PPUSH
4551: LD_STRING D2a-JMM-1
4553: PPUSH
4554: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4558: LD_EXP 17
4562: PPUSH
4563: LD_STRING D2a-Bobby-1
4565: PPUSH
4566: CALL_OW 88
// end ;
4570: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4571: LD_EXP 15
4575: PUSH
4576: LD_INT 3
4578: PPUSH
4579: LD_EXP 16
4583: PPUSH
4584: CALL_OW 292
4588: NOT
4589: AND
4590: IFFALSE 4758
4592: GO 4594
4594: DISABLE
// begin wait ( 0 0$5 ) ;
4595: LD_INT 175
4597: PPUSH
4598: CALL_OW 67
// InGameOn ;
4602: CALL_OW 8
// DialogueOn ;
4606: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4610: LD_EXP 19
4614: PPUSH
4615: LD_STRING D3-Pow-1
4617: PPUSH
4618: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4622: LD_EXP 16
4626: PPUSH
4627: LD_STRING D3-JMM-1
4629: PPUSH
4630: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4634: LD_EXP 19
4638: PPUSH
4639: LD_STRING D3-Pow-2
4641: PPUSH
4642: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4646: LD_EXP 16
4650: PPUSH
4651: LD_STRING D3-JMM-2
4653: PPUSH
4654: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4658: LD_EXP 19
4662: PPUSH
4663: LD_STRING D3-Pow-3
4665: PPUSH
4666: CALL_OW 94
// DialogueOff ;
4670: CALL_OW 7
// InGameOff ;
4674: CALL_OW 9
// powell_contact := true ;
4678: LD_ADDR_EXP 5
4682: PUSH
4683: LD_INT 1
4685: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4686: LD_INT 10
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: CALL_OW 424
// uc_side := 4 ;
4696: LD_ADDR_OWVAR 20
4700: PUSH
4701: LD_INT 4
4703: ST_TO_ADDR
// uc_nation := 1 ;
4704: LD_ADDR_OWVAR 21
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4712: LD_ADDR_EXP 19
4716: PUSH
4717: LD_STRING Powell
4719: PPUSH
4720: LD_INT 0
4722: PPUSH
4723: CALL 197 0 2
4727: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4728: LD_STRING M2
4730: PPUSH
4731: CALL_OW 337
// if not bobby_in_squad then
4735: LD_EXP 4
4739: NOT
4740: IFFALSE 4751
// ChangeMissionObjectives ( M2a ) else
4742: LD_STRING M2a
4744: PPUSH
4745: CALL_OW 337
4749: GO 4758
// ChangeMissionObjectives ( M2b ) ;
4751: LD_STRING M2b
4753: PPUSH
4754: CALL_OW 337
// end ;
4758: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4759: LD_EXP 16
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: CALL_OW 308
4771: IFFALSE 4906
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4780: LD_EXP 20
4784: PPUSH
4785: LD_STRING D4-Rus3-1
4787: PPUSH
4788: CALL_OW 94
// DialogueOff ;
4792: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4796: LD_STRING M3a
4798: PPUSH
4799: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4803: LD_INT 11
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 424
// Wait ( 0 0$02 ) ;
4813: LD_INT 70
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4824: LD_EXP 19
4828: PPUSH
4829: LD_STRING D4-Pow-1
4831: PPUSH
4832: CALL_OW 94
// DialogueOff ;
4836: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4840: LD_STRING M3b
4842: PPUSH
4843: CALL_OW 337
// case Query ( Q1 ) of 1 :
4847: LD_STRING Q1
4849: PPUSH
4850: CALL_OW 97
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4894
4863: POP
// begin macmilan_use_radio := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// DialogueOn ;
4872: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4876: LD_EXP 16
4880: PPUSH
4881: LD_STRING D4a-JMM-1
4883: PPUSH
4884: CALL_OW 88
// DialogueOff ;
4888: CALL_OW 7
// end ; 2 :
4892: GO 4906
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4905
4902: POP
// ; end ;
4903: GO 4906
4905: POP
// end ;
4906: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
4907: LD_EXP 16
4911: PPUSH
4912: LD_EXP 18
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 8
4924: LESS
4925: PUSH
4926: LD_EXP 18
4930: PPUSH
4931: CALL_OW 302
4935: AND
4936: IFFALSE 5227
4938: GO 4940
4940: DISABLE
// begin InGameOn ;
4941: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 18
4954: PPUSH
4955: CALL_OW 250
4959: PPUSH
4960: LD_EXP 18
4964: PPUSH
4965: CALL_OW 251
4969: PPUSH
4970: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4974: LD_EXP 17
4978: PPUSH
4979: CALL_OW 302
4983: PUSH
4984: LD_EXP 4
4988: AND
4989: IFFALSE 5020
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4991: LD_EXP 17
4995: PPUSH
4996: LD_EXP 16
5000: PPUSH
5001: CALL_OW 250
5005: PPUSH
5006: LD_EXP 16
5010: PPUSH
5011: CALL_OW 251
5015: PPUSH
5016: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5020: LD_EXP 16
5024: PPUSH
5025: LD_STRING D5-JMM-1
5027: PPUSH
5028: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5032: LD_INT 10
5034: PPUSH
5035: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5039: LD_EXP 16
5043: PPUSH
5044: LD_EXP 18
5048: PPUSH
5049: CALL_OW 119
// ComWalk ( Cyrus ) ;
5053: LD_EXP 18
5057: PPUSH
5058: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5062: LD_EXP 18
5066: PPUSH
5067: LD_EXP 16
5071: PPUSH
5072: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5076: LD_EXP 18
5080: PPUSH
5081: LD_STRING D5-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5088: LD_EXP 17
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 4
5102: AND
5103: IFFALSE 5143
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5105: LD_EXP 17
5109: PPUSH
5110: LD_EXP 18
5114: PPUSH
5115: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5119: LD_EXP 17
5123: PPUSH
5124: LD_STRING D5-Bobby-1
5126: PPUSH
5127: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5131: LD_EXP 16
5135: PPUSH
5136: LD_STRING D5-JMM-2
5138: PPUSH
5139: CALL_OW 88
// end ; InGameOff ;
5143: CALL_OW 9
// cyrus_in_squad := true ;
5147: LD_ADDR_EXP 7
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5155: LD_EXP 18
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 4
5176: NOT
5177: AND
5178: IFFALSE 5187
// ChangeMissionObjectives ( M2b ) ;
5180: LD_STRING M2b
5182: PPUSH
5183: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5187: LD_EXP 4
5191: NOT
5192: PUSH
5193: LD_EXP 17
5197: PPUSH
5198: CALL_OW 255
5202: PUSH
5203: LD_INT 4
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 17
5212: PPUSH
5213: CALL_OW 302
5217: AND
5218: IFFALSE 5227
// SetAchievement ( ACH_CYRUS ) ;
5220: LD_STRING ACH_CYRUS
5222: PPUSH
5223: CALL_OW 543
// end ;
5227: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 7
5237: AND
5238: IFFALSE 5250
5240: GO 5242
5242: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5243: LD_STRING M2c
5245: PPUSH
5246: CALL_OW 337
5250: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5251: LD_EXP 16
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: CALL_OW 308
5263: IFFALSE 5315
5265: GO 5267
5267: DISABLE
// begin macmilan_in_trap := true ;
5268: LD_ADDR_EXP 9
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5276: LD_INT 35
5278: PPUSH
5279: CALL_OW 67
// DialogueOn ;
5283: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5287: LD_EXP 26
5291: PPUSH
5292: LD_STRING D5-Pok-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5303: LD_EXP 16
5307: PPUSH
5308: LD_STRING D4b-JMM-1
5310: PPUSH
5311: CALL_OW 88
// end ;
5315: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 24
5325: PUSH
5326: LD_EXP 24
5330: ARRAY
5331: PPUSH
5332: CALL_OW 296
5336: PUSH
5337: LD_INT 12
5339: LESS
5340: PUSH
5341: LD_EXP 24
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 990
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: OR
5368: IFFALSE 5598
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 300
5384: PUSH
5385: LD_INT 250
5387: PUSH
5388: LD_INT 200
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: PUSH
5396: LD_OWVAR 67
5400: ARRAY
5401: ST_TO_ADDR
// for i in russian_meta_guards do
5402: LD_ADDR_VAR 0 1
5406: PUSH
5407: LD_EXP 24
5411: PUSH
5412: FOR_IN
5413: IFFALSE 5453
// if IsOk ( i ) then
5415: LD_VAR 0 1
5419: PPUSH
5420: CALL_OW 302
5424: IFFALSE 5451
// SetLives ( i , GetLives ( i ) - hp ) ;
5426: LD_VAR 0 1
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: CALL_OW 256
5440: PUSH
5441: LD_VAR 0 2
5445: MINUS
5446: PPUSH
5447: CALL_OW 234
5451: GO 5412
5453: POP
5454: POP
// DialogueOn ;
5455: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5459: LD_EXP 24
5463: PUSH
5464: LD_EXP 24
5468: ARRAY
5469: PPUSH
5470: LD_STRING D6-FRus1-1
5472: PPUSH
5473: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING D6-JMM-1
5484: PPUSH
5485: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5489: LD_EXP 18
5493: PPUSH
5494: CALL_OW 302
5498: PUSH
5499: LD_EXP 7
5503: AND
5504: IFFALSE 5518
// Say ( Cyrus , D6-Cyrus-1 ) ;
5506: LD_EXP 18
5510: PPUSH
5511: LD_STRING D6-Cyrus-1
5513: PPUSH
5514: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5518: LD_EXP 17
5522: PPUSH
5523: CALL_OW 302
5527: PUSH
5528: LD_EXP 4
5532: AND
5533: IFFALSE 5547
// Say ( Bobby , D6-Bobby-1 ) ;
5535: LD_EXP 17
5539: PPUSH
5540: LD_STRING D6-Bobby-1
5542: PPUSH
5543: CALL_OW 88
// DialogueOff ;
5547: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5551: LD_INT 140
5553: PUSH
5554: LD_INT 105
5556: PUSH
5557: LD_INT 70
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: LIST
5564: PUSH
5565: LD_OWVAR 67
5569: ARRAY
5570: PPUSH
5571: CALL_OW 67
// meta_action := true ;
5575: LD_ADDR_EXP 10
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5583: LD_EXP 24
5587: PPUSH
5588: LD_INT 94
5590: PPUSH
5591: LD_INT 8
5593: PPUSH
5594: CALL_OW 114
// end ;
5598: PPOPN 2
5600: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5601: LD_EXP 16
5605: PPUSH
5606: LD_INT 93
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 297
5616: PUSH
5617: LD_INT 5
5619: LESS
5620: PUSH
5621: LD_INT 22
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PPUSH
5631: CALL_OW 69
5635: PUSH
5636: LD_INT 1
5638: GREATER
5639: AND
5640: IFFALSE 5657
5642: GO 5644
5644: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5645: LD_EXP 16
5649: PPUSH
5650: LD_STRING D6a-JMM-1
5652: PPUSH
5653: CALL_OW 88
5657: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5658: LD_VAR 0 1
5662: PUSH
5663: LD_EXP 16
5667: EQUAL
5668: IFFALSE 5677
// YouLost ( JMM ) ;
5670: LD_STRING JMM
5672: PPUSH
5673: CALL_OW 104
// end ;
5677: PPOPN 1
5679: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5680: LD_VAR 0 1
5684: PUSH
5685: LD_EXP 16
5689: EQUAL
5690: IFFALSE 5699
// YouLost ( JMM ) ;
5692: LD_STRING JMM
5694: PPUSH
5695: CALL_OW 104
// end ;
5699: PPOPN 1
5701: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5702: LD_EXP 17
5706: PPUSH
5707: LD_INT 10
5709: PPUSH
5710: CALL_OW 308
5714: IFFALSE 5763
5716: GO 5718
5718: DISABLE
// begin bobby_saved := true ;
5719: LD_ADDR_EXP 12
5723: PUSH
5724: LD_INT 1
5726: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5727: LD_EXP 17
5731: PPUSH
5732: CALL_OW 256
5736: PPUSH
5737: LD_STRING 01_BobbyLifePoints_1
5739: PPUSH
5740: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5744: LD_EXP 17
5748: PPUSH
5749: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5753: LD_STRING Bobby
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: CALL_OW 101
// end ;
5763: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5764: LD_EXP 18
5768: PPUSH
5769: LD_INT 10
5771: PPUSH
5772: CALL_OW 308
5776: IFFALSE 5825
5778: GO 5780
5780: DISABLE
// begin cyrus_saved := true ;
5781: LD_ADDR_EXP 13
5785: PUSH
5786: LD_INT 1
5788: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 256
5798: PPUSH
5799: LD_STRING 01_CyrusLifePoints_1
5801: PPUSH
5802: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5806: LD_EXP 18
5810: PPUSH
5811: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5815: LD_STRING Cyrus
5817: PPUSH
5818: LD_INT 1
5820: PPUSH
5821: CALL_OW 101
// end ;
5825: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
5826: LD_EXP 16
5830: PPUSH
5831: LD_INT 10
5833: PPUSH
5834: CALL_OW 308
5838: IFFALSE 6446
5840: GO 5842
5842: DISABLE
5843: LD_INT 0
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
// begin if macmilan_use_radio then
5851: LD_EXP 6
5855: IFFALSE 5864
// SetAchievement ( ACH_RADIO ) ;
5857: LD_STRING ACH_RADIO
5859: PPUSH
5860: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5864: LD_EXP 13
5868: NOT
5869: PUSH
5870: LD_EXP 7
5874: AND
5875: PUSH
5876: LD_EXP 18
5880: PPUSH
5881: CALL_OW 302
5885: AND
5886: PUSH
5887: LD_EXP 12
5891: NOT
5892: PUSH
5893: LD_EXP 4
5897: AND
5898: PUSH
5899: LD_EXP 17
5903: PPUSH
5904: CALL_OW 302
5908: AND
5909: OR
5910: IFFALSE 5951
// case Query ( Q2 ) of 1 :
5912: LD_STRING Q2
5914: PPUSH
5915: CALL_OW 97
5919: PUSH
5920: LD_INT 1
5922: DOUBLE
5923: EQUAL
5924: IFTRUE 5928
5926: GO 5939
5928: POP
// wait_for_them := true ; 2 :
5929: LD_ADDR_VAR 0 3
5933: PUSH
5934: LD_INT 1
5936: ST_TO_ADDR
5937: GO 5951
5939: LD_INT 2
5941: DOUBLE
5942: EQUAL
5943: IFTRUE 5947
5945: GO 5950
5947: POP
// ; end ;
5948: GO 5951
5950: POP
// if wait_for_them then
5951: LD_VAR 0 3
5955: IFFALSE 6068
// repeat wait ( 0 0$01 ) ;
5957: LD_INT 35
5959: PPUSH
5960: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5964: LD_EXP 13
5968: PUSH
5969: LD_EXP 12
5973: AND
5974: PUSH
5975: LD_EXP 13
5979: PUSH
5980: LD_EXP 4
5984: NOT
5985: PUSH
5986: LD_EXP 17
5990: PPUSH
5991: CALL_OW 303
5995: OR
5996: PUSH
5997: LD_EXP 17
6001: PPUSH
6002: CALL_OW 301
6006: OR
6007: AND
6008: OR
6009: PUSH
6010: LD_EXP 12
6014: PUSH
6015: LD_EXP 7
6019: NOT
6020: PUSH
6021: LD_EXP 18
6025: PPUSH
6026: CALL_OW 303
6030: OR
6031: PUSH
6032: LD_EXP 18
6036: PPUSH
6037: CALL_OW 301
6041: OR
6042: AND
6043: OR
6044: PUSH
6045: LD_EXP 17
6049: PPUSH
6050: CALL_OW 301
6054: PUSH
6055: LD_EXP 18
6059: PPUSH
6060: CALL_OW 301
6064: AND
6065: OR
6066: IFFALSE 5957
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6068: LD_EXP 16
6072: PPUSH
6073: CALL_OW 256
6077: PPUSH
6078: LD_STRING 01_JMMLifePoints_1
6080: PPUSH
6081: CALL_OW 39
// RemoveUnit ( JMM ) ;
6085: LD_EXP 16
6089: PPUSH
6090: CALL_OW 64
// to_reward := [ JMM ] ;
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_EXP 16
6103: PUSH
6104: EMPTY
6105: LIST
6106: ST_TO_ADDR
// if bobby_saved then
6107: LD_EXP 12
6111: IFFALSE 6129
// to_reward := to_reward ^ Bobby ;
6113: LD_ADDR_VAR 0 2
6117: PUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_EXP 17
6127: ADD
6128: ST_TO_ADDR
// if cyrus_saved then
6129: LD_EXP 13
6133: IFFALSE 6151
// to_reward := to_reward ^ Cyrus ;
6135: LD_ADDR_VAR 0 2
6139: PUSH
6140: LD_VAR 0 2
6144: PUSH
6145: LD_EXP 18
6149: ADD
6150: ST_TO_ADDR
// m1 := true ;
6151: LD_ADDR_VAR 0 4
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// m2 := bobby_saved ;
6159: LD_ADDR_VAR 0 5
6163: PUSH
6164: LD_EXP 12
6168: ST_TO_ADDR
// m3 := cyrus_saved ;
6169: LD_ADDR_VAR 0 6
6173: PUSH
6174: LD_EXP 13
6178: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6179: LD_STRING JMM
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: CALL_OW 101
// if not bobby_in_squad then
6189: LD_EXP 4
6193: NOT
6194: IFFALSE 6207
// AddMedal ( Bobby , - 1 ) ;
6196: LD_STRING Bobby
6198: PPUSH
6199: LD_INT 1
6201: NEG
6202: PPUSH
6203: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6207: LD_EXP 12
6211: NOT
6212: PUSH
6213: LD_EXP 17
6217: PPUSH
6218: CALL_OW 303
6222: PUSH
6223: LD_EXP 17
6227: PPUSH
6228: CALL_OW 301
6232: OR
6233: AND
6234: IFFALSE 6247
// AddMedal ( Bobby , - 2 ) ;
6236: LD_STRING Bobby
6238: PPUSH
6239: LD_INT 2
6241: NEG
6242: PPUSH
6243: CALL_OW 101
// if not cyrus_in_squad then
6247: LD_EXP 7
6251: NOT
6252: IFFALSE 6265
// AddMedal ( Cyrus , - 1 ) ;
6254: LD_STRING Cyrus
6256: PPUSH
6257: LD_INT 1
6259: NEG
6260: PPUSH
6261: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6265: LD_EXP 13
6269: NOT
6270: PUSH
6271: LD_EXP 18
6275: PPUSH
6276: CALL_OW 303
6280: PUSH
6281: LD_EXP 18
6285: PPUSH
6286: CALL_OW 301
6290: OR
6291: AND
6292: IFFALSE 6305
// AddMedal ( Cyrus , - 2 ) ;
6294: LD_STRING Cyrus
6296: PPUSH
6297: LD_INT 2
6299: NEG
6300: PPUSH
6301: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
6305: LD_OWVAR 67
6309: PUSH
6310: LD_INT 3
6312: EQUAL
6313: PUSH
6314: LD_VAR 0 4
6318: AND
6319: PUSH
6320: LD_VAR 0 5
6324: AND
6325: PUSH
6326: LD_VAR 0 6
6330: AND
6331: IFFALSE 6343
// SetAchievementEX ( ACH_AMER , 1 ) ;
6333: LD_STRING ACH_AMER
6335: PPUSH
6336: LD_INT 1
6338: PPUSH
6339: CALL_OW 564
// GiveMedals ( MAIN ) ;
6343: LD_STRING MAIN
6345: PPUSH
6346: CALL_OW 102
// RewardPeople ( to_reward ) ;
6350: LD_VAR 0 2
6354: PPUSH
6355: CALL_OW 43
// if bobby_saved then
6359: LD_EXP 12
6363: IFFALSE 6383
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
6365: LD_EXP 17
6369: PPUSH
6370: LD_EXP 2
6374: PUSH
6375: LD_STRING Bobby
6377: STR
6378: PPUSH
6379: CALL_OW 38
// if cyrus_saved then
6383: LD_EXP 13
6387: IFFALSE 6407
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6389: LD_EXP 18
6393: PPUSH
6394: LD_EXP 2
6398: PUSH
6399: LD_STRING Cyrus
6401: STR
6402: PPUSH
6403: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6407: LD_EXP 16
6411: PPUSH
6412: LD_EXP 2
6416: PUSH
6417: LD_STRING JMM
6419: STR
6420: PPUSH
6421: CALL_OW 38
// if tick <= 3 3$00 then
6425: LD_OWVAR 1
6429: PUSH
6430: LD_INT 6300
6432: LESSEQUAL
6433: IFFALSE 6442
// SetAchievement ( ACH_ASPEED_1 ) ;
6435: LD_STRING ACH_ASPEED_1
6437: PPUSH
6438: CALL_OW 543
// YouWin ;
6442: CALL_OW 103
// end ; end_of_file end_of_file
6446: PPOPN 6
6448: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6449: GO 6451
6451: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6452: LD_STRING initStreamRollete();
6454: PPUSH
6455: CALL_OW 559
// InitStreamMode ;
6459: CALL 6468 0 0
// DefineStreamItems ( ) ;
6463: CALL 6908 0 0
// end ;
6467: END
// function InitStreamMode ; begin
6468: LD_INT 0
6470: PPUSH
// streamModeActive := false ;
6471: LD_ADDR_EXP 27
6475: PUSH
6476: LD_INT 0
6478: ST_TO_ADDR
// normalCounter := 36 ;
6479: LD_ADDR_EXP 28
6483: PUSH
6484: LD_INT 36
6486: ST_TO_ADDR
// hardcoreCounter := 16 ;
6487: LD_ADDR_EXP 29
6491: PUSH
6492: LD_INT 16
6494: ST_TO_ADDR
// sRocket := false ;
6495: LD_ADDR_EXP 32
6499: PUSH
6500: LD_INT 0
6502: ST_TO_ADDR
// sSpeed := false ;
6503: LD_ADDR_EXP 31
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// sEngine := false ;
6511: LD_ADDR_EXP 33
6515: PUSH
6516: LD_INT 0
6518: ST_TO_ADDR
// sSpec := false ;
6519: LD_ADDR_EXP 30
6523: PUSH
6524: LD_INT 0
6526: ST_TO_ADDR
// sLevel := false ;
6527: LD_ADDR_EXP 34
6531: PUSH
6532: LD_INT 0
6534: ST_TO_ADDR
// sArmoury := false ;
6535: LD_ADDR_EXP 35
6539: PUSH
6540: LD_INT 0
6542: ST_TO_ADDR
// sRadar := false ;
6543: LD_ADDR_EXP 36
6547: PUSH
6548: LD_INT 0
6550: ST_TO_ADDR
// sBunker := false ;
6551: LD_ADDR_EXP 37
6555: PUSH
6556: LD_INT 0
6558: ST_TO_ADDR
// sHack := false ;
6559: LD_ADDR_EXP 38
6563: PUSH
6564: LD_INT 0
6566: ST_TO_ADDR
// sFire := false ;
6567: LD_ADDR_EXP 39
6571: PUSH
6572: LD_INT 0
6574: ST_TO_ADDR
// sRefresh := false ;
6575: LD_ADDR_EXP 40
6579: PUSH
6580: LD_INT 0
6582: ST_TO_ADDR
// sExp := false ;
6583: LD_ADDR_EXP 41
6587: PUSH
6588: LD_INT 0
6590: ST_TO_ADDR
// sDepot := false ;
6591: LD_ADDR_EXP 42
6595: PUSH
6596: LD_INT 0
6598: ST_TO_ADDR
// sFlag := false ;
6599: LD_ADDR_EXP 43
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// sKamikadze := false ;
6607: LD_ADDR_EXP 51
6611: PUSH
6612: LD_INT 0
6614: ST_TO_ADDR
// sTroll := false ;
6615: LD_ADDR_EXP 52
6619: PUSH
6620: LD_INT 0
6622: ST_TO_ADDR
// sSlow := false ;
6623: LD_ADDR_EXP 53
6627: PUSH
6628: LD_INT 0
6630: ST_TO_ADDR
// sLack := false ;
6631: LD_ADDR_EXP 54
6635: PUSH
6636: LD_INT 0
6638: ST_TO_ADDR
// sTank := false ;
6639: LD_ADDR_EXP 56
6643: PUSH
6644: LD_INT 0
6646: ST_TO_ADDR
// sRemote := false ;
6647: LD_ADDR_EXP 57
6651: PUSH
6652: LD_INT 0
6654: ST_TO_ADDR
// sPowell := false ;
6655: LD_ADDR_EXP 58
6659: PUSH
6660: LD_INT 0
6662: ST_TO_ADDR
// sTeleport := false ;
6663: LD_ADDR_EXP 61
6667: PUSH
6668: LD_INT 0
6670: ST_TO_ADDR
// sOilTower := false ;
6671: LD_ADDR_EXP 63
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// sShovel := false ;
6679: LD_ADDR_EXP 64
6683: PUSH
6684: LD_INT 0
6686: ST_TO_ADDR
// sSheik := false ;
6687: LD_ADDR_EXP 65
6691: PUSH
6692: LD_INT 0
6694: ST_TO_ADDR
// sEarthquake := false ;
6695: LD_ADDR_EXP 67
6699: PUSH
6700: LD_INT 0
6702: ST_TO_ADDR
// sAI := false ;
6703: LD_ADDR_EXP 68
6707: PUSH
6708: LD_INT 0
6710: ST_TO_ADDR
// sCargo := false ;
6711: LD_ADDR_EXP 71
6715: PUSH
6716: LD_INT 0
6718: ST_TO_ADDR
// sDLaser := false ;
6719: LD_ADDR_EXP 72
6723: PUSH
6724: LD_INT 0
6726: ST_TO_ADDR
// sExchange := false ;
6727: LD_ADDR_EXP 73
6731: PUSH
6732: LD_INT 0
6734: ST_TO_ADDR
// sFac := false ;
6735: LD_ADDR_EXP 74
6739: PUSH
6740: LD_INT 0
6742: ST_TO_ADDR
// sPower := false ;
6743: LD_ADDR_EXP 75
6747: PUSH
6748: LD_INT 0
6750: ST_TO_ADDR
// sRandom := false ;
6751: LD_ADDR_EXP 76
6755: PUSH
6756: LD_INT 0
6758: ST_TO_ADDR
// sShield := false ;
6759: LD_ADDR_EXP 77
6763: PUSH
6764: LD_INT 0
6766: ST_TO_ADDR
// sTime := false ;
6767: LD_ADDR_EXP 78
6771: PUSH
6772: LD_INT 0
6774: ST_TO_ADDR
// sTools := false ;
6775: LD_ADDR_EXP 79
6779: PUSH
6780: LD_INT 0
6782: ST_TO_ADDR
// sSold := false ;
6783: LD_ADDR_EXP 44
6787: PUSH
6788: LD_INT 0
6790: ST_TO_ADDR
// sDiff := false ;
6791: LD_ADDR_EXP 45
6795: PUSH
6796: LD_INT 0
6798: ST_TO_ADDR
// sFog := false ;
6799: LD_ADDR_EXP 48
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
// sReset := false ;
6807: LD_ADDR_EXP 49
6811: PUSH
6812: LD_INT 0
6814: ST_TO_ADDR
// sSun := false ;
6815: LD_ADDR_EXP 50
6819: PUSH
6820: LD_INT 0
6822: ST_TO_ADDR
// sTiger := false ;
6823: LD_ADDR_EXP 46
6827: PUSH
6828: LD_INT 0
6830: ST_TO_ADDR
// sBomb := false ;
6831: LD_ADDR_EXP 47
6835: PUSH
6836: LD_INT 0
6838: ST_TO_ADDR
// sWound := false ;
6839: LD_ADDR_EXP 55
6843: PUSH
6844: LD_INT 0
6846: ST_TO_ADDR
// sBetray := false ;
6847: LD_ADDR_EXP 59
6851: PUSH
6852: LD_INT 0
6854: ST_TO_ADDR
// sContamin := false ;
6855: LD_ADDR_EXP 60
6859: PUSH
6860: LD_INT 0
6862: ST_TO_ADDR
// sOil := false ;
6863: LD_ADDR_EXP 62
6867: PUSH
6868: LD_INT 0
6870: ST_TO_ADDR
// sStu := false ;
6871: LD_ADDR_EXP 66
6875: PUSH
6876: LD_INT 0
6878: ST_TO_ADDR
// sBazooka := false ;
6879: LD_ADDR_EXP 69
6883: PUSH
6884: LD_INT 0
6886: ST_TO_ADDR
// sMortar := false ;
6887: LD_ADDR_EXP 70
6891: PUSH
6892: LD_INT 0
6894: ST_TO_ADDR
// sRanger := false ;
6895: LD_ADDR_EXP 80
6899: PUSH
6900: LD_INT 0
6902: ST_TO_ADDR
// end ;
6903: LD_VAR 0 1
6907: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6908: LD_INT 0
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// result := [ ] ;
6915: LD_ADDR_VAR 0 1
6919: PUSH
6920: EMPTY
6921: ST_TO_ADDR
// if campaign_id = 1 then
6922: LD_OWVAR 69
6926: PUSH
6927: LD_INT 1
6929: EQUAL
6930: IFFALSE 9868
// begin case mission_number of 1 :
6932: LD_OWVAR 70
6936: PUSH
6937: LD_INT 1
6939: DOUBLE
6940: EQUAL
6941: IFTRUE 6945
6943: GO 7009
6945: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6946: LD_ADDR_VAR 0 1
6950: PUSH
6951: LD_INT 2
6953: PUSH
6954: LD_INT 4
6956: PUSH
6957: LD_INT 11
6959: PUSH
6960: LD_INT 12
6962: PUSH
6963: LD_INT 15
6965: PUSH
6966: LD_INT 16
6968: PUSH
6969: LD_INT 22
6971: PUSH
6972: LD_INT 23
6974: PUSH
6975: LD_INT 26
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 101
6991: PUSH
6992: LD_INT 102
6994: PUSH
6995: LD_INT 106
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: ST_TO_ADDR
7007: GO 9866
7009: LD_INT 2
7011: DOUBLE
7012: EQUAL
7013: IFTRUE 7017
7015: GO 7089
7017: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7018: LD_ADDR_VAR 0 1
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: LD_INT 4
7028: PUSH
7029: LD_INT 11
7031: PUSH
7032: LD_INT 12
7034: PUSH
7035: LD_INT 15
7037: PUSH
7038: LD_INT 16
7040: PUSH
7041: LD_INT 22
7043: PUSH
7044: LD_INT 23
7046: PUSH
7047: LD_INT 26
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 101
7063: PUSH
7064: LD_INT 102
7066: PUSH
7067: LD_INT 105
7069: PUSH
7070: LD_INT 106
7072: PUSH
7073: LD_INT 108
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: ST_TO_ADDR
7087: GO 9866
7089: LD_INT 3
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7173
7097: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7098: LD_ADDR_VAR 0 1
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 4
7108: PUSH
7109: LD_INT 5
7111: PUSH
7112: LD_INT 11
7114: PUSH
7115: LD_INT 12
7117: PUSH
7118: LD_INT 15
7120: PUSH
7121: LD_INT 16
7123: PUSH
7124: LD_INT 22
7126: PUSH
7127: LD_INT 26
7129: PUSH
7130: LD_INT 36
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 101
7147: PUSH
7148: LD_INT 102
7150: PUSH
7151: LD_INT 105
7153: PUSH
7154: LD_INT 106
7156: PUSH
7157: LD_INT 108
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: ST_TO_ADDR
7171: GO 9866
7173: LD_INT 4
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7265
7181: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_INT 2
7189: PUSH
7190: LD_INT 4
7192: PUSH
7193: LD_INT 5
7195: PUSH
7196: LD_INT 8
7198: PUSH
7199: LD_INT 11
7201: PUSH
7202: LD_INT 12
7204: PUSH
7205: LD_INT 15
7207: PUSH
7208: LD_INT 16
7210: PUSH
7211: LD_INT 22
7213: PUSH
7214: LD_INT 23
7216: PUSH
7217: LD_INT 26
7219: PUSH
7220: LD_INT 36
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 101
7239: PUSH
7240: LD_INT 102
7242: PUSH
7243: LD_INT 105
7245: PUSH
7246: LD_INT 106
7248: PUSH
7249: LD_INT 108
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: ST_TO_ADDR
7263: GO 9866
7265: LD_INT 5
7267: DOUBLE
7268: EQUAL
7269: IFTRUE 7273
7271: GO 7373
7273: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7274: LD_ADDR_VAR 0 1
7278: PUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 4
7284: PUSH
7285: LD_INT 5
7287: PUSH
7288: LD_INT 6
7290: PUSH
7291: LD_INT 8
7293: PUSH
7294: LD_INT 11
7296: PUSH
7297: LD_INT 12
7299: PUSH
7300: LD_INT 15
7302: PUSH
7303: LD_INT 16
7305: PUSH
7306: LD_INT 22
7308: PUSH
7309: LD_INT 23
7311: PUSH
7312: LD_INT 25
7314: PUSH
7315: LD_INT 26
7317: PUSH
7318: LD_INT 36
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 101
7339: PUSH
7340: LD_INT 102
7342: PUSH
7343: LD_INT 105
7345: PUSH
7346: LD_INT 106
7348: PUSH
7349: LD_INT 108
7351: PUSH
7352: LD_INT 109
7354: PUSH
7355: LD_INT 112
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: ST_TO_ADDR
7371: GO 9866
7373: LD_INT 6
7375: DOUBLE
7376: EQUAL
7377: IFTRUE 7381
7379: GO 7501
7381: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7382: LD_ADDR_VAR 0 1
7386: PUSH
7387: LD_INT 2
7389: PUSH
7390: LD_INT 4
7392: PUSH
7393: LD_INT 5
7395: PUSH
7396: LD_INT 6
7398: PUSH
7399: LD_INT 8
7401: PUSH
7402: LD_INT 11
7404: PUSH
7405: LD_INT 12
7407: PUSH
7408: LD_INT 15
7410: PUSH
7411: LD_INT 16
7413: PUSH
7414: LD_INT 20
7416: PUSH
7417: LD_INT 21
7419: PUSH
7420: LD_INT 22
7422: PUSH
7423: LD_INT 23
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 26
7431: PUSH
7432: LD_INT 30
7434: PUSH
7435: LD_INT 31
7437: PUSH
7438: LD_INT 32
7440: PUSH
7441: LD_INT 36
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 101
7467: PUSH
7468: LD_INT 102
7470: PUSH
7471: LD_INT 105
7473: PUSH
7474: LD_INT 106
7476: PUSH
7477: LD_INT 108
7479: PUSH
7480: LD_INT 109
7482: PUSH
7483: LD_INT 112
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: ST_TO_ADDR
7499: GO 9866
7501: LD_INT 7
7503: DOUBLE
7504: EQUAL
7505: IFTRUE 7509
7507: GO 7609
7509: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7510: LD_ADDR_VAR 0 1
7514: PUSH
7515: LD_INT 2
7517: PUSH
7518: LD_INT 4
7520: PUSH
7521: LD_INT 5
7523: PUSH
7524: LD_INT 7
7526: PUSH
7527: LD_INT 11
7529: PUSH
7530: LD_INT 12
7532: PUSH
7533: LD_INT 15
7535: PUSH
7536: LD_INT 16
7538: PUSH
7539: LD_INT 20
7541: PUSH
7542: LD_INT 21
7544: PUSH
7545: LD_INT 22
7547: PUSH
7548: LD_INT 23
7550: PUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 26
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 101
7575: PUSH
7576: LD_INT 102
7578: PUSH
7579: LD_INT 103
7581: PUSH
7582: LD_INT 105
7584: PUSH
7585: LD_INT 106
7587: PUSH
7588: LD_INT 108
7590: PUSH
7591: LD_INT 112
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: ST_TO_ADDR
7607: GO 9866
7609: LD_INT 8
7611: DOUBLE
7612: EQUAL
7613: IFTRUE 7617
7615: GO 7745
7617: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7618: LD_ADDR_VAR 0 1
7622: PUSH
7623: LD_INT 2
7625: PUSH
7626: LD_INT 4
7628: PUSH
7629: LD_INT 5
7631: PUSH
7632: LD_INT 6
7634: PUSH
7635: LD_INT 7
7637: PUSH
7638: LD_INT 8
7640: PUSH
7641: LD_INT 11
7643: PUSH
7644: LD_INT 12
7646: PUSH
7647: LD_INT 15
7649: PUSH
7650: LD_INT 16
7652: PUSH
7653: LD_INT 20
7655: PUSH
7656: LD_INT 21
7658: PUSH
7659: LD_INT 22
7661: PUSH
7662: LD_INT 23
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 26
7670: PUSH
7671: LD_INT 30
7673: PUSH
7674: LD_INT 31
7676: PUSH
7677: LD_INT 32
7679: PUSH
7680: LD_INT 36
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: PUSH
7705: LD_INT 101
7707: PUSH
7708: LD_INT 102
7710: PUSH
7711: LD_INT 103
7713: PUSH
7714: LD_INT 105
7716: PUSH
7717: LD_INT 106
7719: PUSH
7720: LD_INT 108
7722: PUSH
7723: LD_INT 109
7725: PUSH
7726: LD_INT 112
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: ST_TO_ADDR
7743: GO 9866
7745: LD_INT 9
7747: DOUBLE
7748: EQUAL
7749: IFTRUE 7753
7751: GO 7889
7753: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 2
7761: PUSH
7762: LD_INT 4
7764: PUSH
7765: LD_INT 5
7767: PUSH
7768: LD_INT 6
7770: PUSH
7771: LD_INT 7
7773: PUSH
7774: LD_INT 8
7776: PUSH
7777: LD_INT 11
7779: PUSH
7780: LD_INT 12
7782: PUSH
7783: LD_INT 15
7785: PUSH
7786: LD_INT 16
7788: PUSH
7789: LD_INT 20
7791: PUSH
7792: LD_INT 21
7794: PUSH
7795: LD_INT 22
7797: PUSH
7798: LD_INT 23
7800: PUSH
7801: LD_INT 25
7803: PUSH
7804: LD_INT 26
7806: PUSH
7807: LD_INT 28
7809: PUSH
7810: LD_INT 30
7812: PUSH
7813: LD_INT 31
7815: PUSH
7816: LD_INT 32
7818: PUSH
7819: LD_INT 36
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 101
7847: PUSH
7848: LD_INT 102
7850: PUSH
7851: LD_INT 103
7853: PUSH
7854: LD_INT 105
7856: PUSH
7857: LD_INT 106
7859: PUSH
7860: LD_INT 108
7862: PUSH
7863: LD_INT 109
7865: PUSH
7866: LD_INT 112
7868: PUSH
7869: LD_INT 114
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: ST_TO_ADDR
7887: GO 9866
7889: LD_INT 10
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 8081
7897: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7898: LD_ADDR_VAR 0 1
7902: PUSH
7903: LD_INT 2
7905: PUSH
7906: LD_INT 4
7908: PUSH
7909: LD_INT 5
7911: PUSH
7912: LD_INT 6
7914: PUSH
7915: LD_INT 7
7917: PUSH
7918: LD_INT 8
7920: PUSH
7921: LD_INT 9
7923: PUSH
7924: LD_INT 10
7926: PUSH
7927: LD_INT 11
7929: PUSH
7930: LD_INT 12
7932: PUSH
7933: LD_INT 13
7935: PUSH
7936: LD_INT 14
7938: PUSH
7939: LD_INT 15
7941: PUSH
7942: LD_INT 16
7944: PUSH
7945: LD_INT 17
7947: PUSH
7948: LD_INT 18
7950: PUSH
7951: LD_INT 19
7953: PUSH
7954: LD_INT 20
7956: PUSH
7957: LD_INT 21
7959: PUSH
7960: LD_INT 22
7962: PUSH
7963: LD_INT 23
7965: PUSH
7966: LD_INT 24
7968: PUSH
7969: LD_INT 25
7971: PUSH
7972: LD_INT 26
7974: PUSH
7975: LD_INT 28
7977: PUSH
7978: LD_INT 30
7980: PUSH
7981: LD_INT 31
7983: PUSH
7984: LD_INT 32
7986: PUSH
7987: LD_INT 36
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 101
8023: PUSH
8024: LD_INT 102
8026: PUSH
8027: LD_INT 103
8029: PUSH
8030: LD_INT 104
8032: PUSH
8033: LD_INT 105
8035: PUSH
8036: LD_INT 106
8038: PUSH
8039: LD_INT 107
8041: PUSH
8042: LD_INT 108
8044: PUSH
8045: LD_INT 109
8047: PUSH
8048: LD_INT 110
8050: PUSH
8051: LD_INT 111
8053: PUSH
8054: LD_INT 112
8056: PUSH
8057: LD_INT 114
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: ST_TO_ADDR
8079: GO 9866
8081: LD_INT 11
8083: DOUBLE
8084: EQUAL
8085: IFTRUE 8089
8087: GO 8281
8089: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8090: LD_ADDR_VAR 0 1
8094: PUSH
8095: LD_INT 2
8097: PUSH
8098: LD_INT 3
8100: PUSH
8101: LD_INT 4
8103: PUSH
8104: LD_INT 5
8106: PUSH
8107: LD_INT 6
8109: PUSH
8110: LD_INT 7
8112: PUSH
8113: LD_INT 8
8115: PUSH
8116: LD_INT 9
8118: PUSH
8119: LD_INT 10
8121: PUSH
8122: LD_INT 11
8124: PUSH
8125: LD_INT 12
8127: PUSH
8128: LD_INT 13
8130: PUSH
8131: LD_INT 14
8133: PUSH
8134: LD_INT 15
8136: PUSH
8137: LD_INT 16
8139: PUSH
8140: LD_INT 17
8142: PUSH
8143: LD_INT 18
8145: PUSH
8146: LD_INT 19
8148: PUSH
8149: LD_INT 20
8151: PUSH
8152: LD_INT 21
8154: PUSH
8155: LD_INT 22
8157: PUSH
8158: LD_INT 23
8160: PUSH
8161: LD_INT 24
8163: PUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 26
8169: PUSH
8170: LD_INT 28
8172: PUSH
8173: LD_INT 30
8175: PUSH
8176: LD_INT 31
8178: PUSH
8179: LD_INT 32
8181: PUSH
8182: LD_INT 34
8184: PUSH
8185: LD_INT 36
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 101
8223: PUSH
8224: LD_INT 102
8226: PUSH
8227: LD_INT 103
8229: PUSH
8230: LD_INT 104
8232: PUSH
8233: LD_INT 105
8235: PUSH
8236: LD_INT 106
8238: PUSH
8239: LD_INT 107
8241: PUSH
8242: LD_INT 108
8244: PUSH
8245: LD_INT 109
8247: PUSH
8248: LD_INT 110
8250: PUSH
8251: LD_INT 111
8253: PUSH
8254: LD_INT 112
8256: PUSH
8257: LD_INT 114
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: ST_TO_ADDR
8279: GO 9866
8281: LD_INT 12
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8289
8287: GO 8497
8289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 1
8297: PUSH
8298: LD_INT 2
8300: PUSH
8301: LD_INT 3
8303: PUSH
8304: LD_INT 4
8306: PUSH
8307: LD_INT 5
8309: PUSH
8310: LD_INT 6
8312: PUSH
8313: LD_INT 7
8315: PUSH
8316: LD_INT 8
8318: PUSH
8319: LD_INT 9
8321: PUSH
8322: LD_INT 10
8324: PUSH
8325: LD_INT 11
8327: PUSH
8328: LD_INT 12
8330: PUSH
8331: LD_INT 13
8333: PUSH
8334: LD_INT 14
8336: PUSH
8337: LD_INT 15
8339: PUSH
8340: LD_INT 16
8342: PUSH
8343: LD_INT 17
8345: PUSH
8346: LD_INT 18
8348: PUSH
8349: LD_INT 19
8351: PUSH
8352: LD_INT 20
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 22
8360: PUSH
8361: LD_INT 23
8363: PUSH
8364: LD_INT 24
8366: PUSH
8367: LD_INT 25
8369: PUSH
8370: LD_INT 26
8372: PUSH
8373: LD_INT 27
8375: PUSH
8376: LD_INT 28
8378: PUSH
8379: LD_INT 30
8381: PUSH
8382: LD_INT 31
8384: PUSH
8385: LD_INT 32
8387: PUSH
8388: LD_INT 33
8390: PUSH
8391: LD_INT 34
8393: PUSH
8394: LD_INT 36
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: PUSH
8433: LD_INT 101
8435: PUSH
8436: LD_INT 102
8438: PUSH
8439: LD_INT 103
8441: PUSH
8442: LD_INT 104
8444: PUSH
8445: LD_INT 105
8447: PUSH
8448: LD_INT 106
8450: PUSH
8451: LD_INT 107
8453: PUSH
8454: LD_INT 108
8456: PUSH
8457: LD_INT 109
8459: PUSH
8460: LD_INT 110
8462: PUSH
8463: LD_INT 111
8465: PUSH
8466: LD_INT 112
8468: PUSH
8469: LD_INT 113
8471: PUSH
8472: LD_INT 114
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: ST_TO_ADDR
8495: GO 9866
8497: LD_INT 13
8499: DOUBLE
8500: EQUAL
8501: IFTRUE 8505
8503: GO 8701
8505: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8506: LD_ADDR_VAR 0 1
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 2
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: LD_INT 4
8522: PUSH
8523: LD_INT 5
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: LD_INT 9
8531: PUSH
8532: LD_INT 10
8534: PUSH
8535: LD_INT 11
8537: PUSH
8538: LD_INT 12
8540: PUSH
8541: LD_INT 14
8543: PUSH
8544: LD_INT 15
8546: PUSH
8547: LD_INT 16
8549: PUSH
8550: LD_INT 17
8552: PUSH
8553: LD_INT 18
8555: PUSH
8556: LD_INT 19
8558: PUSH
8559: LD_INT 20
8561: PUSH
8562: LD_INT 21
8564: PUSH
8565: LD_INT 22
8567: PUSH
8568: LD_INT 23
8570: PUSH
8571: LD_INT 24
8573: PUSH
8574: LD_INT 25
8576: PUSH
8577: LD_INT 26
8579: PUSH
8580: LD_INT 27
8582: PUSH
8583: LD_INT 28
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 31
8591: PUSH
8592: LD_INT 32
8594: PUSH
8595: LD_INT 33
8597: PUSH
8598: LD_INT 34
8600: PUSH
8601: LD_INT 36
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 101
8639: PUSH
8640: LD_INT 102
8642: PUSH
8643: LD_INT 103
8645: PUSH
8646: LD_INT 104
8648: PUSH
8649: LD_INT 105
8651: PUSH
8652: LD_INT 106
8654: PUSH
8655: LD_INT 107
8657: PUSH
8658: LD_INT 108
8660: PUSH
8661: LD_INT 109
8663: PUSH
8664: LD_INT 110
8666: PUSH
8667: LD_INT 111
8669: PUSH
8670: LD_INT 112
8672: PUSH
8673: LD_INT 113
8675: PUSH
8676: LD_INT 114
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: ST_TO_ADDR
8699: GO 9866
8701: LD_INT 14
8703: DOUBLE
8704: EQUAL
8705: IFTRUE 8709
8707: GO 8921
8709: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8710: LD_ADDR_VAR 0 1
8714: PUSH
8715: LD_INT 1
8717: PUSH
8718: LD_INT 2
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: LD_INT 5
8729: PUSH
8730: LD_INT 6
8732: PUSH
8733: LD_INT 7
8735: PUSH
8736: LD_INT 8
8738: PUSH
8739: LD_INT 9
8741: PUSH
8742: LD_INT 10
8744: PUSH
8745: LD_INT 11
8747: PUSH
8748: LD_INT 12
8750: PUSH
8751: LD_INT 13
8753: PUSH
8754: LD_INT 14
8756: PUSH
8757: LD_INT 15
8759: PUSH
8760: LD_INT 16
8762: PUSH
8763: LD_INT 17
8765: PUSH
8766: LD_INT 18
8768: PUSH
8769: LD_INT 19
8771: PUSH
8772: LD_INT 20
8774: PUSH
8775: LD_INT 21
8777: PUSH
8778: LD_INT 22
8780: PUSH
8781: LD_INT 23
8783: PUSH
8784: LD_INT 24
8786: PUSH
8787: LD_INT 25
8789: PUSH
8790: LD_INT 26
8792: PUSH
8793: LD_INT 27
8795: PUSH
8796: LD_INT 28
8798: PUSH
8799: LD_INT 29
8801: PUSH
8802: LD_INT 30
8804: PUSH
8805: LD_INT 31
8807: PUSH
8808: LD_INT 32
8810: PUSH
8811: LD_INT 33
8813: PUSH
8814: LD_INT 34
8816: PUSH
8817: LD_INT 36
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: PUSH
8857: LD_INT 101
8859: PUSH
8860: LD_INT 102
8862: PUSH
8863: LD_INT 103
8865: PUSH
8866: LD_INT 104
8868: PUSH
8869: LD_INT 105
8871: PUSH
8872: LD_INT 106
8874: PUSH
8875: LD_INT 107
8877: PUSH
8878: LD_INT 108
8880: PUSH
8881: LD_INT 109
8883: PUSH
8884: LD_INT 110
8886: PUSH
8887: LD_INT 111
8889: PUSH
8890: LD_INT 112
8892: PUSH
8893: LD_INT 113
8895: PUSH
8896: LD_INT 114
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: ST_TO_ADDR
8919: GO 9866
8921: LD_INT 15
8923: DOUBLE
8924: EQUAL
8925: IFTRUE 8929
8927: GO 9141
8929: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_INT 1
8937: PUSH
8938: LD_INT 2
8940: PUSH
8941: LD_INT 3
8943: PUSH
8944: LD_INT 4
8946: PUSH
8947: LD_INT 5
8949: PUSH
8950: LD_INT 6
8952: PUSH
8953: LD_INT 7
8955: PUSH
8956: LD_INT 8
8958: PUSH
8959: LD_INT 9
8961: PUSH
8962: LD_INT 10
8964: PUSH
8965: LD_INT 11
8967: PUSH
8968: LD_INT 12
8970: PUSH
8971: LD_INT 13
8973: PUSH
8974: LD_INT 14
8976: PUSH
8977: LD_INT 15
8979: PUSH
8980: LD_INT 16
8982: PUSH
8983: LD_INT 17
8985: PUSH
8986: LD_INT 18
8988: PUSH
8989: LD_INT 19
8991: PUSH
8992: LD_INT 20
8994: PUSH
8995: LD_INT 21
8997: PUSH
8998: LD_INT 22
9000: PUSH
9001: LD_INT 23
9003: PUSH
9004: LD_INT 24
9006: PUSH
9007: LD_INT 25
9009: PUSH
9010: LD_INT 26
9012: PUSH
9013: LD_INT 27
9015: PUSH
9016: LD_INT 28
9018: PUSH
9019: LD_INT 29
9021: PUSH
9022: LD_INT 30
9024: PUSH
9025: LD_INT 31
9027: PUSH
9028: LD_INT 32
9030: PUSH
9031: LD_INT 33
9033: PUSH
9034: LD_INT 34
9036: PUSH
9037: LD_INT 36
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 101
9079: PUSH
9080: LD_INT 102
9082: PUSH
9083: LD_INT 103
9085: PUSH
9086: LD_INT 104
9088: PUSH
9089: LD_INT 105
9091: PUSH
9092: LD_INT 106
9094: PUSH
9095: LD_INT 107
9097: PUSH
9098: LD_INT 108
9100: PUSH
9101: LD_INT 109
9103: PUSH
9104: LD_INT 110
9106: PUSH
9107: LD_INT 111
9109: PUSH
9110: LD_INT 112
9112: PUSH
9113: LD_INT 113
9115: PUSH
9116: LD_INT 114
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: ST_TO_ADDR
9139: GO 9866
9141: LD_INT 16
9143: DOUBLE
9144: EQUAL
9145: IFTRUE 9149
9147: GO 9273
9149: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9150: LD_ADDR_VAR 0 1
9154: PUSH
9155: LD_INT 2
9157: PUSH
9158: LD_INT 4
9160: PUSH
9161: LD_INT 5
9163: PUSH
9164: LD_INT 7
9166: PUSH
9167: LD_INT 11
9169: PUSH
9170: LD_INT 12
9172: PUSH
9173: LD_INT 15
9175: PUSH
9176: LD_INT 16
9178: PUSH
9179: LD_INT 20
9181: PUSH
9182: LD_INT 21
9184: PUSH
9185: LD_INT 22
9187: PUSH
9188: LD_INT 23
9190: PUSH
9191: LD_INT 25
9193: PUSH
9194: LD_INT 26
9196: PUSH
9197: LD_INT 30
9199: PUSH
9200: LD_INT 31
9202: PUSH
9203: LD_INT 32
9205: PUSH
9206: LD_INT 33
9208: PUSH
9209: LD_INT 34
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 101
9235: PUSH
9236: LD_INT 102
9238: PUSH
9239: LD_INT 103
9241: PUSH
9242: LD_INT 106
9244: PUSH
9245: LD_INT 108
9247: PUSH
9248: LD_INT 112
9250: PUSH
9251: LD_INT 113
9253: PUSH
9254: LD_INT 114
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: ST_TO_ADDR
9271: GO 9866
9273: LD_INT 17
9275: DOUBLE
9276: EQUAL
9277: IFTRUE 9281
9279: GO 9493
9281: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9282: LD_ADDR_VAR 0 1
9286: PUSH
9287: LD_INT 1
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: LD_INT 4
9298: PUSH
9299: LD_INT 5
9301: PUSH
9302: LD_INT 6
9304: PUSH
9305: LD_INT 7
9307: PUSH
9308: LD_INT 8
9310: PUSH
9311: LD_INT 9
9313: PUSH
9314: LD_INT 10
9316: PUSH
9317: LD_INT 11
9319: PUSH
9320: LD_INT 12
9322: PUSH
9323: LD_INT 13
9325: PUSH
9326: LD_INT 14
9328: PUSH
9329: LD_INT 15
9331: PUSH
9332: LD_INT 16
9334: PUSH
9335: LD_INT 17
9337: PUSH
9338: LD_INT 18
9340: PUSH
9341: LD_INT 19
9343: PUSH
9344: LD_INT 20
9346: PUSH
9347: LD_INT 21
9349: PUSH
9350: LD_INT 22
9352: PUSH
9353: LD_INT 23
9355: PUSH
9356: LD_INT 24
9358: PUSH
9359: LD_INT 25
9361: PUSH
9362: LD_INT 26
9364: PUSH
9365: LD_INT 27
9367: PUSH
9368: LD_INT 28
9370: PUSH
9371: LD_INT 29
9373: PUSH
9374: LD_INT 30
9376: PUSH
9377: LD_INT 31
9379: PUSH
9380: LD_INT 32
9382: PUSH
9383: LD_INT 33
9385: PUSH
9386: LD_INT 34
9388: PUSH
9389: LD_INT 36
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 101
9431: PUSH
9432: LD_INT 102
9434: PUSH
9435: LD_INT 103
9437: PUSH
9438: LD_INT 104
9440: PUSH
9441: LD_INT 105
9443: PUSH
9444: LD_INT 106
9446: PUSH
9447: LD_INT 107
9449: PUSH
9450: LD_INT 108
9452: PUSH
9453: LD_INT 109
9455: PUSH
9456: LD_INT 110
9458: PUSH
9459: LD_INT 111
9461: PUSH
9462: LD_INT 112
9464: PUSH
9465: LD_INT 113
9467: PUSH
9468: LD_INT 114
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: ST_TO_ADDR
9491: GO 9866
9493: LD_INT 18
9495: DOUBLE
9496: EQUAL
9497: IFTRUE 9501
9499: GO 9637
9501: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9502: LD_ADDR_VAR 0 1
9506: PUSH
9507: LD_INT 2
9509: PUSH
9510: LD_INT 4
9512: PUSH
9513: LD_INT 5
9515: PUSH
9516: LD_INT 7
9518: PUSH
9519: LD_INT 11
9521: PUSH
9522: LD_INT 12
9524: PUSH
9525: LD_INT 15
9527: PUSH
9528: LD_INT 16
9530: PUSH
9531: LD_INT 20
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 22
9539: PUSH
9540: LD_INT 23
9542: PUSH
9543: LD_INT 25
9545: PUSH
9546: LD_INT 26
9548: PUSH
9549: LD_INT 30
9551: PUSH
9552: LD_INT 31
9554: PUSH
9555: LD_INT 32
9557: PUSH
9558: LD_INT 33
9560: PUSH
9561: LD_INT 34
9563: PUSH
9564: LD_INT 35
9566: PUSH
9567: LD_INT 36
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 101
9595: PUSH
9596: LD_INT 102
9598: PUSH
9599: LD_INT 103
9601: PUSH
9602: LD_INT 106
9604: PUSH
9605: LD_INT 108
9607: PUSH
9608: LD_INT 112
9610: PUSH
9611: LD_INT 113
9613: PUSH
9614: LD_INT 114
9616: PUSH
9617: LD_INT 115
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: ST_TO_ADDR
9635: GO 9866
9637: LD_INT 19
9639: DOUBLE
9640: EQUAL
9641: IFTRUE 9645
9643: GO 9865
9645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9646: LD_ADDR_VAR 0 1
9650: PUSH
9651: LD_INT 1
9653: PUSH
9654: LD_INT 2
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: LD_INT 7
9671: PUSH
9672: LD_INT 8
9674: PUSH
9675: LD_INT 9
9677: PUSH
9678: LD_INT 10
9680: PUSH
9681: LD_INT 11
9683: PUSH
9684: LD_INT 12
9686: PUSH
9687: LD_INT 13
9689: PUSH
9690: LD_INT 14
9692: PUSH
9693: LD_INT 15
9695: PUSH
9696: LD_INT 16
9698: PUSH
9699: LD_INT 17
9701: PUSH
9702: LD_INT 18
9704: PUSH
9705: LD_INT 19
9707: PUSH
9708: LD_INT 20
9710: PUSH
9711: LD_INT 21
9713: PUSH
9714: LD_INT 22
9716: PUSH
9717: LD_INT 23
9719: PUSH
9720: LD_INT 24
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 26
9728: PUSH
9729: LD_INT 27
9731: PUSH
9732: LD_INT 28
9734: PUSH
9735: LD_INT 29
9737: PUSH
9738: LD_INT 30
9740: PUSH
9741: LD_INT 31
9743: PUSH
9744: LD_INT 32
9746: PUSH
9747: LD_INT 33
9749: PUSH
9750: LD_INT 34
9752: PUSH
9753: LD_INT 35
9755: PUSH
9756: LD_INT 36
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 101
9799: PUSH
9800: LD_INT 102
9802: PUSH
9803: LD_INT 103
9805: PUSH
9806: LD_INT 104
9808: PUSH
9809: LD_INT 105
9811: PUSH
9812: LD_INT 106
9814: PUSH
9815: LD_INT 107
9817: PUSH
9818: LD_INT 108
9820: PUSH
9821: LD_INT 109
9823: PUSH
9824: LD_INT 110
9826: PUSH
9827: LD_INT 111
9829: PUSH
9830: LD_INT 112
9832: PUSH
9833: LD_INT 113
9835: PUSH
9836: LD_INT 114
9838: PUSH
9839: LD_INT 115
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: ST_TO_ADDR
9863: GO 9866
9865: POP
// end else
9866: GO 10085
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9868: LD_ADDR_VAR 0 1
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: LD_INT 3
9881: PUSH
9882: LD_INT 4
9884: PUSH
9885: LD_INT 5
9887: PUSH
9888: LD_INT 6
9890: PUSH
9891: LD_INT 7
9893: PUSH
9894: LD_INT 8
9896: PUSH
9897: LD_INT 9
9899: PUSH
9900: LD_INT 10
9902: PUSH
9903: LD_INT 11
9905: PUSH
9906: LD_INT 12
9908: PUSH
9909: LD_INT 13
9911: PUSH
9912: LD_INT 14
9914: PUSH
9915: LD_INT 15
9917: PUSH
9918: LD_INT 16
9920: PUSH
9921: LD_INT 17
9923: PUSH
9924: LD_INT 18
9926: PUSH
9927: LD_INT 19
9929: PUSH
9930: LD_INT 20
9932: PUSH
9933: LD_INT 21
9935: PUSH
9936: LD_INT 22
9938: PUSH
9939: LD_INT 23
9941: PUSH
9942: LD_INT 24
9944: PUSH
9945: LD_INT 25
9947: PUSH
9948: LD_INT 26
9950: PUSH
9951: LD_INT 27
9953: PUSH
9954: LD_INT 28
9956: PUSH
9957: LD_INT 29
9959: PUSH
9960: LD_INT 30
9962: PUSH
9963: LD_INT 31
9965: PUSH
9966: LD_INT 32
9968: PUSH
9969: LD_INT 33
9971: PUSH
9972: LD_INT 34
9974: PUSH
9975: LD_INT 35
9977: PUSH
9978: LD_INT 36
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 101
10021: PUSH
10022: LD_INT 102
10024: PUSH
10025: LD_INT 103
10027: PUSH
10028: LD_INT 104
10030: PUSH
10031: LD_INT 105
10033: PUSH
10034: LD_INT 106
10036: PUSH
10037: LD_INT 107
10039: PUSH
10040: LD_INT 108
10042: PUSH
10043: LD_INT 109
10045: PUSH
10046: LD_INT 110
10048: PUSH
10049: LD_INT 111
10051: PUSH
10052: LD_INT 112
10054: PUSH
10055: LD_INT 113
10057: PUSH
10058: LD_INT 114
10060: PUSH
10061: LD_INT 115
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: ST_TO_ADDR
// if result then
10085: LD_VAR 0 1
10089: IFFALSE 10378
// begin normal :=  ;
10091: LD_ADDR_VAR 0 3
10095: PUSH
10096: LD_STRING 
10098: ST_TO_ADDR
// hardcore :=  ;
10099: LD_ADDR_VAR 0 4
10103: PUSH
10104: LD_STRING 
10106: ST_TO_ADDR
// for i = 1 to normalCounter do
10107: LD_ADDR_VAR 0 5
10111: PUSH
10112: DOUBLE
10113: LD_INT 1
10115: DEC
10116: ST_TO_ADDR
10117: LD_EXP 28
10121: PUSH
10122: FOR_TO
10123: IFFALSE 10224
// begin tmp := 0 ;
10125: LD_ADDR_VAR 0 2
10129: PUSH
10130: LD_STRING 0
10132: ST_TO_ADDR
// if result [ 1 ] then
10133: LD_VAR 0 1
10137: PUSH
10138: LD_INT 1
10140: ARRAY
10141: IFFALSE 10206
// if result [ 1 ] [ 1 ] = i then
10143: LD_VAR 0 1
10147: PUSH
10148: LD_INT 1
10150: ARRAY
10151: PUSH
10152: LD_INT 1
10154: ARRAY
10155: PUSH
10156: LD_VAR 0 5
10160: EQUAL
10161: IFFALSE 10206
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10163: LD_ADDR_VAR 0 1
10167: PUSH
10168: LD_VAR 0 1
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: LD_VAR 0 1
10180: PUSH
10181: LD_INT 1
10183: ARRAY
10184: PPUSH
10185: LD_INT 1
10187: PPUSH
10188: CALL_OW 3
10192: PPUSH
10193: CALL_OW 1
10197: ST_TO_ADDR
// tmp := 1 ;
10198: LD_ADDR_VAR 0 2
10202: PUSH
10203: LD_STRING 1
10205: ST_TO_ADDR
// end ; normal := normal & tmp ;
10206: LD_ADDR_VAR 0 3
10210: PUSH
10211: LD_VAR 0 3
10215: PUSH
10216: LD_VAR 0 2
10220: STR
10221: ST_TO_ADDR
// end ;
10222: GO 10122
10224: POP
10225: POP
// for i = 1 to hardcoreCounter do
10226: LD_ADDR_VAR 0 5
10230: PUSH
10231: DOUBLE
10232: LD_INT 1
10234: DEC
10235: ST_TO_ADDR
10236: LD_EXP 29
10240: PUSH
10241: FOR_TO
10242: IFFALSE 10347
// begin tmp := 0 ;
10244: LD_ADDR_VAR 0 2
10248: PUSH
10249: LD_STRING 0
10251: ST_TO_ADDR
// if result [ 2 ] then
10252: LD_VAR 0 1
10256: PUSH
10257: LD_INT 2
10259: ARRAY
10260: IFFALSE 10329
// if result [ 2 ] [ 1 ] = 100 + i then
10262: LD_VAR 0 1
10266: PUSH
10267: LD_INT 2
10269: ARRAY
10270: PUSH
10271: LD_INT 1
10273: ARRAY
10274: PUSH
10275: LD_INT 100
10277: PUSH
10278: LD_VAR 0 5
10282: PLUS
10283: EQUAL
10284: IFFALSE 10329
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10286: LD_ADDR_VAR 0 1
10290: PUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: LD_INT 2
10298: PPUSH
10299: LD_VAR 0 1
10303: PUSH
10304: LD_INT 2
10306: ARRAY
10307: PPUSH
10308: LD_INT 1
10310: PPUSH
10311: CALL_OW 3
10315: PPUSH
10316: CALL_OW 1
10320: ST_TO_ADDR
// tmp := 1 ;
10321: LD_ADDR_VAR 0 2
10325: PUSH
10326: LD_STRING 1
10328: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10329: LD_ADDR_VAR 0 4
10333: PUSH
10334: LD_VAR 0 4
10338: PUSH
10339: LD_VAR 0 2
10343: STR
10344: ST_TO_ADDR
// end ;
10345: GO 10241
10347: POP
10348: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10349: LD_STRING getStreamItemsFromMission("
10351: PUSH
10352: LD_VAR 0 3
10356: STR
10357: PUSH
10358: LD_STRING ","
10360: STR
10361: PUSH
10362: LD_VAR 0 4
10366: STR
10367: PUSH
10368: LD_STRING ")
10370: STR
10371: PPUSH
10372: CALL_OW 559
// end else
10376: GO 10385
// ToLua ( getStreamItemsFromMission("","") ) ;
10378: LD_STRING getStreamItemsFromMission("","")
10380: PPUSH
10381: CALL_OW 559
// end ;
10385: LD_VAR 0 1
10389: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
10390: LD_VAR 0 2
10394: PUSH
10395: LD_INT 100
10397: EQUAL
10398: IFFALSE 11347
// begin if not StreamModeActive then
10400: LD_EXP 27
10404: NOT
10405: IFFALSE 10415
// StreamModeActive := true ;
10407: LD_ADDR_EXP 27
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 0 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 0
10422: EQUAL
10423: IFFALSE 10429
// InitStreamMode ;
10425: CALL 6468 0 0
// if p3 = 1 then
10429: LD_VAR 0 3
10433: PUSH
10434: LD_INT 1
10436: EQUAL
10437: IFFALSE 10447
// sRocket := true ;
10439: LD_ADDR_EXP 32
10443: PUSH
10444: LD_INT 1
10446: ST_TO_ADDR
// if p3 = 2 then
10447: LD_VAR 0 3
10451: PUSH
10452: LD_INT 2
10454: EQUAL
10455: IFFALSE 10465
// sSpeed := true ;
10457: LD_ADDR_EXP 31
10461: PUSH
10462: LD_INT 1
10464: ST_TO_ADDR
// if p3 = 3 then
10465: LD_VAR 0 3
10469: PUSH
10470: LD_INT 3
10472: EQUAL
10473: IFFALSE 10483
// sEngine := true ;
10475: LD_ADDR_EXP 33
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// if p3 = 4 then
10483: LD_VAR 0 3
10487: PUSH
10488: LD_INT 4
10490: EQUAL
10491: IFFALSE 10501
// sSpec := true ;
10493: LD_ADDR_EXP 30
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// if p3 = 5 then
10501: LD_VAR 0 3
10505: PUSH
10506: LD_INT 5
10508: EQUAL
10509: IFFALSE 10519
// sLevel := true ;
10511: LD_ADDR_EXP 34
10515: PUSH
10516: LD_INT 1
10518: ST_TO_ADDR
// if p3 = 6 then
10519: LD_VAR 0 3
10523: PUSH
10524: LD_INT 6
10526: EQUAL
10527: IFFALSE 10537
// sArmoury := true ;
10529: LD_ADDR_EXP 35
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// if p3 = 7 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_INT 7
10544: EQUAL
10545: IFFALSE 10555
// sRadar := true ;
10547: LD_ADDR_EXP 36
10551: PUSH
10552: LD_INT 1
10554: ST_TO_ADDR
// if p3 = 8 then
10555: LD_VAR 0 3
10559: PUSH
10560: LD_INT 8
10562: EQUAL
10563: IFFALSE 10573
// sBunker := true ;
10565: LD_ADDR_EXP 37
10569: PUSH
10570: LD_INT 1
10572: ST_TO_ADDR
// if p3 = 9 then
10573: LD_VAR 0 3
10577: PUSH
10578: LD_INT 9
10580: EQUAL
10581: IFFALSE 10591
// sHack := true ;
10583: LD_ADDR_EXP 38
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// if p3 = 10 then
10591: LD_VAR 0 3
10595: PUSH
10596: LD_INT 10
10598: EQUAL
10599: IFFALSE 10609
// sFire := true ;
10601: LD_ADDR_EXP 39
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// if p3 = 11 then
10609: LD_VAR 0 3
10613: PUSH
10614: LD_INT 11
10616: EQUAL
10617: IFFALSE 10627
// sRefresh := true ;
10619: LD_ADDR_EXP 40
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// if p3 = 12 then
10627: LD_VAR 0 3
10631: PUSH
10632: LD_INT 12
10634: EQUAL
10635: IFFALSE 10645
// sExp := true ;
10637: LD_ADDR_EXP 41
10641: PUSH
10642: LD_INT 1
10644: ST_TO_ADDR
// if p3 = 13 then
10645: LD_VAR 0 3
10649: PUSH
10650: LD_INT 13
10652: EQUAL
10653: IFFALSE 10663
// sDepot := true ;
10655: LD_ADDR_EXP 42
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
// if p3 = 14 then
10663: LD_VAR 0 3
10667: PUSH
10668: LD_INT 14
10670: EQUAL
10671: IFFALSE 10681
// sFlag := true ;
10673: LD_ADDR_EXP 43
10677: PUSH
10678: LD_INT 1
10680: ST_TO_ADDR
// if p3 = 15 then
10681: LD_VAR 0 3
10685: PUSH
10686: LD_INT 15
10688: EQUAL
10689: IFFALSE 10699
// sKamikadze := true ;
10691: LD_ADDR_EXP 51
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// if p3 = 16 then
10699: LD_VAR 0 3
10703: PUSH
10704: LD_INT 16
10706: EQUAL
10707: IFFALSE 10717
// sTroll := true ;
10709: LD_ADDR_EXP 52
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// if p3 = 17 then
10717: LD_VAR 0 3
10721: PUSH
10722: LD_INT 17
10724: EQUAL
10725: IFFALSE 10735
// sSlow := true ;
10727: LD_ADDR_EXP 53
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// if p3 = 18 then
10735: LD_VAR 0 3
10739: PUSH
10740: LD_INT 18
10742: EQUAL
10743: IFFALSE 10753
// sLack := true ;
10745: LD_ADDR_EXP 54
10749: PUSH
10750: LD_INT 1
10752: ST_TO_ADDR
// if p3 = 19 then
10753: LD_VAR 0 3
10757: PUSH
10758: LD_INT 19
10760: EQUAL
10761: IFFALSE 10771
// sTank := true ;
10763: LD_ADDR_EXP 56
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// if p3 = 20 then
10771: LD_VAR 0 3
10775: PUSH
10776: LD_INT 20
10778: EQUAL
10779: IFFALSE 10789
// sRemote := true ;
10781: LD_ADDR_EXP 57
10785: PUSH
10786: LD_INT 1
10788: ST_TO_ADDR
// if p3 = 21 then
10789: LD_VAR 0 3
10793: PUSH
10794: LD_INT 21
10796: EQUAL
10797: IFFALSE 10807
// sPowell := true ;
10799: LD_ADDR_EXP 58
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// if p3 = 22 then
10807: LD_VAR 0 3
10811: PUSH
10812: LD_INT 22
10814: EQUAL
10815: IFFALSE 10825
// sTeleport := true ;
10817: LD_ADDR_EXP 61
10821: PUSH
10822: LD_INT 1
10824: ST_TO_ADDR
// if p3 = 23 then
10825: LD_VAR 0 3
10829: PUSH
10830: LD_INT 23
10832: EQUAL
10833: IFFALSE 10843
// sOilTower := true ;
10835: LD_ADDR_EXP 63
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// if p3 = 24 then
10843: LD_VAR 0 3
10847: PUSH
10848: LD_INT 24
10850: EQUAL
10851: IFFALSE 10861
// sShovel := true ;
10853: LD_ADDR_EXP 64
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// if p3 = 25 then
10861: LD_VAR 0 3
10865: PUSH
10866: LD_INT 25
10868: EQUAL
10869: IFFALSE 10879
// sSheik := true ;
10871: LD_ADDR_EXP 65
10875: PUSH
10876: LD_INT 1
10878: ST_TO_ADDR
// if p3 = 26 then
10879: LD_VAR 0 3
10883: PUSH
10884: LD_INT 26
10886: EQUAL
10887: IFFALSE 10897
// sEarthquake := true ;
10889: LD_ADDR_EXP 67
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// if p3 = 27 then
10897: LD_VAR 0 3
10901: PUSH
10902: LD_INT 27
10904: EQUAL
10905: IFFALSE 10915
// sAI := true ;
10907: LD_ADDR_EXP 68
10911: PUSH
10912: LD_INT 1
10914: ST_TO_ADDR
// if p3 = 28 then
10915: LD_VAR 0 3
10919: PUSH
10920: LD_INT 28
10922: EQUAL
10923: IFFALSE 10933
// sCargo := true ;
10925: LD_ADDR_EXP 71
10929: PUSH
10930: LD_INT 1
10932: ST_TO_ADDR
// if p3 = 29 then
10933: LD_VAR 0 3
10937: PUSH
10938: LD_INT 29
10940: EQUAL
10941: IFFALSE 10951
// sDLaser := true ;
10943: LD_ADDR_EXP 72
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// if p3 = 30 then
10951: LD_VAR 0 3
10955: PUSH
10956: LD_INT 30
10958: EQUAL
10959: IFFALSE 10969
// sExchange := true ;
10961: LD_ADDR_EXP 73
10965: PUSH
10966: LD_INT 1
10968: ST_TO_ADDR
// if p3 = 31 then
10969: LD_VAR 0 3
10973: PUSH
10974: LD_INT 31
10976: EQUAL
10977: IFFALSE 10987
// sFac := true ;
10979: LD_ADDR_EXP 74
10983: PUSH
10984: LD_INT 1
10986: ST_TO_ADDR
// if p3 = 32 then
10987: LD_VAR 0 3
10991: PUSH
10992: LD_INT 32
10994: EQUAL
10995: IFFALSE 11005
// sPower := true ;
10997: LD_ADDR_EXP 75
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// if p3 = 33 then
11005: LD_VAR 0 3
11009: PUSH
11010: LD_INT 33
11012: EQUAL
11013: IFFALSE 11023
// sRandom := true ;
11015: LD_ADDR_EXP 76
11019: PUSH
11020: LD_INT 1
11022: ST_TO_ADDR
// if p3 = 34 then
11023: LD_VAR 0 3
11027: PUSH
11028: LD_INT 34
11030: EQUAL
11031: IFFALSE 11041
// sShield := true ;
11033: LD_ADDR_EXP 77
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// if p3 = 35 then
11041: LD_VAR 0 3
11045: PUSH
11046: LD_INT 35
11048: EQUAL
11049: IFFALSE 11059
// sTime := true ;
11051: LD_ADDR_EXP 78
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// if p3 = 36 then
11059: LD_VAR 0 3
11063: PUSH
11064: LD_INT 36
11066: EQUAL
11067: IFFALSE 11077
// sTools := true ;
11069: LD_ADDR_EXP 79
11073: PUSH
11074: LD_INT 1
11076: ST_TO_ADDR
// if p3 = 101 then
11077: LD_VAR 0 3
11081: PUSH
11082: LD_INT 101
11084: EQUAL
11085: IFFALSE 11095
// sSold := true ;
11087: LD_ADDR_EXP 44
11091: PUSH
11092: LD_INT 1
11094: ST_TO_ADDR
// if p3 = 102 then
11095: LD_VAR 0 3
11099: PUSH
11100: LD_INT 102
11102: EQUAL
11103: IFFALSE 11113
// sDiff := true ;
11105: LD_ADDR_EXP 45
11109: PUSH
11110: LD_INT 1
11112: ST_TO_ADDR
// if p3 = 103 then
11113: LD_VAR 0 3
11117: PUSH
11118: LD_INT 103
11120: EQUAL
11121: IFFALSE 11131
// sFog := true ;
11123: LD_ADDR_EXP 48
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// if p3 = 104 then
11131: LD_VAR 0 3
11135: PUSH
11136: LD_INT 104
11138: EQUAL
11139: IFFALSE 11149
// sReset := true ;
11141: LD_ADDR_EXP 49
11145: PUSH
11146: LD_INT 1
11148: ST_TO_ADDR
// if p3 = 105 then
11149: LD_VAR 0 3
11153: PUSH
11154: LD_INT 105
11156: EQUAL
11157: IFFALSE 11167
// sSun := true ;
11159: LD_ADDR_EXP 50
11163: PUSH
11164: LD_INT 1
11166: ST_TO_ADDR
// if p3 = 106 then
11167: LD_VAR 0 3
11171: PUSH
11172: LD_INT 106
11174: EQUAL
11175: IFFALSE 11185
// sTiger := true ;
11177: LD_ADDR_EXP 46
11181: PUSH
11182: LD_INT 1
11184: ST_TO_ADDR
// if p3 = 107 then
11185: LD_VAR 0 3
11189: PUSH
11190: LD_INT 107
11192: EQUAL
11193: IFFALSE 11203
// sBomb := true ;
11195: LD_ADDR_EXP 47
11199: PUSH
11200: LD_INT 1
11202: ST_TO_ADDR
// if p3 = 108 then
11203: LD_VAR 0 3
11207: PUSH
11208: LD_INT 108
11210: EQUAL
11211: IFFALSE 11221
// sWound := true ;
11213: LD_ADDR_EXP 55
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// if p3 = 109 then
11221: LD_VAR 0 3
11225: PUSH
11226: LD_INT 109
11228: EQUAL
11229: IFFALSE 11239
// sBetray := true ;
11231: LD_ADDR_EXP 59
11235: PUSH
11236: LD_INT 1
11238: ST_TO_ADDR
// if p3 = 110 then
11239: LD_VAR 0 3
11243: PUSH
11244: LD_INT 110
11246: EQUAL
11247: IFFALSE 11257
// sContamin := true ;
11249: LD_ADDR_EXP 60
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// if p3 = 111 then
11257: LD_VAR 0 3
11261: PUSH
11262: LD_INT 111
11264: EQUAL
11265: IFFALSE 11275
// sOil := true ;
11267: LD_ADDR_EXP 62
11271: PUSH
11272: LD_INT 1
11274: ST_TO_ADDR
// if p3 = 112 then
11275: LD_VAR 0 3
11279: PUSH
11280: LD_INT 112
11282: EQUAL
11283: IFFALSE 11293
// sStu := true ;
11285: LD_ADDR_EXP 66
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// if p3 = 113 then
11293: LD_VAR 0 3
11297: PUSH
11298: LD_INT 113
11300: EQUAL
11301: IFFALSE 11311
// sBazooka := true ;
11303: LD_ADDR_EXP 69
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// if p3 = 114 then
11311: LD_VAR 0 3
11315: PUSH
11316: LD_INT 114
11318: EQUAL
11319: IFFALSE 11329
// sMortar := true ;
11321: LD_ADDR_EXP 70
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// if p3 = 115 then
11329: LD_VAR 0 3
11333: PUSH
11334: LD_INT 115
11336: EQUAL
11337: IFFALSE 11347
// sRanger := true ;
11339: LD_ADDR_EXP 80
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// end ; end ;
11347: PPOPN 6
11349: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11350: LD_EXP 27
11354: PUSH
11355: LD_EXP 32
11359: AND
11360: IFFALSE 11484
11362: GO 11364
11364: DISABLE
11365: LD_INT 0
11367: PPUSH
11368: PPUSH
// begin enable ;
11369: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11370: LD_ADDR_VAR 0 2
11374: PUSH
11375: LD_INT 22
11377: PUSH
11378: LD_OWVAR 2
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 34
11392: PUSH
11393: LD_INT 7
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 34
11402: PUSH
11403: LD_INT 45
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 34
11412: PUSH
11413: LD_INT 28
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 34
11422: PUSH
11423: LD_INT 47
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PPUSH
11441: CALL_OW 69
11445: ST_TO_ADDR
// if not tmp then
11446: LD_VAR 0 2
11450: NOT
11451: IFFALSE 11455
// exit ;
11453: GO 11484
// for i in tmp do
11455: LD_ADDR_VAR 0 1
11459: PUSH
11460: LD_VAR 0 2
11464: PUSH
11465: FOR_IN
11466: IFFALSE 11482
// begin SetLives ( i , 0 ) ;
11468: LD_VAR 0 1
11472: PPUSH
11473: LD_INT 0
11475: PPUSH
11476: CALL_OW 234
// end ;
11480: GO 11465
11482: POP
11483: POP
// end ;
11484: PPOPN 2
11486: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11487: LD_EXP 27
11491: PUSH
11492: LD_EXP 33
11496: AND
11497: IFFALSE 11581
11499: GO 11501
11501: DISABLE
11502: LD_INT 0
11504: PPUSH
11505: PPUSH
// begin enable ;
11506: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11507: LD_ADDR_VAR 0 2
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: LD_OWVAR 2
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 32
11526: PUSH
11527: LD_INT 3
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 69
11542: ST_TO_ADDR
// if not tmp then
11543: LD_VAR 0 2
11547: NOT
11548: IFFALSE 11552
// exit ;
11550: GO 11581
// for i in tmp do
11552: LD_ADDR_VAR 0 1
11556: PUSH
11557: LD_VAR 0 2
11561: PUSH
11562: FOR_IN
11563: IFFALSE 11579
// begin SetLives ( i , 0 ) ;
11565: LD_VAR 0 1
11569: PPUSH
11570: LD_INT 0
11572: PPUSH
11573: CALL_OW 234
// end ;
11577: GO 11562
11579: POP
11580: POP
// end ;
11581: PPOPN 2
11583: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11584: LD_EXP 27
11588: PUSH
11589: LD_EXP 30
11593: AND
11594: IFFALSE 11687
11596: GO 11598
11598: DISABLE
11599: LD_INT 0
11601: PPUSH
// begin enable ;
11602: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11603: LD_ADDR_VAR 0 1
11607: PUSH
11608: LD_INT 22
11610: PUSH
11611: LD_OWVAR 2
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 2
11622: PUSH
11623: LD_INT 25
11625: PUSH
11626: LD_INT 5
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 25
11635: PUSH
11636: LD_INT 9
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 8
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PPUSH
11663: CALL_OW 69
11667: PUSH
11668: FOR_IN
11669: IFFALSE 11685
// begin SetClass ( i , 1 ) ;
11671: LD_VAR 0 1
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 336
// end ;
11683: GO 11668
11685: POP
11686: POP
// end ;
11687: PPOPN 1
11689: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11690: LD_EXP 27
11694: PUSH
11695: LD_EXP 31
11699: AND
11700: PUSH
11701: LD_OWVAR 65
11705: PUSH
11706: LD_INT 7
11708: LESS
11709: AND
11710: IFFALSE 11724
11712: GO 11714
11714: DISABLE
// begin enable ;
11715: ENABLE
// game_speed := 7 ;
11716: LD_ADDR_OWVAR 65
11720: PUSH
11721: LD_INT 7
11723: ST_TO_ADDR
// end ;
11724: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11725: LD_EXP 27
11729: PUSH
11730: LD_EXP 34
11734: AND
11735: IFFALSE 11937
11737: GO 11739
11739: DISABLE
11740: LD_INT 0
11742: PPUSH
11743: PPUSH
11744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11745: LD_ADDR_VAR 0 3
11749: PUSH
11750: LD_INT 81
11752: PUSH
11753: LD_OWVAR 2
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 21
11764: PUSH
11765: LD_INT 1
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PPUSH
11776: CALL_OW 69
11780: ST_TO_ADDR
// if not tmp then
11781: LD_VAR 0 3
11785: NOT
11786: IFFALSE 11790
// exit ;
11788: GO 11937
// if tmp > 5 then
11790: LD_VAR 0 3
11794: PUSH
11795: LD_INT 5
11797: GREATER
11798: IFFALSE 11810
// k := 5 else
11800: LD_ADDR_VAR 0 2
11804: PUSH
11805: LD_INT 5
11807: ST_TO_ADDR
11808: GO 11820
// k := tmp ;
11810: LD_ADDR_VAR 0 2
11814: PUSH
11815: LD_VAR 0 3
11819: ST_TO_ADDR
// for i := 1 to k do
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: DOUBLE
11826: LD_INT 1
11828: DEC
11829: ST_TO_ADDR
11830: LD_VAR 0 2
11834: PUSH
11835: FOR_TO
11836: IFFALSE 11935
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_VAR 0 1
11847: ARRAY
11848: PPUSH
11849: LD_VAR 0 1
11853: PUSH
11854: LD_INT 4
11856: MOD
11857: PUSH
11858: LD_INT 1
11860: PLUS
11861: PPUSH
11862: CALL_OW 259
11866: PUSH
11867: LD_INT 10
11869: LESS
11870: IFFALSE 11933
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11872: LD_VAR 0 3
11876: PUSH
11877: LD_VAR 0 1
11881: ARRAY
11882: PPUSH
11883: LD_VAR 0 1
11887: PUSH
11888: LD_INT 4
11890: MOD
11891: PUSH
11892: LD_INT 1
11894: PLUS
11895: PPUSH
11896: LD_VAR 0 3
11900: PUSH
11901: LD_VAR 0 1
11905: ARRAY
11906: PPUSH
11907: LD_VAR 0 1
11911: PUSH
11912: LD_INT 4
11914: MOD
11915: PUSH
11916: LD_INT 1
11918: PLUS
11919: PPUSH
11920: CALL_OW 259
11924: PUSH
11925: LD_INT 1
11927: PLUS
11928: PPUSH
11929: CALL_OW 237
11933: GO 11835
11935: POP
11936: POP
// end ;
11937: PPOPN 3
11939: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11940: LD_EXP 27
11944: PUSH
11945: LD_EXP 35
11949: AND
11950: IFFALSE 11970
11952: GO 11954
11954: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11955: LD_INT 4
11957: PPUSH
11958: LD_OWVAR 2
11962: PPUSH
11963: LD_INT 0
11965: PPUSH
11966: CALL_OW 324
11970: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11971: LD_EXP 27
11975: PUSH
11976: LD_EXP 64
11980: AND
11981: IFFALSE 12001
11983: GO 11985
11985: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11986: LD_INT 19
11988: PPUSH
11989: LD_OWVAR 2
11993: PPUSH
11994: LD_INT 0
11996: PPUSH
11997: CALL_OW 324
12001: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12002: LD_EXP 27
12006: PUSH
12007: LD_EXP 36
12011: AND
12012: IFFALSE 12114
12014: GO 12016
12016: DISABLE
12017: LD_INT 0
12019: PPUSH
12020: PPUSH
// begin enable ;
12021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12022: LD_ADDR_VAR 0 2
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_OWVAR 2
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 2
12041: PUSH
12042: LD_INT 34
12044: PUSH
12045: LD_INT 11
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 34
12054: PUSH
12055: LD_INT 30
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: ST_TO_ADDR
// if not tmp then
12076: LD_VAR 0 2
12080: NOT
12081: IFFALSE 12085
// exit ;
12083: GO 12114
// for i in tmp do
12085: LD_ADDR_VAR 0 1
12089: PUSH
12090: LD_VAR 0 2
12094: PUSH
12095: FOR_IN
12096: IFFALSE 12112
// begin SetLives ( i , 0 ) ;
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_INT 0
12105: PPUSH
12106: CALL_OW 234
// end ;
12110: GO 12095
12112: POP
12113: POP
// end ;
12114: PPOPN 2
12116: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12117: LD_EXP 27
12121: PUSH
12122: LD_EXP 37
12126: AND
12127: IFFALSE 12147
12129: GO 12131
12131: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12132: LD_INT 32
12134: PPUSH
12135: LD_OWVAR 2
12139: PPUSH
12140: LD_INT 0
12142: PPUSH
12143: CALL_OW 324
12147: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12148: LD_EXP 27
12152: PUSH
12153: LD_EXP 38
12157: AND
12158: IFFALSE 12339
12160: GO 12162
12162: DISABLE
12163: LD_INT 0
12165: PPUSH
12166: PPUSH
12167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12168: LD_ADDR_VAR 0 2
12172: PUSH
12173: LD_INT 22
12175: PUSH
12176: LD_OWVAR 2
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 33
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PPUSH
12199: CALL_OW 69
12203: ST_TO_ADDR
// if not tmp then
12204: LD_VAR 0 2
12208: NOT
12209: IFFALSE 12213
// exit ;
12211: GO 12339
// side := 0 ;
12213: LD_ADDR_VAR 0 3
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
// for i := 1 to 8 do
12221: LD_ADDR_VAR 0 1
12225: PUSH
12226: DOUBLE
12227: LD_INT 1
12229: DEC
12230: ST_TO_ADDR
12231: LD_INT 8
12233: PUSH
12234: FOR_TO
12235: IFFALSE 12283
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12237: LD_OWVAR 2
12241: PUSH
12242: LD_VAR 0 1
12246: NONEQUAL
12247: PUSH
12248: LD_OWVAR 2
12252: PPUSH
12253: LD_VAR 0 1
12257: PPUSH
12258: CALL_OW 81
12262: PUSH
12263: LD_INT 2
12265: EQUAL
12266: AND
12267: IFFALSE 12281
// begin side := i ;
12269: LD_ADDR_VAR 0 3
12273: PUSH
12274: LD_VAR 0 1
12278: ST_TO_ADDR
// break ;
12279: GO 12283
// end ;
12281: GO 12234
12283: POP
12284: POP
// if not side then
12285: LD_VAR 0 3
12289: NOT
12290: IFFALSE 12294
// exit ;
12292: GO 12339
// for i := 1 to tmp do
12294: LD_ADDR_VAR 0 1
12298: PUSH
12299: DOUBLE
12300: LD_INT 1
12302: DEC
12303: ST_TO_ADDR
12304: LD_VAR 0 2
12308: PUSH
12309: FOR_TO
12310: IFFALSE 12337
// if Prob ( 60 ) then
12312: LD_INT 60
12314: PPUSH
12315: CALL_OW 13
12319: IFFALSE 12335
// SetSide ( i , side ) ;
12321: LD_VAR 0 1
12325: PPUSH
12326: LD_VAR 0 3
12330: PPUSH
12331: CALL_OW 235
12335: GO 12309
12337: POP
12338: POP
// end ;
12339: PPOPN 3
12341: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12342: LD_EXP 27
12346: PUSH
12347: LD_EXP 40
12351: AND
12352: IFFALSE 12471
12354: GO 12356
12356: DISABLE
12357: LD_INT 0
12359: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12360: LD_ADDR_VAR 0 1
12364: PUSH
12365: LD_INT 22
12367: PUSH
12368: LD_OWVAR 2
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 21
12379: PUSH
12380: LD_INT 1
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 3
12389: PUSH
12390: LD_INT 23
12392: PUSH
12393: LD_INT 0
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: PUSH
12414: FOR_IN
12415: IFFALSE 12469
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12417: LD_VAR 0 1
12421: PPUSH
12422: CALL_OW 257
12426: PUSH
12427: LD_INT 1
12429: PUSH
12430: LD_INT 2
12432: PUSH
12433: LD_INT 3
12435: PUSH
12436: LD_INT 4
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: IN
12445: IFFALSE 12467
// SetClass ( un , rand ( 1 , 4 ) ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 4
12457: PPUSH
12458: CALL_OW 12
12462: PPUSH
12463: CALL_OW 336
12467: GO 12414
12469: POP
12470: POP
// end ;
12471: PPOPN 1
12473: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12474: LD_EXP 27
12478: PUSH
12479: LD_EXP 39
12483: AND
12484: IFFALSE 12563
12486: GO 12488
12488: DISABLE
12489: LD_INT 0
12491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12492: LD_ADDR_VAR 0 1
12496: PUSH
12497: LD_INT 22
12499: PUSH
12500: LD_OWVAR 2
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 21
12511: PUSH
12512: LD_INT 3
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PPUSH
12523: CALL_OW 69
12527: ST_TO_ADDR
// if not tmp then
12528: LD_VAR 0 1
12532: NOT
12533: IFFALSE 12537
// exit ;
12535: GO 12563
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12537: LD_VAR 0 1
12541: PUSH
12542: LD_INT 1
12544: PPUSH
12545: LD_VAR 0 1
12549: PPUSH
12550: CALL_OW 12
12554: ARRAY
12555: PPUSH
12556: LD_INT 100
12558: PPUSH
12559: CALL_OW 234
// end ;
12563: PPOPN 1
12565: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12566: LD_EXP 27
12570: PUSH
12571: LD_EXP 41
12575: AND
12576: IFFALSE 12674
12578: GO 12580
12580: DISABLE
12581: LD_INT 0
12583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12584: LD_ADDR_VAR 0 1
12588: PUSH
12589: LD_INT 22
12591: PUSH
12592: LD_OWVAR 2
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 69
12619: ST_TO_ADDR
// if not tmp then
12620: LD_VAR 0 1
12624: NOT
12625: IFFALSE 12629
// exit ;
12627: GO 12674
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12629: LD_VAR 0 1
12633: PUSH
12634: LD_INT 1
12636: PPUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 12
12646: ARRAY
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_INT 4
12653: PPUSH
12654: CALL_OW 12
12658: PPUSH
12659: LD_INT 3000
12661: PPUSH
12662: LD_INT 9000
12664: PPUSH
12665: CALL_OW 12
12669: PPUSH
12670: CALL_OW 492
// end ;
12674: PPOPN 1
12676: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12677: LD_EXP 27
12681: PUSH
12682: LD_EXP 42
12686: AND
12687: IFFALSE 12707
12689: GO 12691
12691: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12692: LD_INT 1
12694: PPUSH
12695: LD_OWVAR 2
12699: PPUSH
12700: LD_INT 0
12702: PPUSH
12703: CALL_OW 324
12707: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12708: LD_EXP 27
12712: PUSH
12713: LD_EXP 43
12717: AND
12718: IFFALSE 12801
12720: GO 12722
12722: DISABLE
12723: LD_INT 0
12725: PPUSH
12726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12727: LD_ADDR_VAR 0 2
12731: PUSH
12732: LD_INT 22
12734: PUSH
12735: LD_OWVAR 2
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 21
12746: PUSH
12747: LD_INT 3
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 2
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12801
// for i in tmp do
12772: LD_ADDR_VAR 0 1
12776: PUSH
12777: LD_VAR 0 2
12781: PUSH
12782: FOR_IN
12783: IFFALSE 12799
// SetBLevel ( i , 10 ) ;
12785: LD_VAR 0 1
12789: PPUSH
12790: LD_INT 10
12792: PPUSH
12793: CALL_OW 241
12797: GO 12782
12799: POP
12800: POP
// end ;
12801: PPOPN 2
12803: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12804: LD_EXP 27
12808: PUSH
12809: LD_EXP 44
12813: AND
12814: IFFALSE 12925
12816: GO 12818
12818: DISABLE
12819: LD_INT 0
12821: PPUSH
12822: PPUSH
12823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_OWVAR 2
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 25
12843: PUSH
12844: LD_INT 1
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 69
12859: ST_TO_ADDR
// if not tmp then
12860: LD_VAR 0 3
12864: NOT
12865: IFFALSE 12869
// exit ;
12867: GO 12925
// un := tmp [ rand ( 1 , tmp ) ] ;
12869: LD_ADDR_VAR 0 2
12873: PUSH
12874: LD_VAR 0 3
12878: PUSH
12879: LD_INT 1
12881: PPUSH
12882: LD_VAR 0 3
12886: PPUSH
12887: CALL_OW 12
12891: ARRAY
12892: ST_TO_ADDR
// if Crawls ( un ) then
12893: LD_VAR 0 2
12897: PPUSH
12898: CALL_OW 318
12902: IFFALSE 12913
// ComWalk ( un ) ;
12904: LD_VAR 0 2
12908: PPUSH
12909: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12913: LD_VAR 0 2
12917: PPUSH
12918: LD_INT 5
12920: PPUSH
12921: CALL_OW 336
// end ;
12925: PPOPN 3
12927: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12928: LD_EXP 27
12932: PUSH
12933: LD_EXP 45
12937: AND
12938: PUSH
12939: LD_OWVAR 67
12943: PUSH
12944: LD_INT 3
12946: LESS
12947: AND
12948: IFFALSE 12967
12950: GO 12952
12952: DISABLE
// Difficulty := Difficulty + 1 ;
12953: LD_ADDR_OWVAR 67
12957: PUSH
12958: LD_OWVAR 67
12962: PUSH
12963: LD_INT 1
12965: PLUS
12966: ST_TO_ADDR
12967: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12968: LD_EXP 27
12972: PUSH
12973: LD_EXP 46
12977: AND
12978: IFFALSE 13081
12980: GO 12982
12982: DISABLE
12983: LD_INT 0
12985: PPUSH
// begin for i := 1 to 5 do
12986: LD_ADDR_VAR 0 1
12990: PUSH
12991: DOUBLE
12992: LD_INT 1
12994: DEC
12995: ST_TO_ADDR
12996: LD_INT 5
12998: PUSH
12999: FOR_TO
13000: IFFALSE 13079
// begin uc_nation := nation_nature ;
13002: LD_ADDR_OWVAR 21
13006: PUSH
13007: LD_INT 0
13009: ST_TO_ADDR
// uc_side := 0 ;
13010: LD_ADDR_OWVAR 20
13014: PUSH
13015: LD_INT 0
13017: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13018: LD_ADDR_OWVAR 29
13022: PUSH
13023: LD_INT 12
13025: PUSH
13026: LD_INT 12
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: ST_TO_ADDR
// hc_agressivity := 20 ;
13033: LD_ADDR_OWVAR 35
13037: PUSH
13038: LD_INT 20
13040: ST_TO_ADDR
// hc_class := class_tiger ;
13041: LD_ADDR_OWVAR 28
13045: PUSH
13046: LD_INT 14
13048: ST_TO_ADDR
// hc_gallery :=  ;
13049: LD_ADDR_OWVAR 33
13053: PUSH
13054: LD_STRING 
13056: ST_TO_ADDR
// hc_name :=  ;
13057: LD_ADDR_OWVAR 26
13061: PUSH
13062: LD_STRING 
13064: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13065: CALL_OW 44
13069: PPUSH
13070: LD_INT 0
13072: PPUSH
13073: CALL_OW 51
// end ;
13077: GO 12999
13079: POP
13080: POP
// end ;
13081: PPOPN 1
13083: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13084: LD_EXP 27
13088: PUSH
13089: LD_EXP 47
13093: AND
13094: IFFALSE 13103
13096: GO 13098
13098: DISABLE
// StreamSibBomb ;
13099: CALL 13104 0 0
13103: END
// export function StreamSibBomb ; var i , x , y ; begin
13104: LD_INT 0
13106: PPUSH
13107: PPUSH
13108: PPUSH
13109: PPUSH
// result := false ;
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: LD_INT 0
13117: ST_TO_ADDR
// for i := 1 to 16 do
13118: LD_ADDR_VAR 0 2
13122: PUSH
13123: DOUBLE
13124: LD_INT 1
13126: DEC
13127: ST_TO_ADDR
13128: LD_INT 16
13130: PUSH
13131: FOR_TO
13132: IFFALSE 13331
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13134: LD_ADDR_VAR 0 3
13138: PUSH
13139: LD_INT 10
13141: PUSH
13142: LD_INT 20
13144: PUSH
13145: LD_INT 30
13147: PUSH
13148: LD_INT 40
13150: PUSH
13151: LD_INT 50
13153: PUSH
13154: LD_INT 60
13156: PUSH
13157: LD_INT 70
13159: PUSH
13160: LD_INT 80
13162: PUSH
13163: LD_INT 90
13165: PUSH
13166: LD_INT 100
13168: PUSH
13169: LD_INT 110
13171: PUSH
13172: LD_INT 120
13174: PUSH
13175: LD_INT 130
13177: PUSH
13178: LD_INT 140
13180: PUSH
13181: LD_INT 150
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 1
13203: PPUSH
13204: LD_INT 15
13206: PPUSH
13207: CALL_OW 12
13211: ARRAY
13212: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13213: LD_ADDR_VAR 0 4
13217: PUSH
13218: LD_INT 10
13220: PUSH
13221: LD_INT 20
13223: PUSH
13224: LD_INT 30
13226: PUSH
13227: LD_INT 40
13229: PUSH
13230: LD_INT 50
13232: PUSH
13233: LD_INT 60
13235: PUSH
13236: LD_INT 70
13238: PUSH
13239: LD_INT 80
13241: PUSH
13242: LD_INT 90
13244: PUSH
13245: LD_INT 100
13247: PUSH
13248: LD_INT 110
13250: PUSH
13251: LD_INT 120
13253: PUSH
13254: LD_INT 130
13256: PUSH
13257: LD_INT 140
13259: PUSH
13260: LD_INT 150
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 1
13282: PPUSH
13283: LD_INT 15
13285: PPUSH
13286: CALL_OW 12
13290: ARRAY
13291: ST_TO_ADDR
// if ValidHex ( x , y ) then
13292: LD_VAR 0 3
13296: PPUSH
13297: LD_VAR 0 4
13301: PPUSH
13302: CALL_OW 488
13306: IFFALSE 13329
// begin result := [ x , y ] ;
13308: LD_ADDR_VAR 0 1
13312: PUSH
13313: LD_VAR 0 3
13317: PUSH
13318: LD_VAR 0 4
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: ST_TO_ADDR
// break ;
13327: GO 13331
// end ; end ;
13329: GO 13131
13331: POP
13332: POP
// if result then
13333: LD_VAR 0 1
13337: IFFALSE 13397
// begin ToLua ( playSibBomb() ) ;
13339: LD_STRING playSibBomb()
13341: PPUSH
13342: CALL_OW 559
// wait ( 0 0$14 ) ;
13346: LD_INT 490
13348: PPUSH
13349: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13353: LD_VAR 0 1
13357: PUSH
13358: LD_INT 1
13360: ARRAY
13361: PPUSH
13362: LD_VAR 0 1
13366: PUSH
13367: LD_INT 2
13369: ARRAY
13370: PPUSH
13371: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13375: LD_VAR 0 1
13379: PUSH
13380: LD_INT 1
13382: ARRAY
13383: PPUSH
13384: LD_VAR 0 1
13388: PUSH
13389: LD_INT 2
13391: ARRAY
13392: PPUSH
13393: CALL_OW 429
// end ; end ;
13397: LD_VAR 0 1
13401: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13402: LD_EXP 27
13406: PUSH
13407: LD_EXP 49
13411: AND
13412: IFFALSE 13424
13414: GO 13416
13416: DISABLE
// YouLost (  ) ;
13417: LD_STRING 
13419: PPUSH
13420: CALL_OW 104
13424: END
// every 0 0$1 trigger StreamModeActive and sFog do
13425: LD_EXP 27
13429: PUSH
13430: LD_EXP 48
13434: AND
13435: IFFALSE 13449
13437: GO 13439
13439: DISABLE
// FogOff ( your_side ) ;
13440: LD_OWVAR 2
13444: PPUSH
13445: CALL_OW 344
13449: END
// every 0 0$1 trigger StreamModeActive and sSun do
13450: LD_EXP 27
13454: PUSH
13455: LD_EXP 50
13459: AND
13460: IFFALSE 13488
13462: GO 13464
13464: DISABLE
// begin solar_recharge_percent := 0 ;
13465: LD_ADDR_OWVAR 79
13469: PUSH
13470: LD_INT 0
13472: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13473: LD_INT 10500
13475: PPUSH
13476: CALL_OW 67
// solar_recharge_percent := 100 ;
13480: LD_ADDR_OWVAR 79
13484: PUSH
13485: LD_INT 100
13487: ST_TO_ADDR
// end ;
13488: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13489: LD_EXP 27
13493: PUSH
13494: LD_EXP 51
13498: AND
13499: IFFALSE 13738
13501: GO 13503
13503: DISABLE
13504: LD_INT 0
13506: PPUSH
13507: PPUSH
13508: PPUSH
// begin tmp := [ ] ;
13509: LD_ADDR_VAR 0 3
13513: PUSH
13514: EMPTY
13515: ST_TO_ADDR
// for i := 1 to 6 do
13516: LD_ADDR_VAR 0 1
13520: PUSH
13521: DOUBLE
13522: LD_INT 1
13524: DEC
13525: ST_TO_ADDR
13526: LD_INT 6
13528: PUSH
13529: FOR_TO
13530: IFFALSE 13635
// begin uc_nation := nation_nature ;
13532: LD_ADDR_OWVAR 21
13536: PUSH
13537: LD_INT 0
13539: ST_TO_ADDR
// uc_side := 0 ;
13540: LD_ADDR_OWVAR 20
13544: PUSH
13545: LD_INT 0
13547: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13548: LD_ADDR_OWVAR 29
13552: PUSH
13553: LD_INT 12
13555: PUSH
13556: LD_INT 12
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: ST_TO_ADDR
// hc_agressivity := 20 ;
13563: LD_ADDR_OWVAR 35
13567: PUSH
13568: LD_INT 20
13570: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13571: LD_ADDR_OWVAR 28
13575: PUSH
13576: LD_INT 17
13578: ST_TO_ADDR
// hc_gallery :=  ;
13579: LD_ADDR_OWVAR 33
13583: PUSH
13584: LD_STRING 
13586: ST_TO_ADDR
// hc_name :=  ;
13587: LD_ADDR_OWVAR 26
13591: PUSH
13592: LD_STRING 
13594: ST_TO_ADDR
// un := CreateHuman ;
13595: LD_ADDR_VAR 0 2
13599: PUSH
13600: CALL_OW 44
13604: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13605: LD_VAR 0 2
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: CALL_OW 51
// tmp := tmp ^ un ;
13617: LD_ADDR_VAR 0 3
13621: PUSH
13622: LD_VAR 0 3
13626: PUSH
13627: LD_VAR 0 2
13631: ADD
13632: ST_TO_ADDR
// end ;
13633: GO 13529
13635: POP
13636: POP
// repeat wait ( 0 0$1 ) ;
13637: LD_INT 35
13639: PPUSH
13640: CALL_OW 67
// for un in tmp do
13644: LD_ADDR_VAR 0 2
13648: PUSH
13649: LD_VAR 0 3
13653: PUSH
13654: FOR_IN
13655: IFFALSE 13729
// begin if IsDead ( un ) then
13657: LD_VAR 0 2
13661: PPUSH
13662: CALL_OW 301
13666: IFFALSE 13686
// begin tmp := tmp diff un ;
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_VAR 0 3
13677: PUSH
13678: LD_VAR 0 2
13682: DIFF
13683: ST_TO_ADDR
// continue ;
13684: GO 13654
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13686: LD_VAR 0 2
13690: PPUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 22
13696: PUSH
13697: LD_INT 0
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PPUSH
13708: CALL_OW 69
13712: PPUSH
13713: LD_VAR 0 2
13717: PPUSH
13718: CALL_OW 74
13722: PPUSH
13723: CALL_OW 115
// end ;
13727: GO 13654
13729: POP
13730: POP
// until not tmp ;
13731: LD_VAR 0 3
13735: NOT
13736: IFFALSE 13637
// end ;
13738: PPOPN 3
13740: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13741: LD_EXP 27
13745: PUSH
13746: LD_EXP 52
13750: AND
13751: IFFALSE 13805
13753: GO 13755
13755: DISABLE
// begin ToLua ( displayTroll(); ) ;
13756: LD_STRING displayTroll();
13758: PPUSH
13759: CALL_OW 559
// wait ( 3 3$00 ) ;
13763: LD_INT 6300
13765: PPUSH
13766: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13770: LD_STRING hideTroll();
13772: PPUSH
13773: CALL_OW 559
// wait ( 1 1$00 ) ;
13777: LD_INT 2100
13779: PPUSH
13780: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13784: LD_STRING displayTroll();
13786: PPUSH
13787: CALL_OW 559
// wait ( 1 1$00 ) ;
13791: LD_INT 2100
13793: PPUSH
13794: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13798: LD_STRING hideTroll();
13800: PPUSH
13801: CALL_OW 559
// end ;
13805: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13806: LD_EXP 27
13810: PUSH
13811: LD_EXP 53
13815: AND
13816: IFFALSE 13879
13818: GO 13820
13820: DISABLE
13821: LD_INT 0
13823: PPUSH
// begin p := 0 ;
13824: LD_ADDR_VAR 0 1
13828: PUSH
13829: LD_INT 0
13831: ST_TO_ADDR
// repeat game_speed := 1 ;
13832: LD_ADDR_OWVAR 65
13836: PUSH
13837: LD_INT 1
13839: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13840: LD_INT 35
13842: PPUSH
13843: CALL_OW 67
// p := p + 1 ;
13847: LD_ADDR_VAR 0 1
13851: PUSH
13852: LD_VAR 0 1
13856: PUSH
13857: LD_INT 1
13859: PLUS
13860: ST_TO_ADDR
// until p >= 60 ;
13861: LD_VAR 0 1
13865: PUSH
13866: LD_INT 60
13868: GREATEREQUAL
13869: IFFALSE 13832
// game_speed := 4 ;
13871: LD_ADDR_OWVAR 65
13875: PUSH
13876: LD_INT 4
13878: ST_TO_ADDR
// end ;
13879: PPOPN 1
13881: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13882: LD_EXP 27
13886: PUSH
13887: LD_EXP 54
13891: AND
13892: IFFALSE 14038
13894: GO 13896
13896: DISABLE
13897: LD_INT 0
13899: PPUSH
13900: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13901: LD_ADDR_VAR 0 1
13905: PUSH
13906: LD_INT 22
13908: PUSH
13909: LD_OWVAR 2
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: LD_INT 30
13923: PUSH
13924: LD_INT 0
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 30
13933: PUSH
13934: LD_INT 1
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 69
13954: ST_TO_ADDR
// if not depot then
13955: LD_VAR 0 1
13959: NOT
13960: IFFALSE 13964
// exit ;
13962: GO 14038
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: LD_VAR 0 1
13973: PUSH
13974: LD_INT 1
13976: PPUSH
13977: LD_VAR 0 1
13981: PPUSH
13982: CALL_OW 12
13986: ARRAY
13987: PPUSH
13988: CALL_OW 274
13992: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13993: LD_VAR 0 2
13997: PPUSH
13998: LD_INT 1
14000: PPUSH
14001: LD_INT 0
14003: PPUSH
14004: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14008: LD_VAR 0 2
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14023: LD_VAR 0 2
14027: PPUSH
14028: LD_INT 3
14030: PPUSH
14031: LD_INT 0
14033: PPUSH
14034: CALL_OW 277
// end ;
14038: PPOPN 2
14040: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14041: LD_EXP 27
14045: PUSH
14046: LD_EXP 55
14050: AND
14051: IFFALSE 14148
14053: GO 14055
14055: DISABLE
14056: LD_INT 0
14058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14059: LD_ADDR_VAR 0 1
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_OWVAR 2
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 21
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 3
14088: PUSH
14089: LD_INT 23
14091: PUSH
14092: LD_INT 0
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: PPUSH
14108: CALL_OW 69
14112: ST_TO_ADDR
// if not tmp then
14113: LD_VAR 0 1
14117: NOT
14118: IFFALSE 14122
// exit ;
14120: GO 14148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14122: LD_VAR 0 1
14126: PUSH
14127: LD_INT 1
14129: PPUSH
14130: LD_VAR 0 1
14134: PPUSH
14135: CALL_OW 12
14139: ARRAY
14140: PPUSH
14141: LD_INT 200
14143: PPUSH
14144: CALL_OW 234
// end ;
14148: PPOPN 1
14150: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14151: LD_EXP 27
14155: PUSH
14156: LD_EXP 56
14160: AND
14161: IFFALSE 14240
14163: GO 14165
14165: DISABLE
14166: LD_INT 0
14168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14169: LD_ADDR_VAR 0 1
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_OWVAR 2
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 21
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PPUSH
14200: CALL_OW 69
14204: ST_TO_ADDR
// if not tmp then
14205: LD_VAR 0 1
14209: NOT
14210: IFFALSE 14214
// exit ;
14212: GO 14240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14214: LD_VAR 0 1
14218: PUSH
14219: LD_INT 1
14221: PPUSH
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 12
14231: ARRAY
14232: PPUSH
14233: LD_INT 60
14235: PPUSH
14236: CALL_OW 234
// end ;
14240: PPOPN 1
14242: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14243: LD_EXP 27
14247: PUSH
14248: LD_EXP 57
14252: AND
14253: IFFALSE 14352
14255: GO 14257
14257: DISABLE
14258: LD_INT 0
14260: PPUSH
14261: PPUSH
// begin enable ;
14262: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14263: LD_ADDR_VAR 0 1
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_OWVAR 2
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 61
14282: PUSH
14283: EMPTY
14284: LIST
14285: PUSH
14286: LD_INT 33
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: PPUSH
14301: CALL_OW 69
14305: ST_TO_ADDR
// if not tmp then
14306: LD_VAR 0 1
14310: NOT
14311: IFFALSE 14315
// exit ;
14313: GO 14352
// for i in tmp do
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_VAR 0 1
14324: PUSH
14325: FOR_IN
14326: IFFALSE 14350
// if IsControledBy ( i ) then
14328: LD_VAR 0 2
14332: PPUSH
14333: CALL_OW 312
14337: IFFALSE 14348
// ComUnlink ( i ) ;
14339: LD_VAR 0 2
14343: PPUSH
14344: CALL_OW 136
14348: GO 14325
14350: POP
14351: POP
// end ;
14352: PPOPN 2
14354: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14355: LD_EXP 27
14359: PUSH
14360: LD_EXP 58
14364: AND
14365: IFFALSE 14505
14367: GO 14369
14369: DISABLE
14370: LD_INT 0
14372: PPUSH
14373: PPUSH
// begin ToLua ( displayPowell(); ) ;
14374: LD_STRING displayPowell();
14376: PPUSH
14377: CALL_OW 559
// uc_side := 0 ;
14381: LD_ADDR_OWVAR 20
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// uc_nation := 2 ;
14389: LD_ADDR_OWVAR 21
14393: PUSH
14394: LD_INT 2
14396: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14397: LD_ADDR_OWVAR 37
14401: PUSH
14402: LD_INT 14
14404: ST_TO_ADDR
// vc_engine := engine_siberite ;
14405: LD_ADDR_OWVAR 39
14409: PUSH
14410: LD_INT 3
14412: ST_TO_ADDR
// vc_control := control_apeman ;
14413: LD_ADDR_OWVAR 38
14417: PUSH
14418: LD_INT 5
14420: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14421: LD_ADDR_OWVAR 40
14425: PUSH
14426: LD_INT 29
14428: ST_TO_ADDR
// un := CreateVehicle ;
14429: LD_ADDR_VAR 0 2
14433: PUSH
14434: CALL_OW 45
14438: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14439: LD_VAR 0 2
14443: PPUSH
14444: LD_INT 1
14446: PPUSH
14447: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14451: LD_INT 35
14453: PPUSH
14454: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14458: LD_VAR 0 2
14462: PPUSH
14463: LD_INT 22
14465: PUSH
14466: LD_OWVAR 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 69
14479: PPUSH
14480: LD_VAR 0 2
14484: PPUSH
14485: CALL_OW 74
14489: PPUSH
14490: CALL_OW 115
// until IsDead ( un ) ;
14494: LD_VAR 0 2
14498: PPUSH
14499: CALL_OW 301
14503: IFFALSE 14451
// end ;
14505: PPOPN 2
14507: END
// every 0 0$1 trigger StreamModeActive and sStu do
14508: LD_EXP 27
14512: PUSH
14513: LD_EXP 66
14517: AND
14518: IFFALSE 14534
14520: GO 14522
14522: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14523: LD_STRING displayStucuk();
14525: PPUSH
14526: CALL_OW 559
// ResetFog ;
14530: CALL_OW 335
// end ;
14534: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14535: LD_EXP 27
14539: PUSH
14540: LD_EXP 59
14544: AND
14545: IFFALSE 14686
14547: GO 14549
14549: DISABLE
14550: LD_INT 0
14552: PPUSH
14553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14554: LD_ADDR_VAR 0 2
14558: PUSH
14559: LD_INT 22
14561: PUSH
14562: LD_OWVAR 2
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 21
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 69
14589: ST_TO_ADDR
// if not tmp then
14590: LD_VAR 0 2
14594: NOT
14595: IFFALSE 14599
// exit ;
14597: GO 14686
// un := tmp [ rand ( 1 , tmp ) ] ;
14599: LD_ADDR_VAR 0 1
14603: PUSH
14604: LD_VAR 0 2
14608: PUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_VAR 0 2
14616: PPUSH
14617: CALL_OW 12
14621: ARRAY
14622: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14623: LD_VAR 0 1
14627: PPUSH
14628: LD_INT 0
14630: PPUSH
14631: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14635: LD_VAR 0 1
14639: PPUSH
14640: LD_OWVAR 3
14644: PUSH
14645: LD_VAR 0 1
14649: DIFF
14650: PPUSH
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 74
14660: PPUSH
14661: CALL_OW 115
// wait ( 0 0$20 ) ;
14665: LD_INT 700
14667: PPUSH
14668: CALL_OW 67
// SetSide ( un , your_side ) ;
14672: LD_VAR 0 1
14676: PPUSH
14677: LD_OWVAR 2
14681: PPUSH
14682: CALL_OW 235
// end ;
14686: PPOPN 2
14688: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14689: LD_EXP 27
14693: PUSH
14694: LD_EXP 60
14698: AND
14699: IFFALSE 14805
14701: GO 14703
14703: DISABLE
14704: LD_INT 0
14706: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14707: LD_ADDR_VAR 0 1
14711: PUSH
14712: LD_INT 22
14714: PUSH
14715: LD_OWVAR 2
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 2
14726: PUSH
14727: LD_INT 30
14729: PUSH
14730: LD_INT 0
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 30
14739: PUSH
14740: LD_INT 1
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 69
14760: ST_TO_ADDR
// if not depot then
14761: LD_VAR 0 1
14765: NOT
14766: IFFALSE 14770
// exit ;
14768: GO 14805
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14770: LD_VAR 0 1
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PPUSH
14779: CALL_OW 250
14783: PPUSH
14784: LD_VAR 0 1
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: CALL_OW 251
14797: PPUSH
14798: LD_INT 70
14800: PPUSH
14801: CALL_OW 495
// end ;
14805: PPOPN 1
14807: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14808: LD_EXP 27
14812: PUSH
14813: LD_EXP 61
14817: AND
14818: IFFALSE 15029
14820: GO 14822
14822: DISABLE
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
14829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14830: LD_ADDR_VAR 0 5
14834: PUSH
14835: LD_INT 22
14837: PUSH
14838: LD_OWVAR 2
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PPUSH
14861: CALL_OW 69
14865: ST_TO_ADDR
// if not tmp then
14866: LD_VAR 0 5
14870: NOT
14871: IFFALSE 14875
// exit ;
14873: GO 15029
// for i in tmp do
14875: LD_ADDR_VAR 0 1
14879: PUSH
14880: LD_VAR 0 5
14884: PUSH
14885: FOR_IN
14886: IFFALSE 15027
// begin d := rand ( 0 , 5 ) ;
14888: LD_ADDR_VAR 0 4
14892: PUSH
14893: LD_INT 0
14895: PPUSH
14896: LD_INT 5
14898: PPUSH
14899: CALL_OW 12
14903: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14904: LD_ADDR_VAR 0 2
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 250
14918: PPUSH
14919: LD_VAR 0 4
14923: PPUSH
14924: LD_INT 3
14926: PPUSH
14927: LD_INT 12
14929: PPUSH
14930: CALL_OW 12
14934: PPUSH
14935: CALL_OW 272
14939: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14940: LD_ADDR_VAR 0 3
14944: PUSH
14945: LD_VAR 0 1
14949: PPUSH
14950: CALL_OW 251
14954: PPUSH
14955: LD_VAR 0 4
14959: PPUSH
14960: LD_INT 3
14962: PPUSH
14963: LD_INT 12
14965: PPUSH
14966: CALL_OW 12
14970: PPUSH
14971: CALL_OW 273
14975: ST_TO_ADDR
// if ValidHex ( x , y ) then
14976: LD_VAR 0 2
14980: PPUSH
14981: LD_VAR 0 3
14985: PPUSH
14986: CALL_OW 488
14990: IFFALSE 15025
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14992: LD_VAR 0 1
14996: PPUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: LD_VAR 0 3
15006: PPUSH
15007: LD_INT 3
15009: PPUSH
15010: LD_INT 6
15012: PPUSH
15013: CALL_OW 12
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: CALL_OW 483
// end ;
15025: GO 14885
15027: POP
15028: POP
// end ;
15029: PPOPN 5
15031: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15032: LD_EXP 27
15036: PUSH
15037: LD_EXP 62
15041: AND
15042: IFFALSE 15136
15044: GO 15046
15046: DISABLE
15047: LD_INT 0
15049: PPUSH
15050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15051: LD_ADDR_VAR 0 2
15055: PUSH
15056: LD_INT 22
15058: PUSH
15059: LD_OWVAR 2
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 32
15070: PUSH
15071: LD_INT 1
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 21
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 69
15097: ST_TO_ADDR
// if not tmp then
15098: LD_VAR 0 2
15102: NOT
15103: IFFALSE 15107
// exit ;
15105: GO 15136
// for i in tmp do
15107: LD_ADDR_VAR 0 1
15111: PUSH
15112: LD_VAR 0 2
15116: PUSH
15117: FOR_IN
15118: IFFALSE 15134
// SetFuel ( i , 0 ) ;
15120: LD_VAR 0 1
15124: PPUSH
15125: LD_INT 0
15127: PPUSH
15128: CALL_OW 240
15132: GO 15117
15134: POP
15135: POP
// end ;
15136: PPOPN 2
15138: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15139: LD_EXP 27
15143: PUSH
15144: LD_EXP 63
15148: AND
15149: IFFALSE 15215
15151: GO 15153
15153: DISABLE
15154: LD_INT 0
15156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15157: LD_ADDR_VAR 0 1
15161: PUSH
15162: LD_INT 22
15164: PUSH
15165: LD_OWVAR 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 30
15176: PUSH
15177: LD_INT 29
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if not tmp then
15193: LD_VAR 0 1
15197: NOT
15198: IFFALSE 15202
// exit ;
15200: GO 15215
// DestroyUnit ( tmp [ 1 ] ) ;
15202: LD_VAR 0 1
15206: PUSH
15207: LD_INT 1
15209: ARRAY
15210: PPUSH
15211: CALL_OW 65
// end ;
15215: PPOPN 1
15217: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15218: LD_EXP 27
15222: PUSH
15223: LD_EXP 65
15227: AND
15228: IFFALSE 15357
15230: GO 15232
15232: DISABLE
15233: LD_INT 0
15235: PPUSH
// begin uc_side := 0 ;
15236: LD_ADDR_OWVAR 20
15240: PUSH
15241: LD_INT 0
15243: ST_TO_ADDR
// uc_nation := nation_arabian ;
15244: LD_ADDR_OWVAR 21
15248: PUSH
15249: LD_INT 2
15251: ST_TO_ADDR
// hc_gallery :=  ;
15252: LD_ADDR_OWVAR 33
15256: PUSH
15257: LD_STRING 
15259: ST_TO_ADDR
// hc_name :=  ;
15260: LD_ADDR_OWVAR 26
15264: PUSH
15265: LD_STRING 
15267: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15268: LD_INT 1
15270: PPUSH
15271: LD_INT 11
15273: PPUSH
15274: LD_INT 10
15276: PPUSH
15277: CALL_OW 380
// un := CreateHuman ;
15281: LD_ADDR_VAR 0 1
15285: PUSH
15286: CALL_OW 44
15290: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15291: LD_VAR 0 1
15295: PPUSH
15296: LD_INT 1
15298: PPUSH
15299: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15303: LD_INT 35
15305: PPUSH
15306: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15310: LD_VAR 0 1
15314: PPUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 74
15341: PPUSH
15342: CALL_OW 115
// until IsDead ( un ) ;
15346: LD_VAR 0 1
15350: PPUSH
15351: CALL_OW 301
15355: IFFALSE 15303
// end ;
15357: PPOPN 1
15359: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15360: LD_EXP 27
15364: PUSH
15365: LD_EXP 67
15369: AND
15370: IFFALSE 15382
15372: GO 15374
15374: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15375: LD_STRING earthquake(getX(game), 0, 32)
15377: PPUSH
15378: CALL_OW 559
15382: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15383: LD_EXP 27
15387: PUSH
15388: LD_EXP 68
15392: AND
15393: IFFALSE 15484
15395: GO 15397
15397: DISABLE
15398: LD_INT 0
15400: PPUSH
// begin enable ;
15401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15402: LD_ADDR_VAR 0 1
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_OWVAR 2
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 21
15421: PUSH
15422: LD_INT 2
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 33
15431: PUSH
15432: LD_INT 3
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: ST_TO_ADDR
// if not tmp then
15449: LD_VAR 0 1
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 15484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15458: LD_VAR 0 1
15462: PUSH
15463: LD_INT 1
15465: PPUSH
15466: LD_VAR 0 1
15470: PPUSH
15471: CALL_OW 12
15475: ARRAY
15476: PPUSH
15477: LD_INT 1
15479: PPUSH
15480: CALL_OW 234
// end ;
15484: PPOPN 1
15486: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15487: LD_EXP 27
15491: PUSH
15492: LD_EXP 69
15496: AND
15497: IFFALSE 15638
15499: GO 15501
15501: DISABLE
15502: LD_INT 0
15504: PPUSH
15505: PPUSH
15506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15507: LD_ADDR_VAR 0 3
15511: PUSH
15512: LD_INT 22
15514: PUSH
15515: LD_OWVAR 2
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 25
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 69
15542: ST_TO_ADDR
// if not tmp then
15543: LD_VAR 0 3
15547: NOT
15548: IFFALSE 15552
// exit ;
15550: GO 15638
// un := tmp [ rand ( 1 , tmp ) ] ;
15552: LD_ADDR_VAR 0 2
15556: PUSH
15557: LD_VAR 0 3
15561: PUSH
15562: LD_INT 1
15564: PPUSH
15565: LD_VAR 0 3
15569: PPUSH
15570: CALL_OW 12
15574: ARRAY
15575: ST_TO_ADDR
// if Crawls ( un ) then
15576: LD_VAR 0 2
15580: PPUSH
15581: CALL_OW 318
15585: IFFALSE 15596
// ComWalk ( un ) ;
15587: LD_VAR 0 2
15591: PPUSH
15592: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15596: LD_VAR 0 2
15600: PPUSH
15601: LD_INT 9
15603: PPUSH
15604: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15608: LD_INT 28
15610: PPUSH
15611: LD_OWVAR 2
15615: PPUSH
15616: LD_INT 2
15618: PPUSH
15619: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15623: LD_INT 29
15625: PPUSH
15626: LD_OWVAR 2
15630: PPUSH
15631: LD_INT 2
15633: PPUSH
15634: CALL_OW 322
// end ;
15638: PPOPN 3
15640: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15641: LD_EXP 27
15645: PUSH
15646: LD_EXP 70
15650: AND
15651: IFFALSE 15762
15653: GO 15655
15655: DISABLE
15656: LD_INT 0
15658: PPUSH
15659: PPUSH
15660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15661: LD_ADDR_VAR 0 3
15665: PUSH
15666: LD_INT 22
15668: PUSH
15669: LD_OWVAR 2
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 25
15680: PUSH
15681: LD_INT 1
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PPUSH
15692: CALL_OW 69
15696: ST_TO_ADDR
// if not tmp then
15697: LD_VAR 0 3
15701: NOT
15702: IFFALSE 15706
// exit ;
15704: GO 15762
// un := tmp [ rand ( 1 , tmp ) ] ;
15706: LD_ADDR_VAR 0 2
15710: PUSH
15711: LD_VAR 0 3
15715: PUSH
15716: LD_INT 1
15718: PPUSH
15719: LD_VAR 0 3
15723: PPUSH
15724: CALL_OW 12
15728: ARRAY
15729: ST_TO_ADDR
// if Crawls ( un ) then
15730: LD_VAR 0 2
15734: PPUSH
15735: CALL_OW 318
15739: IFFALSE 15750
// ComWalk ( un ) ;
15741: LD_VAR 0 2
15745: PPUSH
15746: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15750: LD_VAR 0 2
15754: PPUSH
15755: LD_INT 8
15757: PPUSH
15758: CALL_OW 336
// end ;
15762: PPOPN 3
15764: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15765: LD_EXP 27
15769: PUSH
15770: LD_EXP 71
15774: AND
15775: IFFALSE 15919
15777: GO 15779
15779: DISABLE
15780: LD_INT 0
15782: PPUSH
15783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15784: LD_ADDR_VAR 0 2
15788: PUSH
15789: LD_INT 22
15791: PUSH
15792: LD_OWVAR 2
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 21
15803: PUSH
15804: LD_INT 2
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 2
15813: PUSH
15814: LD_INT 34
15816: PUSH
15817: LD_INT 12
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 34
15826: PUSH
15827: LD_INT 51
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 34
15836: PUSH
15837: LD_INT 32
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: ST_TO_ADDR
// if not tmp then
15860: LD_VAR 0 2
15864: NOT
15865: IFFALSE 15869
// exit ;
15867: GO 15919
// for i in tmp do
15869: LD_ADDR_VAR 0 1
15873: PUSH
15874: LD_VAR 0 2
15878: PUSH
15879: FOR_IN
15880: IFFALSE 15917
// if GetCargo ( i , mat_artifact ) = 0 then
15882: LD_VAR 0 1
15886: PPUSH
15887: LD_INT 4
15889: PPUSH
15890: CALL_OW 289
15894: PUSH
15895: LD_INT 0
15897: EQUAL
15898: IFFALSE 15915
// SetCargo ( i , mat_siberit , 100 ) ;
15900: LD_VAR 0 1
15904: PPUSH
15905: LD_INT 3
15907: PPUSH
15908: LD_INT 100
15910: PPUSH
15911: CALL_OW 290
15915: GO 15879
15917: POP
15918: POP
// end ;
15919: PPOPN 2
15921: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15922: LD_EXP 27
15926: PUSH
15927: LD_EXP 72
15931: AND
15932: IFFALSE 16085
15934: GO 15936
15936: DISABLE
15937: LD_INT 0
15939: PPUSH
15940: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15941: LD_ADDR_VAR 0 2
15945: PUSH
15946: LD_INT 22
15948: PUSH
15949: LD_OWVAR 2
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PPUSH
15958: CALL_OW 69
15962: ST_TO_ADDR
// if not tmp then
15963: LD_VAR 0 2
15967: NOT
15968: IFFALSE 15972
// exit ;
15970: GO 16085
// for i := 1 to 2 do
15972: LD_ADDR_VAR 0 1
15976: PUSH
15977: DOUBLE
15978: LD_INT 1
15980: DEC
15981: ST_TO_ADDR
15982: LD_INT 2
15984: PUSH
15985: FOR_TO
15986: IFFALSE 16083
// begin uc_side := your_side ;
15988: LD_ADDR_OWVAR 20
15992: PUSH
15993: LD_OWVAR 2
15997: ST_TO_ADDR
// uc_nation := nation_american ;
15998: LD_ADDR_OWVAR 21
16002: PUSH
16003: LD_INT 1
16005: ST_TO_ADDR
// vc_chassis := us_morphling ;
16006: LD_ADDR_OWVAR 37
16010: PUSH
16011: LD_INT 5
16013: ST_TO_ADDR
// vc_engine := engine_siberite ;
16014: LD_ADDR_OWVAR 39
16018: PUSH
16019: LD_INT 3
16021: ST_TO_ADDR
// vc_control := control_computer ;
16022: LD_ADDR_OWVAR 38
16026: PUSH
16027: LD_INT 3
16029: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16030: LD_ADDR_OWVAR 40
16034: PUSH
16035: LD_INT 10
16037: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
16038: CALL_OW 45
16042: PPUSH
16043: LD_VAR 0 2
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: PPUSH
16052: CALL_OW 250
16056: PPUSH
16057: LD_VAR 0 2
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: CALL_OW 251
16070: PPUSH
16071: LD_INT 12
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 50
// end ;
16081: GO 15985
16083: POP
16084: POP
// end ;
16085: PPOPN 2
16087: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16088: LD_EXP 27
16092: PUSH
16093: LD_EXP 73
16097: AND
16098: IFFALSE 16320
16100: GO 16102
16102: DISABLE
16103: LD_INT 0
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16111: LD_ADDR_VAR 0 6
16115: PUSH
16116: LD_INT 22
16118: PUSH
16119: LD_OWVAR 2
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 21
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 3
16140: PUSH
16141: LD_INT 23
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: LIST
16159: PPUSH
16160: CALL_OW 69
16164: ST_TO_ADDR
// if not tmp then
16165: LD_VAR 0 6
16169: NOT
16170: IFFALSE 16174
// exit ;
16172: GO 16320
// s1 := rand ( 1 , 4 ) ;
16174: LD_ADDR_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PPUSH
16182: LD_INT 4
16184: PPUSH
16185: CALL_OW 12
16189: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16190: LD_ADDR_VAR 0 4
16194: PUSH
16195: LD_VAR 0 6
16199: PUSH
16200: LD_INT 1
16202: ARRAY
16203: PPUSH
16204: LD_VAR 0 2
16208: PPUSH
16209: CALL_OW 259
16213: ST_TO_ADDR
// if s1 = 1 then
16214: LD_VAR 0 2
16218: PUSH
16219: LD_INT 1
16221: EQUAL
16222: IFFALSE 16242
// s2 := rand ( 2 , 4 ) else
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: LD_INT 2
16231: PPUSH
16232: LD_INT 4
16234: PPUSH
16235: CALL_OW 12
16239: ST_TO_ADDR
16240: GO 16250
// s2 := 1 ;
16242: LD_ADDR_VAR 0 3
16246: PUSH
16247: LD_INT 1
16249: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16250: LD_ADDR_VAR 0 5
16254: PUSH
16255: LD_VAR 0 6
16259: PUSH
16260: LD_INT 1
16262: ARRAY
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: CALL_OW 259
16273: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16274: LD_VAR 0 6
16278: PUSH
16279: LD_INT 1
16281: ARRAY
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: LD_VAR 0 5
16292: PPUSH
16293: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16297: LD_VAR 0 6
16301: PUSH
16302: LD_INT 1
16304: ARRAY
16305: PPUSH
16306: LD_VAR 0 3
16310: PPUSH
16311: LD_VAR 0 4
16315: PPUSH
16316: CALL_OW 237
// end ;
16320: PPOPN 6
16322: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16323: LD_EXP 27
16327: PUSH
16328: LD_EXP 74
16332: AND
16333: IFFALSE 16412
16335: GO 16337
16337: DISABLE
16338: LD_INT 0
16340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16341: LD_ADDR_VAR 0 1
16345: PUSH
16346: LD_INT 22
16348: PUSH
16349: LD_OWVAR 2
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 30
16360: PUSH
16361: LD_INT 3
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PPUSH
16372: CALL_OW 69
16376: ST_TO_ADDR
// if not tmp then
16377: LD_VAR 0 1
16381: NOT
16382: IFFALSE 16386
// exit ;
16384: GO 16412
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16386: LD_VAR 0 1
16390: PUSH
16391: LD_INT 1
16393: PPUSH
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 12
16403: ARRAY
16404: PPUSH
16405: LD_INT 1
16407: PPUSH
16408: CALL_OW 234
// end ;
16412: PPOPN 1
16414: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16415: LD_EXP 27
16419: PUSH
16420: LD_EXP 75
16424: AND
16425: IFFALSE 16537
16427: GO 16429
16429: DISABLE
16430: LD_INT 0
16432: PPUSH
16433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16434: LD_ADDR_VAR 0 2
16438: PUSH
16439: LD_INT 22
16441: PUSH
16442: LD_OWVAR 2
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 2
16453: PUSH
16454: LD_INT 30
16456: PUSH
16457: LD_INT 27
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 30
16466: PUSH
16467: LD_INT 26
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 30
16476: PUSH
16477: LD_INT 28
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 69
16498: ST_TO_ADDR
// if not tmp then
16499: LD_VAR 0 2
16503: NOT
16504: IFFALSE 16508
// exit ;
16506: GO 16537
// for i in tmp do
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: LD_VAR 0 2
16517: PUSH
16518: FOR_IN
16519: IFFALSE 16535
// SetLives ( i , 1 ) ;
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_INT 1
16528: PPUSH
16529: CALL_OW 234
16533: GO 16518
16535: POP
16536: POP
// end ;
16537: PPOPN 2
16539: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16540: LD_EXP 27
16544: PUSH
16545: LD_EXP 76
16549: AND
16550: IFFALSE 16824
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
16559: PPUSH
// begin i := rand ( 1 , 7 ) ;
16560: LD_ADDR_VAR 0 1
16564: PUSH
16565: LD_INT 1
16567: PPUSH
16568: LD_INT 7
16570: PPUSH
16571: CALL_OW 12
16575: ST_TO_ADDR
// case i of 1 :
16576: LD_VAR 0 1
16580: PUSH
16581: LD_INT 1
16583: DOUBLE
16584: EQUAL
16585: IFTRUE 16589
16587: GO 16599
16589: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16590: LD_STRING earthquake(getX(game), 0, 32)
16592: PPUSH
16593: CALL_OW 559
16597: GO 16824
16599: LD_INT 2
16601: DOUBLE
16602: EQUAL
16603: IFTRUE 16607
16605: GO 16621
16607: POP
// begin ToLua ( displayStucuk(); ) ;
16608: LD_STRING displayStucuk();
16610: PPUSH
16611: CALL_OW 559
// ResetFog ;
16615: CALL_OW 335
// end ; 3 :
16619: GO 16824
16621: LD_INT 3
16623: DOUBLE
16624: EQUAL
16625: IFTRUE 16629
16627: GO 16733
16629: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16630: LD_ADDR_VAR 0 2
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_OWVAR 2
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 25
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PPUSH
16661: CALL_OW 69
16665: ST_TO_ADDR
// if not tmp then
16666: LD_VAR 0 2
16670: NOT
16671: IFFALSE 16675
// exit ;
16673: GO 16824
// un := tmp [ rand ( 1 , tmp ) ] ;
16675: LD_ADDR_VAR 0 3
16679: PUSH
16680: LD_VAR 0 2
16684: PUSH
16685: LD_INT 1
16687: PPUSH
16688: LD_VAR 0 2
16692: PPUSH
16693: CALL_OW 12
16697: ARRAY
16698: ST_TO_ADDR
// if Crawls ( un ) then
16699: LD_VAR 0 3
16703: PPUSH
16704: CALL_OW 318
16708: IFFALSE 16719
// ComWalk ( un ) ;
16710: LD_VAR 0 3
16714: PPUSH
16715: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16719: LD_VAR 0 3
16723: PPUSH
16724: LD_INT 8
16726: PPUSH
16727: CALL_OW 336
// end ; 4 :
16731: GO 16824
16733: LD_INT 4
16735: DOUBLE
16736: EQUAL
16737: IFTRUE 16741
16739: GO 16802
16741: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16742: LD_ADDR_VAR 0 2
16746: PUSH
16747: LD_INT 22
16749: PUSH
16750: LD_OWVAR 2
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 30
16761: PUSH
16762: LD_INT 29
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PPUSH
16773: CALL_OW 69
16777: ST_TO_ADDR
// if not tmp then
16778: LD_VAR 0 2
16782: NOT
16783: IFFALSE 16787
// exit ;
16785: GO 16824
// DestroyUnit ( tmp [ 1 ] ) ;
16787: LD_VAR 0 2
16791: PUSH
16792: LD_INT 1
16794: ARRAY
16795: PPUSH
16796: CALL_OW 65
// end ; 5 .. 7 :
16800: GO 16824
16802: LD_INT 5
16804: DOUBLE
16805: GREATEREQUAL
16806: IFFALSE 16814
16808: LD_INT 7
16810: DOUBLE
16811: LESSEQUAL
16812: IFTRUE 16816
16814: GO 16823
16816: POP
// StreamSibBomb ; end ;
16817: CALL 13104 0 0
16821: GO 16824
16823: POP
// end ;
16824: PPOPN 3
16826: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16827: LD_EXP 27
16831: PUSH
16832: LD_EXP 77
16836: AND
16837: IFFALSE 16993
16839: GO 16841
16841: DISABLE
16842: LD_INT 0
16844: PPUSH
16845: PPUSH
16846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16847: LD_ADDR_VAR 0 2
16851: PUSH
16852: LD_INT 81
16854: PUSH
16855: LD_OWVAR 2
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: LD_INT 1
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 21
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PPUSH
16896: CALL_OW 69
16900: ST_TO_ADDR
// if not tmp then
16901: LD_VAR 0 2
16905: NOT
16906: IFFALSE 16910
// exit ;
16908: GO 16993
// p := 0 ;
16910: LD_ADDR_VAR 0 3
16914: PUSH
16915: LD_INT 0
16917: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16918: LD_INT 35
16920: PPUSH
16921: CALL_OW 67
// p := p + 1 ;
16925: LD_ADDR_VAR 0 3
16929: PUSH
16930: LD_VAR 0 3
16934: PUSH
16935: LD_INT 1
16937: PLUS
16938: ST_TO_ADDR
// for i in tmp do
16939: LD_ADDR_VAR 0 1
16943: PUSH
16944: LD_VAR 0 2
16948: PUSH
16949: FOR_IN
16950: IFFALSE 16981
// if GetLives ( i ) < 1000 then
16952: LD_VAR 0 1
16956: PPUSH
16957: CALL_OW 256
16961: PUSH
16962: LD_INT 1000
16964: LESS
16965: IFFALSE 16979
// SetLives ( i , 1000 ) ;
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_INT 1000
16974: PPUSH
16975: CALL_OW 234
16979: GO 16949
16981: POP
16982: POP
// until p > 20 ;
16983: LD_VAR 0 3
16987: PUSH
16988: LD_INT 20
16990: GREATER
16991: IFFALSE 16918
// end ;
16993: PPOPN 3
16995: END
// every 0 0$1 trigger StreamModeActive and sTime do
16996: LD_EXP 27
17000: PUSH
17001: LD_EXP 78
17005: AND
17006: IFFALSE 17041
17008: GO 17010
17010: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17011: LD_INT 28
17013: PPUSH
17014: LD_OWVAR 2
17018: PPUSH
17019: LD_INT 2
17021: PPUSH
17022: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17026: LD_INT 30
17028: PPUSH
17029: LD_OWVAR 2
17033: PPUSH
17034: LD_INT 2
17036: PPUSH
17037: CALL_OW 322
// end ;
17041: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17042: LD_EXP 27
17046: PUSH
17047: LD_EXP 79
17051: AND
17052: IFFALSE 17173
17054: GO 17056
17056: DISABLE
17057: LD_INT 0
17059: PPUSH
17060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_OWVAR 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 21
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 3
17090: PUSH
17091: LD_INT 23
17093: PUSH
17094: LD_INT 0
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: ST_TO_ADDR
// if not tmp then
17115: LD_VAR 0 2
17119: NOT
17120: IFFALSE 17124
// exit ;
17122: GO 17173
// for i in tmp do
17124: LD_ADDR_VAR 0 1
17128: PUSH
17129: LD_VAR 0 2
17133: PUSH
17134: FOR_IN
17135: IFFALSE 17171
// begin if Crawls ( i ) then
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 318
17146: IFFALSE 17157
// ComWalk ( i ) ;
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 138
// SetClass ( i , 2 ) ;
17157: LD_VAR 0 1
17161: PPUSH
17162: LD_INT 2
17164: PPUSH
17165: CALL_OW 336
// end ;
17169: GO 17134
17171: POP
17172: POP
// end ;
17173: PPOPN 2
17175: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17176: LD_EXP 27
17180: PUSH
17181: LD_EXP 80
17185: AND
17186: IFFALSE 17467
17188: GO 17190
17190: DISABLE
17191: LD_INT 0
17193: PPUSH
17194: PPUSH
17195: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17196: LD_OWVAR 2
17200: PPUSH
17201: LD_INT 9
17203: PPUSH
17204: LD_INT 1
17206: PPUSH
17207: LD_INT 1
17209: PPUSH
17210: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17214: LD_INT 9
17216: PPUSH
17217: LD_OWVAR 2
17221: PPUSH
17222: CALL_OW 343
// uc_side := 9 ;
17226: LD_ADDR_OWVAR 20
17230: PUSH
17231: LD_INT 9
17233: ST_TO_ADDR
// uc_nation := 2 ;
17234: LD_ADDR_OWVAR 21
17238: PUSH
17239: LD_INT 2
17241: ST_TO_ADDR
// hc_name := Dark Warrior ;
17242: LD_ADDR_OWVAR 26
17246: PUSH
17247: LD_STRING Dark Warrior
17249: ST_TO_ADDR
// hc_gallery :=  ;
17250: LD_ADDR_OWVAR 33
17254: PUSH
17255: LD_STRING 
17257: ST_TO_ADDR
// hc_noskilllimit := true ;
17258: LD_ADDR_OWVAR 76
17262: PUSH
17263: LD_INT 1
17265: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17266: LD_ADDR_OWVAR 31
17270: PUSH
17271: LD_INT 30
17273: PUSH
17274: LD_INT 30
17276: PUSH
17277: LD_INT 30
17279: PUSH
17280: LD_INT 30
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: ST_TO_ADDR
// un := CreateHuman ;
17289: LD_ADDR_VAR 0 3
17293: PUSH
17294: CALL_OW 44
17298: ST_TO_ADDR
// hc_noskilllimit := false ;
17299: LD_ADDR_OWVAR 76
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17307: LD_VAR 0 3
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 51
// p := 0 ;
17319: LD_ADDR_VAR 0 2
17323: PUSH
17324: LD_INT 0
17326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17327: LD_INT 35
17329: PPUSH
17330: CALL_OW 67
// p := p + 1 ;
17334: LD_ADDR_VAR 0 2
17338: PUSH
17339: LD_VAR 0 2
17343: PUSH
17344: LD_INT 1
17346: PLUS
17347: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17348: LD_VAR 0 3
17352: PPUSH
17353: CALL_OW 256
17357: PUSH
17358: LD_INT 1000
17360: LESS
17361: IFFALSE 17375
// SetLives ( un , 1000 ) ;
17363: LD_VAR 0 3
17367: PPUSH
17368: LD_INT 1000
17370: PPUSH
17371: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17375: LD_VAR 0 3
17379: PPUSH
17380: LD_INT 81
17382: PUSH
17383: LD_OWVAR 2
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 91
17394: PUSH
17395: LD_VAR 0 3
17399: PUSH
17400: LD_INT 30
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PPUSH
17412: CALL_OW 69
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: CALL_OW 74
17426: PPUSH
17427: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17431: LD_VAR 0 2
17435: PUSH
17436: LD_INT 60
17438: GREATER
17439: PUSH
17440: LD_VAR 0 3
17444: PPUSH
17445: CALL_OW 301
17449: OR
17450: IFFALSE 17327
// if un then
17452: LD_VAR 0 3
17456: IFFALSE 17467
// RemoveUnit ( un ) ;
17458: LD_VAR 0 3
17462: PPUSH
17463: CALL_OW 64
// end ; end_of_file
17467: PPOPN 3
17469: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17470: LD_INT 0
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 264
17485: PUSH
17486: LD_EXP 85
17490: EQUAL
17491: IFFALSE 17563
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17493: LD_INT 68
17495: PPUSH
17496: LD_VAR 0 1
17500: PPUSH
17501: CALL_OW 255
17505: PPUSH
17506: CALL_OW 321
17510: PUSH
17511: LD_INT 2
17513: EQUAL
17514: IFFALSE 17526
// eff := 70 else
17516: LD_ADDR_VAR 0 4
17520: PUSH
17521: LD_INT 70
17523: ST_TO_ADDR
17524: GO 17534
// eff := 30 ;
17526: LD_ADDR_VAR 0 4
17530: PUSH
17531: LD_INT 30
17533: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 250
17543: PPUSH
17544: LD_VAR 0 1
17548: PPUSH
17549: CALL_OW 251
17553: PPUSH
17554: LD_VAR 0 4
17558: PPUSH
17559: CALL_OW 495
// end ; end ;
17563: LD_VAR 0 2
17567: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17568: LD_INT 0
17570: PPUSH
// end ;
17571: LD_VAR 0 4
17575: RET
// export function SOS_Command ( cmd ) ; begin
17576: LD_INT 0
17578: PPUSH
// end ;
17579: LD_VAR 0 2
17583: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17584: LD_VAR 0 1
17588: PUSH
17589: LD_INT 255
17591: EQUAL
17592: PUSH
17593: LD_VAR 0 2
17597: PPUSH
17598: CALL_OW 264
17602: PUSH
17603: LD_INT 14
17605: PUSH
17606: LD_INT 53
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: IN
17613: AND
17614: PUSH
17615: LD_VAR 0 4
17619: PPUSH
17620: LD_VAR 0 5
17624: PPUSH
17625: CALL_OW 488
17629: AND
17630: IFFALSE 17654
// CutTreeXYR ( unit , x , y , 12 ) ;
17632: LD_VAR 0 2
17636: PPUSH
17637: LD_VAR 0 4
17641: PPUSH
17642: LD_VAR 0 5
17646: PPUSH
17647: LD_INT 12
17649: PPUSH
17650: CALL 17657 0 4
// end ;
17654: PPOPN 5
17656: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17657: LD_INT 0
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17668: LD_VAR 0 1
17672: NOT
17673: PUSH
17674: LD_VAR 0 2
17678: PPUSH
17679: LD_VAR 0 3
17683: PPUSH
17684: CALL_OW 488
17688: NOT
17689: OR
17690: PUSH
17691: LD_VAR 0 4
17695: NOT
17696: OR
17697: IFFALSE 17701
// exit ;
17699: GO 18041
// list := [ ] ;
17701: LD_ADDR_VAR 0 13
17705: PUSH
17706: EMPTY
17707: ST_TO_ADDR
// if x - r < 0 then
17708: LD_VAR 0 2
17712: PUSH
17713: LD_VAR 0 4
17717: MINUS
17718: PUSH
17719: LD_INT 0
17721: LESS
17722: IFFALSE 17734
// min_x := 0 else
17724: LD_ADDR_VAR 0 7
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
17732: GO 17750
// min_x := x - r ;
17734: LD_ADDR_VAR 0 7
17738: PUSH
17739: LD_VAR 0 2
17743: PUSH
17744: LD_VAR 0 4
17748: MINUS
17749: ST_TO_ADDR
// if y - r < 0 then
17750: LD_VAR 0 3
17754: PUSH
17755: LD_VAR 0 4
17759: MINUS
17760: PUSH
17761: LD_INT 0
17763: LESS
17764: IFFALSE 17776
// min_y := 0 else
17766: LD_ADDR_VAR 0 8
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
17774: GO 17792
// min_y := y - r ;
17776: LD_ADDR_VAR 0 8
17780: PUSH
17781: LD_VAR 0 3
17785: PUSH
17786: LD_VAR 0 4
17790: MINUS
17791: ST_TO_ADDR
// max_x := x + r ;
17792: LD_ADDR_VAR 0 9
17796: PUSH
17797: LD_VAR 0 2
17801: PUSH
17802: LD_VAR 0 4
17806: PLUS
17807: ST_TO_ADDR
// max_y := y + r ;
17808: LD_ADDR_VAR 0 10
17812: PUSH
17813: LD_VAR 0 3
17817: PUSH
17818: LD_VAR 0 4
17822: PLUS
17823: ST_TO_ADDR
// for _x = min_x to max_x do
17824: LD_ADDR_VAR 0 11
17828: PUSH
17829: DOUBLE
17830: LD_VAR 0 7
17834: DEC
17835: ST_TO_ADDR
17836: LD_VAR 0 9
17840: PUSH
17841: FOR_TO
17842: IFFALSE 17959
// for _y = min_y to max_y do
17844: LD_ADDR_VAR 0 12
17848: PUSH
17849: DOUBLE
17850: LD_VAR 0 8
17854: DEC
17855: ST_TO_ADDR
17856: LD_VAR 0 10
17860: PUSH
17861: FOR_TO
17862: IFFALSE 17955
// begin if not ValidHex ( _x , _y ) then
17864: LD_VAR 0 11
17868: PPUSH
17869: LD_VAR 0 12
17873: PPUSH
17874: CALL_OW 488
17878: NOT
17879: IFFALSE 17883
// continue ;
17881: GO 17861
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17883: LD_VAR 0 11
17887: PPUSH
17888: LD_VAR 0 12
17892: PPUSH
17893: CALL_OW 351
17897: PUSH
17898: LD_VAR 0 11
17902: PPUSH
17903: LD_VAR 0 12
17907: PPUSH
17908: CALL_OW 554
17912: AND
17913: IFFALSE 17953
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17915: LD_ADDR_VAR 0 13
17919: PUSH
17920: LD_VAR 0 13
17924: PPUSH
17925: LD_VAR 0 13
17929: PUSH
17930: LD_INT 1
17932: PLUS
17933: PPUSH
17934: LD_VAR 0 11
17938: PUSH
17939: LD_VAR 0 12
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PPUSH
17948: CALL_OW 2
17952: ST_TO_ADDR
// end ;
17953: GO 17861
17955: POP
17956: POP
17957: GO 17841
17959: POP
17960: POP
// if not list then
17961: LD_VAR 0 13
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 18041
// for i in list do
17970: LD_ADDR_VAR 0 6
17974: PUSH
17975: LD_VAR 0 13
17979: PUSH
17980: FOR_IN
17981: IFFALSE 18039
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17983: LD_VAR 0 1
17987: PPUSH
17988: LD_STRING M
17990: PUSH
17991: LD_VAR 0 6
17995: PUSH
17996: LD_INT 1
17998: ARRAY
17999: PUSH
18000: LD_VAR 0 6
18004: PUSH
18005: LD_INT 2
18007: ARRAY
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: LD_INT 0
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: PPUSH
18033: CALL_OW 447
18037: GO 17980
18039: POP
18040: POP
// end ; end_of_file
18041: LD_VAR 0 5
18045: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
18046: GO 18048
18048: DISABLE
// begin ru_radar := 98 ;
18049: LD_ADDR_EXP 81
18053: PUSH
18054: LD_INT 98
18056: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18057: LD_ADDR_EXP 82
18061: PUSH
18062: LD_INT 89
18064: ST_TO_ADDR
// us_hack := 99 ;
18065: LD_ADDR_EXP 83
18069: PUSH
18070: LD_INT 99
18072: ST_TO_ADDR
// us_artillery := 97 ;
18073: LD_ADDR_EXP 84
18077: PUSH
18078: LD_INT 97
18080: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18081: LD_ADDR_EXP 85
18085: PUSH
18086: LD_INT 91
18088: ST_TO_ADDR
// tech_Artillery := 80 ;
18089: LD_ADDR_EXP 86
18093: PUSH
18094: LD_INT 80
18096: ST_TO_ADDR
// tech_RadMat := 81 ;
18097: LD_ADDR_EXP 87
18101: PUSH
18102: LD_INT 81
18104: ST_TO_ADDR
// tech_BasicTools := 82 ;
18105: LD_ADDR_EXP 88
18109: PUSH
18110: LD_INT 82
18112: ST_TO_ADDR
// tech_Cargo := 83 ;
18113: LD_ADDR_EXP 89
18117: PUSH
18118: LD_INT 83
18120: ST_TO_ADDR
// tech_Track := 84 ;
18121: LD_ADDR_EXP 90
18125: PUSH
18126: LD_INT 84
18128: ST_TO_ADDR
// tech_Crane := 85 ;
18129: LD_ADDR_EXP 91
18133: PUSH
18134: LD_INT 85
18136: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18137: LD_ADDR_EXP 92
18141: PUSH
18142: LD_INT 86
18144: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18145: LD_ADDR_EXP 93
18149: PUSH
18150: LD_INT 87
18152: ST_TO_ADDR
// end ;
18153: END
