// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 32 0 0
// InitAmerican ;
  15: CALL 870 0 0
// InitRussian ;
  19: CALL 1141 0 0
// DebugMode ;
  23: CALL 160 0 0
// Action ;
  27: CALL 3021 0 0
// end ;
  31: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest , active_powell_dialog ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// mission_prefix := 01_ ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: LD_STRING 01_
  42: ST_TO_ADDR
// debug := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// active_russian_dialog := false ;
  51: LD_ADDR_EXP 3
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// bobby_in_squad := false ;
  59: LD_ADDR_EXP 4
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// cyrus_in_squad := false ;
  67: LD_ADDR_EXP 7
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// powell_contact := false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// macmilan_use_radio := false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// active_road_patrol := false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// macmilan_in_trap := false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// meta_action := false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// end_mission := false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// bobby_saved := false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// cyrus_saved := false ;
 131: LD_ADDR_EXP 13
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// send_troops_to_forest := false ;
 139: LD_ADDR_EXP 14
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// active_powell_dialog := false ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 1
 159: RET
// function DebugMode ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not debug then
 164: LD_EXP 1
 168: NOT
 169: IFFALSE 173
// exit ;
 171: GO 192
// Difficulty := 4 ;
 173: LD_ADDR_OWVAR 67
 177: PUSH
 178: LD_INT 4
 180: ST_TO_ADDR
// TurnFogOff ( ) ;
 181: CALL_OW 537
// FogOff ( 1 ) ;
 185: LD_INT 1
 187: PPUSH
 188: CALL_OW 344
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
// uc_side := GetSide ( b ) ;
 202: LD_ADDR_OWVAR 20
 206: PUSH
 207: LD_VAR 0 2
 211: PPUSH
 212: CALL_OW 255
 216: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: PPUSH
 227: CALL_OW 248
 231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 232: LD_INT 0
 234: PPUSH
 235: LD_INT 1
 237: PPUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 247: LD_ADDR_VAR 0 5
 251: PUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 254
 261: PUSH
 262: LD_INT 3
 264: MINUS
 265: ST_TO_ADDR
// if dir < 0 then
 266: LD_VAR 0 5
 270: PUSH
 271: LD_INT 0
 273: LESS
 274: IFFALSE 290
// dir := 6 + dir ;
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_INT 6
 283: PUSH
 284: LD_VAR 0 5
 288: PLUS
 289: ST_TO_ADDR
// un := CreateHuman ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: CALL_OW 44
 299: ST_TO_ADDR
// SetDir ( un , dir ) ;
 300: LD_VAR 0 4
 304: PPUSH
 305: LD_VAR 0 5
 309: PPUSH
 310: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 314: LD_VAR 0 4
 318: PPUSH
 319: LD_VAR 0 2
 323: PPUSH
 324: CALL_OW 52
// end ;
 328: LD_VAR 0 3
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// while ( active_road_patrol ) do
 425: LD_EXP 8
 429: IFFALSE 787
// begin Wait ( 0 0$01 ) ;
 431: LD_INT 35
 433: PPUSH
 434: CALL_OW 67
// if not unit then
 438: LD_VAR 0 1
 442: NOT
 443: IFFALSE 447
// exit ;
 445: GO 787
// if mode = road then
 447: LD_VAR 0 2
 451: PUSH
 452: LD_STRING road
 454: EQUAL
 455: IFFALSE 515
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 261
 466: PUSH
 467: LD_INT 50
 469: LESS
 470: IFFALSE 487
 472: PUSH
 473: LD_INT 1
 475: PPUSH
 476: LD_VAR 0 1
 480: PPUSH
 481: CALL_OW 292
 485: NOT
 486: AND
 487: IFFALSE 501
 489: PUSH
 490: LD_VAR 0 1
 494: PPUSH
 495: CALL_OW 314
 499: NOT
 500: AND
 501: IFFALSE 515
// SetFuel ( unit , 100 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: LD_INT 100
 510: PPUSH
 511: CALL_OW 240
// if mode = forest then
 515: LD_VAR 0 2
 519: PUSH
 520: LD_STRING forest
 522: EQUAL
 523: IFFALSE 603
// if GetLives ( unit ) < 600 then
 525: LD_VAR 0 1
 529: PPUSH
 530: CALL_OW 256
 534: PUSH
 535: LD_INT 600
 537: LESS
 538: IFFALSE 603
// begin ComMoveXY ( unit , 42 , 3 ) ;
 540: LD_VAR 0 1
 544: PPUSH
 545: LD_INT 42
 547: PPUSH
 548: LD_INT 3
 550: PPUSH
 551: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 250
 569: PPUSH
 570: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 574: LD_VAR 0 1
 578: PPUSH
 579: LD_VAR 0 1
 583: PPUSH
 584: CALL_OW 251
 588: PPUSH
 589: CALL_OW 232
// send_troops_to_forest := true ;
 593: LD_ADDR_EXP 14
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// break ;
 601: GO 787
// end ; if not HasTask ( unit ) then
 603: LD_VAR 0 1
 607: PPUSH
 608: CALL_OW 314
 612: NOT
 613: IFFALSE 785
// begin for i = 1 to coords do
 615: LD_ADDR_VAR 0 6
 619: PUSH
 620: DOUBLE
 621: LD_INT 1
 623: DEC
 624: ST_TO_ADDR
 625: LD_VAR 0 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 698
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 633: LD_VAR 0 1
 637: PPUSH
 638: LD_VAR 0 4
 642: PUSH
 643: LD_VAR 0 6
 647: ARRAY
 648: PPUSH
 649: LD_VAR 0 4
 653: PUSH
 654: LD_VAR 0 6
 658: PUSH
 659: LD_INT 1
 661: PLUS
 662: ARRAY
 663: PPUSH
 664: CALL_OW 174
// AddComWait ( unit , pause ) ;
 668: LD_VAR 0 1
 672: PPUSH
 673: LD_VAR 0 3
 677: PPUSH
 678: CALL_OW 202
// i := i + 1 ;
 682: LD_ADDR_VAR 0 6
 686: PUSH
 687: LD_VAR 0 6
 691: PUSH
 692: LD_INT 1
 694: PLUS
 695: ST_TO_ADDR
// end ;
 696: GO 630
 698: POP
 699: POP
// for i = coords downto 1 do
 700: LD_ADDR_VAR 0 6
 704: PUSH
 705: DOUBLE
 706: LD_VAR 0 4
 710: INC
 711: ST_TO_ADDR
 712: LD_INT 1
 714: PUSH
 715: FOR_DOWNTO
 716: IFFALSE 783
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 718: LD_VAR 0 1
 722: PPUSH
 723: LD_VAR 0 4
 727: PUSH
 728: LD_VAR 0 6
 732: PUSH
 733: LD_INT 1
 735: MINUS
 736: ARRAY
 737: PPUSH
 738: LD_VAR 0 4
 742: PUSH
 743: LD_VAR 0 6
 747: ARRAY
 748: PPUSH
 749: CALL_OW 174
// AddComWait ( unit , pause ) ;
 753: LD_VAR 0 1
 757: PPUSH
 758: LD_VAR 0 3
 762: PPUSH
 763: CALL_OW 202
// i := i - 1 ;
 767: LD_ADDR_VAR 0 6
 771: PUSH
 772: LD_VAR 0 6
 776: PUSH
 777: LD_INT 1
 779: MINUS
 780: ST_TO_ADDR
// end ;
 781: GO 715
 783: POP
 784: POP
// end ; end ;
 785: GO 425
// end ;
 787: LD_VAR 0 5
 791: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
// uc_nation := 1 ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: ST_TO_ADDR
// uc_side := 0 ;
 804: LD_ADDR_OWVAR 20
 808: PUSH
 809: LD_INT 0
 811: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 380
// hc_name := speaker ;
 825: LD_ADDR_OWVAR 26
 829: PUSH
 830: LD_STRING speaker
 832: ST_TO_ADDR
// hc_gallery :=  ;
 833: LD_ADDR_OWVAR 33
 837: PUSH
 838: LD_STRING 
 840: ST_TO_ADDR
// speaker := CreateHuman ;
 841: LD_ADDR_VAR 0 3
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 851: LD_VAR 0 3
 855: PPUSH
 856: LD_VAR 0 1
 860: PPUSH
 861: CALL_OW 88
// end ; end_of_file
 865: LD_VAR 0 2
 869: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 870: LD_INT 0
 872: PPUSH
// uc_nation := 1 ;
 873: LD_ADDR_OWVAR 21
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ,  ) ;
 881: LD_ADDR_EXP 16
 885: PUSH
 886: LD_STRING JMM
 888: PPUSH
 889: LD_INT 0
 891: PPUSH
 892: LD_STRING 
 894: PPUSH
 895: CALL 28830 0 3
 899: ST_TO_ADDR
// uc_side := 4 ;
 900: LD_ADDR_OWVAR 20
 904: PUSH
 905: LD_INT 4
 907: ST_TO_ADDR
// hc_gallery := us ;
 908: LD_ADDR_OWVAR 33
 912: PUSH
 913: LD_STRING us
 915: ST_TO_ADDR
// hc_face_number := 7 ;
 916: LD_ADDR_OWVAR 34
 920: PUSH
 921: LD_INT 7
 923: ST_TO_ADDR
// hc_sex := sex_male ;
 924: LD_ADDR_OWVAR 27
 928: PUSH
 929: LD_INT 1
 931: ST_TO_ADDR
// hc_name := . ;
 932: LD_ADDR_OWVAR 26
 936: PUSH
 937: LD_STRING .
 939: ST_TO_ADDR
// hc_class := 1 ;
 940: LD_ADDR_OWVAR 28
 944: PUSH
 945: LD_INT 1
 947: ST_TO_ADDR
// Powell := CreateHuman ;
 948: LD_ADDR_EXP 19
 952: PUSH
 953: CALL_OW 44
 957: ST_TO_ADDR
// hc_name := . ;
 958: LD_ADDR_OWVAR 26
 962: PUSH
 963: LD_STRING .
 965: ST_TO_ADDR
// hc_gallery := ru ;
 966: LD_ADDR_OWVAR 33
 970: PUSH
 971: LD_STRING ru
 973: ST_TO_ADDR
// hc_face_number := 4 ;
 974: LD_ADDR_OWVAR 34
 978: PUSH
 979: LD_INT 4
 981: ST_TO_ADDR
// hc_sex := sex_male ;
 982: LD_ADDR_OWVAR 27
 986: PUSH
 987: LD_INT 1
 989: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 990: LD_ADDR_EXP 20
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ,  ) ;
1000: LD_ADDR_EXP 17
1004: PUSH
1005: LD_STRING Bobby
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: LD_STRING 
1013: PPUSH
1014: CALL 28830 0 3
1018: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ,  ) ;
1019: LD_ADDR_EXP 18
1023: PUSH
1024: LD_STRING Cyrus
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: LD_STRING 
1032: PPUSH
1033: CALL 28830 0 3
1037: ST_TO_ADDR
// case Difficulty of 1 :
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 1
1045: DOUBLE
1046: EQUAL
1047: IFTRUE 1051
1049: GO 1066
1051: POP
// SetLives ( Bobby , 500 ) ; 2 :
1052: LD_EXP 17
1056: PPUSH
1057: LD_INT 500
1059: PPUSH
1060: CALL_OW 234
1064: GO 1136
1066: LD_INT 2
1068: DOUBLE
1069: EQUAL
1070: IFTRUE 1074
1072: GO 1089
1074: POP
// SetLives ( Bobby , 460 ) ; 3 :
1075: LD_EXP 17
1079: PPUSH
1080: LD_INT 460
1082: PPUSH
1083: CALL_OW 234
1087: GO 1136
1089: LD_INT 3
1091: DOUBLE
1092: EQUAL
1093: IFTRUE 1097
1095: GO 1112
1097: POP
// SetLives ( Bobby , 420 ) ; 4 :
1098: LD_EXP 17
1102: PPUSH
1103: LD_INT 420
1105: PPUSH
1106: CALL_OW 234
1110: GO 1136
1112: LD_INT 4
1114: DOUBLE
1115: EQUAL
1116: IFTRUE 1120
1118: GO 1135
1120: POP
// SetLives ( Bobby , 400 ) ; end ;
1121: LD_EXP 17
1125: PPUSH
1126: LD_INT 400
1128: PPUSH
1129: CALL_OW 234
1133: GO 1136
1135: POP
// end ; end_of_file
1136: LD_VAR 0 1
1140: RET
// export russian_troops_1 , russian_troops_2 , russian_troops_3 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest , russian_patrol_hidden ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// skill := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_VAR 0 2
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// uc_side := 3 ;
1176: LD_ADDR_OWVAR 20
1180: PUSH
1181: LD_INT 3
1183: ST_TO_ADDR
// uc_nation := 3 ;
1184: LD_ADDR_OWVAR 21
1188: PUSH
1189: LD_INT 3
1191: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
1192: LD_ADDR_EXP 28
1196: PUSH
1197: LD_STRING Pokryshkin
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: LD_STRING 
1205: PPUSH
1206: CALL 28830 0 3
1210: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1211: LD_EXP 28
1215: PPUSH
1216: LD_INT 44
1218: PPUSH
1219: LD_INT 5
1221: PPUSH
1222: LD_INT 0
1224: PPUSH
1225: CALL_OW 48
// hc_importance := 0 ;
1229: LD_ADDR_OWVAR 32
1233: PUSH
1234: LD_INT 0
1236: ST_TO_ADDR
// hc_gallery :=  ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING 
1244: ST_TO_ADDR
// hc_name :=  ;
1245: LD_ADDR_OWVAR 26
1249: PUSH
1250: LD_STRING 
1252: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 1
1258: PPUSH
1259: LD_VAR 0 2
1263: PPUSH
1264: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1268: LD_ADDR_OWVAR 33
1272: PUSH
1273: LD_STRING SecondCharsGal
1275: ST_TO_ADDR
// hc_face_number := 69 ;
1276: LD_ADDR_OWVAR 34
1280: PUSH
1281: LD_INT 69
1283: ST_TO_ADDR
// hc_sex := sex_male ;
1284: LD_ADDR_OWVAR 27
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1292: LD_ADDR_OWVAR 26
1296: PUSH
1297: LD_STRING Ilja Ivanov
1299: ST_TO_ADDR
// un := CreateHuman ;
1300: LD_ADDR_VAR 0 4
1304: PUSH
1305: CALL_OW 44
1309: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1310: LD_ADDR_EXP 21
1314: PUSH
1315: LD_EXP 21
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_VAR 0 4
1327: PPUSH
1328: CALL_OW 2
1332: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1348: LD_INT 1
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1363: LD_ADDR_OWVAR 33
1367: PUSH
1368: LD_STRING SecondCharsGal
1370: ST_TO_ADDR
// hc_face_number := 68 ;
1371: LD_ADDR_OWVAR 34
1375: PUSH
1376: LD_INT 68
1378: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1379: LD_ADDR_OWVAR 26
1383: PUSH
1384: LD_STRING Pavel Starczy
1386: ST_TO_ADDR
// un := CreateHuman ;
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: CALL_OW 44
1396: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1397: LD_ADDR_EXP 21
1401: PUSH
1402: LD_EXP 21
1406: PPUSH
1407: LD_INT 2
1409: PPUSH
1410: LD_VAR 0 4
1414: PPUSH
1415: CALL_OW 2
1419: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1420: LD_VAR 0 4
1424: PPUSH
1425: LD_INT 3
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL_OW 49
// InitHc ;
1435: CALL_OW 19
// for i = 1 to 7 do
1439: LD_ADDR_VAR 0 3
1443: PUSH
1444: DOUBLE
1445: LD_INT 1
1447: DEC
1448: ST_TO_ADDR
1449: LD_INT 7
1451: PUSH
1452: FOR_TO
1453: IFFALSE 1604
// begin PrepareHuman ( false , 1 , skill ) ;
1455: LD_INT 0
1457: PPUSH
1458: LD_INT 1
1460: PPUSH
1461: LD_VAR 0 2
1465: PPUSH
1466: CALL_OW 380
// un := CreateHuman ;
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: CALL_OW 44
1479: ST_TO_ADDR
// if i mod 2 = 0 then
1480: LD_VAR 0 3
1484: PUSH
1485: LD_INT 2
1487: MOD
1488: PUSH
1489: LD_INT 0
1491: EQUAL
1492: IFFALSE 1549
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1494: LD_ADDR_EXP 21
1498: PUSH
1499: LD_EXP 21
1503: PPUSH
1504: LD_EXP 21
1508: PUSH
1509: LD_INT 1
1511: PLUS
1512: PPUSH
1513: LD_VAR 0 4
1517: PPUSH
1518: CALL_OW 2
1522: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1523: LD_VAR 0 4
1527: PPUSH
1528: LD_INT 3
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 49
// ComHold ( un ) ;
1538: LD_VAR 0 4
1542: PPUSH
1543: CALL_OW 140
// end else
1547: GO 1602
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1549: LD_ADDR_EXP 22
1553: PUSH
1554: LD_EXP 22
1558: PPUSH
1559: LD_EXP 22
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL_OW 2
1577: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1578: LD_VAR 0 4
1582: PPUSH
1583: LD_INT 4
1585: PPUSH
1586: LD_INT 0
1588: PPUSH
1589: CALL_OW 49
// ComHold ( un ) ;
1593: LD_VAR 0 4
1597: PPUSH
1598: CALL_OW 140
// end ; end ;
1602: GO 1452
1604: POP
1605: POP
// for i := 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1685
// begin PrepareSoldier ( false , 3 ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// russian_troops_3 := Join ( russian_troops_3 , un ) ;
1642: LD_ADDR_EXP 23
1646: PUSH
1647: LD_EXP 23
1651: PPUSH
1652: LD_VAR 0 4
1656: PPUSH
1657: CALL 66962 0 2
1661: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 5 , 3 , false ) ;
1662: LD_VAR 0 4
1666: PPUSH
1667: LD_INT 9
1669: PPUSH
1670: LD_INT 5
1672: PPUSH
1673: LD_INT 3
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL_OW 50
// end ;
1683: GO 1619
1685: POP
1686: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1687: LD_ADDR_VAR 0 3
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 3
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 30
1704: PUSH
1705: LD_INT 31
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL_OW 69
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1740
// PrepareSolBun ( skill , i ) ;
1724: LD_VAR 0 2
1728: PPUSH
1729: LD_VAR 0 3
1733: PPUSH
1734: CALL 197 0 2
1738: GO 1721
1740: POP
1741: POP
// for i = 1 to 3 do
1742: LD_ADDR_VAR 0 3
1746: PUSH
1747: DOUBLE
1748: LD_INT 1
1750: DEC
1751: ST_TO_ADDR
1752: LD_INT 3
1754: PUSH
1755: FOR_TO
1756: IFFALSE 1892
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1758: LD_ADDR_VAR 0 4
1762: PUSH
1763: LD_INT 3
1765: PPUSH
1766: LD_INT 3
1768: PPUSH
1769: LD_INT 22
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_INT 42
1780: PPUSH
1781: LD_INT 100
1783: PPUSH
1784: CALL 333 0 7
1788: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1789: LD_INT 0
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_VAR 0 2
1799: PPUSH
1800: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1804: CALL_OW 44
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL_OW 52
// PlaceUnitXY ( un , [ 131 , 23 , 167 ] [ i ] , [ 87 , 14 , 95 ] [ i ] , false ) ;
1818: LD_VAR 0 4
1822: PPUSH
1823: LD_INT 131
1825: PUSH
1826: LD_INT 23
1828: PUSH
1829: LD_INT 167
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_VAR 0 3
1841: ARRAY
1842: PPUSH
1843: LD_INT 87
1845: PUSH
1846: LD_INT 14
1848: PUSH
1849: LD_INT 95
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_VAR 0 3
1861: ARRAY
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 48
// russian_patrol_tanks := Join ( russian_patrol_tanks , un ) ;
1870: LD_ADDR_EXP 24
1874: PUSH
1875: LD_EXP 24
1879: PPUSH
1880: LD_VAR 0 4
1884: PPUSH
1885: CALL 66962 0 2
1889: ST_TO_ADDR
// end ;
1890: GO 1755
1892: POP
1893: POP
// for i = 1 to 2 do
1894: LD_ADDR_VAR 0 3
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_INT 2
1906: PUSH
1907: FOR_TO
1908: IFFALSE 1999
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1910: LD_INT 2
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 380
// un := CreateHuman ;
1940: LD_ADDR_VAR 0 4
1944: PUSH
1945: CALL_OW 44
1949: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1950: LD_ADDR_EXP 25
1954: PUSH
1955: LD_EXP 25
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: LD_VAR 0 4
1967: PPUSH
1968: CALL_OW 2
1972: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1973: LD_VAR 0 4
1977: PPUSH
1978: LD_INT 10
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 49
// ComHold ( un ) ;
1988: LD_VAR 0 4
1992: PPUSH
1993: CALL_OW 140
// end ;
1997: GO 1907
1999: POP
2000: POP
// if Difficulty < 3 then
2001: LD_OWVAR 67
2005: PUSH
2006: LD_INT 3
2008: LESS
2009: IFFALSE 2013
// exit ;
2011: GO 2084
// PrepareHuman ( false , 1 , skill ) ;
2013: LD_INT 0
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_VAR 0 2
2023: PPUSH
2024: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
2028: LD_ADDR_EXP 26
2032: PUSH
2033: CALL_OW 44
2037: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
2038: LD_EXP 26
2042: PPUSH
2043: LD_INT 82
2045: PPUSH
2046: LD_INT 2
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 48
// russian_patrol_hidden := CreateHuman ;
2056: LD_ADDR_EXP 27
2060: PUSH
2061: CALL_OW 44
2065: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_hidden , 136 , 30 , false ) ;
2066: LD_EXP 27
2070: PPUSH
2071: LD_INT 136
2073: PPUSH
2074: LD_INT 30
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 48
// end ;
2084: LD_VAR 0 1
2088: RET
// every 0 0$01 trigger active_road_patrol do
2089: LD_EXP 8
2093: IFFALSE 2159
2095: GO 2097
2097: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2098: LD_EXP 24
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_STRING road
2109: PPUSH
2110: LD_INT 70
2112: PPUSH
2113: LD_INT 131
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 107
2121: PUSH
2122: LD_INT 75
2124: PUSH
2125: LD_INT 107
2127: PUSH
2128: LD_INT 66
2130: PUSH
2131: LD_INT 114
2133: PUSH
2134: LD_INT 61
2136: PUSH
2137: LD_INT 107
2139: PUSH
2140: LD_INT 34
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PPUSH
2155: CALL 421 0 4
2159: END
// every 0 0$01 trigger active_road_patrol do
2160: LD_EXP 8
2164: IFFALSE 2222
2166: GO 2168
2168: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2169: LD_EXP 24
2173: PUSH
2174: LD_INT 2
2176: ARRAY
2177: PPUSH
2178: LD_STRING road
2180: PPUSH
2181: LD_INT 70
2183: PPUSH
2184: LD_INT 21
2186: PUSH
2187: LD_INT 12
2189: PUSH
2190: LD_INT 37
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 65
2198: PUSH
2199: LD_INT 62
2201: PUSH
2202: LD_INT 107
2204: PUSH
2205: LD_INT 76
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL 421 0 4
2222: END
// every 0 0$01 trigger active_road_patrol do
2223: LD_EXP 8
2227: IFFALSE 2285
2229: GO 2231
2231: DISABLE
// ComPatrol ( russian_patrol_tanks [ 3 ] , road , 0 0$02 , [ 167 , 95 , 147 , 81 , 144 , 66 , 149 , 55 ] ) ;
2232: LD_EXP 24
2236: PUSH
2237: LD_INT 3
2239: ARRAY
2240: PPUSH
2241: LD_STRING road
2243: PPUSH
2244: LD_INT 70
2246: PPUSH
2247: LD_INT 167
2249: PUSH
2250: LD_INT 95
2252: PUSH
2253: LD_INT 147
2255: PUSH
2256: LD_INT 81
2258: PUSH
2259: LD_INT 144
2261: PUSH
2262: LD_INT 66
2264: PUSH
2265: LD_INT 149
2267: PUSH
2268: LD_INT 55
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: PPUSH
2281: CALL 421 0 4
2285: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2286: LD_EXP 26
2290: PPUSH
2291: CALL_OW 302
2295: IFFALSE 2357
2297: GO 2299
2299: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2300: LD_EXP 26
2304: PPUSH
2305: LD_STRING forest
2307: PPUSH
2308: LD_INT 35
2310: PPUSH
2311: LD_INT 52
2313: PUSH
2314: LD_INT 15
2316: PUSH
2317: LD_INT 81
2319: PUSH
2320: LD_INT 9
2322: PUSH
2323: LD_INT 120
2325: PUSH
2326: LD_INT 52
2328: PUSH
2329: LD_INT 135
2331: PUSH
2332: LD_INT 80
2334: PUSH
2335: LD_INT 122
2337: PUSH
2338: LD_INT 95
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: PPUSH
2353: CALL 421 0 4
2357: END
// every 0 0$01 trigger IsOk ( russian_patrol_hidden ) do
2358: LD_EXP 27
2362: PPUSH
2363: CALL_OW 302
2367: IFFALSE 2421
2369: GO 2371
2371: DISABLE
// ComPatrol ( russian_patrol_hidden , forest , 0 0$02 , [ 137 , 30 , 127 , 23 , 122 , 16 , 114 , 3 ] ) ;
2372: LD_EXP 27
2376: PPUSH
2377: LD_STRING forest
2379: PPUSH
2380: LD_INT 70
2382: PPUSH
2383: LD_INT 137
2385: PUSH
2386: LD_INT 30
2388: PUSH
2389: LD_INT 127
2391: PUSH
2392: LD_INT 23
2394: PUSH
2395: LD_INT 122
2397: PUSH
2398: LD_INT 16
2400: PUSH
2401: LD_INT 114
2403: PUSH
2404: LD_INT 3
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL 421 0 4
2421: END
// every 0 0$01 trigger macmilan_use_radio do
2422: LD_EXP 6
2426: IFFALSE 2487
2428: GO 2430
2430: DISABLE
// begin active_road_patrol := false ;
2431: LD_ADDR_EXP 8
2435: PUSH
2436: LD_INT 0
2438: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2439: LD_EXP 24
2443: PPUSH
2444: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2448: LD_EXP 24
2452: PPUSH
2453: LD_INT 72
2455: PPUSH
2456: LD_INT 41
2458: PPUSH
2459: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2463: LD_EXP 22
2467: PPUSH
2468: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2472: LD_EXP 22
2476: PPUSH
2477: LD_INT 72
2479: PPUSH
2480: LD_INT 41
2482: PPUSH
2483: CALL_OW 174
// end ;
2487: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2488: LD_INT 9
2490: PPUSH
2491: LD_INT 22
2493: PUSH
2494: LD_INT 1
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 70
2505: IFFALSE 2579
2507: GO 2509
2509: DISABLE
2510: LD_INT 0
2512: PPUSH
// begin enable ;
2513: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2514: LD_ADDR_VAR 0 1
2518: PUSH
2519: LD_INT 9
2521: PPUSH
2522: LD_INT 22
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PPUSH
2532: CALL_OW 70
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2541: LD_EXP 22
2545: PPUSH
2546: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2550: LD_EXP 22
2554: PPUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 250
2564: PPUSH
2565: LD_VAR 0 1
2569: PPUSH
2570: CALL_OW 251
2574: PPUSH
2575: CALL_OW 174
// end ;
2579: PPOPN 1
2581: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2582: LD_EXP 24
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: CALL_OW 256
2595: PUSH
2596: LD_INT 999
2598: LESS
2599: IFTRUE 2620
2601: PUSH
2602: LD_EXP 24
2606: PUSH
2607: LD_INT 2
2609: ARRAY
2610: PPUSH
2611: CALL_OW 256
2615: PUSH
2616: LD_INT 999
2618: LESS
2619: OR
2620: IFFALSE 2636
2622: PUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_EXP 16
2630: PPUSH
2631: CALL_OW 292
2635: AND
2636: IFFALSE 2663
2638: GO 2640
2640: DISABLE
// begin active_road_patrol := false ;
2641: LD_ADDR_EXP 8
2645: PUSH
2646: LD_INT 0
2648: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2649: LD_EXP 24
2653: PPUSH
2654: LD_EXP 16
2658: PPUSH
2659: CALL_OW 115
// end ;
2663: END
// every 0 0$01 trigger macmilan_in_trap do
2664: LD_EXP 9
2668: IFFALSE 2714
2670: GO 2672
2672: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2673: LD_EXP 22
2677: PPUSH
2678: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2682: LD_EXP 21
2686: PUSH
2687: LD_EXP 22
2691: ADD
2692: PUSH
2693: LD_EXP 28
2697: ADD
2698: PUSH
2699: LD_EXP 24
2703: ADD
2704: PPUSH
2705: LD_EXP 16
2709: PPUSH
2710: CALL_OW 115
// end ;
2714: END
// every 0 0$01 trigger meta_action do
2715: LD_EXP 10
2719: IFFALSE 2837
2721: GO 2723
2723: DISABLE
// begin active_road_patrol := false ;
2724: LD_ADDR_EXP 8
2728: PUSH
2729: LD_INT 0
2731: ST_TO_ADDR
// if FilterUnitsInArea ( secretRoad , [ f_side , 1 ] ) then
2732: LD_INT 15
2734: PPUSH
2735: LD_INT 22
2737: PUSH
2738: LD_INT 1
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PPUSH
2745: CALL_OW 70
2749: IFFALSE 2804
// begin ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , 104 , 10 ) ;
2751: LD_EXP 21
2755: PUSH
2756: LD_EXP 22
2760: ADD
2761: PPUSH
2762: LD_INT 104
2764: PPUSH
2765: LD_INT 10
2767: PPUSH
2768: CALL_OW 114
// ComAgressiveMove ( russian_patrol_tanks , 96 , 14 ) ;
2772: LD_EXP 24
2776: PPUSH
2777: LD_INT 96
2779: PPUSH
2780: LD_INT 14
2782: PPUSH
2783: CALL_OW 114
// ComAgressiveMove ( Pokryshkin , 85 , 4 ) ;
2787: LD_EXP 28
2791: PPUSH
2792: LD_INT 85
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 114
// end else
2802: GO 2837
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2804: LD_EXP 21
2808: PUSH
2809: LD_EXP 22
2813: ADD
2814: PUSH
2815: LD_EXP 28
2819: ADD
2820: PUSH
2821: LD_EXP 24
2825: ADD
2826: PPUSH
2827: LD_INT 93
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: CALL_OW 114
// end ;
2837: END
// every 0 0$1 trigger GetLives ( Pokryshkin ) < 1000 do
2838: LD_EXP 28
2842: PPUSH
2843: CALL_OW 256
2847: PUSH
2848: LD_INT 1000
2850: LESS
2851: IFFALSE 2902
2853: GO 2855
2855: DISABLE
// begin enable ;
2856: ENABLE
// if HexInfo ( 18 , 1 ) = Pokryshkin then
2857: LD_INT 18
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: CALL_OW 428
2867: PUSH
2868: LD_EXP 28
2872: EQUAL
2873: IFFALSE 2887
// begin RemoveUnit ( Pokryshkin ) ;
2875: LD_EXP 28
2879: PPUSH
2880: CALL_OW 64
// disable ;
2884: DISABLE
// end else
2885: GO 2902
// ComMoveXY ( Pokryshkin , 18 , 1 ) ;
2887: LD_EXP 28
2891: PPUSH
2892: LD_INT 18
2894: PPUSH
2895: LD_INT 1
2897: PPUSH
2898: CALL_OW 111
// end ;
2902: END
// every 0 0$20 trigger send_troops_to_forest do
2903: LD_EXP 14
2907: IFFALSE 2961
2909: GO 2911
2911: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2912: LD_EXP 26
2916: PPUSH
2917: CALL_OW 302
2921: NOT
2922: IFFALSE 2926
// exit ;
2924: GO 2961
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2926: LD_EXP 21
2930: PUSH
2931: LD_EXP 28
2935: ADD
2936: PPUSH
2937: LD_EXP 26
2941: PPUSH
2942: CALL_OW 252
2946: PPUSH
2947: LD_EXP 26
2951: PPUSH
2952: CALL_OW 253
2956: PPUSH
2957: CALL_OW 114
// end ;
2961: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
2962: LD_VAR 0 1
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 3
2974: EQUAL
2975: IFFALSE 3018
// begin wait ( 11 ) ;
2977: LD_INT 11
2979: PPUSH
2980: CALL_OW 67
// ComEnterUnit ( driver , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_depot ] ) , driver ) ) ;
2984: LD_VAR 0 1
2988: PPUSH
2989: LD_INT 30
2991: PUSH
2992: LD_INT 0
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PPUSH
2999: CALL_OW 69
3003: PPUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 74
3013: PPUSH
3014: CALL_OW 120
// end ; end ; end_of_file
3018: PPOPN 4
3020: END
// export function Action ; var i ; begin
3021: LD_INT 0
3023: PPUSH
3024: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3025: LD_ADDR_VAR 0 2
3029: PUSH
3030: LD_INT 22
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 25
3042: PUSH
3043: LD_INT 1
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PPUSH
3054: CALL_OW 69
3058: PUSH
3059: FOR_IN
3060: IFFALSE 3073
// ComHold ( i ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: CALL_OW 140
3071: GO 3059
3073: POP
3074: POP
// InGameOn ;
3075: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
3079: LD_INT 79
3081: PPUSH
3082: LD_INT 76
3084: PPUSH
3085: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
3089: LD_INT 10
3091: PPUSH
3092: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
3096: LD_EXP 16
3100: PPUSH
3101: LD_INT 80
3103: PPUSH
3104: LD_INT 79
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: CALL_OW 48
// Wait ( 0 0$03 ) ;
3114: LD_INT 105
3116: PPUSH
3117: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
3121: LD_EXP 16
3125: PPUSH
3126: LD_INT 80
3128: PPUSH
3129: LD_INT 76
3131: PPUSH
3132: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
3136: LD_EXP 16
3140: PPUSH
3141: LD_STRING D1-JMM-1
3143: PPUSH
3144: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3148: LD_INT 10
3150: PPUSH
3151: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
3155: LD_EXP 16
3159: PPUSH
3160: LD_INT 76
3162: PPUSH
3163: LD_INT 76
3165: PPUSH
3166: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
3170: LD_EXP 16
3174: PPUSH
3175: LD_STRING D1-JMM-1a
3177: PPUSH
3178: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3182: LD_INT 10
3184: PPUSH
3185: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
3189: LD_EXP 16
3193: PPUSH
3194: LD_INT 83
3196: PPUSH
3197: LD_INT 66
3199: PPUSH
3200: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
3204: LD_EXP 16
3208: PPUSH
3209: LD_STRING D1-JMM-1b
3211: PPUSH
3212: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
3216: LD_INT 18
3218: PPUSH
3219: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
3223: LD_EXP 16
3227: PPUSH
3228: LD_STRING D1-JMM-1c
3230: PPUSH
3231: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3235: LD_INT 7
3237: PPUSH
3238: CALL_OW 67
// SayRadioNoFaceNoName ( Powell , D1-Pow-1 ) ;
3242: LD_EXP 19
3246: PPUSH
3247: LD_STRING D1-Pow-1
3249: PPUSH
3250: CALL 71207 0 2
// Say ( JMM , D1-JMM-2 ) ;
3254: LD_EXP 16
3258: PPUSH
3259: LD_STRING D1-JMM-2
3261: PPUSH
3262: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-2 ) ;
3266: LD_EXP 19
3270: PPUSH
3271: LD_STRING D1-Pow-2
3273: PPUSH
3274: CALL 71207 0 2
// Say ( JMM , D1-JMM-3 ) ;
3278: LD_EXP 16
3282: PPUSH
3283: LD_STRING D1-JMM-3
3285: PPUSH
3286: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D1-Pow-3 ) ;
3290: LD_EXP 19
3294: PPUSH
3295: LD_STRING D1-Pow-3
3297: PPUSH
3298: CALL 71207 0 2
// Say ( JMM , D1-JMM-4 ) ;
3302: LD_EXP 16
3306: PPUSH
3307: LD_STRING D1-JMM-4
3309: PPUSH
3310: CALL_OW 88
// ComFree ( JMM ) ;
3314: LD_EXP 16
3318: PPUSH
3319: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
3323: LD_INT 10
3325: PPUSH
3326: CALL_OW 67
// InGameOff ;
3330: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3334: LD_STRING M1
3336: PPUSH
3337: CALL_OW 337
// SaveForQuickRestart ;
3341: CALL_OW 22
// active_russian_dialog := true ;
3345: LD_ADDR_EXP 3
3349: PUSH
3350: LD_INT 1
3352: ST_TO_ADDR
// active_road_patrol := true ;
3353: LD_ADDR_EXP 8
3357: PUSH
3358: LD_INT 1
3360: ST_TO_ADDR
// if Difficulty < 3 then
3361: LD_OWVAR 67
3365: PUSH
3366: LD_INT 3
3368: LESS
3369: IFFALSE 3400
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
3371: LD_EXP 17
3375: PPUSH
3376: LD_INT 41
3378: PPUSH
3379: LD_INT 71
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: CALL_OW 48
// ComHold ( Bobby ) ;
3389: LD_EXP 17
3393: PPUSH
3394: CALL_OW 140
// end else
3398: GO 3448
// begin SetDir ( Bobby , 5 ) ;
3400: LD_EXP 17
3404: PPUSH
3405: LD_INT 5
3407: PPUSH
3408: CALL_OW 233
// PlaceUnitXY ( Bobby , 105 , 98 , false ) ;
3412: LD_EXP 17
3416: PPUSH
3417: LD_INT 105
3419: PPUSH
3420: LD_INT 98
3422: PPUSH
3423: LD_INT 0
3425: PPUSH
3426: CALL_OW 48
// ComCrawl ( Bobby ) ;
3430: LD_EXP 17
3434: PPUSH
3435: CALL_OW 137
// AddComHold ( Bobby ) ;
3439: LD_EXP 17
3443: PPUSH
3444: CALL_OW 200
// end ; if Difficulty < 3 then
3448: LD_OWVAR 67
3452: PUSH
3453: LD_INT 3
3455: LESS
3456: IFFALSE 3493
// begin PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3458: LD_EXP 18
3462: PPUSH
3463: LD_INT 90
3465: PPUSH
3466: LD_INT 42
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3476: LD_EXP 18
3480: PPUSH
3481: LD_INT 79
3483: PPUSH
3484: LD_INT 34
3486: PPUSH
3487: CALL_OW 111
// end else
3491: GO 3541
// if Difficulty = 3 then
3493: LD_OWVAR 67
3497: PUSH
3498: LD_INT 3
3500: EQUAL
3501: IFFALSE 3523
// PlaceUnitXY ( Cyrus , 125 , 42 , false ) else
3503: LD_EXP 18
3507: PPUSH
3508: LD_INT 125
3510: PPUSH
3511: LD_INT 42
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: CALL_OW 48
3521: GO 3541
// PlaceUnitXY ( Cyrus , 154 , 97 , false ) ;
3523: LD_EXP 18
3527: PPUSH
3528: LD_INT 154
3530: PPUSH
3531: LD_INT 97
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 48
// AddComCrawl ( Cyrus ) ;
3541: LD_EXP 18
3545: PPUSH
3546: CALL_OW 197
// AddComHold ( Cyrus ) ;
3550: LD_EXP 18
3554: PPUSH
3555: CALL_OW 200
// end ;
3559: LD_VAR 0 1
3563: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3564: LD_EXP 3
3568: IFFALSE 4162
3570: GO 3572
3572: DISABLE
3573: LD_INT 0
3575: PPUSH
// begin wait_points := 0 ;
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: LD_INT 0
3583: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3584: LD_INT 70
3586: PPUSH
3587: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3591: LD_EXP 21
3595: PPUSH
3596: LD_INT 79
3598: PPUSH
3599: LD_INT 83
3601: PPUSH
3602: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3606: LD_EXP 21
3610: PUSH
3611: LD_INT 2
3613: ARRAY
3614: PPUSH
3615: LD_STRING D1R-Rus1-1
3617: PPUSH
3618: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3622: LD_EXP 21
3626: PUSH
3627: LD_INT 1
3629: ARRAY
3630: PPUSH
3631: LD_STRING D1R-Rus2-1
3633: PPUSH
3634: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 91 , 80 ) ;
3638: LD_EXP 22
3642: PPUSH
3643: LD_INT 91
3645: PPUSH
3646: LD_INT 80
3648: PPUSH
3649: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3653: LD_INT 35
3655: PPUSH
3656: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 6 ;
3660: LD_EXP 21
3664: PUSH
3665: LD_INT 1
3667: ARRAY
3668: PPUSH
3669: LD_INT 79
3671: PPUSH
3672: LD_INT 82
3674: PPUSH
3675: CALL_OW 297
3679: PUSH
3680: LD_INT 6
3682: LESS
3683: IFFALSE 3653
// if not IsInArea ( JMM , jmm_spot ) then
3685: LD_EXP 16
3689: PPUSH
3690: LD_INT 5
3692: PPUSH
3693: CALL_OW 308
3697: NOT
3698: IFFALSE 3718
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3700: LD_EXP 21
3704: PUSH
3705: LD_INT 1
3707: ARRAY
3708: PPUSH
3709: LD_STRING D1Ra-Rus2-1
3711: PPUSH
3712: CALL_OW 88
3716: GO 3785
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3718: LD_EXP 21
3722: PUSH
3723: LD_INT 2
3725: ARRAY
3726: PPUSH
3727: LD_STRING D1Rb-Rus1-1
3729: PPUSH
3730: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3734: LD_EXP 21
3738: PUSH
3739: LD_INT 1
3741: ARRAY
3742: PPUSH
3743: LD_STRING D1Rb-Rus2-1
3745: PPUSH
3746: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3750: LD_EXP 21
3754: PUSH
3755: LD_EXP 22
3759: ADD
3760: PPUSH
3761: LD_EXP 16
3765: PPUSH
3766: CALL_OW 250
3770: PPUSH
3771: LD_EXP 16
3775: PPUSH
3776: CALL_OW 251
3780: PPUSH
3781: CALL_OW 114
// end ; wait_points := 10 ;
3785: LD_ADDR_VAR 0 1
3789: PUSH
3790: LD_INT 10
3792: ST_TO_ADDR
// if Difficulty > 1 then
3793: LD_OWVAR 67
3797: PUSH
3798: LD_INT 1
3800: GREATER
3801: IFFALSE 3883
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3803: LD_EXP 21
3807: PPUSH
3808: LD_INT 78
3810: PPUSH
3811: LD_INT 95
3813: PPUSH
3814: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3818: LD_EXP 21
3822: PPUSH
3823: LD_INT 175
3825: PPUSH
3826: CALL_OW 202
// wait_points := wait_points + 15 ;
3830: LD_ADDR_VAR 0 1
3834: PUSH
3835: LD_VAR 0 1
3839: PUSH
3840: LD_INT 15
3842: PLUS
3843: ST_TO_ADDR
// if Difficulty > 2 then
3844: LD_OWVAR 67
3848: PUSH
3849: LD_INT 2
3851: GREATER
3852: IFFALSE 3883
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3854: LD_EXP 21
3858: PPUSH
3859: LD_INT 65
3861: PPUSH
3862: LD_INT 79
3864: PPUSH
3865: CALL_OW 174
// wait_points := wait_points + 5 ;
3869: LD_ADDR_VAR 0 1
3873: PUSH
3874: LD_VAR 0 1
3878: PUSH
3879: LD_INT 5
3881: PLUS
3882: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3883: LD_INT 35
3885: PPUSH
3886: CALL_OW 67
// wait_points := wait_points - 1 ;
3890: LD_ADDR_VAR 0 1
3894: PUSH
3895: LD_VAR 0 1
3899: PUSH
3900: LD_INT 1
3902: MINUS
3903: ST_TO_ADDR
// if See ( 3 , JMM ) then
3904: LD_INT 3
3906: PPUSH
3907: LD_EXP 16
3911: PPUSH
3912: CALL_OW 292
3916: IFFALSE 3970
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3918: LD_EXP 21
3922: PUSH
3923: LD_INT 2
3925: ARRAY
3926: PPUSH
3927: LD_STRING D1Rb-Rus1-1
3929: PPUSH
3930: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3934: LD_EXP 21
3938: PPUSH
3939: LD_EXP 16
3943: PPUSH
3944: CALL_OW 250
3948: PPUSH
3949: LD_EXP 16
3953: PPUSH
3954: CALL_OW 251
3958: PPUSH
3959: CALL_OW 114
// Wait ( 0 0$03 ) ;
3963: LD_INT 105
3965: PPUSH
3966: CALL_OW 67
// end ; until wait_points = 0 ;
3970: LD_VAR 0 1
3974: PUSH
3975: LD_INT 0
3977: EQUAL
3978: IFFALSE 3883
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3980: LD_EXP 21
3984: PUSH
3985: LD_INT 2
3987: ARRAY
3988: PPUSH
3989: LD_STRING D1Rc-Rus1-1
3991: PPUSH
3992: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3996: LD_EXP 21
4000: PUSH
4001: LD_INT 1
4003: ARRAY
4004: PPUSH
4005: LD_STRING D1Ra-Rus2-1a
4007: PPUSH
4008: CALL_OW 88
// active_powell_dialog := true ;
4012: LD_ADDR_EXP 15
4016: PUSH
4017: LD_INT 1
4019: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4020: LD_EXP 21
4024: PPUSH
4025: LD_INT 45
4027: PPUSH
4028: LD_INT 5
4030: PPUSH
4031: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
4035: LD_EXP 22
4039: PPUSH
4040: LD_INT 26
4042: PPUSH
4043: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
4047: LD_INT 35
4049: PPUSH
4050: CALL_OW 67
// if See ( 3 , JMM ) then
4054: LD_INT 3
4056: PPUSH
4057: LD_EXP 16
4061: PPUSH
4062: CALL_OW 292
4066: IFFALSE 4122
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
4068: LD_EXP 21
4072: PUSH
4073: LD_INT 2
4075: ARRAY
4076: PPUSH
4077: LD_STRING D1Rb-Rus1-1
4079: PPUSH
4080: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
4084: LD_EXP 21
4088: PPUSH
4089: LD_EXP 16
4093: PPUSH
4094: CALL_OW 250
4098: PPUSH
4099: LD_EXP 16
4103: PPUSH
4104: CALL_OW 251
4108: PPUSH
4109: CALL_OW 114
// Wait ( 0 0$50 ) ;
4113: LD_INT 1750
4115: PPUSH
4116: CALL_OW 67
// end else
4120: GO 4137
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
4122: LD_EXP 21
4126: PPUSH
4127: LD_INT 45
4129: PPUSH
4130: LD_INT 5
4132: PPUSH
4133: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
4137: LD_EXP 21
4141: PUSH
4142: LD_INT 1
4144: ARRAY
4145: PPUSH
4146: LD_INT 45
4148: PPUSH
4149: LD_INT 5
4151: PPUSH
4152: CALL_OW 297
4156: PUSH
4157: LD_INT 10
4159: LESS
4160: IFFALSE 4047
// end ;
4162: PPOPN 1
4164: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 6 ] ] ) and Difficulty = 1 do
4165: LD_INT 22
4167: PUSH
4168: LD_INT 3
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 92
4177: PUSH
4178: LD_INT 80
4180: PUSH
4181: LD_INT 83
4183: PUSH
4184: LD_INT 6
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PPUSH
4197: CALL_OW 69
4201: IFFALSE 4213
4203: PUSH
4204: LD_OWVAR 67
4208: PUSH
4209: LD_INT 1
4211: EQUAL
4212: AND
4213: IFFALSE 4294
4215: GO 4217
4217: DISABLE
// begin PlaceSeeing ( 80 , 83 , 1 , - 7 ) ;
4218: LD_INT 80
4220: PPUSH
4221: LD_INT 83
4223: PPUSH
4224: LD_INT 1
4226: PPUSH
4227: LD_INT 7
4229: NEG
4230: PPUSH
4231: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4235: LD_INT 35
4237: PPUSH
4238: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 80 , 83 , 10 ] ] ) ;
4242: LD_INT 22
4244: PUSH
4245: LD_INT 3
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PUSH
4252: LD_INT 92
4254: PUSH
4255: LD_INT 80
4257: PUSH
4258: LD_INT 83
4260: PUSH
4261: LD_INT 10
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PPUSH
4274: CALL_OW 69
4278: NOT
4279: IFFALSE 4235
// RemoveSeeing ( 80 , 83 , 1 ) ;
4281: LD_INT 80
4283: PPUSH
4284: LD_INT 83
4286: PPUSH
4287: LD_INT 1
4289: PPUSH
4290: CALL_OW 331
// end ;
4294: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 6 and IsOk ( Bobby ) do
4295: LD_EXP 16
4299: PPUSH
4300: LD_EXP 17
4304: PPUSH
4305: CALL_OW 296
4309: PUSH
4310: LD_INT 6
4312: LESS
4313: IFFALSE 4326
4315: PUSH
4316: LD_EXP 17
4320: PPUSH
4321: CALL_OW 302
4325: AND
4326: IFFALSE 4791
4328: GO 4330
4330: DISABLE
// begin ComWalk ( Bobby ) ;
4331: LD_EXP 17
4335: PPUSH
4336: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4340: LD_EXP 17
4344: PPUSH
4345: LD_EXP 16
4349: PPUSH
4350: CALL_OW 250
4354: PPUSH
4355: LD_EXP 16
4359: PPUSH
4360: CALL_OW 251
4364: PPUSH
4365: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
4369: LD_INT 35
4371: PPUSH
4372: CALL_OW 67
// until See ( 4 , JMM ) ;
4376: LD_INT 4
4378: PPUSH
4379: LD_EXP 16
4383: PPUSH
4384: CALL_OW 292
4388: IFFALSE 4369
// InGameOn ;
4390: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
4394: LD_EXP 16
4398: PPUSH
4399: LD_EXP 17
4403: PPUSH
4404: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
4408: LD_EXP 7
4412: IFFALSE 4425
4414: PUSH
4415: LD_EXP 18
4419: PPUSH
4420: CALL_OW 302
4424: AND
4425: IFFALSE 4447
4427: PUSH
4428: LD_EXP 16
4432: PPUSH
4433: LD_EXP 18
4437: PPUSH
4438: CALL_OW 296
4442: PUSH
4443: LD_INT 10
4445: LESS
4446: AND
4447: IFFALSE 4492
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
4449: LD_EXP 18
4453: PPUSH
4454: LD_EXP 16
4458: PPUSH
4459: CALL_OW 250
4463: PPUSH
4464: LD_EXP 16
4468: PPUSH
4469: CALL_OW 251
4473: PPUSH
4474: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
4478: LD_EXP 18
4482: PPUSH
4483: LD_EXP 17
4487: PPUSH
4488: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
4492: LD_EXP 16
4496: PPUSH
4497: LD_STRING D2-JMM-1
4499: PPUSH
4500: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4504: LD_INT 10
4506: PPUSH
4507: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
4511: LD_EXP 17
4515: PPUSH
4516: LD_EXP 16
4520: PPUSH
4521: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
4525: LD_EXP 17
4529: PPUSH
4530: LD_STRING D2-Bobby-1
4532: PPUSH
4533: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4537: LD_EXP 16
4541: PPUSH
4542: LD_STRING D2-JMM-2
4544: PPUSH
4545: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4549: LD_EXP 17
4553: PPUSH
4554: LD_EXP 16
4558: PPUSH
4559: CALL_OW 250
4563: PPUSH
4564: LD_EXP 16
4568: PPUSH
4569: CALL_OW 251
4573: PPUSH
4574: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
4578: LD_EXP 17
4582: PPUSH
4583: LD_STRING D2-Bobby-2
4585: PPUSH
4586: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4590: LD_EXP 16
4594: PPUSH
4595: LD_STRING D2-JMM-3
4597: PPUSH
4598: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
4602: LD_EXP 17
4606: PPUSH
4607: LD_EXP 16
4611: PPUSH
4612: CALL_OW 119
// DialogueOn ;
4616: CALL_OW 6
// Say ( Bobby , D2-Bobby-3 ) ;
4620: LD_EXP 17
4624: PPUSH
4625: LD_STRING D2-Bobby-3
4627: PPUSH
4628: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4632: LD_EXP 16
4636: PPUSH
4637: LD_STRING D2-JMM-4
4639: PPUSH
4640: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4644: LD_EXP 17
4648: PPUSH
4649: LD_STRING D2-Bobby-4
4651: PPUSH
4652: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4656: LD_EXP 16
4660: PPUSH
4661: LD_STRING D2-JMM-5
4663: PPUSH
4664: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4668: LD_EXP 17
4672: PPUSH
4673: LD_STRING D2-Bobby-5
4675: PPUSH
4676: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4680: LD_EXP 16
4684: PPUSH
4685: LD_STRING D2-JMM-6
4687: PPUSH
4688: CALL_OW 88
// if not powell_contact then
4692: LD_EXP 5
4696: NOT
4697: IFFALSE 4723
// begin Say ( Bobby , D2-Bobby-6 ) ;
4699: LD_EXP 17
4703: PPUSH
4704: LD_STRING D2-Bobby-6
4706: PPUSH
4707: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4711: LD_EXP 16
4715: PPUSH
4716: LD_STRING D2-JMM-7
4718: PPUSH
4719: CALL_OW 88
// end ; DialogueOff ;
4723: CALL_OW 7
// InGameOff ;
4727: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4731: LD_EXP 17
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4743: LD_EXP 16
4747: PUSH
4748: LD_EXP 17
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PPUSH
4757: CALL_OW 139
// bobby_in_squad := true ;
4761: LD_ADDR_EXP 4
4765: PUSH
4766: LD_INT 1
4768: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4769: LD_EXP 5
4773: IFFALSE 4782
4775: PUSH
4776: LD_EXP 7
4780: NOT
4781: AND
4782: IFFALSE 4791
// ChangeMissionObjectives ( M2b ) ;
4784: LD_STRING M2b
4786: PPUSH
4787: CALL_OW 337
// end ;
4791: END
// every 0 0$10 trigger active_russian_dialog and Difficulty < 3 do
4792: LD_EXP 3
4796: IFFALSE 4808
4798: PUSH
4799: LD_OWVAR 67
4803: PUSH
4804: LD_INT 3
4806: LESS
4807: AND
4808: IFFALSE 4842
4810: GO 4812
4812: DISABLE
// begin wait ( 1 1$00 ) ;
4813: LD_INT 2100
4815: PPUSH
4816: CALL_OW 67
// if not bobby_in_squad then
4820: LD_EXP 4
4824: NOT
4825: IFFALSE 4842
// ComMoveXY ( Bobby , 75 , 83 ) ;
4827: LD_EXP 17
4831: PPUSH
4832: LD_INT 75
4834: PPUSH
4835: LD_INT 83
4837: PPUSH
4838: CALL_OW 111
// end ;
4842: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4843: LD_EXP 7
4847: IFFALSE 4856
4849: PUSH
4850: LD_EXP 4
4854: NOT
4855: AND
4856: IFFALSE 4885
4858: GO 4860
4860: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4861: LD_EXP 17
4865: PPUSH
4866: LD_INT 105
4868: PPUSH
4869: LD_INT 97
4871: PPUSH
4872: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4876: LD_EXP 17
4880: PPUSH
4881: CALL_OW 197
// end ;
4885: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4886: LD_EXP 16
4890: PPUSH
4891: LD_INT 6
4893: PPUSH
4894: CALL_OW 308
4898: IFFALSE 4920
4900: PUSH
4901: LD_EXP 16
4905: PPUSH
4906: LD_EXP 17
4910: PPUSH
4911: CALL_OW 296
4915: PUSH
4916: LD_INT 7
4918: LESS
4919: AND
4920: IFFALSE 4928
4922: PUSH
4923: LD_EXP 4
4927: AND
4928: IFFALSE 4975
4930: GO 4932
4932: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4933: LD_EXP 16
4937: PUSH
4938: LD_EXP 17
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PPUSH
4947: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4951: LD_EXP 16
4955: PPUSH
4956: LD_STRING D2a-JMM-1
4958: PPUSH
4959: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4963: LD_EXP 17
4967: PPUSH
4968: LD_STRING D2a-Bobby-1
4970: PPUSH
4971: CALL_OW 88
// end ;
4975: END
// every 0 0$50 trigger active_powell_dialog and not See ( 3 , JMM ) do
4976: LD_EXP 15
4980: IFFALSE 4997
4982: PUSH
4983: LD_INT 3
4985: PPUSH
4986: LD_EXP 16
4990: PPUSH
4991: CALL_OW 292
4995: NOT
4996: AND
4997: IFFALSE 5168
4999: GO 5001
5001: DISABLE
// begin wait ( 0 0$5 ) ;
5002: LD_INT 175
5004: PPUSH
5005: CALL_OW 67
// InGameOn ;
5009: CALL_OW 8
// DialogueOn ;
5013: CALL_OW 6
// SayRadioNoFaceNoName ( Powell , D3-Pow-1 ) ;
5017: LD_EXP 19
5021: PPUSH
5022: LD_STRING D3-Pow-1
5024: PPUSH
5025: CALL 71207 0 2
// Say ( JMM , D3-JMM-1 ) ;
5029: LD_EXP 16
5033: PPUSH
5034: LD_STRING D3-JMM-1
5036: PPUSH
5037: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-2 ) ;
5041: LD_EXP 19
5045: PPUSH
5046: LD_STRING D3-Pow-2
5048: PPUSH
5049: CALL 71207 0 2
// Say ( JMM , D3-JMM-2 ) ;
5053: LD_EXP 16
5057: PPUSH
5058: LD_STRING D3-JMM-2
5060: PPUSH
5061: CALL_OW 88
// SayRadioNoFaceNoName ( Powell , D3-Pow-3 ) ;
5065: LD_EXP 19
5069: PPUSH
5070: LD_STRING D3-Pow-3
5072: PPUSH
5073: CALL 71207 0 2
// DialogueOff ;
5077: CALL_OW 7
// InGameOff ;
5081: CALL_OW 9
// powell_contact := true ;
5085: LD_ADDR_EXP 5
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
5093: LD_INT 10
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: CALL_OW 424
// uc_side := 4 ;
5103: LD_ADDR_OWVAR 20
5107: PUSH
5108: LD_INT 4
5110: ST_TO_ADDR
// uc_nation := 1 ;
5111: LD_ADDR_OWVAR 21
5115: PUSH
5116: LD_INT 1
5118: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
5119: LD_ADDR_EXP 19
5123: PUSH
5124: LD_STRING Powell
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: LD_STRING 
5132: PPUSH
5133: CALL 28830 0 3
5137: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
5138: LD_STRING M2
5140: PPUSH
5141: CALL_OW 337
// if not bobby_in_squad then
5145: LD_EXP 4
5149: NOT
5150: IFFALSE 5161
// ChangeMissionObjectives ( M2a ) else
5152: LD_STRING M2a
5154: PPUSH
5155: CALL_OW 337
5159: GO 5168
// ChangeMissionObjectives ( M2b ) ;
5161: LD_STRING M2b
5163: PPUSH
5164: CALL_OW 337
// end ;
5168: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
5169: LD_EXP 16
5173: PPUSH
5174: LD_INT 7
5176: PPUSH
5177: CALL_OW 308
5181: IFFALSE 5316
5183: GO 5185
5185: DISABLE
// begin DialogueOn ;
5186: CALL_OW 6
// SayRadioNoFaceNoName ( fakePokryshkin , D4-Rus3-1 ) ;
5190: LD_EXP 20
5194: PPUSH
5195: LD_STRING D4-Rus3-1
5197: PPUSH
5198: CALL 71207 0 2
// DialogueOff ;
5202: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
5206: LD_STRING M3a
5208: PPUSH
5209: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
5213: LD_INT 11
5215: PPUSH
5216: LD_INT 1
5218: PPUSH
5219: CALL_OW 424
// Wait ( 0 0$02 ) ;
5223: LD_INT 70
5225: PPUSH
5226: CALL_OW 67
// DialogueOn ;
5230: CALL_OW 6
// SayRadioNoFace ( Powell , D4-Pow-1 ) ;
5234: LD_EXP 19
5238: PPUSH
5239: LD_STRING D4-Pow-1
5241: PPUSH
5242: CALL_OW 586
// DialogueOff ;
5246: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
5250: LD_STRING M3b
5252: PPUSH
5253: CALL_OW 337
// case Query ( Q1 ) of 1 :
5257: LD_STRING Q1
5259: PPUSH
5260: CALL_OW 97
5264: PUSH
5265: LD_INT 1
5267: DOUBLE
5268: EQUAL
5269: IFTRUE 5273
5271: GO 5304
5273: POP
// begin macmilan_use_radio := true ;
5274: LD_ADDR_EXP 6
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// DialogueOn ;
5282: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
5286: LD_EXP 16
5290: PPUSH
5291: LD_STRING D4a-JMM-1
5293: PPUSH
5294: CALL_OW 88
// DialogueOff ;
5298: CALL_OW 7
// end ; 2 :
5302: GO 5316
5304: LD_INT 2
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5315
5312: POP
// ; end ;
5313: GO 5316
5315: POP
// end ;
5316: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 and IsOk ( Cyrus ) do
5317: LD_EXP 16
5321: PPUSH
5322: LD_EXP 18
5326: PPUSH
5327: CALL_OW 296
5331: PUSH
5332: LD_INT 8
5334: LESS
5335: IFFALSE 5348
5337: PUSH
5338: LD_EXP 18
5342: PPUSH
5343: CALL_OW 302
5347: AND
5348: IFFALSE 5649
5350: GO 5352
5352: DISABLE
// begin InGameOn ;
5353: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
5357: LD_EXP 16
5361: PPUSH
5362: LD_EXP 18
5366: PPUSH
5367: CALL_OW 250
5371: PPUSH
5372: LD_EXP 18
5376: PPUSH
5377: CALL_OW 251
5381: PPUSH
5382: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
5386: LD_EXP 17
5390: PPUSH
5391: CALL_OW 302
5395: IFFALSE 5403
5397: PUSH
5398: LD_EXP 4
5402: AND
5403: IFFALSE 5434
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
5405: LD_EXP 17
5409: PPUSH
5410: LD_EXP 16
5414: PPUSH
5415: CALL_OW 250
5419: PPUSH
5420: LD_EXP 16
5424: PPUSH
5425: CALL_OW 251
5429: PPUSH
5430: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
5434: LD_EXP 16
5438: PPUSH
5439: LD_STRING D5-JMM-1
5441: PPUSH
5442: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5446: LD_INT 10
5448: PPUSH
5449: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
5453: LD_EXP 16
5457: PPUSH
5458: LD_EXP 18
5462: PPUSH
5463: CALL_OW 119
// ComWalk ( Cyrus ) ;
5467: LD_EXP 18
5471: PPUSH
5472: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
5476: LD_EXP 18
5480: PPUSH
5481: LD_EXP 16
5485: PPUSH
5486: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
5490: LD_EXP 18
5494: PPUSH
5495: LD_STRING D5-Cyrus-1
5497: PPUSH
5498: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5502: LD_EXP 17
5506: PPUSH
5507: CALL_OW 302
5511: IFFALSE 5519
5513: PUSH
5514: LD_EXP 4
5518: AND
5519: IFFALSE 5559
// begin ComTurnUnit ( Bobby , Cyrus ) ;
5521: LD_EXP 17
5525: PPUSH
5526: LD_EXP 18
5530: PPUSH
5531: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
5535: LD_EXP 17
5539: PPUSH
5540: LD_STRING D5-Bobby-1
5542: PPUSH
5543: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5547: LD_EXP 16
5551: PPUSH
5552: LD_STRING D5-JMM-2
5554: PPUSH
5555: CALL_OW 88
// end ; InGameOff ;
5559: CALL_OW 9
// cyrus_in_squad := true ;
5563: LD_ADDR_EXP 7
5567: PUSH
5568: LD_INT 1
5570: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
5571: LD_EXP 18
5575: PPUSH
5576: LD_INT 1
5578: PPUSH
5579: CALL_OW 235
// if powell_contact and not bobby_in_squad then
5583: LD_EXP 5
5587: IFFALSE 5596
5589: PUSH
5590: LD_EXP 4
5594: NOT
5595: AND
5596: IFFALSE 5605
// ChangeMissionObjectives ( M2b ) ;
5598: LD_STRING M2b
5600: PPUSH
5601: CALL_OW 337
// if not bobby_in_squad and GetSide ( Bobby ) = 4 and IsOk ( Bobby ) then
5605: LD_EXP 4
5609: NOT
5610: IFFALSE 5627
5612: PUSH
5613: LD_EXP 17
5617: PPUSH
5618: CALL_OW 255
5622: PUSH
5623: LD_INT 4
5625: EQUAL
5626: AND
5627: IFFALSE 5640
5629: PUSH
5630: LD_EXP 17
5634: PPUSH
5635: CALL_OW 302
5639: AND
5640: IFFALSE 5649
// SetAchievement ( ACH_CYRUS ) ;
5642: LD_STRING ACH_CYRUS
5644: PPUSH
5645: CALL_OW 543
// end ;
5649: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
5650: LD_EXP 4
5654: IFFALSE 5662
5656: PUSH
5657: LD_EXP 7
5661: AND
5662: IFFALSE 5674
5664: GO 5666
5666: DISABLE
// ChangeMissionObjectives ( M2c ) ;
5667: LD_STRING M2c
5669: PPUSH
5670: CALL_OW 337
5674: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
5675: LD_EXP 16
5679: PPUSH
5680: LD_INT 8
5682: PPUSH
5683: CALL_OW 308
5687: IFFALSE 5739
5689: GO 5691
5691: DISABLE
// begin macmilan_in_trap := true ;
5692: LD_ADDR_EXP 9
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
5700: LD_INT 35
5702: PPUSH
5703: CALL_OW 67
// DialogueOn ;
5707: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
5711: LD_EXP 28
5715: PPUSH
5716: LD_STRING D5-Pok-1
5718: PPUSH
5719: CALL_OW 88
// DialogueOff ;
5723: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5727: LD_EXP 16
5731: PPUSH
5732: LD_STRING D4b-JMM-1
5734: PPUSH
5735: CALL_OW 88
// end ;
5739: END
// every 0 0$1 trigger IsInArea ( JMM , ruBaseArea ) do
5740: LD_EXP 16
5744: PPUSH
5745: LD_INT 16
5747: PPUSH
5748: CALL_OW 308
5752: IFFALSE 5829
5754: GO 5756
5756: DISABLE
// begin macmilan_in_trap := true ;
5757: LD_ADDR_EXP 9
5761: PUSH
5762: LD_INT 1
5764: ST_TO_ADDR
// ComAttackUnit ( russian_troops_3 , JMM ) ;
5765: LD_EXP 23
5769: PPUSH
5770: LD_EXP 16
5774: PPUSH
5775: CALL_OW 115
// repeat wait ( 0 0$0.3 ) ;
5779: LD_INT 10
5781: PPUSH
5782: CALL_OW 67
// until GetLives ( JMM ) < 1000 and See ( 3 , JMM ) ;
5786: LD_EXP 16
5790: PPUSH
5791: CALL_OW 256
5795: PUSH
5796: LD_INT 1000
5798: LESS
5799: IFFALSE 5815
5801: PUSH
5802: LD_INT 3
5804: PPUSH
5805: LD_EXP 16
5809: PPUSH
5810: CALL_OW 292
5814: AND
5815: IFFALSE 5779
// Say ( JMM , D4b-JMM-1 ) ;
5817: LD_EXP 16
5821: PPUSH
5822: LD_STRING D4b-JMM-1
5824: PPUSH
5825: CALL_OW 88
// end ;
5829: END
// every 0 0$01 trigger ( IsInArea ( JMM , endRoadArea ) and GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 ) or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5830: LD_EXP 16
5834: PPUSH
5835: LD_INT 13
5837: PPUSH
5838: CALL_OW 308
5842: IFFALSE 5870
5844: PUSH
5845: LD_EXP 16
5849: PPUSH
5850: LD_EXP 25
5854: PUSH
5855: LD_EXP 25
5859: ARRAY
5860: PPUSH
5861: CALL_OW 296
5865: PUSH
5866: LD_INT 12
5868: LESS
5869: AND
5870: IFTRUE 5900
5872: PUSH
5873: LD_EXP 25
5877: PPUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 24
5883: PUSH
5884: LD_INT 990
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: OR
5900: IFFALSE 6172
5902: GO 5904
5904: DISABLE
5905: LD_INT 0
5907: PPUSH
5908: PPUSH
// begin hp := [ 300 , 250 , 200 , 150 ] [ Difficulty ] ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_INT 300
5916: PUSH
5917: LD_INT 250
5919: PUSH
5920: LD_INT 200
5922: PUSH
5923: LD_INT 150
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_OWVAR 67
5936: ARRAY
5937: ST_TO_ADDR
// for i in russian_meta_guards do
5938: LD_ADDR_VAR 0 1
5942: PUSH
5943: LD_EXP 25
5947: PUSH
5948: FOR_IN
5949: IFFALSE 5989
// if IsOk ( i ) then
5951: LD_VAR 0 1
5955: PPUSH
5956: CALL_OW 302
5960: IFFALSE 5987
// SetLives ( i , GetLives ( i ) - hp ) ;
5962: LD_VAR 0 1
5966: PPUSH
5967: LD_VAR 0 1
5971: PPUSH
5972: CALL_OW 256
5976: PUSH
5977: LD_VAR 0 2
5981: MINUS
5982: PPUSH
5983: CALL_OW 234
5987: GO 5948
5989: POP
5990: POP
// DialogueOn ;
5991: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5995: LD_EXP 25
5999: PUSH
6000: LD_EXP 25
6004: ARRAY
6005: PPUSH
6006: LD_STRING D6-FRus1-1
6008: PPUSH
6009: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) > 1 then
6013: LD_INT 22
6015: PUSH
6016: LD_INT 1
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 50
6025: PUSH
6026: EMPTY
6027: LIST
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PPUSH
6033: CALL_OW 69
6037: PUSH
6038: LD_INT 1
6040: GREATER
6041: IFFALSE 6055
// Say ( JMM , D6-JMM-1 ) ;
6043: LD_EXP 16
6047: PPUSH
6048: LD_STRING D6-JMM-1
6050: PPUSH
6051: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
6055: LD_EXP 18
6059: PPUSH
6060: CALL_OW 302
6064: IFFALSE 6072
6066: PUSH
6067: LD_EXP 7
6071: AND
6072: IFFALSE 6086
// Say ( Cyrus , D6-Cyrus-1 ) ;
6074: LD_EXP 18
6078: PPUSH
6079: LD_STRING D6-Cyrus-1
6081: PPUSH
6082: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
6086: LD_EXP 17
6090: PPUSH
6091: CALL_OW 302
6095: IFFALSE 6103
6097: PUSH
6098: LD_EXP 4
6102: AND
6103: IFFALSE 6117
// Say ( Bobby , D6-Bobby-1 ) ;
6105: LD_EXP 17
6109: PPUSH
6110: LD_STRING D6-Bobby-1
6112: PPUSH
6113: CALL_OW 88
// DialogueOff ;
6117: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 , 0 0$02 ] [ Difficulty ] ) ;
6121: LD_INT 140
6123: PUSH
6124: LD_INT 105
6126: PUSH
6127: LD_INT 70
6129: PUSH
6130: LD_INT 70
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: PUSH
6139: LD_OWVAR 67
6143: ARRAY
6144: PPUSH
6145: CALL_OW 67
// meta_action := true ;
6149: LD_ADDR_EXP 10
6153: PUSH
6154: LD_INT 1
6156: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
6157: LD_EXP 25
6161: PPUSH
6162: LD_INT 94
6164: PPUSH
6165: LD_INT 8
6167: PPUSH
6168: CALL_OW 114
// end ;
6172: PPOPN 2
6174: END
// every 0 0$1 trigger IsInArea ( JMM , secretPassage ) do
6175: LD_EXP 16
6179: PPUSH
6180: LD_INT 14
6182: PPUSH
6183: CALL_OW 308
6187: IFFALSE 6199
6189: GO 6191
6191: DISABLE
// SetAchievement ( ACH_SECRET ) ;
6192: LD_STRING ACH_SECRET
6194: PPUSH
6195: CALL_OW 543
6199: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
6200: LD_EXP 16
6204: PPUSH
6205: LD_INT 93
6207: PPUSH
6208: LD_INT 1
6210: PPUSH
6211: CALL_OW 297
6215: PUSH
6216: LD_INT 5
6218: LESS
6219: IFFALSE 6241
6221: PUSH
6222: LD_INT 22
6224: PUSH
6225: LD_INT 1
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 69
6236: PUSH
6237: LD_INT 1
6239: GREATER
6240: AND
6241: IFFALSE 6258
6243: GO 6245
6245: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
6246: LD_EXP 16
6250: PPUSH
6251: LD_STRING D6a-JMM-1
6253: PPUSH
6254: CALL_OW 88
6258: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) or IsInArea ( Bobby , hiddenEnd ) do
6259: LD_EXP 17
6263: PPUSH
6264: LD_INT 10
6266: PPUSH
6267: CALL_OW 308
6271: IFTRUE 6287
6273: PUSH
6274: LD_EXP 17
6278: PPUSH
6279: LD_INT 12
6281: PPUSH
6282: CALL_OW 308
6286: OR
6287: IFFALSE 6343
6289: GO 6291
6291: DISABLE
// begin bobby_saved := true ;
6292: LD_ADDR_EXP 12
6296: PUSH
6297: LD_INT 1
6299: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
6300: LD_EXP 17
6304: PPUSH
6305: CALL_OW 256
6309: PPUSH
6310: LD_STRING 01_BobbyLifePoints_1
6312: PPUSH
6313: CALL_OW 39
// RemoveUnit ( Bobby ) ;
6317: LD_EXP 17
6321: PPUSH
6322: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
6326: LD_STRING Bobby
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_BOBBY) ) ;
6336: LD_STRING enableBioCharacter(BIO_BOBBY)
6338: PPUSH
6339: CALL_OW 559
// end ;
6343: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) or IsInArea ( Cyrus , hiddenEnd ) do
6344: LD_EXP 18
6348: PPUSH
6349: LD_INT 10
6351: PPUSH
6352: CALL_OW 308
6356: IFTRUE 6372
6358: PUSH
6359: LD_EXP 18
6363: PPUSH
6364: LD_INT 12
6366: PPUSH
6367: CALL_OW 308
6371: OR
6372: IFFALSE 6428
6374: GO 6376
6376: DISABLE
// begin cyrus_saved := true ;
6377: LD_ADDR_EXP 13
6381: PUSH
6382: LD_INT 1
6384: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
6385: LD_EXP 18
6389: PPUSH
6390: CALL_OW 256
6394: PPUSH
6395: LD_STRING 01_CyrusLifePoints_1
6397: PPUSH
6398: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
6402: LD_EXP 18
6406: PPUSH
6407: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
6411: LD_STRING Cyrus
6413: PPUSH
6414: LD_INT 1
6416: PPUSH
6417: CALL_OW 101
// ToLua ( enableBioCharacter(BIO_CYRUS) ) ;
6421: LD_STRING enableBioCharacter(BIO_CYRUS)
6423: PPUSH
6424: CALL_OW 559
// end ;
6428: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) or IsInArea ( JMM , hiddenEnd ) do var i , to_reward , wait_for_them , m1 , m2 , m3 ;
6429: LD_EXP 16
6433: PPUSH
6434: LD_INT 10
6436: PPUSH
6437: CALL_OW 308
6441: IFTRUE 6457
6443: PUSH
6444: LD_EXP 16
6448: PPUSH
6449: LD_INT 12
6451: PPUSH
6452: CALL_OW 308
6456: OR
6457: IFFALSE 7132
6459: GO 6461
6461: DISABLE
6462: LD_INT 0
6464: PPUSH
6465: PPUSH
6466: PPUSH
6467: PPUSH
6468: PPUSH
6469: PPUSH
// begin if macmilan_use_radio then
6470: LD_EXP 6
6474: IFFALSE 6483
// SetAchievement ( ACH_RADIO ) ;
6476: LD_STRING ACH_RADIO
6478: PPUSH
6479: CALL_OW 543
// if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
6483: LD_EXP 13
6487: NOT
6488: IFFALSE 6496
6490: PUSH
6491: LD_EXP 7
6495: AND
6496: IFFALSE 6509
6498: PUSH
6499: LD_EXP 18
6503: PPUSH
6504: CALL_OW 302
6508: AND
6509: IFTRUE 6539
6511: PUSH
6512: LD_EXP 12
6516: NOT
6517: IFFALSE 6525
6519: PUSH
6520: LD_EXP 4
6524: AND
6525: IFFALSE 6538
6527: PUSH
6528: LD_EXP 17
6532: PPUSH
6533: CALL_OW 302
6537: AND
6538: OR
6539: IFFALSE 6580
// case Query ( Q2 ) of 1 :
6541: LD_STRING Q2
6543: PPUSH
6544: CALL_OW 97
6548: PUSH
6549: LD_INT 1
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6568
6557: POP
// wait_for_them := true ; 2 :
6558: LD_ADDR_VAR 0 3
6562: PUSH
6563: LD_INT 1
6565: ST_TO_ADDR
6566: GO 6580
6568: LD_INT 2
6570: DOUBLE
6571: EQUAL
6572: IFTRUE 6576
6574: GO 6579
6576: POP
// ; end ;
6577: GO 6580
6579: POP
// if wait_for_them then
6580: LD_VAR 0 3
6584: IFFALSE 6719
// repeat wait ( 0 0$01 ) ;
6586: LD_INT 35
6588: PPUSH
6589: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
6593: LD_EXP 13
6597: IFFALSE 6605
6599: PUSH
6600: LD_EXP 12
6604: AND
6605: IFTRUE 6648
6607: PUSH
6608: LD_EXP 13
6612: IFFALSE 6647
6614: PUSH
6615: LD_EXP 4
6619: NOT
6620: IFTRUE 6633
6622: PUSH
6623: LD_EXP 17
6627: PPUSH
6628: CALL_OW 303
6632: OR
6633: IFTRUE 6646
6635: PUSH
6636: LD_EXP 17
6640: PPUSH
6641: CALL_OW 301
6645: OR
6646: AND
6647: OR
6648: IFTRUE 6691
6650: PUSH
6651: LD_EXP 12
6655: IFFALSE 6690
6657: PUSH
6658: LD_EXP 7
6662: NOT
6663: IFTRUE 6676
6665: PUSH
6666: LD_EXP 18
6670: PPUSH
6671: CALL_OW 303
6675: OR
6676: IFTRUE 6689
6678: PUSH
6679: LD_EXP 18
6683: PPUSH
6684: CALL_OW 301
6688: OR
6689: AND
6690: OR
6691: IFTRUE 6717
6693: PUSH
6694: LD_EXP 17
6698: PPUSH
6699: CALL_OW 301
6703: IFFALSE 6716
6705: PUSH
6706: LD_EXP 18
6710: PPUSH
6711: CALL_OW 301
6715: AND
6716: OR
6717: IFFALSE 6586
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
6719: LD_EXP 16
6723: PPUSH
6724: CALL_OW 256
6728: PPUSH
6729: LD_STRING 01_JMMLifePoints_1
6731: PPUSH
6732: CALL_OW 39
// RemoveUnit ( JMM ) ;
6736: LD_EXP 16
6740: PPUSH
6741: CALL_OW 64
// to_reward := [ JMM ] ;
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_EXP 16
6754: PUSH
6755: EMPTY
6756: LIST
6757: ST_TO_ADDR
// if bobby_saved then
6758: LD_EXP 12
6762: IFFALSE 6780
// to_reward := to_reward ^ Bobby ;
6764: LD_ADDR_VAR 0 2
6768: PUSH
6769: LD_VAR 0 2
6773: PUSH
6774: LD_EXP 17
6778: ADD
6779: ST_TO_ADDR
// if cyrus_saved then
6780: LD_EXP 13
6784: IFFALSE 6802
// to_reward := to_reward ^ Cyrus ;
6786: LD_ADDR_VAR 0 2
6790: PUSH
6791: LD_VAR 0 2
6795: PUSH
6796: LD_EXP 18
6800: ADD
6801: ST_TO_ADDR
// m1 := true ;
6802: LD_ADDR_VAR 0 4
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// m2 := bobby_saved ;
6810: LD_ADDR_VAR 0 5
6814: PUSH
6815: LD_EXP 12
6819: ST_TO_ADDR
// m3 := cyrus_saved ;
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_EXP 13
6829: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
6830: LD_STRING JMM
6832: PPUSH
6833: LD_INT 1
6835: PPUSH
6836: CALL_OW 101
// if not bobby_in_squad then
6840: LD_EXP 4
6844: NOT
6845: IFFALSE 6858
// AddMedal ( Bobby , - 1 ) ;
6847: LD_STRING Bobby
6849: PPUSH
6850: LD_INT 1
6852: NEG
6853: PPUSH
6854: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
6858: LD_EXP 12
6862: NOT
6863: IFFALSE 6889
6865: PUSH
6866: LD_EXP 17
6870: PPUSH
6871: CALL_OW 303
6875: IFTRUE 6888
6877: PUSH
6878: LD_EXP 17
6882: PPUSH
6883: CALL_OW 301
6887: OR
6888: AND
6889: IFFALSE 6902
// AddMedal ( Bobby , - 2 ) ;
6891: LD_STRING Bobby
6893: PPUSH
6894: LD_INT 2
6896: NEG
6897: PPUSH
6898: CALL_OW 101
// if not cyrus_in_squad then
6902: LD_EXP 7
6906: NOT
6907: IFFALSE 6920
// AddMedal ( Cyrus , - 1 ) ;
6909: LD_STRING Cyrus
6911: PPUSH
6912: LD_INT 1
6914: NEG
6915: PPUSH
6916: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
6920: LD_EXP 13
6924: NOT
6925: IFFALSE 6951
6927: PUSH
6928: LD_EXP 18
6932: PPUSH
6933: CALL_OW 303
6937: IFTRUE 6950
6939: PUSH
6940: LD_EXP 18
6944: PPUSH
6945: CALL_OW 301
6949: OR
6950: AND
6951: IFFALSE 6964
// AddMedal ( Cyrus , - 2 ) ;
6953: LD_STRING Cyrus
6955: PPUSH
6956: LD_INT 2
6958: NEG
6959: PPUSH
6960: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
6964: LD_OWVAR 67
6968: PUSH
6969: LD_INT 3
6971: GREATEREQUAL
6972: IFFALSE 6980
6974: PUSH
6975: LD_VAR 0 4
6979: AND
6980: IFFALSE 6988
6982: PUSH
6983: LD_VAR 0 5
6987: AND
6988: IFFALSE 6996
6990: PUSH
6991: LD_VAR 0 6
6995: AND
6996: IFFALSE 7008
// SetAchievementEX ( ACH_AMER , 1 ) ;
6998: LD_STRING ACH_AMER
7000: PPUSH
7001: LD_INT 1
7003: PPUSH
7004: CALL_OW 564
// GiveMedals ( MAIN ) ;
7008: LD_STRING MAIN
7010: PPUSH
7011: CALL_OW 102
// RewardPeople ( to_reward ) ;
7015: LD_VAR 0 2
7019: PPUSH
7020: CALL_OW 43
// if bobby_saved then
7024: LD_EXP 12
7028: IFFALSE 7048
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
7030: LD_EXP 17
7034: PPUSH
7035: LD_EXP 2
7039: PUSH
7040: LD_STRING Bobby
7042: STR
7043: PPUSH
7044: CALL_OW 38
// if cyrus_saved then
7048: LD_EXP 13
7052: IFFALSE 7072
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
7054: LD_EXP 18
7058: PPUSH
7059: LD_EXP 2
7063: PUSH
7064: LD_STRING Cyrus
7066: STR
7067: PPUSH
7068: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
7072: LD_EXP 16
7076: PPUSH
7077: LD_EXP 2
7081: PUSH
7082: LD_STRING JMM
7084: STR
7085: PPUSH
7086: CALL_OW 38
// if tick <= 3 3$00 then
7090: LD_OWVAR 1
7094: PUSH
7095: LD_INT 6300
7097: LESSEQUAL
7098: IFFALSE 7107
// SetAchievement ( ACH_ASPEED_1 ) ;
7100: LD_STRING ACH_ASPEED_1
7102: PPUSH
7103: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_JMM) ) ;
7107: LD_STRING enableBioCharacter(BIO_JMM)
7109: PPUSH
7110: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_JOAN) ) ;
7114: LD_STRING enableBioCharacter(BIO_JOAN)
7116: PPUSH
7117: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_BARN) ) ;
7121: LD_STRING enableBioCharacter(BIO_BARN)
7123: PPUSH
7124: CALL_OW 559
// YouWin ;
7128: CALL_OW 103
// end ; end_of_file
7132: PPOPN 6
7134: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
7135: LD_VAR 0 1
7139: PUSH
7140: LD_EXP 16
7144: EQUAL
7145: IFFALSE 7154
// YouLost ( JMM ) ;
7147: LD_STRING JMM
7149: PPUSH
7150: CALL_OW 104
// end ;
7154: PPOPN 1
7156: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL 23462 0 2
// end ;
7171: PPOPN 2
7173: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var i ;
7174: LD_INT 0
7176: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
7177: LD_VAR 0 1
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_INT 1
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 1
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 21
7204: PUSH
7205: LD_INT 1
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: IN
7222: IFFALSE 7234
7224: PUSH
7225: LD_VAR 0 2
7229: PUSH
7230: LD_INT 1
7232: EQUAL
7233: AND
7234: IFFALSE 7291
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
7236: LD_ADDR_VAR 0 4
7240: PUSH
7241: LD_INT 22
7243: PUSH
7244: LD_INT 3
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 25
7253: PUSH
7254: LD_INT 1
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PPUSH
7265: CALL_OW 69
7269: PUSH
7270: FOR_IN
7271: IFFALSE 7289
// ComAttackUnit ( i , JMM ) ;
7273: LD_VAR 0 4
7277: PPUSH
7278: LD_EXP 16
7282: PPUSH
7283: CALL_OW 115
7287: GO 7270
7289: POP
7290: POP
// end ;
7291: PPOPN 4
7293: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7294: LD_VAR 0 1
7298: PPUSH
7299: CALL 23404 0 1
// if un = JMM then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_EXP 16
7312: EQUAL
7313: IFFALSE 7322
// YouLost ( JMM ) ;
7315: LD_STRING JMM
7317: PPUSH
7318: CALL_OW 104
// end ; end_of_file end_of_file
7322: PPOPN 1
7324: END
// export globalGameSaveCounter ; every 0 0$1 do
7325: GO 7327
7327: DISABLE
// begin enable ;
7328: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7329: LD_STRING updateTimer(
7331: PUSH
7332: LD_OWVAR 1
7336: STR
7337: PUSH
7338: LD_STRING );
7340: STR
7341: PPUSH
7342: CALL_OW 559
// end ;
7346: END
// every 0 0$1 do
7347: GO 7349
7349: DISABLE
// begin globalGameSaveCounter := 0 ;
7350: LD_ADDR_EXP 29
7354: PUSH
7355: LD_INT 0
7357: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7358: LD_STRING setGameSaveCounter(0)
7360: PPUSH
7361: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7365: LD_STRING initStreamRollete();
7367: PPUSH
7368: CALL_OW 559
// InitStreamMode ;
7372: CALL 8717 0 0
// DefineStreamItems ( false ) ;
7376: LD_INT 0
7378: PPUSH
7379: CALL 9181 0 1
// end ;
7383: END
// export function SOS_MapStart ( ) ; begin
7384: LD_INT 0
7386: PPUSH
// if streamModeActive then
7387: LD_EXP 30
7391: IFFALSE 7400
// DefineStreamItems ( true ) ;
7393: LD_INT 1
7395: PPUSH
7396: CALL 9181 0 1
// UpdateLuaVariables ( ) ;
7400: CALL 7417 0 0
// UpdateFactoryWaypoints ( ) ;
7404: CALL 22303 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7408: CALL 22555 0 0
// end ;
7412: LD_VAR 0 1
7416: RET
// function UpdateLuaVariables ( ) ; begin
7417: LD_INT 0
7419: PPUSH
// if globalGameSaveCounter then
7420: LD_EXP 29
7424: IFFALSE 7458
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7426: LD_ADDR_EXP 29
7430: PUSH
7431: LD_EXP 29
7435: PPUSH
7436: CALL 68335 0 1
7440: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7441: LD_STRING setGameSaveCounter(
7443: PUSH
7444: LD_EXP 29
7448: STR
7449: PUSH
7450: LD_STRING )
7452: STR
7453: PPUSH
7454: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7458: LD_STRING setGameDifficulty(
7460: PUSH
7461: LD_OWVAR 67
7465: STR
7466: PUSH
7467: LD_STRING )
7469: STR
7470: PPUSH
7471: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7475: LD_STRING displayDifficulty(
7477: PUSH
7478: LD_OWVAR 67
7482: STR
7483: PUSH
7484: LD_STRING )
7486: STR
7487: PPUSH
7488: CALL_OW 559
// end ;
7492: LD_VAR 0 1
7496: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7497: LD_INT 0
7499: PPUSH
// if p2 = stream_mode then
7500: LD_VAR 0 2
7504: PUSH
7505: LD_INT 100
7507: EQUAL
7508: IFFALSE 8511
// begin if not StreamModeActive then
7510: LD_EXP 30
7514: NOT
7515: IFFALSE 7525
// StreamModeActive := true ;
7517: LD_ADDR_EXP 30
7521: PUSH
7522: LD_INT 1
7524: ST_TO_ADDR
// if p3 = 0 then
7525: LD_VAR 0 3
7529: PUSH
7530: LD_INT 0
7532: EQUAL
7533: IFFALSE 7539
// InitStreamMode ;
7535: CALL 8717 0 0
// if p3 = 1 then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 1
7546: EQUAL
7547: IFFALSE 7557
// sRocket := true ;
7549: LD_ADDR_EXP 35
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if p3 = 2 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 2
7564: EQUAL
7565: IFFALSE 7575
// sSpeed := true ;
7567: LD_ADDR_EXP 34
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// if p3 = 3 then
7575: LD_VAR 0 3
7579: PUSH
7580: LD_INT 3
7582: EQUAL
7583: IFFALSE 7593
// sEngine := true ;
7585: LD_ADDR_EXP 36
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if p3 = 4 then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 4
7600: EQUAL
7601: IFFALSE 7611
// sSpec := true ;
7603: LD_ADDR_EXP 33
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if p3 = 5 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 5
7618: EQUAL
7619: IFFALSE 7629
// sLevel := true ;
7621: LD_ADDR_EXP 37
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if p3 = 6 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 6
7636: EQUAL
7637: IFFALSE 7647
// sArmoury := true ;
7639: LD_ADDR_EXP 38
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 7 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 7
7654: EQUAL
7655: IFFALSE 7665
// sRadar := true ;
7657: LD_ADDR_EXP 39
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// if p3 = 8 then
7665: LD_VAR 0 3
7669: PUSH
7670: LD_INT 8
7672: EQUAL
7673: IFFALSE 7683
// sBunker := true ;
7675: LD_ADDR_EXP 40
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// if p3 = 9 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 9
7690: EQUAL
7691: IFFALSE 7701
// sHack := true ;
7693: LD_ADDR_EXP 41
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// if p3 = 10 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 10
7708: EQUAL
7709: IFFALSE 7719
// sFire := true ;
7711: LD_ADDR_EXP 42
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if p3 = 11 then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_INT 11
7726: EQUAL
7727: IFFALSE 7737
// sRefresh := true ;
7729: LD_ADDR_EXP 43
7733: PUSH
7734: LD_INT 1
7736: ST_TO_ADDR
// if p3 = 12 then
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 12
7744: EQUAL
7745: IFFALSE 7755
// sExp := true ;
7747: LD_ADDR_EXP 44
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// if p3 = 13 then
7755: LD_VAR 0 3
7759: PUSH
7760: LD_INT 13
7762: EQUAL
7763: IFFALSE 7773
// sDepot := true ;
7765: LD_ADDR_EXP 45
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// if p3 = 14 then
7773: LD_VAR 0 3
7777: PUSH
7778: LD_INT 14
7780: EQUAL
7781: IFFALSE 7791
// sFlag := true ;
7783: LD_ADDR_EXP 46
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if p3 = 15 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 15
7798: EQUAL
7799: IFFALSE 7809
// sKamikadze := true ;
7801: LD_ADDR_EXP 54
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// if p3 = 16 then
7809: LD_VAR 0 3
7813: PUSH
7814: LD_INT 16
7816: EQUAL
7817: IFFALSE 7827
// sTroll := true ;
7819: LD_ADDR_EXP 55
7823: PUSH
7824: LD_INT 1
7826: ST_TO_ADDR
// if p3 = 17 then
7827: LD_VAR 0 3
7831: PUSH
7832: LD_INT 17
7834: EQUAL
7835: IFFALSE 7845
// sSlow := true ;
7837: LD_ADDR_EXP 56
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if p3 = 18 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 18
7852: EQUAL
7853: IFFALSE 7863
// sLack := true ;
7855: LD_ADDR_EXP 57
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// if p3 = 19 then
7863: LD_VAR 0 3
7867: PUSH
7868: LD_INT 19
7870: EQUAL
7871: IFFALSE 7881
// sTank := true ;
7873: LD_ADDR_EXP 59
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 20 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 20
7888: EQUAL
7889: IFFALSE 7899
// sRemote := true ;
7891: LD_ADDR_EXP 60
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// if p3 = 21 then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 21
7906: EQUAL
7907: IFFALSE 7917
// sPowell := true ;
7909: LD_ADDR_EXP 61
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// if p3 = 22 then
7917: LD_VAR 0 3
7921: PUSH
7922: LD_INT 22
7924: EQUAL
7925: IFFALSE 7935
// sTeleport := true ;
7927: LD_ADDR_EXP 64
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// if p3 = 23 then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 23
7942: EQUAL
7943: IFFALSE 7953
// sOilTower := true ;
7945: LD_ADDR_EXP 66
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// if p3 = 24 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 24
7960: EQUAL
7961: IFFALSE 7971
// sShovel := true ;
7963: LD_ADDR_EXP 67
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// if p3 = 25 then
7971: LD_VAR 0 3
7975: PUSH
7976: LD_INT 25
7978: EQUAL
7979: IFFALSE 7989
// sSheik := true ;
7981: LD_ADDR_EXP 68
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// if p3 = 26 then
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 26
7996: EQUAL
7997: IFFALSE 8007
// sEarthquake := true ;
7999: LD_ADDR_EXP 70
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// if p3 = 27 then
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 27
8014: EQUAL
8015: IFFALSE 8025
// sAI := true ;
8017: LD_ADDR_EXP 71
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// if p3 = 28 then
8025: LD_VAR 0 3
8029: PUSH
8030: LD_INT 28
8032: EQUAL
8033: IFFALSE 8043
// sCargo := true ;
8035: LD_ADDR_EXP 74
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if p3 = 29 then
8043: LD_VAR 0 3
8047: PUSH
8048: LD_INT 29
8050: EQUAL
8051: IFFALSE 8061
// sDLaser := true ;
8053: LD_ADDR_EXP 75
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// if p3 = 30 then
8061: LD_VAR 0 3
8065: PUSH
8066: LD_INT 30
8068: EQUAL
8069: IFFALSE 8079
// sExchange := true ;
8071: LD_ADDR_EXP 76
8075: PUSH
8076: LD_INT 1
8078: ST_TO_ADDR
// if p3 = 31 then
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 31
8086: EQUAL
8087: IFFALSE 8097
// sFac := true ;
8089: LD_ADDR_EXP 77
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 32 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 32
8104: EQUAL
8105: IFFALSE 8115
// sPower := true ;
8107: LD_ADDR_EXP 78
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// if p3 = 33 then
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 33
8122: EQUAL
8123: IFFALSE 8133
// sRandom := true ;
8125: LD_ADDR_EXP 79
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// if p3 = 34 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 34
8140: EQUAL
8141: IFFALSE 8151
// sShield := true ;
8143: LD_ADDR_EXP 80
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// if p3 = 35 then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 35
8158: EQUAL
8159: IFFALSE 8169
// sTime := true ;
8161: LD_ADDR_EXP 81
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if p3 = 36 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 36
8176: EQUAL
8177: IFFALSE 8187
// sTools := true ;
8179: LD_ADDR_EXP 82
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// if p3 = 101 then
8187: LD_VAR 0 3
8191: PUSH
8192: LD_INT 101
8194: EQUAL
8195: IFFALSE 8205
// sSold := true ;
8197: LD_ADDR_EXP 47
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// if p3 = 102 then
8205: LD_VAR 0 3
8209: PUSH
8210: LD_INT 102
8212: EQUAL
8213: IFFALSE 8223
// sDiff := true ;
8215: LD_ADDR_EXP 48
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// if p3 = 103 then
8223: LD_VAR 0 3
8227: PUSH
8228: LD_INT 103
8230: EQUAL
8231: IFFALSE 8241
// sFog := true ;
8233: LD_ADDR_EXP 51
8237: PUSH
8238: LD_INT 1
8240: ST_TO_ADDR
// if p3 = 104 then
8241: LD_VAR 0 3
8245: PUSH
8246: LD_INT 104
8248: EQUAL
8249: IFFALSE 8259
// sReset := true ;
8251: LD_ADDR_EXP 52
8255: PUSH
8256: LD_INT 1
8258: ST_TO_ADDR
// if p3 = 105 then
8259: LD_VAR 0 3
8263: PUSH
8264: LD_INT 105
8266: EQUAL
8267: IFFALSE 8277
// sSun := true ;
8269: LD_ADDR_EXP 53
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// if p3 = 106 then
8277: LD_VAR 0 3
8281: PUSH
8282: LD_INT 106
8284: EQUAL
8285: IFFALSE 8295
// sTiger := true ;
8287: LD_ADDR_EXP 49
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// if p3 = 107 then
8295: LD_VAR 0 3
8299: PUSH
8300: LD_INT 107
8302: EQUAL
8303: IFFALSE 8313
// sBomb := true ;
8305: LD_ADDR_EXP 50
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// if p3 = 108 then
8313: LD_VAR 0 3
8317: PUSH
8318: LD_INT 108
8320: EQUAL
8321: IFFALSE 8331
// sWound := true ;
8323: LD_ADDR_EXP 58
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// if p3 = 109 then
8331: LD_VAR 0 3
8335: PUSH
8336: LD_INT 109
8338: EQUAL
8339: IFFALSE 8349
// sBetray := true ;
8341: LD_ADDR_EXP 62
8345: PUSH
8346: LD_INT 1
8348: ST_TO_ADDR
// if p3 = 110 then
8349: LD_VAR 0 3
8353: PUSH
8354: LD_INT 110
8356: EQUAL
8357: IFFALSE 8367
// sContamin := true ;
8359: LD_ADDR_EXP 63
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// if p3 = 111 then
8367: LD_VAR 0 3
8371: PUSH
8372: LD_INT 111
8374: EQUAL
8375: IFFALSE 8385
// sOil := true ;
8377: LD_ADDR_EXP 65
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// if p3 = 112 then
8385: LD_VAR 0 3
8389: PUSH
8390: LD_INT 112
8392: EQUAL
8393: IFFALSE 8403
// sStu := true ;
8395: LD_ADDR_EXP 69
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// if p3 = 113 then
8403: LD_VAR 0 3
8407: PUSH
8408: LD_INT 113
8410: EQUAL
8411: IFFALSE 8421
// sBazooka := true ;
8413: LD_ADDR_EXP 72
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// if p3 = 114 then
8421: LD_VAR 0 3
8425: PUSH
8426: LD_INT 114
8428: EQUAL
8429: IFFALSE 8439
// sMortar := true ;
8431: LD_ADDR_EXP 73
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// if p3 = 115 then
8439: LD_VAR 0 3
8443: PUSH
8444: LD_INT 115
8446: EQUAL
8447: IFFALSE 8457
// sRanger := true ;
8449: LD_ADDR_EXP 83
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// if p3 = 116 then
8457: LD_VAR 0 3
8461: PUSH
8462: LD_INT 116
8464: EQUAL
8465: IFFALSE 8475
// sComputer := true ;
8467: LD_ADDR_EXP 84
8471: PUSH
8472: LD_INT 1
8474: ST_TO_ADDR
// if p3 = 117 then
8475: LD_VAR 0 3
8479: PUSH
8480: LD_INT 117
8482: EQUAL
8483: IFFALSE 8493
// s30 := true ;
8485: LD_ADDR_EXP 85
8489: PUSH
8490: LD_INT 1
8492: ST_TO_ADDR
// if p3 = 118 then
8493: LD_VAR 0 3
8497: PUSH
8498: LD_INT 118
8500: EQUAL
8501: IFFALSE 8511
// s60 := true ;
8503: LD_ADDR_EXP 86
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// end ; if p2 = hack_mode then
8511: LD_VAR 0 2
8515: PUSH
8516: LD_INT 101
8518: EQUAL
8519: IFFALSE 8647
// begin case p3 of 1 :
8521: LD_VAR 0 3
8525: PUSH
8526: LD_INT 1
8528: DOUBLE
8529: EQUAL
8530: IFTRUE 8534
8532: GO 8541
8534: POP
// hHackUnlimitedResources ; 2 :
8535: CALL 20910 0 0
8539: GO 8647
8541: LD_INT 2
8543: DOUBLE
8544: EQUAL
8545: IFTRUE 8549
8547: GO 8556
8549: POP
// hHackSetLevel10 ; 3 :
8550: CALL 21043 0 0
8554: GO 8647
8556: LD_INT 3
8558: DOUBLE
8559: EQUAL
8560: IFTRUE 8564
8562: GO 8571
8564: POP
// hHackSetLevel10YourUnits ; 4 :
8565: CALL 21128 0 0
8569: GO 8647
8571: LD_INT 4
8573: DOUBLE
8574: EQUAL
8575: IFTRUE 8579
8577: GO 8586
8579: POP
// hHackInvincible ; 5 :
8580: CALL 21576 0 0
8584: GO 8647
8586: LD_INT 5
8588: DOUBLE
8589: EQUAL
8590: IFTRUE 8594
8592: GO 8601
8594: POP
// hHackInvisible ; 6 :
8595: CALL 21687 0 0
8599: GO 8647
8601: LD_INT 6
8603: DOUBLE
8604: EQUAL
8605: IFTRUE 8609
8607: GO 8616
8609: POP
// hHackChangeYourSide ; 7 :
8610: CALL 21744 0 0
8614: GO 8647
8616: LD_INT 7
8618: DOUBLE
8619: EQUAL
8620: IFTRUE 8624
8622: GO 8631
8624: POP
// hHackChangeUnitSide ; 8 :
8625: CALL 21786 0 0
8629: GO 8647
8631: LD_INT 8
8633: DOUBLE
8634: EQUAL
8635: IFTRUE 8639
8637: GO 8646
8639: POP
// hHackFog ; end ;
8640: CALL 21887 0 0
8644: GO 8647
8646: POP
// end ; if p2 = game_save_mode then
8647: LD_VAR 0 2
8651: PUSH
8652: LD_INT 102
8654: EQUAL
8655: IFFALSE 8712
// begin if p3 = 1 then
8657: LD_VAR 0 3
8661: PUSH
8662: LD_INT 1
8664: EQUAL
8665: IFFALSE 8677
// globalGameSaveCounter := p4 ;
8667: LD_ADDR_EXP 29
8671: PUSH
8672: LD_VAR 0 4
8676: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8677: LD_VAR 0 3
8681: PUSH
8682: LD_INT 2
8684: EQUAL
8685: IFFALSE 8693
8687: PUSH
8688: LD_EXP 29
8692: AND
8693: IFFALSE 8712
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8695: LD_STRING setGameSaveCounter(
8697: PUSH
8698: LD_EXP 29
8702: STR
8703: PUSH
8704: LD_STRING )
8706: STR
8707: PPUSH
8708: CALL_OW 559
// end ; end ;
8712: LD_VAR 0 7
8716: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8717: LD_INT 0
8719: PPUSH
// streamModeActive := false ;
8720: LD_ADDR_EXP 30
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// normalCounter := 36 ;
8728: LD_ADDR_EXP 31
8732: PUSH
8733: LD_INT 36
8735: ST_TO_ADDR
// hardcoreCounter := 18 ;
8736: LD_ADDR_EXP 32
8740: PUSH
8741: LD_INT 18
8743: ST_TO_ADDR
// sRocket := false ;
8744: LD_ADDR_EXP 35
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// sSpeed := false ;
8752: LD_ADDR_EXP 34
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// sEngine := false ;
8760: LD_ADDR_EXP 36
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// sSpec := false ;
8768: LD_ADDR_EXP 33
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// sLevel := false ;
8776: LD_ADDR_EXP 37
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// sArmoury := false ;
8784: LD_ADDR_EXP 38
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// sRadar := false ;
8792: LD_ADDR_EXP 39
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// sBunker := false ;
8800: LD_ADDR_EXP 40
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// sHack := false ;
8808: LD_ADDR_EXP 41
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// sFire := false ;
8816: LD_ADDR_EXP 42
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// sRefresh := false ;
8824: LD_ADDR_EXP 43
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// sExp := false ;
8832: LD_ADDR_EXP 44
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// sDepot := false ;
8840: LD_ADDR_EXP 45
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// sFlag := false ;
8848: LD_ADDR_EXP 46
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// sKamikadze := false ;
8856: LD_ADDR_EXP 54
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sTroll := false ;
8864: LD_ADDR_EXP 55
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sSlow := false ;
8872: LD_ADDR_EXP 56
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sLack := false ;
8880: LD_ADDR_EXP 57
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// sTank := false ;
8888: LD_ADDR_EXP 59
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// sRemote := false ;
8896: LD_ADDR_EXP 60
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// sPowell := false ;
8904: LD_ADDR_EXP 61
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// sTeleport := false ;
8912: LD_ADDR_EXP 64
8916: PUSH
8917: LD_INT 0
8919: ST_TO_ADDR
// sOilTower := false ;
8920: LD_ADDR_EXP 66
8924: PUSH
8925: LD_INT 0
8927: ST_TO_ADDR
// sShovel := false ;
8928: LD_ADDR_EXP 67
8932: PUSH
8933: LD_INT 0
8935: ST_TO_ADDR
// sSheik := false ;
8936: LD_ADDR_EXP 68
8940: PUSH
8941: LD_INT 0
8943: ST_TO_ADDR
// sEarthquake := false ;
8944: LD_ADDR_EXP 70
8948: PUSH
8949: LD_INT 0
8951: ST_TO_ADDR
// sAI := false ;
8952: LD_ADDR_EXP 71
8956: PUSH
8957: LD_INT 0
8959: ST_TO_ADDR
// sCargo := false ;
8960: LD_ADDR_EXP 74
8964: PUSH
8965: LD_INT 0
8967: ST_TO_ADDR
// sDLaser := false ;
8968: LD_ADDR_EXP 75
8972: PUSH
8973: LD_INT 0
8975: ST_TO_ADDR
// sExchange := false ;
8976: LD_ADDR_EXP 76
8980: PUSH
8981: LD_INT 0
8983: ST_TO_ADDR
// sFac := false ;
8984: LD_ADDR_EXP 77
8988: PUSH
8989: LD_INT 0
8991: ST_TO_ADDR
// sPower := false ;
8992: LD_ADDR_EXP 78
8996: PUSH
8997: LD_INT 0
8999: ST_TO_ADDR
// sRandom := false ;
9000: LD_ADDR_EXP 79
9004: PUSH
9005: LD_INT 0
9007: ST_TO_ADDR
// sShield := false ;
9008: LD_ADDR_EXP 80
9012: PUSH
9013: LD_INT 0
9015: ST_TO_ADDR
// sTime := false ;
9016: LD_ADDR_EXP 81
9020: PUSH
9021: LD_INT 0
9023: ST_TO_ADDR
// sTools := false ;
9024: LD_ADDR_EXP 82
9028: PUSH
9029: LD_INT 0
9031: ST_TO_ADDR
// sSold := false ;
9032: LD_ADDR_EXP 47
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// sDiff := false ;
9040: LD_ADDR_EXP 48
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// sFog := false ;
9048: LD_ADDR_EXP 51
9052: PUSH
9053: LD_INT 0
9055: ST_TO_ADDR
// sReset := false ;
9056: LD_ADDR_EXP 52
9060: PUSH
9061: LD_INT 0
9063: ST_TO_ADDR
// sSun := false ;
9064: LD_ADDR_EXP 53
9068: PUSH
9069: LD_INT 0
9071: ST_TO_ADDR
// sTiger := false ;
9072: LD_ADDR_EXP 49
9076: PUSH
9077: LD_INT 0
9079: ST_TO_ADDR
// sBomb := false ;
9080: LD_ADDR_EXP 50
9084: PUSH
9085: LD_INT 0
9087: ST_TO_ADDR
// sWound := false ;
9088: LD_ADDR_EXP 58
9092: PUSH
9093: LD_INT 0
9095: ST_TO_ADDR
// sBetray := false ;
9096: LD_ADDR_EXP 62
9100: PUSH
9101: LD_INT 0
9103: ST_TO_ADDR
// sContamin := false ;
9104: LD_ADDR_EXP 63
9108: PUSH
9109: LD_INT 0
9111: ST_TO_ADDR
// sOil := false ;
9112: LD_ADDR_EXP 65
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// sStu := false ;
9120: LD_ADDR_EXP 69
9124: PUSH
9125: LD_INT 0
9127: ST_TO_ADDR
// sBazooka := false ;
9128: LD_ADDR_EXP 72
9132: PUSH
9133: LD_INT 0
9135: ST_TO_ADDR
// sMortar := false ;
9136: LD_ADDR_EXP 73
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// sRanger := false ;
9144: LD_ADDR_EXP 83
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// sComputer := false ;
9152: LD_ADDR_EXP 84
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// s30 := false ;
9160: LD_ADDR_EXP 85
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// s60 := false ;
9168: LD_ADDR_EXP 86
9172: PUSH
9173: LD_INT 0
9175: ST_TO_ADDR
// end ;
9176: LD_VAR 0 1
9180: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9181: LD_INT 0
9183: PPUSH
9184: PPUSH
9185: PPUSH
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// result := [ ] ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: EMPTY
9196: ST_TO_ADDR
// if campaign_id = 1 then
9197: LD_OWVAR 69
9201: PUSH
9202: LD_INT 1
9204: EQUAL
9205: IFFALSE 12371
// begin case mission_number of 1 :
9207: LD_OWVAR 70
9211: PUSH
9212: LD_INT 1
9214: DOUBLE
9215: EQUAL
9216: IFTRUE 9220
9218: GO 9296
9220: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: LD_INT 2
9228: PUSH
9229: LD_INT 4
9231: PUSH
9232: LD_INT 11
9234: PUSH
9235: LD_INT 12
9237: PUSH
9238: LD_INT 15
9240: PUSH
9241: LD_INT 16
9243: PUSH
9244: LD_INT 22
9246: PUSH
9247: LD_INT 23
9249: PUSH
9250: LD_INT 26
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 101
9266: PUSH
9267: LD_INT 102
9269: PUSH
9270: LD_INT 106
9272: PUSH
9273: LD_INT 116
9275: PUSH
9276: LD_INT 117
9278: PUSH
9279: LD_INT 118
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: ST_TO_ADDR
9294: GO 12369
9296: LD_INT 2
9298: DOUBLE
9299: EQUAL
9300: IFTRUE 9304
9302: GO 9388
9304: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9305: LD_ADDR_VAR 0 2
9309: PUSH
9310: LD_INT 2
9312: PUSH
9313: LD_INT 4
9315: PUSH
9316: LD_INT 11
9318: PUSH
9319: LD_INT 12
9321: PUSH
9322: LD_INT 15
9324: PUSH
9325: LD_INT 16
9327: PUSH
9328: LD_INT 22
9330: PUSH
9331: LD_INT 23
9333: PUSH
9334: LD_INT 26
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 101
9350: PUSH
9351: LD_INT 102
9353: PUSH
9354: LD_INT 105
9356: PUSH
9357: LD_INT 106
9359: PUSH
9360: LD_INT 108
9362: PUSH
9363: LD_INT 116
9365: PUSH
9366: LD_INT 117
9368: PUSH
9369: LD_INT 118
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: ST_TO_ADDR
9386: GO 12369
9388: LD_INT 3
9390: DOUBLE
9391: EQUAL
9392: IFTRUE 9396
9394: GO 9484
9396: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9397: LD_ADDR_VAR 0 2
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: LD_INT 4
9407: PUSH
9408: LD_INT 5
9410: PUSH
9411: LD_INT 11
9413: PUSH
9414: LD_INT 12
9416: PUSH
9417: LD_INT 15
9419: PUSH
9420: LD_INT 16
9422: PUSH
9423: LD_INT 22
9425: PUSH
9426: LD_INT 26
9428: PUSH
9429: LD_INT 36
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: LD_INT 101
9446: PUSH
9447: LD_INT 102
9449: PUSH
9450: LD_INT 105
9452: PUSH
9453: LD_INT 106
9455: PUSH
9456: LD_INT 108
9458: PUSH
9459: LD_INT 116
9461: PUSH
9462: LD_INT 117
9464: PUSH
9465: LD_INT 118
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: ST_TO_ADDR
9482: GO 12369
9484: LD_INT 4
9486: DOUBLE
9487: EQUAL
9488: IFTRUE 9492
9490: GO 9588
9492: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9493: LD_ADDR_VAR 0 2
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 4
9503: PUSH
9504: LD_INT 5
9506: PUSH
9507: LD_INT 8
9509: PUSH
9510: LD_INT 11
9512: PUSH
9513: LD_INT 12
9515: PUSH
9516: LD_INT 15
9518: PUSH
9519: LD_INT 16
9521: PUSH
9522: LD_INT 22
9524: PUSH
9525: LD_INT 23
9527: PUSH
9528: LD_INT 26
9530: PUSH
9531: LD_INT 36
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 101
9550: PUSH
9551: LD_INT 102
9553: PUSH
9554: LD_INT 105
9556: PUSH
9557: LD_INT 106
9559: PUSH
9560: LD_INT 108
9562: PUSH
9563: LD_INT 116
9565: PUSH
9566: LD_INT 117
9568: PUSH
9569: LD_INT 118
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: ST_TO_ADDR
9586: GO 12369
9588: LD_INT 5
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9708
9596: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9597: LD_ADDR_VAR 0 2
9601: PUSH
9602: LD_INT 2
9604: PUSH
9605: LD_INT 4
9607: PUSH
9608: LD_INT 5
9610: PUSH
9611: LD_INT 6
9613: PUSH
9614: LD_INT 8
9616: PUSH
9617: LD_INT 11
9619: PUSH
9620: LD_INT 12
9622: PUSH
9623: LD_INT 15
9625: PUSH
9626: LD_INT 16
9628: PUSH
9629: LD_INT 22
9631: PUSH
9632: LD_INT 23
9634: PUSH
9635: LD_INT 25
9637: PUSH
9638: LD_INT 26
9640: PUSH
9641: LD_INT 36
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 101
9662: PUSH
9663: LD_INT 102
9665: PUSH
9666: LD_INT 105
9668: PUSH
9669: LD_INT 106
9671: PUSH
9672: LD_INT 108
9674: PUSH
9675: LD_INT 109
9677: PUSH
9678: LD_INT 112
9680: PUSH
9681: LD_INT 116
9683: PUSH
9684: LD_INT 117
9686: PUSH
9687: LD_INT 118
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: ST_TO_ADDR
9706: GO 12369
9708: LD_INT 6
9710: DOUBLE
9711: EQUAL
9712: IFTRUE 9716
9714: GO 9848
9716: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9717: LD_ADDR_VAR 0 2
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: LD_INT 4
9727: PUSH
9728: LD_INT 5
9730: PUSH
9731: LD_INT 6
9733: PUSH
9734: LD_INT 8
9736: PUSH
9737: LD_INT 11
9739: PUSH
9740: LD_INT 12
9742: PUSH
9743: LD_INT 15
9745: PUSH
9746: LD_INT 16
9748: PUSH
9749: LD_INT 20
9751: PUSH
9752: LD_INT 21
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 23
9760: PUSH
9761: LD_INT 25
9763: PUSH
9764: LD_INT 26
9766: PUSH
9767: LD_INT 30
9769: PUSH
9770: LD_INT 31
9772: PUSH
9773: LD_INT 32
9775: PUSH
9776: LD_INT 36
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: LD_INT 101
9802: PUSH
9803: LD_INT 102
9805: PUSH
9806: LD_INT 105
9808: PUSH
9809: LD_INT 106
9811: PUSH
9812: LD_INT 108
9814: PUSH
9815: LD_INT 109
9817: PUSH
9818: LD_INT 112
9820: PUSH
9821: LD_INT 116
9823: PUSH
9824: LD_INT 117
9826: PUSH
9827: LD_INT 118
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: ST_TO_ADDR
9846: GO 12369
9848: LD_INT 7
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 9968
9856: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9857: LD_ADDR_VAR 0 2
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: LD_INT 4
9867: PUSH
9868: LD_INT 5
9870: PUSH
9871: LD_INT 7
9873: PUSH
9874: LD_INT 11
9876: PUSH
9877: LD_INT 12
9879: PUSH
9880: LD_INT 15
9882: PUSH
9883: LD_INT 16
9885: PUSH
9886: LD_INT 20
9888: PUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 22
9894: PUSH
9895: LD_INT 23
9897: PUSH
9898: LD_INT 25
9900: PUSH
9901: LD_INT 26
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 101
9922: PUSH
9923: LD_INT 102
9925: PUSH
9926: LD_INT 103
9928: PUSH
9929: LD_INT 105
9931: PUSH
9932: LD_INT 106
9934: PUSH
9935: LD_INT 108
9937: PUSH
9938: LD_INT 112
9940: PUSH
9941: LD_INT 116
9943: PUSH
9944: LD_INT 117
9946: PUSH
9947: LD_INT 118
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: ST_TO_ADDR
9966: GO 12369
9968: LD_INT 8
9970: DOUBLE
9971: EQUAL
9972: IFTRUE 9976
9974: GO 10116
9976: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9977: LD_ADDR_VAR 0 2
9981: PUSH
9982: LD_INT 2
9984: PUSH
9985: LD_INT 4
9987: PUSH
9988: LD_INT 5
9990: PUSH
9991: LD_INT 6
9993: PUSH
9994: LD_INT 7
9996: PUSH
9997: LD_INT 8
9999: PUSH
10000: LD_INT 11
10002: PUSH
10003: LD_INT 12
10005: PUSH
10006: LD_INT 15
10008: PUSH
10009: LD_INT 16
10011: PUSH
10012: LD_INT 20
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 22
10020: PUSH
10021: LD_INT 23
10023: PUSH
10024: LD_INT 25
10026: PUSH
10027: LD_INT 26
10029: PUSH
10030: LD_INT 30
10032: PUSH
10033: LD_INT 31
10035: PUSH
10036: LD_INT 32
10038: PUSH
10039: LD_INT 36
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 101
10066: PUSH
10067: LD_INT 102
10069: PUSH
10070: LD_INT 103
10072: PUSH
10073: LD_INT 105
10075: PUSH
10076: LD_INT 106
10078: PUSH
10079: LD_INT 108
10081: PUSH
10082: LD_INT 109
10084: PUSH
10085: LD_INT 112
10087: PUSH
10088: LD_INT 116
10090: PUSH
10091: LD_INT 117
10093: PUSH
10094: LD_INT 118
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: ST_TO_ADDR
10114: GO 12369
10116: LD_INT 9
10118: DOUBLE
10119: EQUAL
10120: IFTRUE 10124
10122: GO 10272
10124: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10125: LD_ADDR_VAR 0 2
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 4
10135: PUSH
10136: LD_INT 5
10138: PUSH
10139: LD_INT 6
10141: PUSH
10142: LD_INT 7
10144: PUSH
10145: LD_INT 8
10147: PUSH
10148: LD_INT 11
10150: PUSH
10151: LD_INT 12
10153: PUSH
10154: LD_INT 15
10156: PUSH
10157: LD_INT 16
10159: PUSH
10160: LD_INT 20
10162: PUSH
10163: LD_INT 21
10165: PUSH
10166: LD_INT 22
10168: PUSH
10169: LD_INT 23
10171: PUSH
10172: LD_INT 25
10174: PUSH
10175: LD_INT 26
10177: PUSH
10178: LD_INT 28
10180: PUSH
10181: LD_INT 30
10183: PUSH
10184: LD_INT 31
10186: PUSH
10187: LD_INT 32
10189: PUSH
10190: LD_INT 36
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 101
10218: PUSH
10219: LD_INT 102
10221: PUSH
10222: LD_INT 103
10224: PUSH
10225: LD_INT 105
10227: PUSH
10228: LD_INT 106
10230: PUSH
10231: LD_INT 108
10233: PUSH
10234: LD_INT 109
10236: PUSH
10237: LD_INT 112
10239: PUSH
10240: LD_INT 114
10242: PUSH
10243: LD_INT 116
10245: PUSH
10246: LD_INT 117
10248: PUSH
10249: LD_INT 118
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: ST_TO_ADDR
10270: GO 12369
10272: LD_INT 10
10274: DOUBLE
10275: EQUAL
10276: IFTRUE 10280
10278: GO 10476
10280: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10281: LD_ADDR_VAR 0 2
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: LD_INT 5
10294: PUSH
10295: LD_INT 6
10297: PUSH
10298: LD_INT 7
10300: PUSH
10301: LD_INT 8
10303: PUSH
10304: LD_INT 9
10306: PUSH
10307: LD_INT 10
10309: PUSH
10310: LD_INT 11
10312: PUSH
10313: LD_INT 12
10315: PUSH
10316: LD_INT 13
10318: PUSH
10319: LD_INT 14
10321: PUSH
10322: LD_INT 15
10324: PUSH
10325: LD_INT 16
10327: PUSH
10328: LD_INT 17
10330: PUSH
10331: LD_INT 18
10333: PUSH
10334: LD_INT 19
10336: PUSH
10337: LD_INT 20
10339: PUSH
10340: LD_INT 21
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_INT 23
10348: PUSH
10349: LD_INT 24
10351: PUSH
10352: LD_INT 25
10354: PUSH
10355: LD_INT 26
10357: PUSH
10358: LD_INT 28
10360: PUSH
10361: LD_INT 30
10363: PUSH
10364: LD_INT 31
10366: PUSH
10367: LD_INT 32
10369: PUSH
10370: LD_INT 36
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 101
10406: PUSH
10407: LD_INT 102
10409: PUSH
10410: LD_INT 103
10412: PUSH
10413: LD_INT 104
10415: PUSH
10416: LD_INT 105
10418: PUSH
10419: LD_INT 106
10421: PUSH
10422: LD_INT 107
10424: PUSH
10425: LD_INT 108
10427: PUSH
10428: LD_INT 109
10430: PUSH
10431: LD_INT 110
10433: PUSH
10434: LD_INT 111
10436: PUSH
10437: LD_INT 112
10439: PUSH
10440: LD_INT 114
10442: PUSH
10443: LD_INT 116
10445: PUSH
10446: LD_INT 117
10448: PUSH
10449: LD_INT 118
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: ST_TO_ADDR
10474: GO 12369
10476: LD_INT 11
10478: DOUBLE
10479: EQUAL
10480: IFTRUE 10484
10482: GO 10688
10484: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10485: LD_ADDR_VAR 0 2
10489: PUSH
10490: LD_INT 2
10492: PUSH
10493: LD_INT 3
10495: PUSH
10496: LD_INT 4
10498: PUSH
10499: LD_INT 5
10501: PUSH
10502: LD_INT 6
10504: PUSH
10505: LD_INT 7
10507: PUSH
10508: LD_INT 8
10510: PUSH
10511: LD_INT 9
10513: PUSH
10514: LD_INT 10
10516: PUSH
10517: LD_INT 11
10519: PUSH
10520: LD_INT 12
10522: PUSH
10523: LD_INT 13
10525: PUSH
10526: LD_INT 14
10528: PUSH
10529: LD_INT 15
10531: PUSH
10532: LD_INT 16
10534: PUSH
10535: LD_INT 17
10537: PUSH
10538: LD_INT 18
10540: PUSH
10541: LD_INT 19
10543: PUSH
10544: LD_INT 20
10546: PUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_INT 23
10555: PUSH
10556: LD_INT 24
10558: PUSH
10559: LD_INT 25
10561: PUSH
10562: LD_INT 26
10564: PUSH
10565: LD_INT 28
10567: PUSH
10568: LD_INT 30
10570: PUSH
10571: LD_INT 31
10573: PUSH
10574: LD_INT 32
10576: PUSH
10577: LD_INT 34
10579: PUSH
10580: LD_INT 36
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 101
10618: PUSH
10619: LD_INT 102
10621: PUSH
10622: LD_INT 103
10624: PUSH
10625: LD_INT 104
10627: PUSH
10628: LD_INT 105
10630: PUSH
10631: LD_INT 106
10633: PUSH
10634: LD_INT 107
10636: PUSH
10637: LD_INT 108
10639: PUSH
10640: LD_INT 109
10642: PUSH
10643: LD_INT 110
10645: PUSH
10646: LD_INT 111
10648: PUSH
10649: LD_INT 112
10651: PUSH
10652: LD_INT 114
10654: PUSH
10655: LD_INT 116
10657: PUSH
10658: LD_INT 117
10660: PUSH
10661: LD_INT 118
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: ST_TO_ADDR
10686: GO 12369
10688: LD_INT 12
10690: DOUBLE
10691: EQUAL
10692: IFTRUE 10696
10694: GO 10916
10696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10697: LD_ADDR_VAR 0 2
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: LD_INT 3
10710: PUSH
10711: LD_INT 4
10713: PUSH
10714: LD_INT 5
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: LD_INT 7
10722: PUSH
10723: LD_INT 8
10725: PUSH
10726: LD_INT 9
10728: PUSH
10729: LD_INT 10
10731: PUSH
10732: LD_INT 11
10734: PUSH
10735: LD_INT 12
10737: PUSH
10738: LD_INT 13
10740: PUSH
10741: LD_INT 14
10743: PUSH
10744: LD_INT 15
10746: PUSH
10747: LD_INT 16
10749: PUSH
10750: LD_INT 17
10752: PUSH
10753: LD_INT 18
10755: PUSH
10756: LD_INT 19
10758: PUSH
10759: LD_INT 20
10761: PUSH
10762: LD_INT 21
10764: PUSH
10765: LD_INT 22
10767: PUSH
10768: LD_INT 23
10770: PUSH
10771: LD_INT 24
10773: PUSH
10774: LD_INT 25
10776: PUSH
10777: LD_INT 26
10779: PUSH
10780: LD_INT 27
10782: PUSH
10783: LD_INT 28
10785: PUSH
10786: LD_INT 30
10788: PUSH
10789: LD_INT 31
10791: PUSH
10792: LD_INT 32
10794: PUSH
10795: LD_INT 33
10797: PUSH
10798: LD_INT 34
10800: PUSH
10801: LD_INT 36
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 101
10842: PUSH
10843: LD_INT 102
10845: PUSH
10846: LD_INT 103
10848: PUSH
10849: LD_INT 104
10851: PUSH
10852: LD_INT 105
10854: PUSH
10855: LD_INT 106
10857: PUSH
10858: LD_INT 107
10860: PUSH
10861: LD_INT 108
10863: PUSH
10864: LD_INT 109
10866: PUSH
10867: LD_INT 110
10869: PUSH
10870: LD_INT 111
10872: PUSH
10873: LD_INT 112
10875: PUSH
10876: LD_INT 113
10878: PUSH
10879: LD_INT 114
10881: PUSH
10882: LD_INT 116
10884: PUSH
10885: LD_INT 117
10887: PUSH
10888: LD_INT 118
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: ST_TO_ADDR
10914: GO 12369
10916: LD_INT 13
10918: DOUBLE
10919: EQUAL
10920: IFTRUE 10924
10922: GO 11132
10924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10925: LD_ADDR_VAR 0 2
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: LD_INT 2
10935: PUSH
10936: LD_INT 3
10938: PUSH
10939: LD_INT 4
10941: PUSH
10942: LD_INT 5
10944: PUSH
10945: LD_INT 8
10947: PUSH
10948: LD_INT 9
10950: PUSH
10951: LD_INT 10
10953: PUSH
10954: LD_INT 11
10956: PUSH
10957: LD_INT 12
10959: PUSH
10960: LD_INT 14
10962: PUSH
10963: LD_INT 15
10965: PUSH
10966: LD_INT 16
10968: PUSH
10969: LD_INT 17
10971: PUSH
10972: LD_INT 18
10974: PUSH
10975: LD_INT 19
10977: PUSH
10978: LD_INT 20
10980: PUSH
10981: LD_INT 21
10983: PUSH
10984: LD_INT 22
10986: PUSH
10987: LD_INT 23
10989: PUSH
10990: LD_INT 24
10992: PUSH
10993: LD_INT 25
10995: PUSH
10996: LD_INT 26
10998: PUSH
10999: LD_INT 27
11001: PUSH
11002: LD_INT 28
11004: PUSH
11005: LD_INT 30
11007: PUSH
11008: LD_INT 31
11010: PUSH
11011: LD_INT 32
11013: PUSH
11014: LD_INT 33
11016: PUSH
11017: LD_INT 34
11019: PUSH
11020: LD_INT 36
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 101
11058: PUSH
11059: LD_INT 102
11061: PUSH
11062: LD_INT 103
11064: PUSH
11065: LD_INT 104
11067: PUSH
11068: LD_INT 105
11070: PUSH
11071: LD_INT 106
11073: PUSH
11074: LD_INT 107
11076: PUSH
11077: LD_INT 108
11079: PUSH
11080: LD_INT 109
11082: PUSH
11083: LD_INT 110
11085: PUSH
11086: LD_INT 111
11088: PUSH
11089: LD_INT 112
11091: PUSH
11092: LD_INT 113
11094: PUSH
11095: LD_INT 114
11097: PUSH
11098: LD_INT 116
11100: PUSH
11101: LD_INT 117
11103: PUSH
11104: LD_INT 118
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: ST_TO_ADDR
11130: GO 12369
11132: LD_INT 14
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11140
11138: GO 11364
11140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11141: LD_ADDR_VAR 0 2
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: LD_INT 2
11151: PUSH
11152: LD_INT 3
11154: PUSH
11155: LD_INT 4
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: LD_INT 6
11163: PUSH
11164: LD_INT 7
11166: PUSH
11167: LD_INT 8
11169: PUSH
11170: LD_INT 9
11172: PUSH
11173: LD_INT 10
11175: PUSH
11176: LD_INT 11
11178: PUSH
11179: LD_INT 12
11181: PUSH
11182: LD_INT 13
11184: PUSH
11185: LD_INT 14
11187: PUSH
11188: LD_INT 15
11190: PUSH
11191: LD_INT 16
11193: PUSH
11194: LD_INT 17
11196: PUSH
11197: LD_INT 18
11199: PUSH
11200: LD_INT 19
11202: PUSH
11203: LD_INT 20
11205: PUSH
11206: LD_INT 21
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_INT 23
11214: PUSH
11215: LD_INT 24
11217: PUSH
11218: LD_INT 25
11220: PUSH
11221: LD_INT 26
11223: PUSH
11224: LD_INT 27
11226: PUSH
11227: LD_INT 28
11229: PUSH
11230: LD_INT 29
11232: PUSH
11233: LD_INT 30
11235: PUSH
11236: LD_INT 31
11238: PUSH
11239: LD_INT 32
11241: PUSH
11242: LD_INT 33
11244: PUSH
11245: LD_INT 34
11247: PUSH
11248: LD_INT 36
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 101
11290: PUSH
11291: LD_INT 102
11293: PUSH
11294: LD_INT 103
11296: PUSH
11297: LD_INT 104
11299: PUSH
11300: LD_INT 105
11302: PUSH
11303: LD_INT 106
11305: PUSH
11306: LD_INT 107
11308: PUSH
11309: LD_INT 108
11311: PUSH
11312: LD_INT 109
11314: PUSH
11315: LD_INT 110
11317: PUSH
11318: LD_INT 111
11320: PUSH
11321: LD_INT 112
11323: PUSH
11324: LD_INT 113
11326: PUSH
11327: LD_INT 114
11329: PUSH
11330: LD_INT 116
11332: PUSH
11333: LD_INT 117
11335: PUSH
11336: LD_INT 118
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: ST_TO_ADDR
11362: GO 12369
11364: LD_INT 15
11366: DOUBLE
11367: EQUAL
11368: IFTRUE 11372
11370: GO 11596
11372: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11373: LD_ADDR_VAR 0 2
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 3
11386: PUSH
11387: LD_INT 4
11389: PUSH
11390: LD_INT 5
11392: PUSH
11393: LD_INT 6
11395: PUSH
11396: LD_INT 7
11398: PUSH
11399: LD_INT 8
11401: PUSH
11402: LD_INT 9
11404: PUSH
11405: LD_INT 10
11407: PUSH
11408: LD_INT 11
11410: PUSH
11411: LD_INT 12
11413: PUSH
11414: LD_INT 13
11416: PUSH
11417: LD_INT 14
11419: PUSH
11420: LD_INT 15
11422: PUSH
11423: LD_INT 16
11425: PUSH
11426: LD_INT 17
11428: PUSH
11429: LD_INT 18
11431: PUSH
11432: LD_INT 19
11434: PUSH
11435: LD_INT 20
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 22
11443: PUSH
11444: LD_INT 23
11446: PUSH
11447: LD_INT 24
11449: PUSH
11450: LD_INT 25
11452: PUSH
11453: LD_INT 26
11455: PUSH
11456: LD_INT 27
11458: PUSH
11459: LD_INT 28
11461: PUSH
11462: LD_INT 29
11464: PUSH
11465: LD_INT 30
11467: PUSH
11468: LD_INT 31
11470: PUSH
11471: LD_INT 32
11473: PUSH
11474: LD_INT 33
11476: PUSH
11477: LD_INT 34
11479: PUSH
11480: LD_INT 36
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 101
11522: PUSH
11523: LD_INT 102
11525: PUSH
11526: LD_INT 103
11528: PUSH
11529: LD_INT 104
11531: PUSH
11532: LD_INT 105
11534: PUSH
11535: LD_INT 106
11537: PUSH
11538: LD_INT 107
11540: PUSH
11541: LD_INT 108
11543: PUSH
11544: LD_INT 109
11546: PUSH
11547: LD_INT 110
11549: PUSH
11550: LD_INT 111
11552: PUSH
11553: LD_INT 112
11555: PUSH
11556: LD_INT 113
11558: PUSH
11559: LD_INT 114
11561: PUSH
11562: LD_INT 116
11564: PUSH
11565: LD_INT 117
11567: PUSH
11568: LD_INT 118
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: ST_TO_ADDR
11594: GO 12369
11596: LD_INT 16
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11740
11604: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: LD_INT 4
11615: PUSH
11616: LD_INT 5
11618: PUSH
11619: LD_INT 7
11621: PUSH
11622: LD_INT 11
11624: PUSH
11625: LD_INT 12
11627: PUSH
11628: LD_INT 15
11630: PUSH
11631: LD_INT 16
11633: PUSH
11634: LD_INT 20
11636: PUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_INT 23
11645: PUSH
11646: LD_INT 25
11648: PUSH
11649: LD_INT 26
11651: PUSH
11652: LD_INT 30
11654: PUSH
11655: LD_INT 31
11657: PUSH
11658: LD_INT 32
11660: PUSH
11661: LD_INT 33
11663: PUSH
11664: LD_INT 34
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 101
11690: PUSH
11691: LD_INT 102
11693: PUSH
11694: LD_INT 103
11696: PUSH
11697: LD_INT 106
11699: PUSH
11700: LD_INT 108
11702: PUSH
11703: LD_INT 112
11705: PUSH
11706: LD_INT 113
11708: PUSH
11709: LD_INT 114
11711: PUSH
11712: LD_INT 116
11714: PUSH
11715: LD_INT 117
11717: PUSH
11718: LD_INT 118
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: ST_TO_ADDR
11738: GO 12369
11740: LD_INT 17
11742: DOUBLE
11743: EQUAL
11744: IFTRUE 11748
11746: GO 11972
11748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11749: LD_ADDR_VAR 0 2
11753: PUSH
11754: LD_INT 1
11756: PUSH
11757: LD_INT 2
11759: PUSH
11760: LD_INT 3
11762: PUSH
11763: LD_INT 4
11765: PUSH
11766: LD_INT 5
11768: PUSH
11769: LD_INT 6
11771: PUSH
11772: LD_INT 7
11774: PUSH
11775: LD_INT 8
11777: PUSH
11778: LD_INT 9
11780: PUSH
11781: LD_INT 10
11783: PUSH
11784: LD_INT 11
11786: PUSH
11787: LD_INT 12
11789: PUSH
11790: LD_INT 13
11792: PUSH
11793: LD_INT 14
11795: PUSH
11796: LD_INT 15
11798: PUSH
11799: LD_INT 16
11801: PUSH
11802: LD_INT 17
11804: PUSH
11805: LD_INT 18
11807: PUSH
11808: LD_INT 19
11810: PUSH
11811: LD_INT 20
11813: PUSH
11814: LD_INT 21
11816: PUSH
11817: LD_INT 22
11819: PUSH
11820: LD_INT 23
11822: PUSH
11823: LD_INT 24
11825: PUSH
11826: LD_INT 25
11828: PUSH
11829: LD_INT 26
11831: PUSH
11832: LD_INT 27
11834: PUSH
11835: LD_INT 28
11837: PUSH
11838: LD_INT 29
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 31
11846: PUSH
11847: LD_INT 32
11849: PUSH
11850: LD_INT 33
11852: PUSH
11853: LD_INT 34
11855: PUSH
11856: LD_INT 36
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 101
11898: PUSH
11899: LD_INT 102
11901: PUSH
11902: LD_INT 103
11904: PUSH
11905: LD_INT 104
11907: PUSH
11908: LD_INT 105
11910: PUSH
11911: LD_INT 106
11913: PUSH
11914: LD_INT 107
11916: PUSH
11917: LD_INT 108
11919: PUSH
11920: LD_INT 109
11922: PUSH
11923: LD_INT 110
11925: PUSH
11926: LD_INT 111
11928: PUSH
11929: LD_INT 112
11931: PUSH
11932: LD_INT 113
11934: PUSH
11935: LD_INT 114
11937: PUSH
11938: LD_INT 116
11940: PUSH
11941: LD_INT 117
11943: PUSH
11944: LD_INT 118
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: ST_TO_ADDR
11970: GO 12369
11972: LD_INT 18
11974: DOUBLE
11975: EQUAL
11976: IFTRUE 11980
11978: GO 12128
11980: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11981: LD_ADDR_VAR 0 2
11985: PUSH
11986: LD_INT 2
11988: PUSH
11989: LD_INT 4
11991: PUSH
11992: LD_INT 5
11994: PUSH
11995: LD_INT 7
11997: PUSH
11998: LD_INT 11
12000: PUSH
12001: LD_INT 12
12003: PUSH
12004: LD_INT 15
12006: PUSH
12007: LD_INT 16
12009: PUSH
12010: LD_INT 20
12012: PUSH
12013: LD_INT 21
12015: PUSH
12016: LD_INT 22
12018: PUSH
12019: LD_INT 23
12021: PUSH
12022: LD_INT 25
12024: PUSH
12025: LD_INT 26
12027: PUSH
12028: LD_INT 30
12030: PUSH
12031: LD_INT 31
12033: PUSH
12034: LD_INT 32
12036: PUSH
12037: LD_INT 33
12039: PUSH
12040: LD_INT 34
12042: PUSH
12043: LD_INT 35
12045: PUSH
12046: LD_INT 36
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 101
12074: PUSH
12075: LD_INT 102
12077: PUSH
12078: LD_INT 103
12080: PUSH
12081: LD_INT 106
12083: PUSH
12084: LD_INT 108
12086: PUSH
12087: LD_INT 112
12089: PUSH
12090: LD_INT 113
12092: PUSH
12093: LD_INT 114
12095: PUSH
12096: LD_INT 115
12098: PUSH
12099: LD_INT 116
12101: PUSH
12102: LD_INT 117
12104: PUSH
12105: LD_INT 118
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: ST_TO_ADDR
12126: GO 12369
12128: LD_INT 19
12130: DOUBLE
12131: EQUAL
12132: IFTRUE 12136
12134: GO 12368
12136: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 1
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 3
12150: PUSH
12151: LD_INT 4
12153: PUSH
12154: LD_INT 5
12156: PUSH
12157: LD_INT 6
12159: PUSH
12160: LD_INT 7
12162: PUSH
12163: LD_INT 8
12165: PUSH
12166: LD_INT 9
12168: PUSH
12169: LD_INT 10
12171: PUSH
12172: LD_INT 11
12174: PUSH
12175: LD_INT 12
12177: PUSH
12178: LD_INT 13
12180: PUSH
12181: LD_INT 14
12183: PUSH
12184: LD_INT 15
12186: PUSH
12187: LD_INT 16
12189: PUSH
12190: LD_INT 17
12192: PUSH
12193: LD_INT 18
12195: PUSH
12196: LD_INT 19
12198: PUSH
12199: LD_INT 20
12201: PUSH
12202: LD_INT 21
12204: PUSH
12205: LD_INT 22
12207: PUSH
12208: LD_INT 23
12210: PUSH
12211: LD_INT 24
12213: PUSH
12214: LD_INT 25
12216: PUSH
12217: LD_INT 26
12219: PUSH
12220: LD_INT 27
12222: PUSH
12223: LD_INT 28
12225: PUSH
12226: LD_INT 29
12228: PUSH
12229: LD_INT 30
12231: PUSH
12232: LD_INT 31
12234: PUSH
12235: LD_INT 32
12237: PUSH
12238: LD_INT 33
12240: PUSH
12241: LD_INT 34
12243: PUSH
12244: LD_INT 35
12246: PUSH
12247: LD_INT 36
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 101
12290: PUSH
12291: LD_INT 102
12293: PUSH
12294: LD_INT 103
12296: PUSH
12297: LD_INT 104
12299: PUSH
12300: LD_INT 105
12302: PUSH
12303: LD_INT 106
12305: PUSH
12306: LD_INT 107
12308: PUSH
12309: LD_INT 108
12311: PUSH
12312: LD_INT 109
12314: PUSH
12315: LD_INT 110
12317: PUSH
12318: LD_INT 111
12320: PUSH
12321: LD_INT 112
12323: PUSH
12324: LD_INT 113
12326: PUSH
12327: LD_INT 114
12329: PUSH
12330: LD_INT 115
12332: PUSH
12333: LD_INT 116
12335: PUSH
12336: LD_INT 117
12338: PUSH
12339: LD_INT 118
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: ST_TO_ADDR
12366: GO 12369
12368: POP
// end else
12369: GO 12600
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12371: LD_ADDR_VAR 0 2
12375: PUSH
12376: LD_INT 1
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: LD_INT 3
12384: PUSH
12385: LD_INT 4
12387: PUSH
12388: LD_INT 5
12390: PUSH
12391: LD_INT 6
12393: PUSH
12394: LD_INT 7
12396: PUSH
12397: LD_INT 8
12399: PUSH
12400: LD_INT 9
12402: PUSH
12403: LD_INT 10
12405: PUSH
12406: LD_INT 11
12408: PUSH
12409: LD_INT 12
12411: PUSH
12412: LD_INT 13
12414: PUSH
12415: LD_INT 14
12417: PUSH
12418: LD_INT 15
12420: PUSH
12421: LD_INT 16
12423: PUSH
12424: LD_INT 17
12426: PUSH
12427: LD_INT 18
12429: PUSH
12430: LD_INT 19
12432: PUSH
12433: LD_INT 20
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 22
12441: PUSH
12442: LD_INT 23
12444: PUSH
12445: LD_INT 24
12447: PUSH
12448: LD_INT 25
12450: PUSH
12451: LD_INT 26
12453: PUSH
12454: LD_INT 27
12456: PUSH
12457: LD_INT 28
12459: PUSH
12460: LD_INT 29
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 31
12468: PUSH
12469: LD_INT 32
12471: PUSH
12472: LD_INT 33
12474: PUSH
12475: LD_INT 34
12477: PUSH
12478: LD_INT 35
12480: PUSH
12481: LD_INT 36
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 101
12524: PUSH
12525: LD_INT 102
12527: PUSH
12528: LD_INT 103
12530: PUSH
12531: LD_INT 104
12533: PUSH
12534: LD_INT 105
12536: PUSH
12537: LD_INT 106
12539: PUSH
12540: LD_INT 107
12542: PUSH
12543: LD_INT 108
12545: PUSH
12546: LD_INT 109
12548: PUSH
12549: LD_INT 110
12551: PUSH
12552: LD_INT 111
12554: PUSH
12555: LD_INT 112
12557: PUSH
12558: LD_INT 113
12560: PUSH
12561: LD_INT 114
12563: PUSH
12564: LD_INT 115
12566: PUSH
12567: LD_INT 116
12569: PUSH
12570: LD_INT 117
12572: PUSH
12573: LD_INT 118
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
// if result then
12600: LD_VAR 0 2
12604: IFFALSE 13390
// begin normal :=  ;
12606: LD_ADDR_VAR 0 5
12610: PUSH
12611: LD_STRING 
12613: ST_TO_ADDR
// hardcore :=  ;
12614: LD_ADDR_VAR 0 6
12618: PUSH
12619: LD_STRING 
12621: ST_TO_ADDR
// active :=  ;
12622: LD_ADDR_VAR 0 7
12626: PUSH
12627: LD_STRING 
12629: ST_TO_ADDR
// for i = 1 to normalCounter do
12630: LD_ADDR_VAR 0 8
12634: PUSH
12635: DOUBLE
12636: LD_INT 1
12638: DEC
12639: ST_TO_ADDR
12640: LD_EXP 31
12644: PUSH
12645: FOR_TO
12646: IFFALSE 12747
// begin tmp := 0 ;
12648: LD_ADDR_VAR 0 3
12652: PUSH
12653: LD_STRING 0
12655: ST_TO_ADDR
// if result [ 1 ] then
12656: LD_VAR 0 2
12660: PUSH
12661: LD_INT 1
12663: ARRAY
12664: IFFALSE 12729
// if result [ 1 ] [ 1 ] = i then
12666: LD_VAR 0 2
12670: PUSH
12671: LD_INT 1
12673: ARRAY
12674: PUSH
12675: LD_INT 1
12677: ARRAY
12678: PUSH
12679: LD_VAR 0 8
12683: EQUAL
12684: IFFALSE 12729
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12686: LD_ADDR_VAR 0 2
12690: PUSH
12691: LD_VAR 0 2
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: LD_VAR 0 2
12703: PUSH
12704: LD_INT 1
12706: ARRAY
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 3
12715: PPUSH
12716: CALL_OW 1
12720: ST_TO_ADDR
// tmp := 1 ;
12721: LD_ADDR_VAR 0 3
12725: PUSH
12726: LD_STRING 1
12728: ST_TO_ADDR
// end ; normal := normal & tmp ;
12729: LD_ADDR_VAR 0 5
12733: PUSH
12734: LD_VAR 0 5
12738: PUSH
12739: LD_VAR 0 3
12743: STR
12744: ST_TO_ADDR
// end ;
12745: GO 12645
12747: POP
12748: POP
// for i = 1 to hardcoreCounter do
12749: LD_ADDR_VAR 0 8
12753: PUSH
12754: DOUBLE
12755: LD_INT 1
12757: DEC
12758: ST_TO_ADDR
12759: LD_EXP 32
12763: PUSH
12764: FOR_TO
12765: IFFALSE 12870
// begin tmp := 0 ;
12767: LD_ADDR_VAR 0 3
12771: PUSH
12772: LD_STRING 0
12774: ST_TO_ADDR
// if result [ 2 ] then
12775: LD_VAR 0 2
12779: PUSH
12780: LD_INT 2
12782: ARRAY
12783: IFFALSE 12852
// if result [ 2 ] [ 1 ] = 100 + i then
12785: LD_VAR 0 2
12789: PUSH
12790: LD_INT 2
12792: ARRAY
12793: PUSH
12794: LD_INT 1
12796: ARRAY
12797: PUSH
12798: LD_INT 100
12800: PUSH
12801: LD_VAR 0 8
12805: PLUS
12806: EQUAL
12807: IFFALSE 12852
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12809: LD_ADDR_VAR 0 2
12813: PUSH
12814: LD_VAR 0 2
12818: PPUSH
12819: LD_INT 2
12821: PPUSH
12822: LD_VAR 0 2
12826: PUSH
12827: LD_INT 2
12829: ARRAY
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: CALL_OW 3
12838: PPUSH
12839: CALL_OW 1
12843: ST_TO_ADDR
// tmp := 1 ;
12844: LD_ADDR_VAR 0 3
12848: PUSH
12849: LD_STRING 1
12851: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12852: LD_ADDR_VAR 0 6
12856: PUSH
12857: LD_VAR 0 6
12861: PUSH
12862: LD_VAR 0 3
12866: STR
12867: ST_TO_ADDR
// end ;
12868: GO 12764
12870: POP
12871: POP
// if isGameLoad then
12872: LD_VAR 0 1
12876: IFFALSE 13351
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12878: LD_ADDR_VAR 0 4
12882: PUSH
12883: LD_EXP 35
12887: PUSH
12888: LD_EXP 34
12892: PUSH
12893: LD_EXP 36
12897: PUSH
12898: LD_EXP 33
12902: PUSH
12903: LD_EXP 37
12907: PUSH
12908: LD_EXP 38
12912: PUSH
12913: LD_EXP 39
12917: PUSH
12918: LD_EXP 40
12922: PUSH
12923: LD_EXP 41
12927: PUSH
12928: LD_EXP 42
12932: PUSH
12933: LD_EXP 43
12937: PUSH
12938: LD_EXP 44
12942: PUSH
12943: LD_EXP 45
12947: PUSH
12948: LD_EXP 46
12952: PUSH
12953: LD_EXP 54
12957: PUSH
12958: LD_EXP 55
12962: PUSH
12963: LD_EXP 56
12967: PUSH
12968: LD_EXP 57
12972: PUSH
12973: LD_EXP 59
12977: PUSH
12978: LD_EXP 60
12982: PUSH
12983: LD_EXP 61
12987: PUSH
12988: LD_EXP 64
12992: PUSH
12993: LD_EXP 66
12997: PUSH
12998: LD_EXP 67
13002: PUSH
13003: LD_EXP 68
13007: PUSH
13008: LD_EXP 70
13012: PUSH
13013: LD_EXP 71
13017: PUSH
13018: LD_EXP 74
13022: PUSH
13023: LD_EXP 75
13027: PUSH
13028: LD_EXP 76
13032: PUSH
13033: LD_EXP 77
13037: PUSH
13038: LD_EXP 78
13042: PUSH
13043: LD_EXP 79
13047: PUSH
13048: LD_EXP 80
13052: PUSH
13053: LD_EXP 81
13057: PUSH
13058: LD_EXP 82
13062: PUSH
13063: LD_EXP 47
13067: PUSH
13068: LD_EXP 48
13072: PUSH
13073: LD_EXP 51
13077: PUSH
13078: LD_EXP 52
13082: PUSH
13083: LD_EXP 53
13087: PUSH
13088: LD_EXP 49
13092: PUSH
13093: LD_EXP 50
13097: PUSH
13098: LD_EXP 58
13102: PUSH
13103: LD_EXP 62
13107: PUSH
13108: LD_EXP 63
13112: PUSH
13113: LD_EXP 65
13117: PUSH
13118: LD_EXP 69
13122: PUSH
13123: LD_EXP 72
13127: PUSH
13128: LD_EXP 73
13132: PUSH
13133: LD_EXP 83
13137: PUSH
13138: LD_EXP 84
13142: PUSH
13143: LD_EXP 85
13147: PUSH
13148: LD_EXP 86
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: ST_TO_ADDR
// tmp :=  ;
13209: LD_ADDR_VAR 0 3
13213: PUSH
13214: LD_STRING 
13216: ST_TO_ADDR
// for i = 1 to normalCounter do
13217: LD_ADDR_VAR 0 8
13221: PUSH
13222: DOUBLE
13223: LD_INT 1
13225: DEC
13226: ST_TO_ADDR
13227: LD_EXP 31
13231: PUSH
13232: FOR_TO
13233: IFFALSE 13269
// begin if flags [ i ] then
13235: LD_VAR 0 4
13239: PUSH
13240: LD_VAR 0 8
13244: ARRAY
13245: IFFALSE 13267
// tmp := tmp & i & ; ;
13247: LD_ADDR_VAR 0 3
13251: PUSH
13252: LD_VAR 0 3
13256: PUSH
13257: LD_VAR 0 8
13261: STR
13262: PUSH
13263: LD_STRING ;
13265: STR
13266: ST_TO_ADDR
// end ;
13267: GO 13232
13269: POP
13270: POP
// for i = 1 to hardcoreCounter do
13271: LD_ADDR_VAR 0 8
13275: PUSH
13276: DOUBLE
13277: LD_INT 1
13279: DEC
13280: ST_TO_ADDR
13281: LD_EXP 32
13285: PUSH
13286: FOR_TO
13287: IFFALSE 13333
// begin if flags [ normalCounter + i ] then
13289: LD_VAR 0 4
13293: PUSH
13294: LD_EXP 31
13298: PUSH
13299: LD_VAR 0 8
13303: PLUS
13304: ARRAY
13305: IFFALSE 13331
// tmp := tmp & ( 100 + i ) & ; ;
13307: LD_ADDR_VAR 0 3
13311: PUSH
13312: LD_VAR 0 3
13316: PUSH
13317: LD_INT 100
13319: PUSH
13320: LD_VAR 0 8
13324: PLUS
13325: STR
13326: PUSH
13327: LD_STRING ;
13329: STR
13330: ST_TO_ADDR
// end ;
13331: GO 13286
13333: POP
13334: POP
// if tmp then
13335: LD_VAR 0 3
13339: IFFALSE 13351
// active := tmp ;
13341: LD_ADDR_VAR 0 7
13345: PUSH
13346: LD_VAR 0 3
13350: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13351: LD_STRING getStreamItemsFromMission("
13353: PUSH
13354: LD_VAR 0 5
13358: STR
13359: PUSH
13360: LD_STRING ","
13362: STR
13363: PUSH
13364: LD_VAR 0 6
13368: STR
13369: PUSH
13370: LD_STRING ","
13372: STR
13373: PUSH
13374: LD_VAR 0 7
13378: STR
13379: PUSH
13380: LD_STRING ")
13382: STR
13383: PPUSH
13384: CALL_OW 559
// end else
13388: GO 13397
// ToLua ( getStreamItemsFromMission("","","") ) ;
13390: LD_STRING getStreamItemsFromMission("","","")
13392: PPUSH
13393: CALL_OW 559
// end ;
13397: LD_VAR 0 2
13401: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13402: LD_EXP 30
13406: IFFALSE 13414
13408: PUSH
13409: LD_EXP 35
13413: AND
13414: IFFALSE 13538
13416: GO 13418
13418: DISABLE
13419: LD_INT 0
13421: PPUSH
13422: PPUSH
// begin enable ;
13423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13424: LD_ADDR_VAR 0 2
13428: PUSH
13429: LD_INT 22
13431: PUSH
13432: LD_OWVAR 2
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 34
13446: PUSH
13447: LD_INT 7
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 34
13456: PUSH
13457: LD_INT 45
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 34
13466: PUSH
13467: LD_INT 28
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 34
13476: PUSH
13477: LD_INT 47
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 69
13499: ST_TO_ADDR
// if not tmp then
13500: LD_VAR 0 2
13504: NOT
13505: IFFALSE 13509
// exit ;
13507: GO 13538
// for i in tmp do
13509: LD_ADDR_VAR 0 1
13513: PUSH
13514: LD_VAR 0 2
13518: PUSH
13519: FOR_IN
13520: IFFALSE 13536
// begin SetLives ( i , 0 ) ;
13522: LD_VAR 0 1
13526: PPUSH
13527: LD_INT 0
13529: PPUSH
13530: CALL_OW 234
// end ;
13534: GO 13519
13536: POP
13537: POP
// end ;
13538: PPOPN 2
13540: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13541: LD_EXP 30
13545: IFFALSE 13553
13547: PUSH
13548: LD_EXP 36
13552: AND
13553: IFFALSE 13637
13555: GO 13557
13557: DISABLE
13558: LD_INT 0
13560: PPUSH
13561: PPUSH
// begin enable ;
13562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13563: LD_ADDR_VAR 0 2
13567: PUSH
13568: LD_INT 22
13570: PUSH
13571: LD_OWVAR 2
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 32
13582: PUSH
13583: LD_INT 3
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 69
13598: ST_TO_ADDR
// if not tmp then
13599: LD_VAR 0 2
13603: NOT
13604: IFFALSE 13608
// exit ;
13606: GO 13637
// for i in tmp do
13608: LD_ADDR_VAR 0 1
13612: PUSH
13613: LD_VAR 0 2
13617: PUSH
13618: FOR_IN
13619: IFFALSE 13635
// begin SetLives ( i , 0 ) ;
13621: LD_VAR 0 1
13625: PPUSH
13626: LD_INT 0
13628: PPUSH
13629: CALL_OW 234
// end ;
13633: GO 13618
13635: POP
13636: POP
// end ;
13637: PPOPN 2
13639: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13640: LD_EXP 30
13644: IFFALSE 13652
13646: PUSH
13647: LD_EXP 33
13651: AND
13652: IFFALSE 13745
13654: GO 13656
13656: DISABLE
13657: LD_INT 0
13659: PPUSH
// begin enable ;
13660: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13661: LD_ADDR_VAR 0 1
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_OWVAR 2
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 5
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 25
13693: PUSH
13694: LD_INT 9
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 25
13703: PUSH
13704: LD_INT 8
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 69
13725: PUSH
13726: FOR_IN
13727: IFFALSE 13743
// begin SetClass ( i , 1 ) ;
13729: LD_VAR 0 1
13733: PPUSH
13734: LD_INT 1
13736: PPUSH
13737: CALL_OW 336
// end ;
13741: GO 13726
13743: POP
13744: POP
// end ;
13745: PPOPN 1
13747: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13748: LD_EXP 30
13752: IFFALSE 13760
13754: PUSH
13755: LD_EXP 34
13759: AND
13760: IFFALSE 13772
13762: PUSH
13763: LD_OWVAR 65
13767: PUSH
13768: LD_INT 7
13770: LESS
13771: AND
13772: IFFALSE 13786
13774: GO 13776
13776: DISABLE
// begin enable ;
13777: ENABLE
// game_speed := 7 ;
13778: LD_ADDR_OWVAR 65
13782: PUSH
13783: LD_INT 7
13785: ST_TO_ADDR
// end ;
13786: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13787: LD_EXP 30
13791: IFFALSE 13799
13793: PUSH
13794: LD_EXP 37
13798: AND
13799: IFFALSE 14001
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
13807: PPUSH
13808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_INT 81
13816: PUSH
13817: LD_OWVAR 2
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 21
13828: PUSH
13829: LD_INT 1
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PPUSH
13840: CALL_OW 69
13844: ST_TO_ADDR
// if not tmp then
13845: LD_VAR 0 3
13849: NOT
13850: IFFALSE 13854
// exit ;
13852: GO 14001
// if tmp > 5 then
13854: LD_VAR 0 3
13858: PUSH
13859: LD_INT 5
13861: GREATER
13862: IFFALSE 13874
// k := 5 else
13864: LD_ADDR_VAR 0 2
13868: PUSH
13869: LD_INT 5
13871: ST_TO_ADDR
13872: GO 13884
// k := tmp ;
13874: LD_ADDR_VAR 0 2
13878: PUSH
13879: LD_VAR 0 3
13883: ST_TO_ADDR
// for i := 1 to k do
13884: LD_ADDR_VAR 0 1
13888: PUSH
13889: DOUBLE
13890: LD_INT 1
13892: DEC
13893: ST_TO_ADDR
13894: LD_VAR 0 2
13898: PUSH
13899: FOR_TO
13900: IFFALSE 13999
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13902: LD_VAR 0 3
13906: PUSH
13907: LD_VAR 0 1
13911: ARRAY
13912: PPUSH
13913: LD_VAR 0 1
13917: PUSH
13918: LD_INT 4
13920: MOD
13921: PUSH
13922: LD_INT 1
13924: PLUS
13925: PPUSH
13926: CALL_OW 259
13930: PUSH
13931: LD_INT 10
13933: LESS
13934: IFFALSE 13997
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13936: LD_VAR 0 3
13940: PUSH
13941: LD_VAR 0 1
13945: ARRAY
13946: PPUSH
13947: LD_VAR 0 1
13951: PUSH
13952: LD_INT 4
13954: MOD
13955: PUSH
13956: LD_INT 1
13958: PLUS
13959: PPUSH
13960: LD_VAR 0 3
13964: PUSH
13965: LD_VAR 0 1
13969: ARRAY
13970: PPUSH
13971: LD_VAR 0 1
13975: PUSH
13976: LD_INT 4
13978: MOD
13979: PUSH
13980: LD_INT 1
13982: PLUS
13983: PPUSH
13984: CALL_OW 259
13988: PUSH
13989: LD_INT 1
13991: PLUS
13992: PPUSH
13993: CALL_OW 237
13997: GO 13899
13999: POP
14000: POP
// end ;
14001: PPOPN 3
14003: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14004: LD_EXP 30
14008: IFFALSE 14016
14010: PUSH
14011: LD_EXP 38
14015: AND
14016: IFFALSE 14036
14018: GO 14020
14020: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14021: LD_INT 4
14023: PPUSH
14024: LD_OWVAR 2
14028: PPUSH
14029: LD_INT 0
14031: PPUSH
14032: CALL_OW 324
14036: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14037: LD_EXP 30
14041: IFFALSE 14049
14043: PUSH
14044: LD_EXP 67
14048: AND
14049: IFFALSE 14069
14051: GO 14053
14053: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14054: LD_INT 19
14056: PPUSH
14057: LD_OWVAR 2
14061: PPUSH
14062: LD_INT 0
14064: PPUSH
14065: CALL_OW 324
14069: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14070: LD_EXP 30
14074: IFFALSE 14082
14076: PUSH
14077: LD_EXP 39
14081: AND
14082: IFFALSE 14184
14084: GO 14086
14086: DISABLE
14087: LD_INT 0
14089: PPUSH
14090: PPUSH
// begin enable ;
14091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14092: LD_ADDR_VAR 0 2
14096: PUSH
14097: LD_INT 22
14099: PUSH
14100: LD_OWVAR 2
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 2
14111: PUSH
14112: LD_INT 34
14114: PUSH
14115: LD_INT 11
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 34
14124: PUSH
14125: LD_INT 30
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: ST_TO_ADDR
// if not tmp then
14146: LD_VAR 0 2
14150: NOT
14151: IFFALSE 14155
// exit ;
14153: GO 14184
// for i in tmp do
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_VAR 0 2
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14182
// begin SetLives ( i , 0 ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 0
14175: PPUSH
14176: CALL_OW 234
// end ;
14180: GO 14165
14182: POP
14183: POP
// end ;
14184: PPOPN 2
14186: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14187: LD_EXP 30
14191: IFFALSE 14199
14193: PUSH
14194: LD_EXP 40
14198: AND
14199: IFFALSE 14219
14201: GO 14203
14203: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14204: LD_INT 32
14206: PPUSH
14207: LD_OWVAR 2
14211: PPUSH
14212: LD_INT 0
14214: PPUSH
14215: CALL_OW 324
14219: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14220: LD_EXP 30
14224: IFFALSE 14232
14226: PUSH
14227: LD_EXP 41
14231: AND
14232: IFFALSE 14415
14234: GO 14236
14236: DISABLE
14237: LD_INT 0
14239: PPUSH
14240: PPUSH
14241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: LD_INT 22
14249: PUSH
14250: LD_OWVAR 2
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 33
14261: PUSH
14262: LD_INT 3
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// if not tmp then
14278: LD_VAR 0 2
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14415
// side := 0 ;
14287: LD_ADDR_VAR 0 3
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// for i := 1 to 8 do
14295: LD_ADDR_VAR 0 1
14299: PUSH
14300: DOUBLE
14301: LD_INT 1
14303: DEC
14304: ST_TO_ADDR
14305: LD_INT 8
14307: PUSH
14308: FOR_TO
14309: IFFALSE 14359
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14311: LD_OWVAR 2
14315: PUSH
14316: LD_VAR 0 1
14320: NONEQUAL
14321: IFFALSE 14343
14323: PUSH
14324: LD_OWVAR 2
14328: PPUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 81
14338: PUSH
14339: LD_INT 2
14341: EQUAL
14342: AND
14343: IFFALSE 14357
// begin side := i ;
14345: LD_ADDR_VAR 0 3
14349: PUSH
14350: LD_VAR 0 1
14354: ST_TO_ADDR
// break ;
14355: GO 14359
// end ;
14357: GO 14308
14359: POP
14360: POP
// if not side then
14361: LD_VAR 0 3
14365: NOT
14366: IFFALSE 14370
// exit ;
14368: GO 14415
// for i := 1 to tmp do
14370: LD_ADDR_VAR 0 1
14374: PUSH
14375: DOUBLE
14376: LD_INT 1
14378: DEC
14379: ST_TO_ADDR
14380: LD_VAR 0 2
14384: PUSH
14385: FOR_TO
14386: IFFALSE 14413
// if Prob ( 60 ) then
14388: LD_INT 60
14390: PPUSH
14391: CALL_OW 13
14395: IFFALSE 14411
// SetSide ( i , side ) ;
14397: LD_VAR 0 1
14401: PPUSH
14402: LD_VAR 0 3
14406: PPUSH
14407: CALL_OW 235
14411: GO 14385
14413: POP
14414: POP
// end ;
14415: PPOPN 3
14417: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14418: LD_EXP 30
14422: IFFALSE 14430
14424: PUSH
14425: LD_EXP 43
14429: AND
14430: IFFALSE 14549
14432: GO 14434
14434: DISABLE
14435: LD_INT 0
14437: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14438: LD_ADDR_VAR 0 1
14442: PUSH
14443: LD_INT 22
14445: PUSH
14446: LD_OWVAR 2
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 21
14457: PUSH
14458: LD_INT 1
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 3
14467: PUSH
14468: LD_INT 23
14470: PUSH
14471: LD_INT 0
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: PPUSH
14487: CALL_OW 69
14491: PUSH
14492: FOR_IN
14493: IFFALSE 14547
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 257
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: LD_INT 3
14513: PUSH
14514: LD_INT 4
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: IN
14523: IFFALSE 14545
// SetClass ( un , rand ( 1 , 4 ) ) ;
14525: LD_VAR 0 1
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: LD_INT 4
14535: PPUSH
14536: CALL_OW 12
14540: PPUSH
14541: CALL_OW 336
14545: GO 14492
14547: POP
14548: POP
// end ;
14549: PPOPN 1
14551: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14552: LD_EXP 30
14556: IFFALSE 14564
14558: PUSH
14559: LD_EXP 42
14563: AND
14564: IFFALSE 14643
14566: GO 14568
14568: DISABLE
14569: LD_INT 0
14571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14572: LD_ADDR_VAR 0 1
14576: PUSH
14577: LD_INT 22
14579: PUSH
14580: LD_OWVAR 2
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 21
14591: PUSH
14592: LD_INT 3
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 69
14607: ST_TO_ADDR
// if not tmp then
14608: LD_VAR 0 1
14612: NOT
14613: IFFALSE 14617
// exit ;
14615: GO 14643
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14617: LD_VAR 0 1
14621: PUSH
14622: LD_INT 1
14624: PPUSH
14625: LD_VAR 0 1
14629: PPUSH
14630: CALL_OW 12
14634: ARRAY
14635: PPUSH
14636: LD_INT 100
14638: PPUSH
14639: CALL_OW 234
// end ;
14643: PPOPN 1
14645: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14646: LD_EXP 30
14650: IFFALSE 14658
14652: PUSH
14653: LD_EXP 44
14657: AND
14658: IFFALSE 14756
14660: GO 14662
14662: DISABLE
14663: LD_INT 0
14665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14666: LD_ADDR_VAR 0 1
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_OWVAR 2
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 21
14685: PUSH
14686: LD_INT 1
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PPUSH
14697: CALL_OW 69
14701: ST_TO_ADDR
// if not tmp then
14702: LD_VAR 0 1
14706: NOT
14707: IFFALSE 14711
// exit ;
14709: GO 14756
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14711: LD_VAR 0 1
14715: PUSH
14716: LD_INT 1
14718: PPUSH
14719: LD_VAR 0 1
14723: PPUSH
14724: CALL_OW 12
14728: ARRAY
14729: PPUSH
14730: LD_INT 1
14732: PPUSH
14733: LD_INT 4
14735: PPUSH
14736: CALL_OW 12
14740: PPUSH
14741: LD_INT 3000
14743: PPUSH
14744: LD_INT 9000
14746: PPUSH
14747: CALL_OW 12
14751: PPUSH
14752: CALL_OW 492
// end ;
14756: PPOPN 1
14758: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14759: LD_EXP 30
14763: IFFALSE 14771
14765: PUSH
14766: LD_EXP 45
14770: AND
14771: IFFALSE 14791
14773: GO 14775
14775: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14776: LD_INT 1
14778: PPUSH
14779: LD_OWVAR 2
14783: PPUSH
14784: LD_INT 0
14786: PPUSH
14787: CALL_OW 324
14791: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14792: LD_EXP 30
14796: IFFALSE 14804
14798: PUSH
14799: LD_EXP 46
14803: AND
14804: IFFALSE 14887
14806: GO 14808
14808: DISABLE
14809: LD_INT 0
14811: PPUSH
14812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14813: LD_ADDR_VAR 0 2
14817: PUSH
14818: LD_INT 22
14820: PUSH
14821: LD_OWVAR 2
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 21
14832: PUSH
14833: LD_INT 3
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PPUSH
14844: CALL_OW 69
14848: ST_TO_ADDR
// if not tmp then
14849: LD_VAR 0 2
14853: NOT
14854: IFFALSE 14858
// exit ;
14856: GO 14887
// for i in tmp do
14858: LD_ADDR_VAR 0 1
14862: PUSH
14863: LD_VAR 0 2
14867: PUSH
14868: FOR_IN
14869: IFFALSE 14885
// SetBLevel ( i , 10 ) ;
14871: LD_VAR 0 1
14875: PPUSH
14876: LD_INT 10
14878: PPUSH
14879: CALL_OW 241
14883: GO 14868
14885: POP
14886: POP
// end ;
14887: PPOPN 2
14889: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14890: LD_EXP 30
14894: IFFALSE 14902
14896: PUSH
14897: LD_EXP 47
14901: AND
14902: IFFALSE 15013
14904: GO 14906
14906: DISABLE
14907: LD_INT 0
14909: PPUSH
14910: PPUSH
14911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14912: LD_ADDR_VAR 0 3
14916: PUSH
14917: LD_INT 22
14919: PUSH
14920: LD_OWVAR 2
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 25
14931: PUSH
14932: LD_INT 1
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL_OW 69
14947: ST_TO_ADDR
// if not tmp then
14948: LD_VAR 0 3
14952: NOT
14953: IFFALSE 14957
// exit ;
14955: GO 15013
// un := tmp [ rand ( 1 , tmp ) ] ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_VAR 0 3
14966: PUSH
14967: LD_INT 1
14969: PPUSH
14970: LD_VAR 0 3
14974: PPUSH
14975: CALL_OW 12
14979: ARRAY
14980: ST_TO_ADDR
// if Crawls ( un ) then
14981: LD_VAR 0 2
14985: PPUSH
14986: CALL_OW 318
14990: IFFALSE 15001
// ComWalk ( un ) ;
14992: LD_VAR 0 2
14996: PPUSH
14997: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15001: LD_VAR 0 2
15005: PPUSH
15006: LD_INT 5
15008: PPUSH
15009: CALL_OW 336
// end ;
15013: PPOPN 3
15015: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15016: LD_EXP 30
15020: IFFALSE 15028
15022: PUSH
15023: LD_EXP 48
15027: AND
15028: IFFALSE 15040
15030: PUSH
15031: LD_OWVAR 67
15035: PUSH
15036: LD_INT 4
15038: LESS
15039: AND
15040: IFFALSE 15059
15042: GO 15044
15044: DISABLE
// begin Difficulty := Difficulty + 1 ;
15045: LD_ADDR_OWVAR 67
15049: PUSH
15050: LD_OWVAR 67
15054: PUSH
15055: LD_INT 1
15057: PLUS
15058: ST_TO_ADDR
// end ;
15059: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15060: LD_EXP 30
15064: IFFALSE 15072
15066: PUSH
15067: LD_EXP 49
15071: AND
15072: IFFALSE 15175
15074: GO 15076
15076: DISABLE
15077: LD_INT 0
15079: PPUSH
// begin for i := 1 to 5 do
15080: LD_ADDR_VAR 0 1
15084: PUSH
15085: DOUBLE
15086: LD_INT 1
15088: DEC
15089: ST_TO_ADDR
15090: LD_INT 5
15092: PUSH
15093: FOR_TO
15094: IFFALSE 15173
// begin uc_nation := nation_nature ;
15096: LD_ADDR_OWVAR 21
15100: PUSH
15101: LD_INT 0
15103: ST_TO_ADDR
// uc_side := 0 ;
15104: LD_ADDR_OWVAR 20
15108: PUSH
15109: LD_INT 0
15111: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15112: LD_ADDR_OWVAR 29
15116: PUSH
15117: LD_INT 12
15119: PUSH
15120: LD_INT 12
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: ST_TO_ADDR
// hc_agressivity := 20 ;
15127: LD_ADDR_OWVAR 35
15131: PUSH
15132: LD_INT 20
15134: ST_TO_ADDR
// hc_class := class_tiger ;
15135: LD_ADDR_OWVAR 28
15139: PUSH
15140: LD_INT 14
15142: ST_TO_ADDR
// hc_gallery :=  ;
15143: LD_ADDR_OWVAR 33
15147: PUSH
15148: LD_STRING 
15150: ST_TO_ADDR
// hc_name :=  ;
15151: LD_ADDR_OWVAR 26
15155: PUSH
15156: LD_STRING 
15158: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15159: CALL_OW 44
15163: PPUSH
15164: LD_INT 0
15166: PPUSH
15167: CALL_OW 51
// end ;
15171: GO 15093
15173: POP
15174: POP
// end ;
15175: PPOPN 1
15177: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15178: LD_EXP 30
15182: IFFALSE 15190
15184: PUSH
15185: LD_EXP 50
15189: AND
15190: IFFALSE 15199
15192: GO 15194
15194: DISABLE
// StreamSibBomb ;
15195: CALL 15200 0 0
15199: END
// export function StreamSibBomb ; var i , x , y ; begin
15200: LD_INT 0
15202: PPUSH
15203: PPUSH
15204: PPUSH
15205: PPUSH
// result := false ;
15206: LD_ADDR_VAR 0 1
15210: PUSH
15211: LD_INT 0
15213: ST_TO_ADDR
// for i := 1 to 16 do
15214: LD_ADDR_VAR 0 2
15218: PUSH
15219: DOUBLE
15220: LD_INT 1
15222: DEC
15223: ST_TO_ADDR
15224: LD_INT 16
15226: PUSH
15227: FOR_TO
15228: IFFALSE 15427
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15230: LD_ADDR_VAR 0 3
15234: PUSH
15235: LD_INT 10
15237: PUSH
15238: LD_INT 20
15240: PUSH
15241: LD_INT 30
15243: PUSH
15244: LD_INT 40
15246: PUSH
15247: LD_INT 50
15249: PUSH
15250: LD_INT 60
15252: PUSH
15253: LD_INT 70
15255: PUSH
15256: LD_INT 80
15258: PUSH
15259: LD_INT 90
15261: PUSH
15262: LD_INT 100
15264: PUSH
15265: LD_INT 110
15267: PUSH
15268: LD_INT 120
15270: PUSH
15271: LD_INT 130
15273: PUSH
15274: LD_INT 140
15276: PUSH
15277: LD_INT 150
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 1
15299: PPUSH
15300: LD_INT 15
15302: PPUSH
15303: CALL_OW 12
15307: ARRAY
15308: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15309: LD_ADDR_VAR 0 4
15313: PUSH
15314: LD_INT 10
15316: PUSH
15317: LD_INT 20
15319: PUSH
15320: LD_INT 30
15322: PUSH
15323: LD_INT 40
15325: PUSH
15326: LD_INT 50
15328: PUSH
15329: LD_INT 60
15331: PUSH
15332: LD_INT 70
15334: PUSH
15335: LD_INT 80
15337: PUSH
15338: LD_INT 90
15340: PUSH
15341: LD_INT 100
15343: PUSH
15344: LD_INT 110
15346: PUSH
15347: LD_INT 120
15349: PUSH
15350: LD_INT 130
15352: PUSH
15353: LD_INT 140
15355: PUSH
15356: LD_INT 150
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 1
15378: PPUSH
15379: LD_INT 15
15381: PPUSH
15382: CALL_OW 12
15386: ARRAY
15387: ST_TO_ADDR
// if ValidHex ( x , y ) then
15388: LD_VAR 0 3
15392: PPUSH
15393: LD_VAR 0 4
15397: PPUSH
15398: CALL_OW 488
15402: IFFALSE 15425
// begin result := [ x , y ] ;
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: LD_VAR 0 3
15413: PUSH
15414: LD_VAR 0 4
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: ST_TO_ADDR
// break ;
15423: GO 15427
// end ; end ;
15425: GO 15227
15427: POP
15428: POP
// if result then
15429: LD_VAR 0 1
15433: IFFALSE 15493
// begin ToLua ( playSibBomb() ) ;
15435: LD_STRING playSibBomb()
15437: PPUSH
15438: CALL_OW 559
// wait ( 0 0$14 ) ;
15442: LD_INT 490
15444: PPUSH
15445: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15449: LD_VAR 0 1
15453: PUSH
15454: LD_INT 1
15456: ARRAY
15457: PPUSH
15458: LD_VAR 0 1
15462: PUSH
15463: LD_INT 2
15465: ARRAY
15466: PPUSH
15467: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15471: LD_VAR 0 1
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: PPUSH
15480: LD_VAR 0 1
15484: PUSH
15485: LD_INT 2
15487: ARRAY
15488: PPUSH
15489: CALL_OW 429
// end ; end ;
15493: LD_VAR 0 1
15497: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15498: LD_EXP 30
15502: IFFALSE 15510
15504: PUSH
15505: LD_EXP 52
15509: AND
15510: IFFALSE 15522
15512: GO 15514
15514: DISABLE
// YouLost (  ) ;
15515: LD_STRING 
15517: PPUSH
15518: CALL_OW 104
15522: END
// every 0 0$1 trigger StreamModeActive and sFog do
15523: LD_EXP 30
15527: IFFALSE 15535
15529: PUSH
15530: LD_EXP 51
15534: AND
15535: IFFALSE 15549
15537: GO 15539
15539: DISABLE
// FogOff ( your_side ) ;
15540: LD_OWVAR 2
15544: PPUSH
15545: CALL_OW 344
15549: END
// every 0 0$1 trigger StreamModeActive and sSun do
15550: LD_EXP 30
15554: IFFALSE 15562
15556: PUSH
15557: LD_EXP 53
15561: AND
15562: IFFALSE 15590
15564: GO 15566
15566: DISABLE
// begin solar_recharge_percent := 0 ;
15567: LD_ADDR_OWVAR 79
15571: PUSH
15572: LD_INT 0
15574: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15575: LD_INT 10500
15577: PPUSH
15578: CALL_OW 67
// solar_recharge_percent := 100 ;
15582: LD_ADDR_OWVAR 79
15586: PUSH
15587: LD_INT 100
15589: ST_TO_ADDR
// end ;
15590: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15591: LD_EXP 30
15595: IFFALSE 15603
15597: PUSH
15598: LD_EXP 54
15602: AND
15603: IFFALSE 15842
15605: GO 15607
15607: DISABLE
15608: LD_INT 0
15610: PPUSH
15611: PPUSH
15612: PPUSH
// begin tmp := [ ] ;
15613: LD_ADDR_VAR 0 3
15617: PUSH
15618: EMPTY
15619: ST_TO_ADDR
// for i := 1 to 6 do
15620: LD_ADDR_VAR 0 1
15624: PUSH
15625: DOUBLE
15626: LD_INT 1
15628: DEC
15629: ST_TO_ADDR
15630: LD_INT 6
15632: PUSH
15633: FOR_TO
15634: IFFALSE 15739
// begin uc_nation := nation_nature ;
15636: LD_ADDR_OWVAR 21
15640: PUSH
15641: LD_INT 0
15643: ST_TO_ADDR
// uc_side := 0 ;
15644: LD_ADDR_OWVAR 20
15648: PUSH
15649: LD_INT 0
15651: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15652: LD_ADDR_OWVAR 29
15656: PUSH
15657: LD_INT 12
15659: PUSH
15660: LD_INT 12
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: ST_TO_ADDR
// hc_agressivity := 20 ;
15667: LD_ADDR_OWVAR 35
15671: PUSH
15672: LD_INT 20
15674: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15675: LD_ADDR_OWVAR 28
15679: PUSH
15680: LD_INT 17
15682: ST_TO_ADDR
// hc_gallery :=  ;
15683: LD_ADDR_OWVAR 33
15687: PUSH
15688: LD_STRING 
15690: ST_TO_ADDR
// hc_name :=  ;
15691: LD_ADDR_OWVAR 26
15695: PUSH
15696: LD_STRING 
15698: ST_TO_ADDR
// un := CreateHuman ;
15699: LD_ADDR_VAR 0 2
15703: PUSH
15704: CALL_OW 44
15708: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15709: LD_VAR 0 2
15713: PPUSH
15714: LD_INT 1
15716: PPUSH
15717: CALL_OW 51
// tmp := tmp ^ un ;
15721: LD_ADDR_VAR 0 3
15725: PUSH
15726: LD_VAR 0 3
15730: PUSH
15731: LD_VAR 0 2
15735: ADD
15736: ST_TO_ADDR
// end ;
15737: GO 15633
15739: POP
15740: POP
// repeat wait ( 0 0$1 ) ;
15741: LD_INT 35
15743: PPUSH
15744: CALL_OW 67
// for un in tmp do
15748: LD_ADDR_VAR 0 2
15752: PUSH
15753: LD_VAR 0 3
15757: PUSH
15758: FOR_IN
15759: IFFALSE 15833
// begin if IsDead ( un ) then
15761: LD_VAR 0 2
15765: PPUSH
15766: CALL_OW 301
15770: IFFALSE 15790
// begin tmp := tmp diff un ;
15772: LD_ADDR_VAR 0 3
15776: PUSH
15777: LD_VAR 0 3
15781: PUSH
15782: LD_VAR 0 2
15786: DIFF
15787: ST_TO_ADDR
// continue ;
15788: GO 15758
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15790: LD_VAR 0 2
15794: PPUSH
15795: LD_INT 3
15797: PUSH
15798: LD_INT 22
15800: PUSH
15801: LD_INT 0
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PPUSH
15812: CALL_OW 69
15816: PPUSH
15817: LD_VAR 0 2
15821: PPUSH
15822: CALL_OW 74
15826: PPUSH
15827: CALL_OW 115
// end ;
15831: GO 15758
15833: POP
15834: POP
// until not tmp ;
15835: LD_VAR 0 3
15839: NOT
15840: IFFALSE 15741
// end ;
15842: PPOPN 3
15844: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15845: LD_EXP 30
15849: IFFALSE 15857
15851: PUSH
15852: LD_EXP 55
15856: AND
15857: IFFALSE 15911
15859: GO 15861
15861: DISABLE
// begin ToLua ( displayTroll(); ) ;
15862: LD_STRING displayTroll();
15864: PPUSH
15865: CALL_OW 559
// wait ( 3 3$00 ) ;
15869: LD_INT 6300
15871: PPUSH
15872: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15876: LD_STRING hideTroll();
15878: PPUSH
15879: CALL_OW 559
// wait ( 1 1$00 ) ;
15883: LD_INT 2100
15885: PPUSH
15886: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15890: LD_STRING displayTroll();
15892: PPUSH
15893: CALL_OW 559
// wait ( 1 1$00 ) ;
15897: LD_INT 2100
15899: PPUSH
15900: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15904: LD_STRING hideTroll();
15906: PPUSH
15907: CALL_OW 559
// end ;
15911: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15912: LD_EXP 30
15916: IFFALSE 15924
15918: PUSH
15919: LD_EXP 56
15923: AND
15924: IFFALSE 15987
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
// begin p := 0 ;
15932: LD_ADDR_VAR 0 1
15936: PUSH
15937: LD_INT 0
15939: ST_TO_ADDR
// repeat game_speed := 1 ;
15940: LD_ADDR_OWVAR 65
15944: PUSH
15945: LD_INT 1
15947: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15948: LD_INT 35
15950: PPUSH
15951: CALL_OW 67
// p := p + 1 ;
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_VAR 0 1
15964: PUSH
15965: LD_INT 1
15967: PLUS
15968: ST_TO_ADDR
// until p >= 60 ;
15969: LD_VAR 0 1
15973: PUSH
15974: LD_INT 60
15976: GREATEREQUAL
15977: IFFALSE 15940
// game_speed := 4 ;
15979: LD_ADDR_OWVAR 65
15983: PUSH
15984: LD_INT 4
15986: ST_TO_ADDR
// end ;
15987: PPOPN 1
15989: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15990: LD_EXP 30
15994: IFFALSE 16002
15996: PUSH
15997: LD_EXP 57
16001: AND
16002: IFFALSE 16148
16004: GO 16006
16006: DISABLE
16007: LD_INT 0
16009: PPUSH
16010: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16011: LD_ADDR_VAR 0 1
16015: PUSH
16016: LD_INT 22
16018: PUSH
16019: LD_OWVAR 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 2
16030: PUSH
16031: LD_INT 30
16033: PUSH
16034: LD_INT 0
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 30
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PPUSH
16060: CALL_OW 69
16064: ST_TO_ADDR
// if not depot then
16065: LD_VAR 0 1
16069: NOT
16070: IFFALSE 16074
// exit ;
16072: GO 16148
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16074: LD_ADDR_VAR 0 2
16078: PUSH
16079: LD_VAR 0 1
16083: PUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 12
16096: ARRAY
16097: PPUSH
16098: CALL_OW 274
16102: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16103: LD_VAR 0 2
16107: PPUSH
16108: LD_INT 1
16110: PPUSH
16111: LD_INT 0
16113: PPUSH
16114: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16118: LD_VAR 0 2
16122: PPUSH
16123: LD_INT 2
16125: PPUSH
16126: LD_INT 0
16128: PPUSH
16129: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16133: LD_VAR 0 2
16137: PPUSH
16138: LD_INT 3
16140: PPUSH
16141: LD_INT 0
16143: PPUSH
16144: CALL_OW 277
// end ;
16148: PPOPN 2
16150: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16151: LD_EXP 30
16155: IFFALSE 16163
16157: PUSH
16158: LD_EXP 58
16162: AND
16163: IFFALSE 16260
16165: GO 16167
16167: DISABLE
16168: LD_INT 0
16170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16171: LD_ADDR_VAR 0 1
16175: PUSH
16176: LD_INT 22
16178: PUSH
16179: LD_OWVAR 2
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 21
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 3
16200: PUSH
16201: LD_INT 23
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: PPUSH
16220: CALL_OW 69
16224: ST_TO_ADDR
// if not tmp then
16225: LD_VAR 0 1
16229: NOT
16230: IFFALSE 16234
// exit ;
16232: GO 16260
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16234: LD_VAR 0 1
16238: PUSH
16239: LD_INT 1
16241: PPUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 12
16251: ARRAY
16252: PPUSH
16253: LD_INT 200
16255: PPUSH
16256: CALL_OW 234
// end ;
16260: PPOPN 1
16262: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16263: LD_EXP 30
16267: IFFALSE 16275
16269: PUSH
16270: LD_EXP 59
16274: AND
16275: IFFALSE 16354
16277: GO 16279
16279: DISABLE
16280: LD_INT 0
16282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: LD_INT 22
16290: PUSH
16291: LD_OWVAR 2
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PPUSH
16314: CALL_OW 69
16318: ST_TO_ADDR
// if not tmp then
16319: LD_VAR 0 1
16323: NOT
16324: IFFALSE 16328
// exit ;
16326: GO 16354
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 1
16335: PPUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 12
16345: ARRAY
16346: PPUSH
16347: LD_INT 60
16349: PPUSH
16350: CALL_OW 234
// end ;
16354: PPOPN 1
16356: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16357: LD_EXP 30
16361: IFFALSE 16369
16363: PUSH
16364: LD_EXP 60
16368: AND
16369: IFFALSE 16468
16371: GO 16373
16373: DISABLE
16374: LD_INT 0
16376: PPUSH
16377: PPUSH
// begin enable ;
16378: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16379: LD_ADDR_VAR 0 1
16383: PUSH
16384: LD_INT 22
16386: PUSH
16387: LD_OWVAR 2
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 61
16398: PUSH
16399: EMPTY
16400: LIST
16401: PUSH
16402: LD_INT 33
16404: PUSH
16405: LD_INT 2
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: LIST
16416: PPUSH
16417: CALL_OW 69
16421: ST_TO_ADDR
// if not tmp then
16422: LD_VAR 0 1
16426: NOT
16427: IFFALSE 16431
// exit ;
16429: GO 16468
// for i in tmp do
16431: LD_ADDR_VAR 0 2
16435: PUSH
16436: LD_VAR 0 1
16440: PUSH
16441: FOR_IN
16442: IFFALSE 16466
// if IsControledBy ( i ) then
16444: LD_VAR 0 2
16448: PPUSH
16449: CALL_OW 312
16453: IFFALSE 16464
// ComUnlink ( i ) ;
16455: LD_VAR 0 2
16459: PPUSH
16460: CALL_OW 136
16464: GO 16441
16466: POP
16467: POP
// end ;
16468: PPOPN 2
16470: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16471: LD_EXP 30
16475: IFFALSE 16483
16477: PUSH
16478: LD_EXP 61
16482: AND
16483: IFFALSE 16623
16485: GO 16487
16487: DISABLE
16488: LD_INT 0
16490: PPUSH
16491: PPUSH
// begin ToLua ( displayPowell(); ) ;
16492: LD_STRING displayPowell();
16494: PPUSH
16495: CALL_OW 559
// uc_side := 0 ;
16499: LD_ADDR_OWVAR 20
16503: PUSH
16504: LD_INT 0
16506: ST_TO_ADDR
// uc_nation := 2 ;
16507: LD_ADDR_OWVAR 21
16511: PUSH
16512: LD_INT 2
16514: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16515: LD_ADDR_OWVAR 37
16519: PUSH
16520: LD_INT 14
16522: ST_TO_ADDR
// vc_engine := engine_siberite ;
16523: LD_ADDR_OWVAR 39
16527: PUSH
16528: LD_INT 3
16530: ST_TO_ADDR
// vc_control := control_apeman ;
16531: LD_ADDR_OWVAR 38
16535: PUSH
16536: LD_INT 5
16538: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16539: LD_ADDR_OWVAR 40
16543: PUSH
16544: LD_INT 29
16546: ST_TO_ADDR
// un := CreateVehicle ;
16547: LD_ADDR_VAR 0 2
16551: PUSH
16552: CALL_OW 45
16556: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16557: LD_VAR 0 2
16561: PPUSH
16562: LD_INT 1
16564: PPUSH
16565: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16569: LD_INT 35
16571: PPUSH
16572: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16576: LD_VAR 0 2
16580: PPUSH
16581: LD_INT 22
16583: PUSH
16584: LD_OWVAR 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PPUSH
16593: CALL_OW 69
16597: PPUSH
16598: LD_VAR 0 2
16602: PPUSH
16603: CALL_OW 74
16607: PPUSH
16608: CALL_OW 115
// until IsDead ( un ) ;
16612: LD_VAR 0 2
16616: PPUSH
16617: CALL_OW 301
16621: IFFALSE 16569
// end ;
16623: PPOPN 2
16625: END
// every 0 0$1 trigger StreamModeActive and sStu do
16626: LD_EXP 30
16630: IFFALSE 16638
16632: PUSH
16633: LD_EXP 69
16637: AND
16638: IFFALSE 16654
16640: GO 16642
16642: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16643: LD_STRING displayStucuk();
16645: PPUSH
16646: CALL_OW 559
// ResetFog ;
16650: CALL_OW 335
// end ;
16654: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16655: LD_EXP 30
16659: IFFALSE 16667
16661: PUSH
16662: LD_EXP 62
16666: AND
16667: IFFALSE 16808
16669: GO 16671
16671: DISABLE
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16676: LD_ADDR_VAR 0 2
16680: PUSH
16681: LD_INT 22
16683: PUSH
16684: LD_OWVAR 2
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 21
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PPUSH
16707: CALL_OW 69
16711: ST_TO_ADDR
// if not tmp then
16712: LD_VAR 0 2
16716: NOT
16717: IFFALSE 16721
// exit ;
16719: GO 16808
// un := tmp [ rand ( 1 , tmp ) ] ;
16721: LD_ADDR_VAR 0 1
16725: PUSH
16726: LD_VAR 0 2
16730: PUSH
16731: LD_INT 1
16733: PPUSH
16734: LD_VAR 0 2
16738: PPUSH
16739: CALL_OW 12
16743: ARRAY
16744: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 0
16752: PPUSH
16753: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16757: LD_VAR 0 1
16761: PPUSH
16762: LD_OWVAR 3
16766: PUSH
16767: LD_VAR 0 1
16771: DIFF
16772: PPUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 74
16782: PPUSH
16783: CALL_OW 115
// wait ( 0 0$20 ) ;
16787: LD_INT 700
16789: PPUSH
16790: CALL_OW 67
// SetSide ( un , your_side ) ;
16794: LD_VAR 0 1
16798: PPUSH
16799: LD_OWVAR 2
16803: PPUSH
16804: CALL_OW 235
// end ;
16808: PPOPN 2
16810: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16811: LD_EXP 30
16815: IFFALSE 16823
16817: PUSH
16818: LD_EXP 63
16822: AND
16823: IFFALSE 16929
16825: GO 16827
16827: DISABLE
16828: LD_INT 0
16830: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16831: LD_ADDR_VAR 0 1
16835: PUSH
16836: LD_INT 22
16838: PUSH
16839: LD_OWVAR 2
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 2
16850: PUSH
16851: LD_INT 30
16853: PUSH
16854: LD_INT 0
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 30
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PPUSH
16880: CALL_OW 69
16884: ST_TO_ADDR
// if not depot then
16885: LD_VAR 0 1
16889: NOT
16890: IFFALSE 16894
// exit ;
16892: GO 16929
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16894: LD_VAR 0 1
16898: PUSH
16899: LD_INT 1
16901: ARRAY
16902: PPUSH
16903: CALL_OW 250
16907: PPUSH
16908: LD_VAR 0 1
16912: PUSH
16913: LD_INT 1
16915: ARRAY
16916: PPUSH
16917: CALL_OW 251
16921: PPUSH
16922: LD_INT 70
16924: PPUSH
16925: CALL_OW 495
// end ;
16929: PPOPN 1
16931: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16932: LD_EXP 30
16936: IFFALSE 16944
16938: PUSH
16939: LD_EXP 64
16943: AND
16944: IFFALSE 17155
16946: GO 16948
16948: DISABLE
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
16953: PPUSH
16954: PPUSH
16955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16956: LD_ADDR_VAR 0 5
16960: PUSH
16961: LD_INT 22
16963: PUSH
16964: LD_OWVAR 2
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 21
16975: PUSH
16976: LD_INT 1
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PPUSH
16987: CALL_OW 69
16991: ST_TO_ADDR
// if not tmp then
16992: LD_VAR 0 5
16996: NOT
16997: IFFALSE 17001
// exit ;
16999: GO 17155
// for i in tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: LD_VAR 0 5
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17153
// begin d := rand ( 0 , 5 ) ;
17014: LD_ADDR_VAR 0 4
17018: PUSH
17019: LD_INT 0
17021: PPUSH
17022: LD_INT 5
17024: PPUSH
17025: CALL_OW 12
17029: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17030: LD_ADDR_VAR 0 2
17034: PUSH
17035: LD_VAR 0 1
17039: PPUSH
17040: CALL_OW 250
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: LD_INT 3
17052: PPUSH
17053: LD_INT 12
17055: PPUSH
17056: CALL_OW 12
17060: PPUSH
17061: CALL_OW 272
17065: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17066: LD_ADDR_VAR 0 3
17070: PUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: CALL_OW 251
17080: PPUSH
17081: LD_VAR 0 4
17085: PPUSH
17086: LD_INT 3
17088: PPUSH
17089: LD_INT 12
17091: PPUSH
17092: CALL_OW 12
17096: PPUSH
17097: CALL_OW 273
17101: ST_TO_ADDR
// if ValidHex ( x , y ) then
17102: LD_VAR 0 2
17106: PPUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: CALL_OW 488
17116: IFFALSE 17151
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17118: LD_VAR 0 1
17122: PPUSH
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: LD_INT 3
17135: PPUSH
17136: LD_INT 6
17138: PPUSH
17139: CALL_OW 12
17143: PPUSH
17144: LD_INT 1
17146: PPUSH
17147: CALL_OW 483
// end ;
17151: GO 17011
17153: POP
17154: POP
// end ;
17155: PPOPN 5
17157: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17158: LD_EXP 30
17162: IFFALSE 17170
17164: PUSH
17165: LD_EXP 65
17169: AND
17170: IFFALSE 17264
17172: GO 17174
17174: DISABLE
17175: LD_INT 0
17177: PPUSH
17178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17179: LD_ADDR_VAR 0 2
17183: PUSH
17184: LD_INT 22
17186: PUSH
17187: LD_OWVAR 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 32
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: PPUSH
17221: CALL_OW 69
17225: ST_TO_ADDR
// if not tmp then
17226: LD_VAR 0 2
17230: NOT
17231: IFFALSE 17235
// exit ;
17233: GO 17264
// for i in tmp do
17235: LD_ADDR_VAR 0 1
17239: PUSH
17240: LD_VAR 0 2
17244: PUSH
17245: FOR_IN
17246: IFFALSE 17262
// SetFuel ( i , 0 ) ;
17248: LD_VAR 0 1
17252: PPUSH
17253: LD_INT 0
17255: PPUSH
17256: CALL_OW 240
17260: GO 17245
17262: POP
17263: POP
// end ;
17264: PPOPN 2
17266: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17267: LD_EXP 30
17271: IFFALSE 17279
17273: PUSH
17274: LD_EXP 66
17278: AND
17279: IFFALSE 17345
17281: GO 17283
17283: DISABLE
17284: LD_INT 0
17286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_INT 22
17294: PUSH
17295: LD_OWVAR 2
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 30
17306: PUSH
17307: LD_INT 29
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: ST_TO_ADDR
// if not tmp then
17323: LD_VAR 0 1
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17345
// DestroyUnit ( tmp [ 1 ] ) ;
17332: LD_VAR 0 1
17336: PUSH
17337: LD_INT 1
17339: ARRAY
17340: PPUSH
17341: CALL_OW 65
// end ;
17345: PPOPN 1
17347: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17348: LD_EXP 30
17352: IFFALSE 17360
17354: PUSH
17355: LD_EXP 68
17359: AND
17360: IFFALSE 17489
17362: GO 17364
17364: DISABLE
17365: LD_INT 0
17367: PPUSH
// begin uc_side := 0 ;
17368: LD_ADDR_OWVAR 20
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// uc_nation := nation_arabian ;
17376: LD_ADDR_OWVAR 21
17380: PUSH
17381: LD_INT 2
17383: ST_TO_ADDR
// hc_gallery :=  ;
17384: LD_ADDR_OWVAR 33
17388: PUSH
17389: LD_STRING 
17391: ST_TO_ADDR
// hc_name :=  ;
17392: LD_ADDR_OWVAR 26
17396: PUSH
17397: LD_STRING 
17399: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17400: LD_INT 1
17402: PPUSH
17403: LD_INT 11
17405: PPUSH
17406: LD_INT 10
17408: PPUSH
17409: CALL_OW 380
// un := CreateHuman ;
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: CALL_OW 44
17422: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17423: LD_VAR 0 1
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17435: LD_INT 35
17437: PPUSH
17438: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17442: LD_VAR 0 1
17446: PPUSH
17447: LD_INT 22
17449: PUSH
17450: LD_OWVAR 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PPUSH
17459: CALL_OW 69
17463: PPUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 74
17473: PPUSH
17474: CALL_OW 115
// until IsDead ( un ) ;
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 301
17487: IFFALSE 17435
// end ;
17489: PPOPN 1
17491: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17492: LD_EXP 30
17496: IFFALSE 17504
17498: PUSH
17499: LD_EXP 70
17503: AND
17504: IFFALSE 17516
17506: GO 17508
17508: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17509: LD_STRING earthquake(getX(game), 0, 32)
17511: PPUSH
17512: CALL_OW 559
17516: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17517: LD_EXP 30
17521: IFFALSE 17529
17523: PUSH
17524: LD_EXP 71
17528: AND
17529: IFFALSE 17620
17531: GO 17533
17533: DISABLE
17534: LD_INT 0
17536: PPUSH
// begin enable ;
17537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: LD_INT 22
17545: PUSH
17546: LD_OWVAR 2
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 21
17557: PUSH
17558: LD_INT 2
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 33
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: PPUSH
17580: CALL_OW 69
17584: ST_TO_ADDR
// if not tmp then
17585: LD_VAR 0 1
17589: NOT
17590: IFFALSE 17594
// exit ;
17592: GO 17620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17594: LD_VAR 0 1
17598: PUSH
17599: LD_INT 1
17601: PPUSH
17602: LD_VAR 0 1
17606: PPUSH
17607: CALL_OW 12
17611: ARRAY
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 234
// end ;
17620: PPOPN 1
17622: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17623: LD_EXP 30
17627: IFFALSE 17635
17629: PUSH
17630: LD_EXP 72
17634: AND
17635: IFFALSE 17776
17637: GO 17639
17639: DISABLE
17640: LD_INT 0
17642: PPUSH
17643: PPUSH
17644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_INT 22
17652: PUSH
17653: LD_OWVAR 2
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 25
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 69
17680: ST_TO_ADDR
// if not tmp then
17681: LD_VAR 0 3
17685: NOT
17686: IFFALSE 17690
// exit ;
17688: GO 17776
// un := tmp [ rand ( 1 , tmp ) ] ;
17690: LD_ADDR_VAR 0 2
17694: PUSH
17695: LD_VAR 0 3
17699: PUSH
17700: LD_INT 1
17702: PPUSH
17703: LD_VAR 0 3
17707: PPUSH
17708: CALL_OW 12
17712: ARRAY
17713: ST_TO_ADDR
// if Crawls ( un ) then
17714: LD_VAR 0 2
17718: PPUSH
17719: CALL_OW 318
17723: IFFALSE 17734
// ComWalk ( un ) ;
17725: LD_VAR 0 2
17729: PPUSH
17730: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: LD_INT 9
17741: PPUSH
17742: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17746: LD_INT 28
17748: PPUSH
17749: LD_OWVAR 2
17753: PPUSH
17754: LD_INT 2
17756: PPUSH
17757: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17761: LD_INT 29
17763: PPUSH
17764: LD_OWVAR 2
17768: PPUSH
17769: LD_INT 2
17771: PPUSH
17772: CALL_OW 322
// end ;
17776: PPOPN 3
17778: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17779: LD_EXP 30
17783: IFFALSE 17791
17785: PUSH
17786: LD_EXP 73
17790: AND
17791: IFFALSE 17902
17793: GO 17795
17795: DISABLE
17796: LD_INT 0
17798: PPUSH
17799: PPUSH
17800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17801: LD_ADDR_VAR 0 3
17805: PUSH
17806: LD_INT 22
17808: PUSH
17809: LD_OWVAR 2
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 25
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: CALL_OW 69
17836: ST_TO_ADDR
// if not tmp then
17837: LD_VAR 0 3
17841: NOT
17842: IFFALSE 17846
// exit ;
17844: GO 17902
// un := tmp [ rand ( 1 , tmp ) ] ;
17846: LD_ADDR_VAR 0 2
17850: PUSH
17851: LD_VAR 0 3
17855: PUSH
17856: LD_INT 1
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: CALL_OW 12
17868: ARRAY
17869: ST_TO_ADDR
// if Crawls ( un ) then
17870: LD_VAR 0 2
17874: PPUSH
17875: CALL_OW 318
17879: IFFALSE 17890
// ComWalk ( un ) ;
17881: LD_VAR 0 2
17885: PPUSH
17886: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17890: LD_VAR 0 2
17894: PPUSH
17895: LD_INT 8
17897: PPUSH
17898: CALL_OW 336
// end ;
17902: PPOPN 3
17904: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17905: LD_EXP 30
17909: IFFALSE 17917
17911: PUSH
17912: LD_EXP 74
17916: AND
17917: IFFALSE 18061
17919: GO 17921
17921: DISABLE
17922: LD_INT 0
17924: PPUSH
17925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17926: LD_ADDR_VAR 0 2
17930: PUSH
17931: LD_INT 22
17933: PUSH
17934: LD_OWVAR 2
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 21
17945: PUSH
17946: LD_INT 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: LD_INT 34
17958: PUSH
17959: LD_INT 12
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 34
17968: PUSH
17969: LD_INT 51
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 34
17978: PUSH
17979: LD_INT 32
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: PPUSH
17997: CALL_OW 69
18001: ST_TO_ADDR
// if not tmp then
18002: LD_VAR 0 2
18006: NOT
18007: IFFALSE 18011
// exit ;
18009: GO 18061
// for i in tmp do
18011: LD_ADDR_VAR 0 1
18015: PUSH
18016: LD_VAR 0 2
18020: PUSH
18021: FOR_IN
18022: IFFALSE 18059
// if GetCargo ( i , mat_artifact ) = 0 then
18024: LD_VAR 0 1
18028: PPUSH
18029: LD_INT 4
18031: PPUSH
18032: CALL_OW 289
18036: PUSH
18037: LD_INT 0
18039: EQUAL
18040: IFFALSE 18057
// SetCargo ( i , mat_siberit , 100 ) ;
18042: LD_VAR 0 1
18046: PPUSH
18047: LD_INT 3
18049: PPUSH
18050: LD_INT 100
18052: PPUSH
18053: CALL_OW 290
18057: GO 18021
18059: POP
18060: POP
// end ;
18061: PPOPN 2
18063: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18064: LD_EXP 30
18068: IFFALSE 18076
18070: PUSH
18071: LD_EXP 75
18075: AND
18076: IFFALSE 18259
18078: GO 18080
18080: DISABLE
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18085: LD_ADDR_VAR 0 2
18089: PUSH
18090: LD_INT 22
18092: PUSH
18093: LD_OWVAR 2
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: ST_TO_ADDR
// if not tmp then
18107: LD_VAR 0 2
18111: NOT
18112: IFFALSE 18116
// exit ;
18114: GO 18259
// for i := 1 to 2 do
18116: LD_ADDR_VAR 0 1
18120: PUSH
18121: DOUBLE
18122: LD_INT 1
18124: DEC
18125: ST_TO_ADDR
18126: LD_INT 2
18128: PUSH
18129: FOR_TO
18130: IFFALSE 18257
// begin uc_side := your_side ;
18132: LD_ADDR_OWVAR 20
18136: PUSH
18137: LD_OWVAR 2
18141: ST_TO_ADDR
// uc_nation := nation_american ;
18142: LD_ADDR_OWVAR 21
18146: PUSH
18147: LD_INT 1
18149: ST_TO_ADDR
// vc_chassis := us_morphling ;
18150: LD_ADDR_OWVAR 37
18154: PUSH
18155: LD_INT 5
18157: ST_TO_ADDR
// vc_engine := engine_siberite ;
18158: LD_ADDR_OWVAR 39
18162: PUSH
18163: LD_INT 3
18165: ST_TO_ADDR
// vc_control := control_computer ;
18166: LD_ADDR_OWVAR 38
18170: PUSH
18171: LD_INT 3
18173: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18174: LD_ADDR_OWVAR 40
18178: PUSH
18179: LD_INT 10
18181: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18182: LD_VAR 0 2
18186: PUSH
18187: LD_INT 1
18189: ARRAY
18190: PPUSH
18191: CALL_OW 310
18195: NOT
18196: IFFALSE 18243
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18198: CALL_OW 45
18202: PPUSH
18203: LD_VAR 0 2
18207: PUSH
18208: LD_INT 1
18210: ARRAY
18211: PPUSH
18212: CALL_OW 250
18216: PPUSH
18217: LD_VAR 0 2
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PPUSH
18226: CALL_OW 251
18230: PPUSH
18231: LD_INT 12
18233: PPUSH
18234: LD_INT 1
18236: PPUSH
18237: CALL_OW 50
18241: GO 18255
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18243: CALL_OW 45
18247: PPUSH
18248: LD_INT 1
18250: PPUSH
18251: CALL_OW 51
// end ;
18255: GO 18129
18257: POP
18258: POP
// end ;
18259: PPOPN 2
18261: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18262: LD_EXP 30
18266: IFFALSE 18274
18268: PUSH
18269: LD_EXP 76
18273: AND
18274: IFFALSE 18496
18276: GO 18278
18278: DISABLE
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18287: LD_ADDR_VAR 0 6
18291: PUSH
18292: LD_INT 22
18294: PUSH
18295: LD_OWVAR 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 21
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 3
18316: PUSH
18317: LD_INT 23
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: PPUSH
18336: CALL_OW 69
18340: ST_TO_ADDR
// if not tmp then
18341: LD_VAR 0 6
18345: NOT
18346: IFFALSE 18350
// exit ;
18348: GO 18496
// s1 := rand ( 1 , 4 ) ;
18350: LD_ADDR_VAR 0 2
18354: PUSH
18355: LD_INT 1
18357: PPUSH
18358: LD_INT 4
18360: PPUSH
18361: CALL_OW 12
18365: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18366: LD_ADDR_VAR 0 4
18370: PUSH
18371: LD_VAR 0 6
18375: PUSH
18376: LD_INT 1
18378: ARRAY
18379: PPUSH
18380: LD_VAR 0 2
18384: PPUSH
18385: CALL_OW 259
18389: ST_TO_ADDR
// if s1 = 1 then
18390: LD_VAR 0 2
18394: PUSH
18395: LD_INT 1
18397: EQUAL
18398: IFFALSE 18418
// s2 := rand ( 2 , 4 ) else
18400: LD_ADDR_VAR 0 3
18404: PUSH
18405: LD_INT 2
18407: PPUSH
18408: LD_INT 4
18410: PPUSH
18411: CALL_OW 12
18415: ST_TO_ADDR
18416: GO 18426
// s2 := 1 ;
18418: LD_ADDR_VAR 0 3
18422: PUSH
18423: LD_INT 1
18425: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18426: LD_ADDR_VAR 0 5
18430: PUSH
18431: LD_VAR 0 6
18435: PUSH
18436: LD_INT 1
18438: ARRAY
18439: PPUSH
18440: LD_VAR 0 3
18444: PPUSH
18445: CALL_OW 259
18449: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18450: LD_VAR 0 6
18454: PUSH
18455: LD_INT 1
18457: ARRAY
18458: PPUSH
18459: LD_VAR 0 2
18463: PPUSH
18464: LD_VAR 0 5
18468: PPUSH
18469: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18473: LD_VAR 0 6
18477: PUSH
18478: LD_INT 1
18480: ARRAY
18481: PPUSH
18482: LD_VAR 0 3
18486: PPUSH
18487: LD_VAR 0 4
18491: PPUSH
18492: CALL_OW 237
// end ;
18496: PPOPN 6
18498: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18499: LD_EXP 30
18503: IFFALSE 18511
18505: PUSH
18506: LD_EXP 77
18510: AND
18511: IFFALSE 18590
18513: GO 18515
18515: DISABLE
18516: LD_INT 0
18518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18519: LD_ADDR_VAR 0 1
18523: PUSH
18524: LD_INT 22
18526: PUSH
18527: LD_OWVAR 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 30
18538: PUSH
18539: LD_INT 3
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PPUSH
18550: CALL_OW 69
18554: ST_TO_ADDR
// if not tmp then
18555: LD_VAR 0 1
18559: NOT
18560: IFFALSE 18564
// exit ;
18562: GO 18590
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18564: LD_VAR 0 1
18568: PUSH
18569: LD_INT 1
18571: PPUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 12
18581: ARRAY
18582: PPUSH
18583: LD_INT 1
18585: PPUSH
18586: CALL_OW 234
// end ;
18590: PPOPN 1
18592: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18593: LD_EXP 30
18597: IFFALSE 18605
18599: PUSH
18600: LD_EXP 78
18604: AND
18605: IFFALSE 18717
18607: GO 18609
18609: DISABLE
18610: LD_INT 0
18612: PPUSH
18613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_INT 22
18621: PUSH
18622: LD_OWVAR 2
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: LD_INT 30
18636: PUSH
18637: LD_INT 27
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 30
18646: PUSH
18647: LD_INT 26
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 30
18656: PUSH
18657: LD_INT 28
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PPUSH
18674: CALL_OW 69
18678: ST_TO_ADDR
// if not tmp then
18679: LD_VAR 0 2
18683: NOT
18684: IFFALSE 18688
// exit ;
18686: GO 18717
// for i in tmp do
18688: LD_ADDR_VAR 0 1
18692: PUSH
18693: LD_VAR 0 2
18697: PUSH
18698: FOR_IN
18699: IFFALSE 18715
// SetLives ( i , 1 ) ;
18701: LD_VAR 0 1
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 234
18713: GO 18698
18715: POP
18716: POP
// end ;
18717: PPOPN 2
18719: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18720: LD_EXP 30
18724: IFFALSE 18732
18726: PUSH
18727: LD_EXP 79
18731: AND
18732: IFFALSE 19019
18734: GO 18736
18736: DISABLE
18737: LD_INT 0
18739: PPUSH
18740: PPUSH
18741: PPUSH
// begin i := rand ( 1 , 7 ) ;
18742: LD_ADDR_VAR 0 1
18746: PUSH
18747: LD_INT 1
18749: PPUSH
18750: LD_INT 7
18752: PPUSH
18753: CALL_OW 12
18757: ST_TO_ADDR
// case i of 1 :
18758: LD_VAR 0 1
18762: PUSH
18763: LD_INT 1
18765: DOUBLE
18766: EQUAL
18767: IFTRUE 18771
18769: GO 18781
18771: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18772: LD_STRING earthquake(getX(game), 0, 32)
18774: PPUSH
18775: CALL_OW 559
18779: GO 19019
18781: LD_INT 2
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18803
18789: POP
// begin ToLua ( displayStucuk(); ) ;
18790: LD_STRING displayStucuk();
18792: PPUSH
18793: CALL_OW 559
// ResetFog ;
18797: CALL_OW 335
// end ; 3 :
18801: GO 19019
18803: LD_INT 3
18805: DOUBLE
18806: EQUAL
18807: IFTRUE 18811
18809: GO 18915
18811: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: LD_INT 22
18819: PUSH
18820: LD_OWVAR 2
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 25
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PPUSH
18843: CALL_OW 69
18847: ST_TO_ADDR
// if not tmp then
18848: LD_VAR 0 2
18852: NOT
18853: IFFALSE 18857
// exit ;
18855: GO 19019
// un := tmp [ rand ( 1 , tmp ) ] ;
18857: LD_ADDR_VAR 0 3
18861: PUSH
18862: LD_VAR 0 2
18866: PUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_VAR 0 2
18874: PPUSH
18875: CALL_OW 12
18879: ARRAY
18880: ST_TO_ADDR
// if Crawls ( un ) then
18881: LD_VAR 0 3
18885: PPUSH
18886: CALL_OW 318
18890: IFFALSE 18901
// ComWalk ( un ) ;
18892: LD_VAR 0 3
18896: PPUSH
18897: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18901: LD_VAR 0 3
18905: PPUSH
18906: LD_INT 8
18908: PPUSH
18909: CALL_OW 336
// end ; 4 :
18913: GO 19019
18915: LD_INT 4
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18997
18923: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18924: LD_ADDR_VAR 0 2
18928: PUSH
18929: LD_INT 22
18931: PUSH
18932: LD_OWVAR 2
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 30
18943: PUSH
18944: LD_INT 29
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: ST_TO_ADDR
// if not tmp then
18960: LD_VAR 0 2
18964: NOT
18965: IFFALSE 18969
// exit ;
18967: GO 19019
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18969: LD_VAR 0 2
18973: PUSH
18974: LD_INT 1
18976: ARRAY
18977: PPUSH
18978: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18982: LD_VAR 0 2
18986: PUSH
18987: LD_INT 1
18989: ARRAY
18990: PPUSH
18991: CALL_OW 65
// end ; 5 .. 7 :
18995: GO 19019
18997: LD_INT 5
18999: DOUBLE
19000: GREATEREQUAL
19001: IFFALSE 19009
19003: LD_INT 7
19005: DOUBLE
19006: LESSEQUAL
19007: IFTRUE 19011
19009: GO 19018
19011: POP
// StreamSibBomb ; end ;
19012: CALL 15200 0 0
19016: GO 19019
19018: POP
// end ;
19019: PPOPN 3
19021: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19022: LD_EXP 30
19026: IFFALSE 19034
19028: PUSH
19029: LD_EXP 80
19033: AND
19034: IFFALSE 19190
19036: GO 19038
19038: DISABLE
19039: LD_INT 0
19041: PPUSH
19042: PPUSH
19043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19044: LD_ADDR_VAR 0 2
19048: PUSH
19049: LD_INT 81
19051: PUSH
19052: LD_OWVAR 2
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 21
19066: PUSH
19067: LD_INT 1
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 21
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PPUSH
19093: CALL_OW 69
19097: ST_TO_ADDR
// if not tmp then
19098: LD_VAR 0 2
19102: NOT
19103: IFFALSE 19107
// exit ;
19105: GO 19190
// p := 0 ;
19107: LD_ADDR_VAR 0 3
19111: PUSH
19112: LD_INT 0
19114: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19115: LD_INT 35
19117: PPUSH
19118: CALL_OW 67
// p := p + 1 ;
19122: LD_ADDR_VAR 0 3
19126: PUSH
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 1
19134: PLUS
19135: ST_TO_ADDR
// for i in tmp do
19136: LD_ADDR_VAR 0 1
19140: PUSH
19141: LD_VAR 0 2
19145: PUSH
19146: FOR_IN
19147: IFFALSE 19178
// if GetLives ( i ) < 1000 then
19149: LD_VAR 0 1
19153: PPUSH
19154: CALL_OW 256
19158: PUSH
19159: LD_INT 1000
19161: LESS
19162: IFFALSE 19176
// SetLives ( i , 1000 ) ;
19164: LD_VAR 0 1
19168: PPUSH
19169: LD_INT 1000
19171: PPUSH
19172: CALL_OW 234
19176: GO 19146
19178: POP
19179: POP
// until p > 20 ;
19180: LD_VAR 0 3
19184: PUSH
19185: LD_INT 20
19187: GREATER
19188: IFFALSE 19115
// end ;
19190: PPOPN 3
19192: END
// every 0 0$1 trigger StreamModeActive and sTime do
19193: LD_EXP 30
19197: IFFALSE 19205
19199: PUSH
19200: LD_EXP 81
19204: AND
19205: IFFALSE 19240
19207: GO 19209
19209: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19210: LD_INT 28
19212: PPUSH
19213: LD_OWVAR 2
19217: PPUSH
19218: LD_INT 2
19220: PPUSH
19221: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19225: LD_INT 30
19227: PPUSH
19228: LD_OWVAR 2
19232: PPUSH
19233: LD_INT 2
19235: PPUSH
19236: CALL_OW 322
// end ;
19240: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19241: LD_EXP 30
19245: IFFALSE 19253
19247: PUSH
19248: LD_EXP 82
19252: AND
19253: IFFALSE 19374
19255: GO 19257
19257: DISABLE
19258: LD_INT 0
19260: PPUSH
19261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19262: LD_ADDR_VAR 0 2
19266: PUSH
19267: LD_INT 22
19269: PUSH
19270: LD_OWVAR 2
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 21
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 3
19291: PUSH
19292: LD_INT 23
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 69
19315: ST_TO_ADDR
// if not tmp then
19316: LD_VAR 0 2
19320: NOT
19321: IFFALSE 19325
// exit ;
19323: GO 19374
// for i in tmp do
19325: LD_ADDR_VAR 0 1
19329: PUSH
19330: LD_VAR 0 2
19334: PUSH
19335: FOR_IN
19336: IFFALSE 19372
// begin if Crawls ( i ) then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 318
19347: IFFALSE 19358
// ComWalk ( i ) ;
19349: LD_VAR 0 1
19353: PPUSH
19354: CALL_OW 138
// SetClass ( i , 2 ) ;
19358: LD_VAR 0 1
19362: PPUSH
19363: LD_INT 2
19365: PPUSH
19366: CALL_OW 336
// end ;
19370: GO 19335
19372: POP
19373: POP
// end ;
19374: PPOPN 2
19376: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19377: LD_EXP 30
19381: IFFALSE 19389
19383: PUSH
19384: LD_EXP 83
19388: AND
19389: IFFALSE 19679
19391: GO 19393
19393: DISABLE
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
19398: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19399: LD_OWVAR 2
19403: PPUSH
19404: LD_INT 9
19406: PPUSH
19407: LD_INT 1
19409: PPUSH
19410: LD_INT 1
19412: PPUSH
19413: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19417: LD_INT 9
19419: PPUSH
19420: LD_OWVAR 2
19424: PPUSH
19425: CALL_OW 343
// uc_side := 9 ;
19429: LD_ADDR_OWVAR 20
19433: PUSH
19434: LD_INT 9
19436: ST_TO_ADDR
// uc_nation := 2 ;
19437: LD_ADDR_OWVAR 21
19441: PUSH
19442: LD_INT 2
19444: ST_TO_ADDR
// hc_name := Dark Warrior ;
19445: LD_ADDR_OWVAR 26
19449: PUSH
19450: LD_STRING Dark Warrior
19452: ST_TO_ADDR
// hc_gallery :=  ;
19453: LD_ADDR_OWVAR 33
19457: PUSH
19458: LD_STRING 
19460: ST_TO_ADDR
// hc_noskilllimit := true ;
19461: LD_ADDR_OWVAR 76
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19469: LD_ADDR_OWVAR 31
19473: PUSH
19474: LD_INT 30
19476: PUSH
19477: LD_INT 30
19479: PUSH
19480: LD_INT 30
19482: PUSH
19483: LD_INT 30
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: ST_TO_ADDR
// un := CreateHuman ;
19492: LD_ADDR_VAR 0 3
19496: PUSH
19497: CALL_OW 44
19501: ST_TO_ADDR
// hc_noskilllimit := false ;
19502: LD_ADDR_OWVAR 76
19506: PUSH
19507: LD_INT 0
19509: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19510: LD_VAR 0 3
19514: PPUSH
19515: LD_INT 1
19517: PPUSH
19518: CALL_OW 51
// ToLua ( playRanger() ) ;
19522: LD_STRING playRanger()
19524: PPUSH
19525: CALL_OW 559
// p := 0 ;
19529: LD_ADDR_VAR 0 2
19533: PUSH
19534: LD_INT 0
19536: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19537: LD_INT 35
19539: PPUSH
19540: CALL_OW 67
// p := p + 1 ;
19544: LD_ADDR_VAR 0 2
19548: PUSH
19549: LD_VAR 0 2
19553: PUSH
19554: LD_INT 1
19556: PLUS
19557: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19558: LD_VAR 0 3
19562: PPUSH
19563: CALL_OW 256
19567: PUSH
19568: LD_INT 1000
19570: LESS
19571: IFFALSE 19585
// SetLives ( un , 1000 ) ;
19573: LD_VAR 0 3
19577: PPUSH
19578: LD_INT 1000
19580: PPUSH
19581: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19585: LD_VAR 0 3
19589: PPUSH
19590: LD_INT 81
19592: PUSH
19593: LD_OWVAR 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 91
19604: PUSH
19605: LD_VAR 0 3
19609: PUSH
19610: LD_INT 30
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PPUSH
19622: CALL_OW 69
19626: PPUSH
19627: LD_VAR 0 3
19631: PPUSH
19632: CALL_OW 74
19636: PPUSH
19637: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19641: LD_VAR 0 2
19645: PUSH
19646: LD_INT 80
19648: GREATER
19649: IFTRUE 19662
19651: PUSH
19652: LD_VAR 0 3
19656: PPUSH
19657: CALL_OW 301
19661: OR
19662: IFFALSE 19537
// if un then
19664: LD_VAR 0 3
19668: IFFALSE 19679
// RemoveUnit ( un ) ;
19670: LD_VAR 0 3
19674: PPUSH
19675: CALL_OW 64
// end ;
19679: PPOPN 3
19681: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19682: LD_EXP 84
19686: IFFALSE 19802
19688: GO 19690
19690: DISABLE
19691: LD_INT 0
19693: PPUSH
19694: PPUSH
19695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19696: LD_ADDR_VAR 0 2
19700: PUSH
19701: LD_INT 81
19703: PUSH
19704: LD_OWVAR 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 21
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PPUSH
19727: CALL_OW 69
19731: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19732: LD_STRING playComputer()
19734: PPUSH
19735: CALL_OW 559
// if not tmp then
19739: LD_VAR 0 2
19743: NOT
19744: IFFALSE 19748
// exit ;
19746: GO 19802
// for i in tmp do
19748: LD_ADDR_VAR 0 1
19752: PUSH
19753: LD_VAR 0 2
19757: PUSH
19758: FOR_IN
19759: IFFALSE 19800
// for j := 1 to 4 do
19761: LD_ADDR_VAR 0 3
19765: PUSH
19766: DOUBLE
19767: LD_INT 1
19769: DEC
19770: ST_TO_ADDR
19771: LD_INT 4
19773: PUSH
19774: FOR_TO
19775: IFFALSE 19796
// SetSkill ( i , j , 10 ) ;
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_VAR 0 3
19786: PPUSH
19787: LD_INT 10
19789: PPUSH
19790: CALL_OW 237
19794: GO 19774
19796: POP
19797: POP
19798: GO 19758
19800: POP
19801: POP
// end ;
19802: PPOPN 3
19804: END
// every 0 0$1 trigger s30 do var i , tmp ;
19805: LD_EXP 85
19809: IFFALSE 19878
19811: GO 19813
19813: DISABLE
19814: LD_INT 0
19816: PPUSH
19817: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19818: LD_ADDR_VAR 0 2
19822: PUSH
19823: LD_INT 22
19825: PUSH
19826: LD_OWVAR 2
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PPUSH
19835: CALL_OW 69
19839: ST_TO_ADDR
// if not tmp then
19840: LD_VAR 0 2
19844: NOT
19845: IFFALSE 19849
// exit ;
19847: GO 19878
// for i in tmp do
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: LD_VAR 0 2
19858: PUSH
19859: FOR_IN
19860: IFFALSE 19876
// SetLives ( i , 300 ) ;
19862: LD_VAR 0 1
19866: PPUSH
19867: LD_INT 300
19869: PPUSH
19870: CALL_OW 234
19874: GO 19859
19876: POP
19877: POP
// end ;
19878: PPOPN 2
19880: END
// every 0 0$1 trigger s60 do var i , tmp ;
19881: LD_EXP 86
19885: IFFALSE 19954
19887: GO 19889
19889: DISABLE
19890: LD_INT 0
19892: PPUSH
19893: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19894: LD_ADDR_VAR 0 2
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_OWVAR 2
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PPUSH
19911: CALL_OW 69
19915: ST_TO_ADDR
// if not tmp then
19916: LD_VAR 0 2
19920: NOT
19921: IFFALSE 19925
// exit ;
19923: GO 19954
// for i in tmp do
19925: LD_ADDR_VAR 0 1
19929: PUSH
19930: LD_VAR 0 2
19934: PUSH
19935: FOR_IN
19936: IFFALSE 19952
// SetLives ( i , 600 ) ;
19938: LD_VAR 0 1
19942: PPUSH
19943: LD_INT 600
19945: PPUSH
19946: CALL_OW 234
19950: GO 19935
19952: POP
19953: POP
// end ;
19954: PPOPN 2
19956: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19957: LD_INT 0
19959: PPUSH
// case cmd of 301 :
19960: LD_VAR 0 1
19964: PUSH
19965: LD_INT 301
19967: DOUBLE
19968: EQUAL
19969: IFTRUE 19973
19971: GO 20005
19973: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19974: LD_VAR 0 6
19978: PPUSH
19979: LD_VAR 0 7
19983: PPUSH
19984: LD_VAR 0 8
19988: PPUSH
19989: LD_VAR 0 4
19993: PPUSH
19994: LD_VAR 0 5
19998: PPUSH
19999: CALL 21218 0 5
20003: GO 20126
20005: LD_INT 302
20007: DOUBLE
20008: EQUAL
20009: IFTRUE 20013
20011: GO 20050
20013: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20014: LD_VAR 0 6
20018: PPUSH
20019: LD_VAR 0 7
20023: PPUSH
20024: LD_VAR 0 8
20028: PPUSH
20029: LD_VAR 0 9
20033: PPUSH
20034: LD_VAR 0 4
20038: PPUSH
20039: LD_VAR 0 5
20043: PPUSH
20044: CALL 21309 0 6
20048: GO 20126
20050: LD_INT 303
20052: DOUBLE
20053: EQUAL
20054: IFTRUE 20058
20056: GO 20095
20058: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20059: LD_VAR 0 6
20063: PPUSH
20064: LD_VAR 0 7
20068: PPUSH
20069: LD_VAR 0 8
20073: PPUSH
20074: LD_VAR 0 9
20078: PPUSH
20079: LD_VAR 0 4
20083: PPUSH
20084: LD_VAR 0 5
20088: PPUSH
20089: CALL 20131 0 6
20093: GO 20126
20095: LD_INT 304
20097: DOUBLE
20098: EQUAL
20099: IFTRUE 20103
20101: GO 20125
20103: POP
// hHackTeleport ( unit , x , y ) ; end ;
20104: LD_VAR 0 2
20108: PPUSH
20109: LD_VAR 0 4
20113: PPUSH
20114: LD_VAR 0 5
20118: PPUSH
20119: CALL 21902 0 3
20123: GO 20126
20125: POP
// end ;
20126: LD_VAR 0 12
20130: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20131: LD_INT 0
20133: PPUSH
20134: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20135: LD_VAR 0 1
20139: PUSH
20140: LD_INT 1
20142: LESS
20143: IFTRUE 20155
20145: PUSH
20146: LD_VAR 0 1
20150: PUSH
20151: LD_INT 3
20153: GREATER
20154: OR
20155: IFTRUE 20173
20157: PUSH
20158: LD_VAR 0 5
20162: PPUSH
20163: LD_VAR 0 6
20167: PPUSH
20168: CALL_OW 428
20172: OR
20173: IFFALSE 20177
// exit ;
20175: GO 20905
// uc_side := your_side ;
20177: LD_ADDR_OWVAR 20
20181: PUSH
20182: LD_OWVAR 2
20186: ST_TO_ADDR
// uc_nation := nation ;
20187: LD_ADDR_OWVAR 21
20191: PUSH
20192: LD_VAR 0 1
20196: ST_TO_ADDR
// bc_level = 1 ;
20197: LD_ADDR_OWVAR 43
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// case btype of 1 :
20205: LD_VAR 0 2
20209: PUSH
20210: LD_INT 1
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20229
20218: POP
// bc_type := b_depot ; 2 :
20219: LD_ADDR_OWVAR 42
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
20227: GO 20849
20229: LD_INT 2
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20248
20237: POP
// bc_type := b_warehouse ; 3 :
20238: LD_ADDR_OWVAR 42
20242: PUSH
20243: LD_INT 1
20245: ST_TO_ADDR
20246: GO 20849
20248: LD_INT 3
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20267
20256: POP
// bc_type := b_lab ; 4 .. 9 :
20257: LD_ADDR_OWVAR 42
20261: PUSH
20262: LD_INT 6
20264: ST_TO_ADDR
20265: GO 20849
20267: LD_INT 4
20269: DOUBLE
20270: GREATEREQUAL
20271: IFFALSE 20279
20273: LD_INT 9
20275: DOUBLE
20276: LESSEQUAL
20277: IFTRUE 20281
20279: GO 20341
20281: POP
// begin bc_type := b_lab_half ;
20282: LD_ADDR_OWVAR 42
20286: PUSH
20287: LD_INT 7
20289: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20290: LD_ADDR_OWVAR 44
20294: PUSH
20295: LD_INT 10
20297: PUSH
20298: LD_INT 11
20300: PUSH
20301: LD_INT 12
20303: PUSH
20304: LD_INT 15
20306: PUSH
20307: LD_INT 14
20309: PUSH
20310: LD_INT 13
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: PUSH
20321: LD_VAR 0 2
20325: PUSH
20326: LD_INT 3
20328: MINUS
20329: ARRAY
20330: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20331: LD_ADDR_OWVAR 45
20335: PUSH
20336: LD_INT 9
20338: ST_TO_ADDR
// end ; 10 .. 13 :
20339: GO 20849
20341: LD_INT 10
20343: DOUBLE
20344: GREATEREQUAL
20345: IFFALSE 20353
20347: LD_INT 13
20349: DOUBLE
20350: LESSEQUAL
20351: IFTRUE 20355
20353: GO 20432
20355: POP
// begin bc_type := b_lab_full ;
20356: LD_ADDR_OWVAR 42
20360: PUSH
20361: LD_INT 8
20363: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20364: LD_ADDR_OWVAR 44
20368: PUSH
20369: LD_INT 10
20371: PUSH
20372: LD_INT 12
20374: PUSH
20375: LD_INT 14
20377: PUSH
20378: LD_INT 13
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: LD_VAR 0 2
20391: PUSH
20392: LD_INT 9
20394: MINUS
20395: ARRAY
20396: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20397: LD_ADDR_OWVAR 45
20401: PUSH
20402: LD_INT 11
20404: PUSH
20405: LD_INT 15
20407: PUSH
20408: LD_INT 12
20410: PUSH
20411: LD_INT 15
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: PUSH
20420: LD_VAR 0 2
20424: PUSH
20425: LD_INT 9
20427: MINUS
20428: ARRAY
20429: ST_TO_ADDR
// end ; 14 :
20430: GO 20849
20432: LD_INT 14
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20451
20440: POP
// bc_type := b_workshop ; 15 :
20441: LD_ADDR_OWVAR 42
20445: PUSH
20446: LD_INT 2
20448: ST_TO_ADDR
20449: GO 20849
20451: LD_INT 15
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20470
20459: POP
// bc_type := b_factory ; 16 :
20460: LD_ADDR_OWVAR 42
20464: PUSH
20465: LD_INT 3
20467: ST_TO_ADDR
20468: GO 20849
20470: LD_INT 16
20472: DOUBLE
20473: EQUAL
20474: IFTRUE 20478
20476: GO 20489
20478: POP
// bc_type := b_ext_gun ; 17 :
20479: LD_ADDR_OWVAR 42
20483: PUSH
20484: LD_INT 17
20486: ST_TO_ADDR
20487: GO 20849
20489: LD_INT 17
20491: DOUBLE
20492: EQUAL
20493: IFTRUE 20497
20495: GO 20525
20497: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20498: LD_ADDR_OWVAR 42
20502: PUSH
20503: LD_INT 19
20505: PUSH
20506: LD_INT 23
20508: PUSH
20509: LD_INT 19
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: LIST
20516: PUSH
20517: LD_VAR 0 1
20521: ARRAY
20522: ST_TO_ADDR
20523: GO 20849
20525: LD_INT 18
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20544
20533: POP
// bc_type := b_ext_radar ; 19 :
20534: LD_ADDR_OWVAR 42
20538: PUSH
20539: LD_INT 20
20541: ST_TO_ADDR
20542: GO 20849
20544: LD_INT 19
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_ext_radio ; 20 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 22
20560: ST_TO_ADDR
20561: GO 20849
20563: LD_INT 20
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20582
20571: POP
// bc_type := b_ext_siberium ; 21 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 21
20579: ST_TO_ADDR
20580: GO 20849
20582: LD_INT 21
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20601
20590: POP
// bc_type := b_ext_computer ; 22 :
20591: LD_ADDR_OWVAR 42
20595: PUSH
20596: LD_INT 24
20598: ST_TO_ADDR
20599: GO 20849
20601: LD_INT 22
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20620
20609: POP
// bc_type := b_ext_track ; 23 :
20610: LD_ADDR_OWVAR 42
20614: PUSH
20615: LD_INT 16
20617: ST_TO_ADDR
20618: GO 20849
20620: LD_INT 23
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20639
20628: POP
// bc_type := b_ext_laser ; 24 :
20629: LD_ADDR_OWVAR 42
20633: PUSH
20634: LD_INT 25
20636: ST_TO_ADDR
20637: GO 20849
20639: LD_INT 24
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20647
20645: GO 20658
20647: POP
// bc_type := b_control_tower ; 25 :
20648: LD_ADDR_OWVAR 42
20652: PUSH
20653: LD_INT 36
20655: ST_TO_ADDR
20656: GO 20849
20658: LD_INT 25
20660: DOUBLE
20661: EQUAL
20662: IFTRUE 20666
20664: GO 20677
20666: POP
// bc_type := b_breastwork ; 26 :
20667: LD_ADDR_OWVAR 42
20671: PUSH
20672: LD_INT 31
20674: ST_TO_ADDR
20675: GO 20849
20677: LD_INT 26
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20696
20685: POP
// bc_type := b_bunker ; 27 :
20686: LD_ADDR_OWVAR 42
20690: PUSH
20691: LD_INT 32
20693: ST_TO_ADDR
20694: GO 20849
20696: LD_INT 27
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20715
20704: POP
// bc_type := b_turret ; 28 :
20705: LD_ADDR_OWVAR 42
20709: PUSH
20710: LD_INT 33
20712: ST_TO_ADDR
20713: GO 20849
20715: LD_INT 28
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20734
20723: POP
// bc_type := b_armoury ; 29 :
20724: LD_ADDR_OWVAR 42
20728: PUSH
20729: LD_INT 4
20731: ST_TO_ADDR
20732: GO 20849
20734: LD_INT 29
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20753
20742: POP
// bc_type := b_barracks ; 30 :
20743: LD_ADDR_OWVAR 42
20747: PUSH
20748: LD_INT 5
20750: ST_TO_ADDR
20751: GO 20849
20753: LD_INT 30
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 20772
20761: POP
// bc_type := b_solar_power ; 31 :
20762: LD_ADDR_OWVAR 42
20766: PUSH
20767: LD_INT 27
20769: ST_TO_ADDR
20770: GO 20849
20772: LD_INT 31
20774: DOUBLE
20775: EQUAL
20776: IFTRUE 20780
20778: GO 20791
20780: POP
// bc_type := b_oil_power ; 32 :
20781: LD_ADDR_OWVAR 42
20785: PUSH
20786: LD_INT 26
20788: ST_TO_ADDR
20789: GO 20849
20791: LD_INT 32
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20810
20799: POP
// bc_type := b_siberite_power ; 33 :
20800: LD_ADDR_OWVAR 42
20804: PUSH
20805: LD_INT 28
20807: ST_TO_ADDR
20808: GO 20849
20810: LD_INT 33
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20829
20818: POP
// bc_type := b_oil_mine ; 34 :
20819: LD_ADDR_OWVAR 42
20823: PUSH
20824: LD_INT 29
20826: ST_TO_ADDR
20827: GO 20849
20829: LD_INT 34
20831: DOUBLE
20832: EQUAL
20833: IFTRUE 20837
20835: GO 20848
20837: POP
// bc_type := b_siberite_mine ; end ;
20838: LD_ADDR_OWVAR 42
20842: PUSH
20843: LD_INT 30
20845: ST_TO_ADDR
20846: GO 20849
20848: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20849: LD_ADDR_VAR 0 8
20853: PUSH
20854: LD_VAR 0 5
20858: PPUSH
20859: LD_VAR 0 6
20863: PPUSH
20864: LD_VAR 0 3
20868: PPUSH
20869: CALL_OW 47
20873: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20874: LD_OWVAR 42
20878: PUSH
20879: LD_INT 32
20881: PUSH
20882: LD_INT 33
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: IN
20889: IFFALSE 20905
// PlaceWeaponTurret ( b , weapon ) ;
20891: LD_VAR 0 8
20895: PPUSH
20896: LD_VAR 0 4
20900: PPUSH
20901: CALL_OW 431
// end ;
20905: LD_VAR 0 7
20909: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20910: LD_INT 0
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20916: LD_ADDR_VAR 0 4
20920: PUSH
20921: LD_INT 22
20923: PUSH
20924: LD_OWVAR 2
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: LD_INT 30
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 30
20948: PUSH
20949: LD_INT 1
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PPUSH
20965: CALL_OW 69
20969: ST_TO_ADDR
// if not tmp then
20970: LD_VAR 0 4
20974: NOT
20975: IFFALSE 20979
// exit ;
20977: GO 21038
// for i in tmp do
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_VAR 0 4
20988: PUSH
20989: FOR_IN
20990: IFFALSE 21036
// for j = 1 to 3 do
20992: LD_ADDR_VAR 0 3
20996: PUSH
20997: DOUBLE
20998: LD_INT 1
21000: DEC
21001: ST_TO_ADDR
21002: LD_INT 3
21004: PUSH
21005: FOR_TO
21006: IFFALSE 21032
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21008: LD_VAR 0 2
21012: PPUSH
21013: CALL_OW 274
21017: PPUSH
21018: LD_VAR 0 3
21022: PPUSH
21023: LD_INT 99999
21025: PPUSH
21026: CALL_OW 277
21030: GO 21005
21032: POP
21033: POP
21034: GO 20989
21036: POP
21037: POP
// end ;
21038: LD_VAR 0 1
21042: RET
// export function hHackSetLevel10 ; var i , j ; begin
21043: LD_INT 0
21045: PPUSH
21046: PPUSH
21047: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21048: LD_ADDR_VAR 0 2
21052: PUSH
21053: LD_INT 21
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: PUSH
21068: FOR_IN
21069: IFFALSE 21121
// if IsSelected ( i ) then
21071: LD_VAR 0 2
21075: PPUSH
21076: CALL_OW 306
21080: IFFALSE 21119
// begin for j := 1 to 4 do
21082: LD_ADDR_VAR 0 3
21086: PUSH
21087: DOUBLE
21088: LD_INT 1
21090: DEC
21091: ST_TO_ADDR
21092: LD_INT 4
21094: PUSH
21095: FOR_TO
21096: IFFALSE 21117
// SetSkill ( i , j , 10 ) ;
21098: LD_VAR 0 2
21102: PPUSH
21103: LD_VAR 0 3
21107: PPUSH
21108: LD_INT 10
21110: PPUSH
21111: CALL_OW 237
21115: GO 21095
21117: POP
21118: POP
// end ;
21119: GO 21068
21121: POP
21122: POP
// end ;
21123: LD_VAR 0 1
21127: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21128: LD_INT 0
21130: PPUSH
21131: PPUSH
21132: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21133: LD_ADDR_VAR 0 2
21137: PUSH
21138: LD_INT 22
21140: PUSH
21141: LD_OWVAR 2
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 21
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PPUSH
21164: CALL_OW 69
21168: PUSH
21169: FOR_IN
21170: IFFALSE 21211
// begin for j := 1 to 4 do
21172: LD_ADDR_VAR 0 3
21176: PUSH
21177: DOUBLE
21178: LD_INT 1
21180: DEC
21181: ST_TO_ADDR
21182: LD_INT 4
21184: PUSH
21185: FOR_TO
21186: IFFALSE 21207
// SetSkill ( i , j , 10 ) ;
21188: LD_VAR 0 2
21192: PPUSH
21193: LD_VAR 0 3
21197: PPUSH
21198: LD_INT 10
21200: PPUSH
21201: CALL_OW 237
21205: GO 21185
21207: POP
21208: POP
// end ;
21209: GO 21169
21211: POP
21212: POP
// end ;
21213: LD_VAR 0 1
21217: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21218: LD_INT 0
21220: PPUSH
// uc_side := your_side ;
21221: LD_ADDR_OWVAR 20
21225: PUSH
21226: LD_OWVAR 2
21230: ST_TO_ADDR
// uc_nation := nation ;
21231: LD_ADDR_OWVAR 21
21235: PUSH
21236: LD_VAR 0 1
21240: ST_TO_ADDR
// InitHc ;
21241: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21245: LD_INT 0
21247: PPUSH
21248: LD_VAR 0 2
21252: PPUSH
21253: LD_VAR 0 3
21257: PPUSH
21258: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21262: LD_VAR 0 4
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: CALL_OW 428
21276: PUSH
21277: LD_INT 0
21279: EQUAL
21280: IFFALSE 21304
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21282: CALL_OW 44
21286: PPUSH
21287: LD_VAR 0 4
21291: PPUSH
21292: LD_VAR 0 5
21296: PPUSH
21297: LD_INT 1
21299: PPUSH
21300: CALL_OW 48
// end ;
21304: LD_VAR 0 6
21308: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21309: LD_INT 0
21311: PPUSH
21312: PPUSH
// uc_side := your_side ;
21313: LD_ADDR_OWVAR 20
21317: PUSH
21318: LD_OWVAR 2
21322: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21323: LD_VAR 0 1
21327: PUSH
21328: LD_INT 1
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: LD_INT 3
21336: PUSH
21337: LD_INT 4
21339: PUSH
21340: LD_INT 5
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: IN
21350: IFFALSE 21362
// uc_nation := nation_american else
21352: LD_ADDR_OWVAR 21
21356: PUSH
21357: LD_INT 1
21359: ST_TO_ADDR
21360: GO 21405
// if chassis in [ 11 , 12 , 13 , 14 ] then
21362: LD_VAR 0 1
21366: PUSH
21367: LD_INT 11
21369: PUSH
21370: LD_INT 12
21372: PUSH
21373: LD_INT 13
21375: PUSH
21376: LD_INT 14
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: IN
21385: IFFALSE 21397
// uc_nation := nation_arabian else
21387: LD_ADDR_OWVAR 21
21391: PUSH
21392: LD_INT 2
21394: ST_TO_ADDR
21395: GO 21405
// uc_nation := nation_russian ;
21397: LD_ADDR_OWVAR 21
21401: PUSH
21402: LD_INT 3
21404: ST_TO_ADDR
// vc_chassis := chassis ;
21405: LD_ADDR_OWVAR 37
21409: PUSH
21410: LD_VAR 0 1
21414: ST_TO_ADDR
// vc_engine := engine ;
21415: LD_ADDR_OWVAR 39
21419: PUSH
21420: LD_VAR 0 2
21424: ST_TO_ADDR
// vc_control := control ;
21425: LD_ADDR_OWVAR 38
21429: PUSH
21430: LD_VAR 0 3
21434: ST_TO_ADDR
// vc_weapon := weapon ;
21435: LD_ADDR_OWVAR 40
21439: PUSH
21440: LD_VAR 0 4
21444: ST_TO_ADDR
// un := CreateVehicle ;
21445: LD_ADDR_VAR 0 8
21449: PUSH
21450: CALL_OW 45
21454: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21455: LD_VAR 0 8
21459: PPUSH
21460: LD_INT 0
21462: PPUSH
21463: LD_INT 5
21465: PPUSH
21466: CALL_OW 12
21470: PPUSH
21471: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21475: LD_VAR 0 8
21479: PPUSH
21480: LD_VAR 0 5
21484: PPUSH
21485: LD_VAR 0 6
21489: PPUSH
21490: LD_INT 1
21492: PPUSH
21493: CALL_OW 48
// end ;
21497: LD_VAR 0 7
21501: RET
// export hInvincible ; every 1 do
21502: GO 21504
21504: DISABLE
// hInvincible := [ ] ;
21505: LD_ADDR_EXP 87
21509: PUSH
21510: EMPTY
21511: ST_TO_ADDR
21512: END
// every 10 do var i ;
21513: GO 21515
21515: DISABLE
21516: LD_INT 0
21518: PPUSH
// begin enable ;
21519: ENABLE
// if not hInvincible then
21520: LD_EXP 87
21524: NOT
21525: IFFALSE 21529
// exit ;
21527: GO 21573
// for i in hInvincible do
21529: LD_ADDR_VAR 0 1
21533: PUSH
21534: LD_EXP 87
21538: PUSH
21539: FOR_IN
21540: IFFALSE 21571
// if GetLives ( i ) < 1000 then
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 256
21551: PUSH
21552: LD_INT 1000
21554: LESS
21555: IFFALSE 21569
// SetLives ( i , 1000 ) ;
21557: LD_VAR 0 1
21561: PPUSH
21562: LD_INT 1000
21564: PPUSH
21565: CALL_OW 234
21569: GO 21539
21571: POP
21572: POP
// end ;
21573: PPOPN 1
21575: END
// export function hHackInvincible ; var i ; begin
21576: LD_INT 0
21578: PPUSH
21579: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21580: LD_ADDR_VAR 0 2
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: LD_INT 21
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 21
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: PPUSH
21613: CALL_OW 69
21617: PUSH
21618: FOR_IN
21619: IFFALSE 21680
// if IsSelected ( i ) then
21621: LD_VAR 0 2
21625: PPUSH
21626: CALL_OW 306
21630: IFFALSE 21678
// begin if i in hInvincible then
21632: LD_VAR 0 2
21636: PUSH
21637: LD_EXP 87
21641: IN
21642: IFFALSE 21662
// hInvincible := hInvincible diff i else
21644: LD_ADDR_EXP 87
21648: PUSH
21649: LD_EXP 87
21653: PUSH
21654: LD_VAR 0 2
21658: DIFF
21659: ST_TO_ADDR
21660: GO 21678
// hInvincible := hInvincible union i ;
21662: LD_ADDR_EXP 87
21666: PUSH
21667: LD_EXP 87
21671: PUSH
21672: LD_VAR 0 2
21676: UNION
21677: ST_TO_ADDR
// end ;
21678: GO 21618
21680: POP
21681: POP
// end ;
21682: LD_VAR 0 1
21686: RET
// export function hHackInvisible ; var i , j ; begin
21687: LD_INT 0
21689: PPUSH
21690: PPUSH
21691: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_INT 21
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PPUSH
21707: CALL_OW 69
21711: PUSH
21712: FOR_IN
21713: IFFALSE 21737
// if IsSelected ( i ) then
21715: LD_VAR 0 2
21719: PPUSH
21720: CALL_OW 306
21724: IFFALSE 21735
// ComForceInvisible ( i ) ;
21726: LD_VAR 0 2
21730: PPUSH
21731: CALL_OW 496
21735: GO 21712
21737: POP
21738: POP
// end ;
21739: LD_VAR 0 1
21743: RET
// export function hHackChangeYourSide ; begin
21744: LD_INT 0
21746: PPUSH
// if your_side = 8 then
21747: LD_OWVAR 2
21751: PUSH
21752: LD_INT 8
21754: EQUAL
21755: IFFALSE 21767
// your_side := 0 else
21757: LD_ADDR_OWVAR 2
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
21765: GO 21781
// your_side := your_side + 1 ;
21767: LD_ADDR_OWVAR 2
21771: PUSH
21772: LD_OWVAR 2
21776: PUSH
21777: LD_INT 1
21779: PLUS
21780: ST_TO_ADDR
// end ;
21781: LD_VAR 0 1
21785: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21786: LD_INT 0
21788: PPUSH
21789: PPUSH
21790: PPUSH
// for i in all_units do
21791: LD_ADDR_VAR 0 2
21795: PUSH
21796: LD_OWVAR 3
21800: PUSH
21801: FOR_IN
21802: IFFALSE 21880
// if IsSelected ( i ) then
21804: LD_VAR 0 2
21808: PPUSH
21809: CALL_OW 306
21813: IFFALSE 21878
// begin j := GetSide ( i ) ;
21815: LD_ADDR_VAR 0 3
21819: PUSH
21820: LD_VAR 0 2
21824: PPUSH
21825: CALL_OW 255
21829: ST_TO_ADDR
// if j = 8 then
21830: LD_VAR 0 3
21834: PUSH
21835: LD_INT 8
21837: EQUAL
21838: IFFALSE 21850
// j := 0 else
21840: LD_ADDR_VAR 0 3
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
21848: GO 21864
// j := j + 1 ;
21850: LD_ADDR_VAR 0 3
21854: PUSH
21855: LD_VAR 0 3
21859: PUSH
21860: LD_INT 1
21862: PLUS
21863: ST_TO_ADDR
// SetSide ( i , j ) ;
21864: LD_VAR 0 2
21868: PPUSH
21869: LD_VAR 0 3
21873: PPUSH
21874: CALL_OW 235
// end ;
21878: GO 21801
21880: POP
21881: POP
// end ;
21882: LD_VAR 0 1
21886: RET
// export function hHackFog ; begin
21887: LD_INT 0
21889: PPUSH
// FogOff ( true ) ;
21890: LD_INT 1
21892: PPUSH
21893: CALL_OW 344
// end ;
21897: LD_VAR 0 1
21901: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21902: LD_INT 0
21904: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21905: LD_VAR 0 1
21909: PPUSH
21910: LD_VAR 0 2
21914: PPUSH
21915: LD_VAR 0 3
21919: PPUSH
21920: LD_INT 1
21922: PPUSH
21923: LD_INT 1
21925: PPUSH
21926: CALL_OW 483
// CenterOnXY ( x , y ) ;
21930: LD_VAR 0 2
21934: PPUSH
21935: LD_VAR 0 3
21939: PPUSH
21940: CALL_OW 84
// end ;
21944: LD_VAR 0 4
21948: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21949: LD_INT 0
21951: PPUSH
21952: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21953: LD_VAR 0 1
21957: NOT
21958: IFTRUE 21977
21960: PUSH
21961: LD_VAR 0 2
21965: PPUSH
21966: LD_VAR 0 3
21970: PPUSH
21971: CALL_OW 488
21975: NOT
21976: OR
21977: IFTRUE 22012
21979: PUSH
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 266
21989: PUSH
21990: LD_INT 3
21992: NONEQUAL
21993: IFFALSE 22011
21995: PUSH
21996: LD_VAR 0 1
22000: PPUSH
22001: CALL_OW 247
22005: PUSH
22006: LD_INT 1
22008: EQUAL
22009: NOT
22010: AND
22011: OR
22012: IFFALSE 22016
// exit ;
22014: GO 22298
// if GetType ( factory ) = unit_human then
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL_OW 247
22025: PUSH
22026: LD_INT 1
22028: EQUAL
22029: IFFALSE 22046
// factory := IsInUnit ( factory ) ;
22031: LD_ADDR_VAR 0 1
22035: PUSH
22036: LD_VAR 0 1
22040: PPUSH
22041: CALL_OW 310
22045: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22046: LD_VAR 0 1
22050: PPUSH
22051: CALL_OW 266
22055: PUSH
22056: LD_INT 3
22058: NONEQUAL
22059: IFFALSE 22063
// exit ;
22061: GO 22298
// for i := 1 to Count ( factoryWaypoints ) do
22063: LD_ADDR_VAR 0 5
22067: PUSH
22068: DOUBLE
22069: LD_INT 1
22071: DEC
22072: ST_TO_ADDR
22073: LD_EXP 88
22077: PPUSH
22078: CALL 31030 0 1
22082: PUSH
22083: FOR_TO
22084: IFFALSE 22246
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22086: LD_VAR 0 2
22090: PPUSH
22091: LD_VAR 0 3
22095: PPUSH
22096: CALL_OW 428
22100: PUSH
22101: LD_EXP 88
22105: PUSH
22106: LD_VAR 0 5
22110: ARRAY
22111: PUSH
22112: LD_INT 2
22114: ARRAY
22115: EQUAL
22116: IFFALSE 22148
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22118: LD_ADDR_EXP 88
22122: PUSH
22123: LD_EXP 88
22127: PPUSH
22128: LD_VAR 0 5
22132: PPUSH
22133: CALL_OW 3
22137: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22138: CALL 22303 0 0
// exit ;
22142: POP
22143: POP
22144: GO 22298
// end else
22146: GO 22244
// if factory = factoryWaypoints [ i ] [ 2 ] then
22148: LD_VAR 0 1
22152: PUSH
22153: LD_EXP 88
22157: PUSH
22158: LD_VAR 0 5
22162: ARRAY
22163: PUSH
22164: LD_INT 2
22166: ARRAY
22167: EQUAL
22168: IFFALSE 22244
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22170: LD_ADDR_EXP 88
22174: PUSH
22175: LD_EXP 88
22179: PPUSH
22180: LD_VAR 0 5
22184: PPUSH
22185: CALL_OW 3
22189: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22190: LD_ADDR_EXP 88
22194: PUSH
22195: LD_EXP 88
22199: PPUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 255
22209: PUSH
22210: LD_VAR 0 1
22214: PUSH
22215: LD_VAR 0 2
22219: PUSH
22220: LD_VAR 0 3
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: PPUSH
22231: CALL 66962 0 2
22235: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22236: CALL 22303 0 0
// exit ;
22240: POP
22241: POP
22242: GO 22298
// end ; end ;
22244: GO 22083
22246: POP
22247: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22248: LD_ADDR_EXP 88
22252: PUSH
22253: LD_EXP 88
22257: PPUSH
22258: LD_VAR 0 1
22262: PPUSH
22263: CALL_OW 255
22267: PUSH
22268: LD_VAR 0 1
22272: PUSH
22273: LD_VAR 0 2
22277: PUSH
22278: LD_VAR 0 3
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL 66962 0 2
22293: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22294: CALL 22303 0 0
// end ;
22298: LD_VAR 0 4
22302: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22303: LD_INT 0
22305: PPUSH
22306: PPUSH
22307: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22308: LD_STRING resetFactoryWaypoint();
22310: PPUSH
22311: CALL_OW 559
// if factoryWaypoints then
22315: LD_EXP 88
22319: IFFALSE 22440
// begin list := factoryWaypoints ;
22321: LD_ADDR_VAR 0 3
22325: PUSH
22326: LD_EXP 88
22330: ST_TO_ADDR
// for i := 1 to list do
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: DOUBLE
22337: LD_INT 1
22339: DEC
22340: ST_TO_ADDR
22341: LD_VAR 0 3
22345: PUSH
22346: FOR_TO
22347: IFFALSE 22438
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22349: LD_STRING setFactoryWaypointXY(
22351: PUSH
22352: LD_VAR 0 3
22356: PUSH
22357: LD_VAR 0 2
22361: ARRAY
22362: PUSH
22363: LD_INT 1
22365: ARRAY
22366: STR
22367: PUSH
22368: LD_STRING ,
22370: STR
22371: PUSH
22372: LD_VAR 0 3
22376: PUSH
22377: LD_VAR 0 2
22381: ARRAY
22382: PUSH
22383: LD_INT 2
22385: ARRAY
22386: STR
22387: PUSH
22388: LD_STRING ,
22390: STR
22391: PUSH
22392: LD_VAR 0 3
22396: PUSH
22397: LD_VAR 0 2
22401: ARRAY
22402: PUSH
22403: LD_INT 3
22405: ARRAY
22406: STR
22407: PUSH
22408: LD_STRING ,
22410: STR
22411: PUSH
22412: LD_VAR 0 3
22416: PUSH
22417: LD_VAR 0 2
22421: ARRAY
22422: PUSH
22423: LD_INT 4
22425: ARRAY
22426: STR
22427: PUSH
22428: LD_STRING )
22430: STR
22431: PPUSH
22432: CALL_OW 559
22436: GO 22346
22438: POP
22439: POP
// end ; end ;
22440: LD_VAR 0 1
22444: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22445: LD_INT 0
22447: PPUSH
// if HexInfo ( x , y ) = warehouse then
22448: LD_VAR 0 2
22452: PPUSH
22453: LD_VAR 0 3
22457: PPUSH
22458: CALL_OW 428
22462: PUSH
22463: LD_VAR 0 1
22467: EQUAL
22468: IFFALSE 22495
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22470: LD_ADDR_EXP 90
22474: PUSH
22475: LD_EXP 90
22479: PPUSH
22480: LD_VAR 0 1
22484: PPUSH
22485: LD_INT 0
22487: PPUSH
22488: CALL_OW 1
22492: ST_TO_ADDR
22493: GO 22546
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22495: LD_ADDR_EXP 90
22499: PUSH
22500: LD_EXP 90
22504: PPUSH
22505: LD_VAR 0 1
22509: PPUSH
22510: LD_VAR 0 1
22514: PPUSH
22515: CALL_OW 255
22519: PUSH
22520: LD_VAR 0 1
22524: PUSH
22525: LD_VAR 0 2
22529: PUSH
22530: LD_VAR 0 3
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: PPUSH
22541: CALL_OW 1
22545: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22546: CALL 22555 0 0
// end ;
22550: LD_VAR 0 4
22554: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22555: LD_INT 0
22557: PPUSH
22558: PPUSH
22559: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22560: LD_STRING resetWarehouseGatheringPoints();
22562: PPUSH
22563: CALL_OW 559
// if warehouseGatheringPoints then
22567: LD_EXP 90
22571: IFFALSE 22697
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22573: LD_ADDR_VAR 0 3
22577: PUSH
22578: LD_EXP 90
22582: PPUSH
22583: CALL 70896 0 1
22587: ST_TO_ADDR
// for i := 1 to list do
22588: LD_ADDR_VAR 0 2
22592: PUSH
22593: DOUBLE
22594: LD_INT 1
22596: DEC
22597: ST_TO_ADDR
22598: LD_VAR 0 3
22602: PUSH
22603: FOR_TO
22604: IFFALSE 22695
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22606: LD_STRING setWarehouseGatheringPointXY(
22608: PUSH
22609: LD_VAR 0 3
22613: PUSH
22614: LD_VAR 0 2
22618: ARRAY
22619: PUSH
22620: LD_INT 1
22622: ARRAY
22623: STR
22624: PUSH
22625: LD_STRING ,
22627: STR
22628: PUSH
22629: LD_VAR 0 3
22633: PUSH
22634: LD_VAR 0 2
22638: ARRAY
22639: PUSH
22640: LD_INT 2
22642: ARRAY
22643: STR
22644: PUSH
22645: LD_STRING ,
22647: STR
22648: PUSH
22649: LD_VAR 0 3
22653: PUSH
22654: LD_VAR 0 2
22658: ARRAY
22659: PUSH
22660: LD_INT 3
22662: ARRAY
22663: STR
22664: PUSH
22665: LD_STRING ,
22667: STR
22668: PUSH
22669: LD_VAR 0 3
22673: PUSH
22674: LD_VAR 0 2
22678: ARRAY
22679: PUSH
22680: LD_INT 4
22682: ARRAY
22683: STR
22684: PUSH
22685: LD_STRING )
22687: STR
22688: PPUSH
22689: CALL_OW 559
22693: GO 22603
22695: POP
22696: POP
// end ; end ;
22697: LD_VAR 0 1
22701: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22702: LD_EXP 90
22706: IFFALSE 23401
22708: GO 22710
22710: DISABLE
22711: LD_INT 0
22713: PPUSH
22714: PPUSH
22715: PPUSH
22716: PPUSH
22717: PPUSH
22718: PPUSH
22719: PPUSH
22720: PPUSH
22721: PPUSH
// begin enable ;
22722: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22723: LD_ADDR_VAR 0 3
22727: PUSH
22728: LD_EXP 90
22732: PPUSH
22733: CALL 70896 0 1
22737: ST_TO_ADDR
// if not list then
22738: LD_VAR 0 3
22742: NOT
22743: IFFALSE 22747
// exit ;
22745: GO 23401
// for i := 1 to list do
22747: LD_ADDR_VAR 0 1
22751: PUSH
22752: DOUBLE
22753: LD_INT 1
22755: DEC
22756: ST_TO_ADDR
22757: LD_VAR 0 3
22761: PUSH
22762: FOR_TO
22763: IFFALSE 23399
// begin depot := list [ i ] [ 2 ] ;
22765: LD_ADDR_VAR 0 8
22769: PUSH
22770: LD_VAR 0 3
22774: PUSH
22775: LD_VAR 0 1
22779: ARRAY
22780: PUSH
22781: LD_INT 2
22783: ARRAY
22784: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22785: LD_ADDR_VAR 0 5
22789: PUSH
22790: LD_VAR 0 3
22794: PUSH
22795: LD_VAR 0 1
22799: ARRAY
22800: PUSH
22801: LD_INT 1
22803: ARRAY
22804: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22805: LD_VAR 0 8
22809: PPUSH
22810: CALL_OW 301
22814: IFTRUE 22833
22816: PUSH
22817: LD_VAR 0 5
22821: PUSH
22822: LD_VAR 0 8
22826: PPUSH
22827: CALL_OW 255
22831: NONEQUAL
22832: OR
22833: IFFALSE 22862
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22835: LD_ADDR_EXP 90
22839: PUSH
22840: LD_EXP 90
22844: PPUSH
22845: LD_VAR 0 8
22849: PPUSH
22850: LD_INT 0
22852: PPUSH
22853: CALL_OW 1
22857: ST_TO_ADDR
// exit ;
22858: POP
22859: POP
22860: GO 23401
// end ; x := list [ i ] [ 3 ] ;
22862: LD_ADDR_VAR 0 6
22866: PUSH
22867: LD_VAR 0 3
22871: PUSH
22872: LD_VAR 0 1
22876: ARRAY
22877: PUSH
22878: LD_INT 3
22880: ARRAY
22881: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22882: LD_ADDR_VAR 0 7
22886: PUSH
22887: LD_VAR 0 3
22891: PUSH
22892: LD_VAR 0 1
22896: ARRAY
22897: PUSH
22898: LD_INT 4
22900: ARRAY
22901: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22902: LD_ADDR_VAR 0 9
22906: PUSH
22907: LD_VAR 0 6
22911: PPUSH
22912: LD_VAR 0 7
22916: PPUSH
22917: LD_INT 16
22919: PPUSH
22920: CALL 69470 0 3
22924: ST_TO_ADDR
// if not cratesNearbyPoint then
22925: LD_VAR 0 9
22929: NOT
22930: IFFALSE 22936
// exit ;
22932: POP
22933: POP
22934: GO 23401
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22936: LD_ADDR_VAR 0 4
22940: PUSH
22941: LD_INT 22
22943: PUSH
22944: LD_VAR 0 5
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 3
22955: PUSH
22956: LD_INT 60
22958: PUSH
22959: EMPTY
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 91
22968: PUSH
22969: LD_VAR 0 8
22973: PUSH
22974: LD_INT 6
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 25
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 25
22997: PUSH
22998: LD_INT 16
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PPUSH
23016: CALL_OW 69
23020: PUSH
23021: LD_VAR 0 8
23025: PPUSH
23026: CALL_OW 313
23030: PPUSH
23031: LD_INT 3
23033: PUSH
23034: LD_INT 60
23036: PUSH
23037: EMPTY
23038: LIST
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 25
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 25
23059: PUSH
23060: LD_INT 16
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PPUSH
23076: CALL_OW 72
23080: UNION
23081: ST_TO_ADDR
// if tmp then
23082: LD_VAR 0 4
23086: IFFALSE 23166
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23088: LD_ADDR_VAR 0 4
23092: PUSH
23093: LD_VAR 0 4
23097: PPUSH
23098: LD_INT 3
23100: PPUSH
23101: CALL 67277 0 2
23105: ST_TO_ADDR
// for j in tmp do
23106: LD_ADDR_VAR 0 2
23110: PUSH
23111: LD_VAR 0 4
23115: PUSH
23116: FOR_IN
23117: IFFALSE 23160
// begin if IsInUnit ( j ) then
23119: LD_VAR 0 2
23123: PPUSH
23124: CALL_OW 310
23128: IFFALSE 23139
// ComExit ( j ) ;
23130: LD_VAR 0 2
23134: PPUSH
23135: CALL 67360 0 1
// AddComCollect ( j , x , y ) ;
23139: LD_VAR 0 2
23143: PPUSH
23144: LD_VAR 0 6
23148: PPUSH
23149: LD_VAR 0 7
23153: PPUSH
23154: CALL_OW 177
// end ;
23158: GO 23116
23160: POP
23161: POP
// exit ;
23162: POP
23163: POP
23164: GO 23401
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23166: LD_ADDR_VAR 0 4
23170: PUSH
23171: LD_INT 22
23173: PUSH
23174: LD_VAR 0 5
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 91
23185: PUSH
23186: LD_VAR 0 8
23190: PUSH
23191: LD_INT 8
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 2
23201: PUSH
23202: LD_INT 34
23204: PUSH
23205: LD_INT 12
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 34
23214: PUSH
23215: LD_INT 51
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 34
23224: PUSH
23225: LD_INT 32
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 34
23234: PUSH
23235: LD_INT 89
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: PPUSH
23254: CALL_OW 69
23258: ST_TO_ADDR
// if tmp then
23259: LD_VAR 0 4
23263: IFFALSE 23397
// begin for j in tmp do
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: LD_VAR 0 4
23274: PUSH
23275: FOR_IN
23276: IFFALSE 23395
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23278: LD_VAR 0 2
23282: PPUSH
23283: CALL_OW 262
23287: PUSH
23288: LD_INT 3
23290: EQUAL
23291: IFTRUE 23308
23293: PUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: CALL_OW 261
23303: PUSH
23304: LD_INT 20
23306: GREATER
23307: OR
23308: IFFALSE 23322
23310: PUSH
23311: LD_VAR 0 2
23315: PPUSH
23316: CALL_OW 314
23320: NOT
23321: AND
23322: IFFALSE 23352
23324: PUSH
23325: LD_VAR 0 2
23329: PPUSH
23330: CALL_OW 263
23334: PUSH
23335: LD_INT 1
23337: NONEQUAL
23338: IFTRUE 23351
23340: PUSH
23341: LD_VAR 0 2
23345: PPUSH
23346: CALL_OW 311
23350: OR
23351: AND
23352: IFFALSE 23393
// begin ComCollect ( j , x , y ) ;
23354: LD_VAR 0 2
23358: PPUSH
23359: LD_VAR 0 6
23363: PPUSH
23364: LD_VAR 0 7
23368: PPUSH
23369: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23373: LD_VAR 0 2
23377: PPUSH
23378: LD_VAR 0 8
23382: PPUSH
23383: CALL_OW 172
// exit ;
23387: POP
23388: POP
23389: POP
23390: POP
23391: GO 23401
// end ;
23393: GO 23275
23395: POP
23396: POP
// end ; end ;
23397: GO 22762
23399: POP
23400: POP
// end ; end_of_file
23401: PPOPN 9
23403: END
// export function SOS_UnitDestroyed ( un ) ; begin
23404: LD_INT 0
23406: PPUSH
// ComRadiation ( un ) ;
23407: LD_VAR 0 1
23411: PPUSH
23412: CALL 24493 0 1
// end ;
23416: LD_VAR 0 2
23420: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23421: LD_INT 0
23423: PPUSH
// ComRadiation ( un ) ;
23424: LD_VAR 0 1
23428: PPUSH
23429: CALL 24493 0 1
// end ;
23433: LD_VAR 0 2
23437: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23438: LD_INT 0
23440: PPUSH
// end ;
23441: LD_VAR 0 4
23445: RET
// export function SOS_Command ( cmd ) ; begin
23446: LD_INT 0
23448: PPUSH
// end ;
23449: LD_VAR 0 2
23453: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23454: LD_INT 0
23456: PPUSH
// end ;
23457: LD_VAR 0 6
23461: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
23462: LD_INT 0
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
// if not vehicle or not factory then
23468: LD_VAR 0 1
23472: NOT
23473: IFTRUE 23482
23475: PUSH
23476: LD_VAR 0 2
23480: NOT
23481: OR
23482: IFFALSE 23486
// exit ;
23484: GO 24068
// if not factoryWaypoints then
23486: LD_EXP 88
23490: NOT
23491: IFFALSE 23495
// exit ;
23493: GO 24068
// for i := 1 to Count ( factoryWaypoints ) do
23495: LD_ADDR_VAR 0 4
23499: PUSH
23500: DOUBLE
23501: LD_INT 1
23503: DEC
23504: ST_TO_ADDR
23505: LD_EXP 88
23509: PPUSH
23510: CALL 31030 0 1
23514: PUSH
23515: FOR_TO
23516: IFFALSE 24066
// if factoryWaypoints [ i ] [ 2 ] = factory then
23518: LD_EXP 88
23522: PUSH
23523: LD_VAR 0 4
23527: ARRAY
23528: PUSH
23529: LD_INT 2
23531: ARRAY
23532: PUSH
23533: LD_VAR 0 2
23537: EQUAL
23538: IFFALSE 24064
// begin if GetControl ( vehicle ) = control_manual then
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL_OW 263
23549: PUSH
23550: LD_INT 1
23552: EQUAL
23553: IFFALSE 23917
// begin driver := IsDrivenBy ( vehicle ) ;
23555: LD_ADDR_VAR 0 5
23559: PUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 311
23569: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23570: LD_VAR 0 5
23574: PUSH
23575: LD_EXP 89
23579: IN
23580: IFTRUE 23594
23582: PUSH
23583: LD_VAR 0 1
23587: PUSH
23588: LD_EXP 89
23592: IN
23593: OR
23594: IFFALSE 23600
// exit ;
23596: POP
23597: POP
23598: GO 24068
// if not HasTask ( driver ) then
23600: LD_VAR 0 5
23604: PPUSH
23605: CALL_OW 314
23609: NOT
23610: IFFALSE 23915
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23612: LD_ADDR_EXP 89
23616: PUSH
23617: LD_EXP 89
23621: PPUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: CALL 66962 0 2
23631: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
23632: LD_ADDR_EXP 89
23636: PUSH
23637: LD_EXP 89
23641: PPUSH
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL 66962 0 2
23651: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23652: LD_ADDR_VAR 0 6
23656: PUSH
23657: LD_EXP 88
23661: PUSH
23662: LD_VAR 0 4
23666: ARRAY
23667: PUSH
23668: LD_INT 3
23670: ARRAY
23671: PPUSH
23672: LD_EXP 88
23676: PUSH
23677: LD_VAR 0 4
23681: ARRAY
23682: PUSH
23683: LD_INT 4
23685: ARRAY
23686: PPUSH
23687: CALL_OW 428
23691: ST_TO_ADDR
// if hex then
23692: LD_VAR 0 6
23696: IFFALSE 23714
// ComMoveUnit ( driver , hex ) else
23698: LD_VAR 0 5
23702: PPUSH
23703: LD_VAR 0 6
23707: PPUSH
23708: CALL_OW 112
23712: GO 23798
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
23714: LD_VAR 0 1
23718: PPUSH
23719: LD_EXP 88
23723: PUSH
23724: LD_VAR 0 4
23728: ARRAY
23729: PUSH
23730: LD_INT 3
23732: ARRAY
23733: PPUSH
23734: LD_EXP 88
23738: PUSH
23739: LD_VAR 0 4
23743: ARRAY
23744: PUSH
23745: LD_INT 4
23747: ARRAY
23748: PPUSH
23749: CALL_OW 297
23753: PUSH
23754: LD_INT 0
23756: GREATER
23757: IFFALSE 23798
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23759: LD_VAR 0 5
23763: PPUSH
23764: LD_EXP 88
23768: PUSH
23769: LD_VAR 0 4
23773: ARRAY
23774: PUSH
23775: LD_INT 3
23777: ARRAY
23778: PPUSH
23779: LD_EXP 88
23783: PUSH
23784: LD_VAR 0 4
23788: ARRAY
23789: PUSH
23790: LD_INT 4
23792: ARRAY
23793: PPUSH
23794: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23798: LD_VAR 0 5
23802: PPUSH
23803: CALL_OW 181
// if Multiplayer then
23807: LD_OWVAR 4
23811: IFFALSE 23860
// begin repeat wait ( 10 ) ;
23813: LD_INT 10
23815: PPUSH
23816: CALL_OW 67
// until not IsInUnit ( driver ) ;
23820: LD_VAR 0 5
23824: PPUSH
23825: CALL_OW 310
23829: NOT
23830: IFFALSE 23813
// if not HasTask ( driver ) then
23832: LD_VAR 0 5
23836: PPUSH
23837: CALL_OW 314
23841: NOT
23842: IFFALSE 23858
// ComEnterUnit ( driver , factory ) ;
23844: LD_VAR 0 5
23848: PPUSH
23849: LD_VAR 0 2
23853: PPUSH
23854: CALL_OW 120
// end else
23858: GO 23874
// AddComEnterUnit ( driver , factory ) ;
23860: LD_VAR 0 5
23864: PPUSH
23865: LD_VAR 0 2
23869: PPUSH
23870: CALL_OW 180
// wait ( 0 0$1 ) ;
23874: LD_INT 35
23876: PPUSH
23877: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
23881: LD_ADDR_EXP 89
23885: PUSH
23886: LD_EXP 89
23890: PUSH
23891: LD_VAR 0 5
23895: DIFF
23896: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
23897: LD_ADDR_EXP 89
23901: PUSH
23902: LD_EXP 89
23906: PUSH
23907: LD_VAR 0 1
23911: DIFF
23912: ST_TO_ADDR
// break ;
23913: GO 24066
// end ; end else
23915: GO 24064
// if GetControl ( vehicle ) = control_remote then
23917: LD_VAR 0 1
23921: PPUSH
23922: CALL_OW 263
23926: PUSH
23927: LD_INT 2
23929: EQUAL
23930: IFFALSE 24016
// begin wait ( 0 0$2 ) ;
23932: LD_INT 70
23934: PPUSH
23935: CALL_OW 67
// repeat wait ( 10 ) ;
23939: LD_INT 10
23941: PPUSH
23942: CALL_OW 67
// Connect ( vehicle ) ;
23946: LD_VAR 0 1
23950: PPUSH
23951: CALL 37274 0 1
// until IsControledBy ( vehicle ) ;
23955: LD_VAR 0 1
23959: PPUSH
23960: CALL_OW 312
23964: IFFALSE 23939
// wait ( 10 ) ;
23966: LD_INT 10
23968: PPUSH
23969: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23973: LD_VAR 0 1
23977: PPUSH
23978: LD_EXP 88
23982: PUSH
23983: LD_VAR 0 4
23987: ARRAY
23988: PUSH
23989: LD_INT 3
23991: ARRAY
23992: PPUSH
23993: LD_EXP 88
23997: PUSH
23998: LD_VAR 0 4
24002: ARRAY
24003: PUSH
24004: LD_INT 4
24006: ARRAY
24007: PPUSH
24008: CALL_OW 111
// break ;
24012: GO 24066
// end else
24014: GO 24064
// begin wait ( 0 0$3 ) ;
24016: LD_INT 105
24018: PPUSH
24019: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24023: LD_VAR 0 1
24027: PPUSH
24028: LD_EXP 88
24032: PUSH
24033: LD_VAR 0 4
24037: ARRAY
24038: PUSH
24039: LD_INT 3
24041: ARRAY
24042: PPUSH
24043: LD_EXP 88
24047: PUSH
24048: LD_VAR 0 4
24052: ARRAY
24053: PUSH
24054: LD_INT 4
24056: ARRAY
24057: PPUSH
24058: CALL_OW 111
// break ;
24062: GO 24066
// end ; end ;
24064: GO 23515
24066: POP
24067: POP
// end ;
24068: LD_VAR 0 3
24072: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24073: LD_INT 0
24075: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24076: LD_VAR 0 1
24080: PUSH
24081: LD_INT 250
24083: EQUAL
24084: IFFALSE 24101
24086: PUSH
24087: LD_VAR 0 2
24091: PPUSH
24092: CALL_OW 264
24096: PUSH
24097: LD_INT 81
24099: EQUAL
24100: AND
24101: IFFALSE 24122
// MinerPlaceMine ( unit , x , y ) ;
24103: LD_VAR 0 2
24107: PPUSH
24108: LD_VAR 0 4
24112: PPUSH
24113: LD_VAR 0 5
24117: PPUSH
24118: CALL 27254 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24122: LD_VAR 0 1
24126: PUSH
24127: LD_INT 251
24129: EQUAL
24130: IFFALSE 24147
24132: PUSH
24133: LD_VAR 0 2
24137: PPUSH
24138: CALL_OW 264
24142: PUSH
24143: LD_INT 81
24145: EQUAL
24146: AND
24147: IFFALSE 24168
// MinerDetonateMine ( unit , x , y ) ;
24149: LD_VAR 0 2
24153: PPUSH
24154: LD_VAR 0 4
24158: PPUSH
24159: LD_VAR 0 5
24163: PPUSH
24164: CALL 27533 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24168: LD_VAR 0 1
24172: PUSH
24173: LD_INT 252
24175: EQUAL
24176: IFFALSE 24193
24178: PUSH
24179: LD_VAR 0 2
24183: PPUSH
24184: CALL_OW 264
24188: PUSH
24189: LD_INT 81
24191: EQUAL
24192: AND
24193: IFFALSE 24214
// MinerCreateMinefield ( unit , x , y ) ;
24195: LD_VAR 0 2
24199: PPUSH
24200: LD_VAR 0 4
24204: PPUSH
24205: LD_VAR 0 5
24209: PPUSH
24210: CALL 27952 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24214: LD_VAR 0 1
24218: PUSH
24219: LD_INT 253
24221: EQUAL
24222: IFFALSE 24239
24224: PUSH
24225: LD_VAR 0 2
24229: PPUSH
24230: CALL_OW 257
24234: PUSH
24235: LD_INT 5
24237: EQUAL
24238: AND
24239: IFFALSE 24260
// ComBinocular ( unit , x , y ) ;
24241: LD_VAR 0 2
24245: PPUSH
24246: LD_VAR 0 4
24250: PPUSH
24251: LD_VAR 0 5
24255: PPUSH
24256: CALL 28327 0 3
// if selectedUnit then
24260: LD_VAR 0 3
24264: IFFALSE 24324
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24266: LD_VAR 0 1
24270: PUSH
24271: LD_INT 254
24273: EQUAL
24274: IFFALSE 24291
24276: PUSH
24277: LD_VAR 0 2
24281: PPUSH
24282: CALL_OW 264
24286: PUSH
24287: LD_INT 99
24289: EQUAL
24290: AND
24291: IFFALSE 24308
24293: PUSH
24294: LD_VAR 0 3
24298: PPUSH
24299: CALL_OW 263
24303: PUSH
24304: LD_INT 3
24306: EQUAL
24307: AND
24308: IFFALSE 24324
// HackDestroyVehicle ( unit , selectedUnit ) ;
24310: LD_VAR 0 2
24314: PPUSH
24315: LD_VAR 0 3
24319: PPUSH
24320: CALL 26614 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24324: LD_VAR 0 1
24328: PUSH
24329: LD_INT 255
24331: EQUAL
24332: IFFALSE 24356
24334: PUSH
24335: LD_VAR 0 2
24339: PPUSH
24340: CALL_OW 264
24344: PUSH
24345: LD_INT 14
24347: PUSH
24348: LD_INT 53
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: IN
24355: AND
24356: IFFALSE 24374
24358: PUSH
24359: LD_VAR 0 4
24363: PPUSH
24364: LD_VAR 0 5
24368: PPUSH
24369: CALL_OW 488
24373: AND
24374: IFFALSE 24398
// CutTreeXYR ( unit , x , y , 12 ) ;
24376: LD_VAR 0 2
24380: PPUSH
24381: LD_VAR 0 4
24385: PPUSH
24386: LD_VAR 0 5
24390: PPUSH
24391: LD_INT 12
24393: PPUSH
24394: CALL 24589 0 4
// if cmd = 256 then
24398: LD_VAR 0 1
24402: PUSH
24403: LD_INT 256
24405: EQUAL
24406: IFFALSE 24427
// SetFactoryWaypoint ( unit , x , y ) ;
24408: LD_VAR 0 2
24412: PPUSH
24413: LD_VAR 0 4
24417: PPUSH
24418: LD_VAR 0 5
24422: PPUSH
24423: CALL 21949 0 3
// if cmd = 257 then
24427: LD_VAR 0 1
24431: PUSH
24432: LD_INT 257
24434: EQUAL
24435: IFFALSE 24456
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24437: LD_VAR 0 2
24441: PPUSH
24442: LD_VAR 0 4
24446: PPUSH
24447: LD_VAR 0 5
24451: PPUSH
24452: CALL 22445 0 3
// if cmd = 258 then
24456: LD_VAR 0 1
24460: PUSH
24461: LD_INT 258
24463: EQUAL
24464: IFFALSE 24488
// BurnTreeXYR ( unit , x , y , 8 ) ;
24466: LD_VAR 0 2
24470: PPUSH
24471: LD_VAR 0 4
24475: PPUSH
24476: LD_VAR 0 5
24480: PPUSH
24481: LD_INT 8
24483: PPUSH
24484: CALL 24989 0 4
// end ;
24488: LD_VAR 0 6
24492: RET
// export function ComRadiation ( un ) ; var eff ; begin
24493: LD_INT 0
24495: PPUSH
24496: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 264
24506: PUSH
24507: LD_INT 91
24509: NONEQUAL
24510: IFFALSE 24514
// exit ;
24512: GO 24584
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24514: LD_INT 68
24516: PPUSH
24517: LD_VAR 0 1
24521: PPUSH
24522: CALL_OW 255
24526: PPUSH
24527: CALL_OW 321
24531: PUSH
24532: LD_INT 2
24534: EQUAL
24535: IFFALSE 24547
// eff := 50 else
24537: LD_ADDR_VAR 0 3
24541: PUSH
24542: LD_INT 50
24544: ST_TO_ADDR
24545: GO 24555
// eff := 25 ;
24547: LD_ADDR_VAR 0 3
24551: PUSH
24552: LD_INT 25
24554: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24555: LD_VAR 0 1
24559: PPUSH
24560: CALL_OW 250
24564: PPUSH
24565: LD_VAR 0 1
24569: PPUSH
24570: CALL_OW 251
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: CALL_OW 495
// end ;
24584: LD_VAR 0 2
24588: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24589: LD_INT 0
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24600: LD_VAR 0 1
24604: PPUSH
24605: CALL_OW 302
24609: NOT
24610: IFTRUE 24629
24612: PUSH
24613: LD_VAR 0 2
24617: PPUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: CALL_OW 488
24627: NOT
24628: OR
24629: IFTRUE 24638
24631: PUSH
24632: LD_VAR 0 4
24636: NOT
24637: OR
24638: IFFALSE 24642
// exit ;
24640: GO 24984
// list := [ ] ;
24642: LD_ADDR_VAR 0 13
24646: PUSH
24647: EMPTY
24648: ST_TO_ADDR
// if x - r < 0 then
24649: LD_VAR 0 2
24653: PUSH
24654: LD_VAR 0 4
24658: MINUS
24659: PUSH
24660: LD_INT 0
24662: LESS
24663: IFFALSE 24675
// min_x := 0 else
24665: LD_ADDR_VAR 0 7
24669: PUSH
24670: LD_INT 0
24672: ST_TO_ADDR
24673: GO 24691
// min_x := x - r ;
24675: LD_ADDR_VAR 0 7
24679: PUSH
24680: LD_VAR 0 2
24684: PUSH
24685: LD_VAR 0 4
24689: MINUS
24690: ST_TO_ADDR
// if y - r < 0 then
24691: LD_VAR 0 3
24695: PUSH
24696: LD_VAR 0 4
24700: MINUS
24701: PUSH
24702: LD_INT 0
24704: LESS
24705: IFFALSE 24717
// min_y := 0 else
24707: LD_ADDR_VAR 0 8
24711: PUSH
24712: LD_INT 0
24714: ST_TO_ADDR
24715: GO 24733
// min_y := y - r ;
24717: LD_ADDR_VAR 0 8
24721: PUSH
24722: LD_VAR 0 3
24726: PUSH
24727: LD_VAR 0 4
24731: MINUS
24732: ST_TO_ADDR
// max_x := x + r ;
24733: LD_ADDR_VAR 0 9
24737: PUSH
24738: LD_VAR 0 2
24742: PUSH
24743: LD_VAR 0 4
24747: PLUS
24748: ST_TO_ADDR
// max_y := y + r ;
24749: LD_ADDR_VAR 0 10
24753: PUSH
24754: LD_VAR 0 3
24758: PUSH
24759: LD_VAR 0 4
24763: PLUS
24764: ST_TO_ADDR
// for _x = min_x to max_x do
24765: LD_ADDR_VAR 0 11
24769: PUSH
24770: DOUBLE
24771: LD_VAR 0 7
24775: DEC
24776: ST_TO_ADDR
24777: LD_VAR 0 9
24781: PUSH
24782: FOR_TO
24783: IFFALSE 24902
// for _y = min_y to max_y do
24785: LD_ADDR_VAR 0 12
24789: PUSH
24790: DOUBLE
24791: LD_VAR 0 8
24795: DEC
24796: ST_TO_ADDR
24797: LD_VAR 0 10
24801: PUSH
24802: FOR_TO
24803: IFFALSE 24898
// begin if not ValidHex ( _x , _y ) then
24805: LD_VAR 0 11
24809: PPUSH
24810: LD_VAR 0 12
24814: PPUSH
24815: CALL_OW 488
24819: NOT
24820: IFFALSE 24824
// continue ;
24822: GO 24802
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24824: LD_VAR 0 11
24828: PPUSH
24829: LD_VAR 0 12
24833: PPUSH
24834: CALL_OW 351
24838: IFFALSE 24856
24840: PUSH
24841: LD_VAR 0 11
24845: PPUSH
24846: LD_VAR 0 12
24850: PPUSH
24851: CALL_OW 554
24855: AND
24856: IFFALSE 24896
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24858: LD_ADDR_VAR 0 13
24862: PUSH
24863: LD_VAR 0 13
24867: PPUSH
24868: LD_VAR 0 13
24872: PUSH
24873: LD_INT 1
24875: PLUS
24876: PPUSH
24877: LD_VAR 0 11
24881: PUSH
24882: LD_VAR 0 12
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 2
24895: ST_TO_ADDR
// end ;
24896: GO 24802
24898: POP
24899: POP
24900: GO 24782
24902: POP
24903: POP
// if not list then
24904: LD_VAR 0 13
24908: NOT
24909: IFFALSE 24913
// exit ;
24911: GO 24984
// for i in list do
24913: LD_ADDR_VAR 0 6
24917: PUSH
24918: LD_VAR 0 13
24922: PUSH
24923: FOR_IN
24924: IFFALSE 24982
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24926: LD_VAR 0 1
24930: PPUSH
24931: LD_STRING M
24933: PUSH
24934: LD_VAR 0 6
24938: PUSH
24939: LD_INT 1
24941: ARRAY
24942: PUSH
24943: LD_VAR 0 6
24947: PUSH
24948: LD_INT 2
24950: ARRAY
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: PUSH
24973: EMPTY
24974: LIST
24975: PPUSH
24976: CALL_OW 447
24980: GO 24923
24982: POP
24983: POP
// end ;
24984: LD_VAR 0 5
24988: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24989: LD_INT 0
24991: PPUSH
24992: PPUSH
24993: PPUSH
24994: PPUSH
24995: PPUSH
24996: PPUSH
24997: PPUSH
24998: PPUSH
24999: PPUSH
25000: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25001: LD_VAR 0 1
25005: PPUSH
25006: CALL_OW 302
25010: NOT
25011: IFTRUE 25030
25013: PUSH
25014: LD_VAR 0 2
25018: PPUSH
25019: LD_VAR 0 3
25023: PPUSH
25024: CALL_OW 488
25028: NOT
25029: OR
25030: IFTRUE 25039
25032: PUSH
25033: LD_VAR 0 4
25037: NOT
25038: OR
25039: IFFALSE 25043
// exit ;
25041: GO 25560
// list := [ ] ;
25043: LD_ADDR_VAR 0 13
25047: PUSH
25048: EMPTY
25049: ST_TO_ADDR
// if x - r < 0 then
25050: LD_VAR 0 2
25054: PUSH
25055: LD_VAR 0 4
25059: MINUS
25060: PUSH
25061: LD_INT 0
25063: LESS
25064: IFFALSE 25076
// min_x := 0 else
25066: LD_ADDR_VAR 0 7
25070: PUSH
25071: LD_INT 0
25073: ST_TO_ADDR
25074: GO 25092
// min_x := x - r ;
25076: LD_ADDR_VAR 0 7
25080: PUSH
25081: LD_VAR 0 2
25085: PUSH
25086: LD_VAR 0 4
25090: MINUS
25091: ST_TO_ADDR
// if y - r < 0 then
25092: LD_VAR 0 3
25096: PUSH
25097: LD_VAR 0 4
25101: MINUS
25102: PUSH
25103: LD_INT 0
25105: LESS
25106: IFFALSE 25118
// min_y := 0 else
25108: LD_ADDR_VAR 0 8
25112: PUSH
25113: LD_INT 0
25115: ST_TO_ADDR
25116: GO 25134
// min_y := y - r ;
25118: LD_ADDR_VAR 0 8
25122: PUSH
25123: LD_VAR 0 3
25127: PUSH
25128: LD_VAR 0 4
25132: MINUS
25133: ST_TO_ADDR
// max_x := x + r ;
25134: LD_ADDR_VAR 0 9
25138: PUSH
25139: LD_VAR 0 2
25143: PUSH
25144: LD_VAR 0 4
25148: PLUS
25149: ST_TO_ADDR
// max_y := y + r ;
25150: LD_ADDR_VAR 0 10
25154: PUSH
25155: LD_VAR 0 3
25159: PUSH
25160: LD_VAR 0 4
25164: PLUS
25165: ST_TO_ADDR
// for _x = min_x to max_x do
25166: LD_ADDR_VAR 0 11
25170: PUSH
25171: DOUBLE
25172: LD_VAR 0 7
25176: DEC
25177: ST_TO_ADDR
25178: LD_VAR 0 9
25182: PUSH
25183: FOR_TO
25184: IFFALSE 25303
// for _y = min_y to max_y do
25186: LD_ADDR_VAR 0 12
25190: PUSH
25191: DOUBLE
25192: LD_VAR 0 8
25196: DEC
25197: ST_TO_ADDR
25198: LD_VAR 0 10
25202: PUSH
25203: FOR_TO
25204: IFFALSE 25299
// begin if not ValidHex ( _x , _y ) then
25206: LD_VAR 0 11
25210: PPUSH
25211: LD_VAR 0 12
25215: PPUSH
25216: CALL_OW 488
25220: NOT
25221: IFFALSE 25225
// continue ;
25223: GO 25203
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25225: LD_VAR 0 11
25229: PPUSH
25230: LD_VAR 0 12
25234: PPUSH
25235: CALL_OW 351
25239: IFFALSE 25257
25241: PUSH
25242: LD_VAR 0 11
25246: PPUSH
25247: LD_VAR 0 12
25251: PPUSH
25252: CALL_OW 554
25256: AND
25257: IFFALSE 25297
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25259: LD_ADDR_VAR 0 13
25263: PUSH
25264: LD_VAR 0 13
25268: PPUSH
25269: LD_VAR 0 13
25273: PUSH
25274: LD_INT 1
25276: PLUS
25277: PPUSH
25278: LD_VAR 0 11
25282: PUSH
25283: LD_VAR 0 12
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 2
25296: ST_TO_ADDR
// end ;
25297: GO 25203
25299: POP
25300: POP
25301: GO 25183
25303: POP
25304: POP
// if not list then
25305: LD_VAR 0 13
25309: NOT
25310: IFFALSE 25314
// exit ;
25312: GO 25560
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25314: LD_ADDR_VAR 0 13
25318: PUSH
25319: LD_VAR 0 1
25323: PPUSH
25324: LD_VAR 0 13
25328: PPUSH
25329: LD_INT 1
25331: PPUSH
25332: LD_INT 1
25334: PPUSH
25335: CALL 34402 0 4
25339: ST_TO_ADDR
// ComStop ( flame ) ;
25340: LD_VAR 0 1
25344: PPUSH
25345: CALL_OW 141
// for i in list do
25349: LD_ADDR_VAR 0 6
25353: PUSH
25354: LD_VAR 0 13
25358: PUSH
25359: FOR_IN
25360: IFFALSE 25391
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25362: LD_VAR 0 1
25366: PPUSH
25367: LD_VAR 0 6
25371: PUSH
25372: LD_INT 1
25374: ARRAY
25375: PPUSH
25376: LD_VAR 0 6
25380: PUSH
25381: LD_INT 2
25383: ARRAY
25384: PPUSH
25385: CALL_OW 176
25389: GO 25359
25391: POP
25392: POP
// repeat wait ( 0 0$1 ) ;
25393: LD_INT 35
25395: PPUSH
25396: CALL_OW 67
// task := GetTaskList ( flame ) ;
25400: LD_ADDR_VAR 0 14
25404: PUSH
25405: LD_VAR 0 1
25409: PPUSH
25410: CALL_OW 437
25414: ST_TO_ADDR
// if not task then
25415: LD_VAR 0 14
25419: NOT
25420: IFFALSE 25424
// exit ;
25422: GO 25560
// if task [ 1 ] [ 1 ] <> | then
25424: LD_VAR 0 14
25428: PUSH
25429: LD_INT 1
25431: ARRAY
25432: PUSH
25433: LD_INT 1
25435: ARRAY
25436: PUSH
25437: LD_STRING |
25439: NONEQUAL
25440: IFFALSE 25444
// exit ;
25442: GO 25560
// _x := task [ 1 ] [ 2 ] ;
25444: LD_ADDR_VAR 0 11
25448: PUSH
25449: LD_VAR 0 14
25453: PUSH
25454: LD_INT 1
25456: ARRAY
25457: PUSH
25458: LD_INT 2
25460: ARRAY
25461: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25462: LD_ADDR_VAR 0 12
25466: PUSH
25467: LD_VAR 0 14
25471: PUSH
25472: LD_INT 1
25474: ARRAY
25475: PUSH
25476: LD_INT 3
25478: ARRAY
25479: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25480: LD_VAR 0 11
25484: PPUSH
25485: LD_VAR 0 12
25489: PPUSH
25490: CALL_OW 351
25494: NOT
25495: IFTRUE 25514
25497: PUSH
25498: LD_VAR 0 11
25502: PPUSH
25503: LD_VAR 0 12
25507: PPUSH
25508: CALL_OW 554
25512: NOT
25513: OR
25514: IFFALSE 25548
// begin task := Delete ( task , 1 ) ;
25516: LD_ADDR_VAR 0 14
25520: PUSH
25521: LD_VAR 0 14
25525: PPUSH
25526: LD_INT 1
25528: PPUSH
25529: CALL_OW 3
25533: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25534: LD_VAR 0 1
25538: PPUSH
25539: LD_VAR 0 14
25543: PPUSH
25544: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25548: LD_VAR 0 1
25552: PPUSH
25553: CALL_OW 314
25557: NOT
25558: IFFALSE 25393
// end ;
25560: LD_VAR 0 5
25564: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25565: LD_EXP 92
25569: NOT
25570: IFFALSE 25620
25572: GO 25574
25574: DISABLE
// begin initHack := true ;
25575: LD_ADDR_EXP 92
25579: PUSH
25580: LD_INT 1
25582: ST_TO_ADDR
// hackTanks := [ ] ;
25583: LD_ADDR_EXP 93
25587: PUSH
25588: EMPTY
25589: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25590: LD_ADDR_EXP 94
25594: PUSH
25595: EMPTY
25596: ST_TO_ADDR
// hackLimit := 3 ;
25597: LD_ADDR_EXP 95
25601: PUSH
25602: LD_INT 3
25604: ST_TO_ADDR
// hackDist := 12 ;
25605: LD_ADDR_EXP 96
25609: PUSH
25610: LD_INT 12
25612: ST_TO_ADDR
// hackCounter := [ ] ;
25613: LD_ADDR_EXP 97
25617: PUSH
25618: EMPTY
25619: ST_TO_ADDR
// end ;
25620: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25621: LD_EXP 92
25625: IFFALSE 25643
25627: PUSH
25628: LD_INT 34
25630: PUSH
25631: LD_INT 99
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PPUSH
25638: CALL_OW 69
25642: AND
25643: IFFALSE 25896
25645: GO 25647
25647: DISABLE
25648: LD_INT 0
25650: PPUSH
25651: PPUSH
// begin enable ;
25652: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25653: LD_ADDR_VAR 0 1
25657: PUSH
25658: LD_INT 34
25660: PUSH
25661: LD_INT 99
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PPUSH
25668: CALL_OW 69
25672: PUSH
25673: FOR_IN
25674: IFFALSE 25894
// begin if not i in hackTanks then
25676: LD_VAR 0 1
25680: PUSH
25681: LD_EXP 93
25685: IN
25686: NOT
25687: IFFALSE 25770
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25689: LD_ADDR_EXP 93
25693: PUSH
25694: LD_EXP 93
25698: PPUSH
25699: LD_EXP 93
25703: PUSH
25704: LD_INT 1
25706: PLUS
25707: PPUSH
25708: LD_VAR 0 1
25712: PPUSH
25713: CALL_OW 1
25717: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25718: LD_ADDR_EXP 94
25722: PUSH
25723: LD_EXP 94
25727: PPUSH
25728: LD_EXP 94
25732: PUSH
25733: LD_INT 1
25735: PLUS
25736: PPUSH
25737: EMPTY
25738: PPUSH
25739: CALL_OW 1
25743: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25744: LD_ADDR_EXP 97
25748: PUSH
25749: LD_EXP 97
25753: PPUSH
25754: LD_EXP 97
25758: PUSH
25759: LD_INT 1
25761: PLUS
25762: PPUSH
25763: EMPTY
25764: PPUSH
25765: CALL_OW 1
25769: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25770: LD_VAR 0 1
25774: PPUSH
25775: CALL_OW 302
25779: NOT
25780: IFFALSE 25793
// begin HackUnlinkAll ( i ) ;
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL 25899 0 1
// continue ;
25791: GO 25673
// end ; HackCheckCapturedStatus ( i ) ;
25793: LD_VAR 0 1
25797: PPUSH
25798: CALL 26344 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_INT 81
25809: PUSH
25810: LD_VAR 0 1
25814: PPUSH
25815: CALL_OW 255
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 33
25826: PUSH
25827: LD_INT 3
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 91
25836: PUSH
25837: LD_VAR 0 1
25841: PUSH
25842: LD_EXP 96
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 50
25854: PUSH
25855: EMPTY
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: PPUSH
25864: CALL_OW 69
25868: ST_TO_ADDR
// if not tmp then
25869: LD_VAR 0 2
25873: NOT
25874: IFFALSE 25878
// continue ;
25876: GO 25673
// HackLink ( i , tmp ) ;
25878: LD_VAR 0 1
25882: PPUSH
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL 26035 0 2
// end ;
25892: GO 25673
25894: POP
25895: POP
// end ;
25896: PPOPN 2
25898: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25899: LD_INT 0
25901: PPUSH
25902: PPUSH
25903: PPUSH
// if not hack in hackTanks then
25904: LD_VAR 0 1
25908: PUSH
25909: LD_EXP 93
25913: IN
25914: NOT
25915: IFFALSE 25919
// exit ;
25917: GO 26030
// index := GetElementIndex ( hackTanks , hack ) ;
25919: LD_ADDR_VAR 0 4
25923: PUSH
25924: LD_EXP 93
25928: PPUSH
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL 33697 0 2
25938: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25939: LD_EXP 94
25943: PUSH
25944: LD_VAR 0 4
25948: ARRAY
25949: IFFALSE 26030
// begin for i in hackTanksCaptured [ index ] do
25951: LD_ADDR_VAR 0 3
25955: PUSH
25956: LD_EXP 94
25960: PUSH
25961: LD_VAR 0 4
25965: ARRAY
25966: PUSH
25967: FOR_IN
25968: IFFALSE 25994
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25970: LD_VAR 0 3
25974: PUSH
25975: LD_INT 1
25977: ARRAY
25978: PPUSH
25979: LD_VAR 0 3
25983: PUSH
25984: LD_INT 2
25986: ARRAY
25987: PPUSH
25988: CALL_OW 235
25992: GO 25967
25994: POP
25995: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25996: LD_ADDR_EXP 94
26000: PUSH
26001: LD_EXP 94
26005: PPUSH
26006: LD_VAR 0 4
26010: PPUSH
26011: EMPTY
26012: PPUSH
26013: CALL_OW 1
26017: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26018: LD_VAR 0 1
26022: PPUSH
26023: LD_INT 0
26025: PPUSH
26026: CALL_OW 505
// end ; end ;
26030: LD_VAR 0 2
26034: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26035: LD_INT 0
26037: PPUSH
26038: PPUSH
26039: PPUSH
// if not hack in hackTanks or not vehicles then
26040: LD_VAR 0 1
26044: PUSH
26045: LD_EXP 93
26049: IN
26050: NOT
26051: IFTRUE 26060
26053: PUSH
26054: LD_VAR 0 2
26058: NOT
26059: OR
26060: IFFALSE 26064
// exit ;
26062: GO 26339
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26064: LD_ADDR_VAR 0 2
26068: PUSH
26069: LD_VAR 0 1
26073: PPUSH
26074: LD_VAR 0 2
26078: PPUSH
26079: LD_INT 1
26081: PPUSH
26082: LD_INT 1
26084: PPUSH
26085: CALL 34349 0 4
26089: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26090: LD_ADDR_VAR 0 5
26094: PUSH
26095: LD_EXP 93
26099: PPUSH
26100: LD_VAR 0 1
26104: PPUSH
26105: CALL 33697 0 2
26109: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26110: LD_EXP 94
26114: PUSH
26115: LD_VAR 0 5
26119: ARRAY
26120: PUSH
26121: LD_EXP 95
26125: LESS
26126: IFFALSE 26315
// begin for i := 1 to vehicles do
26128: LD_ADDR_VAR 0 4
26132: PUSH
26133: DOUBLE
26134: LD_INT 1
26136: DEC
26137: ST_TO_ADDR
26138: LD_VAR 0 2
26142: PUSH
26143: FOR_TO
26144: IFFALSE 26313
// begin if hackTanksCaptured [ index ] = hackLimit then
26146: LD_EXP 94
26150: PUSH
26151: LD_VAR 0 5
26155: ARRAY
26156: PUSH
26157: LD_EXP 95
26161: EQUAL
26162: IFFALSE 26166
// break ;
26164: GO 26313
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26166: LD_ADDR_EXP 97
26170: PUSH
26171: LD_EXP 97
26175: PPUSH
26176: LD_VAR 0 5
26180: PPUSH
26181: LD_EXP 97
26185: PUSH
26186: LD_VAR 0 5
26190: ARRAY
26191: PUSH
26192: LD_INT 1
26194: PLUS
26195: PPUSH
26196: CALL_OW 1
26200: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26201: LD_ADDR_EXP 94
26205: PUSH
26206: LD_EXP 94
26210: PPUSH
26211: LD_VAR 0 5
26215: PUSH
26216: LD_EXP 94
26220: PUSH
26221: LD_VAR 0 5
26225: ARRAY
26226: PUSH
26227: LD_INT 1
26229: PLUS
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: LD_VAR 0 2
26239: PUSH
26240: LD_VAR 0 4
26244: ARRAY
26245: PUSH
26246: LD_VAR 0 2
26250: PUSH
26251: LD_VAR 0 4
26255: ARRAY
26256: PPUSH
26257: CALL_OW 255
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PPUSH
26266: CALL 33914 0 3
26270: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26271: LD_VAR 0 2
26275: PUSH
26276: LD_VAR 0 4
26280: ARRAY
26281: PPUSH
26282: LD_VAR 0 1
26286: PPUSH
26287: CALL_OW 255
26291: PPUSH
26292: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26296: LD_VAR 0 2
26300: PUSH
26301: LD_VAR 0 4
26305: ARRAY
26306: PPUSH
26307: CALL_OW 141
// end ;
26311: GO 26143
26313: POP
26314: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26315: LD_VAR 0 1
26319: PPUSH
26320: LD_EXP 94
26324: PUSH
26325: LD_VAR 0 5
26329: ARRAY
26330: PUSH
26331: LD_INT 0
26333: PLUS
26334: PPUSH
26335: CALL_OW 505
// end ;
26339: LD_VAR 0 3
26343: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
26348: PPUSH
26349: PPUSH
// if not hack in hackTanks then
26350: LD_VAR 0 1
26354: PUSH
26355: LD_EXP 93
26359: IN
26360: NOT
26361: IFFALSE 26365
// exit ;
26363: GO 26609
// index := GetElementIndex ( hackTanks , hack ) ;
26365: LD_ADDR_VAR 0 4
26369: PUSH
26370: LD_EXP 93
26374: PPUSH
26375: LD_VAR 0 1
26379: PPUSH
26380: CALL 33697 0 2
26384: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26385: LD_ADDR_VAR 0 3
26389: PUSH
26390: DOUBLE
26391: LD_EXP 94
26395: PUSH
26396: LD_VAR 0 4
26400: ARRAY
26401: INC
26402: ST_TO_ADDR
26403: LD_INT 1
26405: PUSH
26406: FOR_DOWNTO
26407: IFFALSE 26583
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26409: LD_ADDR_VAR 0 5
26413: PUSH
26414: LD_EXP 94
26418: PUSH
26419: LD_VAR 0 4
26423: ARRAY
26424: PUSH
26425: LD_VAR 0 3
26429: ARRAY
26430: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26431: LD_VAR 0 5
26435: PUSH
26436: LD_INT 1
26438: ARRAY
26439: PPUSH
26440: CALL_OW 302
26444: NOT
26445: IFTRUE 26473
26447: PUSH
26448: LD_VAR 0 5
26452: PUSH
26453: LD_INT 1
26455: ARRAY
26456: PPUSH
26457: CALL_OW 255
26461: PUSH
26462: LD_VAR 0 1
26466: PPUSH
26467: CALL_OW 255
26471: NONEQUAL
26472: OR
26473: IFFALSE 26581
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26475: LD_VAR 0 5
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: PPUSH
26484: CALL_OW 305
26488: IFFALSE 26516
26490: PUSH
26491: LD_VAR 0 5
26495: PUSH
26496: LD_INT 1
26498: ARRAY
26499: PPUSH
26500: CALL_OW 255
26504: PUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 255
26514: EQUAL
26515: AND
26516: IFFALSE 26540
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26518: LD_VAR 0 5
26522: PUSH
26523: LD_INT 1
26525: ARRAY
26526: PPUSH
26527: LD_VAR 0 5
26531: PUSH
26532: LD_INT 2
26534: ARRAY
26535: PPUSH
26536: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26540: LD_ADDR_EXP 94
26544: PUSH
26545: LD_EXP 94
26549: PPUSH
26550: LD_VAR 0 4
26554: PPUSH
26555: LD_EXP 94
26559: PUSH
26560: LD_VAR 0 4
26564: ARRAY
26565: PPUSH
26566: LD_VAR 0 3
26570: PPUSH
26571: CALL_OW 3
26575: PPUSH
26576: CALL_OW 1
26580: ST_TO_ADDR
// end ; end ;
26581: GO 26406
26583: POP
26584: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26585: LD_VAR 0 1
26589: PPUSH
26590: LD_EXP 94
26594: PUSH
26595: LD_VAR 0 4
26599: ARRAY
26600: PUSH
26601: LD_INT 0
26603: PLUS
26604: PPUSH
26605: CALL_OW 505
// end ;
26609: LD_VAR 0 2
26613: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26614: LD_INT 0
26616: PPUSH
26617: PPUSH
26618: PPUSH
26619: PPUSH
// if not hack in hackTanks then
26620: LD_VAR 0 1
26624: PUSH
26625: LD_EXP 93
26629: IN
26630: NOT
26631: IFFALSE 26635
// exit ;
26633: GO 26720
// index := GetElementIndex ( hackTanks , hack ) ;
26635: LD_ADDR_VAR 0 5
26639: PUSH
26640: LD_EXP 93
26644: PPUSH
26645: LD_VAR 0 1
26649: PPUSH
26650: CALL 33697 0 2
26654: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26655: LD_ADDR_VAR 0 4
26659: PUSH
26660: DOUBLE
26661: LD_INT 1
26663: DEC
26664: ST_TO_ADDR
26665: LD_EXP 94
26669: PUSH
26670: LD_VAR 0 5
26674: ARRAY
26675: PUSH
26676: FOR_TO
26677: IFFALSE 26718
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26679: LD_EXP 94
26683: PUSH
26684: LD_VAR 0 5
26688: ARRAY
26689: PUSH
26690: LD_VAR 0 4
26694: ARRAY
26695: PUSH
26696: LD_INT 1
26698: ARRAY
26699: PUSH
26700: LD_VAR 0 2
26704: EQUAL
26705: IFFALSE 26716
// KillUnit ( vehicle ) ;
26707: LD_VAR 0 2
26711: PPUSH
26712: CALL_OW 66
26716: GO 26676
26718: POP
26719: POP
// end ;
26720: LD_VAR 0 3
26724: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26725: LD_EXP 98
26729: NOT
26730: IFFALSE 26765
26732: GO 26734
26734: DISABLE
// begin initMiner := true ;
26735: LD_ADDR_EXP 98
26739: PUSH
26740: LD_INT 1
26742: ST_TO_ADDR
// minersList := [ ] ;
26743: LD_ADDR_EXP 99
26747: PUSH
26748: EMPTY
26749: ST_TO_ADDR
// minerMinesList := [ ] ;
26750: LD_ADDR_EXP 100
26754: PUSH
26755: EMPTY
26756: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26757: LD_ADDR_EXP 101
26761: PUSH
26762: LD_INT 5
26764: ST_TO_ADDR
// end ;
26765: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26766: LD_EXP 98
26770: IFFALSE 26788
26772: PUSH
26773: LD_INT 34
26775: PUSH
26776: LD_INT 81
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PPUSH
26783: CALL_OW 69
26787: AND
26788: IFFALSE 27251
26790: GO 26792
26792: DISABLE
26793: LD_INT 0
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
// begin enable ;
26799: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26800: LD_ADDR_VAR 0 1
26804: PUSH
26805: LD_INT 34
26807: PUSH
26808: LD_INT 81
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PPUSH
26815: CALL_OW 69
26819: PUSH
26820: FOR_IN
26821: IFFALSE 26893
// begin if not i in minersList then
26823: LD_VAR 0 1
26827: PUSH
26828: LD_EXP 99
26832: IN
26833: NOT
26834: IFFALSE 26891
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26836: LD_ADDR_EXP 99
26840: PUSH
26841: LD_EXP 99
26845: PPUSH
26846: LD_EXP 99
26850: PUSH
26851: LD_INT 1
26853: PLUS
26854: PPUSH
26855: LD_VAR 0 1
26859: PPUSH
26860: CALL_OW 1
26864: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26865: LD_ADDR_EXP 100
26869: PUSH
26870: LD_EXP 100
26874: PPUSH
26875: LD_EXP 100
26879: PUSH
26880: LD_INT 1
26882: PLUS
26883: PPUSH
26884: EMPTY
26885: PPUSH
26886: CALL_OW 1
26890: ST_TO_ADDR
// end end ;
26891: GO 26820
26893: POP
26894: POP
// for i := minerMinesList downto 1 do
26895: LD_ADDR_VAR 0 1
26899: PUSH
26900: DOUBLE
26901: LD_EXP 100
26905: INC
26906: ST_TO_ADDR
26907: LD_INT 1
26909: PUSH
26910: FOR_DOWNTO
26911: IFFALSE 27249
// begin if IsLive ( minersList [ i ] ) then
26913: LD_EXP 99
26917: PUSH
26918: LD_VAR 0 1
26922: ARRAY
26923: PPUSH
26924: CALL_OW 300
26928: IFFALSE 26956
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26930: LD_EXP 99
26934: PUSH
26935: LD_VAR 0 1
26939: ARRAY
26940: PPUSH
26941: LD_EXP 100
26945: PUSH
26946: LD_VAR 0 1
26950: ARRAY
26951: PPUSH
26952: CALL_OW 505
// if not minerMinesList [ i ] then
26956: LD_EXP 100
26960: PUSH
26961: LD_VAR 0 1
26965: ARRAY
26966: NOT
26967: IFFALSE 26971
// continue ;
26969: GO 26910
// for j := minerMinesList [ i ] downto 1 do
26971: LD_ADDR_VAR 0 2
26975: PUSH
26976: DOUBLE
26977: LD_EXP 100
26981: PUSH
26982: LD_VAR 0 1
26986: ARRAY
26987: INC
26988: ST_TO_ADDR
26989: LD_INT 1
26991: PUSH
26992: FOR_DOWNTO
26993: IFFALSE 27245
// begin side := GetSide ( minersList [ i ] ) ;
26995: LD_ADDR_VAR 0 3
26999: PUSH
27000: LD_EXP 99
27004: PUSH
27005: LD_VAR 0 1
27009: ARRAY
27010: PPUSH
27011: CALL_OW 255
27015: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27016: LD_ADDR_VAR 0 4
27020: PUSH
27021: LD_EXP 100
27025: PUSH
27026: LD_VAR 0 1
27030: ARRAY
27031: PUSH
27032: LD_VAR 0 2
27036: ARRAY
27037: PUSH
27038: LD_INT 1
27040: ARRAY
27041: PPUSH
27042: LD_EXP 100
27046: PUSH
27047: LD_VAR 0 1
27051: ARRAY
27052: PUSH
27053: LD_VAR 0 2
27057: ARRAY
27058: PUSH
27059: LD_INT 2
27061: ARRAY
27062: PPUSH
27063: CALL_OW 428
27067: ST_TO_ADDR
// if not tmp then
27068: LD_VAR 0 4
27072: NOT
27073: IFFALSE 27077
// continue ;
27075: GO 26992
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27077: LD_VAR 0 4
27081: PUSH
27082: LD_INT 81
27084: PUSH
27085: LD_VAR 0 3
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PPUSH
27094: CALL_OW 69
27098: IN
27099: IFFALSE 27149
27101: PUSH
27102: LD_EXP 100
27106: PUSH
27107: LD_VAR 0 1
27111: ARRAY
27112: PUSH
27113: LD_VAR 0 2
27117: ARRAY
27118: PUSH
27119: LD_INT 1
27121: ARRAY
27122: PPUSH
27123: LD_EXP 100
27127: PUSH
27128: LD_VAR 0 1
27132: ARRAY
27133: PUSH
27134: LD_VAR 0 2
27138: ARRAY
27139: PUSH
27140: LD_INT 2
27142: ARRAY
27143: PPUSH
27144: CALL_OW 458
27148: AND
27149: IFFALSE 27243
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27151: LD_EXP 100
27155: PUSH
27156: LD_VAR 0 1
27160: ARRAY
27161: PUSH
27162: LD_VAR 0 2
27166: ARRAY
27167: PUSH
27168: LD_INT 1
27170: ARRAY
27171: PPUSH
27172: LD_EXP 100
27176: PUSH
27177: LD_VAR 0 1
27181: ARRAY
27182: PUSH
27183: LD_VAR 0 2
27187: ARRAY
27188: PUSH
27189: LD_INT 2
27191: ARRAY
27192: PPUSH
27193: LD_VAR 0 3
27197: PPUSH
27198: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27202: LD_ADDR_EXP 100
27206: PUSH
27207: LD_EXP 100
27211: PPUSH
27212: LD_VAR 0 1
27216: PPUSH
27217: LD_EXP 100
27221: PUSH
27222: LD_VAR 0 1
27226: ARRAY
27227: PPUSH
27228: LD_VAR 0 2
27232: PPUSH
27233: CALL_OW 3
27237: PPUSH
27238: CALL_OW 1
27242: ST_TO_ADDR
// end ; end ;
27243: GO 26992
27245: POP
27246: POP
// end ;
27247: GO 26910
27249: POP
27250: POP
// end ;
27251: PPOPN 4
27253: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
// result := false ;
27258: LD_ADDR_VAR 0 4
27262: PUSH
27263: LD_INT 0
27265: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27266: LD_VAR 0 1
27270: PPUSH
27271: CALL_OW 264
27275: PUSH
27276: LD_INT 81
27278: EQUAL
27279: NOT
27280: IFFALSE 27284
// exit ;
27282: GO 27528
// index := GetElementIndex ( minersList , unit ) ;
27284: LD_ADDR_VAR 0 5
27288: PUSH
27289: LD_EXP 99
27293: PPUSH
27294: LD_VAR 0 1
27298: PPUSH
27299: CALL 33697 0 2
27303: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27304: LD_EXP 100
27308: PUSH
27309: LD_VAR 0 5
27313: ARRAY
27314: PUSH
27315: LD_EXP 101
27319: GREATEREQUAL
27320: IFFALSE 27324
// exit ;
27322: GO 27528
// ComMoveXY ( unit , x , y ) ;
27324: LD_VAR 0 1
27328: PPUSH
27329: LD_VAR 0 2
27333: PPUSH
27334: LD_VAR 0 3
27338: PPUSH
27339: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27343: LD_INT 35
27345: PPUSH
27346: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27350: LD_VAR 0 1
27354: PPUSH
27355: LD_VAR 0 2
27359: PPUSH
27360: LD_VAR 0 3
27364: PPUSH
27365: CALL 65743 0 3
27369: NOT
27370: IFFALSE 27383
27372: PUSH
27373: LD_VAR 0 1
27377: PPUSH
27378: CALL_OW 314
27382: AND
27383: IFFALSE 27387
// exit ;
27385: GO 27528
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27387: LD_VAR 0 2
27391: PPUSH
27392: LD_VAR 0 3
27396: PPUSH
27397: CALL_OW 428
27401: PUSH
27402: LD_VAR 0 1
27406: EQUAL
27407: IFFALSE 27421
27409: PUSH
27410: LD_VAR 0 1
27414: PPUSH
27415: CALL_OW 314
27419: NOT
27420: AND
27421: IFFALSE 27343
// PlaySoundXY ( x , y , PlantMine ) ;
27423: LD_VAR 0 2
27427: PPUSH
27428: LD_VAR 0 3
27432: PPUSH
27433: LD_STRING PlantMine
27435: PPUSH
27436: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27440: LD_VAR 0 2
27444: PPUSH
27445: LD_VAR 0 3
27449: PPUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: CALL_OW 255
27459: PPUSH
27460: LD_INT 0
27462: PPUSH
27463: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27467: LD_ADDR_EXP 100
27471: PUSH
27472: LD_EXP 100
27476: PPUSH
27477: LD_VAR 0 5
27481: PUSH
27482: LD_EXP 100
27486: PUSH
27487: LD_VAR 0 5
27491: ARRAY
27492: PUSH
27493: LD_INT 1
27495: PLUS
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PPUSH
27501: LD_VAR 0 2
27505: PUSH
27506: LD_VAR 0 3
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PPUSH
27515: CALL 33914 0 3
27519: ST_TO_ADDR
// result := true ;
27520: LD_ADDR_VAR 0 4
27524: PUSH
27525: LD_INT 1
27527: ST_TO_ADDR
// end ;
27528: LD_VAR 0 4
27532: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
27537: PPUSH
// if not unit in minersList then
27538: LD_VAR 0 1
27542: PUSH
27543: LD_EXP 99
27547: IN
27548: NOT
27549: IFFALSE 27553
// exit ;
27551: GO 27947
// index := GetElementIndex ( minersList , unit ) ;
27553: LD_ADDR_VAR 0 6
27557: PUSH
27558: LD_EXP 99
27562: PPUSH
27563: LD_VAR 0 1
27567: PPUSH
27568: CALL 33697 0 2
27572: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27573: LD_ADDR_VAR 0 5
27577: PUSH
27578: DOUBLE
27579: LD_EXP 100
27583: PUSH
27584: LD_VAR 0 6
27588: ARRAY
27589: INC
27590: ST_TO_ADDR
27591: LD_INT 1
27593: PUSH
27594: FOR_DOWNTO
27595: IFFALSE 27758
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27597: LD_EXP 100
27601: PUSH
27602: LD_VAR 0 6
27606: ARRAY
27607: PUSH
27608: LD_VAR 0 5
27612: ARRAY
27613: PUSH
27614: LD_INT 1
27616: ARRAY
27617: PUSH
27618: LD_VAR 0 2
27622: EQUAL
27623: IFFALSE 27653
27625: PUSH
27626: LD_EXP 100
27630: PUSH
27631: LD_VAR 0 6
27635: ARRAY
27636: PUSH
27637: LD_VAR 0 5
27641: ARRAY
27642: PUSH
27643: LD_INT 2
27645: ARRAY
27646: PUSH
27647: LD_VAR 0 3
27651: EQUAL
27652: AND
27653: IFFALSE 27756
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27655: LD_EXP 100
27659: PUSH
27660: LD_VAR 0 6
27664: ARRAY
27665: PUSH
27666: LD_VAR 0 5
27670: ARRAY
27671: PUSH
27672: LD_INT 1
27674: ARRAY
27675: PPUSH
27676: LD_EXP 100
27680: PUSH
27681: LD_VAR 0 6
27685: ARRAY
27686: PUSH
27687: LD_VAR 0 5
27691: ARRAY
27692: PUSH
27693: LD_INT 2
27695: ARRAY
27696: PPUSH
27697: LD_VAR 0 1
27701: PPUSH
27702: CALL_OW 255
27706: PPUSH
27707: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27711: LD_ADDR_EXP 100
27715: PUSH
27716: LD_EXP 100
27720: PPUSH
27721: LD_VAR 0 6
27725: PPUSH
27726: LD_EXP 100
27730: PUSH
27731: LD_VAR 0 6
27735: ARRAY
27736: PPUSH
27737: LD_VAR 0 5
27741: PPUSH
27742: CALL_OW 3
27746: PPUSH
27747: CALL_OW 1
27751: ST_TO_ADDR
// exit ;
27752: POP
27753: POP
27754: GO 27947
// end ; end ;
27756: GO 27594
27758: POP
27759: POP
// for i := minerMinesList [ index ] downto 1 do
27760: LD_ADDR_VAR 0 5
27764: PUSH
27765: DOUBLE
27766: LD_EXP 100
27770: PUSH
27771: LD_VAR 0 6
27775: ARRAY
27776: INC
27777: ST_TO_ADDR
27778: LD_INT 1
27780: PUSH
27781: FOR_DOWNTO
27782: IFFALSE 27945
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27784: LD_EXP 100
27788: PUSH
27789: LD_VAR 0 6
27793: ARRAY
27794: PUSH
27795: LD_VAR 0 5
27799: ARRAY
27800: PUSH
27801: LD_INT 1
27803: ARRAY
27804: PPUSH
27805: LD_EXP 100
27809: PUSH
27810: LD_VAR 0 6
27814: ARRAY
27815: PUSH
27816: LD_VAR 0 5
27820: ARRAY
27821: PUSH
27822: LD_INT 2
27824: ARRAY
27825: PPUSH
27826: LD_VAR 0 2
27830: PPUSH
27831: LD_VAR 0 3
27835: PPUSH
27836: CALL_OW 298
27840: PUSH
27841: LD_INT 6
27843: LESS
27844: IFFALSE 27943
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27846: LD_EXP 100
27850: PUSH
27851: LD_VAR 0 6
27855: ARRAY
27856: PUSH
27857: LD_VAR 0 5
27861: ARRAY
27862: PUSH
27863: LD_INT 1
27865: ARRAY
27866: PPUSH
27867: LD_EXP 100
27871: PUSH
27872: LD_VAR 0 6
27876: ARRAY
27877: PUSH
27878: LD_VAR 0 5
27882: ARRAY
27883: PUSH
27884: LD_INT 2
27886: ARRAY
27887: PPUSH
27888: LD_VAR 0 1
27892: PPUSH
27893: CALL_OW 255
27897: PPUSH
27898: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27902: LD_ADDR_EXP 100
27906: PUSH
27907: LD_EXP 100
27911: PPUSH
27912: LD_VAR 0 6
27916: PPUSH
27917: LD_EXP 100
27921: PUSH
27922: LD_VAR 0 6
27926: ARRAY
27927: PPUSH
27928: LD_VAR 0 5
27932: PPUSH
27933: CALL_OW 3
27937: PPUSH
27938: CALL_OW 1
27942: ST_TO_ADDR
// end ; end ;
27943: GO 27781
27945: POP
27946: POP
// end ;
27947: LD_VAR 0 4
27951: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27952: LD_INT 0
27954: PPUSH
27955: PPUSH
27956: PPUSH
27957: PPUSH
27958: PPUSH
27959: PPUSH
27960: PPUSH
27961: PPUSH
27962: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27963: LD_VAR 0 1
27967: PPUSH
27968: CALL_OW 264
27972: PUSH
27973: LD_INT 81
27975: EQUAL
27976: NOT
27977: IFTRUE 27992
27979: PUSH
27980: LD_VAR 0 1
27984: PUSH
27985: LD_EXP 99
27989: IN
27990: NOT
27991: OR
27992: IFFALSE 27996
// exit ;
27994: GO 28322
// index := GetElementIndex ( minersList , unit ) ;
27996: LD_ADDR_VAR 0 6
28000: PUSH
28001: LD_EXP 99
28005: PPUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL 33697 0 2
28015: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28016: LD_ADDR_VAR 0 8
28020: PUSH
28021: LD_EXP 101
28025: PUSH
28026: LD_EXP 100
28030: PUSH
28031: LD_VAR 0 6
28035: ARRAY
28036: MINUS
28037: ST_TO_ADDR
// if not minesFreeAmount then
28038: LD_VAR 0 8
28042: NOT
28043: IFFALSE 28047
// exit ;
28045: GO 28322
// tmp := [ ] ;
28047: LD_ADDR_VAR 0 7
28051: PUSH
28052: EMPTY
28053: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28054: LD_ADDR_VAR 0 5
28058: PUSH
28059: DOUBLE
28060: LD_INT 1
28062: DEC
28063: ST_TO_ADDR
28064: LD_VAR 0 8
28068: PUSH
28069: FOR_TO
28070: IFFALSE 28269
// begin _d := rand ( 0 , 5 ) ;
28072: LD_ADDR_VAR 0 11
28076: PUSH
28077: LD_INT 0
28079: PPUSH
28080: LD_INT 5
28082: PPUSH
28083: CALL_OW 12
28087: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28088: LD_ADDR_VAR 0 12
28092: PUSH
28093: LD_INT 2
28095: PPUSH
28096: LD_INT 6
28098: PPUSH
28099: CALL_OW 12
28103: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28104: LD_ADDR_VAR 0 9
28108: PUSH
28109: LD_VAR 0 2
28113: PPUSH
28114: LD_VAR 0 11
28118: PPUSH
28119: LD_VAR 0 12
28123: PPUSH
28124: CALL_OW 272
28128: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28129: LD_ADDR_VAR 0 10
28133: PUSH
28134: LD_VAR 0 3
28138: PPUSH
28139: LD_VAR 0 11
28143: PPUSH
28144: LD_VAR 0 12
28148: PPUSH
28149: CALL_OW 273
28153: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28154: LD_VAR 0 9
28158: PPUSH
28159: LD_VAR 0 10
28163: PPUSH
28164: CALL_OW 488
28168: IFFALSE 28192
28170: PUSH
28171: LD_VAR 0 9
28175: PUSH
28176: LD_VAR 0 10
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_VAR 0 7
28189: IN
28190: NOT
28191: AND
28192: IFFALSE 28211
28194: PUSH
28195: LD_VAR 0 9
28199: PPUSH
28200: LD_VAR 0 10
28204: PPUSH
28205: CALL_OW 458
28209: NOT
28210: AND
28211: IFFALSE 28253
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28213: LD_ADDR_VAR 0 7
28217: PUSH
28218: LD_VAR 0 7
28222: PPUSH
28223: LD_VAR 0 7
28227: PUSH
28228: LD_INT 1
28230: PLUS
28231: PPUSH
28232: LD_VAR 0 9
28236: PUSH
28237: LD_VAR 0 10
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 1
28250: ST_TO_ADDR
28251: GO 28267
// i := i - 1 ;
28253: LD_ADDR_VAR 0 5
28257: PUSH
28258: LD_VAR 0 5
28262: PUSH
28263: LD_INT 1
28265: MINUS
28266: ST_TO_ADDR
// end ;
28267: GO 28069
28269: POP
28270: POP
// for i in tmp do
28271: LD_ADDR_VAR 0 5
28275: PUSH
28276: LD_VAR 0 7
28280: PUSH
28281: FOR_IN
28282: IFFALSE 28320
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28284: LD_VAR 0 1
28288: PPUSH
28289: LD_VAR 0 5
28293: PUSH
28294: LD_INT 1
28296: ARRAY
28297: PPUSH
28298: LD_VAR 0 5
28302: PUSH
28303: LD_INT 2
28305: ARRAY
28306: PPUSH
28307: CALL 27254 0 3
28311: NOT
28312: IFFALSE 28318
// exit ;
28314: POP
28315: POP
28316: GO 28322
28318: GO 28281
28320: POP
28321: POP
// end ;
28322: LD_VAR 0 4
28326: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28327: LD_INT 0
28329: PPUSH
28330: PPUSH
28331: PPUSH
28332: PPUSH
28333: PPUSH
28334: PPUSH
28335: PPUSH
28336: PPUSH
28337: PPUSH
// if GetClass ( unit ) <> class_sniper then
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL_OW 257
28347: PUSH
28348: LD_INT 5
28350: NONEQUAL
28351: IFFALSE 28355
// exit ;
28353: GO 28825
// dist := 8 ;
28355: LD_ADDR_VAR 0 5
28359: PUSH
28360: LD_INT 8
28362: ST_TO_ADDR
// viewRange := 12 ;
28363: LD_ADDR_VAR 0 8
28367: PUSH
28368: LD_INT 12
28370: ST_TO_ADDR
// side := GetSide ( unit ) ;
28371: LD_ADDR_VAR 0 6
28375: PUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: CALL_OW 255
28385: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28386: LD_INT 61
28388: PPUSH
28389: LD_VAR 0 6
28393: PPUSH
28394: CALL_OW 321
28398: PUSH
28399: LD_INT 2
28401: EQUAL
28402: IFFALSE 28412
// viewRange := 16 ;
28404: LD_ADDR_VAR 0 8
28408: PUSH
28409: LD_INT 16
28411: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28412: LD_VAR 0 1
28416: PPUSH
28417: LD_VAR 0 2
28421: PPUSH
28422: LD_VAR 0 3
28426: PPUSH
28427: CALL_OW 297
28431: PUSH
28432: LD_VAR 0 5
28436: GREATER
28437: IFFALSE 28516
// begin ComMoveXY ( unit , x , y ) ;
28439: LD_VAR 0 1
28443: PPUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: LD_VAR 0 3
28453: PPUSH
28454: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28458: LD_INT 35
28460: PPUSH
28461: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28465: LD_VAR 0 1
28469: PPUSH
28470: LD_VAR 0 2
28474: PPUSH
28475: LD_VAR 0 3
28479: PPUSH
28480: CALL 65743 0 3
28484: NOT
28485: IFFALSE 28489
// exit ;
28487: GO 28825
// until GetDistUnitXY ( unit , x , y ) < dist ;
28489: LD_VAR 0 1
28493: PPUSH
28494: LD_VAR 0 2
28498: PPUSH
28499: LD_VAR 0 3
28503: PPUSH
28504: CALL_OW 297
28508: PUSH
28509: LD_VAR 0 5
28513: LESS
28514: IFFALSE 28458
// end ; ComTurnXY ( unit , x , y ) ;
28516: LD_VAR 0 1
28520: PPUSH
28521: LD_VAR 0 2
28525: PPUSH
28526: LD_VAR 0 3
28530: PPUSH
28531: CALL_OW 118
// repeat if Multiplayer then
28535: LD_OWVAR 4
28539: IFFALSE 28550
// wait ( 35 ) else
28541: LD_INT 35
28543: PPUSH
28544: CALL_OW 67
28548: GO 28557
// wait ( 5 ) ;
28550: LD_INT 5
28552: PPUSH
28553: CALL_OW 67
// _d := GetDir ( unit ) ;
28557: LD_ADDR_VAR 0 11
28561: PUSH
28562: LD_VAR 0 1
28566: PPUSH
28567: CALL_OW 254
28571: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28572: LD_ADDR_VAR 0 7
28576: PUSH
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL_OW 250
28586: PPUSH
28587: LD_VAR 0 1
28591: PPUSH
28592: CALL_OW 251
28596: PPUSH
28597: LD_VAR 0 2
28601: PPUSH
28602: LD_VAR 0 3
28606: PPUSH
28607: CALL 68379 0 4
28611: ST_TO_ADDR
// until dir = _d ;
28612: LD_VAR 0 7
28616: PUSH
28617: LD_VAR 0 11
28621: EQUAL
28622: IFFALSE 28535
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
28624: LD_ADDR_VAR 0 9
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 250
28638: PPUSH
28639: LD_VAR 0 7
28643: PPUSH
28644: LD_VAR 0 5
28648: PPUSH
28649: CALL_OW 272
28653: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
28654: LD_ADDR_VAR 0 10
28658: PUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 251
28668: PPUSH
28669: LD_VAR 0 7
28673: PPUSH
28674: LD_VAR 0 5
28678: PPUSH
28679: CALL_OW 273
28683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28684: LD_VAR 0 9
28688: PPUSH
28689: LD_VAR 0 10
28693: PPUSH
28694: CALL_OW 488
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 28825
// ComAnimCustom ( unit , 1 ) ;
28703: LD_VAR 0 1
28707: PPUSH
28708: LD_INT 1
28710: PPUSH
28711: CALL_OW 592
// p := 0 ;
28715: LD_ADDR_VAR 0 12
28719: PUSH
28720: LD_INT 0
28722: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28723: LD_VAR 0 9
28727: PPUSH
28728: LD_VAR 0 10
28732: PPUSH
28733: LD_VAR 0 6
28737: PPUSH
28738: LD_VAR 0 8
28742: PPUSH
28743: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
28747: LD_INT 35
28749: PPUSH
28750: CALL_OW 67
// p := Inc ( p ) ;
28754: LD_ADDR_VAR 0 12
28758: PUSH
28759: LD_VAR 0 12
28763: PPUSH
28764: CALL 68335 0 1
28768: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
28769: LD_VAR 0 12
28773: PUSH
28774: LD_INT 3
28776: EQUAL
28777: IFTRUE 28791
28779: PUSH
28780: LD_VAR 0 1
28784: PPUSH
28785: CALL_OW 302
28789: NOT
28790: OR
28791: IFTRUE 28804
28793: PUSH
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 301
28803: OR
28804: IFFALSE 28747
// RemoveSeeing ( _x , _y , side ) ;
28806: LD_VAR 0 9
28810: PPUSH
28811: LD_VAR 0 10
28815: PPUSH
28816: LD_VAR 0 6
28820: PPUSH
28821: CALL_OW 331
// end ; end_of_file
28825: LD_VAR 0 4
28829: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
// if exist_mode then
28834: LD_VAR 0 2
28838: IFFALSE 28884
// begin unit := CreateCharacter ( prefix & ident ) ;
28840: LD_ADDR_VAR 0 5
28844: PUSH
28845: LD_VAR 0 3
28849: PUSH
28850: LD_VAR 0 1
28854: STR
28855: PPUSH
28856: CALL_OW 34
28860: ST_TO_ADDR
// if unit then
28861: LD_VAR 0 5
28865: IFFALSE 28882
// DeleteCharacters ( prefix & ident ) ;
28867: LD_VAR 0 3
28871: PUSH
28872: LD_VAR 0 1
28876: STR
28877: PPUSH
28878: CALL_OW 40
// end else
28882: GO 28899
// unit := NewCharacter ( ident ) ;
28884: LD_ADDR_VAR 0 5
28888: PUSH
28889: LD_VAR 0 1
28893: PPUSH
28894: CALL_OW 25
28898: ST_TO_ADDR
// result := unit ;
28899: LD_ADDR_VAR 0 4
28903: PUSH
28904: LD_VAR 0 5
28908: ST_TO_ADDR
// end ;
28909: LD_VAR 0 4
28913: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
28914: LD_INT 0
28916: PPUSH
28917: PPUSH
// if exist_mode then
28918: LD_VAR 0 2
28922: IFFALSE 28947
// unit := CreateCharacter ( prefix & ident ) else
28924: LD_ADDR_VAR 0 5
28928: PUSH
28929: LD_VAR 0 3
28933: PUSH
28934: LD_VAR 0 1
28938: STR
28939: PPUSH
28940: CALL_OW 34
28944: ST_TO_ADDR
28945: GO 28962
// unit := NewCharacter ( ident ) ;
28947: LD_ADDR_VAR 0 5
28951: PUSH
28952: LD_VAR 0 1
28956: PPUSH
28957: CALL_OW 25
28961: ST_TO_ADDR
// result := unit ;
28962: LD_ADDR_VAR 0 4
28966: PUSH
28967: LD_VAR 0 5
28971: ST_TO_ADDR
// end ;
28972: LD_VAR 0 4
28976: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28977: LD_INT 0
28979: PPUSH
28980: PPUSH
// if not side or not nation then
28981: LD_VAR 0 1
28985: NOT
28986: IFTRUE 28995
28988: PUSH
28989: LD_VAR 0 2
28993: NOT
28994: OR
28995: IFFALSE 28999
// exit ;
28997: GO 29769
// case nation of nation_american :
28999: LD_VAR 0 2
29003: PUSH
29004: LD_INT 1
29006: DOUBLE
29007: EQUAL
29008: IFTRUE 29012
29010: GO 29226
29012: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29013: LD_ADDR_VAR 0 4
29017: PUSH
29018: LD_INT 35
29020: PUSH
29021: LD_INT 45
29023: PUSH
29024: LD_INT 46
29026: PUSH
29027: LD_INT 47
29029: PUSH
29030: LD_INT 82
29032: PUSH
29033: LD_INT 83
29035: PUSH
29036: LD_INT 84
29038: PUSH
29039: LD_INT 85
29041: PUSH
29042: LD_INT 86
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 2
29050: PUSH
29051: LD_INT 6
29053: PUSH
29054: LD_INT 15
29056: PUSH
29057: LD_INT 16
29059: PUSH
29060: LD_INT 7
29062: PUSH
29063: LD_INT 12
29065: PUSH
29066: LD_INT 13
29068: PUSH
29069: LD_INT 10
29071: PUSH
29072: LD_INT 14
29074: PUSH
29075: LD_INT 20
29077: PUSH
29078: LD_INT 21
29080: PUSH
29081: LD_INT 22
29083: PUSH
29084: LD_INT 25
29086: PUSH
29087: LD_INT 32
29089: PUSH
29090: LD_INT 27
29092: PUSH
29093: LD_INT 36
29095: PUSH
29096: LD_INT 69
29098: PUSH
29099: LD_INT 39
29101: PUSH
29102: LD_INT 34
29104: PUSH
29105: LD_INT 40
29107: PUSH
29108: LD_INT 48
29110: PUSH
29111: LD_INT 49
29113: PUSH
29114: LD_INT 50
29116: PUSH
29117: LD_INT 51
29119: PUSH
29120: LD_INT 52
29122: PUSH
29123: LD_INT 53
29125: PUSH
29126: LD_INT 54
29128: PUSH
29129: LD_INT 55
29131: PUSH
29132: LD_INT 56
29134: PUSH
29135: LD_INT 57
29137: PUSH
29138: LD_INT 58
29140: PUSH
29141: LD_INT 59
29143: PUSH
29144: LD_INT 60
29146: PUSH
29147: LD_INT 61
29149: PUSH
29150: LD_INT 62
29152: PUSH
29153: LD_INT 80
29155: PUSH
29156: LD_INT 82
29158: PUSH
29159: LD_INT 83
29161: PUSH
29162: LD_INT 84
29164: PUSH
29165: LD_INT 85
29167: PUSH
29168: LD_INT 86
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: ST_TO_ADDR
29224: GO 29691
29226: LD_INT 2
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29460
29234: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29235: LD_ADDR_VAR 0 4
29239: PUSH
29240: LD_INT 35
29242: PUSH
29243: LD_INT 45
29245: PUSH
29246: LD_INT 46
29248: PUSH
29249: LD_INT 47
29251: PUSH
29252: LD_INT 82
29254: PUSH
29255: LD_INT 83
29257: PUSH
29258: LD_INT 84
29260: PUSH
29261: LD_INT 85
29263: PUSH
29264: LD_INT 87
29266: PUSH
29267: LD_INT 70
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: LD_INT 11
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: LD_INT 4
29281: PUSH
29282: LD_INT 5
29284: PUSH
29285: LD_INT 6
29287: PUSH
29288: LD_INT 15
29290: PUSH
29291: LD_INT 18
29293: PUSH
29294: LD_INT 7
29296: PUSH
29297: LD_INT 17
29299: PUSH
29300: LD_INT 8
29302: PUSH
29303: LD_INT 20
29305: PUSH
29306: LD_INT 21
29308: PUSH
29309: LD_INT 22
29311: PUSH
29312: LD_INT 72
29314: PUSH
29315: LD_INT 26
29317: PUSH
29318: LD_INT 69
29320: PUSH
29321: LD_INT 39
29323: PUSH
29324: LD_INT 40
29326: PUSH
29327: LD_INT 41
29329: PUSH
29330: LD_INT 42
29332: PUSH
29333: LD_INT 43
29335: PUSH
29336: LD_INT 48
29338: PUSH
29339: LD_INT 49
29341: PUSH
29342: LD_INT 50
29344: PUSH
29345: LD_INT 51
29347: PUSH
29348: LD_INT 52
29350: PUSH
29351: LD_INT 53
29353: PUSH
29354: LD_INT 54
29356: PUSH
29357: LD_INT 55
29359: PUSH
29360: LD_INT 56
29362: PUSH
29363: LD_INT 60
29365: PUSH
29366: LD_INT 61
29368: PUSH
29369: LD_INT 62
29371: PUSH
29372: LD_INT 66
29374: PUSH
29375: LD_INT 67
29377: PUSH
29378: LD_INT 68
29380: PUSH
29381: LD_INT 81
29383: PUSH
29384: LD_INT 82
29386: PUSH
29387: LD_INT 83
29389: PUSH
29390: LD_INT 84
29392: PUSH
29393: LD_INT 85
29395: PUSH
29396: LD_INT 87
29398: PUSH
29399: LD_INT 88
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: ST_TO_ADDR
29458: GO 29691
29460: LD_INT 3
29462: DOUBLE
29463: EQUAL
29464: IFTRUE 29468
29466: GO 29690
29468: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29469: LD_ADDR_VAR 0 4
29473: PUSH
29474: LD_INT 46
29476: PUSH
29477: LD_INT 47
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: LD_INT 82
29488: PUSH
29489: LD_INT 83
29491: PUSH
29492: LD_INT 84
29494: PUSH
29495: LD_INT 85
29497: PUSH
29498: LD_INT 86
29500: PUSH
29501: LD_INT 11
29503: PUSH
29504: LD_INT 9
29506: PUSH
29507: LD_INT 20
29509: PUSH
29510: LD_INT 19
29512: PUSH
29513: LD_INT 21
29515: PUSH
29516: LD_INT 24
29518: PUSH
29519: LD_INT 22
29521: PUSH
29522: LD_INT 25
29524: PUSH
29525: LD_INT 28
29527: PUSH
29528: LD_INT 29
29530: PUSH
29531: LD_INT 30
29533: PUSH
29534: LD_INT 31
29536: PUSH
29537: LD_INT 37
29539: PUSH
29540: LD_INT 38
29542: PUSH
29543: LD_INT 32
29545: PUSH
29546: LD_INT 27
29548: PUSH
29549: LD_INT 33
29551: PUSH
29552: LD_INT 69
29554: PUSH
29555: LD_INT 39
29557: PUSH
29558: LD_INT 34
29560: PUSH
29561: LD_INT 40
29563: PUSH
29564: LD_INT 71
29566: PUSH
29567: LD_INT 23
29569: PUSH
29570: LD_INT 44
29572: PUSH
29573: LD_INT 48
29575: PUSH
29576: LD_INT 49
29578: PUSH
29579: LD_INT 50
29581: PUSH
29582: LD_INT 51
29584: PUSH
29585: LD_INT 52
29587: PUSH
29588: LD_INT 53
29590: PUSH
29591: LD_INT 54
29593: PUSH
29594: LD_INT 55
29596: PUSH
29597: LD_INT 56
29599: PUSH
29600: LD_INT 57
29602: PUSH
29603: LD_INT 58
29605: PUSH
29606: LD_INT 59
29608: PUSH
29609: LD_INT 63
29611: PUSH
29612: LD_INT 64
29614: PUSH
29615: LD_INT 65
29617: PUSH
29618: LD_INT 82
29620: PUSH
29621: LD_INT 83
29623: PUSH
29624: LD_INT 84
29626: PUSH
29627: LD_INT 85
29629: PUSH
29630: LD_INT 86
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
29688: GO 29691
29690: POP
// if state > - 1 and state < 3 then
29691: LD_VAR 0 3
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: GREATER
29700: IFFALSE 29712
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 3
29710: LESS
29711: AND
29712: IFFALSE 29769
// for i in result do
29714: LD_ADDR_VAR 0 5
29718: PUSH
29719: LD_VAR 0 4
29723: PUSH
29724: FOR_IN
29725: IFFALSE 29767
// if GetTech ( i , side ) <> state then
29727: LD_VAR 0 5
29731: PPUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 321
29741: PUSH
29742: LD_VAR 0 3
29746: NONEQUAL
29747: IFFALSE 29765
// result := result diff i ;
29749: LD_ADDR_VAR 0 4
29753: PUSH
29754: LD_VAR 0 4
29758: PUSH
29759: LD_VAR 0 5
29763: DIFF
29764: ST_TO_ADDR
29765: GO 29724
29767: POP
29768: POP
// end ;
29769: LD_VAR 0 4
29773: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29774: LD_INT 0
29776: PPUSH
29777: PPUSH
29778: PPUSH
// result := true ;
29779: LD_ADDR_VAR 0 3
29783: PUSH
29784: LD_INT 1
29786: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29787: LD_ADDR_VAR 0 5
29791: PUSH
29792: LD_VAR 0 2
29796: PPUSH
29797: CALL_OW 480
29801: ST_TO_ADDR
// if not tmp then
29802: LD_VAR 0 5
29806: NOT
29807: IFFALSE 29811
// exit ;
29809: GO 29860
// for i in tmp do
29811: LD_ADDR_VAR 0 4
29815: PUSH
29816: LD_VAR 0 5
29820: PUSH
29821: FOR_IN
29822: IFFALSE 29858
// if GetTech ( i , side ) <> state_researched then
29824: LD_VAR 0 4
29828: PPUSH
29829: LD_VAR 0 1
29833: PPUSH
29834: CALL_OW 321
29838: PUSH
29839: LD_INT 2
29841: NONEQUAL
29842: IFFALSE 29856
// begin result := false ;
29844: LD_ADDR_VAR 0 3
29848: PUSH
29849: LD_INT 0
29851: ST_TO_ADDR
// exit ;
29852: POP
29853: POP
29854: GO 29860
// end ;
29856: GO 29821
29858: POP
29859: POP
// end ;
29860: LD_VAR 0 3
29864: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29865: LD_INT 0
29867: PPUSH
29868: PPUSH
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
29874: PPUSH
29875: PPUSH
29876: PPUSH
29877: PPUSH
29878: PPUSH
29879: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29880: LD_VAR 0 1
29884: NOT
29885: IFTRUE 29902
29887: PUSH
29888: LD_VAR 0 1
29892: PPUSH
29893: CALL_OW 257
29897: PUSH
29898: LD_INT 9
29900: NONEQUAL
29901: OR
29902: IFFALSE 29906
// exit ;
29904: GO 30485
// side := GetSide ( unit ) ;
29906: LD_ADDR_VAR 0 9
29910: PUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: CALL_OW 255
29920: ST_TO_ADDR
// tech_space := tech_spacanom ;
29921: LD_ADDR_VAR 0 12
29925: PUSH
29926: LD_INT 29
29928: ST_TO_ADDR
// tech_time := tech_taurad ;
29929: LD_ADDR_VAR 0 13
29933: PUSH
29934: LD_INT 28
29936: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29937: LD_ADDR_VAR 0 11
29941: PUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 310
29951: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29952: LD_VAR 0 11
29956: PPUSH
29957: CALL_OW 247
29961: PUSH
29962: LD_INT 2
29964: EQUAL
29965: IFFALSE 29969
// exit ;
29967: GO 30485
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29969: LD_ADDR_VAR 0 8
29973: PUSH
29974: LD_INT 81
29976: PUSH
29977: LD_VAR 0 9
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 3
29988: PUSH
29989: LD_INT 21
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PPUSH
30007: CALL_OW 69
30011: ST_TO_ADDR
// if not tmp then
30012: LD_VAR 0 8
30016: NOT
30017: IFFALSE 30021
// exit ;
30019: GO 30485
// if in_unit then
30021: LD_VAR 0 11
30025: IFFALSE 30049
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30027: LD_ADDR_VAR 0 10
30031: PUSH
30032: LD_VAR 0 8
30036: PPUSH
30037: LD_VAR 0 11
30041: PPUSH
30042: CALL_OW 74
30046: ST_TO_ADDR
30047: GO 30069
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30049: LD_ADDR_VAR 0 10
30053: PUSH
30054: LD_VAR 0 8
30058: PPUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: CALL_OW 74
30068: ST_TO_ADDR
// if not enemy then
30069: LD_VAR 0 10
30073: NOT
30074: IFFALSE 30078
// exit ;
30076: GO 30485
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30078: LD_VAR 0 11
30082: IFFALSE 30104
30084: PUSH
30085: LD_VAR 0 11
30089: PPUSH
30090: LD_VAR 0 10
30094: PPUSH
30095: CALL_OW 296
30099: PUSH
30100: LD_INT 13
30102: GREATER
30103: AND
30104: IFTRUE 30126
30106: PUSH
30107: LD_VAR 0 1
30111: PPUSH
30112: LD_VAR 0 10
30116: PPUSH
30117: CALL_OW 296
30121: PUSH
30122: LD_INT 12
30124: GREATER
30125: OR
30126: IFFALSE 30130
// exit ;
30128: GO 30485
// missile := [ 1 ] ;
30130: LD_ADDR_VAR 0 14
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: EMPTY
30139: LIST
30140: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30141: LD_VAR 0 9
30145: PPUSH
30146: LD_VAR 0 12
30150: PPUSH
30151: CALL_OW 325
30155: IFFALSE 30184
// missile := Replace ( missile , missile + 1 , 2 ) ;
30157: LD_ADDR_VAR 0 14
30161: PUSH
30162: LD_VAR 0 14
30166: PPUSH
30167: LD_VAR 0 14
30171: PUSH
30172: LD_INT 1
30174: PLUS
30175: PPUSH
30176: LD_INT 2
30178: PPUSH
30179: CALL_OW 1
30183: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30184: LD_VAR 0 9
30188: PPUSH
30189: LD_VAR 0 13
30193: PPUSH
30194: CALL_OW 325
30198: IFFALSE 30222
30200: PUSH
30201: LD_VAR 0 10
30205: PPUSH
30206: CALL_OW 255
30210: PPUSH
30211: LD_VAR 0 13
30215: PPUSH
30216: CALL_OW 325
30220: NOT
30221: AND
30222: IFFALSE 30251
// missile := Replace ( missile , missile + 1 , 3 ) ;
30224: LD_ADDR_VAR 0 14
30228: PUSH
30229: LD_VAR 0 14
30233: PPUSH
30234: LD_VAR 0 14
30238: PUSH
30239: LD_INT 1
30241: PLUS
30242: PPUSH
30243: LD_INT 3
30245: PPUSH
30246: CALL_OW 1
30250: ST_TO_ADDR
// if missile < 2 then
30251: LD_VAR 0 14
30255: PUSH
30256: LD_INT 2
30258: LESS
30259: IFFALSE 30263
// exit ;
30261: GO 30485
// x := GetX ( enemy ) ;
30263: LD_ADDR_VAR 0 4
30267: PUSH
30268: LD_VAR 0 10
30272: PPUSH
30273: CALL_OW 250
30277: ST_TO_ADDR
// y := GetY ( enemy ) ;
30278: LD_ADDR_VAR 0 5
30282: PUSH
30283: LD_VAR 0 10
30287: PPUSH
30288: CALL_OW 251
30292: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30293: LD_ADDR_VAR 0 6
30297: PUSH
30298: LD_VAR 0 4
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PPUSH
30307: LD_INT 1
30309: PPUSH
30310: CALL_OW 12
30314: PLUS
30315: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30316: LD_ADDR_VAR 0 7
30320: PUSH
30321: LD_VAR 0 5
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PPUSH
30330: LD_INT 1
30332: PPUSH
30333: CALL_OW 12
30337: PLUS
30338: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30339: LD_VAR 0 6
30343: PPUSH
30344: LD_VAR 0 7
30348: PPUSH
30349: CALL_OW 488
30353: NOT
30354: IFFALSE 30376
// begin _x := x ;
30356: LD_ADDR_VAR 0 6
30360: PUSH
30361: LD_VAR 0 4
30365: ST_TO_ADDR
// _y := y ;
30366: LD_ADDR_VAR 0 7
30370: PUSH
30371: LD_VAR 0 5
30375: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30376: LD_ADDR_VAR 0 3
30380: PUSH
30381: LD_INT 1
30383: PPUSH
30384: LD_VAR 0 14
30388: PPUSH
30389: CALL_OW 12
30393: ST_TO_ADDR
// case i of 1 :
30394: LD_VAR 0 3
30398: PUSH
30399: LD_INT 1
30401: DOUBLE
30402: EQUAL
30403: IFTRUE 30407
30405: GO 30424
30407: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30408: LD_VAR 0 1
30412: PPUSH
30413: LD_VAR 0 10
30417: PPUSH
30418: CALL_OW 115
30422: GO 30485
30424: LD_INT 2
30426: DOUBLE
30427: EQUAL
30428: IFTRUE 30432
30430: GO 30454
30432: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30433: LD_VAR 0 1
30437: PPUSH
30438: LD_VAR 0 6
30442: PPUSH
30443: LD_VAR 0 7
30447: PPUSH
30448: CALL_OW 153
30452: GO 30485
30454: LD_INT 3
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30484
30462: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30463: LD_VAR 0 1
30467: PPUSH
30468: LD_VAR 0 6
30472: PPUSH
30473: LD_VAR 0 7
30477: PPUSH
30478: CALL_OW 154
30482: GO 30485
30484: POP
// end ;
30485: LD_VAR 0 2
30489: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30490: LD_INT 0
30492: PPUSH
30493: PPUSH
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
// if not unit or not building then
30498: LD_VAR 0 1
30502: NOT
30503: IFTRUE 30512
30505: PUSH
30506: LD_VAR 0 2
30510: NOT
30511: OR
30512: IFFALSE 30516
// exit ;
30514: GO 30674
// x := GetX ( building ) ;
30516: LD_ADDR_VAR 0 5
30520: PUSH
30521: LD_VAR 0 2
30525: PPUSH
30526: CALL_OW 250
30530: ST_TO_ADDR
// y := GetY ( building ) ;
30531: LD_ADDR_VAR 0 6
30535: PUSH
30536: LD_VAR 0 2
30540: PPUSH
30541: CALL_OW 251
30545: ST_TO_ADDR
// for i := 0 to 5 do
30546: LD_ADDR_VAR 0 4
30550: PUSH
30551: DOUBLE
30552: LD_INT 0
30554: DEC
30555: ST_TO_ADDR
30556: LD_INT 5
30558: PUSH
30559: FOR_TO
30560: IFFALSE 30672
// begin _x := ShiftX ( x , i , 3 ) ;
30562: LD_ADDR_VAR 0 7
30566: PUSH
30567: LD_VAR 0 5
30571: PPUSH
30572: LD_VAR 0 4
30576: PPUSH
30577: LD_INT 3
30579: PPUSH
30580: CALL_OW 272
30584: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30585: LD_ADDR_VAR 0 8
30589: PUSH
30590: LD_VAR 0 6
30594: PPUSH
30595: LD_VAR 0 4
30599: PPUSH
30600: LD_INT 3
30602: PPUSH
30603: CALL_OW 273
30607: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30608: LD_VAR 0 7
30612: PPUSH
30613: LD_VAR 0 8
30617: PPUSH
30618: CALL_OW 488
30622: NOT
30623: IFFALSE 30627
// continue ;
30625: GO 30559
// if HexInfo ( _x , _y ) = 0 then
30627: LD_VAR 0 7
30631: PPUSH
30632: LD_VAR 0 8
30636: PPUSH
30637: CALL_OW 428
30641: PUSH
30642: LD_INT 0
30644: EQUAL
30645: IFFALSE 30670
// begin ComMoveXY ( unit , _x , _y ) ;
30647: LD_VAR 0 1
30651: PPUSH
30652: LD_VAR 0 7
30656: PPUSH
30657: LD_VAR 0 8
30661: PPUSH
30662: CALL_OW 111
// exit ;
30666: POP
30667: POP
30668: GO 30674
// end ; end ;
30670: GO 30559
30672: POP
30673: POP
// end ;
30674: LD_VAR 0 3
30678: RET
// export function ScanBase ( side , base_area ) ; begin
30679: LD_INT 0
30681: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30682: LD_ADDR_VAR 0 3
30686: PUSH
30687: LD_VAR 0 2
30691: PPUSH
30692: LD_INT 81
30694: PUSH
30695: LD_VAR 0 1
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PPUSH
30704: CALL_OW 70
30708: ST_TO_ADDR
// end ;
30709: LD_VAR 0 3
30713: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30714: LD_INT 0
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
// result := false ;
30720: LD_ADDR_VAR 0 2
30724: PUSH
30725: LD_INT 0
30727: ST_TO_ADDR
// side := GetSide ( unit ) ;
30728: LD_ADDR_VAR 0 3
30732: PUSH
30733: LD_VAR 0 1
30737: PPUSH
30738: CALL_OW 255
30742: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30743: LD_ADDR_VAR 0 4
30747: PUSH
30748: LD_VAR 0 1
30752: PPUSH
30753: CALL_OW 248
30757: ST_TO_ADDR
// case nat of 1 :
30758: LD_VAR 0 4
30762: PUSH
30763: LD_INT 1
30765: DOUBLE
30766: EQUAL
30767: IFTRUE 30771
30769: GO 30782
30771: POP
// tech := tech_lassight ; 2 :
30772: LD_ADDR_VAR 0 5
30776: PUSH
30777: LD_INT 12
30779: ST_TO_ADDR
30780: GO 30821
30782: LD_INT 2
30784: DOUBLE
30785: EQUAL
30786: IFTRUE 30790
30788: GO 30801
30790: POP
// tech := tech_mortar ; 3 :
30791: LD_ADDR_VAR 0 5
30795: PUSH
30796: LD_INT 41
30798: ST_TO_ADDR
30799: GO 30821
30801: LD_INT 3
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30820
30809: POP
// tech := tech_bazooka ; end ;
30810: LD_ADDR_VAR 0 5
30814: PUSH
30815: LD_INT 44
30817: ST_TO_ADDR
30818: GO 30821
30820: POP
// if Researched ( side , tech ) then
30821: LD_VAR 0 3
30825: PPUSH
30826: LD_VAR 0 5
30830: PPUSH
30831: CALL_OW 325
30835: IFFALSE 30862
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30837: LD_ADDR_VAR 0 2
30841: PUSH
30842: LD_INT 5
30844: PUSH
30845: LD_INT 8
30847: PUSH
30848: LD_INT 9
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: LIST
30855: PUSH
30856: LD_VAR 0 4
30860: ARRAY
30861: ST_TO_ADDR
// end ;
30862: LD_VAR 0 2
30866: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30867: LD_INT 0
30869: PPUSH
30870: PPUSH
30871: PPUSH
// if not mines then
30872: LD_VAR 0 2
30876: NOT
30877: IFFALSE 30881
// exit ;
30879: GO 31025
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30881: LD_ADDR_VAR 0 5
30885: PUSH
30886: LD_INT 81
30888: PUSH
30889: LD_VAR 0 1
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 3
30900: PUSH
30901: LD_INT 21
30903: PUSH
30904: LD_INT 3
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PPUSH
30919: CALL_OW 69
30923: ST_TO_ADDR
// for i in mines do
30924: LD_ADDR_VAR 0 4
30928: PUSH
30929: LD_VAR 0 2
30933: PUSH
30934: FOR_IN
30935: IFFALSE 31023
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30937: LD_VAR 0 4
30941: PUSH
30942: LD_INT 1
30944: ARRAY
30945: PPUSH
30946: LD_VAR 0 4
30950: PUSH
30951: LD_INT 2
30953: ARRAY
30954: PPUSH
30955: CALL_OW 458
30959: NOT
30960: IFFALSE 30964
// continue ;
30962: GO 30934
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30964: LD_VAR 0 4
30968: PUSH
30969: LD_INT 1
30971: ARRAY
30972: PPUSH
30973: LD_VAR 0 4
30977: PUSH
30978: LD_INT 2
30980: ARRAY
30981: PPUSH
30982: CALL_OW 428
30986: PUSH
30987: LD_VAR 0 5
30991: IN
30992: IFFALSE 31021
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30994: LD_VAR 0 4
30998: PUSH
30999: LD_INT 1
31001: ARRAY
31002: PPUSH
31003: LD_VAR 0 4
31007: PUSH
31008: LD_INT 2
31010: ARRAY
31011: PPUSH
31012: LD_VAR 0 1
31016: PPUSH
31017: CALL_OW 456
// end ;
31021: GO 30934
31023: POP
31024: POP
// end ;
31025: LD_VAR 0 3
31029: RET
// export function Count ( array ) ; begin
31030: LD_INT 0
31032: PPUSH
// result := array + 0 ;
31033: LD_ADDR_VAR 0 2
31037: PUSH
31038: LD_VAR 0 1
31042: PUSH
31043: LD_INT 0
31045: PLUS
31046: ST_TO_ADDR
// end ;
31047: LD_VAR 0 2
31051: RET
// export function IsEmpty ( building ) ; begin
31052: LD_INT 0
31054: PPUSH
// if not building then
31055: LD_VAR 0 1
31059: NOT
31060: IFFALSE 31064
// exit ;
31062: GO 31107
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31064: LD_ADDR_VAR 0 2
31068: PUSH
31069: LD_VAR 0 1
31073: PUSH
31074: LD_INT 22
31076: PUSH
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL_OW 255
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 58
31093: PUSH
31094: EMPTY
31095: LIST
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PPUSH
31101: CALL_OW 69
31105: IN
31106: ST_TO_ADDR
// end ;
31107: LD_VAR 0 2
31111: RET
// export function IsNotFull ( building ) ; var places ; begin
31112: LD_INT 0
31114: PPUSH
31115: PPUSH
// if not building then
31116: LD_VAR 0 1
31120: NOT
31121: IFFALSE 31125
// exit ;
31123: GO 31153
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31125: LD_ADDR_VAR 0 2
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: LD_INT 3
31137: PUSH
31138: LD_INT 62
31140: PUSH
31141: EMPTY
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PPUSH
31148: CALL_OW 72
31152: ST_TO_ADDR
// end ;
31153: LD_VAR 0 2
31157: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31158: LD_INT 0
31160: PPUSH
31161: PPUSH
31162: PPUSH
31163: PPUSH
// tmp := [ ] ;
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: EMPTY
31170: ST_TO_ADDR
// list := [ ] ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: EMPTY
31177: ST_TO_ADDR
// for i = 16 to 25 do
31178: LD_ADDR_VAR 0 4
31182: PUSH
31183: DOUBLE
31184: LD_INT 16
31186: DEC
31187: ST_TO_ADDR
31188: LD_INT 25
31190: PUSH
31191: FOR_TO
31192: IFFALSE 31265
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31194: LD_ADDR_VAR 0 3
31198: PUSH
31199: LD_VAR 0 3
31203: PUSH
31204: LD_INT 22
31206: PUSH
31207: LD_VAR 0 1
31211: PPUSH
31212: CALL_OW 255
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 91
31223: PUSH
31224: LD_VAR 0 1
31228: PUSH
31229: LD_INT 6
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 30
31239: PUSH
31240: LD_VAR 0 4
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: PPUSH
31257: CALL_OW 69
31261: ADD
31262: ST_TO_ADDR
31263: GO 31191
31265: POP
31266: POP
// for i = 1 to tmp do
31267: LD_ADDR_VAR 0 4
31271: PUSH
31272: DOUBLE
31273: LD_INT 1
31275: DEC
31276: ST_TO_ADDR
31277: LD_VAR 0 3
31281: PUSH
31282: FOR_TO
31283: IFFALSE 31371
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31285: LD_ADDR_VAR 0 5
31289: PUSH
31290: LD_VAR 0 5
31294: PUSH
31295: LD_VAR 0 3
31299: PUSH
31300: LD_VAR 0 4
31304: ARRAY
31305: PPUSH
31306: CALL_OW 266
31310: PUSH
31311: LD_VAR 0 3
31315: PUSH
31316: LD_VAR 0 4
31320: ARRAY
31321: PPUSH
31322: CALL_OW 250
31326: PUSH
31327: LD_VAR 0 3
31331: PUSH
31332: LD_VAR 0 4
31336: ARRAY
31337: PPUSH
31338: CALL_OW 251
31342: PUSH
31343: LD_VAR 0 3
31347: PUSH
31348: LD_VAR 0 4
31352: ARRAY
31353: PPUSH
31354: CALL_OW 254
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: ADD
31368: ST_TO_ADDR
31369: GO 31282
31371: POP
31372: POP
// result := list ;
31373: LD_ADDR_VAR 0 2
31377: PUSH
31378: LD_VAR 0 5
31382: ST_TO_ADDR
// end ;
31383: LD_VAR 0 2
31387: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31388: LD_INT 0
31390: PPUSH
31391: PPUSH
31392: PPUSH
31393: PPUSH
31394: PPUSH
31395: PPUSH
31396: PPUSH
// if not factory then
31397: LD_VAR 0 1
31401: NOT
31402: IFFALSE 31406
// exit ;
31404: GO 32009
// if control = control_apeman then
31406: LD_VAR 0 4
31410: PUSH
31411: LD_INT 5
31413: EQUAL
31414: IFFALSE 31523
// begin tmp := UnitsInside ( factory ) ;
31416: LD_ADDR_VAR 0 8
31420: PUSH
31421: LD_VAR 0 1
31425: PPUSH
31426: CALL_OW 313
31430: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31431: LD_VAR 0 8
31435: PPUSH
31436: LD_INT 25
31438: PUSH
31439: LD_INT 12
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PPUSH
31446: CALL_OW 72
31450: NOT
31451: IFFALSE 31461
// control := control_manual ;
31453: LD_ADDR_VAR 0 4
31457: PUSH
31458: LD_INT 1
31460: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31461: LD_ADDR_VAR 0 8
31465: PUSH
31466: LD_VAR 0 1
31470: PPUSH
31471: CALL 31158 0 1
31475: ST_TO_ADDR
// if tmp then
31476: LD_VAR 0 8
31480: IFFALSE 31523
// begin for i in tmp do
31482: LD_ADDR_VAR 0 7
31486: PUSH
31487: LD_VAR 0 8
31491: PUSH
31492: FOR_IN
31493: IFFALSE 31521
// if i [ 1 ] = b_ext_radio then
31495: LD_VAR 0 7
31499: PUSH
31500: LD_INT 1
31502: ARRAY
31503: PUSH
31504: LD_INT 22
31506: EQUAL
31507: IFFALSE 31519
// begin control := control_remote ;
31509: LD_ADDR_VAR 0 4
31513: PUSH
31514: LD_INT 2
31516: ST_TO_ADDR
// break ;
31517: GO 31521
// end ;
31519: GO 31492
31521: POP
31522: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31523: LD_VAR 0 1
31527: PPUSH
31528: LD_VAR 0 2
31532: PPUSH
31533: LD_VAR 0 3
31537: PPUSH
31538: LD_VAR 0 4
31542: PPUSH
31543: LD_VAR 0 5
31547: PPUSH
31548: CALL_OW 448
31552: IFFALSE 31587
// begin result := [ chassis , engine , control , weapon ] ;
31554: LD_ADDR_VAR 0 6
31558: PUSH
31559: LD_VAR 0 2
31563: PUSH
31564: LD_VAR 0 3
31568: PUSH
31569: LD_VAR 0 4
31573: PUSH
31574: LD_VAR 0 5
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: ST_TO_ADDR
// exit ;
31585: GO 32009
// end ; _chassis := AvailableChassisList ( factory ) ;
31587: LD_ADDR_VAR 0 9
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 475
31601: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31602: LD_ADDR_VAR 0 11
31606: PUSH
31607: LD_VAR 0 1
31611: PPUSH
31612: CALL_OW 476
31616: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31617: LD_ADDR_VAR 0 12
31621: PUSH
31622: LD_VAR 0 1
31626: PPUSH
31627: CALL_OW 477
31631: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31632: LD_ADDR_VAR 0 10
31636: PUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL_OW 478
31646: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31647: LD_VAR 0 9
31651: NOT
31652: IFTRUE 31661
31654: PUSH
31655: LD_VAR 0 11
31659: NOT
31660: OR
31661: IFTRUE 31670
31663: PUSH
31664: LD_VAR 0 12
31668: NOT
31669: OR
31670: IFTRUE 31679
31672: PUSH
31673: LD_VAR 0 10
31677: NOT
31678: OR
31679: IFFALSE 31714
// begin result := [ chassis , engine , control , weapon ] ;
31681: LD_ADDR_VAR 0 6
31685: PUSH
31686: LD_VAR 0 2
31690: PUSH
31691: LD_VAR 0 3
31695: PUSH
31696: LD_VAR 0 4
31700: PUSH
31701: LD_VAR 0 5
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// exit ;
31712: GO 32009
// end ; if not chassis in _chassis then
31714: LD_VAR 0 2
31718: PUSH
31719: LD_VAR 0 9
31723: IN
31724: NOT
31725: IFFALSE 31751
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31727: LD_ADDR_VAR 0 2
31731: PUSH
31732: LD_VAR 0 9
31736: PUSH
31737: LD_INT 1
31739: PPUSH
31740: LD_VAR 0 9
31744: PPUSH
31745: CALL_OW 12
31749: ARRAY
31750: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31751: LD_VAR 0 2
31755: PPUSH
31756: LD_VAR 0 3
31760: PPUSH
31761: CALL 32014 0 2
31765: NOT
31766: IFFALSE 31827
// repeat engine := _engine [ 1 ] ;
31768: LD_ADDR_VAR 0 3
31772: PUSH
31773: LD_VAR 0 11
31777: PUSH
31778: LD_INT 1
31780: ARRAY
31781: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31782: LD_ADDR_VAR 0 11
31786: PUSH
31787: LD_VAR 0 11
31791: PPUSH
31792: LD_INT 1
31794: PPUSH
31795: CALL_OW 3
31799: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31800: LD_VAR 0 2
31804: PPUSH
31805: LD_VAR 0 3
31809: PPUSH
31810: CALL 32014 0 2
31814: IFTRUE 31825
31816: PUSH
31817: LD_VAR 0 11
31821: PUSH
31822: EMPTY
31823: EQUAL
31824: OR
31825: IFFALSE 31768
// if not control in _control then
31827: LD_VAR 0 4
31831: PUSH
31832: LD_VAR 0 12
31836: IN
31837: NOT
31838: IFFALSE 31864
// control := _control [ rand ( 1 , _control ) ] ;
31840: LD_ADDR_VAR 0 4
31844: PUSH
31845: LD_VAR 0 12
31849: PUSH
31850: LD_INT 1
31852: PPUSH
31853: LD_VAR 0 12
31857: PPUSH
31858: CALL_OW 12
31862: ARRAY
31863: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31864: LD_VAR 0 2
31868: PPUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: CALL 32236 0 2
31878: NOT
31879: IFFALSE 31940
// repeat weapon := _weapon [ 1 ] ;
31881: LD_ADDR_VAR 0 5
31885: PUSH
31886: LD_VAR 0 10
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31895: LD_ADDR_VAR 0 10
31899: PUSH
31900: LD_VAR 0 10
31904: PPUSH
31905: LD_INT 1
31907: PPUSH
31908: CALL_OW 3
31912: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31913: LD_VAR 0 2
31917: PPUSH
31918: LD_VAR 0 5
31922: PPUSH
31923: CALL 32236 0 2
31927: IFTRUE 31938
31929: PUSH
31930: LD_VAR 0 10
31934: PUSH
31935: EMPTY
31936: EQUAL
31937: OR
31938: IFFALSE 31881
// result := [ ] ;
31940: LD_ADDR_VAR 0 6
31944: PUSH
31945: EMPTY
31946: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31947: LD_VAR 0 1
31951: PPUSH
31952: LD_VAR 0 2
31956: PPUSH
31957: LD_VAR 0 3
31961: PPUSH
31962: LD_VAR 0 4
31966: PPUSH
31967: LD_VAR 0 5
31971: PPUSH
31972: CALL_OW 448
31976: IFFALSE 32009
// result := [ chassis , engine , control , weapon ] ;
31978: LD_ADDR_VAR 0 6
31982: PUSH
31983: LD_VAR 0 2
31987: PUSH
31988: LD_VAR 0 3
31992: PUSH
31993: LD_VAR 0 4
31997: PUSH
31998: LD_VAR 0 5
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: ST_TO_ADDR
// end ;
32009: LD_VAR 0 6
32013: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32014: LD_INT 0
32016: PPUSH
// if not chassis or not engine then
32017: LD_VAR 0 1
32021: NOT
32022: IFTRUE 32031
32024: PUSH
32025: LD_VAR 0 2
32029: NOT
32030: OR
32031: IFFALSE 32035
// exit ;
32033: GO 32231
// case engine of engine_solar :
32035: LD_VAR 0 2
32039: PUSH
32040: LD_INT 2
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32086
32048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32049: LD_ADDR_VAR 0 3
32053: PUSH
32054: LD_INT 11
32056: PUSH
32057: LD_INT 12
32059: PUSH
32060: LD_INT 13
32062: PUSH
32063: LD_INT 14
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: LD_INT 3
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
32084: GO 32215
32086: LD_INT 1
32088: DOUBLE
32089: EQUAL
32090: IFTRUE 32094
32092: GO 32156
32094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32095: LD_ADDR_VAR 0 3
32099: PUSH
32100: LD_INT 11
32102: PUSH
32103: LD_INT 12
32105: PUSH
32106: LD_INT 13
32108: PUSH
32109: LD_INT 14
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: LD_INT 21
32129: PUSH
32130: LD_INT 23
32132: PUSH
32133: LD_INT 22
32135: PUSH
32136: LD_INT 24
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: ST_TO_ADDR
32154: GO 32215
32156: LD_INT 3
32158: DOUBLE
32159: EQUAL
32160: IFTRUE 32164
32162: GO 32214
32164: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32165: LD_ADDR_VAR 0 3
32169: PUSH
32170: LD_INT 13
32172: PUSH
32173: LD_INT 14
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: LD_INT 4
32184: PUSH
32185: LD_INT 5
32187: PUSH
32188: LD_INT 21
32190: PUSH
32191: LD_INT 22
32193: PUSH
32194: LD_INT 23
32196: PUSH
32197: LD_INT 24
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: ST_TO_ADDR
32212: GO 32215
32214: POP
// result := ( chassis in result ) ;
32215: LD_ADDR_VAR 0 3
32219: PUSH
32220: LD_VAR 0 1
32224: PUSH
32225: LD_VAR 0 3
32229: IN
32230: ST_TO_ADDR
// end ;
32231: LD_VAR 0 3
32235: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32236: LD_INT 0
32238: PPUSH
// if not chassis or not weapon then
32239: LD_VAR 0 1
32243: NOT
32244: IFTRUE 32253
32246: PUSH
32247: LD_VAR 0 2
32251: NOT
32252: OR
32253: IFFALSE 32257
// exit ;
32255: GO 33317
// case weapon of us_machine_gun :
32257: LD_VAR 0 2
32261: PUSH
32262: LD_INT 2
32264: DOUBLE
32265: EQUAL
32266: IFTRUE 32270
32268: GO 32300
32270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32271: LD_ADDR_VAR 0 3
32275: PUSH
32276: LD_INT 1
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 3
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: ST_TO_ADDR
32298: GO 33301
32300: LD_INT 3
32302: DOUBLE
32303: EQUAL
32304: IFTRUE 32308
32306: GO 32338
32308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32309: LD_ADDR_VAR 0 3
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: LD_INT 4
32325: PUSH
32326: LD_INT 5
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: ST_TO_ADDR
32336: GO 33301
32338: LD_INT 11
32340: DOUBLE
32341: EQUAL
32342: IFTRUE 32346
32344: GO 32376
32346: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32347: LD_ADDR_VAR 0 3
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: LD_INT 4
32363: PUSH
32364: LD_INT 5
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
32374: GO 33301
32376: LD_INT 4
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32410
32384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: LD_INT 4
32398: PUSH
32399: LD_INT 5
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
32408: GO 33301
32410: LD_INT 5
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32444
32418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32419: LD_ADDR_VAR 0 3
32423: PUSH
32424: LD_INT 2
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: LD_INT 5
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: ST_TO_ADDR
32442: GO 33301
32444: LD_INT 9
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32478
32452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32453: LD_ADDR_VAR 0 3
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 3
32463: PUSH
32464: LD_INT 4
32466: PUSH
32467: LD_INT 5
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
32476: GO 33301
32478: LD_INT 7
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32512
32486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32487: LD_ADDR_VAR 0 3
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
32510: GO 33301
32512: LD_INT 12
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32546
32520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 3
32531: PUSH
32532: LD_INT 4
32534: PUSH
32535: LD_INT 5
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
32544: GO 33301
32546: LD_INT 13
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32580
32554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: LD_INT 4
32568: PUSH
32569: LD_INT 5
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
32578: GO 33301
32580: LD_INT 14
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32606
32588: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_INT 4
32596: PUSH
32597: LD_INT 5
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: ST_TO_ADDR
32604: GO 33301
32606: LD_INT 6
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32632
32614: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32615: LD_ADDR_VAR 0 3
32619: PUSH
32620: LD_INT 4
32622: PUSH
32623: LD_INT 5
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: ST_TO_ADDR
32630: GO 33301
32632: LD_INT 10
32634: DOUBLE
32635: EQUAL
32636: IFTRUE 32640
32638: GO 32658
32640: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32641: LD_ADDR_VAR 0 3
32645: PUSH
32646: LD_INT 4
32648: PUSH
32649: LD_INT 5
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: ST_TO_ADDR
32656: GO 33301
32658: LD_INT 22
32660: DOUBLE
32661: EQUAL
32662: IFTRUE 32666
32664: GO 32692
32666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32667: LD_ADDR_VAR 0 3
32671: PUSH
32672: LD_INT 11
32674: PUSH
32675: LD_INT 12
32677: PUSH
32678: LD_INT 13
32680: PUSH
32681: LD_INT 14
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: ST_TO_ADDR
32690: GO 33301
32692: LD_INT 23
32694: DOUBLE
32695: EQUAL
32696: IFTRUE 32700
32698: GO 32726
32700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32701: LD_ADDR_VAR 0 3
32705: PUSH
32706: LD_INT 11
32708: PUSH
32709: LD_INT 12
32711: PUSH
32712: LD_INT 13
32714: PUSH
32715: LD_INT 14
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: ST_TO_ADDR
32724: GO 33301
32726: LD_INT 24
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32760
32734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32735: LD_ADDR_VAR 0 3
32739: PUSH
32740: LD_INT 11
32742: PUSH
32743: LD_INT 12
32745: PUSH
32746: LD_INT 13
32748: PUSH
32749: LD_INT 14
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
32758: GO 33301
32760: LD_INT 30
32762: DOUBLE
32763: EQUAL
32764: IFTRUE 32768
32766: GO 32794
32768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32769: LD_ADDR_VAR 0 3
32773: PUSH
32774: LD_INT 11
32776: PUSH
32777: LD_INT 12
32779: PUSH
32780: LD_INT 13
32782: PUSH
32783: LD_INT 14
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
32792: GO 33301
32794: LD_INT 25
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32820
32802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32803: LD_ADDR_VAR 0 3
32807: PUSH
32808: LD_INT 13
32810: PUSH
32811: LD_INT 14
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: ST_TO_ADDR
32818: GO 33301
32820: LD_INT 27
32822: DOUBLE
32823: EQUAL
32824: IFTRUE 32828
32826: GO 32846
32828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32829: LD_ADDR_VAR 0 3
32833: PUSH
32834: LD_INT 13
32836: PUSH
32837: LD_INT 14
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: ST_TO_ADDR
32844: GO 33301
32846: LD_INT 92
32848: DOUBLE
32849: EQUAL
32850: IFTRUE 32854
32852: GO 32880
32854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32855: LD_ADDR_VAR 0 3
32859: PUSH
32860: LD_INT 11
32862: PUSH
32863: LD_INT 12
32865: PUSH
32866: LD_INT 13
32868: PUSH
32869: LD_INT 14
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: ST_TO_ADDR
32878: GO 33301
32880: LD_INT 28
32882: DOUBLE
32883: EQUAL
32884: IFTRUE 32888
32886: GO 32906
32888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32889: LD_ADDR_VAR 0 3
32893: PUSH
32894: LD_INT 13
32896: PUSH
32897: LD_INT 14
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: ST_TO_ADDR
32904: GO 33301
32906: LD_INT 29
32908: DOUBLE
32909: EQUAL
32910: IFTRUE 32914
32912: GO 32932
32914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32915: LD_ADDR_VAR 0 3
32919: PUSH
32920: LD_INT 13
32922: PUSH
32923: LD_INT 14
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: ST_TO_ADDR
32930: GO 33301
32932: LD_INT 31
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32958
32940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32941: LD_ADDR_VAR 0 3
32945: PUSH
32946: LD_INT 13
32948: PUSH
32949: LD_INT 14
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: ST_TO_ADDR
32956: GO 33301
32958: LD_INT 26
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 32984
32966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32967: LD_ADDR_VAR 0 3
32971: PUSH
32972: LD_INT 13
32974: PUSH
32975: LD_INT 14
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: ST_TO_ADDR
32982: GO 33301
32984: LD_INT 42
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33018
32992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 21
33000: PUSH
33001: LD_INT 22
33003: PUSH
33004: LD_INT 23
33006: PUSH
33007: LD_INT 24
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
33016: GO 33301
33018: LD_INT 43
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33052
33026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33027: LD_ADDR_VAR 0 3
33031: PUSH
33032: LD_INT 21
33034: PUSH
33035: LD_INT 22
33037: PUSH
33038: LD_INT 23
33040: PUSH
33041: LD_INT 24
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
33050: GO 33301
33052: LD_INT 44
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33086
33060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 22
33071: PUSH
33072: LD_INT 23
33074: PUSH
33075: LD_INT 24
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
33084: GO 33301
33086: LD_INT 45
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33120
33094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_INT 21
33102: PUSH
33103: LD_INT 22
33105: PUSH
33106: LD_INT 23
33108: PUSH
33109: LD_INT 24
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
33118: GO 33301
33120: LD_INT 49
33122: DOUBLE
33123: EQUAL
33124: IFTRUE 33128
33126: GO 33154
33128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_INT 21
33136: PUSH
33137: LD_INT 22
33139: PUSH
33140: LD_INT 23
33142: PUSH
33143: LD_INT 24
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: ST_TO_ADDR
33152: GO 33301
33154: LD_INT 51
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33188
33162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33163: LD_ADDR_VAR 0 3
33167: PUSH
33168: LD_INT 21
33170: PUSH
33171: LD_INT 22
33173: PUSH
33174: LD_INT 23
33176: PUSH
33177: LD_INT 24
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: ST_TO_ADDR
33186: GO 33301
33188: LD_INT 52
33190: DOUBLE
33191: EQUAL
33192: IFTRUE 33196
33194: GO 33222
33196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33197: LD_ADDR_VAR 0 3
33201: PUSH
33202: LD_INT 21
33204: PUSH
33205: LD_INT 22
33207: PUSH
33208: LD_INT 23
33210: PUSH
33211: LD_INT 24
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: ST_TO_ADDR
33220: GO 33301
33222: LD_INT 53
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33248
33230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33231: LD_ADDR_VAR 0 3
33235: PUSH
33236: LD_INT 23
33238: PUSH
33239: LD_INT 24
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: ST_TO_ADDR
33246: GO 33301
33248: LD_INT 46
33250: DOUBLE
33251: EQUAL
33252: IFTRUE 33256
33254: GO 33274
33256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33257: LD_ADDR_VAR 0 3
33261: PUSH
33262: LD_INT 23
33264: PUSH
33265: LD_INT 24
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: ST_TO_ADDR
33272: GO 33301
33274: LD_INT 47
33276: DOUBLE
33277: EQUAL
33278: IFTRUE 33282
33280: GO 33300
33282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33283: LD_ADDR_VAR 0 3
33287: PUSH
33288: LD_INT 23
33290: PUSH
33291: LD_INT 24
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: ST_TO_ADDR
33298: GO 33301
33300: POP
// result := ( chassis in result ) ;
33301: LD_ADDR_VAR 0 3
33305: PUSH
33306: LD_VAR 0 1
33310: PUSH
33311: LD_VAR 0 3
33315: IN
33316: ST_TO_ADDR
// end ;
33317: LD_VAR 0 3
33321: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33322: LD_INT 0
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
// result := array ;
33331: LD_ADDR_VAR 0 5
33335: PUSH
33336: LD_VAR 0 1
33340: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33341: LD_VAR 0 1
33345: NOT
33346: IFTRUE 33355
33348: PUSH
33349: LD_VAR 0 2
33353: NOT
33354: OR
33355: IFTRUE 33364
33357: PUSH
33358: LD_VAR 0 3
33362: NOT
33363: OR
33364: IFTRUE 33378
33366: PUSH
33367: LD_VAR 0 2
33371: PUSH
33372: LD_VAR 0 1
33376: GREATER
33377: OR
33378: IFTRUE 33392
33380: PUSH
33381: LD_VAR 0 3
33385: PUSH
33386: LD_VAR 0 1
33390: GREATER
33391: OR
33392: IFFALSE 33396
// exit ;
33394: GO 33692
// if direction then
33396: LD_VAR 0 4
33400: IFFALSE 33464
// begin d := 1 ;
33402: LD_ADDR_VAR 0 9
33406: PUSH
33407: LD_INT 1
33409: ST_TO_ADDR
// if i_from > i_to then
33410: LD_VAR 0 2
33414: PUSH
33415: LD_VAR 0 3
33419: GREATER
33420: IFFALSE 33446
// length := ( array - i_from ) + i_to else
33422: LD_ADDR_VAR 0 11
33426: PUSH
33427: LD_VAR 0 1
33431: PUSH
33432: LD_VAR 0 2
33436: MINUS
33437: PUSH
33438: LD_VAR 0 3
33442: PLUS
33443: ST_TO_ADDR
33444: GO 33462
// length := i_to - i_from ;
33446: LD_ADDR_VAR 0 11
33450: PUSH
33451: LD_VAR 0 3
33455: PUSH
33456: LD_VAR 0 2
33460: MINUS
33461: ST_TO_ADDR
// end else
33462: GO 33525
// begin d := - 1 ;
33464: LD_ADDR_VAR 0 9
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: ST_TO_ADDR
// if i_from > i_to then
33473: LD_VAR 0 2
33477: PUSH
33478: LD_VAR 0 3
33482: GREATER
33483: IFFALSE 33503
// length := i_from - i_to else
33485: LD_ADDR_VAR 0 11
33489: PUSH
33490: LD_VAR 0 2
33494: PUSH
33495: LD_VAR 0 3
33499: MINUS
33500: ST_TO_ADDR
33501: GO 33525
// length := ( array - i_to ) + i_from ;
33503: LD_ADDR_VAR 0 11
33507: PUSH
33508: LD_VAR 0 1
33512: PUSH
33513: LD_VAR 0 3
33517: MINUS
33518: PUSH
33519: LD_VAR 0 2
33523: PLUS
33524: ST_TO_ADDR
// end ; if not length then
33525: LD_VAR 0 11
33529: NOT
33530: IFFALSE 33534
// exit ;
33532: GO 33692
// tmp := array ;
33534: LD_ADDR_VAR 0 10
33538: PUSH
33539: LD_VAR 0 1
33543: ST_TO_ADDR
// for i = 1 to length do
33544: LD_ADDR_VAR 0 6
33548: PUSH
33549: DOUBLE
33550: LD_INT 1
33552: DEC
33553: ST_TO_ADDR
33554: LD_VAR 0 11
33558: PUSH
33559: FOR_TO
33560: IFFALSE 33680
// begin for j = 1 to array do
33562: LD_ADDR_VAR 0 7
33566: PUSH
33567: DOUBLE
33568: LD_INT 1
33570: DEC
33571: ST_TO_ADDR
33572: LD_VAR 0 1
33576: PUSH
33577: FOR_TO
33578: IFFALSE 33666
// begin k := j + d ;
33580: LD_ADDR_VAR 0 8
33584: PUSH
33585: LD_VAR 0 7
33589: PUSH
33590: LD_VAR 0 9
33594: PLUS
33595: ST_TO_ADDR
// if k > array then
33596: LD_VAR 0 8
33600: PUSH
33601: LD_VAR 0 1
33605: GREATER
33606: IFFALSE 33616
// k := 1 ;
33608: LD_ADDR_VAR 0 8
33612: PUSH
33613: LD_INT 1
33615: ST_TO_ADDR
// if not k then
33616: LD_VAR 0 8
33620: NOT
33621: IFFALSE 33633
// k := array ;
33623: LD_ADDR_VAR 0 8
33627: PUSH
33628: LD_VAR 0 1
33632: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33633: LD_ADDR_VAR 0 10
33637: PUSH
33638: LD_VAR 0 10
33642: PPUSH
33643: LD_VAR 0 8
33647: PPUSH
33648: LD_VAR 0 1
33652: PUSH
33653: LD_VAR 0 7
33657: ARRAY
33658: PPUSH
33659: CALL_OW 1
33663: ST_TO_ADDR
// end ;
33664: GO 33577
33666: POP
33667: POP
// array := tmp ;
33668: LD_ADDR_VAR 0 1
33672: PUSH
33673: LD_VAR 0 10
33677: ST_TO_ADDR
// end ;
33678: GO 33559
33680: POP
33681: POP
// result := array ;
33682: LD_ADDR_VAR 0 5
33686: PUSH
33687: LD_VAR 0 1
33691: ST_TO_ADDR
// end ;
33692: LD_VAR 0 5
33696: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33697: LD_INT 0
33699: PPUSH
33700: PPUSH
// result := 0 ;
33701: LD_ADDR_VAR 0 3
33705: PUSH
33706: LD_INT 0
33708: ST_TO_ADDR
// if not array or not value in array then
33709: LD_VAR 0 1
33713: NOT
33714: IFTRUE 33729
33716: PUSH
33717: LD_VAR 0 2
33721: PUSH
33722: LD_VAR 0 1
33726: IN
33727: NOT
33728: OR
33729: IFFALSE 33733
// exit ;
33731: GO 33787
// for i = 1 to array do
33733: LD_ADDR_VAR 0 4
33737: PUSH
33738: DOUBLE
33739: LD_INT 1
33741: DEC
33742: ST_TO_ADDR
33743: LD_VAR 0 1
33747: PUSH
33748: FOR_TO
33749: IFFALSE 33785
// if value = array [ i ] then
33751: LD_VAR 0 2
33755: PUSH
33756: LD_VAR 0 1
33760: PUSH
33761: LD_VAR 0 4
33765: ARRAY
33766: EQUAL
33767: IFFALSE 33783
// begin result := i ;
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: LD_VAR 0 4
33778: ST_TO_ADDR
// exit ;
33779: POP
33780: POP
33781: GO 33787
// end ;
33783: GO 33748
33785: POP
33786: POP
// end ;
33787: LD_VAR 0 3
33791: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33792: LD_INT 0
33794: PPUSH
// vc_chassis := chassis ;
33795: LD_ADDR_OWVAR 37
33799: PUSH
33800: LD_VAR 0 1
33804: ST_TO_ADDR
// vc_engine := engine ;
33805: LD_ADDR_OWVAR 39
33809: PUSH
33810: LD_VAR 0 2
33814: ST_TO_ADDR
// vc_control := control ;
33815: LD_ADDR_OWVAR 38
33819: PUSH
33820: LD_VAR 0 3
33824: ST_TO_ADDR
// vc_weapon := weapon ;
33825: LD_ADDR_OWVAR 40
33829: PUSH
33830: LD_VAR 0 4
33834: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33835: LD_ADDR_OWVAR 41
33839: PUSH
33840: LD_VAR 0 5
33844: ST_TO_ADDR
// end ;
33845: LD_VAR 0 6
33849: RET
// export function WantPlant ( unit ) ; var task ; begin
33850: LD_INT 0
33852: PPUSH
33853: PPUSH
// result := false ;
33854: LD_ADDR_VAR 0 2
33858: PUSH
33859: LD_INT 0
33861: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33862: LD_ADDR_VAR 0 3
33866: PUSH
33867: LD_VAR 0 1
33871: PPUSH
33872: CALL_OW 437
33876: ST_TO_ADDR
// if task then
33877: LD_VAR 0 3
33881: IFFALSE 33909
// if task [ 1 ] [ 1 ] = p then
33883: LD_VAR 0 3
33887: PUSH
33888: LD_INT 1
33890: ARRAY
33891: PUSH
33892: LD_INT 1
33894: ARRAY
33895: PUSH
33896: LD_STRING p
33898: EQUAL
33899: IFFALSE 33909
// result := true ;
33901: LD_ADDR_VAR 0 2
33905: PUSH
33906: LD_INT 1
33908: ST_TO_ADDR
// end ;
33909: LD_VAR 0 2
33913: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33914: LD_INT 0
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
// if pos < 1 then
33920: LD_VAR 0 2
33924: PUSH
33925: LD_INT 1
33927: LESS
33928: IFFALSE 33932
// exit ;
33930: GO 34235
// if pos = 1 then
33932: LD_VAR 0 2
33936: PUSH
33937: LD_INT 1
33939: EQUAL
33940: IFFALSE 33973
// result := Replace ( arr , pos [ 1 ] , value ) else
33942: LD_ADDR_VAR 0 4
33946: PUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: LD_VAR 0 2
33956: PUSH
33957: LD_INT 1
33959: ARRAY
33960: PPUSH
33961: LD_VAR 0 3
33965: PPUSH
33966: CALL_OW 1
33970: ST_TO_ADDR
33971: GO 34235
// begin tmp := arr ;
33973: LD_ADDR_VAR 0 6
33977: PUSH
33978: LD_VAR 0 1
33982: ST_TO_ADDR
// s_arr := [ tmp ] ;
33983: LD_ADDR_VAR 0 7
33987: PUSH
33988: LD_VAR 0 6
33992: PUSH
33993: EMPTY
33994: LIST
33995: ST_TO_ADDR
// for i = 1 to pos - 1 do
33996: LD_ADDR_VAR 0 5
34000: PUSH
34001: DOUBLE
34002: LD_INT 1
34004: DEC
34005: ST_TO_ADDR
34006: LD_VAR 0 2
34010: PUSH
34011: LD_INT 1
34013: MINUS
34014: PUSH
34015: FOR_TO
34016: IFFALSE 34061
// begin tmp := tmp [ pos [ i ] ] ;
34018: LD_ADDR_VAR 0 6
34022: PUSH
34023: LD_VAR 0 6
34027: PUSH
34028: LD_VAR 0 2
34032: PUSH
34033: LD_VAR 0 5
34037: ARRAY
34038: ARRAY
34039: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34040: LD_ADDR_VAR 0 7
34044: PUSH
34045: LD_VAR 0 7
34049: PUSH
34050: LD_VAR 0 6
34054: PUSH
34055: EMPTY
34056: LIST
34057: ADD
34058: ST_TO_ADDR
// end ;
34059: GO 34015
34061: POP
34062: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34063: LD_ADDR_VAR 0 6
34067: PUSH
34068: LD_VAR 0 6
34072: PPUSH
34073: LD_VAR 0 2
34077: PUSH
34078: LD_VAR 0 2
34082: ARRAY
34083: PPUSH
34084: LD_VAR 0 3
34088: PPUSH
34089: CALL_OW 1
34093: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34094: LD_ADDR_VAR 0 7
34098: PUSH
34099: LD_VAR 0 7
34103: PPUSH
34104: LD_VAR 0 7
34108: PPUSH
34109: LD_VAR 0 6
34113: PPUSH
34114: CALL_OW 1
34118: ST_TO_ADDR
// for i = s_arr downto 2 do
34119: LD_ADDR_VAR 0 5
34123: PUSH
34124: DOUBLE
34125: LD_VAR 0 7
34129: INC
34130: ST_TO_ADDR
34131: LD_INT 2
34133: PUSH
34134: FOR_DOWNTO
34135: IFFALSE 34219
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34137: LD_ADDR_VAR 0 6
34141: PUSH
34142: LD_VAR 0 7
34146: PUSH
34147: LD_VAR 0 5
34151: PUSH
34152: LD_INT 1
34154: MINUS
34155: ARRAY
34156: PPUSH
34157: LD_VAR 0 2
34161: PUSH
34162: LD_VAR 0 5
34166: PUSH
34167: LD_INT 1
34169: MINUS
34170: ARRAY
34171: PPUSH
34172: LD_VAR 0 7
34176: PUSH
34177: LD_VAR 0 5
34181: ARRAY
34182: PPUSH
34183: CALL_OW 1
34187: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34188: LD_ADDR_VAR 0 7
34192: PUSH
34193: LD_VAR 0 7
34197: PPUSH
34198: LD_VAR 0 5
34202: PUSH
34203: LD_INT 1
34205: MINUS
34206: PPUSH
34207: LD_VAR 0 6
34211: PPUSH
34212: CALL_OW 1
34216: ST_TO_ADDR
// end ;
34217: GO 34134
34219: POP
34220: POP
// result := s_arr [ 1 ] ;
34221: LD_ADDR_VAR 0 4
34225: PUSH
34226: LD_VAR 0 7
34230: PUSH
34231: LD_INT 1
34233: ARRAY
34234: ST_TO_ADDR
// end ; end ;
34235: LD_VAR 0 4
34239: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34240: LD_INT 0
34242: PPUSH
34243: PPUSH
// if not list then
34244: LD_VAR 0 1
34248: NOT
34249: IFFALSE 34253
// exit ;
34251: GO 34344
// i := list [ pos1 ] ;
34253: LD_ADDR_VAR 0 5
34257: PUSH
34258: LD_VAR 0 1
34262: PUSH
34263: LD_VAR 0 2
34267: ARRAY
34268: ST_TO_ADDR
// if not i then
34269: LD_VAR 0 5
34273: NOT
34274: IFFALSE 34278
// exit ;
34276: GO 34344
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34278: LD_ADDR_VAR 0 1
34282: PUSH
34283: LD_VAR 0 1
34287: PPUSH
34288: LD_VAR 0 2
34292: PPUSH
34293: LD_VAR 0 1
34297: PUSH
34298: LD_VAR 0 3
34302: ARRAY
34303: PPUSH
34304: CALL_OW 1
34308: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34309: LD_ADDR_VAR 0 1
34313: PUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: LD_VAR 0 3
34323: PPUSH
34324: LD_VAR 0 5
34328: PPUSH
34329: CALL_OW 1
34333: ST_TO_ADDR
// result := list ;
34334: LD_ADDR_VAR 0 4
34338: PUSH
34339: LD_VAR 0 1
34343: ST_TO_ADDR
// end ;
34344: LD_VAR 0 4
34348: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34349: LD_INT 0
34351: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34352: LD_ADDR_VAR 0 5
34356: PUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 250
34366: PPUSH
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 251
34376: PPUSH
34377: LD_VAR 0 2
34381: PPUSH
34382: LD_VAR 0 3
34386: PPUSH
34387: LD_VAR 0 4
34391: PPUSH
34392: CALL 34774 0 5
34396: ST_TO_ADDR
// end ;
34397: LD_VAR 0 5
34401: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34402: LD_INT 0
34404: PPUSH
34405: PPUSH
34406: PPUSH
34407: PPUSH
// if not list or not unit then
34408: LD_VAR 0 2
34412: NOT
34413: IFTRUE 34422
34415: PUSH
34416: LD_VAR 0 1
34420: NOT
34421: OR
34422: IFFALSE 34426
// exit ;
34424: GO 34769
// result := [ ] ;
34426: LD_ADDR_VAR 0 5
34430: PUSH
34431: EMPTY
34432: ST_TO_ADDR
// for i in list do
34433: LD_ADDR_VAR 0 6
34437: PUSH
34438: LD_VAR 0 2
34442: PUSH
34443: FOR_IN
34444: IFFALSE 34662
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34446: LD_ADDR_VAR 0 8
34450: PUSH
34451: LD_VAR 0 1
34455: PPUSH
34456: LD_VAR 0 6
34460: PUSH
34461: LD_INT 1
34463: ARRAY
34464: PPUSH
34465: LD_VAR 0 6
34469: PUSH
34470: LD_INT 2
34472: ARRAY
34473: PPUSH
34474: CALL_OW 297
34478: ST_TO_ADDR
// if not Count ( result ) then
34479: LD_VAR 0 5
34483: PPUSH
34484: CALL 31030 0 1
34488: NOT
34489: IFFALSE 34522
// begin result := Join ( result , [ i , tmp ] ) ;
34491: LD_ADDR_VAR 0 5
34495: PUSH
34496: LD_VAR 0 5
34500: PPUSH
34501: LD_VAR 0 6
34505: PUSH
34506: LD_VAR 0 8
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PPUSH
34515: CALL 66962 0 2
34519: ST_TO_ADDR
// continue ;
34520: GO 34443
// end ; if result [ result ] [ 2 ] <= tmp then
34522: LD_VAR 0 5
34526: PUSH
34527: LD_VAR 0 5
34531: ARRAY
34532: PUSH
34533: LD_INT 2
34535: ARRAY
34536: PUSH
34537: LD_VAR 0 8
34541: LESSEQUAL
34542: IFFALSE 34575
// result := Join ( result , [ i , tmp ] ) else
34544: LD_ADDR_VAR 0 5
34548: PUSH
34549: LD_VAR 0 5
34553: PPUSH
34554: LD_VAR 0 6
34558: PUSH
34559: LD_VAR 0 8
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PPUSH
34568: CALL 66962 0 2
34572: ST_TO_ADDR
34573: GO 34660
// begin for j := 1 to Count ( result ) do
34575: LD_ADDR_VAR 0 7
34579: PUSH
34580: DOUBLE
34581: LD_INT 1
34583: DEC
34584: ST_TO_ADDR
34585: LD_VAR 0 5
34589: PPUSH
34590: CALL 31030 0 1
34594: PUSH
34595: FOR_TO
34596: IFFALSE 34658
// begin if tmp < result [ j ] [ 2 ] then
34598: LD_VAR 0 8
34602: PUSH
34603: LD_VAR 0 5
34607: PUSH
34608: LD_VAR 0 7
34612: ARRAY
34613: PUSH
34614: LD_INT 2
34616: ARRAY
34617: LESS
34618: IFFALSE 34656
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34620: LD_ADDR_VAR 0 5
34624: PUSH
34625: LD_VAR 0 5
34629: PPUSH
34630: LD_VAR 0 7
34634: PPUSH
34635: LD_VAR 0 6
34639: PUSH
34640: LD_VAR 0 8
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PPUSH
34649: CALL_OW 2
34653: ST_TO_ADDR
// break ;
34654: GO 34658
// end ; end ;
34656: GO 34595
34658: POP
34659: POP
// end ; end ;
34660: GO 34443
34662: POP
34663: POP
// if result and not asc then
34664: LD_VAR 0 5
34668: IFFALSE 34677
34670: PUSH
34671: LD_VAR 0 3
34675: NOT
34676: AND
34677: IFFALSE 34694
// result := ReverseArray ( result ) ;
34679: LD_ADDR_VAR 0 5
34683: PUSH
34684: LD_VAR 0 5
34688: PPUSH
34689: CALL 62052 0 1
34693: ST_TO_ADDR
// tmp := [ ] ;
34694: LD_ADDR_VAR 0 8
34698: PUSH
34699: EMPTY
34700: ST_TO_ADDR
// if mode then
34701: LD_VAR 0 4
34705: IFFALSE 34769
// begin for i := 1 to result do
34707: LD_ADDR_VAR 0 6
34711: PUSH
34712: DOUBLE
34713: LD_INT 1
34715: DEC
34716: ST_TO_ADDR
34717: LD_VAR 0 5
34721: PUSH
34722: FOR_TO
34723: IFFALSE 34757
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34725: LD_ADDR_VAR 0 8
34729: PUSH
34730: LD_VAR 0 8
34734: PPUSH
34735: LD_VAR 0 5
34739: PUSH
34740: LD_VAR 0 6
34744: ARRAY
34745: PUSH
34746: LD_INT 1
34748: ARRAY
34749: PPUSH
34750: CALL 66962 0 2
34754: ST_TO_ADDR
34755: GO 34722
34757: POP
34758: POP
// result := tmp ;
34759: LD_ADDR_VAR 0 5
34763: PUSH
34764: LD_VAR 0 8
34768: ST_TO_ADDR
// end ; end ;
34769: LD_VAR 0 5
34773: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34774: LD_INT 0
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
// if not list then
34780: LD_VAR 0 3
34784: NOT
34785: IFFALSE 34789
// exit ;
34787: GO 35179
// result := [ ] ;
34789: LD_ADDR_VAR 0 6
34793: PUSH
34794: EMPTY
34795: ST_TO_ADDR
// for i in list do
34796: LD_ADDR_VAR 0 7
34800: PUSH
34801: LD_VAR 0 3
34805: PUSH
34806: FOR_IN
34807: IFFALSE 35009
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34809: LD_ADDR_VAR 0 9
34813: PUSH
34814: LD_VAR 0 7
34818: PPUSH
34819: LD_VAR 0 1
34823: PPUSH
34824: LD_VAR 0 2
34828: PPUSH
34829: CALL_OW 297
34833: ST_TO_ADDR
// if not result then
34834: LD_VAR 0 6
34838: NOT
34839: IFFALSE 34865
// result := [ [ i , tmp ] ] else
34841: LD_ADDR_VAR 0 6
34845: PUSH
34846: LD_VAR 0 7
34850: PUSH
34851: LD_VAR 0 9
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: EMPTY
34861: LIST
34862: ST_TO_ADDR
34863: GO 35007
// begin if result [ result ] [ 2 ] <= tmp then
34865: LD_VAR 0 6
34869: PUSH
34870: LD_VAR 0 6
34874: ARRAY
34875: PUSH
34876: LD_INT 2
34878: ARRAY
34879: PUSH
34880: LD_VAR 0 9
34884: LESSEQUAL
34885: IFFALSE 34927
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34887: LD_ADDR_VAR 0 6
34891: PUSH
34892: LD_VAR 0 6
34896: PPUSH
34897: LD_VAR 0 6
34901: PUSH
34902: LD_INT 1
34904: PLUS
34905: PPUSH
34906: LD_VAR 0 7
34910: PUSH
34911: LD_VAR 0 9
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PPUSH
34920: CALL_OW 2
34924: ST_TO_ADDR
34925: GO 35007
// for j := 1 to result do
34927: LD_ADDR_VAR 0 8
34931: PUSH
34932: DOUBLE
34933: LD_INT 1
34935: DEC
34936: ST_TO_ADDR
34937: LD_VAR 0 6
34941: PUSH
34942: FOR_TO
34943: IFFALSE 35005
// begin if tmp < result [ j ] [ 2 ] then
34945: LD_VAR 0 9
34949: PUSH
34950: LD_VAR 0 6
34954: PUSH
34955: LD_VAR 0 8
34959: ARRAY
34960: PUSH
34961: LD_INT 2
34963: ARRAY
34964: LESS
34965: IFFALSE 35003
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34967: LD_ADDR_VAR 0 6
34971: PUSH
34972: LD_VAR 0 6
34976: PPUSH
34977: LD_VAR 0 8
34981: PPUSH
34982: LD_VAR 0 7
34986: PUSH
34987: LD_VAR 0 9
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PPUSH
34996: CALL_OW 2
35000: ST_TO_ADDR
// break ;
35001: GO 35005
// end ; end ;
35003: GO 34942
35005: POP
35006: POP
// end ; end ;
35007: GO 34806
35009: POP
35010: POP
// if result and not asc then
35011: LD_VAR 0 6
35015: IFFALSE 35024
35017: PUSH
35018: LD_VAR 0 4
35022: NOT
35023: AND
35024: IFFALSE 35099
// begin tmp := result ;
35026: LD_ADDR_VAR 0 9
35030: PUSH
35031: LD_VAR 0 6
35035: ST_TO_ADDR
// for i = tmp downto 1 do
35036: LD_ADDR_VAR 0 7
35040: PUSH
35041: DOUBLE
35042: LD_VAR 0 9
35046: INC
35047: ST_TO_ADDR
35048: LD_INT 1
35050: PUSH
35051: FOR_DOWNTO
35052: IFFALSE 35097
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35054: LD_ADDR_VAR 0 6
35058: PUSH
35059: LD_VAR 0 6
35063: PPUSH
35064: LD_VAR 0 9
35068: PUSH
35069: LD_VAR 0 7
35073: MINUS
35074: PUSH
35075: LD_INT 1
35077: PLUS
35078: PPUSH
35079: LD_VAR 0 9
35083: PUSH
35084: LD_VAR 0 7
35088: ARRAY
35089: PPUSH
35090: CALL_OW 1
35094: ST_TO_ADDR
35095: GO 35051
35097: POP
35098: POP
// end ; tmp := [ ] ;
35099: LD_ADDR_VAR 0 9
35103: PUSH
35104: EMPTY
35105: ST_TO_ADDR
// if mode then
35106: LD_VAR 0 5
35110: IFFALSE 35179
// begin for i = 1 to result do
35112: LD_ADDR_VAR 0 7
35116: PUSH
35117: DOUBLE
35118: LD_INT 1
35120: DEC
35121: ST_TO_ADDR
35122: LD_VAR 0 6
35126: PUSH
35127: FOR_TO
35128: IFFALSE 35167
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35130: LD_ADDR_VAR 0 9
35134: PUSH
35135: LD_VAR 0 9
35139: PPUSH
35140: LD_VAR 0 7
35144: PPUSH
35145: LD_VAR 0 6
35149: PUSH
35150: LD_VAR 0 7
35154: ARRAY
35155: PUSH
35156: LD_INT 1
35158: ARRAY
35159: PPUSH
35160: CALL_OW 1
35164: ST_TO_ADDR
35165: GO 35127
35167: POP
35168: POP
// result := tmp ;
35169: LD_ADDR_VAR 0 6
35173: PUSH
35174: LD_VAR 0 9
35178: ST_TO_ADDR
// end ; end ;
35179: LD_VAR 0 6
35183: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35184: LD_INT 0
35186: PPUSH
35187: PPUSH
35188: PPUSH
35189: PPUSH
35190: PPUSH
35191: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35192: LD_ADDR_VAR 0 5
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: ST_TO_ADDR
// if not x or not y then
35214: LD_VAR 0 2
35218: NOT
35219: IFTRUE 35228
35221: PUSH
35222: LD_VAR 0 3
35226: NOT
35227: OR
35228: IFFALSE 35232
// exit ;
35230: GO 36888
// if not range then
35232: LD_VAR 0 4
35236: NOT
35237: IFFALSE 35247
// range := 10 ;
35239: LD_ADDR_VAR 0 4
35243: PUSH
35244: LD_INT 10
35246: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35247: LD_ADDR_VAR 0 8
35251: PUSH
35252: LD_INT 81
35254: PUSH
35255: LD_VAR 0 1
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 92
35266: PUSH
35267: LD_VAR 0 2
35271: PUSH
35272: LD_VAR 0 3
35276: PUSH
35277: LD_VAR 0 4
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 3
35290: PUSH
35291: LD_INT 21
35293: PUSH
35294: LD_INT 3
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: PPUSH
35310: CALL_OW 69
35314: ST_TO_ADDR
// if not tmp then
35315: LD_VAR 0 8
35319: NOT
35320: IFFALSE 35324
// exit ;
35322: GO 36888
// for i in tmp do
35324: LD_ADDR_VAR 0 6
35328: PUSH
35329: LD_VAR 0 8
35333: PUSH
35334: FOR_IN
35335: IFFALSE 36863
// begin points := [ 0 , 0 , 0 ] ;
35337: LD_ADDR_VAR 0 9
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: ST_TO_ADDR
// bpoints := 1 ;
35356: LD_ADDR_VAR 0 10
35360: PUSH
35361: LD_INT 1
35363: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35364: LD_VAR 0 6
35368: PPUSH
35369: CALL_OW 247
35373: PUSH
35374: LD_INT 1
35376: DOUBLE
35377: EQUAL
35378: IFTRUE 35382
35380: GO 35964
35382: POP
// begin if GetClass ( i ) = 1 then
35383: LD_VAR 0 6
35387: PPUSH
35388: CALL_OW 257
35392: PUSH
35393: LD_INT 1
35395: EQUAL
35396: IFFALSE 35417
// points := [ 10 , 5 , 3 ] ;
35398: LD_ADDR_VAR 0 9
35402: PUSH
35403: LD_INT 10
35405: PUSH
35406: LD_INT 5
35408: PUSH
35409: LD_INT 3
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35417: LD_VAR 0 6
35421: PPUSH
35422: CALL_OW 257
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: LD_INT 3
35432: PUSH
35433: LD_INT 4
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: LIST
35440: IN
35441: IFFALSE 35462
// points := [ 3 , 2 , 1 ] ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_INT 3
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35462: LD_VAR 0 6
35466: PPUSH
35467: CALL_OW 257
35471: PUSH
35472: LD_INT 5
35474: EQUAL
35475: IFFALSE 35496
// points := [ 130 , 5 , 2 ] ;
35477: LD_ADDR_VAR 0 9
35481: PUSH
35482: LD_INT 130
35484: PUSH
35485: LD_INT 5
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: LIST
35495: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35496: LD_VAR 0 6
35500: PPUSH
35501: CALL_OW 257
35505: PUSH
35506: LD_INT 8
35508: EQUAL
35509: IFFALSE 35530
// points := [ 35 , 35 , 30 ] ;
35511: LD_ADDR_VAR 0 9
35515: PUSH
35516: LD_INT 35
35518: PUSH
35519: LD_INT 35
35521: PUSH
35522: LD_INT 30
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35530: LD_VAR 0 6
35534: PPUSH
35535: CALL_OW 257
35539: PUSH
35540: LD_INT 9
35542: EQUAL
35543: IFFALSE 35564
// points := [ 20 , 55 , 40 ] ;
35545: LD_ADDR_VAR 0 9
35549: PUSH
35550: LD_INT 20
35552: PUSH
35553: LD_INT 55
35555: PUSH
35556: LD_INT 40
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35564: LD_VAR 0 6
35568: PPUSH
35569: CALL_OW 257
35573: PUSH
35574: LD_INT 12
35576: PUSH
35577: LD_INT 16
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: IN
35584: IFFALSE 35605
// points := [ 5 , 3 , 2 ] ;
35586: LD_ADDR_VAR 0 9
35590: PUSH
35591: LD_INT 5
35593: PUSH
35594: LD_INT 3
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35605: LD_VAR 0 6
35609: PPUSH
35610: CALL_OW 257
35614: PUSH
35615: LD_INT 17
35617: EQUAL
35618: IFFALSE 35639
// points := [ 100 , 50 , 75 ] ;
35620: LD_ADDR_VAR 0 9
35624: PUSH
35625: LD_INT 100
35627: PUSH
35628: LD_INT 50
35630: PUSH
35631: LD_INT 75
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35639: LD_VAR 0 6
35643: PPUSH
35644: CALL_OW 257
35648: PUSH
35649: LD_INT 15
35651: EQUAL
35652: IFFALSE 35673
// points := [ 10 , 5 , 3 ] ;
35654: LD_ADDR_VAR 0 9
35658: PUSH
35659: LD_INT 10
35661: PUSH
35662: LD_INT 5
35664: PUSH
35665: LD_INT 3
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35673: LD_VAR 0 6
35677: PPUSH
35678: CALL_OW 257
35682: PUSH
35683: LD_INT 14
35685: EQUAL
35686: IFFALSE 35707
// points := [ 10 , 0 , 0 ] ;
35688: LD_ADDR_VAR 0 9
35692: PUSH
35693: LD_INT 10
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35707: LD_VAR 0 6
35711: PPUSH
35712: CALL_OW 257
35716: PUSH
35717: LD_INT 11
35719: EQUAL
35720: IFFALSE 35741
// points := [ 30 , 10 , 5 ] ;
35722: LD_ADDR_VAR 0 9
35726: PUSH
35727: LD_INT 30
35729: PUSH
35730: LD_INT 10
35732: PUSH
35733: LD_INT 5
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35741: LD_VAR 0 1
35745: PPUSH
35746: LD_INT 5
35748: PPUSH
35749: CALL_OW 321
35753: PUSH
35754: LD_INT 2
35756: EQUAL
35757: IFFALSE 35774
// bpoints := bpoints * 1.8 ;
35759: LD_ADDR_VAR 0 10
35763: PUSH
35764: LD_VAR 0 10
35768: PUSH
35769: LD_REAL  1.80000000000000E+0000
35772: MUL
35773: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35774: LD_VAR 0 6
35778: PPUSH
35779: CALL_OW 257
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: LD_INT 4
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: IN
35802: IFFALSE 35822
35804: PUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: LD_INT 51
35812: PPUSH
35813: CALL_OW 321
35817: PUSH
35818: LD_INT 2
35820: EQUAL
35821: AND
35822: IFFALSE 35839
// bpoints := bpoints * 1.2 ;
35824: LD_ADDR_VAR 0 10
35828: PUSH
35829: LD_VAR 0 10
35833: PUSH
35834: LD_REAL  1.20000000000000E+0000
35837: MUL
35838: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35839: LD_VAR 0 6
35843: PPUSH
35844: CALL_OW 257
35848: PUSH
35849: LD_INT 5
35851: PUSH
35852: LD_INT 7
35854: PUSH
35855: LD_INT 9
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: IN
35863: IFFALSE 35883
35865: PUSH
35866: LD_VAR 0 1
35870: PPUSH
35871: LD_INT 52
35873: PPUSH
35874: CALL_OW 321
35878: PUSH
35879: LD_INT 2
35881: EQUAL
35882: AND
35883: IFFALSE 35900
// bpoints := bpoints * 1.5 ;
35885: LD_ADDR_VAR 0 10
35889: PUSH
35890: LD_VAR 0 10
35894: PUSH
35895: LD_REAL  1.50000000000000E+0000
35898: MUL
35899: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35900: LD_VAR 0 1
35904: PPUSH
35905: LD_INT 66
35907: PPUSH
35908: CALL_OW 321
35912: PUSH
35913: LD_INT 2
35915: EQUAL
35916: IFFALSE 35933
// bpoints := bpoints * 1.1 ;
35918: LD_ADDR_VAR 0 10
35922: PUSH
35923: LD_VAR 0 10
35927: PUSH
35928: LD_REAL  1.10000000000000E+0000
35931: MUL
35932: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35933: LD_ADDR_VAR 0 10
35937: PUSH
35938: LD_VAR 0 10
35942: PUSH
35943: LD_VAR 0 6
35947: PPUSH
35948: LD_INT 1
35950: PPUSH
35951: CALL_OW 259
35955: PUSH
35956: LD_REAL  1.15000000000000E+0000
35959: MUL
35960: MUL
35961: ST_TO_ADDR
// end ; unit_vehicle :
35962: GO 36792
35964: LD_INT 2
35966: DOUBLE
35967: EQUAL
35968: IFTRUE 35972
35970: GO 36780
35972: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35973: LD_VAR 0 6
35977: PPUSH
35978: CALL_OW 264
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 42
35988: PUSH
35989: LD_INT 24
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: IN
35997: IFFALSE 36018
// points := [ 25 , 5 , 3 ] ;
35999: LD_ADDR_VAR 0 9
36003: PUSH
36004: LD_INT 25
36006: PUSH
36007: LD_INT 5
36009: PUSH
36010: LD_INT 3
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36018: LD_VAR 0 6
36022: PPUSH
36023: CALL_OW 264
36027: PUSH
36028: LD_INT 4
36030: PUSH
36031: LD_INT 43
36033: PUSH
36034: LD_INT 25
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: IN
36042: IFFALSE 36063
// points := [ 40 , 15 , 5 ] ;
36044: LD_ADDR_VAR 0 9
36048: PUSH
36049: LD_INT 40
36051: PUSH
36052: LD_INT 15
36054: PUSH
36055: LD_INT 5
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36063: LD_VAR 0 6
36067: PPUSH
36068: CALL_OW 264
36072: PUSH
36073: LD_INT 3
36075: PUSH
36076: LD_INT 23
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: IN
36083: IFFALSE 36104
// points := [ 7 , 25 , 8 ] ;
36085: LD_ADDR_VAR 0 9
36089: PUSH
36090: LD_INT 7
36092: PUSH
36093: LD_INT 25
36095: PUSH
36096: LD_INT 8
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36104: LD_VAR 0 6
36108: PPUSH
36109: CALL_OW 264
36113: PUSH
36114: LD_INT 5
36116: PUSH
36117: LD_INT 27
36119: PUSH
36120: LD_INT 44
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: IN
36128: IFFALSE 36149
// points := [ 14 , 50 , 16 ] ;
36130: LD_ADDR_VAR 0 9
36134: PUSH
36135: LD_INT 14
36137: PUSH
36138: LD_INT 50
36140: PUSH
36141: LD_INT 16
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36149: LD_VAR 0 6
36153: PPUSH
36154: CALL_OW 264
36158: PUSH
36159: LD_INT 6
36161: PUSH
36162: LD_INT 46
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: IN
36169: IFFALSE 36190
// points := [ 32 , 120 , 70 ] ;
36171: LD_ADDR_VAR 0 9
36175: PUSH
36176: LD_INT 32
36178: PUSH
36179: LD_INT 120
36181: PUSH
36182: LD_INT 70
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36190: LD_VAR 0 6
36194: PPUSH
36195: CALL_OW 264
36199: PUSH
36200: LD_INT 7
36202: PUSH
36203: LD_INT 28
36205: PUSH
36206: LD_INT 45
36208: PUSH
36209: LD_INT 92
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: IN
36218: IFFALSE 36239
// points := [ 35 , 20 , 45 ] ;
36220: LD_ADDR_VAR 0 9
36224: PUSH
36225: LD_INT 35
36227: PUSH
36228: LD_INT 20
36230: PUSH
36231: LD_INT 45
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36239: LD_VAR 0 6
36243: PPUSH
36244: CALL_OW 264
36248: PUSH
36249: LD_INT 47
36251: PUSH
36252: EMPTY
36253: LIST
36254: IN
36255: IFFALSE 36276
// points := [ 67 , 45 , 75 ] ;
36257: LD_ADDR_VAR 0 9
36261: PUSH
36262: LD_INT 67
36264: PUSH
36265: LD_INT 45
36267: PUSH
36268: LD_INT 75
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36276: LD_VAR 0 6
36280: PPUSH
36281: CALL_OW 264
36285: PUSH
36286: LD_INT 26
36288: PUSH
36289: EMPTY
36290: LIST
36291: IN
36292: IFFALSE 36313
// points := [ 120 , 30 , 80 ] ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_INT 120
36301: PUSH
36302: LD_INT 30
36304: PUSH
36305: LD_INT 80
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 264
36322: PUSH
36323: LD_INT 22
36325: PUSH
36326: EMPTY
36327: LIST
36328: IN
36329: IFFALSE 36350
// points := [ 40 , 1 , 1 ] ;
36331: LD_ADDR_VAR 0 9
36335: PUSH
36336: LD_INT 40
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36350: LD_VAR 0 6
36354: PPUSH
36355: CALL_OW 264
36359: PUSH
36360: LD_INT 29
36362: PUSH
36363: EMPTY
36364: LIST
36365: IN
36366: IFFALSE 36387
// points := [ 70 , 200 , 400 ] ;
36368: LD_ADDR_VAR 0 9
36372: PUSH
36373: LD_INT 70
36375: PUSH
36376: LD_INT 200
36378: PUSH
36379: LD_INT 400
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36387: LD_VAR 0 6
36391: PPUSH
36392: CALL_OW 264
36396: PUSH
36397: LD_INT 14
36399: PUSH
36400: LD_INT 53
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: IN
36407: IFFALSE 36428
// points := [ 40 , 10 , 20 ] ;
36409: LD_ADDR_VAR 0 9
36413: PUSH
36414: LD_INT 40
36416: PUSH
36417: LD_INT 10
36419: PUSH
36420: LD_INT 20
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36428: LD_VAR 0 6
36432: PPUSH
36433: CALL_OW 264
36437: PUSH
36438: LD_INT 9
36440: PUSH
36441: EMPTY
36442: LIST
36443: IN
36444: IFFALSE 36465
// points := [ 5 , 70 , 20 ] ;
36446: LD_ADDR_VAR 0 9
36450: PUSH
36451: LD_INT 5
36453: PUSH
36454: LD_INT 70
36456: PUSH
36457: LD_INT 20
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36465: LD_VAR 0 6
36469: PPUSH
36470: CALL_OW 264
36474: PUSH
36475: LD_INT 10
36477: PUSH
36478: EMPTY
36479: LIST
36480: IN
36481: IFFALSE 36502
// points := [ 35 , 110 , 70 ] ;
36483: LD_ADDR_VAR 0 9
36487: PUSH
36488: LD_INT 35
36490: PUSH
36491: LD_INT 110
36493: PUSH
36494: LD_INT 70
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36502: LD_VAR 0 6
36506: PPUSH
36507: CALL_OW 265
36511: PUSH
36512: LD_INT 25
36514: EQUAL
36515: IFFALSE 36536
// points := [ 80 , 65 , 100 ] ;
36517: LD_ADDR_VAR 0 9
36521: PUSH
36522: LD_INT 80
36524: PUSH
36525: LD_INT 65
36527: PUSH
36528: LD_INT 100
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36536: LD_VAR 0 6
36540: PPUSH
36541: CALL_OW 263
36545: PUSH
36546: LD_INT 1
36548: EQUAL
36549: IFFALSE 36584
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36551: LD_ADDR_VAR 0 10
36555: PUSH
36556: LD_VAR 0 10
36560: PUSH
36561: LD_VAR 0 6
36565: PPUSH
36566: CALL_OW 311
36570: PPUSH
36571: LD_INT 3
36573: PPUSH
36574: CALL_OW 259
36578: PUSH
36579: LD_INT 4
36581: MUL
36582: MUL
36583: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36584: LD_VAR 0 6
36588: PPUSH
36589: CALL_OW 263
36593: PUSH
36594: LD_INT 2
36596: EQUAL
36597: IFFALSE 36648
// begin j := IsControledBy ( i ) ;
36599: LD_ADDR_VAR 0 7
36603: PUSH
36604: LD_VAR 0 6
36608: PPUSH
36609: CALL_OW 312
36613: ST_TO_ADDR
// if j then
36614: LD_VAR 0 7
36618: IFFALSE 36648
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36620: LD_ADDR_VAR 0 10
36624: PUSH
36625: LD_VAR 0 10
36629: PUSH
36630: LD_VAR 0 7
36634: PPUSH
36635: LD_INT 3
36637: PPUSH
36638: CALL_OW 259
36642: PUSH
36643: LD_INT 3
36645: MUL
36646: MUL
36647: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36648: LD_VAR 0 6
36652: PPUSH
36653: CALL_OW 264
36657: PUSH
36658: LD_INT 5
36660: PUSH
36661: LD_INT 6
36663: PUSH
36664: LD_INT 46
36666: PUSH
36667: LD_INT 44
36669: PUSH
36670: LD_INT 47
36672: PUSH
36673: LD_INT 45
36675: PUSH
36676: LD_INT 28
36678: PUSH
36679: LD_INT 7
36681: PUSH
36682: LD_INT 27
36684: PUSH
36685: LD_INT 29
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: IN
36700: IFFALSE 36720
36702: PUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: LD_INT 52
36710: PPUSH
36711: CALL_OW 321
36715: PUSH
36716: LD_INT 2
36718: EQUAL
36719: AND
36720: IFFALSE 36737
// bpoints := bpoints * 1.2 ;
36722: LD_ADDR_VAR 0 10
36726: PUSH
36727: LD_VAR 0 10
36731: PUSH
36732: LD_REAL  1.20000000000000E+0000
36735: MUL
36736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36737: LD_VAR 0 6
36741: PPUSH
36742: CALL_OW 264
36746: PUSH
36747: LD_INT 6
36749: PUSH
36750: LD_INT 46
36752: PUSH
36753: LD_INT 47
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: IN
36761: IFFALSE 36778
// bpoints := bpoints * 1.2 ;
36763: LD_ADDR_VAR 0 10
36767: PUSH
36768: LD_VAR 0 10
36772: PUSH
36773: LD_REAL  1.20000000000000E+0000
36776: MUL
36777: ST_TO_ADDR
// end ; unit_building :
36778: GO 36792
36780: LD_INT 3
36782: DOUBLE
36783: EQUAL
36784: IFTRUE 36788
36786: GO 36791
36788: POP
// ; end ;
36789: GO 36792
36791: POP
// for j = 1 to 3 do
36792: LD_ADDR_VAR 0 7
36796: PUSH
36797: DOUBLE
36798: LD_INT 1
36800: DEC
36801: ST_TO_ADDR
36802: LD_INT 3
36804: PUSH
36805: FOR_TO
36806: IFFALSE 36859
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36808: LD_ADDR_VAR 0 5
36812: PUSH
36813: LD_VAR 0 5
36817: PPUSH
36818: LD_VAR 0 7
36822: PPUSH
36823: LD_VAR 0 5
36827: PUSH
36828: LD_VAR 0 7
36832: ARRAY
36833: PUSH
36834: LD_VAR 0 9
36838: PUSH
36839: LD_VAR 0 7
36843: ARRAY
36844: PUSH
36845: LD_VAR 0 10
36849: MUL
36850: PLUS
36851: PPUSH
36852: CALL_OW 1
36856: ST_TO_ADDR
36857: GO 36805
36859: POP
36860: POP
// end ;
36861: GO 35334
36863: POP
36864: POP
// result := Replace ( result , 4 , tmp ) ;
36865: LD_ADDR_VAR 0 5
36869: PUSH
36870: LD_VAR 0 5
36874: PPUSH
36875: LD_INT 4
36877: PPUSH
36878: LD_VAR 0 8
36882: PPUSH
36883: CALL_OW 1
36887: ST_TO_ADDR
// end ;
36888: LD_VAR 0 5
36892: RET
// export function DangerAtRange ( unit , range ) ; begin
36893: LD_INT 0
36895: PPUSH
// if not unit then
36896: LD_VAR 0 1
36900: NOT
36901: IFFALSE 36905
// exit ;
36903: GO 36950
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36905: LD_ADDR_VAR 0 3
36909: PUSH
36910: LD_VAR 0 1
36914: PPUSH
36915: CALL_OW 255
36919: PPUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 250
36929: PPUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 251
36939: PPUSH
36940: LD_VAR 0 2
36944: PPUSH
36945: CALL 35184 0 4
36949: ST_TO_ADDR
// end ;
36950: LD_VAR 0 3
36954: RET
// export function DangerInArea ( side , area ) ; begin
36955: LD_INT 0
36957: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36958: LD_ADDR_VAR 0 3
36962: PUSH
36963: LD_VAR 0 2
36967: PPUSH
36968: LD_INT 81
36970: PUSH
36971: LD_VAR 0 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PPUSH
36980: CALL_OW 70
36984: ST_TO_ADDR
// end ;
36985: LD_VAR 0 3
36989: RET
// export function IsExtension ( b ) ; begin
36990: LD_INT 0
36992: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36993: LD_ADDR_VAR 0 2
36997: PUSH
36998: LD_VAR 0 1
37002: PUSH
37003: LD_INT 23
37005: PUSH
37006: LD_INT 20
37008: PUSH
37009: LD_INT 22
37011: PUSH
37012: LD_INT 17
37014: PUSH
37015: LD_INT 24
37017: PUSH
37018: LD_INT 21
37020: PUSH
37021: LD_INT 19
37023: PUSH
37024: LD_INT 16
37026: PUSH
37027: LD_INT 25
37029: PUSH
37030: LD_INT 18
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: IN
37045: ST_TO_ADDR
// end ;
37046: LD_VAR 0 2
37050: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37051: LD_INT 0
37053: PPUSH
37054: PPUSH
37055: PPUSH
// result := [ ] ;
37056: LD_ADDR_VAR 0 4
37060: PUSH
37061: EMPTY
37062: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37063: LD_ADDR_VAR 0 5
37067: PUSH
37068: LD_VAR 0 2
37072: PPUSH
37073: LD_INT 21
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PPUSH
37083: CALL_OW 70
37087: ST_TO_ADDR
// if not tmp then
37088: LD_VAR 0 5
37092: NOT
37093: IFFALSE 37097
// exit ;
37095: GO 37161
// if checkLink then
37097: LD_VAR 0 3
37101: IFFALSE 37151
// begin for i in tmp do
37103: LD_ADDR_VAR 0 6
37107: PUSH
37108: LD_VAR 0 5
37112: PUSH
37113: FOR_IN
37114: IFFALSE 37149
// if GetBase ( i ) <> base then
37116: LD_VAR 0 6
37120: PPUSH
37121: CALL_OW 274
37125: PUSH
37126: LD_VAR 0 1
37130: NONEQUAL
37131: IFFALSE 37147
// ComLinkToBase ( base , i ) ;
37133: LD_VAR 0 1
37137: PPUSH
37138: LD_VAR 0 6
37142: PPUSH
37143: CALL_OW 169
37147: GO 37113
37149: POP
37150: POP
// end ; result := tmp ;
37151: LD_ADDR_VAR 0 4
37155: PUSH
37156: LD_VAR 0 5
37160: ST_TO_ADDR
// end ;
37161: LD_VAR 0 4
37165: RET
// export function ComComplete ( units , b ) ; var i ; begin
37166: LD_INT 0
37168: PPUSH
37169: PPUSH
// if not units then
37170: LD_VAR 0 1
37174: NOT
37175: IFFALSE 37179
// exit ;
37177: GO 37269
// for i in units do
37179: LD_ADDR_VAR 0 4
37183: PUSH
37184: LD_VAR 0 1
37188: PUSH
37189: FOR_IN
37190: IFFALSE 37267
// if BuildingStatus ( b ) = bs_build then
37192: LD_VAR 0 2
37196: PPUSH
37197: CALL_OW 461
37201: PUSH
37202: LD_INT 1
37204: EQUAL
37205: IFFALSE 37265
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37207: LD_VAR 0 4
37211: PPUSH
37212: LD_STRING h
37214: PUSH
37215: LD_VAR 0 2
37219: PPUSH
37220: CALL_OW 250
37224: PUSH
37225: LD_VAR 0 2
37229: PPUSH
37230: CALL_OW 251
37234: PUSH
37235: LD_VAR 0 2
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: PUSH
37258: EMPTY
37259: LIST
37260: PPUSH
37261: CALL_OW 446
37265: GO 37189
37267: POP
37268: POP
// end ;
37269: LD_VAR 0 3
37273: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37274: LD_INT 0
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37282: LD_VAR 0 1
37286: NOT
37287: IFTRUE 37304
37289: PUSH
37290: LD_VAR 0 1
37294: PPUSH
37295: CALL_OW 263
37299: PUSH
37300: LD_INT 2
37302: NONEQUAL
37303: OR
37304: IFFALSE 37308
// exit ;
37306: GO 37624
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37308: LD_ADDR_VAR 0 6
37312: PUSH
37313: LD_INT 22
37315: PUSH
37316: LD_VAR 0 1
37320: PPUSH
37321: CALL_OW 255
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: LD_INT 30
37335: PUSH
37336: LD_INT 36
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 34
37345: PUSH
37346: LD_INT 31
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PPUSH
37362: CALL_OW 69
37366: ST_TO_ADDR
// if not tmp then
37367: LD_VAR 0 6
37371: NOT
37372: IFFALSE 37376
// exit ;
37374: GO 37624
// result := [ ] ;
37376: LD_ADDR_VAR 0 2
37380: PUSH
37381: EMPTY
37382: ST_TO_ADDR
// for i in tmp do
37383: LD_ADDR_VAR 0 3
37387: PUSH
37388: LD_VAR 0 6
37392: PUSH
37393: FOR_IN
37394: IFFALSE 37465
// begin t := UnitsInside ( i ) ;
37396: LD_ADDR_VAR 0 4
37400: PUSH
37401: LD_VAR 0 3
37405: PPUSH
37406: CALL_OW 313
37410: ST_TO_ADDR
// if t then
37411: LD_VAR 0 4
37415: IFFALSE 37463
// for j in t do
37417: LD_ADDR_VAR 0 7
37421: PUSH
37422: LD_VAR 0 4
37426: PUSH
37427: FOR_IN
37428: IFFALSE 37461
// result := Replace ( result , result + 1 , j ) ;
37430: LD_ADDR_VAR 0 2
37434: PUSH
37435: LD_VAR 0 2
37439: PPUSH
37440: LD_VAR 0 2
37444: PUSH
37445: LD_INT 1
37447: PLUS
37448: PPUSH
37449: LD_VAR 0 7
37453: PPUSH
37454: CALL_OW 1
37458: ST_TO_ADDR
37459: GO 37427
37461: POP
37462: POP
// end ;
37463: GO 37393
37465: POP
37466: POP
// if not result then
37467: LD_VAR 0 2
37471: NOT
37472: IFFALSE 37476
// exit ;
37474: GO 37624
// mech := result [ 1 ] ;
37476: LD_ADDR_VAR 0 5
37480: PUSH
37481: LD_VAR 0 2
37485: PUSH
37486: LD_INT 1
37488: ARRAY
37489: ST_TO_ADDR
// if result > 1 then
37490: LD_VAR 0 2
37494: PUSH
37495: LD_INT 1
37497: GREATER
37498: IFFALSE 37610
// begin for i = 2 to result do
37500: LD_ADDR_VAR 0 3
37504: PUSH
37505: DOUBLE
37506: LD_INT 2
37508: DEC
37509: ST_TO_ADDR
37510: LD_VAR 0 2
37514: PUSH
37515: FOR_TO
37516: IFFALSE 37608
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37518: LD_ADDR_VAR 0 4
37522: PUSH
37523: LD_VAR 0 2
37527: PUSH
37528: LD_VAR 0 3
37532: ARRAY
37533: PPUSH
37534: LD_INT 3
37536: PPUSH
37537: CALL_OW 259
37541: PUSH
37542: LD_VAR 0 2
37546: PUSH
37547: LD_VAR 0 3
37551: ARRAY
37552: PPUSH
37553: CALL_OW 432
37557: MINUS
37558: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37559: LD_VAR 0 4
37563: PUSH
37564: LD_VAR 0 5
37568: PPUSH
37569: LD_INT 3
37571: PPUSH
37572: CALL_OW 259
37576: PUSH
37577: LD_VAR 0 5
37581: PPUSH
37582: CALL_OW 432
37586: MINUS
37587: GREATEREQUAL
37588: IFFALSE 37606
// mech := result [ i ] ;
37590: LD_ADDR_VAR 0 5
37594: PUSH
37595: LD_VAR 0 2
37599: PUSH
37600: LD_VAR 0 3
37604: ARRAY
37605: ST_TO_ADDR
// end ;
37606: GO 37515
37608: POP
37609: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37610: LD_VAR 0 1
37614: PPUSH
37615: LD_VAR 0 5
37619: PPUSH
37620: CALL_OW 135
// end ;
37624: LD_VAR 0 2
37628: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37629: LD_INT 0
37631: PPUSH
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
// result := [ ] ;
37644: LD_ADDR_VAR 0 7
37648: PUSH
37649: EMPTY
37650: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37651: LD_VAR 0 1
37655: PPUSH
37656: CALL_OW 266
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: IN
37671: NOT
37672: IFFALSE 37676
// exit ;
37674: GO 39316
// if name then
37676: LD_VAR 0 3
37680: IFFALSE 37696
// SetBName ( base_dep , name ) ;
37682: LD_VAR 0 1
37686: PPUSH
37687: LD_VAR 0 3
37691: PPUSH
37692: CALL_OW 500
// base := GetBase ( base_dep ) ;
37696: LD_ADDR_VAR 0 15
37700: PUSH
37701: LD_VAR 0 1
37705: PPUSH
37706: CALL_OW 274
37710: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37711: LD_ADDR_VAR 0 16
37715: PUSH
37716: LD_VAR 0 1
37720: PPUSH
37721: CALL_OW 255
37725: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37726: LD_ADDR_VAR 0 17
37730: PUSH
37731: LD_VAR 0 1
37735: PPUSH
37736: CALL_OW 248
37740: ST_TO_ADDR
// if sources then
37741: LD_VAR 0 5
37745: IFFALSE 37792
// for i = 1 to 3 do
37747: LD_ADDR_VAR 0 8
37751: PUSH
37752: DOUBLE
37753: LD_INT 1
37755: DEC
37756: ST_TO_ADDR
37757: LD_INT 3
37759: PUSH
37760: FOR_TO
37761: IFFALSE 37790
// AddResourceType ( base , i , sources [ i ] ) ;
37763: LD_VAR 0 15
37767: PPUSH
37768: LD_VAR 0 8
37772: PPUSH
37773: LD_VAR 0 5
37777: PUSH
37778: LD_VAR 0 8
37782: ARRAY
37783: PPUSH
37784: CALL_OW 276
37788: GO 37760
37790: POP
37791: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37792: LD_ADDR_VAR 0 18
37796: PUSH
37797: LD_VAR 0 15
37801: PPUSH
37802: LD_VAR 0 2
37806: PPUSH
37807: LD_INT 1
37809: PPUSH
37810: CALL 37051 0 3
37814: ST_TO_ADDR
// InitHc ;
37815: CALL_OW 19
// InitUc ;
37819: CALL_OW 18
// uc_side := side ;
37823: LD_ADDR_OWVAR 20
37827: PUSH
37828: LD_VAR 0 16
37832: ST_TO_ADDR
// uc_nation := nation ;
37833: LD_ADDR_OWVAR 21
37837: PUSH
37838: LD_VAR 0 17
37842: ST_TO_ADDR
// if buildings then
37843: LD_VAR 0 18
37847: IFFALSE 39175
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37849: LD_ADDR_VAR 0 19
37853: PUSH
37854: LD_VAR 0 18
37858: PPUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 30
37864: PUSH
37865: LD_INT 29
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 30
37874: PUSH
37875: LD_INT 30
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: PPUSH
37887: CALL_OW 72
37891: ST_TO_ADDR
// if tmp then
37892: LD_VAR 0 19
37896: IFFALSE 37944
// for i in tmp do
37898: LD_ADDR_VAR 0 8
37902: PUSH
37903: LD_VAR 0 19
37907: PUSH
37908: FOR_IN
37909: IFFALSE 37942
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37911: LD_VAR 0 8
37915: PPUSH
37916: CALL_OW 250
37920: PPUSH
37921: LD_VAR 0 8
37925: PPUSH
37926: CALL_OW 251
37930: PPUSH
37931: LD_VAR 0 16
37935: PPUSH
37936: CALL_OW 441
37940: GO 37908
37942: POP
37943: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37944: LD_VAR 0 18
37948: PPUSH
37949: LD_INT 2
37951: PUSH
37952: LD_INT 30
37954: PUSH
37955: LD_INT 32
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 30
37964: PUSH
37965: LD_INT 33
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: PPUSH
37977: CALL_OW 72
37981: IFFALSE 38069
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37983: LD_ADDR_VAR 0 8
37987: PUSH
37988: LD_VAR 0 18
37992: PPUSH
37993: LD_INT 2
37995: PUSH
37996: LD_INT 30
37998: PUSH
37999: LD_INT 32
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 30
38008: PUSH
38009: LD_INT 33
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: PPUSH
38021: CALL_OW 72
38025: PUSH
38026: FOR_IN
38027: IFFALSE 38067
// begin if not GetBWeapon ( i ) then
38029: LD_VAR 0 8
38033: PPUSH
38034: CALL_OW 269
38038: NOT
38039: IFFALSE 38065
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38041: LD_VAR 0 8
38045: PPUSH
38046: LD_VAR 0 8
38050: PPUSH
38051: LD_VAR 0 2
38055: PPUSH
38056: CALL 39321 0 2
38060: PPUSH
38061: CALL_OW 431
// end ;
38065: GO 38026
38067: POP
38068: POP
// end ; for i = 1 to personel do
38069: LD_ADDR_VAR 0 8
38073: PUSH
38074: DOUBLE
38075: LD_INT 1
38077: DEC
38078: ST_TO_ADDR
38079: LD_VAR 0 6
38083: PUSH
38084: FOR_TO
38085: IFFALSE 39155
// begin if i > 4 then
38087: LD_VAR 0 8
38091: PUSH
38092: LD_INT 4
38094: GREATER
38095: IFFALSE 38099
// break ;
38097: GO 39155
// case i of 1 :
38099: LD_VAR 0 8
38103: PUSH
38104: LD_INT 1
38106: DOUBLE
38107: EQUAL
38108: IFTRUE 38112
38110: GO 38192
38112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38113: LD_ADDR_VAR 0 12
38117: PUSH
38118: LD_VAR 0 18
38122: PPUSH
38123: LD_INT 22
38125: PUSH
38126: LD_VAR 0 16
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 58
38137: PUSH
38138: EMPTY
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: LD_INT 30
38146: PUSH
38147: LD_INT 32
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 30
38156: PUSH
38157: LD_INT 4
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 30
38166: PUSH
38167: LD_INT 5
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: PPUSH
38185: CALL_OW 72
38189: ST_TO_ADDR
38190: GO 38414
38192: LD_INT 2
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38262
38200: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38201: LD_ADDR_VAR 0 12
38205: PUSH
38206: LD_VAR 0 18
38210: PPUSH
38211: LD_INT 22
38213: PUSH
38214: LD_VAR 0 16
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 30
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 30
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PPUSH
38255: CALL_OW 72
38259: ST_TO_ADDR
38260: GO 38414
38262: LD_INT 3
38264: DOUBLE
38265: EQUAL
38266: IFTRUE 38270
38268: GO 38332
38270: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38271: LD_ADDR_VAR 0 12
38275: PUSH
38276: LD_VAR 0 18
38280: PPUSH
38281: LD_INT 22
38283: PUSH
38284: LD_VAR 0 16
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: LD_INT 30
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 30
38308: PUSH
38309: LD_INT 3
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PPUSH
38325: CALL_OW 72
38329: ST_TO_ADDR
38330: GO 38414
38332: LD_INT 4
38334: DOUBLE
38335: EQUAL
38336: IFTRUE 38340
38338: GO 38413
38340: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38341: LD_ADDR_VAR 0 12
38345: PUSH
38346: LD_VAR 0 18
38350: PPUSH
38351: LD_INT 22
38353: PUSH
38354: LD_VAR 0 16
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: LD_INT 30
38368: PUSH
38369: LD_INT 6
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 30
38378: PUSH
38379: LD_INT 7
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 30
38388: PUSH
38389: LD_INT 8
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PPUSH
38406: CALL_OW 72
38410: ST_TO_ADDR
38411: GO 38414
38413: POP
// if i = 1 then
38414: LD_VAR 0 8
38418: PUSH
38419: LD_INT 1
38421: EQUAL
38422: IFFALSE 38533
// begin tmp := [ ] ;
38424: LD_ADDR_VAR 0 19
38428: PUSH
38429: EMPTY
38430: ST_TO_ADDR
// for j in f do
38431: LD_ADDR_VAR 0 9
38435: PUSH
38436: LD_VAR 0 12
38440: PUSH
38441: FOR_IN
38442: IFFALSE 38515
// if GetBType ( j ) = b_bunker then
38444: LD_VAR 0 9
38448: PPUSH
38449: CALL_OW 266
38453: PUSH
38454: LD_INT 32
38456: EQUAL
38457: IFFALSE 38484
// tmp := Insert ( tmp , 1 , j ) else
38459: LD_ADDR_VAR 0 19
38463: PUSH
38464: LD_VAR 0 19
38468: PPUSH
38469: LD_INT 1
38471: PPUSH
38472: LD_VAR 0 9
38476: PPUSH
38477: CALL_OW 2
38481: ST_TO_ADDR
38482: GO 38513
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38484: LD_ADDR_VAR 0 19
38488: PUSH
38489: LD_VAR 0 19
38493: PPUSH
38494: LD_VAR 0 19
38498: PUSH
38499: LD_INT 1
38501: PLUS
38502: PPUSH
38503: LD_VAR 0 9
38507: PPUSH
38508: CALL_OW 2
38512: ST_TO_ADDR
38513: GO 38441
38515: POP
38516: POP
// if tmp then
38517: LD_VAR 0 19
38521: IFFALSE 38533
// f := tmp ;
38523: LD_ADDR_VAR 0 12
38527: PUSH
38528: LD_VAR 0 19
38532: ST_TO_ADDR
// end ; x := personel [ i ] ;
38533: LD_ADDR_VAR 0 13
38537: PUSH
38538: LD_VAR 0 6
38542: PUSH
38543: LD_VAR 0 8
38547: ARRAY
38548: ST_TO_ADDR
// if x = - 1 then
38549: LD_VAR 0 13
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: EQUAL
38558: IFFALSE 38769
// begin for j in f do
38560: LD_ADDR_VAR 0 9
38564: PUSH
38565: LD_VAR 0 12
38569: PUSH
38570: FOR_IN
38571: IFFALSE 38765
// repeat InitHc ;
38573: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38577: LD_VAR 0 9
38581: PPUSH
38582: CALL_OW 266
38586: PUSH
38587: LD_INT 5
38589: EQUAL
38590: IFFALSE 38660
// begin if UnitsInside ( j ) < 3 then
38592: LD_VAR 0 9
38596: PPUSH
38597: CALL_OW 313
38601: PUSH
38602: LD_INT 3
38604: LESS
38605: IFFALSE 38641
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38607: LD_INT 0
38609: PPUSH
38610: LD_INT 5
38612: PUSH
38613: LD_INT 8
38615: PUSH
38616: LD_INT 9
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: PUSH
38624: LD_VAR 0 17
38628: ARRAY
38629: PPUSH
38630: LD_VAR 0 4
38634: PPUSH
38635: CALL_OW 380
38639: GO 38658
// PrepareHuman ( false , i , skill ) ;
38641: LD_INT 0
38643: PPUSH
38644: LD_VAR 0 8
38648: PPUSH
38649: LD_VAR 0 4
38653: PPUSH
38654: CALL_OW 380
// end else
38658: GO 38677
// PrepareHuman ( false , i , skill ) ;
38660: LD_INT 0
38662: PPUSH
38663: LD_VAR 0 8
38667: PPUSH
38668: LD_VAR 0 4
38672: PPUSH
38673: CALL_OW 380
// un := CreateHuman ;
38677: LD_ADDR_VAR 0 14
38681: PUSH
38682: CALL_OW 44
38686: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38687: LD_ADDR_VAR 0 7
38691: PUSH
38692: LD_VAR 0 7
38696: PPUSH
38697: LD_INT 1
38699: PPUSH
38700: LD_VAR 0 14
38704: PPUSH
38705: CALL_OW 2
38709: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38710: LD_VAR 0 14
38714: PPUSH
38715: LD_VAR 0 9
38719: PPUSH
38720: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38724: LD_VAR 0 9
38728: PPUSH
38729: CALL_OW 313
38733: PUSH
38734: LD_INT 6
38736: EQUAL
38737: IFTRUE 38761
38739: PUSH
38740: LD_VAR 0 9
38744: PPUSH
38745: CALL_OW 266
38749: PUSH
38750: LD_INT 32
38752: PUSH
38753: LD_INT 31
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: IN
38760: OR
38761: IFFALSE 38573
38763: GO 38570
38765: POP
38766: POP
// end else
38767: GO 39153
// for j = 1 to x do
38769: LD_ADDR_VAR 0 9
38773: PUSH
38774: DOUBLE
38775: LD_INT 1
38777: DEC
38778: ST_TO_ADDR
38779: LD_VAR 0 13
38783: PUSH
38784: FOR_TO
38785: IFFALSE 39151
// begin InitHc ;
38787: CALL_OW 19
// if not f then
38791: LD_VAR 0 12
38795: NOT
38796: IFFALSE 38885
// begin PrepareHuman ( false , i , skill ) ;
38798: LD_INT 0
38800: PPUSH
38801: LD_VAR 0 8
38805: PPUSH
38806: LD_VAR 0 4
38810: PPUSH
38811: CALL_OW 380
// un := CreateHuman ;
38815: LD_ADDR_VAR 0 14
38819: PUSH
38820: CALL_OW 44
38824: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38825: LD_ADDR_VAR 0 7
38829: PUSH
38830: LD_VAR 0 7
38834: PPUSH
38835: LD_INT 1
38837: PPUSH
38838: LD_VAR 0 14
38842: PPUSH
38843: CALL_OW 2
38847: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38848: LD_VAR 0 14
38852: PPUSH
38853: LD_VAR 0 1
38857: PPUSH
38858: CALL_OW 250
38862: PPUSH
38863: LD_VAR 0 1
38867: PPUSH
38868: CALL_OW 251
38872: PPUSH
38873: LD_INT 10
38875: PPUSH
38876: LD_INT 0
38878: PPUSH
38879: CALL_OW 50
// continue ;
38883: GO 38784
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38885: LD_VAR 0 12
38889: PUSH
38890: LD_INT 1
38892: ARRAY
38893: PPUSH
38894: CALL_OW 313
38898: IFFALSE 38926
38900: PUSH
38901: LD_VAR 0 12
38905: PUSH
38906: LD_INT 1
38908: ARRAY
38909: PPUSH
38910: CALL_OW 266
38914: PUSH
38915: LD_INT 32
38917: PUSH
38918: LD_INT 31
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: IN
38925: AND
38926: IFTRUE 38947
38928: PUSH
38929: LD_VAR 0 12
38933: PUSH
38934: LD_INT 1
38936: ARRAY
38937: PPUSH
38938: CALL_OW 313
38942: PUSH
38943: LD_INT 6
38945: EQUAL
38946: OR
38947: IFFALSE 38967
// f := Delete ( f , 1 ) ;
38949: LD_ADDR_VAR 0 12
38953: PUSH
38954: LD_VAR 0 12
38958: PPUSH
38959: LD_INT 1
38961: PPUSH
38962: CALL_OW 3
38966: ST_TO_ADDR
// if not f then
38967: LD_VAR 0 12
38971: NOT
38972: IFFALSE 38990
// begin x := x + 2 ;
38974: LD_ADDR_VAR 0 13
38978: PUSH
38979: LD_VAR 0 13
38983: PUSH
38984: LD_INT 2
38986: PLUS
38987: ST_TO_ADDR
// continue ;
38988: GO 38784
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38990: LD_VAR 0 12
38994: PUSH
38995: LD_INT 1
38997: ARRAY
38998: PPUSH
38999: CALL_OW 266
39003: PUSH
39004: LD_INT 5
39006: EQUAL
39007: IFFALSE 39081
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39009: LD_VAR 0 12
39013: PUSH
39014: LD_INT 1
39016: ARRAY
39017: PPUSH
39018: CALL_OW 313
39022: PUSH
39023: LD_INT 3
39025: LESS
39026: IFFALSE 39062
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39028: LD_INT 0
39030: PPUSH
39031: LD_INT 5
39033: PUSH
39034: LD_INT 8
39036: PUSH
39037: LD_INT 9
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: PUSH
39045: LD_VAR 0 17
39049: ARRAY
39050: PPUSH
39051: LD_VAR 0 4
39055: PPUSH
39056: CALL_OW 380
39060: GO 39079
// PrepareHuman ( false , i , skill ) ;
39062: LD_INT 0
39064: PPUSH
39065: LD_VAR 0 8
39069: PPUSH
39070: LD_VAR 0 4
39074: PPUSH
39075: CALL_OW 380
// end else
39079: GO 39098
// PrepareHuman ( false , i , skill ) ;
39081: LD_INT 0
39083: PPUSH
39084: LD_VAR 0 8
39088: PPUSH
39089: LD_VAR 0 4
39093: PPUSH
39094: CALL_OW 380
// un := CreateHuman ;
39098: LD_ADDR_VAR 0 14
39102: PUSH
39103: CALL_OW 44
39107: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39108: LD_ADDR_VAR 0 7
39112: PUSH
39113: LD_VAR 0 7
39117: PPUSH
39118: LD_INT 1
39120: PPUSH
39121: LD_VAR 0 14
39125: PPUSH
39126: CALL_OW 2
39130: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39131: LD_VAR 0 14
39135: PPUSH
39136: LD_VAR 0 12
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PPUSH
39145: CALL_OW 52
// end ;
39149: GO 38784
39151: POP
39152: POP
// end ;
39153: GO 38084
39155: POP
39156: POP
// result := result ^ buildings ;
39157: LD_ADDR_VAR 0 7
39161: PUSH
39162: LD_VAR 0 7
39166: PUSH
39167: LD_VAR 0 18
39171: ADD
39172: ST_TO_ADDR
// end else
39173: GO 39316
// begin for i = 1 to personel do
39175: LD_ADDR_VAR 0 8
39179: PUSH
39180: DOUBLE
39181: LD_INT 1
39183: DEC
39184: ST_TO_ADDR
39185: LD_VAR 0 6
39189: PUSH
39190: FOR_TO
39191: IFFALSE 39314
// begin if i > 4 then
39193: LD_VAR 0 8
39197: PUSH
39198: LD_INT 4
39200: GREATER
39201: IFFALSE 39205
// break ;
39203: GO 39314
// x := personel [ i ] ;
39205: LD_ADDR_VAR 0 13
39209: PUSH
39210: LD_VAR 0 6
39214: PUSH
39215: LD_VAR 0 8
39219: ARRAY
39220: ST_TO_ADDR
// if x = - 1 then
39221: LD_VAR 0 13
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: EQUAL
39230: IFFALSE 39234
// continue ;
39232: GO 39190
// PrepareHuman ( false , i , skill ) ;
39234: LD_INT 0
39236: PPUSH
39237: LD_VAR 0 8
39241: PPUSH
39242: LD_VAR 0 4
39246: PPUSH
39247: CALL_OW 380
// un := CreateHuman ;
39251: LD_ADDR_VAR 0 14
39255: PUSH
39256: CALL_OW 44
39260: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39261: LD_VAR 0 14
39265: PPUSH
39266: LD_VAR 0 1
39270: PPUSH
39271: CALL_OW 250
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 251
39285: PPUSH
39286: LD_INT 10
39288: PPUSH
39289: LD_INT 0
39291: PPUSH
39292: CALL_OW 50
// result := result ^ un ;
39296: LD_ADDR_VAR 0 7
39300: PUSH
39301: LD_VAR 0 7
39305: PUSH
39306: LD_VAR 0 14
39310: ADD
39311: ST_TO_ADDR
// end ;
39312: GO 39190
39314: POP
39315: POP
// end ; end ;
39316: LD_VAR 0 7
39320: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39321: LD_INT 0
39323: PPUSH
39324: PPUSH
39325: PPUSH
39326: PPUSH
39327: PPUSH
39328: PPUSH
39329: PPUSH
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
// result := false ;
39339: LD_ADDR_VAR 0 3
39343: PUSH
39344: LD_INT 0
39346: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39347: LD_VAR 0 1
39351: NOT
39352: IFTRUE 39377
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: CALL_OW 266
39364: PUSH
39365: LD_INT 32
39367: PUSH
39368: LD_INT 33
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: IN
39375: NOT
39376: OR
39377: IFFALSE 39381
// exit ;
39379: GO 40516
// nat := GetNation ( tower ) ;
39381: LD_ADDR_VAR 0 12
39385: PUSH
39386: LD_VAR 0 1
39390: PPUSH
39391: CALL_OW 248
39395: ST_TO_ADDR
// side := GetSide ( tower ) ;
39396: LD_ADDR_VAR 0 16
39400: PUSH
39401: LD_VAR 0 1
39405: PPUSH
39406: CALL_OW 255
39410: ST_TO_ADDR
// x := GetX ( tower ) ;
39411: LD_ADDR_VAR 0 10
39415: PUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 250
39425: ST_TO_ADDR
// y := GetY ( tower ) ;
39426: LD_ADDR_VAR 0 11
39430: PUSH
39431: LD_VAR 0 1
39435: PPUSH
39436: CALL_OW 251
39440: ST_TO_ADDR
// if not x or not y then
39441: LD_VAR 0 10
39445: NOT
39446: IFTRUE 39455
39448: PUSH
39449: LD_VAR 0 11
39453: NOT
39454: OR
39455: IFFALSE 39459
// exit ;
39457: GO 40516
// weapon := 0 ;
39459: LD_ADDR_VAR 0 18
39463: PUSH
39464: LD_INT 0
39466: ST_TO_ADDR
// fac_list := [ ] ;
39467: LD_ADDR_VAR 0 17
39471: PUSH
39472: EMPTY
39473: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39474: LD_ADDR_VAR 0 6
39478: PUSH
39479: LD_VAR 0 1
39483: PPUSH
39484: CALL_OW 274
39488: PPUSH
39489: LD_VAR 0 2
39493: PPUSH
39494: LD_INT 0
39496: PPUSH
39497: CALL 37051 0 3
39501: PPUSH
39502: LD_INT 30
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PPUSH
39512: CALL_OW 72
39516: ST_TO_ADDR
// if not factories then
39517: LD_VAR 0 6
39521: NOT
39522: IFFALSE 39526
// exit ;
39524: GO 40516
// for i in factories do
39526: LD_ADDR_VAR 0 8
39530: PUSH
39531: LD_VAR 0 6
39535: PUSH
39536: FOR_IN
39537: IFFALSE 39562
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39539: LD_ADDR_VAR 0 17
39543: PUSH
39544: LD_VAR 0 17
39548: PUSH
39549: LD_VAR 0 8
39553: PPUSH
39554: CALL_OW 478
39558: UNION
39559: ST_TO_ADDR
39560: GO 39536
39562: POP
39563: POP
// if not fac_list then
39564: LD_VAR 0 17
39568: NOT
39569: IFFALSE 39573
// exit ;
39571: GO 40516
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39573: LD_ADDR_VAR 0 5
39577: PUSH
39578: LD_INT 4
39580: PUSH
39581: LD_INT 5
39583: PUSH
39584: LD_INT 9
39586: PUSH
39587: LD_INT 10
39589: PUSH
39590: LD_INT 6
39592: PUSH
39593: LD_INT 7
39595: PUSH
39596: LD_INT 11
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 27
39610: PUSH
39611: LD_INT 28
39613: PUSH
39614: LD_INT 26
39616: PUSH
39617: LD_INT 30
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 43
39628: PUSH
39629: LD_INT 44
39631: PUSH
39632: LD_INT 46
39634: PUSH
39635: LD_INT 45
39637: PUSH
39638: LD_INT 47
39640: PUSH
39641: LD_INT 49
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: PUSH
39657: LD_VAR 0 12
39661: ARRAY
39662: ST_TO_ADDR
// list := list isect fac_list ;
39663: LD_ADDR_VAR 0 5
39667: PUSH
39668: LD_VAR 0 5
39672: PUSH
39673: LD_VAR 0 17
39677: ISECT
39678: ST_TO_ADDR
// if not list then
39679: LD_VAR 0 5
39683: NOT
39684: IFFALSE 39688
// exit ;
39686: GO 40516
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39688: LD_VAR 0 12
39692: PUSH
39693: LD_INT 3
39695: EQUAL
39696: IFFALSE 39708
39698: PUSH
39699: LD_INT 49
39701: PUSH
39702: LD_VAR 0 5
39706: IN
39707: AND
39708: IFFALSE 39728
39710: PUSH
39711: LD_INT 31
39713: PPUSH
39714: LD_VAR 0 16
39718: PPUSH
39719: CALL_OW 321
39723: PUSH
39724: LD_INT 2
39726: EQUAL
39727: AND
39728: IFFALSE 39788
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39730: LD_INT 22
39732: PUSH
39733: LD_VAR 0 16
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 35
39744: PUSH
39745: LD_INT 49
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 91
39754: PUSH
39755: LD_VAR 0 1
39759: PUSH
39760: LD_INT 10
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: LIST
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: PPUSH
39773: CALL_OW 69
39777: NOT
39778: IFFALSE 39788
// weapon := ru_time_lapser ;
39780: LD_ADDR_VAR 0 18
39784: PUSH
39785: LD_INT 49
39787: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39788: LD_VAR 0 12
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: IN
39803: IFFALSE 39827
39805: PUSH
39806: LD_INT 11
39808: PUSH
39809: LD_VAR 0 5
39813: IN
39814: IFTRUE 39826
39816: PUSH
39817: LD_INT 30
39819: PUSH
39820: LD_VAR 0 5
39824: IN
39825: OR
39826: AND
39827: IFFALSE 39847
39829: PUSH
39830: LD_INT 6
39832: PPUSH
39833: LD_VAR 0 16
39837: PPUSH
39838: CALL_OW 321
39842: PUSH
39843: LD_INT 2
39845: EQUAL
39846: AND
39847: IFFALSE 40014
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39849: LD_INT 22
39851: PUSH
39852: LD_VAR 0 16
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: LD_INT 35
39866: PUSH
39867: LD_INT 11
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 35
39876: PUSH
39877: LD_INT 30
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 91
39891: PUSH
39892: LD_VAR 0 1
39896: PUSH
39897: LD_INT 18
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: PPUSH
39910: CALL_OW 69
39914: NOT
39915: IFFALSE 39991
39917: PUSH
39918: LD_INT 22
39920: PUSH
39921: LD_VAR 0 16
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: LD_INT 30
39935: PUSH
39936: LD_INT 32
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 30
39945: PUSH
39946: LD_INT 33
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 91
39960: PUSH
39961: LD_VAR 0 1
39965: PUSH
39966: LD_INT 12
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: PUSH
39979: EMPTY
39980: LIST
39981: PPUSH
39982: CALL_OW 69
39986: PUSH
39987: LD_INT 2
39989: GREATER
39990: AND
39991: IFFALSE 40014
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39993: LD_ADDR_VAR 0 18
39997: PUSH
39998: LD_INT 11
40000: PUSH
40001: LD_INT 30
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_VAR 0 12
40012: ARRAY
40013: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40014: LD_VAR 0 18
40018: NOT
40019: IFFALSE 40039
40021: PUSH
40022: LD_INT 40
40024: PPUSH
40025: LD_VAR 0 16
40029: PPUSH
40030: CALL_OW 321
40034: PUSH
40035: LD_INT 2
40037: EQUAL
40038: AND
40039: IFFALSE 40075
40041: PUSH
40042: LD_INT 7
40044: PUSH
40045: LD_VAR 0 5
40049: IN
40050: IFTRUE 40062
40052: PUSH
40053: LD_INT 28
40055: PUSH
40056: LD_VAR 0 5
40060: IN
40061: OR
40062: IFTRUE 40074
40064: PUSH
40065: LD_INT 45
40067: PUSH
40068: LD_VAR 0 5
40072: IN
40073: OR
40074: AND
40075: IFFALSE 40329
// begin hex := GetHexInfo ( x , y ) ;
40077: LD_ADDR_VAR 0 4
40081: PUSH
40082: LD_VAR 0 10
40086: PPUSH
40087: LD_VAR 0 11
40091: PPUSH
40092: CALL_OW 546
40096: ST_TO_ADDR
// if hex [ 1 ] then
40097: LD_VAR 0 4
40101: PUSH
40102: LD_INT 1
40104: ARRAY
40105: IFFALSE 40109
// exit ;
40107: GO 40516
// height := hex [ 2 ] ;
40109: LD_ADDR_VAR 0 15
40113: PUSH
40114: LD_VAR 0 4
40118: PUSH
40119: LD_INT 2
40121: ARRAY
40122: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40123: LD_ADDR_VAR 0 14
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: LD_INT 3
40136: PUSH
40137: LD_INT 5
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: ST_TO_ADDR
// for i in tmp do
40146: LD_ADDR_VAR 0 8
40150: PUSH
40151: LD_VAR 0 14
40155: PUSH
40156: FOR_IN
40157: IFFALSE 40327
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40159: LD_ADDR_VAR 0 9
40163: PUSH
40164: LD_VAR 0 10
40168: PPUSH
40169: LD_VAR 0 8
40173: PPUSH
40174: LD_INT 5
40176: PPUSH
40177: CALL_OW 272
40181: PUSH
40182: LD_VAR 0 11
40186: PPUSH
40187: LD_VAR 0 8
40191: PPUSH
40192: LD_INT 5
40194: PPUSH
40195: CALL_OW 273
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40204: LD_VAR 0 9
40208: PUSH
40209: LD_INT 1
40211: ARRAY
40212: PPUSH
40213: LD_VAR 0 9
40217: PUSH
40218: LD_INT 2
40220: ARRAY
40221: PPUSH
40222: CALL_OW 488
40226: IFFALSE 40325
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40228: LD_ADDR_VAR 0 4
40232: PUSH
40233: LD_VAR 0 9
40237: PUSH
40238: LD_INT 1
40240: ARRAY
40241: PPUSH
40242: LD_VAR 0 9
40246: PUSH
40247: LD_INT 2
40249: ARRAY
40250: PPUSH
40251: CALL_OW 546
40255: ST_TO_ADDR
// if hex [ 1 ] then
40256: LD_VAR 0 4
40260: PUSH
40261: LD_INT 1
40263: ARRAY
40264: IFFALSE 40268
// continue ;
40266: GO 40156
// h := hex [ 2 ] ;
40268: LD_ADDR_VAR 0 13
40272: PUSH
40273: LD_VAR 0 4
40277: PUSH
40278: LD_INT 2
40280: ARRAY
40281: ST_TO_ADDR
// if h + 7 < height then
40282: LD_VAR 0 13
40286: PUSH
40287: LD_INT 7
40289: PLUS
40290: PUSH
40291: LD_VAR 0 15
40295: LESS
40296: IFFALSE 40325
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40298: LD_ADDR_VAR 0 18
40302: PUSH
40303: LD_INT 7
40305: PUSH
40306: LD_INT 28
40308: PUSH
40309: LD_INT 45
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: LIST
40316: PUSH
40317: LD_VAR 0 12
40321: ARRAY
40322: ST_TO_ADDR
// break ;
40323: GO 40327
// end ; end ; end ;
40325: GO 40156
40327: POP
40328: POP
// end ; if not weapon then
40329: LD_VAR 0 18
40333: NOT
40334: IFFALSE 40394
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40336: LD_ADDR_VAR 0 5
40340: PUSH
40341: LD_VAR 0 5
40345: PUSH
40346: LD_INT 11
40348: PUSH
40349: LD_INT 30
40351: PUSH
40352: LD_INT 49
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: DIFF
40360: ST_TO_ADDR
// if not list then
40361: LD_VAR 0 5
40365: NOT
40366: IFFALSE 40370
// exit ;
40368: GO 40516
// weapon := list [ rand ( 1 , list ) ] ;
40370: LD_ADDR_VAR 0 18
40374: PUSH
40375: LD_VAR 0 5
40379: PUSH
40380: LD_INT 1
40382: PPUSH
40383: LD_VAR 0 5
40387: PPUSH
40388: CALL_OW 12
40392: ARRAY
40393: ST_TO_ADDR
// end ; if weapon then
40394: LD_VAR 0 18
40398: IFFALSE 40516
// begin tmp := CostOfWeapon ( weapon ) ;
40400: LD_ADDR_VAR 0 14
40404: PUSH
40405: LD_VAR 0 18
40409: PPUSH
40410: CALL_OW 451
40414: ST_TO_ADDR
// j := GetBase ( tower ) ;
40415: LD_ADDR_VAR 0 9
40419: PUSH
40420: LD_VAR 0 1
40424: PPUSH
40425: CALL_OW 274
40429: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40430: LD_VAR 0 9
40434: PPUSH
40435: LD_INT 1
40437: PPUSH
40438: CALL_OW 275
40442: PUSH
40443: LD_VAR 0 14
40447: PUSH
40448: LD_INT 1
40450: ARRAY
40451: GREATEREQUAL
40452: IFFALSE 40478
40454: PUSH
40455: LD_VAR 0 9
40459: PPUSH
40460: LD_INT 2
40462: PPUSH
40463: CALL_OW 275
40467: PUSH
40468: LD_VAR 0 14
40472: PUSH
40473: LD_INT 2
40475: ARRAY
40476: GREATEREQUAL
40477: AND
40478: IFFALSE 40504
40480: PUSH
40481: LD_VAR 0 9
40485: PPUSH
40486: LD_INT 3
40488: PPUSH
40489: CALL_OW 275
40493: PUSH
40494: LD_VAR 0 14
40498: PUSH
40499: LD_INT 3
40501: ARRAY
40502: GREATEREQUAL
40503: AND
40504: IFFALSE 40516
// result := weapon ;
40506: LD_ADDR_VAR 0 3
40510: PUSH
40511: LD_VAR 0 18
40515: ST_TO_ADDR
// end ; end ;
40516: LD_VAR 0 3
40520: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40521: LD_INT 0
40523: PPUSH
40524: PPUSH
// result := true ;
40525: LD_ADDR_VAR 0 3
40529: PUSH
40530: LD_INT 1
40532: ST_TO_ADDR
// if array1 = array2 then
40533: LD_VAR 0 1
40537: PUSH
40538: LD_VAR 0 2
40542: EQUAL
40543: IFFALSE 40603
// begin for i = 1 to array1 do
40545: LD_ADDR_VAR 0 4
40549: PUSH
40550: DOUBLE
40551: LD_INT 1
40553: DEC
40554: ST_TO_ADDR
40555: LD_VAR 0 1
40559: PUSH
40560: FOR_TO
40561: IFFALSE 40599
// if array1 [ i ] <> array2 [ i ] then
40563: LD_VAR 0 1
40567: PUSH
40568: LD_VAR 0 4
40572: ARRAY
40573: PUSH
40574: LD_VAR 0 2
40578: PUSH
40579: LD_VAR 0 4
40583: ARRAY
40584: NONEQUAL
40585: IFFALSE 40597
// begin result := false ;
40587: LD_ADDR_VAR 0 3
40591: PUSH
40592: LD_INT 0
40594: ST_TO_ADDR
// break ;
40595: GO 40599
// end ;
40597: GO 40560
40599: POP
40600: POP
// end else
40601: GO 40611
// result := false ;
40603: LD_ADDR_VAR 0 3
40607: PUSH
40608: LD_INT 0
40610: ST_TO_ADDR
// end ;
40611: LD_VAR 0 3
40615: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40616: LD_INT 0
40618: PPUSH
40619: PPUSH
// if not array1 or not array2 then
40620: LD_VAR 0 1
40624: NOT
40625: IFTRUE 40634
40627: PUSH
40628: LD_VAR 0 2
40632: NOT
40633: OR
40634: IFFALSE 40638
// exit ;
40636: GO 40702
// result := true ;
40638: LD_ADDR_VAR 0 3
40642: PUSH
40643: LD_INT 1
40645: ST_TO_ADDR
// for i = 1 to array1 do
40646: LD_ADDR_VAR 0 4
40650: PUSH
40651: DOUBLE
40652: LD_INT 1
40654: DEC
40655: ST_TO_ADDR
40656: LD_VAR 0 1
40660: PUSH
40661: FOR_TO
40662: IFFALSE 40700
// if array1 [ i ] <> array2 [ i ] then
40664: LD_VAR 0 1
40668: PUSH
40669: LD_VAR 0 4
40673: ARRAY
40674: PUSH
40675: LD_VAR 0 2
40679: PUSH
40680: LD_VAR 0 4
40684: ARRAY
40685: NONEQUAL
40686: IFFALSE 40698
// begin result := false ;
40688: LD_ADDR_VAR 0 3
40692: PUSH
40693: LD_INT 0
40695: ST_TO_ADDR
// break ;
40696: GO 40700
// end ;
40698: GO 40661
40700: POP
40701: POP
// end ;
40702: LD_VAR 0 3
40706: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40707: LD_INT 0
40709: PPUSH
40710: PPUSH
40711: PPUSH
// pom := GetBase ( fac ) ;
40712: LD_ADDR_VAR 0 5
40716: PUSH
40717: LD_VAR 0 1
40721: PPUSH
40722: CALL_OW 274
40726: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40727: LD_ADDR_VAR 0 4
40731: PUSH
40732: LD_VAR 0 2
40736: PUSH
40737: LD_INT 1
40739: ARRAY
40740: PPUSH
40741: LD_VAR 0 2
40745: PUSH
40746: LD_INT 2
40748: ARRAY
40749: PPUSH
40750: LD_VAR 0 2
40754: PUSH
40755: LD_INT 3
40757: ARRAY
40758: PPUSH
40759: LD_VAR 0 2
40763: PUSH
40764: LD_INT 4
40766: ARRAY
40767: PPUSH
40768: CALL_OW 449
40772: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40773: LD_ADDR_VAR 0 3
40777: PUSH
40778: LD_VAR 0 5
40782: PPUSH
40783: LD_INT 1
40785: PPUSH
40786: CALL_OW 275
40790: PUSH
40791: LD_VAR 0 4
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: GREATEREQUAL
40800: IFFALSE 40826
40802: PUSH
40803: LD_VAR 0 5
40807: PPUSH
40808: LD_INT 2
40810: PPUSH
40811: CALL_OW 275
40815: PUSH
40816: LD_VAR 0 4
40820: PUSH
40821: LD_INT 2
40823: ARRAY
40824: GREATEREQUAL
40825: AND
40826: IFFALSE 40852
40828: PUSH
40829: LD_VAR 0 5
40833: PPUSH
40834: LD_INT 3
40836: PPUSH
40837: CALL_OW 275
40841: PUSH
40842: LD_VAR 0 4
40846: PUSH
40847: LD_INT 3
40849: ARRAY
40850: GREATEREQUAL
40851: AND
40852: ST_TO_ADDR
// end ;
40853: LD_VAR 0 3
40857: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40858: LD_INT 0
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
// pom := GetBase ( building ) ;
40864: LD_ADDR_VAR 0 3
40868: PUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: CALL_OW 274
40878: ST_TO_ADDR
// if not pom then
40879: LD_VAR 0 3
40883: NOT
40884: IFFALSE 40888
// exit ;
40886: GO 41062
// btype := GetBType ( building ) ;
40888: LD_ADDR_VAR 0 5
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 266
40902: ST_TO_ADDR
// if btype = b_armoury then
40903: LD_VAR 0 5
40907: PUSH
40908: LD_INT 4
40910: EQUAL
40911: IFFALSE 40921
// btype := b_barracks ;
40913: LD_ADDR_VAR 0 5
40917: PUSH
40918: LD_INT 5
40920: ST_TO_ADDR
// if btype = b_depot then
40921: LD_VAR 0 5
40925: PUSH
40926: LD_INT 0
40928: EQUAL
40929: IFFALSE 40939
// btype := b_warehouse ;
40931: LD_ADDR_VAR 0 5
40935: PUSH
40936: LD_INT 1
40938: ST_TO_ADDR
// if btype = b_workshop then
40939: LD_VAR 0 5
40943: PUSH
40944: LD_INT 2
40946: EQUAL
40947: IFFALSE 40957
// btype := b_factory ;
40949: LD_ADDR_VAR 0 5
40953: PUSH
40954: LD_INT 3
40956: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40957: LD_ADDR_VAR 0 4
40961: PUSH
40962: LD_VAR 0 5
40966: PPUSH
40967: LD_VAR 0 1
40971: PPUSH
40972: CALL_OW 248
40976: PPUSH
40977: CALL_OW 450
40981: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40982: LD_ADDR_VAR 0 2
40986: PUSH
40987: LD_VAR 0 3
40991: PPUSH
40992: LD_INT 1
40994: PPUSH
40995: CALL_OW 275
40999: PUSH
41000: LD_VAR 0 4
41004: PUSH
41005: LD_INT 1
41007: ARRAY
41008: GREATEREQUAL
41009: IFFALSE 41035
41011: PUSH
41012: LD_VAR 0 3
41016: PPUSH
41017: LD_INT 2
41019: PPUSH
41020: CALL_OW 275
41024: PUSH
41025: LD_VAR 0 4
41029: PUSH
41030: LD_INT 2
41032: ARRAY
41033: GREATEREQUAL
41034: AND
41035: IFFALSE 41061
41037: PUSH
41038: LD_VAR 0 3
41042: PPUSH
41043: LD_INT 3
41045: PPUSH
41046: CALL_OW 275
41050: PUSH
41051: LD_VAR 0 4
41055: PUSH
41056: LD_INT 3
41058: ARRAY
41059: GREATEREQUAL
41060: AND
41061: ST_TO_ADDR
// end ;
41062: LD_VAR 0 2
41066: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41067: LD_INT 0
41069: PPUSH
41070: PPUSH
41071: PPUSH
// pom := GetBase ( building ) ;
41072: LD_ADDR_VAR 0 4
41076: PUSH
41077: LD_VAR 0 1
41081: PPUSH
41082: CALL_OW 274
41086: ST_TO_ADDR
// if not pom then
41087: LD_VAR 0 4
41091: NOT
41092: IFFALSE 41096
// exit ;
41094: GO 41201
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41096: LD_ADDR_VAR 0 5
41100: PUSH
41101: LD_VAR 0 2
41105: PPUSH
41106: LD_VAR 0 1
41110: PPUSH
41111: CALL_OW 248
41115: PPUSH
41116: CALL_OW 450
41120: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41121: LD_ADDR_VAR 0 3
41125: PUSH
41126: LD_VAR 0 4
41130: PPUSH
41131: LD_INT 1
41133: PPUSH
41134: CALL_OW 275
41138: PUSH
41139: LD_VAR 0 5
41143: PUSH
41144: LD_INT 1
41146: ARRAY
41147: GREATEREQUAL
41148: IFFALSE 41174
41150: PUSH
41151: LD_VAR 0 4
41155: PPUSH
41156: LD_INT 2
41158: PPUSH
41159: CALL_OW 275
41163: PUSH
41164: LD_VAR 0 5
41168: PUSH
41169: LD_INT 2
41171: ARRAY
41172: GREATEREQUAL
41173: AND
41174: IFFALSE 41200
41176: PUSH
41177: LD_VAR 0 4
41181: PPUSH
41182: LD_INT 3
41184: PPUSH
41185: CALL_OW 275
41189: PUSH
41190: LD_VAR 0 5
41194: PUSH
41195: LD_INT 3
41197: ARRAY
41198: GREATEREQUAL
41199: AND
41200: ST_TO_ADDR
// end ;
41201: LD_VAR 0 3
41205: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41206: LD_INT 0
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
// result := false ;
41219: LD_ADDR_VAR 0 8
41223: PUSH
41224: LD_INT 0
41226: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41227: LD_VAR 0 5
41231: NOT
41232: IFTRUE 41241
41234: PUSH
41235: LD_VAR 0 1
41239: NOT
41240: OR
41241: IFTRUE 41250
41243: PUSH
41244: LD_VAR 0 2
41248: NOT
41249: OR
41250: IFTRUE 41259
41252: PUSH
41253: LD_VAR 0 3
41257: NOT
41258: OR
41259: IFFALSE 41263
// exit ;
41261: GO 42089
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41263: LD_ADDR_VAR 0 14
41267: PUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: LD_VAR 0 2
41277: PPUSH
41278: LD_VAR 0 3
41282: PPUSH
41283: LD_VAR 0 4
41287: PPUSH
41288: LD_VAR 0 5
41292: PUSH
41293: LD_INT 1
41295: ARRAY
41296: PPUSH
41297: CALL_OW 248
41301: PPUSH
41302: LD_INT 0
41304: PPUSH
41305: CALL 43370 0 6
41309: ST_TO_ADDR
// if not hexes then
41310: LD_VAR 0 14
41314: NOT
41315: IFFALSE 41319
// exit ;
41317: GO 42089
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41319: LD_ADDR_VAR 0 17
41323: PUSH
41324: LD_VAR 0 5
41328: PPUSH
41329: LD_INT 22
41331: PUSH
41332: LD_VAR 0 13
41336: PPUSH
41337: CALL_OW 255
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 30
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 30
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PPUSH
41378: CALL_OW 72
41382: ST_TO_ADDR
// for i = 1 to hexes do
41383: LD_ADDR_VAR 0 9
41387: PUSH
41388: DOUBLE
41389: LD_INT 1
41391: DEC
41392: ST_TO_ADDR
41393: LD_VAR 0 14
41397: PUSH
41398: FOR_TO
41399: IFFALSE 42087
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41401: LD_ADDR_VAR 0 13
41405: PUSH
41406: LD_VAR 0 14
41410: PUSH
41411: LD_VAR 0 9
41415: ARRAY
41416: PUSH
41417: LD_INT 1
41419: ARRAY
41420: PPUSH
41421: LD_VAR 0 14
41425: PUSH
41426: LD_VAR 0 9
41430: ARRAY
41431: PUSH
41432: LD_INT 2
41434: ARRAY
41435: PPUSH
41436: CALL_OW 428
41440: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41441: LD_VAR 0 14
41445: PUSH
41446: LD_VAR 0 9
41450: ARRAY
41451: PUSH
41452: LD_INT 1
41454: ARRAY
41455: PPUSH
41456: LD_VAR 0 14
41460: PUSH
41461: LD_VAR 0 9
41465: ARRAY
41466: PUSH
41467: LD_INT 2
41469: ARRAY
41470: PPUSH
41471: CALL_OW 351
41475: IFTRUE 41514
41477: PUSH
41478: LD_VAR 0 14
41482: PUSH
41483: LD_VAR 0 9
41487: ARRAY
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PPUSH
41493: LD_VAR 0 14
41497: PUSH
41498: LD_VAR 0 9
41502: ARRAY
41503: PUSH
41504: LD_INT 2
41506: ARRAY
41507: PPUSH
41508: CALL_OW 488
41512: NOT
41513: OR
41514: IFTRUE 41531
41516: PUSH
41517: LD_VAR 0 13
41521: PPUSH
41522: CALL_OW 247
41526: PUSH
41527: LD_INT 3
41529: EQUAL
41530: OR
41531: IFFALSE 41537
// exit ;
41533: POP
41534: POP
41535: GO 42089
// if not tmp then
41537: LD_VAR 0 13
41541: NOT
41542: IFFALSE 41546
// continue ;
41544: GO 41398
// result := true ;
41546: LD_ADDR_VAR 0 8
41550: PUSH
41551: LD_INT 1
41553: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41554: LD_VAR 0 6
41558: IFFALSE 41575
41560: PUSH
41561: LD_VAR 0 13
41565: PPUSH
41566: CALL_OW 247
41570: PUSH
41571: LD_INT 2
41573: EQUAL
41574: AND
41575: IFFALSE 41592
41577: PUSH
41578: LD_VAR 0 13
41582: PPUSH
41583: CALL_OW 263
41587: PUSH
41588: LD_INT 1
41590: EQUAL
41591: AND
41592: IFFALSE 41756
// begin if IsDrivenBy ( tmp ) then
41594: LD_VAR 0 13
41598: PPUSH
41599: CALL_OW 311
41603: IFFALSE 41607
// continue ;
41605: GO 41398
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41607: LD_VAR 0 6
41611: PPUSH
41612: LD_INT 3
41614: PUSH
41615: LD_INT 60
41617: PUSH
41618: EMPTY
41619: LIST
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: PUSH
41628: LD_INT 55
41630: PUSH
41631: EMPTY
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PPUSH
41642: CALL_OW 72
41646: IFFALSE 41754
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41648: LD_ADDR_VAR 0 18
41652: PUSH
41653: LD_VAR 0 6
41657: PPUSH
41658: LD_INT 3
41660: PUSH
41661: LD_INT 60
41663: PUSH
41664: EMPTY
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 3
41673: PUSH
41674: LD_INT 55
41676: PUSH
41677: EMPTY
41678: LIST
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PPUSH
41688: CALL_OW 72
41692: PUSH
41693: LD_INT 1
41695: ARRAY
41696: ST_TO_ADDR
// if IsInUnit ( driver ) then
41697: LD_VAR 0 18
41701: PPUSH
41702: CALL_OW 310
41706: IFFALSE 41717
// ComExit ( driver ) ;
41708: LD_VAR 0 18
41712: PPUSH
41713: CALL 67360 0 1
// AddComEnterUnit ( driver , tmp ) ;
41717: LD_VAR 0 18
41721: PPUSH
41722: LD_VAR 0 13
41726: PPUSH
41727: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41731: LD_VAR 0 18
41735: PPUSH
41736: LD_VAR 0 7
41740: PPUSH
41741: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41745: LD_VAR 0 18
41749: PPUSH
41750: CALL_OW 181
// end ; continue ;
41754: GO 41398
// end ; if not cleaners or not tmp in cleaners then
41756: LD_VAR 0 6
41760: NOT
41761: IFTRUE 41776
41763: PUSH
41764: LD_VAR 0 13
41768: PUSH
41769: LD_VAR 0 6
41773: IN
41774: NOT
41775: OR
41776: IFFALSE 42085
// begin if dep then
41778: LD_VAR 0 17
41782: IFFALSE 41918
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41784: LD_ADDR_VAR 0 16
41788: PUSH
41789: LD_VAR 0 17
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: PPUSH
41798: CALL_OW 250
41802: PPUSH
41803: LD_VAR 0 17
41807: PUSH
41808: LD_INT 1
41810: ARRAY
41811: PPUSH
41812: CALL_OW 254
41816: PPUSH
41817: LD_INT 5
41819: PPUSH
41820: CALL_OW 272
41824: PUSH
41825: LD_VAR 0 17
41829: PUSH
41830: LD_INT 1
41832: ARRAY
41833: PPUSH
41834: CALL_OW 251
41838: PPUSH
41839: LD_VAR 0 17
41843: PUSH
41844: LD_INT 1
41846: ARRAY
41847: PPUSH
41848: CALL_OW 254
41852: PPUSH
41853: LD_INT 5
41855: PPUSH
41856: CALL_OW 273
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41865: LD_VAR 0 16
41869: PUSH
41870: LD_INT 1
41872: ARRAY
41873: PPUSH
41874: LD_VAR 0 16
41878: PUSH
41879: LD_INT 2
41881: ARRAY
41882: PPUSH
41883: CALL_OW 488
41887: IFFALSE 41918
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41889: LD_VAR 0 13
41893: PPUSH
41894: LD_VAR 0 16
41898: PUSH
41899: LD_INT 1
41901: ARRAY
41902: PPUSH
41903: LD_VAR 0 16
41907: PUSH
41908: LD_INT 2
41910: ARRAY
41911: PPUSH
41912: CALL_OW 111
// continue ;
41916: GO 41398
// end ; end ; r := GetDir ( tmp ) ;
41918: LD_ADDR_VAR 0 15
41922: PUSH
41923: LD_VAR 0 13
41927: PPUSH
41928: CALL_OW 254
41932: ST_TO_ADDR
// if r = 5 then
41933: LD_VAR 0 15
41937: PUSH
41938: LD_INT 5
41940: EQUAL
41941: IFFALSE 41951
// r := 0 ;
41943: LD_ADDR_VAR 0 15
41947: PUSH
41948: LD_INT 0
41950: ST_TO_ADDR
// for j = r to 5 do
41951: LD_ADDR_VAR 0 10
41955: PUSH
41956: DOUBLE
41957: LD_VAR 0 15
41961: DEC
41962: ST_TO_ADDR
41963: LD_INT 5
41965: PUSH
41966: FOR_TO
41967: IFFALSE 42083
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41969: LD_ADDR_VAR 0 11
41973: PUSH
41974: LD_VAR 0 13
41978: PPUSH
41979: CALL_OW 250
41983: PPUSH
41984: LD_VAR 0 10
41988: PPUSH
41989: LD_INT 2
41991: PPUSH
41992: CALL_OW 272
41996: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41997: LD_ADDR_VAR 0 12
42001: PUSH
42002: LD_VAR 0 13
42006: PPUSH
42007: CALL_OW 251
42011: PPUSH
42012: LD_VAR 0 10
42016: PPUSH
42017: LD_INT 2
42019: PPUSH
42020: CALL_OW 273
42024: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42025: LD_VAR 0 11
42029: PPUSH
42030: LD_VAR 0 12
42034: PPUSH
42035: CALL_OW 488
42039: IFFALSE 42058
42041: PUSH
42042: LD_VAR 0 11
42046: PPUSH
42047: LD_VAR 0 12
42051: PPUSH
42052: CALL_OW 428
42056: NOT
42057: AND
42058: IFFALSE 42081
// begin ComMoveXY ( tmp , _x , _y ) ;
42060: LD_VAR 0 13
42064: PPUSH
42065: LD_VAR 0 11
42069: PPUSH
42070: LD_VAR 0 12
42074: PPUSH
42075: CALL_OW 111
// break ;
42079: GO 42083
// end ; end ;
42081: GO 41966
42083: POP
42084: POP
// end ; end ;
42085: GO 41398
42087: POP
42088: POP
// end ;
42089: LD_VAR 0 8
42093: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42094: LD_INT 0
42096: PPUSH
// result := true ;
42097: LD_ADDR_VAR 0 3
42101: PUSH
42102: LD_INT 1
42104: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42105: LD_VAR 0 2
42109: PUSH
42110: LD_INT 24
42112: DOUBLE
42113: EQUAL
42114: IFTRUE 42124
42116: LD_INT 33
42118: DOUBLE
42119: EQUAL
42120: IFTRUE 42124
42122: GO 42149
42124: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42125: LD_ADDR_VAR 0 3
42129: PUSH
42130: LD_INT 32
42132: PPUSH
42133: LD_VAR 0 1
42137: PPUSH
42138: CALL_OW 321
42142: PUSH
42143: LD_INT 2
42145: EQUAL
42146: ST_TO_ADDR
42147: GO 42465
42149: LD_INT 20
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 42182
42157: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42158: LD_ADDR_VAR 0 3
42162: PUSH
42163: LD_INT 6
42165: PPUSH
42166: LD_VAR 0 1
42170: PPUSH
42171: CALL_OW 321
42175: PUSH
42176: LD_INT 2
42178: EQUAL
42179: ST_TO_ADDR
42180: GO 42465
42182: LD_INT 22
42184: DOUBLE
42185: EQUAL
42186: IFTRUE 42196
42188: LD_INT 36
42190: DOUBLE
42191: EQUAL
42192: IFTRUE 42196
42194: GO 42221
42196: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42197: LD_ADDR_VAR 0 3
42201: PUSH
42202: LD_INT 15
42204: PPUSH
42205: LD_VAR 0 1
42209: PPUSH
42210: CALL_OW 321
42214: PUSH
42215: LD_INT 2
42217: EQUAL
42218: ST_TO_ADDR
42219: GO 42465
42221: LD_INT 30
42223: DOUBLE
42224: EQUAL
42225: IFTRUE 42229
42227: GO 42254
42229: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42230: LD_ADDR_VAR 0 3
42234: PUSH
42235: LD_INT 20
42237: PPUSH
42238: LD_VAR 0 1
42242: PPUSH
42243: CALL_OW 321
42247: PUSH
42248: LD_INT 2
42250: EQUAL
42251: ST_TO_ADDR
42252: GO 42465
42254: LD_INT 28
42256: DOUBLE
42257: EQUAL
42258: IFTRUE 42268
42260: LD_INT 21
42262: DOUBLE
42263: EQUAL
42264: IFTRUE 42268
42266: GO 42293
42268: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42269: LD_ADDR_VAR 0 3
42273: PUSH
42274: LD_INT 21
42276: PPUSH
42277: LD_VAR 0 1
42281: PPUSH
42282: CALL_OW 321
42286: PUSH
42287: LD_INT 2
42289: EQUAL
42290: ST_TO_ADDR
42291: GO 42465
42293: LD_INT 16
42295: DOUBLE
42296: EQUAL
42297: IFTRUE 42301
42299: GO 42326
42301: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42302: LD_ADDR_VAR 0 3
42306: PUSH
42307: LD_INT 84
42309: PPUSH
42310: LD_VAR 0 1
42314: PPUSH
42315: CALL_OW 321
42319: PUSH
42320: LD_INT 2
42322: EQUAL
42323: ST_TO_ADDR
42324: GO 42465
42326: LD_INT 19
42328: DOUBLE
42329: EQUAL
42330: IFTRUE 42340
42332: LD_INT 23
42334: DOUBLE
42335: EQUAL
42336: IFTRUE 42340
42338: GO 42365
42340: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42341: LD_ADDR_VAR 0 3
42345: PUSH
42346: LD_INT 83
42348: PPUSH
42349: LD_VAR 0 1
42353: PPUSH
42354: CALL_OW 321
42358: PUSH
42359: LD_INT 2
42361: EQUAL
42362: ST_TO_ADDR
42363: GO 42465
42365: LD_INT 17
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42398
42373: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_INT 39
42381: PPUSH
42382: LD_VAR 0 1
42386: PPUSH
42387: CALL_OW 321
42391: PUSH
42392: LD_INT 2
42394: EQUAL
42395: ST_TO_ADDR
42396: GO 42465
42398: LD_INT 18
42400: DOUBLE
42401: EQUAL
42402: IFTRUE 42406
42404: GO 42431
42406: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42407: LD_ADDR_VAR 0 3
42411: PUSH
42412: LD_INT 40
42414: PPUSH
42415: LD_VAR 0 1
42419: PPUSH
42420: CALL_OW 321
42424: PUSH
42425: LD_INT 2
42427: EQUAL
42428: ST_TO_ADDR
42429: GO 42465
42431: LD_INT 27
42433: DOUBLE
42434: EQUAL
42435: IFTRUE 42439
42437: GO 42464
42439: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_INT 35
42447: PPUSH
42448: LD_VAR 0 1
42452: PPUSH
42453: CALL_OW 321
42457: PUSH
42458: LD_INT 2
42460: EQUAL
42461: ST_TO_ADDR
42462: GO 42465
42464: POP
// end ;
42465: LD_VAR 0 3
42469: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42470: LD_INT 0
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
// result := false ;
42483: LD_ADDR_VAR 0 6
42487: PUSH
42488: LD_INT 0
42490: ST_TO_ADDR
// if btype = b_depot then
42491: LD_VAR 0 2
42495: PUSH
42496: LD_INT 0
42498: EQUAL
42499: IFFALSE 42511
// begin result := true ;
42501: LD_ADDR_VAR 0 6
42505: PUSH
42506: LD_INT 1
42508: ST_TO_ADDR
// exit ;
42509: GO 43365
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42511: LD_VAR 0 1
42515: NOT
42516: IFTRUE 42541
42518: PUSH
42519: LD_VAR 0 1
42523: PPUSH
42524: CALL_OW 266
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: IN
42539: NOT
42540: OR
42541: IFTRUE 42550
42543: PUSH
42544: LD_VAR 0 2
42548: NOT
42549: OR
42550: IFTRUE 42586
42552: PUSH
42553: LD_VAR 0 5
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: LD_INT 3
42569: PUSH
42570: LD_INT 4
42572: PUSH
42573: LD_INT 5
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: IN
42584: NOT
42585: OR
42586: IFTRUE 42605
42588: PUSH
42589: LD_VAR 0 3
42593: PPUSH
42594: LD_VAR 0 4
42598: PPUSH
42599: CALL_OW 488
42603: NOT
42604: OR
42605: IFFALSE 42609
// exit ;
42607: GO 43365
// side := GetSide ( depot ) ;
42609: LD_ADDR_VAR 0 9
42613: PUSH
42614: LD_VAR 0 1
42618: PPUSH
42619: CALL_OW 255
42623: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42624: LD_VAR 0 9
42628: PPUSH
42629: LD_VAR 0 2
42633: PPUSH
42634: CALL 42094 0 2
42638: NOT
42639: IFFALSE 42643
// exit ;
42641: GO 43365
// pom := GetBase ( depot ) ;
42643: LD_ADDR_VAR 0 10
42647: PUSH
42648: LD_VAR 0 1
42652: PPUSH
42653: CALL_OW 274
42657: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42658: LD_ADDR_VAR 0 11
42662: PUSH
42663: LD_VAR 0 2
42667: PPUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 248
42677: PPUSH
42678: CALL_OW 450
42682: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42683: LD_VAR 0 10
42687: PPUSH
42688: LD_INT 1
42690: PPUSH
42691: CALL_OW 275
42695: PUSH
42696: LD_VAR 0 11
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: GREATEREQUAL
42705: IFFALSE 42731
42707: PUSH
42708: LD_VAR 0 10
42712: PPUSH
42713: LD_INT 2
42715: PPUSH
42716: CALL_OW 275
42720: PUSH
42721: LD_VAR 0 11
42725: PUSH
42726: LD_INT 2
42728: ARRAY
42729: GREATEREQUAL
42730: AND
42731: IFFALSE 42757
42733: PUSH
42734: LD_VAR 0 10
42738: PPUSH
42739: LD_INT 3
42741: PPUSH
42742: CALL_OW 275
42746: PUSH
42747: LD_VAR 0 11
42751: PUSH
42752: LD_INT 3
42754: ARRAY
42755: GREATEREQUAL
42756: AND
42757: NOT
42758: IFFALSE 42762
// exit ;
42760: GO 43365
// if GetBType ( depot ) = b_depot then
42762: LD_VAR 0 1
42766: PPUSH
42767: CALL_OW 266
42771: PUSH
42772: LD_INT 0
42774: EQUAL
42775: IFFALSE 42787
// dist := 28 else
42777: LD_ADDR_VAR 0 14
42781: PUSH
42782: LD_INT 28
42784: ST_TO_ADDR
42785: GO 42795
// dist := 36 ;
42787: LD_ADDR_VAR 0 14
42791: PUSH
42792: LD_INT 36
42794: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42795: LD_VAR 0 1
42799: PPUSH
42800: LD_VAR 0 3
42804: PPUSH
42805: LD_VAR 0 4
42809: PPUSH
42810: CALL_OW 297
42814: PUSH
42815: LD_VAR 0 14
42819: GREATER
42820: IFFALSE 42824
// exit ;
42822: GO 43365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42824: LD_ADDR_VAR 0 12
42828: PUSH
42829: LD_VAR 0 2
42833: PPUSH
42834: LD_VAR 0 3
42838: PPUSH
42839: LD_VAR 0 4
42843: PPUSH
42844: LD_VAR 0 5
42848: PPUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 248
42858: PPUSH
42859: LD_INT 0
42861: PPUSH
42862: CALL 43370 0 6
42866: ST_TO_ADDR
// if not hexes then
42867: LD_VAR 0 12
42871: NOT
42872: IFFALSE 42876
// exit ;
42874: GO 43365
// hex := GetHexInfo ( x , y ) ;
42876: LD_ADDR_VAR 0 15
42880: PUSH
42881: LD_VAR 0 3
42885: PPUSH
42886: LD_VAR 0 4
42890: PPUSH
42891: CALL_OW 546
42895: ST_TO_ADDR
// if hex [ 1 ] then
42896: LD_VAR 0 15
42900: PUSH
42901: LD_INT 1
42903: ARRAY
42904: IFFALSE 42908
// exit ;
42906: GO 43365
// height := hex [ 2 ] ;
42908: LD_ADDR_VAR 0 13
42912: PUSH
42913: LD_VAR 0 15
42917: PUSH
42918: LD_INT 2
42920: ARRAY
42921: ST_TO_ADDR
// for i = 1 to hexes do
42922: LD_ADDR_VAR 0 7
42926: PUSH
42927: DOUBLE
42928: LD_INT 1
42930: DEC
42931: ST_TO_ADDR
42932: LD_VAR 0 12
42936: PUSH
42937: FOR_TO
42938: IFFALSE 43282
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42940: LD_VAR 0 12
42944: PUSH
42945: LD_VAR 0 7
42949: ARRAY
42950: PUSH
42951: LD_INT 1
42953: ARRAY
42954: PPUSH
42955: LD_VAR 0 12
42959: PUSH
42960: LD_VAR 0 7
42964: ARRAY
42965: PUSH
42966: LD_INT 2
42968: ARRAY
42969: PPUSH
42970: CALL_OW 488
42974: NOT
42975: IFTRUE 43017
42977: PUSH
42978: LD_VAR 0 12
42982: PUSH
42983: LD_VAR 0 7
42987: ARRAY
42988: PUSH
42989: LD_INT 1
42991: ARRAY
42992: PPUSH
42993: LD_VAR 0 12
42997: PUSH
42998: LD_VAR 0 7
43002: ARRAY
43003: PUSH
43004: LD_INT 2
43006: ARRAY
43007: PPUSH
43008: CALL_OW 428
43012: PUSH
43013: LD_INT 0
43015: GREATER
43016: OR
43017: IFTRUE 43055
43019: PUSH
43020: LD_VAR 0 12
43024: PUSH
43025: LD_VAR 0 7
43029: ARRAY
43030: PUSH
43031: LD_INT 1
43033: ARRAY
43034: PPUSH
43035: LD_VAR 0 12
43039: PUSH
43040: LD_VAR 0 7
43044: ARRAY
43045: PUSH
43046: LD_INT 2
43048: ARRAY
43049: PPUSH
43050: CALL_OW 351
43054: OR
43055: IFFALSE 43061
// exit ;
43057: POP
43058: POP
43059: GO 43365
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43061: LD_ADDR_VAR 0 8
43065: PUSH
43066: LD_VAR 0 12
43070: PUSH
43071: LD_VAR 0 7
43075: ARRAY
43076: PUSH
43077: LD_INT 1
43079: ARRAY
43080: PPUSH
43081: LD_VAR 0 12
43085: PUSH
43086: LD_VAR 0 7
43090: ARRAY
43091: PUSH
43092: LD_INT 2
43094: ARRAY
43095: PPUSH
43096: CALL_OW 546
43100: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43101: LD_VAR 0 8
43105: PUSH
43106: LD_INT 1
43108: ARRAY
43109: IFTRUE 43131
43111: PUSH
43112: LD_VAR 0 8
43116: PUSH
43117: LD_INT 2
43119: ARRAY
43120: PUSH
43121: LD_VAR 0 13
43125: PUSH
43126: LD_INT 2
43128: PLUS
43129: GREATER
43130: OR
43131: IFTRUE 43153
43133: PUSH
43134: LD_VAR 0 8
43138: PUSH
43139: LD_INT 2
43141: ARRAY
43142: PUSH
43143: LD_VAR 0 13
43147: PUSH
43148: LD_INT 2
43150: MINUS
43151: LESS
43152: OR
43153: IFTRUE 43221
43155: PUSH
43156: LD_VAR 0 8
43160: PUSH
43161: LD_INT 3
43163: ARRAY
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 8
43170: PUSH
43171: LD_INT 9
43173: PUSH
43174: LD_INT 10
43176: PUSH
43177: LD_INT 11
43179: PUSH
43180: LD_INT 12
43182: PUSH
43183: LD_INT 13
43185: PUSH
43186: LD_INT 16
43188: PUSH
43189: LD_INT 17
43191: PUSH
43192: LD_INT 18
43194: PUSH
43195: LD_INT 19
43197: PUSH
43198: LD_INT 20
43200: PUSH
43201: LD_INT 21
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: IN
43219: NOT
43220: OR
43221: IFTRUE 43234
43223: PUSH
43224: LD_VAR 0 8
43228: PUSH
43229: LD_INT 5
43231: ARRAY
43232: NOT
43233: OR
43234: IFTRUE 43274
43236: PUSH
43237: LD_VAR 0 8
43241: PUSH
43242: LD_INT 6
43244: ARRAY
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 7
43254: PUSH
43255: LD_INT 9
43257: PUSH
43258: LD_INT 10
43260: PUSH
43261: LD_INT 11
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: IN
43272: NOT
43273: OR
43274: IFFALSE 43280
// exit ;
43276: POP
43277: POP
43278: GO 43365
// end ;
43280: GO 42937
43282: POP
43283: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43284: LD_VAR 0 9
43288: PPUSH
43289: LD_VAR 0 3
43293: PPUSH
43294: LD_VAR 0 4
43298: PPUSH
43299: LD_INT 20
43301: PPUSH
43302: CALL 35184 0 4
43306: PUSH
43307: LD_INT 4
43309: ARRAY
43310: IFFALSE 43314
// exit ;
43312: GO 43365
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43314: LD_VAR 0 2
43318: PUSH
43319: LD_INT 29
43321: PUSH
43322: LD_INT 30
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: IN
43329: IFFALSE 43353
43331: PUSH
43332: LD_VAR 0 3
43336: PPUSH
43337: LD_VAR 0 4
43341: PPUSH
43342: LD_VAR 0 9
43346: PPUSH
43347: CALL_OW 440
43351: NOT
43352: AND
43353: IFFALSE 43357
// exit ;
43355: GO 43365
// result := true ;
43357: LD_ADDR_VAR 0 6
43361: PUSH
43362: LD_INT 1
43364: ST_TO_ADDR
// end ;
43365: LD_VAR 0 6
43369: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43370: LD_INT 0
43372: PPUSH
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
43402: PPUSH
43403: PPUSH
43404: PPUSH
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
43421: PPUSH
43422: PPUSH
43423: PPUSH
43424: PPUSH
43425: PPUSH
43426: PPUSH
43427: PPUSH
43428: PPUSH
43429: PPUSH
// result = [ ] ;
43430: LD_ADDR_VAR 0 7
43434: PUSH
43435: EMPTY
43436: ST_TO_ADDR
// temp_list = [ ] ;
43437: LD_ADDR_VAR 0 9
43441: PUSH
43442: EMPTY
43443: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43444: LD_VAR 0 4
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 3
43460: PUSH
43461: LD_INT 4
43463: PUSH
43464: LD_INT 5
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: IN
43475: NOT
43476: IFTRUE 43519
43478: PUSH
43479: LD_VAR 0 1
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: IN
43494: IFFALSE 43518
43496: PUSH
43497: LD_VAR 0 5
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: LIST
43515: IN
43516: NOT
43517: AND
43518: OR
43519: IFFALSE 43523
// exit ;
43521: GO 61922
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43523: LD_VAR 0 1
43527: PUSH
43528: LD_INT 6
43530: PUSH
43531: LD_INT 7
43533: PUSH
43534: LD_INT 8
43536: PUSH
43537: LD_INT 13
43539: PUSH
43540: LD_INT 12
43542: PUSH
43543: LD_INT 15
43545: PUSH
43546: LD_INT 11
43548: PUSH
43549: LD_INT 14
43551: PUSH
43552: LD_INT 10
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: IN
43566: IFFALSE 43576
// btype = b_lab ;
43568: LD_ADDR_VAR 0 1
43572: PUSH
43573: LD_INT 6
43575: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43576: LD_VAR 0 6
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: IN
43595: NOT
43596: IFTRUE 43664
43598: PUSH
43599: LD_VAR 0 1
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: LD_INT 6
43618: PUSH
43619: LD_INT 36
43621: PUSH
43622: LD_INT 4
43624: PUSH
43625: LD_INT 5
43627: PUSH
43628: LD_INT 31
43630: PUSH
43631: LD_INT 32
43633: PUSH
43634: LD_INT 33
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: IN
43650: NOT
43651: IFFALSE 43663
43653: PUSH
43654: LD_VAR 0 6
43658: PUSH
43659: LD_INT 1
43661: EQUAL
43662: AND
43663: OR
43664: IFTRUE 43696
43666: PUSH
43667: LD_VAR 0 1
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 3
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: IN
43682: NOT
43683: IFFALSE 43695
43685: PUSH
43686: LD_VAR 0 6
43690: PUSH
43691: LD_INT 2
43693: EQUAL
43694: AND
43695: OR
43696: IFFALSE 43706
// mode = 0 ;
43698: LD_ADDR_VAR 0 6
43702: PUSH
43703: LD_INT 0
43705: ST_TO_ADDR
// case mode of 0 :
43706: LD_VAR 0 6
43710: PUSH
43711: LD_INT 0
43713: DOUBLE
43714: EQUAL
43715: IFTRUE 43719
43717: GO 55172
43719: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43720: LD_ADDR_VAR 0 11
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 3
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43913: LD_ADDR_VAR 0 12
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 3
44070: NEG
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 3
44081: NEG
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44109: LD_ADDR_VAR 0 13
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: NEG
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 3
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 3
44268: NEG
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 3
44280: NEG
44281: PUSH
44282: LD_INT 3
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44308: LD_ADDR_VAR 0 14
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 2
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 3
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44504: LD_ADDR_VAR 0 15
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44697: LD_ADDR_VAR 0 16
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 3
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44890: LD_ADDR_VAR 0 17
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45120: LD_ADDR_VAR 0 18
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45350: LD_ADDR_VAR 0 19
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45580: LD_ADDR_VAR 0 20
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45810: LD_ADDR_VAR 0 21
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46040: LD_ADDR_VAR 0 22
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46270: LD_ADDR_VAR 0 23
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46550: LD_ADDR_VAR 0 24
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46826: LD_ADDR_VAR 0 25
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 3
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47100: LD_ADDR_VAR 0 26
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47376: LD_ADDR_VAR 0 27
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 3
47621: NEG
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47656: LD_ADDR_VAR 0 28
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: LD_INT 3
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: NEG
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47938: LD_ADDR_VAR 0 29
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: NEG
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48217: LD_ADDR_VAR 0 30
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 3
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 3
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 3
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48495: LD_ADDR_VAR 0 31
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 3
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: NEG
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48773: LD_ADDR_VAR 0 32
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 3
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 3
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 3
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49051: LD_ADDR_VAR 0 33
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: LD_INT 3
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: NEG
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49330: LD_ADDR_VAR 0 34
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 3
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49610: LD_ADDR_VAR 0 35
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49722: LD_ADDR_VAR 0 36
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49834: LD_ADDR_VAR 0 37
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49946: LD_ADDR_VAR 0 38
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50058: LD_ADDR_VAR 0 39
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50170: LD_ADDR_VAR 0 40
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50282: LD_ADDR_VAR 0 41
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: LD_INT 3
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 3
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 3
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 3
50579: NEG
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 3
50591: NEG
50592: PUSH
50593: LD_INT 3
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50632: LD_ADDR_VAR 0 42
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 3
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 3
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50982: LD_ADDR_VAR 0 43
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 3
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: LD_INT 3
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51330: LD_ADDR_VAR 0 44
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 3
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: NEG
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: LD_INT 3
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51680: LD_ADDR_VAR 0 45
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 3
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: PUSH
51927: LD_INT 3
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 3
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: NEG
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52030: LD_ADDR_VAR 0 46
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52378: LD_ADDR_VAR 0 47
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52529: LD_ADDR_VAR 0 48
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52676: LD_ADDR_VAR 0 49
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52820: LD_ADDR_VAR 0 50
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52964: LD_ADDR_VAR 0 51
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53111: LD_ADDR_VAR 0 52
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53262: LD_ADDR_VAR 0 53
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53492: LD_ADDR_VAR 0 54
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53722: LD_ADDR_VAR 0 55
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53952: LD_ADDR_VAR 0 56
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54182: LD_ADDR_VAR 0 57
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54412: LD_ADDR_VAR 0 58
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54642: LD_ADDR_VAR 0 59
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54730: LD_ADDR_VAR 0 60
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54818: LD_ADDR_VAR 0 61
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54906: LD_ADDR_VAR 0 62
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54994: LD_ADDR_VAR 0 63
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55082: LD_ADDR_VAR 0 64
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// end ; 1 :
55170: GO 61067
55172: LD_INT 1
55174: DOUBLE
55175: EQUAL
55176: IFTRUE 55180
55178: GO 57803
55180: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55181: LD_ADDR_VAR 0 11
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55225: LD_ADDR_VAR 0 12
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55266: LD_ADDR_VAR 0 13
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: LIST
55305: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55306: LD_ADDR_VAR 0 14
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: LIST
55346: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55347: LD_ADDR_VAR 0 15
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 3
55376: NEG
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: LIST
55390: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55391: LD_ADDR_VAR 0 16
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55437: LD_ADDR_VAR 0 17
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: LIST
55480: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55481: LD_ADDR_VAR 0 18
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 3
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55522: LD_ADDR_VAR 0 19
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55562: LD_ADDR_VAR 0 20
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55603: LD_ADDR_VAR 0 21
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55647: LD_ADDR_VAR 0 22
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: NEG
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55693: LD_ADDR_VAR 0 23
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 4
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 3
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55737: LD_ADDR_VAR 0 24
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 4
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55778: LD_ADDR_VAR 0 25
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: LD_INT 4
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55818: LD_ADDR_VAR 0 26
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 4
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55859: LD_ADDR_VAR 0 27
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 3
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 4
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55903: LD_ADDR_VAR 0 28
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: LD_INT 4
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 4
55934: NEG
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55949: LD_ADDR_VAR 0 29
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 3
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 4
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 4
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 5
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 5
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 4
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 6
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 6
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 5
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56104: LD_ADDR_VAR 0 30
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 4
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 4
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 4
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 5
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 5
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 6
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 6
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56247: LD_ADDR_VAR 0 31
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 4
56294: PUSH
56295: LD_INT 4
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 5
56314: PUSH
56315: LD_INT 4
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 5
56324: PUSH
56325: LD_INT 5
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 4
56334: PUSH
56335: LD_INT 5
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 6
56344: PUSH
56345: LD_INT 5
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 6
56354: PUSH
56355: LD_INT 6
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 5
56364: PUSH
56365: LD_INT 6
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56386: LD_ADDR_VAR 0 32
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 4
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 4
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 3
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 5
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 5
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 4
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 6
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 6
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 5
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56529: LD_ADDR_VAR 0 33
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 4
56581: NEG
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 4
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 5
56615: NEG
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 5
56626: NEG
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 5
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 6
56649: NEG
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 6
56660: NEG
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56684: LD_ADDR_VAR 0 34
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: LD_INT 4
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 4
56739: NEG
56740: PUSH
56741: LD_INT 3
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 4
56751: NEG
56752: PUSH
56753: LD_INT 4
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 4
56763: NEG
56764: PUSH
56765: LD_INT 5
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 5
56775: NEG
56776: PUSH
56777: LD_INT 4
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 5
56787: NEG
56788: PUSH
56789: LD_INT 5
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 5
56799: NEG
56800: PUSH
56801: LD_INT 6
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 6
56811: NEG
56812: PUSH
56813: LD_INT 5
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 6
56823: NEG
56824: PUSH
56825: LD_INT 6
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56847: LD_ADDR_VAR 0 41
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: LIST
56890: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56891: LD_ADDR_VAR 0 42
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56932: LD_ADDR_VAR 0 43
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56972: LD_ADDR_VAR 0 44
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57013: LD_ADDR_VAR 0 45
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57057: LD_ADDR_VAR 0 46
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57103: LD_ADDR_VAR 0 47
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57136: LD_ADDR_VAR 0 48
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57167: LD_ADDR_VAR 0 49
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57196: LD_ADDR_VAR 0 50
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57225: LD_ADDR_VAR 0 51
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57256: LD_ADDR_VAR 0 52
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 3
57275: NEG
57276: PUSH
57277: LD_INT 2
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57289: LD_ADDR_VAR 0 53
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57333: LD_ADDR_VAR 0 54
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57374: LD_ADDR_VAR 0 55
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57414: LD_ADDR_VAR 0 56
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57455: LD_ADDR_VAR 0 57
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 3
57473: NEG
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57499: LD_ADDR_VAR 0 58
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: LD_INT 3
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: NEG
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57545: LD_ADDR_VAR 0 59
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57589: LD_ADDR_VAR 0 60
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57630: LD_ADDR_VAR 0 61
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57670: LD_ADDR_VAR 0 62
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57711: LD_ADDR_VAR 0 63
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: LIST
57754: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57755: LD_ADDR_VAR 0 64
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// end ; 2 :
57801: GO 61067
57803: LD_INT 2
57805: DOUBLE
57806: EQUAL
57807: IFTRUE 57811
57809: GO 61066
57811: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57812: LD_ADDR_VAR 0 29
57816: PUSH
57817: LD_INT 4
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 4
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 5
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 5
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 4
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 5
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: LD_INT 3
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 4
57942: PUSH
57943: LD_INT 4
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: LD_INT 4
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 4
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 4
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 4
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 3
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 4
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 5
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 5
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 5
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 4
58151: NEG
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 4
58162: NEG
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 4
58174: NEG
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 4
58197: NEG
58198: PUSH
58199: LD_INT 4
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 4
58209: NEG
58210: PUSH
58211: LD_INT 5
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: NEG
58222: PUSH
58223: LD_INT 4
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 4
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 5
58257: NEG
58258: PUSH
58259: LD_INT 4
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 5
58269: NEG
58270: PUSH
58271: LD_INT 5
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 3
58281: NEG
58282: PUSH
58283: LD_INT 5
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 5
58293: NEG
58294: PUSH
58295: LD_INT 3
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58350: LD_ADDR_VAR 0 30
58354: PUSH
58355: LD_INT 4
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 4
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 5
58377: PUSH
58378: LD_INT 4
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 5
58387: PUSH
58388: LD_INT 5
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: LD_INT 5
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: LD_INT 4
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: LD_INT 3
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 5
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: LD_INT 5
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 3
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 4
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 4
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: LD_INT 4
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 2
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 4
58540: NEG
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 4
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 4
58585: NEG
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 5
58596: NEG
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 5
58607: NEG
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 5
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: LD_INT 3
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 3
58654: NEG
58655: PUSH
58656: LD_INT 4
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 3
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 4
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 4
58714: NEG
58715: PUSH
58716: LD_INT 4
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 4
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 4
58738: NEG
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 4
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 5
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 4
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 5
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 5
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58897: LD_ADDR_VAR 0 31
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 4
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 4
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: LD_INT 5
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 5
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 4
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 5
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 3
59042: NEG
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 4
59053: NEG
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 4
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 4
59076: NEG
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 4
59099: NEG
59100: PUSH
59101: LD_INT 4
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 4
59111: NEG
59112: PUSH
59113: LD_INT 5
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: LD_INT 4
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 3
59135: NEG
59136: PUSH
59137: LD_INT 3
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 4
59147: NEG
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 5
59159: NEG
59160: PUSH
59161: LD_INT 4
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 5
59171: NEG
59172: PUSH
59173: LD_INT 5
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: LD_INT 5
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 5
59195: NEG
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 3
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 4
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 3
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 3
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 4
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 4
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 4
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 5
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 5
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 4
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 3
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 5
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59447: LD_ADDR_VAR 0 32
59451: PUSH
59452: LD_INT 4
59454: NEG
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 4
59465: NEG
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 3
59477: NEG
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 4
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 5
59510: NEG
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 5
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 5
59533: NEG
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 3
59545: NEG
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: LD_INT 4
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: NEG
59605: PUSH
59606: LD_INT 2
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 4
59616: NEG
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 4
59628: NEG
59629: PUSH
59630: LD_INT 4
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: LD_INT 4
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 4
59652: NEG
59653: PUSH
59654: LD_INT 2
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 5
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 4
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 3
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 3
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 4
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 5
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: LD_INT 5
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 4
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: LD_INT 4
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 4
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 5
59879: PUSH
59880: LD_INT 4
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 5
59889: PUSH
59890: LD_INT 5
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 4
59899: PUSH
59900: LD_INT 5
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: LD_INT 4
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 5
59929: PUSH
59930: LD_INT 3
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: LD_INT 5
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59994: LD_ADDR_VAR 0 33
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: LD_INT 4
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: LD_INT 5
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: LD_INT 4
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: LD_INT 3
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 4
60049: NEG
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 5
60061: NEG
60062: PUSH
60063: LD_INT 4
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 5
60073: NEG
60074: PUSH
60075: LD_INT 5
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: LD_INT 5
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 5
60097: NEG
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 4
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 4
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: LD_INT 4
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 4
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 5
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 5
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 5
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 3
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 4
60334: PUSH
60335: LD_INT 4
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 3
60344: PUSH
60345: LD_INT 4
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 4
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: LD_INT 4
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: LD_INT 4
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 3
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 4
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 5
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 5
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 4
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: LD_INT 5
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60532: LD_ADDR_VAR 0 34
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 4
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 5
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 4
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 3
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 4
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 5
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: LD_INT 5
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 4
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 4
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 4
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: LD_INT 4
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: LD_INT 3
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 5
60754: PUSH
60755: LD_INT 4
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 5
60764: PUSH
60765: LD_INT 5
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 4
60774: PUSH
60775: LD_INT 5
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: LD_INT 4
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 5
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: LD_INT 5
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: LD_INT 3
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 4
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 4
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 3
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 4
60917: NEG
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 4
60928: NEG
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 3
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 4
60962: NEG
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 5
60973: NEG
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 5
60984: NEG
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 5
60996: NEG
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: ST_TO_ADDR
// end ; end ;
61064: GO 61067
61066: POP
// case btype of b_depot , b_warehouse :
61067: LD_VAR 0 1
61071: PUSH
61072: LD_INT 0
61074: DOUBLE
61075: EQUAL
61076: IFTRUE 61086
61078: LD_INT 1
61080: DOUBLE
61081: EQUAL
61082: IFTRUE 61086
61084: GO 61287
61086: POP
// case nation of nation_american :
61087: LD_VAR 0 5
61091: PUSH
61092: LD_INT 1
61094: DOUBLE
61095: EQUAL
61096: IFTRUE 61100
61098: GO 61156
61100: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61101: LD_ADDR_VAR 0 9
61105: PUSH
61106: LD_VAR 0 11
61110: PUSH
61111: LD_VAR 0 12
61115: PUSH
61116: LD_VAR 0 13
61120: PUSH
61121: LD_VAR 0 14
61125: PUSH
61126: LD_VAR 0 15
61130: PUSH
61131: LD_VAR 0 16
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: PUSH
61144: LD_VAR 0 4
61148: PUSH
61149: LD_INT 1
61151: PLUS
61152: ARRAY
61153: ST_TO_ADDR
61154: GO 61285
61156: LD_INT 2
61158: DOUBLE
61159: EQUAL
61160: IFTRUE 61164
61162: GO 61220
61164: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61165: LD_ADDR_VAR 0 9
61169: PUSH
61170: LD_VAR 0 17
61174: PUSH
61175: LD_VAR 0 18
61179: PUSH
61180: LD_VAR 0 19
61184: PUSH
61185: LD_VAR 0 20
61189: PUSH
61190: LD_VAR 0 21
61194: PUSH
61195: LD_VAR 0 22
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: PUSH
61208: LD_VAR 0 4
61212: PUSH
61213: LD_INT 1
61215: PLUS
61216: ARRAY
61217: ST_TO_ADDR
61218: GO 61285
61220: LD_INT 3
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61228
61226: GO 61284
61228: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61229: LD_ADDR_VAR 0 9
61233: PUSH
61234: LD_VAR 0 23
61238: PUSH
61239: LD_VAR 0 24
61243: PUSH
61244: LD_VAR 0 25
61248: PUSH
61249: LD_VAR 0 26
61253: PUSH
61254: LD_VAR 0 27
61258: PUSH
61259: LD_VAR 0 28
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: PUSH
61272: LD_VAR 0 4
61276: PUSH
61277: LD_INT 1
61279: PLUS
61280: ARRAY
61281: ST_TO_ADDR
61282: GO 61285
61284: POP
61285: GO 61840
61287: LD_INT 2
61289: DOUBLE
61290: EQUAL
61291: IFTRUE 61301
61293: LD_INT 3
61295: DOUBLE
61296: EQUAL
61297: IFTRUE 61301
61299: GO 61357
61301: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61302: LD_ADDR_VAR 0 9
61306: PUSH
61307: LD_VAR 0 29
61311: PUSH
61312: LD_VAR 0 30
61316: PUSH
61317: LD_VAR 0 31
61321: PUSH
61322: LD_VAR 0 32
61326: PUSH
61327: LD_VAR 0 33
61331: PUSH
61332: LD_VAR 0 34
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: PUSH
61345: LD_VAR 0 4
61349: PUSH
61350: LD_INT 1
61352: PLUS
61353: ARRAY
61354: ST_TO_ADDR
61355: GO 61840
61357: LD_INT 16
61359: DOUBLE
61360: EQUAL
61361: IFTRUE 61419
61363: LD_INT 17
61365: DOUBLE
61366: EQUAL
61367: IFTRUE 61419
61369: LD_INT 18
61371: DOUBLE
61372: EQUAL
61373: IFTRUE 61419
61375: LD_INT 19
61377: DOUBLE
61378: EQUAL
61379: IFTRUE 61419
61381: LD_INT 22
61383: DOUBLE
61384: EQUAL
61385: IFTRUE 61419
61387: LD_INT 20
61389: DOUBLE
61390: EQUAL
61391: IFTRUE 61419
61393: LD_INT 21
61395: DOUBLE
61396: EQUAL
61397: IFTRUE 61419
61399: LD_INT 23
61401: DOUBLE
61402: EQUAL
61403: IFTRUE 61419
61405: LD_INT 24
61407: DOUBLE
61408: EQUAL
61409: IFTRUE 61419
61411: LD_INT 25
61413: DOUBLE
61414: EQUAL
61415: IFTRUE 61419
61417: GO 61475
61419: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61420: LD_ADDR_VAR 0 9
61424: PUSH
61425: LD_VAR 0 35
61429: PUSH
61430: LD_VAR 0 36
61434: PUSH
61435: LD_VAR 0 37
61439: PUSH
61440: LD_VAR 0 38
61444: PUSH
61445: LD_VAR 0 39
61449: PUSH
61450: LD_VAR 0 40
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: PUSH
61463: LD_VAR 0 4
61467: PUSH
61468: LD_INT 1
61470: PLUS
61471: ARRAY
61472: ST_TO_ADDR
61473: GO 61840
61475: LD_INT 6
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61531
61481: LD_INT 7
61483: DOUBLE
61484: EQUAL
61485: IFTRUE 61531
61487: LD_INT 8
61489: DOUBLE
61490: EQUAL
61491: IFTRUE 61531
61493: LD_INT 13
61495: DOUBLE
61496: EQUAL
61497: IFTRUE 61531
61499: LD_INT 12
61501: DOUBLE
61502: EQUAL
61503: IFTRUE 61531
61505: LD_INT 15
61507: DOUBLE
61508: EQUAL
61509: IFTRUE 61531
61511: LD_INT 11
61513: DOUBLE
61514: EQUAL
61515: IFTRUE 61531
61517: LD_INT 14
61519: DOUBLE
61520: EQUAL
61521: IFTRUE 61531
61523: LD_INT 10
61525: DOUBLE
61526: EQUAL
61527: IFTRUE 61531
61529: GO 61587
61531: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61532: LD_ADDR_VAR 0 9
61536: PUSH
61537: LD_VAR 0 41
61541: PUSH
61542: LD_VAR 0 42
61546: PUSH
61547: LD_VAR 0 43
61551: PUSH
61552: LD_VAR 0 44
61556: PUSH
61557: LD_VAR 0 45
61561: PUSH
61562: LD_VAR 0 46
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: PUSH
61575: LD_VAR 0 4
61579: PUSH
61580: LD_INT 1
61582: PLUS
61583: ARRAY
61584: ST_TO_ADDR
61585: GO 61840
61587: LD_INT 36
61589: DOUBLE
61590: EQUAL
61591: IFTRUE 61595
61593: GO 61651
61595: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61596: LD_ADDR_VAR 0 9
61600: PUSH
61601: LD_VAR 0 47
61605: PUSH
61606: LD_VAR 0 48
61610: PUSH
61611: LD_VAR 0 49
61615: PUSH
61616: LD_VAR 0 50
61620: PUSH
61621: LD_VAR 0 51
61625: PUSH
61626: LD_VAR 0 52
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: PUSH
61639: LD_VAR 0 4
61643: PUSH
61644: LD_INT 1
61646: PLUS
61647: ARRAY
61648: ST_TO_ADDR
61649: GO 61840
61651: LD_INT 4
61653: DOUBLE
61654: EQUAL
61655: IFTRUE 61677
61657: LD_INT 5
61659: DOUBLE
61660: EQUAL
61661: IFTRUE 61677
61663: LD_INT 34
61665: DOUBLE
61666: EQUAL
61667: IFTRUE 61677
61669: LD_INT 37
61671: DOUBLE
61672: EQUAL
61673: IFTRUE 61677
61675: GO 61733
61677: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61678: LD_ADDR_VAR 0 9
61682: PUSH
61683: LD_VAR 0 53
61687: PUSH
61688: LD_VAR 0 54
61692: PUSH
61693: LD_VAR 0 55
61697: PUSH
61698: LD_VAR 0 56
61702: PUSH
61703: LD_VAR 0 57
61707: PUSH
61708: LD_VAR 0 58
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: PUSH
61721: LD_VAR 0 4
61725: PUSH
61726: LD_INT 1
61728: PLUS
61729: ARRAY
61730: ST_TO_ADDR
61731: GO 61840
61733: LD_INT 31
61735: DOUBLE
61736: EQUAL
61737: IFTRUE 61783
61739: LD_INT 32
61741: DOUBLE
61742: EQUAL
61743: IFTRUE 61783
61745: LD_INT 33
61747: DOUBLE
61748: EQUAL
61749: IFTRUE 61783
61751: LD_INT 27
61753: DOUBLE
61754: EQUAL
61755: IFTRUE 61783
61757: LD_INT 26
61759: DOUBLE
61760: EQUAL
61761: IFTRUE 61783
61763: LD_INT 28
61765: DOUBLE
61766: EQUAL
61767: IFTRUE 61783
61769: LD_INT 29
61771: DOUBLE
61772: EQUAL
61773: IFTRUE 61783
61775: LD_INT 30
61777: DOUBLE
61778: EQUAL
61779: IFTRUE 61783
61781: GO 61839
61783: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61784: LD_ADDR_VAR 0 9
61788: PUSH
61789: LD_VAR 0 59
61793: PUSH
61794: LD_VAR 0 60
61798: PUSH
61799: LD_VAR 0 61
61803: PUSH
61804: LD_VAR 0 62
61808: PUSH
61809: LD_VAR 0 63
61813: PUSH
61814: LD_VAR 0 64
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: PUSH
61827: LD_VAR 0 4
61831: PUSH
61832: LD_INT 1
61834: PLUS
61835: ARRAY
61836: ST_TO_ADDR
61837: GO 61840
61839: POP
// temp_list2 = [ ] ;
61840: LD_ADDR_VAR 0 10
61844: PUSH
61845: EMPTY
61846: ST_TO_ADDR
// for i in temp_list do
61847: LD_ADDR_VAR 0 8
61851: PUSH
61852: LD_VAR 0 9
61856: PUSH
61857: FOR_IN
61858: IFFALSE 61910
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61860: LD_ADDR_VAR 0 10
61864: PUSH
61865: LD_VAR 0 10
61869: PUSH
61870: LD_VAR 0 8
61874: PUSH
61875: LD_INT 1
61877: ARRAY
61878: PUSH
61879: LD_VAR 0 2
61883: PLUS
61884: PUSH
61885: LD_VAR 0 8
61889: PUSH
61890: LD_INT 2
61892: ARRAY
61893: PUSH
61894: LD_VAR 0 3
61898: PLUS
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: EMPTY
61905: LIST
61906: ADD
61907: ST_TO_ADDR
61908: GO 61857
61910: POP
61911: POP
// result = temp_list2 ;
61912: LD_ADDR_VAR 0 7
61916: PUSH
61917: LD_VAR 0 10
61921: ST_TO_ADDR
// end ;
61922: LD_VAR 0 7
61926: RET
// export function EnemyInRange ( unit , dist ) ; begin
61927: LD_INT 0
61929: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61930: LD_ADDR_VAR 0 3
61934: PUSH
61935: LD_VAR 0 1
61939: PPUSH
61940: CALL_OW 255
61944: PPUSH
61945: LD_VAR 0 1
61949: PPUSH
61950: CALL_OW 250
61954: PPUSH
61955: LD_VAR 0 1
61959: PPUSH
61960: CALL_OW 251
61964: PPUSH
61965: LD_VAR 0 2
61969: PPUSH
61970: CALL 35184 0 4
61974: PUSH
61975: LD_INT 4
61977: ARRAY
61978: ST_TO_ADDR
// end ;
61979: LD_VAR 0 3
61983: RET
// export function PlayerSeeMe ( unit ) ; begin
61984: LD_INT 0
61986: PPUSH
// result := See ( your_side , unit ) ;
61987: LD_ADDR_VAR 0 2
61991: PUSH
61992: LD_OWVAR 2
61996: PPUSH
61997: LD_VAR 0 1
62001: PPUSH
62002: CALL_OW 292
62006: ST_TO_ADDR
// end ;
62007: LD_VAR 0 2
62011: RET
// export function ReverseDir ( unit ) ; begin
62012: LD_INT 0
62014: PPUSH
// if not unit then
62015: LD_VAR 0 1
62019: NOT
62020: IFFALSE 62024
// exit ;
62022: GO 62047
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62024: LD_ADDR_VAR 0 2
62028: PUSH
62029: LD_VAR 0 1
62033: PPUSH
62034: CALL_OW 254
62038: PUSH
62039: LD_INT 3
62041: PLUS
62042: PUSH
62043: LD_INT 6
62045: MOD
62046: ST_TO_ADDR
// end ;
62047: LD_VAR 0 2
62051: RET
// export function ReverseArray ( array ) ; var i ; begin
62052: LD_INT 0
62054: PPUSH
62055: PPUSH
// if not array then
62056: LD_VAR 0 1
62060: NOT
62061: IFFALSE 62065
// exit ;
62063: GO 62120
// result := [ ] ;
62065: LD_ADDR_VAR 0 2
62069: PUSH
62070: EMPTY
62071: ST_TO_ADDR
// for i := array downto 1 do
62072: LD_ADDR_VAR 0 3
62076: PUSH
62077: DOUBLE
62078: LD_VAR 0 1
62082: INC
62083: ST_TO_ADDR
62084: LD_INT 1
62086: PUSH
62087: FOR_DOWNTO
62088: IFFALSE 62118
// result := Join ( result , array [ i ] ) ;
62090: LD_ADDR_VAR 0 2
62094: PUSH
62095: LD_VAR 0 2
62099: PPUSH
62100: LD_VAR 0 1
62104: PUSH
62105: LD_VAR 0 3
62109: ARRAY
62110: PPUSH
62111: CALL 66962 0 2
62115: ST_TO_ADDR
62116: GO 62087
62118: POP
62119: POP
// end ;
62120: LD_VAR 0 2
62124: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62125: LD_INT 0
62127: PPUSH
62128: PPUSH
62129: PPUSH
62130: PPUSH
62131: PPUSH
62132: PPUSH
// if not unit or not hexes then
62133: LD_VAR 0 1
62137: NOT
62138: IFTRUE 62147
62140: PUSH
62141: LD_VAR 0 2
62145: NOT
62146: OR
62147: IFFALSE 62151
// exit ;
62149: GO 62274
// dist := 9999 ;
62151: LD_ADDR_VAR 0 5
62155: PUSH
62156: LD_INT 9999
62158: ST_TO_ADDR
// for i = 1 to hexes do
62159: LD_ADDR_VAR 0 4
62163: PUSH
62164: DOUBLE
62165: LD_INT 1
62167: DEC
62168: ST_TO_ADDR
62169: LD_VAR 0 2
62173: PUSH
62174: FOR_TO
62175: IFFALSE 62262
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62177: LD_ADDR_VAR 0 6
62181: PUSH
62182: LD_VAR 0 1
62186: PPUSH
62187: LD_VAR 0 2
62191: PUSH
62192: LD_VAR 0 4
62196: ARRAY
62197: PUSH
62198: LD_INT 1
62200: ARRAY
62201: PPUSH
62202: LD_VAR 0 2
62206: PUSH
62207: LD_VAR 0 4
62211: ARRAY
62212: PUSH
62213: LD_INT 2
62215: ARRAY
62216: PPUSH
62217: CALL_OW 297
62221: ST_TO_ADDR
// if tdist < dist then
62222: LD_VAR 0 6
62226: PUSH
62227: LD_VAR 0 5
62231: LESS
62232: IFFALSE 62260
// begin hex := hexes [ i ] ;
62234: LD_ADDR_VAR 0 8
62238: PUSH
62239: LD_VAR 0 2
62243: PUSH
62244: LD_VAR 0 4
62248: ARRAY
62249: ST_TO_ADDR
// dist := tdist ;
62250: LD_ADDR_VAR 0 5
62254: PUSH
62255: LD_VAR 0 6
62259: ST_TO_ADDR
// end ; end ;
62260: GO 62174
62262: POP
62263: POP
// result := hex ;
62264: LD_ADDR_VAR 0 3
62268: PUSH
62269: LD_VAR 0 8
62273: ST_TO_ADDR
// end ;
62274: LD_VAR 0 3
62278: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62279: LD_INT 0
62281: PPUSH
62282: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62283: LD_VAR 0 1
62287: NOT
62288: IFTRUE 62327
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: LD_INT 21
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 23
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PPUSH
62320: CALL_OW 69
62324: IN
62325: NOT
62326: OR
62327: IFFALSE 62331
// exit ;
62329: GO 62378
// for i = 1 to 3 do
62331: LD_ADDR_VAR 0 3
62335: PUSH
62336: DOUBLE
62337: LD_INT 1
62339: DEC
62340: ST_TO_ADDR
62341: LD_INT 3
62343: PUSH
62344: FOR_TO
62345: IFFALSE 62376
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62347: LD_VAR 0 1
62351: PPUSH
62352: CALL_OW 250
62356: PPUSH
62357: LD_VAR 0 1
62361: PPUSH
62362: CALL_OW 251
62366: PPUSH
62367: LD_INT 1
62369: PPUSH
62370: CALL_OW 453
62374: GO 62344
62376: POP
62377: POP
// end ;
62378: LD_VAR 0 2
62382: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62383: LD_INT 0
62385: PPUSH
62386: PPUSH
62387: PPUSH
62388: PPUSH
62389: PPUSH
62390: PPUSH
// if not unit or not enemy_unit then
62391: LD_VAR 0 1
62395: NOT
62396: IFTRUE 62405
62398: PUSH
62399: LD_VAR 0 2
62403: NOT
62404: OR
62405: IFFALSE 62409
// exit ;
62407: GO 62880
// if GetLives ( i ) < 250 then
62409: LD_VAR 0 4
62413: PPUSH
62414: CALL_OW 256
62418: PUSH
62419: LD_INT 250
62421: LESS
62422: IFFALSE 62435
// begin ComAutodestruct ( i ) ;
62424: LD_VAR 0 4
62428: PPUSH
62429: CALL 62279 0 1
// exit ;
62433: GO 62880
// end ; x := GetX ( enemy_unit ) ;
62435: LD_ADDR_VAR 0 7
62439: PUSH
62440: LD_VAR 0 2
62444: PPUSH
62445: CALL_OW 250
62449: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62450: LD_ADDR_VAR 0 8
62454: PUSH
62455: LD_VAR 0 2
62459: PPUSH
62460: CALL_OW 251
62464: ST_TO_ADDR
// if not x or not y then
62465: LD_VAR 0 7
62469: NOT
62470: IFTRUE 62479
62472: PUSH
62473: LD_VAR 0 8
62477: NOT
62478: OR
62479: IFFALSE 62483
// exit ;
62481: GO 62880
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62483: LD_ADDR_VAR 0 6
62487: PUSH
62488: LD_VAR 0 7
62492: PPUSH
62493: LD_INT 0
62495: PPUSH
62496: LD_INT 4
62498: PPUSH
62499: CALL_OW 272
62503: PUSH
62504: LD_VAR 0 8
62508: PPUSH
62509: LD_INT 0
62511: PPUSH
62512: LD_INT 4
62514: PPUSH
62515: CALL_OW 273
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_VAR 0 7
62528: PPUSH
62529: LD_INT 1
62531: PPUSH
62532: LD_INT 4
62534: PPUSH
62535: CALL_OW 272
62539: PUSH
62540: LD_VAR 0 8
62544: PPUSH
62545: LD_INT 1
62547: PPUSH
62548: LD_INT 4
62550: PPUSH
62551: CALL_OW 273
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_VAR 0 7
62564: PPUSH
62565: LD_INT 2
62567: PPUSH
62568: LD_INT 4
62570: PPUSH
62571: CALL_OW 272
62575: PUSH
62576: LD_VAR 0 8
62580: PPUSH
62581: LD_INT 2
62583: PPUSH
62584: LD_INT 4
62586: PPUSH
62587: CALL_OW 273
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_VAR 0 7
62600: PPUSH
62601: LD_INT 3
62603: PPUSH
62604: LD_INT 4
62606: PPUSH
62607: CALL_OW 272
62611: PUSH
62612: LD_VAR 0 8
62616: PPUSH
62617: LD_INT 3
62619: PPUSH
62620: LD_INT 4
62622: PPUSH
62623: CALL_OW 273
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_VAR 0 7
62636: PPUSH
62637: LD_INT 4
62639: PPUSH
62640: LD_INT 4
62642: PPUSH
62643: CALL_OW 272
62647: PUSH
62648: LD_VAR 0 8
62652: PPUSH
62653: LD_INT 4
62655: PPUSH
62656: LD_INT 4
62658: PPUSH
62659: CALL_OW 273
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_VAR 0 7
62672: PPUSH
62673: LD_INT 5
62675: PPUSH
62676: LD_INT 4
62678: PPUSH
62679: CALL_OW 272
62683: PUSH
62684: LD_VAR 0 8
62688: PPUSH
62689: LD_INT 5
62691: PPUSH
62692: LD_INT 4
62694: PPUSH
62695: CALL_OW 273
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: ST_TO_ADDR
// for i = tmp downto 1 do
62712: LD_ADDR_VAR 0 4
62716: PUSH
62717: DOUBLE
62718: LD_VAR 0 6
62722: INC
62723: ST_TO_ADDR
62724: LD_INT 1
62726: PUSH
62727: FOR_DOWNTO
62728: IFFALSE 62831
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62730: LD_VAR 0 6
62734: PUSH
62735: LD_VAR 0 4
62739: ARRAY
62740: PUSH
62741: LD_INT 1
62743: ARRAY
62744: PPUSH
62745: LD_VAR 0 6
62749: PUSH
62750: LD_VAR 0 4
62754: ARRAY
62755: PUSH
62756: LD_INT 2
62758: ARRAY
62759: PPUSH
62760: CALL_OW 488
62764: NOT
62765: IFTRUE 62807
62767: PUSH
62768: LD_VAR 0 6
62772: PUSH
62773: LD_VAR 0 4
62777: ARRAY
62778: PUSH
62779: LD_INT 1
62781: ARRAY
62782: PPUSH
62783: LD_VAR 0 6
62787: PUSH
62788: LD_VAR 0 4
62792: ARRAY
62793: PUSH
62794: LD_INT 2
62796: ARRAY
62797: PPUSH
62798: CALL_OW 428
62802: PUSH
62803: LD_INT 0
62805: NONEQUAL
62806: OR
62807: IFFALSE 62829
// tmp := Delete ( tmp , i ) ;
62809: LD_ADDR_VAR 0 6
62813: PUSH
62814: LD_VAR 0 6
62818: PPUSH
62819: LD_VAR 0 4
62823: PPUSH
62824: CALL_OW 3
62828: ST_TO_ADDR
62829: GO 62727
62831: POP
62832: POP
// j := GetClosestHex ( unit , tmp ) ;
62833: LD_ADDR_VAR 0 5
62837: PUSH
62838: LD_VAR 0 1
62842: PPUSH
62843: LD_VAR 0 6
62847: PPUSH
62848: CALL 62125 0 2
62852: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62853: LD_VAR 0 1
62857: PPUSH
62858: LD_VAR 0 5
62862: PUSH
62863: LD_INT 1
62865: ARRAY
62866: PPUSH
62867: LD_VAR 0 5
62871: PUSH
62872: LD_INT 2
62874: ARRAY
62875: PPUSH
62876: CALL_OW 111
// end ;
62880: LD_VAR 0 3
62884: RET
// export function PrepareApemanSoldier ( ) ; begin
62885: LD_INT 0
62887: PPUSH
// uc_nation := 0 ;
62888: LD_ADDR_OWVAR 21
62892: PUSH
62893: LD_INT 0
62895: ST_TO_ADDR
// hc_sex := sex_male ;
62896: LD_ADDR_OWVAR 27
62900: PUSH
62901: LD_INT 1
62903: ST_TO_ADDR
// hc_name :=  ;
62904: LD_ADDR_OWVAR 26
62908: PUSH
62909: LD_STRING 
62911: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62912: LD_ADDR_OWVAR 28
62916: PUSH
62917: LD_INT 15
62919: ST_TO_ADDR
// hc_gallery :=  ;
62920: LD_ADDR_OWVAR 33
62924: PUSH
62925: LD_STRING 
62927: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62928: LD_ADDR_OWVAR 31
62932: PUSH
62933: LD_INT 0
62935: PPUSH
62936: LD_INT 3
62938: PPUSH
62939: CALL_OW 12
62943: PUSH
62944: LD_INT 0
62946: PPUSH
62947: LD_INT 3
62949: PPUSH
62950: CALL_OW 12
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62967: LD_ADDR_OWVAR 29
62971: PUSH
62972: LD_INT 12
62974: PUSH
62975: LD_INT 12
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: ST_TO_ADDR
// end ;
62982: LD_VAR 0 1
62986: RET
// export function PrepareApemanEngineer ( ) ; begin
62987: LD_INT 0
62989: PPUSH
// uc_nation := 0 ;
62990: LD_ADDR_OWVAR 21
62994: PUSH
62995: LD_INT 0
62997: ST_TO_ADDR
// hc_sex := sex_male ;
62998: LD_ADDR_OWVAR 27
63002: PUSH
63003: LD_INT 1
63005: ST_TO_ADDR
// hc_name :=  ;
63006: LD_ADDR_OWVAR 26
63010: PUSH
63011: LD_STRING 
63013: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63014: LD_ADDR_OWVAR 28
63018: PUSH
63019: LD_INT 16
63021: ST_TO_ADDR
// hc_gallery :=  ;
63022: LD_ADDR_OWVAR 33
63026: PUSH
63027: LD_STRING 
63029: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63030: LD_ADDR_OWVAR 31
63034: PUSH
63035: LD_INT 0
63037: PPUSH
63038: LD_INT 3
63040: PPUSH
63041: CALL_OW 12
63045: PUSH
63046: LD_INT 0
63048: PPUSH
63049: LD_INT 3
63051: PPUSH
63052: CALL_OW 12
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63069: LD_ADDR_OWVAR 29
63073: PUSH
63074: LD_INT 12
63076: PUSH
63077: LD_INT 12
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: ST_TO_ADDR
// end ;
63084: LD_VAR 0 1
63088: RET
// export function PrepareApeman ( agressivity ) ; begin
63089: LD_INT 0
63091: PPUSH
// uc_side := 0 ;
63092: LD_ADDR_OWVAR 20
63096: PUSH
63097: LD_INT 0
63099: ST_TO_ADDR
// uc_nation := 0 ;
63100: LD_ADDR_OWVAR 21
63104: PUSH
63105: LD_INT 0
63107: ST_TO_ADDR
// hc_sex := sex_male ;
63108: LD_ADDR_OWVAR 27
63112: PUSH
63113: LD_INT 1
63115: ST_TO_ADDR
// hc_class := class_apeman ;
63116: LD_ADDR_OWVAR 28
63120: PUSH
63121: LD_INT 12
63123: ST_TO_ADDR
// hc_gallery :=  ;
63124: LD_ADDR_OWVAR 33
63128: PUSH
63129: LD_STRING 
63131: ST_TO_ADDR
// hc_name :=  ;
63132: LD_ADDR_OWVAR 26
63136: PUSH
63137: LD_STRING 
63139: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63140: LD_ADDR_OWVAR 29
63144: PUSH
63145: LD_INT 12
63147: PUSH
63148: LD_INT 12
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: ST_TO_ADDR
// if agressivity = 0 then
63155: LD_VAR 0 1
63159: PUSH
63160: LD_INT 0
63162: EQUAL
63163: IFFALSE 63175
// hc_agressivity := 0 else
63165: LD_ADDR_OWVAR 35
63169: PUSH
63170: LD_INT 0
63172: ST_TO_ADDR
63173: GO 63196
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63175: LD_ADDR_OWVAR 35
63179: PUSH
63180: LD_VAR 0 1
63184: NEG
63185: PPUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: CALL_OW 12
63195: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63196: LD_ADDR_OWVAR 31
63200: PUSH
63201: LD_INT 0
63203: PPUSH
63204: LD_INT 3
63206: PPUSH
63207: CALL_OW 12
63211: PUSH
63212: LD_INT 0
63214: PPUSH
63215: LD_INT 3
63217: PPUSH
63218: CALL_OW 12
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: ST_TO_ADDR
// end ;
63235: LD_VAR 0 2
63239: RET
// export function PrepareTiger ( agressivity ) ; begin
63240: LD_INT 0
63242: PPUSH
// uc_side := 0 ;
63243: LD_ADDR_OWVAR 20
63247: PUSH
63248: LD_INT 0
63250: ST_TO_ADDR
// uc_nation := 0 ;
63251: LD_ADDR_OWVAR 21
63255: PUSH
63256: LD_INT 0
63258: ST_TO_ADDR
// InitHc ;
63259: CALL_OW 19
// hc_class := class_tiger ;
63263: LD_ADDR_OWVAR 28
63267: PUSH
63268: LD_INT 14
63270: ST_TO_ADDR
// hc_gallery :=  ;
63271: LD_ADDR_OWVAR 33
63275: PUSH
63276: LD_STRING 
63278: ST_TO_ADDR
// hc_name :=  ;
63279: LD_ADDR_OWVAR 26
63283: PUSH
63284: LD_STRING 
63286: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63287: LD_ADDR_OWVAR 35
63291: PUSH
63292: LD_VAR 0 1
63296: NEG
63297: PPUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: CALL_OW 12
63307: ST_TO_ADDR
// end ;
63308: LD_VAR 0 2
63312: RET
// export function PrepareEnchidna ( ) ; begin
63313: LD_INT 0
63315: PPUSH
// uc_side := 0 ;
63316: LD_ADDR_OWVAR 20
63320: PUSH
63321: LD_INT 0
63323: ST_TO_ADDR
// uc_nation := 0 ;
63324: LD_ADDR_OWVAR 21
63328: PUSH
63329: LD_INT 0
63331: ST_TO_ADDR
// InitHc ;
63332: CALL_OW 19
// hc_class := class_baggie ;
63336: LD_ADDR_OWVAR 28
63340: PUSH
63341: LD_INT 13
63343: ST_TO_ADDR
// hc_gallery :=  ;
63344: LD_ADDR_OWVAR 33
63348: PUSH
63349: LD_STRING 
63351: ST_TO_ADDR
// hc_name :=  ;
63352: LD_ADDR_OWVAR 26
63356: PUSH
63357: LD_STRING 
63359: ST_TO_ADDR
// end ;
63360: LD_VAR 0 1
63364: RET
// export function PrepareFrog ( ) ; begin
63365: LD_INT 0
63367: PPUSH
// uc_side := 0 ;
63368: LD_ADDR_OWVAR 20
63372: PUSH
63373: LD_INT 0
63375: ST_TO_ADDR
// uc_nation := 0 ;
63376: LD_ADDR_OWVAR 21
63380: PUSH
63381: LD_INT 0
63383: ST_TO_ADDR
// InitHc ;
63384: CALL_OW 19
// hc_class := class_frog ;
63388: LD_ADDR_OWVAR 28
63392: PUSH
63393: LD_INT 19
63395: ST_TO_ADDR
// hc_gallery :=  ;
63396: LD_ADDR_OWVAR 33
63400: PUSH
63401: LD_STRING 
63403: ST_TO_ADDR
// hc_name :=  ;
63404: LD_ADDR_OWVAR 26
63408: PUSH
63409: LD_STRING 
63411: ST_TO_ADDR
// end ;
63412: LD_VAR 0 1
63416: RET
// export function PrepareFish ( ) ; begin
63417: LD_INT 0
63419: PPUSH
// uc_side := 0 ;
63420: LD_ADDR_OWVAR 20
63424: PUSH
63425: LD_INT 0
63427: ST_TO_ADDR
// uc_nation := 0 ;
63428: LD_ADDR_OWVAR 21
63432: PUSH
63433: LD_INT 0
63435: ST_TO_ADDR
// InitHc ;
63436: CALL_OW 19
// hc_class := class_fish ;
63440: LD_ADDR_OWVAR 28
63444: PUSH
63445: LD_INT 20
63447: ST_TO_ADDR
// hc_gallery :=  ;
63448: LD_ADDR_OWVAR 33
63452: PUSH
63453: LD_STRING 
63455: ST_TO_ADDR
// hc_name :=  ;
63456: LD_ADDR_OWVAR 26
63460: PUSH
63461: LD_STRING 
63463: ST_TO_ADDR
// end ;
63464: LD_VAR 0 1
63468: RET
// export function PrepareBird ( ) ; begin
63469: LD_INT 0
63471: PPUSH
// uc_side := 0 ;
63472: LD_ADDR_OWVAR 20
63476: PUSH
63477: LD_INT 0
63479: ST_TO_ADDR
// uc_nation := 0 ;
63480: LD_ADDR_OWVAR 21
63484: PUSH
63485: LD_INT 0
63487: ST_TO_ADDR
// InitHc ;
63488: CALL_OW 19
// hc_class := class_phororhacos ;
63492: LD_ADDR_OWVAR 28
63496: PUSH
63497: LD_INT 18
63499: ST_TO_ADDR
// hc_gallery :=  ;
63500: LD_ADDR_OWVAR 33
63504: PUSH
63505: LD_STRING 
63507: ST_TO_ADDR
// hc_name :=  ;
63508: LD_ADDR_OWVAR 26
63512: PUSH
63513: LD_STRING 
63515: ST_TO_ADDR
// end ;
63516: LD_VAR 0 1
63520: RET
// export function PrepareHorse ( ) ; begin
63521: LD_INT 0
63523: PPUSH
// uc_side := 0 ;
63524: LD_ADDR_OWVAR 20
63528: PUSH
63529: LD_INT 0
63531: ST_TO_ADDR
// uc_nation := 0 ;
63532: LD_ADDR_OWVAR 21
63536: PUSH
63537: LD_INT 0
63539: ST_TO_ADDR
// InitHc ;
63540: CALL_OW 19
// hc_class := class_horse ;
63544: LD_ADDR_OWVAR 28
63548: PUSH
63549: LD_INT 21
63551: ST_TO_ADDR
// hc_gallery :=  ;
63552: LD_ADDR_OWVAR 33
63556: PUSH
63557: LD_STRING 
63559: ST_TO_ADDR
// hc_name :=  ;
63560: LD_ADDR_OWVAR 26
63564: PUSH
63565: LD_STRING 
63567: ST_TO_ADDR
// end ;
63568: LD_VAR 0 1
63572: RET
// export function PrepareMastodont ( ) ; begin
63573: LD_INT 0
63575: PPUSH
// uc_side := 0 ;
63576: LD_ADDR_OWVAR 20
63580: PUSH
63581: LD_INT 0
63583: ST_TO_ADDR
// uc_nation := 0 ;
63584: LD_ADDR_OWVAR 21
63588: PUSH
63589: LD_INT 0
63591: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63592: LD_ADDR_OWVAR 37
63596: PUSH
63597: LD_INT 31
63599: ST_TO_ADDR
// vc_control := control_rider ;
63600: LD_ADDR_OWVAR 38
63604: PUSH
63605: LD_INT 4
63607: ST_TO_ADDR
// end ;
63608: LD_VAR 0 1
63612: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63613: LD_INT 0
63615: PPUSH
63616: PPUSH
63617: PPUSH
// uc_side = 0 ;
63618: LD_ADDR_OWVAR 20
63622: PUSH
63623: LD_INT 0
63625: ST_TO_ADDR
// uc_nation = 0 ;
63626: LD_ADDR_OWVAR 21
63630: PUSH
63631: LD_INT 0
63633: ST_TO_ADDR
// InitHc_All ( ) ;
63634: CALL_OW 584
// InitVc ;
63638: CALL_OW 20
// if mastodonts then
63642: LD_VAR 0 6
63646: IFFALSE 63713
// for i = 1 to mastodonts do
63648: LD_ADDR_VAR 0 11
63652: PUSH
63653: DOUBLE
63654: LD_INT 1
63656: DEC
63657: ST_TO_ADDR
63658: LD_VAR 0 6
63662: PUSH
63663: FOR_TO
63664: IFFALSE 63711
// begin vc_chassis := 31 ;
63666: LD_ADDR_OWVAR 37
63670: PUSH
63671: LD_INT 31
63673: ST_TO_ADDR
// vc_control := control_rider ;
63674: LD_ADDR_OWVAR 38
63678: PUSH
63679: LD_INT 4
63681: ST_TO_ADDR
// animal := CreateVehicle ;
63682: LD_ADDR_VAR 0 12
63686: PUSH
63687: CALL_OW 45
63691: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63692: LD_VAR 0 12
63696: PPUSH
63697: LD_VAR 0 8
63701: PPUSH
63702: LD_INT 0
63704: PPUSH
63705: CALL 65855 0 3
// end ;
63709: GO 63663
63711: POP
63712: POP
// if horses then
63713: LD_VAR 0 5
63717: IFFALSE 63784
// for i = 1 to horses do
63719: LD_ADDR_VAR 0 11
63723: PUSH
63724: DOUBLE
63725: LD_INT 1
63727: DEC
63728: ST_TO_ADDR
63729: LD_VAR 0 5
63733: PUSH
63734: FOR_TO
63735: IFFALSE 63782
// begin hc_class := 21 ;
63737: LD_ADDR_OWVAR 28
63741: PUSH
63742: LD_INT 21
63744: ST_TO_ADDR
// hc_gallery :=  ;
63745: LD_ADDR_OWVAR 33
63749: PUSH
63750: LD_STRING 
63752: ST_TO_ADDR
// animal := CreateHuman ;
63753: LD_ADDR_VAR 0 12
63757: PUSH
63758: CALL_OW 44
63762: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63763: LD_VAR 0 12
63767: PPUSH
63768: LD_VAR 0 8
63772: PPUSH
63773: LD_INT 0
63775: PPUSH
63776: CALL 65855 0 3
// end ;
63780: GO 63734
63782: POP
63783: POP
// if birds then
63784: LD_VAR 0 1
63788: IFFALSE 63855
// for i = 1 to birds do
63790: LD_ADDR_VAR 0 11
63794: PUSH
63795: DOUBLE
63796: LD_INT 1
63798: DEC
63799: ST_TO_ADDR
63800: LD_VAR 0 1
63804: PUSH
63805: FOR_TO
63806: IFFALSE 63853
// begin hc_class := 18 ;
63808: LD_ADDR_OWVAR 28
63812: PUSH
63813: LD_INT 18
63815: ST_TO_ADDR
// hc_gallery =  ;
63816: LD_ADDR_OWVAR 33
63820: PUSH
63821: LD_STRING 
63823: ST_TO_ADDR
// animal := CreateHuman ;
63824: LD_ADDR_VAR 0 12
63828: PUSH
63829: CALL_OW 44
63833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63834: LD_VAR 0 12
63838: PPUSH
63839: LD_VAR 0 8
63843: PPUSH
63844: LD_INT 0
63846: PPUSH
63847: CALL 65855 0 3
// end ;
63851: GO 63805
63853: POP
63854: POP
// if tigers then
63855: LD_VAR 0 2
63859: IFFALSE 63943
// for i = 1 to tigers do
63861: LD_ADDR_VAR 0 11
63865: PUSH
63866: DOUBLE
63867: LD_INT 1
63869: DEC
63870: ST_TO_ADDR
63871: LD_VAR 0 2
63875: PUSH
63876: FOR_TO
63877: IFFALSE 63941
// begin hc_class = class_tiger ;
63879: LD_ADDR_OWVAR 28
63883: PUSH
63884: LD_INT 14
63886: ST_TO_ADDR
// hc_gallery =  ;
63887: LD_ADDR_OWVAR 33
63891: PUSH
63892: LD_STRING 
63894: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63895: LD_ADDR_OWVAR 35
63899: PUSH
63900: LD_INT 7
63902: NEG
63903: PPUSH
63904: LD_INT 7
63906: PPUSH
63907: CALL_OW 12
63911: ST_TO_ADDR
// animal := CreateHuman ;
63912: LD_ADDR_VAR 0 12
63916: PUSH
63917: CALL_OW 44
63921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63922: LD_VAR 0 12
63926: PPUSH
63927: LD_VAR 0 8
63931: PPUSH
63932: LD_INT 0
63934: PPUSH
63935: CALL 65855 0 3
// end ;
63939: GO 63876
63941: POP
63942: POP
// if apemans then
63943: LD_VAR 0 3
63947: IFFALSE 64070
// for i = 1 to apemans do
63949: LD_ADDR_VAR 0 11
63953: PUSH
63954: DOUBLE
63955: LD_INT 1
63957: DEC
63958: ST_TO_ADDR
63959: LD_VAR 0 3
63963: PUSH
63964: FOR_TO
63965: IFFALSE 64068
// begin hc_class = class_apeman ;
63967: LD_ADDR_OWVAR 28
63971: PUSH
63972: LD_INT 12
63974: ST_TO_ADDR
// hc_gallery =  ;
63975: LD_ADDR_OWVAR 33
63979: PUSH
63980: LD_STRING 
63982: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63983: LD_ADDR_OWVAR 35
63987: PUSH
63988: LD_INT 2
63990: NEG
63991: PPUSH
63992: LD_INT 2
63994: PPUSH
63995: CALL_OW 12
63999: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64000: LD_ADDR_OWVAR 31
64004: PUSH
64005: LD_INT 1
64007: PPUSH
64008: LD_INT 3
64010: PPUSH
64011: CALL_OW 12
64015: PUSH
64016: LD_INT 1
64018: PPUSH
64019: LD_INT 3
64021: PPUSH
64022: CALL_OW 12
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: ST_TO_ADDR
// animal := CreateHuman ;
64039: LD_ADDR_VAR 0 12
64043: PUSH
64044: CALL_OW 44
64048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64049: LD_VAR 0 12
64053: PPUSH
64054: LD_VAR 0 8
64058: PPUSH
64059: LD_INT 0
64061: PPUSH
64062: CALL 65855 0 3
// end ;
64066: GO 63964
64068: POP
64069: POP
// if enchidnas then
64070: LD_VAR 0 4
64074: IFFALSE 64141
// for i = 1 to enchidnas do
64076: LD_ADDR_VAR 0 11
64080: PUSH
64081: DOUBLE
64082: LD_INT 1
64084: DEC
64085: ST_TO_ADDR
64086: LD_VAR 0 4
64090: PUSH
64091: FOR_TO
64092: IFFALSE 64139
// begin hc_class = 13 ;
64094: LD_ADDR_OWVAR 28
64098: PUSH
64099: LD_INT 13
64101: ST_TO_ADDR
// hc_gallery =  ;
64102: LD_ADDR_OWVAR 33
64106: PUSH
64107: LD_STRING 
64109: ST_TO_ADDR
// animal := CreateHuman ;
64110: LD_ADDR_VAR 0 12
64114: PUSH
64115: CALL_OW 44
64119: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64120: LD_VAR 0 12
64124: PPUSH
64125: LD_VAR 0 8
64129: PPUSH
64130: LD_INT 0
64132: PPUSH
64133: CALL 65855 0 3
// end ;
64137: GO 64091
64139: POP
64140: POP
// if fishes then
64141: LD_VAR 0 7
64145: IFFALSE 64212
// for i = 1 to fishes do
64147: LD_ADDR_VAR 0 11
64151: PUSH
64152: DOUBLE
64153: LD_INT 1
64155: DEC
64156: ST_TO_ADDR
64157: LD_VAR 0 7
64161: PUSH
64162: FOR_TO
64163: IFFALSE 64210
// begin hc_class = 20 ;
64165: LD_ADDR_OWVAR 28
64169: PUSH
64170: LD_INT 20
64172: ST_TO_ADDR
// hc_gallery =  ;
64173: LD_ADDR_OWVAR 33
64177: PUSH
64178: LD_STRING 
64180: ST_TO_ADDR
// animal := CreateHuman ;
64181: LD_ADDR_VAR 0 12
64185: PUSH
64186: CALL_OW 44
64190: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64191: LD_VAR 0 12
64195: PPUSH
64196: LD_VAR 0 9
64200: PPUSH
64201: LD_INT 0
64203: PPUSH
64204: CALL 65855 0 3
// end ;
64208: GO 64162
64210: POP
64211: POP
// end ;
64212: LD_VAR 0 10
64216: RET
// export function WantHeal ( sci , unit ) ; begin
64217: LD_INT 0
64219: PPUSH
// if GetTaskList ( sci ) > 0 then
64220: LD_VAR 0 1
64224: PPUSH
64225: CALL_OW 437
64229: PUSH
64230: LD_INT 0
64232: GREATER
64233: IFFALSE 64305
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64235: LD_VAR 0 1
64239: PPUSH
64240: CALL_OW 437
64244: PUSH
64245: LD_INT 1
64247: ARRAY
64248: PUSH
64249: LD_INT 1
64251: ARRAY
64252: PUSH
64253: LD_STRING l
64255: EQUAL
64256: IFFALSE 64283
64258: PUSH
64259: LD_VAR 0 1
64263: PPUSH
64264: CALL_OW 437
64268: PUSH
64269: LD_INT 1
64271: ARRAY
64272: PUSH
64273: LD_INT 4
64275: ARRAY
64276: PUSH
64277: LD_VAR 0 2
64281: EQUAL
64282: AND
64283: IFFALSE 64295
// result := true else
64285: LD_ADDR_VAR 0 3
64289: PUSH
64290: LD_INT 1
64292: ST_TO_ADDR
64293: GO 64303
// result := false ;
64295: LD_ADDR_VAR 0 3
64299: PUSH
64300: LD_INT 0
64302: ST_TO_ADDR
// end else
64303: GO 64313
// result := false ;
64305: LD_ADDR_VAR 0 3
64309: PUSH
64310: LD_INT 0
64312: ST_TO_ADDR
// end ;
64313: LD_VAR 0 3
64317: RET
// export function HealTarget ( sci ) ; begin
64318: LD_INT 0
64320: PPUSH
// if not sci then
64321: LD_VAR 0 1
64325: NOT
64326: IFFALSE 64330
// exit ;
64328: GO 64395
// result := 0 ;
64330: LD_ADDR_VAR 0 2
64334: PUSH
64335: LD_INT 0
64337: ST_TO_ADDR
// if GetTaskList ( sci ) then
64338: LD_VAR 0 1
64342: PPUSH
64343: CALL_OW 437
64347: IFFALSE 64395
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64349: LD_VAR 0 1
64353: PPUSH
64354: CALL_OW 437
64358: PUSH
64359: LD_INT 1
64361: ARRAY
64362: PUSH
64363: LD_INT 1
64365: ARRAY
64366: PUSH
64367: LD_STRING l
64369: EQUAL
64370: IFFALSE 64395
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64372: LD_ADDR_VAR 0 2
64376: PUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: CALL_OW 437
64386: PUSH
64387: LD_INT 1
64389: ARRAY
64390: PUSH
64391: LD_INT 4
64393: ARRAY
64394: ST_TO_ADDR
// end ;
64395: LD_VAR 0 2
64399: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64400: LD_INT 0
64402: PPUSH
64403: PPUSH
64404: PPUSH
64405: PPUSH
// if not base_units then
64406: LD_VAR 0 1
64410: NOT
64411: IFFALSE 64415
// exit ;
64413: GO 64502
// result := false ;
64415: LD_ADDR_VAR 0 2
64419: PUSH
64420: LD_INT 0
64422: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64423: LD_ADDR_VAR 0 5
64427: PUSH
64428: LD_VAR 0 1
64432: PPUSH
64433: LD_INT 21
64435: PUSH
64436: LD_INT 3
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PPUSH
64443: CALL_OW 72
64447: ST_TO_ADDR
// if not tmp then
64448: LD_VAR 0 5
64452: NOT
64453: IFFALSE 64457
// exit ;
64455: GO 64502
// for i in tmp do
64457: LD_ADDR_VAR 0 3
64461: PUSH
64462: LD_VAR 0 5
64466: PUSH
64467: FOR_IN
64468: IFFALSE 64500
// begin result := EnemyInRange ( i , 22 ) ;
64470: LD_ADDR_VAR 0 2
64474: PUSH
64475: LD_VAR 0 3
64479: PPUSH
64480: LD_INT 22
64482: PPUSH
64483: CALL 61927 0 2
64487: ST_TO_ADDR
// if result then
64488: LD_VAR 0 2
64492: IFFALSE 64498
// exit ;
64494: POP
64495: POP
64496: GO 64502
// end ;
64498: GO 64467
64500: POP
64501: POP
// end ;
64502: LD_VAR 0 2
64506: RET
// export function FilterByTag ( units , tag ) ; begin
64507: LD_INT 0
64509: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64510: LD_ADDR_VAR 0 3
64514: PUSH
64515: LD_VAR 0 1
64519: PPUSH
64520: LD_INT 120
64522: PUSH
64523: LD_VAR 0 2
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PPUSH
64532: CALL_OW 72
64536: ST_TO_ADDR
// end ;
64537: LD_VAR 0 3
64541: RET
// export function IsDriver ( un ) ; begin
64542: LD_INT 0
64544: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64545: LD_ADDR_VAR 0 2
64549: PUSH
64550: LD_VAR 0 1
64554: PUSH
64555: LD_INT 55
64557: PUSH
64558: EMPTY
64559: LIST
64560: PPUSH
64561: CALL_OW 69
64565: IN
64566: ST_TO_ADDR
// end ;
64567: LD_VAR 0 2
64571: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64572: LD_INT 0
64574: PPUSH
64575: PPUSH
// list := [ ] ;
64576: LD_ADDR_VAR 0 5
64580: PUSH
64581: EMPTY
64582: ST_TO_ADDR
// case d of 0 :
64583: LD_VAR 0 3
64587: PUSH
64588: LD_INT 0
64590: DOUBLE
64591: EQUAL
64592: IFTRUE 64596
64594: GO 64729
64596: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64597: LD_ADDR_VAR 0 5
64601: PUSH
64602: LD_VAR 0 1
64606: PUSH
64607: LD_INT 4
64609: MINUS
64610: PUSH
64611: LD_VAR 0 2
64615: PUSH
64616: LD_INT 4
64618: MINUS
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: LIST
64627: PUSH
64628: LD_VAR 0 1
64632: PUSH
64633: LD_INT 3
64635: MINUS
64636: PUSH
64637: LD_VAR 0 2
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: PUSH
64650: LD_VAR 0 1
64654: PUSH
64655: LD_INT 4
64657: PLUS
64658: PUSH
64659: LD_VAR 0 2
64663: PUSH
64664: LD_INT 4
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: LIST
64671: PUSH
64672: LD_VAR 0 1
64676: PUSH
64677: LD_INT 3
64679: PLUS
64680: PUSH
64681: LD_VAR 0 2
64685: PUSH
64686: LD_INT 3
64688: PLUS
64689: PUSH
64690: LD_INT 5
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: PUSH
64698: LD_VAR 0 1
64702: PUSH
64703: LD_VAR 0 2
64707: PUSH
64708: LD_INT 4
64710: PLUS
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: LIST
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// end ; 1 :
64727: GO 65427
64729: LD_INT 1
64731: DOUBLE
64732: EQUAL
64733: IFTRUE 64737
64735: GO 64870
64737: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64738: LD_ADDR_VAR 0 5
64742: PUSH
64743: LD_VAR 0 1
64747: PUSH
64748: LD_VAR 0 2
64752: PUSH
64753: LD_INT 4
64755: MINUS
64756: PUSH
64757: LD_INT 3
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: LIST
64764: PUSH
64765: LD_VAR 0 1
64769: PUSH
64770: LD_INT 3
64772: MINUS
64773: PUSH
64774: LD_VAR 0 2
64778: PUSH
64779: LD_INT 3
64781: MINUS
64782: PUSH
64783: LD_INT 2
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: LIST
64790: PUSH
64791: LD_VAR 0 1
64795: PUSH
64796: LD_INT 4
64798: MINUS
64799: PUSH
64800: LD_VAR 0 2
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: LIST
64812: PUSH
64813: LD_VAR 0 1
64817: PUSH
64818: LD_VAR 0 2
64822: PUSH
64823: LD_INT 3
64825: PLUS
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: LIST
64834: PUSH
64835: LD_VAR 0 1
64839: PUSH
64840: LD_INT 4
64842: PLUS
64843: PUSH
64844: LD_VAR 0 2
64848: PUSH
64849: LD_INT 4
64851: PLUS
64852: PUSH
64853: LD_INT 5
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: ST_TO_ADDR
// end ; 2 :
64868: GO 65427
64870: LD_INT 2
64872: DOUBLE
64873: EQUAL
64874: IFTRUE 64878
64876: GO 65007
64878: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64879: LD_ADDR_VAR 0 5
64883: PUSH
64884: LD_VAR 0 1
64888: PUSH
64889: LD_VAR 0 2
64893: PUSH
64894: LD_INT 3
64896: MINUS
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: PUSH
64906: LD_VAR 0 1
64910: PUSH
64911: LD_INT 4
64913: PLUS
64914: PUSH
64915: LD_VAR 0 2
64919: PUSH
64920: LD_INT 4
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: PUSH
64928: LD_VAR 0 1
64932: PUSH
64933: LD_VAR 0 2
64937: PUSH
64938: LD_INT 4
64940: PLUS
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: LIST
64949: PUSH
64950: LD_VAR 0 1
64954: PUSH
64955: LD_INT 3
64957: MINUS
64958: PUSH
64959: LD_VAR 0 2
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: PUSH
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 4
64979: MINUS
64980: PUSH
64981: LD_VAR 0 2
64985: PUSH
64986: LD_INT 4
64988: MINUS
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: ST_TO_ADDR
// end ; 3 :
65005: GO 65427
65007: LD_INT 3
65009: DOUBLE
65010: EQUAL
65011: IFTRUE 65015
65013: GO 65148
65015: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65016: LD_ADDR_VAR 0 5
65020: PUSH
65021: LD_VAR 0 1
65025: PUSH
65026: LD_INT 3
65028: PLUS
65029: PUSH
65030: LD_VAR 0 2
65034: PUSH
65035: LD_INT 4
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: PUSH
65043: LD_VAR 0 1
65047: PUSH
65048: LD_INT 4
65050: PLUS
65051: PUSH
65052: LD_VAR 0 2
65056: PUSH
65057: LD_INT 4
65059: PLUS
65060: PUSH
65061: LD_INT 5
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: PUSH
65069: LD_VAR 0 1
65073: PUSH
65074: LD_INT 4
65076: MINUS
65077: PUSH
65078: LD_VAR 0 2
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: PUSH
65091: LD_VAR 0 1
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: LD_INT 4
65103: MINUS
65104: PUSH
65105: LD_INT 3
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: PUSH
65113: LD_VAR 0 1
65117: PUSH
65118: LD_INT 3
65120: MINUS
65121: PUSH
65122: LD_VAR 0 2
65126: PUSH
65127: LD_INT 3
65129: MINUS
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: LIST
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: ST_TO_ADDR
// end ; 4 :
65146: GO 65427
65148: LD_INT 4
65150: DOUBLE
65151: EQUAL
65152: IFTRUE 65156
65154: GO 65289
65156: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65157: LD_ADDR_VAR 0 5
65161: PUSH
65162: LD_VAR 0 1
65166: PUSH
65167: LD_VAR 0 2
65171: PUSH
65172: LD_INT 4
65174: PLUS
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: LIST
65183: PUSH
65184: LD_VAR 0 1
65188: PUSH
65189: LD_INT 3
65191: PLUS
65192: PUSH
65193: LD_VAR 0 2
65197: PUSH
65198: LD_INT 3
65200: PLUS
65201: PUSH
65202: LD_INT 5
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: LIST
65209: PUSH
65210: LD_VAR 0 1
65214: PUSH
65215: LD_INT 4
65217: PLUS
65218: PUSH
65219: LD_VAR 0 2
65223: PUSH
65224: LD_INT 4
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: LIST
65231: PUSH
65232: LD_VAR 0 1
65236: PUSH
65237: LD_VAR 0 2
65241: PUSH
65242: LD_INT 3
65244: MINUS
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: PUSH
65254: LD_VAR 0 1
65258: PUSH
65259: LD_INT 4
65261: MINUS
65262: PUSH
65263: LD_VAR 0 2
65267: PUSH
65268: LD_INT 4
65270: MINUS
65271: PUSH
65272: LD_INT 2
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: LIST
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: ST_TO_ADDR
// end ; 5 :
65287: GO 65427
65289: LD_INT 5
65291: DOUBLE
65292: EQUAL
65293: IFTRUE 65297
65295: GO 65426
65297: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65298: LD_ADDR_VAR 0 5
65302: PUSH
65303: LD_VAR 0 1
65307: PUSH
65308: LD_INT 4
65310: MINUS
65311: PUSH
65312: LD_VAR 0 2
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: PUSH
65325: LD_VAR 0 1
65329: PUSH
65330: LD_VAR 0 2
65334: PUSH
65335: LD_INT 4
65337: MINUS
65338: PUSH
65339: LD_INT 3
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: LIST
65346: PUSH
65347: LD_VAR 0 1
65351: PUSH
65352: LD_INT 4
65354: PLUS
65355: PUSH
65356: LD_VAR 0 2
65360: PUSH
65361: LD_INT 4
65363: PLUS
65364: PUSH
65365: LD_INT 5
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: PUSH
65373: LD_VAR 0 1
65377: PUSH
65378: LD_INT 3
65380: PLUS
65381: PUSH
65382: LD_VAR 0 2
65386: PUSH
65387: LD_INT 4
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: LIST
65394: PUSH
65395: LD_VAR 0 1
65399: PUSH
65400: LD_VAR 0 2
65404: PUSH
65405: LD_INT 3
65407: PLUS
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: ST_TO_ADDR
// end ; end ;
65424: GO 65427
65426: POP
// result := list ;
65427: LD_ADDR_VAR 0 4
65431: PUSH
65432: LD_VAR 0 5
65436: ST_TO_ADDR
// end ;
65437: LD_VAR 0 4
65441: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65442: LD_INT 0
65444: PPUSH
65445: PPUSH
65446: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65447: LD_VAR 0 1
65451: NOT
65452: IFTRUE 65480
65454: PUSH
65455: LD_VAR 0 2
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: LD_INT 4
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: IN
65478: NOT
65479: OR
65480: IFFALSE 65484
// exit ;
65482: GO 65567
// tmp := [ ] ;
65484: LD_ADDR_VAR 0 5
65488: PUSH
65489: EMPTY
65490: ST_TO_ADDR
// for i in units do
65491: LD_ADDR_VAR 0 4
65495: PUSH
65496: LD_VAR 0 1
65500: PUSH
65501: FOR_IN
65502: IFFALSE 65536
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65504: LD_ADDR_VAR 0 5
65508: PUSH
65509: LD_VAR 0 5
65513: PPUSH
65514: LD_VAR 0 4
65518: PPUSH
65519: LD_VAR 0 2
65523: PPUSH
65524: CALL_OW 259
65528: PPUSH
65529: CALL 66962 0 2
65533: ST_TO_ADDR
65534: GO 65501
65536: POP
65537: POP
// if not tmp then
65538: LD_VAR 0 5
65542: NOT
65543: IFFALSE 65547
// exit ;
65545: GO 65567
// result := SortListByListDesc ( units , tmp ) ;
65547: LD_ADDR_VAR 0 3
65551: PUSH
65552: LD_VAR 0 1
65556: PPUSH
65557: LD_VAR 0 5
65561: PPUSH
65562: CALL_OW 77
65566: ST_TO_ADDR
// end ;
65567: LD_VAR 0 3
65571: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65572: LD_INT 0
65574: PPUSH
65575: PPUSH
65576: PPUSH
// result := false ;
65577: LD_ADDR_VAR 0 3
65581: PUSH
65582: LD_INT 0
65584: ST_TO_ADDR
// if not building then
65585: LD_VAR 0 2
65589: NOT
65590: IFFALSE 65594
// exit ;
65592: GO 65738
// x := GetX ( building ) ;
65594: LD_ADDR_VAR 0 4
65598: PUSH
65599: LD_VAR 0 2
65603: PPUSH
65604: CALL_OW 250
65608: ST_TO_ADDR
// y := GetY ( building ) ;
65609: LD_ADDR_VAR 0 5
65613: PUSH
65614: LD_VAR 0 2
65618: PPUSH
65619: CALL_OW 251
65623: ST_TO_ADDR
// if not x or not y then
65624: LD_VAR 0 4
65628: NOT
65629: IFTRUE 65638
65631: PUSH
65632: LD_VAR 0 5
65636: NOT
65637: OR
65638: IFFALSE 65642
// exit ;
65640: GO 65738
// if GetTaskList ( unit ) then
65642: LD_VAR 0 1
65646: PPUSH
65647: CALL_OW 437
65651: IFFALSE 65738
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65653: LD_STRING e
65655: PUSH
65656: LD_VAR 0 1
65660: PPUSH
65661: CALL_OW 437
65665: PUSH
65666: LD_INT 1
65668: ARRAY
65669: PUSH
65670: LD_INT 1
65672: ARRAY
65673: EQUAL
65674: IFFALSE 65701
65676: PUSH
65677: LD_VAR 0 4
65681: PUSH
65682: LD_VAR 0 1
65686: PPUSH
65687: CALL_OW 437
65691: PUSH
65692: LD_INT 1
65694: ARRAY
65695: PUSH
65696: LD_INT 2
65698: ARRAY
65699: EQUAL
65700: AND
65701: IFFALSE 65728
65703: PUSH
65704: LD_VAR 0 5
65708: PUSH
65709: LD_VAR 0 1
65713: PPUSH
65714: CALL_OW 437
65718: PUSH
65719: LD_INT 1
65721: ARRAY
65722: PUSH
65723: LD_INT 3
65725: ARRAY
65726: EQUAL
65727: AND
65728: IFFALSE 65738
// result := true end ;
65730: LD_ADDR_VAR 0 3
65734: PUSH
65735: LD_INT 1
65737: ST_TO_ADDR
// end ;
65738: LD_VAR 0 3
65742: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65743: LD_INT 0
65745: PPUSH
// result := false ;
65746: LD_ADDR_VAR 0 4
65750: PUSH
65751: LD_INT 0
65753: ST_TO_ADDR
// if GetTaskList ( unit ) then
65754: LD_VAR 0 1
65758: PPUSH
65759: CALL_OW 437
65763: IFFALSE 65850
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65765: LD_STRING M
65767: PUSH
65768: LD_VAR 0 1
65772: PPUSH
65773: CALL_OW 437
65777: PUSH
65778: LD_INT 1
65780: ARRAY
65781: PUSH
65782: LD_INT 1
65784: ARRAY
65785: EQUAL
65786: IFFALSE 65813
65788: PUSH
65789: LD_VAR 0 2
65793: PUSH
65794: LD_VAR 0 1
65798: PPUSH
65799: CALL_OW 437
65803: PUSH
65804: LD_INT 1
65806: ARRAY
65807: PUSH
65808: LD_INT 2
65810: ARRAY
65811: EQUAL
65812: AND
65813: IFFALSE 65840
65815: PUSH
65816: LD_VAR 0 3
65820: PUSH
65821: LD_VAR 0 1
65825: PPUSH
65826: CALL_OW 437
65830: PUSH
65831: LD_INT 1
65833: ARRAY
65834: PUSH
65835: LD_INT 3
65837: ARRAY
65838: EQUAL
65839: AND
65840: IFFALSE 65850
// result := true ;
65842: LD_ADDR_VAR 0 4
65846: PUSH
65847: LD_INT 1
65849: ST_TO_ADDR
// end ; end ;
65850: LD_VAR 0 4
65854: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65855: LD_INT 0
65857: PPUSH
65858: PPUSH
65859: PPUSH
65860: PPUSH
// if not unit or not area then
65861: LD_VAR 0 1
65865: NOT
65866: IFTRUE 65875
65868: PUSH
65869: LD_VAR 0 2
65873: NOT
65874: OR
65875: IFFALSE 65879
// exit ;
65877: GO 66055
// tmp := AreaToList ( area , i ) ;
65879: LD_ADDR_VAR 0 6
65883: PUSH
65884: LD_VAR 0 2
65888: PPUSH
65889: LD_VAR 0 5
65893: PPUSH
65894: CALL_OW 517
65898: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65899: LD_ADDR_VAR 0 5
65903: PUSH
65904: DOUBLE
65905: LD_INT 1
65907: DEC
65908: ST_TO_ADDR
65909: LD_VAR 0 6
65913: PUSH
65914: LD_INT 1
65916: ARRAY
65917: PUSH
65918: FOR_TO
65919: IFFALSE 66053
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65921: LD_ADDR_VAR 0 7
65925: PUSH
65926: LD_VAR 0 6
65930: PUSH
65931: LD_INT 1
65933: ARRAY
65934: PUSH
65935: LD_VAR 0 5
65939: ARRAY
65940: PUSH
65941: LD_VAR 0 6
65945: PUSH
65946: LD_INT 2
65948: ARRAY
65949: PUSH
65950: LD_VAR 0 5
65954: ARRAY
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65960: LD_INT 92
65962: PUSH
65963: LD_VAR 0 7
65967: PUSH
65968: LD_INT 1
65970: ARRAY
65971: PUSH
65972: LD_VAR 0 7
65976: PUSH
65977: LD_INT 2
65979: ARRAY
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: PPUSH
65990: CALL_OW 69
65994: PUSH
65995: LD_INT 0
65997: EQUAL
65998: IFFALSE 66051
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66000: LD_VAR 0 1
66004: PPUSH
66005: LD_VAR 0 7
66009: PUSH
66010: LD_INT 1
66012: ARRAY
66013: PPUSH
66014: LD_VAR 0 7
66018: PUSH
66019: LD_INT 2
66021: ARRAY
66022: PPUSH
66023: LD_VAR 0 3
66027: PPUSH
66028: CALL_OW 48
// result := IsPlaced ( unit ) ;
66032: LD_ADDR_VAR 0 4
66036: PUSH
66037: LD_VAR 0 1
66041: PPUSH
66042: CALL_OW 305
66046: ST_TO_ADDR
// exit ;
66047: POP
66048: POP
66049: GO 66055
// end ; end ;
66051: GO 65918
66053: POP
66054: POP
// end ;
66055: LD_VAR 0 4
66059: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66060: LD_INT 0
66062: PPUSH
66063: PPUSH
66064: PPUSH
// if not side or side > 8 then
66065: LD_VAR 0 1
66069: NOT
66070: IFTRUE 66082
66072: PUSH
66073: LD_VAR 0 1
66077: PUSH
66078: LD_INT 8
66080: GREATER
66081: OR
66082: IFFALSE 66086
// exit ;
66084: GO 66273
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66086: LD_ADDR_VAR 0 4
66090: PUSH
66091: LD_INT 22
66093: PUSH
66094: LD_VAR 0 1
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 21
66105: PUSH
66106: LD_INT 3
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PPUSH
66117: CALL_OW 69
66121: ST_TO_ADDR
// if not tmp then
66122: LD_VAR 0 4
66126: NOT
66127: IFFALSE 66131
// exit ;
66129: GO 66273
// enable_addtolog := true ;
66131: LD_ADDR_OWVAR 81
66135: PUSH
66136: LD_INT 1
66138: ST_TO_ADDR
// AddToLog ( [ ) ;
66139: LD_STRING [
66141: PPUSH
66142: CALL_OW 561
// for i in tmp do
66146: LD_ADDR_VAR 0 3
66150: PUSH
66151: LD_VAR 0 4
66155: PUSH
66156: FOR_IN
66157: IFFALSE 66264
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66159: LD_STRING [
66161: PUSH
66162: LD_VAR 0 3
66166: PPUSH
66167: CALL_OW 266
66171: STR
66172: PUSH
66173: LD_STRING , 
66175: STR
66176: PUSH
66177: LD_VAR 0 3
66181: PPUSH
66182: CALL_OW 250
66186: STR
66187: PUSH
66188: LD_STRING , 
66190: STR
66191: PUSH
66192: LD_VAR 0 3
66196: PPUSH
66197: CALL_OW 251
66201: STR
66202: PUSH
66203: LD_STRING , 
66205: STR
66206: PUSH
66207: LD_VAR 0 3
66211: PPUSH
66212: CALL_OW 254
66216: STR
66217: PUSH
66218: LD_STRING , 
66220: STR
66221: PUSH
66222: LD_VAR 0 3
66226: PPUSH
66227: LD_INT 1
66229: PPUSH
66230: CALL_OW 268
66234: STR
66235: PUSH
66236: LD_STRING , 
66238: STR
66239: PUSH
66240: LD_VAR 0 3
66244: PPUSH
66245: LD_INT 2
66247: PPUSH
66248: CALL_OW 268
66252: STR
66253: PUSH
66254: LD_STRING ],
66256: STR
66257: PPUSH
66258: CALL_OW 561
// end ;
66262: GO 66156
66264: POP
66265: POP
// AddToLog ( ]; ) ;
66266: LD_STRING ];
66268: PPUSH
66269: CALL_OW 561
// end ;
66273: LD_VAR 0 2
66277: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66278: LD_INT 0
66280: PPUSH
66281: PPUSH
66282: PPUSH
66283: PPUSH
66284: PPUSH
// if not area or not rate or not max then
66285: LD_VAR 0 1
66289: NOT
66290: IFTRUE 66299
66292: PUSH
66293: LD_VAR 0 2
66297: NOT
66298: OR
66299: IFTRUE 66308
66301: PUSH
66302: LD_VAR 0 4
66306: NOT
66307: OR
66308: IFFALSE 66312
// exit ;
66310: GO 66501
// while 1 do
66312: LD_INT 1
66314: IFFALSE 66501
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66316: LD_ADDR_VAR 0 9
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: LD_INT 1
66328: PPUSH
66329: CALL_OW 287
66333: PUSH
66334: LD_INT 10
66336: MUL
66337: ST_TO_ADDR
// r := rate / 10 ;
66338: LD_ADDR_VAR 0 7
66342: PUSH
66343: LD_VAR 0 2
66347: PUSH
66348: LD_INT 10
66350: DIVREAL
66351: ST_TO_ADDR
// time := 1 1$00 ;
66352: LD_ADDR_VAR 0 8
66356: PUSH
66357: LD_INT 2100
66359: ST_TO_ADDR
// if amount < min then
66360: LD_VAR 0 9
66364: PUSH
66365: LD_VAR 0 3
66369: LESS
66370: IFFALSE 66388
// r := r * 2 else
66372: LD_ADDR_VAR 0 7
66376: PUSH
66377: LD_VAR 0 7
66381: PUSH
66382: LD_INT 2
66384: MUL
66385: ST_TO_ADDR
66386: GO 66414
// if amount > max then
66388: LD_VAR 0 9
66392: PUSH
66393: LD_VAR 0 4
66397: GREATER
66398: IFFALSE 66414
// r := r / 2 ;
66400: LD_ADDR_VAR 0 7
66404: PUSH
66405: LD_VAR 0 7
66409: PUSH
66410: LD_INT 2
66412: DIVREAL
66413: ST_TO_ADDR
// time := time / r ;
66414: LD_ADDR_VAR 0 8
66418: PUSH
66419: LD_VAR 0 8
66423: PUSH
66424: LD_VAR 0 7
66428: DIVREAL
66429: ST_TO_ADDR
// if time < 0 then
66430: LD_VAR 0 8
66434: PUSH
66435: LD_INT 0
66437: LESS
66438: IFFALSE 66455
// time := time * - 1 ;
66440: LD_ADDR_VAR 0 8
66444: PUSH
66445: LD_VAR 0 8
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: MUL
66454: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66455: LD_VAR 0 8
66459: PUSH
66460: LD_INT 35
66462: PPUSH
66463: LD_INT 875
66465: PPUSH
66466: CALL_OW 12
66470: PLUS
66471: PPUSH
66472: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66476: LD_INT 1
66478: PPUSH
66479: LD_INT 5
66481: PPUSH
66482: CALL_OW 12
66486: PPUSH
66487: LD_VAR 0 1
66491: PPUSH
66492: LD_INT 1
66494: PPUSH
66495: CALL_OW 55
// end ;
66499: GO 66312
// end ;
66501: LD_VAR 0 5
66505: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66506: LD_INT 0
66508: PPUSH
66509: PPUSH
66510: PPUSH
66511: PPUSH
66512: PPUSH
66513: PPUSH
66514: PPUSH
66515: PPUSH
// if not turrets or not factories then
66516: LD_VAR 0 1
66520: NOT
66521: IFTRUE 66530
66523: PUSH
66524: LD_VAR 0 2
66528: NOT
66529: OR
66530: IFFALSE 66534
// exit ;
66532: GO 66841
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66534: LD_ADDR_VAR 0 10
66538: PUSH
66539: LD_INT 5
66541: PUSH
66542: LD_INT 6
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: LD_INT 4
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 3
66561: PUSH
66562: LD_INT 5
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 24
66576: PUSH
66577: LD_INT 25
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 23
66586: PUSH
66587: LD_INT 27
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 42
66600: PUSH
66601: LD_INT 43
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 44
66610: PUSH
66611: LD_INT 46
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 45
66620: PUSH
66621: LD_INT 47
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// result := [ ] ;
66638: LD_ADDR_VAR 0 3
66642: PUSH
66643: EMPTY
66644: ST_TO_ADDR
// for i in turrets do
66645: LD_ADDR_VAR 0 4
66649: PUSH
66650: LD_VAR 0 1
66654: PUSH
66655: FOR_IN
66656: IFFALSE 66839
// begin nat := GetNation ( i ) ;
66658: LD_ADDR_VAR 0 7
66662: PUSH
66663: LD_VAR 0 4
66667: PPUSH
66668: CALL_OW 248
66672: ST_TO_ADDR
// weapon := 0 ;
66673: LD_ADDR_VAR 0 8
66677: PUSH
66678: LD_INT 0
66680: ST_TO_ADDR
// if not nat then
66681: LD_VAR 0 7
66685: NOT
66686: IFFALSE 66690
// continue ;
66688: GO 66655
// for j in list [ nat ] do
66690: LD_ADDR_VAR 0 5
66694: PUSH
66695: LD_VAR 0 10
66699: PUSH
66700: LD_VAR 0 7
66704: ARRAY
66705: PUSH
66706: FOR_IN
66707: IFFALSE 66748
// if GetBWeapon ( i ) = j [ 1 ] then
66709: LD_VAR 0 4
66713: PPUSH
66714: CALL_OW 269
66718: PUSH
66719: LD_VAR 0 5
66723: PUSH
66724: LD_INT 1
66726: ARRAY
66727: EQUAL
66728: IFFALSE 66746
// begin weapon := j [ 2 ] ;
66730: LD_ADDR_VAR 0 8
66734: PUSH
66735: LD_VAR 0 5
66739: PUSH
66740: LD_INT 2
66742: ARRAY
66743: ST_TO_ADDR
// break ;
66744: GO 66748
// end ;
66746: GO 66706
66748: POP
66749: POP
// if not weapon then
66750: LD_VAR 0 8
66754: NOT
66755: IFFALSE 66759
// continue ;
66757: GO 66655
// for k in factories do
66759: LD_ADDR_VAR 0 6
66763: PUSH
66764: LD_VAR 0 2
66768: PUSH
66769: FOR_IN
66770: IFFALSE 66835
// begin weapons := AvailableWeaponList ( k ) ;
66772: LD_ADDR_VAR 0 9
66776: PUSH
66777: LD_VAR 0 6
66781: PPUSH
66782: CALL_OW 478
66786: ST_TO_ADDR
// if not weapons then
66787: LD_VAR 0 9
66791: NOT
66792: IFFALSE 66796
// continue ;
66794: GO 66769
// if weapon in weapons then
66796: LD_VAR 0 8
66800: PUSH
66801: LD_VAR 0 9
66805: IN
66806: IFFALSE 66833
// begin result := [ i , weapon ] ;
66808: LD_ADDR_VAR 0 3
66812: PUSH
66813: LD_VAR 0 4
66817: PUSH
66818: LD_VAR 0 8
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: ST_TO_ADDR
// exit ;
66827: POP
66828: POP
66829: POP
66830: POP
66831: GO 66841
// end ; end ;
66833: GO 66769
66835: POP
66836: POP
// end ;
66837: GO 66655
66839: POP
66840: POP
// end ;
66841: LD_VAR 0 3
66845: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66846: LD_INT 0
66848: PPUSH
// if not side or side > 8 then
66849: LD_VAR 0 3
66853: NOT
66854: IFTRUE 66866
66856: PUSH
66857: LD_VAR 0 3
66861: PUSH
66862: LD_INT 8
66864: GREATER
66865: OR
66866: IFFALSE 66870
// exit ;
66868: GO 66929
// if not range then
66870: LD_VAR 0 4
66874: NOT
66875: IFFALSE 66886
// range := - 12 ;
66877: LD_ADDR_VAR 0 4
66881: PUSH
66882: LD_INT 12
66884: NEG
66885: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66886: LD_VAR 0 1
66890: PPUSH
66891: LD_VAR 0 2
66895: PPUSH
66896: LD_VAR 0 3
66900: PPUSH
66901: LD_VAR 0 4
66905: PPUSH
66906: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66910: LD_VAR 0 1
66914: PPUSH
66915: LD_VAR 0 2
66919: PPUSH
66920: LD_VAR 0 3
66924: PPUSH
66925: CALL_OW 331
// end ;
66929: LD_VAR 0 5
66933: RET
// export function Video ( mode ) ; begin
66934: LD_INT 0
66936: PPUSH
// ingame_video = mode ;
66937: LD_ADDR_OWVAR 52
66941: PUSH
66942: LD_VAR 0 1
66946: ST_TO_ADDR
// interface_hidden = mode ;
66947: LD_ADDR_OWVAR 54
66951: PUSH
66952: LD_VAR 0 1
66956: ST_TO_ADDR
// end ;
66957: LD_VAR 0 2
66961: RET
// export function Join ( array , element ) ; begin
66962: LD_INT 0
66964: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66965: LD_ADDR_VAR 0 3
66969: PUSH
66970: LD_VAR 0 1
66974: PPUSH
66975: LD_VAR 0 1
66979: PUSH
66980: LD_INT 1
66982: PLUS
66983: PPUSH
66984: LD_VAR 0 2
66988: PPUSH
66989: CALL_OW 1
66993: ST_TO_ADDR
// end ;
66994: LD_VAR 0 3
66998: RET
// export function JoinUnion ( array , element ) ; begin
66999: LD_INT 0
67001: PPUSH
// result := array union element ;
67002: LD_ADDR_VAR 0 3
67006: PUSH
67007: LD_VAR 0 1
67011: PUSH
67012: LD_VAR 0 2
67016: UNION
67017: ST_TO_ADDR
// end ;
67018: LD_VAR 0 3
67022: RET
// export function GetBehemoths ( side ) ; begin
67023: LD_INT 0
67025: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67026: LD_ADDR_VAR 0 2
67030: PUSH
67031: LD_INT 22
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 31
67045: PUSH
67046: LD_INT 25
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PPUSH
67057: CALL_OW 69
67061: ST_TO_ADDR
// end ;
67062: LD_VAR 0 2
67066: RET
// export function Shuffle ( array ) ; var i , index ; begin
67067: LD_INT 0
67069: PPUSH
67070: PPUSH
67071: PPUSH
// result := [ ] ;
67072: LD_ADDR_VAR 0 2
67076: PUSH
67077: EMPTY
67078: ST_TO_ADDR
// if not array then
67079: LD_VAR 0 1
67083: NOT
67084: IFFALSE 67088
// exit ;
67086: GO 67187
// Randomize ;
67088: CALL_OW 10
// for i = array downto 1 do
67092: LD_ADDR_VAR 0 3
67096: PUSH
67097: DOUBLE
67098: LD_VAR 0 1
67102: INC
67103: ST_TO_ADDR
67104: LD_INT 1
67106: PUSH
67107: FOR_DOWNTO
67108: IFFALSE 67185
// begin index := rand ( 1 , array ) ;
67110: LD_ADDR_VAR 0 4
67114: PUSH
67115: LD_INT 1
67117: PPUSH
67118: LD_VAR 0 1
67122: PPUSH
67123: CALL_OW 12
67127: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: LD_VAR 0 2
67137: PPUSH
67138: LD_VAR 0 2
67142: PUSH
67143: LD_INT 1
67145: PLUS
67146: PPUSH
67147: LD_VAR 0 1
67151: PUSH
67152: LD_VAR 0 4
67156: ARRAY
67157: PPUSH
67158: CALL_OW 2
67162: ST_TO_ADDR
// array := Delete ( array , index ) ;
67163: LD_ADDR_VAR 0 1
67167: PUSH
67168: LD_VAR 0 1
67172: PPUSH
67173: LD_VAR 0 4
67177: PPUSH
67178: CALL_OW 3
67182: ST_TO_ADDR
// end ;
67183: GO 67107
67185: POP
67186: POP
// end ;
67187: LD_VAR 0 2
67191: RET
// export function GetBaseMaterials ( base ) ; begin
67192: LD_INT 0
67194: PPUSH
// result := [ 0 , 0 , 0 ] ;
67195: LD_ADDR_VAR 0 2
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: LIST
67213: ST_TO_ADDR
// if not base then
67214: LD_VAR 0 1
67218: NOT
67219: IFFALSE 67223
// exit ;
67221: GO 67272
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67223: LD_ADDR_VAR 0 2
67227: PUSH
67228: LD_VAR 0 1
67232: PPUSH
67233: LD_INT 1
67235: PPUSH
67236: CALL_OW 275
67240: PUSH
67241: LD_VAR 0 1
67245: PPUSH
67246: LD_INT 2
67248: PPUSH
67249: CALL_OW 275
67253: PUSH
67254: LD_VAR 0 1
67258: PPUSH
67259: LD_INT 3
67261: PPUSH
67262: CALL_OW 275
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// end ;
67272: LD_VAR 0 2
67276: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67277: LD_INT 0
67279: PPUSH
67280: PPUSH
// result := array ;
67281: LD_ADDR_VAR 0 3
67285: PUSH
67286: LD_VAR 0 1
67290: ST_TO_ADDR
// if size >= result then
67291: LD_VAR 0 2
67295: PUSH
67296: LD_VAR 0 3
67300: GREATEREQUAL
67301: IFFALSE 67305
// exit ;
67303: GO 67355
// if size then
67305: LD_VAR 0 2
67309: IFFALSE 67355
// for i := array downto size do
67311: LD_ADDR_VAR 0 4
67315: PUSH
67316: DOUBLE
67317: LD_VAR 0 1
67321: INC
67322: ST_TO_ADDR
67323: LD_VAR 0 2
67327: PUSH
67328: FOR_DOWNTO
67329: IFFALSE 67353
// result := Delete ( result , result ) ;
67331: LD_ADDR_VAR 0 3
67335: PUSH
67336: LD_VAR 0 3
67340: PPUSH
67341: LD_VAR 0 3
67345: PPUSH
67346: CALL_OW 3
67350: ST_TO_ADDR
67351: GO 67328
67353: POP
67354: POP
// end ;
67355: LD_VAR 0 3
67359: RET
// export function ComExit ( unit ) ; var tmp ; begin
67360: LD_INT 0
67362: PPUSH
67363: PPUSH
// if not IsInUnit ( unit ) then
67364: LD_VAR 0 1
67368: PPUSH
67369: CALL_OW 310
67373: NOT
67374: IFFALSE 67378
// exit ;
67376: GO 67438
// tmp := IsInUnit ( unit ) ;
67378: LD_ADDR_VAR 0 3
67382: PUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: CALL_OW 310
67392: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67393: LD_VAR 0 3
67397: PPUSH
67398: CALL_OW 247
67402: PUSH
67403: LD_INT 2
67405: EQUAL
67406: IFFALSE 67419
// ComExitVehicle ( unit ) else
67408: LD_VAR 0 1
67412: PPUSH
67413: CALL_OW 121
67417: GO 67428
// ComExitBuilding ( unit ) ;
67419: LD_VAR 0 1
67423: PPUSH
67424: CALL_OW 122
// result := tmp ;
67428: LD_ADDR_VAR 0 2
67432: PUSH
67433: LD_VAR 0 3
67437: ST_TO_ADDR
// end ;
67438: LD_VAR 0 2
67442: RET
// export function ComExitAll ( units ) ; var i ; begin
67443: LD_INT 0
67445: PPUSH
67446: PPUSH
// if not units then
67447: LD_VAR 0 1
67451: NOT
67452: IFFALSE 67456
// exit ;
67454: GO 67482
// for i in units do
67456: LD_ADDR_VAR 0 3
67460: PUSH
67461: LD_VAR 0 1
67465: PUSH
67466: FOR_IN
67467: IFFALSE 67480
// ComExit ( i ) ;
67469: LD_VAR 0 3
67473: PPUSH
67474: CALL 67360 0 1
67478: GO 67466
67480: POP
67481: POP
// end ;
67482: LD_VAR 0 2
67486: RET
// export function ResetHc ; begin
67487: LD_INT 0
67489: PPUSH
// InitHc ;
67490: CALL_OW 19
// hc_importance := 0 ;
67494: LD_ADDR_OWVAR 32
67498: PUSH
67499: LD_INT 0
67501: ST_TO_ADDR
// end ;
67502: LD_VAR 0 1
67506: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67507: LD_INT 0
67509: PPUSH
67510: PPUSH
67511: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67512: LD_ADDR_VAR 0 6
67516: PUSH
67517: LD_VAR 0 1
67521: PUSH
67522: LD_VAR 0 3
67526: PLUS
67527: PUSH
67528: LD_INT 2
67530: DIV
67531: ST_TO_ADDR
// if _x < 0 then
67532: LD_VAR 0 6
67536: PUSH
67537: LD_INT 0
67539: LESS
67540: IFFALSE 67557
// _x := _x * - 1 ;
67542: LD_ADDR_VAR 0 6
67546: PUSH
67547: LD_VAR 0 6
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: MUL
67556: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67557: LD_ADDR_VAR 0 7
67561: PUSH
67562: LD_VAR 0 2
67566: PUSH
67567: LD_VAR 0 4
67571: PLUS
67572: PUSH
67573: LD_INT 2
67575: DIV
67576: ST_TO_ADDR
// if _y < 0 then
67577: LD_VAR 0 7
67581: PUSH
67582: LD_INT 0
67584: LESS
67585: IFFALSE 67602
// _y := _y * - 1 ;
67587: LD_ADDR_VAR 0 7
67591: PUSH
67592: LD_VAR 0 7
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: MUL
67601: ST_TO_ADDR
// result := [ _x , _y ] ;
67602: LD_ADDR_VAR 0 5
67606: PUSH
67607: LD_VAR 0 6
67611: PUSH
67612: LD_VAR 0 7
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// end ;
67621: LD_VAR 0 5
67625: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67626: LD_INT 0
67628: PPUSH
67629: PPUSH
67630: PPUSH
67631: PPUSH
// task := GetTaskList ( unit ) ;
67632: LD_ADDR_VAR 0 7
67636: PUSH
67637: LD_VAR 0 1
67641: PPUSH
67642: CALL_OW 437
67646: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67647: LD_VAR 0 7
67651: NOT
67652: IFFALSE 67671
67654: PUSH
67655: LD_VAR 0 1
67659: PPUSH
67660: LD_VAR 0 2
67664: PPUSH
67665: CALL_OW 308
67669: NOT
67670: AND
67671: IFFALSE 67675
// exit ;
67673: GO 67793
// if IsInArea ( unit , area ) then
67675: LD_VAR 0 1
67679: PPUSH
67680: LD_VAR 0 2
67684: PPUSH
67685: CALL_OW 308
67689: IFFALSE 67707
// begin ComMoveToArea ( unit , goAway ) ;
67691: LD_VAR 0 1
67695: PPUSH
67696: LD_VAR 0 3
67700: PPUSH
67701: CALL_OW 113
// exit ;
67705: GO 67793
// end ; if task [ 1 ] [ 1 ] <> M then
67707: LD_VAR 0 7
67711: PUSH
67712: LD_INT 1
67714: ARRAY
67715: PUSH
67716: LD_INT 1
67718: ARRAY
67719: PUSH
67720: LD_STRING M
67722: NONEQUAL
67723: IFFALSE 67727
// exit ;
67725: GO 67793
// x := task [ 1 ] [ 2 ] ;
67727: LD_ADDR_VAR 0 5
67731: PUSH
67732: LD_VAR 0 7
67736: PUSH
67737: LD_INT 1
67739: ARRAY
67740: PUSH
67741: LD_INT 2
67743: ARRAY
67744: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67745: LD_ADDR_VAR 0 6
67749: PUSH
67750: LD_VAR 0 7
67754: PUSH
67755: LD_INT 1
67757: ARRAY
67758: PUSH
67759: LD_INT 3
67761: ARRAY
67762: ST_TO_ADDR
// if InArea ( x , y , area ) then
67763: LD_VAR 0 5
67767: PPUSH
67768: LD_VAR 0 6
67772: PPUSH
67773: LD_VAR 0 2
67777: PPUSH
67778: CALL_OW 309
67782: IFFALSE 67793
// ComStop ( unit ) ;
67784: LD_VAR 0 1
67788: PPUSH
67789: CALL_OW 141
// end ;
67793: LD_VAR 0 4
67797: RET
// export function Abs ( value ) ; begin
67798: LD_INT 0
67800: PPUSH
// result := value ;
67801: LD_ADDR_VAR 0 2
67805: PUSH
67806: LD_VAR 0 1
67810: ST_TO_ADDR
// if value < 0 then
67811: LD_VAR 0 1
67815: PUSH
67816: LD_INT 0
67818: LESS
67819: IFFALSE 67836
// result := value * - 1 ;
67821: LD_ADDR_VAR 0 2
67825: PUSH
67826: LD_VAR 0 1
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: MUL
67835: ST_TO_ADDR
// end ;
67836: LD_VAR 0 2
67840: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67841: LD_INT 0
67843: PPUSH
67844: PPUSH
67845: PPUSH
67846: PPUSH
67847: PPUSH
67848: PPUSH
67849: PPUSH
67850: PPUSH
// if not unit or not building then
67851: LD_VAR 0 1
67855: NOT
67856: IFTRUE 67865
67858: PUSH
67859: LD_VAR 0 2
67863: NOT
67864: OR
67865: IFFALSE 67869
// exit ;
67867: GO 68097
// x := GetX ( building ) ;
67869: LD_ADDR_VAR 0 4
67873: PUSH
67874: LD_VAR 0 2
67878: PPUSH
67879: CALL_OW 250
67883: ST_TO_ADDR
// y := GetY ( building ) ;
67884: LD_ADDR_VAR 0 6
67888: PUSH
67889: LD_VAR 0 2
67893: PPUSH
67894: CALL_OW 251
67898: ST_TO_ADDR
// d := GetDir ( building ) ;
67899: LD_ADDR_VAR 0 8
67903: PUSH
67904: LD_VAR 0 2
67908: PPUSH
67909: CALL_OW 254
67913: ST_TO_ADDR
// r := 4 ;
67914: LD_ADDR_VAR 0 9
67918: PUSH
67919: LD_INT 4
67921: ST_TO_ADDR
// for i := 1 to 5 do
67922: LD_ADDR_VAR 0 10
67926: PUSH
67927: DOUBLE
67928: LD_INT 1
67930: DEC
67931: ST_TO_ADDR
67932: LD_INT 5
67934: PUSH
67935: FOR_TO
67936: IFFALSE 68095
// begin _x := ShiftX ( x , d , r + i ) ;
67938: LD_ADDR_VAR 0 5
67942: PUSH
67943: LD_VAR 0 4
67947: PPUSH
67948: LD_VAR 0 8
67952: PPUSH
67953: LD_VAR 0 9
67957: PUSH
67958: LD_VAR 0 10
67962: PLUS
67963: PPUSH
67964: CALL_OW 272
67968: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67969: LD_ADDR_VAR 0 7
67973: PUSH
67974: LD_VAR 0 6
67978: PPUSH
67979: LD_VAR 0 8
67983: PPUSH
67984: LD_VAR 0 9
67988: PUSH
67989: LD_VAR 0 10
67993: PLUS
67994: PPUSH
67995: CALL_OW 273
67999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68000: LD_VAR 0 5
68004: PPUSH
68005: LD_VAR 0 7
68009: PPUSH
68010: CALL_OW 488
68014: IFFALSE 68049
68016: PUSH
68017: LD_VAR 0 5
68021: PPUSH
68022: LD_VAR 0 7
68026: PPUSH
68027: CALL_OW 428
68031: PPUSH
68032: CALL_OW 247
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: IN
68047: NOT
68048: AND
68049: IFFALSE 68093
// begin ComMoveXY ( unit , _x , _y ) ;
68051: LD_VAR 0 1
68055: PPUSH
68056: LD_VAR 0 5
68060: PPUSH
68061: LD_VAR 0 7
68065: PPUSH
68066: CALL_OW 111
// result := [ _x , _y ] ;
68070: LD_ADDR_VAR 0 3
68074: PUSH
68075: LD_VAR 0 5
68079: PUSH
68080: LD_VAR 0 7
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: ST_TO_ADDR
// exit ;
68089: POP
68090: POP
68091: GO 68097
// end ; end ;
68093: GO 67935
68095: POP
68096: POP
// end ;
68097: LD_VAR 0 3
68101: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68102: LD_INT 0
68104: PPUSH
68105: PPUSH
68106: PPUSH
// result := 0 ;
68107: LD_ADDR_VAR 0 3
68111: PUSH
68112: LD_INT 0
68114: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68115: LD_VAR 0 1
68119: PUSH
68120: LD_INT 0
68122: LESS
68123: IFTRUE 68135
68125: PUSH
68126: LD_VAR 0 1
68130: PUSH
68131: LD_INT 8
68133: GREATER
68134: OR
68135: IFTRUE 68147
68137: PUSH
68138: LD_VAR 0 2
68142: PUSH
68143: LD_INT 0
68145: LESS
68146: OR
68147: IFTRUE 68159
68149: PUSH
68150: LD_VAR 0 2
68154: PUSH
68155: LD_INT 8
68157: GREATER
68158: OR
68159: IFFALSE 68163
// exit ;
68161: GO 68238
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68163: LD_ADDR_VAR 0 4
68167: PUSH
68168: LD_INT 22
68170: PUSH
68171: LD_VAR 0 2
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PPUSH
68180: CALL_OW 69
68184: PUSH
68185: FOR_IN
68186: IFFALSE 68236
// begin un := UnitShoot ( i ) ;
68188: LD_ADDR_VAR 0 5
68192: PUSH
68193: LD_VAR 0 4
68197: PPUSH
68198: CALL_OW 504
68202: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68203: LD_VAR 0 5
68207: PPUSH
68208: CALL_OW 255
68212: PUSH
68213: LD_VAR 0 1
68217: EQUAL
68218: IFFALSE 68234
// begin result := un ;
68220: LD_ADDR_VAR 0 3
68224: PUSH
68225: LD_VAR 0 5
68229: ST_TO_ADDR
// exit ;
68230: POP
68231: POP
68232: GO 68238
// end ; end ;
68234: GO 68185
68236: POP
68237: POP
// end ;
68238: LD_VAR 0 3
68242: RET
// export function GetCargoBay ( units ) ; begin
68243: LD_INT 0
68245: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68246: LD_ADDR_VAR 0 2
68250: PUSH
68251: LD_VAR 0 1
68255: PPUSH
68256: LD_INT 2
68258: PUSH
68259: LD_INT 34
68261: PUSH
68262: LD_INT 12
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 34
68271: PUSH
68272: LD_INT 51
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 34
68281: PUSH
68282: LD_INT 32
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 34
68291: PUSH
68292: LD_INT 89
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: PPUSH
68306: CALL_OW 72
68310: ST_TO_ADDR
// end ;
68311: LD_VAR 0 2
68315: RET
// export function Negate ( value ) ; begin
68316: LD_INT 0
68318: PPUSH
// result := not value ;
68319: LD_ADDR_VAR 0 2
68323: PUSH
68324: LD_VAR 0 1
68328: NOT
68329: ST_TO_ADDR
// end ;
68330: LD_VAR 0 2
68334: RET
// export function Inc ( value ) ; begin
68335: LD_INT 0
68337: PPUSH
// result := value + 1 ;
68338: LD_ADDR_VAR 0 2
68342: PUSH
68343: LD_VAR 0 1
68347: PUSH
68348: LD_INT 1
68350: PLUS
68351: ST_TO_ADDR
// end ;
68352: LD_VAR 0 2
68356: RET
// export function Dec ( value ) ; begin
68357: LD_INT 0
68359: PPUSH
// result := value - 1 ;
68360: LD_ADDR_VAR 0 2
68364: PUSH
68365: LD_VAR 0 1
68369: PUSH
68370: LD_INT 1
68372: MINUS
68373: ST_TO_ADDR
// end ;
68374: LD_VAR 0 2
68378: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68379: LD_INT 0
68381: PPUSH
68382: PPUSH
68383: PPUSH
68384: PPUSH
68385: PPUSH
68386: PPUSH
68387: PPUSH
68388: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68389: LD_VAR 0 1
68393: PPUSH
68394: LD_VAR 0 2
68398: PPUSH
68399: CALL_OW 488
68403: NOT
68404: IFTRUE 68423
68406: PUSH
68407: LD_VAR 0 3
68411: PPUSH
68412: LD_VAR 0 4
68416: PPUSH
68417: CALL_OW 488
68421: NOT
68422: OR
68423: IFFALSE 68436
// begin result := - 1 ;
68425: LD_ADDR_VAR 0 5
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: ST_TO_ADDR
// exit ;
68434: GO 68671
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68436: LD_ADDR_VAR 0 12
68440: PUSH
68441: LD_VAR 0 1
68445: PPUSH
68446: LD_VAR 0 2
68450: PPUSH
68451: LD_VAR 0 3
68455: PPUSH
68456: LD_VAR 0 4
68460: PPUSH
68461: CALL 67507 0 4
68465: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68466: LD_ADDR_VAR 0 11
68470: PUSH
68471: LD_VAR 0 1
68475: PPUSH
68476: LD_VAR 0 2
68480: PPUSH
68481: LD_VAR 0 12
68485: PUSH
68486: LD_INT 1
68488: ARRAY
68489: PPUSH
68490: LD_VAR 0 12
68494: PUSH
68495: LD_INT 2
68497: ARRAY
68498: PPUSH
68499: CALL_OW 298
68503: ST_TO_ADDR
// distance := 9999 ;
68504: LD_ADDR_VAR 0 10
68508: PUSH
68509: LD_INT 9999
68511: ST_TO_ADDR
// for i := 0 to 5 do
68512: LD_ADDR_VAR 0 6
68516: PUSH
68517: DOUBLE
68518: LD_INT 0
68520: DEC
68521: ST_TO_ADDR
68522: LD_INT 5
68524: PUSH
68525: FOR_TO
68526: IFFALSE 68669
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68528: LD_ADDR_VAR 0 7
68532: PUSH
68533: LD_VAR 0 1
68537: PPUSH
68538: LD_VAR 0 6
68542: PPUSH
68543: LD_VAR 0 11
68547: PPUSH
68548: CALL_OW 272
68552: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68553: LD_ADDR_VAR 0 8
68557: PUSH
68558: LD_VAR 0 2
68562: PPUSH
68563: LD_VAR 0 6
68567: PPUSH
68568: LD_VAR 0 11
68572: PPUSH
68573: CALL_OW 273
68577: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68578: LD_VAR 0 7
68582: PPUSH
68583: LD_VAR 0 8
68587: PPUSH
68588: CALL_OW 488
68592: NOT
68593: IFFALSE 68597
// continue ;
68595: GO 68525
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68597: LD_ADDR_VAR 0 9
68601: PUSH
68602: LD_VAR 0 12
68606: PUSH
68607: LD_INT 1
68609: ARRAY
68610: PPUSH
68611: LD_VAR 0 12
68615: PUSH
68616: LD_INT 2
68618: ARRAY
68619: PPUSH
68620: LD_VAR 0 7
68624: PPUSH
68625: LD_VAR 0 8
68629: PPUSH
68630: CALL_OW 298
68634: ST_TO_ADDR
// if tmp < distance then
68635: LD_VAR 0 9
68639: PUSH
68640: LD_VAR 0 10
68644: LESS
68645: IFFALSE 68667
// begin result := i ;
68647: LD_ADDR_VAR 0 5
68651: PUSH
68652: LD_VAR 0 6
68656: ST_TO_ADDR
// distance := tmp ;
68657: LD_ADDR_VAR 0 10
68661: PUSH
68662: LD_VAR 0 9
68666: ST_TO_ADDR
// end ; end ;
68667: GO 68525
68669: POP
68670: POP
// end ;
68671: LD_VAR 0 5
68675: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68676: LD_INT 0
68678: PPUSH
68679: PPUSH
// if not driver or not IsInUnit ( driver ) then
68680: LD_VAR 0 1
68684: NOT
68685: IFTRUE 68699
68687: PUSH
68688: LD_VAR 0 1
68692: PPUSH
68693: CALL_OW 310
68697: NOT
68698: OR
68699: IFFALSE 68703
// exit ;
68701: GO 68793
// vehicle := IsInUnit ( driver ) ;
68703: LD_ADDR_VAR 0 3
68707: PUSH
68708: LD_VAR 0 1
68712: PPUSH
68713: CALL_OW 310
68717: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68718: LD_VAR 0 1
68722: PPUSH
68723: LD_STRING \
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: LD_INT 0
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: LD_INT 0
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: PUSH
68753: LD_STRING E
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_VAR 0 3
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PPUSH
68789: CALL_OW 446
// end ;
68793: LD_VAR 0 2
68797: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68798: LD_INT 0
68800: PPUSH
68801: PPUSH
// if not driver or not IsInUnit ( driver ) then
68802: LD_VAR 0 1
68806: NOT
68807: IFTRUE 68821
68809: PUSH
68810: LD_VAR 0 1
68814: PPUSH
68815: CALL_OW 310
68819: NOT
68820: OR
68821: IFFALSE 68825
// exit ;
68823: GO 68915
// vehicle := IsInUnit ( driver ) ;
68825: LD_ADDR_VAR 0 3
68829: PUSH
68830: LD_VAR 0 1
68834: PPUSH
68835: CALL_OW 310
68839: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68840: LD_VAR 0 1
68844: PPUSH
68845: LD_STRING \
68847: PUSH
68848: LD_INT 0
68850: PUSH
68851: LD_INT 0
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: LD_INT 0
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: PUSH
68875: LD_STRING E
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: LD_VAR 0 3
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PPUSH
68911: CALL_OW 447
// end ;
68915: LD_VAR 0 2
68919: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68920: LD_INT 0
68922: PPUSH
68923: PPUSH
68924: PPUSH
// tmp := [ ] ;
68925: LD_ADDR_VAR 0 5
68929: PUSH
68930: EMPTY
68931: ST_TO_ADDR
// for i in units do
68932: LD_ADDR_VAR 0 4
68936: PUSH
68937: LD_VAR 0 1
68941: PUSH
68942: FOR_IN
68943: IFFALSE 68981
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68945: LD_ADDR_VAR 0 5
68949: PUSH
68950: LD_VAR 0 5
68954: PPUSH
68955: LD_VAR 0 5
68959: PUSH
68960: LD_INT 1
68962: PLUS
68963: PPUSH
68964: LD_VAR 0 4
68968: PPUSH
68969: CALL_OW 256
68973: PPUSH
68974: CALL_OW 2
68978: ST_TO_ADDR
68979: GO 68942
68981: POP
68982: POP
// if not tmp then
68983: LD_VAR 0 5
68987: NOT
68988: IFFALSE 68992
// exit ;
68990: GO 69040
// if asc then
68992: LD_VAR 0 2
68996: IFFALSE 69020
// result := SortListByListAsc ( units , tmp ) else
68998: LD_ADDR_VAR 0 3
69002: PUSH
69003: LD_VAR 0 1
69007: PPUSH
69008: LD_VAR 0 5
69012: PPUSH
69013: CALL_OW 76
69017: ST_TO_ADDR
69018: GO 69040
// result := SortListByListDesc ( units , tmp ) ;
69020: LD_ADDR_VAR 0 3
69024: PUSH
69025: LD_VAR 0 1
69029: PPUSH
69030: LD_VAR 0 5
69034: PPUSH
69035: CALL_OW 77
69039: ST_TO_ADDR
// end ;
69040: LD_VAR 0 3
69044: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69045: LD_INT 0
69047: PPUSH
69048: PPUSH
// task := GetTaskList ( mech ) ;
69049: LD_ADDR_VAR 0 4
69053: PUSH
69054: LD_VAR 0 1
69058: PPUSH
69059: CALL_OW 437
69063: ST_TO_ADDR
// if not task then
69064: LD_VAR 0 4
69068: NOT
69069: IFFALSE 69073
// exit ;
69071: GO 69117
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69073: LD_ADDR_VAR 0 3
69077: PUSH
69078: LD_VAR 0 4
69082: PUSH
69083: LD_INT 1
69085: ARRAY
69086: PUSH
69087: LD_INT 1
69089: ARRAY
69090: PUSH
69091: LD_STRING r
69093: EQUAL
69094: IFFALSE 69116
69096: PUSH
69097: LD_VAR 0 4
69101: PUSH
69102: LD_INT 1
69104: ARRAY
69105: PUSH
69106: LD_INT 4
69108: ARRAY
69109: PUSH
69110: LD_VAR 0 2
69114: EQUAL
69115: AND
69116: ST_TO_ADDR
// end ;
69117: LD_VAR 0 3
69121: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69122: LD_INT 0
69124: PPUSH
// SetDir ( unit , d ) ;
69125: LD_VAR 0 1
69129: PPUSH
69130: LD_VAR 0 4
69134: PPUSH
69135: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
69139: LD_ADDR_VAR 0 6
69143: PUSH
69144: LD_VAR 0 1
69148: PPUSH
69149: LD_VAR 0 2
69153: PPUSH
69154: LD_VAR 0 3
69158: PPUSH
69159: LD_VAR 0 5
69163: PPUSH
69164: CALL_OW 48
69168: ST_TO_ADDR
// end ;
69169: LD_VAR 0 6
69173: RET
// export function ToNaturalNumber ( number ) ; begin
69174: LD_INT 0
69176: PPUSH
// result := number div 1 ;
69177: LD_ADDR_VAR 0 2
69181: PUSH
69182: LD_VAR 0 1
69186: PUSH
69187: LD_INT 1
69189: DIV
69190: ST_TO_ADDR
// if number < 0 then
69191: LD_VAR 0 1
69195: PUSH
69196: LD_INT 0
69198: LESS
69199: IFFALSE 69209
// result := 0 ;
69201: LD_ADDR_VAR 0 2
69205: PUSH
69206: LD_INT 0
69208: ST_TO_ADDR
// end ;
69209: LD_VAR 0 2
69213: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
69214: LD_INT 0
69216: PPUSH
69217: PPUSH
69218: PPUSH
// if not buildings then
69219: LD_VAR 0 1
69223: NOT
69224: IFFALSE 69228
// exit ;
69226: GO 69343
// tmp := [ ] ;
69228: LD_ADDR_VAR 0 5
69232: PUSH
69233: EMPTY
69234: ST_TO_ADDR
// for b in buildings do
69235: LD_ADDR_VAR 0 4
69239: PUSH
69240: LD_VAR 0 1
69244: PUSH
69245: FOR_IN
69246: IFFALSE 69284
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
69248: LD_ADDR_VAR 0 5
69252: PUSH
69253: LD_VAR 0 5
69257: PPUSH
69258: LD_VAR 0 5
69262: PUSH
69263: LD_INT 1
69265: PLUS
69266: PPUSH
69267: LD_VAR 0 4
69271: PPUSH
69272: CALL_OW 266
69276: PPUSH
69277: CALL_OW 1
69281: ST_TO_ADDR
69282: GO 69245
69284: POP
69285: POP
// if not tmp then
69286: LD_VAR 0 5
69290: NOT
69291: IFFALSE 69295
// exit ;
69293: GO 69343
// if asc then
69295: LD_VAR 0 2
69299: IFFALSE 69323
// result := SortListByListAsc ( buildings , tmp ) else
69301: LD_ADDR_VAR 0 3
69305: PUSH
69306: LD_VAR 0 1
69310: PPUSH
69311: LD_VAR 0 5
69315: PPUSH
69316: CALL_OW 76
69320: ST_TO_ADDR
69321: GO 69343
// result := SortListByListDesc ( buildings , tmp ) ;
69323: LD_ADDR_VAR 0 3
69327: PUSH
69328: LD_VAR 0 1
69332: PPUSH
69333: LD_VAR 0 5
69337: PPUSH
69338: CALL_OW 77
69342: ST_TO_ADDR
// end ;
69343: LD_VAR 0 3
69347: RET
// export function SortByClass ( units , class ) ; var un ; begin
69348: LD_INT 0
69350: PPUSH
69351: PPUSH
// if not units or not class then
69352: LD_VAR 0 1
69356: NOT
69357: IFTRUE 69366
69359: PUSH
69360: LD_VAR 0 2
69364: NOT
69365: OR
69366: IFFALSE 69370
// exit ;
69368: GO 69465
// result := [ ] ;
69370: LD_ADDR_VAR 0 3
69374: PUSH
69375: EMPTY
69376: ST_TO_ADDR
// for un in units do
69377: LD_ADDR_VAR 0 4
69381: PUSH
69382: LD_VAR 0 1
69386: PUSH
69387: FOR_IN
69388: IFFALSE 69463
// if GetClass ( un ) = class then
69390: LD_VAR 0 4
69394: PPUSH
69395: CALL_OW 257
69399: PUSH
69400: LD_VAR 0 2
69404: EQUAL
69405: IFFALSE 69432
// result := Insert ( result , 1 , un ) else
69407: LD_ADDR_VAR 0 3
69411: PUSH
69412: LD_VAR 0 3
69416: PPUSH
69417: LD_INT 1
69419: PPUSH
69420: LD_VAR 0 4
69424: PPUSH
69425: CALL_OW 2
69429: ST_TO_ADDR
69430: GO 69461
// result := Replace ( result , result + 1 , un ) ;
69432: LD_ADDR_VAR 0 3
69436: PUSH
69437: LD_VAR 0 3
69441: PPUSH
69442: LD_VAR 0 3
69446: PUSH
69447: LD_INT 1
69449: PLUS
69450: PPUSH
69451: LD_VAR 0 4
69455: PPUSH
69456: CALL_OW 1
69460: ST_TO_ADDR
69461: GO 69387
69463: POP
69464: POP
// end ;
69465: LD_VAR 0 3
69469: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69470: LD_INT 0
69472: PPUSH
69473: PPUSH
69474: PPUSH
69475: PPUSH
69476: PPUSH
69477: PPUSH
69478: PPUSH
// result := [ ] ;
69479: LD_ADDR_VAR 0 4
69483: PUSH
69484: EMPTY
69485: ST_TO_ADDR
// if x - r < 0 then
69486: LD_VAR 0 1
69490: PUSH
69491: LD_VAR 0 3
69495: MINUS
69496: PUSH
69497: LD_INT 0
69499: LESS
69500: IFFALSE 69512
// min_x := 0 else
69502: LD_ADDR_VAR 0 8
69506: PUSH
69507: LD_INT 0
69509: ST_TO_ADDR
69510: GO 69528
// min_x := x - r ;
69512: LD_ADDR_VAR 0 8
69516: PUSH
69517: LD_VAR 0 1
69521: PUSH
69522: LD_VAR 0 3
69526: MINUS
69527: ST_TO_ADDR
// if y - r < 0 then
69528: LD_VAR 0 2
69532: PUSH
69533: LD_VAR 0 3
69537: MINUS
69538: PUSH
69539: LD_INT 0
69541: LESS
69542: IFFALSE 69554
// min_y := 0 else
69544: LD_ADDR_VAR 0 7
69548: PUSH
69549: LD_INT 0
69551: ST_TO_ADDR
69552: GO 69570
// min_y := y - r ;
69554: LD_ADDR_VAR 0 7
69558: PUSH
69559: LD_VAR 0 2
69563: PUSH
69564: LD_VAR 0 3
69568: MINUS
69569: ST_TO_ADDR
// max_x := x + r ;
69570: LD_ADDR_VAR 0 9
69574: PUSH
69575: LD_VAR 0 1
69579: PUSH
69580: LD_VAR 0 3
69584: PLUS
69585: ST_TO_ADDR
// max_y := y + r ;
69586: LD_ADDR_VAR 0 10
69590: PUSH
69591: LD_VAR 0 2
69595: PUSH
69596: LD_VAR 0 3
69600: PLUS
69601: ST_TO_ADDR
// for _x = min_x to max_x do
69602: LD_ADDR_VAR 0 5
69606: PUSH
69607: DOUBLE
69608: LD_VAR 0 8
69612: DEC
69613: ST_TO_ADDR
69614: LD_VAR 0 9
69618: PUSH
69619: FOR_TO
69620: IFFALSE 69721
// for _y = min_y to max_y do
69622: LD_ADDR_VAR 0 6
69626: PUSH
69627: DOUBLE
69628: LD_VAR 0 7
69632: DEC
69633: ST_TO_ADDR
69634: LD_VAR 0 10
69638: PUSH
69639: FOR_TO
69640: IFFALSE 69717
// begin if not ValidHex ( _x , _y ) then
69642: LD_VAR 0 5
69646: PPUSH
69647: LD_VAR 0 6
69651: PPUSH
69652: CALL_OW 488
69656: NOT
69657: IFFALSE 69661
// continue ;
69659: GO 69639
// if GetResourceTypeXY ( _x , _y ) then
69661: LD_VAR 0 5
69665: PPUSH
69666: LD_VAR 0 6
69670: PPUSH
69671: CALL_OW 283
69675: IFFALSE 69715
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69677: LD_ADDR_VAR 0 4
69681: PUSH
69682: LD_VAR 0 4
69686: PPUSH
69687: LD_VAR 0 4
69691: PUSH
69692: LD_INT 1
69694: PLUS
69695: PPUSH
69696: LD_VAR 0 5
69700: PUSH
69701: LD_VAR 0 6
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PPUSH
69710: CALL_OW 1
69714: ST_TO_ADDR
// end ;
69715: GO 69639
69717: POP
69718: POP
69719: GO 69619
69721: POP
69722: POP
// end ;
69723: LD_VAR 0 4
69727: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69728: LD_INT 0
69730: PPUSH
69731: PPUSH
69732: PPUSH
69733: PPUSH
69734: PPUSH
69735: PPUSH
69736: PPUSH
69737: PPUSH
// if not units then
69738: LD_VAR 0 1
69742: NOT
69743: IFFALSE 69747
// exit ;
69745: GO 70279
// result := UnitFilter ( units , [ f_ok ] ) ;
69747: LD_ADDR_VAR 0 3
69751: PUSH
69752: LD_VAR 0 1
69756: PPUSH
69757: LD_INT 50
69759: PUSH
69760: EMPTY
69761: LIST
69762: PPUSH
69763: CALL_OW 72
69767: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69768: LD_ADDR_VAR 0 8
69772: PUSH
69773: LD_VAR 0 1
69777: PUSH
69778: LD_INT 1
69780: ARRAY
69781: PPUSH
69782: CALL_OW 255
69786: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69787: LD_ADDR_VAR 0 10
69791: PUSH
69792: LD_INT 29
69794: PUSH
69795: LD_INT 91
69797: PUSH
69798: LD_INT 49
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: LIST
69805: ST_TO_ADDR
// if not result then
69806: LD_VAR 0 3
69810: NOT
69811: IFFALSE 69815
// exit ;
69813: GO 70279
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69815: LD_ADDR_VAR 0 5
69819: PUSH
69820: LD_INT 81
69822: PUSH
69823: LD_VAR 0 8
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PPUSH
69832: CALL_OW 69
69836: ST_TO_ADDR
// for i in result do
69837: LD_ADDR_VAR 0 4
69841: PUSH
69842: LD_VAR 0 3
69846: PUSH
69847: FOR_IN
69848: IFFALSE 70277
// begin tag := GetTag ( i ) + 1 ;
69850: LD_ADDR_VAR 0 9
69854: PUSH
69855: LD_VAR 0 4
69859: PPUSH
69860: CALL_OW 110
69864: PUSH
69865: LD_INT 1
69867: PLUS
69868: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69869: LD_ADDR_VAR 0 7
69873: PUSH
69874: LD_VAR 0 4
69878: PPUSH
69879: CALL_OW 250
69883: PPUSH
69884: LD_VAR 0 4
69888: PPUSH
69889: CALL_OW 251
69893: PPUSH
69894: LD_INT 4
69896: PPUSH
69897: CALL 69470 0 3
69901: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69902: LD_VAR 0 4
69906: PPUSH
69907: CALL_OW 247
69911: PUSH
69912: LD_INT 2
69914: EQUAL
69915: IFFALSE 69927
69917: PUSH
69918: LD_VAR 0 7
69922: PUSH
69923: LD_INT 2
69925: GREATER
69926: AND
69927: IFFALSE 69947
69929: PUSH
69930: LD_VAR 0 4
69934: PPUSH
69935: CALL_OW 264
69939: PUSH
69940: LD_VAR 0 10
69944: IN
69945: NOT
69946: AND
69947: IFFALSE 69986
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69949: LD_VAR 0 4
69953: PPUSH
69954: LD_VAR 0 7
69958: PUSH
69959: LD_INT 1
69961: ARRAY
69962: PUSH
69963: LD_INT 1
69965: ARRAY
69966: PPUSH
69967: LD_VAR 0 7
69971: PUSH
69972: LD_INT 1
69974: ARRAY
69975: PUSH
69976: LD_INT 2
69978: ARRAY
69979: PPUSH
69980: CALL_OW 116
69984: GO 70275
// if path > tag then
69986: LD_VAR 0 2
69990: PUSH
69991: LD_VAR 0 9
69995: GREATER
69996: IFFALSE 70204
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69998: LD_ADDR_VAR 0 6
70002: PUSH
70003: LD_VAR 0 5
70007: PPUSH
70008: LD_INT 91
70010: PUSH
70011: LD_VAR 0 4
70015: PUSH
70016: LD_INT 8
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: PPUSH
70024: CALL_OW 72
70028: ST_TO_ADDR
// if nearEnemy then
70029: LD_VAR 0 6
70033: IFFALSE 70102
// begin if GetWeapon ( i ) = ru_time_lapser then
70035: LD_VAR 0 4
70039: PPUSH
70040: CALL_OW 264
70044: PUSH
70045: LD_INT 49
70047: EQUAL
70048: IFFALSE 70076
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70050: LD_VAR 0 4
70054: PPUSH
70055: LD_VAR 0 6
70059: PPUSH
70060: LD_VAR 0 4
70064: PPUSH
70065: CALL_OW 74
70069: PPUSH
70070: CALL_OW 112
70074: GO 70100
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70076: LD_VAR 0 4
70080: PPUSH
70081: LD_VAR 0 6
70085: PPUSH
70086: LD_VAR 0 4
70090: PPUSH
70091: CALL_OW 74
70095: PPUSH
70096: CALL 71360 0 2
// end else
70100: GO 70202
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70102: LD_VAR 0 4
70106: PPUSH
70107: LD_VAR 0 2
70111: PUSH
70112: LD_VAR 0 9
70116: ARRAY
70117: PUSH
70118: LD_INT 1
70120: ARRAY
70121: PPUSH
70122: LD_VAR 0 2
70126: PUSH
70127: LD_VAR 0 9
70131: ARRAY
70132: PUSH
70133: LD_INT 2
70135: ARRAY
70136: PPUSH
70137: CALL_OW 297
70141: PUSH
70142: LD_INT 6
70144: GREATER
70145: IFFALSE 70188
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70147: LD_VAR 0 4
70151: PPUSH
70152: LD_VAR 0 2
70156: PUSH
70157: LD_VAR 0 9
70161: ARRAY
70162: PUSH
70163: LD_INT 1
70165: ARRAY
70166: PPUSH
70167: LD_VAR 0 2
70171: PUSH
70172: LD_VAR 0 9
70176: ARRAY
70177: PUSH
70178: LD_INT 2
70180: ARRAY
70181: PPUSH
70182: CALL_OW 114
70186: GO 70202
// SetTag ( i , tag ) ;
70188: LD_VAR 0 4
70192: PPUSH
70193: LD_VAR 0 9
70197: PPUSH
70198: CALL_OW 109
// end else
70202: GO 70275
// if enemy then
70204: LD_VAR 0 5
70208: IFFALSE 70275
// begin if GetWeapon ( i ) = ru_time_lapser then
70210: LD_VAR 0 4
70214: PPUSH
70215: CALL_OW 264
70219: PUSH
70220: LD_INT 49
70222: EQUAL
70223: IFFALSE 70251
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70225: LD_VAR 0 4
70229: PPUSH
70230: LD_VAR 0 5
70234: PPUSH
70235: LD_VAR 0 4
70239: PPUSH
70240: CALL_OW 74
70244: PPUSH
70245: CALL_OW 112
70249: GO 70275
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70251: LD_VAR 0 4
70255: PPUSH
70256: LD_VAR 0 5
70260: PPUSH
70261: LD_VAR 0 4
70265: PPUSH
70266: CALL_OW 74
70270: PPUSH
70271: CALL 71360 0 2
// end ; end ;
70275: GO 69847
70277: POP
70278: POP
// end ;
70279: LD_VAR 0 3
70283: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70284: LD_INT 0
70286: PPUSH
70287: PPUSH
70288: PPUSH
// if not unit or IsInUnit ( unit ) then
70289: LD_VAR 0 1
70293: NOT
70294: IFTRUE 70307
70296: PUSH
70297: LD_VAR 0 1
70301: PPUSH
70302: CALL_OW 310
70306: OR
70307: IFFALSE 70311
// exit ;
70309: GO 70402
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70311: LD_ADDR_VAR 0 4
70315: PUSH
70316: LD_VAR 0 1
70320: PPUSH
70321: CALL_OW 250
70325: PPUSH
70326: LD_VAR 0 2
70330: PPUSH
70331: LD_INT 1
70333: PPUSH
70334: CALL_OW 272
70338: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70339: LD_ADDR_VAR 0 5
70343: PUSH
70344: LD_VAR 0 1
70348: PPUSH
70349: CALL_OW 251
70353: PPUSH
70354: LD_VAR 0 2
70358: PPUSH
70359: LD_INT 1
70361: PPUSH
70362: CALL_OW 273
70366: ST_TO_ADDR
// if ValidHex ( x , y ) then
70367: LD_VAR 0 4
70371: PPUSH
70372: LD_VAR 0 5
70376: PPUSH
70377: CALL_OW 488
70381: IFFALSE 70402
// ComTurnXY ( unit , x , y ) ;
70383: LD_VAR 0 1
70387: PPUSH
70388: LD_VAR 0 4
70392: PPUSH
70393: LD_VAR 0 5
70397: PPUSH
70398: CALL_OW 118
// end ;
70402: LD_VAR 0 3
70406: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70407: LD_INT 0
70409: PPUSH
70410: PPUSH
// result := false ;
70411: LD_ADDR_VAR 0 3
70415: PUSH
70416: LD_INT 0
70418: ST_TO_ADDR
// if not units then
70419: LD_VAR 0 2
70423: NOT
70424: IFFALSE 70428
// exit ;
70426: GO 70473
// for i in units do
70428: LD_ADDR_VAR 0 4
70432: PUSH
70433: LD_VAR 0 2
70437: PUSH
70438: FOR_IN
70439: IFFALSE 70471
// if See ( side , i ) then
70441: LD_VAR 0 1
70445: PPUSH
70446: LD_VAR 0 4
70450: PPUSH
70451: CALL_OW 292
70455: IFFALSE 70469
// begin result := true ;
70457: LD_ADDR_VAR 0 3
70461: PUSH
70462: LD_INT 1
70464: ST_TO_ADDR
// exit ;
70465: POP
70466: POP
70467: GO 70473
// end ;
70469: GO 70438
70471: POP
70472: POP
// end ;
70473: LD_VAR 0 3
70477: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70478: LD_INT 0
70480: PPUSH
70481: PPUSH
70482: PPUSH
70483: PPUSH
// if not unit or not points then
70484: LD_VAR 0 1
70488: NOT
70489: IFTRUE 70498
70491: PUSH
70492: LD_VAR 0 2
70496: NOT
70497: OR
70498: IFFALSE 70502
// exit ;
70500: GO 70592
// dist := 99999 ;
70502: LD_ADDR_VAR 0 5
70506: PUSH
70507: LD_INT 99999
70509: ST_TO_ADDR
// for i in points do
70510: LD_ADDR_VAR 0 4
70514: PUSH
70515: LD_VAR 0 2
70519: PUSH
70520: FOR_IN
70521: IFFALSE 70590
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70523: LD_ADDR_VAR 0 6
70527: PUSH
70528: LD_VAR 0 1
70532: PPUSH
70533: LD_VAR 0 4
70537: PUSH
70538: LD_INT 1
70540: ARRAY
70541: PPUSH
70542: LD_VAR 0 4
70546: PUSH
70547: LD_INT 2
70549: ARRAY
70550: PPUSH
70551: CALL_OW 297
70555: ST_TO_ADDR
// if tmpDist < dist then
70556: LD_VAR 0 6
70560: PUSH
70561: LD_VAR 0 5
70565: LESS
70566: IFFALSE 70588
// begin result := i ;
70568: LD_ADDR_VAR 0 3
70572: PUSH
70573: LD_VAR 0 4
70577: ST_TO_ADDR
// dist := tmpDist ;
70578: LD_ADDR_VAR 0 5
70582: PUSH
70583: LD_VAR 0 6
70587: ST_TO_ADDR
// end ; end ;
70588: GO 70520
70590: POP
70591: POP
// end ;
70592: LD_VAR 0 3
70596: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70597: LD_INT 0
70599: PPUSH
// uc_side := side ;
70600: LD_ADDR_OWVAR 20
70604: PUSH
70605: LD_VAR 0 1
70609: ST_TO_ADDR
// uc_nation := 3 ;
70610: LD_ADDR_OWVAR 21
70614: PUSH
70615: LD_INT 3
70617: ST_TO_ADDR
// vc_chassis := 25 ;
70618: LD_ADDR_OWVAR 37
70622: PUSH
70623: LD_INT 25
70625: ST_TO_ADDR
// vc_engine := engine_siberite ;
70626: LD_ADDR_OWVAR 39
70630: PUSH
70631: LD_INT 3
70633: ST_TO_ADDR
// vc_control := control_computer ;
70634: LD_ADDR_OWVAR 38
70638: PUSH
70639: LD_INT 3
70641: ST_TO_ADDR
// vc_weapon := 59 ;
70642: LD_ADDR_OWVAR 40
70646: PUSH
70647: LD_INT 59
70649: ST_TO_ADDR
// result := CreateVehicle ;
70650: LD_ADDR_VAR 0 5
70654: PUSH
70655: CALL_OW 45
70659: ST_TO_ADDR
// SetDir ( result , d ) ;
70660: LD_VAR 0 5
70664: PPUSH
70665: LD_VAR 0 4
70669: PPUSH
70670: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70674: LD_VAR 0 5
70678: PPUSH
70679: LD_VAR 0 2
70683: PPUSH
70684: LD_VAR 0 3
70688: PPUSH
70689: LD_INT 0
70691: PPUSH
70692: CALL_OW 48
// end ;
70696: LD_VAR 0 5
70700: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70701: LD_INT 0
70703: PPUSH
70704: PPUSH
70705: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70706: LD_ADDR_VAR 0 2
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70729: LD_VAR 0 1
70733: NOT
70734: IFTRUE 70767
70736: PUSH
70737: LD_VAR 0 1
70741: PPUSH
70742: CALL_OW 264
70746: PUSH
70747: LD_INT 12
70749: PUSH
70750: LD_INT 51
70752: PUSH
70753: LD_INT 32
70755: PUSH
70756: LD_INT 89
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: IN
70765: NOT
70766: OR
70767: IFFALSE 70771
// exit ;
70769: GO 70869
// for i := 1 to 3 do
70771: LD_ADDR_VAR 0 3
70775: PUSH
70776: DOUBLE
70777: LD_INT 1
70779: DEC
70780: ST_TO_ADDR
70781: LD_INT 3
70783: PUSH
70784: FOR_TO
70785: IFFALSE 70867
// begin tmp := GetCargo ( cargo , i ) ;
70787: LD_ADDR_VAR 0 4
70791: PUSH
70792: LD_VAR 0 1
70796: PPUSH
70797: LD_VAR 0 3
70801: PPUSH
70802: CALL_OW 289
70806: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70807: LD_ADDR_VAR 0 2
70811: PUSH
70812: LD_VAR 0 2
70816: PPUSH
70817: LD_VAR 0 3
70821: PPUSH
70822: LD_VAR 0 4
70826: PPUSH
70827: CALL_OW 1
70831: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70832: LD_ADDR_VAR 0 2
70836: PUSH
70837: LD_VAR 0 2
70841: PPUSH
70842: LD_INT 4
70844: PPUSH
70845: LD_VAR 0 2
70849: PUSH
70850: LD_INT 4
70852: ARRAY
70853: PUSH
70854: LD_VAR 0 4
70858: PLUS
70859: PPUSH
70860: CALL_OW 1
70864: ST_TO_ADDR
// end ;
70865: GO 70784
70867: POP
70868: POP
// end ;
70869: LD_VAR 0 2
70873: RET
// export function Length ( array ) ; begin
70874: LD_INT 0
70876: PPUSH
// result := array + 0 ;
70877: LD_ADDR_VAR 0 2
70881: PUSH
70882: LD_VAR 0 1
70886: PUSH
70887: LD_INT 0
70889: PLUS
70890: ST_TO_ADDR
// end ;
70891: LD_VAR 0 2
70895: RET
// export function PrepareArray ( array ) ; begin
70896: LD_INT 0
70898: PPUSH
// result := array diff 0 ;
70899: LD_ADDR_VAR 0 2
70903: PUSH
70904: LD_VAR 0 1
70908: PUSH
70909: LD_INT 0
70911: DIFF
70912: ST_TO_ADDR
// if not result [ 1 ] then
70913: LD_VAR 0 2
70917: PUSH
70918: LD_INT 1
70920: ARRAY
70921: NOT
70922: IFFALSE 70942
// result := Delete ( result , 1 ) ;
70924: LD_ADDR_VAR 0 2
70928: PUSH
70929: LD_VAR 0 2
70933: PPUSH
70934: LD_INT 1
70936: PPUSH
70937: CALL_OW 3
70941: ST_TO_ADDR
// end ;
70942: LD_VAR 0 2
70946: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70947: LD_INT 0
70949: PPUSH
70950: PPUSH
70951: PPUSH
70952: PPUSH
// sibRocketRange := 25 ;
70953: LD_ADDR_VAR 0 6
70957: PUSH
70958: LD_INT 25
70960: ST_TO_ADDR
// result := false ;
70961: LD_ADDR_VAR 0 4
70965: PUSH
70966: LD_INT 0
70968: ST_TO_ADDR
// for i := 0 to 5 do
70969: LD_ADDR_VAR 0 5
70973: PUSH
70974: DOUBLE
70975: LD_INT 0
70977: DEC
70978: ST_TO_ADDR
70979: LD_INT 5
70981: PUSH
70982: FOR_TO
70983: IFFALSE 71050
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70985: LD_VAR 0 1
70989: PPUSH
70990: LD_VAR 0 5
70994: PPUSH
70995: LD_VAR 0 6
70999: PPUSH
71000: CALL_OW 272
71004: PPUSH
71005: LD_VAR 0 2
71009: PPUSH
71010: LD_VAR 0 5
71014: PPUSH
71015: LD_VAR 0 6
71019: PPUSH
71020: CALL_OW 273
71024: PPUSH
71025: LD_VAR 0 3
71029: PPUSH
71030: CALL_OW 309
71034: IFFALSE 71048
// begin result := true ;
71036: LD_ADDR_VAR 0 4
71040: PUSH
71041: LD_INT 1
71043: ST_TO_ADDR
// exit ;
71044: POP
71045: POP
71046: GO 71052
// end ;
71048: GO 70982
71050: POP
71051: POP
// end ;
71052: LD_VAR 0 4
71056: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71057: LD_INT 0
71059: PPUSH
71060: PPUSH
71061: PPUSH
// if btype = b_depot then
71062: LD_VAR 0 2
71066: PUSH
71067: LD_INT 0
71069: EQUAL
71070: IFFALSE 71082
// begin result := true ;
71072: LD_ADDR_VAR 0 3
71076: PUSH
71077: LD_INT 1
71079: ST_TO_ADDR
// exit ;
71080: GO 71202
// end ; pom := GetBase ( depot ) ;
71082: LD_ADDR_VAR 0 4
71086: PUSH
71087: LD_VAR 0 1
71091: PPUSH
71092: CALL_OW 274
71096: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71097: LD_ADDR_VAR 0 5
71101: PUSH
71102: LD_VAR 0 2
71106: PPUSH
71107: LD_VAR 0 1
71111: PPUSH
71112: CALL_OW 248
71116: PPUSH
71117: CALL_OW 450
71121: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71122: LD_ADDR_VAR 0 3
71126: PUSH
71127: LD_VAR 0 4
71131: PPUSH
71132: LD_INT 1
71134: PPUSH
71135: CALL_OW 275
71139: PUSH
71140: LD_VAR 0 5
71144: PUSH
71145: LD_INT 1
71147: ARRAY
71148: GREATEREQUAL
71149: IFFALSE 71175
71151: PUSH
71152: LD_VAR 0 4
71156: PPUSH
71157: LD_INT 2
71159: PPUSH
71160: CALL_OW 275
71164: PUSH
71165: LD_VAR 0 5
71169: PUSH
71170: LD_INT 2
71172: ARRAY
71173: GREATEREQUAL
71174: AND
71175: IFFALSE 71201
71177: PUSH
71178: LD_VAR 0 4
71182: PPUSH
71183: LD_INT 3
71185: PPUSH
71186: CALL_OW 275
71190: PUSH
71191: LD_VAR 0 5
71195: PUSH
71196: LD_INT 3
71198: ARRAY
71199: GREATEREQUAL
71200: AND
71201: ST_TO_ADDR
// end ;
71202: LD_VAR 0 3
71206: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71207: LD_INT 0
71209: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71210: LD_VAR 0 1
71214: PPUSH
71215: LD_VAR 0 2
71219: PPUSH
71220: LD_INT 0
71222: PPUSH
71223: LD_INT 0
71225: PPUSH
71226: LD_INT 1
71228: PPUSH
71229: LD_INT 0
71231: PPUSH
71232: CALL_OW 587
// end ;
71236: LD_VAR 0 3
71240: RET
// export function CenterOnNow ( unit ) ; begin
71241: LD_INT 0
71243: PPUSH
// result := IsInUnit ( unit ) ;
71244: LD_ADDR_VAR 0 2
71248: PUSH
71249: LD_VAR 0 1
71253: PPUSH
71254: CALL_OW 310
71258: ST_TO_ADDR
// if not result then
71259: LD_VAR 0 2
71263: NOT
71264: IFFALSE 71276
// result := unit ;
71266: LD_ADDR_VAR 0 2
71270: PUSH
71271: LD_VAR 0 1
71275: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71276: LD_VAR 0 1
71280: PPUSH
71281: CALL_OW 87
// end ;
71285: LD_VAR 0 2
71289: RET
// export function ComMoveHex ( unit , hex ) ; begin
71290: LD_INT 0
71292: PPUSH
// if not hex then
71293: LD_VAR 0 2
71297: NOT
71298: IFFALSE 71302
// exit ;
71300: GO 71355
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71302: LD_VAR 0 2
71306: PUSH
71307: LD_INT 1
71309: ARRAY
71310: PPUSH
71311: LD_VAR 0 2
71315: PUSH
71316: LD_INT 2
71318: ARRAY
71319: PPUSH
71320: CALL_OW 428
71324: IFFALSE 71328
// exit ;
71326: GO 71355
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71328: LD_VAR 0 1
71332: PPUSH
71333: LD_VAR 0 2
71337: PUSH
71338: LD_INT 1
71340: ARRAY
71341: PPUSH
71342: LD_VAR 0 2
71346: PUSH
71347: LD_INT 2
71349: ARRAY
71350: PPUSH
71351: CALL_OW 111
// end ;
71355: LD_VAR 0 3
71359: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71360: LD_INT 0
71362: PPUSH
71363: PPUSH
71364: PPUSH
// if not unit or not enemy then
71365: LD_VAR 0 1
71369: NOT
71370: IFTRUE 71379
71372: PUSH
71373: LD_VAR 0 2
71377: NOT
71378: OR
71379: IFFALSE 71383
// exit ;
71381: GO 71509
// x := GetX ( enemy ) ;
71383: LD_ADDR_VAR 0 4
71387: PUSH
71388: LD_VAR 0 2
71392: PPUSH
71393: CALL_OW 250
71397: ST_TO_ADDR
// y := GetY ( enemy ) ;
71398: LD_ADDR_VAR 0 5
71402: PUSH
71403: LD_VAR 0 2
71407: PPUSH
71408: CALL_OW 251
71412: ST_TO_ADDR
// if ValidHex ( x , y ) then
71413: LD_VAR 0 4
71417: PPUSH
71418: LD_VAR 0 5
71422: PPUSH
71423: CALL_OW 488
71427: IFFALSE 71509
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71429: LD_VAR 0 2
71433: PPUSH
71434: CALL_OW 247
71438: PUSH
71439: LD_INT 3
71441: PUSH
71442: LD_INT 2
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: IN
71449: IFTRUE 71472
71451: PUSH
71452: LD_VAR 0 1
71456: PPUSH
71457: CALL_OW 255
71461: PPUSH
71462: LD_VAR 0 2
71466: PPUSH
71467: CALL_OW 292
71471: OR
71472: IFFALSE 71490
// ComAttackUnit ( unit , enemy ) else
71474: LD_VAR 0 1
71478: PPUSH
71479: LD_VAR 0 2
71483: PPUSH
71484: CALL_OW 115
71488: GO 71509
// ComAgressiveMove ( unit , x , y ) ;
71490: LD_VAR 0 1
71494: PPUSH
71495: LD_VAR 0 4
71499: PPUSH
71500: LD_VAR 0 5
71504: PPUSH
71505: CALL_OW 114
// end ;
71509: LD_VAR 0 3
71513: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71514: LD_INT 0
71516: PPUSH
71517: PPUSH
71518: PPUSH
// list := AreaToList ( area , 0 ) ;
71519: LD_ADDR_VAR 0 5
71523: PUSH
71524: LD_VAR 0 1
71528: PPUSH
71529: LD_INT 0
71531: PPUSH
71532: CALL_OW 517
71536: ST_TO_ADDR
// if not list then
71537: LD_VAR 0 5
71541: NOT
71542: IFFALSE 71546
// exit ;
71544: GO 71676
// if all then
71546: LD_VAR 0 2
71550: IFFALSE 71638
// begin for i := 1 to list [ 1 ] do
71552: LD_ADDR_VAR 0 4
71556: PUSH
71557: DOUBLE
71558: LD_INT 1
71560: DEC
71561: ST_TO_ADDR
71562: LD_VAR 0 5
71566: PUSH
71567: LD_INT 1
71569: ARRAY
71570: PUSH
71571: FOR_TO
71572: IFFALSE 71634
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71574: LD_ADDR_VAR 0 3
71578: PUSH
71579: LD_VAR 0 3
71583: PPUSH
71584: LD_VAR 0 3
71588: PUSH
71589: LD_INT 1
71591: PLUS
71592: PPUSH
71593: LD_VAR 0 5
71597: PUSH
71598: LD_INT 1
71600: ARRAY
71601: PUSH
71602: LD_VAR 0 4
71606: ARRAY
71607: PUSH
71608: LD_VAR 0 5
71612: PUSH
71613: LD_INT 2
71615: ARRAY
71616: PUSH
71617: LD_VAR 0 4
71621: ARRAY
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PPUSH
71627: CALL_OW 1
71631: ST_TO_ADDR
71632: GO 71571
71634: POP
71635: POP
// exit ;
71636: GO 71676
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71638: LD_ADDR_VAR 0 3
71642: PUSH
71643: LD_VAR 0 5
71647: PUSH
71648: LD_INT 1
71650: ARRAY
71651: PUSH
71652: LD_INT 1
71654: ARRAY
71655: PUSH
71656: LD_VAR 0 5
71660: PUSH
71661: LD_INT 2
71663: ARRAY
71664: PUSH
71665: LD_INT 1
71667: ARRAY
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: EMPTY
71674: LIST
71675: ST_TO_ADDR
// end ;
71676: LD_VAR 0 3
71680: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71681: LD_INT 0
71683: PPUSH
71684: PPUSH
// list := AreaToList ( area , 0 ) ;
71685: LD_ADDR_VAR 0 4
71689: PUSH
71690: LD_VAR 0 1
71694: PPUSH
71695: LD_INT 0
71697: PPUSH
71698: CALL_OW 517
71702: ST_TO_ADDR
// if not list then
71703: LD_VAR 0 4
71707: NOT
71708: IFFALSE 71712
// exit ;
71710: GO 71753
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71712: LD_ADDR_VAR 0 3
71716: PUSH
71717: LD_VAR 0 4
71721: PUSH
71722: LD_INT 1
71724: ARRAY
71725: PUSH
71726: LD_INT 1
71728: ARRAY
71729: PUSH
71730: LD_VAR 0 4
71734: PUSH
71735: LD_INT 2
71737: ARRAY
71738: PUSH
71739: LD_INT 1
71741: ARRAY
71742: PUSH
71743: LD_VAR 0 2
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: LIST
71752: ST_TO_ADDR
// end ;
71753: LD_VAR 0 3
71757: RET
// export function First ( array ) ; begin
71758: LD_INT 0
71760: PPUSH
// if not array then
71761: LD_VAR 0 1
71765: NOT
71766: IFFALSE 71770
// exit ;
71768: GO 71784
// result := array [ 1 ] ;
71770: LD_ADDR_VAR 0 2
71774: PUSH
71775: LD_VAR 0 1
71779: PUSH
71780: LD_INT 1
71782: ARRAY
71783: ST_TO_ADDR
// end ;
71784: LD_VAR 0 2
71788: RET
// export function Last ( array ) ; begin
71789: LD_INT 0
71791: PPUSH
// if not array then
71792: LD_VAR 0 1
71796: NOT
71797: IFFALSE 71801
// exit ;
71799: GO 71817
// result := array [ array ] ;
71801: LD_ADDR_VAR 0 2
71805: PUSH
71806: LD_VAR 0 1
71810: PUSH
71811: LD_VAR 0 1
71815: ARRAY
71816: ST_TO_ADDR
// end ;
71817: LD_VAR 0 2
71821: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71822: LD_INT 0
71824: PPUSH
71825: PPUSH
// result := [ ] ;
71826: LD_ADDR_VAR 0 5
71830: PUSH
71831: EMPTY
71832: ST_TO_ADDR
// if not array then
71833: LD_VAR 0 1
71837: NOT
71838: IFFALSE 71842
// exit ;
71840: GO 71954
// for i := 1 to array do
71842: LD_ADDR_VAR 0 6
71846: PUSH
71847: DOUBLE
71848: LD_INT 1
71850: DEC
71851: ST_TO_ADDR
71852: LD_VAR 0 1
71856: PUSH
71857: FOR_TO
71858: IFFALSE 71952
// if array [ i ] [ index ] = value then
71860: LD_VAR 0 1
71864: PUSH
71865: LD_VAR 0 6
71869: ARRAY
71870: PUSH
71871: LD_VAR 0 2
71875: ARRAY
71876: PUSH
71877: LD_VAR 0 3
71881: EQUAL
71882: IFFALSE 71950
// begin if indexColumn then
71884: LD_VAR 0 4
71888: IFFALSE 71924
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71890: LD_ADDR_VAR 0 5
71894: PUSH
71895: LD_VAR 0 5
71899: PPUSH
71900: LD_VAR 0 1
71904: PUSH
71905: LD_VAR 0 6
71909: ARRAY
71910: PUSH
71911: LD_VAR 0 4
71915: ARRAY
71916: PPUSH
71917: CALL 66962 0 2
71921: ST_TO_ADDR
71922: GO 71950
// result := Join ( result , array [ i ] ) ;
71924: LD_ADDR_VAR 0 5
71928: PUSH
71929: LD_VAR 0 5
71933: PPUSH
71934: LD_VAR 0 1
71938: PUSH
71939: LD_VAR 0 6
71943: ARRAY
71944: PPUSH
71945: CALL 66962 0 2
71949: ST_TO_ADDR
// end ;
71950: GO 71857
71952: POP
71953: POP
// end ;
71954: LD_VAR 0 5
71958: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71959: LD_INT 0
71961: PPUSH
// if not vehicles or not parkingPoint then
71962: LD_VAR 0 1
71966: NOT
71967: IFTRUE 71976
71969: PUSH
71970: LD_VAR 0 2
71974: NOT
71975: OR
71976: IFFALSE 71980
// exit ;
71978: GO 72078
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71980: LD_ADDR_VAR 0 1
71984: PUSH
71985: LD_VAR 0 1
71989: PPUSH
71990: LD_INT 50
71992: PUSH
71993: EMPTY
71994: LIST
71995: PUSH
71996: LD_INT 3
71998: PUSH
71999: LD_INT 92
72001: PUSH
72002: LD_VAR 0 2
72006: PUSH
72007: LD_INT 1
72009: ARRAY
72010: PUSH
72011: LD_VAR 0 2
72015: PUSH
72016: LD_INT 2
72018: ARRAY
72019: PUSH
72020: LD_INT 8
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PPUSH
72037: CALL_OW 72
72041: ST_TO_ADDR
// if not vehicles then
72042: LD_VAR 0 1
72046: NOT
72047: IFFALSE 72051
// exit ;
72049: GO 72078
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72051: LD_VAR 0 1
72055: PPUSH
72056: LD_VAR 0 2
72060: PUSH
72061: LD_INT 1
72063: ARRAY
72064: PPUSH
72065: LD_VAR 0 2
72069: PUSH
72070: LD_INT 2
72072: ARRAY
72073: PPUSH
72074: CALL_OW 111
// end ;
72078: LD_VAR 0 3
72082: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72083: LD_INT 0
72085: PPUSH
72086: PPUSH
72087: PPUSH
// if not side or not area then
72088: LD_VAR 0 1
72092: NOT
72093: IFTRUE 72102
72095: PUSH
72096: LD_VAR 0 2
72100: NOT
72101: OR
72102: IFFALSE 72106
// exit ;
72104: GO 72225
// tmp := AreaToList ( area , 0 ) ;
72106: LD_ADDR_VAR 0 5
72110: PUSH
72111: LD_VAR 0 2
72115: PPUSH
72116: LD_INT 0
72118: PPUSH
72119: CALL_OW 517
72123: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72124: LD_ADDR_VAR 0 4
72128: PUSH
72129: DOUBLE
72130: LD_INT 1
72132: DEC
72133: ST_TO_ADDR
72134: LD_VAR 0 5
72138: PUSH
72139: LD_INT 1
72141: ARRAY
72142: PUSH
72143: FOR_TO
72144: IFFALSE 72223
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72146: LD_VAR 0 5
72150: PUSH
72151: LD_INT 1
72153: ARRAY
72154: PUSH
72155: LD_VAR 0 4
72159: ARRAY
72160: PPUSH
72161: LD_VAR 0 5
72165: PUSH
72166: LD_INT 2
72168: ARRAY
72169: PUSH
72170: LD_VAR 0 4
72174: ARRAY
72175: PPUSH
72176: CALL_OW 351
72180: IFFALSE 72221
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72182: LD_VAR 0 5
72186: PUSH
72187: LD_INT 1
72189: ARRAY
72190: PUSH
72191: LD_VAR 0 4
72195: ARRAY
72196: PPUSH
72197: LD_VAR 0 5
72201: PUSH
72202: LD_INT 2
72204: ARRAY
72205: PUSH
72206: LD_VAR 0 4
72210: ARRAY
72211: PPUSH
72212: LD_VAR 0 1
72216: PPUSH
72217: CALL_OW 244
// end ;
72221: GO 72143
72223: POP
72224: POP
// end ;
72225: LD_VAR 0 3
72229: RET
// export function UniqueArray ( array ) ; var i ; begin
72230: LD_INT 0
72232: PPUSH
72233: PPUSH
// result := [ ] ;
72234: LD_ADDR_VAR 0 2
72238: PUSH
72239: EMPTY
72240: ST_TO_ADDR
// if not array then
72241: LD_VAR 0 1
72245: NOT
72246: IFFALSE 72250
// exit ;
72248: GO 72311
// for i := 1 to array do
72250: LD_ADDR_VAR 0 3
72254: PUSH
72255: DOUBLE
72256: LD_INT 1
72258: DEC
72259: ST_TO_ADDR
72260: LD_VAR 0 1
72264: PUSH
72265: FOR_TO
72266: IFFALSE 72309
// if not array [ i ] in result then
72268: LD_VAR 0 1
72272: PUSH
72273: LD_VAR 0 3
72277: ARRAY
72278: PUSH
72279: LD_VAR 0 2
72283: IN
72284: NOT
72285: IFFALSE 72307
// result := Join ( result , i ) ;
72287: LD_ADDR_VAR 0 2
72291: PUSH
72292: LD_VAR 0 2
72296: PPUSH
72297: LD_VAR 0 3
72301: PPUSH
72302: CALL 66962 0 2
72306: ST_TO_ADDR
72307: GO 72265
72309: POP
72310: POP
// end ; end_of_file
72311: LD_VAR 0 2
72315: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72316: LD_VAR 0 1
72320: PUSH
72321: LD_INT 200
72323: DOUBLE
72324: GREATEREQUAL
72325: IFFALSE 72333
72327: LD_INT 299
72329: DOUBLE
72330: LESSEQUAL
72331: IFTRUE 72335
72333: GO 72367
72335: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72336: LD_VAR 0 1
72340: PPUSH
72341: LD_VAR 0 2
72345: PPUSH
72346: LD_VAR 0 3
72350: PPUSH
72351: LD_VAR 0 4
72355: PPUSH
72356: LD_VAR 0 5
72360: PPUSH
72361: CALL 24073 0 5
72365: GO 72444
72367: LD_INT 300
72369: DOUBLE
72370: GREATEREQUAL
72371: IFFALSE 72379
72373: LD_INT 399
72375: DOUBLE
72376: LESSEQUAL
72377: IFTRUE 72381
72379: GO 72443
72381: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72382: LD_VAR 0 1
72386: PPUSH
72387: LD_VAR 0 2
72391: PPUSH
72392: LD_VAR 0 3
72396: PPUSH
72397: LD_VAR 0 4
72401: PPUSH
72402: LD_VAR 0 5
72406: PPUSH
72407: LD_VAR 0 6
72411: PPUSH
72412: LD_VAR 0 7
72416: PPUSH
72417: LD_VAR 0 8
72421: PPUSH
72422: LD_VAR 0 9
72426: PPUSH
72427: LD_VAR 0 10
72431: PPUSH
72432: LD_VAR 0 11
72436: PPUSH
72437: CALL 19957 0 11
72441: GO 72444
72443: POP
// end ;
72444: PPOPN 11
72446: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72447: LD_VAR 0 1
72451: PPUSH
72452: LD_VAR 0 2
72456: PPUSH
72457: LD_VAR 0 3
72461: PPUSH
72462: LD_VAR 0 4
72466: PPUSH
72467: LD_VAR 0 5
72471: PPUSH
72472: CALL 23454 0 5
// end ; end_of_file
72476: PPOPN 5
72478: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72479: LD_VAR 0 1
72483: PPUSH
72484: LD_VAR 0 2
72488: PPUSH
72489: LD_VAR 0 3
72493: PPUSH
72494: LD_VAR 0 4
72498: PPUSH
72499: LD_VAR 0 5
72503: PPUSH
72504: LD_VAR 0 6
72508: PPUSH
72509: CALL 7497 0 6
// end ;
72513: PPOPN 6
72515: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72516: LD_INT 0
72518: PPUSH
// begin if not units then
72519: LD_VAR 0 1
72523: NOT
72524: IFFALSE 72528
// exit ;
72526: GO 72528
// end ;
72528: PPOPN 7
72530: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72531: CALL 7384 0 0
// end ;
72535: PPOPN 1
72537: END
